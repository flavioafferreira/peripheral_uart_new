
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	50 30 03 20 ad 06 01 00 33 5a 02 00 81 06 01 00     P0. ....3Z......
    8010:	81 06 01 00 81 06 01 00 81 06 01 00 81 06 01 00     ................
	...
    802c:	65 ff 00 00 81 06 01 00 00 00 00 00 05 ff 00 00     e...............
    803c:	81 06 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8050:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8060:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8070:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8080:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8090:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    80a0:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    80b0:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    80c0:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    80d0:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    80e0:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    80f0:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8100:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8110:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8120:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8130:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8140:	ed ff 00 00 ed ff 00 00 ed ff 00 00 ed ff 00 00     ................
    8150:	ed ff 00 00                                         ....

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2f>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88fc:	bf24      	itt	cs
    88fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8906:	d90d      	bls.n	8924 <__aeabi_d2f+0x30>
    8908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    890c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    891c:	bf08      	it	eq
    891e:	f020 0001 	biceq.w	r0, r0, #1
    8922:	4770      	bx	lr
    8924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8928:	d121      	bne.n	896e <__aeabi_d2f+0x7a>
    892a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    892e:	bfbc      	itt	lt
    8930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8934:	4770      	bxlt	lr
    8936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    893a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    893e:	f1c2 0218 	rsb	r2, r2, #24
    8942:	f1c2 0c20 	rsb	ip, r2, #32
    8946:	fa10 f30c 	lsls.w	r3, r0, ip
    894a:	fa20 f002 	lsr.w	r0, r0, r2
    894e:	bf18      	it	ne
    8950:	f040 0001 	orrne.w	r0, r0, #1
    8954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    895c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8960:	ea40 000c 	orr.w	r0, r0, ip
    8964:	fa23 f302 	lsr.w	r3, r3, r2
    8968:	ea4f 0343 	mov.w	r3, r3, lsl #1
    896c:	e7cc      	b.n	8908 <__aeabi_d2f+0x14>
    896e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8972:	d107      	bne.n	8984 <__aeabi_d2f+0x90>
    8974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8978:	bf1e      	ittt	ne
    897a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    897e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8982:	4770      	bxne	lr
    8984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    898c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8990:	4770      	bx	lr
    8992:	bf00      	nop

00008994 <__aeabi_frsub>:
    8994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8998:	e002      	b.n	89a0 <__addsf3>
    899a:	bf00      	nop

0000899c <__aeabi_fsub>:
    899c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089a0 <__addsf3>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	bf1f      	itttt	ne
    89a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89a8:	ea92 0f03 	teqne	r2, r3
    89ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    89b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b4:	d06a      	beq.n	8a8c <__addsf3+0xec>
    89b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    89ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    89be:	bfc1      	itttt	gt
    89c0:	18d2      	addgt	r2, r2, r3
    89c2:	4041      	eorgt	r1, r0
    89c4:	4048      	eorgt	r0, r1
    89c6:	4041      	eorgt	r1, r0
    89c8:	bfb8      	it	lt
    89ca:	425b      	neglt	r3, r3
    89cc:	2b19      	cmp	r3, #25
    89ce:	bf88      	it	hi
    89d0:	4770      	bxhi	lr
    89d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    89d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89de:	bf18      	it	ne
    89e0:	4240      	negne	r0, r0
    89e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    89e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    89ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    89ee:	bf18      	it	ne
    89f0:	4249      	negne	r1, r1
    89f2:	ea92 0f03 	teq	r2, r3
    89f6:	d03f      	beq.n	8a78 <__addsf3+0xd8>
    89f8:	f1a2 0201 	sub.w	r2, r2, #1
    89fc:	fa41 fc03 	asr.w	ip, r1, r3
    8a00:	eb10 000c 	adds.w	r0, r0, ip
    8a04:	f1c3 0320 	rsb	r3, r3, #32
    8a08:	fa01 f103 	lsl.w	r1, r1, r3
    8a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a10:	d502      	bpl.n	8a18 <__addsf3+0x78>
    8a12:	4249      	negs	r1, r1
    8a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a1c:	d313      	bcc.n	8a46 <__addsf3+0xa6>
    8a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a22:	d306      	bcc.n	8a32 <__addsf3+0x92>
    8a24:	0840      	lsrs	r0, r0, #1
    8a26:	ea4f 0131 	mov.w	r1, r1, rrx
    8a2a:	f102 0201 	add.w	r2, r2, #1
    8a2e:	2afe      	cmp	r2, #254	; 0xfe
    8a30:	d251      	bcs.n	8ad6 <__addsf3+0x136>
    8a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a3a:	bf08      	it	eq
    8a3c:	f020 0001 	biceq.w	r0, r0, #1
    8a40:	ea40 0003 	orr.w	r0, r0, r3
    8a44:	4770      	bx	lr
    8a46:	0049      	lsls	r1, r1, #1
    8a48:	eb40 0000 	adc.w	r0, r0, r0
    8a4c:	3a01      	subs	r2, #1
    8a4e:	bf28      	it	cs
    8a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8a54:	d2ed      	bcs.n	8a32 <__addsf3+0x92>
    8a56:	fab0 fc80 	clz	ip, r0
    8a5a:	f1ac 0c08 	sub.w	ip, ip, #8
    8a5e:	ebb2 020c 	subs.w	r2, r2, ip
    8a62:	fa00 f00c 	lsl.w	r0, r0, ip
    8a66:	bfaa      	itet	ge
    8a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8a6c:	4252      	neglt	r2, r2
    8a6e:	4318      	orrge	r0, r3
    8a70:	bfbc      	itt	lt
    8a72:	40d0      	lsrlt	r0, r2
    8a74:	4318      	orrlt	r0, r3
    8a76:	4770      	bx	lr
    8a78:	f092 0f00 	teq	r2, #0
    8a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8a80:	bf06      	itte	eq
    8a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8a86:	3201      	addeq	r2, #1
    8a88:	3b01      	subne	r3, #1
    8a8a:	e7b5      	b.n	89f8 <__addsf3+0x58>
    8a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8a94:	bf18      	it	ne
    8a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a9a:	d021      	beq.n	8ae0 <__addsf3+0x140>
    8a9c:	ea92 0f03 	teq	r2, r3
    8aa0:	d004      	beq.n	8aac <__addsf3+0x10c>
    8aa2:	f092 0f00 	teq	r2, #0
    8aa6:	bf08      	it	eq
    8aa8:	4608      	moveq	r0, r1
    8aaa:	4770      	bx	lr
    8aac:	ea90 0f01 	teq	r0, r1
    8ab0:	bf1c      	itt	ne
    8ab2:	2000      	movne	r0, #0
    8ab4:	4770      	bxne	lr
    8ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8aba:	d104      	bne.n	8ac6 <__addsf3+0x126>
    8abc:	0040      	lsls	r0, r0, #1
    8abe:	bf28      	it	cs
    8ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ac4:	4770      	bx	lr
    8ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8aca:	bf3c      	itt	cc
    8acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8ad0:	4770      	bxcc	lr
    8ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ade:	4770      	bx	lr
    8ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8ae4:	bf16      	itet	ne
    8ae6:	4608      	movne	r0, r1
    8ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8aec:	4601      	movne	r1, r0
    8aee:	0242      	lsls	r2, r0, #9
    8af0:	bf06      	itte	eq
    8af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8af6:	ea90 0f01 	teqeq	r0, r1
    8afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8afe:	4770      	bx	lr

00008b00 <__aeabi_ui2f>:
    8b00:	f04f 0300 	mov.w	r3, #0
    8b04:	e004      	b.n	8b10 <__aeabi_i2f+0x8>
    8b06:	bf00      	nop

00008b08 <__aeabi_i2f>:
    8b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b0c:	bf48      	it	mi
    8b0e:	4240      	negmi	r0, r0
    8b10:	ea5f 0c00 	movs.w	ip, r0
    8b14:	bf08      	it	eq
    8b16:	4770      	bxeq	lr
    8b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b1c:	4601      	mov	r1, r0
    8b1e:	f04f 0000 	mov.w	r0, #0
    8b22:	e01c      	b.n	8b5e <__aeabi_l2f+0x2a>

00008b24 <__aeabi_ul2f>:
    8b24:	ea50 0201 	orrs.w	r2, r0, r1
    8b28:	bf08      	it	eq
    8b2a:	4770      	bxeq	lr
    8b2c:	f04f 0300 	mov.w	r3, #0
    8b30:	e00a      	b.n	8b48 <__aeabi_l2f+0x14>
    8b32:	bf00      	nop

00008b34 <__aeabi_l2f>:
    8b34:	ea50 0201 	orrs.w	r2, r0, r1
    8b38:	bf08      	it	eq
    8b3a:	4770      	bxeq	lr
    8b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b40:	d502      	bpl.n	8b48 <__aeabi_l2f+0x14>
    8b42:	4240      	negs	r0, r0
    8b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b48:	ea5f 0c01 	movs.w	ip, r1
    8b4c:	bf02      	ittt	eq
    8b4e:	4684      	moveq	ip, r0
    8b50:	4601      	moveq	r1, r0
    8b52:	2000      	moveq	r0, #0
    8b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8b58:	bf08      	it	eq
    8b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8b62:	fabc f28c 	clz	r2, ip
    8b66:	3a08      	subs	r2, #8
    8b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8b6c:	db10      	blt.n	8b90 <__aeabi_l2f+0x5c>
    8b6e:	fa01 fc02 	lsl.w	ip, r1, r2
    8b72:	4463      	add	r3, ip
    8b74:	fa00 fc02 	lsl.w	ip, r0, r2
    8b78:	f1c2 0220 	rsb	r2, r2, #32
    8b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8b80:	fa20 f202 	lsr.w	r2, r0, r2
    8b84:	eb43 0002 	adc.w	r0, r3, r2
    8b88:	bf08      	it	eq
    8b8a:	f020 0001 	biceq.w	r0, r0, #1
    8b8e:	4770      	bx	lr
    8b90:	f102 0220 	add.w	r2, r2, #32
    8b94:	fa01 fc02 	lsl.w	ip, r1, r2
    8b98:	f1c2 0220 	rsb	r2, r2, #32
    8b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8ba0:	fa21 f202 	lsr.w	r2, r1, r2
    8ba4:	eb43 0002 	adc.w	r0, r3, r2
    8ba8:	bf08      	it	eq
    8baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bae:	4770      	bx	lr

00008bb0 <__aeabi_fmul>:
    8bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8bb8:	bf1e      	ittt	ne
    8bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8bbe:	ea92 0f0c 	teqne	r2, ip
    8bc2:	ea93 0f0c 	teqne	r3, ip
    8bc6:	d06f      	beq.n	8ca8 <__aeabi_fmul+0xf8>
    8bc8:	441a      	add	r2, r3
    8bca:	ea80 0c01 	eor.w	ip, r0, r1
    8bce:	0240      	lsls	r0, r0, #9
    8bd0:	bf18      	it	ne
    8bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8bd6:	d01e      	beq.n	8c16 <__aeabi_fmul+0x66>
    8bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8be4:	fba0 3101 	umull	r3, r1, r0, r1
    8be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8bf0:	bf3e      	ittt	cc
    8bf2:	0049      	lslcc	r1, r1, #1
    8bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8bf8:	005b      	lslcc	r3, r3, #1
    8bfa:	ea40 0001 	orr.w	r0, r0, r1
    8bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c02:	2afd      	cmp	r2, #253	; 0xfd
    8c04:	d81d      	bhi.n	8c42 <__aeabi_fmul+0x92>
    8c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c0e:	bf08      	it	eq
    8c10:	f020 0001 	biceq.w	r0, r0, #1
    8c14:	4770      	bx	lr
    8c16:	f090 0f00 	teq	r0, #0
    8c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c1e:	bf08      	it	eq
    8c20:	0249      	lsleq	r1, r1, #9
    8c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c2a:	3a7f      	subs	r2, #127	; 0x7f
    8c2c:	bfc2      	ittt	gt
    8c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c36:	4770      	bxgt	lr
    8c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	3a01      	subs	r2, #1
    8c42:	dc5d      	bgt.n	8d00 <__aeabi_fmul+0x150>
    8c44:	f112 0f19 	cmn.w	r2, #25
    8c48:	bfdc      	itt	le
    8c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c4e:	4770      	bxle	lr
    8c50:	f1c2 0200 	rsb	r2, r2, #0
    8c54:	0041      	lsls	r1, r0, #1
    8c56:	fa21 f102 	lsr.w	r1, r1, r2
    8c5a:	f1c2 0220 	rsb	r2, r2, #32
    8c5e:	fa00 fc02 	lsl.w	ip, r0, r2
    8c62:	ea5f 0031 	movs.w	r0, r1, rrx
    8c66:	f140 0000 	adc.w	r0, r0, #0
    8c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8c6e:	bf08      	it	eq
    8c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8c74:	4770      	bx	lr
    8c76:	f092 0f00 	teq	r2, #0
    8c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8c7e:	bf02      	ittt	eq
    8c80:	0040      	lsleq	r0, r0, #1
    8c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8c86:	3a01      	subeq	r2, #1
    8c88:	d0f9      	beq.n	8c7e <__aeabi_fmul+0xce>
    8c8a:	ea40 000c 	orr.w	r0, r0, ip
    8c8e:	f093 0f00 	teq	r3, #0
    8c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8c96:	bf02      	ittt	eq
    8c98:	0049      	lsleq	r1, r1, #1
    8c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8c9e:	3b01      	subeq	r3, #1
    8ca0:	d0f9      	beq.n	8c96 <__aeabi_fmul+0xe6>
    8ca2:	ea41 010c 	orr.w	r1, r1, ip
    8ca6:	e78f      	b.n	8bc8 <__aeabi_fmul+0x18>
    8ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cac:	ea92 0f0c 	teq	r2, ip
    8cb0:	bf18      	it	ne
    8cb2:	ea93 0f0c 	teqne	r3, ip
    8cb6:	d00a      	beq.n	8cce <__aeabi_fmul+0x11e>
    8cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8cbc:	bf18      	it	ne
    8cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8cc2:	d1d8      	bne.n	8c76 <__aeabi_fmul+0xc6>
    8cc4:	ea80 0001 	eor.w	r0, r0, r1
    8cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ccc:	4770      	bx	lr
    8cce:	f090 0f00 	teq	r0, #0
    8cd2:	bf17      	itett	ne
    8cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8cd8:	4608      	moveq	r0, r1
    8cda:	f091 0f00 	teqne	r1, #0
    8cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8ce2:	d014      	beq.n	8d0e <__aeabi_fmul+0x15e>
    8ce4:	ea92 0f0c 	teq	r2, ip
    8ce8:	d101      	bne.n	8cee <__aeabi_fmul+0x13e>
    8cea:	0242      	lsls	r2, r0, #9
    8cec:	d10f      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cee:	ea93 0f0c 	teq	r3, ip
    8cf2:	d103      	bne.n	8cfc <__aeabi_fmul+0x14c>
    8cf4:	024b      	lsls	r3, r1, #9
    8cf6:	bf18      	it	ne
    8cf8:	4608      	movne	r0, r1
    8cfa:	d108      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cfc:	ea80 0001 	eor.w	r0, r0, r1
    8d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d0c:	4770      	bx	lr
    8d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d16:	4770      	bx	lr

00008d18 <__aeabi_fdiv>:
    8d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d20:	bf1e      	ittt	ne
    8d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d26:	ea92 0f0c 	teqne	r2, ip
    8d2a:	ea93 0f0c 	teqne	r3, ip
    8d2e:	d069      	beq.n	8e04 <__aeabi_fdiv+0xec>
    8d30:	eba2 0203 	sub.w	r2, r2, r3
    8d34:	ea80 0c01 	eor.w	ip, r0, r1
    8d38:	0249      	lsls	r1, r1, #9
    8d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d3e:	d037      	beq.n	8db0 <__aeabi_fdiv+0x98>
    8d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8d50:	428b      	cmp	r3, r1
    8d52:	bf38      	it	cc
    8d54:	005b      	lslcc	r3, r3, #1
    8d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8d5e:	428b      	cmp	r3, r1
    8d60:	bf24      	itt	cs
    8d62:	1a5b      	subcs	r3, r3, r1
    8d64:	ea40 000c 	orrcs.w	r0, r0, ip
    8d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8d6c:	bf24      	itt	cs
    8d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8d7a:	bf24      	itt	cs
    8d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8d88:	bf24      	itt	cs
    8d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	bf18      	it	ne
    8d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8d9a:	d1e0      	bne.n	8d5e <__aeabi_fdiv+0x46>
    8d9c:	2afd      	cmp	r2, #253	; 0xfd
    8d9e:	f63f af50 	bhi.w	8c42 <__aeabi_fmul+0x92>
    8da2:	428b      	cmp	r3, r1
    8da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8da8:	bf08      	it	eq
    8daa:	f020 0001 	biceq.w	r0, r0, #1
    8dae:	4770      	bx	lr
    8db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	bfc2      	ittt	gt
    8dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8dc4:	4770      	bxgt	lr
    8dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dca:	f04f 0300 	mov.w	r3, #0
    8dce:	3a01      	subs	r2, #1
    8dd0:	e737      	b.n	8c42 <__aeabi_fmul+0x92>
    8dd2:	f092 0f00 	teq	r2, #0
    8dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8dda:	bf02      	ittt	eq
    8ddc:	0040      	lsleq	r0, r0, #1
    8dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8de2:	3a01      	subeq	r2, #1
    8de4:	d0f9      	beq.n	8dda <__aeabi_fdiv+0xc2>
    8de6:	ea40 000c 	orr.w	r0, r0, ip
    8dea:	f093 0f00 	teq	r3, #0
    8dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8df2:	bf02      	ittt	eq
    8df4:	0049      	lsleq	r1, r1, #1
    8df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dfa:	3b01      	subeq	r3, #1
    8dfc:	d0f9      	beq.n	8df2 <__aeabi_fdiv+0xda>
    8dfe:	ea41 010c 	orr.w	r1, r1, ip
    8e02:	e795      	b.n	8d30 <__aeabi_fdiv+0x18>
    8e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e08:	ea92 0f0c 	teq	r2, ip
    8e0c:	d108      	bne.n	8e20 <__aeabi_fdiv+0x108>
    8e0e:	0242      	lsls	r2, r0, #9
    8e10:	f47f af7d 	bne.w	8d0e <__aeabi_fmul+0x15e>
    8e14:	ea93 0f0c 	teq	r3, ip
    8e18:	f47f af70 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e1c:	4608      	mov	r0, r1
    8e1e:	e776      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e20:	ea93 0f0c 	teq	r3, ip
    8e24:	d104      	bne.n	8e30 <__aeabi_fdiv+0x118>
    8e26:	024b      	lsls	r3, r1, #9
    8e28:	f43f af4c 	beq.w	8cc4 <__aeabi_fmul+0x114>
    8e2c:	4608      	mov	r0, r1
    8e2e:	e76e      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e34:	bf18      	it	ne
    8e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e3a:	d1ca      	bne.n	8dd2 <__aeabi_fdiv+0xba>
    8e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e40:	f47f af5c 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e48:	f47f af3c 	bne.w	8cc4 <__aeabi_fmul+0x114>
    8e4c:	e75f      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e4e:	bf00      	nop

00008e50 <__aeabi_ldivmod>:
    8e50:	b97b      	cbnz	r3, 8e72 <__aeabi_ldivmod+0x22>
    8e52:	b972      	cbnz	r2, 8e72 <__aeabi_ldivmod+0x22>
    8e54:	2900      	cmp	r1, #0
    8e56:	bfbe      	ittt	lt
    8e58:	2000      	movlt	r0, #0
    8e5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8e5e:	e006      	blt.n	8e6e <__aeabi_ldivmod+0x1e>
    8e60:	bf08      	it	eq
    8e62:	2800      	cmpeq	r0, #0
    8e64:	bf1c      	itt	ne
    8e66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8e6a:	f04f 30ff 	movne.w	r0, #4294967295
    8e6e:	f000 b857 	b.w	8f20 <__aeabi_idiv0>
    8e72:	f1ad 0c08 	sub.w	ip, sp, #8
    8e76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8e7a:	2900      	cmp	r1, #0
    8e7c:	db09      	blt.n	8e92 <__aeabi_ldivmod+0x42>
    8e7e:	2b00      	cmp	r3, #0
    8e80:	db1a      	blt.n	8eb8 <__aeabi_ldivmod+0x68>
    8e82:	f000 f915 	bl	90b0 <__udivmoddi4>
    8e86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8e8e:	b004      	add	sp, #16
    8e90:	4770      	bx	lr
    8e92:	4240      	negs	r0, r0
    8e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e98:	2b00      	cmp	r3, #0
    8e9a:	db1b      	blt.n	8ed4 <__aeabi_ldivmod+0x84>
    8e9c:	f000 f908 	bl	90b0 <__udivmoddi4>
    8ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ea8:	b004      	add	sp, #16
    8eaa:	4240      	negs	r0, r0
    8eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8eb0:	4252      	negs	r2, r2
    8eb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eb6:	4770      	bx	lr
    8eb8:	4252      	negs	r2, r2
    8eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ebe:	f000 f8f7 	bl	90b0 <__udivmoddi4>
    8ec2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8eca:	b004      	add	sp, #16
    8ecc:	4240      	negs	r0, r0
    8ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ed2:	4770      	bx	lr
    8ed4:	4252      	negs	r2, r2
    8ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eda:	f000 f8e9 	bl	90b0 <__udivmoddi4>
    8ede:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ee6:	b004      	add	sp, #16
    8ee8:	4252      	negs	r2, r2
    8eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eee:	4770      	bx	lr

00008ef0 <__aeabi_uldivmod>:
    8ef0:	b953      	cbnz	r3, 8f08 <__aeabi_uldivmod+0x18>
    8ef2:	b94a      	cbnz	r2, 8f08 <__aeabi_uldivmod+0x18>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	bf08      	it	eq
    8ef8:	2800      	cmpeq	r0, #0
    8efa:	bf1c      	itt	ne
    8efc:	f04f 31ff 	movne.w	r1, #4294967295
    8f00:	f04f 30ff 	movne.w	r0, #4294967295
    8f04:	f000 b80c 	b.w	8f20 <__aeabi_idiv0>
    8f08:	f1ad 0c08 	sub.w	ip, sp, #8
    8f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f10:	f000 f8ce 	bl	90b0 <__udivmoddi4>
    8f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1c:	b004      	add	sp, #16
    8f1e:	4770      	bx	lr

00008f20 <__aeabi_idiv0>:
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop

00008f24 <__gedf2>:
    8f24:	f04f 3cff 	mov.w	ip, #4294967295
    8f28:	e006      	b.n	8f38 <__cmpdf2+0x4>
    8f2a:	bf00      	nop

00008f2c <__ledf2>:
    8f2c:	f04f 0c01 	mov.w	ip, #1
    8f30:	e002      	b.n	8f38 <__cmpdf2+0x4>
    8f32:	bf00      	nop

00008f34 <__cmpdf2>:
    8f34:	f04f 0c01 	mov.w	ip, #1
    8f38:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f48:	bf18      	it	ne
    8f4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f4e:	d01b      	beq.n	8f88 <__cmpdf2+0x54>
    8f50:	b001      	add	sp, #4
    8f52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f56:	bf0c      	ite	eq
    8f58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f5c:	ea91 0f03 	teqne	r1, r3
    8f60:	bf02      	ittt	eq
    8f62:	ea90 0f02 	teqeq	r0, r2
    8f66:	2000      	moveq	r0, #0
    8f68:	4770      	bxeq	lr
    8f6a:	f110 0f00 	cmn.w	r0, #0
    8f6e:	ea91 0f03 	teq	r1, r3
    8f72:	bf58      	it	pl
    8f74:	4299      	cmppl	r1, r3
    8f76:	bf08      	it	eq
    8f78:	4290      	cmpeq	r0, r2
    8f7a:	bf2c      	ite	cs
    8f7c:	17d8      	asrcs	r0, r3, #31
    8f7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8f82:	f040 0001 	orr.w	r0, r0, #1
    8f86:	4770      	bx	lr
    8f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f90:	d102      	bne.n	8f98 <__cmpdf2+0x64>
    8f92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8f96:	d107      	bne.n	8fa8 <__cmpdf2+0x74>
    8f98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fa0:	d1d6      	bne.n	8f50 <__cmpdf2+0x1c>
    8fa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8fa6:	d0d3      	beq.n	8f50 <__cmpdf2+0x1c>
    8fa8:	f85d 0b04 	ldr.w	r0, [sp], #4
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__aeabi_cdrcmple>:
    8fb0:	4684      	mov	ip, r0
    8fb2:	4610      	mov	r0, r2
    8fb4:	4662      	mov	r2, ip
    8fb6:	468c      	mov	ip, r1
    8fb8:	4619      	mov	r1, r3
    8fba:	4663      	mov	r3, ip
    8fbc:	e000      	b.n	8fc0 <__aeabi_cdcmpeq>
    8fbe:	bf00      	nop

00008fc0 <__aeabi_cdcmpeq>:
    8fc0:	b501      	push	{r0, lr}
    8fc2:	f7ff ffb7 	bl	8f34 <__cmpdf2>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	bf48      	it	mi
    8fca:	f110 0f00 	cmnmi.w	r0, #0
    8fce:	bd01      	pop	{r0, pc}

00008fd0 <__aeabi_dcmpeq>:
    8fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fd4:	f7ff fff4 	bl	8fc0 <__aeabi_cdcmpeq>
    8fd8:	bf0c      	ite	eq
    8fda:	2001      	moveq	r0, #1
    8fdc:	2000      	movne	r0, #0
    8fde:	f85d fb08 	ldr.w	pc, [sp], #8
    8fe2:	bf00      	nop

00008fe4 <__aeabi_dcmplt>:
    8fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fe8:	f7ff ffea 	bl	8fc0 <__aeabi_cdcmpeq>
    8fec:	bf34      	ite	cc
    8fee:	2001      	movcc	r0, #1
    8ff0:	2000      	movcs	r0, #0
    8ff2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ff6:	bf00      	nop

00008ff8 <__aeabi_dcmple>:
    8ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ffc:	f7ff ffe0 	bl	8fc0 <__aeabi_cdcmpeq>
    9000:	bf94      	ite	ls
    9002:	2001      	movls	r0, #1
    9004:	2000      	movhi	r0, #0
    9006:	f85d fb08 	ldr.w	pc, [sp], #8
    900a:	bf00      	nop

0000900c <__aeabi_dcmpge>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff ffce 	bl	8fb0 <__aeabi_cdrcmple>
    9014:	bf94      	ite	ls
    9016:	2001      	movls	r0, #1
    9018:	2000      	movhi	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmpgt>:
    9020:	f84d ed08 	str.w	lr, [sp, #-8]!
    9024:	f7ff ffc4 	bl	8fb0 <__aeabi_cdrcmple>
    9028:	bf34      	ite	cc
    902a:	2001      	movcc	r0, #1
    902c:	2000      	movcs	r0, #0
    902e:	f85d fb08 	ldr.w	pc, [sp], #8
    9032:	bf00      	nop

00009034 <__aeabi_dcmpun>:
    9034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    903c:	d102      	bne.n	9044 <__aeabi_dcmpun+0x10>
    903e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9042:	d10a      	bne.n	905a <__aeabi_dcmpun+0x26>
    9044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    904c:	d102      	bne.n	9054 <__aeabi_dcmpun+0x20>
    904e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9052:	d102      	bne.n	905a <__aeabi_dcmpun+0x26>
    9054:	f04f 0000 	mov.w	r0, #0
    9058:	4770      	bx	lr
    905a:	f04f 0001 	mov.w	r0, #1
    905e:	4770      	bx	lr

00009060 <__aeabi_d2iz>:
    9060:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9068:	d215      	bcs.n	9096 <__aeabi_d2iz+0x36>
    906a:	d511      	bpl.n	9090 <__aeabi_d2iz+0x30>
    906c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9074:	d912      	bls.n	909c <__aeabi_d2iz+0x3c>
    9076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    907a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    907e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9086:	fa23 f002 	lsr.w	r0, r3, r2
    908a:	bf18      	it	ne
    908c:	4240      	negne	r0, r0
    908e:	4770      	bx	lr
    9090:	f04f 0000 	mov.w	r0, #0
    9094:	4770      	bx	lr
    9096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    909a:	d105      	bne.n	90a8 <__aeabi_d2iz+0x48>
    909c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    90a0:	bf08      	it	eq
    90a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    90a6:	4770      	bx	lr
    90a8:	f04f 0000 	mov.w	r0, #0
    90ac:	4770      	bx	lr
    90ae:	bf00      	nop

000090b0 <__udivmoddi4>:
    90b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90b4:	4686      	mov	lr, r0
    90b6:	468c      	mov	ip, r1
    90b8:	4608      	mov	r0, r1
    90ba:	9e08      	ldr	r6, [sp, #32]
    90bc:	4615      	mov	r5, r2
    90be:	4674      	mov	r4, lr
    90c0:	4619      	mov	r1, r3
    90c2:	2b00      	cmp	r3, #0
    90c4:	f040 80c1 	bne.w	924a <__udivmoddi4+0x19a>
    90c8:	4285      	cmp	r5, r0
    90ca:	fab2 f282 	clz	r2, r2
    90ce:	d945      	bls.n	915c <__udivmoddi4+0xac>
    90d0:	b14a      	cbz	r2, 90e6 <__udivmoddi4+0x36>
    90d2:	f1c2 0320 	rsb	r3, r2, #32
    90d6:	fa00 fc02 	lsl.w	ip, r0, r2
    90da:	4095      	lsls	r5, r2
    90dc:	4094      	lsls	r4, r2
    90de:	fa2e f303 	lsr.w	r3, lr, r3
    90e2:	ea43 0c0c 	orr.w	ip, r3, ip
    90e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    90ea:	b2a8      	uxth	r0, r5
    90ec:	0c23      	lsrs	r3, r4, #16
    90ee:	fbbc f8fe 	udiv	r8, ip, lr
    90f2:	fb0e cc18 	mls	ip, lr, r8, ip
    90f6:	fb08 f900 	mul.w	r9, r8, r0
    90fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    90fe:	4599      	cmp	r9, r3
    9100:	d928      	bls.n	9154 <__udivmoddi4+0xa4>
    9102:	18eb      	adds	r3, r5, r3
    9104:	f108 37ff 	add.w	r7, r8, #4294967295
    9108:	d204      	bcs.n	9114 <__udivmoddi4+0x64>
    910a:	4599      	cmp	r9, r3
    910c:	d902      	bls.n	9114 <__udivmoddi4+0x64>
    910e:	f1a8 0702 	sub.w	r7, r8, #2
    9112:	442b      	add	r3, r5
    9114:	eba3 0309 	sub.w	r3, r3, r9
    9118:	b2a4      	uxth	r4, r4
    911a:	fbb3 fcfe 	udiv	ip, r3, lr
    911e:	fb0e 331c 	mls	r3, lr, ip, r3
    9122:	fb0c f000 	mul.w	r0, ip, r0
    9126:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    912a:	42a0      	cmp	r0, r4
    912c:	d914      	bls.n	9158 <__udivmoddi4+0xa8>
    912e:	192c      	adds	r4, r5, r4
    9130:	f10c 33ff 	add.w	r3, ip, #4294967295
    9134:	d204      	bcs.n	9140 <__udivmoddi4+0x90>
    9136:	42a0      	cmp	r0, r4
    9138:	d902      	bls.n	9140 <__udivmoddi4+0x90>
    913a:	f1ac 0302 	sub.w	r3, ip, #2
    913e:	442c      	add	r4, r5
    9140:	1a24      	subs	r4, r4, r0
    9142:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9146:	b11e      	cbz	r6, 9150 <__udivmoddi4+0xa0>
    9148:	40d4      	lsrs	r4, r2
    914a:	2300      	movs	r3, #0
    914c:	6034      	str	r4, [r6, #0]
    914e:	6073      	str	r3, [r6, #4]
    9150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9154:	4647      	mov	r7, r8
    9156:	e7dd      	b.n	9114 <__udivmoddi4+0x64>
    9158:	4663      	mov	r3, ip
    915a:	e7f1      	b.n	9140 <__udivmoddi4+0x90>
    915c:	bb92      	cbnz	r2, 91c4 <__udivmoddi4+0x114>
    915e:	1b43      	subs	r3, r0, r5
    9160:	2101      	movs	r1, #1
    9162:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9166:	b2af      	uxth	r7, r5
    9168:	0c20      	lsrs	r0, r4, #16
    916a:	fbb3 fcfe 	udiv	ip, r3, lr
    916e:	fb0e 331c 	mls	r3, lr, ip, r3
    9172:	fb0c f807 	mul.w	r8, ip, r7
    9176:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    917a:	4598      	cmp	r8, r3
    917c:	d961      	bls.n	9242 <__udivmoddi4+0x192>
    917e:	18eb      	adds	r3, r5, r3
    9180:	f10c 30ff 	add.w	r0, ip, #4294967295
    9184:	d204      	bcs.n	9190 <__udivmoddi4+0xe0>
    9186:	4598      	cmp	r8, r3
    9188:	d902      	bls.n	9190 <__udivmoddi4+0xe0>
    918a:	f1ac 0002 	sub.w	r0, ip, #2
    918e:	442b      	add	r3, r5
    9190:	eba3 0308 	sub.w	r3, r3, r8
    9194:	b2a4      	uxth	r4, r4
    9196:	fbb3 fcfe 	udiv	ip, r3, lr
    919a:	fb0e 331c 	mls	r3, lr, ip, r3
    919e:	fb0c f707 	mul.w	r7, ip, r7
    91a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91a6:	42a7      	cmp	r7, r4
    91a8:	d94d      	bls.n	9246 <__udivmoddi4+0x196>
    91aa:	192c      	adds	r4, r5, r4
    91ac:	f10c 33ff 	add.w	r3, ip, #4294967295
    91b0:	d204      	bcs.n	91bc <__udivmoddi4+0x10c>
    91b2:	42a7      	cmp	r7, r4
    91b4:	d902      	bls.n	91bc <__udivmoddi4+0x10c>
    91b6:	f1ac 0302 	sub.w	r3, ip, #2
    91ba:	442c      	add	r4, r5
    91bc:	1be4      	subs	r4, r4, r7
    91be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91c2:	e7c0      	b.n	9146 <__udivmoddi4+0x96>
    91c4:	f1c2 0320 	rsb	r3, r2, #32
    91c8:	4095      	lsls	r5, r2
    91ca:	4094      	lsls	r4, r2
    91cc:	fa20 f103 	lsr.w	r1, r0, r3
    91d0:	fa2e f303 	lsr.w	r3, lr, r3
    91d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    91d8:	4090      	lsls	r0, r2
    91da:	b2af      	uxth	r7, r5
    91dc:	4303      	orrs	r3, r0
    91de:	fbb1 fcfe 	udiv	ip, r1, lr
    91e2:	fb0e 101c 	mls	r0, lr, ip, r1
    91e6:	0c19      	lsrs	r1, r3, #16
    91e8:	fb0c f807 	mul.w	r8, ip, r7
    91ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    91f0:	4588      	cmp	r8, r1
    91f2:	d922      	bls.n	923a <__udivmoddi4+0x18a>
    91f4:	1869      	adds	r1, r5, r1
    91f6:	f10c 30ff 	add.w	r0, ip, #4294967295
    91fa:	d204      	bcs.n	9206 <__udivmoddi4+0x156>
    91fc:	4588      	cmp	r8, r1
    91fe:	d902      	bls.n	9206 <__udivmoddi4+0x156>
    9200:	f1ac 0002 	sub.w	r0, ip, #2
    9204:	4429      	add	r1, r5
    9206:	eba1 0108 	sub.w	r1, r1, r8
    920a:	b29b      	uxth	r3, r3
    920c:	fbb1 fcfe 	udiv	ip, r1, lr
    9210:	fb0e 111c 	mls	r1, lr, ip, r1
    9214:	fb0c f707 	mul.w	r7, ip, r7
    9218:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    921c:	429f      	cmp	r7, r3
    921e:	d90e      	bls.n	923e <__udivmoddi4+0x18e>
    9220:	18eb      	adds	r3, r5, r3
    9222:	f10c 31ff 	add.w	r1, ip, #4294967295
    9226:	d204      	bcs.n	9232 <__udivmoddi4+0x182>
    9228:	429f      	cmp	r7, r3
    922a:	d902      	bls.n	9232 <__udivmoddi4+0x182>
    922c:	f1ac 0102 	sub.w	r1, ip, #2
    9230:	442b      	add	r3, r5
    9232:	1bdb      	subs	r3, r3, r7
    9234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9238:	e793      	b.n	9162 <__udivmoddi4+0xb2>
    923a:	4660      	mov	r0, ip
    923c:	e7e3      	b.n	9206 <__udivmoddi4+0x156>
    923e:	4661      	mov	r1, ip
    9240:	e7f7      	b.n	9232 <__udivmoddi4+0x182>
    9242:	4660      	mov	r0, ip
    9244:	e7a4      	b.n	9190 <__udivmoddi4+0xe0>
    9246:	4663      	mov	r3, ip
    9248:	e7b8      	b.n	91bc <__udivmoddi4+0x10c>
    924a:	4283      	cmp	r3, r0
    924c:	d906      	bls.n	925c <__udivmoddi4+0x1ac>
    924e:	b916      	cbnz	r6, 9256 <__udivmoddi4+0x1a6>
    9250:	2100      	movs	r1, #0
    9252:	4608      	mov	r0, r1
    9254:	e77c      	b.n	9150 <__udivmoddi4+0xa0>
    9256:	e9c6 e000 	strd	lr, r0, [r6]
    925a:	e7f9      	b.n	9250 <__udivmoddi4+0x1a0>
    925c:	fab3 f783 	clz	r7, r3
    9260:	b98f      	cbnz	r7, 9286 <__udivmoddi4+0x1d6>
    9262:	4283      	cmp	r3, r0
    9264:	d301      	bcc.n	926a <__udivmoddi4+0x1ba>
    9266:	4572      	cmp	r2, lr
    9268:	d808      	bhi.n	927c <__udivmoddi4+0x1cc>
    926a:	ebbe 0402 	subs.w	r4, lr, r2
    926e:	eb60 0303 	sbc.w	r3, r0, r3
    9272:	2001      	movs	r0, #1
    9274:	469c      	mov	ip, r3
    9276:	b91e      	cbnz	r6, 9280 <__udivmoddi4+0x1d0>
    9278:	2100      	movs	r1, #0
    927a:	e769      	b.n	9150 <__udivmoddi4+0xa0>
    927c:	4638      	mov	r0, r7
    927e:	e7fa      	b.n	9276 <__udivmoddi4+0x1c6>
    9280:	e9c6 4c00 	strd	r4, ip, [r6]
    9284:	e7f8      	b.n	9278 <__udivmoddi4+0x1c8>
    9286:	f1c7 0c20 	rsb	ip, r7, #32
    928a:	40bb      	lsls	r3, r7
    928c:	fa0e f507 	lsl.w	r5, lr, r7
    9290:	fa22 f40c 	lsr.w	r4, r2, ip
    9294:	fa2e f10c 	lsr.w	r1, lr, ip
    9298:	40ba      	lsls	r2, r7
    929a:	431c      	orrs	r4, r3
    929c:	fa20 f30c 	lsr.w	r3, r0, ip
    92a0:	40b8      	lsls	r0, r7
    92a2:	ea4f 4914 	mov.w	r9, r4, lsr #16
    92a6:	4301      	orrs	r1, r0
    92a8:	fa1f fe84 	uxth.w	lr, r4
    92ac:	fbb3 f8f9 	udiv	r8, r3, r9
    92b0:	fb09 3018 	mls	r0, r9, r8, r3
    92b4:	0c0b      	lsrs	r3, r1, #16
    92b6:	fb08 fa0e 	mul.w	sl, r8, lr
    92ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    92be:	459a      	cmp	sl, r3
    92c0:	d940      	bls.n	9344 <__udivmoddi4+0x294>
    92c2:	18e3      	adds	r3, r4, r3
    92c4:	f108 30ff 	add.w	r0, r8, #4294967295
    92c8:	d204      	bcs.n	92d4 <__udivmoddi4+0x224>
    92ca:	459a      	cmp	sl, r3
    92cc:	d902      	bls.n	92d4 <__udivmoddi4+0x224>
    92ce:	f1a8 0002 	sub.w	r0, r8, #2
    92d2:	4423      	add	r3, r4
    92d4:	eba3 030a 	sub.w	r3, r3, sl
    92d8:	b289      	uxth	r1, r1
    92da:	fbb3 f8f9 	udiv	r8, r3, r9
    92de:	fb09 3318 	mls	r3, r9, r8, r3
    92e2:	fb08 fe0e 	mul.w	lr, r8, lr
    92e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    92ea:	458e      	cmp	lr, r1
    92ec:	d92c      	bls.n	9348 <__udivmoddi4+0x298>
    92ee:	1861      	adds	r1, r4, r1
    92f0:	f108 33ff 	add.w	r3, r8, #4294967295
    92f4:	d204      	bcs.n	9300 <__udivmoddi4+0x250>
    92f6:	458e      	cmp	lr, r1
    92f8:	d902      	bls.n	9300 <__udivmoddi4+0x250>
    92fa:	f1a8 0302 	sub.w	r3, r8, #2
    92fe:	4421      	add	r1, r4
    9300:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    9304:	eba1 010e 	sub.w	r1, r1, lr
    9308:	fba0 9802 	umull	r9, r8, r0, r2
    930c:	4541      	cmp	r1, r8
    930e:	46ce      	mov	lr, r9
    9310:	4643      	mov	r3, r8
    9312:	d302      	bcc.n	931a <__udivmoddi4+0x26a>
    9314:	d106      	bne.n	9324 <__udivmoddi4+0x274>
    9316:	454d      	cmp	r5, r9
    9318:	d204      	bcs.n	9324 <__udivmoddi4+0x274>
    931a:	3801      	subs	r0, #1
    931c:	ebb9 0e02 	subs.w	lr, r9, r2
    9320:	eb68 0304 	sbc.w	r3, r8, r4
    9324:	2e00      	cmp	r6, #0
    9326:	d0a7      	beq.n	9278 <__udivmoddi4+0x1c8>
    9328:	ebb5 020e 	subs.w	r2, r5, lr
    932c:	eb61 0103 	sbc.w	r1, r1, r3
    9330:	fa01 fc0c 	lsl.w	ip, r1, ip
    9334:	fa22 f307 	lsr.w	r3, r2, r7
    9338:	40f9      	lsrs	r1, r7
    933a:	ea4c 0303 	orr.w	r3, ip, r3
    933e:	e9c6 3100 	strd	r3, r1, [r6]
    9342:	e799      	b.n	9278 <__udivmoddi4+0x1c8>
    9344:	4640      	mov	r0, r8
    9346:	e7c5      	b.n	92d4 <__udivmoddi4+0x224>
    9348:	4643      	mov	r3, r8
    934a:	e7d9      	b.n	9300 <__udivmoddi4+0x250>

0000934c <strcmp>:
    934c:	f810 2b01 	ldrb.w	r2, [r0], #1
    9350:	f811 3b01 	ldrb.w	r3, [r1], #1
    9354:	2a01      	cmp	r2, #1
    9356:	bf28      	it	cs
    9358:	429a      	cmpcs	r2, r3
    935a:	d0f7      	beq.n	934c <strcmp>
    935c:	1ad0      	subs	r0, r2, r3
    935e:	4770      	bx	lr

00009360 <strlen>:
    9360:	4603      	mov	r3, r0
    9362:	f813 2b01 	ldrb.w	r2, [r3], #1
    9366:	2a00      	cmp	r2, #0
    9368:	d1fb      	bne.n	9362 <strlen+0x2>
    936a:	1a18      	subs	r0, r3, r0
    936c:	3801      	subs	r0, #1
    936e:	4770      	bx	lr

00009370 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9372:	460c      	mov	r4, r1
  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9374:	f7ff f842 	bl	83fc <__aeabi_i2d>
    9378:	a325      	add	r3, pc, #148	; (adr r3, 9410 <ntc_temperature+0xa0>)
    937a:	e9d3 2300 	ldrd	r2, r3, [r3]
    937e:	f7ff f8a7 	bl	84d0 <__aeabi_dmul>
    9382:	f7ff fab7 	bl	88f4 <__aeabi_d2f>
    9386:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    9388:	1e63      	subs	r3, r4, #1
    938a:	b2db      	uxtb	r3, r3
    938c:	2b02      	cmp	r3, #2
    938e:	bf96      	itet	ls
    9390:	4a27      	ldrls	r2, [pc, #156]	; (9430 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9392:	2000      	movhi	r0, #0
    9394:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    9398:	4629      	mov	r1, r5
    939a:	f7ff fc09 	bl	8bb0 <__aeabi_fmul>
    939e:	f7ff f83f 	bl	8420 <__aeabi_f2d>
    93a2:	4606      	mov	r6, r0
    93a4:	4628      	mov	r0, r5
    93a6:	460f      	mov	r7, r1
    93a8:	f7ff f83a 	bl	8420 <__aeabi_f2d>
    93ac:	4602      	mov	r2, r0
    93ae:	460b      	mov	r3, r1
    93b0:	2000      	movs	r0, #0
    93b2:	4920      	ldr	r1, [pc, #128]	; (9434 <ntc_temperature+0xc4>)
    93b4:	f7fe fed4 	bl	8160 <__aeabi_dsub>
    93b8:	4602      	mov	r2, r0
    93ba:	460b      	mov	r3, r1
    93bc:	4630      	mov	r0, r6
    93be:	4639      	mov	r1, r7
    93c0:	f7ff f9b0 	bl	8724 <__aeabi_ddiv>
    93c4:	f7ff fa96 	bl	88f4 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    93c8:	491b      	ldr	r1, [pc, #108]	; (9438 <ntc_temperature+0xc8>)
    93ca:	f7ff fca5 	bl	8d18 <__aeabi_fdiv>
    93ce:	f7ff f827 	bl	8420 <__aeabi_f2d>
    93d2:	f019 fbb9 	bl	22b48 <log>
    93d6:	a310      	add	r3, pc, #64	; (adr r3, 9418 <ntc_temperature+0xa8>)
    93d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    93dc:	f7ff f9a2 	bl	8724 <__aeabi_ddiv>
    93e0:	a30f      	add	r3, pc, #60	; (adr r3, 9420 <ntc_temperature+0xb0>)
    93e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    93e6:	f7fe febd 	bl	8164 <__adddf3>
    93ea:	4602      	mov	r2, r0
    93ec:	460b      	mov	r3, r1
    93ee:	2000      	movs	r0, #0
    93f0:	4912      	ldr	r1, [pc, #72]	; (943c <ntc_temperature+0xcc>)
    93f2:	f7ff f997 	bl	8724 <__aeabi_ddiv>
    93f6:	f7ff fa7d 	bl	88f4 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    93fa:	f7ff f811 	bl	8420 <__aeabi_f2d>
    93fe:	a30a      	add	r3, pc, #40	; (adr r3, 9428 <ntc_temperature+0xb8>)
    9400:	e9d3 2300 	ldrd	r2, r3, [r3]
    9404:	f7fe feac 	bl	8160 <__aeabi_dsub>
    9408:	f7ff fa74 	bl	88f4 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    940e:	bf00      	nop
    9410:	3a66a002 	.word	0x3a66a002
    9414:	3f2ccdb3 	.word	0x3f2ccdb3
    9418:	00000000 	.word	0x00000000
    941c:	40af0200 	.word	0x40af0200
    9420:	dcb5db83 	.word	0xdcb5db83
    9424:	3f6b79e1 	.word	0x3f6b79e1
    9428:	66666666 	.word	0x66666666
    942c:	40711266 	.word	0x40711266
    9430:	0002a740 	.word	0x0002a740
    9434:	40080000 	.word	0x40080000
    9438:	461c4000 	.word	0x461c4000
    943c:	3ff00000 	.word	0x3ff00000

00009440 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9440:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9442:	4d64      	ldr	r5, [pc, #400]	; (95d4 <bt_init+0x194>)
{
    9444:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9446:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    944a:	6899      	ldr	r1, [r3, #8]
    944c:	f011 0101 	ands.w	r1, r1, #1
    9450:	d11a      	bne.n	9488 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9452:	f640 4003 	movw	r0, #3075	; 0xc03
    9456:	aa05      	add	r2, sp, #20
    9458:	f008 fa14 	bl	11884 <bt_hci_cmd_send_sync>
		if (err) {
    945c:	4604      	mov	r4, r0
    945e:	2800      	cmp	r0, #0
    9460:	f040 80b5 	bne.w	95ce <bt_init+0x18e>
		hci_reset_complete(rsp);
    9464:	9805      	ldr	r0, [sp, #20]
	uint8_t status = buf->data[0];
    9466:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9468:	781b      	ldrb	r3, [r3, #0]
    946a:	b95b      	cbnz	r3, 9484 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    946c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9470:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9474:	f002 0209 	and.w	r2, r2, #9
    9478:	e8d3 1fef 	ldaex	r1, [r3]
    947c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    9480:	2c00      	cmp	r4, #0
    9482:	d1f9      	bne.n	9478 <bt_init+0x38>
		net_buf_unref(rsp);
    9484:	f00f fdcc 	bl	19020 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9488:	2100      	movs	r1, #0
    948a:	f241 0003 	movw	r0, #4099	; 0x1003
    948e:	aa05      	add	r2, sp, #20
    9490:	f008 f9f8 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    9494:	4604      	mov	r4, r0
    9496:	2800      	cmp	r0, #0
    9498:	f040 8099 	bne.w	95ce <bt_init+0x18e>
	read_local_features_complete(rsp);
    949c:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    949e:	4e4e      	ldr	r6, [pc, #312]	; (95d8 <bt_init+0x198>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    94a0:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94a2:	f8d2 0001 	ldr.w	r0, [r2, #1]
    94a6:	f8d2 1005 	ldr.w	r1, [r2, #5]
    94aa:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    94ac:	4618      	mov	r0, r3
    94ae:	f00f fdb7 	bl	19020 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    94b2:	4621      	mov	r1, r4
    94b4:	f241 0001 	movw	r0, #4097	; 0x1001
    94b8:	aa05      	add	r2, sp, #20
    94ba:	f008 f9e3 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    94be:	4604      	mov	r4, r0
    94c0:	2800      	cmp	r0, #0
    94c2:	f040 8084 	bne.w	95ce <bt_init+0x18e>
	read_local_ver_complete(rsp);
    94c6:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    94c8:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    94ca:	785a      	ldrb	r2, [r3, #1]
    94cc:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    94d0:	885a      	ldrh	r2, [r3, #2]
    94d2:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    94d6:	791a      	ldrb	r2, [r3, #4]
    94d8:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    94dc:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    94e0:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    94e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    94e8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    94ec:	f00f fd98 	bl	19020 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    94f0:	4621      	mov	r1, r4
    94f2:	f241 0002 	movw	r0, #4098	; 0x1002
    94f6:	aa05      	add	r2, sp, #20
    94f8:	f008 f9c4 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    94fc:	4604      	mov	r4, r0
    94fe:	2800      	cmp	r0, #0
    9500:	d165      	bne.n	95ce <bt_init+0x18e>
	read_supported_commands_complete(rsp);
    9502:	9f05      	ldr	r7, [sp, #20]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    9504:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    9506:	1c53      	adds	r3, r2, #1
    9508:	3241      	adds	r2, #65	; 0x41
    950a:	4634      	mov	r4, r6
    950c:	6818      	ldr	r0, [r3, #0]
    950e:	6859      	ldr	r1, [r3, #4]
    9510:	3308      	adds	r3, #8
    9512:	c403      	stmia	r4!, {r0, r1}
    9514:	4293      	cmp	r3, r2
    9516:	4626      	mov	r6, r4
    9518:	d1f7      	bne.n	950a <bt_init+0xca>
	net_buf_unref(rsp);
    951a:	4638      	mov	r0, r7
    951c:	f00f fd80 	bl	19020 <net_buf_unref>
		err = prng_init();
    9520:	f009 ffd4 	bl	134cc <prng_init>
		if (err) {
    9524:	4604      	mov	r4, r0
    9526:	2800      	cmp	r0, #0
    9528:	d151      	bne.n	95ce <bt_init+0x18e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    952a:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    952e:	f013 0320 	ands.w	r3, r3, #32
    9532:	d118      	bne.n	9566 <bt_init+0x126>
		LOG_WRN("Controller to host flow control not supported");
    9534:	4a29      	ldr	r2, [pc, #164]	; (95dc <bt_init+0x19c>)
    9536:	492a      	ldr	r1, [pc, #168]	; (95e0 <bt_init+0x1a0>)
    9538:	e9cd 3201 	strd	r3, r2, [sp, #4]
    953c:	9300      	str	r3, [sp, #0]
    953e:	2202      	movs	r2, #2
    9540:	f01c fbaf 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    9544:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    9548:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    954c:	d14c      	bne.n	95e8 <bt_init+0x1a8>
		LOG_ERR("Non-LE capable controller detected!");
    954e:	4a25      	ldr	r2, [pc, #148]	; (95e4 <bt_init+0x1a4>)
    9550:	4618      	mov	r0, r3
    9552:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9556:	4922      	ldr	r1, [pc, #136]	; (95e0 <bt_init+0x1a0>)
    9558:	2201      	movs	r2, #1
    955a:	9300      	str	r3, [sp, #0]
    955c:	f01c fba1 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    9560:	f06f 0412 	mvn.w	r4, #18
    9564:	e033      	b.n	95ce <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9566:	2107      	movs	r1, #7
    9568:	f640 4033 	movw	r0, #3123	; 0xc33
    956c:	f008 f93c 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
    9570:	4606      	mov	r6, r0
    9572:	2800      	cmp	r0, #0
    9574:	f000 8140 	beq.w	97f8 <bt_init+0x3b8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9578:	2107      	movs	r1, #7
    957a:	300c      	adds	r0, #12
    957c:	f00f fe72 	bl	19264 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    9580:	2345      	movs	r3, #69	; 0x45
    9582:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9584:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9586:	f8c0 4002 	str.w	r4, [r0, #2]
    958a:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    958c:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    958e:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9590:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9592:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9594:	4631      	mov	r1, r6
    9596:	f640 4033 	movw	r0, #3123	; 0xc33
    959a:	f008 f973 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    959e:	4604      	mov	r4, r0
    95a0:	b9a8      	cbnz	r0, 95ce <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    95a2:	2101      	movs	r1, #1
    95a4:	f640 4031 	movw	r0, #3121	; 0xc31
    95a8:	f008 f91e 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
    95ac:	4606      	mov	r6, r0
    95ae:	2800      	cmp	r0, #0
    95b0:	f000 8122 	beq.w	97f8 <bt_init+0x3b8>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    95b4:	2101      	movs	r1, #1
    95b6:	300c      	adds	r0, #12
    95b8:	f01e f9ef 	bl	2799a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    95bc:	4622      	mov	r2, r4
    95be:	4631      	mov	r1, r6
    95c0:	f640 4031 	movw	r0, #3121	; 0xc31
    95c4:	f008 f95e 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    95c8:	4604      	mov	r4, r0
    95ca:	2800      	cmp	r0, #0
    95cc:	d0ba      	beq.n	9544 <bt_init+0x104>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    95ce:	4620      	mov	r0, r4
    95d0:	b007      	add	sp, #28
    95d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95d4:	20008000 	.word	0x20008000
    95d8:	20008070 	.word	0x20008070
    95dc:	0002d74f 	.word	0x0002d74f
    95e0:	0002a398 	.word	0x0002a398
    95e4:	0002d77d 	.word	0x0002d77d
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    95e8:	2100      	movs	r1, #0
    95ea:	f242 0003 	movw	r0, #8195	; 0x2003
    95ee:	aa05      	add	r2, sp, #20
    95f0:	f008 f948 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    95f4:	4604      	mov	r4, r0
    95f6:	2800      	cmp	r0, #0
    95f8:	d1e9      	bne.n	95ce <bt_init+0x18e>
	read_le_features_complete(rsp);
    95fa:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    95fc:	4ebe      	ldr	r6, [pc, #760]	; (98f8 <bt_init+0x4b8>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    95fe:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9600:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9604:	f8d2 1005 	ldr.w	r1, [r2, #5]
    9608:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    960a:	4618      	mov	r0, r3
    960c:	f00f fd08 	bl	19020 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9610:	4621      	mov	r1, r4
    9612:	f242 0002 	movw	r0, #8194	; 0x2002
    9616:	aa05      	add	r2, sp, #20
    9618:	f008 f934 	bl	11884 <bt_hci_cmd_send_sync>
		if (err) {
    961c:	4604      	mov	r4, r0
    961e:	2800      	cmp	r0, #0
    9620:	d1d5      	bne.n	95ce <bt_init+0x18e>
		le_read_buffer_size_complete(rsp);
    9622:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9624:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    9626:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    962a:	b291      	uxth	r1, r2
    962c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    9630:	b129      	cbz	r1, 963e <bt_init+0x1fe>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9632:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9634:	4611      	mov	r1, r2
    9636:	f106 0028 	add.w	r0, r6, #40	; 0x28
    963a:	f01f fd66 	bl	2910a <z_impl_k_sem_init>
		net_buf_unref(rsp);
    963e:	4620      	mov	r0, r4
    9640:	f00f fcee 	bl	19020 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9644:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    9648:	f016 0620 	ands.w	r6, r6, #32
    964c:	d118      	bne.n	9680 <bt_init+0x240>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    964e:	2102      	movs	r1, #2
    9650:	f640 406d 	movw	r0, #3181	; 0xc6d
    9654:	f008 f8c8 	bl	117e8 <bt_hci_cmd_create>
		if (!buf) {
    9658:	4604      	mov	r4, r0
    965a:	2800      	cmp	r0, #0
    965c:	f000 80cc 	beq.w	97f8 <bt_init+0x3b8>
	return net_buf_simple_add(&buf->b, len);
    9660:	2102      	movs	r1, #2
    9662:	300c      	adds	r0, #12
    9664:	f00f fdfe 	bl	19264 <net_buf_simple_add>
		cp_le->le = 0x01;
    9668:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    966a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    966c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    966e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9670:	4632      	mov	r2, r6
    9672:	f640 406d 	movw	r0, #3181	; 0xc6d
    9676:	f008 f905 	bl	11884 <bt_hci_cmd_send_sync>
		if (err) {
    967a:	4604      	mov	r4, r0
    967c:	2800      	cmp	r0, #0
    967e:	d1a6      	bne.n	95ce <bt_init+0x18e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9680:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    9684:	071f      	lsls	r7, r3, #28
    9686:	d512      	bpl.n	96ae <bt_init+0x26e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9688:	2100      	movs	r1, #0
    968a:	f242 001c 	movw	r0, #8220	; 0x201c
    968e:	aa05      	add	r2, sp, #20
    9690:	f008 f8f8 	bl	11884 <bt_hci_cmd_send_sync>
		if (err) {
    9694:	4604      	mov	r4, r0
    9696:	2800      	cmp	r0, #0
    9698:	d199      	bne.n	95ce <bt_init+0x18e>
		le_read_supp_states_complete(rsp);
    969a:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    969c:	68c3      	ldr	r3, [r0, #12]
    969e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    96a2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    96a6:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    96aa:	f00f fcb9 	bl	19020 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    96ae:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    96b2:	069e      	lsls	r6, r3, #26
    96b4:	d524      	bpl.n	9700 <bt_init+0x2c0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    96b6:	f10d 0112 	add.w	r1, sp, #18
    96ba:	a804      	add	r0, sp, #16
    96bc:	f008 f958 	bl	11970 <hci_le_read_max_data_len>
		if (err) {
    96c0:	4604      	mov	r4, r0
    96c2:	2800      	cmp	r0, #0
    96c4:	d183      	bne.n	95ce <bt_init+0x18e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96c6:	2104      	movs	r1, #4
    96c8:	f242 0024 	movw	r0, #8228	; 0x2024
    96cc:	f008 f88c 	bl	117e8 <bt_hci_cmd_create>
		if (!buf) {
    96d0:	4606      	mov	r6, r0
    96d2:	2800      	cmp	r0, #0
    96d4:	f000 8090 	beq.w	97f8 <bt_init+0x3b8>
    96d8:	2104      	movs	r1, #4
    96da:	300c      	adds	r0, #12
    96dc:	f00f fdc2 	bl	19264 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96e0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96e4:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96e6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96ec:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96ee:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96f0:	f242 0024 	movw	r0, #8228	; 0x2024
    96f4:	f008 f8c6 	bl	11884 <bt_hci_cmd_send_sync>
		if (err) {
    96f8:	4604      	mov	r4, r0
    96fa:	2800      	cmp	r0, #0
    96fc:	f47f af67 	bne.w	95ce <bt_init+0x18e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    9700:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9704:	065c      	lsls	r4, r3, #25
    9706:	d510      	bpl.n	972a <bt_init+0x2ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9708:	2100      	movs	r1, #0
    970a:	f242 002a 	movw	r0, #8234	; 0x202a
    970e:	aa05      	add	r2, sp, #20
    9710:	f008 f8b8 	bl	11884 <bt_hci_cmd_send_sync>
		if (err) {
    9714:	4604      	mov	r4, r0
    9716:	2800      	cmp	r0, #0
    9718:	f47f af59 	bne.w	95ce <bt_init+0x18e>
		le_read_resolving_list_size_complete(rsp);
    971c:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
    971e:	68c3      	ldr	r3, [r0, #12]
    9720:	785b      	ldrb	r3, [r3, #1]
    9722:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    9726:	f00f fc7b 	bl	19020 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    972a:	2108      	movs	r1, #8
    972c:	f242 0001 	movw	r0, #8193	; 0x2001
    9730:	f008 f85a 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
    9734:	4604      	mov	r4, r0
    9736:	2800      	cmp	r0, #0
    9738:	d05e      	beq.n	97f8 <bt_init+0x3b8>
    973a:	2108      	movs	r1, #8
    973c:	300c      	adds	r0, #12
    973e:	f00f fd91 	bl	19264 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    9742:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    9746:	f240 2302 	movw	r3, #514	; 0x202
    974a:	f011 0f40 	tst.w	r1, #64	; 0x40
    974e:	bf08      	it	eq
    9750:	2303      	moveq	r3, #3
    9752:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9754:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9756:	bf4c      	ite	mi
    9758:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    975c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9760:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9762:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9766:	bf48      	it	mi
    9768:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    976c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9770:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9774:	bf18      	it	ne
    9776:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    977a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    977e:	07cf      	lsls	r7, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9780:	bf48      	it	mi
    9782:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9786:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    9788:	bf08      	it	eq
    978a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    978e:	2100      	movs	r1, #0
    9790:	f01c fa9e 	bl	25cd0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9794:	4621      	mov	r1, r4
    9796:	2200      	movs	r2, #0
    9798:	f242 0001 	movw	r0, #8193	; 0x2001
    979c:	f008 f872 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    97a0:	4604      	mov	r4, r0
    97a2:	2800      	cmp	r0, #0
    97a4:	f47f af13 	bne.w	95ce <bt_init+0x18e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97a8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    97ac:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97b0:	069e      	lsls	r6, r3, #26
    97b2:	d424      	bmi.n	97fe <bt_init+0x3be>
	if (bt_dev.le.acl_mtu) {
    97b4:	b9c9      	cbnz	r1, 97ea <bt_init+0x3aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    97b6:	f241 0005 	movw	r0, #4101	; 0x1005
    97ba:	aa05      	add	r2, sp, #20
    97bc:	f008 f862 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    97c0:	4604      	mov	r4, r0
    97c2:	2800      	cmp	r0, #0
    97c4:	f47f af03 	bne.w	95ce <bt_init+0x18e>
	if (bt_dev.le.acl_mtu) {
    97c8:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    97cc:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
    97ce:	b94b      	cbnz	r3, 97e4 <bt_init+0x3a4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    97d0:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    97d2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    97d6:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    97da:	889a      	ldrh	r2, [r3, #4]
    97dc:	4847      	ldr	r0, [pc, #284]	; (98fc <bt_init+0x4bc>)
    97de:	4611      	mov	r1, r2
    97e0:	f01f fc93 	bl	2910a <z_impl_k_sem_init>
	net_buf_unref(rsp);
    97e4:	4620      	mov	r0, r4
    97e6:	f00f fc1b 	bl	19020 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    97ea:	2108      	movs	r1, #8
    97ec:	f640 4001 	movw	r0, #3073	; 0xc01
    97f0:	f007 fffa 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
    97f4:	4604      	mov	r4, r0
    97f6:	b980      	cbnz	r0, 981a <bt_init+0x3da>
		return -ENOBUFS;
    97f8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    97fc:	e6e7      	b.n	95ce <bt_init+0x18e>
	else if (!bt_dev.le.acl_mtu) {
    97fe:	2900      	cmp	r1, #0
    9800:	d1f3      	bne.n	97ea <bt_init+0x3aa>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9802:	4b3f      	ldr	r3, [pc, #252]	; (9900 <bt_init+0x4c0>)
    9804:	2201      	movs	r2, #1
    9806:	e9cd 0301 	strd	r0, r3, [sp, #4]
    980a:	493e      	ldr	r1, [pc, #248]	; (9904 <bt_init+0x4c4>)
    980c:	4603      	mov	r3, r0
    980e:	9000      	str	r0, [sp, #0]
    9810:	f01c fa47 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    9814:	f06f 0404 	mvn.w	r4, #4
    9818:	e6d9      	b.n	95ce <bt_init+0x18e>
    981a:	2108      	movs	r1, #8
    981c:	300c      	adds	r0, #12
    981e:	f00f fd21 	bl	19264 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9822:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9826:	4602      	mov	r2, r0
    9828:	07d9      	lsls	r1, r3, #31
    982a:	d41c      	bmi.n	9866 <bt_init+0x426>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    982c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    9830:	4835      	ldr	r0, [pc, #212]	; (9908 <bt_init+0x4c8>)
	sys_put_le64(mask, ev->events);
    9832:	f01c fa4d 	bl	25cd0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9836:	4621      	mov	r1, r4
    9838:	2200      	movs	r2, #0
    983a:	f640 4001 	movw	r0, #3073	; 0xc01
    983e:	f008 f821 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    9842:	4604      	mov	r4, r0
    9844:	2800      	cmp	r0, #0
    9846:	f47f aec2 	bne.w	95ce <bt_init+0x18e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    984a:	4601      	mov	r1, r0
    984c:	aa05      	add	r2, sp, #20
    984e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9852:	f008 f817 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    9856:	4606      	mov	r6, r0
    9858:	b148      	cbz	r0, 986e <bt_init+0x42e>
		LOG_WRN("Vendor HCI extensions not available");
    985a:	4b2c      	ldr	r3, [pc, #176]	; (990c <bt_init+0x4cc>)
			LOG_WRN("Failed to read supported vendor features");
    985c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9860:	9400      	str	r4, [sp, #0]
    9862:	4623      	mov	r3, r4
    9864:	e013      	b.n	988e <bt_init+0x44e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9866:	a122      	add	r1, pc, #136	; (adr r1, 98f0 <bt_init+0x4b0>)
    9868:	e9d1 0100 	ldrd	r0, r1, [r1]
    986c:	e7e1      	b.n	9832 <bt_init+0x3f2>
	net_buf_unref(rsp);
    986e:	9805      	ldr	r0, [sp, #20]
    9870:	f00f fbd6 	bl	19020 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9874:	4631      	mov	r1, r6
    9876:	f64f 4002 	movw	r0, #64514	; 0xfc02
    987a:	aa05      	add	r2, sp, #20
    987c:	f008 f802 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
    9880:	4604      	mov	r4, r0
    9882:	b1c0      	cbz	r0, 98b6 <bt_init+0x476>
		LOG_WRN("Failed to read supported vendor commands");
    9884:	4b22      	ldr	r3, [pc, #136]	; (9910 <bt_init+0x4d0>)
    9886:	9600      	str	r6, [sp, #0]
    9888:	e9cd 6301 	strd	r6, r3, [sp, #4]
    988c:	4633      	mov	r3, r6
			LOG_WRN("Failed to read supported vendor features");
    988e:	2202      	movs	r2, #2
    9890:	4618      	mov	r0, r3
    9892:	491c      	ldr	r1, [pc, #112]	; (9904 <bt_init+0x4c4>)
    9894:	f01c fa05 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
	err = bt_id_init();
    9898:	f009 fa98 	bl	12dcc <bt_id_init>
	if (err) {
    989c:	4604      	mov	r4, r0
    989e:	2800      	cmp	r0, #0
    98a0:	f47f ae95 	bne.w	95ce <bt_init+0x18e>
		err = bt_conn_init();
    98a4:	f00a ff78 	bl	14798 <bt_conn_init>
		if (err) {
    98a8:	4604      	mov	r4, r0
    98aa:	2800      	cmp	r0, #0
    98ac:	f47f ae8f 	bne.w	95ce <bt_init+0x18e>
	bt_finalize_init();
    98b0:	f008 fddc 	bl	1246c <bt_finalize_init>
	return 0;
    98b4:	e68b      	b.n	95ce <bt_init+0x18e>
	rp.cmds = (void *)rsp->data;
    98b6:	9805      	ldr	r0, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    98b8:	68c3      	ldr	r3, [r0, #12]
    98ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    98be:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    98c2:	f00f fbad 	bl	19020 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    98c6:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    98ca:	075b      	lsls	r3, r3, #29
    98cc:	d5e4      	bpl.n	9898 <bt_init+0x458>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    98ce:	4621      	mov	r1, r4
    98d0:	f64f 4003 	movw	r0, #64515	; 0xfc03
    98d4:	aa05      	add	r2, sp, #20
    98d6:	f007 ffd5 	bl	11884 <bt_hci_cmd_send_sync>
		if (err) {
    98da:	b108      	cbz	r0, 98e0 <bt_init+0x4a0>
			LOG_WRN("Failed to read supported vendor features");
    98dc:	4b0d      	ldr	r3, [pc, #52]	; (9914 <bt_init+0x4d4>)
    98de:	e7bd      	b.n	985c <bt_init+0x41c>
		rp.feat = (void *)rsp->data;
    98e0:	9805      	ldr	r0, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
    98e2:	68c3      	ldr	r3, [r0, #12]
    98e4:	785b      	ldrb	r3, [r3, #1]
    98e6:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    98ea:	f00f fb99 	bl	19020 <net_buf_unref>
    98ee:	e7d3      	b.n	9898 <bt_init+0x458>
    98f0:	02008890 	.word	0x02008890
    98f4:	20008000 	.word	0x20008000
    98f8:	200080d0 	.word	0x200080d0
    98fc:	20008100 	.word	0x20008100
    9900:	0002d7a1 	.word	0x0002d7a1
    9904:	0002a398 	.word	0x0002a398
    9908:	02008810 	.word	0x02008810
    990c:	0002d7c4 	.word	0x0002d7c4
    9910:	0002d7e8 	.word	0x0002d7e8
    9914:	0002d811 	.word	0x0002d811

00009918 <__ieee754_log>:
    9918:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    991c:	4602      	mov	r2, r0
    991e:	460b      	mov	r3, r1
    9920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9924:	460d      	mov	r5, r1
    9926:	b087      	sub	sp, #28
    9928:	da24      	bge.n	9974 <__ieee754_log+0x5c>
    992a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    992e:	4304      	orrs	r4, r0
    9930:	d108      	bne.n	9944 <__ieee754_log+0x2c>
    9932:	2200      	movs	r2, #0
    9934:	2300      	movs	r3, #0
    9936:	2000      	movs	r0, #0
    9938:	49c9      	ldr	r1, [pc, #804]	; (9c60 <__ieee754_log+0x348>)
    993a:	f7fe fef3 	bl	8724 <__aeabi_ddiv>
    993e:	b007      	add	sp, #28
    9940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9944:	2900      	cmp	r1, #0
    9946:	da04      	bge.n	9952 <__ieee754_log+0x3a>
    9948:	f7fe fc0a 	bl	8160 <__aeabi_dsub>
    994c:	2200      	movs	r2, #0
    994e:	2300      	movs	r3, #0
    9950:	e7f3      	b.n	993a <__ieee754_log+0x22>
    9952:	2200      	movs	r2, #0
    9954:	4bc3      	ldr	r3, [pc, #780]	; (9c64 <__ieee754_log+0x34c>)
    9956:	f7fe fdbb 	bl	84d0 <__aeabi_dmul>
    995a:	460b      	mov	r3, r1
    995c:	460d      	mov	r5, r1
    995e:	4602      	mov	r2, r0
    9960:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9964:	48c0      	ldr	r0, [pc, #768]	; (9c68 <__ieee754_log+0x350>)
    9966:	4285      	cmp	r5, r0
    9968:	dd06      	ble.n	9978 <__ieee754_log+0x60>
    996a:	4610      	mov	r0, r2
    996c:	4619      	mov	r1, r3
    996e:	f7fe fbf9 	bl	8164 <__adddf3>
    9972:	e7e4      	b.n	993e <__ieee754_log+0x26>
    9974:	2100      	movs	r1, #0
    9976:	e7f5      	b.n	9964 <__ieee754_log+0x4c>
    9978:	152c      	asrs	r4, r5, #20
    997a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    997e:	4610      	mov	r0, r2
    9980:	2200      	movs	r2, #0
    9982:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    9986:	440c      	add	r4, r1
    9988:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    998c:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    9990:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    9994:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    9998:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    999c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    99a0:	ea41 0305 	orr.w	r3, r1, r5
    99a4:	4619      	mov	r1, r3
    99a6:	4bb1      	ldr	r3, [pc, #708]	; (9c6c <__ieee754_log+0x354>)
    99a8:	f7fe fbda 	bl	8160 <__aeabi_dsub>
    99ac:	1cab      	adds	r3, r5, #2
    99ae:	4682      	mov	sl, r0
    99b0:	468b      	mov	fp, r1
    99b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    99b6:	2200      	movs	r2, #0
    99b8:	2b02      	cmp	r3, #2
    99ba:	dc53      	bgt.n	9a64 <__ieee754_log+0x14c>
    99bc:	2300      	movs	r3, #0
    99be:	f7ff fb07 	bl	8fd0 <__aeabi_dcmpeq>
    99c2:	b1d0      	cbz	r0, 99fa <__ieee754_log+0xe2>
    99c4:	2c00      	cmp	r4, #0
    99c6:	f000 8120 	beq.w	9c0a <__ieee754_log+0x2f2>
    99ca:	4620      	mov	r0, r4
    99cc:	f7fe fd16 	bl	83fc <__aeabi_i2d>
    99d0:	4606      	mov	r6, r0
    99d2:	460f      	mov	r7, r1
    99d4:	a38e      	add	r3, pc, #568	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    99d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    99da:	f7fe fd79 	bl	84d0 <__aeabi_dmul>
    99de:	4604      	mov	r4, r0
    99e0:	460d      	mov	r5, r1
    99e2:	4630      	mov	r0, r6
    99e4:	4639      	mov	r1, r7
    99e6:	a38c      	add	r3, pc, #560	; (adr r3, 9c18 <__ieee754_log+0x300>)
    99e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    99ec:	f7fe fd70 	bl	84d0 <__aeabi_dmul>
    99f0:	4602      	mov	r2, r0
    99f2:	460b      	mov	r3, r1
    99f4:	4620      	mov	r0, r4
    99f6:	4629      	mov	r1, r5
    99f8:	e7b9      	b.n	996e <__ieee754_log+0x56>
    99fa:	a389      	add	r3, pc, #548	; (adr r3, 9c20 <__ieee754_log+0x308>)
    99fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a00:	4650      	mov	r0, sl
    9a02:	4659      	mov	r1, fp
    9a04:	f7fe fd64 	bl	84d0 <__aeabi_dmul>
    9a08:	4602      	mov	r2, r0
    9a0a:	460b      	mov	r3, r1
    9a0c:	2000      	movs	r0, #0
    9a0e:	4998      	ldr	r1, [pc, #608]	; (9c70 <__ieee754_log+0x358>)
    9a10:	f7fe fba6 	bl	8160 <__aeabi_dsub>
    9a14:	4606      	mov	r6, r0
    9a16:	460f      	mov	r7, r1
    9a18:	4652      	mov	r2, sl
    9a1a:	465b      	mov	r3, fp
    9a1c:	4650      	mov	r0, sl
    9a1e:	4659      	mov	r1, fp
    9a20:	f7fe fd56 	bl	84d0 <__aeabi_dmul>
    9a24:	4602      	mov	r2, r0
    9a26:	460b      	mov	r3, r1
    9a28:	4630      	mov	r0, r6
    9a2a:	4639      	mov	r1, r7
    9a2c:	f7fe fd50 	bl	84d0 <__aeabi_dmul>
    9a30:	4606      	mov	r6, r0
    9a32:	460f      	mov	r7, r1
    9a34:	b914      	cbnz	r4, 9a3c <__ieee754_log+0x124>
    9a36:	4632      	mov	r2, r6
    9a38:	463b      	mov	r3, r7
    9a3a:	e0a0      	b.n	9b7e <__ieee754_log+0x266>
    9a3c:	4620      	mov	r0, r4
    9a3e:	f7fe fcdd 	bl	83fc <__aeabi_i2d>
    9a42:	4680      	mov	r8, r0
    9a44:	4689      	mov	r9, r1
    9a46:	a372      	add	r3, pc, #456	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9a48:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a4c:	f7fe fd40 	bl	84d0 <__aeabi_dmul>
    9a50:	4604      	mov	r4, r0
    9a52:	460d      	mov	r5, r1
    9a54:	4640      	mov	r0, r8
    9a56:	4649      	mov	r1, r9
    9a58:	a36f      	add	r3, pc, #444	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a5e:	f7fe fd37 	bl	84d0 <__aeabi_dmul>
    9a62:	e0a5      	b.n	9bb0 <__ieee754_log+0x298>
    9a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a68:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9a6c:	f7fe fb7a 	bl	8164 <__adddf3>
    9a70:	4602      	mov	r2, r0
    9a72:	460b      	mov	r3, r1
    9a74:	4650      	mov	r0, sl
    9a76:	4659      	mov	r1, fp
    9a78:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9a7c:	f7fe fe52 	bl	8724 <__aeabi_ddiv>
    9a80:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9a84:	3551      	adds	r5, #81	; 0x51
    9a86:	e9cd 0100 	strd	r0, r1, [sp]
    9a8a:	4620      	mov	r0, r4
    9a8c:	4335      	orrs	r5, r6
    9a8e:	f7fe fcb5 	bl	83fc <__aeabi_i2d>
    9a92:	e9dd 2300 	ldrd	r2, r3, [sp]
    9a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9a9a:	4610      	mov	r0, r2
    9a9c:	4619      	mov	r1, r3
    9a9e:	f7fe fd17 	bl	84d0 <__aeabi_dmul>
    9aa2:	4602      	mov	r2, r0
    9aa4:	460b      	mov	r3, r1
    9aa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9aaa:	f7fe fd11 	bl	84d0 <__aeabi_dmul>
    9aae:	4680      	mov	r8, r0
    9ab0:	4689      	mov	r9, r1
    9ab2:	a35d      	add	r3, pc, #372	; (adr r3, 9c28 <__ieee754_log+0x310>)
    9ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ab8:	f7fe fd0a 	bl	84d0 <__aeabi_dmul>
    9abc:	a35c      	add	r3, pc, #368	; (adr r3, 9c30 <__ieee754_log+0x318>)
    9abe:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ac2:	f7fe fb4f 	bl	8164 <__adddf3>
    9ac6:	4642      	mov	r2, r8
    9ac8:	464b      	mov	r3, r9
    9aca:	f7fe fd01 	bl	84d0 <__aeabi_dmul>
    9ace:	a35a      	add	r3, pc, #360	; (adr r3, 9c38 <__ieee754_log+0x320>)
    9ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ad4:	f7fe fb46 	bl	8164 <__adddf3>
    9ad8:	4642      	mov	r2, r8
    9ada:	464b      	mov	r3, r9
    9adc:	f7fe fcf8 	bl	84d0 <__aeabi_dmul>
    9ae0:	a357      	add	r3, pc, #348	; (adr r3, 9c40 <__ieee754_log+0x328>)
    9ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ae6:	f7fe fb3d 	bl	8164 <__adddf3>
    9aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9aee:	f7fe fcef 	bl	84d0 <__aeabi_dmul>
    9af2:	a355      	add	r3, pc, #340	; (adr r3, 9c48 <__ieee754_log+0x330>)
    9af4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9af8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9afc:	4640      	mov	r0, r8
    9afe:	4649      	mov	r1, r9
    9b00:	f7fe fce6 	bl	84d0 <__aeabi_dmul>
    9b04:	a352      	add	r3, pc, #328	; (adr r3, 9c50 <__ieee754_log+0x338>)
    9b06:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b0a:	f7fe fb2b 	bl	8164 <__adddf3>
    9b0e:	4642      	mov	r2, r8
    9b10:	464b      	mov	r3, r9
    9b12:	f7fe fcdd 	bl	84d0 <__aeabi_dmul>
    9b16:	a350      	add	r3, pc, #320	; (adr r3, 9c58 <__ieee754_log+0x340>)
    9b18:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b1c:	f7fe fb22 	bl	8164 <__adddf3>
    9b20:	4642      	mov	r2, r8
    9b22:	464b      	mov	r3, r9
    9b24:	f7fe fcd4 	bl	84d0 <__aeabi_dmul>
    9b28:	4602      	mov	r2, r0
    9b2a:	460b      	mov	r3, r1
    9b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9b30:	f7fe fb18 	bl	8164 <__adddf3>
    9b34:	2d00      	cmp	r5, #0
    9b36:	4680      	mov	r8, r0
    9b38:	4689      	mov	r9, r1
    9b3a:	dd48      	ble.n	9bce <__ieee754_log+0x2b6>
    9b3c:	2200      	movs	r2, #0
    9b3e:	4b4c      	ldr	r3, [pc, #304]	; (9c70 <__ieee754_log+0x358>)
    9b40:	4650      	mov	r0, sl
    9b42:	4659      	mov	r1, fp
    9b44:	f7fe fcc4 	bl	84d0 <__aeabi_dmul>
    9b48:	4652      	mov	r2, sl
    9b4a:	465b      	mov	r3, fp
    9b4c:	f7fe fcc0 	bl	84d0 <__aeabi_dmul>
    9b50:	4602      	mov	r2, r0
    9b52:	460b      	mov	r3, r1
    9b54:	4606      	mov	r6, r0
    9b56:	460f      	mov	r7, r1
    9b58:	4640      	mov	r0, r8
    9b5a:	4649      	mov	r1, r9
    9b5c:	f7fe fb02 	bl	8164 <__adddf3>
    9b60:	e9dd 2300 	ldrd	r2, r3, [sp]
    9b64:	f7fe fcb4 	bl	84d0 <__aeabi_dmul>
    9b68:	4680      	mov	r8, r0
    9b6a:	4689      	mov	r9, r1
    9b6c:	b964      	cbnz	r4, 9b88 <__ieee754_log+0x270>
    9b6e:	4602      	mov	r2, r0
    9b70:	460b      	mov	r3, r1
    9b72:	4630      	mov	r0, r6
    9b74:	4639      	mov	r1, r7
    9b76:	f7fe faf3 	bl	8160 <__aeabi_dsub>
    9b7a:	4602      	mov	r2, r0
    9b7c:	460b      	mov	r3, r1
    9b7e:	4650      	mov	r0, sl
    9b80:	4659      	mov	r1, fp
    9b82:	f7fe faed 	bl	8160 <__aeabi_dsub>
    9b86:	e6da      	b.n	993e <__ieee754_log+0x26>
    9b88:	a321      	add	r3, pc, #132	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9b92:	f7fe fc9d 	bl	84d0 <__aeabi_dmul>
    9b96:	4604      	mov	r4, r0
    9b98:	460d      	mov	r5, r1
    9b9a:	a31f      	add	r3, pc, #124	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9ba4:	f7fe fc94 	bl	84d0 <__aeabi_dmul>
    9ba8:	4642      	mov	r2, r8
    9baa:	464b      	mov	r3, r9
    9bac:	f7fe fada 	bl	8164 <__adddf3>
    9bb0:	4602      	mov	r2, r0
    9bb2:	460b      	mov	r3, r1
    9bb4:	4630      	mov	r0, r6
    9bb6:	4639      	mov	r1, r7
    9bb8:	f7fe fad2 	bl	8160 <__aeabi_dsub>
    9bbc:	4652      	mov	r2, sl
    9bbe:	465b      	mov	r3, fp
    9bc0:	f7fe face 	bl	8160 <__aeabi_dsub>
    9bc4:	4602      	mov	r2, r0
    9bc6:	460b      	mov	r3, r1
    9bc8:	4620      	mov	r0, r4
    9bca:	4629      	mov	r1, r5
    9bcc:	e7d9      	b.n	9b82 <__ieee754_log+0x26a>
    9bce:	4602      	mov	r2, r0
    9bd0:	460b      	mov	r3, r1
    9bd2:	4650      	mov	r0, sl
    9bd4:	4659      	mov	r1, fp
    9bd6:	f7fe fac3 	bl	8160 <__aeabi_dsub>
    9bda:	e9dd 2300 	ldrd	r2, r3, [sp]
    9bde:	f7fe fc77 	bl	84d0 <__aeabi_dmul>
    9be2:	4606      	mov	r6, r0
    9be4:	460f      	mov	r7, r1
    9be6:	2c00      	cmp	r4, #0
    9be8:	f43f af25 	beq.w	9a36 <__ieee754_log+0x11e>
    9bec:	a308      	add	r3, pc, #32	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9bee:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bf6:	f7fe fc6b 	bl	84d0 <__aeabi_dmul>
    9bfa:	4604      	mov	r4, r0
    9bfc:	460d      	mov	r5, r1
    9bfe:	a306      	add	r3, pc, #24	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9c00:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c08:	e729      	b.n	9a5e <__ieee754_log+0x146>
    9c0a:	2000      	movs	r0, #0
    9c0c:	2100      	movs	r1, #0
    9c0e:	e696      	b.n	993e <__ieee754_log+0x26>
    9c10:	fee00000 	.word	0xfee00000
    9c14:	3fe62e42 	.word	0x3fe62e42
    9c18:	35793c76 	.word	0x35793c76
    9c1c:	3dea39ef 	.word	0x3dea39ef
    9c20:	55555555 	.word	0x55555555
    9c24:	3fd55555 	.word	0x3fd55555
    9c28:	df3e5244 	.word	0xdf3e5244
    9c2c:	3fc2f112 	.word	0x3fc2f112
    9c30:	96cb03de 	.word	0x96cb03de
    9c34:	3fc74664 	.word	0x3fc74664
    9c38:	94229359 	.word	0x94229359
    9c3c:	3fd24924 	.word	0x3fd24924
    9c40:	55555593 	.word	0x55555593
    9c44:	3fe55555 	.word	0x3fe55555
    9c48:	d078c69f 	.word	0xd078c69f
    9c4c:	3fc39a09 	.word	0x3fc39a09
    9c50:	1d8e78af 	.word	0x1d8e78af
    9c54:	3fcc71c5 	.word	0x3fcc71c5
    9c58:	9997fa04 	.word	0x9997fa04
    9c5c:	3fd99999 	.word	0x3fd99999
    9c60:	c3500000 	.word	0xc3500000
    9c64:	43500000 	.word	0x43500000
    9c68:	7fefffff 	.word	0x7fefffff
    9c6c:	3ff00000 	.word	0x3ff00000
    9c70:	3fe00000 	.word	0x3fe00000
    9c74:	00000000 	.word	0x00000000

00009c78 <_dtoa_r>:
    9c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c7c:	4614      	mov	r4, r2
    9c7e:	b097      	sub	sp, #92	; 0x5c
    9c80:	461d      	mov	r5, r3
    9c82:	6a47      	ldr	r7, [r0, #36]	; 0x24
    9c84:	4683      	mov	fp, r0
    9c86:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    9c88:	e9cd 4504 	strd	r4, r5, [sp, #16]
    9c8c:	b97f      	cbnz	r7, 9cae <_dtoa_r+0x36>
    9c8e:	2010      	movs	r0, #16
    9c90:	f018 ff9a 	bl	22bc8 <malloc>
    9c94:	4602      	mov	r2, r0
    9c96:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    9c9a:	b920      	cbnz	r0, 9ca6 <_dtoa_r+0x2e>
    9c9c:	4ba2      	ldr	r3, [pc, #648]	; (9f28 <_dtoa_r+0x2b0>)
    9c9e:	21ea      	movs	r1, #234	; 0xea
    9ca0:	48a2      	ldr	r0, [pc, #648]	; (9f2c <_dtoa_r+0x2b4>)
    9ca2:	f019 fbc9 	bl	23438 <__assert_func>
    9ca6:	e9c0 7701 	strd	r7, r7, [r0, #4]
    9caa:	6007      	str	r7, [r0, #0]
    9cac:	60c7      	str	r7, [r0, #12]
    9cae:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cb2:	6819      	ldr	r1, [r3, #0]
    9cb4:	b159      	cbz	r1, 9cce <_dtoa_r+0x56>
    9cb6:	685a      	ldr	r2, [r3, #4]
    9cb8:	2301      	movs	r3, #1
    9cba:	4658      	mov	r0, fp
    9cbc:	4093      	lsls	r3, r2
    9cbe:	604a      	str	r2, [r1, #4]
    9cc0:	608b      	str	r3, [r1, #8]
    9cc2:	f019 fcf9 	bl	236b8 <_Bfree>
    9cc6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cca:	2200      	movs	r2, #0
    9ccc:	601a      	str	r2, [r3, #0]
    9cce:	1e2b      	subs	r3, r5, #0
    9cd0:	bfb7      	itett	lt
    9cd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9cd6:	2300      	movge	r3, #0
    9cd8:	2201      	movlt	r2, #1
    9cda:	9305      	strlt	r3, [sp, #20]
    9cdc:	bfa8      	it	ge
    9cde:	6033      	strge	r3, [r6, #0]
    9ce0:	9f05      	ldr	r7, [sp, #20]
    9ce2:	4b93      	ldr	r3, [pc, #588]	; (9f30 <_dtoa_r+0x2b8>)
    9ce4:	bfb8      	it	lt
    9ce6:	6032      	strlt	r2, [r6, #0]
    9ce8:	43bb      	bics	r3, r7
    9cea:	d119      	bne.n	9d20 <_dtoa_r+0xa8>
    9cec:	f242 730f 	movw	r3, #9999	; 0x270f
    9cf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9cf2:	6013      	str	r3, [r2, #0]
    9cf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9cf8:	4323      	orrs	r3, r4
    9cfa:	f000 85e0 	beq.w	a8be <_dtoa_r+0xc46>
    9cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d00:	b953      	cbnz	r3, 9d18 <_dtoa_r+0xa0>
    9d02:	4b8c      	ldr	r3, [pc, #560]	; (9f34 <_dtoa_r+0x2bc>)
    9d04:	e021      	b.n	9d4a <_dtoa_r+0xd2>
    9d06:	4b8c      	ldr	r3, [pc, #560]	; (9f38 <_dtoa_r+0x2c0>)
    9d08:	9308      	str	r3, [sp, #32]
    9d0a:	3308      	adds	r3, #8
    9d0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d0e:	6013      	str	r3, [r2, #0]
    9d10:	9808      	ldr	r0, [sp, #32]
    9d12:	b017      	add	sp, #92	; 0x5c
    9d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d18:	4b86      	ldr	r3, [pc, #536]	; (9f34 <_dtoa_r+0x2bc>)
    9d1a:	9308      	str	r3, [sp, #32]
    9d1c:	3303      	adds	r3, #3
    9d1e:	e7f5      	b.n	9d0c <_dtoa_r+0x94>
    9d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9d24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d2c:	2200      	movs	r2, #0
    9d2e:	2300      	movs	r3, #0
    9d30:	f7ff f94e 	bl	8fd0 <__aeabi_dcmpeq>
    9d34:	4680      	mov	r8, r0
    9d36:	b150      	cbz	r0, 9d4e <_dtoa_r+0xd6>
    9d38:	2301      	movs	r3, #1
    9d3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d3c:	6013      	str	r3, [r2, #0]
    9d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d40:	b113      	cbz	r3, 9d48 <_dtoa_r+0xd0>
    9d42:	4b7e      	ldr	r3, [pc, #504]	; (9f3c <_dtoa_r+0x2c4>)
    9d44:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d46:	6013      	str	r3, [r2, #0]
    9d48:	4b7d      	ldr	r3, [pc, #500]	; (9f40 <_dtoa_r+0x2c8>)
    9d4a:	9308      	str	r3, [sp, #32]
    9d4c:	e7e0      	b.n	9d10 <_dtoa_r+0x98>
    9d4e:	ab14      	add	r3, sp, #80	; 0x50
    9d50:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9d54:	4658      	mov	r0, fp
    9d56:	9301      	str	r3, [sp, #4]
    9d58:	ab15      	add	r3, sp, #84	; 0x54
    9d5a:	9300      	str	r3, [sp, #0]
    9d5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9d60:	f019 ff30 	bl	23bc4 <__d2b>
    9d64:	9003      	str	r0, [sp, #12]
    9d66:	2e00      	cmp	r6, #0
    9d68:	d078      	beq.n	9e5c <_dtoa_r+0x1e4>
    9d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d6c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9d70:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9d78:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9d7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9d84:	4619      	mov	r1, r3
    9d86:	2200      	movs	r2, #0
    9d88:	4b6e      	ldr	r3, [pc, #440]	; (9f44 <_dtoa_r+0x2cc>)
    9d8a:	f7fe f9e9 	bl	8160 <__aeabi_dsub>
    9d8e:	a360      	add	r3, pc, #384	; (adr r3, 9f10 <_dtoa_r+0x298>)
    9d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d94:	f7fe fb9c 	bl	84d0 <__aeabi_dmul>
    9d98:	a35f      	add	r3, pc, #380	; (adr r3, 9f18 <_dtoa_r+0x2a0>)
    9d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d9e:	f7fe f9e1 	bl	8164 <__adddf3>
    9da2:	4604      	mov	r4, r0
    9da4:	460d      	mov	r5, r1
    9da6:	4630      	mov	r0, r6
    9da8:	f7fe fb28 	bl	83fc <__aeabi_i2d>
    9dac:	a35c      	add	r3, pc, #368	; (adr r3, 9f20 <_dtoa_r+0x2a8>)
    9dae:	e9d3 2300 	ldrd	r2, r3, [r3]
    9db2:	f7fe fb8d 	bl	84d0 <__aeabi_dmul>
    9db6:	4602      	mov	r2, r0
    9db8:	460b      	mov	r3, r1
    9dba:	4620      	mov	r0, r4
    9dbc:	4629      	mov	r1, r5
    9dbe:	f7fe f9d1 	bl	8164 <__adddf3>
    9dc2:	4604      	mov	r4, r0
    9dc4:	460d      	mov	r5, r1
    9dc6:	f7ff f94b 	bl	9060 <__aeabi_d2iz>
    9dca:	2200      	movs	r2, #0
    9dcc:	4607      	mov	r7, r0
    9dce:	2300      	movs	r3, #0
    9dd0:	4620      	mov	r0, r4
    9dd2:	4629      	mov	r1, r5
    9dd4:	f7ff f906 	bl	8fe4 <__aeabi_dcmplt>
    9dd8:	b140      	cbz	r0, 9dec <_dtoa_r+0x174>
    9dda:	4638      	mov	r0, r7
    9ddc:	f7fe fb0e 	bl	83fc <__aeabi_i2d>
    9de0:	4622      	mov	r2, r4
    9de2:	462b      	mov	r3, r5
    9de4:	f7ff f8f4 	bl	8fd0 <__aeabi_dcmpeq>
    9de8:	b900      	cbnz	r0, 9dec <_dtoa_r+0x174>
    9dea:	3f01      	subs	r7, #1
    9dec:	2f16      	cmp	r7, #22
    9dee:	d854      	bhi.n	9e9a <_dtoa_r+0x222>
    9df0:	4b55      	ldr	r3, [pc, #340]	; (9f48 <_dtoa_r+0x2d0>)
    9df2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dfe:	f7ff f8f1 	bl	8fe4 <__aeabi_dcmplt>
    9e02:	2800      	cmp	r0, #0
    9e04:	d04b      	beq.n	9e9e <_dtoa_r+0x226>
    9e06:	3f01      	subs	r7, #1
    9e08:	2300      	movs	r3, #0
    9e0a:	9312      	str	r3, [sp, #72]	; 0x48
    9e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9e0e:	1b9b      	subs	r3, r3, r6
    9e10:	1e5a      	subs	r2, r3, #1
    9e12:	bf4c      	ite	mi
    9e14:	f1c3 0301 	rsbmi	r3, r3, #1
    9e18:	2300      	movpl	r3, #0
    9e1a:	920a      	str	r2, [sp, #40]	; 0x28
    9e1c:	bf45      	ittet	mi
    9e1e:	9306      	strmi	r3, [sp, #24]
    9e20:	2300      	movmi	r3, #0
    9e22:	9306      	strpl	r3, [sp, #24]
    9e24:	930a      	strmi	r3, [sp, #40]	; 0x28
    9e26:	2f00      	cmp	r7, #0
    9e28:	db3b      	blt.n	9ea2 <_dtoa_r+0x22a>
    9e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e2c:	970f      	str	r7, [sp, #60]	; 0x3c
    9e2e:	443b      	add	r3, r7
    9e30:	930a      	str	r3, [sp, #40]	; 0x28
    9e32:	2300      	movs	r3, #0
    9e34:	930b      	str	r3, [sp, #44]	; 0x2c
    9e36:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e38:	2b09      	cmp	r3, #9
    9e3a:	f200 8089 	bhi.w	9f50 <_dtoa_r+0x2d8>
    9e3e:	2b05      	cmp	r3, #5
    9e40:	bfc5      	ittet	gt
    9e42:	3b04      	subgt	r3, #4
    9e44:	2400      	movgt	r4, #0
    9e46:	2401      	movle	r4, #1
    9e48:	9320      	strgt	r3, [sp, #128]	; 0x80
    9e4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e4c:	3b02      	subs	r3, #2
    9e4e:	2b03      	cmp	r3, #3
    9e50:	f200 8089 	bhi.w	9f66 <_dtoa_r+0x2ee>
    9e54:	e8df f003 	tbb	[pc, r3]
    9e58:	59383a2d 	.word	0x59383a2d
    9e5c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    9e60:	441e      	add	r6, r3
    9e62:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9e66:	2b20      	cmp	r3, #32
    9e68:	bfc9      	itett	gt
    9e6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    9e6e:	f1c3 0320 	rsble	r3, r3, #32
    9e72:	409f      	lslgt	r7, r3
    9e74:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    9e78:	bfd8      	it	le
    9e7a:	fa04 f003 	lslle.w	r0, r4, r3
    9e7e:	f106 36ff 	add.w	r6, r6, #4294967295
    9e82:	bfc4      	itt	gt
    9e84:	fa24 f303 	lsrgt.w	r3, r4, r3
    9e88:	ea47 0003 	orrgt.w	r0, r7, r3
    9e8c:	f7fe faa6 	bl	83dc <__aeabi_ui2d>
    9e90:	2201      	movs	r2, #1
    9e92:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    9e96:	9213      	str	r2, [sp, #76]	; 0x4c
    9e98:	e774      	b.n	9d84 <_dtoa_r+0x10c>
    9e9a:	2301      	movs	r3, #1
    9e9c:	e7b5      	b.n	9e0a <_dtoa_r+0x192>
    9e9e:	9012      	str	r0, [sp, #72]	; 0x48
    9ea0:	e7b4      	b.n	9e0c <_dtoa_r+0x194>
    9ea2:	9b06      	ldr	r3, [sp, #24]
    9ea4:	1bdb      	subs	r3, r3, r7
    9ea6:	9306      	str	r3, [sp, #24]
    9ea8:	427b      	negs	r3, r7
    9eaa:	930b      	str	r3, [sp, #44]	; 0x2c
    9eac:	2300      	movs	r3, #0
    9eae:	930f      	str	r3, [sp, #60]	; 0x3c
    9eb0:	e7c1      	b.n	9e36 <_dtoa_r+0x1be>
    9eb2:	2300      	movs	r3, #0
    9eb4:	930e      	str	r3, [sp, #56]	; 0x38
    9eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9eb8:	2b00      	cmp	r3, #0
    9eba:	dc57      	bgt.n	9f6c <_dtoa_r+0x2f4>
    9ebc:	2301      	movs	r3, #1
    9ebe:	4699      	mov	r9, r3
    9ec0:	461a      	mov	r2, r3
    9ec2:	9309      	str	r3, [sp, #36]	; 0x24
    9ec4:	9221      	str	r2, [sp, #132]	; 0x84
    9ec6:	e00c      	b.n	9ee2 <_dtoa_r+0x26a>
    9ec8:	2301      	movs	r3, #1
    9eca:	e7f3      	b.n	9eb4 <_dtoa_r+0x23c>
    9ecc:	2300      	movs	r3, #0
    9ece:	930e      	str	r3, [sp, #56]	; 0x38
    9ed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ed2:	18fb      	adds	r3, r7, r3
    9ed4:	f103 0901 	add.w	r9, r3, #1
    9ed8:	9309      	str	r3, [sp, #36]	; 0x24
    9eda:	464b      	mov	r3, r9
    9edc:	2b01      	cmp	r3, #1
    9ede:	bfb8      	it	lt
    9ee0:	2301      	movlt	r3, #1
    9ee2:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    9ee6:	2100      	movs	r1, #0
    9ee8:	2204      	movs	r2, #4
    9eea:	f102 0514 	add.w	r5, r2, #20
    9eee:	429d      	cmp	r5, r3
    9ef0:	d940      	bls.n	9f74 <_dtoa_r+0x2fc>
    9ef2:	6041      	str	r1, [r0, #4]
    9ef4:	4658      	mov	r0, fp
    9ef6:	f019 fb9f 	bl	23638 <_Balloc>
    9efa:	9008      	str	r0, [sp, #32]
    9efc:	2800      	cmp	r0, #0
    9efe:	d13c      	bne.n	9f7a <_dtoa_r+0x302>
    9f00:	4b12      	ldr	r3, [pc, #72]	; (9f4c <_dtoa_r+0x2d4>)
    9f02:	4602      	mov	r2, r0
    9f04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9f08:	e6ca      	b.n	9ca0 <_dtoa_r+0x28>
    9f0a:	2301      	movs	r3, #1
    9f0c:	e7df      	b.n	9ece <_dtoa_r+0x256>
    9f0e:	bf00      	nop
    9f10:	636f4361 	.word	0x636f4361
    9f14:	3fd287a7 	.word	0x3fd287a7
    9f18:	8b60c8b3 	.word	0x8b60c8b3
    9f1c:	3fc68a28 	.word	0x3fc68a28
    9f20:	509f79fb 	.word	0x509f79fb
    9f24:	3fd34413 	.word	0x3fd34413
    9f28:	00030c70 	.word	0x00030c70
    9f2c:	00030c87 	.word	0x00030c87
    9f30:	7ff00000 	.word	0x7ff00000
    9f34:	00030c6c 	.word	0x00030c6c
    9f38:	00030c63 	.word	0x00030c63
    9f3c:	00030a98 	.word	0x00030a98
    9f40:	00030a97 	.word	0x00030a97
    9f44:	3ff80000 	.word	0x3ff80000
    9f48:	0002a590 	.word	0x0002a590
    9f4c:	00030cfb 	.word	0x00030cfb
    9f50:	2401      	movs	r4, #1
    9f52:	2300      	movs	r3, #0
    9f54:	940e      	str	r4, [sp, #56]	; 0x38
    9f56:	9320      	str	r3, [sp, #128]	; 0x80
    9f58:	f04f 33ff 	mov.w	r3, #4294967295
    9f5c:	2200      	movs	r2, #0
    9f5e:	4699      	mov	r9, r3
    9f60:	9309      	str	r3, [sp, #36]	; 0x24
    9f62:	2312      	movs	r3, #18
    9f64:	e7ae      	b.n	9ec4 <_dtoa_r+0x24c>
    9f66:	2301      	movs	r3, #1
    9f68:	930e      	str	r3, [sp, #56]	; 0x38
    9f6a:	e7f5      	b.n	9f58 <_dtoa_r+0x2e0>
    9f6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f6e:	4699      	mov	r9, r3
    9f70:	9309      	str	r3, [sp, #36]	; 0x24
    9f72:	e7b6      	b.n	9ee2 <_dtoa_r+0x26a>
    9f74:	3101      	adds	r1, #1
    9f76:	0052      	lsls	r2, r2, #1
    9f78:	e7b7      	b.n	9eea <_dtoa_r+0x272>
    9f7a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9f7e:	f1b9 0f0e 	cmp.w	r9, #14
    9f82:	9a08      	ldr	r2, [sp, #32]
    9f84:	601a      	str	r2, [r3, #0]
    9f86:	d86f      	bhi.n	a068 <_dtoa_r+0x3f0>
    9f88:	2c00      	cmp	r4, #0
    9f8a:	d06d      	beq.n	a068 <_dtoa_r+0x3f0>
    9f8c:	2f00      	cmp	r7, #0
    9f8e:	dd36      	ble.n	9ffe <_dtoa_r+0x386>
    9f90:	f007 020f 	and.w	r2, r7, #15
    9f94:	4ba0      	ldr	r3, [pc, #640]	; (a218 <_dtoa_r+0x5a0>)
    9f96:	05f8      	lsls	r0, r7, #23
    9f98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
    9fa0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    9fa4:	ea4f 1427 	mov.w	r4, r7, asr #4
    9fa8:	d517      	bpl.n	9fda <_dtoa_r+0x362>
    9faa:	4b9c      	ldr	r3, [pc, #624]	; (a21c <_dtoa_r+0x5a4>)
    9fac:	f004 040f 	and.w	r4, r4, #15
    9fb0:	f04f 0803 	mov.w	r8, #3
    9fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9fbc:	f7fe fbb2 	bl	8724 <__aeabi_ddiv>
    9fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9fc4:	4d95      	ldr	r5, [pc, #596]	; (a21c <_dtoa_r+0x5a4>)
    9fc6:	b95c      	cbnz	r4, 9fe0 <_dtoa_r+0x368>
    9fc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9fd0:	f7fe fba8 	bl	8724 <__aeabi_ddiv>
    9fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9fd8:	e02b      	b.n	a032 <_dtoa_r+0x3ba>
    9fda:	f04f 0802 	mov.w	r8, #2
    9fde:	e7f1      	b.n	9fc4 <_dtoa_r+0x34c>
    9fe0:	07e1      	lsls	r1, r4, #31
    9fe2:	d509      	bpl.n	9ff8 <_dtoa_r+0x380>
    9fe4:	f108 0801 	add.w	r8, r8, #1
    9fe8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9fec:	e9d5 2300 	ldrd	r2, r3, [r5]
    9ff0:	f7fe fa6e 	bl	84d0 <__aeabi_dmul>
    9ff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    9ff8:	1064      	asrs	r4, r4, #1
    9ffa:	3508      	adds	r5, #8
    9ffc:	e7e3      	b.n	9fc6 <_dtoa_r+0x34e>
    9ffe:	f000 8107 	beq.w	a210 <_dtoa_r+0x598>
    a002:	427c      	negs	r4, r7
    a004:	4b84      	ldr	r3, [pc, #528]	; (a218 <_dtoa_r+0x5a0>)
    a006:	4d85      	ldr	r5, [pc, #532]	; (a21c <_dtoa_r+0x5a4>)
    a008:	f04f 0802 	mov.w	r8, #2
    a00c:	f004 020f 	and.w	r2, r4, #15
    a010:	1124      	asrs	r4, r4, #4
    a012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a01e:	f7fe fa57 	bl	84d0 <__aeabi_dmul>
    a022:	2300      	movs	r3, #0
    a024:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a028:	2c00      	cmp	r4, #0
    a02a:	f040 80e5 	bne.w	a1f8 <_dtoa_r+0x580>
    a02e:	2b00      	cmp	r3, #0
    a030:	d1d0      	bne.n	9fd4 <_dtoa_r+0x35c>
    a032:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a034:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a038:	2b00      	cmp	r3, #0
    a03a:	f000 814c 	beq.w	a2d6 <_dtoa_r+0x65e>
    a03e:	2200      	movs	r2, #0
    a040:	4b77      	ldr	r3, [pc, #476]	; (a220 <_dtoa_r+0x5a8>)
    a042:	4620      	mov	r0, r4
    a044:	4629      	mov	r1, r5
    a046:	f7fe ffcd 	bl	8fe4 <__aeabi_dcmplt>
    a04a:	2800      	cmp	r0, #0
    a04c:	f000 8143 	beq.w	a2d6 <_dtoa_r+0x65e>
    a050:	f1b9 0f00 	cmp.w	r9, #0
    a054:	f000 813f 	beq.w	a2d6 <_dtoa_r+0x65e>
    a058:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a05a:	2b00      	cmp	r3, #0
    a05c:	f300 80e4 	bgt.w	a228 <_dtoa_r+0x5b0>
    a060:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a064:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a068:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a06a:	2b00      	cmp	r3, #0
    a06c:	db02      	blt.n	a074 <_dtoa_r+0x3fc>
    a06e:	2f0e      	cmp	r7, #14
    a070:	f340 8242 	ble.w	a4f8 <_dtoa_r+0x880>
    a074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a076:	2a00      	cmp	r2, #0
    a078:	f040 8267 	bne.w	a54a <_dtoa_r+0x8d2>
    a07c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a07e:	2500      	movs	r5, #0
    a080:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a084:	f1b8 0f00 	cmp.w	r8, #0
    a088:	d00d      	beq.n	a0a6 <_dtoa_r+0x42e>
    a08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a08c:	2b00      	cmp	r3, #0
    a08e:	dd0a      	ble.n	a0a6 <_dtoa_r+0x42e>
    a090:	4543      	cmp	r3, r8
    a092:	9a06      	ldr	r2, [sp, #24]
    a094:	bfa8      	it	ge
    a096:	4643      	movge	r3, r8
    a098:	1ad2      	subs	r2, r2, r3
    a09a:	eba8 0803 	sub.w	r8, r8, r3
    a09e:	9206      	str	r2, [sp, #24]
    a0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0a2:	1ad3      	subs	r3, r2, r3
    a0a4:	930a      	str	r3, [sp, #40]	; 0x28
    a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0a8:	b30b      	cbz	r3, a0ee <_dtoa_r+0x476>
    a0aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0ac:	2b00      	cmp	r3, #0
    a0ae:	f000 82a6 	beq.w	a5fe <_dtoa_r+0x986>
    a0b2:	2c00      	cmp	r4, #0
    a0b4:	f000 82a1 	beq.w	a5fa <_dtoa_r+0x982>
    a0b8:	4629      	mov	r1, r5
    a0ba:	4622      	mov	r2, r4
    a0bc:	4658      	mov	r0, fp
    a0be:	f019 fc25 	bl	2390c <__pow5mult>
    a0c2:	9a03      	ldr	r2, [sp, #12]
    a0c4:	4601      	mov	r1, r0
    a0c6:	4605      	mov	r5, r0
    a0c8:	4658      	mov	r0, fp
    a0ca:	f019 fb75 	bl	237b8 <__multiply>
    a0ce:	9903      	ldr	r1, [sp, #12]
    a0d0:	4606      	mov	r6, r0
    a0d2:	4658      	mov	r0, fp
    a0d4:	f019 faf0 	bl	236b8 <_Bfree>
    a0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0da:	1b1b      	subs	r3, r3, r4
    a0dc:	930b      	str	r3, [sp, #44]	; 0x2c
    a0de:	f000 8291 	beq.w	a604 <_dtoa_r+0x98c>
    a0e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a0e4:	4631      	mov	r1, r6
    a0e6:	4658      	mov	r0, fp
    a0e8:	f019 fc10 	bl	2390c <__pow5mult>
    a0ec:	9003      	str	r0, [sp, #12]
    a0ee:	2101      	movs	r1, #1
    a0f0:	4658      	mov	r0, fp
    a0f2:	f019 fb4b 	bl	2378c <__i2b>
    a0f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0f8:	4604      	mov	r4, r0
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	f000 8284 	beq.w	a608 <_dtoa_r+0x990>
    a100:	461a      	mov	r2, r3
    a102:	4601      	mov	r1, r0
    a104:	4658      	mov	r0, fp
    a106:	f019 fc01 	bl	2390c <__pow5mult>
    a10a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a10c:	4604      	mov	r4, r0
    a10e:	2b01      	cmp	r3, #1
    a110:	dc03      	bgt.n	a11a <_dtoa_r+0x4a2>
    a112:	9b04      	ldr	r3, [sp, #16]
    a114:	2b00      	cmp	r3, #0
    a116:	f000 827c 	beq.w	a612 <_dtoa_r+0x99a>
    a11a:	2600      	movs	r6, #0
    a11c:	6923      	ldr	r3, [r4, #16]
    a11e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a122:	6918      	ldr	r0, [r3, #16]
    a124:	f01f fc10 	bl	29948 <__hi0bits>
    a128:	f1c0 0020 	rsb	r0, r0, #32
    a12c:	960f      	str	r6, [sp, #60]	; 0x3c
    a12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a130:	4418      	add	r0, r3
    a132:	f010 001f 	ands.w	r0, r0, #31
    a136:	f000 8291 	beq.w	a65c <_dtoa_r+0x9e4>
    a13a:	f1c0 0320 	rsb	r3, r0, #32
    a13e:	2b04      	cmp	r3, #4
    a140:	f340 8281 	ble.w	a646 <_dtoa_r+0x9ce>
    a144:	f1c0 001c 	rsb	r0, r0, #28
    a148:	9b06      	ldr	r3, [sp, #24]
    a14a:	4403      	add	r3, r0
    a14c:	4480      	add	r8, r0
    a14e:	9306      	str	r3, [sp, #24]
    a150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a152:	4403      	add	r3, r0
    a154:	930a      	str	r3, [sp, #40]	; 0x28
    a156:	9b06      	ldr	r3, [sp, #24]
    a158:	2b00      	cmp	r3, #0
    a15a:	dd05      	ble.n	a168 <_dtoa_r+0x4f0>
    a15c:	461a      	mov	r2, r3
    a15e:	9903      	ldr	r1, [sp, #12]
    a160:	4658      	mov	r0, fp
    a162:	f019 fc2d 	bl	239c0 <__lshift>
    a166:	9003      	str	r0, [sp, #12]
    a168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a16a:	2b00      	cmp	r3, #0
    a16c:	dd05      	ble.n	a17a <_dtoa_r+0x502>
    a16e:	4621      	mov	r1, r4
    a170:	461a      	mov	r2, r3
    a172:	4658      	mov	r0, fp
    a174:	f019 fc24 	bl	239c0 <__lshift>
    a178:	4604      	mov	r4, r0
    a17a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a17c:	2b00      	cmp	r3, #0
    a17e:	f000 8276 	beq.w	a66e <_dtoa_r+0x9f6>
    a182:	4621      	mov	r1, r4
    a184:	9803      	ldr	r0, [sp, #12]
    a186:	f01f fc2e 	bl	299e6 <__mcmp>
    a18a:	2800      	cmp	r0, #0
    a18c:	f280 826f 	bge.w	a66e <_dtoa_r+0x9f6>
    a190:	2300      	movs	r3, #0
    a192:	220a      	movs	r2, #10
    a194:	9903      	ldr	r1, [sp, #12]
    a196:	4658      	mov	r0, fp
    a198:	f019 fab0 	bl	236fc <__multadd>
    a19c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a19e:	1e7e      	subs	r6, r7, #1
    a1a0:	9003      	str	r0, [sp, #12]
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	f000 825c 	beq.w	a660 <_dtoa_r+0x9e8>
    a1a8:	2300      	movs	r3, #0
    a1aa:	4629      	mov	r1, r5
    a1ac:	220a      	movs	r2, #10
    a1ae:	4658      	mov	r0, fp
    a1b0:	f019 faa4 	bl	236fc <__multadd>
    a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1b6:	4605      	mov	r5, r0
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	dc03      	bgt.n	a1c4 <_dtoa_r+0x54c>
    a1bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a1be:	2b02      	cmp	r3, #2
    a1c0:	f300 825e 	bgt.w	a680 <_dtoa_r+0xa08>
    a1c4:	f1b8 0f00 	cmp.w	r8, #0
    a1c8:	dd05      	ble.n	a1d6 <_dtoa_r+0x55e>
    a1ca:	4629      	mov	r1, r5
    a1cc:	4642      	mov	r2, r8
    a1ce:	4658      	mov	r0, fp
    a1d0:	f019 fbf6 	bl	239c0 <__lshift>
    a1d4:	4605      	mov	r5, r0
    a1d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1d8:	2b00      	cmp	r3, #0
    a1da:	f000 82d0 	beq.w	a77e <_dtoa_r+0xb06>
    a1de:	6869      	ldr	r1, [r5, #4]
    a1e0:	4658      	mov	r0, fp
    a1e2:	f019 fa29 	bl	23638 <_Balloc>
    a1e6:	4607      	mov	r7, r0
    a1e8:	2800      	cmp	r0, #0
    a1ea:	f040 827f 	bne.w	a6ec <_dtoa_r+0xa74>
    a1ee:	4b0d      	ldr	r3, [pc, #52]	; (a224 <_dtoa_r+0x5ac>)
    a1f0:	4602      	mov	r2, r0
    a1f2:	f240 21ea 	movw	r1, #746	; 0x2ea
    a1f6:	e553      	b.n	9ca0 <_dtoa_r+0x28>
    a1f8:	07e2      	lsls	r2, r4, #31
    a1fa:	d506      	bpl.n	a20a <_dtoa_r+0x592>
    a1fc:	f108 0801 	add.w	r8, r8, #1
    a200:	e9d5 2300 	ldrd	r2, r3, [r5]
    a204:	f7fe f964 	bl	84d0 <__aeabi_dmul>
    a208:	2301      	movs	r3, #1
    a20a:	1064      	asrs	r4, r4, #1
    a20c:	3508      	adds	r5, #8
    a20e:	e70b      	b.n	a028 <_dtoa_r+0x3b0>
    a210:	f04f 0802 	mov.w	r8, #2
    a214:	e70d      	b.n	a032 <_dtoa_r+0x3ba>
    a216:	bf00      	nop
    a218:	0002a590 	.word	0x0002a590
    a21c:	0002a568 	.word	0x0002a568
    a220:	3ff00000 	.word	0x3ff00000
    a224:	00030cfb 	.word	0x00030cfb
    a228:	4620      	mov	r0, r4
    a22a:	2200      	movs	r2, #0
    a22c:	4bac      	ldr	r3, [pc, #688]	; (a4e0 <_dtoa_r+0x868>)
    a22e:	4629      	mov	r1, r5
    a230:	f7fe f94e 	bl	84d0 <__aeabi_dmul>
    a234:	1e7e      	subs	r6, r7, #1
    a236:	f108 0801 	add.w	r8, r8, #1
    a23a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a23c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a240:	4640      	mov	r0, r8
    a242:	f7fe f8db 	bl	83fc <__aeabi_i2d>
    a246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a24a:	f7fe f941 	bl	84d0 <__aeabi_dmul>
    a24e:	4ba5      	ldr	r3, [pc, #660]	; (a4e4 <_dtoa_r+0x86c>)
    a250:	2200      	movs	r2, #0
    a252:	f7fd ff87 	bl	8164 <__adddf3>
    a256:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    a25a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a25e:	9311      	str	r3, [sp, #68]	; 0x44
    a260:	2c00      	cmp	r4, #0
    a262:	d13b      	bne.n	a2dc <_dtoa_r+0x664>
    a264:	2200      	movs	r2, #0
    a266:	4ba0      	ldr	r3, [pc, #640]	; (a4e8 <_dtoa_r+0x870>)
    a268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a26c:	f7fd ff78 	bl	8160 <__aeabi_dsub>
    a270:	4602      	mov	r2, r0
    a272:	460b      	mov	r3, r1
    a274:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a278:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a27c:	f7fe fed0 	bl	9020 <__aeabi_dcmpgt>
    a280:	2800      	cmp	r0, #0
    a282:	f040 8157 	bne.w	a534 <_dtoa_r+0x8bc>
    a286:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    a28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a28e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a292:	f7fe fea7 	bl	8fe4 <__aeabi_dcmplt>
    a296:	2800      	cmp	r0, #0
    a298:	f43f aee2 	beq.w	a060 <_dtoa_r+0x3e8>
    a29c:	2400      	movs	r4, #0
    a29e:	4625      	mov	r5, r4
    a2a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a2a2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a2a6:	43de      	mvns	r6, r3
    a2a8:	f04f 0800 	mov.w	r8, #0
    a2ac:	4621      	mov	r1, r4
    a2ae:	4658      	mov	r0, fp
    a2b0:	f019 fa02 	bl	236b8 <_Bfree>
    a2b4:	2d00      	cmp	r5, #0
    a2b6:	f000 80a9 	beq.w	a40c <_dtoa_r+0x794>
    a2ba:	f1b8 0f00 	cmp.w	r8, #0
    a2be:	d005      	beq.n	a2cc <_dtoa_r+0x654>
    a2c0:	45a8      	cmp	r8, r5
    a2c2:	d003      	beq.n	a2cc <_dtoa_r+0x654>
    a2c4:	4641      	mov	r1, r8
    a2c6:	4658      	mov	r0, fp
    a2c8:	f019 f9f6 	bl	236b8 <_Bfree>
    a2cc:	4629      	mov	r1, r5
    a2ce:	4658      	mov	r0, fp
    a2d0:	f019 f9f2 	bl	236b8 <_Bfree>
    a2d4:	e09a      	b.n	a40c <_dtoa_r+0x794>
    a2d6:	463e      	mov	r6, r7
    a2d8:	464c      	mov	r4, r9
    a2da:	e7b1      	b.n	a240 <_dtoa_r+0x5c8>
    a2dc:	4b83      	ldr	r3, [pc, #524]	; (a4ec <_dtoa_r+0x874>)
    a2de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a2e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    a2e6:	9b08      	ldr	r3, [sp, #32]
    a2e8:	441c      	add	r4, r3
    a2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	d04a      	beq.n	a386 <_dtoa_r+0x70e>
    a2f0:	4602      	mov	r2, r0
    a2f2:	460b      	mov	r3, r1
    a2f4:	2000      	movs	r0, #0
    a2f6:	497e      	ldr	r1, [pc, #504]	; (a4f0 <_dtoa_r+0x878>)
    a2f8:	f7fe fa14 	bl	8724 <__aeabi_ddiv>
    a2fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a300:	f7fd ff2e 	bl	8160 <__aeabi_dsub>
    a304:	f8dd a020 	ldr.w	sl, [sp, #32]
    a308:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a30c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a310:	f7fe fea6 	bl	9060 <__aeabi_d2iz>
    a314:	4605      	mov	r5, r0
    a316:	f7fe f871 	bl	83fc <__aeabi_i2d>
    a31a:	4602      	mov	r2, r0
    a31c:	3530      	adds	r5, #48	; 0x30
    a31e:	460b      	mov	r3, r1
    a320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a324:	f7fd ff1c 	bl	8160 <__aeabi_dsub>
    a328:	f80a 5b01 	strb.w	r5, [sl], #1
    a32c:	4602      	mov	r2, r0
    a32e:	460b      	mov	r3, r1
    a330:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a334:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a338:	f7fe fe72 	bl	9020 <__aeabi_dcmpgt>
    a33c:	2800      	cmp	r0, #0
    a33e:	d165      	bne.n	a40c <_dtoa_r+0x794>
    a340:	2000      	movs	r0, #0
    a342:	496c      	ldr	r1, [pc, #432]	; (a4f4 <_dtoa_r+0x87c>)
    a344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a348:	f7fd ff0a 	bl	8160 <__aeabi_dsub>
    a34c:	4602      	mov	r2, r0
    a34e:	460b      	mov	r3, r1
    a350:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a354:	f7fe fe64 	bl	9020 <__aeabi_dcmpgt>
    a358:	2800      	cmp	r0, #0
    a35a:	f040 810d 	bne.w	a578 <_dtoa_r+0x900>
    a35e:	45a2      	cmp	sl, r4
    a360:	f000 80ea 	beq.w	a538 <_dtoa_r+0x8c0>
    a364:	2200      	movs	r2, #0
    a366:	4b5e      	ldr	r3, [pc, #376]	; (a4e0 <_dtoa_r+0x868>)
    a368:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a36c:	f7fe f8b0 	bl	84d0 <__aeabi_dmul>
    a370:	2200      	movs	r2, #0
    a372:	4b5b      	ldr	r3, [pc, #364]	; (a4e0 <_dtoa_r+0x868>)
    a374:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a37c:	f7fe f8a8 	bl	84d0 <__aeabi_dmul>
    a380:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a384:	e7c2      	b.n	a30c <_dtoa_r+0x694>
    a386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a38a:	f7fe f8a1 	bl	84d0 <__aeabi_dmul>
    a38e:	46a0      	mov	r8, r4
    a390:	f8dd a020 	ldr.w	sl, [sp, #32]
    a394:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a39c:	f7fe fe60 	bl	9060 <__aeabi_d2iz>
    a3a0:	4605      	mov	r5, r0
    a3a2:	f7fe f82b 	bl	83fc <__aeabi_i2d>
    a3a6:	4602      	mov	r2, r0
    a3a8:	3530      	adds	r5, #48	; 0x30
    a3aa:	460b      	mov	r3, r1
    a3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3b0:	f7fd fed6 	bl	8160 <__aeabi_dsub>
    a3b4:	f80a 5b01 	strb.w	r5, [sl], #1
    a3b8:	4602      	mov	r2, r0
    a3ba:	460b      	mov	r3, r1
    a3bc:	45a2      	cmp	sl, r4
    a3be:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a3c2:	f04f 0200 	mov.w	r2, #0
    a3c6:	d123      	bne.n	a410 <_dtoa_r+0x798>
    a3c8:	4b49      	ldr	r3, [pc, #292]	; (a4f0 <_dtoa_r+0x878>)
    a3ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a3ce:	f7fd fec9 	bl	8164 <__adddf3>
    a3d2:	4602      	mov	r2, r0
    a3d4:	460b      	mov	r3, r1
    a3d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3da:	f7fe fe21 	bl	9020 <__aeabi_dcmpgt>
    a3de:	2800      	cmp	r0, #0
    a3e0:	f040 80ca 	bne.w	a578 <_dtoa_r+0x900>
    a3e4:	2000      	movs	r0, #0
    a3e6:	4942      	ldr	r1, [pc, #264]	; (a4f0 <_dtoa_r+0x878>)
    a3e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a3ec:	f7fd feb8 	bl	8160 <__aeabi_dsub>
    a3f0:	4602      	mov	r2, r0
    a3f2:	460b      	mov	r3, r1
    a3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3f8:	f7fe fdf4 	bl	8fe4 <__aeabi_dcmplt>
    a3fc:	b170      	cbz	r0, a41c <_dtoa_r+0x7a4>
    a3fe:	46c2      	mov	sl, r8
    a400:	f108 38ff 	add.w	r8, r8, #4294967295
    a404:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a408:	2b30      	cmp	r3, #48	; 0x30
    a40a:	d0f8      	beq.n	a3fe <_dtoa_r+0x786>
    a40c:	4637      	mov	r7, r6
    a40e:	e055      	b.n	a4bc <_dtoa_r+0x844>
    a410:	4b33      	ldr	r3, [pc, #204]	; (a4e0 <_dtoa_r+0x868>)
    a412:	f7fe f85d 	bl	84d0 <__aeabi_dmul>
    a416:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a41a:	e7bd      	b.n	a398 <_dtoa_r+0x720>
    a41c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a420:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a424:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a426:	2b00      	cmp	r3, #0
    a428:	f6ff ae28 	blt.w	a07c <_dtoa_r+0x404>
    a42c:	2f0e      	cmp	r7, #14
    a42e:	f73f ae25 	bgt.w	a07c <_dtoa_r+0x404>
    a432:	4b2e      	ldr	r3, [pc, #184]	; (a4ec <_dtoa_r+0x874>)
    a434:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a438:	e9d3 3400 	ldrd	r3, r4, [r3]
    a43c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a440:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a442:	2b00      	cmp	r3, #0
    a444:	da02      	bge.n	a44c <_dtoa_r+0x7d4>
    a446:	f1b9 0f00 	cmp.w	r9, #0
    a44a:	d064      	beq.n	a516 <_dtoa_r+0x89e>
    a44c:	f8dd a020 	ldr.w	sl, [sp, #32]
    a450:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a458:	4620      	mov	r0, r4
    a45a:	4629      	mov	r1, r5
    a45c:	f7fe f962 	bl	8724 <__aeabi_ddiv>
    a460:	f7fe fdfe 	bl	9060 <__aeabi_d2iz>
    a464:	4606      	mov	r6, r0
    a466:	f7fd ffc9 	bl	83fc <__aeabi_i2d>
    a46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a46e:	f7fe f82f 	bl	84d0 <__aeabi_dmul>
    a472:	4602      	mov	r2, r0
    a474:	4620      	mov	r0, r4
    a476:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a47a:	460b      	mov	r3, r1
    a47c:	4629      	mov	r1, r5
    a47e:	f7fd fe6f 	bl	8160 <__aeabi_dsub>
    a482:	f80a 4b01 	strb.w	r4, [sl], #1
    a486:	9c08      	ldr	r4, [sp, #32]
    a488:	4602      	mov	r2, r0
    a48a:	460b      	mov	r3, r1
    a48c:	ebaa 0404 	sub.w	r4, sl, r4
    a490:	45a1      	cmp	r9, r4
    a492:	f040 8082 	bne.w	a59a <_dtoa_r+0x922>
    a496:	f7fd fe65 	bl	8164 <__adddf3>
    a49a:	4604      	mov	r4, r0
    a49c:	460d      	mov	r5, r1
    a49e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4a2:	f7fe fdbd 	bl	9020 <__aeabi_dcmpgt>
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d165      	bne.n	a576 <_dtoa_r+0x8fe>
    a4aa:	4620      	mov	r0, r4
    a4ac:	4629      	mov	r1, r5
    a4ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4b2:	f7fe fd8d 	bl	8fd0 <__aeabi_dcmpeq>
    a4b6:	b108      	cbz	r0, a4bc <_dtoa_r+0x844>
    a4b8:	07f3      	lsls	r3, r6, #31
    a4ba:	d45c      	bmi.n	a576 <_dtoa_r+0x8fe>
    a4bc:	9903      	ldr	r1, [sp, #12]
    a4be:	4658      	mov	r0, fp
    a4c0:	f019 f8fa 	bl	236b8 <_Bfree>
    a4c4:	2300      	movs	r3, #0
    a4c6:	3701      	adds	r7, #1
    a4c8:	f88a 3000 	strb.w	r3, [sl]
    a4cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4ce:	601f      	str	r7, [r3, #0]
    a4d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	f43f ac1c 	beq.w	9d10 <_dtoa_r+0x98>
    a4d8:	f8c3 a000 	str.w	sl, [r3]
    a4dc:	e418      	b.n	9d10 <_dtoa_r+0x98>
    a4de:	bf00      	nop
    a4e0:	40240000 	.word	0x40240000
    a4e4:	401c0000 	.word	0x401c0000
    a4e8:	40140000 	.word	0x40140000
    a4ec:	0002a590 	.word	0x0002a590
    a4f0:	3fe00000 	.word	0x3fe00000
    a4f4:	3ff00000 	.word	0x3ff00000
    a4f8:	4ba2      	ldr	r3, [pc, #648]	; (a784 <_dtoa_r+0xb0c>)
    a4fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a4fe:	e9d3 3400 	ldrd	r3, r4, [r3]
    a502:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a506:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a508:	2b00      	cmp	r3, #0
    a50a:	da9f      	bge.n	a44c <_dtoa_r+0x7d4>
    a50c:	f1b9 0f00 	cmp.w	r9, #0
    a510:	dc9c      	bgt.n	a44c <_dtoa_r+0x7d4>
    a512:	f47f aec3 	bne.w	a29c <_dtoa_r+0x624>
    a516:	2200      	movs	r2, #0
    a518:	4b9b      	ldr	r3, [pc, #620]	; (a788 <_dtoa_r+0xb10>)
    a51a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a51e:	f7fd ffd7 	bl	84d0 <__aeabi_dmul>
    a522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a526:	f7fe fd71 	bl	900c <__aeabi_dcmpge>
    a52a:	4604      	mov	r4, r0
    a52c:	2800      	cmp	r0, #0
    a52e:	f47f aeb5 	bne.w	a29c <_dtoa_r+0x624>
    a532:	463e      	mov	r6, r7
    a534:	4625      	mov	r5, r4
    a536:	e0b4      	b.n	a6a2 <_dtoa_r+0xa2a>
    a538:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a53c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a540:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a542:	2b00      	cmp	r3, #0
    a544:	db01      	blt.n	a54a <_dtoa_r+0x8d2>
    a546:	2f0e      	cmp	r7, #14
    a548:	ddd6      	ble.n	a4f8 <_dtoa_r+0x880>
    a54a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a54c:	2a01      	cmp	r2, #1
    a54e:	dc36      	bgt.n	a5be <_dtoa_r+0x946>
    a550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a552:	b382      	cbz	r2, a5b6 <_dtoa_r+0x93e>
    a554:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a558:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a55a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a55e:	9a06      	ldr	r2, [sp, #24]
    a560:	2101      	movs	r1, #1
    a562:	4658      	mov	r0, fp
    a564:	441a      	add	r2, r3
    a566:	9206      	str	r2, [sp, #24]
    a568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a56a:	441a      	add	r2, r3
    a56c:	920a      	str	r2, [sp, #40]	; 0x28
    a56e:	f019 f90d 	bl	2378c <__i2b>
    a572:	4605      	mov	r5, r0
    a574:	e586      	b.n	a084 <_dtoa_r+0x40c>
    a576:	463e      	mov	r6, r7
    a578:	4653      	mov	r3, sl
    a57a:	469a      	mov	sl, r3
    a57c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a580:	2a39      	cmp	r2, #57	; 0x39
    a582:	d106      	bne.n	a592 <_dtoa_r+0x91a>
    a584:	9a08      	ldr	r2, [sp, #32]
    a586:	429a      	cmp	r2, r3
    a588:	d1f7      	bne.n	a57a <_dtoa_r+0x902>
    a58a:	2230      	movs	r2, #48	; 0x30
    a58c:	9908      	ldr	r1, [sp, #32]
    a58e:	3601      	adds	r6, #1
    a590:	700a      	strb	r2, [r1, #0]
    a592:	781a      	ldrb	r2, [r3, #0]
    a594:	3201      	adds	r2, #1
    a596:	701a      	strb	r2, [r3, #0]
    a598:	e738      	b.n	a40c <_dtoa_r+0x794>
    a59a:	2200      	movs	r2, #0
    a59c:	4b7b      	ldr	r3, [pc, #492]	; (a78c <_dtoa_r+0xb14>)
    a59e:	f7fd ff97 	bl	84d0 <__aeabi_dmul>
    a5a2:	2200      	movs	r2, #0
    a5a4:	2300      	movs	r3, #0
    a5a6:	4604      	mov	r4, r0
    a5a8:	460d      	mov	r5, r1
    a5aa:	f7fe fd11 	bl	8fd0 <__aeabi_dcmpeq>
    a5ae:	2800      	cmp	r0, #0
    a5b0:	f43f af50 	beq.w	a454 <_dtoa_r+0x7dc>
    a5b4:	e782      	b.n	a4bc <_dtoa_r+0x844>
    a5b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a5b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a5bc:	e7cc      	b.n	a558 <_dtoa_r+0x8e0>
    a5be:	f109 34ff 	add.w	r4, r9, #4294967295
    a5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5c4:	42a3      	cmp	r3, r4
    a5c6:	db08      	blt.n	a5da <_dtoa_r+0x962>
    a5c8:	f1b9 0f00 	cmp.w	r9, #0
    a5cc:	eba3 0404 	sub.w	r4, r3, r4
    a5d0:	db0e      	blt.n	a5f0 <_dtoa_r+0x978>
    a5d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a5d6:	464b      	mov	r3, r9
    a5d8:	e7c1      	b.n	a55e <_dtoa_r+0x8e6>
    a5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a5de:	1ae3      	subs	r3, r4, r3
    a5e0:	940b      	str	r4, [sp, #44]	; 0x2c
    a5e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a5e6:	2400      	movs	r4, #0
    a5e8:	441a      	add	r2, r3
    a5ea:	464b      	mov	r3, r9
    a5ec:	920f      	str	r2, [sp, #60]	; 0x3c
    a5ee:	e7b6      	b.n	a55e <_dtoa_r+0x8e6>
    a5f0:	9b06      	ldr	r3, [sp, #24]
    a5f2:	eba3 0809 	sub.w	r8, r3, r9
    a5f6:	2300      	movs	r3, #0
    a5f8:	e7b1      	b.n	a55e <_dtoa_r+0x8e6>
    a5fa:	9e03      	ldr	r6, [sp, #12]
    a5fc:	e571      	b.n	a0e2 <_dtoa_r+0x46a>
    a5fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a600:	9903      	ldr	r1, [sp, #12]
    a602:	e570      	b.n	a0e6 <_dtoa_r+0x46e>
    a604:	9603      	str	r6, [sp, #12]
    a606:	e572      	b.n	a0ee <_dtoa_r+0x476>
    a608:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a60a:	2b01      	cmp	r3, #1
    a60c:	dc17      	bgt.n	a63e <_dtoa_r+0x9c6>
    a60e:	9b04      	ldr	r3, [sp, #16]
    a610:	b9ab      	cbnz	r3, a63e <_dtoa_r+0x9c6>
    a612:	9b05      	ldr	r3, [sp, #20]
    a614:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a618:	b99b      	cbnz	r3, a642 <_dtoa_r+0x9ca>
    a61a:	9b05      	ldr	r3, [sp, #20]
    a61c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a620:	0d36      	lsrs	r6, r6, #20
    a622:	0536      	lsls	r6, r6, #20
    a624:	b136      	cbz	r6, a634 <_dtoa_r+0x9bc>
    a626:	9b06      	ldr	r3, [sp, #24]
    a628:	2601      	movs	r6, #1
    a62a:	3301      	adds	r3, #1
    a62c:	9306      	str	r3, [sp, #24]
    a62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a630:	3301      	adds	r3, #1
    a632:	930a      	str	r3, [sp, #40]	; 0x28
    a634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a636:	2b00      	cmp	r3, #0
    a638:	f47f ad70 	bne.w	a11c <_dtoa_r+0x4a4>
    a63c:	960f      	str	r6, [sp, #60]	; 0x3c
    a63e:	2001      	movs	r0, #1
    a640:	e575      	b.n	a12e <_dtoa_r+0x4b6>
    a642:	2600      	movs	r6, #0
    a644:	e7f6      	b.n	a634 <_dtoa_r+0x9bc>
    a646:	f43f ad86 	beq.w	a156 <_dtoa_r+0x4de>
    a64a:	331c      	adds	r3, #28
    a64c:	9a06      	ldr	r2, [sp, #24]
    a64e:	441a      	add	r2, r3
    a650:	4498      	add	r8, r3
    a652:	9206      	str	r2, [sp, #24]
    a654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a656:	441a      	add	r2, r3
    a658:	920a      	str	r2, [sp, #40]	; 0x28
    a65a:	e57c      	b.n	a156 <_dtoa_r+0x4de>
    a65c:	4603      	mov	r3, r0
    a65e:	e7f4      	b.n	a64a <_dtoa_r+0x9d2>
    a660:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a662:	2b00      	cmp	r3, #0
    a664:	dc2b      	bgt.n	a6be <_dtoa_r+0xa46>
    a666:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a668:	2b02      	cmp	r3, #2
    a66a:	dc09      	bgt.n	a680 <_dtoa_r+0xa08>
    a66c:	e027      	b.n	a6be <_dtoa_r+0xa46>
    a66e:	f1b9 0f00 	cmp.w	r9, #0
    a672:	dc1d      	bgt.n	a6b0 <_dtoa_r+0xa38>
    a674:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a676:	2b02      	cmp	r3, #2
    a678:	dd1a      	ble.n	a6b0 <_dtoa_r+0xa38>
    a67a:	463e      	mov	r6, r7
    a67c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a682:	2b00      	cmp	r3, #0
    a684:	f47f ae0c 	bne.w	a2a0 <_dtoa_r+0x628>
    a688:	4621      	mov	r1, r4
    a68a:	2205      	movs	r2, #5
    a68c:	4658      	mov	r0, fp
    a68e:	f019 f835 	bl	236fc <__multadd>
    a692:	4601      	mov	r1, r0
    a694:	4604      	mov	r4, r0
    a696:	9803      	ldr	r0, [sp, #12]
    a698:	f01f f9a5 	bl	299e6 <__mcmp>
    a69c:	2800      	cmp	r0, #0
    a69e:	f77f adff 	ble.w	a2a0 <_dtoa_r+0x628>
    a6a2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a6a6:	2331      	movs	r3, #49	; 0x31
    a6a8:	3601      	adds	r6, #1
    a6aa:	f80a 3b01 	strb.w	r3, [sl], #1
    a6ae:	e5fb      	b.n	a2a8 <_dtoa_r+0x630>
    a6b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6b2:	463e      	mov	r6, r7
    a6b4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	f47f ad83 	bne.w	a1c4 <_dtoa_r+0x54c>
    a6be:	9f08      	ldr	r7, [sp, #32]
    a6c0:	4621      	mov	r1, r4
    a6c2:	9803      	ldr	r0, [sp, #12]
    a6c4:	f01f f870 	bl	297a8 <quorem>
    a6c8:	9b08      	ldr	r3, [sp, #32]
    a6ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a6d0:	f807 9b01 	strb.w	r9, [r7], #1
    a6d4:	1afb      	subs	r3, r7, r3
    a6d6:	429a      	cmp	r2, r3
    a6d8:	f340 80cb 	ble.w	a872 <_dtoa_r+0xbfa>
    a6dc:	2300      	movs	r3, #0
    a6de:	220a      	movs	r2, #10
    a6e0:	9903      	ldr	r1, [sp, #12]
    a6e2:	4658      	mov	r0, fp
    a6e4:	f019 f80a 	bl	236fc <__multadd>
    a6e8:	9003      	str	r0, [sp, #12]
    a6ea:	e7e9      	b.n	a6c0 <_dtoa_r+0xa48>
    a6ec:	692a      	ldr	r2, [r5, #16]
    a6ee:	f105 010c 	add.w	r1, r5, #12
    a6f2:	300c      	adds	r0, #12
    a6f4:	3202      	adds	r2, #2
    a6f6:	0092      	lsls	r2, r2, #2
    a6f8:	f01e febb 	bl	29472 <memcpy>
    a6fc:	2201      	movs	r2, #1
    a6fe:	4639      	mov	r1, r7
    a700:	4658      	mov	r0, fp
    a702:	f019 f95d 	bl	239c0 <__lshift>
    a706:	9b08      	ldr	r3, [sp, #32]
    a708:	46a8      	mov	r8, r5
    a70a:	4605      	mov	r5, r0
    a70c:	f103 0a01 	add.w	sl, r3, #1
    a710:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a714:	4413      	add	r3, r2
    a716:	930a      	str	r3, [sp, #40]	; 0x28
    a718:	9b04      	ldr	r3, [sp, #16]
    a71a:	f003 0301 	and.w	r3, r3, #1
    a71e:	930b      	str	r3, [sp, #44]	; 0x2c
    a720:	f10a 33ff 	add.w	r3, sl, #4294967295
    a724:	4621      	mov	r1, r4
    a726:	9803      	ldr	r0, [sp, #12]
    a728:	9306      	str	r3, [sp, #24]
    a72a:	f01f f83d 	bl	297a8 <quorem>
    a72e:	4641      	mov	r1, r8
    a730:	9009      	str	r0, [sp, #36]	; 0x24
    a732:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a736:	9803      	ldr	r0, [sp, #12]
    a738:	f01f f955 	bl	299e6 <__mcmp>
    a73c:	462a      	mov	r2, r5
    a73e:	4621      	mov	r1, r4
    a740:	4607      	mov	r7, r0
    a742:	4658      	mov	r0, fp
    a744:	f019 f9a8 	bl	23a98 <__mdiff>
    a748:	68c2      	ldr	r2, [r0, #12]
    a74a:	4601      	mov	r1, r0
    a74c:	b302      	cbz	r2, a790 <_dtoa_r+0xb18>
    a74e:	4658      	mov	r0, fp
    a750:	f018 ffb2 	bl	236b8 <_Bfree>
    a754:	2f00      	cmp	r7, #0
    a756:	da3a      	bge.n	a7ce <_dtoa_r+0xb56>
    a758:	2201      	movs	r2, #1
    a75a:	9903      	ldr	r1, [sp, #12]
    a75c:	4658      	mov	r0, fp
    a75e:	f019 f92f 	bl	239c0 <__lshift>
    a762:	4621      	mov	r1, r4
    a764:	9003      	str	r0, [sp, #12]
    a766:	f01f f93e 	bl	299e6 <__mcmp>
    a76a:	2800      	cmp	r0, #0
    a76c:	dc03      	bgt.n	a776 <_dtoa_r+0xafe>
    a76e:	d129      	bne.n	a7c4 <_dtoa_r+0xb4c>
    a770:	f019 0f01 	tst.w	r9, #1
    a774:	d026      	beq.n	a7c4 <_dtoa_r+0xb4c>
    a776:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a77a:	d11d      	bne.n	a7b8 <_dtoa_r+0xb40>
    a77c:	e032      	b.n	a7e4 <_dtoa_r+0xb6c>
    a77e:	4628      	mov	r0, r5
    a780:	e7c1      	b.n	a706 <_dtoa_r+0xa8e>
    a782:	bf00      	nop
    a784:	0002a590 	.word	0x0002a590
    a788:	40140000 	.word	0x40140000
    a78c:	40240000 	.word	0x40240000
    a790:	900e      	str	r0, [sp, #56]	; 0x38
    a792:	9803      	ldr	r0, [sp, #12]
    a794:	f01f f927 	bl	299e6 <__mcmp>
    a798:	990e      	ldr	r1, [sp, #56]	; 0x38
    a79a:	900c      	str	r0, [sp, #48]	; 0x30
    a79c:	4658      	mov	r0, fp
    a79e:	f018 ff8b 	bl	236b8 <_Bfree>
    a7a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7a4:	bb5a      	cbnz	r2, a7fe <_dtoa_r+0xb86>
    a7a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7a8:	b953      	cbnz	r3, a7c0 <_dtoa_r+0xb48>
    a7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7ac:	b943      	cbnz	r3, a7c0 <_dtoa_r+0xb48>
    a7ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7b2:	d017      	beq.n	a7e4 <_dtoa_r+0xb6c>
    a7b4:	2f00      	cmp	r7, #0
    a7b6:	dd05      	ble.n	a7c4 <_dtoa_r+0xb4c>
    a7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a7be:	e001      	b.n	a7c4 <_dtoa_r+0xb4c>
    a7c0:	2f00      	cmp	r7, #0
    a7c2:	da2a      	bge.n	a81a <_dtoa_r+0xba2>
    a7c4:	f8dd a018 	ldr.w	sl, [sp, #24]
    a7c8:	f80a 9b01 	strb.w	r9, [sl], #1
    a7cc:	e56e      	b.n	a2ac <_dtoa_r+0x634>
    a7ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7d0:	433b      	orrs	r3, r7
    a7d2:	d104      	bne.n	a7de <_dtoa_r+0xb66>
    a7d4:	9b04      	ldr	r3, [sp, #16]
    a7d6:	f003 0301 	and.w	r3, r3, #1
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d0bc      	beq.n	a758 <_dtoa_r+0xae0>
    a7de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7e2:	d136      	bne.n	a852 <_dtoa_r+0xbda>
    a7e4:	9f06      	ldr	r7, [sp, #24]
    a7e6:	2339      	movs	r3, #57	; 0x39
    a7e8:	f807 3b01 	strb.w	r3, [r7], #1
    a7ec:	46ba      	mov	sl, r7
    a7ee:	3f01      	subs	r7, #1
    a7f0:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a7f4:	2b39      	cmp	r3, #57	; 0x39
    a7f6:	d05a      	beq.n	a8ae <_dtoa_r+0xc36>
    a7f8:	3301      	adds	r3, #1
    a7fa:	703b      	strb	r3, [r7, #0]
    a7fc:	e556      	b.n	a2ac <_dtoa_r+0x634>
    a7fe:	2f00      	cmp	r7, #0
    a800:	db06      	blt.n	a810 <_dtoa_r+0xb98>
    a802:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a804:	433b      	orrs	r3, r7
    a806:	d106      	bne.n	a816 <_dtoa_r+0xb9e>
    a808:	9b04      	ldr	r3, [sp, #16]
    a80a:	f003 0301 	and.w	r3, r3, #1
    a80e:	b913      	cbnz	r3, a816 <_dtoa_r+0xb9e>
    a810:	2a00      	cmp	r2, #0
    a812:	dca1      	bgt.n	a758 <_dtoa_r+0xae0>
    a814:	e7d6      	b.n	a7c4 <_dtoa_r+0xb4c>
    a816:	2a00      	cmp	r2, #0
    a818:	dce1      	bgt.n	a7de <_dtoa_r+0xb66>
    a81a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a81c:	4657      	mov	r7, sl
    a81e:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a822:	4553      	cmp	r3, sl
    a824:	d02e      	beq.n	a884 <_dtoa_r+0xc0c>
    a826:	2300      	movs	r3, #0
    a828:	220a      	movs	r2, #10
    a82a:	9903      	ldr	r1, [sp, #12]
    a82c:	4658      	mov	r0, fp
    a82e:	f018 ff65 	bl	236fc <__multadd>
    a832:	45a8      	cmp	r8, r5
    a834:	9003      	str	r0, [sp, #12]
    a836:	f04f 0300 	mov.w	r3, #0
    a83a:	f04f 020a 	mov.w	r2, #10
    a83e:	4641      	mov	r1, r8
    a840:	4658      	mov	r0, fp
    a842:	d10b      	bne.n	a85c <_dtoa_r+0xbe4>
    a844:	f018 ff5a 	bl	236fc <__multadd>
    a848:	4680      	mov	r8, r0
    a84a:	4605      	mov	r5, r0
    a84c:	f10a 0a01 	add.w	sl, sl, #1
    a850:	e766      	b.n	a720 <_dtoa_r+0xaa8>
    a852:	f8dd a018 	ldr.w	sl, [sp, #24]
    a856:	f109 0901 	add.w	r9, r9, #1
    a85a:	e7b5      	b.n	a7c8 <_dtoa_r+0xb50>
    a85c:	f018 ff4e 	bl	236fc <__multadd>
    a860:	4629      	mov	r1, r5
    a862:	4680      	mov	r8, r0
    a864:	2300      	movs	r3, #0
    a866:	220a      	movs	r2, #10
    a868:	4658      	mov	r0, fp
    a86a:	f018 ff47 	bl	236fc <__multadd>
    a86e:	4605      	mov	r5, r0
    a870:	e7ec      	b.n	a84c <_dtoa_r+0xbd4>
    a872:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a874:	f04f 0800 	mov.w	r8, #0
    a878:	2b00      	cmp	r3, #0
    a87a:	bfcc      	ite	gt
    a87c:	461f      	movgt	r7, r3
    a87e:	2701      	movle	r7, #1
    a880:	9b08      	ldr	r3, [sp, #32]
    a882:	441f      	add	r7, r3
    a884:	2201      	movs	r2, #1
    a886:	9903      	ldr	r1, [sp, #12]
    a888:	4658      	mov	r0, fp
    a88a:	f019 f899 	bl	239c0 <__lshift>
    a88e:	4621      	mov	r1, r4
    a890:	9003      	str	r0, [sp, #12]
    a892:	f01f f8a8 	bl	299e6 <__mcmp>
    a896:	2800      	cmp	r0, #0
    a898:	dca8      	bgt.n	a7ec <_dtoa_r+0xb74>
    a89a:	d102      	bne.n	a8a2 <_dtoa_r+0xc2a>
    a89c:	f019 0f01 	tst.w	r9, #1
    a8a0:	d1a4      	bne.n	a7ec <_dtoa_r+0xb74>
    a8a2:	46ba      	mov	sl, r7
    a8a4:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    a8a8:	2b30      	cmp	r3, #48	; 0x30
    a8aa:	d0fa      	beq.n	a8a2 <_dtoa_r+0xc2a>
    a8ac:	e4fe      	b.n	a2ac <_dtoa_r+0x634>
    a8ae:	9b08      	ldr	r3, [sp, #32]
    a8b0:	42bb      	cmp	r3, r7
    a8b2:	d19b      	bne.n	a7ec <_dtoa_r+0xb74>
    a8b4:	2331      	movs	r3, #49	; 0x31
    a8b6:	9a08      	ldr	r2, [sp, #32]
    a8b8:	3601      	adds	r6, #1
    a8ba:	7013      	strb	r3, [r2, #0]
    a8bc:	e4f6      	b.n	a2ac <_dtoa_r+0x634>
    a8be:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	f47f aa20 	bne.w	9d06 <_dtoa_r+0x8e>
    a8c6:	4b01      	ldr	r3, [pc, #4]	; (a8cc <_dtoa_r+0xc54>)
    a8c8:	f7ff ba3f 	b.w	9d4a <_dtoa_r+0xd2>
    a8cc:	00030c63 	.word	0x00030c63

0000a8d0 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    a8d0:	4603      	mov	r3, r0
    a8d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a8d4:	2401      	movs	r4, #1
    a8d6:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    a8d8:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a8da:	409c      	lsls	r4, r3
    a8dc:	6843      	ldr	r3, [r0, #4]
    a8de:	681b      	ldr	r3, [r3, #0]
    a8e0:	421c      	tst	r4, r3
    a8e2:	d10e      	bne.n	a902 <gpio_pin_get_dt+0x32>
    a8e4:	490e      	ldr	r1, [pc, #56]	; (a920 <gpio_pin_get_dt+0x50>)
    a8e6:	f240 43e4 	movw	r3, #1252	; 0x4e4
    a8ea:	4a0e      	ldr	r2, [pc, #56]	; (a924 <gpio_pin_get_dt+0x54>)
    a8ec:	480e      	ldr	r0, [pc, #56]	; (a928 <gpio_pin_get_dt+0x58>)
    a8ee:	f01a f85a 	bl	249a6 <assert_print>
    a8f2:	480e      	ldr	r0, [pc, #56]	; (a92c <gpio_pin_get_dt+0x5c>)
    a8f4:	f01a f857 	bl	249a6 <assert_print>
    a8f8:	f240 41e4 	movw	r1, #1252	; 0x4e4
    a8fc:	4809      	ldr	r0, [pc, #36]	; (a924 <gpio_pin_get_dt+0x54>)
    a8fe:	f01a f84b 	bl	24998 <assert_post_action>
	const struct gpio_driver_data *const data =
    a902:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    a904:	6883      	ldr	r3, [r0, #8]
    a906:	a901      	add	r1, sp, #4
    a908:	685b      	ldr	r3, [r3, #4]
    a90a:	4798      	blx	r3
	if (ret == 0) {
    a90c:	b930      	cbnz	r0, a91c <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    a90e:	682a      	ldr	r2, [r5, #0]
    a910:	9b01      	ldr	r3, [sp, #4]
    a912:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    a914:	4223      	tst	r3, r4
    a916:	bf14      	ite	ne
    a918:	2001      	movne	r0, #1
    a91a:	2000      	moveq	r0, #0
}
    a91c:	b003      	add	sp, #12
    a91e:	bd30      	pop	{r4, r5, pc}
    a920:	0002b2fb 	.word	0x0002b2fb
    a924:	0002b2ca 	.word	0x0002b2ca
    a928:	0002b339 	.word	0x0002b339
    a92c:	0002b356 	.word	0x0002b356

0000a930 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
	
}

//DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a930:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a932:	f01d fc4c 	bl	281ce <sys_clock_cycle_get_32>
    a936:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    a938:	4804      	ldr	r0, [pc, #16]	; (a94c <digital_0_call_back+0x1c>)
    a93a:	f019 fe72 	bl	24622 <printk>
	if(digital_value[0]<=DIGITAL_0_LIMIT)digital_value[0]++;
    a93e:	4a04      	ldr	r2, [pc, #16]	; (a950 <digital_0_call_back+0x20>)
    a940:	8813      	ldrh	r3, [r2, #0]
    a942:	8813      	ldrh	r3, [r2, #0]
    a944:	3301      	adds	r3, #1
    a946:	b21b      	sxth	r3, r3
    a948:	8013      	strh	r3, [r2, #0]
}
    a94a:	bd08      	pop	{r3, pc}
    a94c:	0002b368 	.word	0x0002b368
    a950:	200214c8 	.word	0x200214c8

0000a954 <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a954:	b508      	push	{r3, lr}
    a956:	f01d fc3a 	bl	281ce <sys_clock_cycle_get_32>
    a95a:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    a95c:	4804      	ldr	r0, [pc, #16]	; (a970 <digital_1_call_back+0x1c>)
    a95e:	f019 fe60 	bl	24622 <printk>
	if(digital_value[1]<=DIGITAL_0_LIMIT)digital_value[1]++;
    a962:	4a04      	ldr	r2, [pc, #16]	; (a974 <digital_1_call_back+0x20>)
    a964:	8853      	ldrh	r3, [r2, #2]
    a966:	8853      	ldrh	r3, [r2, #2]
    a968:	3301      	adds	r3, #1
    a96a:	b21b      	sxth	r3, r3
    a96c:	8053      	strh	r3, [r2, #2]
}
    a96e:	bd08      	pop	{r3, pc}
    a970:	0002b383 	.word	0x0002b383
    a974:	200214c8 	.word	0x200214c8

0000a978 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a978:	b508      	push	{r3, lr}
    a97a:	f01d fc28 	bl	281ce <sys_clock_cycle_get_32>
    a97e:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    a980:	4804      	ldr	r0, [pc, #16]	; (a994 <digital_2_call_back+0x1c>)
    a982:	f019 fe4e 	bl	24622 <printk>
	if(digital_value[2]<=DIGITAL_0_LIMIT)digital_value[2]++;
    a986:	4a04      	ldr	r2, [pc, #16]	; (a998 <digital_2_call_back+0x20>)
    a988:	8893      	ldrh	r3, [r2, #4]
    a98a:	8893      	ldrh	r3, [r2, #4]
    a98c:	3301      	adds	r3, #1
    a98e:	b21b      	sxth	r3, r3
    a990:	8093      	strh	r3, [r2, #4]
}
    a992:	bd08      	pop	{r3, pc}
    a994:	0002b39e 	.word	0x0002b39e
    a998:	200214c8 	.word	0x200214c8

0000a99c <uart_2_work_handler>:
{
    a99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    a99e:	2030      	movs	r0, #48	; 0x30
    a9a0:	f01e fd52 	bl	29448 <k_malloc>
    a9a4:	4603      	mov	r3, r0
	if (buf) {
    a9a6:	b140      	cbz	r0, a9ba <uart_2_work_handler+0x1e>
		buf->len = 0;
    a9a8:	2200      	movs	r2, #0
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9aa:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    a9ac:	8582      	strh	r2, [r0, #44]	; 0x2c
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9ae:	480b      	ldr	r0, [pc, #44]	; (a9dc <uart_2_work_handler+0x40>)
}
    a9b0:	b005      	add	sp, #20
    a9b2:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9b6:	f019 bc5c 	b.w	24272 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    a9ba:	4a09      	ldr	r2, [pc, #36]	; (a9e0 <uart_2_work_handler+0x44>)
    a9bc:	9000      	str	r0, [sp, #0]
    a9be:	e9cd 0201 	strd	r0, r2, [sp, #4]
    a9c2:	4908      	ldr	r1, [pc, #32]	; (a9e4 <uart_2_work_handler+0x48>)
    a9c4:	2202      	movs	r2, #2
    a9c6:	f019 fc45 	bl	24254 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9ca:	f240 6267 	movw	r2, #1639	; 0x667
    a9ce:	2300      	movs	r3, #0
    a9d0:	4805      	ldr	r0, [pc, #20]	; (a9e8 <uart_2_work_handler+0x4c>)
}
    a9d2:	b005      	add	sp, #20
    a9d4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9d8:	f015 be20 	b.w	2061c <k_work_reschedule>
    a9dc:	00029e50 	.word	0x00029e50
    a9e0:	0002b3b9 	.word	0x0002b3b9
    a9e4:	0002a458 	.word	0x0002a458
    a9e8:	20009110 	.word	0x20009110

0000a9ec <uart_work_handler>:
{
    a9ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    a9ee:	2030      	movs	r0, #48	; 0x30
    a9f0:	f01e fd2a 	bl	29448 <k_malloc>
    a9f4:	4603      	mov	r3, r0
	if (buf) {
    a9f6:	b140      	cbz	r0, aa0a <uart_work_handler+0x1e>
		buf->len = 0;
    a9f8:	2200      	movs	r2, #0
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9fa:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    a9fc:	8582      	strh	r2, [r0, #44]	; 0x2c
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9fe:	480b      	ldr	r0, [pc, #44]	; (aa2c <uart_work_handler+0x40>)
}
    aa00:	b005      	add	sp, #20
    aa02:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa06:	f019 bc34 	b.w	24272 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART receive buffer");
    aa0a:	4a09      	ldr	r2, [pc, #36]	; (aa30 <uart_work_handler+0x44>)
    aa0c:	9000      	str	r0, [sp, #0]
    aa0e:	e9cd 0201 	strd	r0, r2, [sp, #4]
    aa12:	4908      	ldr	r1, [pc, #32]	; (aa34 <uart_work_handler+0x48>)
    aa14:	2202      	movs	r2, #2
    aa16:	f019 fc1d 	bl	24254 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa1a:	f240 6267 	movw	r2, #1639	; 0x667
    aa1e:	2300      	movs	r3, #0
    aa20:	4805      	ldr	r0, [pc, #20]	; (aa38 <uart_work_handler+0x4c>)
}
    aa22:	b005      	add	sp, #20
    aa24:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa28:	f015 bdf8 	b.w	2061c <k_work_reschedule>
    aa2c:	00029e68 	.word	0x00029e68
    aa30:	0002b3e4 	.word	0x0002b3e4
    aa34:	0002a458 	.word	0x0002a458
    aa38:	20009140 	.word	0x20009140

0000aa3c <button3_thread>:

	}
}


void button3_thread(void){
    aa3c:	b570      	push	{r4, r5, r6, lr}
    uint32_t i;
	while(1){
		i=0;
		k_sem_take(&button_3,K_FOREVER);
    aa3e:	4e09      	ldr	r6, [pc, #36]	; (aa64 <button3_thread+0x28>)
	    while (i<=C_Buffer_Current_Position){
    aa40:	4d09      	ldr	r5, [pc, #36]	; (aa68 <button3_thread+0x2c>)
		k_sem_take(&button_3,K_FOREVER);
    aa42:	f04f 32ff 	mov.w	r2, #4294967295
    aa46:	f04f 33ff 	mov.w	r3, #4294967295
    aa4a:	4630      	mov	r0, r6
    aa4c:	f019 fc21 	bl	24292 <k_sem_take.constprop.0.isra.0>
		i=0;
    aa50:	2400      	movs	r4, #0
	     print_current_position_cb(i);
    aa52:	4620      	mov	r0, r4
    aa54:	f001 f99a 	bl	bd8c <print_current_position_cb>
	    while (i<=C_Buffer_Current_Position){
    aa58:	682b      	ldr	r3, [r5, #0]
	     i++;
    aa5a:	3401      	adds	r4, #1
	    while (i<=C_Buffer_Current_Position){
    aa5c:	42a3      	cmp	r3, r4
    aa5e:	d3f0      	bcc.n	aa42 <button3_thread+0x6>
    aa60:	e7f7      	b.n	aa52 <button3_thread+0x16>
    aa62:	bf00      	nop
    aa64:	20008ae8 	.word	0x20008ae8
    aa68:	20020eb0 	.word	0x20020eb0

0000aa6c <button4_thread>:
		}
    }
}

void button4_thread(void){
    aa6c:	b538      	push	{r3, r4, r5, lr}

    uint8_t *packet_data;
	packet_data = k_malloc(25);
    aa6e:	2019      	movs	r0, #25
    aa70:	f01e fcea 	bl	29448 <k_malloc>
	//49 53 41 44 4f 52 41 
    *packet_data = 0x49;
    aa74:	2349      	movs	r3, #73	; 0x49
    *(packet_data+1) = 0x53;
    *(packet_data+2) = 0x41;
    *(packet_data+3) = 0x44;
    aa76:	2244      	movs	r2, #68	; 0x44
    *packet_data = 0x49;
    aa78:	7003      	strb	r3, [r0, #0]
    *(packet_data+3) = 0x44;
    aa7a:	70c2      	strb	r2, [r0, #3]
    *(packet_data+1) = 0x53;
    aa7c:	2353      	movs	r3, #83	; 0x53
    *(packet_data+4) = 0x4F;
    aa7e:	224f      	movs	r2, #79	; 0x4f
    *(packet_data+1) = 0x53;
    aa80:	7043      	strb	r3, [r0, #1]
    *(packet_data+4) = 0x4F;
    aa82:	7102      	strb	r2, [r0, #4]
    *(packet_data+2) = 0x41;
    aa84:	2341      	movs	r3, #65	; 0x41
    *(packet_data+5) = 0x52;
    aa86:	2252      	movs	r2, #82	; 0x52
	packet_data = k_malloc(25);
    aa88:	4604      	mov	r4, r0
    *(packet_data+6) = 0x41;
	while(1){
		k_sem_take(&button_test,K_FOREVER);
    aa8a:	4d08      	ldr	r5, [pc, #32]	; (aaac <button4_thread+0x40>)
    *(packet_data+2) = 0x41;
    aa8c:	7083      	strb	r3, [r0, #2]
    *(packet_data+5) = 0x52;
    aa8e:	7142      	strb	r2, [r0, #5]
    *(packet_data+6) = 0x41;
    aa90:	7183      	strb	r3, [r0, #6]
		k_sem_take(&button_test,K_FOREVER);
    aa92:	4628      	mov	r0, r5
    aa94:	f04f 32ff 	mov.w	r2, #4294967295
    aa98:	f04f 33ff 	mov.w	r3, #4294967295
    aa9c:	f019 fbf9 	bl	24292 <k_sem_take.constprop.0.isra.0>
    	bt_nus_send(NULL, packet_data,7);
    aaa0:	2207      	movs	r2, #7
    aaa2:	4621      	mov	r1, r4
    aaa4:	2000      	movs	r0, #0
    aaa6:	f004 ff87 	bl	f9b8 <bt_nus_send>
	while(1){
    aaaa:	e7f2      	b.n	aa92 <button4_thread+0x26>
    aaac:	20008b00 	.word	0x20008b00

0000aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    aab0:	4603      	mov	r3, r0
    aab2:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    aab4:	6800      	ldr	r0, [r0, #0]
    aab6:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aab8:	2301      	movs	r3, #1
    aaba:	6845      	ldr	r5, [r0, #4]
    aabc:	408b      	lsls	r3, r1
    aabe:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    aac0:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aac2:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    aac4:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aac6:	d10e      	bne.n	aae6 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    aac8:	490e      	ldr	r1, [pc, #56]	; (ab04 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    aaca:	f44f 731d 	mov.w	r3, #628	; 0x274
    aace:	4a0e      	ldr	r2, [pc, #56]	; (ab08 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    aad0:	480e      	ldr	r0, [pc, #56]	; (ab0c <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    aad2:	f019 ff68 	bl	249a6 <assert_print>
    aad6:	480e      	ldr	r0, [pc, #56]	; (ab10 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    aad8:	f019 ff65 	bl	249a6 <assert_print>
    aadc:	f44f 711d 	mov.w	r1, #628	; 0x274
    aae0:	4809      	ldr	r0, [pc, #36]	; (ab08 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    aae2:	f019 ff59 	bl	24998 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    aae6:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    aae8:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    aaea:	6994      	ldr	r4, [r2, #24]
    aaec:	bf18      	it	ne
    aaee:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    aaf2:	46a4      	mov	ip, r4
}
    aaf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    aaf8:	bf08      	it	eq
    aafa:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    aafe:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    ab02:	4760      	bx	ip
    ab04:	0002b2fb 	.word	0x0002b2fb
    ab08:	0002b2ca 	.word	0x0002b2ca
    ab0c:	0002b339 	.word	0x0002b339
    ab10:	0002b356 	.word	0x0002b356

0000ab14 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab14:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ab16:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab18:	b08a      	sub	sp, #40	; 0x28
    ab1a:	4604      	mov	r4, r0
    ab1c:	460e      	mov	r6, r1
    ab1e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ab20:	2b03      	cmp	r3, #3
    ab22:	d820      	bhi.n	ab66 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ab24:	e8df f003 	tbb	[pc, r3]
    ab28:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ab2c:	4911      	ldr	r1, [pc, #68]	; (ab74 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ab2e:	4628      	mov	r0, r5
    ab30:	f01e fe01 	bl	29736 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ab34:	9505      	str	r5, [sp, #20]
    ab36:	7863      	ldrb	r3, [r4, #1]
    ab38:	211e      	movs	r1, #30
    ab3a:	9304      	str	r3, [sp, #16]
    ab3c:	78a3      	ldrb	r3, [r4, #2]
    ab3e:	4630      	mov	r0, r6
    ab40:	9303      	str	r3, [sp, #12]
    ab42:	78e3      	ldrb	r3, [r4, #3]
    ab44:	4a0c      	ldr	r2, [pc, #48]	; (ab78 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    ab46:	9302      	str	r3, [sp, #8]
    ab48:	7923      	ldrb	r3, [r4, #4]
    ab4a:	9301      	str	r3, [sp, #4]
    ab4c:	7963      	ldrb	r3, [r4, #5]
    ab4e:	9300      	str	r3, [sp, #0]
    ab50:	79a3      	ldrb	r3, [r4, #6]
    ab52:	f019 fd73 	bl	2463c <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    ab56:	b00a      	add	sp, #40	; 0x28
    ab58:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ab5a:	4908      	ldr	r1, [pc, #32]	; (ab7c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    ab5c:	e7e7      	b.n	ab2e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    ab5e:	4908      	ldr	r1, [pc, #32]	; (ab80 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    ab60:	e7e5      	b.n	ab2e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    ab62:	4908      	ldr	r1, [pc, #32]	; (ab84 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    ab64:	e7e3      	b.n	ab2e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ab66:	210a      	movs	r1, #10
    ab68:	4628      	mov	r0, r5
    ab6a:	4a07      	ldr	r2, [pc, #28]	; (ab88 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    ab6c:	f019 fd66 	bl	2463c <snprintk>
		break;
    ab70:	e7e0      	b.n	ab34 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    ab72:	bf00      	nop
    ab74:	0002b40d 	.word	0x0002b40d
    ab78:	0002b42f 	.word	0x0002b42f
    ab7c:	0002b414 	.word	0x0002b414
    ab80:	0002b41b 	.word	0x0002b41b
    ab84:	0002b425 	.word	0x0002b425
    ab88:	0002eb34 	.word	0x0002eb34

0000ab8c <security_changed>:
{
    ab8c:	b570      	push	{r4, r5, r6, lr}
    ab8e:	4614      	mov	r4, r2
    ab90:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ab92:	ae06      	add	r6, sp, #24
{
    ab94:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ab96:	f01b fc2e 	bl	263f6 <bt_conn_get_dst>
    ab9a:	4631      	mov	r1, r6
    ab9c:	f7ff ffba 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
    aba0:	b96c      	cbnz	r4, abbe <security_changed+0x32>
		LOG_INF("Security changed: %s level %u", addr, level);
    aba2:	4b0e      	ldr	r3, [pc, #56]	; (abdc <security_changed+0x50>)
    aba4:	2203      	movs	r2, #3
    aba6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    abaa:	4620      	mov	r0, r4
    abac:	4623      	mov	r3, r4
    abae:	e9cd 6503 	strd	r6, r5, [sp, #12]
    abb2:	490b      	ldr	r1, [pc, #44]	; (abe0 <security_changed+0x54>)
    abb4:	9400      	str	r4, [sp, #0]
    abb6:	f019 fb4d 	bl	24254 <z_log_msg_runtime_create.constprop.0>
}
    abba:	b00e      	add	sp, #56	; 0x38
    abbc:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    abbe:	4b09      	ldr	r3, [pc, #36]	; (abe4 <security_changed+0x58>)
    abc0:	2202      	movs	r2, #2
    abc2:	9302      	str	r3, [sp, #8]
    abc4:	2300      	movs	r3, #0
    abc6:	e9cd 5404 	strd	r5, r4, [sp, #16]
    abca:	4618      	mov	r0, r3
    abcc:	e9cd 3300 	strd	r3, r3, [sp]
    abd0:	4903      	ldr	r1, [pc, #12]	; (abe0 <security_changed+0x54>)
    abd2:	9603      	str	r6, [sp, #12]
    abd4:	f019 fb3e 	bl	24254 <z_log_msg_runtime_create.constprop.0>
}
    abd8:	e7ef      	b.n	abba <security_changed+0x2e>
    abda:	bf00      	nop
    abdc:	0002b452 	.word	0x0002b452
    abe0:	0002a458 	.word	0x0002a458
    abe4:	0002b470 	.word	0x0002b470

0000abe8 <pairing_failed>:
{
    abe8:	b530      	push	{r4, r5, lr}
    abea:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abec:	ad06      	add	r5, sp, #24
{
    abee:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abf0:	f01b fc01 	bl	263f6 <bt_conn_get_dst>
    abf4:	4629      	mov	r1, r5
    abf6:	f7ff ff8d 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    abfa:	4b07      	ldr	r3, [pc, #28]	; (ac18 <pairing_failed+0x30>)
    abfc:	2203      	movs	r2, #3
    abfe:	9302      	str	r3, [sp, #8]
    ac00:	2300      	movs	r3, #0
    ac02:	e9cd 5403 	strd	r5, r4, [sp, #12]
    ac06:	4618      	mov	r0, r3
    ac08:	e9cd 3300 	strd	r3, r3, [sp]
    ac0c:	4903      	ldr	r1, [pc, #12]	; (ac1c <pairing_failed+0x34>)
    ac0e:	f019 fb21 	bl	24254 <z_log_msg_runtime_create.constprop.0>
}
    ac12:	b00f      	add	sp, #60	; 0x3c
    ac14:	bd30      	pop	{r4, r5, pc}
    ac16:	bf00      	nop
    ac18:	0002b494 	.word	0x0002b494
    ac1c:	0002a458 	.word	0x0002a458

0000ac20 <pairing_complete>:
{
    ac20:	b530      	push	{r4, r5, lr}
    ac22:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac24:	ad06      	add	r5, sp, #24
{
    ac26:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac28:	f01b fbe5 	bl	263f6 <bt_conn_get_dst>
    ac2c:	4629      	mov	r1, r5
    ac2e:	f7ff ff71 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    ac32:	4b07      	ldr	r3, [pc, #28]	; (ac50 <pairing_complete+0x30>)
    ac34:	2203      	movs	r2, #3
    ac36:	9302      	str	r3, [sp, #8]
    ac38:	2300      	movs	r3, #0
    ac3a:	e9cd 5403 	strd	r5, r4, [sp, #12]
    ac3e:	4618      	mov	r0, r3
    ac40:	e9cd 3300 	strd	r3, r3, [sp]
    ac44:	4903      	ldr	r1, [pc, #12]	; (ac54 <pairing_complete+0x34>)
    ac46:	f019 fb05 	bl	24254 <z_log_msg_runtime_create.constprop.0>
}
    ac4a:	b00f      	add	sp, #60	; 0x3c
    ac4c:	bd30      	pop	{r4, r5, pc}
    ac4e:	bf00      	nop
    ac50:	0002b4b7 	.word	0x0002b4b7
    ac54:	0002a458 	.word	0x0002a458

0000ac58 <auth_cancel>:
{
    ac58:	b510      	push	{r4, lr}
    ac5a:	b08c      	sub	sp, #48	; 0x30
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac5c:	ac04      	add	r4, sp, #16
    ac5e:	f01b fbca 	bl	263f6 <bt_conn_get_dst>
    ac62:	4621      	mov	r1, r4
    ac64:	f7ff ff56 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    ac68:	4b06      	ldr	r3, [pc, #24]	; (ac84 <auth_cancel+0x2c>)
    ac6a:	2203      	movs	r2, #3
    ac6c:	9302      	str	r3, [sp, #8]
    ac6e:	2300      	movs	r3, #0
    ac70:	4905      	ldr	r1, [pc, #20]	; (ac88 <auth_cancel+0x30>)
    ac72:	4618      	mov	r0, r3
    ac74:	e9cd 3300 	strd	r3, r3, [sp]
    ac78:	9403      	str	r4, [sp, #12]
    ac7a:	f019 faeb 	bl	24254 <z_log_msg_runtime_create.constprop.0>
}
    ac7e:	b00c      	add	sp, #48	; 0x30
    ac80:	bd10      	pop	{r4, pc}
    ac82:	bf00      	nop
    ac84:	0002b4d9 	.word	0x0002b4d9
    ac88:	0002a458 	.word	0x0002a458

0000ac8c <auth_passkey_display>:
{
    ac8c:	b530      	push	{r4, r5, lr}
    ac8e:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac90:	ad06      	add	r5, sp, #24
{
    ac92:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac94:	f01b fbaf 	bl	263f6 <bt_conn_get_dst>
    ac98:	4629      	mov	r1, r5
    ac9a:	f7ff ff3b 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ac9e:	4b07      	ldr	r3, [pc, #28]	; (acbc <auth_passkey_display+0x30>)
    aca0:	2203      	movs	r2, #3
    aca2:	9302      	str	r3, [sp, #8]
    aca4:	2300      	movs	r3, #0
    aca6:	e9cd 5403 	strd	r5, r4, [sp, #12]
    acaa:	4618      	mov	r0, r3
    acac:	e9cd 3300 	strd	r3, r3, [sp]
    acb0:	4903      	ldr	r1, [pc, #12]	; (acc0 <auth_passkey_display+0x34>)
    acb2:	f019 facf 	bl	24254 <z_log_msg_runtime_create.constprop.0>
}
    acb6:	b00f      	add	sp, #60	; 0x3c
    acb8:	bd30      	pop	{r4, r5, pc}
    acba:	bf00      	nop
    acbc:	0002b4ef 	.word	0x0002b4ef
    acc0:	0002a458 	.word	0x0002a458

0000acc4 <auth_passkey_confirm>:
{
    acc4:	b570      	push	{r4, r5, r6, lr}
    acc6:	b08e      	sub	sp, #56	; 0x38
    acc8:	460c      	mov	r4, r1
    acca:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    accc:	f009 f866 	bl	13d9c <bt_conn_ref>
    acd0:	4b11      	ldr	r3, [pc, #68]	; (ad18 <auth_passkey_confirm+0x54>)
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acd2:	ae06      	add	r6, sp, #24
	auth_conn = bt_conn_ref(conn);
    acd4:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acd6:	4628      	mov	r0, r5
    acd8:	f01b fb8d 	bl	263f6 <bt_conn_get_dst>
    acdc:	4631      	mov	r1, r6
    acde:	f7ff ff19 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ace2:	e9cd 6403 	strd	r6, r4, [sp, #12]
    ace6:	2400      	movs	r4, #0
    ace8:	4d0c      	ldr	r5, [pc, #48]	; (ad1c <auth_passkey_confirm+0x58>)
    acea:	4b0d      	ldr	r3, [pc, #52]	; (ad20 <auth_passkey_confirm+0x5c>)
    acec:	4629      	mov	r1, r5
    acee:	4620      	mov	r0, r4
    acf0:	9302      	str	r3, [sp, #8]
    acf2:	2203      	movs	r2, #3
    acf4:	4623      	mov	r3, r4
    acf6:	e9cd 4400 	strd	r4, r4, [sp]
    acfa:	f019 faab 	bl	24254 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    acfe:	4b09      	ldr	r3, [pc, #36]	; (ad24 <auth_passkey_confirm+0x60>)
    ad00:	2203      	movs	r2, #3
    ad02:	e9cd 4301 	strd	r4, r3, [sp, #4]
    ad06:	4629      	mov	r1, r5
    ad08:	4623      	mov	r3, r4
    ad0a:	4620      	mov	r0, r4
    ad0c:	9400      	str	r4, [sp, #0]
    ad0e:	f019 faa1 	bl	24254 <z_log_msg_runtime_create.constprop.0>
}
    ad12:	b00e      	add	sp, #56	; 0x38
    ad14:	bd70      	pop	{r4, r5, r6, pc}
    ad16:	bf00      	nop
    ad18:	20009d30 	.word	0x20009d30
    ad1c:	0002a458 	.word	0x0002a458
    ad20:	0002b4ef 	.word	0x0002b4ef
    ad24:	0002b504 	.word	0x0002b504

0000ad28 <bt_receive_cb>:
{
    ad28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    ad2c:	2400      	movs	r4, #0
{
    ad2e:	4605      	mov	r5, r0
    ad30:	b088      	sub	sp, #32
    ad32:	460f      	mov	r7, r1
    ad34:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    ad36:	4621      	mov	r1, r4
    ad38:	221a      	movs	r2, #26
    ad3a:	a801      	add	r0, sp, #4
    ad3c:	9400      	str	r4, [sp, #0]
    ad3e:	f01e fbd2 	bl	294e6 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    ad42:	4628      	mov	r0, r5
    ad44:	f01b fb57 	bl	263f6 <bt_conn_get_dst>
    ad48:	4669      	mov	r1, sp
    ad4a:	f7ff fee3 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    ad4e:	4669      	mov	r1, sp
    ad50:	481d      	ldr	r0, [pc, #116]	; (adc8 <bt_receive_cb+0xa0>)
    ad52:	f018 fb49 	bl	233e8 <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ad56:	f8df 8074 	ldr.w	r8, [pc, #116]	; adcc <bt_receive_cb+0xa4>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ad5a:	f8df 9074 	ldr.w	r9, [pc, #116]	; add0 <bt_receive_cb+0xa8>
	for (uint16_t pos = 0; pos != len;) {
    ad5e:	42b4      	cmp	r4, r6
    ad60:	d007      	beq.n	ad72 <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    ad62:	2030      	movs	r0, #48	; 0x30
    ad64:	f01e fb70 	bl	29448 <k_malloc>
		if (!tx) {
    ad68:	4605      	mov	r5, r0
    ad6a:	b928      	cbnz	r0, ad78 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    ad6c:	4819      	ldr	r0, [pc, #100]	; (add4 <bt_receive_cb+0xac>)
    ad6e:	f018 fb3b 	bl	233e8 <iprintf>
}
    ad72:	b008      	add	sp, #32
    ad74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size) {
    ad78:	1b32      	subs	r2, r6, r4
    ad7a:	2a27      	cmp	r2, #39	; 0x27
			tx->len = tx_data_size;
    ad7c:	bf8c      	ite	hi
    ad7e:	2227      	movhi	r2, #39	; 0x27
			tx->len = (len - pos);
    ad80:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    ad82:	f100 0a04 	add.w	sl, r0, #4
    ad86:	8582      	strh	r2, [r0, #44]	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ad88:	1939      	adds	r1, r7, r4
    ad8a:	4650      	mov	r0, sl
    ad8c:	f01e fb71 	bl	29472 <memcpy>
		pos += tx->len;
    ad90:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    ad92:	441c      	add	r4, r3
    ad94:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
    ad96:	42a6      	cmp	r6, r4
    ad98:	d109      	bne.n	adae <bt_receive_cb+0x86>
    ad9a:	19ba      	adds	r2, r7, r6
    ad9c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    ada0:	2a0d      	cmp	r2, #13
    ada2:	d104      	bne.n	adae <bt_receive_cb+0x86>
			tx->data[tx->len] = '\n';
    ada4:	210a      	movs	r1, #10
    ada6:	18ea      	adds	r2, r5, r3
			tx->len++;
    ada8:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    adaa:	7111      	strb	r1, [r2, #4]
			tx->len++;
    adac:	85ab      	strh	r3, [r5, #44]	; 0x2c
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    adae:	4651      	mov	r1, sl
    adb0:	4640      	mov	r0, r8
    adb2:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    adb4:	f019 fa65 	bl	24282 <uart_tx.constprop.0>
		if (err) {
    adb8:	2800      	cmp	r0, #0
    adba:	d0d0      	beq.n	ad5e <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    adbc:	4629      	mov	r1, r5
    adbe:	4648      	mov	r0, r9
    adc0:	f01e f98e 	bl	290e0 <k_queue_append>
    adc4:	e7cb      	b.n	ad5e <bt_receive_cb+0x36>
    adc6:	bf00      	nop
    adc8:	0002b533 	.word	0x0002b533
    adcc:	00029e68 	.word	0x00029e68
    add0:	20008b94 	.word	0x20008b94
    add4:	0002b54a 	.word	0x0002b54a

0000add8 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    add8:	4603      	mov	r3, r0
    adda:	b510      	push	{r4, lr}
    addc:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    adde:	7919      	ldrb	r1, [r3, #4]
    ade0:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    ade2:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ade4:	fa03 f101 	lsl.w	r1, r3, r1
    ade8:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    adea:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    adec:	681b      	ldr	r3, [r3, #0]
    adee:	4219      	tst	r1, r3
    adf0:	d10e      	bne.n	ae10 <gpio_pin_set_dt.isra.0+0x38>
    adf2:	490e      	ldr	r1, [pc, #56]	; (ae2c <gpio_pin_set_dt.isra.0+0x54>)
    adf4:	f240 533d 	movw	r3, #1341	; 0x53d
    adf8:	4a0d      	ldr	r2, [pc, #52]	; (ae30 <gpio_pin_set_dt.isra.0+0x58>)
    adfa:	480e      	ldr	r0, [pc, #56]	; (ae34 <gpio_pin_set_dt.isra.0+0x5c>)
    adfc:	f019 fdd3 	bl	249a6 <assert_print>
    ae00:	480d      	ldr	r0, [pc, #52]	; (ae38 <gpio_pin_set_dt.isra.0+0x60>)
    ae02:	f019 fdd0 	bl	249a6 <assert_print>
    ae06:	f240 513d 	movw	r1, #1341	; 0x53d
    ae0a:	4809      	ldr	r0, [pc, #36]	; (ae30 <gpio_pin_set_dt.isra.0+0x58>)
    ae0c:	f019 fdc4 	bl	24998 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    ae10:	6823      	ldr	r3, [r4, #0]
    ae12:	4219      	tst	r1, r3
    ae14:	d003      	beq.n	ae1e <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    ae16:	b122      	cbz	r2, ae22 <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    ae18:	6883      	ldr	r3, [r0, #8]
    ae1a:	691b      	ldr	r3, [r3, #16]
    ae1c:	e003      	b.n	ae26 <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    ae1e:	2a00      	cmp	r2, #0
    ae20:	d0fa      	beq.n	ae18 <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    ae22:	6883      	ldr	r3, [r0, #8]
    ae24:	68db      	ldr	r3, [r3, #12]
}
    ae26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    ae2a:	4718      	bx	r3
    ae2c:	0002b2fb 	.word	0x0002b2fb
    ae30:	0002b2ca 	.word	0x0002b2ca
    ae34:	0002b339 	.word	0x0002b339
    ae38:	0002b356 	.word	0x0002b356

0000ae3c <button_pressed_1>:
void button_pressed_1(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    ae3c:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ae3e:	4807      	ldr	r0, [pc, #28]	; (ae5c <button_pressed_1+0x20>)
    ae40:	f014 fe4c 	bl	1fadc <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    ae44:	2101      	movs	r1, #1
    ae46:	4806      	ldr	r0, [pc, #24]	; (ae60 <button_pressed_1+0x24>)
    ae48:	f7ff ffc6 	bl	add8 <gpio_pin_set_dt.isra.0>
    ae4c:	f01d f9bf 	bl	281ce <sys_clock_cycle_get_32>
}
    ae50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ae54:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    ae56:	4803      	ldr	r0, [pc, #12]	; (ae64 <button_pressed_1+0x28>)
    ae58:	f019 bbe3 	b.w	24622 <printk>
    ae5c:	20008b60 	.word	0x20008b60
    ae60:	0002a6e8 	.word	0x0002a6e8
    ae64:	0002b575 	.word	0x0002b575

0000ae68 <connected>:
{
    ae68:	b570      	push	{r4, r5, r6, lr}
    ae6a:	4605      	mov	r5, r0
	if (err) {
    ae6c:	460c      	mov	r4, r1
{
    ae6e:	b08c      	sub	sp, #48	; 0x30
	if (err) {
    ae70:	b161      	cbz	r1, ae8c <connected+0x24>
		LOG_ERR("Connection failed (err %u)", err);
    ae72:	4b14      	ldr	r3, [pc, #80]	; (aec4 <connected+0x5c>)
    ae74:	9103      	str	r1, [sp, #12]
    ae76:	9302      	str	r3, [sp, #8]
    ae78:	2300      	movs	r3, #0
    ae7a:	2201      	movs	r2, #1
    ae7c:	4618      	mov	r0, r3
    ae7e:	e9cd 3300 	strd	r3, r3, [sp]
    ae82:	4911      	ldr	r1, [pc, #68]	; (aec8 <connected+0x60>)
    ae84:	f019 f9e6 	bl	24254 <z_log_msg_runtime_create.constprop.0>
}
    ae88:	b00c      	add	sp, #48	; 0x30
    ae8a:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ae8c:	ae04      	add	r6, sp, #16
    ae8e:	f01b fab2 	bl	263f6 <bt_conn_get_dst>
    ae92:	4631      	mov	r1, r6
    ae94:	f7ff fe3e 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    ae98:	4b0c      	ldr	r3, [pc, #48]	; (aecc <connected+0x64>)
    ae9a:	2203      	movs	r2, #3
    ae9c:	4620      	mov	r0, r4
    ae9e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    aea2:	4909      	ldr	r1, [pc, #36]	; (aec8 <connected+0x60>)
    aea4:	4623      	mov	r3, r4
    aea6:	9603      	str	r6, [sp, #12]
    aea8:	9400      	str	r4, [sp, #0]
    aeaa:	f019 f9d3 	bl	24254 <z_log_msg_runtime_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    aeae:	4628      	mov	r0, r5
    aeb0:	f008 ff74 	bl	13d9c <bt_conn_ref>
    aeb4:	4b06      	ldr	r3, [pc, #24]	; (aed0 <connected+0x68>)
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    aeb6:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    aeb8:	6018      	str	r0, [r3, #0]
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    aeba:	4806      	ldr	r0, [pc, #24]	; (aed4 <connected+0x6c>)
    aebc:	f7ff ff8c 	bl	add8 <gpio_pin_set_dt.isra.0>
    aec0:	e7e2      	b.n	ae88 <connected+0x20>
    aec2:	bf00      	nop
    aec4:	0002b58d 	.word	0x0002b58d
    aec8:	0002a458 	.word	0x0002a458
    aecc:	0002b5a8 	.word	0x0002b5a8
    aed0:	20009d34 	.word	0x20009d34
    aed4:	0002a700 	.word	0x0002a700

0000aed8 <disconnected>:
{
    aed8:	b530      	push	{r4, r5, lr}
    aeda:	460c      	mov	r4, r1
    aedc:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    aede:	ad06      	add	r5, sp, #24
    aee0:	f01b fa89 	bl	263f6 <bt_conn_get_dst>
    aee4:	4629      	mov	r1, r5
    aee6:	f7ff fe15 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    aeea:	e9cd 5403 	strd	r5, r4, [sp, #12]
    aeee:	2400      	movs	r4, #0
    aef0:	4b0d      	ldr	r3, [pc, #52]	; (af28 <disconnected+0x50>)
	if (auth_conn) {
    aef2:	4d0e      	ldr	r5, [pc, #56]	; (af2c <disconnected+0x54>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    aef4:	4620      	mov	r0, r4
    aef6:	9302      	str	r3, [sp, #8]
    aef8:	2203      	movs	r2, #3
    aefa:	4623      	mov	r3, r4
    aefc:	e9cd 4400 	strd	r4, r4, [sp]
    af00:	490b      	ldr	r1, [pc, #44]	; (af30 <disconnected+0x58>)
    af02:	f019 f9a7 	bl	24254 <z_log_msg_runtime_create.constprop.0>
	if (auth_conn) {
    af06:	6828      	ldr	r0, [r5, #0]
    af08:	b110      	cbz	r0, af10 <disconnected+0x38>
		bt_conn_unref(auth_conn);
    af0a:	f008 ff6f 	bl	13dec <bt_conn_unref>
		auth_conn = NULL;
    af0e:	602c      	str	r4, [r5, #0]
	if (current_conn) {
    af10:	4c08      	ldr	r4, [pc, #32]	; (af34 <disconnected+0x5c>)
    af12:	6820      	ldr	r0, [r4, #0]
    af14:	b130      	cbz	r0, af24 <disconnected+0x4c>
		bt_conn_unref(current_conn);
    af16:	f008 ff69 	bl	13dec <bt_conn_unref>
		current_conn = NULL;
    af1a:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    af1c:	4806      	ldr	r0, [pc, #24]	; (af38 <disconnected+0x60>)
		current_conn = NULL;
    af1e:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    af20:	f7ff ff5a 	bl	add8 <gpio_pin_set_dt.isra.0>
}
    af24:	b00f      	add	sp, #60	; 0x3c
    af26:	bd30      	pop	{r4, r5, pc}
    af28:	0002b5b5 	.word	0x0002b5b5
    af2c:	20009d30 	.word	0x20009d30
    af30:	0002a458 	.word	0x0002a458
    af34:	20009d34 	.word	0x20009d34
    af38:	0002a700 	.word	0x0002a700

0000af3c <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    af3c:	4603      	mov	r3, r0
    af3e:	b570      	push	{r4, r5, r6, lr}
    af40:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    af42:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    af44:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    af46:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    af48:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    af4a:	f002 0430 	and.w	r4, r2, #48	; 0x30
    af4e:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    af50:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    af52:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    af56:	d10e      	bne.n	af76 <gpio_pin_configure_dt.isra.0+0x3a>
    af58:	4925      	ldr	r1, [pc, #148]	; (aff0 <gpio_pin_configure_dt.isra.0+0xb4>)
    af5a:	f240 23b7 	movw	r3, #695	; 0x2b7
    af5e:	4a25      	ldr	r2, [pc, #148]	; (aff4 <gpio_pin_configure_dt.isra.0+0xb8>)
    af60:	4825      	ldr	r0, [pc, #148]	; (aff8 <gpio_pin_configure_dt.isra.0+0xbc>)
    af62:	f019 fd20 	bl	249a6 <assert_print>
    af66:	4825      	ldr	r0, [pc, #148]	; (affc <gpio_pin_configure_dt.isra.0+0xc0>)
    af68:	f019 fd1d 	bl	249a6 <assert_print>
    af6c:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    af70:	4820      	ldr	r0, [pc, #128]	; (aff4 <gpio_pin_configure_dt.isra.0+0xb8>)
    af72:	f019 fd11 	bl	24998 <assert_post_action>
    af76:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    af7a:	2c02      	cmp	r4, #2
    af7c:	d10c      	bne.n	af98 <gpio_pin_configure_dt.isra.0+0x5c>
    af7e:	4920      	ldr	r1, [pc, #128]	; (b000 <gpio_pin_configure_dt.isra.0+0xc4>)
    af80:	f240 23bb 	movw	r3, #699	; 0x2bb
    af84:	4a1b      	ldr	r2, [pc, #108]	; (aff4 <gpio_pin_configure_dt.isra.0+0xb8>)
    af86:	481c      	ldr	r0, [pc, #112]	; (aff8 <gpio_pin_configure_dt.isra.0+0xbc>)
    af88:	f019 fd0d 	bl	249a6 <assert_print>
    af8c:	481d      	ldr	r0, [pc, #116]	; (b004 <gpio_pin_configure_dt.isra.0+0xc8>)
    af8e:	f019 fd0a 	bl	249a6 <assert_print>
    af92:	f240 21bb 	movw	r1, #699	; 0x2bb
    af96:	e7eb      	b.n	af70 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    af98:	f002 0406 	and.w	r4, r2, #6
    af9c:	2c04      	cmp	r4, #4
    af9e:	d109      	bne.n	afb4 <gpio_pin_configure_dt.isra.0+0x78>
    afa0:	4919      	ldr	r1, [pc, #100]	; (b008 <gpio_pin_configure_dt.isra.0+0xcc>)
    afa2:	f240 23bf 	movw	r3, #703	; 0x2bf
    afa6:	4a13      	ldr	r2, [pc, #76]	; (aff4 <gpio_pin_configure_dt.isra.0+0xb8>)
    afa8:	4813      	ldr	r0, [pc, #76]	; (aff8 <gpio_pin_configure_dt.isra.0+0xbc>)
    afaa:	f019 fcfc 	bl	249a6 <assert_print>
    afae:	f240 21bf 	movw	r1, #703	; 0x2bf
    afb2:	e7dd      	b.n	af70 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    afb4:	2401      	movs	r4, #1
    afb6:	681b      	ldr	r3, [r3, #0]
    afb8:	408c      	lsls	r4, r1
    afba:	421c      	tst	r4, r3
    afbc:	d10c      	bne.n	afd8 <gpio_pin_configure_dt.isra.0+0x9c>
    afbe:	4913      	ldr	r1, [pc, #76]	; (b00c <gpio_pin_configure_dt.isra.0+0xd0>)
    afc0:	f240 23d2 	movw	r3, #722	; 0x2d2
    afc4:	4a0b      	ldr	r2, [pc, #44]	; (aff4 <gpio_pin_configure_dt.isra.0+0xb8>)
    afc6:	480c      	ldr	r0, [pc, #48]	; (aff8 <gpio_pin_configure_dt.isra.0+0xbc>)
    afc8:	f019 fced 	bl	249a6 <assert_print>
    afcc:	4810      	ldr	r0, [pc, #64]	; (b010 <gpio_pin_configure_dt.isra.0+0xd4>)
    afce:	f019 fcea 	bl	249a6 <assert_print>
    afd2:	f240 21d2 	movw	r1, #722	; 0x2d2
    afd6:	e7cb      	b.n	af70 <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    afd8:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    afda:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    afde:	bf14      	ite	ne
    afe0:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    afe2:	43a3      	biceq	r3, r4
    afe4:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    afe6:	6833      	ldr	r3, [r6, #0]
}
    afe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    afec:	4718      	bx	r3
    afee:	bf00      	nop
    aff0:	0002b5d2 	.word	0x0002b5d2
    aff4:	0002b2ca 	.word	0x0002b2ca
    aff8:	0002b339 	.word	0x0002b339
    affc:	0002b60b 	.word	0x0002b60b
    b000:	0002b648 	.word	0x0002b648
    b004:	0002b67d 	.word	0x0002b67d
    b008:	0002b6cf 	.word	0x0002b6cf
    b00c:	0002b2fb 	.word	0x0002b2fb
    b010:	0002b356 	.word	0x0002b356

0000b014 <adc_thread>:
}




void adc_thread(void){
    b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b018:	4e36      	ldr	r6, [pc, #216]	; (b0f4 <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    b01a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b0f8 <adc_thread+0xe4>
    b01e:	b085      	sub	sp, #20
	int err;
    

    while (1) {	
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b020:	4c36      	ldr	r4, [pc, #216]	; (b0fc <adc_thread+0xe8>)
    b022:	2700      	movs	r7, #0
    b024:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
            k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b026:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b100 <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    b02a:	7963      	ldrb	r3, [r4, #5]
    b02c:	b13b      	cbz	r3, b03e <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    b02e:	2301      	movs	r3, #1
    b030:	7922      	ldrb	r2, [r4, #4]
    b032:	4093      	lsls	r3, r2
    b034:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    b036:	7c23      	ldrb	r3, [r4, #16]
    b038:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    b03a:	7c63      	ldrb	r3, [r4, #17]
    b03c:	7473      	strb	r3, [r6, #17]
    b03e:	f04f 32ff 	mov.w	r2, #4294967295
    b042:	f04f 33ff 	mov.w	r3, #4294967295
    b046:	4650      	mov	r0, sl
    b048:	f014 fae6 	bl	1f618 <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    b04c:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    b04e:	68ab      	ldr	r3, [r5, #8]
    b050:	4631      	mov	r1, r6
    b052:	4628      	mov	r0, r5
    b054:	685b      	ldr	r3, [r3, #4]
    b056:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b058:	7922      	ldrb	r2, [r4, #4]
    b05a:	f9b8 1000 	ldrsh.w	r1, [r8]
    b05e:	4b29      	ldr	r3, [pc, #164]	; (b104 <adc_thread+0xf0>)
    b060:	9201      	str	r2, [sp, #4]
    b062:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

           if (flag==1){
    b066:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b108 <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    b06a:	4650      	mov	r0, sl
    b06c:	f014 fba4 	bl	1f7b8 <z_impl_k_mutex_unlock>
    b070:	f8d9 3000 	ldr.w	r3, [r9]
    b074:	9a01      	ldr	r2, [sp, #4]
    b076:	2b01      	cmp	r3, #1
    b078:	d12d      	bne.n	b0d6 <adc_thread+0xc2>
			printk("- %s, channel %d: ",adc_channels[i].dev->name,adc_channels[i].channel_id);
    b07a:	6829      	ldr	r1, [r5, #0]
    b07c:	4823      	ldr	r0, [pc, #140]	; (b10c <adc_thread+0xf8>)
    b07e:	f019 fad0 	bl	24622 <printk>
			printk("%"PRId16, buf_adc);
    b082:	f9b8 1000 	ldrsh.w	r1, [r8]
    b086:	4822      	ldr	r0, [pc, #136]	; (b110 <adc_thread+0xfc>)
    b088:	f019 facb 	bl	24622 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b08c:	7963      	ldrb	r3, [r4, #5]
			val_mv = buf_adc;
    b08e:	f9b8 5000 	ldrsh.w	r5, [r8]
    b092:	b1e3      	cbz	r3, b0ce <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    b094:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b096:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    b098:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b09c:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    b09e:	bf0a      	itet	eq
    b0a0:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    b0a2:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    b0a4:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    b0a6:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    b0a8:	bf08      	it	eq
    b0aa:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    b0ac:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    b0ae:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    b0b0:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    b0b2:	bf44      	itt	mi
    b0b4:	f103 33ff 	addmi.w	r3, r3, #4294967295
    b0b8:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    b0ba:	79a0      	ldrb	r0, [r4, #6]
    b0bc:	a903      	add	r1, sp, #12
    b0be:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    b0c0:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    b0c2:	f00e f8fb 	bl	192bc <adc_gain_invert>
	if (ret == 0) {
    b0c6:	b910      	cbnz	r0, b0ce <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    b0c8:	9d03      	ldr	r5, [sp, #12]
    b0ca:	9b01      	ldr	r3, [sp, #4]
    b0cc:	411d      	asrs	r5, r3
			adc_raw_to_millivolts_dt(&adc_channels[i],&val_mv);
			printk(" = %"PRId32" mV\n", val_mv);
    b0ce:	4629      	mov	r1, r5
    b0d0:	4810      	ldr	r0, [pc, #64]	; (b114 <adc_thread+0x100>)
    b0d2:	f019 faa6 	bl	24622 <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b0d6:	3701      	adds	r7, #1
    b0d8:	2f06      	cmp	r7, #6
    b0da:	f104 0414 	add.w	r4, r4, #20
    b0de:	d1a4      	bne.n	b02a <adc_thread+0x16>
		   }
			
		}
        flag=0;
    b0e0:	2300      	movs	r3, #0
		k_sleep(K_MSEC(100));
    b0e2:	f640 40cd 	movw	r0, #3277	; 0xccd
    b0e6:	2100      	movs	r1, #0
        flag=0;
    b0e8:	f8c9 3000 	str.w	r3, [r9]
		k_sleep(K_MSEC(100));
    b0ec:	f019 f8d9 	bl	242a2 <k_sleep.isra.0>
    while (1) {	
    b0f0:	e796      	b.n	b020 <adc_thread+0xc>
    b0f2:	bf00      	nop
    b0f4:	200083e4 	.word	0x200083e4
    b0f8:	20009d7c 	.word	0x20009d7c
    b0fc:	0002a670 	.word	0x0002a670
    b100:	200214e8 	.word	0x200214e8
    b104:	200214d8 	.word	0x200214d8
    b108:	20009d78 	.word	0x20009d78
    b10c:	0002b702 	.word	0x0002b702
    b110:	0002b715 	.word	0x0002b715
    b114:	0002b719 	.word	0x0002b719

0000b118 <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	switch (evt->type) {
    b11a:	780b      	ldrb	r3, [r1, #0]
    b11c:	2b05      	cmp	r3, #5
    b11e:	d828      	bhi.n	b172 <uart_cb+0x5a>
    b120:	e8df f003 	tbb	[pc, r3]
    b124:	672b8f03 	.word	0x672b8f03
    b128:	467f      	.short	0x467f
		if ((evt->data.tx.len == 0) ||
    b12a:	688b      	ldr	r3, [r1, #8]
    b12c:	b30b      	cbz	r3, b172 <uart_cb+0x5a>
		    (!evt->data.tx.buf)) {
    b12e:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    b130:	b1f8      	cbz	r0, b172 <uart_cb+0x5a>
		if (aborted_buf) {
    b132:	4a4e      	ldr	r2, [pc, #312]	; (b26c <uart_cb+0x154>)
    b134:	6813      	ldr	r3, [r2, #0]
    b136:	b1f3      	cbz	r3, b176 <uart_cb+0x5e>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b138:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    b13a:	2300      	movs	r3, #0
    b13c:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    b13e:	4a4c      	ldr	r2, [pc, #304]	; (b270 <uart_cb+0x158>)
    b140:	6013      	str	r3, [r2, #0]
		k_free(buf);
    b142:	f01e f97a 	bl	2943a <k_free>
	return z_impl_k_queue_get(queue, timeout);
    b146:	2200      	movs	r2, #0
    b148:	2300      	movs	r3, #0
    b14a:	484a      	ldr	r0, [pc, #296]	; (b274 <uart_cb+0x15c>)
    b14c:	f014 fc5c 	bl	1fa08 <z_impl_k_queue_get>
		if (!buf) {
    b150:	b178      	cbz	r0, b172 <uart_cb+0x5a>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
    b152:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b154:	1d01      	adds	r1, r0, #4
    b156:	4848      	ldr	r0, [pc, #288]	; (b278 <uart_cb+0x160>)
    b158:	f019 f893 	bl	24282 <uart_tx.constprop.0>
    b15c:	b148      	cbz	r0, b172 <uart_cb+0x5a>
			LOG_WRN("Failed to send data over UART");
    b15e:	4b47      	ldr	r3, [pc, #284]	; (b27c <uart_cb+0x164>)
    b160:	2202      	movs	r2, #2
    b162:	9302      	str	r3, [sp, #8]
    b164:	2300      	movs	r3, #0
    b166:	4618      	mov	r0, r3
    b168:	e9cd 3300 	strd	r3, r3, [sp]
    b16c:	4944      	ldr	r1, [pc, #272]	; (b280 <uart_cb+0x168>)
			LOG_WRN("Not able to allocate UART receive buffer");
    b16e:	f019 f871 	bl	24254 <z_log_msg_runtime_create.constprop.0>
}
    b172:	b004      	add	sp, #16
    b174:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
    b176:	3804      	subs	r0, #4
    b178:	e7e3      	b.n	b142 <uart_cb+0x2a>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b17a:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    b17c:	68cb      	ldr	r3, [r1, #12]
    b17e:	8d10      	ldrh	r0, [r2, #40]	; 0x28
    b180:	4403      	add	r3, r0
		if (disable_req) {
    b182:	4840      	ldr	r0, [pc, #256]	; (b284 <uart_cb+0x16c>)
		buf->len += evt->data.rx.len;
    b184:	b29b      	uxth	r3, r3
    b186:	8513      	strh	r3, [r2, #40]	; 0x28
		if (disable_req) {
    b188:	7802      	ldrb	r2, [r0, #0]
    b18a:	2a00      	cmp	r2, #0
    b18c:	d1f1      	bne.n	b172 <uart_cb+0x5a>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    b18e:	684a      	ldr	r2, [r1, #4]
    b190:	4413      	add	r3, r2
    b192:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b196:	2b0a      	cmp	r3, #10
    b198:	d001      	beq.n	b19e <uart_cb+0x86>
    b19a:	2b0d      	cmp	r3, #13
    b19c:	d1e9      	bne.n	b172 <uart_cb+0x5a>
			disable_req = true;
    b19e:	2301      	movs	r3, #1
    b1a0:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    b1a2:	4835      	ldr	r0, [pc, #212]	; (b278 <uart_cb+0x160>)
    b1a4:	6883      	ldr	r3, [r0, #8]
    b1a6:	695b      	ldr	r3, [r3, #20]
}
    b1a8:	b004      	add	sp, #16
    b1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1ae:	4718      	bx	r3
		disable_req = false;
    b1b0:	2400      	movs	r4, #0
    b1b2:	4b34      	ldr	r3, [pc, #208]	; (b284 <uart_cb+0x16c>)
		buf = k_malloc(sizeof(*buf));
    b1b4:	2030      	movs	r0, #48	; 0x30
		disable_req = false;
    b1b6:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    b1b8:	f01e f946 	bl	29448 <k_malloc>
    b1bc:	4603      	mov	r3, r0
		if (buf) {
    b1be:	b138      	cbz	r0, b1d0 <uart_cb+0xb8>
			buf->len = 0;
    b1c0:	8584      	strh	r4, [r0, #44]	; 0x2c
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b1c2:	1d01      	adds	r1, r0, #4
    b1c4:	482c      	ldr	r0, [pc, #176]	; (b278 <uart_cb+0x160>)
}
    b1c6:	b004      	add	sp, #16
    b1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b1cc:	f019 b851 	b.w	24272 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    b1d0:	4a2d      	ldr	r2, [pc, #180]	; (b288 <uart_cb+0x170>)
    b1d2:	9000      	str	r0, [sp, #0]
    b1d4:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b1d8:	4929      	ldr	r1, [pc, #164]	; (b280 <uart_cb+0x168>)
    b1da:	2202      	movs	r2, #2
    b1dc:	f019 f83a 	bl	24254 <z_log_msg_runtime_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b1e0:	f240 6267 	movw	r2, #1639	; 0x667
    b1e4:	2300      	movs	r3, #0
    b1e6:	4829      	ldr	r0, [pc, #164]	; (b28c <uart_cb+0x174>)
}
    b1e8:	b004      	add	sp, #16
    b1ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b1ee:	f015 ba15 	b.w	2061c <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    b1f2:	2030      	movs	r0, #48	; 0x30
    b1f4:	f01e f928 	bl	29448 <k_malloc>
    b1f8:	4603      	mov	r3, r0
		if (buf) {
    b1fa:	b158      	cbz	r0, b214 <uart_cb+0xfc>
			buf->len = 0;
    b1fc:	2200      	movs	r2, #0
    b1fe:	8582      	strh	r2, [r0, #44]	; 0x2c
	return api->rx_buf_rsp(dev, buf, len);
    b200:	481d      	ldr	r0, [pc, #116]	; (b278 <uart_cb+0x160>)
    b202:	1d19      	adds	r1, r3, #4
    b204:	6882      	ldr	r2, [r0, #8]
    b206:	6914      	ldr	r4, [r2, #16]
    b208:	2228      	movs	r2, #40	; 0x28
    b20a:	4623      	mov	r3, r4
}
    b20c:	b004      	add	sp, #16
    b20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b212:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    b214:	4a1c      	ldr	r2, [pc, #112]	; (b288 <uart_cb+0x170>)
    b216:	491a      	ldr	r1, [pc, #104]	; (b280 <uart_cb+0x168>)
    b218:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b21c:	9000      	str	r0, [sp, #0]
    b21e:	2202      	movs	r2, #2
    b220:	e7a5      	b.n	b16e <uart_cb+0x56>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    b222:	684b      	ldr	r3, [r1, #4]
    b224:	1f19      	subs	r1, r3, #4
		if (buf->len > 0) {
    b226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b228:	b12b      	cbz	r3, b236 <uart_cb+0x11e>
			k_fifo_put(&fifo_uart_rx_data, buf);
    b22a:	4819      	ldr	r0, [pc, #100]	; (b290 <uart_cb+0x178>)
}
    b22c:	b004      	add	sp, #16
    b22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    b232:	f01d bf55 	b.w	290e0 <k_queue_append>
			k_free(buf);
    b236:	4608      	mov	r0, r1
}
    b238:	b004      	add	sp, #16
    b23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    b23e:	f01e b8fc 	b.w	2943a <k_free>
		if (!aborted_buf) {
    b242:	4a0a      	ldr	r2, [pc, #40]	; (b26c <uart_cb+0x154>)
    b244:	6813      	ldr	r3, [r2, #0]
    b246:	b90b      	cbnz	r3, b24c <uart_cb+0x134>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    b248:	684b      	ldr	r3, [r1, #4]
    b24a:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    b24c:	4808      	ldr	r0, [pc, #32]	; (b270 <uart_cb+0x158>)
    b24e:	688b      	ldr	r3, [r1, #8]
    b250:	6801      	ldr	r1, [r0, #0]
    b252:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b254:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    b256:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
    b258:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
		uart_tx(uart, &buf->data[aborted_len],
    b25a:	4807      	ldr	r0, [pc, #28]	; (b278 <uart_cb+0x160>)
    b25c:	1ad2      	subs	r2, r2, r3
    b25e:	4419      	add	r1, r3
}
    b260:	b004      	add	sp, #16
    b262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
    b266:	f019 b80c 	b.w	24282 <uart_tx.constprop.0>
    b26a:	bf00      	nop
    b26c:	20009d2c 	.word	0x20009d2c
    b270:	20009d28 	.word	0x20009d28
    b274:	20008b94 	.word	0x20008b94
    b278:	00029e68 	.word	0x00029e68
    b27c:	0002b723 	.word	0x0002b723
    b280:	0002a458 	.word	0x0002a458
    b284:	20021506 	.word	0x20021506
    b288:	0002b3e4 	.word	0x0002b3e4
    b28c:	20009140 	.word	0x20009140
    b290:	20008b78 	.word	0x20008b78

0000b294 <shoot_minute_save_thread>:
void shoot_minute_save_thread(void){
    b294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_uptime_ticks();
    b298:	f01d ffe0 	bl	2925c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b29c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2a0:	fba0 0302 	umull	r0, r3, r0, r2
    b2a4:	fb02 3101 	mla	r1, r2, r1, r3
    b2a8:	0bc0      	lsrs	r0, r0, #15
   uint64_t actual_time = k_uptime_get()/1000;
    b2aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2ae:	2300      	movs	r3, #0
    b2b0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    b2b4:	0bc9      	lsrs	r1, r1, #15
    b2b6:	f7fd fdcb 	bl	8e50 <__aeabi_ldivmod>
    h = (actual_time/3600); 
    b2ba:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b2be:	2300      	movs	r3, #0
   uint64_t actual_time = k_uptime_get()/1000;
    b2c0:	460d      	mov	r5, r1
    b2c2:	4606      	mov	r6, r0
    h = (actual_time/3600); 
    b2c4:	f7fd fe14 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b2c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b2cc:	fb03 f100 	mul.w	r1, r3, r0
    b2d0:	1a70      	subs	r0, r6, r1
    b2d2:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    b2d6:	223c      	movs	r2, #60	; 0x3c
    b2d8:	2300      	movs	r3, #0
    b2da:	f7fd fe09 	bl	8ef0 <__aeabi_uldivmod>
    b2de:	4605      	mov	r5, r0
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b2e0:	4f22      	ldr	r7, [pc, #136]	; (b36c <shoot_minute_save_thread+0xd8>)
    b2e2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    b2e6:	f01d ffb9 	bl	2925c <z_impl_k_uptime_ticks>
    b2ea:	fba0 4306 	umull	r4, r3, r0, r6
    b2ee:	fb06 3101 	mla	r1, r6, r1, r3
    b2f2:	0be4      	lsrs	r4, r4, #15
    actual_time = k_uptime_get()/1000;
    b2f4:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
    b2f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2fc:	2300      	movs	r3, #0
    b2fe:	0bc9      	lsrs	r1, r1, #15
    b300:	f7fd fda6 	bl	8e50 <__aeabi_ldivmod>
	h = (actual_time/3600); 
    b304:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b308:	2300      	movs	r3, #0
    actual_time = k_uptime_get()/1000;
    b30a:	4604      	mov	r4, r0
    b30c:	468a      	mov	sl, r1
	m = (actual_time -(3600*h))/60;
    b30e:	f44f 6861 	mov.w	r8, #3600	; 0xe10
	h = (actual_time/3600); 
    b312:	f7fd fded 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b316:	fb08 f800 	mul.w	r8, r8, r0
	h = (actual_time/3600); 
    b31a:	4681      	mov	r9, r0
	m = (actual_time -(3600*h))/60;
    b31c:	ebb4 0008 	subs.w	r0, r4, r8
    b320:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b324:	eb6a 71e8 	sbc.w	r1, sl, r8, asr #31
    b328:	2300      	movs	r3, #0
    b32a:	f7fd fde1 	bl	8ef0 <__aeabi_uldivmod>
   if (m==(last_minute+1)){
    b32e:	1c6a      	adds	r2, r5, #1
    b330:	4282      	cmp	r2, r0
    b332:	d1d8      	bne.n	b2e6 <shoot_minute_save_thread+0x52>
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b334:	233c      	movs	r3, #60	; 0x3c
        if (m==59){last_minute=-1;}
    b336:	2a3b      	cmp	r2, #59	; 0x3b
    b338:	bf14      	ite	ne
    b33a:	4615      	movne	r5, r2
    b33c:	f04f 35ff 	moveq.w	r5, #4294967295
	s = (actual_time -(3600*h)-(m*60));
    b340:	eba4 0408 	sub.w	r4, r4, r8
		if (h==24){h=0;} // only up to 23:59:59h
    b344:	f1b9 0f18 	cmp.w	r9, #24
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b348:	fb03 4312 	mls	r3, r3, r2, r4
    b34c:	bf14      	ite	ne
    b34e:	4649      	movne	r1, r9
    b350:	2100      	moveq	r1, #0
    b352:	4638      	mov	r0, r7
    b354:	f019 f965 	bl	24622 <printk>
        feed_circular_buffer();
    b358:	f000 fbe2 	bl	bb20 <feed_circular_buffer>
		print_current_position_cb(C_Buffer_Current_Position);
    b35c:	4b04      	ldr	r3, [pc, #16]	; (b370 <shoot_minute_save_thread+0xdc>)
    b35e:	6818      	ldr	r0, [r3, #0]
    b360:	f000 fd14 	bl	bd8c <print_current_position_cb>
		printk(" \n");
    b364:	4803      	ldr	r0, [pc, #12]	; (b374 <shoot_minute_save_thread+0xe0>)
    b366:	f019 f95c 	bl	24622 <printk>
    b36a:	e7ba      	b.n	b2e2 <shoot_minute_save_thread+0x4e>
    b36c:	0002b741 	.word	0x0002b741
    b370:	20020eb0 	.word	0x20020eb0
    b374:	0002bbe8 	.word	0x0002bbe8

0000b378 <ble_write_thread>:
{
    b378:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    b37a:	f04f 32ff 	mov.w	r2, #4294967295
    b37e:	f04f 33ff 	mov.w	r3, #4294967295
    b382:	480d      	ldr	r0, [pc, #52]	; (b3b8 <ble_write_thread+0x40>)
    b384:	f018 ff85 	bl	24292 <k_sem_take.constprop.0.isra.0>
	return z_impl_k_queue_get(queue, timeout);
    b388:	4d0c      	ldr	r5, [pc, #48]	; (b3bc <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    b38a:	4e0d      	ldr	r6, [pc, #52]	; (b3c0 <ble_write_thread+0x48>)
    b38c:	f04f 32ff 	mov.w	r2, #4294967295
    b390:	f04f 33ff 	mov.w	r3, #4294967295
    b394:	4628      	mov	r0, r5
    b396:	f014 fb37 	bl	1fa08 <z_impl_k_queue_get>
    b39a:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len)) {
    b39c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b39e:	1d01      	adds	r1, r0, #4
    b3a0:	2000      	movs	r0, #0
    b3a2:	f004 fb09 	bl	f9b8 <bt_nus_send>
    b3a6:	b110      	cbz	r0, b3ae <ble_write_thread+0x36>
			printk("Falha aqui- Failed to send data over BLE connection");
    b3a8:	4630      	mov	r0, r6
    b3aa:	f019 f93a 	bl	24622 <printk>
		k_free(buf);
    b3ae:	4620      	mov	r0, r4
    b3b0:	f01e f843 	bl	2943a <k_free>
	for (;;) {
    b3b4:	e7ea      	b.n	b38c <ble_write_thread+0x14>
    b3b6:	bf00      	nop
    b3b8:	20008ad0 	.word	0x20008ad0
    b3bc:	20008b78 	.word	0x20008b78
    b3c0:	0002b771 	.word	0x0002b771

0000b3c4 <button_pressed_4>:
void button_pressed_4(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b3c4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b3c6:	4805      	ldr	r0, [pc, #20]	; (b3dc <button_pressed_4+0x18>)
    b3c8:	f014 fb88 	bl	1fadc <z_impl_k_sem_give>
    b3cc:	f01c feff 	bl	281ce <sys_clock_cycle_get_32>
}
    b3d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b3d4:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b3d6:	4802      	ldr	r0, [pc, #8]	; (b3e0 <button_pressed_4+0x1c>)
    b3d8:	f019 b923 	b.w	24622 <printk>
    b3dc:	20008b00 	.word	0x20008b00
    b3e0:	0002b7a5 	.word	0x0002b7a5

0000b3e4 <button_pressed_3>:
void button_pressed_3(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b3e4:	b508      	push	{r3, lr}
    b3e6:	4805      	ldr	r0, [pc, #20]	; (b3fc <button_pressed_3+0x18>)
    b3e8:	f014 fb78 	bl	1fadc <z_impl_k_sem_give>
    b3ec:	f01c feef 	bl	281ce <sys_clock_cycle_get_32>
}
    b3f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b3f4:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b3f6:	4802      	ldr	r0, [pc, #8]	; (b400 <button_pressed_3+0x1c>)
    b3f8:	f019 b913 	b.w	24622 <printk>
    b3fc:	20008ae8 	.word	0x20008ae8
    b400:	0002b7bd 	.word	0x0002b7bd

0000b404 <button_pressed_2>:
void button_pressed_2(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b404:	b508      	push	{r3, lr}
    b406:	4807      	ldr	r0, [pc, #28]	; (b424 <button_pressed_2+0x20>)
    b408:	f014 fb68 	bl	1fadc <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    b40c:	2101      	movs	r1, #1
    b40e:	4806      	ldr	r0, [pc, #24]	; (b428 <button_pressed_2+0x24>)
    b410:	f7ff fce2 	bl	add8 <gpio_pin_set_dt.isra.0>
    b414:	f01c fedb 	bl	281ce <sys_clock_cycle_get_32>
}
    b418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b41c:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    b41e:	4803      	ldr	r0, [pc, #12]	; (b42c <button_pressed_2+0x28>)
    b420:	f019 b8ff 	b.w	24622 <printk>
    b424:	20008b30 	.word	0x20008b30
    b428:	0002a6f0 	.word	0x0002a6f0
    b42c:	0002b7d5 	.word	0x0002b7d5

0000b430 <uart2_teste>:
void uart2_teste(void){
    b430:	b510      	push	{r4, lr}
   buf = k_malloc(sizeof(*buf));
    b432:	2030      	movs	r0, #48	; 0x30
    b434:	f01e f808 	bl	29448 <k_malloc>
    buf->data[0] = 0x41;
    b438:	f244 2341 	movw	r3, #16961	; 0x4241
    buf->len=3;
    b43c:	2203      	movs	r2, #3
    buf->data[0] = 0x41;
    b43e:	8083      	strh	r3, [r0, #4]
	buf->data[2] = 0x43;
    b440:	2343      	movs	r3, #67	; 0x43
   buf = k_malloc(sizeof(*buf));
    b442:	4604      	mov	r4, r0
	buf->data[2] = 0x43;
    b444:	7183      	strb	r3, [r0, #6]
    buf->len=3;
    b446:	8582      	strh	r2, [r0, #44]	; 0x2c
   uart_tx(uart_2, buf->data, buf->len, SYS_FOREVER_MS);
    b448:	1d01      	adds	r1, r0, #4
    b44a:	4804      	ldr	r0, [pc, #16]	; (b45c <uart2_teste+0x2c>)
    b44c:	f018 ff19 	bl	24282 <uart_tx.constprop.0>
   k_free(buf);
    b450:	4620      	mov	r0, r4
}
    b452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   k_free(buf);
    b456:	f01d bff0 	b.w	2943a <k_free>
    b45a:	bf00      	nop
    b45c:	00029e50 	.word	0x00029e50

0000b460 <flash_button2_counter>:
void flash_button2_counter(void){
    b460:	b510      	push	{r4, lr}
    button2_counter++;
    b462:	4c0d      	ldr	r4, [pc, #52]	; (b498 <flash_button2_counter+0x38>)
	(void)nvs_write(
    b464:	2103      	movs	r1, #3
    button2_counter++;
    b466:	6823      	ldr	r3, [r4, #0]
	(void)nvs_write(
    b468:	4622      	mov	r2, r4
    button2_counter++;
    b46a:	3301      	adds	r3, #1
    b46c:	6023      	str	r3, [r4, #0]
	(void)nvs_write(
    b46e:	480b      	ldr	r0, [pc, #44]	; (b49c <flash_button2_counter+0x3c>)
    b470:	2304      	movs	r3, #4
    b472:	f003 fbc5 	bl	ec00 <nvs_write>
    rc = nvs_read(&fs, RBT_CNT_ID, &button2_counter, sizeof(button2_counter));
    b476:	2304      	movs	r3, #4
    b478:	4622      	mov	r2, r4
    b47a:	2103      	movs	r1, #3
    b47c:	4807      	ldr	r0, [pc, #28]	; (b49c <flash_button2_counter+0x3c>)
    b47e:	f019 fcbf 	bl	24e00 <nvs_read>
	if (rc > 0) { /* item was found, show it */
    b482:	2800      	cmp	r0, #0
    b484:	dd06      	ble.n	b494 <flash_button2_counter+0x34>
		printk("Id: %d, button2_counter: %d\n",
    b486:	6822      	ldr	r2, [r4, #0]
    b488:	2103      	movs	r1, #3
}
    b48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Id: %d, button2_counter: %d\n",
    b48e:	4804      	ldr	r0, [pc, #16]	; (b4a0 <flash_button2_counter+0x40>)
    b490:	f019 b8c7 	b.w	24622 <printk>
}
    b494:	bd10      	pop	{r4, pc}
    b496:	bf00      	nop
    b498:	20009d44 	.word	0x20009d44
    b49c:	20009d48 	.word	0x20009d48
    b4a0:	0002b7ed 	.word	0x0002b7ed

0000b4a4 <write_memory_thread>:
void write_memory_thread(void){
    b4a4:	b510      	push	{r4, lr}
		    k_sem_take(&save_memory,K_FOREVER);
    b4a6:	4c05      	ldr	r4, [pc, #20]	; (b4bc <write_memory_thread+0x18>)
    b4a8:	f04f 32ff 	mov.w	r2, #4294967295
    b4ac:	f04f 33ff 	mov.w	r3, #4294967295
    b4b0:	4620      	mov	r0, r4
    b4b2:	f018 feee 	bl	24292 <k_sem_take.constprop.0.isra.0>
		    flash_button2_counter();
    b4b6:	f7ff ffd3 	bl	b460 <flash_button2_counter>
	while(1){
    b4ba:	e7f5      	b.n	b4a8 <write_memory_thread+0x4>
    b4bc:	20008b30 	.word	0x20008b30

0000b4c0 <flash_test_>:
void flash_test_(void) {
    b4c0:	b570      	push	{r4, r5, r6, lr}
	fs.flash_device = NVS_PARTITION_DEVICE;
    b4c2:	4820      	ldr	r0, [pc, #128]	; (b544 <flash_test_+0x84>)
    b4c4:	4c20      	ldr	r4, [pc, #128]	; (b548 <flash_test_+0x88>)
    b4c6:	62a0      	str	r0, [r4, #40]	; 0x28
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b4c8:	f01d fd91 	bl	28fee <z_device_is_ready>
	if (!device_is_ready(fs.flash_device)) {
    b4cc:	b930      	cbnz	r0, b4dc <flash_test_+0x1c>
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    b4ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b4d0:	481e      	ldr	r0, [pc, #120]	; (b54c <flash_test_+0x8c>)
    b4d2:	6819      	ldr	r1, [r3, #0]
}
    b4d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    b4d8:	f019 b8a3 	b.w	24622 <printk>
	fs.offset = NVS_PARTITION_OFFSET;
    b4dc:	2100      	movs	r1, #0
	rc = flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info);
    b4de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	fs.offset = NVS_PARTITION_OFFSET;
    b4e0:	6021      	str	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    b4e2:	4d1b      	ldr	r5, [pc, #108]	; (b550 <flash_test_+0x90>)
    b4e4:	462a      	mov	r2, r5
    b4e6:	f01c fc20 	bl	27d2a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    b4ea:	b120      	cbz	r0, b4f6 <flash_test_+0x36>
		printk("Unable to get page info\n");
    b4ec:	4819      	ldr	r0, [pc, #100]	; (b554 <flash_test_+0x94>)
}
    b4ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Flash Init failed\n");
    b4f2:	f019 b896 	b.w	24622 <printk>
	fs.sector_size = info.size;
    b4f6:	686b      	ldr	r3, [r5, #4]
	rc = nvs_mount(&fs);
    b4f8:	4620      	mov	r0, r4
	fs.sector_size = info.size;
    b4fa:	81a3      	strh	r3, [r4, #12]
	fs.sector_count = 2048U; //NUMBER OF SECTORS total 0X800000 BYTES
    b4fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
    b500:	81e3      	strh	r3, [r4, #14]
	rc = nvs_mount(&fs);
    b502:	f003 f9ab 	bl	e85c <nvs_mount>
	if (rc) {
    b506:	b108      	cbz	r0, b50c <flash_test_+0x4c>
		printk("Flash Init failed\n");
    b508:	4813      	ldr	r0, [pc, #76]	; (b558 <flash_test_+0x98>)
    b50a:	e7f0      	b.n	b4ee <flash_test_+0x2e>
	rc = nvs_read(&fs, RBT_CNT_ID, &button2_counter, sizeof(button2_counter));
    b50c:	4d13      	ldr	r5, [pc, #76]	; (b55c <flash_test_+0x9c>)
    b50e:	2304      	movs	r3, #4
    b510:	462a      	mov	r2, r5
    b512:	2103      	movs	r1, #3
    b514:	4620      	mov	r0, r4
    b516:	f019 fc73 	bl	24e00 <nvs_read>
	if (rc > 0) { /* item was found, show it */
    b51a:	2800      	cmp	r0, #0
    b51c:	dd06      	ble.n	b52c <flash_test_+0x6c>
		printk("Id: %d, button2_counter: %d\n",
    b51e:	682a      	ldr	r2, [r5, #0]
    b520:	2103      	movs	r1, #3
}
    b522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Id: %d, button2_counter: %d\n",
    b526:	480e      	ldr	r0, [pc, #56]	; (b560 <flash_test_+0xa0>)
    b528:	f019 b87b 	b.w	24622 <printk>
		printk("No Reboot counter found, adding it at id %d\n",
    b52c:	2103      	movs	r1, #3
    b52e:	480d      	ldr	r0, [pc, #52]	; (b564 <flash_test_+0xa4>)
    b530:	f019 f877 	bl	24622 <printk>
		(void)nvs_write(&fs, RBT_CNT_ID, &button2_counter,
    b534:	462a      	mov	r2, r5
    b536:	4620      	mov	r0, r4
}
    b538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)nvs_write(&fs, RBT_CNT_ID, &button2_counter,
    b53c:	2304      	movs	r3, #4
    b53e:	2103      	movs	r1, #3
    b540:	f003 bb5e 	b.w	ec00 <nvs_write>
    b544:	00029ef8 	.word	0x00029ef8
    b548:	20009d48 	.word	0x20009d48
    b54c:	0002b80a 	.word	0x0002b80a
    b550:	20009d38 	.word	0x20009d38
    b554:	0002b828 	.word	0x0002b828
    b558:	0002b841 	.word	0x0002b841
    b55c:	20009d44 	.word	0x20009d44
    b560:	0002b7ed 	.word	0x0002b7ed
    b564:	0002b854 	.word	0x0002b854

0000b568 <send_bluetooth>:
{
    b568:	b084      	sub	sp, #16
    b56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b56e:	ac06      	add	r4, sp, #24
    b570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b574:	203d      	movs	r0, #61	; 0x3d
    uint32_t comprimento=buf.len;
    b576:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b57a:	f01d ff65 	bl	29448 <k_malloc>
    int k=0;
    b57e:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b580:	4605      	mov	r5, r0
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b582:	f8df 8054 	ldr.w	r8, [pc, #84]	; b5d8 <send_bluetooth+0x70>
    while(k<comprimento-1){
    b586:	1e77      	subs	r7, r6, #1
    b588:	42a7      	cmp	r7, r4
    b58a:	d91d      	bls.n	b5c8 <send_bluetooth+0x60>
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b58c:	42b4      	cmp	r4, r6
    b58e:	d301      	bcc.n	b594 <send_bluetooth+0x2c>
    b590:	2200      	movs	r2, #0
    b592:	e00f      	b.n	b5b4 <send_bluetooth+0x4c>
    b594:	2200      	movs	r2, #0
    b596:	1e6b      	subs	r3, r5, #1
       data[small_pkt]=buf.data[k];
    b598:	f104 0118 	add.w	r1, r4, #24
    b59c:	4469      	add	r1, sp
       small_pkt++;
    b59e:	3201      	adds	r2, #1
	   *(packet_data+small_pkt) = buf.data[k];
    b5a0:	7909      	ldrb	r1, [r1, #4]
       small_pkt++;
    b5a2:	b292      	uxth	r2, r2
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b5a4:	2a3d      	cmp	r2, #61	; 0x3d
	   *(packet_data+small_pkt) = buf.data[k];
    b5a6:	f803 1f01 	strb.w	r1, [r3, #1]!
       k++;
    b5aa:	f104 0401 	add.w	r4, r4, #1
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b5ae:	d001      	beq.n	b5b4 <send_bluetooth+0x4c>
    b5b0:	42a6      	cmp	r6, r4
    b5b2:	d8f1      	bhi.n	b598 <send_bluetooth+0x30>
           if (bt_nus_send(NULL, packet_data ,small_pkt)) {
    b5b4:	4629      	mov	r1, r5
    b5b6:	2000      	movs	r0, #0
    b5b8:	f004 f9fe 	bl	f9b8 <bt_nus_send>
    b5bc:	2800      	cmp	r0, #0
    b5be:	d0e3      	beq.n	b588 <send_bluetooth+0x20>
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b5c0:	4640      	mov	r0, r8
    b5c2:	f019 f82e 	bl	24622 <printk>
    b5c6:	e7df      	b.n	b588 <send_bluetooth+0x20>
     k_free(packet_data);
    b5c8:	4628      	mov	r0, r5
    b5ca:	f01d ff36 	bl	2943a <k_free>
}
    b5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5d2:	2000      	movs	r0, #0
    b5d4:	b004      	add	sp, #16
    b5d6:	4770      	bx	lr
    b5d8:	0002b881 	.word	0x0002b881

0000b5dc <send_protobuf_thread>:
void send_protobuf_thread(void){
    b5dc:	b510      	push	{r4, lr}
		    k_sem_take(&send_proto,K_FOREVER);
    b5de:	4c05      	ldr	r4, [pc, #20]	; (b5f4 <send_protobuf_thread+0x18>)
    b5e0:	f04f 32ff 	mov.w	r2, #4294967295
    b5e4:	f04f 33ff 	mov.w	r3, #4294967295
    b5e8:	4620      	mov	r0, r4
    b5ea:	f018 fe52 	bl	24292 <k_sem_take.constprop.0.isra.0>
		    send_protobuf();
    b5ee:	f018 fe5a 	bl	242a6 <send_protobuf>
   while(1){
    b5f2:	e7f5      	b.n	b5e0 <send_protobuf_thread+0x4>
    b5f4:	20008b60 	.word	0x20008b60

0000b5f8 <configure_all_buttons>:
void configure_all_buttons(void){
    b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    b5fa:	4c30      	ldr	r4, [pc, #192]	; (b6bc <configure_all_buttons+0xc4>)
    b5fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b600:	4620      	mov	r0, r4
    b602:	f7ff fc9b 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b606:	4620      	mov	r0, r4
    b608:	f7ff fa52 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    b60c:	492c      	ldr	r1, [pc, #176]	; (b6c0 <configure_all_buttons+0xc8>)
    b60e:	4b2d      	ldr	r3, [pc, #180]	; (b6c4 <configure_all_buttons+0xcc>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b610:	4c2d      	ldr	r4, [pc, #180]	; (b6c8 <configure_all_buttons+0xd0>)
    b612:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b614:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b618:	4620      	mov	r0, r4
    b61a:	608b      	str	r3, [r1, #8]
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b61c:	4d2b      	ldr	r5, [pc, #172]	; (b6cc <configure_all_buttons+0xd4>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b61e:	f018 fe3a 	bl	24296 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b622:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b624:	4f2a      	ldr	r7, [pc, #168]	; (b6d0 <configure_all_buttons+0xd8>)
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b626:	2217      	movs	r2, #23
    b628:	4631      	mov	r1, r6
    b62a:	4628      	mov	r0, r5
    b62c:	f018 fff9 	bl	24622 <printk>
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b630:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b634:	4638      	mov	r0, r7
    b636:	f7ff fc81 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b63a:	4638      	mov	r0, r7
    b63c:	f7ff fa38 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b640:	4924      	ldr	r1, [pc, #144]	; (b6d4 <configure_all_buttons+0xdc>)
    b642:	4b25      	ldr	r3, [pc, #148]	; (b6d8 <configure_all_buttons+0xe0>)
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b644:	4620      	mov	r0, r4
    b646:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b64c:	4f23      	ldr	r7, [pc, #140]	; (b6dc <configure_all_buttons+0xe4>)
    b64e:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b650:	f018 fe21 	bl	24296 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    b654:	2218      	movs	r2, #24
    b656:	4631      	mov	r1, r6
    b658:	4628      	mov	r0, r5
    b65a:	f018 ffe2 	bl	24622 <printk>
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b65e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b662:	4638      	mov	r0, r7
    b664:	f7ff fc6a 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON3_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b668:	4638      	mov	r0, r7
    b66a:	f7ff fa21 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b66e:	491c      	ldr	r1, [pc, #112]	; (b6e0 <configure_all_buttons+0xe8>)
    b670:	4b1c      	ldr	r3, [pc, #112]	; (b6e4 <configure_all_buttons+0xec>)
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b672:	4620      	mov	r0, r4
    b674:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b676:	f44f 7380 	mov.w	r3, #256	; 0x100
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b67a:	4f1b      	ldr	r7, [pc, #108]	; (b6e8 <configure_all_buttons+0xf0>)
    b67c:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b67e:	f018 fe0a 	bl	24296 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    b682:	2208      	movs	r2, #8
    b684:	4631      	mov	r1, r6
    b686:	4628      	mov	r0, r5
    b688:	f018 ffcb 	bl	24622 <printk>
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b68c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b690:	4638      	mov	r0, r7
    b692:	f7ff fc53 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON4_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b696:	4638      	mov	r0, r7
    b698:	f7ff fa0a 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b69c:	4913      	ldr	r1, [pc, #76]	; (b6ec <configure_all_buttons+0xf4>)
    b69e:	4b14      	ldr	r3, [pc, #80]	; (b6f0 <configure_all_buttons+0xf8>)
 gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    b6a0:	4620      	mov	r0, r4
    b6a2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b6a4:	f44f 7300 	mov.w	r3, #512	; 0x200
    b6a8:	608b      	str	r3, [r1, #8]
    b6aa:	f018 fdf4 	bl	24296 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b6ae:	4631      	mov	r1, r6
    b6b0:	4628      	mov	r0, r5
}
    b6b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b6b6:	2209      	movs	r2, #9
    b6b8:	f018 bfb3 	b.w	24622 <printk>
    b6bc:	0002a738 	.word	0x0002a738
    b6c0:	20009dd8 	.word	0x20009dd8
    b6c4:	0000ae3d 	.word	0x0000ae3d
    b6c8:	00029e08 	.word	0x00029e08
    b6cc:	0002b8a5 	.word	0x0002b8a5
    b6d0:	0002a730 	.word	0x0002a730
    b6d4:	20009dcc 	.word	0x20009dcc
    b6d8:	0000b405 	.word	0x0000b405
    b6dc:	0002a728 	.word	0x0002a728
    b6e0:	20009dc0 	.word	0x20009dc0
    b6e4:	0000b3e5 	.word	0x0000b3e5
    b6e8:	0002a720 	.word	0x0002a720
    b6ec:	20009db4 	.word	0x20009db4
    b6f0:	0000b3c5 	.word	0x0000b3c5

0000b6f4 <configure_digital_inputs>:
void configure_digital_inputs(void){
    b6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT );
    b6f6:	4c2e      	ldr	r4, [pc, #184]	; (b7b0 <configure_digital_inputs+0xbc>)
    b6f8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b6fc:	4620      	mov	r0, r4
    b6fe:	f7ff fc1d 	bl	af3c <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 4 Value:%d \n",gpio_pin_get_dt(DIG_0_ADR));
    b702:	4620      	mov	r0, r4
    b704:	f7ff f8e4 	bl	a8d0 <gpio_pin_get_dt>
    b708:	4601      	mov	r1, r0
    b70a:	482a      	ldr	r0, [pc, #168]	; (b7b4 <configure_digital_inputs+0xc0>)
    b70c:	f018 ff89 	bl	24622 <printk>
 gpio_pin_interrupt_configure_dt(DIG_0_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b710:	4620      	mov	r0, r4
    b712:	f7ff f9cd 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b716:	4928      	ldr	r1, [pc, #160]	; (b7b8 <configure_digital_inputs+0xc4>)
    b718:	4b28      	ldr	r3, [pc, #160]	; (b7bc <configure_digital_inputs+0xc8>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b71a:	4c29      	ldr	r4, [pc, #164]	; (b7c0 <configure_digital_inputs+0xcc>)
    b71c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b71e:	2310      	movs	r3, #16
    b720:	4620      	mov	r0, r4
    b722:	608b      	str	r3, [r1, #8]
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b724:	4d27      	ldr	r5, [pc, #156]	; (b7c4 <configure_digital_inputs+0xd0>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b726:	f018 fdb6 	bl	24296 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b72a:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b72c:	4f26      	ldr	r7, [pc, #152]	; (b7c8 <configure_digital_inputs+0xd4>)
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b72e:	2204      	movs	r2, #4
    b730:	4631      	mov	r1, r6
    b732:	4628      	mov	r0, r5
    b734:	f018 ff75 	bl	24622 <printk>
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b738:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b73c:	4638      	mov	r0, r7
    b73e:	f7ff fbfd 	bl	af3c <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 5 Value:%d \n",gpio_pin_get_dt(DIG_1_ADR));
    b742:	4638      	mov	r0, r7
    b744:	f7ff f8c4 	bl	a8d0 <gpio_pin_get_dt>
    b748:	4601      	mov	r1, r0
    b74a:	4820      	ldr	r0, [pc, #128]	; (b7cc <configure_digital_inputs+0xd8>)
    b74c:	f018 ff69 	bl	24622 <printk>
 gpio_pin_interrupt_configure_dt(DIG_1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b750:	4638      	mov	r0, r7
    b752:	f7ff f9ad 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b756:	491e      	ldr	r1, [pc, #120]	; (b7d0 <configure_digital_inputs+0xdc>)
    b758:	4b1e      	ldr	r3, [pc, #120]	; (b7d4 <configure_digital_inputs+0xe0>)
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b75a:	4f1f      	ldr	r7, [pc, #124]	; (b7d8 <configure_digital_inputs+0xe4>)
    b75c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b75e:	2320      	movs	r3, #32
 gpio_add_callback(DIG_1.port, DIG_1_CB);
    b760:	4620      	mov	r0, r4
    b762:	608b      	str	r3, [r1, #8]
    b764:	f018 fd97 	bl	24296 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    b768:	2205      	movs	r2, #5
    b76a:	4631      	mov	r1, r6
    b76c:	4628      	mov	r0, r5
    b76e:	f018 ff58 	bl	24622 <printk>
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b772:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b776:	4638      	mov	r0, r7
    b778:	f7ff fbe0 	bl	af3c <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 6 Value:%d \n",gpio_pin_get_dt(DIG_2_ADR));
    b77c:	4638      	mov	r0, r7
    b77e:	f7ff f8a7 	bl	a8d0 <gpio_pin_get_dt>
    b782:	4601      	mov	r1, r0
    b784:	4815      	ldr	r0, [pc, #84]	; (b7dc <configure_digital_inputs+0xe8>)
    b786:	f018 ff4c 	bl	24622 <printk>
 gpio_pin_interrupt_configure_dt(DIG_2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b78a:	4638      	mov	r0, r7
    b78c:	f7ff f990 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b790:	4913      	ldr	r1, [pc, #76]	; (b7e0 <configure_digital_inputs+0xec>)
    b792:	4b14      	ldr	r3, [pc, #80]	; (b7e4 <configure_digital_inputs+0xf0>)
 gpio_add_callback(DIG_2.port, DIG_2_CB);
    b794:	4620      	mov	r0, r4
    b796:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b798:	2340      	movs	r3, #64	; 0x40
    b79a:	608b      	str	r3, [r1, #8]
    b79c:	f018 fd7b 	bl	24296 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b7a0:	4631      	mov	r1, r6
    b7a2:	4628      	mov	r0, r5
}
    b7a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b7a8:	2206      	movs	r2, #6
    b7aa:	f018 bf3a 	b.w	24622 <printk>
    b7ae:	bf00      	nop
    b7b0:	0002a718 	.word	0x0002a718
    b7b4:	0002b8c1 	.word	0x0002b8c1
    b7b8:	20009da8 	.word	0x20009da8
    b7bc:	0000a931 	.word	0x0000a931
    b7c0:	00029df0 	.word	0x00029df0
    b7c4:	0002b8d9 	.word	0x0002b8d9
    b7c8:	0002a710 	.word	0x0002a710
    b7cc:	0002b8fc 	.word	0x0002b8fc
    b7d0:	20009d9c 	.word	0x20009d9c
    b7d4:	0000a955 	.word	0x0000a955
    b7d8:	0002a708 	.word	0x0002a708
    b7dc:	0002b914 	.word	0x0002b914
    b7e0:	20009d90 	.word	0x20009d90
    b7e4:	0000a979 	.word	0x0000a979

0000b7e8 <configure_led>:
void configure_led(void){
    b7e8:	b508      	push	{r3, lr}
 gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    b7ea:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b7ee:	480a      	ldr	r0, [pc, #40]	; (b818 <configure_led+0x30>)
    b7f0:	f7ff fba4 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    b7f4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b7f8:	4808      	ldr	r0, [pc, #32]	; (b81c <configure_led+0x34>)
    b7fa:	f7ff fb9f 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    b7fe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b802:	4807      	ldr	r0, [pc, #28]	; (b820 <configure_led+0x38>)
    b804:	f7ff fb9a 	bl	af3c <gpio_pin_configure_dt.isra.0>
}
    b808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    b80c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b810:	4804      	ldr	r0, [pc, #16]	; (b824 <configure_led+0x3c>)
    b812:	f7ff bb93 	b.w	af3c <gpio_pin_configure_dt.isra.0>
    b816:	bf00      	nop
    b818:	0002a700 	.word	0x0002a700
    b81c:	0002a6f8 	.word	0x0002a6f8
    b820:	0002a6f0 	.word	0x0002a6f0
    b824:	0002a6e8 	.word	0x0002a6e8

0000b828 <turn_off_all_leds>:
void turn_off_all_leds(void){
    b828:	b508      	push	{r3, lr}
       gpio_pin_set_dt(LED1, OFF);
    b82a:	2100      	movs	r1, #0
    b82c:	4808      	ldr	r0, [pc, #32]	; (b850 <turn_off_all_leds+0x28>)
    b82e:	f7ff fad3 	bl	add8 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED2, OFF);
    b832:	2100      	movs	r1, #0
    b834:	4807      	ldr	r0, [pc, #28]	; (b854 <turn_off_all_leds+0x2c>)
    b836:	f7ff facf 	bl	add8 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED3, OFF);
    b83a:	2100      	movs	r1, #0
    b83c:	4806      	ldr	r0, [pc, #24]	; (b858 <turn_off_all_leds+0x30>)
    b83e:	f7ff facb 	bl	add8 <gpio_pin_set_dt.isra.0>
}
    b842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       gpio_pin_set_dt(LED4, OFF);
    b846:	2100      	movs	r1, #0
    b848:	4804      	ldr	r0, [pc, #16]	; (b85c <turn_off_all_leds+0x34>)
    b84a:	f7ff bac5 	b.w	add8 <gpio_pin_set_dt.isra.0>
    b84e:	bf00      	nop
    b850:	0002a700 	.word	0x0002a700
    b854:	0002a6f8 	.word	0x0002a6f8
    b858:	0002a6f0 	.word	0x0002a6f0
    b85c:	0002a6e8 	.word	0x0002a6e8

0000b860 <configure_adc>:
void configure_adc(void){
    b860:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b862:	2500      	movs	r5, #0
    b864:	4c12      	ldr	r4, [pc, #72]	; (b8b0 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev)) {
    b866:	f854 0c06 	ldr.w	r0, [r4, #-6]
    b86a:	f01d fbc0 	bl	28fee <z_device_is_ready>
    b86e:	b920      	cbnz	r0, b87a <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    b870:	4810      	ldr	r0, [pc, #64]	; (b8b4 <configure_adc+0x54>)
}
    b872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    b876:	f018 bed4 	b.w	24622 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b87a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    b87e:	b16b      	cbz	r3, b89c <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    b880:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    b884:	6883      	ldr	r3, [r0, #8]
    b886:	4621      	mov	r1, r4
    b888:	681b      	ldr	r3, [r3, #0]
    b88a:	4798      	blx	r3
		if (err < 0) {
    b88c:	1e02      	subs	r2, r0, #0
    b88e:	da08      	bge.n	b8a2 <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    b890:	4629      	mov	r1, r5
}
    b892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    b896:	4808      	ldr	r0, [pc, #32]	; (b8b8 <configure_adc+0x58>)
    b898:	f018 bec3 	b.w	24622 <printk>
		return -ENOTSUP;
    b89c:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b8a0:	e7f6      	b.n	b890 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b8a2:	3501      	adds	r5, #1
    b8a4:	2d06      	cmp	r5, #6
    b8a6:	f104 0414 	add.w	r4, r4, #20
    b8aa:	d1dc      	bne.n	b866 <configure_adc+0x6>
}
    b8ac:	bd38      	pop	{r3, r4, r5, pc}
    b8ae:	bf00      	nop
    b8b0:	0002a676 	.word	0x0002a676
    b8b4:	0002b92c 	.word	0x0002b92c
    b8b8:	0002b94d 	.word	0x0002b94d

0000b8bc <main>:
{
    b8bc:	b570      	push	{r4, r5, r6, lr}
    b8be:	b08c      	sub	sp, #48	; 0x30
	return z_impl_k_mutex_init(mutex);
    b8c0:	4865      	ldr	r0, [pc, #404]	; (ba58 <main+0x19c>)
    b8c2:	f01d fbed 	bl	290a0 <z_impl_k_mutex_init>
	configure_led();
    b8c6:	f7ff ff8f 	bl	b7e8 <configure_led>
	turn_off_all_leds();
    b8ca:	f7ff ffad 	bl	b828 <turn_off_all_leds>
 	configure_all_buttons();
    b8ce:	f7ff fe93 	bl	b5f8 <configure_all_buttons>
	configure_digital_inputs();
    b8d2:	f7ff ff0f 	bl	b6f4 <configure_digital_inputs>
	configure_adc();
    b8d6:	f7ff ffc3 	bl	b860 <configure_adc>
    b8da:	4d60      	ldr	r5, [pc, #384]	; (ba5c <main+0x1a0>)
    b8dc:	4628      	mov	r0, r5
    b8de:	f01d fb86 	bl	28fee <z_device_is_ready>
	if (!device_is_ready(uart)) {
    b8e2:	b1d0      	cbz	r0, b91a <main+0x5e>
	rx = k_malloc(sizeof(*rx));
    b8e4:	2030      	movs	r0, #48	; 0x30
    b8e6:	f01d fdaf 	bl	29448 <k_malloc>
	if (rx) {
    b8ea:	4604      	mov	r4, r0
    b8ec:	b1a8      	cbz	r0, b91a <main+0x5e>
		rx->len = 0;
    b8ee:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    b8f0:	495b      	ldr	r1, [pc, #364]	; (ba60 <main+0x1a4>)
		rx->len = 0;
    b8f2:	8586      	strh	r6, [r0, #44]	; 0x2c
	k_work_init_delayable(&uart_work, uart_work_handler);
    b8f4:	485b      	ldr	r0, [pc, #364]	; (ba64 <main+0x1a8>)
    b8f6:	f014 fd75 	bl	203e4 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b8fa:	68ab      	ldr	r3, [r5, #8]
    b8fc:	681b      	ldr	r3, [r3, #0]
    b8fe:	b973      	cbnz	r3, b91e <main+0x62>
		k_free(rx);
    b900:	4620      	mov	r0, r4
    b902:	f01d fd9a 	bl	2943a <k_free>
		LOG_ERR("Cannot initialize UART callback");
    b906:	4b58      	ldr	r3, [pc, #352]	; (ba68 <main+0x1ac>)
    b908:	2201      	movs	r2, #1
    b90a:	9302      	str	r3, [sp, #8]
    b90c:	2300      	movs	r3, #0
    b90e:	4957      	ldr	r1, [pc, #348]	; (ba6c <main+0x1b0>)
    b910:	4618      	mov	r0, r3
    b912:	e9cd 3300 	strd	r3, r3, [sp]
    b916:	f018 fc9d 	bl	24254 <z_log_msg_runtime_create.constprop.0>
		error();
    b91a:	f018 fcda 	bl	242d2 <error>
	return api->callback_set(dev, callback, user_data);
    b91e:	4632      	mov	r2, r6
    b920:	4628      	mov	r0, r5
    b922:	4953      	ldr	r1, [pc, #332]	; (ba70 <main+0x1b4>)
    b924:	4798      	blx	r3
	if (err) {
    b926:	2800      	cmp	r0, #0
    b928:	d1ea      	bne.n	b900 <main+0x44>
	tx = k_malloc(sizeof(*tx));
    b92a:	2030      	movs	r0, #48	; 0x30
    b92c:	f01d fd8c 	bl	29448 <k_malloc>
	if (tx) {
    b930:	4606      	mov	r6, r0
    b932:	2800      	cmp	r0, #0
    b934:	d0f1      	beq.n	b91a <main+0x5e>
		pos = snprintf(tx->data, sizeof(tx->data),
    b936:	1d03      	adds	r3, r0, #4
    b938:	4618      	mov	r0, r3
    b93a:	494e      	ldr	r1, [pc, #312]	; (ba74 <main+0x1b8>)
    b93c:	f01d fefb 	bl	29736 <strcpy>
		tx->len = pos;
    b940:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b942:	4601      	mov	r1, r0
		tx->len = pos;
    b944:	85b2      	strh	r2, [r6, #44]	; 0x2c
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b946:	4628      	mov	r0, r5
    b948:	f018 fc9b 	bl	24282 <uart_tx.constprop.0>
	if (err) {
    b94c:	4601      	mov	r1, r0
    b94e:	b118      	cbz	r0, b958 <main+0x9c>
		printf("Cannot display welcome message (err: %d)", err);
    b950:	4849      	ldr	r0, [pc, #292]	; (ba78 <main+0x1bc>)
    b952:	f017 fd49 	bl	233e8 <iprintf>
	if (err) {
    b956:	e7e0      	b.n	b91a <main+0x5e>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
    b958:	1d21      	adds	r1, r4, #4
    b95a:	4628      	mov	r0, r5
    b95c:	f018 fc89 	bl	24272 <uart_rx_enable.constprop.0>
	if (err) {
    b960:	4604      	mov	r4, r0
    b962:	2800      	cmp	r0, #0
    b964:	d1d9      	bne.n	b91a <main+0x5e>
    b966:	4e45      	ldr	r6, [pc, #276]	; (ba7c <main+0x1c0>)
    b968:	4630      	mov	r0, r6
    b96a:	f01d fb40 	bl	28fee <z_device_is_ready>
	if (!device_is_ready(uart_2)) {
    b96e:	2800      	cmp	r0, #0
    b970:	d0d3      	beq.n	b91a <main+0x5e>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    b972:	2030      	movs	r0, #48	; 0x30
    b974:	f01d fd68 	bl	29448 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    b978:	4941      	ldr	r1, [pc, #260]	; (ba80 <main+0x1c4>)
	rx_uart2->len = 0;
    b97a:	8584      	strh	r4, [r0, #44]	; 0x2c
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    b97c:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    b97e:	4841      	ldr	r0, [pc, #260]	; (ba84 <main+0x1c8>)
    b980:	f014 fd30 	bl	203e4 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b984:	68b3      	ldr	r3, [r6, #8]
    b986:	681b      	ldr	r3, [r3, #0]
    b988:	b11b      	cbz	r3, b992 <main+0xd6>
	return api->callback_set(dev, callback, user_data);
    b98a:	4622      	mov	r2, r4
    b98c:	4630      	mov	r0, r6
    b98e:	493e      	ldr	r1, [pc, #248]	; (ba88 <main+0x1cc>)
    b990:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), 50);
    b992:	483a      	ldr	r0, [pc, #232]	; (ba7c <main+0x1c0>)
    b994:	1d29      	adds	r1, r5, #4
    b996:	f018 fc6c 	bl	24272 <uart_rx_enable.constprop.0>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    b99a:	483c      	ldr	r0, [pc, #240]	; (ba8c <main+0x1d0>)
    b99c:	f008 fec6 	bl	1472c <bt_conn_auth_cb_register>
		if (err) {
    b9a0:	b128      	cbz	r0, b9ae <main+0xf2>
			printk("Failed to register authorization callbacks.\n");
    b9a2:	483b      	ldr	r0, [pc, #236]	; (ba90 <main+0x1d4>)
}
    b9a4:	b00c      	add	sp, #48	; 0x30
    b9a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    b9aa:	f018 be3a 	b.w	24622 <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    b9ae:	4839      	ldr	r0, [pc, #228]	; (ba94 <main+0x1d8>)
    b9b0:	f008 fed6 	bl	14760 <bt_conn_auth_info_cb_register>
		if (err) {
    b9b4:	b108      	cbz	r0, b9ba <main+0xfe>
			printk("Failed to register authorization info callbacks.\n");
    b9b6:	4838      	ldr	r0, [pc, #224]	; (ba98 <main+0x1dc>)
    b9b8:	e7f4      	b.n	b9a4 <main+0xe8>
	err = bt_enable(NULL);
    b9ba:	f006 fd69 	bl	12490 <bt_enable>
	if (err) {
    b9be:	2800      	cmp	r0, #0
    b9c0:	d1ab      	bne.n	b91a <main+0x5e>
	printf("Bluetooth initialized \n\r");
    b9c2:	4836      	ldr	r0, [pc, #216]	; (ba9c <main+0x1e0>)
    b9c4:	f017 fd10 	bl	233e8 <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    b9c8:	4835      	ldr	r0, [pc, #212]	; (baa0 <main+0x1e4>)
    b9ca:	f017 fd0d 	bl	233e8 <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    b9ce:	4835      	ldr	r0, [pc, #212]	; (baa4 <main+0x1e8>)
    b9d0:	f017 fd0a 	bl	233e8 <iprintf>
	z_impl_k_sem_give(sem);
    b9d4:	4834      	ldr	r0, [pc, #208]	; (baa8 <main+0x1ec>)
    b9d6:	f014 f881 	bl	1fadc <z_impl_k_sem_give>
	err = bt_nus_init(&nus_cb);
    b9da:	4834      	ldr	r0, [pc, #208]	; (baac <main+0x1f0>)
    b9dc:	f003 ffe0 	bl	f9a0 <bt_nus_init>
	if (err) {
    b9e0:	4601      	mov	r1, r0
    b9e2:	b128      	cbz	r0, b9f0 <main+0x134>
		printf("Failed to initialize UART service (err: %d)", err);
    b9e4:	4832      	ldr	r0, [pc, #200]	; (bab0 <main+0x1f4>)
}
    b9e6:	b00c      	add	sp, #48	; 0x30
    b9e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    b9ec:	f017 bcfc 	b.w	233e8 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    b9f0:	4d30      	ldr	r5, [pc, #192]	; (bab4 <main+0x1f8>)
    b9f2:	ac07      	add	r4, sp, #28
    b9f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b9f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b9f8:	682b      	ldr	r3, [r5, #0]
    b9fa:	2501      	movs	r5, #1
    b9fc:	6023      	str	r3, [r4, #0]
    b9fe:	2202      	movs	r2, #2
    ba00:	4b2d      	ldr	r3, [pc, #180]	; (bab8 <main+0x1fc>)
    ba02:	492e      	ldr	r1, [pc, #184]	; (babc <main+0x200>)
    ba04:	9500      	str	r5, [sp, #0]
    ba06:	a807      	add	r0, sp, #28
    ba08:	f007 fc36 	bl	13278 <bt_le_adv_start>
	if (err) {
    ba0c:	4604      	mov	r4, r0
    ba0e:	b128      	cbz	r0, ba1c <main+0x160>
		printf("Advertising failed to start (err %d)", err);
    ba10:	4601      	mov	r1, r0
    ba12:	482b      	ldr	r0, [pc, #172]	; (bac0 <main+0x204>)
    ba14:	f017 fce8 	bl	233e8 <iprintf>
}
    ba18:	b00c      	add	sp, #48	; 0x30
    ba1a:	bd70      	pop	{r4, r5, r6, pc}
	flag=1;//print ad values once
    ba1c:	4b29      	ldr	r3, [pc, #164]	; (bac4 <main+0x208>)
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    ba1e:	f242 6067 	movw	r0, #9831	; 0x2667
    ba22:	2100      	movs	r1, #0
    ba24:	601d      	str	r5, [r3, #0]
    ba26:	f018 fc3c 	bl	242a2 <k_sleep.isra.0>
    flash_test_();
    ba2a:	f7ff fd49 	bl	b4c0 <flash_test_>
    ba2e:	4e26      	ldr	r6, [pc, #152]	; (bac8 <main+0x20c>)
    ba30:	ad05      	add	r5, sp, #20
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    ba32:	3401      	adds	r4, #1
		uart2_teste();
    ba34:	f7ff fcfc 	bl	b430 <uart2_teste>
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    ba38:	e896 0003 	ldmia.w	r6, {r0, r1}
    ba3c:	e885 0003 	stmia.w	r5, {r0, r1}
        gpio_pin_set_dt(&led, value);
    ba40:	4628      	mov	r0, r5
    ba42:	f004 0101 	and.w	r1, r4, #1
    ba46:	f7ff f9c7 	bl	add8 <gpio_pin_set_dt.isra.0>
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
    ba4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ba4e:	2100      	movs	r1, #0
    ba50:	f018 fc27 	bl	242a2 <k_sleep.isra.0>
	for (;;) {
    ba54:	e7ed      	b.n	ba32 <main+0x176>
    ba56:	bf00      	nop
    ba58:	20009d7c 	.word	0x20009d7c
    ba5c:	00029e68 	.word	0x00029e68
    ba60:	0000a9ed 	.word	0x0000a9ed
    ba64:	20009140 	.word	0x20009140
    ba68:	0002b96f 	.word	0x0002b96f
    ba6c:	0002a458 	.word	0x0002a458
    ba70:	0000b119 	.word	0x0000b119
    ba74:	0002b98f 	.word	0x0002b98f
    ba78:	0002b9b6 	.word	0x0002b9b6
    ba7c:	00029e50 	.word	0x00029e50
    ba80:	0000a99d 	.word	0x0000a99d
    ba84:	20009110 	.word	0x20009110
    ba88:	00024253 	.word	0x00024253
    ba8c:	200083cc 	.word	0x200083cc
    ba90:	0002b9df 	.word	0x0002b9df
    ba94:	200083bc 	.word	0x200083bc
    ba98:	0002ba0c 	.word	0x0002ba0c
    ba9c:	0002ba3e 	.word	0x0002ba3e
    baa0:	0002ba57 	.word	0x0002ba57
    baa4:	0002ba78 	.word	0x0002ba78
    baa8:	20008ad0 	.word	0x20008ad0
    baac:	200083b0 	.word	0x200083b0
    bab0:	0002baa1 	.word	0x0002baa1
    bab4:	0002a4a0 	.word	0x0002a4a0
    bab8:	0002a658 	.word	0x0002a658
    babc:	0002a660 	.word	0x0002a660
    bac0:	0002bacd 	.word	0x0002bacd
    bac4:	20009d78 	.word	0x20009d78
    bac8:	0002a6f8 	.word	0x0002a6f8

0000bacc <time_stamp_function>:
uint32_t time_stamp_function(void){
    bacc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    bace:	f01d fbc5 	bl	2925c <z_impl_k_uptime_ticks>
    bad2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bad6:	fba0 0302 	umull	r0, r3, r0, r2
    bada:	fb02 3101 	mla	r1, r2, r1, r3
    bade:	0bc0      	lsrs	r0, r0, #15
  uint64_t actual_time_seconds = k_uptime_get()/1000;
    bae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bae4:	2300      	movs	r3, #0
    bae6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    baea:	0bc9      	lsrs	r1, r1, #15
    baec:	f7fd f9b0 	bl	8e50 <__aeabi_ldivmod>
    baf0:	4603      	mov	r3, r0
}
    baf2:	4801      	ldr	r0, [pc, #4]	; (baf8 <time_stamp_function+0x2c>)
    baf4:	4418      	add	r0, r3
    baf6:	bd08      	pop	{r3, pc}
    baf8:	61cf9980 	.word	0x61cf9980

0000bafc <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    bafc:	b538      	push	{r3, r4, r5, lr}
    bafe:	460d      	mov	r5, r1
    bb00:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    bb02:	f7ff ffe3 	bl	bacc <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    bb06:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    bb08:	4b04      	ldr	r3, [pc, #16]	; (bb1c <values_of_digital_sensor+0x20>)
    bb0a:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    bb0e:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    bb12:	e9c4 0200 	strd	r0, r2, [r4]
}
    bb16:	4620      	mov	r0, r4
    bb18:	bd38      	pop	{r3, r4, r5, pc}
    bb1a:	bf00      	nop
    bb1c:	200214c8 	.word	0x200214c8

0000bb20 <feed_circular_buffer>:
void feed_circular_buffer(void){
    bb20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bb24:	4d2f      	ldr	r5, [pc, #188]	; (bbe4 <feed_circular_buffer+0xc4>)
    bb26:	4b30      	ldr	r3, [pc, #192]	; (bbe8 <feed_circular_buffer+0xc8>)
    bb28:	682e      	ldr	r6, [r5, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bb2a:	f5b6 6fb4 	cmp.w	r6, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bb2e:	601e      	str	r6, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bb30:	d256      	bcs.n	bbe0 <feed_circular_buffer+0xc0>
  gnss_return_value.timestamp=time_stamp_function();
    bb32:	f7ff ffcb 	bl	bacc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bb36:	f04f 0800 	mov.w	r8, #0
    bb3a:	4c2c      	ldr	r4, [pc, #176]	; (bbec <feed_circular_buffer+0xcc>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb3c:	682f      	ldr	r7, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bb3e:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bb42:	e9c6 8802 	strd	r8, r8, [r6, #8]
    bb46:	6070      	str	r0, [r6, #4]
  analog_return_value.timestamp=time_stamp_function();
    bb48:	f7ff ffc0 	bl	bacc <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    bb4c:	4e28      	ldr	r6, [pc, #160]	; (bbf0 <feed_circular_buffer+0xd0>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb4e:	eb04 1387 	add.w	r3, r4, r7, lsl #6
  analog_return_value.value=adc_value[channel];
    bb52:	f9b6 2000 	ldrsh.w	r2, [r6]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb56:	466f      	mov	r7, sp
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb58:	e9c3 0204 	strd	r0, r2, [r3, #16]
  ntc_return.timestamp=time_stamp_function();
    bb5c:	f7ff ffb6 	bl	bacc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    bb60:	682b      	ldr	r3, [r5, #0]
    bb62:	8872      	ldrh	r2, [r6, #2]
    bb64:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb68:	839a      	strh	r2, [r3, #28]
  ntc_return.timestamp=time_stamp_function();
    bb6a:	f7ff ffaf 	bl	bacc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    bb6e:	682b      	ldr	r3, [r5, #0]
    bb70:	88b2      	ldrh	r2, [r6, #4]
    bb72:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb76:	849a      	strh	r2, [r3, #36]	; 0x24
  ntc_return.timestamp=time_stamp_function();
    bb78:	f7ff ffa8 	bl	bacc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    bb7c:	682b      	ldr	r3, [r5, #0]
    bb7e:	88f2      	ldrh	r2, [r6, #6]
    bb80:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb84:	859a      	strh	r2, [r3, #44]	; 0x2c
  ntc_return.timestamp=time_stamp_function();
    bb86:	f7ff ffa1 	bl	bacc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    bb8a:	682b      	ldr	r3, [r5, #0]
    bb8c:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb90:	6198      	str	r0, [r3, #24]
  ntc_return.timestamp=time_stamp_function();
    bb92:	f7ff ff9b 	bl	bacc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    bb96:	682b      	ldr	r3, [r5, #0]
    bb98:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb9c:	6218      	str	r0, [r3, #32]
  ntc_return.timestamp=time_stamp_function();
    bb9e:	f7ff ff95 	bl	bacc <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bba2:	682e      	ldr	r6, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bba4:	4641      	mov	r1, r8
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bba6:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bbaa:	62b0      	str	r0, [r6, #40]	; 0x28
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbac:	4638      	mov	r0, r7
    bbae:	f7ff ffa5 	bl	bafc <values_of_digital_sensor>
    bbb2:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbb6:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbb8:	3630      	adds	r6, #48	; 0x30
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbba:	eb04 1483 	add.w	r4, r4, r3, lsl #6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbbe:	e886 0003 	stmia.w	r6, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbc2:	3438      	adds	r4, #56	; 0x38
    bbc4:	2101      	movs	r1, #1
    bbc6:	4638      	mov	r0, r7
    bbc8:	f7ff ff98 	bl	bafc <values_of_digital_sensor>
    bbcc:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer_Free_Position++;
    bbd0:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbd2:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer_Free_Position++;
    bbd6:	3301      	adds	r3, #1
    bbd8:	602b      	str	r3, [r5, #0]
}
    bbda:	b002      	add	sp, #8
    bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbe0:	2300      	movs	r3, #0
    bbe2:	e7f9      	b.n	bbd8 <feed_circular_buffer+0xb8>
    bbe4:	20020eb4 	.word	0x20020eb4
    bbe8:	20020eb0 	.word	0x20020eb0
    bbec:	2000a6b0 	.word	0x2000a6b0
    bbf0:	200214d8 	.word	0x200214d8

0000bbf4 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    bbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    bbf6:	4b1c      	ldr	r3, [pc, #112]	; (bc68 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    bbf8:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    bbfa:	6818      	ldr	r0, [r3, #0]
    bbfc:	889b      	ldrh	r3, [r3, #4]
    bbfe:	9000      	str	r0, [sp, #0]
    bc00:	2218      	movs	r2, #24
    bc02:	2100      	movs	r1, #0
    bc04:	f10d 0006 	add.w	r0, sp, #6
    bc08:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    bc0c:	2601      	movs	r6, #1
   char tag[30]="10203";
    bc0e:	f01d fc6a 	bl	294e6 <memset>
     msg.positions.timestamp=1;
    bc12:	2300      	movs	r3, #0
    msg.timestamp=0;
    bc14:	4c15      	ldr	r4, [pc, #84]	; (bc6c <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    bc16:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    bc18:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    bc1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bc20:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    bc22:	4b13      	ldr	r3, [pc, #76]	; (bc70 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bc24:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    bc26:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    bc28:	230b      	movs	r3, #11
    bc2a:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    bc2c:	4b11      	ldr	r3, [pc, #68]	; (bc74 <fill_fields_to_test+0x80>)
    bc2e:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    bc30:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    bc32:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    bc34:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    bc36:	7766      	strb	r6, [r4, #29]
    bc38:	f104 001e 	add.w	r0, r4, #30
    bc3c:	f01d fd7b 	bl	29736 <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bc40:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    bc44:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bc48:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bc4c:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bc4e:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    bc52:	f7fc ff59 	bl	8b08 <__aeabi_i2f>
   while (sensor_id<6){
    bc56:	3501      	adds	r5, #1
    bc58:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bc5a:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    bc5c:	f104 0424 	add.w	r4, r4, #36	; 0x24
    bc60:	d1e6      	bne.n	bc30 <fill_fields_to_test+0x3c>
}
    bc62:	4802      	ldr	r0, [pc, #8]	; (bc6c <fill_fields_to_test+0x78>)
    bc64:	b009      	add	sp, #36	; 0x24
    bc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc68:	0002a4fc 	.word	0x0002a4fc
    bc6c:	2000a5c0 	.word	0x2000a5c0
    bc70:	40400000 	.word	0x40400000
    bc74:	41400000 	.word	0x41400000

0000bc78 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc7a:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    bc7e:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    bc80:	f7ff ffb8 	bl	bbf4 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    bc84:	2202      	movs	r2, #2
    bc86:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    bc8a:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    bc8e:	4a3a      	ldr	r2, [pc, #232]	; (bd78 <send_array_dd_v0+0x100>)
    bc90:	ae0c      	add	r6, sp, #48	; 0x30
    bc92:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bc94:	4631      	mov	r1, r6
    bc96:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    bc98:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bc9a:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bc9c:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bc9e:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    bca0:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bca2:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bca4:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bca6:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    bca8:	f101 010c 	add.w	r1, r1, #12
    bcac:	d1f8      	bne.n	bca0 <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bcae:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bcb0:	6958      	ldr	r0, [r3, #20]
    bcb2:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    bcb4:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bcb6:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bcb8:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bcbc:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    bcc0:	f101 0108 	add.w	r1, r1, #8
    bcc4:	d1f6      	bne.n	bcb4 <send_array_dd_v0+0x3c>
    bcc6:	f103 051e 	add.w	r5, r3, #30
    bcca:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    bcce:	f855 3c06 	ldr.w	r3, [r5, #-6]
    bcd2:	4629      	mov	r1, r5
    bcd4:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    bcd8:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    bcdc:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    bce0:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    bce4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    bce8:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    bcec:	f01d fd23 	bl	29736 <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bcf0:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    bcf2:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bcf4:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bcf8:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bcfa:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bcfe:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bd02:	4633      	mov	r3, r6
    bd04:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    bd08:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bd0a:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bd0c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bd10:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    bd14:	f103 0308 	add.w	r3, r3, #8
    bd18:	d1f6      	bne.n	bd08 <send_array_dd_v0+0x90>
   while (sensor_id<6){
    bd1a:	3524      	adds	r5, #36	; 0x24
    bd1c:	42a5      	cmp	r5, r4
    bd1e:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    bd22:	d1d4      	bne.n	bcce <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bd24:	466c      	mov	r4, sp
    bd26:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    bd2a:	4668      	mov	r0, sp
    bd2c:	4913      	ldr	r1, [pc, #76]	; (bd7c <send_array_dd_v0+0x104>)
    bd2e:	ad07      	add	r5, sp, #28
    bd30:	f000 f906 	bl	bf40 <pb_ostream_from_buffer>
    bd34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bd36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd38:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bd3a:	4911      	ldr	r1, [pc, #68]	; (bd80 <send_array_dd_v0+0x108>)
    bd3c:	aa0c      	add	r2, sp, #48	; 0x30
    bd3e:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bd40:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bd42:	f000 fb7d 	bl	c440 <pb_encode>
   int j=0;
    bd46:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    bd48:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    bd4a:	490c      	ldr	r1, [pc, #48]	; (bd7c <send_array_dd_v0+0x104>)
    bd4c:	4a0d      	ldr	r2, [pc, #52]	; (bd84 <send_array_dd_v0+0x10c>)
    bd4e:	4283      	cmp	r3, r0
    bd50:	d10b      	bne.n	bd6a <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    bd52:	490d      	ldr	r1, [pc, #52]	; (bd88 <send_array_dd_v0+0x110>)
    return function_return;
    bd54:	f240 72dc 	movw	r2, #2012	; 0x7dc
    bd58:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    bd5a:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    bd5e:	f01d fb88 	bl	29472 <memcpy>
}
    bd62:	4638      	mov	r0, r7
    bd64:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    bd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    bd6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    bd6e:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    bd70:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    bd74:	e7eb      	b.n	bd4e <send_array_dd_v0+0xd6>
    bd76:	bf00      	nop
    bd78:	0012d687 	.word	0x0012d687
    bd7c:	20021507 	.word	0x20021507
    bd80:	0002a74c 	.word	0x0002a74c
    bd84:	20009de7 	.word	0x20009de7
    bd88:	20009de4 	.word	0x20009de4

0000bd8c <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    bd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd90:	4604      	mov	r4, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bd92:	4d30      	ldr	r5, [pc, #192]	; (be54 <print_current_position_cb+0xc8>)
    printf("\n\n####Position %d #####\n",pos);
    bd94:	4601      	mov	r1, r0
void print_current_position_cb(uint32_t pos){
    bd96:	b085      	sub	sp, #20
    printf("\n\n####Position %d #####\n",pos);
    bd98:	482f      	ldr	r0, [pc, #188]	; (be58 <print_current_position_cb+0xcc>)
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bd9a:	01a6      	lsls	r6, r4, #6
    bd9c:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    bda0:	f017 fb22 	bl	233e8 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bda4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    bda8:	6863      	ldr	r3, [r4, #4]
    bdaa:	482c      	ldr	r0, [pc, #176]	; (be5c <print_current_position_cb+0xd0>)
    bdac:	f017 fb1c 	bl	233e8 <iprintf>
	if (!spec->channel_cfg_dt_node_exists) {
    bdb0:	4a2b      	ldr	r2, [pc, #172]	; (be60 <print_current_position_cb+0xd4>)
    val_mv = C_Buffer[pos].analog.value;
    bdb2:	6967      	ldr	r7, [r4, #20]
    bdb4:	7953      	ldrb	r3, [r2, #5]
    bdb6:	b1cb      	cbz	r3, bdec <print_current_position_cb+0x60>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bdb8:	79d3      	ldrb	r3, [r2, #7]
	if (spec->channel_cfg.differential) {
    bdba:	7a91      	ldrb	r1, [r2, #10]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bdbc:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    bdbe:	bf0a      	itet	eq
    bdc0:	6813      	ldreq	r3, [r2, #0]
		vref_mv = spec->vref_mv;
    bdc2:	89d3      	ldrhne	r3, [r2, #14]
	return api->ref_internal;
    bdc4:	689b      	ldreq	r3, [r3, #8]
	resolution = spec->resolution;
    bdc6:	7c14      	ldrb	r4, [r2, #16]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bdc8:	bf08      	it	eq
    bdca:	891b      	ldrheq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    bdcc:	0689      	lsls	r1, r1, #26
	int32_t adc_mv = *valp * ref_mv;
    bdce:	fb07 f303 	mul.w	r3, r7, r3
		resolution -= 1U;
    bdd2:	bf48      	it	mi
    bdd4:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int ret = adc_gain_invert(gain, &adc_mv);
    bdd8:	7990      	ldrb	r0, [r2, #6]
    bdda:	a903      	add	r1, sp, #12
		resolution -= 1U;
    bddc:	bf48      	it	mi
    bdde:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    bde0:	9303      	str	r3, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    bde2:	f00d fa6b 	bl	192bc <adc_gain_invert>
	if (ret == 0) {
    bde6:	b908      	cbnz	r0, bdec <print_current_position_cb+0x60>
		*valp = (adc_mv >> resolution);
    bde8:	9f03      	ldr	r7, [sp, #12]
    bdea:	4127      	asrs	r7, r4
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    bdec:	19ac      	adds	r4, r5, r6
    bdee:	463b      	mov	r3, r7
    bdf0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    bdf4:	481b      	ldr	r0, [pc, #108]	; (be64 <print_current_position_cb+0xd8>)
    bdf6:	f017 faf7 	bl	233e8 <iprintf>
    int i=0;
    bdfa:	2700      	movs	r7, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    bdfc:	f8df 9068 	ldr.w	r9, [pc, #104]	; be68 <print_current_position_cb+0xdc>
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    be00:	f107 0801 	add.w	r8, r7, #1
    be04:	8ba0      	ldrh	r0, [r4, #28]
    be06:	fa5f f188 	uxtb.w	r1, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be0a:	f8d4 a018 	ldr.w	sl, [r4, #24]
      C_Buffer[pos].ntc[i].value,
    be0e:	f9b4 b01c 	ldrsh.w	fp, [r4, #28]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    be12:	f7fd faad 	bl	9370 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be16:	f7fc fb03 	bl	8420 <__aeabi_f2d>
    be1a:	e9cd 0100 	strd	r0, r1, [sp]
    be1e:	4639      	mov	r1, r7
      i++;
    be20:	4647      	mov	r7, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be22:	465b      	mov	r3, fp
    be24:	4652      	mov	r2, sl
    be26:	4648      	mov	r0, r9
    be28:	f017 fade 	bl	233e8 <iprintf>
    while (i<3){
    be2c:	2f03      	cmp	r7, #3
    be2e:	f104 0408 	add.w	r4, r4, #8
    be32:	d1e5      	bne.n	be00 <print_current_position_cb+0x74>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    be34:	4435      	add	r5, r6
    be36:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
    be3a:	2100      	movs	r1, #0
    be3c:	480b      	ldr	r0, [pc, #44]	; (be6c <print_current_position_cb+0xe0>)
    be3e:	f017 fad3 	bl	233e8 <iprintf>
    be42:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    be46:	2101      	movs	r1, #1
    be48:	4808      	ldr	r0, [pc, #32]	; (be6c <print_current_position_cb+0xe0>)
}
    be4a:	b005      	add	sp, #20
    be4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    be50:	f017 baca 	b.w	233e8 <iprintf>
    be54:	2000a6b0 	.word	0x2000a6b0
    be58:	0002bb80 	.word	0x0002bb80
    be5c:	0002bb99 	.word	0x0002bb99
    be60:	0002a670 	.word	0x0002a670
    be64:	0002bbc5 	.word	0x0002bbc5
    be68:	0002bbeb 	.word	0x0002bbeb
    be6c:	0002bc11 	.word	0x0002bc11

0000be70 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    be70:	b500      	push	{lr}
    pb_type_t type = field->type;
    be72:	7d83      	ldrb	r3, [r0, #22]
{
    be74:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    be76:	2b3f      	cmp	r3, #63	; 0x3f
{
    be78:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    be7a:	d849      	bhi.n	bf10 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    be7c:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    be80:	d01c      	beq.n	bebc <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    be82:	2820      	cmp	r0, #32
    be84:	d102      	bne.n	be8c <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    be86:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    be88:	8818      	ldrh	r0, [r3, #0]
    be8a:	e006      	b.n	be9a <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    be8c:	2830      	cmp	r0, #48	; 0x30
    be8e:	d0fa      	beq.n	be86 <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    be90:	2810      	cmp	r0, #16
    be92:	d106      	bne.n	bea2 <pb_check_proto3_default_value+0x32>
    be94:	6a0a      	ldr	r2, [r1, #32]
    be96:	b122      	cbz	r2, bea2 <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    be98:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    be9a:	fab0 f080 	clz	r0, r0
    be9e:	0940      	lsrs	r0, r0, #5
    bea0:	e00c      	b.n	bebc <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    bea2:	680a      	ldr	r2, [r1, #0]
    bea4:	6890      	ldr	r0, [r2, #8]
    bea6:	b980      	cbnz	r0, beca <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    bea8:	f003 020f 	and.w	r2, r3, #15
    beac:	2a05      	cmp	r2, #5
    beae:	d80e      	bhi.n	bece <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    beb0:	69cb      	ldr	r3, [r1, #28]
    beb2:	8a4a      	ldrh	r2, [r1, #18]
    beb4:	441a      	add	r2, r3
    beb6:	4293      	cmp	r3, r2
    beb8:	d103      	bne.n	bec2 <pb_check_proto3_default_value+0x52>
            return true;
    beba:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    bebc:	b00b      	add	sp, #44	; 0x2c
    bebe:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    bec2:	f813 1b01 	ldrb.w	r1, [r3], #1
    bec6:	2900      	cmp	r1, #0
    bec8:	d0f5      	beq.n	beb6 <pb_check_proto3_default_value+0x46>
            return false;
    beca:	2000      	movs	r0, #0
    becc:	e7f6      	b.n	bebc <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    bece:	2a06      	cmp	r2, #6
    bed0:	d101      	bne.n	bed6 <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    bed2:	69cb      	ldr	r3, [r1, #28]
    bed4:	e7d8      	b.n	be88 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    bed6:	2a07      	cmp	r2, #7
    bed8:	d102      	bne.n	bee0 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    beda:	69cb      	ldr	r3, [r1, #28]
    bedc:	7818      	ldrb	r0, [r3, #0]
    bede:	e7dc      	b.n	be9a <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    bee0:	2a0b      	cmp	r2, #11
    bee2:	d101      	bne.n	bee8 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    bee4:	8a48      	ldrh	r0, [r1, #18]
    bee6:	e7d8      	b.n	be9a <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    bee8:	f003 030e 	and.w	r3, r3, #14
    beec:	2b08      	cmp	r3, #8
    beee:	d1e5      	bne.n	bebc <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    bef0:	69ca      	ldr	r2, [r1, #28]
    bef2:	4668      	mov	r0, sp
    bef4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    bef6:	f018 fa97 	bl	24428 <pb_field_iter_begin>
    befa:	2800      	cmp	r0, #0
    befc:	d0dd      	beq.n	beba <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    befe:	4668      	mov	r0, sp
    bf00:	f7ff ffb6 	bl	be70 <pb_check_proto3_default_value>
    bf04:	2800      	cmp	r0, #0
    bf06:	d0d9      	beq.n	bebc <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    bf08:	4668      	mov	r0, sp
    bf0a:	f018 fab0 	bl	2446e <pb_field_iter_next>
    bf0e:	e7f4      	b.n	befa <pb_check_proto3_default_value+0x8a>
    bf10:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    bf14:	2a80      	cmp	r2, #128	; 0x80
    bf16:	d101      	bne.n	bf1c <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    bf18:	69c0      	ldr	r0, [r0, #28]
    bf1a:	e7be      	b.n	be9a <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    bf1c:	2a40      	cmp	r2, #64	; 0x40
    bf1e:	d1d4      	bne.n	beca <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    bf20:	f003 030f 	and.w	r3, r3, #15
    bf24:	2b0a      	cmp	r3, #10
    bf26:	d102      	bne.n	bf2e <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    bf28:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    bf2a:	6818      	ldr	r0, [r3, #0]
    bf2c:	e7b5      	b.n	be9a <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    bf2e:	6803      	ldr	r3, [r0, #0]
    bf30:	4a02      	ldr	r2, [pc, #8]	; (bf3c <pb_check_proto3_default_value+0xcc>)
    bf32:	68d8      	ldr	r0, [r3, #12]
    bf34:	4290      	cmp	r0, r2
    bf36:	d1b0      	bne.n	be9a <pb_check_proto3_default_value+0x2a>
    bf38:	e7f6      	b.n	bf28 <pb_check_proto3_default_value+0xb8>
    bf3a:	bf00      	nop
    bf3c:	0002448d 	.word	0x0002448d

0000bf40 <pb_ostream_from_buffer>:
    return stream;
    bf40:	6082      	str	r2, [r0, #8]
    bf42:	2200      	movs	r2, #0
{
    bf44:	b510      	push	{r4, lr}
    return stream;
    bf46:	4c03      	ldr	r4, [pc, #12]	; (bf54 <pb_ostream_from_buffer+0x14>)
    bf48:	e9c0 2203 	strd	r2, r2, [r0, #12]
    bf4c:	e9c0 4100 	strd	r4, r1, [r0]
}
    bf50:	bd10      	pop	{r4, pc}
    bf52:	bf00      	nop
    bf54:	000244bd 	.word	0x000244bd

0000bf58 <pb_write>:
{
    bf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf5a:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    bf5c:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    bf5e:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    bf60:	b19a      	cbz	r2, bf8a <pb_write+0x32>
    bf62:	6806      	ldr	r6, [r0, #0]
    bf64:	b18e      	cbz	r6, bf8a <pb_write+0x32>
    bf66:	18d3      	adds	r3, r2, r3
    bf68:	d202      	bcs.n	bf70 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    bf6a:	6887      	ldr	r7, [r0, #8]
    bf6c:	429f      	cmp	r7, r3
    bf6e:	d207      	bcs.n	bf80 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    bf70:	6923      	ldr	r3, [r4, #16]
    bf72:	4a08      	ldr	r2, [pc, #32]	; (bf94 <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    bf74:	2b00      	cmp	r3, #0
    bf76:	bf08      	it	eq
    bf78:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    bf7a:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    bf7c:	6123      	str	r3, [r4, #16]
}
    bf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    bf80:	47b0      	blx	r6
    bf82:	b910      	cbnz	r0, bf8a <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    bf84:	6923      	ldr	r3, [r4, #16]
    bf86:	4a04      	ldr	r2, [pc, #16]	; (bf98 <pb_write+0x40>)
    bf88:	e7f4      	b.n	bf74 <pb_write+0x1c>
    stream->bytes_written += count;
    bf8a:	68e3      	ldr	r3, [r4, #12]
    return true;
    bf8c:	2001      	movs	r0, #1
    stream->bytes_written += count;
    bf8e:	442b      	add	r3, r5
    bf90:	60e3      	str	r3, [r4, #12]
    return true;
    bf92:	e7f4      	b.n	bf7e <pb_write+0x26>
    bf94:	0002bc33 	.word	0x0002bc33
    bf98:	0002bc3f 	.word	0x0002bc3f

0000bf9c <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    bf9c:	b410      	push	{r4}
    bf9e:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    bfa0:	8a4b      	ldrh	r3, [r1, #18]
    bfa2:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    bfa6:	2c02      	cmp	r4, #2
    bfa8:	d117      	bne.n	bfda <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    bfaa:	2b01      	cmp	r3, #1
    bfac:	d105      	bne.n	bfba <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    bfae:	69cb      	ldr	r3, [r1, #28]
    bfb0:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    bfb2:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    bfb4:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    bfb6:	f018 ba8a 	b.w	244ce <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    bfba:	2b02      	cmp	r3, #2
    bfbc:	d102      	bne.n	bfc4 <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    bfbe:	69cb      	ldr	r3, [r1, #28]
    bfc0:	881a      	ldrh	r2, [r3, #0]
    bfc2:	e7f6      	b.n	bfb2 <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    bfc4:	2b04      	cmp	r3, #4
    bfc6:	d102      	bne.n	bfce <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    bfc8:	69cb      	ldr	r3, [r1, #28]
    bfca:	681a      	ldr	r2, [r3, #0]
    bfcc:	e7f1      	b.n	bfb2 <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    bfce:	2b08      	cmp	r3, #8
    bfd0:	d11f      	bne.n	c012 <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    bfd2:	69cb      	ldr	r3, [r1, #28]
    bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
    bfd8:	e7ec      	b.n	bfb4 <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    bfda:	2b01      	cmp	r3, #1
    bfdc:	d108      	bne.n	bff0 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    bfde:	69cb      	ldr	r3, [r1, #28]
    bfe0:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    bfe4:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    bfe6:	2c03      	cmp	r4, #3
    bfe8:	d1e4      	bne.n	bfb4 <pb_enc_varint+0x18>
}
    bfea:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    bfec:	f018 baae 	b.w	2454c <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    bff0:	2b02      	cmp	r3, #2
    bff2:	d103      	bne.n	bffc <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    bff4:	69cb      	ldr	r3, [r1, #28]
    bff6:	f9b3 2000 	ldrsh.w	r2, [r3]
    bffa:	e7f3      	b.n	bfe4 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    bffc:	2b04      	cmp	r3, #4
    bffe:	d102      	bne.n	c006 <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    c000:	69cb      	ldr	r3, [r1, #28]
    c002:	681a      	ldr	r2, [r3, #0]
    c004:	e7ee      	b.n	bfe4 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    c006:	2b08      	cmp	r3, #8
    c008:	d103      	bne.n	c012 <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    c00a:	69cb      	ldr	r3, [r1, #28]
    c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c010:	e7e9      	b.n	bfe6 <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    c012:	6903      	ldr	r3, [r0, #16]
    c014:	4a03      	ldr	r2, [pc, #12]	; (c024 <pb_enc_varint+0x88>)
    c016:	2b00      	cmp	r3, #0
    c018:	bf08      	it	eq
    c01a:	4613      	moveq	r3, r2
    c01c:	6103      	str	r3, [r0, #16]
}
    c01e:	bc10      	pop	{r4}
    c020:	2000      	movs	r0, #0
    c022:	4770      	bx	lr
    c024:	0002bc48 	.word	0x0002bc48

0000c028 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    c028:	8a4a      	ldrh	r2, [r1, #18]
    c02a:	2a04      	cmp	r2, #4
    c02c:	d102      	bne.n	c034 <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    c02e:	69c9      	ldr	r1, [r1, #28]
    c030:	f018 ba95 	b.w	2455e <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    c034:	2a08      	cmp	r2, #8
    c036:	d102      	bne.n	c03e <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    c038:	69c9      	ldr	r1, [r1, #28]
    c03a:	f018 ba93 	b.w	24564 <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    c03e:	6902      	ldr	r2, [r0, #16]
    c040:	4903      	ldr	r1, [pc, #12]	; (c050 <pb_enc_fixed+0x28>)
    c042:	2a00      	cmp	r2, #0
    c044:	bf08      	it	eq
    c046:	460a      	moveq	r2, r1
    c048:	6102      	str	r2, [r0, #16]
    }
}
    c04a:	2000      	movs	r0, #0
    c04c:	4770      	bx	lr
    c04e:	bf00      	nop
    c050:	0002bc48 	.word	0x0002bc48

0000c054 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    c054:	7d8a      	ldrb	r2, [r1, #22]
{
    c056:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    c058:	f002 020f 	and.w	r2, r2, #15
    c05c:	2a0b      	cmp	r2, #11
    c05e:	d811      	bhi.n	c084 <pb_encode_tag_for_field+0x30>
    c060:	e8df f002 	tbb	[pc, r2]
    c064:	0c0c0c0c 	.word	0x0c0c0c0c
    c068:	0a0a060e 	.word	0x0a0a060e
    c06c:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    c070:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    c072:	8a1a      	ldrh	r2, [r3, #16]
    c074:	f018 ba79 	b.w	2456a <pb_encode_tag>
            wiretype = PB_WT_STRING;
    c078:	2102      	movs	r1, #2
            break;
    c07a:	e7fa      	b.n	c072 <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    c07c:	2100      	movs	r1, #0
    c07e:	e7f8      	b.n	c072 <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    c080:	2105      	movs	r1, #5
    c082:	e7f6      	b.n	c072 <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    c084:	6903      	ldr	r3, [r0, #16]
    c086:	4a03      	ldr	r2, [pc, #12]	; (c094 <pb_encode_tag_for_field+0x40>)
    c088:	2b00      	cmp	r3, #0
    c08a:	bf08      	it	eq
    c08c:	4613      	moveq	r3, r2
    c08e:	6103      	str	r3, [r0, #16]
}
    c090:	2000      	movs	r0, #0
    c092:	4770      	bx	lr
    c094:	0002bc5a 	.word	0x0002bc5a

0000c098 <pb_encode_submessage>:
{
    c098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c09c:	460e      	mov	r6, r1
    c09e:	4617      	mov	r7, r2
    c0a0:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c0a2:	2214      	movs	r2, #20
    c0a4:	2100      	movs	r1, #0
{
    c0a6:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c0a8:	a801      	add	r0, sp, #4
    c0aa:	f01d fa1c 	bl	294e6 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    c0ae:	463a      	mov	r2, r7
    c0b0:	4631      	mov	r1, r6
    c0b2:	a801      	add	r0, sp, #4
    c0b4:	f000 f9c4 	bl	c440 <pb_encode>
    c0b8:	b910      	cbnz	r0, c0c0 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    c0ba:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    c0bc:	6123      	str	r3, [r4, #16]
    c0be:	e008      	b.n	c0d2 <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c0c0:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    c0c4:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c0c6:	4643      	mov	r3, r8
    c0c8:	462a      	mov	r2, r5
    c0ca:	4620      	mov	r0, r4
    c0cc:	f018 f9ff 	bl	244ce <pb_encode_varint>
    c0d0:	b918      	cbnz	r0, c0da <pb_encode_submessage+0x42>
        return false;
    c0d2:	2000      	movs	r0, #0
}
    c0d4:	b006      	add	sp, #24
    c0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    c0da:	6821      	ldr	r1, [r4, #0]
    c0dc:	b921      	cbnz	r1, c0e8 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    c0de:	462a      	mov	r2, r5
    c0e0:	4620      	mov	r0, r4
    c0e2:	f7ff ff39 	bl	bf58 <pb_write>
    c0e6:	e7f5      	b.n	c0d4 <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    c0e8:	68e3      	ldr	r3, [r4, #12]
    c0ea:	68a2      	ldr	r2, [r4, #8]
    c0ec:	442b      	add	r3, r5
    c0ee:	4293      	cmp	r3, r2
    c0f0:	d905      	bls.n	c0fe <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    c0f2:	6923      	ldr	r3, [r4, #16]
    c0f4:	4a0e      	ldr	r2, [pc, #56]	; (c130 <pb_encode_submessage+0x98>)
    c0f6:	2b00      	cmp	r3, #0
    c0f8:	bf08      	it	eq
    c0fa:	4613      	moveq	r3, r2
    c0fc:	e7de      	b.n	c0bc <pb_encode_submessage+0x24>
    substream.state = stream->state;
    c0fe:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    c100:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    c102:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    c104:	a801      	add	r0, sp, #4
    c106:	4631      	mov	r1, r6
    substream.max_size = size;
    c108:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    c10c:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    c110:	f000 f996 	bl	c440 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    c114:	9a04      	ldr	r2, [sp, #16]
    c116:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    c118:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    c11a:	4413      	add	r3, r2
    c11c:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    c11e:	9b02      	ldr	r3, [sp, #8]
    c120:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    c122:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    c124:	d101      	bne.n	c12a <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    c126:	6123      	str	r3, [r4, #16]
    c128:	e7d4      	b.n	c0d4 <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    c12a:	4a02      	ldr	r2, [pc, #8]	; (c134 <pb_encode_submessage+0x9c>)
    c12c:	e7e3      	b.n	c0f6 <pb_encode_submessage+0x5e>
    c12e:	bf00      	nop
    c130:	0002bc33 	.word	0x0002bc33
    c134:	0002bc6d 	.word	0x0002bc6d

0000c138 <encode_basic_field>:
{
    c138:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    c13a:	69cb      	ldr	r3, [r1, #28]
{
    c13c:	4604      	mov	r4, r0
    c13e:	460d      	mov	r5, r1
    if (!field->pData)
    c140:	2b00      	cmp	r3, #0
    c142:	d07f      	beq.n	c244 <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    c144:	f7ff ff86 	bl	c054 <pb_encode_tag_for_field>
    c148:	2800      	cmp	r0, #0
    c14a:	d073      	beq.n	c234 <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    c14c:	7da8      	ldrb	r0, [r5, #22]
    c14e:	f000 030f 	and.w	r3, r0, #15
    c152:	2b0b      	cmp	r3, #11
    c154:	d873      	bhi.n	c23e <encode_basic_field+0x106>
    c156:	e8df f003 	tbb	[pc, r3]
    c15a:	1106      	.short	0x1106
    c15c:	17171111 	.word	0x17171111
    c160:	5252351d 	.word	0x5252351d
    c164:	6f72      	.short	0x6f72
        if (p[i] != 0)
    c166:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    c168:	4620      	mov	r0, r4
}
    c16a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    c16e:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    c170:	2300      	movs	r3, #0
    c172:	3a00      	subs	r2, #0
    c174:	bf18      	it	ne
    c176:	2201      	movne	r2, #1
    c178:	f018 b9a9 	b.w	244ce <pb_encode_varint>
            return pb_enc_varint(stream, field);
    c17c:	4629      	mov	r1, r5
    c17e:	4620      	mov	r0, r4
}
    c180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    c184:	f7ff bf0a 	b.w	bf9c <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    c188:	4629      	mov	r1, r5
    c18a:	4620      	mov	r0, r4
}
    c18c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    c190:	f7ff bf4a 	b.w	c028 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    c194:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    c196:	b909      	cbnz	r1, c19c <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    c198:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    c19a:	e00e      	b.n	c1ba <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c19c:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c19e:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c1a0:	d80a      	bhi.n	c1b8 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c1a2:	8a6b      	ldrh	r3, [r5, #18]
    c1a4:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c1a6:	4293      	cmp	r3, r2
    c1a8:	d206      	bcs.n	c1b8 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    c1aa:	6923      	ldr	r3, [r4, #16]
    c1ac:	4a26      	ldr	r2, [pc, #152]	; (c248 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	bf08      	it	eq
    c1b2:	4613      	moveq	r3, r2
    c1b4:	6123      	str	r3, [r4, #16]
    c1b6:	e03d      	b.n	c234 <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    c1b8:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c1ba:	4620      	mov	r0, r4
}
    c1bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c1c0:	f018 b9d9 	b.w	24576 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c1c4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    c1c8:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    c1ca:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    c1cc:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c1ce:	d00e      	beq.n	c1ee <encode_basic_field+0xb6>
        if (max_size == 0)
    c1d0:	b913      	cbnz	r3, c1d8 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    c1d2:	6923      	ldr	r3, [r4, #16]
    c1d4:	4a1d      	ldr	r2, [pc, #116]	; (c24c <encode_basic_field+0x114>)
    c1d6:	e7ea      	b.n	c1ae <encode_basic_field+0x76>
        max_size -= 1;
    c1d8:	3b01      	subs	r3, #1
    if (str == NULL)
    c1da:	2900      	cmp	r1, #0
    c1dc:	d0dc      	beq.n	c198 <encode_basic_field+0x60>
    size_t size = 0;
    c1de:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    c1e0:	429a      	cmp	r2, r3
    c1e2:	5c88      	ldrb	r0, [r1, r2]
    c1e4:	d006      	beq.n	c1f4 <encode_basic_field+0xbc>
    c1e6:	2800      	cmp	r0, #0
    c1e8:	d0e7      	beq.n	c1ba <encode_basic_field+0x82>
            size++;
    c1ea:	3201      	adds	r2, #1
            p++;
    c1ec:	e7f8      	b.n	c1e0 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    c1ee:	f04f 33ff 	mov.w	r3, #4294967295
    c1f2:	e7f2      	b.n	c1da <encode_basic_field+0xa2>
        if (*p != '\0')
    c1f4:	2800      	cmp	r0, #0
    c1f6:	d0e0      	beq.n	c1ba <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    c1f8:	6923      	ldr	r3, [r4, #16]
    c1fa:	4a15      	ldr	r2, [pc, #84]	; (c250 <encode_basic_field+0x118>)
    c1fc:	e7d7      	b.n	c1ae <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    c1fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c200:	b912      	cbnz	r2, c208 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    c202:	6923      	ldr	r3, [r4, #16]
    c204:	4a13      	ldr	r2, [pc, #76]	; (c254 <encode_basic_field+0x11c>)
    c206:	e7d2      	b.n	c1ae <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c208:	2b09      	cmp	r3, #9
    c20a:	d006      	beq.n	c21a <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c20c:	4620      	mov	r0, r4
    c20e:	69ea      	ldr	r2, [r5, #28]
    c210:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    c212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c216:	f7ff bf3f 	b.w	c098 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c21a:	6a2a      	ldr	r2, [r5, #32]
    c21c:	2a00      	cmp	r2, #0
    c21e:	d0f5      	beq.n	c20c <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    c220:	f852 3c08 	ldr.w	r3, [r2, #-8]
    c224:	2b00      	cmp	r3, #0
    c226:	d0f1      	beq.n	c20c <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    c228:	4629      	mov	r1, r5
    c22a:	4620      	mov	r0, r4
    c22c:	3a04      	subs	r2, #4
    c22e:	4798      	blx	r3
    c230:	2800      	cmp	r0, #0
    c232:	d1eb      	bne.n	c20c <encode_basic_field+0xd4>
        return false;
    c234:	2000      	movs	r0, #0
}
    c236:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c238:	8a6a      	ldrh	r2, [r5, #18]
    c23a:	69e9      	ldr	r1, [r5, #28]
    c23c:	e7bd      	b.n	c1ba <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    c23e:	6923      	ldr	r3, [r4, #16]
    c240:	4a05      	ldr	r2, [pc, #20]	; (c258 <encode_basic_field+0x120>)
    c242:	e7b4      	b.n	c1ae <encode_basic_field+0x76>
        return true;
    c244:	2001      	movs	r0, #1
    c246:	e7f6      	b.n	c236 <encode_basic_field+0xfe>
    c248:	0002bc81 	.word	0x0002bc81
    c24c:	0002bc95 	.word	0x0002bc95
    c250:	0002bca8 	.word	0x0002bca8
    c254:	0002bcbc 	.word	0x0002bcbc
    c258:	0002bc5a 	.word	0x0002bc5a

0000c25c <encode_field>:
{
    c25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c260:	7d8b      	ldrb	r3, [r1, #22]
{
    c262:	4605      	mov	r5, r0
    c264:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c268:	2a30      	cmp	r2, #48	; 0x30
{
    c26a:	460c      	mov	r4, r1
    c26c:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c26e:	d112      	bne.n	c296 <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    c270:	6a0b      	ldr	r3, [r1, #32]
    c272:	881a      	ldrh	r2, [r3, #0]
    c274:	8a0b      	ldrh	r3, [r1, #16]
    c276:	429a      	cmp	r2, r3
    c278:	d114      	bne.n	c2a4 <encode_field+0x48>
    if (!field->pData)
    c27a:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c27c:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    c27e:	b9ea      	cbnz	r2, c2bc <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c280:	f013 0f30 	tst.w	r3, #48	; 0x30
    c284:	d10e      	bne.n	c2a4 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    c286:	692b      	ldr	r3, [r5, #16]
    c288:	4a69      	ldr	r2, [pc, #420]	; (c430 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c28a:	2b00      	cmp	r3, #0
    c28c:	bf08      	it	eq
    c28e:	4613      	moveq	r3, r2
    c290:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c292:	2000      	movs	r0, #0
    c294:	e007      	b.n	c2a6 <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    c296:	2a10      	cmp	r2, #16
    c298:	d1ef      	bne.n	c27a <encode_field+0x1e>
        if (field->pSize)
    c29a:	6a0a      	ldr	r2, [r1, #32]
    c29c:	b132      	cbz	r2, c2ac <encode_field+0x50>
        if (p[i] != 0)
    c29e:	7813      	ldrb	r3, [r2, #0]
    c2a0:	2b00      	cmp	r3, #0
    c2a2:	d1ea      	bne.n	c27a <encode_field+0x1e>
            return true;
    c2a4:	2001      	movs	r0, #1
}
    c2a6:	b007      	add	sp, #28
    c2a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    c2ac:	2b3f      	cmp	r3, #63	; 0x3f
    c2ae:	d8e4      	bhi.n	c27a <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    c2b0:	4608      	mov	r0, r1
    c2b2:	f7ff fddd 	bl	be70 <pb_check_proto3_default_value>
    c2b6:	2800      	cmp	r0, #0
    c2b8:	d0df      	beq.n	c27a <encode_field+0x1e>
    c2ba:	e7f3      	b.n	c2a4 <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    c2bc:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    c2c0:	2a40      	cmp	r2, #64	; 0x40
    c2c2:	d10c      	bne.n	c2de <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    c2c4:	6823      	ldr	r3, [r4, #0]
    c2c6:	68db      	ldr	r3, [r3, #12]
    c2c8:	2b00      	cmp	r3, #0
    c2ca:	d0eb      	beq.n	c2a4 <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    c2cc:	4622      	mov	r2, r4
    c2ce:	4629      	mov	r1, r5
    c2d0:	2000      	movs	r0, #0
    c2d2:	4798      	blx	r3
    c2d4:	2800      	cmp	r0, #0
    c2d6:	d1e5      	bne.n	c2a4 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    c2d8:	692b      	ldr	r3, [r5, #16]
    c2da:	4a56      	ldr	r2, [pc, #344]	; (c434 <encode_field+0x1d8>)
    c2dc:	e7d5      	b.n	c28a <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    c2de:	f003 0130 	and.w	r1, r3, #48	; 0x30
    c2e2:	2920      	cmp	r1, #32
    c2e4:	f040 809d 	bne.w	c422 <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    c2e8:	6a21      	ldr	r1, [r4, #32]
    c2ea:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    c2ec:	2e00      	cmp	r6, #0
    c2ee:	d0d9      	beq.n	c2a4 <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c2f0:	2a80      	cmp	r2, #128	; 0x80
    c2f2:	d120      	bne.n	c336 <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    c2f4:	f003 030f 	and.w	r3, r3, #15
    c2f8:	2b05      	cmp	r3, #5
    c2fa:	d85e      	bhi.n	c3ba <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    c2fc:	2102      	movs	r1, #2
    c2fe:	4628      	mov	r0, r5
    c300:	8a22      	ldrh	r2, [r4, #16]
    c302:	f018 f932 	bl	2456a <pb_encode_tag>
    c306:	2800      	cmp	r0, #0
    c308:	d0c3      	beq.n	c292 <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    c30a:	7da3      	ldrb	r3, [r4, #22]
    c30c:	f003 030f 	and.w	r3, r3, #15
    c310:	2b04      	cmp	r3, #4
    c312:	d116      	bne.n	c342 <encode_field+0xe6>
            size = 4 * (size_t)count;
    c314:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c316:	463a      	mov	r2, r7
    c318:	2300      	movs	r3, #0
    c31a:	4628      	mov	r0, r5
    c31c:	f018 f8d7 	bl	244ce <pb_encode_varint>
    c320:	2800      	cmp	r0, #0
    c322:	d0b6      	beq.n	c292 <encode_field+0x36>
        if (stream->callback == NULL)
    c324:	6829      	ldr	r1, [r5, #0]
    c326:	bb79      	cbnz	r1, c388 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c328:	463a      	mov	r2, r7
    c32a:	4628      	mov	r0, r5
}
    c32c:	b007      	add	sp, #28
    c32e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c332:	f7ff be11 	b.w	bf58 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c336:	8aa2      	ldrh	r2, [r4, #20]
    c338:	42b2      	cmp	r2, r6
    c33a:	d2db      	bcs.n	c2f4 <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c33c:	692b      	ldr	r3, [r5, #16]
    c33e:	4a3e      	ldr	r2, [pc, #248]	; (c438 <encode_field+0x1dc>)
    c340:	e7a3      	b.n	c28a <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c342:	2b05      	cmp	r3, #5
    c344:	d101      	bne.n	c34a <encode_field+0xee>
            size = 8 * (size_t)count;
    c346:	00f7      	lsls	r7, r6, #3
    c348:	e7e5      	b.n	c316 <encode_field+0xba>
            void *pData_orig = field->pData;
    c34a:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    c34c:	2214      	movs	r2, #20
    c34e:	2100      	movs	r1, #0
    c350:	a801      	add	r0, sp, #4
    c352:	f01d f8c8 	bl	294e6 <memset>
            void *pData_orig = field->pData;
    c356:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    c35a:	4621      	mov	r1, r4
    c35c:	a801      	add	r0, sp, #4
    c35e:	f7ff fe1d 	bl	bf9c <pb_enc_varint>
    c362:	b928      	cbnz	r0, c370 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c364:	692b      	ldr	r3, [r5, #16]
    c366:	2b00      	cmp	r3, #0
    c368:	d192      	bne.n	c290 <encode_field+0x34>
    c36a:	9b05      	ldr	r3, [sp, #20]
    c36c:	4a33      	ldr	r2, [pc, #204]	; (c43c <encode_field+0x1e0>)
    c36e:	e78c      	b.n	c28a <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    c370:	69e3      	ldr	r3, [r4, #28]
    c372:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    c374:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    c376:	4413      	add	r3, r2
    c378:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    c37a:	b2bb      	uxth	r3, r7
    c37c:	429e      	cmp	r6, r3
    c37e:	d8ec      	bhi.n	c35a <encode_field+0xfe>
            size = sizestream.bytes_written;
    c380:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    c382:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    c386:	e7c6      	b.n	c316 <encode_field+0xba>
    c388:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c38a:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    c38c:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c38e:	f003 030e 	and.w	r3, r3, #14
    c392:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    c394:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c396:	d10d      	bne.n	c3b4 <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    c398:	f7ff fe46 	bl	c028 <pb_enc_fixed>
    c39c:	2800      	cmp	r0, #0
    c39e:	f43f af78 	beq.w	c292 <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c3a2:	69e3      	ldr	r3, [r4, #28]
    c3a4:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c3a6:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    c3a8:	4413      	add	r3, r2
    c3aa:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c3ac:	b2bb      	uxth	r3, r7
    c3ae:	429e      	cmp	r6, r3
    c3b0:	d8eb      	bhi.n	c38a <encode_field+0x12e>
    c3b2:	e777      	b.n	c2a4 <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    c3b4:	f7ff fdf2 	bl	bf9c <pb_enc_varint>
    c3b8:	e7f0      	b.n	c39c <encode_field+0x140>
    c3ba:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    c3be:	7da3      	ldrb	r3, [r4, #22]
    c3c0:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    c3c4:	2b86      	cmp	r3, #134	; 0x86
    c3c6:	d127      	bne.n	c418 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    c3c8:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    c3ca:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    c3cc:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    c3d0:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    c3d2:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    c3d6:	f1b9 0f00 	cmp.w	r9, #0
    c3da:	d11a      	bne.n	c412 <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    c3dc:	f7ff fe3a 	bl	c054 <pb_encode_tag_for_field>
    c3e0:	b908      	cbnz	r0, c3e6 <encode_field+0x18a>
                field->pData = pData_orig;
    c3e2:	61e7      	str	r7, [r4, #28]
                if (!status)
    c3e4:	e755      	b.n	c292 <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    c3e6:	2201      	movs	r2, #1
    c3e8:	4628      	mov	r0, r5
    c3ea:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    c3ec:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    c3f0:	f7ff fdb2 	bl	bf58 <pb_write>
                field->pData = pData_orig;
    c3f4:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    c3f6:	2800      	cmp	r0, #0
    c3f8:	f43f af4b 	beq.w	c292 <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c3fc:	69e3      	ldr	r3, [r4, #28]
    c3fe:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c400:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    c404:	4413      	add	r3, r2
    c406:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c408:	fa1f f388 	uxth.w	r3, r8
    c40c:	429e      	cmp	r6, r3
    c40e:	d8d6      	bhi.n	c3be <encode_field+0x162>
    c410:	e748      	b.n	c2a4 <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    c412:	f7ff fe91 	bl	c138 <encode_basic_field>
    c416:	e7ed      	b.n	c3f4 <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    c418:	4621      	mov	r1, r4
    c41a:	4628      	mov	r0, r5
    c41c:	f7ff fe8c 	bl	c138 <encode_basic_field>
    c420:	e7e9      	b.n	c3f6 <encode_field+0x19a>
        return encode_basic_field(stream, field);
    c422:	4621      	mov	r1, r4
    c424:	4628      	mov	r0, r5
}
    c426:	b007      	add	sp, #28
    c428:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    c42c:	f7ff be84 	b.w	c138 <encode_basic_field>
    c430:	0002bcd5 	.word	0x0002bcd5
    c434:	0002bcec 	.word	0x0002bcec
    c438:	0002bcfb 	.word	0x0002bcfb
    c43c:	0002bd13 	.word	0x0002bd13

0000c440 <pb_encode>:
{
    c440:	b530      	push	{r4, r5, lr}
    c442:	b095      	sub	sp, #84	; 0x54
    c444:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    c446:	4668      	mov	r0, sp
    c448:	f018 f81c 	bl	24484 <pb_field_iter_begin_const>
    c44c:	b370      	cbz	r0, c4ac <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    c44e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c452:	f003 030f 	and.w	r3, r3, #15
    c456:	2b0a      	cmp	r3, #10
    c458:	d121      	bne.n	c49e <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c45a:	9b07      	ldr	r3, [sp, #28]
    c45c:	681d      	ldr	r5, [r3, #0]
    while (extension)
    c45e:	b91d      	cbnz	r5, c468 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    c460:	4668      	mov	r0, sp
    c462:	f018 f804 	bl	2446e <pb_field_iter_next>
    c466:	e7f1      	b.n	c44c <pb_encode+0xc>
        if (extension->type->encode)
    c468:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    c46a:	4629      	mov	r1, r5
        if (extension->type->encode)
    c46c:	685b      	ldr	r3, [r3, #4]
    c46e:	b123      	cbz	r3, c47a <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    c470:	4620      	mov	r0, r4
    c472:	4798      	blx	r3
        if (!status)
    c474:	b158      	cbz	r0, c48e <pb_encode+0x4e>
        extension = extension->next;
    c476:	68ad      	ldr	r5, [r5, #8]
    c478:	e7f1      	b.n	c45e <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    c47a:	a80a      	add	r0, sp, #40	; 0x28
    c47c:	f018 f804 	bl	24488 <pb_field_iter_begin_extension_const>
    c480:	b940      	cbnz	r0, c494 <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    c482:	6923      	ldr	r3, [r4, #16]
    c484:	4a0a      	ldr	r2, [pc, #40]	; (c4b0 <pb_encode+0x70>)
    c486:	2b00      	cmp	r3, #0
    c488:	bf08      	it	eq
    c48a:	4613      	moveq	r3, r2
    c48c:	6123      	str	r3, [r4, #16]
                return false;
    c48e:	2000      	movs	r0, #0
}
    c490:	b015      	add	sp, #84	; 0x54
    c492:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    c494:	4620      	mov	r0, r4
    c496:	a90a      	add	r1, sp, #40	; 0x28
    c498:	f7ff fee0 	bl	c25c <encode_field>
    c49c:	e7ea      	b.n	c474 <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    c49e:	4669      	mov	r1, sp
    c4a0:	4620      	mov	r0, r4
    c4a2:	f7ff fedb 	bl	c25c <encode_field>
    c4a6:	2800      	cmp	r0, #0
    c4a8:	d1da      	bne.n	c460 <pb_encode+0x20>
    c4aa:	e7f0      	b.n	c48e <pb_encode+0x4e>
        return true; /* Empty message type */
    c4ac:	2001      	movs	r0, #1
    c4ae:	e7ef      	b.n	c490 <pb_encode+0x50>
    c4b0:	0002bd1a 	.word	0x0002bd1a

0000c4b4 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4b8:	b091      	sub	sp, #68	; 0x44
    c4ba:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    c4bc:	f002 0304 	and.w	r3, r2, #4
    c4c0:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    c4c2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    c4c6:	3301      	adds	r3, #1
    c4c8:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    c4ca:	0783      	lsls	r3, r0, #30
{
    c4cc:	4605      	mov	r5, r0
    c4ce:	460e      	mov	r6, r1
    c4d0:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    c4d4:	9202      	str	r2, [sp, #8]
	if ((uintptr_t)packaged % sizeof(void *)) {
    c4d6:	f040 81fe 	bne.w	c8d6 <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    c4da:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    c4dc:	b130      	cbz	r0, c4ec <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    c4de:	2907      	cmp	r1, #7
    c4e0:	d809      	bhi.n	c4f6 <cbvprintf_package+0x42>
		return -ENOSPC;
    c4e2:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    c4e6:	b011      	add	sp, #68	; 0x44
    c4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    c4ec:	f001 0607 	and.w	r6, r1, #7
    c4f0:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    c4f2:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    c4f6:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
    c4fa:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
    c4fe:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    c500:	4647      	mov	r7, r8
	s = fmt--;
    c502:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    c504:	f04f 32ff 	mov.w	r2, #4294967295
	bool parsing = false;
    c508:	4643      	mov	r3, r8
	size = sizeof(char *);
    c50a:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    c50c:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
    c510:	b10d      	cbz	r5, c516 <cbvprintf_package+0x62>
				*(const char **)buf = s;
    c512:	9800      	ldr	r0, [sp, #0]
    c514:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c516:	9804      	ldr	r0, [sp, #16]
    c518:	2800      	cmp	r0, #0
    c51a:	f300 80e1 	bgt.w	c6e0 <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c51e:	489c      	ldr	r0, [pc, #624]	; (c790 <cbvprintf_package+0x2dc>)
    c520:	f8dd c000 	ldr.w	ip, [sp]
    c524:	4584      	cmp	ip, r0
    c526:	d303      	bcc.n	c530 <cbvprintf_package+0x7c>
    c528:	489a      	ldr	r0, [pc, #616]	; (c794 <cbvprintf_package+0x2e0>)
    c52a:	4584      	cmp	ip, r0
    c52c:	f0c0 80d8 	bcc.w	c6e0 <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c530:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c534:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c538:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c53c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c540:	f000 80e9 	beq.w	c716 <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c544:	f04f 0c00 	mov.w	ip, #0
    c548:	e0d3      	b.n	c6f2 <cbvprintf_package+0x23e>
			switch (*fmt) {
    c54a:	287a      	cmp	r0, #122	; 0x7a
    c54c:	d864      	bhi.n	c618 <cbvprintf_package+0x164>
    c54e:	284b      	cmp	r0, #75	; 0x4b
    c550:	d80f      	bhi.n	c572 <cbvprintf_package+0xbe>
    c552:	2847      	cmp	r0, #71	; 0x47
    c554:	d860      	bhi.n	c618 <cbvprintf_package+0x164>
    c556:	2829      	cmp	r0, #41	; 0x29
    c558:	d82f      	bhi.n	c5ba <cbvprintf_package+0x106>
    c55a:	2825      	cmp	r0, #37	; 0x25
    c55c:	d05b      	beq.n	c616 <cbvprintf_package+0x162>
    c55e:	d85b      	bhi.n	c618 <cbvprintf_package+0x164>
    c560:	2820      	cmp	r0, #32
    c562:	d07f      	beq.n	c664 <cbvprintf_package+0x1b0>
    c564:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
    c568:	f1d9 0300 	rsbs	r3, r9, #0
    c56c:	eb43 0309 	adc.w	r3, r3, r9
    c570:	e078      	b.n	c664 <cbvprintf_package+0x1b0>
    c572:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
    c576:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
    c57a:	d84d      	bhi.n	c618 <cbvprintf_package+0x164>
    c57c:	e8df f00e 	tbb	[pc, lr]
    c580:	4c4c4c72 	.word	0x4c4c4c72
    c584:	4c4c4c4c 	.word	0x4c4c4c4c
    c588:	4c4c4c4c 	.word	0x4c4c4c4c
    c58c:	4c4c4c4e 	.word	0x4c4c4c4e
    c590:	4c4c4c4c 	.word	0x4c4c4c4c
    c594:	4e4c5c4c 	.word	0x4e4c5c4c
    c598:	5c5c5c4e 	.word	0x5c5c5c4e
    c59c:	4c6f4e72 	.word	0x4c6f4e72
    c5a0:	4e184c72 	.word	0x4e184c72
    c5a4:	814c4c18 	.word	0x814c4c18
    c5a8:	4c4c4e7e 	.word	0x4c4c4e7e
    c5ac:	4c4e      	.short	0x4c4e
    c5ae:	7e          	.byte	0x7e
    c5af:	00          	.byte	0x00
    c5b0:	2000      	movs	r0, #0
    c5b2:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
    c5b4:	f04f 0b04 	mov.w	fp, #4
    c5b8:	e03c      	b.n	c634 <cbvprintf_package+0x180>
			switch (*fmt) {
    c5ba:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
    c5be:	2001      	movs	r0, #1
    c5c0:	fa5f fe8e 	uxtb.w	lr, lr
    c5c4:	fa00 fe0e 	lsl.w	lr, r0, lr
    c5c8:	f64f 70da 	movw	r0, #65498	; 0xffda
    c5cc:	ea1e 0f00 	tst.w	lr, r0
    c5d0:	d148      	bne.n	c664 <cbvprintf_package+0x1b0>
    c5d2:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
    c5d6:	d12f      	bne.n	c638 <cbvprintf_package+0x184>
    c5d8:	f01e 0301 	ands.w	r3, lr, #1
    c5dc:	d042      	beq.n	c664 <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
    c5de:	3c01      	subs	r4, #1
    c5e0:	445c      	add	r4, fp
    c5e2:	f1cb 0e00 	rsb	lr, fp, #0
    c5e6:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    c5ea:	2d00      	cmp	r5, #0
    c5ec:	d05e      	beq.n	c6ac <cbvprintf_package+0x1f8>
    c5ee:	ebaa 0e05 	sub.w	lr, sl, r5
    c5f2:	44a6      	add	lr, r4
    c5f4:	4576      	cmp	r6, lr
    c5f6:	f4ff af74 	bcc.w	c4e2 <cbvprintf_package+0x2e>
		if (is_str_arg) {
    c5fa:	2800      	cmp	r0, #0
    c5fc:	d168      	bne.n	c6d0 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    c5fe:	f1ba 0f04 	cmp.w	sl, #4
    c602:	d143      	bne.n	c68c <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    c604:	46e1      	mov	r9, ip
    c606:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
    c60a:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    c60c:	46cc      	mov	ip, r9
    c60e:	f04f 0a04 	mov.w	sl, #4
    c612:	3404      	adds	r4, #4
    c614:	e026      	b.n	c664 <cbvprintf_package+0x1b0>
				arg_idx--;
    c616:	3a01      	subs	r2, #1
				parsing = false;
    c618:	2300      	movs	r3, #0
				continue;
    c61a:	e023      	b.n	c664 <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
    c61c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    c620:	2b6c      	cmp	r3, #108	; 0x6c
    c622:	d130      	bne.n	c686 <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    c624:	2000      	movs	r0, #0
    c626:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    c62a:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    c62c:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
    c62e:	d1c1      	bne.n	c5b4 <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
    c630:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
    c634:	46da      	mov	sl, fp
    c636:	e7d2      	b.n	c5de <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
    c638:	f10c 0907 	add.w	r9, ip, #7
    c63c:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
    c640:	3407      	adds	r4, #7
    c642:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    c646:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
    c64a:	b135      	cbz	r5, c65a <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
    c64c:	9805      	ldr	r0, [sp, #20]
    c64e:	4420      	add	r0, r4
    c650:	42b0      	cmp	r0, r6
    c652:	f63f af46 	bhi.w	c4e2 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    c656:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    c65a:	2300      	movs	r3, #0
				buf += size;
    c65c:	3408      	adds	r4, #8
			switch (*fmt) {
    c65e:	f04f 0b08 	mov.w	fp, #8
    c662:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
    c664:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    c668:	2800      	cmp	r0, #0
    c66a:	f000 80bc 	beq.w	c7e6 <cbvprintf_package+0x332>
			if (!parsing) {
    c66e:	2b00      	cmp	r3, #0
    c670:	f47f af6b 	bne.w	c54a <cbvprintf_package+0x96>
				if (*fmt == '%') {
    c674:	2825      	cmp	r0, #37	; 0x25
    c676:	d1f5      	bne.n	c664 <cbvprintf_package+0x1b0>
					parsing = true;
    c678:	2301      	movs	r3, #1
					arg_idx++;
    c67a:	3201      	adds	r2, #1
				align = VA_STACK_ALIGN(size_t);
    c67c:	f04f 0b04 	mov.w	fp, #4
    c680:	e7ef      	b.n	c662 <cbvprintf_package+0x1ae>
			switch (*fmt) {
    c682:	4618      	mov	r0, r3
    c684:	e795      	b.n	c5b2 <cbvprintf_package+0xfe>
    c686:	2000      	movs	r0, #0
				parsing = false;
    c688:	4603      	mov	r3, r0
    c68a:	e7a8      	b.n	c5de <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
    c68c:	f1ba 0f08 	cmp.w	sl, #8
    c690:	f040 809b 	bne.w	c7ca <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    c694:	f10c 0907 	add.w	r9, ip, #7
    c698:	f029 0c07 	bic.w	ip, r9, #7
    c69c:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
    c6a0:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
    c6a4:	f04f 0a08 	mov.w	sl, #8
    c6a8:	3408      	adds	r4, #8
    c6aa:	e7db      	b.n	c664 <cbvprintf_package+0x1b0>
		if (is_str_arg) {
    c6ac:	b980      	cbnz	r0, c6d0 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    c6ae:	f1ba 0f04 	cmp.w	sl, #4
    c6b2:	d102      	bne.n	c6ba <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
    c6b4:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
    c6b8:	e7a8      	b.n	c60c <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
    c6ba:	f1ba 0f08 	cmp.w	sl, #8
    c6be:	f040 8084 	bne.w	c7ca <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    c6c2:	f10c 0907 	add.w	r9, ip, #7
    c6c6:	f029 0907 	bic.w	r9, r9, #7
    c6ca:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
    c6ce:	e7e9      	b.n	c6a4 <cbvprintf_package+0x1f0>
			s = va_arg(ap, char *);
    c6d0:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c6d2:	9804      	ldr	r0, [sp, #16]
    c6d4:	3801      	subs	r0, #1
    c6d6:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    c6d8:	f859 0b04 	ldr.w	r0, [r9], #4
    c6dc:	9000      	str	r0, [sp, #0]
    c6de:	e717      	b.n	c510 <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
    c6e0:	9802      	ldr	r0, [sp, #8]
    c6e2:	0780      	lsls	r0, r0, #30
    c6e4:	d548      	bpl.n	c778 <cbvprintf_package+0x2c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c6e6:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c6ea:	eba4 0e05 	sub.w	lr, r4, r5
    c6ee:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c6f2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    c6f6:	d31d      	bcc.n	c734 <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
    c6f8:	4927      	ldr	r1, [pc, #156]	; (c798 <cbvprintf_package+0x2e4>)
    c6fa:	f240 237b 	movw	r3, #635	; 0x27b
    c6fe:	4a27      	ldr	r2, [pc, #156]	; (c79c <cbvprintf_package+0x2e8>)
    c700:	4827      	ldr	r0, [pc, #156]	; (c7a0 <cbvprintf_package+0x2ec>)
    c702:	f018 f950 	bl	249a6 <assert_print>
    c706:	4827      	ldr	r0, [pc, #156]	; (c7a4 <cbvprintf_package+0x2f0>)
    c708:	f018 f94d 	bl	249a6 <assert_print>
    c70c:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    c710:	4822      	ldr	r0, [pc, #136]	; (c79c <cbvprintf_package+0x2e8>)
    c712:	f018 f941 	bl	24998 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    c716:	2f0f      	cmp	r7, #15
    c718:	d80e      	bhi.n	c738 <cbvprintf_package+0x284>
				if (buf0 != NULL) {
    c71a:	2d00      	cmp	r5, #0
    c71c:	d046      	beq.n	c7ac <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    c71e:	f107 0c40 	add.w	ip, r7, #64	; 0x40
    c722:	44ec      	add	ip, sp
    c724:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    c728:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    c72c:	9803      	ldr	r0, [sp, #12]
    c72e:	3001      	adds	r0, #1
    c730:	9003      	str	r0, [sp, #12]
    c732:	e020      	b.n	c776 <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    c734:	2f0f      	cmp	r7, #15
    c736:	d90c      	bls.n	c752 <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
    c738:	4917      	ldr	r1, [pc, #92]	; (c798 <cbvprintf_package+0x2e4>)
    c73a:	f44f 7320 	mov.w	r3, #640	; 0x280
    c73e:	4a17      	ldr	r2, [pc, #92]	; (c79c <cbvprintf_package+0x2e8>)
    c740:	4817      	ldr	r0, [pc, #92]	; (c7a0 <cbvprintf_package+0x2ec>)
    c742:	f018 f930 	bl	249a6 <assert_print>
    c746:	4818      	ldr	r0, [pc, #96]	; (c7a8 <cbvprintf_package+0x2f4>)
    c748:	f018 f92d 	bl	249a6 <assert_print>
    c74c:	f44f 7120 	mov.w	r1, #640	; 0x280
    c750:	e7de      	b.n	c710 <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
    c752:	b1bd      	cbz	r5, c784 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    c754:	f107 0e40 	add.w	lr, r7, #64	; 0x40
    c758:	44ee      	add	lr, sp
    c75a:	b2c0      	uxtb	r0, r0
    c75c:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    c760:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    c764:	f1bc 0f00 	cmp.w	ip, #0
    c768:	d0e0      	beq.n	c72c <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    c76a:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c76e:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    c772:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
    c776:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    c778:	f1c5 0008 	rsb	r0, r5, #8
    c77c:	46cc      	mov	ip, r9
			buf += sizeof(char *);
    c77e:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    c780:	9005      	str	r0, [sp, #20]
    c782:	e76f      	b.n	c664 <cbvprintf_package+0x1b0>
				} else if (is_ro) {
    c784:	f1bc 0f00 	cmp.w	ip, #0
    c788:	d010      	beq.n	c7ac <cbvprintf_package+0x2f8>
					len += 1;
    c78a:	3601      	adds	r6, #1
    c78c:	e7f3      	b.n	c776 <cbvprintf_package+0x2c2>
    c78e:	bf00      	nop
    c790:	00029ce0 	.word	0x00029ce0
    c794:	00030d98 	.word	0x00030d98
    c798:	00030a97 	.word	0x00030a97
    c79c:	0002bd2c 	.word	0x0002bd2c
    c7a0:	0002b339 	.word	0x0002b339
    c7a4:	0002bd5a 	.word	0x0002bd5a
    c7a8:	0002bd7b 	.word	0x0002bd7b
				} else if (rws_pos_en) {
    c7ac:	9801      	ldr	r0, [sp, #4]
					len += 2;
    c7ae:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    c7b0:	2800      	cmp	r0, #0
    c7b2:	d1e0      	bne.n	c776 <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
    c7b4:	9800      	ldr	r0, [sp, #0]
    c7b6:	e9cd 3106 	strd	r3, r1, [sp, #24]
    c7ba:	9205      	str	r2, [sp, #20]
    c7bc:	f7fc fdd0 	bl	9360 <strlen>
    c7c0:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    c7c4:	9a05      	ldr	r2, [sp, #20]
    c7c6:	4406      	add	r6, r0
    c7c8:	e7d5      	b.n	c776 <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
    c7ca:	f240 23c5 	movw	r3, #709	; 0x2c5
    c7ce:	4a43      	ldr	r2, [pc, #268]	; (c8dc <cbvprintf_package+0x428>)
    c7d0:	4943      	ldr	r1, [pc, #268]	; (c8e0 <cbvprintf_package+0x42c>)
    c7d2:	4844      	ldr	r0, [pc, #272]	; (c8e4 <cbvprintf_package+0x430>)
    c7d4:	f018 f8e7 	bl	249a6 <assert_print>
    c7d8:	4651      	mov	r1, sl
    c7da:	4843      	ldr	r0, [pc, #268]	; (c8e8 <cbvprintf_package+0x434>)
    c7dc:	f018 f8e3 	bl	249a6 <assert_print>
    c7e0:	f240 21c5 	movw	r1, #709	; 0x2c5
    c7e4:	e794      	b.n	c710 <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
    c7e6:	1b63      	subs	r3, r4, r5
    c7e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c7ec:	d30c      	bcc.n	c808 <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
    c7ee:	493c      	ldr	r1, [pc, #240]	; (c8e0 <cbvprintf_package+0x42c>)
    c7f0:	f240 23d1 	movw	r3, #721	; 0x2d1
    c7f4:	4a39      	ldr	r2, [pc, #228]	; (c8dc <cbvprintf_package+0x428>)
    c7f6:	483b      	ldr	r0, [pc, #236]	; (c8e4 <cbvprintf_package+0x430>)
    c7f8:	f018 f8d5 	bl	249a6 <assert_print>
    c7fc:	483b      	ldr	r0, [pc, #236]	; (c8ec <cbvprintf_package+0x438>)
    c7fe:	f018 f8d2 	bl	249a6 <assert_print>
    c802:	f240 21d1 	movw	r1, #721	; 0x2d1
    c806:	e783      	b.n	c710 <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
    c808:	b91d      	cbnz	r5, c812 <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    c80a:	f1a6 0408 	sub.w	r4, r6, #8
    c80e:	18e0      	adds	r0, r4, r3
    c810:	e669      	b.n	c4e6 <cbvprintf_package+0x32>
	if (rws_pos_en) {
    c812:	9a01      	ldr	r2, [sp, #4]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    c814:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    c816:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    c818:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    c81a:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
    c81e:	b1c2      	cbz	r2, c852 <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    c820:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    c822:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
    c826:	f1b8 0f00 	cmp.w	r8, #0
    c82a:	d005      	beq.n	c838 <cbvprintf_package+0x384>
		for (i = 0; i < s_idx; i++) {
    c82c:	2200      	movs	r2, #0
    c82e:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    c830:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    c834:	4297      	cmp	r7, r2
    c836:	d10e      	bne.n	c856 <cbvprintf_package+0x3a2>
			*buf++ = str_ptr_arg[i];
    c838:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    c83c:	f1c5 0301 	rsb	r3, r5, #1
    c840:	f10d 0920 	add.w	r9, sp, #32
    c844:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
    c846:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    c84a:	4557      	cmp	r7, sl
    c84c:	d112      	bne.n	c874 <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
    c84e:	1b60      	subs	r0, r4, r5
    c850:	e649      	b.n	c4e6 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    c852:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    c854:	e7e5      	b.n	c822 <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    c856:	f810 3b01 	ldrb.w	r3, [r0], #1
    c85a:	0619      	lsls	r1, r3, #24
    c85c:	d508      	bpl.n	c870 <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
    c85e:	eb04 0e0c 	add.w	lr, r4, ip
    c862:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    c864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    c868:	f4ff ae3b 	bcc.w	c4e2 <cbvprintf_package+0x2e>
			*buf++ = pos;
    c86c:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    c870:	3201      	adds	r2, #1
    c872:	e7df      	b.n	c834 <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    c874:	f1b8 0f00 	cmp.w	r8, #0
    c878:	d003      	beq.n	c882 <cbvprintf_package+0x3ce>
    c87a:	f999 2000 	ldrsb.w	r2, [r9]
    c87e:	2a00      	cmp	r2, #0
    c880:	db17      	blt.n	c8b2 <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
    c882:	9b01      	ldr	r3, [sp, #4]
    c884:	b1d3      	cbz	r3, c8bc <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
    c886:	f81a 200b 	ldrb.w	r2, [sl, fp]
    c88a:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    c88e:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    c890:	9b02      	ldr	r3, [sp, #8]
    c892:	1898      	adds	r0, r3, r2
    c894:	4420      	add	r0, r4
    c896:	4286      	cmp	r6, r0
    c898:	f4ff ae23 	bcc.w	c4e2 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    c89c:	f899 0000 	ldrb.w	r0, [r9]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c8a0:	9900      	ldr	r1, [sp, #0]
    c8a2:	f804 0b01 	strb.w	r0, [r4], #1
    c8a6:	4620      	mov	r0, r4
    c8a8:	9203      	str	r2, [sp, #12]
    c8aa:	f01c fde2 	bl	29472 <memcpy>
		buf += size;
    c8ae:	9a03      	ldr	r2, [sp, #12]
    c8b0:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    c8b2:	f10a 0a01 	add.w	sl, sl, #1
    c8b6:	f109 0901 	add.w	r9, r9, #1
    c8ba:	e7c6      	b.n	c84a <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    c8bc:	f899 2000 	ldrb.w	r2, [r9]
    c8c0:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    c8c4:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    c8c6:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
    c8c8:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    c8ca:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    c8ce:	f7fc fd47 	bl	9360 <strlen>
    c8d2:	1c42      	adds	r2, r0, #1
    c8d4:	e7dc      	b.n	c890 <cbvprintf_package+0x3dc>
		return -EFAULT;
    c8d6:	f06f 000d 	mvn.w	r0, #13
    c8da:	e604      	b.n	c4e6 <cbvprintf_package+0x32>
    c8dc:	0002bd2c 	.word	0x0002bd2c
    c8e0:	00030a97 	.word	0x00030a97
    c8e4:	0002b339 	.word	0x0002b339
    c8e8:	0002bd95 	.word	0x0002bd95
    c8ec:	0002bdaa 	.word	0x0002bdaa

0000c8f0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    c8f0:	4b01      	ldr	r3, [pc, #4]	; (c8f8 <char_out+0x8>)
    c8f2:	681b      	ldr	r3, [r3, #0]
    c8f4:	4718      	bx	r3
    c8f6:	bf00      	nop
    c8f8:	200083f8 	.word	0x200083f8

0000c8fc <__printk_hook_install>:
	_char_out = fn;
    c8fc:	4b01      	ldr	r3, [pc, #4]	; (c904 <__printk_hook_install+0x8>)
    c8fe:	6018      	str	r0, [r3, #0]
}
    c900:	4770      	bx	lr
    c902:	bf00      	nop
    c904:	200083f8 	.word	0x200083f8

0000c908 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    c908:	b507      	push	{r0, r1, r2, lr}
    c90a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    c90c:	2100      	movs	r1, #0
    c90e:	4602      	mov	r2, r0
    c910:	9100      	str	r1, [sp, #0]
    c912:	4803      	ldr	r0, [pc, #12]	; (c920 <vprintk+0x18>)
    c914:	f000 fcb0 	bl	d278 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    c918:	b003      	add	sp, #12
    c91a:	f85d fb04 	ldr.w	pc, [sp], #4
    c91e:	bf00      	nop
    c920:	0000c8f1 	.word	0x0000c8f1

0000c924 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    c924:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    c926:	2500      	movs	r5, #0
{
    c928:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    c92a:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    c92e:	4604      	mov	r4, r0
    c930:	9500      	str	r5, [sp, #0]
    c932:	a903      	add	r1, sp, #12
    c934:	4805      	ldr	r0, [pc, #20]	; (c94c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    c936:	9505      	str	r5, [sp, #20]
    c938:	f000 fc9e 	bl	d278 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    c93c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    c940:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    c942:	bfb8      	it	lt
    c944:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    c946:	b007      	add	sp, #28
    c948:	bd30      	pop	{r4, r5, pc}
    c94a:	bf00      	nop
    c94c:	000245fd 	.word	0x000245fd

0000c950 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    c950:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    c952:	460c      	mov	r4, r1
    c954:	2900      	cmp	r1, #0
    c956:	d034      	beq.n	c9c2 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    c958:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c95a:	1f0b      	subs	r3, r1, #4
    c95c:	1a9b      	subs	r3, r3, r2
    c95e:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    c960:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    c964:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c966:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    c968:	07e8      	lsls	r0, r5, #31
    c96a:	d40d      	bmi.n	c988 <sys_heap_free+0x38>
    c96c:	23af      	movs	r3, #175	; 0xaf
    c96e:	4a15      	ldr	r2, [pc, #84]	; (c9c4 <sys_heap_free+0x74>)
    c970:	4915      	ldr	r1, [pc, #84]	; (c9c8 <sys_heap_free+0x78>)
    c972:	4816      	ldr	r0, [pc, #88]	; (c9cc <sys_heap_free+0x7c>)
    c974:	f018 f817 	bl	249a6 <assert_print>
    c978:	4621      	mov	r1, r4
    c97a:	4815      	ldr	r0, [pc, #84]	; (c9d0 <sys_heap_free+0x80>)
    c97c:	f018 f813 	bl	249a6 <assert_print>
    c980:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    c982:	4810      	ldr	r0, [pc, #64]	; (c9c4 <sys_heap_free+0x74>)
    c984:	f018 f808 	bl	24998 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    c988:	4610      	mov	r0, r2
    c98a:	f017 fe6e 	bl	2466a <chunk_size>
    c98e:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    c990:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    c994:	1b80      	subs	r0, r0, r6
    c996:	4281      	cmp	r1, r0
    c998:	d00b      	beq.n	c9b2 <sys_heap_free+0x62>
    c99a:	23b7      	movs	r3, #183	; 0xb7
    c99c:	4a09      	ldr	r2, [pc, #36]	; (c9c4 <sys_heap_free+0x74>)
    c99e:	490d      	ldr	r1, [pc, #52]	; (c9d4 <sys_heap_free+0x84>)
    c9a0:	480a      	ldr	r0, [pc, #40]	; (c9cc <sys_heap_free+0x7c>)
    c9a2:	f018 f800 	bl	249a6 <assert_print>
    c9a6:	4621      	mov	r1, r4
    c9a8:	480b      	ldr	r0, [pc, #44]	; (c9d8 <sys_heap_free+0x88>)
    c9aa:	f017 fffc 	bl	249a6 <assert_print>
    c9ae:	21b7      	movs	r1, #183	; 0xb7
    c9b0:	e7e7      	b.n	c982 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c9b2:	f025 0501 	bic.w	r5, r5, #1
    c9b6:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    c9b8:	4610      	mov	r0, r2
}
    c9ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    c9be:	f017 bf11 	b.w	247e4 <free_chunk>
}
    c9c2:	bd70      	pop	{r4, r5, r6, pc}
    c9c4:	0002bdd2 	.word	0x0002bdd2
    c9c8:	0002bdf3 	.word	0x0002bdf3
    c9cc:	0002b339 	.word	0x0002b339
    c9d0:	0002be04 	.word	0x0002be04
    c9d4:	0002be3c 	.word	0x0002be3c
    c9d8:	0002be62 	.word	0x0002be62

0000c9dc <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    c9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c9e0:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    c9e2:	400b      	ands	r3, r1
{
    c9e4:	460f      	mov	r7, r1
    c9e6:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    c9e8:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    c9ea:	d010      	beq.n	ca0e <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    c9ec:	f1c1 0900 	rsb	r9, r1, #0
    c9f0:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    c9f4:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    c9f6:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    c9f8:	2a04      	cmp	r2, #4
    c9fa:	bf28      	it	cs
    c9fc:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    c9fe:	4219      	tst	r1, r3
    ca00:	d10c      	bne.n	ca1c <sys_heap_aligned_alloc+0x40>
    ca02:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    ca04:	b9e4      	cbnz	r4, ca40 <sys_heap_aligned_alloc+0x64>
		return NULL;
    ca06:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ca08:	4628      	mov	r0, r5
    ca0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    ca0e:	2904      	cmp	r1, #4
    ca10:	d813      	bhi.n	ca3a <sys_heap_aligned_alloc+0x5e>
}
    ca12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    ca16:	4611      	mov	r1, r2
    ca18:	f017 bf15 	b.w	24846 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ca1c:	492c      	ldr	r1, [pc, #176]	; (cad0 <sys_heap_aligned_alloc+0xf4>)
    ca1e:	f44f 73a2 	mov.w	r3, #324	; 0x144
    ca22:	4a2c      	ldr	r2, [pc, #176]	; (cad4 <sys_heap_aligned_alloc+0xf8>)
    ca24:	482c      	ldr	r0, [pc, #176]	; (cad8 <sys_heap_aligned_alloc+0xfc>)
    ca26:	f017 ffbe 	bl	249a6 <assert_print>
    ca2a:	482c      	ldr	r0, [pc, #176]	; (cadc <sys_heap_aligned_alloc+0x100>)
    ca2c:	f017 ffbb 	bl	249a6 <assert_print>
    ca30:	f44f 71a2 	mov.w	r1, #324	; 0x144
    ca34:	4827      	ldr	r0, [pc, #156]	; (cad4 <sys_heap_aligned_alloc+0xf8>)
    ca36:	f017 ffaf 	bl	24998 <assert_post_action>
		rew = 0;
    ca3a:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    ca3c:	2204      	movs	r2, #4
    ca3e:	e7e1      	b.n	ca04 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    ca40:	68b3      	ldr	r3, [r6, #8]
    ca42:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    ca46:	d9de      	bls.n	ca06 <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ca48:	f104 010b 	add.w	r1, r4, #11
    ca4c:	4439      	add	r1, r7
    ca4e:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ca50:	4630      	mov	r0, r6
    ca52:	08c9      	lsrs	r1, r1, #3
    ca54:	f017 fe5f 	bl	24716 <alloc_chunk>
	if (c0 == 0) {
    ca58:	4680      	mov	r8, r0
    ca5a:	2800      	cmp	r0, #0
    ca5c:	d0d3      	beq.n	ca06 <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    ca5e:	f109 0504 	add.w	r5, r9, #4
    ca62:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    ca66:	1e7b      	subs	r3, r7, #1
    ca68:	4435      	add	r5, r6
    ca6a:	441d      	add	r5, r3
    ca6c:	427f      	negs	r7, r7
    ca6e:	403d      	ands	r5, r7
    ca70:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca74:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca76:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca78:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca7a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca7c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ca80:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ca82:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca86:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ca8a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ca8e:	d208      	bcs.n	caa2 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    ca90:	4601      	mov	r1, r0
    ca92:	463a      	mov	r2, r7
    ca94:	4630      	mov	r0, r6
    ca96:	f017 fe8b 	bl	247b0 <split_chunks>
		free_list_add(h, c0);
    ca9a:	4641      	mov	r1, r8
    ca9c:	4630      	mov	r0, r6
    ca9e:	f017 fde9 	bl	24674 <free_list_add>
	return c + chunk_size(h, c);
    caa2:	4639      	mov	r1, r7
    caa4:	4630      	mov	r0, r6
    caa6:	f017 fde0 	bl	2466a <chunk_size>
    caaa:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    caac:	4284      	cmp	r4, r0
    caae:	d207      	bcs.n	cac0 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    cab0:	4630      	mov	r0, r6
    cab2:	4622      	mov	r2, r4
    cab4:	f017 fe7c 	bl	247b0 <split_chunks>
		free_list_add(h, c_end);
    cab8:	4621      	mov	r1, r4
    caba:	4630      	mov	r0, r6
    cabc:	f017 fdda 	bl	24674 <free_list_add>
	void *cmem = &buf[c];
    cac0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cac4:	8873      	ldrh	r3, [r6, #2]
    cac6:	f043 0301 	orr.w	r3, r3, #1
    caca:	8073      	strh	r3, [r6, #2]
    cacc:	e79c      	b.n	ca08 <sys_heap_aligned_alloc+0x2c>
    cace:	bf00      	nop
    cad0:	0002be9e 	.word	0x0002be9e
    cad4:	0002bdd2 	.word	0x0002bdd2
    cad8:	0002b339 	.word	0x0002b339
    cadc:	0002beb9 	.word	0x0002beb9

0000cae0 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cae0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cae6:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cae8:	d30e      	bcc.n	cb08 <sys_heap_init+0x28>
    caea:	493a      	ldr	r1, [pc, #232]	; (cbd4 <sys_heap_init+0xf4>)
    caec:	f240 13eb 	movw	r3, #491	; 0x1eb
    caf0:	4a39      	ldr	r2, [pc, #228]	; (cbd8 <sys_heap_init+0xf8>)
    caf2:	483a      	ldr	r0, [pc, #232]	; (cbdc <sys_heap_init+0xfc>)
    caf4:	f017 ff57 	bl	249a6 <assert_print>
    caf8:	4839      	ldr	r0, [pc, #228]	; (cbe0 <sys_heap_init+0x100>)
    cafa:	f017 ff54 	bl	249a6 <assert_print>
    cafe:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    cb02:	4835      	ldr	r0, [pc, #212]	; (cbd8 <sys_heap_init+0xf8>)
    cb04:	f017 ff48 	bl	24998 <assert_post_action>
    cb08:	2a04      	cmp	r2, #4
    cb0a:	d80c      	bhi.n	cb26 <sys_heap_init+0x46>
    cb0c:	4935      	ldr	r1, [pc, #212]	; (cbe4 <sys_heap_init+0x104>)
    cb0e:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    cb12:	4a31      	ldr	r2, [pc, #196]	; (cbd8 <sys_heap_init+0xf8>)
    cb14:	4831      	ldr	r0, [pc, #196]	; (cbdc <sys_heap_init+0xfc>)
    cb16:	f017 ff46 	bl	249a6 <assert_print>
    cb1a:	4833      	ldr	r0, [pc, #204]	; (cbe8 <sys_heap_init+0x108>)
    cb1c:	f017 ff43 	bl	249a6 <assert_print>
    cb20:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    cb24:	e7ed      	b.n	cb02 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    cb26:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cb28:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cb2a:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cb2c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cb30:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cb34:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cb36:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cb38:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cb3c:	d80c      	bhi.n	cb58 <sys_heap_init+0x78>
    cb3e:	492b      	ldr	r1, [pc, #172]	; (cbec <sys_heap_init+0x10c>)
    cb40:	f240 13fb 	movw	r3, #507	; 0x1fb
    cb44:	4a24      	ldr	r2, [pc, #144]	; (cbd8 <sys_heap_init+0xf8>)
    cb46:	4825      	ldr	r0, [pc, #148]	; (cbdc <sys_heap_init+0xfc>)
    cb48:	f017 ff2d 	bl	249a6 <assert_print>
    cb4c:	4826      	ldr	r0, [pc, #152]	; (cbe8 <sys_heap_init+0x108>)
    cb4e:	f017 ff2a 	bl	249a6 <assert_print>
    cb52:	f240 11fb 	movw	r1, #507	; 0x1fb
    cb56:	e7d4      	b.n	cb02 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    cb58:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    cb5c:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    cb5e:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cb60:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cb64:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    cb68:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cb6a:	3107      	adds	r1, #7
    cb6c:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cb6e:	1c4d      	adds	r5, r1, #1
    cb70:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    cb72:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    cb74:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cb76:	d90c      	bls.n	cb92 <sys_heap_init+0xb2>
    cb78:	491d      	ldr	r1, [pc, #116]	; (cbf0 <sys_heap_init+0x110>)
    cb7a:	f44f 7303 	mov.w	r3, #524	; 0x20c
    cb7e:	4a16      	ldr	r2, [pc, #88]	; (cbd8 <sys_heap_init+0xf8>)
    cb80:	4816      	ldr	r0, [pc, #88]	; (cbdc <sys_heap_init+0xfc>)
    cb82:	f017 ff10 	bl	249a6 <assert_print>
    cb86:	4818      	ldr	r0, [pc, #96]	; (cbe8 <sys_heap_init+0x108>)
    cb88:	f017 ff0d 	bl	249a6 <assert_print>
    cb8c:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cb90:	e7b7      	b.n	cb02 <sys_heap_init+0x22>
    cb92:	f100 050c 	add.w	r5, r0, #12
    cb96:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    cb9a:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    cb9e:	42b5      	cmp	r5, r6
    cba0:	d1fb      	bne.n	cb9a <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cba2:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cba4:	f045 0501 	orr.w	r5, r5, #1
    cba8:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    cbaa:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    cbac:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cbb0:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    cbb2:	8004      	strh	r4, [r0, #0]
    cbb4:	8077      	strh	r7, [r6, #2]
    cbb6:	1886      	adds	r6, r0, r2
    cbb8:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    cbbc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    cbc0:	8074      	strh	r4, [r6, #2]
    cbc2:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cbc4:	885a      	ldrh	r2, [r3, #2]
    cbc6:	f042 0201 	orr.w	r2, r2, #1
    cbca:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    cbcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    cbd0:	f017 bd50 	b.w	24674 <free_list_add>
    cbd4:	0002bed6 	.word	0x0002bed6
    cbd8:	0002bdd2 	.word	0x0002bdd2
    cbdc:	0002b339 	.word	0x0002b339
    cbe0:	0002beec 	.word	0x0002beec
    cbe4:	0002bf03 	.word	0x0002bf03
    cbe8:	0002bf24 	.word	0x0002bf24
    cbec:	0002bf3d 	.word	0x0002bf3d
    cbf0:	0002bf66 	.word	0x0002bf66

0000cbf4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    cbf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbf8:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cbfa:	8ba3      	ldrh	r3, [r4, #28]
{
    cbfc:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    cbfe:	0719      	lsls	r1, r3, #28
{
    cc00:	4615      	mov	r5, r2
	if (processing) {
    cc02:	d412      	bmi.n	cc2a <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    cc04:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cc06:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    cc0a:	d164      	bne.n	ccd6 <process_event+0xe2>
			evt = process_recheck(mgr);
    cc0c:	4620      	mov	r0, r4
    cc0e:	f017 fe43 	bl	24898 <process_recheck>
		}

		if (evt == EVT_NOP) {
    cc12:	b188      	cbz	r0, cc38 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    cc14:	3801      	subs	r0, #1
    cc16:	2804      	cmp	r0, #4
    cc18:	f200 8134 	bhi.w	ce84 <process_event+0x290>
    cc1c:	e8df f010 	tbh	[pc, r0, lsl #1]
    cc20:	0132005b 	.word	0x0132005b
    cc24:	00d10081 	.word	0x00d10081
    cc28:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    cc2a:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    cc2c:	bf0c      	ite	eq
    cc2e:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cc32:	f043 0120 	orrne.w	r1, r3, #32
    cc36:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    cc38:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc3a:	4620      	mov	r0, r4
    cc3c:	f012 fca4 	bl	1f588 <z_spin_unlock_valid>
    cc40:	2800      	cmp	r0, #0
    cc42:	f040 819b 	bne.w	cf7c <process_event+0x388>
    cc46:	4998      	ldr	r1, [pc, #608]	; (cea8 <process_event+0x2b4>)
    cc48:	23c2      	movs	r3, #194	; 0xc2
    cc4a:	4a98      	ldr	r2, [pc, #608]	; (ceac <process_event+0x2b8>)
    cc4c:	4898      	ldr	r0, [pc, #608]	; (ceb0 <process_event+0x2bc>)
    cc4e:	f017 feaa 	bl	249a6 <assert_print>
    cc52:	4621      	mov	r1, r4
    cc54:	e0b0      	b.n	cdb8 <process_event+0x1c4>
    cc56:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    cc5a:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    cc5c:	2801      	cmp	r0, #1
    cc5e:	d81e      	bhi.n	cc9e <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    cc60:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    cc62:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    cc64:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    cc66:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    cc6a:	d114      	bne.n	cc96 <process_event+0xa2>
		*clients = mgr->clients;
    cc6c:	463a      	mov	r2, r7
    cc6e:	e003      	b.n	cc78 <process_event+0x84>
				mgr->refs += 1U;
    cc70:	8be0      	ldrh	r0, [r4, #30]
    cc72:	3001      	adds	r0, #1
    cc74:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    cc76:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    cc78:	2a00      	cmp	r2, #0
    cc7a:	d1f9      	bne.n	cc70 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cc7c:	f023 0307 	bic.w	r3, r3, #7
    cc80:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    cc84:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cc86:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cc88:	f017 fe06 	bl	24898 <process_recheck>
    cc8c:	b390      	cbz	r0, ccf4 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cc8e:	f042 0220 	orr.w	r2, r2, #32
    cc92:	83a2      	strh	r2, [r4, #28]
    cc94:	e02e      	b.n	ccf4 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cc96:	f023 0307 	bic.w	r3, r3, #7
    cc9a:	b29a      	uxth	r2, r3
}
    cc9c:	e7f2      	b.n	cc84 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    cc9e:	2a04      	cmp	r2, #4
    cca0:	d133      	bne.n	cd0a <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cca2:	f023 0307 	bic.w	r3, r3, #7
    cca6:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    cca8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ccaa:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    ccac:	f017 fdf4 	bl	24898 <process_recheck>
    ccb0:	b110      	cbz	r0, ccb8 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ccb2:	f042 0220 	orr.w	r2, r2, #32
    ccb6:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ccb8:	8ba3      	ldrh	r3, [r4, #28]
    ccba:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ccbe:	4589      	cmp	r9, r1
    ccc0:	f040 80ea 	bne.w	ce98 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ccc4:	8ba1      	ldrh	r1, [r4, #28]
    ccc6:	06ca      	lsls	r2, r1, #27
    ccc8:	f140 814f 	bpl.w	cf6a <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cccc:	f021 0310 	bic.w	r3, r1, #16
    ccd0:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    ccd2:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    ccd6:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ccda:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    ccdc:	f1b8 0f00 	cmp.w	r8, #0
    cce0:	dab9      	bge.n	cc56 <process_event+0x62>
	list->head = NULL;
    cce2:	2200      	movs	r2, #0
		*clients = mgr->clients;
    cce4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cce6:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    ccea:	e9c4 2200 	strd	r2, r2, [r4]
    ccee:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ccf2:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ccf4:	8ba3      	ldrh	r3, [r4, #28]
    ccf6:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ccfa:	4589      	cmp	r9, r1
    ccfc:	f040 80cd 	bne.w	ce9a <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    cd00:	2f00      	cmp	r7, #0
    cd02:	d0df      	beq.n	ccc4 <process_event+0xd0>
    cd04:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd06:	46b2      	mov	sl, r6
    cd08:	e044      	b.n	cd94 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    cd0a:	496a      	ldr	r1, [pc, #424]	; (ceb4 <process_event+0x2c0>)
    cd0c:	f240 131b 	movw	r3, #283	; 0x11b
    cd10:	4a69      	ldr	r2, [pc, #420]	; (ceb8 <process_event+0x2c4>)
    cd12:	4867      	ldr	r0, [pc, #412]	; (ceb0 <process_event+0x2bc>)
    cd14:	f017 fe47 	bl	249a6 <assert_print>
    cd18:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    cd1c:	4866      	ldr	r0, [pc, #408]	; (ceb8 <process_event+0x2c4>)
    cd1e:	f017 fe3b 	bl	24998 <assert_post_action>
    cd22:	b149      	cbz	r1, cd38 <process_event+0x144>
    cd24:	4965      	ldr	r1, [pc, #404]	; (cebc <process_event+0x2c8>)
    cd26:	f44f 73ab 	mov.w	r3, #342	; 0x156
    cd2a:	4a63      	ldr	r2, [pc, #396]	; (ceb8 <process_event+0x2c4>)
    cd2c:	4860      	ldr	r0, [pc, #384]	; (ceb0 <process_event+0x2bc>)
    cd2e:	f017 fe3a 	bl	249a6 <assert_print>
    cd32:	f44f 71ab 	mov.w	r1, #342	; 0x156
    cd36:	e7f1      	b.n	cd1c <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    cd38:	6823      	ldr	r3, [r4, #0]
    cd3a:	b94b      	cbnz	r3, cd50 <process_event+0x15c>
    cd3c:	4960      	ldr	r1, [pc, #384]	; (cec0 <process_event+0x2cc>)
    cd3e:	f240 1357 	movw	r3, #343	; 0x157
    cd42:	4a5d      	ldr	r2, [pc, #372]	; (ceb8 <process_event+0x2c4>)
    cd44:	485a      	ldr	r0, [pc, #360]	; (ceb0 <process_event+0x2bc>)
    cd46:	f017 fe2e 	bl	249a6 <assert_print>
    cd4a:	f240 1157 	movw	r1, #343	; 0x157
    cd4e:	e7e5      	b.n	cd1c <process_event+0x128>
			transit = mgr->transitions->start;
    cd50:	6923      	ldr	r3, [r4, #16]
    cd52:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    cd54:	b94e      	cbnz	r6, cd6a <process_event+0x176>
    cd56:	495b      	ldr	r1, [pc, #364]	; (cec4 <process_event+0x2d0>)
    cd58:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    cd5c:	4a56      	ldr	r2, [pc, #344]	; (ceb8 <process_event+0x2c4>)
    cd5e:	4854      	ldr	r0, [pc, #336]	; (ceb0 <process_event+0x2bc>)
    cd60:	f017 fe21 	bl	249a6 <assert_print>
    cd64:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    cd68:	e7d8      	b.n	cd1c <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd6a:	460f      	mov	r7, r1
		res = 0;
    cd6c:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd6e:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd72:	8ba3      	ldrh	r3, [r4, #28]
    cd74:	f023 0307 	bic.w	r3, r3, #7
    cd78:	f043 0306 	orr.w	r3, r3, #6
    cd7c:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd7e:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    cd80:	68a2      	ldr	r2, [r4, #8]
    cd82:	2a00      	cmp	r2, #0
    cd84:	f040 808b 	bne.w	ce9e <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    cd88:	2f00      	cmp	r7, #0
    cd8a:	f040 808b 	bne.w	cea4 <process_event+0x2b0>
		    || (transit != NULL)) {
    cd8e:	2e00      	cmp	r6, #0
    cd90:	d098      	beq.n	ccc4 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd92:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cd94:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    cd98:	f104 0b14 	add.w	fp, r4, #20
    cd9c:	4658      	mov	r0, fp
			mgr->flags = flags;
    cd9e:	83a3      	strh	r3, [r4, #28]
    cda0:	f012 fbf2 	bl	1f588 <z_spin_unlock_valid>
    cda4:	2800      	cmp	r0, #0
    cda6:	f040 8097 	bne.w	ced8 <process_event+0x2e4>
    cdaa:	493f      	ldr	r1, [pc, #252]	; (cea8 <process_event+0x2b4>)
    cdac:	23c2      	movs	r3, #194	; 0xc2
    cdae:	4a3f      	ldr	r2, [pc, #252]	; (ceac <process_event+0x2b8>)
    cdb0:	483f      	ldr	r0, [pc, #252]	; (ceb0 <process_event+0x2bc>)
    cdb2:	f017 fdf8 	bl	249a6 <assert_print>
    cdb6:	4659      	mov	r1, fp
    cdb8:	4843      	ldr	r0, [pc, #268]	; (cec8 <process_event+0x2d4>)
    cdba:	f017 fdf4 	bl	249a6 <assert_print>
    cdbe:	21c2      	movs	r1, #194	; 0xc2
    cdc0:	e0ae      	b.n	cf20 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    cdc2:	2902      	cmp	r1, #2
    cdc4:	d009      	beq.n	cdda <process_event+0x1e6>
    cdc6:	4941      	ldr	r1, [pc, #260]	; (cecc <process_event+0x2d8>)
    cdc8:	f240 135d 	movw	r3, #349	; 0x15d
    cdcc:	4a3a      	ldr	r2, [pc, #232]	; (ceb8 <process_event+0x2c4>)
    cdce:	4838      	ldr	r0, [pc, #224]	; (ceb0 <process_event+0x2bc>)
    cdd0:	f017 fde9 	bl	249a6 <assert_print>
    cdd4:	f240 115d 	movw	r1, #349	; 0x15d
    cdd8:	e7a0      	b.n	cd1c <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    cdda:	8be7      	ldrh	r7, [r4, #30]
    cddc:	b14f      	cbz	r7, cdf2 <process_event+0x1fe>
    cdde:	493c      	ldr	r1, [pc, #240]	; (ced0 <process_event+0x2dc>)
    cde0:	f44f 73af 	mov.w	r3, #350	; 0x15e
    cde4:	4a34      	ldr	r2, [pc, #208]	; (ceb8 <process_event+0x2c4>)
    cde6:	4832      	ldr	r0, [pc, #200]	; (ceb0 <process_event+0x2bc>)
    cde8:	f017 fddd 	bl	249a6 <assert_print>
    cdec:	f44f 71af 	mov.w	r1, #350	; 0x15e
    cdf0:	e794      	b.n	cd1c <process_event+0x128>
			transit = mgr->transitions->stop;
    cdf2:	6923      	ldr	r3, [r4, #16]
    cdf4:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    cdf6:	b94e      	cbnz	r6, ce0c <process_event+0x218>
    cdf8:	4932      	ldr	r1, [pc, #200]	; (cec4 <process_event+0x2d0>)
    cdfa:	f240 1361 	movw	r3, #353	; 0x161
    cdfe:	4a2e      	ldr	r2, [pc, #184]	; (ceb8 <process_event+0x2c4>)
    ce00:	482b      	ldr	r0, [pc, #172]	; (ceb0 <process_event+0x2bc>)
    ce02:	f017 fdd0 	bl	249a6 <assert_print>
    ce06:	f240 1161 	movw	r1, #353	; 0x161
    ce0a:	e787      	b.n	cd1c <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce0c:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    ce0e:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce10:	f023 0307 	bic.w	r3, r3, #7
    ce14:	f043 0304 	orr.w	r3, r3, #4
    ce18:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce1a:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce1e:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce20:	e7ae      	b.n	cd80 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    ce22:	2901      	cmp	r1, #1
    ce24:	d009      	beq.n	ce3a <process_event+0x246>
    ce26:	492b      	ldr	r1, [pc, #172]	; (ced4 <process_event+0x2e0>)
    ce28:	f44f 73b2 	mov.w	r3, #356	; 0x164
    ce2c:	4a22      	ldr	r2, [pc, #136]	; (ceb8 <process_event+0x2c4>)
    ce2e:	4820      	ldr	r0, [pc, #128]	; (ceb0 <process_event+0x2bc>)
    ce30:	f017 fdb9 	bl	249a6 <assert_print>
    ce34:	f44f 71b2 	mov.w	r1, #356	; 0x164
    ce38:	e770      	b.n	cd1c <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ce3a:	6823      	ldr	r3, [r4, #0]
    ce3c:	b94b      	cbnz	r3, ce52 <process_event+0x25e>
    ce3e:	4920      	ldr	r1, [pc, #128]	; (cec0 <process_event+0x2cc>)
    ce40:	f240 1365 	movw	r3, #357	; 0x165
    ce44:	4a1c      	ldr	r2, [pc, #112]	; (ceb8 <process_event+0x2c4>)
    ce46:	481a      	ldr	r0, [pc, #104]	; (ceb0 <process_event+0x2bc>)
    ce48:	f017 fdad 	bl	249a6 <assert_print>
    ce4c:	f240 1165 	movw	r1, #357	; 0x165
    ce50:	e764      	b.n	cd1c <process_event+0x128>
			transit = mgr->transitions->reset;
    ce52:	6923      	ldr	r3, [r4, #16]
    ce54:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    ce56:	b94e      	cbnz	r6, ce6c <process_event+0x278>
    ce58:	491a      	ldr	r1, [pc, #104]	; (cec4 <process_event+0x2d0>)
    ce5a:	f44f 73b4 	mov.w	r3, #360	; 0x168
    ce5e:	4a16      	ldr	r2, [pc, #88]	; (ceb8 <process_event+0x2c4>)
    ce60:	4813      	ldr	r0, [pc, #76]	; (ceb0 <process_event+0x2bc>)
    ce62:	f017 fda0 	bl	249a6 <assert_print>
    ce66:	f44f 71b4 	mov.w	r1, #360	; 0x168
    ce6a:	e757      	b.n	cd1c <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce6c:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce6e:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    ce70:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce72:	f023 0307 	bic.w	r3, r3, #7
    ce76:	f043 0305 	orr.w	r3, r3, #5
    ce7a:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce7c:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce80:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce82:	e77d      	b.n	cd80 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    ce84:	490b      	ldr	r1, [pc, #44]	; (ceb4 <process_event+0x2c0>)
    ce86:	f240 136b 	movw	r3, #363	; 0x16b
    ce8a:	4a0b      	ldr	r2, [pc, #44]	; (ceb8 <process_event+0x2c4>)
    ce8c:	4808      	ldr	r0, [pc, #32]	; (ceb0 <process_event+0x2bc>)
    ce8e:	f017 fd8a 	bl	249a6 <assert_print>
    ce92:	f240 116b 	movw	r1, #363	; 0x16b
    ce96:	e741      	b.n	cd1c <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    ce98:	2700      	movs	r7, #0
    ce9a:	2600      	movs	r6, #0
    ce9c:	e770      	b.n	cd80 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce9e:	f04f 0a01 	mov.w	sl, #1
    cea2:	e777      	b.n	cd94 <process_event+0x1a0>
    cea4:	4692      	mov	sl, r2
    cea6:	e775      	b.n	cd94 <process_event+0x1a0>
    cea8:	0002c061 	.word	0x0002c061
    ceac:	0002c034 	.word	0x0002c034
    ceb0:	0002b339 	.word	0x0002b339
    ceb4:	00030a97 	.word	0x00030a97
    ceb8:	0002bf91 	.word	0x0002bf91
    cebc:	0002bfb3 	.word	0x0002bfb3
    cec0:	0002bfbf 	.word	0x0002bfbf
    cec4:	0002bfe2 	.word	0x0002bfe2
    cec8:	0002c078 	.word	0x0002c078
    cecc:	0002bff9 	.word	0x0002bff9
    ced0:	0002c00f 	.word	0x0002c00f
    ced4:	0002c01e 	.word	0x0002c01e
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ced8:	f385 8811 	msr	BASEPRI, r5
    cedc:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cee0:	f1ba 0f00 	cmp.w	sl, #0
    cee4:	d11e      	bne.n	cf24 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    cee6:	2f00      	cmp	r7, #0
    cee8:	d12f      	bne.n	cf4a <process_event+0x356>
			if (transit != NULL) {
    ceea:	b116      	cbz	r6, cef2 <process_event+0x2fe>
				transit(mgr, transition_complete);
    ceec:	4620      	mov	r0, r4
    ceee:	4926      	ldr	r1, [pc, #152]	; (cf88 <process_event+0x394>)
    cef0:	47b0      	blx	r6
	__asm__ volatile(
    cef2:	f04f 0320 	mov.w	r3, #32
    cef6:	f3ef 8511 	mrs	r5, BASEPRI
    cefa:	f383 8812 	msr	BASEPRI_MAX, r3
    cefe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf02:	4658      	mov	r0, fp
    cf04:	f012 fb32 	bl	1f56c <z_spin_lock_valid>
    cf08:	bb38      	cbnz	r0, cf5a <process_event+0x366>
    cf0a:	2394      	movs	r3, #148	; 0x94
    cf0c:	4a1f      	ldr	r2, [pc, #124]	; (cf8c <process_event+0x398>)
    cf0e:	4920      	ldr	r1, [pc, #128]	; (cf90 <process_event+0x39c>)
    cf10:	4820      	ldr	r0, [pc, #128]	; (cf94 <process_event+0x3a0>)
    cf12:	f017 fd48 	bl	249a6 <assert_print>
    cf16:	4659      	mov	r1, fp
    cf18:	481f      	ldr	r0, [pc, #124]	; (cf98 <process_event+0x3a4>)
    cf1a:	f017 fd44 	bl	249a6 <assert_print>
    cf1e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cf20:	481a      	ldr	r0, [pc, #104]	; (cf8c <process_event+0x398>)
    cf22:	e6fc      	b.n	cd1e <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    cf24:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cf26:	2900      	cmp	r1, #0
    cf28:	d0dd      	beq.n	cee6 <process_event+0x2f2>
	return node->next;
    cf2a:	680d      	ldr	r5, [r1, #0]
    cf2c:	2900      	cmp	r1, #0
    cf2e:	d0da      	beq.n	cee6 <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    cf30:	4643      	mov	r3, r8
    cf32:	464a      	mov	r2, r9
    cf34:	4620      	mov	r0, r4
    cf36:	f8d1 a004 	ldr.w	sl, [r1, #4]
    cf3a:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cf3c:	b11d      	cbz	r5, cf46 <process_event+0x352>
    cf3e:	682b      	ldr	r3, [r5, #0]
    cf40:	4629      	mov	r1, r5
    cf42:	461d      	mov	r5, r3
    cf44:	e7f2      	b.n	cf2c <process_event+0x338>
    cf46:	462b      	mov	r3, r5
    cf48:	e7fa      	b.n	cf40 <process_event+0x34c>
    cf4a:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    cf4c:	4643      	mov	r3, r8
    cf4e:	464a      	mov	r2, r9
    cf50:	4620      	mov	r0, r4
    cf52:	683f      	ldr	r7, [r7, #0]
    cf54:	f017 fccc 	bl	248f0 <notify_one>
    cf58:	e7c5      	b.n	cee6 <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    cf5a:	4658      	mov	r0, fp
    cf5c:	f012 fb22 	bl	1f5a4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cf60:	8ba3      	ldrh	r3, [r4, #28]
    cf62:	f023 0308 	bic.w	r3, r3, #8
    cf66:	83a3      	strh	r3, [r4, #28]
    cf68:	e6ac      	b.n	ccc4 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    cf6a:	068b      	lsls	r3, r1, #26
    cf6c:	f57f ae64 	bpl.w	cc38 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    cf70:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cf74:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    cf76:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    cf7a:	e647      	b.n	cc0c <process_event+0x18>
	__asm__ volatile(
    cf7c:	f385 8811 	msr	BASEPRI, r5
    cf80:	f3bf 8f6f 	isb	sy
}
    cf84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf88:	0000cf9d 	.word	0x0000cf9d
    cf8c:	0002c034 	.word	0x0002c034
    cf90:	0002c08d 	.word	0x0002c08d
    cf94:	0002b339 	.word	0x0002b339
    cf98:	0002c0a2 	.word	0x0002c0a2

0000cf9c <transition_complete>:
{
    cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf9e:	4604      	mov	r4, r0
    cfa0:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    cfa2:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    cfa6:	f04f 0320 	mov.w	r3, #32
    cfaa:	f3ef 8711 	mrs	r7, BASEPRI
    cfae:	f383 8812 	msr	BASEPRI_MAX, r3
    cfb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cfb6:	4630      	mov	r0, r6
    cfb8:	f012 fad8 	bl	1f56c <z_spin_lock_valid>
    cfbc:	b968      	cbnz	r0, cfda <transition_complete+0x3e>
    cfbe:	2394      	movs	r3, #148	; 0x94
    cfc0:	4a0b      	ldr	r2, [pc, #44]	; (cff0 <transition_complete+0x54>)
    cfc2:	490c      	ldr	r1, [pc, #48]	; (cff4 <transition_complete+0x58>)
    cfc4:	480c      	ldr	r0, [pc, #48]	; (cff8 <transition_complete+0x5c>)
    cfc6:	f017 fcee 	bl	249a6 <assert_print>
    cfca:	4631      	mov	r1, r6
    cfcc:	480b      	ldr	r0, [pc, #44]	; (cffc <transition_complete+0x60>)
    cfce:	f017 fcea 	bl	249a6 <assert_print>
    cfd2:	2194      	movs	r1, #148	; 0x94
    cfd4:	4806      	ldr	r0, [pc, #24]	; (cff0 <transition_complete+0x54>)
    cfd6:	f017 fcdf 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
    cfda:	4630      	mov	r0, r6
    cfdc:	f012 fae2 	bl	1f5a4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    cfe0:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    cfe2:	463a      	mov	r2, r7
    cfe4:	4620      	mov	r0, r4
}
    cfe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    cfea:	2101      	movs	r1, #1
    cfec:	f7ff be02 	b.w	cbf4 <process_event>
    cff0:	0002c034 	.word	0x0002c034
    cff4:	0002c08d 	.word	0x0002c08d
    cff8:	0002b339 	.word	0x0002b339
    cffc:	0002c0a2 	.word	0x0002c0a2

0000d000 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    d000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d004:	4604      	mov	r4, r0
    d006:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    d008:	f017 fc62 	bl	248d0 <validate_args>

	if (rv < 0) {
    d00c:	1e05      	subs	r5, r0, #0
    d00e:	db67      	blt.n	d0e0 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d010:	f104 0914 	add.w	r9, r4, #20
    d014:	f04f 0320 	mov.w	r3, #32
    d018:	f3ef 8a11 	mrs	sl, BASEPRI
    d01c:	f383 8812 	msr	BASEPRI_MAX, r3
    d020:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d024:	4648      	mov	r0, r9
    d026:	f012 faa1 	bl	1f56c <z_spin_lock_valid>
    d02a:	4680      	mov	r8, r0
    d02c:	b960      	cbnz	r0, d048 <onoff_request+0x48>
    d02e:	2394      	movs	r3, #148	; 0x94
    d030:	4a37      	ldr	r2, [pc, #220]	; (d110 <onoff_request+0x110>)
    d032:	4938      	ldr	r1, [pc, #224]	; (d114 <onoff_request+0x114>)
    d034:	4838      	ldr	r0, [pc, #224]	; (d118 <onoff_request+0x118>)
    d036:	f017 fcb6 	bl	249a6 <assert_print>
    d03a:	4649      	mov	r1, r9
    d03c:	4837      	ldr	r0, [pc, #220]	; (d11c <onoff_request+0x11c>)
    d03e:	f017 fcb2 	bl	249a6 <assert_print>
    d042:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d044:	4832      	ldr	r0, [pc, #200]	; (d110 <onoff_request+0x110>)
    d046:	e040      	b.n	d0ca <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    d048:	4648      	mov	r0, r9
    d04a:	f012 faab 	bl	1f5a4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    d04e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d052:	8be3      	ldrh	r3, [r4, #30]
    d054:	8ba6      	ldrh	r6, [r4, #28]
    d056:	4293      	cmp	r3, r2
    d058:	f006 0607 	and.w	r6, r6, #7
    d05c:	d043      	beq.n	d0e6 <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    d05e:	2e02      	cmp	r6, #2
    d060:	d113      	bne.n	d08a <onoff_request+0x8a>
	rv = state;
    d062:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    d064:	3301      	adds	r3, #1
    d066:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d068:	4648      	mov	r0, r9
    d06a:	f012 fa8d 	bl	1f588 <z_spin_unlock_valid>
    d06e:	2800      	cmp	r0, #0
    d070:	d13f      	bne.n	d0f2 <onoff_request+0xf2>
    d072:	23c2      	movs	r3, #194	; 0xc2
    d074:	4a26      	ldr	r2, [pc, #152]	; (d110 <onoff_request+0x110>)
    d076:	492a      	ldr	r1, [pc, #168]	; (d120 <onoff_request+0x120>)
    d078:	4827      	ldr	r0, [pc, #156]	; (d118 <onoff_request+0x118>)
    d07a:	f017 fc94 	bl	249a6 <assert_print>
    d07e:	4649      	mov	r1, r9
    d080:	4828      	ldr	r0, [pc, #160]	; (d124 <onoff_request+0x124>)
    d082:	f017 fc90 	bl	249a6 <assert_print>
    d086:	21c2      	movs	r1, #194	; 0xc2
    d088:	e7dc      	b.n	d044 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    d08a:	2e06      	cmp	r6, #6
    d08c:	d813      	bhi.n	d0b6 <onoff_request+0xb6>
    d08e:	e8df f006 	tbb	[pc, r6]
    d092:	2d09      	.short	0x2d09
    d094:	04091212 	.word	0x04091212
    d098:	09          	.byte	0x09
    d099:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    d09a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    d09e:	f04f 0800 	mov.w	r8, #0
    d0a2:	e7e1      	b.n	d068 <onoff_request+0x68>
	parent->next = child;
    d0a4:	2300      	movs	r3, #0
    d0a6:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    d0a8:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d0aa:	b983      	cbnz	r3, d0ce <onoff_request+0xce>
	list->head = node;
    d0ac:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    d0b0:	b186      	cbz	r6, d0d4 <onoff_request+0xd4>
	rv = state;
    d0b2:	4635      	mov	r5, r6
    d0b4:	e7f3      	b.n	d09e <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d0b6:	491c      	ldr	r1, [pc, #112]	; (d128 <onoff_request+0x128>)
    d0b8:	4817      	ldr	r0, [pc, #92]	; (d118 <onoff_request+0x118>)
    d0ba:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d0be:	4a1b      	ldr	r2, [pc, #108]	; (d12c <onoff_request+0x12c>)
    d0c0:	f017 fc71 	bl	249a6 <assert_print>
    d0c4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    d0c8:	4818      	ldr	r0, [pc, #96]	; (d12c <onoff_request+0x12c>)
    d0ca:	f017 fc65 	bl	24998 <assert_post_action>
	parent->next = child;
    d0ce:	601f      	str	r7, [r3, #0]
	list->tail = node;
    d0d0:	6067      	str	r7, [r4, #4]
}
    d0d2:	e7ed      	b.n	d0b0 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    d0d4:	4652      	mov	r2, sl
    d0d6:	2102      	movs	r1, #2
    d0d8:	4620      	mov	r0, r4
    d0da:	f7ff fd8b 	bl	cbf4 <process_event>
    d0de:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    d0e0:	4628      	mov	r0, r5
    d0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    d0e6:	f06f 050a 	mvn.w	r5, #10
    d0ea:	e7d8      	b.n	d09e <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    d0ec:	f06f 0504 	mvn.w	r5, #4
    d0f0:	e7d5      	b.n	d09e <onoff_request+0x9e>
	__asm__ volatile(
    d0f2:	f38a 8811 	msr	BASEPRI, sl
    d0f6:	f3bf 8f6f 	isb	sy
		if (notify) {
    d0fa:	f1b8 0f00 	cmp.w	r8, #0
    d0fe:	d0ef      	beq.n	d0e0 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    d100:	2300      	movs	r3, #0
    d102:	4632      	mov	r2, r6
    d104:	4639      	mov	r1, r7
    d106:	4620      	mov	r0, r4
    d108:	f017 fbf2 	bl	248f0 <notify_one>
    d10c:	e7e8      	b.n	d0e0 <onoff_request+0xe0>
    d10e:	bf00      	nop
    d110:	0002c034 	.word	0x0002c034
    d114:	0002c08d 	.word	0x0002c08d
    d118:	0002b339 	.word	0x0002b339
    d11c:	0002c0a2 	.word	0x0002c0a2
    d120:	0002c061 	.word	0x0002c061
    d124:	0002c078 	.word	0x0002c078
    d128:	0002c01e 	.word	0x0002c01e
    d12c:	0002bf91 	.word	0x0002bf91

0000d130 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    d130:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    d132:	6842      	ldr	r2, [r0, #4]
    d134:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    d136:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    d13a:	2a02      	cmp	r2, #2
	notify->result = res;
    d13c:	6081      	str	r1, [r0, #8]
	switch (method) {
    d13e:	d00a      	beq.n	d156 <sys_notify_finalize+0x26>
    d140:	2a03      	cmp	r2, #3
    d142:	f04f 0100 	mov.w	r1, #0
    d146:	d003      	beq.n	d150 <sys_notify_finalize+0x20>
    d148:	2a01      	cmp	r2, #1
    d14a:	d10a      	bne.n	d162 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d14c:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d14e:	e006      	b.n	d15e <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    d150:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d152:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    d154:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    d156:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d158:	2200      	movs	r2, #0
    d15a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d15c:	b958      	cbnz	r0, d176 <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    d15e:	2000      	movs	r0, #0
    d160:	e7f8      	b.n	d154 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    d162:	4906      	ldr	r1, [pc, #24]	; (d17c <sys_notify_finalize+0x4c>)
    d164:	4806      	ldr	r0, [pc, #24]	; (d180 <sys_notify_finalize+0x50>)
    d166:	2345      	movs	r3, #69	; 0x45
    d168:	4a06      	ldr	r2, [pc, #24]	; (d184 <sys_notify_finalize+0x54>)
    d16a:	f017 fc1c 	bl	249a6 <assert_print>
    d16e:	2145      	movs	r1, #69	; 0x45
    d170:	4804      	ldr	r0, [pc, #16]	; (d184 <sys_notify_finalize+0x54>)
    d172:	f017 fc11 	bl	24998 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    d176:	f015 fbff 	bl	22978 <z_impl_k_poll_signal_raise>
    d17a:	e7f0      	b.n	d15e <sys_notify_finalize+0x2e>
    d17c:	00030a97 	.word	0x00030a97
    d180:	0002b339 	.word	0x0002b339
    d184:	0002c0ba 	.word	0x0002c0ba

0000d188 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    d188:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d18a:	4c09      	ldr	r4, [pc, #36]	; (d1b0 <crc8_ccitt+0x28>)
    d18c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    d18e:	4291      	cmp	r1, r2
    d190:	d100      	bne.n	d194 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    d192:	bd10      	pop	{r4, pc}
		val ^= p[i];
    d194:	f811 3b01 	ldrb.w	r3, [r1], #1
    d198:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d19a:	0903      	lsrs	r3, r0, #4
    d19c:	5ce3      	ldrb	r3, [r4, r3]
    d19e:	0100      	lsls	r0, r0, #4
    d1a0:	b2c0      	uxtb	r0, r0
    d1a2:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d1a4:	0918      	lsrs	r0, r3, #4
    d1a6:	5c20      	ldrb	r0, [r4, r0]
    d1a8:	011b      	lsls	r3, r3, #4
    d1aa:	b2db      	uxtb	r3, r3
    d1ac:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    d1ae:	e7ee      	b.n	d18e <crc8_ccitt+0x6>
    d1b0:	0002c0dd 	.word	0x0002c0dd

0000d1b4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    d1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1b6:	4602      	mov	r2, r0
    d1b8:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    d1ba:	270a      	movs	r7, #10
	size_t val = 0;
    d1bc:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    d1be:	4e07      	ldr	r6, [pc, #28]	; (d1dc <extract_decimal+0x28>)
    d1c0:	460b      	mov	r3, r1
    d1c2:	781c      	ldrb	r4, [r3, #0]
    d1c4:	3101      	adds	r1, #1
    d1c6:	5d35      	ldrb	r5, [r6, r4]
    d1c8:	076d      	lsls	r5, r5, #29
    d1ca:	d401      	bmi.n	d1d0 <extract_decimal+0x1c>
	}
	*str = sp;
    d1cc:	6013      	str	r3, [r2, #0]
	return val;
}
    d1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    d1d0:	fb07 4300 	mla	r3, r7, r0, r4
    d1d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d1d8:	e7f2      	b.n	d1c0 <extract_decimal+0xc>
    d1da:	bf00      	nop
    d1dc:	00030af9 	.word	0x00030af9

0000d1e0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    d1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1e4:	4615      	mov	r5, r2
    d1e6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    d1e8:	78d3      	ldrb	r3, [r2, #3]
    d1ea:	4a22      	ldr	r2, [pc, #136]	; (d274 <encode_uint+0x94>)
	switch (specifier) {
    d1ec:	2b6f      	cmp	r3, #111	; 0x6f
    d1ee:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    d1f2:	4680      	mov	r8, r0
    d1f4:	460f      	mov	r7, r1
    d1f6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    d1fa:	d029      	beq.n	d250 <encode_uint+0x70>
    d1fc:	d824      	bhi.n	d248 <encode_uint+0x68>
		return 10;
    d1fe:	2b58      	cmp	r3, #88	; 0x58
    d200:	bf0c      	ite	eq
    d202:	2610      	moveq	r6, #16
    d204:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    d206:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    d20a:	4632      	mov	r2, r6
    d20c:	2300      	movs	r3, #0
    d20e:	4640      	mov	r0, r8
    d210:	4639      	mov	r1, r7
    d212:	f7fb fe6d 	bl	8ef0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    d216:	2a09      	cmp	r2, #9
    d218:	b2d4      	uxtb	r4, r2
    d21a:	d81e      	bhi.n	d25a <encode_uint+0x7a>
    d21c:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    d21e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d220:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    d222:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d226:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    d22a:	d301      	bcc.n	d230 <encode_uint+0x50>
    d22c:	45d1      	cmp	r9, sl
    d22e:	d811      	bhi.n	d254 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    d230:	782b      	ldrb	r3, [r5, #0]
    d232:	069b      	lsls	r3, r3, #26
    d234:	d505      	bpl.n	d242 <encode_uint+0x62>
		if (radix == 8) {
    d236:	2e08      	cmp	r6, #8
    d238:	d115      	bne.n	d266 <encode_uint+0x86>
			conv->altform_0 = true;
    d23a:	78ab      	ldrb	r3, [r5, #2]
    d23c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    d240:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    d242:	4648      	mov	r0, r9
    d244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    d248:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    d24c:	2b70      	cmp	r3, #112	; 0x70
    d24e:	e7d7      	b.n	d200 <encode_uint+0x20>
	switch (specifier) {
    d250:	2608      	movs	r6, #8
    d252:	e7d8      	b.n	d206 <encode_uint+0x26>
		value /= radix;
    d254:	4680      	mov	r8, r0
    d256:	460f      	mov	r7, r1
    d258:	e7d7      	b.n	d20a <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d25a:	f1bb 0f01 	cmp.w	fp, #1
    d25e:	bf0c      	ite	eq
    d260:	3437      	addeq	r4, #55	; 0x37
    d262:	3457      	addne	r4, #87	; 0x57
    d264:	e7db      	b.n	d21e <encode_uint+0x3e>
		} else if (radix == 16) {
    d266:	2e10      	cmp	r6, #16
    d268:	d1eb      	bne.n	d242 <encode_uint+0x62>
			conv->altform_0c = true;
    d26a:	78ab      	ldrb	r3, [r5, #2]
    d26c:	f043 0310 	orr.w	r3, r3, #16
    d270:	e7e6      	b.n	d240 <encode_uint+0x60>
    d272:	bf00      	nop
    d274:	00030af9 	.word	0x00030af9

0000d278 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d27c:	4682      	mov	sl, r0
    d27e:	4617      	mov	r7, r2
    d280:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d282:	2500      	movs	r5, #0
{
    d284:	b097      	sub	sp, #92	; 0x5c
    d286:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d288:	7838      	ldrb	r0, [r7, #0]
    d28a:	b908      	cbnz	r0, d290 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d28c:	4628      	mov	r0, r5
    d28e:	e349      	b.n	d924 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    d290:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    d292:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    d294:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    d296:	d006      	beq.n	d2a6 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    d298:	9903      	ldr	r1, [sp, #12]
    d29a:	47d0      	blx	sl
    d29c:	2800      	cmp	r0, #0
    d29e:	f2c0 8341 	blt.w	d924 <z_cbvprintf_impl+0x6ac>
    d2a2:	3501      	adds	r5, #1
		if (bps == NULL) {
    d2a4:	e1f0      	b.n	d688 <z_cbvprintf_impl+0x410>
		} state = {
    d2a6:	2218      	movs	r2, #24
    d2a8:	2100      	movs	r1, #0
    d2aa:	a810      	add	r0, sp, #64	; 0x40
    d2ac:	f01c f91b 	bl	294e6 <memset>
	if (*sp == '%') {
    d2b0:	787b      	ldrb	r3, [r7, #1]
    d2b2:	2b25      	cmp	r3, #37	; 0x25
    d2b4:	f000 80a3 	beq.w	d3fe <z_cbvprintf_impl+0x186>
    d2b8:	2300      	movs	r3, #0
    d2ba:	4698      	mov	r8, r3
    d2bc:	469e      	mov	lr, r3
    d2be:	469c      	mov	ip, r3
    d2c0:	4618      	mov	r0, r3
    d2c2:	1c79      	adds	r1, r7, #1
    d2c4:	460e      	mov	r6, r1
		switch (*sp) {
    d2c6:	f811 2b01 	ldrb.w	r2, [r1], #1
    d2ca:	2a2b      	cmp	r2, #43	; 0x2b
    d2cc:	f000 80c6 	beq.w	d45c <z_cbvprintf_impl+0x1e4>
    d2d0:	f200 80bd 	bhi.w	d44e <z_cbvprintf_impl+0x1d6>
    d2d4:	2a20      	cmp	r2, #32
    d2d6:	f000 80c4 	beq.w	d462 <z_cbvprintf_impl+0x1ea>
    d2da:	2a23      	cmp	r2, #35	; 0x23
    d2dc:	f000 80c4 	beq.w	d468 <z_cbvprintf_impl+0x1f0>
    d2e0:	b12b      	cbz	r3, d2ee <z_cbvprintf_impl+0x76>
    d2e2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d2ea:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d2ee:	f1b8 0f00 	cmp.w	r8, #0
    d2f2:	d005      	beq.n	d300 <z_cbvprintf_impl+0x88>
    d2f4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d2f8:	f043 0320 	orr.w	r3, r3, #32
    d2fc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d300:	f1be 0f00 	cmp.w	lr, #0
    d304:	d005      	beq.n	d312 <z_cbvprintf_impl+0x9a>
    d306:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d30a:	f043 0310 	orr.w	r3, r3, #16
    d30e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d312:	f1bc 0f00 	cmp.w	ip, #0
    d316:	d005      	beq.n	d324 <z_cbvprintf_impl+0xac>
    d318:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d31c:	f043 0308 	orr.w	r3, r3, #8
    d320:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d324:	b128      	cbz	r0, d332 <z_cbvprintf_impl+0xba>
    d326:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d32a:	f043 0304 	orr.w	r3, r3, #4
    d32e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    d332:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d336:	f003 0144 	and.w	r1, r3, #68	; 0x44
    d33a:	2944      	cmp	r1, #68	; 0x44
    d33c:	d103      	bne.n	d346 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    d33e:	f36f 1386 	bfc	r3, #6, #1
    d342:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    d346:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d34a:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    d34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d350:	9609      	str	r6, [sp, #36]	; 0x24
    d352:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d356:	f040 808c 	bne.w	d472 <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    d35a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d35e:	f043 0301 	orr.w	r3, r3, #1
    d362:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    d366:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    d368:	781a      	ldrb	r2, [r3, #0]
    d36a:	2a2e      	cmp	r2, #46	; 0x2e
    d36c:	bf0c      	ite	eq
    d36e:	2101      	moveq	r1, #1
    d370:	2100      	movne	r1, #0
    d372:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d376:	f361 0241 	bfi	r2, r1, #1, #1
    d37a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    d37e:	d10c      	bne.n	d39a <z_cbvprintf_impl+0x122>
	++sp;
    d380:	1c5a      	adds	r2, r3, #1
    d382:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    d384:	785a      	ldrb	r2, [r3, #1]
    d386:	2a2a      	cmp	r2, #42	; 0x2a
    d388:	f040 8083 	bne.w	d492 <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    d38c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    d390:	3302      	adds	r3, #2
		conv->prec_star = true;
    d392:	f042 0204 	orr.w	r2, r2, #4
    d396:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    d39a:	781a      	ldrb	r2, [r3, #0]
    d39c:	2a6c      	cmp	r2, #108	; 0x6c
    d39e:	f000 80a4 	beq.w	d4ea <z_cbvprintf_impl+0x272>
    d3a2:	f200 8086 	bhi.w	d4b2 <z_cbvprintf_impl+0x23a>
    d3a6:	2a68      	cmp	r2, #104	; 0x68
    d3a8:	f000 808c 	beq.w	d4c4 <z_cbvprintf_impl+0x24c>
    d3ac:	2a6a      	cmp	r2, #106	; 0x6a
    d3ae:	f000 80a5 	beq.w	d4fc <z_cbvprintf_impl+0x284>
    d3b2:	2a4c      	cmp	r2, #76	; 0x4c
    d3b4:	f000 80aa 	beq.w	d50c <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    d3b8:	461a      	mov	r2, r3
    d3ba:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    d3be:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    d3c0:	9204      	str	r2, [sp, #16]
    d3c2:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    d3c6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    d3ca:	f200 8117 	bhi.w	d5fc <z_cbvprintf_impl+0x384>
    d3ce:	2b6d      	cmp	r3, #109	; 0x6d
    d3d0:	f200 80a9 	bhi.w	d526 <z_cbvprintf_impl+0x2ae>
    d3d4:	2b69      	cmp	r3, #105	; 0x69
    d3d6:	f200 8111 	bhi.w	d5fc <z_cbvprintf_impl+0x384>
    d3da:	2b57      	cmp	r3, #87	; 0x57
    d3dc:	f200 80be 	bhi.w	d55c <z_cbvprintf_impl+0x2e4>
    d3e0:	2b41      	cmp	r3, #65	; 0x41
    d3e2:	d003      	beq.n	d3ec <z_cbvprintf_impl+0x174>
    d3e4:	3b45      	subs	r3, #69	; 0x45
    d3e6:	2b02      	cmp	r3, #2
    d3e8:	f200 8108 	bhi.w	d5fc <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    d3ec:	2204      	movs	r2, #4
    d3ee:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d3f2:	f362 0302 	bfi	r3, r2, #0, #3
    d3f6:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    d3fa:	2301      	movs	r3, #1
			break;
    d3fc:	e0ca      	b.n	d594 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    d3fe:	1cba      	adds	r2, r7, #2
    d400:	9204      	str	r2, [sp, #16]
    d402:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    d406:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d40a:	07da      	lsls	r2, r3, #31
    d40c:	f140 80fd 	bpl.w	d60a <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    d410:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    d414:	f1b9 0f00 	cmp.w	r9, #0
    d418:	da07      	bge.n	d42a <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    d41a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    d41e:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    d422:	f042 0204 	orr.w	r2, r2, #4
    d426:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    d42a:	075e      	lsls	r6, r3, #29
    d42c:	f140 80f6 	bpl.w	d61c <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    d430:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    d434:	f1bb 0f00 	cmp.w	fp, #0
    d438:	f280 80f5 	bge.w	d626 <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    d43c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d440:	f36f 0341 	bfc	r3, #1, #1
    d444:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    d448:	f04f 3bff 	mov.w	fp, #4294967295
    d44c:	e0eb      	b.n	d626 <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    d44e:	2a2d      	cmp	r2, #45	; 0x2d
    d450:	d00d      	beq.n	d46e <z_cbvprintf_impl+0x1f6>
    d452:	2a30      	cmp	r2, #48	; 0x30
    d454:	f47f af44 	bne.w	d2e0 <z_cbvprintf_impl+0x68>
    d458:	2301      	movs	r3, #1
	} while (loop);
    d45a:	e733      	b.n	d2c4 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    d45c:	f04f 0c01 	mov.w	ip, #1
    d460:	e730      	b.n	d2c4 <z_cbvprintf_impl+0x4c>
    d462:	f04f 0e01 	mov.w	lr, #1
    d466:	e72d      	b.n	d2c4 <z_cbvprintf_impl+0x4c>
    d468:	f04f 0801 	mov.w	r8, #1
    d46c:	e72a      	b.n	d2c4 <z_cbvprintf_impl+0x4c>
    d46e:	2001      	movs	r0, #1
    d470:	e728      	b.n	d2c4 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    d472:	a809      	add	r0, sp, #36	; 0x24
    d474:	f7ff fe9e 	bl	d1b4 <extract_decimal>
	if (sp != wp) {
    d478:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d47a:	42b3      	cmp	r3, r6
    d47c:	f43f af74 	beq.w	d368 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    d480:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    d484:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    d486:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    d488:	f360 0241 	bfi	r2, r0, #1, #1
    d48c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    d490:	e76a      	b.n	d368 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    d492:	a809      	add	r0, sp, #36	; 0x24
    d494:	f7ff fe8e 	bl	d1b4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    d498:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    d49c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    d49e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d4a2:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    d4a6:	f362 0341 	bfi	r3, r2, #1, #1
    d4aa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    d4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4b0:	e773      	b.n	d39a <z_cbvprintf_impl+0x122>
	switch (*sp) {
    d4b2:	2a74      	cmp	r2, #116	; 0x74
    d4b4:	d026      	beq.n	d504 <z_cbvprintf_impl+0x28c>
    d4b6:	2a7a      	cmp	r2, #122	; 0x7a
    d4b8:	f47f af7e 	bne.w	d3b8 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    d4bc:	2106      	movs	r1, #6
    d4be:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d4c2:	e00c      	b.n	d4de <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    d4c4:	785a      	ldrb	r2, [r3, #1]
    d4c6:	2a68      	cmp	r2, #104	; 0x68
    d4c8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d4cc:	d106      	bne.n	d4dc <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    d4ce:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d4d0:	f361 02c6 	bfi	r2, r1, #3, #4
    d4d4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    d4d8:	3302      	adds	r3, #2
    d4da:	e76d      	b.n	d3b8 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    d4dc:	2102      	movs	r1, #2
    d4de:	f361 02c6 	bfi	r2, r1, #3, #4
    d4e2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    d4e6:	3301      	adds	r3, #1
    d4e8:	e766      	b.n	d3b8 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    d4ea:	785a      	ldrb	r2, [r3, #1]
    d4ec:	2a6c      	cmp	r2, #108	; 0x6c
    d4ee:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d4f2:	d101      	bne.n	d4f8 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    d4f4:	2104      	movs	r1, #4
    d4f6:	e7eb      	b.n	d4d0 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    d4f8:	2103      	movs	r1, #3
    d4fa:	e7f0      	b.n	d4de <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    d4fc:	2105      	movs	r1, #5
    d4fe:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d502:	e7ec      	b.n	d4de <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    d504:	2107      	movs	r1, #7
    d506:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d50a:	e7e8      	b.n	d4de <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    d50c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    d510:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    d514:	f022 0202 	bic.w	r2, r2, #2
    d518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    d51c:	f042 0202 	orr.w	r2, r2, #2
    d520:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    d524:	e7df      	b.n	d4e6 <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    d526:	3b6e      	subs	r3, #110	; 0x6e
    d528:	b2d9      	uxtb	r1, r3
    d52a:	2301      	movs	r3, #1
    d52c:	408b      	lsls	r3, r1
    d52e:	f240 4182 	movw	r1, #1154	; 0x482
    d532:	420b      	tst	r3, r1
    d534:	d138      	bne.n	d5a8 <z_cbvprintf_impl+0x330>
    d536:	f013 0f24 	tst.w	r3, #36	; 0x24
    d53a:	d152      	bne.n	d5e2 <z_cbvprintf_impl+0x36a>
    d53c:	07d8      	lsls	r0, r3, #31
    d53e:	d55d      	bpl.n	d5fc <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    d540:	2103      	movs	r1, #3
    d542:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d546:	f361 0302 	bfi	r3, r1, #0, #3
    d54a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d54e:	f002 0378 	and.w	r3, r2, #120	; 0x78
    d552:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    d556:	424b      	negs	r3, r1
    d558:	414b      	adcs	r3, r1
    d55a:	e01b      	b.n	d594 <z_cbvprintf_impl+0x31c>
    d55c:	2001      	movs	r0, #1
	switch (conv->specifier) {
    d55e:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    d562:	b2c9      	uxtb	r1, r1
    d564:	fa00 f101 	lsl.w	r1, r0, r1
    d568:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    d56c:	f47f af3e 	bne.w	d3ec <z_cbvprintf_impl+0x174>
    d570:	f640 0601 	movw	r6, #2049	; 0x801
    d574:	4231      	tst	r1, r6
    d576:	d11d      	bne.n	d5b4 <z_cbvprintf_impl+0x33c>
    d578:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    d57c:	d03e      	beq.n	d5fc <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    d57e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d582:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d586:	f002 0278 	and.w	r2, r2, #120	; 0x78
    d58a:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    d58c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d590:	d034      	beq.n	d5fc <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    d592:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    d594:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    d598:	f3c2 0140 	ubfx	r1, r2, #1, #1
    d59c:	430b      	orrs	r3, r1
    d59e:	f363 0241 	bfi	r2, r3, #1, #1
    d5a2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    d5a6:	e72e      	b.n	d406 <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    d5a8:	2102      	movs	r1, #2
    d5aa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d5ae:	f361 0302 	bfi	r3, r1, #0, #3
    d5b2:	e7e8      	b.n	d586 <z_cbvprintf_impl+0x30e>
    d5b4:	2002      	movs	r0, #2
    d5b6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5ba:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    d5be:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5c2:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    d5c4:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    d5c8:	bf02      	ittt	eq
    d5ca:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    d5ce:	f041 0101 	orreq.w	r1, r1, #1
    d5d2:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    d5d6:	2b63      	cmp	r3, #99	; 0x63
    d5d8:	d1db      	bne.n	d592 <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    d5da:	1e13      	subs	r3, r2, #0
    d5dc:	bf18      	it	ne
    d5de:	2301      	movne	r3, #1
    d5e0:	e7d8      	b.n	d594 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    d5e2:	2103      	movs	r1, #3
    d5e4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d5e8:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    d5ec:	f361 0302 	bfi	r3, r1, #0, #3
    d5f0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d5f4:	bf14      	ite	ne
    d5f6:	2301      	movne	r3, #1
    d5f8:	2300      	moveq	r3, #0
    d5fa:	e7cb      	b.n	d594 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    d5fc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d600:	f043 0301 	orr.w	r3, r3, #1
    d604:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    d608:	e7c3      	b.n	d592 <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    d60a:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    d60e:	2a00      	cmp	r2, #0
		int width = -1;
    d610:	bfac      	ite	ge
    d612:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    d616:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    d61a:	e706      	b.n	d42a <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    d61c:	0798      	lsls	r0, r3, #30
    d61e:	f57f af13 	bpl.w	d448 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    d622:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    d626:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    d628:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    d62c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    d630:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    d634:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    d638:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    d63a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    d63e:	d133      	bne.n	d6a8 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    d640:	1ecb      	subs	r3, r1, #3
    d642:	2b04      	cmp	r3, #4
    d644:	d804      	bhi.n	d650 <z_cbvprintf_impl+0x3d8>
    d646:	e8df f003 	tbb	[pc, r3]
    d64a:	4621      	.short	0x4621
    d64c:	2146      	.short	0x2146
    d64e:	21          	.byte	0x21
    d64f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    d650:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    d652:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    d654:	ea4f 72e3 	mov.w	r2, r3, asr #31
    d658:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d65c:	d11c      	bne.n	d698 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    d65e:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    d662:	17da      	asrs	r2, r3, #31
    d664:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    d668:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    d66a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d66e:	f013 0603 	ands.w	r6, r3, #3
    d672:	d050      	beq.n	d716 <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    d674:	463a      	mov	r2, r7
    d676:	4650      	mov	r0, sl
    d678:	9b04      	ldr	r3, [sp, #16]
    d67a:	9903      	ldr	r1, [sp, #12]
    d67c:	f017 f975 	bl	2496a <outs>
    d680:	2800      	cmp	r0, #0
    d682:	f2c0 814f 	blt.w	d924 <z_cbvprintf_impl+0x6ac>
    d686:	4405      	add	r5, r0
			continue;
    d688:	9f04      	ldr	r7, [sp, #16]
    d68a:	e5fd      	b.n	d288 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    d68c:	f854 3b04 	ldr.w	r3, [r4], #4
    d690:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    d692:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    d696:	e7e8      	b.n	d66a <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    d698:	2902      	cmp	r1, #2
    d69a:	d1e5      	bne.n	d668 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    d69c:	b21a      	sxth	r2, r3
    d69e:	f343 33c0 	sbfx	r3, r3, #15, #1
    d6a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d6a6:	e7df      	b.n	d668 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    d6a8:	2b02      	cmp	r3, #2
    d6aa:	d124      	bne.n	d6f6 <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    d6ac:	1ecb      	subs	r3, r1, #3
    d6ae:	2b04      	cmp	r3, #4
    d6b0:	d804      	bhi.n	d6bc <z_cbvprintf_impl+0x444>
    d6b2:	e8df f003 	tbb	[pc, r3]
    d6b6:	1018      	.short	0x1018
    d6b8:	1810      	.short	0x1810
    d6ba:	18          	.byte	0x18
    d6bb:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    d6bc:	2901      	cmp	r1, #1
    d6be:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    d6c2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    d6c6:	d014      	beq.n	d6f2 <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    d6c8:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    d6ca:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    d6ce:	d1cc      	bne.n	d66a <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    d6d0:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    d6d2:	9310      	str	r3, [sp, #64]	; 0x40
    d6d4:	e7c9      	b.n	d66a <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    d6d6:	3407      	adds	r4, #7
    d6d8:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    d6dc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    d6e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d6e4:	e7c1      	b.n	d66a <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    d6e6:	f854 3b04 	ldr.w	r3, [r4], #4
    d6ea:	9310      	str	r3, [sp, #64]	; 0x40
    d6ec:	2300      	movs	r3, #0
    d6ee:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    d6f0:	e7bb      	b.n	d66a <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    d6f2:	b2db      	uxtb	r3, r3
    d6f4:	e7cd      	b.n	d692 <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    d6f6:	2b04      	cmp	r3, #4
    d6f8:	d108      	bne.n	d70c <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    d6fa:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    d6fc:	f024 0407 	bic.w	r4, r4, #7
    d700:	e9d4 2300 	ldrd	r2, r3, [r4]
    d704:	3408      	adds	r4, #8
    d706:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d70a:	e7ae      	b.n	d66a <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    d70c:	2b03      	cmp	r3, #3
    d70e:	d1ac      	bne.n	d66a <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    d710:	f854 3b04 	ldr.w	r3, [r4], #4
    d714:	e7dd      	b.n	d6d2 <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    d716:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d71a:	2878      	cmp	r0, #120	; 0x78
    d71c:	d8b4      	bhi.n	d688 <z_cbvprintf_impl+0x410>
    d71e:	2862      	cmp	r0, #98	; 0x62
    d720:	d81c      	bhi.n	d75c <z_cbvprintf_impl+0x4e4>
    d722:	2825      	cmp	r0, #37	; 0x25
    d724:	f43f adb8 	beq.w	d298 <z_cbvprintf_impl+0x20>
    d728:	2858      	cmp	r0, #88	; 0x58
    d72a:	d1ad      	bne.n	d688 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    d72c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d730:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d734:	9300      	str	r3, [sp, #0]
    d736:	aa12      	add	r2, sp, #72	; 0x48
    d738:	ab0a      	add	r3, sp, #40	; 0x28
    d73a:	f7ff fd51 	bl	d1e0 <encode_uint>
			if (precision >= 0) {
    d73e:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    d742:	4607      	mov	r7, r0
			if (precision >= 0) {
    d744:	f280 8097 	bge.w	d876 <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    d748:	2f00      	cmp	r7, #0
    d74a:	d09d      	beq.n	d688 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d74c:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d750:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    d754:	2e00      	cmp	r6, #0
    d756:	d04e      	beq.n	d7f6 <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    d758:	3001      	adds	r0, #1
    d75a:	e04c      	b.n	d7f6 <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    d75c:	3863      	subs	r0, #99	; 0x63
    d75e:	2815      	cmp	r0, #21
    d760:	d892      	bhi.n	d688 <z_cbvprintf_impl+0x410>
    d762:	a201      	add	r2, pc, #4	; (adr r2, d768 <z_cbvprintf_impl+0x4f0>)
    d764:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    d768:	0000d7e7 	.word	0x0000d7e7
    d76c:	0000d84d 	.word	0x0000d84d
    d770:	0000d689 	.word	0x0000d689
    d774:	0000d689 	.word	0x0000d689
    d778:	0000d689 	.word	0x0000d689
    d77c:	0000d689 	.word	0x0000d689
    d780:	0000d84d 	.word	0x0000d84d
    d784:	0000d689 	.word	0x0000d689
    d788:	0000d689 	.word	0x0000d689
    d78c:	0000d689 	.word	0x0000d689
    d790:	0000d689 	.word	0x0000d689
    d794:	0000d8d5 	.word	0x0000d8d5
    d798:	0000d871 	.word	0x0000d871
    d79c:	0000d897 	.word	0x0000d897
    d7a0:	0000d689 	.word	0x0000d689
    d7a4:	0000d689 	.word	0x0000d689
    d7a8:	0000d7c1 	.word	0x0000d7c1
    d7ac:	0000d689 	.word	0x0000d689
    d7b0:	0000d871 	.word	0x0000d871
    d7b4:	0000d689 	.word	0x0000d689
    d7b8:	0000d689 	.word	0x0000d689
    d7bc:	0000d871 	.word	0x0000d871
			if (precision >= 0) {
    d7c0:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    d7c4:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    d7c6:	db0a      	blt.n	d7de <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    d7c8:	4659      	mov	r1, fp
    d7ca:	4638      	mov	r0, r7
    d7cc:	f01b ffe0 	bl	29790 <strnlen>
			bpe = bps + len;
    d7d0:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    d7d4:	2f00      	cmp	r7, #0
    d7d6:	f43f af57 	beq.w	d688 <z_cbvprintf_impl+0x410>
		char sign = 0;
    d7da:	2600      	movs	r6, #0
    d7dc:	e00b      	b.n	d7f6 <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    d7de:	4638      	mov	r0, r7
    d7e0:	f7fb fdbe 	bl	9360 <strlen>
    d7e4:	e7f4      	b.n	d7d0 <z_cbvprintf_impl+0x558>
		char sign = 0;
    d7e6:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    d7e8:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d7ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    d7ec:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d7f0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    d7f4:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    d7f6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d7fa:	f013 0210 	ands.w	r2, r3, #16
    d7fe:	9205      	str	r2, [sp, #20]
    d800:	f000 8083 	beq.w	d90a <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    d804:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    d806:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    d808:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    d80c:	bf48      	it	mi
    d80e:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    d810:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    d812:	bf48      	it	mi
    d814:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    d816:	f1b9 0f00 	cmp.w	r9, #0
    d81a:	f340 8090 	ble.w	d93e <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    d81e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    d822:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    d826:	f3c2 0380 	ubfx	r3, r2, #2, #1
    d82a:	0750      	lsls	r0, r2, #29
    d82c:	9306      	str	r3, [sp, #24]
    d82e:	f100 8086 	bmi.w	d93e <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    d832:	0651      	lsls	r1, r2, #25
    d834:	d579      	bpl.n	d92a <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    d836:	b13e      	cbz	r6, d848 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    d838:	4630      	mov	r0, r6
    d83a:	9903      	ldr	r1, [sp, #12]
    d83c:	47d0      	blx	sl
    d83e:	2800      	cmp	r0, #0
    d840:	db70      	blt.n	d924 <z_cbvprintf_impl+0x6ac>
    d842:	9b06      	ldr	r3, [sp, #24]
    d844:	3501      	adds	r5, #1
    d846:	461e      	mov	r6, r3
					pad = '0';
    d848:	2230      	movs	r2, #48	; 0x30
    d84a:	e06f      	b.n	d92c <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    d84c:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    d84e:	bf5a      	itte	pl
    d850:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    d854:	015e      	lslpl	r6, r3, #5
				sign = '+';
    d856:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    d858:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    d85c:	2b00      	cmp	r3, #0
    d85e:	f6bf af65 	bge.w	d72c <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    d862:	4252      	negs	r2, r2
    d864:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    d868:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    d86a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d86e:	e75d      	b.n	d72c <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    d870:	2600      	movs	r6, #0
    d872:	e75b      	b.n	d72c <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    d874:	2600      	movs	r6, #0
				conv->flag_zero = false;
    d876:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    d87a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d87e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    d880:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    d884:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    d886:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    d88a:	f67f af5d 	bls.w	d748 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    d88e:	ebab 0303 	sub.w	r3, fp, r3
    d892:	9313      	str	r3, [sp, #76]	; 0x4c
    d894:	e758      	b.n	d748 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    d896:	9810      	ldr	r0, [sp, #64]	; 0x40
    d898:	b380      	cbz	r0, d8fc <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d89a:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d89e:	ab0a      	add	r3, sp, #40	; 0x28
    d8a0:	2100      	movs	r1, #0
    d8a2:	f8cd 8000 	str.w	r8, [sp]
    d8a6:	aa12      	add	r2, sp, #72	; 0x48
    d8a8:	f7ff fc9a 	bl	d1e0 <encode_uint>
				conv->altform_0c = true;
    d8ac:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d8b0:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    d8b4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d8b8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    d8bc:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d8c0:	4607      	mov	r7, r0
				conv->altform_0c = true;
    d8c2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d8c6:	dad5      	bge.n	d874 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    d8c8:	2800      	cmp	r0, #0
    d8ca:	f43f aedd 	beq.w	d688 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d8ce:	eba8 0000 	sub.w	r0, r8, r0
    d8d2:	e782      	b.n	d7da <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    d8d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    d8d6:	2907      	cmp	r1, #7
    d8d8:	f63f aed6 	bhi.w	d688 <z_cbvprintf_impl+0x410>
    d8dc:	e8df f001 	tbb	[pc, r1]
    d8e0:	0c06040c 	.word	0x0c06040c
    d8e4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    d8e8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    d8ea:	e6cd      	b.n	d688 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    d8ec:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    d8ee:	e6cb      	b.n	d688 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    d8f0:	17ea      	asrs	r2, r5, #31
    d8f2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    d8f6:	e6c7      	b.n	d688 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    d8f8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    d8fa:	e6c5      	b.n	d688 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    d8fc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d9bc <z_cbvprintf_impl+0x744>
		char sign = 0;
    d900:	4606      	mov	r6, r0
    d902:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    d906:	2005      	movs	r0, #5
    d908:	e775      	b.n	d7f6 <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    d90a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    d90c:	bf48      	it	mi
    d90e:	3001      	addmi	r0, #1
    d910:	e779      	b.n	d806 <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    d912:	4610      	mov	r0, r2
    d914:	9307      	str	r3, [sp, #28]
    d916:	9206      	str	r2, [sp, #24]
    d918:	9903      	ldr	r1, [sp, #12]
    d91a:	47d0      	blx	sl
    d91c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d920:	2800      	cmp	r0, #0
    d922:	da04      	bge.n	d92e <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    d924:	b017      	add	sp, #92	; 0x5c
    d926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    d92a:	2220      	movs	r2, #32
					pad = '0';
    d92c:	464b      	mov	r3, r9
				while (width-- > 0) {
    d92e:	4619      	mov	r1, r3
    d930:	2900      	cmp	r1, #0
    d932:	f103 33ff 	add.w	r3, r3, #4294967295
    d936:	dcec      	bgt.n	d912 <z_cbvprintf_impl+0x69a>
    d938:	444d      	add	r5, r9
    d93a:	4699      	mov	r9, r3
    d93c:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    d93e:	b12e      	cbz	r6, d94c <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    d940:	4630      	mov	r0, r6
    d942:	9903      	ldr	r1, [sp, #12]
    d944:	47d0      	blx	sl
    d946:	2800      	cmp	r0, #0
    d948:	dbec      	blt.n	d924 <z_cbvprintf_impl+0x6ac>
    d94a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    d94c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d950:	06da      	lsls	r2, r3, #27
    d952:	d401      	bmi.n	d958 <z_cbvprintf_impl+0x6e0>
    d954:	071b      	lsls	r3, r3, #28
    d956:	d505      	bpl.n	d964 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    d958:	2030      	movs	r0, #48	; 0x30
    d95a:	9903      	ldr	r1, [sp, #12]
    d95c:	47d0      	blx	sl
    d95e:	2800      	cmp	r0, #0
    d960:	dbe0      	blt.n	d924 <z_cbvprintf_impl+0x6ac>
    d962:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    d964:	9b05      	ldr	r3, [sp, #20]
    d966:	b133      	cbz	r3, d976 <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    d968:	9903      	ldr	r1, [sp, #12]
    d96a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d96e:	47d0      	blx	sl
    d970:	2800      	cmp	r0, #0
    d972:	dbd7      	blt.n	d924 <z_cbvprintf_impl+0x6ac>
    d974:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d976:	44ab      	add	fp, r5
    d978:	e005      	b.n	d986 <z_cbvprintf_impl+0x70e>
				OUTC('0');
    d97a:	2030      	movs	r0, #48	; 0x30
    d97c:	9903      	ldr	r1, [sp, #12]
    d97e:	47d0      	blx	sl
    d980:	2800      	cmp	r0, #0
    d982:	dbcf      	blt.n	d924 <z_cbvprintf_impl+0x6ac>
    d984:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d986:	ebab 0305 	sub.w	r3, fp, r5
    d98a:	2b00      	cmp	r3, #0
    d98c:	dcf5      	bgt.n	d97a <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    d98e:	4643      	mov	r3, r8
    d990:	463a      	mov	r2, r7
    d992:	4650      	mov	r0, sl
    d994:	9903      	ldr	r1, [sp, #12]
    d996:	f016 ffe8 	bl	2496a <outs>
    d99a:	2800      	cmp	r0, #0
    d99c:	dbc2      	blt.n	d924 <z_cbvprintf_impl+0x6ac>
    d99e:	4405      	add	r5, r0
		while (width > 0) {
    d9a0:	44a9      	add	r9, r5
    d9a2:	eba9 0305 	sub.w	r3, r9, r5
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	f77f ae6e 	ble.w	d688 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    d9ac:	2020      	movs	r0, #32
    d9ae:	9903      	ldr	r1, [sp, #12]
    d9b0:	47d0      	blx	sl
    d9b2:	2800      	cmp	r0, #0
    d9b4:	dbb6      	blt.n	d924 <z_cbvprintf_impl+0x6ac>
    d9b6:	3501      	adds	r5, #1
			--width;
    d9b8:	e7f3      	b.n	d9a2 <z_cbvprintf_impl+0x72a>
    d9ba:	bf00      	nop
    d9bc:	0002c0f2 	.word	0x0002c0f2

0000d9c0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    d9c0:	b148      	cbz	r0, d9d6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    d9c2:	4b05      	ldr	r3, [pc, #20]	; (d9d8 <arch_busy_wait+0x18>)
    d9c4:	4a05      	ldr	r2, [pc, #20]	; (d9dc <arch_busy_wait+0x1c>)
    d9c6:	681b      	ldr	r3, [r3, #0]
    d9c8:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    d9cc:	4358      	muls	r0, r3
    d9ce:	4b04      	ldr	r3, [pc, #16]	; (d9e0 <arch_busy_wait+0x20>)
    d9d0:	f043 0301 	orr.w	r3, r3, #1
    d9d4:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    d9d6:	4770      	bx	lr
    d9d8:	20008684 	.word	0x20008684
    d9dc:	000f4240 	.word	0x000f4240
    d9e0:	0002a560 	.word	0x0002a560

0000d9e4 <z_log_msg_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    d9e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
    d9e6:	ab0b      	add	r3, sp, #44	; 0x2c
    d9e8:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    d9ea:	9303      	str	r3, [sp, #12]
    d9ec:	4b05      	ldr	r3, [pc, #20]	; (da04 <z_log_msg_runtime_create.constprop.0+0x20>)
    d9ee:	2201      	movs	r2, #1
    d9f0:	9302      	str	r3, [sp, #8]
    d9f2:	2300      	movs	r3, #0
    d9f4:	4618      	mov	r0, r3
    d9f6:	e9cd 3300 	strd	r3, r3, [sp]
    d9fa:	f000 fb09 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
	z_log_msg_runtime_vcreate(domain_id, source, level,
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    d9fe:	b007      	add	sp, #28
    da00:	f85d fb04 	ldr.w	pc, [sp], #4
    da04:	0002c0f7 	.word	0x0002c0f7

0000da08 <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    da08:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    da0a:	b570      	push	{r4, r5, r6, lr}
    da0c:	4605      	mov	r5, r0
    da0e:	461e      	mov	r6, r3
    da10:	4608      	mov	r0, r1
    da12:	d90b      	bls.n	da2c <ppi_ipc_to_rtc.isra.0+0x24>
    da14:	491d      	ldr	r1, [pc, #116]	; (da8c <ppi_ipc_to_rtc.isra.0+0x84>)
    da16:	481e      	ldr	r0, [pc, #120]	; (da90 <ppi_ipc_to_rtc.isra.0+0x88>)
    da18:	f240 13e7 	movw	r3, #487	; 0x1e7
    da1c:	4a1d      	ldr	r2, [pc, #116]	; (da94 <ppi_ipc_to_rtc.isra.0+0x8c>)
    da1e:	f016 ffc2 	bl	249a6 <assert_print>
    da22:	f240 11e7 	movw	r1, #487	; 0x1e7
    da26:	481b      	ldr	r0, [pc, #108]	; (da94 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    da28:	f016 ffb6 	bl	24998 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    da2c:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    da2e:	f00e f917 	bl	1bc60 <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    da32:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    da36:	b1ae      	cbz	r6, da64 <ppi_ipc_to_rtc.isra.0+0x5c>
    da38:	b950      	cbnz	r0, da50 <ppi_ipc_to_rtc.isra.0+0x48>
    da3a:	4917      	ldr	r1, [pc, #92]	; (da98 <ppi_ipc_to_rtc.isra.0+0x90>)
    da3c:	f240 234e 	movw	r3, #590	; 0x24e
    da40:	4a16      	ldr	r2, [pc, #88]	; (da9c <ppi_ipc_to_rtc.isra.0+0x94>)
    da42:	4813      	ldr	r0, [pc, #76]	; (da90 <ppi_ipc_to_rtc.isra.0+0x88>)
    da44:	f016 ffaf 	bl	249a6 <assert_print>
    da48:	f240 214e 	movw	r1, #590	; 0x24e
    da4c:	4813      	ldr	r0, [pc, #76]	; (da9c <ppi_ipc_to_rtc.isra.0+0x94>)
    da4e:	e7eb      	b.n	da28 <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    da50:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    da54:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    da58:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    da5c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    da60:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    da62:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    da64:	b948      	cbnz	r0, da7a <ppi_ipc_to_rtc.isra.0+0x72>
    da66:	490c      	ldr	r1, [pc, #48]	; (da98 <ppi_ipc_to_rtc.isra.0+0x90>)
    da68:	f240 2363 	movw	r3, #611	; 0x263
    da6c:	4a0b      	ldr	r2, [pc, #44]	; (da9c <ppi_ipc_to_rtc.isra.0+0x94>)
    da6e:	4808      	ldr	r0, [pc, #32]	; (da90 <ppi_ipc_to_rtc.isra.0+0x88>)
    da70:	f016 ff99 	bl	249a6 <assert_print>
    da74:	f240 2163 	movw	r1, #611	; 0x263
    da78:	e7e8      	b.n	da4c <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    da7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    da7e:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    da82:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    da86:	6016      	str	r6, [r2, #0]
    da88:	e7eb      	b.n	da62 <ppi_ipc_to_rtc.isra.0+0x5a>
    da8a:	bf00      	nop
    da8c:	0002c151 	.word	0x0002c151
    da90:	0002b339 	.word	0x0002b339
    da94:	0002c11f 	.word	0x0002c11f
    da98:	0002c194 	.word	0x0002c194
    da9c:	0002c15c 	.word	0x0002c15c

0000daa0 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    daa0:	b570      	push	{r4, r5, r6, lr}
    daa2:	b086      	sub	sp, #24
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    daa4:	a805      	add	r0, sp, #20
    daa6:	f00e ff8f 	bl	1c9c8 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    daaa:	4b25      	ldr	r3, [pc, #148]	; (db40 <sync_rtc_setup+0xa0>)
    daac:	4298      	cmp	r0, r3
    daae:	d143      	bne.n	db38 <sync_rtc_setup+0x98>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    dab0:	f00e faca 	bl	1c048 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    dab4:	1e04      	subs	r4, r0, #0
    dab6:	da0f      	bge.n	dad8 <sync_rtc_setup+0x38>
		nrfx_dppi_channel_free(channels.ch.ppi);
    dab8:	f89d 0014 	ldrb.w	r0, [sp, #20]
    dabc:	f00e ff8a 	bl	1c9d4 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    dac0:	4b20      	ldr	r3, [pc, #128]	; (db44 <sync_rtc_setup+0xa4>)
    dac2:	2201      	movs	r2, #1
    dac4:	9302      	str	r3, [sp, #8]
    dac6:	2300      	movs	r3, #0
    dac8:	491f      	ldr	r1, [pc, #124]	; (db48 <sync_rtc_setup+0xa8>)
    daca:	4618      	mov	r0, r3
    dacc:	e9cd 3300 	strd	r3, r3, [sp]
    dad0:	9403      	str	r4, [sp, #12]
    dad2:	f7ff ff87 	bl	d9e4 <z_log_msg_runtime_create.constprop.0>
	}

	return rv;
    dad6:	e02c      	b.n	db32 <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    dad8:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    dadc:	4d1b      	ldr	r5, [pc, #108]	; (db4c <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    dade:	f88d 4015 	strb.w	r4, [sp, #21]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    dae2:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    dae4:	f8ad 3016 	strh.w	r3, [sp, #22]
    dae8:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    daea:	9b05      	ldr	r3, [sp, #20]
    daec:	b914      	cbnz	r4, daf4 <sync_rtc_setup+0x54>
		return -ENOSYS;
    daee:	f06f 0457 	mvn.w	r4, #87	; 0x57
    daf2:	e7e5      	b.n	dac0 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    daf4:	2108      	movs	r1, #8
    daf6:	4628      	mov	r0, r5
    daf8:	4a15      	ldr	r2, [pc, #84]	; (db50 <sync_rtc_setup+0xb0>)
    dafa:	47a0      	blx	r4
	if (err < 0) {
    dafc:	1e04      	subs	r4, r0, #0
    dafe:	dbdf      	blt.n	dac0 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    db00:	6933      	ldr	r3, [r6, #16]
    db02:	2b00      	cmp	r3, #0
    db04:	d0f3      	beq.n	daee <sync_rtc_setup+0x4e>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    db06:	2201      	movs	r2, #1
    db08:	2108      	movs	r1, #8
    db0a:	4628      	mov	r0, r5
    db0c:	4798      	blx	r3
	if (rv < 0) {
    db0e:	1e04      	subs	r4, r0, #0
    db10:	dbd6      	blt.n	dac0 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    db12:	2301      	movs	r3, #1
    db14:	f89d 0014 	ldrb.w	r0, [sp, #20]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    db18:	4a0e      	ldr	r2, [pc, #56]	; (db54 <sync_rtc_setup+0xb4>)
    db1a:	fa03 f100 	lsl.w	r1, r3, r0
    db1e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    db22:	f89d 2017 	ldrb.w	r2, [sp, #23]
    db26:	f89d 1015 	ldrb.w	r1, [sp, #21]
    db2a:	f7ff ff6d 	bl	da08 <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    db2e:	2c00      	cmp	r4, #0
    db30:	d1c6      	bne.n	dac0 <sync_rtc_setup+0x20>
}
    db32:	4620      	mov	r0, r4
    db34:	b006      	add	sp, #24
    db36:	bd70      	pop	{r4, r5, r6, pc}
		rv = -ENODEV;
    db38:	f06f 0412 	mvn.w	r4, #18
    db3c:	e7c0      	b.n	dac0 <sync_rtc_setup+0x20>
    db3e:	bf00      	nop
    db40:	0bad0000 	.word	0x0bad0000
    db44:	0002c0f7 	.word	0x0002c0f7
    db48:	0002a480 	.word	0x0002a480
    db4c:	00029ec8 	.word	0x00029ec8
    db50:	0000dc09 	.word	0x0000dc09
    db54:	40017000 	.word	0x40017000

0000db58 <rtc_cb>:
{
    db58:	b570      	push	{r4, r5, r6, lr}
    db5a:	9e04      	ldr	r6, [sp, #16]
    db5c:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    db60:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    db62:	f3c6 2607 	ubfx	r6, r6, #8, #8
    db66:	4630      	mov	r0, r6
    db68:	f00e f860 	bl	1bc2c <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    db6c:	2c0f      	cmp	r4, #15
    db6e:	d90b      	bls.n	db88 <rtc_cb+0x30>
    db70:	491b      	ldr	r1, [pc, #108]	; (dbe0 <rtc_cb+0x88>)
    db72:	481c      	ldr	r0, [pc, #112]	; (dbe4 <rtc_cb+0x8c>)
    db74:	f240 13e1 	movw	r3, #481	; 0x1e1
    db78:	4a1b      	ldr	r2, [pc, #108]	; (dbe8 <rtc_cb+0x90>)
    db7a:	f016 ff14 	bl	249a6 <assert_print>
    db7e:	f240 11e1 	movw	r1, #481	; 0x1e1
    db82:	4819      	ldr	r0, [pc, #100]	; (dbe8 <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    db84:	f016 ff08 	bl	24998 <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    db88:	00a4      	lsls	r4, r4, #2
    db8a:	b2e4      	uxtb	r4, r4
    db8c:	b950      	cbnz	r0, dba4 <rtc_cb+0x4c>
    db8e:	4917      	ldr	r1, [pc, #92]	; (dbec <rtc_cb+0x94>)
    db90:	4814      	ldr	r0, [pc, #80]	; (dbe4 <rtc_cb+0x8c>)
    db92:	f44f 7317 	mov.w	r3, #604	; 0x25c
    db96:	4a16      	ldr	r2, [pc, #88]	; (dbf0 <rtc_cb+0x98>)
    db98:	f016 ff05 	bl	249a6 <assert_print>
    db9c:	f44f 7117 	mov.w	r1, #604	; 0x25c
    dba0:	4813      	ldr	r0, [pc, #76]	; (dbf0 <rtc_cb+0x98>)
    dba2:	e7ef      	b.n	db84 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    dba4:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    dba6:	4b13      	ldr	r3, [pc, #76]	; (dbf4 <rtc_cb+0x9c>)
    dba8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    dbac:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    dbae:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    dbb0:	4a11      	ldr	r2, [pc, #68]	; (dbf8 <rtc_cb+0xa0>)
    dbb2:	40ab      	lsls	r3, r5
    dbb4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    dbb8:	4630      	mov	r0, r6
    dbba:	f00e fa63 	bl	1c084 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    dbbe:	4628      	mov	r0, r5
    dbc0:	f00e ff08 	bl	1c9d4 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    dbc4:	4b0d      	ldr	r3, [pc, #52]	; (dbfc <rtc_cb+0xa4>)
    dbc6:	4298      	cmp	r0, r3
    dbc8:	d008      	beq.n	dbdc <rtc_cb+0x84>
    dbca:	490d      	ldr	r1, [pc, #52]	; (dc00 <rtc_cb+0xa8>)
    dbcc:	4805      	ldr	r0, [pc, #20]	; (dbe4 <rtc_cb+0x8c>)
    dbce:	2374      	movs	r3, #116	; 0x74
    dbd0:	4a0c      	ldr	r2, [pc, #48]	; (dc04 <rtc_cb+0xac>)
    dbd2:	f016 fee8 	bl	249a6 <assert_print>
    dbd6:	2174      	movs	r1, #116	; 0x74
    dbd8:	480a      	ldr	r0, [pc, #40]	; (dc04 <rtc_cb+0xac>)
    dbda:	e7d3      	b.n	db84 <rtc_cb+0x2c>
}
    dbdc:	bd70      	pop	{r4, r5, r6, pc}
    dbde:	bf00      	nop
    dbe0:	0002c151 	.word	0x0002c151
    dbe4:	0002b339 	.word	0x0002b339
    dbe8:	0002c11f 	.word	0x0002c11f
    dbec:	0002c198 	.word	0x0002c198
    dbf0:	0002c15c 	.word	0x0002c15c
    dbf4:	4002a080 	.word	0x4002a080
    dbf8:	40017000 	.word	0x40017000
    dbfc:	0bad0000 	.word	0x0bad0000
    dc00:	0002c1d3 	.word	0x0002c1d3
    dc04:	0002c19c 	.word	0x0002c19c

0000dc08 <mbox_callback>:
{
    dc08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    dc0c:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    dc0e:	6883      	ldr	r3, [r0, #8]
    dc10:	691b      	ldr	r3, [r3, #16]
    dc12:	b94b      	cbnz	r3, dc28 <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    dc14:	4927      	ldr	r1, [pc, #156]	; (dcb4 <mbox_callback+0xac>)
    dc16:	4828      	ldr	r0, [pc, #160]	; (dcb8 <mbox_callback+0xb0>)
    dc18:	23ca      	movs	r3, #202	; 0xca
    dc1a:	4a28      	ldr	r2, [pc, #160]	; (dcbc <mbox_callback+0xb4>)
    dc1c:	f016 fec3 	bl	249a6 <assert_print>
    dc20:	21ca      	movs	r1, #202	; 0xca
    dc22:	4826      	ldr	r0, [pc, #152]	; (dcbc <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    dc24:	f016 feb8 	bl	24998 <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    dc28:	2200      	movs	r2, #0
    dc2a:	4798      	blx	r3
    dc2c:	4606      	mov	r6, r0
    dc2e:	2800      	cmp	r0, #0
    dc30:	d1f0      	bne.n	dc14 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    dc32:	f3c4 2907 	ubfx	r9, r4, #8, #8
    dc36:	4648      	mov	r0, r9
    dc38:	f00e f82c 	bl	1bc94 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    dc3c:	fa5f f884 	uxtb.w	r8, r4
    dc40:	4633      	mov	r3, r6
    dc42:	4649      	mov	r1, r9
    dc44:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    dc46:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    dc48:	4640      	mov	r0, r8
    dc4a:	f7ff fedd 	bl	da08 <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    dc4e:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    dc52:	4648      	mov	r0, r9
    dc54:	f00d ffea 	bl	1bc2c <z_nrf_rtc_timer_compare_evt_address_get>
    dc58:	2d0f      	cmp	r5, #15
    dc5a:	d90a      	bls.n	dc72 <mbox_callback+0x6a>
    dc5c:	4918      	ldr	r1, [pc, #96]	; (dcc0 <mbox_callback+0xb8>)
    dc5e:	4816      	ldr	r0, [pc, #88]	; (dcb8 <mbox_callback+0xb0>)
    dc60:	f240 13e1 	movw	r3, #481	; 0x1e1
    dc64:	4a17      	ldr	r2, [pc, #92]	; (dcc4 <mbox_callback+0xbc>)
    dc66:	f016 fe9e 	bl	249a6 <assert_print>
    dc6a:	f240 11e1 	movw	r1, #481	; 0x1e1
    dc6e:	4815      	ldr	r0, [pc, #84]	; (dcc4 <mbox_callback+0xbc>)
    dc70:	e7d8      	b.n	dc24 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    dc72:	4a15      	ldr	r2, [pc, #84]	; (dcc8 <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    dc74:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    dc76:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    dc78:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    dc7c:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    dc7e:	b950      	cbnz	r0, dc96 <mbox_callback+0x8e>
    dc80:	4912      	ldr	r1, [pc, #72]	; (dccc <mbox_callback+0xc4>)
    dc82:	480d      	ldr	r0, [pc, #52]	; (dcb8 <mbox_callback+0xb0>)
    dc84:	f44f 7312 	mov.w	r3, #584	; 0x248
    dc88:	4a11      	ldr	r2, [pc, #68]	; (dcd0 <mbox_callback+0xc8>)
    dc8a:	f016 fe8c 	bl	249a6 <assert_print>
    dc8e:	f44f 7112 	mov.w	r1, #584	; 0x248
    dc92:	480f      	ldr	r0, [pc, #60]	; (dcd0 <mbox_callback+0xc8>)
    dc94:	e7c6      	b.n	dc24 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    dc96:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    dc9a:	4b0e      	ldr	r3, [pc, #56]	; (dcd4 <mbox_callback+0xcc>)
    dc9c:	f107 0232 	add.w	r2, r7, #50	; 0x32
    dca0:	9300      	str	r3, [sp, #0]
    dca2:	4648      	mov	r0, r9
    dca4:	4633      	mov	r3, r6
    dca6:	9401      	str	r4, [sp, #4]
    dca8:	0052      	lsls	r2, r2, #1
    dcaa:	f00e f8dd 	bl	1be68 <z_nrf_rtc_timer_set>
}
    dcae:	b003      	add	sp, #12
    dcb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dcb4:	0002c1e7 	.word	0x0002c1e7
    dcb8:	0002b339 	.word	0x0002b339
    dcbc:	0002c19c 	.word	0x0002c19c
    dcc0:	0002c151 	.word	0x0002c151
    dcc4:	0002c11f 	.word	0x0002c11f
    dcc8:	4002a080 	.word	0x4002a080
    dccc:	0002c198 	.word	0x0002c198
    dcd0:	0002c15c 	.word	0x0002c15c
    dcd4:	0000db59 	.word	0x0000db59

0000dcd8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    dcd8:	f01a bbc7 	b.w	2846a <SystemInit>

0000dcdc <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    dcdc:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    dcde:	aa01      	add	r2, sp, #4
    dce0:	f01a fbaa 	bl	28438 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    dce4:	4604      	mov	r4, r0
    dce6:	b168      	cbz	r0, dd04 <soc_secure_gpio_pin_mcu_select+0x28>
    dce8:	2316      	movs	r3, #22
    dcea:	4a0e      	ldr	r2, [pc, #56]	; (dd24 <soc_secure_gpio_pin_mcu_select+0x48>)
    dcec:	490e      	ldr	r1, [pc, #56]	; (dd28 <soc_secure_gpio_pin_mcu_select+0x4c>)
    dcee:	480f      	ldr	r0, [pc, #60]	; (dd2c <soc_secure_gpio_pin_mcu_select+0x50>)
    dcf0:	f016 fe59 	bl	249a6 <assert_print>
    dcf4:	4621      	mov	r1, r4
    dcf6:	480e      	ldr	r0, [pc, #56]	; (dd30 <soc_secure_gpio_pin_mcu_select+0x54>)
    dcf8:	f016 fe55 	bl	249a6 <assert_print>
    dcfc:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    dcfe:	4809      	ldr	r0, [pc, #36]	; (dd24 <soc_secure_gpio_pin_mcu_select+0x48>)
    dd00:	f016 fe4a 	bl	24998 <assert_post_action>
    dd04:	9b01      	ldr	r3, [sp, #4]
    dd06:	b15b      	cbz	r3, dd20 <soc_secure_gpio_pin_mcu_select+0x44>
    dd08:	2317      	movs	r3, #23
    dd0a:	4a06      	ldr	r2, [pc, #24]	; (dd24 <soc_secure_gpio_pin_mcu_select+0x48>)
    dd0c:	4909      	ldr	r1, [pc, #36]	; (dd34 <soc_secure_gpio_pin_mcu_select+0x58>)
    dd0e:	4807      	ldr	r0, [pc, #28]	; (dd2c <soc_secure_gpio_pin_mcu_select+0x50>)
    dd10:	f016 fe49 	bl	249a6 <assert_print>
    dd14:	9901      	ldr	r1, [sp, #4]
    dd16:	4808      	ldr	r0, [pc, #32]	; (dd38 <soc_secure_gpio_pin_mcu_select+0x5c>)
    dd18:	f016 fe45 	bl	249a6 <assert_print>
    dd1c:	2117      	movs	r1, #23
    dd1e:	e7ee      	b.n	dcfe <soc_secure_gpio_pin_mcu_select+0x22>
}
    dd20:	b002      	add	sp, #8
    dd22:	bd10      	pop	{r4, pc}
    dd24:	0002c1f9 	.word	0x0002c1f9
    dd28:	0002c233 	.word	0x0002c233
    dd2c:	0002b339 	.word	0x0002b339
    dd30:	0002c253 	.word	0x0002c253
    dd34:	0002c26d 	.word	0x0002c26d
    dd38:	0002c279 	.word	0x0002c279

0000dd3c <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    dd3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    dd40:	f8df a0fc 	ldr.w	sl, [pc, #252]	; de40 <z_log_init.isra.0+0x104>
    dd44:	4f3f      	ldr	r7, [pc, #252]	; (de44 <z_log_init.isra.0+0x108>)
    dd46:	4681      	mov	r9, r0
    dd48:	ebaa 0307 	sub.w	r3, sl, r7

	if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    dd4c:	2b9f      	cmp	r3, #159	; 0x9f
static uint32_t z_log_init(bool blocking, bool can_sleep)
    dd4e:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    dd50:	d90b      	bls.n	dd6a <z_log_init.isra.0+0x2e>
    dd52:	493d      	ldr	r1, [pc, #244]	; (de48 <z_log_init.isra.0+0x10c>)
    dd54:	f240 1315 	movw	r3, #277	; 0x115
    dd58:	4a3c      	ldr	r2, [pc, #240]	; (de4c <z_log_init.isra.0+0x110>)
    dd5a:	483d      	ldr	r0, [pc, #244]	; (de50 <z_log_init.isra.0+0x114>)
    dd5c:	f016 fe23 	bl	249a6 <assert_print>
    dd60:	f240 1115 	movw	r1, #277	; 0x115
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dd64:	4839      	ldr	r0, [pc, #228]	; (de4c <z_log_init.isra.0+0x110>)
    dd66:	f016 fe17 	bl	24998 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    dd6a:	483a      	ldr	r0, [pc, #232]	; (de54 <z_log_init.isra.0+0x118>)
    dd6c:	f016 fe84 	bl	24a78 <atomic_inc>
    dd70:	4606      	mov	r6, r0
    dd72:	2800      	cmp	r0, #0
    dd74:	d134      	bne.n	dde0 <z_log_init.isra.0+0xa4>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dd76:	463c      	mov	r4, r7
	uint32_t mask = 0;
    dd78:	4605      	mov	r5, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    dd7a:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dd7e:	4554      	cmp	r4, sl
    dd80:	d927      	bls.n	ddd2 <z_log_init.isra.0+0x96>
    dd82:	4935      	ldr	r1, [pc, #212]	; (de58 <z_log_init.isra.0+0x11c>)
    dd84:	f44f 7391 	mov.w	r3, #290	; 0x122
    dd88:	4a30      	ldr	r2, [pc, #192]	; (de4c <z_log_init.isra.0+0x110>)
    dd8a:	4831      	ldr	r0, [pc, #196]	; (de50 <z_log_init.isra.0+0x114>)
    dd8c:	f016 fe0b 	bl	249a6 <assert_print>
    dd90:	4832      	ldr	r0, [pc, #200]	; (de5c <z_log_init.isra.0+0x120>)
    dd92:	f016 fe08 	bl	249a6 <assert_print>
    dd96:	f44f 7191 	mov.w	r1, #290	; 0x122
    dd9a:	e7e3      	b.n	dd64 <z_log_init.isra.0+0x28>
		if (backend->autostart) {
    dd9c:	7b23      	ldrb	r3, [r4, #12]
    dd9e:	b173      	cbz	r3, ddbe <z_log_init.isra.0+0x82>
	if (backend->api->init) {
    dda0:	6823      	ldr	r3, [r4, #0]
    dda2:	68db      	ldr	r3, [r3, #12]
    dda4:	b10b      	cbz	r3, ddaa <z_log_init.isra.0+0x6e>
		backend->api->init(backend);
    dda6:	4620      	mov	r0, r4
    dda8:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    ddaa:	6823      	ldr	r3, [r4, #0]
    ddac:	691b      	ldr	r3, [r3, #16]
    ddae:	b943      	cbnz	r3, ddc2 <z_log_init.isra.0+0x86>
				log_backend_enable(backend,
    ddb0:	6863      	ldr	r3, [r4, #4]
    ddb2:	2204      	movs	r2, #4
    ddb4:	4620      	mov	r0, r4
    ddb6:	6819      	ldr	r1, [r3, #0]
    ddb8:	f000 f904 	bl	dfc4 <log_backend_enable>
			}

			i++;
    ddbc:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ddbe:	3410      	adds	r4, #16
    ddc0:	e7dd      	b.n	dd7e <z_log_init.isra.0+0x42>
		return backend->api->is_ready(backend);
    ddc2:	4620      	mov	r0, r4
    ddc4:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    ddc6:	2800      	cmp	r0, #0
    ddc8:	d0f2      	beq.n	ddb0 <z_log_init.isra.0+0x74>
				mask |= BIT(i);
    ddca:	fa0b f306 	lsl.w	r3, fp, r6
    ddce:	431d      	orrs	r5, r3
    ddd0:	e7f4      	b.n	ddbc <z_log_init.isra.0+0x80>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ddd2:	d3e3      	bcc.n	dd9c <z_log_init.isra.0+0x60>
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    ddd4:	f1b9 0f00 	cmp.w	r9, #0
    ddd8:	d002      	beq.n	dde0 <z_log_init.isra.0+0xa4>
		mask_cpy &= ~BIT(i);
    ddda:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    ddde:	b90d      	cbnz	r5, dde4 <z_log_init.isra.0+0xa8>
			}
		}
	}

	return mask;
}
    dde0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dde4:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    dde6:	fa95 f4a5 	rbit	r4, r5
    ddea:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    ddee:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    ddf2:	0126      	lsls	r6, r4, #4
    ddf4:	eb07 1404 	add.w	r4, r7, r4, lsl #4
		mask_cpy &= ~BIT(i);
    ddf8:	ea6f 0b03 	mvn.w	fp, r3
    ddfc:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    de00:	7b23      	ldrb	r3, [r4, #12]
    de02:	b15b      	cbz	r3, de1c <z_log_init.isra.0+0xe0>
	if (backend->api->is_ready != NULL) {
    de04:	59bb      	ldr	r3, [r7, r6]
    de06:	691b      	ldr	r3, [r3, #16]
    de08:	b9a3      	cbnz	r3, de34 <z_log_init.isra.0+0xf8>
					   backend->cb->ctx,
    de0a:	443e      	add	r6, r7
			log_backend_enable(backend,
    de0c:	6873      	ldr	r3, [r6, #4]
    de0e:	2204      	movs	r2, #4
    de10:	4620      	mov	r0, r4
    de12:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    de14:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    de18:	f000 f8d4 	bl	dfc4 <log_backend_enable>
	while (mask_cpy) {
    de1c:	2d00      	cmp	r5, #0
    de1e:	d1e2      	bne.n	dde6 <z_log_init.isra.0+0xaa>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    de20:	f1b8 0f00 	cmp.w	r8, #0
    de24:	d004      	beq.n	de30 <z_log_init.isra.0+0xf4>
	return z_impl_k_sleep(timeout);
    de26:	f44f 70a4 	mov.w	r0, #328	; 0x148
    de2a:	2100      	movs	r1, #0
    de2c:	f013 fd4a 	bl	218c4 <z_impl_k_sleep>
    de30:	464d      	mov	r5, r9
    de32:	e7d4      	b.n	ddde <z_log_init.isra.0+0xa2>
		return backend->api->is_ready(backend);
    de34:	4620      	mov	r0, r4
    de36:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    de38:	2800      	cmp	r0, #0
    de3a:	d1ef      	bne.n	de1c <z_log_init.isra.0+0xe0>
    de3c:	e7e5      	b.n	de0a <z_log_init.isra.0+0xce>
    de3e:	bf00      	nop
    de40:	0002a4a0 	.word	0x0002a4a0
    de44:	0002a490 	.word	0x0002a490
    de48:	0002c2c0 	.word	0x0002c2c0
    de4c:	0002c293 	.word	0x0002c293
    de50:	0002b339 	.word	0x0002b339
    de54:	20020ec0 	.word	0x20020ec0
    de58:	0002c2e4 	.word	0x0002c2e4
    de5c:	0002c305 	.word	0x0002c305

0000de60 <log_format_func_t_get>:
}
    de60:	4b01      	ldr	r3, [pc, #4]	; (de68 <log_format_func_t_get+0x8>)
    de62:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    de66:	4770      	bx	lr
    de68:	0002a964 	.word	0x0002a964

0000de6c <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    de6c:	b508      	push	{r3, lr}
    de6e:	4603      	mov	r3, r0
    de70:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    de72:	b12b      	cbz	r3, de80 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    de74:	4a04      	ldr	r2, [pc, #16]	; (de88 <log_set_timestamp_func+0x1c>)
    de76:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    de78:	f000 faec 	bl	e454 <log_output_timestamp_freq_set>
	}

	return 0;
    de7c:	2000      	movs	r0, #0
}
    de7e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    de80:	f06f 0015 	mvn.w	r0, #21
    de84:	e7fb      	b.n	de7e <log_set_timestamp_func+0x12>
    de86:	bf00      	nop
    de88:	200083fc 	.word	0x200083fc

0000de8c <log_core_init>:
	panic_mode = false;
    de8c:	2300      	movs	r3, #0
    de8e:	4a04      	ldr	r2, [pc, #16]	; (dea0 <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    de90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    de94:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    de96:	4a03      	ldr	r2, [pc, #12]	; (dea4 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    de98:	4803      	ldr	r0, [pc, #12]	; (dea8 <log_core_init+0x1c>)
	dropped_cnt = 0;
    de9a:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    de9c:	f7ff bfe6 	b.w	de6c <log_set_timestamp_func>
    dea0:	20021cda 	.word	0x20021cda
    dea4:	20020eb8 	.word	0x20020eb8
    dea8:	00024a75 	.word	0x00024a75

0000deac <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    deac:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    deae:	4d13      	ldr	r5, [pc, #76]	; (defc <z_impl_log_panic+0x50>)
    deb0:	7829      	ldrb	r1, [r5, #0]
    deb2:	bb09      	cbnz	r1, def8 <z_impl_log_panic+0x4c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    deb4:	2001      	movs	r0, #1
    deb6:	f7ff ff41 	bl	dd3c <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    deba:	4c11      	ldr	r4, [pc, #68]	; (df00 <z_impl_log_panic+0x54>)
    debc:	4e11      	ldr	r6, [pc, #68]	; (df04 <z_impl_log_panic+0x58>)
    debe:	42b4      	cmp	r4, r6
    dec0:	d917      	bls.n	def2 <z_impl_log_panic+0x46>
    dec2:	4911      	ldr	r1, [pc, #68]	; (df08 <z_impl_log_panic+0x5c>)
    dec4:	f44f 73c2 	mov.w	r3, #388	; 0x184
    dec8:	4a10      	ldr	r2, [pc, #64]	; (df0c <z_impl_log_panic+0x60>)
    deca:	4811      	ldr	r0, [pc, #68]	; (df10 <z_impl_log_panic+0x64>)
    decc:	f016 fd6b 	bl	249a6 <assert_print>
    ded0:	4810      	ldr	r0, [pc, #64]	; (df14 <z_impl_log_panic+0x68>)
    ded2:	f016 fd68 	bl	249a6 <assert_print>
    ded6:	f44f 71c2 	mov.w	r1, #388	; 0x184
    deda:	480c      	ldr	r0, [pc, #48]	; (df0c <z_impl_log_panic+0x60>)
    dedc:	f016 fd5c 	bl	24998 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    dee0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    dee2:	795b      	ldrb	r3, [r3, #5]
    dee4:	b11b      	cbz	r3, deee <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    dee6:	6823      	ldr	r3, [r4, #0]
    dee8:	4620      	mov	r0, r4
    deea:	689b      	ldr	r3, [r3, #8]
    deec:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    deee:	3410      	adds	r4, #16
    def0:	e7e5      	b.n	debe <z_impl_log_panic+0x12>
    def2:	d3f5      	bcc.n	dee0 <z_impl_log_panic+0x34>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    def4:	2301      	movs	r3, #1
    def6:	702b      	strb	r3, [r5, #0]
}
    def8:	bd70      	pop	{r4, r5, r6, pc}
    defa:	bf00      	nop
    defc:	20021cda 	.word	0x20021cda
    df00:	0002a490 	.word	0x0002a490
    df04:	0002a4a0 	.word	0x0002a4a0
    df08:	0002c2e4 	.word	0x0002c2e4
    df0c:	0002c293 	.word	0x0002c293
    df10:	0002b339 	.word	0x0002b339
    df14:	0002c305 	.word	0x0002c305

0000df18 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    df18:	b510      	push	{r4, lr}
    df1a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    df1c:	4806      	ldr	r0, [pc, #24]	; (df38 <z_log_dropped+0x20>)
    df1e:	f016 fdab 	bl	24a78 <atomic_inc>
	if (buffered) {
    df22:	b13c      	cbz	r4, df34 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    df24:	4b05      	ldr	r3, [pc, #20]	; (df3c <z_log_dropped+0x24>)
    df26:	e8d3 1fef 	ldaex	r1, [r3]
    df2a:	3901      	subs	r1, #1
    df2c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    df30:	2a00      	cmp	r2, #0
    df32:	d1f8      	bne.n	df26 <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    df34:	bd10      	pop	{r4, pc}
    df36:	bf00      	nop
    df38:	20020eb8 	.word	0x20020eb8
    df3c:	20020ebc 	.word	0x20020ebc

0000df40 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    df40:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    df42:	4b12      	ldr	r3, [pc, #72]	; (df8c <z_log_msg_commit+0x4c>)
{
    df44:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    df46:	681b      	ldr	r3, [r3, #0]
    df48:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    df4a:	4c11      	ldr	r4, [pc, #68]	; (df90 <z_log_msg_commit+0x50>)
    df4c:	4e11      	ldr	r6, [pc, #68]	; (df94 <z_log_msg_commit+0x54>)
	msg->hdr.timestamp = timestamp_func();
    df4e:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    df50:	42b4      	cmp	r4, r6
    df52:	d918      	bls.n	df86 <z_log_msg_commit+0x46>
    df54:	4910      	ldr	r1, [pc, #64]	; (df98 <z_log_msg_commit+0x58>)
    df56:	f240 13c1 	movw	r3, #449	; 0x1c1
    df5a:	4a10      	ldr	r2, [pc, #64]	; (df9c <z_log_msg_commit+0x5c>)
    df5c:	4810      	ldr	r0, [pc, #64]	; (dfa0 <z_log_msg_commit+0x60>)
    df5e:	f016 fd22 	bl	249a6 <assert_print>
    df62:	4810      	ldr	r0, [pc, #64]	; (dfa4 <z_log_msg_commit+0x64>)
    df64:	f016 fd1f 	bl	249a6 <assert_print>
    df68:	f240 11c1 	movw	r1, #449	; 0x1c1
    df6c:	480b      	ldr	r0, [pc, #44]	; (df9c <z_log_msg_commit+0x5c>)
    df6e:	f016 fd13 	bl	24998 <assert_post_action>
	return backend->cb->active;
    df72:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    df74:	795b      	ldrb	r3, [r3, #5]
    df76:	b123      	cbz	r3, df82 <z_log_msg_commit+0x42>
	backend->api->process(backend, msg);
    df78:	6823      	ldr	r3, [r4, #0]
    df7a:	4629      	mov	r1, r5
    df7c:	4620      	mov	r0, r4
    df7e:	681b      	ldr	r3, [r3, #0]
    df80:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    df82:	3410      	adds	r4, #16
    df84:	e7e4      	b.n	df50 <z_log_msg_commit+0x10>
    df86:	d3f4      	bcc.n	df72 <z_log_msg_commit+0x32>
	msg_commit(&log_buffer, msg);
}
    df88:	bd70      	pop	{r4, r5, r6, pc}
    df8a:	bf00      	nop
    df8c:	200083fc 	.word	0x200083fc
    df90:	0002a490 	.word	0x0002a490
    df94:	0002a4a0 	.word	0x0002a4a0
    df98:	0002c2e4 	.word	0x0002c2e4
    df9c:	0002c293 	.word	0x0002c293
    dfa0:	0002b339 	.word	0x0002b339
    dfa4:	0002c305 	.word	0x0002c305

0000dfa8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    dfa8:	4a04      	ldr	r2, [pc, #16]	; (dfbc <log_source_name_get+0x14>)
    dfaa:	4b05      	ldr	r3, [pc, #20]	; (dfc0 <log_source_name_get+0x18>)
    dfac:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    dfae:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    dfb2:	bf34      	ite	cc
    dfb4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    dfb8:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    dfba:	4770      	bx	lr
    dfbc:	0002a338 	.word	0x0002a338
    dfc0:	0002a490 	.word	0x0002a490

0000dfc4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    dfc4:	4b0e      	ldr	r3, [pc, #56]	; (e000 <log_backend_enable+0x3c>)
{
    dfc6:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    dfc8:	1ac3      	subs	r3, r0, r3
    dfca:	111b      	asrs	r3, r3, #4
    dfcc:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    dfce:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    dfd0:	b948      	cbnz	r0, dfe6 <log_backend_enable+0x22>
    dfd2:	490c      	ldr	r1, [pc, #48]	; (e004 <log_backend_enable+0x40>)
    dfd4:	480c      	ldr	r0, [pc, #48]	; (e008 <log_backend_enable+0x44>)
    dfd6:	23de      	movs	r3, #222	; 0xde
    dfd8:	4a0c      	ldr	r2, [pc, #48]	; (e00c <log_backend_enable+0x48>)
    dfda:	f016 fce4 	bl	249a6 <assert_print>
    dfde:	21de      	movs	r1, #222	; 0xde
    dfe0:	480a      	ldr	r0, [pc, #40]	; (e00c <log_backend_enable+0x48>)
    dfe2:	f016 fcd9 	bl	24998 <assert_post_action>
	backend->cb->id = id;
    dfe6:	6844      	ldr	r4, [r0, #4]
    dfe8:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    dfea:	6843      	ldr	r3, [r0, #4]
    dfec:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    dfee:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    dff0:	6843      	ldr	r3, [r0, #4]
    dff2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    dff4:	6843      	ldr	r3, [r0, #4]
    dff6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    dff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    dffc:	f016 bd4c 	b.w	24a98 <z_log_notify_backend_enabled>
    e000:	0002a490 	.word	0x0002a490
    e004:	0002c3a8 	.word	0x0002c3a8
    e008:	0002b339 	.word	0x0002b339
    e00c:	0002c370 	.word	0x0002c370

0000e010 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    e010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e014:	b085      	sub	sp, #20
    e016:	af02      	add	r7, sp, #8
    e018:	4604      	mov	r4, r0
    e01a:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    e01e:	460e      	mov	r6, r1
    e020:	4693      	mov	fp, r2
    e022:	4698      	mov	r8, r3
    e024:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    e026:	f1ba 0f00 	cmp.w	sl, #0
    e02a:	d015      	beq.n	e058 <z_impl_z_log_msg_runtime_vcreate+0x48>
		va_list ap2;

		va_copy(ap2, ap);
    e02c:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    e030:	f8cd 9000 	str.w	r9, [sp]
    e034:	2110      	movs	r1, #16
    e036:	4653      	mov	r3, sl
    e038:	2000      	movs	r0, #0
    e03a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e03c:	f7fe fa3a 	bl	c4b4 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    e040:	1e01      	subs	r1, r0, #0
    e042:	da0a      	bge.n	e05a <z_impl_z_log_msg_runtime_vcreate+0x4a>
    e044:	491f      	ldr	r1, [pc, #124]	; (e0c4 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    e046:	2368      	movs	r3, #104	; 0x68
    e048:	4a1f      	ldr	r2, [pc, #124]	; (e0c8 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e04a:	4820      	ldr	r0, [pc, #128]	; (e0cc <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    e04c:	f016 fcab 	bl	249a6 <assert_print>
    e050:	2168      	movs	r1, #104	; 0x68
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
    e052:	481d      	ldr	r0, [pc, #116]	; (e0c8 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e054:	f016 fca0 	bl	24998 <assert_post_action>
		plen = 0;
    e058:	4651      	mov	r1, sl
	struct log_msg_desc desc =
    e05a:	4a1d      	ldr	r2, [pc, #116]	; (e0d0 <z_impl_z_log_msg_runtime_vcreate+0xc0>)
    e05c:	f004 0407 	and.w	r4, r4, #7
    e060:	f00b 0b07 	and.w	fp, fp, #7
    e064:	00e4      	lsls	r4, r4, #3
    e066:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    e06a:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    e06e:	4314      	orrs	r4, r2
    e070:	4a18      	ldr	r2, [pc, #96]	; (e0d4 <z_impl_z_log_msg_runtime_vcreate+0xc4>)
    e072:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    e076:	3517      	adds	r5, #23
    e078:	440d      	add	r5, r1
		msg = alloca(msg_wlen * sizeof(int));
    e07a:	f025 0507 	bic.w	r5, r5, #7
    e07e:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    e082:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    e084:	ad02      	add	r5, sp, #8
	if (pkg && fmt) {
    e086:	f1ba 0f00 	cmp.w	sl, #0
    e08a:	d011      	beq.n	e0b0 <z_impl_z_log_msg_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    e08c:	f8cd 9000 	str.w	r9, [sp]
    e090:	4653      	mov	r3, sl
    e092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e094:	f105 0010 	add.w	r0, r5, #16
    e098:	f7fe fa0c 	bl	c4b4 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    e09c:	2800      	cmp	r0, #0
    e09e:	da07      	bge.n	e0b0 <z_impl_z_log_msg_runtime_vcreate+0xa0>
    e0a0:	4908      	ldr	r1, [pc, #32]	; (e0c4 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    e0a2:	2382      	movs	r3, #130	; 0x82
    e0a4:	4a08      	ldr	r2, [pc, #32]	; (e0c8 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e0a6:	4809      	ldr	r0, [pc, #36]	; (e0cc <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    e0a8:	f016 fc7d 	bl	249a6 <assert_print>
    e0ac:	2182      	movs	r1, #130	; 0x82
    e0ae:	e7d0      	b.n	e052 <z_impl_z_log_msg_runtime_vcreate+0x42>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    e0b0:	4643      	mov	r3, r8
    e0b2:	4622      	mov	r2, r4
    e0b4:	4631      	mov	r1, r6
    e0b6:	4628      	mov	r0, r5
    e0b8:	f016 fcf1 	bl	24a9e <z_log_msg_finalize>
	}
}
    e0bc:	370c      	adds	r7, #12
    e0be:	46bd      	mov	sp, r7
    e0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0c4:	0002c3f4 	.word	0x0002c3f4
    e0c8:	0002c3c8 	.word	0x0002c3c8
    e0cc:	0002b339 	.word	0x0002b339
    e0d0:	0007fe00 	.word	0x0007fe00
    e0d4:	7ff80000 	.word	0x7ff80000

0000e0d8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    e0d8:	b40e      	push	{r1, r2, r3}
    e0da:	b503      	push	{r0, r1, lr}
    e0dc:	ab03      	add	r3, sp, #12
    e0de:	f853 2b04 	ldr.w	r2, [r3], #4
    e0e2:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e0e4:	4804      	ldr	r0, [pc, #16]	; (e0f8 <print_formatted+0x20>)
	va_start(args, fmt);
    e0e6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e0e8:	f016 fd1c 	bl	24b24 <cbvprintf>
	va_end(args);

	return length;
}
    e0ec:	b002      	add	sp, #8
    e0ee:	f85d eb04 	ldr.w	lr, [sp], #4
    e0f2:	b003      	add	sp, #12
    e0f4:	4770      	bx	lr
    e0f6:	bf00      	nop
    e0f8:	00024ad3 	.word	0x00024ad3

0000e0fc <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e0fc:	06ca      	lsls	r2, r1, #27
    e0fe:	d405      	bmi.n	e10c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e100:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    e102:	bf4c      	ite	mi
    e104:	4902      	ldrmi	r1, [pc, #8]	; (e110 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    e106:	4903      	ldrpl	r1, [pc, #12]	; (e114 <newline_print+0x18>)
    e108:	f7ff bfe6 	b.w	e0d8 <print_formatted>
	}
}
    e10c:	4770      	bx	lr
    e10e:	bf00      	nop
    e110:	0002ee3b 	.word	0x0002ee3b
    e114:	0002b9b3 	.word	0x0002b9b3

0000e118 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    e118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e11c:	b089      	sub	sp, #36	; 0x24
    e11e:	469a      	mov	sl, r3
    e120:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    e124:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    e128:	9305      	str	r3, [sp, #20]
    e12a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e12c:	4604      	mov	r4, r0
    e12e:	460d      	mov	r5, r1
    e130:	9e16      	ldr	r6, [sp, #88]	; 0x58
    e132:	9206      	str	r2, [sp, #24]
    e134:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    e136:	f1bb 0f00 	cmp.w	fp, #0
    e13a:	f000 8085 	beq.w	e248 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    e13e:	f006 0308 	and.w	r3, r6, #8
    e142:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    e144:	f016 fca9 	bl	24a9a <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    e148:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    e14c:	4602      	mov	r2, r0
    e14e:	2800      	cmp	r0, #0
    e150:	d049      	beq.n	e1e6 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    e152:	4620      	mov	r0, r4
    e154:	498c      	ldr	r1, [pc, #560]	; (e388 <log_output_process+0x270>)
    e156:	f7ff ffbf 	bl	e0d8 <print_formatted>
    e15a:	4680      	mov	r8, r0
	if (stamp) {
    e15c:	f1b9 0f00 	cmp.w	r9, #0
    e160:	d008      	beq.n	e174 <log_output_process+0x5c>
	if (!format) {
    e162:	f016 0f44 	tst.w	r6, #68	; 0x44
    e166:	d140      	bne.n	e1ea <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    e168:	462a      	mov	r2, r5
    e16a:	4620      	mov	r0, r4
    e16c:	4987      	ldr	r1, [pc, #540]	; (e38c <log_output_process+0x274>)
    e16e:	f7ff ffb3 	bl	e0d8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    e172:	4480      	add	r8, r0
	if (color) {
    e174:	f006 0301 	and.w	r3, r6, #1
    e178:	b153      	cbz	r3, e190 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    e17a:	4b85      	ldr	r3, [pc, #532]	; (e390 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    e17c:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    e17e:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    e182:	4b84      	ldr	r3, [pc, #528]	; (e394 <log_output_process+0x27c>)
    e184:	4984      	ldr	r1, [pc, #528]	; (e398 <log_output_process+0x280>)
    e186:	2a00      	cmp	r2, #0
    e188:	bf08      	it	eq
    e18a:	461a      	moveq	r2, r3
    e18c:	f7ff ffa4 	bl	e0d8 <print_formatted>
	if (level_on) {
    e190:	f006 0308 	and.w	r3, r6, #8
    e194:	2b00      	cmp	r3, #0
    e196:	d054      	beq.n	e242 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    e198:	4b80      	ldr	r3, [pc, #512]	; (e39c <log_output_process+0x284>)
    e19a:	4620      	mov	r0, r4
    e19c:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    e1a0:	497f      	ldr	r1, [pc, #508]	; (e3a0 <log_output_process+0x288>)
    e1a2:	f7ff ff99 	bl	e0d8 <print_formatted>
    e1a6:	4605      	mov	r5, r0
	if (domain) {
    e1a8:	9b06      	ldr	r3, [sp, #24]
    e1aa:	b12b      	cbz	r3, e1b8 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    e1ac:	461a      	mov	r2, r3
    e1ae:	4620      	mov	r0, r4
    e1b0:	497c      	ldr	r1, [pc, #496]	; (e3a4 <log_output_process+0x28c>)
    e1b2:	f7ff ff91 	bl	e0d8 <print_formatted>
    e1b6:	4405      	add	r5, r0
	if (source) {
    e1b8:	f1ba 0f00 	cmp.w	sl, #0
    e1bc:	d005      	beq.n	e1ca <log_output_process+0xb2>
		total += print_formatted(output,
    e1be:	4652      	mov	r2, sl
    e1c0:	4620      	mov	r0, r4
    e1c2:	4979      	ldr	r1, [pc, #484]	; (e3a8 <log_output_process+0x290>)
    e1c4:	f7ff ff88 	bl	e0d8 <print_formatted>
    e1c8:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    e1ca:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    e1cc:	2f00      	cmp	r7, #0
    e1ce:	d149      	bne.n	e264 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    e1d0:	9b04      	ldr	r3, [sp, #16]
    e1d2:	2b00      	cmp	r3, #0
    e1d4:	d160      	bne.n	e298 <log_output_process+0x180>
	if (color) {
    e1d6:	07f3      	lsls	r3, r6, #31
    e1d8:	f100 80cf 	bmi.w	e37a <log_output_process+0x262>
	newline_print(output, flags);
    e1dc:	4631      	mov	r1, r6
    e1de:	4620      	mov	r0, r4
    e1e0:	f7ff ff8c 	bl	e0fc <newline_print>
}
    e1e4:	e0c3      	b.n	e36e <log_output_process+0x256>
	uint32_t length = 0U;
    e1e6:	4680      	mov	r8, r0
    e1e8:	e7b8      	b.n	e15c <log_output_process+0x44>
	} else if (freq != 0U) {
    e1ea:	4b70      	ldr	r3, [pc, #448]	; (e3ac <log_output_process+0x294>)
    e1ec:	6818      	ldr	r0, [r3, #0]
    e1ee:	2800      	cmp	r0, #0
    e1f0:	d0bf      	beq.n	e172 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    e1f2:	4b6f      	ldr	r3, [pc, #444]	; (e3b0 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    e1f4:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    e1f8:	681b      	ldr	r3, [r3, #0]
    e1fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    e1fe:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    e202:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    e206:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    e20a:	fb09 f505 	mul.w	r5, r9, r5
    e20e:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e212:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    e216:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    e21a:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e21e:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    e222:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e226:	fb09 f505 	mul.w	r5, r9, r5
    e22a:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    e22e:	fb0c 1113 	mls	r1, ip, r3, r1
    e232:	4620      	mov	r0, r4
    e234:	9100      	str	r1, [sp, #0]
    e236:	e9cd e501 	strd	lr, r5, [sp, #4]
    e23a:	495e      	ldr	r1, [pc, #376]	; (e3b4 <log_output_process+0x29c>)
    e23c:	f7ff ff4c 	bl	e0d8 <print_formatted>
    e240:	e797      	b.n	e172 <log_output_process+0x5a>
	int total = 0;
    e242:	f006 0508 	and.w	r5, r6, #8
    e246:	e7af      	b.n	e1a8 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e248:	f1ba 0f01 	cmp.w	sl, #1
    e24c:	d106      	bne.n	e25c <log_output_process+0x144>
	if (package) {
    e24e:	b9ef      	cbnz	r7, e28c <log_output_process+0x174>
	if (data_len) {
    e250:	9b04      	ldr	r3, [sp, #16]
    e252:	2b00      	cmp	r3, #0
    e254:	f000 808b 	beq.w	e36e <log_output_process+0x256>
		prefix_offset = 0;
    e258:	2500      	movs	r5, #0
    e25a:	e01d      	b.n	e298 <log_output_process+0x180>
	if (package) {
    e25c:	2f00      	cmp	r7, #0
    e25e:	d0f7      	beq.n	e250 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e260:	4855      	ldr	r0, [pc, #340]	; (e3b8 <log_output_process+0x2a0>)
    e262:	e014      	b.n	e28e <log_output_process+0x176>
		cb = out_func;
    e264:	4855      	ldr	r0, [pc, #340]	; (e3bc <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    e266:	463b      	mov	r3, r7
    e268:	4622      	mov	r2, r4
    e26a:	4955      	ldr	r1, [pc, #340]	; (e3c0 <log_output_process+0x2a8>)
    e26c:	f016 f993 	bl	24596 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    e270:	2800      	cmp	r0, #0
    e272:	da0e      	bge.n	e292 <log_output_process+0x17a>
    e274:	4953      	ldr	r1, [pc, #332]	; (e3c4 <log_output_process+0x2ac>)
    e276:	4854      	ldr	r0, [pc, #336]	; (e3c8 <log_output_process+0x2b0>)
    e278:	f44f 7300 	mov.w	r3, #512	; 0x200
    e27c:	4a53      	ldr	r2, [pc, #332]	; (e3cc <log_output_process+0x2b4>)
    e27e:	f016 fb92 	bl	249a6 <assert_print>
    e282:	f44f 7100 	mov.w	r1, #512	; 0x200
    e286:	4851      	ldr	r0, [pc, #324]	; (e3cc <log_output_process+0x2b4>)
    e288:	f016 fb86 	bl	24998 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e28c:	484b      	ldr	r0, [pc, #300]	; (e3bc <log_output_process+0x2a4>)
		prefix_offset = 0;
    e28e:	465d      	mov	r5, fp
    e290:	e7e9      	b.n	e266 <log_output_process+0x14e>
	if (data_len) {
    e292:	9b04      	ldr	r3, [sp, #16]
    e294:	2b00      	cmp	r3, #0
    e296:	d066      	beq.n	e366 <log_output_process+0x24e>
		print_formatted(output, " ");
    e298:	f8df 8134 	ldr.w	r8, [pc, #308]	; e3d0 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    e29c:	f8df 9134 	ldr.w	r9, [pc, #308]	; e3d4 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e2a0:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    e2a2:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e2a4:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    e2a6:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e2a8:	bf28      	it	cs
    e2aa:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    e2ac:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    e2b0:	f7ff ff24 	bl	e0fc <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    e2b4:	4555      	cmp	r5, sl
    e2b6:	dc43      	bgt.n	e340 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    e2b8:	9b05      	ldr	r3, [sp, #20]
    e2ba:	4649      	mov	r1, r9
    e2bc:	4620      	mov	r0, r4
    e2be:	781a      	ldrb	r2, [r3, #0]
    e2c0:	f7ff ff0a 	bl	e0d8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e2c4:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    e2c8:	f01a 0f07 	tst.w	sl, #7
    e2cc:	d103      	bne.n	e2d6 <log_output_process+0x1be>
			print_formatted(output, " ");
    e2ce:	4641      	mov	r1, r8
    e2d0:	4620      	mov	r0, r4
    e2d2:	f7ff ff01 	bl	e0d8 <print_formatted>
		if (i < length) {
    e2d6:	4557      	cmp	r7, sl
    e2d8:	d939      	bls.n	e34e <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    e2da:	9b05      	ldr	r3, [sp, #20]
    e2dc:	4649      	mov	r1, r9
    e2de:	4620      	mov	r0, r4
    e2e0:	f813 200a 	ldrb.w	r2, [r3, sl]
    e2e4:	f7ff fef8 	bl	e0d8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e2e8:	f10a 0a01 	add.w	sl, sl, #1
    e2ec:	f1ba 0f10 	cmp.w	sl, #16
    e2f0:	d1ea      	bne.n	e2c8 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e2f2:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    e2f6:	4620      	mov	r0, r4
    e2f8:	4937      	ldr	r1, [pc, #220]	; (e3d8 <log_output_process+0x2c0>)
    e2fa:	f7ff feed 	bl	e0d8 <print_formatted>
		if (i < length) {
    e2fe:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    e300:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    e302:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    e304:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    e306:	4b35      	ldr	r3, [pc, #212]	; (e3dc <log_output_process+0x2c4>)
    e308:	5c99      	ldrb	r1, [r3, r2]
    e30a:	f011 0f97 	tst.w	r1, #151	; 0x97
    e30e:	bf08      	it	eq
    e310:	222e      	moveq	r2, #46	; 0x2e
    e312:	4933      	ldr	r1, [pc, #204]	; (e3e0 <log_output_process+0x2c8>)
    e314:	f7ff fee0 	bl	e0d8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e318:	f10a 0a01 	add.w	sl, sl, #1
    e31c:	f1ba 0f10 	cmp.w	sl, #16
    e320:	d01a      	beq.n	e358 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    e322:	f01a 0f07 	tst.w	sl, #7
    e326:	d103      	bne.n	e330 <log_output_process+0x218>
			print_formatted(output, " ");
    e328:	4641      	mov	r1, r8
    e32a:	4620      	mov	r0, r4
    e32c:	f7ff fed4 	bl	e0d8 <print_formatted>
		if (i < length) {
    e330:	4557      	cmp	r7, sl
    e332:	4652      	mov	r2, sl
    e334:	d8e4      	bhi.n	e300 <log_output_process+0x1e8>
			print_formatted(output, " ");
    e336:	4641      	mov	r1, r8
    e338:	4620      	mov	r0, r4
    e33a:	f7ff fecd 	bl	e0d8 <print_formatted>
    e33e:	e7eb      	b.n	e318 <log_output_process+0x200>
		print_formatted(output, " ");
    e340:	4641      	mov	r1, r8
    e342:	4620      	mov	r0, r4
    e344:	f7ff fec8 	bl	e0d8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    e348:	f10a 0a01 	add.w	sl, sl, #1
    e34c:	e7b2      	b.n	e2b4 <log_output_process+0x19c>
			print_formatted(output, "   ");
    e34e:	4620      	mov	r0, r4
    e350:	4924      	ldr	r1, [pc, #144]	; (e3e4 <log_output_process+0x2cc>)
    e352:	f7ff fec1 	bl	e0d8 <print_formatted>
    e356:	e7c7      	b.n	e2e8 <log_output_process+0x1d0>
		data += length;
    e358:	9b05      	ldr	r3, [sp, #20]
    e35a:	443b      	add	r3, r7
    e35c:	9305      	str	r3, [sp, #20]
	} while (len);
    e35e:	9b04      	ldr	r3, [sp, #16]
    e360:	1bdb      	subs	r3, r3, r7
    e362:	9304      	str	r3, [sp, #16]
    e364:	d19c      	bne.n	e2a0 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    e366:	f1bb 0f00 	cmp.w	fp, #0
    e36a:	f47f af34 	bne.w	e1d6 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    e36e:	4620      	mov	r0, r4
}
    e370:	b009      	add	sp, #36	; 0x24
    e372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    e376:	f016 bbdc 	b.w	24b32 <log_output_flush>
		print_formatted(output, "%s", log_color);
    e37a:	4620      	mov	r0, r4
    e37c:	4a05      	ldr	r2, [pc, #20]	; (e394 <log_output_process+0x27c>)
    e37e:	4906      	ldr	r1, [pc, #24]	; (e398 <log_output_process+0x280>)
    e380:	f7ff feaa 	bl	e0d8 <print_formatted>
}
    e384:	e72a      	b.n	e1dc <log_output_process+0xc4>
    e386:	bf00      	nop
    e388:	0002c403 	.word	0x0002c403
    e38c:	0002c407 	.word	0x0002c407
    e390:	0002a974 	.word	0x0002a974
    e394:	0002c3fe 	.word	0x0002c3fe
    e398:	0002b4ec 	.word	0x0002b4ec
    e39c:	0002a988 	.word	0x0002a988
    e3a0:	0002c42c 	.word	0x0002c42c
    e3a4:	0002c432 	.word	0x0002c432
    e3a8:	0002c436 	.word	0x0002c436
    e3ac:	20020ec8 	.word	0x20020ec8
    e3b0:	20020ec4 	.word	0x20020ec4
    e3b4:	0002c410 	.word	0x0002c410
    e3b8:	00024aef 	.word	0x00024aef
    e3bc:	00024ad3 	.word	0x00024ad3
    e3c0:	00024b25 	.word	0x00024b25
    e3c4:	0002c46a 	.word	0x0002c46a
    e3c8:	0002b339 	.word	0x0002b339
    e3cc:	0002c43b 	.word	0x0002c43b
    e3d0:	0002ffb9 	.word	0x0002ffb9
    e3d4:	0002c473 	.word	0x0002c473
    e3d8:	0002c479 	.word	0x0002c479
    e3dc:	00030af9 	.word	0x00030af9
    e3e0:	0002c47b 	.word	0x0002c47b
    e3e4:	0002ffb7 	.word	0x0002ffb7

0000e3e8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    e3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    e3ec:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    e3ee:	684b      	ldr	r3, [r1, #4]
    e3f0:	4605      	mov	r5, r0
    e3f2:	460c      	mov	r4, r1
    e3f4:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    e3f6:	688e      	ldr	r6, [r1, #8]
    e3f8:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    e3fa:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    e3fe:	b15b      	cbz	r3, e418 <log_output_msg_process+0x30>
    e400:	4a13      	ldr	r2, [pc, #76]	; (e450 <log_output_msg_process+0x68>)
    e402:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    e404:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    e408:	2900      	cmp	r1, #0
    e40a:	db1f      	blt.n	e44c <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    e40c:	7820      	ldrb	r0, [r4, #0]
    e40e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e412:	f7ff fdc9 	bl	dfa8 <log_source_name_get>
    e416:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    e418:	4621      	mov	r1, r4
    e41a:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    e41e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    e420:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    e424:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    e426:	eb01 0402 	add.w	r4, r1, r2
    e42a:	bf08      	it	eq
    e42c:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    e42e:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    e432:	e9cd 0803 	strd	r0, r8, [sp, #12]
    e436:	e9cd 1401 	strd	r1, r4, [sp, #4]
    e43a:	2200      	movs	r2, #0
    e43c:	4631      	mov	r1, r6
    e43e:	4628      	mov	r0, r5
    e440:	9700      	str	r7, [sp, #0]
    e442:	f7ff fe69 	bl	e118 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    e446:	b006      	add	sp, #24
    e448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    e44c:	2300      	movs	r3, #0
    e44e:	e7e3      	b.n	e418 <log_output_msg_process+0x30>
    e450:	0002a338 	.word	0x0002a338

0000e454 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    e454:	2100      	movs	r1, #0
    e456:	2301      	movs	r3, #1
    e458:	4a06      	ldr	r2, [pc, #24]	; (e474 <log_output_timestamp_freq_set+0x20>)
    e45a:	4290      	cmp	r0, r2
    e45c:	d806      	bhi.n	e46c <log_output_timestamp_freq_set+0x18>
    e45e:	4a06      	ldr	r2, [pc, #24]	; (e478 <log_output_timestamp_freq_set+0x24>)
    e460:	b901      	cbnz	r1, e464 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    e462:	2301      	movs	r3, #1
    e464:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    e466:	4b05      	ldr	r3, [pc, #20]	; (e47c <log_output_timestamp_freq_set+0x28>)
    e468:	6018      	str	r0, [r3, #0]
}
    e46a:	4770      	bx	lr
		timestamp_div *= 2U;
    e46c:	2101      	movs	r1, #1
		frequency /= 2U;
    e46e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    e470:	005b      	lsls	r3, r3, #1
    e472:	e7f2      	b.n	e45a <log_output_timestamp_freq_set+0x6>
    e474:	000f4240 	.word	0x000f4240
    e478:	20020ec4 	.word	0x20020ec4
    e47c:	20020ec8 	.word	0x20020ec8

0000e480 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    e480:	2201      	movs	r2, #1
    e482:	4b01      	ldr	r3, [pc, #4]	; (e488 <log_backend_rtt_init+0x8>)
    e484:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    e486:	4770      	bx	lr
    e488:	20021cdb 	.word	0x20021cdb

0000e48c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    e48c:	4b01      	ldr	r3, [pc, #4]	; (e494 <format_set+0x8>)
	return 0;
}
    e48e:	2000      	movs	r0, #0
	log_format_current = log_type;
    e490:	6019      	str	r1, [r3, #0]
}
    e492:	4770      	bx	lr
    e494:	20020ee0 	.word	0x20020ee0

0000e498 <panic>:
	panic_mode = true;
    e498:	2201      	movs	r2, #1
    e49a:	4b02      	ldr	r3, [pc, #8]	; (e4a4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    e49c:	4802      	ldr	r0, [pc, #8]	; (e4a8 <panic+0x10>)
    e49e:	701a      	strb	r2, [r3, #0]
    e4a0:	f016 bb47 	b.w	24b32 <log_output_flush>
    e4a4:	20021cdc 	.word	0x20021cdc
    e4a8:	0002a9b8 	.word	0x0002a9b8

0000e4ac <process>:
{
    e4ac:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e4ae:	4b06      	ldr	r3, [pc, #24]	; (e4c8 <process+0x1c>)
{
    e4b0:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e4b2:	6818      	ldr	r0, [r3, #0]
    e4b4:	f7ff fcd4 	bl	de60 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    e4b8:	4621      	mov	r1, r4
}
    e4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e4be:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    e4c0:	220f      	movs	r2, #15
    e4c2:	4802      	ldr	r0, [pc, #8]	; (e4cc <process+0x20>)
    e4c4:	4718      	bx	r3
    e4c6:	bf00      	nop
    e4c8:	20020ee0 	.word	0x20020ee0
    e4cc:	0002a9b8 	.word	0x0002a9b8

0000e4d0 <data_out_block_mode>:
{
    e4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4d2:	4607      	mov	r7, r0
    e4d4:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    e4d6:	2404      	movs	r4, #4
    e4d8:	4d17      	ldr	r5, [pc, #92]	; (e538 <data_out_block_mode+0x68>)
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    e4da:	4632      	mov	r2, r6
    e4dc:	4639      	mov	r1, r7
    e4de:	2000      	movs	r0, #0
    e4e0:	f010 fb58 	bl	1eb94 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    e4e4:	b1c8      	cbz	r0, e51a <data_out_block_mode+0x4a>
	host_present = true;
    e4e6:	2301      	movs	r3, #1
    e4e8:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    e4ea:	4b14      	ldr	r3, [pc, #80]	; (e53c <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    e4ec:	781b      	ldrb	r3, [r3, #0]
    e4ee:	b92b      	cbnz	r3, e4fc <data_out_block_mode+0x2c>
}
    e4f0:	4630      	mov	r0, r6
    e4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    e4f4:	b95c      	cbnz	r4, e50e <data_out_block_mode+0x3e>
		host_present = false;
    e4f6:	702c      	strb	r4, [r5, #0]
    e4f8:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    e4fc:	2000      	movs	r0, #0
    e4fe:	f010 fb91 	bl	1ec24 <SEGGER_RTT_HasDataUp>
    e502:	2800      	cmp	r0, #0
    e504:	d0f4      	beq.n	e4f0 <data_out_block_mode+0x20>
    e506:	782b      	ldrb	r3, [r5, #0]
    e508:	2b00      	cmp	r3, #0
    e50a:	d1f3      	bne.n	e4f4 <data_out_block_mode+0x24>
    e50c:	e7f0      	b.n	e4f0 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    e50e:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    e510:	f241 3088 	movw	r0, #5000	; 0x1388
    e514:	f01a fea4 	bl	29260 <z_impl_k_busy_wait>
}
    e518:	e7f0      	b.n	e4fc <data_out_block_mode+0x2c>
		} else if (host_present) {
    e51a:	782b      	ldrb	r3, [r5, #0]
    e51c:	b113      	cbz	r3, e524 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    e51e:	3c01      	subs	r4, #1
    e520:	d104      	bne.n	e52c <data_out_block_mode+0x5c>
		host_present = false;
    e522:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    e524:	782b      	ldrb	r3, [r5, #0]
    e526:	2b00      	cmp	r3, #0
    e528:	d1d7      	bne.n	e4da <data_out_block_mode+0xa>
    e52a:	e7e1      	b.n	e4f0 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    e52c:	f241 3088 	movw	r0, #5000	; 0x1388
    e530:	f01a fe96 	bl	29260 <z_impl_k_busy_wait>
    e534:	e7f6      	b.n	e524 <data_out_block_mode+0x54>
    e536:	bf00      	nop
    e538:	20021cdb 	.word	0x20021cdb
    e53c:	20021cdc 	.word	0x20021cdc

0000e540 <nvs_flash_erase_sector>:

/* erase a sector and verify erase was OK.
 * return 0 if OK, errorcode on error.
 */
static int nvs_flash_erase_sector(struct nvs_fs *fs, uint32_t addr)
{
    e540:	b570      	push	{r4, r5, r6, lr}
	off_t offset;

	addr &= ADDR_SECT_MASK;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    e542:	8983      	ldrh	r3, [r0, #12]
    e544:	6805      	ldr	r5, [r0, #0]
	addr &= ADDR_SECT_MASK;
    e546:	0c0e      	lsrs	r6, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    e548:	0c09      	lsrs	r1, r1, #16
    e54a:	fb03 5501 	mla	r5, r3, r1, r5
{
    e54e:	b086      	sub	sp, #24

	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    e550:	e9cd 5304 	strd	r5, r3, [sp, #16]
    e554:	4b11      	ldr	r3, [pc, #68]	; (e59c <nvs_flash_erase_sector+0x5c>)
    e556:	2208      	movs	r2, #8
    e558:	9303      	str	r3, [sp, #12]
    e55a:	4b11      	ldr	r3, [pc, #68]	; (e5a0 <nvs_flash_erase_sector+0x60>)
{
    e55c:	4604      	mov	r4, r0
	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    e55e:	9302      	str	r3, [sp, #8]
    e560:	2300      	movs	r3, #0
    e562:	4910      	ldr	r1, [pc, #64]	; (e5a4 <nvs_flash_erase_sector+0x64>)
    e564:	4618      	mov	r0, r3
    e566:	e9cd 3200 	strd	r3, r2, [sp]
    e56a:	2204      	movs	r2, #4
    e56c:	f016 fb61 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
	addr &= ADDR_SECT_MASK;
    e570:	0436      	lsls	r6, r6, #16
		fs->sector_size);

#ifdef CONFIG_NVS_LOOKUP_CACHE
	nvs_lookup_cache_invalidate(fs, addr >> ADDR_SECT_SHIFT);
#endif
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    e572:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e574:	89a2      	ldrh	r2, [r4, #12]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    e576:	6883      	ldr	r3, [r0, #8]
    e578:	4629      	mov	r1, r5
    e57a:	689b      	ldr	r3, [r3, #8]
    e57c:	4798      	blx	r3

	if (rc) {
    e57e:	b950      	cbnz	r0, e596 <nvs_flash_erase_sector+0x56>
		return rc;
	}

	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    e580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e582:	4631      	mov	r1, r6
    e584:	4620      	mov	r0, r4
    e586:	89a3      	ldrh	r3, [r4, #12]
    e588:	7912      	ldrb	r2, [r2, #4]
    e58a:	f016 fb2d 	bl	24be8 <nvs_flash_cmp_const>
			fs->sector_size)) {
		rc = -ENXIO;
    e58e:	2800      	cmp	r0, #0
    e590:	bf18      	it	ne
    e592:	f06f 0005 	mvnne.w	r0, #5
	}

	return rc;
}
    e596:	b006      	add	sp, #24
    e598:	bd70      	pop	{r4, r5, r6, pc}
    e59a:	bf00      	nop
    e59c:	0002c671 	.word	0x0002c671
    e5a0:	0002c4ae 	.word	0x0002c4ae
    e5a4:	0002a410 	.word	0x0002a410

0000e5a8 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    e5a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t data_end_addr, ate_end_addr;
	struct nvs_ate end_ate;
	size_t ate_size;
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
    e5ac:	884b      	ldrh	r3, [r1, #2]
{
    e5ae:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Recovering last ate from sector %d",
    e5b0:	9304      	str	r3, [sp, #16]
    e5b2:	4b1d      	ldr	r3, [pc, #116]	; (e628 <nvs_recover_last_ate+0x80>)
    e5b4:	2408      	movs	r4, #8
    e5b6:	9303      	str	r3, [sp, #12]
    e5b8:	4b1c      	ldr	r3, [pc, #112]	; (e62c <nvs_recover_last_ate+0x84>)
{
    e5ba:	4607      	mov	r7, r0
	LOG_DBG("Recovering last ate from sector %d",
    e5bc:	9302      	str	r3, [sp, #8]
    e5be:	2300      	movs	r3, #0
{
    e5c0:	460d      	mov	r5, r1
	LOG_DBG("Recovering last ate from sector %d",
    e5c2:	4618      	mov	r0, r3
    e5c4:	e9cd 3400 	strd	r3, r4, [sp]
    e5c8:	4919      	ldr	r1, [pc, #100]	; (e630 <nvs_recover_last_ate+0x88>)
    e5ca:	2204      	movs	r2, #4
    e5cc:	f016 fb31 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e5d0:	4621      	mov	r1, r4
    e5d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e5d4:	f016 fb3d 	bl	24c52 <nvs_al_size.isra.0>
    e5d8:	4680      	mov	r8, r0

	*addr -= ate_size;
    e5da:	682c      	ldr	r4, [r5, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    e5dc:	f8df 9054 	ldr.w	r9, [pc, #84]	; e634 <nvs_recover_last_ate+0x8c>
	*addr -= ate_size;
    e5e0:	1a24      	subs	r4, r4, r0
    e5e2:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    e5e4:	ea04 0609 	and.w	r6, r4, r9
	while (ate_end_addr > data_end_addr) {
    e5e8:	42b4      	cmp	r4, r6
    e5ea:	d803      	bhi.n	e5f4 <nvs_recover_last_ate+0x4c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    e5ec:	2000      	movs	r0, #0
}
    e5ee:	b009      	add	sp, #36	; 0x24
    e5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e5f4:	2308      	movs	r3, #8
    e5f6:	4621      	mov	r1, r4
    e5f8:	4638      	mov	r0, r7
    e5fa:	aa06      	add	r2, sp, #24
    e5fc:	f016 faa6 	bl	24b4c <nvs_flash_rd>
		if (rc) {
    e600:	2800      	cmp	r0, #0
    e602:	d1f4      	bne.n	e5ee <nvs_recover_last_ate+0x46>
		if (nvs_ate_valid(fs, &end_ate)) {
    e604:	4638      	mov	r0, r7
    e606:	a906      	add	r1, sp, #24
    e608:	f016 fb2d 	bl	24c66 <nvs_ate_valid>
    e60c:	b140      	cbz	r0, e620 <nvs_recover_last_ate+0x78>
			data_end_addr += end_ate.offset + end_ate.len;
    e60e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    e612:	f8bd 201c 	ldrh.w	r2, [sp, #28]
			data_end_addr &= ADDR_SECT_MASK;
    e616:	ea06 0609 	and.w	r6, r6, r9
			data_end_addr += end_ate.offset + end_ate.len;
    e61a:	4413      	add	r3, r2
    e61c:	441e      	add	r6, r3
			*addr = ate_end_addr;
    e61e:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    e620:	eba4 0408 	sub.w	r4, r4, r8
    e624:	e7e0      	b.n	e5e8 <nvs_recover_last_ate+0x40>
    e626:	bf00      	nop
    e628:	0002c65c 	.word	0x0002c65c
    e62c:	0002c4cf 	.word	0x0002c4cf
    e630:	0002a410 	.word	0x0002a410
    e634:	ffff0000 	.word	0xffff0000

0000e638 <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
    e638:	b530      	push	{r4, r5, lr}
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    e63a:	8883      	ldrh	r3, [r0, #4]
{
    e63c:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    e63e:	9304      	str	r3, [sp, #16]
    e640:	4b10      	ldr	r3, [pc, #64]	; (e684 <nvs_add_gc_done_ate+0x4c>)
    e642:	2500      	movs	r5, #0
    e644:	9303      	str	r3, [sp, #12]
    e646:	4b10      	ldr	r3, [pc, #64]	; (e688 <nvs_add_gc_done_ate+0x50>)
{
    e648:	4604      	mov	r4, r0
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    e64a:	9302      	str	r3, [sp, #8]
    e64c:	2308      	movs	r3, #8
    e64e:	2204      	movs	r2, #4
    e650:	4628      	mov	r0, r5
    e652:	e9cd 5300 	strd	r5, r3, [sp]
    e656:	490d      	ldr	r1, [pc, #52]	; (e68c <nvs_add_gc_done_ate+0x54>)
    e658:	462b      	mov	r3, r5
    e65a:	f016 faea 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
	gc_done_ate.id = 0xffff;
    e65e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e662:	f8ad 3018 	strh.w	r3, [sp, #24]
	gc_done_ate.len = 0U;
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    e666:	68a3      	ldr	r3, [r4, #8]
	nvs_ate_crc8_update(&gc_done_ate);
    e668:	a806      	add	r0, sp, #24
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    e66a:	f8ad 301a 	strh.w	r3, [sp, #26]
	gc_done_ate.len = 0U;
    e66e:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&gc_done_ate);
    e672:	f016 fab0 	bl	24bd6 <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    e676:	4620      	mov	r0, r4
    e678:	a906      	add	r1, sp, #24
    e67a:	f016 fbb0 	bl	24dde <nvs_flash_ate_wrt>
}
    e67e:	b009      	add	sp, #36	; 0x24
    e680:	bd30      	pop	{r4, r5, pc}
    e682:	bf00      	nop
    e684:	0002c641 	.word	0x0002c641
    e688:	0002c4f6 	.word	0x0002c4f6
    e68c:	0002a410 	.word	0x0002a410

0000e690 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e694:	2108      	movs	r1, #8
{
    e696:	b09b      	sub	sp, #108	; 0x6c
    e698:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e69a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    e69c:	f016 fad9 	bl	24c52 <nvs_al_size.isra.0>
    e6a0:	4605      	mov	r5, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    e6a2:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    e6a4:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    e6a6:	0c1b      	lsrs	r3, r3, #16
    e6a8:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    e6aa:	a909      	add	r1, sp, #36	; 0x24
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    e6ac:	9309      	str	r3, [sp, #36]	; 0x24
	nvs_sector_advance(fs, &sec_addr);
    e6ae:	f016 fa5b 	bl	24b68 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    e6b2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    e6b6:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e6b8:	aa0c      	add	r2, sp, #48	; 0x30
	gc_addr = sec_addr + fs->sector_size - ate_size;
    e6ba:	445e      	add	r6, fp
    e6bc:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e6be:	2308      	movs	r3, #8
    e6c0:	4631      	mov	r1, r6
    e6c2:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    e6c4:	960a      	str	r6, [sp, #40]	; 0x28
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e6c6:	f016 fa41 	bl	24b4c <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    e6ca:	1e02      	subs	r2, r0, #0
    e6cc:	f2c0 80bb 	blt.w	e846 <nvs_gc+0x1b6>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    e6d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e6d2:	aa0c      	add	r2, sp, #48	; 0x30
    e6d4:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    e6d6:	2300      	movs	r3, #0
		if (data8[i] != value) {
    e6d8:	f812 0b01 	ldrb.w	r0, [r2], #1
    e6dc:	4281      	cmp	r1, r0
    e6de:	f040 80a1 	bne.w	e824 <nvs_gc+0x194>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    e6e2:	3301      	adds	r3, #1
    e6e4:	2b08      	cmp	r3, #8
    e6e6:	d1f7      	bne.n	e6d8 <nvs_gc+0x48>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    e6e8:	68a3      	ldr	r3, [r4, #8]
    e6ea:	6862      	ldr	r2, [r4, #4]
    e6ec:	442b      	add	r3, r5
    e6ee:	429a      	cmp	r2, r3
    e6f0:	f080 8090 	bcs.w	e814 <nvs_gc+0x184>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
    e6f4:	4659      	mov	r1, fp
    e6f6:	4620      	mov	r0, r4
    e6f8:	f7ff ff22 	bl	e540 <nvs_flash_erase_sector>
    e6fc:	4602      	mov	r2, r0
	if (rc) {
    e6fe:	e0a2      	b.n	e846 <nvs_gc+0x1b6>
		gc_addr += close_ate.offset;
    e700:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
		gc_addr &= ADDR_SECT_MASK;
    e704:	0c36      	lsrs	r6, r6, #16
    e706:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
    e708:	441e      	add	r6, r3
    e70a:	960a      	str	r6, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    e70c:	aa0e      	add	r2, sp, #56	; 0x38
    e70e:	4620      	mov	r0, r4
    e710:	a90a      	add	r1, sp, #40	; 0x28
		gc_prev_addr = gc_addr;
    e712:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    e716:	f016 fade 	bl	24cd6 <nvs_prev_ate>
		if (rc) {
    e71a:	4602      	mov	r2, r0
    e71c:	2800      	cmp	r0, #0
    e71e:	f040 8092 	bne.w	e846 <nvs_gc+0x1b6>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    e722:	4620      	mov	r0, r4
    e724:	a90e      	add	r1, sp, #56	; 0x38
    e726:	f016 fa9e 	bl	24c66 <nvs_ate_valid>
    e72a:	b918      	cbnz	r0, e734 <nvs_gc+0xa4>
	} while (gc_prev_addr != stop_addr);
    e72c:	9b07      	ldr	r3, [sp, #28]
    e72e:	4553      	cmp	r3, sl
    e730:	d1ec      	bne.n	e70c <nvs_gc+0x7c>
    e732:	e7d9      	b.n	e6e8 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
    e734:	6863      	ldr	r3, [r4, #4]
    e736:	930b      	str	r3, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    e738:	aa10      	add	r2, sp, #64	; 0x40
    e73a:	4620      	mov	r0, r4
    e73c:	a90b      	add	r1, sp, #44	; 0x2c
			wlk_prev_addr = wlk_addr;
    e73e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    e740:	f016 fac9 	bl	24cd6 <nvs_prev_ate>
			if (rc) {
    e744:	4602      	mov	r2, r0
    e746:	2800      	cmp	r0, #0
    e748:	d17d      	bne.n	e846 <nvs_gc+0x1b6>
			if ((wlk_ate.id == gc_ate.id) &&
    e74a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    e74e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    e752:	429a      	cmp	r2, r3
    e754:	d038      	beq.n	e7c8 <nvs_gc+0x138>
		} while (wlk_addr != fs->ate_wra);
    e756:	6862      	ldr	r2, [r4, #4]
    e758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e75a:	429a      	cmp	r2, r3
    e75c:	d1ec      	bne.n	e738 <nvs_gc+0xa8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    e75e:	45b2      	cmp	sl, r6
    e760:	d1e4      	bne.n	e72c <nvs_gc+0x9c>
    e762:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    e766:	2b00      	cmp	r3, #0
    e768:	d0e0      	beq.n	e72c <nvs_gc+0x9c>
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    e76a:	9305      	str	r3, [sp, #20]
    e76c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    e770:	2208      	movs	r2, #8
    e772:	9304      	str	r3, [sp, #16]
    e774:	4b36      	ldr	r3, [pc, #216]	; (e850 <nvs_gc+0x1c0>)
    e776:	4937      	ldr	r1, [pc, #220]	; (e854 <nvs_gc+0x1c4>)
    e778:	9303      	str	r3, [sp, #12]
    e77a:	4b37      	ldr	r3, [pc, #220]	; (e858 <nvs_gc+0x1c8>)
    e77c:	9302      	str	r3, [sp, #8]
    e77e:	2300      	movs	r3, #0
    e780:	4618      	mov	r0, r3
    e782:	e9cd 3200 	strd	r3, r2, [sp]
    e786:	2204      	movs	r2, #4
    e788:	f016 fa53 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
			data_addr += gc_ate.offset;
    e78c:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    e790:	ea4f 431a 	mov.w	r3, sl, lsr #16
    e794:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    e796:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    e798:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    e79a:	a80e      	add	r0, sp, #56	; 0x38
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    e79c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			nvs_ate_crc8_update(&gc_ate);
    e7a0:	f016 fa19 	bl	24bd6 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    e7a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    e7a6:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    e7aa:	681e      	ldr	r6, [r3, #0]
    e7ac:	4276      	negs	r6, r6
	block_size =
    e7ae:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    e7b2:	f1b9 0f00 	cmp.w	r9, #0
    e7b6:	d10e      	bne.n	e7d6 <nvs_gc+0x146>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    e7b8:	4620      	mov	r0, r4
    e7ba:	a90e      	add	r1, sp, #56	; 0x38
    e7bc:	f016 fb0f 	bl	24dde <nvs_flash_ate_wrt>
			if (rc) {
    e7c0:	4602      	mov	r2, r0
    e7c2:	2800      	cmp	r0, #0
    e7c4:	d0b2      	beq.n	e72c <nvs_gc+0x9c>
    e7c6:	e03e      	b.n	e846 <nvs_gc+0x1b6>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    e7c8:	4620      	mov	r0, r4
    e7ca:	a910      	add	r1, sp, #64	; 0x40
    e7cc:	f016 fa4b 	bl	24c66 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    e7d0:	2800      	cmp	r0, #0
    e7d2:	d0c0      	beq.n	e756 <nvs_gc+0xc6>
    e7d4:	e7c3      	b.n	e75e <nvs_gc+0xce>
		bytes_to_copy = MIN(block_size, len);
    e7d6:	454e      	cmp	r6, r9
    e7d8:	46b0      	mov	r8, r6
    e7da:	bf28      	it	cs
    e7dc:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    e7de:	aa12      	add	r2, sp, #72	; 0x48
    e7e0:	4643      	mov	r3, r8
    e7e2:	4639      	mov	r1, r7
    e7e4:	4620      	mov	r0, r4
    e7e6:	f016 f9b1 	bl	24b4c <nvs_flash_rd>
		if (rc) {
    e7ea:	4602      	mov	r2, r0
    e7ec:	bb58      	cbnz	r0, e846 <nvs_gc+0x1b6>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    e7ee:	4643      	mov	r3, r8
    e7f0:	68a1      	ldr	r1, [r4, #8]
    e7f2:	aa12      	add	r2, sp, #72	; 0x48
    e7f4:	4620      	mov	r0, r4
    e7f6:	f016 fab8 	bl	24d6a <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    e7fa:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    e7fc:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    e7fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e800:	f016 fa27 	bl	24c52 <nvs_al_size.isra.0>
    e804:	68a3      	ldr	r3, [r4, #8]
    e806:	4403      	add	r3, r0
    e808:	60a3      	str	r3, [r4, #8]
		if (rc) {
    e80a:	b9e2      	cbnz	r2, e846 <nvs_gc+0x1b6>
		len -= bytes_to_copy;
    e80c:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
    e810:	4447      	add	r7, r8
    e812:	e7ce      	b.n	e7b2 <nvs_gc+0x122>
		rc = nvs_add_gc_done_ate(fs);
    e814:	4620      	mov	r0, r4
    e816:	f7ff ff0f 	bl	e638 <nvs_add_gc_done_ate>
		if (rc) {
    e81a:	4602      	mov	r2, r0
    e81c:	2800      	cmp	r0, #0
    e81e:	f43f af69 	beq.w	e6f4 <nvs_gc+0x64>
    e822:	e010      	b.n	e846 <nvs_gc+0x1b6>
	stop_addr = gc_addr - ate_size;
    e824:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
    e826:	4620      	mov	r0, r4
    e828:	a90c      	add	r1, sp, #48	; 0x30
	stop_addr = gc_addr - ate_size;
    e82a:	9307      	str	r3, [sp, #28]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    e82c:	f016 fa35 	bl	24c9a <nvs_close_ate_valid>
    e830:	2800      	cmp	r0, #0
    e832:	f47f af65 	bne.w	e700 <nvs_gc+0x70>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    e836:	4620      	mov	r0, r4
    e838:	a90a      	add	r1, sp, #40	; 0x28
    e83a:	f7ff feb5 	bl	e5a8 <nvs_recover_last_ate>
		if (rc) {
    e83e:	4602      	mov	r2, r0
    e840:	2800      	cmp	r0, #0
    e842:	f43f af63 	beq.w	e70c <nvs_gc+0x7c>
		return rc;
	}
	return 0;
}
    e846:	4610      	mov	r0, r2
    e848:	b01b      	add	sp, #108	; 0x6c
    e84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e84e:	bf00      	nop
    e850:	0002c655 	.word	0x0002c655
    e854:	0002a410 	.word	0x0002a410
    e858:	0002c513 	.word	0x0002c513

0000e85c <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    e85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e860:	4604      	mov	r4, r0
    e862:	b08e      	sub	sp, #56	; 0x38

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    e864:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    e868:	4638      	mov	r0, r7
    e86a:	f01a fc19 	bl	290a0 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    e86e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    e870:	6883      	ldr	r3, [r0, #8]
    e872:	68db      	ldr	r3, [r3, #12]
    e874:	4798      	blx	r3
    e876:	4603      	mov	r3, r0
    e878:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    e87a:	b930      	cbnz	r0, e88a <nvs_mount+0x2e>
		LOG_ERR("Could not obtain flash parameters");
    e87c:	4a90      	ldr	r2, [pc, #576]	; (eac0 <nvs_mount+0x264>)
    e87e:	9000      	str	r0, [sp, #0]
    e880:	e9cd 0201 	strd	r0, r2, [sp, #4]
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
    e884:	2201      	movs	r2, #1
    e886:	498f      	ldr	r1, [pc, #572]	; (eac4 <nvs_mount+0x268>)
    e888:	e00f      	b.n	e8aa <nvs_mount+0x4e>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    e88a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    e88c:	6883      	ldr	r3, [r0, #8]
    e88e:	68db      	ldr	r3, [r3, #12]
    e890:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    e892:	6803      	ldr	r3, [r0, #0]
    e894:	3b01      	subs	r3, #1
    e896:	2b1f      	cmp	r3, #31
    e898:	d90f      	bls.n	e8ba <nvs_mount+0x5e>
		LOG_ERR("Unsupported write block size");
    e89a:	4b8b      	ldr	r3, [pc, #556]	; (eac8 <nvs_mount+0x26c>)
    e89c:	9302      	str	r3, [sp, #8]
    e89e:	2300      	movs	r3, #0
    e8a0:	2201      	movs	r2, #1
    e8a2:	4618      	mov	r0, r3
    e8a4:	e9cd 3300 	strd	r3, r3, [sp]
    e8a8:	4986      	ldr	r1, [pc, #536]	; (eac4 <nvs_mount+0x268>)
    e8aa:	f016 f9c2 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    e8ae:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    e8b2:	4628      	mov	r0, r5
    e8b4:	b00e      	add	sp, #56	; 0x38
    e8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    e8ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e8bc:	6821      	ldr	r1, [r4, #0]
    e8be:	aa0b      	add	r2, sp, #44	; 0x2c
    e8c0:	f019 fa33 	bl	27d2a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    e8c4:	b108      	cbz	r0, e8ca <nvs_mount+0x6e>
		LOG_ERR("Unable to get page info");
    e8c6:	4b81      	ldr	r3, [pc, #516]	; (eacc <nvs_mount+0x270>)
    e8c8:	e7e8      	b.n	e89c <nvs_mount+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    e8ca:	89a5      	ldrh	r5, [r4, #12]
    e8cc:	b12d      	cbz	r5, e8da <nvs_mount+0x7e>
    e8ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e8d0:	fbb5 f2f3 	udiv	r2, r5, r3
    e8d4:	fb03 5512 	mls	r5, r3, r2, r5
    e8d8:	b10d      	cbz	r5, e8de <nvs_mount+0x82>
		LOG_ERR("Invalid sector size");
    e8da:	4b7d      	ldr	r3, [pc, #500]	; (ead0 <nvs_mount+0x274>)
    e8dc:	e7de      	b.n	e89c <nvs_mount+0x40>
	if (fs->sector_count < 2) {
    e8de:	89e3      	ldrh	r3, [r4, #14]
    e8e0:	2b01      	cmp	r3, #1
    e8e2:	d805      	bhi.n	e8f0 <nvs_mount+0x94>
		LOG_ERR("Configuration error - sector count");
    e8e4:	4b7b      	ldr	r3, [pc, #492]	; (ead4 <nvs_mount+0x278>)
    e8e6:	9500      	str	r5, [sp, #0]
    e8e8:	e9cd 5301 	strd	r5, r3, [sp, #4]
    e8ec:	462b      	mov	r3, r5
    e8ee:	e7c9      	b.n	e884 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    e8f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    e8f2:	9506      	str	r5, [sp, #24]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    e8f4:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    e8f8:	f04f 33ff 	mov.w	r3, #4294967295
    e8fc:	f04f 32ff 	mov.w	r2, #4294967295
    e900:	4638      	mov	r0, r7
    e902:	f010 fe89 	bl	1f618 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e906:	2108      	movs	r1, #8
    e908:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e90a:	f016 f9a2 	bl	24c52 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    e90e:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e910:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    e912:	89e3      	ldrh	r3, [r4, #14]
    e914:	fa1f fa85 	uxth.w	sl, r5
    e918:	4553      	cmp	r3, sl
    e91a:	d808      	bhi.n	e92e <nvs_mount+0xd2>
	if (closed_sectors == fs->sector_count) {
    e91c:	89e3      	ldrh	r3, [r4, #14]
    e91e:	4543      	cmp	r3, r8
    e920:	d123      	bne.n	e96a <nvs_mount+0x10e>
	return z_impl_k_mutex_unlock(mutex);
    e922:	4638      	mov	r0, r7
    e924:	f010 ff48 	bl	1f7b8 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    e928:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    e92c:	e7c1      	b.n	e8b2 <nvs_mount+0x56>
		       (uint16_t)(fs->sector_size - ate_size);
    e92e:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    e930:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    e932:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    e934:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e938:	464a      	mov	r2, r9
    e93a:	2308      	movs	r3, #8
    e93c:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    e93e:	9106      	str	r1, [sp, #24]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e940:	f016 f952 	bl	24be8 <nvs_flash_cmp_const>
		if (rc) {
    e944:	b178      	cbz	r0, e966 <nvs_mount+0x10a>
			nvs_sector_advance(fs, &addr);
    e946:	4620      	mov	r0, r4
    e948:	a906      	add	r1, sp, #24
    e94a:	f016 f90d 	bl	24b68 <nvs_sector_advance>
			closed_sectors++;
    e94e:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e952:	2308      	movs	r3, #8
    e954:	464a      	mov	r2, r9
    e956:	4620      	mov	r0, r4
    e958:	9906      	ldr	r1, [sp, #24]
			closed_sectors++;
    e95a:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e95e:	f016 f943 	bl	24be8 <nvs_flash_cmp_const>
			if (!rc) {
    e962:	2800      	cmp	r0, #0
    e964:	d0da      	beq.n	e91c <nvs_mount+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    e966:	3501      	adds	r5, #1
    e968:	e7d3      	b.n	e912 <nvs_mount+0xb6>
	if (i == fs->sector_count) {
    e96a:	4553      	cmp	r3, sl
    e96c:	d10b      	bne.n	e986 <nvs_mount+0x12a>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    e96e:	9906      	ldr	r1, [sp, #24]
    e970:	2308      	movs	r3, #8
    e972:	464a      	mov	r2, r9
    e974:	4620      	mov	r0, r4
    e976:	1b89      	subs	r1, r1, r6
    e978:	f016 f936 	bl	24be8 <nvs_flash_cmp_const>
		if (!rc) {
    e97c:	b918      	cbnz	r0, e986 <nvs_mount+0x12a>
			nvs_sector_advance(fs, &addr);
    e97e:	4620      	mov	r0, r4
    e980:	a906      	add	r1, sp, #24
    e982:	f016 f8f1 	bl	24b68 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    e986:	4620      	mov	r0, r4
    e988:	a906      	add	r1, sp, #24
    e98a:	f7ff fe0d 	bl	e5a8 <nvs_recover_last_ate>
	if (rc) {
    e98e:	4605      	mov	r5, r0
    e990:	b118      	cbz	r0, e99a <nvs_mount+0x13e>
    e992:	4638      	mov	r0, r7
    e994:	f010 ff10 	bl	1f7b8 <z_impl_k_mutex_unlock>
	if (rc) {
    e998:	e78b      	b.n	e8b2 <nvs_mount+0x56>
	fs->ate_wra = addr;
    e99a:	9b06      	ldr	r3, [sp, #24]
	fs->data_wra = addr & ADDR_SECT_MASK;
    e99c:	ea4f 4813 	mov.w	r8, r3, lsr #16
    e9a0:	ea4f 4808 	mov.w	r8, r8, lsl #16
	fs->ate_wra = addr;
    e9a4:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    e9a6:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    e9aa:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    e9ae:	4299      	cmp	r1, r3
    e9b0:	d30f      	bcc.n	e9d2 <nvs_mount+0x176>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e9b2:	2308      	movs	r3, #8
    e9b4:	4620      	mov	r0, r4
    e9b6:	aa07      	add	r2, sp, #28
    e9b8:	f016 f8c8 	bl	24b4c <nvs_flash_rd>
		if (rc) {
    e9bc:	4605      	mov	r5, r0
    e9be:	2800      	cmp	r0, #0
    e9c0:	d1e7      	bne.n	e992 <nvs_mount+0x136>
    e9c2:	ab07      	add	r3, sp, #28
		if (data8[i] != value) {
    e9c4:	f813 2b01 	ldrb.w	r2, [r3], #1
    e9c8:	4591      	cmp	r9, r2
    e9ca:	d143      	bne.n	ea54 <nvs_mount+0x1f8>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    e9cc:	3501      	adds	r5, #1
    e9ce:	2d08      	cmp	r5, #8
    e9d0:	d1f8      	bne.n	e9c4 <nvs_mount+0x168>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    e9d2:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    e9d4:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    e9d6:	0c1b      	lsrs	r3, r3, #16
    e9d8:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    e9da:	a906      	add	r1, sp, #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
    e9dc:	9306      	str	r3, [sp, #24]
	nvs_sector_advance(fs, &addr);
    e9de:	f016 f8c3 	bl	24b68 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    e9e2:	464a      	mov	r2, r9
    e9e4:	4620      	mov	r0, r4
    e9e6:	89a3      	ldrh	r3, [r4, #12]
    e9e8:	9906      	ldr	r1, [sp, #24]
    e9ea:	f016 f8fd 	bl	24be8 <nvs_flash_cmp_const>
	if (rc < 0) {
    e9ee:	1e05      	subs	r5, r0, #0
    e9f0:	dbcf      	blt.n	e992 <nvs_mount+0x136>
		addr = fs->ate_wra + ate_size;
    e9f2:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    e9f4:	f000 8082 	beq.w	eafc <nvs_mount+0x2a0>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    e9f8:	f64f 79ff 	movw	r9, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    e9fc:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    ea00:	89a3      	ldrh	r3, [r4, #12]
    ea02:	fa1f f288 	uxth.w	r2, r8
    ea06:	1b9b      	subs	r3, r3, r6
    ea08:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    ea0a:	f8cd 8018 	str.w	r8, [sp, #24]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    ea0e:	d33d      	bcc.n	ea8c <nvs_mount+0x230>
		LOG_INF("No GC Done marker found: restarting gc");
    ea10:	4b31      	ldr	r3, [pc, #196]	; (ead8 <nvs_mount+0x27c>)
    ea12:	2203      	movs	r2, #3
    ea14:	9302      	str	r3, [sp, #8]
    ea16:	2300      	movs	r3, #0
    ea18:	492a      	ldr	r1, [pc, #168]	; (eac4 <nvs_mount+0x268>)
    ea1a:	4618      	mov	r0, r3
    ea1c:	e9cd 3300 	strd	r3, r3, [sp]
    ea20:	f016 f907 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    ea24:	4620      	mov	r0, r4
    ea26:	6861      	ldr	r1, [r4, #4]
    ea28:	f7ff fd8a 	bl	e540 <nvs_flash_erase_sector>
		if (rc) {
    ea2c:	4605      	mov	r5, r0
    ea2e:	2800      	cmp	r0, #0
    ea30:	d1af      	bne.n	e992 <nvs_mount+0x136>
		fs->ate_wra &= ADDR_SECT_MASK;
    ea32:	6863      	ldr	r3, [r4, #4]
    ea34:	4a29      	ldr	r2, [pc, #164]	; (eadc <nvs_mount+0x280>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    ea36:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    ea38:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    ea3a:	440b      	add	r3, r1
    ea3c:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    ea40:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    ea42:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    ea44:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    ea46:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    ea48:	f7ff fe22 	bl	e690 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    ea4c:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    ea4e:	2d00      	cmp	r5, #0
    ea50:	d070      	beq.n	eb34 <nvs_mount+0x2d8>
    ea52:	e79e      	b.n	e992 <nvs_mount+0x136>
		if (nvs_ate_valid(fs, &last_ate)) {
    ea54:	4620      	mov	r0, r4
    ea56:	a907      	add	r1, sp, #28
    ea58:	f016 f905 	bl	24c66 <nvs_ate_valid>
    ea5c:	6862      	ldr	r2, [r4, #4]
    ea5e:	b910      	cbnz	r0, ea66 <nvs_mount+0x20a>
		fs->ate_wra -= ate_size;
    ea60:	1b92      	subs	r2, r2, r6
    ea62:	6062      	str	r2, [r4, #4]
    ea64:	e7a1      	b.n	e9aa <nvs_mount+0x14e>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    ea66:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    ea6a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    ea6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    ea70:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    ea74:	4429      	add	r1, r5
    ea76:	f016 f8ec 	bl	24c52 <nvs_al_size.isra.0>
    ea7a:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    ea7c:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    ea7e:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    ea80:	d1ee      	bne.n	ea60 <nvs_mount+0x204>
    ea82:	2d00      	cmp	r5, #0
    ea84:	d0ec      	beq.n	ea60 <nvs_mount+0x204>
				rc = -ESPIPE;
    ea86:	f06f 051c 	mvn.w	r5, #28
    ea8a:	e090      	b.n	ebae <nvs_mount+0x352>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ea8c:	2308      	movs	r3, #8
    ea8e:	4641      	mov	r1, r8
    ea90:	4620      	mov	r0, r4
    ea92:	aa09      	add	r2, sp, #36	; 0x24
    ea94:	f016 f85a 	bl	24b4c <nvs_flash_rd>
			if (rc) {
    ea98:	4605      	mov	r5, r0
    ea9a:	2800      	cmp	r0, #0
    ea9c:	f47f af79 	bne.w	e992 <nvs_mount+0x136>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    eaa0:	4620      	mov	r0, r4
    eaa2:	a909      	add	r1, sp, #36	; 0x24
    eaa4:	f016 f8df 	bl	24c66 <nvs_ate_valid>
    eaa8:	b138      	cbz	r0, eaba <nvs_mount+0x25e>
    eaaa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    eaae:	454b      	cmp	r3, r9
    eab0:	d103      	bne.n	eaba <nvs_mount+0x25e>
			    (gc_done_ate.id == 0xffff) &&
    eab2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    eab6:	2b00      	cmp	r3, #0
    eab8:	d07f      	beq.n	ebba <nvs_mount+0x35e>
			addr += ate_size;
    eaba:	44b0      	add	r8, r6
    eabc:	e7a0      	b.n	ea00 <nvs_mount+0x1a4>
    eabe:	bf00      	nop
    eac0:	0002c53d 	.word	0x0002c53d
    eac4:	0002a410 	.word	0x0002a410
    eac8:	0002c55f 	.word	0x0002c55f
    eacc:	0002c57c 	.word	0x0002c57c
    ead0:	0002c594 	.word	0x0002c594
    ead4:	0002c5a8 	.word	0x0002c5a8
    ead8:	0002c605 	.word	0x0002c605
    eadc:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    eae0:	464a      	mov	r2, r9
    eae2:	4620      	mov	r0, r4
    eae4:	1a5b      	subs	r3, r3, r1
    eae6:	f016 f87f 	bl	24be8 <nvs_flash_cmp_const>
		if (rc < 0) {
    eaea:	1e05      	subs	r5, r0, #0
    eaec:	f6ff af51 	blt.w	e992 <nvs_mount+0x136>
		if (!rc) {
    eaf0:	d008      	beq.n	eb04 <nvs_mount+0x2a8>
		fs->data_wra += fs->flash_parameters->write_block_size;
    eaf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    eaf4:	68a3      	ldr	r3, [r4, #8]
    eaf6:	6812      	ldr	r2, [r2, #0]
    eaf8:	4413      	add	r3, r2
    eafa:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    eafc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    eb00:	428b      	cmp	r3, r1
    eb02:	d8ed      	bhi.n	eae0 <nvs_mount+0x284>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    eb04:	6861      	ldr	r1, [r4, #4]
    eb06:	89a3      	ldrh	r3, [r4, #12]
    eb08:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    eb0c:	429a      	cmp	r2, r3
    eb0e:	d19e      	bne.n	ea4e <nvs_mount+0x1f2>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    eb10:	f8df 80d4 	ldr.w	r8, [pc, #212]	; ebe8 <nvs_mount+0x38c>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    eb14:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    eb16:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    eb1a:	429a      	cmp	r2, r3
    eb1c:	d097      	beq.n	ea4e <nvs_mount+0x1f2>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    eb1e:	4620      	mov	r0, r4
    eb20:	f7ff fd0e 	bl	e540 <nvs_flash_erase_sector>
		if (rc) {
    eb24:	4605      	mov	r5, r0
    eb26:	2800      	cmp	r0, #0
    eb28:	f47f af33 	bne.w	e992 <nvs_mount+0x136>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    eb2c:	6863      	ldr	r3, [r4, #4]
    eb2e:	ea03 0308 	and.w	r3, r3, r8
    eb32:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    eb34:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    eb36:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    eb38:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    eb3c:	429a      	cmp	r2, r3
    eb3e:	d032      	beq.n	eba6 <nvs_mount+0x34a>
    eb40:	4638      	mov	r0, r7
    eb42:	f010 fe39 	bl	1f7b8 <z_impl_k_mutex_unlock>
	fs->ready = true;
    eb46:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    eb48:	2500      	movs	r5, #0
	fs->ready = true;
    eb4a:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    eb4c:	89a3      	ldrh	r3, [r4, #12]
    eb4e:	4628      	mov	r0, r5
    eb50:	9304      	str	r3, [sp, #16]
    eb52:	89e3      	ldrh	r3, [r4, #14]
    eb54:	2203      	movs	r2, #3
    eb56:	9303      	str	r3, [sp, #12]
    eb58:	4b24      	ldr	r3, [pc, #144]	; (ebec <nvs_mount+0x390>)
    eb5a:	e9cd 5500 	strd	r5, r5, [sp]
    eb5e:	9302      	str	r3, [sp, #8]
    eb60:	4923      	ldr	r1, [pc, #140]	; (ebf0 <nvs_mount+0x394>)
    eb62:	462b      	mov	r3, r5
    eb64:	f016 f865 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
    eb68:	6863      	ldr	r3, [r4, #4]
    eb6a:	4628      	mov	r0, r5
    eb6c:	b29a      	uxth	r2, r3
    eb6e:	0c1b      	lsrs	r3, r3, #16
    eb70:	9303      	str	r3, [sp, #12]
    eb72:	4b20      	ldr	r3, [pc, #128]	; (ebf4 <nvs_mount+0x398>)
    eb74:	9204      	str	r2, [sp, #16]
    eb76:	e9cd 5301 	strd	r5, r3, [sp, #4]
    eb7a:	2203      	movs	r2, #3
    eb7c:	462b      	mov	r3, r5
    eb7e:	491c      	ldr	r1, [pc, #112]	; (ebf0 <nvs_mount+0x394>)
    eb80:	9500      	str	r5, [sp, #0]
    eb82:	f016 f856 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("data wra: %d, %x",
    eb86:	68a3      	ldr	r3, [r4, #8]
    eb88:	4628      	mov	r0, r5
    eb8a:	b29a      	uxth	r2, r3
    eb8c:	0c1b      	lsrs	r3, r3, #16
    eb8e:	9303      	str	r3, [sp, #12]
    eb90:	4b19      	ldr	r3, [pc, #100]	; (ebf8 <nvs_mount+0x39c>)
    eb92:	9204      	str	r2, [sp, #16]
    eb94:	e9cd 5301 	strd	r5, r3, [sp, #4]
    eb98:	2203      	movs	r2, #3
    eb9a:	462b      	mov	r3, r5
    eb9c:	4914      	ldr	r1, [pc, #80]	; (ebf0 <nvs_mount+0x394>)
    eb9e:	9500      	str	r5, [sp, #0]
    eba0:	f016 f847 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
	return 0;
    eba4:	e685      	b.n	e8b2 <nvs_mount+0x56>
		rc = nvs_add_gc_done_ate(fs);
    eba6:	4620      	mov	r0, r4
    eba8:	f7ff fd46 	bl	e638 <nvs_add_gc_done_ate>
    ebac:	4605      	mov	r5, r0
    ebae:	4638      	mov	r0, r7
    ebb0:	f010 fe02 	bl	1f7b8 <z_impl_k_mutex_unlock>
	if (rc) {
    ebb4:	2d00      	cmp	r5, #0
    ebb6:	d0c6      	beq.n	eb46 <nvs_mount+0x2ea>
    ebb8:	e67b      	b.n	e8b2 <nvs_mount+0x56>
			LOG_INF("GC Done marker found");
    ebba:	4b10      	ldr	r3, [pc, #64]	; (ebfc <nvs_mount+0x3a0>)
    ebbc:	2203      	movs	r2, #3
    ebbe:	4628      	mov	r0, r5
    ebc0:	e9cd 5301 	strd	r5, r3, [sp, #4]
    ebc4:	490a      	ldr	r1, [pc, #40]	; (ebf0 <nvs_mount+0x394>)
    ebc6:	462b      	mov	r3, r5
    ebc8:	9500      	str	r5, [sp, #0]
    ebca:	f016 f832 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    ebce:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    ebd0:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    ebd2:	0c1b      	lsrs	r3, r3, #16
    ebd4:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    ebd6:	a906      	add	r1, sp, #24
			addr = fs->ate_wra & ADDR_SECT_MASK;
    ebd8:	9306      	str	r3, [sp, #24]
			nvs_sector_advance(fs, &addr);
    ebda:	f015 ffc5 	bl	24b68 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    ebde:	4620      	mov	r0, r4
    ebe0:	9906      	ldr	r1, [sp, #24]
    ebe2:	f7ff fcad 	bl	e540 <nvs_flash_erase_sector>
    ebe6:	e731      	b.n	ea4c <nvs_mount+0x1f0>
    ebe8:	ffff0000 	.word	0xffff0000
    ebec:	0002c5cb 	.word	0x0002c5cb
    ebf0:	0002a410 	.word	0x0002a410
    ebf4:	0002c5e2 	.word	0x0002c5e2
    ebf8:	0002c5f4 	.word	0x0002c5f4
    ebfc:	0002c62c 	.word	0x0002c62c

0000ec00 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    ec00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec04:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    ec06:	7c03      	ldrb	r3, [r0, #16]
{
    ec08:	4604      	mov	r4, r0
    ec0a:	4689      	mov	r9, r1
    ec0c:	4690      	mov	r8, r2
    ec0e:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    ec10:	b973      	cbnz	r3, ec30 <nvs_write+0x30>
		LOG_ERR("NVS not initialized");
    ec12:	4a66      	ldr	r2, [pc, #408]	; (edac <nvs_write+0x1ac>)
    ec14:	4618      	mov	r0, r3
    ec16:	e9cd 3201 	strd	r3, r2, [sp, #4]
    ec1a:	4965      	ldr	r1, [pc, #404]	; (edb0 <nvs_write+0x1b0>)
    ec1c:	2201      	movs	r2, #1
    ec1e:	9300      	str	r3, [sp, #0]
    ec20:	f016 f807 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    ec24:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    ec28:	4630      	mov	r0, r6
    ec2a:	b00d      	add	sp, #52	; 0x34
    ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ec30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    ec32:	2108      	movs	r1, #8
    ec34:	4610      	mov	r0, r2
    ec36:	f016 f80c 	bl	24c52 <nvs_al_size.isra.0>
    ec3a:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    ec3c:	4629      	mov	r1, r5
    ec3e:	4610      	mov	r0, r2
    ec40:	f016 f807 	bl	24c52 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    ec44:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    ec46:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    ec48:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    ec4c:	42ab      	cmp	r3, r5
    ec4e:	f0c0 80a9 	bcc.w	eda4 <nvs_write+0x1a4>
    ec52:	b11d      	cbz	r5, ec5c <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
    ec54:	f1b8 0f00 	cmp.w	r8, #0
    ec58:	f000 80a4 	beq.w	eda4 <nvs_write+0x1a4>
	wlk_addr = fs->ate_wra;
    ec5c:	6863      	ldr	r3, [r4, #4]
    ec5e:	9307      	str	r3, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    ec60:	4620      	mov	r0, r4
    ec62:	aa08      	add	r2, sp, #32
    ec64:	a907      	add	r1, sp, #28
		rd_addr = wlk_addr;
    ec66:	f8dd b01c 	ldr.w	fp, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    ec6a:	f016 f834 	bl	24cd6 <nvs_prev_ate>
		if (rc) {
    ec6e:	4606      	mov	r6, r0
    ec70:	2800      	cmp	r0, #0
    ec72:	d1d9      	bne.n	ec28 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    ec74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    ec78:	454b      	cmp	r3, r9
    ec7a:	d005      	beq.n	ec88 <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
    ec7c:	6862      	ldr	r2, [r4, #4]
    ec7e:	9b07      	ldr	r3, [sp, #28]
    ec80:	429a      	cmp	r2, r3
    ec82:	d1ed      	bne.n	ec60 <nvs_write+0x60>
		if (len == 0) {
    ec84:	b9e5      	cbnz	r5, ecc0 <nvs_write+0xc0>
    ec86:	e7cf      	b.n	ec28 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    ec88:	4620      	mov	r0, r4
    ec8a:	a908      	add	r1, sp, #32
    ec8c:	f015 ffeb 	bl	24c66 <nvs_ate_valid>
    ec90:	2800      	cmp	r0, #0
    ec92:	d0f3      	beq.n	ec7c <nvs_write+0x7c>
		rd_addr += wlk_ate.offset;
    ec94:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
			if (wlk_ate.len == 0U) {
    ec98:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
		if (len == 0) {
    ec9c:	b175      	cbz	r5, ecbc <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
    ec9e:	42ab      	cmp	r3, r5
    eca0:	d10e      	bne.n	ecc0 <nvs_write+0xc0>
		rd_addr &= ADDR_SECT_MASK;
    eca2:	ea4f 411b 	mov.w	r1, fp, lsr #16
    eca6:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    eca8:	4401      	add	r1, r0
    ecaa:	462b      	mov	r3, r5
    ecac:	4642      	mov	r2, r8
    ecae:	4620      	mov	r0, r4
    ecb0:	f015 ff67 	bl	24b82 <nvs_flash_block_cmp>
			if (rc <= 0) {
    ecb4:	2800      	cmp	r0, #0
    ecb6:	dc03      	bgt.n	ecc0 <nvs_write+0xc0>
    ecb8:	4606      	mov	r6, r0
    ecba:	e7b5      	b.n	ec28 <nvs_write+0x28>
			if (wlk_ate.len == 0U) {
    ecbc:	2b00      	cmp	r3, #0
    ecbe:	d0b3      	beq.n	ec28 <nvs_write+0x28>
	if (data_size) {
    ecc0:	2f00      	cmp	r7, #0
    ecc2:	d13e      	bne.n	ed42 <nvs_write+0x142>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    ecc4:	f104 0314 	add.w	r3, r4, #20
    ecc8:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
    ecca:	f04f 32ff 	mov.w	r2, #4294967295
    ecce:	f04f 33ff 	mov.w	r3, #4294967295
    ecd2:	f104 0014 	add.w	r0, r4, #20
    ecd6:	f010 fc9f 	bl	1f618 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    ecda:	f8df b0d8 	ldr.w	fp, [pc, #216]	; edb4 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    ecde:	89e3      	ldrh	r3, [r4, #14]
    ece0:	429e      	cmp	r6, r3
    ece2:	d05c      	beq.n	ed9e <nvs_write+0x19e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    ece4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    ece8:	18f9      	adds	r1, r7, r3
    ecea:	428a      	cmp	r2, r1
    ecec:	d32c      	bcc.n	ed48 <nvs_write+0x148>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    ecee:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	entry.part = 0xff;
    ecf2:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    ecf4:	a80a      	add	r0, sp, #40	; 0x28
	entry.part = 0xff;
    ecf6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	entry.id = id;
    ecfa:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
	entry.len = (uint16_t)len;
    ecfe:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	nvs_ate_crc8_update(&entry);
    ed02:	f015 ff68 	bl	24bd6 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    ed06:	462b      	mov	r3, r5
    ed08:	4642      	mov	r2, r8
    ed0a:	68a1      	ldr	r1, [r4, #8]
    ed0c:	4620      	mov	r0, r4
    ed0e:	f016 f82c 	bl	24d6a <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    ed12:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    ed14:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    ed16:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed18:	f015 ff9b 	bl	24c52 <nvs_al_size.isra.0>
    ed1c:	68a2      	ldr	r2, [r4, #8]
    ed1e:	4402      	add	r2, r0
    ed20:	60a2      	str	r2, [r4, #8]
	if (rc) {
    ed22:	f1ba 0f00 	cmp.w	sl, #0
    ed26:	d107      	bne.n	ed38 <nvs_write+0x138>
	rc = nvs_flash_ate_wrt(fs, &entry);
    ed28:	4620      	mov	r0, r4
    ed2a:	a90a      	add	r1, sp, #40	; 0x28
    ed2c:	f016 f857 	bl	24dde <nvs_flash_ate_wrt>
	rc = len;
    ed30:	2800      	cmp	r0, #0
    ed32:	bf14      	ite	ne
    ed34:	4682      	movne	sl, r0
    ed36:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    ed38:	9805      	ldr	r0, [sp, #20]
    ed3a:	f010 fd3d 	bl	1f7b8 <z_impl_k_mutex_unlock>
	return rc;
    ed3e:	4656      	mov	r6, sl
    ed40:	e772      	b.n	ec28 <nvs_write+0x28>
		required_space = data_size + ate_size;
    ed42:	4457      	add	r7, sl
    ed44:	b2bf      	uxth	r7, r7
    ed46:	e7bd      	b.n	ecc4 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ed48:	2108      	movs	r1, #8
    ed4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed4c:	f015 ff81 	bl	24c52 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    ed50:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ed54:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	close_ate.len = 0U;
    ed58:	2300      	movs	r3, #0
    ed5a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    ed5e:	1813      	adds	r3, r2, r0
    ed60:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	fs->ate_wra += (fs->sector_size - ate_size);
    ed64:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    ed66:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    ed6a:	441a      	add	r2, r3
    ed6c:	1a10      	subs	r0, r2, r0
    ed6e:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    ed70:	a80a      	add	r0, sp, #40	; 0x28
    ed72:	f015 ff30 	bl	24bd6 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    ed76:	a90a      	add	r1, sp, #40	; 0x28
    ed78:	4620      	mov	r0, r4
    ed7a:	f016 f830 	bl	24dde <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    ed7e:	4620      	mov	r0, r4
    ed80:	1d21      	adds	r1, r4, #4
    ed82:	f015 fef1 	bl	24b68 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    ed86:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    ed88:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    ed8a:	ea03 030b 	and.w	r3, r3, fp
    ed8e:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    ed90:	f7ff fc7e 	bl	e690 <nvs_gc>
		if (rc) {
    ed94:	4682      	mov	sl, r0
    ed96:	2800      	cmp	r0, #0
    ed98:	d1ce      	bne.n	ed38 <nvs_write+0x138>
		gc_count++;
    ed9a:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    ed9c:	e79f      	b.n	ecde <nvs_write+0xde>
			rc = -ENOSPC;
    ed9e:	f06f 0a1b 	mvn.w	sl, #27
    eda2:	e7c9      	b.n	ed38 <nvs_write+0x138>
		return -EINVAL;
    eda4:	f06f 0615 	mvn.w	r6, #21
    eda8:	e73e      	b.n	ec28 <nvs_write+0x28>
    edaa:	bf00      	nop
    edac:	0002c529 	.word	0x0002c529
    edb0:	0002a410 	.word	0x0002a410
    edb4:	ffff0000 	.word	0xffff0000

0000edb8 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    edb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    edbc:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    edbe:	7c03      	ldrb	r3, [r0, #16]
{
    edc0:	b088      	sub	sp, #32
    edc2:	4604      	mov	r4, r0
    edc4:	460f      	mov	r7, r1
    edc6:	4690      	mov	r8, r2
    edc8:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    edcc:	b96b      	cbnz	r3, edea <nvs_read_hist+0x32>
		LOG_ERR("NVS not initialized");
    edce:	4a2f      	ldr	r2, [pc, #188]	; (ee8c <nvs_read_hist+0xd4>)
    edd0:	4618      	mov	r0, r3
    edd2:	e9cd 3201 	strd	r3, r2, [sp, #4]
    edd6:	492e      	ldr	r1, [pc, #184]	; (ee90 <nvs_read_hist+0xd8>)
    edd8:	2201      	movs	r2, #1
    edda:	9300      	str	r3, [sp, #0]
    eddc:	f015 ff29 	bl	24c32 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    ede0:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    ede4:	b008      	add	sp, #32
    ede6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    edea:	2108      	movs	r1, #8
    edec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    edee:	f015 ff30 	bl	24c52 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    edf2:	89a3      	ldrh	r3, [r4, #12]
    edf4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    edf8:	42b3      	cmp	r3, r6
    edfa:	d343      	bcc.n	ee84 <nvs_read_hist+0xcc>
	cnt_his = 0U;
    edfc:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    edfe:	f8d4 a004 	ldr.w	sl, [r4, #4]
    ee02:	f8cd a014 	str.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
    ee06:	454d      	cmp	r5, r9
    ee08:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    ee0a:	f8dd a014 	ldr.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
    ee0e:	d909      	bls.n	ee24 <nvs_read_hist+0x6c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    ee10:	6863      	ldr	r3, [r4, #4]
    ee12:	4553      	cmp	r3, sl
    ee14:	d11e      	bne.n	ee54 <nvs_read_hist+0x9c>
    ee16:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    ee1a:	42bb      	cmp	r3, r7
    ee1c:	d01a      	beq.n	ee54 <nvs_read_hist+0x9c>
		return -ENOENT;
    ee1e:	f06f 0001 	mvn.w	r0, #1
    ee22:	e7df      	b.n	ede4 <nvs_read_hist+0x2c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    ee24:	4620      	mov	r0, r4
    ee26:	aa06      	add	r2, sp, #24
    ee28:	a905      	add	r1, sp, #20
    ee2a:	f015 ff54 	bl	24cd6 <nvs_prev_ate>
		if (rc) {
    ee2e:	2800      	cmp	r0, #0
    ee30:	d1d8      	bne.n	ede4 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    ee32:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    ee36:	42bb      	cmp	r3, r7
    ee38:	d106      	bne.n	ee48 <nvs_read_hist+0x90>
    ee3a:	4620      	mov	r0, r4
    ee3c:	a906      	add	r1, sp, #24
    ee3e:	f015 ff12 	bl	24c66 <nvs_ate_valid>
    ee42:	b108      	cbz	r0, ee48 <nvs_read_hist+0x90>
			cnt_his++;
    ee44:	3501      	adds	r5, #1
    ee46:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    ee48:	6862      	ldr	r2, [r4, #4]
    ee4a:	9b05      	ldr	r3, [sp, #20]
    ee4c:	429a      	cmp	r2, r3
    ee4e:	d1da      	bne.n	ee06 <nvs_read_hist+0x4e>
		rd_addr = wlk_addr;
    ee50:	4651      	mov	r1, sl
    ee52:	e7e0      	b.n	ee16 <nvs_read_hist+0x5e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    ee54:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    ee58:	2b00      	cmp	r3, #0
    ee5a:	d0e0      	beq.n	ee1e <nvs_read_hist+0x66>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    ee5c:	45a9      	cmp	r9, r5
    ee5e:	d8de      	bhi.n	ee1e <nvs_read_hist+0x66>
	rd_addr += wlk_ate.offset;
    ee60:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	rd_addr &= ADDR_SECT_MASK;
    ee64:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    ee66:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    ee68:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    ee6c:	bf28      	it	cs
    ee6e:	4633      	movcs	r3, r6
    ee70:	4401      	add	r1, r0
    ee72:	4642      	mov	r2, r8
    ee74:	4620      	mov	r0, r4
    ee76:	f015 fe69 	bl	24b4c <nvs_flash_rd>
	if (rc) {
    ee7a:	2800      	cmp	r0, #0
    ee7c:	d1b2      	bne.n	ede4 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    ee7e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    ee82:	e7af      	b.n	ede4 <nvs_read_hist+0x2c>
		return -EINVAL;
    ee84:	f06f 0015 	mvn.w	r0, #21
    ee88:	e7ac      	b.n	ede4 <nvs_read_hist+0x2c>
    ee8a:	bf00      	nop
    ee8c:	0002c529 	.word	0x0002c529
    ee90:	0002a410 	.word	0x0002a410

0000ee94 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    ee94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ee96:	4603      	mov	r3, r0
	const struct ipc_service_backend *backend;

	if (!instance) {
    ee98:	b960      	cbnz	r0, eeb4 <ipc_service_open_instance+0x20>
		LOG_ERR("Invalid instance");
    ee9a:	4a11      	ldr	r2, [pc, #68]	; (eee0 <ipc_service_open_instance+0x4c>)
    ee9c:	9000      	str	r0, [sp, #0]
    ee9e:	e9cd 0201 	strd	r0, r2, [sp, #4]
    eea2:	4910      	ldr	r1, [pc, #64]	; (eee4 <ipc_service_open_instance+0x50>)
    eea4:	2201      	movs	r2, #1
    eea6:	f015 ffb2 	bl	24e0e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    eeaa:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    eeae:	b005      	add	sp, #20
    eeb0:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    eeb4:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    eeb6:	b95b      	cbnz	r3, eed0 <ipc_service_open_instance+0x3c>
		LOG_ERR("Invalid backend configuration");
    eeb8:	4a0b      	ldr	r2, [pc, #44]	; (eee8 <ipc_service_open_instance+0x54>)
    eeba:	4618      	mov	r0, r3
    eebc:	e9cd 3201 	strd	r3, r2, [sp, #4]
    eec0:	4908      	ldr	r1, [pc, #32]	; (eee4 <ipc_service_open_instance+0x50>)
    eec2:	2201      	movs	r2, #1
    eec4:	9300      	str	r3, [sp, #0]
    eec6:	f015 ffa2 	bl	24e0e <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    eeca:	f06f 0004 	mvn.w	r0, #4
    eece:	e7ee      	b.n	eeae <ipc_service_open_instance+0x1a>
	if (!backend->open_instance) {
    eed0:	681b      	ldr	r3, [r3, #0]
    eed2:	b11b      	cbz	r3, eedc <ipc_service_open_instance+0x48>
}
    eed4:	b005      	add	sp, #20
    eed6:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    eeda:	4718      	bx	r3
		return 0;
    eedc:	4618      	mov	r0, r3
    eede:	e7e6      	b.n	eeae <ipc_service_open_instance+0x1a>
    eee0:	0002c68f 	.word	0x0002c68f
    eee4:	0002a418 	.word	0x0002a418
    eee8:	0002c6a0 	.word	0x0002c6a0

0000eeec <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    eeec:	b530      	push	{r4, r5, lr}
    eeee:	b085      	sub	sp, #20
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    eef0:	b108      	cbz	r0, eef6 <ipc_service_register_endpoint+0xa>
    eef2:	b101      	cbz	r1, eef6 <ipc_service_register_endpoint+0xa>
    eef4:	b96a      	cbnz	r2, ef12 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    eef6:	4b13      	ldr	r3, [pc, #76]	; (ef44 <ipc_service_register_endpoint+0x58>)
    eef8:	2201      	movs	r2, #1
    eefa:	9302      	str	r3, [sp, #8]
    eefc:	2300      	movs	r3, #0
    eefe:	4912      	ldr	r1, [pc, #72]	; (ef48 <ipc_service_register_endpoint+0x5c>)
    ef00:	4618      	mov	r0, r3
    ef02:	e9cd 3300 	strd	r3, r3, [sp]
    ef06:	f015 ff82 	bl	24e0e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    ef0a:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    ef0e:	b005      	add	sp, #20
    ef10:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    ef12:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    ef14:	b10c      	cbz	r4, ef1a <ipc_service_register_endpoint+0x2e>
    ef16:	68e5      	ldr	r5, [r4, #12]
    ef18:	b965      	cbnz	r5, ef34 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    ef1a:	4b0c      	ldr	r3, [pc, #48]	; (ef4c <ipc_service_register_endpoint+0x60>)
    ef1c:	2201      	movs	r2, #1
    ef1e:	9302      	str	r3, [sp, #8]
    ef20:	2300      	movs	r3, #0
    ef22:	4909      	ldr	r1, [pc, #36]	; (ef48 <ipc_service_register_endpoint+0x5c>)
    ef24:	4618      	mov	r0, r3
    ef26:	e9cd 3300 	strd	r3, r3, [sp]
    ef2a:	f015 ff70 	bl	24e0e <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    ef2e:	f06f 0004 	mvn.w	r0, #4
    ef32:	e7ec      	b.n	ef0e <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    ef34:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    ef38:	68e3      	ldr	r3, [r4, #12]
}
    ef3a:	b005      	add	sp, #20
    ef3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    ef40:	4718      	bx	r3
    ef42:	bf00      	nop
    ef44:	0002c6be 	.word	0x0002c6be
    ef48:	0002a418 	.word	0x0002a418
    ef4c:	0002c6a0 	.word	0x0002c6a0

0000ef50 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    ef50:	b530      	push	{r4, r5, lr}
    ef52:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    ef54:	4604      	mov	r4, r0
{
    ef56:	b085      	sub	sp, #20
	if (!ept) {
    ef58:	b960      	cbnz	r0, ef74 <ipc_service_send+0x24>
		LOG_ERR("Invalid endpoint");
    ef5a:	4b19      	ldr	r3, [pc, #100]	; (efc0 <ipc_service_send+0x70>)
    ef5c:	9000      	str	r0, [sp, #0]
    ef5e:	e9cd 0301 	strd	r0, r3, [sp, #4]
    ef62:	2201      	movs	r2, #1
    ef64:	4603      	mov	r3, r0
    ef66:	4917      	ldr	r1, [pc, #92]	; (efc4 <ipc_service_send+0x74>)
    ef68:	f015 ff51 	bl	24e0e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    ef6c:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    ef70:	b005      	add	sp, #20
    ef72:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    ef74:	6800      	ldr	r0, [r0, #0]
    ef76:	b958      	cbnz	r0, ef90 <ipc_service_send+0x40>
		LOG_ERR("Endpoint not registered\n");
    ef78:	4b13      	ldr	r3, [pc, #76]	; (efc8 <ipc_service_send+0x78>)
    ef7a:	9000      	str	r0, [sp, #0]
    ef7c:	e9cd 0301 	strd	r0, r3, [sp, #4]
    ef80:	2201      	movs	r2, #1
    ef82:	4603      	mov	r3, r0
    ef84:	490f      	ldr	r1, [pc, #60]	; (efc4 <ipc_service_send+0x74>)
    ef86:	f015 ff42 	bl	24e0e <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
    ef8a:	f06f 0001 	mvn.w	r0, #1
    ef8e:	e7ef      	b.n	ef70 <ipc_service_send+0x20>
	backend = ept->instance->api;
    ef90:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    ef92:	b10a      	cbz	r2, ef98 <ipc_service_send+0x48>
    ef94:	6895      	ldr	r5, [r2, #8]
    ef96:	b965      	cbnz	r5, efb2 <ipc_service_send+0x62>
		LOG_ERR("Invalid backend configuration");
    ef98:	4b0c      	ldr	r3, [pc, #48]	; (efcc <ipc_service_send+0x7c>)
    ef9a:	2201      	movs	r2, #1
    ef9c:	9302      	str	r3, [sp, #8]
    ef9e:	2300      	movs	r3, #0
    efa0:	4908      	ldr	r1, [pc, #32]	; (efc4 <ipc_service_send+0x74>)
    efa2:	4618      	mov	r0, r3
    efa4:	e9cd 3300 	strd	r3, r3, [sp]
    efa8:	f015 ff31 	bl	24e0e <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    efac:	f06f 0004 	mvn.w	r0, #4
    efb0:	e7de      	b.n	ef70 <ipc_service_send+0x20>
	return backend->send(ept->instance, ept->token, data, len);
    efb2:	460a      	mov	r2, r1
    efb4:	46ac      	mov	ip, r5
    efb6:	6861      	ldr	r1, [r4, #4]
}
    efb8:	b005      	add	sp, #20
    efba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    efbe:	4760      	bx	ip
    efc0:	0002c6ea 	.word	0x0002c6ea
    efc4:	0002a418 	.word	0x0002a418
    efc8:	0002c6fb 	.word	0x0002c6fb
    efcc:	0002c6a0 	.word	0x0002c6a0

0000efd0 <shared_memory_prepare>:
__ssp_bos_icheck3(memset, void *, int)
    efd0:	2000      	movs	r0, #0
    efd2:	4b01      	ldr	r3, [pc, #4]	; (efd8 <shared_memory_prepare+0x8>)
    efd4:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    efd6:	4770      	bx	lr
    efd8:	20070000 	.word	0x20070000

0000efdc <advertise_ept>:
{
    efdc:	b530      	push	{r4, r5, lr}
    efde:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    efe0:	490e      	ldr	r1, [pc, #56]	; (f01c <advertise_ept+0x40>)
{
    efe2:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    efe4:	9102      	str	r1, [sp, #8]
    efe6:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    efea:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    efec:	e9cd 3100 	strd	r3, r1, [sp]
    eff0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    eff4:	f04f 33ff 	mov.w	r3, #4294967295
    eff8:	4620      	mov	r0, r4
    effa:	f00f fa91 	bl	1e520 <rpmsg_create_ept>
	if (err != 0) {
    effe:	b950      	cbnz	r0, f016 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    f000:	2301      	movs	r3, #1
    f002:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    f006:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    f00a:	b123      	cbz	r3, f016 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    f00c:	4620      	mov	r0, r4
}
    f00e:	b005      	add	sp, #20
    f010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    f014:	4718      	bx	r3
}
    f016:	b005      	add	sp, #20
    f018:	bd30      	pop	{r4, r5, pc}
    f01a:	bf00      	nop
    f01c:	00024f1f 	.word	0x00024f1f

0000f020 <get_ept>:
{
    f020:	b538      	push	{r3, r4, r5, lr}
    f022:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f024:	4611      	mov	r1, r2
{
    f026:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f028:	f015 ff7b 	bl	24f22 <get_ept_slot_with_name>
	if (ept != NULL) {
    f02c:	4603      	mov	r3, r0
    f02e:	b938      	cbnz	r0, f040 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f030:	4628      	mov	r0, r5
    f032:	4904      	ldr	r1, [pc, #16]	; (f044 <get_ept+0x24>)
    f034:	f015 ff75 	bl	24f22 <get_ept_slot_with_name>
    f038:	4603      	mov	r3, r0
	if (ept != NULL) {
    f03a:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    f03c:	6023      	str	r3, [r4, #0]
}
    f03e:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    f040:	2001      	movs	r0, #1
    f042:	e7fb      	b.n	f03c <get_ept+0x1c>
    f044:	0002ee3c 	.word	0x0002ee3c

0000f048 <open>:
{
    f048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f04c:	2301      	movs	r3, #1
    f04e:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    f050:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f052:	6846      	ldr	r6, [r0, #4]
{
    f054:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    f056:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f05a:	e8d7 2fef 	ldaex	r2, [r7]
    f05e:	2a00      	cmp	r2, #0
    f060:	d103      	bne.n	f06a <open+0x22>
    f062:	e8c7 3fe1 	stlex	r1, r3, [r7]
    f066:	2900      	cmp	r1, #0
    f068:	d1f7      	bne.n	f05a <open+0x12>
    f06a:	f040 80b8 	bne.w	f1de <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    f06e:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f070:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    f072:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f074:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    f076:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    f07a:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    f07e:	bf26      	itte	cs
    f080:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    f084:	fab3 f383 	clzcs	r3, r3
		return 0;
    f088:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    f08a:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    f08e:	bf28      	it	cs
    f090:	f1c3 0320 	rsbcs	r3, r3, #32
    f094:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    f096:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    f098:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    f09c:	f000 8099 	beq.w	f1d2 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    f0a0:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f0a2:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    f0a4:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    f0a6:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    f0a8:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    f0ac:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f0ae:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    f0b0:	3209      	adds	r2, #9
    f0b2:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    f0b6:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    f0b8:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    f0bc:	440a      	add	r2, r1
	return (buf_size * num);
    f0be:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f0c0:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    f0c4:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    f0c6:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    f0ca:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    f0ce:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f0d0:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    f0d2:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    f0d6:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    f0da:	3303      	adds	r3, #3
    f0dc:	4413      	add	r3, r2
    f0de:	f023 0303 	bic.w	r3, r3, #3
    f0e2:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    f0e6:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    f0e8:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    f0ec:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    f0f0:	4b3c      	ldr	r3, [pc, #240]	; (f1e4 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f0f2:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    f0f4:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f0f8:	6831      	ldr	r1, [r6, #0]
    f0fa:	f000 fa1d 	bl	f538 <ipc_static_vrings_init>
	if (err != 0) {
    f0fe:	4604      	mov	r4, r0
    f100:	bb30      	cbnz	r0, f150 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    f102:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    f106:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f10a:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    f10e:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f112:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    f114:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f116:	bf08      	it	eq
    f118:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    f11a:	f011 f853 	bl	201c4 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    f11e:	2300      	movs	r3, #0
    f120:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    f124:	4930      	ldr	r1, [pc, #192]	; (f1e8 <open+0x1a0>)
    f126:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f12a:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    f12e:	9300      	str	r3, [sp, #0]
    f130:	4658      	mov	r0, fp
    f132:	4623      	mov	r3, r4
    f134:	f011 f860 	bl	201f8 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    f138:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    f13c:	492b      	ldr	r1, [pc, #172]	; (f1ec <open+0x1a4>)
    f13e:	f010 ff75 	bl	2002c <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    f142:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    f146:	6883      	ldr	r3, [r0, #8]
    f148:	685c      	ldr	r4, [r3, #4]
    f14a:	b91c      	cbnz	r4, f154 <open+0x10c>
		return -ENOSYS;
    f14c:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    f150:	2100      	movs	r1, #0
    f152:	e037      	b.n	f1c4 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f154:	464b      	mov	r3, r9
    f156:	4a26      	ldr	r2, [pc, #152]	; (f1f0 <open+0x1a8>)
    f158:	f8da 1018 	ldr.w	r1, [sl, #24]
    f15c:	47a0      	blx	r4
	if (err != 0) {
    f15e:	4604      	mov	r4, r0
    f160:	2800      	cmp	r0, #0
    f162:	d1f5      	bne.n	f150 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    f164:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    f168:	6883      	ldr	r3, [r0, #8]
    f16a:	691b      	ldr	r3, [r3, #16]
    f16c:	2b00      	cmp	r3, #0
    f16e:	d0ed      	beq.n	f14c <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    f170:	2201      	movs	r2, #1
    f172:	f8da 1018 	ldr.w	r1, [sl, #24]
    f176:	4798      	blx	r3
	if (err != 0) {
    f178:	4604      	mov	r4, r0
    f17a:	2800      	cmp	r0, #0
    f17c:	d1e8      	bne.n	f150 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    f17e:	4b1d      	ldr	r3, [pc, #116]	; (f1f4 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f180:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    f182:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    f186:	4b1c      	ldr	r3, [pc, #112]	; (f1f8 <open+0x1b0>)
    f188:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f18c:	4b1b      	ldr	r3, [pc, #108]	; (f1fc <open+0x1b4>)
    f18e:	9303      	str	r3, [sp, #12]
    f190:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    f194:	9302      	str	r3, [sp, #8]
    f196:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    f19a:	e9cd 8300 	strd	r8, r3, [sp]
    f19e:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    f1a2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    f1a4:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f1a8:	f000 f98e 	bl	f4c8 <ipc_rpmsg_init>
	if (err != 0) {
    f1ac:	4604      	mov	r4, r0
    f1ae:	2800      	cmp	r0, #0
    f1b0:	d1ce      	bne.n	f150 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f1b2:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    f1b6:	f00f fb57 	bl	1e868 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    f1ba:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f1bc:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    f1c0:	db0a      	blt.n	f1d8 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    f1c2:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    f1c4:	4638      	mov	r0, r7
    f1c6:	f015 fee1 	bl	24f8c <atomic_set.isra.0>
}
    f1ca:	4620      	mov	r0, r4
    f1cc:	b005      	add	sp, #20
    f1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    f1d2:	f06f 040b 	mvn.w	r4, #11
    f1d6:	e7bb      	b.n	f150 <open+0x108>
		err = -EINVAL;
    f1d8:	f06f 0415 	mvn.w	r4, #21
    f1dc:	e7b8      	b.n	f150 <open+0x108>
		return -EALREADY;
    f1de:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f1e2:	e7f2      	b.n	f1ca <open+0x182>
    f1e4:	00024f75 	.word	0x00024f75
    f1e8:	20031050 	.word	0x20031050
    f1ec:	00024f5b 	.word	0x00024f5b
    f1f0:	00024f4f 	.word	0x00024f4f
    f1f4:	0000f2c5 	.word	0x0000f2c5
    f1f8:	0002502d 	.word	0x0002502d
    f1fc:	00024fbd 	.word	0x00024fbd

0000f200 <close>:
{
    f200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f204:	4606      	mov	r6, r0
    f206:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    f20a:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f20c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    f210:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f214:	e8d7 3fef 	ldaex	r3, [r7]
    f218:	2b02      	cmp	r3, #2
    f21a:	d103      	bne.n	f224 <close+0x24>
    f21c:	e8c7 9fe2 	stlex	r2, r9, [r7]
    f220:	2a00      	cmp	r2, #0
    f222:	d1f7      	bne.n	f214 <close+0x14>
    f224:	d149      	bne.n	f2ba <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    f226:	4826      	ldr	r0, [pc, #152]	; (f2c0 <close+0xc0>)
    f228:	f105 0140 	add.w	r1, r5, #64	; 0x40
    f22c:	f7fa f88e 	bl	934c <strcmp>
    f230:	b120      	cbz	r0, f23c <close+0x3c>
		return -EBUSY;
    f232:	f06f 040f 	mvn.w	r4, #15
}
    f236:	4620      	mov	r0, r4
    f238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    f23c:	4820      	ldr	r0, [pc, #128]	; (f2c0 <close+0xc0>)
    f23e:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    f242:	f7fa f883 	bl	934c <strcmp>
    f246:	2800      	cmp	r0, #0
    f248:	d1f3      	bne.n	f232 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    f24a:	4628      	mov	r0, r5
    f24c:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f250:	f015 ff1f 	bl	25092 <ipc_rpmsg_deinit>
	if (err != 0) {
    f254:	4604      	mov	r4, r0
    f256:	bb70      	cbnz	r0, f2b6 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    f258:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    f25a:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    f25c:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    f25e:	6883      	ldr	r3, [r0, #8]
    f260:	691b      	ldr	r3, [r3, #16]
    f262:	b333      	cbz	r3, f2b2 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    f264:	4622      	mov	r2, r4
    f266:	6989      	ldr	r1, [r1, #24]
    f268:	4798      	blx	r3
	if (err != 0) {
    f26a:	4604      	mov	r4, r0
    f26c:	bb18      	cbnz	r0, f2b6 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    f26e:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    f272:	4649      	mov	r1, r9
    f274:	4630      	mov	r0, r6
    f276:	f011 f827 	bl	202c8 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    f27a:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    f27c:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    f280:	f001 fa8e 	bl	107a0 <z_impl_k_thread_abort>
    f284:	4630      	mov	r0, r6
    f286:	f8d8 1000 	ldr.w	r1, [r8]
    f28a:	f015 ff3f 	bl	2510c <ipc_static_vrings_deinit>
	if (err != 0) {
    f28e:	4604      	mov	r4, r0
    f290:	b988      	cbnz	r0, f2b6 <close+0xb6>
    f292:	4601      	mov	r1, r0
    f294:	22e8      	movs	r2, #232	; 0xe8
    f296:	4630      	mov	r0, r6
    f298:	f01a f925 	bl	294e6 <memset>
    f29c:	4621      	mov	r1, r4
    f29e:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    f2a2:	4628      	mov	r0, r5
    f2a4:	f01a f91f 	bl	294e6 <memset>
	atomic_set(&data->state, STATE_READY);
    f2a8:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    f2aa:	4638      	mov	r0, r7
    f2ac:	f015 fe6e 	bl	24f8c <atomic_set.isra.0>
	return err;
    f2b0:	e7c1      	b.n	f236 <close+0x36>
		return -ENOSYS;
    f2b2:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    f2b6:	2102      	movs	r1, #2
    f2b8:	e7f7      	b.n	f2aa <close+0xaa>
		return -EALREADY;
    f2ba:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f2be:	e7ba      	b.n	f236 <close+0x36>
    f2c0:	0002ee3c 	.word	0x0002ee3c

0000f2c4 <bound_cb>:
{
    f2c4:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    f2c6:	4604      	mov	r4, r0
    f2c8:	b140      	cbz	r0, f2dc <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    f2ca:	2300      	movs	r3, #0
    f2cc:	2201      	movs	r2, #1
    f2ce:	e9cd 3200 	strd	r3, r2, [sp]
    f2d2:	4b07      	ldr	r3, [pc, #28]	; (f2f0 <bound_cb+0x2c>)
    f2d4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f2d8:	f00f f8d6 	bl	1e488 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    f2dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f2de:	681b      	ldr	r3, [r3, #0]
    f2e0:	b123      	cbz	r3, f2ec <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    f2e2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    f2e4:	b002      	add	sp, #8
    f2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    f2ea:	4718      	bx	r3
}
    f2ec:	b002      	add	sp, #8
    f2ee:	bd10      	pop	{r4, pc}
    f2f0:	0002ee3c 	.word	0x0002ee3c

0000f2f4 <send>:
{
    f2f4:	b513      	push	{r0, r1, r4, lr}
    f2f6:	4604      	mov	r4, r0
    f2f8:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f2fa:	6921      	ldr	r1, [r4, #16]
    f2fc:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    f300:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    f304:	2902      	cmp	r1, #2
    f306:	d110      	bne.n	f32a <send+0x36>
	if (len == 0) {
    f308:	b193      	cbz	r3, f330 <send+0x3c>
	if (!rpmsg_ept) {
    f30a:	b1a0      	cbz	r0, f336 <send+0x42>
    f30c:	2101      	movs	r1, #1
    f30e:	e9cd 3100 	strd	r3, r1, [sp]
    f312:	4613      	mov	r3, r2
    f314:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f318:	f00f f8b6 	bl	1e488 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    f31c:	4b07      	ldr	r3, [pc, #28]	; (f33c <send+0x48>)
		return -ENOMEM;
    f31e:	4298      	cmp	r0, r3
    f320:	bf08      	it	eq
    f322:	f06f 000b 	mvneq.w	r0, #11
}
    f326:	b002      	add	sp, #8
    f328:	bd10      	pop	{r4, pc}
		return -EBUSY;
    f32a:	f06f 000f 	mvn.w	r0, #15
    f32e:	e7fa      	b.n	f326 <send+0x32>
		return -EBADMSG;
    f330:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    f334:	e7f7      	b.n	f326 <send+0x32>
		return -ENOENT;
    f336:	f06f 0001 	mvn.w	r0, #1
    f33a:	e7f4      	b.n	f326 <send+0x32>
    f33c:	fffff82e 	.word	0xfffff82e

0000f340 <register_ept>:
{
    f340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f344:	4688      	mov	r8, r1
    f346:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    f348:	6906      	ldr	r6, [r0, #16]
    f34a:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    f34e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    f352:	2b02      	cmp	r3, #2
    f354:	d15f      	bne.n	f416 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    f356:	6813      	ldr	r3, [r2, #0]
    f358:	b923      	cbnz	r3, f364 <register_ept+0x24>
		return -EINVAL;
    f35a:	f06f 0015 	mvn.w	r0, #21
}
    f35e:	b003      	add	sp, #12
    f360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    f364:	781b      	ldrb	r3, [r3, #0]
    f366:	2b00      	cmp	r3, #0
    f368:	d0f7      	beq.n	f35a <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    f36a:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    f36e:	f1b9 0f00 	cmp.w	r9, #0
    f372:	d133      	bne.n	f3dc <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    f374:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    f378:	f04f 32ff 	mov.w	r2, #4294967295
    f37c:	f04f 33ff 	mov.w	r3, #4294967295
    f380:	4638      	mov	r0, r7
    f382:	f010 f949 	bl	1f618 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    f386:	4630      	mov	r0, r6
    f388:	682a      	ldr	r2, [r5, #0]
    f38a:	a901      	add	r1, sp, #4
    f38c:	f7ff fe48 	bl	f020 <get_ept>
	if (rpmsg_ept == NULL) {
    f390:	9c01      	ldr	r4, [sp, #4]
    f392:	b91c      	cbnz	r4, f39c <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f394:	4638      	mov	r0, r7
    f396:	f015 fdf7 	bl	24f88 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    f39a:	e7de      	b.n	f35a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    f39c:	f105 0308 	add.w	r3, r5, #8
    f3a0:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    f3a2:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    f3a4:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    f3a8:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    f3aa:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    f3ac:	b160      	cbz	r0, f3c8 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f3ae:	4638      	mov	r0, r7
    f3b0:	f015 fdea 	bl	24f88 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    f3b4:	4621      	mov	r1, r4
    f3b6:	4630      	mov	r0, r6
    f3b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    f3ba:	682a      	ldr	r2, [r5, #0]
    f3bc:	f7ff fe0e 	bl	efdc <advertise_ept>
	return 0;
    f3c0:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    f3c2:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    f3c6:	e7ca      	b.n	f35e <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    f3c8:	2220      	movs	r2, #32
    f3ca:	6829      	ldr	r1, [r5, #0]
    f3cc:	f104 0040 	add.w	r0, r4, #64	; 0x40
    f3d0:	f01a f9cb 	bl	2976a <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    f3d4:	4638      	mov	r0, r7
    f3d6:	f015 fdd7 	bl	24f88 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    f3da:	e7f1      	b.n	f3c0 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f3dc:	4630      	mov	r0, r6
    f3de:	490f      	ldr	r1, [pc, #60]	; (f41c <register_ept+0xdc>)
    f3e0:	f015 fd9f 	bl	24f22 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    f3e4:	4604      	mov	r4, r0
    f3e6:	2800      	cmp	r0, #0
    f3e8:	d0b7      	beq.n	f35a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    f3ea:	f105 0308 	add.w	r3, r5, #8
    f3ee:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    f3f0:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    f3f2:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    f3f4:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    f3f6:	2300      	movs	r3, #0
    f3f8:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    f3fc:	2220      	movs	r2, #32
    f3fe:	6829      	ldr	r1, [r5, #0]
    f400:	3040      	adds	r0, #64	; 0x40
    f402:	f01a f9b2 	bl	2976a <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    f406:	4622      	mov	r2, r4
    f408:	2101      	movs	r1, #1
    f40a:	4630      	mov	r0, r6
    f40c:	f000 f83e 	bl	f48c <ipc_rpmsg_register_ept>
	if (err != 0) {
    f410:	2800      	cmp	r0, #0
    f412:	d0d5      	beq.n	f3c0 <register_ept+0x80>
    f414:	e7a1      	b.n	f35a <register_ept+0x1a>
		return -EBUSY;
    f416:	f06f 000f 	mvn.w	r0, #15
    f41a:	e7a0      	b.n	f35e <register_ept+0x1e>
    f41c:	0002ee3c 	.word	0x0002ee3c

0000f420 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    f420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f424:	4605      	mov	r5, r0
    f426:	460e      	mov	r6, r1
    f428:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f42a:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    f42c:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    f430:	b085      	sub	sp, #20
    f432:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    f436:	4621      	mov	r1, r4
    f438:	4630      	mov	r0, r6
    f43a:	f7f9 ff87 	bl	934c <strcmp>
    f43e:	b9e0      	cbnz	r0, f47a <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f440:	4b11      	ldr	r3, [pc, #68]	; (f488 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    f442:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f446:	9302      	str	r3, [sp, #8]
    f448:	f8da 3010 	ldr.w	r3, [sl, #16]
    f44c:	4632      	mov	r2, r6
    f44e:	e9cd 8300 	strd	r8, r3, [sp]
    f452:	4629      	mov	r1, r5
    f454:	f04f 33ff 	mov.w	r3, #4294967295
    f458:	4658      	mov	r0, fp
    f45a:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    f45e:	f00f f85f 	bl	1e520 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    f462:	b960      	cbnz	r0, f47e <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    f464:	2370      	movs	r3, #112	; 0x70
    f466:	2201      	movs	r2, #1
    f468:	fb03 9307 	mla	r3, r3, r7, r9
    f46c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    f470:	f8da 300c 	ldr.w	r3, [sl, #12]
    f474:	b10b      	cbz	r3, f47a <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    f476:	4658      	mov	r0, fp
    f478:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f47a:	3470      	adds	r4, #112	; 0x70
    f47c:	b117      	cbz	r7, f484 <ns_bind_cb+0x64>
			}
		}
	}
}
    f47e:	b005      	add	sp, #20
    f480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    f484:	2701      	movs	r7, #1
    f486:	e7d6      	b.n	f436 <ns_bind_cb+0x16>
    f488:	0002508f 	.word	0x0002508f

0000f48c <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    f48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f48e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    f490:	b190      	cbz	r0, f4b8 <ipc_rpmsg_register_ept+0x2c>
    f492:	b18a      	cbz	r2, f4b8 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    f494:	2901      	cmp	r1, #1
    f496:	d112      	bne.n	f4be <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    f498:	4b0a      	ldr	r3, [pc, #40]	; (f4c4 <ipc_rpmsg_register_ept+0x38>)
    f49a:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f49e:	9302      	str	r3, [sp, #8]
    f4a0:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    f4a4:	3240      	adds	r2, #64	; 0x40
    f4a6:	9301      	str	r3, [sp, #4]
    f4a8:	f04f 33ff 	mov.w	r3, #4294967295
    f4ac:	4620      	mov	r0, r4
    f4ae:	9300      	str	r3, [sp, #0]
    f4b0:	f00f f836 	bl	1e520 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    f4b4:	b004      	add	sp, #16
    f4b6:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f4b8:	f06f 0015 	mvn.w	r0, #21
    f4bc:	e7fa      	b.n	f4b4 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    f4be:	2000      	movs	r0, #0
    f4c0:	e7f8      	b.n	f4b4 <ipc_rpmsg_register_ept+0x28>
    f4c2:	bf00      	nop
    f4c4:	0002508f 	.word	0x0002508f

0000f4c8 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    f4c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f4cc:	b087      	sub	sp, #28
    f4ce:	460e      	mov	r6, r1
    f4d0:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    f4d4:	4614      	mov	r4, r2
    f4d6:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    f4da:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    f4dc:	b330      	cbz	r0, f52c <ipc_rpmsg_init+0x64>
    f4de:	b329      	cbz	r1, f52c <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    f4e0:	f8df c050 	ldr.w	ip, [pc, #80]	; f534 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    f4e4:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    f4e8:	2d00      	cmp	r5, #0
    f4ea:	bf08      	it	eq
    f4ec:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    f4ee:	b99e      	cbnz	r6, f518 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    f4f0:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    f4f4:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    f4f8:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    f4fa:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    f4fc:	f019 fd5a 	bl	28fb4 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    f500:	ab03      	add	r3, sp, #12
    f502:	e9cd 4300 	strd	r4, r3, [sp]
    f506:	462a      	mov	r2, r5
    f508:	463b      	mov	r3, r7
    f50a:	4641      	mov	r1, r8
    f50c:	4648      	mov	r0, r9
    f50e:	f00f f9d1 	bl	1e8b4 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    f512:	b007      	add	sp, #28
    f514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    f518:	2200      	movs	r2, #0
    f51a:	4641      	mov	r1, r8
    f51c:	920e      	str	r2, [sp, #56]	; 0x38
    f51e:	4648      	mov	r0, r9
    f520:	462a      	mov	r2, r5
}
    f522:	b007      	add	sp, #28
    f524:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    f528:	f00f baee 	b.w	1eb08 <rpmsg_init_vdev>
		return -EINVAL;
    f52c:	f06f 0015 	mvn.w	r0, #21
    f530:	e7ef      	b.n	f512 <ipc_rpmsg_init+0x4a>
    f532:	bf00      	nop
    f534:	0000f421 	.word	0x0000f421

0000f538 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    f538:	b5f0      	push	{r4, r5, r6, r7, lr}
    f53a:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    f53c:	4604      	mov	r4, r0
{
    f53e:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    f540:	2800      	cmp	r0, #0
    f542:	d06f      	beq.n	f624 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    f544:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    f546:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    f548:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f54a:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    f54c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    f550:	4f36      	ldr	r7, [pc, #216]	; (f62c <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f552:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    f554:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    f558:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    f55c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    f560:	f04f 33ff 	mov.w	r3, #4294967295
    f564:	9300      	str	r3, [sp, #0]
    f566:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    f568:	f019 f88d 	bl	28686 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    f56c:	4a30      	ldr	r2, [pc, #192]	; (f630 <ipc_static_vrings_init+0xf8>)
    f56e:	ab06      	add	r3, sp, #24
    f570:	e892 0003 	ldmia.w	r2, {r0, r1}
    f574:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    f578:	4618      	mov	r0, r3
    f57a:	f00e fea5 	bl	1e2c8 <metal_init>
	if (err != 0) {
    f57e:	4605      	mov	r5, r0
    f580:	b9d8      	cbnz	r0, f5ba <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    f582:	f104 0034 	add.w	r0, r4, #52	; 0x34
    f586:	f00e fe7f 	bl	1e288 <metal_register_generic_device>
	if (err != 0) {
    f58a:	4605      	mov	r5, r0
    f58c:	b9a8      	cbnz	r0, f5ba <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    f58e:	4639      	mov	r1, r7
    f590:	4828      	ldr	r0, [pc, #160]	; (f634 <ipc_static_vrings_init+0xfc>)
    f592:	aa05      	add	r2, sp, #20
    f594:	f019 f84f 	bl	28636 <metal_device_open>
	if (err != 0) {
    f598:	4605      	mov	r5, r0
    f59a:	b970      	cbnz	r0, f5ba <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    f59c:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    f59e:	689a      	ldr	r2, [r3, #8]
    f5a0:	b172      	cbz	r2, f5c0 <ipc_static_vrings_init+0x88>
    f5a2:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    f5a4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    f5a8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    f5ac:	f015 fda0 	bl	250f0 <virtqueue_allocate>
    f5b0:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    f5b4:	b930      	cbnz	r0, f5c4 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    f5b6:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    f5ba:	4628      	mov	r0, r5
    f5bc:	b009      	add	sp, #36	; 0x24
    f5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5c0:	4603      	mov	r3, r0
    f5c2:	e7ef      	b.n	f5a4 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    f5c4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    f5c8:	f015 fd92 	bl	250f0 <virtqueue_allocate>
    f5cc:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    f5d0:	2800      	cmp	r0, #0
    f5d2:	d0f0      	beq.n	f5b6 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    f5d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    f5d8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    f5dc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    f5e0:	2304      	movs	r3, #4
    f5e2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    f5e6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    f5ea:	2302      	movs	r3, #2
    f5ec:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    f5ee:	4b12      	ldr	r3, [pc, #72]	; (f638 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    f5f0:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    f5f4:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    f5f8:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    f5fc:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    f600:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    f604:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    f606:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    f60a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    f60e:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    f612:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    f616:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    f61a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    f61e:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    f620:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    f622:	e7ca      	b.n	f5ba <ipc_static_vrings_init+0x82>
		return -EINVAL;
    f624:	f06f 0515 	mvn.w	r5, #21
    f628:	e7c7      	b.n	f5ba <ipc_static_vrings_init+0x82>
    f62a:	bf00      	nop
    f62c:	0002c725 	.word	0x0002c725
    f630:	0002a4b4 	.word	0x0002a4b4
    f634:	0002c72f 	.word	0x0002c72f
    f638:	0002a9f4 	.word	0x0002a9f4

0000f63c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    f63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f640:	4605      	mov	r5, r0
	__asm__ volatile(
    f642:	f04f 0320 	mov.w	r3, #32
    f646:	f3ef 8611 	mrs	r6, BASEPRI
    f64a:	f383 8812 	msr	BASEPRI_MAX, r3
    f64e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f652:	4820      	ldr	r0, [pc, #128]	; (f6d4 <pm_state_notify+0x98>)
    f654:	f00f ff8a 	bl	1f56c <z_spin_lock_valid>
    f658:	b968      	cbnz	r0, f676 <pm_state_notify+0x3a>
    f65a:	2394      	movs	r3, #148	; 0x94
    f65c:	4a1e      	ldr	r2, [pc, #120]	; (f6d8 <pm_state_notify+0x9c>)
    f65e:	491f      	ldr	r1, [pc, #124]	; (f6dc <pm_state_notify+0xa0>)
    f660:	481f      	ldr	r0, [pc, #124]	; (f6e0 <pm_state_notify+0xa4>)
    f662:	f015 f9a0 	bl	249a6 <assert_print>
    f666:	491b      	ldr	r1, [pc, #108]	; (f6d4 <pm_state_notify+0x98>)
    f668:	481e      	ldr	r0, [pc, #120]	; (f6e4 <pm_state_notify+0xa8>)
    f66a:	f015 f99c 	bl	249a6 <assert_print>
    f66e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f670:	4819      	ldr	r0, [pc, #100]	; (f6d8 <pm_state_notify+0x9c>)
    f672:	f015 f991 	bl	24998 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    f676:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    f67a:	4816      	ldr	r0, [pc, #88]	; (f6d4 <pm_state_notify+0x98>)
    f67c:	f00f ff92 	bl	1f5a4 <z_spin_lock_set_owner>
	return list->head;
    f680:	4b19      	ldr	r3, [pc, #100]	; (f6e8 <pm_state_notify+0xac>)
    f682:	4f1a      	ldr	r7, [pc, #104]	; (f6ec <pm_state_notify+0xb0>)
    f684:	681c      	ldr	r4, [r3, #0]
    f686:	f8df 8068 	ldr.w	r8, [pc, #104]	; f6f0 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    f68a:	b97c      	cbnz	r4, f6ac <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f68c:	4811      	ldr	r0, [pc, #68]	; (f6d4 <pm_state_notify+0x98>)
    f68e:	f00f ff7b 	bl	1f588 <z_spin_unlock_valid>
    f692:	b9c8      	cbnz	r0, f6c8 <pm_state_notify+0x8c>
    f694:	23c2      	movs	r3, #194	; 0xc2
    f696:	4a10      	ldr	r2, [pc, #64]	; (f6d8 <pm_state_notify+0x9c>)
    f698:	4916      	ldr	r1, [pc, #88]	; (f6f4 <pm_state_notify+0xb8>)
    f69a:	4811      	ldr	r0, [pc, #68]	; (f6e0 <pm_state_notify+0xa4>)
    f69c:	f015 f983 	bl	249a6 <assert_print>
    f6a0:	490c      	ldr	r1, [pc, #48]	; (f6d4 <pm_state_notify+0x98>)
    f6a2:	4815      	ldr	r0, [pc, #84]	; (f6f8 <pm_state_notify+0xbc>)
    f6a4:	f015 f97f 	bl	249a6 <assert_print>
    f6a8:	21c2      	movs	r1, #194	; 0xc2
    f6aa:	e7e1      	b.n	f670 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    f6ac:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    f6b0:	2d00      	cmp	r5, #0
    f6b2:	bf18      	it	ne
    f6b4:	4613      	movne	r3, r2
		if (callback) {
    f6b6:	b12b      	cbz	r3, f6c4 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    f6b8:	f898 2014 	ldrb.w	r2, [r8, #20]
    f6bc:	fb09 f202 	mul.w	r2, r9, r2
    f6c0:	5cb8      	ldrb	r0, [r7, r2]
    f6c2:	4798      	blx	r3
	return node->next;
    f6c4:	6824      	ldr	r4, [r4, #0]
    f6c6:	e7e0      	b.n	f68a <pm_state_notify+0x4e>
	__asm__ volatile(
    f6c8:	f386 8811 	msr	BASEPRI, r6
    f6cc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    f6d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f6d4:	20020ee4 	.word	0x20020ee4
    f6d8:	0002c034 	.word	0x0002c034
    f6dc:	0002c08d 	.word	0x0002c08d
    f6e0:	0002b339 	.word	0x0002b339
    f6e4:	0002c0a2 	.word	0x0002c0a2
    f6e8:	20020f04 	.word	0x20020f04
    f6ec:	20020ef8 	.word	0x20020ef8
    f6f0:	20021460 	.word	0x20021460
    f6f4:	0002c061 	.word	0x0002c061
    f6f8:	0002c078 	.word	0x0002c078

0000f6fc <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    f6fc:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    f6fe:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    f700:	4b16      	ldr	r3, [pc, #88]	; (f75c <pm_system_resume+0x60>)
    f702:	7d1c      	ldrb	r4, [r3, #20]
    f704:	f004 031f 	and.w	r3, r4, #31
    f708:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f70a:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f70c:	4b14      	ldr	r3, [pc, #80]	; (f760 <pm_system_resume+0x64>)
    f70e:	0961      	lsrs	r1, r4, #5
    f710:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f714:	e8d3 1fef 	ldaex	r1, [r3]
    f718:	ea01 0500 	and.w	r5, r1, r0
    f71c:	e8c3 5fe6 	stlex	r6, r5, [r3]
    f720:	2e00      	cmp	r6, #0
    f722:	d1f7      	bne.n	f714 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    f724:	420a      	tst	r2, r1
    f726:	d013      	beq.n	f750 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    f728:	4b0e      	ldr	r3, [pc, #56]	; (f764 <pm_system_resume+0x68>)
    f72a:	4d0f      	ldr	r5, [pc, #60]	; (f768 <pm_system_resume+0x6c>)
    f72c:	b18b      	cbz	r3, f752 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    f72e:	230c      	movs	r3, #12
    f730:	4363      	muls	r3, r4
    f732:	18ea      	adds	r2, r5, r3
    f734:	7851      	ldrb	r1, [r2, #1]
    f736:	5ce8      	ldrb	r0, [r5, r3]
    f738:	f015 f97a 	bl	24a30 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    f73c:	2000      	movs	r0, #0
    f73e:	f7ff ff7d 	bl	f63c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    f742:	230c      	movs	r3, #12
    f744:	435c      	muls	r4, r3
    f746:	2300      	movs	r3, #0
    f748:	192a      	adds	r2, r5, r4
    f74a:	512b      	str	r3, [r5, r4]
    f74c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    f750:	bd70      	pop	{r4, r5, r6, pc}
    f752:	f383 8811 	msr	BASEPRI, r3
    f756:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    f75a:	e7ef      	b.n	f73c <pm_system_resume+0x40>
    f75c:	20021460 	.word	0x20021460
    f760:	20020f0c 	.word	0x20020f0c
    f764:	00024a31 	.word	0x00024a31
    f768:	20020ef8 	.word	0x20020ef8

0000f76c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    f76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    f770:	4b45      	ldr	r3, [pc, #276]	; (f888 <pm_system_suspend+0x11c>)
{
    f772:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    f774:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    f776:	f04f 0320 	mov.w	r3, #32
    f77a:	f3ef 8811 	mrs	r8, BASEPRI
    f77e:	f383 8812 	msr	BASEPRI_MAX, r3
    f782:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f786:	4841      	ldr	r0, [pc, #260]	; (f88c <pm_system_suspend+0x120>)
    f788:	f00f fef0 	bl	1f56c <z_spin_lock_valid>
    f78c:	b968      	cbnz	r0, f7aa <pm_system_suspend+0x3e>
    f78e:	2394      	movs	r3, #148	; 0x94
    f790:	4a3f      	ldr	r2, [pc, #252]	; (f890 <pm_system_suspend+0x124>)
    f792:	4940      	ldr	r1, [pc, #256]	; (f894 <pm_system_suspend+0x128>)
    f794:	4840      	ldr	r0, [pc, #256]	; (f898 <pm_system_suspend+0x12c>)
    f796:	f015 f906 	bl	249a6 <assert_print>
    f79a:	493c      	ldr	r1, [pc, #240]	; (f88c <pm_system_suspend+0x120>)
    f79c:	483f      	ldr	r0, [pc, #252]	; (f89c <pm_system_suspend+0x130>)
    f79e:	f015 f902 	bl	249a6 <assert_print>
    f7a2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f7a4:	483a      	ldr	r0, [pc, #232]	; (f890 <pm_system_suspend+0x124>)
    f7a6:	f015 f8f7 	bl	24998 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    f7aa:	240c      	movs	r4, #12
    f7ac:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    f7ae:	4837      	ldr	r0, [pc, #220]	; (f88c <pm_system_suspend+0x120>)
    f7b0:	f00f fef8 	bl	1f5a4 <z_spin_lock_set_owner>
    f7b4:	4b3a      	ldr	r3, [pc, #232]	; (f8a0 <pm_system_suspend+0x134>)
    f7b6:	4e3b      	ldr	r6, [pc, #236]	; (f8a4 <pm_system_suspend+0x138>)
    f7b8:	5d19      	ldrb	r1, [r3, r4]
    f7ba:	191a      	adds	r2, r3, r4
    f7bc:	b1b9      	cbz	r1, f7ee <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    f7be:	ca07      	ldmia	r2, {r0, r1, r2}
    f7c0:	eb06 0c04 	add.w	ip, r6, r4
    f7c4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    f7c8:	2200      	movs	r2, #0
    f7ca:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f7cc:	482f      	ldr	r0, [pc, #188]	; (f88c <pm_system_suspend+0x120>)
    f7ce:	f00f fedb 	bl	1f588 <z_spin_unlock_valid>
    f7d2:	4604      	mov	r4, r0
    f7d4:	b9b0      	cbnz	r0, f804 <pm_system_suspend+0x98>
    f7d6:	23c2      	movs	r3, #194	; 0xc2
    f7d8:	4a2d      	ldr	r2, [pc, #180]	; (f890 <pm_system_suspend+0x124>)
    f7da:	4933      	ldr	r1, [pc, #204]	; (f8a8 <pm_system_suspend+0x13c>)
    f7dc:	482e      	ldr	r0, [pc, #184]	; (f898 <pm_system_suspend+0x12c>)
    f7de:	f015 f8e2 	bl	249a6 <assert_print>
    f7e2:	492a      	ldr	r1, [pc, #168]	; (f88c <pm_system_suspend+0x120>)
    f7e4:	4831      	ldr	r0, [pc, #196]	; (f8ac <pm_system_suspend+0x140>)
    f7e6:	f015 f8de 	bl	249a6 <assert_print>
    f7ea:	21c2      	movs	r1, #194	; 0xc2
    f7ec:	e7da      	b.n	f7a4 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    f7ee:	4639      	mov	r1, r7
    f7f0:	4628      	mov	r0, r5
    f7f2:	f000 f865 	bl	f8c0 <pm_policy_next_state>
		if (info != NULL) {
    f7f6:	2800      	cmp	r0, #0
    f7f8:	d0e8      	beq.n	f7cc <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    f7fa:	c807      	ldmia	r0, {r0, r1, r2}
    f7fc:	4434      	add	r4, r6
    f7fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    f802:	e7e3      	b.n	f7cc <pm_system_suspend+0x60>
	__asm__ volatile(
    f804:	f388 8811 	msr	BASEPRI, r8
    f808:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    f80c:	230c      	movs	r3, #12
    f80e:	436b      	muls	r3, r5
    f810:	18f2      	adds	r2, r6, r3
    f812:	5cf3      	ldrb	r3, [r6, r3]
    f814:	b3ab      	cbz	r3, f882 <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    f816:	1c7b      	adds	r3, r7, #1
    f818:	d00f      	beq.n	f83a <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
    f81a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    f81e:	2100      	movs	r1, #0
    f820:	f8d2 e008 	ldr.w	lr, [r2, #8]
    f824:	4822      	ldr	r0, [pc, #136]	; (f8b0 <pm_system_suspend+0x144>)
    f826:	2300      	movs	r3, #0
    f828:	fbee 010c 	umlal	r0, r1, lr, ip
    f82c:	4a21      	ldr	r2, [pc, #132]	; (f8b4 <pm_system_suspend+0x148>)
    f82e:	f7f9 fb5f 	bl	8ef0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    f832:	2101      	movs	r1, #1
    f834:	1a38      	subs	r0, r7, r0
    f836:	f012 fb77 	bl	21f28 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    f83a:	f011 f9f5 	bl	20c28 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    f83e:	2001      	movs	r0, #1
    f840:	f7ff fefc 	bl	f63c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f844:	4b1c      	ldr	r3, [pc, #112]	; (f8b8 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f846:	096a      	lsrs	r2, r5, #5
    f848:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    f84c:	2201      	movs	r2, #1
    f84e:	f005 011f 	and.w	r1, r5, #31
    f852:	408a      	lsls	r2, r1
    f854:	e8d3 0fef 	ldaex	r0, [r3]
    f858:	4310      	orrs	r0, r2
    f85a:	e8c3 0fe1 	stlex	r1, r0, [r3]
    f85e:	2900      	cmp	r1, #0
    f860:	d1f8      	bne.n	f854 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
    f862:	4b16      	ldr	r3, [pc, #88]	; (f8bc <pm_system_suspend+0x150>)
    f864:	b133      	cbz	r3, f874 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
    f866:	230c      	movs	r3, #12
    f868:	436b      	muls	r3, r5
    f86a:	18f2      	adds	r2, r6, r3
    f86c:	7851      	ldrb	r1, [r2, #1]
    f86e:	5cf0      	ldrb	r0, [r6, r3]
    f870:	f015 f8d2 	bl	24a18 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    f874:	f7ff ff42 	bl	f6fc <pm_system_resume>
	k_sched_unlock();
    f878:	f011 fa42 	bl	20d00 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    f87c:	4620      	mov	r0, r4
    f87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    f882:	461c      	mov	r4, r3
    f884:	e7fa      	b.n	f87c <pm_system_suspend+0x110>
    f886:	bf00      	nop
    f888:	20021460 	.word	0x20021460
    f88c:	20020ee8 	.word	0x20020ee8
    f890:	0002c034 	.word	0x0002c034
    f894:	0002c08d 	.word	0x0002c08d
    f898:	0002b339 	.word	0x0002b339
    f89c:	0002c0a2 	.word	0x0002c0a2
    f8a0:	20020eec 	.word	0x20020eec
    f8a4:	20020ef8 	.word	0x20020ef8
    f8a8:	0002c061 	.word	0x0002c061
    f8ac:	0002c078 	.word	0x0002c078
    f8b0:	000f423f 	.word	0x000f423f
    f8b4:	000f4240 	.word	0x000f4240
    f8b8:	20020f0c 	.word	0x20020f0c
    f8bc:	00024a19 	.word	0x00024a19

0000f8c0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8c4:	b085      	sub	sp, #20
    f8c6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    f8c8:	a903      	add	r1, sp, #12
    f8ca:	f000 f843 	bl	f954 <pm_state_cpu_get_all>
    f8ce:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    f8d2:	4604      	mov	r4, r0
    f8d4:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    f8d8:	4b1b      	ldr	r3, [pc, #108]	; (f948 <pm_policy_next_state+0x88>)
    f8da:	9d03      	ldr	r5, [sp, #12]
    f8dc:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    f8e0:	1e43      	subs	r3, r0, #1
    f8e2:	b21b      	sxth	r3, r3
    f8e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f8e8:	f8df 8060 	ldr.w	r8, [pc, #96]	; f94c <pm_policy_next_state+0x8c>
    f8ec:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    f8f0:	b924      	cbnz	r4, f8fc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    f8f2:	46a1      	mov	r9, r4
}
    f8f4:	4648      	mov	r0, r9
    f8f6:	b005      	add	sp, #20
    f8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8fc:	46c4      	mov	ip, r8
    f8fe:	4659      	mov	r1, fp
    f900:	6868      	ldr	r0, [r5, #4]
    f902:	2300      	movs	r3, #0
    f904:	fbe0 c107 	umlal	ip, r1, r0, r7
    f908:	4a11      	ldr	r2, [pc, #68]	; (f950 <pm_policy_next_state+0x90>)
    f90a:	4660      	mov	r0, ip
    f90c:	f7f9 faf0 	bl	8ef0 <__aeabi_uldivmod>
    f910:	46c4      	mov	ip, r8
    f912:	4659      	mov	r1, fp
    f914:	9001      	str	r0, [sp, #4]
    f916:	68a8      	ldr	r0, [r5, #8]
    f918:	2300      	movs	r3, #0
    f91a:	fbe0 c107 	umlal	ip, r1, r0, r7
    f91e:	4a0c      	ldr	r2, [pc, #48]	; (f950 <pm_policy_next_state+0x90>)
    f920:	4660      	mov	r0, ip
    f922:	f7f9 fae5 	bl	8ef0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    f926:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    f92a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    f92c:	d001      	beq.n	f932 <pm_policy_next_state+0x72>
    f92e:	4582      	cmp	sl, r0
    f930:	d905      	bls.n	f93e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    f932:	1c73      	adds	r3, r6, #1
    f934:	d0de      	beq.n	f8f4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    f936:	9b01      	ldr	r3, [sp, #4]
    f938:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    f93a:	42b0      	cmp	r0, r6
    f93c:	d9da      	bls.n	f8f4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    f93e:	3c01      	subs	r4, #1
    f940:	b2a4      	uxth	r4, r4
    f942:	3d0c      	subs	r5, #12
    f944:	e7d4      	b.n	f8f0 <pm_policy_next_state+0x30>
    f946:	bf00      	nop
    f948:	2000842c 	.word	0x2000842c
    f94c:	000f423f 	.word	0x000f423f
    f950:	000f4240 	.word	0x000f4240

0000f954 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    f954:	b908      	cbnz	r0, f95a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    f956:	4b02      	ldr	r3, [pc, #8]	; (f960 <pm_state_cpu_get_all+0xc>)
    f958:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    f95a:	2000      	movs	r0, #0
    f95c:	4770      	bx	lr
    f95e:	bf00      	nop
    f960:	0002aa18 	.word	0x0002aa18

0000f964 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
    f964:	4b03      	ldr	r3, [pc, #12]	; (f974 <nus_ccc_cfg_changed+0x10>)
    f966:	689b      	ldr	r3, [r3, #8]
    f968:	b11b      	cbz	r3, f972 <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
    f96a:	1e48      	subs	r0, r1, #1
    f96c:	bf18      	it	ne
    f96e:	2001      	movne	r0, #1
    f970:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
    f972:	4770      	bx	lr
    f974:	20020f10 	.word	0x20020f10

0000f978 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
    f978:	b510      	push	{r4, lr}
    f97a:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
    f97c:	4b03      	ldr	r3, [pc, #12]	; (f98c <on_receive+0x14>)
{
    f97e:	4611      	mov	r1, r2
	if (nus_cb.received) {
    f980:	681b      	ldr	r3, [r3, #0]
    f982:	b10b      	cbz	r3, f988 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
    f984:	4622      	mov	r2, r4
    f986:	4798      	blx	r3
}
	return len;
}
    f988:	4620      	mov	r0, r4
    f98a:	bd10      	pop	{r4, pc}
    f98c:	20020f10 	.word	0x20020f10

0000f990 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
    f990:	4b02      	ldr	r3, [pc, #8]	; (f99c <on_sent+0xc>)
    f992:	685b      	ldr	r3, [r3, #4]
    f994:	b103      	cbz	r3, f998 <on_sent+0x8>
		nus_cb.sent(conn);
    f996:	4718      	bx	r3
	}
}
    f998:	4770      	bx	lr
    f99a:	bf00      	nop
    f99c:	20020f10 	.word	0x20020f10

0000f9a0 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
    f9a0:	b130      	cbz	r0, f9b0 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
    f9a2:	4b04      	ldr	r3, [pc, #16]	; (f9b4 <bt_nus_init+0x14>)
    f9a4:	6802      	ldr	r2, [r0, #0]
    f9a6:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
    f9a8:	6842      	ldr	r2, [r0, #4]
    f9aa:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
    f9ac:	6882      	ldr	r2, [r0, #8]
    f9ae:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
    f9b0:	2000      	movs	r0, #0
    f9b2:	4770      	bx	lr
    f9b4:	20020f10 	.word	0x20020f10

0000f9b8 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
    f9b8:	b570      	push	{r4, r5, r6, lr}
    f9ba:	460e      	mov	r6, r1
    f9bc:	4615      	mov	r5, r2
    f9be:	4604      	mov	r4, r0
    f9c0:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
    f9c2:	2100      	movs	r1, #0
    f9c4:	2218      	movs	r2, #24
    f9c6:	4668      	mov	r0, sp
    f9c8:	f019 fd8d 	bl	294e6 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
    f9cc:	490b      	ldr	r1, [pc, #44]	; (f9fc <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
    f9ce:	4b0c      	ldr	r3, [pc, #48]	; (fa00 <bt_nus_send+0x48>)
	params.data = data;
    f9d0:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
    f9d4:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
    f9d8:	9304      	str	r3, [sp, #16]

	if (!conn) {
    f9da:	b92c      	cbnz	r4, f9e8 <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
    f9dc:	4669      	mov	r1, sp
    f9de:	4620      	mov	r0, r4
    f9e0:	f007 f866 	bl	16ab0 <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
    f9e4:	b006      	add	sp, #24
    f9e6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
    f9e8:	2201      	movs	r2, #1
    f9ea:	4620      	mov	r0, r4
    f9ec:	f006 fd26 	bl	1643c <bt_gatt_is_subscribed>
    f9f0:	2800      	cmp	r0, #0
    f9f2:	d1f3      	bne.n	f9dc <bt_nus_send+0x24>
		return -EINVAL;
    f9f4:	f06f 0015 	mvn.w	r0, #21
    f9f8:	e7f4      	b.n	f9e4 <bt_nus_send+0x2c>
    f9fa:	bf00      	nop
    f9fc:	0002aa40 	.word	0x0002aa40
    fa00:	0000f991 	.word	0x0000f991

0000fa04 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    fa04:	4904      	ldr	r1, [pc, #16]	; (fa18 <sub_bytes+0x14>)
    fa06:	1e43      	subs	r3, r0, #1
    fa08:	300f      	adds	r0, #15
    fa0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    fa0e:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    fa10:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    fa12:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    fa14:	d1f9      	bne.n	fa0a <sub_bytes+0x6>
	}
}
    fa16:	4770      	bx	lr
    fa18:	0002c741 	.word	0x0002c741

0000fa1c <tc_aes128_set_encrypt_key>:
{
    fa1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa1e:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    fa20:	4e26      	ldr	r6, [pc, #152]	; (fabc <tc_aes128_set_encrypt_key+0xa0>)
{
    fa22:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    fa24:	ad01      	add	r5, sp, #4
{
    fa26:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    fa28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fa2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    fa2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fa2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    fa30:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    fa34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    fa38:	4638      	mov	r0, r7
    fa3a:	2f00      	cmp	r7, #0
    fa3c:	d039      	beq.n	fab2 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    fa3e:	2c00      	cmp	r4, #0
    fa40:	d039      	beq.n	fab6 <tc_aes128_set_encrypt_key+0x9a>
    fa42:	1f38      	subs	r0, r7, #4
    fa44:	4602      	mov	r2, r0
    fa46:	4621      	mov	r1, r4
    fa48:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    fa4a:	784b      	ldrb	r3, [r1, #1]
    fa4c:	780d      	ldrb	r5, [r1, #0]
    fa4e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    fa50:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    fa54:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    fa56:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    fa58:	432b      	orrs	r3, r5
    fa5a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    fa5e:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    fa60:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    fa64:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    fa68:	d1ef      	bne.n	fa4a <tc_aes128_set_encrypt_key+0x2e>
    fa6a:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    fa6c:	4c14      	ldr	r4, [pc, #80]	; (fac0 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    fa6e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    fa70:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    fa72:	d116      	bne.n	faa2 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    fa74:	f3c3 4207 	ubfx	r2, r3, #16, #8
    fa78:	5ca5      	ldrb	r5, [r4, r2]
    fa7a:	0e1a      	lsrs	r2, r3, #24
    fa7c:	5ca2      	ldrb	r2, [r4, r2]
    fa7e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    fa82:	f3c3 2507 	ubfx	r5, r3, #8, #8
    fa86:	5d65      	ldrb	r5, [r4, r5]
    fa88:	b2db      	uxtb	r3, r3
    fa8a:	5ce3      	ldrb	r3, [r4, r3]
    fa8c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    fa90:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    fa94:	f021 0303 	bic.w	r3, r1, #3
    fa98:	3330      	adds	r3, #48	; 0x30
    fa9a:	446b      	add	r3, sp
    fa9c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    faa0:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    faa2:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    faa6:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    faa8:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    faaa:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    faac:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    faae:	d1de      	bne.n	fa6e <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    fab0:	2001      	movs	r0, #1
}
    fab2:	b00d      	add	sp, #52	; 0x34
    fab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    fab6:	4620      	mov	r0, r4
    fab8:	e7fb      	b.n	fab2 <tc_aes128_set_encrypt_key+0x96>
    faba:	bf00      	nop
    fabc:	0002a4bc 	.word	0x0002a4bc
    fac0:	0002c741 	.word	0x0002c741

0000fac4 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    fac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    fac8:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    faca:	6803      	ldr	r3, [r0, #0]
{
    facc:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    face:	9302      	str	r3, [sp, #8]
    fad0:	6843      	ldr	r3, [r0, #4]
    fad2:	f8df a1bc 	ldr.w	sl, [pc, #444]	; fc90 <compress+0x1cc>
    fad6:	9303      	str	r3, [sp, #12]
    fad8:	6883      	ldr	r3, [r0, #8]
    fada:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    fade:	9304      	str	r3, [sp, #16]
    fae0:	68c3      	ldr	r3, [r0, #12]
    fae2:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    fae4:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    fae6:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    faea:	9306      	str	r3, [sp, #24]
    faec:	6943      	ldr	r3, [r0, #20]
    faee:	9307      	str	r3, [sp, #28]
    faf0:	6983      	ldr	r3, [r0, #24]
    faf2:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    faf6:	9308      	str	r3, [sp, #32]
    faf8:	69c3      	ldr	r3, [r0, #28]
    fafa:	4698      	mov	r8, r3
    fafc:	9309      	str	r3, [sp, #36]	; 0x24
    fafe:	9b08      	ldr	r3, [sp, #32]
    fb00:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    fb02:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    fb04:	ab0c      	add	r3, sp, #48	; 0x30
    fb06:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    fb08:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    fb0c:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    fb0e:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    fb12:	44a9      	add	r9, r5
    fb14:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    fb18:	9d00      	ldr	r5, [sp, #0]
    fb1a:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    fb1e:	444b      	add	r3, r9
    fb20:	ea25 0502 	bic.w	r5, r5, r2
    fb24:	ea02 090c 	and.w	r9, r2, ip
    fb28:	ea85 0509 	eor.w	r5, r5, r9
    fb2c:	442b      	add	r3, r5
    fb2e:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    fb30:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    fb34:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    fb38:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    fb3c:	4025      	ands	r5, r4
    fb3e:	ea06 090b 	and.w	r9, r6, fp
    fb42:	ea85 0509 	eor.w	r5, r5, r9
    fb46:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    fb4a:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    fb4c:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    fb4e:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    fb50:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    fb54:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    fb56:	46de      	mov	lr, fp
    fb58:	f8dd 8000 	ldr.w	r8, [sp]
    fb5c:	f040 8088 	bne.w	fc70 <compress+0x1ac>
    fb60:	f04f 0a10 	mov.w	sl, #16
    fb64:	494b      	ldr	r1, [pc, #300]	; (fc94 <compress+0x1d0>)
    fb66:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    fb68:	4651      	mov	r1, sl
    fb6a:	f10a 0a01 	add.w	sl, sl, #1
    fb6e:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    fb72:	f00a 070f 	and.w	r7, sl, #15
    fb76:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    fb7a:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    fb7e:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    fb82:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    fb86:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    fb88:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    fb8c:	f101 070e 	add.w	r7, r1, #14
    fb90:	f007 070f 	and.w	r7, r7, #15
    fb94:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    fb98:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    fb9c:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    fb9e:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    fba2:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    fba6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    fbaa:	f001 010f 	and.w	r1, r1, #15
    fbae:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    fbb2:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    fbb6:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    fbba:	f859 ec40 	ldr.w	lr, [r9, #-64]
    fbbe:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    fbc2:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    fbc6:	4471      	add	r1, lr
		s0 = sigma0(s0);
    fbc8:	f8dd e004 	ldr.w	lr, [sp, #4]
    fbcc:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    fbd0:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    fbd4:	4441      	add	r1, r8
		s1 = sigma1(s1);
    fbd6:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    fbda:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    fbdc:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    fbe0:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    fbe4:	ea2c 0705 	bic.w	r7, ip, r5
    fbe8:	ea87 0708 	eor.w	r7, r7, r8
    fbec:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    fbf0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    fbf4:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    fbf8:	4477      	add	r7, lr
    fbfa:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    fbfe:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    fc02:	4477      	add	r7, lr
    fc04:	440f      	add	r7, r1
    fc06:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    fc08:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    fc0c:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    fc0e:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    fc12:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    fc16:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    fc1a:	ea07 0703 	and.w	r7, r7, r3
    fc1e:	ea04 0806 	and.w	r8, r4, r6
    fc22:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    fc26:	ea87 0708 	eor.w	r7, r7, r8
    fc2a:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    fc2c:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    fc2e:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    fc32:	f8cd c000 	str.w	ip, [sp]
    fc36:	46b3      	mov	fp, r6
    fc38:	d122      	bne.n	fc80 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    fc3a:	9902      	ldr	r1, [sp, #8]
    fc3c:	4439      	add	r1, r7
    fc3e:	6001      	str	r1, [r0, #0]
    fc40:	9903      	ldr	r1, [sp, #12]
    fc42:	4419      	add	r1, r3
    fc44:	9b04      	ldr	r3, [sp, #16]
    fc46:	6041      	str	r1, [r0, #4]
    fc48:	4423      	add	r3, r4
    fc4a:	6083      	str	r3, [r0, #8]
    fc4c:	9b05      	ldr	r3, [sp, #20]
    fc4e:	4433      	add	r3, r6
    fc50:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    fc52:	9b06      	ldr	r3, [sp, #24]
    fc54:	4473      	add	r3, lr
    fc56:	6103      	str	r3, [r0, #16]
    fc58:	9b07      	ldr	r3, [sp, #28]
    fc5a:	442b      	add	r3, r5
    fc5c:	6143      	str	r3, [r0, #20]
    fc5e:	9b08      	ldr	r3, [sp, #32]
    fc60:	4413      	add	r3, r2
    fc62:	6183      	str	r3, [r0, #24]
    fc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fc66:	4463      	add	r3, ip
    fc68:	61c3      	str	r3, [r0, #28]
}
    fc6a:	b01d      	add	sp, #116	; 0x74
    fc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc70:	46b3      	mov	fp, r6
    fc72:	f8cd c000 	str.w	ip, [sp]
    fc76:	4626      	mov	r6, r4
    fc78:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    fc7a:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    fc7c:	462a      	mov	r2, r5
    fc7e:	e740      	b.n	fb02 <compress+0x3e>
    fc80:	4694      	mov	ip, r2
    fc82:	4626      	mov	r6, r4
    fc84:	462a      	mov	r2, r5
    fc86:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    fc88:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    fc8a:	463b      	mov	r3, r7
    fc8c:	e76c      	b.n	fb68 <compress+0xa4>
    fc8e:	bf00      	nop
    fc90:	0002aa90 	.word	0x0002aa90
    fc94:	0002aacc 	.word	0x0002aacc

0000fc98 <tc_sha256_init>:
{
    fc98:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    fc9a:	4604      	mov	r4, r0
    fc9c:	b1c8      	cbz	r0, fcd2 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    fc9e:	2270      	movs	r2, #112	; 0x70
    fca0:	2100      	movs	r1, #0
    fca2:	f015 fa70 	bl	25186 <_set>
	s->iv[1] = 0xbb67ae85;
    fca6:	4b0b      	ldr	r3, [pc, #44]	; (fcd4 <tc_sha256_init+0x3c>)
    fca8:	4a0b      	ldr	r2, [pc, #44]	; (fcd8 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    fcaa:	490c      	ldr	r1, [pc, #48]	; (fcdc <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    fcac:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    fcb0:	4b0b      	ldr	r3, [pc, #44]	; (fce0 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    fcb2:	480c      	ldr	r0, [pc, #48]	; (fce4 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    fcb4:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    fcb8:	4b0b      	ldr	r3, [pc, #44]	; (fce8 <tc_sha256_init+0x50>)
    fcba:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    fcbe:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    fcc0:	4b0a      	ldr	r3, [pc, #40]	; (fcec <tc_sha256_init+0x54>)
    fcc2:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    fcc4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    fcc8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    fccc:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    fcd0:	61e3      	str	r3, [r4, #28]
}
    fcd2:	bd10      	pop	{r4, pc}
    fcd4:	bb67ae85 	.word	0xbb67ae85
    fcd8:	6a09e667 	.word	0x6a09e667
    fcdc:	3c6ef372 	.word	0x3c6ef372
    fce0:	a54ff53a 	.word	0xa54ff53a
    fce4:	510e527f 	.word	0x510e527f
    fce8:	9b05688c 	.word	0x9b05688c
    fcec:	1f83d9ab 	.word	0x1f83d9ab

0000fcf0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    fcf0:	4901      	ldr	r1, [pc, #4]	; (fcf8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    fcf2:	2210      	movs	r2, #16
	str	r2, [r1]
    fcf4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    fcf6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    fcf8:	e000ed10 	.word	0xe000ed10

0000fcfc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    fcfc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    fcfe:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    fd00:	f380 8811 	msr	BASEPRI, r0
	isb
    fd04:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    fd08:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    fd0c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    fd0e:	b662      	cpsie	i
	isb
    fd10:	f3bf 8f6f 	isb	sy

	bx	lr
    fd14:	4770      	bx	lr
    fd16:	bf00      	nop

0000fd18 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    fd18:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    fd1a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    fd1c:	f381 8811 	msr	BASEPRI, r1

	wfe
    fd20:	bf20      	wfe

	msr	BASEPRI, r0
    fd22:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    fd26:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    fd28:	4770      	bx	lr
    fd2a:	bf00      	nop

0000fd2c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fd2c:	b570      	push	{r4, r5, r6, lr}
    fd2e:	4606      	mov	r6, r0

	if (esf != NULL) {
    fd30:	460d      	mov	r5, r1
{
    fd32:	b086      	sub	sp, #24
	if (esf != NULL) {
    fd34:	2900      	cmp	r1, #0
    fd36:	d038      	beq.n	fdaa <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    fd38:	2400      	movs	r4, #0
    fd3a:	688b      	ldr	r3, [r1, #8]
    fd3c:	2201      	movs	r2, #1
    fd3e:	9305      	str	r3, [sp, #20]
    fd40:	684b      	ldr	r3, [r1, #4]
    fd42:	4620      	mov	r0, r4
    fd44:	9304      	str	r3, [sp, #16]
    fd46:	680b      	ldr	r3, [r1, #0]
    fd48:	491b      	ldr	r1, [pc, #108]	; (fdb8 <z_arm_fatal_error+0x8c>)
    fd4a:	9303      	str	r3, [sp, #12]
    fd4c:	4b1b      	ldr	r3, [pc, #108]	; (fdbc <z_arm_fatal_error+0x90>)
    fd4e:	e9cd 4400 	strd	r4, r4, [sp]
    fd52:	9302      	str	r3, [sp, #8]
    fd54:	4623      	mov	r3, r4
    fd56:	f015 fe54 	bl	25a02 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    fd5a:	696b      	ldr	r3, [r5, #20]
    fd5c:	2201      	movs	r2, #1
    fd5e:	9305      	str	r3, [sp, #20]
    fd60:	692b      	ldr	r3, [r5, #16]
    fd62:	4620      	mov	r0, r4
    fd64:	9304      	str	r3, [sp, #16]
    fd66:	68eb      	ldr	r3, [r5, #12]
    fd68:	4913      	ldr	r1, [pc, #76]	; (fdb8 <z_arm_fatal_error+0x8c>)
    fd6a:	9303      	str	r3, [sp, #12]
    fd6c:	4b14      	ldr	r3, [pc, #80]	; (fdc0 <z_arm_fatal_error+0x94>)
    fd6e:	9400      	str	r4, [sp, #0]
    fd70:	e9cd 4301 	strd	r4, r3, [sp, #4]
    fd74:	4623      	mov	r3, r4
    fd76:	f015 fe44 	bl	25a02 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    fd7a:	69eb      	ldr	r3, [r5, #28]
    fd7c:	2201      	movs	r2, #1
    fd7e:	9303      	str	r3, [sp, #12]
    fd80:	4b10      	ldr	r3, [pc, #64]	; (fdc4 <z_arm_fatal_error+0x98>)
    fd82:	4620      	mov	r0, r4
    fd84:	e9cd 4301 	strd	r4, r3, [sp, #4]
    fd88:	490b      	ldr	r1, [pc, #44]	; (fdb8 <z_arm_fatal_error+0x8c>)
    fd8a:	4623      	mov	r3, r4
    fd8c:	9400      	str	r4, [sp, #0]
    fd8e:	f015 fe38 	bl	25a02 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    fd92:	69ab      	ldr	r3, [r5, #24]
    fd94:	2201      	movs	r2, #1
    fd96:	9303      	str	r3, [sp, #12]
    fd98:	4b0b      	ldr	r3, [pc, #44]	; (fdc8 <z_arm_fatal_error+0x9c>)
    fd9a:	4620      	mov	r0, r4
    fd9c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    fda0:	4905      	ldr	r1, [pc, #20]	; (fdb8 <z_arm_fatal_error+0x8c>)
    fda2:	4623      	mov	r3, r4
    fda4:	9400      	str	r4, [sp, #0]
    fda6:	f015 fe2c 	bl	25a02 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    fdaa:	4629      	mov	r1, r5
    fdac:	4630      	mov	r0, r6
}
    fdae:	b006      	add	sp, #24
    fdb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    fdb4:	f00e bf46 	b.w	1ec44 <z_fatal_error>
    fdb8:	0002a450 	.word	0x0002a450
    fdbc:	0002c841 	.word	0x0002c841
    fdc0:	0002c870 	.word	0x0002c870
    fdc4:	0002c89f 	.word	0x0002c89f
    fdc8:	0002c8ae 	.word	0x0002c8ae

0000fdcc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    fdcc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    fdce:	2800      	cmp	r0, #0
    fdd0:	db07      	blt.n	fde2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fdd2:	2301      	movs	r3, #1
    fdd4:	0941      	lsrs	r1, r0, #5
    fdd6:	4a03      	ldr	r2, [pc, #12]	; (fde4 <arch_irq_enable+0x18>)
    fdd8:	f000 001f 	and.w	r0, r0, #31
    fddc:	4083      	lsls	r3, r0
    fdde:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    fde2:	4770      	bx	lr
    fde4:	e000e100 	.word	0xe000e100

0000fde8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    fde8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    fdea:	2800      	cmp	r0, #0
    fdec:	db0c      	blt.n	fe08 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fdee:	2201      	movs	r2, #1
    fdf0:	4906      	ldr	r1, [pc, #24]	; (fe0c <arch_irq_disable+0x24>)
    fdf2:	0943      	lsrs	r3, r0, #5
    fdf4:	f000 001f 	and.w	r0, r0, #31
    fdf8:	4082      	lsls	r2, r0
    fdfa:	3320      	adds	r3, #32
    fdfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    fe00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fe04:	f3bf 8f6f 	isb	sy
}
    fe08:	4770      	bx	lr
    fe0a:	bf00      	nop
    fe0c:	e000e100 	.word	0xe000e100

0000fe10 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    fe10:	4b05      	ldr	r3, [pc, #20]	; (fe28 <arch_irq_is_enabled+0x18>)
    fe12:	0942      	lsrs	r2, r0, #5
    fe14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    fe18:	2301      	movs	r3, #1
    fe1a:	f000 001f 	and.w	r0, r0, #31
    fe1e:	fa03 f000 	lsl.w	r0, r3, r0
}
    fe22:	4010      	ands	r0, r2
    fe24:	4770      	bx	lr
    fe26:	bf00      	nop
    fe28:	e000e100 	.word	0xe000e100

0000fe2c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    fe2c:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    fe2e:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    fe30:	2b07      	cmp	r3, #7
{
    fe32:	4604      	mov	r4, r0
    fe34:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    fe36:	d90f      	bls.n	fe58 <z_arm_irq_priority_set+0x2c>
    fe38:	235b      	movs	r3, #91	; 0x5b
    fe3a:	4a10      	ldr	r2, [pc, #64]	; (fe7c <z_arm_irq_priority_set+0x50>)
    fe3c:	4910      	ldr	r1, [pc, #64]	; (fe80 <z_arm_irq_priority_set+0x54>)
    fe3e:	4811      	ldr	r0, [pc, #68]	; (fe84 <z_arm_irq_priority_set+0x58>)
    fe40:	f014 fdb1 	bl	249a6 <assert_print>
    fe44:	4629      	mov	r1, r5
    fe46:	4810      	ldr	r0, [pc, #64]	; (fe88 <z_arm_irq_priority_set+0x5c>)
    fe48:	2307      	movs	r3, #7
    fe4a:	4622      	mov	r2, r4
    fe4c:	f014 fdab 	bl	249a6 <assert_print>
    fe50:	215b      	movs	r1, #91	; 0x5b
    fe52:	480a      	ldr	r0, [pc, #40]	; (fe7c <z_arm_irq_priority_set+0x50>)
    fe54:	f014 fda0 	bl	24998 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    fe58:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    fe5a:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe5c:	bfac      	ite	ge
    fe5e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe62:	4a0a      	ldrlt	r2, [pc, #40]	; (fe8c <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe64:	ea4f 1343 	mov.w	r3, r3, lsl #5
    fe68:	b2db      	uxtb	r3, r3
    fe6a:	bfab      	itete	ge
    fe6c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe70:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe74:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fe78:	5413      	strblt	r3, [r2, r0]
}
    fe7a:	bd38      	pop	{r3, r4, r5, pc}
    fe7c:	0002c8dc 	.word	0x0002c8dc
    fe80:	0002c912 	.word	0x0002c912
    fe84:	0002b339 	.word	0x0002b339
    fe88:	0002c92d 	.word	0x0002c92d
    fe8c:	e000ed14 	.word	0xe000ed14

0000fe90 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    fe90:	bf30      	wfi
    b z_SysNmiOnReset
    fe92:	f7ff bffd 	b.w	fe90 <z_SysNmiOnReset>
    fe96:	bf00      	nop

0000fe98 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fe98:	4a0b      	ldr	r2, [pc, #44]	; (fec8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    fe9a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fe9c:	4b0b      	ldr	r3, [pc, #44]	; (fecc <z_arm_prep_c+0x34>)
    fe9e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    fea2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    fea4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fea8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    feac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    feb0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    feb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    feb8:	f00e ff7a 	bl	1edb0 <z_bss_zero>
	z_data_copy();
    febc:	f011 fe74 	bl	21ba8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    fec0:	f000 fbe8 	bl	10694 <z_arm_interrupt_init>
	z_cstart();
    fec4:	f00e ffb4 	bl	1ee30 <z_cstart>
    fec8:	00008000 	.word	0x00008000
    fecc:	e000ed00 	.word	0xe000ed00

0000fed0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    fed0:	4a09      	ldr	r2, [pc, #36]	; (fef8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    fed2:	490a      	ldr	r1, [pc, #40]	; (fefc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    fed4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    fed6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    fed8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    feda:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    fedc:	4908      	ldr	r1, [pc, #32]	; (ff00 <arch_swap+0x30>)
    fede:	684b      	ldr	r3, [r1, #4]
    fee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    fee4:	604b      	str	r3, [r1, #4]
    fee6:	2300      	movs	r3, #0
    fee8:	f383 8811 	msr	BASEPRI, r3
    feec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    fef0:	6893      	ldr	r3, [r2, #8]
}
    fef2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    fef4:	4770      	bx	lr
    fef6:	bf00      	nop
    fef8:	20021460 	.word	0x20021460
    fefc:	0002b214 	.word	0x0002b214
    ff00:	e000ed00 	.word	0xe000ed00

0000ff04 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ff04:	4915      	ldr	r1, [pc, #84]	; (ff5c <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ff06:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    ff08:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ff0c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    ff10:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ff12:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ff16:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ff1a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    ff1c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ff20:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ff24:	4f0e      	ldr	r7, [pc, #56]	; (ff60 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ff26:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ff2a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    ff2c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ff2e:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    ff30:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ff34:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    ff36:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ff38:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ff3a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ff3e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    ff42:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ff46:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    ff4a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    ff4e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    ff50:	f015 fd76 	bl	25a40 <configure_builtin_stack_guard>
    pop {r2, lr}
    ff54:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    ff58:	4770      	bx	lr
    ff5a:	0000      	.short	0x0000
    ldr r1, =_kernel
    ff5c:	20021460 	.word	0x20021460
    ldr v4, =_SCS_ICSR
    ff60:	e000ed04 	.word	0xe000ed04

0000ff64 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    ff64:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    ff68:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    ff6a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ff6e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ff72:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ff74:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    ff78:	2902      	cmp	r1, #2
    beq _oops
    ff7a:	d0ff      	beq.n	ff7c <_oops>

0000ff7c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    ff7c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    ff7e:	f015 fd50 	bl	25a22 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    ff82:	bd01      	pop	{r0, pc}

0000ff84 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    ff84:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    ff88:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    ff8a:	490d      	ldr	r1, [pc, #52]	; (ffc0 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    ff8c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    ff90:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    ff92:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    ff96:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    ff9a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    ff9c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    ffa0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    ffa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    ffa8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    ffac:	2300      	movs	r3, #0
    ffae:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    ffb0:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    ffb4:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    ffb6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    ffb8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    ffbc:	4770      	bx	lr
    ffbe:	bf00      	nop
    ffc0:	00024657 	.word	0x00024657

0000ffc4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    ffc4:	4b08      	ldr	r3, [pc, #32]	; (ffe8 <arch_switch_to_main_thread+0x24>)
    ffc6:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    ffc8:	6e83      	ldr	r3, [r0, #104]	; 0x68
    ffca:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    ffce:	4610      	mov	r0, r2
    ffd0:	f381 8809 	msr	PSP, r1
    ffd4:	2100      	movs	r1, #0
    ffd6:	b663      	cpsie	if
    ffd8:	f381 8811 	msr	BASEPRI, r1
    ffdc:	f3bf 8f6f 	isb	sy
    ffe0:	2200      	movs	r2, #0
    ffe2:	2300      	movs	r3, #0
    ffe4:	f014 fb37 	bl	24656 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    ffe8:	20021460 	.word	0x20021460

0000ffec <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ffec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    ffee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    fff0:	4a0b      	ldr	r2, [pc, #44]	; (10020 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x20>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    fff2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    fff4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    fff6:	bf1e      	ittt	ne
	movne	r1, #0
    fff8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    fffa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    fffc:	f019 f841 	blne	29082 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10000:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10002:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10006:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1000a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1000e:	4905      	ldr	r1, [pc, #20]	; (10024 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x24>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10010:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10012:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   10014:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10016:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1001a:	4903      	ldr	r1, [pc, #12]	; (10028 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x28>)
	bx r1
   1001c:	4708      	bx	r1
   1001e:	0000      	.short	0x0000
	ldr r2, =_kernel
   10020:	20021460 	.word	0x20021460
	ldr r1, =_sw_isr_table
   10024:	00029f10 	.word	0x00029f10
	ldr r1, =z_arm_int_exit
   10028:	0001002d 	.word	0x0001002d

0001002c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1002c:	4b04      	ldr	r3, [pc, #16]	; (10040 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1002e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10030:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   10032:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10034:	d003      	beq.n	1003e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   10036:	4903      	ldr	r1, [pc, #12]	; (10044 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1003c:	600a      	str	r2, [r1, #0]

0001003e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1003e:	4770      	bx	lr
	ldr r3, =_kernel
   10040:	20021460 	.word	0x20021460
	ldr r1, =_SCS_ICSR
   10044:	e000ed04 	.word	0xe000ed04

00010048 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10048:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1004a:	2400      	movs	r4, #0
   1004c:	4b48      	ldr	r3, [pc, #288]	; (10170 <mem_manage_fault.constprop.0+0x128>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1004e:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   10050:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10052:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   10054:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10056:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   10058:	2201      	movs	r2, #1
   1005a:	4620      	mov	r0, r4
   1005c:	e9cd 4400 	strd	r4, r4, [sp]
   10060:	4944      	ldr	r1, [pc, #272]	; (10174 <mem_manage_fault.constprop.0+0x12c>)
   10062:	f015 fcf1 	bl	25a48 <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10066:	4b44      	ldr	r3, [pc, #272]	; (10178 <mem_manage_fault.constprop.0+0x130>)
   10068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1006a:	06dd      	lsls	r5, r3, #27
   1006c:	d509      	bpl.n	10082 <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1006e:	4b43      	ldr	r3, [pc, #268]	; (1017c <mem_manage_fault.constprop.0+0x134>)
   10070:	2201      	movs	r2, #1
   10072:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10076:	4620      	mov	r0, r4
   10078:	4623      	mov	r3, r4
   1007a:	493e      	ldr	r1, [pc, #248]	; (10174 <mem_manage_fault.constprop.0+0x12c>)
   1007c:	9400      	str	r4, [sp, #0]
   1007e:	f015 fce3 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10082:	4b3d      	ldr	r3, [pc, #244]	; (10178 <mem_manage_fault.constprop.0+0x130>)
   10084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10086:	0718      	lsls	r0, r3, #28
   10088:	d509      	bpl.n	1009e <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   1008a:	4b3d      	ldr	r3, [pc, #244]	; (10180 <mem_manage_fault.constprop.0+0x138>)
   1008c:	2201      	movs	r2, #1
   1008e:	9302      	str	r3, [sp, #8]
   10090:	2300      	movs	r3, #0
   10092:	4938      	ldr	r1, [pc, #224]	; (10174 <mem_manage_fault.constprop.0+0x12c>)
   10094:	4618      	mov	r0, r3
   10096:	e9cd 3300 	strd	r3, r3, [sp]
   1009a:	f015 fcd5 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1009e:	4d36      	ldr	r5, [pc, #216]	; (10178 <mem_manage_fault.constprop.0+0x130>)
   100a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   100a2:	0799      	lsls	r1, r3, #30
   100a4:	d51e      	bpl.n	100e4 <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   100a6:	2400      	movs	r4, #0
   100a8:	4b36      	ldr	r3, [pc, #216]	; (10184 <mem_manage_fault.constprop.0+0x13c>)
   100aa:	2201      	movs	r2, #1
   100ac:	9302      	str	r3, [sp, #8]
   100ae:	4620      	mov	r0, r4
   100b0:	4623      	mov	r3, r4
   100b2:	e9cd 4400 	strd	r4, r4, [sp]
   100b6:	492f      	ldr	r1, [pc, #188]	; (10174 <mem_manage_fault.constprop.0+0x12c>)
   100b8:	f015 fcc6 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   100bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   100be:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   100c0:	0612      	lsls	r2, r2, #24
   100c2:	d50f      	bpl.n	100e4 <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   100c4:	9303      	str	r3, [sp, #12]
   100c6:	4b30      	ldr	r3, [pc, #192]	; (10188 <mem_manage_fault.constprop.0+0x140>)
   100c8:	2201      	movs	r2, #1
   100ca:	e9cd 4301 	strd	r4, r3, [sp, #4]
   100ce:	4620      	mov	r0, r4
   100d0:	4623      	mov	r3, r4
   100d2:	4928      	ldr	r1, [pc, #160]	; (10174 <mem_manage_fault.constprop.0+0x12c>)
   100d4:	9400      	str	r4, [sp, #0]
   100d6:	f015 fcb7 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   100da:	b11f      	cbz	r7, 100e4 <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   100dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   100de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   100e2:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   100e4:	4b24      	ldr	r3, [pc, #144]	; (10178 <mem_manage_fault.constprop.0+0x130>)
   100e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   100e8:	07df      	lsls	r7, r3, #31
   100ea:	d509      	bpl.n	10100 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   100ec:	4b27      	ldr	r3, [pc, #156]	; (1018c <mem_manage_fault.constprop.0+0x144>)
   100ee:	2201      	movs	r2, #1
   100f0:	9302      	str	r3, [sp, #8]
   100f2:	2300      	movs	r3, #0
   100f4:	491f      	ldr	r1, [pc, #124]	; (10174 <mem_manage_fault.constprop.0+0x12c>)
   100f6:	4618      	mov	r0, r3
   100f8:	e9cd 3300 	strd	r3, r3, [sp]
   100fc:	f015 fca4 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10100:	4b1d      	ldr	r3, [pc, #116]	; (10178 <mem_manage_fault.constprop.0+0x130>)
   10102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10104:	069d      	lsls	r5, r3, #26
   10106:	d509      	bpl.n	1011c <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   10108:	4b21      	ldr	r3, [pc, #132]	; (10190 <mem_manage_fault.constprop.0+0x148>)
   1010a:	2201      	movs	r2, #1
   1010c:	9302      	str	r3, [sp, #8]
   1010e:	2300      	movs	r3, #0
   10110:	4918      	ldr	r1, [pc, #96]	; (10174 <mem_manage_fault.constprop.0+0x12c>)
   10112:	4618      	mov	r0, r3
   10114:	e9cd 3300 	strd	r3, r3, [sp]
   10118:	f015 fc96 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1011c:	4b16      	ldr	r3, [pc, #88]	; (10178 <mem_manage_fault.constprop.0+0x130>)
   1011e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10120:	06d4      	lsls	r4, r2, #27
   10122:	d402      	bmi.n	1012a <mem_manage_fault.constprop.0+0xe2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   10124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10126:	0790      	lsls	r0, r2, #30
   10128:	d511      	bpl.n	1014e <mem_manage_fault.constprop.0+0x106>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1012a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1012c:	06d9      	lsls	r1, r3, #27
   1012e:	d50e      	bpl.n	1014e <mem_manage_fault.constprop.0+0x106>
   10130:	4918      	ldr	r1, [pc, #96]	; (10194 <mem_manage_fault.constprop.0+0x14c>)
   10132:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   10136:	4a18      	ldr	r2, [pc, #96]	; (10198 <mem_manage_fault.constprop.0+0x150>)
   10138:	4818      	ldr	r0, [pc, #96]	; (1019c <mem_manage_fault.constprop.0+0x154>)
   1013a:	f014 fc34 	bl	249a6 <assert_print>
   1013e:	4818      	ldr	r0, [pc, #96]	; (101a0 <mem_manage_fault.constprop.0+0x158>)
   10140:	f014 fc31 	bl	249a6 <assert_print>
   10144:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   10148:	4813      	ldr	r0, [pc, #76]	; (10198 <mem_manage_fault.constprop.0+0x150>)
   1014a:	f014 fc25 	bl	24998 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1014e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10150:	4b09      	ldr	r3, [pc, #36]	; (10178 <mem_manage_fault.constprop.0+0x130>)
   10152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10154:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   10156:	bf42      	ittt	mi
   10158:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1015a:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1015e:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   10160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10162:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   10166:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10168:	7030      	strb	r0, [r6, #0]

	return reason;
}
   1016a:	b005      	add	sp, #20
   1016c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1016e:	bf00      	nop
   10170:	0002c96d 	.word	0x0002c96d
   10174:	0002a450 	.word	0x0002a450
   10178:	e000ed00 	.word	0xe000ed00
   1017c:	0002c983 	.word	0x0002c983
   10180:	0002c9b6 	.word	0x0002c9b6
   10184:	0002c9c9 	.word	0x0002c9c9
   10188:	0002c9e1 	.word	0x0002c9e1
   1018c:	0002c9f7 	.word	0x0002c9f7
   10190:	0002ca16 	.word	0x0002ca16
   10194:	0002ca7f 	.word	0x0002ca7f
   10198:	0002ca45 	.word	0x0002ca45
   1019c:	0002b339 	.word	0x0002b339
   101a0:	0002cac9 	.word	0x0002cac9

000101a4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   101a4:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   101a6:	2400      	movs	r4, #0
   101a8:	4b3b      	ldr	r3, [pc, #236]	; (10298 <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   101aa:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   101ac:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   101ae:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   101b0:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   101b2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   101b4:	2201      	movs	r2, #1
   101b6:	4620      	mov	r0, r4
   101b8:	e9cd 4400 	strd	r4, r4, [sp]
   101bc:	4937      	ldr	r1, [pc, #220]	; (1029c <bus_fault.constprop.0+0xf8>)
   101be:	f015 fc43 	bl	25a48 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   101c2:	4b37      	ldr	r3, [pc, #220]	; (102a0 <bus_fault.constprop.0+0xfc>)
   101c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   101c6:	04db      	lsls	r3, r3, #19
   101c8:	d509      	bpl.n	101de <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   101ca:	4b36      	ldr	r3, [pc, #216]	; (102a4 <bus_fault.constprop.0+0x100>)
   101cc:	2201      	movs	r2, #1
   101ce:	e9cd 4301 	strd	r4, r3, [sp, #4]
   101d2:	4620      	mov	r0, r4
   101d4:	4623      	mov	r3, r4
   101d6:	4931      	ldr	r1, [pc, #196]	; (1029c <bus_fault.constprop.0+0xf8>)
   101d8:	9400      	str	r4, [sp, #0]
   101da:	f015 fc35 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   101de:	4b30      	ldr	r3, [pc, #192]	; (102a0 <bus_fault.constprop.0+0xfc>)
   101e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   101e2:	051d      	lsls	r5, r3, #20
   101e4:	d509      	bpl.n	101fa <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   101e6:	4b30      	ldr	r3, [pc, #192]	; (102a8 <bus_fault.constprop.0+0x104>)
   101e8:	2201      	movs	r2, #1
   101ea:	9302      	str	r3, [sp, #8]
   101ec:	2300      	movs	r3, #0
   101ee:	492b      	ldr	r1, [pc, #172]	; (1029c <bus_fault.constprop.0+0xf8>)
   101f0:	4618      	mov	r0, r3
   101f2:	e9cd 3300 	strd	r3, r3, [sp]
   101f6:	f015 fc27 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   101fa:	4d29      	ldr	r5, [pc, #164]	; (102a0 <bus_fault.constprop.0+0xfc>)
   101fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   101fe:	059c      	lsls	r4, r3, #22
   10200:	d51e      	bpl.n	10240 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   10202:	2400      	movs	r4, #0
   10204:	4b29      	ldr	r3, [pc, #164]	; (102ac <bus_fault.constprop.0+0x108>)
   10206:	2201      	movs	r2, #1
   10208:	4620      	mov	r0, r4
   1020a:	9302      	str	r3, [sp, #8]
   1020c:	e9cd 4400 	strd	r4, r4, [sp]
   10210:	4623      	mov	r3, r4
   10212:	4922      	ldr	r1, [pc, #136]	; (1029c <bus_fault.constprop.0+0xf8>)
   10214:	f015 fc18 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10218:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1021a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1021c:	0410      	lsls	r0, r2, #16
   1021e:	d50f      	bpl.n	10240 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10220:	9303      	str	r3, [sp, #12]
   10222:	4b23      	ldr	r3, [pc, #140]	; (102b0 <bus_fault.constprop.0+0x10c>)
   10224:	2201      	movs	r2, #1
   10226:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1022a:	4620      	mov	r0, r4
   1022c:	4623      	mov	r3, r4
   1022e:	491b      	ldr	r1, [pc, #108]	; (1029c <bus_fault.constprop.0+0xf8>)
   10230:	9400      	str	r4, [sp, #0]
   10232:	f015 fc09 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   10236:	b11f      	cbz	r7, 10240 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10238:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1023a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1023e:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10240:	4b17      	ldr	r3, [pc, #92]	; (102a0 <bus_fault.constprop.0+0xfc>)
   10242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10244:	0559      	lsls	r1, r3, #21
   10246:	d509      	bpl.n	1025c <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   10248:	4b1a      	ldr	r3, [pc, #104]	; (102b4 <bus_fault.constprop.0+0x110>)
   1024a:	2201      	movs	r2, #1
   1024c:	9302      	str	r3, [sp, #8]
   1024e:	2300      	movs	r3, #0
   10250:	4912      	ldr	r1, [pc, #72]	; (1029c <bus_fault.constprop.0+0xf8>)
   10252:	4618      	mov	r0, r3
   10254:	e9cd 3300 	strd	r3, r3, [sp]
   10258:	f015 fbf6 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1025c:	4a10      	ldr	r2, [pc, #64]	; (102a0 <bus_fault.constprop.0+0xfc>)
   1025e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10260:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   10264:	d012      	beq.n	1028c <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   10266:	4b14      	ldr	r3, [pc, #80]	; (102b8 <bus_fault.constprop.0+0x114>)
   10268:	9302      	str	r3, [sp, #8]
   1026a:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1026c:	2201      	movs	r2, #1
   1026e:	4618      	mov	r0, r3
   10270:	e9cd 3300 	strd	r3, r3, [sp]
   10274:	4909      	ldr	r1, [pc, #36]	; (1029c <bus_fault.constprop.0+0xf8>)
   10276:	f015 fbe7 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   1027a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1027c:	4a08      	ldr	r2, [pc, #32]	; (102a0 <bus_fault.constprop.0+0xfc>)
   1027e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10280:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10284:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10286:	7030      	strb	r0, [r6, #0]

	return reason;
}
   10288:	b005      	add	sp, #20
   1028a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1028c:	6a92      	ldr	r2, [r2, #40]	; 0x28
   1028e:	0492      	lsls	r2, r2, #18
   10290:	d5f3      	bpl.n	1027a <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10292:	4a0a      	ldr	r2, [pc, #40]	; (102bc <bus_fault.constprop.0+0x118>)
   10294:	9202      	str	r2, [sp, #8]
   10296:	e7e9      	b.n	1026c <bus_fault.constprop.0+0xc8>
   10298:	0002cb2d 	.word	0x0002cb2d
   1029c:	0002a450 	.word	0x0002a450
   102a0:	e000ed00 	.word	0xe000ed00
   102a4:	0002cb43 	.word	0x0002cb43
   102a8:	0002c9b6 	.word	0x0002c9b6
   102ac:	0002cb54 	.word	0x0002cb54
   102b0:	0002cb6d 	.word	0x0002cb6d
   102b4:	0002cb82 	.word	0x0002cb82
   102b8:	0002cb9d 	.word	0x0002cb9d
   102bc:	0002ca16 	.word	0x0002ca16

000102c0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   102c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   102c2:	2400      	movs	r4, #0
   102c4:	4b3b      	ldr	r3, [pc, #236]	; (103b4 <usage_fault.constprop.0+0xf4>)
   102c6:	2201      	movs	r2, #1
   102c8:	9302      	str	r3, [sp, #8]
   102ca:	4620      	mov	r0, r4
   102cc:	4623      	mov	r3, r4
   102ce:	e9cd 4400 	strd	r4, r4, [sp]
   102d2:	4939      	ldr	r1, [pc, #228]	; (103b8 <usage_fault.constprop.0+0xf8>)
   102d4:	f015 fbb8 	bl	25a48 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   102d8:	4b38      	ldr	r3, [pc, #224]	; (103bc <usage_fault.constprop.0+0xfc>)
   102da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   102dc:	019b      	lsls	r3, r3, #6
   102de:	d509      	bpl.n	102f4 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   102e0:	4b37      	ldr	r3, [pc, #220]	; (103c0 <usage_fault.constprop.0+0x100>)
   102e2:	2201      	movs	r2, #1
   102e4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   102e8:	4620      	mov	r0, r4
   102ea:	4623      	mov	r3, r4
   102ec:	4932      	ldr	r1, [pc, #200]	; (103b8 <usage_fault.constprop.0+0xf8>)
   102ee:	9400      	str	r4, [sp, #0]
   102f0:	f015 fbaa 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   102f4:	4b31      	ldr	r3, [pc, #196]	; (103bc <usage_fault.constprop.0+0xfc>)
   102f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   102f8:	01dc      	lsls	r4, r3, #7
   102fa:	d509      	bpl.n	10310 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   102fc:	4b31      	ldr	r3, [pc, #196]	; (103c4 <usage_fault.constprop.0+0x104>)
   102fe:	2201      	movs	r2, #1
   10300:	9302      	str	r3, [sp, #8]
   10302:	2300      	movs	r3, #0
   10304:	492c      	ldr	r1, [pc, #176]	; (103b8 <usage_fault.constprop.0+0xf8>)
   10306:	4618      	mov	r0, r3
   10308:	e9cd 3300 	strd	r3, r3, [sp]
   1030c:	f015 fb9c 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   10310:	4b2a      	ldr	r3, [pc, #168]	; (103bc <usage_fault.constprop.0+0xfc>)
   10312:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   10314:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   10318:	d00a      	beq.n	10330 <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1031a:	4b2b      	ldr	r3, [pc, #172]	; (103c8 <usage_fault.constprop.0+0x108>)
   1031c:	2201      	movs	r2, #1
   1031e:	9302      	str	r3, [sp, #8]
   10320:	2300      	movs	r3, #0
   10322:	4925      	ldr	r1, [pc, #148]	; (103b8 <usage_fault.constprop.0+0xf8>)
   10324:	4618      	mov	r0, r3
   10326:	e9cd 3300 	strd	r3, r3, [sp]
   1032a:	f015 fb8d 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1032e:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10330:	4b22      	ldr	r3, [pc, #136]	; (103bc <usage_fault.constprop.0+0xfc>)
   10332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10334:	0318      	lsls	r0, r3, #12
   10336:	d509      	bpl.n	1034c <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   10338:	4b24      	ldr	r3, [pc, #144]	; (103cc <usage_fault.constprop.0+0x10c>)
   1033a:	2201      	movs	r2, #1
   1033c:	9302      	str	r3, [sp, #8]
   1033e:	2300      	movs	r3, #0
   10340:	491d      	ldr	r1, [pc, #116]	; (103b8 <usage_fault.constprop.0+0xf8>)
   10342:	4618      	mov	r0, r3
   10344:	e9cd 3300 	strd	r3, r3, [sp]
   10348:	f015 fb7e 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1034c:	4b1b      	ldr	r3, [pc, #108]	; (103bc <usage_fault.constprop.0+0xfc>)
   1034e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10350:	0359      	lsls	r1, r3, #13
   10352:	d509      	bpl.n	10368 <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   10354:	4b1e      	ldr	r3, [pc, #120]	; (103d0 <usage_fault.constprop.0+0x110>)
   10356:	2201      	movs	r2, #1
   10358:	9302      	str	r3, [sp, #8]
   1035a:	2300      	movs	r3, #0
   1035c:	4916      	ldr	r1, [pc, #88]	; (103b8 <usage_fault.constprop.0+0xf8>)
   1035e:	4618      	mov	r0, r3
   10360:	e9cd 3300 	strd	r3, r3, [sp]
   10364:	f015 fb70 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   10368:	4b14      	ldr	r3, [pc, #80]	; (103bc <usage_fault.constprop.0+0xfc>)
   1036a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1036c:	039a      	lsls	r2, r3, #14
   1036e:	d509      	bpl.n	10384 <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   10370:	4b18      	ldr	r3, [pc, #96]	; (103d4 <usage_fault.constprop.0+0x114>)
   10372:	2201      	movs	r2, #1
   10374:	9302      	str	r3, [sp, #8]
   10376:	2300      	movs	r3, #0
   10378:	490f      	ldr	r1, [pc, #60]	; (103b8 <usage_fault.constprop.0+0xf8>)
   1037a:	4618      	mov	r0, r3
   1037c:	e9cd 3300 	strd	r3, r3, [sp]
   10380:	f015 fb62 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   10384:	4b0d      	ldr	r3, [pc, #52]	; (103bc <usage_fault.constprop.0+0xfc>)
   10386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10388:	03db      	lsls	r3, r3, #15
   1038a:	d509      	bpl.n	103a0 <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1038c:	4b12      	ldr	r3, [pc, #72]	; (103d8 <usage_fault.constprop.0+0x118>)
   1038e:	2201      	movs	r2, #1
   10390:	9302      	str	r3, [sp, #8]
   10392:	2300      	movs	r3, #0
   10394:	4908      	ldr	r1, [pc, #32]	; (103b8 <usage_fault.constprop.0+0xf8>)
   10396:	4618      	mov	r0, r3
   10398:	e9cd 3300 	strd	r3, r3, [sp]
   1039c:	f015 fb54 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   103a0:	4a06      	ldr	r2, [pc, #24]	; (103bc <usage_fault.constprop.0+0xfc>)

	return reason;
}
   103a2:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   103a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   103a6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   103aa:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   103ae:	6293      	str	r3, [r2, #40]	; 0x28
}
   103b0:	b004      	add	sp, #16
   103b2:	bd10      	pop	{r4, pc}
   103b4:	0002cbb5 	.word	0x0002cbb5
   103b8:	0002a450 	.word	0x0002a450
   103bc:	e000ed00 	.word	0xe000ed00
   103c0:	0002cbcd 	.word	0x0002cbcd
   103c4:	0002cbe0 	.word	0x0002cbe0
   103c8:	0002cbfa 	.word	0x0002cbfa
   103cc:	0002cc24 	.word	0x0002cc24
   103d0:	0002cc42 	.word	0x0002cc42
   103d4:	0002cc67 	.word	0x0002cc67
   103d8:	0002cc81 	.word	0x0002cc81

000103dc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   103dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   103e0:	4b8e      	ldr	r3, [pc, #568]	; (1061c <z_arm_fault+0x240>)
{
   103e2:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   103e4:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   103e8:	4688      	mov	r8, r1
   103ea:	4616      	mov	r6, r2
   103ec:	2300      	movs	r3, #0
   103ee:	b090      	sub	sp, #64	; 0x40
   103f0:	f3ca 0708 	ubfx	r7, sl, #0, #9
   103f4:	f383 8811 	msr	BASEPRI, r3
   103f8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   103fc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   10400:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   10404:	d00e      	beq.n	10424 <z_arm_fault+0x48>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   10406:	4986      	ldr	r1, [pc, #536]	; (10620 <z_arm_fault+0x244>)
   10408:	f44f 6384 	mov.w	r3, #1056	; 0x420
   1040c:	4a85      	ldr	r2, [pc, #532]	; (10624 <z_arm_fault+0x248>)
   1040e:	4886      	ldr	r0, [pc, #536]	; (10628 <z_arm_fault+0x24c>)
   10410:	f014 fac9 	bl	249a6 <assert_print>
   10414:	4885      	ldr	r0, [pc, #532]	; (1062c <z_arm_fault+0x250>)
   10416:	f014 fac6 	bl	249a6 <assert_print>
   1041a:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   1041e:	4881      	ldr	r0, [pc, #516]	; (10624 <z_arm_fault+0x248>)
   10420:	f014 faba 	bl	24998 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   10424:	f012 0401 	ands.w	r4, r2, #1
   10428:	d1ed      	bne.n	10406 <z_arm_fault+0x2a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1042a:	0650      	lsls	r0, r2, #25
   1042c:	d404      	bmi.n	10438 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1042e:	0711      	lsls	r1, r2, #28
   10430:	d40e      	bmi.n	10450 <z_arm_fault+0x74>
			*nested_exc = true;
   10432:	f04f 0901 	mov.w	r9, #1
   10436:	e00e      	b.n	10456 <z_arm_fault+0x7a>
		PR_FAULT_INFO("Exception occurred in Secure State");
   10438:	4b7d      	ldr	r3, [pc, #500]	; (10630 <z_arm_fault+0x254>)
   1043a:	2201      	movs	r2, #1
   1043c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10440:	4620      	mov	r0, r4
   10442:	4623      	mov	r3, r4
   10444:	497b      	ldr	r1, [pc, #492]	; (10634 <z_arm_fault+0x258>)
   10446:	9400      	str	r4, [sp, #0]
   10448:	f015 fafe 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1044c:	0772      	lsls	r2, r6, #29
   1044e:	d500      	bpl.n	10452 <z_arm_fault+0x76>
			ptr_esf = (z_arch_esf_t *)psp;
   10450:	4645      	mov	r5, r8
	*nested_exc = false;
   10452:	f04f 0900 	mov.w	r9, #0
	__ASSERT(esf != NULL,
   10456:	2d00      	cmp	r5, #0
   10458:	d0d5      	beq.n	10406 <z_arm_fault+0x2a>
	*recoverable = false;
   1045a:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
   1045e:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   10460:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
   10464:	2b09      	cmp	r3, #9
   10466:	f200 80bf 	bhi.w	105e8 <z_arm_fault+0x20c>
   1046a:	e8df f003 	tbb	[pc, r3]
   1046e:	b305      	.short	0xb305
   10470:	bdbd96b7 	.word	0xbdbd96b7
   10474:	bbbdbdbd 	.word	0xbbbdbdbd
	PR_FAULT_INFO("***** HARD FAULT *****");
   10478:	4b6f      	ldr	r3, [pc, #444]	; (10638 <z_arm_fault+0x25c>)
   1047a:	2201      	movs	r2, #1
   1047c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   10480:	2300      	movs	r3, #0
   10482:	496c      	ldr	r1, [pc, #432]	; (10634 <z_arm_fault+0x258>)
   10484:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10486:	4f65      	ldr	r7, [pc, #404]	; (1061c <z_arm_fault+0x240>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   10488:	f8cd 8000 	str.w	r8, [sp]
   1048c:	f015 fadc 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   10490:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10494:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   10496:	f016 0602 	ands.w	r6, r6, #2
   1049a:	d005      	beq.n	104a8 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   1049c:	4b67      	ldr	r3, [pc, #412]	; (1063c <z_arm_fault+0x260>)
	PR_FAULT_INFO(
   1049e:	e9cd 8301 	strd	r8, r3, [sp, #4]
   104a2:	f8cd 8000 	str.w	r8, [sp]
   104a6:	e006      	b.n	104b6 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   104a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   104aa:	2b00      	cmp	r3, #0
   104ac:	da0a      	bge.n	104c4 <z_arm_fault+0xe8>
		PR_EXC("  Debug event");
   104ae:	4b64      	ldr	r3, [pc, #400]	; (10640 <z_arm_fault+0x264>)
   104b0:	9600      	str	r6, [sp, #0]
   104b2:	e9cd 6301 	strd	r6, r3, [sp, #4]
	PR_FAULT_INFO(
   104b6:	2300      	movs	r3, #0
   104b8:	2201      	movs	r2, #1
   104ba:	4618      	mov	r0, r3
   104bc:	495d      	ldr	r1, [pc, #372]	; (10634 <z_arm_fault+0x258>)
   104be:	f015 fac3 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
}
   104c2:	e03b      	b.n	1053c <z_arm_fault+0x160>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   104c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   104c6:	005b      	lsls	r3, r3, #1
   104c8:	d577      	bpl.n	105ba <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
   104ca:	4b5e      	ldr	r3, [pc, #376]	; (10644 <z_arm_fault+0x268>)
   104cc:	2201      	movs	r2, #1
   104ce:	e9cd 6301 	strd	r6, r3, [sp, #4]
   104d2:	4630      	mov	r0, r6
   104d4:	4633      	mov	r3, r6
   104d6:	4957      	ldr	r1, [pc, #348]	; (10634 <z_arm_fault+0x258>)
   104d8:	9600      	str	r6, [sp, #0]
   104da:	f015 fab5 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   104de:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   104e0:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   104e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   104e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   104e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   104ec:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   104f0:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   104f2:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   104f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   104fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   104fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10500:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   10504:	f64d 7302 	movw	r3, #57090	; 0xdf02
   10508:	429a      	cmp	r2, r3
   1050a:	d00a      	beq.n	10522 <z_arm_fault+0x146>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1050c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1050e:	b2db      	uxtb	r3, r3
   10510:	2b00      	cmp	r3, #0
   10512:	d034      	beq.n	1057e <z_arm_fault+0x1a2>
			reason = mem_manage_fault(esf, 1, recoverable);
   10514:	2001      	movs	r0, #1
   10516:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   1051a:	f7ff fd95 	bl	10048 <mem_manage_fault.constprop.0>
   1051e:	4604      	mov	r4, r0
		break;
   10520:	e00c      	b.n	1053c <z_arm_fault+0x160>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   10522:	682b      	ldr	r3, [r5, #0]
   10524:	2201      	movs	r2, #1
   10526:	9303      	str	r3, [sp, #12]
   10528:	4b47      	ldr	r3, [pc, #284]	; (10648 <z_arm_fault+0x26c>)
   1052a:	4630      	mov	r0, r6
   1052c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   10530:	4940      	ldr	r1, [pc, #256]	; (10634 <z_arm_fault+0x258>)
   10532:	4633      	mov	r3, r6
   10534:	9600      	str	r6, [sp, #0]
   10536:	f015 fa87 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   1053a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1053c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   10540:	b9d3      	cbnz	r3, 10578 <z_arm_fault+0x19c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   10542:	aa08      	add	r2, sp, #32
   10544:	f105 0620 	add.w	r6, r5, #32
   10548:	4613      	mov	r3, r2
   1054a:	6828      	ldr	r0, [r5, #0]
   1054c:	6869      	ldr	r1, [r5, #4]
   1054e:	3508      	adds	r5, #8
   10550:	c303      	stmia	r3!, {r0, r1}
   10552:	42b5      	cmp	r5, r6
   10554:	461a      	mov	r2, r3
   10556:	d1f7      	bne.n	10548 <z_arm_fault+0x16c>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   10558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1055a:	f1b9 0f00 	cmp.w	r9, #0
   1055e:	d057      	beq.n	10610 <z_arm_fault+0x234>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   10560:	f3c3 0208 	ubfx	r2, r3, #0, #9
   10564:	b922      	cbnz	r2, 10570 <z_arm_fault+0x194>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   10566:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1056a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1056e:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   10570:	4620      	mov	r0, r4
   10572:	a908      	add	r1, sp, #32
   10574:	f7ff fbda 	bl	fd2c <z_arm_fatal_error>
}
   10578:	b010      	add	sp, #64	; 0x40
   1057a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1057e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10580:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   10584:	d005      	beq.n	10592 <z_arm_fault+0x1b6>
			reason = bus_fault(esf, 1, recoverable);
   10586:	2001      	movs	r0, #1
   10588:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   1058c:	f7ff fe0a 	bl	101a4 <bus_fault.constprop.0>
   10590:	e7c5      	b.n	1051e <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   10592:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   10598:	d302      	bcc.n	105a0 <z_arm_fault+0x1c4>
		reason = usage_fault(esf);
   1059a:	f7ff fe91 	bl	102c0 <usage_fault.constprop.0>
   1059e:	e7be      	b.n	1051e <z_arm_fault+0x142>
			__ASSERT(0,
   105a0:	492a      	ldr	r1, [pc, #168]	; (1064c <z_arm_fault+0x270>)
   105a2:	f240 23f2 	movw	r3, #754	; 0x2f2
   105a6:	4a1f      	ldr	r2, [pc, #124]	; (10624 <z_arm_fault+0x248>)
   105a8:	481f      	ldr	r0, [pc, #124]	; (10628 <z_arm_fault+0x24c>)
   105aa:	f014 f9fc 	bl	249a6 <assert_print>
   105ae:	4828      	ldr	r0, [pc, #160]	; (10650 <z_arm_fault+0x274>)
   105b0:	f014 f9f9 	bl	249a6 <assert_print>
   105b4:	f240 21f2 	movw	r1, #754	; 0x2f2
   105b8:	e731      	b.n	1041e <z_arm_fault+0x42>
		__ASSERT(0,
   105ba:	4924      	ldr	r1, [pc, #144]	; (1064c <z_arm_fault+0x270>)
   105bc:	f240 23f6 	movw	r3, #758	; 0x2f6
   105c0:	4a18      	ldr	r2, [pc, #96]	; (10624 <z_arm_fault+0x248>)
   105c2:	4819      	ldr	r0, [pc, #100]	; (10628 <z_arm_fault+0x24c>)
   105c4:	f014 f9ef 	bl	249a6 <assert_print>
   105c8:	4822      	ldr	r0, [pc, #136]	; (10654 <z_arm_fault+0x278>)
   105ca:	f014 f9ec 	bl	249a6 <assert_print>
   105ce:	f240 21f6 	movw	r1, #758	; 0x2f6
   105d2:	e724      	b.n	1041e <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   105d4:	2000      	movs	r0, #0
   105d6:	f10d 011f 	add.w	r1, sp, #31
   105da:	e79e      	b.n	1051a <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
   105dc:	2000      	movs	r0, #0
   105de:	f10d 011f 	add.w	r1, sp, #31
   105e2:	e7d3      	b.n	1058c <z_arm_fault+0x1b0>
	PR_FAULT_INFO(
   105e4:	4b1c      	ldr	r3, [pc, #112]	; (10658 <z_arm_fault+0x27c>)
   105e6:	e75a      	b.n	1049e <z_arm_fault+0xc2>
	PR_FAULT_INFO("***** %s %d) *****",
   105e8:	4a1c      	ldr	r2, [pc, #112]	; (1065c <z_arm_fault+0x280>)
   105ea:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   105ee:	4b1c      	ldr	r3, [pc, #112]	; (10660 <z_arm_fault+0x284>)
   105f0:	bf18      	it	ne
   105f2:	4613      	movne	r3, r2
   105f4:	3f10      	subs	r7, #16
   105f6:	e9cd 3703 	strd	r3, r7, [sp, #12]
   105fa:	4b1a      	ldr	r3, [pc, #104]	; (10664 <z_arm_fault+0x288>)
   105fc:	2201      	movs	r2, #1
   105fe:	9302      	str	r3, [sp, #8]
   10600:	2300      	movs	r3, #0
   10602:	490c      	ldr	r1, [pc, #48]	; (10634 <z_arm_fault+0x258>)
   10604:	4618      	mov	r0, r3
   10606:	e9cd 3300 	strd	r3, r3, [sp]
   1060a:	f015 fa1d 	bl	25a48 <z_log_msg_runtime_create.constprop.0>
}
   1060e:	e795      	b.n	1053c <z_arm_fault+0x160>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10610:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   10614:	f023 0301 	bic.w	r3, r3, #1
   10618:	e7a9      	b.n	1056e <z_arm_fault+0x192>
   1061a:	bf00      	nop
   1061c:	e000ed00 	.word	0xe000ed00
   10620:	0002ccda 	.word	0x0002ccda
   10624:	0002ca45 	.word	0x0002ca45
   10628:	0002b339 	.word	0x0002b339
   1062c:	0002cced 	.word	0x0002cced
   10630:	0002cd2b 	.word	0x0002cd2b
   10634:	0002a450 	.word	0x0002a450
   10638:	0002cd4e 	.word	0x0002cd4e
   1063c:	0002cd65 	.word	0x0002cd65
   10640:	0002cd86 	.word	0x0002cd86
   10644:	0002cd94 	.word	0x0002cd94
   10648:	0002cdb3 	.word	0x0002cdb3
   1064c:	00030a97 	.word	0x00030a97
   10650:	0002cdcf 	.word	0x0002cdcf
   10654:	0002cdf3 	.word	0x0002cdf3
   10658:	0002ce23 	.word	0x0002ce23
   1065c:	0002ccc1 	.word	0x0002ccc1
   10660:	0002ccac 	.word	0x0002ccac
   10664:	0002ce47 	.word	0x0002ce47

00010668 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   10668:	4b04      	ldr	r3, [pc, #16]	; (1067c <z_arm_fault_init+0x14>)
   1066a:	695a      	ldr	r2, [r3, #20]
   1066c:	f042 0210 	orr.w	r2, r2, #16
   10670:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   10672:	695a      	ldr	r2, [r3, #20]
   10674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   10678:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1067a:	4770      	bx	lr
   1067c:	e000ed00 	.word	0xe000ed00

00010680 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   10680:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   10684:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   10688:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1068a:	4672      	mov	r2, lr
	bl z_arm_fault
   1068c:	f7ff fea6 	bl	103dc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   10690:	bd01      	pop	{r0, pc}
   10692:	bf00      	nop

00010694 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   10694:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10696:	2120      	movs	r1, #32
   10698:	4803      	ldr	r0, [pc, #12]	; (106a8 <z_arm_interrupt_init+0x14>)
   1069a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1069c:	3301      	adds	r3, #1
   1069e:	2b45      	cmp	r3, #69	; 0x45
   106a0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   106a4:	d1f9      	bne.n	1069a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   106a6:	4770      	bx	lr
   106a8:	e000e100 	.word	0xe000e100

000106ac <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   106ac:	2000      	movs	r0, #0
    msr CONTROL, r0
   106ae:	f380 8814 	msr	CONTROL, r0
    isb
   106b2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   106b6:	2000      	movs	r0, #0
    msr MSPLIM, r0
   106b8:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   106bc:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   106c0:	f7fd fb0a 	bl	dcd8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   106c4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   106c6:	490e      	ldr	r1, [pc, #56]	; (10700 <__start+0x54>)
    str r0, [r1]
   106c8:	6008      	str	r0, [r1, #0]
    dsb
   106ca:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   106ce:	480d      	ldr	r0, [pc, #52]	; (10704 <__start+0x58>)
    msr msp, r0
   106d0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   106d4:	f000 f83e 	bl	10754 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   106d8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   106da:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   106de:	480a      	ldr	r0, [pc, #40]	; (10708 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   106e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   106e4:	1840      	adds	r0, r0, r1
    msr PSP, r0
   106e6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   106ea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   106ee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   106f0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   106f2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   106f6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   106fa:	f7ff fbcd 	bl	fe98 <z_arm_prep_c>
   106fe:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   10700:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   10704:	20033050 	.word	0x20033050
    ldr r0, =z_interrupt_stacks
   10708:	20032310 	.word	0x20032310

0001070c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1070c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   10710:	4905      	ldr	r1, [pc, #20]	; (10728 <sys_arch_reboot+0x1c>)
   10712:	4b06      	ldr	r3, [pc, #24]	; (1072c <sys_arch_reboot+0x20>)
   10714:	68ca      	ldr	r2, [r1, #12]
   10716:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1071a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1071c:	60cb      	str	r3, [r1, #12]
   1071e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   10722:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   10724:	e7fd      	b.n	10722 <sys_arch_reboot+0x16>
   10726:	bf00      	nop
   10728:	e000ed00 	.word	0xe000ed00
   1072c:	05fa0004 	.word	0x05fa0004

00010730 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   10730:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   10732:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   10734:	4906      	ldr	r1, [pc, #24]	; (10750 <z_arm_clear_arm_mpu_config+0x20>)
   10736:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   1073a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   1073e:	4293      	cmp	r3, r2
   10740:	db00      	blt.n	10744 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   10742:	4770      	bx	lr
  mpu->RNR = rnr;
   10744:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   10748:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1074c:	3301      	adds	r3, #1
   1074e:	e7f6      	b.n	1073e <z_arm_clear_arm_mpu_config+0xe>
   10750:	e000ed00 	.word	0xe000ed00

00010754 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   10754:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   10756:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   10758:	2400      	movs	r4, #0
   1075a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1075e:	f7ff ffe7 	bl	10730 <z_arm_clear_arm_mpu_config>
   10762:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   10764:	f04f 30ff 	mov.w	r0, #4294967295
   10768:	4a0c      	ldr	r2, [pc, #48]	; (1079c <z_arm_init_arch_hw_at_boot+0x48>)
   1076a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1076e:	3301      	adds	r3, #1
   10770:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   10772:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   10776:	d1f8      	bne.n	1076a <z_arm_init_arch_hw_at_boot+0x16>
   10778:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1077a:	f04f 30ff 	mov.w	r0, #4294967295
   1077e:	4a07      	ldr	r2, [pc, #28]	; (1079c <z_arm_init_arch_hw_at_boot+0x48>)
   10780:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   10784:	3301      	adds	r3, #1
   10786:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   10788:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1078c:	d1f8      	bne.n	10780 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1078e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   10790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10794:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   10798:	bd10      	pop	{r4, pc}
   1079a:	bf00      	nop
   1079c:	e000e100 	.word	0xe000e100

000107a0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   107a0:	4b08      	ldr	r3, [pc, #32]	; (107c4 <z_impl_k_thread_abort+0x24>)
   107a2:	689b      	ldr	r3, [r3, #8]
   107a4:	4283      	cmp	r3, r0
   107a6:	d10b      	bne.n	107c0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   107a8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   107ac:	b143      	cbz	r3, 107c0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   107ae:	4b06      	ldr	r3, [pc, #24]	; (107c8 <z_impl_k_thread_abort+0x28>)
   107b0:	685a      	ldr	r2, [r3, #4]
   107b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   107b6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   107b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   107ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   107be:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   107c0:	f011 b8ba 	b.w	21938 <z_thread_abort>
   107c4:	20021460 	.word	0x20021460
   107c8:	e000ed00 	.word	0xe000ed00

000107cc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   107cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   107ce:	4c09      	ldr	r4, [pc, #36]	; (107f4 <z_arm_configure_static_mpu_regions+0x28>)
   107d0:	4a09      	ldr	r2, [pc, #36]	; (107f8 <z_arm_configure_static_mpu_regions+0x2c>)
   107d2:	4623      	mov	r3, r4
   107d4:	2101      	movs	r1, #1
   107d6:	4809      	ldr	r0, [pc, #36]	; (107fc <z_arm_configure_static_mpu_regions+0x30>)
   107d8:	f000 f918 	bl	10a0c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   107dc:	2300      	movs	r3, #0
   107de:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   107e0:	4b07      	ldr	r3, [pc, #28]	; (10800 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   107e2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   107e4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   107e6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   107e8:	9301      	str	r3, [sp, #4]
   107ea:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   107ec:	f000 f932 	bl	10a54 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   107f0:	b004      	add	sp, #16
   107f2:	bd10      	pop	{r4, pc}
   107f4:	20070000 	.word	0x20070000
   107f8:	20008000 	.word	0x20008000
   107fc:	0002ab90 	.word	0x0002ab90
   10800:	20008d58 	.word	0x20008d58

00010804 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   10804:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   10806:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10808:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1080a:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1080e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   10812:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10814:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10816:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10818:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   1081c:	4905      	ldr	r1, [pc, #20]	; (10834 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1081e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   10822:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   10826:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   1082a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   1082e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   10832:	bd10      	pop	{r4, pc}
   10834:	e000ed00 	.word	0xe000ed00

00010838 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   10838:	2807      	cmp	r0, #7
{
   1083a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1083c:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   1083e:	d90f      	bls.n	10860 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   10840:	4b09      	ldr	r3, [pc, #36]	; (10868 <region_allocate_and_init+0x30>)
   10842:	9003      	str	r0, [sp, #12]
   10844:	9302      	str	r3, [sp, #8]
   10846:	2300      	movs	r3, #0
   10848:	2201      	movs	r2, #1
   1084a:	4618      	mov	r0, r3
   1084c:	e9cd 3300 	strd	r3, r3, [sp]
   10850:	4906      	ldr	r1, [pc, #24]	; (1086c <region_allocate_and_init+0x34>)
   10852:	f015 f914 	bl	25a7e <z_log_msg_runtime_create.constprop.0>
   10856:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1085a:	4620      	mov	r0, r4
   1085c:	b004      	add	sp, #16
   1085e:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   10860:	f7ff ffd0 	bl	10804 <region_init>
	return index;
   10864:	e7f9      	b.n	1085a <region_allocate_and_init+0x22>
   10866:	bf00      	nop
   10868:	0002ce5e 	.word	0x0002ce5e
   1086c:	0002a438 	.word	0x0002a438

00010870 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   10870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10874:	4689      	mov	r9, r1
   10876:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   10878:	4606      	mov	r6, r0
   1087a:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   1087e:	4d54      	ldr	r5, [pc, #336]	; (109d0 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   10880:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   10882:	45c8      	cmp	r8, r9
   10884:	da2d      	bge.n	108e2 <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   10886:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1088a:	f1ba 0f00 	cmp.w	sl, #0
   1088e:	d04a      	beq.n	10926 <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   10890:	f1ba 0f1f 	cmp.w	sl, #31
   10894:	d917      	bls.n	108c6 <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   10896:	f01a 0f1f 	tst.w	sl, #31
   1089a:	d114      	bne.n	108c6 <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   1089c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   108a0:	f01b 0f1f 	tst.w	fp, #31
   108a4:	d10f      	bne.n	108c6 <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   108a6:	4658      	mov	r0, fp
   108a8:	f015 f8e0 	bl	25a6c <arm_cmse_mpu_region_get>
   108ac:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   108ae:	eb0a 000b 	add.w	r0, sl, fp
   108b2:	3801      	subs	r0, #1
   108b4:	f015 f8da 	bl	25a6c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   108b8:	4287      	cmp	r7, r0
   108ba:	d016      	beq.n	108ea <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   108bc:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   108c0:	4b44      	ldr	r3, [pc, #272]	; (109d4 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   108c2:	9703      	str	r7, [sp, #12]
   108c4:	e002      	b.n	108cc <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   108c6:	4b44      	ldr	r3, [pc, #272]	; (109d8 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   108c8:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   108cc:	9302      	str	r3, [sp, #8]
   108ce:	2300      	movs	r3, #0
   108d0:	2201      	movs	r2, #1
   108d2:	4618      	mov	r0, r3
   108d4:	e9cd 3300 	strd	r3, r3, [sp]
   108d8:	4940      	ldr	r1, [pc, #256]	; (109dc <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   108da:	f015 f8d0 	bl	25a7e <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   108de:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   108e2:	4620      	mov	r0, r4
   108e4:	b009      	add	sp, #36	; 0x24
   108e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   108ea:	f117 0f16 	cmn.w	r7, #22
   108ee:	d0e7      	beq.n	108c0 <mpu_configure_regions_and_partition.constprop.0+0x50>
   108f0:	42bc      	cmp	r4, r7
   108f2:	dde5      	ble.n	108c0 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   108f4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   108f8:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   108fc:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   10900:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   10904:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10908:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1090c:	e9d6 3200 	ldrd	r3, r2, [r6]
   10910:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   10912:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   10914:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   10918:	d11d      	bne.n	10956 <mpu_configure_regions_and_partition.constprop.0+0xe6>
   1091a:	45d3      	cmp	fp, sl
   1091c:	d107      	bne.n	1092e <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   1091e:	4631      	mov	r1, r6
   10920:	b2f8      	uxtb	r0, r7
   10922:	f015 f8bc 	bl	25a9e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10926:	f108 0801 	add.w	r8, r8, #1
   1092a:	360c      	adds	r6, #12
   1092c:	e7a9      	b.n	10882 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   1092e:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   10930:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   10934:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   10938:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1093c:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   10940:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   10942:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   10946:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   10948:	f015 f8a9 	bl	25a9e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1094c:	f110 0f16 	cmn.w	r0, #22
   10950:	d0c5      	beq.n	108de <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   10952:	1c44      	adds	r4, r0, #1
   10954:	e7e7      	b.n	10926 <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
   10956:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   1095a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   1095e:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   10960:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   10964:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   10968:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1096a:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   1096c:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   1096e:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   10970:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   10974:	d0e8      	beq.n	10948 <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
   10976:	f015 f892 	bl	25a9e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1097a:	f110 0f16 	cmn.w	r0, #22
   1097e:	d0ae      	beq.n	108de <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   10980:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   10984:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   10988:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   1098c:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
   10990:	f362 0304 	bfi	r3, r2, #0, #5
   10994:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   10998:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1099c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   109a0:	085b      	lsrs	r3, r3, #1
   109a2:	f363 1247 	bfi	r2, r3, #5, #3
   109a6:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   109aa:	e9d6 3200 	ldrd	r3, r2, [r6]
   109ae:	4413      	add	r3, r2
   109b0:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   109b2:	f023 031f 	bic.w	r3, r3, #31
   109b6:	445b      	add	r3, fp
   109b8:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   109bc:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   109be:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   109c2:	a904      	add	r1, sp, #16
   109c4:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   109c6:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   109c8:	f7ff ff36 	bl	10838 <region_allocate_and_init>
   109cc:	e7be      	b.n	1094c <mpu_configure_regions_and_partition.constprop.0+0xdc>
   109ce:	bf00      	nop
   109d0:	e000ed00 	.word	0xe000ed00
   109d4:	0002cea7 	.word	0x0002cea7
   109d8:	0002ce84 	.word	0x0002ce84
   109dc:	0002a438 	.word	0x0002a438

000109e0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   109e0:	2205      	movs	r2, #5
   109e2:	4b04      	ldr	r3, [pc, #16]	; (109f4 <arm_core_mpu_enable+0x14>)
   109e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   109e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   109ec:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   109f0:	4770      	bx	lr
   109f2:	bf00      	nop
   109f4:	e000ed00 	.word	0xe000ed00

000109f8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   109f8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   109fc:	2200      	movs	r2, #0
   109fe:	4b02      	ldr	r3, [pc, #8]	; (10a08 <arm_core_mpu_disable+0x10>)
   10a00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   10a04:	4770      	bx	lr
   10a06:	bf00      	nop
   10a08:	e000ed00 	.word	0xe000ed00

00010a0c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   10a0c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   10a0e:	4d0c      	ldr	r5, [pc, #48]	; (10a40 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   10a10:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   10a12:	782a      	ldrb	r2, [r5, #0]
   10a14:	f7ff ff2c 	bl	10870 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10a18:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   10a1a:	3016      	adds	r0, #22
   10a1c:	d10f      	bne.n	10a3e <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   10a1e:	f44f 738d 	mov.w	r3, #282	; 0x11a
   10a22:	4a08      	ldr	r2, [pc, #32]	; (10a44 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   10a24:	4908      	ldr	r1, [pc, #32]	; (10a48 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   10a26:	4809      	ldr	r0, [pc, #36]	; (10a4c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   10a28:	f013 ffbd 	bl	249a6 <assert_print>
   10a2c:	4621      	mov	r1, r4
   10a2e:	4808      	ldr	r0, [pc, #32]	; (10a50 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   10a30:	f013 ffb9 	bl	249a6 <assert_print>
   10a34:	f44f 718d 	mov.w	r1, #282	; 0x11a
   10a38:	4802      	ldr	r0, [pc, #8]	; (10a44 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   10a3a:	f013 ffad 	bl	24998 <assert_post_action>
			regions_num);
	}
}
   10a3e:	bd38      	pop	{r3, r4, r5, pc}
   10a40:	20021cde 	.word	0x20021cde
   10a44:	0002ceca 	.word	0x0002ceca
   10a48:	00030a97 	.word	0x00030a97
   10a4c:	0002b339 	.word	0x0002b339
   10a50:	0002cf01 	.word	0x0002cf01

00010a54 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   10a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a58:	4e31      	ldr	r6, [pc, #196]	; (10b20 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   10a5a:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10a5c:	4605      	mov	r5, r0
   10a5e:	f04f 0800 	mov.w	r8, #0
   10a62:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   10a64:	4f2f      	ldr	r7, [pc, #188]	; (10b24 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10a66:	45c8      	cmp	r8, r9
   10a68:	db02      	blt.n	10a70 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   10a6a:	b003      	add	sp, #12
   10a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   10a70:	f8d5 a004 	ldr.w	sl, [r5, #4]
   10a74:	f1ba 0f00 	cmp.w	sl, #0
   10a78:	d04c      	beq.n	10b14 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   10a7a:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10a7c:	4608      	mov	r0, r1
   10a7e:	9101      	str	r1, [sp, #4]
   10a80:	f014 fff4 	bl	25a6c <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10a84:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10a86:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   10a88:	eb0a 0001 	add.w	r0, sl, r1
   10a8c:	3801      	subs	r0, #1
   10a8e:	f014 ffed 	bl	25a6c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10a92:	4284      	cmp	r4, r0
   10a94:	f04f 0214 	mov.w	r2, #20
   10a98:	4b23      	ldr	r3, [pc, #140]	; (10b28 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   10a9a:	d015      	beq.n	10ac8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   10a9c:	fb02 f308 	mul.w	r3, r2, r8
   10aa0:	f06f 0215 	mvn.w	r2, #21
   10aa4:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   10aa8:	f44f 7395 	mov.w	r3, #298	; 0x12a
   10aac:	4a1f      	ldr	r2, [pc, #124]	; (10b2c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   10aae:	4920      	ldr	r1, [pc, #128]	; (10b30 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   10ab0:	4820      	ldr	r0, [pc, #128]	; (10b34 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   10ab2:	f013 ff78 	bl	249a6 <assert_print>
   10ab6:	4649      	mov	r1, r9
   10ab8:	481f      	ldr	r0, [pc, #124]	; (10b38 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   10aba:	f013 ff74 	bl	249a6 <assert_print>
   10abe:	f44f 7195 	mov.w	r1, #298	; 0x12a
   10ac2:	481a      	ldr	r0, [pc, #104]	; (10b2c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   10ac4:	f013 ff68 	bl	24998 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   10ac8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   10acc:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   10ace:	d0eb      	beq.n	10aa8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10ad0:	7819      	ldrb	r1, [r3, #0]
   10ad2:	42a1      	cmp	r1, r4
   10ad4:	dde8      	ble.n	10aa8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   10ad6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   10ada:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   10ade:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   10ae2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   10ae6:	f100 0108 	add.w	r1, r0, #8
   10aea:	7b00      	ldrb	r0, [r0, #12]
   10aec:	f364 0004 	bfi	r0, r4, #0, #5
   10af0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   10af2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   10af6:	790c      	ldrb	r4, [r1, #4]
   10af8:	0840      	lsrs	r0, r0, #1
   10afa:	f360 1447 	bfi	r4, r0, #5, #3
   10afe:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   10b00:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   10b04:	f021 011f 	bic.w	r1, r1, #31
   10b08:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   10b0a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   10b0e:	f021 011f 	bic.w	r1, r1, #31
   10b12:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10b14:	f108 0801 	add.w	r8, r8, #1
   10b18:	3614      	adds	r6, #20
   10b1a:	350c      	adds	r5, #12
   10b1c:	e7a3      	b.n	10a66 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   10b1e:	bf00      	nop
   10b20:	20020f1c 	.word	0x20020f1c
   10b24:	e000ed00 	.word	0xe000ed00
   10b28:	20021cde 	.word	0x20021cde
   10b2c:	0002ceca 	.word	0x0002ceca
   10b30:	00030a97 	.word	0x00030a97
   10b34:	0002b339 	.word	0x0002b339
   10b38:	0002cf2d 	.word	0x0002cf2d

00010b3c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   10b3c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   10b3e:	4d1f      	ldr	r5, [pc, #124]	; (10bbc <z_arm_mpu_init+0x80>)
   10b40:	682c      	ldr	r4, [r5, #0]
   10b42:	2c08      	cmp	r4, #8
   10b44:	d910      	bls.n	10b68 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   10b46:	f240 1351 	movw	r3, #337	; 0x151
   10b4a:	4a1d      	ldr	r2, [pc, #116]	; (10bc0 <z_arm_mpu_init+0x84>)
   10b4c:	491d      	ldr	r1, [pc, #116]	; (10bc4 <z_arm_mpu_init+0x88>)
   10b4e:	481e      	ldr	r0, [pc, #120]	; (10bc8 <z_arm_mpu_init+0x8c>)
   10b50:	f013 ff29 	bl	249a6 <assert_print>
   10b54:	4621      	mov	r1, r4
   10b56:	2208      	movs	r2, #8
   10b58:	481c      	ldr	r0, [pc, #112]	; (10bcc <z_arm_mpu_init+0x90>)
   10b5a:	f013 ff24 	bl	249a6 <assert_print>
   10b5e:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   10b62:	4817      	ldr	r0, [pc, #92]	; (10bc0 <z_arm_mpu_init+0x84>)
   10b64:	f013 ff18 	bl	24998 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10b68:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   10b6a:	f7ff ff45 	bl	109f8 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   10b6e:	4b18      	ldr	r3, [pc, #96]	; (10bd0 <z_arm_mpu_init+0x94>)
   10b70:	4a18      	ldr	r2, [pc, #96]	; (10bd4 <z_arm_mpu_init+0x98>)
   10b72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10b76:	4284      	cmp	r4, r0
   10b78:	d117      	bne.n	10baa <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   10b7a:	4b17      	ldr	r3, [pc, #92]	; (10bd8 <z_arm_mpu_init+0x9c>)
   10b7c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   10b7e:	f7ff ff2f 	bl	109e0 <arm_core_mpu_enable>
	__ASSERT(
   10b82:	4b13      	ldr	r3, [pc, #76]	; (10bd0 <z_arm_mpu_init+0x94>)
   10b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   10b88:	f3c3 2307 	ubfx	r3, r3, #8, #8
   10b8c:	2b08      	cmp	r3, #8
   10b8e:	d013      	beq.n	10bb8 <z_arm_mpu_init+0x7c>
   10b90:	4912      	ldr	r1, [pc, #72]	; (10bdc <z_arm_mpu_init+0xa0>)
   10b92:	f240 13bb 	movw	r3, #443	; 0x1bb
   10b96:	4a0a      	ldr	r2, [pc, #40]	; (10bc0 <z_arm_mpu_init+0x84>)
   10b98:	480b      	ldr	r0, [pc, #44]	; (10bc8 <z_arm_mpu_init+0x8c>)
   10b9a:	f013 ff04 	bl	249a6 <assert_print>
   10b9e:	4810      	ldr	r0, [pc, #64]	; (10be0 <z_arm_mpu_init+0xa4>)
   10ba0:	f013 ff01 	bl	249a6 <assert_print>
   10ba4:	f240 11bb 	movw	r1, #443	; 0x1bb
   10ba8:	e7db      	b.n	10b62 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   10baa:	6869      	ldr	r1, [r5, #4]
   10bac:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   10bb0:	f7ff fe28 	bl	10804 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10bb4:	3001      	adds	r0, #1
   10bb6:	e7de      	b.n	10b76 <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   10bb8:	2000      	movs	r0, #0
   10bba:	bd38      	pop	{r3, r4, r5, pc}
   10bbc:	0002ab9c 	.word	0x0002ab9c
   10bc0:	0002ceca 	.word	0x0002ceca
   10bc4:	00030a97 	.word	0x00030a97
   10bc8:	0002b339 	.word	0x0002b339
   10bcc:	0002cf5c 	.word	0x0002cf5c
   10bd0:	e000ed00 	.word	0xe000ed00
   10bd4:	0044ffaa 	.word	0x0044ffaa
   10bd8:	20021cde 	.word	0x20021cde
   10bdc:	0002cf90 	.word	0x0002cf90
   10be0:	0002cfe0 	.word	0x0002cfe0

00010be4 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   10be4:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   10be6:	4b0b      	ldr	r3, [pc, #44]	; (10c14 <malloc_prepare+0x30>)
   10be8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   10bec:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   10bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   10bf4:	d20c      	bcs.n	10c10 <malloc_prepare+0x2c>
   10bf6:	4908      	ldr	r1, [pc, #32]	; (10c18 <malloc_prepare+0x34>)
   10bf8:	2381      	movs	r3, #129	; 0x81
   10bfa:	4a08      	ldr	r2, [pc, #32]	; (10c1c <malloc_prepare+0x38>)
   10bfc:	4808      	ldr	r0, [pc, #32]	; (10c20 <malloc_prepare+0x3c>)
   10bfe:	f013 fed2 	bl	249a6 <assert_print>
   10c02:	4808      	ldr	r0, [pc, #32]	; (10c24 <malloc_prepare+0x40>)
   10c04:	f013 fecf 	bl	249a6 <assert_print>
   10c08:	2181      	movs	r1, #129	; 0x81
   10c0a:	4804      	ldr	r0, [pc, #16]	; (10c1c <malloc_prepare+0x38>)
   10c0c:	f013 fec4 	bl	24998 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   10c10:	2000      	movs	r0, #0
   10c12:	bd08      	pop	{r3, pc}
   10c14:	20036fc0 	.word	0x20036fc0
   10c18:	0002d031 	.word	0x0002d031
   10c1c:	0002d001 	.word	0x0002d001
   10c20:	0002b339 	.word	0x0002b339
   10c24:	0002d078 	.word	0x0002d078

00010c28 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10c28:	4b01      	ldr	r3, [pc, #4]	; (10c30 <__stdout_hook_install+0x8>)
   10c2a:	6018      	str	r0, [r3, #0]
}
   10c2c:	4770      	bx	lr
   10c2e:	bf00      	nop
   10c30:	20008468 	.word	0x20008468

00010c34 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   10c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c36:	4606      	mov	r6, r0
   10c38:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   10c3a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   10c3c:	4f06      	ldr	r7, [pc, #24]	; (10c58 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   10c3e:	42ac      	cmp	r4, r5
   10c40:	da08      	bge.n	10c54 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   10c42:	683b      	ldr	r3, [r7, #0]
   10c44:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   10c46:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   10c48:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   10c4a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   10c4e:	d001      	beq.n	10c54 <z_impl_zephyr_read_stdin+0x20>
   10c50:	280d      	cmp	r0, #13
   10c52:	d1f4      	bne.n	10c3e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   10c54:	4620      	mov	r0, r4
   10c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c58:	20008464 	.word	0x20008464

00010c5c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   10c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c5e:	460d      	mov	r5, r1
   10c60:	4f09      	ldr	r7, [pc, #36]	; (10c88 <z_impl_zephyr_write_stdout+0x2c>)
   10c62:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   10c64:	f1c0 0401 	rsb	r4, r0, #1
   10c68:	19a3      	adds	r3, r4, r6
   10c6a:	429d      	cmp	r5, r3
   10c6c:	dc01      	bgt.n	10c72 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   10c6e:	4628      	mov	r0, r5
   10c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   10c72:	7873      	ldrb	r3, [r6, #1]
   10c74:	2b0a      	cmp	r3, #10
   10c76:	d102      	bne.n	10c7e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   10c78:	200d      	movs	r0, #13
   10c7a:	683b      	ldr	r3, [r7, #0]
   10c7c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   10c7e:	683b      	ldr	r3, [r7, #0]
   10c80:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   10c84:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   10c86:	e7ef      	b.n	10c68 <z_impl_zephyr_write_stdout+0xc>
   10c88:	20008468 	.word	0x20008468

00010c8c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   10c8c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   10c8e:	2105      	movs	r1, #5
   10c90:	4801      	ldr	r0, [pc, #4]	; (10c98 <_exit+0xc>)
   10c92:	f7ff ffe3 	bl	10c5c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   10c96:	e7fe      	b.n	10c96 <_exit+0xa>
   10c98:	0002d0ff 	.word	0x0002d0ff

00010c9c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   10c9c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   10c9e:	4c07      	ldr	r4, [pc, #28]	; (10cbc <_sbrk+0x20>)
   10ca0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   10ca2:	18c2      	adds	r2, r0, r3
   10ca4:	4806      	ldr	r0, [pc, #24]	; (10cc0 <_sbrk+0x24>)
   10ca6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   10caa:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   10cae:	428a      	cmp	r2, r1
		heap_sz += count;
   10cb0:	bf36      	itet	cc
   10cb2:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   10cb4:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   10cb8:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   10cba:	bd10      	pop	{r4, pc}
   10cbc:	20020f30 	.word	0x20020f30
   10cc0:	20036fc0 	.word	0x20036fc0

00010cc4 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   10cc4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   10cc6:	4604      	mov	r4, r0
   10cc8:	b958      	cbnz	r0, 10ce2 <__retarget_lock_init_recursive+0x1e>
   10cca:	4911      	ldr	r1, [pc, #68]	; (10d10 <__retarget_lock_init_recursive+0x4c>)
   10ccc:	f240 137b 	movw	r3, #379	; 0x17b
   10cd0:	4a10      	ldr	r2, [pc, #64]	; (10d14 <__retarget_lock_init_recursive+0x50>)
   10cd2:	4811      	ldr	r0, [pc, #68]	; (10d18 <__retarget_lock_init_recursive+0x54>)
   10cd4:	f013 fe67 	bl	249a6 <assert_print>
   10cd8:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   10cdc:	480d      	ldr	r0, [pc, #52]	; (10d14 <__retarget_lock_init_recursive+0x50>)
   10cde:	f013 fe5b 	bl	24998 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   10ce2:	2014      	movs	r0, #20
   10ce4:	f011 ff70 	bl	22bc8 <malloc>
   10ce8:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   10cea:	b960      	cbnz	r0, 10d06 <__retarget_lock_init_recursive+0x42>
   10cec:	490b      	ldr	r1, [pc, #44]	; (10d1c <__retarget_lock_init_recursive+0x58>)
   10cee:	f240 1383 	movw	r3, #387	; 0x183
   10cf2:	4a08      	ldr	r2, [pc, #32]	; (10d14 <__retarget_lock_init_recursive+0x50>)
   10cf4:	4808      	ldr	r0, [pc, #32]	; (10d18 <__retarget_lock_init_recursive+0x54>)
   10cf6:	f013 fe56 	bl	249a6 <assert_print>
   10cfa:	4809      	ldr	r0, [pc, #36]	; (10d20 <__retarget_lock_init_recursive+0x5c>)
   10cfc:	f013 fe53 	bl	249a6 <assert_print>
   10d00:	f240 1183 	movw	r1, #387	; 0x183
   10d04:	e7ea      	b.n	10cdc <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   10d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   10d0a:	f018 b9c9 	b.w	290a0 <z_impl_k_mutex_init>
   10d0e:	bf00      	nop
   10d10:	0002d106 	.word	0x0002d106
   10d14:	0002d001 	.word	0x0002d001
   10d18:	0002b339 	.word	0x0002b339
   10d1c:	0002d105 	.word	0x0002d105
   10d20:	0002d141 	.word	0x0002d141

00010d24 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   10d24:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   10d26:	b958      	cbnz	r0, 10d40 <__retarget_lock_acquire_recursive+0x1c>
   10d28:	4909      	ldr	r1, [pc, #36]	; (10d50 <__retarget_lock_acquire_recursive+0x2c>)
   10d2a:	480a      	ldr	r0, [pc, #40]	; (10d54 <__retarget_lock_acquire_recursive+0x30>)
   10d2c:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   10d30:	4a09      	ldr	r2, [pc, #36]	; (10d58 <__retarget_lock_acquire_recursive+0x34>)
   10d32:	f013 fe38 	bl	249a6 <assert_print>
   10d36:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   10d3a:	4807      	ldr	r0, [pc, #28]	; (10d58 <__retarget_lock_acquire_recursive+0x34>)
   10d3c:	f013 fe2c 	bl	24998 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   10d40:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   10d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10d48:	f04f 33ff 	mov.w	r3, #4294967295
   10d4c:	f00e bc64 	b.w	1f618 <z_impl_k_mutex_lock>
   10d50:	0002d106 	.word	0x0002d106
   10d54:	0002b339 	.word	0x0002b339
   10d58:	0002d001 	.word	0x0002d001

00010d5c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   10d5c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   10d5e:	b958      	cbnz	r0, 10d78 <__retarget_lock_release_recursive+0x1c>
   10d60:	4907      	ldr	r1, [pc, #28]	; (10d80 <__retarget_lock_release_recursive+0x24>)
   10d62:	4808      	ldr	r0, [pc, #32]	; (10d84 <__retarget_lock_release_recursive+0x28>)
   10d64:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   10d68:	4a07      	ldr	r2, [pc, #28]	; (10d88 <__retarget_lock_release_recursive+0x2c>)
   10d6a:	f013 fe1c 	bl	249a6 <assert_print>
   10d6e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   10d72:	4805      	ldr	r0, [pc, #20]	; (10d88 <__retarget_lock_release_recursive+0x2c>)
   10d74:	f013 fe10 	bl	24998 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   10d78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   10d7c:	f00e bd1c 	b.w	1f7b8 <z_impl_k_mutex_unlock>
   10d80:	0002d106 	.word	0x0002d106
   10d84:	0002b339 	.word	0x0002b339
   10d88:	0002d001 	.word	0x0002d001

00010d8c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   10d8c:	b508      	push	{r3, lr}
   10d8e:	211d      	movs	r1, #29
   10d90:	4804      	ldr	r0, [pc, #16]	; (10da4 <__chk_fail+0x18>)
   10d92:	f7ff ff63 	bl	10c5c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   10d96:	4040      	eors	r0, r0
   10d98:	f380 8811 	msr	BASEPRI, r0
   10d9c:	f04f 0003 	mov.w	r0, #3
   10da0:	df02      	svc	2
	CODE_UNREACHABLE;
   10da2:	bf00      	nop
   10da4:	0002d164 	.word	0x0002d164

00010da8 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   10da8:	2000      	movs	r0, #0
   10daa:	4b02      	ldr	r3, [pc, #8]	; (10db4 <remoteproc_mgr_boot+0xc>)
   10dac:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   10db0:	4770      	bx	lr
   10db2:	bf00      	nop
   10db4:	40005000 	.word	0x40005000

00010db8 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   10db8:	4b0e      	ldr	r3, [pc, #56]	; (10df4 <bt_hex+0x3c>)
   10dba:	2940      	cmp	r1, #64	; 0x40
   10dbc:	bf28      	it	cs
   10dbe:	2140      	movcs	r1, #64	; 0x40
{
   10dc0:	b570      	push	{r4, r5, r6, lr}
   10dc2:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   10dc4:	4c0c      	ldr	r4, [pc, #48]	; (10df8 <bt_hex+0x40>)
   10dc6:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   10dc8:	42b0      	cmp	r0, r6
   10dca:	f103 0302 	add.w	r3, r3, #2
   10dce:	d104      	bne.n	10dda <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   10dd0:	2300      	movs	r3, #0
   10dd2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   10dd6:	4807      	ldr	r0, [pc, #28]	; (10df4 <bt_hex+0x3c>)
   10dd8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   10dda:	7802      	ldrb	r2, [r0, #0]
   10ddc:	0912      	lsrs	r2, r2, #4
   10dde:	5ca2      	ldrb	r2, [r4, r2]
   10de0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   10de4:	f810 2b01 	ldrb.w	r2, [r0], #1
   10de8:	f002 020f 	and.w	r2, r2, #15
   10dec:	5ca2      	ldrb	r2, [r4, r2]
   10dee:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   10df2:	e7e9      	b.n	10dc8 <bt_hex+0x10>
   10df4:	20021cfd 	.word	0x20021cfd
   10df8:	0002d1c4 	.word	0x0002d1c4

00010dfc <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   10dfc:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   10dfe:	7803      	ldrb	r3, [r0, #0]
   10e00:	b08b      	sub	sp, #44	; 0x2c
   10e02:	4604      	mov	r4, r0
   10e04:	ad07      	add	r5, sp, #28
   10e06:	2b03      	cmp	r3, #3
   10e08:	d821      	bhi.n	10e4e <bt_addr_le_str+0x52>
   10e0a:	e8df f003 	tbb	[pc, r3]
   10e0e:	1a02      	.short	0x1a02
   10e10:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   10e12:	4912      	ldr	r1, [pc, #72]	; (10e5c <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   10e14:	4628      	mov	r0, r5
   10e16:	f018 fc8e 	bl	29736 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10e1a:	9505      	str	r5, [sp, #20]
   10e1c:	7863      	ldrb	r3, [r4, #1]
   10e1e:	211e      	movs	r1, #30
   10e20:	9304      	str	r3, [sp, #16]
   10e22:	78a3      	ldrb	r3, [r4, #2]
   10e24:	4a0e      	ldr	r2, [pc, #56]	; (10e60 <bt_addr_le_str+0x64>)
   10e26:	9303      	str	r3, [sp, #12]
   10e28:	78e3      	ldrb	r3, [r4, #3]
   10e2a:	480e      	ldr	r0, [pc, #56]	; (10e64 <bt_addr_le_str+0x68>)
   10e2c:	9302      	str	r3, [sp, #8]
   10e2e:	7923      	ldrb	r3, [r4, #4]
   10e30:	9301      	str	r3, [sp, #4]
   10e32:	7963      	ldrb	r3, [r4, #5]
   10e34:	9300      	str	r3, [sp, #0]
   10e36:	79a3      	ldrb	r3, [r4, #6]
   10e38:	f013 fc00 	bl	2463c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   10e3c:	4809      	ldr	r0, [pc, #36]	; (10e64 <bt_addr_le_str+0x68>)
   10e3e:	b00b      	add	sp, #44	; 0x2c
   10e40:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   10e42:	4909      	ldr	r1, [pc, #36]	; (10e68 <bt_addr_le_str+0x6c>)
   10e44:	e7e6      	b.n	10e14 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   10e46:	4909      	ldr	r1, [pc, #36]	; (10e6c <bt_addr_le_str+0x70>)
   10e48:	e7e4      	b.n	10e14 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   10e4a:	4909      	ldr	r1, [pc, #36]	; (10e70 <bt_addr_le_str+0x74>)
   10e4c:	e7e2      	b.n	10e14 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10e4e:	210a      	movs	r1, #10
   10e50:	4628      	mov	r0, r5
   10e52:	4a08      	ldr	r2, [pc, #32]	; (10e74 <bt_addr_le_str+0x78>)
   10e54:	f013 fbf2 	bl	2463c <snprintk>
		break;
   10e58:	e7df      	b.n	10e1a <bt_addr_le_str+0x1e>
   10e5a:	bf00      	nop
   10e5c:	0002b40d 	.word	0x0002b40d
   10e60:	0002b42f 	.word	0x0002b42f
   10e64:	20021cdf 	.word	0x20021cdf
   10e68:	0002b414 	.word	0x0002b414
   10e6c:	0002b41b 	.word	0x0002b41b
   10e70:	0002b425 	.word	0x0002b425
   10e74:	0002eb34 	.word	0x0002eb34

00010e78 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   10e78:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   10e7a:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   10e7c:	4d09      	ldr	r5, [pc, #36]	; (10ea4 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   10e7e:	4b0a      	ldr	r3, [pc, #40]	; (10ea8 <long_wq_init+0x30>)
{
   10e80:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   10e82:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   10e84:	9302      	str	r3, [sp, #8]
   10e86:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   10e88:	f00f f99c 	bl	201c4 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   10e8c:	ab02      	add	r3, sp, #8
   10e8e:	4628      	mov	r0, r5
   10e90:	9300      	str	r3, [sp, #0]
   10e92:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   10e96:	230a      	movs	r3, #10
   10e98:	4904      	ldr	r1, [pc, #16]	; (10eac <long_wq_init+0x34>)
   10e9a:	f00f f9ad 	bl	201f8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   10e9e:	4620      	mov	r0, r4
   10ea0:	b005      	add	sp, #20
   10ea2:	bd30      	pop	{r4, r5, pc}
   10ea4:	200094e8 	.word	0x200094e8
   10ea8:	0002d1dc 	.word	0x0002d1dc
   10eac:	20031450 	.word	0x20031450

00010eb0 <bt_long_wq_schedule>:
{
   10eb0:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   10eb2:	4801      	ldr	r0, [pc, #4]	; (10eb8 <bt_long_wq_schedule+0x8>)
   10eb4:	f00f bac2 	b.w	2043c <k_work_schedule_for_queue>
   10eb8:	200094e8 	.word	0x200094e8

00010ebc <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   10ebc:	7803      	ldrb	r3, [r0, #0]
{
   10ebe:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   10ec0:	2b01      	cmp	r3, #1
   10ec2:	d013      	beq.n	10eec <uuid_to_uuid128+0x30>
   10ec4:	2b02      	cmp	r3, #2
   10ec6:	d027      	beq.n	10f18 <uuid_to_uuid128+0x5c>
   10ec8:	b97b      	cbnz	r3, 10eea <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   10eca:	460a      	mov	r2, r1
   10ecc:	4b18      	ldr	r3, [pc, #96]	; (10f30 <uuid_to_uuid128+0x74>)
   10ece:	f103 0410 	add.w	r4, r3, #16
   10ed2:	f853 5b04 	ldr.w	r5, [r3], #4
   10ed6:	42a3      	cmp	r3, r4
   10ed8:	f842 5b04 	str.w	r5, [r2], #4
   10edc:	d1f9      	bne.n	10ed2 <uuid_to_uuid128+0x16>
   10ede:	781b      	ldrb	r3, [r3, #0]
   10ee0:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   10ee2:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   10ee4:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   10ee6:	0a1b      	lsrs	r3, r3, #8
   10ee8:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   10eea:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   10eec:	460a      	mov	r2, r1
   10eee:	4b10      	ldr	r3, [pc, #64]	; (10f30 <uuid_to_uuid128+0x74>)
   10ef0:	f103 0410 	add.w	r4, r3, #16
   10ef4:	f853 5b04 	ldr.w	r5, [r3], #4
   10ef8:	42a3      	cmp	r3, r4
   10efa:	f842 5b04 	str.w	r5, [r2], #4
   10efe:	d1f9      	bne.n	10ef4 <uuid_to_uuid128+0x38>
   10f00:	781b      	ldrb	r3, [r3, #0]
   10f02:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   10f04:	6843      	ldr	r3, [r0, #4]
   10f06:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   10f0a:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   10f0c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   10f0e:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   10f10:	0a1b      	lsrs	r3, r3, #8
   10f12:	738a      	strb	r2, [r1, #14]
   10f14:	740b      	strb	r3, [r1, #16]
}
   10f16:	e7e8      	b.n	10eea <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10f18:	f100 0310 	add.w	r3, r0, #16
   10f1c:	f850 2b04 	ldr.w	r2, [r0], #4
   10f20:	4298      	cmp	r0, r3
   10f22:	f841 2b04 	str.w	r2, [r1], #4
   10f26:	d1f9      	bne.n	10f1c <uuid_to_uuid128+0x60>
   10f28:	7803      	ldrb	r3, [r0, #0]
   10f2a:	700b      	strb	r3, [r1, #0]
   10f2c:	e7dd      	b.n	10eea <uuid_to_uuid128+0x2e>
   10f2e:	bf00      	nop
   10f30:	0002d1e5 	.word	0x0002d1e5

00010f34 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   10f34:	b538      	push	{r3, r4, r5, lr}
   10f36:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   10f38:	2d01      	cmp	r5, #1
{
   10f3a:	4610      	mov	r0, r2
   10f3c:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   10f3e:	d010      	beq.n	10f62 <bt_buf_get_rx+0x2e>
   10f40:	2d03      	cmp	r5, #3
   10f42:	d01a      	beq.n	10f7a <bt_buf_get_rx+0x46>
   10f44:	2d05      	cmp	r5, #5
   10f46:	d018      	beq.n	10f7a <bt_buf_get_rx+0x46>
   10f48:	490e      	ldr	r1, [pc, #56]	; (10f84 <bt_buf_get_rx+0x50>)
   10f4a:	233d      	movs	r3, #61	; 0x3d
   10f4c:	4a0e      	ldr	r2, [pc, #56]	; (10f88 <bt_buf_get_rx+0x54>)
   10f4e:	480f      	ldr	r0, [pc, #60]	; (10f8c <bt_buf_get_rx+0x58>)
   10f50:	f013 fd29 	bl	249a6 <assert_print>
   10f54:	480e      	ldr	r0, [pc, #56]	; (10f90 <bt_buf_get_rx+0x5c>)
   10f56:	f013 fd26 	bl	249a6 <assert_print>
   10f5a:	213d      	movs	r1, #61	; 0x3d
   10f5c:	480a      	ldr	r0, [pc, #40]	; (10f88 <bt_buf_get_rx+0x54>)
   10f5e:	f013 fd1b 	bl	24998 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   10f62:	480c      	ldr	r0, [pc, #48]	; (10f94 <bt_buf_get_rx+0x60>)
   10f64:	f016 fceb 	bl	2793e <net_buf_alloc_fixed>
   10f68:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   10f6a:	b120      	cbz	r0, 10f76 <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   10f6c:	2101      	movs	r1, #1
   10f6e:	300c      	adds	r0, #12
   10f70:	f007 ff44 	bl	18dfc <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   10f74:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   10f76:	4620      	mov	r0, r4
   10f78:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   10f7a:	4602      	mov	r2, r0
   10f7c:	460b      	mov	r3, r1
   10f7e:	4806      	ldr	r0, [pc, #24]	; (10f98 <bt_buf_get_rx+0x64>)
   10f80:	e7f0      	b.n	10f64 <bt_buf_get_rx+0x30>
   10f82:	bf00      	nop
   10f84:	0002d225 	.word	0x0002d225
   10f88:	0002d1f6 	.word	0x0002d1f6
   10f8c:	0002b339 	.word	0x0002b339
   10f90:	0002d26a 	.word	0x0002d26a
   10f94:	20008c84 	.word	0x20008c84
   10f98:	20008be8 	.word	0x20008be8

00010f9c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   10f9c:	b510      	push	{r4, lr}
   10f9e:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   10fa0:	490a      	ldr	r1, [pc, #40]	; (10fcc <bt_buf_get_cmd_complete+0x30>)
{
   10fa2:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   10fa4:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   10fa8:	b920      	cbnz	r0, 10fb4 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   10faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   10fae:	2001      	movs	r0, #1
   10fb0:	f7ff bfc0 	b.w	10f34 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   10fb4:	f008 f878 	bl	190a8 <net_buf_ref>
   10fb8:	2101      	movs	r1, #1
		buf->len = 0U;
   10fba:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   10fbc:	4604      	mov	r4, r0
   10fbe:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   10fc0:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   10fc2:	300c      	adds	r0, #12
   10fc4:	f007 ff1a 	bl	18dfc <net_buf_simple_reserve>
}
   10fc8:	4620      	mov	r0, r4
   10fca:	bd10      	pop	{r4, pc}
   10fcc:	20008000 	.word	0x20008000

00010fd0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   10fd0:	b570      	push	{r4, r5, r6, lr}
   10fd2:	4604      	mov	r4, r0
	switch (evt) {
   10fd4:	2c0f      	cmp	r4, #15
{
   10fd6:	460d      	mov	r5, r1
   10fd8:	4610      	mov	r0, r2
   10fda:	4619      	mov	r1, r3
	switch (evt) {
   10fdc:	d805      	bhi.n	10fea <bt_buf_get_evt+0x1a>
   10fde:	2c0d      	cmp	r4, #13
   10fe0:	d90d      	bls.n	10ffe <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   10fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   10fe6:	f7ff bfd9 	b.w	10f9c <bt_buf_get_cmd_complete>
	switch (evt) {
   10fea:	2c13      	cmp	r4, #19
   10fec:	d107      	bne.n	10ffe <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   10fee:	480c      	ldr	r0, [pc, #48]	; (11020 <bt_buf_get_evt+0x50>)
   10ff0:	f016 fca5 	bl	2793e <net_buf_alloc_fixed>
			if (buf) {
   10ff4:	4604      	mov	r4, r0
   10ff6:	b938      	cbnz	r0, 11008 <bt_buf_get_evt+0x38>
{
   10ff8:	2400      	movs	r4, #0
}
   10ffa:	4620      	mov	r0, r4
   10ffc:	bd70      	pop	{r4, r5, r6, pc}
   10ffe:	4602      	mov	r2, r0
   11000:	460b      	mov	r3, r1
		if (discardable) {
   11002:	b145      	cbz	r5, 11016 <bt_buf_get_evt+0x46>
   11004:	4807      	ldr	r0, [pc, #28]	; (11024 <bt_buf_get_evt+0x54>)
   11006:	e7f3      	b.n	10ff0 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   11008:	2101      	movs	r1, #1
   1100a:	300c      	adds	r0, #12
   1100c:	f007 fef6 	bl	18dfc <net_buf_simple_reserve>
   11010:	2301      	movs	r3, #1
   11012:	7623      	strb	r3, [r4, #24]
}
   11014:	e7f1      	b.n	10ffa <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11016:	2001      	movs	r0, #1
}
   11018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1101c:	f7ff bf8a 	b.w	10f34 <bt_buf_get_rx>
   11020:	20008d20 	.word	0x20008d20
   11024:	20008c50 	.word	0x20008c50

00011028 <hci_disconn_complete_prio>:
{
   11028:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1102a:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1102c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   11030:	781b      	ldrb	r3, [r3, #0]
   11032:	b963      	cbnz	r3, 1104e <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   11034:	4620      	mov	r0, r4
   11036:	f002 ff09 	bl	13e4c <bt_conn_lookup_handle>
	if (!conn) {
   1103a:	4605      	mov	r5, r0
   1103c:	b940      	cbnz	r0, 11050 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1103e:	4b08      	ldr	r3, [pc, #32]	; (11060 <hci_disconn_complete_prio+0x38>)
   11040:	881a      	ldrh	r2, [r3, #0]
   11042:	b922      	cbnz	r2, 1104e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   11044:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   11048:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1104c:	8018      	strh	r0, [r3, #0]
}
   1104e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11050:	2101      	movs	r1, #1
   11052:	f002 ff03 	bl	13e5c <bt_conn_set_state>
	bt_conn_unref(conn);
   11056:	4628      	mov	r0, r5
}
   11058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1105c:	f002 bec6 	b.w	13dec <bt_conn_unref>
   11060:	200214ea 	.word	0x200214ea

00011064 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11064:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11066:	4c08      	ldr	r4, [pc, #32]	; (11088 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11068:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1106a:	2205      	movs	r2, #5
   1106c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11070:	f003 f9c8 	bl	14404 <bt_conn_lookup_state_le>
		if (!conn) {
   11074:	b938      	cbnz	r0, 11086 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11076:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1107a:	2204      	movs	r2, #4
}
   1107c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11080:	4902      	ldr	r1, [pc, #8]	; (1108c <find_pending_connect.part.0+0x28>)
   11082:	f003 b9bf 	b.w	14404 <bt_conn_lookup_state_le>
}
   11086:	bd10      	pop	{r4, pc}
   11088:	20008000 	.word	0x20008000
   1108c:	0002d1aa 	.word	0x0002d1aa

00011090 <hci_data_buf_overflow>:
{
   11090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11092:	68c3      	ldr	r3, [r0, #12]
   11094:	2202      	movs	r2, #2
   11096:	781b      	ldrb	r3, [r3, #0]
   11098:	4906      	ldr	r1, [pc, #24]	; (110b4 <hci_data_buf_overflow+0x24>)
   1109a:	9303      	str	r3, [sp, #12]
   1109c:	4b06      	ldr	r3, [pc, #24]	; (110b8 <hci_data_buf_overflow+0x28>)
   1109e:	9302      	str	r3, [sp, #8]
   110a0:	2300      	movs	r3, #0
   110a2:	4618      	mov	r0, r3
   110a4:	e9cd 3300 	strd	r3, r3, [sp]
   110a8:	f014 fdfb 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   110ac:	b005      	add	sp, #20
   110ae:	f85d fb04 	ldr.w	pc, [sp], #4
   110b2:	bf00      	nop
   110b4:	0002a398 	.word	0x0002a398
   110b8:	0002d28a 	.word	0x0002d28a

000110bc <rx_queue_put>:
{
   110bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   110be:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   110c0:	480b      	ldr	r0, [pc, #44]	; (110f0 <rx_queue_put+0x34>)
   110c2:	f007 fec1 	bl	18e48 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   110c6:	490b      	ldr	r1, [pc, #44]	; (110f4 <rx_queue_put+0x38>)
   110c8:	480b      	ldr	r0, [pc, #44]	; (110f8 <rx_queue_put+0x3c>)
   110ca:	f018 f881 	bl	291d0 <k_work_submit_to_queue>
	if (err < 0) {
   110ce:	2800      	cmp	r0, #0
   110d0:	da0a      	bge.n	110e8 <rx_queue_put+0x2c>
		LOG_ERR("Could not submit rx_work: %d", err);
   110d2:	4b0a      	ldr	r3, [pc, #40]	; (110fc <rx_queue_put+0x40>)
   110d4:	9003      	str	r0, [sp, #12]
   110d6:	9302      	str	r3, [sp, #8]
   110d8:	2300      	movs	r3, #0
   110da:	2201      	movs	r2, #1
   110dc:	4618      	mov	r0, r3
   110de:	e9cd 3300 	strd	r3, r3, [sp]
   110e2:	4907      	ldr	r1, [pc, #28]	; (11100 <rx_queue_put+0x44>)
   110e4:	f014 fddd 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   110e8:	b005      	add	sp, #20
   110ea:	f85d fb04 	ldr.w	pc, [sp], #4
   110ee:	bf00      	nop
   110f0:	2000813c 	.word	0x2000813c
   110f4:	200084a8 	.word	0x200084a8
   110f8:	20009618 	.word	0x20009618
   110fc:	0002d2b2 	.word	0x0002d2b2
   11100:	0002a398 	.word	0x0002a398

00011104 <hci_hardware_error>:
{
   11104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   11106:	2101      	movs	r1, #1
   11108:	300c      	adds	r0, #12
   1110a:	f008 f88d 	bl	19228 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1110e:	7803      	ldrb	r3, [r0, #0]
   11110:	2201      	movs	r2, #1
   11112:	9303      	str	r3, [sp, #12]
   11114:	4b05      	ldr	r3, [pc, #20]	; (1112c <hci_hardware_error+0x28>)
   11116:	4906      	ldr	r1, [pc, #24]	; (11130 <hci_hardware_error+0x2c>)
   11118:	9302      	str	r3, [sp, #8]
   1111a:	2300      	movs	r3, #0
   1111c:	4618      	mov	r0, r3
   1111e:	e9cd 3300 	strd	r3, r3, [sp]
   11122:	f014 fdbe 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   11126:	b005      	add	sp, #20
   11128:	f85d fb04 	ldr.w	pc, [sp], #4
   1112c:	0002d2cf 	.word	0x0002d2cf
   11130:	0002a398 	.word	0x0002a398

00011134 <le_data_len_change>:
{
   11134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11136:	68c3      	ldr	r3, [r0, #12]
   11138:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1113a:	4620      	mov	r0, r4
   1113c:	f002 fe86 	bl	13e4c <bt_conn_lookup_handle>
   11140:	4603      	mov	r3, r0
	if (!conn) {
   11142:	b950      	cbnz	r0, 1115a <le_data_len_change+0x26>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11144:	4a07      	ldr	r2, [pc, #28]	; (11164 <le_data_len_change+0x30>)
   11146:	4908      	ldr	r1, [pc, #32]	; (11168 <le_data_len_change+0x34>)
   11148:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1114c:	9403      	str	r4, [sp, #12]
   1114e:	2201      	movs	r2, #1
   11150:	9000      	str	r0, [sp, #0]
   11152:	f014 fda6 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   11156:	b004      	add	sp, #16
   11158:	bd10      	pop	{r4, pc}
   1115a:	b004      	add	sp, #16
   1115c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   11160:	f002 be44 	b.w	13dec <bt_conn_unref>
   11164:	0002d2f1 	.word	0x0002d2f1
   11168:	0002a398 	.word	0x0002a398

0001116c <le_phy_update_complete>:
{
   1116c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1116e:	68c3      	ldr	r3, [r0, #12]
   11170:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   11174:	4620      	mov	r0, r4
   11176:	f002 fe69 	bl	13e4c <bt_conn_lookup_handle>
   1117a:	4603      	mov	r3, r0
	if (!conn) {
   1117c:	b950      	cbnz	r0, 11194 <le_phy_update_complete+0x28>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1117e:	4a08      	ldr	r2, [pc, #32]	; (111a0 <le_phy_update_complete+0x34>)
   11180:	4908      	ldr	r1, [pc, #32]	; (111a4 <le_phy_update_complete+0x38>)
   11182:	e9cd 0201 	strd	r0, r2, [sp, #4]
   11186:	9403      	str	r4, [sp, #12]
   11188:	2201      	movs	r2, #1
   1118a:	9000      	str	r0, [sp, #0]
   1118c:	f014 fd89 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   11190:	b004      	add	sp, #16
   11192:	bd10      	pop	{r4, pc}
   11194:	b004      	add	sp, #16
   11196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1119a:	f002 be27 	b.w	13dec <bt_conn_unref>
   1119e:	bf00      	nop
   111a0:	0002d2f1 	.word	0x0002d2f1
   111a4:	0002a398 	.word	0x0002a398

000111a8 <hci_disconn_complete>:
{
   111a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   111aa:	68c5      	ldr	r5, [r0, #12]
{
   111ac:	b085      	sub	sp, #20
	if (evt->status) {
   111ae:	782e      	ldrb	r6, [r5, #0]
   111b0:	b986      	cbnz	r6, 111d4 <hci_disconn_complete+0x2c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   111b2:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   111b6:	4638      	mov	r0, r7
   111b8:	f002 fe48 	bl	13e4c <bt_conn_lookup_handle>
	if (!conn) {
   111bc:	4604      	mov	r4, r0
   111be:	b958      	cbnz	r0, 111d8 <hci_disconn_complete+0x30>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   111c0:	4b0b      	ldr	r3, [pc, #44]	; (111f0 <hci_disconn_complete+0x48>)
   111c2:	2201      	movs	r2, #1
   111c4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   111c8:	490a      	ldr	r1, [pc, #40]	; (111f4 <hci_disconn_complete+0x4c>)
   111ca:	4603      	mov	r3, r0
   111cc:	9703      	str	r7, [sp, #12]
   111ce:	9000      	str	r0, [sp, #0]
   111d0:	f014 fd67 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   111d4:	b005      	add	sp, #20
   111d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   111d8:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   111da:	4631      	mov	r1, r6
	conn->err = evt->reason;
   111dc:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   111de:	f002 fe3d 	bl	13e5c <bt_conn_set_state>
		bt_conn_unref(conn);
   111e2:	4620      	mov	r0, r4
}
   111e4:	b005      	add	sp, #20
   111e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   111ea:	f002 bdff 	b.w	13dec <bt_conn_unref>
   111ee:	bf00      	nop
   111f0:	0002d315 	.word	0x0002d315
   111f4:	0002a398 	.word	0x0002a398

000111f8 <handle_event>:
{
   111f8:	b530      	push	{r4, r5, lr}
   111fa:	4604      	mov	r4, r0
   111fc:	4608      	mov	r0, r1
   111fe:	b087      	sub	sp, #28
   11200:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   11204:	4293      	cmp	r3, r2
   11206:	d112      	bne.n	1122e <handle_event+0x36>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   11208:	8a05      	ldrh	r5, [r0, #16]
   1120a:	68c0      	ldr	r0, [r0, #12]
   1120c:	4629      	mov	r1, r5
   1120e:	f7ff fdd3 	bl	10db8 <bt_hex>
   11212:	4b16      	ldr	r3, [pc, #88]	; (1126c <handle_event+0x74>)
   11214:	e9cd 5004 	strd	r5, r0, [sp, #16]
   11218:	9302      	str	r3, [sp, #8]
   1121a:	2300      	movs	r3, #0
   1121c:	2202      	movs	r2, #2
   1121e:	4618      	mov	r0, r3
   11220:	e9cd 3300 	strd	r3, r3, [sp]
   11224:	4912      	ldr	r1, [pc, #72]	; (11270 <handle_event+0x78>)
   11226:	9403      	str	r4, [sp, #12]
   11228:	f014 fd3b 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   1122c:	e014      	b.n	11258 <handle_event+0x60>
		if (handler->event != event) {
   1122e:	4611      	mov	r1, r2
   11230:	f811 5b08 	ldrb.w	r5, [r1], #8
   11234:	42a5      	cmp	r5, r4
   11236:	d116      	bne.n	11266 <handle_event+0x6e>
		if (buf->len < handler->min_len) {
   11238:	8a03      	ldrh	r3, [r0, #16]
   1123a:	7851      	ldrb	r1, [r2, #1]
   1123c:	4299      	cmp	r1, r3
   1123e:	d90d      	bls.n	1125c <handle_event+0x64>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   11240:	e9cd 3403 	strd	r3, r4, [sp, #12]
   11244:	4b0b      	ldr	r3, [pc, #44]	; (11274 <handle_event+0x7c>)
   11246:	2201      	movs	r2, #1
   11248:	9302      	str	r3, [sp, #8]
   1124a:	2300      	movs	r3, #0
   1124c:	4908      	ldr	r1, [pc, #32]	; (11270 <handle_event+0x78>)
   1124e:	4618      	mov	r0, r3
   11250:	e9cd 3300 	strd	r3, r3, [sp]
   11254:	f014 fd25 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   11258:	b007      	add	sp, #28
   1125a:	bd30      	pop	{r4, r5, pc}
		handler->handler(buf);
   1125c:	6853      	ldr	r3, [r2, #4]
}
   1125e:	b007      	add	sp, #28
   11260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   11264:	4718      	bx	r3
   11266:	460a      	mov	r2, r1
   11268:	e7cc      	b.n	11204 <handle_event+0xc>
   1126a:	bf00      	nop
   1126c:	0002d35d 	.word	0x0002d35d
   11270:	0002a398 	.word	0x0002a398
   11274:	0002d33b 	.word	0x0002d33b

00011278 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   11278:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1127a:	4853      	ldr	r0, [pc, #332]	; (113c8 <rx_work_handler+0x150>)
{
   1127c:	b086      	sub	sp, #24
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1127e:	f007 fe4d 	bl	18f1c <net_buf_slist_get>
	if (!buf) {
   11282:	4604      	mov	r4, r0
   11284:	2800      	cmp	r0, #0
   11286:	d064      	beq.n	11352 <rx_work_handler+0xda>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11288:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1128a:	2b01      	cmp	r3, #1
   1128c:	d063      	beq.n	11356 <rx_work_handler+0xde>
   1128e:	2b03      	cmp	r3, #3
   11290:	f040 8090 	bne.w	113b4 <rx_work_handler+0x13c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11294:	8a03      	ldrh	r3, [r0, #16]
   11296:	2b03      	cmp	r3, #3
   11298:	d80c      	bhi.n	112b4 <rx_work_handler+0x3c>
   1129a:	f240 13ed 	movw	r3, #493	; 0x1ed
   1129e:	4a4b      	ldr	r2, [pc, #300]	; (113cc <rx_work_handler+0x154>)
   112a0:	494b      	ldr	r1, [pc, #300]	; (113d0 <rx_work_handler+0x158>)
   112a2:	484c      	ldr	r0, [pc, #304]	; (113d4 <rx_work_handler+0x15c>)
   112a4:	f013 fb7f 	bl	249a6 <assert_print>
   112a8:	4040      	eors	r0, r0
   112aa:	f380 8811 	msr	BASEPRI, r0
   112ae:	f04f 0003 	mov.w	r0, #3
   112b2:	df02      	svc	2
   112b4:	2104      	movs	r1, #4
   112b6:	f104 000c 	add.w	r0, r4, #12
   112ba:	f007 ffb5 	bl	19228 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   112be:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   112c0:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   112c2:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   112c4:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   112c6:	8a23      	ldrh	r3, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   112c8:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   112cc:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   112ce:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   112d0:	d00f      	beq.n	112f2 <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   112d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   112d6:	4b40      	ldr	r3, [pc, #256]	; (113d8 <rx_work_handler+0x160>)
   112d8:	2201      	movs	r2, #1
   112da:	9302      	str	r3, [sp, #8]
   112dc:	2300      	movs	r3, #0
   112de:	493f      	ldr	r1, [pc, #252]	; (113dc <rx_work_handler+0x164>)
   112e0:	4618      	mov	r0, r3
   112e2:	e9cd 3300 	strd	r3, r3, [sp]
   112e6:	f014 fcdc 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   112ea:	4620      	mov	r0, r4
   112ec:	f007 fe98 	bl	19020 <net_buf_unref>
		break;
   112f0:	e01a      	b.n	11328 <rx_work_handler+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   112f2:	f002 fdab 	bl	13e4c <bt_conn_lookup_handle>
	if (!conn) {
   112f6:	4605      	mov	r5, r0
   112f8:	b958      	cbnz	r0, 11312 <rx_work_handler+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   112fa:	8b63      	ldrh	r3, [r4, #26]
   112fc:	2201      	movs	r2, #1
   112fe:	9303      	str	r3, [sp, #12]
   11300:	4b37      	ldr	r3, [pc, #220]	; (113e0 <rx_work_handler+0x168>)
   11302:	4936      	ldr	r1, [pc, #216]	; (113dc <rx_work_handler+0x164>)
   11304:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11308:	4603      	mov	r3, r0
   1130a:	9000      	str	r0, [sp, #0]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1130c:	f014 fcc9 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
   11310:	e7eb      	b.n	112ea <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   11312:	f002 fe87 	bl	14024 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   11316:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   11318:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   1131a:	0b32      	lsrs	r2, r6, #12
   1131c:	4628      	mov	r0, r5
   1131e:	f002 fc09 	bl	13b34 <bt_conn_recv>
	bt_conn_unref(conn);
   11322:	4628      	mov	r0, r5
   11324:	f002 fd62 	bl	13dec <bt_conn_unref>
	return list->head;
   11328:	4b2e      	ldr	r3, [pc, #184]	; (113e4 <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1132a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1132e:	b183      	cbz	r3, 11352 <rx_work_handler+0xda>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   11330:	492d      	ldr	r1, [pc, #180]	; (113e8 <rx_work_handler+0x170>)
   11332:	482e      	ldr	r0, [pc, #184]	; (113ec <rx_work_handler+0x174>)
   11334:	f017 ff4c 	bl	291d0 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   11338:	2800      	cmp	r0, #0
   1133a:	da0a      	bge.n	11352 <rx_work_handler+0xda>
			LOG_ERR("Could not submit rx_work: %d", err);
   1133c:	4b2c      	ldr	r3, [pc, #176]	; (113f0 <rx_work_handler+0x178>)
   1133e:	9003      	str	r0, [sp, #12]
   11340:	9302      	str	r3, [sp, #8]
   11342:	2300      	movs	r3, #0
   11344:	2201      	movs	r2, #1
   11346:	4618      	mov	r0, r3
   11348:	e9cd 3300 	strd	r3, r3, [sp]
   1134c:	4923      	ldr	r1, [pc, #140]	; (113dc <rx_work_handler+0x164>)
   1134e:	f014 fca8 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   11352:	b006      	add	sp, #24
   11354:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11356:	8a03      	ldrh	r3, [r0, #16]
   11358:	2b01      	cmp	r3, #1
   1135a:	d80c      	bhi.n	11376 <rx_work_handler+0xfe>
   1135c:	f640 136d 	movw	r3, #2413	; 0x96d
   11360:	4a1a      	ldr	r2, [pc, #104]	; (113cc <rx_work_handler+0x154>)
   11362:	491b      	ldr	r1, [pc, #108]	; (113d0 <rx_work_handler+0x158>)
   11364:	481b      	ldr	r0, [pc, #108]	; (113d4 <rx_work_handler+0x15c>)
   11366:	f013 fb1e 	bl	249a6 <assert_print>
   1136a:	4040      	eors	r0, r0
   1136c:	f380 8811 	msr	BASEPRI, r0
   11370:	f04f 0003 	mov.w	r0, #3
   11374:	df02      	svc	2
   11376:	2102      	movs	r1, #2
   11378:	f104 000c 	add.w	r0, r4, #12
   1137c:	f007 ff54 	bl	19228 <net_buf_simple_pull_mem>
   11380:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   11382:	7800      	ldrb	r0, [r0, #0]
   11384:	f014 fc4b 	bl	25c1e <bt_hci_evt_get_flags>
   11388:	0783      	lsls	r3, r0, #30
   1138a:	d40c      	bmi.n	113a6 <rx_work_handler+0x12e>
   1138c:	f640 1371 	movw	r3, #2417	; 0x971
   11390:	4a0e      	ldr	r2, [pc, #56]	; (113cc <rx_work_handler+0x154>)
   11392:	4918      	ldr	r1, [pc, #96]	; (113f4 <rx_work_handler+0x17c>)
   11394:	480f      	ldr	r0, [pc, #60]	; (113d4 <rx_work_handler+0x15c>)
   11396:	f013 fb06 	bl	249a6 <assert_print>
   1139a:	4040      	eors	r0, r0
   1139c:	f380 8811 	msr	BASEPRI, r0
   113a0:	f04f 0003 	mov.w	r0, #3
   113a4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   113a6:	2306      	movs	r3, #6
   113a8:	4621      	mov	r1, r4
   113aa:	4a13      	ldr	r2, [pc, #76]	; (113f8 <rx_work_handler+0x180>)
   113ac:	7828      	ldrb	r0, [r5, #0]
   113ae:	f7ff ff23 	bl	111f8 <handle_event>
	net_buf_unref(buf);
   113b2:	e79a      	b.n	112ea <rx_work_handler+0x72>
	switch (bt_buf_get_type(buf)) {
   113b4:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   113b6:	4b11      	ldr	r3, [pc, #68]	; (113fc <rx_work_handler+0x184>)
   113b8:	2201      	movs	r2, #1
   113ba:	9302      	str	r3, [sp, #8]
   113bc:	2300      	movs	r3, #0
   113be:	4907      	ldr	r1, [pc, #28]	; (113dc <rx_work_handler+0x164>)
   113c0:	4618      	mov	r0, r3
   113c2:	e9cd 3300 	strd	r3, r3, [sp]
   113c6:	e7a1      	b.n	1130c <rx_work_handler+0x94>
   113c8:	2000813c 	.word	0x2000813c
   113cc:	0002d37f 	.word	0x0002d37f
   113d0:	0002d3b3 	.word	0x0002d3b3
   113d4:	0002b339 	.word	0x0002b339
   113d8:	0002d3cc 	.word	0x0002d3cc
   113dc:	0002a398 	.word	0x0002a398
   113e0:	0002d3f0 	.word	0x0002d3f0
   113e4:	20008000 	.word	0x20008000
   113e8:	200084a8 	.word	0x200084a8
   113ec:	20009618 	.word	0x20009618
   113f0:	0002d2b2 	.word	0x0002d2b2
   113f4:	0002d412 	.word	0x0002d412
   113f8:	0002ac2c 	.word	0x0002ac2c
   113fc:	0002d440 	.word	0x0002d440

00011400 <hci_le_meta_event>:
{
   11400:	b510      	push	{r4, lr}
   11402:	2101      	movs	r1, #1
   11404:	4604      	mov	r4, r0
   11406:	300c      	adds	r0, #12
   11408:	f007 ff0e 	bl	19228 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1140c:	4621      	mov	r1, r4
}
   1140e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11412:	230a      	movs	r3, #10
   11414:	4a01      	ldr	r2, [pc, #4]	; (1141c <hci_le_meta_event+0x1c>)
   11416:	7800      	ldrb	r0, [r0, #0]
   11418:	f7ff beee 	b.w	111f8 <handle_event>
   1141c:	0002ac5c 	.word	0x0002ac5c

00011420 <le_remote_feat_complete>:
{
   11420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   11422:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11424:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   11428:	4630      	mov	r0, r6
   1142a:	f002 fd0f 	bl	13e4c <bt_conn_lookup_handle>
	if (!conn) {
   1142e:	4604      	mov	r4, r0
   11430:	b958      	cbnz	r0, 1144a <le_remote_feat_complete+0x2a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11432:	4b10      	ldr	r3, [pc, #64]	; (11474 <le_remote_feat_complete+0x54>)
   11434:	2201      	movs	r2, #1
   11436:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1143a:	490f      	ldr	r1, [pc, #60]	; (11478 <le_remote_feat_complete+0x58>)
   1143c:	4603      	mov	r3, r0
   1143e:	9603      	str	r6, [sp, #12]
   11440:	9000      	str	r0, [sp, #0]
   11442:	f014 fc2e 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   11446:	b004      	add	sp, #16
   11448:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   1144a:	782b      	ldrb	r3, [r5, #0]
   1144c:	b93b      	cbnz	r3, 1145e <le_remote_feat_complete+0x3e>
   1144e:	f8d5 3003 	ldr.w	r3, [r5, #3]
   11452:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   11456:	f8d5 3007 	ldr.w	r3, [r5, #7]
   1145a:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1145e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   11462:	1d20      	adds	r0, r4, #4
   11464:	f014 fc06 	bl	25c74 <atomic_or>
	bt_conn_unref(conn);
   11468:	4620      	mov	r0, r4
}
   1146a:	b004      	add	sp, #16
   1146c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   11470:	f002 bcbc 	b.w	13dec <bt_conn_unref>
   11474:	0002d2f1 	.word	0x0002d2f1
   11478:	0002a398 	.word	0x0002a398

0001147c <hci_cmd_done>:
{
   1147c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11480:	4606      	mov	r6, r0
   11482:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   11484:	7a90      	ldrb	r0, [r2, #10]
{
   11486:	460f      	mov	r7, r1
   11488:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1148a:	f007 fb8f 	bl	18bac <net_buf_pool_get>
   1148e:	4d3d      	ldr	r5, [pc, #244]	; (11584 <hci_cmd_done+0x108>)
   11490:	4285      	cmp	r5, r0
   11492:	d014      	beq.n	114be <hci_cmd_done+0x42>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   11494:	7aa4      	ldrb	r4, [r4, #10]
   11496:	4620      	mov	r0, r4
   11498:	f007 fb88 	bl	18bac <net_buf_pool_get>
   1149c:	4b3a      	ldr	r3, [pc, #232]	; (11588 <hci_cmd_done+0x10c>)
   1149e:	e9cd 0505 	strd	r0, r5, [sp, #20]
   114a2:	9302      	str	r3, [sp, #8]
   114a4:	2300      	movs	r3, #0
   114a6:	2202      	movs	r2, #2
   114a8:	4618      	mov	r0, r3
   114aa:	e9cd 6403 	strd	r6, r4, [sp, #12]
   114ae:	e9cd 3300 	strd	r3, r3, [sp]
   114b2:	4936      	ldr	r1, [pc, #216]	; (1158c <hci_cmd_done+0x110>)
   114b4:	f014 fbf5 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   114b8:	b008      	add	sp, #32
   114ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   114be:	4620      	mov	r0, r4
   114c0:	f007 fb7c 	bl	18bbc <net_buf_id>
   114c4:	f04f 080c 	mov.w	r8, #12
   114c8:	4d31      	ldr	r5, [pc, #196]	; (11590 <hci_cmd_done+0x114>)
   114ca:	fb08 5000 	mla	r0, r8, r0, r5
   114ce:	8843      	ldrh	r3, [r0, #2]
   114d0:	42b3      	cmp	r3, r6
   114d2:	d012      	beq.n	114fa <hci_cmd_done+0x7e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   114d4:	4620      	mov	r0, r4
   114d6:	f007 fb71 	bl	18bbc <net_buf_id>
   114da:	fb08 5000 	mla	r0, r8, r0, r5
   114de:	8843      	ldrh	r3, [r0, #2]
   114e0:	2202      	movs	r2, #2
   114e2:	e9cd 6303 	strd	r6, r3, [sp, #12]
   114e6:	4b2b      	ldr	r3, [pc, #172]	; (11594 <hci_cmd_done+0x118>)
   114e8:	4928      	ldr	r1, [pc, #160]	; (1158c <hci_cmd_done+0x110>)
   114ea:	9302      	str	r3, [sp, #8]
   114ec:	2300      	movs	r3, #0
   114ee:	4618      	mov	r0, r3
   114f0:	e9cd 3300 	strd	r3, r3, [sp]
   114f4:	f014 fbd5 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		return;
   114f8:	e7de      	b.n	114b8 <hci_cmd_done+0x3c>
	if (bt_dev.sent_cmd) {
   114fa:	4e27      	ldr	r6, [pc, #156]	; (11598 <hci_cmd_done+0x11c>)
   114fc:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   11500:	b120      	cbz	r0, 1150c <hci_cmd_done+0x90>
		net_buf_unref(bt_dev.sent_cmd);
   11502:	f007 fd8d 	bl	19020 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   11506:	2300      	movs	r3, #0
   11508:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   1150c:	4620      	mov	r0, r4
   1150e:	f007 fb55 	bl	18bbc <net_buf_id>
   11512:	260c      	movs	r6, #12
   11514:	fb06 5000 	mla	r0, r6, r0, r5
   11518:	6843      	ldr	r3, [r0, #4]
   1151a:	b19b      	cbz	r3, 11544 <hci_cmd_done+0xc8>
   1151c:	b997      	cbnz	r7, 11544 <hci_cmd_done+0xc8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1151e:	4620      	mov	r0, r4
   11520:	f007 fb4c 	bl	18bbc <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11524:	2101      	movs	r1, #1
   11526:	fb06 5000 	mla	r0, r6, r0, r5
   1152a:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1152c:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   11530:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   11532:	f003 061f 	and.w	r6, r3, #31
   11536:	40b1      	lsls	r1, r6
	if (val) {
   11538:	095b      	lsrs	r3, r3, #5
   1153a:	b1e2      	cbz	r2, 11576 <hci_cmd_done+0xfa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1153c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11540:	f014 fb98 	bl	25c74 <atomic_or>
	if (cmd(buf)->sync) {
   11544:	4620      	mov	r0, r4
   11546:	f007 fb39 	bl	18bbc <net_buf_id>
   1154a:	260c      	movs	r6, #12
   1154c:	fb06 5000 	mla	r0, r6, r0, r5
   11550:	6883      	ldr	r3, [r0, #8]
   11552:	2b00      	cmp	r3, #0
   11554:	d0b0      	beq.n	114b8 <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
   11556:	4620      	mov	r0, r4
   11558:	f007 fb30 	bl	18bbc <net_buf_id>
   1155c:	4370      	muls	r0, r6
   1155e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   11560:	4620      	mov	r0, r4
   11562:	f007 fb2b 	bl	18bbc <net_buf_id>
   11566:	fb06 5500 	mla	r5, r6, r0, r5
   1156a:	68a8      	ldr	r0, [r5, #8]
}
   1156c:	b008      	add	sp, #32
   1156e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   11572:	f00e bab3 	b.w	1fadc <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11576:	43c9      	mvns	r1, r1
   11578:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1157c:	f014 fba0 	bl	25cc0 <atomic_and.isra.0>
   11580:	e7e0      	b.n	11544 <hci_cmd_done+0xc8>
   11582:	bf00      	nop
   11584:	20008cec 	.word	0x20008cec
   11588:	0002d454 	.word	0x0002d454
   1158c:	0002a398 	.word	0x0002a398
   11590:	20020f34 	.word	0x20020f34
   11594:	0002d489 	.word	0x0002d489
   11598:	20008000 	.word	0x20008000

0001159c <hci_cmd_status>:
{
   1159c:	b538      	push	{r3, r4, r5, lr}
   1159e:	2104      	movs	r1, #4
   115a0:	4604      	mov	r4, r0
   115a2:	300c      	adds	r0, #12
   115a4:	f007 fe40 	bl	19228 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   115a8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   115aa:	7801      	ldrb	r1, [r0, #0]
   115ac:	4622      	mov	r2, r4
   115ae:	8840      	ldrh	r0, [r0, #2]
   115b0:	f7ff ff64 	bl	1147c <hci_cmd_done>
	if (ncmd) {
   115b4:	b125      	cbz	r5, 115c0 <hci_cmd_status+0x24>
}
   115b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   115ba:	4802      	ldr	r0, [pc, #8]	; (115c4 <hci_cmd_status+0x28>)
   115bc:	f00e ba8e 	b.w	1fadc <z_impl_k_sem_give>
   115c0:	bd38      	pop	{r3, r4, r5, pc}
   115c2:	bf00      	nop
   115c4:	20008120 	.word	0x20008120

000115c8 <hci_cmd_complete>:
{
   115c8:	b538      	push	{r3, r4, r5, lr}
   115ca:	2103      	movs	r1, #3
   115cc:	4604      	mov	r4, r0
   115ce:	300c      	adds	r0, #12
   115d0:	f007 fe2a 	bl	19228 <net_buf_simple_pull_mem>
	status = buf->data[0];
   115d4:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   115d6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   115d8:	4622      	mov	r2, r4
   115da:	7819      	ldrb	r1, [r3, #0]
   115dc:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   115e0:	f7ff ff4c 	bl	1147c <hci_cmd_done>
	if (ncmd) {
   115e4:	b125      	cbz	r5, 115f0 <hci_cmd_complete+0x28>
}
   115e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   115ea:	4802      	ldr	r0, [pc, #8]	; (115f4 <hci_cmd_complete+0x2c>)
   115ec:	f00e ba76 	b.w	1fadc <z_impl_k_sem_give>
   115f0:	bd38      	pop	{r3, r4, r5, pc}
   115f2:	bf00      	nop
   115f4:	20008120 	.word	0x20008120

000115f8 <hci_num_completed_packets>:
{
   115f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   115fc:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   115fe:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   11600:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   11602:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 116ec <hci_num_completed_packets+0xf4>
	for (i = 0; i < evt->num_handles; i++) {
   11606:	783b      	ldrb	r3, [r7, #0]
   11608:	429d      	cmp	r5, r3
   1160a:	db02      	blt.n	11612 <hci_num_completed_packets+0x1a>
}
   1160c:	b004      	add	sp, #16
   1160e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   11612:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   11616:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1161a:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1161e:	4650      	mov	r0, sl
   11620:	f002 fc14 	bl	13e4c <bt_conn_lookup_handle>
		if (!conn) {
   11624:	4604      	mov	r4, r0
   11626:	b1d8      	cbz	r0, 11660 <hci_num_completed_packets+0x68>
			k_work_submit(&conn->tx_complete_work);
   11628:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   1162c:	2e00      	cmp	r6, #0
   1162e:	d032      	beq.n	11696 <hci_num_completed_packets+0x9e>
	__asm__ volatile(
   11630:	f04f 0320 	mov.w	r3, #32
   11634:	f3ef 8211 	mrs	r2, BASEPRI
   11638:	f383 8812 	msr	BASEPRI_MAX, r3
   1163c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   11640:	69e3      	ldr	r3, [r4, #28]
   11642:	b1d3      	cbz	r3, 1167a <hci_num_completed_packets+0x82>
				conn->pending_no_cb--;
   11644:	3b01      	subs	r3, #1
   11646:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   11648:	f382 8811 	msr	BASEPRI, r2
   1164c:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   11650:	4620      	mov	r0, r4
   11652:	f002 f9f3 	bl	13a3c <bt_conn_get_pkts>
   11656:	3e01      	subs	r6, #1
   11658:	f00e fa40 	bl	1fadc <z_impl_k_sem_give>
   1165c:	b2b6      	uxth	r6, r6
   1165e:	e7e5      	b.n	1162c <hci_num_completed_packets+0x34>
			LOG_ERR("No connection for handle %u", handle);
   11660:	4b23      	ldr	r3, [pc, #140]	; (116f0 <hci_num_completed_packets+0xf8>)
   11662:	2201      	movs	r2, #1
   11664:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11668:	4922      	ldr	r1, [pc, #136]	; (116f4 <hci_num_completed_packets+0xfc>)
   1166a:	4603      	mov	r3, r0
   1166c:	f8cd a00c 	str.w	sl, [sp, #12]
   11670:	9000      	str	r0, [sp, #0]
   11672:	f014 fb16 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   11676:	3501      	adds	r5, #1
   11678:	e7c5      	b.n	11606 <hci_num_completed_packets+0xe>
   1167a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1167c:	b97b      	cbnz	r3, 1169e <hci_num_completed_packets+0xa6>
   1167e:	f382 8811 	msr	BASEPRI, r2
   11682:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   11686:	2201      	movs	r2, #1
   11688:	4618      	mov	r0, r3
   1168a:	e9cd 3901 	strd	r3, r9, [sp, #4]
   1168e:	4919      	ldr	r1, [pc, #100]	; (116f4 <hci_num_completed_packets+0xfc>)
   11690:	9300      	str	r3, [sp, #0]
   11692:	f014 fb06 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   11696:	4620      	mov	r0, r4
   11698:	f002 fba8 	bl	13dec <bt_conn_unref>
   1169c:	e7eb      	b.n	11676 <hci_num_completed_packets+0x7e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1169e:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   116a0:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   116a2:	4283      	cmp	r3, r0
	list->head = node;
   116a4:	6161      	str	r1, [r4, #20]
	list->tail = node;
   116a6:	bf08      	it	eq
   116a8:	61a1      	streq	r1, [r4, #24]
   116aa:	f382 8811 	msr	BASEPRI, r2
   116ae:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   116b2:	f04f 0220 	mov.w	r2, #32
   116b6:	f3ef 8111 	mrs	r1, BASEPRI
   116ba:	f382 8812 	msr	BASEPRI_MAX, r2
   116be:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   116c2:	68da      	ldr	r2, [r3, #12]
   116c4:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   116c6:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   116ca:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   116ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   116d0:	b94a      	cbnz	r2, 116e6 <hci_num_completed_packets+0xee>
	list->head = node;
   116d2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   116d6:	f381 8811 	msr	BASEPRI, r1
   116da:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   116de:	4650      	mov	r0, sl
   116e0:	f00e fd6a 	bl	201b8 <k_work_submit>
   116e4:	e7b4      	b.n	11650 <hci_num_completed_packets+0x58>
	parent->next = child;
   116e6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   116e8:	6263      	str	r3, [r4, #36]	; 0x24
}
   116ea:	e7f4      	b.n	116d6 <hci_num_completed_packets+0xde>
   116ec:	0002d4d8 	.word	0x0002d4d8
   116f0:	0002d4bc 	.word	0x0002d4bc
   116f4:	0002a398 	.word	0x0002a398

000116f8 <le_conn_update_complete>:
{
   116f8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   116fa:	68c5      	ldr	r5, [r0, #12]
{
   116fc:	b086      	sub	sp, #24
	handle = sys_le16_to_cpu(evt->handle);
   116fe:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   11702:	4630      	mov	r0, r6
   11704:	f002 fba2 	bl	13e4c <bt_conn_lookup_handle>
	if (!conn) {
   11708:	4604      	mov	r4, r0
   1170a:	b958      	cbnz	r0, 11724 <le_conn_update_complete+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1170c:	4b2b      	ldr	r3, [pc, #172]	; (117bc <le_conn_update_complete+0xc4>)
   1170e:	2201      	movs	r2, #1
   11710:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11714:	492a      	ldr	r1, [pc, #168]	; (117c0 <le_conn_update_complete+0xc8>)
   11716:	4603      	mov	r3, r0
   11718:	9603      	str	r6, [sp, #12]
   1171a:	9000      	str	r0, [sp, #0]
   1171c:	f014 fac1 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   11720:	b006      	add	sp, #24
   11722:	bd70      	pop	{r4, r5, r6, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   11724:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   11726:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   11728:	2b1a      	cmp	r3, #26
   1172a:	d119      	bne.n	11760 <le_conn_update_complete+0x68>
   1172c:	78c3      	ldrb	r3, [r0, #3]
   1172e:	2b01      	cmp	r3, #1
   11730:	d12a      	bne.n	11788 <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   11732:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11736:	4630      	mov	r0, r6
   11738:	f014 fa9c 	bl	25c74 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1173c:	0542      	lsls	r2, r0, #21
   1173e:	d40f      	bmi.n	11760 <le_conn_update_complete+0x68>
		param.interval_min = conn->le.interval_min;
   11740:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   11744:	4620      	mov	r0, r4
		param.interval_min = conn->le.interval_min;
   11746:	9304      	str	r3, [sp, #16]
		param.latency = conn->le.pending_latency;
   11748:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   1174c:	a904      	add	r1, sp, #16
		param.latency = conn->le.pending_latency;
   1174e:	9305      	str	r3, [sp, #20]
		bt_l2cap_update_conn_param(conn, &param);
   11750:	f003 f98a 	bl	14a68 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   11754:	4620      	mov	r0, r4
}
   11756:	b006      	add	sp, #24
   11758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1175c:	f002 bb46 	b.w	13dec <bt_conn_unref>
		if (!evt->status) {
   11760:	782b      	ldrb	r3, [r5, #0]
   11762:	b98b      	cbnz	r3, 11788 <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   11764:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   11768:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   1176c:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   11770:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   11774:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   11778:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1177c:	f46f 7180 	mvn.w	r1, #256	; 0x100
   11780:	4630      	mov	r0, r6
   11782:	f014 fa9d 	bl	25cc0 <atomic_and.isra.0>
}
   11786:	e014      	b.n	117b2 <le_conn_update_complete+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11788:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   1178c:	05db      	lsls	r3, r3, #23
   1178e:	d5f5      	bpl.n	1177c <le_conn_update_complete+0x84>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   11790:	782b      	ldrb	r3, [r5, #0]
   11792:	2b20      	cmp	r3, #32
   11794:	d1f2      	bne.n	1177c <le_conn_update_complete+0x84>
			   conn->le.conn_param_retry_countdown) {
   11796:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   1179a:	2b00      	cmp	r3, #0
   1179c:	d0ee      	beq.n	1177c <le_conn_update_complete+0x84>
			conn->le.conn_param_retry_countdown--;
   1179e:	3b01      	subs	r3, #1
   117a0:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   117a4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   117a8:	2300      	movs	r3, #0
   117aa:	f104 0060 	add.w	r0, r4, #96	; 0x60
   117ae:	f00e febb 	bl	20528 <k_work_schedule>
		notify_le_param_updated(conn);
   117b2:	4620      	mov	r0, r4
   117b4:	f002 fc9a 	bl	140ec <notify_le_param_updated>
   117b8:	e7cc      	b.n	11754 <le_conn_update_complete+0x5c>
   117ba:	bf00      	nop
   117bc:	0002d2f1 	.word	0x0002d2f1
   117c0:	0002a398 	.word	0x0002a398

000117c4 <bt_hci_cmd_state_set_init>:
{
   117c4:	b510      	push	{r4, lr}
	state->bit = bit;
   117c6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   117ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   117ce:	460c      	mov	r4, r1
	state->val = val;
   117d0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   117d2:	f007 f9f3 	bl	18bbc <net_buf_id>
   117d6:	220c      	movs	r2, #12
   117d8:	4b02      	ldr	r3, [pc, #8]	; (117e4 <bt_hci_cmd_state_set_init+0x20>)
   117da:	fb02 3300 	mla	r3, r2, r0, r3
   117de:	605c      	str	r4, [r3, #4]
}
   117e0:	bd10      	pop	{r4, pc}
   117e2:	bf00      	nop
   117e4:	20020f34 	.word	0x20020f34

000117e8 <bt_hci_cmd_create>:
{
   117e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   117ec:	f04f 32ff 	mov.w	r2, #4294967295
   117f0:	4606      	mov	r6, r0
   117f2:	f04f 33ff 	mov.w	r3, #4294967295
   117f6:	481e      	ldr	r0, [pc, #120]	; (11870 <bt_hci_cmd_create+0x88>)
   117f8:	460f      	mov	r7, r1
   117fa:	f016 f8a0 	bl	2793e <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   117fe:	4604      	mov	r4, r0
   11800:	b958      	cbnz	r0, 1181a <bt_hci_cmd_create+0x32>
   11802:	491c      	ldr	r1, [pc, #112]	; (11874 <bt_hci_cmd_create+0x8c>)
   11804:	481c      	ldr	r0, [pc, #112]	; (11878 <bt_hci_cmd_create+0x90>)
   11806:	f240 1301 	movw	r3, #257	; 0x101
   1180a:	4a1c      	ldr	r2, [pc, #112]	; (1187c <bt_hci_cmd_create+0x94>)
   1180c:	f013 f8cb 	bl	249a6 <assert_print>
   11810:	f240 1101 	movw	r1, #257	; 0x101
   11814:	4819      	ldr	r0, [pc, #100]	; (1187c <bt_hci_cmd_create+0x94>)
   11816:	f013 f8bf 	bl	24998 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1181a:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   1181e:	f100 0a0c 	add.w	sl, r0, #12
   11822:	2101      	movs	r1, #1
   11824:	4650      	mov	r0, sl
   11826:	f007 fae9 	bl	18dfc <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   1182a:	4620      	mov	r0, r4
   1182c:	f884 8018 	strb.w	r8, [r4, #24]
   11830:	f007 f9c4 	bl	18bbc <net_buf_id>
   11834:	f04f 090c 	mov.w	r9, #12
   11838:	4d11      	ldr	r5, [pc, #68]	; (11880 <bt_hci_cmd_create+0x98>)
   1183a:	fb09 5000 	mla	r0, r9, r0, r5
   1183e:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   11840:	4620      	mov	r0, r4
   11842:	f007 f9bb 	bl	18bbc <net_buf_id>
   11846:	fb09 5000 	mla	r0, r9, r0, r5
   1184a:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1184e:	4620      	mov	r0, r4
   11850:	f007 f9b4 	bl	18bbc <net_buf_id>
   11854:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   11858:	2103      	movs	r1, #3
   1185a:	4650      	mov	r0, sl
   1185c:	f8c5 8004 	str.w	r8, [r5, #4]
   11860:	f007 fd00 	bl	19264 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   11864:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   11866:	7087      	strb	r7, [r0, #2]
}
   11868:	4620      	mov	r0, r4
   1186a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1186e:	bf00      	nop
   11870:	20008cec 	.word	0x20008cec
   11874:	0002eeb9 	.word	0x0002eeb9
   11878:	0002b339 	.word	0x0002b339
   1187c:	0002d37f 	.word	0x0002d37f
   11880:	20020f34 	.word	0x20020f34

00011884 <bt_hci_cmd_send_sync>:
{
   11884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11888:	4607      	mov	r7, r0
   1188a:	4615      	mov	r5, r2
	if (!buf) {
   1188c:	460c      	mov	r4, r1
{
   1188e:	b08c      	sub	sp, #48	; 0x30
	if (!buf) {
   11890:	b921      	cbnz	r1, 1189c <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   11892:	f7ff ffa9 	bl	117e8 <bt_hci_cmd_create>
		if (!buf) {
   11896:	4604      	mov	r4, r0
   11898:	2800      	cmp	r0, #0
   1189a:	d056      	beq.n	1194a <bt_hci_cmd_send_sync+0xc6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1189c:	ae06      	add	r6, sp, #24
   1189e:	2201      	movs	r2, #1
   118a0:	2100      	movs	r1, #0
   118a2:	4630      	mov	r0, r6
   118a4:	f017 fc31 	bl	2910a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   118a8:	4620      	mov	r0, r4
   118aa:	f007 f987 	bl	18bbc <net_buf_id>
   118ae:	230c      	movs	r3, #12
   118b0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 11950 <bt_hci_cmd_send_sync+0xcc>
   118b4:	fb03 8000 	mla	r0, r3, r0, r8
   118b8:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   118ba:	4620      	mov	r0, r4
   118bc:	f007 fbf4 	bl	190a8 <net_buf_ref>
   118c0:	4601      	mov	r1, r0
   118c2:	4824      	ldr	r0, [pc, #144]	; (11954 <bt_hci_cmd_send_sync+0xd0>)
   118c4:	f007 fb86 	bl	18fd4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   118c8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   118cc:	4630      	mov	r0, r6
   118ce:	2300      	movs	r3, #0
   118d0:	f00e f948 	bl	1fb64 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   118d4:	4606      	mov	r6, r0
   118d6:	b180      	cbz	r0, 118fa <bt_hci_cmd_send_sync+0x76>
   118d8:	f240 1349 	movw	r3, #329	; 0x149
   118dc:	4a1e      	ldr	r2, [pc, #120]	; (11958 <bt_hci_cmd_send_sync+0xd4>)
   118de:	491f      	ldr	r1, [pc, #124]	; (1195c <bt_hci_cmd_send_sync+0xd8>)
   118e0:	481f      	ldr	r0, [pc, #124]	; (11960 <bt_hci_cmd_send_sync+0xdc>)
   118e2:	f013 f860 	bl	249a6 <assert_print>
   118e6:	4631      	mov	r1, r6
   118e8:	481e      	ldr	r0, [pc, #120]	; (11964 <bt_hci_cmd_send_sync+0xe0>)
   118ea:	f013 f85c 	bl	249a6 <assert_print>
   118ee:	4040      	eors	r0, r0
   118f0:	f380 8811 	msr	BASEPRI, r0
   118f4:	f04f 0003 	mov.w	r0, #3
   118f8:	df02      	svc	2
	status = cmd(buf)->status;
   118fa:	4620      	mov	r0, r4
   118fc:	f007 f95e 	bl	18bbc <net_buf_id>
   11900:	230c      	movs	r3, #12
   11902:	4358      	muls	r0, r3
   11904:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   11908:	b1be      	cbz	r6, 1193a <bt_hci_cmd_send_sync+0xb6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   1190a:	4b17      	ldr	r3, [pc, #92]	; (11968 <bt_hci_cmd_send_sync+0xe4>)
   1190c:	2202      	movs	r2, #2
   1190e:	9302      	str	r3, [sp, #8]
   11910:	2300      	movs	r3, #0
   11912:	4916      	ldr	r1, [pc, #88]	; (1196c <bt_hci_cmd_send_sync+0xe8>)
   11914:	4618      	mov	r0, r3
   11916:	e9cd 3300 	strd	r3, r3, [sp]
   1191a:	e9cd 7603 	strd	r7, r6, [sp, #12]
   1191e:	f014 f9c0 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   11922:	4620      	mov	r0, r4
   11924:	f007 fb7c 	bl	19020 <net_buf_unref>
			return -ECONNREFUSED;
   11928:	2e09      	cmp	r6, #9
   1192a:	bf14      	ite	ne
   1192c:	f06f 0004 	mvnne.w	r0, #4
   11930:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   11934:	b00c      	add	sp, #48	; 0x30
   11936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   1193a:	b115      	cbz	r5, 11942 <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   1193c:	602c      	str	r4, [r5, #0]
	return 0;
   1193e:	2000      	movs	r0, #0
   11940:	e7f8      	b.n	11934 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   11942:	4620      	mov	r0, r4
   11944:	f007 fb6c 	bl	19020 <net_buf_unref>
   11948:	e7f9      	b.n	1193e <bt_hci_cmd_send_sync+0xba>
			return -ENOBUFS;
   1194a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1194e:	e7f1      	b.n	11934 <bt_hci_cmd_send_sync+0xb0>
   11950:	20020f34 	.word	0x20020f34
   11954:	20008144 	.word	0x20008144
   11958:	0002d37f 	.word	0x0002d37f
   1195c:	0002c1e7 	.word	0x0002c1e7
   11960:	0002b339 	.word	0x0002b339
   11964:	0002d4ef 	.word	0x0002d4ef
   11968:	0002d50f 	.word	0x0002d50f
   1196c:	0002a398 	.word	0x0002a398

00011970 <hci_le_read_max_data_len>:
{
   11970:	b570      	push	{r4, r5, r6, lr}
   11972:	b086      	sub	sp, #24
   11974:	4606      	mov	r6, r0
   11976:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   11978:	f242 002f 	movw	r0, #8239	; 0x202f
   1197c:	2100      	movs	r1, #0
   1197e:	aa05      	add	r2, sp, #20
   11980:	f7ff ff80 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
   11984:	4604      	mov	r4, r0
   11986:	b160      	cbz	r0, 119a2 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   11988:	4b0b      	ldr	r3, [pc, #44]	; (119b8 <hci_le_read_max_data_len+0x48>)
   1198a:	2201      	movs	r2, #1
   1198c:	9302      	str	r3, [sp, #8]
   1198e:	2300      	movs	r3, #0
   11990:	490a      	ldr	r1, [pc, #40]	; (119bc <hci_le_read_max_data_len+0x4c>)
   11992:	4618      	mov	r0, r3
   11994:	e9cd 3300 	strd	r3, r3, [sp]
   11998:	f014 f983 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   1199c:	4620      	mov	r0, r4
   1199e:	b006      	add	sp, #24
   119a0:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   119a2:	9805      	ldr	r0, [sp, #20]
   119a4:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   119a6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   119aa:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   119ac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   119b0:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   119b2:	f007 fb35 	bl	19020 <net_buf_unref>
	return 0;
   119b6:	e7f1      	b.n	1199c <hci_le_read_max_data_len+0x2c>
   119b8:	0002d52b 	.word	0x0002d52b
   119bc:	0002a398 	.word	0x0002a398

000119c0 <bt_hci_le_rand>:
{
   119c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   119c2:	4b14      	ldr	r3, [pc, #80]	; (11a14 <bt_hci_le_rand+0x54>)
{
   119c4:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   119c6:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   119ca:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   119cc:	2b00      	cmp	r3, #0
   119ce:	da1d      	bge.n	11a0c <bt_hci_le_rand+0x4c>
	while (len > 0) {
   119d0:	b914      	cbnz	r4, 119d8 <bt_hci_le_rand+0x18>
	return 0;
   119d2:	4620      	mov	r0, r4
}
   119d4:	b003      	add	sp, #12
   119d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   119d8:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   119da:	f04f 0100 	mov.w	r1, #0
   119de:	f242 0018 	movw	r0, #8216	; 0x2018
   119e2:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   119e4:	4626      	mov	r6, r4
   119e6:	bf28      	it	cs
   119e8:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   119ea:	f7ff ff4b 	bl	11884 <bt_hci_cmd_send_sync>
		if (err) {
   119ee:	2800      	cmp	r0, #0
   119f0:	d1f0      	bne.n	119d4 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   119f2:	9f01      	ldr	r7, [sp, #4]
   119f4:	4632      	mov	r2, r6
   119f6:	68f9      	ldr	r1, [r7, #12]
   119f8:	4628      	mov	r0, r5
   119fa:	3101      	adds	r1, #1
   119fc:	f017 fd39 	bl	29472 <memcpy>
		net_buf_unref(rsp);
   11a00:	4638      	mov	r0, r7
   11a02:	f007 fb0d 	bl	19020 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   11a06:	4435      	add	r5, r6
		len -= count;
   11a08:	1ba4      	subs	r4, r4, r6
   11a0a:	e7e1      	b.n	119d0 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   11a0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11a10:	e7e0      	b.n	119d4 <bt_hci_le_rand+0x14>
   11a12:	bf00      	nop
   11a14:	20008000 	.word	0x20008000

00011a18 <bt_hci_le_enh_conn_complete>:
{
   11a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11a1c:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   11a20:	2700      	movs	r7, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   11a22:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   11a26:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   11a2a:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   11a2c:	4a9f      	ldr	r2, [pc, #636]	; (11cac <bt_hci_le_enh_conn_complete+0x294>)
   11a2e:	b29b      	uxth	r3, r3
   11a30:	8811      	ldrh	r1, [r2, #0]
{
   11a32:	b08a      	sub	sp, #40	; 0x28
		if (disconnected_handles[i] == handle) {
   11a34:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   11a36:	bf04      	itt	eq
   11a38:	8017      	strheq	r7, [r2, #0]
			return true;
   11a3a:	2701      	moveq	r7, #1
	bt_id_pending_keys_update();
   11a3c:	f000 fe96 	bl	1276c <bt_id_pending_keys_update>
	if (evt->status) {
   11a40:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11a42:	fa1f f988 	uxth.w	r9, r8
	if (evt->status) {
   11a46:	b37e      	cbz	r6, 11aa8 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11a48:	2e3c      	cmp	r6, #60	; 0x3c
   11a4a:	d121      	bne.n	11a90 <bt_hci_le_enh_conn_complete+0x78>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11a4c:	f001 fada 	bl	13004 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11a50:	f06f 0180 	mvn.w	r1, #128	; 0x80
   11a54:	3010      	adds	r0, #16
   11a56:	f014 f933 	bl	25cc0 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   11a5a:	2000      	movs	r0, #0
   11a5c:	f7ff fb02 	bl	11064 <find_pending_connect.part.0>
		if (!conn) {
   11a60:	4604      	mov	r4, r0
   11a62:	b958      	cbnz	r0, 11a7c <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   11a64:	4b92      	ldr	r3, [pc, #584]	; (11cb0 <bt_hci_le_enh_conn_complete+0x298>)
   11a66:	2201      	movs	r2, #1
   11a68:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11a6c:	4991      	ldr	r1, [pc, #580]	; (11cb4 <bt_hci_le_enh_conn_complete+0x29c>)
   11a6e:	4603      	mov	r3, r0
   11a70:	9000      	str	r0, [sp, #0]
   11a72:	f014 f916 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   11a76:	b00a      	add	sp, #40	; 0x28
   11a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   11a7c:	7306      	strb	r6, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11a7e:	2100      	movs	r1, #0
   11a80:	f002 f9ec 	bl	13e5c <bt_conn_set_state>
		bt_conn_unref(conn);
   11a84:	4620      	mov	r0, r4
}
   11a86:	b00a      	add	sp, #40	; 0x28
   11a88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   11a8c:	f002 b9ae 	b.w	13dec <bt_conn_unref>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   11a90:	4b89      	ldr	r3, [pc, #548]	; (11cb8 <bt_hci_le_enh_conn_complete+0x2a0>)
   11a92:	2202      	movs	r2, #2
   11a94:	9302      	str	r3, [sp, #8]
   11a96:	2300      	movs	r3, #0
   11a98:	4986      	ldr	r1, [pc, #536]	; (11cb4 <bt_hci_le_enh_conn_complete+0x29c>)
   11a9a:	4618      	mov	r0, r3
   11a9c:	e9cd 3300 	strd	r3, r3, [sp]
   11aa0:	9603      	str	r6, [sp, #12]
   11aa2:	f014 f8fe 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		return;
   11aa6:	e7e6      	b.n	11a76 <bt_hci_le_enh_conn_complete+0x5e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   11aa8:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   11aaa:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   11aae:	3b02      	subs	r3, #2
   11ab0:	2b01      	cmp	r3, #1
   11ab2:	d827      	bhi.n	11b04 <bt_hci_le_enh_conn_complete+0xec>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   11ab4:	4651      	mov	r1, sl
   11ab6:	a808      	add	r0, sp, #32
   11ab8:	f014 f8ec 	bl	25c94 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11abc:	f89d 3020 	ldrb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11ac0:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11ac4:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11ac6:	f10d 0019 	add.w	r0, sp, #25
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   11aca:	f88d 3020 	strb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   11ace:	f014 f8dc 	bl	25c8a <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   11ad2:	2301      	movs	r3, #1
   11ad4:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   11ad8:	78eb      	ldrb	r3, [r5, #3]
   11ada:	2b01      	cmp	r3, #1
   11adc:	d025      	beq.n	11b2a <bt_hci_le_enh_conn_complete+0x112>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   11ade:	4650      	mov	r0, sl
   11ae0:	f7ff f98c 	bl	10dfc <bt_addr_le_str>
   11ae4:	4b75      	ldr	r3, [pc, #468]	; (11cbc <bt_hci_le_enh_conn_complete+0x2a4>)
   11ae6:	9003      	str	r0, [sp, #12]
   11ae8:	9302      	str	r3, [sp, #8]
   11aea:	2300      	movs	r3, #0
   11aec:	2201      	movs	r2, #1
   11aee:	4618      	mov	r0, r3
   11af0:	e9cd 3300 	strd	r3, r3, [sp]
   11af4:	496f      	ldr	r1, [pc, #444]	; (11cb4 <bt_hci_le_enh_conn_complete+0x29c>)
   11af6:	f014 f8d4 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   11afa:	211f      	movs	r1, #31
   11afc:	4648      	mov	r0, r9
   11afe:	f014 f8f7 	bl	25cf0 <bt_hci_disconnect>
		return;
   11b02:	e7b8      	b.n	11a76 <bt_hci_le_enh_conn_complete+0x5e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   11b04:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   11b06:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   11b08:	2b01      	cmp	r3, #1
   11b0a:	bf04      	itt	eq
   11b0c:	4b6c      	ldreq	r3, [pc, #432]	; (11cc0 <bt_hci_le_enh_conn_complete+0x2a8>)
   11b0e:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   11b12:	4630      	mov	r0, r6
   11b14:	f014 fa19 	bl	25f4a <bt_lookup_id_addr>
   11b18:	4601      	mov	r1, r0
   11b1a:	a808      	add	r0, sp, #32
   11b1c:	f014 f8ba 	bl	25c94 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   11b20:	4651      	mov	r1, sl
   11b22:	a806      	add	r0, sp, #24
   11b24:	f014 f8b6 	bl	25c94 <bt_addr_le_copy>
   11b28:	e7d6      	b.n	11ad8 <bt_hci_le_enh_conn_complete+0xc0>
   11b2a:	a808      	add	r0, sp, #32
   11b2c:	f7ff fa9a 	bl	11064 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11b30:	78eb      	ldrb	r3, [r5, #3]
   11b32:	4604      	mov	r4, r0
   11b34:	2b01      	cmp	r3, #1
   11b36:	d10a      	bne.n	11b4e <bt_hci_le_enh_conn_complete+0x136>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11b38:	f001 fa64 	bl	13004 <bt_le_adv_lookup_legacy>
   11b3c:	4606      	mov	r6, r0
   11b3e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   11b42:	3010      	adds	r0, #16
   11b44:	f014 f8bc 	bl	25cc0 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   11b48:	4630      	mov	r0, r6
   11b4a:	f014 fb2c 	bl	261a6 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   11b4e:	2c00      	cmp	r4, #0
   11b50:	d0c5      	beq.n	11ade <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   11b52:	4620      	mov	r0, r4
	conn->err = 0U;
   11b54:	2200      	movs	r2, #0
	conn->handle = handle;
   11b56:	f820 8b90 	strh.w	r8, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   11b5a:	a908      	add	r1, sp, #32
   11b5c:	f014 f89a 	bl	25c94 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   11b60:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   11b64:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   11b68:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   11b6c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   11b70:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   11b74:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   11b78:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   11b7a:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11b7c:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   11b7e:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11b80:	d115      	bne.n	11bae <bt_hci_le_enh_conn_complete+0x196>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   11b82:	a906      	add	r1, sp, #24
   11b84:	f104 0097 	add.w	r0, r4, #151	; 0x97
   11b88:	f014 f884 	bl	25c94 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11b8c:	f001 fa3a 	bl	13004 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   11b90:	7a21      	ldrb	r1, [r4, #8]
   11b92:	4a4b      	ldr	r2, [pc, #300]	; (11cc0 <bt_hci_le_enh_conn_complete+0x2a8>)
   11b94:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   11b98:	4411      	add	r1, r2
   11b9a:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   11b9e:	f014 f879 	bl	25c94 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   11ba2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   11ba6:	065d      	lsls	r5, r3, #25
   11ba8:	d501      	bpl.n	11bae <bt_hci_le_enh_conn_complete+0x196>
			bt_le_adv_resume();
   11baa:	f001 fbef 	bl	1338c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   11bae:	2107      	movs	r1, #7
   11bb0:	4620      	mov	r0, r4
   11bb2:	f002 f953 	bl	13e5c <bt_conn_set_state>
	if (is_disconnected) {
   11bb6:	b11f      	cbz	r7, 11bc0 <bt_hci_le_enh_conn_complete+0x1a8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11bb8:	2101      	movs	r1, #1
   11bba:	4620      	mov	r0, r4
   11bbc:	f002 f94e 	bl	13e5c <bt_conn_set_state>
	bt_conn_connected(conn);
   11bc0:	4620      	mov	r0, r4
   11bc2:	f014 fba1 	bl	26308 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   11bc6:	7b63      	ldrb	r3, [r4, #13]
   11bc8:	2b07      	cmp	r3, #7
   11bca:	d167      	bne.n	11c9c <bt_hci_le_enh_conn_complete+0x284>
   11bcc:	1d23      	adds	r3, r4, #4
   11bce:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   11bd2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   11bd6:	4e3a      	ldr	r6, [pc, #232]	; (11cc0 <bt_hci_le_enh_conn_complete+0x2a8>)
   11bd8:	d125      	bne.n	11c26 <bt_hci_le_enh_conn_complete+0x20e>
   11bda:	78e3      	ldrb	r3, [r4, #3]
   11bdc:	b11b      	cbz	r3, 11be6 <bt_hci_le_enh_conn_complete+0x1ce>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   11bde:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   11be2:	0718      	lsls	r0, r3, #28
   11be4:	d51f      	bpl.n	11c26 <bt_hci_le_enh_conn_complete+0x20e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   11be6:	2102      	movs	r1, #2
   11be8:	f242 0016 	movw	r0, #8214	; 0x2016
   11bec:	f7ff fdfc 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   11bf0:	4605      	mov	r5, r0
   11bf2:	2800      	cmp	r0, #0
   11bf4:	d056      	beq.n	11ca4 <bt_hci_le_enh_conn_complete+0x28c>
   11bf6:	2102      	movs	r1, #2
   11bf8:	300c      	adds	r0, #12
   11bfa:	f007 fb33 	bl	19264 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   11bfe:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   11c00:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   11c02:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   11c04:	4629      	mov	r1, r5
   11c06:	f242 0016 	movw	r0, #8214	; 0x2016
   11c0a:	f7ff fe3b 	bl	11884 <bt_hci_cmd_send_sync>
		if (err) {
   11c0e:	b150      	cbz	r0, 11c26 <bt_hci_le_enh_conn_complete+0x20e>
			LOG_ERR("Failed read remote features (%d)", err);
   11c10:	4b2c      	ldr	r3, [pc, #176]	; (11cc4 <bt_hci_le_enh_conn_complete+0x2ac>)
   11c12:	9003      	str	r0, [sp, #12]
   11c14:	9302      	str	r3, [sp, #8]
   11c16:	2300      	movs	r3, #0
   11c18:	2201      	movs	r2, #1
   11c1a:	4618      	mov	r0, r3
   11c1c:	e9cd 3300 	strd	r3, r3, [sp]
   11c20:	4924      	ldr	r1, [pc, #144]	; (11cb4 <bt_hci_le_enh_conn_complete+0x29c>)
   11c22:	f014 f83e 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   11c26:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   11c2a:	07d9      	lsls	r1, r3, #31
   11c2c:	d513      	bpl.n	11c56 <bt_hci_le_enh_conn_complete+0x23e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   11c2e:	2500      	movs	r5, #0
   11c30:	2302      	movs	r3, #2
   11c32:	4629      	mov	r1, r5
   11c34:	461a      	mov	r2, r3
   11c36:	4620      	mov	r0, r4
   11c38:	9500      	str	r5, [sp, #0]
   11c3a:	f014 f892 	bl	25d62 <bt_le_set_phy>
		if (err) {
   11c3e:	b150      	cbz	r0, 11c56 <bt_hci_le_enh_conn_complete+0x23e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   11c40:	4b21      	ldr	r3, [pc, #132]	; (11cc8 <bt_hci_le_enh_conn_complete+0x2b0>)
   11c42:	9003      	str	r0, [sp, #12]
   11c44:	e9cd 5301 	strd	r5, r3, [sp, #4]
   11c48:	2201      	movs	r2, #1
   11c4a:	462b      	mov	r3, r5
   11c4c:	4628      	mov	r0, r5
   11c4e:	4919      	ldr	r1, [pc, #100]	; (11cb4 <bt_hci_le_enh_conn_complete+0x29c>)
   11c50:	9500      	str	r5, [sp, #0]
   11c52:	f014 f826 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   11c56:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   11c5a:	069a      	lsls	r2, r3, #26
   11c5c:	d51e      	bpl.n	11c9c <bt_hci_le_enh_conn_complete+0x284>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   11c5e:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   11c62:	689b      	ldr	r3, [r3, #8]
   11c64:	079b      	lsls	r3, r3, #30
   11c66:	d519      	bpl.n	11c9c <bt_hci_le_enh_conn_complete+0x284>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   11c68:	f10d 0116 	add.w	r1, sp, #22
   11c6c:	a805      	add	r0, sp, #20
   11c6e:	f7ff fe7f 	bl	11970 <hci_le_read_max_data_len>
			if (!err) {
   11c72:	4605      	mov	r5, r0
   11c74:	b990      	cbnz	r0, 11c9c <bt_hci_le_enh_conn_complete+0x284>
				err = bt_le_set_data_len(conn,
   11c76:	4620      	mov	r0, r4
   11c78:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   11c7c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   11c80:	f014 f851 	bl	25d26 <bt_le_set_data_len>
				if (err) {
   11c84:	b150      	cbz	r0, 11c9c <bt_hci_le_enh_conn_complete+0x284>
					LOG_ERR("Failed to set data len (%d)", err);
   11c86:	4b11      	ldr	r3, [pc, #68]	; (11ccc <bt_hci_le_enh_conn_complete+0x2b4>)
   11c88:	9003      	str	r0, [sp, #12]
   11c8a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   11c8e:	2201      	movs	r2, #1
   11c90:	462b      	mov	r3, r5
   11c92:	4628      	mov	r0, r5
   11c94:	4907      	ldr	r1, [pc, #28]	; (11cb4 <bt_hci_le_enh_conn_complete+0x29c>)
   11c96:	9500      	str	r5, [sp, #0]
   11c98:	f014 f803 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   11c9c:	4620      	mov	r0, r4
   11c9e:	f002 f8a5 	bl	13dec <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11ca2:	e6e8      	b.n	11a76 <bt_hci_le_enh_conn_complete+0x5e>
		return -ENOBUFS;
   11ca4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11ca8:	e7b2      	b.n	11c10 <bt_hci_le_enh_conn_complete+0x1f8>
   11caa:	bf00      	nop
   11cac:	200214ea 	.word	0x200214ea
   11cb0:	0002d54b 	.word	0x0002d54b
   11cb4:	0002a398 	.word	0x0002a398
   11cb8:	0002d56c 	.word	0x0002d56c
   11cbc:	0002d585 	.word	0x0002d585
   11cc0:	20008000 	.word	0x20008000
   11cc4:	0002d5a1 	.word	0x0002d5a1
   11cc8:	0002d5c2 	.word	0x0002d5c2
   11ccc:	0002d5d9 	.word	0x0002d5d9

00011cd0 <le_legacy_conn_complete>:
{
   11cd0:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   11cd2:	68c1      	ldr	r1, [r0, #12]
{
   11cd4:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   11cd6:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   11cd8:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   11cda:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   11cde:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   11ce2:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   11ce4:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   11ce8:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   11cec:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   11cf0:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   11cf4:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   11cf8:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   11cfc:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   11d00:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   11d04:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   11d08:	7b4b      	ldrb	r3, [r1, #13]
   11d0a:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   11d0e:	f013 ffc1 	bl	25c94 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   11d12:	4907      	ldr	r1, [pc, #28]	; (11d30 <le_legacy_conn_complete+0x60>)
   11d14:	f10d 000b 	add.w	r0, sp, #11
   11d18:	f013 ffb7 	bl	25c8a <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   11d1c:	f10d 0011 	add.w	r0, sp, #17
   11d20:	f013 ffb3 	bl	25c8a <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   11d24:	4668      	mov	r0, sp
   11d26:	f7ff fe77 	bl	11a18 <bt_hci_le_enh_conn_complete>
}
   11d2a:	b009      	add	sp, #36	; 0x24
   11d2c:	f85d fb04 	ldr.w	pc, [sp], #4
   11d30:	0002d1be 	.word	0x0002d1be

00011d34 <bt_security_err_get>:
	switch (hci_err) {
   11d34:	2829      	cmp	r0, #41	; 0x29
   11d36:	bf9a      	itte	ls
   11d38:	4b01      	ldrls	r3, [pc, #4]	; (11d40 <bt_security_err_get+0xc>)
   11d3a:	5c18      	ldrbls	r0, [r3, r0]
{
   11d3c:	2009      	movhi	r0, #9
}
   11d3e:	4770      	bx	lr
   11d40:	0002d87b 	.word	0x0002d87b

00011d44 <hci_encrypt_key_refresh_complete>:
{
   11d44:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   11d46:	68c3      	ldr	r3, [r0, #12]
{
   11d48:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(evt->handle);
   11d4a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   11d4e:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   11d50:	4630      	mov	r0, r6
   11d52:	f002 f87b 	bl	13e4c <bt_conn_lookup_handle>
	if (!conn) {
   11d56:	4604      	mov	r4, r0
   11d58:	b958      	cbnz	r0, 11d72 <hci_encrypt_key_refresh_complete+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   11d5a:	4b1e      	ldr	r3, [pc, #120]	; (11dd4 <hci_encrypt_key_refresh_complete+0x90>)
   11d5c:	2201      	movs	r2, #1
   11d5e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11d62:	491d      	ldr	r1, [pc, #116]	; (11dd8 <hci_encrypt_key_refresh_complete+0x94>)
   11d64:	4603      	mov	r3, r0
   11d66:	9603      	str	r6, [sp, #12]
   11d68:	9000      	str	r0, [sp, #0]
   11d6a:	f013 ff9a 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   11d6e:	b005      	add	sp, #20
   11d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   11d72:	b16d      	cbz	r5, 11d90 <hci_encrypt_key_refresh_complete+0x4c>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   11d74:	4628      	mov	r0, r5
   11d76:	f7ff ffdd 	bl	11d34 <bt_security_err_get>
   11d7a:	4629      	mov	r1, r5
   11d7c:	4602      	mov	r2, r0
   11d7e:	4620      	mov	r0, r4
   11d80:	f002 faa4 	bl	142cc <bt_conn_security_changed>
	bt_conn_unref(conn);
   11d84:	4620      	mov	r0, r4
}
   11d86:	b005      	add	sp, #20
   11d88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   11d8c:	f002 b82e 	b.w	13dec <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   11d90:	7887      	ldrb	r7, [r0, #2]
   11d92:	2f01      	cmp	r7, #1
   11d94:	d1ee      	bne.n	11d74 <hci_encrypt_key_refresh_complete+0x30>
		bt_smp_update_keys(conn);
   11d96:	f006 fc2b 	bl	185f0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   11d9a:	4620      	mov	r0, r4
   11d9c:	f013 ff51 	bl	25c42 <update_sec_level>
   11da0:	4606      	mov	r6, r0
   11da2:	2800      	cmp	r0, #0
   11da4:	d1e6      	bne.n	11d74 <hci_encrypt_key_refresh_complete+0x30>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   11da6:	2005      	movs	r0, #5
   11da8:	f7ff ffc4 	bl	11d34 <bt_security_err_get>
   11dac:	2105      	movs	r1, #5
   11dae:	4602      	mov	r2, r0
   11db0:	4620      	mov	r0, r4
   11db2:	f002 fa8b 	bl	142cc <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   11db6:	4b09      	ldr	r3, [pc, #36]	; (11ddc <hci_encrypt_key_refresh_complete+0x98>)
   11db8:	4630      	mov	r0, r6
   11dba:	e9cd 6301 	strd	r6, r3, [sp, #4]
   11dbe:	463a      	mov	r2, r7
   11dc0:	4633      	mov	r3, r6
   11dc2:	4905      	ldr	r1, [pc, #20]	; (11dd8 <hci_encrypt_key_refresh_complete+0x94>)
   11dc4:	9600      	str	r6, [sp, #0]
   11dc6:	f013 ff6c 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   11dca:	2105      	movs	r1, #5
   11dcc:	4620      	mov	r0, r4
   11dce:	f014 faa4 	bl	2631a <bt_conn_disconnect>
   11dd2:	e7d7      	b.n	11d84 <hci_encrypt_key_refresh_complete+0x40>
   11dd4:	0002d315 	.word	0x0002d315
   11dd8:	0002a398 	.word	0x0002a398
   11ddc:	0002d5f5 	.word	0x0002d5f5

00011de0 <hci_encrypt_change>:
{
   11de0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   11de2:	68c6      	ldr	r6, [r0, #12]
{
   11de4:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11de6:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   11dea:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   11dec:	4638      	mov	r0, r7
   11dee:	f002 f82d 	bl	13e4c <bt_conn_lookup_handle>
	if (!conn) {
   11df2:	4604      	mov	r4, r0
   11df4:	b958      	cbnz	r0, 11e0e <hci_encrypt_change+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   11df6:	4b23      	ldr	r3, [pc, #140]	; (11e84 <hci_encrypt_change+0xa4>)
   11df8:	2201      	movs	r2, #1
   11dfa:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11dfe:	4922      	ldr	r1, [pc, #136]	; (11e88 <hci_encrypt_change+0xa8>)
   11e00:	4603      	mov	r3, r0
   11e02:	9703      	str	r7, [sp, #12]
   11e04:	9000      	str	r0, [sp, #0]
   11e06:	f013 ff4c 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   11e0a:	b005      	add	sp, #20
   11e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   11e0e:	b16d      	cbz	r5, 11e2c <hci_encrypt_change+0x4c>
		bt_conn_security_changed(conn, status,
   11e10:	4628      	mov	r0, r5
   11e12:	f7ff ff8f 	bl	11d34 <bt_security_err_get>
   11e16:	4629      	mov	r1, r5
   11e18:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   11e1a:	4620      	mov	r0, r4
   11e1c:	f002 fa56 	bl	142cc <bt_conn_security_changed>
	bt_conn_unref(conn);
   11e20:	4620      	mov	r0, r4
}
   11e22:	b005      	add	sp, #20
   11e24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   11e28:	f001 bfe0 	b.w	13dec <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   11e2c:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   11e2e:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   11e30:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   11e32:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   11e34:	d005      	beq.n	11e42 <hci_encrypt_change+0x62>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   11e36:	2000      	movs	r0, #0
   11e38:	f7ff ff7c 	bl	11d34 <bt_security_err_get>
   11e3c:	2100      	movs	r1, #0
   11e3e:	4602      	mov	r2, r0
   11e40:	e7eb      	b.n	11e1a <hci_encrypt_change+0x3a>
		if (conn->encrypt) {
   11e42:	b10b      	cbz	r3, 11e48 <hci_encrypt_change+0x68>
			bt_smp_update_keys(conn);
   11e44:	f006 fbd4 	bl	185f0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   11e48:	4620      	mov	r0, r4
   11e4a:	f013 fefa 	bl	25c42 <update_sec_level>
   11e4e:	4605      	mov	r5, r0
   11e50:	2800      	cmp	r0, #0
   11e52:	d1f0      	bne.n	11e36 <hci_encrypt_change+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   11e54:	2005      	movs	r0, #5
   11e56:	f7ff ff6d 	bl	11d34 <bt_security_err_get>
   11e5a:	2105      	movs	r1, #5
   11e5c:	4602      	mov	r2, r0
   11e5e:	4620      	mov	r0, r4
   11e60:	f002 fa34 	bl	142cc <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   11e64:	4b09      	ldr	r3, [pc, #36]	; (11e8c <hci_encrypt_change+0xac>)
   11e66:	4628      	mov	r0, r5
   11e68:	e9cd 5301 	strd	r5, r3, [sp, #4]
   11e6c:	2201      	movs	r2, #1
   11e6e:	462b      	mov	r3, r5
   11e70:	4905      	ldr	r1, [pc, #20]	; (11e88 <hci_encrypt_change+0xa8>)
   11e72:	9500      	str	r5, [sp, #0]
   11e74:	f013 ff15 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   11e78:	2105      	movs	r1, #5
   11e7a:	4620      	mov	r0, r4
   11e7c:	f014 fa4d 	bl	2631a <bt_conn_disconnect>
   11e80:	e7ce      	b.n	11e20 <hci_encrypt_change+0x40>
   11e82:	bf00      	nop
   11e84:	0002d315 	.word	0x0002d315
   11e88:	0002a398 	.word	0x0002a398
   11e8c:	0002d5f5 	.word	0x0002d5f5

00011e90 <bt_send>:
	return bt_dev.drv->send(buf);
   11e90:	4b02      	ldr	r3, [pc, #8]	; (11e9c <bt_send+0xc>)
   11e92:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   11e96:	695b      	ldr	r3, [r3, #20]
   11e98:	4718      	bx	r3
   11e9a:	bf00      	nop
   11e9c:	20008000 	.word	0x20008000

00011ea0 <bt_hci_cmd_send>:
{
   11ea0:	b530      	push	{r4, r5, lr}
   11ea2:	4605      	mov	r5, r0
	if (!buf) {
   11ea4:	460c      	mov	r4, r1
{
   11ea6:	b085      	sub	sp, #20
	if (!buf) {
   11ea8:	b919      	cbnz	r1, 11eb2 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   11eaa:	f7ff fc9d 	bl	117e8 <bt_hci_cmd_create>
		if (!buf) {
   11eae:	4604      	mov	r4, r0
   11eb0:	b1f8      	cbz	r0, 11ef2 <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   11eb2:	f640 4335 	movw	r3, #3125	; 0xc35
   11eb6:	429d      	cmp	r5, r3
   11eb8:	d115      	bne.n	11ee6 <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
   11eba:	4620      	mov	r0, r4
   11ebc:	f7ff ffe8 	bl	11e90 <bt_send>
		if (err) {
   11ec0:	4605      	mov	r5, r0
   11ec2:	b1a0      	cbz	r0, 11eee <bt_hci_cmd_send+0x4e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   11ec4:	4b0c      	ldr	r3, [pc, #48]	; (11ef8 <bt_hci_cmd_send+0x58>)
   11ec6:	9003      	str	r0, [sp, #12]
   11ec8:	9302      	str	r3, [sp, #8]
   11eca:	2300      	movs	r3, #0
   11ecc:	2201      	movs	r2, #1
   11ece:	4618      	mov	r0, r3
   11ed0:	e9cd 3300 	strd	r3, r3, [sp]
   11ed4:	4909      	ldr	r1, [pc, #36]	; (11efc <bt_hci_cmd_send+0x5c>)
   11ed6:	f013 fee4 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
			net_buf_unref(buf);
   11eda:	4620      	mov	r0, r4
   11edc:	f007 f8a0 	bl	19020 <net_buf_unref>
}
   11ee0:	4628      	mov	r0, r5
   11ee2:	b005      	add	sp, #20
   11ee4:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   11ee6:	4621      	mov	r1, r4
   11ee8:	4805      	ldr	r0, [pc, #20]	; (11f00 <bt_hci_cmd_send+0x60>)
   11eea:	f007 f873 	bl	18fd4 <net_buf_put>
	return 0;
   11eee:	2500      	movs	r5, #0
   11ef0:	e7f6      	b.n	11ee0 <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   11ef2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   11ef6:	e7f3      	b.n	11ee0 <bt_hci_cmd_send+0x40>
   11ef8:	0002d61b 	.word	0x0002d61b
   11efc:	0002a398 	.word	0x0002a398
   11f00:	20008144 	.word	0x20008144

00011f04 <bt_hci_host_num_completed_packets>:
{
   11f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f06:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   11f08:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   11f0a:	7e46      	ldrb	r6, [r0, #25]
{
   11f0c:	b085      	sub	sp, #20
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11f0e:	7a80      	ldrb	r0, [r0, #10]
   11f10:	f006 fe4c 	bl	18bac <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   11f14:	4621      	mov	r1, r4
   11f16:	f017 f8ee 	bl	290f6 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   11f1a:	4b2a      	ldr	r3, [pc, #168]	; (11fc4 <bt_hci_host_num_completed_packets+0xc0>)
   11f1c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   11f20:	069b      	lsls	r3, r3, #26
   11f22:	d50e      	bpl.n	11f42 <bt_hci_host_num_completed_packets+0x3e>
	conn = bt_conn_lookup_index(index);
   11f24:	4630      	mov	r0, r6
   11f26:	f002 fc2f 	bl	14788 <bt_conn_lookup_index>
	if (!conn) {
   11f2a:	4604      	mov	r4, r0
   11f2c:	b958      	cbnz	r0, 11f46 <bt_hci_host_num_completed_packets+0x42>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   11f2e:	4b26      	ldr	r3, [pc, #152]	; (11fc8 <bt_hci_host_num_completed_packets+0xc4>)
   11f30:	2202      	movs	r2, #2
   11f32:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11f36:	4925      	ldr	r1, [pc, #148]	; (11fcc <bt_hci_host_num_completed_packets+0xc8>)
   11f38:	4603      	mov	r3, r0
   11f3a:	9603      	str	r6, [sp, #12]
   11f3c:	9000      	str	r0, [sp, #0]
   11f3e:	f013 feb0 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   11f42:	b005      	add	sp, #20
   11f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   11f46:	7b43      	ldrb	r3, [r0, #13]
   11f48:	3b07      	subs	r3, #7
   11f4a:	2b01      	cmp	r3, #1
   11f4c:	d90f      	bls.n	11f6e <bt_hci_host_num_completed_packets+0x6a>
		LOG_WRN("Not reporting packet for non-connected conn");
   11f4e:	4b20      	ldr	r3, [pc, #128]	; (11fd0 <bt_hci_host_num_completed_packets+0xcc>)
   11f50:	2202      	movs	r2, #2
   11f52:	9302      	str	r3, [sp, #8]
   11f54:	2300      	movs	r3, #0
   11f56:	491d      	ldr	r1, [pc, #116]	; (11fcc <bt_hci_host_num_completed_packets+0xc8>)
   11f58:	4618      	mov	r0, r3
   11f5a:	e9cd 3300 	strd	r3, r3, [sp]
   11f5e:	f013 fea0 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   11f62:	4620      	mov	r0, r4
}
   11f64:	b005      	add	sp, #20
   11f66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   11f6a:	f001 bf3f 	b.w	13dec <bt_conn_unref>
	bt_conn_unref(conn);
   11f6e:	f001 ff3d 	bl	13dec <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   11f72:	2105      	movs	r1, #5
   11f74:	f640 4035 	movw	r0, #3125	; 0xc35
   11f78:	f7ff fc36 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   11f7c:	4604      	mov	r4, r0
   11f7e:	b948      	cbnz	r0, 11f94 <bt_hci_host_num_completed_packets+0x90>
		LOG_ERR("Unable to allocate new HCI command");
   11f80:	4b14      	ldr	r3, [pc, #80]	; (11fd4 <bt_hci_host_num_completed_packets+0xd0>)
   11f82:	2201      	movs	r2, #1
   11f84:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11f88:	4910      	ldr	r1, [pc, #64]	; (11fcc <bt_hci_host_num_completed_packets+0xc8>)
   11f8a:	4603      	mov	r3, r0
   11f8c:	9000      	str	r0, [sp, #0]
   11f8e:	f013 fe88 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		return;
   11f92:	e7d6      	b.n	11f42 <bt_hci_host_num_completed_packets+0x3e>
	return net_buf_simple_add(&buf->b, len);
   11f94:	f100 070c 	add.w	r7, r0, #12
   11f98:	2101      	movs	r1, #1
   11f9a:	4638      	mov	r0, r7
   11f9c:	f007 f962 	bl	19264 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   11fa0:	2601      	movs	r6, #1
   11fa2:	2104      	movs	r1, #4
   11fa4:	7006      	strb	r6, [r0, #0]
   11fa6:	4638      	mov	r0, r7
   11fa8:	f007 f95c 	bl	19264 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   11fac:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   11fae:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   11fb0:	7086      	strb	r6, [r0, #2]
   11fb2:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   11fb4:	4621      	mov	r1, r4
   11fb6:	f640 4035 	movw	r0, #3125	; 0xc35
}
   11fba:	b005      	add	sp, #20
   11fbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   11fc0:	f7ff bf6e 	b.w	11ea0 <bt_hci_cmd_send>
   11fc4:	20008000 	.word	0x20008000
   11fc8:	0002d63d 	.word	0x0002d63d
   11fcc:	0002a398 	.word	0x0002a398
   11fd0:	0002d666 	.word	0x0002d666
   11fd4:	0002d692 	.word	0x0002d692

00011fd8 <le_ltk_request>:
{
   11fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   11fda:	68c6      	ldr	r6, [r0, #12]
{
   11fdc:	b089      	sub	sp, #36	; 0x24
	handle = sys_le16_to_cpu(evt->handle);
   11fde:	8837      	ldrh	r7, [r6, #0]
   11fe0:	b2bd      	uxth	r5, r7
	conn = bt_conn_lookup_handle(handle);
   11fe2:	4628      	mov	r0, r5
   11fe4:	f001 ff32 	bl	13e4c <bt_conn_lookup_handle>
	if (!conn) {
   11fe8:	4604      	mov	r4, r0
   11fea:	b958      	cbnz	r0, 12004 <le_ltk_request+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11fec:	4b2a      	ldr	r3, [pc, #168]	; (12098 <le_ltk_request+0xc0>)
   11fee:	2201      	movs	r2, #1
   11ff0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11ff4:	4929      	ldr	r1, [pc, #164]	; (1209c <le_ltk_request+0xc4>)
   11ff6:	4603      	mov	r3, r0
   11ff8:	9503      	str	r5, [sp, #12]
   11ffa:	9000      	str	r0, [sp, #0]
   11ffc:	f013 fe51 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   12000:	b009      	add	sp, #36	; 0x24
   12002:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   12004:	ad04      	add	r5, sp, #16
   12006:	f8d6 2002 	ldr.w	r2, [r6, #2]
   1200a:	f8d6 3006 	ldr.w	r3, [r6, #6]
   1200e:	9501      	str	r5, [sp, #4]
   12010:	8971      	ldrh	r1, [r6, #10]
   12012:	9100      	str	r1, [sp, #0]
   12014:	f015 faea 	bl	275ec <bt_smp_request_ltk>
   12018:	b360      	cbz	r0, 12074 <le_ltk_request+0x9c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1201a:	2112      	movs	r1, #18
   1201c:	f242 001a 	movw	r0, #8218	; 0x201a
   12020:	f7ff fbe2 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   12024:	4606      	mov	r6, r0
   12026:	b968      	cbnz	r0, 12044 <le_ltk_request+0x6c>
		LOG_ERR("Out of command buffers");
   12028:	4b1d      	ldr	r3, [pc, #116]	; (120a0 <le_ltk_request+0xc8>)
   1202a:	2201      	movs	r2, #1
   1202c:	9302      	str	r3, [sp, #8]
   1202e:	2300      	movs	r3, #0
   12030:	491a      	ldr	r1, [pc, #104]	; (1209c <le_ltk_request+0xc4>)
   12032:	4618      	mov	r0, r3
   12034:	e9cd 3300 	strd	r3, r3, [sp]
   12038:	f013 fe33 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   1203c:	4620      	mov	r0, r4
   1203e:	f001 fed5 	bl	13dec <bt_conn_unref>
   12042:	e7dd      	b.n	12000 <le_ltk_request+0x28>
   12044:	2112      	movs	r1, #18
   12046:	300c      	adds	r0, #12
   12048:	f007 f90c 	bl	19264 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1204c:	4602      	mov	r2, r0
   1204e:	462b      	mov	r3, r5
   12050:	f822 7b02 	strh.w	r7, [r2], #2
   12054:	af08      	add	r7, sp, #32
   12056:	461d      	mov	r5, r3
   12058:	cd03      	ldmia	r5!, {r0, r1}
   1205a:	42bd      	cmp	r5, r7
   1205c:	6010      	str	r0, [r2, #0]
   1205e:	6051      	str	r1, [r2, #4]
   12060:	462b      	mov	r3, r5
   12062:	f102 0208 	add.w	r2, r2, #8
   12066:	d1f6      	bne.n	12056 <le_ltk_request+0x7e>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   12068:	4631      	mov	r1, r6
   1206a:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1206e:	f7ff ff17 	bl	11ea0 <bt_hci_cmd_send>
   12072:	e7e3      	b.n	1203c <le_ltk_request+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   12074:	2102      	movs	r1, #2
   12076:	f242 001b 	movw	r0, #8219	; 0x201b
   1207a:	f7ff fbb5 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   1207e:	4605      	mov	r5, r0
   12080:	2800      	cmp	r0, #0
   12082:	d0d1      	beq.n	12028 <le_ltk_request+0x50>
   12084:	2102      	movs	r1, #2
   12086:	300c      	adds	r0, #12
   12088:	f007 f8ec 	bl	19264 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1208c:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   1208e:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   12090:	f242 001b 	movw	r0, #8219	; 0x201b
   12094:	e7eb      	b.n	1206e <le_ltk_request+0x96>
   12096:	bf00      	nop
   12098:	0002d2f1 	.word	0x0002d2f1
   1209c:	0002a398 	.word	0x0002a398
   120a0:	0002d6b5 	.word	0x0002d6b5

000120a4 <le_conn_param_neg_reply>:
{
   120a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   120a6:	4606      	mov	r6, r0
   120a8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   120aa:	f242 0021 	movw	r0, #8225	; 0x2021
   120ae:	2103      	movs	r1, #3
   120b0:	f7ff fb9a 	bl	117e8 <bt_hci_cmd_create>
   120b4:	4604      	mov	r4, r0
	if (!buf) {
   120b6:	b950      	cbnz	r0, 120ce <le_conn_param_neg_reply+0x2a>
		LOG_ERR("Unable to allocate buffer");
   120b8:	4b0c      	ldr	r3, [pc, #48]	; (120ec <le_conn_param_neg_reply+0x48>)
   120ba:	2201      	movs	r2, #1
   120bc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   120c0:	490b      	ldr	r1, [pc, #44]	; (120f0 <le_conn_param_neg_reply+0x4c>)
   120c2:	4603      	mov	r3, r0
   120c4:	9000      	str	r0, [sp, #0]
   120c6:	f013 fdec 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
}
   120ca:	b004      	add	sp, #16
   120cc:	bd70      	pop	{r4, r5, r6, pc}
   120ce:	2103      	movs	r1, #3
   120d0:	300c      	adds	r0, #12
   120d2:	f007 f8c7 	bl	19264 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   120d6:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   120d8:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   120da:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   120dc:	f242 0021 	movw	r0, #8225	; 0x2021
}
   120e0:	b004      	add	sp, #16
   120e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   120e6:	f7ff bedb 	b.w	11ea0 <bt_hci_cmd_send>
   120ea:	bf00      	nop
   120ec:	0002d6cc 	.word	0x0002d6cc
   120f0:	0002a398 	.word	0x0002a398

000120f4 <le_conn_param_req>:
{
   120f4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   120f6:	68c3      	ldr	r3, [r0, #12]
{
   120f8:	b086      	sub	sp, #24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   120fa:	78d9      	ldrb	r1, [r3, #3]
   120fc:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   120fe:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12100:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12104:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   12108:	7959      	ldrb	r1, [r3, #5]
   1210a:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   1210c:	b2b5      	uxth	r5, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1210e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12112:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(evt->latency);
   12116:	799a      	ldrb	r2, [r3, #6]
   12118:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   1211a:	4628      	mov	r0, r5
	param.latency = sys_le16_to_cpu(evt->latency);
   1211c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12120:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   12124:	7a1a      	ldrb	r2, [r3, #8]
   12126:	7a5b      	ldrb	r3, [r3, #9]
   12128:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1212c:	f8ad 3016 	strh.w	r3, [sp, #22]
	conn = bt_conn_lookup_handle(handle);
   12130:	f001 fe8c 	bl	13e4c <bt_conn_lookup_handle>
	if (!conn) {
   12134:	4604      	mov	r4, r0
   12136:	b978      	cbnz	r0, 12158 <le_conn_param_req+0x64>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12138:	4b1e      	ldr	r3, [pc, #120]	; (121b4 <le_conn_param_req+0xc0>)
   1213a:	491f      	ldr	r1, [pc, #124]	; (121b8 <le_conn_param_req+0xc4>)
   1213c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12140:	9000      	str	r0, [sp, #0]
   12142:	4603      	mov	r3, r0
   12144:	2201      	movs	r2, #1
   12146:	9503      	str	r5, [sp, #12]
   12148:	f013 fdab 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1214c:	2102      	movs	r1, #2
   1214e:	4628      	mov	r0, r5
   12150:	f7ff ffa8 	bl	120a4 <le_conn_param_neg_reply>
}
   12154:	b006      	add	sp, #24
   12156:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
   12158:	a904      	add	r1, sp, #16
   1215a:	f002 f81f 	bl	1419c <le_param_req>
   1215e:	b938      	cbnz	r0, 12170 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   12160:	211e      	movs	r1, #30
   12162:	4628      	mov	r0, r5
   12164:	f7ff ff9e 	bl	120a4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   12168:	4620      	mov	r0, r4
   1216a:	f001 fe3f 	bl	13dec <bt_conn_unref>
   1216e:	e7f1      	b.n	12154 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   12170:	210e      	movs	r1, #14
   12172:	f242 0020 	movw	r0, #8224	; 0x2020
   12176:	f7ff fb37 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   1217a:	4605      	mov	r5, r0
   1217c:	2800      	cmp	r0, #0
   1217e:	d0f3      	beq.n	12168 <le_conn_param_req+0x74>
   12180:	210e      	movs	r1, #14
   12182:	300c      	adds	r0, #12
   12184:	f007 f86e 	bl	19264 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   12188:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   1218a:	8006      	strh	r6, [r0, #0]
   1218c:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   12190:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   12194:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   12196:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   12198:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1219c:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1219e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   121a2:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   121a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   121a8:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   121aa:	f242 0020 	movw	r0, #8224	; 0x2020
   121ae:	f7ff fe77 	bl	11ea0 <bt_hci_cmd_send>
   121b2:	e7d9      	b.n	12168 <le_conn_param_req+0x74>
   121b4:	0002d2f1 	.word	0x0002d2f1
   121b8:	0002a398 	.word	0x0002a398

000121bc <hci_tx_thread>:
{
   121bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   121c0:	f8df 8148 	ldr.w	r8, [pc, #328]	; 1230c <hci_tx_thread+0x150>
		BT_ASSERT(err == 0);
   121c4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 12310 <hci_tx_thread+0x154>
{
   121c8:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
   121ca:	f108 0b14 	add.w	fp, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   121ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   121d2:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
   121d4:	f36f 3394 	bfc	r3, #14, #7
   121d8:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   121dc:	f001 fda6 	bl	13d2c <bt_conn_prepare_events>
   121e0:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   121e2:	f04f 32ff 	mov.w	r2, #4294967295
   121e6:	f04f 33ff 	mov.w	r3, #4294967295
   121ea:	4629      	mov	r1, r5
   121ec:	4847      	ldr	r0, [pc, #284]	; (1230c <hci_tx_thread+0x150>)
   121ee:	f010 fae7 	bl	227c0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   121f2:	b160      	cbz	r0, 1220e <hci_tx_thread+0x52>
   121f4:	f640 13e6 	movw	r3, #2534	; 0x9e6
   121f8:	464a      	mov	r2, r9
   121fa:	4946      	ldr	r1, [pc, #280]	; (12314 <hci_tx_thread+0x158>)
   121fc:	4846      	ldr	r0, [pc, #280]	; (12318 <hci_tx_thread+0x15c>)
   121fe:	f012 fbd2 	bl	249a6 <assert_print>
   12202:	4040      	eors	r0, r0
   12204:	f380 8811 	msr	BASEPRI, r0
   12208:	f04f 0003 	mov.w	r0, #3
   1220c:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1220e:	f04f 0a00 	mov.w	sl, #0
{
   12212:	4e3e      	ldr	r6, [pc, #248]	; (1230c <hci_tx_thread+0x150>)
	for (; count; ev++, count--) {
   12214:	b915      	cbnz	r5, 1221c <hci_tx_thread+0x60>
	z_impl_k_yield();
   12216:	f00f fa1b 	bl	21650 <z_impl_k_yield>
	while (1) {
   1221a:	e7d8      	b.n	121ce <hci_tx_thread+0x12>
		switch (ev->state) {
   1221c:	68f3      	ldr	r3, [r6, #12]
   1221e:	f3c3 3386 	ubfx	r3, r3, #14, #7
   12222:	2b01      	cmp	r3, #1
   12224:	d95a      	bls.n	122dc <hci_tx_thread+0x120>
   12226:	2b04      	cmp	r3, #4
   12228:	d162      	bne.n	122f0 <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1222a:	7b33      	ldrb	r3, [r6, #12]
   1222c:	2b00      	cmp	r3, #0
   1222e:	d158      	bne.n	122e2 <hci_tx_thread+0x126>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12230:	2200      	movs	r2, #0
   12232:	2300      	movs	r3, #0
   12234:	4839      	ldr	r0, [pc, #228]	; (1231c <hci_tx_thread+0x160>)
   12236:	f015 fb87 	bl	27948 <net_buf_get>
	BT_ASSERT(buf);
   1223a:	4604      	mov	r4, r0
   1223c:	b960      	cbnz	r0, 12258 <hci_tx_thread+0x9c>
   1223e:	f44f 6318 	mov.w	r3, #2432	; 0x980
   12242:	464a      	mov	r2, r9
   12244:	4936      	ldr	r1, [pc, #216]	; (12320 <hci_tx_thread+0x164>)
   12246:	4834      	ldr	r0, [pc, #208]	; (12318 <hci_tx_thread+0x15c>)
   12248:	f012 fbad 	bl	249a6 <assert_print>
   1224c:	4040      	eors	r0, r0
   1224e:	f380 8811 	msr	BASEPRI, r0
   12252:	f04f 0003 	mov.w	r0, #3
   12256:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   12258:	4f32      	ldr	r7, [pc, #200]	; (12324 <hci_tx_thread+0x168>)
	return z_impl_k_sem_take(sem, timeout);
   1225a:	f04f 33ff 	mov.w	r3, #4294967295
   1225e:	f04f 32ff 	mov.w	r2, #4294967295
   12262:	4831      	ldr	r0, [pc, #196]	; (12328 <hci_tx_thread+0x16c>)
   12264:	f00d fc7e 	bl	1fb64 <z_impl_k_sem_take>
   12268:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   1226c:	b183      	cbz	r3, 12290 <hci_tx_thread+0xd4>
		LOG_ERR("Uncleared pending sent_cmd");
   1226e:	4b2f      	ldr	r3, [pc, #188]	; (1232c <hci_tx_thread+0x170>)
   12270:	2201      	movs	r2, #1
   12272:	9302      	str	r3, [sp, #8]
   12274:	2300      	movs	r3, #0
   12276:	492e      	ldr	r1, [pc, #184]	; (12330 <hci_tx_thread+0x174>)
   12278:	4618      	mov	r0, r3
   1227a:	e9cd 3300 	strd	r3, r3, [sp]
   1227e:	f013 fd10 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   12282:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   12286:	f006 fecb 	bl	19020 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1228a:	2300      	movs	r3, #0
   1228c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   12290:	4620      	mov	r0, r4
   12292:	f006 ff09 	bl	190a8 <net_buf_ref>
   12296:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   1229a:	4620      	mov	r0, r4
   1229c:	f7ff fdf8 	bl	11e90 <bt_send>
	if (err) {
   122a0:	b1e0      	cbz	r0, 122dc <hci_tx_thread+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   122a2:	4b24      	ldr	r3, [pc, #144]	; (12334 <hci_tx_thread+0x178>)
   122a4:	9003      	str	r0, [sp, #12]
   122a6:	9302      	str	r3, [sp, #8]
   122a8:	2300      	movs	r3, #0
   122aa:	2201      	movs	r2, #1
   122ac:	4618      	mov	r0, r3
   122ae:	e9cd 3300 	strd	r3, r3, [sp]
   122b2:	491f      	ldr	r1, [pc, #124]	; (12330 <hci_tx_thread+0x174>)
   122b4:	f013 fcf5 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   122b8:	481b      	ldr	r0, [pc, #108]	; (12328 <hci_tx_thread+0x16c>)
   122ba:	f00d fc0f 	bl	1fadc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   122be:	4620      	mov	r0, r4
   122c0:	f006 fc7c 	bl	18bbc <net_buf_id>
   122c4:	220c      	movs	r2, #12
   122c6:	4b1c      	ldr	r3, [pc, #112]	; (12338 <hci_tx_thread+0x17c>)
   122c8:	211f      	movs	r1, #31
   122ca:	fb02 3000 	mla	r0, r2, r0, r3
   122ce:	4622      	mov	r2, r4
   122d0:	8840      	ldrh	r0, [r0, #2]
   122d2:	f7ff f8d3 	bl	1147c <hci_cmd_done>
		net_buf_unref(buf);
   122d6:	4620      	mov	r0, r4
   122d8:	f006 fea2 	bl	19020 <net_buf_unref>
	for (; count; ev++, count--) {
   122dc:	3614      	adds	r6, #20
   122de:	3d01      	subs	r5, #1
   122e0:	e798      	b.n	12214 <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   122e2:	2b01      	cmp	r3, #1
   122e4:	d1fa      	bne.n	122dc <hci_tx_thread+0x120>
					conn = CONTAINER_OF(ev->fifo,
   122e6:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   122e8:	3838      	subs	r0, #56	; 0x38
   122ea:	f002 f9b7 	bl	1465c <bt_conn_process_tx>
   122ee:	e7f5      	b.n	122dc <hci_tx_thread+0x120>
		switch (ev->state) {
   122f0:	9303      	str	r3, [sp, #12]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   122f2:	4b12      	ldr	r3, [pc, #72]	; (1233c <hci_tx_thread+0x180>)
   122f4:	2202      	movs	r2, #2
   122f6:	e9cd a301 	strd	sl, r3, [sp, #4]
   122fa:	2300      	movs	r3, #0
   122fc:	490c      	ldr	r1, [pc, #48]	; (12330 <hci_tx_thread+0x174>)
   122fe:	4618      	mov	r0, r3
   12300:	f8cd a000 	str.w	sl, [sp]
   12304:	f013 fccd 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
   12308:	e7e8      	b.n	122dc <hci_tx_thread+0x120>
   1230a:	bf00      	nop
   1230c:	2000846c 	.word	0x2000846c
   12310:	0002d37f 	.word	0x0002d37f
   12314:	0002c1e7 	.word	0x0002c1e7
   12318:	0002b339 	.word	0x0002b339
   1231c:	20008144 	.word	0x20008144
   12320:	0002eeb9 	.word	0x0002eeb9
   12324:	20008000 	.word	0x20008000
   12328:	20008120 	.word	0x20008120
   1232c:	0002d6e6 	.word	0x0002d6e6
   12330:	0002a398 	.word	0x0002a398
   12334:	0002d61b 	.word	0x0002d61b
   12338:	20020f34 	.word	0x20020f34
   1233c:	0002d701 	.word	0x0002d701

00012340 <hci_event_prio>:
{
   12340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12344:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   12346:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1234a:	4630      	mov	r0, r6
   1234c:	f015 fb0d 	bl	2796a <net_buf_simple_headroom>
	state->len = buf->len;
   12350:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   12354:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12356:	f1b8 0f01 	cmp.w	r8, #1
   1235a:	d80c      	bhi.n	12376 <hci_event_prio+0x36>
   1235c:	f640 537b 	movw	r3, #3451	; 0xd7b
   12360:	4a1b      	ldr	r2, [pc, #108]	; (123d0 <hci_event_prio+0x90>)
   12362:	491c      	ldr	r1, [pc, #112]	; (123d4 <hci_event_prio+0x94>)
   12364:	481c      	ldr	r0, [pc, #112]	; (123d8 <hci_event_prio+0x98>)
   12366:	f012 fb1e 	bl	249a6 <assert_print>
   1236a:	4040      	eors	r0, r0
   1236c:	f380 8811 	msr	BASEPRI, r0
   12370:	f04f 0003 	mov.w	r0, #3
   12374:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   12376:	4630      	mov	r0, r6
   12378:	2102      	movs	r1, #2
   1237a:	f006 ff55 	bl	19228 <net_buf_simple_pull_mem>
   1237e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12380:	7800      	ldrb	r0, [r0, #0]
   12382:	f013 fc4c 	bl	25c1e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12386:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12388:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1238a:	d40c      	bmi.n	123a6 <hci_event_prio+0x66>
   1238c:	f640 537f 	movw	r3, #3455	; 0xd7f
   12390:	4a0f      	ldr	r2, [pc, #60]	; (123d0 <hci_event_prio+0x90>)
   12392:	4912      	ldr	r1, [pc, #72]	; (123dc <hci_event_prio+0x9c>)
   12394:	4810      	ldr	r0, [pc, #64]	; (123d8 <hci_event_prio+0x98>)
   12396:	f012 fb06 	bl	249a6 <assert_print>
   1239a:	4040      	eors	r0, r0
   1239c:	f380 8811 	msr	BASEPRI, r0
   123a0:	f04f 0003 	mov.w	r0, #3
   123a4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   123a6:	2305      	movs	r3, #5
   123a8:	4621      	mov	r1, r4
   123aa:	4a0d      	ldr	r2, [pc, #52]	; (123e0 <hci_event_prio+0xa0>)
   123ac:	7838      	ldrb	r0, [r7, #0]
   123ae:	f7fe ff23 	bl	111f8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   123b2:	07b3      	lsls	r3, r6, #30
   123b4:	d507      	bpl.n	123c6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   123b6:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   123b8:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   123bc:	fa13 f585 	uxtah	r5, r3, r5
   123c0:	60e5      	str	r5, [r4, #12]
}
   123c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   123c6:	4620      	mov	r0, r4
}
   123c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   123cc:	f006 be28 	b.w	19020 <net_buf_unref>
   123d0:	0002d37f 	.word	0x0002d37f
   123d4:	0002d3b3 	.word	0x0002d3b3
   123d8:	0002b339 	.word	0x0002b339
   123dc:	0002d722 	.word	0x0002d722
   123e0:	0002ac04 	.word	0x0002ac04

000123e4 <bt_recv>:
{
   123e4:	b530      	push	{r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   123e6:	7e03      	ldrb	r3, [r0, #24]
   123e8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   123ea:	2b01      	cmp	r3, #1
{
   123ec:	b085      	sub	sp, #20
	switch (bt_buf_get_type(buf)) {
   123ee:	d006      	beq.n	123fe <bt_recv+0x1a>
   123f0:	2b03      	cmp	r3, #3
   123f2:	d112      	bne.n	1241a <bt_recv+0x36>
			rx_queue_put(buf);
   123f4:	f7fe fe62 	bl	110bc <rx_queue_put>
		return 0;
   123f8:	2000      	movs	r0, #0
}
   123fa:	b005      	add	sp, #20
   123fc:	bd30      	pop	{r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   123fe:	68c3      	ldr	r3, [r0, #12]
   12400:	7818      	ldrb	r0, [r3, #0]
   12402:	f013 fc0c 	bl	25c1e <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12406:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12408:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1240a:	d502      	bpl.n	12412 <bt_recv+0x2e>
			hci_event_prio(buf);
   1240c:	4620      	mov	r0, r4
   1240e:	f7ff ff97 	bl	12340 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12412:	07ab      	lsls	r3, r5, #30
   12414:	d5f0      	bpl.n	123f8 <bt_recv+0x14>
			rx_queue_put(buf);
   12416:	4620      	mov	r0, r4
   12418:	e7ec      	b.n	123f4 <bt_recv+0x10>
	switch (bt_buf_get_type(buf)) {
   1241a:	9303      	str	r3, [sp, #12]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1241c:	4b07      	ldr	r3, [pc, #28]	; (1243c <bt_recv+0x58>)
   1241e:	2201      	movs	r2, #1
   12420:	9302      	str	r3, [sp, #8]
   12422:	2300      	movs	r3, #0
   12424:	4906      	ldr	r1, [pc, #24]	; (12440 <bt_recv+0x5c>)
   12426:	4618      	mov	r0, r3
   12428:	e9cd 3300 	strd	r3, r3, [sp]
   1242c:	f013 fc39 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   12430:	4620      	mov	r0, r4
   12432:	f006 fdf5 	bl	19020 <net_buf_unref>
		return -EINVAL;
   12436:	f06f 0015 	mvn.w	r0, #21
   1243a:	e7de      	b.n	123fa <bt_recv+0x16>
   1243c:	0002d73b 	.word	0x0002d73b
   12440:	0002a398 	.word	0x0002a398

00012444 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   12444:	4a08      	ldr	r2, [pc, #32]	; (12468 <bt_hci_driver_register+0x24>)
{
   12446:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   12448:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   1244c:	b930      	cbnz	r0, 1245c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1244e:	68d9      	ldr	r1, [r3, #12]
   12450:	b139      	cbz	r1, 12462 <bt_hci_driver_register+0x1e>
   12452:	6959      	ldr	r1, [r3, #20]
   12454:	b129      	cbz	r1, 12462 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   12456:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   1245a:	4770      	bx	lr
		return -EALREADY;
   1245c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12460:	4770      	bx	lr
		return -EINVAL;
   12462:	f06f 0015 	mvn.w	r0, #21
}
   12466:	4770      	bx	lr
   12468:	20008000 	.word	0x20008000

0001246c <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1246c:	2104      	movs	r1, #4
   1246e:	4801      	ldr	r0, [pc, #4]	; (12474 <bt_finalize_init+0x8>)
   12470:	f013 bc00 	b.w	25c74 <atomic_or>
   12474:	200080cc 	.word	0x200080cc

00012478 <init_work>:
{
   12478:	b510      	push	{r4, lr}
	err = bt_init();
   1247a:	f7f6 ffe1 	bl	9440 <bt_init>
	if (ready_cb) {
   1247e:	4b03      	ldr	r3, [pc, #12]	; (1248c <init_work+0x14>)
   12480:	681b      	ldr	r3, [r3, #0]
   12482:	b113      	cbz	r3, 1248a <init_work+0x12>
}
   12484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   12488:	4718      	bx	r3
}
   1248a:	bd10      	pop	{r4, pc}
   1248c:	20020fac 	.word	0x20020fac

00012490 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   12490:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   12492:	4e38      	ldr	r6, [pc, #224]	; (12574 <bt_enable+0xe4>)
{
   12494:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
   12496:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
{
   1249a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   1249c:	b96b      	cbnz	r3, 124ba <bt_enable+0x2a>
		LOG_ERR("No HCI driver registered");
   1249e:	4a36      	ldr	r2, [pc, #216]	; (12578 <bt_enable+0xe8>)
   124a0:	4618      	mov	r0, r3
   124a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   124a6:	4935      	ldr	r1, [pc, #212]	; (1257c <bt_enable+0xec>)
   124a8:	2201      	movs	r2, #1
   124aa:	9300      	str	r3, [sp, #0]
   124ac:	f013 fbf9 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   124b0:	f06f 0512 	mvn.w	r5, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   124b4:	4628      	mov	r0, r5
   124b6:	b009      	add	sp, #36	; 0x24
   124b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   124ba:	f06f 0102 	mvn.w	r1, #2
   124be:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   124c2:	f013 fbfd 	bl	25cc0 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   124c6:	2101      	movs	r1, #1
   124c8:	f013 fbd4 	bl	25c74 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   124cc:	ea10 0401 	ands.w	r4, r0, r1
   124d0:	d14d      	bne.n	1256e <bt_enable+0xde>
	ready_cb = cb;
   124d2:	4b2b      	ldr	r3, [pc, #172]	; (12580 <bt_enable+0xf0>)
   124d4:	601f      	str	r7, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   124d6:	460a      	mov	r2, r1
   124d8:	f506 7090 	add.w	r0, r6, #288	; 0x120
   124dc:	f016 fe15 	bl	2910a <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   124e0:	f506 70a2 	add.w	r0, r6, #324	; 0x144
   124e4:	f016 fdef 	bl	290c6 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   124e8:	2200      	movs	r2, #0
   124ea:	2300      	movs	r3, #0
   124ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
   124f0:	f06f 0308 	mvn.w	r3, #8
   124f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   124f8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   124fc:	e9cd 4400 	strd	r4, r4, [sp]
   12500:	4b20      	ldr	r3, [pc, #128]	; (12584 <bt_enable+0xf4>)
   12502:	4921      	ldr	r1, [pc, #132]	; (12588 <bt_enable+0xf8>)
   12504:	9404      	str	r4, [sp, #16]
   12506:	4821      	ldr	r0, [pc, #132]	; (1258c <bt_enable+0xfc>)
   12508:	f00c ff66 	bl	1f3d8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1250c:	4920      	ldr	r1, [pc, #128]	; (12590 <bt_enable+0x100>)
   1250e:	481f      	ldr	r0, [pc, #124]	; (1258c <bt_enable+0xfc>)
   12510:	f016 fdb0 	bl	29074 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   12514:	481f      	ldr	r0, [pc, #124]	; (12594 <bt_enable+0x104>)
   12516:	f00d fe55 	bl	201c4 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1251a:	f06f 0307 	mvn.w	r3, #7
   1251e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   12522:	491d      	ldr	r1, [pc, #116]	; (12598 <bt_enable+0x108>)
   12524:	481b      	ldr	r0, [pc, #108]	; (12594 <bt_enable+0x104>)
   12526:	9400      	str	r4, [sp, #0]
   12528:	f00d fe66 	bl	201f8 <k_work_queue_start>
   1252c:	491b      	ldr	r1, [pc, #108]	; (1259c <bt_enable+0x10c>)
   1252e:	4819      	ldr	r0, [pc, #100]	; (12594 <bt_enable+0x104>)
   12530:	f016 fda0 	bl	29074 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   12534:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   12538:	68db      	ldr	r3, [r3, #12]
   1253a:	4798      	blx	r3
	if (err) {
   1253c:	4605      	mov	r5, r0
   1253e:	b158      	cbz	r0, 12558 <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   12540:	4b17      	ldr	r3, [pc, #92]	; (125a0 <bt_enable+0x110>)
   12542:	9003      	str	r0, [sp, #12]
   12544:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12548:	2201      	movs	r2, #1
   1254a:	4623      	mov	r3, r4
   1254c:	4620      	mov	r0, r4
   1254e:	490b      	ldr	r1, [pc, #44]	; (1257c <bt_enable+0xec>)
   12550:	9400      	str	r4, [sp, #0]
   12552:	f013 fba6 	bl	25ca2 <z_log_msg_runtime_create.constprop.0>
		return err;
   12556:	e7ad      	b.n	124b4 <bt_enable+0x24>
	if (!cb) {
   12558:	b927      	cbnz	r7, 12564 <bt_enable+0xd4>
}
   1255a:	b009      	add	sp, #36	; 0x24
   1255c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
   12560:	f7f6 bf6e 	b.w	9440 <bt_init>
	k_work_submit(&bt_dev.init);
   12564:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   12568:	f00d fe26 	bl	201b8 <k_work_submit>
	return 0;
   1256c:	e7a2      	b.n	124b4 <bt_enable+0x24>
		return -EALREADY;
   1256e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   12572:	e79f      	b.n	124b4 <bt_enable+0x24>
   12574:	20008000 	.word	0x20008000
   12578:	0002d83a 	.word	0x0002d83a
   1257c:	0002a398 	.word	0x0002a398
   12580:	20020fac 	.word	0x20020fac
   12584:	000121bd 	.word	0x000121bd
   12588:	20031968 	.word	0x20031968
   1258c:	20009590 	.word	0x20009590
   12590:	0002d853 	.word	0x0002d853
   12594:	20009618 	.word	0x20009618
   12598:	20031d68 	.word	0x20031d68
   1259c:	0002d859 	.word	0x0002d859
   125a0:	0002d85f 	.word	0x0002d85f

000125a4 <bt_is_ready>:
   125a4:	4b02      	ldr	r3, [pc, #8]	; (125b0 <bt_is_ready+0xc>)
   125a6:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   125aa:	f3c0 0080 	ubfx	r0, r0, #2, #1
   125ae:	4770      	bx	lr
   125b0:	200080cc 	.word	0x200080cc

000125b4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   125b4:	4800      	ldr	r0, [pc, #0]	; (125b8 <bt_get_name+0x4>)
   125b6:	4770      	bx	lr
   125b8:	0002bb61 	.word	0x0002bb61

000125bc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   125bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   125be:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   125c0:	2500      	movs	r5, #0
   125c2:	4f09      	ldr	r7, [pc, #36]	; (125e8 <id_find+0x2c>)
   125c4:	79fb      	ldrb	r3, [r7, #7]
   125c6:	b2ec      	uxtb	r4, r5
   125c8:	42a3      	cmp	r3, r4
   125ca:	d802      	bhi.n	125d2 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   125cc:	f06f 0001 	mvn.w	r0, #1
   125d0:	e009      	b.n	125e6 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   125d2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   125d6:	4630      	mov	r0, r6
   125d8:	4439      	add	r1, r7
   125da:	f013 fc1a 	bl	25e12 <bt_addr_le_eq>
   125de:	3501      	adds	r5, #1
   125e0:	2800      	cmp	r0, #0
   125e2:	d0ef      	beq.n	125c4 <id_find+0x8>
   125e4:	4620      	mov	r0, r4
}
   125e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125e8:	20008000 	.word	0x20008000

000125ec <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   125ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   125ee:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   125f0:	460d      	mov	r5, r1
   125f2:	b171      	cbz	r1, 12612 <id_create.constprop.0+0x26>
   125f4:	4628      	mov	r0, r5
   125f6:	4912      	ldr	r1, [pc, #72]	; (12640 <id_create.constprop.0+0x54>)
   125f8:	f013 fc0b 	bl	25e12 <bt_addr_le_eq>
   125fc:	b948      	cbnz	r0, 12612 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   125fe:	4629      	mov	r1, r5
   12600:	4810      	ldr	r0, [pc, #64]	; (12644 <id_create.constprop.0+0x58>)
   12602:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   12606:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12608:	f013 fc10 	bl	25e2c <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   1260c:	2000      	movs	r0, #0
}
   1260e:	b003      	add	sp, #12
   12610:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   12612:	4668      	mov	r0, sp
   12614:	f013 faf5 	bl	25c02 <bt_addr_le_create_static>
			if (err) {
   12618:	2800      	cmp	r0, #0
   1261a:	d1f8      	bne.n	1260e <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   1261c:	4668      	mov	r0, sp
   1261e:	f7ff ffcd 	bl	125bc <id_find>
   12622:	2800      	cmp	r0, #0
   12624:	daf5      	bge.n	12612 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   12626:	4b07      	ldr	r3, [pc, #28]	; (12644 <id_create.constprop.0+0x58>)
   12628:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1262c:	4669      	mov	r1, sp
   1262e:	4418      	add	r0, r3
   12630:	f013 fbfc 	bl	25e2c <bt_addr_le_copy>
		if (addr) {
   12634:	2d00      	cmp	r5, #0
   12636:	d0e9      	beq.n	1260c <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12638:	4601      	mov	r1, r0
   1263a:	4628      	mov	r0, r5
   1263c:	e7e4      	b.n	12608 <id_create.constprop.0+0x1c>
   1263e:	bf00      	nop
   12640:	0002d1b1 	.word	0x0002d1b1
   12644:	20008000 	.word	0x20008000

00012648 <set_random_address>:
{
   12648:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1264a:	2206      	movs	r2, #6
   1264c:	4911      	ldr	r1, [pc, #68]	; (12694 <set_random_address+0x4c>)
   1264e:	4605      	mov	r5, r0
   12650:	f016 feff 	bl	29452 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   12654:	b1c8      	cbz	r0, 1268a <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   12656:	2106      	movs	r1, #6
   12658:	f242 0005 	movw	r0, #8197	; 0x2005
   1265c:	f7ff f8c4 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   12660:	4604      	mov	r4, r0
   12662:	b1a0      	cbz	r0, 1268e <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12664:	2206      	movs	r2, #6
   12666:	4629      	mov	r1, r5
   12668:	300c      	adds	r0, #12
   1266a:	f015 f98a 	bl	27982 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1266e:	2200      	movs	r2, #0
   12670:	4621      	mov	r1, r4
   12672:	f242 0005 	movw	r0, #8197	; 0x2005
   12676:	f7ff f905 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
   1267a:	b938      	cbnz	r0, 1268c <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   1267c:	4805      	ldr	r0, [pc, #20]	; (12694 <set_random_address+0x4c>)
   1267e:	4629      	mov	r1, r5
   12680:	f013 fbcf 	bl	25e22 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   12684:	2301      	movs	r3, #1
   12686:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   1268a:	2000      	movs	r0, #0
}
   1268c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1268e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12692:	e7fb      	b.n	1268c <set_random_address+0x44>
   12694:	20008061 	.word	0x20008061

00012698 <find_rl_conflict>:
{
   12698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1269c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   1269e:	460c      	mov	r4, r1
{
   126a0:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   126a2:	b959      	cbnz	r1, 126bc <find_rl_conflict+0x24>
   126a4:	492b      	ldr	r1, [pc, #172]	; (12754 <find_rl_conflict+0xbc>)
   126a6:	f44f 7357 	mov.w	r3, #860	; 0x35c
   126aa:	4a2b      	ldr	r2, [pc, #172]	; (12758 <find_rl_conflict+0xc0>)
   126ac:	482b      	ldr	r0, [pc, #172]	; (1275c <find_rl_conflict+0xc4>)
   126ae:	f012 f97a 	bl	249a6 <assert_print>
   126b2:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   126b6:	4828      	ldr	r0, [pc, #160]	; (12758 <find_rl_conflict+0xc0>)
   126b8:	f012 f96e 	bl	24998 <assert_post_action>
   126bc:	6808      	ldr	r0, [r1, #0]
   126be:	b948      	cbnz	r0, 126d4 <find_rl_conflict+0x3c>
   126c0:	4927      	ldr	r1, [pc, #156]	; (12760 <find_rl_conflict+0xc8>)
   126c2:	f240 335d 	movw	r3, #861	; 0x35d
   126c6:	4a24      	ldr	r2, [pc, #144]	; (12758 <find_rl_conflict+0xc0>)
   126c8:	4824      	ldr	r0, [pc, #144]	; (1275c <find_rl_conflict+0xc4>)
   126ca:	f012 f96c 	bl	249a6 <assert_print>
   126ce:	f240 315d 	movw	r1, #861	; 0x35d
   126d2:	e7f0      	b.n	126b6 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   126d4:	b94d      	cbnz	r5, 126ea <find_rl_conflict+0x52>
   126d6:	4923      	ldr	r1, [pc, #140]	; (12764 <find_rl_conflict+0xcc>)
   126d8:	f240 335e 	movw	r3, #862	; 0x35e
   126dc:	4a1e      	ldr	r2, [pc, #120]	; (12758 <find_rl_conflict+0xc0>)
   126de:	481f      	ldr	r0, [pc, #124]	; (1275c <find_rl_conflict+0xc4>)
   126e0:	f012 f961 	bl	249a6 <assert_print>
   126e4:	f240 315e 	movw	r1, #862	; 0x35e
   126e8:	e7e5      	b.n	126b6 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   126ea:	7a03      	ldrb	r3, [r0, #8]
   126ec:	075a      	lsls	r2, r3, #29
   126ee:	d509      	bpl.n	12704 <find_rl_conflict+0x6c>
   126f0:	491d      	ldr	r1, [pc, #116]	; (12768 <find_rl_conflict+0xd0>)
   126f2:	f44f 7358 	mov.w	r3, #864	; 0x360
   126f6:	4a18      	ldr	r2, [pc, #96]	; (12758 <find_rl_conflict+0xc0>)
   126f8:	4818      	ldr	r0, [pc, #96]	; (1275c <find_rl_conflict+0xc4>)
   126fa:	f012 f954 	bl	249a6 <assert_print>
   126fe:	f44f 7158 	mov.w	r1, #864	; 0x360
   12702:	e7d8      	b.n	126b6 <find_rl_conflict+0x1e>
	if (conflict->found) {
   12704:	684f      	ldr	r7, [r1, #4]
   12706:	b9f7      	cbnz	r7, 12746 <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   12708:	7a2b      	ldrb	r3, [r5, #8]
   1270a:	075b      	lsls	r3, r3, #29
   1270c:	d51b      	bpl.n	12746 <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1270e:	1c69      	adds	r1, r5, #1
   12710:	3001      	adds	r0, #1
   12712:	f013 fb7e 	bl	25e12 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   12716:	f8d4 8000 	ldr.w	r8, [r4]
   1271a:	2216      	movs	r2, #22
   1271c:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1271e:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   12720:	4668      	mov	r0, sp
   12722:	f016 fee0 	bl	294e6 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   12726:	2210      	movs	r2, #16
   12728:	4669      	mov	r1, sp
   1272a:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   1272e:	f016 fe90 	bl	29452 <memcmp>
   12732:	b158      	cbz	r0, 1274c <find_rl_conflict+0xb4>
   12734:	6820      	ldr	r0, [r4, #0]
   12736:	2210      	movs	r2, #16
   12738:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   1273c:	302a      	adds	r0, #42	; 0x2a
   1273e:	f016 fe88 	bl	29452 <memcmp>
   12742:	b918      	cbnz	r0, 1274c <find_rl_conflict+0xb4>
		conflict->found = resident;
   12744:	6065      	str	r5, [r4, #4]
}
   12746:	b006      	add	sp, #24
   12748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   1274c:	2e00      	cmp	r6, #0
   1274e:	d1f9      	bne.n	12744 <find_rl_conflict+0xac>
   12750:	e7f9      	b.n	12746 <find_rl_conflict+0xae>
   12752:	bf00      	nop
   12754:	0002d8df 	.word	0x0002d8df
   12758:	0002d8b1 	.word	0x0002d8b1
   1275c:	0002b339 	.word	0x0002b339
   12760:	0002d8f7 	.word	0x0002d8f7
   12764:	0002d91a 	.word	0x0002d91a
   12768:	0002d932 	.word	0x0002d932

0001276c <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1276c:	4b08      	ldr	r3, [pc, #32]	; (12790 <bt_id_pending_keys_update+0x24>)
   1276e:	e8d3 2fef 	ldaex	r2, [r3]
   12772:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   12776:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1277a:	2800      	cmp	r0, #0
   1277c:	d1f7      	bne.n	1276e <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1277e:	0413      	lsls	r3, r2, #16
   12780:	d504      	bpl.n	1278c <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   12782:	2200      	movs	r2, #0
   12784:	2002      	movs	r0, #2
   12786:	4903      	ldr	r1, [pc, #12]	; (12794 <bt_id_pending_keys_update+0x28>)
   12788:	f006 b818 	b.w	187bc <bt_keys_foreach_type>
}
   1278c:	4770      	bx	lr
   1278e:	bf00      	nop
   12790:	200080cc 	.word	0x200080cc
   12794:	00025fa9 	.word	0x00025fa9

00012798 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   12798:	2300      	movs	r3, #0
{
   1279a:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1279c:	4905      	ldr	r1, [pc, #20]	; (127b4 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   1279e:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   127a2:	466a      	mov	r2, sp
   127a4:	2002      	movs	r0, #2
   127a6:	f006 f809 	bl	187bc <bt_keys_foreach_type>
}
   127aa:	9801      	ldr	r0, [sp, #4]
   127ac:	b003      	add	sp, #12
   127ae:	f85d fb04 	ldr.w	pc, [sp], #4
   127b2:	bf00      	nop
   127b4:	00012699 	.word	0x00012699

000127b8 <bt_id_add>:
{
   127b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   127ba:	4605      	mov	r5, r0
{
   127bc:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   127be:	b170      	cbz	r0, 127de <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   127c0:	4c59      	ldr	r4, [pc, #356]	; (12928 <bt_id_add+0x170>)
   127c2:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   127c6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   127ca:	b10a      	cbz	r2, 127d0 <bt_id_add+0x18>
   127cc:	429a      	cmp	r2, r3
   127ce:	d208      	bcs.n	127e2 <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   127d0:	3301      	adds	r3, #1
   127d2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   127d6:	7a2b      	ldrb	r3, [r5, #8]
   127d8:	f043 0304 	orr.w	r3, r3, #4
   127dc:	722b      	strb	r3, [r5, #8]
}
   127de:	b007      	add	sp, #28
   127e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   127e2:	2100      	movs	r1, #0
   127e4:	2206      	movs	r2, #6
   127e6:	4608      	mov	r0, r1
   127e8:	f001 fe0c 	bl	14404 <bt_conn_lookup_state_le>
	if (conn) {
   127ec:	4606      	mov	r6, r0
   127ee:	b188      	cbz	r0, 12814 <bt_id_add+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   127f0:	34cc      	adds	r4, #204	; 0xcc
   127f2:	e8d4 3fef 	ldaex	r3, [r4]
   127f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   127fa:	e8c4 3fe2 	stlex	r2, r3, [r4]
   127fe:	2a00      	cmp	r2, #0
   12800:	d1f7      	bne.n	127f2 <bt_id_add+0x3a>
	keys->state |= flag;
   12802:	7a2b      	ldrb	r3, [r5, #8]
   12804:	f043 0301 	orr.w	r3, r3, #1
   12808:	722b      	strb	r3, [r5, #8]
}
   1280a:	b007      	add	sp, #28
   1280c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   12810:	f001 baec 	b.w	13dec <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   12814:	4601      	mov	r1, r0
   12816:	4845      	ldr	r0, [pc, #276]	; (1292c <bt_id_add+0x174>)
   12818:	f000 fbee 	bl	12ff8 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1281c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12820:	b163      	cbz	r3, 1283c <bt_id_add+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   12822:	4630      	mov	r0, r6
   12824:	f013 fb54 	bl	25ed0 <addr_res_enable>
		if (err) {
   12828:	b140      	cbz	r0, 1283c <bt_id_add+0x84>
			LOG_WRN("Failed to disable address resolution");
   1282a:	4b41      	ldr	r3, [pc, #260]	; (12930 <bt_id_add+0x178>)
   1282c:	2202      	movs	r2, #2
   1282e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12832:	4633      	mov	r3, r6
   12834:	9600      	str	r6, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   12836:	4618      	mov	r0, r3
   12838:	493e      	ldr	r1, [pc, #248]	; (12934 <bt_id_add+0x17c>)
   1283a:	e054      	b.n	128e6 <bt_id_add+0x12e>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1283c:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   12840:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   12844:	429a      	cmp	r2, r3
   12846:	d12b      	bne.n	128a0 <bt_id_add+0xe8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   12848:	2600      	movs	r6, #0
   1284a:	4b3b      	ldr	r3, [pc, #236]	; (12938 <bt_id_add+0x180>)
   1284c:	2202      	movs	r2, #2
   1284e:	4630      	mov	r0, r6
   12850:	4938      	ldr	r1, [pc, #224]	; (12934 <bt_id_add+0x17c>)
   12852:	9302      	str	r3, [sp, #8]
   12854:	e9cd 6600 	strd	r6, r6, [sp]
   12858:	4633      	mov	r3, r6
   1285a:	f013 fb2a 	bl	25eb2 <z_log_msg_runtime_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1285e:	4632      	mov	r2, r6
   12860:	4631      	mov	r1, r6
   12862:	f242 0029 	movw	r0, #8233	; 0x2029
   12866:	f7ff f80d 	bl	11884 <bt_hci_cmd_send_sync>
		if (err) {
   1286a:	b130      	cbz	r0, 1287a <bt_id_add+0xc2>
			LOG_ERR("Failed to clear resolution list");
   1286c:	4b33      	ldr	r3, [pc, #204]	; (1293c <bt_id_add+0x184>)
   1286e:	9600      	str	r6, [sp, #0]
   12870:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12874:	4633      	mov	r3, r6
		LOG_ERR("Failed to set privacy mode");
   12876:	2201      	movs	r2, #1
   12878:	e7dd      	b.n	12836 <bt_id_add+0x7e>
		bt_dev.le.rl_entries++;
   1287a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1287e:	3301      	adds	r3, #1
   12880:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   12884:	7a2b      	ldrb	r3, [r5, #8]
   12886:	f043 0304 	orr.w	r3, r3, #4
   1288a:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1288c:	2001      	movs	r0, #1
   1288e:	f013 fb1f 	bl	25ed0 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12892:	2100      	movs	r1, #0
   12894:	482a      	ldr	r0, [pc, #168]	; (12940 <bt_id_add+0x188>)
}
   12896:	b007      	add	sp, #28
   12898:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1289c:	f000 bbac 	b.w	12ff8 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   128a0:	462a      	mov	r2, r5
   128a2:	1c6f      	adds	r7, r5, #1
   128a4:	4639      	mov	r1, r7
   128a6:	f812 0b2a 	ldrb.w	r0, [r2], #42
   128aa:	f013 fac6 	bl	25e3a <hci_id_add>
	if (err) {
   128ae:	4606      	mov	r6, r0
   128b0:	b128      	cbz	r0, 128be <bt_id_add+0x106>
		LOG_ERR("Failed to add IRK to controller");
   128b2:	4b24      	ldr	r3, [pc, #144]	; (12944 <bt_id_add+0x18c>)
		LOG_ERR("Failed to set privacy mode");
   128b4:	9302      	str	r3, [sp, #8]
   128b6:	2300      	movs	r3, #0
   128b8:	e9cd 3300 	strd	r3, r3, [sp]
   128bc:	e7db      	b.n	12876 <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   128be:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   128c2:	3301      	adds	r3, #1
   128c4:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   128c8:	7a2b      	ldrb	r3, [r5, #8]
   128ca:	f043 0304 	orr.w	r3, r3, #4
   128ce:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   128d0:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   128d4:	f013 0304 	ands.w	r3, r3, #4
   128d8:	d108      	bne.n	128ec <bt_id_add+0x134>
		LOG_WRN("Set privacy mode command is not supported");
   128da:	4a1b      	ldr	r2, [pc, #108]	; (12948 <bt_id_add+0x190>)
   128dc:	4915      	ldr	r1, [pc, #84]	; (12934 <bt_id_add+0x17c>)
   128de:	e9cd 3201 	strd	r3, r2, [sp, #4]
   128e2:	2202      	movs	r2, #2
   128e4:	9300      	str	r3, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   128e6:	f013 fae4 	bl	25eb2 <z_log_msg_runtime_create.constprop.0>
		goto done;
   128ea:	e7cf      	b.n	1288c <bt_id_add+0xd4>
	bt_addr_le_copy(&cp.id_addr, addr);
   128ec:	4639      	mov	r1, r7
   128ee:	a804      	add	r0, sp, #16
   128f0:	f013 fa9c 	bl	25e2c <bt_addr_le_copy>
	cp.mode = mode;
   128f4:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   128f6:	2108      	movs	r1, #8
   128f8:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   128fc:	f88d 3017 	strb.w	r3, [sp, #23]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   12900:	f7fe ff72 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   12904:	4604      	mov	r4, r0
   12906:	b160      	cbz	r0, 12922 <bt_id_add+0x16a>
   12908:	2208      	movs	r2, #8
   1290a:	a904      	add	r1, sp, #16
   1290c:	300c      	adds	r0, #12
   1290e:	f015 f838 	bl	27982 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   12912:	4632      	mov	r2, r6
   12914:	4621      	mov	r1, r4
   12916:	f242 004e 	movw	r0, #8270	; 0x204e
   1291a:	f7fe ffb3 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
   1291e:	2800      	cmp	r0, #0
   12920:	d0b4      	beq.n	1288c <bt_id_add+0xd4>
		LOG_ERR("Failed to set privacy mode");
   12922:	4b0a      	ldr	r3, [pc, #40]	; (1294c <bt_id_add+0x194>)
   12924:	e7c6      	b.n	128b4 <bt_id_add+0xfc>
   12926:	bf00      	nop
   12928:	20008000 	.word	0x20008000
   1292c:	00025f27 	.word	0x00025f27
   12930:	0002d967 	.word	0x0002d967
   12934:	0002a3b0 	.word	0x0002a3b0
   12938:	0002d98c 	.word	0x0002d98c
   1293c:	0002d9bd 	.word	0x0002d9bd
   12940:	00025f01 	.word	0x00025f01
   12944:	0002d9dd 	.word	0x0002d9dd
   12948:	0002d9fd 	.word	0x0002d9fd
   1294c:	0002da27 	.word	0x0002da27

00012950 <bt_id_del>:
{
   12950:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   12954:	4605      	mov	r5, r0
   12956:	b3a8      	cbz	r0, 129c4 <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   12958:	4c4c      	ldr	r4, [pc, #304]	; (12a8c <bt_id_del+0x13c>)
   1295a:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1295e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   12962:	b1da      	cbz	r2, 1299c <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   12964:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   12966:	4293      	cmp	r3, r2
   12968:	dc25      	bgt.n	129b6 <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1296a:	2100      	movs	r1, #0
   1296c:	2206      	movs	r2, #6
   1296e:	4608      	mov	r0, r1
   12970:	f001 fd48 	bl	14404 <bt_conn_lookup_state_le>
	if (conn) {
   12974:	4606      	mov	r6, r0
   12976:	b340      	cbz	r0, 129ca <bt_id_del+0x7a>
   12978:	34cc      	adds	r4, #204	; 0xcc
   1297a:	e8d4 3fef 	ldaex	r3, [r4]
   1297e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   12982:	e8c4 3fe2 	stlex	r2, r3, [r4]
   12986:	2a00      	cmp	r2, #0
   12988:	d1f7      	bne.n	1297a <bt_id_del+0x2a>
	keys->state |= flag;
   1298a:	7a2b      	ldrb	r3, [r5, #8]
   1298c:	f043 0302 	orr.w	r3, r3, #2
   12990:	722b      	strb	r3, [r5, #8]
}
   12992:	b004      	add	sp, #16
   12994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   12998:	f001 ba28 	b.w	13dec <bt_conn_unref>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   1299c:	b95b      	cbnz	r3, 129b6 <bt_id_del+0x66>
   1299e:	493c      	ldr	r1, [pc, #240]	; (12a90 <bt_id_del+0x140>)
   129a0:	483c      	ldr	r0, [pc, #240]	; (12a94 <bt_id_del+0x144>)
   129a2:	f240 4323 	movw	r3, #1059	; 0x423
   129a6:	4a3c      	ldr	r2, [pc, #240]	; (12a98 <bt_id_del+0x148>)
   129a8:	f011 fffd 	bl	249a6 <assert_print>
   129ac:	f240 4123 	movw	r1, #1059	; 0x423
   129b0:	4839      	ldr	r0, [pc, #228]	; (12a98 <bt_id_del+0x148>)
   129b2:	f011 fff1 	bl	24998 <assert_post_action>
			bt_dev.le.rl_entries--;
   129b6:	3b01      	subs	r3, #1
   129b8:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   129bc:	7a2b      	ldrb	r3, [r5, #8]
   129be:	f023 0304 	bic.w	r3, r3, #4
   129c2:	722b      	strb	r3, [r5, #8]
}
   129c4:	b004      	add	sp, #16
   129c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   129ca:	4601      	mov	r1, r0
   129cc:	4833      	ldr	r0, [pc, #204]	; (12a9c <bt_id_del+0x14c>)
   129ce:	f000 fb13 	bl	12ff8 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   129d2:	4630      	mov	r0, r6
   129d4:	f013 fa7c 	bl	25ed0 <addr_res_enable>
	if (err) {
   129d8:	4607      	mov	r7, r0
   129da:	b1b8      	cbz	r0, 12a0c <bt_id_del+0xbc>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   129dc:	4b30      	ldr	r3, [pc, #192]	; (12aa0 <bt_id_del+0x150>)
   129de:	9003      	str	r0, [sp, #12]
   129e0:	e9cd 6301 	strd	r6, r3, [sp, #4]
   129e4:	2201      	movs	r2, #1
   129e6:	4633      	mov	r3, r6
   129e8:	4630      	mov	r0, r6
   129ea:	492e      	ldr	r1, [pc, #184]	; (12aa4 <bt_id_del+0x154>)
   129ec:	9600      	str	r6, [sp, #0]
   129ee:	f013 fa60 	bl	25eb2 <z_log_msg_runtime_create.constprop.0>
	if (bt_dev.le.rl_entries) {
   129f2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   129f6:	b113      	cbz	r3, 129fe <bt_id_del+0xae>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   129f8:	2001      	movs	r0, #1
   129fa:	f013 fa69 	bl	25ed0 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   129fe:	2100      	movs	r1, #0
   12a00:	4829      	ldr	r0, [pc, #164]	; (12aa8 <bt_id_del+0x158>)
}
   12a02:	b004      	add	sp, #16
   12a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12a08:	f000 baf6 	b.w	12ff8 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   12a0c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12a10:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   12a14:	429a      	cmp	r2, r3
   12a16:	d20c      	bcs.n	12a32 <bt_id_del+0xe2>
		bt_dev.le.rl_entries--;
   12a18:	3b01      	subs	r3, #1
   12a1a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   12a1e:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12a20:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   12a22:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12a26:	2002      	movs	r0, #2
   12a28:	4920      	ldr	r1, [pc, #128]	; (12aac <bt_id_del+0x15c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   12a2a:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12a2c:	f005 fec6 	bl	187bc <bt_keys_foreach_type>
		goto done;
   12a30:	e7df      	b.n	129f2 <bt_id_del+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   12a32:	2107      	movs	r1, #7
   12a34:	f242 0028 	movw	r0, #8232	; 0x2028
   12a38:	f7fe fed6 	bl	117e8 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   12a3c:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   12a40:	4606      	mov	r6, r0
   12a42:	b950      	cbnz	r0, 12a5a <bt_id_del+0x10a>
		LOG_ERR("Failed to remove IRK from controller");
   12a44:	4b1a      	ldr	r3, [pc, #104]	; (12ab0 <bt_id_del+0x160>)
   12a46:	2201      	movs	r2, #1
   12a48:	9302      	str	r3, [sp, #8]
   12a4a:	2300      	movs	r3, #0
   12a4c:	4915      	ldr	r1, [pc, #84]	; (12aa4 <bt_id_del+0x154>)
   12a4e:	4618      	mov	r0, r3
   12a50:	e9cd 3300 	strd	r3, r3, [sp]
   12a54:	f013 fa2d 	bl	25eb2 <z_log_msg_runtime_create.constprop.0>
		goto done;
   12a58:	e7cb      	b.n	129f2 <bt_id_del+0xa2>
	return net_buf_simple_add(&buf->b, len);
   12a5a:	2107      	movs	r1, #7
   12a5c:	300c      	adds	r0, #12
   12a5e:	f006 fc01 	bl	19264 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   12a62:	4641      	mov	r1, r8
   12a64:	f013 f9e2 	bl	25e2c <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   12a68:	463a      	mov	r2, r7
   12a6a:	4631      	mov	r1, r6
   12a6c:	f242 0028 	movw	r0, #8232	; 0x2028
   12a70:	f7fe ff08 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
   12a74:	2800      	cmp	r0, #0
   12a76:	d1e5      	bne.n	12a44 <bt_id_del+0xf4>
	bt_dev.le.rl_entries--;
   12a78:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12a7c:	3b01      	subs	r3, #1
   12a7e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   12a82:	7a2b      	ldrb	r3, [r5, #8]
   12a84:	f023 0304 	bic.w	r3, r3, #4
   12a88:	722b      	strb	r3, [r5, #8]
   12a8a:	e7b2      	b.n	129f2 <bt_id_del+0xa2>
   12a8c:	20008000 	.word	0x20008000
   12a90:	0002da42 	.word	0x0002da42
   12a94:	0002b339 	.word	0x0002b339
   12a98:	0002d8b1 	.word	0x0002d8b1
   12a9c:	00025f27 	.word	0x00025f27
   12aa0:	0002da5b 	.word	0x0002da5b
   12aa4:	0002a3b0 	.word	0x0002a3b0
   12aa8:	00025f01 	.word	0x00025f01
   12aac:	00025e9d 	.word	0x00025e9d
   12ab0:	0002da88 	.word	0x0002da88

00012ab4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   12ab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12ab6:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   12ab8:	4604      	mov	r4, r0
   12aba:	b920      	cbnz	r0, 12ac6 <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   12abc:	b31d      	cbz	r5, 12b06 <bt_id_create+0x52>
			return -EINVAL;
   12abe:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   12ac2:	b004      	add	sp, #16
   12ac4:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   12ac6:	4921      	ldr	r1, [pc, #132]	; (12b4c <bt_id_create+0x98>)
   12ac8:	f013 f9a3 	bl	25e12 <bt_addr_le_eq>
   12acc:	2800      	cmp	r0, #0
   12ace:	d1f5      	bne.n	12abc <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   12ad0:	7823      	ldrb	r3, [r4, #0]
   12ad2:	2b01      	cmp	r3, #1
   12ad4:	d104      	bne.n	12ae0 <bt_id_create+0x2c>
   12ad6:	79a3      	ldrb	r3, [r4, #6]
   12ad8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12adc:	2bc0      	cmp	r3, #192	; 0xc0
   12ade:	d00a      	beq.n	12af6 <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   12ae0:	4b1b      	ldr	r3, [pc, #108]	; (12b50 <bt_id_create+0x9c>)
   12ae2:	2201      	movs	r2, #1
   12ae4:	9302      	str	r3, [sp, #8]
   12ae6:	2300      	movs	r3, #0
   12ae8:	491a      	ldr	r1, [pc, #104]	; (12b54 <bt_id_create+0xa0>)
   12aea:	4618      	mov	r0, r3
   12aec:	e9cd 3300 	strd	r3, r3, [sp]
   12af0:	f013 f9df 	bl	25eb2 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   12af4:	e7e3      	b.n	12abe <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   12af6:	4620      	mov	r0, r4
   12af8:	f7ff fd60 	bl	125bc <id_find>
   12afc:	2800      	cmp	r0, #0
   12afe:	dbdd      	blt.n	12abc <bt_id_create+0x8>
			return -EALREADY;
   12b00:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12b04:	e7dd      	b.n	12ac2 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   12b06:	4d14      	ldr	r5, [pc, #80]	; (12b58 <bt_id_create+0xa4>)
   12b08:	79eb      	ldrb	r3, [r5, #7]
   12b0a:	2b01      	cmp	r3, #1
   12b0c:	d01a      	beq.n	12b44 <bt_id_create+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12b0e:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   12b12:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12b16:	07db      	lsls	r3, r3, #31
   12b18:	d50b      	bpl.n	12b32 <bt_id_create+0x7e>
	new_id = bt_dev.id_count;
   12b1a:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   12b1c:	4621      	mov	r1, r4
   12b1e:	4630      	mov	r0, r6
   12b20:	f7ff fd64 	bl	125ec <id_create.constprop.0>
	if (err) {
   12b24:	2800      	cmp	r0, #0
   12b26:	d1cc      	bne.n	12ac2 <bt_id_create+0xe>
		bt_dev.id_count++;
   12b28:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   12b2a:	4630      	mov	r0, r6
		bt_dev.id_count++;
   12b2c:	3301      	adds	r3, #1
   12b2e:	71eb      	strb	r3, [r5, #7]
	return new_id;
   12b30:	e7c7      	b.n	12ac2 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   12b32:	2c00      	cmp	r4, #0
   12b34:	d0c3      	beq.n	12abe <bt_id_create+0xa>
   12b36:	4620      	mov	r0, r4
   12b38:	4904      	ldr	r1, [pc, #16]	; (12b4c <bt_id_create+0x98>)
   12b3a:	f013 f96a 	bl	25e12 <bt_addr_le_eq>
   12b3e:	2800      	cmp	r0, #0
   12b40:	d0eb      	beq.n	12b1a <bt_id_create+0x66>
   12b42:	e7bc      	b.n	12abe <bt_id_create+0xa>
		return -ENOMEM;
   12b44:	f06f 000b 	mvn.w	r0, #11
   12b48:	e7bb      	b.n	12ac2 <bt_id_create+0xe>
   12b4a:	bf00      	nop
   12b4c:	0002d1b1 	.word	0x0002d1b1
   12b50:	0002daad 	.word	0x0002daad
   12b54:	0002a3b0 	.word	0x0002a3b0
   12b58:	20008000 	.word	0x20008000

00012b5c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   12b5c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   12b5e:	4604      	mov	r4, r0
{
   12b60:	b086      	sub	sp, #24
	CHECKIF(addr == NULL) {
   12b62:	b958      	cbnz	r0, 12b7c <bt_id_read_public_addr+0x20>
		LOG_WRN("Invalid input parameters");
   12b64:	4b1d      	ldr	r3, [pc, #116]	; (12bdc <bt_id_read_public_addr+0x80>)
   12b66:	2202      	movs	r2, #2
   12b68:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12b6c:	4603      	mov	r3, r0
   12b6e:	491c      	ldr	r1, [pc, #112]	; (12be0 <bt_id_read_public_addr+0x84>)
   12b70:	9000      	str	r0, [sp, #0]
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   12b72:	f013 f99e 	bl	25eb2 <z_log_msg_runtime_create.constprop.0>
		return 0U;
   12b76:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   12b78:	b006      	add	sp, #24
   12b7a:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   12b7c:	2100      	movs	r1, #0
   12b7e:	f241 0009 	movw	r0, #4105	; 0x1009
   12b82:	aa05      	add	r2, sp, #20
   12b84:	f7fe fe7e 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
   12b88:	4606      	mov	r6, r0
   12b8a:	b140      	cbz	r0, 12b9e <bt_id_read_public_addr+0x42>
		LOG_WRN("Failed to read public address");
   12b8c:	4b15      	ldr	r3, [pc, #84]	; (12be4 <bt_id_read_public_addr+0x88>)
   12b8e:	2202      	movs	r2, #2
   12b90:	9302      	str	r3, [sp, #8]
   12b92:	2300      	movs	r3, #0
   12b94:	4912      	ldr	r1, [pc, #72]	; (12be0 <bt_id_read_public_addr+0x84>)
   12b96:	4618      	mov	r0, r3
   12b98:	e9cd 3300 	strd	r3, r3, [sp]
   12b9c:	e7e9      	b.n	12b72 <bt_id_read_public_addr+0x16>
	rp = (void *)rsp->data;
   12b9e:	9b05      	ldr	r3, [sp, #20]
   12ba0:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   12ba2:	68dd      	ldr	r5, [r3, #12]
   12ba4:	4910      	ldr	r1, [pc, #64]	; (12be8 <bt_id_read_public_addr+0x8c>)
   12ba6:	3501      	adds	r5, #1
   12ba8:	4628      	mov	r0, r5
   12baa:	f016 fc52 	bl	29452 <memcmp>
   12bae:	b918      	cbnz	r0, 12bb8 <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   12bb0:	9805      	ldr	r0, [sp, #20]
   12bb2:	f006 fa35 	bl	19020 <net_buf_unref>
		return 0U;
   12bb6:	e7de      	b.n	12b76 <bt_id_read_public_addr+0x1a>
   12bb8:	2206      	movs	r2, #6
   12bba:	4628      	mov	r0, r5
   12bbc:	490b      	ldr	r1, [pc, #44]	; (12bec <bt_id_read_public_addr+0x90>)
   12bbe:	f016 fc48 	bl	29452 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   12bc2:	2800      	cmp	r0, #0
   12bc4:	d0f4      	beq.n	12bb0 <bt_id_read_public_addr+0x54>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   12bc6:	4629      	mov	r1, r5
   12bc8:	1c60      	adds	r0, r4, #1
   12bca:	f013 f92a 	bl	25e22 <bt_addr_copy>
	net_buf_unref(rsp);
   12bce:	9805      	ldr	r0, [sp, #20]
	addr->type = BT_ADDR_LE_PUBLIC;
   12bd0:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   12bd2:	f006 fa25 	bl	19020 <net_buf_unref>
	return 1U;
   12bd6:	2001      	movs	r0, #1
   12bd8:	e7ce      	b.n	12b78 <bt_id_read_public_addr+0x1c>
   12bda:	bf00      	nop
   12bdc:	0002dadb 	.word	0x0002dadb
   12be0:	0002a3b0 	.word	0x0002a3b0
   12be4:	0002daf4 	.word	0x0002daf4
   12be8:	0002d1be 	.word	0x0002d1be
   12bec:	0002d1b8 	.word	0x0002d1b8

00012bf0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   12bf0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   12bf2:	4668      	mov	r0, sp
   12bf4:	f7ff ffb2 	bl	12b5c <bt_id_read_public_addr>
   12bf8:	4b04      	ldr	r3, [pc, #16]	; (12c0c <bt_setup_public_id_addr+0x1c>)
   12bfa:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   12bfc:	b118      	cbz	r0, 12c06 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   12bfe:	4669      	mov	r1, sp
   12c00:	2000      	movs	r0, #0
   12c02:	f7ff fcf3 	bl	125ec <id_create.constprop.0>
}
   12c06:	b003      	add	sp, #12
   12c08:	f85d fb04 	ldr.w	pc, [sp], #4
   12c0c:	20008000 	.word	0x20008000

00012c10 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   12c10:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12c12:	4b25      	ldr	r3, [pc, #148]	; (12ca8 <bt_read_static_addr+0x98>)
{
   12c14:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12c16:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   12c1a:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12c1c:	f013 0301 	ands.w	r3, r3, #1
{
   12c20:	b087      	sub	sp, #28
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12c22:	d10c      	bne.n	12c3e <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   12c24:	4a21      	ldr	r2, [pc, #132]	; (12cac <bt_read_static_addr+0x9c>)
   12c26:	9202      	str	r2, [sp, #8]
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   12c28:	2202      	movs	r2, #2
   12c2a:	4618      	mov	r0, r3
   12c2c:	e9cd 3300 	strd	r3, r3, [sp]
   12c30:	491f      	ldr	r1, [pc, #124]	; (12cb0 <bt_read_static_addr+0xa0>)
   12c32:	f013 f93e 	bl	25eb2 <z_log_msg_runtime_create.constprop.0>
		return 0;
   12c36:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   12c38:	4620      	mov	r0, r4
   12c3a:	b007      	add	sp, #28
   12c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   12c3e:	2100      	movs	r1, #0
   12c40:	f64f 4009 	movw	r0, #64521	; 0xfc09
   12c44:	aa05      	add	r2, sp, #20
   12c46:	f7fe fe1d 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
   12c4a:	4603      	mov	r3, r0
   12c4c:	b118      	cbz	r0, 12c56 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   12c4e:	4b19      	ldr	r3, [pc, #100]	; (12cb4 <bt_read_static_addr+0xa4>)
   12c50:	9302      	str	r3, [sp, #8]
   12c52:	2300      	movs	r3, #0
   12c54:	e7e8      	b.n	12c28 <bt_read_static_addr+0x18>
	rp = (void *)rsp->data;
   12c56:	9805      	ldr	r0, [sp, #20]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   12c58:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   12c5a:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   12c5c:	7854      	ldrb	r4, [r2, #1]
   12c5e:	3202      	adds	r2, #2
   12c60:	42b4      	cmp	r4, r6
   12c62:	bf28      	it	cs
   12c64:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   12c66:	429c      	cmp	r4, r3
   12c68:	dc0e      	bgt.n	12c88 <bt_read_static_addr+0x78>
	net_buf_unref(rsp);
   12c6a:	f006 f9d9 	bl	19020 <net_buf_unref>
	if (!cnt) {
   12c6e:	2c00      	cmp	r4, #0
   12c70:	d1e2      	bne.n	12c38 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   12c72:	4b11      	ldr	r3, [pc, #68]	; (12cb8 <bt_read_static_addr+0xa8>)
   12c74:	2202      	movs	r2, #2
   12c76:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12c7a:	4620      	mov	r0, r4
   12c7c:	4623      	mov	r3, r4
   12c7e:	490c      	ldr	r1, [pc, #48]	; (12cb0 <bt_read_static_addr+0xa0>)
   12c80:	9400      	str	r4, [sp, #0]
   12c82:	f013 f916 	bl	25eb2 <z_log_msg_runtime_create.constprop.0>
   12c86:	e7d7      	b.n	12c38 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12c88:	4611      	mov	r1, r2
   12c8a:	fb07 5603 	mla	r6, r7, r3, r5
   12c8e:	f102 0c14 	add.w	ip, r2, #20
   12c92:	f851 eb04 	ldr.w	lr, [r1], #4
   12c96:	4561      	cmp	r1, ip
   12c98:	f846 eb04 	str.w	lr, [r6], #4
   12c9c:	d1f9      	bne.n	12c92 <bt_read_static_addr+0x82>
   12c9e:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   12ca0:	3301      	adds	r3, #1
   12ca2:	8031      	strh	r1, [r6, #0]
   12ca4:	3216      	adds	r2, #22
   12ca6:	e7de      	b.n	12c66 <bt_read_static_addr+0x56>
   12ca8:	20008000 	.word	0x20008000
   12cac:	0002db12 	.word	0x0002db12
   12cb0:	0002a3b0 	.word	0x0002a3b0
   12cb4:	0002db3e 	.word	0x0002db3e
   12cb8:	0002db5e 	.word	0x0002db5e

00012cbc <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   12cbc:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   12cbe:	4d15      	ldr	r5, [pc, #84]	; (12d14 <bt_setup_random_id_addr+0x58>)
{
   12cc0:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   12cc2:	79ec      	ldrb	r4, [r5, #7]
   12cc4:	b92c      	cbnz	r4, 12cd2 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   12cc6:	2101      	movs	r1, #1
   12cc8:	a802      	add	r0, sp, #8
   12cca:	f7ff ffa1 	bl	12c10 <bt_read_static_addr>
   12cce:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   12cd0:	b9c0      	cbnz	r0, 12d04 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   12cd2:	2100      	movs	r1, #0
   12cd4:	4608      	mov	r0, r1
}
   12cd6:	b008      	add	sp, #32
   12cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   12cdc:	f7ff beea 	b.w	12ab4 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   12ce0:	ab02      	add	r3, sp, #8
   12ce2:	fb06 3102 	mla	r1, r6, r2, r3
   12ce6:	f10d 0001 	add.w	r0, sp, #1
   12cea:	f013 f89a 	bl	25e22 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   12cee:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   12cf0:	4669      	mov	r1, sp
   12cf2:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   12cf4:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   12cf8:	f7ff fc78 	bl	125ec <id_create.constprop.0>
				if (err) {
   12cfc:	3401      	adds	r4, #1
   12cfe:	b110      	cbz	r0, 12d06 <bt_setup_random_id_addr+0x4a>
}
   12d00:	b008      	add	sp, #32
   12d02:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   12d04:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   12d06:	79eb      	ldrb	r3, [r5, #7]
   12d08:	b2e2      	uxtb	r2, r4
   12d0a:	4293      	cmp	r3, r2
   12d0c:	d8e8      	bhi.n	12ce0 <bt_setup_random_id_addr+0x24>
			return 0;
   12d0e:	2000      	movs	r0, #0
   12d10:	e7f6      	b.n	12d00 <bt_setup_random_id_addr+0x44>
   12d12:	bf00      	nop
   12d14:	20008000 	.word	0x20008000

00012d18 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   12d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d1c:	4690      	mov	r8, r2
   12d1e:	460e      	mov	r6, r1
   12d20:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   12d22:	4602      	mov	r2, r0
   12d24:	2800      	cmp	r0, #0
   12d26:	d04b      	beq.n	12dc0 <bt_id_set_adv_own_addr+0xa8>
   12d28:	2b00      	cmp	r3, #0
   12d2a:	d049      	beq.n	12dc0 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   12d2c:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   12d2e:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   12d30:	d531      	bpl.n	12d96 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   12d32:	4f25      	ldr	r7, [pc, #148]	; (12dc8 <bt_id_set_adv_own_addr+0xb0>)
   12d34:	f1b8 0f00 	cmp.w	r8, #0
   12d38:	d013      	beq.n	12d62 <bt_id_set_adv_own_addr+0x4a>
   12d3a:	0688      	lsls	r0, r1, #26
   12d3c:	d40a      	bmi.n	12d54 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   12d3e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   12d42:	5cfb      	ldrb	r3, [r7, r3]
   12d44:	2b01      	cmp	r3, #1
   12d46:	d015      	beq.n	12d74 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   12d48:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   12d4a:	06b2      	lsls	r2, r6, #26
   12d4c:	d50f      	bpl.n	12d6e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   12d4e:	f043 0302 	orr.w	r3, r3, #2
   12d52:	e00b      	b.n	12d6c <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   12d54:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   12d58:	0659      	lsls	r1, r3, #25
   12d5a:	d4f0      	bmi.n	12d3e <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   12d5c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12d60:	e006      	b.n	12d70 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   12d62:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   12d66:	5cfb      	ldrb	r3, [r7, r3]
   12d68:	2b01      	cmp	r3, #1
   12d6a:	d003      	beq.n	12d74 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   12d6c:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   12d6e:	2000      	movs	r0, #0
}
   12d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   12d74:	2107      	movs	r1, #7
   12d76:	fb01 7104 	mla	r1, r1, r4, r7
   12d7a:	4610      	mov	r0, r2
   12d7c:	3101      	adds	r1, #1
   12d7e:	f013 f8f0 	bl	25f62 <bt_id_set_adv_random_addr>
				if (err) {
   12d82:	2800      	cmp	r0, #0
   12d84:	d1f4      	bne.n	12d70 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   12d86:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   12d8a:	5d3b      	ldrb	r3, [r7, r4]
   12d8c:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   12d8e:	f1b8 0f00 	cmp.w	r8, #0
   12d92:	d0ec      	beq.n	12d6e <bt_id_set_adv_own_addr+0x56>
   12d94:	e7d9      	b.n	12d4a <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   12d96:	074b      	lsls	r3, r1, #29
   12d98:	d50e      	bpl.n	12db8 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   12d9a:	4e0b      	ldr	r6, [pc, #44]	; (12dc8 <bt_id_set_adv_own_addr+0xb0>)
   12d9c:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   12da0:	5df3      	ldrb	r3, [r6, r7]
   12da2:	2b01      	cmp	r3, #1
   12da4:	d1e2      	bne.n	12d6c <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   12da6:	2107      	movs	r1, #7
   12da8:	fb11 3104 	smlabb	r1, r1, r4, r3
   12dac:	4431      	add	r1, r6
   12dae:	f013 f8d8 	bl	25f62 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   12db2:	5df3      	ldrb	r3, [r6, r7]
   12db4:	702b      	strb	r3, [r5, #0]
		if (err) {
   12db6:	e7db      	b.n	12d70 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   12db8:	f013 f8db 	bl	25f72 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   12dbc:	2301      	movs	r3, #1
   12dbe:	e7f9      	b.n	12db4 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   12dc0:	f06f 0015 	mvn.w	r0, #21
   12dc4:	e7d4      	b.n	12d70 <bt_id_set_adv_own_addr+0x58>
   12dc6:	bf00      	nop
   12dc8:	20008000 	.word	0x20008000

00012dcc <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   12dcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   12dce:	4e13      	ldr	r6, [pc, #76]	; (12e1c <bt_id_init+0x50>)
   12dd0:	79f5      	ldrb	r5, [r6, #7]
   12dd2:	b11d      	cbz	r5, 12ddc <bt_id_init+0x10>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   12dd4:	2400      	movs	r4, #0
}
   12dd6:	4620      	mov	r0, r4
   12dd8:	b004      	add	sp, #16
   12dda:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_setup_public_id_addr();
   12ddc:	f7ff ff08 	bl	12bf0 <bt_setup_public_id_addr>
		if (err) {
   12de0:	4604      	mov	r4, r0
   12de2:	b150      	cbz	r0, 12dfa <bt_id_init+0x2e>
			LOG_ERR("Unable to set identity address");
   12de4:	4b0e      	ldr	r3, [pc, #56]	; (12e20 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   12de6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   12dea:	2201      	movs	r2, #1
   12dec:	462b      	mov	r3, r5
   12dee:	4628      	mov	r0, r5
   12df0:	490c      	ldr	r1, [pc, #48]	; (12e24 <bt_id_init+0x58>)
   12df2:	9500      	str	r5, [sp, #0]
   12df4:	f013 f85d 	bl	25eb2 <z_log_msg_runtime_create.constprop.0>
			return err;
   12df8:	e7ed      	b.n	12dd6 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   12dfa:	79f5      	ldrb	r5, [r6, #7]
   12dfc:	2d00      	cmp	r5, #0
   12dfe:	d1e9      	bne.n	12dd4 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   12e00:	f7ff ff5c 	bl	12cbc <bt_setup_random_id_addr>
		if (err) {
   12e04:	4604      	mov	r4, r0
   12e06:	2800      	cmp	r0, #0
   12e08:	d1ec      	bne.n	12de4 <bt_id_init+0x18>
		err = set_random_address(&bt_dev.id_addr[0].a);
   12e0a:	1c70      	adds	r0, r6, #1
   12e0c:	f7ff fc1c 	bl	12648 <set_random_address>
		if (err) {
   12e10:	4604      	mov	r4, r0
   12e12:	2800      	cmp	r0, #0
   12e14:	d0de      	beq.n	12dd4 <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   12e16:	4b04      	ldr	r3, [pc, #16]	; (12e28 <bt_id_init+0x5c>)
   12e18:	e7e5      	b.n	12de6 <bt_id_init+0x1a>
   12e1a:	bf00      	nop
   12e1c:	20008000 	.word	0x20008000
   12e20:	0002db87 	.word	0x0002db87
   12e24:	0002a3b0 	.word	0x0002a3b0
   12e28:	0002dba6 	.word	0x0002dba6

00012e2c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   12e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e30:	460c      	mov	r4, r1
   12e32:	b087      	sub	sp, #28
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   12e34:	2120      	movs	r1, #32
{
   12e36:	4692      	mov	sl, r2
   12e38:	9004      	str	r0, [sp, #16]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   12e3a:	f7fe fcd5 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   12e3e:	4605      	mov	r5, r0
   12e40:	2800      	cmp	r0, #0
   12e42:	d05a      	beq.n	12efa <hci_set_ad+0xce>
   12e44:	2120      	movs	r1, #32
   12e46:	300c      	adds	r0, #12
   12e48:	f006 fa0c 	bl	19264 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   12e4c:	2220      	movs	r2, #32
   12e4e:	4681      	mov	r9, r0
   12e50:	2100      	movs	r1, #0
   12e52:	f016 fb48 	bl	294e6 <memset>
	uint8_t set_data_len = 0;
   12e56:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   12e58:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   12e5c:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   12e60:	2300      	movs	r3, #0
   12e62:	f8d4 8000 	ldr.w	r8, [r4]
   12e66:	6862      	ldr	r2, [r4, #4]
   12e68:	4293      	cmp	r3, r2
   12e6a:	d30c      	bcc.n	12e86 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   12e6c:	3408      	adds	r4, #8
   12e6e:	45a2      	cmp	sl, r4
   12e70:	d1f6      	bne.n	12e60 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   12e72:	2200      	movs	r2, #0
   12e74:	4629      	mov	r1, r5
   12e76:	9804      	ldr	r0, [sp, #16]
	*data_len = set_data_len;
   12e78:	f889 6000 	strb.w	r6, [r9]
}
   12e7c:	b007      	add	sp, #28
   12e7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   12e82:	f7fe bcff 	b.w	11884 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   12e86:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   12e8a:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   12e8c:	1811      	adds	r1, r2, r0
   12e8e:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   12e90:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   12e94:	d91a      	bls.n	12ecc <hci_set_ad+0xa0>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   12e96:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   12e9a:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   12e9e:	d101      	bne.n	12ea4 <hci_set_ad+0x78>
   12ea0:	2a00      	cmp	r2, #0
   12ea2:	dc11      	bgt.n	12ec8 <hci_set_ad+0x9c>
					LOG_ERR("Too big advertising data");
   12ea4:	4b16      	ldr	r3, [pc, #88]	; (12f00 <hci_set_ad+0xd4>)
   12ea6:	2201      	movs	r2, #1
   12ea8:	9302      	str	r3, [sp, #8]
   12eaa:	2300      	movs	r3, #0
   12eac:	4915      	ldr	r1, [pc, #84]	; (12f04 <hci_set_ad+0xd8>)
   12eae:	4618      	mov	r0, r3
   12eb0:	e9cd 3300 	strd	r3, r3, [sp]
   12eb4:	f013 f8ac 	bl	26010 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   12eb8:	4628      	mov	r0, r5
   12eba:	f006 f8b1 	bl	19020 <net_buf_unref>
					return -EINVAL;
   12ebe:	f06f 0015 	mvn.w	r0, #21
}
   12ec2:	b007      	add	sp, #28
   12ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   12ec8:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   12ecc:	b2d7      	uxtb	r7, r2
   12ece:	1c79      	adds	r1, r7, #1
   12ed0:	f80b 1006 	strb.w	r1, [fp, r6]
   12ed4:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   12ed6:	b2c9      	uxtb	r1, r1
   12ed8:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12edc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   12ee0:	fa5b f080 	uxtab	r0, fp, r0
   12ee4:	9305      	str	r3, [sp, #20]
			set_data_len += len;
   12ee6:	3702      	adds	r7, #2
   12ee8:	f016 fac3 	bl	29472 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   12eec:	9b05      	ldr	r3, [sp, #20]
			set_data_len += len;
   12eee:	4437      	add	r7, r6
   12ef0:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   12ef2:	3301      	adds	r3, #1
   12ef4:	f108 0808 	add.w	r8, r8, #8
   12ef8:	e7b5      	b.n	12e66 <hci_set_ad+0x3a>
		return -ENOBUFS;
   12efa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12efe:	e7e0      	b.n	12ec2 <hci_set_ad+0x96>
   12f00:	0002dbc9 	.word	0x0002dbc9
   12f04:	0002a368 	.word	0x0002a368

00012f08 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   12f08:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   12f0a:	4605      	mov	r5, r0
   12f0c:	4b16      	ldr	r3, [pc, #88]	; (12f68 <le_adv_start_add_conn+0x60>)
   12f0e:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   12f12:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   12f14:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   12f18:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   12f1a:	2207      	movs	r2, #7
   12f1c:	4628      	mov	r0, r5
   12f1e:	4913      	ldr	r1, [pc, #76]	; (12f6c <le_adv_start_add_conn+0x64>)
   12f20:	f016 fa97 	bl	29452 <memcmp>
   12f24:	4603      	mov	r3, r0
   12f26:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   12f28:	b96b      	cbnz	r3, 12f46 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   12f2a:	4911      	ldr	r1, [pc, #68]	; (12f70 <le_adv_start_add_conn+0x68>)
   12f2c:	f001 fa0c 	bl	14348 <bt_conn_add_le>
		if (!conn) {
   12f30:	4604      	mov	r4, r0
   12f32:	b910      	cbnz	r0, 12f3a <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   12f34:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   12f38:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   12f3a:	2104      	movs	r1, #4
   12f3c:	f000 ff8e 	bl	13e5c <bt_conn_set_state>
		return 0;
   12f40:	2000      	movs	r0, #0
		*out_conn = conn;
   12f42:	6034      	str	r4, [r6, #0]
   12f44:	e7f8      	b.n	12f38 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   12f46:	4629      	mov	r1, r5
   12f48:	f001 fa36 	bl	143b8 <bt_conn_exists_le>
   12f4c:	b940      	cbnz	r0, 12f60 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   12f4e:	7820      	ldrb	r0, [r4, #0]
   12f50:	4629      	mov	r1, r5
   12f52:	f001 f9f9 	bl	14348 <bt_conn_add_le>
	if (!conn) {
   12f56:	4604      	mov	r4, r0
   12f58:	2800      	cmp	r0, #0
   12f5a:	d0eb      	beq.n	12f34 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   12f5c:	2105      	movs	r1, #5
   12f5e:	e7ed      	b.n	12f3c <le_adv_start_add_conn+0x34>
		return -EINVAL;
   12f60:	f06f 0015 	mvn.w	r0, #21
   12f64:	e7e8      	b.n	12f38 <le_adv_start_add_conn+0x30>
   12f66:	bf00      	nop
   12f68:	20008000 	.word	0x20008000
   12f6c:	0002d1b1 	.word	0x0002d1b1
   12f70:	0002d1aa 	.word	0x0002d1aa

00012f74 <valid_adv_param>:
{
   12f74:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   12f76:	6843      	ldr	r3, [r0, #4]
{
   12f78:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   12f7a:	0558      	lsls	r0, r3, #21
   12f7c:	d501      	bpl.n	12f82 <valid_adv_param+0xe>
		return false;
   12f7e:	2000      	movs	r0, #0
}
   12f80:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   12f82:	6922      	ldr	r2, [r4, #16]
   12f84:	b10a      	cbz	r2, 12f8a <valid_adv_param+0x16>
   12f86:	07d9      	lsls	r1, r3, #31
   12f88:	d5f9      	bpl.n	12f7e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   12f8a:	4d19      	ldr	r5, [pc, #100]	; (12ff0 <valid_adv_param+0x7c>)
   12f8c:	7820      	ldrb	r0, [r4, #0]
   12f8e:	79eb      	ldrb	r3, [r5, #7]
   12f90:	4283      	cmp	r3, r0
   12f92:	d9f4      	bls.n	12f7e <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   12f94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   12f98:	2207      	movs	r2, #7
   12f9a:	4916      	ldr	r1, [pc, #88]	; (12ff4 <valid_adv_param+0x80>)
   12f9c:	4428      	add	r0, r5
   12f9e:	f016 fa58 	bl	29452 <memcmp>
	if (param->id >= bt_dev.id_count ||
   12fa2:	2800      	cmp	r0, #0
   12fa4:	d0eb      	beq.n	12f7e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   12fa6:	6860      	ldr	r0, [r4, #4]
   12fa8:	07c2      	lsls	r2, r0, #31
   12faa:	d406      	bmi.n	12fba <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   12fac:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   12fb0:	2b08      	cmp	r3, #8
   12fb2:	d802      	bhi.n	12fba <valid_adv_param+0x46>
   12fb4:	68a3      	ldr	r3, [r4, #8]
   12fb6:	2b9f      	cmp	r3, #159	; 0x9f
   12fb8:	d9e1      	bls.n	12f7e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   12fba:	f010 0f30 	tst.w	r0, #48	; 0x30
   12fbe:	d002      	beq.n	12fc6 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   12fc0:	6923      	ldr	r3, [r4, #16]
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	d0db      	beq.n	12f7e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   12fc6:	06c3      	lsls	r3, r0, #27
   12fc8:	d401      	bmi.n	12fce <valid_adv_param+0x5a>
   12fca:	6923      	ldr	r3, [r4, #16]
   12fcc:	b943      	cbnz	r3, 12fe0 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   12fce:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   12fd2:	429a      	cmp	r2, r3
   12fd4:	d8d3      	bhi.n	12f7e <valid_adv_param+0xa>
   12fd6:	2a1f      	cmp	r2, #31
   12fd8:	d9d1      	bls.n	12f7e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   12fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   12fde:	d8ce      	bhi.n	12f7e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   12fe0:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   12fe4:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   12fe8:	bf18      	it	ne
   12fea:	2001      	movne	r0, #1
   12fec:	e7c8      	b.n	12f80 <valid_adv_param+0xc>
   12fee:	bf00      	nop
   12ff0:	20008000 	.word	0x20008000
   12ff4:	0002d1b1 	.word	0x0002d1b1

00012ff8 <bt_le_ext_adv_foreach>:
{
   12ff8:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   12ffa:	4801      	ldr	r0, [pc, #4]	; (13000 <bt_le_ext_adv_foreach+0x8>)
   12ffc:	4718      	bx	r3
   12ffe:	bf00      	nop
   13000:	20008018 	.word	0x20008018

00013004 <bt_le_adv_lookup_legacy>:
}
   13004:	4800      	ldr	r0, [pc, #0]	; (13008 <bt_le_adv_lookup_legacy+0x4>)
   13006:	4770      	bx	lr
   13008:	20008018 	.word	0x20008018

0001300c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1300c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13010:	b08d      	sub	sp, #52	; 0x34
   13012:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   13014:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   13016:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   1301a:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1301c:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13020:	4890      	ldr	r0, [pc, #576]	; (13264 <bt_le_adv_start_legacy+0x258>)
   13022:	bf18      	it	ne
   13024:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   13026:	9307      	str	r3, [sp, #28]
   13028:	f012 ffdd 	bl	25fe6 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1302c:	0747      	lsls	r7, r0, #29
{
   1302e:	460d      	mov	r5, r1
   13030:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13032:	f140 810d 	bpl.w	13250 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   13036:	4608      	mov	r0, r1
   13038:	f7ff ff9c 	bl	12f74 <valid_adv_param>
   1303c:	b928      	cbnz	r0, 1304a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1303e:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   13042:	4620      	mov	r0, r4
   13044:	b00d      	add	sp, #52	; 0x34
   13046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1304a:	4628      	mov	r0, r5
   1304c:	f012 ffa8 	bl	25fa0 <bt_id_adv_random_addr_check>
   13050:	4681      	mov	r9, r0
   13052:	2800      	cmp	r0, #0
   13054:	d0f3      	beq.n	1303e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   13056:	f106 0810 	add.w	r8, r6, #16
   1305a:	4640      	mov	r0, r8
   1305c:	f012 ffc3 	bl	25fe6 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13060:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   13064:	0600      	lsls	r0, r0, #24
   13066:	f100 80f6 	bmi.w	13256 <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   1306a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1306e:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   13072:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   13074:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   13076:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1307a:	68eb      	ldr	r3, [r5, #12]
   1307c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   13080:	f012 ffa2 	bl	25fc8 <get_adv_channel_map>
	if (adv->id != param->id) {
   13084:	7832      	ldrb	r2, [r6, #0]
   13086:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   13088:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   1308c:	429a      	cmp	r2, r3
   1308e:	d004      	beq.n	1309a <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13090:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   13094:	4873      	ldr	r0, [pc, #460]	; (13264 <bt_le_adv_start_legacy+0x258>)
   13096:	f012 ffa9 	bl	25fec <atomic_and>
	adv->id = param->id;
   1309a:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   1309c:	4a72      	ldr	r2, [pc, #456]	; (13268 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   1309e:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   130a0:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   130a4:	4630      	mov	r0, r6
   130a6:	4622      	mov	r2, r4
   130a8:	6869      	ldr	r1, [r5, #4]
   130aa:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   130ae:	f7ff fe33 	bl	12d18 <bt_id_set_adv_own_addr>
	if (err) {
   130b2:	4604      	mov	r4, r0
   130b4:	2800      	cmp	r0, #0
   130b6:	d1c4      	bne.n	13042 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   130b8:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   130bc:	f1ba 0f00 	cmp.w	sl, #0
   130c0:	d013      	beq.n	130ea <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   130c2:	6929      	ldr	r1, [r5, #16]
   130c4:	f012 ff9d 	bl	26002 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   130c8:	4628      	mov	r0, r5
   130ca:	f013 f835 	bl	26138 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   130ce:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   130d0:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   130d2:	07d9      	lsls	r1, r3, #31
   130d4:	d416      	bmi.n	13104 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   130d6:	059b      	lsls	r3, r3, #22
   130d8:	d403      	bmi.n	130e2 <bt_le_adv_start_legacy+0xd6>
   130da:	9b16      	ldr	r3, [sp, #88]	; 0x58
   130dc:	b90b      	cbnz	r3, 130e2 <bt_le_adv_start_legacy+0xd6>
   130de:	2f02      	cmp	r7, #2
   130e0:	d159      	bne.n	13196 <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   130e2:	2302      	movs	r3, #2
   130e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   130e8:	e019      	b.n	1311e <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   130ea:	4960      	ldr	r1, [pc, #384]	; (1326c <bt_le_adv_start_legacy+0x260>)
   130ec:	f012 ff89 	bl	26002 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   130f0:	4628      	mov	r0, r5
   130f2:	f013 f821 	bl	26138 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   130f6:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   130f8:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   130fa:	07da      	lsls	r2, r3, #31
   130fc:	d5eb      	bpl.n	130d6 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   130fe:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   13102:	e00c      	b.n	1311e <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   13104:	f013 0f10 	tst.w	r3, #16
   13108:	bf0c      	ite	eq
   1310a:	2301      	moveq	r3, #1
   1310c:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1310e:	6929      	ldr	r1, [r5, #16]
   13110:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   13114:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   13118:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1311a:	f012 ff72 	bl	26002 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1311e:	210f      	movs	r1, #15
   13120:	f242 0006 	movw	r0, #8198	; 0x2006
   13124:	f7fe fb60 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   13128:	4604      	mov	r4, r0
   1312a:	2800      	cmp	r0, #0
   1312c:	f000 8096 	beq.w	1325c <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13130:	220f      	movs	r2, #15
   13132:	a908      	add	r1, sp, #32
   13134:	300c      	adds	r0, #12
   13136:	f014 fc24 	bl	27982 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1313a:	4621      	mov	r1, r4
   1313c:	2200      	movs	r2, #0
   1313e:	f242 0006 	movw	r0, #8198	; 0x2006
   13142:	f7fe fb9f 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
   13146:	4604      	mov	r4, r0
   13148:	2800      	cmp	r0, #0
   1314a:	f47f af7a 	bne.w	13042 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1314e:	f1ba 0f00 	cmp.w	sl, #0
   13152:	d026      	beq.n	131a2 <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13154:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13156:	07dc      	lsls	r4, r3, #31
   13158:	d431      	bmi.n	131be <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1315a:	4630      	mov	r0, r6
   1315c:	2101      	movs	r1, #1
   1315e:	f012 fffb 	bl	26158 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13162:	9e07      	ldr	r6, [sp, #28]
	if (err) {
   13164:	4604      	mov	r4, r0
   13166:	2800      	cmp	r0, #0
   13168:	d06a      	beq.n	13240 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   1316a:	2500      	movs	r5, #0
   1316c:	4b40      	ldr	r3, [pc, #256]	; (13270 <bt_le_adv_start_legacy+0x264>)
   1316e:	2201      	movs	r2, #1
   13170:	9302      	str	r3, [sp, #8]
   13172:	4628      	mov	r0, r5
   13174:	462b      	mov	r3, r5
   13176:	e9cd 5500 	strd	r5, r5, [sp]
   1317a:	493e      	ldr	r1, [pc, #248]	; (13274 <bt_le_adv_start_legacy+0x268>)
   1317c:	f012 ff48 	bl	26010 <z_log_msg_runtime_create.constprop.0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13180:	2e00      	cmp	r6, #0
   13182:	f43f af5e 	beq.w	13042 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13186:	4630      	mov	r0, r6
   13188:	4629      	mov	r1, r5
   1318a:	f000 fe67 	bl	13e5c <bt_conn_set_state>
			bt_conn_unref(conn);
   1318e:	4630      	mov	r0, r6
   13190:	f000 fe2c 	bl	13dec <bt_conn_unref>
   13194:	e755      	b.n	13042 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   13196:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   13198:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1319c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   131a0:	e7bd      	b.n	1311e <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   131a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   131a4:	4659      	mov	r1, fp
   131a6:	9300      	str	r3, [sp, #0]
   131a8:	4630      	mov	r0, r6
   131aa:	e9cd 9701 	strd	r9, r7, [sp, #4]
   131ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
   131b0:	9a05      	ldr	r2, [sp, #20]
   131b2:	f012 ff4f 	bl	26054 <le_adv_update.constprop.0>
		if (err) {
   131b6:	4604      	mov	r4, r0
   131b8:	2800      	cmp	r0, #0
   131ba:	d0cb      	beq.n	13154 <bt_le_adv_start_legacy+0x148>
   131bc:	e741      	b.n	13042 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   131be:	4630      	mov	r0, r6
   131c0:	a907      	add	r1, sp, #28
   131c2:	f7ff fea1 	bl	12f08 <le_adv_start_add_conn>
		if (err) {
   131c6:	4604      	mov	r4, r0
   131c8:	2800      	cmp	r0, #0
   131ca:	d0c6      	beq.n	1315a <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   131cc:	f110 0f0c 	cmn.w	r0, #12
   131d0:	f47f af37 	bne.w	13042 <bt_le_adv_start_legacy+0x36>
   131d4:	f1ba 0f00 	cmp.w	sl, #0
   131d8:	f47f af33 	bne.w	13042 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   131dc:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   131de:	0798      	lsls	r0, r3, #30
   131e0:	f53f af2f 	bmi.w	13042 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   131e4:	686c      	ldr	r4, [r5, #4]
   131e6:	f084 0402 	eor.w	r4, r4, #2
   131ea:	f3c4 0440 	ubfx	r4, r4, #1, #1
   131ee:	f004 0201 	and.w	r2, r4, #1
   131f2:	210e      	movs	r1, #14
   131f4:	4640      	mov	r0, r8
   131f6:	f012 ff1a 	bl	2602e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   131fa:	1e7b      	subs	r3, r7, #1
   131fc:	425a      	negs	r2, r3
   131fe:	415a      	adcs	r2, r3
   13200:	2108      	movs	r1, #8
   13202:	4640      	mov	r0, r8
   13204:	f012 ff13 	bl	2602e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   13208:	1eb9      	subs	r1, r7, #2
   1320a:	424a      	negs	r2, r1
   1320c:	414a      	adcs	r2, r1
   1320e:	4640      	mov	r0, r8
   13210:	2109      	movs	r1, #9
   13212:	f012 ff0c 	bl	2602e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   13216:	686a      	ldr	r2, [r5, #4]
   13218:	210a      	movs	r1, #10
   1321a:	4640      	mov	r0, r8
   1321c:	f002 0201 	and.w	r2, r2, #1
   13220:	f012 ff05 	bl	2602e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   13224:	464a      	mov	r2, r9
   13226:	210b      	movs	r1, #11
   13228:	4640      	mov	r0, r8
   1322a:	f012 ff00 	bl	2602e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1322e:	686a      	ldr	r2, [r5, #4]
   13230:	210d      	movs	r1, #13
   13232:	4640      	mov	r0, r8
   13234:	f3c2 0280 	ubfx	r2, r2, #2, #1
   13238:	f012 fef9 	bl	2602e <atomic_set_bit_to>
	return 0;
   1323c:	2400      	movs	r4, #0
   1323e:	e700      	b.n	13042 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13240:	b116      	cbz	r6, 13248 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   13242:	4630      	mov	r0, r6
   13244:	f000 fdd2 	bl	13dec <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   13248:	f1ba 0f00 	cmp.w	sl, #0
   1324c:	d1cf      	bne.n	131ee <bt_le_adv_start_legacy+0x1e2>
   1324e:	e7c9      	b.n	131e4 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   13250:	f06f 040a 	mvn.w	r4, #10
   13254:	e6f5      	b.n	13042 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   13256:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1325a:	e6f2      	b.n	13042 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1325c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   13260:	e6ef      	b.n	13042 <bt_le_adv_start_legacy+0x36>
   13262:	bf00      	nop
   13264:	200080cc 	.word	0x200080cc
   13268:	20008000 	.word	0x20008000
   1326c:	0002d1b1 	.word	0x0002d1b1
   13270:	0002dbe2 	.word	0x0002dbe2
   13274:	0002a368 	.word	0x0002a368

00013278 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   13278:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1327a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1327c:	9a06      	ldr	r2, [sp, #24]
{
   1327e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   13280:	e9cd 3200 	strd	r3, r2, [sp]
   13284:	462b      	mov	r3, r5
   13286:	460a      	mov	r2, r1
   13288:	4601      	mov	r1, r0
   1328a:	4811      	ldr	r0, [pc, #68]	; (132d0 <bt_le_adv_start+0x58>)
   1328c:	f7ff febe 	bl	1300c <bt_le_adv_start_legacy>
   13290:	4621      	mov	r1, r4
   13292:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   13294:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   13296:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1329a:	429d      	cmp	r5, r3
   1329c:	d102      	bne.n	132a4 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1329e:	4630      	mov	r0, r6
   132a0:	b002      	add	sp, #8
   132a2:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   132a4:	880a      	ldrh	r2, [r1, #0]
   132a6:	4282      	cmp	r2, r0
   132a8:	d104      	bne.n	132b4 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   132aa:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   132ac:	b112      	cbz	r2, 132b4 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   132ae:	7812      	ldrb	r2, [r2, #0]
   132b0:	07d2      	lsls	r2, r2, #31
   132b2:	d402      	bmi.n	132ba <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   132b4:	3301      	adds	r3, #1
   132b6:	3108      	adds	r1, #8
   132b8:	e7ef      	b.n	1329a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   132ba:	4906      	ldr	r1, [pc, #24]	; (132d4 <bt_le_adv_start+0x5c>)
   132bc:	4806      	ldr	r0, [pc, #24]	; (132d8 <bt_le_adv_start+0x60>)
   132be:	f00d f891 	bl	203e4 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   132c2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   132c6:	2300      	movs	r3, #0
   132c8:	4803      	ldr	r0, [pc, #12]	; (132d8 <bt_le_adv_start+0x60>)
   132ca:	f00d f9a7 	bl	2061c <k_work_reschedule>
   132ce:	e7e6      	b.n	1329e <bt_le_adv_start+0x26>
   132d0:	20008018 	.word	0x20008018
   132d4:	00013361 	.word	0x00013361
   132d8:	20008030 	.word	0x20008030

000132dc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   132dc:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   132de:	481a      	ldr	r0, [pc, #104]	; (13348 <bt_le_adv_stop+0x6c>)
   132e0:	f012 ff61 	bl	261a6 <bt_le_lim_adv_cancel_timeout>
   132e4:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   132e8:	4818      	ldr	r0, [pc, #96]	; (1334c <bt_le_adv_stop+0x70>)
   132ea:	f012 fe7f 	bl	25fec <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   132ee:	4817      	ldr	r0, [pc, #92]	; (1334c <bt_le_adv_stop+0x70>)
   132f0:	f012 fe79 	bl	25fe6 <atomic_get>
   132f4:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   132f6:	061a      	lsls	r2, r3, #24
   132f8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   132fc:	d523      	bpl.n	13346 <bt_le_adv_stop+0x6a>
   132fe:	4813      	ldr	r0, [pc, #76]	; (1334c <bt_le_adv_stop+0x70>)
   13300:	f012 fe71 	bl	25fe6 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13304:	0543      	lsls	r3, r0, #21
   13306:	d514      	bpl.n	13332 <bt_le_adv_stop+0x56>
   13308:	2207      	movs	r2, #7
   1330a:	4911      	ldr	r1, [pc, #68]	; (13350 <bt_le_adv_stop+0x74>)
   1330c:	4811      	ldr	r0, [pc, #68]	; (13354 <bt_le_adv_stop+0x78>)
   1330e:	f016 f8a0 	bl	29452 <memcmp>
   13312:	4b11      	ldr	r3, [pc, #68]	; (13358 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13314:	b998      	cbnz	r0, 1333e <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   13316:	2204      	movs	r2, #4
   13318:	4910      	ldr	r1, [pc, #64]	; (1335c <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1331a:	7e18      	ldrb	r0, [r3, #24]
   1331c:	f001 f872 	bl	14404 <bt_conn_lookup_state_le>
   13320:	4604      	mov	r4, r0
	if (conn) {
   13322:	b130      	cbz	r0, 13332 <bt_le_adv_stop+0x56>
		conn->err = status;
   13324:	2100      	movs	r1, #0
   13326:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13328:	f000 fd98 	bl	13e5c <bt_conn_set_state>
		bt_conn_unref(conn);
   1332c:	4620      	mov	r0, r4
   1332e:	f000 fd5d 	bl	13dec <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   13332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   13336:	2100      	movs	r1, #0
   13338:	4803      	ldr	r0, [pc, #12]	; (13348 <bt_le_adv_stop+0x6c>)
   1333a:	f012 bf0d 	b.w	26158 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1333e:	2205      	movs	r2, #5
   13340:	f103 0121 	add.w	r1, r3, #33	; 0x21
   13344:	e7e9      	b.n	1331a <bt_le_adv_stop+0x3e>
}
   13346:	bd10      	pop	{r4, pc}
   13348:	20008018 	.word	0x20008018
   1334c:	20008028 	.word	0x20008028
   13350:	0002d1b1 	.word	0x0002d1b1
   13354:	20008021 	.word	0x20008021
   13358:	20008000 	.word	0x20008000
   1335c:	0002d1aa 	.word	0x0002d1aa

00013360 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   13360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   13362:	f7ff ffbb 	bl	132dc <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   13366:	4b07      	ldr	r3, [pc, #28]	; (13384 <adv_timeout+0x24>)
   13368:	9003      	str	r0, [sp, #12]
   1336a:	9302      	str	r3, [sp, #8]
   1336c:	2300      	movs	r3, #0
   1336e:	2202      	movs	r2, #2
   13370:	4618      	mov	r0, r3
   13372:	e9cd 3300 	strd	r3, r3, [sp]
   13376:	4904      	ldr	r1, [pc, #16]	; (13388 <adv_timeout+0x28>)
   13378:	f012 fe4a 	bl	26010 <z_log_msg_runtime_create.constprop.0>
}
   1337c:	b005      	add	sp, #20
   1337e:	f85d fb04 	ldr.w	pc, [sp], #4
   13382:	bf00      	nop
   13384:	0002dbfd 	.word	0x0002dbfd
   13388:	0002a368 	.word	0x0002a368

0001338c <bt_le_adv_resume>:
{
   1338c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1338e:	4c1e      	ldr	r4, [pc, #120]	; (13408 <bt_le_adv_resume+0x7c>)
   13390:	4620      	mov	r0, r4
   13392:	f012 fe28 	bl	25fe6 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   13396:	0440      	lsls	r0, r0, #17
   13398:	d534      	bpl.n	13404 <bt_le_adv_resume+0x78>
   1339a:	4620      	mov	r0, r4
   1339c:	f012 fe23 	bl	25fe6 <atomic_get>
   133a0:	0601      	lsls	r1, r0, #24
   133a2:	d42f      	bmi.n	13404 <bt_le_adv_resume+0x78>
   133a4:	4620      	mov	r0, r4
   133a6:	f012 fe1e 	bl	25fe6 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   133aa:	0542      	lsls	r2, r0, #21
   133ac:	d52a      	bpl.n	13404 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   133ae:	a901      	add	r1, sp, #4
   133b0:	f1a4 0010 	sub.w	r0, r4, #16
   133b4:	f7ff fda8 	bl	12f08 <le_adv_start_add_conn>
	if (err) {
   133b8:	4605      	mov	r5, r0
   133ba:	bb18      	cbnz	r0, 13404 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   133bc:	2101      	movs	r1, #1
   133be:	f1a4 0010 	sub.w	r0, r4, #16
   133c2:	f012 fec9 	bl	26158 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   133c6:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   133c8:	b928      	cbnz	r0, 133d6 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   133ca:	4630      	mov	r0, r6
}
   133cc:	b002      	add	sp, #8
   133ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   133d2:	f000 bd0b 	b.w	13dec <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   133d6:	4629      	mov	r1, r5
   133d8:	4630      	mov	r0, r6
   133da:	f000 fd3f 	bl	13e5c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   133de:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   133e2:	4620      	mov	r0, r4
   133e4:	f012 fe02 	bl	25fec <atomic_and>
   133e8:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   133ea:	4630      	mov	r0, r6
   133ec:	f000 fcfe 	bl	13dec <bt_conn_unref>
	if (persist_paused) {
   133f0:	046b      	lsls	r3, r5, #17
   133f2:	d507      	bpl.n	13404 <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   133f4:	e8d4 3fef 	ldaex	r3, [r4]
   133f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   133fc:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13400:	2a00      	cmp	r2, #0
   13402:	d1f7      	bne.n	133f4 <bt_le_adv_resume+0x68>
}
   13404:	b002      	add	sp, #8
   13406:	bd70      	pop	{r4, r5, r6, pc}
   13408:	20008028 	.word	0x20008028

0001340c <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   1340c:	b530      	push	{r4, r5, lr}
   1340e:	b08f      	sub	sp, #60	; 0x3c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   13410:	2120      	movs	r1, #32
   13412:	a806      	add	r0, sp, #24
   13414:	f7fe fad4 	bl	119c0 <bt_hci_le_rand>
	if (ret) {
   13418:	4604      	mov	r4, r0
   1341a:	bb08      	cbnz	r0, 13460 <prng_reseed.constprop.0+0x54>
	return z_impl_k_uptime_ticks();
   1341c:	f015 ff1e 	bl	2925c <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   13420:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   13424:	fba0 2305 	umull	r2, r3, r0, r5
   13428:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1342c:	2308      	movs	r3, #8
   1342e:	0bd2      	lsrs	r2, r2, #15
   13430:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   13434:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   13436:	e9cd 2104 	strd	r2, r1, [sp, #16]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1343a:	9300      	str	r3, [sp, #0]
   1343c:	2220      	movs	r2, #32
   1343e:	480a      	ldr	r0, [pc, #40]	; (13468 <prng_reseed.constprop.0+0x5c>)
   13440:	ab04      	add	r3, sp, #16
   13442:	a906      	add	r1, sp, #24
   13444:	f012 fa7d 	bl	25942 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   13448:	b950      	cbnz	r0, 13460 <prng_reseed.constprop.0+0x54>
		LOG_ERR("Failed to re-seed PRNG");
   1344a:	4b08      	ldr	r3, [pc, #32]	; (1346c <prng_reseed.constprop.0+0x60>)
   1344c:	9400      	str	r4, [sp, #0]
   1344e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13452:	2201      	movs	r2, #1
   13454:	4623      	mov	r3, r4
   13456:	4906      	ldr	r1, [pc, #24]	; (13470 <prng_reseed.constprop.0+0x64>)
   13458:	f012 fea8 	bl	261ac <z_log_msg_runtime_create.constprop.0>
   1345c:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
   13460:	4620      	mov	r0, r4
   13462:	b00f      	add	sp, #60	; 0x3c
   13464:	bd30      	pop	{r4, r5, pc}
   13466:	bf00      	nop
   13468:	200096c0 	.word	0x200096c0
   1346c:	0002dc23 	.word	0x0002dc23
   13470:	0002a3a8 	.word	0x0002a3a8

00013474 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   13474:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   13476:	b508      	push	{r3, lr}
   13478:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1347c:	d910      	bls.n	134a0 <sys_memcpy_swap.constprop.0+0x2c>
   1347e:	4298      	cmp	r0, r3
   13480:	d213      	bcs.n	134aa <sys_memcpy_swap.constprop.0+0x36>
   13482:	490e      	ldr	r1, [pc, #56]	; (134bc <sys_memcpy_swap.constprop.0+0x48>)
   13484:	f240 2315 	movw	r3, #533	; 0x215
   13488:	4a0d      	ldr	r2, [pc, #52]	; (134c0 <sys_memcpy_swap.constprop.0+0x4c>)
   1348a:	480e      	ldr	r0, [pc, #56]	; (134c4 <sys_memcpy_swap.constprop.0+0x50>)
   1348c:	f011 fa8b 	bl	249a6 <assert_print>
   13490:	480d      	ldr	r0, [pc, #52]	; (134c8 <sys_memcpy_swap.constprop.0+0x54>)
   13492:	f011 fa88 	bl	249a6 <assert_print>
   13496:	f240 2115 	movw	r1, #533	; 0x215
   1349a:	4809      	ldr	r0, [pc, #36]	; (134c0 <sys_memcpy_swap.constprop.0+0x4c>)
   1349c:	f011 fa7c 	bl	24998 <assert_post_action>
   134a0:	d0ef      	beq.n	13482 <sys_memcpy_swap.constprop.0+0xe>
   134a2:	f100 0210 	add.w	r2, r0, #16
   134a6:	4291      	cmp	r1, r2
   134a8:	e7ea      	b.n	13480 <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   134aa:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   134ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   134b0:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   134b2:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   134b6:	d1f9      	bne.n	134ac <sys_memcpy_swap.constprop.0+0x38>
	}
}
   134b8:	bd08      	pop	{r3, pc}
   134ba:	bf00      	nop
   134bc:	0002dc6c 	.word	0x0002dc6c
   134c0:	0002dc3a 	.word	0x0002dc3a
   134c4:	0002b339 	.word	0x0002b339
   134c8:	0002dcc3 	.word	0x0002dcc3

000134cc <prng_init>:

int prng_init(void)
{
   134cc:	b510      	push	{r4, lr}
   134ce:	b086      	sub	sp, #24
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   134d0:	2108      	movs	r1, #8
   134d2:	a804      	add	r0, sp, #16
   134d4:	f7fe fa74 	bl	119c0 <bt_hci_le_rand>
	if (ret) {
   134d8:	4604      	mov	r4, r0
   134da:	b980      	cbnz	r0, 134fe <prng_init+0x32>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   134dc:	2208      	movs	r2, #8
   134de:	480b      	ldr	r0, [pc, #44]	; (1350c <prng_init+0x40>)
   134e0:	a904      	add	r1, sp, #16
   134e2:	f012 fa0e 	bl	25902 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   134e6:	b968      	cbnz	r0, 13504 <prng_init+0x38>
		LOG_ERR("Failed to initialize PRNG");
   134e8:	4b09      	ldr	r3, [pc, #36]	; (13510 <prng_init+0x44>)
   134ea:	9400      	str	r4, [sp, #0]
   134ec:	e9cd 4301 	strd	r4, r3, [sp, #4]
   134f0:	2201      	movs	r2, #1
   134f2:	4623      	mov	r3, r4
   134f4:	4907      	ldr	r1, [pc, #28]	; (13514 <prng_init+0x48>)
   134f6:	f012 fe59 	bl	261ac <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   134fa:	f06f 0404 	mvn.w	r4, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   134fe:	4620      	mov	r0, r4
   13500:	b006      	add	sp, #24
   13502:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   13504:	f7ff ff82 	bl	1340c <prng_reseed.constprop.0>
   13508:	4604      	mov	r4, r0
   1350a:	e7f8      	b.n	134fe <prng_init+0x32>
   1350c:	200096c0 	.word	0x200096c0
   13510:	0002dcf5 	.word	0x0002dcf5
   13514:	0002a3a8 	.word	0x0002a3a8

00013518 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   13518:	b538      	push	{r3, r4, r5, lr}
   1351a:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   1351c:	4604      	mov	r4, r0
   1351e:	b198      	cbz	r0, 13548 <bt_rand+0x30>
   13520:	b191      	cbz	r1, 13548 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   13522:	4a0b      	ldr	r2, [pc, #44]	; (13550 <bt_rand+0x38>)
   13524:	f012 fa26 	bl	25974 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   13528:	1c43      	adds	r3, r0, #1
   1352a:	d107      	bne.n	1353c <bt_rand+0x24>
		ret = prng_reseed(&prng);
   1352c:	f7ff ff6e 	bl	1340c <prng_reseed.constprop.0>
		if (ret) {
   13530:	b948      	cbnz	r0, 13546 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   13532:	4629      	mov	r1, r5
   13534:	4620      	mov	r0, r4
   13536:	4a06      	ldr	r2, [pc, #24]	; (13550 <bt_rand+0x38>)
   13538:	f012 fa1c 	bl	25974 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   1353c:	2801      	cmp	r0, #1
   1353e:	bf0c      	ite	eq
   13540:	2000      	moveq	r0, #0
   13542:	f06f 0004 	mvnne.w	r0, #4
}
   13546:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   13548:	f06f 0015 	mvn.w	r0, #21
   1354c:	e7fb      	b.n	13546 <bt_rand+0x2e>
   1354e:	bf00      	nop
   13550:	200096c0 	.word	0x200096c0

00013554 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   13554:	2240      	movs	r2, #64	; 0x40
{
   13556:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   13558:	4903      	ldr	r1, [pc, #12]	; (13568 <bt_pub_key_is_debug+0x14>)
   1355a:	f015 ff7a 	bl	29452 <memcmp>
}
   1355e:	fab0 f080 	clz	r0, r0
   13562:	0940      	lsrs	r0, r0, #5
   13564:	bd08      	pop	{r3, pc}
   13566:	bf00      	nop
   13568:	0002dda5 	.word	0x0002dda5

0001356c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   1356c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1356e:	4b3c      	ldr	r3, [pc, #240]	; (13660 <bt_pub_key_gen+0xf4>)
{
   13570:	b085      	sub	sp, #20
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   13572:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   13576:	f003 0306 	and.w	r3, r3, #6
   1357a:	2b06      	cmp	r3, #6
   1357c:	d00e      	beq.n	1359c <bt_pub_key_gen+0x30>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   1357e:	4b39      	ldr	r3, [pc, #228]	; (13664 <bt_pub_key_gen+0xf8>)
   13580:	2202      	movs	r2, #2
   13582:	9302      	str	r3, [sp, #8]
   13584:	2300      	movs	r3, #0
   13586:	4938      	ldr	r1, [pc, #224]	; (13668 <bt_pub_key_gen+0xfc>)
   13588:	4618      	mov	r0, r3
   1358a:	e9cd 3300 	strd	r3, r3, [sp]
   1358e:	f012 fe49 	bl	26224 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   13592:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   13596:	4628      	mov	r0, r5
   13598:	b005      	add	sp, #20
   1359a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   1359c:	2800      	cmp	r0, #0
   1359e:	d05b      	beq.n	13658 <bt_pub_key_gen+0xec>
	return list->head;
   135a0:	4e32      	ldr	r6, [pc, #200]	; (1366c <bt_pub_key_gen+0x100>)
   135a2:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   135a4:	b19a      	cbz	r2, 135ce <bt_pub_key_gen+0x62>
   135a6:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   135a8:	4283      	cmp	r3, r0
   135aa:	d10c      	bne.n	135c6 <bt_pub_key_gen+0x5a>
			LOG_WRN("Callback already registered");
   135ac:	4b30      	ldr	r3, [pc, #192]	; (13670 <bt_pub_key_gen+0x104>)
   135ae:	2202      	movs	r2, #2
   135b0:	9302      	str	r3, [sp, #8]
   135b2:	2300      	movs	r3, #0
   135b4:	492c      	ldr	r1, [pc, #176]	; (13668 <bt_pub_key_gen+0xfc>)
   135b6:	4618      	mov	r0, r3
   135b8:	e9cd 3300 	strd	r3, r3, [sp]
   135bc:	f012 fe32 	bl	26224 <z_log_msg_runtime_create.constprop.0>
			return -EALREADY;
   135c0:	f06f 0577 	mvn.w	r5, #119	; 0x77
   135c4:	e7e7      	b.n	13596 <bt_pub_key_gen+0x2a>
	return node->next;
   135c6:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   135c8:	b10b      	cbz	r3, 135ce <bt_pub_key_gen+0x62>
   135ca:	3b04      	subs	r3, #4
   135cc:	e7ec      	b.n	135a8 <bt_pub_key_gen+0x3c>
	parent->next = child;
   135ce:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   135d0:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   135d2:	1d03      	adds	r3, r0, #4
	list->head = node;
   135d4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   135d6:	b902      	cbnz	r2, 135da <bt_pub_key_gen+0x6e>
	list->tail = node;
   135d8:	6073      	str	r3, [r6, #4]
   135da:	4f26      	ldr	r7, [pc, #152]	; (13674 <bt_pub_key_gen+0x108>)
   135dc:	e8d7 4fef 	ldaex	r4, [r7]
   135e0:	f044 0320 	orr.w	r3, r4, #32
   135e4:	e8c7 3fe2 	stlex	r2, r3, [r7]
   135e8:	2a00      	cmp	r2, #0
   135ea:	d1f7      	bne.n	135dc <bt_pub_key_gen+0x70>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   135ec:	f014 0420 	ands.w	r4, r4, #32
   135f0:	d001      	beq.n	135f6 <bt_pub_key_gen+0x8a>
	return 0;
   135f2:	2500      	movs	r5, #0
   135f4:	e7cf      	b.n	13596 <bt_pub_key_gen+0x2a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   135f6:	e8d7 3fef 	ldaex	r3, [r7]
   135fa:	f023 0310 	bic.w	r3, r3, #16
   135fe:	e8c7 3fe2 	stlex	r2, r3, [r7]
   13602:	2a00      	cmp	r2, #0
   13604:	d1f7      	bne.n	135f6 <bt_pub_key_gen+0x8a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   13606:	4622      	mov	r2, r4
   13608:	4621      	mov	r1, r4
   1360a:	f242 0025 	movw	r0, #8229	; 0x2025
   1360e:	f7fe f939 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
   13612:	4605      	mov	r5, r0
   13614:	2800      	cmp	r0, #0
   13616:	d0ec      	beq.n	135f2 <bt_pub_key_gen+0x86>
		LOG_ERR("Sending LE P256 Public Key command failed");
   13618:	4b17      	ldr	r3, [pc, #92]	; (13678 <bt_pub_key_gen+0x10c>)
   1361a:	2201      	movs	r2, #1
   1361c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13620:	4620      	mov	r0, r4
   13622:	4623      	mov	r3, r4
   13624:	4910      	ldr	r1, [pc, #64]	; (13668 <bt_pub_key_gen+0xfc>)
   13626:	9400      	str	r4, [sp, #0]
   13628:	f012 fdfc 	bl	26224 <z_log_msg_runtime_create.constprop.0>
   1362c:	e8d7 3fef 	ldaex	r3, [r7]
   13630:	f023 0320 	bic.w	r3, r3, #32
   13634:	e8c7 3fe2 	stlex	r2, r3, [r7]
   13638:	2a00      	cmp	r2, #0
   1363a:	d1f7      	bne.n	1362c <bt_pub_key_gen+0xc0>
	return list->head;
   1363c:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1363e:	b13c      	cbz	r4, 13650 <bt_pub_key_gen+0xe4>
			if (cb->func) {
   13640:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13644:	3c04      	subs	r4, #4
			if (cb->func) {
   13646:	b10b      	cbz	r3, 1364c <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   13648:	2000      	movs	r0, #0
   1364a:	4798      	blx	r3
	return node->next;
   1364c:	6864      	ldr	r4, [r4, #4]
   1364e:	e7f6      	b.n	1363e <bt_pub_key_gen+0xd2>
	list->head = NULL;
   13650:	2300      	movs	r3, #0
	list->tail = NULL;
   13652:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   13656:	e79e      	b.n	13596 <bt_pub_key_gen+0x2a>
		return -EINVAL;
   13658:	f06f 0515 	mvn.w	r5, #21
   1365c:	e79b      	b.n	13596 <bt_pub_key_gen+0x2a>
   1365e:	bf00      	nop
   13660:	20008000 	.word	0x20008000
   13664:	0002dd1e 	.word	0x0002dd1e
   13668:	0002a388 	.word	0x0002a388
   1366c:	20020fb4 	.word	0x20020fb4
   13670:	0002dd3d 	.word	0x0002dd3d
   13674:	200080cc 	.word	0x200080cc
   13678:	0002dd59 	.word	0x0002dd59

0001367c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1367c:	4b04      	ldr	r3, [pc, #16]	; (13690 <bt_pub_key_get+0x14>)
   1367e:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   13682:	f013 0f10 	tst.w	r3, #16
}
   13686:	4803      	ldr	r0, [pc, #12]	; (13694 <bt_pub_key_get+0x18>)
   13688:	bf08      	it	eq
   1368a:	2000      	moveq	r0, #0
   1368c:	4770      	bx	lr
   1368e:	bf00      	nop
   13690:	200080cc 	.word	0x200080cc
   13694:	20021d7e 	.word	0x20021d7e

00013698 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   13698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   1369a:	4e24      	ldr	r6, [pc, #144]	; (1372c <bt_dh_key_gen+0x94>)
{
   1369c:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   1369e:	6833      	ldr	r3, [r6, #0]
   136a0:	428b      	cmp	r3, r1
   136a2:	d03c      	beq.n	1371e <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   136a4:	b123      	cbz	r3, 136b0 <bt_dh_key_gen+0x18>
		return -EBUSY;
   136a6:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   136aa:	4620      	mov	r0, r4
   136ac:	b004      	add	sp, #16
   136ae:	bd70      	pop	{r4, r5, r6, pc}
   136b0:	4b1f      	ldr	r3, [pc, #124]	; (13730 <bt_dh_key_gen+0x98>)
   136b2:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   136b6:	0692      	lsls	r2, r2, #26
   136b8:	d4f5      	bmi.n	136a6 <bt_dh_key_gen+0xe>
   136ba:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   136be:	06db      	lsls	r3, r3, #27
   136c0:	d530      	bpl.n	13724 <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   136c2:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   136c4:	f242 0026 	movw	r0, #8230	; 0x2026
   136c8:	2140      	movs	r1, #64	; 0x40
   136ca:	f7fe f88d 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   136ce:	4605      	mov	r5, r0
   136d0:	b310      	cbz	r0, 13718 <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   136d2:	2140      	movs	r1, #64	; 0x40
   136d4:	300c      	adds	r0, #12
   136d6:	f005 fdc5 	bl	19264 <net_buf_simple_add>
   136da:	4623      	mov	r3, r4
   136dc:	f104 0240 	add.w	r2, r4, #64	; 0x40
   136e0:	f853 1b04 	ldr.w	r1, [r3], #4
   136e4:	4293      	cmp	r3, r2
   136e6:	f840 1b04 	str.w	r1, [r0], #4
   136ea:	d1f9      	bne.n	136e0 <bt_dh_key_gen+0x48>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   136ec:	2200      	movs	r2, #0
   136ee:	4629      	mov	r1, r5
   136f0:	f242 0026 	movw	r0, #8230	; 0x2026
   136f4:	f7fe f8c6 	bl	11884 <bt_hci_cmd_send_sync>
	if (err) {
   136f8:	4604      	mov	r4, r0
   136fa:	2800      	cmp	r0, #0
   136fc:	d0d5      	beq.n	136aa <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   136fe:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   13700:	4a0c      	ldr	r2, [pc, #48]	; (13734 <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   13702:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   13704:	4618      	mov	r0, r3
   13706:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1370a:	490b      	ldr	r1, [pc, #44]	; (13738 <bt_dh_key_gen+0xa0>)
   1370c:	2202      	movs	r2, #2
   1370e:	9403      	str	r4, [sp, #12]
   13710:	9300      	str	r3, [sp, #0]
   13712:	f012 fd87 	bl	26224 <z_log_msg_runtime_create.constprop.0>
		return err;
   13716:	e7c8      	b.n	136aa <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   13718:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1371c:	e7ef      	b.n	136fe <bt_dh_key_gen+0x66>
		return -EALREADY;
   1371e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13722:	e7c2      	b.n	136aa <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   13724:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   13728:	e7bf      	b.n	136aa <bt_dh_key_gen+0x12>
   1372a:	bf00      	nop
   1372c:	20020fb0 	.word	0x20020fb0
   13730:	200080cc 	.word	0x200080cc
   13734:	0002dd83 	.word	0x0002dd83
   13738:	0002a388 	.word	0x0002a388

0001373c <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1373e:	4b19      	ldr	r3, [pc, #100]	; (137a4 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   13740:	68c5      	ldr	r5, [r0, #12]
   13742:	e8d3 2fef 	ldaex	r2, [r3]
   13746:	f022 0220 	bic.w	r2, r2, #32
   1374a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1374e:	2900      	cmp	r1, #0
   13750:	d1f7      	bne.n	13742 <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   13752:	782a      	ldrb	r2, [r5, #0]
   13754:	b98a      	cbnz	r2, 1377a <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   13756:	4914      	ldr	r1, [pc, #80]	; (137a8 <bt_hci_evt_le_pkey_complete+0x6c>)
   13758:	1c6a      	adds	r2, r5, #1
   1375a:	f105 0041 	add.w	r0, r5, #65	; 0x41
   1375e:	f852 4b04 	ldr.w	r4, [r2], #4
   13762:	4282      	cmp	r2, r0
   13764:	f841 4b04 	str.w	r4, [r1], #4
   13768:	d1f9      	bne.n	1375e <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1376a:	e8d3 1fef 	ldaex	r1, [r3]
   1376e:	f041 0110 	orr.w	r1, r1, #16
   13772:	e8c3 1fe2 	stlex	r2, r1, [r3]
   13776:	2a00      	cmp	r2, #0
   13778:	d1f7      	bne.n	1376a <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   1377a:	4e0c      	ldr	r6, [pc, #48]	; (137ac <bt_hci_evt_le_pkey_complete+0x70>)
   1377c:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1377e:	b16c      	cbz	r4, 1379c <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   13780:	4f09      	ldr	r7, [pc, #36]	; (137a8 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13782:	3c04      	subs	r4, #4
		if (cb->func) {
   13784:	6823      	ldr	r3, [r4, #0]
   13786:	b12b      	cbz	r3, 13794 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   13788:	782a      	ldrb	r2, [r5, #0]
   1378a:	2a00      	cmp	r2, #0
   1378c:	bf0c      	ite	eq
   1378e:	4638      	moveq	r0, r7
   13790:	2000      	movne	r0, #0
   13792:	4798      	blx	r3
	return node->next;
   13794:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13796:	b10c      	cbz	r4, 1379c <bt_hci_evt_le_pkey_complete+0x60>
   13798:	3c04      	subs	r4, #4
   1379a:	e7f3      	b.n	13784 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   1379c:	2300      	movs	r3, #0
	list->tail = NULL;
   1379e:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   137a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137a4:	200080cc 	.word	0x200080cc
   137a8:	20021d7e 	.word	0x20021d7e
   137ac:	20020fb4 	.word	0x20020fb4

000137b0 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   137b0:	4905      	ldr	r1, [pc, #20]	; (137c8 <bt_hci_evt_le_dhkey_complete+0x18>)
   137b2:	680b      	ldr	r3, [r1, #0]
   137b4:	b133      	cbz	r3, 137c4 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   137b6:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   137b8:	2000      	movs	r0, #0
   137ba:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   137bc:	7811      	ldrb	r1, [r2, #0]
   137be:	b901      	cbnz	r1, 137c2 <bt_hci_evt_le_dhkey_complete+0x12>
   137c0:	1c50      	adds	r0, r2, #1
   137c2:	4718      	bx	r3
	}
}
   137c4:	4770      	bx	lr
   137c6:	bf00      	nop
   137c8:	20020fb0 	.word	0x20020fb0

000137cc <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   137cc:	b570      	push	{r4, r5, r6, lr}
   137ce:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   137d0:	4b12      	ldr	r3, [pc, #72]	; (1381c <notify_connected+0x50>)
   137d2:	681d      	ldr	r5, [r3, #0]
   137d4:	b995      	cbnz	r5, 137fc <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   137d6:	4d12      	ldr	r5, [pc, #72]	; (13820 <notify_connected+0x54>)
   137d8:	4e12      	ldr	r6, [pc, #72]	; (13824 <notify_connected+0x58>)
   137da:	42b5      	cmp	r5, r6
   137dc:	d91c      	bls.n	13818 <notify_connected+0x4c>
   137de:	4912      	ldr	r1, [pc, #72]	; (13828 <notify_connected+0x5c>)
   137e0:	f240 535b 	movw	r3, #1371	; 0x55b
   137e4:	4a11      	ldr	r2, [pc, #68]	; (1382c <notify_connected+0x60>)
   137e6:	4812      	ldr	r0, [pc, #72]	; (13830 <notify_connected+0x64>)
   137e8:	f011 f8dd 	bl	249a6 <assert_print>
   137ec:	4811      	ldr	r0, [pc, #68]	; (13834 <notify_connected+0x68>)
   137ee:	f011 f8da 	bl	249a6 <assert_print>
   137f2:	f240 515b 	movw	r1, #1371	; 0x55b
   137f6:	480d      	ldr	r0, [pc, #52]	; (1382c <notify_connected+0x60>)
   137f8:	f011 f8ce 	bl	24998 <assert_post_action>
		if (cb->connected) {
   137fc:	682b      	ldr	r3, [r5, #0]
   137fe:	b113      	cbz	r3, 13806 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   13800:	4620      	mov	r0, r4
   13802:	7b21      	ldrb	r1, [r4, #12]
   13804:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   13806:	69ad      	ldr	r5, [r5, #24]
   13808:	e7e4      	b.n	137d4 <notify_connected+0x8>
		if (cb->connected) {
   1380a:	682b      	ldr	r3, [r5, #0]
   1380c:	b113      	cbz	r3, 13814 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   1380e:	4620      	mov	r0, r4
   13810:	7b21      	ldrb	r1, [r4, #12]
   13812:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13814:	351c      	adds	r5, #28
   13816:	e7e0      	b.n	137da <notify_connected+0xe>
   13818:	d3f7      	bcc.n	1380a <notify_connected+0x3e>
		}
	}
}
   1381a:	bd70      	pop	{r4, r5, r6, pc}
   1381c:	20020fdc 	.word	0x20020fdc
   13820:	0002a304 	.word	0x0002a304
   13824:	0002a320 	.word	0x0002a320
   13828:	0002de1c 	.word	0x0002de1c
   1382c:	0002ddec 	.word	0x0002ddec
   13830:	0002b339 	.word	0x0002b339
   13834:	0002c305 	.word	0x0002c305

00013838 <tx_notify>:
{
   13838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1383c:	4604      	mov	r4, r0
	tx->cb = NULL;
   1383e:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   13842:	4f14      	ldr	r7, [pc, #80]	; (13894 <tx_notify+0x5c>)
	__asm__ volatile(
   13844:	f04f 0220 	mov.w	r2, #32
   13848:	f3ef 8311 	mrs	r3, BASEPRI
   1384c:	f382 8812 	msr	BASEPRI_MAX, r2
   13850:	f3bf 8f6f 	isb	sy
	return list->head;
   13854:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   13856:	b929      	cbnz	r1, 13864 <tx_notify+0x2c>
	__asm__ volatile(
   13858:	f383 8811 	msr	BASEPRI, r3
   1385c:	f3bf 8f6f 	isb	sy
}
   13860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13864:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   13866:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13868:	4281      	cmp	r1, r0
	list->tail = node;
   1386a:	bf08      	it	eq
   1386c:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1386e:	6222      	str	r2, [r4, #32]
   13870:	f383 8811 	msr	BASEPRI, r3
   13874:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   13878:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1387c:	4638      	mov	r0, r7
	tx->user_data = NULL;
   1387e:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   13882:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   13886:	f015 fc2b 	bl	290e0 <k_queue_append>
		cb(conn, user_data, 0);
   1388a:	2200      	movs	r2, #0
   1388c:	4631      	mov	r1, r6
   1388e:	4620      	mov	r0, r4
   13890:	47a8      	blx	r5
	while (1) {
   13892:	e7d7      	b.n	13844 <tx_notify+0xc>
   13894:	20008bcc 	.word	0x20008bcc

00013898 <conn_tx_destroy>:
{
   13898:	b570      	push	{r4, r5, r6, lr}
   1389a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   1389c:	b949      	cbnz	r1, 138b2 <conn_tx_destroy+0x1a>
   1389e:	490d      	ldr	r1, [pc, #52]	; (138d4 <conn_tx_destroy+0x3c>)
   138a0:	480d      	ldr	r0, [pc, #52]	; (138d8 <conn_tx_destroy+0x40>)
   138a2:	2339      	movs	r3, #57	; 0x39
   138a4:	4a0d      	ldr	r2, [pc, #52]	; (138dc <conn_tx_destroy+0x44>)
   138a6:	f011 f87e 	bl	249a6 <assert_print>
   138aa:	2139      	movs	r1, #57	; 0x39
   138ac:	480b      	ldr	r0, [pc, #44]	; (138dc <conn_tx_destroy+0x44>)
   138ae:	f011 f873 	bl	24998 <assert_post_action>
	tx->cb = NULL;
   138b2:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   138b4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   138b8:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   138ba:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   138be:	4808      	ldr	r0, [pc, #32]	; (138e0 <conn_tx_destroy+0x48>)
   138c0:	f015 fc0e 	bl	290e0 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   138c4:	4631      	mov	r1, r6
   138c6:	4620      	mov	r0, r4
   138c8:	462b      	mov	r3, r5
}
   138ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   138ce:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   138d2:	4718      	bx	r3
   138d4:	0002de37 	.word	0x0002de37
   138d8:	0002b339 	.word	0x0002b339
   138dc:	0002ddec 	.word	0x0002ddec
   138e0:	20008bcc 	.word	0x20008bcc

000138e4 <send_frag>:
{
   138e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   138e8:	4604      	mov	r4, r0
   138ea:	460e      	mov	r6, r1
   138ec:	4617      	mov	r7, r2
   138ee:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   138f0:	698d      	ldr	r5, [r1, #24]
{
   138f2:	b085      	sub	sp, #20
	return z_impl_k_sem_take(sem, timeout);
   138f4:	f04f 33ff 	mov.w	r3, #4294967295
   138f8:	f04f 32ff 	mov.w	r2, #4294967295
   138fc:	4849      	ldr	r0, [pc, #292]	; (13a24 <send_frag+0x140>)
   138fe:	f00c f931 	bl	1fb64 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   13902:	7b63      	ldrb	r3, [r4, #13]
   13904:	2b07      	cmp	r3, #7
   13906:	f040 8081 	bne.w	13a0c <send_frag+0x128>
	__asm__ volatile(
   1390a:	f04f 0320 	mov.w	r3, #32
   1390e:	f3ef 8211 	mrs	r2, BASEPRI
   13912:	f383 8812 	msr	BASEPRI_MAX, r3
   13916:	f3bf 8f6f 	isb	sy
	if (tx) {
   1391a:	2d00      	cmp	r5, #0
   1391c:	d049      	beq.n	139b2 <send_frag+0xce>
	parent->next = child;
   1391e:	2300      	movs	r3, #0
   13920:	602b      	str	r3, [r5, #0]
	return list->tail;
   13922:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   13924:	2b00      	cmp	r3, #0
   13926:	d141      	bne.n	139ac <send_frag+0xc8>
	list->head = node;
   13928:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1392c:	f382 8811 	msr	BASEPRI, r2
   13930:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   13934:	2104      	movs	r1, #4
   13936:	f106 000c 	add.w	r0, r6, #12
   1393a:	f005 fc37 	bl	191ac <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1393e:	8823      	ldrh	r3, [r4, #0]
   13940:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   13944:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   13948:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1394a:	8a33      	ldrh	r3, [r6, #16]
   1394c:	3b04      	subs	r3, #4
   1394e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13950:	2302      	movs	r3, #2
	return bt_send(buf);
   13952:	4630      	mov	r0, r6
   13954:	7633      	strb	r3, [r6, #24]
   13956:	f7fe fa9b 	bl	11e90 <bt_send>
	if (err) {
   1395a:	2800      	cmp	r0, #0
   1395c:	d060      	beq.n	13a20 <send_frag+0x13c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1395e:	4b32      	ldr	r3, [pc, #200]	; (13a28 <send_frag+0x144>)
   13960:	9003      	str	r0, [sp, #12]
   13962:	9302      	str	r3, [sp, #8]
   13964:	2300      	movs	r3, #0
   13966:	2201      	movs	r2, #1
   13968:	4618      	mov	r0, r3
   1396a:	e9cd 3300 	strd	r3, r3, [sp]
   1396e:	492f      	ldr	r1, [pc, #188]	; (13a2c <send_frag+0x148>)
   13970:	f012 fc8d 	bl	2628e <z_log_msg_runtime_create.constprop.0>
	__asm__ volatile(
   13974:	f04f 0320 	mov.w	r3, #32
   13978:	f3ef 8711 	mrs	r7, BASEPRI
   1397c:	f383 8812 	msr	BASEPRI_MAX, r3
   13980:	f3bf 8f6f 	isb	sy
		if (tx) {
   13984:	b315      	cbz	r5, 139cc <send_frag+0xe8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   13986:	4629      	mov	r1, r5
   13988:	f104 0014 	add.w	r0, r4, #20
   1398c:	f012 fc59 	bl	26242 <sys_slist_find_and_remove>
	__asm__ volatile(
   13990:	f387 8811 	msr	BASEPRI, r7
   13994:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   13998:	4822      	ldr	r0, [pc, #136]	; (13a24 <send_frag+0x140>)
   1399a:	f00c f89f 	bl	1fadc <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   1399e:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   139a0:	4629      	mov	r1, r5
   139a2:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   139a4:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   139a6:	f7ff ff77 	bl	13898 <conn_tx_destroy>
   139aa:	e028      	b.n	139fe <send_frag+0x11a>
	parent->next = child;
   139ac:	601d      	str	r5, [r3, #0]
	list->tail = node;
   139ae:	61a5      	str	r5, [r4, #24]
}
   139b0:	e7bc      	b.n	1392c <send_frag+0x48>
	return list->tail;
   139b2:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   139b4:	b133      	cbz	r3, 139c4 <send_frag+0xe0>
			pending_no_cb = &tail_tx->pending_no_cb;
   139b6:	f103 080c 	add.w	r8, r3, #12
   139ba:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   139bc:	3301      	adds	r3, #1
   139be:	f8c8 3000 	str.w	r3, [r8]
   139c2:	e7b3      	b.n	1392c <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   139c4:	69e3      	ldr	r3, [r4, #28]
   139c6:	f104 081c 	add.w	r8, r4, #28
   139ca:	e7f7      	b.n	139bc <send_frag+0xd8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   139cc:	f8d8 2000 	ldr.w	r2, [r8]
   139d0:	b95a      	cbnz	r2, 139ea <send_frag+0x106>
   139d2:	4917      	ldr	r1, [pc, #92]	; (13a30 <send_frag+0x14c>)
   139d4:	4817      	ldr	r0, [pc, #92]	; (13a34 <send_frag+0x150>)
   139d6:	f240 2327 	movw	r3, #551	; 0x227
   139da:	4a17      	ldr	r2, [pc, #92]	; (13a38 <send_frag+0x154>)
   139dc:	f010 ffe3 	bl	249a6 <assert_print>
   139e0:	f240 2127 	movw	r1, #551	; 0x227
   139e4:	4814      	ldr	r0, [pc, #80]	; (13a38 <send_frag+0x154>)
   139e6:	f010 ffd7 	bl	24998 <assert_post_action>
			(*pending_no_cb)--;
   139ea:	3a01      	subs	r2, #1
   139ec:	f8c8 2000 	str.w	r2, [r8]
   139f0:	f387 8811 	msr	BASEPRI, r7
   139f4:	f3bf 8f6f 	isb	sy
   139f8:	480a      	ldr	r0, [pc, #40]	; (13a24 <send_frag+0x140>)
   139fa:	f00c f86f 	bl	1fadc <z_impl_k_sem_give>
	if (always_consume) {
   139fe:	f1b9 0f00 	cmp.w	r9, #0
   13a02:	d109      	bne.n	13a18 <send_frag+0x134>
	return false;
   13a04:	2000      	movs	r0, #0
}
   13a06:	b005      	add	sp, #20
   13a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13a0c:	4805      	ldr	r0, [pc, #20]	; (13a24 <send_frag+0x140>)
   13a0e:	f00c f865 	bl	1fadc <z_impl_k_sem_give>
	if (tx) {
   13a12:	2d00      	cmp	r5, #0
   13a14:	d1c3      	bne.n	1399e <send_frag+0xba>
   13a16:	e7f2      	b.n	139fe <send_frag+0x11a>
		net_buf_unref(buf);
   13a18:	4630      	mov	r0, r6
   13a1a:	f005 fb01 	bl	19020 <net_buf_unref>
   13a1e:	e7f1      	b.n	13a04 <send_frag+0x120>
	return true;
   13a20:	2001      	movs	r0, #1
   13a22:	e7f0      	b.n	13a06 <send_frag+0x122>
   13a24:	20008100 	.word	0x20008100
   13a28:	0002d61b 	.word	0x0002d61b
   13a2c:	0002a378 	.word	0x0002a378
   13a30:	0002de3a 	.word	0x0002de3a
   13a34:	0002b339 	.word	0x0002b339
   13a38:	0002ddec 	.word	0x0002ddec

00013a3c <bt_conn_get_pkts>:
}
   13a3c:	4800      	ldr	r0, [pc, #0]	; (13a40 <bt_conn_get_pkts+0x4>)
   13a3e:	4770      	bx	lr
   13a40:	20008100 	.word	0x20008100

00013a44 <bt_conn_new>:
{
   13a44:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   13a46:	2200      	movs	r2, #0
   13a48:	4604      	mov	r4, r0
   13a4a:	428a      	cmp	r2, r1
   13a4c:	d102      	bne.n	13a54 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13a4e:	2400      	movs	r4, #0
}
   13a50:	4620      	mov	r0, r4
   13a52:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13a54:	2001      	movs	r0, #1
   13a56:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   13a5a:	e8d3 5fef 	ldaex	r5, [r3]
   13a5e:	2d00      	cmp	r5, #0
   13a60:	d104      	bne.n	13a6c <bt_conn_new+0x28>
   13a62:	e8c3 0fec 	stlex	ip, r0, [r3]
   13a66:	f1bc 0f00 	cmp.w	ip, #0
   13a6a:	d1f6      	bne.n	13a5a <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13a6c:	d002      	beq.n	13a74 <bt_conn_new+0x30>
   13a6e:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   13a70:	4402      	add	r2, r0
   13a72:	e7ea      	b.n	13a4a <bt_conn_new+0x6>
	if (!conn) {
   13a74:	2c00      	cmp	r4, #0
   13a76:	d0ea      	beq.n	13a4e <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   13a78:	22c4      	movs	r2, #196	; 0xc4
   13a7a:	2100      	movs	r1, #0
   13a7c:	4620      	mov	r0, r4
   13a7e:	f015 fd32 	bl	294e6 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   13a82:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13a86:	4904      	ldr	r1, [pc, #16]	; (13a98 <bt_conn_new+0x54>)
   13a88:	f00c fcac 	bl	203e4 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   13a8c:	4903      	ldr	r1, [pc, #12]	; (13a9c <bt_conn_new+0x58>)
   13a8e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13a92:	f00c facb 	bl	2002c <k_work_init>
	return conn;
   13a96:	e7db      	b.n	13a50 <bt_conn_new+0xc>
   13a98:	000144b1 	.word	0x000144b1
   13a9c:	000262ad 	.word	0x000262ad

00013aa0 <conn_cleanup>:
{
   13aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13aa4:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   13aa6:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   13aa8:	f104 0638 	add.w	r6, r4, #56	; 0x38
   13aac:	2300      	movs	r3, #0
   13aae:	2200      	movs	r2, #0
   13ab0:	4630      	mov	r0, r6
   13ab2:	f013 ff49 	bl	27948 <net_buf_get>
   13ab6:	4603      	mov	r3, r0
   13ab8:	b980      	cbnz	r0, 13adc <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   13aba:	6963      	ldr	r3, [r4, #20]
   13abc:	b1cb      	cbz	r3, 13af2 <conn_cleanup+0x52>
   13abe:	4918      	ldr	r1, [pc, #96]	; (13b20 <conn_cleanup+0x80>)
   13ac0:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   13ac4:	4a17      	ldr	r2, [pc, #92]	; (13b24 <conn_cleanup+0x84>)
   13ac6:	4818      	ldr	r0, [pc, #96]	; (13b28 <conn_cleanup+0x88>)
   13ac8:	f010 ff6d 	bl	249a6 <assert_print>
   13acc:	4817      	ldr	r0, [pc, #92]	; (13b2c <conn_cleanup+0x8c>)
   13ace:	f010 ff6a 	bl	249a6 <assert_print>
   13ad2:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   13ad6:	4813      	ldr	r0, [pc, #76]	; (13b24 <conn_cleanup+0x84>)
   13ad8:	f010 ff5e 	bl	24998 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   13adc:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   13ade:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   13ae0:	f005 fa9e 	bl	19020 <net_buf_unref>
		if (tx) {
   13ae4:	2d00      	cmp	r5, #0
   13ae6:	d0e1      	beq.n	13aac <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   13ae8:	4629      	mov	r1, r5
   13aea:	4620      	mov	r0, r4
   13aec:	f7ff fed4 	bl	13898 <conn_tx_destroy>
   13af0:	e7da      	b.n	13aa8 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   13af2:	69e3      	ldr	r3, [r4, #28]
   13af4:	b14b      	cbz	r3, 13b0a <conn_cleanup+0x6a>
   13af6:	490e      	ldr	r1, [pc, #56]	; (13b30 <conn_cleanup+0x90>)
   13af8:	f240 23b5 	movw	r3, #693	; 0x2b5
   13afc:	4a09      	ldr	r2, [pc, #36]	; (13b24 <conn_cleanup+0x84>)
   13afe:	480a      	ldr	r0, [pc, #40]	; (13b28 <conn_cleanup+0x88>)
   13b00:	f010 ff51 	bl	249a6 <assert_print>
   13b04:	f240 21b5 	movw	r1, #693	; 0x2b5
   13b08:	e7e5      	b.n	13ad6 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   13b0a:	4620      	mov	r0, r4
   13b0c:	f012 fbd1 	bl	262b2 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   13b10:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13b14:	2200      	movs	r2, #0
}
   13b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   13b1a:	2300      	movs	r3, #0
   13b1c:	f00c bd7e 	b.w	2061c <k_work_reschedule>
   13b20:	0002de4d 	.word	0x0002de4d
   13b24:	0002ddec 	.word	0x0002ddec
   13b28:	0002b339 	.word	0x0002b339
   13b2c:	0002de73 	.word	0x0002de73
   13b30:	0002de88 	.word	0x0002de88

00013b34 <bt_conn_recv>:
{
   13b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b36:	4616      	mov	r6, r2
   13b38:	b087      	sub	sp, #28
   13b3a:	4604      	mov	r4, r0
   13b3c:	460d      	mov	r5, r1
	tx_notify(conn);
   13b3e:	f7ff fe7b 	bl	13838 <tx_notify>
	switch (flags) {
   13b42:	2e01      	cmp	r6, #1
   13b44:	d02e      	beq.n	13ba4 <bt_conn_recv+0x70>
   13b46:	2e02      	cmp	r6, #2
   13b48:	d165      	bne.n	13c16 <bt_conn_recv+0xe2>
		if (conn->rx) {
   13b4a:	6923      	ldr	r3, [r4, #16]
   13b4c:	b163      	cbz	r3, 13b68 <bt_conn_recv+0x34>
			LOG_ERR("Unexpected first L2CAP frame");
   13b4e:	4b3d      	ldr	r3, [pc, #244]	; (13c44 <bt_conn_recv+0x110>)
   13b50:	2201      	movs	r2, #1
   13b52:	9302      	str	r3, [sp, #8]
   13b54:	2300      	movs	r3, #0
   13b56:	493c      	ldr	r1, [pc, #240]	; (13c48 <bt_conn_recv+0x114>)
   13b58:	4618      	mov	r0, r3
   13b5a:	e9cd 3300 	strd	r3, r3, [sp]
   13b5e:	f012 fb96 	bl	2628e <z_log_msg_runtime_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   13b62:	4620      	mov	r0, r4
   13b64:	f012 fba5 	bl	262b2 <bt_conn_reset_rx_state>
		conn->rx = buf;
   13b68:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   13b6a:	6921      	ldr	r1, [r4, #16]
   13b6c:	8a0a      	ldrh	r2, [r1, #16]
   13b6e:	2a01      	cmp	r2, #1
   13b70:	d966      	bls.n	13c40 <bt_conn_recv+0x10c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   13b72:	68cb      	ldr	r3, [r1, #12]
   13b74:	881b      	ldrh	r3, [r3, #0]
   13b76:	3304      	adds	r3, #4
   13b78:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   13b7a:	429a      	cmp	r2, r3
   13b7c:	d360      	bcc.n	13c40 <bt_conn_recv+0x10c>
	if (conn->rx->len > acl_total_len) {
   13b7e:	d956      	bls.n	13c2e <bt_conn_recv+0xfa>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   13b80:	e9cd 2303 	strd	r2, r3, [sp, #12]
   13b84:	4b31      	ldr	r3, [pc, #196]	; (13c4c <bt_conn_recv+0x118>)
   13b86:	2201      	movs	r2, #1
   13b88:	9302      	str	r3, [sp, #8]
   13b8a:	2300      	movs	r3, #0
   13b8c:	492e      	ldr	r1, [pc, #184]	; (13c48 <bt_conn_recv+0x114>)
   13b8e:	4618      	mov	r0, r3
   13b90:	e9cd 3300 	strd	r3, r3, [sp]
   13b94:	f012 fb7b 	bl	2628e <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   13b98:	4620      	mov	r0, r4
}
   13b9a:	b007      	add	sp, #28
   13b9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_reset_rx_state(conn);
   13ba0:	f012 bb87 	b.w	262b2 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   13ba4:	6923      	ldr	r3, [r4, #16]
   13ba6:	b963      	cbnz	r3, 13bc2 <bt_conn_recv+0x8e>
			LOG_ERR("Unexpected L2CAP continuation");
   13ba8:	4a29      	ldr	r2, [pc, #164]	; (13c50 <bt_conn_recv+0x11c>)
   13baa:	4618      	mov	r0, r3
   13bac:	e9cd 3201 	strd	r3, r2, [sp, #4]
   13bb0:	4925      	ldr	r1, [pc, #148]	; (13c48 <bt_conn_recv+0x114>)
   13bb2:	4632      	mov	r2, r6
   13bb4:	9300      	str	r3, [sp, #0]
   13bb6:	f012 fb6a 	bl	2628e <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   13bba:	4620      	mov	r0, r4
   13bbc:	f012 fb79 	bl	262b2 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   13bc0:	e001      	b.n	13bc6 <bt_conn_recv+0x92>
		if (!buf->len) {
   13bc2:	8a2f      	ldrh	r7, [r5, #16]
   13bc4:	b92f      	cbnz	r7, 13bd2 <bt_conn_recv+0x9e>
			net_buf_unref(buf);
   13bc6:	4628      	mov	r0, r5
}
   13bc8:	b007      	add	sp, #28
   13bca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			net_buf_unref(buf);
   13bce:	f005 ba27 	b.w	19020 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   13bd2:	f103 000c 	add.w	r0, r3, #12
   13bd6:	f013 fecc 	bl	27972 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   13bda:	4287      	cmp	r7, r0
   13bdc:	d911      	bls.n	13c02 <bt_conn_recv+0xce>
			LOG_ERR("Not enough buffer space for L2CAP data");
   13bde:	2700      	movs	r7, #0
   13be0:	4b1c      	ldr	r3, [pc, #112]	; (13c54 <bt_conn_recv+0x120>)
   13be2:	4632      	mov	r2, r6
   13be4:	4638      	mov	r0, r7
   13be6:	4918      	ldr	r1, [pc, #96]	; (13c48 <bt_conn_recv+0x114>)
   13be8:	9302      	str	r3, [sp, #8]
   13bea:	e9cd 7700 	strd	r7, r7, [sp]
   13bee:	463b      	mov	r3, r7
   13bf0:	f012 fb4d 	bl	2628e <z_log_msg_runtime_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   13bf4:	463a      	mov	r2, r7
   13bf6:	4620      	mov	r0, r4
   13bf8:	6921      	ldr	r1, [r4, #16]
   13bfa:	f000 fefd 	bl	149f8 <bt_l2cap_recv>
			conn->rx = NULL;
   13bfe:	6127      	str	r7, [r4, #16]
   13c00:	e7e1      	b.n	13bc6 <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13c02:	6920      	ldr	r0, [r4, #16]
   13c04:	8a2a      	ldrh	r2, [r5, #16]
   13c06:	68e9      	ldr	r1, [r5, #12]
   13c08:	300c      	adds	r0, #12
   13c0a:	f013 feba 	bl	27982 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   13c0e:	4628      	mov	r0, r5
   13c10:	f005 fa06 	bl	19020 <net_buf_unref>
		break;
   13c14:	e7a9      	b.n	13b6a <bt_conn_recv+0x36>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   13c16:	4b10      	ldr	r3, [pc, #64]	; (13c58 <bt_conn_recv+0x124>)
   13c18:	2201      	movs	r2, #1
   13c1a:	9302      	str	r3, [sp, #8]
   13c1c:	2300      	movs	r3, #0
   13c1e:	490a      	ldr	r1, [pc, #40]	; (13c48 <bt_conn_recv+0x114>)
   13c20:	4618      	mov	r0, r3
   13c22:	e9cd 3300 	strd	r3, r3, [sp]
	switch (flags) {
   13c26:	9603      	str	r6, [sp, #12]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   13c28:	f012 fb31 	bl	2628e <z_log_msg_runtime_create.constprop.0>
   13c2c:	e7c5      	b.n	13bba <bt_conn_recv+0x86>
	conn->rx = NULL;
   13c2e:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   13c30:	2201      	movs	r2, #1
   13c32:	4620      	mov	r0, r4
	conn->rx = NULL;
   13c34:	6123      	str	r3, [r4, #16]
}
   13c36:	b007      	add	sp, #28
   13c38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf, true);
   13c3c:	f000 bedc 	b.w	149f8 <bt_l2cap_recv>
}
   13c40:	b007      	add	sp, #28
   13c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c44:	0002dea1 	.word	0x0002dea1
   13c48:	0002a378 	.word	0x0002a378
   13c4c:	0002df21 	.word	0x0002df21
   13c50:	0002debe 	.word	0x0002debe
   13c54:	0002dedc 	.word	0x0002dedc
   13c58:	0002df03 	.word	0x0002df03

00013c5c <bt_conn_send_cb>:
{
   13c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13c60:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   13c62:	7b43      	ldrb	r3, [r0, #13]
{
   13c64:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   13c66:	2b07      	cmp	r3, #7
{
   13c68:	4688      	mov	r8, r1
   13c6a:	4617      	mov	r7, r2
   13c6c:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
   13c6e:	d00c      	beq.n	13c8a <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   13c70:	4b28      	ldr	r3, [pc, #160]	; (13d14 <bt_conn_send_cb+0xb8>)
   13c72:	2201      	movs	r2, #1
   13c74:	9302      	str	r3, [sp, #8]
   13c76:	2300      	movs	r3, #0
   13c78:	4927      	ldr	r1, [pc, #156]	; (13d18 <bt_conn_send_cb+0xbc>)
   13c7a:	4618      	mov	r0, r3
   13c7c:	e9cd 3300 	strd	r3, r3, [sp]
   13c80:	f012 fb05 	bl	2628e <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   13c84:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   13c88:	e01c      	b.n	13cc4 <bt_conn_send_cb+0x68>
	if (cb) {
   13c8a:	2a00      	cmp	r2, #0
   13c8c:	d03f      	beq.n	13d0e <bt_conn_send_cb+0xb2>
	return z_impl_z_current_get();
   13c8e:	f00d fe4d 	bl	2192c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   13c92:	4b22      	ldr	r3, [pc, #136]	; (13d1c <bt_conn_send_cb+0xc0>)
   13c94:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   13c96:	4822      	ldr	r0, [pc, #136]	; (13d20 <bt_conn_send_cb+0xc4>)
   13c98:	bf07      	ittee	eq
   13c9a:	2200      	moveq	r2, #0
   13c9c:	2300      	moveq	r3, #0
   13c9e:	f04f 32ff 	movne.w	r2, #4294967295
   13ca2:	f04f 33ff 	movne.w	r3, #4294967295
   13ca6:	f00b feaf 	bl	1fa08 <z_impl_k_queue_get>
   13caa:	4604      	mov	r4, r0
		if (!tx) {
   13cac:	b968      	cbnz	r0, 13cca <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   13cae:	4b1d      	ldr	r3, [pc, #116]	; (13d24 <bt_conn_send_cb+0xc8>)
   13cb0:	9000      	str	r0, [sp, #0]
   13cb2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13cb6:	2201      	movs	r2, #1
   13cb8:	4603      	mov	r3, r0
   13cba:	4917      	ldr	r1, [pc, #92]	; (13d18 <bt_conn_send_cb+0xbc>)
   13cbc:	f012 fae7 	bl	2628e <z_log_msg_runtime_create.constprop.0>
			return -ENOBUFS;
   13cc0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   13cc4:	b005      	add	sp, #20
   13cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   13cca:	7b73      	ldrb	r3, [r6, #13]
   13ccc:	2500      	movs	r5, #0
   13cce:	2b07      	cmp	r3, #7
   13cd0:	d011      	beq.n	13cf6 <bt_conn_send_cb+0x9a>
			LOG_WRN("Disconnected while allocating context");
   13cd2:	4b15      	ldr	r3, [pc, #84]	; (13d28 <bt_conn_send_cb+0xcc>)
   13cd4:	4628      	mov	r0, r5
   13cd6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13cda:	2202      	movs	r2, #2
   13cdc:	462b      	mov	r3, r5
   13cde:	490e      	ldr	r1, [pc, #56]	; (13d18 <bt_conn_send_cb+0xbc>)
   13ce0:	9500      	str	r5, [sp, #0]
   13ce2:	f012 fad4 	bl	2628e <z_log_msg_runtime_create.constprop.0>
	k_fifo_put(&free_tx, tx);
   13ce6:	4621      	mov	r1, r4
	tx->user_data = NULL;
   13ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
	k_fifo_put(&free_tx, tx);
   13cec:	480c      	ldr	r0, [pc, #48]	; (13d20 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   13cee:	60e5      	str	r5, [r4, #12]
	k_fifo_put(&free_tx, tx);
   13cf0:	f015 f9f6 	bl	290e0 <k_queue_append>
}
   13cf4:	e7c6      	b.n	13c84 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   13cf6:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   13cfa:	60c5      	str	r5, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   13cfc:	f106 0038 	add.w	r0, r6, #56	; 0x38
   13d00:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   13d02:	f8c8 4018 	str.w	r4, [r8, #24]
	net_buf_put(&conn->tx_queue, buf);
   13d06:	f005 f965 	bl	18fd4 <net_buf_put>
	return 0;
   13d0a:	2000      	movs	r0, #0
   13d0c:	e7da      	b.n	13cc4 <bt_conn_send_cb+0x68>
   13d0e:	4614      	mov	r4, r2
   13d10:	e7f4      	b.n	13cfc <bt_conn_send_cb+0xa0>
   13d12:	bf00      	nop
   13d14:	0002df3c 	.word	0x0002df3c
   13d18:	0002a378 	.word	0x0002a378
   13d1c:	20009c78 	.word	0x20009c78
   13d20:	20008bcc 	.word	0x20008bcc
   13d24:	0002df4b 	.word	0x0002df4b
   13d28:	0002df69 	.word	0x0002df69

00013d2c <bt_conn_prepare_events>:
{
   13d2c:	b570      	push	{r4, r5, r6, lr}
   13d2e:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   13d30:	4817      	ldr	r0, [pc, #92]	; (13d90 <bt_conn_prepare_events+0x64>)
   13d32:	f015 fb7d 	bl	29430 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   13d36:	2200      	movs	r2, #0
   13d38:	2101      	movs	r1, #1
   13d3a:	4620      	mov	r0, r4
   13d3c:	4b14      	ldr	r3, [pc, #80]	; (13d90 <bt_conn_prepare_events+0x64>)
   13d3e:	f00e fcfd 	bl	2273c <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   13d42:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13d46:	4b13      	ldr	r3, [pc, #76]	; (13d94 <bt_conn_prepare_events+0x68>)
   13d48:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   13d4c:	b90a      	cbnz	r2, 13d52 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   13d4e:	2001      	movs	r0, #1
}
   13d50:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   13d52:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   13d56:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   13d5a:	b953      	cbnz	r3, 13d72 <bt_conn_prepare_events+0x46>
   13d5c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   13d60:	1d28      	adds	r0, r5, #4
   13d62:	f012 fa89 	bl	26278 <atomic_and>
   13d66:	0643      	lsls	r3, r0, #25
   13d68:	d503      	bpl.n	13d72 <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   13d6a:	4628      	mov	r0, r5
   13d6c:	f7ff fe98 	bl	13aa0 <conn_cleanup>
		return -ENOTCONN;
   13d70:	e7ed      	b.n	13d4e <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   13d72:	7b6b      	ldrb	r3, [r5, #13]
   13d74:	2b07      	cmp	r3, #7
   13d76:	d1ea      	bne.n	13d4e <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   13d78:	4630      	mov	r0, r6
   13d7a:	4b07      	ldr	r3, [pc, #28]	; (13d98 <bt_conn_prepare_events+0x6c>)
   13d7c:	2200      	movs	r2, #0
   13d7e:	2104      	movs	r1, #4
   13d80:	f00e fcdc 	bl	2273c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   13d84:	2301      	movs	r3, #1
			ev_count++;
   13d86:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   13d88:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   13d8c:	e7e0      	b.n	13d50 <bt_conn_prepare_events+0x24>
   13d8e:	bf00      	nop
   13d90:	200084b8 	.word	0x200084b8
   13d94:	200098bc 	.word	0x200098bc
   13d98:	20009830 	.word	0x20009830

00013d9c <bt_conn_ref>:
{
   13d9c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   13d9e:	b180      	cbz	r0, 13dc2 <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   13da0:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   13da4:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   13da8:	b1bb      	cbz	r3, 13dda <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   13daa:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13dac:	e8d2 4fef 	ldaex	r4, [r2]
   13db0:	429c      	cmp	r4, r3
   13db2:	d104      	bne.n	13dbe <bt_conn_ref+0x22>
   13db4:	e8c2 1fec 	stlex	ip, r1, [r2]
   13db8:	f1bc 0f00 	cmp.w	ip, #0
   13dbc:	d1f6      	bne.n	13dac <bt_conn_ref+0x10>
   13dbe:	d1f1      	bne.n	13da4 <bt_conn_ref+0x8>
}
   13dc0:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   13dc2:	4907      	ldr	r1, [pc, #28]	; (13de0 <bt_conn_ref+0x44>)
   13dc4:	4807      	ldr	r0, [pc, #28]	; (13de4 <bt_conn_ref+0x48>)
   13dc6:	f240 437c 	movw	r3, #1148	; 0x47c
   13dca:	4a07      	ldr	r2, [pc, #28]	; (13de8 <bt_conn_ref+0x4c>)
   13dcc:	f010 fdeb 	bl	249a6 <assert_print>
   13dd0:	f240 417c 	movw	r1, #1148	; 0x47c
   13dd4:	4804      	ldr	r0, [pc, #16]	; (13de8 <bt_conn_ref+0x4c>)
   13dd6:	f010 fddf 	bl	24998 <assert_post_action>
			return NULL;
   13dda:	4618      	mov	r0, r3
   13ddc:	e7f0      	b.n	13dc0 <bt_conn_ref+0x24>
   13dde:	bf00      	nop
   13de0:	0002d68d 	.word	0x0002d68d
   13de4:	0002b339 	.word	0x0002b339
   13de8:	0002ddec 	.word	0x0002ddec

00013dec <bt_conn_unref>:
{
   13dec:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   13dee:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13df2:	e8d3 2fef 	ldaex	r2, [r3]
   13df6:	1e51      	subs	r1, r2, #1
   13df8:	e8c3 1fe4 	stlex	r4, r1, [r3]
   13dfc:	2c00      	cmp	r4, #0
   13dfe:	d1f8      	bne.n	13df2 <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   13e00:	2a00      	cmp	r2, #0
   13e02:	dc0e      	bgt.n	13e22 <bt_conn_unref+0x36>
   13e04:	490d      	ldr	r1, [pc, #52]	; (13e3c <bt_conn_unref+0x50>)
   13e06:	f44f 6393 	mov.w	r3, #1176	; 0x498
   13e0a:	4a0d      	ldr	r2, [pc, #52]	; (13e40 <bt_conn_unref+0x54>)
   13e0c:	480d      	ldr	r0, [pc, #52]	; (13e44 <bt_conn_unref+0x58>)
   13e0e:	f010 fdca 	bl	249a6 <assert_print>
   13e12:	480d      	ldr	r0, [pc, #52]	; (13e48 <bt_conn_unref+0x5c>)
   13e14:	f010 fdc7 	bl	249a6 <assert_print>
   13e18:	f44f 6193 	mov.w	r1, #1176	; 0x498
   13e1c:	4808      	ldr	r0, [pc, #32]	; (13e40 <bt_conn_unref+0x54>)
   13e1e:	f010 fdbb 	bl	24998 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   13e22:	f240 1201 	movw	r2, #257	; 0x101
   13e26:	8841      	ldrh	r1, [r0, #2]
   13e28:	4291      	cmp	r1, r2
   13e2a:	d106      	bne.n	13e3a <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13e2c:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   13e30:	b91b      	cbnz	r3, 13e3a <bt_conn_unref+0x4e>
}
   13e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   13e36:	f7ff baa9 	b.w	1338c <bt_le_adv_resume>
}
   13e3a:	bd10      	pop	{r4, pc}
   13e3c:	0002df8f 	.word	0x0002df8f
   13e40:	0002ddec 	.word	0x0002ddec
   13e44:	0002b339 	.word	0x0002b339
   13e48:	0002df97 	.word	0x0002df97

00013e4c <bt_conn_lookup_handle>:
{
   13e4c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   13e4e:	2101      	movs	r1, #1
   13e50:	4801      	ldr	r0, [pc, #4]	; (13e58 <bt_conn_lookup_handle+0xc>)
   13e52:	f012 ba37 	b.w	262c4 <conn_lookup_handle>
   13e56:	bf00      	nop
   13e58:	200097f8 	.word	0x200097f8

00013e5c <bt_conn_set_state>:
{
   13e5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == state) {
   13e5e:	7b46      	ldrb	r6, [r0, #13]
{
   13e60:	4604      	mov	r4, r0
	if (conn->state == state) {
   13e62:	428e      	cmp	r6, r1
{
   13e64:	460d      	mov	r5, r1
	if (conn->state == state) {
   13e66:	d111      	bne.n	13e8c <bt_conn_set_state+0x30>
	switch (state) {
   13e68:	2e08      	cmp	r6, #8
   13e6a:	bf96      	itet	ls
   13e6c:	4b65      	ldrls	r3, [pc, #404]	; (14004 <bt_conn_set_state+0x1a8>)
	if (conn->state == state) {
   13e6e:	4b66      	ldrhi	r3, [pc, #408]	; (14008 <bt_conn_set_state+0x1ac>)
   13e70:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   13e74:	9303      	str	r3, [sp, #12]
   13e76:	4b65      	ldr	r3, [pc, #404]	; (1400c <bt_conn_set_state+0x1b0>)
		LOG_WRN("no valid (%u) state was set", state);
   13e78:	9302      	str	r3, [sp, #8]
   13e7a:	2300      	movs	r3, #0
   13e7c:	2202      	movs	r2, #2
   13e7e:	4618      	mov	r0, r3
   13e80:	e9cd 3300 	strd	r3, r3, [sp]
   13e84:	4962      	ldr	r1, [pc, #392]	; (14010 <bt_conn_set_state+0x1b4>)
   13e86:	f012 fa02 	bl	2628e <z_log_msg_runtime_create.constprop.0>
   13e8a:	e098      	b.n	13fbe <bt_conn_set_state+0x162>
	conn->state = state;
   13e8c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   13e8e:	b926      	cbnz	r6, 13e9a <bt_conn_set_state+0x3e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   13e90:	7883      	ldrb	r3, [r0, #2]
   13e92:	2b08      	cmp	r3, #8
   13e94:	d001      	beq.n	13e9a <bt_conn_set_state+0x3e>
			bt_conn_ref(conn);
   13e96:	f7ff ff81 	bl	13d9c <bt_conn_ref>
	switch (conn->state) {
   13e9a:	7b63      	ldrb	r3, [r4, #13]
   13e9c:	2b08      	cmp	r3, #8
   13e9e:	f200 80ad 	bhi.w	13ffc <bt_conn_set_state+0x1a0>
   13ea2:	e8df f003 	tbb	[pc, r3]
   13ea6:	053a      	.short	0x053a
   13ea8:	8c8c8c8c 	.word	0x8c8c8c8c
   13eac:	1c8c      	.short	0x1c8c
   13eae:	8c          	.byte	0x8c
   13eaf:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   13eb0:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   13eb2:	4d58      	ldr	r5, [pc, #352]	; (14014 <bt_conn_set_state+0x1b8>)
	__asm__ volatile(
   13eb4:	f04f 0220 	mov.w	r2, #32
   13eb8:	f3ef 8311 	mrs	r3, BASEPRI
   13ebc:	f382 8812 	msr	BASEPRI_MAX, r2
   13ec0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   13ec4:	69e2      	ldr	r2, [r4, #28]
   13ec6:	2a00      	cmp	r2, #0
   13ec8:	d073      	beq.n	13fb2 <bt_conn_set_state+0x156>
			conn->pending_no_cb--;
   13eca:	3a01      	subs	r2, #1
   13ecc:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   13ece:	f383 8811 	msr	BASEPRI, r3
   13ed2:	f3bf 8f6f 	isb	sy
   13ed6:	4628      	mov	r0, r5
   13ed8:	f00b fe00 	bl	1fadc <z_impl_k_sem_give>
}
   13edc:	e7ea      	b.n	13eb4 <bt_conn_set_state+0x58>
		if (conn->type == BT_CONN_TYPE_SCO) {
   13ede:	78a3      	ldrb	r3, [r4, #2]
   13ee0:	2b04      	cmp	r3, #4
   13ee2:	d06c      	beq.n	13fbe <bt_conn_set_state+0x162>
	z_impl_k_queue_init(queue);
   13ee4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13ee8:	f015 f8ed 	bl	290c6 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   13eec:	2100      	movs	r1, #0
   13eee:	484a      	ldr	r0, [pc, #296]	; (14018 <bt_conn_set_state+0x1bc>)
   13ef0:	f00e fd42 	bl	22978 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   13ef4:	2300      	movs	r3, #0
	list->tail = NULL;
   13ef6:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13efa:	78e3      	ldrb	r3, [r4, #3]
   13efc:	2b01      	cmp	r3, #1
   13efe:	d15e      	bne.n	13fbe <bt_conn_set_state+0x162>
			conn->le.conn_param_retry_countdown =
   13f00:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   13f02:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   13f06:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   13f0a:	2300      	movs	r3, #0
   13f0c:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   13f10:	b004      	add	sp, #16
   13f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   13f16:	f00c bb07 	b.w	20528 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   13f1a:	78a3      	ldrb	r3, [r4, #2]
   13f1c:	2b04      	cmp	r3, #4
   13f1e:	d105      	bne.n	13f2c <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   13f20:	4620      	mov	r0, r4
}
   13f22:	b004      	add	sp, #16
   13f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   13f28:	f7ff bf60 	b.w	13dec <bt_conn_unref>
		switch (old_state) {
   13f2c:	2e08      	cmp	r6, #8
   13f2e:	d846      	bhi.n	13fbe <bt_conn_set_state+0x162>
   13f30:	a301      	add	r3, pc, #4	; (adr r3, 13f38 <bt_conn_set_state+0xdc>)
   13f32:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   13f36:	bf00      	nop
   13f38:	00013fad 	.word	0x00013fad
   13f3c:	00013f5d 	.word	0x00013f5d
   13f40:	00013f9f 	.word	0x00013f9f
   13f44:	00013f21 	.word	0x00013f21
   13f48:	00013f21 	.word	0x00013f21
   13f4c:	00013f9f 	.word	0x00013f9f
   13f50:	00013f9f 	.word	0x00013f9f
   13f54:	00013fbf 	.word	0x00013fbf
   13f58:	00013fad 	.word	0x00013fad
			tx_notify(conn);
   13f5c:	4620      	mov	r0, r4
   13f5e:	f7ff fc6b 	bl	13838 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   13f62:	78a3      	ldrb	r3, [r4, #2]
   13f64:	2b01      	cmp	r3, #1
   13f66:	d10a      	bne.n	13f7e <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   13f68:	f104 0560 	add.w	r5, r4, #96	; 0x60
   13f6c:	4628      	mov	r0, r5
   13f6e:	f015 f940 	bl	291f2 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   13f72:	f010 0f0c 	tst.w	r0, #12
   13f76:	d002      	beq.n	13f7e <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   13f78:	4628      	mov	r0, r5
   13f7a:	f00c fb55 	bl	20628 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13f7e:	3404      	adds	r4, #4
   13f80:	e8d4 3fef 	ldaex	r3, [r4]
   13f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13f88:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13f8c:	2a00      	cmp	r2, #0
   13f8e:	d1f7      	bne.n	13f80 <bt_conn_set_state+0x124>
   13f90:	2100      	movs	r1, #0
   13f92:	4821      	ldr	r0, [pc, #132]	; (14018 <bt_conn_set_state+0x1bc>)
}
   13f94:	b004      	add	sp, #16
   13f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13f9a:	f00e bced 	b.w	22978 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   13f9e:	7b23      	ldrb	r3, [r4, #12]
   13fa0:	2b00      	cmp	r3, #0
   13fa2:	d0bd      	beq.n	13f20 <bt_conn_set_state+0xc4>
				notify_connected(conn);
   13fa4:	4620      	mov	r0, r4
   13fa6:	f7ff fc11 	bl	137cc <notify_connected>
   13faa:	e7b9      	b.n	13f20 <bt_conn_set_state+0xc4>
			LOG_WRN("Invalid (%u) old state", state);
   13fac:	4b1b      	ldr	r3, [pc, #108]	; (1401c <bt_conn_set_state+0x1c0>)
   13fae:	9503      	str	r5, [sp, #12]
   13fb0:	e762      	b.n	13e78 <bt_conn_set_state+0x1c>
	return list->head;
   13fb2:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   13fb4:	b929      	cbnz	r1, 13fc2 <bt_conn_set_state+0x166>
   13fb6:	f383 8811 	msr	BASEPRI, r3
   13fba:	f3bf 8f6f 	isb	sy
}
   13fbe:	b004      	add	sp, #16
   13fc0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13fc2:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   13fc4:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13fc6:	4281      	cmp	r1, r0
	list->tail = node;
   13fc8:	bf08      	it	eq
   13fca:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   13fcc:	6162      	str	r2, [r4, #20]
   13fce:	f383 8811 	msr	BASEPRI, r3
   13fd2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   13fd6:	f04f 0220 	mov.w	r2, #32
   13fda:	f3ef 8311 	mrs	r3, BASEPRI
   13fde:	f382 8812 	msr	BASEPRI_MAX, r2
   13fe2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   13fe6:	68ca      	ldr	r2, [r1, #12]
   13fe8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   13fea:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   13fec:	f383 8811 	msr	BASEPRI, r3
   13ff0:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   13ff4:	4620      	mov	r0, r4
   13ff6:	f7ff fc4f 	bl	13898 <conn_tx_destroy>
   13ffa:	e76c      	b.n	13ed6 <bt_conn_set_state+0x7a>
		LOG_WRN("no valid (%u) state was set", state);
   13ffc:	4b08      	ldr	r3, [pc, #32]	; (14020 <bt_conn_set_state+0x1c4>)
   13ffe:	9503      	str	r5, [sp, #12]
   14000:	e73a      	b.n	13e78 <bt_conn_set_state+0x1c>
   14002:	bf00      	nop
   14004:	0002acbc 	.word	0x0002acbc
   14008:	0002dfb5 	.word	0x0002dfb5
   1400c:	0002dfbf 	.word	0x0002dfbf
   14010:	0002a378 	.word	0x0002a378
   14014:	20008100 	.word	0x20008100
   14018:	200084b8 	.word	0x200084b8
   1401c:	0002dfd0 	.word	0x0002dfd0
   14020:	0002dfe7 	.word	0x0002dfe7

00014024 <bt_conn_index>:
		index = conn - acl_conns;
   14024:	4a0c      	ldr	r2, [pc, #48]	; (14058 <bt_conn_index+0x34>)
{
   14026:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   14028:	490c      	ldr	r1, [pc, #48]	; (1405c <bt_conn_index+0x38>)
   1402a:	1a83      	subs	r3, r0, r2
   1402c:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1402e:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   14030:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   14034:	d00e      	beq.n	14054 <bt_conn_index+0x30>
   14036:	490a      	ldr	r1, [pc, #40]	; (14060 <bt_conn_index+0x3c>)
   14038:	f240 43b6 	movw	r3, #1206	; 0x4b6
   1403c:	4a09      	ldr	r2, [pc, #36]	; (14064 <bt_conn_index+0x40>)
   1403e:	480a      	ldr	r0, [pc, #40]	; (14068 <bt_conn_index+0x44>)
   14040:	f010 fcb1 	bl	249a6 <assert_print>
   14044:	4809      	ldr	r0, [pc, #36]	; (1406c <bt_conn_index+0x48>)
   14046:	f010 fcae 	bl	249a6 <assert_print>
   1404a:	f240 41b6 	movw	r1, #1206	; 0x4b6
   1404e:	4805      	ldr	r0, [pc, #20]	; (14064 <bt_conn_index+0x40>)
   14050:	f010 fca2 	bl	24998 <assert_post_action>
}
   14054:	b2d8      	uxtb	r0, r3
   14056:	bd08      	pop	{r3, pc}
   14058:	200097f8 	.word	0x200097f8
   1405c:	c28f5c29 	.word	0xc28f5c29
   14060:	0002e003 	.word	0x0002e003
   14064:	0002ddec 	.word	0x0002ddec
   14068:	0002b339 	.word	0x0002b339
   1406c:	0002e0cc 	.word	0x0002e0cc

00014070 <bt_conn_create_pdu_timeout>:
{
   14070:	b5f0      	push	{r4, r5, r6, r7, lr}
   14072:	b085      	sub	sp, #20
   14074:	4604      	mov	r4, r0
   14076:	460d      	mov	r5, r1
   14078:	4617      	mov	r7, r2
   1407a:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   1407c:	f014 fff4 	bl	29068 <k_is_in_isr>
   14080:	b158      	cbz	r0, 1409a <bt_conn_create_pdu_timeout+0x2a>
   14082:	4914      	ldr	r1, [pc, #80]	; (140d4 <bt_conn_create_pdu_timeout+0x64>)
   14084:	4814      	ldr	r0, [pc, #80]	; (140d8 <bt_conn_create_pdu_timeout+0x68>)
   14086:	f240 43d2 	movw	r3, #1234	; 0x4d2
   1408a:	4a14      	ldr	r2, [pc, #80]	; (140dc <bt_conn_create_pdu_timeout+0x6c>)
   1408c:	f010 fc8b 	bl	249a6 <assert_print>
   14090:	f240 41d2 	movw	r1, #1234	; 0x4d2
   14094:	4811      	ldr	r0, [pc, #68]	; (140dc <bt_conn_create_pdu_timeout+0x6c>)
   14096:	f010 fc7f 	bl	24998 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1409a:	4911      	ldr	r1, [pc, #68]	; (140e0 <bt_conn_create_pdu_timeout+0x70>)
   1409c:	463a      	mov	r2, r7
   1409e:	2c00      	cmp	r4, #0
   140a0:	bf14      	ite	ne
   140a2:	4620      	movne	r0, r4
   140a4:	4608      	moveq	r0, r1
   140a6:	4633      	mov	r3, r6
   140a8:	f013 fc49 	bl	2793e <net_buf_alloc_fixed>
	if (!buf) {
   140ac:	4604      	mov	r4, r0
   140ae:	b958      	cbnz	r0, 140c8 <bt_conn_create_pdu_timeout+0x58>
		LOG_WRN("Unable to allocate buffer within timeout");
   140b0:	4b0c      	ldr	r3, [pc, #48]	; (140e4 <bt_conn_create_pdu_timeout+0x74>)
   140b2:	2202      	movs	r2, #2
   140b4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   140b8:	490b      	ldr	r1, [pc, #44]	; (140e8 <bt_conn_create_pdu_timeout+0x78>)
   140ba:	4603      	mov	r3, r0
   140bc:	9000      	str	r0, [sp, #0]
   140be:	f012 f8e6 	bl	2628e <z_log_msg_runtime_create.constprop.0>
}
   140c2:	4620      	mov	r0, r4
   140c4:	b005      	add	sp, #20
   140c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   140c8:	1d69      	adds	r1, r5, #5
   140ca:	300c      	adds	r0, #12
   140cc:	f004 fe96 	bl	18dfc <net_buf_simple_reserve>
	return buf;
   140d0:	e7f7      	b.n	140c2 <bt_conn_create_pdu_timeout+0x52>
   140d2:	bf00      	nop
   140d4:	0002e0e6 	.word	0x0002e0e6
   140d8:	0002b339 	.word	0x0002b339
   140dc:	0002ddec 	.word	0x0002ddec
   140e0:	20008c1c 	.word	0x20008c1c
   140e4:	0002e0f5 	.word	0x0002e0f5
   140e8:	0002a378 	.word	0x0002a378

000140ec <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   140ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140ee:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   140f0:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   140f2:	e8d0 3faf 	lda	r3, [r0]
   140f6:	059b      	lsls	r3, r3, #22
   140f8:	d511      	bpl.n	1411e <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   140fa:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   140fe:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   14102:	429a      	cmp	r2, r3
   14104:	d80b      	bhi.n	1411e <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   14106:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   1410a:	429a      	cmp	r2, r3
   1410c:	d307      	bcc.n	1411e <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1410e:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   14112:	429a      	cmp	r2, r3
   14114:	d103      	bne.n	1411e <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14116:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1411a:	f012 f8ad 	bl	26278 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1411e:	4b18      	ldr	r3, [pc, #96]	; (14180 <notify_le_param_updated+0x94>)
   14120:	681d      	ldr	r5, [r3, #0]
   14122:	b995      	cbnz	r5, 1414a <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14124:	4d17      	ldr	r5, [pc, #92]	; (14184 <notify_le_param_updated+0x98>)
   14126:	4f18      	ldr	r7, [pc, #96]	; (14188 <notify_le_param_updated+0x9c>)
   14128:	42bd      	cmp	r5, r7
   1412a:	d926      	bls.n	1417a <notify_le_param_updated+0x8e>
   1412c:	4917      	ldr	r1, [pc, #92]	; (1418c <notify_le_param_updated+0xa0>)
   1412e:	f240 53a5 	movw	r3, #1445	; 0x5a5
   14132:	4a17      	ldr	r2, [pc, #92]	; (14190 <notify_le_param_updated+0xa4>)
   14134:	4817      	ldr	r0, [pc, #92]	; (14194 <notify_le_param_updated+0xa8>)
   14136:	f010 fc36 	bl	249a6 <assert_print>
   1413a:	4817      	ldr	r0, [pc, #92]	; (14198 <notify_le_param_updated+0xac>)
   1413c:	f010 fc33 	bl	249a6 <assert_print>
   14140:	f240 51a5 	movw	r1, #1445	; 0x5a5
   14144:	4812      	ldr	r0, [pc, #72]	; (14190 <notify_le_param_updated+0xa4>)
   14146:	f010 fc27 	bl	24998 <assert_post_action>
		if (cb->le_param_updated) {
   1414a:	68ee      	ldr	r6, [r5, #12]
   1414c:	b13e      	cbz	r6, 1415e <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   1414e:	4620      	mov	r0, r4
   14150:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   14154:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   14158:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1415c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1415e:	69ad      	ldr	r5, [r5, #24]
   14160:	e7df      	b.n	14122 <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   14162:	68ee      	ldr	r6, [r5, #12]
   14164:	b13e      	cbz	r6, 14176 <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   14166:	4620      	mov	r0, r4
   14168:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1416c:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   14170:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   14174:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14176:	351c      	adds	r5, #28
   14178:	e7d6      	b.n	14128 <notify_le_param_updated+0x3c>
   1417a:	d3f2      	bcc.n	14162 <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1417c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1417e:	bf00      	nop
   14180:	20020fdc 	.word	0x20020fdc
   14184:	0002a304 	.word	0x0002a304
   14188:	0002a320 	.word	0x0002a320
   1418c:	0002de1c 	.word	0x0002de1c
   14190:	0002ddec 	.word	0x0002ddec
   14194:	0002b339 	.word	0x0002b339
   14198:	0002c305 	.word	0x0002c305

0001419c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141a0:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   141a2:	4608      	mov	r0, r1
{
   141a4:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   141a6:	f011 fe07 	bl	25db8 <bt_le_conn_params_valid>
   141aa:	4605      	mov	r5, r0
   141ac:	b918      	cbnz	r0, 141b6 <le_param_req+0x1a>
		return false;
   141ae:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   141b0:	4628      	mov	r0, r5
   141b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   141b6:	4b1b      	ldr	r3, [pc, #108]	; (14224 <le_param_req+0x88>)
   141b8:	681e      	ldr	r6, [r3, #0]
   141ba:	b99e      	cbnz	r6, 141e4 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   141bc:	4e1a      	ldr	r6, [pc, #104]	; (14228 <le_param_req+0x8c>)
   141be:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1422c <le_param_req+0x90>
   141c2:	4546      	cmp	r6, r8
   141c4:	d927      	bls.n	14216 <le_param_req+0x7a>
   141c6:	491a      	ldr	r1, [pc, #104]	; (14230 <le_param_req+0x94>)
   141c8:	f240 53ed 	movw	r3, #1517	; 0x5ed
   141cc:	4a19      	ldr	r2, [pc, #100]	; (14234 <le_param_req+0x98>)
   141ce:	481a      	ldr	r0, [pc, #104]	; (14238 <le_param_req+0x9c>)
   141d0:	f010 fbe9 	bl	249a6 <assert_print>
   141d4:	4819      	ldr	r0, [pc, #100]	; (1423c <le_param_req+0xa0>)
   141d6:	f010 fbe6 	bl	249a6 <assert_print>
   141da:	f240 51ed 	movw	r1, #1517	; 0x5ed
   141de:	4815      	ldr	r0, [pc, #84]	; (14234 <le_param_req+0x98>)
   141e0:	f010 fbda 	bl	24998 <assert_post_action>
		if (!cb->le_param_req) {
   141e4:	68b3      	ldr	r3, [r6, #8]
   141e6:	b90b      	cbnz	r3, 141ec <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   141e8:	69b6      	ldr	r6, [r6, #24]
   141ea:	e7e6      	b.n	141ba <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   141ec:	4621      	mov	r1, r4
   141ee:	4638      	mov	r0, r7
   141f0:	4798      	blx	r3
   141f2:	2800      	cmp	r0, #0
   141f4:	d0db      	beq.n	141ae <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   141f6:	4620      	mov	r0, r4
   141f8:	f011 fdde 	bl	25db8 <bt_le_conn_params_valid>
   141fc:	2800      	cmp	r0, #0
   141fe:	d1f3      	bne.n	141e8 <le_param_req+0x4c>
   14200:	e7d5      	b.n	141ae <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   14202:	4621      	mov	r1, r4
   14204:	4638      	mov	r0, r7
   14206:	4798      	blx	r3
   14208:	2800      	cmp	r0, #0
   1420a:	d0d0      	beq.n	141ae <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1420c:	4620      	mov	r0, r4
   1420e:	f011 fdd3 	bl	25db8 <bt_le_conn_params_valid>
   14212:	b920      	cbnz	r0, 1421e <le_param_req+0x82>
   14214:	e7cb      	b.n	141ae <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14216:	d2cb      	bcs.n	141b0 <le_param_req+0x14>
		if (!cb->le_param_req) {
   14218:	68b3      	ldr	r3, [r6, #8]
   1421a:	2b00      	cmp	r3, #0
   1421c:	d1f1      	bne.n	14202 <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1421e:	361c      	adds	r6, #28
   14220:	e7cf      	b.n	141c2 <le_param_req+0x26>
   14222:	bf00      	nop
   14224:	20020fdc 	.word	0x20020fdc
   14228:	0002a304 	.word	0x0002a304
   1422c:	0002a320 	.word	0x0002a320
   14230:	0002de1c 	.word	0x0002de1c
   14234:	0002ddec 	.word	0x0002ddec
   14238:	0002b339 	.word	0x0002b339
   1423c:	0002c305 	.word	0x0002c305

00014240 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   14240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14244:	78c3      	ldrb	r3, [r0, #3]
{
   14246:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14248:	b9db      	cbnz	r3, 14282 <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   1424a:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1424e:	4b18      	ldr	r3, [pc, #96]	; (142b0 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14250:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   14254:	681d      	ldr	r5, [r3, #0]
   14256:	b9bd      	cbnz	r5, 14288 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14258:	4d16      	ldr	r5, [pc, #88]	; (142b4 <bt_conn_identity_resolved+0x74>)
   1425a:	4f17      	ldr	r7, [pc, #92]	; (142b8 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1425c:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14260:	42bd      	cmp	r5, r7
   14262:	d921      	bls.n	142a8 <bt_conn_identity_resolved+0x68>
   14264:	4915      	ldr	r1, [pc, #84]	; (142bc <bt_conn_identity_resolved+0x7c>)
   14266:	f240 73bc 	movw	r3, #1980	; 0x7bc
   1426a:	4a15      	ldr	r2, [pc, #84]	; (142c0 <bt_conn_identity_resolved+0x80>)
   1426c:	4815      	ldr	r0, [pc, #84]	; (142c4 <bt_conn_identity_resolved+0x84>)
   1426e:	f010 fb9a 	bl	249a6 <assert_print>
   14272:	4815      	ldr	r0, [pc, #84]	; (142c8 <bt_conn_identity_resolved+0x88>)
   14274:	f010 fb97 	bl	249a6 <assert_print>
   14278:	f240 71bc 	movw	r1, #1980	; 0x7bc
   1427c:	4810      	ldr	r0, [pc, #64]	; (142c0 <bt_conn_identity_resolved+0x80>)
   1427e:	f010 fb8b 	bl	24998 <assert_post_action>
		rpa = &conn->le.init_addr;
   14282:	f100 0697 	add.w	r6, r0, #151	; 0x97
   14286:	e7e2      	b.n	1424e <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   14288:	692b      	ldr	r3, [r5, #16]
   1428a:	b11b      	cbz	r3, 14294 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1428c:	463a      	mov	r2, r7
   1428e:	4631      	mov	r1, r6
   14290:	4620      	mov	r0, r4
   14292:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14294:	69ad      	ldr	r5, [r5, #24]
   14296:	e7de      	b.n	14256 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   14298:	692b      	ldr	r3, [r5, #16]
   1429a:	b11b      	cbz	r3, 142a4 <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1429c:	4642      	mov	r2, r8
   1429e:	4631      	mov	r1, r6
   142a0:	4620      	mov	r0, r4
   142a2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   142a4:	351c      	adds	r5, #28
   142a6:	e7db      	b.n	14260 <bt_conn_identity_resolved+0x20>
   142a8:	d3f6      	bcc.n	14298 <bt_conn_identity_resolved+0x58>
		}
	}
}
   142aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   142ae:	bf00      	nop
   142b0:	20020fdc 	.word	0x20020fdc
   142b4:	0002a304 	.word	0x0002a304
   142b8:	0002a320 	.word	0x0002a320
   142bc:	0002de1c 	.word	0x0002de1c
   142c0:	0002ddec 	.word	0x0002ddec
   142c4:	0002b339 	.word	0x0002b339
   142c8:	0002c305 	.word	0x0002c305

000142cc <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   142cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   142ce:	7a43      	ldrb	r3, [r0, #9]
{
   142d0:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   142d2:	7283      	strb	r3, [r0, #10]
{
   142d4:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   142d6:	f012 f8f6 	bl	264c6 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   142da:	4b14      	ldr	r3, [pc, #80]	; (1432c <bt_conn_security_changed+0x60>)
   142dc:	681d      	ldr	r5, [r3, #0]
   142de:	b995      	cbnz	r5, 14306 <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   142e0:	4d13      	ldr	r5, [pc, #76]	; (14330 <bt_conn_security_changed+0x64>)
   142e2:	4f14      	ldr	r7, [pc, #80]	; (14334 <bt_conn_security_changed+0x68>)
   142e4:	42bd      	cmp	r5, r7
   142e6:	d91e      	bls.n	14326 <bt_conn_security_changed+0x5a>
   142e8:	4913      	ldr	r1, [pc, #76]	; (14338 <bt_conn_security_changed+0x6c>)
   142ea:	f640 0328 	movw	r3, #2088	; 0x828
   142ee:	4a13      	ldr	r2, [pc, #76]	; (1433c <bt_conn_security_changed+0x70>)
   142f0:	4813      	ldr	r0, [pc, #76]	; (14340 <bt_conn_security_changed+0x74>)
   142f2:	f010 fb58 	bl	249a6 <assert_print>
   142f6:	4813      	ldr	r0, [pc, #76]	; (14344 <bt_conn_security_changed+0x78>)
   142f8:	f010 fb55 	bl	249a6 <assert_print>
   142fc:	f640 0128 	movw	r1, #2088	; 0x828
   14300:	480e      	ldr	r0, [pc, #56]	; (1433c <bt_conn_security_changed+0x70>)
   14302:	f010 fb49 	bl	24998 <assert_post_action>
		if (cb->security_changed) {
   14306:	696b      	ldr	r3, [r5, #20]
   14308:	b11b      	cbz	r3, 14312 <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   1430a:	4632      	mov	r2, r6
   1430c:	4620      	mov	r0, r4
   1430e:	7a61      	ldrb	r1, [r4, #9]
   14310:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14312:	69ad      	ldr	r5, [r5, #24]
   14314:	e7e3      	b.n	142de <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   14316:	696b      	ldr	r3, [r5, #20]
   14318:	b11b      	cbz	r3, 14322 <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   1431a:	4632      	mov	r2, r6
   1431c:	4620      	mov	r0, r4
   1431e:	7a61      	ldrb	r1, [r4, #9]
   14320:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14322:	351c      	adds	r5, #28
   14324:	e7de      	b.n	142e4 <bt_conn_security_changed+0x18>
   14326:	d3f6      	bcc.n	14316 <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   14328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1432a:	bf00      	nop
   1432c:	20020fdc 	.word	0x20020fdc
   14330:	0002a304 	.word	0x0002a304
   14334:	0002a320 	.word	0x0002a320
   14338:	0002de1c 	.word	0x0002de1c
   1433c:	0002ddec 	.word	0x0002ddec
   14340:	0002b339 	.word	0x0002b339
   14344:	0002c305 	.word	0x0002c305

00014348 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   14348:	b538      	push	{r3, r4, r5, lr}
   1434a:	4605      	mov	r5, r0
   1434c:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1434e:	480b      	ldr	r0, [pc, #44]	; (1437c <bt_conn_add_le+0x34>)
   14350:	2101      	movs	r1, #1
   14352:	f7ff fb77 	bl	13a44 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   14356:	b180      	cbz	r0, 1437a <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   14358:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1435a:	6823      	ldr	r3, [r4, #0]
   1435c:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   14360:	88a3      	ldrh	r3, [r4, #4]
   14362:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   14366:	79a3      	ldrb	r3, [r4, #6]
   14368:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1436c:	2301      	movs	r3, #1
   1436e:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   14370:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   14372:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   14374:	4b02      	ldr	r3, [pc, #8]	; (14380 <bt_conn_add_le+0x38>)
   14376:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1437a:	bd38      	pop	{r3, r4, r5, pc}
   1437c:	200097f8 	.word	0x200097f8
   14380:	00280018 	.word	0x00280018

00014384 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   14384:	b570      	push	{r4, r5, r6, lr}
   14386:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14388:	480a      	ldr	r0, [pc, #40]	; (143b4 <bt_conn_lookup_addr_le+0x30>)
{
   1438a:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1438c:	f7ff fd06 	bl	13d9c <bt_conn_ref>
   14390:	4604      	mov	r4, r0

		if (!conn) {
   14392:	b120      	cbz	r0, 1439e <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   14394:	7883      	ldrb	r3, [r0, #2]
   14396:	2b01      	cmp	r3, #1
   14398:	d004      	beq.n	143a4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   1439a:	f7ff fd27 	bl	13dec <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1439e:	2400      	movs	r4, #0
}
   143a0:	4620      	mov	r0, r4
   143a2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   143a4:	4632      	mov	r2, r6
   143a6:	4629      	mov	r1, r5
   143a8:	f012 f805 	bl	263b6 <bt_conn_is_peer_addr_le>
   143ac:	2800      	cmp	r0, #0
   143ae:	d1f7      	bne.n	143a0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   143b0:	4620      	mov	r0, r4
   143b2:	e7f2      	b.n	1439a <bt_conn_lookup_addr_le+0x16>
   143b4:	200097f8 	.word	0x200097f8

000143b8 <bt_conn_exists_le>:
{
   143b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   143ba:	f7ff ffe3 	bl	14384 <bt_conn_lookup_addr_le>
	if (conn) {
   143be:	4604      	mov	r4, r0
   143c0:	b1a8      	cbz	r0, 143ee <bt_conn_exists_le+0x36>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   143c2:	7b43      	ldrb	r3, [r0, #13]
   143c4:	490b      	ldr	r1, [pc, #44]	; (143f4 <bt_conn_exists_le+0x3c>)
   143c6:	2b08      	cmp	r3, #8
   143c8:	bf96      	itet	ls
   143ca:	4a0b      	ldrls	r2, [pc, #44]	; (143f8 <bt_conn_exists_le+0x40>)
   143cc:	4b0b      	ldrhi	r3, [pc, #44]	; (143fc <bt_conn_exists_le+0x44>)
   143ce:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   143d2:	2202      	movs	r2, #2
   143d4:	9303      	str	r3, [sp, #12]
   143d6:	4b0a      	ldr	r3, [pc, #40]	; (14400 <bt_conn_exists_le+0x48>)
   143d8:	9302      	str	r3, [sp, #8]
   143da:	2300      	movs	r3, #0
   143dc:	4618      	mov	r0, r3
   143de:	e9cd 3300 	strd	r3, r3, [sp]
   143e2:	f011 ff54 	bl	2628e <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   143e6:	4620      	mov	r0, r4
   143e8:	f7ff fd00 	bl	13dec <bt_conn_unref>
		return true;
   143ec:	2001      	movs	r0, #1
}
   143ee:	b004      	add	sp, #16
   143f0:	bd10      	pop	{r4, pc}
   143f2:	bf00      	nop
   143f4:	0002a378 	.word	0x0002a378
   143f8:	0002acbc 	.word	0x0002acbc
   143fc:	0002dfb5 	.word	0x0002dfb5
   14400:	0002e11e 	.word	0x0002e11e

00014404 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   14404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14406:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14408:	480e      	ldr	r0, [pc, #56]	; (14444 <bt_conn_lookup_state_le+0x40>)
{
   1440a:	460e      	mov	r6, r1
   1440c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1440e:	f7ff fcc5 	bl	13d9c <bt_conn_ref>

		if (!conn) {
   14412:	4604      	mov	r4, r0
   14414:	b120      	cbz	r0, 14420 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   14416:	7883      	ldrb	r3, [r0, #2]
   14418:	2b01      	cmp	r3, #1
   1441a:	d003      	beq.n	14424 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1441c:	f7ff fce6 	bl	13dec <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   14420:	2400      	movs	r4, #0
   14422:	e00d      	b.n	14440 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   14424:	b136      	cbz	r6, 14434 <bt_conn_lookup_state_le+0x30>
   14426:	4632      	mov	r2, r6
   14428:	4629      	mov	r1, r5
   1442a:	f011 ffc4 	bl	263b6 <bt_conn_is_peer_addr_le>
   1442e:	b908      	cbnz	r0, 14434 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   14430:	4620      	mov	r0, r4
   14432:	e7f3      	b.n	1441c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   14434:	7b63      	ldrb	r3, [r4, #13]
   14436:	42bb      	cmp	r3, r7
   14438:	d1fa      	bne.n	14430 <bt_conn_lookup_state_le+0x2c>
   1443a:	7a23      	ldrb	r3, [r4, #8]
   1443c:	42ab      	cmp	r3, r5
   1443e:	d1f7      	bne.n	14430 <bt_conn_lookup_state_le+0x2c>
}
   14440:	4620      	mov	r0, r4
   14442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14444:	200097f8 	.word	0x200097f8

00014448 <send_conn_le_param_update>:
{
   14448:	b538      	push	{r3, r4, r5, lr}
   1444a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1444c:	4608      	mov	r0, r1
{
   1444e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   14450:	f011 fcb2 	bl	25db8 <bt_le_conn_params_valid>
   14454:	b338      	cbz	r0, 144a6 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   14456:	4b15      	ldr	r3, [pc, #84]	; (144ac <send_conn_le_param_update+0x64>)
   14458:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1445c:	0799      	lsls	r1, r3, #30
   1445e:	d407      	bmi.n	14470 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   14460:	78e3      	ldrb	r3, [r4, #3]
   14462:	b173      	cbz	r3, 14482 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   14464:	4629      	mov	r1, r5
   14466:	4620      	mov	r0, r4
}
   14468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1446c:	f000 bafc 	b.w	14a68 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   14470:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   14474:	079a      	lsls	r2, r3, #30
   14476:	d5f3      	bpl.n	14460 <send_conn_le_param_update+0x18>
   14478:	1d23      	adds	r3, r4, #4
   1447a:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1447e:	055b      	lsls	r3, r3, #21
   14480:	d4ee      	bmi.n	14460 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   14482:	4629      	mov	r1, r5
   14484:	4620      	mov	r0, r4
   14486:	f011 ffb8 	bl	263fa <bt_conn_le_conn_update>
		if (rc == 0) {
   1448a:	b958      	cbnz	r0, 144a4 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   1448c:	882b      	ldrh	r3, [r5, #0]
   1448e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   14492:	886b      	ldrh	r3, [r5, #2]
   14494:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   14498:	88ab      	ldrh	r3, [r5, #4]
   1449a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1449e:	88eb      	ldrh	r3, [r5, #6]
   144a0:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   144a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   144a6:	f06f 0015 	mvn.w	r0, #21
   144aa:	e7fb      	b.n	144a4 <send_conn_le_param_update+0x5c>
   144ac:	20008000 	.word	0x20008000

000144b0 <deferred_work>:
{
   144b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   144b2:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   144b6:	4604      	mov	r4, r0
   144b8:	b087      	sub	sp, #28
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   144ba:	f1a0 0760 	sub.w	r7, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   144be:	bb7b      	cbnz	r3, 14520 <deferred_work+0x70>
		bt_l2cap_disconnected(conn);
   144c0:	4638      	mov	r0, r7
   144c2:	f011 ffe8 	bl	26496 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   144c6:	4b3c      	ldr	r3, [pc, #240]	; (145b8 <deferred_work+0x108>)
   144c8:	681d      	ldr	r5, [r3, #0]
   144ca:	b995      	cbnz	r5, 144f2 <deferred_work+0x42>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   144cc:	4d3b      	ldr	r5, [pc, #236]	; (145bc <deferred_work+0x10c>)
   144ce:	4e3c      	ldr	r6, [pc, #240]	; (145c0 <deferred_work+0x110>)
   144d0:	42b5      	cmp	r5, r6
   144d2:	d91e      	bls.n	14512 <deferred_work+0x62>
   144d4:	493b      	ldr	r1, [pc, #236]	; (145c4 <deferred_work+0x114>)
   144d6:	f240 536c 	movw	r3, #1388	; 0x56c
   144da:	4a3b      	ldr	r2, [pc, #236]	; (145c8 <deferred_work+0x118>)
   144dc:	483b      	ldr	r0, [pc, #236]	; (145cc <deferred_work+0x11c>)
   144de:	f010 fa62 	bl	249a6 <assert_print>
   144e2:	483b      	ldr	r0, [pc, #236]	; (145d0 <deferred_work+0x120>)
   144e4:	f010 fa5f 	bl	249a6 <assert_print>
   144e8:	f240 516c 	movw	r1, #1388	; 0x56c
   144ec:	4836      	ldr	r0, [pc, #216]	; (145c8 <deferred_work+0x118>)
   144ee:	f010 fa53 	bl	24998 <assert_post_action>
		if (cb->disconnected) {
   144f2:	686b      	ldr	r3, [r5, #4]
   144f4:	b11b      	cbz	r3, 144fe <deferred_work+0x4e>
			cb->disconnected(conn, conn->err);
   144f6:	4638      	mov	r0, r7
   144f8:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   144fc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   144fe:	69ad      	ldr	r5, [r5, #24]
   14500:	e7e3      	b.n	144ca <deferred_work+0x1a>
		if (cb->disconnected) {
   14502:	686b      	ldr	r3, [r5, #4]
   14504:	b11b      	cbz	r3, 1450e <deferred_work+0x5e>
			cb->disconnected(conn, conn->err);
   14506:	4638      	mov	r0, r7
   14508:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   1450c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1450e:	351c      	adds	r5, #28
   14510:	e7de      	b.n	144d0 <deferred_work+0x20>
   14512:	d3f6      	bcc.n	14502 <deferred_work+0x52>
		bt_conn_unref(conn);
   14514:	4638      	mov	r0, r7
}
   14516:	b007      	add	sp, #28
   14518:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1451c:	f7ff bc66 	b.w	13dec <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   14520:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   14524:	2b01      	cmp	r3, #1
   14526:	d11f      	bne.n	14568 <deferred_work+0xb8>
	if (atomic_test_and_clear_bit(conn->flags,
   14528:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1452c:	f46f 7100 	mvn.w	r1, #512	; 0x200
   14530:	4628      	mov	r0, r5
   14532:	f011 fea1 	bl	26278 <atomic_and>
   14536:	f410 7600 	ands.w	r6, r0, #512	; 0x200
   1453a:	d023      	beq.n	14584 <deferred_work+0xd4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1453c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   1453e:	4638      	mov	r0, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   14540:	9304      	str	r3, [sp, #16]
   14542:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   14544:	a904      	add	r1, sp, #16
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   14546:	9305      	str	r3, [sp, #20]
		err = send_conn_le_param_update(conn, param);
   14548:	f7ff ff7e 	bl	14448 <send_conn_le_param_update>
		if (!err) {
   1454c:	b970      	cbnz	r0, 1456c <deferred_work+0xbc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1454e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   14552:	4628      	mov	r0, r5
   14554:	f011 fe90 	bl	26278 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14558:	e8d5 3fef 	ldaex	r3, [r5]
   1455c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14560:	e8c5 3fe2 	stlex	r2, r3, [r5]
   14564:	2a00      	cmp	r2, #0
   14566:	d1f7      	bne.n	14558 <deferred_work+0xa8>
}
   14568:	b007      	add	sp, #28
   1456a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   1456c:	4b19      	ldr	r3, [pc, #100]	; (145d4 <deferred_work+0x124>)
   1456e:	9003      	str	r0, [sp, #12]
   14570:	9302      	str	r3, [sp, #8]
   14572:	2300      	movs	r3, #0
   14574:	e9cd 3300 	strd	r3, r3, [sp]
			LOG_WRN("Send auto LE param update failed (err %d)",
   14578:	2202      	movs	r2, #2
   1457a:	4618      	mov	r0, r3
   1457c:	4916      	ldr	r1, [pc, #88]	; (145d8 <deferred_work+0x128>)
   1457e:	f011 fe86 	bl	2628e <z_log_msg_runtime_create.constprop.0>
   14582:	e7e9      	b.n	14558 <deferred_work+0xa8>
		param = BT_LE_CONN_PARAM(
   14584:	4a15      	ldr	r2, [pc, #84]	; (145dc <deferred_work+0x12c>)
   14586:	ab04      	add	r3, sp, #16
   14588:	6810      	ldr	r0, [r2, #0]
   1458a:	6851      	ldr	r1, [r2, #4]
   1458c:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   1458e:	4638      	mov	r0, r7
   14590:	a904      	add	r1, sp, #16
   14592:	f7ff ff59 	bl	14448 <send_conn_le_param_update>
		if (!err) {
   14596:	b940      	cbnz	r0, 145aa <deferred_work+0xfa>
   14598:	e8d5 3fef 	ldaex	r3, [r5]
   1459c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   145a0:	e8c5 3fe2 	stlex	r2, r3, [r5]
   145a4:	2a00      	cmp	r2, #0
   145a6:	d0d7      	beq.n	14558 <deferred_work+0xa8>
   145a8:	e7f6      	b.n	14598 <deferred_work+0xe8>
			LOG_WRN("Send auto LE param update failed (err %d)",
   145aa:	4b0d      	ldr	r3, [pc, #52]	; (145e0 <deferred_work+0x130>)
   145ac:	9003      	str	r0, [sp, #12]
   145ae:	e9cd 6301 	strd	r6, r3, [sp, #4]
   145b2:	9600      	str	r6, [sp, #0]
   145b4:	4633      	mov	r3, r6
   145b6:	e7df      	b.n	14578 <deferred_work+0xc8>
   145b8:	20020fdc 	.word	0x20020fdc
   145bc:	0002a304 	.word	0x0002a304
   145c0:	0002a320 	.word	0x0002a320
   145c4:	0002de1c 	.word	0x0002de1c
   145c8:	0002ddec 	.word	0x0002ddec
   145cc:	0002b339 	.word	0x0002b339
   145d0:	0002c305 	.word	0x0002c305
   145d4:	0002e141 	.word	0x0002e141
   145d8:	0002a378 	.word	0x0002a378
   145dc:	0002a4f4 	.word	0x0002a4f4
   145e0:	0002e166 	.word	0x0002e166

000145e4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   145e4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   145e6:	4801      	ldr	r0, [pc, #4]	; (145ec <bt_conn_create_frag_timeout+0x8>)
   145e8:	f7ff bd42 	b.w	14070 <bt_conn_create_pdu_timeout>
   145ec:	20008cb8 	.word	0x20008cb8

000145f0 <create_frag>:
{
   145f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145f4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   145f6:	f04f 33ff 	mov.w	r3, #4294967295
   145fa:	f04f 32ff 	mov.w	r2, #4294967295
   145fe:	2000      	movs	r0, #0
{
   14600:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   14602:	f7ff ffef 	bl	145e4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   14606:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   14608:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1460a:	2b07      	cmp	r3, #7
   1460c:	f04f 0600 	mov.w	r6, #0
   14610:	d005      	beq.n	1461e <create_frag+0x2e>
		net_buf_unref(frag);
   14612:	f004 fd05 	bl	19020 <net_buf_unref>
		return NULL;
   14616:	4635      	mov	r5, r6
}
   14618:	4628      	mov	r0, r5
   1461a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1461e:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   14620:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   14624:	4e0c      	ldr	r6, [pc, #48]	; (14658 <create_frag+0x68>)
   14626:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14628:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   1462c:	f013 f9a1 	bl	27972 <net_buf_simple_tailroom>
   14630:	4580      	cmp	r8, r0
   14632:	d20c      	bcs.n	1464e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   14634:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14638:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   1463c:	4632      	mov	r2, r6
   1463e:	4638      	mov	r0, r7
   14640:	f013 f99f 	bl	27982 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   14644:	4631      	mov	r1, r6
   14646:	4620      	mov	r0, r4
   14648:	f004 fdd0 	bl	191ec <net_buf_simple_pull>
   1464c:	e7e4      	b.n	14618 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1464e:	4638      	mov	r0, r7
   14650:	f013 f98f 	bl	27972 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14654:	b286      	uxth	r6, r0
   14656:	e7ef      	b.n	14638 <create_frag+0x48>
   14658:	20008000 	.word	0x20008000

0001465c <bt_conn_process_tx>:
{
   1465c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1465e:	7b43      	ldrb	r3, [r0, #13]
{
   14660:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   14662:	b95b      	cbnz	r3, 1467c <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14664:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14668:	3004      	adds	r0, #4
   1466a:	f011 fe05 	bl	26278 <atomic_and>
   1466e:	0643      	lsls	r3, r0, #25
   14670:	d504      	bpl.n	1467c <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   14672:	4620      	mov	r0, r4
}
   14674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   14678:	f7ff ba12 	b.w	13aa0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1467c:	2200      	movs	r2, #0
   1467e:	2300      	movs	r3, #0
   14680:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14684:	f013 f960 	bl	27948 <net_buf_get>
	BT_ASSERT(buf);
   14688:	4605      	mov	r5, r0
   1468a:	b960      	cbnz	r0, 146a6 <bt_conn_process_tx+0x4a>
   1468c:	f240 331a 	movw	r3, #794	; 0x31a
   14690:	4a22      	ldr	r2, [pc, #136]	; (1471c <bt_conn_process_tx+0xc0>)
   14692:	4923      	ldr	r1, [pc, #140]	; (14720 <bt_conn_process_tx+0xc4>)
   14694:	4823      	ldr	r0, [pc, #140]	; (14724 <bt_conn_process_tx+0xc8>)
   14696:	f010 f986 	bl	249a6 <assert_print>
   1469a:	4040      	eors	r0, r0
   1469c:	f380 8811 	msr	BASEPRI, r0
   146a0:	f04f 0003 	mov.w	r0, #3
   146a4:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   146a6:	4e20      	ldr	r6, [pc, #128]	; (14728 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   146a8:	8a2a      	ldrh	r2, [r5, #16]
   146aa:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   146ae:	429a      	cmp	r2, r3
   146b0:	d807      	bhi.n	146c2 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   146b2:	2300      	movs	r3, #0
   146b4:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   146b6:	4629      	mov	r1, r5
   146b8:	4620      	mov	r0, r4
   146ba:	f7ff f913 	bl	138e4 <send_frag>
	if (!send_buf(conn, buf)) {
   146be:	b968      	cbnz	r0, 146dc <bt_conn_process_tx+0x80>
   146c0:	e005      	b.n	146ce <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   146c2:	4629      	mov	r1, r5
   146c4:	4620      	mov	r0, r4
   146c6:	f7ff ff93 	bl	145f0 <create_frag>
	if (!frag) {
   146ca:	4601      	mov	r1, r0
   146cc:	b938      	cbnz	r0, 146de <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   146ce:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   146d0:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   146d2:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   146d4:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   146d6:	f004 fca3 	bl	19020 <net_buf_unref>
		if (tx) {
   146da:	b9ce      	cbnz	r6, 14710 <bt_conn_process_tx+0xb4>
}
   146dc:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   146de:	2301      	movs	r3, #1
   146e0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   146e2:	4620      	mov	r0, r4
   146e4:	f7ff f8fe 	bl	138e4 <send_frag>
   146e8:	2800      	cmp	r0, #0
   146ea:	d0f0      	beq.n	146ce <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   146ec:	8a2a      	ldrh	r2, [r5, #16]
   146ee:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   146f2:	429a      	cmp	r2, r3
   146f4:	d802      	bhi.n	146fc <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   146f6:	2300      	movs	r3, #0
   146f8:	2203      	movs	r2, #3
   146fa:	e7dc      	b.n	146b6 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   146fc:	4629      	mov	r1, r5
   146fe:	4620      	mov	r0, r4
   14700:	f7ff ff76 	bl	145f0 <create_frag>
		if (!frag) {
   14704:	4601      	mov	r1, r0
   14706:	2800      	cmp	r0, #0
   14708:	d0e1      	beq.n	146ce <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1470a:	2301      	movs	r3, #1
   1470c:	461a      	mov	r2, r3
   1470e:	e7e8      	b.n	146e2 <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   14710:	4631      	mov	r1, r6
   14712:	4620      	mov	r0, r4
}
   14714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   14718:	f7ff b8be 	b.w	13898 <conn_tx_destroy>
   1471c:	0002ddec 	.word	0x0002ddec
   14720:	0002eeb9 	.word	0x0002eeb9
   14724:	0002b339 	.word	0x0002b339
   14728:	20008000 	.word	0x20008000

0001472c <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   1472c:	4b0b      	ldr	r3, [pc, #44]	; (1475c <bt_conn_auth_cb_register+0x30>)
   1472e:	b158      	cbz	r0, 14748 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   14730:	681a      	ldr	r2, [r3, #0]
   14732:	b962      	cbnz	r2, 1474e <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   14734:	6902      	ldr	r2, [r0, #16]
   14736:	b93a      	cbnz	r2, 14748 <bt_conn_auth_cb_register+0x1c>
   14738:	6802      	ldr	r2, [r0, #0]
   1473a:	b95a      	cbnz	r2, 14754 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   1473c:	6842      	ldr	r2, [r0, #4]
   1473e:	b94a      	cbnz	r2, 14754 <bt_conn_auth_cb_register+0x28>
   14740:	6882      	ldr	r2, [r0, #8]
   14742:	b93a      	cbnz	r2, 14754 <bt_conn_auth_cb_register+0x28>
   14744:	6942      	ldr	r2, [r0, #20]
   14746:	b92a      	cbnz	r2, 14754 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   14748:	6018      	str	r0, [r3, #0]
		return 0;
   1474a:	2000      	movs	r0, #0
   1474c:	4770      	bx	lr
		return -EALREADY;
   1474e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14752:	4770      	bx	lr
		return -EINVAL;
   14754:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   14758:	4770      	bx	lr
   1475a:	bf00      	nop
   1475c:	20020fe8 	.word	0x20020fe8

00014760 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   14760:	b168      	cbz	r0, 1477e <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   14762:	2300      	movs	r3, #0
   14764:	60c3      	str	r3, [r0, #12]
	return list->tail;
   14766:	4b07      	ldr	r3, [pc, #28]	; (14784 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   14768:	f100 020c 	add.w	r2, r0, #12
   1476c:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1476e:	b919      	cbnz	r1, 14778 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   14770:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   14774:	2000      	movs	r0, #0
   14776:	4770      	bx	lr
	parent->next = child;
   14778:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1477a:	605a      	str	r2, [r3, #4]
}
   1477c:	e7fa      	b.n	14774 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   1477e:	f06f 0015 	mvn.w	r0, #21
}
   14782:	4770      	bx	lr
   14784:	20020fe0 	.word	0x20020fe0

00014788 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   14788:	b910      	cbnz	r0, 14790 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1478a:	4802      	ldr	r0, [pc, #8]	; (14794 <bt_conn_lookup_index+0xc>)
   1478c:	f7ff bb06 	b.w	13d9c <bt_conn_ref>
}
   14790:	2000      	movs	r0, #0
   14792:	4770      	bx	lr
   14794:	200097f8 	.word	0x200097f8

00014798 <bt_conn_init>:

int bt_conn_init(void)
{
   14798:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1479a:	480a      	ldr	r0, [pc, #40]	; (147c4 <bt_conn_init+0x2c>)
   1479c:	f014 fc93 	bl	290c6 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   147a0:	4909      	ldr	r1, [pc, #36]	; (147c8 <bt_conn_init+0x30>)
   147a2:	4808      	ldr	r0, [pc, #32]	; (147c4 <bt_conn_init+0x2c>)
   147a4:	f014 fc9c 	bl	290e0 <k_queue_append>
   147a8:	4908      	ldr	r1, [pc, #32]	; (147cc <bt_conn_init+0x34>)
   147aa:	4806      	ldr	r0, [pc, #24]	; (147c4 <bt_conn_init+0x2c>)
   147ac:	f014 fc98 	bl	290e0 <k_queue_append>
	}

	bt_att_init();
   147b0:	f001 f8e4 	bl	1597c <bt_att_init>

	err = bt_smp_init();
   147b4:	f003 ffb4 	bl	18720 <bt_smp_init>
	if (err) {
   147b8:	4604      	mov	r4, r0
   147ba:	b908      	cbnz	r0, 147c0 <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   147bc:	f011 fece 	bl	2655c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   147c0:	4620      	mov	r0, r4
   147c2:	bd10      	pop	{r4, pc}
   147c4:	20008bcc 	.word	0x20008bcc
   147c8:	20020fbc 	.word	0x20020fbc
   147cc:	20020fcc 	.word	0x20020fcc

000147d0 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   147d0:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   147d2:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   147d4:	4605      	mov	r5, r0
   147d6:	460f      	mov	r7, r1
   147d8:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   147da:	2104      	movs	r1, #4
   147dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   147e0:	2000      	movs	r0, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   147e2:	b085      	sub	sp, #20
	return bt_conn_create_pdu_timeout(pool,
   147e4:	f7ff fc44 	bl	14070 <bt_conn_create_pdu_timeout>
	if (!buf) {
   147e8:	4604      	mov	r4, r0
   147ea:	b960      	cbnz	r0, 14806 <l2cap_create_le_sig_pdu.constprop.0+0x36>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   147ec:	4b0a      	ldr	r3, [pc, #40]	; (14818 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
   147ee:	2201      	movs	r2, #1
   147f0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   147f4:	4909      	ldr	r1, [pc, #36]	; (1481c <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   147f6:	4603      	mov	r3, r0
   147f8:	9503      	str	r5, [sp, #12]
   147fa:	9000      	str	r0, [sp, #0]
   147fc:	f011 fe26 	bl	2644c <z_log_msg_runtime_create.constprop.0>
}
   14800:	4620      	mov	r0, r4
   14802:	b005      	add	sp, #20
   14804:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   14806:	2104      	movs	r1, #4
   14808:	300c      	adds	r0, #12
   1480a:	f004 fd2b 	bl	19264 <net_buf_simple_add>
	hdr->code = code;
   1480e:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   14810:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   14812:	8046      	strh	r6, [r0, #2]
	return buf;
   14814:	e7f4      	b.n	14800 <l2cap_create_le_sig_pdu.constprop.0+0x30>
   14816:	bf00      	nop
   14818:	0002e209 	.word	0x0002e209
   1481c:	0002a3c0 	.word	0x0002a3c0

00014820 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   14820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   14822:	4c0b      	ldr	r4, [pc, #44]	; (14850 <l2cap_accept+0x30>)
   14824:	2300      	movs	r3, #0
   14826:	6822      	ldr	r2, [r4, #0]
   14828:	b92a      	cbnz	r2, 14836 <l2cap_accept+0x16>
		}

		l2cap->chan.chan.ops = &ops;
		*chan = &l2cap->chan.chan;

		return 0;
   1482a:	4610      	mov	r0, r2
		l2cap->chan.chan.ops = &ops;
   1482c:	4b09      	ldr	r3, [pc, #36]	; (14854 <l2cap_accept+0x34>)
   1482e:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;
   14830:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   14832:	b004      	add	sp, #16
   14834:	bd10      	pop	{r4, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   14836:	4a08      	ldr	r2, [pc, #32]	; (14858 <l2cap_accept+0x38>)
   14838:	9003      	str	r0, [sp, #12]
   1483a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1483e:	4618      	mov	r0, r3
   14840:	2201      	movs	r2, #1
   14842:	4906      	ldr	r1, [pc, #24]	; (1485c <l2cap_accept+0x3c>)
   14844:	9300      	str	r3, [sp, #0]
   14846:	f011 fe01 	bl	2644c <z_log_msg_runtime_create.constprop.0>
   1484a:	f06f 000b 	mvn.w	r0, #11
   1484e:	e7f0      	b.n	14832 <l2cap_accept+0x12>
   14850:	20020fec 	.word	0x20020fec
   14854:	0002ad00 	.word	0x0002ad00
   14858:	0002e231 	.word	0x0002e231
   1485c:	0002a3c0 	.word	0x0002a3c0

00014860 <bt_l2cap_connected>:
{
   14860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14862:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14864:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14866:	4d27      	ldr	r5, [pc, #156]	; (14904 <bt_l2cap_connected+0xa4>)
   14868:	4f27      	ldr	r7, [pc, #156]	; (14908 <bt_l2cap_connected+0xa8>)
   1486a:	42bd      	cmp	r5, r7
   1486c:	d946      	bls.n	148fc <bt_l2cap_connected+0x9c>
   1486e:	4927      	ldr	r1, [pc, #156]	; (1490c <bt_l2cap_connected+0xac>)
   14870:	f240 1381 	movw	r3, #385	; 0x181
   14874:	4a26      	ldr	r2, [pc, #152]	; (14910 <bt_l2cap_connected+0xb0>)
   14876:	4827      	ldr	r0, [pc, #156]	; (14914 <bt_l2cap_connected+0xb4>)
   14878:	f010 f895 	bl	249a6 <assert_print>
   1487c:	4826      	ldr	r0, [pc, #152]	; (14918 <bt_l2cap_connected+0xb8>)
   1487e:	f010 f892 	bl	249a6 <assert_print>
   14882:	f240 1181 	movw	r1, #385	; 0x181
   14886:	4822      	ldr	r0, [pc, #136]	; (14910 <bt_l2cap_connected+0xb0>)
   14888:	f010 f886 	bl	24998 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   1488c:	4620      	mov	r0, r4
   1488e:	686b      	ldr	r3, [r5, #4]
   14890:	a901      	add	r1, sp, #4
   14892:	4798      	blx	r3
   14894:	2800      	cmp	r0, #0
   14896:	db2c      	blt.n	148f2 <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   14898:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1489a:	882a      	ldrh	r2, [r5, #0]
   1489c:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1489e:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   148a0:	68a8      	ldr	r0, [r5, #8]
   148a2:	f103 0210 	add.w	r2, r3, #16
   148a6:	e8d2 1fef 	ldaex	r1, [r2]
   148aa:	e8c2 6fec 	stlex	ip, r6, [r2]
   148ae:	f1bc 0f00 	cmp.w	ip, #0
   148b2:	d1f8      	bne.n	148a6 <bt_l2cap_connected+0x46>
	parent->next = child;
   148b4:	609e      	str	r6, [r3, #8]
	return list->tail;
   148b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   148b8:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   148bc:	b9d9      	cbnz	r1, 148f6 <bt_l2cap_connected+0x96>
	list->head = node;
   148be:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   148c2:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   148c4:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   148c6:	9801      	ldr	r0, [sp, #4]
   148c8:	6843      	ldr	r3, [r0, #4]
   148ca:	681b      	ldr	r3, [r3, #0]
   148cc:	b103      	cbz	r3, 148d0 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   148ce:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   148d0:	9b01      	ldr	r3, [sp, #4]
   148d2:	3310      	adds	r3, #16
   148d4:	e8d3 1fef 	ldaex	r1, [r3]
   148d8:	f041 0101 	orr.w	r1, r1, #1
   148dc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   148e0:	2a00      	cmp	r2, #0
   148e2:	d1f7      	bne.n	148d4 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   148e4:	9801      	ldr	r0, [sp, #4]
   148e6:	6843      	ldr	r3, [r0, #4]
   148e8:	69db      	ldr	r3, [r3, #28]
   148ea:	b113      	cbz	r3, 148f2 <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   148ec:	f100 0110 	add.w	r1, r0, #16
   148f0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   148f2:	350c      	adds	r5, #12
   148f4:	e7b9      	b.n	1486a <bt_l2cap_connected+0xa>
	parent->next = child;
   148f6:	600a      	str	r2, [r1, #0]
	list->tail = node;
   148f8:	65a2      	str	r2, [r4, #88]	; 0x58
}
   148fa:	e7e2      	b.n	148c2 <bt_l2cap_connected+0x62>
   148fc:	d3c6      	bcc.n	1488c <bt_l2cap_connected+0x2c>
}
   148fe:	b003      	add	sp, #12
   14900:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14902:	bf00      	nop
   14904:	0002a2e0 	.word	0x0002a2e0
   14908:	0002a304 	.word	0x0002a304
   1490c:	0002e289 	.word	0x0002e289
   14910:	0002e258 	.word	0x0002e258
   14914:	0002b339 	.word	0x0002b339
   14918:	0002c305 	.word	0x0002c305

0001491c <l2cap_recv>:
{
   1491c:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   1491e:	8a0b      	ldrh	r3, [r1, #16]
{
   14920:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   14922:	2b03      	cmp	r3, #3
{
   14924:	460c      	mov	r4, r1
   14926:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   14928:	d803      	bhi.n	14932 <l2cap_recv+0x16>
		LOG_ERR("Too small L2CAP signaling PDU");
   1492a:	4b2d      	ldr	r3, [pc, #180]	; (149e0 <l2cap_recv+0xc4>)
		LOG_ERR("Too small LE conn param rsp");
   1492c:	9302      	str	r3, [sp, #8]
   1492e:	2300      	movs	r3, #0
   14930:	e01c      	b.n	1496c <l2cap_recv+0x50>
	return net_buf_simple_pull_mem(&buf->b, len);
   14932:	2104      	movs	r1, #4
   14934:	f104 000c 	add.w	r0, r4, #12
   14938:	f004 fc76 	bl	19228 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1493c:	8a23      	ldrh	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   1493e:	8842      	ldrh	r2, [r0, #2]
   14940:	4605      	mov	r5, r0
	if (buf->len != len) {
   14942:	429a      	cmp	r2, r3
   14944:	d00e      	beq.n	14964 <l2cap_recv+0x48>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   14946:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1494a:	4b26      	ldr	r3, [pc, #152]	; (149e4 <l2cap_recv+0xc8>)
   1494c:	2201      	movs	r2, #1
   1494e:	9302      	str	r3, [sp, #8]
   14950:	2300      	movs	r3, #0
   14952:	4925      	ldr	r1, [pc, #148]	; (149e8 <l2cap_recv+0xcc>)
   14954:	4618      	mov	r0, r3
   14956:	e9cd 3300 	strd	r3, r3, [sp]
   1495a:	f011 fd77 	bl	2644c <z_log_msg_runtime_create.constprop.0>
}
   1495e:	2000      	movs	r0, #0
   14960:	b006      	add	sp, #24
   14962:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   14964:	7843      	ldrb	r3, [r0, #1]
   14966:	b94b      	cbnz	r3, 1497c <l2cap_recv+0x60>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   14968:	4a20      	ldr	r2, [pc, #128]	; (149ec <l2cap_recv+0xd0>)
   1496a:	9202      	str	r2, [sp, #8]
   1496c:	2201      	movs	r2, #1
   1496e:	4618      	mov	r0, r3
   14970:	e9cd 3300 	strd	r3, r3, [sp]
   14974:	491c      	ldr	r1, [pc, #112]	; (149e8 <l2cap_recv+0xcc>)
   14976:	f011 fd69 	bl	2644c <z_log_msg_runtime_create.constprop.0>
		return 0;
   1497a:	e7f0      	b.n	1495e <l2cap_recv+0x42>
	switch (hdr->code) {
   1497c:	7803      	ldrb	r3, [r0, #0]
   1497e:	2b01      	cmp	r3, #1
   14980:	d0ed      	beq.n	1495e <l2cap_recv+0x42>
   14982:	2b13      	cmp	r3, #19
   14984:	d103      	bne.n	1498e <l2cap_recv+0x72>
	if (buf->len < sizeof(*rsp)) {
   14986:	2a01      	cmp	r2, #1
   14988:	d8e9      	bhi.n	1495e <l2cap_recv+0x42>
		LOG_ERR("Too small LE conn param rsp");
   1498a:	4b19      	ldr	r3, [pc, #100]	; (149f0 <l2cap_recv+0xd4>)
   1498c:	e7ce      	b.n	1492c <l2cap_recv+0x10>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1498e:	2400      	movs	r4, #0
	switch (hdr->code) {
   14990:	9303      	str	r3, [sp, #12]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   14992:	4b18      	ldr	r3, [pc, #96]	; (149f4 <l2cap_recv+0xd8>)
   14994:	2202      	movs	r2, #2
   14996:	4620      	mov	r0, r4
   14998:	4913      	ldr	r1, [pc, #76]	; (149e8 <l2cap_recv+0xcc>)
   1499a:	9302      	str	r3, [sp, #8]
   1499c:	e9cd 4400 	strd	r4, r4, [sp]
   149a0:	4623      	mov	r3, r4
   149a2:	f011 fd53 	bl	2644c <z_log_msg_runtime_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   149a6:	7869      	ldrb	r1, [r5, #1]
   149a8:	2202      	movs	r2, #2
   149aa:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   149ac:	6836      	ldr	r6, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   149ae:	f7ff ff0f 	bl	147d0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   149b2:	4605      	mov	r5, r0
   149b4:	2800      	cmp	r0, #0
   149b6:	d0d2      	beq.n	1495e <l2cap_recv+0x42>
	return net_buf_simple_add(&buf->b, len);
   149b8:	2102      	movs	r1, #2
   149ba:	300c      	adds	r0, #12
   149bc:	f004 fc52 	bl	19264 <net_buf_simple_add>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   149c0:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   149c2:	7004      	strb	r4, [r0, #0]
   149c4:	7044      	strb	r4, [r0, #1]
   149c6:	462a      	mov	r2, r5
   149c8:	2105      	movs	r1, #5
   149ca:	4630      	mov	r0, r6
   149cc:	9400      	str	r4, [sp, #0]
   149ce:	f011 fd9a 	bl	26506 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   149d2:	2800      	cmp	r0, #0
   149d4:	d0c3      	beq.n	1495e <l2cap_recv+0x42>
		net_buf_unref(buf);
   149d6:	4628      	mov	r0, r5
   149d8:	f004 fb22 	bl	19020 <net_buf_unref>
   149dc:	e7bf      	b.n	1495e <l2cap_recv+0x42>
   149de:	bf00      	nop
   149e0:	0002e2b0 	.word	0x0002e2b0
   149e4:	0002e2ce 	.word	0x0002e2ce
   149e8:	0002a3c0 	.word	0x0002a3c0
   149ec:	0002e2ef 	.word	0x0002e2ef
   149f0:	0002e310 	.word	0x0002e310
   149f4:	0002e32c 	.word	0x0002e32c

000149f8 <bt_l2cap_recv>:
{
   149f8:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   149fa:	8a0b      	ldrh	r3, [r1, #16]
{
   149fc:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   149fe:	2b03      	cmp	r3, #3
{
   14a00:	460c      	mov	r4, r1
   14a02:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   14a04:	d80f      	bhi.n	14a26 <bt_l2cap_recv+0x2e>
		LOG_ERR("Too small L2CAP PDU received");
   14a06:	4b15      	ldr	r3, [pc, #84]	; (14a5c <bt_l2cap_recv+0x64>)
   14a08:	2201      	movs	r2, #1
   14a0a:	9302      	str	r3, [sp, #8]
   14a0c:	2300      	movs	r3, #0
   14a0e:	4914      	ldr	r1, [pc, #80]	; (14a60 <bt_l2cap_recv+0x68>)
   14a10:	4618      	mov	r0, r3
   14a12:	e9cd 3300 	strd	r3, r3, [sp]
   14a16:	f011 fd19 	bl	2644c <z_log_msg_runtime_create.constprop.0>
	net_buf_unref(buf);
   14a1a:	4620      	mov	r0, r4
}
   14a1c:	b005      	add	sp, #20
   14a1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   14a22:	f004 bafd 	b.w	19020 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   14a26:	2104      	movs	r1, #4
   14a28:	f104 000c 	add.w	r0, r4, #12
   14a2c:	f004 fbfc 	bl	19228 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   14a30:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   14a32:	4628      	mov	r0, r5
   14a34:	f011 fd89 	bl	2654a <bt_l2cap_le_lookup_rx_cid>
   14a38:	4603      	mov	r3, r0
	if (!chan) {
   14a3a:	b948      	cbnz	r0, 14a50 <bt_l2cap_recv+0x58>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   14a3c:	4a09      	ldr	r2, [pc, #36]	; (14a64 <bt_l2cap_recv+0x6c>)
   14a3e:	9103      	str	r1, [sp, #12]
   14a40:	e9cd 0201 	strd	r0, r2, [sp, #4]
   14a44:	4906      	ldr	r1, [pc, #24]	; (14a60 <bt_l2cap_recv+0x68>)
   14a46:	2202      	movs	r2, #2
   14a48:	9000      	str	r0, [sp, #0]
   14a4a:	f011 fcff 	bl	2644c <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   14a4e:	e7e4      	b.n	14a1a <bt_l2cap_recv+0x22>
	chan->ops->recv(chan, buf);
   14a50:	6843      	ldr	r3, [r0, #4]
   14a52:	4621      	mov	r1, r4
   14a54:	695b      	ldr	r3, [r3, #20]
   14a56:	4798      	blx	r3
   14a58:	e7df      	b.n	14a1a <bt_l2cap_recv+0x22>
   14a5a:	bf00      	nop
   14a5c:	0002e354 	.word	0x0002e354
   14a60:	0002a3c0 	.word	0x0002a3c0
   14a64:	0002e371 	.word	0x0002e371

00014a68 <bt_l2cap_update_conn_param>:
{
   14a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   14a6a:	4b17      	ldr	r3, [pc, #92]	; (14ac8 <bt_l2cap_update_conn_param+0x60>)
{
   14a6c:	460e      	mov	r6, r1
	ident++;
   14a6e:	7819      	ldrb	r1, [r3, #0]
{
   14a70:	4605      	mov	r5, r0
	ident++;
   14a72:	3101      	adds	r1, #1
   14a74:	b2c9      	uxtb	r1, r1
   14a76:	2901      	cmp	r1, #1
   14a78:	bf38      	it	cc
   14a7a:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14a7c:	2208      	movs	r2, #8
   14a7e:	2012      	movs	r0, #18
	ident++;
   14a80:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14a82:	f7ff fea5 	bl	147d0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   14a86:	4604      	mov	r4, r0
   14a88:	b1d0      	cbz	r0, 14ac0 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   14a8a:	2108      	movs	r1, #8
   14a8c:	300c      	adds	r0, #12
   14a8e:	f004 fbe9 	bl	19264 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   14a92:	8833      	ldrh	r3, [r6, #0]
   14a94:	4622      	mov	r2, r4
   14a96:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   14a98:	8873      	ldrh	r3, [r6, #2]
   14a9a:	2105      	movs	r1, #5
   14a9c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   14a9e:	88b3      	ldrh	r3, [r6, #4]
   14aa0:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   14aa2:	88f3      	ldrh	r3, [r6, #6]
   14aa4:	80c3      	strh	r3, [r0, #6]
   14aa6:	2300      	movs	r3, #0
   14aa8:	4628      	mov	r0, r5
   14aaa:	9300      	str	r3, [sp, #0]
   14aac:	f011 fd2b 	bl	26506 <bt_l2cap_send_cb>
	if (err) {
   14ab0:	4605      	mov	r5, r0
   14ab2:	b110      	cbz	r0, 14aba <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   14ab4:	4620      	mov	r0, r4
   14ab6:	f004 fab3 	bl	19020 <net_buf_unref>
}
   14aba:	4628      	mov	r0, r5
   14abc:	b002      	add	sp, #8
   14abe:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   14ac0:	f06f 050b 	mvn.w	r5, #11
   14ac4:	e7f9      	b.n	14aba <bt_l2cap_update_conn_param+0x52>
   14ac6:	bf00      	nop
   14ac8:	20021dbe 	.word	0x20021dbe

00014acc <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   14acc:	2823      	cmp	r0, #35	; 0x23
   14ace:	d81f      	bhi.n	14b10 <att_op_get_type+0x44>
   14ad0:	281a      	cmp	r0, #26
   14ad2:	d804      	bhi.n	14ade <att_op_get_type+0x12>
   14ad4:	1e43      	subs	r3, r0, #1
   14ad6:	2b18      	cmp	r3, #24
   14ad8:	d90e      	bls.n	14af8 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   14ada:	2006      	movs	r0, #6
   14adc:	4770      	bx	lr
	switch (op) {
   14ade:	f1a0 031b 	sub.w	r3, r0, #27
   14ae2:	2b08      	cmp	r3, #8
   14ae4:	d81e      	bhi.n	14b24 <att_op_get_type+0x58>
   14ae6:	e8df f003 	tbb	[pc, r3]
   14aea:	1d05      	.short	0x1d05
   14aec:	191d231b 	.word	0x191d231b
   14af0:	1d25      	.short	0x1d25
   14af2:	05          	.byte	0x05
   14af3:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   14af4:	2003      	movs	r0, #3
   14af6:	4770      	bx	lr
   14af8:	2301      	movs	r3, #1
	switch (op) {
   14afa:	4a0f      	ldr	r2, [pc, #60]	; (14b38 <att_op_get_type+0x6c>)
   14afc:	4083      	lsls	r3, r0
   14afe:	401a      	ands	r2, r3
   14b00:	b9c2      	cbnz	r2, 14b34 <att_op_get_type+0x68>
   14b02:	4a0e      	ldr	r2, [pc, #56]	; (14b3c <att_op_get_type+0x70>)
   14b04:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   14b06:	2a00      	cmp	r2, #0
   14b08:	bf14      	ite	ne
   14b0a:	2001      	movne	r0, #1
   14b0c:	2006      	moveq	r0, #6
   14b0e:	4770      	bx	lr
	switch (op) {
   14b10:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   14b14:	2b52      	cmp	r3, #82	; 0x52
   14b16:	d105      	bne.n	14b24 <att_op_get_type+0x58>
		return ATT_COMMAND;
   14b18:	2000      	movs	r0, #0
}
   14b1a:	4770      	bx	lr
		return ATT_REQUEST;
   14b1c:	2001      	movs	r0, #1
   14b1e:	4770      	bx	lr
		return ATT_INDICATION;
   14b20:	2005      	movs	r0, #5
   14b22:	4770      	bx	lr
		return ATT_COMMAND;
   14b24:	f010 0f40 	tst.w	r0, #64	; 0x40
   14b28:	bf0c      	ite	eq
   14b2a:	2006      	moveq	r0, #6
   14b2c:	2000      	movne	r0, #0
   14b2e:	4770      	bx	lr
	switch (op) {
   14b30:	2004      	movs	r0, #4
   14b32:	4770      	bx	lr
		return ATT_RESPONSE;
   14b34:	2002      	movs	r0, #2
   14b36:	4770      	bx	lr
   14b38:	028aaaaa 	.word	0x028aaaaa
   14b3c:	01455554 	.word	0x01455554

00014b40 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   14b40:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   14b42:	3804      	subs	r0, #4
   14b44:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   14b46:	a901      	add	r1, sp, #4
   14b48:	4802      	ldr	r0, [pc, #8]	; (14b54 <bt_att_released+0x14>)
   14b4a:	f00a fb8f 	bl	1f26c <k_mem_slab_free>
}
   14b4e:	b003      	add	sp, #12
   14b50:	f85d fb04 	ldr.w	pc, [sp], #4
   14b54:	20008a28 	.word	0x20008a28

00014b58 <tx_meta_data_free>:
{
   14b58:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   14b5a:	4604      	mov	r4, r0
   14b5c:	b948      	cbnz	r0, 14b72 <tx_meta_data_free+0x1a>
   14b5e:	490a      	ldr	r1, [pc, #40]	; (14b88 <tx_meta_data_free+0x30>)
   14b60:	480a      	ldr	r0, [pc, #40]	; (14b8c <tx_meta_data_free+0x34>)
   14b62:	23a6      	movs	r3, #166	; 0xa6
   14b64:	4a0a      	ldr	r2, [pc, #40]	; (14b90 <tx_meta_data_free+0x38>)
   14b66:	f00f ff1e 	bl	249a6 <assert_print>
   14b6a:	21a6      	movs	r1, #166	; 0xa6
   14b6c:	4808      	ldr	r0, [pc, #32]	; (14b90 <tx_meta_data_free+0x38>)
   14b6e:	f00f ff13 	bl	24998 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   14b72:	2100      	movs	r1, #0
   14b74:	2214      	movs	r2, #20
   14b76:	f014 fcb6 	bl	294e6 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   14b7a:	4621      	mov	r1, r4
}
   14b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   14b80:	4804      	ldr	r0, [pc, #16]	; (14b94 <tx_meta_data_free+0x3c>)
   14b82:	f014 baad 	b.w	290e0 <k_queue_append>
   14b86:	bf00      	nop
   14b88:	0002defe 	.word	0x0002defe
   14b8c:	0002b339 	.word	0x0002b339
   14b90:	0002e3a6 	.word	0x0002e3a6
   14b94:	20008bb0 	.word	0x20008bb0

00014b98 <find_type_cb>:
{
   14b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14b9c:	f642 0301 	movw	r3, #10241	; 0x2801
   14ba0:	2500      	movs	r5, #0
{
   14ba2:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   14ba4:	f8d2 9000 	ldr.w	r9, [r2]
{
   14ba8:	4607      	mov	r7, r0
   14baa:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14bac:	6800      	ldr	r0, [r0, #0]
   14bae:	a90d      	add	r1, sp, #52	; 0x34
	struct bt_conn *conn = chan->chan.chan.conn;
   14bb0:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
   14bb4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14bb6:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   14bba:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   14bbe:	f010 ffd2 	bl	25b66 <bt_uuid_cmp>
   14bc2:	2800      	cmp	r0, #0
   14bc4:	d067      	beq.n	14c96 <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   14bc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14bca:	6838      	ldr	r0, [r7, #0]
   14bcc:	a90d      	add	r1, sp, #52	; 0x34
   14bce:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   14bd2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   14bd6:	f010 ffc6 	bl	25b66 <bt_uuid_cmp>
   14bda:	b138      	cbz	r0, 14bec <find_type_cb+0x54>
		if (data->group &&
   14bdc:	68a3      	ldr	r3, [r4, #8]
   14bde:	b11b      	cbz	r3, 14be8 <find_type_cb+0x50>
   14be0:	885a      	ldrh	r2, [r3, #2]
   14be2:	42b2      	cmp	r2, r6
   14be4:	d200      	bcs.n	14be8 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   14be6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   14be8:	2001      	movs	r0, #1
   14bea:	e009      	b.n	14c00 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   14bec:	6861      	ldr	r1, [r4, #4]
   14bee:	4608      	mov	r0, r1
   14bf0:	f011 fcbf 	bl	26572 <net_buf_frags_len>
   14bf4:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   14bf8:	1a1b      	subs	r3, r3, r0
   14bfa:	2b03      	cmp	r3, #3
   14bfc:	d803      	bhi.n	14c06 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   14bfe:	2000      	movs	r0, #0
}
   14c00:	b013      	add	sp, #76	; 0x4c
   14c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   14c06:	4608      	mov	r0, r1
   14c08:	f004 fa66 	bl	190d8 <net_buf_frag_last>
   14c0c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   14c0e:	6860      	ldr	r0, [r4, #4]
   14c10:	f011 fcaf 	bl	26572 <net_buf_frags_len>
   14c14:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   14c18:	f105 0b0c 	add.w	fp, r5, #12
   14c1c:	ebaa 0a00 	sub.w	sl, sl, r0
   14c20:	4658      	mov	r0, fp
   14c22:	f012 fea6 	bl	27972 <net_buf_simple_tailroom>
   14c26:	4582      	cmp	sl, r0
   14c28:	d238      	bcs.n	14c9c <find_type_cb+0x104>
   14c2a:	6860      	ldr	r0, [r4, #4]
   14c2c:	f011 fca1 	bl	26572 <net_buf_frags_len>
   14c30:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   14c34:	1a18      	subs	r0, r3, r0
	if (!len) {
   14c36:	b970      	cbnz	r0, 14c56 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   14c38:	6863      	ldr	r3, [r4, #4]
   14c3a:	7a98      	ldrb	r0, [r3, #10]
   14c3c:	f003 ffb6 	bl	18bac <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   14c40:	2200      	movs	r2, #0
   14c42:	2300      	movs	r3, #0
   14c44:	f012 fe7b 	bl	2793e <net_buf_alloc_fixed>
		if (!frag) {
   14c48:	4605      	mov	r5, r0
   14c4a:	2800      	cmp	r0, #0
   14c4c:	d0d7      	beq.n	14bfe <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   14c4e:	4601      	mov	r1, r0
   14c50:	6860      	ldr	r0, [r4, #4]
   14c52:	f004 fa87 	bl	19164 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   14c56:	2300      	movs	r3, #0
   14c58:	9300      	str	r3, [sp, #0]
   14c5a:	2310      	movs	r3, #16
   14c5c:	4639      	mov	r1, r7
   14c5e:	f8d7 9004 	ldr.w	r9, [r7, #4]
   14c62:	4640      	mov	r0, r8
   14c64:	eb0d 0203 	add.w	r2, sp, r3
   14c68:	47c8      	blx	r9
	if (read < 0) {
   14c6a:	1e07      	subs	r7, r0, #0
   14c6c:	db13      	blt.n	14c96 <find_type_cb+0xfe>
	if (read != data->value_len) {
   14c6e:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   14c70:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   14c72:	42ba      	cmp	r2, r7
   14c74:	d031      	beq.n	14cda <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   14c76:	4601      	mov	r1, r0
   14c78:	a80d      	add	r0, sp, #52	; 0x34
   14c7a:	f010 ffa2 	bl	25bc2 <bt_uuid_create>
   14c7e:	4603      	mov	r3, r0
   14c80:	b980      	cbnz	r0, 14ca4 <find_type_cb+0x10c>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   14c82:	7c22      	ldrb	r2, [r4, #16]
   14c84:	9203      	str	r2, [sp, #12]
   14c86:	4a17      	ldr	r2, [pc, #92]	; (14ce4 <find_type_cb+0x14c>)
			LOG_WRN("Unable to create UUID: size %d", read);
   14c88:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14c8c:	4916      	ldr	r1, [pc, #88]	; (14ce8 <find_type_cb+0x150>)
   14c8e:	2202      	movs	r2, #2
   14c90:	9300      	str	r3, [sp, #0]
   14c92:	f011 fd5d 	bl	26750 <z_log_msg_runtime_create.constprop.0>
	data->group = NULL;
   14c96:	2300      	movs	r3, #0
   14c98:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   14c9a:	e7a5      	b.n	14be8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   14c9c:	4658      	mov	r0, fp
   14c9e:	f012 fe68 	bl	27972 <net_buf_simple_tailroom>
   14ca2:	e7c8      	b.n	14c36 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   14ca4:	b2fa      	uxtb	r2, r7
   14ca6:	a904      	add	r1, sp, #16
   14ca8:	a808      	add	r0, sp, #32
   14caa:	f010 ff8a 	bl	25bc2 <bt_uuid_create>
   14cae:	4603      	mov	r3, r0
   14cb0:	b910      	cbnz	r0, 14cb8 <find_type_cb+0x120>
			LOG_WRN("Unable to create UUID: size %d", read);
   14cb2:	4a0e      	ldr	r2, [pc, #56]	; (14cec <find_type_cb+0x154>)
   14cb4:	9703      	str	r7, [sp, #12]
   14cb6:	e7e7      	b.n	14c88 <find_type_cb+0xf0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   14cb8:	a908      	add	r1, sp, #32
   14cba:	a80d      	add	r0, sp, #52	; 0x34
   14cbc:	f010 ff53 	bl	25b66 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   14cc0:	2800      	cmp	r0, #0
   14cc2:	d1e8      	bne.n	14c96 <find_type_cb+0xfe>
	data->err = 0x00;
   14cc4:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   14cc6:	2104      	movs	r1, #4
   14cc8:	7463      	strb	r3, [r4, #17]
   14cca:	f105 000c 	add.w	r0, r5, #12
   14cce:	f004 fac9 	bl	19264 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   14cd2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   14cd4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   14cd6:	68a3      	ldr	r3, [r4, #8]
   14cd8:	e785      	b.n	14be6 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   14cda:	a904      	add	r1, sp, #16
   14cdc:	f014 fbb9 	bl	29452 <memcmp>
   14ce0:	e7ee      	b.n	14cc0 <find_type_cb+0x128>
   14ce2:	bf00      	nop
   14ce4:	0002e3d5 	.word	0x0002e3d5
   14ce8:	0002a370 	.word	0x0002a370
   14cec:	0002e3f4 	.word	0x0002e3f4

00014cf0 <chan_send>:
{
   14cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14cf4:	4606      	mov	r6, r0
   14cf6:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   14cf8:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   14cfc:	68cb      	ldr	r3, [r1, #12]
{
   14cfe:	b085      	sub	sp, #20
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   14d00:	2102      	movs	r1, #2
   14d02:	3098      	adds	r0, #152	; 0x98
   14d04:	f011 fc4f 	bl	265a6 <atomic_test_bit>
   14d08:	2800      	cmp	r0, #0
   14d0a:	d053      	beq.n	14db4 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   14d0c:	781b      	ldrb	r3, [r3, #0]
   14d0e:	2bd2      	cmp	r3, #210	; 0xd2
   14d10:	d11a      	bne.n	14d48 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   14d12:	6833      	ldr	r3, [r6, #0]
   14d14:	4621      	mov	r1, r4
   14d16:	6818      	ldr	r0, [r3, #0]
   14d18:	f012 fcf2 	bl	27700 <bt_smp_sign>
		if (err) {
   14d1c:	4605      	mov	r5, r0
   14d1e:	b198      	cbz	r0, 14d48 <chan_send+0x58>
			LOG_ERR("Error signing data");
   14d20:	4b26      	ldr	r3, [pc, #152]	; (14dbc <chan_send+0xcc>)
   14d22:	2201      	movs	r2, #1
   14d24:	9302      	str	r3, [sp, #8]
   14d26:	2300      	movs	r3, #0
   14d28:	4925      	ldr	r1, [pc, #148]	; (14dc0 <chan_send+0xd0>)
   14d2a:	4618      	mov	r0, r3
   14d2c:	e9cd 3300 	strd	r3, r3, [sp]
   14d30:	f011 fd0e 	bl	26750 <z_log_msg_runtime_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   14d34:	69a0      	ldr	r0, [r4, #24]
   14d36:	f7ff ff0f 	bl	14b58 <tx_meta_data_free>
			net_buf_unref(buf);
   14d3a:	4620      	mov	r0, r4
   14d3c:	f004 f970 	bl	19020 <net_buf_unref>
}
   14d40:	4628      	mov	r0, r5
   14d42:	b005      	add	sp, #20
   14d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   14d48:	f104 000c 	add.w	r0, r4, #12
   14d4c:	f012 fe0d 	bl	2796a <net_buf_simple_headroom>
	state->len = buf->len;
   14d50:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   14d54:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14d58:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   14d5a:	4607      	mov	r7, r0
   14d5c:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   14d5e:	68e3      	ldr	r3, [r4, #12]
   14d60:	7818      	ldrb	r0, [r3, #0]
   14d62:	f7ff feb3 	bl	14acc <att_op_get_type>
   14d66:	2805      	cmp	r0, #5
   14d68:	4605      	mov	r5, r0
	switch (op_type) {
   14d6a:	d813      	bhi.n	14d94 <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14d6c:	4b15      	ldr	r3, [pc, #84]	; (14dc4 <chan_send+0xd4>)
   14d6e:	4622      	mov	r2, r4
   14d70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   14d74:	2104      	movs	r1, #4
   14d76:	4630      	mov	r0, r6
   14d78:	f8cd 9000 	str.w	r9, [sp]
   14d7c:	f011 fbc3 	bl	26506 <bt_l2cap_send_cb>
	if (err) {
   14d80:	4605      	mov	r5, r0
   14d82:	2800      	cmp	r0, #0
   14d84:	d0dc      	beq.n	14d40 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   14d86:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   14d88:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   14d8c:	fa13 f787 	uxtah	r7, r3, r7
   14d90:	60e7      	str	r7, [r4, #12]
}
   14d92:	e7d5      	b.n	14d40 <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   14d94:	f240 2357 	movw	r3, #599	; 0x257
   14d98:	4a0b      	ldr	r2, [pc, #44]	; (14dc8 <chan_send+0xd8>)
   14d9a:	490c      	ldr	r1, [pc, #48]	; (14dcc <chan_send+0xdc>)
   14d9c:	480c      	ldr	r0, [pc, #48]	; (14dd0 <chan_send+0xe0>)
   14d9e:	f00f fe02 	bl	249a6 <assert_print>
   14da2:	4629      	mov	r1, r5
   14da4:	480b      	ldr	r0, [pc, #44]	; (14dd4 <chan_send+0xe4>)
   14da6:	f00f fdfe 	bl	249a6 <assert_print>
   14daa:	f240 2157 	movw	r1, #599	; 0x257
   14dae:	4806      	ldr	r0, [pc, #24]	; (14dc8 <chan_send+0xd8>)
   14db0:	f00f fdf2 	bl	24998 <assert_post_action>
		return -EINVAL;
   14db4:	f06f 0515 	mvn.w	r5, #21
   14db8:	e7c2      	b.n	14d40 <chan_send+0x50>
   14dba:	bf00      	nop
   14dbc:	0002e413 	.word	0x0002e413
   14dc0:	0002a370 	.word	0x0002a370
   14dc4:	0002ad28 	.word	0x0002ad28
   14dc8:	0002e3a6 	.word	0x0002e3a6
   14dcc:	00030a97 	.word	0x00030a97
   14dd0:	0002b339 	.word	0x0002b339
   14dd4:	0002e426 	.word	0x0002e426

00014dd8 <bt_att_chan_req_send>:
{
   14dd8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   14dda:	b958      	cbnz	r0, 14df4 <bt_att_chan_req_send+0x1c>
   14ddc:	4919      	ldr	r1, [pc, #100]	; (14e44 <bt_att_chan_req_send+0x6c>)
   14dde:	f44f 7346 	mov.w	r3, #792	; 0x318
   14de2:	4a19      	ldr	r2, [pc, #100]	; (14e48 <bt_att_chan_req_send+0x70>)
   14de4:	4819      	ldr	r0, [pc, #100]	; (14e4c <bt_att_chan_req_send+0x74>)
   14de6:	f00f fdde 	bl	249a6 <assert_print>
   14dea:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   14dee:	4816      	ldr	r0, [pc, #88]	; (14e48 <bt_att_chan_req_send+0x70>)
   14df0:	f00f fdd2 	bl	24998 <assert_post_action>
   14df4:	b949      	cbnz	r1, 14e0a <bt_att_chan_req_send+0x32>
   14df6:	4916      	ldr	r1, [pc, #88]	; (14e50 <bt_att_chan_req_send+0x78>)
   14df8:	f240 3319 	movw	r3, #793	; 0x319
   14dfc:	4a12      	ldr	r2, [pc, #72]	; (14e48 <bt_att_chan_req_send+0x70>)
   14dfe:	4813      	ldr	r0, [pc, #76]	; (14e4c <bt_att_chan_req_send+0x74>)
   14e00:	f00f fdd1 	bl	249a6 <assert_print>
   14e04:	f240 3119 	movw	r1, #793	; 0x319
   14e08:	e7f1      	b.n	14dee <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   14e0a:	684a      	ldr	r2, [r1, #4]
   14e0c:	b94a      	cbnz	r2, 14e22 <bt_att_chan_req_send+0x4a>
   14e0e:	4911      	ldr	r1, [pc, #68]	; (14e54 <bt_att_chan_req_send+0x7c>)
   14e10:	f240 331a 	movw	r3, #794	; 0x31a
   14e14:	4a0c      	ldr	r2, [pc, #48]	; (14e48 <bt_att_chan_req_send+0x70>)
   14e16:	480d      	ldr	r0, [pc, #52]	; (14e4c <bt_att_chan_req_send+0x74>)
   14e18:	f00f fdc5 	bl	249a6 <assert_print>
   14e1c:	f240 311a 	movw	r1, #794	; 0x31a
   14e20:	e7e5      	b.n	14dee <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   14e22:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   14e26:	b14b      	cbz	r3, 14e3c <bt_att_chan_req_send+0x64>
   14e28:	490b      	ldr	r1, [pc, #44]	; (14e58 <bt_att_chan_req_send+0x80>)
   14e2a:	f240 331b 	movw	r3, #795	; 0x31b
   14e2e:	4a06      	ldr	r2, [pc, #24]	; (14e48 <bt_att_chan_req_send+0x70>)
   14e30:	4806      	ldr	r0, [pc, #24]	; (14e4c <bt_att_chan_req_send+0x74>)
   14e32:	f00f fdb8 	bl	249a6 <assert_print>
   14e36:	f240 311b 	movw	r1, #795	; 0x31b
   14e3a:	e7d8      	b.n	14dee <bt_att_chan_req_send+0x16>
}
   14e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   14e40:	f011 bc95 	b.w	2676e <chan_req_send>
   14e44:	0002e43f 	.word	0x0002e43f
   14e48:	0002e3a6 	.word	0x0002e3a6
   14e4c:	0002b339 	.word	0x0002b339
   14e50:	0002e455 	.word	0x0002e455
   14e54:	0002e444 	.word	0x0002e444
   14e58:	0002e44e 	.word	0x0002e44e

00014e5c <att_get>:
{
   14e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   14e5e:	7b43      	ldrb	r3, [r0, #13]
   14e60:	2b07      	cmp	r3, #7
   14e62:	d00d      	beq.n	14e80 <att_get+0x24>
		LOG_WRN("Not connected");
   14e64:	4b18      	ldr	r3, [pc, #96]	; (14ec8 <att_get+0x6c>)
   14e66:	2202      	movs	r2, #2
   14e68:	9302      	str	r3, [sp, #8]
   14e6a:	2300      	movs	r3, #0
   14e6c:	4618      	mov	r0, r3
   14e6e:	e9cd 3300 	strd	r3, r3, [sp]
   14e72:	4916      	ldr	r1, [pc, #88]	; (14ecc <att_get+0x70>)
		LOG_ERR("Unable to find ATT channel");
   14e74:	f011 fc6c 	bl	26750 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   14e78:	2000      	movs	r0, #0
}
   14e7a:	b005      	add	sp, #20
   14e7c:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   14e80:	2104      	movs	r1, #4
   14e82:	f011 fb62 	bl	2654a <bt_l2cap_le_lookup_rx_cid>
   14e86:	4603      	mov	r3, r0
	if (!chan) {
   14e88:	b930      	cbnz	r0, 14e98 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   14e8a:	4a11      	ldr	r2, [pc, #68]	; (14ed0 <att_get+0x74>)
   14e8c:	490f      	ldr	r1, [pc, #60]	; (14ecc <att_get+0x70>)
   14e8e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   14e92:	9000      	str	r0, [sp, #0]
   14e94:	2201      	movs	r2, #1
   14e96:	e7ed      	b.n	14e74 <att_get+0x18>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   14e98:	2102      	movs	r1, #2
   14e9a:	3094      	adds	r0, #148	; 0x94
   14e9c:	f011 fb83 	bl	265a6 <atomic_test_bit>
   14ea0:	b970      	cbnz	r0, 14ec0 <att_get+0x64>
   14ea2:	490c      	ldr	r1, [pc, #48]	; (14ed4 <att_get+0x78>)
   14ea4:	f640 332a 	movw	r3, #2858	; 0xb2a
   14ea8:	4a0b      	ldr	r2, [pc, #44]	; (14ed8 <att_get+0x7c>)
   14eaa:	480c      	ldr	r0, [pc, #48]	; (14edc <att_get+0x80>)
   14eac:	f00f fd7b 	bl	249a6 <assert_print>
   14eb0:	480b      	ldr	r0, [pc, #44]	; (14ee0 <att_get+0x84>)
   14eb2:	f00f fd78 	bl	249a6 <assert_print>
   14eb6:	f640 312a 	movw	r1, #2858	; 0xb2a
   14eba:	4807      	ldr	r0, [pc, #28]	; (14ed8 <att_get+0x7c>)
   14ebc:	f00f fd6c 	bl	24998 <assert_post_action>
	return att_chan->att;
   14ec0:	f853 0c04 	ldr.w	r0, [r3, #-4]
   14ec4:	e7d9      	b.n	14e7a <att_get+0x1e>
   14ec6:	bf00      	nop
   14ec8:	0002e459 	.word	0x0002e459
   14ecc:	0002a370 	.word	0x0002a370
   14ed0:	0002e467 	.word	0x0002e467
   14ed4:	0002e482 	.word	0x0002e482
   14ed8:	0002e3a6 	.word	0x0002e3a6
   14edc:	0002b339 	.word	0x0002b339
   14ee0:	0002e4b2 	.word	0x0002e4b2

00014ee4 <bt_att_connected>:
{
   14ee4:	b510      	push	{r4, lr}
   14ee6:	4604      	mov	r4, r0
   14ee8:	f100 0394 	add.w	r3, r0, #148	; 0x94
   14eec:	e8d3 1fef 	ldaex	r1, [r3]
   14ef0:	f041 0104 	orr.w	r1, r1, #4
   14ef4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14ef8:	2a00      	cmp	r2, #0
   14efa:	d1f7      	bne.n	14eec <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14efc:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   14efe:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14f00:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14f02:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   14f04:	f011 fb91 	bl	2662a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   14f08:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   14f0c:	4903      	ldr	r1, [pc, #12]	; (14f1c <bt_att_connected+0x38>)
   14f0e:	f00b fa69 	bl	203e4 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   14f12:	6820      	ldr	r0, [r4, #0]
}
   14f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   14f18:	f001 bf04 	b.w	16d24 <bt_gatt_connected>
   14f1c:	00015b79 	.word	0x00015b79

00014f20 <read_group_cb>:
{
   14f20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14f24:	f04f 0800 	mov.w	r8, #0
   14f28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   14f2c:	4605      	mov	r5, r0
   14f2e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14f30:	6800      	ldr	r0, [r0, #0]
   14f32:	a902      	add	r1, sp, #8
{
   14f34:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   14f36:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14f38:	f88d 8008 	strb.w	r8, [sp, #8]
   14f3c:	f8ad 300a 	strh.w	r3, [sp, #10]
   14f40:	f010 fe11 	bl	25b66 <bt_uuid_cmp>
   14f44:	b1a0      	cbz	r0, 14f70 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14f46:	f642 0301 	movw	r3, #10241	; 0x2801
   14f4a:	6828      	ldr	r0, [r5, #0]
   14f4c:	a903      	add	r1, sp, #12
   14f4e:	f88d 800c 	strb.w	r8, [sp, #12]
   14f52:	f8ad 300e 	strh.w	r3, [sp, #14]
   14f56:	f010 fe06 	bl	25b66 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14f5a:	b148      	cbz	r0, 14f70 <read_group_cb+0x50>
		if (data->group &&
   14f5c:	6923      	ldr	r3, [r4, #16]
   14f5e:	b11b      	cbz	r3, 14f68 <read_group_cb+0x48>
   14f60:	885a      	ldrh	r2, [r3, #2]
   14f62:	42b2      	cmp	r2, r6
   14f64:	d200      	bcs.n	14f68 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   14f66:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   14f68:	2001      	movs	r0, #1
}
   14f6a:	b004      	add	sp, #16
   14f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14f70:	6861      	ldr	r1, [r4, #4]
   14f72:	6828      	ldr	r0, [r5, #0]
   14f74:	f010 fdf7 	bl	25b66 <bt_uuid_cmp>
   14f78:	b110      	cbz	r0, 14f80 <read_group_cb+0x60>
		data->group = NULL;
   14f7a:	2300      	movs	r3, #0
   14f7c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   14f7e:	e7f3      	b.n	14f68 <read_group_cb+0x48>
	if (data->rsp->len &&
   14f80:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   14f82:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   14f84:	781a      	ldrb	r2, [r3, #0]
   14f86:	b132      	cbz	r2, 14f96 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   14f88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   14f8a:	8a01      	ldrh	r1, [r0, #16]
   14f8c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   14f8e:	4293      	cmp	r3, r2
   14f90:	da01      	bge.n	14f96 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   14f92:	2000      	movs	r0, #0
   14f94:	e7e9      	b.n	14f6a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   14f96:	2104      	movs	r1, #4
   14f98:	300c      	adds	r0, #12
   14f9a:	f004 f963 	bl	19264 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14f9e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   14fa0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   14fa2:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14fa4:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   14fa6:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14fa8:	4b07      	ldr	r3, [pc, #28]	; (14fc8 <read_group_cb+0xa8>)
   14faa:	9401      	str	r4, [sp, #4]
   14fac:	9300      	str	r3, [sp, #0]
   14fae:	4638      	mov	r0, r7
   14fb0:	2300      	movs	r3, #0
   14fb2:	68a2      	ldr	r2, [r4, #8]
   14fb4:	f011 fc1c 	bl	267f0 <att_chan_read>
	if (read < 0) {
   14fb8:	2800      	cmp	r0, #0
   14fba:	dbea      	blt.n	14f92 <read_group_cb+0x72>
	if (!data->group) {
   14fbc:	6920      	ldr	r0, [r4, #16]
   14fbe:	3800      	subs	r0, #0
   14fc0:	bf18      	it	ne
   14fc2:	2001      	movne	r0, #1
   14fc4:	e7d1      	b.n	14f6a <read_group_cb+0x4a>
   14fc6:	bf00      	nop
   14fc8:	00026691 	.word	0x00026691

00014fcc <read_type_cb>:
{
   14fcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   14fd0:	6817      	ldr	r7, [r2, #0]
{
   14fd2:	4605      	mov	r5, r0
   14fd4:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14fd6:	6800      	ldr	r0, [r0, #0]
   14fd8:	6851      	ldr	r1, [r2, #4]
{
   14fda:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   14fdc:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14fde:	f010 fdc2 	bl	25b66 <bt_uuid_cmp>
   14fe2:	4681      	mov	r9, r0
   14fe4:	2800      	cmp	r0, #0
   14fe6:	d13c      	bne.n	15062 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14fe8:	4630      	mov	r0, r6
   14fea:	2295      	movs	r2, #149	; 0x95
   14fec:	4629      	mov	r1, r5
   14fee:	f012 f8c5 	bl	2717c <bt_gatt_check_perm>
   14ff2:	4606      	mov	r6, r0
   14ff4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   14ff6:	b140      	cbz	r0, 1500a <read_type_cb+0x3e>
		if (data->rsp->len) {
   14ff8:	68e3      	ldr	r3, [r4, #12]
   14ffa:	781b      	ldrb	r3, [r3, #0]
   14ffc:	b10b      	cbz	r3, 15002 <read_type_cb+0x36>
			data->err = 0x00;
   14ffe:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   15002:	2000      	movs	r0, #0
}
   15004:	b003      	add	sp, #12
   15006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1500a:	68a0      	ldr	r0, [r4, #8]
   1500c:	f004 f864 	bl	190d8 <net_buf_frag_last>
   15010:	2102      	movs	r1, #2
   15012:	300c      	adds	r0, #12
   15014:	f004 f926 	bl	19264 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15018:	4b13      	ldr	r3, [pc, #76]	; (15068 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1501a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1501c:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15020:	9300      	str	r3, [sp, #0]
   15022:	9401      	str	r4, [sp, #4]
   15024:	4633      	mov	r3, r6
   15026:	4629      	mov	r1, r5
   15028:	4638      	mov	r0, r7
   1502a:	68a2      	ldr	r2, [r4, #8]
   1502c:	f011 fbe0 	bl	267f0 <att_chan_read>
	if (read < 0) {
   15030:	2800      	cmp	r0, #0
   15032:	da07      	bge.n	15044 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   15034:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   15038:	bf32      	itee	cc
   1503a:	200e      	movcc	r0, #14
		return -err;
   1503c:	4240      	negcs	r0, r0
   1503e:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   15040:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   15042:	e7de      	b.n	15002 <read_type_cb+0x36>
	if (!data->item) {
   15044:	6923      	ldr	r3, [r4, #16]
   15046:	2b00      	cmp	r3, #0
   15048:	d0db      	beq.n	15002 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1504a:	68a0      	ldr	r0, [r4, #8]
   1504c:	f011 fa91 	bl	26572 <net_buf_frags_len>
   15050:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   15052:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15054:	68e3      	ldr	r3, [r4, #12]
   15056:	781b      	ldrb	r3, [r3, #0]
   15058:	4298      	cmp	r0, r3
   1505a:	bf94      	ite	ls
   1505c:	2000      	movls	r0, #0
   1505e:	2001      	movhi	r0, #1
   15060:	e7d0      	b.n	15004 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   15062:	2001      	movs	r0, #1
   15064:	e7ce      	b.n	15004 <read_type_cb+0x38>
   15066:	bf00      	nop
   15068:	00026583 	.word	0x00026583

0001506c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1506c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1506e:	b087      	sub	sp, #28
   15070:	4604      	mov	r4, r0
   15072:	460f      	mov	r7, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15074:	2200      	movs	r2, #0
   15076:	2300      	movs	r3, #0
   15078:	4831      	ldr	r0, [pc, #196]	; (15140 <bt_att_accept+0xd4>)
   1507a:	a904      	add	r1, sp, #16
   1507c:	f00a f88c 	bl	1f198 <k_mem_slab_alloc>
   15080:	4605      	mov	r5, r0
   15082:	b178      	cbz	r0, 150a4 <bt_att_accept+0x38>
		LOG_ERR("No available ATT context for conn %p", conn);
   15084:	4b2f      	ldr	r3, [pc, #188]	; (15144 <bt_att_accept+0xd8>)
   15086:	2201      	movs	r2, #1
   15088:	9302      	str	r3, [sp, #8]
   1508a:	2300      	movs	r3, #0
   1508c:	e9cd 3300 	strd	r3, r3, [sp]
   15090:	9403      	str	r4, [sp, #12]
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   15092:	4618      	mov	r0, r3
   15094:	492c      	ldr	r1, [pc, #176]	; (15148 <bt_att_accept+0xdc>)
   15096:	f011 fb5b 	bl	26750 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   1509a:	f06f 060b 	mvn.w	r6, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1509e:	4630      	mov	r0, r6
   150a0:	b007      	add	sp, #28
   150a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   150a4:	f00c fc42 	bl	2192c <z_impl_z_current_get>
	(void)memset(att, 0, sizeof(*att));
   150a8:	9e04      	ldr	r6, [sp, #16]
	att_handle_rsp_thread = k_current_get();
   150aa:	4b28      	ldr	r3, [pc, #160]	; (1514c <bt_att_accept+0xe0>)
   150ac:	222c      	movs	r2, #44	; 0x2c
   150ae:	6018      	str	r0, [r3, #0]
   150b0:	4629      	mov	r1, r5
   150b2:	1d30      	adds	r0, r6, #4
   150b4:	f014 fa17 	bl	294e6 <memset>
	att->conn = conn;
   150b8:	6034      	str	r4, [r6, #0]
	sys_slist_init(&att->reqs);
   150ba:	9c04      	ldr	r4, [sp, #16]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   150bc:	2200      	movs	r2, #0
   150be:	2300      	movs	r3, #0
	list->tail = NULL;
   150c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   150c4:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   150c8:	4821      	ldr	r0, [pc, #132]	; (15150 <bt_att_accept+0xe4>)
   150ca:	a905      	add	r1, sp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   150cc:	9505      	str	r5, [sp, #20]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   150ce:	f00a f863 	bl	1f198 <k_mem_slab_alloc>
   150d2:	4606      	mov	r6, r0
   150d4:	b140      	cbz	r0, 150e8 <bt_att_accept+0x7c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   150d6:	6823      	ldr	r3, [r4, #0]
   150d8:	2202      	movs	r2, #2
   150da:	9303      	str	r3, [sp, #12]
   150dc:	4b1d      	ldr	r3, [pc, #116]	; (15154 <bt_att_accept+0xe8>)
   150de:	9500      	str	r5, [sp, #0]
   150e0:	e9cd 5301 	strd	r5, r3, [sp, #4]
   150e4:	462b      	mov	r3, r5
   150e6:	e7d4      	b.n	15092 <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   150e8:	9b05      	ldr	r3, [sp, #20]
   150ea:	4601      	mov	r1, r0
   150ec:	22f8      	movs	r2, #248	; 0xf8
   150ee:	4618      	mov	r0, r3
   150f0:	f014 f9f9 	bl	294e6 <memset>
	chan->chan.chan.ops = &ops;
   150f4:	4a18      	ldr	r2, [pc, #96]	; (15158 <bt_att_accept+0xec>)
   150f6:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   150f8:	30a0      	adds	r0, #160	; 0xa0
   150fa:	f013 ffe4 	bl	290c6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   150fe:	9b05      	ldr	r3, [sp, #20]
   15100:	3398      	adds	r3, #152	; 0x98
   15102:	e8d3 2fef 	ldaex	r2, [r3]
   15106:	e8c3 6fe1 	stlex	r1, r6, [r3]
   1510a:	2900      	cmp	r1, #0
   1510c:	d1f9      	bne.n	15102 <bt_att_accept+0x96>
	chan->att = att;
   1510e:	9b05      	ldr	r3, [sp, #20]
   15110:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   15112:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   15114:	9d05      	ldr	r5, [sp, #20]
	if (sys_slist_is_empty(&att->chans)) {
   15116:	b91b      	cbnz	r3, 15120 <bt_att_accept+0xb4>
   15118:	f104 000c 	add.w	r0, r4, #12
   1511c:	f013 ffd3 	bl	290c6 <z_impl_k_queue_init>
	return list->head;
   15120:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   15122:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
	parent->next = child;
   15126:	f8c5 20f0 	str.w	r2, [r5, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   1512a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   1512c:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1512e:	b902      	cbnz	r2, 15132 <bt_att_accept+0xc6>
	list->tail = node;
   15130:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   15132:	9b05      	ldr	r3, [sp, #20]
	if (!chan) {
   15134:	2b00      	cmp	r3, #0
   15136:	d0b0      	beq.n	1509a <bt_att_accept+0x2e>
	*ch = &chan->chan.chan;
   15138:	3304      	adds	r3, #4
   1513a:	603b      	str	r3, [r7, #0]
	return 0;
   1513c:	e7af      	b.n	1509e <bt_att_accept+0x32>
   1513e:	bf00      	nop
   15140:	20008a08 	.word	0x20008a08
   15144:	0002e4ce 	.word	0x0002e4ce
   15148:	0002a370 	.word	0x0002a370
   1514c:	200210a8 	.word	0x200210a8
   15150:	20008a28 	.word	0x20008a28
   15154:	0002e4f3 	.word	0x0002e4f3
   15158:	200084c8 	.word	0x200084c8

0001515c <bt_att_chan_create_pdu>:
{
   1515c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1515e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   15160:	3201      	adds	r2, #1
   15162:	429a      	cmp	r2, r3
{
   15164:	460d      	mov	r5, r1
   15166:	b087      	sub	sp, #28
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   15168:	d90f      	bls.n	1518a <bt_att_chan_create_pdu+0x2e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1516a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1516e:	4b25      	ldr	r3, [pc, #148]	; (15204 <bt_att_chan_create_pdu+0xa8>)
   15170:	2202      	movs	r2, #2
   15172:	9302      	str	r3, [sp, #8]
   15174:	2300      	movs	r3, #0
   15176:	4924      	ldr	r1, [pc, #144]	; (15208 <bt_att_chan_create_pdu+0xac>)
   15178:	4618      	mov	r0, r3
   1517a:	e9cd 3300 	strd	r3, r3, [sp]
   1517e:	f011 fae7 	bl	26750 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   15182:	2400      	movs	r4, #0
}
   15184:	4620      	mov	r0, r4
   15186:	b007      	add	sp, #28
   15188:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   1518a:	4608      	mov	r0, r1
   1518c:	f7ff fc9e 	bl	14acc <att_op_get_type>
   15190:	2802      	cmp	r0, #2
   15192:	d018      	beq.n	151c6 <bt_att_chan_create_pdu+0x6a>
   15194:	2804      	cmp	r0, #4
   15196:	d016      	beq.n	151c6 <bt_att_chan_create_pdu+0x6a>
		timeout = K_FOREVER;
   15198:	f04f 36ff 	mov.w	r6, #4294967295
   1519c:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   151a0:	2100      	movs	r1, #0
   151a2:	4632      	mov	r2, r6
   151a4:	463b      	mov	r3, r7
   151a6:	4608      	mov	r0, r1
   151a8:	f011 f9aa 	bl	26500 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   151ac:	4604      	mov	r4, r0
   151ae:	b970      	cbnz	r0, 151ce <bt_att_chan_create_pdu+0x72>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   151b0:	4b16      	ldr	r3, [pc, #88]	; (1520c <bt_att_chan_create_pdu+0xb0>)
   151b2:	2201      	movs	r2, #1
   151b4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   151b8:	4913      	ldr	r1, [pc, #76]	; (15208 <bt_att_chan_create_pdu+0xac>)
   151ba:	4603      	mov	r3, r0
   151bc:	9503      	str	r5, [sp, #12]
   151be:	9000      	str	r0, [sp, #0]
   151c0:	f011 fac6 	bl	26750 <z_log_msg_runtime_create.constprop.0>
		return NULL;
   151c4:	e7dd      	b.n	15182 <bt_att_chan_create_pdu+0x26>
	switch (att_op_get_type(op)) {
   151c6:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   151ca:	2700      	movs	r7, #0
   151cc:	e7e8      	b.n	151a0 <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   151ce:	4810      	ldr	r0, [pc, #64]	; (15210 <bt_att_chan_create_pdu+0xb4>)
   151d0:	463b      	mov	r3, r7
   151d2:	4632      	mov	r2, r6
   151d4:	f00a fc18 	bl	1fa08 <z_impl_k_queue_get>
   151d8:	4603      	mov	r3, r0
	if (!data) {
   151da:	b958      	cbnz	r0, 151f4 <bt_att_chan_create_pdu+0x98>
		LOG_WRN("Unable to allocate ATT TX meta");
   151dc:	4a0d      	ldr	r2, [pc, #52]	; (15214 <bt_att_chan_create_pdu+0xb8>)
   151de:	9000      	str	r0, [sp, #0]
   151e0:	e9cd 0201 	strd	r0, r2, [sp, #4]
   151e4:	4908      	ldr	r1, [pc, #32]	; (15208 <bt_att_chan_create_pdu+0xac>)
   151e6:	2202      	movs	r2, #2
   151e8:	f011 fab2 	bl	26750 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   151ec:	4620      	mov	r0, r4
   151ee:	f003 ff17 	bl	19020 <net_buf_unref>
		return NULL;
   151f2:	e7c6      	b.n	15182 <bt_att_chan_create_pdu+0x26>
	bt_att_tx_meta_data(buf) = data;
   151f4:	61a0      	str	r0, [r4, #24]
   151f6:	2101      	movs	r1, #1
   151f8:	f104 000c 	add.w	r0, r4, #12
   151fc:	f004 f832 	bl	19264 <net_buf_simple_add>
	hdr->code = op;
   15200:	7005      	strb	r5, [r0, #0]
	return buf;
   15202:	e7bf      	b.n	15184 <bt_att_chan_create_pdu+0x28>
   15204:	0002e518 	.word	0x0002e518
   15208:	0002a370 	.word	0x0002a370
   1520c:	0002e209 	.word	0x0002e209
   15210:	20008bb0 	.word	0x20008bb0
   15214:	0002e53d 	.word	0x0002e53d

00015218 <bt_att_recv>:
{
   15218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   1521c:	8a0b      	ldrh	r3, [r1, #16]
{
   1521e:	4607      	mov	r7, r0
   15220:	460d      	mov	r5, r1
   15222:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   15224:	b963      	cbnz	r3, 15240 <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   15226:	4a42      	ldr	r2, [pc, #264]	; (15330 <bt_att_recv+0x118>)
   15228:	9300      	str	r3, [sp, #0]
   1522a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1522e:	2201      	movs	r2, #1
			LOG_WRN("Ignoring unexpected request");
   15230:	4618      	mov	r0, r3
   15232:	4940      	ldr	r1, [pc, #256]	; (15334 <bt_att_recv+0x11c>)
   15234:	f011 fa8c 	bl	26750 <z_log_msg_runtime_create.constprop.0>
}
   15238:	2000      	movs	r0, #0
   1523a:	b006      	add	sp, #24
   1523c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15240:	2101      	movs	r1, #1
   15242:	f105 000c 	add.w	r0, r5, #12
   15246:	f003 ffef 	bl	19228 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1524a:	f857 3c04 	ldr.w	r3, [r7, #-4]
   1524e:	4604      	mov	r4, r0
   15250:	2b00      	cmp	r3, #0
   15252:	d0f1      	beq.n	15238 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15254:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   15256:	7802      	ldrb	r2, [r0, #0]
   15258:	4e37      	ldr	r6, [pc, #220]	; (15338 <bt_att_recv+0x120>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1525a:	f1a7 0804 	sub.w	r8, r7, #4
		if (hdr->code == handlers[i].op) {
   1525e:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   15262:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   15266:	4290      	cmp	r0, r2
   15268:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   1526c:	d111      	bne.n	15292 <bt_att_recv+0x7a>
		if (handler->type == ATT_REQUEST &&
   1526e:	f891 9002 	ldrb.w	r9, [r1, #2]
   15272:	f1b9 0f01 	cmp.w	r9, #1
   15276:	d12b      	bne.n	152d0 <bt_att_recv+0xb8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   15278:	2100      	movs	r1, #0
   1527a:	f107 0094 	add.w	r0, r7, #148	; 0x94
   1527e:	f011 fb5d 	bl	2693c <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   15282:	b380      	cbz	r0, 152e6 <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected request");
   15284:	4b2d      	ldr	r3, [pc, #180]	; (1533c <bt_att_recv+0x124>)
   15286:	9302      	str	r3, [sp, #8]
   15288:	2300      	movs	r3, #0
   1528a:	2202      	movs	r2, #2
   1528c:	e9cd 3300 	strd	r3, r3, [sp]
   15290:	e7ce      	b.n	15230 <bt_att_recv+0x18>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   15292:	3301      	adds	r3, #1
   15294:	2b0e      	cmp	r3, #14
   15296:	d1e2      	bne.n	1525e <bt_att_recv+0x46>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   15298:	2500      	movs	r5, #0
   1529a:	4b29      	ldr	r3, [pc, #164]	; (15340 <bt_att_recv+0x128>)
   1529c:	4628      	mov	r0, r5
   1529e:	4925      	ldr	r1, [pc, #148]	; (15334 <bt_att_recv+0x11c>)
   152a0:	9203      	str	r2, [sp, #12]
   152a2:	9302      	str	r3, [sp, #8]
   152a4:	2202      	movs	r2, #2
   152a6:	462b      	mov	r3, r5
   152a8:	e9cd 5500 	strd	r5, r5, [sp]
   152ac:	f011 fa50 	bl	26750 <z_log_msg_runtime_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   152b0:	7821      	ldrb	r1, [r4, #0]
   152b2:	4608      	mov	r0, r1
   152b4:	f7ff fc0a 	bl	14acc <att_op_get_type>
   152b8:	2800      	cmp	r0, #0
   152ba:	d0bd      	beq.n	15238 <bt_att_recv+0x20>
   152bc:	2805      	cmp	r0, #5
   152be:	d0bb      	beq.n	15238 <bt_att_recv+0x20>
	if (!req) {
   152c0:	2900      	cmp	r1, #0
   152c2:	d0b9      	beq.n	15238 <bt_att_recv+0x20>
   152c4:	2306      	movs	r3, #6
   152c6:	2200      	movs	r2, #0
   152c8:	4640      	mov	r0, r8
   152ca:	f011 fc9b 	bl	26c04 <send_err_rsp.part.0>
   152ce:	e7b3      	b.n	15238 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   152d0:	f1b9 0f05 	cmp.w	r9, #5
   152d4:	d107      	bne.n	152e6 <bt_att_recv+0xce>
			   atomic_test_and_set_bit(att_chan->flags,
   152d6:	2101      	movs	r1, #1
   152d8:	f107 0094 	add.w	r0, r7, #148	; 0x94
   152dc:	f011 fb2e 	bl	2693c <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   152e0:	b108      	cbz	r0, 152e6 <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected indication");
   152e2:	4b18      	ldr	r3, [pc, #96]	; (15344 <bt_att_recv+0x12c>)
   152e4:	e7cf      	b.n	15286 <bt_att_recv+0x6e>
	if (buf->len < handler->expect_len) {
   152e6:	4456      	add	r6, sl
   152e8:	8a2b      	ldrh	r3, [r5, #16]
   152ea:	7872      	ldrb	r2, [r6, #1]
   152ec:	429a      	cmp	r2, r3
   152ee:	d911      	bls.n	15314 <bt_att_recv+0xfc>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   152f0:	7822      	ldrb	r2, [r4, #0]
   152f2:	4910      	ldr	r1, [pc, #64]	; (15334 <bt_att_recv+0x11c>)
   152f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
   152f8:	4b13      	ldr	r3, [pc, #76]	; (15348 <bt_att_recv+0x130>)
   152fa:	2201      	movs	r2, #1
   152fc:	9302      	str	r3, [sp, #8]
   152fe:	2300      	movs	r3, #0
   15300:	4618      	mov	r0, r3
   15302:	e9cd 3300 	strd	r3, r3, [sp]
   15306:	f011 fa23 	bl	26750 <z_log_msg_runtime_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1530a:	f1b9 0f01 	cmp.w	r9, #1
   1530e:	d193      	bne.n	15238 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   15310:	2304      	movs	r3, #4
   15312:	e009      	b.n	15328 <bt_att_recv+0x110>
		err = handler->func(att_chan, buf);
   15314:	6873      	ldr	r3, [r6, #4]
   15316:	4629      	mov	r1, r5
   15318:	4640      	mov	r0, r8
   1531a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1531c:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   15320:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   15322:	d189      	bne.n	15238 <bt_att_recv+0x20>
   15324:	2800      	cmp	r0, #0
   15326:	d087      	beq.n	15238 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   15328:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   1532a:	2900      	cmp	r1, #0
   1532c:	d084      	beq.n	15238 <bt_att_recv+0x20>
   1532e:	e7ca      	b.n	152c6 <bt_att_recv+0xae>
   15330:	0002e55c 	.word	0x0002e55c
   15334:	0002a370 	.word	0x0002a370
   15338:	0002ad40 	.word	0x0002ad40
   1533c:	0002e591 	.word	0x0002e591
   15340:	0002e577 	.word	0x0002e577
   15344:	0002e5ad 	.word	0x0002e5ad
   15348:	0002e5cc 	.word	0x0002e5cc

0001534c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1534c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1534e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15350:	6803      	ldr	r3, [r0, #0]
   15352:	460d      	mov	r5, r1
   15354:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   15356:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15358:	bf18      	it	ne
   1535a:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1535c:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1535e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   15360:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   15362:	f011 ff3f 	bl	271e4 <bt_gatt_change_aware>
   15366:	b948      	cbnz	r0, 1537c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15368:	2105      	movs	r1, #5
   1536a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1536e:	f011 fae5 	bl	2693c <atomic_test_and_set_bit>
   15372:	2800      	cmp	r0, #0
   15374:	d048      	beq.n	15408 <att_write_rsp.constprop.0+0xbc>
			return 0;
   15376:	2000      	movs	r0, #0
}
   15378:	b007      	add	sp, #28
   1537a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1537c:	2e00      	cmp	r6, #0
   1537e:	d045      	beq.n	1540c <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   15380:	2218      	movs	r2, #24
   15382:	2100      	movs	r1, #0
   15384:	4668      	mov	r0, sp
   15386:	f014 f8ae 	bl	294e6 <memset>
	if (rsp) {
   1538a:	bb67      	cbnz	r7, 153e6 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1538c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1538e:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   15390:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   15392:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   15394:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   15396:	2300      	movs	r3, #0
   15398:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1539c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1539e:	4a1c      	ldr	r2, [pc, #112]	; (15410 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   153a0:	9303      	str	r3, [sp, #12]
	data.len = len;
   153a2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   153a6:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   153aa:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   153ae:	2301      	movs	r3, #1
   153b0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   153b4:	466b      	mov	r3, sp
   153b6:	f011 f92d 	bl	26614 <bt_gatt_foreach_attr>
	if (data.err) {
   153ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
   153be:	b1e3      	cbz	r3, 153fa <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   153c0:	2f00      	cmp	r7, #0
   153c2:	d0d8      	beq.n	15376 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   153c4:	9b01      	ldr	r3, [sp, #4]
   153c6:	6998      	ldr	r0, [r3, #24]
   153c8:	f7ff fbc6 	bl	14b58 <tx_meta_data_free>
			net_buf_unref(data.buf);
   153cc:	9801      	ldr	r0, [sp, #4]
   153ce:	f003 fe27 	bl	19020 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   153d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   153d6:	2d00      	cmp	r5, #0
   153d8:	d0cd      	beq.n	15376 <att_write_rsp.constprop.0+0x2a>
   153da:	4632      	mov	r2, r6
   153dc:	4629      	mov	r1, r5
   153de:	4620      	mov	r0, r4
   153e0:	f011 fc10 	bl	26c04 <send_err_rsp.part.0>
   153e4:	e7c7      	b.n	15376 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   153e6:	2200      	movs	r2, #0
   153e8:	4639      	mov	r1, r7
   153ea:	4620      	mov	r0, r4
   153ec:	f7ff feb6 	bl	1515c <bt_att_chan_create_pdu>
   153f0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   153f2:	2800      	cmp	r0, #0
   153f4:	d1ca      	bne.n	1538c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   153f6:	200e      	movs	r0, #14
   153f8:	e7be      	b.n	15378 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   153fa:	9901      	ldr	r1, [sp, #4]
   153fc:	2900      	cmp	r1, #0
   153fe:	d0ba      	beq.n	15376 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   15400:	4620      	mov	r0, r4
   15402:	f011 f9e7 	bl	267d4 <bt_att_chan_send_rsp>
   15406:	e7b6      	b.n	15376 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15408:	2012      	movs	r0, #18
   1540a:	e7b5      	b.n	15378 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1540c:	2001      	movs	r0, #1
   1540e:	e7b3      	b.n	15378 <att_write_rsp.constprop.0+0x2c>
   15410:	000265b3 	.word	0x000265b3

00015414 <bt_att_create_pdu>:
{
   15414:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   15416:	460e      	mov	r6, r1
   15418:	4615      	mov	r5, r2
	att = att_get(conn);
   1541a:	f7ff fd1f 	bl	14e5c <att_get>
	if (!att) {
   1541e:	b1c0      	cbz	r0, 15452 <bt_att_create_pdu+0x3e>
	return list->head;
   15420:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15422:	4618      	mov	r0, r3
   15424:	b11b      	cbz	r3, 1542e <bt_att_create_pdu+0x1a>
	return node->next;
   15426:	f850 39f0 	ldr.w	r3, [r0], #-240
   1542a:	b103      	cbz	r3, 1542e <bt_att_create_pdu+0x1a>
   1542c:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1542e:	1c6c      	adds	r4, r5, #1
   15430:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15432:	b118      	cbz	r0, 1543c <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15434:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   15436:	42a1      	cmp	r1, r4
   15438:	d216      	bcs.n	15468 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1543a:	b96b      	cbnz	r3, 15458 <bt_att_create_pdu+0x44>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1543c:	4b0f      	ldr	r3, [pc, #60]	; (1547c <bt_att_create_pdu+0x68>)
   1543e:	2202      	movs	r2, #2
   15440:	9302      	str	r3, [sp, #8]
   15442:	2300      	movs	r3, #0
   15444:	490e      	ldr	r1, [pc, #56]	; (15480 <bt_att_create_pdu+0x6c>)
   15446:	4618      	mov	r0, r3
   15448:	e9cd 3300 	strd	r3, r3, [sp]
   1544c:	9403      	str	r4, [sp, #12]
   1544e:	f011 f97f 	bl	26750 <z_log_msg_runtime_create.constprop.0>
}
   15452:	2000      	movs	r0, #0
   15454:	b004      	add	sp, #16
   15456:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15458:	4618      	mov	r0, r3
   1545a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1545e:	b153      	cbz	r3, 15476 <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15460:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15462:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15464:	428a      	cmp	r2, r1
   15466:	d8f7      	bhi.n	15458 <bt_att_create_pdu+0x44>
		return bt_att_chan_create_pdu(chan, op, len);
   15468:	462a      	mov	r2, r5
   1546a:	4631      	mov	r1, r6
}
   1546c:	b004      	add	sp, #16
   1546e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   15472:	f7ff be73 	b.w	1515c <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   15476:	4614      	mov	r4, r2
   15478:	e7dc      	b.n	15434 <bt_att_create_pdu+0x20>
   1547a:	bf00      	nop
   1547c:	0002e5eb 	.word	0x0002e5eb
   15480:	0002a370 	.word	0x0002a370

00015484 <att_read_group_req>:
{
   15484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15488:	8a0e      	ldrh	r6, [r1, #16]
{
   1548a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1548c:	3e04      	subs	r6, #4
   1548e:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   15490:	2e02      	cmp	r6, #2
{
   15492:	4608      	mov	r0, r1
   15494:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   15496:	d001      	beq.n	1549c <att_read_group_req+0x18>
   15498:	2e10      	cmp	r6, #16
   1549a:	d16a      	bne.n	15572 <att_read_group_req+0xee>
   1549c:	2104      	movs	r1, #4
   1549e:	300c      	adds	r0, #12
   154a0:	f003 fec2 	bl	19228 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   154a4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   154a8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   154aa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   154ac:	1d01      	adds	r1, r0, #4
   154ae:	4632      	mov	r2, r6
   154b0:	4640      	mov	r0, r8
   154b2:	f010 fb86 	bl	25bc2 <bt_uuid_create>
   154b6:	2800      	cmp	r0, #0
   154b8:	d05d      	beq.n	15576 <att_read_group_req+0xf2>
	if (!start || !end) {
   154ba:	2d00      	cmp	r5, #0
   154bc:	d03a      	beq.n	15534 <att_read_group_req+0xb0>
   154be:	2600      	movs	r6, #0
   154c0:	2f00      	cmp	r7, #0
   154c2:	d036      	beq.n	15532 <att_read_group_req+0xae>
	if (start > end) {
   154c4:	42bd      	cmp	r5, r7
   154c6:	d835      	bhi.n	15534 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   154c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   154cc:	4640      	mov	r0, r8
   154ce:	a901      	add	r1, sp, #4
   154d0:	f88d 6004 	strb.w	r6, [sp, #4]
   154d4:	f8ad 3006 	strh.w	r3, [sp, #6]
   154d8:	f010 fb45 	bl	25b66 <bt_uuid_cmp>
   154dc:	bb70      	cbnz	r0, 1553c <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   154de:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   154e0:	2214      	movs	r2, #20
   154e2:	2100      	movs	r1, #0
   154e4:	a807      	add	r0, sp, #28
   154e6:	f013 fffe 	bl	294e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   154ea:	2201      	movs	r2, #1
   154ec:	2111      	movs	r1, #17
   154ee:	4630      	mov	r0, r6
   154f0:	f7ff ff90 	bl	15414 <bt_att_create_pdu>
   154f4:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   154f6:	2800      	cmp	r0, #0
   154f8:	d03d      	beq.n	15576 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   154fa:	2101      	movs	r1, #1
   154fc:	300c      	adds	r0, #12
	data.uuid = uuid;
   154fe:	e9cd 4807 	strd	r4, r8, [sp, #28]
   15502:	f003 feaf 	bl	19264 <net_buf_simple_add>
	data.rsp->len = 0U;
   15506:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15508:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1550a:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1550c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1550e:	4a1b      	ldr	r2, [pc, #108]	; (1557c <att_read_group_req+0xf8>)
	data.group = NULL;
   15510:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15512:	4628      	mov	r0, r5
   15514:	ab07      	add	r3, sp, #28
   15516:	f011 f87d 	bl	26614 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1551a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1551c:	781b      	ldrb	r3, [r3, #0]
   1551e:	bb1b      	cbnz	r3, 15568 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15520:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15522:	6998      	ldr	r0, [r3, #24]
   15524:	f7ff fb18 	bl	14b58 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15528:	9809      	ldr	r0, [sp, #36]	; 0x24
   1552a:	f003 fd79 	bl	19020 <net_buf_unref>
	if (!req) {
   1552e:	230a      	movs	r3, #10
   15530:	e001      	b.n	15536 <att_read_group_req+0xb2>
			*err = 0U;
   15532:	463d      	mov	r5, r7
	if (!req) {
   15534:	2301      	movs	r3, #1
   15536:	462a      	mov	r2, r5
   15538:	2110      	movs	r1, #16
   1553a:	e00e      	b.n	1555a <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1553c:	f642 0301 	movw	r3, #10241	; 0x2801
   15540:	4640      	mov	r0, r8
   15542:	a907      	add	r1, sp, #28
   15544:	f88d 601c 	strb.w	r6, [sp, #28]
   15548:	f8ad 301e 	strh.w	r3, [sp, #30]
   1554c:	f010 fb0b 	bl	25b66 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15550:	2800      	cmp	r0, #0
   15552:	d0c4      	beq.n	154de <att_read_group_req+0x5a>
	if (!req) {
   15554:	2310      	movs	r3, #16
   15556:	462a      	mov	r2, r5
   15558:	4619      	mov	r1, r3
   1555a:	4620      	mov	r0, r4
   1555c:	f011 fb52 	bl	26c04 <send_err_rsp.part.0>
		return 0;
   15560:	2000      	movs	r0, #0
}
   15562:	b00c      	add	sp, #48	; 0x30
   15564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   15568:	4620      	mov	r0, r4
   1556a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1556c:	f011 f932 	bl	267d4 <bt_att_chan_send_rsp>
	return 0;
   15570:	e7f6      	b.n	15560 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   15572:	2004      	movs	r0, #4
   15574:	e7f5      	b.n	15562 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   15576:	200e      	movs	r0, #14
   15578:	e7f3      	b.n	15562 <att_read_group_req+0xde>
   1557a:	bf00      	nop
   1557c:	00014f21 	.word	0x00014f21

00015580 <att_read_mult_vl_req>:
{
   15580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   15584:	6846      	ldr	r6, [r0, #4]
{
   15586:	4604      	mov	r4, r0
   15588:	460d      	mov	r5, r1
   1558a:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   1558c:	2101      	movs	r1, #1
   1558e:	4630      	mov	r0, r6
   15590:	f011 fe28 	bl	271e4 <bt_gatt_change_aware>
   15594:	b950      	cbnz	r0, 155ac <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   15596:	2105      	movs	r1, #5
   15598:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1559c:	f011 f9ce 	bl	2693c <atomic_test_and_set_bit>
   155a0:	2800      	cmp	r0, #0
   155a2:	d13b      	bne.n	1561c <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   155a4:	2012      	movs	r0, #18
}
   155a6:	b005      	add	sp, #20
   155a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   155ac:	2210      	movs	r2, #16
   155ae:	2100      	movs	r1, #0
   155b0:	4668      	mov	r0, sp
   155b2:	f013 ff98 	bl	294e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   155b6:	2200      	movs	r2, #0
   155b8:	2121      	movs	r1, #33	; 0x21
   155ba:	4630      	mov	r0, r6
   155bc:	f7ff ff2a 	bl	15414 <bt_att_create_pdu>
   155c0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   155c2:	b368      	cbz	r0, 15620 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   155c4:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   155c8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 15624 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   155cc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   155ce:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   155d2:	8a2b      	ldrh	r3, [r5, #16]
   155d4:	2b01      	cmp	r3, #1
   155d6:	d804      	bhi.n	155e2 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   155d8:	4620      	mov	r0, r4
   155da:	9902      	ldr	r1, [sp, #8]
   155dc:	f011 f8fa 	bl	267d4 <bt_att_chan_send_rsp>
	return 0;
   155e0:	e01c      	b.n	1561c <att_read_mult_vl_req+0x9c>
   155e2:	4638      	mov	r0, r7
   155e4:	f012 f9b9 	bl	2795a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   155e8:	466b      	mov	r3, sp
   155ea:	464a      	mov	r2, r9
   155ec:	4601      	mov	r1, r0
   155ee:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   155f0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   155f4:	f011 f80e 	bl	26614 <bt_gatt_foreach_attr>
		if (data.err) {
   155f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   155fc:	2b00      	cmp	r3, #0
   155fe:	d0e8      	beq.n	155d2 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   15600:	9b02      	ldr	r3, [sp, #8]
   15602:	6998      	ldr	r0, [r3, #24]
   15604:	f7ff faa8 	bl	14b58 <tx_meta_data_free>
			net_buf_unref(data.buf);
   15608:	9802      	ldr	r0, [sp, #8]
   1560a:	f003 fd09 	bl	19020 <net_buf_unref>
	if (!req) {
   1560e:	4632      	mov	r2, r6
   15610:	2120      	movs	r1, #32
   15612:	4620      	mov	r0, r4
   15614:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15618:	f011 faf4 	bl	26c04 <send_err_rsp.part.0>
			return 0;
   1561c:	2000      	movs	r0, #0
   1561e:	e7c2      	b.n	155a6 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   15620:	200e      	movs	r0, #14
   15622:	e7c0      	b.n	155a6 <att_read_mult_vl_req+0x26>
   15624:	000269a5 	.word	0x000269a5

00015628 <att_read_mult_req>:
{
   15628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1562c:	6846      	ldr	r6, [r0, #4]
{
   1562e:	4604      	mov	r4, r0
   15630:	460d      	mov	r5, r1
   15632:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   15634:	2101      	movs	r1, #1
   15636:	4630      	mov	r0, r6
   15638:	f011 fdd4 	bl	271e4 <bt_gatt_change_aware>
   1563c:	b950      	cbnz	r0, 15654 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1563e:	2105      	movs	r1, #5
   15640:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15644:	f011 f97a 	bl	2693c <atomic_test_and_set_bit>
   15648:	2800      	cmp	r0, #0
   1564a:	d13b      	bne.n	156c4 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1564c:	2012      	movs	r0, #18
}
   1564e:	b005      	add	sp, #20
   15650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   15654:	2210      	movs	r2, #16
   15656:	2100      	movs	r1, #0
   15658:	4668      	mov	r0, sp
   1565a:	f013 ff44 	bl	294e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1565e:	2200      	movs	r2, #0
   15660:	210f      	movs	r1, #15
   15662:	4630      	mov	r0, r6
   15664:	f7ff fed6 	bl	15414 <bt_att_create_pdu>
   15668:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1566a:	b368      	cbz	r0, 156c8 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1566c:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15670:	f8df 9058 	ldr.w	r9, [pc, #88]	; 156cc <att_read_mult_req+0xa4>
	data.chan = chan;
   15674:	9400      	str	r4, [sp, #0]
   15676:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1567a:	8a2b      	ldrh	r3, [r5, #16]
   1567c:	2b01      	cmp	r3, #1
   1567e:	d804      	bhi.n	1568a <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   15680:	4620      	mov	r0, r4
   15682:	9902      	ldr	r1, [sp, #8]
   15684:	f011 f8a6 	bl	267d4 <bt_att_chan_send_rsp>
	return 0;
   15688:	e01c      	b.n	156c4 <att_read_mult_req+0x9c>
   1568a:	4638      	mov	r0, r7
   1568c:	f012 f965 	bl	2795a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15690:	466b      	mov	r3, sp
   15692:	464a      	mov	r2, r9
   15694:	4601      	mov	r1, r0
   15696:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   15698:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1569c:	f010 ffba 	bl	26614 <bt_gatt_foreach_attr>
		if (data.err) {
   156a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   156a4:	2b00      	cmp	r3, #0
   156a6:	d0e8      	beq.n	1567a <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   156a8:	9b02      	ldr	r3, [sp, #8]
   156aa:	6998      	ldr	r0, [r3, #24]
   156ac:	f7ff fa54 	bl	14b58 <tx_meta_data_free>
			net_buf_unref(data.buf);
   156b0:	9802      	ldr	r0, [sp, #8]
   156b2:	f003 fcb5 	bl	19020 <net_buf_unref>
	if (!req) {
   156b6:	4632      	mov	r2, r6
   156b8:	210e      	movs	r1, #14
   156ba:	4620      	mov	r0, r4
   156bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   156c0:	f011 faa0 	bl	26c04 <send_err_rsp.part.0>
			return 0;
   156c4:	2000      	movs	r0, #0
   156c6:	e7c2      	b.n	1564e <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   156c8:	200e      	movs	r0, #14
   156ca:	e7c0      	b.n	1564e <att_read_mult_req+0x26>
   156cc:	0002695f 	.word	0x0002695f

000156d0 <att_read_rsp>:
{
   156d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   156d4:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   156d8:	4604      	mov	r4, r0
   156da:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   156dc:	4640      	mov	r0, r8
   156de:	2101      	movs	r1, #1
{
   156e0:	4617      	mov	r7, r2
   156e2:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   156e4:	f011 fd7e 	bl	271e4 <bt_gatt_change_aware>
   156e8:	b948      	cbnz	r0, 156fe <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   156ea:	2105      	movs	r1, #5
   156ec:	f104 0098 	add.w	r0, r4, #152	; 0x98
   156f0:	f011 f924 	bl	2693c <atomic_test_and_set_bit>
   156f4:	bb78      	cbnz	r0, 15756 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   156f6:	2012      	movs	r0, #18
}
   156f8:	b004      	add	sp, #16
   156fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   156fe:	b38d      	cbz	r5, 15764 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   15700:	2210      	movs	r2, #16
   15702:	2100      	movs	r1, #0
   15704:	4668      	mov	r0, sp
   15706:	f013 feee 	bl	294e6 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1570a:	2200      	movs	r2, #0
   1570c:	4639      	mov	r1, r7
   1570e:	4640      	mov	r0, r8
   15710:	f7ff fe80 	bl	15414 <bt_att_create_pdu>
   15714:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15716:	b338      	cbz	r0, 15768 <att_read_rsp+0x98>
	data.offset = offset;
   15718:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1571c:	4629      	mov	r1, r5
	data.offset = offset;
   1571e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15722:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15724:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15726:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1572a:	4a10      	ldr	r2, [pc, #64]	; (1576c <att_read_rsp+0x9c>)
   1572c:	466b      	mov	r3, sp
	data.chan = chan;
   1572e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15730:	f010 ff70 	bl	26614 <bt_gatt_foreach_attr>
	if (data.err) {
   15734:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15738:	b17b      	cbz	r3, 1575a <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1573a:	9b02      	ldr	r3, [sp, #8]
   1573c:	6998      	ldr	r0, [r3, #24]
   1573e:	f7ff fa0b 	bl	14b58 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15742:	9802      	ldr	r0, [sp, #8]
   15744:	f003 fc6c 	bl	19020 <net_buf_unref>
	if (!req) {
   15748:	462a      	mov	r2, r5
   1574a:	4631      	mov	r1, r6
   1574c:	4620      	mov	r0, r4
   1574e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15752:	f011 fa57 	bl	26c04 <send_err_rsp.part.0>
			return 0;
   15756:	2000      	movs	r0, #0
   15758:	e7ce      	b.n	156f8 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1575a:	4620      	mov	r0, r4
   1575c:	9902      	ldr	r1, [sp, #8]
   1575e:	f011 f839 	bl	267d4 <bt_att_chan_send_rsp>
	return 0;
   15762:	e7f8      	b.n	15756 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   15764:	2001      	movs	r0, #1
   15766:	e7c7      	b.n	156f8 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   15768:	200e      	movs	r0, #14
   1576a:	e7c5      	b.n	156f8 <att_read_rsp+0x28>
   1576c:	0002695f 	.word	0x0002695f

00015770 <att_read_type_req>:
{
   15770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15774:	8a0d      	ldrh	r5, [r1, #16]
{
   15776:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   15778:	3d04      	subs	r5, #4
   1577a:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1577c:	2d02      	cmp	r5, #2
{
   1577e:	4608      	mov	r0, r1
   15780:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   15782:	d001      	beq.n	15788 <att_read_type_req+0x18>
   15784:	2d10      	cmp	r5, #16
   15786:	d150      	bne.n	1582a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   15788:	2104      	movs	r1, #4
   1578a:	300c      	adds	r0, #12
   1578c:	f003 fd4c 	bl	19228 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15790:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   15794:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15796:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15798:	1d01      	adds	r1, r0, #4
   1579a:	462a      	mov	r2, r5
   1579c:	4640      	mov	r0, r8
   1579e:	f010 fa10 	bl	25bc2 <bt_uuid_create>
   157a2:	b188      	cbz	r0, 157c8 <att_read_type_req+0x58>
	if (!start || !end) {
   157a4:	b19e      	cbz	r6, 157ce <att_read_type_req+0x5e>
   157a6:	b18f      	cbz	r7, 157cc <att_read_type_req+0x5c>
	if (start > end) {
   157a8:	42be      	cmp	r6, r7
   157aa:	d810      	bhi.n	157ce <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   157ac:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   157ae:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   157b0:	2100      	movs	r1, #0
   157b2:	eb0d 0002 	add.w	r0, sp, r2
   157b6:	f013 fe96 	bl	294e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   157ba:	2201      	movs	r2, #1
   157bc:	2109      	movs	r1, #9
   157be:	4628      	mov	r0, r5
   157c0:	f7ff fe28 	bl	15414 <bt_att_create_pdu>
   157c4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   157c6:	b960      	cbnz	r0, 157e2 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   157c8:	200e      	movs	r0, #14
   157ca:	e007      	b.n	157dc <att_read_type_req+0x6c>
			*err = 0U;
   157cc:	463e      	mov	r6, r7
	if (!req) {
   157ce:	2301      	movs	r3, #1
   157d0:	4632      	mov	r2, r6
   157d2:	2108      	movs	r1, #8
   157d4:	4620      	mov	r0, r4
   157d6:	f011 fa15 	bl	26c04 <send_err_rsp.part.0>
		return 0;
   157da:	2000      	movs	r0, #0
}
   157dc:	b00c      	add	sp, #48	; 0x30
   157de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   157e2:	2101      	movs	r1, #1
   157e4:	300c      	adds	r0, #12
	data.uuid = uuid;
   157e6:	e9cd 4806 	strd	r4, r8, [sp, #24]
   157ea:	f003 fd3b 	bl	19264 <net_buf_simple_add>
	data.rsp->len = 0U;
   157ee:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   157f0:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   157f2:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   157f4:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   157f6:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   157f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   157fc:	4630      	mov	r0, r6
   157fe:	ab06      	add	r3, sp, #24
   15800:	4a0b      	ldr	r2, [pc, #44]	; (15830 <att_read_type_req+0xc0>)
   15802:	f010 ff07 	bl	26614 <bt_gatt_foreach_attr>
	if (data.err) {
   15806:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1580a:	b14b      	cbz	r3, 15820 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1580c:	9b08      	ldr	r3, [sp, #32]
   1580e:	6998      	ldr	r0, [r3, #24]
   15810:	f7ff f9a2 	bl	14b58 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15814:	9808      	ldr	r0, [sp, #32]
   15816:	f003 fc03 	bl	19020 <net_buf_unref>
	if (!req) {
   1581a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1581e:	e7d7      	b.n	157d0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   15820:	4620      	mov	r0, r4
   15822:	9908      	ldr	r1, [sp, #32]
   15824:	f010 ffd6 	bl	267d4 <bt_att_chan_send_rsp>
	return 0;
   15828:	e7d7      	b.n	157da <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1582a:	2004      	movs	r0, #4
   1582c:	e7d6      	b.n	157dc <att_read_type_req+0x6c>
   1582e:	bf00      	nop
   15830:	00014fcd 	.word	0x00014fcd

00015834 <att_find_type_req>:
{
   15834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15838:	460f      	mov	r7, r1
   1583a:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1583c:	2106      	movs	r1, #6
   1583e:	b086      	sub	sp, #24
   15840:	f107 000c 	add.w	r0, r7, #12
   15844:	f003 fcf0 	bl	19228 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   15848:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1584a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1584e:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   15850:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   15854:	b1c5      	cbz	r5, 15888 <att_find_type_req+0x54>
   15856:	2300      	movs	r3, #0
   15858:	f1b8 0f00 	cmp.w	r8, #0
   1585c:	d013      	beq.n	15886 <att_find_type_req+0x52>
	if (start > end) {
   1585e:	4545      	cmp	r5, r8
   15860:	d812      	bhi.n	15888 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15862:	f88d 3000 	strb.w	r3, [sp]
   15866:	f88d 3004 	strb.w	r3, [sp, #4]
   1586a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1586e:	4668      	mov	r0, sp
   15870:	a901      	add	r1, sp, #4
   15872:	f8ad 2002 	strh.w	r2, [sp, #2]
   15876:	f8ad 3006 	strh.w	r3, [sp, #6]
   1587a:	f010 f974 	bl	25b66 <bt_uuid_cmp>
   1587e:	4606      	mov	r6, r0
   15880:	b160      	cbz	r0, 1589c <att_find_type_req+0x68>
	if (!req) {
   15882:	230a      	movs	r3, #10
   15884:	e001      	b.n	1588a <att_find_type_req+0x56>
			*err = 0U;
   15886:	4645      	mov	r5, r8
	if (!req) {
   15888:	2301      	movs	r3, #1
   1588a:	462a      	mov	r2, r5
   1588c:	2106      	movs	r1, #6
   1588e:	4620      	mov	r0, r4
   15890:	f011 f9b8 	bl	26c04 <send_err_rsp.part.0>
		return 0;
   15894:	2000      	movs	r0, #0
}
   15896:	b006      	add	sp, #24
   15898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1589c:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   158a0:	4601      	mov	r1, r0
   158a2:	2214      	movs	r2, #20
   158a4:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   158a6:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   158a8:	f013 fe1d 	bl	294e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   158ac:	4632      	mov	r2, r6
   158ae:	2107      	movs	r1, #7
   158b0:	4650      	mov	r0, sl
   158b2:	f7ff fdaf 	bl	15414 <bt_att_create_pdu>
   158b6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   158b8:	b1f8      	cbz	r0, 158fa <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   158ba:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   158bc:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   158be:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   158c2:	4628      	mov	r0, r5
   158c4:	ab01      	add	r3, sp, #4
   158c6:	4a0e      	ldr	r2, [pc, #56]	; (15900 <att_find_type_req+0xcc>)
	data.value = value;
   158c8:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   158cc:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   158ce:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   158d2:	f010 fe9f 	bl	26614 <bt_gatt_foreach_attr>
	if (data.err) {
   158d6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   158da:	b14b      	cbz	r3, 158f0 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   158dc:	9b02      	ldr	r3, [sp, #8]
   158de:	6998      	ldr	r0, [r3, #24]
   158e0:	f7ff f93a 	bl	14b58 <tx_meta_data_free>
		net_buf_unref(data.buf);
   158e4:	9802      	ldr	r0, [sp, #8]
   158e6:	f003 fb9b 	bl	19020 <net_buf_unref>
	if (!req) {
   158ea:	f89d 3015 	ldrb.w	r3, [sp, #21]
   158ee:	e7cc      	b.n	1588a <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   158f0:	4620      	mov	r0, r4
   158f2:	9902      	ldr	r1, [sp, #8]
   158f4:	f010 ff6e 	bl	267d4 <bt_att_chan_send_rsp>
	return 0;
   158f8:	e7cc      	b.n	15894 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   158fa:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   158fc:	e7cb      	b.n	15896 <att_find_type_req+0x62>
   158fe:	bf00      	nop
   15900:	00014b99 	.word	0x00014b99

00015904 <att_find_info_req>:
{
   15904:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   15906:	68cb      	ldr	r3, [r1, #12]
{
   15908:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1590a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1590c:	885e      	ldrh	r6, [r3, #2]
{
   1590e:	b085      	sub	sp, #20
	if (!start || !end) {
   15910:	b195      	cbz	r5, 15938 <att_find_info_req+0x34>
   15912:	b186      	cbz	r6, 15936 <att_find_info_req+0x32>
	if (start > end) {
   15914:	42ae      	cmp	r6, r5
   15916:	d30f      	bcc.n	15938 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   15918:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1591a:	2210      	movs	r2, #16
   1591c:	2100      	movs	r1, #0
   1591e:	4668      	mov	r0, sp
   15920:	f013 fde1 	bl	294e6 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   15924:	2200      	movs	r2, #0
   15926:	2105      	movs	r1, #5
   15928:	4638      	mov	r0, r7
   1592a:	f7ff fd73 	bl	15414 <bt_att_create_pdu>
   1592e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   15930:	b958      	cbnz	r0, 1594a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   15932:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   15934:	e007      	b.n	15946 <att_find_info_req+0x42>
			*err = 0U;
   15936:	4635      	mov	r5, r6
	if (!req) {
   15938:	2301      	movs	r3, #1
   1593a:	462a      	mov	r2, r5
   1593c:	2104      	movs	r1, #4
   1593e:	4620      	mov	r0, r4
   15940:	f011 f960 	bl	26c04 <send_err_rsp.part.0>
		return 0;
   15944:	2000      	movs	r0, #0
}
   15946:	b005      	add	sp, #20
   15948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1594a:	466b      	mov	r3, sp
   1594c:	4631      	mov	r1, r6
   1594e:	4628      	mov	r0, r5
   15950:	4a09      	ldr	r2, [pc, #36]	; (15978 <att_find_info_req+0x74>)
	data.chan = chan;
   15952:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15954:	f010 fe5e 	bl	26614 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   15958:	9b02      	ldr	r3, [sp, #8]
   1595a:	b943      	cbnz	r3, 1596e <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1595c:	9b01      	ldr	r3, [sp, #4]
   1595e:	6998      	ldr	r0, [r3, #24]
   15960:	f7ff f8fa 	bl	14b58 <tx_meta_data_free>
		net_buf_unref(data.buf);
   15964:	9801      	ldr	r0, [sp, #4]
   15966:	f003 fb5b 	bl	19020 <net_buf_unref>
	if (!req) {
   1596a:	230a      	movs	r3, #10
   1596c:	e7e5      	b.n	1593a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1596e:	4620      	mov	r0, r4
   15970:	9901      	ldr	r1, [sp, #4]
   15972:	f010 ff2f 	bl	267d4 <bt_att_chan_send_rsp>
	return 0;
   15976:	e7e5      	b.n	15944 <att_find_info_req+0x40>
   15978:	000266b1 	.word	0x000266b1

0001597c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1597c:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1597e:	4c09      	ldr	r4, [pc, #36]	; (159a4 <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   15980:	4d09      	ldr	r5, [pc, #36]	; (159a8 <bt_att_init+0x2c>)
   15982:	4620      	mov	r0, r4
   15984:	f013 fb9f 	bl	290c6 <z_impl_k_queue_init>
   15988:	4629      	mov	r1, r5
   1598a:	4620      	mov	r0, r4
   1598c:	f013 fba8 	bl	290e0 <k_queue_append>
   15990:	4620      	mov	r0, r4
   15992:	f105 0114 	add.w	r1, r5, #20
   15996:	f013 fba3 	bl	290e0 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1599a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1599e:	f000 bb9f 	b.w	160e0 <bt_gatt_init>
   159a2:	bf00      	nop
   159a4:	20008bb0 	.word	0x20008bb0
   159a8:	20021080 	.word	0x20021080

000159ac <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   159ac:	2300      	movs	r3, #0
{
   159ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   159b0:	4605      	mov	r5, r0
   159b2:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   159b4:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   159b6:	f00b ffb9 	bl	2192c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   159ba:	4b0c      	ldr	r3, [pc, #48]	; (159ec <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   159bc:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   159be:	681b      	ldr	r3, [r3, #0]
   159c0:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   159c2:	bf04      	itt	eq
   159c4:	2500      	moveq	r5, #0
   159c6:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   159c8:	462a      	mov	r2, r5
   159ca:	4623      	mov	r3, r4
   159cc:	4808      	ldr	r0, [pc, #32]	; (159f0 <bt_att_req_alloc+0x44>)
   159ce:	f009 fbe3 	bl	1f198 <k_mem_slab_alloc>
   159d2:	4601      	mov	r1, r0
   159d4:	b940      	cbnz	r0, 159e8 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   159d6:	9b01      	ldr	r3, [sp, #4]
   159d8:	221c      	movs	r2, #28
   159da:	4618      	mov	r0, r3
   159dc:	f013 fd83 	bl	294e6 <memset>
   159e0:	4603      	mov	r3, r0

	return req;
}
   159e2:	4618      	mov	r0, r3
   159e4:	b003      	add	sp, #12
   159e6:	bd30      	pop	{r4, r5, pc}
		return NULL;
   159e8:	2300      	movs	r3, #0
   159ea:	e7fa      	b.n	159e2 <bt_att_req_alloc+0x36>
   159ec:	200210a8 	.word	0x200210a8
   159f0:	20008a48 	.word	0x20008a48

000159f4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   159f4:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   159f6:	6883      	ldr	r3, [r0, #8]
{
   159f8:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   159fa:	b14b      	cbz	r3, 15a10 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   159fc:	6998      	ldr	r0, [r3, #24]
   159fe:	f7ff f8ab 	bl	14b58 <tx_meta_data_free>
		net_buf_unref(req->buf);
   15a02:	9b01      	ldr	r3, [sp, #4]
   15a04:	6898      	ldr	r0, [r3, #8]
   15a06:	f003 fb0b 	bl	19020 <net_buf_unref>
		req->buf = NULL;
   15a0a:	2200      	movs	r2, #0
   15a0c:	9b01      	ldr	r3, [sp, #4]
   15a0e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   15a10:	4803      	ldr	r0, [pc, #12]	; (15a20 <bt_att_req_free+0x2c>)
   15a12:	a901      	add	r1, sp, #4
   15a14:	f009 fc2a 	bl	1f26c <k_mem_slab_free>
}
   15a18:	b003      	add	sp, #12
   15a1a:	f85d fb04 	ldr.w	pc, [sp], #4
   15a1e:	bf00      	nop
   15a20:	20008a48 	.word	0x20008a48

00015a24 <att_handle_rsp>:
{
   15a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15a28:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15a2a:	30c0      	adds	r0, #192	; 0xc0
{
   15a2c:	461d      	mov	r5, r3
   15a2e:	460e      	mov	r6, r1
   15a30:	4617      	mov	r7, r2
	k_work_cancel_delayable(&chan->timeout_work);
   15a32:	f00a fdf9 	bl	20628 <k_work_cancel_delayable>
	if (!chan->req) {
   15a36:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   15a3a:	b97b      	cbnz	r3, 15a5c <att_handle_rsp+0x38>
		LOG_WRN("No pending ATT request");
   15a3c:	4a19      	ldr	r2, [pc, #100]	; (15aa4 <att_handle_rsp+0x80>)
   15a3e:	4618      	mov	r0, r3
   15a40:	e9cd 3201 	strd	r3, r2, [sp, #4]
   15a44:	4918      	ldr	r1, [pc, #96]	; (15aa8 <att_handle_rsp+0x84>)
   15a46:	2202      	movs	r2, #2
   15a48:	9300      	str	r3, [sp, #0]
   15a4a:	f010 fe81 	bl	26750 <z_log_msg_runtime_create.constprop.0>
	att_req_send_process(chan->att);
   15a4e:	6820      	ldr	r0, [r4, #0]
   15a50:	f011 f810 	bl	26a74 <att_req_send_process>
}
   15a54:	2000      	movs	r0, #0
   15a56:	b004      	add	sp, #16
   15a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   15a5c:	4a13      	ldr	r2, [pc, #76]	; (15aac <att_handle_rsp+0x88>)
   15a5e:	f04f 0800 	mov.w	r8, #0
   15a62:	4293      	cmp	r3, r2
   15a64:	d102      	bne.n	15a6c <att_handle_rsp+0x48>
		chan->req = NULL;
   15a66:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   15a6a:	e7f0      	b.n	15a4e <att_handle_rsp+0x2a>
	func = chan->req->func;
   15a6c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	chan->req->func = NULL;
   15a70:	f8c3 8004 	str.w	r8, [r3, #4]
	params = chan->req->user_data;
   15a74:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   15a78:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   15a7c:	f7ff ffba 	bl	159f4 <bt_att_req_free>
	att_req_send_process(chan->att);
   15a80:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   15a82:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   15a86:	f010 fff5 	bl	26a74 <att_req_send_process>
	if (func) {
   15a8a:	f1b9 0f00 	cmp.w	r9, #0
   15a8e:	d0e1      	beq.n	15a54 <att_handle_rsp+0x30>
		func(chan->att->conn, err, pdu, len, params);
   15a90:	6820      	ldr	r0, [r4, #0]
   15a92:	f8cd a000 	str.w	sl, [sp]
   15a96:	463b      	mov	r3, r7
   15a98:	4632      	mov	r2, r6
   15a9a:	4629      	mov	r1, r5
   15a9c:	6800      	ldr	r0, [r0, #0]
   15a9e:	47c8      	blx	r9
   15aa0:	e7d8      	b.n	15a54 <att_handle_rsp+0x30>
   15aa2:	bf00      	nop
   15aa4:	0002e606 	.word	0x0002e606
   15aa8:	0002a370 	.word	0x0002a370
   15aac:	200210ac 	.word	0x200210ac

00015ab0 <bt_att_disconnected>:
{
   15ab0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   15ab4:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   15ab8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   15aba:	2e00      	cmp	r6, #0
   15abc:	d056      	beq.n	15b6c <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   15abe:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   15ac2:	f106 0028 	add.w	r0, r6, #40	; 0x28
   15ac6:	f010 ff1e 	bl	26906 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   15aca:	1f27      	subs	r7, r4, #4
   15acc:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   15ad0:	2200      	movs	r2, #0
   15ad2:	2300      	movs	r3, #0
   15ad4:	4640      	mov	r0, r8
   15ad6:	f011 ff37 	bl	27948 <net_buf_get>
   15ada:	4605      	mov	r5, r0
   15adc:	bb28      	cbnz	r0, 15b2a <bt_att_disconnected+0x7a>
	if (chan->req) {
   15ade:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   15ae2:	b12b      	cbz	r3, 15af0 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   15ae4:	4602      	mov	r2, r0
   15ae6:	4601      	mov	r1, r0
   15ae8:	230e      	movs	r3, #14
   15aea:	4638      	mov	r0, r7
   15aec:	f7ff ff9a 	bl	15a24 <att_handle_rsp>
	chan->att = NULL;
   15af0:	2300      	movs	r3, #0
   15af2:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   15af6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15af8:	2b00      	cmp	r3, #0
   15afa:	d137      	bne.n	15b6c <bt_att_disconnected+0xbc>
	att_reset(att);
   15afc:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   15afe:	9803      	ldr	r0, [sp, #12]
   15b00:	2200      	movs	r2, #0
   15b02:	2300      	movs	r3, #0
   15b04:	300c      	adds	r0, #12
   15b06:	f011 ff1f 	bl	27948 <net_buf_get>
   15b0a:	4605      	mov	r5, r0
   15b0c:	b9a0      	cbnz	r0, 15b38 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   15b0e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   15b10:	6845      	ldr	r5, [r0, #4]
   15b12:	b9c5      	cbnz	r5, 15b46 <bt_att_disconnected+0x96>
	att->conn = NULL;
   15b14:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   15b16:	a903      	add	r1, sp, #12
   15b18:	4816      	ldr	r0, [pc, #88]	; (15b74 <bt_att_disconnected+0xc4>)
   15b1a:	f009 fba7 	bl	1f26c <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   15b1e:	6820      	ldr	r0, [r4, #0]
}
   15b20:	b004      	add	sp, #16
   15b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   15b26:	f001 b94d 	b.w	16dc4 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15b2a:	69a8      	ldr	r0, [r5, #24]
   15b2c:	f7ff f814 	bl	14b58 <tx_meta_data_free>
		net_buf_unref(buf);
   15b30:	4628      	mov	r0, r5
   15b32:	f003 fa75 	bl	19020 <net_buf_unref>
   15b36:	e7cb      	b.n	15ad0 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15b38:	69a8      	ldr	r0, [r5, #24]
   15b3a:	f7ff f80d 	bl	14b58 <tx_meta_data_free>
		net_buf_unref(buf);
   15b3e:	4628      	mov	r0, r5
   15b40:	f003 fa6e 	bl	19020 <net_buf_unref>
   15b44:	e7db      	b.n	15afe <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15b46:	6882      	ldr	r2, [r0, #8]
	return node->next;
   15b48:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15b4a:	4295      	cmp	r5, r2
	list->head = node;
   15b4c:	6043      	str	r3, [r0, #4]
	list->tail = node;
   15b4e:	bf08      	it	eq
   15b50:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   15b52:	686e      	ldr	r6, [r5, #4]
   15b54:	b136      	cbz	r6, 15b64 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   15b56:	69ab      	ldr	r3, [r5, #24]
   15b58:	210e      	movs	r1, #14
   15b5a:	9300      	str	r3, [sp, #0]
   15b5c:	2300      	movs	r3, #0
   15b5e:	6800      	ldr	r0, [r0, #0]
   15b60:	461a      	mov	r2, r3
   15b62:	47b0      	blx	r6
		bt_att_req_free(req);
   15b64:	4628      	mov	r0, r5
   15b66:	f7ff ff45 	bl	159f4 <bt_att_req_free>
   15b6a:	e7d0      	b.n	15b0e <bt_att_disconnected+0x5e>
}
   15b6c:	b004      	add	sp, #16
   15b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b72:	bf00      	nop
   15b74:	20008a08 	.word	0x20008a08

00015b78 <att_timeout>:
{
   15b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("ATT Timeout");
   15b7a:	4b09      	ldr	r3, [pc, #36]	; (15ba0 <att_timeout+0x28>)
{
   15b7c:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   15b7e:	9302      	str	r3, [sp, #8]
   15b80:	2300      	movs	r3, #0
   15b82:	2201      	movs	r2, #1
   15b84:	4618      	mov	r0, r3
   15b86:	e9cd 3300 	strd	r3, r3, [sp]
   15b8a:	4906      	ldr	r1, [pc, #24]	; (15ba4 <att_timeout+0x2c>)
   15b8c:	f010 fde0 	bl	26750 <z_log_msg_runtime_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   15b90:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   15b94:	b004      	add	sp, #16
   15b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   15b9a:	f7ff bf89 	b.w	15ab0 <bt_att_disconnected>
   15b9e:	bf00      	nop
   15ba0:	0002e61d 	.word	0x0002e61d
   15ba4:	0002a370 	.word	0x0002a370

00015ba8 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   15ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15baa:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   15bac:	b958      	cbnz	r0, 15bc6 <bt_att_send+0x1e>
   15bae:	4929      	ldr	r1, [pc, #164]	; (15c54 <bt_att_send+0xac>)
   15bb0:	f640 63a4 	movw	r3, #3748	; 0xea4
   15bb4:	4a28      	ldr	r2, [pc, #160]	; (15c58 <bt_att_send+0xb0>)
   15bb6:	4829      	ldr	r0, [pc, #164]	; (15c5c <bt_att_send+0xb4>)
   15bb8:	f00e fef5 	bl	249a6 <assert_print>
   15bbc:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   15bc0:	4825      	ldr	r0, [pc, #148]	; (15c58 <bt_att_send+0xb0>)
   15bc2:	f00e fee9 	bl	24998 <assert_post_action>
   15bc6:	b949      	cbnz	r1, 15bdc <bt_att_send+0x34>
   15bc8:	4925      	ldr	r1, [pc, #148]	; (15c60 <bt_att_send+0xb8>)
   15bca:	f640 63a5 	movw	r3, #3749	; 0xea5
   15bce:	4a22      	ldr	r2, [pc, #136]	; (15c58 <bt_att_send+0xb0>)
   15bd0:	4822      	ldr	r0, [pc, #136]	; (15c5c <bt_att_send+0xb4>)
   15bd2:	f00e fee8 	bl	249a6 <assert_print>
   15bd6:	f640 61a5 	movw	r1, #3749	; 0xea5
   15bda:	e7f1      	b.n	15bc0 <bt_att_send+0x18>

	att = att_get(conn);
   15bdc:	f7ff f93e 	bl	14e5c <att_get>
	if (!att) {
   15be0:	4605      	mov	r5, r0
   15be2:	b940      	cbnz	r0, 15bf6 <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15be4:	69a0      	ldr	r0, [r4, #24]
   15be6:	f7fe ffb7 	bl	14b58 <tx_meta_data_free>
		net_buf_unref(buf);
   15bea:	4620      	mov	r0, r4
   15bec:	f003 fa18 	bl	19020 <net_buf_unref>
		return -ENOTCONN;
   15bf0:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   15bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   15bf6:	f100 060c 	add.w	r6, r0, #12
   15bfa:	4621      	mov	r1, r4
   15bfc:	4630      	mov	r0, r6
   15bfe:	f003 f9e9 	bl	18fd4 <net_buf_put>
	return list->head;
   15c02:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15c04:	b14d      	cbz	r5, 15c1a <bt_att_send+0x72>
	return node->next;
   15c06:	f855 49f0 	ldr.w	r4, [r5], #-240
   15c0a:	b104      	cbz	r4, 15c0e <bt_att_send+0x66>
   15c0c:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   15c0e:	4631      	mov	r1, r6
   15c10:	4628      	mov	r0, r5
   15c12:	f010 fdc6 	bl	267a2 <process_queue>
		if (!err) {
   15c16:	4603      	mov	r3, r0
   15c18:	b980      	cbnz	r0, 15c3c <bt_att_send+0x94>
	return 0;
   15c1a:	2000      	movs	r0, #0
   15c1c:	e7ea      	b.n	15bf4 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   15c1e:	2103      	movs	r1, #3
   15c20:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15c24:	f010 fcbf 	bl	265a6 <atomic_test_bit>
   15c28:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   15c2a:	f105 0098 	add.w	r0, r5, #152	; 0x98
   15c2e:	f010 fcba 	bl	265a6 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   15c32:	4287      	cmp	r7, r0
   15c34:	f06f 0301 	mvn.w	r3, #1
   15c38:	d107      	bne.n	15c4a <bt_att_send+0xa2>
   15c3a:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15c3c:	2c00      	cmp	r4, #0
   15c3e:	d0ec      	beq.n	15c1a <bt_att_send+0x72>
   15c40:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   15c44:	b922      	cbnz	r2, 15c50 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   15c46:	3302      	adds	r3, #2
   15c48:	d0e9      	beq.n	15c1e <bt_att_send+0x76>
{
   15c4a:	4625      	mov	r5, r4
   15c4c:	4614      	mov	r4, r2
   15c4e:	e7de      	b.n	15c0e <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15c50:	3af0      	subs	r2, #240	; 0xf0
   15c52:	e7f8      	b.n	15c46 <bt_att_send+0x9e>
   15c54:	0002d68d 	.word	0x0002d68d
   15c58:	0002e3a6 	.word	0x0002e3a6
   15c5c:	0002b339 	.word	0x0002b339
   15c60:	0002eeb9 	.word	0x0002eeb9

00015c64 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   15c64:	b510      	push	{r4, lr}
   15c66:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   15c68:	b958      	cbnz	r0, 15c82 <bt_att_req_send+0x1e>
   15c6a:	4915      	ldr	r1, [pc, #84]	; (15cc0 <bt_att_req_send+0x5c>)
   15c6c:	f640 63ba 	movw	r3, #3770	; 0xeba
   15c70:	4a14      	ldr	r2, [pc, #80]	; (15cc4 <bt_att_req_send+0x60>)
   15c72:	4815      	ldr	r0, [pc, #84]	; (15cc8 <bt_att_req_send+0x64>)
   15c74:	f00e fe97 	bl	249a6 <assert_print>
   15c78:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   15c7c:	4811      	ldr	r0, [pc, #68]	; (15cc4 <bt_att_req_send+0x60>)
   15c7e:	f00e fe8b 	bl	24998 <assert_post_action>
   15c82:	b949      	cbnz	r1, 15c98 <bt_att_req_send+0x34>
   15c84:	4911      	ldr	r1, [pc, #68]	; (15ccc <bt_att_req_send+0x68>)
   15c86:	f640 63bb 	movw	r3, #3771	; 0xebb
   15c8a:	4a0e      	ldr	r2, [pc, #56]	; (15cc4 <bt_att_req_send+0x60>)
   15c8c:	480e      	ldr	r0, [pc, #56]	; (15cc8 <bt_att_req_send+0x64>)
   15c8e:	f00e fe8a 	bl	249a6 <assert_print>
   15c92:	f640 61bb 	movw	r1, #3771	; 0xebb
   15c96:	e7f1      	b.n	15c7c <bt_att_req_send+0x18>

	att = att_get(conn);
   15c98:	f7ff f8e0 	bl	14e5c <att_get>
	if (!att) {
   15c9c:	b160      	cbz	r0, 15cb8 <bt_att_req_send+0x54>
	parent->next = child;
   15c9e:	2300      	movs	r3, #0
   15ca0:	6023      	str	r3, [r4, #0]
	return list->tail;
   15ca2:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   15ca4:	b92b      	cbnz	r3, 15cb2 <bt_att_req_send+0x4e>
	list->head = node;
   15ca6:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   15caa:	f010 fee3 	bl	26a74 <att_req_send_process>

	return 0;
   15cae:	2000      	movs	r0, #0
}
   15cb0:	bd10      	pop	{r4, pc}
	parent->next = child;
   15cb2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15cb4:	6084      	str	r4, [r0, #8]
}
   15cb6:	e7f8      	b.n	15caa <bt_att_req_send+0x46>
		return -ENOTCONN;
   15cb8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15cbc:	e7f8      	b.n	15cb0 <bt_att_req_send+0x4c>
   15cbe:	bf00      	nop
   15cc0:	0002d68d 	.word	0x0002d68d
   15cc4:	0002e3a6 	.word	0x0002e3a6
   15cc8:	0002b339 	.word	0x0002b339
   15ccc:	0002e455 	.word	0x0002e455

00015cd0 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   15cd0:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   15cd2:	4606      	mov	r6, r0
   15cd4:	4d13      	ldr	r5, [pc, #76]	; (15d24 <find_cf_cfg+0x54>)
   15cd6:	b140      	cbz	r0, 15cea <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15cd8:	462a      	mov	r2, r5
   15cda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   15cde:	1e6c      	subs	r4, r5, #1
   15ce0:	f010 fb69 	bl	263b6 <bt_conn_is_peer_addr_le>
   15ce4:	b198      	cbz	r0, 15d0e <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   15ce6:	4620      	mov	r0, r4
   15ce8:	e00c      	b.n	15d04 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   15cea:	4628      	mov	r0, r5
   15cec:	490e      	ldr	r1, [pc, #56]	; (15d28 <find_cf_cfg+0x58>)
   15cee:	f011 f901 	bl	26ef4 <bt_addr_le_eq>
   15cf2:	b940      	cbnz	r0, 15d06 <find_cf_cfg+0x36>
   15cf4:	490c      	ldr	r1, [pc, #48]	; (15d28 <find_cf_cfg+0x58>)
   15cf6:	f105 0010 	add.w	r0, r5, #16
   15cfa:	f011 f8fb 	bl	26ef4 <bt_addr_le_eq>
   15cfe:	b120      	cbz	r0, 15d0a <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   15d00:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   15d04:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   15d06:	1e68      	subs	r0, r5, #1
   15d08:	e7fc      	b.n	15d04 <find_cf_cfg+0x34>
	return NULL;
   15d0a:	2000      	movs	r0, #0
   15d0c:	e7fa      	b.n	15d04 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15d0e:	4630      	mov	r0, r6
   15d10:	7c21      	ldrb	r1, [r4, #16]
   15d12:	f104 0211 	add.w	r2, r4, #17
   15d16:	f010 fb4e 	bl	263b6 <bt_conn_is_peer_addr_le>
   15d1a:	2800      	cmp	r0, #0
   15d1c:	d0f5      	beq.n	15d0a <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   15d1e:	f104 0010 	add.w	r0, r4, #16
   15d22:	e7ef      	b.n	15d04 <find_cf_cfg+0x34>
   15d24:	200210e1 	.word	0x200210e1
   15d28:	0002d1b1 	.word	0x0002d1b1

00015d2c <find_sc_cfg>:
{
   15d2c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   15d2e:	4c0e      	ldr	r4, [pc, #56]	; (15d68 <find_sc_cfg+0x3c>)
{
   15d30:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   15d32:	7823      	ldrb	r3, [r4, #0]
{
   15d34:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   15d36:	4283      	cmp	r3, r0
   15d38:	d00c      	beq.n	15d54 <find_sc_cfg+0x28>
   15d3a:	7b23      	ldrb	r3, [r4, #12]
   15d3c:	42ab      	cmp	r3, r5
   15d3e:	d110      	bne.n	15d62 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   15d40:	4631      	mov	r1, r6
   15d42:	480a      	ldr	r0, [pc, #40]	; (15d6c <find_sc_cfg+0x40>)
   15d44:	f011 f8d6 	bl	26ef4 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   15d48:	b158      	cbz	r0, 15d62 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   15d4a:	2301      	movs	r3, #1
			return &sc_cfg[i];
   15d4c:	220c      	movs	r2, #12
   15d4e:	fb02 4003 	mla	r0, r2, r3, r4
   15d52:	e007      	b.n	15d64 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   15d54:	1c60      	adds	r0, r4, #1
   15d56:	f011 f8cd 	bl	26ef4 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   15d5a:	2800      	cmp	r0, #0
   15d5c:	d0ed      	beq.n	15d3a <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   15d5e:	2300      	movs	r3, #0
   15d60:	e7f4      	b.n	15d4c <find_sc_cfg+0x20>
	return NULL;
   15d62:	2000      	movs	r0, #0
}
   15d64:	bd70      	pop	{r4, r5, r6, pc}
   15d66:	bf00      	nop
   15d68:	200214ec 	.word	0x200214ec
   15d6c:	200214f9 	.word	0x200214f9

00015d70 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   15d70:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   15d72:	1c4a      	adds	r2, r1, #1
{
   15d74:	460c      	mov	r4, r1
		if (conn) {
   15d76:	4605      	mov	r5, r0
   15d78:	b968      	cbnz	r0, 15d96 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   15d7a:	4610      	mov	r0, r2
   15d7c:	490d      	ldr	r1, [pc, #52]	; (15db4 <find_ccc_cfg+0x44>)
   15d7e:	f011 f8b9 	bl	26ef4 <bt_addr_le_eq>
   15d82:	b930      	cbnz	r0, 15d92 <find_ccc_cfg+0x22>
   15d84:	490b      	ldr	r1, [pc, #44]	; (15db4 <find_ccc_cfg+0x44>)
   15d86:	f104 000b 	add.w	r0, r4, #11
   15d8a:	f011 f8b3 	bl	26ef4 <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   15d8e:	b170      	cbz	r0, 15dae <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   15d90:	340a      	adds	r4, #10
   15d92:	4620      	mov	r0, r4
   15d94:	e00c      	b.n	15db0 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   15d96:	7809      	ldrb	r1, [r1, #0]
   15d98:	f010 fb0d 	bl	263b6 <bt_conn_is_peer_addr_le>
   15d9c:	2800      	cmp	r0, #0
   15d9e:	d1f8      	bne.n	15d92 <find_ccc_cfg+0x22>
   15da0:	4628      	mov	r0, r5
   15da2:	7aa1      	ldrb	r1, [r4, #10]
   15da4:	f104 020b 	add.w	r2, r4, #11
   15da8:	f010 fb05 	bl	263b6 <bt_conn_is_peer_addr_le>
   15dac:	e7ef      	b.n	15d8e <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   15dae:	2000      	movs	r0, #0
}
   15db0:	bd38      	pop	{r3, r4, r5, pc}
   15db2:	bf00      	nop
   15db4:	0002d1b1 	.word	0x0002d1b1

00015db8 <read_ppcp>:
{
   15db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   15dba:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   15dbc:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   15dc0:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   15dc2:	4a06      	ldr	r2, [pc, #24]	; (15ddc <read_ppcp+0x24>)
   15dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   15dc8:	2308      	movs	r3, #8
   15dca:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   15dce:	9300      	str	r3, [sp, #0]
   15dd0:	446b      	add	r3, sp
   15dd2:	f011 f8a3 	bl	26f1c <bt_gatt_attr_read.constprop.0>
}
   15dd6:	b005      	add	sp, #20
   15dd8:	f85d fb04 	ldr.w	pc, [sp], #4
   15ddc:	00280018 	.word	0x00280018

00015de0 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   15de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15de4:	b085      	sub	sp, #20
   15de6:	461e      	mov	r6, r3
   15de8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   15dec:	4681      	mov	r9, r0
   15dee:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   15df0:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   15df4:	2b00      	cmp	r3, #0
   15df6:	d14a      	bne.n	15e8e <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   15df8:	1e73      	subs	r3, r6, #1
   15dfa:	2b01      	cmp	r3, #1
   15dfc:	d84a      	bhi.n	15e94 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   15dfe:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   15e00:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   15e02:	7815      	ldrb	r5, [r2, #0]
   15e04:	bf18      	it	ne
   15e06:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   15e08:	f7ff ffb2 	bl	15d70 <find_ccc_cfg>
	if (!cfg) {
   15e0c:	4604      	mov	r4, r0
   15e0e:	b9e8      	cbnz	r0, 15e4c <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   15e10:	b91d      	cbnz	r5, 15e1a <bt_gatt_attr_write_ccc+0x3a>
			return len;
   15e12:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   15e14:	b005      	add	sp, #20
   15e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   15e1a:	4641      	mov	r1, r8
   15e1c:	f7ff ffa8 	bl	15d70 <find_ccc_cfg>
		if (!cfg) {
   15e20:	4604      	mov	r4, r0
   15e22:	b958      	cbnz	r0, 15e3c <bt_gatt_attr_write_ccc+0x5c>
			LOG_WRN("No space to store CCC cfg");
   15e24:	4b1d      	ldr	r3, [pc, #116]	; (15e9c <bt_gatt_attr_write_ccc+0xbc>)
   15e26:	9000      	str	r0, [sp, #0]
   15e28:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15e2c:	2202      	movs	r2, #2
   15e2e:	4603      	mov	r3, r0
   15e30:	491b      	ldr	r1, [pc, #108]	; (15ea0 <bt_gatt_attr_write_ccc+0xc0>)
   15e32:	f011 f8fb 	bl	2702c <z_log_msg_runtime_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   15e36:	f06f 0010 	mvn.w	r0, #16
   15e3a:	e7eb      	b.n	15e14 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15e3c:	f109 0190 	add.w	r1, r9, #144	; 0x90
   15e40:	3001      	adds	r0, #1
   15e42:	f011 f85f 	bl	26f04 <bt_addr_le_copy>
		cfg->id = conn->id;
   15e46:	f899 3008 	ldrb.w	r3, [r9, #8]
   15e4a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   15e4c:	f8d8 301c 	ldr.w	r3, [r8, #28]
   15e50:	b98b      	cbnz	r3, 15e76 <bt_gatt_attr_write_ccc+0x96>
	cfg->value = value;
   15e52:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   15e54:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   15e58:	42ab      	cmp	r3, r5
   15e5a:	d003      	beq.n	15e64 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   15e5c:	4641      	mov	r1, r8
   15e5e:	4638      	mov	r0, r7
   15e60:	f010 ffd0 	bl	26e04 <gatt_ccc_changed>
	if (!value) {
   15e64:	2d00      	cmp	r5, #0
   15e66:	d1d4      	bne.n	15e12 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   15e68:	490e      	ldr	r1, [pc, #56]	; (15ea4 <bt_gatt_attr_write_ccc+0xc4>)
   15e6a:	1c60      	adds	r0, r4, #1
   15e6c:	f011 f84a 	bl	26f04 <bt_addr_le_copy>
	cfg->id = 0U;
   15e70:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   15e72:	8125      	strh	r5, [r4, #8]
}
   15e74:	e7cd      	b.n	15e12 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   15e76:	462a      	mov	r2, r5
   15e78:	4639      	mov	r1, r7
   15e7a:	4648      	mov	r0, r9
   15e7c:	4798      	blx	r3
		if (write < 0) {
   15e7e:	2800      	cmp	r0, #0
   15e80:	dbc8      	blt.n	15e14 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   15e82:	3801      	subs	r0, #1
   15e84:	2801      	cmp	r0, #1
   15e86:	d9e4      	bls.n	15e52 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   15e88:	f06f 000d 	mvn.w	r0, #13
   15e8c:	e7c2      	b.n	15e14 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15e8e:	f06f 0006 	mvn.w	r0, #6
   15e92:	e7bf      	b.n	15e14 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   15e94:	f06f 000c 	mvn.w	r0, #12
   15e98:	e7bc      	b.n	15e14 <bt_gatt_attr_write_ccc+0x34>
   15e9a:	bf00      	nop
   15e9c:	0002e630 	.word	0x0002e630
   15ea0:	0002a390 	.word	0x0002a390
   15ea4:	0002d1b1 	.word	0x0002d1b1

00015ea8 <clear_cf_cfg>:
{
   15ea8:	4602      	mov	r2, r0
   15eaa:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   15eac:	4907      	ldr	r1, [pc, #28]	; (15ecc <clear_cf_cfg+0x24>)
   15eae:	3001      	adds	r0, #1
   15eb0:	f011 f828 	bl	26f04 <bt_addr_le_copy>
   15eb4:	2300      	movs	r3, #0
   15eb6:	320c      	adds	r2, #12
   15eb8:	f802 3c04 	strb.w	r3, [r2, #-4]
   15ebc:	e8d2 1fef 	ldaex	r1, [r2]
   15ec0:	e8c2 3fe0 	stlex	r0, r3, [r2]
   15ec4:	2800      	cmp	r0, #0
   15ec6:	d1f9      	bne.n	15ebc <clear_cf_cfg+0x14>
}
   15ec8:	bd08      	pop	{r3, pc}
   15eca:	bf00      	nop
   15ecc:	0002d1b1 	.word	0x0002d1b1

00015ed0 <sc_save>:
{
   15ed0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15ed4:	4680      	mov	r8, r0
   15ed6:	460f      	mov	r7, r1
   15ed8:	4616      	mov	r6, r2
   15eda:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   15edc:	f7ff ff26 	bl	15d2c <find_sc_cfg>
	if (!cfg) {
   15ee0:	4604      	mov	r4, r0
   15ee2:	b9a8      	cbnz	r0, 15f10 <sc_save+0x40>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   15ee4:	4911      	ldr	r1, [pc, #68]	; (15f2c <sc_save+0x5c>)
   15ee6:	f7ff ff21 	bl	15d2c <find_sc_cfg>
		if (!cfg) {
   15eea:	4604      	mov	r4, r0
   15eec:	b958      	cbnz	r0, 15f06 <sc_save+0x36>
			LOG_ERR("unable to save SC: no cfg left");
   15eee:	4b10      	ldr	r3, [pc, #64]	; (15f30 <sc_save+0x60>)
   15ef0:	2201      	movs	r2, #1
   15ef2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15ef6:	490f      	ldr	r1, [pc, #60]	; (15f34 <sc_save+0x64>)
   15ef8:	4603      	mov	r3, r0
   15efa:	9000      	str	r0, [sp, #0]
   15efc:	f011 f896 	bl	2702c <z_log_msg_runtime_create.constprop.0>
}
   15f00:	b004      	add	sp, #16
   15f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   15f06:	4639      	mov	r1, r7
		cfg->id = id;
   15f08:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   15f0c:	f010 fffa 	bl	26f04 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   15f10:	8922      	ldrh	r2, [r4, #8]
   15f12:	8963      	ldrh	r3, [r4, #10]
   15f14:	b91a      	cbnz	r2, 15f1e <sc_save+0x4e>
   15f16:	b92b      	cbnz	r3, 15f24 <sc_save+0x54>
		cfg->data.start = start;
   15f18:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   15f1a:	8165      	strh	r5, [r4, #10]
   15f1c:	e7f0      	b.n	15f00 <sc_save+0x30>
	if (new_start >= *start && new_end <= *end) {
   15f1e:	42b2      	cmp	r2, r6
		*start = new_start;
   15f20:	bf88      	it	hi
   15f22:	8126      	strhhi	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   15f24:	42ab      	cmp	r3, r5
   15f26:	d2eb      	bcs.n	15f00 <sc_save+0x30>
   15f28:	e7f7      	b.n	15f1a <sc_save+0x4a>
   15f2a:	bf00      	nop
   15f2c:	0002d1b1 	.word	0x0002d1b1
   15f30:	0002e64a 	.word	0x0002e64a
   15f34:	0002a390 	.word	0x0002a390

00015f38 <cf_write>:
{
   15f38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15f3c:	461f      	mov	r7, r3
   15f3e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   15f42:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   15f44:	2b01      	cmp	r3, #1
{
   15f46:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   15f48:	d83b      	bhi.n	15fc2 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   15f4a:	443b      	add	r3, r7
   15f4c:	2b01      	cmp	r3, #1
   15f4e:	463d      	mov	r5, r7
   15f50:	dc3a      	bgt.n	15fc8 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   15f52:	f7ff febd 	bl	15cd0 <find_cf_cfg>
	if (!cfg) {
   15f56:	4604      	mov	r4, r0
   15f58:	b990      	cbnz	r0, 15f80 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   15f5a:	f7ff feb9 	bl	15cd0 <find_cf_cfg>
	if (!cfg) {
   15f5e:	4604      	mov	r4, r0
   15f60:	b970      	cbnz	r0, 15f80 <cf_write+0x48>
		LOG_WRN("No space to store Client Supported Features");
   15f62:	4b1c      	ldr	r3, [pc, #112]	; (15fd4 <cf_write+0x9c>)
   15f64:	2202      	movs	r2, #2
   15f66:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15f6a:	491b      	ldr	r1, [pc, #108]	; (15fd8 <cf_write+0xa0>)
   15f6c:	4603      	mov	r3, r0
   15f6e:	9000      	str	r0, [sp, #0]
   15f70:	f011 f85c 	bl	2702c <z_log_msg_runtime_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   15f74:	f06f 0510 	mvn.w	r5, #16
}
   15f78:	4628      	mov	r0, r5
   15f7a:	b004      	add	sp, #16
   15f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   15f80:	b197      	cbz	r7, 15fa8 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   15f82:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   15f84:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   15f86:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   15f8a:	fa21 f003 	lsr.w	r0, r1, r3
   15f8e:	07c7      	lsls	r7, r0, #31
   15f90:	d503      	bpl.n	15f9a <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   15f92:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   15f96:	07c0      	lsls	r0, r0, #31
   15f98:	d519      	bpl.n	15fce <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   15f9a:	3301      	adds	r3, #1
   15f9c:	2b03      	cmp	r3, #3
   15f9e:	d1f4      	bne.n	15f8a <cf_write+0x52>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   15fa0:	f002 0207 	and.w	r2, r2, #7
   15fa4:	4311      	orrs	r1, r2
   15fa6:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15fa8:	f106 0190 	add.w	r1, r6, #144	; 0x90
   15fac:	1c60      	adds	r0, r4, #1
   15fae:	f010 ffa9 	bl	26f04 <bt_addr_le_copy>
	cfg->id = conn->id;
   15fb2:	4620      	mov	r0, r4
   15fb4:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   15fb6:	2100      	movs	r1, #0
	cfg->id = conn->id;
   15fb8:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   15fbc:	f011 f866 	bl	2708c <atomic_set_bit>
	return len;
   15fc0:	e7da      	b.n	15f78 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15fc2:	f06f 0506 	mvn.w	r5, #6
   15fc6:	e7d7      	b.n	15f78 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   15fc8:	f06f 050c 	mvn.w	r5, #12
   15fcc:	e7d4      	b.n	15f78 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   15fce:	f06f 0512 	mvn.w	r5, #18
   15fd2:	e7d1      	b.n	15f78 <cf_write+0x40>
   15fd4:	0002e669 	.word	0x0002e669
   15fd8:	0002a390 	.word	0x0002a390

00015fdc <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   15fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   15fe0:	4b28      	ldr	r3, [pc, #160]	; (16084 <disconnected_cb+0xa8>)
{
   15fe2:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15fe4:	6882      	ldr	r2, [r0, #8]
{
   15fe6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15fe8:	429a      	cmp	r2, r3
   15fea:	d12b      	bne.n	16044 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   15fec:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   15fee:	8aab      	ldrh	r3, [r5, #20]
   15ff0:	b343      	cbz	r3, 16044 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   15ff2:	f04f 0800 	mov.w	r8, #0
   15ff6:	1c6c      	adds	r4, r5, #1
   15ff8:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   15ffc:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   16000:	b19b      	cbz	r3, 1602a <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16002:	4622      	mov	r2, r4
   16004:	4630      	mov	r0, r6
   16006:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1600a:	f010 f9d4 	bl	263b6 <bt_conn_is_peer_addr_le>
   1600e:	b9e0      	cbnz	r0, 1604a <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16010:	4621      	mov	r1, r4
   16012:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   16016:	f7fe f9b5 	bl	14384 <bt_conn_lookup_addr_le>
			if (tmp) {
   1601a:	b130      	cbz	r0, 1602a <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   1601c:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   1601e:	2b07      	cmp	r3, #7
   16020:	bf08      	it	eq
   16022:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   16026:	f7fd fee1 	bl	13dec <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1602a:	340a      	adds	r4, #10
   1602c:	454c      	cmp	r4, r9
   1602e:	d1e5      	bne.n	15ffc <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   16030:	f1b8 0f00 	cmp.w	r8, #0
   16034:	d106      	bne.n	16044 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   16036:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   16038:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   1603c:	b113      	cbz	r3, 16044 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   1603e:	4641      	mov	r1, r8
   16040:	4638      	mov	r0, r7
   16042:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   16044:	2001      	movs	r0, #1
   16046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1604a:	f106 0a90 	add.w	sl, r6, #144	; 0x90
   1604e:	4651      	mov	r1, sl
   16050:	7a30      	ldrb	r0, [r6, #8]
   16052:	f00f fed5 	bl	25e00 <bt_addr_le_is_bonded>
   16056:	b978      	cbnz	r0, 16078 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   16058:	4b0b      	ldr	r3, [pc, #44]	; (16088 <disconnected_cb+0xac>)
   1605a:	429d      	cmp	r5, r3
   1605c:	d102      	bne.n	16064 <disconnected_cb+0x88>
					sc_clear(conn);
   1605e:	4630      	mov	r0, r6
   16060:	f010 fff3 	bl	2704a <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16064:	4620      	mov	r0, r4
   16066:	4909      	ldr	r1, [pc, #36]	; (1608c <disconnected_cb+0xb0>)
   16068:	f010 ff4c 	bl	26f04 <bt_addr_le_copy>
	cfg->id = 0U;
   1606c:	2300      	movs	r3, #0
   1606e:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   16072:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   16076:	e7d8      	b.n	1602a <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16078:	4651      	mov	r1, sl
   1607a:	4620      	mov	r0, r4
   1607c:	f010 ff42 	bl	26f04 <bt_addr_le_copy>
   16080:	e7d3      	b.n	1602a <disconnected_cb+0x4e>
   16082:	bf00      	nop
   16084:	00015de1 	.word	0x00015de1
   16088:	20008508 	.word	0x20008508
   1608c:	0002d1b1 	.word	0x0002d1b1

00016090 <sc_indicate_rsp>:
{
   16090:	b510      	push	{r4, lr}
   16092:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16094:	4811      	ldr	r0, [pc, #68]	; (160dc <sc_indicate_rsp+0x4c>)
   16096:	e8d0 3fef 	ldaex	r3, [r0]
   1609a:	f023 0302 	bic.w	r3, r3, #2
   1609e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   160a2:	2a00      	cmp	r2, #0
   160a4:	d1f7      	bne.n	16096 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   160a6:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   160aa:	07da      	lsls	r2, r3, #31
   160ac:	d504      	bpl.n	160b8 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   160ae:	2200      	movs	r2, #0
   160b0:	2300      	movs	r3, #0
   160b2:	3830      	subs	r0, #48	; 0x30
   160b4:	f00a fab2 	bl	2061c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   160b8:	4620      	mov	r0, r4
   160ba:	f010 fe76 	bl	26daa <bt_att_fixed_chan_only>
   160be:	b160      	cbz	r0, 160da <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   160c0:	4620      	mov	r0, r4
   160c2:	f7ff fe05 	bl	15cd0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   160c6:	b140      	cbz	r0, 160da <sc_indicate_rsp+0x4a>
   160c8:	7a03      	ldrb	r3, [r0, #8]
   160ca:	07db      	lsls	r3, r3, #31
   160cc:	d505      	bpl.n	160da <sc_indicate_rsp+0x4a>
}
   160ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   160d2:	2100      	movs	r1, #0
   160d4:	300c      	adds	r0, #12
   160d6:	f010 bfd9 	b.w	2708c <atomic_set_bit>
}
   160da:	bd10      	pop	{r4, pc}
   160dc:	20009978 	.word	0x20009978

000160e0 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   160e0:	2201      	movs	r2, #1
{
   160e2:	b510      	push	{r4, lr}
   160e4:	4b24      	ldr	r3, [pc, #144]	; (16178 <bt_gatt_init+0x98>)
   160e6:	e8d3 1fef 	ldaex	r1, [r3]
   160ea:	2900      	cmp	r1, #0
   160ec:	d103      	bne.n	160f6 <bt_gatt_init+0x16>
   160ee:	e8c3 2fe0 	stlex	r0, r2, [r3]
   160f2:	2800      	cmp	r0, #0
   160f4:	d1f7      	bne.n	160e6 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   160f6:	d13e      	bne.n	16176 <bt_gatt_init+0x96>
   160f8:	4b20      	ldr	r3, [pc, #128]	; (1617c <bt_gatt_init+0x9c>)
   160fa:	e8d3 1fef 	ldaex	r1, [r3]
   160fe:	2900      	cmp	r1, #0
   16100:	d103      	bne.n	1610a <bt_gatt_init+0x2a>
   16102:	e8c3 2fe0 	stlex	r0, r2, [r3]
   16106:	2800      	cmp	r0, #0
   16108:	d1f7      	bne.n	160fa <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1610a:	d120      	bne.n	1614e <bt_gatt_init+0x6e>
   1610c:	2000      	movs	r0, #0
   1610e:	491c      	ldr	r1, [pc, #112]	; (16180 <bt_gatt_init+0xa0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16110:	4a1c      	ldr	r2, [pc, #112]	; (16184 <bt_gatt_init+0xa4>)
   16112:	880b      	ldrh	r3, [r1, #0]
   16114:	4c1c      	ldr	r4, [pc, #112]	; (16188 <bt_gatt_init+0xa8>)
   16116:	42a2      	cmp	r2, r4
   16118:	d916      	bls.n	16148 <bt_gatt_init+0x68>
   1611a:	b100      	cbz	r0, 1611e <bt_gatt_init+0x3e>
   1611c:	800b      	strh	r3, [r1, #0]
   1611e:	491b      	ldr	r1, [pc, #108]	; (1618c <bt_gatt_init+0xac>)
   16120:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   16124:	4a1a      	ldr	r2, [pc, #104]	; (16190 <bt_gatt_init+0xb0>)
   16126:	481b      	ldr	r0, [pc, #108]	; (16194 <bt_gatt_init+0xb4>)
   16128:	f00e fc3d 	bl	249a6 <assert_print>
   1612c:	481a      	ldr	r0, [pc, #104]	; (16198 <bt_gatt_init+0xb8>)
   1612e:	f00e fc3a 	bl	249a6 <assert_print>
   16132:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   16136:	4816      	ldr	r0, [pc, #88]	; (16190 <bt_gatt_init+0xb0>)
   16138:	f00e fc2e 	bl	24998 <assert_post_action>
		last_static_handle += svc->attr_count;
   1613c:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1613e:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   16140:	4403      	add	r3, r0
   16142:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16144:	2001      	movs	r0, #1
   16146:	e7e6      	b.n	16116 <bt_gatt_init+0x36>
   16148:	d3f8      	bcc.n	1613c <bt_gatt_init+0x5c>
   1614a:	b100      	cbz	r0, 1614e <bt_gatt_init+0x6e>
   1614c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1614e:	2200      	movs	r2, #0
   16150:	4b12      	ldr	r3, [pc, #72]	; (1619c <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   16152:	4913      	ldr	r1, [pc, #76]	; (161a0 <bt_gatt_init+0xc0>)
   16154:	4813      	ldr	r0, [pc, #76]	; (161a4 <bt_gatt_init+0xc4>)
	list->tail = NULL;
   16156:	e9c3 2200 	strd	r2, r2, [r3]
   1615a:	f00a f943 	bl	203e4 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1615e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16162:	2300      	movs	r3, #0
   16164:	480f      	ldr	r0, [pc, #60]	; (161a4 <bt_gatt_init+0xc4>)
   16166:	f7fa fea3 	bl	10eb0 <bt_long_wq_schedule>
}
   1616a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1616e:	490e      	ldr	r1, [pc, #56]	; (161a8 <bt_gatt_init+0xc8>)
   16170:	480e      	ldr	r0, [pc, #56]	; (161ac <bt_gatt_init+0xcc>)
   16172:	f00a b937 	b.w	203e4 <k_work_init_delayable>
}
   16176:	bd10      	pop	{r4, pc}
   16178:	20021104 	.word	0x20021104
   1617c:	20021100 	.word	0x20021100
   16180:	20021504 	.word	0x20021504
   16184:	0002a320 	.word	0x0002a320
   16188:	0002a338 	.word	0x0002a338
   1618c:	0002e6cc 	.word	0x0002e6cc
   16190:	0002e695 	.word	0x0002e695
   16194:	0002b339 	.word	0x0002b339
   16198:	0002c305 	.word	0x0002c305
   1619c:	20021108 	.word	0x20021108
   161a0:	00027179 	.word	0x00027179
   161a4:	200098d0 	.word	0x200098d0
   161a8:	00016829 	.word	0x00016829
   161ac:	20009948 	.word	0x20009948

000161b0 <bt_gatt_attr_get_handle>:
	if (!attr) {
   161b0:	4603      	mov	r3, r0
{
   161b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   161b6:	b398      	cbz	r0, 16220 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   161b8:	8a00      	ldrh	r0, [r0, #16]
   161ba:	bb88      	cbnz	r0, 16220 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   161bc:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   161be:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   161c2:	4919      	ldr	r1, [pc, #100]	; (16228 <bt_gatt_attr_get_handle+0x78>)
   161c4:	f8df e064 	ldr.w	lr, [pc, #100]	; 1622c <bt_gatt_attr_get_handle+0x7c>
   161c8:	4571      	cmp	r1, lr
   161ca:	d928      	bls.n	1621e <bt_gatt_attr_get_handle+0x6e>
   161cc:	4918      	ldr	r1, [pc, #96]	; (16230 <bt_gatt_attr_get_handle+0x80>)
   161ce:	f240 635d 	movw	r3, #1629	; 0x65d
   161d2:	4a18      	ldr	r2, [pc, #96]	; (16234 <bt_gatt_attr_get_handle+0x84>)
   161d4:	4818      	ldr	r0, [pc, #96]	; (16238 <bt_gatt_attr_get_handle+0x88>)
   161d6:	f00e fbe6 	bl	249a6 <assert_print>
   161da:	4818      	ldr	r0, [pc, #96]	; (1623c <bt_gatt_attr_get_handle+0x8c>)
   161dc:	f00e fbe3 	bl	249a6 <assert_print>
   161e0:	f240 615d 	movw	r1, #1629	; 0x65d
   161e4:	4813      	ldr	r0, [pc, #76]	; (16234 <bt_gatt_attr_get_handle+0x84>)
   161e6:	f00e fbd7 	bl	24998 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   161ea:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   161ee:	42bb      	cmp	r3, r7
   161f0:	d304      	bcc.n	161fc <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   161f2:	fb0c 7206 	mla	r2, ip, r6, r7
   161f6:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   161f8:	4293      	cmp	r3, r2
   161fa:	d90e      	bls.n	1621a <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   161fc:	4434      	add	r4, r6
   161fe:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16200:	4614      	mov	r4, r2
   16202:	3108      	adds	r1, #8
   16204:	e7e0      	b.n	161c8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   16206:	fb0c 7805 	mla	r8, ip, r5, r7
   1620a:	4543      	cmp	r3, r8
   1620c:	d00a      	beq.n	16224 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1620e:	3501      	adds	r5, #1
   16210:	1962      	adds	r2, r4, r5
   16212:	42b5      	cmp	r5, r6
   16214:	b292      	uxth	r2, r2
   16216:	d1f6      	bne.n	16206 <bt_gatt_attr_get_handle+0x56>
   16218:	e7f2      	b.n	16200 <bt_gatt_attr_get_handle+0x50>
   1621a:	2500      	movs	r5, #0
   1621c:	e7f8      	b.n	16210 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1621e:	d3e4      	bcc.n	161ea <bt_gatt_attr_get_handle+0x3a>
}
   16220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16224:	4610      	mov	r0, r2
   16226:	e7fb      	b.n	16220 <bt_gatt_attr_get_handle+0x70>
   16228:	0002a320 	.word	0x0002a320
   1622c:	0002a338 	.word	0x0002a338
   16230:	0002e6c5 	.word	0x0002e6c5
   16234:	0002e695 	.word	0x0002e695
   16238:	0002b339 	.word	0x0002b339
   1623c:	0002c305 	.word	0x0002c305

00016240 <bt_gatt_foreach_attr_type>:
{
   16240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16244:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   16246:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1624a:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1624e:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   16250:	2d00      	cmp	r5, #0
   16252:	bf08      	it	eq
   16254:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   16256:	4b2b      	ldr	r3, [pc, #172]	; (16304 <bt_gatt_foreach_attr_type+0xc4>)
{
   16258:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1625a:	881b      	ldrh	r3, [r3, #0]
{
   1625c:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   1625e:	4283      	cmp	r3, r0
   16260:	d232      	bcs.n	162c8 <bt_gatt_foreach_attr_type+0x88>
}
   16262:	b003      	add	sp, #12
   16264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16268:	4640      	mov	r0, r8
   1626a:	5889      	ldr	r1, [r1, r2]
   1626c:	9301      	str	r3, [sp, #4]
   1626e:	f00f fc7a 	bl	25b66 <bt_uuid_cmp>
   16272:	9b01      	ldr	r3, [sp, #4]
   16274:	b190      	cbz	r0, 1629c <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16276:	3401      	adds	r4, #1
   16278:	f10a 0a01 	add.w	sl, sl, #1
   1627c:	b2a4      	uxth	r4, r4
   1627e:	6873      	ldr	r3, [r6, #4]
   16280:	4553      	cmp	r3, sl
   16282:	d92c      	bls.n	162de <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   16284:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16286:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   16288:	429c      	cmp	r4, r3
   1628a:	d8ea      	bhi.n	16262 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1628c:	42bc      	cmp	r4, r7
   1628e:	d3f2      	bcc.n	16276 <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16290:	fb0b f20a 	mul.w	r2, fp, sl
   16294:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16296:	f1b8 0f00 	cmp.w	r8, #0
   1629a:	d1e5      	bne.n	16268 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   1629c:	f1b9 0f00 	cmp.w	r9, #0
   162a0:	d10b      	bne.n	162ba <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   162a2:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   162a4:	4618      	mov	r0, r3
	*num_matches -= 1;
   162a6:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   162a8:	4621      	mov	r1, r4
   162aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   162ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   162ae:	4798      	blx	r3
	if (!*num_matches) {
   162b0:	2d00      	cmp	r5, #0
   162b2:	d0d6      	beq.n	16262 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   162b4:	2800      	cmp	r0, #0
   162b6:	d1de      	bne.n	16276 <bt_gatt_foreach_attr_type+0x36>
   162b8:	e7d3      	b.n	16262 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   162ba:	68da      	ldr	r2, [r3, #12]
   162bc:	4591      	cmp	r9, r2
   162be:	d1da      	bne.n	16276 <bt_gatt_foreach_attr_type+0x36>
   162c0:	e7ef      	b.n	162a2 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   162c2:	f04f 0a00 	mov.w	sl, #0
   162c6:	e7da      	b.n	1627e <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   162c8:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   162ca:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   162ce:	4e0e      	ldr	r6, [pc, #56]	; (16308 <bt_gatt_foreach_attr_type+0xc8>)
   162d0:	e006      	b.n	162e0 <bt_gatt_foreach_attr_type+0xa0>
   162d2:	d2c6      	bcs.n	16262 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   162d4:	6873      	ldr	r3, [r6, #4]
   162d6:	4423      	add	r3, r4
   162d8:	42bb      	cmp	r3, r7
   162da:	d2f2      	bcs.n	162c2 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   162dc:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   162de:	3608      	adds	r6, #8
   162e0:	4b0a      	ldr	r3, [pc, #40]	; (1630c <bt_gatt_foreach_attr_type+0xcc>)
   162e2:	429e      	cmp	r6, r3
   162e4:	d9f5      	bls.n	162d2 <bt_gatt_foreach_attr_type+0x92>
   162e6:	490a      	ldr	r1, [pc, #40]	; (16310 <bt_gatt_foreach_attr_type+0xd0>)
   162e8:	f240 7321 	movw	r3, #1825	; 0x721
   162ec:	4a09      	ldr	r2, [pc, #36]	; (16314 <bt_gatt_foreach_attr_type+0xd4>)
   162ee:	480a      	ldr	r0, [pc, #40]	; (16318 <bt_gatt_foreach_attr_type+0xd8>)
   162f0:	f00e fb59 	bl	249a6 <assert_print>
   162f4:	4809      	ldr	r0, [pc, #36]	; (1631c <bt_gatt_foreach_attr_type+0xdc>)
   162f6:	f00e fb56 	bl	249a6 <assert_print>
   162fa:	f240 7121 	movw	r1, #1825	; 0x721
   162fe:	4805      	ldr	r0, [pc, #20]	; (16314 <bt_gatt_foreach_attr_type+0xd4>)
   16300:	f00e fb4a 	bl	24998 <assert_post_action>
   16304:	20021504 	.word	0x20021504
   16308:	0002a320 	.word	0x0002a320
   1630c:	0002a338 	.word	0x0002a338
   16310:	0002e6c5 	.word	0x0002e6c5
   16314:	0002e695 	.word	0x0002e695
   16318:	0002b339 	.word	0x0002b339
   1631c:	0002c305 	.word	0x0002c305

00016320 <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   16320:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   16322:	b510      	push	{r4, lr}
   16324:	b0cc      	sub	sp, #304	; 0x130
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16326:	aa20      	add	r2, sp, #128	; 0x80
   16328:	a904      	add	r1, sp, #16
   1632a:	a808      	add	r0, sp, #32
	uint8_t key[16] = {};
   1632c:	e9cd 3304 	strd	r3, r3, [sp, #16]
   16330:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16334:	f00f f87a 	bl	2542c <tc_cmac_setup>
   16338:	4603      	mov	r3, r0
   1633a:	b948      	cbnz	r0, 16350 <db_hash_gen.constprop.0+0x30>
		LOG_ERR("Unable to setup AES CMAC");
   1633c:	4a17      	ldr	r2, [pc, #92]	; (1639c <db_hash_gen.constprop.0+0x7c>)
		LOG_ERR("Unable to calculate hash");
   1633e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   16342:	4917      	ldr	r1, [pc, #92]	; (163a0 <db_hash_gen.constprop.0+0x80>)
   16344:	2201      	movs	r2, #1
   16346:	9300      	str	r3, [sp, #0]
   16348:	f010 fe70 	bl	2702c <z_log_msg_runtime_create.constprop.0>
}
   1634c:	b04c      	add	sp, #304	; 0x130
   1634e:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   16350:	ab08      	add	r3, sp, #32
   16352:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16356:	2001      	movs	r0, #1
   16358:	4a12      	ldr	r2, [pc, #72]	; (163a4 <db_hash_gen.constprop.0+0x84>)
   1635a:	f010 ff02 	bl	27162 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1635e:	4812      	ldr	r0, [pc, #72]	; (163a8 <db_hash_gen.constprop.0+0x88>)
   16360:	a908      	add	r1, sp, #32
   16362:	f00f f8f8 	bl	25556 <tc_cmac_final>
   16366:	4603      	mov	r3, r0
   16368:	b908      	cbnz	r0, 1636e <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   1636a:	4a10      	ldr	r2, [pc, #64]	; (163ac <db_hash_gen.constprop.0+0x8c>)
   1636c:	e7e7      	b.n	1633e <db_hash_gen.constprop.0+0x1e>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1636e:	2208      	movs	r2, #8
   16370:	4b0d      	ldr	r3, [pc, #52]	; (163a8 <db_hash_gen.constprop.0+0x88>)
   16372:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   16376:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   16378:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   1637c:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1637e:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   16382:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   16384:	d1f7      	bne.n	16376 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16386:	4b0a      	ldr	r3, [pc, #40]	; (163b0 <db_hash_gen.constprop.0+0x90>)
   16388:	e8d3 1fef 	ldaex	r1, [r3]
   1638c:	f041 0104 	orr.w	r1, r1, #4
   16390:	e8c3 1fe2 	stlex	r2, r1, [r3]
   16394:	2a00      	cmp	r2, #0
   16396:	d0d9      	beq.n	1634c <db_hash_gen.constprop.0+0x2c>
   16398:	e7f6      	b.n	16388 <db_hash_gen.constprop.0+0x68>
   1639a:	bf00      	nop
   1639c:	0002e6f4 	.word	0x0002e6f4
   163a0:	0002a390 	.word	0x0002a390
   163a4:	00026e4f 	.word	0x00026e4f
   163a8:	200098c0 	.word	0x200098c0
   163ac:	0002e70d 	.word	0x0002e70d
   163b0:	20009978 	.word	0x20009978

000163b4 <db_hash_read>:
{
   163b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   163b8:	4914      	ldr	r1, [pc, #80]	; (1640c <db_hash_read+0x58>)
{
   163ba:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   163bc:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   163c0:	4614      	mov	r4, r2
   163c2:	461d      	mov	r5, r3
   163c4:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   163c8:	f00a f988 	bl	206dc <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   163cc:	4b10      	ldr	r3, [pc, #64]	; (16410 <db_hash_read+0x5c>)
   163ce:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   163d2:	0759      	lsls	r1, r3, #29
   163d4:	d401      	bmi.n	163da <db_hash_read+0x26>
		db_hash_gen(true);
   163d6:	f7ff ffa3 	bl	16320 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   163da:	4630      	mov	r0, r6
   163dc:	f7ff fc78 	bl	15cd0 <find_cf_cfg>
	if (cfg &&
   163e0:	b150      	cbz	r0, 163f8 <db_hash_read+0x44>
   163e2:	7a03      	ldrb	r3, [r0, #8]
   163e4:	07da      	lsls	r2, r3, #31
   163e6:	d507      	bpl.n	163f8 <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   163e8:	300c      	adds	r0, #12
   163ea:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   163ee:	07db      	lsls	r3, r3, #31
   163f0:	d402      	bmi.n	163f8 <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   163f2:	2101      	movs	r1, #1
   163f4:	f010 fe4a 	bl	2708c <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   163f8:	2310      	movs	r3, #16
   163fa:	463a      	mov	r2, r7
   163fc:	9306      	str	r3, [sp, #24]
   163fe:	4629      	mov	r1, r5
   16400:	4620      	mov	r0, r4
}
   16402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16406:	4b03      	ldr	r3, [pc, #12]	; (16414 <db_hash_read+0x60>)
   16408:	f010 bd88 	b.w	26f1c <bt_gatt_attr_read.constprop.0>
   1640c:	20009900 	.word	0x20009900
   16410:	20009978 	.word	0x20009978
   16414:	200098c0 	.word	0x200098c0

00016418 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   16418:	2300      	movs	r3, #0
{
   1641a:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1641c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1641e:	f7ff fec7 	bl	161b0 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   16422:	1c41      	adds	r1, r0, #1
   16424:	b289      	uxth	r1, r1
   16426:	4608      	mov	r0, r1
   16428:	4a03      	ldr	r2, [pc, #12]	; (16438 <bt_gatt_attr_next+0x20>)
   1642a:	ab01      	add	r3, sp, #4
   1642c:	f010 fe99 	bl	27162 <bt_gatt_foreach_attr>
}
   16430:	9801      	ldr	r0, [sp, #4]
   16432:	b003      	add	sp, #12
   16434:	f85d fb04 	ldr.w	pc, [sp], #4
   16438:	00026dff 	.word	0x00026dff

0001643c <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   1643c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   16440:	460c      	mov	r4, r1
   16442:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   16444:	4605      	mov	r5, r0
   16446:	b970      	cbnz	r0, 16466 <bt_gatt_is_subscribed+0x2a>
   16448:	4960      	ldr	r1, [pc, #384]	; (165cc <bt_gatt_is_subscribed+0x190>)
   1644a:	f640 434d 	movw	r3, #3149	; 0xc4d
   1644e:	4a60      	ldr	r2, [pc, #384]	; (165d0 <bt_gatt_is_subscribed+0x194>)
   16450:	4860      	ldr	r0, [pc, #384]	; (165d4 <bt_gatt_is_subscribed+0x198>)
   16452:	f00e faa8 	bl	249a6 <assert_print>
   16456:	4860      	ldr	r0, [pc, #384]	; (165d8 <bt_gatt_is_subscribed+0x19c>)
   16458:	f00e faa5 	bl	249a6 <assert_print>
   1645c:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   16460:	485b      	ldr	r0, [pc, #364]	; (165d0 <bt_gatt_is_subscribed+0x194>)
   16462:	f00e fa99 	bl	24998 <assert_post_action>
   16466:	b961      	cbnz	r1, 16482 <bt_gatt_is_subscribed+0x46>
   16468:	495c      	ldr	r1, [pc, #368]	; (165dc <bt_gatt_is_subscribed+0x1a0>)
   1646a:	f640 434e 	movw	r3, #3150	; 0xc4e
   1646e:	4a58      	ldr	r2, [pc, #352]	; (165d0 <bt_gatt_is_subscribed+0x194>)
   16470:	4858      	ldr	r0, [pc, #352]	; (165d4 <bt_gatt_is_subscribed+0x198>)
   16472:	f00e fa98 	bl	249a6 <assert_print>
   16476:	4858      	ldr	r0, [pc, #352]	; (165d8 <bt_gatt_is_subscribed+0x19c>)
   16478:	f00e fa95 	bl	249a6 <assert_print>
   1647c:	f640 414e 	movw	r1, #3150	; 0xc4e
   16480:	e7ee      	b.n	16460 <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   16482:	7b43      	ldrb	r3, [r0, #13]
   16484:	2b07      	cmp	r3, #7
   16486:	d110      	bne.n	164aa <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   16488:	2300      	movs	r3, #0
   1648a:	f88d 300c 	strb.w	r3, [sp, #12]
   1648e:	f642 0303 	movw	r3, #10243	; 0x2803
   16492:	6820      	ldr	r0, [r4, #0]
   16494:	a903      	add	r1, sp, #12
   16496:	f8ad 300e 	strh.w	r3, [sp, #14]
   1649a:	f00f fb64 	bl	25b66 <bt_uuid_cmp>
   1649e:	b9d0      	cbnz	r0, 164d6 <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   164a0:	68e3      	ldr	r3, [r4, #12]
   164a2:	799b      	ldrb	r3, [r3, #6]
   164a4:	f013 0f30 	tst.w	r3, #48	; 0x30
   164a8:	d103      	bne.n	164b2 <bt_gatt_is_subscribed+0x76>
		return false;
   164aa:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   164ac:	b004      	add	sp, #16
   164ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   164b2:	4620      	mov	r0, r4
   164b4:	f7ff ffb0 	bl	16418 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   164b8:	4604      	mov	r4, r0
   164ba:	b960      	cbnz	r0, 164d6 <bt_gatt_is_subscribed+0x9a>
   164bc:	4947      	ldr	r1, [pc, #284]	; (165dc <bt_gatt_is_subscribed+0x1a0>)
   164be:	f640 435f 	movw	r3, #3167	; 0xc5f
   164c2:	4a43      	ldr	r2, [pc, #268]	; (165d0 <bt_gatt_is_subscribed+0x194>)
   164c4:	4843      	ldr	r0, [pc, #268]	; (165d4 <bt_gatt_is_subscribed+0x198>)
   164c6:	f00e fa6e 	bl	249a6 <assert_print>
   164ca:	4845      	ldr	r0, [pc, #276]	; (165e0 <bt_gatt_is_subscribed+0x1a4>)
   164cc:	f00e fa6b 	bl	249a6 <assert_print>
   164d0:	f640 415f 	movw	r1, #3167	; 0xc5f
   164d4:	e7c4      	b.n	16460 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   164d6:	2300      	movs	r3, #0
   164d8:	6820      	ldr	r0, [r4, #0]
   164da:	f88d 300c 	strb.w	r3, [sp, #12]
   164de:	f642 1302 	movw	r3, #10498	; 0x2902
   164e2:	a903      	add	r1, sp, #12
   164e4:	f8ad 300e 	strh.w	r3, [sp, #14]
   164e8:	f00f fb3d 	bl	25b66 <bt_uuid_cmp>
   164ec:	b188      	cbz	r0, 16512 <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   164ee:	4620      	mov	r0, r4
   164f0:	f7ff ff92 	bl	16418 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   164f4:	4604      	mov	r4, r0
   164f6:	b960      	cbnz	r0, 16512 <bt_gatt_is_subscribed+0xd6>
   164f8:	4938      	ldr	r1, [pc, #224]	; (165dc <bt_gatt_is_subscribed+0x1a0>)
   164fa:	f640 4365 	movw	r3, #3173	; 0xc65
   164fe:	4a34      	ldr	r2, [pc, #208]	; (165d0 <bt_gatt_is_subscribed+0x194>)
   16500:	4834      	ldr	r0, [pc, #208]	; (165d4 <bt_gatt_is_subscribed+0x198>)
   16502:	f00e fa50 	bl	249a6 <assert_print>
   16506:	4836      	ldr	r0, [pc, #216]	; (165e0 <bt_gatt_is_subscribed+0x1a4>)
   16508:	f00e fa4d 	bl	249a6 <assert_print>
   1650c:	f640 4165 	movw	r1, #3173	; 0xc65
   16510:	e7a6      	b.n	16460 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   16512:	2700      	movs	r7, #0
   16514:	f642 1802 	movw	r8, #10498	; 0x2902
   16518:	6820      	ldr	r0, [r4, #0]
   1651a:	4669      	mov	r1, sp
   1651c:	f88d 7000 	strb.w	r7, [sp]
   16520:	f8ad 8002 	strh.w	r8, [sp, #2]
   16524:	f00f fb1f 	bl	25b66 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16528:	bb20      	cbnz	r0, 16574 <bt_gatt_is_subscribed+0x138>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1652a:	2300      	movs	r3, #0
   1652c:	6820      	ldr	r0, [r4, #0]
   1652e:	f88d 300c 	strb.w	r3, [sp, #12]
   16532:	f642 1302 	movw	r3, #10498	; 0x2902
   16536:	a903      	add	r1, sp, #12
   16538:	f8ad 300e 	strh.w	r3, [sp, #14]
   1653c:	f00f fb13 	bl	25b66 <bt_uuid_cmp>
   16540:	2800      	cmp	r0, #0
   16542:	d1b2      	bne.n	164aa <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   16544:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   16546:	4628      	mov	r0, r5
   16548:	4622      	mov	r2, r4
   1654a:	f812 1b01 	ldrb.w	r1, [r2], #1
   1654e:	f00f ff32 	bl	263b6 <bt_conn_is_peer_addr_le>
   16552:	b110      	cbz	r0, 1655a <bt_gatt_is_subscribed+0x11e>
   16554:	8923      	ldrh	r3, [r4, #8]
   16556:	421e      	tst	r6, r3
   16558:	d10a      	bne.n	16570 <bt_gatt_is_subscribed+0x134>
   1655a:	4628      	mov	r0, r5
   1655c:	7aa1      	ldrb	r1, [r4, #10]
   1655e:	f104 020b 	add.w	r2, r4, #11
   16562:	f00f ff28 	bl	263b6 <bt_conn_is_peer_addr_le>
   16566:	2800      	cmp	r0, #0
   16568:	d09f      	beq.n	164aa <bt_gatt_is_subscribed+0x6e>
   1656a:	8a63      	ldrh	r3, [r4, #18]
   1656c:	421e      	tst	r6, r3
   1656e:	d09c      	beq.n	164aa <bt_gatt_is_subscribed+0x6e>
			return true;
   16570:	2001      	movs	r0, #1
   16572:	e79b      	b.n	164ac <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   16574:	f642 0303 	movw	r3, #10243	; 0x2803
   16578:	6820      	ldr	r0, [r4, #0]
   1657a:	a901      	add	r1, sp, #4
   1657c:	f88d 7004 	strb.w	r7, [sp, #4]
   16580:	f8ad 3006 	strh.w	r3, [sp, #6]
   16584:	f00f faef 	bl	25b66 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   16588:	2800      	cmp	r0, #0
   1658a:	d0ce      	beq.n	1652a <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1658c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16590:	6820      	ldr	r0, [r4, #0]
   16592:	a902      	add	r1, sp, #8
   16594:	f88d 7008 	strb.w	r7, [sp, #8]
   16598:	f8ad 300a 	strh.w	r3, [sp, #10]
   1659c:	f00f fae3 	bl	25b66 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   165a0:	2800      	cmp	r0, #0
   165a2:	d0c2      	beq.n	1652a <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   165a4:	f642 0301 	movw	r3, #10241	; 0x2801
   165a8:	6820      	ldr	r0, [r4, #0]
   165aa:	a903      	add	r1, sp, #12
   165ac:	f88d 700c 	strb.w	r7, [sp, #12]
   165b0:	f8ad 300e 	strh.w	r3, [sp, #14]
   165b4:	f00f fad7 	bl	25b66 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   165b8:	2800      	cmp	r0, #0
   165ba:	d0b6      	beq.n	1652a <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   165bc:	4620      	mov	r0, r4
   165be:	f7ff ff2b 	bl	16418 <bt_gatt_attr_next>
		if (!attr) {
   165c2:	4604      	mov	r4, r0
   165c4:	2800      	cmp	r0, #0
   165c6:	d1a7      	bne.n	16518 <bt_gatt_is_subscribed+0xdc>
   165c8:	e76f      	b.n	164aa <bt_gatt_is_subscribed+0x6e>
   165ca:	bf00      	nop
   165cc:	0002d68d 	.word	0x0002d68d
   165d0:	0002e695 	.word	0x0002e695
   165d4:	0002b339 	.word	0x0002b339
   165d8:	0002e726 	.word	0x0002e726
   165dc:	0002e73b 	.word	0x0002e73b
   165e0:	0002e740 	.word	0x0002e740

000165e4 <gatt_indicate>:
{
   165e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   165e8:	4615      	mov	r5, r2
   165ea:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   165ec:	2294      	movs	r2, #148	; 0x94
   165ee:	6869      	ldr	r1, [r5, #4]
{
   165f0:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   165f2:	f010 fdc3 	bl	2717c <bt_gatt_check_perm>
   165f6:	4680      	mov	r8, r0
   165f8:	b178      	cbz	r0, 1661a <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   165fa:	4b35      	ldr	r3, [pc, #212]	; (166d0 <gatt_indicate+0xec>)
   165fc:	2202      	movs	r2, #2
   165fe:	9302      	str	r3, [sp, #8]
   16600:	2300      	movs	r3, #0
   16602:	4934      	ldr	r1, [pc, #208]	; (166d4 <gatt_indicate+0xf0>)
   16604:	4618      	mov	r0, r3
   16606:	e9cd 3300 	strd	r3, r3, [sp]
   1660a:	f010 fd0f 	bl	2702c <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   1660e:	f04f 35ff 	mov.w	r5, #4294967295
}
   16612:	4628      	mov	r0, r5
   16614:	b004      	add	sp, #16
   16616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1661a:	2202      	movs	r2, #2
   1661c:	4638      	mov	r0, r7
   1661e:	6869      	ldr	r1, [r5, #4]
   16620:	f7ff ff0c 	bl	1643c <bt_gatt_is_subscribed>
   16624:	4603      	mov	r3, r0
   16626:	b950      	cbnz	r0, 1663e <gatt_indicate+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   16628:	4a2b      	ldr	r2, [pc, #172]	; (166d8 <gatt_indicate+0xf4>)
   1662a:	492a      	ldr	r1, [pc, #168]	; (166d4 <gatt_indicate+0xf0>)
   1662c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   16630:	9000      	str	r0, [sp, #0]
   16632:	2202      	movs	r2, #2
   16634:	f010 fcfa 	bl	2702c <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   16638:	f06f 0515 	mvn.w	r5, #21
   1663c:	e7e9      	b.n	16612 <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1663e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   16642:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   16644:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16646:	f7ff f9b1 	bl	159ac <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1664a:	3602      	adds	r6, #2
	if (!req) {
   1664c:	4604      	mov	r4, r0
   1664e:	b1c8      	cbz	r0, 16684 <gatt_indicate+0xa0>
	req->att_op = op;
   16650:	211d      	movs	r1, #29
	req->func = func;
   16652:	4b22      	ldr	r3, [pc, #136]	; (166dc <gatt_indicate+0xf8>)
	req->len = len;
   16654:	6146      	str	r6, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16656:	4632      	mov	r2, r6
	req->att_op = op;
   16658:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1665a:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1665e:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   16660:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16662:	4638      	mov	r0, r7
   16664:	f7fe fed6 	bl	15414 <bt_att_create_pdu>
	if (!buf) {
   16668:	4606      	mov	r6, r0
   1666a:	b970      	cbnz	r0, 1668a <gatt_indicate+0xa6>
		LOG_WRN("No buffer available to send indication");
   1666c:	4b1c      	ldr	r3, [pc, #112]	; (166e0 <gatt_indicate+0xfc>)
   1666e:	9000      	str	r0, [sp, #0]
   16670:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16674:	2202      	movs	r2, #2
   16676:	4603      	mov	r3, r0
   16678:	4916      	ldr	r1, [pc, #88]	; (166d4 <gatt_indicate+0xf0>)
   1667a:	f010 fcd7 	bl	2702c <z_log_msg_runtime_create.constprop.0>
		bt_att_req_free(req);
   1667e:	4620      	mov	r0, r4
   16680:	f7ff f9b8 	bl	159f4 <bt_att_req_free>
		return -ENOMEM;
   16684:	f06f 050b 	mvn.w	r5, #11
   16688:	e7c3      	b.n	16612 <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1668a:	2301      	movs	r3, #1
   1668c:	4642      	mov	r2, r8
   1668e:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   16690:	f106 0a0c 	add.w	sl, r6, #12
   16694:	f010 fbac 	bl	26df0 <bt_att_set_tx_meta_data>
   16698:	2102      	movs	r1, #2
   1669a:	4650      	mov	r0, sl
   1669c:	f002 fde2 	bl	19264 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   166a0:	4680      	mov	r8, r0
   166a2:	f828 9b02 	strh.w	r9, [r8], #2
   166a6:	8aa9      	ldrh	r1, [r5, #20]
   166a8:	4650      	mov	r0, sl
   166aa:	f002 fddb 	bl	19264 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   166ae:	8aaa      	ldrh	r2, [r5, #20]
   166b0:	6929      	ldr	r1, [r5, #16]
   166b2:	4640      	mov	r0, r8
   166b4:	f012 fedd 	bl	29472 <memcpy>
	err = bt_att_req_send(conn, req);
   166b8:	4621      	mov	r1, r4
   166ba:	4638      	mov	r0, r7
	req->buf = buf;
   166bc:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   166be:	f7ff fad1 	bl	15c64 <bt_att_req_send>
	if (err) {
   166c2:	4605      	mov	r5, r0
   166c4:	2800      	cmp	r0, #0
   166c6:	d0a4      	beq.n	16612 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   166c8:	4620      	mov	r0, r4
   166ca:	f7ff f993 	bl	159f4 <bt_att_req_free>
   166ce:	e7a0      	b.n	16612 <gatt_indicate+0x2e>
   166d0:	0002e756 	.word	0x0002e756
   166d4:	0002a390 	.word	0x0002a390
   166d8:	0002e76c 	.word	0x0002e76c
   166dc:	00026e21 	.word	0x00026e21
   166e0:	0002e797 	.word	0x0002e797

000166e4 <bt_gatt_indicate>:
{
   166e4:	b530      	push	{r4, r5, lr}
   166e6:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   166e8:	460c      	mov	r4, r1
{
   166ea:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   166ec:	b971      	cbnz	r1, 1670c <bt_gatt_indicate+0x28>
   166ee:	4946      	ldr	r1, [pc, #280]	; (16808 <bt_gatt_indicate+0x124>)
   166f0:	f640 330d 	movw	r3, #2829	; 0xb0d
   166f4:	4a45      	ldr	r2, [pc, #276]	; (1680c <bt_gatt_indicate+0x128>)
   166f6:	4846      	ldr	r0, [pc, #280]	; (16810 <bt_gatt_indicate+0x12c>)
   166f8:	f00e f955 	bl	249a6 <assert_print>
   166fc:	4845      	ldr	r0, [pc, #276]	; (16814 <bt_gatt_indicate+0x130>)
   166fe:	f00e f952 	bl	249a6 <assert_print>
   16702:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   16706:	4841      	ldr	r0, [pc, #260]	; (1680c <bt_gatt_indicate+0x128>)
   16708:	f00e f946 	bl	24998 <assert_post_action>
   1670c:	684b      	ldr	r3, [r1, #4]
   1670e:	b973      	cbnz	r3, 1672e <bt_gatt_indicate+0x4a>
   16710:	680b      	ldr	r3, [r1, #0]
   16712:	b963      	cbnz	r3, 1672e <bt_gatt_indicate+0x4a>
   16714:	4940      	ldr	r1, [pc, #256]	; (16818 <bt_gatt_indicate+0x134>)
   16716:	f640 330e 	movw	r3, #2830	; 0xb0e
   1671a:	4a3c      	ldr	r2, [pc, #240]	; (1680c <bt_gatt_indicate+0x128>)
   1671c:	483c      	ldr	r0, [pc, #240]	; (16810 <bt_gatt_indicate+0x12c>)
   1671e:	f00e f942 	bl	249a6 <assert_print>
   16722:	483c      	ldr	r0, [pc, #240]	; (16814 <bt_gatt_indicate+0x130>)
   16724:	f00e f93f 	bl	249a6 <assert_print>
   16728:	f640 310e 	movw	r1, #2830	; 0xb0e
   1672c:	e7eb      	b.n	16706 <bt_gatt_indicate+0x22>
   1672e:	4b3b      	ldr	r3, [pc, #236]	; (1681c <bt_gatt_indicate+0x138>)
   16730:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16734:	075a      	lsls	r2, r3, #29
   16736:	d561      	bpl.n	167fc <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16738:	b115      	cbz	r5, 16740 <bt_gatt_indicate+0x5c>
   1673a:	7b6b      	ldrb	r3, [r5, #13]
   1673c:	2b07      	cmp	r3, #7
   1673e:	d160      	bne.n	16802 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   16740:	6860      	ldr	r0, [r4, #4]
   16742:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16744:	f7ff fd34 	bl	161b0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16748:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1674a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1674e:	b33a      	cbz	r2, 167a0 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16750:	a905      	add	r1, sp, #20
   16752:	9102      	str	r1, [sp, #8]
   16754:	4932      	ldr	r1, [pc, #200]	; (16820 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   16756:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16758:	9101      	str	r1, [sp, #4]
   1675a:	2101      	movs	r1, #1
   1675c:	9100      	str	r1, [sp, #0]
   1675e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16762:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16764:	f7ff fd6c 	bl	16240 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16768:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1676a:	b91b      	cbnz	r3, 16774 <bt_gatt_indicate+0x90>
			return -ENOENT;
   1676c:	f06f 0001 	mvn.w	r0, #1
}
   16770:	b00b      	add	sp, #44	; 0x2c
   16772:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16774:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16776:	9b05      	ldr	r3, [sp, #20]
   16778:	a904      	add	r1, sp, #16
   1677a:	6818      	ldr	r0, [r3, #0]
   1677c:	2300      	movs	r3, #0
   1677e:	f88d 3010 	strb.w	r3, [sp, #16]
   16782:	f642 0303 	movw	r3, #10243	; 0x2803
   16786:	f8ad 3012 	strh.w	r3, [sp, #18]
   1678a:	f00f f9ec 	bl	25b66 <bt_uuid_cmp>
   1678e:	b970      	cbnz	r0, 167ae <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16790:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   16792:	68c3      	ldr	r3, [r0, #12]
   16794:	799b      	ldrb	r3, [r3, #6]
   16796:	069b      	lsls	r3, r3, #26
   16798:	d405      	bmi.n	167a6 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1679a:	f06f 0015 	mvn.w	r0, #21
   1679e:	e7e7      	b.n	16770 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   167a0:	2800      	cmp	r0, #0
   167a2:	d1e8      	bne.n	16776 <bt_gatt_indicate+0x92>
   167a4:	e7e2      	b.n	1676c <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   167a6:	f010 fc95 	bl	270d4 <bt_gatt_attr_value_handle>
   167aa:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   167ae:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   167b2:	b13d      	cbz	r5, 167c4 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   167b4:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   167b6:	4601      	mov	r1, r0
   167b8:	4622      	mov	r2, r4
   167ba:	4628      	mov	r0, r5
		params->_ref = 1;
   167bc:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   167be:	f7ff ff11 	bl	165e4 <gatt_indicate>
   167c2:	e7d5      	b.n	16770 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   167c4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   167c8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   167ca:	2302      	movs	r3, #2
   167cc:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   167d0:	f642 1302 	movw	r3, #10498	; 0x2902
   167d4:	f8ad 3012 	strh.w	r3, [sp, #18]
   167d8:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   167da:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   167dc:	9302      	str	r3, [sp, #8]
   167de:	4b11      	ldr	r3, [pc, #68]	; (16824 <bt_gatt_indicate+0x140>)
   167e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   167e4:	9301      	str	r3, [sp, #4]
   167e6:	2301      	movs	r3, #1
   167e8:	aa04      	add	r2, sp, #16
   167ea:	9300      	str	r3, [sp, #0]
   167ec:	462b      	mov	r3, r5
	data.ind_params = params;
   167ee:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   167f0:	f88d 5010 	strb.w	r5, [sp, #16]
   167f4:	f7ff fd24 	bl	16240 <bt_gatt_foreach_attr_type>
	return data.err;
   167f8:	9807      	ldr	r0, [sp, #28]
   167fa:	e7b9      	b.n	16770 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   167fc:	f06f 000a 	mvn.w	r0, #10
   16800:	e7b6      	b.n	16770 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   16802:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16806:	e7b3      	b.n	16770 <bt_gatt_indicate+0x8c>
   16808:	0002e7be 	.word	0x0002e7be
   1680c:	0002e695 	.word	0x0002e695
   16810:	0002b339 	.word	0x0002b339
   16814:	0002e7c5 	.word	0x0002e7c5
   16818:	0002e7db 	.word	0x0002e7db
   1681c:	200080cc 	.word	0x200080cc
   16820:	00026e47 	.word	0x00026e47
   16824:	00016bed 	.word	0x00016bed

00016828 <sc_process>:
{
   16828:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1682a:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1682c:	f1a0 0120 	sub.w	r1, r0, #32
   16830:	f100 0430 	add.w	r4, r0, #48	; 0x30
   16834:	e8d4 2faf 	lda	r2, [r4]
   16838:	f3c2 0040 	ubfx	r0, r2, #1, #1
   1683c:	0792      	lsls	r2, r2, #30
   1683e:	d50e      	bpl.n	1685e <sc_process+0x36>
   16840:	4919      	ldr	r1, [pc, #100]	; (168a8 <sc_process+0x80>)
   16842:	f240 439a 	movw	r3, #1178	; 0x49a
   16846:	4a19      	ldr	r2, [pc, #100]	; (168ac <sc_process+0x84>)
   16848:	4819      	ldr	r0, [pc, #100]	; (168b0 <sc_process+0x88>)
   1684a:	f00e f8ac 	bl	249a6 <assert_print>
   1684e:	4819      	ldr	r0, [pc, #100]	; (168b4 <sc_process+0x8c>)
   16850:	f00e f8a9 	bl	249a6 <assert_print>
   16854:	f240 419a 	movw	r1, #1178	; 0x49a
   16858:	4814      	ldr	r0, [pc, #80]	; (168ac <sc_process+0x84>)
   1685a:	f00e f89d 	bl	24998 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1685e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   16862:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16864:	e8d4 2fef 	ldaex	r2, [r4]
   16868:	f022 0201 	bic.w	r2, r2, #1
   1686c:	e8c4 2fe5 	stlex	r5, r2, [r4]
   16870:	2d00      	cmp	r5, #0
   16872:	d1f7      	bne.n	16864 <sc_process+0x3c>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16874:	4a10      	ldr	r2, [pc, #64]	; (168b8 <sc_process+0x90>)
	sc->start = 0U;
   16876:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1687a:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1687e:	4a0f      	ldr	r2, [pc, #60]	; (168bc <sc_process+0x94>)
	sc->end = 0U;
   16880:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.func = sc_indicate_rsp;
   16884:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16888:	aa01      	add	r2, sp, #4
   1688a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1688e:	2204      	movs	r2, #4
   16890:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16894:	f7ff ff26 	bl	166e4 <bt_gatt_indicate>
   16898:	b918      	cbnz	r0, 168a2 <sc_process+0x7a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1689a:	2101      	movs	r1, #1
   1689c:	4620      	mov	r0, r4
   1689e:	f010 fbf5 	bl	2708c <atomic_set_bit>
}
   168a2:	b003      	add	sp, #12
   168a4:	bd30      	pop	{r4, r5, pc}
   168a6:	bf00      	nop
   168a8:	0002e7f8 	.word	0x0002e7f8
   168ac:	0002e695 	.word	0x0002e695
   168b0:	0002b339 	.word	0x0002b339
   168b4:	0002e829 	.word	0x0002e829
   168b8:	0002add8 	.word	0x0002add8
   168bc:	00016091 	.word	0x00016091

000168c0 <update_ccc>:
{
   168c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   168c4:	4b3e      	ldr	r3, [pc, #248]	; (169c0 <update_ccc+0x100>)
{
   168c6:	4617      	mov	r7, r2
	struct bt_conn *conn = data->conn;
   168c8:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   168ca:	6882      	ldr	r2, [r0, #8]
{
   168cc:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   168ce:	429a      	cmp	r2, r3
{
   168d0:	b086      	sub	sp, #24
	if (attr->write != bt_gatt_attr_write_ccc) {
   168d2:	d170      	bne.n	169b6 <update_ccc+0xf6>
	ccc = attr->user_data;
   168d4:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   168d8:	f108 0601 	add.w	r6, r8, #1
   168dc:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   168e0:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   168e4:	b1d3      	cbz	r3, 1691c <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   168e6:	4632      	mov	r2, r6
   168e8:	4620      	mov	r0, r4
   168ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   168ee:	f00f fd62 	bl	263b6 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   168f2:	b198      	cbz	r0, 1691c <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   168f4:	f44f 7295 	mov.w	r2, #298	; 0x12a
   168f8:	4629      	mov	r1, r5
   168fa:	4620      	mov	r0, r4
   168fc:	f010 fc3e 	bl	2717c <bt_gatt_check_perm>
		if (err) {
   16900:	b308      	cbz	r0, 16946 <update_ccc+0x86>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   16902:	2803      	cmp	r0, #3
   16904:	d10e      	bne.n	16924 <update_ccc+0x64>
				LOG_WRN("CCC %p not writable", attr);
   16906:	4b2f      	ldr	r3, [pc, #188]	; (169c4 <update_ccc+0x104>)
   16908:	2202      	movs	r2, #2
   1690a:	9302      	str	r3, [sp, #8]
   1690c:	2300      	movs	r3, #0
   1690e:	492e      	ldr	r1, [pc, #184]	; (169c8 <update_ccc+0x108>)
   16910:	4618      	mov	r0, r3
   16912:	e9cd 3300 	strd	r3, r3, [sp]
   16916:	9503      	str	r5, [sp, #12]
   16918:	f010 fb88 	bl	2702c <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1691c:	360a      	adds	r6, #10
   1691e:	454e      	cmp	r6, r9
   16920:	d1de      	bne.n	168e0 <update_ccc+0x20>
   16922:	e048      	b.n	169b6 <update_ccc+0xf6>
			sec = BT_SECURITY_L2;
   16924:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   16926:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   16928:	bf0c      	ite	eq
   1692a:	f04f 0a03 	moveq.w	sl, #3
   1692e:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   16932:	f00f fd3e 	bl	263b2 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   16936:	4582      	cmp	sl, r0
   16938:	d905      	bls.n	16946 <update_ccc+0x86>
				if (data->sec < sec) {
   1693a:	793b      	ldrb	r3, [r7, #4]
   1693c:	4553      	cmp	r3, sl
   1693e:	d2ed      	bcs.n	1691c <update_ccc+0x5c>
					data->sec = sec;
   16940:	f887 a004 	strb.w	sl, [r7, #4]
   16944:	e7ea      	b.n	1691c <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   16946:	4641      	mov	r1, r8
   16948:	4628      	mov	r0, r5
   1694a:	f010 fa5b 	bl	26e04 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1694e:	4b1f      	ldr	r3, [pc, #124]	; (169cc <update_ccc+0x10c>)
   16950:	4598      	cmp	r8, r3
   16952:	d130      	bne.n	169b6 <update_ccc+0xf6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   16954:	7a20      	ldrb	r0, [r4, #8]
   16956:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1695a:	f7ff f9e7 	bl	15d2c <find_sc_cfg>
	if (!cfg) {
   1695e:	b350      	cbz	r0, 169b6 <update_ccc+0xf6>
	if (!(cfg->data.start || cfg->data.end)) {
   16960:	8902      	ldrh	r2, [r0, #8]
   16962:	8943      	ldrh	r3, [r0, #10]
   16964:	ea52 0103 	orrs.w	r1, r2, r3
   16968:	d025      	beq.n	169b6 <update_ccc+0xf6>
	index = bt_conn_index(conn);
   1696a:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1696c:	f8ad 2014 	strh.w	r2, [sp, #20]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   16970:	f8ad 3016 	strh.w	r3, [sp, #22]
	index = bt_conn_index(conn);
   16974:	f7fd fb56 	bl	14024 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16978:	2318      	movs	r3, #24
   1697a:	4915      	ldr	r1, [pc, #84]	; (169d0 <update_ccc+0x110>)
   1697c:	4a15      	ldr	r2, [pc, #84]	; (169d4 <update_ccc+0x114>)
   1697e:	fb03 1300 	mla	r3, r3, r0, r1
   16982:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   16984:	4a14      	ldr	r2, [pc, #80]	; (169d8 <update_ccc+0x118>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16986:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   16988:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1698a:	aa05      	add	r2, sp, #20
   1698c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1698e:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16990:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16994:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   16998:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1699a:	4620      	mov	r0, r4
   1699c:	f7ff fea2 	bl	166e4 <bt_gatt_indicate>
   169a0:	b148      	cbz	r0, 169b6 <update_ccc+0xf6>
		LOG_ERR("SC restore indication failed");
   169a2:	4b0e      	ldr	r3, [pc, #56]	; (169dc <update_ccc+0x11c>)
   169a4:	2201      	movs	r2, #1
   169a6:	9302      	str	r3, [sp, #8]
   169a8:	2300      	movs	r3, #0
   169aa:	4907      	ldr	r1, [pc, #28]	; (169c8 <update_ccc+0x108>)
   169ac:	4618      	mov	r0, r3
   169ae:	e9cd 3300 	strd	r3, r3, [sp]
   169b2:	f010 fb3b 	bl	2702c <z_log_msg_runtime_create.constprop.0>
}
   169b6:	2001      	movs	r0, #1
   169b8:	b006      	add	sp, #24
   169ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   169be:	bf00      	nop
   169c0:	00015de1 	.word	0x00015de1
   169c4:	0002e844 	.word	0x0002e844
   169c8:	0002a390 	.word	0x0002a390
   169cc:	20008508 	.word	0x20008508
   169d0:	200210c8 	.word	0x200210c8
   169d4:	0002add8 	.word	0x0002add8
   169d8:	000270a1 	.word	0x000270a1
   169dc:	0002e858 	.word	0x0002e858

000169e0 <gatt_notify>:
{
   169e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   169e4:	4614      	mov	r4, r2
   169e6:	4688      	mov	r8, r1
   169e8:	b085      	sub	sp, #20
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   169ea:	2294      	movs	r2, #148	; 0x94
   169ec:	6861      	ldr	r1, [r4, #4]
{
   169ee:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   169f0:	f010 fbc4 	bl	2717c <bt_gatt_check_perm>
   169f4:	b170      	cbz	r0, 16a14 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   169f6:	4b2a      	ldr	r3, [pc, #168]	; (16aa0 <gatt_notify+0xc0>)
   169f8:	2202      	movs	r2, #2
   169fa:	9302      	str	r3, [sp, #8]
   169fc:	2300      	movs	r3, #0
   169fe:	4929      	ldr	r1, [pc, #164]	; (16aa4 <gatt_notify+0xc4>)
   16a00:	4618      	mov	r0, r3
   16a02:	e9cd 3300 	strd	r3, r3, [sp]
   16a06:	f010 fb11 	bl	2702c <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   16a0a:	f04f 30ff 	mov.w	r0, #4294967295
}
   16a0e:	b005      	add	sp, #20
   16a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   16a14:	2201      	movs	r2, #1
   16a16:	4630      	mov	r0, r6
   16a18:	6861      	ldr	r1, [r4, #4]
   16a1a:	f7ff fd0f 	bl	1643c <bt_gatt_is_subscribed>
   16a1e:	4603      	mov	r3, r0
   16a20:	b950      	cbnz	r0, 16a38 <gatt_notify+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   16a22:	4a21      	ldr	r2, [pc, #132]	; (16aa8 <gatt_notify+0xc8>)
   16a24:	9000      	str	r0, [sp, #0]
   16a26:	e9cd 0201 	strd	r0, r2, [sp, #4]
   16a2a:	491e      	ldr	r1, [pc, #120]	; (16aa4 <gatt_notify+0xc4>)
   16a2c:	2202      	movs	r2, #2
   16a2e:	f010 fafd 	bl	2702c <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   16a32:	f06f 0015 	mvn.w	r0, #21
   16a36:	e7ea      	b.n	16a0e <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   16a38:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   16a3a:	211b      	movs	r1, #27
   16a3c:	4630      	mov	r0, r6
   16a3e:	3202      	adds	r2, #2
   16a40:	f7fe fce8 	bl	15414 <bt_att_create_pdu>
	if (!buf) {
   16a44:	4605      	mov	r5, r0
   16a46:	b958      	cbnz	r0, 16a60 <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   16a48:	4b18      	ldr	r3, [pc, #96]	; (16aac <gatt_notify+0xcc>)
   16a4a:	9000      	str	r0, [sp, #0]
   16a4c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16a50:	2202      	movs	r2, #2
   16a52:	4603      	mov	r3, r0
   16a54:	4913      	ldr	r1, [pc, #76]	; (16aa4 <gatt_notify+0xc4>)
   16a56:	f010 fae9 	bl	2702c <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   16a5a:	f06f 000b 	mvn.w	r0, #11
   16a5e:	e7d6      	b.n	16a0e <gatt_notify+0x2e>
   16a60:	f100 090c 	add.w	r9, r0, #12
   16a64:	2102      	movs	r1, #2
   16a66:	4648      	mov	r0, r9
   16a68:	f002 fbfc 	bl	19264 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   16a6c:	4607      	mov	r7, r0
   16a6e:	f827 8b02 	strh.w	r8, [r7], #2
   16a72:	89a1      	ldrh	r1, [r4, #12]
   16a74:	4648      	mov	r0, r9
   16a76:	f002 fbf5 	bl	19264 <net_buf_simple_add>
   16a7a:	89a2      	ldrh	r2, [r4, #12]
   16a7c:	68a1      	ldr	r1, [r4, #8]
   16a7e:	4638      	mov	r0, r7
   16a80:	f012 fcf7 	bl	29472 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   16a84:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   16a88:	4628      	mov	r0, r5
   16a8a:	2301      	movs	r3, #1
   16a8c:	f010 f9b0 	bl	26df0 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   16a90:	4629      	mov	r1, r5
   16a92:	4630      	mov	r0, r6
}
   16a94:	b005      	add	sp, #20
   16a96:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   16a9a:	f7ff b885 	b.w	15ba8 <bt_att_send>
   16a9e:	bf00      	nop
   16aa0:	0002e756 	.word	0x0002e756
   16aa4:	0002a390 	.word	0x0002a390
   16aa8:	0002e76c 	.word	0x0002e76c
   16aac:	0002e875 	.word	0x0002e875

00016ab0 <bt_gatt_notify_cb>:
{
   16ab0:	b530      	push	{r4, r5, lr}
   16ab2:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   16ab4:	460c      	mov	r4, r1
{
   16ab6:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   16ab8:	b971      	cbnz	r1, 16ad8 <bt_gatt_notify_cb+0x28>
   16aba:	4944      	ldr	r1, [pc, #272]	; (16bcc <bt_gatt_notify_cb+0x11c>)
   16abc:	f640 232d 	movw	r3, #2605	; 0xa2d
   16ac0:	4a43      	ldr	r2, [pc, #268]	; (16bd0 <bt_gatt_notify_cb+0x120>)
   16ac2:	4844      	ldr	r0, [pc, #272]	; (16bd4 <bt_gatt_notify_cb+0x124>)
   16ac4:	f00d ff6f 	bl	249a6 <assert_print>
   16ac8:	4843      	ldr	r0, [pc, #268]	; (16bd8 <bt_gatt_notify_cb+0x128>)
   16aca:	f00d ff6c 	bl	249a6 <assert_print>
   16ace:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   16ad2:	483f      	ldr	r0, [pc, #252]	; (16bd0 <bt_gatt_notify_cb+0x120>)
   16ad4:	f00d ff60 	bl	24998 <assert_post_action>
   16ad8:	684b      	ldr	r3, [r1, #4]
   16ada:	b973      	cbnz	r3, 16afa <bt_gatt_notify_cb+0x4a>
   16adc:	680b      	ldr	r3, [r1, #0]
   16ade:	b963      	cbnz	r3, 16afa <bt_gatt_notify_cb+0x4a>
   16ae0:	493e      	ldr	r1, [pc, #248]	; (16bdc <bt_gatt_notify_cb+0x12c>)
   16ae2:	f640 232e 	movw	r3, #2606	; 0xa2e
   16ae6:	4a3a      	ldr	r2, [pc, #232]	; (16bd0 <bt_gatt_notify_cb+0x120>)
   16ae8:	483a      	ldr	r0, [pc, #232]	; (16bd4 <bt_gatt_notify_cb+0x124>)
   16aea:	f00d ff5c 	bl	249a6 <assert_print>
   16aee:	483a      	ldr	r0, [pc, #232]	; (16bd8 <bt_gatt_notify_cb+0x128>)
   16af0:	f00d ff59 	bl	249a6 <assert_print>
   16af4:	f640 212e 	movw	r1, #2606	; 0xa2e
   16af8:	e7eb      	b.n	16ad2 <bt_gatt_notify_cb+0x22>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16afa:	4b39      	ldr	r3, [pc, #228]	; (16be0 <bt_gatt_notify_cb+0x130>)
   16afc:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16b00:	075a      	lsls	r2, r3, #29
   16b02:	d55d      	bpl.n	16bc0 <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16b04:	b115      	cbz	r5, 16b0c <bt_gatt_notify_cb+0x5c>
   16b06:	7b6b      	ldrb	r3, [r5, #13]
   16b08:	2b07      	cmp	r3, #7
   16b0a:	d15c      	bne.n	16bc6 <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   16b0c:	6860      	ldr	r0, [r4, #4]
   16b0e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16b10:	f7ff fb4e 	bl	161b0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16b14:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16b16:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16b1a:	b33a      	cbz	r2, 16b6c <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16b1c:	a905      	add	r1, sp, #20
   16b1e:	9102      	str	r1, [sp, #8]
   16b20:	4930      	ldr	r1, [pc, #192]	; (16be4 <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   16b22:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16b24:	9101      	str	r1, [sp, #4]
   16b26:	2101      	movs	r1, #1
   16b28:	9100      	str	r1, [sp, #0]
   16b2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16b2e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16b30:	f7ff fb86 	bl	16240 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16b34:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16b36:	b91b      	cbnz	r3, 16b40 <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   16b38:	f06f 0001 	mvn.w	r0, #1
}
   16b3c:	b00b      	add	sp, #44	; 0x2c
   16b3e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16b40:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16b42:	9b05      	ldr	r3, [sp, #20]
   16b44:	a904      	add	r1, sp, #16
   16b46:	6818      	ldr	r0, [r3, #0]
   16b48:	2300      	movs	r3, #0
   16b4a:	f88d 3010 	strb.w	r3, [sp, #16]
   16b4e:	f642 0303 	movw	r3, #10243	; 0x2803
   16b52:	f8ad 3012 	strh.w	r3, [sp, #18]
   16b56:	f00f f806 	bl	25b66 <bt_uuid_cmp>
   16b5a:	b970      	cbnz	r0, 16b7a <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16b5c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   16b5e:	68c3      	ldr	r3, [r0, #12]
   16b60:	799b      	ldrb	r3, [r3, #6]
   16b62:	06db      	lsls	r3, r3, #27
   16b64:	d405      	bmi.n	16b72 <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   16b66:	f06f 0015 	mvn.w	r0, #21
   16b6a:	e7e7      	b.n	16b3c <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   16b6c:	2800      	cmp	r0, #0
   16b6e:	d1e8      	bne.n	16b42 <bt_gatt_notify_cb+0x92>
   16b70:	e7e2      	b.n	16b38 <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16b72:	f010 faaf 	bl	270d4 <bt_gatt_attr_value_handle>
   16b76:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   16b7a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   16b7e:	b12d      	cbz	r5, 16b8c <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   16b80:	4601      	mov	r1, r0
   16b82:	4622      	mov	r2, r4
   16b84:	4628      	mov	r0, r5
   16b86:	f7ff ff2b 	bl	169e0 <gatt_notify>
   16b8a:	e7d7      	b.n	16b3c <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   16b8c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16b90:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   16b94:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   16b96:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16b98:	f8ad 2012 	strh.w	r2, [sp, #18]
   16b9c:	aa05      	add	r2, sp, #20
   16b9e:	9202      	str	r2, [sp, #8]
   16ba0:	4a11      	ldr	r2, [pc, #68]	; (16be8 <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   16ba2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16ba6:	e9cd 3200 	strd	r3, r2, [sp]
   16baa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16bae:	462b      	mov	r3, r5
   16bb0:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   16bb2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16bb4:	f88d 5010 	strb.w	r5, [sp, #16]
   16bb8:	f7ff fb42 	bl	16240 <bt_gatt_foreach_attr_type>
	return data.err;
   16bbc:	9807      	ldr	r0, [sp, #28]
   16bbe:	e7bd      	b.n	16b3c <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   16bc0:	f06f 000a 	mvn.w	r0, #10
   16bc4:	e7ba      	b.n	16b3c <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   16bc6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16bca:	e7b7      	b.n	16b3c <bt_gatt_notify_cb+0x8c>
   16bcc:	0002e7be 	.word	0x0002e7be
   16bd0:	0002e695 	.word	0x0002e695
   16bd4:	0002b339 	.word	0x0002b339
   16bd8:	0002e7c5 	.word	0x0002e7c5
   16bdc:	0002e7db 	.word	0x0002e7db
   16be0:	200080cc 	.word	0x200080cc
   16be4:	00026e47 	.word	0x00026e47
   16be8:	00016bed 	.word	0x00016bed

00016bec <notify_cb>:
{
   16bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16bf0:	4b46      	ldr	r3, [pc, #280]	; (16d0c <notify_cb+0x120>)
{
   16bf2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16bf4:	6882      	ldr	r2, [r0, #8]
{
   16bf6:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16bf8:	429a      	cmp	r2, r3
{
   16bfa:	b085      	sub	sp, #20
	if (attr->write != bt_gatt_attr_write_ccc) {
   16bfc:	d136      	bne.n	16c6c <notify_cb+0x80>
	ccc = attr->user_data;
   16bfe:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   16c02:	4b43      	ldr	r3, [pc, #268]	; (16d10 <notify_cb+0x124>)
   16c04:	459a      	cmp	sl, r3
   16c06:	d119      	bne.n	16c3c <notify_cb+0x50>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16c08:	2600      	movs	r6, #0
   16c0a:	4c42      	ldr	r4, [pc, #264]	; (16d14 <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16c0c:	4f42      	ldr	r7, [pc, #264]	; (16d18 <notify_cb+0x12c>)
   16c0e:	4639      	mov	r1, r7
   16c10:	4620      	mov	r0, r4
   16c12:	f010 f96f 	bl	26ef4 <bt_addr_le_eq>
   16c16:	b978      	cbnz	r0, 16c38 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   16c18:	2207      	movs	r2, #7
   16c1a:	4621      	mov	r1, r4
   16c1c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   16c20:	f7fd fbf0 	bl	14404 <bt_conn_lookup_state_le>
			if (!conn) {
   16c24:	bb38      	cbnz	r0, 16c76 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   16c26:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   16c28:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   16c2a:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   16c2c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   16c30:	8853      	ldrh	r3, [r2, #2]
   16c32:	8812      	ldrh	r2, [r2, #0]
   16c34:	f7ff f94c 	bl	15ed0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16c38:	340c      	adds	r4, #12
   16c3a:	b1d6      	cbz	r6, 16c72 <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16c3c:	f10a 0601 	add.w	r6, sl, #1
   16c40:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   16c44:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   16c48:	89ab      	ldrh	r3, [r5, #12]
   16c4a:	429a      	cmp	r2, r3
   16c4c:	d10b      	bne.n	16c66 <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16c4e:	4631      	mov	r1, r6
   16c50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   16c54:	f7fd fb96 	bl	14384 <bt_conn_lookup_addr_le>
		if (!conn) {
   16c58:	4604      	mov	r4, r0
   16c5a:	b120      	cbz	r0, 16c66 <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   16c5c:	7b43      	ldrb	r3, [r0, #13]
   16c5e:	2b07      	cmp	r3, #7
   16c60:	d00c      	beq.n	16c7c <notify_cb+0x90>
			bt_conn_unref(conn);
   16c62:	f7fd f8c3 	bl	13dec <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16c66:	360a      	adds	r6, #10
   16c68:	45b3      	cmp	fp, r6
   16c6a:	d1eb      	bne.n	16c44 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   16c6c:	f04f 0901 	mov.w	r9, #1
   16c70:	e048      	b.n	16d04 <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16c72:	2601      	movs	r6, #1
   16c74:	e7cb      	b.n	16c0e <notify_cb+0x22>
			bt_conn_unref(conn);
   16c76:	f7fd f8b9 	bl	13dec <bt_conn_unref>
   16c7a:	e7dd      	b.n	16c38 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   16c7c:	f8da 3020 	ldr.w	r3, [sl, #32]
   16c80:	b123      	cbz	r3, 16c8c <notify_cb+0xa0>
   16c82:	4641      	mov	r1, r8
   16c84:	4798      	blx	r3
   16c86:	b908      	cbnz	r0, 16c8c <notify_cb+0xa0>
			bt_conn_unref(conn);
   16c88:	4620      	mov	r0, r4
   16c8a:	e7ea      	b.n	16c62 <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16c8c:	2294      	movs	r2, #148	; 0x94
   16c8e:	4641      	mov	r1, r8
   16c90:	4620      	mov	r0, r4
   16c92:	f010 fa73 	bl	2717c <bt_gatt_check_perm>
   16c96:	4681      	mov	r9, r0
   16c98:	b150      	cbz	r0, 16cb0 <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   16c9a:	4b20      	ldr	r3, [pc, #128]	; (16d1c <notify_cb+0x130>)
   16c9c:	2202      	movs	r2, #2
   16c9e:	9302      	str	r3, [sp, #8]
   16ca0:	2300      	movs	r3, #0
   16ca2:	491f      	ldr	r1, [pc, #124]	; (16d20 <notify_cb+0x134>)
   16ca4:	4618      	mov	r0, r3
   16ca6:	e9cd 3300 	strd	r3, r3, [sp]
   16caa:	f010 f9bf 	bl	2702c <z_log_msg_runtime_create.constprop.0>
			bt_conn_unref(conn);
   16cae:	e7eb      	b.n	16c88 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   16cb0:	89ab      	ldrh	r3, [r5, #12]
   16cb2:	2b02      	cmp	r3, #2
   16cb4:	d115      	bne.n	16ce2 <notify_cb+0xf6>
   16cb6:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   16cba:	079a      	lsls	r2, r3, #30
   16cbc:	d405      	bmi.n	16cca <notify_cb+0xde>
		bt_conn_unref(conn);
   16cbe:	4620      	mov	r0, r4
   16cc0:	f7fd f894 	bl	13dec <bt_conn_unref>
		data->err = 0;
   16cc4:	2300      	movs	r3, #0
   16cc6:	60ab      	str	r3, [r5, #8]
   16cc8:	e7cd      	b.n	16c66 <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   16cca:	4620      	mov	r0, r4
   16ccc:	692a      	ldr	r2, [r5, #16]
   16cce:	88a9      	ldrh	r1, [r5, #4]
   16cd0:	f7ff fc88 	bl	165e4 <gatt_indicate>
			if (err == 0) {
   16cd4:	4607      	mov	r7, r0
   16cd6:	b980      	cbnz	r0, 16cfa <notify_cb+0x10e>
				data->ind_params->_ref++;
   16cd8:	692a      	ldr	r2, [r5, #16]
   16cda:	7d93      	ldrb	r3, [r2, #22]
   16cdc:	3301      	adds	r3, #1
   16cde:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   16ce0:	e7ed      	b.n	16cbe <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   16ce2:	2b01      	cmp	r3, #1
   16ce4:	d1eb      	bne.n	16cbe <notify_cb+0xd2>
   16ce6:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   16cea:	07db      	lsls	r3, r3, #31
   16cec:	d5e7      	bpl.n	16cbe <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   16cee:	4620      	mov	r0, r4
   16cf0:	692a      	ldr	r2, [r5, #16]
   16cf2:	88a9      	ldrh	r1, [r5, #4]
   16cf4:	f7ff fe74 	bl	169e0 <gatt_notify>
   16cf8:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   16cfa:	4620      	mov	r0, r4
   16cfc:	f7fd f876 	bl	13dec <bt_conn_unref>
		if (err < 0) {
   16d00:	2f00      	cmp	r7, #0
   16d02:	dadf      	bge.n	16cc4 <notify_cb+0xd8>
}
   16d04:	4648      	mov	r0, r9
   16d06:	b005      	add	sp, #20
   16d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d0c:	00015de1 	.word	0x00015de1
   16d10:	20008508 	.word	0x20008508
   16d14:	200214ed 	.word	0x200214ed
   16d18:	0002d1b1 	.word	0x0002d1b1
   16d1c:	0002e756 	.word	0x0002e756
   16d20:	0002a390 	.word	0x0002a390

00016d24 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   16d24:	b510      	push	{r4, lr}
   16d26:	b086      	sub	sp, #24
   16d28:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   16d2a:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   16d2c:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16d2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16d32:	4a0f      	ldr	r2, [pc, #60]	; (16d70 <bt_gatt_connected+0x4c>)
   16d34:	ab04      	add	r3, sp, #16
	data.sec = BT_SECURITY_L1;
   16d36:	f88d 0014 	strb.w	r0, [sp, #20]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16d3a:	f010 fa12 	bl	27162 <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   16d3e:	4620      	mov	r0, r4
   16d40:	f00f fb37 	bl	263b2 <bt_conn_get_security>
   16d44:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   16d48:	4288      	cmp	r0, r1
   16d4a:	d20e      	bcs.n	16d6a <bt_gatt_connected+0x46>
		int err = bt_conn_set_security(conn, data.sec);
   16d4c:	4620      	mov	r0, r4
   16d4e:	f00f fb04 	bl	2635a <bt_conn_set_security>

		if (err) {
   16d52:	b150      	cbz	r0, 16d6a <bt_gatt_connected+0x46>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   16d54:	4b07      	ldr	r3, [pc, #28]	; (16d74 <bt_gatt_connected+0x50>)
   16d56:	9003      	str	r0, [sp, #12]
   16d58:	9302      	str	r3, [sp, #8]
   16d5a:	2300      	movs	r3, #0
   16d5c:	2202      	movs	r2, #2
   16d5e:	4618      	mov	r0, r3
   16d60:	e9cd 3300 	strd	r3, r3, [sp]
   16d64:	4904      	ldr	r1, [pc, #16]	; (16d78 <bt_gatt_connected+0x54>)
   16d66:	f010 f961 	bl	2702c <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   16d6a:	b006      	add	sp, #24
   16d6c:	bd10      	pop	{r4, pc}
   16d6e:	bf00      	nop
   16d70:	000168c1 	.word	0x000168c1
   16d74:	0002e89e 	.word	0x0002e89e
   16d78:	0002a390 	.word	0x0002a390

00016d7c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   16d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d7e:	4605      	mov	r5, r0
   16d80:	460e      	mov	r6, r1
   16d82:	4617      	mov	r7, r2
	return list->head;
   16d84:	4b06      	ldr	r3, [pc, #24]	; (16da0 <bt_gatt_att_max_mtu_changed+0x24>)
   16d86:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16d88:	b14c      	cbz	r4, 16d9e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   16d8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16d8e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   16d90:	b11b      	cbz	r3, 16d9a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   16d92:	463a      	mov	r2, r7
   16d94:	4631      	mov	r1, r6
   16d96:	4628      	mov	r0, r5
   16d98:	4798      	blx	r3
	return node->next;
   16d9a:	6864      	ldr	r4, [r4, #4]
   16d9c:	e7f4      	b.n	16d88 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   16d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16da0:	20021108 	.word	0x20021108

00016da4 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   16da4:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   16da6:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   16da8:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16daa:	466b      	mov	r3, sp
   16dac:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16db0:	4a03      	ldr	r2, [pc, #12]	; (16dc0 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   16db2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16db6:	f010 f9d4 	bl	27162 <bt_gatt_foreach_attr>
}
   16dba:	b003      	add	sp, #12
   16dbc:	f85d fb04 	ldr.w	pc, [sp], #4
   16dc0:	000168c1 	.word	0x000168c1

00016dc4 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   16dc4:	b570      	push	{r4, r5, r6, lr}
   16dc6:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   16dc8:	4603      	mov	r3, r0
   16dca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16dce:	2001      	movs	r0, #1
   16dd0:	4a0d      	ldr	r2, [pc, #52]	; (16e08 <bt_gatt_disconnected+0x44>)
   16dd2:	f010 f9c6 	bl	27162 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   16dd6:	4620      	mov	r0, r4
   16dd8:	f7fe ff7a 	bl	15cd0 <find_cf_cfg>
	if (!cfg) {
   16ddc:	4605      	mov	r5, r0
   16dde:	b188      	cbz	r0, 16e04 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16de0:	f104 0690 	add.w	r6, r4, #144	; 0x90
   16de4:	4631      	mov	r1, r6
   16de6:	7a20      	ldrb	r0, [r4, #8]
   16de8:	f00f f80a 	bl	25e00 <bt_addr_le_is_bonded>
   16dec:	b920      	cbnz	r0, 16df8 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   16dee:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   16df0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   16df4:	f7ff b858 	b.w	15ea8 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16df8:	4631      	mov	r1, r6
   16dfa:	1c68      	adds	r0, r5, #1
}
   16dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16e00:	f010 b880 	b.w	26f04 <bt_addr_le_copy>
}
   16e04:	bd70      	pop	{r4, r5, r6, pc}
   16e06:	bf00      	nop
   16e08:	00015fdd 	.word	0x00015fdd

00016e0c <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   16e0c:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   16e0e:	4b05      	ldr	r3, [pc, #20]	; (16e24 <smp_find+0x18>)
{
   16e10:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   16e12:	4618      	mov	r0, r3
   16e14:	f010 fa24 	bl	27260 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   16e18:	3b04      	subs	r3, #4
   16e1a:	2800      	cmp	r0, #0
}
   16e1c:	bf14      	ite	ne
   16e1e:	4618      	movne	r0, r3
   16e20:	2000      	moveq	r0, #0
   16e22:	bd08      	pop	{r3, pc}
   16e24:	20009984 	.word	0x20009984

00016e28 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   16e28:	4b08      	ldr	r3, [pc, #32]	; (16e4c <latch_auth_cb+0x24>)
   16e2a:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16e2e:	681a      	ldr	r2, [r3, #0]
   16e30:	4b07      	ldr	r3, [pc, #28]	; (16e50 <latch_auth_cb+0x28>)
   16e32:	e8d0 1fef 	ldaex	r1, [r0]
   16e36:	4299      	cmp	r1, r3
   16e38:	d104      	bne.n	16e44 <latch_auth_cb+0x1c>
   16e3a:	e8c0 2fec 	stlex	ip, r2, [r0]
   16e3e:	f1bc 0f00 	cmp.w	ip, #0
   16e42:	d1f6      	bne.n	16e32 <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16e44:	e8d0 0faf 	lda	r0, [r0]
}
   16e48:	4770      	bx	lr
   16e4a:	bf00      	nop
   16e4c:	20020fe8 	.word	0x20020fe8
   16e50:	20009980 	.word	0x20009980

00016e54 <get_io_capa>:
{
   16e54:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16e56:	f7ff ffe7 	bl	16e28 <latch_auth_cb>
	if (!smp_auth_cb) {
   16e5a:	4603      	mov	r3, r0
   16e5c:	b1c8      	cbz	r0, 16e92 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   16e5e:	e9d0 1200 	ldrd	r1, r2, [r0]
   16e62:	b921      	cbnz	r1, 16e6e <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   16e64:	2a00      	cmp	r2, #0
   16e66:	bf0c      	ite	eq
   16e68:	2003      	moveq	r0, #3
   16e6a:	2002      	movne	r0, #2
   16e6c:	e010      	b.n	16e90 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   16e6e:	b132      	cbz	r2, 16e7e <get_io_capa+0x2a>
   16e70:	6883      	ldr	r3, [r0, #8]
   16e72:	b913      	cbnz	r3, 16e7a <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   16e74:	4b09      	ldr	r3, [pc, #36]	; (16e9c <get_io_capa+0x48>)
   16e76:	781b      	ldrb	r3, [r3, #0]
   16e78:	b933      	cbnz	r3, 16e88 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   16e7a:	2004      	movs	r0, #4
   16e7c:	e008      	b.n	16e90 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   16e7e:	4907      	ldr	r1, [pc, #28]	; (16e9c <get_io_capa+0x48>)
   16e80:	7808      	ldrb	r0, [r1, #0]
   16e82:	b128      	cbz	r0, 16e90 <get_io_capa+0x3c>
   16e84:	689b      	ldr	r3, [r3, #8]
   16e86:	b933      	cbnz	r3, 16e96 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   16e88:	3a00      	subs	r2, #0
   16e8a:	bf18      	it	ne
   16e8c:	2201      	movne	r2, #1
   16e8e:	0050      	lsls	r0, r2, #1
}
   16e90:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   16e92:	2003      	movs	r0, #3
   16e94:	e7fc      	b.n	16e90 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   16e96:	2001      	movs	r0, #1
   16e98:	e7fa      	b.n	16e90 <get_io_capa+0x3c>
   16e9a:	bf00      	nop
   16e9c:	20021dbf 	.word	0x20021dbf

00016ea0 <get_auth>:
{
   16ea0:	b510      	push	{r4, lr}
	if (sc_supported) {
   16ea2:	4b0c      	ldr	r3, [pc, #48]	; (16ed4 <get_auth+0x34>)
   16ea4:	781b      	ldrb	r3, [r3, #0]
   16ea6:	b17b      	cbz	r3, 16ec8 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   16ea8:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   16eac:	f7ff ffd2 	bl	16e54 <get_io_capa>
	if (bondable) {
   16eb0:	4b09      	ldr	r3, [pc, #36]	; (16ed8 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   16eb2:	2803      	cmp	r0, #3
	if (bondable) {
   16eb4:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   16eb6:	bf0c      	ite	eq
   16eb8:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   16ebc:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   16ec0:	b12b      	cbz	r3, 16ece <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   16ec2:	f044 0001 	orr.w	r0, r4, #1
}
   16ec6:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   16ec8:	f001 0407 	and.w	r4, r1, #7
   16ecc:	e7ee      	b.n	16eac <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   16ece:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   16ed2:	e7f8      	b.n	16ec6 <get_auth+0x26>
   16ed4:	20021dbf 	.word	0x20021dbf
   16ed8:	200089e6 	.word	0x200089e6

00016edc <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   16edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   16ede:	4b0d      	ldr	r3, [pc, #52]	; (16f14 <bt_smp_accept+0x38>)
{
   16ee0:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   16ee2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   16ee6:	b930      	cbnz	r0, 16ef6 <bt_smp_accept+0x1a>
			continue;
		}

		smp->chan.chan.ops = &ops;
   16ee8:	4a0b      	ldr	r2, [pc, #44]	; (16f18 <bt_smp_accept+0x3c>)

		*chan = &smp->chan.chan;
   16eea:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   16eec:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   16eee:	600b      	str	r3, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   16ef0:	b005      	add	sp, #20
   16ef2:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_ERR("No available SMP context for conn %p", conn);
   16ef6:	4b09      	ldr	r3, [pc, #36]	; (16f1c <bt_smp_accept+0x40>)
   16ef8:	9203      	str	r2, [sp, #12]
   16efa:	9302      	str	r3, [sp, #8]
   16efc:	2300      	movs	r3, #0
   16efe:	2201      	movs	r2, #1
   16f00:	4618      	mov	r0, r3
   16f02:	e9cd 3300 	strd	r3, r3, [sp]
   16f06:	4906      	ldr	r1, [pc, #24]	; (16f20 <bt_smp_accept+0x44>)
   16f08:	f010 fa02 	bl	27310 <z_log_msg_runtime_create.constprop.0>
   16f0c:	f06f 000b 	mvn.w	r0, #11
   16f10:	e7ee      	b.n	16ef0 <bt_smp_accept+0x14>
   16f12:	bf00      	nop
   16f14:	20009980 	.word	0x20009980
   16f18:	0002aedc 	.word	0x0002aedc
   16f1c:	0002e8d9 	.word	0x0002e8d9
   16f20:	0002a3d8 	.word	0x0002a3d8

00016f24 <smp_chan_get>:
{
   16f24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   16f26:	2106      	movs	r1, #6
   16f28:	f00f fb0f 	bl	2654a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16f2c:	4604      	mov	r4, r0
   16f2e:	b958      	cbnz	r0, 16f48 <smp_chan_get+0x24>
		LOG_ERR("Unable to find SMP channel");
   16f30:	4b07      	ldr	r3, [pc, #28]	; (16f50 <smp_chan_get+0x2c>)
   16f32:	2201      	movs	r2, #1
   16f34:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16f38:	4906      	ldr	r1, [pc, #24]	; (16f54 <smp_chan_get+0x30>)
   16f3a:	4603      	mov	r3, r0
   16f3c:	9000      	str	r0, [sp, #0]
   16f3e:	f010 f9e7 	bl	27310 <z_log_msg_runtime_create.constprop.0>
}
   16f42:	4620      	mov	r0, r4
   16f44:	b004      	add	sp, #16
   16f46:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   16f48:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   16f4c:	e7f9      	b.n	16f42 <smp_chan_get+0x1e>
   16f4e:	bf00      	nop
   16f50:	0002e8fe 	.word	0x0002e8fe
   16f54:	0002a3d8 	.word	0x0002a3d8

00016f58 <smp_init>:
{
   16f58:	b538      	push	{r3, r4, r5, lr}
   16f5a:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   16f5c:	22ec      	movs	r2, #236	; 0xec
   16f5e:	2100      	movs	r1, #0
   16f60:	f012 fac1 	bl	294e6 <memset>
	if (bt_rand(smp->prnd, 16)) {
   16f64:	2110      	movs	r1, #16
   16f66:	f105 0027 	add.w	r0, r5, #39	; 0x27
   16f6a:	f7fc fad5 	bl	13518 <bt_rand>
   16f6e:	4604      	mov	r4, r0
   16f70:	b948      	cbnz	r0, 16f86 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   16f72:	2105      	movs	r1, #5
   16f74:	4628      	mov	r0, r5
   16f76:	f010 f9da 	bl	2732e <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   16f7a:	f7fc fb7f 	bl	1367c <bt_pub_key_get>
   16f7e:	4b03      	ldr	r3, [pc, #12]	; (16f8c <smp_init+0x34>)
   16f80:	6018      	str	r0, [r3, #0]
}
   16f82:	4620      	mov	r0, r4
   16f84:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   16f86:	2408      	movs	r4, #8
   16f88:	e7fb      	b.n	16f82 <smp_init+0x2a>
   16f8a:	bf00      	nop
   16f8c:	20021110 	.word	0x20021110

00016f90 <smp_dhkey_generate>:
{
   16f90:	b530      	push	{r4, r5, lr}
   16f92:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   16f94:	1d05      	adds	r5, r0, #4
   16f96:	2108      	movs	r1, #8
   16f98:	4628      	mov	r0, r5
{
   16f9a:	b085      	sub	sp, #20
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   16f9c:	f010 f9c7 	bl	2732e <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   16fa0:	490b      	ldr	r1, [pc, #44]	; (16fd0 <smp_dhkey_generate+0x40>)
   16fa2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   16fa6:	f7fc fb77 	bl	13698 <bt_dh_key_gen>
	if (err) {
   16faa:	b170      	cbz	r0, 16fca <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   16fac:	2108      	movs	r1, #8
   16fae:	4628      	mov	r0, r5
   16fb0:	f010 f97d 	bl	272ae <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   16fb4:	4b07      	ldr	r3, [pc, #28]	; (16fd4 <smp_dhkey_generate+0x44>)
   16fb6:	2201      	movs	r2, #1
   16fb8:	9302      	str	r3, [sp, #8]
   16fba:	2300      	movs	r3, #0
   16fbc:	4906      	ldr	r1, [pc, #24]	; (16fd8 <smp_dhkey_generate+0x48>)
   16fbe:	4618      	mov	r0, r3
   16fc0:	e9cd 3300 	strd	r3, r3, [sp]
   16fc4:	f010 f9a4 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   16fc8:	2008      	movs	r0, #8
}
   16fca:	b005      	add	sp, #20
   16fcc:	bd30      	pop	{r4, r5, pc}
   16fce:	bf00      	nop
   16fd0:	00027707 	.word	0x00027707
   16fd4:	0002e919 	.word	0x0002e919
   16fd8:	0002a3d8 	.word	0x0002a3d8

00016fdc <smp_ident_info>:
{
   16fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fde:	460b      	mov	r3, r1
   16fe0:	4606      	mov	r6, r0
   16fe2:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   16fe4:	210d      	movs	r1, #13
   16fe6:	3004      	adds	r0, #4
   16fe8:	f010 f93a 	bl	27260 <atomic_test_bit>
   16fec:	b330      	cbz	r0, 1703c <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   16fee:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   16ff0:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   16ff4:	2002      	movs	r0, #2
   16ff6:	f103 0790 	add.w	r7, r3, #144	; 0x90
   16ffa:	463a      	mov	r2, r7
   16ffc:	7a19      	ldrb	r1, [r3, #8]
   16ffe:	f001 fcbf 	bl	18980 <bt_keys_get_type>
		if (!keys) {
   17002:	4604      	mov	r4, r0
   17004:	b980      	cbnz	r0, 17028 <smp_ident_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   17006:	4638      	mov	r0, r7
   17008:	f7f9 fef8 	bl	10dfc <bt_addr_le_str>
   1700c:	4b0e      	ldr	r3, [pc, #56]	; (17048 <smp_ident_info+0x6c>)
   1700e:	9003      	str	r0, [sp, #12]
   17010:	e9cd 4301 	strd	r4, r3, [sp, #4]
   17014:	4620      	mov	r0, r4
   17016:	4623      	mov	r3, r4
   17018:	2201      	movs	r2, #1
   1701a:	490c      	ldr	r1, [pc, #48]	; (1704c <smp_ident_info+0x70>)
   1701c:	9400      	str	r4, [sp, #0]
   1701e:	f010 f977 	bl	27310 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   17022:	2008      	movs	r0, #8
}
   17024:	b005      	add	sp, #20
   17026:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17028:	462b      	mov	r3, r5
   1702a:	342a      	adds	r4, #42	; 0x2a
   1702c:	f105 0210 	add.w	r2, r5, #16
   17030:	f853 1b04 	ldr.w	r1, [r3], #4
   17034:	4293      	cmp	r3, r2
   17036:	f844 1b04 	str.w	r1, [r4], #4
   1703a:	d1f9      	bne.n	17030 <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1703c:	4630      	mov	r0, r6
   1703e:	2109      	movs	r1, #9
   17040:	f010 f975 	bl	2732e <atomic_set_bit>
	return 0;
   17044:	2000      	movs	r0, #0
   17046:	e7ed      	b.n	17024 <smp_ident_info+0x48>
   17048:	0002e932 	.word	0x0002e932
   1704c:	0002a3d8 	.word	0x0002a3d8

00017050 <smp_encrypt_info>:
{
   17050:	b5f0      	push	{r4, r5, r6, r7, lr}
   17052:	460b      	mov	r3, r1
   17054:	4606      	mov	r6, r0
   17056:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17058:	210d      	movs	r1, #13
   1705a:	3004      	adds	r0, #4
   1705c:	f010 f900 	bl	27260 <atomic_test_bit>
   17060:	b330      	cbz	r0, 170b0 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   17062:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   17064:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   17068:	2004      	movs	r0, #4
   1706a:	f103 0790 	add.w	r7, r3, #144	; 0x90
   1706e:	463a      	mov	r2, r7
   17070:	7a19      	ldrb	r1, [r3, #8]
   17072:	f001 fc85 	bl	18980 <bt_keys_get_type>
		if (!keys) {
   17076:	4604      	mov	r4, r0
   17078:	b980      	cbnz	r0, 1709c <smp_encrypt_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1707a:	4638      	mov	r0, r7
   1707c:	f7f9 febe 	bl	10dfc <bt_addr_le_str>
   17080:	4b0e      	ldr	r3, [pc, #56]	; (170bc <smp_encrypt_info+0x6c>)
   17082:	9003      	str	r0, [sp, #12]
   17084:	e9cd 4301 	strd	r4, r3, [sp, #4]
   17088:	4620      	mov	r0, r4
   1708a:	4623      	mov	r3, r4
   1708c:	2201      	movs	r2, #1
   1708e:	490c      	ldr	r1, [pc, #48]	; (170c0 <smp_encrypt_info+0x70>)
   17090:	9400      	str	r4, [sp, #0]
   17092:	f010 f93d 	bl	27310 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   17096:	2008      	movs	r0, #8
}
   17098:	b005      	add	sp, #20
   1709a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1709c:	462b      	mov	r3, r5
   1709e:	341a      	adds	r4, #26
   170a0:	f105 0210 	add.w	r2, r5, #16
   170a4:	f853 1b04 	ldr.w	r1, [r3], #4
   170a8:	4293      	cmp	r3, r2
   170aa:	f844 1b04 	str.w	r1, [r4], #4
   170ae:	d1f9      	bne.n	170a4 <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   170b0:	4630      	mov	r0, r6
   170b2:	2107      	movs	r1, #7
   170b4:	f010 f93b 	bl	2732e <atomic_set_bit>
	return 0;
   170b8:	2000      	movs	r0, #0
   170ba:	e7ed      	b.n	17098 <smp_encrypt_info+0x48>
   170bc:	0002e932 	.word	0x0002e932
   170c0:	0002a3d8 	.word	0x0002a3d8

000170c4 <smp_send_pairing_confirm>:
{
   170c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (smp->method) {
   170c6:	7a04      	ldrb	r4, [r0, #8]
{
   170c8:	4605      	mov	r5, r0
	switch (smp->method) {
   170ca:	2c02      	cmp	r4, #2
   170cc:	d823      	bhi.n	17116 <smp_send_pairing_confirm+0x52>
   170ce:	b144      	cbz	r4, 170e2 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   170d0:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   170d4:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   170d8:	40dc      	lsrs	r4, r3
   170da:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   170de:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   170e2:	2103      	movs	r1, #3
   170e4:	4628      	mov	r0, r5
   170e6:	f010 f932 	bl	2734e <smp_create_pdu.constprop.0>
	if (!buf) {
   170ea:	4606      	mov	r6, r0
   170ec:	b308      	cbz	r0, 17132 <smp_send_pairing_confirm+0x6e>
   170ee:	2110      	movs	r1, #16
   170f0:	300c      	adds	r0, #12
   170f2:	f002 f8b7 	bl	19264 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   170f6:	9000      	str	r0, [sp, #0]
   170f8:	4816      	ldr	r0, [pc, #88]	; (17154 <smp_send_pairing_confirm+0x90>)
   170fa:	4623      	mov	r3, r4
   170fc:	6800      	ldr	r0, [r0, #0]
   170fe:	f105 0227 	add.w	r2, r5, #39	; 0x27
   17102:	f105 0157 	add.w	r1, r5, #87	; 0x57
   17106:	f010 fba4 	bl	27852 <bt_crypto_f4>
   1710a:	4604      	mov	r4, r0
   1710c:	b1b0      	cbz	r0, 1713c <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
   1710e:	4630      	mov	r0, r6
   17110:	f001 ff86 	bl	19020 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   17114:	e00d      	b.n	17132 <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   17116:	2c03      	cmp	r4, #3
   17118:	f04f 0300 	mov.w	r3, #0
   1711c:	d00c      	beq.n	17138 <smp_send_pairing_confirm+0x74>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1711e:	4a0e      	ldr	r2, [pc, #56]	; (17158 <smp_send_pairing_confirm+0x94>)
   17120:	4618      	mov	r0, r3
   17122:	e9cd 3201 	strd	r3, r2, [sp, #4]
   17126:	490d      	ldr	r1, [pc, #52]	; (1715c <smp_send_pairing_confirm+0x98>)
   17128:	2201      	movs	r2, #1
	switch (smp->method) {
   1712a:	9403      	str	r4, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1712c:	9300      	str	r3, [sp, #0]
   1712e:	f010 f8ef 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17132:	2008      	movs	r0, #8
}
   17134:	b004      	add	sp, #16
   17136:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   17138:	461c      	mov	r4, r3
   1713a:	e7d2      	b.n	170e2 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   1713c:	4602      	mov	r2, r0
   1713e:	4631      	mov	r1, r6
   17140:	4628      	mov	r0, r5
   17142:	f010 f8c8 	bl	272d6 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   17146:	1d28      	adds	r0, r5, #4
   17148:	4621      	mov	r1, r4
   1714a:	f010 f8b0 	bl	272ae <atomic_clear_bit>
	return 0;
   1714e:	4620      	mov	r0, r4
   17150:	e7f0      	b.n	17134 <smp_send_pairing_confirm+0x70>
   17152:	bf00      	nop
   17154:	20021110 	.word	0x20021110
   17158:	0002e94c 	.word	0x0002e94c
   1715c:	0002a3d8 	.word	0x0002a3d8

00017160 <smp_public_key_periph>:
{
   17160:	b5f0      	push	{r4, r5, r6, r7, lr}
   17162:	4604      	mov	r4, r0
   17164:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17166:	f7ff fe5f 	bl	16e28 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1716a:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1716c:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1716e:	210e      	movs	r1, #14
   17170:	4628      	mov	r0, r5
   17172:	f010 f875 	bl	27260 <atomic_test_bit>
   17176:	b990      	cbnz	r0, 1719e <smp_public_key_periph+0x3e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   17178:	4b51      	ldr	r3, [pc, #324]	; (172c0 <smp_public_key_periph+0x160>)
   1717a:	2220      	movs	r2, #32
   1717c:	6819      	ldr	r1, [r3, #0]
   1717e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17182:	f012 f966 	bl	29452 <memcmp>
   17186:	4603      	mov	r3, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   17188:	b948      	cbnz	r0, 1719e <smp_public_key_periph+0x3e>
		LOG_WRN("Remote public key rejected");
   1718a:	4a4e      	ldr	r2, [pc, #312]	; (172c4 <smp_public_key_periph+0x164>)
   1718c:	494e      	ldr	r1, [pc, #312]	; (172c8 <smp_public_key_periph+0x168>)
   1718e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   17192:	9000      	str	r0, [sp, #0]
   17194:	2202      	movs	r2, #2
   17196:	f010 f8bb 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1719a:	2008      	movs	r0, #8
   1719c:	e034      	b.n	17208 <smp_public_key_periph+0xa8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1719e:	210c      	movs	r1, #12
   171a0:	4620      	mov	r0, r4
   171a2:	f010 f8d4 	bl	2734e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   171a6:	4607      	mov	r7, r0
   171a8:	2800      	cmp	r0, #0
   171aa:	d0f6      	beq.n	1719a <smp_public_key_periph+0x3a>
   171ac:	2140      	movs	r1, #64	; 0x40
   171ae:	300c      	adds	r0, #12
   171b0:	f002 f858 	bl	19264 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   171b4:	4b42      	ldr	r3, [pc, #264]	; (172c0 <smp_public_key_periph+0x160>)
   171b6:	4602      	mov	r2, r0
   171b8:	681b      	ldr	r3, [r3, #0]
   171ba:	4601      	mov	r1, r0
   171bc:	f103 0020 	add.w	r0, r3, #32
   171c0:	f853 cb04 	ldr.w	ip, [r3], #4
   171c4:	4283      	cmp	r3, r0
   171c6:	f841 cb04 	str.w	ip, [r1], #4
   171ca:	d1f9      	bne.n	171c0 <smp_public_key_periph+0x60>
   171cc:	3220      	adds	r2, #32
   171ce:	f103 0120 	add.w	r1, r3, #32
   171d2:	f853 0b04 	ldr.w	r0, [r3], #4
   171d6:	428b      	cmp	r3, r1
   171d8:	f842 0b04 	str.w	r0, [r2], #4
   171dc:	d1f9      	bne.n	171d2 <smp_public_key_periph+0x72>
	smp_send(smp, req_buf, NULL, NULL);
   171de:	2200      	movs	r2, #0
   171e0:	4639      	mov	r1, r7
   171e2:	4620      	mov	r0, r4
   171e4:	f010 f877 	bl	272d6 <smp_send.constprop.0>
	switch (smp->method) {
   171e8:	7a23      	ldrb	r3, [r4, #8]
   171ea:	2b05      	cmp	r3, #5
   171ec:	d85a      	bhi.n	172a4 <smp_public_key_periph+0x144>
   171ee:	e8df f003 	tbb	[pc, r3]
   171f2:	3903      	.short	0x3903
   171f4:	5659030d 	.word	0x5659030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   171f8:	2104      	movs	r1, #4
   171fa:	4620      	mov	r0, r4
   171fc:	f010 f897 	bl	2732e <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   17200:	f7ff ff60 	bl	170c4 <smp_send_pairing_confirm>
		if (err) {
   17204:	2800      	cmp	r0, #0
   17206:	d03c      	beq.n	17282 <smp_public_key_periph+0x122>
}
   17208:	b005      	add	sp, #20
   1720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1720c:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1720e:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17212:	f7ff fe09 	bl	16e28 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   17216:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17218:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1721a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1721e:	f7fc f97b 	bl	13518 <bt_rand>
   17222:	2800      	cmp	r0, #0
   17224:	d1b9      	bne.n	1719a <smp_public_key_periph+0x3a>
		smp->passkey %= 1000000;
   17226:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1722a:	4a28      	ldr	r2, [pc, #160]	; (172cc <smp_public_key_periph+0x16c>)
	smp->passkey_round = 0U;
   1722c:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   17230:	fbb3 f1f2 	udiv	r1, r3, r2
   17234:	fb02 3311 	mls	r3, r2, r1, r3
   17238:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1723c:	b156      	cbz	r6, 17254 <smp_public_key_periph+0xf4>
   1723e:	6833      	ldr	r3, [r6, #0]
   17240:	b143      	cbz	r3, 17254 <smp_public_key_periph+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   17242:	210b      	movs	r1, #11
   17244:	4628      	mov	r0, r5
   17246:	f010 f872 	bl	2732e <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1724a:	4638      	mov	r0, r7
   1724c:	6833      	ldr	r3, [r6, #0]
   1724e:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   17252:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   17254:	2103      	movs	r1, #3
   17256:	4620      	mov	r0, r4
   17258:	f010 f869 	bl	2732e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1725c:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1725e:	f010 f866 	bl	2732e <atomic_set_bit>
		break;
   17262:	e00e      	b.n	17282 <smp_public_key_periph+0x122>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   17264:	4620      	mov	r0, r4
   17266:	2103      	movs	r1, #3
   17268:	f010 f861 	bl	2732e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1726c:	210e      	movs	r1, #14
   1726e:	f010 f85e 	bl	2732e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17272:	4628      	mov	r0, r5
   17274:	210a      	movs	r1, #10
   17276:	f010 f85a 	bl	2732e <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1727a:	6873      	ldr	r3, [r6, #4]
   1727c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17280:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   17282:	4628      	mov	r0, r5
   17284:	2107      	movs	r1, #7
   17286:	f010 f852 	bl	2732e <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1728a:	2008      	movs	r0, #8
   1728c:	f7ff fdbe 	bl	16e0c <smp_find>
   17290:	b9a0      	cbnz	r0, 172bc <smp_public_key_periph+0x15c>
		return smp_dhkey_generate(smp);
   17292:	4620      	mov	r0, r4
}
   17294:	b005      	add	sp, #20
   17296:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   1729a:	f7ff be79 	b.w	16f90 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1729e:	2104      	movs	r1, #4
   172a0:	4620      	mov	r0, r4
   172a2:	e7dc      	b.n	1725e <smp_public_key_periph+0xfe>
	switch (smp->method) {
   172a4:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   172a6:	4b0a      	ldr	r3, [pc, #40]	; (172d0 <smp_public_key_periph+0x170>)
   172a8:	2201      	movs	r2, #1
   172aa:	9302      	str	r3, [sp, #8]
   172ac:	2300      	movs	r3, #0
   172ae:	4906      	ldr	r1, [pc, #24]	; (172c8 <smp_public_key_periph+0x168>)
   172b0:	4618      	mov	r0, r3
   172b2:	e9cd 3300 	strd	r3, r3, [sp]
   172b6:	f010 f82b 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   172ba:	e76e      	b.n	1719a <smp_public_key_periph+0x3a>
	return 0;
   172bc:	2000      	movs	r0, #0
   172be:	e7a3      	b.n	17208 <smp_public_key_periph+0xa8>
   172c0:	20021110 	.word	0x20021110
   172c4:	0002e968 	.word	0x0002e968
   172c8:	0002a3d8 	.word	0x0002a3d8
   172cc:	000f4240 	.word	0x000f4240
   172d0:	0002e94c 	.word	0x0002e94c

000172d4 <smp_public_key>:
{
   172d4:	b530      	push	{r4, r5, lr}
   172d6:	4604      	mov	r4, r0
   172d8:	460d      	mov	r5, r1
   172da:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   172dc:	f7ff fda4 	bl	16e28 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   172e0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   172e4:	4602      	mov	r2, r0
   172e6:	68eb      	ldr	r3, [r5, #12]
   172e8:	f103 0120 	add.w	r1, r3, #32
   172ec:	f853 5b04 	ldr.w	r5, [r3], #4
   172f0:	428b      	cmp	r3, r1
   172f2:	f842 5b04 	str.w	r5, [r2], #4
   172f6:	d1f9      	bne.n	172ec <smp_public_key+0x18>
   172f8:	f104 0277 	add.w	r2, r4, #119	; 0x77
   172fc:	f103 0120 	add.w	r1, r3, #32
   17300:	f853 5b04 	ldr.w	r5, [r3], #4
   17304:	428b      	cmp	r3, r1
   17306:	f842 5b04 	str.w	r5, [r2], #4
   1730a:	d1f9      	bne.n	17300 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1730c:	f7fc f922 	bl	13554 <bt_pub_key_is_debug>
   17310:	b940      	cbnz	r0, 17324 <smp_public_key+0x50>
	if (!sc_public_key) {
   17312:	4b1c      	ldr	r3, [pc, #112]	; (17384 <smp_public_key+0xb0>)
   17314:	681d      	ldr	r5, [r3, #0]
   17316:	bb75      	cbnz	r5, 17376 <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   17318:	1d20      	adds	r0, r4, #4
   1731a:	2106      	movs	r1, #6
   1731c:	f010 f807 	bl	2732e <atomic_set_bit>
	return 0;
   17320:	4628      	mov	r0, r5
		return 0;
   17322:	e026      	b.n	17372 <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   17324:	4b18      	ldr	r3, [pc, #96]	; (17388 <smp_public_key+0xb4>)
   17326:	2203      	movs	r2, #3
   17328:	9302      	str	r3, [sp, #8]
   1732a:	2300      	movs	r3, #0
   1732c:	4917      	ldr	r1, [pc, #92]	; (1738c <smp_public_key+0xb8>)
   1732e:	4618      	mov	r0, r3
   17330:	e9cd 3300 	strd	r3, r3, [sp]
   17334:	f00f ffec 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   17338:	210e      	movs	r1, #14
   1733a:	1d20      	adds	r0, r4, #4
   1733c:	f00f fff7 	bl	2732e <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   17340:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   17344:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   17348:	b933      	cbnz	r3, 17358 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1734a:	7a28      	ldrb	r0, [r5, #8]
   1734c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   17350:	f001 f9fc 	bl	1874c <bt_keys_get_addr>
   17354:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   17358:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   1735c:	2b00      	cmp	r3, #0
   1735e:	d0d8      	beq.n	17312 <smp_public_key+0x3e>
   17360:	89da      	ldrh	r2, [r3, #14]
   17362:	f002 0224 	and.w	r2, r2, #36	; 0x24
   17366:	2a00      	cmp	r2, #0
   17368:	d0d3      	beq.n	17312 <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1736a:	7b5b      	ldrb	r3, [r3, #13]
   1736c:	079b      	lsls	r3, r3, #30
   1736e:	d4d0      	bmi.n	17312 <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   17370:	2003      	movs	r0, #3
}
   17372:	b005      	add	sp, #20
   17374:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   17376:	4620      	mov	r0, r4
}
   17378:	b005      	add	sp, #20
   1737a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   1737e:	f7ff beef 	b.w	17160 <smp_public_key_periph>
   17382:	bf00      	nop
   17384:	20021110 	.word	0x20021110
   17388:	0002e983 	.word	0x0002e983
   1738c:	0002a3d8 	.word	0x0002a3d8

00017390 <smp_pairing_req>:
{
   17390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17394:	460d      	mov	r5, r1
   17396:	b086      	sub	sp, #24
   17398:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1739a:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1739e:	f7ff fd43 	bl	16e28 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   173a2:	f8d5 800c 	ldr.w	r8, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   173a6:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   173a8:	f898 3003 	ldrb.w	r3, [r8, #3]
   173ac:	3b07      	subs	r3, #7
   173ae:	2b09      	cmp	r3, #9
   173b0:	d903      	bls.n	173ba <smp_pairing_req+0x2a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   173b2:	2006      	movs	r0, #6
}
   173b4:	b006      	add	sp, #24
   173b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   173ba:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   173be:	b15b      	cbz	r3, 173d8 <smp_pairing_req+0x48>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   173c0:	1d25      	adds	r5, r4, #4
   173c2:	210f      	movs	r1, #15
   173c4:	4628      	mov	r0, r5
   173c6:	f00f ff4b 	bl	27260 <atomic_test_bit>
   173ca:	b980      	cbnz	r0, 173ee <smp_pairing_req+0x5e>
		int ret = smp_init(smp);
   173cc:	4620      	mov	r0, r4
   173ce:	f7ff fdc3 	bl	16f58 <smp_init>
		if (ret) {
   173d2:	b160      	cbz	r0, 173ee <smp_pairing_req+0x5e>
			return ret;
   173d4:	b2c0      	uxtb	r0, r0
   173d6:	e7ed      	b.n	173b4 <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   173d8:	7a30      	ldrb	r0, [r6, #8]
   173da:	f106 0190 	add.w	r1, r6, #144	; 0x90
   173de:	f001 f9b5 	bl	1874c <bt_keys_get_addr>
   173e2:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   173e6:	2800      	cmp	r0, #0
   173e8:	d1ea      	bne.n	173c0 <smp_pairing_req+0x30>
			return BT_SMP_ERR_UNSPECIFIED;
   173ea:	2008      	movs	r0, #8
   173ec:	e7e2      	b.n	173b4 <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   173ee:	2301      	movs	r3, #1
   173f0:	7263      	strb	r3, [r4, #9]
   173f2:	f8d8 3000 	ldr.w	r3, [r8]
	rsp->auth_req = get_auth(smp, req->auth_req);
   173f6:	4620      	mov	r0, r4
   173f8:	f8c4 300a 	str.w	r3, [r4, #10]
   173fc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   17400:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   17402:	2302      	movs	r3, #2
   17404:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   17406:	f898 1002 	ldrb.w	r1, [r8, #2]
   1740a:	f7ff fd49 	bl	16ea0 <get_auth>
   1740e:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   17410:	4620      	mov	r0, r4
   17412:	f7ff fd1f 	bl	16e54 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   17416:	4ba9      	ldr	r3, [pc, #676]	; (176bc <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   17418:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1741a:	781b      	ldrb	r3, [r3, #0]
   1741c:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1741e:	2310      	movs	r3, #16
   17420:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   17422:	f898 3004 	ldrb.w	r3, [r8, #4]
   17426:	f003 0303 	and.w	r3, r3, #3
   1742a:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1742c:	f898 3005 	ldrb.w	r3, [r8, #5]
   17430:	f003 0301 	and.w	r3, r3, #1
   17434:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   17436:	7ce3      	ldrb	r3, [r4, #19]
   17438:	071b      	lsls	r3, r3, #28
   1743a:	d50d      	bpl.n	17458 <smp_pairing_req+0xc8>
   1743c:	f898 3002 	ldrb.w	r3, [r8, #2]
   17440:	0718      	lsls	r0, r3, #28
   17442:	d509      	bpl.n	17458 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   17444:	2105      	movs	r1, #5
   17446:	4628      	mov	r0, r5
   17448:	f00f ff71 	bl	2732e <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1744c:	7d63      	ldrb	r3, [r4, #21]
   1744e:	f003 0302 	and.w	r3, r3, #2
   17452:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   17454:	2300      	movs	r3, #0
   17456:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   17458:	7ce3      	ldrb	r3, [r4, #19]
   1745a:	0699      	lsls	r1, r3, #26
   1745c:	d507      	bpl.n	1746e <smp_pairing_req+0xde>
   1745e:	f898 3002 	ldrb.w	r3, [r8, #2]
   17462:	069a      	lsls	r2, r3, #26
   17464:	d503      	bpl.n	1746e <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   17466:	2114      	movs	r1, #20
   17468:	4628      	mov	r0, r5
   1746a:	f00f ff60 	bl	2732e <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1746e:	7da3      	ldrb	r3, [r4, #22]
   17470:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   17474:	7d63      	ldrb	r3, [r4, #21]
   17476:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1747a:	7ce3      	ldrb	r3, [r4, #19]
   1747c:	07db      	lsls	r3, r3, #31
   1747e:	d507      	bpl.n	17490 <smp_pairing_req+0x100>
   17480:	f898 3002 	ldrb.w	r3, [r8, #2]
   17484:	07d8      	lsls	r0, r3, #31
   17486:	d503      	bpl.n	17490 <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   17488:	210d      	movs	r1, #13
   1748a:	4628      	mov	r0, r5
   1748c:	f00f ff4f 	bl	2732e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   17490:	2103      	movs	r1, #3
   17492:	4628      	mov	r0, r5
   17494:	f00f ff4b 	bl	2732e <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17498:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1749a:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1749e:	f00f fedf 	bl	27260 <atomic_test_bit>
   174a2:	bb40      	cbnz	r0, 174f6 <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   174a4:	f1b8 0f04 	cmp.w	r8, #4
   174a8:	d845      	bhi.n	17536 <smp_pairing_req+0x1a6>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   174aa:	7ae3      	ldrb	r3, [r4, #11]
   174ac:	7ca2      	ldrb	r2, [r4, #18]
   174ae:	4013      	ands	r3, r2
   174b0:	07d9      	lsls	r1, r3, #31
   174b2:	d43e      	bmi.n	17532 <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   174b4:	7b21      	ldrb	r1, [r4, #12]
   174b6:	7ce3      	ldrb	r3, [r4, #19]
   174b8:	4319      	orrs	r1, r3
   174ba:	f011 0104 	ands.w	r1, r1, #4
   174be:	d011      	beq.n	174e4 <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   174c0:	4620      	mov	r0, r4
   174c2:	f7ff fcc7 	bl	16e54 <get_io_capa>
   174c6:	4b7e      	ldr	r3, [pc, #504]	; (176c0 <smp_pairing_req+0x330>)
   174c8:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   174cc:	4498      	add	r8, r3
   174ce:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   174d2:	2904      	cmp	r1, #4
   174d4:	d106      	bne.n	174e4 <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   174d6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   174da:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   174dc:	2b00      	cmp	r3, #0
   174de:	bf14      	ite	ne
   174e0:	2101      	movne	r1, #1
   174e2:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   174e4:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   174e6:	4620      	mov	r0, r4
   174e8:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   174ec:	f00f febe 	bl	2726c <update_keys_check>
   174f0:	bb18      	cbnz	r0, 1753a <smp_pairing_req+0x1aa>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   174f2:	2003      	movs	r0, #3
   174f4:	e75e      	b.n	173b4 <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   174f6:	7b23      	ldrb	r3, [r4, #12]
   174f8:	7ce0      	ldrb	r0, [r4, #19]
   174fa:	ea03 0200 	and.w	r2, r3, r0
   174fe:	0712      	lsls	r2, r2, #28
   17500:	d506      	bpl.n	17510 <smp_pairing_req+0x180>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   17502:	7ae2      	ldrb	r2, [r4, #11]
   17504:	f894 c012 	ldrb.w	ip, [r4, #18]
   17508:	ea42 020c 	orr.w	r2, r2, ip
   1750c:	07d2      	lsls	r2, r2, #31
   1750e:	d4e9      	bmi.n	174e4 <smp_pairing_req+0x154>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   17510:	f1b8 0f04 	cmp.w	r8, #4
   17514:	d80f      	bhi.n	17536 <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   17516:	ea43 0100 	orr.w	r1, r3, r0
   1751a:	f011 0104 	ands.w	r1, r1, #4
   1751e:	d0e1      	beq.n	174e4 <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   17520:	4620      	mov	r0, r4
   17522:	f7ff fc97 	bl	16e54 <get_io_capa>
   17526:	4b67      	ldr	r3, [pc, #412]	; (176c4 <smp_pairing_req+0x334>)
   17528:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1752c:	4443      	add	r3, r8
   1752e:	5c19      	ldrb	r1, [r3, r0]
   17530:	e7d8      	b.n	174e4 <smp_pairing_req+0x154>
		return LEGACY_OOB;
   17532:	2106      	movs	r1, #6
   17534:	e7d6      	b.n	174e4 <smp_pairing_req+0x154>
		return JUST_WORKS;
   17536:	2100      	movs	r1, #0
   17538:	e7d4      	b.n	174e4 <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1753a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1753e:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   17540:	2b03      	cmp	r3, #3
   17542:	d03c      	beq.n	175be <smp_pairing_req+0x22e>
   17544:	d82a      	bhi.n	1759c <smp_pairing_req+0x20c>
   17546:	3b01      	subs	r3, #1
   17548:	2b01      	cmp	r3, #1
   1754a:	f63f af4e 	bhi.w	173ea <smp_pairing_req+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1754e:	2105      	movs	r1, #5
   17550:	4628      	mov	r0, r5
   17552:	f00f fe85 	bl	27260 <atomic_test_bit>
   17556:	2800      	cmp	r0, #0
   17558:	f040 80be 	bne.w	176d8 <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1755c:	4620      	mov	r0, r4
   1755e:	f7ff fc63 	bl	16e28 <latch_auth_cb>
   17562:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17564:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   17566:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1756a:	f7ff fc5d 	bl	16e28 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1756e:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17572:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   17574:	f898 0008 	ldrb.w	r0, [r8, #8]
   17578:	f001 f9c6 	bl	18908 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1757c:	7a23      	ldrb	r3, [r4, #8]
   1757e:	b310      	cbz	r0, 175c6 <smp_pairing_req+0x236>
   17580:	7b42      	ldrb	r2, [r0, #13]
   17582:	07d2      	lsls	r2, r2, #31
   17584:	d51f      	bpl.n	175c6 <smp_pairing_req+0x236>
   17586:	b9f3      	cbnz	r3, 175c6 <smp_pairing_req+0x236>
		LOG_ERR("JustWorks failed, authenticated keys present");
   17588:	4a4f      	ldr	r2, [pc, #316]	; (176c8 <smp_pairing_req+0x338>)
   1758a:	4618      	mov	r0, r3
   1758c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   17590:	494e      	ldr	r1, [pc, #312]	; (176cc <smp_pairing_req+0x33c>)
   17592:	2201      	movs	r2, #1
   17594:	9300      	str	r3, [sp, #0]
   17596:	f00f febb 	bl	27310 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   1759a:	e726      	b.n	173ea <smp_pairing_req+0x5a>
	switch (sec) {
   1759c:	2b04      	cmp	r3, #4
   1759e:	f47f af24 	bne.w	173ea <smp_pairing_req+0x5a>
	return MIN(req->max_key_size, rsp->max_key_size);
   175a2:	7d23      	ldrb	r3, [r4, #20]
   175a4:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   175a6:	4293      	cmp	r3, r2
   175a8:	bf28      	it	cs
   175aa:	4613      	movcs	r3, r2
   175ac:	2b10      	cmp	r3, #16
   175ae:	f47f af00 	bne.w	173b2 <smp_pairing_req+0x22>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   175b2:	2105      	movs	r1, #5
   175b4:	4628      	mov	r0, r5
   175b6:	f00f fe53 	bl	27260 <atomic_test_bit>
   175ba:	2800      	cmp	r0, #0
   175bc:	d099      	beq.n	174f2 <smp_pairing_req+0x162>
		if (smp->method == JUST_WORKS) {
   175be:	7a23      	ldrb	r3, [r4, #8]
   175c0:	2b00      	cmp	r3, #0
   175c2:	d1c4      	bne.n	1754e <smp_pairing_req+0x1be>
   175c4:	e795      	b.n	174f2 <smp_pairing_req+0x162>
	switch (smp->method) {
   175c6:	2b06      	cmp	r3, #6
   175c8:	d85d      	bhi.n	17686 <smp_pairing_req+0x2f6>
   175ca:	e8df f003 	tbb	[pc, r3]
   175ce:	5418      	.short	0x5418
   175d0:	5c5c5c2d 	.word	0x5c5c5c2d
   175d4:	04          	.byte	0x04
   175d5:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   175d6:	2e00      	cmp	r6, #0
   175d8:	d061      	beq.n	1769e <smp_pairing_req+0x30e>
   175da:	68f3      	ldr	r3, [r6, #12]
   175dc:	2b00      	cmp	r3, #0
   175de:	d05e      	beq.n	1769e <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   175e0:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   175e2:	210a      	movs	r1, #10
   175e4:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   175e6:	f8ad 3014 	strh.w	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   175ea:	f00f fea0 	bl	2732e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   175ee:	68f3      	ldr	r3, [r6, #12]
   175f0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   175f4:	a905      	add	r1, sp, #20
   175f6:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   175f8:	7a23      	ldrb	r3, [r4, #8]
   175fa:	2b00      	cmp	r3, #0
   175fc:	d151      	bne.n	176a2 <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   175fe:	210f      	movs	r1, #15
   17600:	4628      	mov	r0, r5
   17602:	f00f fe2d 	bl	27260 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   17606:	2800      	cmp	r0, #0
   17608:	d14b      	bne.n	176a2 <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1760a:	2f00      	cmp	r7, #0
   1760c:	d049      	beq.n	176a2 <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1760e:	697b      	ldr	r3, [r7, #20]
   17610:	2b00      	cmp	r3, #0
   17612:	d046      	beq.n	176a2 <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17614:	4628      	mov	r0, r5
   17616:	210a      	movs	r1, #10
   17618:	f00f fe89 	bl	2732e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1761c:	697b      	ldr	r3, [r7, #20]
   1761e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   17622:	4798      	blx	r3
		return 0;
   17624:	2000      	movs	r0, #0
   17626:	e6c5      	b.n	173b4 <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   17628:	2104      	movs	r1, #4
   1762a:	a805      	add	r0, sp, #20
   1762c:	f7fb ff74 	bl	13518 <bt_rand>
   17630:	2800      	cmp	r0, #0
   17632:	f47f aeda 	bne.w	173ea <smp_pairing_req+0x5a>
			passkey %= 1000000;
   17636:	9b05      	ldr	r3, [sp, #20]
   17638:	4a25      	ldr	r2, [pc, #148]	; (176d0 <smp_pairing_req+0x340>)
   1763a:	fbb3 f1f2 	udiv	r1, r3, r2
   1763e:	fb02 3311 	mls	r3, r2, r1, r3
   17642:	9305      	str	r3, [sp, #20]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   17644:	b14e      	cbz	r6, 1765a <smp_pairing_req+0x2ca>
   17646:	6833      	ldr	r3, [r6, #0]
   17648:	b13b      	cbz	r3, 1765a <smp_pairing_req+0x2ca>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1764a:	210b      	movs	r1, #11
   1764c:	4628      	mov	r0, r5
   1764e:	f00f fe6e 	bl	2732e <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   17652:	4640      	mov	r0, r8
   17654:	6833      	ldr	r3, [r6, #0]
   17656:	9905      	ldr	r1, [sp, #20]
   17658:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1765a:	9b05      	ldr	r3, [sp, #20]
	dst[1] = val >> 8;
   1765c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   17660:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   17664:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   17666:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1766a:	0a1b      	lsrs	r3, r3, #8
   1766c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   17670:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   17674:	e7c0      	b.n	175f8 <smp_pairing_req+0x268>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17676:	4628      	mov	r0, r5
   17678:	210a      	movs	r1, #10
   1767a:	f00f fe58 	bl	2732e <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1767e:	4640      	mov	r0, r8
   17680:	6873      	ldr	r3, [r6, #4]
   17682:	4798      	blx	r3
	if (ret) {
   17684:	e7b8      	b.n	175f8 <smp_pairing_req+0x268>
	switch (smp->method) {
   17686:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17688:	4b12      	ldr	r3, [pc, #72]	; (176d4 <smp_pairing_req+0x344>)
   1768a:	2201      	movs	r2, #1
   1768c:	9302      	str	r3, [sp, #8]
   1768e:	2300      	movs	r3, #0
   17690:	490e      	ldr	r1, [pc, #56]	; (176cc <smp_pairing_req+0x33c>)
   17692:	4618      	mov	r0, r3
   17694:	e9cd 3300 	strd	r3, r3, [sp]
   17698:	f00f fe3a 	bl	27310 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   1769c:	e6a5      	b.n	173ea <smp_pairing_req+0x5a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1769e:	2002      	movs	r0, #2
   176a0:	e688      	b.n	173b4 <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   176a2:	2103      	movs	r1, #3
   176a4:	4620      	mov	r0, r4
   176a6:	f00f fe42 	bl	2732e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   176aa:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   176ac:	f00f fe3f 	bl	2732e <atomic_set_bit>
}
   176b0:	b006      	add	sp, #24
   176b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   176b6:	f00f be69 	b.w	2738c <send_pairing_rsp>
   176ba:	bf00      	nop
   176bc:	20021dc0 	.word	0x20021dc0
   176c0:	0002ed24 	.word	0x0002ed24
   176c4:	0002ed0b 	.word	0x0002ed0b
   176c8:	0002e9a4 	.word	0x0002e9a4
   176cc:	0002a3d8 	.word	0x0002a3d8
   176d0:	000f4240 	.word	0x000f4240
   176d4:	0002e94c 	.word	0x0002e94c
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   176d8:	7a23      	ldrb	r3, [r4, #8]
   176da:	b973      	cbnz	r3, 176fa <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   176dc:	210f      	movs	r1, #15
   176de:	4628      	mov	r0, r5
   176e0:	f00f fdbe 	bl	27260 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   176e4:	b948      	cbnz	r0, 176fa <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   176e6:	b147      	cbz	r7, 176fa <smp_pairing_req+0x36a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   176e8:	697b      	ldr	r3, [r7, #20]
   176ea:	b133      	cbz	r3, 176fa <smp_pairing_req+0x36a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   176ec:	4628      	mov	r0, r5
   176ee:	210a      	movs	r1, #10
   176f0:	f00f fe1d 	bl	2732e <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   176f4:	4630      	mov	r0, r6
   176f6:	697b      	ldr	r3, [r7, #20]
   176f8:	e793      	b.n	17622 <smp_pairing_req+0x292>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   176fa:	210c      	movs	r1, #12
   176fc:	4620      	mov	r0, r4
   176fe:	e7d5      	b.n	176ac <smp_pairing_req+0x31c>

00017700 <compute_and_check_and_send_periph_dhcheck>:
{
   17700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17704:	4604      	mov	r4, r0
   17706:	b090      	sub	sp, #64	; 0x40
	(void)memset(r, 0, sizeof(r));
   17708:	ad0c      	add	r5, sp, #48	; 0x30
   1770a:	2210      	movs	r2, #16
   1770c:	2100      	movs	r1, #0
   1770e:	4628      	mov	r0, r5
   17710:	f011 fee9 	bl	294e6 <memset>
	switch (smp->method) {
   17714:	7a23      	ldrb	r3, [r4, #8]
   17716:	2b05      	cmp	r3, #5
   17718:	d83a      	bhi.n	17790 <compute_and_check_and_send_periph_dhcheck+0x90>
   1771a:	e8df f003 	tbb	[pc, r3]
   1771e:	0306      	.short	0x0306
   17720:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   17724:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   17728:	930c      	str	r3, [sp, #48]	; 0x30
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1772a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1772e:	f104 0247 	add.w	r2, r4, #71	; 0x47
   17732:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   17736:	e9cd 7201 	strd	r7, r2, [sp, #4]
   1773a:	f104 0837 	add.w	r8, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1773e:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   17742:	f104 0927 	add.w	r9, r4, #39	; 0x27
   17746:	9200      	str	r2, [sp, #0]
   17748:	4641      	mov	r1, r8
   1774a:	464a      	mov	r2, r9
   1774c:	3397      	adds	r3, #151	; 0x97
   1774e:	f104 0097 	add.w	r0, r4, #151	; 0x97
   17752:	f001 f987 	bl	18a64 <bt_crypto_f5>
   17756:	4682      	mov	sl, r0
   17758:	b348      	cbz	r0, 177ae <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   1775a:	4b4e      	ldr	r3, [pc, #312]	; (17894 <compute_and_check_and_send_periph_dhcheck+0x194>)
   1775c:	9302      	str	r3, [sp, #8]
   1775e:	2300      	movs	r3, #0
   17760:	e9cd 3300 	strd	r3, r3, [sp]
   17764:	2201      	movs	r2, #1
   17766:	4618      	mov	r0, r3
   17768:	494b      	ldr	r1, [pc, #300]	; (17898 <compute_and_check_and_send_periph_dhcheck+0x198>)
   1776a:	f00f fdd1 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1776e:	e01a      	b.n	177a6 <compute_and_check_and_send_periph_dhcheck+0xa6>
		if (smp->oobd_remote) {
   17770:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   17774:	2b00      	cmp	r3, #0
   17776:	d0d8      	beq.n	1772a <compute_and_check_and_send_periph_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   17778:	462e      	mov	r6, r5
   1777a:	f103 0710 	add.w	r7, r3, #16
   1777e:	4632      	mov	r2, r6
   17780:	6818      	ldr	r0, [r3, #0]
   17782:	6859      	ldr	r1, [r3, #4]
   17784:	3308      	adds	r3, #8
   17786:	c203      	stmia	r2!, {r0, r1}
   17788:	42bb      	cmp	r3, r7
   1778a:	4616      	mov	r6, r2
   1778c:	d1f7      	bne.n	1777e <compute_and_check_and_send_periph_dhcheck+0x7e>
   1778e:	e7cc      	b.n	1772a <compute_and_check_and_send_periph_dhcheck+0x2a>
	switch (smp->method) {
   17790:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17792:	4b42      	ldr	r3, [pc, #264]	; (1789c <compute_and_check_and_send_periph_dhcheck+0x19c>)
   17794:	2201      	movs	r2, #1
   17796:	9302      	str	r3, [sp, #8]
   17798:	2300      	movs	r3, #0
   1779a:	493f      	ldr	r1, [pc, #252]	; (17898 <compute_and_check_and_send_periph_dhcheck+0x198>)
   1779c:	4618      	mov	r0, r3
   1779e:	e9cd 3300 	strd	r3, r3, [sp]
   177a2:	f00f fdb5 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   177a6:	2008      	movs	r0, #8
}
   177a8:	b010      	add	sp, #64	; 0x40
   177aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   177ae:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   177b2:	ae08      	add	r6, sp, #32
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   177b4:	f103 0297 	add.w	r2, r3, #151	; 0x97
   177b8:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   177ba:	9301      	str	r3, [sp, #4]
   177bc:	f104 0311 	add.w	r3, r4, #17
   177c0:	9202      	str	r2, [sp, #8]
   177c2:	9300      	str	r3, [sp, #0]
   177c4:	4642      	mov	r2, r8
   177c6:	462b      	mov	r3, r5
   177c8:	4649      	mov	r1, r9
   177ca:	4638      	mov	r0, r7
   177cc:	9603      	str	r6, [sp, #12]
   177ce:	f010 f865 	bl	2789c <bt_crypto_f6>
   177d2:	b130      	cbz	r0, 177e2 <compute_and_check_and_send_periph_dhcheck+0xe2>
		LOG_ERR("Calculate local DHKey check failed");
   177d4:	4b32      	ldr	r3, [pc, #200]	; (178a0 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   177d6:	f8cd a000 	str.w	sl, [sp]
   177da:	e9cd a301 	strd	sl, r3, [sp, #4]
   177de:	4653      	mov	r3, sl
   177e0:	e7c0      	b.n	17764 <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   177e2:	7a23      	ldrb	r3, [r4, #8]
   177e4:	2b05      	cmp	r3, #5
   177e6:	d10e      	bne.n	17806 <compute_and_check_and_send_periph_dhcheck+0x106>
		if (smp->oobd_local) {
   177e8:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   177ec:	b311      	cbz	r1, 17834 <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   177ee:	460b      	mov	r3, r1
   177f0:	46ac      	mov	ip, r5
   177f2:	f101 0e10 	add.w	lr, r1, #16
   177f6:	4662      	mov	r2, ip
   177f8:	6818      	ldr	r0, [r3, #0]
   177fa:	6859      	ldr	r1, [r3, #4]
   177fc:	3308      	adds	r3, #8
   177fe:	c203      	stmia	r2!, {r0, r1}
   17800:	4573      	cmp	r3, lr
   17802:	4694      	mov	ip, r2
   17804:	d1f7      	bne.n	177f6 <compute_and_check_and_send_periph_dhcheck+0xf6>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   17806:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1780a:	f10d 0a10 	add.w	sl, sp, #16
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1780e:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   17812:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   17814:	9301      	str	r3, [sp, #4]
   17816:	f104 030a 	add.w	r3, r4, #10
   1781a:	9202      	str	r2, [sp, #8]
   1781c:	9300      	str	r3, [sp, #0]
   1781e:	464a      	mov	r2, r9
   17820:	462b      	mov	r3, r5
   17822:	4641      	mov	r1, r8
   17824:	4638      	mov	r0, r7
   17826:	f8cd a00c 	str.w	sl, [sp, #12]
   1782a:	f010 f837 	bl	2789c <bt_crypto_f6>
   1782e:	b130      	cbz	r0, 1783e <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   17830:	4b1c      	ldr	r3, [pc, #112]	; (178a4 <compute_and_check_and_send_periph_dhcheck+0x1a4>)
   17832:	e793      	b.n	1775c <compute_and_check_and_send_periph_dhcheck+0x5c>
			memset(r, 0, sizeof(r));
   17834:	2210      	movs	r2, #16
   17836:	4628      	mov	r0, r5
   17838:	f011 fe55 	bl	294e6 <memset>
   1783c:	e7e3      	b.n	17806 <compute_and_check_and_send_periph_dhcheck+0x106>
	if (memcmp(smp->e, re, 16)) {
   1783e:	2210      	movs	r2, #16
   17840:	4651      	mov	r1, sl
   17842:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   17846:	f011 fe04 	bl	29452 <memcmp>
   1784a:	bb00      	cbnz	r0, 1788e <compute_and_check_and_send_periph_dhcheck+0x18e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1784c:	210d      	movs	r1, #13
   1784e:	4620      	mov	r0, r4
   17850:	f00f fd7d 	bl	2734e <smp_create_pdu.constprop.0>
	if (!buf) {
   17854:	4607      	mov	r7, r0
   17856:	2800      	cmp	r0, #0
   17858:	d0a5      	beq.n	177a6 <compute_and_check_and_send_periph_dhcheck+0xa6>
   1785a:	2110      	movs	r1, #16
   1785c:	300c      	adds	r0, #12
   1785e:	f001 fd01 	bl	19264 <net_buf_simple_add>
   17862:	4632      	mov	r2, r6
   17864:	4603      	mov	r3, r0
   17866:	4616      	mov	r6, r2
   17868:	ce03      	ldmia	r6!, {r0, r1}
   1786a:	42ae      	cmp	r6, r5
   1786c:	6018      	str	r0, [r3, #0]
   1786e:	6059      	str	r1, [r3, #4]
   17870:	4632      	mov	r2, r6
   17872:	f103 0308 	add.w	r3, r3, #8
   17876:	d1f6      	bne.n	17866 <compute_and_check_and_send_periph_dhcheck+0x166>
	smp_send(smp, buf, NULL, NULL);
   17878:	2200      	movs	r2, #0
   1787a:	4639      	mov	r1, r7
   1787c:	4620      	mov	r0, r4
   1787e:	f00f fd2a 	bl	272d6 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17882:	1d20      	adds	r0, r4, #4
   17884:	2101      	movs	r1, #1
   17886:	f00f fd52 	bl	2732e <atomic_set_bit>
	return 0;
   1788a:	2000      	movs	r0, #0
   1788c:	e78c      	b.n	177a8 <compute_and_check_and_send_periph_dhcheck+0xa8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1788e:	200b      	movs	r0, #11
   17890:	e78a      	b.n	177a8 <compute_and_check_and_send_periph_dhcheck+0xa8>
   17892:	bf00      	nop
   17894:	0002e9d1 	.word	0x0002e9d1
   17898:	0002a3d8 	.word	0x0002a3d8
   1789c:	0002e94c 	.word	0x0002e94c
   178a0:	0002e9e6 	.word	0x0002e9e6
   178a4:	0002ea09 	.word	0x0002ea09

000178a8 <bt_smp_connected>:
{
   178a8:	b538      	push	{r3, r4, r5, lr}
   178aa:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   178ac:	4908      	ldr	r1, [pc, #32]	; (178d0 <bt_smp_connected+0x28>)
   178ae:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   178b2:	3094      	adds	r0, #148	; 0x94
   178b4:	f008 fd96 	bl	203e4 <k_work_init_delayable>
	smp_reset(smp);
   178b8:	4628      	mov	r0, r5
   178ba:	f00f fde1 	bl	27480 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   178be:	4b05      	ldr	r3, [pc, #20]	; (178d4 <bt_smp_connected+0x2c>)
   178c0:	34c4      	adds	r4, #196	; 0xc4
   178c2:	e8d4 2fef 	ldaex	r2, [r4]
   178c6:	e8c4 3fe1 	stlex	r1, r3, [r4]
   178ca:	2900      	cmp	r1, #0
   178cc:	d1f9      	bne.n	178c2 <bt_smp_connected+0x1a>
}
   178ce:	bd38      	pop	{r3, r4, r5, pc}
   178d0:	00018555 	.word	0x00018555
   178d4:	20009980 	.word	0x20009980

000178d8 <smp_pairing_confirm>:
{
   178d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   178da:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   178dc:	68cd      	ldr	r5, [r1, #12]
{
   178de:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   178e0:	210b      	movs	r1, #11
   178e2:	4630      	mov	r0, r6
   178e4:	f00f fce3 	bl	272ae <atomic_clear_bit>
   178e8:	462b      	mov	r3, r5
   178ea:	f104 0217 	add.w	r2, r4, #23
   178ee:	f105 0110 	add.w	r1, r5, #16
   178f2:	f853 0b04 	ldr.w	r0, [r3], #4
   178f6:	428b      	cmp	r3, r1
   178f8:	f842 0b04 	str.w	r0, [r2], #4
   178fc:	d1f9      	bne.n	178f2 <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   178fe:	2105      	movs	r1, #5
   17900:	4630      	mov	r0, r6
   17902:	f00f fcad 	bl	27260 <atomic_test_bit>
   17906:	b928      	cbnz	r0, 17914 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   17908:	4620      	mov	r0, r4
}
   1790a:	b004      	add	sp, #16
   1790c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   17910:	f00f be2c 	b.w	2756c <legacy_pairing_confirm>
	switch (smp->method) {
   17914:	7a23      	ldrb	r3, [r4, #8]
   17916:	2b01      	cmp	r3, #1
   17918:	d00a      	beq.n	17930 <smp_pairing_confirm+0x58>
   1791a:	2b02      	cmp	r3, #2
   1791c:	d115      	bne.n	1794a <smp_pairing_confirm+0x72>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1791e:	2104      	movs	r1, #4
   17920:	4620      	mov	r0, r4
   17922:	f00f fd04 	bl	2732e <atomic_set_bit>
}
   17926:	b004      	add	sp, #16
   17928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1792c:	f7ff bbca 	b.w	170c4 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   17930:	210a      	movs	r1, #10
   17932:	4630      	mov	r0, r6
   17934:	f00f fc94 	bl	27260 <atomic_test_bit>
   17938:	2800      	cmp	r0, #0
   1793a:	d0f0      	beq.n	1791e <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1793c:	4630      	mov	r0, r6
   1793e:	2100      	movs	r1, #0
   17940:	f00f fcf5 	bl	2732e <atomic_set_bit>
			return 0;
   17944:	2000      	movs	r0, #0
}
   17946:	b004      	add	sp, #16
   17948:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1794a:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1794c:	4b05      	ldr	r3, [pc, #20]	; (17964 <smp_pairing_confirm+0x8c>)
   1794e:	2201      	movs	r2, #1
   17950:	9302      	str	r3, [sp, #8]
   17952:	2300      	movs	r3, #0
   17954:	4904      	ldr	r1, [pc, #16]	; (17968 <smp_pairing_confirm+0x90>)
   17956:	4618      	mov	r0, r3
   17958:	e9cd 3300 	strd	r3, r3, [sp]
   1795c:	f00f fcd8 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17960:	2008      	movs	r0, #8
   17962:	e7f0      	b.n	17946 <smp_pairing_confirm+0x6e>
   17964:	0002e94c 	.word	0x0002e94c
   17968:	0002a3d8 	.word	0x0002a3d8

0001796c <smp_pairing_random>:
{
   1796c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17970:	4604      	mov	r4, r0
   17972:	b089      	sub	sp, #36	; 0x24
   17974:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17976:	f7ff fa57 	bl	16e28 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1797a:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1797e:	4605      	mov	r5, r0
   17980:	464a      	mov	r2, r9
   17982:	68f3      	ldr	r3, [r6, #12]
   17984:	f103 0110 	add.w	r1, r3, #16
   17988:	f853 0b04 	ldr.w	r0, [r3], #4
   1798c:	428b      	cmp	r3, r1
   1798e:	f842 0b04 	str.w	r0, [r2], #4
   17992:	d1f9      	bne.n	17988 <smp_pairing_random+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17994:	1d27      	adds	r7, r4, #4
   17996:	2105      	movs	r1, #5
   17998:	4638      	mov	r0, r7
   1799a:	f00f fc61 	bl	27260 <atomic_test_bit>
   1799e:	2800      	cmp	r0, #0
   179a0:	d14f      	bne.n	17a42 <smp_pairing_random+0xd6>
	struct bt_conn *conn = smp->chan.chan.conn;
   179a2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   179a6:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   179aa:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   179ae:	ad04      	add	r5, sp, #16
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   179b0:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   179b2:	9201      	str	r2, [sp, #4]
   179b4:	9300      	str	r3, [sp, #0]
   179b6:	4649      	mov	r1, r9
   179b8:	4630      	mov	r0, r6
   179ba:	9502      	str	r5, [sp, #8]
   179bc:	f104 0310 	add.w	r3, r4, #16
   179c0:	f104 0209 	add.w	r2, r4, #9
   179c4:	f00f fd77 	bl	274b6 <smp_c1>
	if (err) {
   179c8:	bb20      	cbnz	r0, 17a14 <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   179ca:	2210      	movs	r2, #16
   179cc:	4629      	mov	r1, r5
   179ce:	f104 0017 	add.w	r0, r4, #23
   179d2:	f011 fd3e 	bl	29452 <memcmp>
   179d6:	4680      	mov	r8, r0
   179d8:	2800      	cmp	r0, #0
   179da:	d177      	bne.n	17acc <smp_pairing_random+0x160>
	memcpy(out, r2, 8);
   179dc:	462b      	mov	r3, r5
   179de:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   179e2:	f8d9 1004 	ldr.w	r1, [r9, #4]
	return bt_encrypt_le(k, out, out);
   179e6:	462a      	mov	r2, r5
	memcpy(out, r2, 8);
   179e8:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   179ea:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   179ee:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   179f2:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   179f4:	4629      	mov	r1, r5
   179f6:	4630      	mov	r0, r6
   179f8:	f00e fbe8 	bl	261cc <bt_encrypt_le>
		if (err) {
   179fc:	b170      	cbz	r0, 17a1c <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   179fe:	4b62      	ldr	r3, [pc, #392]	; (17b88 <smp_pairing_random+0x21c>)
   17a00:	f8cd 8000 	str.w	r8, [sp]
   17a04:	e9cd 8301 	strd	r8, r3, [sp, #4]
   17a08:	4643      	mov	r3, r8
		LOG_ERR("Calculate confirm failed");
   17a0a:	2201      	movs	r2, #1
   17a0c:	4618      	mov	r0, r3
   17a0e:	495f      	ldr	r1, [pc, #380]	; (17b8c <smp_pairing_random+0x220>)
   17a10:	f00f fc7e 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17a14:	2008      	movs	r0, #8
}
   17a16:	b009      	add	sp, #36	; 0x24
   17a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17a1c:	4633      	mov	r3, r6
   17a1e:	ae08      	add	r6, sp, #32
   17a20:	462a      	mov	r2, r5
   17a22:	ca03      	ldmia	r2!, {r0, r1}
   17a24:	42b2      	cmp	r2, r6
   17a26:	6018      	str	r0, [r3, #0]
   17a28:	6059      	str	r1, [r3, #4]
   17a2a:	4615      	mov	r5, r2
   17a2c:	f103 0308 	add.w	r3, r3, #8
   17a30:	d1f6      	bne.n	17a20 <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   17a32:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17a34:	4638      	mov	r0, r7
   17a36:	f00f fc7a 	bl	2732e <atomic_set_bit>
	return smp_send_pairing_random(smp);
   17a3a:	4620      	mov	r0, r4
   17a3c:	f00f fcc0 	bl	273c0 <smp_send_pairing_random>
   17a40:	e7e9      	b.n	17a16 <smp_pairing_random+0xaa>
	switch (smp->method) {
   17a42:	7a23      	ldrb	r3, [r4, #8]
   17a44:	2b05      	cmp	r3, #5
   17a46:	f200 8091 	bhi.w	17b6c <smp_pairing_random+0x200>
   17a4a:	e8df f003 	tbb	[pc, r3]
   17a4e:	1f19      	.short	0x1f19
   17a50:	658f031f 	.word	0x658f031f
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   17a54:	ab04      	add	r3, sp, #16
   17a56:	494e      	ldr	r1, [pc, #312]	; (17b90 <smp_pairing_random+0x224>)
   17a58:	9300      	str	r3, [sp, #0]
   17a5a:	464a      	mov	r2, r9
   17a5c:	6809      	ldr	r1, [r1, #0]
   17a5e:	f104 0327 	add.w	r3, r4, #39	; 0x27
   17a62:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17a66:	f001 f865 	bl	18b34 <bt_crypto_g2>
   17a6a:	2800      	cmp	r0, #0
   17a6c:	d1d2      	bne.n	17a14 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   17a6e:	210a      	movs	r1, #10
   17a70:	4638      	mov	r0, r7
   17a72:	f00f fc5c 	bl	2732e <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   17a76:	68ab      	ldr	r3, [r5, #8]
   17a78:	9904      	ldr	r1, [sp, #16]
   17a7a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17a7e:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   17a80:	210d      	movs	r1, #13
   17a82:	4620      	mov	r0, r4
   17a84:	f00f fc53 	bl	2732e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17a88:	2110      	movs	r1, #16
   17a8a:	e7d3      	b.n	17a34 <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17a8c:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   17a90:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   17a94:	493e      	ldr	r1, [pc, #248]	; (17b90 <smp_pairing_random+0x224>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17a96:	40d3      	lsrs	r3, r2
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   17a98:	ad04      	add	r5, sp, #16
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   17a9a:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   17a9e:	9500      	str	r5, [sp, #0]
   17aa0:	464a      	mov	r2, r9
   17aa2:	6809      	ldr	r1, [r1, #0]
   17aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17aa8:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17aac:	f00f fed1 	bl	27852 <bt_crypto_f4>
   17ab0:	b128      	cbz	r0, 17abe <smp_pairing_random+0x152>
		LOG_ERR("Calculate confirm failed");
   17ab2:	4b38      	ldr	r3, [pc, #224]	; (17b94 <smp_pairing_random+0x228>)
   17ab4:	9302      	str	r3, [sp, #8]
   17ab6:	2300      	movs	r3, #0
   17ab8:	e9cd 3300 	strd	r3, r3, [sp]
   17abc:	e7a5      	b.n	17a0a <smp_pairing_random+0x9e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   17abe:	2210      	movs	r2, #16
   17ac0:	4629      	mov	r1, r5
   17ac2:	f104 0017 	add.w	r0, r4, #23
   17ac6:	f011 fcc4 	bl	29452 <memcmp>
   17aca:	b108      	cbz	r0, 17ad0 <smp_pairing_random+0x164>
		return BT_SMP_ERR_CONFIRM_FAILED;
   17acc:	2004      	movs	r0, #4
   17ace:	e7a2      	b.n	17a16 <smp_pairing_random+0xaa>
		atomic_set_bit(smp->allowed_cmds,
   17ad0:	2103      	movs	r1, #3
   17ad2:	4620      	mov	r0, r4
   17ad4:	f00f fc2b 	bl	2732e <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   17ad8:	f00f fc72 	bl	273c0 <smp_send_pairing_random>
		if (err) {
   17adc:	2800      	cmp	r0, #0
   17ade:	d19a      	bne.n	17a16 <smp_pairing_random+0xaa>
		smp->passkey_round++;
   17ae0:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17ae4:	3301      	adds	r3, #1
   17ae6:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   17ae8:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   17aea:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   17aee:	d109      	bne.n	17b04 <smp_pairing_random+0x198>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   17af0:	210d      	movs	r1, #13
   17af2:	4620      	mov	r0, r4
   17af4:	f00f fc1b 	bl	2732e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17af8:	2110      	movs	r1, #16
   17afa:	4638      	mov	r0, r7
   17afc:	f00f fc17 	bl	2732e <atomic_set_bit>
			return 0;
   17b00:	2000      	movs	r0, #0
   17b02:	e788      	b.n	17a16 <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   17b04:	2110      	movs	r1, #16
   17b06:	f104 0027 	add.w	r0, r4, #39	; 0x27
   17b0a:	f7fb fd05 	bl	13518 <bt_rand>
   17b0e:	3800      	subs	r0, #0
   17b10:	bf18      	it	ne
   17b12:	2001      	movne	r0, #1
   17b14:	00c0      	lsls	r0, r0, #3
   17b16:	e77e      	b.n	17a16 <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   17b18:	2110      	movs	r1, #16
   17b1a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   17b1e:	f7fb fcfb 	bl	13518 <bt_rand>
   17b22:	2800      	cmp	r0, #0
   17b24:	f47f af76 	bne.w	17a14 <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   17b28:	b365      	cbz	r5, 17b84 <smp_pairing_random+0x218>
   17b2a:	68eb      	ldr	r3, [r5, #12]
   17b2c:	b353      	cbz	r3, 17b84 <smp_pairing_random+0x218>
			struct bt_conn_oob_info info = {
   17b2e:	4b1a      	ldr	r3, [pc, #104]	; (17b98 <smp_pairing_random+0x22c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   17b30:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   17b32:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   17b34:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   17b36:	f8ad 3010 	strh.w	r3, [sp, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   17b3a:	7ca3      	ldrb	r3, [r4, #18]
   17b3c:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   17b40:	d412      	bmi.n	17b68 <smp_pairing_random+0x1fc>
   17b42:	2b00      	cmp	r3, #0
   17b44:	bf14      	ite	ne
   17b46:	2301      	movne	r3, #1
   17b48:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   17b4a:	f88d 3011 	strb.w	r3, [sp, #17]
			smp->oobd_local = NULL;
   17b4e:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   17b50:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   17b52:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   17b56:	210c      	movs	r1, #12
   17b58:	f00f fbe9 	bl	2732e <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   17b5c:	68eb      	ldr	r3, [r5, #12]
   17b5e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   17b62:	a904      	add	r1, sp, #16
   17b64:	4798      	blx	r3
			return 0;
   17b66:	e7cb      	b.n	17b00 <smp_pairing_random+0x194>
		if (rsp_oob_present) {
   17b68:	005b      	lsls	r3, r3, #1
   17b6a:	e7ee      	b.n	17b4a <smp_pairing_random+0x1de>
	switch (smp->method) {
   17b6c:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   17b6e:	4b0b      	ldr	r3, [pc, #44]	; (17b9c <smp_pairing_random+0x230>)
   17b70:	2201      	movs	r2, #1
   17b72:	9302      	str	r3, [sp, #8]
   17b74:	2300      	movs	r3, #0
   17b76:	4905      	ldr	r1, [pc, #20]	; (17b8c <smp_pairing_random+0x220>)
   17b78:	4618      	mov	r0, r3
   17b7a:	e9cd 3300 	strd	r3, r3, [sp]
   17b7e:	f00f fbc7 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17b82:	e747      	b.n	17a14 <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   17b84:	2002      	movs	r0, #2
   17b86:	e746      	b.n	17a16 <smp_pairing_random+0xaa>
   17b88:	0002ea2d 	.word	0x0002ea2d
   17b8c:	0002a3d8 	.word	0x0002a3d8
   17b90:	20021110 	.word	0x20021110
   17b94:	0002ea42 	.word	0x0002ea42
   17b98:	0002a51a 	.word	0x0002a51a
   17b9c:	0002e94c 	.word	0x0002e94c

00017ba0 <bt_smp_start_security>:
{
   17ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   17ba4:	78c6      	ldrb	r6, [r0, #3]
{
   17ba6:	4604      	mov	r4, r0
	switch (conn->role) {
   17ba8:	2e01      	cmp	r6, #1
   17baa:	d005      	beq.n	17bb8 <bt_smp_start_security+0x18>
		return -EINVAL;
   17bac:	f06f 0415 	mvn.w	r4, #21
}
   17bb0:	4620      	mov	r0, r4
   17bb2:	b003      	add	sp, #12
   17bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   17bb8:	f7ff f9b4 	bl	16f24 <smp_chan_get>
	if (!smp) {
   17bbc:	4605      	mov	r5, r0
   17bbe:	2800      	cmp	r0, #0
   17bc0:	f000 80ac 	beq.w	17d1c <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   17bc4:	1d07      	adds	r7, r0, #4
   17bc6:	2104      	movs	r1, #4
   17bc8:	4638      	mov	r0, r7
   17bca:	f00f fb49 	bl	27260 <atomic_test_bit>
   17bce:	2800      	cmp	r0, #0
   17bd0:	f040 80a7 	bne.w	17d22 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   17bd4:	2103      	movs	r1, #3
   17bd6:	4638      	mov	r0, r7
   17bd8:	f00f fb42 	bl	27260 <atomic_test_bit>
   17bdc:	b110      	cbz	r0, 17be4 <bt_smp_start_security+0x44>
		return -EBUSY;
   17bde:	f06f 040f 	mvn.w	r4, #15
   17be2:	e7e5      	b.n	17bb0 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   17be4:	4631      	mov	r1, r6
   17be6:	4638      	mov	r0, r7
   17be8:	f00f fb3a 	bl	27260 <atomic_test_bit>
   17bec:	2800      	cmp	r0, #0
   17bee:	d1f6      	bne.n	17bde <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17bf0:	4628      	mov	r0, r5
   17bf2:	f7ff f919 	bl	16e28 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   17bf6:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17bfa:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   17bfc:	7a9b      	ldrb	r3, [r3, #10]
   17bfe:	2b03      	cmp	r3, #3
   17c00:	d042      	beq.n	17c88 <bt_smp_start_security+0xe8>
   17c02:	d832      	bhi.n	17c6a <bt_smp_start_security+0xca>
   17c04:	3b01      	subs	r3, #1
   17c06:	2b01      	cmp	r3, #1
   17c08:	d948      	bls.n	17c9c <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   17c0a:	210b      	movs	r1, #11
   17c0c:	1d20      	adds	r0, r4, #4
   17c0e:	f00f fb27 	bl	27260 <atomic_test_bit>
   17c12:	2800      	cmp	r0, #0
   17c14:	d1ca      	bne.n	17bac <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   17c16:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17c1a:	b983      	cbnz	r3, 17c3e <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   17c1c:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   17c20:	4632      	mov	r2, r6
   17c22:	2020      	movs	r0, #32
   17c24:	7a21      	ldrb	r1, [r4, #8]
   17c26:	f000 fde9 	bl	187fc <bt_keys_find>
   17c2a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   17c2e:	b930      	cbnz	r0, 17c3e <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   17c30:	4632      	mov	r2, r6
   17c32:	2004      	movs	r0, #4
   17c34:	7a21      	ldrb	r1, [r4, #8]
   17c36:	f000 fde1 	bl	187fc <bt_keys_find>
   17c3a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   17c3e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17c42:	2b00      	cmp	r3, #0
   17c44:	d0b2      	beq.n	17bac <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   17c46:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   17c48:	f012 0f24 	tst.w	r2, #36	; 0x24
   17c4c:	d0ae      	beq.n	17bac <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   17c4e:	7aa1      	ldrb	r1, [r4, #10]
   17c50:	2902      	cmp	r1, #2
   17c52:	d923      	bls.n	17c9c <bt_smp_start_security+0xfc>
   17c54:	7b58      	ldrb	r0, [r3, #13]
   17c56:	07c0      	lsls	r0, r0, #31
   17c58:	d5a8      	bpl.n	17bac <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   17c5a:	2903      	cmp	r1, #3
   17c5c:	d01e      	beq.n	17c9c <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   17c5e:	0692      	lsls	r2, r2, #26
   17c60:	d5a4      	bpl.n	17bac <bt_smp_start_security+0xc>
   17c62:	7b1b      	ldrb	r3, [r3, #12]
   17c64:	2b10      	cmp	r3, #16
   17c66:	d1a1      	bne.n	17bac <bt_smp_start_security+0xc>
   17c68:	e018      	b.n	17c9c <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   17c6a:	2b04      	cmp	r3, #4
   17c6c:	d1cd      	bne.n	17c0a <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   17c6e:	4628      	mov	r0, r5
   17c70:	f7ff f8f0 	bl	16e54 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   17c74:	2803      	cmp	r0, #3
   17c76:	d104      	bne.n	17c82 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   17c78:	2e00      	cmp	r6, #0
   17c7a:	d0c6      	beq.n	17c0a <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   17c7c:	68f3      	ldr	r3, [r6, #12]
   17c7e:	2b00      	cmp	r3, #0
   17c80:	d0c3      	beq.n	17c0a <bt_smp_start_security+0x6a>
   17c82:	4b29      	ldr	r3, [pc, #164]	; (17d28 <bt_smp_start_security+0x188>)
   17c84:	781b      	ldrb	r3, [r3, #0]
   17c86:	e007      	b.n	17c98 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   17c88:	4628      	mov	r0, r5
   17c8a:	f7ff f8e3 	bl	16e54 <get_io_capa>
   17c8e:	2803      	cmp	r0, #3
   17c90:	d104      	bne.n	17c9c <bt_smp_start_security+0xfc>
   17c92:	2e00      	cmp	r6, #0
   17c94:	d0b9      	beq.n	17c0a <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   17c96:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   17c98:	2b00      	cmp	r3, #0
   17c9a:	d0b6      	beq.n	17c0a <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   17c9c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17ca0:	b13b      	cbz	r3, 17cb2 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   17ca2:	4628      	mov	r0, r5
   17ca4:	f7ff f958 	bl	16f58 <smp_init>
   17ca8:	4680      	mov	r8, r0
   17caa:	b170      	cbz	r0, 17cca <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   17cac:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17cb0:	e77e      	b.n	17bb0 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   17cb2:	7a20      	ldrb	r0, [r4, #8]
   17cb4:	f104 0190 	add.w	r1, r4, #144	; 0x90
   17cb8:	f000 fd48 	bl	1874c <bt_keys_get_addr>
   17cbc:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   17cc0:	2800      	cmp	r0, #0
   17cc2:	d1ee      	bne.n	17ca2 <bt_smp_start_security+0x102>
			return -ENOMEM;
   17cc4:	f06f 040b 	mvn.w	r4, #11
   17cc8:	e772      	b.n	17bb0 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   17cca:	210b      	movs	r1, #11
   17ccc:	4628      	mov	r0, r5
   17cce:	f00f fb3e 	bl	2734e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   17cd2:	4606      	mov	r6, r0
   17cd4:	2800      	cmp	r0, #0
   17cd6:	d0e9      	beq.n	17cac <bt_smp_start_security+0x10c>
   17cd8:	2101      	movs	r1, #1
   17cda:	300c      	adds	r0, #12
   17cdc:	f001 fac2 	bl	19264 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   17ce0:	2109      	movs	r1, #9
   17ce2:	4681      	mov	r9, r0
   17ce4:	4628      	mov	r0, r5
   17ce6:	f7ff f8db 	bl	16ea0 <get_auth>
   17cea:	4643      	mov	r3, r8
   17cec:	f889 0000 	strb.w	r0, [r9]
   17cf0:	4632      	mov	r2, r6
   17cf2:	4620      	mov	r0, r4
   17cf4:	2106      	movs	r1, #6
   17cf6:	f8cd 8000 	str.w	r8, [sp]
   17cfa:	f00e fc04 	bl	26506 <bt_l2cap_send_cb>
	if (err) {
   17cfe:	4604      	mov	r4, r0
   17d00:	b118      	cbz	r0, 17d0a <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   17d02:	4630      	mov	r0, r6
   17d04:	f001 f98c 	bl	19020 <net_buf_unref>
		return err;
   17d08:	e752      	b.n	17bb0 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   17d0a:	4638      	mov	r0, r7
   17d0c:	210f      	movs	r1, #15
   17d0e:	f00f fb0e 	bl	2732e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   17d12:	2101      	movs	r1, #1
   17d14:	4628      	mov	r0, r5
   17d16:	f00f fb0a 	bl	2732e <atomic_set_bit>
	return 0;
   17d1a:	e749      	b.n	17bb0 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   17d1c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   17d20:	e746      	b.n	17bb0 <bt_smp_start_security+0x10>
		return -EIO;
   17d22:	f06f 0404 	mvn.w	r4, #4
   17d26:	e743      	b.n	17bb0 <bt_smp_start_security+0x10>
   17d28:	20021dbf 	.word	0x20021dbf

00017d2c <smp_pairing_complete>:
{
   17d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d2e:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   17d30:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   17d34:	1d04      	adds	r4, r0, #4
	if (!status) {
   17d36:	bb39      	cbnz	r1, 17d88 <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   17d38:	210d      	movs	r1, #13
   17d3a:	4620      	mov	r0, r4
   17d3c:	f00f fa90 	bl	27260 <atomic_test_bit>
	return list->head;
   17d40:	4b36      	ldr	r3, [pc, #216]	; (17e1c <smp_pairing_complete+0xf0>)
   17d42:	4607      	mov	r7, r0
   17d44:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   17d46:	b19b      	cbz	r3, 17d70 <smp_pairing_complete+0x44>
	return node->next;
   17d48:	681c      	ldr	r4, [r3, #0]
   17d4a:	b104      	cbz	r4, 17d4e <smp_pairing_complete+0x22>
   17d4c:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   17d4e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   17d52:	b113      	cbz	r3, 17d5a <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   17d54:	4639      	mov	r1, r7
   17d56:	4628      	mov	r0, r5
   17d58:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   17d5a:	b14c      	cbz	r4, 17d70 <smp_pairing_complete+0x44>
   17d5c:	4623      	mov	r3, r4
   17d5e:	68e4      	ldr	r4, [r4, #12]
   17d60:	681b      	ldr	r3, [r3, #0]
   17d62:	b11c      	cbz	r4, 17d6c <smp_pairing_complete+0x40>
   17d64:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   17d66:	2b00      	cmp	r3, #0
   17d68:	d1f4      	bne.n	17d54 <smp_pairing_complete+0x28>
   17d6a:	e7f7      	b.n	17d5c <smp_pairing_complete+0x30>
   17d6c:	2b00      	cmp	r3, #0
   17d6e:	d1f1      	bne.n	17d54 <smp_pairing_complete+0x28>
	smp_reset(smp);
   17d70:	4630      	mov	r0, r6
   17d72:	f00f fb85 	bl	27480 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   17d76:	7a6a      	ldrb	r2, [r5, #9]
   17d78:	7aab      	ldrb	r3, [r5, #10]
   17d7a:	429a      	cmp	r2, r3
   17d7c:	d04d      	beq.n	17e1a <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   17d7e:	4628      	mov	r0, r5
}
   17d80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   17d84:	f7ff bf0c 	b.w	17ba0 <bt_smp_start_security>
	switch (smp_err) {
   17d88:	3901      	subs	r1, #1
   17d8a:	b2c9      	uxtb	r1, r1
   17d8c:	290e      	cmp	r1, #14
   17d8e:	bf96      	itet	ls
   17d90:	4b23      	ldrls	r3, [pc, #140]	; (17e20 <smp_pairing_complete+0xf4>)
	if (!status) {
   17d92:	2709      	movhi	r7, #9
   17d94:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   17d96:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   17d9a:	b143      	cbz	r3, 17dae <smp_pairing_complete+0x82>
   17d9c:	7b1b      	ldrb	r3, [r3, #12]
   17d9e:	bb33      	cbnz	r3, 17dee <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   17da0:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   17da4:	f000 fe10 	bl	189c8 <bt_keys_clear>
			conn->le.keys = NULL;
   17da8:	2300      	movs	r3, #0
   17daa:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   17dae:	2102      	movs	r1, #2
   17db0:	4620      	mov	r0, r4
   17db2:	f00f fa55 	bl	27260 <atomic_test_bit>
   17db6:	b948      	cbnz	r0, 17dcc <smp_pairing_complete+0xa0>
	switch (err) {
   17db8:	2f07      	cmp	r7, #7
   17dba:	bf94      	ite	ls
   17dbc:	4b19      	ldrls	r3, [pc, #100]	; (17e24 <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   17dbe:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   17dc0:	463a      	mov	r2, r7
   17dc2:	4628      	mov	r0, r5
   17dc4:	bf98      	it	ls
   17dc6:	5dd9      	ldrbls	r1, [r3, r7]
   17dc8:	f7fc fa80 	bl	142cc <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   17dcc:	2103      	movs	r1, #3
   17dce:	4620      	mov	r0, r4
   17dd0:	f00f fa46 	bl	27260 <atomic_test_bit>
   17dd4:	2800      	cmp	r0, #0
   17dd6:	d0cb      	beq.n	17d70 <smp_pairing_complete+0x44>
	return list->head;
   17dd8:	4b10      	ldr	r3, [pc, #64]	; (17e1c <smp_pairing_complete+0xf0>)
   17dda:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   17ddc:	2b00      	cmp	r3, #0
   17dde:	d0c7      	beq.n	17d70 <smp_pairing_complete+0x44>
	return node->next;
   17de0:	681c      	ldr	r4, [r3, #0]
   17de2:	b104      	cbz	r4, 17de6 <smp_pairing_complete+0xba>
   17de4:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   17de6:	f853 3c08 	ldr.w	r3, [r3, #-8]
   17dea:	b94b      	cbnz	r3, 17e00 <smp_pairing_complete+0xd4>
   17dec:	e00b      	b.n	17e06 <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   17dee:	2102      	movs	r1, #2
   17df0:	4620      	mov	r0, r4
   17df2:	f00f fa35 	bl	27260 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   17df6:	2800      	cmp	r0, #0
   17df8:	d1d2      	bne.n	17da0 <smp_pairing_complete+0x74>
   17dfa:	e7d8      	b.n	17dae <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   17dfc:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   17dfe:	b123      	cbz	r3, 17e0a <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   17e00:	4639      	mov	r1, r7
   17e02:	4628      	mov	r0, r5
   17e04:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   17e06:	2c00      	cmp	r4, #0
   17e08:	d0b2      	beq.n	17d70 <smp_pairing_complete+0x44>
   17e0a:	4623      	mov	r3, r4
   17e0c:	68e4      	ldr	r4, [r4, #12]
   17e0e:	685b      	ldr	r3, [r3, #4]
   17e10:	2c00      	cmp	r4, #0
   17e12:	d1f3      	bne.n	17dfc <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   17e14:	2b00      	cmp	r3, #0
   17e16:	d1f3      	bne.n	17e00 <smp_pairing_complete+0xd4>
   17e18:	e7aa      	b.n	17d70 <smp_pairing_complete+0x44>
}
   17e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17e1c:	20020fe0 	.word	0x20020fe0
   17e20:	0002ecfc 	.word	0x0002ecfc
   17e24:	0002eceb 	.word	0x0002eceb

00017e28 <smp_error>:
{
   17e28:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   17e2a:	1d03      	adds	r3, r0, #4
{
   17e2c:	4606      	mov	r6, r0
   17e2e:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   17e30:	4618      	mov	r0, r3
   17e32:	2102      	movs	r1, #2
{
   17e34:	b085      	sub	sp, #20
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   17e36:	f00f fa13 	bl	27260 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   17e3a:	4604      	mov	r4, r0
   17e3c:	b120      	cbz	r0, 17e48 <smp_error+0x20>
   17e3e:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   17e42:	fab4 f484 	clz	r4, r4
   17e46:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   17e48:	2103      	movs	r1, #3
   17e4a:	4618      	mov	r0, r3
   17e4c:	f00f fa08 	bl	27260 <atomic_test_bit>
   17e50:	b1b0      	cbz	r0, 17e80 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   17e52:	4639      	mov	r1, r7
   17e54:	4630      	mov	r0, r6
   17e56:	f7ff ff69 	bl	17d2c <smp_pairing_complete>
	if (remote_already_completed) {
   17e5a:	b1f4      	cbz	r4, 17e9a <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   17e5c:	4b1d      	ldr	r3, [pc, #116]	; (17ed4 <smp_error+0xac>)
   17e5e:	491e      	ldr	r1, [pc, #120]	; (17ed8 <smp_error+0xb0>)
   17e60:	9302      	str	r3, [sp, #8]
   17e62:	2300      	movs	r3, #0
   17e64:	2202      	movs	r2, #2
   17e66:	4618      	mov	r0, r3
   17e68:	e9cd 3300 	strd	r3, r3, [sp]
   17e6c:	f00f fa50 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   17e70:	2105      	movs	r1, #5
   17e72:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   17e76:	f00e fa50 	bl	2631a <bt_conn_disconnect>
		return 0;
   17e7a:	2000      	movs	r0, #0
}
   17e7c:	b005      	add	sp, #20
   17e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   17e80:	2101      	movs	r1, #1
   17e82:	4618      	mov	r0, r3
   17e84:	f00f f9ec 	bl	27260 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   17e88:	2800      	cmp	r0, #0
   17e8a:	d1e2      	bne.n	17e52 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   17e8c:	210f      	movs	r1, #15
   17e8e:	4618      	mov	r0, r3
   17e90:	f00f f9e6 	bl	27260 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   17e94:	2800      	cmp	r0, #0
   17e96:	d1dc      	bne.n	17e52 <smp_error+0x2a>
   17e98:	e7df      	b.n	17e5a <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   17e9a:	2105      	movs	r1, #5
   17e9c:	4630      	mov	r0, r6
   17e9e:	f00f fa56 	bl	2734e <smp_create_pdu.constprop.0>
	if (!buf) {
   17ea2:	4605      	mov	r5, r0
   17ea4:	b190      	cbz	r0, 17ecc <smp_error+0xa4>
   17ea6:	2101      	movs	r1, #1
   17ea8:	300c      	adds	r0, #12
   17eaa:	f001 f9db 	bl	19264 <net_buf_simple_add>
	rsp->reason = reason;
   17eae:	7007      	strb	r7, [r0, #0]
   17eb0:	9400      	str	r4, [sp, #0]
   17eb2:	4623      	mov	r3, r4
   17eb4:	462a      	mov	r2, r5
   17eb6:	2106      	movs	r1, #6
   17eb8:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   17ebc:	f00e fb23 	bl	26506 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   17ec0:	2800      	cmp	r0, #0
   17ec2:	d0da      	beq.n	17e7a <smp_error+0x52>
		net_buf_unref(buf);
   17ec4:	4628      	mov	r0, r5
   17ec6:	f001 f8ab 	bl	19020 <net_buf_unref>
   17eca:	e7d6      	b.n	17e7a <smp_error+0x52>
		return -ENOBUFS;
   17ecc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17ed0:	e7d4      	b.n	17e7c <smp_error+0x54>
   17ed2:	bf00      	nop
   17ed4:	0002ea5b 	.word	0x0002ea5b
   17ed8:	0002a3d8 	.word	0x0002a3d8

00017edc <bt_smp_recv>:
{
   17edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   17ee0:	8a0b      	ldrh	r3, [r1, #16]
{
   17ee2:	4604      	mov	r4, r0
   17ee4:	460e      	mov	r6, r1
   17ee6:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   17ee8:	b963      	cbnz	r3, 17f04 <bt_smp_recv+0x28>
		LOG_ERR("Too small SMP PDU received");
   17eea:	4a3c      	ldr	r2, [pc, #240]	; (17fdc <bt_smp_recv+0x100>)
   17eec:	4618      	mov	r0, r3
   17eee:	e9cd 3201 	strd	r3, r2, [sp, #4]
   17ef2:	493b      	ldr	r1, [pc, #236]	; (17fe0 <bt_smp_recv+0x104>)
   17ef4:	2201      	movs	r2, #1
   17ef6:	9300      	str	r3, [sp, #0]
   17ef8:	f00f fa0a 	bl	27310 <z_log_msg_runtime_create.constprop.0>
}
   17efc:	2000      	movs	r0, #0
   17efe:	b006      	add	sp, #24
   17f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   17f04:	2101      	movs	r1, #1
   17f06:	f106 000c 	add.w	r0, r6, #12
   17f0a:	f001 f98d 	bl	19228 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   17f0e:	2104      	movs	r1, #4
   17f10:	4607      	mov	r7, r0
   17f12:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
   17f16:	f00f f9a3 	bl	27260 <atomic_test_bit>
   17f1a:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   17f1e:	7839      	ldrb	r1, [r7, #0]
   17f20:	4604      	mov	r4, r0
   17f22:	b158      	cbz	r0, 17f3c <bt_smp_recv+0x60>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   17f24:	4b2f      	ldr	r3, [pc, #188]	; (17fe4 <bt_smp_recv+0x108>)
   17f26:	2202      	movs	r2, #2
   17f28:	9302      	str	r3, [sp, #8]
   17f2a:	2300      	movs	r3, #0
   17f2c:	4618      	mov	r0, r3
   17f2e:	e9cd 3300 	strd	r3, r3, [sp]
   17f32:	9103      	str	r1, [sp, #12]
   17f34:	492a      	ldr	r1, [pc, #168]	; (17fe0 <bt_smp_recv+0x104>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   17f36:	f00f f9eb 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return 0;
   17f3a:	e7df      	b.n	17efc <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   17f3c:	290e      	cmp	r1, #14
   17f3e:	d908      	bls.n	17f52 <bt_smp_recv+0x76>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   17f40:	4b29      	ldr	r3, [pc, #164]	; (17fe8 <bt_smp_recv+0x10c>)
   17f42:	9103      	str	r1, [sp, #12]
   17f44:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17f48:	2202      	movs	r2, #2
   17f4a:	4603      	mov	r3, r0
   17f4c:	4924      	ldr	r1, [pc, #144]	; (17fe0 <bt_smp_recv+0x104>)
   17f4e:	9000      	str	r0, [sp, #0]
   17f50:	e7f1      	b.n	17f36 <bt_smp_recv+0x5a>
	if (!handlers[hdr->code].func) {
   17f52:	f8df 8098 	ldr.w	r8, [pc, #152]	; 17fec <bt_smp_recv+0x110>
   17f56:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   17f5a:	b96b      	cbnz	r3, 17f78 <bt_smp_recv+0x9c>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   17f5c:	4a24      	ldr	r2, [pc, #144]	; (17ff0 <bt_smp_recv+0x114>)
   17f5e:	9103      	str	r1, [sp, #12]
   17f60:	e9cd 3201 	strd	r3, r2, [sp, #4]
   17f64:	491e      	ldr	r1, [pc, #120]	; (17fe0 <bt_smp_recv+0x104>)
   17f66:	2202      	movs	r2, #2
   17f68:	9300      	str	r3, [sp, #0]
   17f6a:	f00f f9d1 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   17f6e:	2107      	movs	r1, #7
		smp_error(smp, err);
   17f70:	4628      	mov	r0, r5
   17f72:	f7ff ff59 	bl	17e28 <smp_error>
   17f76:	e7c1      	b.n	17efc <bt_smp_recv+0x20>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   17f78:	4628      	mov	r0, r5
   17f7a:	f00f fa6f 	bl	2745c <atomic_test_and_clear_bit>
   17f7e:	783a      	ldrb	r2, [r7, #0]
   17f80:	4603      	mov	r3, r0
   17f82:	b968      	cbnz	r0, 17fa0 <bt_smp_recv+0xc4>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   17f84:	9203      	str	r2, [sp, #12]
   17f86:	4a1b      	ldr	r2, [pc, #108]	; (17ff4 <bt_smp_recv+0x118>)
   17f88:	4915      	ldr	r1, [pc, #84]	; (17fe0 <bt_smp_recv+0x104>)
   17f8a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   17f8e:	9000      	str	r0, [sp, #0]
   17f90:	2202      	movs	r2, #2
   17f92:	f00f f9bd 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   17f96:	783b      	ldrb	r3, [r7, #0]
   17f98:	2b05      	cmp	r3, #5
   17f9a:	d0af      	beq.n	17efc <bt_smp_recv+0x20>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   17f9c:	2108      	movs	r1, #8
   17f9e:	e7e7      	b.n	17f70 <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   17fa0:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   17fa4:	8a33      	ldrh	r3, [r6, #16]
   17fa6:	7909      	ldrb	r1, [r1, #4]
   17fa8:	4299      	cmp	r1, r3
   17faa:	d00d      	beq.n	17fc8 <bt_smp_recv+0xec>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   17fac:	e9cd 3203 	strd	r3, r2, [sp, #12]
   17fb0:	4b11      	ldr	r3, [pc, #68]	; (17ff8 <bt_smp_recv+0x11c>)
   17fb2:	490b      	ldr	r1, [pc, #44]	; (17fe0 <bt_smp_recv+0x104>)
   17fb4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   17fb8:	2201      	movs	r2, #1
   17fba:	4623      	mov	r3, r4
   17fbc:	4620      	mov	r0, r4
   17fbe:	9400      	str	r4, [sp, #0]
   17fc0:	f00f f9a6 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   17fc4:	210a      	movs	r1, #10
   17fc6:	e7d3      	b.n	17f70 <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   17fc8:	4631      	mov	r1, r6
   17fca:	4628      	mov	r0, r5
   17fcc:	f858 3032 	ldr.w	r3, [r8, r2, lsl #3]
   17fd0:	4798      	blx	r3
	if (err) {
   17fd2:	4601      	mov	r1, r0
   17fd4:	2800      	cmp	r0, #0
   17fd6:	d091      	beq.n	17efc <bt_smp_recv+0x20>
   17fd8:	e7ca      	b.n	17f70 <bt_smp_recv+0x94>
   17fda:	bf00      	nop
   17fdc:	0002eab3 	.word	0x0002eab3
   17fe0:	0002a3d8 	.word	0x0002a3d8
   17fe4:	0002eace 	.word	0x0002eace
   17fe8:	0002eaff 	.word	0x0002eaff
   17fec:	0002af04 	.word	0x0002af04
   17ff0:	0002eb21 	.word	0x0002eb21
   17ff4:	0002eb3b 	.word	0x0002eb3b
   17ff8:	0002e5cc 	.word	0x0002e5cc

00017ffc <bt_smp_pkey_ready>:
{
   17ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sc_public_key = pkey;
   17ffe:	4a10      	ldr	r2, [pc, #64]	; (18040 <bt_smp_pkey_ready+0x44>)
{
   18000:	4603      	mov	r3, r0
	sc_public_key = pkey;
   18002:	6010      	str	r0, [r2, #0]
	if (!pkey) {
   18004:	b948      	cbnz	r0, 1801a <bt_smp_pkey_ready+0x1e>
		LOG_WRN("Public key not available");
   18006:	4a0f      	ldr	r2, [pc, #60]	; (18044 <bt_smp_pkey_ready+0x48>)
   18008:	490f      	ldr	r1, [pc, #60]	; (18048 <bt_smp_pkey_ready+0x4c>)
   1800a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1800e:	9000      	str	r0, [sp, #0]
   18010:	2202      	movs	r2, #2
   18012:	f00f f97d 	bl	27310 <z_log_msg_runtime_create.constprop.0>
}
   18016:	b004      	add	sp, #16
   18018:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   1801a:	480c      	ldr	r0, [pc, #48]	; (1804c <bt_smp_pkey_ready+0x50>)
   1801c:	f007 fd5e 	bl	1fadc <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18020:	4b0b      	ldr	r3, [pc, #44]	; (18050 <bt_smp_pkey_ready+0x54>)
		err = smp_public_key_periph(smp);
   18022:	1f1c      	subs	r4, r3, #4
   18024:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   18028:	065b      	lsls	r3, r3, #25
   1802a:	d5f4      	bpl.n	18016 <bt_smp_pkey_ready+0x1a>
		err = smp_public_key_periph(smp);
   1802c:	4620      	mov	r0, r4
   1802e:	f7ff f897 	bl	17160 <smp_public_key_periph>
		if (err) {
   18032:	4601      	mov	r1, r0
   18034:	2800      	cmp	r0, #0
   18036:	d0ee      	beq.n	18016 <bt_smp_pkey_ready+0x1a>
			smp_error(smp, err);
   18038:	4620      	mov	r0, r4
   1803a:	f7ff fef5 	bl	17e28 <smp_error>
   1803e:	e7ea      	b.n	18016 <bt_smp_pkey_ready+0x1a>
   18040:	20021110 	.word	0x20021110
   18044:	0002eb56 	.word	0x0002eb56
   18048:	0002a3d8 	.word	0x0002a3d8
   1804c:	20008b48 	.word	0x20008b48
   18050:	20009984 	.word	0x20009984

00018054 <smp_ident_addr_info>:
{
   18054:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   18058:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1805c:	68cf      	ldr	r7, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1805e:	f023 0302 	bic.w	r3, r3, #2
   18062:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   18066:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1806a:	783b      	ldrb	r3, [r7, #0]
{
   1806c:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1806e:	f106 0890 	add.w	r8, r6, #144	; 0x90
   18072:	b32b      	cbz	r3, 180c0 <smp_ident_addr_info+0x6c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   18074:	79bb      	ldrb	r3, [r7, #6]
   18076:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1807a:	2bc0      	cmp	r3, #192	; 0xc0
   1807c:	d020      	beq.n	180c0 <smp_ident_addr_info+0x6c>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1807e:	4638      	mov	r0, r7
   18080:	f7f8 febc 	bl	10dfc <bt_addr_le_str>
   18084:	2400      	movs	r4, #0
   18086:	4b5d      	ldr	r3, [pc, #372]	; (181fc <smp_ident_addr_info+0x1a8>)
   18088:	2201      	movs	r2, #1
   1808a:	495d      	ldr	r1, [pc, #372]	; (18200 <smp_ident_addr_info+0x1ac>)
   1808c:	9003      	str	r0, [sp, #12]
   1808e:	9302      	str	r3, [sp, #8]
   18090:	4620      	mov	r0, r4
   18092:	4623      	mov	r3, r4
   18094:	e9cd 4400 	strd	r4, r4, [sp]
   18098:	f00f f93a 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1809c:	4640      	mov	r0, r8
   1809e:	f7f8 fead 	bl	10dfc <bt_addr_le_str>
   180a2:	4b58      	ldr	r3, [pc, #352]	; (18204 <smp_ident_addr_info+0x1b0>)
   180a4:	9003      	str	r0, [sp, #12]
   180a6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   180aa:	4620      	mov	r0, r4
   180ac:	4623      	mov	r3, r4
   180ae:	2201      	movs	r2, #1
   180b0:	4953      	ldr	r1, [pc, #332]	; (18200 <smp_ident_addr_info+0x1ac>)
   180b2:	9400      	str	r4, [sp, #0]
   180b4:	f00f f92c 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   180b8:	200a      	movs	r0, #10
}
   180ba:	b004      	add	sp, #16
   180bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   180c0:	2207      	movs	r2, #7
   180c2:	4639      	mov	r1, r7
   180c4:	4640      	mov	r0, r8
   180c6:	f011 f9c4 	bl	29452 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   180ca:	b168      	cbz	r0, 180e8 <smp_ident_addr_info+0x94>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   180cc:	4639      	mov	r1, r7
   180ce:	7a30      	ldrb	r0, [r6, #8]
   180d0:	f000 fc1a 	bl	18908 <bt_keys_find_addr>
		if (keys) {
   180d4:	4605      	mov	r5, r0
   180d6:	b138      	cbz	r0, 180e8 <smp_ident_addr_info+0x94>
			if (!update_keys_check(smp, keys)) {
   180d8:	4601      	mov	r1, r0
   180da:	4620      	mov	r0, r4
   180dc:	f00f f8c6 	bl	2726c <update_keys_check>
   180e0:	b1e8      	cbz	r0, 1811e <smp_ident_addr_info+0xca>
			bt_keys_clear(keys);
   180e2:	4628      	mov	r0, r5
   180e4:	f000 fc70 	bl	189c8 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   180e8:	210d      	movs	r1, #13
   180ea:	1d20      	adds	r0, r4, #4
   180ec:	f00f f8b8 	bl	27260 <atomic_test_bit>
   180f0:	2800      	cmp	r0, #0
   180f2:	d071      	beq.n	181d8 <smp_ident_addr_info+0x184>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   180f4:	4642      	mov	r2, r8
   180f6:	2002      	movs	r0, #2
   180f8:	7a31      	ldrb	r1, [r6, #8]
   180fa:	f000 fc41 	bl	18980 <bt_keys_get_type>
		if (!keys) {
   180fe:	4605      	mov	r5, r0
   18100:	b978      	cbnz	r0, 18122 <smp_ident_addr_info+0xce>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18102:	4640      	mov	r0, r8
   18104:	f7f8 fe7a 	bl	10dfc <bt_addr_le_str>
   18108:	4b3f      	ldr	r3, [pc, #252]	; (18208 <smp_ident_addr_info+0x1b4>)
   1810a:	9003      	str	r0, [sp, #12]
   1810c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   18110:	2201      	movs	r2, #1
   18112:	462b      	mov	r3, r5
   18114:	4628      	mov	r0, r5
   18116:	493a      	ldr	r1, [pc, #232]	; (18200 <smp_ident_addr_info+0x1ac>)
   18118:	9500      	str	r5, [sp, #0]
   1811a:	f00f f8f9 	bl	27310 <z_log_msg_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   1811e:	2008      	movs	r0, #8
   18120:	e7cb      	b.n	180ba <smp_ident_addr_info+0x66>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18122:	78f3      	ldrb	r3, [r6, #3]
   18124:	bba3      	cbnz	r3, 18190 <smp_ident_addr_info+0x13c>
			dst = &conn->le.resp_addr;
   18126:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1812a:	781a      	ldrb	r2, [r3, #0]
   1812c:	2a01      	cmp	r2, #1
   1812e:	d11e      	bne.n	1816e <smp_ident_addr_info+0x11a>
		if (bt_addr_le_is_rpa(dst)) {
   18130:	799a      	ldrb	r2, [r3, #6]
   18132:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   18136:	2a40      	cmp	r2, #64	; 0x40
   18138:	d119      	bne.n	1816e <smp_ident_addr_info+0x11a>
   1813a:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1813e:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   18142:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   18146:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   18148:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   1814c:	b17b      	cbz	r3, 1816e <smp_ident_addr_info+0x11a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1814e:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   18152:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18156:	2bc0      	cmp	r3, #192	; 0xc0
   18158:	d009      	beq.n	1816e <smp_ident_addr_info+0x11a>
				bt_addr_le_copy(&keys->addr, &req->addr);
   1815a:	4639      	mov	r1, r7
   1815c:	1c68      	adds	r0, r5, #1
   1815e:	f00f f8b1 	bl	272c4 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   18162:	4640      	mov	r0, r8
   18164:	f00f f8ae 	bl	272c4 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   18168:	4630      	mov	r0, r6
   1816a:	f7fc f869 	bl	14240 <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1816e:	f894 60e9 	ldrb.w	r6, [r4, #233]	; 0xe9
   18172:	f016 0602 	ands.w	r6, r6, #2
   18176:	d00e      	beq.n	18196 <smp_ident_addr_info+0x142>
   18178:	4924      	ldr	r1, [pc, #144]	; (1820c <smp_ident_addr_info+0x1b8>)
   1817a:	f640 6363 	movw	r3, #3683	; 0xe63
   1817e:	4a24      	ldr	r2, [pc, #144]	; (18210 <smp_ident_addr_info+0x1bc>)
   18180:	4824      	ldr	r0, [pc, #144]	; (18214 <smp_ident_addr_info+0x1c0>)
   18182:	f00c fc10 	bl	249a6 <assert_print>
   18186:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1818a:	4821      	ldr	r0, [pc, #132]	; (18210 <smp_ident_addr_info+0x1bc>)
   1818c:	f00c fc04 	bl	24998 <assert_post_action>
			dst = &conn->le.init_addr;
   18190:	f106 0397 	add.w	r3, r6, #151	; 0x97
   18194:	e7c9      	b.n	1812a <smp_ident_addr_info+0xd6>
	conflict = bt_id_find_conflict(new_bond);
   18196:	4628      	mov	r0, r5
   18198:	f7fa fafe 	bl	12798 <bt_id_find_conflict>
	if (conflict) {
   1819c:	b158      	cbz	r0, 181b6 <smp_ident_addr_info+0x162>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1819e:	4b1e      	ldr	r3, [pc, #120]	; (18218 <smp_ident_addr_info+0x1c4>)
   181a0:	4630      	mov	r0, r6
   181a2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   181a6:	2202      	movs	r2, #2
   181a8:	4633      	mov	r3, r6
   181aa:	4915      	ldr	r1, [pc, #84]	; (18200 <smp_ident_addr_info+0x1ac>)
   181ac:	9600      	str	r6, [sp, #0]
   181ae:	f00f f8af 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   181b2:	2003      	movs	r0, #3
   181b4:	e781      	b.n	180ba <smp_ident_addr_info+0x66>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   181b6:	4628      	mov	r0, r5
   181b8:	f7fa faee 	bl	12798 <bt_id_find_conflict>
   181bc:	b148      	cbz	r0, 181d2 <smp_ident_addr_info+0x17e>
   181be:	4917      	ldr	r1, [pc, #92]	; (1821c <smp_ident_addr_info+0x1c8>)
   181c0:	f640 637f 	movw	r3, #3711	; 0xe7f
   181c4:	4a12      	ldr	r2, [pc, #72]	; (18210 <smp_ident_addr_info+0x1bc>)
   181c6:	4813      	ldr	r0, [pc, #76]	; (18214 <smp_ident_addr_info+0x1c0>)
   181c8:	f00c fbed 	bl	249a6 <assert_print>
   181cc:	f640 617f 	movw	r1, #3711	; 0xe7f
   181d0:	e7db      	b.n	1818a <smp_ident_addr_info+0x136>
	bt_id_add(new_bond);
   181d2:	4628      	mov	r0, r5
   181d4:	f7fa faf0 	bl	127b8 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   181d8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   181dc:	075b      	lsls	r3, r3, #29
   181de:	d503      	bpl.n	181e8 <smp_ident_addr_info+0x194>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   181e0:	210a      	movs	r1, #10
   181e2:	4620      	mov	r0, r4
   181e4:	f00f f8a3 	bl	2732e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   181e8:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   181ec:	b109      	cbz	r1, 181f2 <smp_ident_addr_info+0x19e>
	return 0;
   181ee:	2000      	movs	r0, #0
   181f0:	e763      	b.n	180ba <smp_ident_addr_info+0x66>
		smp_pairing_complete(smp, 0);
   181f2:	4620      	mov	r0, r4
   181f4:	f7ff fd9a 	bl	17d2c <smp_pairing_complete>
   181f8:	e7f9      	b.n	181ee <smp_ident_addr_info+0x19a>
   181fa:	bf00      	nop
   181fc:	0002eb6f 	.word	0x0002eb6f
   18200:	0002a3d8 	.word	0x0002a3d8
   18204:	0002ec56 	.word	0x0002ec56
   18208:	0002e932 	.word	0x0002e932
   1820c:	0002ebb2 	.word	0x0002ebb2
   18210:	0002eb83 	.word	0x0002eb83
   18214:	0002b339 	.word	0x0002b339
   18218:	0002ebcd 	.word	0x0002ebcd
   1821c:	0002ec08 	.word	0x0002ec08

00018220 <smp_central_ident>:
{
   18220:	b5f0      	push	{r4, r5, r6, r7, lr}
   18222:	460b      	mov	r3, r1
   18224:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18226:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1822a:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1822c:	210d      	movs	r1, #13
   1822e:	3004      	adds	r0, #4
   18230:	f00f f816 	bl	27260 <atomic_test_bit>
   18234:	b318      	cbz	r0, 1827e <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   18236:	f105 0790 	add.w	r7, r5, #144	; 0x90
   1823a:	7a29      	ldrb	r1, [r5, #8]
   1823c:	463a      	mov	r2, r7
   1823e:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   18240:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   18242:	f000 fb9d 	bl	18980 <bt_keys_get_type>
		if (!keys) {
   18246:	4605      	mov	r5, r0
   18248:	b980      	cbnz	r0, 1826c <smp_central_ident+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1824a:	4638      	mov	r0, r7
   1824c:	f7f8 fdd6 	bl	10dfc <bt_addr_le_str>
   18250:	4b17      	ldr	r3, [pc, #92]	; (182b0 <smp_central_ident+0x90>)
   18252:	9003      	str	r0, [sp, #12]
   18254:	e9cd 5301 	strd	r5, r3, [sp, #4]
   18258:	4628      	mov	r0, r5
   1825a:	462b      	mov	r3, r5
   1825c:	2201      	movs	r2, #1
   1825e:	4915      	ldr	r1, [pc, #84]	; (182b4 <smp_central_ident+0x94>)
   18260:	9500      	str	r5, [sp, #0]
   18262:	f00f f855 	bl	27310 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18266:	2008      	movs	r0, #8
}
   18268:	b005      	add	sp, #20
   1826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1826c:	4632      	mov	r2, r6
   1826e:	f832 3b02 	ldrh.w	r3, [r2], #2
   18272:	8303      	strh	r3, [r0, #24]
   18274:	f8d6 3002 	ldr.w	r3, [r6, #2]
   18278:	6103      	str	r3, [r0, #16]
   1827a:	6853      	ldr	r3, [r2, #4]
   1827c:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1827e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   18282:	f023 0201 	bic.w	r2, r3, #1
   18286:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1828a:	079a      	lsls	r2, r3, #30
   1828c:	d508      	bpl.n	182a0 <smp_central_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1828e:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18290:	4620      	mov	r0, r4
   18292:	f00f f84c 	bl	2732e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   18296:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1829a:	b129      	cbz	r1, 182a8 <smp_central_ident+0x88>
	return 0;
   1829c:	2000      	movs	r0, #0
   1829e:	e7e3      	b.n	18268 <smp_central_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   182a0:	075b      	lsls	r3, r3, #29
   182a2:	d5f8      	bpl.n	18296 <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   182a4:	210a      	movs	r1, #10
   182a6:	e7f3      	b.n	18290 <smp_central_ident+0x70>
		smp_pairing_complete(smp, 0);
   182a8:	4620      	mov	r0, r4
   182aa:	f7ff fd3f 	bl	17d2c <smp_pairing_complete>
   182ae:	e7f5      	b.n	1829c <smp_central_ident+0x7c>
   182b0:	0002e932 	.word	0x0002e932
   182b4:	0002a3d8 	.word	0x0002a3d8

000182b8 <smp_pairing_failed>:
{
   182b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   182bc:	460e      	mov	r6, r1
   182be:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   182c0:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   182c4:	f7fe fdb0 	bl	16e28 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   182c8:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   182ca:	4914      	ldr	r1, [pc, #80]	; (1831c <smp_pairing_failed+0x64>)
   182cc:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   182ce:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   182d0:	9303      	str	r3, [sp, #12]
   182d2:	4b13      	ldr	r3, [pc, #76]	; (18320 <smp_pairing_failed+0x68>)
   182d4:	2201      	movs	r2, #1
   182d6:	9302      	str	r3, [sp, #8]
   182d8:	2300      	movs	r3, #0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   182da:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   182dc:	4618      	mov	r0, r3
   182de:	e9cd 3300 	strd	r3, r3, [sp]
   182e2:	f00f f815 	bl	27310 <z_log_msg_runtime_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   182e6:	210a      	movs	r1, #10
   182e8:	4638      	mov	r0, r7
   182ea:	f00f f8b7 	bl	2745c <atomic_test_and_clear_bit>
   182ee:	b140      	cbz	r0, 18302 <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   182f0:	b975      	cbnz	r5, 18310 <smp_pairing_failed+0x58>
	smp_pairing_complete(smp, req->reason);
   182f2:	4620      	mov	r0, r4
   182f4:	7831      	ldrb	r1, [r6, #0]
   182f6:	f7ff fd19 	bl	17d2c <smp_pairing_complete>
}
   182fa:	2000      	movs	r0, #0
   182fc:	b004      	add	sp, #16
   182fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   18302:	210b      	movs	r1, #11
   18304:	4638      	mov	r0, r7
   18306:	f00f f8a9 	bl	2745c <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1830a:	2800      	cmp	r0, #0
   1830c:	d1f0      	bne.n	182f0 <smp_pairing_failed+0x38>
   1830e:	e7f0      	b.n	182f2 <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   18310:	692b      	ldr	r3, [r5, #16]
   18312:	2b00      	cmp	r3, #0
   18314:	d0ed      	beq.n	182f2 <smp_pairing_failed+0x3a>
			smp_auth_cb->cancel(conn);
   18316:	4640      	mov	r0, r8
   18318:	4798      	blx	r3
   1831a:	e7ea      	b.n	182f2 <smp_pairing_failed+0x3a>
   1831c:	0002a3d8 	.word	0x0002a3d8
   18320:	0002ec27 	.word	0x0002ec27

00018324 <bt_smp_encrypt_change>:
{
   18324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   18328:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1832a:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1832e:	4604      	mov	r4, r0
   18330:	460f      	mov	r7, r1
   18332:	b08c      	sub	sp, #48	; 0x30
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   18334:	2101      	movs	r1, #1
   18336:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   18338:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1833c:	f00f f88e 	bl	2745c <atomic_test_and_clear_bit>
   18340:	2800      	cmp	r0, #0
   18342:	d068      	beq.n	18416 <bt_smp_encrypt_change+0xf2>
	if (hci_status) {
   18344:	b1e7      	cbz	r7, 18380 <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18346:	2103      	movs	r1, #3
   18348:	4630      	mov	r0, r6
   1834a:	f00e ff89 	bl	27260 <atomic_test_bit>
   1834e:	2800      	cmp	r0, #0
   18350:	d061      	beq.n	18416 <bt_smp_encrypt_change+0xf2>
			uint8_t smp_err = smp_err_get(
   18352:	4638      	mov	r0, r7
   18354:	f7f9 fcee 	bl	11d34 <bt_security_err_get>
	switch (auth_err) {
   18358:	3801      	subs	r0, #1
   1835a:	b2c0      	uxtb	r0, r0
   1835c:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   1835e:	bf8c      	ite	hi
   18360:	2400      	movhi	r4, #0
   18362:	4b75      	ldrls	r3, [pc, #468]	; (18538 <bt_smp_encrypt_change+0x214>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   18364:	f04f 0102 	mov.w	r1, #2
   18368:	bf98      	it	ls
   1836a:	5c1c      	ldrbls	r4, [r3, r0]
   1836c:	4630      	mov	r0, r6
   1836e:	f00e ffde 	bl	2732e <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   18372:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   18374:	4628      	mov	r0, r5
}
   18376:	b00c      	add	sp, #48	; 0x30
   18378:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   1837c:	f7ff bcd6 	b.w	17d2c <smp_pairing_complete>
	if (!conn->encrypt) {
   18380:	f898 300b 	ldrb.w	r3, [r8, #11]
   18384:	2b00      	cmp	r3, #0
   18386:	d046      	beq.n	18416 <bt_smp_encrypt_change+0xf2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18388:	2103      	movs	r1, #3
   1838a:	4630      	mov	r0, r6
   1838c:	f00e ff68 	bl	27260 <atomic_test_bit>
   18390:	b928      	cbnz	r0, 1839e <bt_smp_encrypt_change+0x7a>
		smp_reset(smp);
   18392:	4628      	mov	r0, r5
}
   18394:	b00c      	add	sp, #48	; 0x30
   18396:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   1839a:	f00f b871 	b.w	27480 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1839e:	2105      	movs	r1, #5
   183a0:	4630      	mov	r0, r6
   183a2:	f00e ff5d 	bl	27260 <atomic_test_bit>
   183a6:	b1b8      	cbz	r0, 183d8 <bt_smp_encrypt_change+0xb4>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   183a8:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   183ac:	071b      	lsls	r3, r3, #28
   183ae:	d507      	bpl.n	183c0 <bt_smp_encrypt_change+0x9c>
   183b0:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   183b4:	071f      	lsls	r7, r3, #28
   183b6:	d503      	bpl.n	183c0 <bt_smp_encrypt_change+0x9c>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   183b8:	2111      	movs	r1, #17
   183ba:	4630      	mov	r0, r6
   183bc:	f00e ffb7 	bl	2732e <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   183c0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   183c4:	f023 0308 	bic.w	r3, r3, #8
   183c8:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   183cc:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   183d0:	f023 0308 	bic.w	r3, r3, #8
   183d4:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   183d8:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   183dc:	07d8      	lsls	r0, r3, #31
   183de:	d51d      	bpl.n	1841c <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   183e0:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   183e2:	4628      	mov	r0, r5
   183e4:	f00e ffa3 	bl	2732e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   183e8:	2102      	movs	r1, #2
   183ea:	4630      	mov	r0, r6
   183ec:	f00e ff9f 	bl	2732e <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   183f0:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   183f2:	f8d3 70c0 	ldr.w	r7, [r3, #192]	; 0xc0
   183f6:	b9cf      	cbnz	r7, 1842c <bt_smp_encrypt_change+0x108>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   183f8:	f103 0090 	add.w	r0, r3, #144	; 0x90
   183fc:	f7f8 fcfe 	bl	10dfc <bt_addr_le_str>
   18400:	4b4e      	ldr	r3, [pc, #312]	; (1853c <bt_smp_encrypt_change+0x218>)
   18402:	9003      	str	r0, [sp, #12]
   18404:	e9cd 7301 	strd	r7, r3, [sp, #4]
   18408:	2201      	movs	r2, #1
   1840a:	463b      	mov	r3, r7
   1840c:	4638      	mov	r0, r7
   1840e:	494c      	ldr	r1, [pc, #304]	; (18540 <bt_smp_encrypt_change+0x21c>)
   18410:	9700      	str	r7, [sp, #0]
   18412:	f00e ff7d 	bl	27310 <z_log_msg_runtime_create.constprop.0>
}
   18416:	b00c      	add	sp, #48	; 0x30
   18418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1841c:	0799      	lsls	r1, r3, #30
   1841e:	d501      	bpl.n	18424 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   18420:	2108      	movs	r1, #8
   18422:	e7de      	b.n	183e2 <bt_smp_encrypt_change+0xbe>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   18424:	075a      	lsls	r2, r3, #29
   18426:	d5df      	bpl.n	183e8 <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   18428:	210a      	movs	r1, #10
   1842a:	e7da      	b.n	183e2 <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1842c:	2105      	movs	r1, #5
   1842e:	f00e ff17 	bl	27260 <atomic_test_bit>
   18432:	4607      	mov	r7, r0
   18434:	b9b0      	cbnz	r0, 18464 <bt_smp_encrypt_change+0x140>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   18436:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1843a:	07db      	lsls	r3, r3, #31
   1843c:	d512      	bpl.n	18464 <bt_smp_encrypt_change+0x140>
	struct bt_keys *keys = conn->le.keys;
   1843e:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   18440:	211a      	movs	r1, #26
   18442:	a805      	add	r0, sp, #20
	struct bt_keys *keys = conn->le.keys;
   18444:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   18448:	f7fb f866 	bl	13518 <bt_rand>
   1844c:	4681      	mov	r9, r0
   1844e:	b170      	cbz	r0, 1846e <bt_smp_encrypt_change+0x14a>
			LOG_ERR("Unable to get random bytes");
   18450:	4b3c      	ldr	r3, [pc, #240]	; (18544 <bt_smp_encrypt_change+0x220>)
   18452:	2201      	movs	r2, #1
   18454:	e9cd 7301 	strd	r7, r3, [sp, #4]
   18458:	4638      	mov	r0, r7
   1845a:	463b      	mov	r3, r7
   1845c:	4938      	ldr	r1, [pc, #224]	; (18540 <bt_smp_encrypt_change+0x21c>)
   1845e:	9700      	str	r7, [sp, #0]
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   18460:	f00e ff56 	bl	27310 <z_log_msg_runtime_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   18464:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   18468:	2900      	cmp	r1, #0
   1846a:	d1d4      	bne.n	18416 <bt_smp_encrypt_change+0xf2>
   1846c:	e782      	b.n	18374 <bt_smp_encrypt_change+0x50>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1846e:	2106      	movs	r1, #6
   18470:	4628      	mov	r0, r5
   18472:	f00e ff6c 	bl	2734e <smp_create_pdu.constprop.0>
		if (!buf) {
   18476:	4607      	mov	r7, r0
   18478:	b938      	cbnz	r0, 1848a <bt_smp_encrypt_change+0x166>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1847a:	4b33      	ldr	r3, [pc, #204]	; (18548 <bt_smp_encrypt_change+0x224>)
   1847c:	e9cd 7301 	strd	r7, r3, [sp, #4]
   18480:	2201      	movs	r2, #1
   18482:	463b      	mov	r3, r7
   18484:	492e      	ldr	r1, [pc, #184]	; (18540 <bt_smp_encrypt_change+0x21c>)
   18486:	9700      	str	r7, [sp, #0]
   18488:	e7ea      	b.n	18460 <bt_smp_encrypt_change+0x13c>
	return net_buf_simple_add(&buf->b, len);
   1848a:	2110      	movs	r1, #16
   1848c:	300c      	adds	r0, #12
   1848e:	f000 fee9 	bl	19264 <net_buf_simple_add>
   18492:	f898 200c 	ldrb.w	r2, [r8, #12]
   18496:	a905      	add	r1, sp, #20
   18498:	4682      	mov	sl, r0
   1849a:	f010 ffea 	bl	29472 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1849e:	f898 000c 	ldrb.w	r0, [r8, #12]
   184a2:	280f      	cmp	r0, #15
   184a4:	d805      	bhi.n	184b2 <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   184a6:	f1c0 0210 	rsb	r2, r0, #16
   184aa:	4649      	mov	r1, r9
   184ac:	4450      	add	r0, sl
   184ae:	f011 f81a 	bl	294e6 <memset>
		smp_send(smp, buf, NULL, NULL);
   184b2:	4639      	mov	r1, r7
   184b4:	2200      	movs	r2, #0
   184b6:	4628      	mov	r0, r5
   184b8:	f00e ff0d 	bl	272d6 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   184bc:	2107      	movs	r1, #7
   184be:	4628      	mov	r0, r5
   184c0:	f00e ff45 	bl	2734e <smp_create_pdu.constprop.0>
		if (!buf) {
   184c4:	4607      	mov	r7, r0
   184c6:	b908      	cbnz	r0, 184cc <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   184c8:	4b20      	ldr	r3, [pc, #128]	; (1854c <bt_smp_encrypt_change+0x228>)
   184ca:	e7d7      	b.n	1847c <bt_smp_encrypt_change+0x158>
   184cc:	210a      	movs	r1, #10
   184ce:	300c      	adds	r0, #12
   184d0:	f000 fec8 	bl	19264 <net_buf_simple_add>
   184d4:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   184d6:	aa09      	add	r2, sp, #36	; 0x24
   184d8:	ca03      	ldmia	r2!, {r0, r1}
   184da:	f8c3 0002 	str.w	r0, [r3, #2]
   184de:	f8c3 1006 	str.w	r1, [r3, #6]
   184e2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		smp_send(smp, buf, smp_ident_sent, NULL);
   184e6:	4639      	mov	r1, r7
   184e8:	4628      	mov	r0, r5
   184ea:	801a      	strh	r2, [r3, #0]
   184ec:	4a18      	ldr	r2, [pc, #96]	; (18550 <bt_smp_encrypt_change+0x22c>)
   184ee:	f00e fef2 	bl	272d6 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   184f2:	4630      	mov	r0, r6
   184f4:	210d      	movs	r1, #13
   184f6:	f00e feb3 	bl	27260 <atomic_test_bit>
   184fa:	ae09      	add	r6, sp, #36	; 0x24
   184fc:	2800      	cmp	r0, #0
   184fe:	d0b1      	beq.n	18464 <bt_smp_encrypt_change+0x140>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   18500:	2101      	movs	r1, #1
   18502:	4640      	mov	r0, r8
   18504:	f000 fa24 	bl	18950 <bt_keys_add_type>
   18508:	f108 074a 	add.w	r7, r8, #74	; 0x4a
   1850c:	ab05      	add	r3, sp, #20
   1850e:	461a      	mov	r2, r3
   18510:	ca03      	ldmia	r2!, {r0, r1}
   18512:	42b2      	cmp	r2, r6
   18514:	6038      	str	r0, [r7, #0]
   18516:	6079      	str	r1, [r7, #4]
   18518:	4613      	mov	r3, r2
   1851a:	f107 0708 	add.w	r7, r7, #8
   1851e:	d1f6      	bne.n	1850e <bt_smp_encrypt_change+0x1ea>
   18520:	4633      	mov	r3, r6
   18522:	cb03      	ldmia	r3!, {r0, r1}
   18524:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   18528:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   1852c:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   18530:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   18534:	e796      	b.n	18464 <bt_smp_encrypt_change+0x140>
   18536:	bf00      	nop
   18538:	0002ecf3 	.word	0x0002ecf3
   1853c:	0002ec49 	.word	0x0002ec49
   18540:	0002a3d8 	.word	0x0002a3d8
   18544:	0002ec5e 	.word	0x0002ec5e
   18548:	0002ec79 	.word	0x0002ec79
   1854c:	0002eca0 	.word	0x0002eca0
   18550:	00018591 	.word	0x00018591

00018554 <smp_timeout>:
{
   18554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("SMP Timeout");
   18556:	4b0c      	ldr	r3, [pc, #48]	; (18588 <smp_timeout+0x34>)
{
   18558:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   1855a:	9302      	str	r3, [sp, #8]
   1855c:	2300      	movs	r3, #0
   1855e:	2201      	movs	r2, #1
   18560:	4618      	mov	r0, r3
   18562:	e9cd 3300 	strd	r3, r3, [sp]
   18566:	4909      	ldr	r1, [pc, #36]	; (1858c <smp_timeout+0x38>)
   18568:	f00e fed2 	bl	27310 <z_log_msg_runtime_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1856c:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   18570:	2108      	movs	r1, #8
   18572:	f7ff fbdb 	bl	17d2c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   18576:	2104      	movs	r1, #4
   18578:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   1857c:	b004      	add	sp, #16
   1857e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   18582:	f00e bed4 	b.w	2732e <atomic_set_bit>
   18586:	bf00      	nop
   18588:	0002ecc8 	.word	0x0002ecc8
   1858c:	0002a3d8 	.word	0x0002a3d8

00018590 <smp_ident_sent>:
{
   18590:	b508      	push	{r3, lr}
	if (!err) {
   18592:	bb1a      	cbnz	r2, 185dc <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   18594:	7883      	ldrb	r3, [r0, #2]
   18596:	2b01      	cmp	r3, #1
   18598:	d120      	bne.n	185dc <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1859a:	2106      	movs	r1, #6
   1859c:	f00d ffcc 	bl	26538 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   185a0:	b970      	cbnz	r0, 185c0 <smp_ident_sent+0x30>
   185a2:	490f      	ldr	r1, [pc, #60]	; (185e0 <smp_ident_sent+0x50>)
   185a4:	f240 2365 	movw	r3, #613	; 0x265
   185a8:	4a0e      	ldr	r2, [pc, #56]	; (185e4 <smp_ident_sent+0x54>)
   185aa:	480f      	ldr	r0, [pc, #60]	; (185e8 <smp_ident_sent+0x58>)
   185ac:	f00c f9fb 	bl	249a6 <assert_print>
   185b0:	480e      	ldr	r0, [pc, #56]	; (185ec <smp_ident_sent+0x5c>)
   185b2:	f00c f9f8 	bl	249a6 <assert_print>
   185b6:	f240 2165 	movw	r1, #613	; 0x265
   185ba:	480a      	ldr	r0, [pc, #40]	; (185e4 <smp_ident_sent+0x54>)
   185bc:	f00c f9ec 	bl	24998 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   185c0:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   185c4:	f023 0301 	bic.w	r3, r3, #1
   185c8:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   185cc:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   185d0:	b921      	cbnz	r1, 185dc <smp_ident_sent+0x4c>
}
   185d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   185d6:	38ec      	subs	r0, #236	; 0xec
   185d8:	f7ff bba8 	b.w	17d2c <smp_pairing_complete>
}
   185dc:	bd08      	pop	{r3, pc}
   185de:	bf00      	nop
   185e0:	0002e43f 	.word	0x0002e43f
   185e4:	0002eb83 	.word	0x0002eb83
   185e8:	0002b339 	.word	0x0002b339
   185ec:	0002ecd4 	.word	0x0002ecd4

000185f0 <bt_smp_update_keys>:
{
   185f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   185f4:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   185f6:	f7fe fc95 	bl	16f24 <smp_chan_get>
	if (!smp) {
   185fa:	4605      	mov	r5, r0
   185fc:	2800      	cmp	r0, #0
   185fe:	d074      	beq.n	186ea <bt_smp_update_keys+0xfa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18600:	1d07      	adds	r7, r0, #4
   18602:	2103      	movs	r1, #3
   18604:	4638      	mov	r0, r7
   18606:	f00e fe2b 	bl	27260 <atomic_test_bit>
   1860a:	2800      	cmp	r0, #0
   1860c:	d06d      	beq.n	186ea <bt_smp_update_keys+0xfa>
	if (conn->le.keys) {
   1860e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   18612:	b108      	cbz	r0, 18618 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   18614:	f000 f9d8 	bl	189c8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18618:	f104 0890 	add.w	r8, r4, #144	; 0x90
   1861c:	4641      	mov	r1, r8
   1861e:	7a20      	ldrb	r0, [r4, #8]
   18620:	f000 f894 	bl	1874c <bt_keys_get_addr>
   18624:	4606      	mov	r6, r0
   18626:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   1862a:	b9a0      	cbnz	r0, 18656 <bt_smp_update_keys+0x66>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1862c:	4640      	mov	r0, r8
   1862e:	f7f8 fbe5 	bl	10dfc <bt_addr_le_str>
   18632:	4b39      	ldr	r3, [pc, #228]	; (18718 <bt_smp_update_keys+0x128>)
   18634:	9003      	str	r0, [sp, #12]
   18636:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1863a:	4630      	mov	r0, r6
   1863c:	4633      	mov	r3, r6
   1863e:	2201      	movs	r2, #1
   18640:	4936      	ldr	r1, [pc, #216]	; (1871c <bt_smp_update_keys+0x12c>)
   18642:	9600      	str	r6, [sp, #0]
   18644:	f00e fe64 	bl	27310 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   18648:	2108      	movs	r1, #8
   1864a:	4628      	mov	r0, r5
}
   1864c:	b004      	add	sp, #16
   1864e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   18652:	f7ff bbe9 	b.w	17e28 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   18656:	210e      	movs	r1, #14
   18658:	4638      	mov	r0, r7
   1865a:	f00e fe01 	bl	27260 <atomic_test_bit>
   1865e:	b128      	cbz	r0, 1866c <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   18660:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18664:	7b53      	ldrb	r3, [r2, #13]
   18666:	f043 0302 	orr.w	r3, r3, #2
   1866a:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1866c:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1866e:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   18672:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   18674:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   18676:	d83b      	bhi.n	186f0 <bt_smp_update_keys+0x100>
   18678:	2a00      	cmp	r2, #0
   1867a:	d040      	beq.n	186fe <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1867c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18680:	7b53      	ldrb	r3, [r2, #13]
   18682:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   18686:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   18688:	7d2b      	ldrb	r3, [r5, #20]
   1868a:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1868c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   18690:	428b      	cmp	r3, r1
   18692:	bf28      	it	cs
   18694:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18696:	4638      	mov	r0, r7
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   18698:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1869a:	2105      	movs	r1, #5
   1869c:	f00e fde0 	bl	27260 <atomic_test_bit>
   186a0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   186a4:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   186a6:	b398      	cbz	r0, 18710 <bt_smp_update_keys+0x120>
		conn->le.keys->flags |= BT_KEYS_SC;
   186a8:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   186ac:	210d      	movs	r1, #13
   186ae:	4638      	mov	r0, r7
		conn->le.keys->flags |= BT_KEYS_SC;
   186b0:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   186b2:	f00e fdd5 	bl	27260 <atomic_test_bit>
   186b6:	b1c0      	cbz	r0, 186ea <bt_smp_update_keys+0xfa>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   186b8:	2120      	movs	r1, #32
   186ba:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   186be:	f000 f947 	bl	18950 <bt_keys_add_type>
   186c2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   186c6:	f105 0247 	add.w	r2, r5, #71	; 0x47
   186ca:	331a      	adds	r3, #26
   186cc:	3557      	adds	r5, #87	; 0x57
   186ce:	f852 1b04 	ldr.w	r1, [r2], #4
   186d2:	42aa      	cmp	r2, r5
   186d4:	f843 1b04 	str.w	r1, [r3], #4
   186d8:	d1f9      	bne.n	186ce <bt_smp_update_keys+0xde>
__ssp_bos_icheck3(memset, void *, int)
   186da:	2300      	movs	r3, #0
   186dc:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   186e0:	6113      	str	r3, [r2, #16]
   186e2:	6153      	str	r3, [r2, #20]
   186e4:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   186e8:	8313      	strh	r3, [r2, #24]
}
   186ea:	b004      	add	sp, #16
   186ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   186f0:	3a05      	subs	r2, #5
   186f2:	2a01      	cmp	r2, #1
   186f4:	d803      	bhi.n	186fe <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   186f6:	f043 0320 	orr.w	r3, r3, #32
   186fa:	734b      	strb	r3, [r1, #13]
   186fc:	e7be      	b.n	1867c <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   186fe:	f023 0320 	bic.w	r3, r3, #32
   18702:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   18704:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   18708:	7b53      	ldrb	r3, [r2, #13]
   1870a:	f023 0301 	bic.w	r3, r3, #1
   1870e:	e7ba      	b.n	18686 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   18710:	f022 0210 	bic.w	r2, r2, #16
   18714:	735a      	strb	r2, [r3, #13]
   18716:	e7e8      	b.n	186ea <bt_smp_update_keys+0xfa>
   18718:	0002e932 	.word	0x0002e932
   1871c:	0002a3d8 	.word	0x0002a3d8

00018720 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   18720:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18722:	4b07      	ldr	r3, [pc, #28]	; (18740 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   18724:	4807      	ldr	r0, [pc, #28]	; (18744 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   18726:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1872a:	f003 0306 	and.w	r3, r3, #6
   1872e:	1f9a      	subs	r2, r3, #6
   18730:	4253      	negs	r3, r2
   18732:	4153      	adcs	r3, r2
   18734:	4a04      	ldr	r2, [pc, #16]	; (18748 <bt_smp_init+0x28>)
   18736:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   18738:	f7fa ff18 	bl	1356c <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1873c:	2000      	movs	r0, #0
   1873e:	bd08      	pop	{r3, pc}
   18740:	20008000 	.word	0x20008000
   18744:	20008544 	.word	0x20008544
   18748:	20021dbf 	.word	0x20021dbf

0001874c <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1874c:	b570      	push	{r4, r5, r6, lr}
   1874e:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	__ASSERT_NO_MSG(addr != NULL);
   18750:	460d      	mov	r5, r1
   18752:	b959      	cbnz	r1, 1876c <bt_keys_get_addr+0x20>
   18754:	4913      	ldr	r1, [pc, #76]	; (187a4 <bt_keys_get_addr+0x58>)
   18756:	4814      	ldr	r0, [pc, #80]	; (187a8 <bt_keys_get_addr+0x5c>)
   18758:	2359      	movs	r3, #89	; 0x59
   1875a:	4a14      	ldr	r2, [pc, #80]	; (187ac <bt_keys_get_addr+0x60>)
   1875c:	f00c f923 	bl	249a6 <assert_print>
   18760:	2159      	movs	r1, #89	; 0x59
   18762:	4812      	ldr	r0, [pc, #72]	; (187ac <bt_keys_get_addr+0x60>)
   18764:	f00c f918 	bl	24998 <assert_post_action>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   18768:	2000      	movs	r0, #0
   1876a:	e019      	b.n	187a0 <bt_keys_get_addr+0x54>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1876c:	4c10      	ldr	r4, [pc, #64]	; (187b0 <bt_keys_get_addr+0x64>)
   1876e:	f814 3b01 	ldrb.w	r3, [r4], #1
   18772:	4283      	cmp	r3, r0
   18774:	d104      	bne.n	18780 <bt_keys_get_addr+0x34>
	return memcmp(a, b, sizeof(*a));
   18776:	2207      	movs	r2, #7
   18778:	4620      	mov	r0, r4
   1877a:	f010 fe6a 	bl	29452 <memcmp>
   1877e:	b170      	cbz	r0, 1879e <bt_keys_get_addr+0x52>
   18780:	2207      	movs	r2, #7
   18782:	490c      	ldr	r1, [pc, #48]	; (187b4 <bt_keys_get_addr+0x68>)
   18784:	480c      	ldr	r0, [pc, #48]	; (187b8 <bt_keys_get_addr+0x6c>)
   18786:	f010 fe64 	bl	29452 <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1878a:	2800      	cmp	r0, #0
   1878c:	d1ec      	bne.n	18768 <bt_keys_get_addr+0x1c>
		keys->id = id;
   1878e:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   18792:	682b      	ldr	r3, [r5, #0]
   18794:	6023      	str	r3, [r4, #0]
   18796:	88ab      	ldrh	r3, [r5, #4]
   18798:	80a3      	strh	r3, [r4, #4]
   1879a:	79ab      	ldrb	r3, [r5, #6]
   1879c:	71a3      	strb	r3, [r4, #6]
		keys = &key_pool[i];
   1879e:	4804      	ldr	r0, [pc, #16]	; (187b0 <bt_keys_get_addr+0x64>)
}
   187a0:	bd70      	pop	{r4, r5, r6, pc}
   187a2:	bf00      	nop
   187a4:	0002ed74 	.word	0x0002ed74
   187a8:	0002b339 	.word	0x0002b339
   187ac:	0002ed44 	.word	0x0002ed44
   187b0:	20021114 	.word	0x20021114
   187b4:	0002d1b1 	.word	0x0002d1b1
   187b8:	20021115 	.word	0x20021115

000187bc <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   187bc:	460b      	mov	r3, r1
   187be:	b510      	push	{r4, lr}
   187c0:	4611      	mov	r1, r2
   187c2:	4604      	mov	r4, r0
	int i;

	__ASSERT_NO_MSG(func != NULL);
   187c4:	b963      	cbnz	r3, 187e0 <bt_keys_foreach_type+0x24>
   187c6:	4909      	ldr	r1, [pc, #36]	; (187ec <bt_keys_foreach_type+0x30>)
   187c8:	4809      	ldr	r0, [pc, #36]	; (187f0 <bt_keys_foreach_type+0x34>)
   187ca:	23b3      	movs	r3, #179	; 0xb3
   187cc:	4a09      	ldr	r2, [pc, #36]	; (187f4 <bt_keys_foreach_type+0x38>)
   187ce:	f00c f8ea 	bl	249a6 <assert_print>
   187d2:	21b3      	movs	r1, #179	; 0xb3
   187d4:	4807      	ldr	r0, [pc, #28]	; (187f4 <bt_keys_foreach_type+0x38>)
   187d6:	f00c f8df 	bl	24998 <assert_post_action>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
   187da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   187de:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   187e0:	4805      	ldr	r0, [pc, #20]	; (187f8 <bt_keys_foreach_type+0x3c>)
   187e2:	89c2      	ldrh	r2, [r0, #14]
   187e4:	4222      	tst	r2, r4
   187e6:	d1f8      	bne.n	187da <bt_keys_foreach_type+0x1e>
}
   187e8:	bd10      	pop	{r4, pc}
   187ea:	bf00      	nop
   187ec:	0002ed88 	.word	0x0002ed88
   187f0:	0002b339 	.word	0x0002b339
   187f4:	0002ed44 	.word	0x0002ed44
   187f8:	20021114 	.word	0x20021114

000187fc <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   187fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187fe:	4605      	mov	r5, r0
   18800:	460e      	mov	r6, r1
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   18802:	4614      	mov	r4, r2
   18804:	b9aa      	cbnz	r2, 18832 <bt_keys_find+0x36>
   18806:	490f      	ldr	r1, [pc, #60]	; (18844 <bt_keys_find+0x48>)
   18808:	480f      	ldr	r0, [pc, #60]	; (18848 <bt_keys_find+0x4c>)
   1880a:	23c0      	movs	r3, #192	; 0xc0
   1880c:	4a0f      	ldr	r2, [pc, #60]	; (1884c <bt_keys_find+0x50>)
   1880e:	f00c f8ca 	bl	249a6 <assert_print>
   18812:	21c0      	movs	r1, #192	; 0xc0
   18814:	480d      	ldr	r0, [pc, #52]	; (1884c <bt_keys_find+0x50>)
   18816:	f00c f8bf 	bl	24998 <assert_post_action>

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1881a:	b18a      	cbz	r2, 18840 <bt_keys_find+0x44>
   1881c:	42b1      	cmp	r1, r6
   1881e:	d10f      	bne.n	18840 <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   18820:	2207      	movs	r2, #7
   18822:	4621      	mov	r1, r4
   18824:	480a      	ldr	r0, [pc, #40]	; (18850 <bt_keys_find+0x54>)
   18826:	f010 fe14 	bl	29452 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1882a:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1882c:	b918      	cbnz	r0, 18836 <bt_keys_find+0x3a>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
   1882e:	4809      	ldr	r0, [pc, #36]	; (18854 <bt_keys_find+0x58>)
   18830:	e007      	b.n	18842 <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18832:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   18834:	4f07      	ldr	r7, [pc, #28]	; (18854 <bt_keys_find+0x58>)
   18836:	89fa      	ldrh	r2, [r7, #14]
   18838:	7839      	ldrb	r1, [r7, #0]
   1883a:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1883c:	2b00      	cmp	r3, #0
   1883e:	d0ec      	beq.n	1881a <bt_keys_find+0x1e>
		}
	}

	return NULL;
   18840:	2000      	movs	r0, #0
}
   18842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18844:	0002ed74 	.word	0x0002ed74
   18848:	0002b339 	.word	0x0002b339
   1884c:	0002ed44 	.word	0x0002ed44
   18850:	20021115 	.word	0x20021115
   18854:	20021114 	.word	0x20021114

00018858 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   18858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1885a:	4606      	mov	r6, r0
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   1885c:	460c      	mov	r4, r1
   1885e:	b949      	cbnz	r1, 18874 <bt_keys_find_irk+0x1c>
   18860:	4923      	ldr	r1, [pc, #140]	; (188f0 <bt_keys_find_irk+0x98>)
   18862:	4824      	ldr	r0, [pc, #144]	; (188f4 <bt_keys_find_irk+0x9c>)
   18864:	23e9      	movs	r3, #233	; 0xe9
   18866:	4a24      	ldr	r2, [pc, #144]	; (188f8 <bt_keys_find_irk+0xa0>)
   18868:	f00c f89d 	bl	249a6 <assert_print>
   1886c:	21e9      	movs	r1, #233	; 0xe9
   1886e:	4822      	ldr	r0, [pc, #136]	; (188f8 <bt_keys_find_irk+0xa0>)
   18870:	f00c f892 	bl	24998 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   18874:	780b      	ldrb	r3, [r1, #0]
   18876:	2b01      	cmp	r3, #1
   18878:	d001      	beq.n	1887e <bt_keys_find_irk+0x26>

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   1887a:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   1887c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1887e:	798b      	ldrb	r3, [r1, #6]
   18880:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18884:	2b40      	cmp	r3, #64	; 0x40
   18886:	d1f8      	bne.n	1887a <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18888:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1888a:	4d1c      	ldr	r5, [pc, #112]	; (188fc <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   1888c:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   18890:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   18892:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   18894:	f002 0202 	and.w	r2, r2, #2
   18898:	b1db      	cbz	r3, 188d2 <bt_keys_find_irk+0x7a>
   1889a:	2300      	movs	r3, #0
   1889c:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1889e:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   188a0:	f002 0202 	and.w	r2, r2, #2
   188a4:	2b00      	cmp	r3, #0
   188a6:	d1e8      	bne.n	1887a <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   188a8:	2a00      	cmp	r2, #0
   188aa:	d0e6      	beq.n	1887a <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   188ac:	42b1      	cmp	r1, r6
   188ae:	d1e4      	bne.n	1887a <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   188b0:	1c67      	adds	r7, r4, #1
   188b2:	4639      	mov	r1, r7
   188b4:	4812      	ldr	r0, [pc, #72]	; (18900 <bt_keys_find_irk+0xa8>)
   188b6:	f00d f92d 	bl	25b14 <bt_rpa_irk_matches>
   188ba:	2301      	movs	r3, #1
   188bc:	2800      	cmp	r0, #0
   188be:	d0ed      	beq.n	1889c <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   188c0:	f8d4 3001 	ldr.w	r3, [r4, #1]
   188c4:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   188c8:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   188cc:	4b0d      	ldr	r3, [pc, #52]	; (18904 <bt_keys_find_irk+0xac>)
   188ce:	809a      	strh	r2, [r3, #4]
}
   188d0:	e00b      	b.n	188ea <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   188d2:	2a00      	cmp	r2, #0
   188d4:	d0e2      	beq.n	1889c <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   188d6:	42b0      	cmp	r0, r6
   188d8:	d1e0      	bne.n	1889c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   188da:	2206      	movs	r2, #6
   188dc:	4639      	mov	r1, r7
   188de:	1c60      	adds	r0, r4, #1
   188e0:	f010 fdb7 	bl	29452 <memcmp>
   188e4:	2301      	movs	r3, #1
   188e6:	2800      	cmp	r0, #0
   188e8:	d1d2      	bne.n	18890 <bt_keys_find_irk+0x38>
			return &key_pool[i];
   188ea:	4804      	ldr	r0, [pc, #16]	; (188fc <bt_keys_find_irk+0xa4>)
   188ec:	e7c6      	b.n	1887c <bt_keys_find_irk+0x24>
   188ee:	bf00      	nop
   188f0:	0002ed74 	.word	0x0002ed74
   188f4:	0002b339 	.word	0x0002b339
   188f8:	0002ed44 	.word	0x0002ed44
   188fc:	20021114 	.word	0x20021114
   18900:	2002113e 	.word	0x2002113e
   18904:	2002114e 	.word	0x2002114e

00018908 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   18908:	b510      	push	{r4, lr}
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   1890a:	b959      	cbnz	r1, 18924 <bt_keys_find_addr+0x1c>
   1890c:	490c      	ldr	r1, [pc, #48]	; (18940 <bt_keys_find_addr+0x38>)
   1890e:	480d      	ldr	r0, [pc, #52]	; (18944 <bt_keys_find_addr+0x3c>)
   18910:	f44f 738d 	mov.w	r3, #282	; 0x11a
   18914:	4a0c      	ldr	r2, [pc, #48]	; (18948 <bt_keys_find_addr+0x40>)
   18916:	f00c f846 	bl	249a6 <assert_print>
   1891a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1891e:	480a      	ldr	r0, [pc, #40]	; (18948 <bt_keys_find_addr+0x40>)
   18920:	f00c f83a 	bl	24998 <assert_post_action>

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   18924:	4c09      	ldr	r4, [pc, #36]	; (1894c <bt_keys_find_addr+0x44>)
   18926:	7823      	ldrb	r3, [r4, #0]
   18928:	4283      	cmp	r3, r0
   1892a:	d104      	bne.n	18936 <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   1892c:	2207      	movs	r2, #7
   1892e:	1c60      	adds	r0, r4, #1
   18930:	f010 fd8f 	bl	29452 <memcmp>
   18934:	b108      	cbz	r0, 1893a <bt_keys_find_addr+0x32>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   18936:	2000      	movs	r0, #0
}
   18938:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1893a:	4620      	mov	r0, r4
   1893c:	e7fc      	b.n	18938 <bt_keys_find_addr+0x30>
   1893e:	bf00      	nop
   18940:	0002ed74 	.word	0x0002ed74
   18944:	0002b339 	.word	0x0002b339
   18948:	0002ed44 	.word	0x0002ed44
   1894c:	20021114 	.word	0x20021114

00018950 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
   18950:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   18952:	b958      	cbnz	r0, 1896c <bt_keys_add_type+0x1c>
   18954:	4907      	ldr	r1, [pc, #28]	; (18974 <bt_keys_add_type+0x24>)
   18956:	4808      	ldr	r0, [pc, #32]	; (18978 <bt_keys_add_type+0x28>)
   18958:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1895c:	4a07      	ldr	r2, [pc, #28]	; (1897c <bt_keys_add_type+0x2c>)
   1895e:	f00c f822 	bl	249a6 <assert_print>
   18962:	f44f 7195 	mov.w	r1, #298	; 0x12a
   18966:	4805      	ldr	r0, [pc, #20]	; (1897c <bt_keys_add_type+0x2c>)
   18968:	f00c f816 	bl	24998 <assert_post_action>

	keys->keys |= type;
   1896c:	89c3      	ldrh	r3, [r0, #14]
   1896e:	4319      	orrs	r1, r3
   18970:	81c1      	strh	r1, [r0, #14]
}
   18972:	bd08      	pop	{r3, pc}
   18974:	0002ed9c 	.word	0x0002ed9c
   18978:	0002b339 	.word	0x0002b339
   1897c:	0002ed44 	.word	0x0002ed44

00018980 <bt_keys_get_type>:
{
   18980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18982:	4606      	mov	r6, r0
   18984:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   18986:	4615      	mov	r5, r2
   18988:	b94a      	cbnz	r2, 1899e <bt_keys_get_type+0x1e>
   1898a:	490c      	ldr	r1, [pc, #48]	; (189bc <bt_keys_get_type+0x3c>)
   1898c:	480c      	ldr	r0, [pc, #48]	; (189c0 <bt_keys_get_type+0x40>)
   1898e:	23d2      	movs	r3, #210	; 0xd2
   18990:	4a0c      	ldr	r2, [pc, #48]	; (189c4 <bt_keys_get_type+0x44>)
   18992:	f00c f808 	bl	249a6 <assert_print>
   18996:	21d2      	movs	r1, #210	; 0xd2
   18998:	480a      	ldr	r0, [pc, #40]	; (189c4 <bt_keys_get_type+0x44>)
   1899a:	f00b fffd 	bl	24998 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1899e:	f7ff ff2d 	bl	187fc <bt_keys_find>
	if (keys) {
   189a2:	4604      	mov	r4, r0
   189a4:	b940      	cbnz	r0, 189b8 <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   189a6:	4629      	mov	r1, r5
   189a8:	4638      	mov	r0, r7
   189aa:	f7ff fecf 	bl	1874c <bt_keys_get_addr>
	if (!keys) {
   189ae:	4604      	mov	r4, r0
   189b0:	b110      	cbz	r0, 189b8 <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   189b2:	4631      	mov	r1, r6
   189b4:	f7ff ffcc 	bl	18950 <bt_keys_add_type>
}
   189b8:	4620      	mov	r0, r4
   189ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   189bc:	0002ed74 	.word	0x0002ed74
   189c0:	0002b339 	.word	0x0002b339
   189c4:	0002ed44 	.word	0x0002ed44

000189c8 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   189c8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);
   189ca:	4604      	mov	r4, r0
   189cc:	b958      	cbnz	r0, 189e6 <bt_keys_clear+0x1e>
   189ce:	490c      	ldr	r1, [pc, #48]	; (18a00 <bt_keys_clear+0x38>)
   189d0:	480c      	ldr	r0, [pc, #48]	; (18a04 <bt_keys_clear+0x3c>)
   189d2:	f240 1331 	movw	r3, #305	; 0x131
   189d6:	4a0c      	ldr	r2, [pc, #48]	; (18a08 <bt_keys_clear+0x40>)
   189d8:	f00b ffe5 	bl	249a6 <assert_print>
   189dc:	f240 1131 	movw	r1, #305	; 0x131
   189e0:	4809      	ldr	r0, [pc, #36]	; (18a08 <bt_keys_clear+0x40>)
   189e2:	f00b ffd9 	bl	24998 <assert_post_action>

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   189e6:	7a03      	ldrb	r3, [r0, #8]
   189e8:	075b      	lsls	r3, r3, #29
   189ea:	d501      	bpl.n	189f0 <bt_keys_clear+0x28>
		bt_id_del(keys);
   189ec:	f7f9 ffb0 	bl	12950 <bt_id_del>
   189f0:	4620      	mov	r0, r4
		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   189f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   189f6:	225c      	movs	r2, #92	; 0x5c
   189f8:	2100      	movs	r1, #0
   189fa:	f010 bd74 	b.w	294e6 <memset>
   189fe:	bf00      	nop
   18a00:	0002ed9c 	.word	0x0002ed9c
   18a04:	0002b339 	.word	0x0002b339
   18a08:	0002ed44 	.word	0x0002ed44

00018a0c <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   18a0c:	4288      	cmp	r0, r1
{
   18a0e:	b510      	push	{r4, lr}
   18a10:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   18a14:	d911      	bls.n	18a3a <sys_memcpy_swap+0x2e>
   18a16:	188c      	adds	r4, r1, r2
   18a18:	42a0      	cmp	r0, r4
   18a1a:	d211      	bcs.n	18a40 <sys_memcpy_swap+0x34>
   18a1c:	490d      	ldr	r1, [pc, #52]	; (18a54 <sys_memcpy_swap+0x48>)
   18a1e:	f240 2315 	movw	r3, #533	; 0x215
   18a22:	4a0d      	ldr	r2, [pc, #52]	; (18a58 <sys_memcpy_swap+0x4c>)
   18a24:	480d      	ldr	r0, [pc, #52]	; (18a5c <sys_memcpy_swap+0x50>)
   18a26:	f00b ffbe 	bl	249a6 <assert_print>
   18a2a:	480d      	ldr	r0, [pc, #52]	; (18a60 <sys_memcpy_swap+0x54>)
   18a2c:	f00b ffbb 	bl	249a6 <assert_print>
   18a30:	f240 2115 	movw	r1, #533	; 0x215
   18a34:	4808      	ldr	r0, [pc, #32]	; (18a58 <sys_memcpy_swap+0x4c>)
   18a36:	f00b ffaf 	bl	24998 <assert_post_action>
   18a3a:	d0ef      	beq.n	18a1c <sys_memcpy_swap+0x10>
   18a3c:	4299      	cmp	r1, r3
   18a3e:	e7ec      	b.n	18a1a <sys_memcpy_swap+0xe>
	psrc += length - 1;
   18a40:	3a01      	subs	r2, #1
   18a42:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   18a44:	f811 2901 	ldrb.w	r2, [r1], #-1
   18a48:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   18a4c:	4283      	cmp	r3, r0
   18a4e:	d1f9      	bne.n	18a44 <sys_memcpy_swap+0x38>
}
   18a50:	bd10      	pop	{r4, pc}
   18a52:	bf00      	nop
   18a54:	0002dc6c 	.word	0x0002dc6c
   18a58:	0002dc3a 	.word	0x0002dc3a
   18a5c:	0002b339 	.word	0x0002b339
   18a60:	0002dcc3 	.word	0x0002dcc3

00018a64 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   18a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a68:	b09a      	sub	sp, #104	; 0x68
   18a6a:	4616      	mov	r6, r2
   18a6c:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   18a70:	aa0c      	add	r2, sp, #48	; 0x30
{
   18a72:	4684      	mov	ip, r0
   18a74:	468a      	mov	sl, r1
   18a76:	4690      	mov	r8, r2
   18a78:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   18a7a:	4b2c      	ldr	r3, [pc, #176]	; (18b2c <bt_crypto_f5+0xc8>)
   18a7c:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   18a80:	4614      	mov	r4, r2
   18a82:	6818      	ldr	r0, [r3, #0]
   18a84:	6859      	ldr	r1, [r3, #4]
   18a86:	3308      	adds	r3, #8
   18a88:	c403      	stmia	r4!, {r0, r1}
   18a8a:	4573      	cmp	r3, lr
   18a8c:	4622      	mov	r2, r4
   18a8e:	d1f7      	bne.n	18a80 <bt_crypto_f5+0x1c>
   18a90:	6818      	ldr	r0, [r3, #0]
   18a92:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   18a94:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   18a96:	6020      	str	r0, [r4, #0]
   18a98:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   18a9a:	2220      	movs	r2, #32
   18a9c:	a804      	add	r0, sp, #16
   18a9e:	f7ff ffb5 	bl	18a0c <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   18aa2:	466b      	mov	r3, sp
   18aa4:	2220      	movs	r2, #32
   18aa6:	4822      	ldr	r0, [pc, #136]	; (18b30 <bt_crypto_f5+0xcc>)
   18aa8:	a904      	add	r1, sp, #16
   18aaa:	f00e feb4 	bl	27816 <bt_crypto_aes_cmac>
	if (err) {
   18aae:	4604      	mov	r4, r0
   18ab0:	bbc0      	cbnz	r0, 18b24 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   18ab2:	2210      	movs	r2, #16
   18ab4:	4651      	mov	r1, sl
   18ab6:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   18aba:	f7ff ffa7 	bl	18a0c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   18abe:	2210      	movs	r2, #16
   18ac0:	4631      	mov	r1, r6
   18ac2:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   18ac6:	f7ff ffa1 	bl	18a0c <sys_memcpy_swap>
	m[37] = a1->type;
   18aca:	4629      	mov	r1, r5
   18acc:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   18ad0:	2206      	movs	r2, #6
   18ad2:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   18ad6:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   18ada:	f7ff ff97 	bl	18a0c <sys_memcpy_swap>
	m[44] = a2->type;
   18ade:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18ae0:	2206      	movs	r2, #6
	m[44] = a2->type;
   18ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18ae6:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   18aea:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18aee:	f7ff ff8d 	bl	18a0c <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   18af2:	464b      	mov	r3, r9
   18af4:	2235      	movs	r2, #53	; 0x35
   18af6:	4641      	mov	r1, r8
   18af8:	4668      	mov	r0, sp
   18afa:	f00e fe8c 	bl	27816 <bt_crypto_aes_cmac>
	if (err) {
   18afe:	4604      	mov	r4, r0
   18b00:	b980      	cbnz	r0, 18b24 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   18b02:	4648      	mov	r0, r9
   18b04:	f00e fe79 	bl	277fa <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   18b08:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   18b0a:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   18b0c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   18b10:	4641      	mov	r1, r8
   18b12:	463b      	mov	r3, r7
   18b14:	4668      	mov	r0, sp
   18b16:	f00e fe7e 	bl	27816 <bt_crypto_aes_cmac>
	if (err) {
   18b1a:	4604      	mov	r4, r0
   18b1c:	b910      	cbnz	r0, 18b24 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   18b1e:	4638      	mov	r0, r7
   18b20:	f00e fe6b 	bl	277fa <sys_mem_swap.constprop.0>

	return 0;
}
   18b24:	4620      	mov	r0, r4
   18b26:	b01a      	add	sp, #104	; 0x68
   18b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18b2c:	0002a51c 	.word	0x0002a51c
   18b30:	0002edb8 	.word	0x0002edb8

00018b34 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   18b34:	b570      	push	{r4, r5, r6, lr}
   18b36:	460e      	mov	r6, r1
   18b38:	461d      	mov	r5, r3
   18b3a:	4614      	mov	r4, r2
   18b3c:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   18b3e:	4601      	mov	r1, r0
   18b40:	2220      	movs	r2, #32
   18b42:	a804      	add	r0, sp, #16
   18b44:	f7ff ff62 	bl	18a0c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   18b48:	2220      	movs	r2, #32
   18b4a:	4631      	mov	r1, r6
   18b4c:	a80c      	add	r0, sp, #48	; 0x30
   18b4e:	f7ff ff5d 	bl	18a0c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   18b52:	2210      	movs	r2, #16
   18b54:	4629      	mov	r1, r5
   18b56:	a814      	add	r0, sp, #80	; 0x50
   18b58:	f7ff ff58 	bl	18a0c <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   18b5c:	2210      	movs	r2, #16
   18b5e:	4621      	mov	r1, r4
   18b60:	4668      	mov	r0, sp
   18b62:	f7ff ff53 	bl	18a0c <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   18b66:	466b      	mov	r3, sp
   18b68:	2250      	movs	r2, #80	; 0x50
   18b6a:	4618      	mov	r0, r3
   18b6c:	a904      	add	r1, sp, #16
   18b6e:	f00e fe52 	bl	27816 <bt_crypto_aes_cmac>
	if (err) {
   18b72:	b940      	cbnz	r0, 18b86 <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   18b74:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   18b76:	4a05      	ldr	r2, [pc, #20]	; (18b8c <bt_crypto_g2+0x58>)
   18b78:	ba1b      	rev	r3, r3
   18b7a:	fbb3 f1f2 	udiv	r1, r3, r2
   18b7e:	fb02 3311 	mls	r3, r2, r1, r3
   18b82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   18b84:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   18b86:	b018      	add	sp, #96	; 0x60
   18b88:	bd70      	pop	{r4, r5, r6, pc}
   18b8a:	bf00      	nop
   18b8c:	000f4240 	.word	0x000f4240

00018b90 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   18b90:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   18b92:	4804      	ldr	r0, [pc, #16]	; (18ba4 <fs_init+0x14>)
   18b94:	f010 fa84 	bl	290a0 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   18b98:	4b03      	ldr	r3, [pc, #12]	; (18ba8 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   18b9a:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   18b9c:	e9c3 3300 	strd	r3, r3, [r3]
   18ba0:	bd08      	pop	{r3, pc}
   18ba2:	bf00      	nop
   18ba4:	20021170 	.word	0x20021170
   18ba8:	20021184 	.word	0x20021184

00018bac <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   18bac:	2234      	movs	r2, #52	; 0x34
   18bae:	4b02      	ldr	r3, [pc, #8]	; (18bb8 <net_buf_pool_get+0xc>)
   18bb0:	fb02 3000 	mla	r0, r2, r0, r3
   18bb4:	4770      	bx	lr
   18bb6:	bf00      	nop
   18bb8:	20008be8 	.word	0x20008be8

00018bbc <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18bbc:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18bbe:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18bc0:	4b06      	ldr	r3, [pc, #24]	; (18bdc <net_buf_id+0x20>)
   18bc2:	fb01 3302 	mla	r3, r1, r2, r3
   18bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18bcc:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18bce:	331b      	adds	r3, #27
   18bd0:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   18bd4:	fbb0 f0f3 	udiv	r0, r0, r3
   18bd8:	4770      	bx	lr
   18bda:	bf00      	nop
   18bdc:	20008be8 	.word	0x20008be8

00018be0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   18be0:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18be2:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18be4:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18be6:	4b09      	ldr	r3, [pc, #36]	; (18c0c <fixed_data_alloc+0x2c>)
   18be8:	fb04 3302 	mla	r3, r4, r2, r3
   18bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   18bee:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18bf0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   18bf2:	681a      	ldr	r2, [r3, #0]
   18bf4:	4294      	cmp	r4, r2
   18bf6:	bf94      	ite	ls
   18bf8:	600c      	strls	r4, [r1, #0]
   18bfa:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   18bfc:	e9d3 5400 	ldrd	r5, r4, [r3]
   18c00:	f7ff ffdc 	bl	18bbc <net_buf_id>
}
   18c04:	fb05 4000 	mla	r0, r5, r0, r4
   18c08:	bd38      	pop	{r3, r4, r5, pc}
   18c0a:	bf00      	nop
   18c0c:	20008be8 	.word	0x20008be8

00018c10 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   18c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c14:	b085      	sub	sp, #20
   18c16:	9103      	str	r1, [sp, #12]
   18c18:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18c1a:	4619      	mov	r1, r3
   18c1c:	4610      	mov	r0, r2
{
   18c1e:	4692      	mov	sl, r2
   18c20:	4699      	mov	r9, r3
   18c22:	4690      	mov	r8, r2
   18c24:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18c26:	f010 fb1f 	bl	29268 <sys_clock_timeout_end_calc>
   18c2a:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   18c2e:	b945      	cbnz	r5, 18c42 <net_buf_alloc_len+0x32>
   18c30:	4966      	ldr	r1, [pc, #408]	; (18dcc <net_buf_alloc_len+0x1bc>)
   18c32:	23f4      	movs	r3, #244	; 0xf4
   18c34:	4a66      	ldr	r2, [pc, #408]	; (18dd0 <net_buf_alloc_len+0x1c0>)
   18c36:	4867      	ldr	r0, [pc, #412]	; (18dd4 <net_buf_alloc_len+0x1c4>)
   18c38:	f00b feb5 	bl	249a6 <assert_print>
   18c3c:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   18c3e:	4864      	ldr	r0, [pc, #400]	; (18dd0 <net_buf_alloc_len+0x1c0>)
   18c40:	e019      	b.n	18c76 <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   18c42:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   18c46:	f04f 0320 	mov.w	r3, #32
   18c4a:	f3ef 8b11 	mrs	fp, BASEPRI
   18c4e:	f383 8812 	msr	BASEPRI_MAX, r3
   18c52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c56:	4630      	mov	r0, r6
   18c58:	f006 fc88 	bl	1f56c <z_spin_lock_valid>
   18c5c:	b968      	cbnz	r0, 18c7a <net_buf_alloc_len+0x6a>
   18c5e:	2394      	movs	r3, #148	; 0x94
   18c60:	4a5d      	ldr	r2, [pc, #372]	; (18dd8 <net_buf_alloc_len+0x1c8>)
   18c62:	495e      	ldr	r1, [pc, #376]	; (18ddc <net_buf_alloc_len+0x1cc>)
   18c64:	485b      	ldr	r0, [pc, #364]	; (18dd4 <net_buf_alloc_len+0x1c4>)
   18c66:	f00b fe9e 	bl	249a6 <assert_print>
   18c6a:	4631      	mov	r1, r6
   18c6c:	485c      	ldr	r0, [pc, #368]	; (18de0 <net_buf_alloc_len+0x1d0>)
   18c6e:	f00b fe9a 	bl	249a6 <assert_print>
   18c72:	2194      	movs	r1, #148	; 0x94
   18c74:	4858      	ldr	r0, [pc, #352]	; (18dd8 <net_buf_alloc_len+0x1c8>)
   18c76:	f00b fe8f 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   18c7a:	4630      	mov	r0, r6
   18c7c:	f006 fc92 	bl	1f5a4 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   18c80:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   18c82:	2b00      	cmp	r3, #0
   18c84:	d070      	beq.n	18d68 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   18c86:	8c2a      	ldrh	r2, [r5, #32]
   18c88:	429a      	cmp	r2, r3
   18c8a:	d94d      	bls.n	18d28 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   18c8c:	2200      	movs	r2, #0
   18c8e:	2300      	movs	r3, #0
   18c90:	4628      	mov	r0, r5
   18c92:	f006 feb9 	bl	1fa08 <z_impl_k_queue_get>
			if (buf) {
   18c96:	4604      	mov	r4, r0
   18c98:	2800      	cmp	r0, #0
   18c9a:	d045      	beq.n	18d28 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c9c:	4630      	mov	r0, r6
   18c9e:	f006 fc73 	bl	1f588 <z_spin_unlock_valid>
   18ca2:	b958      	cbnz	r0, 18cbc <net_buf_alloc_len+0xac>
   18ca4:	23c2      	movs	r3, #194	; 0xc2
   18ca6:	4a4c      	ldr	r2, [pc, #304]	; (18dd8 <net_buf_alloc_len+0x1c8>)
   18ca8:	494e      	ldr	r1, [pc, #312]	; (18de4 <net_buf_alloc_len+0x1d4>)
   18caa:	484a      	ldr	r0, [pc, #296]	; (18dd4 <net_buf_alloc_len+0x1c4>)
   18cac:	f00b fe7b 	bl	249a6 <assert_print>
   18cb0:	4631      	mov	r1, r6
   18cb2:	484d      	ldr	r0, [pc, #308]	; (18de8 <net_buf_alloc_len+0x1d8>)
   18cb4:	f00b fe77 	bl	249a6 <assert_print>
   18cb8:	21c2      	movs	r1, #194	; 0xc2
   18cba:	e7db      	b.n	18c74 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   18cbc:	f38b 8811 	msr	BASEPRI, fp
   18cc0:	f3bf 8f6f 	isb	sy
	if (size) {
   18cc4:	9d03      	ldr	r5, [sp, #12]
   18cc6:	2d00      	cmp	r5, #0
   18cc8:	d074      	beq.n	18db4 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18cca:	ea59 030a 	orrs.w	r3, r9, sl
   18cce:	d012      	beq.n	18cf6 <net_buf_alloc_len+0xe6>
   18cd0:	f1b9 3fff 	cmp.w	r9, #4294967295
   18cd4:	bf08      	it	eq
   18cd6:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   18cda:	d00c      	beq.n	18cf6 <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   18cdc:	f009 fa14 	bl	22108 <sys_clock_tick_get>
   18ce0:	9b01      	ldr	r3, [sp, #4]
   18ce2:	ebb3 0800 	subs.w	r8, r3, r0
   18ce6:	9b02      	ldr	r3, [sp, #8]
   18ce8:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   18cec:	2f00      	cmp	r7, #0
   18cee:	bfbc      	itt	lt
   18cf0:	f04f 0800 	movlt.w	r8, #0
   18cf4:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   18cf6:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18cfa:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   18cfc:	4e3b      	ldr	r6, [pc, #236]	; (18dec <net_buf_alloc_len+0x1dc>)
   18cfe:	4642      	mov	r2, r8
   18d00:	fb09 6303 	mla	r3, r9, r3, r6
   18d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18d06:	4620      	mov	r0, r4
   18d08:	681b      	ldr	r3, [r3, #0]
   18d0a:	a903      	add	r1, sp, #12
   18d0c:	f8d3 a000 	ldr.w	sl, [r3]
   18d10:	463b      	mov	r3, r7
   18d12:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   18d14:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   18d16:	2800      	cmp	r0, #0
   18d18:	d13c      	bne.n	18d94 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   18d1a:	7aa0      	ldrb	r0, [r4, #10]
   18d1c:	4621      	mov	r1, r4
   18d1e:	fb00 6009 	mla	r0, r0, r9, r6
   18d22:	f010 f9e8 	bl	290f6 <k_queue_prepend>
}
   18d26:	e030      	b.n	18d8a <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   18d28:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   18d2a:	4630      	mov	r0, r6
   18d2c:	1e63      	subs	r3, r4, #1
   18d2e:	846b      	strh	r3, [r5, #34]	; 0x22
   18d30:	f006 fc2a 	bl	1f588 <z_spin_unlock_valid>
   18d34:	2800      	cmp	r0, #0
   18d36:	d0b5      	beq.n	18ca4 <net_buf_alloc_len+0x94>
   18d38:	f38b 8811 	msr	BASEPRI, fp
   18d3c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18d40:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   18d44:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18d46:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   18d48:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   18d4a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18d4c:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   18d50:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   18d54:	4b25      	ldr	r3, [pc, #148]	; (18dec <net_buf_alloc_len+0x1dc>)
   18d56:	4a26      	ldr	r2, [pc, #152]	; (18df0 <net_buf_alloc_len+0x1e0>)
   18d58:	1aeb      	subs	r3, r5, r3
   18d5a:	109b      	asrs	r3, r3, #2
   18d5c:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   18d5e:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   18d60:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   18d64:	72e3      	strb	r3, [r4, #11]
		goto success;
   18d66:	e7ad      	b.n	18cc4 <net_buf_alloc_len+0xb4>
   18d68:	4630      	mov	r0, r6
   18d6a:	f006 fc0d 	bl	1f588 <z_spin_unlock_valid>
   18d6e:	2800      	cmp	r0, #0
   18d70:	d098      	beq.n	18ca4 <net_buf_alloc_len+0x94>
   18d72:	f38b 8811 	msr	BASEPRI, fp
   18d76:	f3bf 8f6f 	isb	sy
   18d7a:	4652      	mov	r2, sl
   18d7c:	464b      	mov	r3, r9
   18d7e:	4628      	mov	r0, r5
   18d80:	f006 fe42 	bl	1fa08 <z_impl_k_queue_get>
	if (!buf) {
   18d84:	4604      	mov	r4, r0
   18d86:	2800      	cmp	r0, #0
   18d88:	d19c      	bne.n	18cc4 <net_buf_alloc_len+0xb4>
		return NULL;
   18d8a:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   18d8c:	4620      	mov	r0, r4
   18d8e:	b005      	add	sp, #20
   18d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   18d94:	9b03      	ldr	r3, [sp, #12]
   18d96:	429d      	cmp	r5, r3
   18d98:	d90d      	bls.n	18db6 <net_buf_alloc_len+0x1a6>
   18d9a:	4916      	ldr	r1, [pc, #88]	; (18df4 <net_buf_alloc_len+0x1e4>)
   18d9c:	f240 1355 	movw	r3, #341	; 0x155
   18da0:	4a0b      	ldr	r2, [pc, #44]	; (18dd0 <net_buf_alloc_len+0x1c0>)
   18da2:	480c      	ldr	r0, [pc, #48]	; (18dd4 <net_buf_alloc_len+0x1c4>)
   18da4:	f00b fdff 	bl	249a6 <assert_print>
   18da8:	4813      	ldr	r0, [pc, #76]	; (18df8 <net_buf_alloc_len+0x1e8>)
   18daa:	f00b fdfc 	bl	249a6 <assert_print>
   18dae:	f240 1155 	movw	r1, #341	; 0x155
   18db2:	e744      	b.n	18c3e <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   18db4:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   18db6:	2300      	movs	r3, #0
	buf->ref   = 1U;
   18db8:	2201      	movs	r2, #1
	buf->frags = NULL;
   18dba:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   18dbc:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   18dbe:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   18dc0:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   18dc2:	6963      	ldr	r3, [r4, #20]
   18dc4:	8262      	strh	r2, [r4, #18]
   18dc6:	60e3      	str	r3, [r4, #12]
}
   18dc8:	e7e0      	b.n	18d8c <net_buf_alloc_len+0x17c>
   18dca:	bf00      	nop
   18dcc:	0002ee24 	.word	0x0002ee24
   18dd0:	0002edd5 	.word	0x0002edd5
   18dd4:	0002b339 	.word	0x0002b339
   18dd8:	0002c034 	.word	0x0002c034
   18ddc:	0002c08d 	.word	0x0002c08d
   18de0:	0002c0a2 	.word	0x0002c0a2
   18de4:	0002c061 	.word	0x0002c061
   18de8:	0002c078 	.word	0x0002c078
   18dec:	20008be8 	.word	0x20008be8
   18df0:	c4ec4ec5 	.word	0xc4ec4ec5
   18df4:	0002ee29 	.word	0x0002ee29
   18df8:	0002ee3a 	.word	0x0002ee3a

00018dfc <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   18dfc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   18dfe:	b958      	cbnz	r0, 18e18 <net_buf_simple_reserve+0x1c>
   18e00:	490d      	ldr	r1, [pc, #52]	; (18e38 <net_buf_simple_reserve+0x3c>)
   18e02:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   18e06:	4a0d      	ldr	r2, [pc, #52]	; (18e3c <net_buf_simple_reserve+0x40>)
   18e08:	480d      	ldr	r0, [pc, #52]	; (18e40 <net_buf_simple_reserve+0x44>)
   18e0a:	f00b fdcc 	bl	249a6 <assert_print>
   18e0e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   18e12:	480a      	ldr	r0, [pc, #40]	; (18e3c <net_buf_simple_reserve+0x40>)
   18e14:	f00b fdc0 	bl	24998 <assert_post_action>
   18e18:	8883      	ldrh	r3, [r0, #4]
   18e1a:	b14b      	cbz	r3, 18e30 <net_buf_simple_reserve+0x34>
   18e1c:	4909      	ldr	r1, [pc, #36]	; (18e44 <net_buf_simple_reserve+0x48>)
   18e1e:	f240 13b9 	movw	r3, #441	; 0x1b9
   18e22:	4a06      	ldr	r2, [pc, #24]	; (18e3c <net_buf_simple_reserve+0x40>)
   18e24:	4806      	ldr	r0, [pc, #24]	; (18e40 <net_buf_simple_reserve+0x44>)
   18e26:	f00b fdbe 	bl	249a6 <assert_print>
   18e2a:	f240 11b9 	movw	r1, #441	; 0x1b9
   18e2e:	e7f0      	b.n	18e12 <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   18e30:	6883      	ldr	r3, [r0, #8]
   18e32:	440b      	add	r3, r1
   18e34:	6003      	str	r3, [r0, #0]
}
   18e36:	bd08      	pop	{r3, pc}
   18e38:	0002eeb9 	.word	0x0002eeb9
   18e3c:	0002edd5 	.word	0x0002edd5
   18e40:	0002b339 	.word	0x0002b339
   18e44:	0002ee3d 	.word	0x0002ee3d

00018e48 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   18e48:	b570      	push	{r4, r5, r6, lr}
   18e4a:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   18e4c:	4605      	mov	r5, r0
   18e4e:	b958      	cbnz	r0, 18e68 <net_buf_slist_put+0x20>
   18e50:	4928      	ldr	r1, [pc, #160]	; (18ef4 <net_buf_slist_put+0xac>)
   18e52:	f240 13c5 	movw	r3, #453	; 0x1c5
   18e56:	4a28      	ldr	r2, [pc, #160]	; (18ef8 <net_buf_slist_put+0xb0>)
   18e58:	4828      	ldr	r0, [pc, #160]	; (18efc <net_buf_slist_put+0xb4>)
   18e5a:	f00b fda4 	bl	249a6 <assert_print>
   18e5e:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   18e62:	4825      	ldr	r0, [pc, #148]	; (18ef8 <net_buf_slist_put+0xb0>)
   18e64:	f00b fd98 	bl	24998 <assert_post_action>
   18e68:	b949      	cbnz	r1, 18e7e <net_buf_slist_put+0x36>
   18e6a:	4925      	ldr	r1, [pc, #148]	; (18f00 <net_buf_slist_put+0xb8>)
   18e6c:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   18e70:	4a21      	ldr	r2, [pc, #132]	; (18ef8 <net_buf_slist_put+0xb0>)
   18e72:	4822      	ldr	r0, [pc, #136]	; (18efc <net_buf_slist_put+0xb4>)
   18e74:	f00b fd97 	bl	249a6 <assert_print>
   18e78:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   18e7c:	e7f1      	b.n	18e62 <net_buf_slist_put+0x1a>
	__asm__ volatile(
   18e7e:	f04f 0320 	mov.w	r3, #32
   18e82:	f3ef 8611 	mrs	r6, BASEPRI
   18e86:	f383 8812 	msr	BASEPRI_MAX, r3
   18e8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e8e:	481d      	ldr	r0, [pc, #116]	; (18f04 <net_buf_slist_put+0xbc>)
   18e90:	f006 fb6c 	bl	1f56c <z_spin_lock_valid>
   18e94:	b960      	cbnz	r0, 18eb0 <net_buf_slist_put+0x68>
   18e96:	2394      	movs	r3, #148	; 0x94
   18e98:	4a1b      	ldr	r2, [pc, #108]	; (18f08 <net_buf_slist_put+0xc0>)
   18e9a:	491c      	ldr	r1, [pc, #112]	; (18f0c <net_buf_slist_put+0xc4>)
   18e9c:	4817      	ldr	r0, [pc, #92]	; (18efc <net_buf_slist_put+0xb4>)
   18e9e:	f00b fd82 	bl	249a6 <assert_print>
   18ea2:	4918      	ldr	r1, [pc, #96]	; (18f04 <net_buf_slist_put+0xbc>)
   18ea4:	481a      	ldr	r0, [pc, #104]	; (18f10 <net_buf_slist_put+0xc8>)
   18ea6:	f00b fd7e 	bl	249a6 <assert_print>
   18eaa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18eac:	4816      	ldr	r0, [pc, #88]	; (18f08 <net_buf_slist_put+0xc0>)
   18eae:	e7d9      	b.n	18e64 <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   18eb0:	4814      	ldr	r0, [pc, #80]	; (18f04 <net_buf_slist_put+0xbc>)
   18eb2:	f006 fb77 	bl	1f5a4 <z_spin_lock_set_owner>
	parent->next = child;
   18eb6:	2300      	movs	r3, #0
   18eb8:	6023      	str	r3, [r4, #0]
	return list->tail;
   18eba:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   18ebc:	b98b      	cbnz	r3, 18ee2 <net_buf_slist_put+0x9a>
	list->head = node;
   18ebe:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ec2:	4810      	ldr	r0, [pc, #64]	; (18f04 <net_buf_slist_put+0xbc>)
   18ec4:	f006 fb60 	bl	1f588 <z_spin_unlock_valid>
   18ec8:	b970      	cbnz	r0, 18ee8 <net_buf_slist_put+0xa0>
   18eca:	23c2      	movs	r3, #194	; 0xc2
   18ecc:	4a0e      	ldr	r2, [pc, #56]	; (18f08 <net_buf_slist_put+0xc0>)
   18ece:	4911      	ldr	r1, [pc, #68]	; (18f14 <net_buf_slist_put+0xcc>)
   18ed0:	480a      	ldr	r0, [pc, #40]	; (18efc <net_buf_slist_put+0xb4>)
   18ed2:	f00b fd68 	bl	249a6 <assert_print>
   18ed6:	490b      	ldr	r1, [pc, #44]	; (18f04 <net_buf_slist_put+0xbc>)
   18ed8:	480f      	ldr	r0, [pc, #60]	; (18f18 <net_buf_slist_put+0xd0>)
   18eda:	f00b fd64 	bl	249a6 <assert_print>
   18ede:	21c2      	movs	r1, #194	; 0xc2
   18ee0:	e7e4      	b.n	18eac <net_buf_slist_put+0x64>
	parent->next = child;
   18ee2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18ee4:	606c      	str	r4, [r5, #4]
}
   18ee6:	e7ec      	b.n	18ec2 <net_buf_slist_put+0x7a>
	__asm__ volatile(
   18ee8:	f386 8811 	msr	BASEPRI, r6
   18eec:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   18ef0:	bd70      	pop	{r4, r5, r6, pc}
   18ef2:	bf00      	nop
   18ef4:	0002d9d8 	.word	0x0002d9d8
   18ef8:	0002edd5 	.word	0x0002edd5
   18efc:	0002b339 	.word	0x0002b339
   18f00:	0002eeb9 	.word	0x0002eeb9
   18f04:	2002118c 	.word	0x2002118c
   18f08:	0002c034 	.word	0x0002c034
   18f0c:	0002c08d 	.word	0x0002c08d
   18f10:	0002c0a2 	.word	0x0002c0a2
   18f14:	0002c061 	.word	0x0002c061
   18f18:	0002c078 	.word	0x0002c078

00018f1c <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   18f1c:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   18f1e:	4604      	mov	r4, r0
   18f20:	b958      	cbnz	r0, 18f3a <net_buf_slist_get+0x1e>
   18f22:	4923      	ldr	r1, [pc, #140]	; (18fb0 <net_buf_slist_get+0x94>)
   18f24:	4823      	ldr	r0, [pc, #140]	; (18fb4 <net_buf_slist_get+0x98>)
   18f26:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   18f2a:	4a23      	ldr	r2, [pc, #140]	; (18fb8 <net_buf_slist_get+0x9c>)
   18f2c:	f00b fd3b 	bl	249a6 <assert_print>
   18f30:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   18f34:	4820      	ldr	r0, [pc, #128]	; (18fb8 <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f36:	f00b fd2f 	bl	24998 <assert_post_action>
	__asm__ volatile(
   18f3a:	f04f 0320 	mov.w	r3, #32
   18f3e:	f3ef 8611 	mrs	r6, BASEPRI
   18f42:	f383 8812 	msr	BASEPRI_MAX, r3
   18f46:	f3bf 8f6f 	isb	sy
   18f4a:	481c      	ldr	r0, [pc, #112]	; (18fbc <net_buf_slist_get+0xa0>)
   18f4c:	f006 fb0e 	bl	1f56c <z_spin_lock_valid>
   18f50:	b960      	cbnz	r0, 18f6c <net_buf_slist_get+0x50>
   18f52:	2394      	movs	r3, #148	; 0x94
   18f54:	4a1a      	ldr	r2, [pc, #104]	; (18fc0 <net_buf_slist_get+0xa4>)
   18f56:	491b      	ldr	r1, [pc, #108]	; (18fc4 <net_buf_slist_get+0xa8>)
   18f58:	4816      	ldr	r0, [pc, #88]	; (18fb4 <net_buf_slist_get+0x98>)
   18f5a:	f00b fd24 	bl	249a6 <assert_print>
   18f5e:	4917      	ldr	r1, [pc, #92]	; (18fbc <net_buf_slist_get+0xa0>)
   18f60:	4819      	ldr	r0, [pc, #100]	; (18fc8 <net_buf_slist_get+0xac>)
   18f62:	f00b fd20 	bl	249a6 <assert_print>
   18f66:	2194      	movs	r1, #148	; 0x94
   18f68:	4815      	ldr	r0, [pc, #84]	; (18fc0 <net_buf_slist_get+0xa4>)
   18f6a:	e7e4      	b.n	18f36 <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   18f6c:	4813      	ldr	r0, [pc, #76]	; (18fbc <net_buf_slist_get+0xa0>)
   18f6e:	f006 fb19 	bl	1f5a4 <z_spin_lock_set_owner>
	return list->head;
   18f72:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   18f74:	b12d      	cbz	r5, 18f82 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18f76:	6862      	ldr	r2, [r4, #4]
	return node->next;
   18f78:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18f7a:	4295      	cmp	r5, r2
	list->head = node;
   18f7c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   18f7e:	bf08      	it	eq
   18f80:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f82:	480e      	ldr	r0, [pc, #56]	; (18fbc <net_buf_slist_get+0xa0>)
   18f84:	f006 fb00 	bl	1f588 <z_spin_unlock_valid>
   18f88:	b958      	cbnz	r0, 18fa2 <net_buf_slist_get+0x86>
   18f8a:	23c2      	movs	r3, #194	; 0xc2
   18f8c:	4a0c      	ldr	r2, [pc, #48]	; (18fc0 <net_buf_slist_get+0xa4>)
   18f8e:	490f      	ldr	r1, [pc, #60]	; (18fcc <net_buf_slist_get+0xb0>)
   18f90:	4808      	ldr	r0, [pc, #32]	; (18fb4 <net_buf_slist_get+0x98>)
   18f92:	f00b fd08 	bl	249a6 <assert_print>
   18f96:	4909      	ldr	r1, [pc, #36]	; (18fbc <net_buf_slist_get+0xa0>)
   18f98:	480d      	ldr	r0, [pc, #52]	; (18fd0 <net_buf_slist_get+0xb4>)
   18f9a:	f00b fd04 	bl	249a6 <assert_print>
   18f9e:	21c2      	movs	r1, #194	; 0xc2
   18fa0:	e7e2      	b.n	18f68 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   18fa2:	f386 8811 	msr	BASEPRI, r6
   18fa6:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   18faa:	4628      	mov	r0, r5
   18fac:	bd70      	pop	{r4, r5, r6, pc}
   18fae:	bf00      	nop
   18fb0:	0002d9d8 	.word	0x0002d9d8
   18fb4:	0002b339 	.word	0x0002b339
   18fb8:	0002edd5 	.word	0x0002edd5
   18fbc:	2002118c 	.word	0x2002118c
   18fc0:	0002c034 	.word	0x0002c034
   18fc4:	0002c08d 	.word	0x0002c08d
   18fc8:	0002c0a2 	.word	0x0002c0a2
   18fcc:	0002c061 	.word	0x0002c061
   18fd0:	0002c078 	.word	0x0002c078

00018fd4 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   18fd4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   18fd6:	b958      	cbnz	r0, 18ff0 <net_buf_put+0x1c>
   18fd8:	490d      	ldr	r1, [pc, #52]	; (19010 <net_buf_put+0x3c>)
   18fda:	f240 13df 	movw	r3, #479	; 0x1df
   18fde:	4a0d      	ldr	r2, [pc, #52]	; (19014 <net_buf_put+0x40>)
   18fe0:	480d      	ldr	r0, [pc, #52]	; (19018 <net_buf_put+0x44>)
   18fe2:	f00b fce0 	bl	249a6 <assert_print>
   18fe6:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   18fea:	480a      	ldr	r0, [pc, #40]	; (19014 <net_buf_put+0x40>)
   18fec:	f00b fcd4 	bl	24998 <assert_post_action>
   18ff0:	b949      	cbnz	r1, 19006 <net_buf_put+0x32>
   18ff2:	490a      	ldr	r1, [pc, #40]	; (1901c <net_buf_put+0x48>)
   18ff4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   18ff8:	4a06      	ldr	r2, [pc, #24]	; (19014 <net_buf_put+0x40>)
   18ffa:	4807      	ldr	r0, [pc, #28]	; (19018 <net_buf_put+0x44>)
   18ffc:	f00b fcd3 	bl	249a6 <assert_print>
   19000:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   19004:	e7f1      	b.n	18fea <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   19006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1900a:	f010 b869 	b.w	290e0 <k_queue_append>
   1900e:	bf00      	nop
   19010:	0002ee4c 	.word	0x0002ee4c
   19014:	0002edd5 	.word	0x0002edd5
   19018:	0002b339 	.word	0x0002b339
   1901c:	0002eeb9 	.word	0x0002eeb9

00019020 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   19024:	4605      	mov	r5, r0
   19026:	b328      	cbz	r0, 19074 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   19028:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1902a:	f04f 0834 	mov.w	r8, #52	; 0x34
   1902e:	4e1a      	ldr	r6, [pc, #104]	; (19098 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   19030:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   19032:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   19034:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   19036:	3b01      	subs	r3, #1
   19038:	b2db      	uxtb	r3, r3
   1903a:	7223      	strb	r3, [r4, #8]
   1903c:	b9c3      	cbnz	r3, 19070 <net_buf_unref+0x50>
		if (buf->__buf) {
   1903e:	6961      	ldr	r1, [r4, #20]
   19040:	b159      	cbz	r1, 1905a <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19042:	7a63      	ldrb	r3, [r4, #9]
   19044:	07db      	lsls	r3, r3, #31
   19046:	d407      	bmi.n	19058 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19048:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1904a:	4620      	mov	r0, r4
   1904c:	fb08 6303 	mla	r3, r8, r3, r6
   19050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19052:	681b      	ldr	r3, [r3, #0]
   19054:	689b      	ldr	r3, [r3, #8]
   19056:	4798      	blx	r3
			buf->__buf = NULL;
   19058:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1905a:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1905c:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1905e:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   19062:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   19064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19066:	b18b      	cbz	r3, 1908c <net_buf_unref+0x6c>
			pool->destroy(buf);
   19068:	4620      	mov	r0, r4
   1906a:	4798      	blx	r3
	while (buf) {
   1906c:	2d00      	cmp	r5, #0
   1906e:	d1df      	bne.n	19030 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   19074:	4909      	ldr	r1, [pc, #36]	; (1909c <net_buf_unref+0x7c>)
   19076:	480a      	ldr	r0, [pc, #40]	; (190a0 <net_buf_unref+0x80>)
   19078:	f240 13eb 	movw	r3, #491	; 0x1eb
   1907c:	4a09      	ldr	r2, [pc, #36]	; (190a4 <net_buf_unref+0x84>)
   1907e:	f00b fc92 	bl	249a6 <assert_print>
   19082:	f240 11eb 	movw	r1, #491	; 0x1eb
   19086:	4807      	ldr	r0, [pc, #28]	; (190a4 <net_buf_unref+0x84>)
   19088:	f00b fc86 	bl	24998 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1908c:	4621      	mov	r1, r4
   1908e:	fb00 6008 	mla	r0, r0, r8, r6
   19092:	f010 f830 	bl	290f6 <k_queue_prepend>
}
   19096:	e7e9      	b.n	1906c <net_buf_unref+0x4c>
   19098:	20008be8 	.word	0x20008be8
   1909c:	0002eeb9 	.word	0x0002eeb9
   190a0:	0002b339 	.word	0x0002b339
   190a4:	0002edd5 	.word	0x0002edd5

000190a8 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   190a8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   190aa:	b958      	cbnz	r0, 190c4 <net_buf_ref+0x1c>
   190ac:	4907      	ldr	r1, [pc, #28]	; (190cc <net_buf_ref+0x24>)
   190ae:	4808      	ldr	r0, [pc, #32]	; (190d0 <net_buf_ref+0x28>)
   190b0:	f240 231a 	movw	r3, #538	; 0x21a
   190b4:	4a07      	ldr	r2, [pc, #28]	; (190d4 <net_buf_ref+0x2c>)
   190b6:	f00b fc76 	bl	249a6 <assert_print>
   190ba:	f240 211a 	movw	r1, #538	; 0x21a
   190be:	4805      	ldr	r0, [pc, #20]	; (190d4 <net_buf_ref+0x2c>)
   190c0:	f00b fc6a 	bl	24998 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   190c4:	7a02      	ldrb	r2, [r0, #8]
   190c6:	3201      	adds	r2, #1
   190c8:	7202      	strb	r2, [r0, #8]
	return buf;
}
   190ca:	bd08      	pop	{r3, pc}
   190cc:	0002eeb9 	.word	0x0002eeb9
   190d0:	0002b339 	.word	0x0002b339
   190d4:	0002edd5 	.word	0x0002edd5

000190d8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   190d8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   190da:	4603      	mov	r3, r0
   190dc:	b958      	cbnz	r0, 190f6 <net_buf_frag_last+0x1e>
   190de:	4908      	ldr	r1, [pc, #32]	; (19100 <net_buf_frag_last+0x28>)
   190e0:	4808      	ldr	r0, [pc, #32]	; (19104 <net_buf_frag_last+0x2c>)
   190e2:	f240 2357 	movw	r3, #599	; 0x257
   190e6:	4a08      	ldr	r2, [pc, #32]	; (19108 <net_buf_frag_last+0x30>)
   190e8:	f00b fc5d 	bl	249a6 <assert_print>
   190ec:	f240 2157 	movw	r1, #599	; 0x257
   190f0:	4805      	ldr	r0, [pc, #20]	; (19108 <net_buf_frag_last+0x30>)
   190f2:	f00b fc51 	bl	24998 <assert_post_action>

	while (buf->frags) {
   190f6:	4618      	mov	r0, r3
   190f8:	685b      	ldr	r3, [r3, #4]
   190fa:	2b00      	cmp	r3, #0
   190fc:	d1fb      	bne.n	190f6 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   190fe:	bd08      	pop	{r3, pc}
   19100:	0002eeb9 	.word	0x0002eeb9
   19104:	0002b339 	.word	0x0002b339
   19108:	0002edd5 	.word	0x0002edd5

0001910c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1910c:	b570      	push	{r4, r5, r6, lr}
   1910e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   19110:	4604      	mov	r4, r0
   19112:	b958      	cbnz	r0, 1912c <net_buf_frag_insert+0x20>
   19114:	490f      	ldr	r1, [pc, #60]	; (19154 <net_buf_frag_insert+0x48>)
   19116:	f240 2362 	movw	r3, #610	; 0x262
   1911a:	4a0f      	ldr	r2, [pc, #60]	; (19158 <net_buf_frag_insert+0x4c>)
   1911c:	480f      	ldr	r0, [pc, #60]	; (1915c <net_buf_frag_insert+0x50>)
   1911e:	f00b fc42 	bl	249a6 <assert_print>
   19122:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   19126:	480c      	ldr	r0, [pc, #48]	; (19158 <net_buf_frag_insert+0x4c>)
   19128:	f00b fc36 	bl	24998 <assert_post_action>
   1912c:	b949      	cbnz	r1, 19142 <net_buf_frag_insert+0x36>
   1912e:	490c      	ldr	r1, [pc, #48]	; (19160 <net_buf_frag_insert+0x54>)
   19130:	f240 2363 	movw	r3, #611	; 0x263
   19134:	4a08      	ldr	r2, [pc, #32]	; (19158 <net_buf_frag_insert+0x4c>)
   19136:	4809      	ldr	r0, [pc, #36]	; (1915c <net_buf_frag_insert+0x50>)
   19138:	f00b fc35 	bl	249a6 <assert_print>
   1913c:	f240 2163 	movw	r1, #611	; 0x263
   19140:	e7f1      	b.n	19126 <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   19142:	6846      	ldr	r6, [r0, #4]
   19144:	b11e      	cbz	r6, 1914e <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   19146:	4608      	mov	r0, r1
   19148:	f7ff ffc6 	bl	190d8 <net_buf_frag_last>
   1914c:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1914e:	6065      	str	r5, [r4, #4]
}
   19150:	bd70      	pop	{r4, r5, r6, pc}
   19152:	bf00      	nop
   19154:	0002ee51 	.word	0x0002ee51
   19158:	0002edd5 	.word	0x0002edd5
   1915c:	0002b339 	.word	0x0002b339
   19160:	0002ee58 	.word	0x0002ee58

00019164 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   19164:	b538      	push	{r3, r4, r5, lr}
   19166:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   19168:	460c      	mov	r4, r1
   1916a:	b959      	cbnz	r1, 19184 <net_buf_frag_add+0x20>
   1916c:	490c      	ldr	r1, [pc, #48]	; (191a0 <net_buf_frag_add+0x3c>)
   1916e:	480d      	ldr	r0, [pc, #52]	; (191a4 <net_buf_frag_add+0x40>)
   19170:	f240 236e 	movw	r3, #622	; 0x26e
   19174:	4a0c      	ldr	r2, [pc, #48]	; (191a8 <net_buf_frag_add+0x44>)
   19176:	f00b fc16 	bl	249a6 <assert_print>
   1917a:	f240 216e 	movw	r1, #622	; 0x26e
   1917e:	480a      	ldr	r0, [pc, #40]	; (191a8 <net_buf_frag_add+0x44>)
   19180:	f00b fc0a 	bl	24998 <assert_post_action>

	if (!head) {
   19184:	b920      	cbnz	r0, 19190 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   19186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1918a:	4608      	mov	r0, r1
   1918c:	f7ff bf8c 	b.w	190a8 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   19190:	f7ff ffa2 	bl	190d8 <net_buf_frag_last>
   19194:	4621      	mov	r1, r4
   19196:	f7ff ffb9 	bl	1910c <net_buf_frag_insert>
}
   1919a:	4628      	mov	r0, r5
   1919c:	bd38      	pop	{r3, r4, r5, pc}
   1919e:	bf00      	nop
   191a0:	0002ee58 	.word	0x0002ee58
   191a4:	0002b339 	.word	0x0002b339
   191a8:	0002edd5 	.word	0x0002edd5

000191ac <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   191ac:	b508      	push	{r3, lr}
   191ae:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   191b0:	6800      	ldr	r0, [r0, #0]
   191b2:	689a      	ldr	r2, [r3, #8]
   191b4:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   191b6:	4291      	cmp	r1, r2
   191b8:	d90b      	bls.n	191d2 <net_buf_simple_push+0x26>
   191ba:	4909      	ldr	r1, [pc, #36]	; (191e0 <net_buf_simple_push+0x34>)
   191bc:	4809      	ldr	r0, [pc, #36]	; (191e4 <net_buf_simple_push+0x38>)
   191be:	f240 33f2 	movw	r3, #1010	; 0x3f2
   191c2:	4a09      	ldr	r2, [pc, #36]	; (191e8 <net_buf_simple_push+0x3c>)
   191c4:	f00b fbef 	bl	249a6 <assert_print>
   191c8:	f240 31f2 	movw	r1, #1010	; 0x3f2
   191cc:	4806      	ldr	r0, [pc, #24]	; (191e8 <net_buf_simple_push+0x3c>)
   191ce:	f00b fbe3 	bl	24998 <assert_post_action>
	buf->len += len;
   191d2:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   191d4:	1a40      	subs	r0, r0, r1
	buf->len += len;
   191d6:	4411      	add	r1, r2
	buf->data -= len;
   191d8:	6018      	str	r0, [r3, #0]
	buf->len += len;
   191da:	8099      	strh	r1, [r3, #4]
}
   191dc:	bd08      	pop	{r3, pc}
   191de:	bf00      	nop
   191e0:	0002ee6d 	.word	0x0002ee6d
   191e4:	0002b339 	.word	0x0002b339
   191e8:	0002edd5 	.word	0x0002edd5

000191ec <net_buf_simple_pull>:
{
   191ec:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   191ee:	8882      	ldrh	r2, [r0, #4]
{
   191f0:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   191f2:	428a      	cmp	r2, r1
   191f4:	d20b      	bcs.n	1920e <net_buf_simple_pull+0x22>
   191f6:	4909      	ldr	r1, [pc, #36]	; (1921c <net_buf_simple_pull+0x30>)
   191f8:	4809      	ldr	r0, [pc, #36]	; (19220 <net_buf_simple_pull+0x34>)
   191fa:	f240 4352 	movw	r3, #1106	; 0x452
   191fe:	4a09      	ldr	r2, [pc, #36]	; (19224 <net_buf_simple_pull+0x38>)
   19200:	f00b fbd1 	bl	249a6 <assert_print>
   19204:	f240 4152 	movw	r1, #1106	; 0x452
   19208:	4806      	ldr	r0, [pc, #24]	; (19224 <net_buf_simple_pull+0x38>)
   1920a:	f00b fbc5 	bl	24998 <assert_post_action>
	buf->len -= len;
   1920e:	1a52      	subs	r2, r2, r1
   19210:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   19212:	6800      	ldr	r0, [r0, #0]
   19214:	4408      	add	r0, r1
   19216:	6018      	str	r0, [r3, #0]
}
   19218:	bd08      	pop	{r3, pc}
   1921a:	bf00      	nop
   1921c:	0002ee5d 	.word	0x0002ee5d
   19220:	0002b339 	.word	0x0002b339
   19224:	0002edd5 	.word	0x0002edd5

00019228 <net_buf_simple_pull_mem>:
{
   19228:	b508      	push	{r3, lr}
   1922a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1922c:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1922e:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   19230:	428a      	cmp	r2, r1
   19232:	d20b      	bcs.n	1924c <net_buf_simple_pull_mem+0x24>
   19234:	4908      	ldr	r1, [pc, #32]	; (19258 <net_buf_simple_pull_mem+0x30>)
   19236:	4809      	ldr	r0, [pc, #36]	; (1925c <net_buf_simple_pull_mem+0x34>)
   19238:	f240 435e 	movw	r3, #1118	; 0x45e
   1923c:	4a08      	ldr	r2, [pc, #32]	; (19260 <net_buf_simple_pull_mem+0x38>)
   1923e:	f00b fbb2 	bl	249a6 <assert_print>
   19242:	f240 415e 	movw	r1, #1118	; 0x45e
   19246:	4806      	ldr	r0, [pc, #24]	; (19260 <net_buf_simple_pull_mem+0x38>)
   19248:	f00b fba6 	bl	24998 <assert_post_action>
	buf->len -= len;
   1924c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1924e:	4401      	add	r1, r0
	buf->len -= len;
   19250:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   19252:	6019      	str	r1, [r3, #0]
}
   19254:	bd08      	pop	{r3, pc}
   19256:	bf00      	nop
   19258:	0002ee5d 	.word	0x0002ee5d
   1925c:	0002b339 	.word	0x0002b339
   19260:	0002edd5 	.word	0x0002edd5

00019264 <net_buf_simple_add>:
{
   19264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   19266:	8885      	ldrh	r5, [r0, #4]
   19268:	6803      	ldr	r3, [r0, #0]
   1926a:	460e      	mov	r6, r1
   1926c:	4604      	mov	r4, r0
   1926e:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   19270:	f00e fb7f 	bl	27972 <net_buf_simple_tailroom>
   19274:	42b0      	cmp	r0, r6
   19276:	d20b      	bcs.n	19290 <net_buf_simple_add+0x2c>
   19278:	4907      	ldr	r1, [pc, #28]	; (19298 <net_buf_simple_add+0x34>)
   1927a:	4808      	ldr	r0, [pc, #32]	; (1929c <net_buf_simple_add+0x38>)
   1927c:	f240 3303 	movw	r3, #771	; 0x303
   19280:	4a07      	ldr	r2, [pc, #28]	; (192a0 <net_buf_simple_add+0x3c>)
   19282:	f00b fb90 	bl	249a6 <assert_print>
   19286:	f240 3103 	movw	r1, #771	; 0x303
   1928a:	4805      	ldr	r0, [pc, #20]	; (192a0 <net_buf_simple_add+0x3c>)
   1928c:	f00b fb84 	bl	24998 <assert_post_action>
	buf->len += len;
   19290:	4435      	add	r5, r6
   19292:	80a5      	strh	r5, [r4, #4]
}
   19294:	4638      	mov	r0, r7
   19296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19298:	0002ee91 	.word	0x0002ee91
   1929c:	0002b339 	.word	0x0002b339
   192a0:	0002edd5 	.word	0x0002edd5

000192a4 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   192a4:	b508      	push	{r3, lr}
   192a6:	4804      	ldr	r0, [pc, #16]	; (192b8 <xoshiro128_initialize+0x14>)
   192a8:	f00f fea1 	bl	28fee <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   192ac:	2800      	cmp	r0, #0
}
   192ae:	bf0c      	ite	eq
   192b0:	f06f 0012 	mvneq.w	r0, #18
   192b4:	2000      	movne	r0, #0
   192b6:	bd08      	pop	{r3, pc}
   192b8:	00029e38 	.word	0x00029e38

000192bc <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   192bc:	2813      	cmp	r0, #19
   192be:	d80e      	bhi.n	192de <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   192c0:	4a08      	ldr	r2, [pc, #32]	; (192e4 <adc_gain_invert+0x28>)
   192c2:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   192c6:	b153      	cbz	r3, 192de <adc_gain_invert+0x22>
   192c8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   192cc:	7852      	ldrb	r2, [r2, #1]
   192ce:	b132      	cbz	r2, 192de <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   192d0:	6808      	ldr	r0, [r1, #0]
   192d2:	4343      	muls	r3, r0
   192d4:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   192d8:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   192da:	600b      	str	r3, [r1, #0]
			rv = 0;
   192dc:	4770      	bx	lr
	int rv = -EINVAL;
   192de:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   192e2:	4770      	bx	lr
   192e4:	0002eebd 	.word	0x0002eebd

000192e8 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   192e8:	2201      	movs	r2, #1
   192ea:	4b05      	ldr	r3, [pc, #20]	; (19300 <adc_context_start_sampling+0x18>)
   192ec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   192f0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   192f4:	b109      	cbz	r1, 192fa <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   192f6:	60da      	str	r2, [r3, #12]
}
   192f8:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   192fa:	601a      	str	r2, [r3, #0]
   192fc:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   192fe:	4770      	bx	lr
   19300:	4000e000 	.word	0x4000e000

00019304 <adc_nrfx_channel_setup>:
{
   19304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   19306:	790d      	ldrb	r5, [r1, #4]
   19308:	f005 041f 	and.w	r4, r5, #31
	if (channel_id >= SAADC_CH_NUM) {
   1930c:	2c07      	cmp	r4, #7
   1930e:	d825      	bhi.n	1935c <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->gain) {
   19310:	780a      	ldrb	r2, [r1, #0]
   19312:	2a0b      	cmp	r2, #11
   19314:	d818      	bhi.n	19348 <adc_nrfx_channel_setup+0x44>
   19316:	e8df f002 	tbb	[pc, r2]
   1931a:	0707      	.short	0x0707
   1931c:	06170707 	.word	0x06170707
   19320:	13111717 	.word	0x13111717
   19324:	1517      	.short	0x1517
		config.gain = NRF_SAADC_GAIN1_2;
   19326:	2204      	movs	r2, #4
	switch (channel_cfg->reference) {
   19328:	784b      	ldrb	r3, [r1, #1]
   1932a:	2b03      	cmp	r3, #3
   1932c:	d01a      	beq.n	19364 <adc_nrfx_channel_setup+0x60>
   1932e:	2b04      	cmp	r3, #4
   19330:	f04f 0300 	mov.w	r3, #0
   19334:	d017      	beq.n	19366 <adc_nrfx_channel_setup+0x62>
		LOG_ERR("Selected ADC reference is not valid");
   19336:	4a30      	ldr	r2, [pc, #192]	; (193f8 <adc_nrfx_channel_setup+0xf4>)
   19338:	9202      	str	r2, [sp, #8]
   1933a:	e008      	b.n	1934e <adc_nrfx_channel_setup+0x4a>
		config.gain = NRF_SAADC_GAIN1;
   1933c:	2205      	movs	r2, #5
		break;
   1933e:	e7f3      	b.n	19328 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   19340:	2206      	movs	r2, #6
		break;
   19342:	e7f1      	b.n	19328 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   19344:	2207      	movs	r2, #7
		break;
   19346:	e7ef      	b.n	19328 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   19348:	4b2c      	ldr	r3, [pc, #176]	; (193fc <adc_nrfx_channel_setup+0xf8>)
   1934a:	9302      	str	r3, [sp, #8]
   1934c:	2300      	movs	r3, #0
   1934e:	2201      	movs	r2, #1
   19350:	4618      	mov	r0, r3
   19352:	e9cd 3300 	strd	r3, r3, [sp]
   19356:	492a      	ldr	r1, [pc, #168]	; (19400 <adc_nrfx_channel_setup+0xfc>)
   19358:	f00e fb26 	bl	279a8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1935c:	f06f 0015 	mvn.w	r0, #21
}
   19360:	b004      	add	sp, #16
   19362:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   19364:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
   19366:	f244 060a 	movw	r6, #16394	; 0x400a
   1936a:	8848      	ldrh	r0, [r1, #2]
   1936c:	42b0      	cmp	r0, r6
   1936e:	d03d      	beq.n	193ec <adc_nrfx_channel_setup+0xe8>
   19370:	d80a      	bhi.n	19388 <adc_nrfx_channel_setup+0x84>
   19372:	f244 0603 	movw	r6, #16387	; 0x4003
   19376:	42b0      	cmp	r0, r6
   19378:	d014      	beq.n	193a4 <adc_nrfx_channel_setup+0xa0>
   1937a:	f244 0605 	movw	r6, #16389	; 0x4005
   1937e:	42b0      	cmp	r0, r6
   19380:	d032      	beq.n	193e8 <adc_nrfx_channel_setup+0xe4>
   19382:	b398      	cbz	r0, 193ec <adc_nrfx_channel_setup+0xe8>
		LOG_ERR("Selected ADC acquisition time is not valid");
   19384:	4b1f      	ldr	r3, [pc, #124]	; (19404 <adc_nrfx_channel_setup+0x100>)
   19386:	e7e0      	b.n	1934a <adc_nrfx_channel_setup+0x46>
	switch (channel_cfg->acquisition_time) {
   19388:	f244 0614 	movw	r6, #16404	; 0x4014
   1938c:	42b0      	cmp	r0, r6
   1938e:	d02f      	beq.n	193f0 <adc_nrfx_channel_setup+0xec>
   19390:	f244 0628 	movw	r6, #16424	; 0x4028
   19394:	42b0      	cmp	r0, r6
   19396:	d02d      	beq.n	193f4 <adc_nrfx_channel_setup+0xf0>
   19398:	f244 060f 	movw	r6, #16399	; 0x400f
   1939c:	42b0      	cmp	r0, r6
   1939e:	d1f1      	bne.n	19384 <adc_nrfx_channel_setup+0x80>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   193a0:	2003      	movs	r0, #3
   193a2:	e000      	b.n	193a6 <adc_nrfx_channel_setup+0xa2>
	nrf_saadc_channel_config_t config = {
   193a4:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   193a6:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   193aa:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   193ac:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
   193b0:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   193b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].PSELP = pselp;
   193b8:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   193ba:	0123      	lsls	r3, r4, #4
   193bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   193c0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   193c4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   193c8:	0123      	lsls	r3, r4, #4
   193ca:	798a      	ldrb	r2, [r1, #6]
   193cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   193d0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   193d4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   193d8:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   193dc:	4b0a      	ldr	r3, [pc, #40]	; (19408 <adc_nrfx_channel_setup+0x104>)
   193de:	794a      	ldrb	r2, [r1, #5]
   193e0:	4423      	add	r3, r4
   193e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   193e6:	e7bb      	b.n	19360 <adc_nrfx_channel_setup+0x5c>
	switch (channel_cfg->acquisition_time) {
   193e8:	2001      	movs	r0, #1
   193ea:	e7dc      	b.n	193a6 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   193ec:	2002      	movs	r0, #2
   193ee:	e7da      	b.n	193a6 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   193f0:	2004      	movs	r0, #4
   193f2:	e7d8      	b.n	193a6 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   193f4:	2005      	movs	r0, #5
   193f6:	e7d6      	b.n	193a6 <adc_nrfx_channel_setup+0xa2>
   193f8:	0002ef04 	.word	0x0002ef04
   193fc:	0002eee5 	.word	0x0002eee5
   19400:	0002a360 	.word	0x0002a360
   19404:	0002ef28 	.word	0x0002ef28
   19408:	20008168 	.word	0x20008168

0001940c <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   1940c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1940e:	460c      	mov	r4, r1
   19410:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
   19412:	f04f 33ff 	mov.w	r3, #4294967295
   19416:	f04f 32ff 	mov.w	r2, #4294967295
   1941a:	486d      	ldr	r0, [pc, #436]	; (195d0 <adc_nrfx_read+0x1c4>)
   1941c:	f006 fba2 	bl	1fb64 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   19420:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   19422:	1e73      	subs	r3, r6, #1
   19424:	2bfe      	cmp	r3, #254	; 0xfe
   19426:	f04f 0300 	mov.w	r3, #0
   1942a:	d909      	bls.n	19440 <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
   1942c:	4a69      	ldr	r2, [pc, #420]	; (195d4 <adc_nrfx_read+0x1c8>)
   1942e:	9202      	str	r2, [sp, #8]
		LOG_ERR(
   19430:	2201      	movs	r2, #1
   19432:	4618      	mov	r0, r3
   19434:	e9cd 3300 	strd	r3, r3, [sp]
   19438:	4967      	ldr	r1, [pc, #412]	; (195d8 <adc_nrfx_read+0x1cc>)
   1943a:	f00e fab5 	bl	279a8 <z_log_msg_runtime_create.constprop.0>
	if (error) {
   1943e:	e014      	b.n	1946a <adc_nrfx_read+0x5e>
   19440:	461a      	mov	r2, r3
	active_channels = 0U;
   19442:	4618      	mov	r0, r3
    p_reg->CH[channel].PSELP = pselp;
   19444:	4d65      	ldr	r5, [pc, #404]	; (195dc <adc_nrfx_read+0x1d0>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   19446:	4f66      	ldr	r7, [pc, #408]	; (195e0 <adc_nrfx_read+0x1d4>)
		if (selected_channels & BIT(channel_id)) {
   19448:	fa26 f302 	lsr.w	r3, r6, r2
   1944c:	f013 0301 	ands.w	r3, r3, #1
   19450:	d039      	beq.n	194c6 <adc_nrfx_read+0xba>
			if (m_data.positive_inputs[channel_id] == 0U) {
   19452:	5cbb      	ldrb	r3, [r7, r2]
   19454:	b98b      	cbnz	r3, 1947a <adc_nrfx_read+0x6e>
				LOG_ERR("Channel %u not configured",
   19456:	9203      	str	r2, [sp, #12]
   19458:	4a62      	ldr	r2, [pc, #392]	; (195e4 <adc_nrfx_read+0x1d8>)
   1945a:	9202      	str	r2, [sp, #8]
   1945c:	e9cd 3300 	strd	r3, r3, [sp]
   19460:	2201      	movs	r2, #1
   19462:	4618      	mov	r0, r3
   19464:	495c      	ldr	r1, [pc, #368]	; (195d8 <adc_nrfx_read+0x1cc>)
   19466:	f00e fa9f 	bl	279a8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1946a:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   1946e:	4858      	ldr	r0, [pc, #352]	; (195d0 <adc_nrfx_read+0x1c4>)
   19470:	f006 fb34 	bl	1fadc <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   19474:	4620      	mov	r0, r4
   19476:	b007      	add	sp, #28
   19478:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1947a:	f894 c011 	ldrb.w	ip, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1947e:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
   19482:	f1bc 0c00 	subs.w	ip, ip, #0
   19486:	bf18      	it	ne
   19488:	f04f 0c01 	movne.w	ip, #1
   1948c:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
			++active_channels;
   19490:	3001      	adds	r0, #1
   19492:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   19496:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   1949a:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1949e:	f102 0151 	add.w	r1, r2, #81	; 0x51
   194a2:	0109      	lsls	r1, r1, #4
   194a4:	506b      	str	r3, [r5, r1]
   194a6:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
   194a8:	3201      	adds	r2, #1
   194aa:	2a08      	cmp	r2, #8
   194ac:	d1cc      	bne.n	19448 <adc_nrfx_read+0x3c>
	error = set_resolution(sequence);
   194ae:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
   194b0:	2300      	movs	r3, #0
   194b2:	f1a2 0108 	sub.w	r1, r2, #8
   194b6:	2906      	cmp	r1, #6
   194b8:	d818      	bhi.n	194ec <adc_nrfx_read+0xe0>
   194ba:	e8df f001 	tbb	[pc, r1]
   194be:	171e      	.short	0x171e
   194c0:	17091720 	.word	0x17091720
   194c4:	15          	.byte	0x15
   194c5:	00          	.byte	0x00
   194c6:	f102 0151 	add.w	r1, r2, #81	; 0x51
   194ca:	0109      	lsls	r1, r1, #4
   194cc:	506b      	str	r3, [r5, r1]
}
   194ce:	e7eb      	b.n	194a8 <adc_nrfx_read+0x9c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   194d0:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   194d2:	4a42      	ldr	r2, [pc, #264]	; (195dc <adc_nrfx_read+0x1d0>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   194d4:	2801      	cmp	r0, #1
   194d6:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   194da:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   194dc:	d911      	bls.n	19502 <adc_nrfx_read+0xf6>
   194de:	b193      	cbz	r3, 19506 <adc_nrfx_read+0xfa>
		LOG_ERR(
   194e0:	4b41      	ldr	r3, [pc, #260]	; (195e8 <adc_nrfx_read+0x1dc>)
   194e2:	9302      	str	r3, [sp, #8]
   194e4:	2300      	movs	r3, #0
   194e6:	e7a3      	b.n	19430 <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   194e8:	2303      	movs	r3, #3
		break;
   194ea:	e7f2      	b.n	194d2 <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   194ec:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
   194ee:	4a3f      	ldr	r2, [pc, #252]	; (195ec <adc_nrfx_read+0x1e0>)
   194f0:	9300      	str	r3, [sp, #0]
   194f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   194f6:	2300      	movs	r3, #0
   194f8:	e7b2      	b.n	19460 <adc_nrfx_read+0x54>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   194fa:	2300      	movs	r3, #0
   194fc:	e7e9      	b.n	194d2 <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   194fe:	2301      	movs	r3, #1
   19500:	e7e7      	b.n	194d2 <adc_nrfx_read+0xc6>
	switch (sequence->oversampling) {
   19502:	2b08      	cmp	r3, #8
   19504:	d816      	bhi.n	19534 <adc_nrfx_read+0x128>
    p_reg->OVERSAMPLE = oversample;
   19506:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
   1950a:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1950c:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
   1950e:	b9b2      	cbnz	r2, 1953e <adc_nrfx_read+0x132>
	if (sequence->buffer_size < needed_buffer_size) {
   19510:	68e2      	ldr	r2, [r4, #12]
   19512:	429a      	cmp	r2, r3
   19514:	d217      	bcs.n	19546 <adc_nrfx_read+0x13a>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   19516:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1951a:	4b35      	ldr	r3, [pc, #212]	; (195f0 <adc_nrfx_read+0x1e4>)
   1951c:	2201      	movs	r2, #1
   1951e:	9302      	str	r3, [sp, #8]
   19520:	2300      	movs	r3, #0
   19522:	492d      	ldr	r1, [pc, #180]	; (195d8 <adc_nrfx_read+0x1cc>)
   19524:	4618      	mov	r0, r3
   19526:	e9cd 3300 	strd	r3, r3, [sp]
   1952a:	f00e fa3d 	bl	279a8 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   1952e:	f06f 040b 	mvn.w	r4, #11
   19532:	e79c      	b.n	1946e <adc_nrfx_read+0x62>
	switch (sequence->oversampling) {
   19534:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
   19536:	4b2f      	ldr	r3, [pc, #188]	; (195f4 <adc_nrfx_read+0x1e8>)
   19538:	9302      	str	r3, [sp, #8]
   1953a:	2300      	movs	r3, #0
   1953c:	e78e      	b.n	1945c <adc_nrfx_read+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1953e:	8992      	ldrh	r2, [r2, #12]
   19540:	fb02 3303 	mla	r3, r2, r3, r3
   19544:	e7e4      	b.n	19510 <adc_nrfx_read+0x104>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   19546:	4626      	mov	r6, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   19548:	68a2      	ldr	r2, [r4, #8]
   1954a:	4b24      	ldr	r3, [pc, #144]	; (195dc <adc_nrfx_read+0x1d0>)
   1954c:	4f2a      	ldr	r7, [pc, #168]	; (195f8 <adc_nrfx_read+0x1ec>)
   1954e:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
   19552:	f107 0574 	add.w	r5, r7, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   19556:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   1955a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1955c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1955e:	6833      	ldr	r3, [r6, #0]
   19560:	463e      	mov	r6, r7
   19562:	602b      	str	r3, [r5, #0]
	ctx->status = 0;
   19564:	2500      	movs	r5, #0
   19566:	673d      	str	r5, [r7, #112]	; 0x70

	if (sequence->options) {
   19568:	6823      	ldr	r3, [r4, #0]
   1956a:	b36b      	cbz	r3, 195c8 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
   1956c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1956e:	f107 0488 	add.w	r4, r7, #136	; 0x88
   19572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   19576:	677c      	str	r4, [r7, #116]	; 0x74
		ctx->sampling_index = 0U;
   19578:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   1957c:	b320      	cbz	r0, 195c8 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1957e:	e8d6 3fef 	ldaex	r3, [r6]
   19582:	e8c6 5fe2 	stlex	r2, r5, [r6]
   19586:	2a00      	cmp	r2, #0
   19588:	d1f9      	bne.n	1957e <adc_nrfx_read+0x172>
   1958a:	491c      	ldr	r1, [pc, #112]	; (195fc <adc_nrfx_read+0x1f0>)
   1958c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   19590:	460e      	mov	r6, r1
   19592:	4629      	mov	r1, r5
   19594:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
   19598:	2300      	movs	r3, #0
   1959a:	fbe4 6100 	umlal	r6, r1, r4, r0
   1959e:	4a18      	ldr	r2, [pc, #96]	; (19600 <adc_nrfx_read+0x1f4>)
   195a0:	4630      	mov	r0, r6
   195a2:	f7ef fca5 	bl	8ef0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   195a6:	2200      	movs	r2, #0
   195a8:	e9cd 0100 	strd	r0, r1, [sp]
   195ac:	2300      	movs	r3, #0
   195ae:	f107 0008 	add.w	r0, r7, #8
   195b2:	f008 fea5 	bl	22300 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   195b6:	f04f 32ff 	mov.w	r2, #4294967295
   195ba:	f04f 33ff 	mov.w	r3, #4294967295
   195be:	4811      	ldr	r0, [pc, #68]	; (19604 <adc_nrfx_read+0x1f8>)
   195c0:	f006 fad0 	bl	1fb64 <z_impl_k_sem_take>
	return ctx->status;
   195c4:	6f3c      	ldr	r4, [r7, #112]	; 0x70
	return error;
   195c6:	e752      	b.n	1946e <adc_nrfx_read+0x62>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   195c8:	480b      	ldr	r0, [pc, #44]	; (195f8 <adc_nrfx_read+0x1ec>)
   195ca:	f7ff fe8d 	bl	192e8 <adc_context_start_sampling>
   195ce:	e7f2      	b.n	195b6 <adc_nrfx_read+0x1aa>
   195d0:	200081a8 	.word	0x200081a8
   195d4:	0002ef53 	.word	0x0002ef53
   195d8:	0002a360 	.word	0x0002a360
   195dc:	4000e000 	.word	0x4000e000
   195e0:	20008208 	.word	0x20008208
   195e4:	0002ef71 	.word	0x0002ef71
   195e8:	0002efb0 	.word	0x0002efb0
   195ec:	0002ef8b 	.word	0x0002ef8b
   195f0:	0002f005 	.word	0x0002f005
   195f4:	0002efe2 	.word	0x0002efe2
   195f8:	20008168 	.word	0x20008168
   195fc:	000f423f 	.word	0x000f423f
   19600:	000f4240 	.word	0x000f4240
   19604:	200081c0 	.word	0x200081c0

00019608 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   19608:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1960a:	2400      	movs	r4, #0
   1960c:	4b0d      	ldr	r3, [pc, #52]	; (19644 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1960e:	200e      	movs	r0, #14
   19610:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   19614:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   19618:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1961c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   19620:	2212      	movs	r2, #18
   19622:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   19626:	f7f6 fbd1 	bl	fdcc <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1962a:	4622      	mov	r2, r4
   1962c:	2101      	movs	r1, #1
   1962e:	200e      	movs	r0, #14
   19630:	f7f6 fbfc 	bl	fe2c <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   19634:	4804      	ldr	r0, [pc, #16]	; (19648 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   19636:	6c83      	ldr	r3, [r0, #72]	; 0x48
   19638:	b913      	cbnz	r3, 19640 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   1963a:	3040      	adds	r0, #64	; 0x40
   1963c:	f006 fa4e 	bl	1fadc <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   19640:	2000      	movs	r0, #0
   19642:	bd10      	pop	{r4, pc}
   19644:	4000e000 	.word	0x4000e000
   19648:	20008168 	.word	0x20008168

0001964c <saadc_irq_handler>:
{
   1964c:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1964e:	4b2d      	ldr	r3, [pc, #180]	; (19704 <saadc_irq_handler+0xb8>)
   19650:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   19654:	2a00      	cmp	r2, #0
   19656:	d048      	beq.n	196ea <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19658:	2200      	movs	r2, #0
   1965a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1965e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19662:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   19664:	4c28      	ldr	r4, [pc, #160]	; (19708 <saadc_irq_handler+0xbc>)
   19666:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   19668:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1966c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1966e:	4625      	mov	r5, r4
   19670:	b3b3      	cbz	r3, 196e0 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   19672:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   19676:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   1967a:	b133      	cbz	r3, 1968a <saadc_irq_handler+0x3e>
			action = callback(dev,
   1967c:	f104 0174 	add.w	r1, r4, #116	; 0x74
   19680:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   19682:	2801      	cmp	r0, #1
   19684:	d014      	beq.n	196b0 <saadc_irq_handler+0x64>
   19686:	2802      	cmp	r0, #2
   19688:	d024      	beq.n	196d4 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1968a:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   1968e:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   19692:	429a      	cmp	r2, r3
   19694:	d91e      	bls.n	196d4 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   19696:	3301      	adds	r3, #1
   19698:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1969c:	4b19      	ldr	r3, [pc, #100]	; (19704 <saadc_irq_handler+0xb8>)
   1969e:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   196a2:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   196a6:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   196a8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   196ac:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   196b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   196b4:	b923      	cbnz	r3, 196c0 <saadc_irq_handler+0x74>
}
   196b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   196ba:	4813      	ldr	r0, [pc, #76]	; (19708 <saadc_irq_handler+0xbc>)
   196bc:	f7ff be14 	b.w	192e8 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   196c0:	e8d5 3fef 	ldaex	r3, [r5]
   196c4:	1e5a      	subs	r2, r3, #1
   196c6:	e8c5 2fe1 	stlex	r1, r2, [r5]
   196ca:	2900      	cmp	r1, #0
   196cc:	d1f8      	bne.n	196c0 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   196ce:	2b01      	cmp	r3, #1
   196d0:	dcf1      	bgt.n	196b6 <saadc_irq_handler+0x6a>
   196d2:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   196d4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   196d8:	b113      	cbz	r3, 196e0 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   196da:	480c      	ldr	r0, [pc, #48]	; (1970c <saadc_irq_handler+0xc0>)
   196dc:	f00f fdf2 	bl	292c4 <z_impl_k_timer_stop>
   196e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   196e4:	480a      	ldr	r0, [pc, #40]	; (19710 <saadc_irq_handler+0xc4>)
   196e6:	f006 b9f9 	b.w	1fadc <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   196ea:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   196ee:	2900      	cmp	r1, #0
   196f0:	d0ef      	beq.n	196d2 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   196f2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   196f6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   196fa:	2201      	movs	r2, #1
   196fc:	609a      	str	r2, [r3, #8]
   196fe:	601a      	str	r2, [r3, #0]
   19700:	605a      	str	r2, [r3, #4]
}
   19702:	e7e6      	b.n	196d2 <saadc_irq_handler+0x86>
   19704:	4000e000 	.word	0x4000e000
   19708:	20008168 	.word	0x20008168
   1970c:	20008170 	.word	0x20008170
   19710:	200081c0 	.word	0x200081c0

00019714 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   19714:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19716:	2340      	movs	r3, #64	; 0x40
{
   19718:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1971a:	490a      	ldr	r1, [pc, #40]	; (19744 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1971c:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1971e:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19720:	1149      	asrs	r1, r1, #5
{
   19722:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19724:	4623      	mov	r3, r4
   19726:	4a08      	ldr	r2, [pc, #32]	; (19748 <onoff_start+0x34>)
   19728:	4808      	ldr	r0, [pc, #32]	; (1974c <onoff_start+0x38>)
   1972a:	f00e f973 	bl	27a14 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1972e:	1e01      	subs	r1, r0, #0
   19730:	da05      	bge.n	1973e <onoff_start+0x2a>
		notify(mgr, err);
   19732:	4628      	mov	r0, r5
   19734:	4623      	mov	r3, r4
	}
}
   19736:	b003      	add	sp, #12
   19738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1973c:	4718      	bx	r3
}
   1973e:	b003      	add	sp, #12
   19740:	bd30      	pop	{r4, r5, pc}
   19742:	bf00      	nop
   19744:	200211a4 	.word	0x200211a4
   19748:	00027a83 	.word	0x00027a83
   1974c:	00029dd8 	.word	0x00029dd8

00019750 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19750:	b2c9      	uxtb	r1, r1
   19752:	2903      	cmp	r1, #3
{
   19754:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19756:	d909      	bls.n	1976c <get_status+0x1c>
   19758:	4909      	ldr	r1, [pc, #36]	; (19780 <get_status+0x30>)
   1975a:	480a      	ldr	r0, [pc, #40]	; (19784 <get_status+0x34>)
   1975c:	237a      	movs	r3, #122	; 0x7a
   1975e:	4a0a      	ldr	r2, [pc, #40]	; (19788 <get_status+0x38>)
   19760:	f00b f921 	bl	249a6 <assert_print>
   19764:	217a      	movs	r1, #122	; 0x7a
   19766:	4808      	ldr	r0, [pc, #32]	; (19788 <get_status+0x38>)
   19768:	f00b f916 	bl	24998 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1976c:	220c      	movs	r2, #12
   1976e:	6903      	ldr	r3, [r0, #16]
   19770:	fb01 3302 	mla	r3, r1, r2, r3
   19774:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   19778:	f000 0007 	and.w	r0, r0, #7
   1977c:	bd08      	pop	{r3, pc}
   1977e:	bf00      	nop
   19780:	0002f07f 	.word	0x0002f07f
   19784:	0002b339 	.word	0x0002b339
   19788:	0002f042 	.word	0x0002f042

0001978c <stop>:
{
   1978c:	b570      	push	{r4, r5, r6, lr}
   1978e:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19790:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   19792:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19794:	d90b      	bls.n	197ae <stop+0x22>
   19796:	491a      	ldr	r1, [pc, #104]	; (19800 <stop+0x74>)
   19798:	481a      	ldr	r0, [pc, #104]	; (19804 <stop+0x78>)
   1979a:	f240 135d 	movw	r3, #349	; 0x15d
   1979e:	4a1a      	ldr	r2, [pc, #104]	; (19808 <stop+0x7c>)
   197a0:	f00b f901 	bl	249a6 <assert_print>
   197a4:	f240 115d 	movw	r1, #349	; 0x15d
   197a8:	4817      	ldr	r0, [pc, #92]	; (19808 <stop+0x7c>)
   197aa:	f00b f8f5 	bl	24998 <assert_post_action>
	__asm__ volatile(
   197ae:	f04f 0420 	mov.w	r4, #32
   197b2:	f3ef 8511 	mrs	r5, BASEPRI
   197b6:	f384 8812 	msr	BASEPRI_MAX, r4
   197ba:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   197be:	260c      	movs	r6, #12
   197c0:	fb06 3401 	mla	r4, r6, r1, r3
   197c4:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   197c8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   197cc:	d008      	beq.n	197e0 <stop+0x54>
   197ce:	42a2      	cmp	r2, r4
   197d0:	d006      	beq.n	197e0 <stop+0x54>
	__asm__ volatile(
   197d2:	f385 8811 	msr	BASEPRI, r5
   197d6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   197da:	f04f 30ff 	mov.w	r0, #4294967295
}
   197de:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   197e0:	2201      	movs	r2, #1
   197e2:	4371      	muls	r1, r6
   197e4:	440b      	add	r3, r1
   197e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   197ea:	f385 8811 	msr	BASEPRI, r5
   197ee:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   197f2:	6843      	ldr	r3, [r0, #4]
   197f4:	440b      	add	r3, r1
   197f6:	685b      	ldr	r3, [r3, #4]
   197f8:	4798      	blx	r3
	return 0;
   197fa:	2000      	movs	r0, #0
   197fc:	e7ef      	b.n	197de <stop+0x52>
   197fe:	bf00      	nop
   19800:	0002f07f 	.word	0x0002f07f
   19804:	0002b339 	.word	0x0002b339
   19808:	0002f042 	.word	0x0002f042

0001980c <onoff_stop>:
{
   1980c:	b570      	push	{r4, r5, r6, lr}
   1980e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   19810:	4906      	ldr	r1, [pc, #24]	; (1982c <onoff_stop+0x20>)
{
   19812:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   19814:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19816:	1149      	asrs	r1, r1, #5
   19818:	2240      	movs	r2, #64	; 0x40
   1981a:	4805      	ldr	r0, [pc, #20]	; (19830 <onoff_stop+0x24>)
   1981c:	f7ff ffb6 	bl	1978c <stop>
	notify(mgr, res);
   19820:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19822:	4601      	mov	r1, r0
	notify(mgr, res);
   19824:	4620      	mov	r0, r4
}
   19826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1982a:	4718      	bx	r3
   1982c:	200211a4 	.word	0x200211a4
   19830:	00029dd8 	.word	0x00029dd8

00019834 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   19834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19838:	2200      	movs	r2, #0
   1983a:	2101      	movs	r1, #1
{
   1983c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1983e:	2005      	movs	r0, #5
   19840:	f7f6 faf4 	bl	fe2c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   19844:	4811      	ldr	r0, [pc, #68]	; (1988c <clk_init+0x58>)
   19846:	f002 ff81 	bl	1c74c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1984a:	4b11      	ldr	r3, [pc, #68]	; (19890 <clk_init+0x5c>)
   1984c:	4298      	cmp	r0, r3
   1984e:	d119      	bne.n	19884 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   19850:	f002 ffa0 	bl	1c794 <nrfx_clock_enable>
   19854:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19856:	f04f 080c 	mov.w	r8, #12
   1985a:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1985c:	f8df 9034 	ldr.w	r9, [pc, #52]	; 19894 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   19860:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   19862:	4649      	mov	r1, r9
   19864:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   19868:	f00b f858 	bl	2491c <onoff_manager_init>
		if (err < 0) {
   1986c:	2800      	cmp	r0, #0
   1986e:	db07      	blt.n	19880 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19870:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   19874:	3401      	adds	r4, #1
   19876:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19878:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1987c:	d1f0      	bne.n	19860 <clk_init+0x2c>
	}

	return 0;
   1987e:	2000      	movs	r0, #0
}
   19880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   19884:	f06f 0004 	mvn.w	r0, #4
   19888:	e7fa      	b.n	19880 <clk_init+0x4c>
   1988a:	bf00      	nop
   1988c:	000198d1 	.word	0x000198d1
   19890:	0bad0000 	.word	0x0bad0000
   19894:	0002af94 	.word	0x0002af94

00019898 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   19898:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1989a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1989c:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1989e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   198a0:	434b      	muls	r3, r1
   198a2:	4809      	ldr	r0, [pc, #36]	; (198c8 <clkstarted_handle.constprop.0+0x30>)
   198a4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   198a6:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   198a8:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   198ac:	4418      	add	r0, r3
	sub_data->cb = NULL;
   198ae:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   198b2:	f00e f89c 	bl	279ee <set_on_state>
	if (callback) {
   198b6:	b12d      	cbz	r5, 198c4 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   198b8:	4632      	mov	r2, r6
   198ba:	462b      	mov	r3, r5
}
   198bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   198c0:	4802      	ldr	r0, [pc, #8]	; (198cc <clkstarted_handle.constprop.0+0x34>)
   198c2:	4718      	bx	r3
}
   198c4:	bd70      	pop	{r4, r5, r6, pc}
   198c6:	bf00      	nop
   198c8:	200211a4 	.word	0x200211a4
   198cc:	00029dd8 	.word	0x00029dd8

000198d0 <clock_event_handler>:
{
   198d0:	b508      	push	{r3, lr}
	switch (event) {
   198d2:	2805      	cmp	r0, #5
   198d4:	d820      	bhi.n	19918 <clock_event_handler+0x48>
   198d6:	e8df f000 	tbb	[pc, r0]
   198da:	1103      	.short	0x1103
   198dc:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   198e0:	4b13      	ldr	r3, [pc, #76]	; (19930 <clock_event_handler+0x60>)
   198e2:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   198e6:	f010 0007 	ands.w	r0, r0, #7
   198ea:	d11f      	bne.n	1992c <clock_event_handler+0x5c>
}
   198ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   198f0:	f7ff bfd2 	b.w	19898 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   198f4:	2002      	movs	r0, #2
   198f6:	e7f9      	b.n	198ec <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   198f8:	2003      	movs	r0, #3
   198fa:	e7f7      	b.n	198ec <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   198fc:	2001      	movs	r0, #1
   198fe:	e7f5      	b.n	198ec <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   19900:	490c      	ldr	r1, [pc, #48]	; (19934 <clock_event_handler+0x64>)
   19902:	f240 236e 	movw	r3, #622	; 0x26e
   19906:	4a0c      	ldr	r2, [pc, #48]	; (19938 <clock_event_handler+0x68>)
   19908:	480c      	ldr	r0, [pc, #48]	; (1993c <clock_event_handler+0x6c>)
   1990a:	f00b f84c 	bl	249a6 <assert_print>
   1990e:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   19912:	4809      	ldr	r0, [pc, #36]	; (19938 <clock_event_handler+0x68>)
   19914:	f00b f840 	bl	24998 <assert_post_action>
   19918:	4906      	ldr	r1, [pc, #24]	; (19934 <clock_event_handler+0x64>)
   1991a:	f240 2372 	movw	r3, #626	; 0x272
   1991e:	4a06      	ldr	r2, [pc, #24]	; (19938 <clock_event_handler+0x68>)
   19920:	4806      	ldr	r0, [pc, #24]	; (1993c <clock_event_handler+0x6c>)
   19922:	f00b f840 	bl	249a6 <assert_print>
   19926:	f240 2172 	movw	r1, #626	; 0x272
   1992a:	e7f2      	b.n	19912 <clock_event_handler+0x42>
}
   1992c:	bd08      	pop	{r3, pc}
   1992e:	bf00      	nop
   19930:	200211a4 	.word	0x200211a4
   19934:	00030a97 	.word	0x00030a97
   19938:	0002f042 	.word	0x0002f042
   1993c:	0002b339 	.word	0x0002b339

00019940 <generic_hfclk_start>:
{
   19940:	b508      	push	{r3, lr}
	__asm__ volatile(
   19942:	f04f 0320 	mov.w	r3, #32
   19946:	f3ef 8111 	mrs	r1, BASEPRI
   1994a:	f383 8812 	msr	BASEPRI_MAX, r3
   1994e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   19952:	4a11      	ldr	r2, [pc, #68]	; (19998 <generic_hfclk_start+0x58>)
   19954:	6813      	ldr	r3, [r2, #0]
   19956:	f043 0002 	orr.w	r0, r3, #2
   1995a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1995c:	07da      	lsls	r2, r3, #31
   1995e:	d408      	bmi.n	19972 <generic_hfclk_start+0x32>
	__asm__ volatile(
   19960:	f381 8811 	msr	BASEPRI, r1
   19964:	f3bf 8f6f 	isb	sy
}
   19968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1996c:	2001      	movs	r0, #1
   1996e:	f002 bf3b 	b.w	1c7e8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19972:	4b0a      	ldr	r3, [pc, #40]	; (1999c <generic_hfclk_start+0x5c>)
   19974:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19978:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1997c:	07d3      	lsls	r3, r2, #31
   1997e:	d5ef      	bpl.n	19960 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   19980:	4807      	ldr	r0, [pc, #28]	; (199a0 <generic_hfclk_start+0x60>)
   19982:	f00e f834 	bl	279ee <set_on_state>
   19986:	f381 8811 	msr	BASEPRI, r1
   1998a:	f3bf 8f6f 	isb	sy
}
   1998e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   19992:	2000      	movs	r0, #0
   19994:	f7ff bf80 	b.w	19898 <clkstarted_handle.constprop.0>
   19998:	20021254 	.word	0x20021254
   1999c:	40005000 	.word	0x40005000
   199a0:	2002122c 	.word	0x2002122c

000199a4 <api_blocking_start>:
{
   199a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   199a6:	2200      	movs	r2, #0
   199a8:	2301      	movs	r3, #1
   199aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   199ae:	ab04      	add	r3, sp, #16
   199b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   199b4:	4a09      	ldr	r2, [pc, #36]	; (199dc <api_blocking_start+0x38>)
   199b6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   199b8:	f8cd d000 	str.w	sp, [sp]
   199bc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   199c0:	f00e f858 	bl	27a74 <api_start>
	if (err < 0) {
   199c4:	2800      	cmp	r0, #0
   199c6:	db05      	blt.n	199d4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   199c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   199cc:	2300      	movs	r3, #0
   199ce:	4668      	mov	r0, sp
   199d0:	f006 f8c8 	bl	1fb64 <z_impl_k_sem_take>
}
   199d4:	b007      	add	sp, #28
   199d6:	f85d fb04 	ldr.w	pc, [sp], #4
   199da:	bf00      	nop
   199dc:	00027ab3 	.word	0x00027ab3

000199e0 <generic_hfclk_stop>:
{
   199e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   199e2:	f04f 0320 	mov.w	r3, #32
   199e6:	f3ef 8411 	mrs	r4, BASEPRI
   199ea:	f383 8812 	msr	BASEPRI_MAX, r3
   199ee:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   199f2:	4a07      	ldr	r2, [pc, #28]	; (19a10 <generic_hfclk_stop+0x30>)
   199f4:	6813      	ldr	r3, [r2, #0]
   199f6:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   199fa:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   199fc:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   199fe:	d402      	bmi.n	19a06 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   19a00:	2001      	movs	r0, #1
   19a02:	f002 ff6f 	bl	1c8e4 <nrfx_clock_stop>
	__asm__ volatile(
   19a06:	f384 8811 	msr	BASEPRI, r4
   19a0a:	f3bf 8f6f 	isb	sy
}
   19a0e:	bd10      	pop	{r4, pc}
   19a10:	20021254 	.word	0x20021254

00019a14 <z_nrf_clock_control_lf_on>:
{
   19a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19a18:	2201      	movs	r2, #1
   19a1a:	4606      	mov	r6, r0
   19a1c:	4941      	ldr	r1, [pc, #260]	; (19b24 <z_nrf_clock_control_lf_on+0x110>)
   19a1e:	e8d1 3fef 	ldaex	r3, [r1]
   19a22:	e8c1 2fe0 	stlex	r0, r2, [r1]
   19a26:	2800      	cmp	r0, #0
   19a28:	d1f9      	bne.n	19a1e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   19a2a:	b9a3      	cbnz	r3, 19a56 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   19a2c:	493e      	ldr	r1, [pc, #248]	; (19b28 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   19a2e:	483f      	ldr	r0, [pc, #252]	; (19b2c <z_nrf_clock_control_lf_on+0x118>)
   19a30:	604b      	str	r3, [r1, #4]
   19a32:	60cb      	str	r3, [r1, #12]
   19a34:	608a      	str	r2, [r1, #8]
   19a36:	f7f3 fae3 	bl	d000 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   19a3a:	2800      	cmp	r0, #0
   19a3c:	da0b      	bge.n	19a56 <z_nrf_clock_control_lf_on+0x42>
   19a3e:	493c      	ldr	r1, [pc, #240]	; (19b30 <z_nrf_clock_control_lf_on+0x11c>)
   19a40:	f44f 730c 	mov.w	r3, #560	; 0x230
   19a44:	4a3b      	ldr	r2, [pc, #236]	; (19b34 <z_nrf_clock_control_lf_on+0x120>)
   19a46:	483c      	ldr	r0, [pc, #240]	; (19b38 <z_nrf_clock_control_lf_on+0x124>)
   19a48:	f00a ffad 	bl	249a6 <assert_print>
   19a4c:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   19a50:	4838      	ldr	r0, [pc, #224]	; (19b34 <z_nrf_clock_control_lf_on+0x120>)
   19a52:	f00a ffa1 	bl	24998 <assert_post_action>
	switch (start_mode) {
   19a56:	b35e      	cbz	r6, 19ab0 <z_nrf_clock_control_lf_on+0x9c>
   19a58:	1e73      	subs	r3, r6, #1
   19a5a:	2b01      	cmp	r3, #1
   19a5c:	d858      	bhi.n	19b10 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   19a5e:	2e01      	cmp	r6, #1
   19a60:	d106      	bne.n	19a70 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   19a62:	4b36      	ldr	r3, [pc, #216]	; (19b3c <z_nrf_clock_control_lf_on+0x128>)
   19a64:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   19a68:	f003 0303 	and.w	r3, r3, #3
   19a6c:	2b02      	cmp	r3, #2
   19a6e:	d01f      	beq.n	19ab0 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19a70:	f00f fafa 	bl	29068 <k_is_in_isr>
   19a74:	4605      	mov	r5, r0
   19a76:	b9e8      	cbnz	r0, 19ab4 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   19a78:	4b31      	ldr	r3, [pc, #196]	; (19b40 <z_nrf_clock_control_lf_on+0x12c>)
   19a7a:	781b      	ldrb	r3, [r3, #0]
   19a7c:	b1d3      	cbz	r3, 19ab4 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   19a7e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   19a80:	4607      	mov	r7, r0
   19a82:	4b2e      	ldr	r3, [pc, #184]	; (19b3c <z_nrf_clock_control_lf_on+0x128>)
   19a84:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19a88:	4c2c      	ldr	r4, [pc, #176]	; (19b3c <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19a8a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 19b44 <z_nrf_clock_control_lf_on+0x130>
   19a8e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19a92:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   19a96:	03d2      	lsls	r2, r2, #15
   19a98:	d516      	bpl.n	19ac8 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   19a9a:	f003 0303 	and.w	r3, r3, #3
   19a9e:	2b02      	cmp	r3, #2
   19aa0:	d001      	beq.n	19aa6 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   19aa2:	2e01      	cmp	r6, #1
   19aa4:	d110      	bne.n	19ac8 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   19aa6:	b375      	cbz	r5, 19b06 <z_nrf_clock_control_lf_on+0xf2>
   19aa8:	f387 8811 	msr	BASEPRI, r7
   19aac:	f3bf 8f6f 	isb	sy
}
   19ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   19ab4:	f04f 0320 	mov.w	r3, #32
   19ab8:	f3ef 8711 	mrs	r7, BASEPRI
   19abc:	f383 8812 	msr	BASEPRI_MAX, r3
   19ac0:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19ac4:	2501      	movs	r5, #1
   19ac6:	e7df      	b.n	19a88 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   19ac8:	b1c5      	cbz	r5, 19afc <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   19aca:	4638      	mov	r0, r7
   19acc:	f7f6 f924 	bl	fd18 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   19ad0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   19ad4:	b2db      	uxtb	r3, r3
   19ad6:	2b01      	cmp	r3, #1
   19ad8:	d1d9      	bne.n	19a8e <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19ada:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   19ade:	2a00      	cmp	r2, #0
   19ae0:	d0d5      	beq.n	19a8e <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19ae2:	2200      	movs	r2, #0
   19ae4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19ae8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   19aec:	2202      	movs	r2, #2
   19aee:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   19af2:	2220      	movs	r2, #32
   19af4:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19af8:	60a3      	str	r3, [r4, #8]
}
   19afa:	e7c8      	b.n	19a8e <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   19afc:	2100      	movs	r1, #0
   19afe:	2021      	movs	r0, #33	; 0x21
   19b00:	f007 fee0 	bl	218c4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19b04:	e7e4      	b.n	19ad0 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   19b06:	2202      	movs	r2, #2
   19b08:	4b0c      	ldr	r3, [pc, #48]	; (19b3c <z_nrf_clock_control_lf_on+0x128>)
   19b0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   19b0e:	e7cf      	b.n	19ab0 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   19b10:	490d      	ldr	r1, [pc, #52]	; (19b48 <z_nrf_clock_control_lf_on+0x134>)
   19b12:	f240 2342 	movw	r3, #578	; 0x242
   19b16:	4a07      	ldr	r2, [pc, #28]	; (19b34 <z_nrf_clock_control_lf_on+0x120>)
   19b18:	4807      	ldr	r0, [pc, #28]	; (19b38 <z_nrf_clock_control_lf_on+0x124>)
   19b1a:	f00a ff44 	bl	249a6 <assert_print>
   19b1e:	f240 2142 	movw	r1, #578	; 0x242
   19b22:	e795      	b.n	19a50 <z_nrf_clock_control_lf_on+0x3c>
   19b24:	200211a0 	.word	0x200211a0
   19b28:	20021190 	.word	0x20021190
   19b2c:	200211c4 	.word	0x200211c4
   19b30:	0002c46a 	.word	0x0002c46a
   19b34:	0002f042 	.word	0x0002f042
   19b38:	0002b339 	.word	0x0002b339
   19b3c:	40005000 	.word	0x40005000
   19b40:	200221ee 	.word	0x200221ee
   19b44:	e000e100 	.word	0xe000e100
   19b48:	00030a97 	.word	0x00030a97

00019b4c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   19b4c:	b508      	push	{r3, lr}
   19b4e:	4807      	ldr	r0, [pc, #28]	; (19b6c <uart_console_init+0x20>)
   19b50:	f00f fa4d 	bl	28fee <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   19b54:	b138      	cbz	r0, 19b66 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   19b56:	4806      	ldr	r0, [pc, #24]	; (19b70 <uart_console_init+0x24>)
   19b58:	f7f7 f866 	bl	10c28 <__stdout_hook_install>
	__printk_hook_install(console_out);
   19b5c:	4804      	ldr	r0, [pc, #16]	; (19b70 <uart_console_init+0x24>)
   19b5e:	f7f2 fecd 	bl	c8fc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   19b62:	2000      	movs	r0, #0
}
   19b64:	bd08      	pop	{r3, pc}
		return -ENODEV;
   19b66:	f06f 0012 	mvn.w	r0, #18
   19b6a:	e7fb      	b.n	19b64 <uart_console_init+0x18>
   19b6c:	00029e68 	.word	0x00029e68
   19b70:	00019b75 	.word	0x00019b75

00019b74 <console_out>:
	if ('\n' == c) {
   19b74:	280a      	cmp	r0, #10
{
   19b76:	b538      	push	{r3, r4, r5, lr}
   19b78:	4604      	mov	r4, r0
   19b7a:	4d07      	ldr	r5, [pc, #28]	; (19b98 <console_out+0x24>)
	if ('\n' == c) {
   19b7c:	d104      	bne.n	19b88 <console_out+0x14>
	api->poll_out(dev, out_char);
   19b7e:	68ab      	ldr	r3, [r5, #8]
   19b80:	210d      	movs	r1, #13
   19b82:	4628      	mov	r0, r5
   19b84:	69db      	ldr	r3, [r3, #28]
   19b86:	4798      	blx	r3
   19b88:	68ab      	ldr	r3, [r5, #8]
   19b8a:	4803      	ldr	r0, [pc, #12]	; (19b98 <console_out+0x24>)
   19b8c:	69db      	ldr	r3, [r3, #28]
   19b8e:	b2e1      	uxtb	r1, r4
   19b90:	4798      	blx	r3
}
   19b92:	4620      	mov	r0, r4
   19b94:	bd38      	pop	{r3, r4, r5, pc}
   19b96:	bf00      	nop
   19b98:	00029e68 	.word	0x00029e68

00019b9c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   19b9c:	b510      	push	{r4, lr}
	return port->data;
   19b9e:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   19ba0:	b961      	cbnz	r1, 19bbc <gpio_nrfx_manage_callback+0x20>
   19ba2:	4920      	ldr	r1, [pc, #128]	; (19c24 <gpio_nrfx_manage_callback+0x88>)
   19ba4:	232a      	movs	r3, #42	; 0x2a
   19ba6:	4a20      	ldr	r2, [pc, #128]	; (19c28 <gpio_nrfx_manage_callback+0x8c>)
   19ba8:	4820      	ldr	r0, [pc, #128]	; (19c2c <gpio_nrfx_manage_callback+0x90>)
   19baa:	f00a fefc 	bl	249a6 <assert_print>
   19bae:	4820      	ldr	r0, [pc, #128]	; (19c30 <gpio_nrfx_manage_callback+0x94>)
   19bb0:	f00a fef9 	bl	249a6 <assert_print>
   19bb4:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   19bb6:	481c      	ldr	r0, [pc, #112]	; (19c28 <gpio_nrfx_manage_callback+0x8c>)
   19bb8:	f00a feee 	bl	24998 <assert_post_action>
   19bbc:	6848      	ldr	r0, [r1, #4]
   19bbe:	b950      	cbnz	r0, 19bd6 <gpio_nrfx_manage_callback+0x3a>
   19bc0:	491c      	ldr	r1, [pc, #112]	; (19c34 <gpio_nrfx_manage_callback+0x98>)
   19bc2:	232b      	movs	r3, #43	; 0x2b
   19bc4:	4a18      	ldr	r2, [pc, #96]	; (19c28 <gpio_nrfx_manage_callback+0x8c>)
   19bc6:	4819      	ldr	r0, [pc, #100]	; (19c2c <gpio_nrfx_manage_callback+0x90>)
   19bc8:	f00a feed 	bl	249a6 <assert_print>
   19bcc:	481a      	ldr	r0, [pc, #104]	; (19c38 <gpio_nrfx_manage_callback+0x9c>)
   19bce:	f00a feea 	bl	249a6 <assert_print>
   19bd2:	212b      	movs	r1, #43	; 0x2b
   19bd4:	e7ef      	b.n	19bb6 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   19bd6:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   19bd8:	b1f8      	cbz	r0, 19c1a <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19bda:	4288      	cmp	r0, r1
   19bdc:	d119      	bne.n	19c12 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   19bde:	689c      	ldr	r4, [r3, #8]
	return node->next;
   19be0:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   19be2:	42a1      	cmp	r1, r4
	list->head = node;
   19be4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   19be6:	d100      	bne.n	19bea <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   19be8:	6098      	str	r0, [r3, #8]
	parent->next = child;
   19bea:	2000      	movs	r0, #0
   19bec:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   19bee:	b12a      	cbz	r2, 19bfc <gpio_nrfx_manage_callback+0x60>
	return list->head;
   19bf0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   19bf2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   19bf4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   19bf6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   19bf8:	b902      	cbnz	r2, 19bfc <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   19bfa:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   19bfc:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   19bfe:	e010      	b.n	19c22 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19c00:	4281      	cmp	r1, r0
   19c02:	d106      	bne.n	19c12 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   19c04:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   19c06:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   19c08:	6898      	ldr	r0, [r3, #8]
   19c0a:	4281      	cmp	r1, r0
   19c0c:	d1ed      	bne.n	19bea <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   19c0e:	609c      	str	r4, [r3, #8]
}
   19c10:	e7eb      	b.n	19bea <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   19c12:	4604      	mov	r4, r0
   19c14:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19c16:	2800      	cmp	r0, #0
   19c18:	d1f2      	bne.n	19c00 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   19c1a:	2a00      	cmp	r2, #0
   19c1c:	d1e8      	bne.n	19bf0 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   19c1e:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   19c22:	bd10      	pop	{r4, pc}
   19c24:	0002b986 	.word	0x0002b986
   19c28:	0002f0dd 	.word	0x0002f0dd
   19c2c:	0002b339 	.word	0x0002b339
   19c30:	0002f119 	.word	0x0002f119
   19c34:	0002f128 	.word	0x0002f128
   19c38:	0002f13a 	.word	0x0002f13a

00019c3c <gpio_nrfx_pin_interrupt_configure>:
{
   19c3c:	b530      	push	{r4, r5, lr}
	return port->config;
   19c3e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19c40:	f001 041f 	and.w	r4, r1, #31
   19c44:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   19c46:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   19c4a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19c4c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   19c50:	d105      	bne.n	19c5e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   19c52:	4620      	mov	r0, r4
   19c54:	f003 f990 	bl	1cf78 <nrfx_gpiote_trigger_disable>
		return 0;
   19c58:	2000      	movs	r0, #0
}
   19c5a:	b005      	add	sp, #20
   19c5c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   19c5e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   19c60:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   19c64:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   19c68:	d114      	bne.n	19c94 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   19c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   19c6e:	bf0c      	ite	eq
   19c70:	2304      	moveq	r3, #4
   19c72:	2305      	movne	r3, #5
   19c74:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19c78:	2300      	movs	r3, #0
   19c7a:	4620      	mov	r0, r4
   19c7c:	4619      	mov	r1, r3
   19c7e:	aa02      	add	r2, sp, #8
   19c80:	f002 ff84 	bl	1cb8c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19c84:	4b2a      	ldr	r3, [pc, #168]	; (19d30 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   19c86:	4298      	cmp	r0, r3
   19c88:	d14f      	bne.n	19d2a <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   19c8a:	2101      	movs	r1, #1
   19c8c:	4620      	mov	r0, r4
   19c8e:	f003 f909 	bl	1cea4 <nrfx_gpiote_trigger_enable>
	return 0;
   19c92:	e7e1      	b.n	19c58 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   19c94:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   19c98:	d024      	beq.n	19ce4 <gpio_nrfx_pin_interrupt_configure+0xa8>
   19c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   19c9e:	bf14      	ite	ne
   19ca0:	2301      	movne	r3, #1
   19ca2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   19ca4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   19ca8:	6883      	ldr	r3, [r0, #8]
   19caa:	40cb      	lsrs	r3, r1
   19cac:	07d8      	lsls	r0, r3, #31
   19cae:	d4e3      	bmi.n	19c78 <gpio_nrfx_pin_interrupt_configure+0x3c>
   19cb0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   19cb4:	d1e0      	bne.n	19c78 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   19cb6:	0962      	lsrs	r2, r4, #5
   19cb8:	f004 031f 	and.w	r3, r4, #31
   19cbc:	d014      	beq.n	19ce8 <gpio_nrfx_pin_interrupt_configure+0xac>
   19cbe:	2a01      	cmp	r2, #1
   19cc0:	d104      	bne.n	19ccc <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   19cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19cc6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   19cc8:	07d1      	lsls	r1, r2, #31
   19cca:	d414      	bmi.n	19cf6 <gpio_nrfx_pin_interrupt_configure+0xba>
   19ccc:	4919      	ldr	r1, [pc, #100]	; (19d34 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   19cce:	481a      	ldr	r0, [pc, #104]	; (19d38 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   19cd0:	f240 2347 	movw	r3, #583	; 0x247
   19cd4:	4a19      	ldr	r2, [pc, #100]	; (19d3c <gpio_nrfx_pin_interrupt_configure+0x100>)
   19cd6:	f00a fe66 	bl	249a6 <assert_print>
   19cda:	f240 2147 	movw	r1, #583	; 0x247
   19cde:	4817      	ldr	r0, [pc, #92]	; (19d3c <gpio_nrfx_pin_interrupt_configure+0x100>)
   19ce0:	f00a fe5a 	bl	24998 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   19ce4:	2303      	movs	r3, #3
   19ce6:	e7dd      	b.n	19ca4 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   19ce8:	f04f 32ff 	mov.w	r2, #4294967295
   19cec:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   19cee:	07d2      	lsls	r2, r2, #31
   19cf0:	d5ec      	bpl.n	19ccc <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   19cf2:	4a13      	ldr	r2, [pc, #76]	; (19d40 <gpio_nrfx_pin_interrupt_configure+0x104>)
   19cf4:	e000      	b.n	19cf8 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   19cf6:	4a13      	ldr	r2, [pc, #76]	; (19d44 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   19cf8:	3380      	adds	r3, #128	; 0x80
   19cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   19cfe:	07db      	lsls	r3, r3, #31
   19d00:	d4ba      	bmi.n	19c78 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   19d02:	f10d 0507 	add.w	r5, sp, #7
   19d06:	4629      	mov	r1, r5
   19d08:	4620      	mov	r0, r4
   19d0a:	f003 f865 	bl	1cdd8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   19d0e:	4b0e      	ldr	r3, [pc, #56]	; (19d48 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   19d10:	4298      	cmp	r0, r3
   19d12:	d001      	beq.n	19d18 <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   19d14:	9503      	str	r5, [sp, #12]
   19d16:	e7af      	b.n	19c78 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   19d18:	4628      	mov	r0, r5
   19d1a:	f003 f8bd 	bl	1ce98 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   19d1e:	4b04      	ldr	r3, [pc, #16]	; (19d30 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   19d20:	4298      	cmp	r0, r3
   19d22:	d0f7      	beq.n	19d14 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   19d24:	f06f 000b 	mvn.w	r0, #11
   19d28:	e797      	b.n	19c5a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   19d2a:	f06f 0015 	mvn.w	r0, #21
   19d2e:	e794      	b.n	19c5a <gpio_nrfx_pin_interrupt_configure+0x1e>
   19d30:	0bad0000 	.word	0x0bad0000
   19d34:	0002f184 	.word	0x0002f184
   19d38:	0002b339 	.word	0x0002b339
   19d3c:	0002f151 	.word	0x0002f151
   19d40:	40842500 	.word	0x40842500
   19d44:	40842800 	.word	0x40842800
   19d48:	0bad0004 	.word	0x0bad0004

00019d4c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   19d4c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   19d4e:	f003 f893 	bl	1ce78 <nrfx_gpiote_is_init>
   19d52:	4604      	mov	r4, r0
   19d54:	b968      	cbnz	r0, 19d72 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   19d56:	f003 f867 	bl	1ce28 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   19d5a:	4b08      	ldr	r3, [pc, #32]	; (19d7c <gpio_nrfx_init+0x30>)
   19d5c:	4298      	cmp	r0, r3
   19d5e:	d10a      	bne.n	19d76 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   19d60:	4621      	mov	r1, r4
   19d62:	4807      	ldr	r0, [pc, #28]	; (19d80 <gpio_nrfx_init+0x34>)
   19d64:	f003 f832 	bl	1cdcc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   19d68:	4622      	mov	r2, r4
   19d6a:	2105      	movs	r1, #5
   19d6c:	202f      	movs	r0, #47	; 0x2f
   19d6e:	f7f6 f85d 	bl	fe2c <z_arm_irq_priority_set>
		return 0;
   19d72:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   19d74:	bd10      	pop	{r4, pc}
		return -EIO;
   19d76:	f06f 0004 	mvn.w	r0, #4
   19d7a:	e7fb      	b.n	19d74 <gpio_nrfx_init+0x28>
   19d7c:	0bad0000 	.word	0x0bad0000
   19d80:	00019d85 	.word	0x00019d85

00019d84 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   19d84:	0942      	lsrs	r2, r0, #5
{
   19d86:	4603      	mov	r3, r0
   19d88:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   19d8a:	d002      	beq.n	19d92 <nrfx_gpio_handler+0xe>
   19d8c:	2a01      	cmp	r2, #1
   19d8e:	d01e      	beq.n	19dce <nrfx_gpio_handler+0x4a>
}
   19d90:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   19d92:	4e14      	ldr	r6, [pc, #80]	; (19de4 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   19d94:	6932      	ldr	r2, [r6, #16]
   19d96:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19d98:	2900      	cmp	r1, #0
   19d9a:	d0f9      	beq.n	19d90 <nrfx_gpio_handler+0xc>
   19d9c:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   19d9e:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   19da2:	680c      	ldr	r4, [r1, #0]
   19da4:	409d      	lsls	r5, r3
   19da6:	2900      	cmp	r1, #0
   19da8:	d0f2      	beq.n	19d90 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   19daa:	688a      	ldr	r2, [r1, #8]
   19dac:	402a      	ands	r2, r5
   19dae:	d012      	beq.n	19dd6 <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   19db0:	684b      	ldr	r3, [r1, #4]
   19db2:	b973      	cbnz	r3, 19dd2 <nrfx_gpio_handler+0x4e>
   19db4:	490c      	ldr	r1, [pc, #48]	; (19de8 <nrfx_gpio_handler+0x64>)
   19db6:	234d      	movs	r3, #77	; 0x4d
   19db8:	4a0c      	ldr	r2, [pc, #48]	; (19dec <nrfx_gpio_handler+0x68>)
   19dba:	480d      	ldr	r0, [pc, #52]	; (19df0 <nrfx_gpio_handler+0x6c>)
   19dbc:	f00a fdf3 	bl	249a6 <assert_print>
   19dc0:	480c      	ldr	r0, [pc, #48]	; (19df4 <nrfx_gpio_handler+0x70>)
   19dc2:	f00a fdf0 	bl	249a6 <assert_print>
   19dc6:	214d      	movs	r1, #77	; 0x4d
   19dc8:	4808      	ldr	r0, [pc, #32]	; (19dec <nrfx_gpio_handler+0x68>)
   19dca:	f00a fde5 	bl	24998 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   19dce:	4e0a      	ldr	r6, [pc, #40]	; (19df8 <nrfx_gpio_handler+0x74>)
   19dd0:	e7e0      	b.n	19d94 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   19dd2:	4630      	mov	r0, r6
   19dd4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19dd6:	b11c      	cbz	r4, 19de0 <nrfx_gpio_handler+0x5c>
   19dd8:	6823      	ldr	r3, [r4, #0]
   19dda:	4621      	mov	r1, r4
   19ddc:	461c      	mov	r4, r3
   19dde:	e7e2      	b.n	19da6 <nrfx_gpio_handler+0x22>
   19de0:	4623      	mov	r3, r4
   19de2:	e7fa      	b.n	19dda <nrfx_gpio_handler+0x56>
   19de4:	00029e08 	.word	0x00029e08
   19de8:	0002feb3 	.word	0x0002feb3
   19dec:	0002f0dd 	.word	0x0002f0dd
   19df0:	0002b339 	.word	0x0002b339
   19df4:	0002f13a 	.word	0x0002f13a
   19df8:	00029df0 	.word	0x00029df0

00019dfc <gpio_nrfx_pin_configure>:
{
   19dfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   19e00:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19e04:	f001 051f 	and.w	r5, r1, #31
   19e08:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   19e0c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19e0e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   19e12:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   19e14:	4628      	mov	r0, r5
   19e16:	f10d 0103 	add.w	r1, sp, #3
   19e1a:	f002 ffdd 	bl	1cdd8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   19e1e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   19e22:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   19e24:	d115      	bne.n	19e52 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   19e26:	4628      	mov	r0, r5
   19e28:	f003 f8d0 	bl	1cfcc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   19e2c:	4b48      	ldr	r3, [pc, #288]	; (19f50 <gpio_nrfx_pin_configure+0x154>)
   19e2e:	429e      	cmp	r6, r3
   19e30:	d170      	bne.n	19f14 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   19e32:	f89d 0003 	ldrb.w	r0, [sp, #3]
   19e36:	f003 f829 	bl	1ce8c <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19e3a:	42b0      	cmp	r0, r6
   19e3c:	d06a      	beq.n	19f14 <gpio_nrfx_pin_configure+0x118>
   19e3e:	4945      	ldr	r1, [pc, #276]	; (19f54 <gpio_nrfx_pin_configure+0x158>)
   19e40:	236a      	movs	r3, #106	; 0x6a
   19e42:	4a45      	ldr	r2, [pc, #276]	; (19f58 <gpio_nrfx_pin_configure+0x15c>)
   19e44:	4845      	ldr	r0, [pc, #276]	; (19f5c <gpio_nrfx_pin_configure+0x160>)
   19e46:	f00a fdae 	bl	249a6 <assert_print>
   19e4a:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19e4c:	4842      	ldr	r0, [pc, #264]	; (19f58 <gpio_nrfx_pin_configure+0x15c>)
   19e4e:	f00a fda3 	bl	24998 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   19e52:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19e54:	4628      	mov	r0, r5
   19e56:	4619      	mov	r1, r3
   19e58:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   19e5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19e5e:	f002 fe95 	bl	1cb8c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19e62:	4b3b      	ldr	r3, [pc, #236]	; (19f50 <gpio_nrfx_pin_configure+0x154>)
   19e64:	4298      	cmp	r0, r3
   19e66:	d004      	beq.n	19e72 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   19e68:	f06f 0015 	mvn.w	r0, #21
}
   19e6c:	b004      	add	sp, #16
   19e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   19e72:	4286      	cmp	r6, r0
   19e74:	d10d      	bne.n	19e92 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   19e76:	f89d 0003 	ldrb.w	r0, [sp, #3]
   19e7a:	f003 f807 	bl	1ce8c <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19e7e:	42b0      	cmp	r0, r6
   19e80:	d007      	beq.n	19e92 <gpio_nrfx_pin_configure+0x96>
   19e82:	4934      	ldr	r1, [pc, #208]	; (19f54 <gpio_nrfx_pin_configure+0x158>)
   19e84:	237c      	movs	r3, #124	; 0x7c
   19e86:	4a34      	ldr	r2, [pc, #208]	; (19f58 <gpio_nrfx_pin_configure+0x15c>)
   19e88:	4834      	ldr	r0, [pc, #208]	; (19f5c <gpio_nrfx_pin_configure+0x160>)
   19e8a:	f00a fd8c 	bl	249a6 <assert_print>
   19e8e:	217c      	movs	r1, #124	; 0x7c
   19e90:	e7dc      	b.n	19e4c <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   19e92:	03a6      	lsls	r6, r4, #14
   19e94:	d54c      	bpl.n	19f30 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19e96:	f240 3306 	movw	r3, #774	; 0x306
   19e9a:	4023      	ands	r3, r4
   19e9c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   19ea0:	d019      	beq.n	19ed6 <gpio_nrfx_pin_configure+0xda>
   19ea2:	d80c      	bhi.n	19ebe <gpio_nrfx_pin_configure+0xc2>
   19ea4:	2b06      	cmp	r3, #6
   19ea6:	d017      	beq.n	19ed8 <gpio_nrfx_pin_configure+0xdc>
   19ea8:	d804      	bhi.n	19eb4 <gpio_nrfx_pin_configure+0xb8>
   19eaa:	b1ab      	cbz	r3, 19ed8 <gpio_nrfx_pin_configure+0xdc>
   19eac:	2b02      	cmp	r3, #2
   19eae:	d1db      	bne.n	19e68 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   19eb0:	2304      	movs	r3, #4
   19eb2:	e011      	b.n	19ed8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   19eb8:	d1d6      	bne.n	19e68 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   19eba:	2301      	movs	r3, #1
   19ebc:	e00c      	b.n	19ed8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19ebe:	f240 2202 	movw	r2, #514	; 0x202
   19ec2:	4293      	cmp	r3, r2
   19ec4:	d028      	beq.n	19f18 <gpio_nrfx_pin_configure+0x11c>
   19ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   19eca:	d027      	beq.n	19f1c <gpio_nrfx_pin_configure+0x120>
   19ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   19ed0:	d1ca      	bne.n	19e68 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   19ed2:	2302      	movs	r3, #2
   19ed4:	e000      	b.n	19ed8 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   19ed6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   19ed8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   19edc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   19ee0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   19ee4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   19ee6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   19eea:	bf4c      	ite	mi
   19eec:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   19eee:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   19ef2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   19ef4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   19ef8:	d512      	bpl.n	19f20 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   19efa:	2301      	movs	r3, #1
   19efc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   19f00:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   19f02:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   19f04:	2200      	movs	r2, #0
   19f06:	4628      	mov	r0, r5
   19f08:	a901      	add	r1, sp, #4
   19f0a:	f002 fee7 	bl	1ccdc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   19f0e:	4b10      	ldr	r3, [pc, #64]	; (19f50 <gpio_nrfx_pin_configure+0x154>)
   19f10:	4298      	cmp	r0, r3
   19f12:	d1a9      	bne.n	19e68 <gpio_nrfx_pin_configure+0x6c>
   19f14:	2000      	movs	r0, #0
   19f16:	e7a9      	b.n	19e6c <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   19f18:	2305      	movs	r3, #5
   19f1a:	e7dd      	b.n	19ed8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19f1c:	2303      	movs	r3, #3
   19f1e:	e7db      	b.n	19ed8 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   19f20:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   19f22:	bf41      	itttt	mi
   19f24:	2301      	movmi	r3, #1
   19f26:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   19f2a:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   19f2c:	60d3      	strmi	r3, [r2, #12]
}
   19f2e:	e7e9      	b.n	19f04 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   19f30:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19f32:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   19f36:	bf4c      	ite	mi
   19f38:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   19f3a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19f3e:	461a      	mov	r2, r3
   19f40:	4628      	mov	r0, r5
   19f42:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   19f44:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19f48:	f002 fe20 	bl	1cb8c <nrfx_gpiote_input_configure>
   19f4c:	e7df      	b.n	19f0e <gpio_nrfx_pin_configure+0x112>
   19f4e:	bf00      	nop
   19f50:	0bad0000 	.word	0x0bad0000
   19f54:	0002c1d3 	.word	0x0002c1d3
   19f58:	0002f1a7 	.word	0x0002f1a7
   19f5c:	0002b339 	.word	0x0002b339

00019f60 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   19f60:	4603      	mov	r3, r0
   19f62:	b510      	push	{r4, lr}
   19f64:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   19f66:	7919      	ldrb	r1, [r3, #4]
   19f68:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   19f6a:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   19f6c:	fa03 f101 	lsl.w	r1, r3, r1
   19f70:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   19f72:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   19f74:	681b      	ldr	r3, [r3, #0]
   19f76:	4219      	tst	r1, r3
   19f78:	d10e      	bne.n	19f98 <gpio_pin_set_dt.isra.0+0x38>
   19f7a:	490e      	ldr	r1, [pc, #56]	; (19fb4 <gpio_pin_set_dt.isra.0+0x54>)
   19f7c:	f240 533d 	movw	r3, #1341	; 0x53d
   19f80:	4a0d      	ldr	r2, [pc, #52]	; (19fb8 <gpio_pin_set_dt.isra.0+0x58>)
   19f82:	480e      	ldr	r0, [pc, #56]	; (19fbc <gpio_pin_set_dt.isra.0+0x5c>)
   19f84:	f00a fd0f 	bl	249a6 <assert_print>
   19f88:	480d      	ldr	r0, [pc, #52]	; (19fc0 <gpio_pin_set_dt.isra.0+0x60>)
   19f8a:	f00a fd0c 	bl	249a6 <assert_print>
   19f8e:	f240 513d 	movw	r1, #1341	; 0x53d
   19f92:	4809      	ldr	r0, [pc, #36]	; (19fb8 <gpio_pin_set_dt.isra.0+0x58>)
   19f94:	f00a fd00 	bl	24998 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   19f98:	6823      	ldr	r3, [r4, #0]
   19f9a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   19f9c:	bf18      	it	ne
   19f9e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   19fa2:	b122      	cbz	r2, 19fae <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   19fa4:	6883      	ldr	r3, [r0, #8]
   19fa6:	68db      	ldr	r3, [r3, #12]
}
   19fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   19fac:	4718      	bx	r3
   19fae:	6883      	ldr	r3, [r0, #8]
   19fb0:	691b      	ldr	r3, [r3, #16]
   19fb2:	e7f9      	b.n	19fa8 <gpio_pin_set_dt.isra.0+0x48>
   19fb4:	0002b2fb 	.word	0x0002b2fb
   19fb8:	0002b2ca 	.word	0x0002b2ca
   19fbc:	0002b339 	.word	0x0002b339
   19fc0:	0002b356 	.word	0x0002b356

00019fc4 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   19fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   19fc8:	6844      	ldr	r4, [r0, #4]
{
   19fca:	b088      	sub	sp, #32
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   19fcc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   19fce:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   19fd0:	2100      	movs	r1, #0
   19fd2:	4630      	mov	r0, r6
   19fd4:	aa07      	add	r2, sp, #28
   19fd6:	f00e f8fe 	bl	281d6 <pinctrl_lookup_state>
	if (ret < 0) {
   19fda:	2800      	cmp	r0, #0
   19fdc:	db2a      	blt.n	1a034 <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   19fde:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   19fe0:	6832      	ldr	r2, [r6, #0]
   19fe2:	7919      	ldrb	r1, [r3, #4]
   19fe4:	6818      	ldr	r0, [r3, #0]
   19fe6:	f00e f909 	bl	281fc <pinctrl_configure_pins>
	if (err < 0) {
   19fea:	2800      	cmp	r0, #0
   19fec:	db22      	blt.n	1a034 <spi_nrfx_init+0x70>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   19fee:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   19ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ff2:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   19ff4:	68ac      	ldr	r4, [r5, #8]
   19ff6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   19ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19ffe:	429c      	cmp	r4, r3
   1a000:	d304      	bcc.n	1a00c <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1a002:	4628      	mov	r0, r5
   1a004:	f00d fdc9 	bl	27b9a <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1a008:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1a00a:	e013      	b.n	1a034 <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
   1a00c:	6820      	ldr	r0, [r4, #0]
   1a00e:	f00e ffee 	bl	28fee <z_device_is_ready>
   1a012:	4603      	mov	r3, r0
   1a014:	b988      	cbnz	r0, 1a03a <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1a016:	7922      	ldrb	r2, [r4, #4]
   1a018:	4932      	ldr	r1, [pc, #200]	; (1a0e4 <spi_nrfx_init+0x120>)
   1a01a:	9204      	str	r2, [sp, #16]
   1a01c:	6822      	ldr	r2, [r4, #0]
   1a01e:	6812      	ldr	r2, [r2, #0]
   1a020:	9000      	str	r0, [sp, #0]
   1a022:	9203      	str	r2, [sp, #12]
   1a024:	4a30      	ldr	r2, [pc, #192]	; (1a0e8 <spi_nrfx_init+0x124>)
   1a026:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1a02a:	2201      	movs	r2, #1
   1a02c:	f00d fd83 	bl	27b36 <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   1a030:	f06f 0012 	mvn.w	r0, #18
#endif
}
   1a034:	b008      	add	sp, #32
   1a036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
   1a03a:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1a03c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1a03e:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1a040:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1a044:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   1a046:	f8d0 e010 	ldr.w	lr, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1a04a:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1a04e:	d10e      	bne.n	1a06e <spi_nrfx_init+0xaa>
   1a050:	4926      	ldr	r1, [pc, #152]	; (1a0ec <spi_nrfx_init+0x128>)
   1a052:	f240 23b7 	movw	r3, #695	; 0x2b7
   1a056:	4a26      	ldr	r2, [pc, #152]	; (1a0f0 <spi_nrfx_init+0x12c>)
   1a058:	4826      	ldr	r0, [pc, #152]	; (1a0f4 <spi_nrfx_init+0x130>)
   1a05a:	f00a fca4 	bl	249a6 <assert_print>
   1a05e:	4826      	ldr	r0, [pc, #152]	; (1a0f8 <spi_nrfx_init+0x134>)
   1a060:	f00a fca1 	bl	249a6 <assert_print>
   1a064:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1a068:	4821      	ldr	r0, [pc, #132]	; (1a0f0 <spi_nrfx_init+0x12c>)
   1a06a:	f00a fc95 	bl	24998 <assert_post_action>
   1a06e:	f003 0206 	and.w	r2, r3, #6
   1a072:	2a04      	cmp	r2, #4
   1a074:	d109      	bne.n	1a08a <spi_nrfx_init+0xc6>
   1a076:	4921      	ldr	r1, [pc, #132]	; (1a0fc <spi_nrfx_init+0x138>)
   1a078:	f240 23bf 	movw	r3, #703	; 0x2bf
   1a07c:	4a1c      	ldr	r2, [pc, #112]	; (1a0f0 <spi_nrfx_init+0x12c>)
   1a07e:	481d      	ldr	r0, [pc, #116]	; (1a0f4 <spi_nrfx_init+0x130>)
   1a080:	f00a fc91 	bl	249a6 <assert_print>
   1a084:	f240 21bf 	movw	r1, #703	; 0x2bf
   1a088:	e7ee      	b.n	1a068 <spi_nrfx_init+0xa4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a08a:	683f      	ldr	r7, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1a08c:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a08e:	fa06 fc01 	lsl.w	ip, r6, r1
	return gpio_pin_configure(spec->port,
   1a092:	bf54      	ite	pl
   1a094:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1a098:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a09c:	ea1c 0f07 	tst.w	ip, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1a0a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1a0a4:	d10c      	bne.n	1a0c0 <spi_nrfx_init+0xfc>
   1a0a6:	4916      	ldr	r1, [pc, #88]	; (1a100 <spi_nrfx_init+0x13c>)
   1a0a8:	f240 23d2 	movw	r3, #722	; 0x2d2
   1a0ac:	4a10      	ldr	r2, [pc, #64]	; (1a0f0 <spi_nrfx_init+0x12c>)
   1a0ae:	4811      	ldr	r0, [pc, #68]	; (1a0f4 <spi_nrfx_init+0x130>)
   1a0b0:	f00a fc79 	bl	249a6 <assert_print>
   1a0b4:	4813      	ldr	r0, [pc, #76]	; (1a104 <spi_nrfx_init+0x140>)
   1a0b6:	f00a fc76 	bl	249a6 <assert_print>
   1a0ba:	f240 21d2 	movw	r1, #722	; 0x2d2
   1a0be:	e7d3      	b.n	1a068 <spi_nrfx_init+0xa4>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a0c0:	f8de 7000 	ldr.w	r7, [lr]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1a0c4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a0c6:	bf4c      	ite	mi
   1a0c8:	ea4c 0707 	orrmi.w	r7, ip, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1a0cc:	ea27 070c 	bicpl.w	r7, r7, ip
   1a0d0:	f8ce 7000 	str.w	r7, [lr]
	return api->pin_configure(port, pin, flags);
   1a0d4:	f8d8 3000 	ldr.w	r3, [r8]
   1a0d8:	4798      	blx	r3
		if (ret < 0) {
   1a0da:	2800      	cmp	r0, #0
   1a0dc:	dbaa      	blt.n	1a034 <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1a0de:	3408      	adds	r4, #8
   1a0e0:	e789      	b.n	19ff6 <spi_nrfx_init+0x32>
   1a0e2:	bf00      	nop
   1a0e4:	0002a478 	.word	0x0002a478
   1a0e8:	0002f1eb 	.word	0x0002f1eb
   1a0ec:	0002b5d2 	.word	0x0002b5d2
   1a0f0:	0002b2ca 	.word	0x0002b2ca
   1a0f4:	0002b339 	.word	0x0002b339
   1a0f8:	0002b60b 	.word	0x0002b60b
   1a0fc:	0002b6cf 	.word	0x0002b6cf
   1a100:	0002b2fb 	.word	0x0002b2fb
   1a104:	0002b356 	.word	0x0002b356

0001a108 <transfer_next_chunk>:
{
   1a108:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1a10a:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1a10c:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1a10e:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1a110:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1a112:	b98d      	cbnz	r5, 1a138 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1a114:	2b00      	cmp	r3, #0
   1a116:	d137      	bne.n	1a188 <transfer_next_chunk+0x80>
	int error = 0;
   1a118:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1a11a:	2200      	movs	r2, #0
   1a11c:	4620      	mov	r0, r4
   1a11e:	4611      	mov	r1, r2
   1a120:	f00d fd19 	bl	27b56 <_spi_context_cs_control>
	ctx->sync_status = status;
   1a124:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1a126:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a12a:	f005 fcd7 	bl	1fadc <z_impl_k_sem_give>
	dev_data->busy = false;
   1a12e:	2300      	movs	r3, #0
   1a130:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1a134:	b004      	add	sp, #16
   1a136:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1a138:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1a13a:	bb0b      	cbnz	r3, 1a180 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1a13c:	bb39      	cbnz	r1, 1a18e <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1a13e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a142:	42aa      	cmp	r2, r5
   1a144:	bf28      	it	cs
   1a146:	462a      	movcs	r2, r5
   1a148:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1a14a:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1a14c:	9100      	str	r1, [sp, #0]
   1a14e:	b11b      	cbz	r3, 1a158 <transfer_next_chunk+0x50>
   1a150:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1a152:	2b00      	cmp	r3, #0
   1a154:	bf18      	it	ne
   1a156:	4613      	movne	r3, r2
   1a158:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1a15a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1a15c:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1a15e:	b11b      	cbz	r3, 1a168 <transfer_next_chunk+0x60>
   1a160:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1a162:	2b00      	cmp	r3, #0
   1a164:	bf18      	it	ne
   1a166:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1a168:	2200      	movs	r2, #0
   1a16a:	4669      	mov	r1, sp
   1a16c:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1a16e:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1a170:	f003 fed0 	bl	1df14 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1a174:	4b0d      	ldr	r3, [pc, #52]	; (1a1ac <transfer_next_chunk+0xa4>)
   1a176:	4298      	cmp	r0, r3
   1a178:	d0dc      	beq.n	1a134 <transfer_next_chunk+0x2c>
			error = -EIO;
   1a17a:	f06f 0504 	mvn.w	r5, #4
   1a17e:	e7cc      	b.n	1a11a <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1a180:	429d      	cmp	r5, r3
   1a182:	bf28      	it	cs
   1a184:	461d      	movcs	r5, r3
   1a186:	e7d9      	b.n	1a13c <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1a188:	461d      	mov	r5, r3
   1a18a:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1a18c:	e7d7      	b.n	1a13e <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1a18e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1a192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a196:	d0d2      	beq.n	1a13e <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1a198:	2d08      	cmp	r5, #8
   1a19a:	bf28      	it	cs
   1a19c:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a19e:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1a1a0:	462a      	mov	r2, r5
   1a1a2:	f00f f966 	bl	29472 <memcpy>
			tx_buf = dev_data->buffer;
   1a1a6:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1a1a8:	e7c9      	b.n	1a13e <transfer_next_chunk+0x36>
   1a1aa:	bf00      	nop
   1a1ac:	0bad0000 	.word	0x0bad0000

0001a1b0 <event_handler>:
{
   1a1b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1a1b2:	7803      	ldrb	r3, [r0, #0]
{
   1a1b4:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1a1b6:	2b00      	cmp	r3, #0
   1a1b8:	d154      	bne.n	1a264 <event_handler+0xb4>
	if (!ctx->tx_len) {
   1a1ba:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a1bc:	6e89      	ldr	r1, [r1, #104]	; 0x68
   1a1be:	b152      	cbz	r2, 1a1d6 <event_handler+0x26>
	if (len > ctx->tx_len) {
   1a1c0:	4291      	cmp	r1, r2
   1a1c2:	d91d      	bls.n	1a200 <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   1a1c4:	4a28      	ldr	r2, [pc, #160]	; (1a268 <event_handler+0xb8>)
   1a1c6:	4618      	mov	r0, r3
   1a1c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a1cc:	4927      	ldr	r1, [pc, #156]	; (1a26c <event_handler+0xbc>)
   1a1ce:	2201      	movs	r2, #1
   1a1d0:	9300      	str	r3, [sp, #0]
   1a1d2:	f00d fcb0 	bl	27b36 <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   1a1d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a1d8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1a1da:	b15b      	cbz	r3, 1a1f4 <event_handler+0x44>
	if (len > ctx->rx_len) {
   1a1dc:	429a      	cmp	r2, r3
   1a1de:	d928      	bls.n	1a232 <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   1a1e0:	4b21      	ldr	r3, [pc, #132]	; (1a268 <event_handler+0xb8>)
   1a1e2:	2201      	movs	r2, #1
   1a1e4:	9302      	str	r3, [sp, #8]
   1a1e6:	2300      	movs	r3, #0
   1a1e8:	4920      	ldr	r1, [pc, #128]	; (1a26c <event_handler+0xbc>)
   1a1ea:	4618      	mov	r0, r3
   1a1ec:	e9cd 3300 	strd	r3, r3, [sp]
   1a1f0:	f00d fca1 	bl	27b36 <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1a1f4:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1a1f6:	b004      	add	sp, #16
   1a1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1a1fc:	f7ff bf84 	b.w	1a108 <transfer_next_chunk>
	ctx->tx_len -= len;
   1a200:	1a52      	subs	r2, r2, r1
   1a202:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   1a204:	b97a      	cbnz	r2, 1a226 <event_handler+0x76>
		++ctx->current_tx;
   1a206:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1a208:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   1a20c:	3308      	adds	r3, #8
   1a20e:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   1a210:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1a212:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   1a216:	3b01      	subs	r3, #1
   1a218:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1a21a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1a21e:	f00d fc77 	bl	27b10 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1a222:	6560      	str	r0, [r4, #84]	; 0x54
   1a224:	e7d7      	b.n	1a1d6 <event_handler+0x26>
	} else if (ctx->tx_buf) {
   1a226:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1a228:	2b00      	cmp	r3, #0
   1a22a:	d0d4      	beq.n	1a1d6 <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   1a22c:	440b      	add	r3, r1
   1a22e:	6563      	str	r3, [r4, #84]	; 0x54
   1a230:	e7d1      	b.n	1a1d6 <event_handler+0x26>
	ctx->rx_len -= len;
   1a232:	1a9b      	subs	r3, r3, r2
   1a234:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1a236:	b97b      	cbnz	r3, 1a258 <event_handler+0xa8>
		++ctx->current_rx;
   1a238:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1a23a:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1a23e:	3308      	adds	r3, #8
   1a240:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1a242:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1a244:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1a248:	3b01      	subs	r3, #1
   1a24a:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1a24c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a250:	f00d fc5e 	bl	27b10 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1a254:	65e0      	str	r0, [r4, #92]	; 0x5c
   1a256:	e7cd      	b.n	1a1f4 <event_handler+0x44>
	} else if (ctx->rx_buf) {
   1a258:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1a25a:	2b00      	cmp	r3, #0
   1a25c:	d0ca      	beq.n	1a1f4 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   1a25e:	4413      	add	r3, r2
   1a260:	65e3      	str	r3, [r4, #92]	; 0x5c
   1a262:	e7c7      	b.n	1a1f4 <event_handler+0x44>
}
   1a264:	b004      	add	sp, #16
   1a266:	bd10      	pop	{r4, pc}
   1a268:	0002f20f 	.word	0x0002f20f
   1a26c:	0002a478 	.word	0x0002a478

0001a270 <spi_nrfx_transceive>:
{
   1a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a274:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1a276:	888b      	ldrh	r3, [r1, #4]
   1a278:	460f      	mov	r7, r1
   1a27a:	0499      	lsls	r1, r3, #18
   1a27c:	4680      	mov	r8, r0
   1a27e:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   1a280:	6904      	ldr	r4, [r0, #16]
{
   1a282:	b08f      	sub	sp, #60	; 0x3c
   1a284:	d435      	bmi.n	1a2f2 <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   1a286:	f04f 32ff 	mov.w	r2, #4294967295
   1a28a:	f04f 33ff 	mov.w	r3, #4294967295
   1a28e:	f104 0010 	add.w	r0, r4, #16
   1a292:	f005 fc67 	bl	1fb64 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1a296:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1a298:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1a29c:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1a2a0:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   1a2a2:	9305      	str	r3, [sp, #20]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1a2a4:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   1a2a8:	9306      	str	r3, [sp, #24]
   1a2aa:	b123      	cbz	r3, 1a2b6 <spi_nrfx_transceive+0x46>
   1a2ac:	f8da 3000 	ldr.w	r3, [sl]
   1a2b0:	429f      	cmp	r7, r3
   1a2b2:	f000 80da 	beq.w	1a46a <spi_nrfx_transceive+0x1fa>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1a2b6:	88be      	ldrh	r6, [r7, #4]
   1a2b8:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   1a2bc:	d020      	beq.n	1a300 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   1a2be:	4ba1      	ldr	r3, [pc, #644]	; (1a544 <spi_nrfx_transceive+0x2d4>)
   1a2c0:	2201      	movs	r2, #1
   1a2c2:	9302      	str	r3, [sp, #8]
   1a2c4:	2300      	movs	r3, #0
   1a2c6:	49a0      	ldr	r1, [pc, #640]	; (1a548 <spi_nrfx_transceive+0x2d8>)
   1a2c8:	4618      	mov	r0, r3
   1a2ca:	e9cd 3300 	strd	r3, r3, [sp]
   1a2ce:	f00d fc32 	bl	27b36 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1a2d2:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1a2d6:	6823      	ldr	r3, [r4, #0]
   1a2d8:	889b      	ldrh	r3, [r3, #4]
   1a2da:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1a2de:	d104      	bne.n	1a2ea <spi_nrfx_transceive+0x7a>
		ctx->owner = NULL;
   1a2e0:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1a2e2:	f104 0010 	add.w	r0, r4, #16
   1a2e6:	f005 fbf9 	bl	1fadc <z_impl_k_sem_give>
}
   1a2ea:	4628      	mov	r0, r5
   1a2ec:	b00f      	add	sp, #60	; 0x3c
   1a2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1a2f2:	69a3      	ldr	r3, [r4, #24]
   1a2f4:	2b00      	cmp	r3, #0
   1a2f6:	d1c6      	bne.n	1a286 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1a2f8:	6863      	ldr	r3, [r4, #4]
   1a2fa:	429f      	cmp	r7, r3
   1a2fc:	d1c3      	bne.n	1a286 <spi_nrfx_transceive+0x16>
   1a2fe:	e7cb      	b.n	1a298 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1a300:	f016 0201 	ands.w	r2, r6, #1
   1a304:	d00e      	beq.n	1a324 <spi_nrfx_transceive+0xb4>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1a306:	f8d8 2000 	ldr.w	r2, [r8]
   1a30a:	4618      	mov	r0, r3
   1a30c:	9203      	str	r2, [sp, #12]
   1a30e:	4a8f      	ldr	r2, [pc, #572]	; (1a54c <spi_nrfx_transceive+0x2dc>)
   1a310:	498d      	ldr	r1, [pc, #564]	; (1a548 <spi_nrfx_transceive+0x2d8>)
   1a312:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a316:	9300      	str	r3, [sp, #0]
   1a318:	2201      	movs	r2, #1
   1a31a:	f00d fc0c 	bl	27b36 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a31e:	f06f 0515 	mvn.w	r5, #21
   1a322:	e7d8      	b.n	1a2d6 <spi_nrfx_transceive+0x66>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1a324:	f016 0308 	ands.w	r3, r6, #8
   1a328:	d00a      	beq.n	1a340 <spi_nrfx_transceive+0xd0>
		LOG_ERR("Loopback mode is not supported");
   1a32a:	4b89      	ldr	r3, [pc, #548]	; (1a550 <spi_nrfx_transceive+0x2e0>)
   1a32c:	9200      	str	r2, [sp, #0]
   1a32e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1a332:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1a334:	2201      	movs	r2, #1
   1a336:	4618      	mov	r0, r3
   1a338:	4983      	ldr	r1, [pc, #524]	; (1a548 <spi_nrfx_transceive+0x2d8>)
   1a33a:	f00d fbfc 	bl	27b36 <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   1a33e:	e7ee      	b.n	1a31e <spi_nrfx_transceive+0xae>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1a340:	f3c6 1245 	ubfx	r2, r6, #5, #6
   1a344:	2a08      	cmp	r2, #8
   1a346:	d004      	beq.n	1a352 <spi_nrfx_transceive+0xe2>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1a348:	4a82      	ldr	r2, [pc, #520]	; (1a554 <spi_nrfx_transceive+0x2e4>)
   1a34a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a34e:	9300      	str	r3, [sp, #0]
   1a350:	e7f0      	b.n	1a334 <spi_nrfx_transceive+0xc4>
	if (spi_cfg->frequency < 125000) {
   1a352:	683a      	ldr	r2, [r7, #0]
   1a354:	9207      	str	r2, [sp, #28]
   1a356:	9907      	ldr	r1, [sp, #28]
   1a358:	4a7f      	ldr	r2, [pc, #508]	; (1a558 <spi_nrfx_transceive+0x2e8>)
   1a35a:	4291      	cmp	r1, r2
   1a35c:	d801      	bhi.n	1a362 <spi_nrfx_transceive+0xf2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1a35e:	4a7f      	ldr	r2, [pc, #508]	; (1a55c <spi_nrfx_transceive+0x2ec>)
   1a360:	e7f3      	b.n	1a34a <spi_nrfx_transceive+0xda>
	if (max_freq > 16000000 &&
   1a362:	4b7f      	ldr	r3, [pc, #508]	; (1a560 <spi_nrfx_transceive+0x2f0>)
   1a364:	429d      	cmp	r5, r3
   1a366:	d906      	bls.n	1a376 <spi_nrfx_transceive+0x106>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   1a368:	4a7e      	ldr	r2, [pc, #504]	; (1a564 <spi_nrfx_transceive+0x2f4>)
   1a36a:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1a36e:	f012 0f03 	tst.w	r2, #3
   1a372:	bf18      	it	ne
   1a374:	461d      	movne	r5, r3
	config = dev_config->def_config;
   1a376:	9b05      	ldr	r3, [sp, #20]
   1a378:	f10d 0c20 	add.w	ip, sp, #32
   1a37c:	f103 0e0c 	add.w	lr, r3, #12
   1a380:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1a384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1a388:	9b07      	ldr	r3, [sp, #28]
	config = dev_config->def_config;
   1a38a:	e89e 0003 	ldmia.w	lr, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1a38e:	42ab      	cmp	r3, r5
   1a390:	bf28      	it	cs
   1a392:	462b      	movcs	r3, r5
   1a394:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1a396:	4b74      	ldr	r3, [pc, #464]	; (1a568 <spi_nrfx_transceive+0x2f8>)
	config = dev_config->def_config;
   1a398:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   1a39c:	429d      	cmp	r5, r3
   1a39e:	d946      	bls.n	1a42e <spi_nrfx_transceive+0x1be>
	} else if (frequency < 500000) {
   1a3a0:	4b72      	ldr	r3, [pc, #456]	; (1a56c <spi_nrfx_transceive+0x2fc>)
   1a3a2:	429d      	cmp	r5, r3
   1a3a4:	d946      	bls.n	1a434 <spi_nrfx_transceive+0x1c4>
	} else if (frequency < 1000000) {
   1a3a6:	4b72      	ldr	r3, [pc, #456]	; (1a570 <spi_nrfx_transceive+0x300>)
   1a3a8:	429d      	cmp	r5, r3
   1a3aa:	d946      	bls.n	1a43a <spi_nrfx_transceive+0x1ca>
	} else if (frequency < 2000000) {
   1a3ac:	4b71      	ldr	r3, [pc, #452]	; (1a574 <spi_nrfx_transceive+0x304>)
   1a3ae:	429d      	cmp	r5, r3
   1a3b0:	d946      	bls.n	1a440 <spi_nrfx_transceive+0x1d0>
	} else if (frequency < 4000000) {
   1a3b2:	4b71      	ldr	r3, [pc, #452]	; (1a578 <spi_nrfx_transceive+0x308>)
   1a3b4:	429d      	cmp	r5, r3
   1a3b6:	d946      	bls.n	1a446 <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 8000000) {
   1a3b8:	4b70      	ldr	r3, [pc, #448]	; (1a57c <spi_nrfx_transceive+0x30c>)
   1a3ba:	429d      	cmp	r5, r3
   1a3bc:	d346      	bcc.n	1a44c <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 16000000) {
   1a3be:	4b68      	ldr	r3, [pc, #416]	; (1a560 <spi_nrfx_transceive+0x2f0>)
   1a3c0:	429d      	cmp	r5, r3
   1a3c2:	d346      	bcc.n	1a452 <spi_nrfx_transceive+0x1e2>
		return NRF_SPIM_FREQ_16M;
   1a3c4:	4b6e      	ldr	r3, [pc, #440]	; (1a580 <spi_nrfx_transceive+0x310>)
   1a3c6:	429d      	cmp	r5, r3
   1a3c8:	bf2c      	ite	cs
   1a3ca:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   1a3ce:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1a3d2:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1a3d4:	950a      	str	r5, [sp, #40]	; 0x28
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1a3d6:	f006 0304 	and.w	r3, r6, #4
   1a3da:	d53d      	bpl.n	1a458 <spi_nrfx_transceive+0x1e8>
			return NRF_SPIM_MODE_2;
   1a3dc:	2b00      	cmp	r3, #0
   1a3de:	bf14      	ite	ne
   1a3e0:	2303      	movne	r3, #3
   1a3e2:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1a3e4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (dev_data->initialized) {
   1a3e8:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   1a3ea:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1a3ee:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
	if (dev_data->initialized) {
   1a3f2:	b12b      	cbz	r3, 1a400 <spi_nrfx_transceive+0x190>
		nrfx_spim_uninit(&dev_config->spim);
   1a3f4:	9805      	ldr	r0, [sp, #20]
   1a3f6:	f003 fd23 	bl	1de40 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1a3fa:	2300      	movs	r3, #0
   1a3fc:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1a400:	4653      	mov	r3, sl
   1a402:	4a60      	ldr	r2, [pc, #384]	; (1a584 <spi_nrfx_transceive+0x314>)
   1a404:	9805      	ldr	r0, [sp, #20]
   1a406:	a908      	add	r1, sp, #32
   1a408:	f003 fbe8 	bl	1dbdc <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1a40c:	4b5e      	ldr	r3, [pc, #376]	; (1a588 <spi_nrfx_transceive+0x318>)
   1a40e:	4298      	cmp	r0, r3
   1a410:	d026      	beq.n	1a460 <spi_nrfx_transceive+0x1f0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1a412:	4b5e      	ldr	r3, [pc, #376]	; (1a58c <spi_nrfx_transceive+0x31c>)
   1a414:	9003      	str	r0, [sp, #12]
   1a416:	9302      	str	r3, [sp, #8]
   1a418:	2300      	movs	r3, #0
   1a41a:	2201      	movs	r2, #1
   1a41c:	4618      	mov	r0, r3
   1a41e:	e9cd 3300 	strd	r3, r3, [sp]
   1a422:	4949      	ldr	r1, [pc, #292]	; (1a548 <spi_nrfx_transceive+0x2d8>)
   1a424:	f00d fb87 	bl	27b36 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1a428:	f06f 0504 	mvn.w	r5, #4
   1a42c:	e753      	b.n	1a2d6 <spi_nrfx_transceive+0x66>
		return NRF_SPIM_FREQ_125K;
   1a42e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1a432:	e7ce      	b.n	1a3d2 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_250K;
   1a434:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1a438:	e7cb      	b.n	1a3d2 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_500K;
   1a43a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1a43e:	e7c8      	b.n	1a3d2 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_1M;
   1a440:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1a444:	e7c5      	b.n	1a3d2 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_2M;
   1a446:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1a44a:	e7c2      	b.n	1a3d2 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_4M;
   1a44c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1a450:	e7bf      	b.n	1a3d2 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_8M;
   1a452:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1a456:	e7bc      	b.n	1a3d2 <spi_nrfx_transceive+0x162>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1a458:	3b00      	subs	r3, #0
   1a45a:	bf18      	it	ne
   1a45c:	2301      	movne	r3, #1
   1a45e:	e7c1      	b.n	1a3e4 <spi_nrfx_transceive+0x174>
	dev_data->initialized = true;
   1a460:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1a462:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   1a466:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   1a46a:	2301      	movs	r3, #1
   1a46c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1a470:	f1b9 0f00 	cmp.w	r9, #0
   1a474:	d154      	bne.n	1a520 <spi_nrfx_transceive+0x2b0>
   1a476:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1a47a:	2300      	movs	r3, #0
   1a47c:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1a47e:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1a482:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1a486:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1a48a:	f00d fb41 	bl	27b10 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1a48e:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1a490:	f1bb 0f00 	cmp.w	fp, #0
   1a494:	d14c      	bne.n	1a530 <spi_nrfx_transceive+0x2c0>
   1a496:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1a49a:	2300      	movs	r3, #0
   1a49c:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1a49e:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1a4a2:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1a4a6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a4aa:	f00d fb31 	bl	27b10 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1a4ae:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1a4b0:	2101      	movs	r1, #1
   1a4b2:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1a4b4:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1a4b6:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1a4b8:	4620      	mov	r0, r4
   1a4ba:	f00d fb4c 	bl	27b56 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1a4be:	4640      	mov	r0, r8
   1a4c0:	f7ff fe22 	bl	1a108 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1a4c4:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1a4c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1a4c8:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1a4ca:	429d      	cmp	r5, r3
   1a4cc:	bf38      	it	cc
   1a4ce:	461d      	movcc	r5, r3
   1a4d0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1a4d4:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1a4d6:	f857 3b28 	ldr.w	r3, [r7], #40
   1a4da:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1a4de:	681b      	ldr	r3, [r3, #0]
   1a4e0:	4631      	mov	r1, r6
   1a4e2:	fbb5 f5f3 	udiv	r5, r5, r3
   1a4e6:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1a4ea:	35c8      	adds	r5, #200	; 0xc8
   1a4ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a4f0:	2300      	movs	r3, #0
   1a4f2:	fbe5 010c 	umlal	r0, r1, r5, ip
   1a4f6:	f7ee fcfb 	bl	8ef0 <__aeabi_uldivmod>
   1a4fa:	4602      	mov	r2, r0
   1a4fc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1a4fe:	4638      	mov	r0, r7
   1a500:	f005 fb30 	bl	1fb64 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1a504:	b1e0      	cbz	r0, 1a540 <spi_nrfx_transceive+0x2d0>
		LOG_ERR("Timeout waiting for transfer complete");
   1a506:	4b22      	ldr	r3, [pc, #136]	; (1a590 <spi_nrfx_transceive+0x320>)
   1a508:	2201      	movs	r2, #1
   1a50a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1a50e:	4630      	mov	r0, r6
   1a510:	4633      	mov	r3, r6
   1a512:	490d      	ldr	r1, [pc, #52]	; (1a548 <spi_nrfx_transceive+0x2d8>)
   1a514:	9600      	str	r6, [sp, #0]
   1a516:	f00d fb0e 	bl	27b36 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   1a51a:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1a51e:	e6da      	b.n	1a2d6 <spi_nrfx_transceive+0x66>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1a520:	f8d9 3000 	ldr.w	r3, [r9]
   1a524:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1a526:	2b00      	cmp	r3, #0
   1a528:	d0a7      	beq.n	1a47a <spi_nrfx_transceive+0x20a>
   1a52a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1a52e:	e7a5      	b.n	1a47c <spi_nrfx_transceive+0x20c>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1a530:	f8db 3000 	ldr.w	r3, [fp]
   1a534:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1a536:	2b00      	cmp	r3, #0
   1a538:	d0af      	beq.n	1a49a <spi_nrfx_transceive+0x22a>
   1a53a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1a53e:	e7ad      	b.n	1a49c <spi_nrfx_transceive+0x22c>
	status = ctx->sync_status;
   1a540:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1a542:	e6c8      	b.n	1a2d6 <spi_nrfx_transceive+0x66>
   1a544:	0002f22d 	.word	0x0002f22d
   1a548:	0002a478 	.word	0x0002a478
   1a54c:	0002f247 	.word	0x0002f247
   1a550:	0002f269 	.word	0x0002f269
   1a554:	0002f288 	.word	0x0002f288
   1a558:	0001e847 	.word	0x0001e847
   1a55c:	0002f2b7 	.word	0x0002f2b7
   1a560:	00f42400 	.word	0x00f42400
   1a564:	40005000 	.word	0x40005000
   1a568:	0003d08f 	.word	0x0003d08f
   1a56c:	0007a11f 	.word	0x0007a11f
   1a570:	000f423f 	.word	0x000f423f
   1a574:	001e847f 	.word	0x001e847f
   1a578:	003d08ff 	.word	0x003d08ff
   1a57c:	007a1200 	.word	0x007a1200
   1a580:	01e84800 	.word	0x01e84800
   1a584:	0001a1b1 	.word	0x0001a1b1
   1a588:	0bad0000 	.word	0x0bad0000
   1a58c:	0002f2e8 	.word	0x0002f2e8
   1a590:	0002f30f 	.word	0x0002f30f

0001a594 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1a594:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1a598:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1a59c:	280a      	cmp	r0, #10
   1a59e:	bf9a      	itte	ls
   1a5a0:	4b02      	ldrls	r3, [pc, #8]	; (1a5ac <qspi_get_zephyr_ret_code+0x18>)
   1a5a2:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1a5a6:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1a5aa:	4770      	bx	lr
   1a5ac:	0002b2b4 	.word	0x0002b2b4

0001a5b0 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1a5b0:	4b02      	ldr	r3, [pc, #8]	; (1a5bc <qspi_nor_pages_layout+0xc>)
   1a5b2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1a5b4:	2301      	movs	r3, #1
   1a5b6:	6013      	str	r3, [r2, #0]
}
   1a5b8:	4770      	bx	lr
   1a5ba:	bf00      	nop
   1a5bc:	0002b0f8 	.word	0x0002b0f8

0001a5c0 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1a5c0:	4800      	ldr	r0, [pc, #0]	; (1a5c4 <qspi_flash_get_parameters+0x4>)
   1a5c2:	4770      	bx	lr
   1a5c4:	0002b08c 	.word	0x0002b08c

0001a5c8 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1a5c8:	4b05      	ldr	r3, [pc, #20]	; (1a5e0 <qspi_wait_for_completion.isra.0+0x18>)
   1a5ca:	4299      	cmp	r1, r3
   1a5cc:	d106      	bne.n	1a5dc <qspi_wait_for_completion.isra.0+0x14>
   1a5ce:	f04f 32ff 	mov.w	r2, #4294967295
   1a5d2:	f04f 33ff 	mov.w	r3, #4294967295
   1a5d6:	3030      	adds	r0, #48	; 0x30
   1a5d8:	f005 bac4 	b.w	1fb64 <z_impl_k_sem_take>
}
   1a5dc:	4770      	bx	lr
   1a5de:	bf00      	nop
   1a5e0:	0bad0000 	.word	0x0bad0000

0001a5e4 <qspi_device_init>:
{
   1a5e4:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1a5e6:	6905      	ldr	r5, [r0, #16]
{
   1a5e8:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   1a5ea:	4e0f      	ldr	r6, [pc, #60]	; (1a628 <qspi_device_init+0x44>)
	qspi_lock(dev);
   1a5ec:	4628      	mov	r0, r5
   1a5ee:	f00d fb0d 	bl	27c0c <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1a5f2:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1a5f6:	f00d faf2 	bl	27bde <k_sem_give>
	if (!qspi_initialized) {
   1a5fa:	7833      	ldrb	r3, [r6, #0]
   1a5fc:	b98b      	cbnz	r3, 1a622 <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1a5fe:	462a      	mov	r2, r5
   1a600:	490a      	ldr	r1, [pc, #40]	; (1a62c <qspi_device_init+0x48>)
   1a602:	6860      	ldr	r0, [r4, #4]
   1a604:	f003 f86a 	bl	1d6dc <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1a608:	f7ff ffc4 	bl	1a594 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1a60c:	fab0 f380 	clz	r3, r0
   1a610:	4605      	mov	r5, r0
   1a612:	095b      	lsrs	r3, r3, #5
   1a614:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1a616:	6920      	ldr	r0, [r4, #16]
   1a618:	3018      	adds	r0, #24
   1a61a:	f00d fae0 	bl	27bde <k_sem_give>
}
   1a61e:	4628      	mov	r0, r5
   1a620:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1a622:	2500      	movs	r5, #0
   1a624:	e7f7      	b.n	1a616 <qspi_device_init+0x32>
   1a626:	bf00      	nop
   1a628:	20021dc9 	.word	0x20021dc9
   1a62c:	00027be3 	.word	0x00027be3

0001a630 <qspi_send_cmd>:
{
   1a630:	b570      	push	{r4, r5, r6, lr}
	if (cmd->tx_buf) {
   1a632:	684c      	ldr	r4, [r1, #4]
{
   1a634:	4605      	mov	r5, r0
   1a636:	b088      	sub	sp, #32
	if (cmd->tx_buf) {
   1a638:	b1ec      	cbz	r4, 1a676 <qspi_send_cmd+0x46>
		tx_buf = cmd->tx_buf->buf;
   1a63a:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1a63e:	6888      	ldr	r0, [r1, #8]
   1a640:	b1d8      	cbz	r0, 1a67a <qspi_send_cmd+0x4a>
		rx_len = cmd->rx_buf->len;
   1a642:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1a646:	b1c8      	cbz	r0, 1a67c <qspi_send_cmd+0x4c>
   1a648:	b1c3      	cbz	r3, 1a67c <qspi_send_cmd+0x4c>
		if (rx_len != tx_len) {
   1a64a:	4283      	cmp	r3, r0
   1a64c:	d10f      	bne.n	1a66e <qspi_send_cmd+0x3e>
		xfer_len += tx_len;
   1a64e:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1a650:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1a652:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1a654:	d915      	bls.n	1a682 <qspi_send_cmd+0x52>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1a656:	e9cd 1303 	strd	r1, r3, [sp, #12]
   1a65a:	4b1a      	ldr	r3, [pc, #104]	; (1a6c4 <qspi_send_cmd+0x94>)
   1a65c:	2202      	movs	r2, #2
   1a65e:	9302      	str	r3, [sp, #8]
   1a660:	2300      	movs	r3, #0
   1a662:	4919      	ldr	r1, [pc, #100]	; (1a6c8 <qspi_send_cmd+0x98>)
   1a664:	4618      	mov	r0, r3
   1a666:	e9cd 3300 	strd	r3, r3, [sp]
   1a66a:	f00d fac0 	bl	27bee <z_log_msg_runtime_create.constprop.0>
}
   1a66e:	f06f 0015 	mvn.w	r0, #21
   1a672:	b008      	add	sp, #32
   1a674:	bd70      	pop	{r4, r5, r6, pc}
	size_t tx_len = 0;
   1a676:	4623      	mov	r3, r4
   1a678:	e7e1      	b.n	1a63e <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   1a67a:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1a67c:	3301      	adds	r3, #1
   1a67e:	4403      	add	r3, r0
   1a680:	e7e6      	b.n	1a650 <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1a682:	f88d 3019 	strb.w	r3, [sp, #25]
   1a686:	f240 1301 	movw	r3, #257	; 0x101
   1a68a:	f8ad 301a 	strh.w	r3, [sp, #26]
   1a68e:	2300      	movs	r3, #0
	qspi_lock(dev);
   1a690:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1a692:	f88d 301c 	strb.w	r3, [sp, #28]
   1a696:	f88d 1018 	strb.w	r1, [sp, #24]
   1a69a:	f88d 201d 	strb.w	r2, [sp, #29]
	qspi_lock(dev);
   1a69e:	f00d fab5 	bl	27c0c <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1a6a2:	4621      	mov	r1, r4
   1a6a4:	4632      	mov	r2, r6
   1a6a6:	a806      	add	r0, sp, #24
   1a6a8:	f003 f90a 	bl	1d8c0 <nrfx_qspi_cinstr_xfer>
   1a6ac:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1a6ae:	6928      	ldr	r0, [r5, #16]
   1a6b0:	3018      	adds	r0, #24
   1a6b2:	f00d fa94 	bl	27bde <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1a6b6:	4620      	mov	r0, r4
}
   1a6b8:	b008      	add	sp, #32
   1a6ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
   1a6be:	f7ff bf69 	b.w	1a594 <qspi_get_zephyr_ret_code>
   1a6c2:	bf00      	nop
   1a6c4:	0002f34c 	.word	0x0002f34c
   1a6c8:	0002a468 	.word	0x0002a468

0001a6cc <qspi_device_uninit>:
{
   1a6cc:	b538      	push	{r3, r4, r5, lr}
   1a6ce:	4604      	mov	r4, r0
	qspi_lock(dev);
   1a6d0:	6900      	ldr	r0, [r0, #16]
   1a6d2:	f00d fa9b 	bl	27c0c <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1a6d6:	6925      	ldr	r5, [r4, #16]
   1a6d8:	2200      	movs	r2, #0
   1a6da:	2300      	movs	r3, #0
   1a6dc:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1a6e0:	f005 fa40 	bl	1fb64 <z_impl_k_sem_take>
	if (last) {
   1a6e4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1a6e6:	b94b      	cbnz	r3, 1a6fc <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1a6e8:	4d0a      	ldr	r5, [pc, #40]	; (1a714 <qspi_device_uninit+0x48>)
   1a6ea:	f003 f94b 	bl	1d984 <nrfx_qspi_mem_busy_check>
   1a6ee:	42a8      	cmp	r0, r5
   1a6f0:	d10a      	bne.n	1a708 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1a6f2:	f003 f969 	bl	1d9c8 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1a6f6:	2200      	movs	r2, #0
   1a6f8:	4b07      	ldr	r3, [pc, #28]	; (1a718 <qspi_device_uninit+0x4c>)
   1a6fa:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1a6fc:	6920      	ldr	r0, [r4, #16]
}
   1a6fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1a702:	3018      	adds	r0, #24
   1a704:	f00d ba6b 	b.w	27bde <k_sem_give>
	return z_impl_k_sleep(timeout);
   1a708:	2100      	movs	r1, #0
   1a70a:	f240 6067 	movw	r0, #1639	; 0x667
   1a70e:	f007 f8d9 	bl	218c4 <z_impl_k_sleep>
   1a712:	e7ea      	b.n	1a6ea <qspi_device_uninit+0x1e>
   1a714:	0bad0000 	.word	0x0bad0000
   1a718:	20021dc9 	.word	0x20021dc9

0001a71c <qspi_nor_read>:
{
   1a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a720:	4681      	mov	r9, r0
   1a722:	460e      	mov	r6, r1
   1a724:	461c      	mov	r4, r3
	if (!dest) {
   1a726:	4690      	mov	r8, r2
{
   1a728:	b08b      	sub	sp, #44	; 0x2c
	if (!dest) {
   1a72a:	b1aa      	cbz	r2, 1a758 <qspi_nor_read+0x3c>
	if (!size) {
   1a72c:	2b00      	cmp	r3, #0
   1a72e:	f000 809f 	beq.w	1a870 <qspi_nor_read+0x154>
	if (addr < 0 ||
   1a732:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1a734:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1a736:	db03      	blt.n	1a740 <qspi_nor_read+0x24>
   1a738:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1a73a:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1a73c:	4293      	cmp	r3, r2
   1a73e:	d911      	bls.n	1a764 <qspi_nor_read+0x48>
		LOG_ERR("read error: address or size "
   1a740:	4b4c      	ldr	r3, [pc, #304]	; (1a874 <qspi_nor_read+0x158>)
   1a742:	2201      	movs	r2, #1
   1a744:	9302      	str	r3, [sp, #8]
   1a746:	2300      	movs	r3, #0
   1a748:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1a74c:	4618      	mov	r0, r3
   1a74e:	e9cd 3300 	strd	r3, r3, [sp]
   1a752:	4949      	ldr	r1, [pc, #292]	; (1a878 <qspi_nor_read+0x15c>)
   1a754:	f00d fa4b 	bl	27bee <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a758:	f06f 0515 	mvn.w	r5, #21
}
   1a75c:	4628      	mov	r0, r5
   1a75e:	b00b      	add	sp, #44	; 0x2c
   1a760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1a764:	f7ff ff3e 	bl	1a5e4 <qspi_device_init>
	if (rc != 0) {
   1a768:	4605      	mov	r5, r0
   1a76a:	2800      	cmp	r0, #0
   1a76c:	d17c      	bne.n	1a868 <qspi_nor_read+0x14c>
	qspi_lock(dev);
   1a76e:	4275      	negs	r5, r6
   1a770:	f005 0503 	and.w	r5, r5, #3
   1a774:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a778:	f00d fa48 	bl	27c0c <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1a77c:	42a5      	cmp	r5, r4
   1a77e:	bf28      	it	cs
   1a780:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1a782:	f1d8 0300 	rsbs	r3, r8, #0
   1a786:	f003 0303 	and.w	r3, r3, #3
   1a78a:	f008 0703 	and.w	r7, r8, #3
   1a78e:	bf58      	it	pl
   1a790:	425f      	negpl	r7, r3
   1a792:	427f      	negs	r7, r7
   1a794:	f007 0703 	and.w	r7, r7, #3
   1a798:	42a7      	cmp	r7, r4
   1a79a:	bf28      	it	cs
   1a79c:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1a79e:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1a7a0:	1be4      	subs	r4, r4, r7
   1a7a2:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1a7a6:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   1a7aa:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1a7ac:	bfc8      	it	gt
   1a7ae:	46a2      	movgt	sl, r4
   1a7b0:	f003 0b03 	and.w	fp, r3, #3
   1a7b4:	bfc8      	it	gt
   1a7b6:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   1a7ba:	f1ba 0f00 	cmp.w	sl, #0
   1a7be:	d019      	beq.n	1a7f4 <qspi_nor_read+0xd8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1a7c0:	eb08 0307 	add.w	r3, r8, r7
   1a7c4:	1972      	adds	r2, r6, r5
   1a7c6:	4651      	mov	r1, sl
   1a7c8:	4618      	mov	r0, r3
   1a7ca:	9307      	str	r3, [sp, #28]
   1a7cc:	f00d fed9 	bl	28582 <nrfx_qspi_read>
   1a7d0:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1a7d2:	4601      	mov	r1, r0
   1a7d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a7d8:	f7ff fef6 	bl	1a5c8 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1a7dc:	4a27      	ldr	r2, [pc, #156]	; (1a87c <qspi_nor_read+0x160>)
   1a7de:	4294      	cmp	r4, r2
   1a7e0:	d139      	bne.n	1a856 <qspi_nor_read+0x13a>
		if (flash_prefix != dest_prefix) {
   1a7e2:	42bd      	cmp	r5, r7
   1a7e4:	d006      	beq.n	1a7f4 <qspi_nor_read+0xd8>
__ssp_bos_icheck3(memmove, void *, const void *)
   1a7e6:	9b07      	ldr	r3, [sp, #28]
   1a7e8:	4652      	mov	r2, sl
   1a7ea:	4619      	mov	r1, r3
   1a7ec:	eb08 0005 	add.w	r0, r8, r5
   1a7f0:	f00e fe5f 	bl	294b2 <memmove>
	if (flash_prefix != 0) {
   1a7f4:	b1ad      	cbz	r5, 1a822 <qspi_nor_read+0x106>
				     (WORD_SIZE - flash_prefix));
   1a7f6:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1a7fa:	2104      	movs	r1, #4
   1a7fc:	1bf2      	subs	r2, r6, r7
   1a7fe:	a808      	add	r0, sp, #32
   1a800:	f00d febf 	bl	28582 <nrfx_qspi_read>
   1a804:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1a806:	4601      	mov	r1, r0
   1a808:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a80c:	f7ff fedc 	bl	1a5c8 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1a810:	4b1a      	ldr	r3, [pc, #104]	; (1a87c <qspi_nor_read+0x160>)
   1a812:	429c      	cmp	r4, r3
   1a814:	d11f      	bne.n	1a856 <qspi_nor_read+0x13a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a816:	ab08      	add	r3, sp, #32
   1a818:	462a      	mov	r2, r5
   1a81a:	4640      	mov	r0, r8
   1a81c:	19d9      	adds	r1, r3, r7
   1a81e:	f00e fe28 	bl	29472 <memcpy>
	if (flash_suffix != 0) {
   1a822:	f1bb 0f00 	cmp.w	fp, #0
   1a826:	d015      	beq.n	1a854 <qspi_nor_read+0x138>
				     addr + flash_prefix + flash_middle);
   1a828:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1a82a:	2108      	movs	r1, #8
   1a82c:	4452      	add	r2, sl
   1a82e:	a808      	add	r0, sp, #32
   1a830:	f00d fea7 	bl	28582 <nrfx_qspi_read>
   1a834:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1a836:	4601      	mov	r1, r0
   1a838:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a83c:	f7ff fec4 	bl	1a5c8 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1a840:	4b0e      	ldr	r3, [pc, #56]	; (1a87c <qspi_nor_read+0x160>)
   1a842:	429c      	cmp	r4, r3
   1a844:	d107      	bne.n	1a856 <qspi_nor_read+0x13a>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1a846:	eb0a 0005 	add.w	r0, sl, r5
   1a84a:	465a      	mov	r2, fp
   1a84c:	a908      	add	r1, sp, #32
   1a84e:	4440      	add	r0, r8
   1a850:	f00e fe0f 	bl	29472 <memcpy>
	return res;
   1a854:	4c09      	ldr	r4, [pc, #36]	; (1a87c <qspi_nor_read+0x160>)
	k_sem_give(&dev_data->sem);
   1a856:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a85a:	3018      	adds	r0, #24
   1a85c:	f00d f9bf 	bl	27bde <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1a860:	4620      	mov	r0, r4
   1a862:	f7ff fe97 	bl	1a594 <qspi_get_zephyr_ret_code>
   1a866:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1a868:	4648      	mov	r0, r9
   1a86a:	f7ff ff2f 	bl	1a6cc <qspi_device_uninit>
	return rc;
   1a86e:	e775      	b.n	1a75c <qspi_nor_read+0x40>
		return 0;
   1a870:	461d      	mov	r5, r3
   1a872:	e773      	b.n	1a75c <qspi_nor_read+0x40>
   1a874:	0002f36f 	.word	0x0002f36f
   1a878:	0002a468 	.word	0x0002a468
   1a87c:	0bad0000 	.word	0x0bad0000

0001a880 <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   1a880:	2202      	movs	r2, #2
{
   1a882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a886:	4b64      	ldr	r3, [pc, #400]	; (1aa18 <qspi_nor_init+0x198>)
   1a888:	b090      	sub	sp, #64	; 0x40
   1a88a:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1a88e:	6843      	ldr	r3, [r0, #4]
{
   1a890:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1a892:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1a894:	2100      	movs	r1, #0
   1a896:	4630      	mov	r0, r6
   1a898:	aa0d      	add	r2, sp, #52	; 0x34
   1a89a:	f00d fc9c 	bl	281d6 <pinctrl_lookup_state>
	if (ret < 0) {
   1a89e:	1e04      	subs	r4, r0, #0
   1a8a0:	db35      	blt.n	1a90e <qspi_nor_init+0x8e>
	return pinctrl_apply_state_direct(config, state);
   1a8a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a8a4:	6832      	ldr	r2, [r6, #0]
   1a8a6:	7919      	ldrb	r1, [r3, #4]
   1a8a8:	6818      	ldr	r0, [r3, #0]
   1a8aa:	f00d fca7 	bl	281fc <pinctrl_configure_pins>
	if (ret < 0) {
   1a8ae:	1e04      	subs	r4, r0, #0
   1a8b0:	db2d      	blt.n	1a90e <qspi_nor_init+0x8e>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1a8b2:	2200      	movs	r2, #0
   1a8b4:	2101      	movs	r1, #1
   1a8b6:	202b      	movs	r0, #43	; 0x2b
   1a8b8:	f7f5 fab8 	bl	fe2c <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1a8bc:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1a8be:	692a      	ldr	r2, [r5, #16]
   1a8c0:	4630      	mov	r0, r6
   1a8c2:	4956      	ldr	r1, [pc, #344]	; (1aa1c <qspi_nor_init+0x19c>)
   1a8c4:	f002 ff0a 	bl	1d6dc <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1a8c8:	f7ff fe64 	bl	1a594 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1a8cc:	1e04      	subs	r4, r0, #0
   1a8ce:	db1e      	blt.n	1a90e <qspi_nor_init+0x8e>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1a8d0:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1a8d2:	3b02      	subs	r3, #2
   1a8d4:	2b01      	cmp	r3, #1
   1a8d6:	d91e      	bls.n	1a916 <qspi_nor_init+0x96>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1a8d8:	f896 800a 	ldrb.w	r8, [r6, #10]
   1a8dc:	f1a8 0803 	sub.w	r8, r8, #3
   1a8e0:	f1b8 0f01 	cmp.w	r8, #1
   1a8e4:	bf8c      	ite	hi
   1a8e6:	f04f 0800 	movhi.w	r8, #0
   1a8ea:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1a8ee:	4628      	mov	r0, r5
   1a8f0:	f00d f9ae 	bl	27c50 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1a8f4:	1e04      	subs	r4, r0, #0
   1a8f6:	da11      	bge.n	1a91c <qspi_nor_init+0x9c>
			LOG_ERR("RDSR failed: %d", ret);
   1a8f8:	4b49      	ldr	r3, [pc, #292]	; (1aa20 <qspi_nor_init+0x1a0>)
   1a8fa:	2201      	movs	r2, #1
   1a8fc:	9302      	str	r3, [sp, #8]
   1a8fe:	2300      	movs	r3, #0
   1a900:	4948      	ldr	r1, [pc, #288]	; (1aa24 <qspi_nor_init+0x1a4>)
   1a902:	4618      	mov	r0, r3
   1a904:	e9cd 3300 	strd	r3, r3, [sp]
   1a908:	9403      	str	r4, [sp, #12]
   1a90a:	f00d f970 	bl	27bee <z_log_msg_runtime_create.constprop.0>
}
   1a90e:	4620      	mov	r0, r4
   1a910:	b010      	add	sp, #64	; 0x40
   1a912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1a916:	f04f 0801 	mov.w	r8, #1
   1a91a:	e7e8      	b.n	1a8ee <qspi_nor_init+0x6e>
		uint8_t sr = (uint8_t)ret;
   1a91c:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1a91e:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1a922:	45a0      	cmp	r8, r4
   1a924:	ae0a      	add	r6, sp, #40	; 0x28
   1a926:	af0b      	add	r7, sp, #44	; 0x2c
   1a928:	d02f      	beq.n	1a98a <qspi_nor_init+0x10a>
	uint8_t sr_array[2] = {0};
   1a92a:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1a92c:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1a930:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		sr_array[0] = sr_val;
   1a934:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	const struct qspi_buf sr_buf = {
   1a938:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   1a93a:	4628      	mov	r0, r5
   1a93c:	a90d      	add	r1, sp, #52	; 0x34
	struct qspi_cmd cmd = {
   1a93e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct qspi_buf sr_buf = {
   1a942:	960b      	str	r6, [sp, #44]	; 0x2c
	struct qspi_cmd cmd = {
   1a944:	930f      	str	r3, [sp, #60]	; 0x3c
   1a946:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   1a94a:	970e      	str	r7, [sp, #56]	; 0x38
	ret = qspi_send_cmd(dev, &cmd, true);
   1a94c:	f7ff fe70 	bl	1a630 <qspi_send_cmd>
	if (ret == 0) {
   1a950:	1e04      	subs	r4, r0, #0
   1a952:	d013      	beq.n	1a97c <qspi_nor_init+0xfc>
		if (ret < 0) {
   1a954:	dadb      	bge.n	1a90e <qspi_nor_init+0x8e>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1a956:	4a34      	ldr	r2, [pc, #208]	; (1aa28 <qspi_nor_init+0x1a8>)
   1a958:	4b34      	ldr	r3, [pc, #208]	; (1aa2c <qspi_nor_init+0x1ac>)
   1a95a:	4932      	ldr	r1, [pc, #200]	; (1aa24 <qspi_nor_init+0x1a4>)
   1a95c:	f1b8 0f00 	cmp.w	r8, #0
   1a960:	bf18      	it	ne
   1a962:	4613      	movne	r3, r2
   1a964:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1a968:	4b31      	ldr	r3, [pc, #196]	; (1aa30 <qspi_nor_init+0x1b0>)
   1a96a:	2201      	movs	r2, #1
   1a96c:	9302      	str	r3, [sp, #8]
   1a96e:	2300      	movs	r3, #0
   1a970:	4618      	mov	r0, r3
   1a972:	e9cd 3300 	strd	r3, r3, [sp]
   1a976:	f00d f93a 	bl	27bee <z_log_msg_runtime_create.constprop.0>
	if (ret != 0) {
   1a97a:	e7c8      	b.n	1a90e <qspi_nor_init+0x8e>
		ret = qspi_rdsr(dev, 1);
   1a97c:	4628      	mov	r0, r5
   1a97e:	f00d f967 	bl	27c50 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1a982:	1e04      	subs	r4, r0, #0
   1a984:	dbe7      	blt.n	1a956 <qspi_nor_init+0xd6>
   1a986:	07e3      	lsls	r3, r4, #31
   1a988:	d4f8      	bmi.n	1a97c <qspi_nor_init+0xfc>
	qspi_device_uninit(dev);
   1a98a:	4628      	mov	r0, r5
   1a98c:	f7ff fe9e 	bl	1a6cc <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1a990:	2403      	movs	r4, #3
   1a992:	2300      	movs	r3, #0
   1a994:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   1a998:	930e      	str	r3, [sp, #56]	; 0x38
   1a99a:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   1a99c:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   1a99e:	960b      	str	r6, [sp, #44]	; 0x2c
	const struct qspi_cmd cmd = {
   1a9a0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1a9a4:	970f      	str	r7, [sp, #60]	; 0x3c
	int ret = qspi_device_init(dev);
   1a9a6:	f7ff fe1d 	bl	1a5e4 <qspi_device_init>
	if (ret == 0) {
   1a9aa:	4602      	mov	r2, r0
   1a9ac:	b128      	cbz	r0, 1a9ba <qspi_nor_init+0x13a>
	qspi_device_uninit(dev);
   1a9ae:	4628      	mov	r0, r5
   1a9b0:	f7ff fe8c 	bl	1a6cc <qspi_device_uninit>
		return -ENODEV;
   1a9b4:	f06f 0412 	mvn.w	r4, #18
   1a9b8:	e7a9      	b.n	1a90e <qspi_nor_init+0x8e>
		ret = qspi_send_cmd(dev, &cmd, false);
   1a9ba:	4628      	mov	r0, r5
   1a9bc:	a90d      	add	r1, sp, #52	; 0x34
   1a9be:	f7ff fe37 	bl	1a630 <qspi_send_cmd>
   1a9c2:	4607      	mov	r7, r0
	qspi_device_uninit(dev);
   1a9c4:	4628      	mov	r0, r5
   1a9c6:	f7ff fe81 	bl	1a6cc <qspi_device_uninit>
	if (ret != 0) {
   1a9ca:	2f00      	cmp	r7, #0
   1a9cc:	d1f2      	bne.n	1a9b4 <qspi_nor_init+0x134>
	const struct qspi_nor_config *qnc = dev->config;
   1a9ce:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1a9d0:	4622      	mov	r2, r4
   1a9d2:	4631      	mov	r1, r6
   1a9d4:	f105 001c 	add.w	r0, r5, #28
   1a9d8:	f00e fd3b 	bl	29452 <memcmp>
   1a9dc:	4604      	mov	r4, r0
   1a9de:	2800      	cmp	r0, #0
   1a9e0:	d095      	beq.n	1a90e <qspi_nor_init+0x8e>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1a9e2:	7fab      	ldrb	r3, [r5, #30]
   1a9e4:	2201      	movs	r2, #1
   1a9e6:	9308      	str	r3, [sp, #32]
   1a9e8:	7f6b      	ldrb	r3, [r5, #29]
   1a9ea:	4638      	mov	r0, r7
   1a9ec:	9307      	str	r3, [sp, #28]
   1a9ee:	7f2b      	ldrb	r3, [r5, #28]
   1a9f0:	490c      	ldr	r1, [pc, #48]	; (1aa24 <qspi_nor_init+0x1a4>)
   1a9f2:	9306      	str	r3, [sp, #24]
   1a9f4:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1a9f8:	9700      	str	r7, [sp, #0]
   1a9fa:	9305      	str	r3, [sp, #20]
   1a9fc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   1aa00:	9304      	str	r3, [sp, #16]
   1aa02:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1aa06:	9303      	str	r3, [sp, #12]
   1aa08:	4b0a      	ldr	r3, [pc, #40]	; (1aa34 <qspi_nor_init+0x1b4>)
   1aa0a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1aa0e:	463b      	mov	r3, r7
   1aa10:	f00d f8ed 	bl	27bee <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1aa14:	e7ce      	b.n	1a9b4 <qspi_nor_init+0x134>
   1aa16:	bf00      	nop
   1aa18:	40005000 	.word	0x40005000
   1aa1c:	00027be3 	.word	0x00027be3
   1aa20:	0002f3be 	.word	0x0002f3be
   1aa24:	0002a468 	.word	0x0002a468
   1aa28:	0002dfff 	.word	0x0002dfff
   1aa2c:	0002f3b8 	.word	0x0002f3b8
   1aa30:	0002f3ce 	.word	0x0002f3ce
   1aa34:	0002f3df 	.word	0x0002f3df

0001aa38 <qspi_nor_erase>:
{
   1aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1aa3c:	2900      	cmp	r1, #0
{
   1aa3e:	4606      	mov	r6, r0
   1aa40:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1aa42:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1aa46:	b087      	sub	sp, #28
	if (addr < 0 ||
   1aa48:	db05      	blt.n	1aa56 <qspi_nor_erase+0x1e>
   1aa4a:	f8da 3018 	ldr.w	r3, [sl, #24]
	    (addr + size) > params->size) {
   1aa4e:	188a      	adds	r2, r1, r2
	if (addr < 0 ||
   1aa50:	429a      	cmp	r2, r3
	    (addr + size) > params->size) {
   1aa52:	4688      	mov	r8, r1
	if (addr < 0 ||
   1aa54:	d911      	bls.n	1aa7a <qspi_nor_erase+0x42>
		LOG_ERR("erase error: address or size "
   1aa56:	4b46      	ldr	r3, [pc, #280]	; (1ab70 <qspi_nor_erase+0x138>)
   1aa58:	e9cd 1503 	strd	r1, r5, [sp, #12]
   1aa5c:	9302      	str	r3, [sp, #8]
   1aa5e:	2300      	movs	r3, #0
   1aa60:	2201      	movs	r2, #1
   1aa62:	4618      	mov	r0, r3
   1aa64:	e9cd 3300 	strd	r3, r3, [sp]
   1aa68:	4942      	ldr	r1, [pc, #264]	; (1ab74 <qspi_nor_erase+0x13c>)
   1aa6a:	f00d f8c0 	bl	27bee <z_log_msg_runtime_create.constprop.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1aa6e:	f06f 0415 	mvn.w	r4, #21
}
   1aa72:	4620      	mov	r0, r4
   1aa74:	b007      	add	sp, #28
   1aa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1aa7a:	f3c1 020b 	ubfx	r2, r1, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1aa7e:	2d00      	cmp	r5, #0
   1aa80:	d0f5      	beq.n	1aa6e <qspi_nor_erase+0x36>
   1aa82:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1aa86:	4313      	orrs	r3, r2
   1aa88:	d1f1      	bne.n	1aa6e <qspi_nor_erase+0x36>
	rv = qspi_device_init(dev);
   1aa8a:	f7ff fdab 	bl	1a5e4 <qspi_device_init>
	if (rv != 0) {
   1aa8e:	4604      	mov	r4, r0
   1aa90:	bb68      	cbnz	r0, 1aaee <qspi_nor_erase+0xb6>
	qspi_trans_lock(dev);
   1aa92:	6930      	ldr	r0, [r6, #16]
   1aa94:	f00d f8c1 	bl	27c1a <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1aa98:	4621      	mov	r1, r4
   1aa9a:	4630      	mov	r0, r6
   1aa9c:	f00d f8c3 	bl	27c26 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1aaa0:	4604      	mov	r4, r0
   1aaa2:	bb08      	cbnz	r0, 1aae8 <qspi_nor_erase+0xb0>
	qspi_lock(dev);
   1aaa4:	6930      	ldr	r0, [r6, #16]
   1aaa6:	f00d f8b1 	bl	27c0c <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
   1aaaa:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1ab78 <qspi_nor_erase+0x140>
		if (size == params->size) {
   1aaae:	f8da 3018 	ldr.w	r3, [sl, #24]
   1aab2:	42ab      	cmp	r3, r5
   1aab4:	d11f      	bne.n	1aaf6 <qspi_nor_erase+0xbe>
			res = nrfx_qspi_chip_erase();
   1aab6:	f00d fd67 	bl	28588 <nrfx_qspi_chip_erase>
   1aaba:	46a9      	mov	r9, r5
   1aabc:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   1aabe:	4639      	mov	r1, r7
   1aac0:	6930      	ldr	r0, [r6, #16]
   1aac2:	f7ff fd81 	bl	1a5c8 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1aac6:	455f      	cmp	r7, fp
   1aac8:	d141      	bne.n	1ab4e <qspi_nor_erase+0x116>
	while (size > 0) {
   1aaca:	ebb5 0509 	subs.w	r5, r5, r9
			addr += adj;
   1aace:	44c8      	add	r8, r9
	while (size > 0) {
   1aad0:	d1ed      	bne.n	1aaae <qspi_nor_erase+0x76>
	k_sem_give(&dev_data->sem);
   1aad2:	6930      	ldr	r0, [r6, #16]
   1aad4:	3018      	adds	r0, #24
   1aad6:	f00d f882 	bl	27bde <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1aada:	2101      	movs	r1, #1
   1aadc:	4630      	mov	r0, r6
   1aade:	f00d f8a2 	bl	27c26 <qspi_nor_write_protection_set>
   1aae2:	2c00      	cmp	r4, #0
   1aae4:	bf08      	it	eq
   1aae6:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1aae8:	6930      	ldr	r0, [r6, #16]
   1aaea:	f00d f878 	bl	27bde <k_sem_give>
	qspi_device_uninit(dev);
   1aaee:	4630      	mov	r0, r6
   1aaf0:	f7ff fdec 	bl	1a6cc <qspi_device_uninit>
	return rv;
   1aaf4:	e7bd      	b.n	1aa72 <qspi_nor_erase+0x3a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1aaf6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1aafa:	d30a      	bcc.n	1ab12 <qspi_nor_erase+0xda>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1aafc:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1ab00:	b953      	cbnz	r3, 1ab18 <qspi_nor_erase+0xe0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1ab02:	4641      	mov	r1, r8
   1ab04:	2001      	movs	r0, #1
   1ab06:	f002 ffc1 	bl	1da8c <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1ab0a:	f44f 3980 	mov.w	r9, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1ab0e:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   1ab10:	e7d5      	b.n	1aabe <qspi_nor_erase+0x86>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1ab12:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1ab16:	d309      	bcc.n	1ab2c <qspi_nor_erase+0xf4>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1ab18:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1ab1c:	b930      	cbnz	r0, 1ab2c <qspi_nor_erase+0xf4>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1ab1e:	4641      	mov	r1, r8
   1ab20:	f002 ffb4 	bl	1da8c <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1ab24:	f44f 5980 	mov.w	r9, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1ab28:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   1ab2a:	e7c8      	b.n	1aabe <qspi_nor_erase+0x86>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1ab2c:	4b13      	ldr	r3, [pc, #76]	; (1ab7c <qspi_nor_erase+0x144>)
   1ab2e:	2201      	movs	r2, #1
   1ab30:	9302      	str	r3, [sp, #8]
   1ab32:	2300      	movs	r3, #0
   1ab34:	490f      	ldr	r1, [pc, #60]	; (1ab74 <qspi_nor_erase+0x13c>)
   1ab36:	4618      	mov	r0, r3
   1ab38:	e9cd 3300 	strd	r3, r3, [sp]
   1ab3c:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1ab40:	f00d f855 	bl	27bee <z_log_msg_runtime_create.constprop.0>
		qspi_wait_for_completion(dev, res);
   1ab44:	490e      	ldr	r1, [pc, #56]	; (1ab80 <qspi_nor_erase+0x148>)
   1ab46:	6930      	ldr	r0, [r6, #16]
   1ab48:	f7ff fd3e 	bl	1a5c8 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1ab4c:	4f0c      	ldr	r7, [pc, #48]	; (1ab80 <qspi_nor_erase+0x148>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1ab4e:	4b0d      	ldr	r3, [pc, #52]	; (1ab84 <qspi_nor_erase+0x14c>)
   1ab50:	2201      	movs	r2, #1
   1ab52:	9302      	str	r3, [sp, #8]
   1ab54:	2300      	movs	r3, #0
   1ab56:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1ab5a:	4618      	mov	r0, r3
   1ab5c:	e9cd 3300 	strd	r3, r3, [sp]
   1ab60:	4904      	ldr	r1, [pc, #16]	; (1ab74 <qspi_nor_erase+0x13c>)
   1ab62:	f00d f844 	bl	27bee <z_log_msg_runtime_create.constprop.0>
			rv = qspi_get_zephyr_ret_code(res);
   1ab66:	4638      	mov	r0, r7
   1ab68:	f7ff fd14 	bl	1a594 <qspi_get_zephyr_ret_code>
   1ab6c:	4604      	mov	r4, r0
			break;
   1ab6e:	e7b0      	b.n	1aad2 <qspi_nor_erase+0x9a>
   1ab70:	0002f411 	.word	0x0002f411
   1ab74:	0002a468 	.word	0x0002a468
   1ab78:	0bad0000 	.word	0x0bad0000
   1ab7c:	0002f45b 	.word	0x0002f45b
   1ab80:	0bad0004 	.word	0x0bad0004
   1ab84:	0002f479 	.word	0x0002f479

0001ab88 <qspi_nor_write>:
{
   1ab88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ab8c:	4605      	mov	r5, r0
   1ab8e:	460f      	mov	r7, r1
   1ab90:	461e      	mov	r6, r3
	if (!src) {
   1ab92:	4690      	mov	r8, r2
{
   1ab94:	b088      	sub	sp, #32
	if (!src) {
   1ab96:	b1ca      	cbz	r2, 1abcc <qspi_nor_write+0x44>
	if ((size == 0)
   1ab98:	b1c3      	cbz	r3, 1abcc <qspi_nor_write+0x44>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1ab9a:	2b04      	cmp	r3, #4
   1ab9c:	d901      	bls.n	1aba2 <qspi_nor_write+0x1a>
   1ab9e:	079a      	lsls	r2, r3, #30
   1aba0:	d114      	bne.n	1abcc <qspi_nor_write+0x44>
	if ((addr % 4U) != 0) {
   1aba2:	07bb      	lsls	r3, r7, #30
   1aba4:	d112      	bne.n	1abcc <qspi_nor_write+0x44>
	if (addr < 0 ||
   1aba6:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   1aba8:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1abaa:	db03      	blt.n	1abb4 <qspi_nor_write+0x2c>
   1abac:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1abae:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   1abb0:	4293      	cmp	r3, r2
   1abb2:	d911      	bls.n	1abd8 <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
   1abb4:	4b40      	ldr	r3, [pc, #256]	; (1acb8 <qspi_nor_write+0x130>)
   1abb6:	2201      	movs	r2, #1
   1abb8:	9302      	str	r3, [sp, #8]
   1abba:	2300      	movs	r3, #0
   1abbc:	e9cd 7603 	strd	r7, r6, [sp, #12]
   1abc0:	4618      	mov	r0, r3
   1abc2:	e9cd 3300 	strd	r3, r3, [sp]
   1abc6:	493d      	ldr	r1, [pc, #244]	; (1acbc <qspi_nor_write+0x134>)
   1abc8:	f00d f811 	bl	27bee <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1abcc:	f06f 0415 	mvn.w	r4, #21
}
   1abd0:	4620      	mov	r0, r4
   1abd2:	b008      	add	sp, #32
   1abd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   1abd8:	4628      	mov	r0, r5
   1abda:	f7ff fd03 	bl	1a5e4 <qspi_device_init>
	if (rc != 0) {
   1abde:	4604      	mov	r4, r0
   1abe0:	2800      	cmp	r0, #0
   1abe2:	d160      	bne.n	1aca6 <qspi_nor_write+0x11e>
	qspi_trans_lock(dev);
   1abe4:	6928      	ldr	r0, [r5, #16]
   1abe6:	f00d f818 	bl	27c1a <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1abea:	4621      	mov	r1, r4
   1abec:	4628      	mov	r0, r5
   1abee:	f00d f81a 	bl	27c26 <qspi_nor_write_protection_set>
   1abf2:	4604      	mov	r4, r0
	qspi_lock(dev);
   1abf4:	6928      	ldr	r0, [r5, #16]
   1abf6:	f00d f809 	bl	27c0c <qspi_lock.isra.0>
	if (!res) {
   1abfa:	2c00      	cmp	r4, #0
   1abfc:	d140      	bne.n	1ac80 <qspi_nor_write+0xf8>
		if (size < 4U) {
   1abfe:	2e03      	cmp	r6, #3
   1ac00:	d81c      	bhi.n	1ac3c <qspi_nor_write+0xb4>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1ac02:	463a      	mov	r2, r7
   1ac04:	2104      	movs	r1, #4
   1ac06:	a807      	add	r0, sp, #28
   1ac08:	f00d fcbb 	bl	28582 <nrfx_qspi_read>
   1ac0c:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1ac0e:	4601      	mov	r1, r0
   1ac10:	6928      	ldr	r0, [r5, #16]
   1ac12:	f7ff fcd9 	bl	1a5c8 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1ac16:	4b2a      	ldr	r3, [pc, #168]	; (1acc0 <qspi_nor_write+0x138>)
   1ac18:	429c      	cmp	r4, r3
   1ac1a:	d131      	bne.n	1ac80 <qspi_nor_write+0xf8>
		memcpy(buf, sptr, slen);
   1ac1c:	4632      	mov	r2, r6
   1ac1e:	4641      	mov	r1, r8
   1ac20:	a807      	add	r0, sp, #28
   1ac22:	f00e fc26 	bl	29472 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1ac26:	463a      	mov	r2, r7
   1ac28:	2104      	movs	r1, #4
   1ac2a:	a807      	add	r0, sp, #28
			res = nrfx_qspi_write(src, size, addr);
   1ac2c:	f00d fca6 	bl	2857c <nrfx_qspi_write>
   1ac30:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1ac32:	4601      	mov	r1, r0
   1ac34:	6928      	ldr	r0, [r5, #16]
   1ac36:	f7ff fcc7 	bl	1a5c8 <qspi_wait_for_completion.isra.0>
   1ac3a:	e021      	b.n	1ac80 <qspi_nor_write+0xf8>
   1ac3c:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1ac40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1ac44:	d033      	beq.n	1acae <qspi_nor_write+0x126>
			if (res == NRFX_SUCCESS) {
   1ac46:	f8df a078 	ldr.w	sl, [pc, #120]	; 1acc0 <qspi_nor_write+0x138>
			size_t len = MIN(slen, sizeof(buf));
   1ac4a:	2e04      	cmp	r6, #4
   1ac4c:	46b1      	mov	r9, r6
   1ac4e:	bf28      	it	cs
   1ac50:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   1ac54:	4641      	mov	r1, r8
   1ac56:	464a      	mov	r2, r9
   1ac58:	a807      	add	r0, sp, #28
   1ac5a:	f00e fc0a 	bl	29472 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1ac5e:	463a      	mov	r2, r7
   1ac60:	2104      	movs	r1, #4
   1ac62:	a807      	add	r0, sp, #28
   1ac64:	f00d fc8a 	bl	2857c <nrfx_qspi_write>
   1ac68:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1ac6a:	4601      	mov	r1, r0
   1ac6c:	6928      	ldr	r0, [r5, #16]
   1ac6e:	f7ff fcab 	bl	1a5c8 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1ac72:	4554      	cmp	r4, sl
   1ac74:	d104      	bne.n	1ac80 <qspi_nor_write+0xf8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1ac76:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   1ac7a:	44c8      	add	r8, r9
				addr += len;
   1ac7c:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1ac7e:	d1e4      	bne.n	1ac4a <qspi_nor_write+0xc2>
	k_sem_give(&dev_data->sem);
   1ac80:	6928      	ldr	r0, [r5, #16]
   1ac82:	3018      	adds	r0, #24
   1ac84:	f00c ffab 	bl	27bde <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1ac88:	2101      	movs	r1, #1
   1ac8a:	4628      	mov	r0, r5
   1ac8c:	f00c ffcb 	bl	27c26 <qspi_nor_write_protection_set>
   1ac90:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1ac92:	6928      	ldr	r0, [r5, #16]
   1ac94:	f00c ffa3 	bl	27bde <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1ac98:	2c00      	cmp	r4, #0
   1ac9a:	bf14      	ite	ne
   1ac9c:	4620      	movne	r0, r4
   1ac9e:	4630      	moveq	r0, r6
   1aca0:	f7ff fc78 	bl	1a594 <qspi_get_zephyr_ret_code>
   1aca4:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1aca6:	4628      	mov	r0, r5
   1aca8:	f7ff fd10 	bl	1a6cc <qspi_device_uninit>
	return rc;
   1acac:	e790      	b.n	1abd0 <qspi_nor_write+0x48>
			res = nrfx_qspi_write(src, size, addr);
   1acae:	463a      	mov	r2, r7
   1acb0:	4631      	mov	r1, r6
   1acb2:	4640      	mov	r0, r8
   1acb4:	e7ba      	b.n	1ac2c <qspi_nor_write+0xa4>
   1acb6:	bf00      	nop
   1acb8:	0002f497 	.word	0x0002f497
   1acbc:	0002a468 	.word	0x0002a468
   1acc0:	0bad0000 	.word	0x0bad0000

0001acc4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1acc4:	4b02      	ldr	r3, [pc, #8]	; (1acd0 <flash_nrf_pages_layout+0xc>)
   1acc6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1acc8:	2301      	movs	r3, #1
   1acca:	6013      	str	r3, [r2, #0]
}
   1accc:	4770      	bx	lr
   1acce:	bf00      	nop
   1acd0:	20021270 	.word	0x20021270

0001acd4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1acd4:	4800      	ldr	r0, [pc, #0]	; (1acd8 <flash_nrf_get_parameters+0x4>)
   1acd6:	4770      	bx	lr
   1acd8:	0002b114 	.word	0x0002b114

0001acdc <flash_nrf_read>:
{
   1acdc:	b570      	push	{r4, r5, r6, lr}
   1acde:	460c      	mov	r4, r1
   1ace0:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1ace2:	4619      	mov	r1, r3
   1ace4:	4620      	mov	r0, r4
{
   1ace6:	461d      	mov	r5, r3
   1ace8:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   1acea:	f00c ffcc 	bl	27c86 <is_regular_addr_valid>
   1acee:	4603      	mov	r3, r0
   1acf0:	b968      	cbnz	r0, 1ad0e <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1acf2:	4a0f      	ldr	r2, [pc, #60]	; (1ad30 <flash_nrf_read+0x54>)
   1acf4:	9000      	str	r0, [sp, #0]
   1acf6:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1acfa:	e9cd 4503 	strd	r4, r5, [sp, #12]
   1acfe:	2201      	movs	r2, #1
   1ad00:	490c      	ldr	r1, [pc, #48]	; (1ad34 <flash_nrf_read+0x58>)
   1ad02:	f00c ffd1 	bl	27ca8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1ad06:	f06f 0015 	mvn.w	r0, #21
}
   1ad0a:	b006      	add	sp, #24
   1ad0c:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1ad0e:	b165      	cbz	r5, 1ad2a <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
   1ad10:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1ad14:	462a      	mov	r2, r5
   1ad16:	4621      	mov	r1, r4
   1ad18:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   1ad1a:	da04      	bge.n	1ad26 <flash_nrf_read+0x4a>
}
   1ad1c:	b006      	add	sp, #24
   1ad1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   1ad22:	f009 be8b 	b.w	24a3c <soc_secure_mem_read>
   1ad26:	f00e fba4 	bl	29472 <memcpy>
		return 0;
   1ad2a:	2000      	movs	r0, #0
   1ad2c:	e7ed      	b.n	1ad0a <flash_nrf_read+0x2e>
   1ad2e:	bf00      	nop
   1ad30:	0002f4f7 	.word	0x0002f4f7
   1ad34:	0002a400 	.word	0x0002a400

0001ad38 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1ad38:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ad3a:	2201      	movs	r2, #1
   1ad3c:	4806      	ldr	r0, [pc, #24]	; (1ad58 <nrf_flash_init+0x20>)
   1ad3e:	4611      	mov	r1, r2
   1ad40:	f00e f9e3 	bl	2910a <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1ad44:	f00d fc14 	bl	28570 <nrfx_nvmc_flash_page_count_get>
   1ad48:	4c04      	ldr	r4, [pc, #16]	; (1ad5c <nrf_flash_init+0x24>)
   1ad4a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1ad4c:	f00d fc0d 	bl	2856a <nrfx_nvmc_flash_page_size_get>
   1ad50:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1ad52:	2000      	movs	r0, #0
   1ad54:	bd10      	pop	{r4, pc}
   1ad56:	bf00      	nop
   1ad58:	20021278 	.word	0x20021278
   1ad5c:	20021270 	.word	0x20021270

0001ad60 <flash_nrf_erase>:
{
   1ad60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad62:	b087      	sub	sp, #28
   1ad64:	460e      	mov	r6, r1
   1ad66:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ad68:	f00d fbff 	bl	2856a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1ad6c:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1ad6e:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1ad70:	4630      	mov	r0, r6
   1ad72:	f00c ff88 	bl	27c86 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1ad76:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   1ad78:	4603      	mov	r3, r0
   1ad7a:	b388      	cbz	r0, 1ade0 <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1ad7c:	fbb6 f3f5 	udiv	r3, r6, r5
   1ad80:	fb05 6313 	mls	r3, r5, r3, r6
   1ad84:	b923      	cbnz	r3, 1ad90 <flash_nrf_erase+0x30>
   1ad86:	fbb4 f3f5 	udiv	r3, r4, r5
   1ad8a:	fb05 4313 	mls	r3, r5, r3, r4
   1ad8e:	b173      	cbz	r3, 1adae <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1ad90:	4b18      	ldr	r3, [pc, #96]	; (1adf4 <flash_nrf_erase+0x94>)
   1ad92:	2201      	movs	r2, #1
   1ad94:	9302      	str	r3, [sp, #8]
   1ad96:	2300      	movs	r3, #0
   1ad98:	4618      	mov	r0, r3
   1ad9a:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1ad9e:	e9cd 3300 	strd	r3, r3, [sp]
   1ada2:	4915      	ldr	r1, [pc, #84]	; (1adf8 <flash_nrf_erase+0x98>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ada4:	f00c ff80 	bl	27ca8 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1ada8:	f06f 0015 	mvn.w	r0, #21
   1adac:	e002      	b.n	1adb4 <flash_nrf_erase+0x54>
		if (!n_pages) {
   1adae:	42a5      	cmp	r5, r4
   1adb0:	d902      	bls.n	1adb8 <flash_nrf_erase+0x58>
			return 0;
   1adb2:	2000      	movs	r0, #0
}
   1adb4:	b007      	add	sp, #28
   1adb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   1adb8:	f04f 32ff 	mov.w	r2, #4294967295
   1adbc:	f04f 33ff 	mov.w	r3, #4294967295
   1adc0:	480e      	ldr	r0, [pc, #56]	; (1adfc <flash_nrf_erase+0x9c>)
   1adc2:	f004 fecf 	bl	1fb64 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1adc6:	f00d fbd0 	bl	2856a <nrfx_nvmc_flash_page_size_get>
   1adca:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1adcc:	4638      	mov	r0, r7
   1adce:	f002 fad5 	bl	1d37c <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1add2:	1b64      	subs	r4, r4, r5
   1add4:	442f      	add	r7, r5
   1add6:	d1f9      	bne.n	1adcc <flash_nrf_erase+0x6c>
	z_impl_k_sem_give(sem);
   1add8:	4808      	ldr	r0, [pc, #32]	; (1adfc <flash_nrf_erase+0x9c>)
   1adda:	f004 fe7f 	bl	1fadc <z_impl_k_sem_give>
}
   1adde:	e7e8      	b.n	1adb2 <flash_nrf_erase+0x52>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ade0:	4a07      	ldr	r2, [pc, #28]	; (1ae00 <flash_nrf_erase+0xa0>)
   1ade2:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1ade6:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1adea:	4903      	ldr	r1, [pc, #12]	; (1adf8 <flash_nrf_erase+0x98>)
   1adec:	2201      	movs	r2, #1
   1adee:	9000      	str	r0, [sp, #0]
   1adf0:	e7d8      	b.n	1ada4 <flash_nrf_erase+0x44>
   1adf2:	bf00      	nop
   1adf4:	0002f514 	.word	0x0002f514
   1adf8:	0002a400 	.word	0x0002a400
   1adfc:	20021278 	.word	0x20021278
   1ae00:	0002f4f7 	.word	0x0002f4f7

0001ae04 <flash_nrf_write>:
{
   1ae04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae06:	460e      	mov	r6, r1
   1ae08:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   1ae0a:	4619      	mov	r1, r3
   1ae0c:	4630      	mov	r0, r6
{
   1ae0e:	461c      	mov	r4, r3
   1ae10:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
   1ae12:	f00c ff38 	bl	27c86 <is_regular_addr_valid>
   1ae16:	4603      	mov	r3, r0
   1ae18:	b968      	cbnz	r0, 1ae36 <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ae1a:	4a1d      	ldr	r2, [pc, #116]	; (1ae90 <flash_nrf_write+0x8c>)
   1ae1c:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1ae20:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1ae24:	2201      	movs	r2, #1
   1ae26:	491b      	ldr	r1, [pc, #108]	; (1ae94 <flash_nrf_write+0x90>)
   1ae28:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1ae2a:	f00c ff3d 	bl	27ca8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1ae2e:	f06f 0015 	mvn.w	r0, #21
}
   1ae32:	b007      	add	sp, #28
   1ae34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1ae36:	ea46 0504 	orr.w	r5, r6, r4
   1ae3a:	f015 0503 	ands.w	r5, r5, #3
   1ae3e:	d00a      	beq.n	1ae56 <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1ae40:	4b15      	ldr	r3, [pc, #84]	; (1ae98 <flash_nrf_write+0x94>)
   1ae42:	2201      	movs	r2, #1
   1ae44:	9302      	str	r3, [sp, #8]
   1ae46:	2300      	movs	r3, #0
   1ae48:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1ae4c:	4618      	mov	r0, r3
   1ae4e:	e9cd 3300 	strd	r3, r3, [sp]
   1ae52:	4910      	ldr	r1, [pc, #64]	; (1ae94 <flash_nrf_write+0x90>)
   1ae54:	e7e9      	b.n	1ae2a <flash_nrf_write+0x26>
	if (!len) {
   1ae56:	b1a4      	cbz	r4, 1ae82 <flash_nrf_write+0x7e>
	return z_impl_k_sem_take(sem, timeout);
   1ae58:	f04f 32ff 	mov.w	r2, #4294967295
   1ae5c:	f04f 33ff 	mov.w	r3, #4294967295
   1ae60:	480e      	ldr	r0, [pc, #56]	; (1ae9c <flash_nrf_write+0x98>)
   1ae62:	f004 fe7f 	bl	1fb64 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1ae66:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1ae6a:	42a5      	cmp	r5, r4
   1ae6c:	eb05 0006 	add.w	r0, r5, r6
   1ae70:	d109      	bne.n	1ae86 <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1ae72:	4a0b      	ldr	r2, [pc, #44]	; (1aea0 <flash_nrf_write+0x9c>)
   1ae74:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1ae78:	07db      	lsls	r3, r3, #31
   1ae7a:	d5fb      	bpl.n	1ae74 <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
   1ae7c:	4807      	ldr	r0, [pc, #28]	; (1ae9c <flash_nrf_write+0x98>)
   1ae7e:	f004 fe2d 	bl	1fadc <z_impl_k_sem_give>
	return ret;
   1ae82:	2000      	movs	r0, #0
   1ae84:	e7d5      	b.n	1ae32 <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1ae86:	5979      	ldr	r1, [r7, r5]
   1ae88:	f002 faaa 	bl	1d3e0 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1ae8c:	3504      	adds	r5, #4
}
   1ae8e:	e7ec      	b.n	1ae6a <flash_nrf_write+0x66>
   1ae90:	0002f4f7 	.word	0x0002f4f7
   1ae94:	0002a400 	.word	0x0002a400
   1ae98:	0002f533 	.word	0x0002f533
   1ae9c:	20021278 	.word	0x20021278
   1aea0:	40039000 	.word	0x40039000

0001aea4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1aea4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1aea6:	ab0b      	add	r3, sp, #44	; 0x2c
   1aea8:	9305      	str	r3, [sp, #20]
   1aeaa:	9303      	str	r3, [sp, #12]
   1aeac:	4b05      	ldr	r3, [pc, #20]	; (1aec4 <z_log_msg_runtime_create.constprop.0+0x20>)
   1aeae:	2201      	movs	r2, #1
   1aeb0:	9302      	str	r3, [sp, #8]
   1aeb2:	2300      	movs	r3, #0
   1aeb4:	4618      	mov	r0, r3
   1aeb6:	e9cd 3300 	strd	r3, r3, [sp]
   1aeba:	f7f3 f8a9 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   1aebe:	b007      	add	sp, #28
   1aec0:	f85d fb04 	ldr.w	pc, [sp], #4
   1aec4:	0002f572 	.word	0x0002f572

0001aec8 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1aec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1aeca:	461d      	mov	r5, r3
	return config->uarte_regs;
   1aecc:	6843      	ldr	r3, [r0, #4]
{
   1aece:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1aed0:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1aed2:	f8d3 c000 	ldr.w	ip, [r3]
   1aed6:	f04f 0320 	mov.w	r3, #32
   1aeda:	f3ef 8711 	mrs	r7, BASEPRI
   1aede:	f383 8812 	msr	BASEPRI_MAX, r3
   1aee2:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1aee6:	68e3      	ldr	r3, [r4, #12]
   1aee8:	68d8      	ldr	r0, [r3, #12]
   1aeea:	b138      	cbz	r0, 1aefc <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1aeec:	f387 8811 	msr	BASEPRI, r7
   1aef0:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1aef4:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1aef8:	b003      	add	sp, #12
   1aefa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1aefc:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1aefe:	68e3      	ldr	r3, [r4, #12]
   1af00:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1af02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1af06:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1af0a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1af0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1af12:	68e3      	ldr	r3, [r4, #12]
   1af14:	d111      	bne.n	1af3a <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1af16:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1af18:	68e3      	ldr	r3, [r4, #12]
   1af1a:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1af1c:	4621      	mov	r1, r4
   1af1e:	4630      	mov	r0, r6
   1af20:	f00d f87d 	bl	2801e <start_tx_locked>
   1af24:	f387 8811 	msr	BASEPRI, r7
   1af28:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1af2c:	7ae3      	ldrb	r3, [r4, #11]
   1af2e:	2b01      	cmp	r3, #1
   1af30:	d101      	bne.n	1af36 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1af32:	1c6b      	adds	r3, r5, #1
   1af34:	d106      	bne.n	1af44 <uarte_nrfx_tx+0x7c>
	return 0;
   1af36:	2000      	movs	r0, #0
   1af38:	e7de      	b.n	1aef8 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1af3a:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1af3c:	4620      	mov	r0, r4
   1af3e:	f00c ffe7 	bl	27f10 <setup_tx_cache>
   1af42:	e7eb      	b.n	1af1c <uarte_nrfx_tx+0x54>
   1af44:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1af48:	2100      	movs	r1, #0
   1af4a:	480a      	ldr	r0, [pc, #40]	; (1af74 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1af4c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1af50:	2300      	movs	r3, #0
   1af52:	fbc5 0106 	smlal	r0, r1, r5, r6
   1af56:	4a08      	ldr	r2, [pc, #32]	; (1af78 <uarte_nrfx_tx+0xb0>)
   1af58:	f7ed ffca 	bl	8ef0 <__aeabi_uldivmod>
   1af5c:	68e4      	ldr	r4, [r4, #12]
   1af5e:	4602      	mov	r2, r0
   1af60:	460b      	mov	r3, r1
   1af62:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1af64:	2000      	movs	r0, #0
   1af66:	2100      	movs	r1, #0
   1af68:	e9cd 0100 	strd	r0, r1, [sp]
   1af6c:	4620      	mov	r0, r4
   1af6e:	f007 f9c7 	bl	22300 <z_impl_k_timer_start>
   1af72:	e7e0      	b.n	1af36 <uarte_nrfx_tx+0x6e>
   1af74:	000f423f 	.word	0x000f423f
   1af78:	000f4240 	.word	0x000f4240

0001af7c <uarte_nrfx_configure>:
{
   1af7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1af7e:	794b      	ldrb	r3, [r1, #5]
   1af80:	2b01      	cmp	r3, #1
   1af82:	d029      	beq.n	1afd8 <uarte_nrfx_configure+0x5c>
   1af84:	2b03      	cmp	r3, #3
   1af86:	d124      	bne.n	1afd2 <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1af88:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1af8a:	798b      	ldrb	r3, [r1, #6]
   1af8c:	2b03      	cmp	r3, #3
   1af8e:	d120      	bne.n	1afd2 <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1af90:	79ce      	ldrb	r6, [r1, #7]
   1af92:	b10e      	cbz	r6, 1af98 <uarte_nrfx_configure+0x1c>
   1af94:	2e01      	cmp	r6, #1
   1af96:	d11c      	bne.n	1afd2 <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1af98:	790a      	ldrb	r2, [r1, #4]
   1af9a:	2a01      	cmp	r2, #1
   1af9c:	d01e      	beq.n	1afdc <uarte_nrfx_configure+0x60>
   1af9e:	2a02      	cmp	r2, #2
   1afa0:	d020      	beq.n	1afe4 <uarte_nrfx_configure+0x68>
   1afa2:	b9b2      	cbnz	r2, 1afd2 <uarte_nrfx_configure+0x56>
   1afa4:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1afa6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1afa8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1afaa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1afae:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1afb2:	d06e      	beq.n	1b092 <uarte_nrfx_configure+0x116>
   1afb4:	d833      	bhi.n	1b01e <uarte_nrfx_configure+0xa2>
   1afb6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1afba:	d06d      	beq.n	1b098 <uarte_nrfx_configure+0x11c>
   1afbc:	d81c      	bhi.n	1aff8 <uarte_nrfx_configure+0x7c>
   1afbe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1afc2:	d06b      	beq.n	1b09c <uarte_nrfx_configure+0x120>
   1afc4:	d810      	bhi.n	1afe8 <uarte_nrfx_configure+0x6c>
   1afc6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1afca:	d06a      	beq.n	1b0a2 <uarte_nrfx_configure+0x126>
   1afcc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1afd0:	d06a      	beq.n	1b0a8 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1afd2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1afd6:	e05b      	b.n	1b090 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1afd8:	2700      	movs	r7, #0
   1afda:	e7d6      	b.n	1af8a <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1afdc:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1afe0:	220e      	movs	r2, #14
   1afe2:	e7e0      	b.n	1afa6 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1afe4:	2400      	movs	r4, #0
   1afe6:	e7fb      	b.n	1afe0 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1afe8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1afec:	d05f      	beq.n	1b0ae <uarte_nrfx_configure+0x132>
   1afee:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1aff2:	d1ee      	bne.n	1afd2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1aff4:	4b38      	ldr	r3, [pc, #224]	; (1b0d8 <uarte_nrfx_configure+0x15c>)
   1aff6:	e03c      	b.n	1b072 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1aff8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1affc:	d05a      	beq.n	1b0b4 <uarte_nrfx_configure+0x138>
   1affe:	d807      	bhi.n	1b010 <uarte_nrfx_configure+0x94>
   1b000:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1b004:	d058      	beq.n	1b0b8 <uarte_nrfx_configure+0x13c>
   1b006:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1b00a:	d1e2      	bne.n	1afd2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1b00c:	4b33      	ldr	r3, [pc, #204]	; (1b0dc <uarte_nrfx_configure+0x160>)
   1b00e:	e030      	b.n	1b072 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b010:	f647 2512 	movw	r5, #31250	; 0x7a12
   1b014:	42ab      	cmp	r3, r5
   1b016:	d1dc      	bne.n	1afd2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1b018:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1b01c:	e029      	b.n	1b072 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b01e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1b022:	d04b      	beq.n	1b0bc <uarte_nrfx_configure+0x140>
   1b024:	d813      	bhi.n	1b04e <uarte_nrfx_configure+0xd2>
   1b026:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1b02a:	d04a      	beq.n	1b0c2 <uarte_nrfx_configure+0x146>
   1b02c:	d809      	bhi.n	1b042 <uarte_nrfx_configure+0xc6>
   1b02e:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1b032:	42ab      	cmp	r3, r5
   1b034:	d047      	beq.n	1b0c6 <uarte_nrfx_configure+0x14a>
   1b036:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1b03a:	d1ca      	bne.n	1afd2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1b03c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1b040:	e017      	b.n	1b072 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b042:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1b046:	d1c4      	bne.n	1afd2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1b048:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1b04c:	e011      	b.n	1b072 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b04e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1b052:	d03b      	beq.n	1b0cc <uarte_nrfx_configure+0x150>
   1b054:	d808      	bhi.n	1b068 <uarte_nrfx_configure+0xec>
   1b056:	4d22      	ldr	r5, [pc, #136]	; (1b0e0 <uarte_nrfx_configure+0x164>)
   1b058:	42ab      	cmp	r3, r5
   1b05a:	d03a      	beq.n	1b0d2 <uarte_nrfx_configure+0x156>
   1b05c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1b060:	d1b7      	bne.n	1afd2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1b062:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1b066:	e004      	b.n	1b072 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b068:	4d1e      	ldr	r5, [pc, #120]	; (1b0e4 <uarte_nrfx_configure+0x168>)
   1b06a:	42ab      	cmp	r3, r5
   1b06c:	d1b1      	bne.n	1afd2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1b06e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1b072:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1b074:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1b078:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1b07a:	433a      	orrs	r2, r7
   1b07c:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1b07e:	4334      	orrs	r4, r6
   1b080:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1b082:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1b086:	1d2b      	adds	r3, r5, #4
   1b088:	c903      	ldmia	r1, {r0, r1}
   1b08a:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1b08e:	2000      	movs	r0, #0
}
   1b090:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1b092:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1b096:	e7ec      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1b098:	4b13      	ldr	r3, [pc, #76]	; (1b0e8 <uarte_nrfx_configure+0x16c>)
   1b09a:	e7ea      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1b09c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1b0a0:	e7e7      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1b0a2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1b0a6:	e7e4      	b.n	1b072 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1b0a8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1b0ac:	e7e1      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1b0ae:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1b0b2:	e7de      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1b0b4:	4b0d      	ldr	r3, [pc, #52]	; (1b0ec <uarte_nrfx_configure+0x170>)
   1b0b6:	e7dc      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1b0b8:	4b0d      	ldr	r3, [pc, #52]	; (1b0f0 <uarte_nrfx_configure+0x174>)
   1b0ba:	e7da      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1b0bc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1b0c0:	e7d7      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1b0c2:	4b0c      	ldr	r3, [pc, #48]	; (1b0f4 <uarte_nrfx_configure+0x178>)
   1b0c4:	e7d5      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1b0c6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1b0ca:	e7d2      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1b0cc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b0d0:	e7cf      	b.n	1b072 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1b0d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1b0d6:	e7cc      	b.n	1b072 <uarte_nrfx_configure+0xf6>
   1b0d8:	0013b000 	.word	0x0013b000
   1b0dc:	004ea000 	.word	0x004ea000
   1b0e0:	0003d090 	.word	0x0003d090
   1b0e4:	000f4240 	.word	0x000f4240
   1b0e8:	00275000 	.word	0x00275000
   1b0ec:	0075c000 	.word	0x0075c000
   1b0f0:	003af000 	.word	0x003af000
   1b0f4:	013a9000 	.word	0x013a9000

0001b0f8 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b0f8:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1b0fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1b0fe:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1b102:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1b104:	f8d9 5000 	ldr.w	r5, [r9]
static int uarte_instance_init(const struct device *dev,
   1b108:	b087      	sub	sp, #28
   1b10a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1b10e:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1b110:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1b114:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1b116:	aa05      	add	r2, sp, #20
   1b118:	4640      	mov	r0, r8
   1b11a:	f00d f85c 	bl	281d6 <pinctrl_lookup_state>
	if (ret < 0) {
   1b11e:	1e04      	subs	r4, r0, #0
   1b120:	db25      	blt.n	1b16e <uarte_instance_init.constprop.0+0x76>
	return pinctrl_apply_state_direct(config, state);
   1b122:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1b124:	f8d8 2000 	ldr.w	r2, [r8]
   1b128:	7919      	ldrb	r1, [r3, #4]
   1b12a:	6818      	ldr	r0, [r3, #0]
   1b12c:	f00d f866 	bl	281fc <pinctrl_configure_pins>
	if (err < 0) {
   1b130:	1e04      	subs	r4, r0, #0
   1b132:	db1c      	blt.n	1b16e <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1b134:	4638      	mov	r0, r7
   1b136:	1d31      	adds	r1, r6, #4
   1b138:	f7ff ff20 	bl	1af7c <uarte_nrfx_configure>
	if (err) {
   1b13c:	4604      	mov	r4, r0
   1b13e:	b9b0      	cbnz	r0, 1b16e <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1b140:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1b144:	0799      	lsls	r1, r3, #30
   1b146:	d532      	bpl.n	1b1ae <uarte_instance_init.constprop.0+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1b148:	f106 001c 	add.w	r0, r6, #28
   1b14c:	f001 fc3c 	bl	1c9c8 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1b150:	4b4f      	ldr	r3, [pc, #316]	; (1b290 <uarte_instance_init.constprop.0+0x198>)
   1b152:	4298      	cmp	r0, r3
   1b154:	d00f      	beq.n	1b176 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
   1b156:	4b4f      	ldr	r3, [pc, #316]	; (1b294 <uarte_instance_init.constprop.0+0x19c>)
   1b158:	4620      	mov	r0, r4
   1b15a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b15e:	9400      	str	r4, [sp, #0]
   1b160:	4623      	mov	r3, r4
   1b162:	2201      	movs	r2, #1
   1b164:	494c      	ldr	r1, [pc, #304]	; (1b298 <uarte_instance_init.constprop.0+0x1a0>)
   1b166:	f7ff fe9d 	bl	1aea4 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1b16a:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1b16e:	4620      	mov	r0, r4
   1b170:	b007      	add	sp, #28
   1b172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b176:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1b178:	f115 0f0c 	cmn.w	r5, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1b17c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b180:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1b184:	d10b      	bne.n	1b19e <uarte_instance_init.constprop.0+0xa6>
   1b186:	4945      	ldr	r1, [pc, #276]	; (1b29c <uarte_instance_init.constprop.0+0x1a4>)
   1b188:	4845      	ldr	r0, [pc, #276]	; (1b2a0 <uarte_instance_init.constprop.0+0x1a8>)
   1b18a:	f240 234e 	movw	r3, #590	; 0x24e
   1b18e:	4a45      	ldr	r2, [pc, #276]	; (1b2a4 <uarte_instance_init.constprop.0+0x1ac>)
   1b190:	f009 fc09 	bl	249a6 <assert_print>
   1b194:	f240 214e 	movw	r1, #590	; 0x24e
   1b198:	4842      	ldr	r0, [pc, #264]	; (1b2a4 <uarte_instance_init.constprop.0+0x1ac>)
   1b19a:	f009 fbfd 	bl	24998 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1b19e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1b1a2:	2301      	movs	r3, #1
   1b1a4:	7f32      	ldrb	r2, [r6, #28]
   1b1a6:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1b1a8:	4a3f      	ldr	r2, [pc, #252]	; (1b2a8 <uarte_instance_init.constprop.0+0x1b0>)
   1b1aa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1b1ae:	68f3      	ldr	r3, [r6, #12]
   1b1b0:	2b00      	cmp	r3, #0
   1b1b2:	d059      	beq.n	1b268 <uarte_instance_init.constprop.0+0x170>
    p_reg->INTENSET = mask;
   1b1b4:	2204      	movs	r2, #4
	return config->uarte_regs;
   1b1b6:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1b1b8:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1b1bc:	681b      	ldr	r3, [r3, #0]
   1b1be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1b1c2:	2201      	movs	r2, #1
   1b1c4:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1b1c8:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1b1cc:	4937      	ldr	r1, [pc, #220]	; (1b2ac <uarte_instance_init.constprop.0+0x1b4>)
   1b1ce:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b1d2:	2108      	movs	r1, #8
   1b1d4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b1d8:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1b1dc:	b1a1      	cbz	r1, 1b208 <uarte_instance_init.constprop.0+0x110>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b1de:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b1e0:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1b1e4:	b91a      	cbnz	r2, 1b1ee <uarte_instance_init.constprop.0+0xf6>
   1b1e6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1b1ea:	2a00      	cmp	r2, #0
   1b1ec:	d0f8      	beq.n	1b1e0 <uarte_instance_init.constprop.0+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b1ee:	2200      	movs	r2, #0
   1b1f0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1b1f4:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1b1f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1b1fc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1b200:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1b204:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1b208:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1b20c:	2200      	movs	r2, #0
   1b20e:	4928      	ldr	r1, [pc, #160]	; (1b2b0 <uarte_instance_init.constprop.0+0x1b8>)
   1b210:	3080      	adds	r0, #128	; 0x80
   1b212:	f00e f84b 	bl	292ac <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1b216:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1b21a:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1b21e:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1b222:	2200      	movs	r2, #0
   1b224:	4923      	ldr	r1, [pc, #140]	; (1b2b4 <uarte_instance_init.constprop.0+0x1bc>)
   1b226:	3020      	adds	r0, #32
   1b228:	f00e f840 	bl	292ac <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1b22c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1b230:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1b234:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b238:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1b23a:	bf5c      	itt	pl
   1b23c:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1b240:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b244:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b248:	06db      	lsls	r3, r3, #27
   1b24a:	bf44      	itt	mi
   1b24c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1b250:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b254:	6973      	ldr	r3, [r6, #20]
   1b256:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b25a:	2300      	movs	r3, #0
   1b25c:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b260:	2301      	movs	r3, #1
   1b262:	60ab      	str	r3, [r5, #8]
   1b264:	60eb      	str	r3, [r5, #12]
	return 0;
   1b266:	e782      	b.n	1b16e <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b268:	2308      	movs	r3, #8
   1b26a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1b26e:	f899 3008 	ldrb.w	r3, [r9, #8]
   1b272:	2b00      	cmp	r3, #0
   1b274:	d1de      	bne.n	1b234 <uarte_instance_init.constprop.0+0x13c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b276:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1b27a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b27e:	69b3      	ldr	r3, [r6, #24]
   1b280:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b284:	2301      	movs	r3, #1
   1b286:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b28a:	602b      	str	r3, [r5, #0]
}
   1b28c:	e7d2      	b.n	1b234 <uarte_instance_init.constprop.0+0x13c>
   1b28e:	bf00      	nop
   1b290:	0bad0000 	.word	0x0bad0000
   1b294:	0002f572 	.word	0x0002f572
   1b298:	0002a488 	.word	0x0002a488
   1b29c:	0002c194 	.word	0x0002c194
   1b2a0:	0002b339 	.word	0x0002b339
   1b2a4:	0002c15c 	.word	0x0002c15c
   1b2a8:	40017000 	.word	0x40017000
   1b2ac:	000a0210 	.word	0x000a0210
   1b2b0:	00028091 	.word	0x00028091
   1b2b4:	00028161 	.word	0x00028161

0001b2b8 <uarte_nrfx_poll_out>:
{
   1b2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b2bc:	4604      	mov	r4, r0
   1b2be:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1b2c0:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b2c2:	f00d fed1 	bl	29068 <k_is_in_isr>
   1b2c6:	b9b0      	cbnz	r0, 1b2f6 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1b2c8:	4b2a      	ldr	r3, [pc, #168]	; (1b374 <uarte_nrfx_poll_out+0xbc>)
   1b2ca:	781b      	ldrb	r3, [r3, #0]
   1b2cc:	b19b      	cbz	r3, 1b2f6 <uarte_nrfx_poll_out+0x3e>
{
   1b2ce:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1b2d0:	6860      	ldr	r0, [r4, #4]
   1b2d2:	f00c fe94 	bl	27ffe <is_tx_ready.isra.0>
   1b2d6:	2800      	cmp	r0, #0
   1b2d8:	d138      	bne.n	1b34c <uarte_nrfx_poll_out+0x94>
   1b2da:	2001      	movs	r0, #1
   1b2dc:	f00d f8c8 	bl	28470 <nrfx_busy_wait>
   1b2e0:	3f01      	subs	r7, #1
   1b2e2:	d1f5      	bne.n	1b2d0 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1b2e4:	2100      	movs	r1, #0
   1b2e6:	2021      	movs	r0, #33	; 0x21
   1b2e8:	f006 faec 	bl	218c4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b2ec:	e7ef      	b.n	1b2ce <uarte_nrfx_poll_out+0x16>
   1b2ee:	f381 8811 	msr	BASEPRI, r1
   1b2f2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b2f6:	f04f 0320 	mov.w	r3, #32
   1b2fa:	f3ef 8111 	mrs	r1, BASEPRI
   1b2fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1b302:	f3bf 8f6f 	isb	sy
   1b306:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1b30a:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1b30c:	4640      	mov	r0, r8
   1b30e:	f00c fe76 	bl	27ffe <is_tx_ready.isra.0>
   1b312:	2800      	cmp	r0, #0
   1b314:	d0eb      	beq.n	1b2ee <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1b316:	68eb      	ldr	r3, [r5, #12]
   1b318:	b15b      	cbz	r3, 1b332 <uarte_nrfx_poll_out+0x7a>
   1b31a:	68da      	ldr	r2, [r3, #12]
   1b31c:	b14a      	cbz	r2, 1b332 <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1b31e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1b322:	2a00      	cmp	r2, #0
   1b324:	da05      	bge.n	1b332 <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1b326:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1b32a:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1b32e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1b332:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1b334:	2201      	movs	r2, #1
	*data->char_out = c;
   1b336:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1b338:	4620      	mov	r0, r4
   1b33a:	6969      	ldr	r1, [r5, #20]
   1b33c:	f00c fd08 	bl	27d50 <tx_start>
	__asm__ volatile(
   1b340:	f387 8811 	msr	BASEPRI, r7
   1b344:	f3bf 8f6f 	isb	sy
}
   1b348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1b34c:	f04f 0320 	mov.w	r3, #32
   1b350:	f3ef 8111 	mrs	r1, BASEPRI
   1b354:	f383 8812 	msr	BASEPRI_MAX, r3
   1b358:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1b35c:	6860      	ldr	r0, [r4, #4]
   1b35e:	460f      	mov	r7, r1
   1b360:	f00c fe4d 	bl	27ffe <is_tx_ready.isra.0>
   1b364:	2800      	cmp	r0, #0
   1b366:	d1e4      	bne.n	1b332 <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1b368:	f381 8811 	msr	BASEPRI, r1
   1b36c:	f3bf 8f6f 	isb	sy
}
   1b370:	e7b8      	b.n	1b2e4 <uarte_nrfx_poll_out+0x2c>
   1b372:	bf00      	nop
   1b374:	200221ee 	.word	0x200221ee

0001b378 <uarte_nrfx_rx_enable>:
{
   1b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1b37c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1b380:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1b382:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1b386:	4605      	mov	r5, r0
   1b388:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1b38a:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1b38c:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1b390:	b172      	cbz	r2, 1b3b0 <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1b392:	4944      	ldr	r1, [pc, #272]	; (1b4a4 <uarte_nrfx_rx_enable+0x12c>)
   1b394:	f240 337d 	movw	r3, #893	; 0x37d
   1b398:	4a43      	ldr	r2, [pc, #268]	; (1b4a8 <uarte_nrfx_rx_enable+0x130>)
   1b39a:	4844      	ldr	r0, [pc, #272]	; (1b4ac <uarte_nrfx_rx_enable+0x134>)
   1b39c:	f009 fb03 	bl	249a6 <assert_print>
   1b3a0:	4843      	ldr	r0, [pc, #268]	; (1b4b0 <uarte_nrfx_rx_enable+0x138>)
   1b3a2:	f009 fb00 	bl	249a6 <assert_print>
   1b3a6:	f240 317d 	movw	r1, #893	; 0x37d
   1b3aa:	483f      	ldr	r0, [pc, #252]	; (1b4a8 <uarte_nrfx_rx_enable+0x130>)
   1b3ac:	f009 faf4 	bl	24998 <assert_post_action>
	if (data->async->rx_enabled) {
   1b3b0:	68e2      	ldr	r2, [r4, #12]
   1b3b2:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1b3b6:	2900      	cmp	r1, #0
   1b3b8:	d170      	bne.n	1b49c <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1b3ba:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1b3be:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1b3c0:	bfca      	itet	gt
   1b3c2:	2205      	movgt	r2, #5
   1b3c4:	235c      	movle	r3, #92	; 0x5c
   1b3c6:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1b3ca:	68e2      	ldr	r2, [r4, #12]
   1b3cc:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1b3ce:	68e3      	ldr	r3, [r4, #12]
   1b3d0:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1b3d4:	68e3      	ldr	r3, [r4, #12]
   1b3d6:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1b3d8:	2300      	movs	r3, #0
   1b3da:	68e2      	ldr	r2, [r4, #12]
   1b3dc:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1b3de:	68e2      	ldr	r2, [r4, #12]
   1b3e0:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1b3e2:	68e2      	ldr	r2, [r4, #12]
   1b3e4:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b3e6:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b3ea:	06da      	lsls	r2, r3, #27
   1b3ec:	d523      	bpl.n	1b436 <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1b3ee:	68e1      	ldr	r1, [r4, #12]
   1b3f0:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1b3f4:	b1fe      	cbz	r6, 1b436 <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1b3f6:	42be      	cmp	r6, r7
   1b3f8:	bf28      	it	cs
   1b3fa:	463e      	movcs	r6, r7
   1b3fc:	4640      	mov	r0, r8
   1b3fe:	4632      	mov	r2, r6
   1b400:	31c4      	adds	r1, #196	; 0xc4
   1b402:	f00e f836 	bl	29472 <memcpy>
			if (!len) {
   1b406:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1b408:	44b0      	add	r8, r6
			if (!len) {
   1b40a:	d114      	bne.n	1b436 <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1b40c:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1b40e:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1b410:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1b414:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1b416:	1b9b      	subs	r3, r3, r6
   1b418:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1b41c:	f00c fcc7 	bl	27dae <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1b420:	68e1      	ldr	r1, [r4, #12]
   1b422:	4628      	mov	r0, r5
   1b424:	3158      	adds	r1, #88	; 0x58
   1b426:	f00c fcdb 	bl	27de0 <rx_buf_release>
				notify_rx_disable(dev);
   1b42a:	4628      	mov	r0, r5
   1b42c:	f00c fcf0 	bl	27e10 <notify_rx_disable>
	return 0;
   1b430:	2000      	movs	r0, #0
}
   1b432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b436:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b438:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b43c:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b440:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1b444:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1b448:	2201      	movs	r2, #1
   1b44a:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1b44e:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1b452:	68e3      	ldr	r3, [r4, #12]
   1b454:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b458:	f8da 3004 	ldr.w	r3, [sl, #4]
   1b45c:	06db      	lsls	r3, r3, #27
   1b45e:	d519      	bpl.n	1b494 <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1b460:	f04f 0320 	mov.w	r3, #32
   1b464:	f3ef 8111 	mrs	r1, BASEPRI
   1b468:	f383 8812 	msr	BASEPRI_MAX, r3
   1b46c:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1b470:	692b      	ldr	r3, [r5, #16]
   1b472:	68db      	ldr	r3, [r3, #12]
   1b474:	b12b      	cbz	r3, 1b482 <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1b476:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1b47a:	f042 0202 	orr.w	r2, r2, #2
   1b47e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b482:	2208      	movs	r2, #8
	return config->uarte_regs;
   1b484:	686b      	ldr	r3, [r5, #4]
   1b486:	681b      	ldr	r3, [r3, #0]
   1b488:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1b48c:	f381 8811 	msr	BASEPRI, r1
   1b490:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b494:	2301      	movs	r3, #1
   1b496:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1b49a:	e7c9      	b.n	1b430 <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1b49c:	f06f 000f 	mvn.w	r0, #15
   1b4a0:	e7c7      	b.n	1b432 <uarte_nrfx_rx_enable+0xba>
   1b4a2:	bf00      	nop
   1b4a4:	00030a97 	.word	0x00030a97
   1b4a8:	0002f591 	.word	0x0002f591
   1b4ac:	0002b339 	.word	0x0002b339
   1b4b0:	0002f5c5 	.word	0x0002f5c5

0001b4b4 <uarte_nrfx_isr_async>:
{
   1b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1b4b8:	6843      	ldr	r3, [r0, #4]
{
   1b4ba:	4604      	mov	r4, r0
	return config->uarte_regs;
   1b4bc:	681d      	ldr	r5, [r3, #0]
{
   1b4be:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b4c0:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1b4c4:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1b4c6:	b169      	cbz	r1, 1b4e4 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b4c8:	2200      	movs	r2, #0
   1b4ca:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1b4ce:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1b4d2:	68da      	ldr	r2, [r3, #12]
   1b4d4:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1b4d8:	3301      	adds	r3, #1
   1b4da:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1b4de:	b008      	add	sp, #32
   1b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b4e4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1b4e8:	b323      	cbz	r3, 1b534 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b4ea:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1b4ee:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1b4f2:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1b4f4:	2214      	movs	r2, #20
	return config->uarte_regs;
   1b4f6:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1b4f8:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b4fa:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1b4fe:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1b502:	f00d fff0 	bl	294e6 <memset>
   1b506:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1b508:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1b50a:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1b50e:	f100 8103 	bmi.w	1b718 <uarte_nrfx_isr_async+0x264>
   1b512:	07b3      	lsls	r3, r6, #30
   1b514:	f100 8102 	bmi.w	1b71c <uarte_nrfx_isr_async+0x268>
   1b518:	0777      	lsls	r7, r6, #29
   1b51a:	f100 8101 	bmi.w	1b720 <uarte_nrfx_isr_async+0x26c>
   1b51e:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1b522:	4620      	mov	r0, r4
   1b524:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1b526:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1b52a:	f00c fc39 	bl	27da0 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1b52e:	4620      	mov	r0, r4
   1b530:	f00c fccc 	bl	27ecc <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b534:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1b538:	b38b      	cbz	r3, 1b59e <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1b53a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1b53e:	06d8      	lsls	r0, r3, #27
   1b540:	d52d      	bpl.n	1b59e <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b542:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1b546:	2201      	movs	r2, #1
   1b548:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1b54c:	6926      	ldr	r6, [r4, #16]
   1b54e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1b552:	6863      	ldr	r3, [r4, #4]
   1b554:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1b556:	68f3      	ldr	r3, [r6, #12]
   1b558:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1b55c:	68f0      	ldr	r0, [r6, #12]
   1b55e:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1b560:	f00d feb0 	bl	292c4 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1b564:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1b566:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1b56a:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1b56e:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1b572:	68f2      	ldr	r2, [r6, #12]
   1b574:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1b576:	1a1b      	subs	r3, r3, r0
   1b578:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1b57a:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1b57c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1b580:	4408      	add	r0, r1
	if (rx_len > 0) {
   1b582:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1b584:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1b586:	dd02      	ble.n	1b58e <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1b588:	4620      	mov	r0, r4
   1b58a:	f00c fc10 	bl	27dae <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1b58e:	68f1      	ldr	r1, [r6, #12]
   1b590:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1b594:	2b00      	cmp	r3, #0
   1b596:	f040 80c5 	bne.w	1b724 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1b59a:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b59e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1b5a2:	b383      	cbz	r3, 1b606 <uarte_nrfx_isr_async+0x152>
   1b5a4:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1b5a8:	bb6e      	cbnz	r6, 1b606 <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1b5aa:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b5ac:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1b5b0:	4631      	mov	r1, r6
   1b5b2:	a803      	add	r0, sp, #12
   1b5b4:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1b5b8:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1b5ba:	f00d ff94 	bl	294e6 <memset>
   1b5be:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1b5c0:	a903      	add	r1, sp, #12
   1b5c2:	4620      	mov	r0, r4
	struct uart_event evt = {
   1b5c4:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1b5c8:	f00c fbea 	bl	27da0 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1b5cc:	68fb      	ldr	r3, [r7, #12]
   1b5ce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1b5d0:	1c51      	adds	r1, r2, #1
   1b5d2:	d018      	beq.n	1b606 <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1b5d4:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1b5d6:	68ff      	ldr	r7, [r7, #12]
   1b5d8:	498e      	ldr	r1, [pc, #568]	; (1b814 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1b5da:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1b5dc:	468e      	mov	lr, r1
   1b5de:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1b5e2:	4631      	mov	r1, r6
   1b5e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1b5e8:	fbcc e100 	smlal	lr, r1, ip, r0
   1b5ec:	2300      	movs	r3, #0
   1b5ee:	4670      	mov	r0, lr
   1b5f0:	4a89      	ldr	r2, [pc, #548]	; (1b818 <uarte_nrfx_isr_async+0x364>)
   1b5f2:	f7ed fc7d 	bl	8ef0 <__aeabi_uldivmod>
   1b5f6:	4602      	mov	r2, r0
   1b5f8:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1b5fa:	e9cd 0100 	strd	r0, r1, [sp]
   1b5fe:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1b602:	f006 fe7d 	bl	22300 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b606:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1b60a:	b333      	cbz	r3, 1b65a <uarte_nrfx_isr_async+0x1a6>
   1b60c:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1b610:	bb1e      	cbnz	r6, 1b65a <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b612:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1b616:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1b618:	4620      	mov	r0, r4
   1b61a:	68f9      	ldr	r1, [r7, #12]
   1b61c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1b620:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1b622:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1b626:	f00c fbdb 	bl	27de0 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1b62a:	68f9      	ldr	r1, [r7, #12]
   1b62c:	4620      	mov	r0, r4
   1b62e:	3164      	adds	r1, #100	; 0x64
   1b630:	f00c fbd6 	bl	27de0 <rx_buf_release>
	if (data->async->rx_enabled) {
   1b634:	68fb      	ldr	r3, [r7, #12]
   1b636:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1b63a:	2a00      	cmp	r2, #0
   1b63c:	f000 80a3 	beq.w	1b786 <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1b640:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b644:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b648:	06d8      	lsls	r0, r3, #27
   1b64a:	d503      	bpl.n	1b654 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1b64c:	2102      	movs	r1, #2
   1b64e:	4620      	mov	r0, r4
   1b650:	f00c fcab 	bl	27faa <async_uart_release>
	notify_rx_disable(dev);
   1b654:	4620      	mov	r0, r4
   1b656:	f00c fbdb 	bl	27e10 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b65a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1b65e:	b1db      	cbz	r3, 1b698 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1b660:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1b664:	05d9      	lsls	r1, r3, #23
   1b666:	d517      	bpl.n	1b698 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1b668:	6863      	ldr	r3, [r4, #4]
   1b66a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1b66c:	f04f 0120 	mov.w	r1, #32
   1b670:	f3ef 8211 	mrs	r2, BASEPRI
   1b674:	f381 8812 	msr	BASEPRI_MAX, r1
   1b678:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b67c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1b680:	b131      	cbz	r1, 1b690 <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b682:	2100      	movs	r1, #0
   1b684:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1b688:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b68c:	2101      	movs	r1, #1
   1b68e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1b690:	f382 8811 	msr	BASEPRI, r2
   1b694:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b698:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1b69c:	2b00      	cmp	r3, #0
   1b69e:	f43f af1e 	beq.w	1b4de <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1b6a2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1b6a6:	025a      	lsls	r2, r3, #9
   1b6a8:	f57f af19 	bpl.w	1b4de <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1b6ac:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1b6ae:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b6b0:	e9d3 7300 	ldrd	r7, r3, [r3]
   1b6b4:	06db      	lsls	r3, r3, #27
   1b6b6:	d46b      	bmi.n	1b790 <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1b6b8:	68eb      	ldr	r3, [r5, #12]
   1b6ba:	689b      	ldr	r3, [r3, #8]
   1b6bc:	2b00      	cmp	r3, #0
   1b6be:	f43f af0e 	beq.w	1b4de <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1b6c2:	f04f 0320 	mov.w	r3, #32
   1b6c6:	f3ef 8211 	mrs	r2, BASEPRI
   1b6ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1b6ce:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1b6d2:	68eb      	ldr	r3, [r5, #12]
   1b6d4:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1b6d8:	2900      	cmp	r1, #0
   1b6da:	bfac      	ite	ge
   1b6dc:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1b6e0:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1b6e4:	f382 8811 	msr	BASEPRI, r2
   1b6e8:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1b6ec:	68eb      	ldr	r3, [r5, #12]
   1b6ee:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1b6f2:	2a00      	cmp	r2, #0
   1b6f4:	d059      	beq.n	1b7aa <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1b6f6:	f04f 0320 	mov.w	r3, #32
   1b6fa:	f3ef 8611 	mrs	r6, BASEPRI
   1b6fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1b702:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1b706:	4629      	mov	r1, r5
   1b708:	4620      	mov	r0, r4
   1b70a:	f00c fc88 	bl	2801e <start_tx_locked>
	__asm__ volatile(
   1b70e:	f386 8811 	msr	BASEPRI, r6
   1b712:	f3bf 8f6f 	isb	sy
				return;
   1b716:	e6e2      	b.n	1b4de <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1b718:	2601      	movs	r6, #1
   1b71a:	e702      	b.n	1b522 <uarte_nrfx_isr_async+0x6e>
   1b71c:	2602      	movs	r6, #2
   1b71e:	e700      	b.n	1b522 <uarte_nrfx_isr_async+0x6e>
   1b720:	2604      	movs	r6, #4
   1b722:	e6fe      	b.n	1b522 <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1b724:	4620      	mov	r0, r4
   1b726:	3158      	adds	r1, #88	; 0x58
   1b728:	f00c fb5a 	bl	27de0 <rx_buf_release>
	__asm__ volatile(
   1b72c:	f04f 0320 	mov.w	r3, #32
   1b730:	f3ef 8111 	mrs	r1, BASEPRI
   1b734:	f383 8812 	msr	BASEPRI_MAX, r3
   1b738:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1b73c:	68f3      	ldr	r3, [r6, #12]
   1b73e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1b740:	b1f2      	cbz	r2, 1b780 <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1b742:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1b744:	68f3      	ldr	r3, [r6, #12]
   1b746:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1b748:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1b74a:	2300      	movs	r3, #0
   1b74c:	68f2      	ldr	r2, [r6, #12]
   1b74e:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1b750:	68f2      	ldr	r2, [r6, #12]
   1b752:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1b754:	68f2      	ldr	r2, [r6, #12]
   1b756:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b758:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1b75c:	b90b      	cbnz	r3, 1b762 <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b75e:	2301      	movs	r3, #1
   1b760:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1b762:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1b766:	f023 0320 	bic.w	r3, r3, #32
   1b76a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1b76e:	f381 8811 	msr	BASEPRI, r1
   1b772:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1b776:	2200      	movs	r2, #0
   1b778:	68f3      	ldr	r3, [r6, #12]
   1b77a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1b77e:	e70e      	b.n	1b59e <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b780:	2301      	movs	r3, #1
   1b782:	607b      	str	r3, [r7, #4]
}
   1b784:	e7f3      	b.n	1b76e <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1b786:	4611      	mov	r1, r2
   1b788:	6860      	ldr	r0, [r4, #4]
   1b78a:	f00c fbd9 	bl	27f40 <rx_flush.isra.0>
   1b78e:	e759      	b.n	1b644 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1b790:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1b794:	2101      	movs	r1, #1
   1b796:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1b79a:	4620      	mov	r0, r4
   1b79c:	f00c fc05 	bl	27faa <async_uart_release>
		if (!data->async->tx_size) {
   1b7a0:	68eb      	ldr	r3, [r5, #12]
   1b7a2:	68db      	ldr	r3, [r3, #12]
   1b7a4:	2b00      	cmp	r3, #0
   1b7a6:	d187      	bne.n	1b6b8 <uarte_nrfx_isr_async+0x204>
   1b7a8:	e699      	b.n	1b4de <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1b7aa:	6899      	ldr	r1, [r3, #8]
   1b7ac:	691a      	ldr	r2, [r3, #16]
   1b7ae:	4291      	cmp	r1, r2
   1b7b0:	d00c      	beq.n	1b7cc <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1b7b2:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1b7b4:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1b7b6:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1b7b8:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1b7ba:	d128      	bne.n	1b80e <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1b7bc:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1b7be:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1b7c0:	f00c fba6 	bl	27f10 <setup_tx_cache>
   1b7c4:	2800      	cmp	r0, #0
   1b7c6:	d196      	bne.n	1b6f6 <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1b7c8:	68eb      	ldr	r3, [r5, #12]
   1b7ca:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1b7cc:	68e8      	ldr	r0, [r5, #12]
   1b7ce:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1b7d0:	f00d fd78 	bl	292c4 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1b7d4:	2214      	movs	r2, #20
   1b7d6:	2100      	movs	r1, #0
   1b7d8:	a803      	add	r0, sp, #12
   1b7da:	f00d fe84 	bl	294e6 <memset>
		.data.tx.buf = data->async->tx_buf,
   1b7de:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1b7e0:	4620      	mov	r0, r4
	struct uart_event evt = {
   1b7e2:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1b7e4:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1b7e6:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1b7ea:	68db      	ldr	r3, [r3, #12]
   1b7ec:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1b7ee:	bf1c      	itt	ne
   1b7f0:	2301      	movne	r3, #1
   1b7f2:	f88d 300c 	strbne.w	r3, [sp, #12]
   1b7f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1b7fa:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1b7fe:	2300      	movs	r3, #0
   1b800:	68ea      	ldr	r2, [r5, #12]
   1b802:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1b804:	68ea      	ldr	r2, [r5, #12]
   1b806:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1b808:	f00c faca 	bl	27da0 <user_callback>
   1b80c:	e667      	b.n	1b4de <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1b80e:	4616      	mov	r6, r2
   1b810:	e7dc      	b.n	1b7cc <uarte_nrfx_isr_async+0x318>
   1b812:	bf00      	nop
   1b814:	000f423f 	.word	0x000f423f
   1b818:	000f4240 	.word	0x000f4240

0001b81c <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1b81c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1b81e:	7e01      	ldrb	r1, [r0, #24]
   1b820:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1b822:	2902      	cmp	r1, #2
   1b824:	d014      	beq.n	1b850 <bt_rpmsg_send+0x34>
   1b826:	2904      	cmp	r1, #4
   1b828:	d011      	beq.n	1b84e <bt_rpmsg_send+0x32>
   1b82a:	b1f9      	cbz	r1, 1b86c <bt_rpmsg_send+0x50>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1b82c:	4b10      	ldr	r3, [pc, #64]	; (1b870 <bt_rpmsg_send+0x54>)
	switch (bt_buf_get_type(buf)) {
   1b82e:	9103      	str	r1, [sp, #12]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1b830:	9302      	str	r3, [sp, #8]
   1b832:	2300      	movs	r3, #0
   1b834:	2201      	movs	r2, #1
   1b836:	4618      	mov	r0, r3
   1b838:	e9cd 3300 	strd	r3, r3, [sp]
   1b83c:	490d      	ldr	r1, [pc, #52]	; (1b874 <bt_rpmsg_send+0x58>)
   1b83e:	f00c fc93 	bl	28168 <z_log_msg_runtime_create.constprop.0>
	}

done:
	net_buf_unref(buf);
   1b842:	4620      	mov	r0, r4
   1b844:	f7fd fbec 	bl	19020 <net_buf_unref>
	return 0;
}
   1b848:	2000      	movs	r0, #0
   1b84a:	b004      	add	sp, #16
   1b84c:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   1b84e:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1b850:	f104 000c 	add.w	r0, r4, #12
   1b854:	f00c f87a 	bl	2794c <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1b858:	8a22      	ldrh	r2, [r4, #16]
   1b85a:	68e1      	ldr	r1, [r4, #12]
   1b85c:	4806      	ldr	r0, [pc, #24]	; (1b878 <bt_rpmsg_send+0x5c>)
   1b85e:	f7f3 fb77 	bl	ef50 <ipc_service_send>
	if (err < 0) {
   1b862:	2800      	cmp	r0, #0
   1b864:	daed      	bge.n	1b842 <bt_rpmsg_send+0x26>
		LOG_ERR("Failed to send (err %d)", err);
   1b866:	4b05      	ldr	r3, [pc, #20]	; (1b87c <bt_rpmsg_send+0x60>)
   1b868:	9003      	str	r0, [sp, #12]
   1b86a:	e7e1      	b.n	1b830 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
   1b86c:	2101      	movs	r1, #1
   1b86e:	e7ef      	b.n	1b850 <bt_rpmsg_send+0x34>
   1b870:	0002f601 	.word	0x0002f601
   1b874:	0002a3a0 	.word	0x0002a3a0
   1b878:	20021290 	.word	0x20021290
   1b87c:	0002f611 	.word	0x0002f611

0001b880 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1b880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1b882:	4809      	ldr	r0, [pc, #36]	; (1b8a8 <bt_rpmsg_init+0x28>)
   1b884:	f7f6 fdde 	bl	12444 <bt_hci_driver_register>
	if (err < 0) {
   1b888:	1e04      	subs	r4, r0, #0
   1b88a:	da0a      	bge.n	1b8a2 <bt_rpmsg_init+0x22>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1b88c:	4b07      	ldr	r3, [pc, #28]	; (1b8ac <bt_rpmsg_init+0x2c>)
   1b88e:	2201      	movs	r2, #1
   1b890:	9302      	str	r3, [sp, #8]
   1b892:	2300      	movs	r3, #0
   1b894:	4906      	ldr	r1, [pc, #24]	; (1b8b0 <bt_rpmsg_init+0x30>)
   1b896:	4618      	mov	r0, r3
   1b898:	e9cd 3300 	strd	r3, r3, [sp]
   1b89c:	9403      	str	r4, [sp, #12]
   1b89e:	f00c fc63 	bl	28168 <z_log_msg_runtime_create.constprop.0>
	}

	return err;
}
   1b8a2:	4620      	mov	r0, r4
   1b8a4:	b004      	add	sp, #16
   1b8a6:	bd10      	pop	{r4, pc}
   1b8a8:	0002b1b8 	.word	0x0002b1b8
   1b8ac:	0002f629 	.word	0x0002f629
   1b8b0:	0002a3a0 	.word	0x0002a3a0

0001b8b4 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1b8b4:	4801      	ldr	r0, [pc, #4]	; (1b8bc <hci_ept_bound+0x8>)
   1b8b6:	f004 b911 	b.w	1fadc <z_impl_k_sem_give>
   1b8ba:	bf00      	nop
   1b8bc:	20008b18 	.word	0x20008b18

0001b8c0 <bt_rpmsg_open>:
{
   1b8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1b8c2:	4816      	ldr	r0, [pc, #88]	; (1b91c <bt_rpmsg_open+0x5c>)
   1b8c4:	f7f3 fae6 	bl	ee94 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1b8c8:	4604      	mov	r4, r0
   1b8ca:	b180      	cbz	r0, 1b8ee <bt_rpmsg_open+0x2e>
   1b8cc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1b8d0:	d00d      	beq.n	1b8ee <bt_rpmsg_open+0x2e>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1b8d2:	4b13      	ldr	r3, [pc, #76]	; (1b920 <bt_rpmsg_open+0x60>)
   1b8d4:	9003      	str	r0, [sp, #12]
		LOG_ERR("Endpoint binding failed with %d", err);
   1b8d6:	9302      	str	r3, [sp, #8]
   1b8d8:	2300      	movs	r3, #0
   1b8da:	2201      	movs	r2, #1
   1b8dc:	4618      	mov	r0, r3
   1b8de:	e9cd 3300 	strd	r3, r3, [sp]
   1b8e2:	4910      	ldr	r1, [pc, #64]	; (1b924 <bt_rpmsg_open+0x64>)
   1b8e4:	f00c fc40 	bl	28168 <z_log_msg_runtime_create.constprop.0>
}
   1b8e8:	4620      	mov	r0, r4
   1b8ea:	b004      	add	sp, #16
   1b8ec:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1b8ee:	4a0e      	ldr	r2, [pc, #56]	; (1b928 <bt_rpmsg_open+0x68>)
   1b8f0:	490e      	ldr	r1, [pc, #56]	; (1b92c <bt_rpmsg_open+0x6c>)
   1b8f2:	480a      	ldr	r0, [pc, #40]	; (1b91c <bt_rpmsg_open+0x5c>)
   1b8f4:	f7f3 fafa 	bl	eeec <ipc_service_register_endpoint>
	if (err) {
   1b8f8:	4604      	mov	r4, r0
   1b8fa:	b110      	cbz	r0, 1b902 <bt_rpmsg_open+0x42>
		LOG_ERR("Registering endpoint failed with %d", err);
   1b8fc:	4b0c      	ldr	r3, [pc, #48]	; (1b930 <bt_rpmsg_open+0x70>)
   1b8fe:	9003      	str	r0, [sp, #12]
   1b900:	e7e9      	b.n	1b8d6 <bt_rpmsg_open+0x16>
	return z_impl_k_sem_take(sem, timeout);
   1b902:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1b906:	2300      	movs	r3, #0
   1b908:	480a      	ldr	r0, [pc, #40]	; (1b934 <bt_rpmsg_open+0x74>)
   1b90a:	f004 f92b 	bl	1fb64 <z_impl_k_sem_take>
	if (err) {
   1b90e:	4604      	mov	r4, r0
   1b910:	2800      	cmp	r0, #0
   1b912:	d0e9      	beq.n	1b8e8 <bt_rpmsg_open+0x28>
		LOG_ERR("Endpoint binding failed with %d", err);
   1b914:	4b08      	ldr	r3, [pc, #32]	; (1b938 <bt_rpmsg_open+0x78>)
   1b916:	9003      	str	r0, [sp, #12]
   1b918:	e7dd      	b.n	1b8d6 <bt_rpmsg_open+0x16>
   1b91a:	bf00      	nop
   1b91c:	00029e80 	.word	0x00029e80
   1b920:	0002f653 	.word	0x0002f653
   1b924:	0002a3a0 	.word	0x0002a3a0
   1b928:	20008664 	.word	0x20008664
   1b92c:	20021290 	.word	0x20021290
   1b930:	0002f683 	.word	0x0002f683
   1b934:	20008b18 	.word	0x20008b18
   1b938:	0002f6a7 	.word	0x0002f6a7

0001b93c <hci_ept_recv>:
{
   1b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b940:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   1b942:	7800      	ldrb	r0, [r0, #0]
{
   1b944:	460d      	mov	r5, r1
	switch (pkt_indicator) {
   1b946:	2804      	cmp	r0, #4
{
   1b948:	b089      	sub	sp, #36	; 0x24
	remaining -= sizeof(pkt_indicator);
   1b94a:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1b94e:	d009      	beq.n	1b964 <hci_ept_recv+0x28>
   1b950:	2805      	cmp	r0, #5
   1b952:	f000 8099 	beq.w	1ba88 <hci_ept_recv+0x14c>
   1b956:	2802      	cmp	r0, #2
   1b958:	f040 80bd 	bne.w	1bad6 <hci_ept_recv+0x19a>
	if (remaining < sizeof(hdr)) {
   1b95c:	2b03      	cmp	r3, #3
   1b95e:	d867      	bhi.n	1ba30 <hci_ept_recv+0xf4>
		LOG_ERR("Not enough data for ACL header");
   1b960:	4b63      	ldr	r3, [pc, #396]	; (1baf0 <hci_ept_recv+0x1b4>)
   1b962:	e002      	b.n	1b96a <hci_ept_recv+0x2e>
	if (remaining < sizeof(hdr)) {
   1b964:	2b01      	cmp	r3, #1
   1b966:	d80c      	bhi.n	1b982 <hci_ept_recv+0x46>
		LOG_ERR("Not enough data for event header");
   1b968:	4b62      	ldr	r3, [pc, #392]	; (1baf4 <hci_ept_recv+0x1b8>)
		LOG_ERR("Event payload length is not correct");
   1b96a:	9302      	str	r3, [sp, #8]
   1b96c:	2300      	movs	r3, #0
   1b96e:	2201      	movs	r2, #1
   1b970:	4618      	mov	r0, r3
   1b972:	e9cd 3300 	strd	r3, r3, [sp]
   1b976:	4960      	ldr	r1, [pc, #384]	; (1baf8 <hci_ept_recv+0x1bc>)
   1b978:	f00c fbf6 	bl	28168 <z_log_msg_runtime_create.constprop.0>
}
   1b97c:	b009      	add	sp, #36	; 0x24
   1b97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1b982:	7873      	ldrb	r3, [r6, #1]
   1b984:	2b3e      	cmp	r3, #62	; 0x3e
   1b986:	d136      	bne.n	1b9f6 <hci_ept_recv+0xba>
		switch (subevt_type) {
   1b988:	78f7      	ldrb	r7, [r6, #3]
   1b98a:	1ebb      	subs	r3, r7, #2
   1b98c:	425f      	negs	r7, r3
   1b98e:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1b990:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1b994:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
   1b996:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1b99a:	f8ad 301c 	strh.w	r3, [sp, #28]
	if (remaining != hdr.len) {
   1b99e:	d12f      	bne.n	1ba00 <hci_ept_recv+0xc4>
   1b9a0:	b35f      	cbz	r7, 1b9fa <hci_ept_recv+0xbe>
   1b9a2:	f04f 0800 	mov.w	r8, #0
   1b9a6:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1b9aa:	f8df b150 	ldr.w	fp, [pc, #336]	; 1bafc <hci_ept_recv+0x1c0>
   1b9ae:	f8df a148 	ldr.w	sl, [pc, #328]	; 1baf8 <hci_ept_recv+0x1bc>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1b9b2:	4642      	mov	r2, r8
   1b9b4:	464b      	mov	r3, r9
   1b9b6:	4639      	mov	r1, r7
   1b9b8:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1b9bc:	f7f5 fb08 	bl	10fd0 <bt_buf_get_evt>
		if (!buf) {
   1b9c0:	4604      	mov	r4, r0
   1b9c2:	b1f8      	cbz	r0, 1ba04 <hci_ept_recv+0xc8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b9c4:	f100 070c 	add.w	r7, r0, #12
   1b9c8:	2202      	movs	r2, #2
   1b9ca:	a907      	add	r1, sp, #28
   1b9cc:	4638      	mov	r0, r7
   1b9ce:	f00b ffd8 	bl	27982 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1b9d2:	4638      	mov	r0, r7
   1b9d4:	f00b ffcd 	bl	27972 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1b9d8:	4285      	cmp	r5, r0
   1b9da:	d91e      	bls.n	1ba1a <hci_ept_recv+0xde>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1b9dc:	4b48      	ldr	r3, [pc, #288]	; (1bb00 <hci_ept_recv+0x1c4>)
   1b9de:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1b9e2:	9302      	str	r3, [sp, #8]
   1b9e4:	2300      	movs	r3, #0
   1b9e6:	2201      	movs	r2, #1
   1b9e8:	4618      	mov	r0, r3
   1b9ea:	e9cd 3300 	strd	r3, r3, [sp]
   1b9ee:	4942      	ldr	r1, [pc, #264]	; (1baf8 <hci_ept_recv+0x1bc>)
   1b9f0:	f00c fbba 	bl	28168 <z_log_msg_runtime_create.constprop.0>
   1b9f4:	e03c      	b.n	1ba70 <hci_ept_recv+0x134>
			return false;
   1b9f6:	2700      	movs	r7, #0
   1b9f8:	e7ca      	b.n	1b990 <hci_ept_recv+0x54>
   1b9fa:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1b9fe:	e7d2      	b.n	1b9a6 <hci_ept_recv+0x6a>
		LOG_ERR("Event payload length is not correct");
   1ba00:	4b40      	ldr	r3, [pc, #256]	; (1bb04 <hci_ept_recv+0x1c8>)
   1ba02:	e7b2      	b.n	1b96a <hci_ept_recv+0x2e>
			if (discardable) {
   1ba04:	2f00      	cmp	r7, #0
   1ba06:	d1b9      	bne.n	1b97c <hci_ept_recv+0x40>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1ba08:	463b      	mov	r3, r7
   1ba0a:	2202      	movs	r2, #2
   1ba0c:	4651      	mov	r1, sl
   1ba0e:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1ba12:	9700      	str	r7, [sp, #0]
   1ba14:	f00c fba8 	bl	28168 <z_log_msg_runtime_create.constprop.0>
	} while (!buf);
   1ba18:	e7cb      	b.n	1b9b2 <hci_ept_recv+0x76>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ba1a:	462a      	mov	r2, r5
   1ba1c:	1cf1      	adds	r1, r6, #3
   1ba1e:	4638      	mov	r0, r7
   1ba20:	f00b ffaf 	bl	27982 <net_buf_simple_add_mem>
		bt_recv(buf);
   1ba24:	4620      	mov	r0, r4
}
   1ba26:	b009      	add	sp, #36	; 0x24
   1ba28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_recv(buf);
   1ba2c:	f7f6 bcda 	b.w	123e4 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1ba30:	2200      	movs	r2, #0
   1ba32:	2300      	movs	r3, #0
   1ba34:	2003      	movs	r0, #3
   1ba36:	f7f5 fa7d 	bl	10f34 <bt_buf_get_rx>
	if (buf) {
   1ba3a:	4604      	mov	r4, r0
   1ba3c:	b1e0      	cbz	r0, 1ba78 <hci_ept_recv+0x13c>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1ba3e:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1ba42:	f100 070c 	add.w	r7, r0, #12
   1ba46:	2204      	movs	r2, #4
   1ba48:	4638      	mov	r0, r7
   1ba4a:	a907      	add	r1, sp, #28
   1ba4c:	9307      	str	r3, [sp, #28]
   1ba4e:	f00b ff98 	bl	27982 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1ba52:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1ba56:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1ba58:	429d      	cmp	r5, r3
   1ba5a:	d034      	beq.n	1bac6 <hci_ept_recv+0x18a>
		LOG_ERR("ACL payload length is not correct");
   1ba5c:	4b2a      	ldr	r3, [pc, #168]	; (1bb08 <hci_ept_recv+0x1cc>)
		LOG_ERR("ISO payload length is not correct");
   1ba5e:	9302      	str	r3, [sp, #8]
   1ba60:	2300      	movs	r3, #0
   1ba62:	2201      	movs	r2, #1
   1ba64:	4618      	mov	r0, r3
   1ba66:	e9cd 3300 	strd	r3, r3, [sp]
   1ba6a:	4923      	ldr	r1, [pc, #140]	; (1baf8 <hci_ept_recv+0x1bc>)
   1ba6c:	f00c fb7c 	bl	28168 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1ba70:	4620      	mov	r0, r4
   1ba72:	f7fd fad5 	bl	19020 <net_buf_unref>
	if (buf) {
   1ba76:	e781      	b.n	1b97c <hci_ept_recv+0x40>
		LOG_ERR("No available ACL buffers!");
   1ba78:	4b24      	ldr	r3, [pc, #144]	; (1bb0c <hci_ept_recv+0x1d0>)
		LOG_ERR("No available ISO buffers!");
   1ba7a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1ba7e:	2201      	movs	r2, #1
   1ba80:	4623      	mov	r3, r4
   1ba82:	491d      	ldr	r1, [pc, #116]	; (1baf8 <hci_ept_recv+0x1bc>)
   1ba84:	9400      	str	r4, [sp, #0]
   1ba86:	e777      	b.n	1b978 <hci_ept_recv+0x3c>
	if (remaining < sizeof(hdr)) {
   1ba88:	2b03      	cmp	r3, #3
   1ba8a:	d801      	bhi.n	1ba90 <hci_ept_recv+0x154>
		LOG_ERR("Not enough data for ISO header");
   1ba8c:	4b20      	ldr	r3, [pc, #128]	; (1bb10 <hci_ept_recv+0x1d4>)
   1ba8e:	e76c      	b.n	1b96a <hci_ept_recv+0x2e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1ba90:	2200      	movs	r2, #0
   1ba92:	2300      	movs	r3, #0
   1ba94:	f7f5 fa4e 	bl	10f34 <bt_buf_get_rx>
	if (buf) {
   1ba98:	4604      	mov	r4, r0
   1ba9a:	b190      	cbz	r0, 1bac2 <hci_ept_recv+0x186>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1ba9c:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1baa0:	f100 070c 	add.w	r7, r0, #12
   1baa4:	2204      	movs	r2, #4
   1baa6:	4638      	mov	r0, r7
   1baa8:	a907      	add	r1, sp, #28
   1baaa:	9307      	str	r3, [sp, #28]
   1baac:	f00b ff69 	bl	27982 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1bab0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1bab4:	3d05      	subs	r5, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1bab6:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1baba:	429d      	cmp	r5, r3
   1babc:	d003      	beq.n	1bac6 <hci_ept_recv+0x18a>
		LOG_ERR("ISO payload length is not correct");
   1babe:	4b15      	ldr	r3, [pc, #84]	; (1bb14 <hci_ept_recv+0x1d8>)
   1bac0:	e7cd      	b.n	1ba5e <hci_ept_recv+0x122>
		LOG_ERR("No available ISO buffers!");
   1bac2:	4b15      	ldr	r3, [pc, #84]	; (1bb18 <hci_ept_recv+0x1dc>)
   1bac4:	e7d9      	b.n	1ba7a <hci_ept_recv+0x13e>
	return net_buf_simple_tailroom(&buf->b);
   1bac6:	4638      	mov	r0, r7
   1bac8:	f00b ff53 	bl	27972 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1bacc:	4285      	cmp	r5, r0
   1bace:	d885      	bhi.n	1b9dc <hci_ept_recv+0xa0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1bad0:	462a      	mov	r2, r5
   1bad2:	1d71      	adds	r1, r6, #5
   1bad4:	e7a3      	b.n	1ba1e <hci_ept_recv+0xe2>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1bad6:	4b11      	ldr	r3, [pc, #68]	; (1bb1c <hci_ept_recv+0x1e0>)
	switch (pkt_indicator) {
   1bad8:	9003      	str	r0, [sp, #12]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1bada:	9302      	str	r3, [sp, #8]
   1badc:	2300      	movs	r3, #0
   1bade:	2201      	movs	r2, #1
   1bae0:	4618      	mov	r0, r3
   1bae2:	e9cd 3300 	strd	r3, r3, [sp]
   1bae6:	4904      	ldr	r1, [pc, #16]	; (1baf8 <hci_ept_recv+0x1bc>)
   1bae8:	f00c fb3e 	bl	28168 <z_log_msg_runtime_create.constprop.0>
   1baec:	e746      	b.n	1b97c <hci_ept_recv+0x40>
   1baee:	bf00      	nop
   1baf0:	0002f764 	.word	0x0002f764
   1baf4:	0002f6c7 	.word	0x0002f6c7
   1baf8:	0002a3a0 	.word	0x0002a3a0
   1bafc:	0002f70c 	.word	0x0002f70c
   1bb00:	0002f741 	.word	0x0002f741
   1bb04:	0002f6e8 	.word	0x0002f6e8
   1bb08:	0002f79d 	.word	0x0002f79d
   1bb0c:	0002f783 	.word	0x0002f783
   1bb10:	0002f7bf 	.word	0x0002f7bf
   1bb14:	0002f7f8 	.word	0x0002f7f8
   1bb18:	0002f7de 	.word	0x0002f7de
   1bb1c:	0002f81a 	.word	0x0002f81a

0001bb20 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1bb20:	2301      	movs	r3, #1
   1bb22:	4083      	lsls	r3, r0
{
   1bb24:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1bb26:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bb28:	4a0b      	ldr	r2, [pc, #44]	; (1bb58 <compare_int_lock+0x38>)
   1bb2a:	e8d2 1fef 	ldaex	r1, [r2]
   1bb2e:	ea01 0504 	and.w	r5, r1, r4
   1bb32:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1bb36:	2e00      	cmp	r6, #0
   1bb38:	d1f7      	bne.n	1bb2a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bb3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1bb3e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1bb40:	4806      	ldr	r0, [pc, #24]	; (1bb5c <compare_int_lock+0x3c>)
   1bb42:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1bb46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bb4a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1bb4e:	420b      	tst	r3, r1
}
   1bb50:	bf14      	ite	ne
   1bb52:	2001      	movne	r0, #1
   1bb54:	2000      	moveq	r0, #0
   1bb56:	bd70      	pop	{r4, r5, r6, pc}
   1bb58:	200212a0 	.word	0x200212a0
   1bb5c:	40015000 	.word	0x40015000

0001bb60 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bb62:	491b      	ldr	r1, [pc, #108]	; (1bbd0 <sys_clock_timeout_handler+0x70>)
{
   1bb64:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1bb66:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bb6a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1bb6c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1bb70:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1bb74:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1bb76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1bb7a:	d30f      	bcc.n	1bb9c <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1bb7c:	f006 fa24 	bl	21fc8 <sys_clock_announce>
    return p_reg->CC[ch];
   1bb80:	00a3      	lsls	r3, r4, #2
   1bb82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1bb86:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1bb8a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1bb8e:	4295      	cmp	r5, r2
   1bb90:	d11d      	bne.n	1bbce <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1bb92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1bb96:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1bb9a:	e012      	b.n	1bbc2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1bb9c:	4b0d      	ldr	r3, [pc, #52]	; (1bbd4 <sys_clock_timeout_handler+0x74>)
   1bb9e:	681b      	ldr	r3, [r3, #0]
   1bba0:	0a1a      	lsrs	r2, r3, #8
   1bba2:	061b      	lsls	r3, r3, #24
   1bba4:	195e      	adds	r6, r3, r5
   1bba6:	4b0c      	ldr	r3, [pc, #48]	; (1bbd8 <sys_clock_timeout_handler+0x78>)
   1bba8:	f142 0700 	adc.w	r7, r2, #0
   1bbac:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1bbb0:	f006 fa0a 	bl	21fc8 <sys_clock_announce>
    return p_reg->CC[ch];
   1bbb4:	4a09      	ldr	r2, [pc, #36]	; (1bbdc <sys_clock_timeout_handler+0x7c>)
   1bbb6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1bbba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1bbbe:	429d      	cmp	r5, r3
   1bbc0:	d105      	bne.n	1bbce <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bbc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1bbc6:	4a05      	ldr	r2, [pc, #20]	; (1bbdc <sys_clock_timeout_handler+0x7c>)
   1bbc8:	40a3      	lsls	r3, r4
   1bbca:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1bbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bbd0:	20009b58 	.word	0x20009b58
   1bbd4:	200212a4 	.word	0x200212a4
   1bbd8:	20009b60 	.word	0x20009b60
   1bbdc:	40015000 	.word	0x40015000

0001bbe0 <compare_int_unlock>:
	if (key) {
   1bbe0:	b1d9      	cbz	r1, 1bc1a <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1bbe2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bbe4:	4a0d      	ldr	r2, [pc, #52]	; (1bc1c <compare_int_unlock+0x3c>)
   1bbe6:	4083      	lsls	r3, r0
   1bbe8:	e8d2 cfef 	ldaex	ip, [r2]
   1bbec:	ea4c 0c03 	orr.w	ip, ip, r3
   1bbf0:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1bbf4:	2900      	cmp	r1, #0
   1bbf6:	d1f7      	bne.n	1bbe8 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bbf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1bbfc:	4a08      	ldr	r2, [pc, #32]	; (1bc20 <compare_int_unlock+0x40>)
   1bbfe:	4083      	lsls	r3, r0
   1bc00:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bc04:	4b07      	ldr	r3, [pc, #28]	; (1bc24 <compare_int_unlock+0x44>)
   1bc06:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1bc0a:	40c3      	lsrs	r3, r0
   1bc0c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bc0e:	bf42      	ittt	mi
   1bc10:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1bc14:	4b04      	ldrmi	r3, [pc, #16]	; (1bc28 <compare_int_unlock+0x48>)
   1bc16:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1bc1a:	4770      	bx	lr
   1bc1c:	200212a0 	.word	0x200212a0
   1bc20:	40015000 	.word	0x40015000
   1bc24:	20021298 	.word	0x20021298
   1bc28:	e000e100 	.word	0xe000e100

0001bc2c <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bc2c:	2801      	cmp	r0, #1
{
   1bc2e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bc30:	d909      	bls.n	1bc46 <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1bc32:	4907      	ldr	r1, [pc, #28]	; (1bc50 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1bc34:	4807      	ldr	r0, [pc, #28]	; (1bc54 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1bc36:	237c      	movs	r3, #124	; 0x7c
   1bc38:	4a07      	ldr	r2, [pc, #28]	; (1bc58 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1bc3a:	f008 feb4 	bl	249a6 <assert_print>
   1bc3e:	217c      	movs	r1, #124	; 0x7c
   1bc40:	4805      	ldr	r0, [pc, #20]	; (1bc58 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1bc42:	f008 fea9 	bl	24998 <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1bc46:	0083      	lsls	r3, r0, #2
}
   1bc48:	4804      	ldr	r0, [pc, #16]	; (1bc5c <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1bc4a:	4418      	add	r0, r3
   1bc4c:	bd08      	pop	{r3, pc}
   1bc4e:	bf00      	nop
   1bc50:	0002f895 	.word	0x0002f895
   1bc54:	0002b339 	.word	0x0002b339
   1bc58:	0002f864 	.word	0x0002f864
   1bc5c:	40015140 	.word	0x40015140

0001bc60 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bc60:	2801      	cmp	r0, #1
{
   1bc62:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bc64:	d909      	bls.n	1bc7a <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1bc66:	4907      	ldr	r1, [pc, #28]	; (1bc84 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1bc68:	4807      	ldr	r0, [pc, #28]	; (1bc88 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1bc6a:	2383      	movs	r3, #131	; 0x83
   1bc6c:	4a07      	ldr	r2, [pc, #28]	; (1bc8c <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1bc6e:	f008 fe9a 	bl	249a6 <assert_print>
   1bc72:	2183      	movs	r1, #131	; 0x83
   1bc74:	4805      	ldr	r0, [pc, #20]	; (1bc8c <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1bc76:	f008 fe8f 	bl	24998 <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1bc7a:	2800      	cmp	r0, #0
}
   1bc7c:	4804      	ldr	r0, [pc, #16]	; (1bc90 <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1bc7e:	bf08      	it	eq
   1bc80:	2000      	moveq	r0, #0
   1bc82:	bd08      	pop	{r3, pc}
   1bc84:	0002f895 	.word	0x0002f895
   1bc88:	0002b339 	.word	0x0002b339
   1bc8c:	0002f864 	.word	0x0002f864
   1bc90:	40015044 	.word	0x40015044

0001bc94 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bc94:	2801      	cmp	r0, #1
{
   1bc96:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1bc98:	d909      	bls.n	1bcae <z_nrf_rtc_timer_compare_read+0x1a>
   1bc9a:	4908      	ldr	r1, [pc, #32]	; (1bcbc <z_nrf_rtc_timer_compare_read+0x28>)
   1bc9c:	4808      	ldr	r0, [pc, #32]	; (1bcc0 <z_nrf_rtc_timer_compare_read+0x2c>)
   1bc9e:	23b9      	movs	r3, #185	; 0xb9
   1bca0:	4a08      	ldr	r2, [pc, #32]	; (1bcc4 <z_nrf_rtc_timer_compare_read+0x30>)
   1bca2:	f008 fe80 	bl	249a6 <assert_print>
   1bca6:	21b9      	movs	r1, #185	; 0xb9
   1bca8:	4806      	ldr	r0, [pc, #24]	; (1bcc4 <z_nrf_rtc_timer_compare_read+0x30>)
   1bcaa:	f008 fe75 	bl	24998 <assert_post_action>
    return p_reg->CC[ch];
   1bcae:	4b06      	ldr	r3, [pc, #24]	; (1bcc8 <z_nrf_rtc_timer_compare_read+0x34>)
   1bcb0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1bcb4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1bcb8:	bd08      	pop	{r3, pc}
   1bcba:	bf00      	nop
   1bcbc:	0002f895 	.word	0x0002f895
   1bcc0:	0002b339 	.word	0x0002b339
   1bcc4:	0002f864 	.word	0x0002f864
   1bcc8:	40015000 	.word	0x40015000

0001bccc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1bccc:	4b0d      	ldr	r3, [pc, #52]	; (1bd04 <z_nrf_rtc_timer_read+0x38>)
   1bcce:	6818      	ldr	r0, [r3, #0]
   1bcd0:	0a01      	lsrs	r1, r0, #8
   1bcd2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1bcd4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1bcd8:	4b0b      	ldr	r3, [pc, #44]	; (1bd08 <z_nrf_rtc_timer_read+0x3c>)
   1bcda:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1bcde:	1818      	adds	r0, r3, r0
   1bce0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1bce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1bce8:	d20a      	bcs.n	1bd00 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1bcea:	4b08      	ldr	r3, [pc, #32]	; (1bd0c <z_nrf_rtc_timer_read+0x40>)
   1bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bcf0:	4290      	cmp	r0, r2
   1bcf2:	eb71 0303 	sbcs.w	r3, r1, r3
   1bcf6:	d203      	bcs.n	1bd00 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1bcf8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1bcfc:	f141 0100 	adc.w	r1, r1, #0
}
   1bd00:	4770      	bx	lr
   1bd02:	bf00      	nop
   1bd04:	200212a4 	.word	0x200212a4
   1bd08:	40015000 	.word	0x40015000
   1bd0c:	20009b60 	.word	0x20009b60

0001bd10 <compare_set>:
{
   1bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd14:	b085      	sub	sp, #20
   1bd16:	4614      	mov	r4, r2
   1bd18:	461d      	mov	r5, r3
   1bd1a:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1bd1c:	f7ff ff00 	bl	1bb20 <compare_int_lock>
   1bd20:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1bd22:	f7ff ffd3 	bl	1bccc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1bd26:	42a0      	cmp	r0, r4
   1bd28:	eb71 0305 	sbcs.w	r3, r1, r5
   1bd2c:	f080 8086 	bcs.w	1be3c <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1bd30:	4b49      	ldr	r3, [pc, #292]	; (1be58 <compare_set+0x148>)
   1bd32:	1a20      	subs	r0, r4, r0
   1bd34:	eb65 0101 	sbc.w	r1, r5, r1
   1bd38:	4298      	cmp	r0, r3
   1bd3a:	f171 0100 	sbcs.w	r1, r1, #0
   1bd3e:	f080 8088 	bcs.w	1be52 <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1bd42:	4b46      	ldr	r3, [pc, #280]	; (1be5c <compare_set+0x14c>)
   1bd44:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1bd48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1bd4c:	429d      	cmp	r5, r3
   1bd4e:	bf08      	it	eq
   1bd50:	4294      	cmpeq	r4, r2
   1bd52:	d05e      	beq.n	1be12 <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bd54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1bd58:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1bd5c:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1bd5e:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1bd62:	f06f 0101 	mvn.w	r1, #1
   1bd66:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1bd6a:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1bd6e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1bd72:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1bd76:	40bb      	lsls	r3, r7
   1bd78:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bd7c:	fa1f f888 	uxth.w	r8, r8
   1bd80:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1bd84:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1bd86:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1bd8a:	4b35      	ldr	r3, [pc, #212]	; (1be60 <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bd8c:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1bd90:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1bd94:	eba0 000a 	sub.w	r0, r0, sl
   1bd98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1bd9c:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1bda0:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1bda2:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1bda6:	d107      	bne.n	1bdb8 <compare_set+0xa8>
   1bda8:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1bdaa:	2013      	movs	r0, #19
   1bdac:	f00d fa58 	bl	29260 <z_impl_k_busy_wait>
   1bdb0:	f06f 0101 	mvn.w	r1, #1
   1bdb4:	4b2a      	ldr	r3, [pc, #168]	; (1be60 <compare_set+0x150>)
   1bdb6:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1bdb8:	eba1 000a 	sub.w	r0, r1, sl
   1bdbc:	4430      	add	r0, r6
   1bdbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1bdc2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bdc6:	f04f 0000 	mov.w	r0, #0
   1bdca:	f8c8 0000 	str.w	r0, [r8]
   1bdce:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1bdd2:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1bdd4:	bf88      	it	hi
   1bdd6:	eb0a 060b 	addhi.w	r6, sl, fp
   1bdda:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1bdde:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1bde2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1bde6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1bdea:	bf88      	it	hi
   1bdec:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1bdf0:	4582      	cmp	sl, r0
   1bdf2:	d006      	beq.n	1be02 <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1bdf4:	1a08      	subs	r0, r1, r0
   1bdf6:	4430      	add	r0, r6
   1bdf8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1bdfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1be00:	d81a      	bhi.n	1be38 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1be02:	1ab6      	subs	r6, r6, r2
   1be04:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1be08:	1936      	adds	r6, r6, r4
   1be0a:	f145 0300 	adc.w	r3, r5, #0
   1be0e:	4634      	mov	r4, r6
   1be10:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1be12:	4912      	ldr	r1, [pc, #72]	; (1be5c <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1be14:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1be16:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1be1a:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1be1e:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1be20:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1be22:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1be24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1be26:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1be28:	4638      	mov	r0, r7
   1be2a:	9901      	ldr	r1, [sp, #4]
   1be2c:	f7ff fed8 	bl	1bbe0 <compare_int_unlock>
}
   1be30:	4620      	mov	r0, r4
   1be32:	b005      	add	sp, #20
   1be34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be38:	4630      	mov	r0, r6
   1be3a:	e7a9      	b.n	1bd90 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1be3c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1be3e:	4a09      	ldr	r2, [pc, #36]	; (1be64 <compare_set+0x154>)
   1be40:	40bb      	lsls	r3, r7
   1be42:	e8d2 0fef 	ldaex	r0, [r2]
   1be46:	4318      	orrs	r0, r3
   1be48:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1be4c:	2900      	cmp	r1, #0
   1be4e:	d0e0      	beq.n	1be12 <compare_set+0x102>
   1be50:	e7f7      	b.n	1be42 <compare_set+0x132>
			return -EINVAL;
   1be52:	f06f 0415 	mvn.w	r4, #21
   1be56:	e7e7      	b.n	1be28 <compare_set+0x118>
   1be58:	01000001 	.word	0x01000001
   1be5c:	20009b38 	.word	0x20009b38
   1be60:	40015000 	.word	0x40015000
   1be64:	20021298 	.word	0x20021298

0001be68 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1be68:	2801      	cmp	r0, #1
{
   1be6a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1be6c:	d00b      	beq.n	1be86 <z_nrf_rtc_timer_set+0x1e>
   1be6e:	4908      	ldr	r1, [pc, #32]	; (1be90 <z_nrf_rtc_timer_set+0x28>)
   1be70:	4808      	ldr	r0, [pc, #32]	; (1be94 <z_nrf_rtc_timer_set+0x2c>)
   1be72:	f240 1353 	movw	r3, #339	; 0x153
   1be76:	4a08      	ldr	r2, [pc, #32]	; (1be98 <z_nrf_rtc_timer_set+0x30>)
   1be78:	f008 fd95 	bl	249a6 <assert_print>
   1be7c:	f240 1153 	movw	r1, #339	; 0x153
   1be80:	4805      	ldr	r0, [pc, #20]	; (1be98 <z_nrf_rtc_timer_set+0x30>)
   1be82:	f008 fd89 	bl	24998 <assert_post_action>
}
   1be86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1be8a:	f7ff bf41 	b.w	1bd10 <compare_set>
   1be8e:	bf00      	nop
   1be90:	0002f8b1 	.word	0x0002f8b1
   1be94:	0002b339 	.word	0x0002b339
   1be98:	0002f864 	.word	0x0002f864

0001be9c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1be9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1be9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1bea2:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1bea4:	f04f 30ff 	mov.w	r0, #4294967295
   1bea8:	f04f 31ff 	mov.w	r1, #4294967295
   1beac:	4c19      	ldr	r4, [pc, #100]	; (1bf14 <sys_clock_driver_init+0x78>)
   1beae:	4b1a      	ldr	r3, [pc, #104]	; (1bf18 <sys_clock_driver_init+0x7c>)
   1beb0:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1beb4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1beb8:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1bebc:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1bec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1bec4:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bec6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1beca:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1bece:	4b13      	ldr	r3, [pc, #76]	; (1bf1c <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1bed0:	2101      	movs	r1, #1
   1bed2:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1bed6:	2015      	movs	r0, #21
   1bed8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1bedc:	462a      	mov	r2, r5
   1bede:	f7f3 ffa5 	bl	fe2c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1bee2:	2015      	movs	r0, #21
   1bee4:	f7f3 ff72 	bl	fdcc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1bee8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1beea:	2203      	movs	r2, #3
   1beec:	60a3      	str	r3, [r4, #8]
   1beee:	6023      	str	r3, [r4, #0]
   1bef0:	4b0b      	ldr	r3, [pc, #44]	; (1bf20 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1bef2:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1bef4:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1bef6:	4b0b      	ldr	r3, [pc, #44]	; (1bf24 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1bef8:	4a0b      	ldr	r2, [pc, #44]	; (1bf28 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1befa:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1befc:	4b0b      	ldr	r3, [pc, #44]	; (1bf2c <sys_clock_driver_init+0x90>)
   1befe:	9501      	str	r5, [sp, #4]
   1bf00:	9300      	str	r3, [sp, #0]
   1bf02:	2300      	movs	r3, #0
   1bf04:	f7ff ff04 	bl	1bd10 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1bf08:	4630      	mov	r0, r6
   1bf0a:	f7fd fd83 	bl	19a14 <z_nrf_clock_control_lf_on>

	return 0;
}
   1bf0e:	4628      	mov	r0, r5
   1bf10:	b002      	add	sp, #8
   1bf12:	bd70      	pop	{r4, r5, r6, pc}
   1bf14:	40015000 	.word	0x40015000
   1bf18:	20009b38 	.word	0x20009b38
   1bf1c:	e000e100 	.word	0xe000e100
   1bf20:	200212a0 	.word	0x200212a0
   1bf24:	2002129c 	.word	0x2002129c
   1bf28:	007fffff 	.word	0x007fffff
   1bf2c:	0001bb61 	.word	0x0001bb61

0001bf30 <rtc_nrf_isr>:
{
   1bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1bf34:	4b3f      	ldr	r3, [pc, #252]	; (1c034 <rtc_nrf_isr+0x104>)
   1bf36:	b085      	sub	sp, #20
   1bf38:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1bf3c:	0792      	lsls	r2, r2, #30
   1bf3e:	d50b      	bpl.n	1bf58 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bf40:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1bf44:	b142      	cbz	r2, 1bf58 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bf46:	2200      	movs	r2, #0
   1bf48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1bf4c:	4a3a      	ldr	r2, [pc, #232]	; (1c038 <rtc_nrf_isr+0x108>)
   1bf4e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1bf52:	6813      	ldr	r3, [r2, #0]
   1bf54:	3301      	adds	r3, #1
   1bf56:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1bf58:	4d38      	ldr	r5, [pc, #224]	; (1c03c <rtc_nrf_isr+0x10c>)
   1bf5a:	2400      	movs	r4, #0
   1bf5c:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1bf5e:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1bf62:	4e34      	ldr	r6, [pc, #208]	; (1c034 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1bf64:	f04f 0320 	mov.w	r3, #32
   1bf68:	f3ef 8211 	mrs	r2, BASEPRI
   1bf6c:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf70:	f3bf 8f6f 	isb	sy
   1bf74:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1bf78:	fa0b f904 	lsl.w	r9, fp, r4
   1bf7c:	ea19 0f03 	tst.w	r9, r3
   1bf80:	d10a      	bne.n	1bf98 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1bf82:	f382 8811 	msr	BASEPRI, r2
   1bf86:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1bf8a:	3510      	adds	r5, #16
   1bf8c:	b114      	cbz	r4, 1bf94 <rtc_nrf_isr+0x64>
}
   1bf8e:	b005      	add	sp, #20
   1bf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1bf94:	2401      	movs	r4, #1
   1bf96:	e7e5      	b.n	1bf64 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1bf98:	2301      	movs	r3, #1
   1bf9a:	40a3      	lsls	r3, r4
   1bf9c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bf9e:	4928      	ldr	r1, [pc, #160]	; (1c040 <rtc_nrf_isr+0x110>)
   1bfa0:	e8d1 0fef 	ldaex	r0, [r1]
   1bfa4:	ea00 0c03 	and.w	ip, r0, r3
   1bfa8:	e8c1 cfee 	stlex	lr, ip, [r1]
   1bfac:	f1be 0f00 	cmp.w	lr, #0
   1bfb0:	d1f6      	bne.n	1bfa0 <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bfb2:	4b24      	ldr	r3, [pc, #144]	; (1c044 <rtc_nrf_isr+0x114>)
   1bfb4:	00a1      	lsls	r1, r4, #2
   1bfb6:	b918      	cbnz	r0, 1bfc0 <rtc_nrf_isr+0x90>
   1bfb8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1bfbc:	2800      	cmp	r0, #0
   1bfbe:	d0e0      	beq.n	1bf82 <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1bfc0:	f04f 0a00 	mov.w	sl, #0
   1bfc4:	f841 a003 	str.w	sl, [r1, r3]
   1bfc8:	58cb      	ldr	r3, [r1, r3]
   1bfca:	f382 8811 	msr	BASEPRI, r2
   1bfce:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1bfd2:	f7ff fe7b 	bl	1bccc <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1bfd6:	f04f 0320 	mov.w	r3, #32
   1bfda:	f3ef 8c11 	mrs	ip, BASEPRI
   1bfde:	f383 8812 	msr	BASEPRI_MAX, r3
   1bfe2:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1bfe6:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1bfea:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1bfee:	4290      	cmp	r0, r2
   1bff0:	4199      	sbcs	r1, r3
   1bff2:	d204      	bcs.n	1bffe <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1bff4:	f38c 8811 	msr	BASEPRI, ip
   1bff8:	f3bf 8f6f 	isb	sy
		if (handler) {
   1bffc:	e7c5      	b.n	1bf8a <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1bffe:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c002:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1c006:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c008:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1c00c:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c010:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1c014:	4907      	ldr	r1, [pc, #28]	; (1c034 <rtc_nrf_isr+0x104>)
   1c016:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1c01a:	f38c 8811 	msr	BASEPRI, ip
   1c01e:	f3bf 8f6f 	isb	sy
		if (handler) {
   1c022:	f1b8 0f00 	cmp.w	r8, #0
   1c026:	d0b0      	beq.n	1bf8a <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1c028:	9903      	ldr	r1, [sp, #12]
   1c02a:	4620      	mov	r0, r4
   1c02c:	9100      	str	r1, [sp, #0]
   1c02e:	47c0      	blx	r8
   1c030:	e7ab      	b.n	1bf8a <rtc_nrf_isr+0x5a>
   1c032:	bf00      	nop
   1c034:	40015000 	.word	0x40015000
   1c038:	200212a4 	.word	0x200212a4
   1c03c:	20009b38 	.word	0x20009b38
   1c040:	20021298 	.word	0x20021298
   1c044:	40015140 	.word	0x40015140

0001c048 <z_nrf_rtc_timer_chan_alloc>:
{
   1c048:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1c04a:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1c04c:	4b0c      	ldr	r3, [pc, #48]	; (1c080 <z_nrf_rtc_timer_chan_alloc+0x38>)
   1c04e:	6818      	ldr	r0, [r3, #0]
   1c050:	b190      	cbz	r0, 1c078 <z_nrf_rtc_timer_chan_alloc+0x30>
   1c052:	fab0 f080 	clz	r0, r0
   1c056:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1c05a:	fa04 f100 	lsl.w	r1, r4, r0
   1c05e:	43c9      	mvns	r1, r1
   1c060:	e8d3 2fef 	ldaex	r2, [r3]
   1c064:	ea02 0501 	and.w	r5, r2, r1
   1c068:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1c06c:	2e00      	cmp	r6, #0
   1c06e:	d1f7      	bne.n	1c060 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1c070:	40c2      	lsrs	r2, r0
   1c072:	07d2      	lsls	r2, r2, #31
   1c074:	d5eb      	bpl.n	1c04e <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1c076:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1c078:	f06f 000b 	mvn.w	r0, #11
   1c07c:	e7fb      	b.n	1c076 <z_nrf_rtc_timer_chan_alloc+0x2e>
   1c07e:	bf00      	nop
   1c080:	2002129c 	.word	0x2002129c

0001c084 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1c084:	2801      	cmp	r0, #1
{
   1c086:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1c088:	d00b      	beq.n	1c0a2 <z_nrf_rtc_timer_chan_free+0x1e>
   1c08a:	490b      	ldr	r1, [pc, #44]	; (1c0b8 <z_nrf_rtc_timer_chan_free+0x34>)
   1c08c:	480b      	ldr	r0, [pc, #44]	; (1c0bc <z_nrf_rtc_timer_chan_free+0x38>)
   1c08e:	f240 2321 	movw	r3, #545	; 0x221
   1c092:	4a0b      	ldr	r2, [pc, #44]	; (1c0c0 <z_nrf_rtc_timer_chan_free+0x3c>)
   1c094:	f008 fc87 	bl	249a6 <assert_print>
   1c098:	f240 2121 	movw	r1, #545	; 0x221
   1c09c:	4808      	ldr	r0, [pc, #32]	; (1c0c0 <z_nrf_rtc_timer_chan_free+0x3c>)
   1c09e:	f008 fc7b 	bl	24998 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c0a2:	4b08      	ldr	r3, [pc, #32]	; (1c0c4 <z_nrf_rtc_timer_chan_free+0x40>)
   1c0a4:	e8d3 1fef 	ldaex	r1, [r3]
   1c0a8:	f041 0102 	orr.w	r1, r1, #2
   1c0ac:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1c0b0:	2a00      	cmp	r2, #0
   1c0b2:	d1f7      	bne.n	1c0a4 <z_nrf_rtc_timer_chan_free+0x20>
}
   1c0b4:	bd08      	pop	{r3, pc}
   1c0b6:	bf00      	nop
   1c0b8:	0002f8b1 	.word	0x0002f8b1
   1c0bc:	0002b339 	.word	0x0002b339
   1c0c0:	0002f864 	.word	0x0002f864
   1c0c4:	2002129c 	.word	0x2002129c

0001c0c8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c0c8:	1c43      	adds	r3, r0, #1
{
   1c0ca:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c0cc:	d020      	beq.n	1c110 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1c0ce:	2801      	cmp	r0, #1
   1c0d0:	dd20      	ble.n	1c114 <sys_clock_set_timeout+0x4c>
   1c0d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c0d6:	da1f      	bge.n	1c118 <sys_clock_set_timeout+0x50>
   1c0d8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1c0da:	f7ff fdf7 	bl	1bccc <z_nrf_rtc_timer_read>
   1c0de:	4b0f      	ldr	r3, [pc, #60]	; (1c11c <sys_clock_set_timeout+0x54>)
   1c0e0:	e9d3 1300 	ldrd	r1, r3, [r3]
   1c0e4:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1c0e6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1c0ea:	bf28      	it	cs
   1c0ec:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1c0ee:	480c      	ldr	r0, [pc, #48]	; (1c120 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1c0f0:	3201      	adds	r2, #1
   1c0f2:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1c0f4:	4282      	cmp	r2, r0
   1c0f6:	bf28      	it	cs
   1c0f8:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1c0fa:	2000      	movs	r0, #0
   1c0fc:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1c0fe:	4909      	ldr	r1, [pc, #36]	; (1c124 <sys_clock_set_timeout+0x5c>)
   1c100:	9001      	str	r0, [sp, #4]
   1c102:	9100      	str	r1, [sp, #0]
   1c104:	f143 0300 	adc.w	r3, r3, #0
   1c108:	f7ff fe02 	bl	1bd10 <compare_set>
}
   1c10c:	b002      	add	sp, #8
   1c10e:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1c110:	4803      	ldr	r0, [pc, #12]	; (1c120 <sys_clock_set_timeout+0x58>)
   1c112:	e7e1      	b.n	1c0d8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1c114:	2400      	movs	r4, #0
   1c116:	e7e0      	b.n	1c0da <sys_clock_set_timeout+0x12>
   1c118:	4c01      	ldr	r4, [pc, #4]	; (1c120 <sys_clock_set_timeout+0x58>)
   1c11a:	e7de      	b.n	1c0da <sys_clock_set_timeout+0x12>
   1c11c:	20009b58 	.word	0x20009b58
   1c120:	007fffff 	.word	0x007fffff
   1c124:	0001bb61 	.word	0x0001bb61

0001c128 <sys_clock_elapsed>:
{
   1c128:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1c12a:	f7ff fdcf 	bl	1bccc <z_nrf_rtc_timer_read>
   1c12e:	4b02      	ldr	r3, [pc, #8]	; (1c138 <sys_clock_elapsed+0x10>)
   1c130:	681b      	ldr	r3, [r3, #0]
}
   1c132:	1ac0      	subs	r0, r0, r3
   1c134:	bd08      	pop	{r3, pc}
   1c136:	bf00      	nop
   1c138:	20009b58 	.word	0x20009b58

0001c13c <nrf_gpio_pin_port_decode>:
{
   1c13c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c13e:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1c140:	095a      	lsrs	r2, r3, #5
   1c142:	d00d      	beq.n	1c160 <nrf_gpio_pin_port_decode+0x24>
   1c144:	2a01      	cmp	r2, #1
   1c146:	d013      	beq.n	1c170 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c148:	490e      	ldr	r1, [pc, #56]	; (1c184 <nrf_gpio_pin_port_decode+0x48>)
   1c14a:	480f      	ldr	r0, [pc, #60]	; (1c188 <nrf_gpio_pin_port_decode+0x4c>)
   1c14c:	f240 2347 	movw	r3, #583	; 0x247
   1c150:	4a0e      	ldr	r2, [pc, #56]	; (1c18c <nrf_gpio_pin_port_decode+0x50>)
   1c152:	f008 fc28 	bl	249a6 <assert_print>
   1c156:	f240 2147 	movw	r1, #583	; 0x247
   1c15a:	480c      	ldr	r0, [pc, #48]	; (1c18c <nrf_gpio_pin_port_decode+0x50>)
   1c15c:	f008 fc1c 	bl	24998 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1c160:	f04f 32ff 	mov.w	r2, #4294967295
   1c164:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c168:	07d9      	lsls	r1, r3, #31
   1c16a:	d5ed      	bpl.n	1c148 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1c16c:	4808      	ldr	r0, [pc, #32]	; (1c190 <nrf_gpio_pin_port_decode+0x54>)
   1c16e:	e008      	b.n	1c182 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1c170:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1c174:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1c178:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c17a:	07d2      	lsls	r2, r2, #31
   1c17c:	d5e4      	bpl.n	1c148 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1c17e:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1c180:	4804      	ldr	r0, [pc, #16]	; (1c194 <nrf_gpio_pin_port_decode+0x58>)
}
   1c182:	bd08      	pop	{r3, pc}
   1c184:	0002f184 	.word	0x0002f184
   1c188:	0002b339 	.word	0x0002b339
   1c18c:	0002f151 	.word	0x0002f151
   1c190:	40842500 	.word	0x40842500
   1c194:	40842800 	.word	0x40842800

0001c198 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1c198:	b510      	push	{r4, lr}
   1c19a:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1c19c:	6902      	ldr	r2, [r0, #16]
{
   1c19e:	b0a6      	sub	sp, #152	; 0x98

	data->dev = dev;
   1c1a0:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1c1a4:	4924      	ldr	r1, [pc, #144]	; (1c238 <mbox_nrf_init+0xa0>)
   1c1a6:	2000      	movs	r0, #0
   1c1a8:	f001 f812 	bl	1d1d0 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c1ac:	2200      	movs	r2, #0
   1c1ae:	2101      	movs	r1, #1
   1c1b0:	202a      	movs	r0, #42	; 0x2a
   1c1b2:	f7f3 fe3b 	bl	fe2c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1c1b6:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1c1b8:	2284      	movs	r2, #132	; 0x84
   1c1ba:	2100      	movs	r1, #0
   1c1bc:	a805      	add	r0, sp, #20
   1c1be:	f00d f992 	bl	294e6 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1c1c2:	6863      	ldr	r3, [r4, #4]
   1c1c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1c1c8:	d309      	bcc.n	1c1de <mbox_nrf_init+0x46>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1c1ca:	4b1c      	ldr	r3, [pc, #112]	; (1c23c <mbox_nrf_init+0xa4>)
   1c1cc:	2202      	movs	r2, #2
   1c1ce:	9302      	str	r3, [sp, #8]
   1c1d0:	2300      	movs	r3, #0
   1c1d2:	491b      	ldr	r1, [pc, #108]	; (1c240 <mbox_nrf_init+0xa8>)
   1c1d4:	4618      	mov	r0, r3
   1c1d6:	e9cd 3300 	strd	r3, r3, [sp]
   1c1da:	f00c f8d3 	bl	28384 <z_log_msg_runtime_create.constprop.0>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1c1de:	6823      	ldr	r3, [r4, #0]
   1c1e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1c1e4:	d309      	bcc.n	1c1fa <mbox_nrf_init+0x62>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1c1e6:	4b17      	ldr	r3, [pc, #92]	; (1c244 <mbox_nrf_init+0xac>)
   1c1e8:	2202      	movs	r2, #2
   1c1ea:	9302      	str	r3, [sp, #8]
   1c1ec:	2300      	movs	r3, #0
   1c1ee:	4914      	ldr	r1, [pc, #80]	; (1c240 <mbox_nrf_init+0xa8>)
   1c1f0:	4618      	mov	r0, r3
   1c1f2:	e9cd 3300 	strd	r3, r3, [sp]
   1c1f6:	f00c f8c5 	bl	28384 <z_log_msg_runtime_create.constprop.0>
	ch_config.receive_events_enabled = 0;
   1c1fa:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1c1fc:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1c1fe:	9325      	str	r3, [sp, #148]	; 0x94
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c200:	aa05      	add	r2, sp, #20
		if (conf->tx_mask & BIT(ch)) {
   1c202:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c204:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1c206:	40d9      	lsrs	r1, r3
   1c208:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1c20a:	bf44      	itt	mi
   1c20c:	fa00 f103 	lslmi.w	r1, r0, r3
   1c210:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1c214:	6821      	ldr	r1, [r4, #0]
   1c216:	40d9      	lsrs	r1, r3
   1c218:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1c21a:	bf48      	it	mi
   1c21c:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c220:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1c224:	bf48      	it	mi
   1c226:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1c228:	2b10      	cmp	r3, #16
   1c22a:	d1ea      	bne.n	1c202 <mbox_nrf_init+0x6a>
	nrfx_ipc_config_load(&ch_config);
   1c22c:	a805      	add	r0, sp, #20
   1c22e:	f000 ffe7 	bl	1d200 <nrfx_ipc_config_load>

	return 0;
}
   1c232:	2000      	movs	r0, #0
   1c234:	b026      	add	sp, #152	; 0x98
   1c236:	bd10      	pop	{r4, pc}
   1c238:	0001c299 	.word	0x0001c299
   1c23c:	0002f8cc 	.word	0x0002f8cc
   1c240:	0002a430 	.word	0x0002a430
   1c244:	0002f8f8 	.word	0x0002f8f8

0001c248 <mbox_nrf_send>:
{
   1c248:	b530      	push	{r4, r5, lr}
   1c24a:	4605      	mov	r5, r0
   1c24c:	460c      	mov	r4, r1
   1c24e:	b085      	sub	sp, #20
	if (msg) {
   1c250:	b14a      	cbz	r2, 1c266 <mbox_nrf_send+0x1e>
		LOG_WRN("Sending data not supported");
   1c252:	4b0f      	ldr	r3, [pc, #60]	; (1c290 <mbox_nrf_send+0x48>)
   1c254:	2202      	movs	r2, #2
   1c256:	9302      	str	r3, [sp, #8]
   1c258:	2300      	movs	r3, #0
   1c25a:	490e      	ldr	r1, [pc, #56]	; (1c294 <mbox_nrf_send+0x4c>)
   1c25c:	4618      	mov	r0, r3
   1c25e:	e9cd 3300 	strd	r3, r3, [sp]
   1c262:	f00c f88f 	bl	28384 <z_log_msg_runtime_create.constprop.0>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1c266:	2c0f      	cmp	r4, #15
   1c268:	d80f      	bhi.n	1c28a <mbox_nrf_send+0x42>
   1c26a:	686b      	ldr	r3, [r5, #4]
   1c26c:	685b      	ldr	r3, [r3, #4]
   1c26e:	40e3      	lsrs	r3, r4
   1c270:	07db      	lsls	r3, r3, #31
   1c272:	d50a      	bpl.n	1c28a <mbox_nrf_send+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c274:	2301      	movs	r3, #1
	return 0;
   1c276:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1c278:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c27a:	b2e4      	uxtb	r4, r4
   1c27c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1c280:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1c284:	6023      	str	r3, [r4, #0]
}
   1c286:	b005      	add	sp, #20
   1c288:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1c28a:	f06f 0015 	mvn.w	r0, #21
   1c28e:	e7fa      	b.n	1c286 <mbox_nrf_send+0x3e>
   1c290:	0002f924 	.word	0x0002f924
   1c294:	0002a430 	.word	0x0002a430

0001c298 <mbox_dispatcher>:
{
   1c298:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1c29a:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c29e:	280f      	cmp	r0, #15
{
   1c2a0:	4604      	mov	r4, r0
   1c2a2:	460d      	mov	r5, r1
   1c2a4:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c2a6:	d803      	bhi.n	1c2b0 <mbox_dispatcher+0x18>
   1c2a8:	681b      	ldr	r3, [r3, #0]
   1c2aa:	40c3      	lsrs	r3, r0
   1c2ac:	07db      	lsls	r3, r3, #31
   1c2ae:	d409      	bmi.n	1c2c4 <mbox_dispatcher+0x2c>
		LOG_WRN("RX event on illegal channel");
   1c2b0:	4b14      	ldr	r3, [pc, #80]	; (1c304 <mbox_dispatcher+0x6c>)
   1c2b2:	2202      	movs	r2, #2
   1c2b4:	9302      	str	r3, [sp, #8]
   1c2b6:	2300      	movs	r3, #0
   1c2b8:	4913      	ldr	r1, [pc, #76]	; (1c308 <mbox_dispatcher+0x70>)
   1c2ba:	4618      	mov	r0, r3
   1c2bc:	e9cd 3300 	strd	r3, r3, [sp]
   1c2c0:	f00c f860 	bl	28384 <z_log_msg_runtime_create.constprop.0>
	if (!(data->enabled_mask & BIT(channel))) {
   1c2c4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c2c8:	40e3      	lsrs	r3, r4
   1c2ca:	f013 0301 	ands.w	r3, r3, #1
   1c2ce:	d108      	bne.n	1c2e2 <mbox_dispatcher+0x4a>
		LOG_WRN("RX event on disabled channel");
   1c2d0:	4a0e      	ldr	r2, [pc, #56]	; (1c30c <mbox_dispatcher+0x74>)
   1c2d2:	4618      	mov	r0, r3
   1c2d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1c2d8:	490b      	ldr	r1, [pc, #44]	; (1c308 <mbox_dispatcher+0x70>)
   1c2da:	2202      	movs	r2, #2
   1c2dc:	9300      	str	r3, [sp, #0]
   1c2de:	f00c f851 	bl	28384 <z_log_msg_runtime_create.constprop.0>
	if (data->cb[channel] != NULL) {
   1c2e2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1c2e6:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1c2ea:	b145      	cbz	r5, 1c2fe <mbox_dispatcher+0x66>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1c2ec:	2300      	movs	r3, #0
   1c2ee:	4621      	mov	r1, r4
   1c2f0:	4630      	mov	r0, r6
   1c2f2:	46ac      	mov	ip, r5
   1c2f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1c2f6:	b004      	add	sp, #16
   1c2f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1c2fc:	4760      	bx	ip
}
   1c2fe:	b004      	add	sp, #16
   1c300:	bd70      	pop	{r4, r5, r6, pc}
   1c302:	bf00      	nop
   1c304:	0002f93f 	.word	0x0002f93f
   1c308:	0002a430 	.word	0x0002a430
   1c30c:	0002f95b 	.word	0x0002f95b

0001c310 <mbox_nrf_set_enabled>:
{
   1c310:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c312:	290f      	cmp	r1, #15
{
   1c314:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1c316:	6905      	ldr	r5, [r0, #16]
{
   1c318:	b085      	sub	sp, #20
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1c31a:	d841      	bhi.n	1c3a0 <mbox_nrf_set_enabled+0x90>
   1c31c:	6843      	ldr	r3, [r0, #4]
   1c31e:	681b      	ldr	r3, [r3, #0]
   1c320:	40cb      	lsrs	r3, r1
   1c322:	07db      	lsls	r3, r3, #31
   1c324:	d53c      	bpl.n	1c3a0 <mbox_nrf_set_enabled+0x90>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1c326:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c32a:	40cb      	lsrs	r3, r1
   1c32c:	f003 0301 	and.w	r3, r3, #1
   1c330:	b91a      	cbnz	r2, 1c33a <mbox_nrf_set_enabled+0x2a>
   1c332:	bb0b      	cbnz	r3, 1c378 <mbox_nrf_set_enabled+0x68>
		return -EALREADY;
   1c334:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1c338:	e030      	b.n	1c39c <mbox_nrf_set_enabled+0x8c>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1c33a:	2b00      	cmp	r3, #0
   1c33c:	d1fa      	bne.n	1c334 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1c33e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1c342:	b943      	cbnz	r3, 1c356 <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   1c344:	4a18      	ldr	r2, [pc, #96]	; (1c3a8 <mbox_nrf_set_enabled+0x98>)
   1c346:	4618      	mov	r0, r3
   1c348:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1c34c:	4917      	ldr	r1, [pc, #92]	; (1c3ac <mbox_nrf_set_enabled+0x9c>)
   1c34e:	2202      	movs	r2, #2
   1c350:	9300      	str	r3, [sp, #0]
   1c352:	f00c f817 	bl	28384 <z_log_msg_runtime_create.constprop.0>
	if (enable && data->enabled_mask == 0) {
   1c356:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c35a:	b913      	cbnz	r3, 1c362 <mbox_nrf_set_enabled+0x52>
		irq_enable(DT_INST_IRQN(0));
   1c35c:	202a      	movs	r0, #42	; 0x2a
   1c35e:	f7f3 fd35 	bl	fdcc <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1c362:	2201      	movs	r2, #1
   1c364:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c368:	40a2      	lsls	r2, r4
   1c36a:	4313      	orrs	r3, r2
   1c36c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1c370:	b2e0      	uxtb	r0, r4
   1c372:	f000 ff87 	bl	1d284 <nrfx_ipc_receive_event_enable>
   1c376:	e00a      	b.n	1c38e <mbox_nrf_set_enabled+0x7e>
		nrfx_ipc_receive_event_disable(channel);
   1c378:	b2c8      	uxtb	r0, r1
   1c37a:	f000 ffa1 	bl	1d2c0 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1c37e:	2201      	movs	r2, #1
   1c380:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c384:	40a2      	lsls	r2, r4
   1c386:	ea23 0302 	bic.w	r3, r3, r2
   1c38a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1c38e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1c392:	b913      	cbnz	r3, 1c39a <mbox_nrf_set_enabled+0x8a>
		irq_disable(DT_INST_IRQN(0));
   1c394:	202a      	movs	r0, #42	; 0x2a
   1c396:	f7f3 fd27 	bl	fde8 <arch_irq_disable>
	return 0;
   1c39a:	2000      	movs	r0, #0
}
   1c39c:	b005      	add	sp, #20
   1c39e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1c3a0:	f06f 0015 	mvn.w	r0, #21
   1c3a4:	e7fa      	b.n	1c39c <mbox_nrf_set_enabled+0x8c>
   1c3a6:	bf00      	nop
   1c3a8:	0002f978 	.word	0x0002f978
   1c3ac:	0002a430 	.word	0x0002a430

0001c3b0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1c3b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1c3b2:	ab0b      	add	r3, sp, #44	; 0x2c
   1c3b4:	9305      	str	r3, [sp, #20]
   1c3b6:	9303      	str	r3, [sp, #12]
   1c3b8:	4b05      	ldr	r3, [pc, #20]	; (1c3d0 <z_log_msg_runtime_create.constprop.0+0x20>)
   1c3ba:	2201      	movs	r2, #1
   1c3bc:	9302      	str	r3, [sp, #8]
   1c3be:	2300      	movs	r3, #0
   1c3c0:	4618      	mov	r0, r3
   1c3c2:	e9cd 3300 	strd	r3, r3, [sp]
   1c3c6:	f7f1 fe23 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   1c3ca:	b007      	add	sp, #28
   1c3cc:	f85d fb04 	ldr.w	pc, [sp], #4
   1c3d0:	0002f9d5 	.word	0x0002f9d5

0001c3d4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1c3d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1c3d6:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1c3d8:	f7f1 fd68 	bl	deac <z_impl_log_panic>
   1c3dc:	4b06      	ldr	r3, [pc, #24]	; (1c3f8 <k_sys_fatal_error_handler+0x24>)
   1c3de:	4620      	mov	r0, r4
   1c3e0:	9302      	str	r3, [sp, #8]
   1c3e2:	2201      	movs	r2, #1
   1c3e4:	4623      	mov	r3, r4
   1c3e6:	e9cd 4400 	strd	r4, r4, [sp]
   1c3ea:	4904      	ldr	r1, [pc, #16]	; (1c3fc <k_sys_fatal_error_handler+0x28>)
   1c3ec:	f7ff ffe0 	bl	1c3b0 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   1c3f0:	4620      	mov	r0, r4
   1c3f2:	f7f4 f98b 	bl	1070c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1c3f6:	bf00      	nop
   1c3f8:	0002f9d5 	.word	0x0002f9d5
   1c3fc:	0002a3f8 	.word	0x0002a3f8

0001c400 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c404:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1c406:	4b15      	ldr	r3, [pc, #84]	; (1c45c <tfm_ns_interface_dispatch+0x5c>)
   1c408:	4604      	mov	r4, r0
   1c40a:	f893 8000 	ldrb.w	r8, [r3]
   1c40e:	460d      	mov	r5, r1
   1c410:	4616      	mov	r6, r2
   1c412:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1c414:	f1b8 0f00 	cmp.w	r8, #0
   1c418:	d115      	bne.n	1c446 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1c41a:	4668      	mov	r0, sp
   1c41c:	f009 fb24 	bl	25a68 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1c420:	463a      	mov	r2, r7
   1c422:	4631      	mov	r1, r6
   1c424:	4628      	mov	r0, r5
   1c426:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1c428:	47a0      	blx	r4
   1c42a:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1c42c:	4668      	mov	r0, sp
   1c42e:	f009 fb1c 	bl	25a6a <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1c432:	f1b8 0f00 	cmp.w	r8, #0
   1c436:	d002      	beq.n	1c43e <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1c438:	4809      	ldr	r0, [pc, #36]	; (1c460 <tfm_ns_interface_dispatch+0x60>)
   1c43a:	f003 f9bd 	bl	1f7b8 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1c43e:	4620      	mov	r0, r4
   1c440:	b022      	add	sp, #136	; 0x88
   1c442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1c446:	f04f 32ff 	mov.w	r2, #4294967295
   1c44a:	f04f 33ff 	mov.w	r3, #4294967295
   1c44e:	4804      	ldr	r0, [pc, #16]	; (1c460 <tfm_ns_interface_dispatch+0x60>)
   1c450:	f003 f8e2 	bl	1f618 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1c454:	2800      	cmp	r0, #0
   1c456:	d0e0      	beq.n	1c41a <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1c458:	241f      	movs	r4, #31
   1c45a:	e7f0      	b.n	1c43e <tfm_ns_interface_dispatch+0x3e>
   1c45c:	200221ee 	.word	0x200221ee
   1c460:	20008abc 	.word	0x20008abc

0001c464 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1c464:	b530      	push	{r4, r5, lr}
   1c466:	b095      	sub	sp, #84	; 0x54
   1c468:	4605      	mov	r5, r0
   1c46a:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1c46c:	2230      	movs	r2, #48	; 0x30
   1c46e:	2100      	movs	r1, #0
   1c470:	a808      	add	r0, sp, #32
   1c472:	f00d f838 	bl	294e6 <memset>
   1c476:	233f      	movs	r3, #63	; 0x3f
   1c478:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1c47a:	ab07      	add	r3, sp, #28
   1c47c:	9303      	str	r3, [sp, #12]
   1c47e:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1c480:	9406      	str	r4, [sp, #24]
   1c482:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1c486:	b154      	cbz	r4, 1c49e <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1c488:	2301      	movs	r3, #1
   1c48a:	aa05      	add	r2, sp, #20
   1c48c:	9200      	str	r2, [sp, #0]
   1c48e:	2100      	movs	r1, #0
   1c490:	4804      	ldr	r0, [pc, #16]	; (1c4a4 <psa_generate_random+0x40>)
   1c492:	9301      	str	r3, [sp, #4]
   1c494:	aa03      	add	r2, sp, #12
   1c496:	f000 f807 	bl	1c4a8 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1c49a:	b015      	add	sp, #84	; 0x54
   1c49c:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1c49e:	4620      	mov	r0, r4
   1c4a0:	e7fb      	b.n	1c49a <psa_generate_random+0x36>
   1c4a2:	bf00      	nop
   1c4a4:	40000100 	.word	0x40000100

0001c4a8 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1c4a8:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1c4aa:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1c4ae:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1c4b2:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1c4b4:	d20d      	bcs.n	1c4d2 <psa_call+0x2a>
        (type < INT16_MIN) ||
   1c4b6:	ea43 0504 	orr.w	r5, r3, r4
   1c4ba:	2dff      	cmp	r5, #255	; 0xff
   1c4bc:	d809      	bhi.n	1c4d2 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1c4be:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1c4c2:	4613      	mov	r3, r2
   1c4c4:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1c4c8:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1c4ca:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1c4cc:	4803      	ldr	r0, [pc, #12]	; (1c4dc <psa_call+0x34>)
   1c4ce:	f7ff bf97 	b.w	1c400 <tfm_ns_interface_dispatch>
}
   1c4d2:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1c4d6:	bc30      	pop	{r4, r5}
   1c4d8:	4770      	bx	lr
   1c4da:	bf00      	nop
   1c4dc:	00007c21 	.word	0x00007c21

0001c4e0 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1c4e0:	2300      	movs	r3, #0
{
   1c4e2:	b507      	push	{r0, r1, r2, lr}
   1c4e4:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1c4e6:	9300      	str	r3, [sp, #0]
   1c4e8:	4601      	mov	r1, r0
   1c4ea:	4803      	ldr	r0, [pc, #12]	; (1c4f8 <psa_connect+0x18>)
   1c4ec:	f7ff ff88 	bl	1c400 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1c4f0:	b003      	add	sp, #12
   1c4f2:	f85d fb04 	ldr.w	pc, [sp], #4
   1c4f6:	bf00      	nop
   1c4f8:	00007c19 	.word	0x00007c19

0001c4fc <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1c4fc:	2300      	movs	r3, #0
{
   1c4fe:	b507      	push	{r0, r1, r2, lr}
   1c500:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1c502:	461a      	mov	r2, r3
   1c504:	9300      	str	r3, [sp, #0]
   1c506:	4803      	ldr	r0, [pc, #12]	; (1c514 <psa_close+0x18>)
   1c508:	f7ff ff7a 	bl	1c400 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1c50c:	b003      	add	sp, #12
   1c50e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c512:	bf00      	nop
   1c514:	00007c11 	.word	0x00007c11

0001c518 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1c518:	4b04      	ldr	r3, [pc, #16]	; (1c52c <SystemCoreClockUpdate+0x14>)
   1c51a:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1c51e:	4b04      	ldr	r3, [pc, #16]	; (1c530 <SystemCoreClockUpdate+0x18>)
   1c520:	f002 0203 	and.w	r2, r2, #3
   1c524:	40d3      	lsrs	r3, r2
   1c526:	4a03      	ldr	r2, [pc, #12]	; (1c534 <SystemCoreClockUpdate+0x1c>)
   1c528:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1c52a:	4770      	bx	lr
   1c52c:	40005000 	.word	0x40005000
   1c530:	07a12000 	.word	0x07a12000
   1c534:	20008684 	.word	0x20008684

0001c538 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1c538:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c53a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1c53c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1c53e:	fab2 f382 	clz	r3, r2
   1c542:	f1c3 031f 	rsb	r3, r3, #31
   1c546:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c548:	fa05 f403 	lsl.w	r4, r5, r3
   1c54c:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c550:	e8d0 6fef 	ldaex	r6, [r0]
   1c554:	4296      	cmp	r6, r2
   1c556:	d104      	bne.n	1c562 <nrfx_flag32_alloc+0x2a>
   1c558:	e8c0 4fec 	stlex	ip, r4, [r0]
   1c55c:	f1bc 0f00 	cmp.w	ip, #0
   1c560:	d1f6      	bne.n	1c550 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1c562:	d1eb      	bne.n	1c53c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1c564:	4801      	ldr	r0, [pc, #4]	; (1c56c <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1c566:	700b      	strb	r3, [r1, #0]
}
   1c568:	bd70      	pop	{r4, r5, r6, pc}
   1c56a:	bf00      	nop
   1c56c:	0bad0000 	.word	0x0bad0000

0001c570 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1c570:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1c572:	6803      	ldr	r3, [r0, #0]
   1c574:	40cb      	lsrs	r3, r1
   1c576:	07db      	lsls	r3, r3, #31
   1c578:	d410      	bmi.n	1c59c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1c57a:	2301      	movs	r3, #1
   1c57c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1c57e:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1c580:	ea43 0102 	orr.w	r1, r3, r2
   1c584:	e8d0 4fef 	ldaex	r4, [r0]
   1c588:	4294      	cmp	r4, r2
   1c58a:	d104      	bne.n	1c596 <nrfx_flag32_free+0x26>
   1c58c:	e8c0 1fec 	stlex	ip, r1, [r0]
   1c590:	f1bc 0f00 	cmp.w	ip, #0
   1c594:	d1f6      	bne.n	1c584 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1c596:	d1f2      	bne.n	1c57e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1c598:	4801      	ldr	r0, [pc, #4]	; (1c5a0 <nrfx_flag32_free+0x30>)
}
   1c59a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1c59c:	4801      	ldr	r0, [pc, #4]	; (1c5a4 <nrfx_flag32_free+0x34>)
   1c59e:	e7fc      	b.n	1c59a <nrfx_flag32_free+0x2a>
   1c5a0:	0bad0000 	.word	0x0bad0000
   1c5a4:	0bad0004 	.word	0x0bad0004

0001c5a8 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1c5a8:	2200      	movs	r2, #0
{
   1c5aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c5ac:	4b62      	ldr	r3, [pc, #392]	; (1c738 <clock_stop+0x190>)
    switch (domain)
   1c5ae:	2803      	cmp	r0, #3
   1c5b0:	d838      	bhi.n	1c624 <clock_stop+0x7c>
   1c5b2:	e8df f000 	tbb	[pc, r0]
   1c5b6:	0d02      	.short	0x0d02
   1c5b8:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1c5ba:	2102      	movs	r1, #2
   1c5bc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c5c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1c5c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5c8:	2201      	movs	r2, #1
   1c5ca:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1c5cc:	2400      	movs	r4, #0
   1c5ce:	e009      	b.n	1c5e4 <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1c5d0:	2101      	movs	r1, #1
   1c5d2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c5d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1c5da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1c5de:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5e2:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1c5e4:	2301      	movs	r3, #1
   1c5e6:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1c5ea:	2803      	cmp	r0, #3
   1c5ec:	f200 8093 	bhi.w	1c716 <clock_stop+0x16e>
   1c5f0:	e8df f000 	tbb	[pc, r0]
   1c5f4:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1c5f8:	f44f 7100 	mov.w	r1, #512	; 0x200
   1c5fc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c600:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1c604:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c608:	2201      	movs	r2, #1
   1c60a:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1c60c:	e7de      	b.n	1c5cc <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1c60e:	f44f 7180 	mov.w	r1, #256	; 0x100
   1c612:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c616:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1c61a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c61e:	2201      	movs	r2, #1
   1c620:	61da      	str	r2, [r3, #28]
   1c622:	e7d3      	b.n	1c5cc <clock_stop+0x24>
            NRFX_ASSERT(0);
   1c624:	4945      	ldr	r1, [pc, #276]	; (1c73c <clock_stop+0x194>)
   1c626:	4846      	ldr	r0, [pc, #280]	; (1c740 <clock_stop+0x198>)
   1c628:	23d8      	movs	r3, #216	; 0xd8
   1c62a:	4a46      	ldr	r2, [pc, #280]	; (1c744 <clock_stop+0x19c>)
   1c62c:	f008 f9bb 	bl	249a6 <assert_print>
   1c630:	21d8      	movs	r1, #216	; 0xd8
   1c632:	4844      	ldr	r0, [pc, #272]	; (1c744 <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1c634:	f008 f9b0 	bl	24998 <assert_post_action>
    switch (domain)
   1c638:	f242 7510 	movw	r5, #10000	; 0x2710
   1c63c:	4e3e      	ldr	r6, [pc, #248]	; (1c738 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1c63e:	b194      	cbz	r4, 1c666 <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c640:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1c644:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1c648:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c64a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1c64e:	03d9      	lsls	r1, r3, #15
   1c650:	d507      	bpl.n	1c662 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1c652:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c656:	2801      	cmp	r0, #1
   1c658:	d103      	bne.n	1c662 <clock_stop+0xba>
   1c65a:	f00b ff09 	bl	28470 <nrfx_busy_wait>
   1c65e:	3d01      	subs	r5, #1
   1c660:	d1ed      	bne.n	1c63e <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1c662:	b002      	add	sp, #8
   1c664:	bd70      	pop	{r4, r5, r6, pc}
   1c666:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1c66a:	03da      	lsls	r2, r3, #15
   1c66c:	d5f9      	bpl.n	1c662 <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1c66e:	2001      	movs	r0, #1
   1c670:	f00b fefe 	bl	28470 <nrfx_busy_wait>
   1c674:	3d01      	subs	r5, #1
   1c676:	d1f6      	bne.n	1c666 <clock_stop+0xbe>
   1c678:	e7f3      	b.n	1c662 <clock_stop+0xba>
    switch (domain)
   1c67a:	f242 7510 	movw	r5, #10000	; 0x2710
   1c67e:	4e2e      	ldr	r6, [pc, #184]	; (1c738 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1c680:	b18c      	cbz	r4, 1c6a6 <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c682:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1c686:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1c68a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c68c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1c690:	03db      	lsls	r3, r3, #15
   1c692:	d5e6      	bpl.n	1c662 <clock_stop+0xba>
   1c694:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c698:	2801      	cmp	r0, #1
   1c69a:	d1e2      	bne.n	1c662 <clock_stop+0xba>
   1c69c:	f00b fee8 	bl	28470 <nrfx_busy_wait>
   1c6a0:	3d01      	subs	r5, #1
   1c6a2:	d1ed      	bne.n	1c680 <clock_stop+0xd8>
   1c6a4:	e7dd      	b.n	1c662 <clock_stop+0xba>
   1c6a6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1c6aa:	03d8      	lsls	r0, r3, #15
   1c6ac:	d5d9      	bpl.n	1c662 <clock_stop+0xba>
   1c6ae:	2001      	movs	r0, #1
   1c6b0:	f00b fede 	bl	28470 <nrfx_busy_wait>
   1c6b4:	3d01      	subs	r5, #1
   1c6b6:	d1f6      	bne.n	1c6a6 <clock_stop+0xfe>
   1c6b8:	e7d3      	b.n	1c662 <clock_stop+0xba>
    switch (domain)
   1c6ba:	f242 7510 	movw	r5, #10000	; 0x2710
   1c6be:	4e1e      	ldr	r6, [pc, #120]	; (1c738 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1c6c0:	b18c      	cbz	r4, 1c6e6 <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1c6c2:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1c6c6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1c6ca:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1c6cc:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1c6d0:	03d9      	lsls	r1, r3, #15
   1c6d2:	d5c6      	bpl.n	1c662 <clock_stop+0xba>
   1c6d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c6d8:	2801      	cmp	r0, #1
   1c6da:	d1c2      	bne.n	1c662 <clock_stop+0xba>
   1c6dc:	f00b fec8 	bl	28470 <nrfx_busy_wait>
   1c6e0:	3d01      	subs	r5, #1
   1c6e2:	d1ed      	bne.n	1c6c0 <clock_stop+0x118>
   1c6e4:	e7bd      	b.n	1c662 <clock_stop+0xba>
   1c6e6:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1c6ea:	03da      	lsls	r2, r3, #15
   1c6ec:	d5b9      	bpl.n	1c662 <clock_stop+0xba>
   1c6ee:	2001      	movs	r0, #1
   1c6f0:	f00b febe 	bl	28470 <nrfx_busy_wait>
   1c6f4:	3d01      	subs	r5, #1
   1c6f6:	d1f6      	bne.n	1c6e6 <clock_stop+0x13e>
   1c6f8:	e7b3      	b.n	1c662 <clock_stop+0xba>
    switch (domain)
   1c6fa:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1c6fe:	4e0e      	ldr	r6, [pc, #56]	; (1c738 <clock_stop+0x190>)
   1c700:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1c704:	03db      	lsls	r3, r3, #15
   1c706:	d5ac      	bpl.n	1c662 <clock_stop+0xba>
   1c708:	b984      	cbnz	r4, 1c72c <clock_stop+0x184>
   1c70a:	2001      	movs	r0, #1
   1c70c:	f00b feb0 	bl	28470 <nrfx_busy_wait>
   1c710:	3d01      	subs	r5, #1
   1c712:	d1f5      	bne.n	1c700 <clock_stop+0x158>
   1c714:	e7a5      	b.n	1c662 <clock_stop+0xba>
            NRFX_ASSERT(0);
   1c716:	4909      	ldr	r1, [pc, #36]	; (1c73c <clock_stop+0x194>)
   1c718:	4809      	ldr	r0, [pc, #36]	; (1c740 <clock_stop+0x198>)
   1c71a:	f240 3347 	movw	r3, #839	; 0x347
   1c71e:	4a0a      	ldr	r2, [pc, #40]	; (1c748 <clock_stop+0x1a0>)
   1c720:	f008 f941 	bl	249a6 <assert_print>
   1c724:	f240 3147 	movw	r1, #839	; 0x347
   1c728:	4807      	ldr	r0, [pc, #28]	; (1c748 <clock_stop+0x1a0>)
   1c72a:	e783      	b.n	1c634 <clock_stop+0x8c>
   1c72c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c730:	2801      	cmp	r0, #1
   1c732:	d0eb      	beq.n	1c70c <clock_stop+0x164>
   1c734:	e795      	b.n	1c662 <clock_stop+0xba>
   1c736:	bf00      	nop
   1c738:	40005000 	.word	0x40005000
   1c73c:	00030a97 	.word	0x00030a97
   1c740:	0002b339 	.word	0x0002b339
   1c744:	0002f9f2 	.word	0x0002f9f2
   1c748:	0002fa2f 	.word	0x0002fa2f

0001c74c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1c74c:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1c74e:	b958      	cbnz	r0, 1c768 <nrfx_clock_init+0x1c>
   1c750:	490a      	ldr	r1, [pc, #40]	; (1c77c <nrfx_clock_init+0x30>)
   1c752:	480b      	ldr	r0, [pc, #44]	; (1c780 <nrfx_clock_init+0x34>)
   1c754:	f240 1315 	movw	r3, #277	; 0x115
   1c758:	4a0a      	ldr	r2, [pc, #40]	; (1c784 <nrfx_clock_init+0x38>)
   1c75a:	f008 f924 	bl	249a6 <assert_print>
   1c75e:	f240 1115 	movw	r1, #277	; 0x115
   1c762:	4808      	ldr	r0, [pc, #32]	; (1c784 <nrfx_clock_init+0x38>)
   1c764:	f008 f918 	bl	24998 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1c768:	4b07      	ldr	r3, [pc, #28]	; (1c788 <nrfx_clock_init+0x3c>)
   1c76a:	791a      	ldrb	r2, [r3, #4]
   1c76c:	b922      	cbnz	r2, 1c778 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1c76e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1c770:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1c772:	4806      	ldr	r0, [pc, #24]	; (1c78c <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1c774:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c776:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1c778:	4805      	ldr	r0, [pc, #20]	; (1c790 <nrfx_clock_init+0x44>)
    return err_code;
   1c77a:	e7fc      	b.n	1c776 <nrfx_clock_init+0x2a>
   1c77c:	0002fa63 	.word	0x0002fa63
   1c780:	0002b339 	.word	0x0002b339
   1c784:	0002f9f2 	.word	0x0002f9f2
   1c788:	20021330 	.word	0x20021330
   1c78c:	0bad0000 	.word	0x0bad0000
   1c790:	0bad000c 	.word	0x0bad000c

0001c794 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1c794:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1c796:	4b0f      	ldr	r3, [pc, #60]	; (1c7d4 <nrfx_clock_enable+0x40>)
   1c798:	791b      	ldrb	r3, [r3, #4]
   1c79a:	b95b      	cbnz	r3, 1c7b4 <nrfx_clock_enable+0x20>
   1c79c:	490e      	ldr	r1, [pc, #56]	; (1c7d8 <nrfx_clock_enable+0x44>)
   1c79e:	480f      	ldr	r0, [pc, #60]	; (1c7dc <nrfx_clock_enable+0x48>)
   1c7a0:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1c7a4:	4a0e      	ldr	r2, [pc, #56]	; (1c7e0 <nrfx_clock_enable+0x4c>)
   1c7a6:	f008 f8fe 	bl	249a6 <assert_print>
   1c7aa:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1c7ae:	480c      	ldr	r0, [pc, #48]	; (1c7e0 <nrfx_clock_enable+0x4c>)
   1c7b0:	f008 f8f2 	bl	24998 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1c7b4:	2005      	movs	r0, #5
   1c7b6:	f7f3 fb2b 	bl	fe10 <arch_irq_is_enabled>
   1c7ba:	b910      	cbnz	r0, 1c7c2 <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1c7bc:	2005      	movs	r0, #5
   1c7be:	f7f3 fb05 	bl	fdcc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c7c2:	2201      	movs	r2, #1
   1c7c4:	4b07      	ldr	r3, [pc, #28]	; (1c7e4 <nrfx_clock_enable+0x50>)
   1c7c6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1c7ca:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1c7ce:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1c7d2:	bd08      	pop	{r3, pc}
   1c7d4:	20021330 	.word	0x20021330
   1c7d8:	0002fa71 	.word	0x0002fa71
   1c7dc:	0002b339 	.word	0x0002b339
   1c7e0:	0002f9f2 	.word	0x0002f9f2
   1c7e4:	40005000 	.word	0x40005000

0001c7e8 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1c7e8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1c7ea:	4b38      	ldr	r3, [pc, #224]	; (1c8cc <nrfx_clock_start+0xe4>)
   1c7ec:	791b      	ldrb	r3, [r3, #4]
   1c7ee:	b95b      	cbnz	r3, 1c808 <nrfx_clock_start+0x20>
   1c7f0:	4937      	ldr	r1, [pc, #220]	; (1c8d0 <nrfx_clock_start+0xe8>)
   1c7f2:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1c7f6:	4a37      	ldr	r2, [pc, #220]	; (1c8d4 <nrfx_clock_start+0xec>)
   1c7f8:	4837      	ldr	r0, [pc, #220]	; (1c8d8 <nrfx_clock_start+0xf0>)
   1c7fa:	f008 f8d4 	bl	249a6 <assert_print>
   1c7fe:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1c802:	4834      	ldr	r0, [pc, #208]	; (1c8d4 <nrfx_clock_start+0xec>)
   1c804:	f008 f8c8 	bl	24998 <assert_post_action>
    switch (domain)
   1c808:	4b34      	ldr	r3, [pc, #208]	; (1c8dc <nrfx_clock_start+0xf4>)
   1c80a:	2803      	cmp	r0, #3
   1c80c:	d853      	bhi.n	1c8b6 <nrfx_clock_start+0xce>
   1c80e:	e8df f000 	tbb	[pc, r0]
   1c812:	3002      	.short	0x3002
   1c814:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c816:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c81a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1c81e:	03c9      	lsls	r1, r1, #15
   1c820:	d511      	bpl.n	1c846 <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c822:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1c826:	2b02      	cmp	r3, #2
   1c828:	d11c      	bne.n	1c864 <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c82a:	4a2c      	ldr	r2, [pc, #176]	; (1c8dc <nrfx_clock_start+0xf4>)
   1c82c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c830:	2300      	movs	r3, #0
   1c832:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1c836:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1c83a:	2302      	movs	r3, #2
   1c83c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c840:	2301      	movs	r3, #1
   1c842:	6093      	str	r3, [r2, #8]
}
   1c844:	e00d      	b.n	1c862 <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1c846:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1c84a:	07d2      	lsls	r2, r2, #31
   1c84c:	d50f      	bpl.n	1c86e <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c84e:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1c852:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1c856:	3a01      	subs	r2, #1
   1c858:	2a01      	cmp	r2, #1
   1c85a:	d805      	bhi.n	1c868 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1c85c:	2202      	movs	r2, #2
   1c85e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1c862:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1c864:	2b01      	cmp	r3, #1
   1c866:	d002      	beq.n	1c86e <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1c868:	2000      	movs	r0, #0
   1c86a:	f7ff fe9d 	bl	1c5a8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1c86e:	2301      	movs	r3, #1
   1c870:	e7db      	b.n	1c82a <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c872:	2200      	movs	r2, #0
   1c874:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1c878:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1c87c:	2201      	movs	r2, #1
   1c87e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c882:	601a      	str	r2, [r3, #0]
}
   1c884:	e7ed      	b.n	1c862 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c886:	2200      	movs	r2, #0
   1c888:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1c88c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1c890:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c894:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c898:	2201      	movs	r2, #1
   1c89a:	621a      	str	r2, [r3, #32]
}
   1c89c:	e7e1      	b.n	1c862 <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c89e:	2200      	movs	r2, #0
   1c8a0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1c8a4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1c8a8:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c8ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c8b0:	2201      	movs	r2, #1
   1c8b2:	619a      	str	r2, [r3, #24]
}
   1c8b4:	e7d5      	b.n	1c862 <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1c8b6:	490a      	ldr	r1, [pc, #40]	; (1c8e0 <nrfx_clock_start+0xf8>)
   1c8b8:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1c8bc:	4a05      	ldr	r2, [pc, #20]	; (1c8d4 <nrfx_clock_start+0xec>)
   1c8be:	4806      	ldr	r0, [pc, #24]	; (1c8d8 <nrfx_clock_start+0xf0>)
   1c8c0:	f008 f871 	bl	249a6 <assert_print>
   1c8c4:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1c8c8:	e79b      	b.n	1c802 <nrfx_clock_start+0x1a>
   1c8ca:	bf00      	nop
   1c8cc:	20021330 	.word	0x20021330
   1c8d0:	0002fa71 	.word	0x0002fa71
   1c8d4:	0002f9f2 	.word	0x0002f9f2
   1c8d8:	0002b339 	.word	0x0002b339
   1c8dc:	40005000 	.word	0x40005000
   1c8e0:	00030a97 	.word	0x00030a97

0001c8e4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1c8e4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1c8e6:	4b09      	ldr	r3, [pc, #36]	; (1c90c <nrfx_clock_stop+0x28>)
   1c8e8:	791b      	ldrb	r3, [r3, #4]
   1c8ea:	b95b      	cbnz	r3, 1c904 <nrfx_clock_stop+0x20>
   1c8ec:	4908      	ldr	r1, [pc, #32]	; (1c910 <nrfx_clock_stop+0x2c>)
   1c8ee:	4809      	ldr	r0, [pc, #36]	; (1c914 <nrfx_clock_stop+0x30>)
   1c8f0:	f240 13ad 	movw	r3, #429	; 0x1ad
   1c8f4:	4a08      	ldr	r2, [pc, #32]	; (1c918 <nrfx_clock_stop+0x34>)
   1c8f6:	f008 f856 	bl	249a6 <assert_print>
   1c8fa:	f240 11ad 	movw	r1, #429	; 0x1ad
   1c8fe:	4806      	ldr	r0, [pc, #24]	; (1c918 <nrfx_clock_stop+0x34>)
   1c900:	f008 f84a 	bl	24998 <assert_post_action>
    clock_stop(domain);
}
   1c904:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1c908:	f7ff be4e 	b.w	1c5a8 <clock_stop>
   1c90c:	20021330 	.word	0x20021330
   1c910:	0002fa71 	.word	0x0002fa71
   1c914:	0002b339 	.word	0x0002b339
   1c918:	0002f9f2 	.word	0x0002f9f2

0001c91c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1c91c:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c91e:	4b28      	ldr	r3, [pc, #160]	; (1c9c0 <nrfx_power_clock_irq_handler+0xa4>)
   1c920:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1c924:	b152      	cbz	r2, 1c93c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c926:	2000      	movs	r0, #0
   1c928:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1c92c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1c930:	2201      	movs	r2, #1
   1c932:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1c936:	4b23      	ldr	r3, [pc, #140]	; (1c9c4 <nrfx_power_clock_irq_handler+0xa8>)
   1c938:	681b      	ldr	r3, [r3, #0]
   1c93a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c93c:	4b20      	ldr	r3, [pc, #128]	; (1c9c0 <nrfx_power_clock_irq_handler+0xa4>)
   1c93e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1c942:	b18a      	cbz	r2, 1c968 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c944:	2200      	movs	r2, #0
   1c946:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1c94a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c94e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c952:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1c956:	f002 0203 	and.w	r2, r2, #3
   1c95a:	2a01      	cmp	r2, #1
   1c95c:	f04f 0102 	mov.w	r1, #2
   1c960:	d126      	bne.n	1c9b0 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c962:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c966:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c968:	4b15      	ldr	r3, [pc, #84]	; (1c9c0 <nrfx_power_clock_irq_handler+0xa4>)
   1c96a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1c96e:	b162      	cbz	r2, 1c98a <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c970:	2200      	movs	r2, #0
   1c972:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1c976:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1c97a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c97e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1c982:	4b10      	ldr	r3, [pc, #64]	; (1c9c4 <nrfx_power_clock_irq_handler+0xa8>)
   1c984:	2004      	movs	r0, #4
   1c986:	681b      	ldr	r3, [r3, #0]
   1c988:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c98a:	4b0d      	ldr	r3, [pc, #52]	; (1c9c0 <nrfx_power_clock_irq_handler+0xa4>)
   1c98c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1c990:	b1aa      	cbz	r2, 1c9be <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c992:	2200      	movs	r2, #0
   1c994:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1c998:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1c99c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c9a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1c9a4:	4b07      	ldr	r3, [pc, #28]	; (1c9c4 <nrfx_power_clock_irq_handler+0xa8>)
   1c9a6:	2005      	movs	r0, #5
    }
#endif
}
   1c9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1c9ac:	681b      	ldr	r3, [r3, #0]
   1c9ae:	4718      	bx	r3
   1c9b0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1c9b4:	4b03      	ldr	r3, [pc, #12]	; (1c9c4 <nrfx_power_clock_irq_handler+0xa8>)
   1c9b6:	2001      	movs	r0, #1
   1c9b8:	681b      	ldr	r3, [r3, #0]
   1c9ba:	4798      	blx	r3
   1c9bc:	e7d4      	b.n	1c968 <nrfx_power_clock_irq_handler+0x4c>
}
   1c9be:	bd10      	pop	{r4, pc}
   1c9c0:	40005000 	.word	0x40005000
   1c9c4:	20021330 	.word	0x20021330

0001c9c8 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1c9c8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1c9ca:	4801      	ldr	r0, [pc, #4]	; (1c9d0 <nrfx_dppi_channel_alloc+0x8>)
   1c9cc:	f7ff bdb4 	b.w	1c538 <nrfx_flag32_alloc>
   1c9d0:	20008688 	.word	0x20008688

0001c9d4 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1c9d4:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1c9d6:	4a04      	ldr	r2, [pc, #16]	; (1c9e8 <nrfx_dppi_channel_free+0x14>)
   1c9d8:	4083      	lsls	r3, r0
{
   1c9da:	4601      	mov	r1, r0
   1c9dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1c9e0:	4802      	ldr	r0, [pc, #8]	; (1c9ec <nrfx_dppi_channel_free+0x18>)
   1c9e2:	f7ff bdc5 	b.w	1c570 <nrfx_flag32_free>
   1c9e6:	bf00      	nop
   1c9e8:	40017000 	.word	0x40017000
   1c9ec:	20008688 	.word	0x20008688

0001c9f0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1c9f0:	4b03      	ldr	r3, [pc, #12]	; (1ca00 <pin_in_use_by_te+0x10>)
   1c9f2:	3008      	adds	r0, #8
   1c9f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1c9f8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1c9fc:	4770      	bx	lr
   1c9fe:	bf00      	nop
   1ca00:	2000868c 	.word	0x2000868c

0001ca04 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1ca04:	4b04      	ldr	r3, [pc, #16]	; (1ca18 <pin_has_trigger+0x14>)
   1ca06:	3008      	adds	r0, #8
   1ca08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ca0c:	f010 001c 	ands.w	r0, r0, #28
   1ca10:	bf18      	it	ne
   1ca12:	2001      	movne	r0, #1
   1ca14:	4770      	bx	lr
   1ca16:	bf00      	nop
   1ca18:	2000868c 	.word	0x2000868c

0001ca1c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1ca1c:	4b03      	ldr	r3, [pc, #12]	; (1ca2c <pin_is_output+0x10>)
   1ca1e:	3008      	adds	r0, #8
   1ca20:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ca24:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1ca28:	4770      	bx	lr
   1ca2a:	bf00      	nop
   1ca2c:	2000868c 	.word	0x2000868c

0001ca30 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1ca30:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ca32:	4c0d      	ldr	r4, [pc, #52]	; (1ca68 <call_handler+0x38>)
   1ca34:	f100 0308 	add.w	r3, r0, #8
   1ca38:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1ca3c:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ca3e:	05da      	lsls	r2, r3, #23
{
   1ca40:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ca42:	d507      	bpl.n	1ca54 <call_handler+0x24>
   1ca44:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1ca48:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1ca4c:	6852      	ldr	r2, [r2, #4]
   1ca4e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1ca52:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1ca54:	68a3      	ldr	r3, [r4, #8]
   1ca56:	b12b      	cbz	r3, 1ca64 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1ca58:	4631      	mov	r1, r6
   1ca5a:	4628      	mov	r0, r5
   1ca5c:	68e2      	ldr	r2, [r4, #12]
    }
}
   1ca5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1ca62:	4718      	bx	r3
}
   1ca64:	bd70      	pop	{r4, r5, r6, pc}
   1ca66:	bf00      	nop
   1ca68:	2000868c 	.word	0x2000868c

0001ca6c <release_handler>:
{
   1ca6c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ca6e:	4a18      	ldr	r2, [pc, #96]	; (1cad0 <release_handler+0x64>)
   1ca70:	3008      	adds	r0, #8
   1ca72:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1ca76:	05d9      	lsls	r1, r3, #23
   1ca78:	d51d      	bpl.n	1cab6 <release_handler+0x4a>
   1ca7a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1ca7e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1ca82:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1ca86:	2000      	movs	r0, #0
   1ca88:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1ca8c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1ca90:	f413 7f80 	tst.w	r3, #256	; 0x100
   1ca94:	d003      	beq.n	1ca9e <release_handler+0x32>
   1ca96:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1ca9a:	4299      	cmp	r1, r3
   1ca9c:	d00b      	beq.n	1cab6 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1ca9e:	3001      	adds	r0, #1
   1caa0:	2830      	cmp	r0, #48	; 0x30
   1caa2:	d1f3      	bne.n	1ca8c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1caa4:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1caa6:	480b      	ldr	r0, [pc, #44]	; (1cad4 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1caa8:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1caac:	f7ff fd60 	bl	1c570 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1cab0:	4b09      	ldr	r3, [pc, #36]	; (1cad8 <release_handler+0x6c>)
   1cab2:	4298      	cmp	r0, r3
   1cab4:	d100      	bne.n	1cab8 <release_handler+0x4c>
}
   1cab6:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1cab8:	4908      	ldr	r1, [pc, #32]	; (1cadc <release_handler+0x70>)
   1caba:	4809      	ldr	r0, [pc, #36]	; (1cae0 <release_handler+0x74>)
   1cabc:	f44f 7399 	mov.w	r3, #306	; 0x132
   1cac0:	4a08      	ldr	r2, [pc, #32]	; (1cae4 <release_handler+0x78>)
   1cac2:	f007 ff70 	bl	249a6 <assert_print>
   1cac6:	f44f 7199 	mov.w	r1, #306	; 0x132
   1caca:	4806      	ldr	r0, [pc, #24]	; (1cae4 <release_handler+0x78>)
   1cacc:	f007 ff64 	bl	24998 <assert_post_action>
   1cad0:	2000868c 	.word	0x2000868c
   1cad4:	20008700 	.word	0x20008700
   1cad8:	0bad0000 	.word	0x0bad0000
   1cadc:	0002c1d3 	.word	0x0002c1d3
   1cae0:	0002b339 	.word	0x0002b339
   1cae4:	0002faa4 	.word	0x0002faa4

0001cae8 <pin_handler_trigger_uninit>:
{
   1cae8:	b538      	push	{r3, r4, r5, lr}
   1caea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1caec:	f7ff ff80 	bl	1c9f0 <pin_in_use_by_te>
   1caf0:	4c0b      	ldr	r4, [pc, #44]	; (1cb20 <pin_handler_trigger_uninit+0x38>)
   1caf2:	f102 0508 	add.w	r5, r2, #8
   1caf6:	b160      	cbz	r0, 1cb12 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1caf8:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1cafa:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1cafe:	0b5b      	lsrs	r3, r3, #13
   1cb00:	009b      	lsls	r3, r3, #2
   1cb02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cb06:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1cb0a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1cb0e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1cb12:	4610      	mov	r0, r2
   1cb14:	f7ff ffaa 	bl	1ca6c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1cb18:	2300      	movs	r3, #0
   1cb1a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1cb1e:	bd38      	pop	{r3, r4, r5, pc}
   1cb20:	2000868c 	.word	0x2000868c

0001cb24 <nrf_gpio_pin_port_decode>:
{
   1cb24:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cb26:	6802      	ldr	r2, [r0, #0]
{
   1cb28:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cb2a:	4610      	mov	r0, r2
   1cb2c:	f00b fca2 	bl	28474 <nrf_gpio_pin_present_check>
   1cb30:	b958      	cbnz	r0, 1cb4a <nrf_gpio_pin_port_decode+0x26>
   1cb32:	4910      	ldr	r1, [pc, #64]	; (1cb74 <nrf_gpio_pin_port_decode+0x50>)
   1cb34:	f240 2347 	movw	r3, #583	; 0x247
   1cb38:	4a0f      	ldr	r2, [pc, #60]	; (1cb78 <nrf_gpio_pin_port_decode+0x54>)
   1cb3a:	4810      	ldr	r0, [pc, #64]	; (1cb7c <nrf_gpio_pin_port_decode+0x58>)
   1cb3c:	f007 ff33 	bl	249a6 <assert_print>
   1cb40:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1cb44:	480c      	ldr	r0, [pc, #48]	; (1cb78 <nrf_gpio_pin_port_decode+0x54>)
   1cb46:	f007 ff27 	bl	24998 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1cb4a:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cb4e:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1cb50:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cb52:	d00b      	beq.n	1cb6c <nrf_gpio_pin_port_decode+0x48>
   1cb54:	2a01      	cmp	r2, #1
   1cb56:	d00b      	beq.n	1cb70 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1cb58:	4909      	ldr	r1, [pc, #36]	; (1cb80 <nrf_gpio_pin_port_decode+0x5c>)
   1cb5a:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1cb5e:	4a06      	ldr	r2, [pc, #24]	; (1cb78 <nrf_gpio_pin_port_decode+0x54>)
   1cb60:	4806      	ldr	r0, [pc, #24]	; (1cb7c <nrf_gpio_pin_port_decode+0x58>)
   1cb62:	f007 ff20 	bl	249a6 <assert_print>
   1cb66:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1cb6a:	e7eb      	b.n	1cb44 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1cb6c:	4805      	ldr	r0, [pc, #20]	; (1cb84 <nrf_gpio_pin_port_decode+0x60>)
}
   1cb6e:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1cb70:	4805      	ldr	r0, [pc, #20]	; (1cb88 <nrf_gpio_pin_port_decode+0x64>)
   1cb72:	e7fc      	b.n	1cb6e <nrf_gpio_pin_port_decode+0x4a>
   1cb74:	0002f184 	.word	0x0002f184
   1cb78:	0002f151 	.word	0x0002f151
   1cb7c:	0002b339 	.word	0x0002b339
   1cb80:	00030a97 	.word	0x00030a97
   1cb84:	40842500 	.word	0x40842500
   1cb88:	40842800 	.word	0x40842800

0001cb8c <nrfx_gpiote_input_configure>:
{
   1cb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb8e:	4604      	mov	r4, r0
   1cb90:	4617      	mov	r7, r2
   1cb92:	461d      	mov	r5, r3
   1cb94:	b085      	sub	sp, #20
    if (p_input_config)
   1cb96:	b1d9      	cbz	r1, 1cbd0 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1cb98:	f00b fc7d 	bl	28496 <pin_is_task_output>
   1cb9c:	bb00      	cbnz	r0, 1cbe0 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1cb9e:	460b      	mov	r3, r1
   1cba0:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1cba4:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1cba8:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1cbac:	f10d 020f 	add.w	r2, sp, #15
   1cbb0:	f10d 010e 	add.w	r1, sp, #14
   1cbb4:	4620      	mov	r0, r4
   1cbb6:	f00b fc79 	bl	284ac <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1cbba:	4a44      	ldr	r2, [pc, #272]	; (1cccc <nrfx_gpiote_input_configure+0x140>)
   1cbbc:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1cbc0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1cbc4:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1cbc8:	f043 0301 	orr.w	r3, r3, #1
   1cbcc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1cbd0:	b36f      	cbz	r7, 1cc2e <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1cbd2:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1cbd4:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1cbd6:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1cbd8:	f7ff ff20 	bl	1ca1c <pin_is_output>
   1cbdc:	b110      	cbz	r0, 1cbe4 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1cbde:	b1da      	cbz	r2, 1cc18 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1cbe0:	483b      	ldr	r0, [pc, #236]	; (1ccd0 <nrfx_gpiote_input_configure+0x144>)
   1cbe2:	e026      	b.n	1cc32 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1cbe4:	4839      	ldr	r0, [pc, #228]	; (1cccc <nrfx_gpiote_input_configure+0x140>)
   1cbe6:	f104 0c08 	add.w	ip, r4, #8
   1cbea:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1cbee:	f021 0120 	bic.w	r1, r1, #32
   1cbf2:	04c9      	lsls	r1, r1, #19
   1cbf4:	0cc9      	lsrs	r1, r1, #19
   1cbf6:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1cbfa:	b16a      	cbz	r2, 1cc18 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1cbfc:	2e03      	cmp	r6, #3
   1cbfe:	d8ef      	bhi.n	1cbe0 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1cc00:	687b      	ldr	r3, [r7, #4]
   1cc02:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1cc04:	00ba      	lsls	r2, r7, #2
   1cc06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1cc0a:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1cc0e:	b996      	cbnz	r6, 1cc36 <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1cc10:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1cc14:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1cc18:	4a2c      	ldr	r2, [pc, #176]	; (1cccc <nrfx_gpiote_input_configure+0x140>)
   1cc1a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1cc1e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1cc22:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1cc26:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1cc2a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1cc2e:	bb15      	cbnz	r5, 1cc76 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1cc30:	4828      	ldr	r0, [pc, #160]	; (1ccd4 <nrfx_gpiote_input_configure+0x148>)
}
   1cc32:	b005      	add	sp, #20
   1cc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1cc36:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1cc3a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1cc3e:	f023 0303 	bic.w	r3, r3, #3
   1cc42:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cc46:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1cc4a:	f041 0120 	orr.w	r1, r1, #32
   1cc4e:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1cc52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1cc56:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cc5a:	0223      	lsls	r3, r4, #8
   1cc5c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1cc60:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1cc64:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1cc68:	ea43 030e 	orr.w	r3, r3, lr
   1cc6c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1cc70:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1cc74:	e7d0      	b.n	1cc18 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1cc76:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1cc78:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1cc7c:	f7ff fef6 	bl	1ca6c <release_handler>
    if (!handler)
   1cc80:	2e00      	cmp	r6, #0
   1cc82:	d0d5      	beq.n	1cc30 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1cc84:	4d11      	ldr	r5, [pc, #68]	; (1cccc <nrfx_gpiote_input_configure+0x140>)
   1cc86:	e9d5 2300 	ldrd	r2, r3, [r5]
   1cc8a:	4296      	cmp	r6, r2
   1cc8c:	d101      	bne.n	1cc92 <nrfx_gpiote_input_configure+0x106>
   1cc8e:	429f      	cmp	r7, r3
   1cc90:	d019      	beq.n	1ccc6 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1cc92:	4811      	ldr	r0, [pc, #68]	; (1ccd8 <nrfx_gpiote_input_configure+0x14c>)
   1cc94:	f10d 010f 	add.w	r1, sp, #15
   1cc98:	f7ff fc4e 	bl	1c538 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1cc9c:	4b0d      	ldr	r3, [pc, #52]	; (1ccd4 <nrfx_gpiote_input_configure+0x148>)
   1cc9e:	4298      	cmp	r0, r3
   1cca0:	d1c7      	bne.n	1cc32 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1cca2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1cca6:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ccaa:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1ccae:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ccb0:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1ccb4:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ccb8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1ccbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1ccc0:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1ccc4:	e7b4      	b.n	1cc30 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ccc6:	2200      	movs	r2, #0
   1ccc8:	e7ed      	b.n	1cca6 <nrfx_gpiote_input_configure+0x11a>
   1ccca:	bf00      	nop
   1cccc:	2000868c 	.word	0x2000868c
   1ccd0:	0bad0004 	.word	0x0bad0004
   1ccd4:	0bad0000 	.word	0x0bad0000
   1ccd8:	20008700 	.word	0x20008700

0001ccdc <nrfx_gpiote_output_configure>:
{
   1ccdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ccde:	4604      	mov	r4, r0
   1cce0:	4615      	mov	r5, r2
   1cce2:	b085      	sub	sp, #20
    if (p_config)
   1cce4:	b321      	cbz	r1, 1cd30 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1cce6:	f7ff fe99 	bl	1ca1c <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1ccea:	b920      	cbnz	r0, 1ccf6 <nrfx_gpiote_output_configure+0x1a>
   1ccec:	4620      	mov	r0, r4
   1ccee:	f7ff fe7f 	bl	1c9f0 <pin_in_use_by_te>
   1ccf2:	2800      	cmp	r0, #0
   1ccf4:	d161      	bne.n	1cdba <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1ccf6:	4620      	mov	r0, r4
   1ccf8:	f7ff fe84 	bl	1ca04 <pin_has_trigger>
   1ccfc:	b110      	cbz	r0, 1cd04 <nrfx_gpiote_output_configure+0x28>
   1ccfe:	784b      	ldrb	r3, [r1, #1]
   1cd00:	2b01      	cmp	r3, #1
   1cd02:	d05a      	beq.n	1cdba <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1cd04:	2301      	movs	r3, #1
   1cd06:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1cd0a:	2300      	movs	r3, #0
   1cd0c:	1c4a      	adds	r2, r1, #1
   1cd0e:	e9cd 1300 	strd	r1, r3, [sp]
   1cd12:	4620      	mov	r0, r4
   1cd14:	1c8b      	adds	r3, r1, #2
   1cd16:	f10d 010f 	add.w	r1, sp, #15
   1cd1a:	f00b fbc7 	bl	284ac <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1cd1e:	4a28      	ldr	r2, [pc, #160]	; (1cdc0 <nrfx_gpiote_output_configure+0xe4>)
   1cd20:	f104 0108 	add.w	r1, r4, #8
   1cd24:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1cd28:	f043 0303 	orr.w	r3, r3, #3
   1cd2c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1cd30:	b915      	cbnz	r5, 1cd38 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1cd32:	4824      	ldr	r0, [pc, #144]	; (1cdc4 <nrfx_gpiote_output_configure+0xe8>)
}
   1cd34:	b005      	add	sp, #20
   1cd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1cd38:	4620      	mov	r0, r4
   1cd3a:	f7ff fe6f 	bl	1ca1c <pin_is_output>
        if (pin_is_input(pin))
   1cd3e:	2800      	cmp	r0, #0
   1cd40:	d03b      	beq.n	1cdba <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1cd42:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1cd46:	2300      	movs	r3, #0
   1cd48:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1cd4a:	4e1d      	ldr	r6, [pc, #116]	; (1cdc0 <nrfx_gpiote_output_configure+0xe4>)
   1cd4c:	f104 0708 	add.w	r7, r4, #8
   1cd50:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1cd54:	0089      	lsls	r1, r1, #2
   1cd56:	f020 0020 	bic.w	r0, r0, #32
   1cd5a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1cd5e:	04c0      	lsls	r0, r0, #19
   1cd60:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1cd64:	0cc0      	lsrs	r0, r0, #19
   1cd66:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1cd6a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1cd6e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1cd72:	786a      	ldrb	r2, [r5, #1]
   1cd74:	2a00      	cmp	r2, #0
   1cd76:	d0dc      	beq.n	1cd32 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1cd78:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1cd7c:	78ad      	ldrb	r5, [r5, #2]
   1cd7e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1cd82:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1cd86:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cd8a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1cd8e:	0223      	lsls	r3, r4, #8
   1cd90:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1cd94:	0412      	lsls	r2, r2, #16
   1cd96:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cd9a:	ea43 030e 	orr.w	r3, r3, lr
   1cd9e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1cda0:	052a      	lsls	r2, r5, #20
   1cda2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1cda6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cdaa:	4313      	orrs	r3, r2
   1cdac:	f040 0020 	orr.w	r0, r0, #32
   1cdb0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1cdb4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1cdb8:	e7bb      	b.n	1cd32 <nrfx_gpiote_output_configure+0x56>
{
   1cdba:	4803      	ldr	r0, [pc, #12]	; (1cdc8 <nrfx_gpiote_output_configure+0xec>)
   1cdbc:	e7ba      	b.n	1cd34 <nrfx_gpiote_output_configure+0x58>
   1cdbe:	bf00      	nop
   1cdc0:	2000868c 	.word	0x2000868c
   1cdc4:	0bad0000 	.word	0x0bad0000
   1cdc8:	0bad0004 	.word	0x0bad0004

0001cdcc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1cdcc:	4b01      	ldr	r3, [pc, #4]	; (1cdd4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1cdce:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1cdd2:	4770      	bx	lr
   1cdd4:	2000868c 	.word	0x2000868c

0001cdd8 <nrfx_gpiote_channel_get>:
{
   1cdd8:	4602      	mov	r2, r0
   1cdda:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1cddc:	b959      	cbnz	r1, 1cdf6 <nrfx_gpiote_channel_get+0x1e>
   1cdde:	490c      	ldr	r1, [pc, #48]	; (1ce10 <nrfx_gpiote_channel_get+0x38>)
   1cde0:	480c      	ldr	r0, [pc, #48]	; (1ce14 <nrfx_gpiote_channel_get+0x3c>)
   1cde2:	f240 2335 	movw	r3, #565	; 0x235
   1cde6:	4a0c      	ldr	r2, [pc, #48]	; (1ce18 <nrfx_gpiote_channel_get+0x40>)
   1cde8:	f007 fddd 	bl	249a6 <assert_print>
   1cdec:	f240 2135 	movw	r1, #565	; 0x235
   1cdf0:	4809      	ldr	r0, [pc, #36]	; (1ce18 <nrfx_gpiote_channel_get+0x40>)
   1cdf2:	f007 fdd1 	bl	24998 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1cdf6:	f7ff fdfb 	bl	1c9f0 <pin_in_use_by_te>
   1cdfa:	b138      	cbz	r0, 1ce0c <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1cdfc:	4b07      	ldr	r3, [pc, #28]	; (1ce1c <nrfx_gpiote_channel_get+0x44>)
   1cdfe:	3208      	adds	r2, #8
   1ce00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1ce04:	4806      	ldr	r0, [pc, #24]	; (1ce20 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ce06:	0b5b      	lsrs	r3, r3, #13
   1ce08:	700b      	strb	r3, [r1, #0]
}
   1ce0a:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ce0c:	4805      	ldr	r0, [pc, #20]	; (1ce24 <nrfx_gpiote_channel_get+0x4c>)
   1ce0e:	e7fc      	b.n	1ce0a <nrfx_gpiote_channel_get+0x32>
   1ce10:	0002fae2 	.word	0x0002fae2
   1ce14:	0002b339 	.word	0x0002b339
   1ce18:	0002faa4 	.word	0x0002faa4
   1ce1c:	2000868c 	.word	0x2000868c
   1ce20:	0bad0000 	.word	0x0bad0000
   1ce24:	0bad0004 	.word	0x0bad0004

0001ce28 <nrfx_gpiote_init>:
{
   1ce28:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1ce2a:	4c0f      	ldr	r4, [pc, #60]	; (1ce68 <nrfx_gpiote_init+0x40>)
   1ce2c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1ce30:	b9bd      	cbnz	r5, 1ce62 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1ce32:	2260      	movs	r2, #96	; 0x60
   1ce34:	4629      	mov	r1, r5
   1ce36:	f104 0010 	add.w	r0, r4, #16
   1ce3a:	f00c fb54 	bl	294e6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1ce3e:	202f      	movs	r0, #47	; 0x2f
   1ce40:	f7f2 ffc4 	bl	fdcc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ce44:	4b09      	ldr	r3, [pc, #36]	; (1ce6c <nrfx_gpiote_init+0x44>)
    return err_code;
   1ce46:	480a      	ldr	r0, [pc, #40]	; (1ce70 <nrfx_gpiote_init+0x48>)
   1ce48:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1ce4c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1ce50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1ce54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1ce58:	2301      	movs	r3, #1
   1ce5a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1ce5e:	6763      	str	r3, [r4, #116]	; 0x74
}
   1ce60:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1ce62:	4804      	ldr	r0, [pc, #16]	; (1ce74 <nrfx_gpiote_init+0x4c>)
   1ce64:	e7fc      	b.n	1ce60 <nrfx_gpiote_init+0x38>
   1ce66:	bf00      	nop
   1ce68:	2000868c 	.word	0x2000868c
   1ce6c:	4002f000 	.word	0x4002f000
   1ce70:	0bad0000 	.word	0x0bad0000
   1ce74:	0bad0005 	.word	0x0bad0005

0001ce78 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1ce78:	4b03      	ldr	r3, [pc, #12]	; (1ce88 <nrfx_gpiote_is_init+0x10>)
   1ce7a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1ce7e:	3800      	subs	r0, #0
   1ce80:	bf18      	it	ne
   1ce82:	2001      	movne	r0, #1
   1ce84:	4770      	bx	lr
   1ce86:	bf00      	nop
   1ce88:	2000868c 	.word	0x2000868c

0001ce8c <nrfx_gpiote_channel_free>:
{
   1ce8c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1ce8e:	4801      	ldr	r0, [pc, #4]	; (1ce94 <nrfx_gpiote_channel_free+0x8>)
   1ce90:	f7ff bb6e 	b.w	1c570 <nrfx_flag32_free>
   1ce94:	200086fc 	.word	0x200086fc

0001ce98 <nrfx_gpiote_channel_alloc>:
{
   1ce98:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1ce9a:	4801      	ldr	r0, [pc, #4]	; (1cea0 <nrfx_gpiote_channel_alloc+0x8>)
   1ce9c:	f7ff bb4c 	b.w	1c538 <nrfx_flag32_alloc>
   1cea0:	200086fc 	.word	0x200086fc

0001cea4 <nrfx_gpiote_trigger_enable>:
{
   1cea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cea6:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1cea8:	f7ff fdac 	bl	1ca04 <pin_has_trigger>
   1ceac:	b958      	cbnz	r0, 1cec6 <nrfx_gpiote_trigger_enable+0x22>
   1ceae:	492b      	ldr	r1, [pc, #172]	; (1cf5c <nrfx_gpiote_trigger_enable+0xb8>)
   1ceb0:	f240 33df 	movw	r3, #991	; 0x3df
   1ceb4:	4a2a      	ldr	r2, [pc, #168]	; (1cf60 <nrfx_gpiote_trigger_enable+0xbc>)
   1ceb6:	482b      	ldr	r0, [pc, #172]	; (1cf64 <nrfx_gpiote_trigger_enable+0xc0>)
   1ceb8:	f007 fd75 	bl	249a6 <assert_print>
   1cebc:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1cec0:	4827      	ldr	r0, [pc, #156]	; (1cf60 <nrfx_gpiote_trigger_enable+0xbc>)
   1cec2:	f007 fd69 	bl	24998 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1cec6:	4620      	mov	r0, r4
   1cec8:	f7ff fd92 	bl	1c9f0 <pin_in_use_by_te>
   1cecc:	4a26      	ldr	r2, [pc, #152]	; (1cf68 <nrfx_gpiote_trigger_enable+0xc4>)
   1cece:	f104 0508 	add.w	r5, r4, #8
   1ced2:	b1e0      	cbz	r0, 1cf0e <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1ced4:	4620      	mov	r0, r4
   1ced6:	f7ff fda1 	bl	1ca1c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ceda:	b9c0      	cbnz	r0, 1cf0e <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1cedc:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1cee0:	4c22      	ldr	r4, [pc, #136]	; (1cf6c <nrfx_gpiote_trigger_enable+0xc8>)
   1cee2:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1cee4:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cee6:	50e0      	str	r0, [r4, r3]
   1cee8:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ceea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ceee:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1cef2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1cef6:	f040 0001 	orr.w	r0, r0, #1
   1cefa:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1cefe:	b121      	cbz	r1, 1cf0a <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1cf00:	2301      	movs	r3, #1
   1cf02:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1cf04:	4a1a      	ldr	r2, [pc, #104]	; (1cf70 <nrfx_gpiote_trigger_enable+0xcc>)
   1cf06:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1cf0a:	b003      	add	sp, #12
   1cf0c:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1cf0e:	b949      	cbnz	r1, 1cf24 <nrfx_gpiote_trigger_enable+0x80>
   1cf10:	4918      	ldr	r1, [pc, #96]	; (1cf74 <nrfx_gpiote_trigger_enable+0xd0>)
   1cf12:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1cf16:	4a12      	ldr	r2, [pc, #72]	; (1cf60 <nrfx_gpiote_trigger_enable+0xbc>)
   1cf18:	4812      	ldr	r0, [pc, #72]	; (1cf64 <nrfx_gpiote_trigger_enable+0xc0>)
   1cf1a:	f007 fd44 	bl	249a6 <assert_print>
   1cf1e:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1cf22:	e7cd      	b.n	1cec0 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1cf24:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1cf28:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1cf2c:	2b04      	cmp	r3, #4
   1cf2e:	d011      	beq.n	1cf54 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1cf30:	2b05      	cmp	r3, #5
   1cf32:	d011      	beq.n	1cf58 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cf34:	a801      	add	r0, sp, #4
   1cf36:	9401      	str	r4, [sp, #4]
   1cf38:	f7ff fdf4 	bl	1cb24 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1cf3c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1cf3e:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1cf40:	40d9      	lsrs	r1, r3
   1cf42:	f001 0101 	and.w	r1, r1, #1
   1cf46:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1cf48:	4620      	mov	r0, r4
}
   1cf4a:	b003      	add	sp, #12
   1cf4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1cf50:	f00b baf9 	b.w	28546 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1cf54:	2103      	movs	r1, #3
   1cf56:	e7f7      	b.n	1cf48 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1cf58:	2102      	movs	r1, #2
   1cf5a:	e7f5      	b.n	1cf48 <nrfx_gpiote_trigger_enable+0xa4>
   1cf5c:	0002faec 	.word	0x0002faec
   1cf60:	0002faa4 	.word	0x0002faa4
   1cf64:	0002b339 	.word	0x0002b339
   1cf68:	2000868c 	.word	0x2000868c
   1cf6c:	4002f100 	.word	0x4002f100
   1cf70:	4002f000 	.word	0x4002f000
   1cf74:	0002fb01 	.word	0x0002fb01

0001cf78 <nrfx_gpiote_trigger_disable>:
{
   1cf78:	b508      	push	{r3, lr}
   1cf7a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1cf7c:	f7ff fd38 	bl	1c9f0 <pin_in_use_by_te>
   1cf80:	b1c8      	cbz	r0, 1cfb6 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1cf82:	4610      	mov	r0, r2
   1cf84:	f7ff fd4a 	bl	1ca1c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1cf88:	b9a8      	cbnz	r0, 1cfb6 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1cf8a:	4b0e      	ldr	r3, [pc, #56]	; (1cfc4 <nrfx_gpiote_trigger_disable+0x4c>)
   1cf8c:	3208      	adds	r2, #8
   1cf8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1cf92:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1cf94:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1cf96:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1cf98:	490b      	ldr	r1, [pc, #44]	; (1cfc8 <nrfx_gpiote_trigger_disable+0x50>)
   1cf9a:	009b      	lsls	r3, r3, #2
   1cf9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cfa0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1cfa4:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1cfa8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1cfac:	f022 0203 	bic.w	r2, r2, #3
   1cfb0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1cfb4:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1cfb6:	2100      	movs	r1, #0
}
   1cfb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1cfbc:	4610      	mov	r0, r2
   1cfbe:	f00b bac2 	b.w	28546 <nrf_gpio_cfg_sense_set>
   1cfc2:	bf00      	nop
   1cfc4:	2000868c 	.word	0x2000868c
   1cfc8:	4002f000 	.word	0x4002f000

0001cfcc <nrfx_gpiote_pin_uninit>:
{
   1cfcc:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1cfce:	4b10      	ldr	r3, [pc, #64]	; (1d010 <nrfx_gpiote_pin_uninit+0x44>)
   1cfd0:	f100 0208 	add.w	r2, r0, #8
   1cfd4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1cfd8:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1cfda:	07db      	lsls	r3, r3, #31
   1cfdc:	d516      	bpl.n	1d00c <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1cfde:	f7ff ffcb 	bl	1cf78 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1cfe2:	4620      	mov	r0, r4
   1cfe4:	f7ff fd80 	bl	1cae8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cfe8:	a801      	add	r0, sp, #4
   1cfea:	9401      	str	r4, [sp, #4]
   1cfec:	f7ff fd9a 	bl	1cb24 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1cff0:	9b01      	ldr	r3, [sp, #4]
   1cff2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1cff6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1cffa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1cffe:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1d002:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1d006:	4803      	ldr	r0, [pc, #12]	; (1d014 <nrfx_gpiote_pin_uninit+0x48>)
}
   1d008:	b002      	add	sp, #8
   1d00a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d00c:	4802      	ldr	r0, [pc, #8]	; (1d018 <nrfx_gpiote_pin_uninit+0x4c>)
   1d00e:	e7fb      	b.n	1d008 <nrfx_gpiote_pin_uninit+0x3c>
   1d010:	2000868c 	.word	0x2000868c
   1d014:	0bad0000 	.word	0x0bad0000
   1d018:	0bad0004 	.word	0x0bad0004

0001d01c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1d020:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1d022:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d024:	4634      	mov	r4, r6
{
   1d026:	4b64      	ldr	r3, [pc, #400]	; (1d1b8 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1d028:	4864      	ldr	r0, [pc, #400]	; (1d1bc <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d02a:	4965      	ldr	r1, [pc, #404]	; (1d1c0 <nrfx_gpiote_irq_handler+0x1a4>)
{
   1d02c:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d02e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1d030:	b135      	cbz	r5, 1d040 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1d032:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1d036:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d038:	bf1e      	ittt	ne
   1d03a:	601c      	strne	r4, [r3, #0]
   1d03c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1d03e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d040:	3304      	adds	r3, #4
   1d042:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1d044:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1d048:	d1f1      	bne.n	1d02e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d04a:	f8df a170 	ldr.w	sl, [pc, #368]	; 1d1bc <nrfx_gpiote_irq_handler+0x1a0>
   1d04e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1d052:	2b00      	cmp	r3, #0
   1d054:	f000 8093 	beq.w	1d17e <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1d058:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1d1c4 <nrfx_gpiote_irq_handler+0x1a8>
   1d05c:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1d060:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1d062:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1d066:	4b58      	ldr	r3, [pc, #352]	; (1d1c8 <nrfx_gpiote_irq_handler+0x1ac>)
   1d068:	6a1a      	ldr	r2, [r3, #32]
   1d06a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1d06c:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d06e:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1d072:	f10d 0b10 	add.w	fp, sp, #16
   1d076:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1d07a:	9300      	str	r3, [sp, #0]
   1d07c:	e04a      	b.n	1d114 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1d07e:	fa94 f4a4 	rbit	r4, r4
   1d082:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1d086:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d088:	4a50      	ldr	r2, [pc, #320]	; (1d1cc <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1d08a:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d08c:	f104 0308 	add.w	r3, r4, #8
   1d090:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1d094:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1d096:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1d098:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1d09c:	fa03 f101 	lsl.w	r1, r3, r1
   1d0a0:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1d0a4:	08ba      	lsrs	r2, r7, #2
   1d0a6:	ea23 0301 	bic.w	r3, r3, r1
   1d0aa:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d0ae:	a803      	add	r0, sp, #12
   1d0b0:	9201      	str	r2, [sp, #4]
   1d0b2:	9403      	str	r4, [sp, #12]
   1d0b4:	f7ff fd36 	bl	1cb24 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d0b8:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1d0ba:	9a01      	ldr	r2, [sp, #4]
   1d0bc:	3380      	adds	r3, #128	; 0x80
   1d0be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d0c2:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1d0c6:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d0c8:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1d0ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1d0ce:	d52b      	bpl.n	1d128 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1d0d0:	4639      	mov	r1, r7
   1d0d2:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d0d4:	b2dd      	uxtb	r5, r3
   1d0d6:	f7ff fcab 	bl	1ca30 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d0da:	a803      	add	r0, sp, #12
   1d0dc:	9403      	str	r4, [sp, #12]
   1d0de:	f7ff fd21 	bl	1cb24 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d0e2:	9b03      	ldr	r3, [sp, #12]
   1d0e4:	3380      	adds	r3, #128	; 0x80
   1d0e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1d0ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1d0ee:	429d      	cmp	r5, r3
   1d0f0:	d107      	bne.n	1d102 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1d0f2:	2100      	movs	r1, #0
   1d0f4:	4620      	mov	r0, r4
   1d0f6:	f00b fa26 	bl	28546 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1d0fa:	4629      	mov	r1, r5
   1d0fc:	4620      	mov	r0, r4
   1d0fe:	f00b fa22 	bl	28546 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d102:	a803      	add	r0, sp, #12
   1d104:	9403      	str	r4, [sp, #12]
   1d106:	f7ff fd0d 	bl	1cb24 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1d10a:	2201      	movs	r2, #1
   1d10c:	9b03      	ldr	r3, [sp, #12]
   1d10e:	fa02 f303 	lsl.w	r3, r2, r3
   1d112:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1d114:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1d118:	2c00      	cmp	r4, #0
   1d11a:	d1b0      	bne.n	1d07e <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d11c:	f1b9 0f00 	cmp.w	r9, #0
   1d120:	d11d      	bne.n	1d15e <nrfx_gpiote_irq_handler+0x142>
   1d122:	f04f 0901 	mov.w	r9, #1
   1d126:	e7a6      	b.n	1d076 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1d128:	2b02      	cmp	r3, #2
   1d12a:	d10c      	bne.n	1d146 <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1d12c:	2103      	movs	r1, #3
   1d12e:	4620      	mov	r0, r4
   1d130:	f00b fa09 	bl	28546 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d134:	f005 0305 	and.w	r3, r5, #5
   1d138:	2b01      	cmp	r3, #1
   1d13a:	d1e2      	bne.n	1d102 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1d13c:	4639      	mov	r1, r7
   1d13e:	4620      	mov	r0, r4
   1d140:	f7ff fc76 	bl	1ca30 <call_handler>
   1d144:	e7dd      	b.n	1d102 <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1d146:	2102      	movs	r1, #2
   1d148:	4620      	mov	r0, r4
   1d14a:	9301      	str	r3, [sp, #4]
   1d14c:	f00b f9fb 	bl	28546 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d150:	2d03      	cmp	r5, #3
   1d152:	d0f3      	beq.n	1d13c <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1d154:	9b01      	ldr	r3, [sp, #4]
   1d156:	2b03      	cmp	r3, #3
   1d158:	d1d3      	bne.n	1d102 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1d15a:	2d02      	cmp	r5, #2
   1d15c:	e7ed      	b.n	1d13a <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d15e:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1d162:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1d166:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1d16a:	4917      	ldr	r1, [pc, #92]	; (1d1c8 <nrfx_gpiote_irq_handler+0x1ac>)
   1d16c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1d16e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1d172:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1d174:	4313      	orrs	r3, r2
   1d176:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1d178:	620a      	str	r2, [r1, #32]
   1d17a:	f47f af78 	bne.w	1d06e <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1d17e:	2401      	movs	r4, #1
    while (mask)
   1d180:	b916      	cbnz	r6, 1d188 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1d182:	b007      	add	sp, #28
   1d184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1d188:	fa96 f3a6 	rbit	r3, r6
   1d18c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1d190:	fa04 f203 	lsl.w	r2, r4, r3
   1d194:	009b      	lsls	r3, r3, #2
   1d196:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d19a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d19e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1d1a2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1d1a6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1d1aa:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1d1ae:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1d1b2:	f7ff fc3d 	bl	1ca30 <call_handler>
   1d1b6:	e7e3      	b.n	1d180 <nrfx_gpiote_irq_handler+0x164>
   1d1b8:	4002f100 	.word	0x4002f100
   1d1bc:	4002f000 	.word	0x4002f000
   1d1c0:	4002f120 	.word	0x4002f120
   1d1c4:	40842500 	.word	0x40842500
   1d1c8:	40842800 	.word	0x40842800
   1d1cc:	2000868c 	.word	0x2000868c

0001d1d0 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1d1d0:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d1d2:	4c08      	ldr	r4, [pc, #32]	; (1d1f4 <nrfx_ipc_init+0x24>)
{
   1d1d4:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d1d6:	7923      	ldrb	r3, [r4, #4]
{
   1d1d8:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1d1da:	b943      	cbnz	r3, 1d1ee <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1d1dc:	202a      	movs	r0, #42	; 0x2a
   1d1de:	f7f2 fdf5 	bl	fdcc <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1d1e2:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1d1e4:	4804      	ldr	r0, [pc, #16]	; (1d1f8 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1d1e6:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1d1e8:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1d1ea:	60a5      	str	r5, [r4, #8]
}
   1d1ec:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1d1ee:	4803      	ldr	r0, [pc, #12]	; (1d1fc <nrfx_ipc_init+0x2c>)
   1d1f0:	e7fc      	b.n	1d1ec <nrfx_ipc_init+0x1c>
   1d1f2:	bf00      	nop
   1d1f4:	20021338 	.word	0x20021338
   1d1f8:	0bad0000 	.word	0x0bad0000
   1d1fc:	0bad000c 	.word	0x0bad000c

0001d200 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1d200:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1d202:	b948      	cbnz	r0, 1d218 <nrfx_ipc_config_load+0x18>
   1d204:	4919      	ldr	r1, [pc, #100]	; (1d26c <nrfx_ipc_config_load+0x6c>)
   1d206:	2345      	movs	r3, #69	; 0x45
   1d208:	4a19      	ldr	r2, [pc, #100]	; (1d270 <nrfx_ipc_config_load+0x70>)
   1d20a:	481a      	ldr	r0, [pc, #104]	; (1d274 <nrfx_ipc_config_load+0x74>)
   1d20c:	f007 fbcb 	bl	249a6 <assert_print>
   1d210:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1d212:	4817      	ldr	r0, [pc, #92]	; (1d270 <nrfx_ipc_config_load+0x70>)
   1d214:	f007 fbc0 	bl	24998 <assert_post_action>
   1d218:	4b17      	ldr	r3, [pc, #92]	; (1d278 <nrfx_ipc_config_load+0x78>)
   1d21a:	791b      	ldrb	r3, [r3, #4]
   1d21c:	2b01      	cmp	r3, #1
   1d21e:	d007      	beq.n	1d230 <nrfx_ipc_config_load+0x30>
   1d220:	4916      	ldr	r1, [pc, #88]	; (1d27c <nrfx_ipc_config_load+0x7c>)
   1d222:	2346      	movs	r3, #70	; 0x46
   1d224:	4a12      	ldr	r2, [pc, #72]	; (1d270 <nrfx_ipc_config_load+0x70>)
   1d226:	4813      	ldr	r0, [pc, #76]	; (1d274 <nrfx_ipc_config_load+0x74>)
   1d228:	f007 fbbd 	bl	249a6 <assert_print>
   1d22c:	2146      	movs	r1, #70	; 0x46
   1d22e:	e7f0      	b.n	1d212 <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d230:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1d232:	4a13      	ldr	r2, [pc, #76]	; (1d280 <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1d234:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1d238:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d23c:	3301      	adds	r3, #1
   1d23e:	2b10      	cmp	r3, #16
   1d240:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1d244:	d1f6      	bne.n	1d234 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d246:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1d248:	4a0d      	ldr	r2, [pc, #52]	; (1d280 <nrfx_ipc_config_load+0x80>)
   1d24a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1d24e:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1d252:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1d256:	3301      	adds	r3, #1
   1d258:	2b10      	cmp	r3, #16
   1d25a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1d25e:	d1f6      	bne.n	1d24e <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1d260:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1d264:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d268:	bd38      	pop	{r3, r4, r5, pc}
   1d26a:	bf00      	nop
   1d26c:	0002fb53 	.word	0x0002fb53
   1d270:	0002fb18 	.word	0x0002fb18
   1d274:	0002b339 	.word	0x0002b339
   1d278:	20021338 	.word	0x20021338
   1d27c:	0002fb5c 	.word	0x0002fb5c
   1d280:	4002a000 	.word	0x4002a000

0001d284 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1d284:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1d286:	4b09      	ldr	r3, [pc, #36]	; (1d2ac <nrfx_ipc_receive_event_enable+0x28>)
   1d288:	791b      	ldrb	r3, [r3, #4]
   1d28a:	2b01      	cmp	r3, #1
   1d28c:	d009      	beq.n	1d2a2 <nrfx_ipc_receive_event_enable+0x1e>
   1d28e:	4908      	ldr	r1, [pc, #32]	; (1d2b0 <nrfx_ipc_receive_event_enable+0x2c>)
   1d290:	4808      	ldr	r0, [pc, #32]	; (1d2b4 <nrfx_ipc_receive_event_enable+0x30>)
   1d292:	236b      	movs	r3, #107	; 0x6b
   1d294:	4a08      	ldr	r2, [pc, #32]	; (1d2b8 <nrfx_ipc_receive_event_enable+0x34>)
   1d296:	f007 fb86 	bl	249a6 <assert_print>
   1d29a:	216b      	movs	r1, #107	; 0x6b
   1d29c:	4806      	ldr	r0, [pc, #24]	; (1d2b8 <nrfx_ipc_receive_event_enable+0x34>)
   1d29e:	f007 fb7b 	bl	24998 <assert_post_action>
   1d2a2:	4a06      	ldr	r2, [pc, #24]	; (1d2bc <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1d2a4:	4083      	lsls	r3, r0
   1d2a6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d2aa:	bd08      	pop	{r3, pc}
   1d2ac:	20021338 	.word	0x20021338
   1d2b0:	0002fb5c 	.word	0x0002fb5c
   1d2b4:	0002b339 	.word	0x0002b339
   1d2b8:	0002fb18 	.word	0x0002fb18
   1d2bc:	4002a000 	.word	0x4002a000

0001d2c0 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1d2c0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1d2c2:	4b09      	ldr	r3, [pc, #36]	; (1d2e8 <nrfx_ipc_receive_event_disable+0x28>)
   1d2c4:	791b      	ldrb	r3, [r3, #4]
   1d2c6:	2b01      	cmp	r3, #1
   1d2c8:	d009      	beq.n	1d2de <nrfx_ipc_receive_event_disable+0x1e>
   1d2ca:	4908      	ldr	r1, [pc, #32]	; (1d2ec <nrfx_ipc_receive_event_disable+0x2c>)
   1d2cc:	4808      	ldr	r0, [pc, #32]	; (1d2f0 <nrfx_ipc_receive_event_disable+0x30>)
   1d2ce:	2371      	movs	r3, #113	; 0x71
   1d2d0:	4a08      	ldr	r2, [pc, #32]	; (1d2f4 <nrfx_ipc_receive_event_disable+0x34>)
   1d2d2:	f007 fb68 	bl	249a6 <assert_print>
   1d2d6:	2171      	movs	r1, #113	; 0x71
   1d2d8:	4806      	ldr	r0, [pc, #24]	; (1d2f4 <nrfx_ipc_receive_event_disable+0x34>)
   1d2da:	f007 fb5d 	bl	24998 <assert_post_action>
    p_reg->INTENCLR = mask;
   1d2de:	4a06      	ldr	r2, [pc, #24]	; (1d2f8 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1d2e0:	4083      	lsls	r3, r0
   1d2e2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1d2e6:	bd08      	pop	{r3, pc}
   1d2e8:	20021338 	.word	0x20021338
   1d2ec:	0002fb5c 	.word	0x0002fb5c
   1d2f0:	0002b339 	.word	0x0002b339
   1d2f4:	0002fb18 	.word	0x0002fb18
   1d2f8:	4002a000 	.word	0x4002a000

0001d2fc <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1d2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1d2fe:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d300:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1d302:	4b12      	ldr	r3, [pc, #72]	; (1d34c <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1d304:	4d12      	ldr	r5, [pc, #72]	; (1d350 <nrfx_ipc_irq_handler+0x54>)
   1d306:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1d30a:	b904      	cbnz	r4, 1d30e <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1d30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1d30e:	fa94 f0a4 	rbit	r0, r4
   1d312:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1d316:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1d31a:	280f      	cmp	r0, #15
   1d31c:	ea24 0403 	bic.w	r4, r4, r3
   1d320:	dd0b      	ble.n	1d33a <nrfx_ipc_irq_handler+0x3e>
   1d322:	490c      	ldr	r1, [pc, #48]	; (1d354 <nrfx_ipc_irq_handler+0x58>)
   1d324:	480c      	ldr	r0, [pc, #48]	; (1d358 <nrfx_ipc_irq_handler+0x5c>)
   1d326:	f240 13e7 	movw	r3, #487	; 0x1e7
   1d32a:	4a0c      	ldr	r2, [pc, #48]	; (1d35c <nrfx_ipc_irq_handler+0x60>)
   1d32c:	f007 fb3b 	bl	249a6 <assert_print>
   1d330:	f240 11e7 	movw	r1, #487	; 0x1e7
   1d334:	4809      	ldr	r0, [pc, #36]	; (1d35c <nrfx_ipc_irq_handler+0x60>)
   1d336:	f007 fb2f 	bl	24998 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d33a:	4b09      	ldr	r3, [pc, #36]	; (1d360 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1d33c:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d33e:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1d340:	682b      	ldr	r3, [r5, #0]
   1d342:	2b00      	cmp	r3, #0
   1d344:	d0e1      	beq.n	1d30a <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1d346:	68a9      	ldr	r1, [r5, #8]
   1d348:	4798      	blx	r3
   1d34a:	e7de      	b.n	1d30a <nrfx_ipc_irq_handler+0xe>
   1d34c:	4002a000 	.word	0x4002a000
   1d350:	20021338 	.word	0x20021338
   1d354:	0002c151 	.word	0x0002c151
   1d358:	0002b339 	.word	0x0002b339
   1d35c:	0002c11f 	.word	0x0002c11f
   1d360:	4002a100 	.word	0x4002a100

0001d364 <nvmc_word_write>:
   1d364:	4a04      	ldr	r2, [pc, #16]	; (1d378 <nvmc_word_write+0x14>)
   1d366:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1d36a:	07db      	lsls	r3, r3, #31
   1d36c:	d5fb      	bpl.n	1d366 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1d36e:	6001      	str	r1, [r0, #0]
   1d370:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1d374:	4770      	bx	lr
   1d376:	bf00      	nop
   1d378:	40039000 	.word	0x40039000

0001d37c <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d37c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1d380:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d382:	d30b      	bcc.n	1d39c <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1d384:	4910      	ldr	r1, [pc, #64]	; (1d3c8 <nrfx_nvmc_page_erase+0x4c>)
   1d386:	4811      	ldr	r0, [pc, #68]	; (1d3cc <nrfx_nvmc_page_erase+0x50>)
   1d388:	f44f 7383 	mov.w	r3, #262	; 0x106
   1d38c:	4a10      	ldr	r2, [pc, #64]	; (1d3d0 <nrfx_nvmc_page_erase+0x54>)
   1d38e:	f007 fb0a 	bl	249a6 <assert_print>
   1d392:	f44f 7183 	mov.w	r1, #262	; 0x106
   1d396:	480e      	ldr	r0, [pc, #56]	; (1d3d0 <nrfx_nvmc_page_erase+0x54>)
   1d398:	f007 fafe 	bl	24998 <assert_post_action>
    return !(addr % flash_page_size_get());
   1d39c:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1d3a0:	b97b      	cbnz	r3, 1d3c2 <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1d3a2:	2202      	movs	r2, #2
   1d3a4:	4b0b      	ldr	r3, [pc, #44]	; (1d3d4 <nrfx_nvmc_page_erase+0x58>)
   1d3a6:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1d3aa:	f04f 32ff 	mov.w	r2, #4294967295
   1d3ae:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d3b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1d3b4:	07d2      	lsls	r2, r2, #31
   1d3b6:	d5fb      	bpl.n	1d3b0 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1d3b8:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1d3ba:	4807      	ldr	r0, [pc, #28]	; (1d3d8 <nrfx_nvmc_page_erase+0x5c>)
   1d3bc:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1d3c0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1d3c2:	4806      	ldr	r0, [pc, #24]	; (1d3dc <nrfx_nvmc_page_erase+0x60>)
   1d3c4:	e7fc      	b.n	1d3c0 <nrfx_nvmc_page_erase+0x44>
   1d3c6:	bf00      	nop
   1d3c8:	0002fbe5 	.word	0x0002fbe5
   1d3cc:	0002b339 	.word	0x0002b339
   1d3d0:	0002fb89 	.word	0x0002fb89
   1d3d4:	40039000 	.word	0x40039000
   1d3d8:	0bad0000 	.word	0x0bad0000
   1d3dc:	0bad000a 	.word	0x0bad000a

0001d3e0 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d3e0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1d3e4:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1d3e6:	d30b      	bcc.n	1d400 <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1d3e8:	4910      	ldr	r1, [pc, #64]	; (1d42c <nrfx_nvmc_word_write+0x4c>)
   1d3ea:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1d3ee:	4a10      	ldr	r2, [pc, #64]	; (1d430 <nrfx_nvmc_word_write+0x50>)
   1d3f0:	4810      	ldr	r0, [pc, #64]	; (1d434 <nrfx_nvmc_word_write+0x54>)
   1d3f2:	f007 fad8 	bl	249a6 <assert_print>
   1d3f6:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1d3fa:	480d      	ldr	r0, [pc, #52]	; (1d430 <nrfx_nvmc_word_write+0x50>)
   1d3fc:	f007 facc 	bl	24998 <assert_post_action>
   1d400:	f010 0403 	ands.w	r4, r0, #3
   1d404:	d009      	beq.n	1d41a <nrfx_nvmc_word_write+0x3a>
   1d406:	490c      	ldr	r1, [pc, #48]	; (1d438 <nrfx_nvmc_word_write+0x58>)
   1d408:	f240 1395 	movw	r3, #405	; 0x195
   1d40c:	4a08      	ldr	r2, [pc, #32]	; (1d430 <nrfx_nvmc_word_write+0x50>)
   1d40e:	4809      	ldr	r0, [pc, #36]	; (1d434 <nrfx_nvmc_word_write+0x54>)
   1d410:	f007 fac9 	bl	249a6 <assert_print>
   1d414:	f240 1195 	movw	r1, #405	; 0x195
   1d418:	e7ef      	b.n	1d3fa <nrfx_nvmc_word_write+0x1a>
   1d41a:	2301      	movs	r3, #1
   1d41c:	4d07      	ldr	r5, [pc, #28]	; (1d43c <nrfx_nvmc_word_write+0x5c>)
   1d41e:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1d422:	f7ff ff9f 	bl	1d364 <nvmc_word_write>
   1d426:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1d42a:	bd38      	pop	{r3, r4, r5, pc}
   1d42c:	0002fbff 	.word	0x0002fbff
   1d430:	0002fb89 	.word	0x0002fb89
   1d434:	0002b339 	.word	0x0002b339
   1d438:	0002fc19 	.word	0x0002fc19
   1d43c:	40039000 	.word	0x40039000

0001d440 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1d440:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1d442:	4d43      	ldr	r5, [pc, #268]	; (1d550 <qspi_xfer+0x110>)
   1d444:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1d448:	b94c      	cbnz	r4, 1d45e <qspi_xfer+0x1e>
   1d44a:	4942      	ldr	r1, [pc, #264]	; (1d554 <qspi_xfer+0x114>)
   1d44c:	2368      	movs	r3, #104	; 0x68
   1d44e:	4a42      	ldr	r2, [pc, #264]	; (1d558 <qspi_xfer+0x118>)
   1d450:	4842      	ldr	r0, [pc, #264]	; (1d55c <qspi_xfer+0x11c>)
   1d452:	f007 faa8 	bl	249a6 <assert_print>
   1d456:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1d458:	483f      	ldr	r0, [pc, #252]	; (1d558 <qspi_xfer+0x118>)
   1d45a:	f007 fa9d 	bl	24998 <assert_post_action>
   1d45e:	b938      	cbnz	r0, 1d470 <qspi_xfer+0x30>
   1d460:	493f      	ldr	r1, [pc, #252]	; (1d560 <qspi_xfer+0x120>)
   1d462:	2369      	movs	r3, #105	; 0x69
   1d464:	4a3c      	ldr	r2, [pc, #240]	; (1d558 <qspi_xfer+0x118>)
   1d466:	483d      	ldr	r0, [pc, #244]	; (1d55c <qspi_xfer+0x11c>)
   1d468:	f007 fa9d 	bl	249a6 <assert_print>
   1d46c:	2169      	movs	r1, #105	; 0x69
   1d46e:	e7f3      	b.n	1d458 <qspi_xfer+0x18>
   1d470:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1d474:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1d478:	d165      	bne.n	1d546 <qspi_xfer+0x106>
   1d47a:	0786      	lsls	r6, r0, #30
   1d47c:	d163      	bne.n	1d546 <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1d47e:	2c01      	cmp	r4, #1
   1d480:	d001      	beq.n	1d486 <qspi_xfer+0x46>
   1d482:	429c      	cmp	r4, r3
   1d484:	d161      	bne.n	1d54a <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1d486:	682c      	ldr	r4, [r5, #0]
   1d488:	bb04      	cbnz	r4, 1d4cc <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d48a:	2b02      	cmp	r3, #2
   1d48c:	4b35      	ldr	r3, [pc, #212]	; (1d564 <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1d48e:	bf0b      	itete	eq
   1d490:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1d494:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1d498:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1d49c:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1d4a0:	bf0b      	itete	eq
   1d4a2:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1d4a6:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1d4aa:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1d4ac:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d4ae:	2100      	movs	r1, #0
   1d4b0:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d4b4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1d4b8:	2201      	movs	r2, #1
   1d4ba:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1d4be:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d4c0:	4a28      	ldr	r2, [pc, #160]	; (1d564 <qspi_xfer+0x124>)
   1d4c2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1d4c6:	2b00      	cmp	r3, #0
   1d4c8:	d0fb      	beq.n	1d4c2 <qspi_xfer+0x82>
   1d4ca:	e00d      	b.n	1d4e8 <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1d4cc:	68ae      	ldr	r6, [r5, #8]
   1d4ce:	4c25      	ldr	r4, [pc, #148]	; (1d564 <qspi_xfer+0x124>)
   1d4d0:	b166      	cbz	r6, 1d4ec <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d4d2:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1d4d4:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1d4d6:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1d4d8:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d4da:	d12d      	bne.n	1d538 <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1d4dc:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1d4e0:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1d4e4:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1d4e8:	481f      	ldr	r0, [pc, #124]	; (1d568 <qspi_xfer+0x128>)
}
   1d4ea:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1d4ec:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1d4ee:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1d4f2:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1d4f4:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1d4f6:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1d4f8:	bf0c      	ite	eq
   1d4fa:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1d4fe:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d502:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1d506:	bf0b      	itete	eq
   1d508:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1d50c:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1d510:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1d514:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1d518:	bf08      	it	eq
   1d51a:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d51c:	4911      	ldr	r1, [pc, #68]	; (1d564 <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1d51e:	bf18      	it	ne
   1d520:	2304      	movne	r3, #4
   1d522:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1d526:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d528:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d52c:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1d530:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d534:	601a      	str	r2, [r3, #0]
}
   1d536:	e7d7      	b.n	1d4e8 <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1d538:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1d53c:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1d540:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1d544:	e7d0      	b.n	1d4e8 <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1d546:	4809      	ldr	r0, [pc, #36]	; (1d56c <qspi_xfer+0x12c>)
   1d548:	e7cf      	b.n	1d4ea <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1d54a:	4809      	ldr	r0, [pc, #36]	; (1d570 <qspi_xfer+0x130>)
   1d54c:	e7cd      	b.n	1d4ea <qspi_xfer+0xaa>
   1d54e:	bf00      	nop
   1d550:	20021344 	.word	0x20021344
   1d554:	0002fc7e 	.word	0x0002fc7e
   1d558:	0002fc42 	.word	0x0002fc42
   1d55c:	0002b339 	.word	0x0002b339
   1d560:	0002fcaa 	.word	0x0002fcaa
   1d564:	4002b000 	.word	0x4002b000
   1d568:	0bad0000 	.word	0x0bad0000
   1d56c:	0bad000a 	.word	0x0bad000a
   1d570:	0bad000b 	.word	0x0bad000b

0001d574 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1d574:	b538      	push	{r3, r4, r5, lr}
   1d576:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d578:	4d06      	ldr	r5, [pc, #24]	; (1d594 <qspi_ready_wait+0x20>)
   1d57a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1d57e:	b933      	cbnz	r3, 1d58e <qspi_ready_wait+0x1a>
   1d580:	200a      	movs	r0, #10
   1d582:	f00a ff75 	bl	28470 <nrfx_busy_wait>
   1d586:	3c01      	subs	r4, #1
   1d588:	d1f7      	bne.n	1d57a <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1d58a:	4803      	ldr	r0, [pc, #12]	; (1d598 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1d58c:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1d58e:	4803      	ldr	r0, [pc, #12]	; (1d59c <qspi_ready_wait+0x28>)
   1d590:	e7fc      	b.n	1d58c <qspi_ready_wait+0x18>
   1d592:	bf00      	nop
   1d594:	4002b000 	.word	0x4002b000
   1d598:	0bad0007 	.word	0x0bad0007
   1d59c:	0bad0000 	.word	0x0bad0000

0001d5a0 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1d5a0:	4b08      	ldr	r3, [pc, #32]	; (1d5c4 <qspi_event_xfer_handle.constprop.0+0x24>)
   1d5a2:	689a      	ldr	r2, [r3, #8]
   1d5a4:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1d5a6:	691a      	ldr	r2, [r3, #16]
   1d5a8:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1d5aa:	699a      	ldr	r2, [r3, #24]
   1d5ac:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1d5ae:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1d5b0:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1d5b2:	b132      	cbz	r2, 1d5c2 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1d5b4:	695a      	ldr	r2, [r3, #20]
   1d5b6:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1d5b8:	69da      	ldr	r2, [r3, #28]
   1d5ba:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1d5bc:	2200      	movs	r2, #0
   1d5be:	60da      	str	r2, [r3, #12]
   1d5c0:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1d5c2:	4770      	bx	lr
   1d5c4:	20021344 	.word	0x20021344

0001d5c8 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1d5c8:	b508      	push	{r3, lr}
    switch (port)
   1d5ca:	0943      	lsrs	r3, r0, #5
   1d5cc:	d00d      	beq.n	1d5ea <nrf_gpio_cfg.constprop.0+0x22>
   1d5ce:	2b01      	cmp	r3, #1
   1d5d0:	d01e      	beq.n	1d610 <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d5d2:	4914      	ldr	r1, [pc, #80]	; (1d624 <nrf_gpio_cfg.constprop.0+0x5c>)
   1d5d4:	4814      	ldr	r0, [pc, #80]	; (1d628 <nrf_gpio_cfg.constprop.0+0x60>)
   1d5d6:	f240 2347 	movw	r3, #583	; 0x247
   1d5da:	4a14      	ldr	r2, [pc, #80]	; (1d62c <nrf_gpio_cfg.constprop.0+0x64>)
   1d5dc:	f007 f9e3 	bl	249a6 <assert_print>
   1d5e0:	f240 2147 	movw	r1, #583	; 0x247
   1d5e4:	4811      	ldr	r0, [pc, #68]	; (1d62c <nrf_gpio_cfg.constprop.0+0x64>)
   1d5e6:	f007 f9d7 	bl	24998 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1d5ea:	f04f 33ff 	mov.w	r3, #4294967295
   1d5ee:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d5f0:	07da      	lsls	r2, r3, #31
   1d5f2:	d5ee      	bpl.n	1d5d2 <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1d5f4:	4a0e      	ldr	r2, [pc, #56]	; (1d630 <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1d5f6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1d5fa:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1d5fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1d602:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1d606:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1d60a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1d60e:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1d610:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1d614:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d618:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d61a:	07db      	lsls	r3, r3, #31
   1d61c:	d5d9      	bpl.n	1d5d2 <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1d61e:	4a05      	ldr	r2, [pc, #20]	; (1d634 <nrf_gpio_cfg.constprop.0+0x6c>)
   1d620:	e7e9      	b.n	1d5f6 <nrf_gpio_cfg.constprop.0+0x2e>
   1d622:	bf00      	nop
   1d624:	0002f184 	.word	0x0002f184
   1d628:	0002b339 	.word	0x0002b339
   1d62c:	0002f151 	.word	0x0002f151
   1d630:	40842500 	.word	0x40842500
   1d634:	40842800 	.word	0x40842800

0001d638 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1d638:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1d63a:	4b0e      	ldr	r3, [pc, #56]	; (1d674 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1d63c:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1d63e:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1d642:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1d646:	2807      	cmp	r0, #7
   1d648:	d813      	bhi.n	1d672 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1d64a:	e8df f000 	tbb	[pc, r0]
   1d64e:	0f11      	.short	0x0f11
   1d650:	080a0b0d 	.word	0x080a0b0d
   1d654:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1d656:	0e10      	lsrs	r0, r2, #24
   1d658:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1d65a:	0c10      	lsrs	r0, r2, #16
   1d65c:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1d65e:	0a10      	lsrs	r0, r2, #8
   1d660:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1d662:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1d664:	0e1a      	lsrs	r2, r3, #24
   1d666:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1d668:	0c1a      	lsrs	r2, r3, #16
   1d66a:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1d66c:	0a1a      	lsrs	r2, r3, #8
   1d66e:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1d670:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1d672:	bd10      	pop	{r4, pc}
   1d674:	4002b000 	.word	0x4002b000

0001d678 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1d678:	3802      	subs	r0, #2
   1d67a:	2807      	cmp	r0, #7
   1d67c:	d81f      	bhi.n	1d6be <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1d67e:	e8df f000 	tbb	[pc, r0]
   1d682:	2729      	.short	0x2729
   1d684:	21231125 	.word	0x21231125
   1d688:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1d68a:	79cb      	ldrb	r3, [r1, #7]
   1d68c:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1d68e:	798a      	ldrb	r2, [r1, #6]
   1d690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1d694:	794a      	ldrb	r2, [r1, #5]
   1d696:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1d69a:	790a      	ldrb	r2, [r1, #4]
   1d69c:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1d69e:	4a0e      	ldr	r2, [pc, #56]	; (1d6d8 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1d6a0:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1d6a4:	78cb      	ldrb	r3, [r1, #3]
   1d6a6:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1d6a8:	788a      	ldrb	r2, [r1, #2]
   1d6aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1d6ae:	784a      	ldrb	r2, [r1, #1]
   1d6b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1d6b4:	780a      	ldrb	r2, [r1, #0]
   1d6b6:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1d6b8:	4a07      	ldr	r2, [pc, #28]	; (1d6d8 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1d6ba:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1d6be:	4770      	bx	lr
    switch (length)
   1d6c0:	2300      	movs	r3, #0
   1d6c2:	e7e4      	b.n	1d68e <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1d6c4:	2300      	movs	r3, #0
   1d6c6:	e7e5      	b.n	1d694 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1d6c8:	2300      	movs	r3, #0
   1d6ca:	e7e6      	b.n	1d69a <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1d6cc:	2300      	movs	r3, #0
   1d6ce:	e7eb      	b.n	1d6a8 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1d6d0:	2300      	movs	r3, #0
   1d6d2:	e7ec      	b.n	1d6ae <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1d6d4:	2300      	movs	r3, #0
   1d6d6:	e7ed      	b.n	1d6b4 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1d6d8:	4002b000 	.word	0x4002b000

0001d6dc <nrfx_qspi_init>:
{
   1d6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6de:	460d      	mov	r5, r1
   1d6e0:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1d6e2:	4604      	mov	r4, r0
   1d6e4:	b958      	cbnz	r0, 1d6fe <nrfx_qspi_init+0x22>
   1d6e6:	496e      	ldr	r1, [pc, #440]	; (1d8a0 <nrfx_qspi_init+0x1c4>)
   1d6e8:	486e      	ldr	r0, [pc, #440]	; (1d8a4 <nrfx_qspi_init+0x1c8>)
   1d6ea:	f44f 7388 	mov.w	r3, #272	; 0x110
   1d6ee:	4a6e      	ldr	r2, [pc, #440]	; (1d8a8 <nrfx_qspi_init+0x1cc>)
   1d6f0:	f007 f959 	bl	249a6 <assert_print>
   1d6f4:	f44f 7188 	mov.w	r1, #272	; 0x110
   1d6f8:	486b      	ldr	r0, [pc, #428]	; (1d8a8 <nrfx_qspi_init+0x1cc>)
   1d6fa:	f007 f94d 	bl	24998 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1d6fe:	4f6b      	ldr	r7, [pc, #428]	; (1d8ac <nrfx_qspi_init+0x1d0>)
   1d700:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1d704:	2b00      	cmp	r3, #0
   1d706:	f040 80c6 	bne.w	1d896 <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1d70a:	7cc2      	ldrb	r2, [r0, #19]
   1d70c:	b112      	cbz	r2, 1d714 <nrfx_qspi_init+0x38>
   1d70e:	7d03      	ldrb	r3, [r0, #20]
   1d710:	2b00      	cmp	r3, #0
   1d712:	d170      	bne.n	1d7f6 <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1d714:	7920      	ldrb	r0, [r4, #4]
   1d716:	28ff      	cmp	r0, #255	; 0xff
   1d718:	f000 80bf 	beq.w	1d89a <nrfx_qspi_init+0x1be>
   1d71c:	7963      	ldrb	r3, [r4, #5]
   1d71e:	2bff      	cmp	r3, #255	; 0xff
   1d720:	f000 80bb 	beq.w	1d89a <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1d724:	79a3      	ldrb	r3, [r4, #6]
   1d726:	2bff      	cmp	r3, #255	; 0xff
   1d728:	f000 80b7 	beq.w	1d89a <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1d72c:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1d72e:	29ff      	cmp	r1, #255	; 0xff
   1d730:	f000 80b3 	beq.w	1d89a <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1d734:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1d736:	f8df c178 	ldr.w	ip, [pc, #376]	; 1d8b0 <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1d73a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1d73e:	4563      	cmp	r3, ip
   1d740:	f040 80ab 	bne.w	1d89a <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1d744:	290e      	cmp	r1, #14
   1d746:	f040 80a8 	bne.w	1d89a <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1d74a:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1d74c:	2bff      	cmp	r3, #255	; 0xff
   1d74e:	d002      	beq.n	1d756 <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1d750:	2b0f      	cmp	r3, #15
   1d752:	f040 80a2 	bne.w	1d89a <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1d756:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1d758:	2bff      	cmp	r3, #255	; 0xff
   1d75a:	d002      	beq.n	1d762 <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1d75c:	2b10      	cmp	r3, #16
   1d75e:	f040 809c 	bne.w	1d89a <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1d762:	b9d2      	cbnz	r2, 1d79a <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1d764:	2103      	movs	r1, #3
   1d766:	f7ff ff2f 	bl	1d5c8 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1d76a:	2103      	movs	r1, #3
   1d76c:	7960      	ldrb	r0, [r4, #5]
   1d76e:	f7ff ff2b 	bl	1d5c8 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1d772:	2103      	movs	r1, #3
   1d774:	79a0      	ldrb	r0, [r4, #6]
   1d776:	f7ff ff27 	bl	1d5c8 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1d77a:	79e0      	ldrb	r0, [r4, #7]
   1d77c:	2103      	movs	r1, #3
   1d77e:	f7ff ff23 	bl	1d5c8 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1d782:	7a20      	ldrb	r0, [r4, #8]
   1d784:	28ff      	cmp	r0, #255	; 0xff
   1d786:	d002      	beq.n	1d78e <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1d788:	2103      	movs	r1, #3
   1d78a:	f7ff ff1d 	bl	1d5c8 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1d78e:	7a60      	ldrb	r0, [r4, #9]
   1d790:	28ff      	cmp	r0, #255	; 0xff
   1d792:	d002      	beq.n	1d79a <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1d794:	2103      	movs	r1, #3
   1d796:	f7ff ff17 	bl	1d5c8 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1d79a:	7d23      	ldrb	r3, [r4, #20]
   1d79c:	bb5b      	cbnz	r3, 1d7f6 <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1d79e:	7923      	ldrb	r3, [r4, #4]
   1d7a0:	2bff      	cmp	r3, #255	; 0xff
   1d7a2:	bf14      	ite	ne
   1d7a4:	461a      	movne	r2, r3
   1d7a6:	f04f 32ff 	moveq.w	r2, #4294967295
   1d7aa:	4b42      	ldr	r3, [pc, #264]	; (1d8b4 <nrfx_qspi_init+0x1d8>)
   1d7ac:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1d7b0:	7962      	ldrb	r2, [r4, #5]
   1d7b2:	2aff      	cmp	r2, #255	; 0xff
   1d7b4:	bf08      	it	eq
   1d7b6:	f04f 32ff 	moveq.w	r2, #4294967295
   1d7ba:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1d7be:	79a2      	ldrb	r2, [r4, #6]
   1d7c0:	2aff      	cmp	r2, #255	; 0xff
   1d7c2:	bf08      	it	eq
   1d7c4:	f04f 32ff 	moveq.w	r2, #4294967295
   1d7c8:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1d7cc:	79e2      	ldrb	r2, [r4, #7]
   1d7ce:	2aff      	cmp	r2, #255	; 0xff
   1d7d0:	bf08      	it	eq
   1d7d2:	f04f 32ff 	moveq.w	r2, #4294967295
   1d7d6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1d7da:	7a22      	ldrb	r2, [r4, #8]
   1d7dc:	2aff      	cmp	r2, #255	; 0xff
   1d7de:	bf08      	it	eq
   1d7e0:	f04f 32ff 	moveq.w	r2, #4294967295
   1d7e4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1d7e8:	7a62      	ldrb	r2, [r4, #9]
   1d7ea:	2aff      	cmp	r2, #255	; 0xff
   1d7ec:	bf08      	it	eq
   1d7ee:	f04f 32ff 	moveq.w	r2, #4294967295
   1d7f2:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1d7f6:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1d7f8:	4a2e      	ldr	r2, [pc, #184]	; (1d8b4 <nrfx_qspi_init+0x1d8>)
   1d7fa:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1d7fe:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1d800:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1d802:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1d804:	019b      	lsls	r3, r3, #6
   1d806:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1d80a:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1d80c:	7b61      	ldrb	r1, [r4, #13]
   1d80e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1d812:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1d816:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1d818:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1d81c:	bbb1      	cbnz	r1, 1d88c <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1d81e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1d822:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1d826:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1d82a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1d82e:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1d832:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1d834:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1d838:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1d83c:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1d83e:	7be1      	ldrb	r1, [r4, #15]
   1d840:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1d844:	7c21      	ldrb	r1, [r4, #16]
   1d846:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1d84a:	7c61      	ldrb	r1, [r4, #17]
   1d84c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1d850:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1d854:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1d856:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1d85a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1d85e:	2301      	movs	r3, #1
   1d860:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1d864:	b115      	cbz	r5, 1d86c <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1d866:	202b      	movs	r0, #43	; 0x2b
   1d868:	f7f2 fab0 	bl	fdcc <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1d86c:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1d86e:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1d870:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1d874:	4b0f      	ldr	r3, [pc, #60]	; (1d8b4 <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1d876:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1d87a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d87e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d882:	601a      	str	r2, [r3, #0]
}
   1d884:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1d888:	f7ff be74 	b.w	1d574 <qspi_ready_wait>
        regval &= ~(1 << 17);
   1d88c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1d890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1d894:	e7c5      	b.n	1d822 <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1d896:	4808      	ldr	r0, [pc, #32]	; (1d8b8 <nrfx_qspi_init+0x1dc>)
}
   1d898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d89a:	4808      	ldr	r0, [pc, #32]	; (1d8bc <nrfx_qspi_init+0x1e0>)
   1d89c:	e7fc      	b.n	1d898 <nrfx_qspi_init+0x1bc>
   1d89e:	bf00      	nop
   1d8a0:	0002fb53 	.word	0x0002fb53
   1d8a4:	0002b339 	.word	0x0002b339
   1d8a8:	0002fc42 	.word	0x0002fc42
   1d8ac:	20021344 	.word	0x20021344
   1d8b0:	000d1211 	.word	0x000d1211
   1d8b4:	4002b000 	.word	0x4002b000
   1d8b8:	0bad0005 	.word	0x0bad0005
   1d8bc:	0bad0004 	.word	0x0bad0004

0001d8c0 <nrfx_qspi_cinstr_xfer>:
{
   1d8c0:	b570      	push	{r4, r5, r6, lr}
   1d8c2:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1d8c4:	4a26      	ldr	r2, [pc, #152]	; (1d960 <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1d8c6:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1d8c8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1d8cc:	b95a      	cbnz	r2, 1d8e6 <nrfx_qspi_cinstr_xfer+0x26>
   1d8ce:	4925      	ldr	r1, [pc, #148]	; (1d964 <nrfx_qspi_cinstr_xfer+0xa4>)
   1d8d0:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1d8d4:	4a24      	ldr	r2, [pc, #144]	; (1d968 <nrfx_qspi_cinstr_xfer+0xa8>)
   1d8d6:	4825      	ldr	r0, [pc, #148]	; (1d96c <nrfx_qspi_cinstr_xfer+0xac>)
   1d8d8:	f007 f865 	bl	249a6 <assert_print>
   1d8dc:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1d8e0:	4821      	ldr	r0, [pc, #132]	; (1d968 <nrfx_qspi_cinstr_xfer+0xa8>)
   1d8e2:	f007 f859 	bl	24998 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1d8e6:	2a01      	cmp	r2, #1
   1d8e8:	d137      	bne.n	1d95a <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d8ea:	2200      	movs	r2, #0
   1d8ec:	4e20      	ldr	r6, [pc, #128]	; (1d970 <nrfx_qspi_cinstr_xfer+0xb0>)
   1d8ee:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1d8f2:	b111      	cbz	r1, 1d8fa <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1d8f4:	7840      	ldrb	r0, [r0, #1]
   1d8f6:	f7ff febf 	bl	1d678 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1d8fa:	2301      	movs	r3, #1
   1d8fc:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1d900:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1d902:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1d904:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1d906:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1d90a:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1d90c:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1d90e:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1d910:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1d914:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1d916:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1d91a:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1d91c:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1d920:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1d924:	f7ff fe26 	bl	1d574 <qspi_ready_wait>
   1d928:	4b12      	ldr	r3, [pc, #72]	; (1d974 <nrfx_qspi_cinstr_xfer+0xb4>)
   1d92a:	4298      	cmp	r0, r3
   1d92c:	d10b      	bne.n	1d946 <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   1d92e:	792b      	ldrb	r3, [r5, #4]
   1d930:	b993      	cbnz	r3, 1d958 <nrfx_qspi_cinstr_xfer+0x98>
   1d932:	4911      	ldr	r1, [pc, #68]	; (1d978 <nrfx_qspi_cinstr_xfer+0xb8>)
   1d934:	f240 136b 	movw	r3, #363	; 0x16b
   1d938:	4a0b      	ldr	r2, [pc, #44]	; (1d968 <nrfx_qspi_cinstr_xfer+0xa8>)
   1d93a:	480c      	ldr	r0, [pc, #48]	; (1d96c <nrfx_qspi_cinstr_xfer+0xac>)
   1d93c:	f007 f833 	bl	249a6 <assert_print>
   1d940:	f240 116b 	movw	r1, #363	; 0x16b
   1d944:	e7cc      	b.n	1d8e0 <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d946:	2300      	movs	r3, #0
   1d948:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   1d94c:	b11c      	cbz	r4, 1d956 <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   1d94e:	4621      	mov	r1, r4
   1d950:	7868      	ldrb	r0, [r5, #1]
   1d952:	f7ff fe71 	bl	1d638 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   1d956:	4809      	ldr	r0, [pc, #36]	; (1d97c <nrfx_qspi_cinstr_xfer+0xbc>)
}
   1d958:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   1d95a:	4809      	ldr	r0, [pc, #36]	; (1d980 <nrfx_qspi_cinstr_xfer+0xc0>)
   1d95c:	e7fc      	b.n	1d958 <nrfx_qspi_cinstr_xfer+0x98>
   1d95e:	bf00      	nop
   1d960:	20021344 	.word	0x20021344
   1d964:	0002fc7e 	.word	0x0002fc7e
   1d968:	0002fc42 	.word	0x0002fc42
   1d96c:	0002b339 	.word	0x0002b339
   1d970:	4002b000 	.word	0x4002b000
   1d974:	0bad0007 	.word	0x0bad0007
   1d978:	0002fcc2 	.word	0x0002fcc2
   1d97c:	0bad0000 	.word	0x0bad0000
   1d980:	0bad000b 	.word	0x0bad000b

0001d984 <nrfx_qspi_mem_busy_check>:
{
   1d984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   1d986:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   1d988:	4a0c      	ldr	r2, [pc, #48]	; (1d9bc <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1d98a:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   1d98c:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1d98e:	f10d 0207 	add.w	r2, sp, #7
   1d992:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   1d994:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   1d998:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1d99c:	f7ff ff90 	bl	1d8c0 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   1d9a0:	4b07      	ldr	r3, [pc, #28]	; (1d9c0 <nrfx_qspi_mem_busy_check+0x3c>)
   1d9a2:	4298      	cmp	r0, r3
   1d9a4:	d106      	bne.n	1d9b4 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   1d9a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   1d9aa:	f013 0f01 	tst.w	r3, #1
   1d9ae:	4b05      	ldr	r3, [pc, #20]	; (1d9c4 <nrfx_qspi_mem_busy_check+0x40>)
   1d9b0:	bf18      	it	ne
   1d9b2:	4618      	movne	r0, r3
}
   1d9b4:	b005      	add	sp, #20
   1d9b6:	f85d fb04 	ldr.w	pc, [sp], #4
   1d9ba:	bf00      	nop
   1d9bc:	01000205 	.word	0x01000205
   1d9c0:	0bad0000 	.word	0x0bad0000
   1d9c4:	0bad000b 	.word	0x0bad000b

0001d9c8 <nrfx_qspi_uninit>:
{
   1d9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1d9cc:	4e29      	ldr	r6, [pc, #164]	; (1da74 <nrfx_qspi_uninit+0xac>)
   1d9ce:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1d9d2:	b95b      	cbnz	r3, 1d9ec <nrfx_qspi_uninit+0x24>
   1d9d4:	4928      	ldr	r1, [pc, #160]	; (1da78 <nrfx_qspi_uninit+0xb0>)
   1d9d6:	4829      	ldr	r0, [pc, #164]	; (1da7c <nrfx_qspi_uninit+0xb4>)
   1d9d8:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   1d9dc:	4a28      	ldr	r2, [pc, #160]	; (1da80 <nrfx_qspi_uninit+0xb8>)
   1d9de:	f006 ffe2 	bl	249a6 <assert_print>
   1d9e2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1d9e6:	4826      	ldr	r0, [pc, #152]	; (1da80 <nrfx_qspi_uninit+0xb8>)
   1d9e8:	f006 ffd6 	bl	24998 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   1d9ec:	202b      	movs	r0, #43	; 0x2b
   1d9ee:	f7f2 f9fb 	bl	fde8 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   1d9f2:	4b24      	ldr	r3, [pc, #144]	; (1da84 <nrfx_qspi_uninit+0xbc>)
   1d9f4:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   1d9f8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   1d9fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   1da00:	bf04      	itt	eq
   1da02:	4a21      	ldreq	r2, [pc, #132]	; (1da88 <nrfx_qspi_uninit+0xc0>)
   1da04:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   1da08:	2201      	movs	r2, #1
   1da0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1da0e:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   1da10:	2200      	movs	r2, #0
   1da12:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1da16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   1da1a:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   1da1e:	bb22      	cbnz	r2, 1da6a <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   1da20:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   1da24:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   1da28:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   1da2a:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   1da2e:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   1da32:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   1da36:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   1da3a:	f00a fd9c 	bl	28576 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   1da3e:	fa5f f089 	uxtb.w	r0, r9
   1da42:	f00a fd98 	bl	28576 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   1da46:	fa5f f088 	uxtb.w	r0, r8
   1da4a:	f00a fd94 	bl	28576 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   1da4e:	b2f8      	uxtb	r0, r7
   1da50:	f00a fd91 	bl	28576 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1da54:	b2e8      	uxtb	r0, r5
   1da56:	28ff      	cmp	r0, #255	; 0xff
   1da58:	b2e4      	uxtb	r4, r4
   1da5a:	d001      	beq.n	1da60 <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   1da5c:	f00a fd8b 	bl	28576 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1da60:	2cff      	cmp	r4, #255	; 0xff
   1da62:	d002      	beq.n	1da6a <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   1da64:	4620      	mov	r0, r4
   1da66:	f00a fd86 	bl	28576 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   1da6a:	2300      	movs	r3, #0
   1da6c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   1da70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1da74:	20021344 	.word	0x20021344
   1da78:	0002fc7e 	.word	0x0002fc7e
   1da7c:	0002b339 	.word	0x0002b339
   1da80:	0002fc42 	.word	0x0002fc42
   1da84:	4002b000 	.word	0x4002b000
   1da88:	00030100 	.word	0x00030100

0001da8c <nrfx_qspi_erase>:
{
   1da8c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1da8e:	4a1a      	ldr	r2, [pc, #104]	; (1daf8 <nrfx_qspi_erase+0x6c>)
   1da90:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1da94:	b95b      	cbnz	r3, 1daae <nrfx_qspi_erase+0x22>
   1da96:	4919      	ldr	r1, [pc, #100]	; (1dafc <nrfx_qspi_erase+0x70>)
   1da98:	4819      	ldr	r0, [pc, #100]	; (1db00 <nrfx_qspi_erase+0x74>)
   1da9a:	f44f 730a 	mov.w	r3, #552	; 0x228
   1da9e:	4a19      	ldr	r2, [pc, #100]	; (1db04 <nrfx_qspi_erase+0x78>)
   1daa0:	f006 ff81 	bl	249a6 <assert_print>
   1daa4:	f44f 710a 	mov.w	r1, #552	; 0x228
   1daa8:	4816      	ldr	r0, [pc, #88]	; (1db04 <nrfx_qspi_erase+0x78>)
   1daaa:	f006 ff75 	bl	24998 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   1daae:	078c      	lsls	r4, r1, #30
   1dab0:	d11e      	bne.n	1daf0 <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   1dab2:	6814      	ldr	r4, [r2, #0]
   1dab4:	b10c      	cbz	r4, 1daba <nrfx_qspi_erase+0x2e>
   1dab6:	2b01      	cmp	r3, #1
   1dab8:	d11c      	bne.n	1daf4 <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   1daba:	2304      	movs	r3, #4
   1dabc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   1dac0:	4b11      	ldr	r3, [pc, #68]	; (1db08 <nrfx_qspi_erase+0x7c>)
   1dac2:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dac6:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   1dac8:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dacc:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dad0:	2101      	movs	r1, #1
   1dad2:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   1dad4:	6810      	ldr	r0, [r2, #0]
   1dad6:	b940      	cbnz	r0, 1daea <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dad8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1dadc:	2900      	cmp	r1, #0
   1dade:	d0fb      	beq.n	1dad8 <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   1dae0:	2301      	movs	r3, #1
   1dae2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   1dae6:	4809      	ldr	r0, [pc, #36]	; (1db0c <nrfx_qspi_erase+0x80>)
}
   1dae8:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   1daea:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   1daee:	e7fa      	b.n	1dae6 <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   1daf0:	4807      	ldr	r0, [pc, #28]	; (1db10 <nrfx_qspi_erase+0x84>)
   1daf2:	e7f9      	b.n	1dae8 <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   1daf4:	4807      	ldr	r0, [pc, #28]	; (1db14 <nrfx_qspi_erase+0x88>)
   1daf6:	e7f7      	b.n	1dae8 <nrfx_qspi_erase+0x5c>
   1daf8:	20021344 	.word	0x20021344
   1dafc:	0002fc7e 	.word	0x0002fc7e
   1db00:	0002b339 	.word	0x0002b339
   1db04:	0002fc42 	.word	0x0002fc42
   1db08:	4002b000 	.word	0x4002b000
   1db0c:	0bad0000 	.word	0x0bad0000
   1db10:	0bad000a 	.word	0x0bad000a
   1db14:	0bad000b 	.word	0x0bad000b

0001db18 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   1db18:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db1a:	4b17      	ldr	r3, [pc, #92]	; (1db78 <nrfx_qspi_irq_handler+0x60>)
   1db1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1db20:	b1e2      	cbz	r2, 1db5c <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db22:	2200      	movs	r2, #0
    switch (m_cb.state)
   1db24:	4c15      	ldr	r4, [pc, #84]	; (1db7c <nrfx_qspi_irq_handler+0x64>)
   1db26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1db2a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   1db2e:	2a03      	cmp	r2, #3
   1db30:	d015      	beq.n	1db5e <nrfx_qspi_irq_handler+0x46>
   1db32:	2a04      	cmp	r2, #4
   1db34:	d015      	beq.n	1db62 <nrfx_qspi_irq_handler+0x4a>
   1db36:	2a02      	cmp	r2, #2
   1db38:	d104      	bne.n	1db44 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   1db3a:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1db3c:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   1db40:	f7ff fd2e 	bl	1d5a0 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   1db44:	68a3      	ldr	r3, [r4, #8]
   1db46:	b913      	cbnz	r3, 1db4e <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   1db48:	2301      	movs	r3, #1
   1db4a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   1db4e:	e9d4 3100 	ldrd	r3, r1, [r4]
   1db52:	2000      	movs	r0, #0
   1db54:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   1db56:	2300      	movs	r3, #0
   1db58:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   1db5c:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1db5e:	2302      	movs	r3, #2
   1db60:	e7ec      	b.n	1db3c <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   1db62:	2203      	movs	r2, #3
   1db64:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   1db68:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   1db6c:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   1db6e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1db72:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1db76:	e7e5      	b.n	1db44 <nrfx_qspi_irq_handler+0x2c>
   1db78:	4002b000 	.word	0x4002b000
   1db7c:	20021344 	.word	0x20021344

0001db80 <nrf_gpio_pin_port_decode>:
{
   1db80:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1db82:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1db84:	095a      	lsrs	r2, r3, #5
   1db86:	d00d      	beq.n	1dba4 <nrf_gpio_pin_port_decode+0x24>
   1db88:	2a01      	cmp	r2, #1
   1db8a:	d013      	beq.n	1dbb4 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1db8c:	490e      	ldr	r1, [pc, #56]	; (1dbc8 <nrf_gpio_pin_port_decode+0x48>)
   1db8e:	480f      	ldr	r0, [pc, #60]	; (1dbcc <nrf_gpio_pin_port_decode+0x4c>)
   1db90:	f240 2347 	movw	r3, #583	; 0x247
   1db94:	4a0e      	ldr	r2, [pc, #56]	; (1dbd0 <nrf_gpio_pin_port_decode+0x50>)
   1db96:	f006 ff06 	bl	249a6 <assert_print>
   1db9a:	f240 2147 	movw	r1, #583	; 0x247
   1db9e:	480c      	ldr	r0, [pc, #48]	; (1dbd0 <nrf_gpio_pin_port_decode+0x50>)
   1dba0:	f006 fefa 	bl	24998 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1dba4:	f04f 32ff 	mov.w	r2, #4294967295
   1dba8:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dbac:	07d9      	lsls	r1, r3, #31
   1dbae:	d5ed      	bpl.n	1db8c <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1dbb0:	4808      	ldr	r0, [pc, #32]	; (1dbd4 <nrf_gpio_pin_port_decode+0x54>)
   1dbb2:	e008      	b.n	1dbc6 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1dbb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1dbb8:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1dbbc:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dbbe:	07d2      	lsls	r2, r2, #31
   1dbc0:	d5e4      	bpl.n	1db8c <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1dbc2:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1dbc4:	4804      	ldr	r0, [pc, #16]	; (1dbd8 <nrf_gpio_pin_port_decode+0x58>)
}
   1dbc6:	bd08      	pop	{r3, pc}
   1dbc8:	0002f184 	.word	0x0002f184
   1dbcc:	0002b339 	.word	0x0002b339
   1dbd0:	0002f151 	.word	0x0002f151
   1dbd4:	40842500 	.word	0x40842500
   1dbd8:	40842800 	.word	0x40842800

0001dbdc <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   1dbdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1dbe0:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   1dbe2:	460c      	mov	r4, r1
   1dbe4:	b959      	cbnz	r1, 1dbfe <nrfx_spim_init+0x22>
   1dbe6:	498d      	ldr	r1, [pc, #564]	; (1de1c <nrfx_spim_init+0x240>)
   1dbe8:	488d      	ldr	r0, [pc, #564]	; (1de20 <nrfx_spim_init+0x244>)
   1dbea:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   1dbee:	4a8d      	ldr	r2, [pc, #564]	; (1de24 <nrfx_spim_init+0x248>)
   1dbf0:	f006 fed9 	bl	249a6 <assert_print>
   1dbf4:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   1dbf8:	488a      	ldr	r0, [pc, #552]	; (1de24 <nrfx_spim_init+0x248>)
   1dbfa:	f006 fecd 	bl	24998 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1dbfe:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1dc00:	4d89      	ldr	r5, [pc, #548]	; (1de28 <nrfx_spim_init+0x24c>)
   1dc02:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   1dc06:	7f09      	ldrb	r1, [r1, #28]
   1dc08:	2900      	cmp	r1, #0
   1dc0a:	f040 8100 	bne.w	1de0e <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   1dc0e:	2f00      	cmp	r7, #0
   1dc10:	f040 80ff 	bne.w	1de12 <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1dc14:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1dc18:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   1dc1a:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1dc1c:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1dc20:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1dc22:	d027      	beq.n	1dc74 <nrfx_spim_init+0x98>
   1dc24:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   1dc28:	d124      	bne.n	1dc74 <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1dc2a:	b119      	cbz	r1, 1dc34 <nrfx_spim_init+0x58>
   1dc2c:	7d20      	ldrb	r0, [r4, #20]
   1dc2e:	2800      	cmp	r0, #0
   1dc30:	f040 80d5 	bne.w	1ddde <nrfx_spim_init+0x202>
   1dc34:	487d      	ldr	r0, [pc, #500]	; (1de2c <nrfx_spim_init+0x250>)
   1dc36:	4581      	cmp	r9, r0
   1dc38:	d11c      	bne.n	1dc74 <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1dc3a:	7820      	ldrb	r0, [r4, #0]
   1dc3c:	28ff      	cmp	r0, #255	; 0xff
   1dc3e:	d002      	beq.n	1dc46 <nrfx_spim_init+0x6a>
   1dc40:	2808      	cmp	r0, #8
   1dc42:	f040 80e8 	bne.w	1de16 <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1dc46:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1dc48:	28ff      	cmp	r0, #255	; 0xff
   1dc4a:	d002      	beq.n	1dc52 <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1dc4c:	280b      	cmp	r0, #11
   1dc4e:	f040 80e2 	bne.w	1de16 <nrfx_spim_init+0x23a>
   1dc52:	2eff      	cmp	r6, #255	; 0xff
   1dc54:	d002      	beq.n	1dc5c <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1dc56:	2e0c      	cmp	r6, #12
   1dc58:	f040 80dd 	bne.w	1de16 <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1dc5c:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1dc5e:	28ff      	cmp	r0, #255	; 0xff
   1dc60:	d002      	beq.n	1dc68 <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1dc62:	2809      	cmp	r0, #9
   1dc64:	f040 80d7 	bne.w	1de16 <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1dc68:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1dc6a:	28ff      	cmp	r0, #255	; 0xff
   1dc6c:	d002      	beq.n	1dc74 <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1dc6e:	280a      	cmp	r0, #10
   1dc70:	f040 80d1 	bne.w	1de16 <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1dc74:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1dc78:	7fab      	ldrb	r3, [r5, #30]
   1dc7a:	f361 0300 	bfi	r3, r1, #0, #1
   1dc7e:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   1dc80:	7922      	ldrb	r2, [r4, #4]
   1dc82:	b2db      	uxtb	r3, r3
   1dc84:	f362 0341 	bfi	r3, r2, #1, #1
   1dc88:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   1dc8a:	7c62      	ldrb	r2, [r4, #17]
   1dc8c:	b2db      	uxtb	r3, r3
   1dc8e:	f362 0382 	bfi	r3, r2, #2, #1
   1dc92:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   1dc94:	78e3      	ldrb	r3, [r4, #3]
   1dc96:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   1dc98:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1dc9a:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   1dc9e:	2b00      	cmp	r3, #0
   1dca0:	d142      	bne.n	1dd28 <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   1dca2:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   1dca4:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   1dca6:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   1dcaa:	7b23      	ldrb	r3, [r4, #12]
   1dcac:	bf08      	it	eq
   1dcae:	2703      	moveq	r7, #3
   1dcb0:	2b01      	cmp	r3, #1
   1dcb2:	f200 8096 	bhi.w	1dde2 <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   1dcb6:	f00a fc6b 	bl	28590 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1dcba:	2300      	movs	r3, #0
   1dcbc:	9700      	str	r7, [sp, #0]
   1dcbe:	7820      	ldrb	r0, [r4, #0]
   1dcc0:	461a      	mov	r2, r3
   1dcc2:	2101      	movs	r1, #1
   1dcc4:	f00a fc8c 	bl	285e0 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1dcc8:	7860      	ldrb	r0, [r4, #1]
   1dcca:	28ff      	cmp	r0, #255	; 0xff
   1dccc:	d008      	beq.n	1dce0 <nrfx_spim_init+0x104>
   1dcce:	f00a fc5f 	bl	28590 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   1dcd2:	2201      	movs	r2, #1
   1dcd4:	9700      	str	r7, [sp, #0]
   1dcd6:	2300      	movs	r3, #0
   1dcd8:	4611      	mov	r1, r2
   1dcda:	7860      	ldrb	r0, [r4, #1]
   1dcdc:	f00a fc80 	bl	285e0 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1dce0:	78a0      	ldrb	r0, [r4, #2]
   1dce2:	28ff      	cmp	r0, #255	; 0xff
   1dce4:	d005      	beq.n	1dcf2 <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   1dce6:	2200      	movs	r2, #0
   1dce8:	9700      	str	r7, [sp, #0]
   1dcea:	4611      	mov	r1, r2
   1dcec:	7ba3      	ldrb	r3, [r4, #14]
   1dcee:	f00a fc77 	bl	285e0 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1dcf2:	78e0      	ldrb	r0, [r4, #3]
   1dcf4:	28ff      	cmp	r0, #255	; 0xff
   1dcf6:	d00b      	beq.n	1dd10 <nrfx_spim_init+0x134>
    if (value == 0)
   1dcf8:	7923      	ldrb	r3, [r4, #4]
   1dcfa:	2b00      	cmp	r3, #0
   1dcfc:	d074      	beq.n	1dde8 <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   1dcfe:	f00a fc47 	bl	28590 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   1dd02:	2201      	movs	r2, #1
   1dd04:	9700      	str	r7, [sp, #0]
   1dd06:	2300      	movs	r3, #0
   1dd08:	4611      	mov	r1, r2
   1dd0a:	78e0      	ldrb	r0, [r4, #3]
   1dd0c:	f00a fc68 	bl	285e0 <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1dd10:	7be0      	ldrb	r0, [r4, #15]
   1dd12:	28ff      	cmp	r0, #255	; 0xff
   1dd14:	d008      	beq.n	1dd28 <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   1dd16:	f00a fc47 	bl	285a8 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   1dd1a:	2201      	movs	r2, #1
   1dd1c:	9700      	str	r7, [sp, #0]
   1dd1e:	2300      	movs	r3, #0
   1dd20:	4611      	mov	r1, r2
   1dd22:	7be0      	ldrb	r0, [r4, #15]
   1dd24:	f00a fc5c 	bl	285e0 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1dd28:	7d23      	ldrb	r3, [r4, #20]
   1dd2a:	bb6b      	cbnz	r3, 1dd88 <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1dd2c:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1dd2e:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1dd30:	2bff      	cmp	r3, #255	; 0xff
   1dd32:	bf18      	it	ne
   1dd34:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1dd36:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1dd38:	bf08      	it	eq
   1dd3a:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1dd3e:	2bff      	cmp	r3, #255	; 0xff
   1dd40:	bf08      	it	eq
   1dd42:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   1dd46:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1dd4a:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1dd4e:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1dd52:	f898 3004 	ldrb.w	r3, [r8, #4]
   1dd56:	b9bb      	cbnz	r3, 1dd88 <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   1dd58:	78e3      	ldrb	r3, [r4, #3]
   1dd5a:	2bff      	cmp	r3, #255	; 0xff
   1dd5c:	d047      	beq.n	1ddee <nrfx_spim_init+0x212>
   1dd5e:	7c62      	ldrb	r2, [r4, #17]
   1dd60:	2a00      	cmp	r2, #0
   1dd62:	d044      	beq.n	1ddee <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   1dd64:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   1dd66:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   1dd68:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1dd6c:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1dd70:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1dd74:	f898 3004 	ldrb.w	r3, [r8, #4]
   1dd78:	b933      	cbnz	r3, 1dd88 <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1dd7a:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   1dd7c:	2bff      	cmp	r3, #255	; 0xff
   1dd7e:	bf08      	it	eq
   1dd80:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   1dd84:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   1dd88:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   1dd8a:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1dd8e:	68a3      	ldr	r3, [r4, #8]
   1dd90:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1dd94:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1dd96:	7b22      	ldrb	r2, [r4, #12]
   1dd98:	3b00      	subs	r3, #0
   1dd9a:	bf18      	it	ne
   1dd9c:	2301      	movne	r3, #1
    switch (spi_mode)
   1dd9e:	2a02      	cmp	r2, #2
   1dda0:	d02f      	beq.n	1de02 <nrfx_spim_init+0x226>
   1dda2:	2a03      	cmp	r2, #3
   1dda4:	d030      	beq.n	1de08 <nrfx_spim_init+0x22c>
   1dda6:	2a01      	cmp	r2, #1
   1dda8:	d101      	bne.n	1ddae <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1ddaa:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1ddae:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1ddb2:	79a3      	ldrb	r3, [r4, #6]
   1ddb4:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1ddb8:	2307      	movs	r3, #7
   1ddba:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   1ddbe:	682b      	ldr	r3, [r5, #0]
   1ddc0:	b12b      	cbz	r3, 1ddce <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1ddc2:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1ddc6:	f340 3007 	sbfx	r0, r0, #12, #8
   1ddca:	f7f1 ffff 	bl	fdcc <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1ddce:	2300      	movs	r3, #0
   1ddd0:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ddd2:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1ddd4:	4816      	ldr	r0, [pc, #88]	; (1de30 <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ddd6:	772b      	strb	r3, [r5, #28]
}
   1ddd8:	b003      	add	sp, #12
   1ddda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1ddde:	4601      	mov	r1, r0
   1dde0:	e748      	b.n	1dc74 <nrfx_spim_init+0x98>
   1dde2:	f00a fbe1 	bl	285a8 <nrf_gpio_pin_set>
   1dde6:	e768      	b.n	1dcba <nrfx_spim_init+0xde>
   1dde8:	f00a fbde 	bl	285a8 <nrf_gpio_pin_set>
   1ddec:	e789      	b.n	1dd02 <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   1ddee:	f04f 33ff 	mov.w	r3, #4294967295
   1ddf2:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1ddf6:	2300      	movs	r3, #0
   1ddf8:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1ddfc:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   1de00:	e7b8      	b.n	1dd74 <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1de02:	f043 0304 	orr.w	r3, r3, #4
        break;
   1de06:	e7d2      	b.n	1ddae <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1de08:	f043 0306 	orr.w	r3, r3, #6
        break;
   1de0c:	e7cf      	b.n	1ddae <nrfx_spim_init+0x1d2>
        return err_code;
   1de0e:	4809      	ldr	r0, [pc, #36]	; (1de34 <nrfx_spim_init+0x258>)
   1de10:	e7e2      	b.n	1ddd8 <nrfx_spim_init+0x1fc>
        return err_code;
   1de12:	4809      	ldr	r0, [pc, #36]	; (1de38 <nrfx_spim_init+0x25c>)
   1de14:	e7e0      	b.n	1ddd8 <nrfx_spim_init+0x1fc>
            return err_code;
   1de16:	4809      	ldr	r0, [pc, #36]	; (1de3c <nrfx_spim_init+0x260>)
   1de18:	e7de      	b.n	1ddd8 <nrfx_spim_init+0x1fc>
   1de1a:	bf00      	nop
   1de1c:	0002fb53 	.word	0x0002fb53
   1de20:	0002b339 	.word	0x0002b339
   1de24:	0002fcd4 	.word	0x0002fcd4
   1de28:	20021378 	.word	0x20021378
   1de2c:	4000a000 	.word	0x4000a000
   1de30:	0bad0000 	.word	0x0bad0000
   1de34:	0bad0005 	.word	0x0bad0005
   1de38:	0bad0003 	.word	0x0bad0003
   1de3c:	0bad0004 	.word	0x0bad0004

0001de40 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   1de40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1de44:	4d2e      	ldr	r5, [pc, #184]	; (1df00 <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1de46:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   1de4a:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1de4c:	ea4f 1648 	mov.w	r6, r8, lsl #5
   1de50:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   1de54:	f898 301c 	ldrb.w	r3, [r8, #28]
   1de58:	b95b      	cbnz	r3, 1de72 <nrfx_spim_uninit+0x32>
   1de5a:	492a      	ldr	r1, [pc, #168]	; (1df04 <nrfx_spim_uninit+0xc4>)
   1de5c:	482a      	ldr	r0, [pc, #168]	; (1df08 <nrfx_spim_uninit+0xc8>)
   1de5e:	f240 230f 	movw	r3, #527	; 0x20f
   1de62:	4a2a      	ldr	r2, [pc, #168]	; (1df0c <nrfx_spim_uninit+0xcc>)
   1de64:	f006 fd9f 	bl	249a6 <assert_print>
   1de68:	f240 210f 	movw	r1, #527	; 0x20f
   1de6c:	4827      	ldr	r0, [pc, #156]	; (1df0c <nrfx_spim_uninit+0xcc>)
   1de6e:	f006 fd93 	bl	24998 <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1de72:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1de74:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   1de76:	b1cb      	cbz	r3, 1deac <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1de78:	f344 3007 	sbfx	r0, r4, #12, #8
   1de7c:	f7f1 ffb4 	bl	fde8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1de80:	4b23      	ldr	r3, [pc, #140]	; (1df10 <nrfx_spim_uninit+0xd0>)
   1de82:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   1de86:	f898 301d 	ldrb.w	r3, [r8, #29]
   1de8a:	b17b      	cbz	r3, 1deac <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de8c:	2301      	movs	r3, #1
   1de8e:	f04f 0864 	mov.w	r8, #100	; 0x64
   1de92:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1de94:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1de98:	b92b      	cbnz	r3, 1dea6 <nrfx_spim_uninit+0x66>
   1de9a:	2001      	movs	r0, #1
   1de9c:	f00a fae8 	bl	28470 <nrfx_busy_wait>
   1dea0:	f1b8 0801 	subs.w	r8, r8, #1
   1dea4:	d1f6      	bne.n	1de94 <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   1dea6:	2200      	movs	r2, #0
   1dea8:	19ab      	adds	r3, r5, r6
   1deaa:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1deac:	2300      	movs	r3, #0
   1deae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1deb2:	19ab      	adds	r3, r5, r6
   1deb4:	7f9b      	ldrb	r3, [r3, #30]
   1deb6:	07db      	lsls	r3, r3, #31
   1deb8:	d41b      	bmi.n	1def2 <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   1deba:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1debe:	f00a fbae 	bl	2861e <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1dec2:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1dec6:	f00a fbaa 	bl	2861e <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   1deca:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1dece:	f00a fba6 	bl	2861e <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1ded2:	793b      	ldrb	r3, [r7, #4]
   1ded4:	b91b      	cbnz	r3, 1dede <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   1ded6:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   1deda:	f00a fba0 	bl	2861e <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1dede:	19ab      	adds	r3, r5, r6
   1dee0:	7fd8      	ldrb	r0, [r3, #31]
   1dee2:	28ff      	cmp	r0, #255	; 0xff
   1dee4:	d005      	beq.n	1def2 <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   1dee6:	2300      	movs	r3, #0
   1dee8:	2201      	movs	r2, #1
   1deea:	4619      	mov	r1, r3
   1deec:	9300      	str	r3, [sp, #0]
   1deee:	f00a fb77 	bl	285e0 <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1def2:	2300      	movs	r3, #0
   1def4:	4435      	add	r5, r6
   1def6:	772b      	strb	r3, [r5, #28]
}
   1def8:	b002      	add	sp, #8
   1defa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1defe:	bf00      	nop
   1df00:	20021378 	.word	0x20021378
   1df04:	0002fd10 	.word	0x0002fd10
   1df08:	0002b339 	.word	0x0002b339
   1df0c:	0002fcd4 	.word	0x0002fcd4
   1df10:	00080152 	.word	0x00080152

0001df14 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1df14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1df18:	4e60      	ldr	r6, [pc, #384]	; (1e09c <nrfx_spim_xfer+0x188>)
   1df1a:	7903      	ldrb	r3, [r0, #4]
{
   1df1c:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1df1e:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1df22:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   1df26:	4607      	mov	r7, r0
   1df28:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1df2a:	b95a      	cbnz	r2, 1df44 <nrfx_spim_xfer+0x30>
   1df2c:	495c      	ldr	r1, [pc, #368]	; (1e0a0 <nrfx_spim_xfer+0x18c>)
   1df2e:	f240 23de 	movw	r3, #734	; 0x2de
   1df32:	4a5c      	ldr	r2, [pc, #368]	; (1e0a4 <nrfx_spim_xfer+0x190>)
   1df34:	485c      	ldr	r0, [pc, #368]	; (1e0a8 <nrfx_spim_xfer+0x194>)
   1df36:	f006 fd36 	bl	249a6 <assert_print>
   1df3a:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   1df3e:	4859      	ldr	r0, [pc, #356]	; (1e0a4 <nrfx_spim_xfer+0x190>)
   1df40:	f006 fd2a 	bl	24998 <assert_post_action>
   1df44:	680a      	ldr	r2, [r1, #0]
   1df46:	b95a      	cbnz	r2, 1df60 <nrfx_spim_xfer+0x4c>
   1df48:	684a      	ldr	r2, [r1, #4]
   1df4a:	b14a      	cbz	r2, 1df60 <nrfx_spim_xfer+0x4c>
   1df4c:	4957      	ldr	r1, [pc, #348]	; (1e0ac <nrfx_spim_xfer+0x198>)
   1df4e:	f240 23df 	movw	r3, #735	; 0x2df
   1df52:	4a54      	ldr	r2, [pc, #336]	; (1e0a4 <nrfx_spim_xfer+0x190>)
   1df54:	4854      	ldr	r0, [pc, #336]	; (1e0a8 <nrfx_spim_xfer+0x194>)
   1df56:	f006 fd26 	bl	249a6 <assert_print>
   1df5a:	f240 21df 	movw	r1, #735	; 0x2df
   1df5e:	e7ee      	b.n	1df3e <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   1df60:	68a2      	ldr	r2, [r4, #8]
   1df62:	b96a      	cbnz	r2, 1df80 <nrfx_spim_xfer+0x6c>
   1df64:	68e2      	ldr	r2, [r4, #12]
   1df66:	2a00      	cmp	r2, #0
   1df68:	f000 8094 	beq.w	1e094 <nrfx_spim_xfer+0x180>
   1df6c:	4950      	ldr	r1, [pc, #320]	; (1e0b0 <nrfx_spim_xfer+0x19c>)
   1df6e:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   1df72:	4a4c      	ldr	r2, [pc, #304]	; (1e0a4 <nrfx_spim_xfer+0x190>)
   1df74:	484c      	ldr	r0, [pc, #304]	; (1e0a8 <nrfx_spim_xfer+0x194>)
   1df76:	f006 fd16 	bl	249a6 <assert_print>
   1df7a:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   1df7e:	e7de      	b.n	1df3e <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1df80:	b93b      	cbnz	r3, 1df92 <nrfx_spim_xfer+0x7e>
   1df82:	68e3      	ldr	r3, [r4, #12]
   1df84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1df88:	d203      	bcs.n	1df92 <nrfx_spim_xfer+0x7e>
   1df8a:	6863      	ldr	r3, [r4, #4]
   1df8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1df90:	d309      	bcc.n	1dfa6 <nrfx_spim_xfer+0x92>
   1df92:	4948      	ldr	r1, [pc, #288]	; (1e0b4 <nrfx_spim_xfer+0x1a0>)
   1df94:	f240 23e1 	movw	r3, #737	; 0x2e1
   1df98:	4a42      	ldr	r2, [pc, #264]	; (1e0a4 <nrfx_spim_xfer+0x190>)
   1df9a:	4843      	ldr	r0, [pc, #268]	; (1e0a8 <nrfx_spim_xfer+0x194>)
   1df9c:	f006 fd03 	bl	249a6 <assert_print>
   1dfa0:	f240 21e1 	movw	r1, #737	; 0x2e1
   1dfa4:	e7cb      	b.n	1df3e <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   1dfa6:	f015 0908 	ands.w	r9, r5, #8
   1dfaa:	d00f      	beq.n	1dfcc <nrfx_spim_xfer+0xb8>
   1dfac:	7fb3      	ldrb	r3, [r6, #30]
   1dfae:	075b      	lsls	r3, r3, #29
   1dfb0:	d40c      	bmi.n	1dfcc <nrfx_spim_xfer+0xb8>
   1dfb2:	7ff3      	ldrb	r3, [r6, #31]
   1dfb4:	2bff      	cmp	r3, #255	; 0xff
   1dfb6:	d009      	beq.n	1dfcc <nrfx_spim_xfer+0xb8>
   1dfb8:	493f      	ldr	r1, [pc, #252]	; (1e0b8 <nrfx_spim_xfer+0x1a4>)
   1dfba:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   1dfbe:	4a39      	ldr	r2, [pc, #228]	; (1e0a4 <nrfx_spim_xfer+0x190>)
   1dfc0:	4839      	ldr	r0, [pc, #228]	; (1e0a8 <nrfx_spim_xfer+0x194>)
   1dfc2:	f006 fcf0 	bl	249a6 <assert_print>
   1dfc6:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   1dfca:	e7b8      	b.n	1df3e <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1dfcc:	7f73      	ldrb	r3, [r6, #29]
   1dfce:	2b00      	cmp	r3, #0
   1dfd0:	d15e      	bne.n	1e090 <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   1dfd2:	6833      	ldr	r3, [r6, #0]
   1dfd4:	b123      	cbz	r3, 1dfe0 <nrfx_spim_xfer+0xcc>
   1dfd6:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   1dfda:	bf04      	itt	eq
   1dfdc:	2301      	moveq	r3, #1
   1dfde:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1dfe0:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1e0bc <nrfx_spim_xfer+0x1a8>
   1dfe4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1dfe8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   1dfec:	2101      	movs	r1, #1
   1dfee:	4640      	mov	r0, r8
   1dff0:	f00a fae6 	bl	285c0 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1dff4:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   1dff6:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1dff8:	b121      	cbz	r1, 1e004 <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1dffa:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   1dffe:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1e002:	d106      	bne.n	1e012 <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1e004:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1e006:	b14a      	cbz	r2, 1e01c <nrfx_spim_xfer+0x108>
   1e008:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1e00c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1e010:	d004      	beq.n	1e01c <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   1e012:	2300      	movs	r3, #0
        return err_code;
   1e014:	482a      	ldr	r0, [pc, #168]	; (1e0c0 <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   1e016:	7773      	strb	r3, [r6, #29]
}
   1e018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1e01c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e01e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e022:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e026:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   1e02a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e02e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e032:	2200      	movs	r2, #0
   1e034:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1e038:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1e03c:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1e040:	bf18      	it	ne
   1e042:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1e044:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1e048:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1e04c:	bf18      	it	ne
   1e04e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1e050:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   1e054:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1e056:	f1b9 0f00 	cmp.w	r9, #0
   1e05a:	d006      	beq.n	1e06a <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   1e05c:	b96a      	cbnz	r2, 1e07a <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   1e05e:	2100      	movs	r1, #0
   1e060:	4640      	mov	r0, r8
   1e062:	f00a faad 	bl	285c0 <set_ss_pin_state>
    return err_code;
   1e066:	4817      	ldr	r0, [pc, #92]	; (1e0c4 <nrfx_spim_xfer+0x1b0>)
   1e068:	e7d6      	b.n	1e018 <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e06a:	2101      	movs	r1, #1
   1e06c:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   1e06e:	b922      	cbnz	r2, 1e07a <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e070:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1e074:	2a00      	cmp	r2, #0
   1e076:	d0fb      	beq.n	1e070 <nrfx_spim_xfer+0x15c>
   1e078:	e7f1      	b.n	1e05e <nrfx_spim_xfer+0x14a>
    if (!enable)
   1e07a:	f015 0f04 	tst.w	r5, #4
   1e07e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e082:	d002      	beq.n	1e08a <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   1e084:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1e088:	e7ed      	b.n	1e066 <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   1e08a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1e08e:	e7ea      	b.n	1e066 <nrfx_spim_xfer+0x152>
        return err_code;
   1e090:	480d      	ldr	r0, [pc, #52]	; (1e0c8 <nrfx_spim_xfer+0x1b4>)
   1e092:	e7c1      	b.n	1e018 <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1e094:	2b00      	cmp	r3, #0
   1e096:	f43f af78 	beq.w	1df8a <nrfx_spim_xfer+0x76>
   1e09a:	e77a      	b.n	1df92 <nrfx_spim_xfer+0x7e>
   1e09c:	20021378 	.word	0x20021378
   1e0a0:	0002fd10 	.word	0x0002fd10
   1e0a4:	0002fcd4 	.word	0x0002fcd4
   1e0a8:	0002b339 	.word	0x0002b339
   1e0ac:	0002fd3c 	.word	0x0002fd3c
   1e0b0:	0002fd83 	.word	0x0002fd83
   1e0b4:	0002fdca 	.word	0x0002fdca
   1e0b8:	0002fe6e 	.word	0x0002fe6e
   1e0bc:	20021384 	.word	0x20021384
   1e0c0:	0bad000a 	.word	0x0bad000a
   1e0c4:	0bad0000 	.word	0x0bad0000
   1e0c8:	0bad000b 	.word	0x0bad000b

0001e0cc <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   1e0cc:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e0ce:	4b13      	ldr	r3, [pc, #76]	; (1e11c <nrfx_spim_4_irq_handler+0x50>)
   1e0d0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1e0d4:	b302      	cbz	r2, 1e118 <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e0d6:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   1e0d8:	4c11      	ldr	r4, [pc, #68]	; (1e120 <nrfx_spim_4_irq_handler+0x54>)
   1e0da:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   1e0de:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   1e0e2:	6823      	ldr	r3, [r4, #0]
   1e0e4:	b95b      	cbnz	r3, 1e0fe <nrfx_spim_4_irq_handler+0x32>
   1e0e6:	490f      	ldr	r1, [pc, #60]	; (1e124 <nrfx_spim_4_irq_handler+0x58>)
   1e0e8:	480f      	ldr	r0, [pc, #60]	; (1e128 <nrfx_spim_4_irq_handler+0x5c>)
   1e0ea:	f240 333b 	movw	r3, #827	; 0x33b
   1e0ee:	4a0f      	ldr	r2, [pc, #60]	; (1e12c <nrfx_spim_4_irq_handler+0x60>)
   1e0f0:	f006 fc59 	bl	249a6 <assert_print>
   1e0f4:	f240 313b 	movw	r1, #827	; 0x33b
   1e0f8:	480c      	ldr	r0, [pc, #48]	; (1e12c <nrfx_spim_4_irq_handler+0x60>)
   1e0fa:	f006 fc4d 	bl	24998 <assert_post_action>
    set_ss_pin_state(p_cb, false);
   1e0fe:	4629      	mov	r1, r5
   1e100:	4620      	mov	r0, r4
   1e102:	f00a fa5d 	bl	285c0 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e106:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   1e10a:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1e10c:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e10e:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   1e112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e116:	4718      	bx	r3
}
   1e118:	bd70      	pop	{r4, r5, r6, pc}
   1e11a:	bf00      	nop
   1e11c:	4000a000 	.word	0x4000a000
   1e120:	20021378 	.word	0x20021378
   1e124:	0002feb1 	.word	0x0002feb1
   1e128:	0002b339 	.word	0x0002b339
   1e12c:	0002fcd4 	.word	0x0002fcd4

0001e130 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   1e130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e134:	460e      	mov	r6, r1
   1e136:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1e138:	4d0c      	ldr	r5, [pc, #48]	; (1e16c <metal_generic_dev_open+0x3c>)
   1e13a:	f855 4f18 	ldr.w	r4, [r5, #24]!
   1e13e:	42ac      	cmp	r4, r5
   1e140:	d103      	bne.n	1e14a <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   1e142:	f06f 0012 	mvn.w	r0, #18
   1e146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1e14a:	4631      	mov	r1, r6
   1e14c:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   1e150:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   1e154:	f7eb f8fa 	bl	934c <strcmp>
   1e158:	b930      	cbnz	r0, 1e168 <metal_generic_dev_open+0x38>
			*device = dev;
   1e15a:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   1e15e:	4640      	mov	r0, r8
}
   1e160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   1e164:	f00a bb60 	b.w	28828 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1e168:	6824      	ldr	r4, [r4, #0]
   1e16a:	e7e8      	b.n	1e13e <metal_generic_dev_open+0xe>
   1e16c:	20021398 	.word	0x20021398

0001e170 <metal_bus_unregister>:
{
   1e170:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1e172:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1e176:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1e178:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   1e17a:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1e17e:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1e180:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   1e184:	6843      	ldr	r3, [r0, #4]
{
   1e186:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   1e188:	b103      	cbz	r3, 1e18c <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   1e18a:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   1e18c:	4b05      	ldr	r3, [pc, #20]	; (1e1a4 <metal_bus_unregister+0x34>)
   1e18e:	781a      	ldrb	r2, [r3, #0]
   1e190:	2a06      	cmp	r2, #6
   1e192:	d905      	bls.n	1e1a0 <metal_bus_unregister+0x30>
   1e194:	685b      	ldr	r3, [r3, #4]
   1e196:	b11b      	cbz	r3, 1e1a0 <metal_bus_unregister+0x30>
   1e198:	2007      	movs	r0, #7
   1e19a:	6822      	ldr	r2, [r4, #0]
   1e19c:	4902      	ldr	r1, [pc, #8]	; (1e1a8 <metal_bus_unregister+0x38>)
   1e19e:	4798      	blx	r3
}
   1e1a0:	2000      	movs	r0, #0
   1e1a2:	bd10      	pop	{r4, pc}
   1e1a4:	20021398 	.word	0x20021398
   1e1a8:	0002fed4 	.word	0x0002fed4

0001e1ac <metal_bus_find>:
{
   1e1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1b0:	4607      	mov	r7, r0
   1e1b2:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   1e1b4:	4e0b      	ldr	r6, [pc, #44]	; (1e1e4 <metal_bus_find+0x38>)
   1e1b6:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1e1ba:	42b4      	cmp	r4, r6
   1e1bc:	d102      	bne.n	1e1c4 <metal_bus_find+0x18>
	return -ENOENT;
   1e1be:	f06f 0001 	mvn.w	r0, #1
   1e1c2:	e00a      	b.n	1e1da <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   1e1c4:	4639      	mov	r1, r7
   1e1c6:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1e1ca:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1e1ce:	f7eb f8bd 	bl	934c <strcmp>
   1e1d2:	b920      	cbnz	r0, 1e1de <metal_bus_find+0x32>
   1e1d4:	b11d      	cbz	r5, 1e1de <metal_bus_find+0x32>
			*result = bus;
   1e1d6:	f8c5 8000 	str.w	r8, [r5]
}
   1e1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1e1de:	6824      	ldr	r4, [r4, #0]
   1e1e0:	e7eb      	b.n	1e1ba <metal_bus_find+0xe>
   1e1e2:	bf00      	nop
   1e1e4:	20021398 	.word	0x20021398

0001e1e8 <metal_bus_register>:
{
   1e1e8:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1e1ea:	4604      	mov	r4, r0
   1e1ec:	b910      	cbnz	r0, 1e1f4 <metal_bus_register+0xc>
		return -EINVAL;
   1e1ee:	f06f 0015 	mvn.w	r0, #21
}
   1e1f2:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   1e1f4:	6800      	ldr	r0, [r0, #0]
   1e1f6:	2800      	cmp	r0, #0
   1e1f8:	d0f9      	beq.n	1e1ee <metal_bus_register+0x6>
   1e1fa:	f7eb f8b1 	bl	9360 <strlen>
   1e1fe:	2800      	cmp	r0, #0
   1e200:	d0f5      	beq.n	1e1ee <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1e202:	2100      	movs	r1, #0
   1e204:	6820      	ldr	r0, [r4, #0]
   1e206:	f7ff ffd1 	bl	1e1ac <metal_bus_find>
   1e20a:	b1c8      	cbz	r0, 1e240 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   1e20c:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   1e210:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   1e214:	4b0c      	ldr	r3, [pc, #48]	; (1e248 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1e216:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1e21a:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   1e21c:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   1e220:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1e222:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   1e224:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1e226:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1e228:	781a      	ldrb	r2, [r3, #0]
   1e22a:	2a06      	cmp	r2, #6
   1e22c:	d901      	bls.n	1e232 <metal_bus_register+0x4a>
   1e22e:	685b      	ldr	r3, [r3, #4]
   1e230:	b90b      	cbnz	r3, 1e236 <metal_bus_register+0x4e>
	return 0;
   1e232:	2000      	movs	r0, #0
   1e234:	e7dd      	b.n	1e1f2 <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1e236:	2007      	movs	r0, #7
   1e238:	6822      	ldr	r2, [r4, #0]
   1e23a:	4904      	ldr	r1, [pc, #16]	; (1e24c <metal_bus_register+0x64>)
   1e23c:	4798      	blx	r3
   1e23e:	e7f8      	b.n	1e232 <metal_bus_register+0x4a>
		return -EEXIST;
   1e240:	f06f 0010 	mvn.w	r0, #16
   1e244:	e7d5      	b.n	1e1f2 <metal_bus_register+0xa>
   1e246:	bf00      	nop
   1e248:	20021398 	.word	0x20021398
   1e24c:	0002fed6 	.word	0x0002fed6

0001e250 <metal_device_close>:
	metal_assert(device && device->bus);
   1e250:	4601      	mov	r1, r0
{
   1e252:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   1e254:	b108      	cbz	r0, 1e25a <metal_device_close+0xa>
   1e256:	6840      	ldr	r0, [r0, #4]
   1e258:	b948      	cbnz	r0, 1e26e <metal_device_close+0x1e>
   1e25a:	4908      	ldr	r1, [pc, #32]	; (1e27c <metal_device_close+0x2c>)
   1e25c:	4808      	ldr	r0, [pc, #32]	; (1e280 <metal_device_close+0x30>)
   1e25e:	2351      	movs	r3, #81	; 0x51
   1e260:	4a08      	ldr	r2, [pc, #32]	; (1e284 <metal_device_close+0x34>)
   1e262:	f006 fba0 	bl	249a6 <assert_print>
   1e266:	2151      	movs	r1, #81	; 0x51
   1e268:	4806      	ldr	r0, [pc, #24]	; (1e284 <metal_device_close+0x34>)
   1e26a:	f006 fb95 	bl	24998 <assert_post_action>
	if (device->bus->ops.dev_close)
   1e26e:	68c3      	ldr	r3, [r0, #12]
   1e270:	b113      	cbz	r3, 1e278 <metal_device_close+0x28>
}
   1e272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   1e276:	4718      	bx	r3
}
   1e278:	bd10      	pop	{r4, pc}
   1e27a:	bf00      	nop
   1e27c:	0002ff20 	.word	0x0002ff20
   1e280:	0002b339 	.word	0x0002b339
   1e284:	0002fee9 	.word	0x0002fee9

0001e288 <metal_register_generic_device>:
{
   1e288:	b510      	push	{r4, lr}
   1e28a:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   1e28c:	6800      	ldr	r0, [r0, #0]
   1e28e:	b910      	cbnz	r0, 1e296 <metal_register_generic_device+0xe>
		return -EINVAL;
   1e290:	f06f 0015 	mvn.w	r0, #21
}
   1e294:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   1e296:	f7eb f863 	bl	9360 <strlen>
   1e29a:	2800      	cmp	r0, #0
   1e29c:	d0f8      	beq.n	1e290 <metal_register_generic_device+0x8>
   1e29e:	68a3      	ldr	r3, [r4, #8]
   1e2a0:	2b01      	cmp	r3, #1
   1e2a2:	d8f5      	bhi.n	1e290 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   1e2a4:	4b06      	ldr	r3, [pc, #24]	; (1e2c0 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1e2a6:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1e2aa:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   1e2ac:	4b05      	ldr	r3, [pc, #20]	; (1e2c4 <metal_register_generic_device+0x3c>)
   1e2ae:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   1e2b0:	f103 0018 	add.w	r0, r3, #24
   1e2b4:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   1e2b6:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   1e2b8:	61d9      	str	r1, [r3, #28]
	return 0;
   1e2ba:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   1e2bc:	6011      	str	r1, [r2, #0]
}
   1e2be:	e7e9      	b.n	1e294 <metal_register_generic_device+0xc>
   1e2c0:	20008708 	.word	0x20008708
   1e2c4:	20021398 	.word	0x20021398

0001e2c8 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   1e2c8:	4b0e      	ldr	r3, [pc, #56]	; (1e304 <metal_init+0x3c>)
{
   1e2ca:	b510      	push	{r4, lr}
   1e2cc:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   1e2ce:	2220      	movs	r2, #32
   1e2d0:	2100      	movs	r1, #0
   1e2d2:	4618      	mov	r0, r3
   1e2d4:	f00b f907 	bl	294e6 <memset>

	_metal.common.log_handler   = params->log_handler;
   1e2d8:	6822      	ldr	r2, [r4, #0]
   1e2da:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   1e2dc:	4602      	mov	r2, r0
   1e2de:	7921      	ldrb	r1, [r4, #4]
   1e2e0:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   1e2e4:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   1e2e8:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   1e2ec:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   1e2f0:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   1e2f4:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1e2f8:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   1e2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   1e2fe:	f000 b80f 	b.w	1e320 <metal_sys_init>
   1e302:	bf00      	nop
   1e304:	20021398 	.word	0x20021398

0001e308 <metal_finish>:

void metal_finish(void)
{
   1e308:	b508      	push	{r3, lr}
	metal_sys_finish();
   1e30a:	f000 f811 	bl	1e330 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   1e30e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   1e312:	2220      	movs	r2, #32
   1e314:	2100      	movs	r1, #0
   1e316:	4801      	ldr	r0, [pc, #4]	; (1e31c <metal_finish+0x14>)
   1e318:	f00b b8e5 	b.w	294e6 <memset>
   1e31c:	20021398 	.word	0x20021398

0001e320 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   1e320:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   1e322:	4802      	ldr	r0, [pc, #8]	; (1e32c <metal_sys_init+0xc>)
   1e324:	f7ff ff60 	bl	1e1e8 <metal_bus_register>
	return 0;
}
   1e328:	2000      	movs	r0, #0
   1e32a:	bd08      	pop	{r3, pc}
   1e32c:	20008708 	.word	0x20008708

0001e330 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   1e330:	4801      	ldr	r0, [pc, #4]	; (1e338 <metal_sys_finish+0x8>)
   1e332:	f7ff bf1d 	b.w	1e170 <metal_bus_unregister>
   1e336:	bf00      	nop
   1e338:	20008708 	.word	0x20008708

0001e33c <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   1e33c:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1e33e:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   1e340:	2b06      	cmp	r3, #6
{
   1e342:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   1e344:	bf88      	it	hi
   1e346:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   1e348:	4b09      	ldr	r3, [pc, #36]	; (1e370 <metal_zephyr_log_handler+0x34>)
{
   1e34a:	ac05      	add	r4, sp, #20
   1e34c:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   1e350:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1e354:	4807      	ldr	r0, [pc, #28]	; (1e374 <metal_zephyr_log_handler+0x38>)
   1e356:	f006 f964 	bl	24622 <printk>

	va_start(args, format);
	vprintk(format, args);
   1e35a:	4621      	mov	r1, r4
   1e35c:	4628      	mov	r0, r5
	va_start(args, format);
   1e35e:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   1e360:	f7ee fad2 	bl	c908 <vprintk>
	va_end(args);
}
   1e364:	b002      	add	sp, #8
   1e366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1e36a:	b003      	add	sp, #12
   1e36c:	4770      	bx	lr
   1e36e:	bf00      	nop
   1e370:	0002b1f4 	.word	0x0002b1f4
   1e374:	0002b4ec 	.word	0x0002b4ec

0001e378 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   1e378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e37c:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   1e37e:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1e380:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   1e382:	4293      	cmp	r3, r2
{
   1e384:	4617      	mov	r7, r2
   1e386:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   1e388:	d341      	bcc.n	1e40e <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1e38a:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   1e38c:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   1e390:	42bd      	cmp	r5, r7
   1e392:	d103      	bne.n	1e39c <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   1e394:	2000      	movs	r0, #0
}
   1e396:	b007      	add	sp, #28
   1e398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   1e39c:	fb0b f805 	mul.w	r8, fp, r5
   1e3a0:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1e3a4:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   1e3a6:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1e3aa:	1d23      	adds	r3, r4, #4
   1e3ac:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1e3ae:	b9ca      	cbnz	r2, 1e3e4 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   1e3b0:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e3b2:	6861      	ldr	r1, [r4, #4]
   1e3b4:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   1e3b6:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1e3ba:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   1e3bc:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1e3be:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   1e3c2:	1e5c      	subs	r4, r3, #1
   1e3c4:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   1e3c8:	425b      	negs	r3, r3
   1e3ca:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   1e3ce:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   1e3d0:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   1e3d4:	6884      	ldr	r4, [r0, #8]
   1e3d6:	3306      	adds	r3, #6
   1e3d8:	42a1      	cmp	r1, r4
   1e3da:	bf28      	it	cs
   1e3dc:	f04f 31ff 	movcs.w	r1, #4294967295
   1e3e0:	f00a f9ee 	bl	287c0 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1e3e4:	f859 3008 	ldr.w	r3, [r9, r8]
   1e3e8:	4630      	mov	r0, r6
   1e3ea:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   1e3ec:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1e3ee:	b2a9      	uxth	r1, r5
   1e3f0:	6a1b      	ldr	r3, [r3, #32]
   1e3f2:	9301      	str	r3, [sp, #4]
   1e3f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e3f6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1e3fa:	9300      	str	r3, [sp, #0]
   1e3fc:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   1e400:	9b05      	ldr	r3, [sp, #20]
   1e402:	f00a fa56 	bl	288b2 <virtqueue_create>
		if (ret)
   1e406:	2800      	cmp	r0, #0
   1e408:	d1c5      	bne.n	1e396 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1e40a:	3501      	adds	r5, #1
   1e40c:	e7c0      	b.n	1e390 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1e40e:	4801      	ldr	r0, [pc, #4]	; (1e414 <virtio_create_virtqueues+0x9c>)
   1e410:	e7c1      	b.n	1e396 <virtio_create_virtqueues+0x1e>
   1e412:	bf00      	nop
   1e414:	fffff440 	.word	0xfffff440

0001e418 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   1e418:	b510      	push	{r4, lr}
	if (vq) {
   1e41a:	4604      	mov	r4, r0
   1e41c:	b190      	cbz	r0, 1e444 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   1e41e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1e420:	8943      	ldrh	r3, [r0, #10]
   1e422:	429a      	cmp	r2, r3
   1e424:	d009      	beq.n	1e43a <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   1e426:	4b08      	ldr	r3, [pc, #32]	; (1e448 <virtqueue_free+0x30>)
   1e428:	781a      	ldrb	r2, [r3, #0]
   1e42a:	2a03      	cmp	r2, #3
   1e42c:	d905      	bls.n	1e43a <virtqueue_free+0x22>
   1e42e:	685b      	ldr	r3, [r3, #4]
   1e430:	b11b      	cbz	r3, 1e43a <virtqueue_free+0x22>
   1e432:	6842      	ldr	r2, [r0, #4]
   1e434:	4905      	ldr	r1, [pc, #20]	; (1e44c <virtqueue_free+0x34>)
   1e436:	2004      	movs	r0, #4
   1e438:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   1e43a:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   1e43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e440:	f00a bffb 	b.w	2943a <k_free>
   1e444:	bd10      	pop	{r4, pc}
   1e446:	bf00      	nop
   1e448:	20021398 	.word	0x20021398
   1e44c:	0002ffce 	.word	0x0002ffce

0001e450 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   1e450:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   1e452:	8944      	ldrh	r4, [r0, #10]
   1e454:	428c      	cmp	r4, r1
   1e456:	d912      	bls.n	1e47e <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   1e458:	6a03      	ldr	r3, [r0, #32]
   1e45a:	3c01      	subs	r4, #1
   1e45c:	885d      	ldrh	r5, [r3, #2]
   1e45e:	402c      	ands	r4, r5
   1e460:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   1e464:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   1e466:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1e468:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1e46c:	6a02      	ldr	r2, [r0, #32]
   1e46e:	8853      	ldrh	r3, [r2, #2]
   1e470:	3301      	adds	r3, #1
   1e472:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1e474:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1e476:	3301      	adds	r3, #1
   1e478:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1e47a:	2000      	movs	r0, #0
}
   1e47c:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1e47e:	4801      	ldr	r0, [pc, #4]	; (1e484 <virtqueue_add_consumed_buffer+0x34>)
   1e480:	e7fc      	b.n	1e47c <virtqueue_add_consumed_buffer+0x2c>
   1e482:	bf00      	nop
   1e484:	fffff441 	.word	0xfffff441

0001e488 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   1e488:	b470      	push	{r4, r5, r6}
   1e48a:	9e03      	ldr	r6, [sp, #12]
   1e48c:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1e48e:	b158      	cbz	r0, 1e4a8 <rpmsg_send_offchannel_raw+0x20>
   1e490:	6a00      	ldr	r0, [r0, #32]
   1e492:	b148      	cbz	r0, 1e4a8 <rpmsg_send_offchannel_raw+0x20>
   1e494:	b143      	cbz	r3, 1e4a8 <rpmsg_send_offchannel_raw+0x20>
   1e496:	3401      	adds	r4, #1
   1e498:	d006      	beq.n	1e4a8 <rpmsg_send_offchannel_raw+0x20>
   1e49a:	2e00      	cmp	r6, #0
   1e49c:	db04      	blt.n	1e4a8 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   1e49e:	6f84      	ldr	r4, [r0, #120]	; 0x78
   1e4a0:	b114      	cbz	r4, 1e4a8 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1e4a2:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   1e4a4:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1e4a6:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1e4a8:	4801      	ldr	r0, [pc, #4]	; (1e4b0 <rpmsg_send_offchannel_raw+0x28>)
}
   1e4aa:	bc70      	pop	{r4, r5, r6}
   1e4ac:	4770      	bx	lr
   1e4ae:	bf00      	nop
   1e4b0:	fffff82d 	.word	0xfffff82d

0001e4b4 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   1e4b4:	b470      	push	{r4, r5, r6}
   1e4b6:	9e03      	ldr	r6, [sp, #12]
   1e4b8:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1e4ba:	b160      	cbz	r0, 1e4d6 <rpmsg_send_offchannel_nocopy+0x22>
   1e4bc:	6a00      	ldr	r0, [r0, #32]
   1e4be:	b150      	cbz	r0, 1e4d6 <rpmsg_send_offchannel_nocopy+0x22>
   1e4c0:	b14b      	cbz	r3, 1e4d6 <rpmsg_send_offchannel_nocopy+0x22>
   1e4c2:	3401      	adds	r4, #1
   1e4c4:	d007      	beq.n	1e4d6 <rpmsg_send_offchannel_nocopy+0x22>
   1e4c6:	2e00      	cmp	r6, #0
   1e4c8:	db05      	blt.n	1e4d6 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   1e4ca:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   1e4ce:	b114      	cbz	r4, 1e4d6 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1e4d0:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   1e4d2:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1e4d4:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1e4d6:	4801      	ldr	r0, [pc, #4]	; (1e4dc <rpmsg_send_offchannel_nocopy+0x28>)
}
   1e4d8:	bc70      	pop	{r4, r5, r6}
   1e4da:	4770      	bx	lr
   1e4dc:	fffff82d 	.word	0xfffff82d

0001e4e0 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   1e4e0:	b570      	push	{r4, r5, r6, lr}
   1e4e2:	460c      	mov	r4, r1
   1e4e4:	4611      	mov	r1, r2
   1e4e6:	4605      	mov	r5, r0
   1e4e8:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1e4ea:	4b0c      	ldr	r3, [pc, #48]	; (1e51c <rpmsg_register_endpoint+0x3c>)
   1e4ec:	2220      	movs	r2, #32
   1e4ee:	2900      	cmp	r1, #0
   1e4f0:	bf08      	it	eq
   1e4f2:	4619      	moveq	r1, r3
   1e4f4:	4620      	mov	r0, r4
   1e4f6:	f00b f938 	bl	2976a <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   1e4fa:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   1e4fc:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   1e4fe:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   1e500:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   1e502:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   1e504:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1e506:	9b06      	ldr	r3, [sp, #24]
   1e508:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   1e50a:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1e50c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   1e510:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   1e514:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   1e516:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1e518:	6013      	str	r3, [r2, #0]
}
   1e51a:	bd70      	pop	{r4, r5, r6, pc}
   1e51c:	0002ee3c 	.word	0x0002ee3c

0001e520 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   1e520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e524:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   1e528:	460d      	mov	r5, r1
   1e52a:	4692      	mov	sl, r2
   1e52c:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   1e52e:	4606      	mov	r6, r0
   1e530:	2800      	cmp	r0, #0
   1e532:	d06c      	beq.n	1e60e <rpmsg_create_ept+0xee>
   1e534:	2900      	cmp	r1, #0
   1e536:	d06a      	beq.n	1e60e <rpmsg_create_ept+0xee>
   1e538:	f1b9 0f00 	cmp.w	r9, #0
   1e53c:	d067      	beq.n	1e60e <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1e53e:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1e542:	4640      	mov	r0, r8
   1e544:	f00a fb1e 	bl	28b84 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   1e548:	1c78      	adds	r0, r7, #1
   1e54a:	d140      	bne.n	1e5ce <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1e54c:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1e54e:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1e552:	f014 0401 	ands.w	r4, r4, #1
   1e556:	d00b      	beq.n	1e570 <rpmsg_create_ept+0x50>
	for (bit = start;
   1e558:	2400      	movs	r4, #0
	     bit++)
   1e55a:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1e55c:	2c80      	cmp	r4, #128	; 0x80
   1e55e:	d054      	beq.n	1e60a <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1e560:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1e562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1e566:	f004 011f 	and.w	r1, r4, #31
   1e56a:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1e56c:	07d1      	lsls	r1, r2, #31
   1e56e:	d4f4      	bmi.n	1e55a <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e570:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1e572:	0960      	lsrs	r0, r4, #5
   1e574:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   1e578:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e57c:	f004 041f 	and.w	r4, r4, #31
   1e580:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1e582:	430a      	orrs	r2, r1
   1e584:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   1e588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e58a:	4652      	mov	r2, sl
   1e58c:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1e590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e592:	4631      	mov	r1, r6
   1e594:	9300      	str	r3, [sp, #0]
   1e596:	4628      	mov	r0, r5
   1e598:	463b      	mov	r3, r7
   1e59a:	f7ff ffa1 	bl	1e4e0 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1e59e:	4640      	mov	r0, r8
   1e5a0:	f001 fa9c 	bl	1fadc <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   1e5a4:	7834      	ldrb	r4, [r6, #0]
   1e5a6:	b174      	cbz	r4, 1e5c6 <rpmsg_create_ept+0xa6>
   1e5a8:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   1e5ac:	b15c      	cbz	r4, 1e5c6 <rpmsg_create_ept+0xa6>
   1e5ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1e5b0:	3301      	adds	r3, #1
   1e5b2:	d12e      	bne.n	1e612 <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1e5b4:	2100      	movs	r1, #0
   1e5b6:	4630      	mov	r0, r6
   1e5b8:	f00a fb13 	bl	28be2 <rpmsg_send_ns_message>

	if (status)
   1e5bc:	4604      	mov	r4, r0
   1e5be:	b110      	cbz	r0, 1e5c6 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   1e5c0:	4630      	mov	r0, r6
   1e5c2:	f00a fae5 	bl	28b90 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1e5c6:	4620      	mov	r0, r4
   1e5c8:	b004      	add	sp, #16
   1e5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   1e5ce:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   1e5d2:	d3d9      	bcc.n	1e588 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1e5d4:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1e5d8:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   1e5da:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   1e5de:	d80f      	bhi.n	1e600 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1e5e0:	0958      	lsrs	r0, r3, #5
   1e5e2:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1e5e6:	f003 031f 	and.w	r3, r3, #31
   1e5ea:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   1e5ee:	07d2      	lsls	r2, r2, #31
   1e5f0:	d40b      	bmi.n	1e60a <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1e5f2:	2201      	movs	r2, #1
   1e5f4:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1e5f8:	4323      	orrs	r3, r4
   1e5fa:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   1e5fe:	e7c3      	b.n	1e588 <rpmsg_create_ept+0x68>
   1e600:	4c05      	ldr	r4, [pc, #20]	; (1e618 <rpmsg_create_ept+0xf8>)
   1e602:	4640      	mov	r0, r8
   1e604:	f001 fa6a 	bl	1fadc <z_impl_k_sem_give>
}
   1e608:	e7dd      	b.n	1e5c6 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   1e60a:	4c04      	ldr	r4, [pc, #16]	; (1e61c <rpmsg_create_ept+0xfc>)
   1e60c:	e7f9      	b.n	1e602 <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   1e60e:	4c02      	ldr	r4, [pc, #8]	; (1e618 <rpmsg_create_ept+0xf8>)
   1e610:	e7d9      	b.n	1e5c6 <rpmsg_create_ept+0xa6>
   1e612:	2400      	movs	r4, #0
   1e614:	e7d7      	b.n	1e5c6 <rpmsg_create_ept+0xa6>
   1e616:	bf00      	nop
   1e618:	fffff82d 	.word	0xfffff82d
   1e61c:	fffff829 	.word	0xfffff829

0001e620 <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   1e620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   1e624:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   1e628:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   1e62c:	2300      	movs	r3, #0
{
   1e62e:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1e630:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1e632:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1e636:	2310      	movs	r3, #16
	rp_hdr.src = src;
   1e638:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   1e63c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e63e:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   1e640:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   1e644:	f8ad 501c 	strh.w	r5, [sp, #28]
   1e648:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1e64a:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e64c:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1e650:	42b1      	cmp	r1, r6
   1e652:	bf28      	it	cs
   1e654:	f04f 31ff 	movcs.w	r1, #4294967295
   1e658:	eb0d 0203 	add.w	r2, sp, r3
   1e65c:	f00a f876 	bl	2874c <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1e660:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   1e662:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1e664:	d00b      	beq.n	1e67e <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   1e666:	4924      	ldr	r1, [pc, #144]	; (1e6f8 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   1e668:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1e66c:	4a23      	ldr	r2, [pc, #140]	; (1e6fc <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1e66e:	4824      	ldr	r0, [pc, #144]	; (1e700 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1e670:	f006 f999 	bl	249a6 <assert_print>
   1e674:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1e678:	4820      	ldr	r0, [pc, #128]	; (1e6fc <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1e67a:	f006 f98d 	bl	24998 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   1e67e:	f104 0658 	add.w	r6, r4, #88	; 0x58
   1e682:	4630      	mov	r0, r6
   1e684:	f00a fb3d 	bl	28d02 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   1e688:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1e68c:	699b      	ldr	r3, [r3, #24]
   1e68e:	b9d3      	cbnz	r3, 1e6c6 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   1e690:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1e694:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1e698:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1e69c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1e69e:	b9cb      	cbnz	r3, 1e6d4 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   1e6a0:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1e6a4:	f8cd 8000 	str.w	r8, [sp]
   1e6a8:	2201      	movs	r2, #1
   1e6aa:	a902      	add	r1, sp, #8
   1e6ac:	f00a f92e 	bl	2890c <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1e6b0:	b1b0      	cbz	r0, 1e6e0 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   1e6b2:	4914      	ldr	r1, [pc, #80]	; (1e704 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   1e6b4:	f240 13b9 	movw	r3, #441	; 0x1b9
   1e6b8:	4a10      	ldr	r2, [pc, #64]	; (1e6fc <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1e6ba:	4811      	ldr	r0, [pc, #68]	; (1e700 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1e6bc:	f006 f973 	bl	249a6 <assert_print>
   1e6c0:	f240 11b9 	movw	r1, #441	; 0x1b9
   1e6c4:	e7d8      	b.n	1e678 <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1e6c6:	4639      	mov	r1, r7
   1e6c8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1e6cc:	f00a f9b4 	bl	28a38 <virtqueue_get_buffer_length>
   1e6d0:	4602      	mov	r2, r0
   1e6d2:	e7df      	b.n	1e694 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   1e6d4:	2b01      	cmp	r3, #1
   1e6d6:	d103      	bne.n	1e6e0 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1e6d8:	4639      	mov	r1, r7
   1e6da:	f7ff feb9 	bl	1e450 <virtqueue_add_consumed_buffer>
   1e6de:	e7e7      	b.n	1e6b0 <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   1e6e0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1e6e4:	f00a f9ff 	bl	28ae6 <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   1e6e8:	4630      	mov	r0, r6
   1e6ea:	f00a fb08 	bl	28cfe <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   1e6ee:	4628      	mov	r0, r5
   1e6f0:	b008      	add	sp, #32
   1e6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6f6:	bf00      	nop
   1e6f8:	00030033 	.word	0x00030033
   1e6fc:	0002fff0 	.word	0x0002fff0
   1e700:	0002b339 	.word	0x0002b339
   1e704:	0003004c 	.word	0x0003004c

0001e708 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   1e708:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1e70c:	6803      	ldr	r3, [r0, #0]
   1e70e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   1e710:	f107 0658 	add.w	r6, r7, #88	; 0x58
   1e714:	4630      	mov	r0, r6
   1e716:	f00a faf4 	bl	28d02 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1e71a:	4638      	mov	r0, r7
   1e71c:	f10d 020a 	add.w	r2, sp, #10
   1e720:	a903      	add	r1, sp, #12
   1e722:	f00a fb61 	bl	28de8 <rpmsg_virtio_get_rx_buffer>
   1e726:	4604      	mov	r4, r0
   1e728:	4630      	mov	r0, r6
   1e72a:	f00a fae8 	bl	28cfe <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   1e72e:	2c00      	cmp	r4, #0
   1e730:	d04f      	beq.n	1e7d2 <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   1e732:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1e736:	4630      	mov	r0, r6
   1e738:	60a3      	str	r3, [r4, #8]
   1e73a:	f00a fae2 	bl	28d02 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1e73e:	f04f 33ff 	mov.w	r3, #4294967295
   1e742:	2100      	movs	r1, #0
   1e744:	4638      	mov	r0, r7
   1e746:	6862      	ldr	r2, [r4, #4]
   1e748:	f00a fa7f 	bl	28c4a <rpmsg_get_endpoint>
   1e74c:	4605      	mov	r5, r0
   1e74e:	4630      	mov	r0, r6
   1e750:	f00a fad5 	bl	28cfe <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   1e754:	b1ed      	cbz	r5, 1e792 <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1e756:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1e758:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1e75a:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   1e75c:	bf08      	it	eq
   1e75e:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1e760:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   1e762:	bf08      	it	eq
   1e764:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1e766:	6823      	ldr	r3, [r4, #0]
   1e768:	89a2      	ldrh	r2, [r4, #12]
   1e76a:	9100      	str	r1, [sp, #0]
   1e76c:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1e770:	f104 0110 	add.w	r1, r4, #16
   1e774:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   1e776:	2800      	cmp	r0, #0
   1e778:	da0b      	bge.n	1e792 <rpmsg_virtio_rx_callback+0x8a>
   1e77a:	4917      	ldr	r1, [pc, #92]	; (1e7d8 <rpmsg_virtio_rx_callback+0xd0>)
   1e77c:	4817      	ldr	r0, [pc, #92]	; (1e7dc <rpmsg_virtio_rx_callback+0xd4>)
   1e77e:	f240 2343 	movw	r3, #579	; 0x243
   1e782:	4a17      	ldr	r2, [pc, #92]	; (1e7e0 <rpmsg_virtio_rx_callback+0xd8>)
   1e784:	f006 f90f 	bl	249a6 <assert_print>
   1e788:	f240 2143 	movw	r1, #579	; 0x243
   1e78c:	4814      	ldr	r0, [pc, #80]	; (1e7e0 <rpmsg_virtio_rx_callback+0xd8>)
   1e78e:	f006 f903 	bl	24998 <assert_post_action>
   1e792:	4630      	mov	r0, r6
   1e794:	f00a fab5 	bl	28d02 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   1e798:	68a3      	ldr	r3, [r4, #8]
   1e79a:	2b00      	cmp	r3, #0
   1e79c:	db06      	blt.n	1e7ac <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1e79e:	4621      	mov	r1, r4
   1e7a0:	4638      	mov	r0, r7
   1e7a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1e7a6:	9a03      	ldr	r2, [sp, #12]
   1e7a8:	f00a fb35 	bl	28e16 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1e7ac:	4638      	mov	r0, r7
   1e7ae:	f10d 020a 	add.w	r2, sp, #10
   1e7b2:	a903      	add	r1, sp, #12
   1e7b4:	f00a fb18 	bl	28de8 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1e7b8:	4604      	mov	r4, r0
   1e7ba:	b118      	cbz	r0, 1e7c4 <rpmsg_virtio_rx_callback+0xbc>
   1e7bc:	4630      	mov	r0, r6
   1e7be:	f00a fa9e 	bl	28cfe <k_sem_give>
	while (rp_hdr) {
   1e7c2:	e7b6      	b.n	1e732 <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   1e7c4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1e7c8:	f00a f98d 	bl	28ae6 <virtqueue_kick>
   1e7cc:	4630      	mov	r0, r6
   1e7ce:	f00a fa96 	bl	28cfe <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   1e7d2:	b004      	add	sp, #16
   1e7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e7d8:	00030058 	.word	0x00030058
   1e7dc:	0002b339 	.word	0x0002b339
   1e7e0:	0002fff0 	.word	0x0002fff0

0001e7e4 <rpmsg_virtio_send_offchannel_raw>:
{
   1e7e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e7e8:	b085      	sub	sp, #20
   1e7ea:	460f      	mov	r7, r1
   1e7ec:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1e7ee:	a903      	add	r1, sp, #12
   1e7f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   1e7f2:	4606      	mov	r6, r0
   1e7f4:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1e7f6:	f00a fb59 	bl	28eac <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   1e7fa:	4604      	mov	r4, r0
   1e7fc:	b350      	cbz	r0, 1e854 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   1e7fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1e800:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   1e802:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   1e806:	429d      	cmp	r5, r3
   1e808:	bfa8      	it	ge
   1e80a:	461d      	movge	r5, r3
   1e80c:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1e80e:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1e812:	1a61      	subs	r1, r4, r1
   1e814:	4561      	cmp	r1, ip
   1e816:	bf28      	it	cs
   1e818:	f04f 31ff 	movcs.w	r1, #4294967295
   1e81c:	462b      	mov	r3, r5
   1e81e:	464a      	mov	r2, r9
   1e820:	f009 ff94 	bl	2874c <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   1e824:	4285      	cmp	r5, r0
   1e826:	d00b      	beq.n	1e840 <rpmsg_virtio_send_offchannel_raw+0x5c>
   1e828:	490b      	ldr	r1, [pc, #44]	; (1e858 <rpmsg_virtio_send_offchannel_raw+0x74>)
   1e82a:	480c      	ldr	r0, [pc, #48]	; (1e85c <rpmsg_virtio_send_offchannel_raw+0x78>)
   1e82c:	f240 2303 	movw	r3, #515	; 0x203
   1e830:	4a0b      	ldr	r2, [pc, #44]	; (1e860 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1e832:	f006 f8b8 	bl	249a6 <assert_print>
   1e836:	f240 2103 	movw	r1, #515	; 0x203
   1e83a:	4809      	ldr	r0, [pc, #36]	; (1e860 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1e83c:	f006 f8ac 	bl	24998 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   1e840:	4623      	mov	r3, r4
   1e842:	4642      	mov	r2, r8
   1e844:	4639      	mov	r1, r7
   1e846:	4630      	mov	r0, r6
   1e848:	9500      	str	r5, [sp, #0]
   1e84a:	f7ff fee9 	bl	1e620 <rpmsg_virtio_send_offchannel_nocopy>
}
   1e84e:	b005      	add	sp, #20
   1e850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   1e854:	4803      	ldr	r0, [pc, #12]	; (1e864 <rpmsg_virtio_send_offchannel_raw+0x80>)
   1e856:	e7fa      	b.n	1e84e <rpmsg_virtio_send_offchannel_raw+0x6a>
   1e858:	00030064 	.word	0x00030064
   1e85c:	0002b339 	.word	0x0002b339
   1e860:	0002fff0 	.word	0x0002fff0
   1e864:	fffff82e 	.word	0xfffff82e

0001e868 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   1e868:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   1e86a:	4604      	mov	r4, r0
   1e86c:	b1e0      	cbz	r0, 1e8a8 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   1e86e:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1e872:	4628      	mov	r0, r5
   1e874:	f00a fa45 	bl	28d02 <__metal_mutex_acquire>
   1e878:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1e87c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1e87e:	b953      	cbnz	r3, 1e896 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   1e880:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   1e884:	3c10      	subs	r4, #16
	if (length <= 0) {
   1e886:	2c00      	cmp	r4, #0
   1e888:	dc00      	bgt.n	1e88c <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   1e88a:	4c08      	ldr	r4, [pc, #32]	; (1e8ac <rpmsg_virtio_get_buffer_size+0x44>)
   1e88c:	4628      	mov	r0, r5
   1e88e:	f00a fa36 	bl	28cfe <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   1e892:	4620      	mov	r0, r4
   1e894:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   1e896:	2b01      	cmp	r3, #1
   1e898:	d1f7      	bne.n	1e88a <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1e89a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1e89e:	f00a f959 	bl	28b54 <virtqueue_get_desc_size>
   1e8a2:	f1a0 0410 	sub.w	r4, r0, #16
   1e8a6:	e7ee      	b.n	1e886 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   1e8a8:	4c01      	ldr	r4, [pc, #4]	; (1e8b0 <rpmsg_virtio_get_buffer_size+0x48>)
   1e8aa:	e7f2      	b.n	1e892 <rpmsg_virtio_get_buffer_size+0x2a>
   1e8ac:	fffff82e 	.word	0xfffff82e
   1e8b0:	fffff82d 	.word	0xfffff82d

0001e8b4 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   1e8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e8b8:	b08a      	sub	sp, #40	; 0x28
   1e8ba:	460d      	mov	r5, r1
   1e8bc:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   1e8c0:	4690      	mov	r8, r2
   1e8c2:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   1e8c4:	4604      	mov	r4, r0
   1e8c6:	b920      	cbnz	r0, 1e8d2 <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   1e8c8:	4f81      	ldr	r7, [pc, #516]	; (1ead0 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   1e8ca:	4638      	mov	r0, r7
   1e8cc:	b00a      	add	sp, #40	; 0x28
   1e8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   1e8d2:	2900      	cmp	r1, #0
   1e8d4:	d0f8      	beq.n	1e8c8 <rpmsg_init_vdev_with_config+0x14>
   1e8d6:	2b00      	cmp	r3, #0
   1e8d8:	d0f6      	beq.n	1e8c8 <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   1e8da:	2294      	movs	r2, #148	; 0x94
   1e8dc:	2100      	movs	r1, #0
   1e8de:	f00a fe02 	bl	294e6 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e8e2:	2201      	movs	r2, #1
   1e8e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1e8e8:	4611      	mov	r1, r2
   1e8ea:	f00a fc0e 	bl	2910a <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1e8ee:	4b79      	ldr	r3, [pc, #484]	; (1ead4 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   1e8f0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   1e8f4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   1e8f8:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1e8fa:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   1e8fc:	4b76      	ldr	r3, [pc, #472]	; (1ead8 <rpmsg_init_vdev_with_config+0x224>)
   1e8fe:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   1e900:	4b76      	ldr	r3, [pc, #472]	; (1eadc <rpmsg_init_vdev_with_config+0x228>)
   1e902:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   1e906:	4b76      	ldr	r3, [pc, #472]	; (1eae0 <rpmsg_init_vdev_with_config+0x22c>)
   1e908:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   1e90c:	4b75      	ldr	r3, [pc, #468]	; (1eae4 <rpmsg_init_vdev_with_config+0x230>)
   1e90e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   1e912:	4b75      	ldr	r3, [pc, #468]	; (1eae8 <rpmsg_init_vdev_with_config+0x234>)
   1e914:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1e918:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1e91c:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   1e920:	f1b8 0f00 	cmp.w	r8, #0
   1e924:	d16e      	bne.n	1ea04 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   1e926:	2f00      	cmp	r7, #0
   1e928:	d0ce      	beq.n	1e8c8 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   1e92a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   1e92e:	f104 0394 	add.w	r3, r4, #148	; 0x94
   1e932:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1e936:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1e93a:	6a03      	ldr	r3, [r0, #32]
   1e93c:	689b      	ldr	r3, [r3, #8]
   1e93e:	4798      	blx	r3
   1e940:	2300      	movs	r3, #0
   1e942:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1e944:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1e948:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1e94a:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   1e94e:	f1b8 0f00 	cmp.w	r8, #0
   1e952:	d16d      	bne.n	1ea30 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   1e954:	7a3b      	ldrb	r3, [r7, #8]
   1e956:	2b00      	cmp	r3, #0
   1e958:	d068      	beq.n	1ea2c <rpmsg_init_vdev_with_config+0x178>
   1e95a:	f109 030c 	add.w	r3, r9, #12
   1e95e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   1e962:	f1b9 0f00 	cmp.w	r9, #0
   1e966:	d0af      	beq.n	1e8c8 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   1e968:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1e96c:	2a00      	cmp	r2, #0
   1e96e:	f000 80ad 	beq.w	1eacc <rpmsg_init_vdev_with_config+0x218>
   1e972:	689b      	ldr	r3, [r3, #8]
   1e974:	2b00      	cmp	r3, #0
   1e976:	f000 80a9 	beq.w	1eacc <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   1e97a:	4b5c      	ldr	r3, [pc, #368]	; (1eaec <rpmsg_init_vdev_with_config+0x238>)
   1e97c:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   1e97e:	4b5c      	ldr	r3, [pc, #368]	; (1eaf0 <rpmsg_init_vdev_with_config+0x23c>)
   1e980:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   1e982:	4b5c      	ldr	r3, [pc, #368]	; (1eaf4 <rpmsg_init_vdev_with_config+0x240>)
   1e984:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   1e986:	4b5c      	ldr	r3, [pc, #368]	; (1eaf8 <rpmsg_init_vdev_with_config+0x244>)
   1e988:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1e98a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1e98c:	681b      	ldr	r3, [r3, #0]
   1e98e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   1e992:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1e994:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   1e996:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   1e99a:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   1e99e:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   1e9a2:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   1e9a4:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   1e9a8:	9300      	str	r3, [sp, #0]
   1e9aa:	2202      	movs	r2, #2
   1e9ac:	2100      	movs	r1, #0
   1e9ae:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1e9b2:	ab04      	add	r3, sp, #16
   1e9b4:	f7ff fce0 	bl	1e378 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   1e9b8:	4607      	mov	r7, r0
   1e9ba:	2800      	cmp	r0, #0
   1e9bc:	d185      	bne.n	1e8ca <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   1e9be:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1e9c2:	f00a f862 	bl	28a8a <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   1e9c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1e9c8:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   1e9ca:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   1e9cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1e9ce:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   1e9d0:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   1e9d2:	f1b8 0f00 	cmp.w	r8, #0
   1e9d6:	d161      	bne.n	1ea9c <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1e9d8:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   1e9da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1e9de:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1e9e0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   1e9e4:	895b      	ldrh	r3, [r3, #10]
   1e9e6:	4553      	cmp	r3, sl
   1e9e8:	d834      	bhi.n	1ea54 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   1e9ea:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1e9ee:	e9c4 4400 	strd	r4, r4, [r4]
   1e9f2:	2b00      	cmp	r3, #0
   1e9f4:	d159      	bne.n	1eaaa <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   1e9f6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1e9fa:	2104      	movs	r1, #4
   1e9fc:	6a03      	ldr	r3, [r0, #32]
   1e9fe:	685b      	ldr	r3, [r3, #4]
   1ea00:	4798      	blx	r3
}
   1ea02:	e762      	b.n	1e8ca <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   1ea04:	f1b8 0f01 	cmp.w	r8, #1
   1ea08:	d195      	bne.n	1e936 <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   1ea0a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1ea0e:	6a03      	ldr	r3, [r0, #32]
   1ea10:	681b      	ldr	r3, [r3, #0]
   1ea12:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1ea14:	0642      	lsls	r2, r0, #25
   1ea16:	d506      	bpl.n	1ea26 <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   1ea18:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1ea1c:	2100      	movs	r1, #0
   1ea1e:	6a03      	ldr	r3, [r0, #32]
   1ea20:	685b      	ldr	r3, [r3, #4]
   1ea22:	4798      	blx	r3
}
   1ea24:	e7f1      	b.n	1ea0a <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1ea26:	0743      	lsls	r3, r0, #29
   1ea28:	d5ef      	bpl.n	1ea0a <rpmsg_init_vdev_with_config+0x156>
   1ea2a:	e784      	b.n	1e936 <rpmsg_init_vdev_with_config+0x82>
   1ea2c:	464b      	mov	r3, r9
   1ea2e:	e796      	b.n	1e95e <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   1ea30:	f1b8 0f01 	cmp.w	r8, #1
   1ea34:	d1b1      	bne.n	1e99a <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   1ea36:	4b2e      	ldr	r3, [pc, #184]	; (1eaf0 <rpmsg_init_vdev_with_config+0x23c>)
   1ea38:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   1ea3a:	4b2c      	ldr	r3, [pc, #176]	; (1eaec <rpmsg_init_vdev_with_config+0x238>)
   1ea3c:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   1ea3e:	4b2e      	ldr	r3, [pc, #184]	; (1eaf8 <rpmsg_init_vdev_with_config+0x244>)
   1ea40:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   1ea42:	4b2c      	ldr	r3, [pc, #176]	; (1eaf4 <rpmsg_init_vdev_with_config+0x240>)
   1ea44:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1ea46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ea48:	699b      	ldr	r3, [r3, #24]
   1ea4a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   1ea4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ea50:	681b      	ldr	r3, [r3, #0]
   1ea52:	e7a0      	b.n	1e996 <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1ea54:	4648      	mov	r0, r9
   1ea56:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   1ea5a:	f00a fa18 	bl	28e8e <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   1ea5e:	4605      	mov	r5, r0
   1ea60:	b1c8      	cbz	r0, 1ea96 <rpmsg_init_vdev_with_config+0x1e2>
   1ea62:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   1ea64:	9008      	str	r0, [sp, #32]
   1ea66:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1ea68:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   1ea6a:	2200      	movs	r2, #0
   1ea6c:	4281      	cmp	r1, r0
   1ea6e:	bf28      	it	cs
   1ea70:	f04f 31ff 	movcs.w	r1, #4294967295
   1ea74:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1ea78:	4630      	mov	r0, r6
   1ea7a:	f009 fea1 	bl	287c0 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1ea7e:	9500      	str	r5, [sp, #0]
   1ea80:	2301      	movs	r3, #1
   1ea82:	2200      	movs	r2, #0
   1ea84:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1ea88:	a908      	add	r1, sp, #32
   1ea8a:	f009 ff3f 	bl	2890c <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1ea8e:	b918      	cbnz	r0, 1ea98 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1ea90:	f10a 0a01 	add.w	sl, sl, #1
   1ea94:	e7a4      	b.n	1e9e0 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   1ea96:	4819      	ldr	r0, [pc, #100]	; (1eafc <rpmsg_init_vdev_with_config+0x248>)
   1ea98:	4607      	mov	r7, r0
   1ea9a:	e716      	b.n	1e8ca <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   1ea9c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1eaa0:	e9c4 4400 	strd	r4, r4, [r4]
   1eaa4:	2b00      	cmp	r3, #0
   1eaa6:	f43f af10 	beq.w	1e8ca <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   1eaaa:	2300      	movs	r3, #0
   1eaac:	9302      	str	r3, [sp, #8]
   1eaae:	4b14      	ldr	r3, [pc, #80]	; (1eb00 <rpmsg_init_vdev_with_config+0x24c>)
   1eab0:	4620      	mov	r0, r4
   1eab2:	9301      	str	r3, [sp, #4]
   1eab4:	2335      	movs	r3, #53	; 0x35
   1eab6:	4a13      	ldr	r2, [pc, #76]	; (1eb04 <rpmsg_init_vdev_with_config+0x250>)
   1eab8:	9300      	str	r3, [sp, #0]
   1eaba:	f104 0108 	add.w	r1, r4, #8
   1eabe:	f7ff fd0f 	bl	1e4e0 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   1eac2:	f1b8 0f00 	cmp.w	r8, #0
   1eac6:	f47f af00 	bne.w	1e8ca <rpmsg_init_vdev_with_config+0x16>
   1eaca:	e794      	b.n	1e9f6 <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   1eacc:	4f0b      	ldr	r7, [pc, #44]	; (1eafc <rpmsg_init_vdev_with_config+0x248>)
   1eace:	e6fc      	b.n	1e8ca <rpmsg_init_vdev_with_config+0x16>
   1ead0:	fffff82d 	.word	0xfffff82d
   1ead4:	0001e7e5 	.word	0x0001e7e5
   1ead8:	00028cef 	.word	0x00028cef
   1eadc:	00028e4f 	.word	0x00028e4f
   1eae0:	00028ead 	.word	0x00028ead
   1eae4:	0001e621 	.word	0x0001e621
   1eae8:	00028d0f 	.word	0x00028d0f
   1eaec:	00030072 	.word	0x00030072
   1eaf0:	00030078 	.word	0x00030078
   1eaf4:	0001e709 	.word	0x0001e709
   1eaf8:	00028cfd 	.word	0x00028cfd
   1eafc:	fffff82e 	.word	0xfffff82e
   1eb00:	00028d51 	.word	0x00028d51
   1eb04:	0003007e 	.word	0x0003007e

0001eb08 <rpmsg_init_vdev>:
{
   1eb08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eb0a:	4605      	mov	r5, r0
   1eb0c:	460e      	mov	r6, r1
   1eb0e:	4617      	mov	r7, r2
   1eb10:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   1eb12:	4a07      	ldr	r2, [pc, #28]	; (1eb30 <rpmsg_init_vdev+0x28>)
   1eb14:	ac03      	add	r4, sp, #12
   1eb16:	ca07      	ldmia	r2, {r0, r1, r2}
   1eb18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   1eb1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1eb1e:	4631      	mov	r1, r6
   1eb20:	9200      	str	r2, [sp, #0]
   1eb22:	4628      	mov	r0, r5
   1eb24:	463a      	mov	r2, r7
   1eb26:	9401      	str	r4, [sp, #4]
   1eb28:	f7ff fec4 	bl	1e8b4 <rpmsg_init_vdev_with_config>
}
   1eb2c:	b007      	add	sp, #28
   1eb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eb30:	0002a4e8 	.word	0x0002a4e8

0001eb34 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1eb34:	2203      	movs	r2, #3
   1eb36:	4b11      	ldr	r3, [pc, #68]	; (1eb7c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1eb38:	4911      	ldr	r1, [pc, #68]	; (1eb80 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1eb3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1eb3c:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1eb3e:	4a11      	ldr	r2, [pc, #68]	; (1eb84 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   1eb40:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1eb42:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1eb44:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1eb48:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   1eb4a:	2200      	movs	r2, #0
   1eb4c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1eb4e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1eb50:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1eb52:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1eb54:	490c      	ldr	r1, [pc, #48]	; (1eb88 <_DoInit+0x54>)
   1eb56:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1eb58:	2110      	movs	r1, #16
   1eb5a:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1eb5c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1eb5e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1eb60:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1eb62:	4a0a      	ldr	r2, [pc, #40]	; (1eb8c <_DoInit+0x58>)
   1eb64:	6812      	ldr	r2, [r2, #0]
   1eb66:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1eb6a:	4a09      	ldr	r2, [pc, #36]	; (1eb90 <_DoInit+0x5c>)
   1eb6c:	6810      	ldr	r0, [r2, #0]
   1eb6e:	8892      	ldrh	r2, [r2, #4]
   1eb70:	6018      	str	r0, [r3, #0]
   1eb72:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1eb74:	2220      	movs	r2, #32
   1eb76:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1eb78:	4770      	bx	lr
   1eb7a:	bf00      	nop
   1eb7c:	200213b8 	.word	0x200213b8
   1eb80:	00030081 	.word	0x00030081
   1eb84:	20021dee 	.word	0x20021dee
   1eb88:	20021dde 	.word	0x20021dde
   1eb8c:	0003008a 	.word	0x0003008a
   1eb90:	0003008e 	.word	0x0003008e

0001eb94 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1eb94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1eb98:	f04f 0b18 	mov.w	fp, #24
   1eb9c:	4f20      	ldr	r7, [pc, #128]	; (1ec20 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1eb9e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1eba0:	fb0b 7200 	mla	r2, fp, r0, r7
   1eba4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1eba6:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1eba8:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ebaa:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ebac:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ebae:	d831      	bhi.n	1ec14 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1ebb0:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1ebb4:	ebaa 0905 	sub.w	r9, sl, r5
   1ebb8:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1ebbc:	4294      	cmp	r4, r2
   1ebbe:	d811      	bhi.n	1ebe4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ebc0:	2318      	movs	r3, #24
   1ebc2:	fb06 3303 	mla	r3, r6, r3, r3
   1ebc6:	443b      	add	r3, r7
   1ebc8:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ebca:	4622      	mov	r2, r4
   1ebcc:	4641      	mov	r1, r8
   1ebce:	4428      	add	r0, r5
   1ebd0:	f00a fc4f 	bl	29472 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1ebd4:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1ebd6:	2318      	movs	r3, #24
      return 1;
   1ebd8:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1ebda:	fb03 7306 	mla	r3, r3, r6, r7
   1ebde:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1ebe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1ebe4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1ebe6:	429c      	cmp	r4, r3
   1ebe8:	d818      	bhi.n	1ec1c <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ebea:	fb00 bb0b 	mla	fp, r0, fp, fp
   1ebee:	44bb      	add	fp, r7
   1ebf0:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ebf4:	464a      	mov	r2, r9
   1ebf6:	4428      	add	r0, r5
   1ebf8:	442c      	add	r4, r5
   1ebfa:	f00a fc3a 	bl	29472 <memcpy>
      if (NumBytes) {
   1ebfe:	ebb4 040a 	subs.w	r4, r4, sl
   1ec02:	d0e8      	beq.n	1ebd6 <SEGGER_RTT_WriteSkipNoLock+0x42>
   1ec04:	4622      	mov	r2, r4
   1ec06:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ec0a:	eb08 0109 	add.w	r1, r8, r9
   1ec0e:	f00a fc30 	bl	29472 <memcpy>
      return 1;
   1ec12:	e7e0      	b.n	1ebd6 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1ec14:	3b01      	subs	r3, #1
   1ec16:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1ec18:	42a3      	cmp	r3, r4
   1ec1a:	d2d1      	bcs.n	1ebc0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1ec1c:	2000      	movs	r0, #0
   1ec1e:	e7df      	b.n	1ebe0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1ec20:	200213b8 	.word	0x200213b8

0001ec24 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1ec24:	2218      	movs	r2, #24
   1ec26:	4b03      	ldr	r3, [pc, #12]	; (1ec34 <SEGGER_RTT_HasDataUp+0x10>)
   1ec28:	fb02 3300 	mla	r3, r2, r0, r3
   1ec2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1ec2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1ec30:	1a80      	subs	r0, r0, r2
   1ec32:	4770      	bx	lr
   1ec34:	200213b8 	.word	0x200213b8

0001ec38 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1ec38:	4b01      	ldr	r3, [pc, #4]	; (1ec40 <z_impl_z_errno+0x8>)
   1ec3a:	6898      	ldr	r0, [r3, #8]
}
   1ec3c:	3064      	adds	r0, #100	; 0x64
   1ec3e:	4770      	bx	lr
   1ec40:	20021460 	.word	0x20021460

0001ec44 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ec44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec48:	4605      	mov	r5, r0
   1ec4a:	b086      	sub	sp, #24
   1ec4c:	460f      	mov	r7, r1
	__asm__ volatile(
   1ec4e:	f04f 0320 	mov.w	r3, #32
   1ec52:	f3ef 8811 	mrs	r8, BASEPRI
   1ec56:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec5a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1ec5e:	f002 fe65 	bl	2192c <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1ec62:	2400      	movs	r4, #0
   1ec64:	2d04      	cmp	r5, #4
   1ec66:	bf96      	itet	ls
   1ec68:	4b28      	ldrls	r3, [pc, #160]	; (1ed0c <z_fatal_error+0xc8>)
   1ec6a:	4b29      	ldrhi	r3, [pc, #164]	; (1ed10 <z_fatal_error+0xcc>)
   1ec6c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   1ec70:	4606      	mov	r6, r0
   1ec72:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1ec76:	4b27      	ldr	r3, [pc, #156]	; (1ed14 <z_fatal_error+0xd0>)
   1ec78:	2201      	movs	r2, #1
   1ec7a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1ec7e:	4620      	mov	r0, r4
   1ec80:	4623      	mov	r3, r4
   1ec82:	4925      	ldr	r1, [pc, #148]	; (1ed18 <z_fatal_error+0xd4>)
   1ec84:	9503      	str	r5, [sp, #12]
   1ec86:	9400      	str	r4, [sp, #0]
   1ec88:	f00a f9bc 	bl	29004 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1ec8c:	b16f      	cbz	r7, 1ecaa <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1ec8e:	69fb      	ldr	r3, [r7, #28]
   1ec90:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1ec94:	b14b      	cbz	r3, 1ecaa <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   1ec96:	4b21      	ldr	r3, [pc, #132]	; (1ed1c <z_fatal_error+0xd8>)
   1ec98:	2201      	movs	r2, #1
   1ec9a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1ec9e:	4620      	mov	r0, r4
   1eca0:	4623      	mov	r3, r4
   1eca2:	491d      	ldr	r1, [pc, #116]	; (1ed18 <z_fatal_error+0xd4>)
   1eca4:	9400      	str	r4, [sp, #0]
   1eca6:	f00a f9ad 	bl	29004 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1ecaa:	b12e      	cbz	r6, 1ecb8 <z_fatal_error+0x74>
   1ecac:	4630      	mov	r0, r6
   1ecae:	f00a f9e4 	bl	2907a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1ecb2:	b108      	cbz	r0, 1ecb8 <z_fatal_error+0x74>
   1ecb4:	7803      	ldrb	r3, [r0, #0]
   1ecb6:	b903      	cbnz	r3, 1ecba <z_fatal_error+0x76>
		thread_name = "unknown";
   1ecb8:	4819      	ldr	r0, [pc, #100]	; (1ed20 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1ecba:	4b1a      	ldr	r3, [pc, #104]	; (1ed24 <z_fatal_error+0xe0>)
   1ecbc:	2201      	movs	r2, #1
   1ecbe:	9302      	str	r3, [sp, #8]
   1ecc0:	2300      	movs	r3, #0
   1ecc2:	e9cd 6003 	strd	r6, r0, [sp, #12]
   1ecc6:	e9cd 3300 	strd	r3, r3, [sp]
   1ecca:	4618      	mov	r0, r3
   1eccc:	4912      	ldr	r1, [pc, #72]	; (1ed18 <z_fatal_error+0xd4>)
   1ecce:	f00a f999 	bl	29004 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1ecd2:	4639      	mov	r1, r7
   1ecd4:	4628      	mov	r0, r5
   1ecd6:	f7fd fb7d 	bl	1c3d4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1ecda:	2d04      	cmp	r5, #4
   1ecdc:	d10c      	bne.n	1ecf8 <z_fatal_error+0xb4>
   1ecde:	4912      	ldr	r1, [pc, #72]	; (1ed28 <z_fatal_error+0xe4>)
   1ece0:	2393      	movs	r3, #147	; 0x93
   1ece2:	4a12      	ldr	r2, [pc, #72]	; (1ed2c <z_fatal_error+0xe8>)
   1ece4:	4812      	ldr	r0, [pc, #72]	; (1ed30 <z_fatal_error+0xec>)
   1ece6:	f005 fe5e 	bl	249a6 <assert_print>
   1ecea:	4812      	ldr	r0, [pc, #72]	; (1ed34 <z_fatal_error+0xf0>)
   1ecec:	f005 fe5b 	bl	249a6 <assert_print>
   1ecf0:	2193      	movs	r1, #147	; 0x93
   1ecf2:	480e      	ldr	r0, [pc, #56]	; (1ed2c <z_fatal_error+0xe8>)
   1ecf4:	f005 fe50 	bl	24998 <assert_post_action>
	__asm__ volatile(
   1ecf8:	f388 8811 	msr	BASEPRI, r8
   1ecfc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1ed00:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1ed02:	b006      	add	sp, #24
   1ed04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ed08:	f7f1 bd4a 	b.w	107a0 <z_impl_k_thread_abort>
   1ed0c:	0002b218 	.word	0x0002b218
   1ed10:	00030095 	.word	0x00030095
   1ed14:	000300ab 	.word	0x000300ab
   1ed18:	0002a450 	.word	0x0002a450
   1ed1c:	000300d3 	.word	0x000300d3
   1ed20:	000300a3 	.word	0x000300a3
   1ed24:	000300f4 	.word	0x000300f4
   1ed28:	0003012e 	.word	0x0003012e
   1ed2c:	0003010c 	.word	0x0003010c
   1ed30:	0002b339 	.word	0x0002b339
   1ed34:	0003014b 	.word	0x0003014b

0001ed38 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ed38:	4b0f      	ldr	r3, [pc, #60]	; (1ed78 <z_sys_init_run_level+0x40>)
{
   1ed3a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ed3c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ed40:	3001      	adds	r0, #1
   1ed42:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1ed46:	42a6      	cmp	r6, r4
   1ed48:	d800      	bhi.n	1ed4c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1ed4a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1ed4c:	e9d4 3500 	ldrd	r3, r5, [r4]
   1ed50:	4628      	mov	r0, r5
   1ed52:	4798      	blx	r3
		if (dev != NULL) {
   1ed54:	b16d      	cbz	r5, 1ed72 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1ed56:	b138      	cbz	r0, 1ed68 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1ed58:	2800      	cmp	r0, #0
   1ed5a:	bfb8      	it	lt
   1ed5c:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   1ed5e:	28ff      	cmp	r0, #255	; 0xff
   1ed60:	bfa8      	it	ge
   1ed62:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1ed64:	68eb      	ldr	r3, [r5, #12]
   1ed66:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1ed68:	68ea      	ldr	r2, [r5, #12]
   1ed6a:	7853      	ldrb	r3, [r2, #1]
   1ed6c:	f043 0301 	orr.w	r3, r3, #1
   1ed70:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ed72:	3408      	adds	r4, #8
   1ed74:	e7e7      	b.n	1ed46 <z_sys_init_run_level+0xe>
   1ed76:	bf00      	nop
   1ed78:	0002b22c 	.word	0x0002b22c

0001ed7c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1ed7c:	2201      	movs	r2, #1
{
   1ed7e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1ed80:	4b09      	ldr	r3, [pc, #36]	; (1eda8 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1ed82:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1ed84:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1ed86:	f7ff ffd7 	bl	1ed38 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1ed8a:	f003 fed7 	bl	22b3c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1ed8e:	2004      	movs	r0, #4
   1ed90:	f7ff ffd2 	bl	1ed38 <z_sys_init_run_level>

	z_init_static_threads();
   1ed94:	f000 fb66 	bl	1f464 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1ed98:	f7ec fd90 	bl	b8bc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ed9c:	4a03      	ldr	r2, [pc, #12]	; (1edac <bg_thread_main+0x30>)
   1ed9e:	7b13      	ldrb	r3, [r2, #12]
   1eda0:	f023 0301 	bic.w	r3, r3, #1
   1eda4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1eda6:	bd08      	pop	{r3, pc}
   1eda8:	200221ee 	.word	0x200221ee
   1edac:	20009bf0 	.word	0x20009bf0

0001edb0 <z_bss_zero>:
{
   1edb0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1edb2:	4803      	ldr	r0, [pc, #12]	; (1edc0 <z_bss_zero+0x10>)
   1edb4:	4a03      	ldr	r2, [pc, #12]	; (1edc4 <z_bss_zero+0x14>)
   1edb6:	2100      	movs	r1, #0
   1edb8:	1a12      	subs	r2, r2, r0
   1edba:	f00a f933 	bl	29024 <z_early_memset>
}
   1edbe:	bd08      	pop	{r3, pc}
   1edc0:	20008d58 	.word	0x20008d58
   1edc4:	200221f0 	.word	0x200221f0

0001edc8 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   1edc8:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1edca:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1edcc:	4e13      	ldr	r6, [pc, #76]	; (1ee1c <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   1edce:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   1edd0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1edd4:	2300      	movs	r3, #0
{
   1edd6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1edd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1eddc:	220f      	movs	r2, #15
   1edde:	9301      	str	r3, [sp, #4]
   1ede0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ede4:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   1ede6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1edea:	4d0d      	ldr	r5, [pc, #52]	; (1ee20 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   1edec:	490d      	ldr	r1, [pc, #52]	; (1ee24 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1edee:	fb03 5500 	mla	r5, r3, r0, r5
{
   1edf2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1edf4:	fb02 1100 	mla	r1, r2, r0, r1
   1edf8:	4b0b      	ldr	r3, [pc, #44]	; (1ee28 <z_init_cpu+0x60>)
   1edfa:	4630      	mov	r0, r6
   1edfc:	9500      	str	r5, [sp, #0]
   1edfe:	f000 fa97 	bl	1f330 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ee02:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   1ee04:	752c      	strb	r4, [r5, #20]
   1ee06:	f023 0304 	bic.w	r3, r3, #4
   1ee0a:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1ee0c:	4b07      	ldr	r3, [pc, #28]	; (1ee2c <z_init_cpu+0x64>)
   1ee0e:	3401      	adds	r4, #1
   1ee10:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1ee14:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1ee16:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1ee18:	b006      	add	sp, #24
   1ee1a:	bd70      	pop	{r4, r5, r6, pc}
   1ee1c:	20009b68 	.word	0x20009b68
   1ee20:	20021460 	.word	0x20021460
   1ee24:	20032b10 	.word	0x20032b10
   1ee28:	0001f5b5 	.word	0x0001f5b5
   1ee2c:	20032310 	.word	0x20032310

0001ee30 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1ee30:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1ee32:	2000      	movs	r0, #0
{
   1ee34:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1ee36:	f7ff ff7f 	bl	1ed38 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1ee3a:	4b2f      	ldr	r3, [pc, #188]	; (1eef8 <z_cstart+0xc8>)
	uint32_t msp =
   1ee3c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ee40:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1ee44:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ee48:	2400      	movs	r4, #0
   1ee4a:	23e0      	movs	r3, #224	; 0xe0
   1ee4c:	4d2b      	ldr	r5, [pc, #172]	; (1eefc <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1ee4e:	4e2c      	ldr	r6, [pc, #176]	; (1ef00 <z_cstart+0xd0>)
   1ee50:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1ee54:	77ec      	strb	r4, [r5, #31]
   1ee56:	762c      	strb	r4, [r5, #24]
   1ee58:	766c      	strb	r4, [r5, #25]
   1ee5a:	76ac      	strb	r4, [r5, #26]
   1ee5c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ee60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ee62:	4f28      	ldr	r7, [pc, #160]	; (1ef04 <z_cstart+0xd4>)
   1ee64:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ee68:	626b      	str	r3, [r5, #36]	; 0x24
   1ee6a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ee6e:	f7f1 fbfb 	bl	10668 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ee72:	f7f0 ff3d 	bl	fcf0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ee76:	f04f 33ff 	mov.w	r3, #4294967295
   1ee7a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ee7c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1ee7e:	f7f1 fe5d 	bl	10b3c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1ee82:	f7f1 fca3 	bl	107cc <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1ee86:	f7ef f801 	bl	de8c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ee8a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1ee8e:	ad06      	add	r5, sp, #24
   1ee90:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ee92:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1ee96:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1ee9a:	f003 fe31 	bl	22b00 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1ee9e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1eea0:	f00a f8a4 	bl	28fec <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1eea4:	2001      	movs	r0, #1
   1eea6:	f7ff ff47 	bl	1ed38 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1eeaa:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1eeac:	4d16      	ldr	r5, [pc, #88]	; (1ef08 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1eeae:	f7ff ff43 	bl	1ed38 <z_sys_init_run_level>
	z_sched_init();
   1eeb2:	f002 fbc1 	bl	21638 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1eeb6:	4b15      	ldr	r3, [pc, #84]	; (1ef0c <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1eeb8:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1eeba:	9305      	str	r3, [sp, #20]
   1eebc:	2301      	movs	r3, #1
   1eebe:	4914      	ldr	r1, [pc, #80]	; (1ef10 <z_cstart+0xe0>)
   1eec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1eec4:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1eec8:	4628      	mov	r0, r5
   1eeca:	463b      	mov	r3, r7
   1eecc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1eed0:	9400      	str	r4, [sp, #0]
   1eed2:	f000 fa2d 	bl	1f330 <z_setup_new_thread>
   1eed6:	4606      	mov	r6, r0
   1eed8:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   1eeda:	4628      	mov	r0, r5
   1eedc:	f022 0204 	bic.w	r2, r2, #4
   1eee0:	736a      	strb	r2, [r5, #13]
   1eee2:	f001 fd81 	bl	209e8 <z_ready_thread>
	z_init_cpu(0);
   1eee6:	4620      	mov	r0, r4
   1eee8:	f7ff ff6e 	bl	1edc8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1eeec:	463a      	mov	r2, r7
   1eeee:	4631      	mov	r1, r6
   1eef0:	4628      	mov	r0, r5
   1eef2:	f7f1 f867 	bl	ffc4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1eef6:	bf00      	nop
   1eef8:	20032310 	.word	0x20032310
   1eefc:	e000ed00 	.word	0xe000ed00
   1ef00:	20021460 	.word	0x20021460
   1ef04:	0001ed7d 	.word	0x0001ed7d
   1ef08:	20009bf0 	.word	0x20009bf0
   1ef0c:	000301ca 	.word	0x000301ca
   1ef10:	20032c50 	.word	0x20032c50

0001ef14 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1ef14:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1ef16:	4c0d      	ldr	r4, [pc, #52]	; (1ef4c <statics_init+0x38>)
   1ef18:	4d0d      	ldr	r5, [pc, #52]	; (1ef50 <statics_init+0x3c>)
   1ef1a:	42ac      	cmp	r4, r5
   1ef1c:	d913      	bls.n	1ef46 <statics_init+0x32>
   1ef1e:	490d      	ldr	r1, [pc, #52]	; (1ef54 <statics_init+0x40>)
   1ef20:	2318      	movs	r3, #24
   1ef22:	4a0d      	ldr	r2, [pc, #52]	; (1ef58 <statics_init+0x44>)
   1ef24:	480d      	ldr	r0, [pc, #52]	; (1ef5c <statics_init+0x48>)
   1ef26:	f005 fd3e 	bl	249a6 <assert_print>
   1ef2a:	480d      	ldr	r0, [pc, #52]	; (1ef60 <statics_init+0x4c>)
   1ef2c:	f005 fd3b 	bl	249a6 <assert_print>
   1ef30:	2118      	movs	r1, #24
   1ef32:	4809      	ldr	r0, [pc, #36]	; (1ef58 <statics_init+0x44>)
   1ef34:	f005 fd30 	bl	24998 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1ef38:	4620      	mov	r0, r4
   1ef3a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1ef3e:	f00a f875 	bl	2902c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1ef42:	3418      	adds	r4, #24
   1ef44:	e7e9      	b.n	1ef1a <statics_init+0x6>
   1ef46:	d3f7      	bcc.n	1ef38 <statics_init+0x24>
		}
	}
	return 0;
}
   1ef48:	2000      	movs	r0, #0
   1ef4a:	bd38      	pop	{r3, r4, r5, pc}
   1ef4c:	20008a68 	.word	0x20008a68
   1ef50:	20008a80 	.word	0x20008a80
   1ef54:	000301f4 	.word	0x000301f4
   1ef58:	000301d2 	.word	0x000301d2
   1ef5c:	0002b339 	.word	0x0002b339
   1ef60:	0002c305 	.word	0x0002c305

0001ef64 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1ef64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef68:	b085      	sub	sp, #20
   1ef6a:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1ef6e:	4680      	mov	r8, r0
   1ef70:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1ef72:	4648      	mov	r0, r9
   1ef74:	4659      	mov	r1, fp
{
   1ef76:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1ef78:	f00a f976 	bl	29268 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1ef7c:	f1bb 3fff 	cmp.w	fp, #4294967295
   1ef80:	bf08      	it	eq
   1ef82:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1ef86:	4606      	mov	r6, r0
   1ef88:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1ef8a:	bf04      	itt	eq
   1ef8c:	f04f 36ff 	moveq.w	r6, #4294967295
   1ef90:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1ef94:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   1ef98:	f04f 0320 	mov.w	r3, #32
   1ef9c:	f3ef 8511 	mrs	r5, BASEPRI
   1efa0:	f383 8812 	msr	BASEPRI_MAX, r3
   1efa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1efa8:	4620      	mov	r0, r4
   1efaa:	f000 fadf 	bl	1f56c <z_spin_lock_valid>
   1efae:	b960      	cbnz	r0, 1efca <k_heap_aligned_alloc+0x66>
   1efb0:	2394      	movs	r3, #148	; 0x94
   1efb2:	4a33      	ldr	r2, [pc, #204]	; (1f080 <k_heap_aligned_alloc+0x11c>)
   1efb4:	4933      	ldr	r1, [pc, #204]	; (1f084 <k_heap_aligned_alloc+0x120>)
   1efb6:	4834      	ldr	r0, [pc, #208]	; (1f088 <k_heap_aligned_alloc+0x124>)
   1efb8:	f005 fcf5 	bl	249a6 <assert_print>
   1efbc:	4621      	mov	r1, r4
   1efbe:	4833      	ldr	r0, [pc, #204]	; (1f08c <k_heap_aligned_alloc+0x128>)
   1efc0:	f005 fcf1 	bl	249a6 <assert_print>
   1efc4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1efc6:	482e      	ldr	r0, [pc, #184]	; (1f080 <k_heap_aligned_alloc+0x11c>)
   1efc8:	e031      	b.n	1f02e <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   1efca:	4620      	mov	r0, r4
   1efcc:	f000 faea 	bl	1f5a4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1efd0:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1efd4:	b113      	cbz	r3, 1efdc <k_heap_aligned_alloc+0x78>
   1efd6:	ea5b 0909 	orrs.w	r9, fp, r9
   1efda:	d11d      	bne.n	1f018 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1efdc:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1efe0:	4652      	mov	r2, sl
   1efe2:	4640      	mov	r0, r8
   1efe4:	9903      	ldr	r1, [sp, #12]
   1efe6:	f7ed fcf9 	bl	c9dc <sys_heap_aligned_alloc>
   1efea:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   1efec:	f003 f88c 	bl	22108 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1eff0:	f1b9 0f00 	cmp.w	r9, #0
   1eff4:	d01d      	beq.n	1f032 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eff6:	4620      	mov	r0, r4
   1eff8:	f000 fac6 	bl	1f588 <z_spin_unlock_valid>
   1effc:	2800      	cmp	r0, #0
   1effe:	d137      	bne.n	1f070 <k_heap_aligned_alloc+0x10c>
   1f000:	23c2      	movs	r3, #194	; 0xc2
   1f002:	4a1f      	ldr	r2, [pc, #124]	; (1f080 <k_heap_aligned_alloc+0x11c>)
   1f004:	4922      	ldr	r1, [pc, #136]	; (1f090 <k_heap_aligned_alloc+0x12c>)
   1f006:	4820      	ldr	r0, [pc, #128]	; (1f088 <k_heap_aligned_alloc+0x124>)
   1f008:	f005 fccd 	bl	249a6 <assert_print>
   1f00c:	4621      	mov	r1, r4
   1f00e:	4821      	ldr	r0, [pc, #132]	; (1f094 <k_heap_aligned_alloc+0x130>)
   1f010:	f005 fcc9 	bl	249a6 <assert_print>
   1f014:	21c2      	movs	r1, #194	; 0xc2
   1f016:	e7d6      	b.n	1efc6 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1f018:	491f      	ldr	r1, [pc, #124]	; (1f098 <k_heap_aligned_alloc+0x134>)
   1f01a:	234c      	movs	r3, #76	; 0x4c
   1f01c:	4a1f      	ldr	r2, [pc, #124]	; (1f09c <k_heap_aligned_alloc+0x138>)
   1f01e:	481a      	ldr	r0, [pc, #104]	; (1f088 <k_heap_aligned_alloc+0x124>)
   1f020:	f005 fcc1 	bl	249a6 <assert_print>
   1f024:	481e      	ldr	r0, [pc, #120]	; (1f0a0 <k_heap_aligned_alloc+0x13c>)
   1f026:	f005 fcbe 	bl	249a6 <assert_print>
   1f02a:	214c      	movs	r1, #76	; 0x4c
   1f02c:	481b      	ldr	r0, [pc, #108]	; (1f09c <k_heap_aligned_alloc+0x138>)
   1f02e:	f005 fcb3 	bl	24998 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   1f032:	1a30      	subs	r0, r6, r0
   1f034:	eb67 0101 	sbc.w	r1, r7, r1
   1f038:	2801      	cmp	r0, #1
   1f03a:	f171 0300 	sbcs.w	r3, r1, #0
   1f03e:	dbda      	blt.n	1eff6 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f040:	e9cd 0100 	strd	r0, r1, [sp]
   1f044:	465a      	mov	r2, fp
   1f046:	4629      	mov	r1, r5
   1f048:	4620      	mov	r0, r4
   1f04a:	f002 f827 	bl	2109c <z_pend_curr>
   1f04e:	f04f 0320 	mov.w	r3, #32
   1f052:	f3ef 8511 	mrs	r5, BASEPRI
   1f056:	f383 8812 	msr	BASEPRI_MAX, r3
   1f05a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f05e:	4620      	mov	r0, r4
   1f060:	f000 fa84 	bl	1f56c <z_spin_lock_valid>
   1f064:	2800      	cmp	r0, #0
   1f066:	d0a3      	beq.n	1efb0 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   1f068:	4620      	mov	r0, r4
   1f06a:	f000 fa9b 	bl	1f5a4 <z_spin_lock_set_owner>
	return k;
   1f06e:	e7b7      	b.n	1efe0 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   1f070:	f385 8811 	msr	BASEPRI, r5
   1f074:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1f078:	4648      	mov	r0, r9
   1f07a:	b005      	add	sp, #20
   1f07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f080:	0002c034 	.word	0x0002c034
   1f084:	0002c08d 	.word	0x0002c08d
   1f088:	0002b339 	.word	0x0002b339
   1f08c:	0002c0a2 	.word	0x0002c0a2
   1f090:	0002c061 	.word	0x0002c061
   1f094:	0002c078 	.word	0x0002c078
   1f098:	0003020a 	.word	0x0003020a
   1f09c:	000301d2 	.word	0x000301d2
   1f0a0:	0002ee3a 	.word	0x0002ee3a

0001f0a4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1f0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f0a6:	4605      	mov	r5, r0
   1f0a8:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f0aa:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   1f0ae:	f04f 0320 	mov.w	r3, #32
   1f0b2:	f3ef 8711 	mrs	r7, BASEPRI
   1f0b6:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f0be:	4620      	mov	r0, r4
   1f0c0:	f000 fa54 	bl	1f56c <z_spin_lock_valid>
   1f0c4:	b968      	cbnz	r0, 1f0e2 <k_heap_free+0x3e>
   1f0c6:	2394      	movs	r3, #148	; 0x94
   1f0c8:	4a19      	ldr	r2, [pc, #100]	; (1f130 <k_heap_free+0x8c>)
   1f0ca:	491a      	ldr	r1, [pc, #104]	; (1f134 <k_heap_free+0x90>)
   1f0cc:	481a      	ldr	r0, [pc, #104]	; (1f138 <k_heap_free+0x94>)
   1f0ce:	f005 fc6a 	bl	249a6 <assert_print>
   1f0d2:	4621      	mov	r1, r4
   1f0d4:	4819      	ldr	r0, [pc, #100]	; (1f13c <k_heap_free+0x98>)
   1f0d6:	f005 fc66 	bl	249a6 <assert_print>
   1f0da:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f0dc:	4814      	ldr	r0, [pc, #80]	; (1f130 <k_heap_free+0x8c>)
   1f0de:	f005 fc5b 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f0e2:	4620      	mov	r0, r4
   1f0e4:	f000 fa5e 	bl	1f5a4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1f0e8:	4628      	mov	r0, r5
   1f0ea:	4631      	mov	r1, r6
   1f0ec:	f7ed fc30 	bl	c950 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1f0f0:	f105 000c 	add.w	r0, r5, #12
   1f0f4:	f00a f89e 	bl	29234 <z_unpend_all>
   1f0f8:	b128      	cbz	r0, 1f106 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   1f0fa:	4639      	mov	r1, r7
   1f0fc:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1f0fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1f102:	f001 bcfd 	b.w	20b00 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f106:	4620      	mov	r0, r4
   1f108:	f000 fa3e 	bl	1f588 <z_spin_unlock_valid>
   1f10c:	b958      	cbnz	r0, 1f126 <k_heap_free+0x82>
   1f10e:	23c2      	movs	r3, #194	; 0xc2
   1f110:	4a07      	ldr	r2, [pc, #28]	; (1f130 <k_heap_free+0x8c>)
   1f112:	490b      	ldr	r1, [pc, #44]	; (1f140 <k_heap_free+0x9c>)
   1f114:	4808      	ldr	r0, [pc, #32]	; (1f138 <k_heap_free+0x94>)
   1f116:	f005 fc46 	bl	249a6 <assert_print>
   1f11a:	4621      	mov	r1, r4
   1f11c:	4809      	ldr	r0, [pc, #36]	; (1f144 <k_heap_free+0xa0>)
   1f11e:	f005 fc42 	bl	249a6 <assert_print>
   1f122:	21c2      	movs	r1, #194	; 0xc2
   1f124:	e7da      	b.n	1f0dc <k_heap_free+0x38>
	__asm__ volatile(
   1f126:	f387 8811 	msr	BASEPRI, r7
   1f12a:	f3bf 8f6f 	isb	sy
}
   1f12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f130:	0002c034 	.word	0x0002c034
   1f134:	0002c08d 	.word	0x0002c08d
   1f138:	0002b339 	.word	0x0002b339
   1f13c:	0002c0a2 	.word	0x0002c0a2
   1f140:	0002c061 	.word	0x0002c061
   1f144:	0002c078 	.word	0x0002c078

0001f148 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   1f148:	2000      	movs	r0, #0
{
   1f14a:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f14c:	4c0c      	ldr	r4, [pc, #48]	; (1f180 <init_mem_slab_module+0x38>)
   1f14e:	4d0d      	ldr	r5, [pc, #52]	; (1f184 <init_mem_slab_module+0x3c>)
   1f150:	42ac      	cmp	r4, r5
   1f152:	d913      	bls.n	1f17c <init_mem_slab_module+0x34>
   1f154:	490c      	ldr	r1, [pc, #48]	; (1f188 <init_mem_slab_module+0x40>)
   1f156:	233d      	movs	r3, #61	; 0x3d
   1f158:	4a0c      	ldr	r2, [pc, #48]	; (1f18c <init_mem_slab_module+0x44>)
   1f15a:	480d      	ldr	r0, [pc, #52]	; (1f190 <init_mem_slab_module+0x48>)
   1f15c:	f005 fc23 	bl	249a6 <assert_print>
   1f160:	480c      	ldr	r0, [pc, #48]	; (1f194 <init_mem_slab_module+0x4c>)
   1f162:	f005 fc20 	bl	249a6 <assert_print>
   1f166:	213d      	movs	r1, #61	; 0x3d
   1f168:	4808      	ldr	r0, [pc, #32]	; (1f18c <init_mem_slab_module+0x44>)
   1f16a:	f005 fc15 	bl	24998 <assert_post_action>
		rc = create_free_list(slab);
   1f16e:	4620      	mov	r0, r4
   1f170:	f009 ff64 	bl	2903c <create_free_list>
		if (rc < 0) {
   1f174:	2800      	cmp	r0, #0
   1f176:	db02      	blt.n	1f17e <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f178:	3420      	adds	r4, #32
   1f17a:	e7e9      	b.n	1f150 <init_mem_slab_module+0x8>
   1f17c:	d3f7      	bcc.n	1f16e <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   1f17e:	bd38      	pop	{r3, r4, r5, pc}
   1f180:	20008a08 	.word	0x20008a08
   1f184:	20008a68 	.word	0x20008a68
   1f188:	00030275 	.word	0x00030275
   1f18c:	00030250 	.word	0x00030250
   1f190:	0002b339 	.word	0x0002b339
   1f194:	0002c305 	.word	0x0002c305

0001f198 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f19c:	4604      	mov	r4, r0
   1f19e:	460e      	mov	r6, r1
   1f1a0:	4690      	mov	r8, r2
   1f1a2:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1f1a4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f1a8:	f04f 0320 	mov.w	r3, #32
   1f1ac:	f3ef 8911 	mrs	r9, BASEPRI
   1f1b0:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f1b8:	4628      	mov	r0, r5
   1f1ba:	f000 f9d7 	bl	1f56c <z_spin_lock_valid>
   1f1be:	b968      	cbnz	r0, 1f1dc <k_mem_slab_alloc+0x44>
   1f1c0:	2394      	movs	r3, #148	; 0x94
   1f1c2:	4a23      	ldr	r2, [pc, #140]	; (1f250 <k_mem_slab_alloc+0xb8>)
   1f1c4:	4923      	ldr	r1, [pc, #140]	; (1f254 <k_mem_slab_alloc+0xbc>)
   1f1c6:	4824      	ldr	r0, [pc, #144]	; (1f258 <k_mem_slab_alloc+0xc0>)
   1f1c8:	f005 fbed 	bl	249a6 <assert_print>
   1f1cc:	4629      	mov	r1, r5
   1f1ce:	4823      	ldr	r0, [pc, #140]	; (1f25c <k_mem_slab_alloc+0xc4>)
   1f1d0:	f005 fbe9 	bl	249a6 <assert_print>
   1f1d4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f1d6:	481e      	ldr	r0, [pc, #120]	; (1f250 <k_mem_slab_alloc+0xb8>)
   1f1d8:	f005 fbde 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f1dc:	4628      	mov	r0, r5
   1f1de:	f000 f9e1 	bl	1f5a4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1f1e2:	69a3      	ldr	r3, [r4, #24]
   1f1e4:	b1b3      	cbz	r3, 1f214 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   1f1e6:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f1e8:	681b      	ldr	r3, [r3, #0]
   1f1ea:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1f1ec:	69e3      	ldr	r3, [r4, #28]
   1f1ee:	3301      	adds	r3, #1
   1f1f0:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f1f2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f1f4:	4628      	mov	r0, r5
   1f1f6:	f000 f9c7 	bl	1f588 <z_spin_unlock_valid>
   1f1fa:	bb18      	cbnz	r0, 1f244 <k_mem_slab_alloc+0xac>
   1f1fc:	23c2      	movs	r3, #194	; 0xc2
   1f1fe:	4a14      	ldr	r2, [pc, #80]	; (1f250 <k_mem_slab_alloc+0xb8>)
   1f200:	4917      	ldr	r1, [pc, #92]	; (1f260 <k_mem_slab_alloc+0xc8>)
   1f202:	4815      	ldr	r0, [pc, #84]	; (1f258 <k_mem_slab_alloc+0xc0>)
   1f204:	f005 fbcf 	bl	249a6 <assert_print>
   1f208:	4629      	mov	r1, r5
   1f20a:	4816      	ldr	r0, [pc, #88]	; (1f264 <k_mem_slab_alloc+0xcc>)
   1f20c:	f005 fbcb 	bl	249a6 <assert_print>
   1f210:	21c2      	movs	r1, #194	; 0xc2
   1f212:	e7e0      	b.n	1f1d6 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1f214:	ea58 0207 	orrs.w	r2, r8, r7
   1f218:	d103      	bne.n	1f222 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   1f21a:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   1f21e:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   1f220:	e7e8      	b.n	1f1f4 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1f222:	4622      	mov	r2, r4
   1f224:	4649      	mov	r1, r9
   1f226:	4628      	mov	r0, r5
   1f228:	e9cd 8700 	strd	r8, r7, [sp]
   1f22c:	f001 ff36 	bl	2109c <z_pend_curr>
		if (result == 0) {
   1f230:	4604      	mov	r4, r0
   1f232:	b918      	cbnz	r0, 1f23c <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   1f234:	4b0c      	ldr	r3, [pc, #48]	; (1f268 <k_mem_slab_alloc+0xd0>)
   1f236:	689b      	ldr	r3, [r3, #8]
   1f238:	695b      	ldr	r3, [r3, #20]
   1f23a:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1f23c:	4620      	mov	r0, r4
   1f23e:	b003      	add	sp, #12
   1f240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   1f244:	f389 8811 	msr	BASEPRI, r9
   1f248:	f3bf 8f6f 	isb	sy
	return result;
   1f24c:	e7f6      	b.n	1f23c <k_mem_slab_alloc+0xa4>
   1f24e:	bf00      	nop
   1f250:	0002c034 	.word	0x0002c034
   1f254:	0002c08d 	.word	0x0002c08d
   1f258:	0002b339 	.word	0x0002b339
   1f25c:	0002c0a2 	.word	0x0002c0a2
   1f260:	0002c061 	.word	0x0002c061
   1f264:	0002c078 	.word	0x0002c078
   1f268:	20021460 	.word	0x20021460

0001f26c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f270:	4604      	mov	r4, r0
   1f272:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1f274:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f278:	f04f 0320 	mov.w	r3, #32
   1f27c:	f3ef 8711 	mrs	r7, BASEPRI
   1f280:	f383 8812 	msr	BASEPRI_MAX, r3
   1f284:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f288:	4628      	mov	r0, r5
   1f28a:	f000 f96f 	bl	1f56c <z_spin_lock_valid>
   1f28e:	b968      	cbnz	r0, 1f2ac <k_mem_slab_free+0x40>
   1f290:	2394      	movs	r3, #148	; 0x94
   1f292:	4a21      	ldr	r2, [pc, #132]	; (1f318 <k_mem_slab_free+0xac>)
   1f294:	4921      	ldr	r1, [pc, #132]	; (1f31c <k_mem_slab_free+0xb0>)
   1f296:	4822      	ldr	r0, [pc, #136]	; (1f320 <k_mem_slab_free+0xb4>)
   1f298:	f005 fb85 	bl	249a6 <assert_print>
   1f29c:	4629      	mov	r1, r5
   1f29e:	4821      	ldr	r0, [pc, #132]	; (1f324 <k_mem_slab_free+0xb8>)
   1f2a0:	f005 fb81 	bl	249a6 <assert_print>
   1f2a4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f2a6:	481c      	ldr	r0, [pc, #112]	; (1f318 <k_mem_slab_free+0xac>)
   1f2a8:	f005 fb76 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f2ac:	4628      	mov	r0, r5
   1f2ae:	f000 f979 	bl	1f5a4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f2b2:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1f2b6:	f1b8 0f00 	cmp.w	r8, #0
   1f2ba:	d10f      	bne.n	1f2dc <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f2bc:	4620      	mov	r0, r4
   1f2be:	f002 f96b 	bl	21598 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1f2c2:	b158      	cbz	r0, 1f2dc <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f2c4:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f2c6:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f2ca:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1f2cc:	f001 fb8c 	bl	209e8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1f2d0:	4639      	mov	r1, r7
   1f2d2:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1f2d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1f2d8:	f001 bc12 	b.w	20b00 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1f2dc:	6833      	ldr	r3, [r6, #0]
   1f2de:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f2e0:	4628      	mov	r0, r5
   1f2e2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1f2e4:	6833      	ldr	r3, [r6, #0]
   1f2e6:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1f2e8:	69e3      	ldr	r3, [r4, #28]
   1f2ea:	3b01      	subs	r3, #1
   1f2ec:	61e3      	str	r3, [r4, #28]
   1f2ee:	f000 f94b 	bl	1f588 <z_spin_unlock_valid>
   1f2f2:	b958      	cbnz	r0, 1f30c <k_mem_slab_free+0xa0>
   1f2f4:	23c2      	movs	r3, #194	; 0xc2
   1f2f6:	4a08      	ldr	r2, [pc, #32]	; (1f318 <k_mem_slab_free+0xac>)
   1f2f8:	490b      	ldr	r1, [pc, #44]	; (1f328 <k_mem_slab_free+0xbc>)
   1f2fa:	4809      	ldr	r0, [pc, #36]	; (1f320 <k_mem_slab_free+0xb4>)
   1f2fc:	f005 fb53 	bl	249a6 <assert_print>
   1f300:	4629      	mov	r1, r5
   1f302:	480a      	ldr	r0, [pc, #40]	; (1f32c <k_mem_slab_free+0xc0>)
   1f304:	f005 fb4f 	bl	249a6 <assert_print>
   1f308:	21c2      	movs	r1, #194	; 0xc2
   1f30a:	e7cc      	b.n	1f2a6 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   1f30c:	f387 8811 	msr	BASEPRI, r7
   1f310:	f3bf 8f6f 	isb	sy
}
   1f314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f318:	0002c034 	.word	0x0002c034
   1f31c:	0002c08d 	.word	0x0002c08d
   1f320:	0002b339 	.word	0x0002b339
   1f324:	0002c0a2 	.word	0x0002c0a2
   1f328:	0002c061 	.word	0x0002c061
   1f32c:	0002c078 	.word	0x0002c078

0001f330 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1f330:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1f332:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1f334:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1f336:	2e0f      	cmp	r6, #15
   1f338:	d12a      	bne.n	1f390 <z_setup_new_thread+0x60>
   1f33a:	4821      	ldr	r0, [pc, #132]	; (1f3c0 <z_setup_new_thread+0x90>)
   1f33c:	4283      	cmp	r3, r0
   1f33e:	d12b      	bne.n	1f398 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1f340:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1f344:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1f348:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1f34a:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   1f34c:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1f34e:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f350:	3207      	adds	r2, #7
   1f352:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1f356:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   1f35a:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   1f35c:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f35e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   1f360:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1f362:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   1f366:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   1f368:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1f36a:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f36c:	9202      	str	r2, [sp, #8]
   1f36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f370:	4620      	mov	r0, r4
   1f372:	9201      	str	r2, [sp, #4]
   1f374:	9a08      	ldr	r2, [sp, #32]
   1f376:	9200      	str	r2, [sp, #0]
   1f378:	4632      	mov	r2, r6
   1f37a:	f7f0 fe03 	bl	ff84 <arch_new_thread>
	if (!_current) {
   1f37e:	4b11      	ldr	r3, [pc, #68]	; (1f3c4 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   1f380:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1f382:	689b      	ldr	r3, [r3, #8]
   1f384:	b103      	cbz	r3, 1f388 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   1f386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   1f388:	4630      	mov	r0, r6
   1f38a:	6763      	str	r3, [r4, #116]	; 0x74
   1f38c:	b004      	add	sp, #16
   1f38e:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1f390:	f106 0010 	add.w	r0, r6, #16
   1f394:	281e      	cmp	r0, #30
   1f396:	d9d3      	bls.n	1f340 <z_setup_new_thread+0x10>
   1f398:	f44f 7306 	mov.w	r3, #536	; 0x218
   1f39c:	4a0a      	ldr	r2, [pc, #40]	; (1f3c8 <z_setup_new_thread+0x98>)
   1f39e:	490b      	ldr	r1, [pc, #44]	; (1f3cc <z_setup_new_thread+0x9c>)
   1f3a0:	480b      	ldr	r0, [pc, #44]	; (1f3d0 <z_setup_new_thread+0xa0>)
   1f3a2:	f005 fb00 	bl	249a6 <assert_print>
   1f3a6:	4631      	mov	r1, r6
   1f3a8:	480a      	ldr	r0, [pc, #40]	; (1f3d4 <z_setup_new_thread+0xa4>)
   1f3aa:	f06f 030f 	mvn.w	r3, #15
   1f3ae:	220e      	movs	r2, #14
   1f3b0:	f005 faf9 	bl	249a6 <assert_print>
   1f3b4:	f44f 7106 	mov.w	r1, #536	; 0x218
   1f3b8:	4803      	ldr	r0, [pc, #12]	; (1f3c8 <z_setup_new_thread+0x98>)
   1f3ba:	f005 faed 	bl	24998 <assert_post_action>
   1f3be:	bf00      	nop
   1f3c0:	0001f5b5 	.word	0x0001f5b5
   1f3c4:	20021460 	.word	0x20021460
   1f3c8:	00030292 	.word	0x00030292
   1f3cc:	000302b5 	.word	0x000302b5
   1f3d0:	0002b339 	.word	0x0002b339
   1f3d4:	00030335 	.word	0x00030335

0001f3d8 <z_impl_k_thread_create>:
{
   1f3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3da:	b087      	sub	sp, #28
   1f3dc:	4604      	mov	r4, r0
   1f3de:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   1f3e2:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1f3e6:	b175      	cbz	r5, 1f406 <z_impl_k_thread_create+0x2e>
   1f3e8:	4919      	ldr	r1, [pc, #100]	; (1f450 <z_impl_k_thread_create+0x78>)
   1f3ea:	f240 2387 	movw	r3, #647	; 0x287
   1f3ee:	4a19      	ldr	r2, [pc, #100]	; (1f454 <z_impl_k_thread_create+0x7c>)
   1f3f0:	4819      	ldr	r0, [pc, #100]	; (1f458 <z_impl_k_thread_create+0x80>)
   1f3f2:	f005 fad8 	bl	249a6 <assert_print>
   1f3f6:	4819      	ldr	r0, [pc, #100]	; (1f45c <z_impl_k_thread_create+0x84>)
   1f3f8:	f005 fad5 	bl	249a6 <assert_print>
   1f3fc:	f240 2187 	movw	r1, #647	; 0x287
   1f400:	4814      	ldr	r0, [pc, #80]	; (1f454 <z_impl_k_thread_create+0x7c>)
   1f402:	f005 fac9 	bl	24998 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f406:	9505      	str	r5, [sp, #20]
   1f408:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1f40a:	9504      	str	r5, [sp, #16]
   1f40c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1f40e:	9503      	str	r5, [sp, #12]
   1f410:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1f412:	9502      	str	r5, [sp, #8]
   1f414:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1f416:	9501      	str	r5, [sp, #4]
   1f418:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1f41a:	9500      	str	r5, [sp, #0]
   1f41c:	f7ff ff88 	bl	1f330 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1f420:	f1b6 3fff 	cmp.w	r6, #4294967295
   1f424:	bf08      	it	eq
   1f426:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1f42a:	d005      	beq.n	1f438 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f42c:	ea56 0307 	orrs.w	r3, r6, r7
   1f430:	d105      	bne.n	1f43e <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   1f432:	4620      	mov	r0, r4
   1f434:	f001 fba6 	bl	20b84 <z_sched_start>
}
   1f438:	4620      	mov	r0, r4
   1f43a:	b007      	add	sp, #28
   1f43c:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1f43e:	463a      	mov	r2, r7
   1f440:	4633      	mov	r3, r6
   1f442:	4907      	ldr	r1, [pc, #28]	; (1f460 <z_impl_k_thread_create+0x88>)
   1f444:	f104 0018 	add.w	r0, r4, #24
   1f448:	f002 fc16 	bl	21c78 <z_add_timeout>
   1f44c:	e7f4      	b.n	1f438 <z_impl_k_thread_create+0x60>
   1f44e:	bf00      	nop
   1f450:	00030366 	.word	0x00030366
   1f454:	00030292 	.word	0x00030292
   1f458:	0002b339 	.word	0x0002b339
   1f45c:	00030378 	.word	0x00030378
   1f460:	00021451 	.word	0x00021451

0001f464 <z_init_static_threads>:
{
   1f464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f468:	4c39      	ldr	r4, [pc, #228]	; (1f550 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1f46a:	4d3a      	ldr	r5, [pc, #232]	; (1f554 <z_init_static_threads+0xf0>)
{
   1f46c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1f46e:	42ac      	cmp	r4, r5
   1f470:	4626      	mov	r6, r4
   1f472:	d92a      	bls.n	1f4ca <z_init_static_threads+0x66>
   1f474:	4938      	ldr	r1, [pc, #224]	; (1f558 <z_init_static_threads+0xf4>)
   1f476:	f240 23ee 	movw	r3, #750	; 0x2ee
   1f47a:	4a38      	ldr	r2, [pc, #224]	; (1f55c <z_init_static_threads+0xf8>)
   1f47c:	4838      	ldr	r0, [pc, #224]	; (1f560 <z_init_static_threads+0xfc>)
   1f47e:	f005 fa92 	bl	249a6 <assert_print>
   1f482:	4838      	ldr	r0, [pc, #224]	; (1f564 <z_init_static_threads+0x100>)
   1f484:	f005 fa8f 	bl	249a6 <assert_print>
   1f488:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   1f48c:	4833      	ldr	r0, [pc, #204]	; (1f55c <z_init_static_threads+0xf8>)
   1f48e:	f005 fa83 	bl	24998 <assert_post_action>
		z_setup_new_thread(
   1f492:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1f496:	9305      	str	r3, [sp, #20]
   1f498:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1f49c:	9304      	str	r3, [sp, #16]
   1f49e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1f4a2:	9303      	str	r3, [sp, #12]
   1f4a4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1f4a8:	9302      	str	r3, [sp, #8]
   1f4aa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1f4ae:	9301      	str	r3, [sp, #4]
   1f4b0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1f4b4:	9300      	str	r3, [sp, #0]
   1f4b6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1f4ba:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1f4be:	f7ff ff37 	bl	1f330 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1f4c2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1f4c6:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1f4c8:	e7d1      	b.n	1f46e <z_init_static_threads+0xa>
   1f4ca:	42ae      	cmp	r6, r5
   1f4cc:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1f4d0:	d3df      	bcc.n	1f492 <z_init_static_threads+0x2e>
	k_sched_lock();
   1f4d2:	f001 fba9 	bl	20c28 <k_sched_lock>
   1f4d6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f4da:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   1f4de:	4c1c      	ldr	r4, [pc, #112]	; (1f550 <z_init_static_threads+0xec>)
   1f4e0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1f568 <z_init_static_threads+0x104>
   1f4e4:	42ac      	cmp	r4, r5
   1f4e6:	d92c      	bls.n	1f542 <z_init_static_threads+0xde>
   1f4e8:	491b      	ldr	r1, [pc, #108]	; (1f558 <z_init_static_threads+0xf4>)
   1f4ea:	f240 330d 	movw	r3, #781	; 0x30d
   1f4ee:	4a1b      	ldr	r2, [pc, #108]	; (1f55c <z_init_static_threads+0xf8>)
   1f4f0:	481b      	ldr	r0, [pc, #108]	; (1f560 <z_init_static_threads+0xfc>)
   1f4f2:	f005 fa58 	bl	249a6 <assert_print>
   1f4f6:	481b      	ldr	r0, [pc, #108]	; (1f564 <z_init_static_threads+0x100>)
   1f4f8:	f005 fa55 	bl	249a6 <assert_print>
   1f4fc:	f240 310d 	movw	r1, #781	; 0x30d
   1f500:	e7c4      	b.n	1f48c <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1f502:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f504:	1c5a      	adds	r2, r3, #1
   1f506:	d00d      	beq.n	1f524 <z_init_static_threads+0xc0>
   1f508:	2100      	movs	r1, #0
   1f50a:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   1f50c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f510:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f514:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1f518:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f51c:	d104      	bne.n	1f528 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   1f51e:	4640      	mov	r0, r8
   1f520:	f001 fb30 	bl	20b84 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f524:	3430      	adds	r4, #48	; 0x30
   1f526:	e7dd      	b.n	1f4e4 <z_init_static_threads+0x80>
   1f528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f52c:	2300      	movs	r3, #0
   1f52e:	f7e9 fcdf 	bl	8ef0 <__aeabi_uldivmod>
   1f532:	4602      	mov	r2, r0
   1f534:	460b      	mov	r3, r1
   1f536:	f108 0018 	add.w	r0, r8, #24
   1f53a:	4649      	mov	r1, r9
   1f53c:	f002 fb9c 	bl	21c78 <z_add_timeout>
   1f540:	e7f0      	b.n	1f524 <z_init_static_threads+0xc0>
   1f542:	d3de      	bcc.n	1f502 <z_init_static_threads+0x9e>
}
   1f544:	b007      	add	sp, #28
   1f546:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1f54a:	f001 bbd9 	b.w	20d00 <k_sched_unlock>
   1f54e:	bf00      	nop
   1f550:	0002a138 	.word	0x0002a138
   1f554:	0002a288 	.word	0x0002a288
   1f558:	0003039d 	.word	0x0003039d
   1f55c:	00030292 	.word	0x00030292
   1f560:	0002b339 	.word	0x0002b339
   1f564:	0002c305 	.word	0x0002c305
   1f568:	00021451 	.word	0x00021451

0001f56c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1f56c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1f56e:	b138      	cbz	r0, 1f580 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1f570:	4b04      	ldr	r3, [pc, #16]	; (1f584 <z_spin_lock_valid+0x18>)
   1f572:	f000 0003 	and.w	r0, r0, #3
   1f576:	7d1b      	ldrb	r3, [r3, #20]
   1f578:	1ac0      	subs	r0, r0, r3
   1f57a:	bf18      	it	ne
   1f57c:	2001      	movne	r0, #1
   1f57e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1f580:	2001      	movs	r0, #1
}
   1f582:	4770      	bx	lr
   1f584:	20021460 	.word	0x20021460

0001f588 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1f588:	4a05      	ldr	r2, [pc, #20]	; (1f5a0 <z_spin_unlock_valid+0x18>)
{
   1f58a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1f58c:	7d11      	ldrb	r1, [r2, #20]
   1f58e:	6892      	ldr	r2, [r2, #8]
   1f590:	430a      	orrs	r2, r1
   1f592:	6801      	ldr	r1, [r0, #0]
   1f594:	2000      	movs	r0, #0
   1f596:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   1f598:	bf04      	itt	eq
   1f59a:	6018      	streq	r0, [r3, #0]
	return true;
   1f59c:	2001      	moveq	r0, #1
}
   1f59e:	4770      	bx	lr
   1f5a0:	20021460 	.word	0x20021460

0001f5a4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1f5a4:	4b02      	ldr	r3, [pc, #8]	; (1f5b0 <z_spin_lock_set_owner+0xc>)
   1f5a6:	7d1a      	ldrb	r2, [r3, #20]
   1f5a8:	689b      	ldr	r3, [r3, #8]
   1f5aa:	4313      	orrs	r3, r2
   1f5ac:	6003      	str	r3, [r0, #0]
}
   1f5ae:	4770      	bx	lr
   1f5b0:	20021460 	.word	0x20021460

0001f5b4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1f5b4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1f5b6:	4c13      	ldr	r4, [pc, #76]	; (1f604 <idle+0x50>)
   1f5b8:	68a3      	ldr	r3, [r4, #8]
   1f5ba:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f5be:	2b00      	cmp	r3, #0
   1f5c0:	db10      	blt.n	1f5e4 <idle+0x30>
   1f5c2:	4d11      	ldr	r5, [pc, #68]	; (1f608 <idle+0x54>)
	__asm__ volatile(
   1f5c4:	f04f 0220 	mov.w	r2, #32
   1f5c8:	f3ef 8311 	mrs	r3, BASEPRI
   1f5cc:	f382 8812 	msr	BASEPRI_MAX, r2
   1f5d0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1f5d4:	f002 fc62 	bl	21e9c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f5d8:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1f5da:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f5dc:	b963      	cbnz	r3, 1f5f8 <idle+0x44>
	arch_cpu_idle();
   1f5de:	f7f0 fb8d 	bl	fcfc <arch_cpu_idle>
}
   1f5e2:	e7ef      	b.n	1f5c4 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1f5e4:	4909      	ldr	r1, [pc, #36]	; (1f60c <idle+0x58>)
   1f5e6:	480a      	ldr	r0, [pc, #40]	; (1f610 <idle+0x5c>)
   1f5e8:	2327      	movs	r3, #39	; 0x27
   1f5ea:	4a0a      	ldr	r2, [pc, #40]	; (1f614 <idle+0x60>)
   1f5ec:	f005 f9db 	bl	249a6 <assert_print>
   1f5f0:	2127      	movs	r1, #39	; 0x27
   1f5f2:	4808      	ldr	r0, [pc, #32]	; (1f614 <idle+0x60>)
   1f5f4:	f005 f9d0 	bl	24998 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f5f8:	f7f0 f8b8 	bl	f76c <pm_system_suspend>
   1f5fc:	2800      	cmp	r0, #0
   1f5fe:	d1e1      	bne.n	1f5c4 <idle+0x10>
   1f600:	e7ed      	b.n	1f5de <idle+0x2a>
   1f602:	bf00      	nop
   1f604:	20021460 	.word	0x20021460
   1f608:	200221ee 	.word	0x200221ee
   1f60c:	000303eb 	.word	0x000303eb
   1f610:	0002b339 	.word	0x0002b339
   1f614:	000303ca 	.word	0x000303ca

0001f618 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f618:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f61c:	4604      	mov	r4, r0
   1f61e:	4617      	mov	r7, r2
   1f620:	461e      	mov	r6, r3
   1f622:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1f626:	b165      	cbz	r5, 1f642 <z_impl_k_mutex_lock+0x2a>
   1f628:	4958      	ldr	r1, [pc, #352]	; (1f78c <z_impl_k_mutex_lock+0x174>)
   1f62a:	2365      	movs	r3, #101	; 0x65
   1f62c:	4a58      	ldr	r2, [pc, #352]	; (1f790 <z_impl_k_mutex_lock+0x178>)
   1f62e:	4859      	ldr	r0, [pc, #356]	; (1f794 <z_impl_k_mutex_lock+0x17c>)
   1f630:	f005 f9b9 	bl	249a6 <assert_print>
   1f634:	4858      	ldr	r0, [pc, #352]	; (1f798 <z_impl_k_mutex_lock+0x180>)
   1f636:	f005 f9b6 	bl	249a6 <assert_print>
   1f63a:	2165      	movs	r1, #101	; 0x65
   1f63c:	4854      	ldr	r0, [pc, #336]	; (1f790 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f63e:	f005 f9ab 	bl	24998 <assert_post_action>
   1f642:	f04f 0320 	mov.w	r3, #32
   1f646:	f3ef 8811 	mrs	r8, BASEPRI
   1f64a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f64e:	f3bf 8f6f 	isb	sy
   1f652:	4852      	ldr	r0, [pc, #328]	; (1f79c <z_impl_k_mutex_lock+0x184>)
   1f654:	f7ff ff8a 	bl	1f56c <z_spin_lock_valid>
   1f658:	b960      	cbnz	r0, 1f674 <z_impl_k_mutex_lock+0x5c>
   1f65a:	2394      	movs	r3, #148	; 0x94
   1f65c:	4a50      	ldr	r2, [pc, #320]	; (1f7a0 <z_impl_k_mutex_lock+0x188>)
   1f65e:	4951      	ldr	r1, [pc, #324]	; (1f7a4 <z_impl_k_mutex_lock+0x18c>)
   1f660:	484c      	ldr	r0, [pc, #304]	; (1f794 <z_impl_k_mutex_lock+0x17c>)
   1f662:	f005 f9a0 	bl	249a6 <assert_print>
   1f666:	494d      	ldr	r1, [pc, #308]	; (1f79c <z_impl_k_mutex_lock+0x184>)
   1f668:	484f      	ldr	r0, [pc, #316]	; (1f7a8 <z_impl_k_mutex_lock+0x190>)
   1f66a:	f005 f99c 	bl	249a6 <assert_print>
   1f66e:	2194      	movs	r1, #148	; 0x94
   1f670:	484b      	ldr	r0, [pc, #300]	; (1f7a0 <z_impl_k_mutex_lock+0x188>)
   1f672:	e7e4      	b.n	1f63e <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   1f674:	4849      	ldr	r0, [pc, #292]	; (1f79c <z_impl_k_mutex_lock+0x184>)
   1f676:	f7ff ff95 	bl	1f5a4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f67a:	68e3      	ldr	r3, [r4, #12]
   1f67c:	4a4b      	ldr	r2, [pc, #300]	; (1f7ac <z_impl_k_mutex_lock+0x194>)
   1f67e:	b19b      	cbz	r3, 1f6a8 <z_impl_k_mutex_lock+0x90>
   1f680:	68a0      	ldr	r0, [r4, #8]
   1f682:	6891      	ldr	r1, [r2, #8]
   1f684:	4288      	cmp	r0, r1
   1f686:	d027      	beq.n	1f6d8 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f688:	ea57 0306 	orrs.w	r3, r7, r6
   1f68c:	d12c      	bne.n	1f6e8 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f68e:	4843      	ldr	r0, [pc, #268]	; (1f79c <z_impl_k_mutex_lock+0x184>)
   1f690:	f7ff ff7a 	bl	1f588 <z_spin_unlock_valid>
   1f694:	b1a0      	cbz	r0, 1f6c0 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   1f696:	f388 8811 	msr	BASEPRI, r8
   1f69a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1f69e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1f6a2:	b002      	add	sp, #8
   1f6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1f6a8:	6891      	ldr	r1, [r2, #8]
   1f6aa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1f6ae:	3301      	adds	r3, #1
   1f6b0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1f6b2:	6893      	ldr	r3, [r2, #8]
   1f6b4:	4839      	ldr	r0, [pc, #228]	; (1f79c <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1f6b6:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1f6b8:	60a3      	str	r3, [r4, #8]
   1f6ba:	f7ff ff65 	bl	1f588 <z_spin_unlock_valid>
   1f6be:	b968      	cbnz	r0, 1f6dc <z_impl_k_mutex_lock+0xc4>
   1f6c0:	23c2      	movs	r3, #194	; 0xc2
   1f6c2:	4a37      	ldr	r2, [pc, #220]	; (1f7a0 <z_impl_k_mutex_lock+0x188>)
   1f6c4:	493a      	ldr	r1, [pc, #232]	; (1f7b0 <z_impl_k_mutex_lock+0x198>)
   1f6c6:	4833      	ldr	r0, [pc, #204]	; (1f794 <z_impl_k_mutex_lock+0x17c>)
   1f6c8:	f005 f96d 	bl	249a6 <assert_print>
   1f6cc:	4933      	ldr	r1, [pc, #204]	; (1f79c <z_impl_k_mutex_lock+0x184>)
   1f6ce:	4839      	ldr	r0, [pc, #228]	; (1f7b4 <z_impl_k_mutex_lock+0x19c>)
   1f6d0:	f005 f969 	bl	249a6 <assert_print>
   1f6d4:	21c2      	movs	r1, #194	; 0xc2
   1f6d6:	e7cb      	b.n	1f670 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   1f6d8:	6921      	ldr	r1, [r4, #16]
   1f6da:	e7e8      	b.n	1f6ae <z_impl_k_mutex_lock+0x96>
   1f6dc:	f388 8811 	msr	BASEPRI, r8
   1f6e0:	f3bf 8f6f 	isb	sy
		return 0;
   1f6e4:	2000      	movs	r0, #0
   1f6e6:	e7dc      	b.n	1f6a2 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1f6e8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1f6ec:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1f6f0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1f6f4:	4299      	cmp	r1, r3
   1f6f6:	bfa8      	it	ge
   1f6f8:	4619      	movge	r1, r3
   1f6fa:	4291      	cmp	r1, r2
   1f6fc:	bfb8      	it	lt
   1f6fe:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1f700:	428b      	cmp	r3, r1
   1f702:	dd02      	ble.n	1f70a <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   1f704:	f009 fcc4 	bl	29090 <adjust_owner_prio.isra.0>
   1f708:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1f70a:	4622      	mov	r2, r4
   1f70c:	4641      	mov	r1, r8
   1f70e:	e9cd 7600 	strd	r7, r6, [sp]
   1f712:	4822      	ldr	r0, [pc, #136]	; (1f79c <z_impl_k_mutex_lock+0x184>)
   1f714:	f001 fcc2 	bl	2109c <z_pend_curr>
	if (got_mutex == 0) {
   1f718:	2800      	cmp	r0, #0
   1f71a:	d0e3      	beq.n	1f6e4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1f71c:	f04f 0320 	mov.w	r3, #32
   1f720:	f3ef 8611 	mrs	r6, BASEPRI
   1f724:	f383 8812 	msr	BASEPRI_MAX, r3
   1f728:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f72c:	481b      	ldr	r0, [pc, #108]	; (1f79c <z_impl_k_mutex_lock+0x184>)
   1f72e:	f7ff ff1d 	bl	1f56c <z_spin_lock_valid>
   1f732:	2800      	cmp	r0, #0
   1f734:	d091      	beq.n	1f65a <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   1f736:	4819      	ldr	r0, [pc, #100]	; (1f79c <z_impl_k_mutex_lock+0x184>)
   1f738:	f7ff ff34 	bl	1f5a4 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   1f73c:	68a0      	ldr	r0, [r4, #8]
   1f73e:	b1c0      	cbz	r0, 1f772 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1f740:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f742:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f744:	429c      	cmp	r4, r3
   1f746:	d00a      	beq.n	1f75e <z_impl_k_mutex_lock+0x146>
   1f748:	b14b      	cbz	r3, 1f75e <z_impl_k_mutex_lock+0x146>
   1f74a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f74e:	4299      	cmp	r1, r3
   1f750:	bfa8      	it	ge
   1f752:	4619      	movge	r1, r3
   1f754:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1f758:	4299      	cmp	r1, r3
   1f75a:	bfb8      	it	lt
   1f75c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f75e:	f009 fc97 	bl	29090 <adjust_owner_prio.isra.0>
   1f762:	b130      	cbz	r0, 1f772 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   1f764:	4631      	mov	r1, r6
   1f766:	480d      	ldr	r0, [pc, #52]	; (1f79c <z_impl_k_mutex_lock+0x184>)
   1f768:	f001 f9ca 	bl	20b00 <z_reschedule>
	return -EAGAIN;
   1f76c:	f06f 000a 	mvn.w	r0, #10
   1f770:	e797      	b.n	1f6a2 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   1f772:	2d00      	cmp	r5, #0
   1f774:	d1f6      	bne.n	1f764 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f776:	4809      	ldr	r0, [pc, #36]	; (1f79c <z_impl_k_mutex_lock+0x184>)
   1f778:	f7ff ff06 	bl	1f588 <z_spin_unlock_valid>
   1f77c:	2800      	cmp	r0, #0
   1f77e:	d09f      	beq.n	1f6c0 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   1f780:	f386 8811 	msr	BASEPRI, r6
   1f784:	f3bf 8f6f 	isb	sy
   1f788:	e7f0      	b.n	1f76c <z_impl_k_mutex_lock+0x154>
   1f78a:	bf00      	nop
   1f78c:	00030366 	.word	0x00030366
   1f790:	00030413 	.word	0x00030413
   1f794:	0002b339 	.word	0x0002b339
   1f798:	00030435 	.word	0x00030435
   1f79c:	20021488 	.word	0x20021488
   1f7a0:	0002c034 	.word	0x0002c034
   1f7a4:	0002c08d 	.word	0x0002c08d
   1f7a8:	0002c0a2 	.word	0x0002c0a2
   1f7ac:	20021460 	.word	0x20021460
   1f7b0:	0002c061 	.word	0x0002c061
   1f7b4:	0002c078 	.word	0x0002c078

0001f7b8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1f7b8:	b570      	push	{r4, r5, r6, lr}
   1f7ba:	4604      	mov	r4, r0
   1f7bc:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1f7c0:	b166      	cbz	r6, 1f7dc <z_impl_k_mutex_unlock+0x24>
   1f7c2:	4938      	ldr	r1, [pc, #224]	; (1f8a4 <z_impl_k_mutex_unlock+0xec>)
   1f7c4:	23cd      	movs	r3, #205	; 0xcd
   1f7c6:	4a38      	ldr	r2, [pc, #224]	; (1f8a8 <z_impl_k_mutex_unlock+0xf0>)
   1f7c8:	4838      	ldr	r0, [pc, #224]	; (1f8ac <z_impl_k_mutex_unlock+0xf4>)
   1f7ca:	f005 f8ec 	bl	249a6 <assert_print>
   1f7ce:	4838      	ldr	r0, [pc, #224]	; (1f8b0 <z_impl_k_mutex_unlock+0xf8>)
   1f7d0:	f005 f8e9 	bl	249a6 <assert_print>
   1f7d4:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1f7d6:	4834      	ldr	r0, [pc, #208]	; (1f8a8 <z_impl_k_mutex_unlock+0xf0>)
   1f7d8:	f005 f8de 	bl	24998 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   1f7dc:	6883      	ldr	r3, [r0, #8]
   1f7de:	2b00      	cmp	r3, #0
   1f7e0:	d059      	beq.n	1f896 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   1f7e2:	4a34      	ldr	r2, [pc, #208]	; (1f8b4 <z_impl_k_mutex_unlock+0xfc>)
   1f7e4:	6892      	ldr	r2, [r2, #8]
   1f7e6:	4293      	cmp	r3, r2
   1f7e8:	d158      	bne.n	1f89c <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1f7ea:	68c3      	ldr	r3, [r0, #12]
   1f7ec:	b93b      	cbnz	r3, 1f7fe <z_impl_k_mutex_unlock+0x46>
   1f7ee:	4932      	ldr	r1, [pc, #200]	; (1f8b8 <z_impl_k_mutex_unlock+0x100>)
   1f7f0:	23e5      	movs	r3, #229	; 0xe5
   1f7f2:	4a2d      	ldr	r2, [pc, #180]	; (1f8a8 <z_impl_k_mutex_unlock+0xf0>)
   1f7f4:	482d      	ldr	r0, [pc, #180]	; (1f8ac <z_impl_k_mutex_unlock+0xf4>)
   1f7f6:	f005 f8d6 	bl	249a6 <assert_print>
   1f7fa:	21e5      	movs	r1, #229	; 0xe5
   1f7fc:	e7eb      	b.n	1f7d6 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1f7fe:	2b01      	cmp	r3, #1
   1f800:	d003      	beq.n	1f80a <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   1f802:	3b01      	subs	r3, #1
   1f804:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1f806:	2000      	movs	r0, #0
}
   1f808:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1f80a:	f04f 0320 	mov.w	r3, #32
   1f80e:	f3ef 8511 	mrs	r5, BASEPRI
   1f812:	f383 8812 	msr	BASEPRI_MAX, r3
   1f816:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f81a:	4828      	ldr	r0, [pc, #160]	; (1f8bc <z_impl_k_mutex_unlock+0x104>)
   1f81c:	f7ff fea6 	bl	1f56c <z_spin_lock_valid>
   1f820:	b960      	cbnz	r0, 1f83c <z_impl_k_mutex_unlock+0x84>
   1f822:	2394      	movs	r3, #148	; 0x94
   1f824:	4a26      	ldr	r2, [pc, #152]	; (1f8c0 <z_impl_k_mutex_unlock+0x108>)
   1f826:	4927      	ldr	r1, [pc, #156]	; (1f8c4 <z_impl_k_mutex_unlock+0x10c>)
   1f828:	4820      	ldr	r0, [pc, #128]	; (1f8ac <z_impl_k_mutex_unlock+0xf4>)
   1f82a:	f005 f8bc 	bl	249a6 <assert_print>
   1f82e:	4923      	ldr	r1, [pc, #140]	; (1f8bc <z_impl_k_mutex_unlock+0x104>)
   1f830:	4825      	ldr	r0, [pc, #148]	; (1f8c8 <z_impl_k_mutex_unlock+0x110>)
   1f832:	f005 f8b8 	bl	249a6 <assert_print>
   1f836:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f838:	4821      	ldr	r0, [pc, #132]	; (1f8c0 <z_impl_k_mutex_unlock+0x108>)
   1f83a:	e7cd      	b.n	1f7d8 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   1f83c:	481f      	ldr	r0, [pc, #124]	; (1f8bc <z_impl_k_mutex_unlock+0x104>)
   1f83e:	f7ff feb1 	bl	1f5a4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1f842:	6921      	ldr	r1, [r4, #16]
   1f844:	68a0      	ldr	r0, [r4, #8]
   1f846:	f009 fc23 	bl	29090 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1f84a:	4620      	mov	r0, r4
   1f84c:	f001 fea4 	bl	21598 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1f850:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1f852:	b150      	cbz	r0, 1f86a <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   1f854:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1f858:	6122      	str	r2, [r4, #16]
   1f85a:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1f85c:	f001 f8c4 	bl	209e8 <z_ready_thread>
		z_reschedule(&lock, key);
   1f860:	4629      	mov	r1, r5
   1f862:	4816      	ldr	r0, [pc, #88]	; (1f8bc <z_impl_k_mutex_unlock+0x104>)
   1f864:	f001 f94c 	bl	20b00 <z_reschedule>
   1f868:	e7cd      	b.n	1f806 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   1f86a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f86c:	4813      	ldr	r0, [pc, #76]	; (1f8bc <z_impl_k_mutex_unlock+0x104>)
   1f86e:	f7ff fe8b 	bl	1f588 <z_spin_unlock_valid>
   1f872:	b958      	cbnz	r0, 1f88c <z_impl_k_mutex_unlock+0xd4>
   1f874:	23c2      	movs	r3, #194	; 0xc2
   1f876:	4a12      	ldr	r2, [pc, #72]	; (1f8c0 <z_impl_k_mutex_unlock+0x108>)
   1f878:	4914      	ldr	r1, [pc, #80]	; (1f8cc <z_impl_k_mutex_unlock+0x114>)
   1f87a:	480c      	ldr	r0, [pc, #48]	; (1f8ac <z_impl_k_mutex_unlock+0xf4>)
   1f87c:	f005 f893 	bl	249a6 <assert_print>
   1f880:	490e      	ldr	r1, [pc, #56]	; (1f8bc <z_impl_k_mutex_unlock+0x104>)
   1f882:	4813      	ldr	r0, [pc, #76]	; (1f8d0 <z_impl_k_mutex_unlock+0x118>)
   1f884:	f005 f88f 	bl	249a6 <assert_print>
   1f888:	21c2      	movs	r1, #194	; 0xc2
   1f88a:	e7d5      	b.n	1f838 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   1f88c:	f385 8811 	msr	BASEPRI, r5
   1f890:	f3bf 8f6f 	isb	sy
   1f894:	e7b7      	b.n	1f806 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   1f896:	f06f 0015 	mvn.w	r0, #21
   1f89a:	e7b5      	b.n	1f808 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   1f89c:	f04f 30ff 	mov.w	r0, #4294967295
   1f8a0:	e7b2      	b.n	1f808 <z_impl_k_mutex_unlock+0x50>
   1f8a2:	bf00      	nop
   1f8a4:	00030366 	.word	0x00030366
   1f8a8:	00030413 	.word	0x00030413
   1f8ac:	0002b339 	.word	0x0002b339
   1f8b0:	00030435 	.word	0x00030435
   1f8b4:	20021460 	.word	0x20021460
   1f8b8:	0003045a 	.word	0x0003045a
   1f8bc:	20021488 	.word	0x20021488
   1f8c0:	0002c034 	.word	0x0002c034
   1f8c4:	0002c08d 	.word	0x0002c08d
   1f8c8:	0002c0a2 	.word	0x0002c0a2
   1f8cc:	0002c061 	.word	0x0002c061
   1f8d0:	0002c078 	.word	0x0002c078

0001f8d4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1f8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f8d8:	4604      	mov	r4, r0
   1f8da:	460e      	mov	r6, r1
   1f8dc:	4690      	mov	r8, r2
   1f8de:	4699      	mov	r9, r3
   1f8e0:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f8e4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f8e8:	f04f 0320 	mov.w	r3, #32
   1f8ec:	f3ef 8711 	mrs	r7, BASEPRI
   1f8f0:	f383 8812 	msr	BASEPRI_MAX, r3
   1f8f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f8f8:	4628      	mov	r0, r5
   1f8fa:	f7ff fe37 	bl	1f56c <z_spin_lock_valid>
   1f8fe:	b968      	cbnz	r0, 1f91c <queue_insert+0x48>
   1f900:	2394      	movs	r3, #148	; 0x94
   1f902:	4a3b      	ldr	r2, [pc, #236]	; (1f9f0 <queue_insert+0x11c>)
   1f904:	493b      	ldr	r1, [pc, #236]	; (1f9f4 <queue_insert+0x120>)
   1f906:	483c      	ldr	r0, [pc, #240]	; (1f9f8 <queue_insert+0x124>)
   1f908:	f005 f84d 	bl	249a6 <assert_print>
   1f90c:	4629      	mov	r1, r5
   1f90e:	483b      	ldr	r0, [pc, #236]	; (1f9fc <queue_insert+0x128>)
   1f910:	f005 f849 	bl	249a6 <assert_print>
   1f914:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f916:	4836      	ldr	r0, [pc, #216]	; (1f9f0 <queue_insert+0x11c>)
   1f918:	f005 f83e 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f91c:	4628      	mov	r0, r5
   1f91e:	f7ff fe41 	bl	1f5a4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   1f922:	f1ba 0f00 	cmp.w	sl, #0
   1f926:	d000      	beq.n	1f92a <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1f928:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1f92a:	f104 000c 	add.w	r0, r4, #12
   1f92e:	f001 fe33 	bl	21598 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1f932:	b158      	cbz	r0, 1f94c <queue_insert+0x78>
   1f934:	2300      	movs	r3, #0
   1f936:	f8c0 8014 	str.w	r8, [r0, #20]
   1f93a:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1f93c:	f001 f854 	bl	209e8 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1f940:	4628      	mov	r0, r5
   1f942:	4639      	mov	r1, r7
   1f944:	f001 f8dc 	bl	20b00 <z_reschedule>
		return 0;
   1f948:	2000      	movs	r0, #0
   1f94a:	e01c      	b.n	1f986 <queue_insert+0xb2>
	if (alloc) {
   1f94c:	f1b9 0f00 	cmp.w	r9, #0
   1f950:	d02b      	beq.n	1f9aa <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   1f952:	2108      	movs	r1, #8
   1f954:	f003 f8da 	bl	22b0c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1f958:	b9b8      	cbnz	r0, 1f98a <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f95a:	4628      	mov	r0, r5
   1f95c:	f7ff fe14 	bl	1f588 <z_spin_unlock_valid>
   1f960:	b958      	cbnz	r0, 1f97a <queue_insert+0xa6>
   1f962:	23c2      	movs	r3, #194	; 0xc2
   1f964:	4a22      	ldr	r2, [pc, #136]	; (1f9f0 <queue_insert+0x11c>)
   1f966:	4926      	ldr	r1, [pc, #152]	; (1fa00 <queue_insert+0x12c>)
   1f968:	4823      	ldr	r0, [pc, #140]	; (1f9f8 <queue_insert+0x124>)
   1f96a:	f005 f81c 	bl	249a6 <assert_print>
   1f96e:	4629      	mov	r1, r5
   1f970:	4824      	ldr	r0, [pc, #144]	; (1fa04 <queue_insert+0x130>)
   1f972:	f005 f818 	bl	249a6 <assert_print>
   1f976:	21c2      	movs	r1, #194	; 0xc2
   1f978:	e7cd      	b.n	1f916 <queue_insert+0x42>
	__asm__ volatile(
   1f97a:	f387 8811 	msr	BASEPRI, r7
   1f97e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1f982:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   1f986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1f98a:	2201      	movs	r2, #1
		anode->data = data;
   1f98c:	f8c0 8004 	str.w	r8, [r0, #4]
   1f990:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f992:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f994:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1f998:	b95e      	cbnz	r6, 1f9b2 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f99a:	6822      	ldr	r2, [r4, #0]
   1f99c:	430a      	orrs	r2, r1
   1f99e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f9a0:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1f9a2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f9a4:	b96a      	cbnz	r2, 1f9c2 <queue_insert+0xee>
	list->tail = node;
   1f9a6:	6060      	str	r0, [r4, #4]
}
   1f9a8:	e00b      	b.n	1f9c2 <queue_insert+0xee>
}
   1f9aa:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1f9ac:	f8c8 9000 	str.w	r9, [r8]
}
   1f9b0:	e7ef      	b.n	1f992 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f9b2:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1f9b4:	2a03      	cmp	r2, #3
   1f9b6:	d810      	bhi.n	1f9da <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f9b8:	6001      	str	r1, [r0, #0]
	return list->tail;
   1f9ba:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1f9bc:	b939      	cbnz	r1, 1f9ce <queue_insert+0xfa>
	list->head = node;
   1f9be:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f9c2:	2104      	movs	r1, #4
   1f9c4:	f104 0014 	add.w	r0, r4, #20
   1f9c8:	f009 fd24 	bl	29414 <z_handle_obj_poll_events>
   1f9cc:	e7b8      	b.n	1f940 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f9ce:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f9d0:	f002 0203 	and.w	r2, r2, #3
   1f9d4:	4302      	orrs	r2, r0
   1f9d6:	600a      	str	r2, [r1, #0]
   1f9d8:	e7e5      	b.n	1f9a6 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f9da:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f9de:	430a      	orrs	r2, r1
   1f9e0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f9e2:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f9e4:	f002 0203 	and.w	r2, r2, #3
   1f9e8:	ea40 0302 	orr.w	r3, r0, r2
   1f9ec:	6033      	str	r3, [r6, #0]
}
   1f9ee:	e7e8      	b.n	1f9c2 <queue_insert+0xee>
   1f9f0:	0002c034 	.word	0x0002c034
   1f9f4:	0002c08d 	.word	0x0002c08d
   1f9f8:	0002b339 	.word	0x0002b339
   1f9fc:	0002c0a2 	.word	0x0002c0a2
   1fa00:	0002c061 	.word	0x0002c061
   1fa04:	0002c078 	.word	0x0002c078

0001fa08 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1fa08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1fa0c:	4606      	mov	r6, r0
   1fa0e:	4691      	mov	r9, r2
   1fa10:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fa12:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1fa16:	f04f 0320 	mov.w	r3, #32
   1fa1a:	f3ef 8811 	mrs	r8, BASEPRI
   1fa1e:	f383 8812 	msr	BASEPRI_MAX, r3
   1fa22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fa26:	4628      	mov	r0, r5
   1fa28:	f7ff fda0 	bl	1f56c <z_spin_lock_valid>
   1fa2c:	b968      	cbnz	r0, 1fa4a <z_impl_k_queue_get+0x42>
   1fa2e:	2394      	movs	r3, #148	; 0x94
   1fa30:	4a23      	ldr	r2, [pc, #140]	; (1fac0 <z_impl_k_queue_get+0xb8>)
   1fa32:	4924      	ldr	r1, [pc, #144]	; (1fac4 <z_impl_k_queue_get+0xbc>)
   1fa34:	4824      	ldr	r0, [pc, #144]	; (1fac8 <z_impl_k_queue_get+0xc0>)
   1fa36:	f004 ffb6 	bl	249a6 <assert_print>
   1fa3a:	4629      	mov	r1, r5
   1fa3c:	4823      	ldr	r0, [pc, #140]	; (1facc <z_impl_k_queue_get+0xc4>)
   1fa3e:	f004 ffb2 	bl	249a6 <assert_print>
   1fa42:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fa44:	481e      	ldr	r0, [pc, #120]	; (1fac0 <z_impl_k_queue_get+0xb8>)
   1fa46:	f004 ffa7 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fa4a:	4628      	mov	r0, r5
   1fa4c:	f7ff fdaa 	bl	1f5a4 <z_spin_lock_set_owner>
	return list->head;
   1fa50:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1fa52:	b1ec      	cbz	r4, 1fa90 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fa54:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fa56:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fa58:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fa5c:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1fa5e:	4620      	mov	r0, r4
   1fa60:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1fa64:	6033      	str	r3, [r6, #0]
	list->tail = node;
   1fa66:	bf08      	it	eq
   1fa68:	6073      	streq	r3, [r6, #4]
   1fa6a:	f009 fb20 	bl	290ae <z_queue_node_peek>
   1fa6e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fa70:	4628      	mov	r0, r5
   1fa72:	f7ff fd89 	bl	1f588 <z_spin_unlock_valid>
   1fa76:	b9d8      	cbnz	r0, 1fab0 <z_impl_k_queue_get+0xa8>
   1fa78:	23c2      	movs	r3, #194	; 0xc2
   1fa7a:	4a11      	ldr	r2, [pc, #68]	; (1fac0 <z_impl_k_queue_get+0xb8>)
   1fa7c:	4914      	ldr	r1, [pc, #80]	; (1fad0 <z_impl_k_queue_get+0xc8>)
   1fa7e:	4812      	ldr	r0, [pc, #72]	; (1fac8 <z_impl_k_queue_get+0xc0>)
   1fa80:	f004 ff91 	bl	249a6 <assert_print>
   1fa84:	4629      	mov	r1, r5
   1fa86:	4813      	ldr	r0, [pc, #76]	; (1fad4 <z_impl_k_queue_get+0xcc>)
   1fa88:	f004 ff8d 	bl	249a6 <assert_print>
   1fa8c:	21c2      	movs	r1, #194	; 0xc2
   1fa8e:	e7d9      	b.n	1fa44 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fa90:	ea59 0307 	orrs.w	r3, r9, r7
   1fa94:	d0ec      	beq.n	1fa70 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1fa96:	4641      	mov	r1, r8
   1fa98:	4628      	mov	r0, r5
   1fa9a:	e9cd 9700 	strd	r9, r7, [sp]
   1fa9e:	f106 020c 	add.w	r2, r6, #12
   1faa2:	f001 fafb 	bl	2109c <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   1faa6:	b938      	cbnz	r0, 1fab8 <z_impl_k_queue_get+0xb0>
   1faa8:	4b0b      	ldr	r3, [pc, #44]	; (1fad8 <z_impl_k_queue_get+0xd0>)
   1faaa:	689b      	ldr	r3, [r3, #8]
   1faac:	695c      	ldr	r4, [r3, #20]
   1faae:	e003      	b.n	1fab8 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   1fab0:	f388 8811 	msr	BASEPRI, r8
   1fab4:	f3bf 8f6f 	isb	sy
}
   1fab8:	4620      	mov	r0, r4
   1faba:	b003      	add	sp, #12
   1fabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fac0:	0002c034 	.word	0x0002c034
   1fac4:	0002c08d 	.word	0x0002c08d
   1fac8:	0002b339 	.word	0x0002b339
   1facc:	0002c0a2 	.word	0x0002c0a2
   1fad0:	0002c061 	.word	0x0002c061
   1fad4:	0002c078 	.word	0x0002c078
   1fad8:	20021460 	.word	0x20021460

0001fadc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1fadc:	b538      	push	{r3, r4, r5, lr}
   1fade:	4604      	mov	r4, r0
	__asm__ volatile(
   1fae0:	f04f 0320 	mov.w	r3, #32
   1fae4:	f3ef 8511 	mrs	r5, BASEPRI
   1fae8:	f383 8812 	msr	BASEPRI_MAX, r3
   1faec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1faf0:	4817      	ldr	r0, [pc, #92]	; (1fb50 <z_impl_k_sem_give+0x74>)
   1faf2:	f7ff fd3b 	bl	1f56c <z_spin_lock_valid>
   1faf6:	b968      	cbnz	r0, 1fb14 <z_impl_k_sem_give+0x38>
   1faf8:	2394      	movs	r3, #148	; 0x94
   1fafa:	4a16      	ldr	r2, [pc, #88]	; (1fb54 <z_impl_k_sem_give+0x78>)
   1fafc:	4916      	ldr	r1, [pc, #88]	; (1fb58 <z_impl_k_sem_give+0x7c>)
   1fafe:	4817      	ldr	r0, [pc, #92]	; (1fb5c <z_impl_k_sem_give+0x80>)
   1fb00:	f004 ff51 	bl	249a6 <assert_print>
   1fb04:	4912      	ldr	r1, [pc, #72]	; (1fb50 <z_impl_k_sem_give+0x74>)
   1fb06:	4816      	ldr	r0, [pc, #88]	; (1fb60 <z_impl_k_sem_give+0x84>)
   1fb08:	f004 ff4d 	bl	249a6 <assert_print>
   1fb0c:	2194      	movs	r1, #148	; 0x94
   1fb0e:	4811      	ldr	r0, [pc, #68]	; (1fb54 <z_impl_k_sem_give+0x78>)
   1fb10:	f004 ff42 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fb14:	480e      	ldr	r0, [pc, #56]	; (1fb50 <z_impl_k_sem_give+0x74>)
   1fb16:	f7ff fd45 	bl	1f5a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1fb1a:	4620      	mov	r0, r4
   1fb1c:	f001 fd3c 	bl	21598 <z_unpend_first_thread>

	if (thread != NULL) {
   1fb20:	b148      	cbz	r0, 1fb36 <z_impl_k_sem_give+0x5a>
   1fb22:	2200      	movs	r2, #0
   1fb24:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1fb26:	f000 ff5f 	bl	209e8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1fb2a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1fb2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1fb30:	4807      	ldr	r0, [pc, #28]	; (1fb50 <z_impl_k_sem_give+0x74>)
   1fb32:	f000 bfe5 	b.w	20b00 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fb36:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1fb3a:	429a      	cmp	r2, r3
   1fb3c:	bf18      	it	ne
   1fb3e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fb40:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fb42:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fb44:	f104 0010 	add.w	r0, r4, #16
   1fb48:	f009 fc64 	bl	29414 <z_handle_obj_poll_events>
}
   1fb4c:	e7ed      	b.n	1fb2a <z_impl_k_sem_give+0x4e>
   1fb4e:	bf00      	nop
   1fb50:	2002148c 	.word	0x2002148c
   1fb54:	0002c034 	.word	0x0002c034
   1fb58:	0002c08d 	.word	0x0002c08d
   1fb5c:	0002b339 	.word	0x0002b339
   1fb60:	0002c0a2 	.word	0x0002c0a2

0001fb64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1fb64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fb66:	4604      	mov	r4, r0
   1fb68:	4616      	mov	r6, r2
   1fb6a:	461d      	mov	r5, r3
   1fb6c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1fb70:	b17b      	cbz	r3, 1fb92 <z_impl_k_sem_take+0x2e>
   1fb72:	ea52 0305 	orrs.w	r3, r2, r5
   1fb76:	d00c      	beq.n	1fb92 <z_impl_k_sem_take+0x2e>
   1fb78:	492d      	ldr	r1, [pc, #180]	; (1fc30 <z_impl_k_sem_take+0xcc>)
   1fb7a:	2379      	movs	r3, #121	; 0x79
   1fb7c:	4a2d      	ldr	r2, [pc, #180]	; (1fc34 <z_impl_k_sem_take+0xd0>)
   1fb7e:	482e      	ldr	r0, [pc, #184]	; (1fc38 <z_impl_k_sem_take+0xd4>)
   1fb80:	f004 ff11 	bl	249a6 <assert_print>
   1fb84:	482d      	ldr	r0, [pc, #180]	; (1fc3c <z_impl_k_sem_take+0xd8>)
   1fb86:	f004 ff0e 	bl	249a6 <assert_print>
   1fb8a:	2179      	movs	r1, #121	; 0x79
   1fb8c:	4829      	ldr	r0, [pc, #164]	; (1fc34 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fb8e:	f004 ff03 	bl	24998 <assert_post_action>
   1fb92:	f04f 0320 	mov.w	r3, #32
   1fb96:	f3ef 8711 	mrs	r7, BASEPRI
   1fb9a:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb9e:	f3bf 8f6f 	isb	sy
   1fba2:	4827      	ldr	r0, [pc, #156]	; (1fc40 <z_impl_k_sem_take+0xdc>)
   1fba4:	f7ff fce2 	bl	1f56c <z_spin_lock_valid>
   1fba8:	b960      	cbnz	r0, 1fbc4 <z_impl_k_sem_take+0x60>
   1fbaa:	2394      	movs	r3, #148	; 0x94
   1fbac:	4a25      	ldr	r2, [pc, #148]	; (1fc44 <z_impl_k_sem_take+0xe0>)
   1fbae:	4926      	ldr	r1, [pc, #152]	; (1fc48 <z_impl_k_sem_take+0xe4>)
   1fbb0:	4821      	ldr	r0, [pc, #132]	; (1fc38 <z_impl_k_sem_take+0xd4>)
   1fbb2:	f004 fef8 	bl	249a6 <assert_print>
   1fbb6:	4922      	ldr	r1, [pc, #136]	; (1fc40 <z_impl_k_sem_take+0xdc>)
   1fbb8:	4824      	ldr	r0, [pc, #144]	; (1fc4c <z_impl_k_sem_take+0xe8>)
   1fbba:	f004 fef4 	bl	249a6 <assert_print>
   1fbbe:	2194      	movs	r1, #148	; 0x94
   1fbc0:	4820      	ldr	r0, [pc, #128]	; (1fc44 <z_impl_k_sem_take+0xe0>)
   1fbc2:	e7e4      	b.n	1fb8e <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   1fbc4:	481e      	ldr	r0, [pc, #120]	; (1fc40 <z_impl_k_sem_take+0xdc>)
   1fbc6:	f7ff fced 	bl	1f5a4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1fbca:	68a3      	ldr	r3, [r4, #8]
   1fbcc:	b1c3      	cbz	r3, 1fc00 <z_impl_k_sem_take+0x9c>
		sem->count--;
   1fbce:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fbd0:	481b      	ldr	r0, [pc, #108]	; (1fc40 <z_impl_k_sem_take+0xdc>)
   1fbd2:	60a3      	str	r3, [r4, #8]
   1fbd4:	f7ff fcd8 	bl	1f588 <z_spin_unlock_valid>
   1fbd8:	b958      	cbnz	r0, 1fbf2 <z_impl_k_sem_take+0x8e>
   1fbda:	23c2      	movs	r3, #194	; 0xc2
   1fbdc:	4a19      	ldr	r2, [pc, #100]	; (1fc44 <z_impl_k_sem_take+0xe0>)
   1fbde:	491c      	ldr	r1, [pc, #112]	; (1fc50 <z_impl_k_sem_take+0xec>)
   1fbe0:	4815      	ldr	r0, [pc, #84]	; (1fc38 <z_impl_k_sem_take+0xd4>)
   1fbe2:	f004 fee0 	bl	249a6 <assert_print>
   1fbe6:	4916      	ldr	r1, [pc, #88]	; (1fc40 <z_impl_k_sem_take+0xdc>)
   1fbe8:	481a      	ldr	r0, [pc, #104]	; (1fc54 <z_impl_k_sem_take+0xf0>)
   1fbea:	f004 fedc 	bl	249a6 <assert_print>
   1fbee:	21c2      	movs	r1, #194	; 0xc2
   1fbf0:	e7e6      	b.n	1fbc0 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   1fbf2:	f387 8811 	msr	BASEPRI, r7
   1fbf6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1fbfa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1fbfc:	b003      	add	sp, #12
   1fbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fc00:	ea56 0305 	orrs.w	r3, r6, r5
   1fc04:	d10b      	bne.n	1fc1e <z_impl_k_sem_take+0xba>
   1fc06:	480e      	ldr	r0, [pc, #56]	; (1fc40 <z_impl_k_sem_take+0xdc>)
   1fc08:	f7ff fcbe 	bl	1f588 <z_spin_unlock_valid>
   1fc0c:	2800      	cmp	r0, #0
   1fc0e:	d0e4      	beq.n	1fbda <z_impl_k_sem_take+0x76>
   1fc10:	f387 8811 	msr	BASEPRI, r7
   1fc14:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1fc18:	f06f 000f 	mvn.w	r0, #15
   1fc1c:	e7ee      	b.n	1fbfc <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1fc1e:	4622      	mov	r2, r4
   1fc20:	4639      	mov	r1, r7
   1fc22:	e9cd 6500 	strd	r6, r5, [sp]
   1fc26:	4806      	ldr	r0, [pc, #24]	; (1fc40 <z_impl_k_sem_take+0xdc>)
   1fc28:	f001 fa38 	bl	2109c <z_pend_curr>
	return ret;
   1fc2c:	e7e6      	b.n	1fbfc <z_impl_k_sem_take+0x98>
   1fc2e:	bf00      	nop
   1fc30:	00030491 	.word	0x00030491
   1fc34:	00030471 	.word	0x00030471
   1fc38:	0002b339 	.word	0x0002b339
   1fc3c:	0002ee3a 	.word	0x0002ee3a
   1fc40:	2002148c 	.word	0x2002148c
   1fc44:	0002c034 	.word	0x0002c034
   1fc48:	0002c08d 	.word	0x0002c08d
   1fc4c:	0002c0a2 	.word	0x0002c0a2
   1fc50:	0002c061 	.word	0x0002c061
   1fc54:	0002c078 	.word	0x0002c078

0001fc58 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1fc58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1fc5a:	2400      	movs	r4, #0
   1fc5c:	4b08      	ldr	r3, [pc, #32]	; (1fc80 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1fc5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   1fc62:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   1fc64:	ab02      	add	r3, sp, #8
   1fc66:	9300      	str	r3, [sp, #0]
   1fc68:	4906      	ldr	r1, [pc, #24]	; (1fc84 <k_sys_work_q_init+0x2c>)
   1fc6a:	f04f 33ff 	mov.w	r3, #4294967295
   1fc6e:	4806      	ldr	r0, [pc, #24]	; (1fc88 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1fc70:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1fc74:	f000 fac0 	bl	201f8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1fc78:	4620      	mov	r0, r4
   1fc7a:	b004      	add	sp, #16
   1fc7c:	bd10      	pop	{r4, pc}
   1fc7e:	bf00      	nop
   1fc80:	000304df 	.word	0x000304df
   1fc84:	20033050 	.word	0x20033050
   1fc88:	20009c78 	.word	0x20009c78

0001fc8c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1fc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc90:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fc92:	4e6e      	ldr	r6, [pc, #440]	; (1fe4c <work_queue_main+0x1c0>)
	return list->head;
   1fc94:	4f6e      	ldr	r7, [pc, #440]	; (1fe50 <work_queue_main+0x1c4>)
   1fc96:	b085      	sub	sp, #20
	__asm__ volatile(
   1fc98:	f04f 0320 	mov.w	r3, #32
   1fc9c:	f3ef 8811 	mrs	r8, BASEPRI
   1fca0:	f383 8812 	msr	BASEPRI_MAX, r3
   1fca4:	f3bf 8f6f 	isb	sy
   1fca8:	4630      	mov	r0, r6
   1fcaa:	f7ff fc5f 	bl	1f56c <z_spin_lock_valid>
   1fcae:	b968      	cbnz	r0, 1fccc <work_queue_main+0x40>
   1fcb0:	2394      	movs	r3, #148	; 0x94
   1fcb2:	4a68      	ldr	r2, [pc, #416]	; (1fe54 <work_queue_main+0x1c8>)
   1fcb4:	4968      	ldr	r1, [pc, #416]	; (1fe58 <work_queue_main+0x1cc>)
   1fcb6:	4869      	ldr	r0, [pc, #420]	; (1fe5c <work_queue_main+0x1d0>)
   1fcb8:	f004 fe75 	bl	249a6 <assert_print>
   1fcbc:	4963      	ldr	r1, [pc, #396]	; (1fe4c <work_queue_main+0x1c0>)
   1fcbe:	4868      	ldr	r0, [pc, #416]	; (1fe60 <work_queue_main+0x1d4>)
   1fcc0:	f004 fe71 	bl	249a6 <assert_print>
   1fcc4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fcc6:	4863      	ldr	r0, [pc, #396]	; (1fe54 <work_queue_main+0x1c8>)
   1fcc8:	f004 fe66 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fccc:	4630      	mov	r0, r6
   1fcce:	f7ff fc69 	bl	1f5a4 <z_spin_lock_set_owner>
   1fcd2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   1fcd6:	b9ad      	cbnz	r5, 1fd04 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1fcd8:	2102      	movs	r1, #2
   1fcda:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1fcde:	f009 fa24 	bl	2912a <flag_test_and_clear>
   1fce2:	2800      	cmp	r0, #0
   1fce4:	d135      	bne.n	1fd52 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1fce6:	2300      	movs	r3, #0
   1fce8:	f04f 32ff 	mov.w	r2, #4294967295
   1fcec:	9302      	str	r3, [sp, #8]
   1fcee:	f04f 33ff 	mov.w	r3, #4294967295
   1fcf2:	4641      	mov	r1, r8
   1fcf4:	e9cd 2300 	strd	r2, r3, [sp]
   1fcf8:	4630      	mov	r0, r6
   1fcfa:	f104 0290 	add.w	r2, r4, #144	; 0x90
   1fcfe:	f001 ff41 	bl	21b84 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   1fd02:	e7c9      	b.n	1fc98 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fd04:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   1fd08:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fd0a:	4295      	cmp	r5, r2
	list->tail = node;
   1fd0c:	bf08      	it	eq
   1fd0e:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   1fd12:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   1fd16:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd1a:	4630      	mov	r0, r6
   1fd1c:	f043 0302 	orr.w	r3, r3, #2
   1fd20:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   1fd24:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   1fd26:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   1fd2a:	f023 0304 	bic.w	r3, r3, #4
   1fd2e:	f043 0301 	orr.w	r3, r3, #1
   1fd32:	60eb      	str	r3, [r5, #12]
   1fd34:	f7ff fc28 	bl	1f588 <z_spin_unlock_valid>
   1fd38:	b9a8      	cbnz	r0, 1fd66 <work_queue_main+0xda>
   1fd3a:	23c2      	movs	r3, #194	; 0xc2
   1fd3c:	4a45      	ldr	r2, [pc, #276]	; (1fe54 <work_queue_main+0x1c8>)
   1fd3e:	4949      	ldr	r1, [pc, #292]	; (1fe64 <work_queue_main+0x1d8>)
   1fd40:	4846      	ldr	r0, [pc, #280]	; (1fe5c <work_queue_main+0x1d0>)
   1fd42:	f004 fe30 	bl	249a6 <assert_print>
   1fd46:	4941      	ldr	r1, [pc, #260]	; (1fe4c <work_queue_main+0x1c0>)
   1fd48:	4847      	ldr	r0, [pc, #284]	; (1fe68 <work_queue_main+0x1dc>)
   1fd4a:	f004 fe2c 	bl	249a6 <assert_print>
   1fd4e:	21c2      	movs	r1, #194	; 0xc2
   1fd50:	e7b9      	b.n	1fcc6 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1fd52:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1fd56:	2200      	movs	r2, #0
   1fd58:	2101      	movs	r1, #1
   1fd5a:	4628      	mov	r0, r5
   1fd5c:	f001 feb4 	bl	21ac8 <z_sched_wake>
   1fd60:	2800      	cmp	r0, #0
   1fd62:	d1f8      	bne.n	1fd56 <work_queue_main+0xca>
   1fd64:	e7bf      	b.n	1fce6 <work_queue_main+0x5a>
	__asm__ volatile(
   1fd66:	f388 8811 	msr	BASEPRI, r8
   1fd6a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   1fd6e:	f1b9 0f00 	cmp.w	r9, #0
   1fd72:	d10a      	bne.n	1fd8a <work_queue_main+0xfe>
   1fd74:	493d      	ldr	r1, [pc, #244]	; (1fe6c <work_queue_main+0x1e0>)
   1fd76:	4839      	ldr	r0, [pc, #228]	; (1fe5c <work_queue_main+0x1d0>)
   1fd78:	f240 239b 	movw	r3, #667	; 0x29b
   1fd7c:	4a3c      	ldr	r2, [pc, #240]	; (1fe70 <work_queue_main+0x1e4>)
   1fd7e:	f004 fe12 	bl	249a6 <assert_print>
   1fd82:	f240 219b 	movw	r1, #667	; 0x29b
   1fd86:	483a      	ldr	r0, [pc, #232]	; (1fe70 <work_queue_main+0x1e4>)
   1fd88:	e79e      	b.n	1fcc8 <work_queue_main+0x3c>
		handler(work);
   1fd8a:	4628      	mov	r0, r5
   1fd8c:	47c8      	blx	r9
	__asm__ volatile(
   1fd8e:	f04f 0320 	mov.w	r3, #32
   1fd92:	f3ef 8a11 	mrs	sl, BASEPRI
   1fd96:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fd9e:	4630      	mov	r0, r6
   1fda0:	f7ff fbe4 	bl	1f56c <z_spin_lock_valid>
   1fda4:	2800      	cmp	r0, #0
   1fda6:	d083      	beq.n	1fcb0 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   1fda8:	4630      	mov	r0, r6
   1fdaa:	f7ff fbfb 	bl	1f5a4 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   1fdae:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fdb0:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1fdb2:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fdb6:	d417      	bmi.n	1fde8 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   1fdb8:	60ea      	str	r2, [r5, #12]
   1fdba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fdbe:	4630      	mov	r0, r6
   1fdc0:	f023 0302 	bic.w	r3, r3, #2
   1fdc4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   1fdc8:	f3c3 2500 	ubfx	r5, r3, #8, #1
   1fdcc:	f7ff fbdc 	bl	1f588 <z_spin_unlock_valid>
   1fdd0:	2800      	cmp	r0, #0
   1fdd2:	d0b2      	beq.n	1fd3a <work_queue_main+0xae>
	__asm__ volatile(
   1fdd4:	f38a 8811 	msr	BASEPRI, sl
   1fdd8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1fddc:	2d00      	cmp	r5, #0
   1fdde:	f47f af5b 	bne.w	1fc98 <work_queue_main+0xc>
	z_impl_k_yield();
   1fde2:	f001 fc35 	bl	21650 <z_impl_k_yield>
}
   1fde6:	e757      	b.n	1fc98 <work_queue_main+0xc>
	return list->head;
   1fde8:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   1fdea:	f023 0303 	bic.w	r3, r3, #3
   1fdee:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1fdf0:	2800      	cmp	r0, #0
   1fdf2:	d0e2      	beq.n	1fdba <work_queue_main+0x12e>
	return node->next;
   1fdf4:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   1fdf8:	46c3      	mov	fp, r8
	return node->next;
   1fdfa:	f8d0 9000 	ldr.w	r9, [r0]
   1fdfe:	2800      	cmp	r0, #0
   1fe00:	d0db      	beq.n	1fdba <work_queue_main+0x12e>
		if (wc->work == work) {
   1fe02:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1fe04:	4602      	mov	r2, r0
		if (wc->work == work) {
   1fe06:	429d      	cmp	r5, r3
   1fe08:	d10d      	bne.n	1fe26 <work_queue_main+0x19a>
   1fe0a:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fe0c:	f1b8 0f00 	cmp.w	r8, #0
   1fe10:	d112      	bne.n	1fe38 <work_queue_main+0x1ac>
   1fe12:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   1fe14:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fe16:	4283      	cmp	r3, r0
   1fe18:	d100      	bne.n	1fe1c <work_queue_main+0x190>
	list->tail = node;
   1fe1a:	607a      	str	r2, [r7, #4]
	parent->next = child;
   1fe1c:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   1fe20:	f7ff fe5c 	bl	1fadc <z_impl_k_sem_give>
}
   1fe24:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1fe26:	f1b9 0f00 	cmp.w	r9, #0
   1fe2a:	d00d      	beq.n	1fe48 <work_queue_main+0x1bc>
	return node->next;
   1fe2c:	f8d9 3000 	ldr.w	r3, [r9]
   1fe30:	4648      	mov	r0, r9
   1fe32:	4690      	mov	r8, r2
   1fe34:	4699      	mov	r9, r3
   1fe36:	e7e2      	b.n	1fdfe <work_queue_main+0x172>
	parent->next = child;
   1fe38:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   1fe3c:	687b      	ldr	r3, [r7, #4]
   1fe3e:	4283      	cmp	r3, r0
	list->tail = node;
   1fe40:	bf08      	it	eq
   1fe42:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   1fe46:	e7e9      	b.n	1fe1c <work_queue_main+0x190>
   1fe48:	464b      	mov	r3, r9
   1fe4a:	e7f1      	b.n	1fe30 <work_queue_main+0x1a4>
   1fe4c:	20021498 	.word	0x20021498
   1fe50:	20021490 	.word	0x20021490
   1fe54:	0002c034 	.word	0x0002c034
   1fe58:	0002c08d 	.word	0x0002c08d
   1fe5c:	0002b339 	.word	0x0002b339
   1fe60:	0002c0a2 	.word	0x0002c0a2
   1fe64:	0002c061 	.word	0x0002c061
   1fe68:	0002c078 	.word	0x0002c078
   1fe6c:	00030509 	.word	0x00030509
   1fe70:	000304e8 	.word	0x000304e8

0001fe74 <cancel_sync_locked>:
{
   1fe74:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1fe76:	68c3      	ldr	r3, [r0, #12]
{
   1fe78:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   1fe7a:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1fe7e:	079b      	lsls	r3, r3, #30
{
   1fe80:	460c      	mov	r4, r1
	if (ret) {
   1fe82:	d50d      	bpl.n	1fea0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1fe84:	2201      	movs	r2, #1
   1fe86:	2100      	movs	r1, #0
   1fe88:	f104 0008 	add.w	r0, r4, #8
   1fe8c:	f009 f93d 	bl	2910a <z_impl_k_sem_init>
	parent->next = child;
   1fe90:	2300      	movs	r3, #0
   1fe92:	6023      	str	r3, [r4, #0]
	return list->tail;
   1fe94:	4b05      	ldr	r3, [pc, #20]	; (1feac <cancel_sync_locked+0x38>)
	canceler->work = work;
   1fe96:	6065      	str	r5, [r4, #4]
   1fe98:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1fe9a:	b91a      	cbnz	r2, 1fea4 <cancel_sync_locked+0x30>
	list->head = node;
   1fe9c:	e9c3 4400 	strd	r4, r4, [r3]
}
   1fea0:	4630      	mov	r0, r6
   1fea2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1fea4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1fea6:	605c      	str	r4, [r3, #4]
}
   1fea8:	e7fa      	b.n	1fea0 <cancel_sync_locked+0x2c>
   1feaa:	bf00      	nop
   1feac:	20021490 	.word	0x20021490

0001feb0 <submit_to_queue_locked>:
{
   1feb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1feb2:	68c3      	ldr	r3, [r0, #12]
{
   1feb4:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1feb6:	079a      	lsls	r2, r3, #30
{
   1feb8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1feba:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1febe:	d439      	bmi.n	1ff34 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1fec0:	075b      	lsls	r3, r3, #29
   1fec2:	d425      	bmi.n	1ff10 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   1fec4:	680b      	ldr	r3, [r1, #0]
   1fec6:	b90b      	cbnz	r3, 1fecc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1fec8:	6883      	ldr	r3, [r0, #8]
   1feca:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1fecc:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1fece:	07dd      	lsls	r5, r3, #31
   1fed0:	d521      	bpl.n	1ff16 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   1fed2:	68a3      	ldr	r3, [r4, #8]
   1fed4:	b95b      	cbnz	r3, 1feee <submit_to_queue_locked+0x3e>
   1fed6:	4928      	ldr	r1, [pc, #160]	; (1ff78 <submit_to_queue_locked+0xc8>)
   1fed8:	4828      	ldr	r0, [pc, #160]	; (1ff7c <submit_to_queue_locked+0xcc>)
   1feda:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1fede:	4a28      	ldr	r2, [pc, #160]	; (1ff80 <submit_to_queue_locked+0xd0>)
   1fee0:	f004 fd61 	bl	249a6 <assert_print>
   1fee4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1fee8:	4825      	ldr	r0, [pc, #148]	; (1ff80 <submit_to_queue_locked+0xd0>)
   1feea:	f004 fd55 	bl	24998 <assert_post_action>
			ret = 2;
   1feee:	2602      	movs	r6, #2
			*queuep = work->queue;
   1fef0:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1fef2:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   1fef4:	2d00      	cmp	r5, #0
   1fef6:	d03c      	beq.n	1ff72 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1fef8:	4b22      	ldr	r3, [pc, #136]	; (1ff84 <submit_to_queue_locked+0xd4>)
   1fefa:	689b      	ldr	r3, [r3, #8]
   1fefc:	42ab      	cmp	r3, r5
   1fefe:	d00c      	beq.n	1ff1a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1ff00:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ff04:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1ff06:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ff0a:	d416      	bmi.n	1ff3a <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   1ff0c:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1ff10:	2300      	movs	r3, #0
   1ff12:	603b      	str	r3, [r7, #0]
	return ret;
   1ff14:	e027      	b.n	1ff66 <submit_to_queue_locked+0xb6>
		ret = 1;
   1ff16:	2601      	movs	r6, #1
   1ff18:	e7eb      	b.n	1fef2 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1ff1a:	f009 f8a5 	bl	29068 <k_is_in_isr>
   1ff1e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   1ff22:	2800      	cmp	r0, #0
   1ff24:	d1ee      	bne.n	1ff04 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ff26:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1ff28:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ff2c:	d5ee      	bpl.n	1ff0c <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   1ff2e:	b152      	cbz	r2, 1ff46 <submit_to_queue_locked+0x96>
   1ff30:	075b      	lsls	r3, r3, #29
   1ff32:	d408      	bmi.n	1ff46 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   1ff34:	f06f 060f 	mvn.w	r6, #15
   1ff38:	e7ea      	b.n	1ff10 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   1ff3a:	2a00      	cmp	r2, #0
   1ff3c:	d1fa      	bne.n	1ff34 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   1ff3e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1ff42:	2b00      	cmp	r3, #0
   1ff44:	d1f6      	bne.n	1ff34 <submit_to_queue_locked+0x84>
	parent->next = child;
   1ff46:	2300      	movs	r3, #0
   1ff48:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ff4a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   1ff4e:	b963      	cbnz	r3, 1ff6a <submit_to_queue_locked+0xba>
	list->head = node;
   1ff50:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   1ff54:	4628      	mov	r0, r5
   1ff56:	f009 f901 	bl	2915c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1ff5a:	68e3      	ldr	r3, [r4, #12]
   1ff5c:	f043 0304 	orr.w	r3, r3, #4
   1ff60:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1ff62:	683b      	ldr	r3, [r7, #0]
   1ff64:	60a3      	str	r3, [r4, #8]
}
   1ff66:	4630      	mov	r0, r6
   1ff68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1ff6a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ff6c:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   1ff70:	e7f0      	b.n	1ff54 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   1ff72:	f06f 0615 	mvn.w	r6, #21
   1ff76:	e7cb      	b.n	1ff10 <submit_to_queue_locked+0x60>
   1ff78:	00030520 	.word	0x00030520
   1ff7c:	0002b339 	.word	0x0002b339
   1ff80:	000304e8 	.word	0x000304e8
   1ff84:	20021460 	.word	0x20021460

0001ff88 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   1ff88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ff8a:	4604      	mov	r4, r0
	__asm__ volatile(
   1ff8c:	f04f 0320 	mov.w	r3, #32
   1ff90:	f3ef 8511 	mrs	r5, BASEPRI
   1ff94:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ff9c:	481c      	ldr	r0, [pc, #112]	; (20010 <work_timeout+0x88>)
   1ff9e:	f7ff fae5 	bl	1f56c <z_spin_lock_valid>
   1ffa2:	b968      	cbnz	r0, 1ffc0 <work_timeout+0x38>
   1ffa4:	2394      	movs	r3, #148	; 0x94
   1ffa6:	4a1b      	ldr	r2, [pc, #108]	; (20014 <work_timeout+0x8c>)
   1ffa8:	491b      	ldr	r1, [pc, #108]	; (20018 <work_timeout+0x90>)
   1ffaa:	481c      	ldr	r0, [pc, #112]	; (2001c <work_timeout+0x94>)
   1ffac:	f004 fcfb 	bl	249a6 <assert_print>
   1ffb0:	4917      	ldr	r1, [pc, #92]	; (20010 <work_timeout+0x88>)
   1ffb2:	481b      	ldr	r0, [pc, #108]	; (20020 <work_timeout+0x98>)
   1ffb4:	f004 fcf7 	bl	249a6 <assert_print>
   1ffb8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ffba:	4816      	ldr	r0, [pc, #88]	; (20014 <work_timeout+0x8c>)
   1ffbc:	f004 fcec 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ffc0:	4813      	ldr	r0, [pc, #76]	; (20010 <work_timeout+0x88>)
   1ffc2:	f7ff faef 	bl	1f5a4 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   1ffc6:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1ffc8:	2103      	movs	r1, #3
   1ffca:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   1ffcc:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1ffce:	f1a4 0610 	sub.w	r6, r4, #16
   1ffd2:	f009 f8aa 	bl	2912a <flag_test_and_clear>
   1ffd6:	b128      	cbz	r0, 1ffe4 <work_timeout+0x5c>
		queue = dw->queue;
   1ffd8:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   1ffda:	4630      	mov	r0, r6
   1ffdc:	a901      	add	r1, sp, #4
		queue = dw->queue;
   1ffde:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1ffe0:	f7ff ff66 	bl	1feb0 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ffe4:	480a      	ldr	r0, [pc, #40]	; (20010 <work_timeout+0x88>)
   1ffe6:	f7ff facf 	bl	1f588 <z_spin_unlock_valid>
   1ffea:	b958      	cbnz	r0, 20004 <work_timeout+0x7c>
   1ffec:	23c2      	movs	r3, #194	; 0xc2
   1ffee:	4a09      	ldr	r2, [pc, #36]	; (20014 <work_timeout+0x8c>)
   1fff0:	490c      	ldr	r1, [pc, #48]	; (20024 <work_timeout+0x9c>)
   1fff2:	480a      	ldr	r0, [pc, #40]	; (2001c <work_timeout+0x94>)
   1fff4:	f004 fcd7 	bl	249a6 <assert_print>
   1fff8:	4905      	ldr	r1, [pc, #20]	; (20010 <work_timeout+0x88>)
   1fffa:	480b      	ldr	r0, [pc, #44]	; (20028 <work_timeout+0xa0>)
   1fffc:	f004 fcd3 	bl	249a6 <assert_print>
   20000:	21c2      	movs	r1, #194	; 0xc2
   20002:	e7da      	b.n	1ffba <work_timeout+0x32>
	__asm__ volatile(
   20004:	f385 8811 	msr	BASEPRI, r5
   20008:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   2000c:	b002      	add	sp, #8
   2000e:	bd70      	pop	{r4, r5, r6, pc}
   20010:	20021498 	.word	0x20021498
   20014:	0002c034 	.word	0x0002c034
   20018:	0002c08d 	.word	0x0002c08d
   2001c:	0002b339 	.word	0x0002b339
   20020:	0002c0a2 	.word	0x0002c0a2
   20024:	0002c061 	.word	0x0002c061
   20028:	0002c078 	.word	0x0002c078

0002002c <k_work_init>:
{
   2002c:	b538      	push	{r3, r4, r5, lr}
   2002e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   20030:	4604      	mov	r4, r0
   20032:	b948      	cbnz	r0, 20048 <k_work_init+0x1c>
   20034:	490c      	ldr	r1, [pc, #48]	; (20068 <k_work_init+0x3c>)
   20036:	2389      	movs	r3, #137	; 0x89
   20038:	4a0c      	ldr	r2, [pc, #48]	; (2006c <k_work_init+0x40>)
   2003a:	480d      	ldr	r0, [pc, #52]	; (20070 <k_work_init+0x44>)
   2003c:	f004 fcb3 	bl	249a6 <assert_print>
   20040:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   20042:	480a      	ldr	r0, [pc, #40]	; (2006c <k_work_init+0x40>)
   20044:	f004 fca8 	bl	24998 <assert_post_action>
   20048:	b939      	cbnz	r1, 2005a <k_work_init+0x2e>
   2004a:	490a      	ldr	r1, [pc, #40]	; (20074 <k_work_init+0x48>)
   2004c:	238a      	movs	r3, #138	; 0x8a
   2004e:	4a07      	ldr	r2, [pc, #28]	; (2006c <k_work_init+0x40>)
   20050:	4807      	ldr	r0, [pc, #28]	; (20070 <k_work_init+0x44>)
   20052:	f004 fca8 	bl	249a6 <assert_print>
   20056:	218a      	movs	r1, #138	; 0x8a
   20058:	e7f3      	b.n	20042 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2005a:	2210      	movs	r2, #16
   2005c:	2100      	movs	r1, #0
   2005e:	f009 fa42 	bl	294e6 <memset>
   20062:	6065      	str	r5, [r4, #4]
}
   20064:	bd38      	pop	{r3, r4, r5, pc}
   20066:	bf00      	nop
   20068:	000305bf 	.word	0x000305bf
   2006c:	000304e8 	.word	0x000304e8
   20070:	0002b339 	.word	0x0002b339
   20074:	00030509 	.word	0x00030509

00020078 <k_work_busy_get>:
{
   20078:	b538      	push	{r3, r4, r5, lr}
   2007a:	4604      	mov	r4, r0
	__asm__ volatile(
   2007c:	f04f 0320 	mov.w	r3, #32
   20080:	f3ef 8511 	mrs	r5, BASEPRI
   20084:	f383 8812 	msr	BASEPRI_MAX, r3
   20088:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2008c:	4816      	ldr	r0, [pc, #88]	; (200e8 <k_work_busy_get+0x70>)
   2008e:	f7ff fa6d 	bl	1f56c <z_spin_lock_valid>
   20092:	b968      	cbnz	r0, 200b0 <k_work_busy_get+0x38>
   20094:	2394      	movs	r3, #148	; 0x94
   20096:	4a15      	ldr	r2, [pc, #84]	; (200ec <k_work_busy_get+0x74>)
   20098:	4915      	ldr	r1, [pc, #84]	; (200f0 <k_work_busy_get+0x78>)
   2009a:	4816      	ldr	r0, [pc, #88]	; (200f4 <k_work_busy_get+0x7c>)
   2009c:	f004 fc83 	bl	249a6 <assert_print>
   200a0:	4911      	ldr	r1, [pc, #68]	; (200e8 <k_work_busy_get+0x70>)
   200a2:	4815      	ldr	r0, [pc, #84]	; (200f8 <k_work_busy_get+0x80>)
   200a4:	f004 fc7f 	bl	249a6 <assert_print>
   200a8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   200aa:	4810      	ldr	r0, [pc, #64]	; (200ec <k_work_busy_get+0x74>)
   200ac:	f004 fc74 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   200b0:	480d      	ldr	r0, [pc, #52]	; (200e8 <k_work_busy_get+0x70>)
   200b2:	f7ff fa77 	bl	1f5a4 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   200b6:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   200b8:	480b      	ldr	r0, [pc, #44]	; (200e8 <k_work_busy_get+0x70>)
   200ba:	f004 040f 	and.w	r4, r4, #15
   200be:	f7ff fa63 	bl	1f588 <z_spin_unlock_valid>
   200c2:	b958      	cbnz	r0, 200dc <k_work_busy_get+0x64>
   200c4:	23c2      	movs	r3, #194	; 0xc2
   200c6:	4a09      	ldr	r2, [pc, #36]	; (200ec <k_work_busy_get+0x74>)
   200c8:	490c      	ldr	r1, [pc, #48]	; (200fc <k_work_busy_get+0x84>)
   200ca:	480a      	ldr	r0, [pc, #40]	; (200f4 <k_work_busy_get+0x7c>)
   200cc:	f004 fc6b 	bl	249a6 <assert_print>
   200d0:	4905      	ldr	r1, [pc, #20]	; (200e8 <k_work_busy_get+0x70>)
   200d2:	480b      	ldr	r0, [pc, #44]	; (20100 <k_work_busy_get+0x88>)
   200d4:	f004 fc67 	bl	249a6 <assert_print>
   200d8:	21c2      	movs	r1, #194	; 0xc2
   200da:	e7e6      	b.n	200aa <k_work_busy_get+0x32>
	__asm__ volatile(
   200dc:	f385 8811 	msr	BASEPRI, r5
   200e0:	f3bf 8f6f 	isb	sy
}
   200e4:	4620      	mov	r0, r4
   200e6:	bd38      	pop	{r3, r4, r5, pc}
   200e8:	20021498 	.word	0x20021498
   200ec:	0002c034 	.word	0x0002c034
   200f0:	0002c08d 	.word	0x0002c08d
   200f4:	0002b339 	.word	0x0002b339
   200f8:	0002c0a2 	.word	0x0002c0a2
   200fc:	0002c061 	.word	0x0002c061
   20100:	0002c078 	.word	0x0002c078

00020104 <z_work_submit_to_queue>:
{
   20104:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   20106:	460c      	mov	r4, r1
{
   20108:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   2010a:	b959      	cbnz	r1, 20124 <z_work_submit_to_queue+0x20>
   2010c:	4921      	ldr	r1, [pc, #132]	; (20194 <z_work_submit_to_queue+0x90>)
   2010e:	4822      	ldr	r0, [pc, #136]	; (20198 <z_work_submit_to_queue+0x94>)
   20110:	f44f 73ba 	mov.w	r3, #372	; 0x174
   20114:	4a21      	ldr	r2, [pc, #132]	; (2019c <z_work_submit_to_queue+0x98>)
   20116:	f004 fc46 	bl	249a6 <assert_print>
   2011a:	f44f 71ba 	mov.w	r1, #372	; 0x174
   2011e:	481f      	ldr	r0, [pc, #124]	; (2019c <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20120:	f004 fc3a 	bl	24998 <assert_post_action>
	__asm__ volatile(
   20124:	f04f 0320 	mov.w	r3, #32
   20128:	f3ef 8511 	mrs	r5, BASEPRI
   2012c:	f383 8812 	msr	BASEPRI_MAX, r3
   20130:	f3bf 8f6f 	isb	sy
   20134:	481a      	ldr	r0, [pc, #104]	; (201a0 <z_work_submit_to_queue+0x9c>)
   20136:	f7ff fa19 	bl	1f56c <z_spin_lock_valid>
   2013a:	b960      	cbnz	r0, 20156 <z_work_submit_to_queue+0x52>
   2013c:	2394      	movs	r3, #148	; 0x94
   2013e:	4a19      	ldr	r2, [pc, #100]	; (201a4 <z_work_submit_to_queue+0xa0>)
   20140:	4919      	ldr	r1, [pc, #100]	; (201a8 <z_work_submit_to_queue+0xa4>)
   20142:	4815      	ldr	r0, [pc, #84]	; (20198 <z_work_submit_to_queue+0x94>)
   20144:	f004 fc2f 	bl	249a6 <assert_print>
   20148:	4915      	ldr	r1, [pc, #84]	; (201a0 <z_work_submit_to_queue+0x9c>)
   2014a:	4818      	ldr	r0, [pc, #96]	; (201ac <z_work_submit_to_queue+0xa8>)
   2014c:	f004 fc2b 	bl	249a6 <assert_print>
   20150:	2194      	movs	r1, #148	; 0x94
   20152:	4814      	ldr	r0, [pc, #80]	; (201a4 <z_work_submit_to_queue+0xa0>)
   20154:	e7e4      	b.n	20120 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   20156:	4812      	ldr	r0, [pc, #72]	; (201a0 <z_work_submit_to_queue+0x9c>)
   20158:	f7ff fa24 	bl	1f5a4 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   2015c:	4620      	mov	r0, r4
   2015e:	a901      	add	r1, sp, #4
   20160:	f7ff fea6 	bl	1feb0 <submit_to_queue_locked>
   20164:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20166:	480e      	ldr	r0, [pc, #56]	; (201a0 <z_work_submit_to_queue+0x9c>)
   20168:	f7ff fa0e 	bl	1f588 <z_spin_unlock_valid>
   2016c:	b958      	cbnz	r0, 20186 <z_work_submit_to_queue+0x82>
   2016e:	23c2      	movs	r3, #194	; 0xc2
   20170:	4a0c      	ldr	r2, [pc, #48]	; (201a4 <z_work_submit_to_queue+0xa0>)
   20172:	490f      	ldr	r1, [pc, #60]	; (201b0 <z_work_submit_to_queue+0xac>)
   20174:	4808      	ldr	r0, [pc, #32]	; (20198 <z_work_submit_to_queue+0x94>)
   20176:	f004 fc16 	bl	249a6 <assert_print>
   2017a:	4909      	ldr	r1, [pc, #36]	; (201a0 <z_work_submit_to_queue+0x9c>)
   2017c:	480d      	ldr	r0, [pc, #52]	; (201b4 <z_work_submit_to_queue+0xb0>)
   2017e:	f004 fc12 	bl	249a6 <assert_print>
   20182:	21c2      	movs	r1, #194	; 0xc2
   20184:	e7e5      	b.n	20152 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   20186:	f385 8811 	msr	BASEPRI, r5
   2018a:	f3bf 8f6f 	isb	sy
}
   2018e:	4620      	mov	r0, r4
   20190:	b003      	add	sp, #12
   20192:	bd30      	pop	{r4, r5, pc}
   20194:	000305bf 	.word	0x000305bf
   20198:	0002b339 	.word	0x0002b339
   2019c:	000304e8 	.word	0x000304e8
   201a0:	20021498 	.word	0x20021498
   201a4:	0002c034 	.word	0x0002c034
   201a8:	0002c08d 	.word	0x0002c08d
   201ac:	0002c0a2 	.word	0x0002c0a2
   201b0:	0002c061 	.word	0x0002c061
   201b4:	0002c078 	.word	0x0002c078

000201b8 <k_work_submit>:
{
   201b8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   201ba:	4801      	ldr	r0, [pc, #4]	; (201c0 <k_work_submit+0x8>)
   201bc:	f009 b808 	b.w	291d0 <k_work_submit_to_queue>
   201c0:	20009c78 	.word	0x20009c78

000201c4 <k_work_queue_init>:
{
   201c4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   201c6:	b958      	cbnz	r0, 201e0 <k_work_queue_init+0x1c>
   201c8:	4908      	ldr	r1, [pc, #32]	; (201ec <k_work_queue_init+0x28>)
   201ca:	4809      	ldr	r0, [pc, #36]	; (201f0 <k_work_queue_init+0x2c>)
   201cc:	f240 23b9 	movw	r3, #697	; 0x2b9
   201d0:	4a08      	ldr	r2, [pc, #32]	; (201f4 <k_work_queue_init+0x30>)
   201d2:	f004 fbe8 	bl	249a6 <assert_print>
   201d6:	f240 21b9 	movw	r1, #697	; 0x2b9
   201da:	4806      	ldr	r0, [pc, #24]	; (201f4 <k_work_queue_init+0x30>)
   201dc:	f004 fbdc 	bl	24998 <assert_post_action>
	*queue = (struct k_work_q) {
   201e0:	22a8      	movs	r2, #168	; 0xa8
   201e2:	2100      	movs	r1, #0
   201e4:	f009 f97f 	bl	294e6 <memset>
}
   201e8:	bd08      	pop	{r3, pc}
   201ea:	bf00      	nop
   201ec:	00030526 	.word	0x00030526
   201f0:	0002b339 	.word	0x0002b339
   201f4:	000304e8 	.word	0x000304e8

000201f8 <k_work_queue_start>:
{
   201f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   201fa:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   201fc:	4604      	mov	r4, r0
{
   201fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   20200:	b958      	cbnz	r0, 2021a <k_work_queue_start+0x22>
   20202:	492b      	ldr	r1, [pc, #172]	; (202b0 <k_work_queue_start+0xb8>)
   20204:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   20208:	4a2a      	ldr	r2, [pc, #168]	; (202b4 <k_work_queue_start+0xbc>)
   2020a:	482b      	ldr	r0, [pc, #172]	; (202b8 <k_work_queue_start+0xc0>)
   2020c:	f004 fbcb 	bl	249a6 <assert_print>
   20210:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   20214:	4827      	ldr	r0, [pc, #156]	; (202b4 <k_work_queue_start+0xbc>)
   20216:	f004 fbbf 	bl	24998 <assert_post_action>
   2021a:	b949      	cbnz	r1, 20230 <k_work_queue_start+0x38>
   2021c:	4927      	ldr	r1, [pc, #156]	; (202bc <k_work_queue_start+0xc4>)
   2021e:	f240 23c9 	movw	r3, #713	; 0x2c9
   20222:	4a24      	ldr	r2, [pc, #144]	; (202b4 <k_work_queue_start+0xbc>)
   20224:	4824      	ldr	r0, [pc, #144]	; (202b8 <k_work_queue_start+0xc0>)
   20226:	f004 fbbe 	bl	249a6 <assert_print>
   2022a:	f240 21c9 	movw	r1, #713	; 0x2c9
   2022e:	e7f1      	b.n	20214 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   20230:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   20234:	f010 0001 	ands.w	r0, r0, #1
   20238:	d009      	beq.n	2024e <k_work_queue_start+0x56>
   2023a:	4921      	ldr	r1, [pc, #132]	; (202c0 <k_work_queue_start+0xc8>)
   2023c:	f240 23ca 	movw	r3, #714	; 0x2ca
   20240:	4a1c      	ldr	r2, [pc, #112]	; (202b4 <k_work_queue_start+0xbc>)
   20242:	481d      	ldr	r0, [pc, #116]	; (202b8 <k_work_queue_start+0xc0>)
   20244:	f004 fbaf 	bl	249a6 <assert_print>
   20248:	f240 21ca 	movw	r1, #714	; 0x2ca
   2024c:	e7e2      	b.n	20214 <k_work_queue_start+0x1c>
	list->tail = NULL;
   2024e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   20252:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   20256:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   2025a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2025e:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   20262:	b31d      	cbz	r5, 202ac <k_work_queue_start+0xb4>
   20264:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   20266:	2800      	cmp	r0, #0
   20268:	f240 1001 	movw	r0, #257	; 0x101
   2026c:	bf08      	it	eq
   2026e:	2001      	moveq	r0, #1
	*flagp = flags;
   20270:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20274:	2000      	movs	r0, #0
   20276:	f04f 36ff 	mov.w	r6, #4294967295
   2027a:	f04f 37ff 	mov.w	r7, #4294967295
   2027e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   20282:	e9cd 0001 	strd	r0, r0, [sp, #4]
   20286:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2028a:	4620      	mov	r0, r4
   2028c:	4b0d      	ldr	r3, [pc, #52]	; (202c4 <k_work_queue_start+0xcc>)
   2028e:	9400      	str	r4, [sp, #0]
   20290:	f7ff f8a2 	bl	1f3d8 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   20294:	b125      	cbz	r5, 202a0 <k_work_queue_start+0xa8>
   20296:	6829      	ldr	r1, [r5, #0]
   20298:	b111      	cbz	r1, 202a0 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   2029a:	4620      	mov	r0, r4
   2029c:	f008 feea 	bl	29074 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   202a0:	4620      	mov	r0, r4
}
   202a2:	b009      	add	sp, #36	; 0x24
   202a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   202a8:	f008 bee9 	b.w	2907e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   202ac:	2001      	movs	r0, #1
   202ae:	e7df      	b.n	20270 <k_work_queue_start+0x78>
   202b0:	0003057e 	.word	0x0003057e
   202b4:	000304e8 	.word	0x000304e8
   202b8:	0002b339 	.word	0x0002b339
   202bc:	00030584 	.word	0x00030584
   202c0:	0003058a 	.word	0x0003058a
   202c4:	0001fc8d 	.word	0x0001fc8d

000202c8 <k_work_queue_drain>:
{
   202c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   202ca:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   202cc:	4604      	mov	r4, r0
   202ce:	b958      	cbnz	r0, 202e8 <k_work_queue_drain+0x20>
   202d0:	493a      	ldr	r1, [pc, #232]	; (203bc <k_work_queue_drain+0xf4>)
   202d2:	f240 23ed 	movw	r3, #749	; 0x2ed
   202d6:	4a3a      	ldr	r2, [pc, #232]	; (203c0 <k_work_queue_drain+0xf8>)
   202d8:	483a      	ldr	r0, [pc, #232]	; (203c4 <k_work_queue_drain+0xfc>)
   202da:	f004 fb64 	bl	249a6 <assert_print>
   202de:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   202e2:	4837      	ldr	r0, [pc, #220]	; (203c0 <k_work_queue_drain+0xf8>)
   202e4:	f004 fb58 	bl	24998 <assert_post_action>
   202e8:	f008 febe 	bl	29068 <k_is_in_isr>
   202ec:	b148      	cbz	r0, 20302 <k_work_queue_drain+0x3a>
   202ee:	4936      	ldr	r1, [pc, #216]	; (203c8 <k_work_queue_drain+0x100>)
   202f0:	f240 23ee 	movw	r3, #750	; 0x2ee
   202f4:	4a32      	ldr	r2, [pc, #200]	; (203c0 <k_work_queue_drain+0xf8>)
   202f6:	4833      	ldr	r0, [pc, #204]	; (203c4 <k_work_queue_drain+0xfc>)
   202f8:	f004 fb55 	bl	249a6 <assert_print>
   202fc:	f240 21ee 	movw	r1, #750	; 0x2ee
   20300:	e7ef      	b.n	202e2 <k_work_queue_drain+0x1a>
	__asm__ volatile(
   20302:	f04f 0320 	mov.w	r3, #32
   20306:	f3ef 8611 	mrs	r6, BASEPRI
   2030a:	f383 8812 	msr	BASEPRI_MAX, r3
   2030e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20312:	482e      	ldr	r0, [pc, #184]	; (203cc <k_work_queue_drain+0x104>)
   20314:	f7ff f92a 	bl	1f56c <z_spin_lock_valid>
   20318:	b960      	cbnz	r0, 20334 <k_work_queue_drain+0x6c>
   2031a:	2394      	movs	r3, #148	; 0x94
   2031c:	4a2c      	ldr	r2, [pc, #176]	; (203d0 <k_work_queue_drain+0x108>)
   2031e:	492d      	ldr	r1, [pc, #180]	; (203d4 <k_work_queue_drain+0x10c>)
   20320:	4828      	ldr	r0, [pc, #160]	; (203c4 <k_work_queue_drain+0xfc>)
   20322:	f004 fb40 	bl	249a6 <assert_print>
   20326:	4929      	ldr	r1, [pc, #164]	; (203cc <k_work_queue_drain+0x104>)
   20328:	482b      	ldr	r0, [pc, #172]	; (203d8 <k_work_queue_drain+0x110>)
   2032a:	f004 fb3c 	bl	249a6 <assert_print>
   2032e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20330:	4827      	ldr	r0, [pc, #156]	; (203d0 <k_work_queue_drain+0x108>)
   20332:	e7d7      	b.n	202e4 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   20334:	4825      	ldr	r0, [pc, #148]	; (203cc <k_work_queue_drain+0x104>)
   20336:	f7ff f935 	bl	1f5a4 <z_spin_lock_set_owner>
	return *flagp;
   2033a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   2033e:	f013 0f06 	tst.w	r3, #6
   20342:	d11d      	bne.n	20380 <k_work_queue_drain+0xb8>
	    || plug
   20344:	b1b5      	cbz	r5, 20374 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   20346:	f043 030c 	orr.w	r3, r3, #12
   2034a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   2034e:	4620      	mov	r0, r4
   20350:	f008 ff04 	bl	2915c <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   20354:	2300      	movs	r3, #0
   20356:	f04f 32ff 	mov.w	r2, #4294967295
   2035a:	9302      	str	r3, [sp, #8]
   2035c:	f04f 33ff 	mov.w	r3, #4294967295
   20360:	4631      	mov	r1, r6
   20362:	e9cd 2300 	strd	r2, r3, [sp]
   20366:	4819      	ldr	r0, [pc, #100]	; (203cc <k_work_queue_drain+0x104>)
   20368:	f104 0298 	add.w	r2, r4, #152	; 0x98
   2036c:	f001 fc0a 	bl	21b84 <z_sched_wait>
}
   20370:	b004      	add	sp, #16
   20372:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   20374:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   20378:	b14d      	cbz	r5, 2038e <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   2037a:	f043 0304 	orr.w	r3, r3, #4
   2037e:	e7e4      	b.n	2034a <k_work_queue_drain+0x82>
   20380:	f043 0204 	orr.w	r2, r3, #4
   20384:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   20388:	2d00      	cmp	r5, #0
   2038a:	d0e0      	beq.n	2034e <k_work_queue_drain+0x86>
   2038c:	e7db      	b.n	20346 <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2038e:	480f      	ldr	r0, [pc, #60]	; (203cc <k_work_queue_drain+0x104>)
   20390:	f7ff f8fa 	bl	1f588 <z_spin_unlock_valid>
   20394:	b958      	cbnz	r0, 203ae <k_work_queue_drain+0xe6>
   20396:	23c2      	movs	r3, #194	; 0xc2
   20398:	4a0d      	ldr	r2, [pc, #52]	; (203d0 <k_work_queue_drain+0x108>)
   2039a:	4910      	ldr	r1, [pc, #64]	; (203dc <k_work_queue_drain+0x114>)
   2039c:	4809      	ldr	r0, [pc, #36]	; (203c4 <k_work_queue_drain+0xfc>)
   2039e:	f004 fb02 	bl	249a6 <assert_print>
   203a2:	490a      	ldr	r1, [pc, #40]	; (203cc <k_work_queue_drain+0x104>)
   203a4:	480e      	ldr	r0, [pc, #56]	; (203e0 <k_work_queue_drain+0x118>)
   203a6:	f004 fafe 	bl	249a6 <assert_print>
   203aa:	21c2      	movs	r1, #194	; 0xc2
   203ac:	e7c0      	b.n	20330 <k_work_queue_drain+0x68>
	__asm__ volatile(
   203ae:	f386 8811 	msr	BASEPRI, r6
   203b2:	f3bf 8f6f 	isb	sy
	int ret = 0;
   203b6:	4628      	mov	r0, r5
	return ret;
   203b8:	e7da      	b.n	20370 <k_work_queue_drain+0xa8>
   203ba:	bf00      	nop
   203bc:	0003057e 	.word	0x0003057e
   203c0:	000304e8 	.word	0x000304e8
   203c4:	0002b339 	.word	0x0002b339
   203c8:	0002e0e6 	.word	0x0002e0e6
   203cc:	20021498 	.word	0x20021498
   203d0:	0002c034 	.word	0x0002c034
   203d4:	0002c08d 	.word	0x0002c08d
   203d8:	0002c0a2 	.word	0x0002c0a2
   203dc:	0002c061 	.word	0x0002c061
   203e0:	0002c078 	.word	0x0002c078

000203e4 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   203e4:	b538      	push	{r3, r4, r5, lr}
   203e6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   203e8:	4604      	mov	r4, r0
   203ea:	b958      	cbnz	r0, 20404 <k_work_init_delayable+0x20>
   203ec:	490f      	ldr	r1, [pc, #60]	; (2042c <k_work_init_delayable+0x48>)
   203ee:	f44f 7350 	mov.w	r3, #832	; 0x340
   203f2:	4a0f      	ldr	r2, [pc, #60]	; (20430 <k_work_init_delayable+0x4c>)
   203f4:	480f      	ldr	r0, [pc, #60]	; (20434 <k_work_init_delayable+0x50>)
   203f6:	f004 fad6 	bl	249a6 <assert_print>
   203fa:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   203fe:	480c      	ldr	r0, [pc, #48]	; (20430 <k_work_init_delayable+0x4c>)
   20400:	f004 faca 	bl	24998 <assert_post_action>
   20404:	b949      	cbnz	r1, 2041a <k_work_init_delayable+0x36>
   20406:	490c      	ldr	r1, [pc, #48]	; (20438 <k_work_init_delayable+0x54>)
   20408:	f240 3341 	movw	r3, #833	; 0x341
   2040c:	4a08      	ldr	r2, [pc, #32]	; (20430 <k_work_init_delayable+0x4c>)
   2040e:	4809      	ldr	r0, [pc, #36]	; (20434 <k_work_init_delayable+0x50>)
   20410:	f004 fac9 	bl	249a6 <assert_print>
   20414:	f240 3141 	movw	r1, #833	; 0x341
   20418:	e7f1      	b.n	203fe <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   2041a:	2230      	movs	r2, #48	; 0x30
   2041c:	2100      	movs	r1, #0
   2041e:	f009 f862 	bl	294e6 <memset>
   20422:	f44f 7380 	mov.w	r3, #256	; 0x100
   20426:	6065      	str	r5, [r4, #4]
   20428:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   2042a:	bd38      	pop	{r3, r4, r5, pc}
   2042c:	000305be 	.word	0x000305be
   20430:	000304e8 	.word	0x000304e8
   20434:	0002b339 	.word	0x0002b339
   20438:	00030509 	.word	0x00030509

0002043c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2043c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2043e:	4616      	mov	r6, r2
   20440:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   20442:	460c      	mov	r4, r1
{
   20444:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   20446:	b959      	cbnz	r1, 20460 <k_work_schedule_for_queue+0x24>
   20448:	492d      	ldr	r1, [pc, #180]	; (20500 <k_work_schedule_for_queue+0xc4>)
   2044a:	482e      	ldr	r0, [pc, #184]	; (20504 <k_work_schedule_for_queue+0xc8>)
   2044c:	f240 33b7 	movw	r3, #951	; 0x3b7
   20450:	4a2d      	ldr	r2, [pc, #180]	; (20508 <k_work_schedule_for_queue+0xcc>)
   20452:	f004 faa8 	bl	249a6 <assert_print>
   20456:	f240 31b7 	movw	r1, #951	; 0x3b7
   2045a:	482b      	ldr	r0, [pc, #172]	; (20508 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2045c:	f004 fa9c 	bl	24998 <assert_post_action>
	__asm__ volatile(
   20460:	f04f 0320 	mov.w	r3, #32
   20464:	f3ef 8711 	mrs	r7, BASEPRI
   20468:	f383 8812 	msr	BASEPRI_MAX, r3
   2046c:	f3bf 8f6f 	isb	sy
   20470:	4826      	ldr	r0, [pc, #152]	; (2050c <k_work_schedule_for_queue+0xd0>)
   20472:	f7ff f87b 	bl	1f56c <z_spin_lock_valid>
   20476:	b960      	cbnz	r0, 20492 <k_work_schedule_for_queue+0x56>
   20478:	2394      	movs	r3, #148	; 0x94
   2047a:	4a25      	ldr	r2, [pc, #148]	; (20510 <k_work_schedule_for_queue+0xd4>)
   2047c:	4925      	ldr	r1, [pc, #148]	; (20514 <k_work_schedule_for_queue+0xd8>)
   2047e:	4821      	ldr	r0, [pc, #132]	; (20504 <k_work_schedule_for_queue+0xc8>)
   20480:	f004 fa91 	bl	249a6 <assert_print>
   20484:	4921      	ldr	r1, [pc, #132]	; (2050c <k_work_schedule_for_queue+0xd0>)
   20486:	4824      	ldr	r0, [pc, #144]	; (20518 <k_work_schedule_for_queue+0xdc>)
   20488:	f004 fa8d 	bl	249a6 <assert_print>
   2048c:	2194      	movs	r1, #148	; 0x94
   2048e:	4820      	ldr	r0, [pc, #128]	; (20510 <k_work_schedule_for_queue+0xd4>)
   20490:	e7e4      	b.n	2045c <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   20492:	481e      	ldr	r0, [pc, #120]	; (2050c <k_work_schedule_for_queue+0xd0>)
   20494:	f7ff f886 	bl	1f5a4 <z_spin_lock_set_owner>
	return *flagp;
   20498:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2049a:	f013 0f0e 	tst.w	r3, #14
   2049e:	d125      	bne.n	204ec <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   204a0:	ea55 0206 	orrs.w	r2, r5, r6
   204a4:	d114      	bne.n	204d0 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   204a6:	4620      	mov	r0, r4
   204a8:	a901      	add	r1, sp, #4
   204aa:	f7ff fd01 	bl	1feb0 <submit_to_queue_locked>
   204ae:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204b0:	4816      	ldr	r0, [pc, #88]	; (2050c <k_work_schedule_for_queue+0xd0>)
   204b2:	f7ff f869 	bl	1f588 <z_spin_unlock_valid>
   204b6:	b9d8      	cbnz	r0, 204f0 <k_work_schedule_for_queue+0xb4>
   204b8:	23c2      	movs	r3, #194	; 0xc2
   204ba:	4a15      	ldr	r2, [pc, #84]	; (20510 <k_work_schedule_for_queue+0xd4>)
   204bc:	4917      	ldr	r1, [pc, #92]	; (2051c <k_work_schedule_for_queue+0xe0>)
   204be:	4811      	ldr	r0, [pc, #68]	; (20504 <k_work_schedule_for_queue+0xc8>)
   204c0:	f004 fa71 	bl	249a6 <assert_print>
   204c4:	4911      	ldr	r1, [pc, #68]	; (2050c <k_work_schedule_for_queue+0xd0>)
   204c6:	4816      	ldr	r0, [pc, #88]	; (20520 <k_work_schedule_for_queue+0xe4>)
   204c8:	f004 fa6d 	bl	249a6 <assert_print>
   204cc:	21c2      	movs	r1, #194	; 0xc2
   204ce:	e7de      	b.n	2048e <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   204d0:	f043 0308 	orr.w	r3, r3, #8
   204d4:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   204d6:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   204d8:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   204dc:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   204de:	4632      	mov	r2, r6
   204e0:	462b      	mov	r3, r5
   204e2:	4910      	ldr	r1, [pc, #64]	; (20524 <k_work_schedule_for_queue+0xe8>)
   204e4:	f001 fbc8 	bl	21c78 <z_add_timeout>
	return ret;
   204e8:	2401      	movs	r4, #1
   204ea:	e7e1      	b.n	204b0 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   204ec:	2400      	movs	r4, #0
   204ee:	e7df      	b.n	204b0 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   204f0:	f387 8811 	msr	BASEPRI, r7
   204f4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   204f8:	4620      	mov	r0, r4
   204fa:	b003      	add	sp, #12
   204fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204fe:	bf00      	nop
   20500:	000305be 	.word	0x000305be
   20504:	0002b339 	.word	0x0002b339
   20508:	000304e8 	.word	0x000304e8
   2050c:	20021498 	.word	0x20021498
   20510:	0002c034 	.word	0x0002c034
   20514:	0002c08d 	.word	0x0002c08d
   20518:	0002c0a2 	.word	0x0002c0a2
   2051c:	0002c061 	.word	0x0002c061
   20520:	0002c078 	.word	0x0002c078
   20524:	0001ff89 	.word	0x0001ff89

00020528 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   20528:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2052a:	4801      	ldr	r0, [pc, #4]	; (20530 <k_work_schedule+0x8>)
   2052c:	f7ff bf86 	b.w	2043c <k_work_schedule_for_queue>
   20530:	20009c78 	.word	0x20009c78

00020534 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   20534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20536:	4616      	mov	r6, r2
   20538:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2053a:	460c      	mov	r4, r1
{
   2053c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2053e:	b959      	cbnz	r1, 20558 <k_work_reschedule_for_queue+0x24>
   20540:	492c      	ldr	r1, [pc, #176]	; (205f4 <k_work_reschedule_for_queue+0xc0>)
   20542:	482d      	ldr	r0, [pc, #180]	; (205f8 <k_work_reschedule_for_queue+0xc4>)
   20544:	f240 33db 	movw	r3, #987	; 0x3db
   20548:	4a2c      	ldr	r2, [pc, #176]	; (205fc <k_work_reschedule_for_queue+0xc8>)
   2054a:	f004 fa2c 	bl	249a6 <assert_print>
   2054e:	f240 31db 	movw	r1, #987	; 0x3db
   20552:	482a      	ldr	r0, [pc, #168]	; (205fc <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20554:	f004 fa20 	bl	24998 <assert_post_action>
	__asm__ volatile(
   20558:	f04f 0320 	mov.w	r3, #32
   2055c:	f3ef 8711 	mrs	r7, BASEPRI
   20560:	f383 8812 	msr	BASEPRI_MAX, r3
   20564:	f3bf 8f6f 	isb	sy
   20568:	4825      	ldr	r0, [pc, #148]	; (20600 <k_work_reschedule_for_queue+0xcc>)
   2056a:	f7fe ffff 	bl	1f56c <z_spin_lock_valid>
   2056e:	b960      	cbnz	r0, 2058a <k_work_reschedule_for_queue+0x56>
   20570:	2394      	movs	r3, #148	; 0x94
   20572:	4a24      	ldr	r2, [pc, #144]	; (20604 <k_work_reschedule_for_queue+0xd0>)
   20574:	4924      	ldr	r1, [pc, #144]	; (20608 <k_work_reschedule_for_queue+0xd4>)
   20576:	4820      	ldr	r0, [pc, #128]	; (205f8 <k_work_reschedule_for_queue+0xc4>)
   20578:	f004 fa15 	bl	249a6 <assert_print>
   2057c:	4920      	ldr	r1, [pc, #128]	; (20600 <k_work_reschedule_for_queue+0xcc>)
   2057e:	4823      	ldr	r0, [pc, #140]	; (2060c <k_work_reschedule_for_queue+0xd8>)
   20580:	f004 fa11 	bl	249a6 <assert_print>
   20584:	2194      	movs	r1, #148	; 0x94
   20586:	481f      	ldr	r0, [pc, #124]	; (20604 <k_work_reschedule_for_queue+0xd0>)
   20588:	e7e4      	b.n	20554 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   2058a:	481d      	ldr	r0, [pc, #116]	; (20600 <k_work_reschedule_for_queue+0xcc>)
   2058c:	f7ff f80a 	bl	1f5a4 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   20590:	4620      	mov	r0, r4
   20592:	f008 fdd5 	bl	29140 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20596:	ea55 0306 	orrs.w	r3, r5, r6
   2059a:	d114      	bne.n	205c6 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   2059c:	4620      	mov	r0, r4
   2059e:	a901      	add	r1, sp, #4
   205a0:	f7ff fc86 	bl	1feb0 <submit_to_queue_locked>
   205a4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   205a6:	4816      	ldr	r0, [pc, #88]	; (20600 <k_work_reschedule_for_queue+0xcc>)
   205a8:	f7fe ffee 	bl	1f588 <z_spin_unlock_valid>
   205ac:	b9d0      	cbnz	r0, 205e4 <k_work_reschedule_for_queue+0xb0>
   205ae:	23c2      	movs	r3, #194	; 0xc2
   205b0:	4a14      	ldr	r2, [pc, #80]	; (20604 <k_work_reschedule_for_queue+0xd0>)
   205b2:	4917      	ldr	r1, [pc, #92]	; (20610 <k_work_reschedule_for_queue+0xdc>)
   205b4:	4810      	ldr	r0, [pc, #64]	; (205f8 <k_work_reschedule_for_queue+0xc4>)
   205b6:	f004 f9f6 	bl	249a6 <assert_print>
   205ba:	4911      	ldr	r1, [pc, #68]	; (20600 <k_work_reschedule_for_queue+0xcc>)
   205bc:	4815      	ldr	r0, [pc, #84]	; (20614 <k_work_reschedule_for_queue+0xe0>)
   205be:	f004 f9f2 	bl	249a6 <assert_print>
   205c2:	21c2      	movs	r1, #194	; 0xc2
   205c4:	e7df      	b.n	20586 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   205c6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   205c8:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   205cc:	f043 0308 	orr.w	r3, r3, #8
   205d0:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   205d2:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   205d4:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   205d6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   205d8:	490f      	ldr	r1, [pc, #60]	; (20618 <k_work_reschedule_for_queue+0xe4>)
   205da:	462b      	mov	r3, r5
   205dc:	f001 fb4c 	bl	21c78 <z_add_timeout>
	return ret;
   205e0:	2401      	movs	r4, #1
   205e2:	e7e0      	b.n	205a6 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   205e4:	f387 8811 	msr	BASEPRI, r7
   205e8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   205ec:	4620      	mov	r0, r4
   205ee:	b003      	add	sp, #12
   205f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   205f2:	bf00      	nop
   205f4:	000305be 	.word	0x000305be
   205f8:	0002b339 	.word	0x0002b339
   205fc:	000304e8 	.word	0x000304e8
   20600:	20021498 	.word	0x20021498
   20604:	0002c034 	.word	0x0002c034
   20608:	0002c08d 	.word	0x0002c08d
   2060c:	0002c0a2 	.word	0x0002c0a2
   20610:	0002c061 	.word	0x0002c061
   20614:	0002c078 	.word	0x0002c078
   20618:	0001ff89 	.word	0x0001ff89

0002061c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2061c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2061e:	4801      	ldr	r0, [pc, #4]	; (20624 <k_work_reschedule+0x8>)
   20620:	f7ff bf88 	b.w	20534 <k_work_reschedule_for_queue>
   20624:	20009c78 	.word	0x20009c78

00020628 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   20628:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2062a:	4604      	mov	r4, r0
   2062c:	b958      	cbnz	r0, 20646 <k_work_cancel_delayable+0x1e>
   2062e:	4922      	ldr	r1, [pc, #136]	; (206b8 <k_work_cancel_delayable+0x90>)
   20630:	4822      	ldr	r0, [pc, #136]	; (206bc <k_work_cancel_delayable+0x94>)
   20632:	f240 33fd 	movw	r3, #1021	; 0x3fd
   20636:	4a22      	ldr	r2, [pc, #136]	; (206c0 <k_work_cancel_delayable+0x98>)
   20638:	f004 f9b5 	bl	249a6 <assert_print>
   2063c:	f240 31fd 	movw	r1, #1021	; 0x3fd
   20640:	481f      	ldr	r0, [pc, #124]	; (206c0 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20642:	f004 f9a9 	bl	24998 <assert_post_action>
	__asm__ volatile(
   20646:	f04f 0320 	mov.w	r3, #32
   2064a:	f3ef 8511 	mrs	r5, BASEPRI
   2064e:	f383 8812 	msr	BASEPRI_MAX, r3
   20652:	f3bf 8f6f 	isb	sy
   20656:	481b      	ldr	r0, [pc, #108]	; (206c4 <k_work_cancel_delayable+0x9c>)
   20658:	f7fe ff88 	bl	1f56c <z_spin_lock_valid>
   2065c:	b960      	cbnz	r0, 20678 <k_work_cancel_delayable+0x50>
   2065e:	2394      	movs	r3, #148	; 0x94
   20660:	4a19      	ldr	r2, [pc, #100]	; (206c8 <k_work_cancel_delayable+0xa0>)
   20662:	491a      	ldr	r1, [pc, #104]	; (206cc <k_work_cancel_delayable+0xa4>)
   20664:	4815      	ldr	r0, [pc, #84]	; (206bc <k_work_cancel_delayable+0x94>)
   20666:	f004 f99e 	bl	249a6 <assert_print>
   2066a:	4916      	ldr	r1, [pc, #88]	; (206c4 <k_work_cancel_delayable+0x9c>)
   2066c:	4818      	ldr	r0, [pc, #96]	; (206d0 <k_work_cancel_delayable+0xa8>)
   2066e:	f004 f99a 	bl	249a6 <assert_print>
   20672:	2194      	movs	r1, #148	; 0x94
   20674:	4814      	ldr	r0, [pc, #80]	; (206c8 <k_work_cancel_delayable+0xa0>)
   20676:	e7e4      	b.n	20642 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   20678:	4812      	ldr	r0, [pc, #72]	; (206c4 <k_work_cancel_delayable+0x9c>)
   2067a:	f7fe ff93 	bl	1f5a4 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   2067e:	4620      	mov	r0, r4
   20680:	f008 fd5e 	bl	29140 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   20684:	4620      	mov	r0, r4
   20686:	f008 fd70 	bl	2916a <cancel_async_locked>
   2068a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2068c:	480d      	ldr	r0, [pc, #52]	; (206c4 <k_work_cancel_delayable+0x9c>)
   2068e:	f7fe ff7b 	bl	1f588 <z_spin_unlock_valid>
   20692:	b958      	cbnz	r0, 206ac <k_work_cancel_delayable+0x84>
   20694:	23c2      	movs	r3, #194	; 0xc2
   20696:	4a0c      	ldr	r2, [pc, #48]	; (206c8 <k_work_cancel_delayable+0xa0>)
   20698:	490e      	ldr	r1, [pc, #56]	; (206d4 <k_work_cancel_delayable+0xac>)
   2069a:	4808      	ldr	r0, [pc, #32]	; (206bc <k_work_cancel_delayable+0x94>)
   2069c:	f004 f983 	bl	249a6 <assert_print>
   206a0:	4908      	ldr	r1, [pc, #32]	; (206c4 <k_work_cancel_delayable+0x9c>)
   206a2:	480d      	ldr	r0, [pc, #52]	; (206d8 <k_work_cancel_delayable+0xb0>)
   206a4:	f004 f97f 	bl	249a6 <assert_print>
   206a8:	21c2      	movs	r1, #194	; 0xc2
   206aa:	e7e3      	b.n	20674 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   206ac:	f385 8811 	msr	BASEPRI, r5
   206b0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   206b4:	4620      	mov	r0, r4
   206b6:	bd38      	pop	{r3, r4, r5, pc}
   206b8:	000305be 	.word	0x000305be
   206bc:	0002b339 	.word	0x0002b339
   206c0:	000304e8 	.word	0x000304e8
   206c4:	20021498 	.word	0x20021498
   206c8:	0002c034 	.word	0x0002c034
   206cc:	0002c08d 	.word	0x0002c08d
   206d0:	0002c0a2 	.word	0x0002c0a2
   206d4:	0002c061 	.word	0x0002c061
   206d8:	0002c078 	.word	0x0002c078

000206dc <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   206dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206e0:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   206e2:	4605      	mov	r5, r0
   206e4:	b958      	cbnz	r0, 206fe <k_work_cancel_delayable_sync+0x22>
   206e6:	493a      	ldr	r1, [pc, #232]	; (207d0 <k_work_cancel_delayable_sync+0xf4>)
   206e8:	f240 430e 	movw	r3, #1038	; 0x40e
   206ec:	4a39      	ldr	r2, [pc, #228]	; (207d4 <k_work_cancel_delayable_sync+0xf8>)
   206ee:	483a      	ldr	r0, [pc, #232]	; (207d8 <k_work_cancel_delayable_sync+0xfc>)
   206f0:	f004 f959 	bl	249a6 <assert_print>
   206f4:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   206f8:	4836      	ldr	r0, [pc, #216]	; (207d4 <k_work_cancel_delayable_sync+0xf8>)
   206fa:	f004 f94d 	bl	24998 <assert_post_action>
   206fe:	b949      	cbnz	r1, 20714 <k_work_cancel_delayable_sync+0x38>
   20700:	4936      	ldr	r1, [pc, #216]	; (207dc <k_work_cancel_delayable_sync+0x100>)
   20702:	f240 430f 	movw	r3, #1039	; 0x40f
   20706:	4a33      	ldr	r2, [pc, #204]	; (207d4 <k_work_cancel_delayable_sync+0xf8>)
   20708:	4833      	ldr	r0, [pc, #204]	; (207d8 <k_work_cancel_delayable_sync+0xfc>)
   2070a:	f004 f94c 	bl	249a6 <assert_print>
   2070e:	f240 410f 	movw	r1, #1039	; 0x40f
   20712:	e7f1      	b.n	206f8 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   20714:	f008 fca8 	bl	29068 <k_is_in_isr>
   20718:	4604      	mov	r4, r0
   2071a:	b148      	cbz	r0, 20730 <k_work_cancel_delayable_sync+0x54>
   2071c:	4930      	ldr	r1, [pc, #192]	; (207e0 <k_work_cancel_delayable_sync+0x104>)
   2071e:	f44f 6382 	mov.w	r3, #1040	; 0x410
   20722:	4a2c      	ldr	r2, [pc, #176]	; (207d4 <k_work_cancel_delayable_sync+0xf8>)
   20724:	482c      	ldr	r0, [pc, #176]	; (207d8 <k_work_cancel_delayable_sync+0xfc>)
   20726:	f004 f93e 	bl	249a6 <assert_print>
   2072a:	f44f 6182 	mov.w	r1, #1040	; 0x410
   2072e:	e7e3      	b.n	206f8 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   20730:	f04f 0320 	mov.w	r3, #32
   20734:	f3ef 8811 	mrs	r8, BASEPRI
   20738:	f383 8812 	msr	BASEPRI_MAX, r3
   2073c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20740:	4828      	ldr	r0, [pc, #160]	; (207e4 <k_work_cancel_delayable_sync+0x108>)
   20742:	f7fe ff13 	bl	1f56c <z_spin_lock_valid>
   20746:	b960      	cbnz	r0, 20762 <k_work_cancel_delayable_sync+0x86>
   20748:	2394      	movs	r3, #148	; 0x94
   2074a:	4a27      	ldr	r2, [pc, #156]	; (207e8 <k_work_cancel_delayable_sync+0x10c>)
   2074c:	4927      	ldr	r1, [pc, #156]	; (207ec <k_work_cancel_delayable_sync+0x110>)
   2074e:	4822      	ldr	r0, [pc, #136]	; (207d8 <k_work_cancel_delayable_sync+0xfc>)
   20750:	f004 f929 	bl	249a6 <assert_print>
   20754:	4923      	ldr	r1, [pc, #140]	; (207e4 <k_work_cancel_delayable_sync+0x108>)
   20756:	4826      	ldr	r0, [pc, #152]	; (207f0 <k_work_cancel_delayable_sync+0x114>)
   20758:	f004 f925 	bl	249a6 <assert_print>
   2075c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2075e:	4822      	ldr	r0, [pc, #136]	; (207e8 <k_work_cancel_delayable_sync+0x10c>)
   20760:	e7cb      	b.n	206fa <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   20762:	4820      	ldr	r0, [pc, #128]	; (207e4 <k_work_cancel_delayable_sync+0x108>)
   20764:	f7fe ff1e 	bl	1f5a4 <z_spin_lock_set_owner>
	return *flagp;
   20768:	68eb      	ldr	r3, [r5, #12]
   2076a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2076e:	2b00      	cmp	r3, #0
   20770:	bf14      	ite	ne
   20772:	2701      	movne	r7, #1
   20774:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   20776:	d00a      	beq.n	2078e <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   20778:	4628      	mov	r0, r5
   2077a:	f008 fce1 	bl	29140 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2077e:	4628      	mov	r0, r5
   20780:	f008 fcf3 	bl	2916a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   20784:	4631      	mov	r1, r6
   20786:	4628      	mov	r0, r5
   20788:	f7ff fb74 	bl	1fe74 <cancel_sync_locked>
   2078c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2078e:	4815      	ldr	r0, [pc, #84]	; (207e4 <k_work_cancel_delayable_sync+0x108>)
   20790:	f7fe fefa 	bl	1f588 <z_spin_unlock_valid>
   20794:	b958      	cbnz	r0, 207ae <k_work_cancel_delayable_sync+0xd2>
   20796:	23c2      	movs	r3, #194	; 0xc2
   20798:	4a13      	ldr	r2, [pc, #76]	; (207e8 <k_work_cancel_delayable_sync+0x10c>)
   2079a:	4916      	ldr	r1, [pc, #88]	; (207f4 <k_work_cancel_delayable_sync+0x118>)
   2079c:	480e      	ldr	r0, [pc, #56]	; (207d8 <k_work_cancel_delayable_sync+0xfc>)
   2079e:	f004 f902 	bl	249a6 <assert_print>
   207a2:	4910      	ldr	r1, [pc, #64]	; (207e4 <k_work_cancel_delayable_sync+0x108>)
   207a4:	4814      	ldr	r0, [pc, #80]	; (207f8 <k_work_cancel_delayable_sync+0x11c>)
   207a6:	f004 f8fe 	bl	249a6 <assert_print>
   207aa:	21c2      	movs	r1, #194	; 0xc2
   207ac:	e7d7      	b.n	2075e <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   207ae:	f388 8811 	msr	BASEPRI, r8
   207b2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   207b6:	b13c      	cbz	r4, 207c8 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   207b8:	f04f 32ff 	mov.w	r2, #4294967295
   207bc:	f04f 33ff 	mov.w	r3, #4294967295
   207c0:	f106 0008 	add.w	r0, r6, #8
   207c4:	f7ff f9ce 	bl	1fb64 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   207c8:	4638      	mov	r0, r7
   207ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   207ce:	bf00      	nop
   207d0:	000305be 	.word	0x000305be
   207d4:	000304e8 	.word	0x000304e8
   207d8:	0002b339 	.word	0x0002b339
   207dc:	0003056a 	.word	0x0003056a
   207e0:	0002e0e6 	.word	0x0002e0e6
   207e4:	20021498 	.word	0x20021498
   207e8:	0002c034 	.word	0x0002c034
   207ec:	0002c08d 	.word	0x0002c08d
   207f0:	0002c0a2 	.word	0x0002c0a2
   207f4:	0002c061 	.word	0x0002c061
   207f8:	0002c078 	.word	0x0002c078

000207fc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   207fc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   207fe:	4d07      	ldr	r5, [pc, #28]	; (2081c <z_reset_time_slice+0x20>)
   20800:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   20802:	b154      	cbz	r4, 2081a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   20804:	f7fb fc90 	bl	1c128 <sys_clock_elapsed>
   20808:	4b05      	ldr	r3, [pc, #20]	; (20820 <z_reset_time_slice+0x24>)
   2080a:	4404      	add	r4, r0
   2080c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   2080e:	6828      	ldr	r0, [r5, #0]
   20810:	2100      	movs	r1, #0
	}
}
   20812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   20816:	f001 bb87 	b.w	21f28 <z_set_timeout_expiry>
}
   2081a:	bd38      	pop	{r3, r4, r5, pc}
   2081c:	200214a4 	.word	0x200214a4
   20820:	20021460 	.word	0x20021460

00020824 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   20824:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   20826:	4d14      	ldr	r5, [pc, #80]	; (20878 <update_cache+0x54>)
   20828:	462b      	mov	r3, r5
   2082a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2082e:	429c      	cmp	r4, r3
   20830:	d000      	beq.n	20834 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   20832:	b904      	cbnz	r4, 20836 <update_cache+0x12>
   20834:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   20836:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   20838:	b9a8      	cbnz	r0, 20866 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   2083a:	b963      	cbnz	r3, 20856 <update_cache+0x32>
   2083c:	490f      	ldr	r1, [pc, #60]	; (2087c <update_cache+0x58>)
   2083e:	2389      	movs	r3, #137	; 0x89
   20840:	4a0f      	ldr	r2, [pc, #60]	; (20880 <update_cache+0x5c>)
   20842:	4810      	ldr	r0, [pc, #64]	; (20884 <update_cache+0x60>)
   20844:	f004 f8af 	bl	249a6 <assert_print>
   20848:	480f      	ldr	r0, [pc, #60]	; (20888 <update_cache+0x64>)
   2084a:	f004 f8ac 	bl	249a6 <assert_print>
   2084e:	2189      	movs	r1, #137	; 0x89
   20850:	480b      	ldr	r0, [pc, #44]	; (20880 <update_cache+0x5c>)
   20852:	f004 f8a1 	bl	24998 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   20856:	7b5a      	ldrb	r2, [r3, #13]
   20858:	06d2      	lsls	r2, r2, #27
   2085a:	d104      	bne.n	20866 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2085c:	69a2      	ldr	r2, [r4, #24]
   2085e:	b912      	cbnz	r2, 20866 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   20860:	89da      	ldrh	r2, [r3, #14]
   20862:	2a7f      	cmp	r2, #127	; 0x7f
   20864:	d805      	bhi.n	20872 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   20866:	429c      	cmp	r4, r3
   20868:	d002      	beq.n	20870 <update_cache+0x4c>
			z_reset_time_slice(thread);
   2086a:	4620      	mov	r0, r4
   2086c:	f7ff ffc6 	bl	207fc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   20870:	4623      	mov	r3, r4
   20872:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   20874:	bd38      	pop	{r3, r4, r5, pc}
   20876:	bf00      	nop
   20878:	20021460 	.word	0x20021460
   2087c:	000305f5 	.word	0x000305f5
   20880:	000305d3 	.word	0x000305d3
   20884:	0002b339 	.word	0x0002b339
   20888:	0002ee3a 	.word	0x0002ee3a

0002088c <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   2088c:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2088e:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   20892:	7b42      	ldrb	r2, [r0, #13]
   20894:	2b00      	cmp	r3, #0
   20896:	db38      	blt.n	2090a <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20898:	06d3      	lsls	r3, r2, #27
   2089a:	d136      	bne.n	2090a <ready_thread+0x7e>
	return node->next != NULL;
   2089c:	6983      	ldr	r3, [r0, #24]
   2089e:	2b00      	cmp	r3, #0
   208a0:	d133      	bne.n	2090a <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   208a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   208a6:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   208a8:	4a18      	ldr	r2, [pc, #96]	; (2090c <ready_thread+0x80>)
   208aa:	4290      	cmp	r0, r2
   208ac:	d109      	bne.n	208c2 <ready_thread+0x36>
   208ae:	4918      	ldr	r1, [pc, #96]	; (20910 <ready_thread+0x84>)
   208b0:	4818      	ldr	r0, [pc, #96]	; (20914 <ready_thread+0x88>)
   208b2:	23ba      	movs	r3, #186	; 0xba
   208b4:	4a18      	ldr	r2, [pc, #96]	; (20918 <ready_thread+0x8c>)
   208b6:	f004 f876 	bl	249a6 <assert_print>
   208ba:	21ba      	movs	r1, #186	; 0xba
   208bc:	4816      	ldr	r0, [pc, #88]	; (20918 <ready_thread+0x8c>)
   208be:	f004 f86b 	bl	24998 <assert_post_action>
	return list->head == list;
   208c2:	4916      	ldr	r1, [pc, #88]	; (2091c <ready_thread+0x90>)
   208c4:	460a      	mov	r2, r1
   208c6:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   208ca:	4294      	cmp	r4, r2
   208cc:	bf18      	it	ne
   208ce:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   208d0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   208d2:	b923      	cbnz	r3, 208de <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   208d4:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   208d8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   208da:	6248      	str	r0, [r1, #36]	; 0x24
}
   208dc:	e00c      	b.n	208f8 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   208de:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   208e2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   208e6:	42b5      	cmp	r5, r6
   208e8:	d00b      	beq.n	20902 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   208ea:	42ae      	cmp	r6, r5
   208ec:	dd09      	ble.n	20902 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   208ee:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   208f0:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   208f4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   208f6:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   208f8:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   208fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   208fe:	f7ff bf91 	b.w	20824 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   20902:	42a3      	cmp	r3, r4
   20904:	d0e6      	beq.n	208d4 <ready_thread+0x48>
   20906:	681b      	ldr	r3, [r3, #0]
   20908:	e7e3      	b.n	208d2 <ready_thread+0x46>
}
   2090a:	bd70      	pop	{r4, r5, r6, pc}
   2090c:	20009b68 	.word	0x20009b68
   20910:	0003061c 	.word	0x0003061c
   20914:	0002b339 	.word	0x0002b339
   20918:	000305d3 	.word	0x000305d3
   2091c:	20021460 	.word	0x20021460

00020920 <k_sched_time_slice_set>:
{
   20920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20922:	4604      	mov	r4, r0
   20924:	460d      	mov	r5, r1
	__asm__ volatile(
   20926:	f04f 0320 	mov.w	r3, #32
   2092a:	f3ef 8711 	mrs	r7, BASEPRI
   2092e:	f383 8812 	msr	BASEPRI_MAX, r3
   20932:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20936:	4822      	ldr	r0, [pc, #136]	; (209c0 <k_sched_time_slice_set+0xa0>)
   20938:	f7fe fe18 	bl	1f56c <z_spin_lock_valid>
   2093c:	b968      	cbnz	r0, 2095a <k_sched_time_slice_set+0x3a>
   2093e:	2394      	movs	r3, #148	; 0x94
   20940:	4a20      	ldr	r2, [pc, #128]	; (209c4 <k_sched_time_slice_set+0xa4>)
   20942:	4921      	ldr	r1, [pc, #132]	; (209c8 <k_sched_time_slice_set+0xa8>)
   20944:	4821      	ldr	r0, [pc, #132]	; (209cc <k_sched_time_slice_set+0xac>)
   20946:	f004 f82e 	bl	249a6 <assert_print>
   2094a:	491d      	ldr	r1, [pc, #116]	; (209c0 <k_sched_time_slice_set+0xa0>)
   2094c:	4820      	ldr	r0, [pc, #128]	; (209d0 <k_sched_time_slice_set+0xb0>)
   2094e:	f004 f82a 	bl	249a6 <assert_print>
   20952:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20954:	481b      	ldr	r0, [pc, #108]	; (209c4 <k_sched_time_slice_set+0xa4>)
   20956:	f004 f81f 	bl	24998 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2095a:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   2095c:	4818      	ldr	r0, [pc, #96]	; (209c0 <k_sched_time_slice_set+0xa0>)
   2095e:	f7fe fe21 	bl	1f5a4 <z_spin_lock_set_owner>
   20962:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   20966:	f240 30e7 	movw	r0, #999	; 0x3e7
   2096a:	4631      	mov	r1, r6
   2096c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20970:	2300      	movs	r3, #0
   20972:	fbe4 010c 	umlal	r0, r1, r4, ip
   20976:	f7e8 fabb 	bl	8ef0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2097a:	42b4      	cmp	r4, r6
   2097c:	dd02      	ble.n	20984 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   2097e:	2802      	cmp	r0, #2
   20980:	bfb8      	it	lt
   20982:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   20984:	4a13      	ldr	r2, [pc, #76]	; (209d4 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   20986:	4b14      	ldr	r3, [pc, #80]	; (209d8 <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   20988:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   2098a:	4a14      	ldr	r2, [pc, #80]	; (209dc <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   2098c:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   2098e:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   20990:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   20992:	f7ff ff33 	bl	207fc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20996:	480a      	ldr	r0, [pc, #40]	; (209c0 <k_sched_time_slice_set+0xa0>)
   20998:	f7fe fdf6 	bl	1f588 <z_spin_unlock_valid>
   2099c:	b958      	cbnz	r0, 209b6 <k_sched_time_slice_set+0x96>
   2099e:	23c2      	movs	r3, #194	; 0xc2
   209a0:	4a08      	ldr	r2, [pc, #32]	; (209c4 <k_sched_time_slice_set+0xa4>)
   209a2:	490f      	ldr	r1, [pc, #60]	; (209e0 <k_sched_time_slice_set+0xc0>)
   209a4:	4809      	ldr	r0, [pc, #36]	; (209cc <k_sched_time_slice_set+0xac>)
   209a6:	f003 fffe 	bl	249a6 <assert_print>
   209aa:	4905      	ldr	r1, [pc, #20]	; (209c0 <k_sched_time_slice_set+0xa0>)
   209ac:	480d      	ldr	r0, [pc, #52]	; (209e4 <k_sched_time_slice_set+0xc4>)
   209ae:	f003 fffa 	bl	249a6 <assert_print>
   209b2:	21c2      	movs	r1, #194	; 0xc2
   209b4:	e7ce      	b.n	20954 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   209b6:	f387 8811 	msr	BASEPRI, r7
   209ba:	f3bf 8f6f 	isb	sy
}
   209be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   209c0:	200214a8 	.word	0x200214a8
   209c4:	0002c034 	.word	0x0002c034
   209c8:	0002c08d 	.word	0x0002c08d
   209cc:	0002b339 	.word	0x0002b339
   209d0:	0002c0a2 	.word	0x0002c0a2
   209d4:	200214a4 	.word	0x200214a4
   209d8:	20021460 	.word	0x20021460
   209dc:	200214a0 	.word	0x200214a0
   209e0:	0002c061 	.word	0x0002c061
   209e4:	0002c078 	.word	0x0002c078

000209e8 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   209e8:	b538      	push	{r3, r4, r5, lr}
   209ea:	4604      	mov	r4, r0
	__asm__ volatile(
   209ec:	f04f 0320 	mov.w	r3, #32
   209f0:	f3ef 8511 	mrs	r5, BASEPRI
   209f4:	f383 8812 	msr	BASEPRI_MAX, r3
   209f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   209fc:	4816      	ldr	r0, [pc, #88]	; (20a58 <z_ready_thread+0x70>)
   209fe:	f7fe fdb5 	bl	1f56c <z_spin_lock_valid>
   20a02:	b968      	cbnz	r0, 20a20 <z_ready_thread+0x38>
   20a04:	2394      	movs	r3, #148	; 0x94
   20a06:	4a15      	ldr	r2, [pc, #84]	; (20a5c <z_ready_thread+0x74>)
   20a08:	4915      	ldr	r1, [pc, #84]	; (20a60 <z_ready_thread+0x78>)
   20a0a:	4816      	ldr	r0, [pc, #88]	; (20a64 <z_ready_thread+0x7c>)
   20a0c:	f003 ffcb 	bl	249a6 <assert_print>
   20a10:	4911      	ldr	r1, [pc, #68]	; (20a58 <z_ready_thread+0x70>)
   20a12:	4815      	ldr	r0, [pc, #84]	; (20a68 <z_ready_thread+0x80>)
   20a14:	f003 ffc7 	bl	249a6 <assert_print>
   20a18:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a1a:	4810      	ldr	r0, [pc, #64]	; (20a5c <z_ready_thread+0x74>)
   20a1c:	f003 ffbc 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   20a20:	480d      	ldr	r0, [pc, #52]	; (20a58 <z_ready_thread+0x70>)
   20a22:	f7fe fdbf 	bl	1f5a4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   20a26:	4620      	mov	r0, r4
   20a28:	f7ff ff30 	bl	2088c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a2c:	480a      	ldr	r0, [pc, #40]	; (20a58 <z_ready_thread+0x70>)
   20a2e:	f7fe fdab 	bl	1f588 <z_spin_unlock_valid>
   20a32:	b958      	cbnz	r0, 20a4c <z_ready_thread+0x64>
   20a34:	23c2      	movs	r3, #194	; 0xc2
   20a36:	4a09      	ldr	r2, [pc, #36]	; (20a5c <z_ready_thread+0x74>)
   20a38:	490c      	ldr	r1, [pc, #48]	; (20a6c <z_ready_thread+0x84>)
   20a3a:	480a      	ldr	r0, [pc, #40]	; (20a64 <z_ready_thread+0x7c>)
   20a3c:	f003 ffb3 	bl	249a6 <assert_print>
   20a40:	4905      	ldr	r1, [pc, #20]	; (20a58 <z_ready_thread+0x70>)
   20a42:	480b      	ldr	r0, [pc, #44]	; (20a70 <z_ready_thread+0x88>)
   20a44:	f003 ffaf 	bl	249a6 <assert_print>
   20a48:	21c2      	movs	r1, #194	; 0xc2
   20a4a:	e7e6      	b.n	20a1a <z_ready_thread+0x32>
	__asm__ volatile(
   20a4c:	f385 8811 	msr	BASEPRI, r5
   20a50:	f3bf 8f6f 	isb	sy
		}
	}
}
   20a54:	bd38      	pop	{r3, r4, r5, pc}
   20a56:	bf00      	nop
   20a58:	200214a8 	.word	0x200214a8
   20a5c:	0002c034 	.word	0x0002c034
   20a60:	0002c08d 	.word	0x0002c08d
   20a64:	0002b339 	.word	0x0002b339
   20a68:	0002c0a2 	.word	0x0002c0a2
   20a6c:	0002c061 	.word	0x0002c061
   20a70:	0002c078 	.word	0x0002c078

00020a74 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   20a74:	b538      	push	{r3, r4, r5, lr}
   20a76:	4604      	mov	r4, r0
	__asm__ volatile(
   20a78:	f04f 0320 	mov.w	r3, #32
   20a7c:	f3ef 8511 	mrs	r5, BASEPRI
   20a80:	f383 8812 	msr	BASEPRI_MAX, r3
   20a84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a88:	4816      	ldr	r0, [pc, #88]	; (20ae4 <z_unpend_thread_no_timeout+0x70>)
   20a8a:	f7fe fd6f 	bl	1f56c <z_spin_lock_valid>
   20a8e:	b968      	cbnz	r0, 20aac <z_unpend_thread_no_timeout+0x38>
   20a90:	2394      	movs	r3, #148	; 0x94
   20a92:	4a15      	ldr	r2, [pc, #84]	; (20ae8 <z_unpend_thread_no_timeout+0x74>)
   20a94:	4915      	ldr	r1, [pc, #84]	; (20aec <z_unpend_thread_no_timeout+0x78>)
   20a96:	4816      	ldr	r0, [pc, #88]	; (20af0 <z_unpend_thread_no_timeout+0x7c>)
   20a98:	f003 ff85 	bl	249a6 <assert_print>
   20a9c:	4911      	ldr	r1, [pc, #68]	; (20ae4 <z_unpend_thread_no_timeout+0x70>)
   20a9e:	4815      	ldr	r0, [pc, #84]	; (20af4 <z_unpend_thread_no_timeout+0x80>)
   20aa0:	f003 ff81 	bl	249a6 <assert_print>
   20aa4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20aa6:	4810      	ldr	r0, [pc, #64]	; (20ae8 <z_unpend_thread_no_timeout+0x74>)
   20aa8:	f003 ff76 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   20aac:	480d      	ldr	r0, [pc, #52]	; (20ae4 <z_unpend_thread_no_timeout+0x70>)
   20aae:	f7fe fd79 	bl	1f5a4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   20ab2:	4620      	mov	r0, r4
   20ab4:	f000 fc62 	bl	2137c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ab8:	480a      	ldr	r0, [pc, #40]	; (20ae4 <z_unpend_thread_no_timeout+0x70>)
   20aba:	f7fe fd65 	bl	1f588 <z_spin_unlock_valid>
   20abe:	b958      	cbnz	r0, 20ad8 <z_unpend_thread_no_timeout+0x64>
   20ac0:	23c2      	movs	r3, #194	; 0xc2
   20ac2:	4a09      	ldr	r2, [pc, #36]	; (20ae8 <z_unpend_thread_no_timeout+0x74>)
   20ac4:	490c      	ldr	r1, [pc, #48]	; (20af8 <z_unpend_thread_no_timeout+0x84>)
   20ac6:	480a      	ldr	r0, [pc, #40]	; (20af0 <z_unpend_thread_no_timeout+0x7c>)
   20ac8:	f003 ff6d 	bl	249a6 <assert_print>
   20acc:	4905      	ldr	r1, [pc, #20]	; (20ae4 <z_unpend_thread_no_timeout+0x70>)
   20ace:	480b      	ldr	r0, [pc, #44]	; (20afc <z_unpend_thread_no_timeout+0x88>)
   20ad0:	f003 ff69 	bl	249a6 <assert_print>
   20ad4:	21c2      	movs	r1, #194	; 0xc2
   20ad6:	e7e6      	b.n	20aa6 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   20ad8:	f385 8811 	msr	BASEPRI, r5
   20adc:	f3bf 8f6f 	isb	sy
	}
}
   20ae0:	bd38      	pop	{r3, r4, r5, pc}
   20ae2:	bf00      	nop
   20ae4:	200214a8 	.word	0x200214a8
   20ae8:	0002c034 	.word	0x0002c034
   20aec:	0002c08d 	.word	0x0002c08d
   20af0:	0002b339 	.word	0x0002b339
   20af4:	0002c0a2 	.word	0x0002c0a2
   20af8:	0002c061 	.word	0x0002c061
   20afc:	0002c078 	.word	0x0002c078

00020b00 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   20b00:	b570      	push	{r4, r5, r6, lr}
   20b02:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20b04:	460d      	mov	r5, r1
   20b06:	b9e9      	cbnz	r1, 20b44 <z_reschedule+0x44>
   20b08:	f3ef 8605 	mrs	r6, IPSR
   20b0c:	b9d6      	cbnz	r6, 20b44 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   20b0e:	4b18      	ldr	r3, [pc, #96]	; (20b70 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   20b10:	69da      	ldr	r2, [r3, #28]
   20b12:	689b      	ldr	r3, [r3, #8]
   20b14:	429a      	cmp	r2, r3
   20b16:	d015      	beq.n	20b44 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b18:	f7fe fd36 	bl	1f588 <z_spin_unlock_valid>
   20b1c:	b968      	cbnz	r0, 20b3a <z_reschedule+0x3a>
   20b1e:	23e1      	movs	r3, #225	; 0xe1
   20b20:	4a14      	ldr	r2, [pc, #80]	; (20b74 <z_reschedule+0x74>)
   20b22:	4915      	ldr	r1, [pc, #84]	; (20b78 <z_reschedule+0x78>)
   20b24:	4815      	ldr	r0, [pc, #84]	; (20b7c <z_reschedule+0x7c>)
   20b26:	f003 ff3e 	bl	249a6 <assert_print>
   20b2a:	4621      	mov	r1, r4
   20b2c:	4814      	ldr	r0, [pc, #80]	; (20b80 <z_reschedule+0x80>)
   20b2e:	f003 ff3a 	bl	249a6 <assert_print>
   20b32:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b34:	480f      	ldr	r0, [pc, #60]	; (20b74 <z_reschedule+0x74>)
   20b36:	f003 ff2f 	bl	24998 <assert_post_action>
	ret = arch_swap(key);
   20b3a:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   20b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20b40:	f7ef b9c6 	b.w	fed0 <arch_swap>
   20b44:	4620      	mov	r0, r4
   20b46:	f7fe fd1f 	bl	1f588 <z_spin_unlock_valid>
   20b4a:	b958      	cbnz	r0, 20b64 <z_reschedule+0x64>
   20b4c:	23c2      	movs	r3, #194	; 0xc2
   20b4e:	4a09      	ldr	r2, [pc, #36]	; (20b74 <z_reschedule+0x74>)
   20b50:	4909      	ldr	r1, [pc, #36]	; (20b78 <z_reschedule+0x78>)
   20b52:	480a      	ldr	r0, [pc, #40]	; (20b7c <z_reschedule+0x7c>)
   20b54:	f003 ff27 	bl	249a6 <assert_print>
   20b58:	4621      	mov	r1, r4
   20b5a:	4809      	ldr	r0, [pc, #36]	; (20b80 <z_reschedule+0x80>)
   20b5c:	f003 ff23 	bl	249a6 <assert_print>
   20b60:	21c2      	movs	r1, #194	; 0xc2
   20b62:	e7e7      	b.n	20b34 <z_reschedule+0x34>
   20b64:	f385 8811 	msr	BASEPRI, r5
   20b68:	f3bf 8f6f 	isb	sy
   20b6c:	bd70      	pop	{r4, r5, r6, pc}
   20b6e:	bf00      	nop
   20b70:	20021460 	.word	0x20021460
   20b74:	0002c034 	.word	0x0002c034
   20b78:	0002c061 	.word	0x0002c061
   20b7c:	0002b339 	.word	0x0002b339
   20b80:	0002c078 	.word	0x0002c078

00020b84 <z_sched_start>:
{
   20b84:	b538      	push	{r3, r4, r5, lr}
   20b86:	4604      	mov	r4, r0
	__asm__ volatile(
   20b88:	f04f 0320 	mov.w	r3, #32
   20b8c:	f3ef 8511 	mrs	r5, BASEPRI
   20b90:	f383 8812 	msr	BASEPRI_MAX, r3
   20b94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b98:	481c      	ldr	r0, [pc, #112]	; (20c0c <z_sched_start+0x88>)
   20b9a:	f7fe fce7 	bl	1f56c <z_spin_lock_valid>
   20b9e:	b968      	cbnz	r0, 20bbc <z_sched_start+0x38>
   20ba0:	2394      	movs	r3, #148	; 0x94
   20ba2:	4a1b      	ldr	r2, [pc, #108]	; (20c10 <z_sched_start+0x8c>)
   20ba4:	491b      	ldr	r1, [pc, #108]	; (20c14 <z_sched_start+0x90>)
   20ba6:	481c      	ldr	r0, [pc, #112]	; (20c18 <z_sched_start+0x94>)
   20ba8:	f003 fefd 	bl	249a6 <assert_print>
   20bac:	4917      	ldr	r1, [pc, #92]	; (20c0c <z_sched_start+0x88>)
   20bae:	481b      	ldr	r0, [pc, #108]	; (20c1c <z_sched_start+0x98>)
   20bb0:	f003 fef9 	bl	249a6 <assert_print>
   20bb4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bb6:	4816      	ldr	r0, [pc, #88]	; (20c10 <z_sched_start+0x8c>)
   20bb8:	f003 feee 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   20bbc:	4813      	ldr	r0, [pc, #76]	; (20c0c <z_sched_start+0x88>)
   20bbe:	f7fe fcf1 	bl	1f5a4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   20bc2:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   20bc4:	075a      	lsls	r2, r3, #29
   20bc6:	d414      	bmi.n	20bf2 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bc8:	4810      	ldr	r0, [pc, #64]	; (20c0c <z_sched_start+0x88>)
   20bca:	f7fe fcdd 	bl	1f588 <z_spin_unlock_valid>
   20bce:	b958      	cbnz	r0, 20be8 <z_sched_start+0x64>
   20bd0:	23c2      	movs	r3, #194	; 0xc2
   20bd2:	4a0f      	ldr	r2, [pc, #60]	; (20c10 <z_sched_start+0x8c>)
   20bd4:	4912      	ldr	r1, [pc, #72]	; (20c20 <z_sched_start+0x9c>)
   20bd6:	4810      	ldr	r0, [pc, #64]	; (20c18 <z_sched_start+0x94>)
   20bd8:	f003 fee5 	bl	249a6 <assert_print>
   20bdc:	490b      	ldr	r1, [pc, #44]	; (20c0c <z_sched_start+0x88>)
   20bde:	4811      	ldr	r0, [pc, #68]	; (20c24 <z_sched_start+0xa0>)
   20be0:	f003 fee1 	bl	249a6 <assert_print>
   20be4:	21c2      	movs	r1, #194	; 0xc2
   20be6:	e7e6      	b.n	20bb6 <z_sched_start+0x32>
	__asm__ volatile(
   20be8:	f385 8811 	msr	BASEPRI, r5
   20bec:	f3bf 8f6f 	isb	sy
}
   20bf0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20bf2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   20bf6:	4620      	mov	r0, r4
   20bf8:	7363      	strb	r3, [r4, #13]
   20bfa:	f7ff fe47 	bl	2088c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20bfe:	4629      	mov	r1, r5
}
   20c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   20c04:	4801      	ldr	r0, [pc, #4]	; (20c0c <z_sched_start+0x88>)
   20c06:	f7ff bf7b 	b.w	20b00 <z_reschedule>
   20c0a:	bf00      	nop
   20c0c:	200214a8 	.word	0x200214a8
   20c10:	0002c034 	.word	0x0002c034
   20c14:	0002c08d 	.word	0x0002c08d
   20c18:	0002b339 	.word	0x0002b339
   20c1c:	0002c0a2 	.word	0x0002c0a2
   20c20:	0002c061 	.word	0x0002c061
   20c24:	0002c078 	.word	0x0002c078

00020c28 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   20c28:	b510      	push	{r4, lr}
	__asm__ volatile(
   20c2a:	f04f 0320 	mov.w	r3, #32
   20c2e:	f3ef 8411 	mrs	r4, BASEPRI
   20c32:	f383 8812 	msr	BASEPRI_MAX, r3
   20c36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c3a:	4825      	ldr	r0, [pc, #148]	; (20cd0 <k_sched_lock+0xa8>)
   20c3c:	f7fe fc96 	bl	1f56c <z_spin_lock_valid>
   20c40:	b960      	cbnz	r0, 20c5c <k_sched_lock+0x34>
   20c42:	2394      	movs	r3, #148	; 0x94
   20c44:	4a23      	ldr	r2, [pc, #140]	; (20cd4 <k_sched_lock+0xac>)
   20c46:	4924      	ldr	r1, [pc, #144]	; (20cd8 <k_sched_lock+0xb0>)
   20c48:	4824      	ldr	r0, [pc, #144]	; (20cdc <k_sched_lock+0xb4>)
   20c4a:	f003 feac 	bl	249a6 <assert_print>
   20c4e:	4920      	ldr	r1, [pc, #128]	; (20cd0 <k_sched_lock+0xa8>)
   20c50:	4823      	ldr	r0, [pc, #140]	; (20ce0 <k_sched_lock+0xb8>)
   20c52:	f003 fea8 	bl	249a6 <assert_print>
   20c56:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c58:	481e      	ldr	r0, [pc, #120]	; (20cd4 <k_sched_lock+0xac>)
   20c5a:	e010      	b.n	20c7e <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   20c5c:	481c      	ldr	r0, [pc, #112]	; (20cd0 <k_sched_lock+0xa8>)
   20c5e:	f7fe fca1 	bl	1f5a4 <z_spin_lock_set_owner>
   20c62:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   20c66:	b163      	cbz	r3, 20c82 <k_sched_lock+0x5a>
   20c68:	491e      	ldr	r1, [pc, #120]	; (20ce4 <k_sched_lock+0xbc>)
   20c6a:	23fd      	movs	r3, #253	; 0xfd
   20c6c:	4a1e      	ldr	r2, [pc, #120]	; (20ce8 <k_sched_lock+0xc0>)
   20c6e:	481b      	ldr	r0, [pc, #108]	; (20cdc <k_sched_lock+0xb4>)
   20c70:	f003 fe99 	bl	249a6 <assert_print>
   20c74:	481d      	ldr	r0, [pc, #116]	; (20cec <k_sched_lock+0xc4>)
   20c76:	f003 fe96 	bl	249a6 <assert_print>
   20c7a:	21fd      	movs	r1, #253	; 0xfd
   20c7c:	481a      	ldr	r0, [pc, #104]	; (20ce8 <k_sched_lock+0xc0>)
   20c7e:	f003 fe8b 	bl	24998 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   20c82:	4b1b      	ldr	r3, [pc, #108]	; (20cf0 <k_sched_lock+0xc8>)
   20c84:	689a      	ldr	r2, [r3, #8]
   20c86:	7bd3      	ldrb	r3, [r2, #15]
   20c88:	2b01      	cmp	r3, #1
   20c8a:	d10a      	bne.n	20ca2 <k_sched_lock+0x7a>
   20c8c:	4919      	ldr	r1, [pc, #100]	; (20cf4 <k_sched_lock+0xcc>)
   20c8e:	23fe      	movs	r3, #254	; 0xfe
   20c90:	4a15      	ldr	r2, [pc, #84]	; (20ce8 <k_sched_lock+0xc0>)
   20c92:	4812      	ldr	r0, [pc, #72]	; (20cdc <k_sched_lock+0xb4>)
   20c94:	f003 fe87 	bl	249a6 <assert_print>
   20c98:	4814      	ldr	r0, [pc, #80]	; (20cec <k_sched_lock+0xc4>)
   20c9a:	f003 fe84 	bl	249a6 <assert_print>
   20c9e:	21fe      	movs	r1, #254	; 0xfe
   20ca0:	e7ec      	b.n	20c7c <k_sched_lock+0x54>
	--_current->base.sched_locked;
   20ca2:	3b01      	subs	r3, #1
   20ca4:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ca6:	480a      	ldr	r0, [pc, #40]	; (20cd0 <k_sched_lock+0xa8>)
   20ca8:	f7fe fc6e 	bl	1f588 <z_spin_unlock_valid>
   20cac:	b958      	cbnz	r0, 20cc6 <k_sched_lock+0x9e>
   20cae:	23c2      	movs	r3, #194	; 0xc2
   20cb0:	4a08      	ldr	r2, [pc, #32]	; (20cd4 <k_sched_lock+0xac>)
   20cb2:	4911      	ldr	r1, [pc, #68]	; (20cf8 <k_sched_lock+0xd0>)
   20cb4:	4809      	ldr	r0, [pc, #36]	; (20cdc <k_sched_lock+0xb4>)
   20cb6:	f003 fe76 	bl	249a6 <assert_print>
   20cba:	4905      	ldr	r1, [pc, #20]	; (20cd0 <k_sched_lock+0xa8>)
   20cbc:	480f      	ldr	r0, [pc, #60]	; (20cfc <k_sched_lock+0xd4>)
   20cbe:	f003 fe72 	bl	249a6 <assert_print>
   20cc2:	21c2      	movs	r1, #194	; 0xc2
   20cc4:	e7c8      	b.n	20c58 <k_sched_lock+0x30>
	__asm__ volatile(
   20cc6:	f384 8811 	msr	BASEPRI, r4
   20cca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   20cce:	bd10      	pop	{r4, pc}
   20cd0:	200214a8 	.word	0x200214a8
   20cd4:	0002c034 	.word	0x0002c034
   20cd8:	0002c08d 	.word	0x0002c08d
   20cdc:	0002b339 	.word	0x0002b339
   20ce0:	0002c0a2 	.word	0x0002c0a2
   20ce4:	00030366 	.word	0x00030366
   20ce8:	0003063d 	.word	0x0003063d
   20cec:	0002ee3a 	.word	0x0002ee3a
   20cf0:	20021460 	.word	0x20021460
   20cf4:	00030668 	.word	0x00030668
   20cf8:	0002c061 	.word	0x0002c061
   20cfc:	0002c078 	.word	0x0002c078

00020d00 <k_sched_unlock>:

void k_sched_unlock(void)
{
   20d00:	b510      	push	{r4, lr}
	__asm__ volatile(
   20d02:	f04f 0320 	mov.w	r3, #32
   20d06:	f3ef 8411 	mrs	r4, BASEPRI
   20d0a:	f383 8812 	msr	BASEPRI_MAX, r3
   20d0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d12:	4829      	ldr	r0, [pc, #164]	; (20db8 <k_sched_unlock+0xb8>)
   20d14:	f7fe fc2a 	bl	1f56c <z_spin_lock_valid>
   20d18:	b960      	cbnz	r0, 20d34 <k_sched_unlock+0x34>
   20d1a:	2394      	movs	r3, #148	; 0x94
   20d1c:	4a27      	ldr	r2, [pc, #156]	; (20dbc <k_sched_unlock+0xbc>)
   20d1e:	4928      	ldr	r1, [pc, #160]	; (20dc0 <k_sched_unlock+0xc0>)
   20d20:	4828      	ldr	r0, [pc, #160]	; (20dc4 <k_sched_unlock+0xc4>)
   20d22:	f003 fe40 	bl	249a6 <assert_print>
   20d26:	4924      	ldr	r1, [pc, #144]	; (20db8 <k_sched_unlock+0xb8>)
   20d28:	4827      	ldr	r0, [pc, #156]	; (20dc8 <k_sched_unlock+0xc8>)
   20d2a:	f003 fe3c 	bl	249a6 <assert_print>
   20d2e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d30:	4822      	ldr	r0, [pc, #136]	; (20dbc <k_sched_unlock+0xbc>)
   20d32:	e013      	b.n	20d5c <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   20d34:	4820      	ldr	r0, [pc, #128]	; (20db8 <k_sched_unlock+0xb8>)
   20d36:	f7fe fc35 	bl	1f5a4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   20d3a:	4b24      	ldr	r3, [pc, #144]	; (20dcc <k_sched_unlock+0xcc>)
   20d3c:	689a      	ldr	r2, [r3, #8]
   20d3e:	7bd3      	ldrb	r3, [r2, #15]
   20d40:	b973      	cbnz	r3, 20d60 <k_sched_unlock+0x60>
   20d42:	4923      	ldr	r1, [pc, #140]	; (20dd0 <k_sched_unlock+0xd0>)
   20d44:	f240 33e7 	movw	r3, #999	; 0x3e7
   20d48:	4a22      	ldr	r2, [pc, #136]	; (20dd4 <k_sched_unlock+0xd4>)
   20d4a:	481e      	ldr	r0, [pc, #120]	; (20dc4 <k_sched_unlock+0xc4>)
   20d4c:	f003 fe2b 	bl	249a6 <assert_print>
   20d50:	4821      	ldr	r0, [pc, #132]	; (20dd8 <k_sched_unlock+0xd8>)
   20d52:	f003 fe28 	bl	249a6 <assert_print>
   20d56:	f240 31e7 	movw	r1, #999	; 0x3e7
   20d5a:	481e      	ldr	r0, [pc, #120]	; (20dd4 <k_sched_unlock+0xd4>)
   20d5c:	f003 fe1c 	bl	24998 <assert_post_action>
   20d60:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   20d64:	b160      	cbz	r0, 20d80 <k_sched_unlock+0x80>
   20d66:	491d      	ldr	r1, [pc, #116]	; (20ddc <k_sched_unlock+0xdc>)
   20d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20d6c:	4a19      	ldr	r2, [pc, #100]	; (20dd4 <k_sched_unlock+0xd4>)
   20d6e:	4815      	ldr	r0, [pc, #84]	; (20dc4 <k_sched_unlock+0xc4>)
   20d70:	f003 fe19 	bl	249a6 <assert_print>
   20d74:	4818      	ldr	r0, [pc, #96]	; (20dd8 <k_sched_unlock+0xd8>)
   20d76:	f003 fe16 	bl	249a6 <assert_print>
   20d7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   20d7e:	e7ec      	b.n	20d5a <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   20d80:	3301      	adds	r3, #1
   20d82:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   20d84:	f7ff fd4e 	bl	20824 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d88:	480b      	ldr	r0, [pc, #44]	; (20db8 <k_sched_unlock+0xb8>)
   20d8a:	f7fe fbfd 	bl	1f588 <z_spin_unlock_valid>
   20d8e:	b958      	cbnz	r0, 20da8 <k_sched_unlock+0xa8>
   20d90:	23c2      	movs	r3, #194	; 0xc2
   20d92:	4a0a      	ldr	r2, [pc, #40]	; (20dbc <k_sched_unlock+0xbc>)
   20d94:	4912      	ldr	r1, [pc, #72]	; (20de0 <k_sched_unlock+0xe0>)
   20d96:	480b      	ldr	r0, [pc, #44]	; (20dc4 <k_sched_unlock+0xc4>)
   20d98:	f003 fe05 	bl	249a6 <assert_print>
   20d9c:	4906      	ldr	r1, [pc, #24]	; (20db8 <k_sched_unlock+0xb8>)
   20d9e:	4811      	ldr	r0, [pc, #68]	; (20de4 <k_sched_unlock+0xe4>)
   20da0:	f003 fe01 	bl	249a6 <assert_print>
   20da4:	21c2      	movs	r1, #194	; 0xc2
   20da6:	e7c3      	b.n	20d30 <k_sched_unlock+0x30>
	__asm__ volatile(
   20da8:	f384 8811 	msr	BASEPRI, r4
   20dac:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   20db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   20db4:	f008 ba34 	b.w	29220 <z_reschedule_unlocked>
   20db8:	200214a8 	.word	0x200214a8
   20dbc:	0002c034 	.word	0x0002c034
   20dc0:	0002c08d 	.word	0x0002c08d
   20dc4:	0002b339 	.word	0x0002b339
   20dc8:	0002c0a2 	.word	0x0002c0a2
   20dcc:	20021460 	.word	0x20021460
   20dd0:	00030699 	.word	0x00030699
   20dd4:	000305d3 	.word	0x000305d3
   20dd8:	0002ee3a 	.word	0x0002ee3a
   20ddc:	00030366 	.word	0x00030366
   20de0:	0002c061 	.word	0x0002c061
   20de4:	0002c078 	.word	0x0002c078

00020de8 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   20de8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20dea:	4b0b      	ldr	r3, [pc, #44]	; (20e18 <z_priq_dumb_remove+0x30>)
   20dec:	4299      	cmp	r1, r3
   20dee:	d10b      	bne.n	20e08 <z_priq_dumb_remove+0x20>
   20df0:	490a      	ldr	r1, [pc, #40]	; (20e1c <z_priq_dumb_remove+0x34>)
   20df2:	480b      	ldr	r0, [pc, #44]	; (20e20 <z_priq_dumb_remove+0x38>)
   20df4:	f240 4373 	movw	r3, #1139	; 0x473
   20df8:	4a0a      	ldr	r2, [pc, #40]	; (20e24 <z_priq_dumb_remove+0x3c>)
   20dfa:	f003 fdd4 	bl	249a6 <assert_print>
   20dfe:	f240 4173 	movw	r1, #1139	; 0x473
   20e02:	4808      	ldr	r0, [pc, #32]	; (20e24 <z_priq_dumb_remove+0x3c>)
   20e04:	f003 fdc8 	bl	24998 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   20e08:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   20e0c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20e0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20e10:	2300      	movs	r3, #0
	node->prev = NULL;
   20e12:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   20e16:	bd08      	pop	{r3, pc}
   20e18:	20009b68 	.word	0x20009b68
   20e1c:	0003061c 	.word	0x0003061c
   20e20:	0002b339 	.word	0x0002b339
   20e24:	000305d3 	.word	0x000305d3

00020e28 <move_thread_to_end_of_prio_q>:
{
   20e28:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   20e2a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   20e2e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   20e30:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   20e32:	7b43      	ldrb	r3, [r0, #13]
   20e34:	da06      	bge.n	20e44 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   20e3a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20e3c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20e3e:	481d      	ldr	r0, [pc, #116]	; (20eb4 <move_thread_to_end_of_prio_q+0x8c>)
   20e40:	f7ff ffd2 	bl	20de8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   20e44:	7b63      	ldrb	r3, [r4, #13]
   20e46:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20e4a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20e4c:	4b1a      	ldr	r3, [pc, #104]	; (20eb8 <move_thread_to_end_of_prio_q+0x90>)
   20e4e:	429c      	cmp	r4, r3
   20e50:	d109      	bne.n	20e66 <move_thread_to_end_of_prio_q+0x3e>
   20e52:	491a      	ldr	r1, [pc, #104]	; (20ebc <move_thread_to_end_of_prio_q+0x94>)
   20e54:	481a      	ldr	r0, [pc, #104]	; (20ec0 <move_thread_to_end_of_prio_q+0x98>)
   20e56:	23ba      	movs	r3, #186	; 0xba
   20e58:	4a1a      	ldr	r2, [pc, #104]	; (20ec4 <move_thread_to_end_of_prio_q+0x9c>)
   20e5a:	f003 fda4 	bl	249a6 <assert_print>
   20e5e:	21ba      	movs	r1, #186	; 0xba
   20e60:	4818      	ldr	r0, [pc, #96]	; (20ec4 <move_thread_to_end_of_prio_q+0x9c>)
   20e62:	f003 fd99 	bl	24998 <assert_post_action>
	return list->head == list;
   20e66:	4a18      	ldr	r2, [pc, #96]	; (20ec8 <move_thread_to_end_of_prio_q+0xa0>)
   20e68:	4611      	mov	r1, r2
   20e6a:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   20e6e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20e70:	428b      	cmp	r3, r1
   20e72:	bf08      	it	eq
   20e74:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20e76:	b923      	cbnz	r3, 20e82 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   20e78:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   20e7c:	6004      	str	r4, [r0, #0]
	list->tail = node;
   20e7e:	6254      	str	r4, [r2, #36]	; 0x24
}
   20e80:	e00c      	b.n	20e9c <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   20e82:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   20e86:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   20e8a:	42b5      	cmp	r5, r6
   20e8c:	d00e      	beq.n	20eac <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   20e8e:	42ae      	cmp	r6, r5
   20e90:	dd0c      	ble.n	20eac <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   20e92:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   20e94:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   20e98:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   20e9a:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   20e9c:	6890      	ldr	r0, [r2, #8]
   20e9e:	1b03      	subs	r3, r0, r4
   20ea0:	4258      	negs	r0, r3
   20ea2:	4158      	adcs	r0, r3
}
   20ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   20ea8:	f7ff bcbc 	b.w	20824 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   20eac:	4298      	cmp	r0, r3
   20eae:	d0e3      	beq.n	20e78 <move_thread_to_end_of_prio_q+0x50>
   20eb0:	681b      	ldr	r3, [r3, #0]
   20eb2:	e7e0      	b.n	20e76 <move_thread_to_end_of_prio_q+0x4e>
   20eb4:	20021480 	.word	0x20021480
   20eb8:	20009b68 	.word	0x20009b68
   20ebc:	0003061c 	.word	0x0003061c
   20ec0:	0002b339 	.word	0x0002b339
   20ec4:	000305d3 	.word	0x000305d3
   20ec8:	20021460 	.word	0x20021460

00020ecc <z_time_slice>:
{
   20ecc:	b570      	push	{r4, r5, r6, lr}
   20ece:	4605      	mov	r5, r0
	__asm__ volatile(
   20ed0:	f04f 0320 	mov.w	r3, #32
   20ed4:	f3ef 8611 	mrs	r6, BASEPRI
   20ed8:	f383 8812 	msr	BASEPRI_MAX, r3
   20edc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ee0:	4829      	ldr	r0, [pc, #164]	; (20f88 <z_time_slice+0xbc>)
   20ee2:	f7fe fb43 	bl	1f56c <z_spin_lock_valid>
   20ee6:	b968      	cbnz	r0, 20f04 <z_time_slice+0x38>
   20ee8:	2394      	movs	r3, #148	; 0x94
   20eea:	4a28      	ldr	r2, [pc, #160]	; (20f8c <z_time_slice+0xc0>)
   20eec:	4928      	ldr	r1, [pc, #160]	; (20f90 <z_time_slice+0xc4>)
   20eee:	4829      	ldr	r0, [pc, #164]	; (20f94 <z_time_slice+0xc8>)
   20ef0:	f003 fd59 	bl	249a6 <assert_print>
   20ef4:	4924      	ldr	r1, [pc, #144]	; (20f88 <z_time_slice+0xbc>)
   20ef6:	4828      	ldr	r0, [pc, #160]	; (20f98 <z_time_slice+0xcc>)
   20ef8:	f003 fd55 	bl	249a6 <assert_print>
   20efc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20efe:	4823      	ldr	r0, [pc, #140]	; (20f8c <z_time_slice+0xc0>)
   20f00:	f003 fd4a 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   20f04:	4820      	ldr	r0, [pc, #128]	; (20f88 <z_time_slice+0xbc>)
   20f06:	f7fe fb4d 	bl	1f5a4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   20f0a:	4b24      	ldr	r3, [pc, #144]	; (20f9c <z_time_slice+0xd0>)
   20f0c:	4a24      	ldr	r2, [pc, #144]	; (20fa0 <z_time_slice+0xd4>)
   20f0e:	689c      	ldr	r4, [r3, #8]
   20f10:	6811      	ldr	r1, [r2, #0]
   20f12:	428c      	cmp	r4, r1
   20f14:	d112      	bne.n	20f3c <z_time_slice+0x70>
		z_reset_time_slice(_current);
   20f16:	4620      	mov	r0, r4
   20f18:	f7ff fc70 	bl	207fc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f1c:	481a      	ldr	r0, [pc, #104]	; (20f88 <z_time_slice+0xbc>)
   20f1e:	f7fe fb33 	bl	1f588 <z_spin_unlock_valid>
   20f22:	bb58      	cbnz	r0, 20f7c <z_time_slice+0xb0>
   20f24:	23c2      	movs	r3, #194	; 0xc2
   20f26:	4a19      	ldr	r2, [pc, #100]	; (20f8c <z_time_slice+0xc0>)
   20f28:	491e      	ldr	r1, [pc, #120]	; (20fa4 <z_time_slice+0xd8>)
   20f2a:	481a      	ldr	r0, [pc, #104]	; (20f94 <z_time_slice+0xc8>)
   20f2c:	f003 fd3b 	bl	249a6 <assert_print>
   20f30:	4915      	ldr	r1, [pc, #84]	; (20f88 <z_time_slice+0xbc>)
   20f32:	481d      	ldr	r0, [pc, #116]	; (20fa8 <z_time_slice+0xdc>)
   20f34:	f003 fd37 	bl	249a6 <assert_print>
   20f38:	21c2      	movs	r1, #194	; 0xc2
   20f3a:	e7e0      	b.n	20efe <z_time_slice+0x32>
	pending_current = NULL;
   20f3c:	2100      	movs	r1, #0
   20f3e:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   20f40:	4a1a      	ldr	r2, [pc, #104]	; (20fac <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   20f42:	6812      	ldr	r2, [r2, #0]
   20f44:	b1c2      	cbz	r2, 20f78 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   20f46:	89e2      	ldrh	r2, [r4, #14]
   20f48:	2a7f      	cmp	r2, #127	; 0x7f
   20f4a:	d815      	bhi.n	20f78 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   20f4c:	7b62      	ldrb	r2, [r4, #13]
   20f4e:	06d2      	lsls	r2, r2, #27
   20f50:	d112      	bne.n	20f78 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   20f52:	4a17      	ldr	r2, [pc, #92]	; (20fb0 <z_time_slice+0xe4>)
   20f54:	f994 100e 	ldrsb.w	r1, [r4, #14]
   20f58:	6812      	ldr	r2, [r2, #0]
   20f5a:	4291      	cmp	r1, r2
   20f5c:	db0c      	blt.n	20f78 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   20f5e:	4a15      	ldr	r2, [pc, #84]	; (20fb4 <z_time_slice+0xe8>)
   20f60:	4294      	cmp	r4, r2
   20f62:	d009      	beq.n	20f78 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   20f64:	691a      	ldr	r2, [r3, #16]
   20f66:	42aa      	cmp	r2, r5
   20f68:	dc03      	bgt.n	20f72 <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   20f6a:	4620      	mov	r0, r4
   20f6c:	f7ff ff5c 	bl	20e28 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   20f70:	e7d1      	b.n	20f16 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   20f72:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   20f74:	611a      	str	r2, [r3, #16]
   20f76:	e7d1      	b.n	20f1c <z_time_slice+0x50>
   20f78:	2200      	movs	r2, #0
   20f7a:	e7fb      	b.n	20f74 <z_time_slice+0xa8>
	__asm__ volatile(
   20f7c:	f386 8811 	msr	BASEPRI, r6
   20f80:	f3bf 8f6f 	isb	sy
}
   20f84:	bd70      	pop	{r4, r5, r6, pc}
   20f86:	bf00      	nop
   20f88:	200214a8 	.word	0x200214a8
   20f8c:	0002c034 	.word	0x0002c034
   20f90:	0002c08d 	.word	0x0002c08d
   20f94:	0002b339 	.word	0x0002b339
   20f98:	0002c0a2 	.word	0x0002c0a2
   20f9c:	20021460 	.word	0x20021460
   20fa0:	2002149c 	.word	0x2002149c
   20fa4:	0002c061 	.word	0x0002c061
   20fa8:	0002c078 	.word	0x0002c078
   20fac:	200214a4 	.word	0x200214a4
   20fb0:	200214a0 	.word	0x200214a0
   20fb4:	20009b68 	.word	0x20009b68

00020fb8 <unready_thread>:
{
   20fb8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   20fba:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   20fbe:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   20fc0:	2a00      	cmp	r2, #0
   20fc2:	7b43      	ldrb	r3, [r0, #13]
   20fc4:	da06      	bge.n	20fd4 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   20fca:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20fcc:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20fce:	4806      	ldr	r0, [pc, #24]	; (20fe8 <unready_thread+0x30>)
   20fd0:	f7ff ff0a 	bl	20de8 <z_priq_dumb_remove>
	update_cache(thread == _current);
   20fd4:	4b05      	ldr	r3, [pc, #20]	; (20fec <unready_thread+0x34>)
   20fd6:	6898      	ldr	r0, [r3, #8]
   20fd8:	1b03      	subs	r3, r0, r4
   20fda:	4258      	negs	r0, r3
   20fdc:	4158      	adcs	r0, r3
}
   20fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   20fe2:	f7ff bc1f 	b.w	20824 <update_cache>
   20fe6:	bf00      	nop
   20fe8:	20021480 	.word	0x20021480
   20fec:	20021460 	.word	0x20021460

00020ff0 <add_to_waitq_locked>:
{
   20ff0:	b538      	push	{r3, r4, r5, lr}
   20ff2:	4604      	mov	r4, r0
   20ff4:	460d      	mov	r5, r1
	unready_thread(thread);
   20ff6:	f7ff ffdf 	bl	20fb8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   20ffa:	7b63      	ldrb	r3, [r4, #13]
   20ffc:	f043 0302 	orr.w	r3, r3, #2
   21000:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   21002:	b34d      	cbz	r5, 21058 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21004:	4b15      	ldr	r3, [pc, #84]	; (2105c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   21006:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21008:	429c      	cmp	r4, r3
   2100a:	d109      	bne.n	21020 <add_to_waitq_locked+0x30>
   2100c:	4914      	ldr	r1, [pc, #80]	; (21060 <add_to_waitq_locked+0x70>)
   2100e:	4815      	ldr	r0, [pc, #84]	; (21064 <add_to_waitq_locked+0x74>)
   21010:	23ba      	movs	r3, #186	; 0xba
   21012:	4a15      	ldr	r2, [pc, #84]	; (21068 <add_to_waitq_locked+0x78>)
   21014:	f003 fcc7 	bl	249a6 <assert_print>
   21018:	21ba      	movs	r1, #186	; 0xba
   2101a:	4813      	ldr	r0, [pc, #76]	; (21068 <add_to_waitq_locked+0x78>)
   2101c:	f003 fcbc 	bl	24998 <assert_post_action>
	return list->head == list;
   21020:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21022:	429d      	cmp	r5, r3
   21024:	d109      	bne.n	2103a <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   21026:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   21028:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2102c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2102e:	606c      	str	r4, [r5, #4]
}
   21030:	e012      	b.n	21058 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   21032:	686a      	ldr	r2, [r5, #4]
   21034:	4293      	cmp	r3, r2
   21036:	d0f6      	beq.n	21026 <add_to_waitq_locked+0x36>
   21038:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2103a:	2b00      	cmp	r3, #0
   2103c:	d0f3      	beq.n	21026 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   2103e:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21042:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   21046:	428a      	cmp	r2, r1
   21048:	d0f3      	beq.n	21032 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2104a:	4291      	cmp	r1, r2
   2104c:	ddf1      	ble.n	21032 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   2104e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21050:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21054:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21056:	605c      	str	r4, [r3, #4]
}
   21058:	bd38      	pop	{r3, r4, r5, pc}
   2105a:	bf00      	nop
   2105c:	20009b68 	.word	0x20009b68
   21060:	0003061c 	.word	0x0003061c
   21064:	0002b339 	.word	0x0002b339
   21068:	000305d3 	.word	0x000305d3

0002106c <pend_locked>:
{
   2106c:	b570      	push	{r4, r5, r6, lr}
   2106e:	4615      	mov	r5, r2
   21070:	461c      	mov	r4, r3
   21072:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   21074:	f7ff ffbc 	bl	20ff0 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21078:	f1b4 3fff 	cmp.w	r4, #4294967295
   2107c:	bf08      	it	eq
   2107e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   21082:	d008      	beq.n	21096 <pend_locked+0x2a>
   21084:	462a      	mov	r2, r5
   21086:	4623      	mov	r3, r4
   21088:	f106 0018 	add.w	r0, r6, #24
   2108c:	4902      	ldr	r1, [pc, #8]	; (21098 <pend_locked+0x2c>)
}
   2108e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21092:	f000 bdf1 	b.w	21c78 <z_add_timeout>
   21096:	bd70      	pop	{r4, r5, r6, pc}
   21098:	00021451 	.word	0x00021451

0002109c <z_pend_curr>:
{
   2109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   210a0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   210a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2115c <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   210a8:	4c2d      	ldr	r4, [pc, #180]	; (21160 <z_pend_curr+0xc4>)
{
   210aa:	4617      	mov	r7, r2
	pending_current = _current;
   210ac:	4b2d      	ldr	r3, [pc, #180]	; (21164 <z_pend_curr+0xc8>)
   210ae:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   210b2:	42a0      	cmp	r0, r4
{
   210b4:	4605      	mov	r5, r0
   210b6:	460e      	mov	r6, r1
	pending_current = _current;
   210b8:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   210ba:	d10b      	bne.n	210d4 <z_pend_curr+0x38>
   210bc:	492a      	ldr	r1, [pc, #168]	; (21168 <z_pend_curr+0xcc>)
   210be:	482b      	ldr	r0, [pc, #172]	; (2116c <z_pend_curr+0xd0>)
   210c0:	f240 334e 	movw	r3, #846	; 0x34e
   210c4:	4a2a      	ldr	r2, [pc, #168]	; (21170 <z_pend_curr+0xd4>)
   210c6:	f003 fc6e 	bl	249a6 <assert_print>
   210ca:	f240 314e 	movw	r1, #846	; 0x34e
   210ce:	4828      	ldr	r0, [pc, #160]	; (21170 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   210d0:	f003 fc62 	bl	24998 <assert_post_action>
	__asm__ volatile(
   210d4:	f04f 0220 	mov.w	r2, #32
   210d8:	f3ef 8311 	mrs	r3, BASEPRI
   210dc:	f382 8812 	msr	BASEPRI_MAX, r2
   210e0:	f3bf 8f6f 	isb	sy
   210e4:	4620      	mov	r0, r4
   210e6:	f7fe fa41 	bl	1f56c <z_spin_lock_valid>
   210ea:	b960      	cbnz	r0, 21106 <z_pend_curr+0x6a>
   210ec:	2394      	movs	r3, #148	; 0x94
   210ee:	4a21      	ldr	r2, [pc, #132]	; (21174 <z_pend_curr+0xd8>)
   210f0:	4921      	ldr	r1, [pc, #132]	; (21178 <z_pend_curr+0xdc>)
   210f2:	481e      	ldr	r0, [pc, #120]	; (2116c <z_pend_curr+0xd0>)
   210f4:	f003 fc57 	bl	249a6 <assert_print>
   210f8:	4621      	mov	r1, r4
   210fa:	4820      	ldr	r0, [pc, #128]	; (2117c <z_pend_curr+0xe0>)
   210fc:	f003 fc53 	bl	249a6 <assert_print>
   21100:	2194      	movs	r1, #148	; 0x94
   21102:	481c      	ldr	r0, [pc, #112]	; (21174 <z_pend_curr+0xd8>)
   21104:	e7e4      	b.n	210d0 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   21106:	4620      	mov	r0, r4
   21108:	f7fe fa4c 	bl	1f5a4 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   2110c:	f8da 0008 	ldr.w	r0, [sl, #8]
   21110:	4642      	mov	r2, r8
   21112:	464b      	mov	r3, r9
   21114:	4639      	mov	r1, r7
   21116:	f7ff ffa9 	bl	2106c <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2111a:	4628      	mov	r0, r5
   2111c:	f7fe fa34 	bl	1f588 <z_spin_unlock_valid>
   21120:	b958      	cbnz	r0, 2113a <z_pend_curr+0x9e>
   21122:	4917      	ldr	r1, [pc, #92]	; (21180 <z_pend_curr+0xe4>)
   21124:	23e1      	movs	r3, #225	; 0xe1
   21126:	4a13      	ldr	r2, [pc, #76]	; (21174 <z_pend_curr+0xd8>)
   21128:	4810      	ldr	r0, [pc, #64]	; (2116c <z_pend_curr+0xd0>)
   2112a:	f003 fc3c 	bl	249a6 <assert_print>
   2112e:	4629      	mov	r1, r5
   21130:	4814      	ldr	r0, [pc, #80]	; (21184 <z_pend_curr+0xe8>)
   21132:	f003 fc38 	bl	249a6 <assert_print>
   21136:	21e1      	movs	r1, #225	; 0xe1
   21138:	e7e3      	b.n	21102 <z_pend_curr+0x66>
   2113a:	4620      	mov	r0, r4
   2113c:	f7fe fa24 	bl	1f588 <z_spin_unlock_valid>
   21140:	b938      	cbnz	r0, 21152 <z_pend_curr+0xb6>
   21142:	490f      	ldr	r1, [pc, #60]	; (21180 <z_pend_curr+0xe4>)
   21144:	23e1      	movs	r3, #225	; 0xe1
   21146:	4a0b      	ldr	r2, [pc, #44]	; (21174 <z_pend_curr+0xd8>)
   21148:	4808      	ldr	r0, [pc, #32]	; (2116c <z_pend_curr+0xd0>)
   2114a:	f003 fc2c 	bl	249a6 <assert_print>
   2114e:	4621      	mov	r1, r4
   21150:	e7ee      	b.n	21130 <z_pend_curr+0x94>
   21152:	4630      	mov	r0, r6
}
   21154:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21158:	f7ee beba 	b.w	fed0 <arch_swap>
   2115c:	20021460 	.word	0x20021460
   21160:	200214a8 	.word	0x200214a8
   21164:	2002149c 	.word	0x2002149c
   21168:	000306ca 	.word	0x000306ca
   2116c:	0002b339 	.word	0x0002b339
   21170:	000305d3 	.word	0x000305d3
   21174:	0002c034 	.word	0x0002c034
   21178:	0002c08d 	.word	0x0002c08d
   2117c:	0002c0a2 	.word	0x0002c0a2
   21180:	0002c061 	.word	0x0002c061
   21184:	0002c078 	.word	0x0002c078

00021188 <z_set_prio>:
{
   21188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2118c:	4604      	mov	r4, r0
   2118e:	460e      	mov	r6, r1
   21190:	f04f 0320 	mov.w	r3, #32
   21194:	f3ef 8911 	mrs	r9, BASEPRI
   21198:	f383 8812 	msr	BASEPRI_MAX, r3
   2119c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   211a0:	4837      	ldr	r0, [pc, #220]	; (21280 <z_set_prio+0xf8>)
   211a2:	f7fe f9e3 	bl	1f56c <z_spin_lock_valid>
   211a6:	4607      	mov	r7, r0
   211a8:	b960      	cbnz	r0, 211c4 <z_set_prio+0x3c>
   211aa:	2394      	movs	r3, #148	; 0x94
   211ac:	4a35      	ldr	r2, [pc, #212]	; (21284 <z_set_prio+0xfc>)
   211ae:	4936      	ldr	r1, [pc, #216]	; (21288 <z_set_prio+0x100>)
   211b0:	4836      	ldr	r0, [pc, #216]	; (2128c <z_set_prio+0x104>)
   211b2:	f003 fbf8 	bl	249a6 <assert_print>
   211b6:	4932      	ldr	r1, [pc, #200]	; (21280 <z_set_prio+0xf8>)
   211b8:	4835      	ldr	r0, [pc, #212]	; (21290 <z_set_prio+0x108>)
   211ba:	f003 fbf4 	bl	249a6 <assert_print>
   211be:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211c0:	4830      	ldr	r0, [pc, #192]	; (21284 <z_set_prio+0xfc>)
   211c2:	e021      	b.n	21208 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   211c4:	482e      	ldr	r0, [pc, #184]	; (21280 <z_set_prio+0xf8>)
   211c6:	f7fe f9ed 	bl	1f5a4 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   211ca:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   211cc:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   211ce:	06da      	lsls	r2, r3, #27
   211d0:	d11c      	bne.n	2120c <z_set_prio+0x84>
	return node->next != NULL;
   211d2:	69a5      	ldr	r5, [r4, #24]
   211d4:	b9d5      	cbnz	r5, 2120c <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   211d6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 21294 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   211da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   211de:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   211e0:	4621      	mov	r1, r4
   211e2:	4640      	mov	r0, r8
   211e4:	f7ff fe00 	bl	20de8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   211e8:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   211ea:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   211ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   211f0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   211f2:	4b29      	ldr	r3, [pc, #164]	; (21298 <z_set_prio+0x110>)
   211f4:	429c      	cmp	r4, r3
   211f6:	d11b      	bne.n	21230 <z_set_prio+0xa8>
   211f8:	4928      	ldr	r1, [pc, #160]	; (2129c <z_set_prio+0x114>)
   211fa:	4824      	ldr	r0, [pc, #144]	; (2128c <z_set_prio+0x104>)
   211fc:	23ba      	movs	r3, #186	; 0xba
   211fe:	4a28      	ldr	r2, [pc, #160]	; (212a0 <z_set_prio+0x118>)
   21200:	f003 fbd1 	bl	249a6 <assert_print>
   21204:	21ba      	movs	r1, #186	; 0xba
   21206:	4826      	ldr	r0, [pc, #152]	; (212a0 <z_set_prio+0x118>)
   21208:	f003 fbc6 	bl	24998 <assert_post_action>
   2120c:	2700      	movs	r7, #0
			thread->base.prio = prio;
   2120e:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21210:	481b      	ldr	r0, [pc, #108]	; (21280 <z_set_prio+0xf8>)
   21212:	f7fe f9b9 	bl	1f588 <z_spin_unlock_valid>
   21216:	bb58      	cbnz	r0, 21270 <z_set_prio+0xe8>
   21218:	23c2      	movs	r3, #194	; 0xc2
   2121a:	4a1a      	ldr	r2, [pc, #104]	; (21284 <z_set_prio+0xfc>)
   2121c:	4921      	ldr	r1, [pc, #132]	; (212a4 <z_set_prio+0x11c>)
   2121e:	481b      	ldr	r0, [pc, #108]	; (2128c <z_set_prio+0x104>)
   21220:	f003 fbc1 	bl	249a6 <assert_print>
   21224:	4916      	ldr	r1, [pc, #88]	; (21280 <z_set_prio+0xf8>)
   21226:	4820      	ldr	r0, [pc, #128]	; (212a8 <z_set_prio+0x120>)
   21228:	f003 fbbd 	bl	249a6 <assert_print>
   2122c:	21c2      	movs	r1, #194	; 0xc2
   2122e:	e7c7      	b.n	211c0 <z_set_prio+0x38>
	return list->head == list;
   21230:	4643      	mov	r3, r8
   21232:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21236:	4542      	cmp	r2, r8
   21238:	bf18      	it	ne
   2123a:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   2123c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2123e:	b925      	cbnz	r5, 2124a <z_set_prio+0xc2>
	node->prev = tail;
   21240:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   21244:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21246:	625c      	str	r4, [r3, #36]	; 0x24
}
   21248:	e00a      	b.n	21260 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   2124a:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   2124e:	428e      	cmp	r6, r1
   21250:	d00a      	beq.n	21268 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21252:	42b1      	cmp	r1, r6
   21254:	dd08      	ble.n	21268 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   21256:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   21258:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   2125c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2125e:	606c      	str	r4, [r5, #4]
			update_cache(1);
   21260:	2001      	movs	r0, #1
   21262:	f7ff fadf 	bl	20824 <update_cache>
   21266:	e7d3      	b.n	21210 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   21268:	42aa      	cmp	r2, r5
   2126a:	d0e9      	beq.n	21240 <z_set_prio+0xb8>
   2126c:	682d      	ldr	r5, [r5, #0]
   2126e:	e7e6      	b.n	2123e <z_set_prio+0xb6>
	__asm__ volatile(
   21270:	f389 8811 	msr	BASEPRI, r9
   21274:	f3bf 8f6f 	isb	sy
}
   21278:	4638      	mov	r0, r7
   2127a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2127e:	bf00      	nop
   21280:	200214a8 	.word	0x200214a8
   21284:	0002c034 	.word	0x0002c034
   21288:	0002c08d 	.word	0x0002c08d
   2128c:	0002b339 	.word	0x0002b339
   21290:	0002c0a2 	.word	0x0002c0a2
   21294:	20021480 	.word	0x20021480
   21298:	20009b68 	.word	0x20009b68
   2129c:	0003061c 	.word	0x0003061c
   212a0:	000305d3 	.word	0x000305d3
   212a4:	0002c061 	.word	0x0002c061
   212a8:	0002c078 	.word	0x0002c078

000212ac <z_impl_k_thread_suspend>:
{
   212ac:	b570      	push	{r4, r5, r6, lr}
   212ae:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   212b0:	3018      	adds	r0, #24
   212b2:	f000 fda7 	bl	21e04 <z_abort_timeout>
	__asm__ volatile(
   212b6:	f04f 0320 	mov.w	r3, #32
   212ba:	f3ef 8611 	mrs	r6, BASEPRI
   212be:	f383 8812 	msr	BASEPRI_MAX, r3
   212c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   212c6:	4824      	ldr	r0, [pc, #144]	; (21358 <z_impl_k_thread_suspend+0xac>)
   212c8:	f7fe f950 	bl	1f56c <z_spin_lock_valid>
   212cc:	b968      	cbnz	r0, 212ea <z_impl_k_thread_suspend+0x3e>
   212ce:	2394      	movs	r3, #148	; 0x94
   212d0:	4a22      	ldr	r2, [pc, #136]	; (2135c <z_impl_k_thread_suspend+0xb0>)
   212d2:	4923      	ldr	r1, [pc, #140]	; (21360 <z_impl_k_thread_suspend+0xb4>)
   212d4:	4823      	ldr	r0, [pc, #140]	; (21364 <z_impl_k_thread_suspend+0xb8>)
   212d6:	f003 fb66 	bl	249a6 <assert_print>
   212da:	491f      	ldr	r1, [pc, #124]	; (21358 <z_impl_k_thread_suspend+0xac>)
   212dc:	4822      	ldr	r0, [pc, #136]	; (21368 <z_impl_k_thread_suspend+0xbc>)
   212de:	f003 fb62 	bl	249a6 <assert_print>
   212e2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212e4:	481d      	ldr	r0, [pc, #116]	; (2135c <z_impl_k_thread_suspend+0xb0>)
   212e6:	f003 fb57 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   212ea:	481b      	ldr	r0, [pc, #108]	; (21358 <z_impl_k_thread_suspend+0xac>)
   212ec:	f7fe f95a 	bl	1f5a4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   212f0:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   212f4:	7b63      	ldrb	r3, [r4, #13]
   212f6:	2a00      	cmp	r2, #0
   212f8:	da06      	bge.n	21308 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   212fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   212fe:	4621      	mov	r1, r4
   21300:	481a      	ldr	r0, [pc, #104]	; (2136c <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21302:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21304:	f7ff fd70 	bl	20de8 <z_priq_dumb_remove>
		update_cache(thread == _current);
   21308:	4d19      	ldr	r5, [pc, #100]	; (21370 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2130a:	7b63      	ldrb	r3, [r4, #13]
   2130c:	68a8      	ldr	r0, [r5, #8]
   2130e:	f043 0310 	orr.w	r3, r3, #16
   21312:	7363      	strb	r3, [r4, #13]
   21314:	1b03      	subs	r3, r0, r4
   21316:	4258      	negs	r0, r3
   21318:	4158      	adcs	r0, r3
   2131a:	f7ff fa83 	bl	20824 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2131e:	480e      	ldr	r0, [pc, #56]	; (21358 <z_impl_k_thread_suspend+0xac>)
   21320:	f7fe f932 	bl	1f588 <z_spin_unlock_valid>
   21324:	b958      	cbnz	r0, 2133e <z_impl_k_thread_suspend+0x92>
   21326:	23c2      	movs	r3, #194	; 0xc2
   21328:	4a0c      	ldr	r2, [pc, #48]	; (2135c <z_impl_k_thread_suspend+0xb0>)
   2132a:	4912      	ldr	r1, [pc, #72]	; (21374 <z_impl_k_thread_suspend+0xc8>)
   2132c:	480d      	ldr	r0, [pc, #52]	; (21364 <z_impl_k_thread_suspend+0xb8>)
   2132e:	f003 fb3a 	bl	249a6 <assert_print>
   21332:	4909      	ldr	r1, [pc, #36]	; (21358 <z_impl_k_thread_suspend+0xac>)
   21334:	4810      	ldr	r0, [pc, #64]	; (21378 <z_impl_k_thread_suspend+0xcc>)
   21336:	f003 fb36 	bl	249a6 <assert_print>
   2133a:	21c2      	movs	r1, #194	; 0xc2
   2133c:	e7d2      	b.n	212e4 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   2133e:	f386 8811 	msr	BASEPRI, r6
   21342:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   21346:	68ab      	ldr	r3, [r5, #8]
   21348:	42a3      	cmp	r3, r4
   2134a:	d103      	bne.n	21354 <z_impl_k_thread_suspend+0xa8>
}
   2134c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   21350:	f007 bf66 	b.w	29220 <z_reschedule_unlocked>
}
   21354:	bd70      	pop	{r4, r5, r6, pc}
   21356:	bf00      	nop
   21358:	200214a8 	.word	0x200214a8
   2135c:	0002c034 	.word	0x0002c034
   21360:	0002c08d 	.word	0x0002c08d
   21364:	0002b339 	.word	0x0002b339
   21368:	0002c0a2 	.word	0x0002c0a2
   2136c:	20021480 	.word	0x20021480
   21370:	20021460 	.word	0x20021460
   21374:	0002c061 	.word	0x0002c061
   21378:	0002c078 	.word	0x0002c078

0002137c <unpend_thread_no_timeout>:
{
   2137c:	b510      	push	{r4, lr}
   2137e:	4604      	mov	r4, r0
   21380:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   21382:	b958      	cbnz	r0, 2139c <unpend_thread_no_timeout+0x20>
   21384:	490a      	ldr	r1, [pc, #40]	; (213b0 <unpend_thread_no_timeout+0x34>)
   21386:	480b      	ldr	r0, [pc, #44]	; (213b4 <unpend_thread_no_timeout+0x38>)
   21388:	f240 23d6 	movw	r3, #726	; 0x2d6
   2138c:	4a0a      	ldr	r2, [pc, #40]	; (213b8 <unpend_thread_no_timeout+0x3c>)
   2138e:	f003 fb0a 	bl	249a6 <assert_print>
   21392:	f240 21d6 	movw	r1, #726	; 0x2d6
   21396:	4808      	ldr	r0, [pc, #32]	; (213b8 <unpend_thread_no_timeout+0x3c>)
   21398:	f003 fafe 	bl	24998 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2139c:	4621      	mov	r1, r4
   2139e:	f7ff fd23 	bl	20de8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   213a2:	7b63      	ldrb	r3, [r4, #13]
   213a4:	f023 0302 	bic.w	r3, r3, #2
   213a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   213aa:	2300      	movs	r3, #0
   213ac:	60a3      	str	r3, [r4, #8]
}
   213ae:	bd10      	pop	{r4, pc}
   213b0:	00030701 	.word	0x00030701
   213b4:	0002b339 	.word	0x0002b339
   213b8:	000305d3 	.word	0x000305d3

000213bc <z_unpend_thread>:
{
   213bc:	b538      	push	{r3, r4, r5, lr}
   213be:	4604      	mov	r4, r0
	__asm__ volatile(
   213c0:	f04f 0320 	mov.w	r3, #32
   213c4:	f3ef 8511 	mrs	r5, BASEPRI
   213c8:	f383 8812 	msr	BASEPRI_MAX, r3
   213cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   213d0:	4818      	ldr	r0, [pc, #96]	; (21434 <z_unpend_thread+0x78>)
   213d2:	f7fe f8cb 	bl	1f56c <z_spin_lock_valid>
   213d6:	b968      	cbnz	r0, 213f4 <z_unpend_thread+0x38>
   213d8:	2394      	movs	r3, #148	; 0x94
   213da:	4a17      	ldr	r2, [pc, #92]	; (21438 <z_unpend_thread+0x7c>)
   213dc:	4917      	ldr	r1, [pc, #92]	; (2143c <z_unpend_thread+0x80>)
   213de:	4818      	ldr	r0, [pc, #96]	; (21440 <z_unpend_thread+0x84>)
   213e0:	f003 fae1 	bl	249a6 <assert_print>
   213e4:	4913      	ldr	r1, [pc, #76]	; (21434 <z_unpend_thread+0x78>)
   213e6:	4817      	ldr	r0, [pc, #92]	; (21444 <z_unpend_thread+0x88>)
   213e8:	f003 fadd 	bl	249a6 <assert_print>
   213ec:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   213ee:	4812      	ldr	r0, [pc, #72]	; (21438 <z_unpend_thread+0x7c>)
   213f0:	f003 fad2 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   213f4:	480f      	ldr	r0, [pc, #60]	; (21434 <z_unpend_thread+0x78>)
   213f6:	f7fe f8d5 	bl	1f5a4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   213fa:	4620      	mov	r0, r4
   213fc:	f7ff ffbe 	bl	2137c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21400:	480c      	ldr	r0, [pc, #48]	; (21434 <z_unpend_thread+0x78>)
   21402:	f7fe f8c1 	bl	1f588 <z_spin_unlock_valid>
   21406:	b958      	cbnz	r0, 21420 <z_unpend_thread+0x64>
   21408:	23c2      	movs	r3, #194	; 0xc2
   2140a:	4a0b      	ldr	r2, [pc, #44]	; (21438 <z_unpend_thread+0x7c>)
   2140c:	490e      	ldr	r1, [pc, #56]	; (21448 <z_unpend_thread+0x8c>)
   2140e:	480c      	ldr	r0, [pc, #48]	; (21440 <z_unpend_thread+0x84>)
   21410:	f003 fac9 	bl	249a6 <assert_print>
   21414:	4907      	ldr	r1, [pc, #28]	; (21434 <z_unpend_thread+0x78>)
   21416:	480d      	ldr	r0, [pc, #52]	; (2144c <z_unpend_thread+0x90>)
   21418:	f003 fac5 	bl	249a6 <assert_print>
   2141c:	21c2      	movs	r1, #194	; 0xc2
   2141e:	e7e6      	b.n	213ee <z_unpend_thread+0x32>
	__asm__ volatile(
   21420:	f385 8811 	msr	BASEPRI, r5
   21424:	f3bf 8f6f 	isb	sy
   21428:	f104 0018 	add.w	r0, r4, #24
}
   2142c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21430:	f000 bce8 	b.w	21e04 <z_abort_timeout>
   21434:	200214a8 	.word	0x200214a8
   21438:	0002c034 	.word	0x0002c034
   2143c:	0002c08d 	.word	0x0002c08d
   21440:	0002b339 	.word	0x0002b339
   21444:	0002c0a2 	.word	0x0002c0a2
   21448:	0002c061 	.word	0x0002c061
   2144c:	0002c078 	.word	0x0002c078

00021450 <z_thread_timeout>:
{
   21450:	b570      	push	{r4, r5, r6, lr}
   21452:	4604      	mov	r4, r0
	__asm__ volatile(
   21454:	f04f 0320 	mov.w	r3, #32
   21458:	f3ef 8611 	mrs	r6, BASEPRI
   2145c:	f383 8812 	msr	BASEPRI_MAX, r3
   21460:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21464:	481f      	ldr	r0, [pc, #124]	; (214e4 <z_thread_timeout+0x94>)
   21466:	f7fe f881 	bl	1f56c <z_spin_lock_valid>
   2146a:	b968      	cbnz	r0, 21488 <z_thread_timeout+0x38>
   2146c:	2394      	movs	r3, #148	; 0x94
   2146e:	4a1e      	ldr	r2, [pc, #120]	; (214e8 <z_thread_timeout+0x98>)
   21470:	491e      	ldr	r1, [pc, #120]	; (214ec <z_thread_timeout+0x9c>)
   21472:	481f      	ldr	r0, [pc, #124]	; (214f0 <z_thread_timeout+0xa0>)
   21474:	f003 fa97 	bl	249a6 <assert_print>
   21478:	491a      	ldr	r1, [pc, #104]	; (214e4 <z_thread_timeout+0x94>)
   2147a:	481e      	ldr	r0, [pc, #120]	; (214f4 <z_thread_timeout+0xa4>)
   2147c:	f003 fa93 	bl	249a6 <assert_print>
   21480:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21482:	4819      	ldr	r0, [pc, #100]	; (214e8 <z_thread_timeout+0x98>)
   21484:	f003 fa88 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   21488:	4816      	ldr	r0, [pc, #88]	; (214e4 <z_thread_timeout+0x94>)
   2148a:	f7fe f88b 	bl	1f5a4 <z_spin_lock_set_owner>
		if (!killed) {
   2148e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   21492:	f013 0f28 	tst.w	r3, #40	; 0x28
   21496:	d110      	bne.n	214ba <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   21498:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2149c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   214a0:	b113      	cbz	r3, 214a8 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   214a2:	4628      	mov	r0, r5
   214a4:	f7ff ff6a 	bl	2137c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   214a8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   214ac:	4628      	mov	r0, r5
   214ae:	f023 0314 	bic.w	r3, r3, #20
   214b2:	f804 3c0b 	strb.w	r3, [r4, #-11]
   214b6:	f7ff f9e9 	bl	2088c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214ba:	480a      	ldr	r0, [pc, #40]	; (214e4 <z_thread_timeout+0x94>)
   214bc:	f7fe f864 	bl	1f588 <z_spin_unlock_valid>
   214c0:	b958      	cbnz	r0, 214da <z_thread_timeout+0x8a>
   214c2:	23c2      	movs	r3, #194	; 0xc2
   214c4:	4a08      	ldr	r2, [pc, #32]	; (214e8 <z_thread_timeout+0x98>)
   214c6:	490c      	ldr	r1, [pc, #48]	; (214f8 <z_thread_timeout+0xa8>)
   214c8:	4809      	ldr	r0, [pc, #36]	; (214f0 <z_thread_timeout+0xa0>)
   214ca:	f003 fa6c 	bl	249a6 <assert_print>
   214ce:	4905      	ldr	r1, [pc, #20]	; (214e4 <z_thread_timeout+0x94>)
   214d0:	480a      	ldr	r0, [pc, #40]	; (214fc <z_thread_timeout+0xac>)
   214d2:	f003 fa68 	bl	249a6 <assert_print>
   214d6:	21c2      	movs	r1, #194	; 0xc2
   214d8:	e7d3      	b.n	21482 <z_thread_timeout+0x32>
	__asm__ volatile(
   214da:	f386 8811 	msr	BASEPRI, r6
   214de:	f3bf 8f6f 	isb	sy
}
   214e2:	bd70      	pop	{r4, r5, r6, pc}
   214e4:	200214a8 	.word	0x200214a8
   214e8:	0002c034 	.word	0x0002c034
   214ec:	0002c08d 	.word	0x0002c08d
   214f0:	0002b339 	.word	0x0002b339
   214f4:	0002c0a2 	.word	0x0002c0a2
   214f8:	0002c061 	.word	0x0002c061
   214fc:	0002c078 	.word	0x0002c078

00021500 <z_unpend1_no_timeout>:
{
   21500:	b570      	push	{r4, r5, r6, lr}
   21502:	4605      	mov	r5, r0
	__asm__ volatile(
   21504:	f04f 0320 	mov.w	r3, #32
   21508:	f3ef 8611 	mrs	r6, BASEPRI
   2150c:	f383 8812 	msr	BASEPRI_MAX, r3
   21510:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21514:	4819      	ldr	r0, [pc, #100]	; (2157c <z_unpend1_no_timeout+0x7c>)
   21516:	f7fe f829 	bl	1f56c <z_spin_lock_valid>
   2151a:	b968      	cbnz	r0, 21538 <z_unpend1_no_timeout+0x38>
   2151c:	2394      	movs	r3, #148	; 0x94
   2151e:	4a18      	ldr	r2, [pc, #96]	; (21580 <z_unpend1_no_timeout+0x80>)
   21520:	4918      	ldr	r1, [pc, #96]	; (21584 <z_unpend1_no_timeout+0x84>)
   21522:	4819      	ldr	r0, [pc, #100]	; (21588 <z_unpend1_no_timeout+0x88>)
   21524:	f003 fa3f 	bl	249a6 <assert_print>
   21528:	4914      	ldr	r1, [pc, #80]	; (2157c <z_unpend1_no_timeout+0x7c>)
   2152a:	4818      	ldr	r0, [pc, #96]	; (2158c <z_unpend1_no_timeout+0x8c>)
   2152c:	f003 fa3b 	bl	249a6 <assert_print>
   21530:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21532:	4813      	ldr	r0, [pc, #76]	; (21580 <z_unpend1_no_timeout+0x80>)
   21534:	f003 fa30 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   21538:	4810      	ldr	r0, [pc, #64]	; (2157c <z_unpend1_no_timeout+0x7c>)
   2153a:	f7fe f833 	bl	1f5a4 <z_spin_lock_set_owner>
	return list->head == list;
   2153e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21540:	42a5      	cmp	r5, r4
   21542:	d013      	beq.n	2156c <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   21544:	b114      	cbz	r4, 2154c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   21546:	4620      	mov	r0, r4
   21548:	f7ff ff18 	bl	2137c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2154c:	480b      	ldr	r0, [pc, #44]	; (2157c <z_unpend1_no_timeout+0x7c>)
   2154e:	f7fe f81b 	bl	1f588 <z_spin_unlock_valid>
   21552:	b968      	cbnz	r0, 21570 <z_unpend1_no_timeout+0x70>
   21554:	23c2      	movs	r3, #194	; 0xc2
   21556:	4a0a      	ldr	r2, [pc, #40]	; (21580 <z_unpend1_no_timeout+0x80>)
   21558:	490d      	ldr	r1, [pc, #52]	; (21590 <z_unpend1_no_timeout+0x90>)
   2155a:	480b      	ldr	r0, [pc, #44]	; (21588 <z_unpend1_no_timeout+0x88>)
   2155c:	f003 fa23 	bl	249a6 <assert_print>
   21560:	4906      	ldr	r1, [pc, #24]	; (2157c <z_unpend1_no_timeout+0x7c>)
   21562:	480c      	ldr	r0, [pc, #48]	; (21594 <z_unpend1_no_timeout+0x94>)
   21564:	f003 fa1f 	bl	249a6 <assert_print>
   21568:	21c2      	movs	r1, #194	; 0xc2
   2156a:	e7e2      	b.n	21532 <z_unpend1_no_timeout+0x32>
   2156c:	2400      	movs	r4, #0
   2156e:	e7ed      	b.n	2154c <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   21570:	f386 8811 	msr	BASEPRI, r6
   21574:	f3bf 8f6f 	isb	sy
}
   21578:	4620      	mov	r0, r4
   2157a:	bd70      	pop	{r4, r5, r6, pc}
   2157c:	200214a8 	.word	0x200214a8
   21580:	0002c034 	.word	0x0002c034
   21584:	0002c08d 	.word	0x0002c08d
   21588:	0002b339 	.word	0x0002b339
   2158c:	0002c0a2 	.word	0x0002c0a2
   21590:	0002c061 	.word	0x0002c061
   21594:	0002c078 	.word	0x0002c078

00021598 <z_unpend_first_thread>:
{
   21598:	b570      	push	{r4, r5, r6, lr}
   2159a:	4605      	mov	r5, r0
	__asm__ volatile(
   2159c:	f04f 0320 	mov.w	r3, #32
   215a0:	f3ef 8611 	mrs	r6, BASEPRI
   215a4:	f383 8812 	msr	BASEPRI_MAX, r3
   215a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   215ac:	481b      	ldr	r0, [pc, #108]	; (2161c <z_unpend_first_thread+0x84>)
   215ae:	f7fd ffdd 	bl	1f56c <z_spin_lock_valid>
   215b2:	b968      	cbnz	r0, 215d0 <z_unpend_first_thread+0x38>
   215b4:	2394      	movs	r3, #148	; 0x94
   215b6:	4a1a      	ldr	r2, [pc, #104]	; (21620 <z_unpend_first_thread+0x88>)
   215b8:	491a      	ldr	r1, [pc, #104]	; (21624 <z_unpend_first_thread+0x8c>)
   215ba:	481b      	ldr	r0, [pc, #108]	; (21628 <z_unpend_first_thread+0x90>)
   215bc:	f003 f9f3 	bl	249a6 <assert_print>
   215c0:	4916      	ldr	r1, [pc, #88]	; (2161c <z_unpend_first_thread+0x84>)
   215c2:	481a      	ldr	r0, [pc, #104]	; (2162c <z_unpend_first_thread+0x94>)
   215c4:	f003 f9ef 	bl	249a6 <assert_print>
   215c8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215ca:	4815      	ldr	r0, [pc, #84]	; (21620 <z_unpend_first_thread+0x88>)
   215cc:	f003 f9e4 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   215d0:	4812      	ldr	r0, [pc, #72]	; (2161c <z_unpend_first_thread+0x84>)
   215d2:	f7fd ffe7 	bl	1f5a4 <z_spin_lock_set_owner>
	return list->head == list;
   215d6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   215d8:	42a5      	cmp	r5, r4
   215da:	d017      	beq.n	2160c <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   215dc:	b134      	cbz	r4, 215ec <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   215de:	4620      	mov	r0, r4
   215e0:	f7ff fecc 	bl	2137c <unpend_thread_no_timeout>
   215e4:	f104 0018 	add.w	r0, r4, #24
   215e8:	f000 fc0c 	bl	21e04 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215ec:	480b      	ldr	r0, [pc, #44]	; (2161c <z_unpend_first_thread+0x84>)
   215ee:	f7fd ffcb 	bl	1f588 <z_spin_unlock_valid>
   215f2:	b968      	cbnz	r0, 21610 <z_unpend_first_thread+0x78>
   215f4:	23c2      	movs	r3, #194	; 0xc2
   215f6:	4a0a      	ldr	r2, [pc, #40]	; (21620 <z_unpend_first_thread+0x88>)
   215f8:	490d      	ldr	r1, [pc, #52]	; (21630 <z_unpend_first_thread+0x98>)
   215fa:	480b      	ldr	r0, [pc, #44]	; (21628 <z_unpend_first_thread+0x90>)
   215fc:	f003 f9d3 	bl	249a6 <assert_print>
   21600:	4906      	ldr	r1, [pc, #24]	; (2161c <z_unpend_first_thread+0x84>)
   21602:	480c      	ldr	r0, [pc, #48]	; (21634 <z_unpend_first_thread+0x9c>)
   21604:	f003 f9cf 	bl	249a6 <assert_print>
   21608:	21c2      	movs	r1, #194	; 0xc2
   2160a:	e7de      	b.n	215ca <z_unpend_first_thread+0x32>
   2160c:	2400      	movs	r4, #0
   2160e:	e7ed      	b.n	215ec <z_unpend_first_thread+0x54>
	__asm__ volatile(
   21610:	f386 8811 	msr	BASEPRI, r6
   21614:	f3bf 8f6f 	isb	sy
}
   21618:	4620      	mov	r0, r4
   2161a:	bd70      	pop	{r4, r5, r6, pc}
   2161c:	200214a8 	.word	0x200214a8
   21620:	0002c034 	.word	0x0002c034
   21624:	0002c08d 	.word	0x0002c08d
   21628:	0002b339 	.word	0x0002b339
   2162c:	0002c0a2 	.word	0x0002c0a2
   21630:	0002c061 	.word	0x0002c061
   21634:	0002c078 	.word	0x0002c078

00021638 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21638:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2163a:	4b04      	ldr	r3, [pc, #16]	; (2164c <z_sched_init+0x14>)
   2163c:	4608      	mov	r0, r1
   2163e:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   21642:	e9c3 2208 	strd	r2, r2, [r3, #32]
   21646:	f7ff b96b 	b.w	20920 <k_sched_time_slice_set>
   2164a:	bf00      	nop
   2164c:	20021460 	.word	0x20021460

00021650 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   21650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21652:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21656:	b16b      	cbz	r3, 21674 <z_impl_k_yield+0x24>
   21658:	493c      	ldr	r1, [pc, #240]	; (2174c <z_impl_k_yield+0xfc>)
   2165a:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   2165e:	4a3c      	ldr	r2, [pc, #240]	; (21750 <z_impl_k_yield+0x100>)
   21660:	483c      	ldr	r0, [pc, #240]	; (21754 <z_impl_k_yield+0x104>)
   21662:	f003 f9a0 	bl	249a6 <assert_print>
   21666:	483c      	ldr	r0, [pc, #240]	; (21758 <z_impl_k_yield+0x108>)
   21668:	f003 f99d 	bl	249a6 <assert_print>
   2166c:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21670:	4837      	ldr	r0, [pc, #220]	; (21750 <z_impl_k_yield+0x100>)
   21672:	e017      	b.n	216a4 <z_impl_k_yield+0x54>
	__asm__ volatile(
   21674:	f04f 0320 	mov.w	r3, #32
   21678:	f3ef 8611 	mrs	r6, BASEPRI
   2167c:	f383 8812 	msr	BASEPRI_MAX, r3
   21680:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21684:	4835      	ldr	r0, [pc, #212]	; (2175c <z_impl_k_yield+0x10c>)
   21686:	f7fd ff71 	bl	1f56c <z_spin_lock_valid>
   2168a:	b968      	cbnz	r0, 216a8 <z_impl_k_yield+0x58>
   2168c:	2394      	movs	r3, #148	; 0x94
   2168e:	4a34      	ldr	r2, [pc, #208]	; (21760 <z_impl_k_yield+0x110>)
   21690:	4934      	ldr	r1, [pc, #208]	; (21764 <z_impl_k_yield+0x114>)
   21692:	4830      	ldr	r0, [pc, #192]	; (21754 <z_impl_k_yield+0x104>)
   21694:	f003 f987 	bl	249a6 <assert_print>
   21698:	4930      	ldr	r1, [pc, #192]	; (2175c <z_impl_k_yield+0x10c>)
   2169a:	4833      	ldr	r0, [pc, #204]	; (21768 <z_impl_k_yield+0x118>)
   2169c:	f003 f983 	bl	249a6 <assert_print>
   216a0:	2194      	movs	r1, #148	; 0x94
   216a2:	482f      	ldr	r0, [pc, #188]	; (21760 <z_impl_k_yield+0x110>)
   216a4:	f003 f978 	bl	24998 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   216a8:	4c30      	ldr	r4, [pc, #192]	; (2176c <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   216aa:	482c      	ldr	r0, [pc, #176]	; (2175c <z_impl_k_yield+0x10c>)
   216ac:	f7fd ff7a 	bl	1f5a4 <z_spin_lock_set_owner>
   216b0:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   216b2:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   216b6:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   216b8:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   216ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   216be:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   216c0:	f7ff fb92 	bl	20de8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   216c4:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   216c6:	7b5a      	ldrb	r2, [r3, #13]
   216c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   216cc:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   216ce:	4a28      	ldr	r2, [pc, #160]	; (21770 <z_impl_k_yield+0x120>)
   216d0:	4293      	cmp	r3, r2
   216d2:	d107      	bne.n	216e4 <z_impl_k_yield+0x94>
   216d4:	4927      	ldr	r1, [pc, #156]	; (21774 <z_impl_k_yield+0x124>)
   216d6:	23ba      	movs	r3, #186	; 0xba
   216d8:	4a1d      	ldr	r2, [pc, #116]	; (21750 <z_impl_k_yield+0x100>)
   216da:	481e      	ldr	r0, [pc, #120]	; (21754 <z_impl_k_yield+0x104>)
   216dc:	f003 f963 	bl	249a6 <assert_print>
   216e0:	21ba      	movs	r1, #186	; 0xba
   216e2:	e7c5      	b.n	21670 <z_impl_k_yield+0x20>
	return list->head == list;
   216e4:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   216e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   216e8:	42aa      	cmp	r2, r5
   216ea:	bf08      	it	eq
   216ec:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   216ee:	b922      	cbnz	r2, 216fa <z_impl_k_yield+0xaa>
	node->prev = tail;
   216f0:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   216f4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   216f6:	6263      	str	r3, [r4, #36]	; 0x24
}
   216f8:	e00c      	b.n	21714 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   216fa:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   216fe:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   21702:	42b8      	cmp	r0, r7
   21704:	d019      	beq.n	2173a <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21706:	4287      	cmp	r7, r0
   21708:	dd17      	ble.n	2173a <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   2170a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2170c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   21710:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   21712:	6053      	str	r3, [r2, #4]
	update_cache(1);
   21714:	2001      	movs	r0, #1
   21716:	f7ff f885 	bl	20824 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2171a:	4810      	ldr	r0, [pc, #64]	; (2175c <z_impl_k_yield+0x10c>)
   2171c:	f7fd ff34 	bl	1f588 <z_spin_unlock_valid>
   21720:	b978      	cbnz	r0, 21742 <z_impl_k_yield+0xf2>
   21722:	23e1      	movs	r3, #225	; 0xe1
   21724:	4a0e      	ldr	r2, [pc, #56]	; (21760 <z_impl_k_yield+0x110>)
   21726:	4914      	ldr	r1, [pc, #80]	; (21778 <z_impl_k_yield+0x128>)
   21728:	480a      	ldr	r0, [pc, #40]	; (21754 <z_impl_k_yield+0x104>)
   2172a:	f003 f93c 	bl	249a6 <assert_print>
   2172e:	490b      	ldr	r1, [pc, #44]	; (2175c <z_impl_k_yield+0x10c>)
   21730:	4812      	ldr	r0, [pc, #72]	; (2177c <z_impl_k_yield+0x12c>)
   21732:	f003 f938 	bl	249a6 <assert_print>
   21736:	21e1      	movs	r1, #225	; 0xe1
   21738:	e7b3      	b.n	216a2 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   2173a:	428a      	cmp	r2, r1
   2173c:	d0d8      	beq.n	216f0 <z_impl_k_yield+0xa0>
   2173e:	6812      	ldr	r2, [r2, #0]
   21740:	e7d5      	b.n	216ee <z_impl_k_yield+0x9e>
   21742:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   21744:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21748:	f7ee bbc2 	b.w	fed0 <arch_swap>
   2174c:	00030366 	.word	0x00030366
   21750:	000305d3 	.word	0x000305d3
   21754:	0002b339 	.word	0x0002b339
   21758:	0002ee3a 	.word	0x0002ee3a
   2175c:	200214a8 	.word	0x200214a8
   21760:	0002c034 	.word	0x0002c034
   21764:	0002c08d 	.word	0x0002c08d
   21768:	0002c0a2 	.word	0x0002c0a2
   2176c:	20021460 	.word	0x20021460
   21770:	20009b68 	.word	0x20009b68
   21774:	0003061c 	.word	0x0003061c
   21778:	0002c061 	.word	0x0002c061
   2177c:	0002c078 	.word	0x0002c078

00021780 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   21780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21784:	4605      	mov	r5, r0
   21786:	460e      	mov	r6, r1
   21788:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2178c:	b16b      	cbz	r3, 217aa <z_tick_sleep+0x2a>
   2178e:	493f      	ldr	r1, [pc, #252]	; (2188c <z_tick_sleep+0x10c>)
   21790:	f240 538c 	movw	r3, #1420	; 0x58c
   21794:	4a3e      	ldr	r2, [pc, #248]	; (21890 <z_tick_sleep+0x110>)
   21796:	483f      	ldr	r0, [pc, #252]	; (21894 <z_tick_sleep+0x114>)
   21798:	f003 f905 	bl	249a6 <assert_print>
   2179c:	483e      	ldr	r0, [pc, #248]	; (21898 <z_tick_sleep+0x118>)
   2179e:	f003 f902 	bl	249a6 <assert_print>
   217a2:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   217a6:	483a      	ldr	r0, [pc, #232]	; (21890 <z_tick_sleep+0x110>)
   217a8:	e025      	b.n	217f6 <z_tick_sleep+0x76>
	if (ticks == 0) {
   217aa:	ea50 0301 	orrs.w	r3, r0, r1
   217ae:	d103      	bne.n	217b8 <z_tick_sleep+0x38>
	z_impl_k_yield();
   217b0:	f7ff ff4e 	bl	21650 <z_impl_k_yield>
		return 0;
   217b4:	2000      	movs	r0, #0
   217b6:	e066      	b.n	21886 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   217b8:	1c82      	adds	r2, r0, #2
   217ba:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   217be:	db1c      	blt.n	217fa <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   217c0:	f007 fd48 	bl	29254 <sys_clock_tick_get_32>
   217c4:	1944      	adds	r4, r0, r5
   217c6:	f04f 0320 	mov.w	r3, #32
   217ca:	f3ef 8811 	mrs	r8, BASEPRI
   217ce:	f383 8812 	msr	BASEPRI_MAX, r3
   217d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   217d6:	4831      	ldr	r0, [pc, #196]	; (2189c <z_tick_sleep+0x11c>)
   217d8:	f7fd fec8 	bl	1f56c <z_spin_lock_valid>
   217dc:	b988      	cbnz	r0, 21802 <z_tick_sleep+0x82>
   217de:	2394      	movs	r3, #148	; 0x94
   217e0:	4a2f      	ldr	r2, [pc, #188]	; (218a0 <z_tick_sleep+0x120>)
   217e2:	4930      	ldr	r1, [pc, #192]	; (218a4 <z_tick_sleep+0x124>)
   217e4:	482b      	ldr	r0, [pc, #172]	; (21894 <z_tick_sleep+0x114>)
   217e6:	f003 f8de 	bl	249a6 <assert_print>
   217ea:	492c      	ldr	r1, [pc, #176]	; (2189c <z_tick_sleep+0x11c>)
   217ec:	482e      	ldr	r0, [pc, #184]	; (218a8 <z_tick_sleep+0x128>)
   217ee:	f003 f8da 	bl	249a6 <assert_print>
   217f2:	2194      	movs	r1, #148	; 0x94
   217f4:	482a      	ldr	r0, [pc, #168]	; (218a0 <z_tick_sleep+0x120>)
   217f6:	f003 f8cf 	bl	24998 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   217fa:	f06f 0401 	mvn.w	r4, #1
   217fe:	1a24      	subs	r4, r4, r0
   21800:	e7e1      	b.n	217c6 <z_tick_sleep+0x46>
	pending_current = _current;
   21802:	4f2a      	ldr	r7, [pc, #168]	; (218ac <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   21804:	4825      	ldr	r0, [pc, #148]	; (2189c <z_tick_sleep+0x11c>)
   21806:	f7fd fecd 	bl	1f5a4 <z_spin_lock_set_owner>
   2180a:	68b8      	ldr	r0, [r7, #8]
   2180c:	4b28      	ldr	r3, [pc, #160]	; (218b0 <z_tick_sleep+0x130>)
   2180e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21810:	f7ff fbd2 	bl	20fb8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21814:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21816:	462a      	mov	r2, r5
   21818:	4633      	mov	r3, r6
   2181a:	3018      	adds	r0, #24
   2181c:	4925      	ldr	r1, [pc, #148]	; (218b4 <z_tick_sleep+0x134>)
   2181e:	f000 fa2b 	bl	21c78 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21822:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21824:	481d      	ldr	r0, [pc, #116]	; (2189c <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21826:	7b53      	ldrb	r3, [r2, #13]
   21828:	f043 0310 	orr.w	r3, r3, #16
   2182c:	7353      	strb	r3, [r2, #13]
   2182e:	f7fd feab 	bl	1f588 <z_spin_unlock_valid>
   21832:	b958      	cbnz	r0, 2184c <z_tick_sleep+0xcc>
   21834:	23e1      	movs	r3, #225	; 0xe1
   21836:	4a1a      	ldr	r2, [pc, #104]	; (218a0 <z_tick_sleep+0x120>)
   21838:	491f      	ldr	r1, [pc, #124]	; (218b8 <z_tick_sleep+0x138>)
   2183a:	4816      	ldr	r0, [pc, #88]	; (21894 <z_tick_sleep+0x114>)
   2183c:	f003 f8b3 	bl	249a6 <assert_print>
   21840:	4916      	ldr	r1, [pc, #88]	; (2189c <z_tick_sleep+0x11c>)
   21842:	481e      	ldr	r0, [pc, #120]	; (218bc <z_tick_sleep+0x13c>)
   21844:	f003 f8af 	bl	249a6 <assert_print>
   21848:	21e1      	movs	r1, #225	; 0xe1
   2184a:	e7d3      	b.n	217f4 <z_tick_sleep+0x74>
   2184c:	4640      	mov	r0, r8
   2184e:	f7ee fb3f 	bl	fed0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   21852:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21854:	7b5b      	ldrb	r3, [r3, #13]
   21856:	06db      	lsls	r3, r3, #27
   21858:	d50c      	bpl.n	21874 <z_tick_sleep+0xf4>
   2185a:	4919      	ldr	r1, [pc, #100]	; (218c0 <z_tick_sleep+0x140>)
   2185c:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   21860:	4a0b      	ldr	r2, [pc, #44]	; (21890 <z_tick_sleep+0x110>)
   21862:	480c      	ldr	r0, [pc, #48]	; (21894 <z_tick_sleep+0x114>)
   21864:	f003 f89f 	bl	249a6 <assert_print>
   21868:	480b      	ldr	r0, [pc, #44]	; (21898 <z_tick_sleep+0x118>)
   2186a:	f003 f89c 	bl	249a6 <assert_print>
   2186e:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   21872:	e798      	b.n	217a6 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   21874:	f007 fcee 	bl	29254 <sys_clock_tick_get_32>
   21878:	1a20      	subs	r0, r4, r0
   2187a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2187e:	2801      	cmp	r0, #1
   21880:	f173 0300 	sbcs.w	r3, r3, #0
   21884:	db96      	blt.n	217b4 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   21886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2188a:	bf00      	nop
   2188c:	00030366 	.word	0x00030366
   21890:	000305d3 	.word	0x000305d3
   21894:	0002b339 	.word	0x0002b339
   21898:	0002ee3a 	.word	0x0002ee3a
   2189c:	200214a8 	.word	0x200214a8
   218a0:	0002c034 	.word	0x0002c034
   218a4:	0002c08d 	.word	0x0002c08d
   218a8:	0002c0a2 	.word	0x0002c0a2
   218ac:	20021460 	.word	0x20021460
   218b0:	2002149c 	.word	0x2002149c
   218b4:	00021451 	.word	0x00021451
   218b8:	0002c061 	.word	0x0002c061
   218bc:	0002c078 	.word	0x0002c078
   218c0:	00030718 	.word	0x00030718

000218c4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   218c4:	b508      	push	{r3, lr}
   218c6:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   218ca:	b173      	cbz	r3, 218ea <z_impl_k_sleep+0x26>
   218cc:	4912      	ldr	r1, [pc, #72]	; (21918 <z_impl_k_sleep+0x54>)
   218ce:	f240 53b7 	movw	r3, #1463	; 0x5b7
   218d2:	4a12      	ldr	r2, [pc, #72]	; (2191c <z_impl_k_sleep+0x58>)
   218d4:	4812      	ldr	r0, [pc, #72]	; (21920 <z_impl_k_sleep+0x5c>)
   218d6:	f003 f866 	bl	249a6 <assert_print>
   218da:	4812      	ldr	r0, [pc, #72]	; (21924 <z_impl_k_sleep+0x60>)
   218dc:	f003 f863 	bl	249a6 <assert_print>
   218e0:	f240 51b7 	movw	r1, #1463	; 0x5b7
   218e4:	480d      	ldr	r0, [pc, #52]	; (2191c <z_impl_k_sleep+0x58>)
   218e6:	f003 f857 	bl	24998 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   218ea:	f1b1 3fff 	cmp.w	r1, #4294967295
   218ee:	bf08      	it	eq
   218f0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   218f4:	d106      	bne.n	21904 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   218f6:	4b0c      	ldr	r3, [pc, #48]	; (21928 <z_impl_k_sleep+0x64>)
   218f8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   218fa:	f7ff fcd7 	bl	212ac <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   218fe:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   21902:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   21904:	f7ff ff3c 	bl	21780 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   21908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2190c:	fb80 0303 	smull	r0, r3, r0, r3
   21910:	0bc0      	lsrs	r0, r0, #15
   21912:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   21916:	e7f4      	b.n	21902 <z_impl_k_sleep+0x3e>
   21918:	00030366 	.word	0x00030366
   2191c:	000305d3 	.word	0x000305d3
   21920:	0002b339 	.word	0x0002b339
   21924:	0002ee3a 	.word	0x0002ee3a
   21928:	20021460 	.word	0x20021460

0002192c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2192c:	4b01      	ldr	r3, [pc, #4]	; (21934 <z_impl_z_current_get+0x8>)
   2192e:	6898      	ldr	r0, [r3, #8]
   21930:	4770      	bx	lr
   21932:	bf00      	nop
   21934:	20021460 	.word	0x20021460

00021938 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   21938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2193c:	4604      	mov	r4, r0
   2193e:	f04f 0320 	mov.w	r3, #32
   21942:	f3ef 8611 	mrs	r6, BASEPRI
   21946:	f383 8812 	msr	BASEPRI_MAX, r3
   2194a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2194e:	4851      	ldr	r0, [pc, #324]	; (21a94 <z_thread_abort+0x15c>)
   21950:	f7fd fe0c 	bl	1f56c <z_spin_lock_valid>
   21954:	b968      	cbnz	r0, 21972 <z_thread_abort+0x3a>
   21956:	2394      	movs	r3, #148	; 0x94
   21958:	4a4f      	ldr	r2, [pc, #316]	; (21a98 <z_thread_abort+0x160>)
   2195a:	4950      	ldr	r1, [pc, #320]	; (21a9c <z_thread_abort+0x164>)
   2195c:	4850      	ldr	r0, [pc, #320]	; (21aa0 <z_thread_abort+0x168>)
   2195e:	f003 f822 	bl	249a6 <assert_print>
   21962:	494c      	ldr	r1, [pc, #304]	; (21a94 <z_thread_abort+0x15c>)
   21964:	484f      	ldr	r0, [pc, #316]	; (21aa4 <z_thread_abort+0x16c>)
   21966:	f003 f81e 	bl	249a6 <assert_print>
   2196a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2196c:	484a      	ldr	r0, [pc, #296]	; (21a98 <z_thread_abort+0x160>)
   2196e:	f003 f813 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   21972:	4848      	ldr	r0, [pc, #288]	; (21a94 <z_thread_abort+0x15c>)
   21974:	f7fd fe16 	bl	1f5a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   21978:	7b23      	ldrb	r3, [r4, #12]
   2197a:	07d9      	lsls	r1, r3, #31
   2197c:	d522      	bpl.n	219c4 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2197e:	4845      	ldr	r0, [pc, #276]	; (21a94 <z_thread_abort+0x15c>)
   21980:	f7fd fe02 	bl	1f588 <z_spin_unlock_valid>
   21984:	b958      	cbnz	r0, 2199e <z_thread_abort+0x66>
   21986:	23c2      	movs	r3, #194	; 0xc2
   21988:	4a43      	ldr	r2, [pc, #268]	; (21a98 <z_thread_abort+0x160>)
   2198a:	4947      	ldr	r1, [pc, #284]	; (21aa8 <z_thread_abort+0x170>)
   2198c:	4844      	ldr	r0, [pc, #272]	; (21aa0 <z_thread_abort+0x168>)
   2198e:	f003 f80a 	bl	249a6 <assert_print>
   21992:	4940      	ldr	r1, [pc, #256]	; (21a94 <z_thread_abort+0x15c>)
   21994:	4845      	ldr	r0, [pc, #276]	; (21aac <z_thread_abort+0x174>)
   21996:	f003 f806 	bl	249a6 <assert_print>
   2199a:	21c2      	movs	r1, #194	; 0xc2
   2199c:	e7e6      	b.n	2196c <z_thread_abort+0x34>
	__asm__ volatile(
   2199e:	f386 8811 	msr	BASEPRI, r6
   219a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   219a6:	f240 63c3 	movw	r3, #1731	; 0x6c3
   219aa:	4a41      	ldr	r2, [pc, #260]	; (21ab0 <z_thread_abort+0x178>)
   219ac:	4941      	ldr	r1, [pc, #260]	; (21ab4 <z_thread_abort+0x17c>)
   219ae:	483c      	ldr	r0, [pc, #240]	; (21aa0 <z_thread_abort+0x168>)
   219b0:	f002 fff9 	bl	249a6 <assert_print>
   219b4:	4621      	mov	r1, r4
   219b6:	4840      	ldr	r0, [pc, #256]	; (21ab8 <z_thread_abort+0x180>)
   219b8:	f002 fff5 	bl	249a6 <assert_print>
   219bc:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   219c0:	483b      	ldr	r0, [pc, #236]	; (21ab0 <z_thread_abort+0x178>)
   219c2:	e7d4      	b.n	2196e <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   219c4:	7b63      	ldrb	r3, [r4, #13]
   219c6:	071a      	lsls	r2, r3, #28
   219c8:	d50a      	bpl.n	219e0 <z_thread_abort+0xa8>
   219ca:	4832      	ldr	r0, [pc, #200]	; (21a94 <z_thread_abort+0x15c>)
   219cc:	f7fd fddc 	bl	1f588 <z_spin_unlock_valid>
   219d0:	2800      	cmp	r0, #0
   219d2:	d0d8      	beq.n	21986 <z_thread_abort+0x4e>
   219d4:	f386 8811 	msr	BASEPRI, r6
   219d8:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   219dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   219e0:	f023 0220 	bic.w	r2, r3, #32
   219e4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   219e8:	09d2      	lsrs	r2, r2, #7
   219ea:	d12c      	bne.n	21a46 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   219ec:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   219ee:	68a3      	ldr	r3, [r4, #8]
   219f0:	b113      	cbz	r3, 219f8 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   219f2:	4620      	mov	r0, r4
   219f4:	f7ff fcc2 	bl	2137c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   219f8:	f104 0018 	add.w	r0, r4, #24
   219fc:	f000 fa02 	bl	21e04 <z_abort_timeout>
   21a00:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21a04:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   21a08:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21a0a:	42bd      	cmp	r5, r7
   21a0c:	d000      	beq.n	21a10 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21a0e:	bb25      	cbnz	r5, 21a5a <z_thread_abort+0x122>
		update_cache(1);
   21a10:	2001      	movs	r0, #1
   21a12:	f7fe ff07 	bl	20824 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   21a16:	4b29      	ldr	r3, [pc, #164]	; (21abc <z_thread_abort+0x184>)
   21a18:	689b      	ldr	r3, [r3, #8]
   21a1a:	42a3      	cmp	r3, r4
   21a1c:	d1d5      	bne.n	219ca <z_thread_abort+0x92>
   21a1e:	f3ef 8305 	mrs	r3, IPSR
   21a22:	2b00      	cmp	r3, #0
   21a24:	d1d1      	bne.n	219ca <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a26:	481b      	ldr	r0, [pc, #108]	; (21a94 <z_thread_abort+0x15c>)
   21a28:	f7fd fdae 	bl	1f588 <z_spin_unlock_valid>
   21a2c:	bb10      	cbnz	r0, 21a74 <z_thread_abort+0x13c>
   21a2e:	23e1      	movs	r3, #225	; 0xe1
   21a30:	4a19      	ldr	r2, [pc, #100]	; (21a98 <z_thread_abort+0x160>)
   21a32:	491d      	ldr	r1, [pc, #116]	; (21aa8 <z_thread_abort+0x170>)
   21a34:	481a      	ldr	r0, [pc, #104]	; (21aa0 <z_thread_abort+0x168>)
   21a36:	f002 ffb6 	bl	249a6 <assert_print>
   21a3a:	4916      	ldr	r1, [pc, #88]	; (21a94 <z_thread_abort+0x15c>)
   21a3c:	481b      	ldr	r0, [pc, #108]	; (21aac <z_thread_abort+0x174>)
   21a3e:	f002 ffb2 	bl	249a6 <assert_print>
   21a42:	21e1      	movs	r1, #225	; 0xe1
   21a44:	e792      	b.n	2196c <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21a46:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   21a4a:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   21a4e:	4621      	mov	r1, r4
   21a50:	481b      	ldr	r0, [pc, #108]	; (21ac0 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21a52:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21a54:	f7ff f9c8 	bl	20de8 <z_priq_dumb_remove>
}
   21a58:	e7c9      	b.n	219ee <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   21a5a:	4628      	mov	r0, r5
   21a5c:	f7ff fc8e 	bl	2137c <unpend_thread_no_timeout>
   21a60:	f105 0018 	add.w	r0, r5, #24
   21a64:	f000 f9ce 	bl	21e04 <z_abort_timeout>
		ready_thread(thread);
   21a68:	4628      	mov	r0, r5
   21a6a:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   21a6e:	f7fe ff0d 	bl	2088c <ready_thread>
   21a72:	e7c9      	b.n	21a08 <z_thread_abort+0xd0>
   21a74:	4630      	mov	r0, r6
   21a76:	f7ee fa2b 	bl	fed0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   21a7a:	490e      	ldr	r1, [pc, #56]	; (21ab4 <z_thread_abort+0x17c>)
   21a7c:	f240 63f2 	movw	r3, #1778	; 0x6f2
   21a80:	4a0b      	ldr	r2, [pc, #44]	; (21ab0 <z_thread_abort+0x178>)
   21a82:	4807      	ldr	r0, [pc, #28]	; (21aa0 <z_thread_abort+0x168>)
   21a84:	f002 ff8f 	bl	249a6 <assert_print>
   21a88:	480e      	ldr	r0, [pc, #56]	; (21ac4 <z_thread_abort+0x18c>)
   21a8a:	f002 ff8c 	bl	249a6 <assert_print>
   21a8e:	f240 61f2 	movw	r1, #1778	; 0x6f2
   21a92:	e795      	b.n	219c0 <z_thread_abort+0x88>
   21a94:	200214a8 	.word	0x200214a8
   21a98:	0002c034 	.word	0x0002c034
   21a9c:	0002c08d 	.word	0x0002c08d
   21aa0:	0002b339 	.word	0x0002b339
   21aa4:	0002c0a2 	.word	0x0002c0a2
   21aa8:	0002c061 	.word	0x0002c061
   21aac:	0002c078 	.word	0x0002c078
   21ab0:	000305d3 	.word	0x000305d3
   21ab4:	00030a97 	.word	0x00030a97
   21ab8:	00030758 	.word	0x00030758
   21abc:	20021460 	.word	0x20021460
   21ac0:	20021480 	.word	0x20021480
   21ac4:	00030777 	.word	0x00030777

00021ac8 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   21ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21acc:	4606      	mov	r6, r0
   21ace:	4688      	mov	r8, r1
   21ad0:	4617      	mov	r7, r2
	__asm__ volatile(
   21ad2:	f04f 0320 	mov.w	r3, #32
   21ad6:	f3ef 8911 	mrs	r9, BASEPRI
   21ada:	f383 8812 	msr	BASEPRI_MAX, r3
   21ade:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ae2:	4821      	ldr	r0, [pc, #132]	; (21b68 <z_sched_wake+0xa0>)
   21ae4:	f7fd fd42 	bl	1f56c <z_spin_lock_valid>
   21ae8:	4605      	mov	r5, r0
   21aea:	b968      	cbnz	r0, 21b08 <z_sched_wake+0x40>
   21aec:	2394      	movs	r3, #148	; 0x94
   21aee:	4a1f      	ldr	r2, [pc, #124]	; (21b6c <z_sched_wake+0xa4>)
   21af0:	491f      	ldr	r1, [pc, #124]	; (21b70 <z_sched_wake+0xa8>)
   21af2:	4820      	ldr	r0, [pc, #128]	; (21b74 <z_sched_wake+0xac>)
   21af4:	f002 ff57 	bl	249a6 <assert_print>
   21af8:	491b      	ldr	r1, [pc, #108]	; (21b68 <z_sched_wake+0xa0>)
   21afa:	481f      	ldr	r0, [pc, #124]	; (21b78 <z_sched_wake+0xb0>)
   21afc:	f002 ff53 	bl	249a6 <assert_print>
   21b00:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b02:	481a      	ldr	r0, [pc, #104]	; (21b6c <z_sched_wake+0xa4>)
   21b04:	f002 ff48 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   21b08:	4817      	ldr	r0, [pc, #92]	; (21b68 <z_sched_wake+0xa0>)
   21b0a:	f7fd fd4b 	bl	1f5a4 <z_spin_lock_set_owner>
	return list->head == list;
   21b0e:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b10:	42a6      	cmp	r6, r4
   21b12:	d01d      	beq.n	21b50 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   21b14:	b1f4      	cbz	r4, 21b54 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   21b16:	4620      	mov	r0, r4
   21b18:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   21b1c:	6167      	str	r7, [r4, #20]
   21b1e:	f7ff fc2d 	bl	2137c <unpend_thread_no_timeout>
   21b22:	f104 0018 	add.w	r0, r4, #24
   21b26:	f000 f96d 	bl	21e04 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   21b2a:	4620      	mov	r0, r4
   21b2c:	f7fe feae 	bl	2088c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b30:	480d      	ldr	r0, [pc, #52]	; (21b68 <z_sched_wake+0xa0>)
   21b32:	f7fd fd29 	bl	1f588 <z_spin_unlock_valid>
   21b36:	b978      	cbnz	r0, 21b58 <z_sched_wake+0x90>
   21b38:	23c2      	movs	r3, #194	; 0xc2
   21b3a:	4a0c      	ldr	r2, [pc, #48]	; (21b6c <z_sched_wake+0xa4>)
   21b3c:	490f      	ldr	r1, [pc, #60]	; (21b7c <z_sched_wake+0xb4>)
   21b3e:	480d      	ldr	r0, [pc, #52]	; (21b74 <z_sched_wake+0xac>)
   21b40:	f002 ff31 	bl	249a6 <assert_print>
   21b44:	4908      	ldr	r1, [pc, #32]	; (21b68 <z_sched_wake+0xa0>)
   21b46:	480e      	ldr	r0, [pc, #56]	; (21b80 <z_sched_wake+0xb8>)
   21b48:	f002 ff2d 	bl	249a6 <assert_print>
   21b4c:	21c2      	movs	r1, #194	; 0xc2
   21b4e:	e7d8      	b.n	21b02 <z_sched_wake+0x3a>
	bool ret = false;
   21b50:	2500      	movs	r5, #0
   21b52:	e7ed      	b.n	21b30 <z_sched_wake+0x68>
   21b54:	4625      	mov	r5, r4
   21b56:	e7eb      	b.n	21b30 <z_sched_wake+0x68>
	__asm__ volatile(
   21b58:	f389 8811 	msr	BASEPRI, r9
   21b5c:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   21b60:	4628      	mov	r0, r5
   21b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21b66:	bf00      	nop
   21b68:	200214a8 	.word	0x200214a8
   21b6c:	0002c034 	.word	0x0002c034
   21b70:	0002c08d 	.word	0x0002c08d
   21b74:	0002b339 	.word	0x0002b339
   21b78:	0002c0a2 	.word	0x0002c0a2
   21b7c:	0002c061 	.word	0x0002c061
   21b80:	0002c078 	.word	0x0002c078

00021b84 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   21b84:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21b86:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   21b8a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21b8c:	e9cd 6700 	strd	r6, r7, [sp]
   21b90:	f7ff fa84 	bl	2109c <z_pend_curr>

	if (data != NULL) {
   21b94:	b11c      	cbz	r4, 21b9e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   21b96:	4b03      	ldr	r3, [pc, #12]	; (21ba4 <z_sched_wait+0x20>)
   21b98:	689b      	ldr	r3, [r3, #8]
   21b9a:	695b      	ldr	r3, [r3, #20]
   21b9c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   21b9e:	b002      	add	sp, #8
   21ba0:	bdd0      	pop	{r4, r6, r7, pc}
   21ba2:	bf00      	nop
   21ba4:	20021460 	.word	0x20021460

00021ba8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   21ba8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   21baa:	4806      	ldr	r0, [pc, #24]	; (21bc4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   21bac:	4a06      	ldr	r2, [pc, #24]	; (21bc8 <z_data_copy+0x20>)
   21bae:	4907      	ldr	r1, [pc, #28]	; (21bcc <z_data_copy+0x24>)
   21bb0:	1a12      	subs	r2, r2, r0
   21bb2:	f007 fa39 	bl	29028 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   21bba:	4a05      	ldr	r2, [pc, #20]	; (21bd0 <z_data_copy+0x28>)
   21bbc:	4905      	ldr	r1, [pc, #20]	; (21bd4 <z_data_copy+0x2c>)
   21bbe:	4806      	ldr	r0, [pc, #24]	; (21bd8 <z_data_copy+0x30>)
   21bc0:	f007 ba32 	b.w	29028 <z_early_memcpy>
   21bc4:	20008000 	.word	0x20008000
   21bc8:	20008d54 	.word	0x20008d54
   21bcc:	00030d98 	.word	0x00030d98
   21bd0:	00000000 	.word	0x00000000
   21bd4:	00030d98 	.word	0x00030d98
   21bd8:	20008000 	.word	0x20008000

00021bdc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   21bdc:	4b03      	ldr	r3, [pc, #12]	; (21bec <elapsed+0x10>)
   21bde:	681b      	ldr	r3, [r3, #0]
   21be0:	b90b      	cbnz	r3, 21be6 <elapsed+0xa>
   21be2:	f7fa baa1 	b.w	1c128 <sys_clock_elapsed>
}
   21be6:	2000      	movs	r0, #0
   21be8:	4770      	bx	lr
   21bea:	bf00      	nop
   21bec:	200214ac 	.word	0x200214ac

00021bf0 <next_timeout>:

static int32_t next_timeout(void)
{
   21bf0:	b510      	push	{r4, lr}
	return list->head == list;
   21bf2:	4b11      	ldr	r3, [pc, #68]	; (21c38 <next_timeout+0x48>)
   21bf4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21bf6:	429c      	cmp	r4, r3
   21bf8:	d10a      	bne.n	21c10 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   21bfa:	f7ff ffef 	bl	21bdc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   21bfe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   21c02:	4b0e      	ldr	r3, [pc, #56]	; (21c3c <next_timeout+0x4c>)
   21c04:	691b      	ldr	r3, [r3, #16]
   21c06:	b113      	cbz	r3, 21c0e <next_timeout+0x1e>
   21c08:	4298      	cmp	r0, r3
   21c0a:	bfa8      	it	ge
   21c0c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   21c0e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   21c10:	f7ff ffe4 	bl	21bdc <elapsed>
	if ((to == NULL) ||
   21c14:	2c00      	cmp	r4, #0
   21c16:	d0f2      	beq.n	21bfe <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   21c18:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   21c1c:	1a1b      	subs	r3, r3, r0
   21c1e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   21c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   21c26:	f172 0100 	sbcs.w	r1, r2, #0
   21c2a:	dae8      	bge.n	21bfe <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   21c2c:	2a00      	cmp	r2, #0
   21c2e:	bfac      	ite	ge
   21c30:	4618      	movge	r0, r3
   21c32:	2000      	movlt	r0, #0
   21c34:	e7e5      	b.n	21c02 <next_timeout+0x12>
   21c36:	bf00      	nop
   21c38:	20008734 	.word	0x20008734
   21c3c:	20021460 	.word	0x20021460

00021c40 <remove_timeout>:
{
   21c40:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21c42:	b170      	cbz	r0, 21c62 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   21c44:	4b0b      	ldr	r3, [pc, #44]	; (21c74 <remove_timeout+0x34>)
   21c46:	685b      	ldr	r3, [r3, #4]
   21c48:	4298      	cmp	r0, r3
   21c4a:	d00a      	beq.n	21c62 <remove_timeout+0x22>
   21c4c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   21c4e:	b143      	cbz	r3, 21c62 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   21c50:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   21c54:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   21c58:	1912      	adds	r2, r2, r4
   21c5a:	eb41 0105 	adc.w	r1, r1, r5
   21c5e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   21c62:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21c66:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21c68:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21c6a:	2300      	movs	r3, #0
	node->prev = NULL;
   21c6c:	e9c0 3300 	strd	r3, r3, [r0]
}
   21c70:	bd30      	pop	{r4, r5, pc}
   21c72:	bf00      	nop
   21c74:	20008734 	.word	0x20008734

00021c78 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21c78:	f1b3 3fff 	cmp.w	r3, #4294967295
   21c7c:	bf08      	it	eq
   21c7e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   21c82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21c86:	4604      	mov	r4, r0
   21c88:	4692      	mov	sl, r2
   21c8a:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21c8c:	f000 809e 	beq.w	21dcc <z_add_timeout+0x154>
	return node->next != NULL;
   21c90:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   21c92:	b166      	cbz	r6, 21cae <z_add_timeout+0x36>
   21c94:	494e      	ldr	r1, [pc, #312]	; (21dd0 <z_add_timeout+0x158>)
   21c96:	2363      	movs	r3, #99	; 0x63
   21c98:	4a4e      	ldr	r2, [pc, #312]	; (21dd4 <z_add_timeout+0x15c>)
   21c9a:	484f      	ldr	r0, [pc, #316]	; (21dd8 <z_add_timeout+0x160>)
   21c9c:	f002 fe83 	bl	249a6 <assert_print>
   21ca0:	484e      	ldr	r0, [pc, #312]	; (21ddc <z_add_timeout+0x164>)
   21ca2:	f002 fe80 	bl	249a6 <assert_print>
   21ca6:	2163      	movs	r1, #99	; 0x63
   21ca8:	484a      	ldr	r0, [pc, #296]	; (21dd4 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21caa:	f002 fe75 	bl	24998 <assert_post_action>
	to->fn = fn;
   21cae:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   21cb0:	f04f 0320 	mov.w	r3, #32
   21cb4:	f3ef 8711 	mrs	r7, BASEPRI
   21cb8:	f383 8812 	msr	BASEPRI_MAX, r3
   21cbc:	f3bf 8f6f 	isb	sy
   21cc0:	4847      	ldr	r0, [pc, #284]	; (21de0 <z_add_timeout+0x168>)
   21cc2:	f7fd fc53 	bl	1f56c <z_spin_lock_valid>
   21cc6:	b960      	cbnz	r0, 21ce2 <z_add_timeout+0x6a>
   21cc8:	2394      	movs	r3, #148	; 0x94
   21cca:	4a46      	ldr	r2, [pc, #280]	; (21de4 <z_add_timeout+0x16c>)
   21ccc:	4946      	ldr	r1, [pc, #280]	; (21de8 <z_add_timeout+0x170>)
   21cce:	4842      	ldr	r0, [pc, #264]	; (21dd8 <z_add_timeout+0x160>)
   21cd0:	f002 fe69 	bl	249a6 <assert_print>
   21cd4:	4942      	ldr	r1, [pc, #264]	; (21de0 <z_add_timeout+0x168>)
   21cd6:	4845      	ldr	r0, [pc, #276]	; (21dec <z_add_timeout+0x174>)
   21cd8:	f002 fe65 	bl	249a6 <assert_print>
   21cdc:	2194      	movs	r1, #148	; 0x94
   21cde:	4841      	ldr	r0, [pc, #260]	; (21de4 <z_add_timeout+0x16c>)
   21ce0:	e7e3      	b.n	21caa <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   21ce2:	483f      	ldr	r0, [pc, #252]	; (21de0 <z_add_timeout+0x168>)
   21ce4:	f7fd fc5e 	bl	1f5a4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   21ce8:	f1ba 3fff 	cmp.w	sl, #4294967295
   21cec:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   21cf0:	da23      	bge.n	21d3a <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   21cf2:	f06f 0301 	mvn.w	r3, #1
   21cf6:	493e      	ldr	r1, [pc, #248]	; (21df0 <z_add_timeout+0x178>)
   21cf8:	e9d1 2000 	ldrd	r2, r0, [r1]
   21cfc:	1a9b      	subs	r3, r3, r2
   21cfe:	f04f 32ff 	mov.w	r2, #4294967295
   21d02:	eb62 0000 	sbc.w	r0, r2, r0
   21d06:	ebb3 030a 	subs.w	r3, r3, sl
   21d0a:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   21d0e:	2b01      	cmp	r3, #1
   21d10:	f170 0200 	sbcs.w	r2, r0, #0
   21d14:	da01      	bge.n	21d1a <z_add_timeout+0xa2>
   21d16:	2301      	movs	r3, #1
   21d18:	4630      	mov	r0, r6
   21d1a:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   21d1e:	4b35      	ldr	r3, [pc, #212]	; (21df4 <z_add_timeout+0x17c>)
   21d20:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   21d22:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21d26:	429a      	cmp	r2, r3
   21d28:	bf18      	it	ne
   21d2a:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   21d2c:	b986      	cbnz	r6, 21d50 <z_add_timeout+0xd8>
	node->prev = tail;
   21d2e:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   21d32:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   21d36:	605c      	str	r4, [r3, #4]
}
   21d38:	e01c      	b.n	21d74 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   21d3a:	f7ff ff4f 	bl	21bdc <elapsed>
   21d3e:	f11a 0801 	adds.w	r8, sl, #1
   21d42:	f145 0500 	adc.w	r5, r5, #0
   21d46:	eb18 0300 	adds.w	r3, r8, r0
   21d4a:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   21d4e:	e7e4      	b.n	21d1a <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   21d50:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   21d54:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   21d58:	428a      	cmp	r2, r1
   21d5a:	eb70 0e05 	sbcs.w	lr, r0, r5
   21d5e:	da28      	bge.n	21db2 <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   21d60:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   21d62:	6872      	ldr	r2, [r6, #4]
   21d64:	eb65 0500 	sbc.w	r5, r5, r0
   21d68:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   21d6c:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   21d70:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21d72:	6074      	str	r4, [r6, #4]
	return list->head == list;
   21d74:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21d76:	429a      	cmp	r2, r3
   21d78:	d00b      	beq.n	21d92 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   21d7a:	4294      	cmp	r4, r2
   21d7c:	d109      	bne.n	21d92 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   21d7e:	f7ff ff37 	bl	21bf0 <next_timeout>

			if (next_time == 0 ||
   21d82:	b118      	cbz	r0, 21d8c <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   21d84:	4b1c      	ldr	r3, [pc, #112]	; (21df8 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   21d86:	691b      	ldr	r3, [r3, #16]
   21d88:	4283      	cmp	r3, r0
   21d8a:	d002      	beq.n	21d92 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   21d8c:	2100      	movs	r1, #0
   21d8e:	f7fa f99b 	bl	1c0c8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d92:	4813      	ldr	r0, [pc, #76]	; (21de0 <z_add_timeout+0x168>)
   21d94:	f7fd fbf8 	bl	1f588 <z_spin_unlock_valid>
   21d98:	b9a0      	cbnz	r0, 21dc4 <z_add_timeout+0x14c>
   21d9a:	23c2      	movs	r3, #194	; 0xc2
   21d9c:	4a11      	ldr	r2, [pc, #68]	; (21de4 <z_add_timeout+0x16c>)
   21d9e:	4917      	ldr	r1, [pc, #92]	; (21dfc <z_add_timeout+0x184>)
   21da0:	480d      	ldr	r0, [pc, #52]	; (21dd8 <z_add_timeout+0x160>)
   21da2:	f002 fe00 	bl	249a6 <assert_print>
   21da6:	490e      	ldr	r1, [pc, #56]	; (21de0 <z_add_timeout+0x168>)
   21da8:	4815      	ldr	r0, [pc, #84]	; (21e00 <z_add_timeout+0x188>)
   21daa:	f002 fdfc 	bl	249a6 <assert_print>
   21dae:	21c2      	movs	r1, #194	; 0xc2
   21db0:	e795      	b.n	21cde <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   21db2:	1a52      	subs	r2, r2, r1
   21db4:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   21db8:	4566      	cmp	r6, ip
   21dba:	e9c4 2004 	strd	r2, r0, [r4, #16]
   21dbe:	d0b6      	beq.n	21d2e <z_add_timeout+0xb6>
   21dc0:	6836      	ldr	r6, [r6, #0]
   21dc2:	e7b3      	b.n	21d2c <z_add_timeout+0xb4>
	__asm__ volatile(
   21dc4:	f387 8811 	msr	BASEPRI, r7
   21dc8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   21dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21dd0:	000307bd 	.word	0x000307bd
   21dd4:	00030799 	.word	0x00030799
   21dd8:	0002b339 	.word	0x0002b339
   21ddc:	0002ee3a 	.word	0x0002ee3a
   21de0:	200214b0 	.word	0x200214b0
   21de4:	0002c034 	.word	0x0002c034
   21de8:	0002c08d 	.word	0x0002c08d
   21dec:	0002c0a2 	.word	0x0002c0a2
   21df0:	20009d20 	.word	0x20009d20
   21df4:	20008734 	.word	0x20008734
   21df8:	20021460 	.word	0x20021460
   21dfc:	0002c061 	.word	0x0002c061
   21e00:	0002c078 	.word	0x0002c078

00021e04 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   21e04:	b538      	push	{r3, r4, r5, lr}
   21e06:	4604      	mov	r4, r0
	__asm__ volatile(
   21e08:	f04f 0320 	mov.w	r3, #32
   21e0c:	f3ef 8511 	mrs	r5, BASEPRI
   21e10:	f383 8812 	msr	BASEPRI_MAX, r3
   21e14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e18:	4819      	ldr	r0, [pc, #100]	; (21e80 <z_abort_timeout+0x7c>)
   21e1a:	f7fd fba7 	bl	1f56c <z_spin_lock_valid>
   21e1e:	b968      	cbnz	r0, 21e3c <z_abort_timeout+0x38>
   21e20:	2394      	movs	r3, #148	; 0x94
   21e22:	4a18      	ldr	r2, [pc, #96]	; (21e84 <z_abort_timeout+0x80>)
   21e24:	4918      	ldr	r1, [pc, #96]	; (21e88 <z_abort_timeout+0x84>)
   21e26:	4819      	ldr	r0, [pc, #100]	; (21e8c <z_abort_timeout+0x88>)
   21e28:	f002 fdbd 	bl	249a6 <assert_print>
   21e2c:	4914      	ldr	r1, [pc, #80]	; (21e80 <z_abort_timeout+0x7c>)
   21e2e:	4818      	ldr	r0, [pc, #96]	; (21e90 <z_abort_timeout+0x8c>)
   21e30:	f002 fdb9 	bl	249a6 <assert_print>
   21e34:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e36:	4813      	ldr	r0, [pc, #76]	; (21e84 <z_abort_timeout+0x80>)
   21e38:	f002 fdae 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   21e3c:	4810      	ldr	r0, [pc, #64]	; (21e80 <z_abort_timeout+0x7c>)
   21e3e:	f7fd fbb1 	bl	1f5a4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   21e42:	6823      	ldr	r3, [r4, #0]
   21e44:	b19b      	cbz	r3, 21e6e <z_abort_timeout+0x6a>
			remove_timeout(to);
   21e46:	4620      	mov	r0, r4
   21e48:	f7ff fefa 	bl	21c40 <remove_timeout>
			ret = 0;
   21e4c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e4e:	480c      	ldr	r0, [pc, #48]	; (21e80 <z_abort_timeout+0x7c>)
   21e50:	f7fd fb9a 	bl	1f588 <z_spin_unlock_valid>
   21e54:	b970      	cbnz	r0, 21e74 <z_abort_timeout+0x70>
   21e56:	23c2      	movs	r3, #194	; 0xc2
   21e58:	4a0a      	ldr	r2, [pc, #40]	; (21e84 <z_abort_timeout+0x80>)
   21e5a:	490e      	ldr	r1, [pc, #56]	; (21e94 <z_abort_timeout+0x90>)
   21e5c:	480b      	ldr	r0, [pc, #44]	; (21e8c <z_abort_timeout+0x88>)
   21e5e:	f002 fda2 	bl	249a6 <assert_print>
   21e62:	4907      	ldr	r1, [pc, #28]	; (21e80 <z_abort_timeout+0x7c>)
   21e64:	480c      	ldr	r0, [pc, #48]	; (21e98 <z_abort_timeout+0x94>)
   21e66:	f002 fd9e 	bl	249a6 <assert_print>
   21e6a:	21c2      	movs	r1, #194	; 0xc2
   21e6c:	e7e3      	b.n	21e36 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   21e6e:	f06f 0415 	mvn.w	r4, #21
   21e72:	e7ec      	b.n	21e4e <z_abort_timeout+0x4a>
	__asm__ volatile(
   21e74:	f385 8811 	msr	BASEPRI, r5
   21e78:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   21e7c:	4620      	mov	r0, r4
   21e7e:	bd38      	pop	{r3, r4, r5, pc}
   21e80:	200214b0 	.word	0x200214b0
   21e84:	0002c034 	.word	0x0002c034
   21e88:	0002c08d 	.word	0x0002c08d
   21e8c:	0002b339 	.word	0x0002b339
   21e90:	0002c0a2 	.word	0x0002c0a2
   21e94:	0002c061 	.word	0x0002c061
   21e98:	0002c078 	.word	0x0002c078

00021e9c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   21e9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21e9e:	f04f 0320 	mov.w	r3, #32
   21ea2:	f3ef 8511 	mrs	r5, BASEPRI
   21ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   21eaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21eae:	4817      	ldr	r0, [pc, #92]	; (21f0c <z_get_next_timeout_expiry+0x70>)
   21eb0:	f7fd fb5c 	bl	1f56c <z_spin_lock_valid>
   21eb4:	b968      	cbnz	r0, 21ed2 <z_get_next_timeout_expiry+0x36>
   21eb6:	2394      	movs	r3, #148	; 0x94
   21eb8:	4a15      	ldr	r2, [pc, #84]	; (21f10 <z_get_next_timeout_expiry+0x74>)
   21eba:	4916      	ldr	r1, [pc, #88]	; (21f14 <z_get_next_timeout_expiry+0x78>)
   21ebc:	4816      	ldr	r0, [pc, #88]	; (21f18 <z_get_next_timeout_expiry+0x7c>)
   21ebe:	f002 fd72 	bl	249a6 <assert_print>
   21ec2:	4912      	ldr	r1, [pc, #72]	; (21f0c <z_get_next_timeout_expiry+0x70>)
   21ec4:	4815      	ldr	r0, [pc, #84]	; (21f1c <z_get_next_timeout_expiry+0x80>)
   21ec6:	f002 fd6e 	bl	249a6 <assert_print>
   21eca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ecc:	4810      	ldr	r0, [pc, #64]	; (21f10 <z_get_next_timeout_expiry+0x74>)
   21ece:	f002 fd63 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   21ed2:	480e      	ldr	r0, [pc, #56]	; (21f0c <z_get_next_timeout_expiry+0x70>)
   21ed4:	f7fd fb66 	bl	1f5a4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   21ed8:	f7ff fe8a 	bl	21bf0 <next_timeout>
   21edc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ede:	480b      	ldr	r0, [pc, #44]	; (21f0c <z_get_next_timeout_expiry+0x70>)
   21ee0:	f7fd fb52 	bl	1f588 <z_spin_unlock_valid>
   21ee4:	b958      	cbnz	r0, 21efe <z_get_next_timeout_expiry+0x62>
   21ee6:	23c2      	movs	r3, #194	; 0xc2
   21ee8:	4a09      	ldr	r2, [pc, #36]	; (21f10 <z_get_next_timeout_expiry+0x74>)
   21eea:	490d      	ldr	r1, [pc, #52]	; (21f20 <z_get_next_timeout_expiry+0x84>)
   21eec:	480a      	ldr	r0, [pc, #40]	; (21f18 <z_get_next_timeout_expiry+0x7c>)
   21eee:	f002 fd5a 	bl	249a6 <assert_print>
   21ef2:	4906      	ldr	r1, [pc, #24]	; (21f0c <z_get_next_timeout_expiry+0x70>)
   21ef4:	480b      	ldr	r0, [pc, #44]	; (21f24 <z_get_next_timeout_expiry+0x88>)
   21ef6:	f002 fd56 	bl	249a6 <assert_print>
   21efa:	21c2      	movs	r1, #194	; 0xc2
   21efc:	e7e6      	b.n	21ecc <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   21efe:	f385 8811 	msr	BASEPRI, r5
   21f02:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   21f06:	4620      	mov	r0, r4
   21f08:	bd38      	pop	{r3, r4, r5, pc}
   21f0a:	bf00      	nop
   21f0c:	200214b0 	.word	0x200214b0
   21f10:	0002c034 	.word	0x0002c034
   21f14:	0002c08d 	.word	0x0002c08d
   21f18:	0002b339 	.word	0x0002b339
   21f1c:	0002c0a2 	.word	0x0002c0a2
   21f20:	0002c061 	.word	0x0002c061
   21f24:	0002c078 	.word	0x0002c078

00021f28 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   21f28:	b570      	push	{r4, r5, r6, lr}
   21f2a:	4604      	mov	r4, r0
   21f2c:	460d      	mov	r5, r1
	__asm__ volatile(
   21f2e:	f04f 0320 	mov.w	r3, #32
   21f32:	f3ef 8611 	mrs	r6, BASEPRI
   21f36:	f383 8812 	msr	BASEPRI_MAX, r3
   21f3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f3e:	481b      	ldr	r0, [pc, #108]	; (21fac <z_set_timeout_expiry+0x84>)
   21f40:	f7fd fb14 	bl	1f56c <z_spin_lock_valid>
   21f44:	b968      	cbnz	r0, 21f62 <z_set_timeout_expiry+0x3a>
   21f46:	2394      	movs	r3, #148	; 0x94
   21f48:	4a19      	ldr	r2, [pc, #100]	; (21fb0 <z_set_timeout_expiry+0x88>)
   21f4a:	491a      	ldr	r1, [pc, #104]	; (21fb4 <z_set_timeout_expiry+0x8c>)
   21f4c:	481a      	ldr	r0, [pc, #104]	; (21fb8 <z_set_timeout_expiry+0x90>)
   21f4e:	f002 fd2a 	bl	249a6 <assert_print>
   21f52:	4916      	ldr	r1, [pc, #88]	; (21fac <z_set_timeout_expiry+0x84>)
   21f54:	4819      	ldr	r0, [pc, #100]	; (21fbc <z_set_timeout_expiry+0x94>)
   21f56:	f002 fd26 	bl	249a6 <assert_print>
   21f5a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f5c:	4814      	ldr	r0, [pc, #80]	; (21fb0 <z_set_timeout_expiry+0x88>)
   21f5e:	f002 fd1b 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f62:	4812      	ldr	r0, [pc, #72]	; (21fac <z_set_timeout_expiry+0x84>)
   21f64:	f7fd fb1e 	bl	1f5a4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   21f68:	f7ff fe42 	bl	21bf0 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   21f6c:	2801      	cmp	r0, #1
   21f6e:	dd07      	ble.n	21f80 <z_set_timeout_expiry+0x58>
   21f70:	42a0      	cmp	r0, r4
   21f72:	db05      	blt.n	21f80 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   21f74:	42a0      	cmp	r0, r4
   21f76:	4629      	mov	r1, r5
   21f78:	bfa8      	it	ge
   21f7a:	4620      	movge	r0, r4
   21f7c:	f7fa f8a4 	bl	1c0c8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f80:	480a      	ldr	r0, [pc, #40]	; (21fac <z_set_timeout_expiry+0x84>)
   21f82:	f7fd fb01 	bl	1f588 <z_spin_unlock_valid>
   21f86:	b958      	cbnz	r0, 21fa0 <z_set_timeout_expiry+0x78>
   21f88:	23c2      	movs	r3, #194	; 0xc2
   21f8a:	4a09      	ldr	r2, [pc, #36]	; (21fb0 <z_set_timeout_expiry+0x88>)
   21f8c:	490c      	ldr	r1, [pc, #48]	; (21fc0 <z_set_timeout_expiry+0x98>)
   21f8e:	480a      	ldr	r0, [pc, #40]	; (21fb8 <z_set_timeout_expiry+0x90>)
   21f90:	f002 fd09 	bl	249a6 <assert_print>
   21f94:	4905      	ldr	r1, [pc, #20]	; (21fac <z_set_timeout_expiry+0x84>)
   21f96:	480b      	ldr	r0, [pc, #44]	; (21fc4 <z_set_timeout_expiry+0x9c>)
   21f98:	f002 fd05 	bl	249a6 <assert_print>
   21f9c:	21c2      	movs	r1, #194	; 0xc2
   21f9e:	e7dd      	b.n	21f5c <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   21fa0:	f386 8811 	msr	BASEPRI, r6
   21fa4:	f3bf 8f6f 	isb	sy
		}
	}
}
   21fa8:	bd70      	pop	{r4, r5, r6, pc}
   21faa:	bf00      	nop
   21fac:	200214b0 	.word	0x200214b0
   21fb0:	0002c034 	.word	0x0002c034
   21fb4:	0002c08d 	.word	0x0002c08d
   21fb8:	0002b339 	.word	0x0002b339
   21fbc:	0002c0a2 	.word	0x0002c0a2
   21fc0:	0002c061 	.word	0x0002c061
   21fc4:	0002c078 	.word	0x0002c078

00021fc8 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   21fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21fcc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   21fce:	f7fe ff7d 	bl	20ecc <z_time_slice>
	__asm__ volatile(
   21fd2:	f04f 0320 	mov.w	r3, #32
   21fd6:	f3ef 8711 	mrs	r7, BASEPRI
   21fda:	f383 8812 	msr	BASEPRI_MAX, r3
   21fde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21fe2:	483f      	ldr	r0, [pc, #252]	; (220e0 <sys_clock_announce+0x118>)
   21fe4:	f7fd fac2 	bl	1f56c <z_spin_lock_valid>
   21fe8:	b968      	cbnz	r0, 22006 <sys_clock_announce+0x3e>
   21fea:	2394      	movs	r3, #148	; 0x94
   21fec:	4a3d      	ldr	r2, [pc, #244]	; (220e4 <sys_clock_announce+0x11c>)
   21fee:	493e      	ldr	r1, [pc, #248]	; (220e8 <sys_clock_announce+0x120>)
   21ff0:	483e      	ldr	r0, [pc, #248]	; (220ec <sys_clock_announce+0x124>)
   21ff2:	f002 fcd8 	bl	249a6 <assert_print>
   21ff6:	493a      	ldr	r1, [pc, #232]	; (220e0 <sys_clock_announce+0x118>)
   21ff8:	483d      	ldr	r0, [pc, #244]	; (220f0 <sys_clock_announce+0x128>)
   21ffa:	f002 fcd4 	bl	249a6 <assert_print>
   21ffe:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22000:	4838      	ldr	r0, [pc, #224]	; (220e4 <sys_clock_announce+0x11c>)
   22002:	f002 fcc9 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   22006:	4836      	ldr	r0, [pc, #216]	; (220e0 <sys_clock_announce+0x118>)
   22008:	f7fd facc 	bl	1f5a4 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2200c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 220f4 <sys_clock_announce+0x12c>
	return list->head == list;
   22010:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 220f8 <sys_clock_announce+0x130>
   22014:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   22018:	4a38      	ldr	r2, [pc, #224]	; (220fc <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2201a:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   2201c:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   22020:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   22024:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22028:	d00b      	beq.n	22042 <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2202a:	b155      	cbz	r5, 22042 <sys_clock_announce+0x7a>
   2202c:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   22030:	42b4      	cmp	r4, r6
   22032:	eb71 0e00 	sbcs.w	lr, r1, r0
   22036:	da1c      	bge.n	22072 <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   22038:	1b36      	subs	r6, r6, r4
   2203a:	eb60 0001 	sbc.w	r0, r0, r1
   2203e:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   22042:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   22044:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   22048:	eb4c 0101 	adc.w	r1, ip, r1
   2204c:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   22050:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   22054:	f7ff fdcc 	bl	21bf0 <next_timeout>
   22058:	4621      	mov	r1, r4
   2205a:	f7fa f835 	bl	1c0c8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2205e:	4820      	ldr	r0, [pc, #128]	; (220e0 <sys_clock_announce+0x118>)
   22060:	f7fd fa92 	bl	1f588 <z_spin_unlock_valid>
   22064:	b1a8      	cbz	r0, 22092 <sys_clock_announce+0xca>
	__asm__ volatile(
   22066:	f387 8811 	msr	BASEPRI, r7
   2206a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2206e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   22072:	18f3      	adds	r3, r6, r3
   22074:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   22078:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   2207c:	2200      	movs	r2, #0
   2207e:	2300      	movs	r3, #0
		remove_timeout(t);
   22080:	4628      	mov	r0, r5
		t->dticks = 0;
   22082:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   22086:	f7ff fddb 	bl	21c40 <remove_timeout>
   2208a:	4815      	ldr	r0, [pc, #84]	; (220e0 <sys_clock_announce+0x118>)
   2208c:	f7fd fa7c 	bl	1f588 <z_spin_unlock_valid>
   22090:	b958      	cbnz	r0, 220aa <sys_clock_announce+0xe2>
   22092:	23c2      	movs	r3, #194	; 0xc2
   22094:	4a13      	ldr	r2, [pc, #76]	; (220e4 <sys_clock_announce+0x11c>)
   22096:	491a      	ldr	r1, [pc, #104]	; (22100 <sys_clock_announce+0x138>)
   22098:	4814      	ldr	r0, [pc, #80]	; (220ec <sys_clock_announce+0x124>)
   2209a:	f002 fc84 	bl	249a6 <assert_print>
   2209e:	4910      	ldr	r1, [pc, #64]	; (220e0 <sys_clock_announce+0x118>)
   220a0:	4818      	ldr	r0, [pc, #96]	; (22104 <sys_clock_announce+0x13c>)
   220a2:	f002 fc80 	bl	249a6 <assert_print>
   220a6:	21c2      	movs	r1, #194	; 0xc2
   220a8:	e7aa      	b.n	22000 <sys_clock_announce+0x38>
   220aa:	f387 8811 	msr	BASEPRI, r7
   220ae:	f3bf 8f6f 	isb	sy
		t->fn(t);
   220b2:	4628      	mov	r0, r5
   220b4:	68ab      	ldr	r3, [r5, #8]
   220b6:	4798      	blx	r3
	__asm__ volatile(
   220b8:	f04f 0320 	mov.w	r3, #32
   220bc:	f3ef 8711 	mrs	r7, BASEPRI
   220c0:	f383 8812 	msr	BASEPRI_MAX, r3
   220c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   220c8:	4805      	ldr	r0, [pc, #20]	; (220e0 <sys_clock_announce+0x118>)
   220ca:	f7fd fa4f 	bl	1f56c <z_spin_lock_valid>
   220ce:	2800      	cmp	r0, #0
   220d0:	d08b      	beq.n	21fea <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   220d2:	4803      	ldr	r0, [pc, #12]	; (220e0 <sys_clock_announce+0x118>)
   220d4:	f7fd fa66 	bl	1f5a4 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   220d8:	f8d8 4000 	ldr.w	r4, [r8]
   220dc:	1ba4      	subs	r4, r4, r6
   220de:	e799      	b.n	22014 <sys_clock_announce+0x4c>
   220e0:	200214b0 	.word	0x200214b0
   220e4:	0002c034 	.word	0x0002c034
   220e8:	0002c08d 	.word	0x0002c08d
   220ec:	0002b339 	.word	0x0002b339
   220f0:	0002c0a2 	.word	0x0002c0a2
   220f4:	200214ac 	.word	0x200214ac
   220f8:	20008734 	.word	0x20008734
   220fc:	20009d20 	.word	0x20009d20
   22100:	0002c061 	.word	0x0002c061
   22104:	0002c078 	.word	0x0002c078

00022108 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   22108:	b570      	push	{r4, r5, r6, lr}
   2210a:	f04f 0320 	mov.w	r3, #32
   2210e:	f3ef 8611 	mrs	r6, BASEPRI
   22112:	f383 8812 	msr	BASEPRI_MAX, r3
   22116:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2211a:	481a      	ldr	r0, [pc, #104]	; (22184 <sys_clock_tick_get+0x7c>)
   2211c:	f7fd fa26 	bl	1f56c <z_spin_lock_valid>
   22120:	b968      	cbnz	r0, 2213e <sys_clock_tick_get+0x36>
   22122:	2394      	movs	r3, #148	; 0x94
   22124:	4a18      	ldr	r2, [pc, #96]	; (22188 <sys_clock_tick_get+0x80>)
   22126:	4919      	ldr	r1, [pc, #100]	; (2218c <sys_clock_tick_get+0x84>)
   22128:	4819      	ldr	r0, [pc, #100]	; (22190 <sys_clock_tick_get+0x88>)
   2212a:	f002 fc3c 	bl	249a6 <assert_print>
   2212e:	4915      	ldr	r1, [pc, #84]	; (22184 <sys_clock_tick_get+0x7c>)
   22130:	4818      	ldr	r0, [pc, #96]	; (22194 <sys_clock_tick_get+0x8c>)
   22132:	f002 fc38 	bl	249a6 <assert_print>
   22136:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22138:	4813      	ldr	r0, [pc, #76]	; (22188 <sys_clock_tick_get+0x80>)
   2213a:	f002 fc2d 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   2213e:	4811      	ldr	r0, [pc, #68]	; (22184 <sys_clock_tick_get+0x7c>)
   22140:	f7fd fa30 	bl	1f5a4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   22144:	f7ff fd4a 	bl	21bdc <elapsed>
   22148:	4a13      	ldr	r2, [pc, #76]	; (22198 <sys_clock_tick_get+0x90>)
   2214a:	e9d2 4500 	ldrd	r4, r5, [r2]
   2214e:	1904      	adds	r4, r0, r4
   22150:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22154:	480b      	ldr	r0, [pc, #44]	; (22184 <sys_clock_tick_get+0x7c>)
   22156:	f7fd fa17 	bl	1f588 <z_spin_unlock_valid>
   2215a:	b958      	cbnz	r0, 22174 <sys_clock_tick_get+0x6c>
   2215c:	23c2      	movs	r3, #194	; 0xc2
   2215e:	4a0a      	ldr	r2, [pc, #40]	; (22188 <sys_clock_tick_get+0x80>)
   22160:	490e      	ldr	r1, [pc, #56]	; (2219c <sys_clock_tick_get+0x94>)
   22162:	480b      	ldr	r0, [pc, #44]	; (22190 <sys_clock_tick_get+0x88>)
   22164:	f002 fc1f 	bl	249a6 <assert_print>
   22168:	4906      	ldr	r1, [pc, #24]	; (22184 <sys_clock_tick_get+0x7c>)
   2216a:	480d      	ldr	r0, [pc, #52]	; (221a0 <sys_clock_tick_get+0x98>)
   2216c:	f002 fc1b 	bl	249a6 <assert_print>
   22170:	21c2      	movs	r1, #194	; 0xc2
   22172:	e7e1      	b.n	22138 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   22174:	f386 8811 	msr	BASEPRI, r6
   22178:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2217c:	4620      	mov	r0, r4
   2217e:	4629      	mov	r1, r5
   22180:	bd70      	pop	{r4, r5, r6, pc}
   22182:	bf00      	nop
   22184:	200214b0 	.word	0x200214b0
   22188:	0002c034 	.word	0x0002c034
   2218c:	0002c08d 	.word	0x0002c08d
   22190:	0002b339 	.word	0x0002b339
   22194:	0002c0a2 	.word	0x0002c0a2
   22198:	20009d20 	.word	0x20009d20
   2219c:	0002c061 	.word	0x0002c061
   221a0:	0002c078 	.word	0x0002c078

000221a4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   221a4:	b570      	push	{r4, r5, r6, lr}
   221a6:	4604      	mov	r4, r0
	__asm__ volatile(
   221a8:	f04f 0320 	mov.w	r3, #32
   221ac:	f3ef 8511 	mrs	r5, BASEPRI
   221b0:	f383 8812 	msr	BASEPRI_MAX, r3
   221b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   221b8:	4849      	ldr	r0, [pc, #292]	; (222e0 <z_timer_expiration_handler+0x13c>)
   221ba:	f7fd f9d7 	bl	1f56c <z_spin_lock_valid>
   221be:	b968      	cbnz	r0, 221dc <z_timer_expiration_handler+0x38>
   221c0:	2394      	movs	r3, #148	; 0x94
   221c2:	4a48      	ldr	r2, [pc, #288]	; (222e4 <z_timer_expiration_handler+0x140>)
   221c4:	4948      	ldr	r1, [pc, #288]	; (222e8 <z_timer_expiration_handler+0x144>)
   221c6:	4849      	ldr	r0, [pc, #292]	; (222ec <z_timer_expiration_handler+0x148>)
   221c8:	f002 fbed 	bl	249a6 <assert_print>
   221cc:	4944      	ldr	r1, [pc, #272]	; (222e0 <z_timer_expiration_handler+0x13c>)
   221ce:	4848      	ldr	r0, [pc, #288]	; (222f0 <z_timer_expiration_handler+0x14c>)
   221d0:	f002 fbe9 	bl	249a6 <assert_print>
   221d4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221d6:	4843      	ldr	r0, [pc, #268]	; (222e4 <z_timer_expiration_handler+0x140>)
   221d8:	f002 fbde 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   221dc:	4840      	ldr	r0, [pc, #256]	; (222e0 <z_timer_expiration_handler+0x13c>)
   221de:	f7fd f9e1 	bl	1f5a4 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   221e2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   221e6:	3301      	adds	r3, #1
   221e8:	f142 0200 	adc.w	r2, r2, #0
   221ec:	2b02      	cmp	r3, #2
   221ee:	f172 0200 	sbcs.w	r2, r2, #0
   221f2:	d322      	bcc.n	2223a <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   221f4:	f007 f832 	bl	2925c <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   221f8:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   221fc:	3001      	adds	r0, #1
   221fe:	f141 0100 	adc.w	r1, r1, #0
   22202:	18c0      	adds	r0, r0, r3
   22204:	eb41 0102 	adc.w	r1, r1, r2
   22208:	2801      	cmp	r0, #1
   2220a:	f171 0100 	sbcs.w	r1, r1, #0
   2220e:	db29      	blt.n	22264 <z_timer_expiration_handler+0xc0>
   22210:	f007 f824 	bl	2925c <z_impl_k_uptime_ticks>
   22214:	3001      	adds	r0, #1
   22216:	f141 0300 	adc.w	r3, r1, #0
   2221a:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   2221e:	1880      	adds	r0, r0, r2
   22220:	f06f 0201 	mvn.w	r2, #1
   22224:	eb43 0301 	adc.w	r3, r3, r1
   22228:	f04f 31ff 	mov.w	r1, #4294967295
   2222c:	1a12      	subs	r2, r2, r0
   2222e:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22232:	4620      	mov	r0, r4
   22234:	492f      	ldr	r1, [pc, #188]	; (222f4 <z_timer_expiration_handler+0x150>)
   22236:	f7ff fd1f 	bl	21c78 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   2223a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2223c:	3301      	adds	r3, #1
   2223e:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   22240:	6a23      	ldr	r3, [r4, #32]
   22242:	b35b      	cbz	r3, 2229c <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22244:	4826      	ldr	r0, [pc, #152]	; (222e0 <z_timer_expiration_handler+0x13c>)
   22246:	f7fd f99f 	bl	1f588 <z_spin_unlock_valid>
   2224a:	b980      	cbnz	r0, 2226e <z_timer_expiration_handler+0xca>
   2224c:	23c2      	movs	r3, #194	; 0xc2
   2224e:	4a25      	ldr	r2, [pc, #148]	; (222e4 <z_timer_expiration_handler+0x140>)
   22250:	4929      	ldr	r1, [pc, #164]	; (222f8 <z_timer_expiration_handler+0x154>)
   22252:	4826      	ldr	r0, [pc, #152]	; (222ec <z_timer_expiration_handler+0x148>)
   22254:	f002 fba7 	bl	249a6 <assert_print>
   22258:	4921      	ldr	r1, [pc, #132]	; (222e0 <z_timer_expiration_handler+0x13c>)
   2225a:	4828      	ldr	r0, [pc, #160]	; (222fc <z_timer_expiration_handler+0x158>)
   2225c:	f002 fba3 	bl	249a6 <assert_print>
   22260:	21c2      	movs	r1, #194	; 0xc2
   22262:	e7b8      	b.n	221d6 <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   22264:	f06f 0201 	mvn.w	r2, #1
   22268:	f04f 33ff 	mov.w	r3, #4294967295
   2226c:	e7e1      	b.n	22232 <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   2226e:	f385 8811 	msr	BASEPRI, r5
   22272:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   22276:	4620      	mov	r0, r4
   22278:	6a23      	ldr	r3, [r4, #32]
   2227a:	4798      	blx	r3
	__asm__ volatile(
   2227c:	f04f 0320 	mov.w	r3, #32
   22280:	f3ef 8511 	mrs	r5, BASEPRI
   22284:	f383 8812 	msr	BASEPRI_MAX, r3
   22288:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2228c:	4814      	ldr	r0, [pc, #80]	; (222e0 <z_timer_expiration_handler+0x13c>)
   2228e:	f7fd f96d 	bl	1f56c <z_spin_lock_valid>
   22292:	2800      	cmp	r0, #0
   22294:	d094      	beq.n	221c0 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   22296:	4812      	ldr	r0, [pc, #72]	; (222e0 <z_timer_expiration_handler+0x13c>)
   22298:	f7fd f984 	bl	1f5a4 <z_spin_lock_set_owner>
	return list->head == list;
   2229c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   222a0:	42a6      	cmp	r6, r4
   222a2:	d000      	beq.n	222a6 <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   222a4:	b94e      	cbnz	r6, 222ba <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222a6:	480e      	ldr	r0, [pc, #56]	; (222e0 <z_timer_expiration_handler+0x13c>)
   222a8:	f7fd f96e 	bl	1f588 <z_spin_unlock_valid>
   222ac:	2800      	cmp	r0, #0
   222ae:	d0cd      	beq.n	2224c <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   222b0:	f385 8811 	msr	BASEPRI, r5
   222b4:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   222b8:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   222ba:	4630      	mov	r0, r6
   222bc:	f7fe fbda 	bl	20a74 <z_unpend_thread_no_timeout>
   222c0:	2300      	movs	r3, #0
   222c2:	4807      	ldr	r0, [pc, #28]	; (222e0 <z_timer_expiration_handler+0x13c>)
   222c4:	67f3      	str	r3, [r6, #124]	; 0x7c
   222c6:	f7fd f95f 	bl	1f588 <z_spin_unlock_valid>
   222ca:	2800      	cmp	r0, #0
   222cc:	d0be      	beq.n	2224c <z_timer_expiration_handler+0xa8>
   222ce:	f385 8811 	msr	BASEPRI, r5
   222d2:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   222d6:	4630      	mov	r0, r6
}
   222d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   222dc:	f7fe bb84 	b.w	209e8 <z_ready_thread>
   222e0:	200214b4 	.word	0x200214b4
   222e4:	0002c034 	.word	0x0002c034
   222e8:	0002c08d 	.word	0x0002c08d
   222ec:	0002b339 	.word	0x0002b339
   222f0:	0002c0a2 	.word	0x0002c0a2
   222f4:	000221a5 	.word	0x000221a5
   222f8:	0002c061 	.word	0x0002c061
   222fc:	0002c078 	.word	0x0002c078

00022300 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22300:	f1b3 3fff 	cmp.w	r3, #4294967295
   22304:	bf08      	it	eq
   22306:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2230a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2230e:	4619      	mov	r1, r3
   22310:	4605      	mov	r5, r0
   22312:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   22316:	4614      	mov	r4, r2
   22318:	4691      	mov	r9, r2
   2231a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2231c:	d037      	beq.n	2238e <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2231e:	f1b0 3fff 	cmp.w	r0, #4294967295
   22322:	bf08      	it	eq
   22324:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   22328:	4637      	mov	r7, r6
   2232a:	4682      	mov	sl, r0
   2232c:	d011      	beq.n	22352 <z_impl_k_timer_start+0x52>
   2232e:	ea50 0306 	orrs.w	r3, r0, r6
   22332:	d00e      	beq.n	22352 <z_impl_k_timer_start+0x52>
   22334:	1c72      	adds	r2, r6, #1
   22336:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   2233a:	db0a      	blt.n	22352 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   2233c:	2e02      	cmp	r6, #2
   2233e:	4684      	mov	ip, r0
   22340:	f170 0000 	sbcs.w	r0, r0, #0
   22344:	bfbc      	itt	lt
   22346:	2702      	movlt	r7, #2
   22348:	f04f 0c00 	movlt.w	ip, #0
   2234c:	3f01      	subs	r7, #1
   2234e:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22352:	1c63      	adds	r3, r4, #1
   22354:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   22358:	db0a      	blt.n	22370 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2235a:	2c01      	cmp	r4, #1
   2235c:	f171 0300 	sbcs.w	r3, r1, #0
   22360:	4622      	mov	r2, r4
   22362:	bfbc      	itt	lt
   22364:	2201      	movlt	r2, #1
   22366:	2100      	movlt	r1, #0
   22368:	f112 39ff 	adds.w	r9, r2, #4294967295
   2236c:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   22370:	4628      	mov	r0, r5
   22372:	f7ff fd47 	bl	21e04 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   22376:	2300      	movs	r3, #0
	timer->period = period;
   22378:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   2237c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2237e:	464a      	mov	r2, r9
   22380:	4643      	mov	r3, r8
   22382:	4628      	mov	r0, r5
		     duration);
}
   22384:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22388:	4902      	ldr	r1, [pc, #8]	; (22394 <z_impl_k_timer_start+0x94>)
   2238a:	f7ff bc75 	b.w	21c78 <z_add_timeout>
}
   2238e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22392:	bf00      	nop
   22394:	000221a5 	.word	0x000221a5

00022398 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   22398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   2239c:	2600      	movs	r6, #0
{
   2239e:	4688      	mov	r8, r1
   223a0:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   223a2:	4604      	mov	r4, r0
	int events_registered = 0;
   223a4:	4637      	mov	r7, r6
	event->poller = NULL;
   223a6:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223a8:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 22568 <register_events+0x1d0>
{
   223ac:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   223ae:	4546      	cmp	r6, r8
   223b0:	db03      	blt.n	223ba <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   223b2:	4638      	mov	r0, r7
   223b4:	b003      	add	sp, #12
   223b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   223ba:	f04f 0320 	mov.w	r3, #32
   223be:	f3ef 8b11 	mrs	fp, BASEPRI
   223c2:	f383 8812 	msr	BASEPRI_MAX, r3
   223c6:	f3bf 8f6f 	isb	sy
   223ca:	4648      	mov	r0, r9
   223cc:	f7fd f8ce 	bl	1f56c <z_spin_lock_valid>
   223d0:	b960      	cbnz	r0, 223ec <register_events+0x54>
   223d2:	2394      	movs	r3, #148	; 0x94
   223d4:	4a65      	ldr	r2, [pc, #404]	; (2256c <register_events+0x1d4>)
   223d6:	4966      	ldr	r1, [pc, #408]	; (22570 <register_events+0x1d8>)
   223d8:	4866      	ldr	r0, [pc, #408]	; (22574 <register_events+0x1dc>)
   223da:	f002 fae4 	bl	249a6 <assert_print>
   223de:	4962      	ldr	r1, [pc, #392]	; (22568 <register_events+0x1d0>)
   223e0:	4865      	ldr	r0, [pc, #404]	; (22578 <register_events+0x1e0>)
   223e2:	f002 fae0 	bl	249a6 <assert_print>
   223e6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223e8:	4860      	ldr	r0, [pc, #384]	; (2256c <register_events+0x1d4>)
   223ea:	e060      	b.n	224ae <register_events+0x116>
	z_spin_lock_set_owner(l);
   223ec:	4648      	mov	r0, r9
   223ee:	f7fd f8d9 	bl	1f5a4 <z_spin_lock_set_owner>
	switch (event->type) {
   223f2:	7b63      	ldrb	r3, [r4, #13]
   223f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   223f8:	2b08      	cmp	r3, #8
   223fa:	d84a      	bhi.n	22492 <register_events+0xfa>
   223fc:	e8df f003 	tbb	[pc, r3]
   22400:	49053d2b 	.word	0x49053d2b
   22404:	49494927 	.word	0x49494927
   22408:	43          	.byte	0x43
   22409:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   2240a:	6923      	ldr	r3, [r4, #16]
   2240c:	689b      	ldr	r3, [r3, #8]
   2240e:	b313      	cbz	r3, 22456 <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   22410:	2302      	movs	r3, #2
	event->state |= state;
   22412:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   22414:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   22418:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2241c:	430b      	orrs	r3, r1
   2241e:	f363 3294 	bfi	r2, r3, #14, #7
   22422:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   22424:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22428:	4648      	mov	r0, r9
   2242a:	f7fd f8ad 	bl	1f588 <z_spin_unlock_valid>
   2242e:	3414      	adds	r4, #20
   22430:	2800      	cmp	r0, #0
   22432:	f040 8092 	bne.w	2255a <register_events+0x1c2>
   22436:	23c2      	movs	r3, #194	; 0xc2
   22438:	4a4c      	ldr	r2, [pc, #304]	; (2256c <register_events+0x1d4>)
   2243a:	4950      	ldr	r1, [pc, #320]	; (2257c <register_events+0x1e4>)
   2243c:	484d      	ldr	r0, [pc, #308]	; (22574 <register_events+0x1dc>)
   2243e:	f002 fab2 	bl	249a6 <assert_print>
   22442:	4949      	ldr	r1, [pc, #292]	; (22568 <register_events+0x1d0>)
   22444:	484e      	ldr	r0, [pc, #312]	; (22580 <register_events+0x1e8>)
   22446:	f002 faae 	bl	249a6 <assert_print>
   2244a:	21c2      	movs	r1, #194	; 0xc2
   2244c:	e7cc      	b.n	223e8 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   2244e:	6923      	ldr	r3, [r4, #16]
   22450:	681b      	ldr	r3, [r3, #0]
   22452:	2b00      	cmp	r3, #0
   22454:	d12d      	bne.n	224b2 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   22456:	9b01      	ldr	r3, [sp, #4]
   22458:	2b00      	cmp	r3, #0
   2245a:	d1e5      	bne.n	22428 <register_events+0x90>
   2245c:	782b      	ldrb	r3, [r5, #0]
   2245e:	2b00      	cmp	r3, #0
   22460:	d0e2      	beq.n	22428 <register_events+0x90>
	switch (event->type) {
   22462:	7b63      	ldrb	r3, [r4, #13]
   22464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22468:	2b08      	cmp	r3, #8
   2246a:	d86b      	bhi.n	22544 <register_events+0x1ac>
   2246c:	e8df f003 	tbb	[pc, r3]
   22470:	6a234935 	.word	0x6a234935
   22474:	6a6a6a38 	.word	0x6a6a6a38
   22478:	59          	.byte	0x59
   22479:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2247a:	6923      	ldr	r3, [r4, #16]
   2247c:	689b      	ldr	r3, [r3, #8]
   2247e:	2b00      	cmp	r3, #0
   22480:	d0e9      	beq.n	22456 <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   22482:	2301      	movs	r3, #1
   22484:	e7c5      	b.n	22412 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   22486:	6923      	ldr	r3, [r4, #16]
   22488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2248a:	2b00      	cmp	r3, #0
   2248c:	d0e3      	beq.n	22456 <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2248e:	2310      	movs	r3, #16
   22490:	e7bf      	b.n	22412 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   22492:	2363      	movs	r3, #99	; 0x63
   22494:	4a3b      	ldr	r2, [pc, #236]	; (22584 <register_events+0x1ec>)
   22496:	493c      	ldr	r1, [pc, #240]	; (22588 <register_events+0x1f0>)
   22498:	4836      	ldr	r0, [pc, #216]	; (22574 <register_events+0x1dc>)
   2249a:	f002 fa84 	bl	249a6 <assert_print>
   2249e:	7b61      	ldrb	r1, [r4, #13]
   224a0:	483a      	ldr	r0, [pc, #232]	; (2258c <register_events+0x1f4>)
   224a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   224a6:	f002 fa7e 	bl	249a6 <assert_print>
   224aa:	2163      	movs	r1, #99	; 0x63
   224ac:	4835      	ldr	r0, [pc, #212]	; (22584 <register_events+0x1ec>)
   224ae:	f002 fa73 	bl	24998 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   224b2:	2304      	movs	r3, #4
   224b4:	e7ad      	b.n	22412 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   224b6:	6920      	ldr	r0, [r4, #16]
   224b8:	b950      	cbnz	r0, 224d0 <register_events+0x138>
   224ba:	4935      	ldr	r1, [pc, #212]	; (22590 <register_events+0x1f8>)
   224bc:	238d      	movs	r3, #141	; 0x8d
   224be:	4a31      	ldr	r2, [pc, #196]	; (22584 <register_events+0x1ec>)
   224c0:	482c      	ldr	r0, [pc, #176]	; (22574 <register_events+0x1dc>)
   224c2:	f002 fa70 	bl	249a6 <assert_print>
   224c6:	4833      	ldr	r0, [pc, #204]	; (22594 <register_events+0x1fc>)
   224c8:	f002 fa6d 	bl	249a6 <assert_print>
   224cc:	218d      	movs	r1, #141	; 0x8d
   224ce:	e7ed      	b.n	224ac <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   224d0:	462a      	mov	r2, r5
   224d2:	4621      	mov	r1, r4
   224d4:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   224d6:	f006 ff12 	bl	292fe <add_event>
	event->poller = poller;
   224da:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   224dc:	3701      	adds	r7, #1
   224de:	e7a3      	b.n	22428 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   224e0:	6920      	ldr	r0, [r4, #16]
   224e2:	b950      	cbnz	r0, 224fa <register_events+0x162>
   224e4:	492c      	ldr	r1, [pc, #176]	; (22598 <register_events+0x200>)
   224e6:	2391      	movs	r3, #145	; 0x91
   224e8:	4a26      	ldr	r2, [pc, #152]	; (22584 <register_events+0x1ec>)
   224ea:	4822      	ldr	r0, [pc, #136]	; (22574 <register_events+0x1dc>)
   224ec:	f002 fa5b 	bl	249a6 <assert_print>
   224f0:	482a      	ldr	r0, [pc, #168]	; (2259c <register_events+0x204>)
   224f2:	f002 fa58 	bl	249a6 <assert_print>
   224f6:	2191      	movs	r1, #145	; 0x91
   224f8:	e7d8      	b.n	224ac <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   224fa:	462a      	mov	r2, r5
   224fc:	4621      	mov	r1, r4
   224fe:	3014      	adds	r0, #20
   22500:	e7e9      	b.n	224d6 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22502:	6920      	ldr	r0, [r4, #16]
   22504:	b950      	cbnz	r0, 2251c <register_events+0x184>
   22506:	4926      	ldr	r1, [pc, #152]	; (225a0 <register_events+0x208>)
   22508:	2395      	movs	r3, #149	; 0x95
   2250a:	4a1e      	ldr	r2, [pc, #120]	; (22584 <register_events+0x1ec>)
   2250c:	4819      	ldr	r0, [pc, #100]	; (22574 <register_events+0x1dc>)
   2250e:	f002 fa4a 	bl	249a6 <assert_print>
   22512:	4824      	ldr	r0, [pc, #144]	; (225a4 <register_events+0x20c>)
   22514:	f002 fa47 	bl	249a6 <assert_print>
   22518:	2195      	movs	r1, #149	; 0x95
   2251a:	e7c7      	b.n	224ac <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   2251c:	462a      	mov	r2, r5
   2251e:	4621      	mov	r1, r4
   22520:	e7d9      	b.n	224d6 <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   22522:	6920      	ldr	r0, [r4, #16]
   22524:	b950      	cbnz	r0, 2253c <register_events+0x1a4>
   22526:	4920      	ldr	r1, [pc, #128]	; (225a8 <register_events+0x210>)
   22528:	2399      	movs	r3, #153	; 0x99
   2252a:	4a16      	ldr	r2, [pc, #88]	; (22584 <register_events+0x1ec>)
   2252c:	4811      	ldr	r0, [pc, #68]	; (22574 <register_events+0x1dc>)
   2252e:	f002 fa3a 	bl	249a6 <assert_print>
   22532:	481e      	ldr	r0, [pc, #120]	; (225ac <register_events+0x214>)
   22534:	f002 fa37 	bl	249a6 <assert_print>
   22538:	2199      	movs	r1, #153	; 0x99
   2253a:	e7b7      	b.n	224ac <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   2253c:	462a      	mov	r2, r5
   2253e:	4621      	mov	r1, r4
   22540:	3028      	adds	r0, #40	; 0x28
   22542:	e7c8      	b.n	224d6 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   22544:	4910      	ldr	r1, [pc, #64]	; (22588 <register_events+0x1f0>)
   22546:	23a6      	movs	r3, #166	; 0xa6
   22548:	4a0e      	ldr	r2, [pc, #56]	; (22584 <register_events+0x1ec>)
   2254a:	480a      	ldr	r0, [pc, #40]	; (22574 <register_events+0x1dc>)
   2254c:	f002 fa2b 	bl	249a6 <assert_print>
   22550:	4817      	ldr	r0, [pc, #92]	; (225b0 <register_events+0x218>)
   22552:	f002 fa28 	bl	249a6 <assert_print>
   22556:	21a6      	movs	r1, #166	; 0xa6
   22558:	e7a8      	b.n	224ac <register_events+0x114>
	__asm__ volatile(
   2255a:	f38b 8811 	msr	BASEPRI, fp
   2255e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22562:	3601      	adds	r6, #1
   22564:	e723      	b.n	223ae <register_events+0x16>
   22566:	bf00      	nop
   22568:	200214b8 	.word	0x200214b8
   2256c:	0002c034 	.word	0x0002c034
   22570:	0002c08d 	.word	0x0002c08d
   22574:	0002b339 	.word	0x0002b339
   22578:	0002c0a2 	.word	0x0002c0a2
   2257c:	0002c061 	.word	0x0002c061
   22580:	0002c078 	.word	0x0002c078
   22584:	000307dd 	.word	0x000307dd
   22588:	00030a97 	.word	0x00030a97
   2258c:	000307fe 	.word	0x000307fe
   22590:	0003081b 	.word	0x0003081b
   22594:	00030835 	.word	0x00030835
   22598:	0003084a 	.word	0x0003084a
   2259c:	00030866 	.word	0x00030866
   225a0:	00030877 	.word	0x00030877
   225a4:	00030894 	.word	0x00030894
   225a8:	000308ab 	.word	0x000308ab
   225ac:	000308c6 	.word	0x000308c6
   225b0:	000308df 	.word	0x000308df

000225b4 <clear_event_registrations>:
{
   225b4:	2314      	movs	r3, #20
   225b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   225ba:	4615      	mov	r5, r2
	while (num_events--) {
   225bc:	460c      	mov	r4, r1
	event->poller = NULL;
   225be:	2600      	movs	r6, #0
   225c0:	fb03 0001 	mla	r0, r3, r1, r0
   225c4:	4f4b      	ldr	r7, [pc, #300]	; (226f4 <clear_event_registrations+0x140>)
	while (num_events--) {
   225c6:	b90c      	cbnz	r4, 225cc <clear_event_registrations+0x18>
}
   225c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   225cc:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   225d0:	f1a0 0814 	sub.w	r8, r0, #20
   225d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   225d8:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   225dc:	2b08      	cmp	r3, #8
   225de:	d842      	bhi.n	22666 <clear_event_registrations+0xb2>
   225e0:	e8df f003 	tbb	[pc, r3]
   225e4:	41052555 	.word	0x41052555
   225e8:	41414116 	.word	0x41414116
   225ec:	33          	.byte	0x33
   225ed:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   225ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
   225f2:	2b00      	cmp	r3, #0
   225f4:	d142      	bne.n	2267c <clear_event_registrations+0xc8>
   225f6:	4940      	ldr	r1, [pc, #256]	; (226f8 <clear_event_registrations+0x144>)
   225f8:	23b6      	movs	r3, #182	; 0xb6
   225fa:	4a40      	ldr	r2, [pc, #256]	; (226fc <clear_event_registrations+0x148>)
   225fc:	4840      	ldr	r0, [pc, #256]	; (22700 <clear_event_registrations+0x14c>)
   225fe:	f002 f9d2 	bl	249a6 <assert_print>
   22602:	4840      	ldr	r0, [pc, #256]	; (22704 <clear_event_registrations+0x150>)
   22604:	f002 f9cf 	bl	249a6 <assert_print>
   22608:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2260a:	483c      	ldr	r0, [pc, #240]	; (226fc <clear_event_registrations+0x148>)
   2260c:	f002 f9c4 	bl	24998 <assert_post_action>
   22610:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22614:	2b00      	cmp	r3, #0
   22616:	d131      	bne.n	2267c <clear_event_registrations+0xc8>
   22618:	493b      	ldr	r1, [pc, #236]	; (22708 <clear_event_registrations+0x154>)
   2261a:	23ba      	movs	r3, #186	; 0xba
   2261c:	4a37      	ldr	r2, [pc, #220]	; (226fc <clear_event_registrations+0x148>)
   2261e:	4838      	ldr	r0, [pc, #224]	; (22700 <clear_event_registrations+0x14c>)
   22620:	f002 f9c1 	bl	249a6 <assert_print>
   22624:	4839      	ldr	r0, [pc, #228]	; (2270c <clear_event_registrations+0x158>)
   22626:	f002 f9be 	bl	249a6 <assert_print>
   2262a:	21ba      	movs	r1, #186	; 0xba
   2262c:	e7ed      	b.n	2260a <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2262e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   22632:	bb1b      	cbnz	r3, 2267c <clear_event_registrations+0xc8>
   22634:	4936      	ldr	r1, [pc, #216]	; (22710 <clear_event_registrations+0x15c>)
   22636:	23be      	movs	r3, #190	; 0xbe
   22638:	4a30      	ldr	r2, [pc, #192]	; (226fc <clear_event_registrations+0x148>)
   2263a:	4831      	ldr	r0, [pc, #196]	; (22700 <clear_event_registrations+0x14c>)
   2263c:	f002 f9b3 	bl	249a6 <assert_print>
   22640:	4834      	ldr	r0, [pc, #208]	; (22714 <clear_event_registrations+0x160>)
   22642:	f002 f9b0 	bl	249a6 <assert_print>
   22646:	21be      	movs	r1, #190	; 0xbe
   22648:	e7df      	b.n	2260a <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2264a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2264e:	b9ab      	cbnz	r3, 2267c <clear_event_registrations+0xc8>
   22650:	4931      	ldr	r1, [pc, #196]	; (22718 <clear_event_registrations+0x164>)
   22652:	23c2      	movs	r3, #194	; 0xc2
   22654:	4a29      	ldr	r2, [pc, #164]	; (226fc <clear_event_registrations+0x148>)
   22656:	482a      	ldr	r0, [pc, #168]	; (22700 <clear_event_registrations+0x14c>)
   22658:	f002 f9a5 	bl	249a6 <assert_print>
   2265c:	482f      	ldr	r0, [pc, #188]	; (2271c <clear_event_registrations+0x168>)
   2265e:	f002 f9a2 	bl	249a6 <assert_print>
   22662:	21c2      	movs	r1, #194	; 0xc2
   22664:	e7d1      	b.n	2260a <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   22666:	492e      	ldr	r1, [pc, #184]	; (22720 <clear_event_registrations+0x16c>)
   22668:	23cf      	movs	r3, #207	; 0xcf
   2266a:	4a24      	ldr	r2, [pc, #144]	; (226fc <clear_event_registrations+0x148>)
   2266c:	4824      	ldr	r0, [pc, #144]	; (22700 <clear_event_registrations+0x14c>)
   2266e:	f002 f99a 	bl	249a6 <assert_print>
   22672:	482c      	ldr	r0, [pc, #176]	; (22724 <clear_event_registrations+0x170>)
   22674:	f002 f997 	bl	249a6 <assert_print>
   22678:	21cf      	movs	r1, #207	; 0xcf
   2267a:	e7c6      	b.n	2260a <clear_event_registrations+0x56>
	return node->next != NULL;
   2267c:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22680:	b12b      	cbz	r3, 2268e <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   22682:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   22686:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22688:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   2268a:	e940 6605 	strd	r6, r6, [r0, #-20]
   2268e:	4638      	mov	r0, r7
   22690:	f7fc ff7a 	bl	1f588 <z_spin_unlock_valid>
   22694:	b960      	cbnz	r0, 226b0 <clear_event_registrations+0xfc>
   22696:	23c2      	movs	r3, #194	; 0xc2
   22698:	4a23      	ldr	r2, [pc, #140]	; (22728 <clear_event_registrations+0x174>)
   2269a:	4924      	ldr	r1, [pc, #144]	; (2272c <clear_event_registrations+0x178>)
   2269c:	4818      	ldr	r0, [pc, #96]	; (22700 <clear_event_registrations+0x14c>)
   2269e:	f002 f982 	bl	249a6 <assert_print>
   226a2:	4914      	ldr	r1, [pc, #80]	; (226f4 <clear_event_registrations+0x140>)
   226a4:	4822      	ldr	r0, [pc, #136]	; (22730 <clear_event_registrations+0x17c>)
   226a6:	f002 f97e 	bl	249a6 <assert_print>
   226aa:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226ac:	481e      	ldr	r0, [pc, #120]	; (22728 <clear_event_registrations+0x174>)
   226ae:	e7ad      	b.n	2260c <clear_event_registrations+0x58>
   226b0:	f385 8811 	msr	BASEPRI, r5
   226b4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   226b8:	f04f 0320 	mov.w	r3, #32
   226bc:	f3ef 8511 	mrs	r5, BASEPRI
   226c0:	f383 8812 	msr	BASEPRI_MAX, r3
   226c4:	f3bf 8f6f 	isb	sy
   226c8:	4638      	mov	r0, r7
   226ca:	f7fc ff4f 	bl	1f56c <z_spin_lock_valid>
   226ce:	3c01      	subs	r4, #1
   226d0:	b958      	cbnz	r0, 226ea <clear_event_registrations+0x136>
   226d2:	2394      	movs	r3, #148	; 0x94
   226d4:	4a14      	ldr	r2, [pc, #80]	; (22728 <clear_event_registrations+0x174>)
   226d6:	4917      	ldr	r1, [pc, #92]	; (22734 <clear_event_registrations+0x180>)
   226d8:	4809      	ldr	r0, [pc, #36]	; (22700 <clear_event_registrations+0x14c>)
   226da:	f002 f964 	bl	249a6 <assert_print>
   226de:	4905      	ldr	r1, [pc, #20]	; (226f4 <clear_event_registrations+0x140>)
   226e0:	4815      	ldr	r0, [pc, #84]	; (22738 <clear_event_registrations+0x184>)
   226e2:	f002 f960 	bl	249a6 <assert_print>
   226e6:	2194      	movs	r1, #148	; 0x94
   226e8:	e7e0      	b.n	226ac <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   226ea:	4638      	mov	r0, r7
   226ec:	f7fc ff5a 	bl	1f5a4 <z_spin_lock_set_owner>
	return k;
   226f0:	4640      	mov	r0, r8
   226f2:	e768      	b.n	225c6 <clear_event_registrations+0x12>
   226f4:	200214b8 	.word	0x200214b8
   226f8:	0003081b 	.word	0x0003081b
   226fc:	000307dd 	.word	0x000307dd
   22700:	0002b339 	.word	0x0002b339
   22704:	00030835 	.word	0x00030835
   22708:	0003084a 	.word	0x0003084a
   2270c:	00030866 	.word	0x00030866
   22710:	00030877 	.word	0x00030877
   22714:	00030894 	.word	0x00030894
   22718:	000308ab 	.word	0x000308ab
   2271c:	000308c6 	.word	0x000308c6
   22720:	00030a97 	.word	0x00030a97
   22724:	000308df 	.word	0x000308df
   22728:	0002c034 	.word	0x0002c034
   2272c:	0002c061 	.word	0x0002c061
   22730:	0002c078 	.word	0x0002c078
   22734:	0002c08d 	.word	0x0002c08d
   22738:	0002c0a2 	.word	0x0002c0a2

0002273c <k_poll_event_init>:
{
   2273c:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2273e:	b162      	cbz	r2, 2275a <k_poll_event_init+0x1e>
   22740:	4917      	ldr	r1, [pc, #92]	; (227a0 <k_poll_event_init+0x64>)
   22742:	232d      	movs	r3, #45	; 0x2d
   22744:	4a17      	ldr	r2, [pc, #92]	; (227a4 <k_poll_event_init+0x68>)
   22746:	4818      	ldr	r0, [pc, #96]	; (227a8 <k_poll_event_init+0x6c>)
   22748:	f002 f92d 	bl	249a6 <assert_print>
   2274c:	4817      	ldr	r0, [pc, #92]	; (227ac <k_poll_event_init+0x70>)
   2274e:	f002 f92a 	bl	249a6 <assert_print>
   22752:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   22754:	4813      	ldr	r0, [pc, #76]	; (227a4 <k_poll_event_init+0x68>)
   22756:	f002 f91f 	bl	24998 <assert_post_action>
   2275a:	293f      	cmp	r1, #63	; 0x3f
   2275c:	d90a      	bls.n	22774 <k_poll_event_init+0x38>
   2275e:	4914      	ldr	r1, [pc, #80]	; (227b0 <k_poll_event_init+0x74>)
   22760:	232f      	movs	r3, #47	; 0x2f
   22762:	4a10      	ldr	r2, [pc, #64]	; (227a4 <k_poll_event_init+0x68>)
   22764:	4810      	ldr	r0, [pc, #64]	; (227a8 <k_poll_event_init+0x6c>)
   22766:	f002 f91e 	bl	249a6 <assert_print>
   2276a:	4812      	ldr	r0, [pc, #72]	; (227b4 <k_poll_event_init+0x78>)
   2276c:	f002 f91b 	bl	249a6 <assert_print>
   22770:	212f      	movs	r1, #47	; 0x2f
   22772:	e7ef      	b.n	22754 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   22774:	b953      	cbnz	r3, 2278c <k_poll_event_init+0x50>
   22776:	4910      	ldr	r1, [pc, #64]	; (227b8 <k_poll_event_init+0x7c>)
   22778:	2330      	movs	r3, #48	; 0x30
   2277a:	4a0a      	ldr	r2, [pc, #40]	; (227a4 <k_poll_event_init+0x68>)
   2277c:	480a      	ldr	r0, [pc, #40]	; (227a8 <k_poll_event_init+0x6c>)
   2277e:	f002 f912 	bl	249a6 <assert_print>
   22782:	480e      	ldr	r0, [pc, #56]	; (227bc <k_poll_event_init+0x80>)
   22784:	f002 f90f 	bl	249a6 <assert_print>
   22788:	2130      	movs	r1, #48	; 0x30
   2278a:	e7e3      	b.n	22754 <k_poll_event_init+0x18>
	event->poller = NULL;
   2278c:	6082      	str	r2, [r0, #8]
	event->type = type;
   2278e:	0209      	lsls	r1, r1, #8
   22790:	7b02      	ldrb	r2, [r0, #12]
   22792:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   22796:	4311      	orrs	r1, r2
	event->obj = obj;
   22798:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   2279c:	bd08      	pop	{r3, pc}
   2279e:	bf00      	nop
   227a0:	000308f5 	.word	0x000308f5
   227a4:	000307dd 	.word	0x000307dd
   227a8:	0002b339 	.word	0x0002b339
   227ac:	00030915 	.word	0x00030915
   227b0:	0003093b 	.word	0x0003093b
   227b4:	0003095f 	.word	0x0003095f
   227b8:	0003096f 	.word	0x0003096f
   227bc:	00030982 	.word	0x00030982

000227c0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   227c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227c4:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   227c6:	4b5c      	ldr	r3, [pc, #368]	; (22938 <z_impl_k_poll+0x178>)
{
   227c8:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   227ca:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   227ce:	2301      	movs	r3, #1
{
   227d0:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   227d2:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   227d6:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   227da:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   227de:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   227e2:	f1bb 0f00 	cmp.w	fp, #0
   227e6:	d00e      	beq.n	22806 <z_impl_k_poll+0x46>
   227e8:	4954      	ldr	r1, [pc, #336]	; (2293c <z_impl_k_poll+0x17c>)
   227ea:	f240 132d 	movw	r3, #301	; 0x12d
   227ee:	4a54      	ldr	r2, [pc, #336]	; (22940 <z_impl_k_poll+0x180>)
   227f0:	4854      	ldr	r0, [pc, #336]	; (22944 <z_impl_k_poll+0x184>)
   227f2:	f002 f8d8 	bl	249a6 <assert_print>
   227f6:	4854      	ldr	r0, [pc, #336]	; (22948 <z_impl_k_poll+0x188>)
   227f8:	f002 f8d5 	bl	249a6 <assert_print>
   227fc:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   22800:	484f      	ldr	r0, [pc, #316]	; (22940 <z_impl_k_poll+0x180>)
   22802:	f002 f8c9 	bl	24998 <assert_post_action>
   22806:	b960      	cbnz	r0, 22822 <z_impl_k_poll+0x62>
   22808:	4950      	ldr	r1, [pc, #320]	; (2294c <z_impl_k_poll+0x18c>)
   2280a:	f44f 7397 	mov.w	r3, #302	; 0x12e
   2280e:	4a4c      	ldr	r2, [pc, #304]	; (22940 <z_impl_k_poll+0x180>)
   22810:	484c      	ldr	r0, [pc, #304]	; (22944 <z_impl_k_poll+0x184>)
   22812:	f002 f8c8 	bl	249a6 <assert_print>
   22816:	484e      	ldr	r0, [pc, #312]	; (22950 <z_impl_k_poll+0x190>)
   22818:	f002 f8c5 	bl	249a6 <assert_print>
   2281c:	f44f 7197 	mov.w	r1, #302	; 0x12e
   22820:	e7ee      	b.n	22800 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   22822:	2900      	cmp	r1, #0
   22824:	da0c      	bge.n	22840 <z_impl_k_poll+0x80>
   22826:	494b      	ldr	r1, [pc, #300]	; (22954 <z_impl_k_poll+0x194>)
   22828:	f240 132f 	movw	r3, #303	; 0x12f
   2282c:	4a44      	ldr	r2, [pc, #272]	; (22940 <z_impl_k_poll+0x180>)
   2282e:	4845      	ldr	r0, [pc, #276]	; (22944 <z_impl_k_poll+0x184>)
   22830:	f002 f8b9 	bl	249a6 <assert_print>
   22834:	4848      	ldr	r0, [pc, #288]	; (22958 <z_impl_k_poll+0x198>)
   22836:	f002 f8b6 	bl	249a6 <assert_print>
   2283a:	f240 112f 	movw	r1, #303	; 0x12f
   2283e:	e7df      	b.n	22800 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   22840:	ea57 0306 	orrs.w	r3, r7, r6
   22844:	bf0c      	ite	eq
   22846:	2301      	moveq	r3, #1
   22848:	2300      	movne	r3, #0
   2284a:	f7ff fda5 	bl	22398 <register_events>
   2284e:	4681      	mov	r9, r0
   22850:	f04f 0320 	mov.w	r3, #32
   22854:	f3ef 8a11 	mrs	sl, BASEPRI
   22858:	f383 8812 	msr	BASEPRI_MAX, r3
   2285c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22860:	483e      	ldr	r0, [pc, #248]	; (2295c <z_impl_k_poll+0x19c>)
   22862:	f7fc fe83 	bl	1f56c <z_spin_lock_valid>
   22866:	b960      	cbnz	r0, 22882 <z_impl_k_poll+0xc2>
   22868:	2394      	movs	r3, #148	; 0x94
   2286a:	4a3d      	ldr	r2, [pc, #244]	; (22960 <z_impl_k_poll+0x1a0>)
   2286c:	493d      	ldr	r1, [pc, #244]	; (22964 <z_impl_k_poll+0x1a4>)
   2286e:	4835      	ldr	r0, [pc, #212]	; (22944 <z_impl_k_poll+0x184>)
   22870:	f002 f899 	bl	249a6 <assert_print>
   22874:	4939      	ldr	r1, [pc, #228]	; (2295c <z_impl_k_poll+0x19c>)
   22876:	483c      	ldr	r0, [pc, #240]	; (22968 <z_impl_k_poll+0x1a8>)
   22878:	f002 f895 	bl	249a6 <assert_print>
   2287c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2287e:	4838      	ldr	r0, [pc, #224]	; (22960 <z_impl_k_poll+0x1a0>)
   22880:	e7bf      	b.n	22802 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   22882:	4836      	ldr	r0, [pc, #216]	; (2295c <z_impl_k_poll+0x19c>)
   22884:	f7fc fe8e 	bl	1f5a4 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   22888:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   2288c:	b9e4      	cbnz	r4, 228c8 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   2288e:	4628      	mov	r0, r5
   22890:	4652      	mov	r2, sl
   22892:	4649      	mov	r1, r9
   22894:	f7ff fe8e 	bl	225b4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22898:	4830      	ldr	r0, [pc, #192]	; (2295c <z_impl_k_poll+0x19c>)
   2289a:	f7fc fe75 	bl	1f588 <z_spin_unlock_valid>
   2289e:	b958      	cbnz	r0, 228b8 <z_impl_k_poll+0xf8>
   228a0:	23c2      	movs	r3, #194	; 0xc2
   228a2:	4a2f      	ldr	r2, [pc, #188]	; (22960 <z_impl_k_poll+0x1a0>)
   228a4:	4931      	ldr	r1, [pc, #196]	; (2296c <z_impl_k_poll+0x1ac>)
   228a6:	4827      	ldr	r0, [pc, #156]	; (22944 <z_impl_k_poll+0x184>)
   228a8:	f002 f87d 	bl	249a6 <assert_print>
   228ac:	492b      	ldr	r1, [pc, #172]	; (2295c <z_impl_k_poll+0x19c>)
   228ae:	4830      	ldr	r0, [pc, #192]	; (22970 <z_impl_k_poll+0x1b0>)
   228b0:	f002 f879 	bl	249a6 <assert_print>
   228b4:	21c2      	movs	r1, #194	; 0xc2
   228b6:	e7e2      	b.n	2287e <z_impl_k_poll+0xbe>
	__asm__ volatile(
   228b8:	f38a 8811 	msr	BASEPRI, sl
   228bc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   228c0:	4620      	mov	r0, r4
   228c2:	b003      	add	sp, #12
   228c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   228c8:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   228cc:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   228d0:	d10b      	bne.n	228ea <z_impl_k_poll+0x12a>
   228d2:	4822      	ldr	r0, [pc, #136]	; (2295c <z_impl_k_poll+0x19c>)
   228d4:	f7fc fe58 	bl	1f588 <z_spin_unlock_valid>
   228d8:	2800      	cmp	r0, #0
   228da:	d0e1      	beq.n	228a0 <z_impl_k_poll+0xe0>
   228dc:	f38a 8811 	msr	BASEPRI, sl
   228e0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   228e4:	f06f 040a 	mvn.w	r4, #10
   228e8:	e7ea      	b.n	228c0 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   228ea:	4651      	mov	r1, sl
   228ec:	e9cd 7600 	strd	r7, r6, [sp]
   228f0:	4a20      	ldr	r2, [pc, #128]	; (22974 <z_impl_k_poll+0x1b4>)
   228f2:	481a      	ldr	r0, [pc, #104]	; (2295c <z_impl_k_poll+0x19c>)
   228f4:	f7fe fbd2 	bl	2109c <z_pend_curr>
   228f8:	4604      	mov	r4, r0
	__asm__ volatile(
   228fa:	f04f 0320 	mov.w	r3, #32
   228fe:	f3ef 8611 	mrs	r6, BASEPRI
   22902:	f383 8812 	msr	BASEPRI_MAX, r3
   22906:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2290a:	4814      	ldr	r0, [pc, #80]	; (2295c <z_impl_k_poll+0x19c>)
   2290c:	f7fc fe2e 	bl	1f56c <z_spin_lock_valid>
   22910:	2800      	cmp	r0, #0
   22912:	d0a9      	beq.n	22868 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   22914:	4811      	ldr	r0, [pc, #68]	; (2295c <z_impl_k_poll+0x19c>)
   22916:	f7fc fe45 	bl	1f5a4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2291a:	4628      	mov	r0, r5
   2291c:	4632      	mov	r2, r6
   2291e:	4649      	mov	r1, r9
   22920:	f7ff fe48 	bl	225b4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22924:	480d      	ldr	r0, [pc, #52]	; (2295c <z_impl_k_poll+0x19c>)
   22926:	f7fc fe2f 	bl	1f588 <z_spin_unlock_valid>
   2292a:	2800      	cmp	r0, #0
   2292c:	d0b8      	beq.n	228a0 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   2292e:	f386 8811 	msr	BASEPRI, r6
   22932:	f3bf 8f6f 	isb	sy
	return swap_rc;
   22936:	e7c3      	b.n	228c0 <z_impl_k_poll+0x100>
   22938:	20021460 	.word	0x20021460
   2293c:	00030366 	.word	0x00030366
   22940:	000307dd 	.word	0x000307dd
   22944:	0002b339 	.word	0x0002b339
   22948:	0002ee3a 	.word	0x0002ee3a
   2294c:	0003099c 	.word	0x0003099c
   22950:	000309b2 	.word	0x000309b2
   22954:	000309c1 	.word	0x000309c1
   22958:	000309d1 	.word	0x000309d1
   2295c:	200214b8 	.word	0x200214b8
   22960:	0002c034 	.word	0x0002c034
   22964:	0002c08d 	.word	0x0002c08d
   22968:	0002c0a2 	.word	0x0002c0a2
   2296c:	0002c061 	.word	0x0002c061
   22970:	0002c078 	.word	0x0002c078
   22974:	2000873c 	.word	0x2000873c

00022978 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   22978:	b570      	push	{r4, r5, r6, lr}
   2297a:	4604      	mov	r4, r0
   2297c:	460d      	mov	r5, r1
	__asm__ volatile(
   2297e:	f04f 0320 	mov.w	r3, #32
   22982:	f3ef 8611 	mrs	r6, BASEPRI
   22986:	f383 8812 	msr	BASEPRI_MAX, r3
   2298a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2298e:	4820      	ldr	r0, [pc, #128]	; (22a10 <z_impl_k_poll_signal_raise+0x98>)
   22990:	f7fc fdec 	bl	1f56c <z_spin_lock_valid>
   22994:	b968      	cbnz	r0, 229b2 <z_impl_k_poll_signal_raise+0x3a>
   22996:	2394      	movs	r3, #148	; 0x94
   22998:	4a1e      	ldr	r2, [pc, #120]	; (22a14 <z_impl_k_poll_signal_raise+0x9c>)
   2299a:	491f      	ldr	r1, [pc, #124]	; (22a18 <z_impl_k_poll_signal_raise+0xa0>)
   2299c:	481f      	ldr	r0, [pc, #124]	; (22a1c <z_impl_k_poll_signal_raise+0xa4>)
   2299e:	f002 f802 	bl	249a6 <assert_print>
   229a2:	491b      	ldr	r1, [pc, #108]	; (22a10 <z_impl_k_poll_signal_raise+0x98>)
   229a4:	481e      	ldr	r0, [pc, #120]	; (22a20 <z_impl_k_poll_signal_raise+0xa8>)
   229a6:	f001 fffe 	bl	249a6 <assert_print>
   229aa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229ac:	4819      	ldr	r0, [pc, #100]	; (22a14 <z_impl_k_poll_signal_raise+0x9c>)
   229ae:	f001 fff3 	bl	24998 <assert_post_action>
	z_spin_lock_set_owner(l);
   229b2:	4817      	ldr	r0, [pc, #92]	; (22a10 <z_impl_k_poll_signal_raise+0x98>)
   229b4:	f7fc fdf6 	bl	1f5a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   229b8:	2101      	movs	r1, #1
	return list->head == list;
   229ba:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   229bc:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   229be:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   229c0:	60a1      	str	r1, [r4, #8]
   229c2:	d10f      	bne.n	229e4 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229c4:	4812      	ldr	r0, [pc, #72]	; (22a10 <z_impl_k_poll_signal_raise+0x98>)
   229c6:	f7fc fddf 	bl	1f588 <z_spin_unlock_valid>
   229ca:	b9d8      	cbnz	r0, 22a04 <z_impl_k_poll_signal_raise+0x8c>
   229cc:	23c2      	movs	r3, #194	; 0xc2
   229ce:	4a11      	ldr	r2, [pc, #68]	; (22a14 <z_impl_k_poll_signal_raise+0x9c>)
   229d0:	4914      	ldr	r1, [pc, #80]	; (22a24 <z_impl_k_poll_signal_raise+0xac>)
   229d2:	4812      	ldr	r0, [pc, #72]	; (22a1c <z_impl_k_poll_signal_raise+0xa4>)
   229d4:	f001 ffe7 	bl	249a6 <assert_print>
   229d8:	490d      	ldr	r1, [pc, #52]	; (22a10 <z_impl_k_poll_signal_raise+0x98>)
   229da:	4813      	ldr	r0, [pc, #76]	; (22a28 <z_impl_k_poll_signal_raise+0xb0>)
   229dc:	f001 ffe3 	bl	249a6 <assert_print>
   229e0:	21c2      	movs	r1, #194	; 0xc2
   229e2:	e7e3      	b.n	229ac <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   229e4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   229e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   229ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   229ec:	2300      	movs	r3, #0
	node->prev = NULL;
   229ee:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   229f2:	f006 fcb5 	bl	29360 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   229f6:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   229f8:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   229fa:	4805      	ldr	r0, [pc, #20]	; (22a10 <z_impl_k_poll_signal_raise+0x98>)
   229fc:	f7fe f880 	bl	20b00 <z_reschedule>
	return rc;
}
   22a00:	4620      	mov	r0, r4
   22a02:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   22a04:	f386 8811 	msr	BASEPRI, r6
   22a08:	f3bf 8f6f 	isb	sy
		return 0;
   22a0c:	2400      	movs	r4, #0
   22a0e:	e7f7      	b.n	22a00 <z_impl_k_poll_signal_raise+0x88>
   22a10:	200214b8 	.word	0x200214b8
   22a14:	0002c034 	.word	0x0002c034
   22a18:	0002c08d 	.word	0x0002c08d
   22a1c:	0002b339 	.word	0x0002b339
   22a20:	0002c0a2 	.word	0x0002c0a2
   22a24:	0002c061 	.word	0x0002c061
   22a28:	0002c078 	.word	0x0002c078

00022a2c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   22a2c:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   22a2e:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   22a32:	4606      	mov	r6, r0
   22a34:	460d      	mov	r5, r1
   22a36:	d220      	bcs.n	22a7a <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   22a38:	f04f 0800 	mov.w	r8, #0
   22a3c:	f04f 0900 	mov.w	r9, #0
   22a40:	f041 0104 	orr.w	r1, r1, #4
   22a44:	e9cd 8900 	strd	r8, r9, [sp]
   22a48:	f7fc fa8c 	bl	1ef64 <k_heap_aligned_alloc>
	if (mem == NULL) {
   22a4c:	4604      	mov	r4, r0
   22a4e:	b1a0      	cbz	r0, 22a7a <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   22a50:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   22a54:	b195      	cbz	r5, 22a7c <z_heap_aligned_alloc+0x50>
   22a56:	1e6b      	subs	r3, r5, #1
   22a58:	421c      	tst	r4, r3
   22a5a:	d00f      	beq.n	22a7c <z_heap_aligned_alloc+0x50>
   22a5c:	2325      	movs	r3, #37	; 0x25
   22a5e:	4a09      	ldr	r2, [pc, #36]	; (22a84 <z_heap_aligned_alloc+0x58>)
   22a60:	4909      	ldr	r1, [pc, #36]	; (22a88 <z_heap_aligned_alloc+0x5c>)
   22a62:	480a      	ldr	r0, [pc, #40]	; (22a8c <z_heap_aligned_alloc+0x60>)
   22a64:	f001 ff9f 	bl	249a6 <assert_print>
   22a68:	4621      	mov	r1, r4
   22a6a:	4809      	ldr	r0, [pc, #36]	; (22a90 <z_heap_aligned_alloc+0x64>)
   22a6c:	462a      	mov	r2, r5
   22a6e:	f001 ff9a 	bl	249a6 <assert_print>
   22a72:	2125      	movs	r1, #37	; 0x25
   22a74:	4803      	ldr	r0, [pc, #12]	; (22a84 <z_heap_aligned_alloc+0x58>)
   22a76:	f001 ff8f 	bl	24998 <assert_post_action>
		return NULL;
   22a7a:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   22a7c:	4620      	mov	r0, r4
   22a7e:	b002      	add	sp, #8
   22a80:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   22a84:	000309de 	.word	0x000309de
   22a88:	00030a02 	.word	0x00030a02
   22a8c:	0002b339 	.word	0x0002b339
   22a90:	00030a34 	.word	0x00030a34

00022a94 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   22a94:	2803      	cmp	r0, #3
{
   22a96:	460a      	mov	r2, r1
   22a98:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   22a9a:	d901      	bls.n	22aa0 <k_aligned_alloc+0xc>
   22a9c:	0783      	lsls	r3, r0, #30
   22a9e:	d00c      	beq.n	22aba <k_aligned_alloc+0x26>
   22aa0:	4910      	ldr	r1, [pc, #64]	; (22ae4 <k_aligned_alloc+0x50>)
   22aa2:	2342      	movs	r3, #66	; 0x42
   22aa4:	4a10      	ldr	r2, [pc, #64]	; (22ae8 <k_aligned_alloc+0x54>)
   22aa6:	4811      	ldr	r0, [pc, #68]	; (22aec <k_aligned_alloc+0x58>)
   22aa8:	f001 ff7d 	bl	249a6 <assert_print>
   22aac:	4810      	ldr	r0, [pc, #64]	; (22af0 <k_aligned_alloc+0x5c>)
   22aae:	f001 ff7a 	bl	249a6 <assert_print>
   22ab2:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   22ab4:	480c      	ldr	r0, [pc, #48]	; (22ae8 <k_aligned_alloc+0x54>)
   22ab6:	f001 ff6f 	bl	24998 <assert_post_action>
   22aba:	1e43      	subs	r3, r0, #1
   22abc:	4203      	tst	r3, r0
   22abe:	d00a      	beq.n	22ad6 <k_aligned_alloc+0x42>
   22ac0:	490c      	ldr	r1, [pc, #48]	; (22af4 <k_aligned_alloc+0x60>)
   22ac2:	2346      	movs	r3, #70	; 0x46
   22ac4:	4a08      	ldr	r2, [pc, #32]	; (22ae8 <k_aligned_alloc+0x54>)
   22ac6:	4809      	ldr	r0, [pc, #36]	; (22aec <k_aligned_alloc+0x58>)
   22ac8:	f001 ff6d 	bl	249a6 <assert_print>
   22acc:	480a      	ldr	r0, [pc, #40]	; (22af8 <k_aligned_alloc+0x64>)
   22ace:	f001 ff6a 	bl	249a6 <assert_print>
   22ad2:	2146      	movs	r1, #70	; 0x46
   22ad4:	e7ee      	b.n	22ab4 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   22ad6:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   22ad8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   22adc:	4807      	ldr	r0, [pc, #28]	; (22afc <k_aligned_alloc+0x68>)
   22ade:	f7ff bfa5 	b.w	22a2c <z_heap_aligned_alloc>
   22ae2:	bf00      	nop
   22ae4:	00030a5c 	.word	0x00030a5c
   22ae8:	000309de 	.word	0x000309de
   22aec:	0002b339 	.word	0x0002b339
   22af0:	00030a99 	.word	0x00030a99
   22af4:	0002be9e 	.word	0x0002be9e
   22af8:	0002beb9 	.word	0x0002beb9
   22afc:	20008a68 	.word	0x20008a68

00022b00 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   22b00:	4b01      	ldr	r3, [pc, #4]	; (22b08 <k_thread_system_pool_assign+0x8>)
   22b02:	6743      	str	r3, [r0, #116]	; 0x74
}
   22b04:	4770      	bx	lr
   22b06:	bf00      	nop
   22b08:	20008a68 	.word	0x20008a68

00022b0c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   22b0c:	b538      	push	{r3, r4, r5, lr}
   22b0e:	4604      	mov	r4, r0
   22b10:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   22b12:	f006 faa9 	bl	29068 <k_is_in_isr>
   22b16:	b920      	cbnz	r0, 22b22 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   22b18:	4b06      	ldr	r3, [pc, #24]	; (22b34 <z_thread_aligned_alloc+0x28>)
   22b1a:	689b      	ldr	r3, [r3, #8]
   22b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   22b1e:	b90b      	cbnz	r3, 22b24 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   22b20:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   22b22:	4b05      	ldr	r3, [pc, #20]	; (22b38 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   22b24:	462a      	mov	r2, r5
   22b26:	4621      	mov	r1, r4
   22b28:	4618      	mov	r0, r3
}
   22b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   22b2e:	f7ff bf7d 	b.w	22a2c <z_heap_aligned_alloc>
   22b32:	bf00      	nop
   22b34:	20021460 	.word	0x20021460
   22b38:	20008a68 	.word	0x20008a68

00022b3c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   22b3c:	4801      	ldr	r0, [pc, #4]	; (22b44 <boot_banner+0x8>)
   22b3e:	f001 bd70 	b.w	24622 <printk>
   22b42:	bf00      	nop
   22b44:	00030ac6 	.word	0x00030ac6

00022b48 <log>:
   22b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22b4a:	4604      	mov	r4, r0
   22b4c:	460d      	mov	r5, r1
   22b4e:	f7e6 fee3 	bl	9918 <__ieee754_log>
   22b52:	4b17      	ldr	r3, [pc, #92]	; (22bb0 <log+0x68>)
   22b54:	4606      	mov	r6, r0
   22b56:	460f      	mov	r7, r1
   22b58:	f993 3000 	ldrsb.w	r3, [r3]
   22b5c:	3301      	adds	r3, #1
   22b5e:	d01a      	beq.n	22b96 <log+0x4e>
   22b60:	4622      	mov	r2, r4
   22b62:	462b      	mov	r3, r5
   22b64:	4620      	mov	r0, r4
   22b66:	4629      	mov	r1, r5
   22b68:	f7e6 fa64 	bl	9034 <__aeabi_dcmpun>
   22b6c:	b998      	cbnz	r0, 22b96 <log+0x4e>
   22b6e:	2200      	movs	r2, #0
   22b70:	2300      	movs	r3, #0
   22b72:	4620      	mov	r0, r4
   22b74:	4629      	mov	r1, r5
   22b76:	f7e6 fa53 	bl	9020 <__aeabi_dcmpgt>
   22b7a:	b960      	cbnz	r0, 22b96 <log+0x4e>
   22b7c:	2200      	movs	r2, #0
   22b7e:	2300      	movs	r3, #0
   22b80:	4620      	mov	r0, r4
   22b82:	4629      	mov	r1, r5
   22b84:	f7e6 fa24 	bl	8fd0 <__aeabi_dcmpeq>
   22b88:	b140      	cbz	r0, 22b9c <log+0x54>
   22b8a:	f002 ffc1 	bl	25b10 <__errno>
   22b8e:	2600      	movs	r6, #0
   22b90:	2322      	movs	r3, #34	; 0x22
   22b92:	4f08      	ldr	r7, [pc, #32]	; (22bb4 <log+0x6c>)
   22b94:	6003      	str	r3, [r0, #0]
   22b96:	4630      	mov	r0, r6
   22b98:	4639      	mov	r1, r7
   22b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22b9c:	f002 ffb8 	bl	25b10 <__errno>
   22ba0:	2321      	movs	r3, #33	; 0x21
   22ba2:	6003      	str	r3, [r0, #0]
   22ba4:	4804      	ldr	r0, [pc, #16]	; (22bb8 <log+0x70>)
   22ba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22baa:	f000 b807 	b.w	22bbc <nan>
   22bae:	bf00      	nop
   22bb0:	200089e7 	.word	0x200089e7
   22bb4:	fff00000 	.word	0xfff00000
   22bb8:	0002ee3c 	.word	0x0002ee3c

00022bbc <nan>:
   22bbc:	2000      	movs	r0, #0
   22bbe:	4901      	ldr	r1, [pc, #4]	; (22bc4 <nan+0x8>)
   22bc0:	4770      	bx	lr
   22bc2:	bf00      	nop
   22bc4:	7ff80000 	.word	0x7ff80000

00022bc8 <malloc>:
   22bc8:	4b02      	ldr	r3, [pc, #8]	; (22bd4 <malloc+0xc>)
   22bca:	4601      	mov	r1, r0
   22bcc:	6818      	ldr	r0, [r3, #0]
   22bce:	f000 b84d 	b.w	22c6c <_malloc_r>
   22bd2:	bf00      	nop
   22bd4:	20008744 	.word	0x20008744

00022bd8 <_free_r>:
   22bd8:	b538      	push	{r3, r4, r5, lr}
   22bda:	4605      	mov	r5, r0
   22bdc:	2900      	cmp	r1, #0
   22bde:	d041      	beq.n	22c64 <_free_r+0x8c>
   22be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   22be4:	1f0c      	subs	r4, r1, #4
   22be6:	2b00      	cmp	r3, #0
   22be8:	bfb8      	it	lt
   22bea:	18e4      	addlt	r4, r4, r3
   22bec:	f000 fd18 	bl	23620 <__malloc_lock>
   22bf0:	4a1d      	ldr	r2, [pc, #116]	; (22c68 <_free_r+0x90>)
   22bf2:	6813      	ldr	r3, [r2, #0]
   22bf4:	b933      	cbnz	r3, 22c04 <_free_r+0x2c>
   22bf6:	6063      	str	r3, [r4, #4]
   22bf8:	6014      	str	r4, [r2, #0]
   22bfa:	4628      	mov	r0, r5
   22bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22c00:	f000 bd14 	b.w	2362c <__malloc_unlock>
   22c04:	42a3      	cmp	r3, r4
   22c06:	d908      	bls.n	22c1a <_free_r+0x42>
   22c08:	6820      	ldr	r0, [r4, #0]
   22c0a:	1821      	adds	r1, r4, r0
   22c0c:	428b      	cmp	r3, r1
   22c0e:	bf01      	itttt	eq
   22c10:	6819      	ldreq	r1, [r3, #0]
   22c12:	685b      	ldreq	r3, [r3, #4]
   22c14:	1809      	addeq	r1, r1, r0
   22c16:	6021      	streq	r1, [r4, #0]
   22c18:	e7ed      	b.n	22bf6 <_free_r+0x1e>
   22c1a:	461a      	mov	r2, r3
   22c1c:	685b      	ldr	r3, [r3, #4]
   22c1e:	b10b      	cbz	r3, 22c24 <_free_r+0x4c>
   22c20:	42a3      	cmp	r3, r4
   22c22:	d9fa      	bls.n	22c1a <_free_r+0x42>
   22c24:	6811      	ldr	r1, [r2, #0]
   22c26:	1850      	adds	r0, r2, r1
   22c28:	42a0      	cmp	r0, r4
   22c2a:	d10b      	bne.n	22c44 <_free_r+0x6c>
   22c2c:	6820      	ldr	r0, [r4, #0]
   22c2e:	4401      	add	r1, r0
   22c30:	1850      	adds	r0, r2, r1
   22c32:	6011      	str	r1, [r2, #0]
   22c34:	4283      	cmp	r3, r0
   22c36:	d1e0      	bne.n	22bfa <_free_r+0x22>
   22c38:	6818      	ldr	r0, [r3, #0]
   22c3a:	685b      	ldr	r3, [r3, #4]
   22c3c:	4408      	add	r0, r1
   22c3e:	6053      	str	r3, [r2, #4]
   22c40:	6010      	str	r0, [r2, #0]
   22c42:	e7da      	b.n	22bfa <_free_r+0x22>
   22c44:	d902      	bls.n	22c4c <_free_r+0x74>
   22c46:	230c      	movs	r3, #12
   22c48:	602b      	str	r3, [r5, #0]
   22c4a:	e7d6      	b.n	22bfa <_free_r+0x22>
   22c4c:	6820      	ldr	r0, [r4, #0]
   22c4e:	1821      	adds	r1, r4, r0
   22c50:	428b      	cmp	r3, r1
   22c52:	bf02      	ittt	eq
   22c54:	6819      	ldreq	r1, [r3, #0]
   22c56:	685b      	ldreq	r3, [r3, #4]
   22c58:	1809      	addeq	r1, r1, r0
   22c5a:	6063      	str	r3, [r4, #4]
   22c5c:	bf08      	it	eq
   22c5e:	6021      	streq	r1, [r4, #0]
   22c60:	6054      	str	r4, [r2, #4]
   22c62:	e7ca      	b.n	22bfa <_free_r+0x22>
   22c64:	bd38      	pop	{r3, r4, r5, pc}
   22c66:	bf00      	nop
   22c68:	200214c0 	.word	0x200214c0

00022c6c <_malloc_r>:
   22c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c6e:	1ccd      	adds	r5, r1, #3
   22c70:	4606      	mov	r6, r0
   22c72:	f025 0503 	bic.w	r5, r5, #3
   22c76:	3508      	adds	r5, #8
   22c78:	2d0c      	cmp	r5, #12
   22c7a:	bf38      	it	cc
   22c7c:	250c      	movcc	r5, #12
   22c7e:	2d00      	cmp	r5, #0
   22c80:	db01      	blt.n	22c86 <_malloc_r+0x1a>
   22c82:	42a9      	cmp	r1, r5
   22c84:	d903      	bls.n	22c8e <_malloc_r+0x22>
   22c86:	230c      	movs	r3, #12
   22c88:	6033      	str	r3, [r6, #0]
   22c8a:	2000      	movs	r0, #0
   22c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22c8e:	f000 fcc7 	bl	23620 <__malloc_lock>
   22c92:	4921      	ldr	r1, [pc, #132]	; (22d18 <_malloc_r+0xac>)
   22c94:	680a      	ldr	r2, [r1, #0]
   22c96:	4614      	mov	r4, r2
   22c98:	b99c      	cbnz	r4, 22cc2 <_malloc_r+0x56>
   22c9a:	4f20      	ldr	r7, [pc, #128]	; (22d1c <_malloc_r+0xb0>)
   22c9c:	683b      	ldr	r3, [r7, #0]
   22c9e:	b923      	cbnz	r3, 22caa <_malloc_r+0x3e>
   22ca0:	4621      	mov	r1, r4
   22ca2:	4630      	mov	r0, r6
   22ca4:	f000 fbb8 	bl	23418 <_sbrk_r>
   22ca8:	6038      	str	r0, [r7, #0]
   22caa:	4629      	mov	r1, r5
   22cac:	4630      	mov	r0, r6
   22cae:	f000 fbb3 	bl	23418 <_sbrk_r>
   22cb2:	1c43      	adds	r3, r0, #1
   22cb4:	d123      	bne.n	22cfe <_malloc_r+0x92>
   22cb6:	230c      	movs	r3, #12
   22cb8:	4630      	mov	r0, r6
   22cba:	6033      	str	r3, [r6, #0]
   22cbc:	f000 fcb6 	bl	2362c <__malloc_unlock>
   22cc0:	e7e3      	b.n	22c8a <_malloc_r+0x1e>
   22cc2:	6823      	ldr	r3, [r4, #0]
   22cc4:	1b5b      	subs	r3, r3, r5
   22cc6:	d417      	bmi.n	22cf8 <_malloc_r+0x8c>
   22cc8:	2b0b      	cmp	r3, #11
   22cca:	d903      	bls.n	22cd4 <_malloc_r+0x68>
   22ccc:	6023      	str	r3, [r4, #0]
   22cce:	441c      	add	r4, r3
   22cd0:	6025      	str	r5, [r4, #0]
   22cd2:	e004      	b.n	22cde <_malloc_r+0x72>
   22cd4:	6863      	ldr	r3, [r4, #4]
   22cd6:	42a2      	cmp	r2, r4
   22cd8:	bf0c      	ite	eq
   22cda:	600b      	streq	r3, [r1, #0]
   22cdc:	6053      	strne	r3, [r2, #4]
   22cde:	4630      	mov	r0, r6
   22ce0:	f000 fca4 	bl	2362c <__malloc_unlock>
   22ce4:	f104 000b 	add.w	r0, r4, #11
   22ce8:	1d23      	adds	r3, r4, #4
   22cea:	f020 0007 	bic.w	r0, r0, #7
   22cee:	1ac2      	subs	r2, r0, r3
   22cf0:	bf1c      	itt	ne
   22cf2:	1a1b      	subne	r3, r3, r0
   22cf4:	50a3      	strne	r3, [r4, r2]
   22cf6:	e7c9      	b.n	22c8c <_malloc_r+0x20>
   22cf8:	4622      	mov	r2, r4
   22cfa:	6864      	ldr	r4, [r4, #4]
   22cfc:	e7cc      	b.n	22c98 <_malloc_r+0x2c>
   22cfe:	1cc4      	adds	r4, r0, #3
   22d00:	f024 0403 	bic.w	r4, r4, #3
   22d04:	42a0      	cmp	r0, r4
   22d06:	d0e3      	beq.n	22cd0 <_malloc_r+0x64>
   22d08:	1a21      	subs	r1, r4, r0
   22d0a:	4630      	mov	r0, r6
   22d0c:	f000 fb84 	bl	23418 <_sbrk_r>
   22d10:	3001      	adds	r0, #1
   22d12:	d1dd      	bne.n	22cd0 <_malloc_r+0x64>
   22d14:	e7cf      	b.n	22cb6 <_malloc_r+0x4a>
   22d16:	bf00      	nop
   22d18:	200214c0 	.word	0x200214c0
   22d1c:	200214bc 	.word	0x200214bc

00022d20 <_printf_float>:
   22d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d24:	b091      	sub	sp, #68	; 0x44
   22d26:	460c      	mov	r4, r1
   22d28:	4616      	mov	r6, r2
   22d2a:	461f      	mov	r7, r3
   22d2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   22d30:	4605      	mov	r5, r0
   22d32:	f000 fc71 	bl	23618 <_localeconv_r>
   22d36:	6803      	ldr	r3, [r0, #0]
   22d38:	4618      	mov	r0, r3
   22d3a:	9308      	str	r3, [sp, #32]
   22d3c:	f7e6 fb10 	bl	9360 <strlen>
   22d40:	2300      	movs	r3, #0
   22d42:	9009      	str	r0, [sp, #36]	; 0x24
   22d44:	930e      	str	r3, [sp, #56]	; 0x38
   22d46:	f8d8 3000 	ldr.w	r3, [r8]
   22d4a:	f894 a018 	ldrb.w	sl, [r4, #24]
   22d4e:	3307      	adds	r3, #7
   22d50:	f8d4 b000 	ldr.w	fp, [r4]
   22d54:	f023 0307 	bic.w	r3, r3, #7
   22d58:	f103 0208 	add.w	r2, r3, #8
   22d5c:	f8c8 2000 	str.w	r2, [r8]
   22d60:	f04f 32ff 	mov.w	r2, #4294967295
   22d64:	e9d3 8900 	ldrd	r8, r9, [r3]
   22d68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   22d6c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   22d70:	930b      	str	r3, [sp, #44]	; 0x2c
   22d72:	4b9d      	ldr	r3, [pc, #628]	; (22fe8 <_printf_float+0x2c8>)
   22d74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   22d78:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   22d7c:	f7e6 f95a 	bl	9034 <__aeabi_dcmpun>
   22d80:	bb70      	cbnz	r0, 22de0 <_printf_float+0xc0>
   22d82:	f04f 32ff 	mov.w	r2, #4294967295
   22d86:	4b98      	ldr	r3, [pc, #608]	; (22fe8 <_printf_float+0x2c8>)
   22d88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   22d8c:	f7e6 f934 	bl	8ff8 <__aeabi_dcmple>
   22d90:	bb30      	cbnz	r0, 22de0 <_printf_float+0xc0>
   22d92:	2200      	movs	r2, #0
   22d94:	2300      	movs	r3, #0
   22d96:	4640      	mov	r0, r8
   22d98:	4649      	mov	r1, r9
   22d9a:	f7e6 f923 	bl	8fe4 <__aeabi_dcmplt>
   22d9e:	b110      	cbz	r0, 22da6 <_printf_float+0x86>
   22da0:	232d      	movs	r3, #45	; 0x2d
   22da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   22da6:	4a91      	ldr	r2, [pc, #580]	; (22fec <_printf_float+0x2cc>)
   22da8:	4b91      	ldr	r3, [pc, #580]	; (22ff0 <_printf_float+0x2d0>)
   22daa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   22dae:	bf94      	ite	ls
   22db0:	4690      	movls	r8, r2
   22db2:	4698      	movhi	r8, r3
   22db4:	2303      	movs	r3, #3
   22db6:	f04f 0900 	mov.w	r9, #0
   22dba:	6123      	str	r3, [r4, #16]
   22dbc:	f02b 0304 	bic.w	r3, fp, #4
   22dc0:	6023      	str	r3, [r4, #0]
   22dc2:	4633      	mov	r3, r6
   22dc4:	aa0f      	add	r2, sp, #60	; 0x3c
   22dc6:	4621      	mov	r1, r4
   22dc8:	4628      	mov	r0, r5
   22dca:	9700      	str	r7, [sp, #0]
   22dcc:	f006 fc41 	bl	29652 <_printf_common>
   22dd0:	3001      	adds	r0, #1
   22dd2:	f040 8099 	bne.w	22f08 <_printf_float+0x1e8>
   22dd6:	f04f 30ff 	mov.w	r0, #4294967295
   22dda:	b011      	add	sp, #68	; 0x44
   22ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22de0:	4642      	mov	r2, r8
   22de2:	464b      	mov	r3, r9
   22de4:	4640      	mov	r0, r8
   22de6:	4649      	mov	r1, r9
   22de8:	f7e6 f924 	bl	9034 <__aeabi_dcmpun>
   22dec:	b140      	cbz	r0, 22e00 <_printf_float+0xe0>
   22dee:	464b      	mov	r3, r9
   22df0:	4a80      	ldr	r2, [pc, #512]	; (22ff4 <_printf_float+0x2d4>)
   22df2:	2b00      	cmp	r3, #0
   22df4:	bfbc      	itt	lt
   22df6:	232d      	movlt	r3, #45	; 0x2d
   22df8:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   22dfc:	4b7e      	ldr	r3, [pc, #504]	; (22ff8 <_printf_float+0x2d8>)
   22dfe:	e7d4      	b.n	22daa <_printf_float+0x8a>
   22e00:	6863      	ldr	r3, [r4, #4]
   22e02:	1c5a      	adds	r2, r3, #1
   22e04:	d129      	bne.n	22e5a <_printf_float+0x13a>
   22e06:	2306      	movs	r3, #6
   22e08:	6063      	str	r3, [r4, #4]
   22e0a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   22e0e:	2200      	movs	r2, #0
   22e10:	4628      	mov	r0, r5
   22e12:	6023      	str	r3, [r4, #0]
   22e14:	9206      	str	r2, [sp, #24]
   22e16:	aa0e      	add	r2, sp, #56	; 0x38
   22e18:	e9cd a204 	strd	sl, r2, [sp, #16]
   22e1c:	aa0d      	add	r2, sp, #52	; 0x34
   22e1e:	9203      	str	r2, [sp, #12]
   22e20:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   22e24:	e9cd 3201 	strd	r3, r2, [sp, #4]
   22e28:	6863      	ldr	r3, [r4, #4]
   22e2a:	4642      	mov	r2, r8
   22e2c:	9300      	str	r3, [sp, #0]
   22e2e:	464b      	mov	r3, r9
   22e30:	f006 fb6f 	bl	29512 <__cvt>
   22e34:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   22e38:	4680      	mov	r8, r0
   22e3a:	990d      	ldr	r1, [sp, #52]	; 0x34
   22e3c:	d115      	bne.n	22e6a <_printf_float+0x14a>
   22e3e:	1ccb      	adds	r3, r1, #3
   22e40:	db3b      	blt.n	22eba <_printf_float+0x19a>
   22e42:	6863      	ldr	r3, [r4, #4]
   22e44:	4299      	cmp	r1, r3
   22e46:	dc38      	bgt.n	22eba <_printf_float+0x19a>
   22e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22e4a:	4299      	cmp	r1, r3
   22e4c:	db55      	blt.n	22efa <_printf_float+0x1da>
   22e4e:	6823      	ldr	r3, [r4, #0]
   22e50:	6121      	str	r1, [r4, #16]
   22e52:	07d8      	lsls	r0, r3, #31
   22e54:	d545      	bpl.n	22ee2 <_printf_float+0x1c2>
   22e56:	1c4b      	adds	r3, r1, #1
   22e58:	e042      	b.n	22ee0 <_printf_float+0x1c0>
   22e5a:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   22e5e:	2a47      	cmp	r2, #71	; 0x47
   22e60:	d1d3      	bne.n	22e0a <_printf_float+0xea>
   22e62:	2b00      	cmp	r3, #0
   22e64:	d1d1      	bne.n	22e0a <_printf_float+0xea>
   22e66:	2301      	movs	r3, #1
   22e68:	e7ce      	b.n	22e08 <_printf_float+0xe8>
   22e6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   22e6e:	d107      	bne.n	22e80 <_printf_float+0x160>
   22e70:	1cc8      	adds	r0, r1, #3
   22e72:	db25      	blt.n	22ec0 <_printf_float+0x1a0>
   22e74:	6863      	ldr	r3, [r4, #4]
   22e76:	428b      	cmp	r3, r1
   22e78:	db22      	blt.n	22ec0 <_printf_float+0x1a0>
   22e7a:	f04f 0a67 	mov.w	sl, #103	; 0x67
   22e7e:	e7e3      	b.n	22e48 <_printf_float+0x128>
   22e80:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   22e84:	d81f      	bhi.n	22ec6 <_printf_float+0x1a6>
   22e86:	3901      	subs	r1, #1
   22e88:	4652      	mov	r2, sl
   22e8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   22e8e:	910d      	str	r1, [sp, #52]	; 0x34
   22e90:	f006 fba6 	bl	295e0 <__exponent>
   22e94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22e96:	4681      	mov	r9, r0
   22e98:	1813      	adds	r3, r2, r0
   22e9a:	2a01      	cmp	r2, #1
   22e9c:	6123      	str	r3, [r4, #16]
   22e9e:	dc02      	bgt.n	22ea6 <_printf_float+0x186>
   22ea0:	6822      	ldr	r2, [r4, #0]
   22ea2:	07d2      	lsls	r2, r2, #31
   22ea4:	d501      	bpl.n	22eaa <_printf_float+0x18a>
   22ea6:	3301      	adds	r3, #1
   22ea8:	6123      	str	r3, [r4, #16]
   22eaa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   22eae:	2b00      	cmp	r3, #0
   22eb0:	d087      	beq.n	22dc2 <_printf_float+0xa2>
   22eb2:	232d      	movs	r3, #45	; 0x2d
   22eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   22eb8:	e783      	b.n	22dc2 <_printf_float+0xa2>
   22eba:	f04f 0a65 	mov.w	sl, #101	; 0x65
   22ebe:	e7e2      	b.n	22e86 <_printf_float+0x166>
   22ec0:	f04f 0a45 	mov.w	sl, #69	; 0x45
   22ec4:	e7df      	b.n	22e86 <_printf_float+0x166>
   22ec6:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   22eca:	d1bd      	bne.n	22e48 <_printf_float+0x128>
   22ecc:	2900      	cmp	r1, #0
   22ece:	6863      	ldr	r3, [r4, #4]
   22ed0:	dd0b      	ble.n	22eea <_printf_float+0x1ca>
   22ed2:	6121      	str	r1, [r4, #16]
   22ed4:	b913      	cbnz	r3, 22edc <_printf_float+0x1bc>
   22ed6:	6822      	ldr	r2, [r4, #0]
   22ed8:	07d0      	lsls	r0, r2, #31
   22eda:	d502      	bpl.n	22ee2 <_printf_float+0x1c2>
   22edc:	3301      	adds	r3, #1
   22ede:	440b      	add	r3, r1
   22ee0:	6123      	str	r3, [r4, #16]
   22ee2:	f04f 0900 	mov.w	r9, #0
   22ee6:	65a1      	str	r1, [r4, #88]	; 0x58
   22ee8:	e7df      	b.n	22eaa <_printf_float+0x18a>
   22eea:	b913      	cbnz	r3, 22ef2 <_printf_float+0x1d2>
   22eec:	6822      	ldr	r2, [r4, #0]
   22eee:	07d2      	lsls	r2, r2, #31
   22ef0:	d501      	bpl.n	22ef6 <_printf_float+0x1d6>
   22ef2:	3302      	adds	r3, #2
   22ef4:	e7f4      	b.n	22ee0 <_printf_float+0x1c0>
   22ef6:	2301      	movs	r3, #1
   22ef8:	e7f2      	b.n	22ee0 <_printf_float+0x1c0>
   22efa:	2900      	cmp	r1, #0
   22efc:	bfd4      	ite	le
   22efe:	f1c1 0202 	rsble	r2, r1, #2
   22f02:	2201      	movgt	r2, #1
   22f04:	4413      	add	r3, r2
   22f06:	e7eb      	b.n	22ee0 <_printf_float+0x1c0>
   22f08:	6823      	ldr	r3, [r4, #0]
   22f0a:	055a      	lsls	r2, r3, #21
   22f0c:	d407      	bmi.n	22f1e <_printf_float+0x1fe>
   22f0e:	6923      	ldr	r3, [r4, #16]
   22f10:	4642      	mov	r2, r8
   22f12:	4631      	mov	r1, r6
   22f14:	4628      	mov	r0, r5
   22f16:	47b8      	blx	r7
   22f18:	3001      	adds	r0, #1
   22f1a:	d12b      	bne.n	22f74 <_printf_float+0x254>
   22f1c:	e75b      	b.n	22dd6 <_printf_float+0xb6>
   22f1e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   22f22:	f240 80dc 	bls.w	230de <_printf_float+0x3be>
   22f26:	2200      	movs	r2, #0
   22f28:	2300      	movs	r3, #0
   22f2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   22f2e:	f7e6 f84f 	bl	8fd0 <__aeabi_dcmpeq>
   22f32:	2800      	cmp	r0, #0
   22f34:	d033      	beq.n	22f9e <_printf_float+0x27e>
   22f36:	2301      	movs	r3, #1
   22f38:	4a30      	ldr	r2, [pc, #192]	; (22ffc <_printf_float+0x2dc>)
   22f3a:	4631      	mov	r1, r6
   22f3c:	4628      	mov	r0, r5
   22f3e:	47b8      	blx	r7
   22f40:	3001      	adds	r0, #1
   22f42:	f43f af48 	beq.w	22dd6 <_printf_float+0xb6>
   22f46:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   22f4a:	4543      	cmp	r3, r8
   22f4c:	db02      	blt.n	22f54 <_printf_float+0x234>
   22f4e:	6823      	ldr	r3, [r4, #0]
   22f50:	07d8      	lsls	r0, r3, #31
   22f52:	d50f      	bpl.n	22f74 <_printf_float+0x254>
   22f54:	4631      	mov	r1, r6
   22f56:	4628      	mov	r0, r5
   22f58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   22f5c:	47b8      	blx	r7
   22f5e:	3001      	adds	r0, #1
   22f60:	f43f af39 	beq.w	22dd6 <_printf_float+0xb6>
   22f64:	f04f 0900 	mov.w	r9, #0
   22f68:	f108 38ff 	add.w	r8, r8, #4294967295
   22f6c:	f104 0a1a 	add.w	sl, r4, #26
   22f70:	45c8      	cmp	r8, r9
   22f72:	dc09      	bgt.n	22f88 <_printf_float+0x268>
   22f74:	6823      	ldr	r3, [r4, #0]
   22f76:	079b      	lsls	r3, r3, #30
   22f78:	f100 8102 	bmi.w	23180 <_printf_float+0x460>
   22f7c:	68e0      	ldr	r0, [r4, #12]
   22f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22f80:	4298      	cmp	r0, r3
   22f82:	bfb8      	it	lt
   22f84:	4618      	movlt	r0, r3
   22f86:	e728      	b.n	22dda <_printf_float+0xba>
   22f88:	2301      	movs	r3, #1
   22f8a:	4652      	mov	r2, sl
   22f8c:	4631      	mov	r1, r6
   22f8e:	4628      	mov	r0, r5
   22f90:	47b8      	blx	r7
   22f92:	3001      	adds	r0, #1
   22f94:	f43f af1f 	beq.w	22dd6 <_printf_float+0xb6>
   22f98:	f109 0901 	add.w	r9, r9, #1
   22f9c:	e7e8      	b.n	22f70 <_printf_float+0x250>
   22f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22fa0:	2b00      	cmp	r3, #0
   22fa2:	dc38      	bgt.n	23016 <_printf_float+0x2f6>
   22fa4:	2301      	movs	r3, #1
   22fa6:	4a15      	ldr	r2, [pc, #84]	; (22ffc <_printf_float+0x2dc>)
   22fa8:	4631      	mov	r1, r6
   22faa:	4628      	mov	r0, r5
   22fac:	47b8      	blx	r7
   22fae:	3001      	adds	r0, #1
   22fb0:	f43f af11 	beq.w	22dd6 <_printf_float+0xb6>
   22fb4:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   22fb8:	ea59 0303 	orrs.w	r3, r9, r3
   22fbc:	d102      	bne.n	22fc4 <_printf_float+0x2a4>
   22fbe:	6823      	ldr	r3, [r4, #0]
   22fc0:	07d9      	lsls	r1, r3, #31
   22fc2:	d5d7      	bpl.n	22f74 <_printf_float+0x254>
   22fc4:	4631      	mov	r1, r6
   22fc6:	4628      	mov	r0, r5
   22fc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   22fcc:	47b8      	blx	r7
   22fce:	3001      	adds	r0, #1
   22fd0:	f43f af01 	beq.w	22dd6 <_printf_float+0xb6>
   22fd4:	f04f 0a00 	mov.w	sl, #0
   22fd8:	f104 0b1a 	add.w	fp, r4, #26
   22fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22fde:	425b      	negs	r3, r3
   22fe0:	4553      	cmp	r3, sl
   22fe2:	dc0d      	bgt.n	23000 <_printf_float+0x2e0>
   22fe4:	464b      	mov	r3, r9
   22fe6:	e793      	b.n	22f10 <_printf_float+0x1f0>
   22fe8:	7fefffff 	.word	0x7fefffff
   22fec:	00030bf9 	.word	0x00030bf9
   22ff0:	0002c496 	.word	0x0002c496
   22ff4:	00030bfd 	.word	0x00030bfd
   22ff8:	00030c01 	.word	0x00030c01
   22ffc:	00030a97 	.word	0x00030a97
   23000:	2301      	movs	r3, #1
   23002:	465a      	mov	r2, fp
   23004:	4631      	mov	r1, r6
   23006:	4628      	mov	r0, r5
   23008:	47b8      	blx	r7
   2300a:	3001      	adds	r0, #1
   2300c:	f43f aee3 	beq.w	22dd6 <_printf_float+0xb6>
   23010:	f10a 0a01 	add.w	sl, sl, #1
   23014:	e7e2      	b.n	22fdc <_printf_float+0x2bc>
   23016:	6da3      	ldr	r3, [r4, #88]	; 0x58
   23018:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2301c:	4553      	cmp	r3, sl
   2301e:	bfa8      	it	ge
   23020:	4653      	movge	r3, sl
   23022:	2b00      	cmp	r3, #0
   23024:	4699      	mov	r9, r3
   23026:	dc36      	bgt.n	23096 <_printf_float+0x376>
   23028:	f04f 0b00 	mov.w	fp, #0
   2302c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   23030:	f104 021a 	add.w	r2, r4, #26
   23034:	6da3      	ldr	r3, [r4, #88]	; 0x58
   23036:	930a      	str	r3, [sp, #40]	; 0x28
   23038:	eba3 0309 	sub.w	r3, r3, r9
   2303c:	455b      	cmp	r3, fp
   2303e:	dc31      	bgt.n	230a4 <_printf_float+0x384>
   23040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23042:	459a      	cmp	sl, r3
   23044:	dc3a      	bgt.n	230bc <_printf_float+0x39c>
   23046:	6823      	ldr	r3, [r4, #0]
   23048:	07da      	lsls	r2, r3, #31
   2304a:	d437      	bmi.n	230bc <_printf_float+0x39c>
   2304c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2304e:	ebaa 0903 	sub.w	r9, sl, r3
   23052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23054:	ebaa 0303 	sub.w	r3, sl, r3
   23058:	4599      	cmp	r9, r3
   2305a:	bfa8      	it	ge
   2305c:	4699      	movge	r9, r3
   2305e:	f1b9 0f00 	cmp.w	r9, #0
   23062:	dc33      	bgt.n	230cc <_printf_float+0x3ac>
   23064:	f04f 0800 	mov.w	r8, #0
   23068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2306c:	f104 0b1a 	add.w	fp, r4, #26
   23070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23072:	ebaa 0303 	sub.w	r3, sl, r3
   23076:	eba3 0309 	sub.w	r3, r3, r9
   2307a:	4543      	cmp	r3, r8
   2307c:	f77f af7a 	ble.w	22f74 <_printf_float+0x254>
   23080:	2301      	movs	r3, #1
   23082:	465a      	mov	r2, fp
   23084:	4631      	mov	r1, r6
   23086:	4628      	mov	r0, r5
   23088:	47b8      	blx	r7
   2308a:	3001      	adds	r0, #1
   2308c:	f43f aea3 	beq.w	22dd6 <_printf_float+0xb6>
   23090:	f108 0801 	add.w	r8, r8, #1
   23094:	e7ec      	b.n	23070 <_printf_float+0x350>
   23096:	4642      	mov	r2, r8
   23098:	4631      	mov	r1, r6
   2309a:	4628      	mov	r0, r5
   2309c:	47b8      	blx	r7
   2309e:	3001      	adds	r0, #1
   230a0:	d1c2      	bne.n	23028 <_printf_float+0x308>
   230a2:	e698      	b.n	22dd6 <_printf_float+0xb6>
   230a4:	2301      	movs	r3, #1
   230a6:	4631      	mov	r1, r6
   230a8:	4628      	mov	r0, r5
   230aa:	920a      	str	r2, [sp, #40]	; 0x28
   230ac:	47b8      	blx	r7
   230ae:	3001      	adds	r0, #1
   230b0:	f43f ae91 	beq.w	22dd6 <_printf_float+0xb6>
   230b4:	f10b 0b01 	add.w	fp, fp, #1
   230b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   230ba:	e7bb      	b.n	23034 <_printf_float+0x314>
   230bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   230c0:	4631      	mov	r1, r6
   230c2:	4628      	mov	r0, r5
   230c4:	47b8      	blx	r7
   230c6:	3001      	adds	r0, #1
   230c8:	d1c0      	bne.n	2304c <_printf_float+0x32c>
   230ca:	e684      	b.n	22dd6 <_printf_float+0xb6>
   230cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   230ce:	464b      	mov	r3, r9
   230d0:	4631      	mov	r1, r6
   230d2:	4628      	mov	r0, r5
   230d4:	4442      	add	r2, r8
   230d6:	47b8      	blx	r7
   230d8:	3001      	adds	r0, #1
   230da:	d1c3      	bne.n	23064 <_printf_float+0x344>
   230dc:	e67b      	b.n	22dd6 <_printf_float+0xb6>
   230de:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   230e2:	f1ba 0f01 	cmp.w	sl, #1
   230e6:	dc01      	bgt.n	230ec <_printf_float+0x3cc>
   230e8:	07db      	lsls	r3, r3, #31
   230ea:	d536      	bpl.n	2315a <_printf_float+0x43a>
   230ec:	2301      	movs	r3, #1
   230ee:	4642      	mov	r2, r8
   230f0:	4631      	mov	r1, r6
   230f2:	4628      	mov	r0, r5
   230f4:	47b8      	blx	r7
   230f6:	3001      	adds	r0, #1
   230f8:	f43f ae6d 	beq.w	22dd6 <_printf_float+0xb6>
   230fc:	4631      	mov	r1, r6
   230fe:	4628      	mov	r0, r5
   23100:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   23104:	47b8      	blx	r7
   23106:	3001      	adds	r0, #1
   23108:	f43f ae65 	beq.w	22dd6 <_printf_float+0xb6>
   2310c:	2200      	movs	r2, #0
   2310e:	2300      	movs	r3, #0
   23110:	f10a 3aff 	add.w	sl, sl, #4294967295
   23114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   23118:	f7e5 ff5a 	bl	8fd0 <__aeabi_dcmpeq>
   2311c:	b9c0      	cbnz	r0, 23150 <_printf_float+0x430>
   2311e:	4653      	mov	r3, sl
   23120:	f108 0201 	add.w	r2, r8, #1
   23124:	4631      	mov	r1, r6
   23126:	4628      	mov	r0, r5
   23128:	47b8      	blx	r7
   2312a:	3001      	adds	r0, #1
   2312c:	d10c      	bne.n	23148 <_printf_float+0x428>
   2312e:	e652      	b.n	22dd6 <_printf_float+0xb6>
   23130:	2301      	movs	r3, #1
   23132:	465a      	mov	r2, fp
   23134:	4631      	mov	r1, r6
   23136:	4628      	mov	r0, r5
   23138:	47b8      	blx	r7
   2313a:	3001      	adds	r0, #1
   2313c:	f43f ae4b 	beq.w	22dd6 <_printf_float+0xb6>
   23140:	f108 0801 	add.w	r8, r8, #1
   23144:	45d0      	cmp	r8, sl
   23146:	dbf3      	blt.n	23130 <_printf_float+0x410>
   23148:	464b      	mov	r3, r9
   2314a:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2314e:	e6e0      	b.n	22f12 <_printf_float+0x1f2>
   23150:	f04f 0800 	mov.w	r8, #0
   23154:	f104 0b1a 	add.w	fp, r4, #26
   23158:	e7f4      	b.n	23144 <_printf_float+0x424>
   2315a:	2301      	movs	r3, #1
   2315c:	4642      	mov	r2, r8
   2315e:	e7e1      	b.n	23124 <_printf_float+0x404>
   23160:	2301      	movs	r3, #1
   23162:	464a      	mov	r2, r9
   23164:	4631      	mov	r1, r6
   23166:	4628      	mov	r0, r5
   23168:	47b8      	blx	r7
   2316a:	3001      	adds	r0, #1
   2316c:	f43f ae33 	beq.w	22dd6 <_printf_float+0xb6>
   23170:	f108 0801 	add.w	r8, r8, #1
   23174:	68e3      	ldr	r3, [r4, #12]
   23176:	990f      	ldr	r1, [sp, #60]	; 0x3c
   23178:	1a5b      	subs	r3, r3, r1
   2317a:	4543      	cmp	r3, r8
   2317c:	dcf0      	bgt.n	23160 <_printf_float+0x440>
   2317e:	e6fd      	b.n	22f7c <_printf_float+0x25c>
   23180:	f04f 0800 	mov.w	r8, #0
   23184:	f104 0919 	add.w	r9, r4, #25
   23188:	e7f4      	b.n	23174 <_printf_float+0x454>
   2318a:	bf00      	nop

0002318c <_printf_i>:
   2318c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   23190:	7e0f      	ldrb	r7, [r1, #24]
   23192:	4691      	mov	r9, r2
   23194:	4680      	mov	r8, r0
   23196:	460c      	mov	r4, r1
   23198:	2f78      	cmp	r7, #120	; 0x78
   2319a:	469a      	mov	sl, r3
   2319c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2319e:	f101 0243 	add.w	r2, r1, #67	; 0x43
   231a2:	d807      	bhi.n	231b4 <_printf_i+0x28>
   231a4:	2f62      	cmp	r7, #98	; 0x62
   231a6:	d80a      	bhi.n	231be <_printf_i+0x32>
   231a8:	2f00      	cmp	r7, #0
   231aa:	f000 80e0 	beq.w	2336e <_printf_i+0x1e2>
   231ae:	2f58      	cmp	r7, #88	; 0x58
   231b0:	f000 80bb 	beq.w	2332a <_printf_i+0x19e>
   231b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
   231b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   231bc:	e03a      	b.n	23234 <_printf_i+0xa8>
   231be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   231c2:	2b15      	cmp	r3, #21
   231c4:	d8f6      	bhi.n	231b4 <_printf_i+0x28>
   231c6:	a101      	add	r1, pc, #4	; (adr r1, 231cc <_printf_i+0x40>)
   231c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   231cc:	00023225 	.word	0x00023225
   231d0:	00023239 	.word	0x00023239
   231d4:	000231b5 	.word	0x000231b5
   231d8:	000231b5 	.word	0x000231b5
   231dc:	000231b5 	.word	0x000231b5
   231e0:	000231b5 	.word	0x000231b5
   231e4:	00023239 	.word	0x00023239
   231e8:	000231b5 	.word	0x000231b5
   231ec:	000231b5 	.word	0x000231b5
   231f0:	000231b5 	.word	0x000231b5
   231f4:	000231b5 	.word	0x000231b5
   231f8:	00023355 	.word	0x00023355
   231fc:	000232c9 	.word	0x000232c9
   23200:	0002330b 	.word	0x0002330b
   23204:	000231b5 	.word	0x000231b5
   23208:	000231b5 	.word	0x000231b5
   2320c:	00023377 	.word	0x00023377
   23210:	000231b5 	.word	0x000231b5
   23214:	000232c9 	.word	0x000232c9
   23218:	000231b5 	.word	0x000231b5
   2321c:	000231b5 	.word	0x000231b5
   23220:	00023313 	.word	0x00023313
   23224:	682b      	ldr	r3, [r5, #0]
   23226:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2322a:	1d1a      	adds	r2, r3, #4
   2322c:	681b      	ldr	r3, [r3, #0]
   2322e:	602a      	str	r2, [r5, #0]
   23230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   23234:	2301      	movs	r3, #1
   23236:	e0ab      	b.n	23390 <_printf_i+0x204>
   23238:	6823      	ldr	r3, [r4, #0]
   2323a:	6829      	ldr	r1, [r5, #0]
   2323c:	061f      	lsls	r7, r3, #24
   2323e:	f101 0004 	add.w	r0, r1, #4
   23242:	6028      	str	r0, [r5, #0]
   23244:	d501      	bpl.n	2324a <_printf_i+0xbe>
   23246:	680d      	ldr	r5, [r1, #0]
   23248:	e003      	b.n	23252 <_printf_i+0xc6>
   2324a:	065e      	lsls	r6, r3, #25
   2324c:	d5fb      	bpl.n	23246 <_printf_i+0xba>
   2324e:	f9b1 5000 	ldrsh.w	r5, [r1]
   23252:	2d00      	cmp	r5, #0
   23254:	6861      	ldr	r1, [r4, #4]
   23256:	da7a      	bge.n	2334e <_printf_i+0x1c2>
   23258:	202d      	movs	r0, #45	; 0x2d
   2325a:	2900      	cmp	r1, #0
   2325c:	60a1      	str	r1, [r4, #8]
   2325e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   23262:	da2d      	bge.n	232c0 <_printf_i+0x134>
   23264:	426d      	negs	r5, r5
   23266:	485e      	ldr	r0, [pc, #376]	; (233e0 <_printf_i+0x254>)
   23268:	230a      	movs	r3, #10
   2326a:	4616      	mov	r6, r2
   2326c:	fbb5 f1f3 	udiv	r1, r5, r3
   23270:	fb03 5711 	mls	r7, r3, r1, r5
   23274:	5dc7      	ldrb	r7, [r0, r7]
   23276:	f806 7d01 	strb.w	r7, [r6, #-1]!
   2327a:	462f      	mov	r7, r5
   2327c:	460d      	mov	r5, r1
   2327e:	42bb      	cmp	r3, r7
   23280:	d9f4      	bls.n	2326c <_printf_i+0xe0>
   23282:	2b08      	cmp	r3, #8
   23284:	d10b      	bne.n	2329e <_printf_i+0x112>
   23286:	6823      	ldr	r3, [r4, #0]
   23288:	07df      	lsls	r7, r3, #31
   2328a:	d508      	bpl.n	2329e <_printf_i+0x112>
   2328c:	6923      	ldr	r3, [r4, #16]
   2328e:	6861      	ldr	r1, [r4, #4]
   23290:	4299      	cmp	r1, r3
   23292:	bfde      	ittt	le
   23294:	2330      	movle	r3, #48	; 0x30
   23296:	f806 3c01 	strble.w	r3, [r6, #-1]
   2329a:	f106 36ff 	addle.w	r6, r6, #4294967295
   2329e:	1b92      	subs	r2, r2, r6
   232a0:	6122      	str	r2, [r4, #16]
   232a2:	464b      	mov	r3, r9
   232a4:	aa03      	add	r2, sp, #12
   232a6:	4621      	mov	r1, r4
   232a8:	4640      	mov	r0, r8
   232aa:	f8cd a000 	str.w	sl, [sp]
   232ae:	f006 f9d0 	bl	29652 <_printf_common>
   232b2:	3001      	adds	r0, #1
   232b4:	d171      	bne.n	2339a <_printf_i+0x20e>
   232b6:	f04f 30ff 	mov.w	r0, #4294967295
   232ba:	b004      	add	sp, #16
   232bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   232c0:	f023 0304 	bic.w	r3, r3, #4
   232c4:	6023      	str	r3, [r4, #0]
   232c6:	e7cd      	b.n	23264 <_printf_i+0xd8>
   232c8:	682b      	ldr	r3, [r5, #0]
   232ca:	6820      	ldr	r0, [r4, #0]
   232cc:	1d19      	adds	r1, r3, #4
   232ce:	6029      	str	r1, [r5, #0]
   232d0:	0605      	lsls	r5, r0, #24
   232d2:	d501      	bpl.n	232d8 <_printf_i+0x14c>
   232d4:	681d      	ldr	r5, [r3, #0]
   232d6:	e002      	b.n	232de <_printf_i+0x152>
   232d8:	0641      	lsls	r1, r0, #25
   232da:	d5fb      	bpl.n	232d4 <_printf_i+0x148>
   232dc:	881d      	ldrh	r5, [r3, #0]
   232de:	2f6f      	cmp	r7, #111	; 0x6f
   232e0:	483f      	ldr	r0, [pc, #252]	; (233e0 <_printf_i+0x254>)
   232e2:	bf14      	ite	ne
   232e4:	230a      	movne	r3, #10
   232e6:	2308      	moveq	r3, #8
   232e8:	2100      	movs	r1, #0
   232ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   232ee:	6866      	ldr	r6, [r4, #4]
   232f0:	2e00      	cmp	r6, #0
   232f2:	60a6      	str	r6, [r4, #8]
   232f4:	dbb9      	blt.n	2326a <_printf_i+0xde>
   232f6:	6821      	ldr	r1, [r4, #0]
   232f8:	f021 0104 	bic.w	r1, r1, #4
   232fc:	6021      	str	r1, [r4, #0]
   232fe:	2d00      	cmp	r5, #0
   23300:	d1b3      	bne.n	2326a <_printf_i+0xde>
   23302:	2e00      	cmp	r6, #0
   23304:	d1b1      	bne.n	2326a <_printf_i+0xde>
   23306:	4616      	mov	r6, r2
   23308:	e7bb      	b.n	23282 <_printf_i+0xf6>
   2330a:	6823      	ldr	r3, [r4, #0]
   2330c:	f043 0320 	orr.w	r3, r3, #32
   23310:	6023      	str	r3, [r4, #0]
   23312:	2778      	movs	r7, #120	; 0x78
   23314:	4833      	ldr	r0, [pc, #204]	; (233e4 <_printf_i+0x258>)
   23316:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2331a:	6829      	ldr	r1, [r5, #0]
   2331c:	6823      	ldr	r3, [r4, #0]
   2331e:	1d0e      	adds	r6, r1, #4
   23320:	602e      	str	r6, [r5, #0]
   23322:	061e      	lsls	r6, r3, #24
   23324:	d503      	bpl.n	2332e <_printf_i+0x1a2>
   23326:	680d      	ldr	r5, [r1, #0]
   23328:	e004      	b.n	23334 <_printf_i+0x1a8>
   2332a:	482d      	ldr	r0, [pc, #180]	; (233e0 <_printf_i+0x254>)
   2332c:	e7f3      	b.n	23316 <_printf_i+0x18a>
   2332e:	065d      	lsls	r5, r3, #25
   23330:	d5f9      	bpl.n	23326 <_printf_i+0x19a>
   23332:	880d      	ldrh	r5, [r1, #0]
   23334:	07d9      	lsls	r1, r3, #31
   23336:	bf44      	itt	mi
   23338:	f043 0320 	orrmi.w	r3, r3, #32
   2333c:	6023      	strmi	r3, [r4, #0]
   2333e:	b10d      	cbz	r5, 23344 <_printf_i+0x1b8>
   23340:	2310      	movs	r3, #16
   23342:	e7d1      	b.n	232e8 <_printf_i+0x15c>
   23344:	6823      	ldr	r3, [r4, #0]
   23346:	f023 0320 	bic.w	r3, r3, #32
   2334a:	6023      	str	r3, [r4, #0]
   2334c:	e7f8      	b.n	23340 <_printf_i+0x1b4>
   2334e:	4824      	ldr	r0, [pc, #144]	; (233e0 <_printf_i+0x254>)
   23350:	230a      	movs	r3, #10
   23352:	e7cc      	b.n	232ee <_printf_i+0x162>
   23354:	682b      	ldr	r3, [r5, #0]
   23356:	6826      	ldr	r6, [r4, #0]
   23358:	1d18      	adds	r0, r3, #4
   2335a:	6961      	ldr	r1, [r4, #20]
   2335c:	6028      	str	r0, [r5, #0]
   2335e:	0635      	lsls	r5, r6, #24
   23360:	681b      	ldr	r3, [r3, #0]
   23362:	d501      	bpl.n	23368 <_printf_i+0x1dc>
   23364:	6019      	str	r1, [r3, #0]
   23366:	e002      	b.n	2336e <_printf_i+0x1e2>
   23368:	0670      	lsls	r0, r6, #25
   2336a:	d5fb      	bpl.n	23364 <_printf_i+0x1d8>
   2336c:	8019      	strh	r1, [r3, #0]
   2336e:	2300      	movs	r3, #0
   23370:	4616      	mov	r6, r2
   23372:	6123      	str	r3, [r4, #16]
   23374:	e795      	b.n	232a2 <_printf_i+0x116>
   23376:	682b      	ldr	r3, [r5, #0]
   23378:	2100      	movs	r1, #0
   2337a:	1d1a      	adds	r2, r3, #4
   2337c:	602a      	str	r2, [r5, #0]
   2337e:	681e      	ldr	r6, [r3, #0]
   23380:	6862      	ldr	r2, [r4, #4]
   23382:	4630      	mov	r0, r6
   23384:	f006 fad2 	bl	2992c <memchr>
   23388:	b108      	cbz	r0, 2338e <_printf_i+0x202>
   2338a:	1b80      	subs	r0, r0, r6
   2338c:	6060      	str	r0, [r4, #4]
   2338e:	6863      	ldr	r3, [r4, #4]
   23390:	6123      	str	r3, [r4, #16]
   23392:	2300      	movs	r3, #0
   23394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   23398:	e783      	b.n	232a2 <_printf_i+0x116>
   2339a:	6923      	ldr	r3, [r4, #16]
   2339c:	4632      	mov	r2, r6
   2339e:	4649      	mov	r1, r9
   233a0:	4640      	mov	r0, r8
   233a2:	47d0      	blx	sl
   233a4:	3001      	adds	r0, #1
   233a6:	d086      	beq.n	232b6 <_printf_i+0x12a>
   233a8:	6823      	ldr	r3, [r4, #0]
   233aa:	079b      	lsls	r3, r3, #30
   233ac:	d414      	bmi.n	233d8 <_printf_i+0x24c>
   233ae:	68e0      	ldr	r0, [r4, #12]
   233b0:	9b03      	ldr	r3, [sp, #12]
   233b2:	4298      	cmp	r0, r3
   233b4:	bfb8      	it	lt
   233b6:	4618      	movlt	r0, r3
   233b8:	e77f      	b.n	232ba <_printf_i+0x12e>
   233ba:	2301      	movs	r3, #1
   233bc:	4632      	mov	r2, r6
   233be:	4649      	mov	r1, r9
   233c0:	4640      	mov	r0, r8
   233c2:	47d0      	blx	sl
   233c4:	3001      	adds	r0, #1
   233c6:	f43f af76 	beq.w	232b6 <_printf_i+0x12a>
   233ca:	3501      	adds	r5, #1
   233cc:	68e3      	ldr	r3, [r4, #12]
   233ce:	9903      	ldr	r1, [sp, #12]
   233d0:	1a5b      	subs	r3, r3, r1
   233d2:	42ab      	cmp	r3, r5
   233d4:	dcf1      	bgt.n	233ba <_printf_i+0x22e>
   233d6:	e7ea      	b.n	233ae <_printf_i+0x222>
   233d8:	2500      	movs	r5, #0
   233da:	f104 0619 	add.w	r6, r4, #25
   233de:	e7f5      	b.n	233cc <_printf_i+0x240>
   233e0:	00030c05 	.word	0x00030c05
   233e4:	00030c16 	.word	0x00030c16

000233e8 <iprintf>:
   233e8:	b40f      	push	{r0, r1, r2, r3}
   233ea:	4b0a      	ldr	r3, [pc, #40]	; (23414 <iprintf+0x2c>)
   233ec:	b513      	push	{r0, r1, r4, lr}
   233ee:	681c      	ldr	r4, [r3, #0]
   233f0:	b124      	cbz	r4, 233fc <iprintf+0x14>
   233f2:	69a3      	ldr	r3, [r4, #24]
   233f4:	b913      	cbnz	r3, 233fc <iprintf+0x14>
   233f6:	4620      	mov	r0, r4
   233f8:	f000 f87e 	bl	234f8 <__sinit>
   233fc:	ab05      	add	r3, sp, #20
   233fe:	9a04      	ldr	r2, [sp, #16]
   23400:	68a1      	ldr	r1, [r4, #8]
   23402:	4620      	mov	r0, r4
   23404:	9301      	str	r3, [sp, #4]
   23406:	f000 fc35 	bl	23c74 <_vfiprintf_r>
   2340a:	b002      	add	sp, #8
   2340c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23410:	b004      	add	sp, #16
   23412:	4770      	bx	lr
   23414:	20008744 	.word	0x20008744

00023418 <_sbrk_r>:
   23418:	b538      	push	{r3, r4, r5, lr}
   2341a:	2300      	movs	r3, #0
   2341c:	4d05      	ldr	r5, [pc, #20]	; (23434 <_sbrk_r+0x1c>)
   2341e:	4604      	mov	r4, r0
   23420:	4608      	mov	r0, r1
   23422:	602b      	str	r3, [r5, #0]
   23424:	f7ed fc3a 	bl	10c9c <_sbrk>
   23428:	1c43      	adds	r3, r0, #1
   2342a:	d102      	bne.n	23432 <_sbrk_r+0x1a>
   2342c:	682b      	ldr	r3, [r5, #0]
   2342e:	b103      	cbz	r3, 23432 <_sbrk_r+0x1a>
   23430:	6023      	str	r3, [r4, #0]
   23432:	bd38      	pop	{r3, r4, r5, pc}
   23434:	200214c4 	.word	0x200214c4

00023438 <__assert_func>:
   23438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2343a:	4614      	mov	r4, r2
   2343c:	461a      	mov	r2, r3
   2343e:	4b09      	ldr	r3, [pc, #36]	; (23464 <__assert_func+0x2c>)
   23440:	4605      	mov	r5, r0
   23442:	681b      	ldr	r3, [r3, #0]
   23444:	68d8      	ldr	r0, [r3, #12]
   23446:	b954      	cbnz	r4, 2345e <__assert_func+0x26>
   23448:	4b07      	ldr	r3, [pc, #28]	; (23468 <__assert_func+0x30>)
   2344a:	461c      	mov	r4, r3
   2344c:	9100      	str	r1, [sp, #0]
   2344e:	4907      	ldr	r1, [pc, #28]	; (2346c <__assert_func+0x34>)
   23450:	e9cd 3401 	strd	r3, r4, [sp, #4]
   23454:	462b      	mov	r3, r5
   23456:	f000 f8cd 	bl	235f4 <fiprintf>
   2345a:	f006 fb49 	bl	29af0 <abort>
   2345e:	4b04      	ldr	r3, [pc, #16]	; (23470 <__assert_func+0x38>)
   23460:	e7f4      	b.n	2344c <__assert_func+0x14>
   23462:	bf00      	nop
   23464:	20008744 	.word	0x20008744
   23468:	0002ee3c 	.word	0x0002ee3c
   2346c:	00030c34 	.word	0x00030c34
   23470:	00030c27 	.word	0x00030c27

00023474 <std>:
   23474:	2300      	movs	r3, #0
   23476:	b510      	push	{r4, lr}
   23478:	4604      	mov	r4, r0
   2347a:	6083      	str	r3, [r0, #8]
   2347c:	8181      	strh	r1, [r0, #12]
   2347e:	4619      	mov	r1, r3
   23480:	6643      	str	r3, [r0, #100]	; 0x64
   23482:	81c2      	strh	r2, [r0, #14]
   23484:	2208      	movs	r2, #8
   23486:	6183      	str	r3, [r0, #24]
   23488:	e9c0 3300 	strd	r3, r3, [r0]
   2348c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   23490:	305c      	adds	r0, #92	; 0x5c
   23492:	f006 f828 	bl	294e6 <memset>
   23496:	4b05      	ldr	r3, [pc, #20]	; (234ac <std+0x38>)
   23498:	6224      	str	r4, [r4, #32]
   2349a:	6263      	str	r3, [r4, #36]	; 0x24
   2349c:	4b04      	ldr	r3, [pc, #16]	; (234b0 <std+0x3c>)
   2349e:	62a3      	str	r3, [r4, #40]	; 0x28
   234a0:	4b04      	ldr	r3, [pc, #16]	; (234b4 <std+0x40>)
   234a2:	62e3      	str	r3, [r4, #44]	; 0x2c
   234a4:	4b04      	ldr	r3, [pc, #16]	; (234b8 <std+0x44>)
   234a6:	6323      	str	r3, [r4, #48]	; 0x30
   234a8:	bd10      	pop	{r4, pc}
   234aa:	bf00      	nop
   234ac:	00029a6b 	.word	0x00029a6b
   234b0:	00029a8d 	.word	0x00029a8d
   234b4:	00029ac5 	.word	0x00029ac5
   234b8:	00029ae9 	.word	0x00029ae9

000234bc <_cleanup_r>:
   234bc:	4901      	ldr	r1, [pc, #4]	; (234c4 <_cleanup_r+0x8>)
   234be:	f006 ba16 	b.w	298ee <_fwalk_reent>
   234c2:	bf00      	nop
   234c4:	0002408d 	.word	0x0002408d

000234c8 <__sfp_lock_acquire>:
   234c8:	4801      	ldr	r0, [pc, #4]	; (234d0 <__sfp_lock_acquire+0x8>)
   234ca:	f7ed bc2b 	b.w	10d24 <__retarget_lock_acquire_recursive>
   234ce:	bf00      	nop
   234d0:	20008a94 	.word	0x20008a94

000234d4 <__sfp_lock_release>:
   234d4:	4801      	ldr	r0, [pc, #4]	; (234dc <__sfp_lock_release+0x8>)
   234d6:	f7ed bc41 	b.w	10d5c <__retarget_lock_release_recursive>
   234da:	bf00      	nop
   234dc:	20008a94 	.word	0x20008a94

000234e0 <__sinit_lock_acquire>:
   234e0:	4801      	ldr	r0, [pc, #4]	; (234e8 <__sinit_lock_acquire+0x8>)
   234e2:	f7ed bc1f 	b.w	10d24 <__retarget_lock_acquire_recursive>
   234e6:	bf00      	nop
   234e8:	20008aa8 	.word	0x20008aa8

000234ec <__sinit_lock_release>:
   234ec:	4801      	ldr	r0, [pc, #4]	; (234f4 <__sinit_lock_release+0x8>)
   234ee:	f7ed bc35 	b.w	10d5c <__retarget_lock_release_recursive>
   234f2:	bf00      	nop
   234f4:	20008aa8 	.word	0x20008aa8

000234f8 <__sinit>:
   234f8:	b510      	push	{r4, lr}
   234fa:	4604      	mov	r4, r0
   234fc:	f7ff fff0 	bl	234e0 <__sinit_lock_acquire>
   23500:	69a3      	ldr	r3, [r4, #24]
   23502:	b11b      	cbz	r3, 2350c <__sinit+0x14>
   23504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23508:	f7ff bff0 	b.w	234ec <__sinit_lock_release>
   2350c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   23510:	6523      	str	r3, [r4, #80]	; 0x50
   23512:	4620      	mov	r0, r4
   23514:	4b12      	ldr	r3, [pc, #72]	; (23560 <__sinit+0x68>)
   23516:	4a13      	ldr	r2, [pc, #76]	; (23564 <__sinit+0x6c>)
   23518:	681b      	ldr	r3, [r3, #0]
   2351a:	62a2      	str	r2, [r4, #40]	; 0x28
   2351c:	42a3      	cmp	r3, r4
   2351e:	bf04      	itt	eq
   23520:	2301      	moveq	r3, #1
   23522:	61a3      	streq	r3, [r4, #24]
   23524:	f000 f820 	bl	23568 <__sfp>
   23528:	6060      	str	r0, [r4, #4]
   2352a:	4620      	mov	r0, r4
   2352c:	f000 f81c 	bl	23568 <__sfp>
   23530:	60a0      	str	r0, [r4, #8]
   23532:	4620      	mov	r0, r4
   23534:	f000 f818 	bl	23568 <__sfp>
   23538:	2200      	movs	r2, #0
   2353a:	2104      	movs	r1, #4
   2353c:	60e0      	str	r0, [r4, #12]
   2353e:	6860      	ldr	r0, [r4, #4]
   23540:	f7ff ff98 	bl	23474 <std>
   23544:	2201      	movs	r2, #1
   23546:	2109      	movs	r1, #9
   23548:	68a0      	ldr	r0, [r4, #8]
   2354a:	f7ff ff93 	bl	23474 <std>
   2354e:	2202      	movs	r2, #2
   23550:	2112      	movs	r1, #18
   23552:	68e0      	ldr	r0, [r4, #12]
   23554:	f7ff ff8e 	bl	23474 <std>
   23558:	2301      	movs	r3, #1
   2355a:	61a3      	str	r3, [r4, #24]
   2355c:	e7d2      	b.n	23504 <__sinit+0xc>
   2355e:	bf00      	nop
   23560:	0002b244 	.word	0x0002b244
   23564:	000234bd 	.word	0x000234bd

00023568 <__sfp>:
   23568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2356a:	4607      	mov	r7, r0
   2356c:	f7ff ffac 	bl	234c8 <__sfp_lock_acquire>
   23570:	4b1e      	ldr	r3, [pc, #120]	; (235ec <__sfp+0x84>)
   23572:	681e      	ldr	r6, [r3, #0]
   23574:	69b3      	ldr	r3, [r6, #24]
   23576:	b913      	cbnz	r3, 2357e <__sfp+0x16>
   23578:	4630      	mov	r0, r6
   2357a:	f7ff ffbd 	bl	234f8 <__sinit>
   2357e:	3648      	adds	r6, #72	; 0x48
   23580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   23584:	3b01      	subs	r3, #1
   23586:	d503      	bpl.n	23590 <__sfp+0x28>
   23588:	6833      	ldr	r3, [r6, #0]
   2358a:	b30b      	cbz	r3, 235d0 <__sfp+0x68>
   2358c:	6836      	ldr	r6, [r6, #0]
   2358e:	e7f7      	b.n	23580 <__sfp+0x18>
   23590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   23594:	b9d5      	cbnz	r5, 235cc <__sfp+0x64>
   23596:	4b16      	ldr	r3, [pc, #88]	; (235f0 <__sfp+0x88>)
   23598:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2359c:	6665      	str	r5, [r4, #100]	; 0x64
   2359e:	60e3      	str	r3, [r4, #12]
   235a0:	f7ed fb90 	bl	10cc4 <__retarget_lock_init_recursive>
   235a4:	f7ff ff96 	bl	234d4 <__sfp_lock_release>
   235a8:	2208      	movs	r2, #8
   235aa:	4629      	mov	r1, r5
   235ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   235b0:	6025      	str	r5, [r4, #0]
   235b2:	61a5      	str	r5, [r4, #24]
   235b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   235b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
   235bc:	f005 ff93 	bl	294e6 <memset>
   235c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   235c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   235c8:	4620      	mov	r0, r4
   235ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   235cc:	3468      	adds	r4, #104	; 0x68
   235ce:	e7d9      	b.n	23584 <__sfp+0x1c>
   235d0:	2104      	movs	r1, #4
   235d2:	4638      	mov	r0, r7
   235d4:	f006 f975 	bl	298c2 <__sfmoreglue>
   235d8:	4604      	mov	r4, r0
   235da:	6030      	str	r0, [r6, #0]
   235dc:	2800      	cmp	r0, #0
   235de:	d1d5      	bne.n	2358c <__sfp+0x24>
   235e0:	f7ff ff78 	bl	234d4 <__sfp_lock_release>
   235e4:	230c      	movs	r3, #12
   235e6:	603b      	str	r3, [r7, #0]
   235e8:	e7ee      	b.n	235c8 <__sfp+0x60>
   235ea:	bf00      	nop
   235ec:	0002b244 	.word	0x0002b244
   235f0:	ffff0001 	.word	0xffff0001

000235f4 <fiprintf>:
   235f4:	b40e      	push	{r1, r2, r3}
   235f6:	b503      	push	{r0, r1, lr}
   235f8:	ab03      	add	r3, sp, #12
   235fa:	4601      	mov	r1, r0
   235fc:	4805      	ldr	r0, [pc, #20]	; (23614 <fiprintf+0x20>)
   235fe:	f853 2b04 	ldr.w	r2, [r3], #4
   23602:	6800      	ldr	r0, [r0, #0]
   23604:	9301      	str	r3, [sp, #4]
   23606:	f000 fb35 	bl	23c74 <_vfiprintf_r>
   2360a:	b002      	add	sp, #8
   2360c:	f85d eb04 	ldr.w	lr, [sp], #4
   23610:	b003      	add	sp, #12
   23612:	4770      	bx	lr
   23614:	20008744 	.word	0x20008744

00023618 <_localeconv_r>:
   23618:	4800      	ldr	r0, [pc, #0]	; (2361c <_localeconv_r+0x4>)
   2361a:	4770      	bx	lr
   2361c:	20008898 	.word	0x20008898

00023620 <__malloc_lock>:
   23620:	4801      	ldr	r0, [pc, #4]	; (23628 <__malloc_lock+0x8>)
   23622:	f7ed bb7f 	b.w	10d24 <__retarget_lock_acquire_recursive>
   23626:	bf00      	nop
   23628:	20008a80 	.word	0x20008a80

0002362c <__malloc_unlock>:
   2362c:	4801      	ldr	r0, [pc, #4]	; (23634 <__malloc_unlock+0x8>)
   2362e:	f7ed bb95 	b.w	10d5c <__retarget_lock_release_recursive>
   23632:	bf00      	nop
   23634:	20008a80 	.word	0x20008a80

00023638 <_Balloc>:
   23638:	b570      	push	{r4, r5, r6, lr}
   2363a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2363c:	4604      	mov	r4, r0
   2363e:	460d      	mov	r5, r1
   23640:	b976      	cbnz	r6, 23660 <_Balloc+0x28>
   23642:	2010      	movs	r0, #16
   23644:	f7ff fac0 	bl	22bc8 <malloc>
   23648:	4602      	mov	r2, r0
   2364a:	6260      	str	r0, [r4, #36]	; 0x24
   2364c:	b920      	cbnz	r0, 23658 <_Balloc+0x20>
   2364e:	4b18      	ldr	r3, [pc, #96]	; (236b0 <_Balloc+0x78>)
   23650:	2166      	movs	r1, #102	; 0x66
   23652:	4818      	ldr	r0, [pc, #96]	; (236b4 <_Balloc+0x7c>)
   23654:	f7ff fef0 	bl	23438 <__assert_func>
   23658:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2365c:	6006      	str	r6, [r0, #0]
   2365e:	60c6      	str	r6, [r0, #12]
   23660:	6a66      	ldr	r6, [r4, #36]	; 0x24
   23662:	68f3      	ldr	r3, [r6, #12]
   23664:	b183      	cbz	r3, 23688 <_Balloc+0x50>
   23666:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23668:	68db      	ldr	r3, [r3, #12]
   2366a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2366e:	b9b8      	cbnz	r0, 236a0 <_Balloc+0x68>
   23670:	2101      	movs	r1, #1
   23672:	4620      	mov	r0, r4
   23674:	fa01 f605 	lsl.w	r6, r1, r5
   23678:	1d72      	adds	r2, r6, #5
   2367a:	0092      	lsls	r2, r2, #2
   2367c:	f005 ff3b 	bl	294f6 <_calloc_r>
   23680:	b160      	cbz	r0, 2369c <_Balloc+0x64>
   23682:	e9c0 5601 	strd	r5, r6, [r0, #4]
   23686:	e00e      	b.n	236a6 <_Balloc+0x6e>
   23688:	2221      	movs	r2, #33	; 0x21
   2368a:	2104      	movs	r1, #4
   2368c:	4620      	mov	r0, r4
   2368e:	f005 ff32 	bl	294f6 <_calloc_r>
   23692:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23694:	60f0      	str	r0, [r6, #12]
   23696:	68db      	ldr	r3, [r3, #12]
   23698:	2b00      	cmp	r3, #0
   2369a:	d1e4      	bne.n	23666 <_Balloc+0x2e>
   2369c:	2000      	movs	r0, #0
   2369e:	bd70      	pop	{r4, r5, r6, pc}
   236a0:	6802      	ldr	r2, [r0, #0]
   236a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   236a6:	2300      	movs	r3, #0
   236a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   236ac:	e7f7      	b.n	2369e <_Balloc+0x66>
   236ae:	bf00      	nop
   236b0:	00030c70 	.word	0x00030c70
   236b4:	00030d0c 	.word	0x00030d0c

000236b8 <_Bfree>:
   236b8:	b570      	push	{r4, r5, r6, lr}
   236ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
   236bc:	4605      	mov	r5, r0
   236be:	460c      	mov	r4, r1
   236c0:	b976      	cbnz	r6, 236e0 <_Bfree+0x28>
   236c2:	2010      	movs	r0, #16
   236c4:	f7ff fa80 	bl	22bc8 <malloc>
   236c8:	4602      	mov	r2, r0
   236ca:	6268      	str	r0, [r5, #36]	; 0x24
   236cc:	b920      	cbnz	r0, 236d8 <_Bfree+0x20>
   236ce:	4b09      	ldr	r3, [pc, #36]	; (236f4 <_Bfree+0x3c>)
   236d0:	218a      	movs	r1, #138	; 0x8a
   236d2:	4809      	ldr	r0, [pc, #36]	; (236f8 <_Bfree+0x40>)
   236d4:	f7ff feb0 	bl	23438 <__assert_func>
   236d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   236dc:	6006      	str	r6, [r0, #0]
   236de:	60c6      	str	r6, [r0, #12]
   236e0:	b13c      	cbz	r4, 236f2 <_Bfree+0x3a>
   236e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   236e4:	6862      	ldr	r2, [r4, #4]
   236e6:	68db      	ldr	r3, [r3, #12]
   236e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   236ec:	6021      	str	r1, [r4, #0]
   236ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   236f2:	bd70      	pop	{r4, r5, r6, pc}
   236f4:	00030c70 	.word	0x00030c70
   236f8:	00030d0c 	.word	0x00030d0c

000236fc <__multadd>:
   236fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23700:	f101 0c14 	add.w	ip, r1, #20
   23704:	4607      	mov	r7, r0
   23706:	460c      	mov	r4, r1
   23708:	461e      	mov	r6, r3
   2370a:	690d      	ldr	r5, [r1, #16]
   2370c:	2000      	movs	r0, #0
   2370e:	f8dc 3000 	ldr.w	r3, [ip]
   23712:	3001      	adds	r0, #1
   23714:	b299      	uxth	r1, r3
   23716:	4285      	cmp	r5, r0
   23718:	fb02 6101 	mla	r1, r2, r1, r6
   2371c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   23720:	ea4f 4311 	mov.w	r3, r1, lsr #16
   23724:	b289      	uxth	r1, r1
   23726:	fb02 3306 	mla	r3, r2, r6, r3
   2372a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   2372e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   23732:	f84c 1b04 	str.w	r1, [ip], #4
   23736:	dcea      	bgt.n	2370e <__multadd+0x12>
   23738:	b30e      	cbz	r6, 2377e <__multadd+0x82>
   2373a:	68a3      	ldr	r3, [r4, #8]
   2373c:	42ab      	cmp	r3, r5
   2373e:	dc19      	bgt.n	23774 <__multadd+0x78>
   23740:	6861      	ldr	r1, [r4, #4]
   23742:	4638      	mov	r0, r7
   23744:	3101      	adds	r1, #1
   23746:	f7ff ff77 	bl	23638 <_Balloc>
   2374a:	4680      	mov	r8, r0
   2374c:	b928      	cbnz	r0, 2375a <__multadd+0x5e>
   2374e:	4602      	mov	r2, r0
   23750:	4b0c      	ldr	r3, [pc, #48]	; (23784 <__multadd+0x88>)
   23752:	21b5      	movs	r1, #181	; 0xb5
   23754:	480c      	ldr	r0, [pc, #48]	; (23788 <__multadd+0x8c>)
   23756:	f7ff fe6f 	bl	23438 <__assert_func>
   2375a:	6922      	ldr	r2, [r4, #16]
   2375c:	f104 010c 	add.w	r1, r4, #12
   23760:	300c      	adds	r0, #12
   23762:	3202      	adds	r2, #2
   23764:	0092      	lsls	r2, r2, #2
   23766:	f005 fe84 	bl	29472 <memcpy>
   2376a:	4621      	mov	r1, r4
   2376c:	4644      	mov	r4, r8
   2376e:	4638      	mov	r0, r7
   23770:	f7ff ffa2 	bl	236b8 <_Bfree>
   23774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   23778:	3501      	adds	r5, #1
   2377a:	615e      	str	r6, [r3, #20]
   2377c:	6125      	str	r5, [r4, #16]
   2377e:	4620      	mov	r0, r4
   23780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23784:	00030cfb 	.word	0x00030cfb
   23788:	00030d0c 	.word	0x00030d0c

0002378c <__i2b>:
   2378c:	b510      	push	{r4, lr}
   2378e:	460c      	mov	r4, r1
   23790:	2101      	movs	r1, #1
   23792:	f7ff ff51 	bl	23638 <_Balloc>
   23796:	4602      	mov	r2, r0
   23798:	b928      	cbnz	r0, 237a6 <__i2b+0x1a>
   2379a:	4b05      	ldr	r3, [pc, #20]	; (237b0 <__i2b+0x24>)
   2379c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   237a0:	4804      	ldr	r0, [pc, #16]	; (237b4 <__i2b+0x28>)
   237a2:	f7ff fe49 	bl	23438 <__assert_func>
   237a6:	2301      	movs	r3, #1
   237a8:	6144      	str	r4, [r0, #20]
   237aa:	6103      	str	r3, [r0, #16]
   237ac:	bd10      	pop	{r4, pc}
   237ae:	bf00      	nop
   237b0:	00030cfb 	.word	0x00030cfb
   237b4:	00030d0c 	.word	0x00030d0c

000237b8 <__multiply>:
   237b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237bc:	4614      	mov	r4, r2
   237be:	690a      	ldr	r2, [r1, #16]
   237c0:	460f      	mov	r7, r1
   237c2:	b085      	sub	sp, #20
   237c4:	6923      	ldr	r3, [r4, #16]
   237c6:	429a      	cmp	r2, r3
   237c8:	bfa2      	ittt	ge
   237ca:	4623      	movge	r3, r4
   237cc:	460c      	movge	r4, r1
   237ce:	461f      	movge	r7, r3
   237d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
   237d4:	68a3      	ldr	r3, [r4, #8]
   237d6:	f8d7 9010 	ldr.w	r9, [r7, #16]
   237da:	6861      	ldr	r1, [r4, #4]
   237dc:	eb0a 0609 	add.w	r6, sl, r9
   237e0:	42b3      	cmp	r3, r6
   237e2:	bfb8      	it	lt
   237e4:	3101      	addlt	r1, #1
   237e6:	f7ff ff27 	bl	23638 <_Balloc>
   237ea:	b930      	cbnz	r0, 237fa <__multiply+0x42>
   237ec:	4602      	mov	r2, r0
   237ee:	4b45      	ldr	r3, [pc, #276]	; (23904 <__multiply+0x14c>)
   237f0:	f240 115d 	movw	r1, #349	; 0x15d
   237f4:	4844      	ldr	r0, [pc, #272]	; (23908 <__multiply+0x150>)
   237f6:	f7ff fe1f 	bl	23438 <__assert_func>
   237fa:	f100 0514 	add.w	r5, r0, #20
   237fe:	2200      	movs	r2, #0
   23800:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   23804:	462b      	mov	r3, r5
   23806:	4543      	cmp	r3, r8
   23808:	d321      	bcc.n	2384e <__multiply+0x96>
   2380a:	f107 0114 	add.w	r1, r7, #20
   2380e:	f104 0214 	add.w	r2, r4, #20
   23812:	f104 0715 	add.w	r7, r4, #21
   23816:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   2381a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   2381e:	9302      	str	r3, [sp, #8]
   23820:	1b13      	subs	r3, r2, r4
   23822:	3b15      	subs	r3, #21
   23824:	f023 0303 	bic.w	r3, r3, #3
   23828:	3304      	adds	r3, #4
   2382a:	42ba      	cmp	r2, r7
   2382c:	bf38      	it	cc
   2382e:	2304      	movcc	r3, #4
   23830:	9301      	str	r3, [sp, #4]
   23832:	9b02      	ldr	r3, [sp, #8]
   23834:	9103      	str	r1, [sp, #12]
   23836:	428b      	cmp	r3, r1
   23838:	d80c      	bhi.n	23854 <__multiply+0x9c>
   2383a:	2e00      	cmp	r6, #0
   2383c:	dd03      	ble.n	23846 <__multiply+0x8e>
   2383e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   23842:	2b00      	cmp	r3, #0
   23844:	d05b      	beq.n	238fe <__multiply+0x146>
   23846:	6106      	str	r6, [r0, #16]
   23848:	b005      	add	sp, #20
   2384a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2384e:	f843 2b04 	str.w	r2, [r3], #4
   23852:	e7d8      	b.n	23806 <__multiply+0x4e>
   23854:	f8b1 a000 	ldrh.w	sl, [r1]
   23858:	f1ba 0f00 	cmp.w	sl, #0
   2385c:	d024      	beq.n	238a8 <__multiply+0xf0>
   2385e:	f104 0e14 	add.w	lr, r4, #20
   23862:	46a9      	mov	r9, r5
   23864:	f04f 0c00 	mov.w	ip, #0
   23868:	f85e 7b04 	ldr.w	r7, [lr], #4
   2386c:	f8d9 3000 	ldr.w	r3, [r9]
   23870:	fa1f fb87 	uxth.w	fp, r7
   23874:	4572      	cmp	r2, lr
   23876:	b29b      	uxth	r3, r3
   23878:	ea4f 4717 	mov.w	r7, r7, lsr #16
   2387c:	fb0a 330b 	mla	r3, sl, fp, r3
   23880:	4463      	add	r3, ip
   23882:	f8d9 c000 	ldr.w	ip, [r9]
   23886:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   2388a:	fb0a c707 	mla	r7, sl, r7, ip
   2388e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   23892:	b29b      	uxth	r3, r3
   23894:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   23898:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2389c:	f849 3b04 	str.w	r3, [r9], #4
   238a0:	d8e2      	bhi.n	23868 <__multiply+0xb0>
   238a2:	9b01      	ldr	r3, [sp, #4]
   238a4:	f845 c003 	str.w	ip, [r5, r3]
   238a8:	9b03      	ldr	r3, [sp, #12]
   238aa:	3104      	adds	r1, #4
   238ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   238b0:	f1b9 0f00 	cmp.w	r9, #0
   238b4:	d021      	beq.n	238fa <__multiply+0x142>
   238b6:	682b      	ldr	r3, [r5, #0]
   238b8:	f104 0c14 	add.w	ip, r4, #20
   238bc:	46ae      	mov	lr, r5
   238be:	f04f 0a00 	mov.w	sl, #0
   238c2:	f8bc b000 	ldrh.w	fp, [ip]
   238c6:	b29b      	uxth	r3, r3
   238c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
   238cc:	fb09 770b 	mla	r7, r9, fp, r7
   238d0:	4457      	add	r7, sl
   238d2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   238d6:	f84e 3b04 	str.w	r3, [lr], #4
   238da:	f85c 3b04 	ldr.w	r3, [ip], #4
   238de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   238e2:	f8be 3000 	ldrh.w	r3, [lr]
   238e6:	4562      	cmp	r2, ip
   238e8:	fb09 330a 	mla	r3, r9, sl, r3
   238ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   238f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   238f4:	d8e5      	bhi.n	238c2 <__multiply+0x10a>
   238f6:	9f01      	ldr	r7, [sp, #4]
   238f8:	51eb      	str	r3, [r5, r7]
   238fa:	3504      	adds	r5, #4
   238fc:	e799      	b.n	23832 <__multiply+0x7a>
   238fe:	3e01      	subs	r6, #1
   23900:	e79b      	b.n	2383a <__multiply+0x82>
   23902:	bf00      	nop
   23904:	00030cfb 	.word	0x00030cfb
   23908:	00030d0c 	.word	0x00030d0c

0002390c <__pow5mult>:
   2390c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23910:	4615      	mov	r5, r2
   23912:	f012 0203 	ands.w	r2, r2, #3
   23916:	4607      	mov	r7, r0
   23918:	460e      	mov	r6, r1
   2391a:	d007      	beq.n	2392c <__pow5mult+0x20>
   2391c:	3a01      	subs	r2, #1
   2391e:	4c25      	ldr	r4, [pc, #148]	; (239b4 <__pow5mult+0xa8>)
   23920:	2300      	movs	r3, #0
   23922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   23926:	f7ff fee9 	bl	236fc <__multadd>
   2392a:	4606      	mov	r6, r0
   2392c:	10ad      	asrs	r5, r5, #2
   2392e:	d03d      	beq.n	239ac <__pow5mult+0xa0>
   23930:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   23932:	b97c      	cbnz	r4, 23954 <__pow5mult+0x48>
   23934:	2010      	movs	r0, #16
   23936:	f7ff f947 	bl	22bc8 <malloc>
   2393a:	4602      	mov	r2, r0
   2393c:	6278      	str	r0, [r7, #36]	; 0x24
   2393e:	b928      	cbnz	r0, 2394c <__pow5mult+0x40>
   23940:	4b1d      	ldr	r3, [pc, #116]	; (239b8 <__pow5mult+0xac>)
   23942:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   23946:	481d      	ldr	r0, [pc, #116]	; (239bc <__pow5mult+0xb0>)
   23948:	f7ff fd76 	bl	23438 <__assert_func>
   2394c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   23950:	6004      	str	r4, [r0, #0]
   23952:	60c4      	str	r4, [r0, #12]
   23954:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   23958:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2395c:	b94c      	cbnz	r4, 23972 <__pow5mult+0x66>
   2395e:	f240 2171 	movw	r1, #625	; 0x271
   23962:	4638      	mov	r0, r7
   23964:	f7ff ff12 	bl	2378c <__i2b>
   23968:	2300      	movs	r3, #0
   2396a:	4604      	mov	r4, r0
   2396c:	f8c8 0008 	str.w	r0, [r8, #8]
   23970:	6003      	str	r3, [r0, #0]
   23972:	f04f 0900 	mov.w	r9, #0
   23976:	07eb      	lsls	r3, r5, #31
   23978:	d50a      	bpl.n	23990 <__pow5mult+0x84>
   2397a:	4631      	mov	r1, r6
   2397c:	4622      	mov	r2, r4
   2397e:	4638      	mov	r0, r7
   23980:	f7ff ff1a 	bl	237b8 <__multiply>
   23984:	4680      	mov	r8, r0
   23986:	4631      	mov	r1, r6
   23988:	4638      	mov	r0, r7
   2398a:	4646      	mov	r6, r8
   2398c:	f7ff fe94 	bl	236b8 <_Bfree>
   23990:	106d      	asrs	r5, r5, #1
   23992:	d00b      	beq.n	239ac <__pow5mult+0xa0>
   23994:	6820      	ldr	r0, [r4, #0]
   23996:	b938      	cbnz	r0, 239a8 <__pow5mult+0x9c>
   23998:	4622      	mov	r2, r4
   2399a:	4621      	mov	r1, r4
   2399c:	4638      	mov	r0, r7
   2399e:	f7ff ff0b 	bl	237b8 <__multiply>
   239a2:	6020      	str	r0, [r4, #0]
   239a4:	f8c0 9000 	str.w	r9, [r0]
   239a8:	4604      	mov	r4, r0
   239aa:	e7e4      	b.n	23976 <__pow5mult+0x6a>
   239ac:	4630      	mov	r0, r6
   239ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   239b2:	bf00      	nop
   239b4:	0002b2a8 	.word	0x0002b2a8
   239b8:	00030c70 	.word	0x00030c70
   239bc:	00030d0c 	.word	0x00030d0c

000239c0 <__lshift>:
   239c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   239c4:	460c      	mov	r4, r1
   239c6:	4607      	mov	r7, r0
   239c8:	4691      	mov	r9, r2
   239ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
   239ce:	6923      	ldr	r3, [r4, #16]
   239d0:	6849      	ldr	r1, [r1, #4]
   239d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
   239d6:	68a3      	ldr	r3, [r4, #8]
   239d8:	f108 0601 	add.w	r6, r8, #1
   239dc:	42b3      	cmp	r3, r6
   239de:	db0b      	blt.n	239f8 <__lshift+0x38>
   239e0:	4638      	mov	r0, r7
   239e2:	f7ff fe29 	bl	23638 <_Balloc>
   239e6:	4605      	mov	r5, r0
   239e8:	b948      	cbnz	r0, 239fe <__lshift+0x3e>
   239ea:	4602      	mov	r2, r0
   239ec:	4b28      	ldr	r3, [pc, #160]	; (23a90 <__lshift+0xd0>)
   239ee:	f240 11d9 	movw	r1, #473	; 0x1d9
   239f2:	4828      	ldr	r0, [pc, #160]	; (23a94 <__lshift+0xd4>)
   239f4:	f7ff fd20 	bl	23438 <__assert_func>
   239f8:	3101      	adds	r1, #1
   239fa:	005b      	lsls	r3, r3, #1
   239fc:	e7ee      	b.n	239dc <__lshift+0x1c>
   239fe:	2300      	movs	r3, #0
   23a00:	f100 0114 	add.w	r1, r0, #20
   23a04:	f100 0210 	add.w	r2, r0, #16
   23a08:	4618      	mov	r0, r3
   23a0a:	4553      	cmp	r3, sl
   23a0c:	db33      	blt.n	23a76 <__lshift+0xb6>
   23a0e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   23a12:	f104 0314 	add.w	r3, r4, #20
   23a16:	6920      	ldr	r0, [r4, #16]
   23a18:	f019 091f 	ands.w	r9, r9, #31
   23a1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   23a20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   23a24:	d02b      	beq.n	23a7e <__lshift+0xbe>
   23a26:	f1c9 0e20 	rsb	lr, r9, #32
   23a2a:	468a      	mov	sl, r1
   23a2c:	2200      	movs	r2, #0
   23a2e:	6818      	ldr	r0, [r3, #0]
   23a30:	fa00 f009 	lsl.w	r0, r0, r9
   23a34:	4310      	orrs	r0, r2
   23a36:	f84a 0b04 	str.w	r0, [sl], #4
   23a3a:	f853 2b04 	ldr.w	r2, [r3], #4
   23a3e:	459c      	cmp	ip, r3
   23a40:	fa22 f20e 	lsr.w	r2, r2, lr
   23a44:	d8f3      	bhi.n	23a2e <__lshift+0x6e>
   23a46:	ebac 0304 	sub.w	r3, ip, r4
   23a4a:	f104 0015 	add.w	r0, r4, #21
   23a4e:	3b15      	subs	r3, #21
   23a50:	f023 0303 	bic.w	r3, r3, #3
   23a54:	3304      	adds	r3, #4
   23a56:	4584      	cmp	ip, r0
   23a58:	bf38      	it	cc
   23a5a:	2304      	movcc	r3, #4
   23a5c:	50ca      	str	r2, [r1, r3]
   23a5e:	b10a      	cbz	r2, 23a64 <__lshift+0xa4>
   23a60:	f108 0602 	add.w	r6, r8, #2
   23a64:	3e01      	subs	r6, #1
   23a66:	4638      	mov	r0, r7
   23a68:	4621      	mov	r1, r4
   23a6a:	612e      	str	r6, [r5, #16]
   23a6c:	f7ff fe24 	bl	236b8 <_Bfree>
   23a70:	4628      	mov	r0, r5
   23a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23a76:	3301      	adds	r3, #1
   23a78:	f842 0f04 	str.w	r0, [r2, #4]!
   23a7c:	e7c5      	b.n	23a0a <__lshift+0x4a>
   23a7e:	3904      	subs	r1, #4
   23a80:	f853 2b04 	ldr.w	r2, [r3], #4
   23a84:	459c      	cmp	ip, r3
   23a86:	f841 2f04 	str.w	r2, [r1, #4]!
   23a8a:	d8f9      	bhi.n	23a80 <__lshift+0xc0>
   23a8c:	e7ea      	b.n	23a64 <__lshift+0xa4>
   23a8e:	bf00      	nop
   23a90:	00030cfb 	.word	0x00030cfb
   23a94:	00030d0c 	.word	0x00030d0c

00023a98 <__mdiff>:
   23a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a9c:	4689      	mov	r9, r1
   23a9e:	4606      	mov	r6, r0
   23aa0:	4611      	mov	r1, r2
   23aa2:	4614      	mov	r4, r2
   23aa4:	4648      	mov	r0, r9
   23aa6:	f005 ff9e 	bl	299e6 <__mcmp>
   23aaa:	1e05      	subs	r5, r0, #0
   23aac:	d112      	bne.n	23ad4 <__mdiff+0x3c>
   23aae:	4629      	mov	r1, r5
   23ab0:	4630      	mov	r0, r6
   23ab2:	f7ff fdc1 	bl	23638 <_Balloc>
   23ab6:	4602      	mov	r2, r0
   23ab8:	b928      	cbnz	r0, 23ac6 <__mdiff+0x2e>
   23aba:	4b40      	ldr	r3, [pc, #256]	; (23bbc <__mdiff+0x124>)
   23abc:	f240 2132 	movw	r1, #562	; 0x232
   23ac0:	483f      	ldr	r0, [pc, #252]	; (23bc0 <__mdiff+0x128>)
   23ac2:	f7ff fcb9 	bl	23438 <__assert_func>
   23ac6:	2301      	movs	r3, #1
   23ac8:	e9c0 3504 	strd	r3, r5, [r0, #16]
   23acc:	4610      	mov	r0, r2
   23ace:	b003      	add	sp, #12
   23ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ad4:	bfbc      	itt	lt
   23ad6:	464b      	movlt	r3, r9
   23ad8:	46a1      	movlt	r9, r4
   23ada:	4630      	mov	r0, r6
   23adc:	bfb8      	it	lt
   23ade:	2501      	movlt	r5, #1
   23ae0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   23ae4:	bfb4      	ite	lt
   23ae6:	461c      	movlt	r4, r3
   23ae8:	2500      	movge	r5, #0
   23aea:	f7ff fda5 	bl	23638 <_Balloc>
   23aee:	4602      	mov	r2, r0
   23af0:	b918      	cbnz	r0, 23afa <__mdiff+0x62>
   23af2:	4b32      	ldr	r3, [pc, #200]	; (23bbc <__mdiff+0x124>)
   23af4:	f44f 7110 	mov.w	r1, #576	; 0x240
   23af8:	e7e2      	b.n	23ac0 <__mdiff+0x28>
   23afa:	f8d9 7010 	ldr.w	r7, [r9, #16]
   23afe:	f104 0e14 	add.w	lr, r4, #20
   23b02:	6926      	ldr	r6, [r4, #16]
   23b04:	f100 0b14 	add.w	fp, r0, #20
   23b08:	60c5      	str	r5, [r0, #12]
   23b0a:	f109 0514 	add.w	r5, r9, #20
   23b0e:	f109 0310 	add.w	r3, r9, #16
   23b12:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   23b16:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   23b1a:	46d9      	mov	r9, fp
   23b1c:	f04f 0c00 	mov.w	ip, #0
   23b20:	9301      	str	r3, [sp, #4]
   23b22:	9b01      	ldr	r3, [sp, #4]
   23b24:	f85e 0b04 	ldr.w	r0, [lr], #4
   23b28:	f853 af04 	ldr.w	sl, [r3, #4]!
   23b2c:	b281      	uxth	r1, r0
   23b2e:	4576      	cmp	r6, lr
   23b30:	9301      	str	r3, [sp, #4]
   23b32:	fa1f f38a 	uxth.w	r3, sl
   23b36:	ea4f 4010 	mov.w	r0, r0, lsr #16
   23b3a:	eba3 0301 	sub.w	r3, r3, r1
   23b3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   23b42:	4463      	add	r3, ip
   23b44:	eb00 4023 	add.w	r0, r0, r3, asr #16
   23b48:	b29b      	uxth	r3, r3
   23b4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   23b4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   23b52:	f849 3b04 	str.w	r3, [r9], #4
   23b56:	d8e4      	bhi.n	23b22 <__mdiff+0x8a>
   23b58:	1b33      	subs	r3, r6, r4
   23b5a:	3415      	adds	r4, #21
   23b5c:	3b15      	subs	r3, #21
   23b5e:	f023 0303 	bic.w	r3, r3, #3
   23b62:	3304      	adds	r3, #4
   23b64:	42a6      	cmp	r6, r4
   23b66:	bf38      	it	cc
   23b68:	2304      	movcc	r3, #4
   23b6a:	441d      	add	r5, r3
   23b6c:	445b      	add	r3, fp
   23b6e:	462c      	mov	r4, r5
   23b70:	461e      	mov	r6, r3
   23b72:	4544      	cmp	r4, r8
   23b74:	d30e      	bcc.n	23b94 <__mdiff+0xfc>
   23b76:	f108 0103 	add.w	r1, r8, #3
   23b7a:	1b49      	subs	r1, r1, r5
   23b7c:	3d03      	subs	r5, #3
   23b7e:	f021 0103 	bic.w	r1, r1, #3
   23b82:	45a8      	cmp	r8, r5
   23b84:	bf38      	it	cc
   23b86:	2100      	movcc	r1, #0
   23b88:	440b      	add	r3, r1
   23b8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   23b8e:	b199      	cbz	r1, 23bb8 <__mdiff+0x120>
   23b90:	6117      	str	r7, [r2, #16]
   23b92:	e79b      	b.n	23acc <__mdiff+0x34>
   23b94:	f854 1b04 	ldr.w	r1, [r4], #4
   23b98:	46e6      	mov	lr, ip
   23b9a:	fa1f fc81 	uxth.w	ip, r1
   23b9e:	0c08      	lsrs	r0, r1, #16
   23ba0:	4471      	add	r1, lr
   23ba2:	44f4      	add	ip, lr
   23ba4:	b289      	uxth	r1, r1
   23ba6:	eb00 402c 	add.w	r0, r0, ip, asr #16
   23baa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   23bae:	ea4f 4c20 	mov.w	ip, r0, asr #16
   23bb2:	f846 1b04 	str.w	r1, [r6], #4
   23bb6:	e7dc      	b.n	23b72 <__mdiff+0xda>
   23bb8:	3f01      	subs	r7, #1
   23bba:	e7e6      	b.n	23b8a <__mdiff+0xf2>
   23bbc:	00030cfb 	.word	0x00030cfb
   23bc0:	00030d0c 	.word	0x00030d0c

00023bc4 <__d2b>:
   23bc4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   23bc8:	2101      	movs	r1, #1
   23bca:	4690      	mov	r8, r2
   23bcc:	4699      	mov	r9, r3
   23bce:	9e08      	ldr	r6, [sp, #32]
   23bd0:	f7ff fd32 	bl	23638 <_Balloc>
   23bd4:	4604      	mov	r4, r0
   23bd6:	b930      	cbnz	r0, 23be6 <__d2b+0x22>
   23bd8:	4602      	mov	r2, r0
   23bda:	4b24      	ldr	r3, [pc, #144]	; (23c6c <__d2b+0xa8>)
   23bdc:	f240 310a 	movw	r1, #778	; 0x30a
   23be0:	4823      	ldr	r0, [pc, #140]	; (23c70 <__d2b+0xac>)
   23be2:	f7ff fc29 	bl	23438 <__assert_func>
   23be6:	f3c9 550a 	ubfx	r5, r9, #20, #11
   23bea:	f3c9 0313 	ubfx	r3, r9, #0, #20
   23bee:	b10d      	cbz	r5, 23bf4 <__d2b+0x30>
   23bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   23bf4:	9301      	str	r3, [sp, #4]
   23bf6:	f1b8 0300 	subs.w	r3, r8, #0
   23bfa:	d024      	beq.n	23c46 <__d2b+0x82>
   23bfc:	4668      	mov	r0, sp
   23bfe:	9300      	str	r3, [sp, #0]
   23c00:	f005 fec4 	bl	2998c <__lo0bits>
   23c04:	e9dd 1200 	ldrd	r1, r2, [sp]
   23c08:	b1d8      	cbz	r0, 23c42 <__d2b+0x7e>
   23c0a:	f1c0 0320 	rsb	r3, r0, #32
   23c0e:	fa02 f303 	lsl.w	r3, r2, r3
   23c12:	40c2      	lsrs	r2, r0
   23c14:	430b      	orrs	r3, r1
   23c16:	9201      	str	r2, [sp, #4]
   23c18:	6163      	str	r3, [r4, #20]
   23c1a:	9b01      	ldr	r3, [sp, #4]
   23c1c:	2b00      	cmp	r3, #0
   23c1e:	61a3      	str	r3, [r4, #24]
   23c20:	bf0c      	ite	eq
   23c22:	2201      	moveq	r2, #1
   23c24:	2202      	movne	r2, #2
   23c26:	6122      	str	r2, [r4, #16]
   23c28:	b1ad      	cbz	r5, 23c56 <__d2b+0x92>
   23c2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   23c2e:	4405      	add	r5, r0
   23c30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   23c34:	6035      	str	r5, [r6, #0]
   23c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23c38:	6018      	str	r0, [r3, #0]
   23c3a:	4620      	mov	r0, r4
   23c3c:	b002      	add	sp, #8
   23c3e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   23c42:	6161      	str	r1, [r4, #20]
   23c44:	e7e9      	b.n	23c1a <__d2b+0x56>
   23c46:	a801      	add	r0, sp, #4
   23c48:	f005 fea0 	bl	2998c <__lo0bits>
   23c4c:	9b01      	ldr	r3, [sp, #4]
   23c4e:	3020      	adds	r0, #32
   23c50:	2201      	movs	r2, #1
   23c52:	6163      	str	r3, [r4, #20]
   23c54:	e7e7      	b.n	23c26 <__d2b+0x62>
   23c56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   23c5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   23c5e:	6030      	str	r0, [r6, #0]
   23c60:	6918      	ldr	r0, [r3, #16]
   23c62:	f005 fe71 	bl	29948 <__hi0bits>
   23c66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   23c6a:	e7e4      	b.n	23c36 <__d2b+0x72>
   23c6c:	00030cfb 	.word	0x00030cfb
   23c70:	00030d0c 	.word	0x00030d0c

00023c74 <_vfiprintf_r>:
   23c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c78:	460d      	mov	r5, r1
   23c7a:	b09d      	sub	sp, #116	; 0x74
   23c7c:	4614      	mov	r4, r2
   23c7e:	4698      	mov	r8, r3
   23c80:	4606      	mov	r6, r0
   23c82:	b118      	cbz	r0, 23c8c <_vfiprintf_r+0x18>
   23c84:	6983      	ldr	r3, [r0, #24]
   23c86:	b90b      	cbnz	r3, 23c8c <_vfiprintf_r+0x18>
   23c88:	f7ff fc36 	bl	234f8 <__sinit>
   23c8c:	4b87      	ldr	r3, [pc, #540]	; (23eac <_vfiprintf_r+0x238>)
   23c8e:	429d      	cmp	r5, r3
   23c90:	d11b      	bne.n	23cca <_vfiprintf_r+0x56>
   23c92:	6875      	ldr	r5, [r6, #4]
   23c94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   23c96:	07d9      	lsls	r1, r3, #31
   23c98:	d405      	bmi.n	23ca6 <_vfiprintf_r+0x32>
   23c9a:	89ab      	ldrh	r3, [r5, #12]
   23c9c:	059a      	lsls	r2, r3, #22
   23c9e:	d402      	bmi.n	23ca6 <_vfiprintf_r+0x32>
   23ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23ca2:	f7ed f83f 	bl	10d24 <__retarget_lock_acquire_recursive>
   23ca6:	89ab      	ldrh	r3, [r5, #12]
   23ca8:	071b      	lsls	r3, r3, #28
   23caa:	d501      	bpl.n	23cb0 <_vfiprintf_r+0x3c>
   23cac:	692b      	ldr	r3, [r5, #16]
   23cae:	b9eb      	cbnz	r3, 23cec <_vfiprintf_r+0x78>
   23cb0:	4629      	mov	r1, r5
   23cb2:	4630      	mov	r0, r6
   23cb4:	f000 f96e 	bl	23f94 <__swsetup_r>
   23cb8:	b1c0      	cbz	r0, 23cec <_vfiprintf_r+0x78>
   23cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   23cbc:	07dc      	lsls	r4, r3, #31
   23cbe:	d50e      	bpl.n	23cde <_vfiprintf_r+0x6a>
   23cc0:	f04f 30ff 	mov.w	r0, #4294967295
   23cc4:	b01d      	add	sp, #116	; 0x74
   23cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23cca:	4b79      	ldr	r3, [pc, #484]	; (23eb0 <_vfiprintf_r+0x23c>)
   23ccc:	429d      	cmp	r5, r3
   23cce:	d101      	bne.n	23cd4 <_vfiprintf_r+0x60>
   23cd0:	68b5      	ldr	r5, [r6, #8]
   23cd2:	e7df      	b.n	23c94 <_vfiprintf_r+0x20>
   23cd4:	4b77      	ldr	r3, [pc, #476]	; (23eb4 <_vfiprintf_r+0x240>)
   23cd6:	429d      	cmp	r5, r3
   23cd8:	bf08      	it	eq
   23cda:	68f5      	ldreq	r5, [r6, #12]
   23cdc:	e7da      	b.n	23c94 <_vfiprintf_r+0x20>
   23cde:	89ab      	ldrh	r3, [r5, #12]
   23ce0:	0598      	lsls	r0, r3, #22
   23ce2:	d4ed      	bmi.n	23cc0 <_vfiprintf_r+0x4c>
   23ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23ce6:	f7ed f839 	bl	10d5c <__retarget_lock_release_recursive>
   23cea:	e7e9      	b.n	23cc0 <_vfiprintf_r+0x4c>
   23cec:	2300      	movs	r3, #0
   23cee:	f8cd 800c 	str.w	r8, [sp, #12]
   23cf2:	f04f 0901 	mov.w	r9, #1
   23cf6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 23eb8 <_vfiprintf_r+0x244>
   23cfa:	9309      	str	r3, [sp, #36]	; 0x24
   23cfc:	2320      	movs	r3, #32
   23cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   23d02:	2330      	movs	r3, #48	; 0x30
   23d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   23d08:	4623      	mov	r3, r4
   23d0a:	469a      	mov	sl, r3
   23d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
   23d10:	b10a      	cbz	r2, 23d16 <_vfiprintf_r+0xa2>
   23d12:	2a25      	cmp	r2, #37	; 0x25
   23d14:	d1f9      	bne.n	23d0a <_vfiprintf_r+0x96>
   23d16:	ebba 0b04 	subs.w	fp, sl, r4
   23d1a:	d00b      	beq.n	23d34 <_vfiprintf_r+0xc0>
   23d1c:	465b      	mov	r3, fp
   23d1e:	4622      	mov	r2, r4
   23d20:	4629      	mov	r1, r5
   23d22:	4630      	mov	r0, r6
   23d24:	f005 fe8f 	bl	29a46 <__sfputs_r>
   23d28:	3001      	adds	r0, #1
   23d2a:	f000 80a6 	beq.w	23e7a <_vfiprintf_r+0x206>
   23d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23d30:	445a      	add	r2, fp
   23d32:	9209      	str	r2, [sp, #36]	; 0x24
   23d34:	f89a 3000 	ldrb.w	r3, [sl]
   23d38:	2b00      	cmp	r3, #0
   23d3a:	f000 809e 	beq.w	23e7a <_vfiprintf_r+0x206>
   23d3e:	2300      	movs	r3, #0
   23d40:	f04f 32ff 	mov.w	r2, #4294967295
   23d44:	f10a 0a01 	add.w	sl, sl, #1
   23d48:	9304      	str	r3, [sp, #16]
   23d4a:	9307      	str	r3, [sp, #28]
   23d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   23d50:	931a      	str	r3, [sp, #104]	; 0x68
   23d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
   23d56:	4654      	mov	r4, sl
   23d58:	2205      	movs	r2, #5
   23d5a:	4857      	ldr	r0, [pc, #348]	; (23eb8 <_vfiprintf_r+0x244>)
   23d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
   23d60:	f005 fde4 	bl	2992c <memchr>
   23d64:	9b04      	ldr	r3, [sp, #16]
   23d66:	b9d0      	cbnz	r0, 23d9e <_vfiprintf_r+0x12a>
   23d68:	06d9      	lsls	r1, r3, #27
   23d6a:	bf44      	itt	mi
   23d6c:	2220      	movmi	r2, #32
   23d6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   23d72:	071a      	lsls	r2, r3, #28
   23d74:	bf44      	itt	mi
   23d76:	222b      	movmi	r2, #43	; 0x2b
   23d78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   23d7c:	f89a 2000 	ldrb.w	r2, [sl]
   23d80:	2a2a      	cmp	r2, #42	; 0x2a
   23d82:	d014      	beq.n	23dae <_vfiprintf_r+0x13a>
   23d84:	9a07      	ldr	r2, [sp, #28]
   23d86:	4654      	mov	r4, sl
   23d88:	2000      	movs	r0, #0
   23d8a:	f04f 0c0a 	mov.w	ip, #10
   23d8e:	4621      	mov	r1, r4
   23d90:	f811 3b01 	ldrb.w	r3, [r1], #1
   23d94:	3b30      	subs	r3, #48	; 0x30
   23d96:	2b09      	cmp	r3, #9
   23d98:	d94a      	bls.n	23e30 <_vfiprintf_r+0x1bc>
   23d9a:	b970      	cbnz	r0, 23dba <_vfiprintf_r+0x146>
   23d9c:	e014      	b.n	23dc8 <_vfiprintf_r+0x154>
   23d9e:	eba0 0008 	sub.w	r0, r0, r8
   23da2:	46a2      	mov	sl, r4
   23da4:	fa09 f000 	lsl.w	r0, r9, r0
   23da8:	4318      	orrs	r0, r3
   23daa:	9004      	str	r0, [sp, #16]
   23dac:	e7d3      	b.n	23d56 <_vfiprintf_r+0xe2>
   23dae:	9a03      	ldr	r2, [sp, #12]
   23db0:	1d11      	adds	r1, r2, #4
   23db2:	6812      	ldr	r2, [r2, #0]
   23db4:	2a00      	cmp	r2, #0
   23db6:	9103      	str	r1, [sp, #12]
   23db8:	db01      	blt.n	23dbe <_vfiprintf_r+0x14a>
   23dba:	9207      	str	r2, [sp, #28]
   23dbc:	e004      	b.n	23dc8 <_vfiprintf_r+0x154>
   23dbe:	4252      	negs	r2, r2
   23dc0:	f043 0302 	orr.w	r3, r3, #2
   23dc4:	9207      	str	r2, [sp, #28]
   23dc6:	9304      	str	r3, [sp, #16]
   23dc8:	7823      	ldrb	r3, [r4, #0]
   23dca:	2b2e      	cmp	r3, #46	; 0x2e
   23dcc:	d10a      	bne.n	23de4 <_vfiprintf_r+0x170>
   23dce:	7863      	ldrb	r3, [r4, #1]
   23dd0:	2b2a      	cmp	r3, #42	; 0x2a
   23dd2:	d132      	bne.n	23e3a <_vfiprintf_r+0x1c6>
   23dd4:	9b03      	ldr	r3, [sp, #12]
   23dd6:	3402      	adds	r4, #2
   23dd8:	1d1a      	adds	r2, r3, #4
   23dda:	681b      	ldr	r3, [r3, #0]
   23ddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   23de0:	9203      	str	r2, [sp, #12]
   23de2:	9305      	str	r3, [sp, #20]
   23de4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 23ebc <_vfiprintf_r+0x248>
   23de8:	2203      	movs	r2, #3
   23dea:	7821      	ldrb	r1, [r4, #0]
   23dec:	4650      	mov	r0, sl
   23dee:	f005 fd9d 	bl	2992c <memchr>
   23df2:	b138      	cbz	r0, 23e04 <_vfiprintf_r+0x190>
   23df4:	eba0 000a 	sub.w	r0, r0, sl
   23df8:	2240      	movs	r2, #64	; 0x40
   23dfa:	9b04      	ldr	r3, [sp, #16]
   23dfc:	3401      	adds	r4, #1
   23dfe:	4082      	lsls	r2, r0
   23e00:	4313      	orrs	r3, r2
   23e02:	9304      	str	r3, [sp, #16]
   23e04:	f814 1b01 	ldrb.w	r1, [r4], #1
   23e08:	2206      	movs	r2, #6
   23e0a:	482d      	ldr	r0, [pc, #180]	; (23ec0 <_vfiprintf_r+0x24c>)
   23e0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   23e10:	f005 fd8c 	bl	2992c <memchr>
   23e14:	2800      	cmp	r0, #0
   23e16:	d03f      	beq.n	23e98 <_vfiprintf_r+0x224>
   23e18:	4b2a      	ldr	r3, [pc, #168]	; (23ec4 <_vfiprintf_r+0x250>)
   23e1a:	bb1b      	cbnz	r3, 23e64 <_vfiprintf_r+0x1f0>
   23e1c:	9b03      	ldr	r3, [sp, #12]
   23e1e:	3307      	adds	r3, #7
   23e20:	f023 0307 	bic.w	r3, r3, #7
   23e24:	3308      	adds	r3, #8
   23e26:	9303      	str	r3, [sp, #12]
   23e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23e2a:	443b      	add	r3, r7
   23e2c:	9309      	str	r3, [sp, #36]	; 0x24
   23e2e:	e76b      	b.n	23d08 <_vfiprintf_r+0x94>
   23e30:	fb0c 3202 	mla	r2, ip, r2, r3
   23e34:	460c      	mov	r4, r1
   23e36:	2001      	movs	r0, #1
   23e38:	e7a9      	b.n	23d8e <_vfiprintf_r+0x11a>
   23e3a:	2300      	movs	r3, #0
   23e3c:	3401      	adds	r4, #1
   23e3e:	f04f 0c0a 	mov.w	ip, #10
   23e42:	4619      	mov	r1, r3
   23e44:	9305      	str	r3, [sp, #20]
   23e46:	4620      	mov	r0, r4
   23e48:	f810 2b01 	ldrb.w	r2, [r0], #1
   23e4c:	3a30      	subs	r2, #48	; 0x30
   23e4e:	2a09      	cmp	r2, #9
   23e50:	d903      	bls.n	23e5a <_vfiprintf_r+0x1e6>
   23e52:	2b00      	cmp	r3, #0
   23e54:	d0c6      	beq.n	23de4 <_vfiprintf_r+0x170>
   23e56:	9105      	str	r1, [sp, #20]
   23e58:	e7c4      	b.n	23de4 <_vfiprintf_r+0x170>
   23e5a:	fb0c 2101 	mla	r1, ip, r1, r2
   23e5e:	4604      	mov	r4, r0
   23e60:	2301      	movs	r3, #1
   23e62:	e7f0      	b.n	23e46 <_vfiprintf_r+0x1d2>
   23e64:	ab03      	add	r3, sp, #12
   23e66:	462a      	mov	r2, r5
   23e68:	a904      	add	r1, sp, #16
   23e6a:	4630      	mov	r0, r6
   23e6c:	9300      	str	r3, [sp, #0]
   23e6e:	4b16      	ldr	r3, [pc, #88]	; (23ec8 <_vfiprintf_r+0x254>)
   23e70:	f7fe ff56 	bl	22d20 <_printf_float>
   23e74:	4607      	mov	r7, r0
   23e76:	1c78      	adds	r0, r7, #1
   23e78:	d1d6      	bne.n	23e28 <_vfiprintf_r+0x1b4>
   23e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   23e7c:	07d9      	lsls	r1, r3, #31
   23e7e:	d405      	bmi.n	23e8c <_vfiprintf_r+0x218>
   23e80:	89ab      	ldrh	r3, [r5, #12]
   23e82:	059a      	lsls	r2, r3, #22
   23e84:	d402      	bmi.n	23e8c <_vfiprintf_r+0x218>
   23e86:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23e88:	f7ec ff68 	bl	10d5c <__retarget_lock_release_recursive>
   23e8c:	89ab      	ldrh	r3, [r5, #12]
   23e8e:	065b      	lsls	r3, r3, #25
   23e90:	f53f af16 	bmi.w	23cc0 <_vfiprintf_r+0x4c>
   23e94:	9809      	ldr	r0, [sp, #36]	; 0x24
   23e96:	e715      	b.n	23cc4 <_vfiprintf_r+0x50>
   23e98:	ab03      	add	r3, sp, #12
   23e9a:	462a      	mov	r2, r5
   23e9c:	a904      	add	r1, sp, #16
   23e9e:	4630      	mov	r0, r6
   23ea0:	9300      	str	r3, [sp, #0]
   23ea2:	4b09      	ldr	r3, [pc, #36]	; (23ec8 <_vfiprintf_r+0x254>)
   23ea4:	f7ff f972 	bl	2318c <_printf_i>
   23ea8:	e7e4      	b.n	23e74 <_vfiprintf_r+0x200>
   23eaa:	bf00      	nop
   23eac:	0002b288 	.word	0x0002b288
   23eb0:	0002b268 	.word	0x0002b268
   23eb4:	0002b248 	.word	0x0002b248
   23eb8:	00030d81 	.word	0x00030d81
   23ebc:	00030d87 	.word	0x00030d87
   23ec0:	00030d8b 	.word	0x00030d8b
   23ec4:	00022d21 	.word	0x00022d21
   23ec8:	00029a47 	.word	0x00029a47

00023ecc <__swbuf_r>:
   23ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23ece:	460e      	mov	r6, r1
   23ed0:	4614      	mov	r4, r2
   23ed2:	4605      	mov	r5, r0
   23ed4:	b118      	cbz	r0, 23ede <__swbuf_r+0x12>
   23ed6:	6983      	ldr	r3, [r0, #24]
   23ed8:	b90b      	cbnz	r3, 23ede <__swbuf_r+0x12>
   23eda:	f7ff fb0d 	bl	234f8 <__sinit>
   23ede:	4b21      	ldr	r3, [pc, #132]	; (23f64 <__swbuf_r+0x98>)
   23ee0:	429c      	cmp	r4, r3
   23ee2:	d110      	bne.n	23f06 <__swbuf_r+0x3a>
   23ee4:	686c      	ldr	r4, [r5, #4]
   23ee6:	69a3      	ldr	r3, [r4, #24]
   23ee8:	60a3      	str	r3, [r4, #8]
   23eea:	89a3      	ldrh	r3, [r4, #12]
   23eec:	071a      	lsls	r2, r3, #28
   23eee:	d501      	bpl.n	23ef4 <__swbuf_r+0x28>
   23ef0:	6923      	ldr	r3, [r4, #16]
   23ef2:	b993      	cbnz	r3, 23f1a <__swbuf_r+0x4e>
   23ef4:	4621      	mov	r1, r4
   23ef6:	4628      	mov	r0, r5
   23ef8:	f000 f84c 	bl	23f94 <__swsetup_r>
   23efc:	b168      	cbz	r0, 23f1a <__swbuf_r+0x4e>
   23efe:	f04f 37ff 	mov.w	r7, #4294967295
   23f02:	4638      	mov	r0, r7
   23f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23f06:	4b18      	ldr	r3, [pc, #96]	; (23f68 <__swbuf_r+0x9c>)
   23f08:	429c      	cmp	r4, r3
   23f0a:	d101      	bne.n	23f10 <__swbuf_r+0x44>
   23f0c:	68ac      	ldr	r4, [r5, #8]
   23f0e:	e7ea      	b.n	23ee6 <__swbuf_r+0x1a>
   23f10:	4b16      	ldr	r3, [pc, #88]	; (23f6c <__swbuf_r+0xa0>)
   23f12:	429c      	cmp	r4, r3
   23f14:	bf08      	it	eq
   23f16:	68ec      	ldreq	r4, [r5, #12]
   23f18:	e7e5      	b.n	23ee6 <__swbuf_r+0x1a>
   23f1a:	6923      	ldr	r3, [r4, #16]
   23f1c:	b2f6      	uxtb	r6, r6
   23f1e:	6820      	ldr	r0, [r4, #0]
   23f20:	4637      	mov	r7, r6
   23f22:	1ac0      	subs	r0, r0, r3
   23f24:	6963      	ldr	r3, [r4, #20]
   23f26:	4283      	cmp	r3, r0
   23f28:	dc05      	bgt.n	23f36 <__swbuf_r+0x6a>
   23f2a:	4621      	mov	r1, r4
   23f2c:	4628      	mov	r0, r5
   23f2e:	f000 f8ad 	bl	2408c <_fflush_r>
   23f32:	2800      	cmp	r0, #0
   23f34:	d1e3      	bne.n	23efe <__swbuf_r+0x32>
   23f36:	68a3      	ldr	r3, [r4, #8]
   23f38:	3001      	adds	r0, #1
   23f3a:	3b01      	subs	r3, #1
   23f3c:	60a3      	str	r3, [r4, #8]
   23f3e:	6823      	ldr	r3, [r4, #0]
   23f40:	1c5a      	adds	r2, r3, #1
   23f42:	6022      	str	r2, [r4, #0]
   23f44:	701e      	strb	r6, [r3, #0]
   23f46:	6963      	ldr	r3, [r4, #20]
   23f48:	4283      	cmp	r3, r0
   23f4a:	d004      	beq.n	23f56 <__swbuf_r+0x8a>
   23f4c:	89a3      	ldrh	r3, [r4, #12]
   23f4e:	07db      	lsls	r3, r3, #31
   23f50:	d5d7      	bpl.n	23f02 <__swbuf_r+0x36>
   23f52:	2e0a      	cmp	r6, #10
   23f54:	d1d5      	bne.n	23f02 <__swbuf_r+0x36>
   23f56:	4621      	mov	r1, r4
   23f58:	4628      	mov	r0, r5
   23f5a:	f000 f897 	bl	2408c <_fflush_r>
   23f5e:	2800      	cmp	r0, #0
   23f60:	d0cf      	beq.n	23f02 <__swbuf_r+0x36>
   23f62:	e7cc      	b.n	23efe <__swbuf_r+0x32>
   23f64:	0002b288 	.word	0x0002b288
   23f68:	0002b268 	.word	0x0002b268
   23f6c:	0002b248 	.word	0x0002b248

00023f70 <_write_r>:
   23f70:	b538      	push	{r3, r4, r5, lr}
   23f72:	4604      	mov	r4, r0
   23f74:	4d06      	ldr	r5, [pc, #24]	; (23f90 <_write_r+0x20>)
   23f76:	4608      	mov	r0, r1
   23f78:	4611      	mov	r1, r2
   23f7a:	2200      	movs	r2, #0
   23f7c:	602a      	str	r2, [r5, #0]
   23f7e:	461a      	mov	r2, r3
   23f80:	f001 fdaf 	bl	25ae2 <_write>
   23f84:	1c43      	adds	r3, r0, #1
   23f86:	d102      	bne.n	23f8e <_write_r+0x1e>
   23f88:	682b      	ldr	r3, [r5, #0]
   23f8a:	b103      	cbz	r3, 23f8e <_write_r+0x1e>
   23f8c:	6023      	str	r3, [r4, #0]
   23f8e:	bd38      	pop	{r3, r4, r5, pc}
   23f90:	200214c4 	.word	0x200214c4

00023f94 <__swsetup_r>:
   23f94:	4b31      	ldr	r3, [pc, #196]	; (2405c <__swsetup_r+0xc8>)
   23f96:	b570      	push	{r4, r5, r6, lr}
   23f98:	681d      	ldr	r5, [r3, #0]
   23f9a:	4606      	mov	r6, r0
   23f9c:	460c      	mov	r4, r1
   23f9e:	b125      	cbz	r5, 23faa <__swsetup_r+0x16>
   23fa0:	69ab      	ldr	r3, [r5, #24]
   23fa2:	b913      	cbnz	r3, 23faa <__swsetup_r+0x16>
   23fa4:	4628      	mov	r0, r5
   23fa6:	f7ff faa7 	bl	234f8 <__sinit>
   23faa:	4b2d      	ldr	r3, [pc, #180]	; (24060 <__swsetup_r+0xcc>)
   23fac:	429c      	cmp	r4, r3
   23fae:	d10e      	bne.n	23fce <__swsetup_r+0x3a>
   23fb0:	686c      	ldr	r4, [r5, #4]
   23fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23fb6:	071a      	lsls	r2, r3, #28
   23fb8:	d42c      	bmi.n	24014 <__swsetup_r+0x80>
   23fba:	06dd      	lsls	r5, r3, #27
   23fbc:	d411      	bmi.n	23fe2 <__swsetup_r+0x4e>
   23fbe:	2209      	movs	r2, #9
   23fc0:	6032      	str	r2, [r6, #0]
   23fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23fc6:	f04f 30ff 	mov.w	r0, #4294967295
   23fca:	81a3      	strh	r3, [r4, #12]
   23fcc:	e03d      	b.n	2404a <__swsetup_r+0xb6>
   23fce:	4b25      	ldr	r3, [pc, #148]	; (24064 <__swsetup_r+0xd0>)
   23fd0:	429c      	cmp	r4, r3
   23fd2:	d101      	bne.n	23fd8 <__swsetup_r+0x44>
   23fd4:	68ac      	ldr	r4, [r5, #8]
   23fd6:	e7ec      	b.n	23fb2 <__swsetup_r+0x1e>
   23fd8:	4b23      	ldr	r3, [pc, #140]	; (24068 <__swsetup_r+0xd4>)
   23fda:	429c      	cmp	r4, r3
   23fdc:	bf08      	it	eq
   23fde:	68ec      	ldreq	r4, [r5, #12]
   23fe0:	e7e7      	b.n	23fb2 <__swsetup_r+0x1e>
   23fe2:	0758      	lsls	r0, r3, #29
   23fe4:	d512      	bpl.n	2400c <__swsetup_r+0x78>
   23fe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   23fe8:	b141      	cbz	r1, 23ffc <__swsetup_r+0x68>
   23fea:	f104 0344 	add.w	r3, r4, #68	; 0x44
   23fee:	4299      	cmp	r1, r3
   23ff0:	d002      	beq.n	23ff8 <__swsetup_r+0x64>
   23ff2:	4630      	mov	r0, r6
   23ff4:	f7fe fdf0 	bl	22bd8 <_free_r>
   23ff8:	2300      	movs	r3, #0
   23ffa:	6363      	str	r3, [r4, #52]	; 0x34
   23ffc:	89a3      	ldrh	r3, [r4, #12]
   23ffe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   24002:	81a3      	strh	r3, [r4, #12]
   24004:	2300      	movs	r3, #0
   24006:	6063      	str	r3, [r4, #4]
   24008:	6923      	ldr	r3, [r4, #16]
   2400a:	6023      	str	r3, [r4, #0]
   2400c:	89a3      	ldrh	r3, [r4, #12]
   2400e:	f043 0308 	orr.w	r3, r3, #8
   24012:	81a3      	strh	r3, [r4, #12]
   24014:	6923      	ldr	r3, [r4, #16]
   24016:	b94b      	cbnz	r3, 2402c <__swsetup_r+0x98>
   24018:	89a3      	ldrh	r3, [r4, #12]
   2401a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2401e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   24022:	d003      	beq.n	2402c <__swsetup_r+0x98>
   24024:	4621      	mov	r1, r4
   24026:	4630      	mov	r0, r6
   24028:	f000 f87e 	bl	24128 <__smakebuf_r>
   2402c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24030:	f013 0201 	ands.w	r2, r3, #1
   24034:	d00a      	beq.n	2404c <__swsetup_r+0xb8>
   24036:	2200      	movs	r2, #0
   24038:	60a2      	str	r2, [r4, #8]
   2403a:	6962      	ldr	r2, [r4, #20]
   2403c:	4252      	negs	r2, r2
   2403e:	61a2      	str	r2, [r4, #24]
   24040:	6922      	ldr	r2, [r4, #16]
   24042:	b942      	cbnz	r2, 24056 <__swsetup_r+0xc2>
   24044:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   24048:	d1bb      	bne.n	23fc2 <__swsetup_r+0x2e>
   2404a:	bd70      	pop	{r4, r5, r6, pc}
   2404c:	0799      	lsls	r1, r3, #30
   2404e:	bf58      	it	pl
   24050:	6962      	ldrpl	r2, [r4, #20]
   24052:	60a2      	str	r2, [r4, #8]
   24054:	e7f4      	b.n	24040 <__swsetup_r+0xac>
   24056:	2000      	movs	r0, #0
   24058:	e7f7      	b.n	2404a <__swsetup_r+0xb6>
   2405a:	bf00      	nop
   2405c:	20008744 	.word	0x20008744
   24060:	0002b288 	.word	0x0002b288
   24064:	0002b268 	.word	0x0002b268
   24068:	0002b248 	.word	0x0002b248

0002406c <_close_r>:
   2406c:	b538      	push	{r3, r4, r5, lr}
   2406e:	2300      	movs	r3, #0
   24070:	4d05      	ldr	r5, [pc, #20]	; (24088 <_close_r+0x1c>)
   24072:	4604      	mov	r4, r0
   24074:	4608      	mov	r0, r1
   24076:	602b      	str	r3, [r5, #0]
   24078:	f001 fd37 	bl	25aea <_close>
   2407c:	1c43      	adds	r3, r0, #1
   2407e:	d102      	bne.n	24086 <_close_r+0x1a>
   24080:	682b      	ldr	r3, [r5, #0]
   24082:	b103      	cbz	r3, 24086 <_close_r+0x1a>
   24084:	6023      	str	r3, [r4, #0]
   24086:	bd38      	pop	{r3, r4, r5, pc}
   24088:	200214c4 	.word	0x200214c4

0002408c <_fflush_r>:
   2408c:	b538      	push	{r3, r4, r5, lr}
   2408e:	690b      	ldr	r3, [r1, #16]
   24090:	4605      	mov	r5, r0
   24092:	460c      	mov	r4, r1
   24094:	b913      	cbnz	r3, 2409c <_fflush_r+0x10>
   24096:	2500      	movs	r5, #0
   24098:	4628      	mov	r0, r5
   2409a:	bd38      	pop	{r3, r4, r5, pc}
   2409c:	b118      	cbz	r0, 240a6 <_fflush_r+0x1a>
   2409e:	6983      	ldr	r3, [r0, #24]
   240a0:	b90b      	cbnz	r3, 240a6 <_fflush_r+0x1a>
   240a2:	f7ff fa29 	bl	234f8 <__sinit>
   240a6:	4b14      	ldr	r3, [pc, #80]	; (240f8 <_fflush_r+0x6c>)
   240a8:	429c      	cmp	r4, r3
   240aa:	d11b      	bne.n	240e4 <_fflush_r+0x58>
   240ac:	686c      	ldr	r4, [r5, #4]
   240ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   240b2:	2b00      	cmp	r3, #0
   240b4:	d0ef      	beq.n	24096 <_fflush_r+0xa>
   240b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   240b8:	07d0      	lsls	r0, r2, #31
   240ba:	d404      	bmi.n	240c6 <_fflush_r+0x3a>
   240bc:	0599      	lsls	r1, r3, #22
   240be:	d402      	bmi.n	240c6 <_fflush_r+0x3a>
   240c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   240c2:	f7ec fe2f 	bl	10d24 <__retarget_lock_acquire_recursive>
   240c6:	4628      	mov	r0, r5
   240c8:	4621      	mov	r1, r4
   240ca:	f005 fd18 	bl	29afe <__sflush_r>
   240ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   240d0:	4605      	mov	r5, r0
   240d2:	07da      	lsls	r2, r3, #31
   240d4:	d4e0      	bmi.n	24098 <_fflush_r+0xc>
   240d6:	89a3      	ldrh	r3, [r4, #12]
   240d8:	059b      	lsls	r3, r3, #22
   240da:	d4dd      	bmi.n	24098 <_fflush_r+0xc>
   240dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   240de:	f7ec fe3d 	bl	10d5c <__retarget_lock_release_recursive>
   240e2:	e7d9      	b.n	24098 <_fflush_r+0xc>
   240e4:	4b05      	ldr	r3, [pc, #20]	; (240fc <_fflush_r+0x70>)
   240e6:	429c      	cmp	r4, r3
   240e8:	d101      	bne.n	240ee <_fflush_r+0x62>
   240ea:	68ac      	ldr	r4, [r5, #8]
   240ec:	e7df      	b.n	240ae <_fflush_r+0x22>
   240ee:	4b04      	ldr	r3, [pc, #16]	; (24100 <_fflush_r+0x74>)
   240f0:	429c      	cmp	r4, r3
   240f2:	bf08      	it	eq
   240f4:	68ec      	ldreq	r4, [r5, #12]
   240f6:	e7da      	b.n	240ae <_fflush_r+0x22>
   240f8:	0002b288 	.word	0x0002b288
   240fc:	0002b268 	.word	0x0002b268
   24100:	0002b248 	.word	0x0002b248

00024104 <_lseek_r>:
   24104:	b538      	push	{r3, r4, r5, lr}
   24106:	4604      	mov	r4, r0
   24108:	4d06      	ldr	r5, [pc, #24]	; (24124 <_lseek_r+0x20>)
   2410a:	4608      	mov	r0, r1
   2410c:	4611      	mov	r1, r2
   2410e:	2200      	movs	r2, #0
   24110:	602a      	str	r2, [r5, #0]
   24112:	461a      	mov	r2, r3
   24114:	f001 fcec 	bl	25af0 <_lseek>
   24118:	1c43      	adds	r3, r0, #1
   2411a:	d102      	bne.n	24122 <_lseek_r+0x1e>
   2411c:	682b      	ldr	r3, [r5, #0]
   2411e:	b103      	cbz	r3, 24122 <_lseek_r+0x1e>
   24120:	6023      	str	r3, [r4, #0]
   24122:	bd38      	pop	{r3, r4, r5, pc}
   24124:	200214c4 	.word	0x200214c4

00024128 <__smakebuf_r>:
   24128:	898b      	ldrh	r3, [r1, #12]
   2412a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2412c:	079d      	lsls	r5, r3, #30
   2412e:	4606      	mov	r6, r0
   24130:	460c      	mov	r4, r1
   24132:	d507      	bpl.n	24144 <__smakebuf_r+0x1c>
   24134:	f104 0347 	add.w	r3, r4, #71	; 0x47
   24138:	6023      	str	r3, [r4, #0]
   2413a:	6123      	str	r3, [r4, #16]
   2413c:	2301      	movs	r3, #1
   2413e:	6163      	str	r3, [r4, #20]
   24140:	b003      	add	sp, #12
   24142:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24144:	ab01      	add	r3, sp, #4
   24146:	466a      	mov	r2, sp
   24148:	f005 fd58 	bl	29bfc <__swhatbuf_r>
   2414c:	9f00      	ldr	r7, [sp, #0]
   2414e:	4605      	mov	r5, r0
   24150:	4630      	mov	r0, r6
   24152:	4639      	mov	r1, r7
   24154:	f7fe fd8a 	bl	22c6c <_malloc_r>
   24158:	b948      	cbnz	r0, 2416e <__smakebuf_r+0x46>
   2415a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2415e:	059a      	lsls	r2, r3, #22
   24160:	d4ee      	bmi.n	24140 <__smakebuf_r+0x18>
   24162:	f023 0303 	bic.w	r3, r3, #3
   24166:	f043 0302 	orr.w	r3, r3, #2
   2416a:	81a3      	strh	r3, [r4, #12]
   2416c:	e7e2      	b.n	24134 <__smakebuf_r+0xc>
   2416e:	4b0d      	ldr	r3, [pc, #52]	; (241a4 <__smakebuf_r+0x7c>)
   24170:	62b3      	str	r3, [r6, #40]	; 0x28
   24172:	89a3      	ldrh	r3, [r4, #12]
   24174:	6020      	str	r0, [r4, #0]
   24176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2417a:	81a3      	strh	r3, [r4, #12]
   2417c:	9b01      	ldr	r3, [sp, #4]
   2417e:	e9c4 0704 	strd	r0, r7, [r4, #16]
   24182:	b15b      	cbz	r3, 2419c <__smakebuf_r+0x74>
   24184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24188:	4630      	mov	r0, r6
   2418a:	f000 f84b 	bl	24224 <_isatty_r>
   2418e:	b128      	cbz	r0, 2419c <__smakebuf_r+0x74>
   24190:	89a3      	ldrh	r3, [r4, #12]
   24192:	f023 0303 	bic.w	r3, r3, #3
   24196:	f043 0301 	orr.w	r3, r3, #1
   2419a:	81a3      	strh	r3, [r4, #12]
   2419c:	89a3      	ldrh	r3, [r4, #12]
   2419e:	431d      	orrs	r5, r3
   241a0:	81a5      	strh	r5, [r4, #12]
   241a2:	e7cd      	b.n	24140 <__smakebuf_r+0x18>
   241a4:	000234bd 	.word	0x000234bd

000241a8 <_read_r>:
   241a8:	b538      	push	{r3, r4, r5, lr}
   241aa:	4604      	mov	r4, r0
   241ac:	4d06      	ldr	r5, [pc, #24]	; (241c8 <_read_r+0x20>)
   241ae:	4608      	mov	r0, r1
   241b0:	4611      	mov	r1, r2
   241b2:	2200      	movs	r2, #0
   241b4:	602a      	str	r2, [r5, #0]
   241b6:	461a      	mov	r2, r3
   241b8:	f001 fc8f 	bl	25ada <_read>
   241bc:	1c43      	adds	r3, r0, #1
   241be:	d102      	bne.n	241c6 <_read_r+0x1e>
   241c0:	682b      	ldr	r3, [r5, #0]
   241c2:	b103      	cbz	r3, 241c6 <_read_r+0x1e>
   241c4:	6023      	str	r3, [r4, #0]
   241c6:	bd38      	pop	{r3, r4, r5, pc}
   241c8:	200214c4 	.word	0x200214c4

000241cc <raise>:
   241cc:	4b02      	ldr	r3, [pc, #8]	; (241d8 <raise+0xc>)
   241ce:	4601      	mov	r1, r0
   241d0:	6818      	ldr	r0, [r3, #0]
   241d2:	f005 bd4a 	b.w	29c6a <_raise_r>
   241d6:	bf00      	nop
   241d8:	20008744 	.word	0x20008744

000241dc <_kill_r>:
   241dc:	b538      	push	{r3, r4, r5, lr}
   241de:	2300      	movs	r3, #0
   241e0:	4d06      	ldr	r5, [pc, #24]	; (241fc <_kill_r+0x20>)
   241e2:	4604      	mov	r4, r0
   241e4:	4608      	mov	r0, r1
   241e6:	4611      	mov	r1, r2
   241e8:	602b      	str	r3, [r5, #0]
   241ea:	f001 fc88 	bl	25afe <_kill>
   241ee:	1c43      	adds	r3, r0, #1
   241f0:	d102      	bne.n	241f8 <_kill_r+0x1c>
   241f2:	682b      	ldr	r3, [r5, #0]
   241f4:	b103      	cbz	r3, 241f8 <_kill_r+0x1c>
   241f6:	6023      	str	r3, [r4, #0]
   241f8:	bd38      	pop	{r3, r4, r5, pc}
   241fa:	bf00      	nop
   241fc:	200214c4 	.word	0x200214c4

00024200 <_fstat_r>:
   24200:	b538      	push	{r3, r4, r5, lr}
   24202:	2300      	movs	r3, #0
   24204:	4d06      	ldr	r5, [pc, #24]	; (24220 <_fstat_r+0x20>)
   24206:	4604      	mov	r4, r0
   24208:	4608      	mov	r0, r1
   2420a:	4611      	mov	r1, r2
   2420c:	602b      	str	r3, [r5, #0]
   2420e:	f001 fc7a 	bl	25b06 <_fstat>
   24212:	1c43      	adds	r3, r0, #1
   24214:	d102      	bne.n	2421c <_fstat_r+0x1c>
   24216:	682b      	ldr	r3, [r5, #0]
   24218:	b103      	cbz	r3, 2421c <_fstat_r+0x1c>
   2421a:	6023      	str	r3, [r4, #0]
   2421c:	bd38      	pop	{r3, r4, r5, pc}
   2421e:	bf00      	nop
   24220:	200214c4 	.word	0x200214c4

00024224 <_isatty_r>:
   24224:	b538      	push	{r3, r4, r5, lr}
   24226:	2300      	movs	r3, #0
   24228:	4d05      	ldr	r5, [pc, #20]	; (24240 <_isatty_r+0x1c>)
   2422a:	4604      	mov	r4, r0
   2422c:	4608      	mov	r0, r1
   2422e:	602b      	str	r3, [r5, #0]
   24230:	f001 fc60 	bl	25af4 <_isatty>
   24234:	1c43      	adds	r3, r0, #1
   24236:	d102      	bne.n	2423e <_isatty_r+0x1a>
   24238:	682b      	ldr	r3, [r5, #0]
   2423a:	b103      	cbz	r3, 2423e <_isatty_r+0x1a>
   2423c:	6023      	str	r3, [r4, #0]
   2423e:	bd38      	pop	{r3, r4, r5, pc}
   24240:	200214c4 	.word	0x200214c4

00024244 <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   24244:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   24246:	f7fd fb71 	bl	2192c <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   2424a:	f7fe fc59 	bl	22b00 <k_thread_system_pool_assign>
    return 0;
}
   2424e:	2000      	movs	r0, #0
   24250:	bd08      	pop	{r3, pc}

00024252 <uart_cb_2>:
}
   24252:	4770      	bx	lr

00024254 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   24254:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   24256:	ab0b      	add	r3, sp, #44	; 0x2c
   24258:	9305      	str	r3, [sp, #20]
   2425a:	9303      	str	r3, [sp, #12]
   2425c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2425e:	9302      	str	r3, [sp, #8]
   24260:	2300      	movs	r3, #0
   24262:	4618      	mov	r0, r3
   24264:	e9cd 3300 	strd	r3, r3, [sp]
   24268:	f7e9 fed2 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   2426c:	b007      	add	sp, #28
   2426e:	f85d fb04 	ldr.w	pc, [sp], #4

00024272 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   24272:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   24274:	6883      	ldr	r3, [r0, #8]
   24276:	2228      	movs	r2, #40	; 0x28
   24278:	68dc      	ldr	r4, [r3, #12]
   2427a:	2332      	movs	r3, #50	; 0x32
   2427c:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   2427e:	bc10      	pop	{r4}
   24280:	4760      	bx	ip

00024282 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   24282:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   24284:	6883      	ldr	r3, [r0, #8]
   24286:	685c      	ldr	r4, [r3, #4]
   24288:	f04f 33ff 	mov.w	r3, #4294967295
   2428c:	46a4      	mov	ip, r4
}
   2428e:	bc10      	pop	{r4}
   24290:	4760      	bx	ip

00024292 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   24292:	f7fb bc67 	b.w	1fb64 <z_impl_k_sem_take>

00024296 <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   24296:	6883      	ldr	r3, [r0, #8]
   24298:	69db      	ldr	r3, [r3, #28]
   2429a:	b10b      	cbz	r3, 242a0 <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2429c:	2201      	movs	r2, #1
   2429e:	4718      	bx	r3
}
   242a0:	4770      	bx	lr

000242a2 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   242a2:	f7fd bb0f 	b.w	218c4 <z_impl_k_sleep>

000242a6 <send_protobuf>:
void send_protobuf(void){
   242a6:	b510      	push	{r4, lr}
   242a8:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
    buf_proto=send_array_dd_v0(); 
   242ac:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   242b0:	4620      	mov	r0, r4
   242b2:	f7e7 fce1 	bl	bc78 <send_array_dd_v0>
    send_bluetooth(buf_proto);
   242b6:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   242ba:	f240 72cc 	movw	r2, #1996	; 0x7cc
   242be:	4668      	mov	r0, sp
   242c0:	f005 f8d7 	bl	29472 <memcpy>
   242c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   242c8:	f7e7 f94e 	bl	b568 <send_bluetooth>
}
   242cc:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   242d0:	bd10      	pop	{r4, pc}

000242d2 <error>:
{
   242d2:	b508      	push	{r3, lr}
	turn_off_all_leds();
   242d4:	f7e7 faa8 	bl	b828 <turn_off_all_leds>
		k_sleep(K_MSEC(1000));
   242d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   242dc:	2100      	movs	r1, #0
   242de:	f7ff ffe0 	bl	242a2 <k_sleep.isra.0>
	while (true) {
   242e2:	e7f9      	b.n	242d8 <error+0x6>

000242e4 <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   242e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   242e6:	6806      	ldr	r6, [r0, #0]
   242e8:	8902      	ldrh	r2, [r0, #8]
   242ea:	8a33      	ldrh	r3, [r6, #16]
   242ec:	429a      	cmp	r2, r3
   242ee:	d271      	bcs.n	243d4 <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   242f0:	6831      	ldr	r1, [r6, #0]
   242f2:	8942      	ldrh	r2, [r0, #10]
   242f4:	0093      	lsls	r3, r2, #2
   242f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   242fa:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   242fe:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   24302:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   24304:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   24306:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   2430a:	d01f      	beq.n	2434c <load_descriptor_values+0x68>
   2430c:	2902      	cmp	r1, #2
   2430e:	d02a      	beq.n	24366 <load_descriptor_values+0x82>
   24310:	2900      	cmp	r1, #0
   24312:	d135      	bne.n	24380 <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   24314:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   24318:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   2431c:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   24320:	0f12      	lsrs	r2, r2, #28
   24322:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   24324:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   24326:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   2432a:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   2432c:	2a00      	cmp	r2, #0
   2432e:	d134      	bne.n	2439a <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   24330:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   24332:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   24334:	f004 040e 	and.w	r4, r4, #14
   24338:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   2433a:	bf11      	iteee	ne
   2433c:	2300      	movne	r3, #0
   2433e:	89c2      	ldrheq	r2, [r0, #14]
   24340:	6873      	ldreq	r3, [r6, #4]
   24342:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   24346:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   24348:	2001      	movs	r0, #1
}
   2434a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   2434c:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   2434e:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   24352:	4419      	add	r1, r3
   24354:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   24356:	0f0b      	lsrs	r3, r1, #28
   24358:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   2435c:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   2435e:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   24360:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   24364:	e7dd      	b.n	24322 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   24366:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   24368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   2436c:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   2436e:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   24372:	0a1a      	lsrs	r2, r3, #8
   24374:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   24378:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   2437a:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   2437c:	898a      	ldrh	r2, [r1, #12]
            break;
   2437e:	e7d0      	b.n	24322 <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   24380:	6832      	ldr	r2, [r6, #0]
   24382:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   24384:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   24388:	0a19      	lsrs	r1, r3, #8
   2438a:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   2438e:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   24392:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   24394:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   24396:	b25b      	sxtb	r3, r3
            break;
   24398:	e7c3      	b.n	24322 <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   2439a:	443a      	add	r2, r7
   2439c:	6182      	str	r2, [r0, #24]
        if (size_offset)
   2439e:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   243a2:	b123      	cbz	r3, 243ae <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   243a4:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   243a6:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   243a8:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   243aa:	d109      	bne.n	243c0 <load_descriptor_values+0xdc>
   243ac:	e00f      	b.n	243ce <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   243ae:	f004 0530 	and.w	r5, r4, #48	; 0x30
   243b2:	2d20      	cmp	r5, #32
   243b4:	d1f7      	bne.n	243a6 <load_descriptor_values+0xc2>
   243b6:	2c3f      	cmp	r4, #63	; 0x3f
   243b8:	d804      	bhi.n	243c4 <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   243ba:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   243be:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   243c0:	61c2      	str	r2, [r0, #28]
   243c2:	e7b7      	b.n	24334 <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   243c4:	2980      	cmp	r1, #128	; 0x80
   243c6:	d1fa      	bne.n	243be <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   243c8:	f100 0314 	add.w	r3, r0, #20
   243cc:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   243ce:	6813      	ldr	r3, [r2, #0]
   243d0:	61c3      	str	r3, [r0, #28]
   243d2:	e7af      	b.n	24334 <load_descriptor_values+0x50>
        return false;
   243d4:	2000      	movs	r0, #0
   243d6:	e7b8      	b.n	2434a <load_descriptor_values+0x66>

000243d8 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   243d8:	8903      	ldrh	r3, [r0, #8]
{
   243da:	b510      	push	{r4, lr}
    iter->index++;
   243dc:	3301      	adds	r3, #1
   243de:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   243e0:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   243e2:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   243e4:	8a0a      	ldrh	r2, [r1, #16]
   243e6:	429a      	cmp	r2, r3
   243e8:	d803      	bhi.n	243f2 <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   243ea:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   243ec:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   243f0:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   243f2:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   243f4:	680b      	ldr	r3, [r1, #0]
   243f6:	8942      	ldrh	r2, [r0, #10]
   243f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   243fc:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   243fe:	f001 0103 	and.w	r1, r1, #3
   24402:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   24406:	440a      	add	r2, r1
   24408:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   2440a:	8982      	ldrh	r2, [r0, #12]
   2440c:	f003 0130 	and.w	r1, r3, #48	; 0x30
   24410:	2900      	cmp	r1, #0
   24412:	bf08      	it	eq
   24414:	3201      	addeq	r2, #1
   24416:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   24418:	89c2      	ldrh	r2, [r0, #14]
   2441a:	f003 030e 	and.w	r3, r3, #14
   2441e:	2b08      	cmp	r3, #8
   24420:	bf08      	it	eq
   24422:	3201      	addeq	r2, #1
   24424:	81c2      	strh	r2, [r0, #14]
}
   24426:	e7e3      	b.n	243f0 <advance_iterator+0x18>

00024428 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   24428:	b570      	push	{r4, r5, r6, lr}
   2442a:	4604      	mov	r4, r0
   2442c:	460e      	mov	r6, r1
   2442e:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   24430:	2100      	movs	r1, #0
   24432:	2220      	movs	r2, #32
   24434:	3008      	adds	r0, #8
   24436:	f005 f856 	bl	294e6 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   2443a:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   2443e:	4620      	mov	r0, r4
}
   24440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   24444:	f7ff bf4e 	b.w	242e4 <load_descriptor_values>

00024448 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   24448:	b538      	push	{r3, r4, r5, lr}
   2444a:	460c      	mov	r4, r1
   2444c:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   2444e:	680b      	ldr	r3, [r1, #0]
   24450:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   24452:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   24454:	681b      	ldr	r3, [r3, #0]
   24456:	0a1b      	lsrs	r3, r3, #8
   24458:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2445c:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2445e:	bf14      	ite	ne
   24460:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   24462:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   24464:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   24466:	f7ff ffdf 	bl	24428 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   2446a:	622c      	str	r4, [r5, #32]
    return status;
}
   2446c:	bd38      	pop	{r3, r4, r5, pc}

0002446e <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   2446e:	b510      	push	{r4, lr}
   24470:	4604      	mov	r4, r0
    advance_iterator(iter);
   24472:	f7ff ffb1 	bl	243d8 <advance_iterator>
    (void)load_descriptor_values(iter);
   24476:	f7ff ff35 	bl	242e4 <load_descriptor_values>
    return iter->index != 0;
   2447a:	8920      	ldrh	r0, [r4, #8]
}
   2447c:	3800      	subs	r0, #0
   2447e:	bf18      	it	ne
   24480:	2001      	movne	r0, #1
   24482:	bd10      	pop	{r4, pc}

00024484 <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   24484:	f7ff bfd0 	b.w	24428 <pb_field_iter_begin>

00024488 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   24488:	f7ff bfde 	b.w	24448 <pb_field_iter_begin_extension>

0002448c <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   2448c:	b410      	push	{r4}
   2448e:	460b      	mov	r3, r1
   24490:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   24492:	8a52      	ldrh	r2, [r2, #18]
   24494:	2a08      	cmp	r2, #8
   24496:	d10e      	bne.n	244b6 <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   24498:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   2449a:	b162      	cbz	r2, 244b6 <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   2449c:	b128      	cbz	r0, 244aa <pb_default_field_callback+0x1e>
   2449e:	6814      	ldr	r4, [r2, #0]
   244a0:	b11c      	cbz	r4, 244aa <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   244a2:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   244a4:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   244a6:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   244a8:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   244aa:	b123      	cbz	r3, 244b6 <pb_default_field_callback+0x2a>
   244ac:	6814      	ldr	r4, [r2, #0]
   244ae:	b114      	cbz	r4, 244b6 <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   244b0:	4618      	mov	r0, r3
   244b2:	3204      	adds	r2, #4
   244b4:	e7f6      	b.n	244a4 <pb_default_field_callback+0x18>
}
   244b6:	2001      	movs	r0, #1
   244b8:	bc10      	pop	{r4}
   244ba:	4770      	bx	lr

000244bc <buf_write>:
{
   244bc:	4603      	mov	r3, r0
   244be:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   244c0:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   244c2:	1884      	adds	r4, r0, r2
   244c4:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   244c6:	f004 ffd4 	bl	29472 <memcpy>
}
   244ca:	2001      	movs	r0, #1
   244cc:	bd10      	pop	{r4, pc}

000244ce <pb_encode_varint>:
{
   244ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   244d0:	2a80      	cmp	r2, #128	; 0x80
{
   244d2:	b085      	sub	sp, #20
    if (value <= 0x7F)
   244d4:	f173 0100 	sbcs.w	r1, r3, #0
{
   244d8:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   244da:	b2d4      	uxtb	r4, r2
   244dc:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   244de:	d206      	bcs.n	244ee <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   244e0:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   244e2:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   244e6:	f7e7 fd37 	bl	bf58 <pb_write>
}
   244ea:	b005      	add	sp, #20
   244ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   244ee:	09d5      	lsrs	r5, r2, #7
   244f0:	4608      	mov	r0, r1
    size_t i = 0;
   244f2:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   244f4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   244f8:	ea53 0c05 	orrs.w	ip, r3, r5
   244fc:	4617      	mov	r7, r2
        buffer[i++] = byte;
   244fe:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   24502:	d108      	bne.n	24516 <pb_encode_varint+0x48>
   24504:	463a      	mov	r2, r7
    buffer[i++] = byte;
   24506:	f102 0310 	add.w	r3, r2, #16
   2450a:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   2450c:	4630      	mov	r0, r6
    buffer[i++] = byte;
   2450e:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   24512:	3201      	adds	r2, #1
   24514:	e7e7      	b.n	244e6 <pb_encode_varint+0x18>
        byte |= 0x80;
   24516:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2451a:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   2451c:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   24520:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   24524:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   24528:	d1e6      	bne.n	244f8 <pb_encode_varint+0x2a>
    if (high)
   2452a:	2b00      	cmp	r3, #0
   2452c:	d0eb      	beq.n	24506 <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   2452e:	0118      	lsls	r0, r3, #4
   24530:	f000 0070 	and.w	r0, r0, #112	; 0x70
   24534:	4304      	orrs	r4, r0
        high >>= 3;
   24536:	08db      	lsrs	r3, r3, #3
        while (high)
   24538:	2b00      	cmp	r3, #0
   2453a:	d0e4      	beq.n	24506 <pb_encode_varint+0x38>
            byte |= 0x80;
   2453c:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   24540:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   24542:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   24546:	3201      	adds	r2, #1
   24548:	09db      	lsrs	r3, r3, #7
   2454a:	e7f5      	b.n	24538 <pb_encode_varint+0x6a>

0002454c <pb_encode_svarint>:
    if (value < 0)
   2454c:	1892      	adds	r2, r2, r2
   2454e:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   24552:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   24556:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   2455a:	f7ff bfb8 	b.w	244ce <pb_encode_varint>

0002455e <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   2455e:	2204      	movs	r2, #4
   24560:	f7e7 bcfa 	b.w	bf58 <pb_write>

00024564 <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   24564:	2208      	movs	r2, #8
   24566:	f7e7 bcf7 	b.w	bf58 <pb_write>

0002456a <pb_encode_tag>:
{
   2456a:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   2456c:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   24570:	0f5b      	lsrs	r3, r3, #29
   24572:	f7ff bfac 	b.w	244ce <pb_encode_varint>

00024576 <pb_encode_string>:
{
   24576:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   24578:	2300      	movs	r3, #0
{
   2457a:	4604      	mov	r4, r0
   2457c:	460d      	mov	r5, r1
   2457e:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   24580:	f7ff ffa5 	bl	244ce <pb_encode_varint>
   24584:	b130      	cbz	r0, 24594 <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   24586:	4632      	mov	r2, r6
   24588:	4629      	mov	r1, r5
   2458a:	4620      	mov	r0, r4
}
   2458c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   24590:	f7e7 bce2 	b.w	bf58 <pb_write>
}
   24594:	bd70      	pop	{r4, r5, r6, pc}

00024596 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   24596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2459a:	4606      	mov	r6, r0
   2459c:	460d      	mov	r5, r1
   2459e:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   245a0:	4698      	mov	r8, r3
   245a2:	b32b      	cbz	r3, 245f0 <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   245a4:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   245a8:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   245ac:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   245b0:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   245b2:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   245b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   245b8:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   245bc:	441c      	add	r4, r3
   245be:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   245c0:	45ca      	cmp	sl, r9
   245c2:	d309      	bcc.n	245d8 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   245c4:	4639      	mov	r1, r7
   245c6:	4630      	mov	r0, r6
   245c8:	46ac      	mov	ip, r5
   245ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
   245ce:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   245d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   245d6:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   245d8:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   245dc:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   245e0:	4620      	mov	r0, r4
		*ps = s;
   245e2:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   245e6:	f7e4 febb 	bl	9360 <strlen>
   245ea:	3001      	adds	r0, #1
   245ec:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   245ee:	e7e7      	b.n	245c0 <cbpprintf_external+0x2a>
}
   245f0:	f06f 0015 	mvn.w	r0, #21
   245f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000245f8 <arch_printk_char_out>:
}
   245f8:	2000      	movs	r0, #0
   245fa:	4770      	bx	lr

000245fc <str_out>:
{
   245fc:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   245fe:	688a      	ldr	r2, [r1, #8]
   24600:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   24602:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24604:	b114      	cbz	r4, 2460c <str_out+0x10>
   24606:	684b      	ldr	r3, [r1, #4]
   24608:	4293      	cmp	r3, r2
   2460a:	dc01      	bgt.n	24610 <str_out+0x14>
		ctx->count++;
   2460c:	608d      	str	r5, [r1, #8]
}
   2460e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   24610:	3b01      	subs	r3, #1
   24612:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   24614:	bf08      	it	eq
   24616:	2200      	moveq	r2, #0
   24618:	608d      	str	r5, [r1, #8]
   2461a:	bf0c      	ite	eq
   2461c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2461e:	54a0      	strbne	r0, [r4, r2]
   24620:	e7f5      	b.n	2460e <str_out+0x12>

00024622 <printk>:
{
   24622:	b40f      	push	{r0, r1, r2, r3}
   24624:	b507      	push	{r0, r1, r2, lr}
   24626:	a904      	add	r1, sp, #16
   24628:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2462c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2462e:	f7e8 f96b 	bl	c908 <vprintk>
}
   24632:	b003      	add	sp, #12
   24634:	f85d eb04 	ldr.w	lr, [sp], #4
   24638:	b004      	add	sp, #16
   2463a:	4770      	bx	lr

0002463c <snprintk>:
{
   2463c:	b40c      	push	{r2, r3}
   2463e:	b507      	push	{r0, r1, r2, lr}
   24640:	ab04      	add	r3, sp, #16
   24642:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   24646:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   24648:	f7e8 f96c 	bl	c924 <vsnprintk>
}
   2464c:	b003      	add	sp, #12
   2464e:	f85d eb04 	ldr.w	lr, [sp], #4
   24652:	b002      	add	sp, #8
   24654:	4770      	bx	lr

00024656 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   24656:	4604      	mov	r4, r0
   24658:	b508      	push	{r3, lr}
   2465a:	4608      	mov	r0, r1
   2465c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2465e:	461a      	mov	r2, r3
   24660:	47a0      	blx	r4
	return z_impl_z_current_get();
   24662:	f7fd f963 	bl	2192c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   24666:	f7ec f89b 	bl	107a0 <z_impl_k_thread_abort>

0002466a <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2466a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2466e:	8840      	ldrh	r0, [r0, #2]
}
   24670:	0840      	lsrs	r0, r0, #1
   24672:	4770      	bx	lr

00024674 <free_list_add>:
{
   24674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24676:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   24678:	f7ff fff7 	bl	2466a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2467c:	fab0 f080 	clz	r0, r0
   24680:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   24684:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   24688:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2468c:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2468e:	1d17      	adds	r7, r2, #4
{
   24690:	460c      	mov	r4, r1
   24692:	3206      	adds	r2, #6
   24694:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   24696:	b956      	cbnz	r6, 246ae <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   24698:	2101      	movs	r1, #1
   2469a:	fa01 f000 	lsl.w	r0, r1, r0
   2469e:	68d9      	ldr	r1, [r3, #12]
   246a0:	4301      	orrs	r1, r0
   246a2:	60d9      	str	r1, [r3, #12]
		b->next = c;
   246a4:	f8cc 4010 	str.w	r4, [ip, #16]
   246a8:	53dd      	strh	r5, [r3, r7]
   246aa:	529d      	strh	r5, [r3, r2]
}
   246ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   246ae:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   246b0:	3104      	adds	r1, #4
   246b2:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   246b4:	53d8      	strh	r0, [r3, r7]
   246b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   246ba:	529e      	strh	r6, [r3, r2]
   246bc:	80c5      	strh	r5, [r0, #6]
   246be:	525d      	strh	r5, [r3, r1]
   246c0:	e7f4      	b.n	246ac <free_list_add+0x38>

000246c2 <free_list_remove_bidx>:
{
   246c2:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   246c4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   246c8:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   246ca:	4299      	cmp	r1, r3
   246cc:	f102 0104 	add.w	r1, r2, #4
   246d0:	d10a      	bne.n	246e8 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   246d2:	2301      	movs	r3, #1
   246d4:	fa03 f202 	lsl.w	r2, r3, r2
   246d8:	68c3      	ldr	r3, [r0, #12]
   246da:	ea23 0302 	bic.w	r3, r3, r2
   246de:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   246e0:	2300      	movs	r3, #0
   246e2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   246e6:	bd10      	pop	{r4, pc}
   246e8:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   246ea:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   246ee:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   246f2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   246f6:	80cb      	strh	r3, [r1, #6]
   246f8:	8082      	strh	r2, [r0, #4]
}
   246fa:	e7f4      	b.n	246e6 <free_list_remove_bidx+0x24>

000246fc <free_list_remove>:
{
   246fc:	b508      	push	{r3, lr}
   246fe:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   24700:	f7ff ffb3 	bl	2466a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   24704:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   24708:	4618      	mov	r0, r3
}
   2470a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2470e:	f1c2 021f 	rsb	r2, r2, #31
   24712:	f7ff bfd6 	b.w	246c2 <free_list_remove_bidx>

00024716 <alloc_chunk>:
{
   24716:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2471a:	fab1 f581 	clz	r5, r1
   2471e:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   24722:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   24726:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2472a:	4603      	mov	r3, r0
   2472c:	460e      	mov	r6, r1
	if (b->next) {
   2472e:	b1c2      	cbz	r2, 24762 <alloc_chunk+0x4c>
   24730:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   24732:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   24736:	4618      	mov	r0, r3
   24738:	4621      	mov	r1, r4
   2473a:	f7ff ff96 	bl	2466a <chunk_size>
   2473e:	42b0      	cmp	r0, r6
   24740:	d306      	bcc.n	24750 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   24742:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   24744:	4618      	mov	r0, r3
   24746:	f7ff ffbc 	bl	246c2 <free_list_remove_bidx>
}
   2474a:	4620      	mov	r0, r4
   2474c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   24750:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   24754:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   24756:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   24758:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2475c:	d001      	beq.n	24762 <alloc_chunk+0x4c>
   2475e:	4282      	cmp	r2, r0
   24760:	d1e7      	bne.n	24732 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   24762:	f04f 34ff 	mov.w	r4, #4294967295
   24766:	f1c5 0220 	rsb	r2, r5, #32
   2476a:	4094      	lsls	r4, r2
   2476c:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2476e:	4014      	ands	r4, r2
   24770:	d0eb      	beq.n	2474a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   24772:	fa94 f2a4 	rbit	r2, r4
   24776:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2477a:	1d11      	adds	r1, r2, #4
   2477c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   24780:	4621      	mov	r1, r4
   24782:	e7df      	b.n	24744 <alloc_chunk+0x2e>

00024784 <merge_chunks>:
{
   24784:	b538      	push	{r3, r4, r5, lr}
   24786:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24788:	f7ff ff6f 	bl	2466a <chunk_size>
{
   2478c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2478e:	4604      	mov	r4, r0
   24790:	4611      	mov	r1, r2
   24792:	4618      	mov	r0, r3
   24794:	f7ff ff69 	bl	2466a <chunk_size>
   24798:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2479a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2479c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   247a0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   247a2:	4618      	mov	r0, r3
   247a4:	f7ff ff61 	bl	2466a <chunk_size>
	void *cmem = &buf[c];
   247a8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   247aa:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   247ae:	bd38      	pop	{r3, r4, r5, pc}

000247b0 <split_chunks>:
{
   247b0:	b538      	push	{r3, r4, r5, lr}
   247b2:	460c      	mov	r4, r1
   247b4:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   247b6:	f7ff ff58 	bl	2466a <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   247ba:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   247bc:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   247be:	4405      	add	r5, r0
   247c0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   247c4:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   247c6:	8060      	strh	r0, [r4, #2]
   247c8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   247cc:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   247ce:	8044      	strh	r4, [r0, #2]
   247d0:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   247d4:	4618      	mov	r0, r3
   247d6:	4611      	mov	r1, r2
   247d8:	f7ff ff47 	bl	2466a <chunk_size>
	void *cmem = &buf[c];
   247dc:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   247de:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   247e2:	bd38      	pop	{r3, r4, r5, pc}

000247e4 <free_chunk>:
{
   247e4:	b538      	push	{r3, r4, r5, lr}
   247e6:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   247e8:	f7ff ff3f 	bl	2466a <chunk_size>
   247ec:	460c      	mov	r4, r1
   247ee:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   247f0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   247f4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   247f6:	07da      	lsls	r2, r3, #31
   247f8:	d40a      	bmi.n	24810 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   247fa:	4628      	mov	r0, r5
   247fc:	f7ff ff7e 	bl	246fc <free_list_remove>
	return c + chunk_size(h, c);
   24800:	4621      	mov	r1, r4
   24802:	4628      	mov	r0, r5
   24804:	f7ff ff31 	bl	2466a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   24808:	1822      	adds	r2, r4, r0
   2480a:	4628      	mov	r0, r5
   2480c:	f7ff ffba 	bl	24784 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   24810:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   24814:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   24816:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2481a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2481c:	07db      	lsls	r3, r3, #31
   2481e:	d40c      	bmi.n	2483a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   24820:	4628      	mov	r0, r5
   24822:	f7ff ff6b 	bl	246fc <free_list_remove>
		return ((uint16_t *)cmem)[f];
   24826:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2482a:	4622      	mov	r2, r4
   2482c:	1a61      	subs	r1, r4, r1
   2482e:	4628      	mov	r0, r5
   24830:	f7ff ffa8 	bl	24784 <merge_chunks>
   24834:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   24838:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2483a:	4621      	mov	r1, r4
   2483c:	4628      	mov	r0, r5
}
   2483e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   24842:	f7ff bf17 	b.w	24674 <free_list_add>

00024846 <sys_heap_alloc>:
{
   24846:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   24848:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2484a:	b909      	cbnz	r1, 24850 <sys_heap_alloc+0xa>
		return NULL;
   2484c:	2000      	movs	r0, #0
}
   2484e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   24850:	68ab      	ldr	r3, [r5, #8]
   24852:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   24856:	d9f9      	bls.n	2484c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24858:	310b      	adds	r1, #11
   2485a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2485c:	4621      	mov	r1, r4
   2485e:	4628      	mov	r0, r5
   24860:	f7ff ff59 	bl	24716 <alloc_chunk>
	if (c == 0U) {
   24864:	4606      	mov	r6, r0
   24866:	2800      	cmp	r0, #0
   24868:	d0f0      	beq.n	2484c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2486a:	4601      	mov	r1, r0
   2486c:	4628      	mov	r0, r5
   2486e:	f7ff fefc 	bl	2466a <chunk_size>
   24872:	42a0      	cmp	r0, r4
   24874:	d907      	bls.n	24886 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   24876:	4628      	mov	r0, r5
   24878:	1932      	adds	r2, r6, r4
   2487a:	f7ff ff99 	bl	247b0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2487e:	4611      	mov	r1, r2
   24880:	4628      	mov	r0, r5
   24882:	f7ff fef7 	bl	24674 <free_list_add>
	void *cmem = &buf[c];
   24886:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2488a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2488c:	8853      	ldrh	r3, [r2, #2]
   2488e:	3004      	adds	r0, #4
   24890:	f043 0301 	orr.w	r3, r3, #1
   24894:	8053      	strh	r3, [r2, #2]
	return mem;
   24896:	e7da      	b.n	2484e <sys_heap_alloc+0x8>

00024898 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24898:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2489a:	f013 0307 	ands.w	r3, r3, #7
   2489e:	d105      	bne.n	248ac <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   248a0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   248a2:	2b00      	cmp	r3, #0
   248a4:	bf0c      	ite	eq
   248a6:	2000      	moveq	r0, #0
   248a8:	2003      	movne	r0, #3
   248aa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   248ac:	2b02      	cmp	r3, #2
   248ae:	d105      	bne.n	248bc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   248b0:	8bc0      	ldrh	r0, [r0, #30]
   248b2:	fab0 f080 	clz	r0, r0
   248b6:	0940      	lsrs	r0, r0, #5
   248b8:	0080      	lsls	r0, r0, #2
   248ba:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   248bc:	2b01      	cmp	r3, #1
   248be:	d105      	bne.n	248cc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   248c0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   248c2:	2b00      	cmp	r3, #0
   248c4:	bf0c      	ite	eq
   248c6:	2000      	moveq	r0, #0
   248c8:	2005      	movne	r0, #5
   248ca:	4770      	bx	lr
	int evt = EVT_NOP;
   248cc:	2000      	movs	r0, #0
}
   248ce:	4770      	bx	lr

000248d0 <validate_args>:
{
   248d0:	b510      	push	{r4, lr}
   248d2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   248d4:	b100      	cbz	r0, 248d8 <validate_args+0x8>
   248d6:	b911      	cbnz	r1, 248de <validate_args+0xe>
		return -EINVAL;
   248d8:	f06f 0015 	mvn.w	r0, #21
}
   248dc:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   248de:	1d08      	adds	r0, r1, #4
   248e0:	f000 f82f 	bl	24942 <sys_notify_validate>
	if ((rv == 0)
   248e4:	2800      	cmp	r0, #0
   248e6:	d1f9      	bne.n	248dc <validate_args+0xc>
	    && ((cli->notify.flags
   248e8:	68a3      	ldr	r3, [r4, #8]
   248ea:	2b03      	cmp	r3, #3
   248ec:	d9f6      	bls.n	248dc <validate_args+0xc>
   248ee:	e7f3      	b.n	248d8 <validate_args+0x8>

000248f0 <notify_one>:
{
   248f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   248f4:	460d      	mov	r5, r1
   248f6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   248f8:	4619      	mov	r1, r3
   248fa:	1d28      	adds	r0, r5, #4
{
   248fc:	4690      	mov	r8, r2
   248fe:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24900:	f7e8 fc16 	bl	d130 <sys_notify_finalize>
	if (cb) {
   24904:	4604      	mov	r4, r0
   24906:	b138      	cbz	r0, 24918 <notify_one+0x28>
		cb(mgr, cli, state, res);
   24908:	4633      	mov	r3, r6
   2490a:	4642      	mov	r2, r8
   2490c:	4629      	mov	r1, r5
   2490e:	4638      	mov	r0, r7
   24910:	46a4      	mov	ip, r4
}
   24912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   24916:	4760      	bx	ip
}
   24918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002491c <onoff_manager_init>:
{
   2491c:	b538      	push	{r3, r4, r5, lr}
   2491e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   24920:	4605      	mov	r5, r0
   24922:	b158      	cbz	r0, 2493c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   24924:	b151      	cbz	r1, 2493c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   24926:	680b      	ldr	r3, [r1, #0]
   24928:	b143      	cbz	r3, 2493c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2492a:	684b      	ldr	r3, [r1, #4]
   2492c:	b133      	cbz	r3, 2493c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2492e:	2220      	movs	r2, #32
   24930:	2100      	movs	r1, #0
   24932:	f004 fdd8 	bl	294e6 <memset>
	return 0;
   24936:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24938:	612c      	str	r4, [r5, #16]
}
   2493a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2493c:	f06f 0015 	mvn.w	r0, #21
   24940:	e7fb      	b.n	2493a <onoff_manager_init+0x1e>

00024942 <sys_notify_validate>:
	if (notify == NULL) {
   24942:	4603      	mov	r3, r0
   24944:	b140      	cbz	r0, 24958 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24946:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24948:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2494c:	2a02      	cmp	r2, #2
   2494e:	d006      	beq.n	2495e <sys_notify_validate+0x1c>
   24950:	2a03      	cmp	r2, #3
   24952:	d004      	beq.n	2495e <sys_notify_validate+0x1c>
   24954:	2a01      	cmp	r2, #1
   24956:	d005      	beq.n	24964 <sys_notify_validate+0x22>
   24958:	f06f 0015 	mvn.w	r0, #21
}
   2495c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2495e:	681a      	ldr	r2, [r3, #0]
   24960:	2a00      	cmp	r2, #0
   24962:	d0f9      	beq.n	24958 <sys_notify_validate+0x16>
		notify->result = 0;
   24964:	2000      	movs	r0, #0
   24966:	6098      	str	r0, [r3, #8]
   24968:	4770      	bx	lr

0002496a <outs>:
{
   2496a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2496e:	4607      	mov	r7, r0
   24970:	4688      	mov	r8, r1
   24972:	4615      	mov	r5, r2
   24974:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24976:	4614      	mov	r4, r2
   24978:	42b4      	cmp	r4, r6
   2497a:	d305      	bcc.n	24988 <outs+0x1e>
   2497c:	b10e      	cbz	r6, 24982 <outs+0x18>
	return (int)count;
   2497e:	1b60      	subs	r0, r4, r5
   24980:	e008      	b.n	24994 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24982:	7823      	ldrb	r3, [r4, #0]
   24984:	2b00      	cmp	r3, #0
   24986:	d0fa      	beq.n	2497e <outs+0x14>
		int rc = out((int)*sp++, ctx);
   24988:	4641      	mov	r1, r8
   2498a:	f814 0b01 	ldrb.w	r0, [r4], #1
   2498e:	47b8      	blx	r7
		if (rc < 0) {
   24990:	2800      	cmp	r0, #0
   24992:	daf1      	bge.n	24978 <outs+0xe>
}
   24994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024998 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   24998:	4040      	eors	r0, r0
   2499a:	f380 8811 	msr	BASEPRI, r0
   2499e:	f04f 0004 	mov.w	r0, #4
   249a2:	df02      	svc	2
}
   249a4:	4770      	bx	lr

000249a6 <assert_print>:

void assert_print(const char *fmt, ...)
{
   249a6:	b40f      	push	{r0, r1, r2, r3}
   249a8:	b507      	push	{r0, r1, r2, lr}
   249aa:	a904      	add	r1, sp, #16
   249ac:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   249b0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   249b2:	f7e7 ffa9 	bl	c908 <vprintk>

	va_end(ap);
}
   249b6:	b003      	add	sp, #12
   249b8:	f85d eb04 	ldr.w	lr, [sp], #4
   249bc:	b004      	add	sp, #16
   249be:	4770      	bx	lr

000249c0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 40);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   249c0:	4770      	bx	lr

000249c2 <nordicsemi_nrf53_init>:
{
   249c2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   249c4:	f04f 0320 	mov.w	r3, #32
   249c8:	f3ef 8511 	mrs	r5, BASEPRI
   249cc:	f383 8812 	msr	BASEPRI_MAX, r3
   249d0:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   249d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   249d8:	2401      	movs	r4, #1
   249da:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   249dc:	4621      	mov	r1, r4
   249de:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   249e2:	2021      	movs	r0, #33	; 0x21
   249e4:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   249e8:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   249ec:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   249f0:	f7e9 f974 	bl	dcdc <soc_secure_gpio_pin_mcu_select>
   249f4:	4621      	mov	r1, r4
   249f6:	2020      	movs	r0, #32
   249f8:	f7e9 f970 	bl	dcdc <soc_secure_gpio_pin_mcu_select>
   249fc:	4621      	mov	r1, r4
   249fe:	200b      	movs	r0, #11
   24a00:	f7e9 f96c 	bl	dcdc <soc_secure_gpio_pin_mcu_select>
   24a04:	4621      	mov	r1, r4
   24a06:	200a      	movs	r0, #10
   24a08:	f7e9 f968 	bl	dcdc <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   24a0c:	f385 8811 	msr	BASEPRI, r5
   24a10:	f3bf 8f6f 	isb	sy
}
   24a14:	2000      	movs	r0, #0
   24a16:	bd38      	pop	{r3, r4, r5, pc}

00024a18 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   24a18:	2806      	cmp	r0, #6
   24a1a:	d108      	bne.n	24a2e <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   24a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   24a20:	2201      	movs	r2, #1
   24a22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24a26:	f3bf 8f4f 	dsb	sy
        __WFE();
   24a2a:	bf20      	wfe
    while (true)
   24a2c:	e7fd      	b.n	24a2a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   24a2e:	4770      	bx	lr

00024a30 <pm_state_exit_post_ops>:
   24a30:	2300      	movs	r3, #0
   24a32:	f383 8811 	msr	BASEPRI, r3
   24a36:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24a3a:	4770      	bx	lr

00024a3c <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   24a3c:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   24a3e:	ab01      	add	r3, sp, #4
   24a40:	f003 fce2 	bl	28408 <tfm_platform_mem_read>

	switch (status) {
   24a44:	2802      	cmp	r0, #2
   24a46:	d00a      	beq.n	24a5e <soc_secure_mem_read+0x22>
   24a48:	2803      	cmp	r0, #3
   24a4a:	d00b      	beq.n	24a64 <soc_secure_mem_read+0x28>
   24a4c:	b968      	cbnz	r0, 24a6a <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   24a4e:	9801      	ldr	r0, [sp, #4]
   24a50:	3800      	subs	r0, #0
   24a52:	bf18      	it	ne
   24a54:	2001      	movne	r0, #1
   24a56:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   24a58:	b003      	add	sp, #12
   24a5a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   24a5e:	f06f 0015 	mvn.w	r0, #21
   24a62:	e7f9      	b.n	24a58 <soc_secure_mem_read+0x1c>
	switch (status) {
   24a64:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24a68:	e7f6      	b.n	24a58 <soc_secure_mem_read+0x1c>
		return -EPERM;
   24a6a:	f04f 30ff 	mov.w	r0, #4294967295
   24a6e:	e7f3      	b.n	24a58 <soc_secure_mem_read+0x1c>

00024a70 <dummy_timestamp>:
}
   24a70:	2000      	movs	r0, #0
   24a72:	4770      	bx	lr

00024a74 <default_get_timestamp>:
   24a74:	f003 bbab 	b.w	281ce <sys_clock_cycle_get_32>

00024a78 <atomic_inc>:
{
   24a78:	4603      	mov	r3, r0
}
   24a7a:	e8d3 0fef 	ldaex	r0, [r3]
   24a7e:	1c42      	adds	r2, r0, #1
   24a80:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24a84:	2900      	cmp	r1, #0
   24a86:	d1f8      	bne.n	24a7a <atomic_inc+0x2>
   24a88:	4770      	bx	lr

00024a8a <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   24a8a:	2100      	movs	r1, #0
{
   24a8c:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   24a8e:	4608      	mov	r0, r1
   24a90:	f7e9 f954 	bl	dd3c <z_log_init.isra.0>
	}

	return 0;
}
   24a94:	2000      	movs	r0, #0
   24a96:	bd08      	pop	{r3, pc}

00024a98 <z_log_notify_backend_enabled>:
}
   24a98:	4770      	bx	lr

00024a9a <z_log_get_tag>:
}
   24a9a:	2000      	movs	r0, #0
   24a9c:	4770      	bx	lr

00024a9e <z_log_msg_finalize>:
{
   24a9e:	b570      	push	{r4, r5, r6, lr}
   24aa0:	460e      	mov	r6, r1
   24aa2:	4615      	mov	r5, r2
   24aa4:	4619      	mov	r1, r3
	if (!msg) {
   24aa6:	4604      	mov	r4, r0
   24aa8:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   24aac:	b918      	cbnz	r0, 24ab6 <z_log_msg_finalize+0x18>
}
   24aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   24ab2:	f7e9 ba31 	b.w	df18 <z_log_dropped>
	if (data) {
   24ab6:	b12b      	cbz	r3, 24ac4 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   24ab8:	3010      	adds	r0, #16
   24aba:	f3c5 2349 	ubfx	r3, r5, #9, #10
   24abe:	4418      	add	r0, r3
   24ac0:	f004 fcd7 	bl	29472 <memcpy>
	msg->hdr.source = source;
   24ac4:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   24ac8:	4620      	mov	r0, r4
}
   24aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   24ace:	f7e9 ba37 	b.w	df40 <z_log_msg_commit>

00024ad2 <out_func>:
{
   24ad2:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   24ad4:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   24ad8:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   24adc:	2101      	movs	r1, #1
   24ade:	6852      	ldr	r2, [r2, #4]
   24ae0:	f10d 0007 	add.w	r0, sp, #7
   24ae4:	4798      	blx	r3
}
   24ae6:	2000      	movs	r0, #0
   24ae8:	b003      	add	sp, #12
   24aea:	f85d fb04 	ldr.w	pc, [sp], #4

00024aee <cr_out_func>:
	if (c == '\n') {
   24aee:	280a      	cmp	r0, #10
{
   24af0:	b538      	push	{r3, r4, r5, lr}
   24af2:	4604      	mov	r4, r0
   24af4:	460d      	mov	r5, r1
	if (c == '\n') {
   24af6:	d102      	bne.n	24afe <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   24af8:	200d      	movs	r0, #13
   24afa:	f7ff ffea 	bl	24ad2 <out_func>
	out_func(c, ctx);
   24afe:	4629      	mov	r1, r5
   24b00:	4620      	mov	r0, r4
   24b02:	f7ff ffe6 	bl	24ad2 <out_func>
}
   24b06:	2000      	movs	r0, #0
   24b08:	bd38      	pop	{r3, r4, r5, pc}

00024b0a <buffer_write>:
{
   24b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b0c:	4606      	mov	r6, r0
   24b0e:	460d      	mov	r5, r1
   24b10:	4614      	mov	r4, r2
   24b12:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   24b14:	4621      	mov	r1, r4
   24b16:	4628      	mov	r0, r5
   24b18:	463a      	mov	r2, r7
   24b1a:	47b0      	blx	r6
	} while (len != 0);
   24b1c:	1a24      	subs	r4, r4, r0
		buf += processed;
   24b1e:	4405      	add	r5, r0
	} while (len != 0);
   24b20:	d1f8      	bne.n	24b14 <buffer_write+0xa>
}
   24b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024b24 <cbvprintf>:
{
   24b24:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   24b26:	2400      	movs	r4, #0
   24b28:	9400      	str	r4, [sp, #0]
   24b2a:	f7e8 fba5 	bl	d278 <z_cbvprintf_impl>
}
   24b2e:	b002      	add	sp, #8
   24b30:	bd10      	pop	{r4, pc}

00024b32 <log_output_flush>:
{
   24b32:	b510      	push	{r4, lr}
		     output->control_block->offset,
   24b34:	6842      	ldr	r2, [r0, #4]
{
   24b36:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   24b38:	e9d2 2300 	ldrd	r2, r3, [r2]
   24b3c:	6881      	ldr	r1, [r0, #8]
   24b3e:	6800      	ldr	r0, [r0, #0]
   24b40:	f7ff ffe3 	bl	24b0a <buffer_write>
	output->control_block->offset = 0;
   24b44:	2200      	movs	r2, #0
   24b46:	6863      	ldr	r3, [r4, #4]
   24b48:	601a      	str	r2, [r3, #0]
}
   24b4a:	bd10      	pop	{r4, pc}

00024b4c <nvs_flash_rd>:
{
   24b4c:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   24b4e:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24b50:	8984      	ldrh	r4, [r0, #12]
   24b52:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   24b54:	fa16 f181 	uxtah	r1, r6, r1
   24b58:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   24b5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   24b5e:	6884      	ldr	r4, [r0, #8]
   24b60:	6824      	ldr	r4, [r4, #0]
   24b62:	46a4      	mov	ip, r4
}
   24b64:	bc70      	pop	{r4, r5, r6}
   24b66:	4760      	bx	ip

00024b68 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   24b68:	680b      	ldr	r3, [r1, #0]
   24b6a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   24b6e:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   24b70:	89c0      	ldrh	r0, [r0, #14]
   24b72:	0c1a      	lsrs	r2, r3, #16
   24b74:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   24b78:	bf04      	itt	eq
   24b7a:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   24b7e:	600b      	streq	r3, [r1, #0]
}
   24b80:	4770      	bx	lr

00024b82 <nvs_flash_block_cmp>:
{
   24b82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24b86:	4681      	mov	r9, r0
   24b88:	460e      	mov	r6, r1
   24b8a:	4617      	mov	r7, r2
   24b8c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24b8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   24b90:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24b92:	681d      	ldr	r5, [r3, #0]
   24b94:	426d      	negs	r5, r5
	block_size =
   24b96:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   24b9a:	b91c      	cbnz	r4, 24ba4 <nvs_flash_block_cmp+0x22>
	return 0;
   24b9c:	4620      	mov	r0, r4
}
   24b9e:	b009      	add	sp, #36	; 0x24
   24ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   24ba4:	42ac      	cmp	r4, r5
   24ba6:	46a0      	mov	r8, r4
   24ba8:	bf28      	it	cs
   24baa:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   24bac:	466a      	mov	r2, sp
   24bae:	4643      	mov	r3, r8
   24bb0:	4631      	mov	r1, r6
   24bb2:	4648      	mov	r0, r9
   24bb4:	f7ff ffca 	bl	24b4c <nvs_flash_rd>
		if (rc) {
   24bb8:	2800      	cmp	r0, #0
   24bba:	d1f0      	bne.n	24b9e <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   24bbc:	4642      	mov	r2, r8
   24bbe:	4669      	mov	r1, sp
   24bc0:	4638      	mov	r0, r7
   24bc2:	f004 fc46 	bl	29452 <memcmp>
		if (rc) {
   24bc6:	b920      	cbnz	r0, 24bd2 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   24bc8:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   24bcc:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   24bce:	4447      	add	r7, r8
   24bd0:	e7e3      	b.n	24b9a <nvs_flash_block_cmp+0x18>
			return 1;
   24bd2:	2001      	movs	r0, #1
   24bd4:	e7e3      	b.n	24b9e <nvs_flash_block_cmp+0x1c>

00024bd6 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24bd6:	4601      	mov	r1, r0
{
   24bd8:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24bda:	2207      	movs	r2, #7
{
   24bdc:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24bde:	20ff      	movs	r0, #255	; 0xff
   24be0:	f7e8 fad2 	bl	d188 <crc8_ccitt>
	entry->crc8 = crc8;
   24be4:	71e0      	strb	r0, [r4, #7]
}
   24be6:	bd10      	pop	{r4, pc}

00024be8 <nvs_flash_cmp_const>:
{
   24be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24bec:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24bee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   24bf0:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24bf2:	681d      	ldr	r5, [r3, #0]
{
   24bf4:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24bf6:	426d      	negs	r5, r5
	block_size =
   24bf8:	f005 0520 	and.w	r5, r5, #32
{
   24bfc:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   24bfe:	4668      	mov	r0, sp
{
   24c00:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   24c02:	462a      	mov	r2, r5
   24c04:	f004 fc6f 	bl	294e6 <memset>
	while (len) {
   24c08:	b91c      	cbnz	r4, 24c12 <nvs_flash_cmp_const+0x2a>
	return 0;
   24c0a:	4620      	mov	r0, r4
}
   24c0c:	b008      	add	sp, #32
   24c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   24c12:	42ac      	cmp	r4, r5
   24c14:	46a0      	mov	r8, r4
   24c16:	bf28      	it	cs
   24c18:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   24c1a:	466a      	mov	r2, sp
   24c1c:	4643      	mov	r3, r8
   24c1e:	4631      	mov	r1, r6
   24c20:	4638      	mov	r0, r7
   24c22:	f7ff ffae 	bl	24b82 <nvs_flash_block_cmp>
		if (rc) {
   24c26:	2800      	cmp	r0, #0
   24c28:	d1f0      	bne.n	24c0c <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   24c2a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   24c2e:	4446      	add	r6, r8
   24c30:	e7ea      	b.n	24c08 <nvs_flash_cmp_const+0x20>

00024c32 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   24c32:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   24c34:	ab0b      	add	r3, sp, #44	; 0x2c
   24c36:	9305      	str	r3, [sp, #20]
   24c38:	9303      	str	r3, [sp, #12]
   24c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24c3c:	9302      	str	r3, [sp, #8]
   24c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24c40:	9301      	str	r3, [sp, #4]
   24c42:	2300      	movs	r3, #0
   24c44:	4618      	mov	r0, r3
   24c46:	9300      	str	r3, [sp, #0]
   24c48:	f7e9 f9e2 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   24c4c:	b007      	add	sp, #28
   24c4e:	f85d fb04 	ldr.w	pc, [sp], #4

00024c52 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   24c52:	7803      	ldrb	r3, [r0, #0]
   24c54:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   24c56:	bf81      	itttt	hi
   24c58:	f101 31ff 	addhi.w	r1, r1, #4294967295
   24c5c:	18c9      	addhi	r1, r1, r3
   24c5e:	425b      	neghi	r3, r3
   24c60:	4019      	andhi	r1, r3
}
   24c62:	4608      	mov	r0, r1
   24c64:	4770      	bx	lr

00024c66 <nvs_ate_valid>:
{
   24c66:	b570      	push	{r4, r5, r6, lr}
   24c68:	460c      	mov	r4, r1
   24c6a:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24c6c:	2108      	movs	r1, #8
   24c6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   24c70:	f7ff ffef 	bl	24c52 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24c74:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24c76:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24c78:	4621      	mov	r1, r4
   24c7a:	20ff      	movs	r0, #255	; 0xff
   24c7c:	f7e8 fa84 	bl	d188 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   24c80:	79e3      	ldrb	r3, [r4, #7]
   24c82:	4283      	cmp	r3, r0
   24c84:	d107      	bne.n	24c96 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   24c86:	89aa      	ldrh	r2, [r5, #12]
   24c88:	8863      	ldrh	r3, [r4, #2]
   24c8a:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   24c8c:	4283      	cmp	r3, r0
   24c8e:	bf2c      	ite	cs
   24c90:	2000      	movcs	r0, #0
   24c92:	2001      	movcc	r0, #1
}
   24c94:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   24c96:	2000      	movs	r0, #0
   24c98:	e7fc      	b.n	24c94 <nvs_ate_valid+0x2e>

00024c9a <nvs_close_ate_valid>:
{
   24c9a:	b538      	push	{r3, r4, r5, lr}
   24c9c:	4605      	mov	r5, r0
   24c9e:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   24ca0:	f7ff ffe1 	bl	24c66 <nvs_ate_valid>
   24ca4:	b1a0      	cbz	r0, 24cd0 <nvs_close_ate_valid+0x36>
   24ca6:	88a0      	ldrh	r0, [r4, #4]
   24ca8:	b998      	cbnz	r0, 24cd2 <nvs_close_ate_valid+0x38>
   24caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24cae:	8822      	ldrh	r2, [r4, #0]
   24cb0:	429a      	cmp	r2, r3
   24cb2:	d10d      	bne.n	24cd0 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24cb4:	2108      	movs	r1, #8
   24cb6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   24cb8:	f7ff ffcb 	bl	24c52 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   24cbc:	8862      	ldrh	r2, [r4, #2]
   24cbe:	89ab      	ldrh	r3, [r5, #12]
   24cc0:	1a9b      	subs	r3, r3, r2
   24cc2:	fbb3 f2f0 	udiv	r2, r3, r0
   24cc6:	fb02 3010 	mls	r0, r2, r0, r3
   24cca:	fab0 f080 	clz	r0, r0
   24cce:	0940      	lsrs	r0, r0, #5
}
   24cd0:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   24cd2:	2000      	movs	r0, #0
   24cd4:	e7fc      	b.n	24cd0 <nvs_close_ate_valid+0x36>

00024cd6 <nvs_prev_ate>:
{
   24cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24cd8:	4604      	mov	r4, r0
   24cda:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24cdc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   24cde:	2108      	movs	r1, #8
   24ce0:	f7ff ffb7 	bl	24c52 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24ce4:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24ce6:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24ce8:	6829      	ldr	r1, [r5, #0]
   24cea:	4620      	mov	r0, r4
   24cec:	f7ff ff2e 	bl	24b4c <nvs_flash_rd>
	if (rc) {
   24cf0:	4606      	mov	r6, r0
   24cf2:	2800      	cmp	r0, #0
   24cf4:	d136      	bne.n	24d64 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   24cf6:	682b      	ldr	r3, [r5, #0]
   24cf8:	443b      	add	r3, r7
   24cfa:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   24cfc:	89a2      	ldrh	r2, [r4, #12]
   24cfe:	b299      	uxth	r1, r3
   24d00:	1bd2      	subs	r2, r2, r7
   24d02:	4291      	cmp	r1, r2
   24d04:	d12e      	bne.n	24d64 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   24d06:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   24d08:	bf09      	itett	eq
   24d0a:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   24d0c:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   24d10:	f102 32ff 	addeq.w	r2, r2, #4294967295
   24d14:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24d18:	4620      	mov	r0, r4
   24d1a:	2308      	movs	r3, #8
   24d1c:	466a      	mov	r2, sp
   24d1e:	6029      	str	r1, [r5, #0]
   24d20:	f7ff ff14 	bl	24b4c <nvs_flash_rd>
	if (rc) {
   24d24:	b9e8      	cbnz	r0, 24d62 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   24d26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24d28:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   24d2a:	466b      	mov	r3, sp
		if (data8[i] != value) {
   24d2c:	f813 1b01 	ldrb.w	r1, [r3], #1
   24d30:	428a      	cmp	r2, r1
   24d32:	d10c      	bne.n	24d4e <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   24d34:	3001      	adds	r0, #1
   24d36:	2808      	cmp	r0, #8
   24d38:	d1f8      	bne.n	24d2c <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   24d3a:	6863      	ldr	r3, [r4, #4]
   24d3c:	e005      	b.n	24d4a <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   24d3e:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   24d40:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   24d44:	0c1b      	lsrs	r3, r3, #16
   24d46:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   24d48:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   24d4a:	602b      	str	r3, [r5, #0]
		return 0;
   24d4c:	e00a      	b.n	24d64 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   24d4e:	4669      	mov	r1, sp
   24d50:	4620      	mov	r0, r4
   24d52:	f7ff ffa2 	bl	24c9a <nvs_close_ate_valid>
   24d56:	2800      	cmp	r0, #0
   24d58:	d1f1      	bne.n	24d3e <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   24d5a:	4629      	mov	r1, r5
   24d5c:	4620      	mov	r0, r4
   24d5e:	f7e9 fc23 	bl	e5a8 <nvs_recover_last_ate>
   24d62:	4606      	mov	r6, r0
}
   24d64:	4630      	mov	r0, r6
   24d66:	b003      	add	sp, #12
   24d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024d6a <nvs_flash_al_wrt>:
{
   24d6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24d6e:	4607      	mov	r7, r0
   24d70:	4690      	mov	r8, r2
	if (!len) {
   24d72:	461e      	mov	r6, r3
{
   24d74:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   24d76:	b91b      	cbnz	r3, 24d80 <nvs_flash_al_wrt+0x16>
		return 0;
   24d78:	2000      	movs	r0, #0
}
   24d7a:	b009      	add	sp, #36	; 0x24
   24d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   24d80:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24d82:	8983      	ldrh	r3, [r0, #12]
   24d84:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   24d86:	fa14 f181 	uxtah	r1, r4, r1
   24d8a:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   24d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   24d90:	681d      	ldr	r5, [r3, #0]
   24d92:	426d      	negs	r5, r5
	if (blen > 0) {
   24d94:	4035      	ands	r5, r6
   24d96:	d00c      	beq.n	24db2 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   24d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   24d9a:	6883      	ldr	r3, [r0, #8]
   24d9c:	4621      	mov	r1, r4
   24d9e:	f8d3 9004 	ldr.w	r9, [r3, #4]
   24da2:	462b      	mov	r3, r5
   24da4:	47c8      	blx	r9
		if (rc) {
   24da6:	2800      	cmp	r0, #0
   24da8:	d1e7      	bne.n	24d7a <nvs_flash_al_wrt+0x10>
	if (len) {
   24daa:	1b76      	subs	r6, r6, r5
   24dac:	d0e4      	beq.n	24d78 <nvs_flash_al_wrt+0xe>
		offset += blen;
   24dae:	442c      	add	r4, r5
		data8 += blen;
   24db0:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   24db2:	2320      	movs	r3, #32
   24db4:	4632      	mov	r2, r6
   24db6:	4641      	mov	r1, r8
   24db8:	4668      	mov	r0, sp
   24dba:	f004 fb67 	bl	2948c <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   24dbe:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   24dc0:	eb0d 0006 	add.w	r0, sp, r6
   24dc4:	682a      	ldr	r2, [r5, #0]
   24dc6:	7929      	ldrb	r1, [r5, #4]
   24dc8:	1b92      	subs	r2, r2, r6
   24dca:	f004 fb8c 	bl	294e6 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   24dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   24dd0:	682b      	ldr	r3, [r5, #0]
   24dd2:	6882      	ldr	r2, [r0, #8]
   24dd4:	4621      	mov	r1, r4
   24dd6:	6855      	ldr	r5, [r2, #4]
   24dd8:	466a      	mov	r2, sp
   24dda:	47a8      	blx	r5
	return rc;
   24ddc:	e7cd      	b.n	24d7a <nvs_flash_al_wrt+0x10>

00024dde <nvs_flash_ate_wrt>:
{
   24dde:	b510      	push	{r4, lr}
   24de0:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   24de2:	2308      	movs	r3, #8
   24de4:	6841      	ldr	r1, [r0, #4]
{
   24de6:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   24de8:	f7ff ffbf 	bl	24d6a <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   24dec:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   24dee:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   24df0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   24df2:	f7ff ff2e 	bl	24c52 <nvs_al_size.isra.0>
   24df6:	6863      	ldr	r3, [r4, #4]
   24df8:	1a1b      	subs	r3, r3, r0
   24dfa:	6063      	str	r3, [r4, #4]
}
   24dfc:	4610      	mov	r0, r2
   24dfe:	bd10      	pop	{r4, pc}

00024e00 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   24e00:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   24e02:	2400      	movs	r4, #0
   24e04:	9400      	str	r4, [sp, #0]
   24e06:	f7e9 ffd7 	bl	edb8 <nvs_read_hist>
	return rc;
}
   24e0a:	b002      	add	sp, #8
   24e0c:	bd10      	pop	{r4, pc}

00024e0e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   24e0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   24e10:	ab0b      	add	r3, sp, #44	; 0x2c
   24e12:	9305      	str	r3, [sp, #20]
   24e14:	9303      	str	r3, [sp, #12]
   24e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24e18:	2201      	movs	r2, #1
   24e1a:	9302      	str	r3, [sp, #8]
   24e1c:	2300      	movs	r3, #0
   24e1e:	4618      	mov	r0, r3
   24e20:	e9cd 3300 	strd	r3, r3, [sp]
   24e24:	f7e9 f8f4 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   24e28:	b007      	add	sp, #28
   24e2a:	f85d fb04 	ldr.w	pc, [sp], #4

00024e2e <get_tx_buffer_size>:
	return data->tx_buffer_size;
   24e2e:	6903      	ldr	r3, [r0, #16]
}
   24e30:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   24e34:	4770      	bx	lr

00024e36 <drop_tx_buffer>:
}
   24e36:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24e3a:	4770      	bx	lr

00024e3c <release_rx_buffer>:
{
   24e3c:	4608      	mov	r0, r1
   24e3e:	b508      	push	{r3, lr}
   24e40:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   24e42:	b118      	cbz	r0, 24e4c <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   24e44:	f003 feee 	bl	28c24 <rpmsg_release_rx_buffer>
	return 0;
   24e48:	2000      	movs	r0, #0
}
   24e4a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   24e4c:	f06f 0001 	mvn.w	r0, #1
   24e50:	e7fb      	b.n	24e4a <release_rx_buffer+0xe>

00024e52 <hold_rx_buffer>:
{
   24e52:	4608      	mov	r0, r1
   24e54:	b508      	push	{r3, lr}
   24e56:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   24e58:	b118      	cbz	r0, 24e62 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   24e5a:	f003 fedb 	bl	28c14 <rpmsg_hold_rx_buffer>
	return 0;
   24e5e:	2000      	movs	r0, #0
}
   24e60:	bd08      	pop	{r3, pc}
		return -ENOENT;
   24e62:	f06f 0001 	mvn.w	r0, #1
   24e66:	e7fb      	b.n	24e60 <hold_rx_buffer+0xe>

00024e68 <send_nocopy>:
{
   24e68:	b513      	push	{r0, r1, r4, lr}
   24e6a:	4604      	mov	r4, r0
   24e6c:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24e6e:	6921      	ldr	r1, [r4, #16]
   24e70:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   24e74:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   24e78:	2902      	cmp	r1, #2
   24e7a:	d109      	bne.n	24e90 <send_nocopy+0x28>
	if (len == 0) {
   24e7c:	b15b      	cbz	r3, 24e96 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   24e7e:	b168      	cbz	r0, 24e9c <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   24e80:	9300      	str	r3, [sp, #0]
   24e82:	4613      	mov	r3, r2
   24e84:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   24e88:	f7f9 fb14 	bl	1e4b4 <rpmsg_send_offchannel_nocopy>
}
   24e8c:	b002      	add	sp, #8
   24e8e:	bd10      	pop	{r4, pc}
		return -EBUSY;
   24e90:	f06f 000f 	mvn.w	r0, #15
   24e94:	e7fa      	b.n	24e8c <send_nocopy+0x24>
		return -EBADMSG;
   24e96:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   24e9a:	e7f7      	b.n	24e8c <send_nocopy+0x24>
		return -ENOENT;
   24e9c:	f06f 0001 	mvn.w	r0, #1
   24ea0:	e7f4      	b.n	24e8c <send_nocopy+0x24>

00024ea2 <get_tx_buffer>:
{
   24ea2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24ea6:	461c      	mov	r4, r3
   24ea8:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   24eac:	4616      	mov	r6, r2
   24eae:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   24eb0:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   24eb2:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   24eb4:	b339      	cbz	r1, 24f06 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   24eb6:	b34a      	cbz	r2, 24f0c <get_tx_buffer+0x6a>
   24eb8:	b344      	cbz	r4, 24f0c <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   24eba:	1c6a      	adds	r2, r5, #1
   24ebc:	f143 0300 	adc.w	r3, r3, #0
   24ec0:	2a02      	cmp	r2, #2
   24ec2:	f173 0300 	sbcs.w	r3, r3, #0
   24ec6:	d224      	bcs.n	24f12 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   24ec8:	6822      	ldr	r2, [r4, #0]
   24eca:	b142      	cbz	r2, 24ede <get_tx_buffer+0x3c>
   24ecc:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   24ed0:	429a      	cmp	r2, r3
   24ed2:	d904      	bls.n	24ede <get_tx_buffer+0x3c>
		return -ENOMEM;
   24ed4:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   24ed8:	6023      	str	r3, [r4, #0]
}
   24eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   24ede:	ea05 0908 	and.w	r9, r5, r8
   24ee2:	f109 0301 	add.w	r3, r9, #1
   24ee6:	425a      	negs	r2, r3
   24ee8:	415a      	adcs	r2, r3
   24eea:	4621      	mov	r1, r4
   24eec:	4638      	mov	r0, r7
   24eee:	f003 fea2 	bl	28c36 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   24ef2:	b988      	cbnz	r0, 24f18 <get_tx_buffer+0x76>
   24ef4:	f1b8 3fff 	cmp.w	r8, #4294967295
   24ef8:	bf08      	it	eq
   24efa:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   24efe:	d0f0      	beq.n	24ee2 <get_tx_buffer+0x40>
		return -ENOBUFS;
   24f00:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24f04:	e7e9      	b.n	24eda <get_tx_buffer+0x38>
		return -ENOENT;
   24f06:	f06f 0001 	mvn.w	r0, #1
   24f0a:	e7e6      	b.n	24eda <get_tx_buffer+0x38>
		return -EINVAL;
   24f0c:	f06f 0015 	mvn.w	r0, #21
   24f10:	e7e3      	b.n	24eda <get_tx_buffer+0x38>
		return -ENOTSUP;
   24f12:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24f16:	e7e0      	b.n	24eda <get_tx_buffer+0x38>
	(*r_data) = payload;
   24f18:	6030      	str	r0, [r6, #0]
	return 0;
   24f1a:	2000      	movs	r0, #0
   24f1c:	e7dd      	b.n	24eda <get_tx_buffer+0x38>

00024f1e <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   24f1e:	f003 becf 	b.w	28cc0 <rpmsg_destroy_ept>

00024f22 <get_ept_slot_with_name>:
{
   24f22:	b538      	push	{r3, r4, r5, lr}
   24f24:	460d      	mov	r5, r1
   24f26:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   24f28:	f100 0140 	add.w	r1, r0, #64	; 0x40
   24f2c:	4628      	mov	r0, r5
   24f2e:	f7e4 fa0d 	bl	934c <strcmp>
   24f32:	b130      	cbz	r0, 24f42 <get_ept_slot_with_name+0x20>
   24f34:	4628      	mov	r0, r5
   24f36:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   24f3a:	f7e4 fa07 	bl	934c <strcmp>
   24f3e:	b920      	cbnz	r0, 24f4a <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   24f40:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   24f42:	2370      	movs	r3, #112	; 0x70
   24f44:	fb03 4000 	mla	r0, r3, r0, r4
}
   24f48:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   24f4a:	2000      	movs	r0, #0
   24f4c:	e7fc      	b.n	24f48 <get_ept_slot_with_name+0x26>

00024f4e <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   24f4e:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   24f52:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   24f56:	f004 b93b 	b.w	291d0 <k_work_submit_to_queue>

00024f5a <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   24f5a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   24f5e:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   24f62:	3b00      	subs	r3, #0
   24f64:	bf18      	it	ne
   24f66:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   24f68:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   24f6c:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   24f70:	f003 be02 	b.w	28b78 <virtqueue_notification>

00024f74 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   24f74:	68cb      	ldr	r3, [r1, #12]
   24f76:	b133      	cbz	r3, 24f86 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   24f78:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   24f7a:	6883      	ldr	r3, [r0, #8]
   24f7c:	681b      	ldr	r3, [r3, #0]
   24f7e:	b113      	cbz	r3, 24f86 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   24f80:	2200      	movs	r2, #0
   24f82:	6909      	ldr	r1, [r1, #16]
   24f84:	4718      	bx	r3
}
   24f86:	4770      	bx	lr

00024f88 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   24f88:	f7fa bc16 	b.w	1f7b8 <z_impl_k_mutex_unlock>

00024f8c <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24f8c:	e8d0 3fef 	ldaex	r3, [r0]
   24f90:	e8c0 1fe2 	stlex	r2, r1, [r0]
   24f94:	2a00      	cmp	r2, #0
   24f96:	d1f9      	bne.n	24f8c <atomic_set.isra.0>
}
   24f98:	4770      	bx	lr

00024f9a <backend_init>:
{
   24f9a:	b510      	push	{r4, lr}
	data->role = conf->role;
   24f9c:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   24f9e:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   24fa0:	681b      	ldr	r3, [r3, #0]
   24fa2:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   24fa6:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   24faa:	f004 f879 	bl	290a0 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   24fae:	2100      	movs	r1, #0
   24fb0:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   24fb4:	f7ff ffea 	bl	24f8c <atomic_set.isra.0>
}
   24fb8:	4608      	mov	r0, r1
   24fba:	bd10      	pop	{r4, pc}

00024fbc <ns_bind_cb>:
{
   24fbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24fc0:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   24fc2:	460d      	mov	r5, r1
   24fc4:	b379      	cbz	r1, 25026 <ns_bind_cb+0x6a>
   24fc6:	780b      	ldrb	r3, [r1, #0]
   24fc8:	b36b      	cbz	r3, 25026 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   24fca:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   24fce:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   24fd2:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   24fd4:	f04f 32ff 	mov.w	r2, #4294967295
   24fd8:	f04f 33ff 	mov.w	r3, #4294967295
   24fdc:	4620      	mov	r0, r4
   24fde:	f7fa fb1b 	bl	1f618 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   24fe2:	462a      	mov	r2, r5
   24fe4:	4640      	mov	r0, r8
   24fe6:	a901      	add	r1, sp, #4
   24fe8:	f7ea f81a 	bl	f020 <get_ept>
	if (rpmsg_ept == NULL) {
   24fec:	9e01      	ldr	r6, [sp, #4]
   24fee:	b92e      	cbnz	r6, 24ffc <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   24ff0:	4620      	mov	r0, r4
}
   24ff2:	b002      	add	sp, #8
   24ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   24ff8:	f7ff bfc6 	b.w	24f88 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   24ffc:	b158      	cbz	r0, 25016 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   24ffe:	4620      	mov	r0, r4
   25000:	f7ff ffc2 	bl	24f88 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   25004:	463b      	mov	r3, r7
   25006:	462a      	mov	r2, r5
   25008:	4631      	mov	r1, r6
   2500a:	4640      	mov	r0, r8
}
   2500c:	b002      	add	sp, #8
   2500e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   25012:	f7e9 bfe3 	b.w	efdc <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   25016:	2220      	movs	r2, #32
   25018:	4629      	mov	r1, r5
   2501a:	f106 0040 	add.w	r0, r6, #64	; 0x40
   2501e:	f004 fba4 	bl	2976a <strncpy>
		rpmsg_ept->dest = dest;
   25022:	6637      	str	r7, [r6, #96]	; 0x60
   25024:	e7e4      	b.n	24ff0 <ns_bind_cb+0x34>
}
   25026:	b002      	add	sp, #8
   25028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002502c <ept_cb>:
{
   2502c:	b510      	push	{r4, lr}
   2502e:	4608      	mov	r0, r1
   25030:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   25032:	4611      	mov	r1, r2
   25034:	b952      	cbnz	r2, 2504c <ept_cb+0x20>
		if (!ept->bound) {
   25036:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   2503a:	b92a      	cbnz	r2, 25048 <ept_cb+0x1c>
			ept->bound = true;
   2503c:	2201      	movs	r2, #1
			bound_cb(ept);
   2503e:	4618      	mov	r0, r3
			ept->bound = true;
   25040:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   25044:	f7ea f93e 	bl	f2c4 <bound_cb>
}
   25048:	2000      	movs	r0, #0
   2504a:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   2504c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2504e:	6854      	ldr	r4, [r2, #4]
   25050:	2c00      	cmp	r4, #0
   25052:	d0f9      	beq.n	25048 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   25054:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   25056:	47a0      	blx	r4
   25058:	e7f6      	b.n	25048 <ept_cb+0x1c>

0002505a <deregister_ept>:
{
   2505a:	b510      	push	{r4, lr}
   2505c:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2505e:	6903      	ldr	r3, [r0, #16]
   25060:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   25064:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   25068:	2b02      	cmp	r3, #2
   2506a:	d10a      	bne.n	25082 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   2506c:	b161      	cbz	r1, 25088 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2506e:	4608      	mov	r0, r1
   25070:	f003 fe26 	bl	28cc0 <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   25074:	2270      	movs	r2, #112	; 0x70
   25076:	2100      	movs	r1, #0
   25078:	4620      	mov	r0, r4
   2507a:	f004 fa34 	bl	294e6 <memset>
	return 0;
   2507e:	2000      	movs	r0, #0
}
   25080:	bd10      	pop	{r4, pc}
		return -EBUSY;
   25082:	f06f 000f 	mvn.w	r0, #15
   25086:	e7fb      	b.n	25080 <deregister_ept+0x26>
		return -ENOENT;
   25088:	f06f 0001 	mvn.w	r0, #1
   2508c:	e7f8      	b.n	25080 <deregister_ept+0x26>

0002508e <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2508e:	f003 be17 	b.w	28cc0 <rpmsg_destroy_ept>

00025092 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   25092:	b538      	push	{r3, r4, r5, lr}
   25094:	460d      	mov	r5, r1
	if (!instance) {
   25096:	4604      	mov	r4, r0
   25098:	b160      	cbz	r0, 250b4 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   2509a:	30e0      	adds	r0, #224	; 0xe0
   2509c:	f003 ff91 	bl	28fc2 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   250a0:	b10d      	cbz	r5, 250a6 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   250a2:	2000      	movs	r0, #0
}
   250a4:	bd38      	pop	{r3, r4, r5, pc}
   250a6:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   250aa:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   250ae:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   250b2:	e7f6      	b.n	250a2 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   250b4:	f06f 0015 	mvn.w	r0, #21
   250b8:	e7f4      	b.n	250a4 <ipc_rpmsg_deinit+0x12>

000250ba <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   250ba:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   250bc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   250c0:	b113      	cbz	r3, 250c8 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   250c2:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   250c6:	4718      	bx	r3
}
   250c8:	4770      	bx	lr

000250ca <virtio_set_features>:
}
   250ca:	4770      	bx	lr

000250cc <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   250cc:	6983      	ldr	r3, [r0, #24]
   250ce:	b913      	cbnz	r3, 250d6 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   250d0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   250d4:	7019      	strb	r1, [r3, #0]
}
   250d6:	4770      	bx	lr

000250d8 <virtio_get_features>:
}
   250d8:	2001      	movs	r0, #1
   250da:	4770      	bx	lr

000250dc <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   250dc:	6983      	ldr	r3, [r0, #24]
   250de:	2b01      	cmp	r3, #1
   250e0:	d104      	bne.n	250ec <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   250e2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   250e6:	7818      	ldrb	r0, [r3, #0]
   250e8:	b2c0      	uxtb	r0, r0
   250ea:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   250ec:	2004      	movs	r0, #4
}
   250ee:	4770      	bx	lr

000250f0 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   250f0:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   250f2:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   250f4:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   250f6:	4620      	mov	r0, r4
   250f8:	f004 f9a6 	bl	29448 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   250fc:	4605      	mov	r5, r0
   250fe:	b118      	cbz	r0, 25108 <virtqueue_allocate+0x18>
   25100:	4622      	mov	r2, r4
   25102:	2100      	movs	r1, #0
   25104:	f004 f9ef 	bl	294e6 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   25108:	4628      	mov	r0, r5
   2510a:	bd38      	pop	{r3, r4, r5, pc}

0002510c <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   2510c:	b538      	push	{r3, r4, r5, lr}
   2510e:	4604      	mov	r4, r0
   25110:	2230      	movs	r2, #48	; 0x30
   25112:	2100      	movs	r1, #0
   25114:	f004 f9e7 	bl	294e6 <memset>
   25118:	2218      	movs	r2, #24
   2511a:	2100      	movs	r1, #0
   2511c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   25120:	f004 f9e1 	bl	294e6 <memset>
   25124:	2218      	movs	r2, #24
   25126:	2100      	movs	r1, #0
   25128:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2512c:	f004 f9db 	bl	294e6 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   25130:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   25134:	f7f9 f970 	bl	1e418 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   25138:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2513c:	f7f9 f96c 	bl	1e418 <virtqueue_free>
	vr->shm_io = 0;
   25140:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   25142:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   25146:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   2514a:	f7f9 f881 	bl	1e250 <metal_device_close>
	metal_finish();
   2514e:	f7f9 f8db 	bl	1e308 <metal_finish>
	if (io->ops.close)
   25152:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   25154:	f104 0540 	add.w	r5, r4, #64	; 0x40
   25158:	b10b      	cbz	r3, 2515e <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   2515a:	4628      	mov	r0, r5
   2515c:	4798      	blx	r3
   2515e:	2238      	movs	r2, #56	; 0x38
   25160:	2100      	movs	r1, #0
   25162:	4628      	mov	r0, r5
   25164:	f004 f9bf 	bl	294e6 <memset>

	return 0;
}
   25168:	2000      	movs	r0, #0
   2516a:	bd38      	pop	{r3, r4, r5, pc}

0002516c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2516c:	b538      	push	{r3, r4, r5, lr}
   2516e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   25170:	42ab      	cmp	r3, r5
{
   25172:	4611      	mov	r1, r2
   25174:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   25176:	d804      	bhi.n	25182 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25178:	461a      	mov	r2, r3
   2517a:	f004 f97a 	bl	29472 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2517e:	4620      	mov	r0, r4
   25180:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   25182:	2400      	movs	r4, #0
   25184:	e7fb      	b.n	2517e <_copy+0x12>

00025186 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   25186:	f004 b9ae 	b.w	294e6 <memset>

0002518a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2518a:	09c3      	lsrs	r3, r0, #7
   2518c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25190:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   25194:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   25198:	b2c0      	uxtb	r0, r0
   2519a:	4770      	bx	lr

0002519c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2519c:	78cb      	ldrb	r3, [r1, #3]
   2519e:	7802      	ldrb	r2, [r0, #0]
   251a0:	4053      	eors	r3, r2
   251a2:	7003      	strb	r3, [r0, #0]
   251a4:	884b      	ldrh	r3, [r1, #2]
   251a6:	7842      	ldrb	r2, [r0, #1]
   251a8:	4053      	eors	r3, r2
   251aa:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   251ac:	680a      	ldr	r2, [r1, #0]
   251ae:	7883      	ldrb	r3, [r0, #2]
   251b0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   251b4:	7083      	strb	r3, [r0, #2]
   251b6:	680a      	ldr	r2, [r1, #0]
   251b8:	78c3      	ldrb	r3, [r0, #3]
   251ba:	4053      	eors	r3, r2
   251bc:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   251be:	79cb      	ldrb	r3, [r1, #7]
   251c0:	7902      	ldrb	r2, [r0, #4]
   251c2:	4053      	eors	r3, r2
   251c4:	7103      	strb	r3, [r0, #4]
   251c6:	88cb      	ldrh	r3, [r1, #6]
   251c8:	7942      	ldrb	r2, [r0, #5]
   251ca:	4053      	eors	r3, r2
   251cc:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   251ce:	684a      	ldr	r2, [r1, #4]
   251d0:	7983      	ldrb	r3, [r0, #6]
   251d2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   251d6:	7183      	strb	r3, [r0, #6]
   251d8:	684a      	ldr	r2, [r1, #4]
   251da:	79c3      	ldrb	r3, [r0, #7]
   251dc:	4053      	eors	r3, r2
   251de:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   251e0:	7acb      	ldrb	r3, [r1, #11]
   251e2:	7a02      	ldrb	r2, [r0, #8]
   251e4:	4053      	eors	r3, r2
   251e6:	7203      	strb	r3, [r0, #8]
   251e8:	7a42      	ldrb	r2, [r0, #9]
   251ea:	894b      	ldrh	r3, [r1, #10]
   251ec:	4053      	eors	r3, r2
   251ee:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   251f0:	688a      	ldr	r2, [r1, #8]
   251f2:	7a83      	ldrb	r3, [r0, #10]
   251f4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   251f8:	7283      	strb	r3, [r0, #10]
   251fa:	688a      	ldr	r2, [r1, #8]
   251fc:	7ac3      	ldrb	r3, [r0, #11]
   251fe:	4053      	eors	r3, r2
   25200:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   25202:	7bcb      	ldrb	r3, [r1, #15]
   25204:	7b02      	ldrb	r2, [r0, #12]
   25206:	4053      	eors	r3, r2
   25208:	7303      	strb	r3, [r0, #12]
   2520a:	89cb      	ldrh	r3, [r1, #14]
   2520c:	7b42      	ldrb	r2, [r0, #13]
   2520e:	4053      	eors	r3, r2
   25210:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   25212:	68ca      	ldr	r2, [r1, #12]
   25214:	7b83      	ldrb	r3, [r0, #14]
   25216:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2521a:	7383      	strb	r3, [r0, #14]
   2521c:	68ca      	ldr	r2, [r1, #12]
   2521e:	7bc3      	ldrb	r3, [r0, #15]
   25220:	4053      	eors	r3, r2
   25222:	73c3      	strb	r3, [r0, #15]
}
   25224:	4770      	bx	lr

00025226 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   25226:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   25228:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2522a:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2522c:	f88d 2000 	strb.w	r2, [sp]
   25230:	7942      	ldrb	r2, [r0, #5]
   25232:	f88d 2001 	strb.w	r2, [sp, #1]
   25236:	7a82      	ldrb	r2, [r0, #10]
   25238:	f88d 2002 	strb.w	r2, [sp, #2]
   2523c:	7bc2      	ldrb	r2, [r0, #15]
   2523e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   25242:	7902      	ldrb	r2, [r0, #4]
   25244:	f88d 2004 	strb.w	r2, [sp, #4]
   25248:	7a42      	ldrb	r2, [r0, #9]
   2524a:	f88d 2005 	strb.w	r2, [sp, #5]
   2524e:	7b82      	ldrb	r2, [r0, #14]
   25250:	f88d 2006 	strb.w	r2, [sp, #6]
   25254:	78c2      	ldrb	r2, [r0, #3]
   25256:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2525a:	7a02      	ldrb	r2, [r0, #8]
   2525c:	f88d 2008 	strb.w	r2, [sp, #8]
   25260:	7b42      	ldrb	r2, [r0, #13]
   25262:	f88d 2009 	strb.w	r2, [sp, #9]
   25266:	7882      	ldrb	r2, [r0, #2]
   25268:	f88d 200a 	strb.w	r2, [sp, #10]
   2526c:	79c2      	ldrb	r2, [r0, #7]
   2526e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   25272:	7b02      	ldrb	r2, [r0, #12]
   25274:	f88d 200c 	strb.w	r2, [sp, #12]
   25278:	7842      	ldrb	r2, [r0, #1]
   2527a:	f88d 200d 	strb.w	r2, [sp, #13]
   2527e:	7982      	ldrb	r2, [r0, #6]
   25280:	f88d 200e 	strb.w	r2, [sp, #14]
   25284:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   25288:	2310      	movs	r3, #16
   2528a:	466a      	mov	r2, sp
   2528c:	4619      	mov	r1, r3
   2528e:	f7ff ff6d 	bl	2516c <_copy>
}
   25292:	b005      	add	sp, #20
   25294:	f85d fb04 	ldr.w	pc, [sp], #4

00025298 <mult_row_column>:
{
   25298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2529a:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2529c:	7808      	ldrb	r0, [r1, #0]
{
   2529e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   252a0:	f7ff ff73 	bl	2518a <_double_byte>
   252a4:	4605      	mov	r5, r0
   252a6:	7860      	ldrb	r0, [r4, #1]
   252a8:	f7ff ff6f 	bl	2518a <_double_byte>
   252ac:	78a2      	ldrb	r2, [r4, #2]
   252ae:	7863      	ldrb	r3, [r4, #1]
   252b0:	4053      	eors	r3, r2
   252b2:	78e2      	ldrb	r2, [r4, #3]
   252b4:	4053      	eors	r3, r2
   252b6:	405d      	eors	r5, r3
   252b8:	4068      	eors	r0, r5
   252ba:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   252bc:	7860      	ldrb	r0, [r4, #1]
   252be:	7827      	ldrb	r7, [r4, #0]
   252c0:	f7ff ff63 	bl	2518a <_double_byte>
   252c4:	4605      	mov	r5, r0
   252c6:	78a0      	ldrb	r0, [r4, #2]
   252c8:	f7ff ff5f 	bl	2518a <_double_byte>
   252cc:	78a3      	ldrb	r3, [r4, #2]
   252ce:	405f      	eors	r7, r3
   252d0:	78e3      	ldrb	r3, [r4, #3]
   252d2:	405f      	eors	r7, r3
   252d4:	407d      	eors	r5, r7
   252d6:	4068      	eors	r0, r5
   252d8:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   252da:	7863      	ldrb	r3, [r4, #1]
   252dc:	7827      	ldrb	r7, [r4, #0]
   252de:	78a0      	ldrb	r0, [r4, #2]
   252e0:	405f      	eors	r7, r3
   252e2:	f7ff ff52 	bl	2518a <_double_byte>
   252e6:	4605      	mov	r5, r0
   252e8:	78e0      	ldrb	r0, [r4, #3]
   252ea:	f7ff ff4e 	bl	2518a <_double_byte>
   252ee:	78e3      	ldrb	r3, [r4, #3]
   252f0:	405f      	eors	r7, r3
   252f2:	407d      	eors	r5, r7
   252f4:	4068      	eors	r0, r5
   252f6:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   252f8:	7820      	ldrb	r0, [r4, #0]
   252fa:	f7ff ff46 	bl	2518a <_double_byte>
   252fe:	7862      	ldrb	r2, [r4, #1]
   25300:	7823      	ldrb	r3, [r4, #0]
   25302:	4053      	eors	r3, r2
   25304:	78a2      	ldrb	r2, [r4, #2]
   25306:	4053      	eors	r3, r2
   25308:	ea80 0503 	eor.w	r5, r0, r3
   2530c:	78e0      	ldrb	r0, [r4, #3]
   2530e:	f7ff ff3c 	bl	2518a <_double_byte>
   25312:	b2ed      	uxtb	r5, r5
   25314:	4045      	eors	r5, r0
   25316:	70f5      	strb	r5, [r6, #3]
}
   25318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002531a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2531a:	b570      	push	{r4, r5, r6, lr}
   2531c:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2531e:	4605      	mov	r5, r0
{
   25320:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   25322:	2800      	cmp	r0, #0
   25324:	d049      	beq.n	253ba <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   25326:	2900      	cmp	r1, #0
   25328:	d049      	beq.n	253be <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2532a:	2a00      	cmp	r2, #0
   2532c:	d049      	beq.n	253c2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2532e:	2310      	movs	r3, #16
   25330:	460a      	mov	r2, r1
   25332:	4668      	mov	r0, sp
   25334:	4619      	mov	r1, r3
   25336:	f7ff ff19 	bl	2516c <_copy>
	add_round_key(state, s->words);
   2533a:	4621      	mov	r1, r4
   2533c:	4668      	mov	r0, sp
   2533e:	f7ff ff2d 	bl	2519c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   25342:	3410      	adds	r4, #16
   25344:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   25348:	4668      	mov	r0, sp
   2534a:	f7ea fb5b 	bl	fa04 <sub_bytes>
		shift_rows(state);
   2534e:	4668      	mov	r0, sp
   25350:	f7ff ff69 	bl	25226 <shift_rows>
	mult_row_column(t, s);
   25354:	4669      	mov	r1, sp
   25356:	a804      	add	r0, sp, #16
   25358:	f7ff ff9e 	bl	25298 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2535c:	a901      	add	r1, sp, #4
   2535e:	a805      	add	r0, sp, #20
   25360:	f7ff ff9a 	bl	25298 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   25364:	a902      	add	r1, sp, #8
   25366:	a806      	add	r0, sp, #24
   25368:	f7ff ff96 	bl	25298 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2536c:	a903      	add	r1, sp, #12
   2536e:	a807      	add	r0, sp, #28
   25370:	f7ff ff92 	bl	25298 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   25374:	2310      	movs	r3, #16
   25376:	4668      	mov	r0, sp
   25378:	4619      	mov	r1, r3
   2537a:	eb0d 0203 	add.w	r2, sp, r3
   2537e:	f7ff fef5 	bl	2516c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   25382:	4621      	mov	r1, r4
   25384:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   25386:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   25388:	f7ff ff08 	bl	2519c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2538c:	42b4      	cmp	r4, r6
   2538e:	d1db      	bne.n	25348 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   25390:	f7ea fb38 	bl	fa04 <sub_bytes>
	shift_rows(state);
   25394:	4668      	mov	r0, sp
   25396:	f7ff ff46 	bl	25226 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2539a:	4621      	mov	r1, r4
   2539c:	4668      	mov	r0, sp
   2539e:	f7ff fefd 	bl	2519c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   253a2:	2310      	movs	r3, #16
   253a4:	466a      	mov	r2, sp
   253a6:	4619      	mov	r1, r3
   253a8:	4628      	mov	r0, r5
   253aa:	f7ff fedf 	bl	2516c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   253ae:	4668      	mov	r0, sp
   253b0:	2210      	movs	r2, #16
   253b2:	2100      	movs	r1, #0
   253b4:	f7ff fee7 	bl	25186 <_set>

	return TC_CRYPTO_SUCCESS;
   253b8:	2001      	movs	r0, #1
}
   253ba:	b008      	add	sp, #32
   253bc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   253be:	4608      	mov	r0, r1
   253c0:	e7fb      	b.n	253ba <tc_aes_encrypt+0xa0>
   253c2:	4610      	mov	r0, r2
   253c4:	e7f9      	b.n	253ba <tc_aes_encrypt+0xa0>

000253c6 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   253c6:	460a      	mov	r2, r1
{
   253c8:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   253ca:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   253ce:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   253d0:	2b00      	cmp	r3, #0
   253d2:	bfac      	ite	ge
   253d4:	2300      	movge	r3, #0
   253d6:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   253d8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   253dc:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   253e0:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   253e2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   253e6:	d002      	beq.n	253ee <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   253e8:	7813      	ldrb	r3, [r2, #0]
   253ea:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   253ec:	e7f4      	b.n	253d8 <gf_double+0x12>
	}
}
   253ee:	bd10      	pop	{r4, pc}

000253f0 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   253f0:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   253f2:	b120      	cbz	r0, 253fe <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   253f4:	2258      	movs	r2, #88	; 0x58
   253f6:	2100      	movs	r1, #0
   253f8:	f7ff fec5 	bl	25186 <_set>
   253fc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   253fe:	bd08      	pop	{r3, pc}

00025400 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   25400:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   25402:	4604      	mov	r4, r0
   25404:	b188      	cbz	r0, 2542a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   25406:	2210      	movs	r2, #16
   25408:	2100      	movs	r1, #0
   2540a:	f7ff febc 	bl	25186 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2540e:	2210      	movs	r2, #16
   25410:	f104 0030 	add.w	r0, r4, #48	; 0x30
   25414:	2100      	movs	r1, #0
   25416:	f7ff feb6 	bl	25186 <_set>
	s->leftover_offset = 0;
   2541a:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2541c:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2541e:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   25420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   25424:	2001      	movs	r0, #1
   25426:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2542a:	bd10      	pop	{r4, pc}

0002542c <tc_cmac_setup>:
{
   2542c:	b570      	push	{r4, r5, r6, lr}
   2542e:	4604      	mov	r4, r0
   25430:	460d      	mov	r5, r1
   25432:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   25434:	b310      	cbz	r0, 2547c <tc_cmac_setup+0x50>
   25436:	b311      	cbz	r1, 2547e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   25438:	2258      	movs	r2, #88	; 0x58
   2543a:	2100      	movs	r1, #0
   2543c:	f7ff fea3 	bl	25186 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   25440:	4629      	mov	r1, r5
   25442:	4630      	mov	r0, r6
	s->sched = sched;
   25444:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   25446:	f7ea fae9 	bl	fa1c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2544a:	2210      	movs	r2, #16
   2544c:	2100      	movs	r1, #0
   2544e:	4620      	mov	r0, r4
   25450:	f7ff fe99 	bl	25186 <_set>
	gf_double (s->K1, s->iv);
   25454:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   25458:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2545a:	4621      	mov	r1, r4
   2545c:	4620      	mov	r0, r4
   2545e:	f7ff ff5c 	bl	2531a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   25462:	4621      	mov	r1, r4
   25464:	4628      	mov	r0, r5
   25466:	f7ff ffae 	bl	253c6 <gf_double>
	gf_double (s->K2, s->K1);
   2546a:	4629      	mov	r1, r5
   2546c:	f104 0020 	add.w	r0, r4, #32
   25470:	f7ff ffa9 	bl	253c6 <gf_double>
	tc_cmac_init(s);
   25474:	4620      	mov	r0, r4
   25476:	f7ff ffc3 	bl	25400 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2547a:	2001      	movs	r0, #1
}
   2547c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2547e:	4608      	mov	r0, r1
   25480:	e7fc      	b.n	2547c <tc_cmac_setup+0x50>

00025482 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   25482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25486:	460e      	mov	r6, r1
   25488:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2548a:	4604      	mov	r4, r0
   2548c:	2800      	cmp	r0, #0
   2548e:	d060      	beq.n	25552 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   25490:	b1fa      	cbz	r2, 254d2 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   25492:	2900      	cmp	r1, #0
   25494:	d05d      	beq.n	25552 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   25496:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2549a:	ea53 0102 	orrs.w	r1, r3, r2
   2549e:	d058      	beq.n	25552 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   254a0:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   254a2:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   254a6:	f142 32ff 	adc.w	r2, r2, #4294967295
   254aa:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   254ae:	f1b8 0f00 	cmp.w	r8, #0
   254b2:	d02c      	beq.n	2550e <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   254b4:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   254b8:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   254bc:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   254be:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   254c0:	d20a      	bcs.n	254d8 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   254c2:	462b      	mov	r3, r5
   254c4:	4632      	mov	r2, r6
   254c6:	4629      	mov	r1, r5
   254c8:	f7ff fe50 	bl	2516c <_copy>
			s->leftover_offset += data_length;
   254cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   254ce:	442b      	add	r3, r5
   254d0:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   254d2:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   254d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   254d8:	463b      	mov	r3, r7
   254da:	4632      	mov	r2, r6
   254dc:	4639      	mov	r1, r7
   254de:	f7ff fe45 	bl	2516c <_copy>
		s->leftover_offset = 0;
   254e2:	2300      	movs	r3, #0
   254e4:	3d10      	subs	r5, #16
   254e6:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   254e8:	4445      	add	r5, r8
		data += remaining_space;
   254ea:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   254ec:	1e63      	subs	r3, r4, #1
   254ee:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   254f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   254f6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   254fa:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   254fc:	ea82 0200 	eor.w	r2, r2, r0
   25500:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25502:	d1f6      	bne.n	254f2 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   25504:	4621      	mov	r1, r4
   25506:	4620      	mov	r0, r4
   25508:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2550a:	f7ff ff06 	bl	2531a <tc_aes_encrypt>
   2550e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   25512:	2d10      	cmp	r5, #16
   25514:	d80a      	bhi.n	2552c <tc_cmac_update+0xaa>
	if (data_length > 0) {
   25516:	2d00      	cmp	r5, #0
   25518:	d0db      	beq.n	254d2 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2551a:	462b      	mov	r3, r5
   2551c:	4632      	mov	r2, r6
   2551e:	4629      	mov	r1, r5
   25520:	f104 0030 	add.w	r0, r4, #48	; 0x30
   25524:	f7ff fe22 	bl	2516c <_copy>
		s->leftover_offset = data_length;
   25528:	6465      	str	r5, [r4, #68]	; 0x44
   2552a:	e7d2      	b.n	254d2 <tc_cmac_update+0x50>
   2552c:	1e63      	subs	r3, r4, #1
   2552e:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   25530:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25534:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25538:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2553a:	ea82 0200 	eor.w	r2, r2, r0
   2553e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25540:	d1f6      	bne.n	25530 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   25542:	4621      	mov	r1, r4
   25544:	4620      	mov	r0, r4
   25546:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25548:	f7ff fee7 	bl	2531a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2554c:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2554e:	3d10      	subs	r5, #16
   25550:	e7df      	b.n	25512 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   25552:	2000      	movs	r0, #0
   25554:	e7be      	b.n	254d4 <tc_cmac_update+0x52>

00025556 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   25556:	b570      	push	{r4, r5, r6, lr}
   25558:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2555a:	4605      	mov	r5, r0
   2555c:	b1f0      	cbz	r0, 2559c <tc_cmac_final+0x46>
   2555e:	b371      	cbz	r1, 255be <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   25560:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   25562:	2a10      	cmp	r2, #16
   25564:	d11b      	bne.n	2559e <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   25566:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25568:	1e63      	subs	r3, r4, #1
   2556a:	3901      	subs	r1, #1
   2556c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   25570:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25574:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25578:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2557a:	ea82 0206 	eor.w	r2, r2, r6
   2557e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   25582:	ea82 0206 	eor.w	r2, r2, r6
   25586:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25588:	d1f2      	bne.n	25570 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2558a:	4621      	mov	r1, r4
   2558c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2558e:	4628      	mov	r0, r5
   25590:	f7ff fec3 	bl	2531a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   25594:	4620      	mov	r0, r4
   25596:	f7ff ff2b 	bl	253f0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2559a:	2001      	movs	r0, #1
}
   2559c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2559e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   255a2:	2100      	movs	r1, #0
   255a4:	f1c2 0210 	rsb	r2, r2, #16
   255a8:	4420      	add	r0, r4
   255aa:	f7ff fdec 	bl	25186 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   255ae:	2280      	movs	r2, #128	; 0x80
   255b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   255b2:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   255b6:	4423      	add	r3, r4
   255b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   255bc:	e7d4      	b.n	25568 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   255be:	4608      	mov	r0, r1
   255c0:	e7ec      	b.n	2559c <tc_cmac_final+0x46>

000255c2 <tc_sha256_update>:
{
   255c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   255c4:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   255c6:	b110      	cbz	r0, 255ce <tc_sha256_update+0xc>
   255c8:	b1f9      	cbz	r1, 2560a <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   255ca:	b90a      	cbnz	r2, 255d0 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   255cc:	2001      	movs	r0, #1
}
   255ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   255d0:	2700      	movs	r7, #0
   255d2:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   255d4:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   255d8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   255da:	1c5a      	adds	r2, r3, #1
   255dc:	6682      	str	r2, [r0, #104]	; 0x68
   255de:	f814 1b01 	ldrb.w	r1, [r4], #1
   255e2:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   255e4:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   255e6:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   255ea:	d90b      	bls.n	25604 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   255ec:	4631      	mov	r1, r6
   255ee:	f7ea fa69 	bl	fac4 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   255f2:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   255f6:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   255fa:	f142 0200 	adc.w	r2, r2, #0
   255fe:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   25602:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   25604:	42a5      	cmp	r5, r4
   25606:	d1e7      	bne.n	255d8 <tc_sha256_update+0x16>
   25608:	e7e0      	b.n	255cc <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   2560a:	4608      	mov	r0, r1
   2560c:	e7df      	b.n	255ce <tc_sha256_update+0xc>

0002560e <tc_sha256_final>:
{
   2560e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25610:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   25612:	4605      	mov	r5, r0
   25614:	2800      	cmp	r0, #0
   25616:	d054      	beq.n	256c2 <tc_sha256_final+0xb4>
   25618:	2900      	cmp	r1, #0
   2561a:	d053      	beq.n	256c4 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2561c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   2561e:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   25622:	00d8      	lsls	r0, r3, #3
   25624:	1812      	adds	r2, r2, r0
   25626:	f141 0100 	adc.w	r1, r1, #0
   2562a:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2562e:	2280      	movs	r2, #128	; 0x80
   25630:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   25632:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   25634:	4423      	add	r3, r4
   25636:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   25638:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2563c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   25640:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   25644:	d90a      	bls.n	2565c <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   25646:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2564a:	4639      	mov	r1, r7
   2564c:	4430      	add	r0, r6
   2564e:	f7ff fd9a 	bl	25186 <_set>
		compress(s->iv, s->leftover);
   25652:	4631      	mov	r1, r6
   25654:	4620      	mov	r0, r4
   25656:	f7ea fa35 	bl	fac4 <compress>
		s->leftover_offset = 0;
   2565a:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2565c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2565e:	2100      	movs	r1, #0
   25660:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   25664:	4430      	add	r0, r6
   25666:	f7ff fd8e 	bl	25186 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2566a:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2566c:	4631      	mov	r1, r6
   2566e:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   25670:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   25672:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   25674:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   25676:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2567a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2567e:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   25680:	0e1b      	lsrs	r3, r3, #24
   25682:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   25686:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   25688:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2568c:	f7ea fa1a 	bl	fac4 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   25690:	1d2b      	adds	r3, r5, #4
   25692:	1f21      	subs	r1, r4, #4
   25694:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   25696:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2569a:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   2569c:	0e10      	lsrs	r0, r2, #24
   2569e:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   256a2:	0c10      	lsrs	r0, r2, #16
   256a4:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   256a8:	0a10      	lsrs	r0, r2, #8
   256aa:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   256ae:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   256b2:	42ab      	cmp	r3, r5
   256b4:	d1ef      	bne.n	25696 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   256b6:	4620      	mov	r0, r4
   256b8:	2270      	movs	r2, #112	; 0x70
   256ba:	2100      	movs	r1, #0
   256bc:	f7ff fd63 	bl	25186 <_set>
	return TC_CRYPTO_SUCCESS;
   256c0:	2001      	movs	r0, #1
}
   256c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   256c4:	4608      	mov	r0, r1
   256c6:	e7fc      	b.n	256c2 <tc_sha256_final+0xb4>

000256c8 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   256c8:	b530      	push	{r4, r5, lr}
   256ca:	1e43      	subs	r3, r0, #1
   256cc:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   256ce:	42a9      	cmp	r1, r5
   256d0:	d106      	bne.n	256e0 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   256d2:	2136      	movs	r1, #54	; 0x36
   256d4:	245c      	movs	r4, #92	; 0x5c
   256d6:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   256d8:	1a13      	subs	r3, r2, r0
   256da:	2b3f      	cmp	r3, #63	; 0x3f
   256dc:	d90c      	bls.n	256f8 <rekey+0x30>
	}
}
   256de:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   256e0:	780c      	ldrb	r4, [r1, #0]
   256e2:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   256e6:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   256ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   256ee:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   256f2:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   256f6:	e7ea      	b.n	256ce <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   256f8:	f802 1b01 	strb.w	r1, [r2], #1
   256fc:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   25700:	e7ea      	b.n	256d8 <rekey+0x10>

00025702 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   25702:	b5f0      	push	{r4, r5, r6, r7, lr}
   25704:	460e      	mov	r6, r1
   25706:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   25708:	4605      	mov	r5, r0
{
   2570a:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   2570c:	b1b8      	cbz	r0, 2573e <tc_hmac_set_key+0x3c>
   2570e:	b341      	cbz	r1, 25762 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   25710:	b34a      	cbz	r2, 25766 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   25712:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   25714:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   25718:	d813      	bhi.n	25742 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   2571a:	a810      	add	r0, sp, #64	; 0x40
   2571c:	f7ea fabc 	bl	fc98 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   25720:	4622      	mov	r2, r4
   25722:	4669      	mov	r1, sp
   25724:	a810      	add	r0, sp, #64	; 0x40
   25726:	f7ff ff4c 	bl	255c2 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2572a:	a910      	add	r1, sp, #64	; 0x40
   2572c:	a834      	add	r0, sp, #208	; 0xd0
   2572e:	f7ff ff6e 	bl	2560e <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   25732:	4622      	mov	r2, r4
   25734:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   25736:	4638      	mov	r0, r7
   25738:	f7ff ffc6 	bl	256c8 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2573c:	2001      	movs	r0, #1
}
   2573e:	b04d      	add	sp, #308	; 0x134
   25740:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   25742:	f7ea faa9 	bl	fc98 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   25746:	4622      	mov	r2, r4
   25748:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2574a:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2574e:	4628      	mov	r0, r5
   25750:	f7ff ff37 	bl	255c2 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   25754:	4629      	mov	r1, r5
   25756:	4620      	mov	r0, r4
   25758:	f7ff ff59 	bl	2560e <tc_sha256_final>
		rekey(ctx->key,
   2575c:	2220      	movs	r2, #32
   2575e:	4621      	mov	r1, r4
   25760:	e7e9      	b.n	25736 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   25762:	4608      	mov	r0, r1
   25764:	e7eb      	b.n	2573e <tc_hmac_set_key+0x3c>
   25766:	4610      	mov	r0, r2
   25768:	e7e9      	b.n	2573e <tc_hmac_set_key+0x3c>

0002576a <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2576a:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2576c:	4604      	mov	r4, r0
   2576e:	b140      	cbz	r0, 25782 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   25770:	f7ea fa92 	bl	fc98 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   25774:	2240      	movs	r2, #64	; 0x40
   25776:	4620      	mov	r0, r4
   25778:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2577c:	f7ff ff21 	bl	255c2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   25780:	2001      	movs	r0, #1
}
   25782:	bd10      	pop	{r4, pc}

00025784 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   25784:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   25786:	b110      	cbz	r0, 2578e <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   25788:	f7ff ff1b 	bl	255c2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2578c:	2001      	movs	r0, #1
}
   2578e:	bd08      	pop	{r3, pc}

00025790 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   25790:	b570      	push	{r4, r5, r6, lr}
   25792:	460e      	mov	r6, r1
   25794:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   25796:	4605      	mov	r5, r0
   25798:	b1f0      	cbz	r0, 257d8 <tc_hmac_final+0x48>
   2579a:	2920      	cmp	r1, #32
   2579c:	d11c      	bne.n	257d8 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2579e:	b1ea      	cbz	r2, 257dc <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   257a0:	4611      	mov	r1, r2
   257a2:	f7ff ff34 	bl	2560e <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   257a6:	4620      	mov	r0, r4
   257a8:	f7ea fa76 	bl	fc98 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   257ac:	2240      	movs	r2, #64	; 0x40
   257ae:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   257b2:	4620      	mov	r0, r4
   257b4:	f7ff ff05 	bl	255c2 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   257b8:	4632      	mov	r2, r6
   257ba:	4629      	mov	r1, r5
   257bc:	4620      	mov	r0, r4
   257be:	f7ff ff00 	bl	255c2 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   257c2:	4621      	mov	r1, r4
   257c4:	4628      	mov	r0, r5
   257c6:	f7ff ff22 	bl	2560e <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   257ca:	4620      	mov	r0, r4
   257cc:	22f0      	movs	r2, #240	; 0xf0
   257ce:	2100      	movs	r1, #0
   257d0:	f7ff fcd9 	bl	25186 <_set>

	return TC_CRYPTO_SUCCESS;
   257d4:	2001      	movs	r0, #1
}
   257d6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   257d8:	2000      	movs	r0, #0
   257da:	e7fc      	b.n	257d6 <tc_hmac_final+0x46>
   257dc:	4610      	mov	r0, r2
   257de:	e7fa      	b.n	257d6 <tc_hmac_final+0x46>

000257e0 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   257e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257e4:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   257e6:	f04f 0b01 	mov.w	fp, #1
{
   257ea:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   257ec:	2300      	movs	r3, #0
{
   257ee:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   257f0:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   257f4:	4631      	mov	r1, r6
{
   257f6:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   257f8:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   257fa:	f88d 3006 	strb.w	r3, [sp, #6]
{
   257fe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   25802:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25806:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2580a:	f7ff ff7a 	bl	25702 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2580e:	4620      	mov	r0, r4
   25810:	f7ff ffab 	bl	2576a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   25814:	2220      	movs	r2, #32
   25816:	4629      	mov	r1, r5
   25818:	4620      	mov	r0, r4
   2581a:	f7ff ffb3 	bl	25784 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2581e:	465a      	mov	r2, fp
   25820:	4620      	mov	r0, r4
   25822:	f10d 0106 	add.w	r1, sp, #6
   25826:	f7ff ffad 	bl	25784 <tc_hmac_update>

	if (data && datalen)
   2582a:	f1b8 0f00 	cmp.w	r8, #0
   2582e:	d007      	beq.n	25840 <update+0x60>
   25830:	f1b9 0f00 	cmp.w	r9, #0
   25834:	d004      	beq.n	25840 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   25836:	464a      	mov	r2, r9
   25838:	4641      	mov	r1, r8
   2583a:	4620      	mov	r0, r4
   2583c:	f7ff ffa2 	bl	25784 <tc_hmac_update>
	if (additional_data && additional_datalen)
   25840:	b13f      	cbz	r7, 25852 <update+0x72>
   25842:	f1ba 0f00 	cmp.w	sl, #0
   25846:	d004      	beq.n	25852 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   25848:	4652      	mov	r2, sl
   2584a:	4639      	mov	r1, r7
   2584c:	4620      	mov	r0, r4
   2584e:	f7ff ff99 	bl	25784 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   25852:	4622      	mov	r2, r4
   25854:	2120      	movs	r1, #32
   25856:	4630      	mov	r0, r6
   25858:	f7ff ff9a 	bl	25790 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2585c:	2220      	movs	r2, #32
   2585e:	4631      	mov	r1, r6
   25860:	4620      	mov	r0, r4
   25862:	f7ff ff4e 	bl	25702 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   25866:	4620      	mov	r0, r4
   25868:	f7ff ff7f 	bl	2576a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2586c:	2220      	movs	r2, #32
   2586e:	4629      	mov	r1, r5
   25870:	4620      	mov	r0, r4
   25872:	f7ff ff87 	bl	25784 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   25876:	4622      	mov	r2, r4
   25878:	2120      	movs	r1, #32
   2587a:	4628      	mov	r0, r5
   2587c:	f7ff ff88 	bl	25790 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   25880:	f1b8 0f00 	cmp.w	r8, #0
   25884:	d03a      	beq.n	258fc <update+0x11c>
   25886:	f1b9 0f00 	cmp.w	r9, #0
   2588a:	d037      	beq.n	258fc <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2588c:	2220      	movs	r2, #32
   2588e:	4631      	mov	r1, r6
   25890:	4620      	mov	r0, r4
   25892:	f7ff ff36 	bl	25702 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   25896:	4620      	mov	r0, r4
   25898:	f7ff ff67 	bl	2576a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2589c:	2220      	movs	r2, #32
   2589e:	4629      	mov	r1, r5
   258a0:	4620      	mov	r0, r4
   258a2:	f7ff ff6f 	bl	25784 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   258a6:	2201      	movs	r2, #1
   258a8:	f10d 0107 	add.w	r1, sp, #7
   258ac:	4620      	mov	r0, r4
   258ae:	f7ff ff69 	bl	25784 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   258b2:	464a      	mov	r2, r9
   258b4:	4641      	mov	r1, r8
   258b6:	4620      	mov	r0, r4
   258b8:	f7ff ff64 	bl	25784 <tc_hmac_update>
	if (additional_data && additional_datalen)
   258bc:	b13f      	cbz	r7, 258ce <update+0xee>
   258be:	f1ba 0f00 	cmp.w	sl, #0
   258c2:	d004      	beq.n	258ce <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   258c4:	4652      	mov	r2, sl
   258c6:	4639      	mov	r1, r7
   258c8:	4620      	mov	r0, r4
   258ca:	f7ff ff5b 	bl	25784 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   258ce:	4622      	mov	r2, r4
   258d0:	2120      	movs	r1, #32
   258d2:	4630      	mov	r0, r6
   258d4:	f7ff ff5c 	bl	25790 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   258d8:	2220      	movs	r2, #32
   258da:	4631      	mov	r1, r6
   258dc:	4620      	mov	r0, r4
   258de:	f7ff ff10 	bl	25702 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   258e2:	4620      	mov	r0, r4
   258e4:	f7ff ff41 	bl	2576a <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   258e8:	2220      	movs	r2, #32
   258ea:	4629      	mov	r1, r5
   258ec:	4620      	mov	r0, r4
   258ee:	f7ff ff49 	bl	25784 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   258f2:	4622      	mov	r2, r4
   258f4:	2120      	movs	r1, #32
   258f6:	4628      	mov	r0, r5
   258f8:	f7ff ff4a 	bl	25790 <tc_hmac_final>
}
   258fc:	b003      	add	sp, #12
   258fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025902 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   25902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25904:	460c      	mov	r4, r1
   25906:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   25908:	4605      	mov	r5, r0
   2590a:	b1b0      	cbz	r0, 2593a <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   2590c:	b1b9      	cbz	r1, 2593e <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2590e:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   25910:	2220      	movs	r2, #32
   25912:	2100      	movs	r1, #0
   25914:	30f0      	adds	r0, #240	; 0xf0
   25916:	f7ff fc36 	bl	25186 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2591a:	2220      	movs	r2, #32
   2591c:	2101      	movs	r1, #1
   2591e:	f505 7088 	add.w	r0, r5, #272	; 0x110
   25922:	f7ff fc30 	bl	25186 <_set>
	update(prng, personalization, plen, 0, 0);
   25926:	4628      	mov	r0, r5
   25928:	4633      	mov	r3, r6
   2592a:	463a      	mov	r2, r7
   2592c:	4621      	mov	r1, r4
   2592e:	9600      	str	r6, [sp, #0]
   25930:	f7ff ff56 	bl	257e0 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   25934:	2001      	movs	r0, #1
	prng->countdown = 0;
   25936:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2593a:	b003      	add	sp, #12
   2593c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2593e:	4608      	mov	r0, r1
   25940:	e7fb      	b.n	2593a <tc_hmac_prng_init+0x38>

00025942 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   25942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25944:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   25946:	4605      	mov	r5, r0
   25948:	b180      	cbz	r0, 2596c <tc_hmac_prng_reseed+0x2a>
   2594a:	b179      	cbz	r1, 2596c <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2594c:	2a1f      	cmp	r2, #31
   2594e:	d90d      	bls.n	2596c <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   25950:	b153      	cbz	r3, 25968 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   25952:	b16c      	cbz	r4, 25970 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   25954:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   25956:	f7ff ff43 	bl	257e0 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2595a:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   2595e:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   25960:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   25964:	b003      	add	sp, #12
   25966:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   25968:	9300      	str	r3, [sp, #0]
   2596a:	e7f4      	b.n	25956 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   2596c:	2000      	movs	r0, #0
   2596e:	e7f9      	b.n	25964 <tc_hmac_prng_reseed+0x22>
   25970:	4620      	mov	r0, r4
   25972:	e7f7      	b.n	25964 <tc_hmac_prng_reseed+0x22>

00025974 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   25974:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25978:	460d      	mov	r5, r1
   2597a:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2597c:	4680      	mov	r8, r0
   2597e:	b3d8      	cbz	r0, 259f8 <tc_hmac_prng_generate+0x84>
   25980:	b3d2      	cbz	r2, 259f8 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   25982:	1e4b      	subs	r3, r1, #1
   25984:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   25988:	d236      	bcs.n	259f8 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2598a:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2598e:	b3ab      	cbz	r3, 259fc <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   25990:	3b01      	subs	r3, #1
   25992:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   25996:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2599a:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2599e:	2220      	movs	r2, #32
   259a0:	4649      	mov	r1, r9
   259a2:	4620      	mov	r0, r4
   259a4:	f7ff fead 	bl	25702 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   259a8:	4620      	mov	r0, r4
   259aa:	f7ff fede 	bl	2576a <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   259ae:	2220      	movs	r2, #32
   259b0:	4639      	mov	r1, r7
   259b2:	4620      	mov	r0, r4
   259b4:	f7ff fee6 	bl	25784 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   259b8:	4622      	mov	r2, r4
   259ba:	2120      	movs	r1, #32
   259bc:	4638      	mov	r0, r7
   259be:	f7ff fee7 	bl	25790 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   259c2:	2d20      	cmp	r5, #32
   259c4:	462e      	mov	r6, r5
   259c6:	bf28      	it	cs
   259c8:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   259ca:	4640      	mov	r0, r8
   259cc:	4633      	mov	r3, r6
   259ce:	463a      	mov	r2, r7
   259d0:	4631      	mov	r1, r6
   259d2:	f7ff fbcb 	bl	2516c <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   259d6:	2d20      	cmp	r5, #32
   259d8:	bf38      	it	cc
   259da:	2520      	movcc	r5, #32
	while (outlen != 0) {
   259dc:	3d20      	subs	r5, #32
		out += bufferlen;
   259de:	44b0      	add	r8, r6
	while (outlen != 0) {
   259e0:	d1dd      	bne.n	2599e <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   259e2:	4620      	mov	r0, r4
   259e4:	462b      	mov	r3, r5
   259e6:	462a      	mov	r2, r5
   259e8:	4629      	mov	r1, r5
   259ea:	9500      	str	r5, [sp, #0]
   259ec:	f7ff fef8 	bl	257e0 <update>

	return TC_CRYPTO_SUCCESS;
   259f0:	2001      	movs	r0, #1
}
   259f2:	b003      	add	sp, #12
   259f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   259f8:	2000      	movs	r0, #0
   259fa:	e7fa      	b.n	259f2 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   259fc:	f04f 30ff 	mov.w	r0, #4294967295
   25a00:	e7f7      	b.n	259f2 <tc_hmac_prng_generate+0x7e>

00025a02 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25a02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25a04:	ab0b      	add	r3, sp, #44	; 0x2c
   25a06:	9305      	str	r3, [sp, #20]
   25a08:	9303      	str	r3, [sp, #12]
   25a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25a0c:	2201      	movs	r2, #1
   25a0e:	9302      	str	r3, [sp, #8]
   25a10:	2300      	movs	r3, #0
   25a12:	4618      	mov	r0, r3
   25a14:	e9cd 3300 	strd	r3, r3, [sp]
   25a18:	f7e8 fafa 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   25a1c:	b007      	add	sp, #28
   25a1e:	f85d fb04 	ldr.w	pc, [sp], #4

00025a22 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   25a22:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   25a24:	6800      	ldr	r0, [r0, #0]
   25a26:	f7ea b981 	b.w	fd2c <z_arm_fatal_error>

00025a2a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   25a2a:	2100      	movs	r1, #0
   25a2c:	2001      	movs	r0, #1
   25a2e:	f7ea b97d 	b.w	fd2c <z_arm_fatal_error>

00025a32 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   25a32:	b508      	push	{r3, lr}
	handler();
   25a34:	f7ea fa2c 	bl	fe90 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   25a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   25a3c:	f7ea baf6 	b.w	1002c <z_arm_exc_exit>

00025a40 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   25a40:	6e83      	ldr	r3, [r0, #104]	; 0x68
   25a42:	f383 880b 	msr	PSPLIM, r3
}
   25a46:	4770      	bx	lr

00025a48 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25a48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25a4a:	ab0b      	add	r3, sp, #44	; 0x2c
   25a4c:	9305      	str	r3, [sp, #20]
   25a4e:	9303      	str	r3, [sp, #12]
   25a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25a52:	2201      	movs	r2, #1
   25a54:	9302      	str	r3, [sp, #8]
   25a56:	2300      	movs	r3, #0
   25a58:	4618      	mov	r0, r3
   25a5a:	e9cd 3300 	strd	r3, r3, [sp]
   25a5e:	f7e8 fad7 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   25a62:	b007      	add	sp, #28
   25a64:	f85d fb04 	ldr.w	pc, [sp], #4

00025a68 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   25a68:	4770      	bx	lr

00025a6a <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   25a6a:	4770      	bx	lr

00025a6c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   25a6c:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   25a70:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   25a74:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   25a76:	bf08      	it	eq
   25a78:	f06f 0015 	mvneq.w	r0, #21
   25a7c:	4770      	bx	lr

00025a7e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25a7e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25a80:	ab0b      	add	r3, sp, #44	; 0x2c
   25a82:	9305      	str	r3, [sp, #20]
   25a84:	9303      	str	r3, [sp, #12]
   25a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25a88:	2201      	movs	r2, #1
   25a8a:	9302      	str	r3, [sp, #8]
   25a8c:	2300      	movs	r3, #0
   25a8e:	4618      	mov	r0, r3
   25a90:	e9cd 3300 	strd	r3, r3, [sp]
   25a94:	f7e8 fabc 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   25a98:	b007      	add	sp, #28
   25a9a:	f85d fb04 	ldr.w	pc, [sp], #4

00025a9e <mpu_configure_region>:
{
   25a9e:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   25aa0:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   25aa2:	684b      	ldr	r3, [r1, #4]
{
   25aa4:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   25aa6:	890a      	ldrh	r2, [r1, #8]
   25aa8:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   25aaa:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25aac:	3b01      	subs	r3, #1
   25aae:	f024 041f 	bic.w	r4, r4, #31
   25ab2:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   25ab4:	f002 021f 	and.w	r2, r2, #31
   25ab8:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25abc:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   25ac0:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   25ac2:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25ac6:	9303      	str	r3, [sp, #12]
   25ac8:	f7ea feb6 	bl	10838 <region_allocate_and_init>
}
   25acc:	b005      	add	sp, #20
   25ace:	bd30      	pop	{r4, r5, pc}

00025ad0 <_stdout_hook_default>:
}
   25ad0:	f04f 30ff 	mov.w	r0, #4294967295
   25ad4:	4770      	bx	lr

00025ad6 <_stdin_hook_default>:
}
   25ad6:	2000      	movs	r0, #0
   25ad8:	4770      	bx	lr

00025ada <_read>:
{
   25ada:	4608      	mov	r0, r1
   25adc:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   25ade:	f7eb b8a9 	b.w	10c34 <z_impl_zephyr_read_stdin>

00025ae2 <_write>:
{
   25ae2:	4608      	mov	r0, r1
   25ae4:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   25ae6:	f7eb b8b9 	b.w	10c5c <z_impl_zephyr_write_stdout>

00025aea <_close>:
int _close(int file)
   25aea:	f04f 30ff 	mov.w	r0, #4294967295
   25aee:	4770      	bx	lr

00025af0 <_lseek>:
}
   25af0:	2000      	movs	r0, #0
   25af2:	4770      	bx	lr

00025af4 <_isatty>:
}
   25af4:	2802      	cmp	r0, #2
   25af6:	bfcc      	ite	gt
   25af8:	2000      	movgt	r0, #0
   25afa:	2001      	movle	r0, #1
   25afc:	4770      	bx	lr

00025afe <_kill>:
}
   25afe:	2000      	movs	r0, #0
   25b00:	4770      	bx	lr

00025b02 <_getpid>:
}
   25b02:	2000      	movs	r0, #0
   25b04:	4770      	bx	lr

00025b06 <_fstat>:
	st->st_mode = S_IFCHR;
   25b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   25b0a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   25b0c:	604b      	str	r3, [r1, #4]
}
   25b0e:	4770      	bx	lr

00025b10 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   25b10:	f7f9 b892 	b.w	1ec38 <z_impl_z_errno>

00025b14 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   25b14:	b530      	push	{r4, r5, lr}
   25b16:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   25b18:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   25b1c:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   25b1e:	794b      	ldrb	r3, [r1, #5]
   25b20:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   25b24:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   25b26:	220d      	movs	r2, #13
   25b28:	2100      	movs	r1, #0
   25b2a:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   25b2e:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   25b32:	f003 fcd8 	bl	294e6 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   25b36:	aa02      	add	r2, sp, #8
   25b38:	4611      	mov	r1, r2
   25b3a:	4628      	mov	r0, r5
   25b3c:	f000 fb46 	bl	261cc <bt_encrypt_le>
	if (err) {
   25b40:	b110      	cbz	r0, 25b48 <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   25b42:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   25b44:	b007      	add	sp, #28
   25b46:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   25b48:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   25b4a:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   25b4c:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   25b50:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   25b52:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   25b54:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   25b56:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   25b5a:	f003 fc7a 	bl	29452 <memcmp>
   25b5e:	fab0 f080 	clz	r0, r0
   25b62:	0940      	lsrs	r0, r0, #5
   25b64:	e7ee      	b.n	25b44 <bt_rpa_irk_matches+0x30>

00025b66 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   25b66:	b510      	push	{r4, lr}
   25b68:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   25b6a:	7801      	ldrb	r1, [r0, #0]
   25b6c:	7822      	ldrb	r2, [r4, #0]
{
   25b6e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   25b70:	428a      	cmp	r2, r1
   25b72:	d00f      	beq.n	25b94 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   25b74:	4669      	mov	r1, sp
   25b76:	f7eb f9a1 	bl	10ebc <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   25b7a:	4620      	mov	r0, r4
   25b7c:	a905      	add	r1, sp, #20
   25b7e:	f7eb f99d 	bl	10ebc <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   25b82:	2210      	movs	r2, #16
   25b84:	f10d 0115 	add.w	r1, sp, #21
   25b88:	f10d 0001 	add.w	r0, sp, #1
   25b8c:	f003 fc61 	bl	29452 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   25b90:	b00a      	add	sp, #40	; 0x28
   25b92:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   25b94:	2a01      	cmp	r2, #1
   25b96:	d006      	beq.n	25ba6 <bt_uuid_cmp+0x40>
   25b98:	2a02      	cmp	r2, #2
   25b9a:	d007      	beq.n	25bac <bt_uuid_cmp+0x46>
   25b9c:	b972      	cbnz	r2, 25bbc <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   25b9e:	8840      	ldrh	r0, [r0, #2]
   25ba0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   25ba2:	1ac0      	subs	r0, r0, r3
   25ba4:	e7f4      	b.n	25b90 <bt_uuid_cmp+0x2a>
   25ba6:	6840      	ldr	r0, [r0, #4]
   25ba8:	6863      	ldr	r3, [r4, #4]
   25baa:	e7fa      	b.n	25ba2 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   25bac:	2210      	movs	r2, #16
   25bae:	1c61      	adds	r1, r4, #1
   25bb0:	3001      	adds	r0, #1
}
   25bb2:	b00a      	add	sp, #40	; 0x28
   25bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   25bb8:	f003 bc4b 	b.w	29452 <memcmp>
	switch (u1->type) {
   25bbc:	f06f 0015 	mvn.w	r0, #21
   25bc0:	e7e6      	b.n	25b90 <bt_uuid_cmp+0x2a>

00025bc2 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   25bc2:	2a04      	cmp	r2, #4
   25bc4:	d00a      	beq.n	25bdc <bt_uuid_create+0x1a>
   25bc6:	2a10      	cmp	r2, #16
   25bc8:	d00d      	beq.n	25be6 <bt_uuid_create+0x24>
   25bca:	2a02      	cmp	r2, #2
   25bcc:	f04f 0300 	mov.w	r3, #0
   25bd0:	d115      	bne.n	25bfe <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   25bd2:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   25bd4:	880b      	ldrh	r3, [r1, #0]
   25bd6:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   25bd8:	2001      	movs	r0, #1
   25bda:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   25bdc:	2301      	movs	r3, #1
   25bde:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   25be0:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   25be2:	6043      	str	r3, [r0, #4]
		break;
   25be4:	e7f8      	b.n	25bd8 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   25be6:	2302      	movs	r3, #2
   25be8:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25bec:	f101 0310 	add.w	r3, r1, #16
   25bf0:	f851 2b04 	ldr.w	r2, [r1], #4
   25bf4:	4299      	cmp	r1, r3
   25bf6:	f840 2b04 	str.w	r2, [r0], #4
   25bfa:	d1f9      	bne.n	25bf0 <bt_uuid_create+0x2e>
   25bfc:	e7ec      	b.n	25bd8 <bt_uuid_create+0x16>
	switch (data_len) {
   25bfe:	4618      	mov	r0, r3
}
   25c00:	4770      	bx	lr

00025c02 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   25c02:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   25c04:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   25c06:	2106      	movs	r1, #6
{
   25c08:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   25c0a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   25c0e:	f7ed fc83 	bl	13518 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   25c12:	b918      	cbnz	r0, 25c1c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   25c14:	79a3      	ldrb	r3, [r4, #6]
   25c16:	f063 033f 	orn	r3, r3, #63	; 0x3f
   25c1a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   25c1c:	bd10      	pop	{r4, pc}

00025c1e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   25c1e:	280f      	cmp	r0, #15
   25c20:	d807      	bhi.n	25c32 <bt_hci_evt_get_flags+0x14>
   25c22:	280d      	cmp	r0, #13
   25c24:	d80b      	bhi.n	25c3e <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   25c26:	2805      	cmp	r0, #5
   25c28:	bf08      	it	eq
   25c2a:	2003      	moveq	r0, #3
   25c2c:	bf18      	it	ne
   25c2e:	2002      	movne	r0, #2
   25c30:	4770      	bx	lr
	switch (evt) {
   25c32:	2813      	cmp	r0, #19
   25c34:	d003      	beq.n	25c3e <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   25c36:	281a      	cmp	r0, #26
   25c38:	bf08      	it	eq
   25c3a:	2001      	moveq	r0, #1
   25c3c:	e7f6      	b.n	25c2c <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   25c3e:	2001      	movs	r0, #1
	}
}
   25c40:	4770      	bx	lr

00025c42 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   25c42:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   25c46:	b183      	cbz	r3, 25c6a <update_sec_level+0x28>
   25c48:	7b5a      	ldrb	r2, [r3, #13]
   25c4a:	07d1      	lsls	r1, r2, #31
   25c4c:	d50d      	bpl.n	25c6a <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   25c4e:	06d2      	lsls	r2, r2, #27
   25c50:	d50d      	bpl.n	25c6e <update_sec_level+0x2c>
   25c52:	7b1b      	ldrb	r3, [r3, #12]
   25c54:	2b10      	cmp	r3, #16
   25c56:	bf14      	ite	ne
   25c58:	2303      	movne	r3, #3
   25c5a:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   25c5c:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   25c5e:	7a80      	ldrb	r0, [r0, #10]
}
   25c60:	4298      	cmp	r0, r3
   25c62:	bf8c      	ite	hi
   25c64:	2000      	movhi	r0, #0
   25c66:	2001      	movls	r0, #1
   25c68:	4770      	bx	lr
   25c6a:	2302      	movs	r3, #2
   25c6c:	e7f6      	b.n	25c5c <update_sec_level+0x1a>
   25c6e:	2303      	movs	r3, #3
   25c70:	e7f4      	b.n	25c5c <update_sec_level+0x1a>

00025c72 <hci_vendor_event>:
}
   25c72:	4770      	bx	lr

00025c74 <atomic_or>:
{
   25c74:	4603      	mov	r3, r0
   25c76:	b510      	push	{r4, lr}
}
   25c78:	e8d3 0fef 	ldaex	r0, [r3]
   25c7c:	ea40 0201 	orr.w	r2, r0, r1
   25c80:	e8c3 2fe4 	stlex	r4, r2, [r3]
   25c84:	2c00      	cmp	r4, #0
   25c86:	d1f7      	bne.n	25c78 <atomic_or+0x4>
   25c88:	bd10      	pop	{r4, pc}

00025c8a <bt_addr_copy>:
   25c8a:	680b      	ldr	r3, [r1, #0]
   25c8c:	6003      	str	r3, [r0, #0]
   25c8e:	888b      	ldrh	r3, [r1, #4]
   25c90:	8083      	strh	r3, [r0, #4]
}
   25c92:	4770      	bx	lr

00025c94 <bt_addr_le_copy>:
   25c94:	680b      	ldr	r3, [r1, #0]
   25c96:	6003      	str	r3, [r0, #0]
   25c98:	888b      	ldrh	r3, [r1, #4]
   25c9a:	8083      	strh	r3, [r0, #4]
   25c9c:	798b      	ldrb	r3, [r1, #6]
   25c9e:	7183      	strb	r3, [r0, #6]
}
   25ca0:	4770      	bx	lr

00025ca2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25ca2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25ca4:	ab0b      	add	r3, sp, #44	; 0x2c
   25ca6:	9305      	str	r3, [sp, #20]
   25ca8:	9303      	str	r3, [sp, #12]
   25caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25cac:	9302      	str	r3, [sp, #8]
   25cae:	2300      	movs	r3, #0
   25cb0:	4618      	mov	r0, r3
   25cb2:	e9cd 3300 	strd	r3, r3, [sp]
   25cb6:	f7e8 f9ab 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   25cba:	b007      	add	sp, #28
   25cbc:	f85d fb04 	ldr.w	pc, [sp], #4

00025cc0 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25cc0:	e8d0 3fef 	ldaex	r3, [r0]
   25cc4:	400b      	ands	r3, r1
   25cc6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   25cca:	2a00      	cmp	r2, #0
   25ccc:	d1f8      	bne.n	25cc0 <atomic_and.isra.0>
}
   25cce:	4770      	bx	lr

00025cd0 <sys_put_le64>:
	dst[1] = val >> 8;
   25cd0:	f3c0 2307 	ubfx	r3, r0, #8, #8
   25cd4:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   25cd6:	2300      	movs	r3, #0
   25cd8:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   25cda:	0e00      	lsrs	r0, r0, #24
   25cdc:	70d0      	strb	r0, [r2, #3]
   25cde:	f3c1 2007 	ubfx	r0, r1, #8, #8
   25ce2:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   25ce4:	7093      	strb	r3, [r2, #2]
   25ce6:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   25ce8:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   25cea:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   25cec:	71d1      	strb	r1, [r2, #7]
}
   25cee:	4770      	bx	lr

00025cf0 <bt_hci_disconnect>:
{
   25cf0:	b570      	push	{r4, r5, r6, lr}
   25cf2:	4606      	mov	r6, r0
   25cf4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   25cf6:	f240 4006 	movw	r0, #1030	; 0x406
   25cfa:	2103      	movs	r1, #3
   25cfc:	f7eb fd74 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   25d00:	4604      	mov	r4, r0
   25d02:	b168      	cbz	r0, 25d20 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   25d04:	2103      	movs	r1, #3
   25d06:	300c      	adds	r0, #12
   25d08:	f7f3 faac 	bl	19264 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   25d0c:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   25d0e:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   25d10:	4621      	mov	r1, r4
}
   25d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   25d16:	2200      	movs	r2, #0
   25d18:	f240 4006 	movw	r0, #1030	; 0x406
   25d1c:	f7eb bdb2 	b.w	11884 <bt_hci_cmd_send_sync>
}
   25d20:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25d24:	bd70      	pop	{r4, r5, r6, pc}

00025d26 <bt_le_set_data_len>:
{
   25d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d28:	4607      	mov	r7, r0
   25d2a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   25d2c:	f242 0022 	movw	r0, #8226	; 0x2022
   25d30:	2106      	movs	r1, #6
{
   25d32:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   25d34:	f7eb fd58 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   25d38:	4604      	mov	r4, r0
   25d3a:	b178      	cbz	r0, 25d5c <bt_le_set_data_len+0x36>
   25d3c:	2106      	movs	r1, #6
   25d3e:	300c      	adds	r0, #12
   25d40:	f7f3 fa90 	bl	19264 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   25d44:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   25d46:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   25d48:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   25d4a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   25d4c:	4621      	mov	r1, r4
}
   25d4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   25d52:	2200      	movs	r2, #0
   25d54:	f242 0022 	movw	r0, #8226	; 0x2022
   25d58:	f7eb bd94 	b.w	11884 <bt_hci_cmd_send_sync>
}
   25d5c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025d62 <bt_le_set_phy>:
{
   25d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25d66:	4681      	mov	r9, r0
   25d68:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   25d6a:	f242 0032 	movw	r0, #8242	; 0x2032
   25d6e:	2107      	movs	r1, #7
{
   25d70:	4617      	mov	r7, r2
   25d72:	461e      	mov	r6, r3
   25d74:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   25d78:	f7eb fd36 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   25d7c:	4605      	mov	r5, r0
   25d7e:	b1a0      	cbz	r0, 25daa <bt_le_set_phy+0x48>
   25d80:	2107      	movs	r1, #7
   25d82:	300c      	adds	r0, #12
   25d84:	f7f3 fa6e 	bl	19264 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   25d88:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   25d8c:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   25d90:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   25d92:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   25d94:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   25d96:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   25d9a:	4629      	mov	r1, r5
}
   25d9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   25da0:	2200      	movs	r2, #0
   25da2:	f242 0032 	movw	r0, #8242	; 0x2032
   25da6:	f7eb bd6d 	b.w	11884 <bt_hci_cmd_send_sync>
}
   25daa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025db2 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   25db2:	68c0      	ldr	r0, [r0, #12]
   25db4:	f7eb be30 	b.w	11a18 <bt_hci_le_enh_conn_complete>

00025db8 <bt_le_conn_params_valid>:
{
   25db8:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   25dba:	8803      	ldrh	r3, [r0, #0]
   25dbc:	8842      	ldrh	r2, [r0, #2]
   25dbe:	4293      	cmp	r3, r2
   25dc0:	d819      	bhi.n	25df6 <bt_le_conn_params_valid+0x3e>
   25dc2:	2b05      	cmp	r3, #5
   25dc4:	d917      	bls.n	25df6 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   25dc6:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   25dca:	d814      	bhi.n	25df6 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   25dcc:	8883      	ldrh	r3, [r0, #4]
   25dce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   25dd2:	d210      	bcs.n	25df6 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   25dd4:	f640 4476 	movw	r4, #3190	; 0xc76
   25dd8:	88c0      	ldrh	r0, [r0, #6]
   25dda:	f1a0 010a 	sub.w	r1, r0, #10
   25dde:	b289      	uxth	r1, r1
   25de0:	42a1      	cmp	r1, r4
   25de2:	d808      	bhi.n	25df6 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   25de4:	3301      	adds	r3, #1
   25de6:	b29b      	uxth	r3, r3
   25de8:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   25dea:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   25dee:	bf34      	ite	cc
   25df0:	2001      	movcc	r0, #1
   25df2:	2000      	movcs	r0, #0
}
   25df4:	bd10      	pop	{r4, pc}
		return false;
   25df6:	2000      	movs	r0, #0
   25df8:	e7fc      	b.n	25df4 <bt_le_conn_params_valid+0x3c>

00025dfa <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   25dfa:	f240 3041 	movw	r0, #833	; 0x341
   25dfe:	4770      	bx	lr

00025e00 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   25e00:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   25e02:	f7f2 fd81 	bl	18908 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   25e06:	b118      	cbz	r0, 25e10 <bt_addr_le_is_bonded+0x10>
   25e08:	89c0      	ldrh	r0, [r0, #14]
   25e0a:	3800      	subs	r0, #0
   25e0c:	bf18      	it	ne
   25e0e:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   25e10:	bd08      	pop	{r3, pc}

00025e12 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   25e12:	2207      	movs	r2, #7
{
   25e14:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   25e16:	f003 fb1c 	bl	29452 <memcmp>
}
   25e1a:	fab0 f080 	clz	r0, r0
   25e1e:	0940      	lsrs	r0, r0, #5
   25e20:	bd08      	pop	{r3, pc}

00025e22 <bt_addr_copy>:
   25e22:	680b      	ldr	r3, [r1, #0]
   25e24:	6003      	str	r3, [r0, #0]
   25e26:	888b      	ldrh	r3, [r1, #4]
   25e28:	8083      	strh	r3, [r0, #4]
}
   25e2a:	4770      	bx	lr

00025e2c <bt_addr_le_copy>:
   25e2c:	680b      	ldr	r3, [r1, #0]
   25e2e:	6003      	str	r3, [r0, #0]
   25e30:	888b      	ldrh	r3, [r1, #4]
   25e32:	8083      	strh	r3, [r0, #4]
   25e34:	798b      	ldrb	r3, [r1, #6]
   25e36:	7183      	strb	r3, [r0, #6]
}
   25e38:	4770      	bx	lr

00025e3a <hci_id_add>:
{
   25e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25e3c:	460f      	mov	r7, r1
   25e3e:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   25e40:	bb30      	cbnz	r0, 25e90 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   25e42:	2127      	movs	r1, #39	; 0x27
   25e44:	f242 0027 	movw	r0, #8231	; 0x2027
   25e48:	f7eb fcce 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   25e4c:	4605      	mov	r5, r0
   25e4e:	b310      	cbz	r0, 25e96 <hci_id_add+0x5c>
   25e50:	2127      	movs	r1, #39	; 0x27
   25e52:	300c      	adds	r0, #12
   25e54:	f7f3 fa06 	bl	19264 <net_buf_simple_add>
   25e58:	4622      	mov	r2, r4
   25e5a:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   25e5c:	4639      	mov	r1, r7
   25e5e:	f7ff ffe5 	bl	25e2c <bt_addr_le_copy>
   25e62:	1dc3      	adds	r3, r0, #7
   25e64:	f104 0110 	add.w	r1, r4, #16
   25e68:	f852 0b04 	ldr.w	r0, [r2], #4
   25e6c:	428a      	cmp	r2, r1
   25e6e:	f843 0b04 	str.w	r0, [r3], #4
   25e72:	d1f9      	bne.n	25e68 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   25e74:	2210      	movs	r2, #16
   25e76:	2100      	movs	r1, #0
   25e78:	f106 0017 	add.w	r0, r6, #23
   25e7c:	f003 fb33 	bl	294e6 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   25e80:	4629      	mov	r1, r5
}
   25e82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   25e86:	2200      	movs	r2, #0
   25e88:	f242 0027 	movw	r0, #8231	; 0x2027
   25e8c:	f7eb bcfa 	b.w	11884 <bt_hci_cmd_send_sync>
		return -EINVAL;
   25e90:	f06f 0015 	mvn.w	r0, #21
}
   25e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   25e96:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25e9a:	e7fb      	b.n	25e94 <hci_id_add+0x5a>

00025e9c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   25e9c:	7a03      	ldrb	r3, [r0, #8]
{
   25e9e:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   25ea0:	075b      	lsls	r3, r3, #29
   25ea2:	d505      	bpl.n	25eb0 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   25ea4:	4601      	mov	r1, r0
   25ea6:	322a      	adds	r2, #42	; 0x2a
   25ea8:	f811 0b01 	ldrb.w	r0, [r1], #1
   25eac:	f7ff bfc5 	b.w	25e3a <hci_id_add>
}
   25eb0:	4770      	bx	lr

00025eb2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25eb2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25eb4:	ab0b      	add	r3, sp, #44	; 0x2c
   25eb6:	9305      	str	r3, [sp, #20]
   25eb8:	9303      	str	r3, [sp, #12]
   25eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25ebc:	9302      	str	r3, [sp, #8]
   25ebe:	2300      	movs	r3, #0
   25ec0:	4618      	mov	r0, r3
   25ec2:	e9cd 3300 	strd	r3, r3, [sp]
   25ec6:	f7e8 f8a3 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   25eca:	b007      	add	sp, #28
   25ecc:	f85d fb04 	ldr.w	pc, [sp], #4

00025ed0 <addr_res_enable>:
{
   25ed0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   25ed2:	2101      	movs	r1, #1
{
   25ed4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   25ed6:	f242 002d 	movw	r0, #8237	; 0x202d
   25eda:	f7eb fc85 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   25ede:	4604      	mov	r4, r0
   25ee0:	b158      	cbz	r0, 25efa <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   25ee2:	4629      	mov	r1, r5
   25ee4:	300c      	adds	r0, #12
   25ee6:	f001 fd58 	bl	2799a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   25eea:	4621      	mov	r1, r4
}
   25eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   25ef0:	2200      	movs	r2, #0
   25ef2:	f242 002d 	movw	r0, #8237	; 0x202d
   25ef6:	f7eb bcc5 	b.w	11884 <bt_hci_cmd_send_sync>
}
   25efa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25efe:	bd38      	pop	{r3, r4, r5, pc}

00025f00 <adv_unpause_enabled>:
{
   25f00:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25f02:	f100 0310 	add.w	r3, r0, #16
   25f06:	e8d3 2fef 	ldaex	r2, [r3]
   25f0a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   25f0e:	e8c3 1fe4 	stlex	r4, r1, [r3]
   25f12:	2c00      	cmp	r4, #0
   25f14:	d1f7      	bne.n	25f06 <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   25f16:	0413      	lsls	r3, r2, #16
   25f18:	d503      	bpl.n	25f22 <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   25f1a:	2101      	movs	r1, #1
}
   25f1c:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   25f1e:	f000 b940 	b.w	261a2 <bt_le_adv_set_enable>
}
   25f22:	bc10      	pop	{r4}
   25f24:	4770      	bx	lr

00025f26 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   25f26:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25f2a:	e8d3 2faf 	lda	r2, [r3]
   25f2e:	0612      	lsls	r2, r2, #24
   25f30:	d50a      	bpl.n	25f48 <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25f32:	e8d3 1fef 	ldaex	r1, [r3]
   25f36:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   25f3a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   25f3e:	2a00      	cmp	r2, #0
   25f40:	d1f7      	bne.n	25f32 <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   25f42:	2100      	movs	r1, #0
   25f44:	f000 b92d 	b.w	261a2 <bt_le_adv_set_enable>
}
   25f48:	4770      	bx	lr

00025f4a <bt_lookup_id_addr>:
{
   25f4a:	b510      	push	{r4, lr}
   25f4c:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   25f4e:	b930      	cbnz	r0, 25f5e <bt_lookup_id_addr+0x14>
   25f50:	b119      	cbz	r1, 25f5a <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   25f52:	f7f2 fc81 	bl	18858 <bt_keys_find_irk>
		if (keys) {
   25f56:	b100      	cbz	r0, 25f5a <bt_lookup_id_addr+0x10>
			return &keys->addr;
   25f58:	1c44      	adds	r4, r0, #1
}
   25f5a:	4620      	mov	r0, r4
   25f5c:	bd10      	pop	{r4, pc}
		return NULL;
   25f5e:	2400      	movs	r4, #0
   25f60:	e7fb      	b.n	25f5a <bt_lookup_id_addr+0x10>

00025f62 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   25f62:	b118      	cbz	r0, 25f6c <bt_id_set_adv_random_addr+0xa>
   25f64:	b111      	cbz	r1, 25f6c <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   25f66:	4608      	mov	r0, r1
   25f68:	f7ec bb6e 	b.w	12648 <set_random_address>
}
   25f6c:	f06f 0015 	mvn.w	r0, #21
   25f70:	4770      	bx	lr

00025f72 <bt_id_set_adv_private_addr>:
{
   25f72:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   25f74:	4604      	mov	r4, r0
   25f76:	b180      	cbz	r0, 25f9a <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   25f78:	2106      	movs	r1, #6
   25f7a:	4668      	mov	r0, sp
   25f7c:	f7ed facc 	bl	13518 <bt_rand>
	if (err) {
   25f80:	b948      	cbnz	r0, 25f96 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   25f82:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   25f86:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   25f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   25f8c:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   25f8e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   25f92:	f7ff ffe6 	bl	25f62 <bt_id_set_adv_random_addr>
}
   25f96:	b002      	add	sp, #8
   25f98:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25f9a:	f06f 0015 	mvn.w	r0, #21
   25f9e:	e7fa      	b.n	25f96 <bt_id_set_adv_private_addr+0x24>

00025fa0 <bt_id_adv_random_addr_check>:
}
   25fa0:	3800      	subs	r0, #0
   25fa2:	bf18      	it	ne
   25fa4:	2001      	movne	r0, #1
   25fa6:	4770      	bx	lr

00025fa8 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   25fa8:	7a03      	ldrb	r3, [r0, #8]
   25faa:	07d9      	lsls	r1, r3, #31
   25fac:	d504      	bpl.n	25fb8 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   25fae:	f023 0301 	bic.w	r3, r3, #1
   25fb2:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   25fb4:	f7ec bc00 	b.w	127b8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   25fb8:	0799      	lsls	r1, r3, #30
   25fba:	d504      	bpl.n	25fc6 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   25fbc:	f023 0302 	bic.w	r3, r3, #2
   25fc0:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   25fc2:	f7ec bcc5 	b.w	12950 <bt_id_del>
}
   25fc6:	4770      	bx	lr

00025fc8 <get_adv_channel_map>:
{
   25fc8:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   25fca:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   25fce:	bf0c      	ite	eq
   25fd0:	2007      	moveq	r0, #7
   25fd2:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   25fd4:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   25fd6:	bf48      	it	mi
   25fd8:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   25fdc:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   25fde:	bf48      	it	mi
   25fe0:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   25fe4:	4770      	bx	lr

00025fe6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25fe6:	e8d0 0faf 	lda	r0, [r0]
}
   25fea:	4770      	bx	lr

00025fec <atomic_and>:
{
   25fec:	4603      	mov	r3, r0
   25fee:	b510      	push	{r4, lr}
}
   25ff0:	e8d3 0fef 	ldaex	r0, [r3]
   25ff4:	ea00 0201 	and.w	r2, r0, r1
   25ff8:	e8c3 2fe4 	stlex	r4, r2, [r3]
   25ffc:	2c00      	cmp	r4, #0
   25ffe:	d1f7      	bne.n	25ff0 <atomic_and+0x4>
   26000:	bd10      	pop	{r4, pc}

00026002 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26002:	680b      	ldr	r3, [r1, #0]
   26004:	6003      	str	r3, [r0, #0]
   26006:	888b      	ldrh	r3, [r1, #4]
   26008:	8083      	strh	r3, [r0, #4]
   2600a:	798b      	ldrb	r3, [r1, #6]
   2600c:	7183      	strb	r3, [r0, #6]
   2600e:	4770      	bx	lr

00026010 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26010:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26012:	ab0b      	add	r3, sp, #44	; 0x2c
   26014:	9305      	str	r3, [sp, #20]
   26016:	9303      	str	r3, [sp, #12]
   26018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2601a:	9302      	str	r3, [sp, #8]
   2601c:	2300      	movs	r3, #0
   2601e:	4618      	mov	r0, r3
   26020:	e9cd 3300 	strd	r3, r3, [sp]
   26024:	f7e7 fff4 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   26028:	b007      	add	sp, #28
   2602a:	f85d fb04 	ldr.w	pc, [sp], #4

0002602e <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2602e:	2301      	movs	r3, #1
{
   26030:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26032:	fa03 f101 	lsl.w	r1, r3, r1
{
   26036:	4604      	mov	r4, r0
	if (val) {
   26038:	b142      	cbz	r2, 2604c <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2603a:	e8d4 3fef 	ldaex	r3, [r4]
   2603e:	430b      	orrs	r3, r1
   26040:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26044:	2a00      	cmp	r2, #0
   26046:	d1f8      	bne.n	2603a <atomic_set_bit_to+0xc>
	}
}
   26048:	bc10      	pop	{r4}
   2604a:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2604c:	43c9      	mvns	r1, r1
}
   2604e:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26050:	f7ff bfcc 	b.w	25fec <atomic_and>

00026054 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   26054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26058:	b087      	sub	sp, #28
   2605a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2605e:	4605      	mov	r5, r0
   26060:	460c      	mov	r4, r1
   26062:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   26064:	2100      	movs	r1, #0
   26066:	2210      	movs	r2, #16
   26068:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2606a:	461f      	mov	r7, r3
   2606c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   26070:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   26074:	f003 fa37 	bl	294e6 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   26078:	b9ce      	cbnz	r6, 260ae <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   2607a:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   2607e:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   26080:	f242 0008 	movw	r0, #8200	; 0x2008
   26084:	a902      	add	r1, sp, #8
   26086:	f7ec fed1 	bl	12e2c <hci_set_ad>
		if (err) {
   2608a:	4604      	mov	r4, r0
   2608c:	b958      	cbnz	r0, 260a6 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   2608e:	f1ba 0f00 	cmp.w	sl, #0
   26092:	d13a      	bne.n	2610a <le_adv_update.constprop.0+0xb6>
   26094:	3510      	adds	r5, #16
   26096:	e8d5 3fef 	ldaex	r3, [r5]
   2609a:	f043 0304 	orr.w	r3, r3, #4
   2609e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   260a2:	2a00      	cmp	r2, #0
   260a4:	d1f7      	bne.n	26096 <le_adv_update.constprop.0+0x42>
}
   260a6:	4620      	mov	r0, r4
   260a8:	b007      	add	sp, #28
   260aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   260ae:	f7ec fa81 	bl	125b4 <bt_get_name>
   260b2:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   260b4:	b9e4      	cbnz	r4, 260f0 <le_adv_update.constprop.0+0x9c>
   260b6:	bb37      	cbnz	r7, 26106 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   260b8:	4658      	mov	r0, fp
   260ba:	f7e3 f951 	bl	9360 <strlen>
   260be:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   260c0:	2e01      	cmp	r6, #1
		d[0].data = ad;
   260c2:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   260c6:	f88d 3000 	strb.w	r3, [sp]
   260ca:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   260ce:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   260d2:	d1d4      	bne.n	2607e <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   260d4:	2202      	movs	r2, #2
			d[1].data = &data;
   260d6:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   260da:	9605      	str	r6, [sp, #20]
			d_len = 2;
   260dc:	e7d0      	b.n	26080 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   260de:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   260e2:	3a08      	subs	r2, #8
   260e4:	2a01      	cmp	r2, #1
   260e6:	d924      	bls.n	26132 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   260e8:	3301      	adds	r3, #1
   260ea:	4598      	cmp	r8, r3
   260ec:	d1f7      	bne.n	260de <le_adv_update.constprop.0+0x8a>
   260ee:	e7e2      	b.n	260b6 <le_adv_update.constprop.0+0x62>
   260f0:	2300      	movs	r3, #0
   260f2:	e7fa      	b.n	260ea <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   260f4:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   260f8:	3a08      	subs	r2, #8
   260fa:	2a01      	cmp	r2, #1
   260fc:	d919      	bls.n	26132 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   260fe:	3301      	adds	r3, #1
   26100:	4599      	cmp	r9, r3
   26102:	d1f7      	bne.n	260f4 <le_adv_update.constprop.0+0xa0>
   26104:	e7d8      	b.n	260b8 <le_adv_update.constprop.0+0x64>
   26106:	2300      	movs	r3, #0
   26108:	e7fa      	b.n	26100 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   2610a:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   2610c:	2e02      	cmp	r6, #2
			d[1].len = 1;
   2610e:	bf08      	it	eq
   26110:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   26112:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   26116:	bf08      	it	eq
   26118:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2611a:	a902      	add	r1, sp, #8
			d[1].data = &data;
   2611c:	bf08      	it	eq
   2611e:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   26122:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   26126:	f7ec fe81 	bl	12e2c <hci_set_ad>
		if (err) {
   2612a:	2800      	cmp	r0, #0
   2612c:	d0b2      	beq.n	26094 <le_adv_update.constprop.0+0x40>
   2612e:	4604      	mov	r4, r0
   26130:	e7b9      	b.n	260a6 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   26132:	f06f 0415 	mvn.w	r4, #21
   26136:	e7b6      	b.n	260a6 <le_adv_update.constprop.0+0x52>

00026138 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   26138:	6843      	ldr	r3, [r0, #4]
   2613a:	f013 0008 	ands.w	r0, r3, #8
   2613e:	d00a      	beq.n	26156 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   26140:	035a      	lsls	r2, r3, #13
   26142:	d407      	bmi.n	26154 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   26144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   26148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2614c:	bf14      	ite	ne
   2614e:	2002      	movne	r0, #2
   26150:	2001      	moveq	r0, #1
   26152:	4770      	bx	lr
   26154:	2001      	movs	r0, #1
}
   26156:	4770      	bx	lr

00026158 <bt_le_adv_set_enable_legacy>:
{
   26158:	b570      	push	{r4, r5, r6, lr}
   2615a:	4606      	mov	r6, r0
   2615c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2615e:	f242 000a 	movw	r0, #8202	; 0x200a
   26162:	2101      	movs	r1, #1
{
   26164:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   26166:	f7eb fb3f 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   2616a:	4604      	mov	r4, r0
   2616c:	b1b0      	cbz	r0, 2619c <bt_le_adv_set_enable_legacy+0x44>
   2616e:	300c      	adds	r0, #12
	if (enable) {
   26170:	b195      	cbz	r5, 26198 <bt_le_adv_set_enable_legacy+0x40>
   26172:	2101      	movs	r1, #1
   26174:	f001 fc11 	bl	2799a <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   26178:	4620      	mov	r0, r4
   2617a:	f106 0210 	add.w	r2, r6, #16
   2617e:	a903      	add	r1, sp, #12
   26180:	2307      	movs	r3, #7
   26182:	9500      	str	r5, [sp, #0]
   26184:	f7eb fb1e 	bl	117c4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   26188:	2200      	movs	r2, #0
   2618a:	4621      	mov	r1, r4
   2618c:	f242 000a 	movw	r0, #8202	; 0x200a
   26190:	f7eb fb78 	bl	11884 <bt_hci_cmd_send_sync>
}
   26194:	b006      	add	sp, #24
   26196:	bd70      	pop	{r4, r5, r6, pc}
   26198:	4629      	mov	r1, r5
   2619a:	e7eb      	b.n	26174 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2619c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   261a0:	e7f8      	b.n	26194 <bt_le_adv_set_enable_legacy+0x3c>

000261a2 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   261a2:	f7ff bfd9 	b.w	26158 <bt_le_adv_set_enable_legacy>

000261a6 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   261a6:	3018      	adds	r0, #24
   261a8:	f7fa ba3e 	b.w	20628 <k_work_cancel_delayable>

000261ac <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   261ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   261ae:	ab0b      	add	r3, sp, #44	; 0x2c
   261b0:	9305      	str	r3, [sp, #20]
   261b2:	9303      	str	r3, [sp, #12]
   261b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   261b6:	2201      	movs	r2, #1
   261b8:	9302      	str	r3, [sp, #8]
   261ba:	2300      	movs	r3, #0
   261bc:	4618      	mov	r0, r3
   261be:	e9cd 3300 	strd	r3, r3, [sp]
   261c2:	f7e7 ff25 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   261c6:	b007      	add	sp, #28
   261c8:	f85d fb04 	ldr.w	pc, [sp], #4

000261cc <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   261cc:	b530      	push	{r4, r5, lr}
   261ce:	460d      	mov	r5, r1
   261d0:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   261d2:	4601      	mov	r1, r0
{
   261d4:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   261d6:	b310      	cbz	r0, 2621e <bt_encrypt_le+0x52>
   261d8:	b30d      	cbz	r5, 2621e <bt_encrypt_le+0x52>
   261da:	b302      	cbz	r2, 2621e <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   261dc:	4668      	mov	r0, sp
   261de:	f7ed f949 	bl	13474 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   261e2:	4669      	mov	r1, sp
   261e4:	a804      	add	r0, sp, #16
   261e6:	f7e9 fc19 	bl	fa1c <tc_aes128_set_encrypt_key>
   261ea:	b1c0      	cbz	r0, 2621e <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   261ec:	4629      	mov	r1, r5
   261ee:	4668      	mov	r0, sp
   261f0:	f7ed f940 	bl	13474 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   261f4:	4669      	mov	r1, sp
   261f6:	4620      	mov	r0, r4
   261f8:	aa04      	add	r2, sp, #16
   261fa:	f7ff f88e 	bl	2531a <tc_aes_encrypt>
   261fe:	b170      	cbz	r0, 2621e <bt_encrypt_le+0x52>
   26200:	1e63      	subs	r3, r4, #1
   26202:	f104 0210 	add.w	r2, r4, #16
   26206:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   26208:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2620c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   26210:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   26212:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   26214:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   26216:	d1f7      	bne.n	26208 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   26218:	2000      	movs	r0, #0
}
   2621a:	b031      	add	sp, #196	; 0xc4
   2621c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2621e:	f06f 0015 	mvn.w	r0, #21
   26222:	e7fa      	b.n	2621a <bt_encrypt_le+0x4e>

00026224 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26224:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26226:	ab0b      	add	r3, sp, #44	; 0x2c
   26228:	9305      	str	r3, [sp, #20]
   2622a:	9303      	str	r3, [sp, #12]
   2622c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2622e:	9302      	str	r3, [sp, #8]
   26230:	2300      	movs	r3, #0
   26232:	4618      	mov	r0, r3
   26234:	e9cd 3300 	strd	r3, r3, [sp]
   26238:	f7e7 feea 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   2623c:	b007      	add	sp, #28
   2623e:	f85d fb04 	ldr.w	pc, [sp], #4

00026242 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26242:	2200      	movs	r2, #0
	return list->head;
   26244:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26246:	b90b      	cbnz	r3, 2624c <sys_slist_find_and_remove+0xa>
   26248:	4618      	mov	r0, r3
   2624a:	4770      	bx	lr
   2624c:	428b      	cmp	r3, r1
   2624e:	d110      	bne.n	26272 <sys_slist_find_and_remove+0x30>
	return node->next;
   26250:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26252:	b942      	cbnz	r2, 26266 <sys_slist_find_and_remove+0x24>
   26254:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   26256:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   26258:	4291      	cmp	r1, r2
   2625a:	d100      	bne.n	2625e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2625c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2625e:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26260:	2001      	movs	r0, #1
	parent->next = child;
   26262:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26264:	4770      	bx	lr
	parent->next = child;
   26266:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26268:	6843      	ldr	r3, [r0, #4]
   2626a:	4299      	cmp	r1, r3
	list->tail = node;
   2626c:	bf08      	it	eq
   2626e:	6042      	streq	r2, [r0, #4]
}
   26270:	e7f5      	b.n	2625e <sys_slist_find_and_remove+0x1c>
	return node->next;
   26272:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26274:	681b      	ldr	r3, [r3, #0]
   26276:	e7e6      	b.n	26246 <sys_slist_find_and_remove+0x4>

00026278 <atomic_and>:
{
   26278:	4603      	mov	r3, r0
   2627a:	b510      	push	{r4, lr}
}
   2627c:	e8d3 0fef 	ldaex	r0, [r3]
   26280:	ea00 0201 	and.w	r2, r0, r1
   26284:	e8c3 2fe4 	stlex	r4, r2, [r3]
   26288:	2c00      	cmp	r4, #0
   2628a:	d1f7      	bne.n	2627c <atomic_and+0x4>
   2628c:	bd10      	pop	{r4, pc}

0002628e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2628e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26290:	ab0b      	add	r3, sp, #44	; 0x2c
   26292:	9305      	str	r3, [sp, #20]
   26294:	9303      	str	r3, [sp, #12]
   26296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26298:	9302      	str	r3, [sp, #8]
   2629a:	2300      	movs	r3, #0
   2629c:	4618      	mov	r0, r3
   2629e:	e9cd 3300 	strd	r3, r3, [sp]
   262a2:	f7e7 feb5 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   262a6:	b007      	add	sp, #28
   262a8:	f85d fb04 	ldr.w	pc, [sp], #4

000262ac <tx_complete_work>:
	tx_notify(conn);
   262ac:	3828      	subs	r0, #40	; 0x28
   262ae:	f7ed bac3 	b.w	13838 <tx_notify>

000262b2 <bt_conn_reset_rx_state>:
{
   262b2:	b510      	push	{r4, lr}
   262b4:	4604      	mov	r4, r0
	if (!conn->rx) {
   262b6:	6900      	ldr	r0, [r0, #16]
   262b8:	b118      	cbz	r0, 262c2 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   262ba:	f7f2 feb1 	bl	19020 <net_buf_unref>
	conn->rx = NULL;
   262be:	2300      	movs	r3, #0
   262c0:	6123      	str	r3, [r4, #16]
}
   262c2:	bd10      	pop	{r4, pc}

000262c4 <conn_lookup_handle>:
{
   262c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   262c8:	4607      	mov	r7, r0
   262ca:	460e      	mov	r6, r1
   262cc:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   262ce:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   262d0:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   262d4:	42b4      	cmp	r4, r6
   262d6:	d103      	bne.n	262e0 <conn_lookup_handle+0x1c>
	return NULL;
   262d8:	2300      	movs	r3, #0
}
   262da:	4618      	mov	r0, r3
   262dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   262e0:	fb09 7004 	mla	r0, r9, r4, r7
   262e4:	f7ed fd5a 	bl	13d9c <bt_conn_ref>
   262e8:	4603      	mov	r3, r0
		if (!conn) {
   262ea:	b158      	cbz	r0, 26304 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   262ec:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   262ee:	2d01      	cmp	r5, #1
   262f0:	d002      	beq.n	262f8 <conn_lookup_handle+0x34>
   262f2:	3d07      	subs	r5, #7
   262f4:	2d01      	cmp	r5, #1
   262f6:	d803      	bhi.n	26300 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   262f8:	881a      	ldrh	r2, [r3, #0]
   262fa:	4542      	cmp	r2, r8
   262fc:	d0ed      	beq.n	262da <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   262fe:	4618      	mov	r0, r3
   26300:	f7ed fd74 	bl	13dec <bt_conn_unref>
	for (i = 0; i < size; i++) {
   26304:	3401      	adds	r4, #1
   26306:	e7e5      	b.n	262d4 <conn_lookup_handle+0x10>

00026308 <bt_conn_connected>:
{
   26308:	b510      	push	{r4, lr}
   2630a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2630c:	f7ee faa8 	bl	14860 <bt_l2cap_connected>
	notify_connected(conn);
   26310:	4620      	mov	r0, r4
}
   26312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   26316:	f7ed ba59 	b.w	137cc <notify_connected>

0002631a <bt_conn_disconnect>:
{
   2631a:	b510      	push	{r4, lr}
	switch (conn->state) {
   2631c:	7b43      	ldrb	r3, [r0, #13]
{
   2631e:	4604      	mov	r4, r0
	switch (conn->state) {
   26320:	3b02      	subs	r3, #2
   26322:	2b06      	cmp	r3, #6
   26324:	d816      	bhi.n	26354 <bt_conn_disconnect+0x3a>
   26326:	e8df f003 	tbb	[pc, r3]
   2632a:	1504      	.short	0x1504
   2632c:	0b091515 	.word	0x0b091515
   26330:	09          	.byte	0x09
   26331:	00          	.byte	0x00
		conn->err = reason;
   26332:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   26334:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   26336:	4620      	mov	r0, r4
   26338:	f7ed fd90 	bl	13e5c <bt_conn_set_state>
{
   2633c:	2000      	movs	r0, #0
}
   2633e:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   26340:	8800      	ldrh	r0, [r0, #0]
   26342:	f7ff fcd5 	bl	25cf0 <bt_hci_disconnect>
	if (err) {
   26346:	2800      	cmp	r0, #0
   26348:	d1f9      	bne.n	2633e <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2634a:	7b63      	ldrb	r3, [r4, #13]
   2634c:	2b07      	cmp	r3, #7
   2634e:	d1f5      	bne.n	2633c <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   26350:	2108      	movs	r1, #8
   26352:	e7f0      	b.n	26336 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   26354:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   26358:	e7f1      	b.n	2633e <bt_conn_disconnect+0x24>

0002635a <bt_conn_set_security>:
{
   2635a:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2635c:	7b43      	ldrb	r3, [r0, #13]
{
   2635e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   26360:	2b07      	cmp	r3, #7
{
   26362:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   26364:	d122      	bne.n	263ac <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   26366:	7a43      	ldrb	r3, [r0, #9]
   26368:	428b      	cmp	r3, r1
   2636a:	d215      	bcs.n	26398 <bt_conn_set_security+0x3e>
   2636c:	7a83      	ldrb	r3, [r0, #10]
   2636e:	428b      	cmp	r3, r1
   26370:	d212      	bcs.n	26398 <bt_conn_set_security+0x3e>
	if (val) {
   26372:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   26374:	f100 0004 	add.w	r0, r0, #4
   26378:	d510      	bpl.n	2639c <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2637a:	e8d0 3fef 	ldaex	r3, [r0]
   2637e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   26382:	e8c0 3fe2 	stlex	r2, r3, [r0]
   26386:	2a00      	cmp	r2, #0
   26388:	d1f7      	bne.n	2637a <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2638a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   2638e:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   26390:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   26392:	f7f1 fc05 	bl	17ba0 <bt_smp_start_security>
	if (err) {
   26396:	b930      	cbnz	r0, 263a6 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   26398:	2000      	movs	r0, #0
}
   2639a:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2639c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   263a0:	f7ff ff6a 	bl	26278 <atomic_and>
   263a4:	e7f1      	b.n	2638a <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   263a6:	7a63      	ldrb	r3, [r4, #9]
   263a8:	72a3      	strb	r3, [r4, #10]
   263aa:	e7f6      	b.n	2639a <bt_conn_set_security+0x40>
		return -ENOTCONN;
   263ac:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   263b0:	e7f3      	b.n	2639a <bt_conn_set_security+0x40>

000263b2 <bt_conn_get_security>:
}
   263b2:	7a40      	ldrb	r0, [r0, #9]
   263b4:	4770      	bx	lr

000263b6 <bt_conn_is_peer_addr_le>:
{
   263b6:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   263b8:	7a03      	ldrb	r3, [r0, #8]
{
   263ba:	4604      	mov	r4, r0
	if (id != conn->id) {
   263bc:	428b      	cmp	r3, r1
{
   263be:	4615      	mov	r5, r2
	if (id != conn->id) {
   263c0:	d115      	bne.n	263ee <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   263c2:	f100 0190 	add.w	r1, r0, #144	; 0x90
   263c6:	2207      	movs	r2, #7
   263c8:	4628      	mov	r0, r5
   263ca:	f003 f842 	bl	29452 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   263ce:	b180      	cbz	r0, 263f2 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   263d0:	78e3      	ldrb	r3, [r4, #3]
   263d2:	2207      	movs	r2, #7
   263d4:	b943      	cbnz	r3, 263e8 <bt_conn_is_peer_addr_le+0x32>
   263d6:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   263da:	4628      	mov	r0, r5
   263dc:	f003 f839 	bl	29452 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   263e0:	fab0 f080 	clz	r0, r0
   263e4:	0940      	lsrs	r0, r0, #5
}
   263e6:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   263e8:	f104 0197 	add.w	r1, r4, #151	; 0x97
   263ec:	e7f5      	b.n	263da <bt_conn_is_peer_addr_le+0x24>
		return false;
   263ee:	2000      	movs	r0, #0
   263f0:	e7f9      	b.n	263e6 <bt_conn_is_peer_addr_le+0x30>
		return true;
   263f2:	2001      	movs	r0, #1
   263f4:	e7f7      	b.n	263e6 <bt_conn_is_peer_addr_le+0x30>

000263f6 <bt_conn_get_dst>:
}
   263f6:	3090      	adds	r0, #144	; 0x90
   263f8:	4770      	bx	lr

000263fa <bt_conn_le_conn_update>:
{
   263fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   263fc:	4607      	mov	r7, r0
   263fe:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   26400:	f242 0013 	movw	r0, #8211	; 0x2013
   26404:	210e      	movs	r1, #14
   26406:	f7eb f9ef 	bl	117e8 <bt_hci_cmd_create>
	if (!buf) {
   2640a:	4606      	mov	r6, r0
   2640c:	b1d0      	cbz	r0, 26444 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2640e:	210e      	movs	r1, #14
   26410:	300c      	adds	r0, #12
   26412:	f7f2 ff27 	bl	19264 <net_buf_simple_add>
   26416:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   26418:	220e      	movs	r2, #14
   2641a:	2100      	movs	r1, #0
   2641c:	f003 f863 	bl	294e6 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   26420:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   26422:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   26424:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   26426:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   26428:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2642a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2642c:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2642e:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   26432:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   26434:	88ab      	ldrh	r3, [r5, #4]
   26436:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   26438:	88eb      	ldrh	r3, [r5, #6]
   2643a:	8123      	strh	r3, [r4, #8]
}
   2643c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   26440:	f7eb ba20 	b.w	11884 <bt_hci_cmd_send_sync>
}
   26444:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002644a <l2cap_connected>:
}
   2644a:	4770      	bx	lr

0002644c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2644c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2644e:	ab0b      	add	r3, sp, #44	; 0x2c
   26450:	9305      	str	r3, [sp, #20]
   26452:	9303      	str	r3, [sp, #12]
   26454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26456:	9302      	str	r3, [sp, #8]
   26458:	2300      	movs	r3, #0
   2645a:	4618      	mov	r0, r3
   2645c:	e9cd 3300 	strd	r3, r3, [sp]
   26460:	f7e7 fdd6 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   26464:	b007      	add	sp, #28
   26466:	f85d fb04 	ldr.w	pc, [sp], #4

0002646a <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2646a:	4770      	bx	lr

0002646c <bt_l2cap_chan_del>:
{
   2646c:	b570      	push	{r4, r5, r6, lr}
   2646e:	4604      	mov	r4, r0
	if (!chan->conn) {
   26470:	e9d0 3500 	ldrd	r3, r5, [r0]
   26474:	b123      	cbz	r3, 26480 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   26476:	686b      	ldr	r3, [r5, #4]
   26478:	b103      	cbz	r3, 2647c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2647a:	4798      	blx	r3
	chan->conn = NULL;
   2647c:	2300      	movs	r3, #0
   2647e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   26480:	68e3      	ldr	r3, [r4, #12]
   26482:	b10b      	cbz	r3, 26488 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   26484:	4620      	mov	r0, r4
   26486:	4798      	blx	r3
	if (ops->released) {
   26488:	6a2b      	ldr	r3, [r5, #32]
   2648a:	b11b      	cbz	r3, 26494 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2648c:	4620      	mov	r0, r4
}
   2648e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   26492:	4718      	bx	r3
}
   26494:	bd70      	pop	{r4, r5, r6, pc}

00026496 <bt_l2cap_disconnected>:
{
   26496:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   26498:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2649a:	b130      	cbz	r0, 264aa <bt_l2cap_disconnected+0x14>
	return node->next;
   2649c:	f850 4908 	ldr.w	r4, [r0], #-8
   264a0:	b104      	cbz	r4, 264a4 <bt_l2cap_disconnected+0xe>
   264a2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   264a4:	f7ff ffe2 	bl	2646c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   264a8:	b904      	cbnz	r4, 264ac <bt_l2cap_disconnected+0x16>
}
   264aa:	bd38      	pop	{r3, r4, r5, pc}
   264ac:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   264ae:	b12d      	cbz	r5, 264bc <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   264b0:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   264b2:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   264b4:	f7ff ffda 	bl	2646c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   264b8:	462c      	mov	r4, r5
   264ba:	e7f7      	b.n	264ac <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   264bc:	4620      	mov	r0, r4
}
   264be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   264c2:	f7ff bfd3 	b.w	2646c <bt_l2cap_chan_del>

000264c6 <bt_l2cap_security_changed>:
{
   264c6:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   264c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   264ca:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   264cc:	b1bb      	cbz	r3, 264fe <bt_l2cap_security_changed+0x38>
   264ce:	4618      	mov	r0, r3
	return node->next;
   264d0:	f850 4908 	ldr.w	r4, [r0], #-8
   264d4:	b104      	cbz	r4, 264d8 <bt_l2cap_security_changed+0x12>
   264d6:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   264d8:	f853 3c04 	ldr.w	r3, [r3, #-4]
   264dc:	689b      	ldr	r3, [r3, #8]
   264de:	b10b      	cbz	r3, 264e4 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   264e0:	4629      	mov	r1, r5
   264e2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   264e4:	b15c      	cbz	r4, 264fe <bt_l2cap_security_changed+0x38>
   264e6:	4620      	mov	r0, r4
   264e8:	68a4      	ldr	r4, [r4, #8]
   264ea:	6843      	ldr	r3, [r0, #4]
   264ec:	b124      	cbz	r4, 264f8 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   264ee:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   264f0:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   264f2:	2b00      	cmp	r3, #0
   264f4:	d1f4      	bne.n	264e0 <bt_l2cap_security_changed+0x1a>
   264f6:	e7f6      	b.n	264e6 <bt_l2cap_security_changed+0x20>
   264f8:	689b      	ldr	r3, [r3, #8]
   264fa:	2b00      	cmp	r3, #0
   264fc:	d1f0      	bne.n	264e0 <bt_l2cap_security_changed+0x1a>
}
   264fe:	bd38      	pop	{r3, r4, r5, pc}

00026500 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   26500:	3104      	adds	r1, #4
   26502:	f7ed bdb5 	b.w	14070 <bt_conn_create_pdu_timeout>

00026506 <bt_l2cap_send_cb>:
{
   26506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2650a:	4614      	mov	r4, r2
   2650c:	4605      	mov	r5, r0
   2650e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   26510:	f102 000c 	add.w	r0, r2, #12
   26514:	2104      	movs	r1, #4
   26516:	461e      	mov	r6, r3
   26518:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2651c:	f7f2 fe46 	bl	191ac <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   26520:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   26522:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   26524:	3a04      	subs	r2, #4
   26526:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   26528:	4643      	mov	r3, r8
   2652a:	4632      	mov	r2, r6
   2652c:	4621      	mov	r1, r4
   2652e:	4628      	mov	r0, r5
}
   26530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   26534:	f7ed bb92 	b.w	13c5c <bt_conn_send_cb>

00026538 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   26538:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2653a:	b128      	cbz	r0, 26548 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2653c:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2653e:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   26540:	428b      	cmp	r3, r1
   26542:	d001      	beq.n	26548 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   26544:	6880      	ldr	r0, [r0, #8]
   26546:	e7f8      	b.n	2653a <bt_l2cap_le_lookup_tx_cid+0x2>
}
   26548:	4770      	bx	lr

0002654a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2654a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2654c:	b128      	cbz	r0, 2655a <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2654e:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26550:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   26552:	428b      	cmp	r3, r1
   26554:	d001      	beq.n	2655a <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   26556:	6880      	ldr	r0, [r0, #8]
   26558:	e7f8      	b.n	2654c <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2655a:	4770      	bx	lr

0002655c <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2655c:	4770      	bx	lr

0002655e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2655e:	4603      	mov	r3, r0
	return list->head;
   26560:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   26562:	b128      	cbz	r0, 26570 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26564:	6859      	ldr	r1, [r3, #4]
	return node->next;
   26566:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26568:	4288      	cmp	r0, r1
	list->head = node;
   2656a:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2656c:	bf08      	it	eq
   2656e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   26570:	4770      	bx	lr

00026572 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   26572:	4603      	mov	r3, r0
	size_t bytes = 0;
   26574:	2000      	movs	r0, #0

	while (buf) {
   26576:	b903      	cbnz	r3, 2657a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   26578:	4770      	bx	lr
		bytes += buf->len;
   2657a:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2657c:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2657e:	4410      	add	r0, r2
		buf = buf->frags;
   26580:	e7f9      	b.n	26576 <net_buf_frags_len+0x4>

00026582 <attr_read_type_cb>:
{
   26582:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   26584:	68d4      	ldr	r4, [r2, #12]
   26586:	3102      	adds	r1, #2
   26588:	7823      	ldrb	r3, [r4, #0]
   2658a:	b913      	cbnz	r3, 26592 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2658c:	7021      	strb	r1, [r4, #0]
	return true;
   2658e:	2001      	movs	r0, #1
}
   26590:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   26592:	428b      	cmp	r3, r1
   26594:	d0fb      	beq.n	2658e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   26596:	8a03      	ldrh	r3, [r0, #16]
   26598:	3b02      	subs	r3, #2
   2659a:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2659c:	2000      	movs	r0, #0
   2659e:	6110      	str	r0, [r2, #16]
		return false;
   265a0:	e7f6      	b.n	26590 <attr_read_type_cb+0xe>

000265a2 <att_prepare_write_req>:
}
   265a2:	2006      	movs	r0, #6
   265a4:	4770      	bx	lr

000265a6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   265a6:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   265aa:	4108      	asrs	r0, r1
}
   265ac:	f000 0001 	and.w	r0, r0, #1
   265b0:	4770      	bx	lr

000265b2 <write_cb>:
{
   265b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   265b4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   265b6:	4601      	mov	r1, r0
{
   265b8:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   265ba:	f44f 7295 	mov.w	r2, #298	; 0x12a
   265be:	6820      	ldr	r0, [r4, #0]
   265c0:	f000 fddc 	bl	2717c <bt_gatt_check_perm>
   265c4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   265c6:	bb00      	cbnz	r0, 2660a <write_cb+0x58>
	if (!data->req) {
   265c8:	7a23      	ldrb	r3, [r4, #8]
   265ca:	b1b3      	cbz	r3, 265fa <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   265cc:	f1a3 0218 	sub.w	r2, r3, #24
   265d0:	4253      	negs	r3, r2
   265d2:	4153      	adcs	r3, r2
   265d4:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   265d6:	9301      	str	r3, [sp, #4]
   265d8:	8a63      	ldrh	r3, [r4, #18]
   265da:	4629      	mov	r1, r5
   265dc:	9300      	str	r3, [sp, #0]
   265de:	68ae      	ldr	r6, [r5, #8]
   265e0:	8a23      	ldrh	r3, [r4, #16]
   265e2:	68e2      	ldr	r2, [r4, #12]
   265e4:	6820      	ldr	r0, [r4, #0]
   265e6:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   265e8:	2800      	cmp	r0, #0
   265ea:	db08      	blt.n	265fe <write_cb+0x4c>
   265ec:	8a23      	ldrh	r3, [r4, #16]
   265ee:	4283      	cmp	r3, r0
   265f0:	d10e      	bne.n	26610 <write_cb+0x5e>
	data->err = 0U;
   265f2:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   265f4:	2001      	movs	r0, #1
	data->err = 0U;
   265f6:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   265f8:	e008      	b.n	2660c <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   265fa:	2302      	movs	r3, #2
   265fc:	e7eb      	b.n	265d6 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   265fe:	f110 0fff 	cmn.w	r0, #255	; 0xff
   26602:	d305      	bcc.n	26610 <write_cb+0x5e>
		return -err;
   26604:	4240      	negs	r0, r0
   26606:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   26608:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2660a:	2000      	movs	r0, #0
}
   2660c:	b002      	add	sp, #8
   2660e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   26610:	200e      	movs	r0, #14
   26612:	e7f9      	b.n	26608 <write_cb+0x56>

00026614 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   26614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   26616:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2661a:	2300      	movs	r3, #0
   2661c:	461a      	mov	r2, r3
   2661e:	9300      	str	r3, [sp, #0]
   26620:	f7ef fe0e 	bl	16240 <bt_gatt_foreach_attr_type>
				  user_data);
}
   26624:	b005      	add	sp, #20
   26626:	f85d fb04 	ldr.w	pc, [sp], #4

0002662a <att_chan_mtu_updated>:
{
   2662a:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2662c:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2662e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26630:	b352      	cbz	r2, 26688 <att_chan_mtu_updated+0x5e>
	return node->next;
   26632:	6813      	ldr	r3, [r2, #0]
   26634:	b103      	cbz	r3, 26638 <att_chan_mtu_updated+0xe>
   26636:	3bf0      	subs	r3, #240	; 0xf0
   26638:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   2663c:	2200      	movs	r2, #0
   2663e:	4611      	mov	r1, r2
   26640:	e000      	b.n	26644 <att_chan_mtu_updated+0x1a>
   26642:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   26644:	4284      	cmp	r4, r0
   26646:	d007      	beq.n	26658 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   26648:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2664a:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2664c:	42b1      	cmp	r1, r6
   2664e:	bf38      	it	cc
   26650:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   26652:	42a2      	cmp	r2, r4
   26654:	bf38      	it	cc
   26656:	4622      	movcc	r2, r4
   26658:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2665a:	b12b      	cbz	r3, 26668 <att_chan_mtu_updated+0x3e>
   2665c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   26660:	2b00      	cmp	r3, #0
   26662:	d1ee      	bne.n	26642 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   26664:	4284      	cmp	r4, r0
   26666:	d1ef      	bne.n	26648 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   26668:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2666a:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2666c:	428b      	cmp	r3, r1
   2666e:	d801      	bhi.n	26674 <att_chan_mtu_updated+0x4a>
   26670:	4290      	cmp	r0, r2
   26672:	d90b      	bls.n	2668c <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   26674:	4282      	cmp	r2, r0
   26676:	bf38      	it	cc
   26678:	4602      	movcc	r2, r0
   2667a:	4299      	cmp	r1, r3
   2667c:	6828      	ldr	r0, [r5, #0]
   2667e:	bf38      	it	cc
   26680:	4619      	movcc	r1, r3
}
   26682:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   26684:	f7f0 bb7a 	b.w	16d7c <bt_gatt_att_max_mtu_changed>
   26688:	4611      	mov	r1, r2
   2668a:	e7ed      	b.n	26668 <att_chan_mtu_updated+0x3e>
}
   2668c:	bc70      	pop	{r4, r5, r6}
   2668e:	4770      	bx	lr

00026690 <attr_read_group_cb>:
	if (!data->rsp->len) {
   26690:	68d0      	ldr	r0, [r2, #12]
   26692:	3104      	adds	r1, #4
   26694:	7803      	ldrb	r3, [r0, #0]
   26696:	b913      	cbnz	r3, 2669e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   26698:	7001      	strb	r1, [r0, #0]
	return true;
   2669a:	2001      	movs	r0, #1
   2669c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2669e:	428b      	cmp	r3, r1
   266a0:	d0fb      	beq.n	2669a <attr_read_group_cb+0xa>
		data->group = NULL;
   266a2:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   266a4:	6891      	ldr	r1, [r2, #8]
   266a6:	8a0b      	ldrh	r3, [r1, #16]
   266a8:	3b04      	subs	r3, #4
   266aa:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   266ac:	6110      	str	r0, [r2, #16]
}
   266ae:	4770      	bx	lr

000266b0 <find_info_cb>:
{
   266b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   266b2:	6893      	ldr	r3, [r2, #8]
{
   266b4:	4605      	mov	r5, r0
   266b6:	460f      	mov	r7, r1
   266b8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   266ba:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   266bc:	b963      	cbnz	r3, 266d8 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   266be:	6850      	ldr	r0, [r2, #4]
   266c0:	2101      	movs	r1, #1
   266c2:	300c      	adds	r0, #12
   266c4:	f7f2 fdce 	bl	19264 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   266c8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   266ca:	682b      	ldr	r3, [r5, #0]
   266cc:	781b      	ldrb	r3, [r3, #0]
   266ce:	2b00      	cmp	r3, #0
   266d0:	bf14      	ite	ne
   266d2:	2302      	movne	r3, #2
   266d4:	2301      	moveq	r3, #1
   266d6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   266d8:	68a3      	ldr	r3, [r4, #8]
   266da:	781b      	ldrb	r3, [r3, #0]
   266dc:	2b01      	cmp	r3, #1
   266de:	d003      	beq.n	266e8 <find_info_cb+0x38>
   266e0:	2b02      	cmp	r3, #2
   266e2:	d019      	beq.n	26718 <find_info_cb+0x68>
   266e4:	2000      	movs	r0, #0
   266e6:	e016      	b.n	26716 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   266e8:	682b      	ldr	r3, [r5, #0]
   266ea:	781b      	ldrb	r3, [r3, #0]
   266ec:	2b00      	cmp	r3, #0
   266ee:	d1f9      	bne.n	266e4 <find_info_cb+0x34>
   266f0:	6860      	ldr	r0, [r4, #4]
   266f2:	2104      	movs	r1, #4
   266f4:	300c      	adds	r0, #12
   266f6:	f7f2 fdb5 	bl	19264 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   266fa:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   266fc:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   266fe:	682a      	ldr	r2, [r5, #0]
   26700:	68e3      	ldr	r3, [r4, #12]
   26702:	8852      	ldrh	r2, [r2, #2]
   26704:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   26706:	6863      	ldr	r3, [r4, #4]
   26708:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2670a:	8a1b      	ldrh	r3, [r3, #16]
   2670c:	1ac0      	subs	r0, r0, r3
   2670e:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   26710:	bf94      	ite	ls
   26712:	2000      	movls	r0, #0
   26714:	2001      	movhi	r0, #1
}
   26716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   26718:	682b      	ldr	r3, [r5, #0]
   2671a:	781b      	ldrb	r3, [r3, #0]
   2671c:	2b02      	cmp	r3, #2
   2671e:	d1e1      	bne.n	266e4 <find_info_cb+0x34>
   26720:	6860      	ldr	r0, [r4, #4]
   26722:	2112      	movs	r1, #18
   26724:	300c      	adds	r0, #12
   26726:	f7f2 fd9d 	bl	19264 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2672a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2672c:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2672e:	682b      	ldr	r3, [r5, #0]
   26730:	68e2      	ldr	r2, [r4, #12]
   26732:	1c59      	adds	r1, r3, #1
   26734:	3202      	adds	r2, #2
   26736:	3311      	adds	r3, #17
   26738:	f851 0b04 	ldr.w	r0, [r1], #4
   2673c:	4299      	cmp	r1, r3
   2673e:	f842 0b04 	str.w	r0, [r2], #4
   26742:	d1f9      	bne.n	26738 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   26744:	6863      	ldr	r3, [r4, #4]
   26746:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   26748:	8a1b      	ldrh	r3, [r3, #16]
   2674a:	1ac0      	subs	r0, r0, r3
   2674c:	2812      	cmp	r0, #18
   2674e:	e7df      	b.n	26710 <find_info_cb+0x60>

00026750 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26750:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26752:	ab0b      	add	r3, sp, #44	; 0x2c
   26754:	9305      	str	r3, [sp, #20]
   26756:	9303      	str	r3, [sp, #12]
   26758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2675a:	9302      	str	r3, [sp, #8]
   2675c:	2300      	movs	r3, #0
   2675e:	4618      	mov	r0, r3
   26760:	e9cd 3300 	strd	r3, r3, [sp]
   26764:	f7e7 fc54 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   26768:	b007      	add	sp, #28
   2676a:	f85d fb04 	ldr.w	pc, [sp], #4

0002676e <chan_req_send>:
{
   2676e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26770:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   26772:	6888      	ldr	r0, [r1, #8]
   26774:	f7ff fefd 	bl	26572 <net_buf_frags_len>
   26778:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   2677a:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2677c:	4283      	cmp	r3, r0
   2677e:	d30d      	bcc.n	2679c <chan_req_send+0x2e>
	req->buf = NULL;
   26780:	2600      	movs	r6, #0
	chan->req = req;
   26782:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   26786:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   26788:	4628      	mov	r0, r5
	req->buf = NULL;
   2678a:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2678c:	4639      	mov	r1, r7
   2678e:	f7ee faaf 	bl	14cf0 <chan_send>
	if (err) {
   26792:	b110      	cbz	r0, 2679a <chan_req_send+0x2c>
		req->buf = buf;
   26794:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   26796:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   2679a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2679c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   267a0:	e7fb      	b.n	2679a <chan_req_send+0x2c>

000267a2 <process_queue>:
{
   267a2:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   267a4:	2200      	movs	r2, #0
{
   267a6:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   267a8:	2300      	movs	r3, #0
   267aa:	4608      	mov	r0, r1
{
   267ac:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   267ae:	f001 f8cb 	bl	27948 <net_buf_get>
	if (buf) {
   267b2:	4605      	mov	r5, r0
   267b4:	b158      	cbz	r0, 267ce <process_queue+0x2c>
	return chan_send(chan, buf);
   267b6:	4601      	mov	r1, r0
   267b8:	4620      	mov	r0, r4
   267ba:	f7ee fa99 	bl	14cf0 <chan_send>
		if (err) {
   267be:	4604      	mov	r4, r0
   267c0:	b118      	cbz	r0, 267ca <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   267c2:	4629      	mov	r1, r5
   267c4:	4630      	mov	r0, r6
   267c6:	f002 fc96 	bl	290f6 <k_queue_prepend>
}
   267ca:	4620      	mov	r0, r4
   267cc:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   267ce:	f06f 0401 	mvn.w	r4, #1
   267d2:	e7fa      	b.n	267ca <process_queue+0x28>

000267d4 <bt_att_chan_send_rsp>:
{
   267d4:	b538      	push	{r3, r4, r5, lr}
   267d6:	4604      	mov	r4, r0
   267d8:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   267da:	f7ee fa89 	bl	14cf0 <chan_send>
	if (err) {
   267de:	b130      	cbz	r0, 267ee <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   267e0:	4629      	mov	r1, r5
   267e2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   267e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   267ea:	f7f2 bbf3 	b.w	18fd4 <net_buf_put>
}
   267ee:	bd38      	pop	{r3, r4, r5, pc}

000267f0 <att_chan_read>:
{
   267f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267f4:	4680      	mov	r8, r0
   267f6:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   267f8:	4610      	mov	r0, r2
{
   267fa:	4699      	mov	r9, r3
   267fc:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   267fe:	f7ff feb8 	bl	26572 <net_buf_frags_len>
   26802:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   26806:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26808:	4283      	cmp	r3, r0
   2680a:	d97a      	bls.n	26902 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2680c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   26810:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   26812:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   26814:	f7f2 fc60 	bl	190d8 <net_buf_frag_last>
	size_t len, total = 0;
   26818:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2681c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2681e:	4630      	mov	r0, r6
   26820:	f7ff fea7 	bl	26572 <net_buf_frags_len>
   26824:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   26828:	f105 070c 	add.w	r7, r5, #12
   2682c:	1a24      	subs	r4, r4, r0
   2682e:	4638      	mov	r0, r7
   26830:	f001 f89f 	bl	27972 <net_buf_simple_tailroom>
   26834:	4284      	cmp	r4, r0
   26836:	d211      	bcs.n	2685c <att_chan_read+0x6c>
   26838:	4630      	mov	r0, r6
   2683a:	f7ff fe9a 	bl	26572 <net_buf_frags_len>
   2683e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   26842:	1a24      	subs	r4, r4, r0
		if (!len) {
   26844:	bb34      	cbnz	r4, 26894 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   26846:	7ab0      	ldrb	r0, [r6, #10]
   26848:	f7f2 f9b0 	bl	18bac <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2684c:	2200      	movs	r2, #0
   2684e:	2300      	movs	r3, #0
   26850:	f001 f875 	bl	2793e <net_buf_alloc_fixed>
			if (!frag) {
   26854:	4605      	mov	r5, r0
   26856:	b930      	cbnz	r0, 26866 <att_chan_read+0x76>
	return total;
   26858:	4657      	mov	r7, sl
   2685a:	e02c      	b.n	268b6 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2685c:	4638      	mov	r0, r7
   2685e:	f001 f888 	bl	27972 <net_buf_simple_tailroom>
   26862:	4604      	mov	r4, r0
   26864:	e7ee      	b.n	26844 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   26866:	4601      	mov	r1, r0
   26868:	4630      	mov	r0, r6
   2686a:	f7f2 fc7b 	bl	19164 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2686e:	4630      	mov	r0, r6
   26870:	f7ff fe7f 	bl	26572 <net_buf_frags_len>
   26874:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   26878:	f105 070c 	add.w	r7, r5, #12
   2687c:	1a24      	subs	r4, r4, r0
   2687e:	4638      	mov	r0, r7
   26880:	f001 f877 	bl	27972 <net_buf_simple_tailroom>
   26884:	4284      	cmp	r4, r0
   26886:	d21a      	bcs.n	268be <att_chan_read+0xce>
   26888:	4630      	mov	r0, r6
   2688a:	f7ff fe72 	bl	26572 <net_buf_frags_len>
   2688e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   26892:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   26894:	68e9      	ldr	r1, [r5, #12]
   26896:	8a2a      	ldrh	r2, [r5, #16]
   26898:	f8cd 9000 	str.w	r9, [sp]
   2689c:	f8db 7004 	ldr.w	r7, [fp, #4]
   268a0:	440a      	add	r2, r1
   268a2:	9803      	ldr	r0, [sp, #12]
   268a4:	4659      	mov	r1, fp
   268a6:	b2a3      	uxth	r3, r4
   268a8:	47b8      	blx	r7
		if (read < 0) {
   268aa:	1e07      	subs	r7, r0, #0
   268ac:	da0c      	bge.n	268c8 <att_chan_read+0xd8>
				return total;
   268ae:	f1ba 0f00 	cmp.w	sl, #0
   268b2:	bf18      	it	ne
   268b4:	4657      	movne	r7, sl
}
   268b6:	4638      	mov	r0, r7
   268b8:	b005      	add	sp, #20
   268ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   268be:	4638      	mov	r0, r7
   268c0:	f001 f857 	bl	27972 <net_buf_simple_tailroom>
   268c4:	4604      	mov	r4, r0
   268c6:	e7e5      	b.n	26894 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   268c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   268ca:	b993      	cbnz	r3, 268f2 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   268cc:	4639      	mov	r1, r7
   268ce:	f105 000c 	add.w	r0, r5, #12
   268d2:	f7f2 fcc7 	bl	19264 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   268d6:	4630      	mov	r0, r6
   268d8:	f7ff fe4b 	bl	26572 <net_buf_frags_len>
   268dc:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   268e0:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   268e2:	4283      	cmp	r3, r0
		total += read;
   268e4:	44ba      	add	sl, r7
		offset += read;
   268e6:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   268ea:	d9b5      	bls.n	26858 <att_chan_read+0x68>
   268ec:	42a7      	cmp	r7, r4
   268ee:	d096      	beq.n	2681e <att_chan_read+0x2e>
   268f0:	e7b2      	b.n	26858 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   268f2:	4639      	mov	r1, r7
   268f4:	4628      	mov	r0, r5
   268f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   268f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   268fa:	4798      	blx	r3
   268fc:	2800      	cmp	r0, #0
   268fe:	d1e5      	bne.n	268cc <att_chan_read+0xdc>
   26900:	e7aa      	b.n	26858 <att_chan_read+0x68>
		return 0;
   26902:	2700      	movs	r7, #0
   26904:	e7d7      	b.n	268b6 <att_chan_read+0xc6>

00026906 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26906:	2200      	movs	r2, #0
	return list->head;
   26908:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2690a:	b903      	cbnz	r3, 2690e <sys_slist_find_and_remove.isra.0+0x8>
   2690c:	4770      	bx	lr
   2690e:	428b      	cmp	r3, r1
   26910:	d10f      	bne.n	26932 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   26912:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26914:	b93a      	cbnz	r2, 26926 <sys_slist_find_and_remove.isra.0+0x20>
   26916:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   26918:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2691a:	4291      	cmp	r1, r2
   2691c:	d100      	bne.n	26920 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2691e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   26920:	2300      	movs	r3, #0
   26922:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   26924:	4770      	bx	lr
	parent->next = child;
   26926:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26928:	6843      	ldr	r3, [r0, #4]
   2692a:	4299      	cmp	r1, r3
	list->tail = node;
   2692c:	bf08      	it	eq
   2692e:	6042      	streq	r2, [r0, #4]
}
   26930:	e7f6      	b.n	26920 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   26932:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26934:	681b      	ldr	r3, [r3, #0]
   26936:	e7e8      	b.n	2690a <sys_slist_find_and_remove.isra.0+0x4>

00026938 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   26938:	2006      	movs	r0, #6
   2693a:	4770      	bx	lr

0002693c <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2693c:	2301      	movs	r3, #1
{
   2693e:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26940:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26944:	e8d0 3fef 	ldaex	r3, [r0]
   26948:	ea43 0201 	orr.w	r2, r3, r1
   2694c:	e8c0 2fe4 	stlex	r4, r2, [r0]
   26950:	2c00      	cmp	r4, #0
   26952:	d1f7      	bne.n	26944 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   26954:	4219      	tst	r1, r3
}
   26956:	bf14      	ite	ne
   26958:	2001      	movne	r0, #1
   2695a:	2000      	moveq	r0, #0
   2695c:	bd10      	pop	{r4, pc}

0002695e <read_cb>:
{
   2695e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   26960:	2300      	movs	r3, #0
{
   26962:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   26964:	6816      	ldr	r6, [r2, #0]
{
   26966:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   26968:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2696a:	4629      	mov	r1, r5
	data->err = 0x00;
   2696c:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2696e:	2295      	movs	r2, #149	; 0x95
   26970:	f000 fc04 	bl	2717c <bt_gatt_check_perm>
   26974:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   26976:	b980      	cbnz	r0, 2699a <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   26978:	e9cd 0000 	strd	r0, r0, [sp]
   2697c:	4629      	mov	r1, r5
   2697e:	4630      	mov	r0, r6
   26980:	88a3      	ldrh	r3, [r4, #4]
   26982:	68a2      	ldr	r2, [r4, #8]
   26984:	f7ff ff34 	bl	267f0 <att_chan_read>
	if (ret < 0) {
   26988:	2800      	cmp	r0, #0
   2698a:	da09      	bge.n	269a0 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2698c:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   26990:	bf32      	itee	cc
   26992:	200e      	movcc	r0, #14
		return -err;
   26994:	4240      	negcs	r0, r0
   26996:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   26998:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2699a:	2000      	movs	r0, #0
}
   2699c:	b002      	add	sp, #8
   2699e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   269a0:	2001      	movs	r0, #1
   269a2:	e7fb      	b.n	2699c <read_cb+0x3e>

000269a4 <read_vl_cb>:
{
   269a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   269a8:	2300      	movs	r3, #0
{
   269aa:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   269ac:	f8d2 8000 	ldr.w	r8, [r2]
{
   269b0:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   269b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   269b6:	4631      	mov	r1, r6
	data->err = 0x00;
   269b8:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   269ba:	2295      	movs	r2, #149	; 0x95
   269bc:	f000 fbde 	bl	2717c <bt_gatt_check_perm>
   269c0:	4605      	mov	r5, r0
   269c2:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   269c4:	b9e0      	cbnz	r0, 26a00 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   269c6:	68a0      	ldr	r0, [r4, #8]
   269c8:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   269cc:	8a02      	ldrh	r2, [r0, #16]
   269ce:	1a9b      	subs	r3, r3, r2
   269d0:	2b01      	cmp	r3, #1
   269d2:	dd15      	ble.n	26a00 <read_vl_cb+0x5c>
   269d4:	2102      	movs	r1, #2
   269d6:	300c      	adds	r0, #12
   269d8:	f7f2 fc44 	bl	19264 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   269dc:	e9cd 5500 	strd	r5, r5, [sp]
   269e0:	4607      	mov	r7, r0
   269e2:	88a3      	ldrh	r3, [r4, #4]
   269e4:	4631      	mov	r1, r6
   269e6:	4640      	mov	r0, r8
   269e8:	68a2      	ldr	r2, [r4, #8]
   269ea:	f7ff ff01 	bl	267f0 <att_chan_read>
	if (read < 0) {
   269ee:	1e03      	subs	r3, r0, #0
   269f0:	da0a      	bge.n	26a08 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   269f2:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   269f6:	bf32      	itee	cc
   269f8:	230e      	movcc	r3, #14
		return -err;
   269fa:	425b      	negcs	r3, r3
   269fc:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   269fe:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   26a00:	2000      	movs	r0, #0
}
   26a02:	b002      	add	sp, #8
   26a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   26a08:	2001      	movs	r0, #1
	rsp->len = read;
   26a0a:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   26a0c:	e7f9      	b.n	26a02 <read_vl_cb+0x5e>

00026a0e <bt_att_sent>:
{
   26a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a10:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   26a12:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   26a16:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26a18:	f100 0394 	add.w	r3, r0, #148	; 0x94
   26a1c:	e8d3 1fef 	ldaex	r1, [r3]
   26a20:	f021 0110 	bic.w	r1, r1, #16
   26a24:	e8c3 1fe2 	stlex	r2, r1, [r3]
   26a28:	2a00      	cmp	r2, #0
   26a2a:	d1f7      	bne.n	26a1c <bt_att_sent+0xe>
	if (!att) {
   26a2c:	b30c      	cbz	r4, 26a72 <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   26a2e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   26a32:	b98b      	cbnz	r3, 26a58 <bt_att_sent+0x4a>
   26a34:	6863      	ldr	r3, [r4, #4]
   26a36:	b17b      	cbz	r3, 26a58 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   26a38:	1d20      	adds	r0, r4, #4
   26a3a:	f7ff fd90 	bl	2655e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26a3e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   26a40:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26a42:	4638      	mov	r0, r7
   26a44:	f7ff fe93 	bl	2676e <chan_req_send>
   26a48:	2800      	cmp	r0, #0
   26a4a:	da12      	bge.n	26a72 <bt_att_sent+0x64>
	return list->head;
   26a4c:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   26a4e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   26a50:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   26a52:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   26a54:	b903      	cbnz	r3, 26a58 <bt_att_sent+0x4a>
	list->tail = node;
   26a56:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   26a58:	4638      	mov	r0, r7
   26a5a:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   26a5e:	f7ff fea0 	bl	267a2 <process_queue>
	if (!err) {
   26a62:	b130      	cbz	r0, 26a72 <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   26a64:	4638      	mov	r0, r7
   26a66:	f104 010c 	add.w	r1, r4, #12
}
   26a6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   26a6e:	f7ff be98 	b.w	267a2 <process_queue>
}
   26a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026a74 <att_req_send_process>:
{
   26a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   26a78:	6a84      	ldr	r4, [r0, #40]	; 0x28
   26a7a:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26a7c:	2c00      	cmp	r4, #0
   26a7e:	d03b      	beq.n	26af8 <att_req_send_process+0x84>
	return node->next;
   26a80:	f854 69f0 	ldr.w	r6, [r4], #-240
   26a84:	b106      	cbz	r6, 26a88 <att_req_send_process+0x14>
   26a86:	3ef0      	subs	r6, #240	; 0xf0
{
   26a88:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   26a8a:	f108 0704 	add.w	r7, r8, #4
{
   26a8e:	461d      	mov	r5, r3
   26a90:	e013      	b.n	26aba <att_req_send_process+0x46>
		if (!req && prev &&
   26a92:	b1c3      	cbz	r3, 26ac6 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   26a94:	2103      	movs	r1, #3
   26a96:	f104 0098 	add.w	r0, r4, #152	; 0x98
   26a9a:	f7ff fd84 	bl	265a6 <atomic_test_bit>
   26a9e:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   26aa0:	f103 0098 	add.w	r0, r3, #152	; 0x98
   26aa4:	f7ff fd7f 	bl	265a6 <atomic_test_bit>
		if (!req && prev &&
   26aa8:	4282      	cmp	r2, r0
   26aaa:	d10c      	bne.n	26ac6 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26aac:	b326      	cbz	r6, 26af8 <att_req_send_process+0x84>
   26aae:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   26ab2:	b102      	cbz	r2, 26ab6 <att_req_send_process+0x42>
   26ab4:	3af0      	subs	r2, #240	; 0xf0
{
   26ab6:	4634      	mov	r4, r6
   26ab8:	4616      	mov	r6, r2
		if (chan->req) {
   26aba:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   26abe:	2a00      	cmp	r2, #0
   26ac0:	d1f4      	bne.n	26aac <att_req_send_process+0x38>
		if (!req && prev &&
   26ac2:	2d00      	cmp	r5, #0
   26ac4:	d0e5      	beq.n	26a92 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   26ac6:	4638      	mov	r0, r7
   26ac8:	f7ff fd49 	bl	2655e <sys_slist_get>
	if (node) {
   26acc:	4605      	mov	r5, r0
   26ace:	b908      	cbnz	r0, 26ad4 <att_req_send_process+0x60>
   26ad0:	4623      	mov	r3, r4
   26ad2:	e7eb      	b.n	26aac <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   26ad4:	4601      	mov	r1, r0
   26ad6:	4620      	mov	r0, r4
   26ad8:	f7ee f97e 	bl	14dd8 <bt_att_chan_req_send>
   26adc:	2800      	cmp	r0, #0
   26ade:	da0b      	bge.n	26af8 <att_req_send_process+0x84>
	return list->head;
   26ae0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   26ae4:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   26ae6:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   26aea:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   26aee:	2b00      	cmp	r3, #0
   26af0:	d1ee      	bne.n	26ad0 <att_req_send_process+0x5c>
	list->tail = node;
   26af2:	f8c8 5008 	str.w	r5, [r8, #8]
}
   26af6:	e7eb      	b.n	26ad0 <att_req_send_process+0x5c>
}
   26af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026afc <bt_att_status>:
{
   26afc:	b538      	push	{r3, r4, r5, lr}
   26afe:	4605      	mov	r5, r0
   26b00:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   26b02:	2100      	movs	r1, #0
   26b04:	f7ff fd4f 	bl	265a6 <atomic_test_bit>
   26b08:	b1c0      	cbz	r0, 26b3c <bt_att_status+0x40>
	if (!chan->att) {
   26b0a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   26b0e:	b1a8      	cbz	r0, 26b3c <bt_att_status+0x40>
	if (chan->req) {
   26b10:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   26b14:	b993      	cbnz	r3, 26b3c <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   26b16:	3004      	adds	r0, #4
   26b18:	f7ff fd21 	bl	2655e <sys_slist_get>
	if (!node) {
   26b1c:	4604      	mov	r4, r0
   26b1e:	b168      	cbz	r0, 26b3c <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26b20:	4601      	mov	r1, r0
   26b22:	1f28      	subs	r0, r5, #4
   26b24:	f7ee f958 	bl	14dd8 <bt_att_chan_req_send>
   26b28:	2800      	cmp	r0, #0
   26b2a:	da07      	bge.n	26b3c <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   26b2c:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   26b30:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   26b32:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   26b34:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   26b36:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   26b38:	b902      	cbnz	r2, 26b3c <bt_att_status+0x40>
	list->tail = node;
   26b3a:	609c      	str	r4, [r3, #8]
}
   26b3c:	bd38      	pop	{r3, r4, r5, pc}

00026b3e <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   26b3e:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   26b40:	6883      	ldr	r3, [r0, #8]
   26b42:	699b      	ldr	r3, [r3, #24]
   26b44:	b10b      	cbz	r3, 26b4a <att_sent+0xc>
		chan->ops->sent(chan);
   26b46:	3004      	adds	r0, #4
   26b48:	4718      	bx	r3
}
   26b4a:	4770      	bx	lr

00026b4c <att_tx_complete>:
{
   26b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26b50:	4606      	mov	r6, r0
   26b52:	460d      	mov	r5, r1
	if (!err) {
   26b54:	4614      	mov	r4, r2
   26b56:	b122      	cbz	r2, 26b62 <att_tx_complete+0x16>
}
   26b58:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   26b5c:	4608      	mov	r0, r1
   26b5e:	f7ed bffb 	b.w	14b58 <tx_meta_data_free>
		att_sent(conn, user_data);
   26b62:	f7ff ffec 	bl	26b3e <att_sent>
	bt_gatt_complete_func_t func = data->func;
   26b66:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   26b68:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   26b6a:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   26b6e:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   26b72:	f7ed fff1 	bl	14b58 <tx_meta_data_free>
	if (!err && func) {
   26b76:	b92f      	cbnz	r7, 26b84 <att_tx_complete+0x38>
}
   26b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   26b7c:	4649      	mov	r1, r9
   26b7e:	4630      	mov	r0, r6
   26b80:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   26b82:	3401      	adds	r4, #1
   26b84:	b2a3      	uxth	r3, r4
   26b86:	4543      	cmp	r3, r8
   26b88:	d3f8      	bcc.n	26b7c <att_tx_complete+0x30>
   26b8a:	e7f5      	b.n	26b78 <att_tx_complete+0x2c>

00026b8c <att_req_sent>:
{
   26b8c:	b510      	push	{r4, lr}
   26b8e:	460c      	mov	r4, r1
	if (!err) {
   26b90:	b90a      	cbnz	r2, 26b96 <att_req_sent+0xa>
		att_sent(conn, user_data);
   26b92:	f7ff ffd4 	bl	26b3e <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   26b96:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   26b98:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   26b9c:	b12b      	cbz	r3, 26baa <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   26b9e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   26ba2:	2300      	movs	r3, #0
   26ba4:	30c0      	adds	r0, #192	; 0xc0
   26ba6:	f7f9 fd39 	bl	2061c <k_work_reschedule>
	tx_meta_data_free(user_data);
   26baa:	4620      	mov	r0, r4
}
   26bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   26bb0:	f7ed bfd2 	b.w	14b58 <tx_meta_data_free>

00026bb4 <att_cfm_sent>:
{
   26bb4:	b510      	push	{r4, lr}
   26bb6:	460c      	mov	r4, r1
	if (!err) {
   26bb8:	b90a      	cbnz	r2, 26bbe <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   26bba:	f7ff ffc0 	bl	26b3e <att_sent>
   26bbe:	6823      	ldr	r3, [r4, #0]
   26bc0:	3398      	adds	r3, #152	; 0x98
   26bc2:	e8d3 1fef 	ldaex	r1, [r3]
   26bc6:	f021 0102 	bic.w	r1, r1, #2
   26bca:	e8c3 1fe2 	stlex	r2, r1, [r3]
   26bce:	2a00      	cmp	r2, #0
   26bd0:	d1f7      	bne.n	26bc2 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   26bd2:	4620      	mov	r0, r4
}
   26bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   26bd8:	f7ed bfbe 	b.w	14b58 <tx_meta_data_free>

00026bdc <att_rsp_sent>:
{
   26bdc:	b510      	push	{r4, lr}
   26bde:	460c      	mov	r4, r1
	if (!err) {
   26be0:	b90a      	cbnz	r2, 26be6 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   26be2:	f7ff ffac 	bl	26b3e <att_sent>
   26be6:	6823      	ldr	r3, [r4, #0]
   26be8:	3398      	adds	r3, #152	; 0x98
   26bea:	e8d3 1fef 	ldaex	r1, [r3]
   26bee:	f021 0101 	bic.w	r1, r1, #1
   26bf2:	e8c3 1fe2 	stlex	r2, r1, [r3]
   26bf6:	2a00      	cmp	r2, #0
   26bf8:	d1f7      	bne.n	26bea <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   26bfa:	4620      	mov	r0, r4
}
   26bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   26c00:	f7ed bfaa 	b.w	14b58 <tx_meta_data_free>

00026c04 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   26c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26c08:	4688      	mov	r8, r1
   26c0a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   26c0c:	2101      	movs	r1, #1
   26c0e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   26c10:	4605      	mov	r5, r0
   26c12:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   26c14:	f7ee faa2 	bl	1515c <bt_att_chan_create_pdu>
	if (!buf) {
   26c18:	4604      	mov	r4, r0
   26c1a:	b170      	cbz	r0, 26c3a <send_err_rsp.part.0+0x36>
   26c1c:	2104      	movs	r1, #4
   26c1e:	300c      	adds	r0, #12
   26c20:	f7f2 fb20 	bl	19264 <net_buf_simple_add>
	rsp->request = req;
   26c24:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   26c28:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   26c2c:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   26c2e:	4621      	mov	r1, r4
   26c30:	4628      	mov	r0, r5
}
   26c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   26c36:	f7ff bdcd 	b.w	267d4 <bt_att_chan_send_rsp>
}
   26c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026c3e <att_write_req>:
{
   26c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26c40:	460c      	mov	r4, r1
   26c42:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   26c44:	f101 000c 	add.w	r0, r1, #12
   26c48:	f000 fe87 	bl	2795a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   26c4c:	8a22      	ldrh	r2, [r4, #16]
   26c4e:	4603      	mov	r3, r0
   26c50:	9201      	str	r2, [sp, #4]
   26c52:	68e2      	ldr	r2, [r4, #12]
   26c54:	2112      	movs	r1, #18
   26c56:	9200      	str	r2, [sp, #0]
   26c58:	4628      	mov	r0, r5
   26c5a:	2213      	movs	r2, #19
   26c5c:	f7ee fb76 	bl	1534c <att_write_rsp.constprop.0>
}
   26c60:	b003      	add	sp, #12
   26c62:	bd30      	pop	{r4, r5, pc}

00026c64 <att_write_cmd>:
{
   26c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26c66:	460c      	mov	r4, r1
   26c68:	4605      	mov	r5, r0
   26c6a:	f101 000c 	add.w	r0, r1, #12
   26c6e:	f000 fe74 	bl	2795a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   26c72:	8a22      	ldrh	r2, [r4, #16]
   26c74:	4603      	mov	r3, r0
   26c76:	9201      	str	r2, [sp, #4]
   26c78:	68e2      	ldr	r2, [r4, #12]
   26c7a:	4628      	mov	r0, r5
   26c7c:	9200      	str	r2, [sp, #0]
   26c7e:	2200      	movs	r2, #0
   26c80:	4611      	mov	r1, r2
   26c82:	f7ee fb63 	bl	1534c <att_write_rsp.constprop.0>
}
   26c86:	b003      	add	sp, #12
   26c88:	bd30      	pop	{r4, r5, pc}

00026c8a <att_read_blob_req>:
{
   26c8a:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   26c8c:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   26c8e:	210c      	movs	r1, #12
   26c90:	8813      	ldrh	r3, [r2, #0]
   26c92:	8852      	ldrh	r2, [r2, #2]
   26c94:	9200      	str	r2, [sp, #0]
   26c96:	220d      	movs	r2, #13
   26c98:	f7ee fd1a 	bl	156d0 <att_read_rsp>
}
   26c9c:	b003      	add	sp, #12
   26c9e:	f85d fb04 	ldr.w	pc, [sp], #4

00026ca2 <att_read_req>:
{
   26ca2:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   26ca4:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   26ca6:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   26ca8:	210a      	movs	r1, #10
   26caa:	881b      	ldrh	r3, [r3, #0]
   26cac:	9200      	str	r2, [sp, #0]
   26cae:	220b      	movs	r2, #11
   26cb0:	f7ee fd0e 	bl	156d0 <att_read_rsp>
}
   26cb4:	b003      	add	sp, #12
   26cb6:	f85d fb04 	ldr.w	pc, [sp], #4

00026cba <att_mtu_req>:
{
   26cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26cbc:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   26cbe:	f850 2b98 	ldr.w	r2, [r0], #152
{
   26cc2:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   26cc4:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   26cc6:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   26cc8:	f7ff fc6d 	bl	265a6 <atomic_test_bit>
   26ccc:	4604      	mov	r4, r0
   26cce:	b9f0      	cbnz	r0, 26d0e <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   26cd0:	68db      	ldr	r3, [r3, #12]
   26cd2:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   26cd4:	2e16      	cmp	r6, #22
   26cd6:	d91c      	bls.n	26d12 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   26cd8:	4638      	mov	r0, r7
   26cda:	2202      	movs	r2, #2
   26cdc:	f7ee fb9a 	bl	15414 <bt_att_create_pdu>
	if (!pdu) {
   26ce0:	4607      	mov	r7, r0
   26ce2:	b1c0      	cbz	r0, 26d16 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   26ce4:	2102      	movs	r1, #2
   26ce6:	300c      	adds	r0, #12
   26ce8:	f7f2 fabc 	bl	19264 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   26cec:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   26cee:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   26cf0:	7003      	strb	r3, [r0, #0]
   26cf2:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   26cf4:	4628      	mov	r0, r5
   26cf6:	f7ff fd6d 	bl	267d4 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   26cfa:	2e41      	cmp	r6, #65	; 0x41
   26cfc:	bf28      	it	cs
   26cfe:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   26d00:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   26d02:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   26d04:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   26d06:	f7ff fc90 	bl	2662a <att_chan_mtu_updated>
	return 0;
   26d0a:	4620      	mov	r0, r4
}
   26d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   26d0e:	2006      	movs	r0, #6
   26d10:	e7fc      	b.n	26d0c <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   26d12:	2004      	movs	r0, #4
   26d14:	e7fa      	b.n	26d0c <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   26d16:	200e      	movs	r0, #14
   26d18:	e7f8      	b.n	26d0c <att_mtu_req+0x52>

00026d1a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   26d1a:	8a0a      	ldrh	r2, [r1, #16]
   26d1c:	2300      	movs	r3, #0
   26d1e:	68c9      	ldr	r1, [r1, #12]
   26d20:	f7ee be80 	b.w	15a24 <att_handle_rsp>

00026d24 <bt_att_encrypt_change>:
{
   26d24:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   26d26:	4606      	mov	r6, r0
	if (!att_chan->att) {
   26d28:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   26d2c:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   26d2e:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   26d32:	2b00      	cmp	r3, #0
   26d34:	d038      	beq.n	26da8 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   26d36:	b141      	cbz	r1, 26d4a <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   26d38:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   26d3c:	2b00      	cmp	r3, #0
   26d3e:	d033      	beq.n	26da8 <bt_att_encrypt_change+0x84>
   26d40:	7c1b      	ldrb	r3, [r3, #16]
   26d42:	07da      	lsls	r2, r3, #31
   26d44:	d530      	bpl.n	26da8 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   26d46:	2305      	movs	r3, #5
   26d48:	e021      	b.n	26d8e <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   26d4a:	4628      	mov	r0, r5
   26d4c:	f7f0 f82a 	bl	16da4 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   26d50:	7a6b      	ldrb	r3, [r5, #9]
   26d52:	2b01      	cmp	r3, #1
   26d54:	d028      	beq.n	26da8 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   26d56:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   26d5a:	b32d      	cbz	r5, 26da8 <bt_att_encrypt_change+0x84>
   26d5c:	7c2b      	ldrb	r3, [r5, #16]
   26d5e:	07db      	lsls	r3, r3, #31
   26d60:	d522      	bpl.n	26da8 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   26d62:	68eb      	ldr	r3, [r5, #12]
   26d64:	2b00      	cmp	r3, #0
   26d66:	d0ee      	beq.n	26d46 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   26d68:	4630      	mov	r0, r6
   26d6a:	696a      	ldr	r2, [r5, #20]
   26d6c:	7c69      	ldrb	r1, [r5, #17]
   26d6e:	f7ee f9f5 	bl	1515c <bt_att_chan_create_pdu>
	if (!buf) {
   26d72:	4604      	mov	r4, r0
   26d74:	b150      	cbz	r0, 26d8c <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   26d76:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   26d7a:	68eb      	ldr	r3, [r5, #12]
   26d7c:	4798      	blx	r3
   26d7e:	b168      	cbz	r0, 26d9c <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   26d80:	69a0      	ldr	r0, [r4, #24]
   26d82:	f7ed fee9 	bl	14b58 <tx_meta_data_free>
		net_buf_unref(buf);
   26d86:	4620      	mov	r0, r4
   26d88:	f7f2 f94a 	bl	19020 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   26d8c:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   26d8e:	2200      	movs	r2, #0
   26d90:	4630      	mov	r0, r6
}
   26d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   26d96:	4611      	mov	r1, r2
   26d98:	f7ee be44 	b.w	15a24 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   26d9c:	4621      	mov	r1, r4
   26d9e:	4630      	mov	r0, r6
   26da0:	f7ed ffa6 	bl	14cf0 <chan_send>
   26da4:	2800      	cmp	r0, #0
   26da6:	d1eb      	bne.n	26d80 <bt_att_encrypt_change+0x5c>
}
   26da8:	bd70      	pop	{r4, r5, r6, pc}

00026daa <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   26daa:	2001      	movs	r0, #1
   26dac:	4770      	bx	lr

00026dae <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   26dae:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   26db0:	f7ee f854 	bl	14e5c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   26db4:	b178      	cbz	r0, 26dd6 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   26db6:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   26db8:	b16b      	cbz	r3, 26dd6 <bt_att_clear_out_of_sync_sent+0x28>
   26dba:	3bf0      	subs	r3, #240	; 0xf0
   26dbc:	f103 0298 	add.w	r2, r3, #152	; 0x98
   26dc0:	e8d2 0fef 	ldaex	r0, [r2]
   26dc4:	f020 0020 	bic.w	r0, r0, #32
   26dc8:	e8c2 0fe1 	stlex	r1, r0, [r2]
   26dcc:	2900      	cmp	r1, #0
   26dce:	d1f7      	bne.n	26dc0 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   26dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   26dd4:	e7f0      	b.n	26db8 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   26dd6:	bd08      	pop	{r3, pc}

00026dd8 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   26dd8:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   26dda:	2104      	movs	r1, #4
   26ddc:	f7ff fbb5 	bl	2654a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   26de0:	b128      	cbz	r0, 26dee <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   26de2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   26de6:	2105      	movs	r1, #5
   26de8:	3094      	adds	r0, #148	; 0x94
   26dea:	f7ff bbdc 	b.w	265a6 <atomic_test_bit>
}
   26dee:	bd08      	pop	{r3, pc}

00026df0 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   26df0:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   26df2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   26df6:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   26df8:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   26dfa:	8082      	strh	r2, [r0, #4]
}
   26dfc:	4770      	bx	lr

00026dfe <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   26dfe:	6010      	str	r0, [r2, #0]
}
   26e00:	2000      	movs	r0, #0
   26e02:	4770      	bx	lr

00026e04 <gatt_ccc_changed>:
{
   26e04:	460b      	mov	r3, r1
   26e06:	8909      	ldrh	r1, [r1, #8]
   26e08:	8a5a      	ldrh	r2, [r3, #18]
   26e0a:	4291      	cmp	r1, r2
   26e0c:	bf38      	it	cc
   26e0e:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   26e10:	8a9a      	ldrh	r2, [r3, #20]
   26e12:	428a      	cmp	r2, r1
   26e14:	d003      	beq.n	26e1e <gatt_ccc_changed+0x1a>
		ccc->value = value;
   26e16:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   26e18:	699b      	ldr	r3, [r3, #24]
   26e1a:	b103      	cbz	r3, 26e1e <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   26e1c:	4718      	bx	r3
}
   26e1e:	4770      	bx	lr

00026e20 <gatt_indicate_rsp>:
{
   26e20:	b510      	push	{r4, lr}
   26e22:	9c02      	ldr	r4, [sp, #8]
   26e24:	460a      	mov	r2, r1
	if (params->func) {
   26e26:	68a3      	ldr	r3, [r4, #8]
   26e28:	b10b      	cbz	r3, 26e2e <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   26e2a:	4621      	mov	r1, r4
   26e2c:	4798      	blx	r3
	params->_ref--;
   26e2e:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   26e30:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   26e32:	3b01      	subs	r3, #1
   26e34:	b2db      	uxtb	r3, r3
   26e36:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   26e38:	b122      	cbz	r2, 26e44 <gatt_indicate_rsp+0x24>
   26e3a:	b91b      	cbnz	r3, 26e44 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   26e3c:	4620      	mov	r0, r4
}
   26e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   26e42:	4710      	bx	r2
}
   26e44:	bd10      	pop	{r4, pc}

00026e46 <match_uuid>:
	data->attr = attr;
   26e46:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   26e48:	8091      	strh	r1, [r2, #4]
}
   26e4a:	2000      	movs	r0, #0
   26e4c:	4770      	bx	lr

00026e4e <gen_hash_m>:
{
   26e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   26e50:	6807      	ldr	r7, [r0, #0]
{
   26e52:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   26e54:	783d      	ldrb	r5, [r7, #0]
{
   26e56:	4614      	mov	r4, r2
   26e58:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   26e5a:	b9dd      	cbnz	r5, 26e94 <gen_hash_m+0x46>
	switch (u16->val) {
   26e5c:	887b      	ldrh	r3, [r7, #2]
   26e5e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   26e62:	d004      	beq.n	26e6e <gen_hash_m+0x20>
   26e64:	d810      	bhi.n	26e88 <gen_hash_m+0x3a>
   26e66:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   26e6a:	2b03      	cmp	r3, #3
   26e6c:	d812      	bhi.n	26e94 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   26e6e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26e72:	2202      	movs	r2, #2
   26e74:	4620      	mov	r0, r4
   26e76:	f10d 010a 	add.w	r1, sp, #10
   26e7a:	f7fe fb02 	bl	25482 <tc_cmac_update>
   26e7e:	b968      	cbnz	r0, 26e9c <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   26e80:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   26e84:	65a2      	str	r2, [r4, #88]	; 0x58
   26e86:	e006      	b.n	26e96 <gen_hash_m+0x48>
	switch (u16->val) {
   26e88:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   26e8c:	33ff      	adds	r3, #255	; 0xff
   26e8e:	b29b      	uxth	r3, r3
   26e90:	2b04      	cmp	r3, #4
   26e92:	d91e      	bls.n	26ed2 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   26e94:	2501      	movs	r5, #1
}
   26e96:	4628      	mov	r0, r5
   26e98:	b009      	add	sp, #36	; 0x24
   26e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   26e9c:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26e9e:	2202      	movs	r2, #2
   26ea0:	4620      	mov	r0, r4
   26ea2:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   26ea6:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26eaa:	f7fe faea 	bl	25482 <tc_cmac_update>
   26eae:	2800      	cmp	r0, #0
   26eb0:	d0e6      	beq.n	26e80 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   26eb2:	2000      	movs	r0, #0
   26eb4:	9000      	str	r0, [sp, #0]
   26eb6:	aa03      	add	r2, sp, #12
   26eb8:	2313      	movs	r3, #19
   26eba:	4631      	mov	r1, r6
   26ebc:	6877      	ldr	r7, [r6, #4]
   26ebe:	47b8      	blx	r7
		if (len < 0) {
   26ec0:	1e02      	subs	r2, r0, #0
   26ec2:	dbdf      	blt.n	26e84 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   26ec4:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26ec6:	4620      	mov	r0, r4
   26ec8:	f7fe fadb 	bl	25482 <tc_cmac_update>
   26ecc:	2800      	cmp	r0, #0
   26ece:	d1e1      	bne.n	26e94 <gen_hash_m+0x46>
   26ed0:	e7d6      	b.n	26e80 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   26ed2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26ed6:	2202      	movs	r2, #2
   26ed8:	4620      	mov	r0, r4
   26eda:	f10d 010a 	add.w	r1, sp, #10
   26ede:	f7fe fad0 	bl	25482 <tc_cmac_update>
   26ee2:	2800      	cmp	r0, #0
   26ee4:	d0cc      	beq.n	26e80 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   26ee6:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26ee8:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   26eea:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26eee:	f10d 010a 	add.w	r1, sp, #10
   26ef2:	e7e8      	b.n	26ec6 <gen_hash_m+0x78>

00026ef4 <bt_addr_le_eq>:
   26ef4:	2207      	movs	r2, #7
{
   26ef6:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   26ef8:	f002 faab 	bl	29452 <memcmp>
}
   26efc:	fab0 f080 	clz	r0, r0
   26f00:	0940      	lsrs	r0, r0, #5
   26f02:	bd08      	pop	{r3, pc}

00026f04 <bt_addr_le_copy>:
   26f04:	680b      	ldr	r3, [r1, #0]
   26f06:	6003      	str	r3, [r0, #0]
   26f08:	888b      	ldrh	r3, [r1, #4]
   26f0a:	8083      	strh	r3, [r0, #4]
   26f0c:	798b      	ldrb	r3, [r1, #6]
   26f0e:	7183      	strb	r3, [r0, #6]
}
   26f10:	4770      	bx	lr

00026f12 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   26f12:	2300      	movs	r3, #0
   26f14:	6003      	str	r3, [r0, #0]
   26f16:	6043      	str	r3, [r0, #4]
   26f18:	6083      	str	r3, [r0, #8]
}
   26f1a:	4770      	bx	lr

00026f1c <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   26f1c:	b538      	push	{r3, r4, r5, lr}
   26f1e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   26f22:	4615      	mov	r5, r2
	if (offset > value_len) {
   26f24:	4294      	cmp	r4, r2
   26f26:	d30a      	bcc.n	26f3e <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   26f28:	1aa4      	subs	r4, r4, r2
   26f2a:	428c      	cmp	r4, r1
   26f2c:	bfa8      	it	ge
   26f2e:	460c      	movge	r4, r1
   26f30:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26f32:	4622      	mov	r2, r4
   26f34:	1959      	adds	r1, r3, r5
   26f36:	f002 fa9c 	bl	29472 <memcpy>
}
   26f3a:	4620      	mov	r0, r4
   26f3c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26f3e:	f06f 0406 	mvn.w	r4, #6
   26f42:	e7fa      	b.n	26f3a <bt_gatt_attr_read.constprop.0+0x1e>

00026f44 <bt_gatt_attr_read_ccc>:
{
   26f44:	b530      	push	{r4, r5, lr}
   26f46:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   26f48:	68c9      	ldr	r1, [r1, #12]
{
   26f4a:	4614      	mov	r4, r2
   26f4c:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   26f4e:	f7ee ff0f 	bl	15d70 <find_ccc_cfg>
	if (cfg) {
   26f52:	b100      	cbz	r0, 26f56 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   26f54:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   26f56:	2302      	movs	r3, #2
   26f58:	f8ad 000e 	strh.w	r0, [sp, #14]
   26f5c:	9300      	str	r3, [sp, #0]
   26f5e:	4629      	mov	r1, r5
   26f60:	4620      	mov	r0, r4
   26f62:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   26f66:	f10d 030e 	add.w	r3, sp, #14
   26f6a:	f7ff ffd7 	bl	26f1c <bt_gatt_attr_read.constprop.0>
}
   26f6e:	b005      	add	sp, #20
   26f70:	bd30      	pop	{r4, r5, pc}

00026f72 <bt_gatt_attr_read_service>:
{
   26f72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   26f74:	460c      	mov	r4, r1
   26f76:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   26f78:	68e3      	ldr	r3, [r4, #12]
{
   26f7a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   26f7c:	781c      	ldrb	r4, [r3, #0]
{
   26f7e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   26f82:	b13c      	cbz	r4, 26f94 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   26f84:	2410      	movs	r4, #16
   26f86:	3301      	adds	r3, #1
   26f88:	9406      	str	r4, [sp, #24]
}
   26f8a:	b004      	add	sp, #16
   26f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   26f90:	f7ff bfc4 	b.w	26f1c <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   26f94:	885b      	ldrh	r3, [r3, #2]
   26f96:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   26f9a:	2302      	movs	r3, #2
   26f9c:	9300      	str	r3, [sp, #0]
   26f9e:	f10d 030e 	add.w	r3, sp, #14
   26fa2:	f7ff ffbb 	bl	26f1c <bt_gatt_attr_read.constprop.0>
}
   26fa6:	b004      	add	sp, #16
   26fa8:	bd10      	pop	{r4, pc}

00026faa <cf_read>:
{
   26faa:	b530      	push	{r4, r5, lr}
   26fac:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   26fae:	2300      	movs	r3, #0
{
   26fb0:	b085      	sub	sp, #20
   26fb2:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   26fb4:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   26fb8:	f7ee fe8a 	bl	15cd0 <find_cf_cfg>
	if (cfg) {
   26fbc:	b110      	cbz	r0, 26fc4 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   26fbe:	7a03      	ldrb	r3, [r0, #8]
   26fc0:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   26fc4:	2301      	movs	r3, #1
   26fc6:	4629      	mov	r1, r5
   26fc8:	9300      	str	r3, [sp, #0]
   26fca:	4620      	mov	r0, r4
   26fcc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   26fd0:	ab03      	add	r3, sp, #12
   26fd2:	f7ff ffa3 	bl	26f1c <bt_gatt_attr_read.constprop.0>
}
   26fd6:	b005      	add	sp, #20
   26fd8:	bd30      	pop	{r4, r5, pc}

00026fda <read_name>:
{
   26fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26fde:	4614      	mov	r4, r2
   26fe0:	461d      	mov	r5, r3
   26fe2:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   26fe6:	f7eb fae5 	bl	125b4 <bt_get_name>
   26fea:	4606      	mov	r6, r0
				 strlen(name));
   26fec:	f7e2 f9b8 	bl	9360 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   26ff0:	b280      	uxth	r0, r0
   26ff2:	9006      	str	r0, [sp, #24]
   26ff4:	4633      	mov	r3, r6
   26ff6:	463a      	mov	r2, r7
   26ff8:	4629      	mov	r1, r5
   26ffa:	4620      	mov	r0, r4
}
   26ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   27000:	f7ff bf8c 	b.w	26f1c <bt_gatt_attr_read.constprop.0>

00027004 <read_appearance>:
{
   27004:	b530      	push	{r4, r5, lr}
   27006:	b085      	sub	sp, #20
   27008:	4614      	mov	r4, r2
   2700a:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2700c:	f7fe fef5 	bl	25dfa <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   27010:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   27012:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   27016:	9300      	str	r3, [sp, #0]
   27018:	4629      	mov	r1, r5
   2701a:	4620      	mov	r0, r4
   2701c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   27020:	f10d 030e 	add.w	r3, sp, #14
   27024:	f7ff ff7a 	bl	26f1c <bt_gatt_attr_read.constprop.0>
}
   27028:	b005      	add	sp, #20
   2702a:	bd30      	pop	{r4, r5, pc}

0002702c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2702c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2702e:	ab0b      	add	r3, sp, #44	; 0x2c
   27030:	9305      	str	r3, [sp, #20]
   27032:	9303      	str	r3, [sp, #12]
   27034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27036:	9302      	str	r3, [sp, #8]
   27038:	2300      	movs	r3, #0
   2703a:	4618      	mov	r0, r3
   2703c:	e9cd 3300 	strd	r3, r3, [sp]
   27040:	f7e6 ffe6 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   27044:	b007      	add	sp, #28
   27046:	f85d fb04 	ldr.w	pc, [sp], #4

0002704a <sc_clear>:
{
   2704a:	b538      	push	{r3, r4, r5, lr}
   2704c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2704e:	f100 0590 	add.w	r5, r0, #144	; 0x90
   27052:	4629      	mov	r1, r5
   27054:	7a00      	ldrb	r0, [r0, #8]
   27056:	f7fe fed3 	bl	25e00 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2705a:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2705c:	7a20      	ldrb	r0, [r4, #8]
   2705e:	f7ee fe65 	bl	15d2c <find_sc_cfg>
		if (cfg) {
   27062:	b118      	cbz	r0, 2706c <sc_clear+0x22>
}
   27064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   27068:	f7ff bf53 	b.w	26f12 <clear_sc_cfg>
}
   2706c:	bd38      	pop	{r3, r4, r5, pc}

0002706e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2706e:	2a02      	cmp	r2, #2
{
   27070:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   27072:	d108      	bne.n	27086 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   27074:	2300      	movs	r3, #0
   27076:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2707a:	461a      	mov	r2, r3
   2707c:	7a00      	ldrb	r0, [r0, #8]
   2707e:	f7ee ff27 	bl	15ed0 <sc_save>
}
   27082:	2002      	movs	r0, #2
   27084:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   27086:	f7ff ffe0 	bl	2704a <sc_clear>
   2708a:	e7fa      	b.n	27082 <sc_ccc_cfg_write+0x14>

0002708c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2708c:	2301      	movs	r3, #1
   2708e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27090:	e8d0 2fef 	ldaex	r2, [r0]
   27094:	431a      	orrs	r2, r3
   27096:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2709a:	2900      	cmp	r1, #0
   2709c:	d1f8      	bne.n	27090 <atomic_set_bit+0x4>
}
   2709e:	4770      	bx	lr

000270a0 <sc_restore_rsp>:
{
   270a0:	b538      	push	{r3, r4, r5, lr}
   270a2:	4604      	mov	r4, r0
   270a4:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   270a6:	f7ff fe80 	bl	26daa <bt_att_fixed_chan_only>
   270aa:	b150      	cbz	r0, 270c2 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   270ac:	4620      	mov	r0, r4
   270ae:	f7ee fe0f 	bl	15cd0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   270b2:	b130      	cbz	r0, 270c2 <sc_restore_rsp+0x22>
   270b4:	7a03      	ldrb	r3, [r0, #8]
   270b6:	07db      	lsls	r3, r3, #31
   270b8:	d503      	bpl.n	270c2 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   270ba:	2100      	movs	r1, #0
   270bc:	300c      	adds	r0, #12
   270be:	f7ff ffe5 	bl	2708c <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   270c2:	b935      	cbnz	r5, 270d2 <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   270c4:	7a20      	ldrb	r0, [r4, #8]
   270c6:	f104 0190 	add.w	r1, r4, #144	; 0x90
   270ca:	f7ee fe2f 	bl	15d2c <find_sc_cfg>
		if (sc_cfg) {
   270ce:	b100      	cbz	r0, 270d2 <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   270d0:	6085      	str	r5, [r0, #8]
}
   270d2:	bd38      	pop	{r3, r4, r5, pc}

000270d4 <bt_gatt_attr_value_handle>:
{
   270d4:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   270d6:	4604      	mov	r4, r0
   270d8:	b910      	cbnz	r0, 270e0 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   270da:	2000      	movs	r0, #0
}
   270dc:	b002      	add	sp, #8
   270de:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   270e0:	2300      	movs	r3, #0
   270e2:	f88d 3004 	strb.w	r3, [sp, #4]
   270e6:	f642 0303 	movw	r3, #10243	; 0x2803
   270ea:	6800      	ldr	r0, [r0, #0]
   270ec:	a901      	add	r1, sp, #4
   270ee:	f8ad 3006 	strh.w	r3, [sp, #6]
   270f2:	f7fe fd38 	bl	25b66 <bt_uuid_cmp>
   270f6:	2800      	cmp	r0, #0
   270f8:	d1ef      	bne.n	270da <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   270fa:	68e3      	ldr	r3, [r4, #12]
   270fc:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   270fe:	2800      	cmp	r0, #0
   27100:	d1ec      	bne.n	270dc <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   27102:	4620      	mov	r0, r4
   27104:	f7ef f854 	bl	161b0 <bt_gatt_attr_get_handle>
   27108:	3001      	adds	r0, #1
   2710a:	b280      	uxth	r0, r0
	return handle;
   2710c:	e7e6      	b.n	270dc <bt_gatt_attr_value_handle+0x8>

0002710e <bt_gatt_attr_read_chrc>:
{
   2710e:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   27110:	68cc      	ldr	r4, [r1, #12]
{
   27112:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   27114:	79a3      	ldrb	r3, [r4, #6]
{
   27116:	b088      	sub	sp, #32
   27118:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   2711a:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2711e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   27120:	f7ff ffd8 	bl	270d4 <bt_gatt_attr_value_handle>
   27124:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   27128:	6824      	ldr	r4, [r4, #0]
   2712a:	7823      	ldrb	r3, [r4, #0]
   2712c:	b96b      	cbnz	r3, 2714a <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2712e:	8863      	ldrh	r3, [r4, #2]
   27130:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   27134:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   27136:	9300      	str	r3, [sp, #0]
   27138:	4631      	mov	r1, r6
   2713a:	4628      	mov	r0, r5
   2713c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   27140:	ab03      	add	r3, sp, #12
   27142:	f7ff feeb 	bl	26f1c <bt_gatt_attr_read.constprop.0>
}
   27146:	b008      	add	sp, #32
   27148:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2714a:	1c63      	adds	r3, r4, #1
   2714c:	f10d 020f 	add.w	r2, sp, #15
   27150:	3411      	adds	r4, #17
   27152:	f853 1b04 	ldr.w	r1, [r3], #4
   27156:	42a3      	cmp	r3, r4
   27158:	f842 1b04 	str.w	r1, [r2], #4
   2715c:	d1f9      	bne.n	27152 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2715e:	2313      	movs	r3, #19
   27160:	e7e9      	b.n	27136 <bt_gatt_attr_read_chrc+0x28>

00027162 <bt_gatt_foreach_attr>:
{
   27162:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   27164:	e9cd 2301 	strd	r2, r3, [sp, #4]
   27168:	2300      	movs	r3, #0
   2716a:	461a      	mov	r2, r3
   2716c:	9300      	str	r3, [sp, #0]
   2716e:	f7ef f867 	bl	16240 <bt_gatt_foreach_attr_type>
}
   27172:	b005      	add	sp, #20
   27174:	f85d fb04 	ldr.w	pc, [sp], #4

00027178 <db_hash_process>:
	db_hash_gen(true);
   27178:	f7ef b8d2 	b.w	16320 <db_hash_gen.constprop.0>

0002717c <bt_gatt_check_perm>:
{
   2717c:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2717e:	07d4      	lsls	r4, r2, #31
{
   27180:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   27182:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   27184:	d504      	bpl.n	27190 <bt_gatt_check_perm+0x14>
   27186:	f013 0f95 	tst.w	r3, #149	; 0x95
   2718a:	d027      	beq.n	271dc <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2718c:	6848      	ldr	r0, [r1, #4]
   2718e:	b328      	cbz	r0, 271dc <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   27190:	0790      	lsls	r0, r2, #30
   27192:	d504      	bpl.n	2719e <bt_gatt_check_perm+0x22>
   27194:	f413 7f95 	tst.w	r3, #298	; 0x12a
   27198:	d022      	beq.n	271e0 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2719a:	6889      	ldr	r1, [r1, #8]
   2719c:	b301      	cbz	r1, 271e0 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   2719e:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   271a2:	f414 7fc0 	tst.w	r4, #384	; 0x180
   271a6:	d007      	beq.n	271b8 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   271a8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   271ac:	b90b      	cbnz	r3, 271b2 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   271ae:	2005      	movs	r0, #5
}
   271b0:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   271b2:	7b5b      	ldrb	r3, [r3, #13]
   271b4:	06db      	lsls	r3, r3, #27
   271b6:	d5fa      	bpl.n	271ae <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   271b8:	f014 0f30 	tst.w	r4, #48	; 0x30
   271bc:	d108      	bne.n	271d0 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   271be:	f014 000c 	ands.w	r0, r4, #12
   271c2:	d0f5      	beq.n	271b0 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   271c4:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   271c6:	2b00      	cmp	r3, #0
   271c8:	bf14      	ite	ne
   271ca:	2000      	movne	r0, #0
   271cc:	200f      	moveq	r0, #15
   271ce:	e7ef      	b.n	271b0 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   271d0:	4628      	mov	r0, r5
   271d2:	f7ff f8ee 	bl	263b2 <bt_conn_get_security>
   271d6:	2802      	cmp	r0, #2
   271d8:	d8f1      	bhi.n	271be <bt_gatt_check_perm+0x42>
   271da:	e7e8      	b.n	271ae <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   271dc:	2002      	movs	r0, #2
   271de:	e7e7      	b.n	271b0 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   271e0:	2003      	movs	r0, #3
   271e2:	e7e5      	b.n	271b0 <bt_gatt_check_perm+0x34>

000271e4 <bt_gatt_change_aware>:
{
   271e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   271e6:	4606      	mov	r6, r0
   271e8:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   271ea:	f7ee fd71 	bl	15cd0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   271ee:	b1e0      	cbz	r0, 2722a <bt_gatt_change_aware+0x46>
   271f0:	7a03      	ldrb	r3, [r0, #8]
   271f2:	07db      	lsls	r3, r3, #31
   271f4:	d519      	bpl.n	2722a <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   271f6:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   271fa:	e8d4 5faf 	lda	r5, [r4]
   271fe:	f015 0501 	ands.w	r5, r5, #1
   27202:	d112      	bne.n	2722a <bt_gatt_change_aware+0x46>
	if (!req) {
   27204:	b197      	cbz	r7, 2722c <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27206:	e8d4 1fef 	ldaex	r1, [r4]
   2720a:	f021 0302 	bic.w	r3, r1, #2
   2720e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   27212:	2a00      	cmp	r2, #0
   27214:	d1f7      	bne.n	27206 <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   27216:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   2721a:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2721c:	d008      	beq.n	27230 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   2721e:	f7ff fdc6 	bl	26dae <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   27222:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   27224:	4620      	mov	r0, r4
   27226:	f7ff ff31 	bl	2708c <atomic_set_bit>
		return true;
   2722a:	2501      	movs	r5, #1
}
   2722c:	4628      	mov	r0, r5
   2722e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   27230:	f7ff fdbb 	bl	26daa <bt_att_fixed_chan_only>
   27234:	2800      	cmp	r0, #0
   27236:	d0f9      	beq.n	2722c <bt_gatt_change_aware+0x48>
   27238:	4630      	mov	r0, r6
   2723a:	f7ff fdcd 	bl	26dd8 <bt_att_out_of_sync_sent_on_fixed>
   2723e:	2800      	cmp	r0, #0
   27240:	d0f4      	beq.n	2722c <bt_gatt_change_aware+0x48>
   27242:	e8d4 3fef 	ldaex	r3, [r4]
   27246:	f023 0302 	bic.w	r3, r3, #2
   2724a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2724e:	2a00      	cmp	r2, #0
   27250:	d1f7      	bne.n	27242 <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   27252:	4630      	mov	r0, r6
   27254:	f7ff fdab 	bl	26dae <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   27258:	4639      	mov	r1, r7
   2725a:	e7e3      	b.n	27224 <bt_gatt_change_aware+0x40>

0002725c <smp_pairing_rsp>:
}
   2725c:	2007      	movs	r0, #7
   2725e:	4770      	bx	lr

00027260 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27260:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27264:	4108      	asrs	r0, r1
}
   27266:	f000 0001 	and.w	r0, r0, #1
   2726a:	4770      	bx	lr

0002726c <update_keys_check>:
{
   2726c:	4603      	mov	r3, r0
   2726e:	b510      	push	{r4, lr}
	if (!keys ||
   27270:	b1d9      	cbz	r1, 272aa <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   27272:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   27274:	f010 0f24 	tst.w	r0, #36	; 0x24
   27278:	d017      	beq.n	272aa <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2727a:	7d1a      	ldrb	r2, [r3, #20]
   2727c:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2727e:	7b09      	ldrb	r1, [r1, #12]
   27280:	42a2      	cmp	r2, r4
   27282:	bf28      	it	cs
   27284:	4622      	movcs	r2, r4
   27286:	4291      	cmp	r1, r2
   27288:	d901      	bls.n	2728e <update_keys_check+0x22>
			return false;
   2728a:	2000      	movs	r0, #0
}
   2728c:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2728e:	0682      	lsls	r2, r0, #26
   27290:	d404      	bmi.n	2729c <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   27292:	7a18      	ldrb	r0, [r3, #8]
   27294:	3800      	subs	r0, #0
   27296:	bf18      	it	ne
   27298:	2001      	movne	r0, #1
   2729a:	e7f7      	b.n	2728c <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2729c:	2105      	movs	r1, #5
   2729e:	1d18      	adds	r0, r3, #4
   272a0:	f7ff ffde 	bl	27260 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   272a4:	2800      	cmp	r0, #0
   272a6:	d1f4      	bne.n	27292 <update_keys_check+0x26>
   272a8:	e7ef      	b.n	2728a <update_keys_check+0x1e>
	return true;
   272aa:	2001      	movs	r0, #1
   272ac:	e7ee      	b.n	2728c <update_keys_check+0x20>

000272ae <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   272ae:	2301      	movs	r3, #1
   272b0:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   272b2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   272b4:	e8d0 2fef 	ldaex	r2, [r0]
   272b8:	401a      	ands	r2, r3
   272ba:	e8c0 2fe1 	stlex	r1, r2, [r0]
   272be:	2900      	cmp	r1, #0
   272c0:	d1f8      	bne.n	272b4 <atomic_clear_bit+0x6>
}
   272c2:	4770      	bx	lr

000272c4 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   272c4:	680b      	ldr	r3, [r1, #0]
   272c6:	6003      	str	r3, [r0, #0]
   272c8:	888b      	ldrh	r3, [r1, #4]
   272ca:	8083      	strh	r3, [r0, #4]
   272cc:	798b      	ldrb	r3, [r1, #6]
   272ce:	7183      	strb	r3, [r0, #6]
   272d0:	4770      	bx	lr

000272d2 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   272d2:	2007      	movs	r0, #7
   272d4:	4770      	bx	lr

000272d6 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   272d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   272d8:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   272da:	2200      	movs	r2, #0
   272dc:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   272de:	4604      	mov	r4, r0
   272e0:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   272e2:	460a      	mov	r2, r1
   272e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   272e8:	2106      	movs	r1, #6
   272ea:	f7ff f90c 	bl	26506 <bt_l2cap_send_cb>
   272ee:	b128      	cbz	r0, 272fc <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   272f0:	4628      	mov	r0, r5
}
   272f2:	b003      	add	sp, #12
   272f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   272f8:	f7f1 be92 	b.w	19020 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   272fc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   27300:	2300      	movs	r3, #0
   27302:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   27306:	b003      	add	sp, #12
   27308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2730c:	f7f9 b986 	b.w	2061c <k_work_reschedule>

00027310 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27310:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27312:	ab0b      	add	r3, sp, #44	; 0x2c
   27314:	9305      	str	r3, [sp, #20]
   27316:	9303      	str	r3, [sp, #12]
   27318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2731a:	9302      	str	r3, [sp, #8]
   2731c:	2300      	movs	r3, #0
   2731e:	4618      	mov	r0, r3
   27320:	e9cd 3300 	strd	r3, r3, [sp]
   27324:	f7e6 fe74 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   27328:	b007      	add	sp, #28
   2732a:	f85d fb04 	ldr.w	pc, [sp], #4

0002732e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2732e:	2301      	movs	r3, #1
   27330:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27332:	e8d0 2fef 	ldaex	r2, [r0]
   27336:	431a      	orrs	r2, r3
   27338:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2733c:	2900      	cmp	r1, #0
   2733e:	d1f8      	bne.n	27332 <atomic_set_bit+0x4>
}
   27340:	4770      	bx	lr

00027342 <smp_keypress_notif>:
{
   27342:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   27344:	210e      	movs	r1, #14
   27346:	f7ff fff2 	bl	2732e <atomic_set_bit>
}
   2734a:	2000      	movs	r0, #0
   2734c:	bd08      	pop	{r3, pc}

0002734e <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2734e:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   27350:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   27352:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   27354:	4628      	mov	r0, r5
   27356:	2104      	movs	r1, #4
   27358:	f7ff ff82 	bl	27260 <atomic_test_bit>
   2735c:	b168      	cbz	r0, 2737a <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2735e:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   27360:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   27362:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   27364:	4608      	mov	r0, r1
   27366:	f7ff f8cb 	bl	26500 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2736a:	4604      	mov	r4, r0
   2736c:	b940      	cbnz	r0, 27380 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2736e:	2104      	movs	r1, #4
   27370:	4628      	mov	r0, r5
   27372:	f7ff ffdc 	bl	2732e <atomic_set_bit>
}
   27376:	4620      	mov	r0, r4
   27378:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2737a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2737e:	e7ef      	b.n	27360 <smp_create_pdu.constprop.0+0x12>
   27380:	2101      	movs	r1, #1
   27382:	300c      	adds	r0, #12
   27384:	f7f1 ff6e 	bl	19264 <net_buf_simple_add>
	hdr->code = op;
   27388:	7006      	strb	r6, [r0, #0]
	return buf;
   2738a:	e7f4      	b.n	27376 <smp_create_pdu.constprop.0+0x28>

0002738c <send_pairing_rsp>:
{
   2738c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2738e:	2102      	movs	r1, #2
{
   27390:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   27392:	f7ff ffdc 	bl	2734e <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   27396:	4605      	mov	r5, r0
   27398:	b180      	cbz	r0, 273bc <send_pairing_rsp+0x30>
   2739a:	2106      	movs	r1, #6
   2739c:	300c      	adds	r0, #12
   2739e:	f7f1 ff61 	bl	19264 <net_buf_simple_add>
   273a2:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   273a6:	2200      	movs	r2, #0
   273a8:	6003      	str	r3, [r0, #0]
   273aa:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   273ae:	4629      	mov	r1, r5
   273b0:	8083      	strh	r3, [r0, #4]
   273b2:	4620      	mov	r0, r4
   273b4:	f7ff ff8f 	bl	272d6 <smp_send.constprop.0>
	return 0;
   273b8:	2000      	movs	r0, #0
}
   273ba:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   273bc:	2008      	movs	r0, #8
   273be:	e7fc      	b.n	273ba <send_pairing_rsp+0x2e>

000273c0 <smp_send_pairing_random>:
{
   273c0:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   273c2:	2104      	movs	r1, #4
{
   273c4:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   273c6:	f7ff ffc2 	bl	2734e <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   273ca:	4605      	mov	r5, r0
   273cc:	b1a0      	cbz	r0, 273f8 <smp_send_pairing_random+0x38>
   273ce:	2110      	movs	r1, #16
   273d0:	300c      	adds	r0, #12
   273d2:	f7f1 ff47 	bl	19264 <net_buf_simple_add>
   273d6:	f104 0327 	add.w	r3, r4, #39	; 0x27
   273da:	f104 0237 	add.w	r2, r4, #55	; 0x37
   273de:	f853 1b04 	ldr.w	r1, [r3], #4
   273e2:	4293      	cmp	r3, r2
   273e4:	f840 1b04 	str.w	r1, [r0], #4
   273e8:	d1f9      	bne.n	273de <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   273ea:	4620      	mov	r0, r4
   273ec:	2200      	movs	r2, #0
   273ee:	4629      	mov	r1, r5
   273f0:	f7ff ff71 	bl	272d6 <smp_send.constprop.0>
	return 0;
   273f4:	2000      	movs	r0, #0
}
   273f6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   273f8:	2008      	movs	r0, #8
   273fa:	e7fc      	b.n	273f6 <smp_send_pairing_random+0x36>

000273fc <smp_dhkey_check>:
{
   273fc:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   273fe:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   27402:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   27404:	78db      	ldrb	r3, [r3, #3]
   27406:	2b01      	cmp	r3, #1
   27408:	d119      	bne.n	2743e <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2740a:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2740c:	1d06      	adds	r6, r0, #4
   2740e:	2110      	movs	r1, #16
   27410:	4630      	mov	r0, r6
   27412:	f7ff ff4c 	bl	272ae <atomic_clear_bit>
   27416:	462b      	mov	r3, r5
   27418:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2741c:	f105 0110 	add.w	r1, r5, #16
   27420:	f853 0b04 	ldr.w	r0, [r3], #4
   27424:	428b      	cmp	r3, r1
   27426:	f842 0b04 	str.w	r0, [r2], #4
   2742a:	d1f9      	bne.n	27420 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2742c:	2107      	movs	r1, #7
   2742e:	4630      	mov	r0, r6
   27430:	f7ff ff16 	bl	27260 <atomic_test_bit>
   27434:	b128      	cbz	r0, 27442 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27436:	2109      	movs	r1, #9
   27438:	4630      	mov	r0, r6
   2743a:	f7ff ff78 	bl	2732e <atomic_set_bit>
}
   2743e:	2000      	movs	r0, #0
   27440:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   27442:	210a      	movs	r1, #10
   27444:	4630      	mov	r0, r6
   27446:	f7ff ff0b 	bl	27260 <atomic_test_bit>
   2744a:	2800      	cmp	r0, #0
   2744c:	d1f3      	bne.n	27436 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2744e:	4620      	mov	r0, r4
}
   27450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   27454:	f7f0 b954 	b.w	17700 <compute_and_check_and_send_periph_dhcheck>

00027458 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   27458:	2007      	movs	r0, #7
   2745a:	4770      	bx	lr

0002745c <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2745c:	2301      	movs	r3, #1
   2745e:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27462:	43ca      	mvns	r2, r1
{
   27464:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27466:	e8d0 3fef 	ldaex	r3, [r0]
   2746a:	ea03 0402 	and.w	r4, r3, r2
   2746e:	e8c0 4fe5 	stlex	r5, r4, [r0]
   27472:	2d00      	cmp	r5, #0
   27474:	d1f7      	bne.n	27466 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   27476:	4219      	tst	r1, r3
}
   27478:	bf14      	ite	ne
   2747a:	2001      	movne	r0, #1
   2747c:	2000      	moveq	r0, #0
   2747e:	bd30      	pop	{r4, r5, pc}

00027480 <smp_reset>:
{
   27480:	b538      	push	{r3, r4, r5, lr}
   27482:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27484:	2500      	movs	r5, #0
   27486:	1d03      	adds	r3, r0, #4
   27488:	e8d3 2fef 	ldaex	r2, [r3]
   2748c:	e8c3 5fe1 	stlex	r1, r5, [r3]
   27490:	2900      	cmp	r1, #0
   27492:	d1f9      	bne.n	27488 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   27494:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   27498:	f7f9 f8c6 	bl	20628 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2749c:	7225      	strb	r5, [r4, #8]
   2749e:	e8d4 3fef 	ldaex	r3, [r4]
   274a2:	e8c4 5fe2 	stlex	r2, r5, [r4]
   274a6:	2a00      	cmp	r2, #0
   274a8:	d1f9      	bne.n	2749e <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   274aa:	4620      	mov	r0, r4
}
   274ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   274b0:	2101      	movs	r1, #1
   274b2:	f7ff bf3c 	b.w	2732e <atomic_set_bit>

000274b6 <smp_c1>:
{
   274b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   274b8:	b089      	sub	sp, #36	; 0x24
   274ba:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   274be:	4605      	mov	r5, r0
	p1[0] = ia->type;
   274c0:	7830      	ldrb	r0, [r6, #0]
{
   274c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   274c4:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   274c8:	7838      	ldrb	r0, [r7, #0]
   274ca:	f101 0c10 	add.w	ip, r1, #16
   274ce:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   274d2:	6810      	ldr	r0, [r2, #0]
   274d4:	f8cd 0002 	str.w	r0, [sp, #2]
   274d8:	8890      	ldrh	r0, [r2, #4]
   274da:	7992      	ldrb	r2, [r2, #6]
   274dc:	f8ad 0006 	strh.w	r0, [sp, #6]
   274e0:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   274e4:	681a      	ldr	r2, [r3, #0]
   274e6:	4668      	mov	r0, sp
   274e8:	f8cd 2009 	str.w	r2, [sp, #9]
   274ec:	889a      	ldrh	r2, [r3, #4]
   274ee:	799b      	ldrb	r3, [r3, #6]
   274f0:	f8ad 200d 	strh.w	r2, [sp, #13]
   274f4:	4622      	mov	r2, r4
   274f6:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   274fa:	f811 3b01 	ldrb.w	r3, [r1], #1
   274fe:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   27502:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   27504:	ea83 030e 	eor.w	r3, r3, lr
   27508:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2750c:	d1f5      	bne.n	274fa <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2750e:	4622      	mov	r2, r4
   27510:	4621      	mov	r1, r4
   27512:	4628      	mov	r0, r5
   27514:	f7fe fe5a 	bl	261cc <bt_encrypt_le>
	if (err) {
   27518:	4603      	mov	r3, r0
   2751a:	bb28      	cbnz	r0, 27568 <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   2751c:	9307      	str	r3, [sp, #28]
   2751e:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   27520:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   27524:	f8d7 0001 	ldr.w	r0, [r7, #1]
   27528:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2752c:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   27530:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   27532:	f8cd 2016 	str.w	r2, [sp, #22]
   27536:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   2753a:	f104 0010 	add.w	r0, r4, #16
   2753e:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   27542:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   27544:	f813 2b01 	ldrb.w	r2, [r3], #1
   27548:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   2754c:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   2754e:	ea82 0206 	eor.w	r2, r2, r6
   27552:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   27556:	d1f5      	bne.n	27544 <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   27558:	4622      	mov	r2, r4
   2755a:	4621      	mov	r1, r4
   2755c:	4628      	mov	r0, r5
}
   2755e:	b009      	add	sp, #36	; 0x24
   27560:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   27564:	f7fe be32 	b.w	261cc <bt_encrypt_le>
}
   27568:	b009      	add	sp, #36	; 0x24
   2756a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002756c <legacy_pairing_confirm>:
{
   2756c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2756e:	1d07      	adds	r7, r0, #4
{
   27570:	4604      	mov	r4, r0
   27572:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   27574:	210a      	movs	r1, #10
   27576:	4638      	mov	r0, r7
   27578:	f7ff fe72 	bl	27260 <atomic_test_bit>
   2757c:	bb88      	cbnz	r0, 275e2 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2757e:	2104      	movs	r1, #4
   27580:	4620      	mov	r0, r4
   27582:	f7ff fed4 	bl	2732e <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   27586:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   27588:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2758c:	f7ff fedf 	bl	2734e <smp_create_pdu.constprop.0>
	if (!buf) {
   27590:	4605      	mov	r5, r0
   27592:	b1c0      	cbz	r0, 275c6 <legacy_pairing_confirm+0x5a>
   27594:	2110      	movs	r1, #16
   27596:	300c      	adds	r0, #12
   27598:	f7f1 fe64 	bl	19264 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2759c:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   275a0:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   275a2:	9002      	str	r0, [sp, #8]
   275a4:	9301      	str	r3, [sp, #4]
   275a6:	9600      	str	r6, [sp, #0]
   275a8:	f104 0310 	add.w	r3, r4, #16
   275ac:	f104 0209 	add.w	r2, r4, #9
   275b0:	f104 0127 	add.w	r1, r4, #39	; 0x27
   275b4:	f104 0047 	add.w	r0, r4, #71	; 0x47
   275b8:	f7ff ff7d 	bl	274b6 <smp_c1>
   275bc:	4606      	mov	r6, r0
   275be:	b128      	cbz	r0, 275cc <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   275c0:	4628      	mov	r0, r5
   275c2:	f7f1 fd2d 	bl	19020 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   275c6:	2008      	movs	r0, #8
}
   275c8:	b005      	add	sp, #20
   275ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   275cc:	4602      	mov	r2, r0
   275ce:	4629      	mov	r1, r5
   275d0:	4620      	mov	r0, r4
   275d2:	f7ff fe80 	bl	272d6 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   275d6:	4631      	mov	r1, r6
   275d8:	4638      	mov	r0, r7
   275da:	f7ff fe68 	bl	272ae <atomic_clear_bit>
	return 0;
   275de:	2000      	movs	r0, #0
   275e0:	e7f2      	b.n	275c8 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   275e2:	2100      	movs	r1, #0
   275e4:	4638      	mov	r0, r7
   275e6:	f7ff fea2 	bl	2732e <atomic_set_bit>
	return 0;
   275ea:	e7f8      	b.n	275de <legacy_pairing_confirm+0x72>

000275ec <bt_smp_request_ltk>:
{
   275ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   275f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   275f2:	4604      	mov	r4, r0
   275f4:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   275f8:	f7ef fc94 	bl	16f24 <smp_chan_get>
	if (!smp) {
   275fc:	4605      	mov	r5, r0
   275fe:	2800      	cmp	r0, #0
   27600:	d07c      	beq.n	276fc <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   27602:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   27606:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   27608:	f1b8 0f00 	cmp.w	r8, #0
   2760c:	d128      	bne.n	27660 <bt_smp_request_ltk+0x74>
   2760e:	e9dd 3200 	ldrd	r3, r2, [sp]
   27612:	4313      	orrs	r3, r2
   27614:	d124      	bne.n	27660 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   27616:	2103      	movs	r1, #3
   27618:	4630      	mov	r0, r6
   2761a:	f7ff fe21 	bl	27260 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2761e:	b1f8      	cbz	r0, 27660 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   27620:	2101      	movs	r1, #1
   27622:	4630      	mov	r0, r6
   27624:	f7ff fe1c 	bl	27260 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   27628:	b1d0      	cbz	r0, 27660 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2762a:	7d2c      	ldrb	r4, [r5, #20]
   2762c:	7b6b      	ldrb	r3, [r5, #13]
   2762e:	f105 0147 	add.w	r1, r5, #71	; 0x47
   27632:	429c      	cmp	r4, r3
   27634:	bf28      	it	cs
   27636:	461c      	movcs	r4, r3
   27638:	4622      	mov	r2, r4
   2763a:	4638      	mov	r0, r7
   2763c:	f001 ff19 	bl	29472 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   27640:	2c0f      	cmp	r4, #15
   27642:	d805      	bhi.n	27650 <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   27644:	4641      	mov	r1, r8
   27646:	f1c4 0210 	rsb	r2, r4, #16
   2764a:	1938      	adds	r0, r7, r4
   2764c:	f001 ff4b 	bl	294e6 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   27650:	4630      	mov	r0, r6
   27652:	2101      	movs	r1, #1
   27654:	f7ff fe6b 	bl	2732e <atomic_set_bit>
		return true;
   27658:	2001      	movs	r0, #1
}
   2765a:	b002      	add	sp, #8
   2765c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   27660:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   27664:	b983      	cbnz	r3, 27688 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   27666:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2766a:	4642      	mov	r2, r8
   2766c:	2020      	movs	r0, #32
   2766e:	7a21      	ldrb	r1, [r4, #8]
   27670:	f7f1 f8c4 	bl	187fc <bt_keys_find>
   27674:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   27678:	b930      	cbnz	r0, 27688 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2767a:	4642      	mov	r2, r8
   2767c:	2001      	movs	r0, #1
   2767e:	7a21      	ldrb	r1, [r4, #8]
   27680:	f7f1 f8bc 	bl	187fc <bt_keys_find>
   27684:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   27688:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2768c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   27690:	f1b8 0f00 	cmp.w	r8, #0
   27694:	d10c      	bne.n	276b0 <bt_smp_request_ltk+0xc4>
   27696:	e9dd 3200 	ldrd	r3, r2, [sp]
   2769a:	4313      	orrs	r3, r2
   2769c:	d108      	bne.n	276b0 <bt_smp_request_ltk+0xc4>
   2769e:	b300      	cbz	r0, 276e2 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   276a0:	89c3      	ldrh	r3, [r0, #14]
   276a2:	069a      	lsls	r2, r3, #26
   276a4:	d505      	bpl.n	276b2 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   276a6:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   276a8:	f100 011a 	add.w	r1, r0, #26
   276ac:	4622      	mov	r2, r4
   276ae:	e7c4      	b.n	2763a <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   276b0:	b1b8      	cbz	r0, 276e2 <bt_smp_request_ltk+0xf6>
   276b2:	89c3      	ldrh	r3, [r0, #14]
   276b4:	07db      	lsls	r3, r3, #31
   276b6:	d514      	bpl.n	276e2 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   276b8:	2208      	movs	r2, #8
   276ba:	4669      	mov	r1, sp
   276bc:	3040      	adds	r0, #64	; 0x40
   276be:	f001 fec8 	bl	29452 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   276c2:	b970      	cbnz	r0, 276e2 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   276c4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   276c8:	2202      	movs	r2, #2
   276ca:	a908      	add	r1, sp, #32
   276cc:	3048      	adds	r0, #72	; 0x48
   276ce:	f001 fec0 	bl	29452 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   276d2:	4680      	mov	r8, r0
   276d4:	b928      	cbnz	r0, 276e2 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   276d6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   276da:	7b0c      	ldrb	r4, [r1, #12]
   276dc:	314a      	adds	r1, #74	; 0x4a
   276de:	4622      	mov	r2, r4
   276e0:	e7ab      	b.n	2763a <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   276e2:	210f      	movs	r1, #15
   276e4:	4630      	mov	r0, r6
   276e6:	f7ff fdbb 	bl	27260 <atomic_test_bit>
   276ea:	b120      	cbz	r0, 276f6 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   276ec:	2202      	movs	r2, #2
   276ee:	2106      	movs	r1, #6
   276f0:	4620      	mov	r0, r4
   276f2:	f7ec fdeb 	bl	142cc <bt_conn_security_changed>
	smp_reset(smp);
   276f6:	4628      	mov	r0, r5
   276f8:	f7ff fec2 	bl	27480 <smp_reset>
		return false;
   276fc:	2000      	movs	r0, #0
   276fe:	e7ac      	b.n	2765a <bt_smp_request_ltk+0x6e>

00027700 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   27700:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27704:	4770      	bx	lr

00027706 <bt_smp_dhkey_ready>:
{
   27706:	b570      	push	{r4, r5, r6, lr}
   27708:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2770a:	2008      	movs	r0, #8
   2770c:	f7ef fb7e 	bl	16e0c <smp_find>
	if (smp) {
   27710:	4605      	mov	r5, r0
   27712:	b1e0      	cbz	r0, 2774e <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   27714:	1d06      	adds	r6, r0, #4
   27716:	2108      	movs	r1, #8
   27718:	4630      	mov	r0, r6
   2771a:	f7ff fdc8 	bl	272ae <atomic_clear_bit>
	if (!dhkey) {
   2771e:	b3bc      	cbz	r4, 27790 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   27720:	2107      	movs	r1, #7
   27722:	f7ff fdc4 	bl	272ae <atomic_clear_bit>
   27726:	4623      	mov	r3, r4
   27728:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2772c:	f104 0120 	add.w	r1, r4, #32
   27730:	f853 0b04 	ldr.w	r0, [r3], #4
   27734:	428b      	cmp	r3, r1
   27736:	f842 0b04 	str.w	r0, [r2], #4
   2773a:	d1f9      	bne.n	27730 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2773c:	210a      	movs	r1, #10
   2773e:	4630      	mov	r0, r6
   27740:	f7ff fd8e 	bl	27260 <atomic_test_bit>
   27744:	b170      	cbz	r0, 27764 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27746:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27748:	4630      	mov	r0, r6
   2774a:	f7ff fdf0 	bl	2732e <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2774e:	2007      	movs	r0, #7
   27750:	f7ef fb5c 	bl	16e0c <smp_find>
		if (smp) {
   27754:	4604      	mov	r4, r0
   27756:	b1e8      	cbz	r0, 27794 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   27758:	f7ef fc1a 	bl	16f90 <smp_dhkey_generate>
			if (err) {
   2775c:	4601      	mov	r1, r0
   2775e:	b1c8      	cbz	r0, 27794 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   27760:	4620      	mov	r0, r4
   27762:	e012      	b.n	2778a <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   27764:	2110      	movs	r1, #16
   27766:	4630      	mov	r0, r6
   27768:	f7ff fd7a 	bl	27260 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2776c:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2776e:	2800      	cmp	r0, #0
   27770:	d1ea      	bne.n	27748 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   27772:	4630      	mov	r0, r6
   27774:	f7ff fd74 	bl	27260 <atomic_test_bit>
   27778:	2800      	cmp	r0, #0
   2777a:	d0e8      	beq.n	2774e <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2777c:	4628      	mov	r0, r5
   2777e:	f7ef ffbf 	bl	17700 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   27782:	4601      	mov	r1, r0
   27784:	2800      	cmp	r0, #0
   27786:	d0e2      	beq.n	2774e <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   27788:	4628      	mov	r0, r5
   2778a:	f7f0 fb4d 	bl	17e28 <smp_error>
   2778e:	e7de      	b.n	2774e <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   27790:	210b      	movs	r1, #11
   27792:	e7f9      	b.n	27788 <bt_smp_dhkey_ready+0x82>
}
   27794:	bd70      	pop	{r4, r5, r6, pc}

00027796 <bt_smp_disconnected>:
{
   27796:	b570      	push	{r4, r5, r6, lr}
   27798:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2779a:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2779e:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   277a2:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   277a4:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   277a8:	f7f8 ff3e 	bl	20628 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   277ac:	2103      	movs	r1, #3
   277ae:	4620      	mov	r0, r4
   277b0:	f7ff fd56 	bl	27260 <atomic_test_bit>
   277b4:	b1a0      	cbz	r0, 277e0 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   277b6:	2108      	movs	r1, #8
   277b8:	4630      	mov	r0, r6
   277ba:	f7f0 fab7 	bl	17d2c <smp_pairing_complete>
	if (keys) {
   277be:	b13d      	cbz	r5, 277d0 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   277c0:	89eb      	ldrh	r3, [r5, #14]
   277c2:	b113      	cbz	r3, 277ca <bt_smp_disconnected+0x34>
   277c4:	7b6b      	ldrb	r3, [r5, #13]
   277c6:	079b      	lsls	r3, r3, #30
   277c8:	d502      	bpl.n	277d0 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   277ca:	4628      	mov	r0, r5
   277cc:	f7f1 f8fc 	bl	189c8 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   277d0:	4630      	mov	r0, r6
}
   277d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   277d6:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   277da:	2100      	movs	r1, #0
   277dc:	f001 be83 	b.w	294e6 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   277e0:	2101      	movs	r1, #1
   277e2:	4620      	mov	r0, r4
   277e4:	f7ff fd3c 	bl	27260 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   277e8:	2800      	cmp	r0, #0
   277ea:	d1e4      	bne.n	277b6 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   277ec:	210f      	movs	r1, #15
   277ee:	4620      	mov	r0, r4
   277f0:	f7ff fd36 	bl	27260 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   277f4:	2800      	cmp	r0, #0
   277f6:	d1de      	bne.n	277b6 <bt_smp_disconnected+0x20>
   277f8:	e7e1      	b.n	277be <bt_smp_disconnected+0x28>

000277fa <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   277fa:	b510      	push	{r4, lr}
   277fc:	1e43      	subs	r3, r0, #1
   277fe:	f100 0210 	add.w	r2, r0, #16
   27802:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   27804:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27808:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2780c:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2780e:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   27810:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   27812:	d1f7      	bne.n	27804 <sys_mem_swap.constprop.0+0xa>
	}
}
   27814:	bd10      	pop	{r4, pc}

00027816 <bt_crypto_aes_cmac>:
{
   27816:	b570      	push	{r4, r5, r6, lr}
   27818:	b0c2      	sub	sp, #264	; 0x108
   2781a:	460d      	mov	r5, r1
   2781c:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2781e:	4601      	mov	r1, r0
   27820:	aa16      	add	r2, sp, #88	; 0x58
   27822:	4668      	mov	r0, sp
{
   27824:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   27826:	f7fd fe01 	bl	2542c <tc_cmac_setup>
   2782a:	b918      	cbnz	r0, 27834 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2782c:	f06f 0004 	mvn.w	r0, #4
}
   27830:	b042      	add	sp, #264	; 0x108
   27832:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   27834:	4632      	mov	r2, r6
   27836:	4629      	mov	r1, r5
   27838:	4668      	mov	r0, sp
   2783a:	f7fd fe22 	bl	25482 <tc_cmac_update>
   2783e:	2800      	cmp	r0, #0
   27840:	d0f4      	beq.n	2782c <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   27842:	4669      	mov	r1, sp
   27844:	4620      	mov	r0, r4
   27846:	f7fd fe86 	bl	25556 <tc_cmac_final>
   2784a:	2800      	cmp	r0, #0
   2784c:	d0ee      	beq.n	2782c <bt_crypto_aes_cmac+0x16>
	return 0;
   2784e:	2000      	movs	r0, #0
   27850:	e7ee      	b.n	27830 <bt_crypto_aes_cmac+0x1a>

00027852 <bt_crypto_f4>:
{
   27852:	b5f0      	push	{r4, r5, r6, r7, lr}
   27854:	460e      	mov	r6, r1
   27856:	4614      	mov	r4, r2
   27858:	461d      	mov	r5, r3
   2785a:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   2785c:	4601      	mov	r1, r0
   2785e:	2220      	movs	r2, #32
   27860:	a805      	add	r0, sp, #20
{
   27862:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   27864:	f7f1 f8d2 	bl	18a0c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   27868:	2220      	movs	r2, #32
   2786a:	4631      	mov	r1, r6
   2786c:	a80d      	add	r0, sp, #52	; 0x34
   2786e:	f7f1 f8cd 	bl	18a0c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   27872:	4621      	mov	r1, r4
   27874:	2210      	movs	r2, #16
   27876:	a801      	add	r0, sp, #4
	m[64] = z;
   27878:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2787c:	f7f1 f8c6 	bl	18a0c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   27880:	463b      	mov	r3, r7
   27882:	2241      	movs	r2, #65	; 0x41
   27884:	a905      	add	r1, sp, #20
   27886:	a801      	add	r0, sp, #4
   27888:	f7ff ffc5 	bl	27816 <bt_crypto_aes_cmac>
	if (err) {
   2788c:	4604      	mov	r4, r0
   2788e:	b910      	cbnz	r0, 27896 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   27890:	4638      	mov	r0, r7
   27892:	f7ff ffb2 	bl	277fa <sys_mem_swap.constprop.0>
}
   27896:	4620      	mov	r0, r4
   27898:	b017      	add	sp, #92	; 0x5c
   2789a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002789c <bt_crypto_f6>:
{
   2789c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   278a0:	4616      	mov	r6, r2
   278a2:	461d      	mov	r5, r3
   278a4:	b097      	sub	sp, #92	; 0x5c
   278a6:	4604      	mov	r4, r0
   278a8:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   278ac:	2210      	movs	r2, #16
   278ae:	a805      	add	r0, sp, #20
{
   278b0:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   278b2:	f7f1 f8ab 	bl	18a0c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   278b6:	2210      	movs	r2, #16
   278b8:	4631      	mov	r1, r6
   278ba:	a809      	add	r0, sp, #36	; 0x24
   278bc:	f7f1 f8a6 	bl	18a0c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   278c0:	2210      	movs	r2, #16
   278c2:	4629      	mov	r1, r5
   278c4:	a80d      	add	r0, sp, #52	; 0x34
   278c6:	f7f1 f8a1 	bl	18a0c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   278ca:	2203      	movs	r2, #3
   278cc:	991e      	ldr	r1, [sp, #120]	; 0x78
   278ce:	a811      	add	r0, sp, #68	; 0x44
   278d0:	f7f1 f89c 	bl	18a0c <sys_memcpy_swap>
	m[51] = a1->type;
   278d4:	4649      	mov	r1, r9
   278d6:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   278da:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   278de:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   278e2:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   278e4:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   278e6:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   278e8:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   278ea:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   278ee:	f7f1 f88d 	bl	18a0c <sys_memcpy_swap>
	m[58] = a2->type;
   278f2:	4641      	mov	r1, r8
   278f4:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   278f8:	2206      	movs	r2, #6
	m[58] = a2->type;
   278fa:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   278fe:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   27902:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   27906:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   2790a:	888b      	ldrh	r3, [r1, #4]
   2790c:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   27910:	f7f1 f87c 	bl	18a0c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   27914:	4621      	mov	r1, r4
   27916:	2210      	movs	r2, #16
   27918:	a801      	add	r0, sp, #4
   2791a:	f7f1 f877 	bl	18a0c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2791e:	463b      	mov	r3, r7
   27920:	2241      	movs	r2, #65	; 0x41
   27922:	a905      	add	r1, sp, #20
   27924:	a801      	add	r0, sp, #4
   27926:	f7ff ff76 	bl	27816 <bt_crypto_aes_cmac>
	if (err) {
   2792a:	4604      	mov	r4, r0
   2792c:	b910      	cbnz	r0, 27934 <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   2792e:	4638      	mov	r0, r7
   27930:	f7ff ff63 	bl	277fa <sys_mem_swap.constprop.0>
}
   27934:	4620      	mov	r0, r4
   27936:	b017      	add	sp, #92	; 0x5c
   27938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002793c <fixed_data_unref>:
}
   2793c:	4770      	bx	lr

0002793e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2793e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   27940:	6849      	ldr	r1, [r1, #4]
   27942:	6809      	ldr	r1, [r1, #0]
   27944:	f7f1 b964 	b.w	18c10 <net_buf_alloc_len>

00027948 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   27948:	f7f8 b85e 	b.w	1fa08 <z_impl_k_queue_get>

0002794c <net_buf_simple_push_u8>:
{
   2794c:	b510      	push	{r4, lr}
   2794e:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   27950:	2101      	movs	r1, #1
   27952:	f7f1 fc2b 	bl	191ac <net_buf_simple_push>
	*data = val;
   27956:	7004      	strb	r4, [r0, #0]
}
   27958:	bd10      	pop	{r4, pc}

0002795a <net_buf_simple_pull_le16>:
{
   2795a:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2795c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2795e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   27960:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27962:	f7f1 fc43 	bl	191ec <net_buf_simple_pull>
}
   27966:	4620      	mov	r0, r4
   27968:	bd10      	pop	{r4, pc}

0002796a <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2796a:	6802      	ldr	r2, [r0, #0]
   2796c:	6880      	ldr	r0, [r0, #8]
}
   2796e:	1a10      	subs	r0, r2, r0
   27970:	4770      	bx	lr

00027972 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   27972:	8883      	ldrh	r3, [r0, #4]
   27974:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   27976:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   27978:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2797a:	6803      	ldr	r3, [r0, #0]
   2797c:	1a5b      	subs	r3, r3, r1
}
   2797e:	1ad0      	subs	r0, r2, r3
   27980:	4770      	bx	lr

00027982 <net_buf_simple_add_mem>:
{
   27982:	b538      	push	{r3, r4, r5, lr}
   27984:	460d      	mov	r5, r1
   27986:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   27988:	4611      	mov	r1, r2
   2798a:	f7f1 fc6b 	bl	19264 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2798e:	4622      	mov	r2, r4
   27990:	4629      	mov	r1, r5
}
   27992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27996:	f001 bd6c 	b.w	29472 <memcpy>

0002799a <net_buf_simple_add_u8>:
{
   2799a:	b510      	push	{r4, lr}
   2799c:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2799e:	2101      	movs	r1, #1
   279a0:	f7f1 fc60 	bl	19264 <net_buf_simple_add>
	*u8 = val;
   279a4:	7004      	strb	r4, [r0, #0]
}
   279a6:	bd10      	pop	{r4, pc}

000279a8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   279a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   279aa:	ab0b      	add	r3, sp, #44	; 0x2c
   279ac:	9305      	str	r3, [sp, #20]
   279ae:	9303      	str	r3, [sp, #12]
   279b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   279b2:	2201      	movs	r2, #1
   279b4:	9302      	str	r3, [sp, #8]
   279b6:	2300      	movs	r3, #0
   279b8:	4618      	mov	r0, r3
   279ba:	e9cd 3300 	strd	r3, r3, [sp]
   279be:	f7e6 fb27 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   279c2:	b007      	add	sp, #28
   279c4:	f85d fb04 	ldr.w	pc, [sp], #4

000279c8 <adc_context_on_timer_expired>:
{
   279c8:	b410      	push	{r4}
   279ca:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   279cc:	3808      	subs	r0, #8
   279ce:	e8d0 2fef 	ldaex	r2, [r0]
   279d2:	1c51      	adds	r1, r2, #1
   279d4:	e8c0 1fe4 	stlex	r4, r1, [r0]
   279d8:	2c00      	cmp	r4, #0
   279da:	d1f8      	bne.n	279ce <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   279dc:	b912      	cbnz	r2, 279e4 <adc_context_on_timer_expired+0x1c>
}
   279de:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   279e0:	f7f1 bc82 	b.w	192e8 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   279e4:	f06f 020f 	mvn.w	r2, #15
}
   279e8:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   279ea:	669a      	str	r2, [r3, #104]	; 0x68
}
   279ec:	4770      	bx	lr

000279ee <set_on_state>:
	__asm__ volatile(
   279ee:	f04f 0320 	mov.w	r3, #32
   279f2:	f3ef 8211 	mrs	r2, BASEPRI
   279f6:	f383 8812 	msr	BASEPRI_MAX, r3
   279fa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   279fe:	6803      	ldr	r3, [r0, #0]
   27a00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   27a04:	f043 0302 	orr.w	r3, r3, #2
   27a08:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   27a0a:	f382 8811 	msr	BASEPRI, r2
   27a0e:	f3bf 8f6f 	isb	sy
}
   27a12:	4770      	bx	lr

00027a14 <async_start>:
{
   27a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27a16:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   27a18:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   27a1a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   27a1c:	f04f 0520 	mov.w	r5, #32
   27a20:	f3ef 8611 	mrs	r6, BASEPRI
   27a24:	f385 8812 	msr	BASEPRI_MAX, r5
   27a28:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   27a2c:	250c      	movs	r5, #12
   27a2e:	4369      	muls	r1, r5
   27a30:	440c      	add	r4, r1
   27a32:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   27a36:	f005 0c07 	and.w	ip, r5, #7
   27a3a:	f1bc 0f01 	cmp.w	ip, #1
   27a3e:	d10c      	bne.n	27a5a <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   27a40:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   27a44:	f386 8811 	msr	BASEPRI, r6
   27a48:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   27a4c:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   27a50:	6843      	ldr	r3, [r0, #4]
   27a52:	585b      	ldr	r3, [r3, r1]
   27a54:	4798      	blx	r3
	return 0;
   27a56:	2000      	movs	r0, #0
}
   27a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   27a5a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   27a5e:	42af      	cmp	r7, r5
   27a60:	f386 8811 	msr	BASEPRI, r6
   27a64:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   27a68:	bf0c      	ite	eq
   27a6a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   27a6e:	f04f 30ff 	movne.w	r0, #4294967295
   27a72:	e7f1      	b.n	27a58 <async_start+0x44>

00027a74 <api_start>:
{
   27a74:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   27a76:	2480      	movs	r4, #128	; 0x80
   27a78:	9400      	str	r4, [sp, #0]
   27a7a:	f7ff ffcb 	bl	27a14 <async_start>
}
   27a7e:	b002      	add	sp, #8
   27a80:	bd10      	pop	{r4, pc}

00027a82 <onoff_started_callback>:
	return &data->mgr[type];
   27a82:	6900      	ldr	r0, [r0, #16]
   27a84:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   27a86:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   27a8a:	2100      	movs	r1, #0
   27a8c:	4710      	bx	r2

00027a8e <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   27a8e:	2003      	movs	r0, #3
   27a90:	f7f4 beaa 	b.w	1c7e8 <nrfx_clock_start>

00027a94 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   27a94:	2002      	movs	r0, #2
   27a96:	f7f4 bea7 	b.w	1c7e8 <nrfx_clock_start>

00027a9a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   27a9a:	2000      	movs	r0, #0
   27a9c:	f7f4 bea4 	b.w	1c7e8 <nrfx_clock_start>

00027aa0 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   27aa0:	2003      	movs	r0, #3
   27aa2:	f7f4 bf1f 	b.w	1c8e4 <nrfx_clock_stop>

00027aa6 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   27aa6:	2002      	movs	r0, #2
   27aa8:	f7f4 bf1c 	b.w	1c8e4 <nrfx_clock_stop>

00027aac <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   27aac:	2000      	movs	r0, #0
   27aae:	f7f4 bf19 	b.w	1c8e4 <nrfx_clock_stop>

00027ab2 <blocking_start_callback>:
{
   27ab2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   27ab4:	f7f8 b812 	b.w	1fadc <z_impl_k_sem_give>

00027ab8 <api_stop>:
	return stop(dev, subsys, CTX_API);
   27ab8:	2280      	movs	r2, #128	; 0x80
   27aba:	f7f1 be67 	b.w	1978c <stop>

00027abe <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27abe:	6843      	ldr	r3, [r0, #4]
}
   27ac0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27ac2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   27ac4:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   27ac6:	600b      	str	r3, [r1, #0]
}
   27ac8:	4770      	bx	lr

00027aca <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27aca:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   27acc:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27ad0:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   27ad2:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   27ad6:	6098      	str	r0, [r3, #8]
}
   27ad8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   27ada:	60d9      	str	r1, [r3, #12]
   27adc:	4770      	bx	lr

00027ade <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27ade:	6843      	ldr	r3, [r0, #4]
}
   27ae0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27ae2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   27ae4:	6099      	str	r1, [r3, #8]
}
   27ae6:	4770      	bx	lr

00027ae8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27ae8:	6843      	ldr	r3, [r0, #4]
}
   27aea:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27aec:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   27aee:	60d9      	str	r1, [r3, #12]
}
   27af0:	4770      	bx	lr

00027af2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27af2:	6843      	ldr	r3, [r0, #4]
   27af4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   27af6:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   27af8:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   27afc:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   27afe:	6090      	str	r0, [r2, #8]
}
   27b00:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   27b02:	60d3      	str	r3, [r2, #12]
   27b04:	4770      	bx	lr

00027b06 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   27b06:	2200      	movs	r2, #0
   27b08:	2101      	movs	r1, #1
   27b0a:	200a      	movs	r0, #10
   27b0c:	f7e8 b98e 	b.w	fe2c <z_arm_irq_priority_set>

00027b10 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   27b10:	b510      	push	{r4, lr}
	while (*count) {
   27b12:	680b      	ldr	r3, [r1, #0]
   27b14:	b913      	cbnz	r3, 27b1c <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   27b16:	4618      	mov	r0, r3
	*buf_len = 0;
   27b18:	6013      	str	r3, [r2, #0]
	return NULL;
   27b1a:	e005      	b.n	27b28 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   27b1c:	6803      	ldr	r3, [r0, #0]
   27b1e:	685c      	ldr	r4, [r3, #4]
   27b20:	b11c      	cbz	r4, 27b2a <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   27b22:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   27b24:	6803      	ldr	r3, [r0, #0]
   27b26:	6818      	ldr	r0, [r3, #0]
}
   27b28:	bd10      	pop	{r4, pc}
		++(*current);
   27b2a:	3308      	adds	r3, #8
   27b2c:	6003      	str	r3, [r0, #0]
		--(*count);
   27b2e:	680b      	ldr	r3, [r1, #0]
   27b30:	3b01      	subs	r3, #1
   27b32:	600b      	str	r3, [r1, #0]
   27b34:	e7ed      	b.n	27b12 <spi_context_get_next_buf.constprop.0+0x2>

00027b36 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27b36:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27b38:	ab0b      	add	r3, sp, #44	; 0x2c
   27b3a:	9305      	str	r3, [sp, #20]
   27b3c:	9303      	str	r3, [sp, #12]
   27b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27b40:	2201      	movs	r2, #1
   27b42:	9302      	str	r3, [sp, #8]
   27b44:	2300      	movs	r3, #0
   27b46:	4618      	mov	r0, r3
   27b48:	e9cd 3300 	strd	r3, r3, [sp]
   27b4c:	f7e6 fa60 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   27b50:	b007      	add	sp, #28
   27b52:	f85d fb04 	ldr.w	pc, [sp], #4

00027b56 <_spi_context_cs_control>:
{
   27b56:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   27b58:	6803      	ldr	r3, [r0, #0]
{
   27b5a:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   27b5c:	b1e3      	cbz	r3, 27b98 <_spi_context_cs_control+0x42>
   27b5e:	6898      	ldr	r0, [r3, #8]
   27b60:	b1d0      	cbz	r0, 27b98 <_spi_context_cs_control+0x42>
   27b62:	6805      	ldr	r5, [r0, #0]
   27b64:	b1c5      	cbz	r5, 27b98 <_spi_context_cs_control+0x42>
		if (on) {
   27b66:	b149      	cbz	r1, 27b7c <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   27b68:	2101      	movs	r1, #1
   27b6a:	f7f2 f9f9 	bl	19f60 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   27b6e:	6823      	ldr	r3, [r4, #0]
   27b70:	689b      	ldr	r3, [r3, #8]
   27b72:	6898      	ldr	r0, [r3, #8]
}
   27b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   27b78:	f001 bb72 	b.w	29260 <z_impl_k_busy_wait>
			if (!force_off &&
   27b7c:	b912      	cbnz	r2, 27b84 <_spi_context_cs_control+0x2e>
   27b7e:	889b      	ldrh	r3, [r3, #4]
   27b80:	04db      	lsls	r3, r3, #19
   27b82:	d409      	bmi.n	27b98 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   27b84:	6880      	ldr	r0, [r0, #8]
   27b86:	f001 fb6b 	bl	29260 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   27b8a:	6823      	ldr	r3, [r4, #0]
   27b8c:	2100      	movs	r1, #0
   27b8e:	6898      	ldr	r0, [r3, #8]
}
   27b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   27b94:	f7f2 b9e4 	b.w	19f60 <gpio_pin_set_dt.isra.0>
}
   27b98:	bd38      	pop	{r3, r4, r5, pc}

00027b9a <spi_context_unlock_unconditionally>:
{
   27b9a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   27b9c:	2201      	movs	r2, #1
   27b9e:	2100      	movs	r1, #0
{
   27ba0:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   27ba2:	f7ff ffd8 	bl	27b56 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   27ba6:	69a3      	ldr	r3, [r4, #24]
   27ba8:	b933      	cbnz	r3, 27bb8 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   27baa:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   27bac:	f104 0010 	add.w	r0, r4, #16
}
   27bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27bb4:	f7f7 bf92 	b.w	1fadc <z_impl_k_sem_give>
   27bb8:	bd10      	pop	{r4, pc}

00027bba <spi_nrfx_release>:
{
   27bba:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   27bbc:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   27bbe:	6803      	ldr	r3, [r0, #0]
   27bc0:	428b      	cmp	r3, r1
   27bc2:	d106      	bne.n	27bd2 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   27bc4:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   27bc8:	b934      	cbnz	r4, 27bd8 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   27bca:	f7ff ffe6 	bl	27b9a <spi_context_unlock_unconditionally>
	return 0;
   27bce:	4620      	mov	r0, r4
}
   27bd0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   27bd2:	f06f 0015 	mvn.w	r0, #21
   27bd6:	e7fb      	b.n	27bd0 <spi_nrfx_release+0x16>
		return -EBUSY;
   27bd8:	f06f 000f 	mvn.w	r0, #15
   27bdc:	e7f8      	b.n	27bd0 <spi_nrfx_release+0x16>

00027bde <k_sem_give>:
   27bde:	f7f7 bf7d 	b.w	1fadc <z_impl_k_sem_give>

00027be2 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   27be2:	b918      	cbnz	r0, 27bec <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   27be4:	f101 0030 	add.w	r0, r1, #48	; 0x30
   27be8:	f7ff bff9 	b.w	27bde <k_sem_give>
}
   27bec:	4770      	bx	lr

00027bee <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27bee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27bf0:	ab0b      	add	r3, sp, #44	; 0x2c
   27bf2:	9305      	str	r3, [sp, #20]
   27bf4:	9303      	str	r3, [sp, #12]
   27bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27bf8:	9302      	str	r3, [sp, #8]
   27bfa:	2300      	movs	r3, #0
   27bfc:	4618      	mov	r0, r3
   27bfe:	e9cd 3300 	strd	r3, r3, [sp]
   27c02:	f7e6 fa05 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   27c06:	b007      	add	sp, #28
   27c08:	f85d fb04 	ldr.w	pc, [sp], #4

00027c0c <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   27c0c:	f04f 32ff 	mov.w	r2, #4294967295
   27c10:	f04f 33ff 	mov.w	r3, #4294967295
   27c14:	3018      	adds	r0, #24
   27c16:	f7f7 bfa5 	b.w	1fb64 <z_impl_k_sem_take>

00027c1a <qspi_trans_lock.isra.0>:
   27c1a:	f04f 32ff 	mov.w	r2, #4294967295
   27c1e:	f04f 33ff 	mov.w	r3, #4294967295
   27c22:	f7f7 bf9f 	b.w	1fb64 <z_impl_k_sem_take>

00027c26 <qspi_nor_write_protection_set>:
{
   27c26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   27c28:	2200      	movs	r2, #0
   27c2a:	4291      	cmp	r1, r2
   27c2c:	bf0c      	ite	eq
   27c2e:	2306      	moveq	r3, #6
   27c30:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   27c32:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   27c34:	e9cd 2201 	strd	r2, r2, [sp, #4]
   27c38:	9203      	str	r2, [sp, #12]
   27c3a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   27c3e:	f7f2 fcf7 	bl	1a630 <qspi_send_cmd>
		ret = -EIO;
   27c42:	2800      	cmp	r0, #0
}
   27c44:	bf18      	it	ne
   27c46:	f06f 0004 	mvnne.w	r0, #4
   27c4a:	b005      	add	sp, #20
   27c4c:	f85d fb04 	ldr.w	pc, [sp], #4

00027c50 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   27c50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   27c52:	23ff      	movs	r3, #255	; 0xff
   27c54:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   27c58:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   27c5c:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   27c5e:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   27c60:	2301      	movs	r3, #1
   27c62:	e9cd 3202 	strd	r3, r2, [sp, #8]
   27c66:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   27c68:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   27c6a:	f88d 300c 	strb.w	r3, [sp, #12]
   27c6e:	ab01      	add	r3, sp, #4
   27c70:	9204      	str	r2, [sp, #16]
   27c72:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   27c74:	f7f2 fcdc 	bl	1a630 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   27c78:	2800      	cmp	r0, #0
   27c7a:	bfa8      	it	ge
   27c7c:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   27c80:	b007      	add	sp, #28
   27c82:	f85d fb04 	ldr.w	pc, [sp], #4

00027c86 <is_regular_addr_valid>:
{
   27c86:	b538      	push	{r3, r4, r5, lr}
   27c88:	4605      	mov	r5, r0
   27c8a:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   27c8c:	f000 fc6a 	bl	28564 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   27c90:	2d00      	cmp	r5, #0
   27c92:	db07      	blt.n	27ca4 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   27c94:	42a8      	cmp	r0, r5
   27c96:	d905      	bls.n	27ca4 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   27c98:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   27c9a:	4284      	cmp	r4, r0
   27c9c:	bf8c      	ite	hi
   27c9e:	2000      	movhi	r0, #0
   27ca0:	2001      	movls	r0, #1
}
   27ca2:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   27ca4:	2000      	movs	r0, #0
   27ca6:	e7fc      	b.n	27ca2 <is_regular_addr_valid+0x1c>

00027ca8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27ca8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27caa:	ab0b      	add	r3, sp, #44	; 0x2c
   27cac:	9305      	str	r3, [sp, #20]
   27cae:	9303      	str	r3, [sp, #12]
   27cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27cb2:	2201      	movs	r2, #1
   27cb4:	9302      	str	r3, [sp, #8]
   27cb6:	2300      	movs	r3, #0
   27cb8:	4618      	mov	r0, r3
   27cba:	e9cd 3300 	strd	r3, r3, [sp]
   27cbe:	f7e6 f9a7 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   27cc2:	b007      	add	sp, #28
   27cc4:	f85d fb04 	ldr.w	pc, [sp], #4

00027cc8 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   27cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27cca:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   27ccc:	2300      	movs	r3, #0
{
   27cce:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   27cd0:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   27cd2:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   27cd4:	60a3      	str	r3, [r4, #8]
{
   27cd6:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   27cd8:	6913      	ldr	r3, [r2, #16]
   27cda:	4669      	mov	r1, sp
   27cdc:	aa01      	add	r2, sp, #4
   27cde:	4798      	blx	r3

	while (layout_size--) {
   27ce0:	9b01      	ldr	r3, [sp, #4]
   27ce2:	1e5a      	subs	r2, r3, #1
   27ce4:	9201      	str	r2, [sp, #4]
   27ce6:	b91b      	cbnz	r3, 27cf0 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   27ce8:	f06f 0015 	mvn.w	r0, #21
}
   27cec:	b003      	add	sp, #12
   27cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   27cf0:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   27cf2:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   27cf4:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   27cf6:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   27cf8:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   27cfa:	b985      	cbnz	r5, 27d1e <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   27cfc:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   27cfe:	f8d0 c000 	ldr.w	ip, [r0]
   27d02:	4563      	cmp	r3, ip
   27d04:	bf28      	it	cs
   27d06:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   27d08:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   27d0c:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   27d0e:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   27d10:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   27d12:	6802      	ldr	r2, [r0, #0]
   27d14:	429a      	cmp	r2, r3
   27d16:	d806      	bhi.n	27d26 <flash_get_page_info+0x5e>
		layout++;
   27d18:	3008      	adds	r0, #8
   27d1a:	9000      	str	r0, [sp, #0]
   27d1c:	e7e0      	b.n	27ce0 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   27d1e:	1a6b      	subs	r3, r5, r1
   27d20:	fbb3 f3f7 	udiv	r3, r3, r7
   27d24:	e7eb      	b.n	27cfe <flash_get_page_info+0x36>
			return 0;
   27d26:	2000      	movs	r0, #0
   27d28:	e7e0      	b.n	27cec <flash_get_page_info+0x24>

00027d2a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   27d2a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   27d2c:	2200      	movs	r2, #0
   27d2e:	f7ff bfcb 	b.w	27cc8 <flash_get_page_info>

00027d32 <uarte_nrfx_config_get>:
{
   27d32:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   27d34:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   27d36:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   27d3a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   27d3e:	2000      	movs	r0, #0
   27d40:	4770      	bx	lr

00027d42 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   27d42:	6843      	ldr	r3, [r0, #4]
   27d44:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   27d46:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   27d4a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   27d4e:	4770      	bx	lr

00027d50 <tx_start>:
{
   27d50:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   27d52:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   27d54:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27d56:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   27d5a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27d5e:	2200      	movs	r2, #0
   27d60:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   27d64:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   27d68:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   27d6c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   27d70:	6862      	ldr	r2, [r4, #4]
   27d72:	06d2      	lsls	r2, r2, #27
   27d74:	d511      	bpl.n	27d9a <tx_start+0x4a>
	if (data->async) {
   27d76:	6902      	ldr	r2, [r0, #16]
   27d78:	68d2      	ldr	r2, [r2, #12]
   27d7a:	b12a      	cbz	r2, 27d88 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   27d7c:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   27d80:	f041 0101 	orr.w	r1, r1, #1
   27d84:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   27d88:	2108      	movs	r1, #8
	return config->uarte_regs;
   27d8a:	6842      	ldr	r2, [r0, #4]
   27d8c:	6812      	ldr	r2, [r2, #0]
   27d8e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   27d92:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   27d96:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27d9a:	2201      	movs	r2, #1
   27d9c:	609a      	str	r2, [r3, #8]
}
   27d9e:	bd10      	pop	{r4, pc}

00027da0 <user_callback>:
	if (data->async->user_callback) {
   27da0:	6903      	ldr	r3, [r0, #16]
   27da2:	68da      	ldr	r2, [r3, #12]
   27da4:	6813      	ldr	r3, [r2, #0]
   27da6:	b10b      	cbz	r3, 27dac <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   27da8:	6852      	ldr	r2, [r2, #4]
   27daa:	4718      	bx	r3
}
   27dac:	4770      	bx	lr

00027dae <notify_uart_rx_rdy>:
{
   27dae:	b570      	push	{r4, r5, r6, lr}
   27db0:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   27db2:	6906      	ldr	r6, [r0, #16]
{
   27db4:	4604      	mov	r4, r0
   27db6:	460d      	mov	r5, r1
	struct uart_event evt = {
   27db8:	2214      	movs	r2, #20
   27dba:	2100      	movs	r1, #0
   27dbc:	a801      	add	r0, sp, #4
   27dbe:	f001 fb92 	bl	294e6 <memset>
   27dc2:	2302      	movs	r3, #2
   27dc4:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   27dc8:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   27dca:	4620      	mov	r0, r4
	struct uart_event evt = {
   27dcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   27dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   27dd0:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   27dd2:	e9cd 3503 	strd	r3, r5, [sp, #12]
   27dd6:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   27dd8:	f7ff ffe2 	bl	27da0 <user_callback>
}
   27ddc:	b006      	add	sp, #24
   27dde:	bd70      	pop	{r4, r5, r6, pc}

00027de0 <rx_buf_release>:
{
   27de0:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   27de2:	680e      	ldr	r6, [r1, #0]
{
   27de4:	4605      	mov	r5, r0
   27de6:	460c      	mov	r4, r1
   27de8:	b086      	sub	sp, #24
	if (*buf) {
   27dea:	b17e      	cbz	r6, 27e0c <rx_buf_release+0x2c>
		struct uart_event evt = {
   27dec:	2214      	movs	r2, #20
   27dee:	2100      	movs	r1, #0
   27df0:	a801      	add	r0, sp, #4
   27df2:	f001 fb78 	bl	294e6 <memset>
   27df6:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   27df8:	4628      	mov	r0, r5
   27dfa:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   27dfe:	f88d 3004 	strb.w	r3, [sp, #4]
   27e02:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   27e04:	f7ff ffcc 	bl	27da0 <user_callback>
		*buf = NULL;
   27e08:	2300      	movs	r3, #0
   27e0a:	6023      	str	r3, [r4, #0]
}
   27e0c:	b006      	add	sp, #24
   27e0e:	bd70      	pop	{r4, r5, r6, pc}

00027e10 <notify_rx_disable>:
{
   27e10:	b510      	push	{r4, lr}
   27e12:	b086      	sub	sp, #24
   27e14:	4604      	mov	r4, r0
	struct uart_event evt = {
   27e16:	2214      	movs	r2, #20
   27e18:	2100      	movs	r1, #0
   27e1a:	a801      	add	r0, sp, #4
   27e1c:	f001 fb63 	bl	294e6 <memset>
   27e20:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   27e22:	4620      	mov	r0, r4
   27e24:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   27e26:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   27e2a:	f7ff ffb9 	bl	27da0 <user_callback>
}
   27e2e:	b006      	add	sp, #24
   27e30:	bd10      	pop	{r4, pc}

00027e32 <uarte_nrfx_rx_buf_rsp>:
{
   27e32:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   27e34:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   27e36:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   27e38:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   27e3a:	f04f 0020 	mov.w	r0, #32
   27e3e:	f3ef 8611 	mrs	r6, BASEPRI
   27e42:	f380 8812 	msr	BASEPRI_MAX, r0
   27e46:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   27e4a:	68ec      	ldr	r4, [r5, #12]
   27e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   27e4e:	b198      	cbz	r0, 27e78 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   27e50:	6e60      	ldr	r0, [r4, #100]	; 0x64
   27e52:	b9a0      	cbnz	r0, 27e7e <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   27e54:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   27e56:	68ec      	ldr	r4, [r5, #12]
   27e58:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   27e5a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   27e5e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   27e62:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   27e66:	f042 0220 	orr.w	r2, r2, #32
   27e6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   27e6e:	f386 8811 	msr	BASEPRI, r6
   27e72:	f3bf 8f6f 	isb	sy
}
   27e76:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   27e78:	f06f 000c 	mvn.w	r0, #12
   27e7c:	e7f7      	b.n	27e6e <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   27e7e:	f06f 000f 	mvn.w	r0, #15
   27e82:	e7f4      	b.n	27e6e <uarte_nrfx_rx_buf_rsp+0x3c>

00027e84 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   27e84:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   27e86:	68d8      	ldr	r0, [r3, #12]
   27e88:	b120      	cbz	r0, 27e94 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   27e8a:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   27e8c:	68db      	ldr	r3, [r3, #12]
	return 0;
   27e8e:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   27e90:	605a      	str	r2, [r3, #4]
	return 0;
   27e92:	4770      	bx	lr
		return -ENOTSUP;
   27e94:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   27e98:	4770      	bx	lr

00027e9a <uarte_nrfx_poll_in>:
{
   27e9a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   27e9c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   27e9e:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   27ea0:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   27ea2:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   27ea4:	b960      	cbnz	r0, 27ec0 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27ea6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27eaa:	b164      	cbz	r4, 27ec6 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   27eac:	6992      	ldr	r2, [r2, #24]
   27eae:	7812      	ldrb	r2, [r2, #0]
   27eb0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27eb2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   27eb6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27eba:	2201      	movs	r2, #1
   27ebc:	601a      	str	r2, [r3, #0]
}
   27ebe:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   27ec0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27ec4:	e7fb      	b.n	27ebe <uarte_nrfx_poll_in+0x24>
		return -1;
   27ec6:	f04f 30ff 	mov.w	r0, #4294967295
   27eca:	e7f8      	b.n	27ebe <uarte_nrfx_poll_in+0x24>

00027ecc <uarte_nrfx_rx_disable>:
{
   27ecc:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   27ece:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   27ed0:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   27ed2:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   27ed4:	68eb      	ldr	r3, [r5, #12]
   27ed6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   27ed8:	b1ba      	cbz	r2, 27f0a <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   27eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   27edc:	b153      	cbz	r3, 27ef4 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   27ede:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   27ee2:	f023 0320 	bic.w	r3, r3, #32
   27ee6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27eea:	2300      	movs	r3, #0
   27eec:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   27ef0:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   27ef4:	68e8      	ldr	r0, [r5, #12]
   27ef6:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   27ef8:	f001 f9e4 	bl	292c4 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   27efc:	2000      	movs	r0, #0
   27efe:	68eb      	ldr	r3, [r5, #12]
   27f00:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27f04:	2301      	movs	r3, #1
   27f06:	6063      	str	r3, [r4, #4]
}
   27f08:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   27f0a:	f06f 000d 	mvn.w	r0, #13
   27f0e:	e7fb      	b.n	27f08 <uarte_nrfx_rx_disable+0x3c>

00027f10 <setup_tx_cache>:
{
   27f10:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   27f12:	68c3      	ldr	r3, [r0, #12]
   27f14:	68da      	ldr	r2, [r3, #12]
   27f16:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   27f18:	1a52      	subs	r2, r2, r1
   27f1a:	d00f      	beq.n	27f3c <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   27f1c:	2a08      	cmp	r2, #8
   27f1e:	bf28      	it	cs
   27f20:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   27f22:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   27f24:	68c3      	ldr	r3, [r0, #12]
   27f26:	6999      	ldr	r1, [r3, #24]
   27f28:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   27f2a:	68c3      	ldr	r3, [r0, #12]
   27f2c:	6898      	ldr	r0, [r3, #8]
   27f2e:	69d9      	ldr	r1, [r3, #28]
   27f30:	4401      	add	r1, r0
   27f32:	6998      	ldr	r0, [r3, #24]
   27f34:	f001 fa9d 	bl	29472 <memcpy>
	return true;
   27f38:	2001      	movs	r0, #1
}
   27f3a:	bd08      	pop	{r3, pc}
		return false;
   27f3c:	4610      	mov	r0, r2
   27f3e:	e7fc      	b.n	27f3a <setup_tx_cache+0x2a>

00027f40 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   27f40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   27f42:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   27f44:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   27f46:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   27f48:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   27f4c:	b1f1      	cbz	r1, 27f8c <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   27f4e:	2100      	movs	r1, #0
   27f50:	4618      	mov	r0, r3
   27f52:	f001 fac8 	bl	294e6 <memset>
   27f56:	4603      	mov	r3, r0
   27f58:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   27f5a:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27f5e:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27f60:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   27f62:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27f66:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   27f6a:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27f6e:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27f70:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27f74:	2800      	cmp	r0, #0
   27f76:	d0fb      	beq.n	27f70 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27f78:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   27f7c:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   27f80:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   27f84:	b92b      	cbnz	r3, 27f92 <rx_flush.isra.0+0x52>
			return rx_amount;
   27f86:	b2c0      	uxtb	r0, r0
}
   27f88:	b002      	add	sp, #8
   27f8a:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   27f8c:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   27f8e:	4669      	mov	r1, sp
   27f90:	e7e3      	b.n	27f5a <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   27f92:	4285      	cmp	r5, r0
   27f94:	d1f7      	bne.n	27f86 <rx_flush.isra.0+0x46>
   27f96:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   27f98:	4293      	cmp	r3, r2
   27f9a:	d101      	bne.n	27fa0 <rx_flush.isra.0+0x60>
	return 0;
   27f9c:	2000      	movs	r0, #0
   27f9e:	e7f3      	b.n	27f88 <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   27fa0:	f813 1b01 	ldrb.w	r1, [r3], #1
   27fa4:	2900      	cmp	r1, #0
   27fa6:	d0f7      	beq.n	27f98 <rx_flush.isra.0+0x58>
   27fa8:	e7ed      	b.n	27f86 <rx_flush.isra.0+0x46>

00027faa <async_uart_release>:
{
   27faa:	b570      	push	{r4, r5, r6, lr}
   27fac:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   27fae:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   27fb0:	f04f 0320 	mov.w	r3, #32
   27fb4:	f3ef 8611 	mrs	r6, BASEPRI
   27fb8:	f383 8812 	msr	BASEPRI_MAX, r3
   27fbc:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   27fc0:	68d0      	ldr	r0, [r2, #12]
   27fc2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   27fc6:	ea23 0301 	bic.w	r3, r3, r1
   27fca:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   27fce:	68d5      	ldr	r5, [r2, #12]
   27fd0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   27fd4:	b973      	cbnz	r3, 27ff4 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   27fd6:	2902      	cmp	r1, #2
   27fd8:	d107      	bne.n	27fea <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   27fda:	2205      	movs	r2, #5
   27fdc:	6860      	ldr	r0, [r4, #4]
   27fde:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   27fe2:	f7ff ffad 	bl	27f40 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   27fe6:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   27fea:	2200      	movs	r2, #0
	return config->uarte_regs;
   27fec:	6863      	ldr	r3, [r4, #4]
   27fee:	681b      	ldr	r3, [r3, #0]
   27ff0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   27ff4:	f386 8811 	msr	BASEPRI, r6
   27ff8:	f3bf 8f6f 	isb	sy
}
   27ffc:	bd70      	pop	{r4, r5, r6, pc}

00027ffe <is_tx_ready.isra.0>:
	return config->uarte_regs;
   27ffe:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   28000:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28002:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   28006:	b940      	cbnz	r0, 2801a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   28008:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2800a:	079b      	lsls	r3, r3, #30
   2800c:	d406      	bmi.n	2801c <is_tx_ready.isra.0+0x1e>
   2800e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   28012:	3800      	subs	r0, #0
   28014:	bf18      	it	ne
   28016:	2001      	movne	r0, #1
   28018:	4770      	bx	lr
   2801a:	2001      	movs	r0, #1
}
   2801c:	4770      	bx	lr

0002801e <start_tx_locked>:
{
   2801e:	b510      	push	{r4, lr}
   28020:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   28022:	6840      	ldr	r0, [r0, #4]
   28024:	f7ff ffeb 	bl	27ffe <is_tx_ready.isra.0>
   28028:	68cb      	ldr	r3, [r1, #12]
   2802a:	b918      	cbnz	r0, 28034 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2802c:	2201      	movs	r2, #1
   2802e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   28032:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   28034:	2200      	movs	r2, #0
   28036:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2803a:	f04f 32ff 	mov.w	r2, #4294967295
   2803e:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   28040:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   28042:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   28046:	68cb      	ldr	r3, [r1, #12]
}
   28048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2804c:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   28050:	f7ff be7e 	b.w	27d50 <tx_start>

00028054 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   28054:	b510      	push	{r4, lr}
   28056:	4604      	mov	r4, r0
   28058:	2200      	movs	r2, #0
   2805a:	2101      	movs	r1, #1
   2805c:	200b      	movs	r0, #11
   2805e:	f7e7 fee5 	bl	fe2c <z_arm_irq_priority_set>
   28062:	200b      	movs	r0, #11
   28064:	f7e7 feb2 	bl	fdcc <arch_irq_enable>
   28068:	4620      	mov	r0, r4
   2806a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2806e:	f7f3 b843 	b.w	1b0f8 <uarte_instance_init.constprop.0>

00028072 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   28072:	b510      	push	{r4, lr}
   28074:	4604      	mov	r4, r0
   28076:	2200      	movs	r2, #0
   28078:	2101      	movs	r1, #1
   2807a:	2008      	movs	r0, #8
   2807c:	f7e7 fed6 	bl	fe2c <z_arm_irq_priority_set>
   28080:	2008      	movs	r0, #8
   28082:	f7e7 fea3 	bl	fdcc <arch_irq_enable>
   28086:	4620      	mov	r0, r4
   28088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2808c:	f7f3 b834 	b.w	1b0f8 <uarte_instance_init.constprop.0>

00028090 <rx_timeout>:
{
   28090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   28092:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   28094:	68e3      	ldr	r3, [r4, #12]
   28096:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2809a:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2809e:	bb13      	cbnz	r3, 280e6 <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   280a0:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   280a2:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   280a4:	6873      	ldr	r3, [r6, #4]
   280a6:	681b      	ldr	r3, [r3, #0]
   280a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   280ac:	68e3      	ldr	r3, [r4, #12]
   280ae:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   280b2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   280b4:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   280b6:	bf1f      	itttt	ne
   280b8:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   280ba:	68e3      	ldrne	r3, [r4, #12]
   280bc:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   280be:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   280c0:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   280c2:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   280c6:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   280c8:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   280ca:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   280cc:	da0c      	bge.n	280e8 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   280ce:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   280d2:	68e3      	ldr	r3, [r4, #12]
   280d4:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   280d8:	4281      	cmp	r1, r0
   280da:	d80b      	bhi.n	280f4 <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   280dc:	2210      	movs	r2, #16
	return config->uarte_regs;
   280de:	6873      	ldr	r3, [r6, #4]
   280e0:	681b      	ldr	r3, [r3, #0]
   280e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   280e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   280e8:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   280ec:	eb02 0c01 	add.w	ip, r2, r1
   280f0:	4584      	cmp	ip, r0
   280f2:	d904      	bls.n	280fe <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   280f4:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   280f6:	2d00      	cmp	r5, #0
   280f8:	ddf0      	ble.n	280dc <rx_timeout+0x4c>
		clipped = true;
   280fa:	2701      	movs	r7, #1
   280fc:	e005      	b.n	2810a <rx_timeout+0x7a>
	if (len > 0) {
   280fe:	2a00      	cmp	r2, #0
   28100:	d0ec      	beq.n	280dc <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   28102:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   28106:	428a      	cmp	r2, r1
   28108:	da12      	bge.n	28130 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2810a:	4629      	mov	r1, r5
   2810c:	4630      	mov	r0, r6
   2810e:	f7ff fe4e 	bl	27dae <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   28112:	68e2      	ldr	r2, [r4, #12]
   28114:	6e13      	ldr	r3, [r2, #96]	; 0x60
   28116:	442b      	add	r3, r5
   28118:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2811a:	68e2      	ldr	r2, [r4, #12]
   2811c:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2811e:	442b      	add	r3, r5
   28120:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   28122:	2f00      	cmp	r7, #0
   28124:	d0da      	beq.n	280dc <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   28126:	68e0      	ldr	r0, [r4, #12]
   28128:	3080      	adds	r0, #128	; 0x80
   2812a:	f001 f8cb 	bl	292c4 <z_impl_k_timer_stop>
}
   2812e:	e7d5      	b.n	280dc <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   28130:	1a52      	subs	r2, r2, r1
   28132:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   28134:	e7d2      	b.n	280dc <rx_timeout+0x4c>

00028136 <uarte_nrfx_tx_abort>:
{
   28136:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   28138:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2813a:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2813c:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2813e:	68da      	ldr	r2, [r3, #12]
   28140:	6891      	ldr	r1, [r2, #8]
   28142:	b151      	cbz	r1, 2815a <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   28144:	2400      	movs	r4, #0
   28146:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2814a:	68d8      	ldr	r0, [r3, #12]
   2814c:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2814e:	f001 f8b9 	bl	292c4 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28152:	2301      	movs	r3, #1
	return 0;
   28154:	4620      	mov	r0, r4
   28156:	60eb      	str	r3, [r5, #12]
}
   28158:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2815a:	f06f 000d 	mvn.w	r0, #13
   2815e:	e7fb      	b.n	28158 <uarte_nrfx_tx_abort+0x22>

00028160 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   28160:	6b43      	ldr	r3, [r0, #52]	; 0x34
   28162:	6818      	ldr	r0, [r3, #0]
   28164:	f7ff bfe7 	b.w	28136 <uarte_nrfx_tx_abort>

00028168 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28168:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2816a:	ab0b      	add	r3, sp, #44	; 0x2c
   2816c:	9305      	str	r3, [sp, #20]
   2816e:	9303      	str	r3, [sp, #12]
   28170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28172:	9302      	str	r3, [sp, #8]
   28174:	2300      	movs	r3, #0
   28176:	4618      	mov	r0, r3
   28178:	e9cd 3300 	strd	r3, r3, [sp]
   2817c:	f7e5 ff48 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   28180:	b007      	add	sp, #28
   28182:	f85d fb04 	ldr.w	pc, [sp], #4

00028186 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   28186:	2000      	movs	r0, #0
   28188:	4770      	bx	lr

0002818a <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2818a:	b538      	push	{r3, r4, r5, lr}
   2818c:	460c      	mov	r4, r1
   2818e:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   28190:	f7ea fa08 	bl	125a4 <bt_is_ready>
   28194:	b128      	cbz	r0, 281a2 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   28196:	4629      	mov	r1, r5
   28198:	4620      	mov	r0, r4
}
   2819a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2819e:	f7e9 bc0f 	b.w	119c0 <bt_hci_le_rand>
}
   281a2:	f06f 000a 	mvn.w	r0, #10
   281a6:	bd38      	pop	{r3, r4, r5, pc}

000281a8 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   281a8:	4608      	mov	r0, r1
   281aa:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   281ac:	4611      	mov	r1, r2
   281ae:	f7f4 f959 	bl	1c464 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   281b2:	2800      	cmp	r0, #0
	}

	return 0;
}
   281b4:	bf18      	it	ne
   281b6:	f06f 0004 	mvnne.w	r0, #4
   281ba:	bd08      	pop	{r3, pc}

000281bc <entropy_psa_crypto_rng_init>:
{
   281bc:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   281be:	f000 f921 	bl	28404 <psa_crypto_init>
		return -EIO;
   281c2:	2800      	cmp	r0, #0
}
   281c4:	bf18      	it	ne
   281c6:	f06f 0004 	mvnne.w	r0, #4
   281ca:	bd08      	pop	{r3, pc}

000281cc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   281cc:	4770      	bx	lr

000281ce <sys_clock_cycle_get_32>:
{
   281ce:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   281d0:	f7f3 fd7c 	bl	1bccc <z_nrf_rtc_timer_read>
}
   281d4:	bd08      	pop	{r3, pc}

000281d6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   281d6:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   281d8:	6843      	ldr	r3, [r0, #4]
   281da:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   281dc:	7a05      	ldrb	r5, [r0, #8]
   281de:	6844      	ldr	r4, [r0, #4]
   281e0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   281e4:	42a3      	cmp	r3, r4
   281e6:	d302      	bcc.n	281ee <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   281e8:	f06f 0001 	mvn.w	r0, #1
}
   281ec:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   281ee:	795c      	ldrb	r4, [r3, #5]
   281f0:	428c      	cmp	r4, r1
   281f2:	d001      	beq.n	281f8 <pinctrl_lookup_state+0x22>
		(*state)++;
   281f4:	3308      	adds	r3, #8
   281f6:	e7f0      	b.n	281da <pinctrl_lookup_state+0x4>
			return 0;
   281f8:	2000      	movs	r0, #0
   281fa:	e7f7      	b.n	281ec <pinctrl_lookup_state+0x16>

000281fc <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   281fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28200:	4615      	mov	r5, r2
   28202:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28204:	f04f 0901 	mov.w	r9, #1
   28208:	b085      	sub	sp, #20
   2820a:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2820e:	45d0      	cmp	r8, sl
   28210:	d103      	bne.n	2821a <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   28212:	2000      	movs	r0, #0
}
   28214:	b005      	add	sp, #20
   28216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2821a:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2821e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   28222:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   28226:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   28228:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2822c:	bf08      	it	eq
   2822e:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   28232:	2b22      	cmp	r3, #34	; 0x22
   28234:	f200 8091 	bhi.w	2835a <pinctrl_configure_pins+0x15e>
   28238:	e8df f003 	tbb	[pc, r3]
   2823c:	38231e12 	.word	0x38231e12
   28240:	8f383426 	.word	0x8f383426
   28244:	3b8f8f8f 	.word	0x3b8f8f8f
   28248:	8f8f8f65 	.word	0x8f8f8f65
   2824c:	8f8f8f8f 	.word	0x8f8f8f8f
   28250:	71688f8f 	.word	0x71688f8f
   28254:	8f8f7774 	.word	0x8f8f7774
   28258:	83807a8f 	.word	0x83807a8f
   2825c:	8986      	.short	0x8986
   2825e:	8c          	.byte	0x8c
   2825f:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   28260:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28264:	a803      	add	r0, sp, #12
   28266:	9403      	str	r4, [sp, #12]
   28268:	f7f3 ff68 	bl	1c13c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2826c:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   2826e:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28270:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   28274:	6083      	str	r3, [r0, #8]
   28276:	e002      	b.n	2827e <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   28278:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2827c:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   2827e:	46b3      	mov	fp, r6
   28280:	e01e      	b.n	282c0 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   28282:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   28286:	e7ed      	b.n	28264 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   28288:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2828a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2828e:	a803      	add	r0, sp, #12
   28290:	9403      	str	r4, [sp, #12]
   28292:	f7f3 ff53 	bl	1c13c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   28296:	9b03      	ldr	r3, [sp, #12]
   28298:	f04f 0b01 	mov.w	fp, #1
   2829c:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   282a0:	60c3      	str	r3, [r0, #12]
   282a2:	e00d      	b.n	282c0 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   282a4:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   282a8:	2601      	movs	r6, #1
   282aa:	e7f0      	b.n	2828e <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   282ac:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   282b0:	e7e4      	b.n	2827c <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   282b2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   282b6:	2f00      	cmp	r7, #0
   282b8:	d1e0      	bne.n	2827c <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   282ba:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   282bc:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   282be:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   282c0:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   282c4:	a803      	add	r0, sp, #12
   282c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   282ca:	2a00      	cmp	r2, #0
   282cc:	bf1c      	itt	ne
   282ce:	2601      	movne	r6, #1
   282d0:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   282d4:	9301      	str	r3, [sp, #4]
   282d6:	9403      	str	r4, [sp, #12]
   282d8:	f7f3 ff30 	bl	1c13c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   282dc:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   282de:	9b01      	ldr	r3, [sp, #4]
   282e0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   282e4:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   282e8:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   282ec:	023b      	lsls	r3, r7, #8
   282ee:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   282f2:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   282f6:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   282fa:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   282fc:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   28300:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   28304:	e783      	b.n	2820e <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   28306:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2830a:	e7d4      	b.n	282b6 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2830c:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   28310:	f8da 3000 	ldr.w	r3, [sl]
   28314:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   28318:	2b00      	cmp	r3, #0
   2831a:	d0c5      	beq.n	282a8 <pinctrl_configure_pins+0xac>
   2831c:	e7a2      	b.n	28264 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2831e:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   28322:	e7f5      	b.n	28310 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   28324:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   28328:	e7f2      	b.n	28310 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2832a:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2832e:	e7ef      	b.n	28310 <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   28330:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   28334:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   28336:	f04f 0b00 	mov.w	fp, #0
   2833a:	e7c1      	b.n	282c0 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2833c:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   28340:	e790      	b.n	28264 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   28342:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   28346:	e7f5      	b.n	28334 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   28348:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2834c:	e7f2      	b.n	28334 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2834e:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   28352:	e7ef      	b.n	28334 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   28354:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   28358:	e7ec      	b.n	28334 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   2835a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2835e:	e759      	b.n	28214 <pinctrl_configure_pins+0x18>

00028360 <mbox_nrf_register_callback>:
{
   28360:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   28362:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   28364:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   28366:	bf9f      	itttt	ls
   28368:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2836c:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   28370:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   28372:	2000      	movls	r0, #0
		return -EINVAL;
   28374:	bf88      	it	hi
   28376:	f06f 0015 	mvnhi.w	r0, #21
}
   2837a:	bd10      	pop	{r4, pc}

0002837c <mbox_nrf_mtu_get>:
}
   2837c:	2000      	movs	r0, #0
   2837e:	4770      	bx	lr

00028380 <mbox_nrf_max_channels_get>:
}
   28380:	2010      	movs	r0, #16
   28382:	4770      	bx	lr

00028384 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28386:	ab0b      	add	r3, sp, #44	; 0x2c
   28388:	9305      	str	r3, [sp, #20]
   2838a:	9303      	str	r3, [sp, #12]
   2838c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2838e:	2202      	movs	r2, #2
   28390:	9302      	str	r3, [sp, #8]
   28392:	2300      	movs	r3, #0
   28394:	4618      	mov	r0, r3
   28396:	e9cd 3300 	strd	r3, r3, [sp]
   2839a:	f7e5 fe39 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   2839e:	b007      	add	sp, #28
   283a0:	f85d fb04 	ldr.w	pc, [sp], #4

000283a4 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   283a4:	2000      	movs	r0, #0
   283a6:	4770      	bx	lr

000283a8 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   283a8:	2300      	movs	r3, #0
{
   283aa:	b570      	push	{r4, r5, r6, lr}
   283ac:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   283ae:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   283b2:	ab03      	add	r3, sp, #12
   283b4:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   283b6:	2304      	movs	r3, #4
{
   283b8:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   283ba:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   283bc:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   283be:	b169      	cbz	r1, 283dc <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   283c0:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   283c2:	680b      	ldr	r3, [r1, #0]
   283c4:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   283c6:	684b      	ldr	r3, [r1, #4]
   283c8:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   283ca:	2101      	movs	r1, #1
   283cc:	2041      	movs	r0, #65	; 0x41
   283ce:	f7f4 f887 	bl	1c4e0 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   283d2:	1e05      	subs	r5, r0, #0
   283d4:	dc04      	bgt.n	283e0 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   283d6:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   283d8:	b008      	add	sp, #32
   283da:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   283dc:	2601      	movs	r6, #1
   283de:	e7f4      	b.n	283ca <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   283e0:	1e23      	subs	r3, r4, #0
   283e2:	bf18      	it	ne
   283e4:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   283e6:	2100      	movs	r1, #0
   283e8:	e9cd 4300 	strd	r4, r3, [sp]
   283ec:	aa04      	add	r2, sp, #16
   283ee:	4633      	mov	r3, r6
   283f0:	f7f4 f85a 	bl	1c4a8 <psa_call>
   283f4:	4604      	mov	r4, r0
    psa_close(handle);
   283f6:	4628      	mov	r0, r5
   283f8:	f7f4 f880 	bl	1c4fc <psa_close>
    if (status < PSA_SUCCESS) {
   283fc:	2c00      	cmp	r4, #0
   283fe:	dbea      	blt.n	283d6 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   28400:	4620      	mov	r0, r4
   28402:	e7e9      	b.n	283d8 <tfm_platform_ioctl+0x30>

00028404 <psa_crypto_init>:
}
   28404:	2000      	movs	r0, #0
   28406:	4770      	bx	lr

00028408 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   28408:	b510      	push	{r4, lr}
   2840a:	b088      	sub	sp, #32
   2840c:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2840e:	ab05      	add	r3, sp, #20
   28410:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   28412:	230c      	movs	r3, #12
   28414:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   28416:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   28418:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2841c:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   28420:	eb0d 0103 	add.w	r1, sp, r3
   28424:	aa03      	add	r2, sp, #12
   28426:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   28428:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2842c:	f7ff ffbc 	bl	283a8 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   28430:	9b00      	ldr	r3, [sp, #0]
   28432:	6023      	str	r3, [r4, #0]

	return ret;
}
   28434:	b008      	add	sp, #32
   28436:	bd10      	pop	{r4, pc}

00028438 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   28438:	2300      	movs	r3, #0
{
   2843a:	b510      	push	{r4, lr}
   2843c:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2843e:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   28442:	ab05      	add	r3, sp, #20
   28444:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   28446:	230c      	movs	r3, #12
   28448:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2844a:	2304      	movs	r3, #4
{
   2844c:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2844e:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   28450:	aa03      	add	r2, sp, #12
   28452:	eb0d 0103 	add.w	r1, sp, r3
   28456:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   28458:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2845a:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2845e:	f7ff ffa3 	bl	283a8 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   28462:	9b00      	ldr	r3, [sp, #0]
   28464:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   28466:	b008      	add	sp, #32
   28468:	bd10      	pop	{r4, pc}

0002846a <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2846a:	f7f4 b855 	b.w	1c518 <SystemCoreClockUpdate>

0002846e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2846e:	4700      	bx	r0

00028470 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   28470:	f000 bef6 	b.w	29260 <z_impl_k_busy_wait>

00028474 <nrf_gpio_pin_present_check>:
    switch (port)
   28474:	0943      	lsrs	r3, r0, #5
   28476:	d00b      	beq.n	28490 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   28478:	2b01      	cmp	r3, #1
   2847a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2847e:	bf18      	it	ne
   28480:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   28482:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   28486:	fa23 f000 	lsr.w	r0, r3, r0
}
   2848a:	f000 0001 	and.w	r0, r0, #1
   2848e:	4770      	bx	lr
    switch (port)
   28490:	f04f 33ff 	mov.w	r3, #4294967295
   28494:	e7f5      	b.n	28482 <nrf_gpio_pin_present_check+0xe>

00028496 <pin_is_task_output>:
{
   28496:	b508      	push	{r3, lr}
   28498:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2849a:	f7f4 fabf 	bl	1ca1c <pin_is_output>
   2849e:	b110      	cbz	r0, 284a6 <pin_is_task_output+0x10>
   284a0:	4610      	mov	r0, r2
   284a2:	f7f4 faa5 	bl	1c9f0 <pin_in_use_by_te>
}
   284a6:	f000 0001 	and.w	r0, r0, #1
   284aa:	bd08      	pop	{r3, pc}

000284ac <nrf_gpio_reconfigure>:
{
   284ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   284b0:	4617      	mov	r7, r2
   284b2:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   284b6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   284b8:	a801      	add	r0, sp, #4
{
   284ba:	460c      	mov	r4, r1
   284bc:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   284be:	f7f4 fb31 	bl	1cb24 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   284c2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   284c4:	1e39      	subs	r1, r7, #0
   284c6:	bf18      	it	ne
   284c8:	2101      	movne	r1, #1
   284ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   284ce:	1e23      	subs	r3, r4, #0
   284d0:	bf18      	it	ne
   284d2:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   284d4:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   284d6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   284da:	bf14      	ite	ne
   284dc:	210c      	movne	r1, #12
   284de:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   284e0:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   284e2:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   284e6:	bf14      	ite	ne
   284e8:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   284ec:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   284ee:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   284f2:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   284f6:	bf14      	ite	ne
   284f8:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   284fc:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   284fe:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   28502:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   28504:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   28508:	b104      	cbz	r4, 2850c <nrf_gpio_reconfigure+0x60>
   2850a:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2850c:	b10f      	cbz	r7, 28512 <nrf_gpio_reconfigure+0x66>
   2850e:	783f      	ldrb	r7, [r7, #0]
   28510:	007f      	lsls	r7, r7, #1
   28512:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   28514:	b10e      	cbz	r6, 2851a <nrf_gpio_reconfigure+0x6e>
   28516:	7836      	ldrb	r6, [r6, #0]
   28518:	00b6      	lsls	r6, r6, #2
   2851a:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2851c:	b18d      	cbz	r5, 28542 <nrf_gpio_reconfigure+0x96>
   2851e:	7829      	ldrb	r1, [r5, #0]
   28520:	0209      	lsls	r1, r1, #8
   28522:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   28524:	f1b8 0f00 	cmp.w	r8, #0
   28528:	d003      	beq.n	28532 <nrf_gpio_reconfigure+0x86>
   2852a:	f898 8000 	ldrb.w	r8, [r8]
   2852e:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   28532:	4321      	orrs	r1, r4
   28534:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   28538:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   2853c:	b002      	add	sp, #8
   2853e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   28542:	4629      	mov	r1, r5
   28544:	e7ed      	b.n	28522 <nrf_gpio_reconfigure+0x76>

00028546 <nrf_gpio_cfg_sense_set>:
{
   28546:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   28548:	f10d 030f 	add.w	r3, sp, #15
   2854c:	9301      	str	r3, [sp, #4]
   2854e:	2300      	movs	r3, #0
{
   28550:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   28554:	461a      	mov	r2, r3
   28556:	4619      	mov	r1, r3
   28558:	9300      	str	r3, [sp, #0]
   2855a:	f7ff ffa7 	bl	284ac <nrf_gpio_reconfigure>
}
   2855e:	b005      	add	sp, #20
   28560:	f85d fb04 	ldr.w	pc, [sp], #4

00028564 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   28564:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   28568:	4770      	bx	lr

0002856a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2856a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2856e:	4770      	bx	lr

00028570 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   28570:	f44f 7080 	mov.w	r0, #256	; 0x100
   28574:	4770      	bx	lr

00028576 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   28576:	2100      	movs	r1, #0
   28578:	f7f5 b826 	b.w	1d5c8 <nrf_gpio_cfg.constprop.0>

0002857c <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2857c:	2302      	movs	r3, #2
   2857e:	f7f4 bf5f 	b.w	1d440 <qspi_xfer>

00028582 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   28582:	2303      	movs	r3, #3
   28584:	f7f4 bf5c 	b.w	1d440 <qspi_xfer>

00028588 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   28588:	2100      	movs	r1, #0
   2858a:	2002      	movs	r0, #2
   2858c:	f7f5 ba7e 	b.w	1da8c <nrfx_qspi_erase>

00028590 <nrf_gpio_pin_clear>:
{
   28590:	b507      	push	{r0, r1, r2, lr}
   28592:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28594:	a801      	add	r0, sp, #4
   28596:	f7f5 faf3 	bl	1db80 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2859a:	2301      	movs	r3, #1
   2859c:	9a01      	ldr	r2, [sp, #4]
   2859e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   285a0:	60c3      	str	r3, [r0, #12]
}
   285a2:	b003      	add	sp, #12
   285a4:	f85d fb04 	ldr.w	pc, [sp], #4

000285a8 <nrf_gpio_pin_set>:
{
   285a8:	b507      	push	{r0, r1, r2, lr}
   285aa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   285ac:	a801      	add	r0, sp, #4
   285ae:	f7f5 fae7 	bl	1db80 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   285b2:	2301      	movs	r3, #1
   285b4:	9a01      	ldr	r2, [sp, #4]
   285b6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   285b8:	6083      	str	r3, [r0, #8]
}
   285ba:	b003      	add	sp, #12
   285bc:	f85d fb04 	ldr.w	pc, [sp], #4

000285c0 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   285c0:	7f83      	ldrb	r3, [r0, #30]
   285c2:	075a      	lsls	r2, r3, #29
   285c4:	d40b      	bmi.n	285de <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   285c6:	7fc0      	ldrb	r0, [r0, #31]
   285c8:	28ff      	cmp	r0, #255	; 0xff
   285ca:	d008      	beq.n	285de <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   285cc:	079b      	lsls	r3, r3, #30
   285ce:	bf58      	it	pl
   285d0:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   285d4:	b909      	cbnz	r1, 285da <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   285d6:	f7ff bfdb 	b.w	28590 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   285da:	f7ff bfe5 	b.w	285a8 <nrf_gpio_pin_set>
}
   285de:	4770      	bx	lr

000285e0 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   285e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   285e4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   285e6:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   285e8:	4698      	mov	r8, r3
   285ea:	460f      	mov	r7, r1
   285ec:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   285ee:	f7f5 fac7 	bl	1db80 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   285f2:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   285f4:	f89d 4020 	ldrb.w	r4, [sp, #32]
   285f8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   285fc:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   285fe:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   28602:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   28606:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2860a:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2860e:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   28612:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   28614:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   28618:	b002      	add	sp, #8
   2861a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002861e <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2861e:	1c43      	adds	r3, r0, #1
{
   28620:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   28622:	d005      	beq.n	28630 <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   28624:	2300      	movs	r3, #0
   28626:	2201      	movs	r2, #1
   28628:	4619      	mov	r1, r3
   2862a:	9300      	str	r3, [sp, #0]
   2862c:	f7ff ffd8 	bl	285e0 <nrf_gpio_cfg.constprop.0>
}
   28630:	b003      	add	sp, #12
   28632:	f85d fb04 	ldr.w	pc, [sp], #4

00028636 <metal_device_open>:
{
   28636:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28638:	460c      	mov	r4, r1
   2863a:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2863c:	4606      	mov	r6, r0
   2863e:	b918      	cbnz	r0, 28648 <metal_device_open+0x12>
		return -EINVAL;
   28640:	f06f 0015 	mvn.w	r0, #21
}
   28644:	b002      	add	sp, #8
   28646:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   28648:	f7e0 fe8a 	bl	9360 <strlen>
   2864c:	2800      	cmp	r0, #0
   2864e:	d0f7      	beq.n	28640 <metal_device_open+0xa>
   28650:	2c00      	cmp	r4, #0
   28652:	d0f5      	beq.n	28640 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   28654:	4620      	mov	r0, r4
   28656:	f7e0 fe83 	bl	9360 <strlen>
   2865a:	2800      	cmp	r0, #0
   2865c:	d0f0      	beq.n	28640 <metal_device_open+0xa>
   2865e:	2d00      	cmp	r5, #0
   28660:	d0ee      	beq.n	28640 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   28662:	4630      	mov	r0, r6
   28664:	a901      	add	r1, sp, #4
   28666:	f7f5 fda1 	bl	1e1ac <metal_bus_find>
	if (error)
   2866a:	2800      	cmp	r0, #0
   2866c:	d1ea      	bne.n	28644 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   2866e:	9801      	ldr	r0, [sp, #4]
   28670:	6883      	ldr	r3, [r0, #8]
   28672:	b12b      	cbz	r3, 28680 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   28674:	462a      	mov	r2, r5
   28676:	4621      	mov	r1, r4
}
   28678:	b002      	add	sp, #8
   2867a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2867e:	4718      	bx	r3
		return -ENODEV;
   28680:	f06f 0012 	mvn.w	r0, #18
   28684:	e7de      	b.n	28644 <metal_device_open+0xe>

00028686 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   28686:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2868a:	b089      	sub	sp, #36	; 0x24
   2868c:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2868e:	4604      	mov	r4, r0
   28690:	4689      	mov	r9, r1
   28692:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   28694:	2100      	movs	r1, #0
   28696:	2220      	movs	r2, #32
   28698:	4668      	mov	r0, sp
{
   2869a:	461f      	mov	r7, r3
   2869c:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   2869e:	f000 ff22 	bl	294e6 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   286a2:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   286a4:	bf97      	itett	ls
   286a6:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   286a8:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   286ac:	40b3      	lslls	r3, r6
   286ae:	f103 33ff 	addls.w	r3, r3, #4294967295
   286b2:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   286b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   286b6:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   286ba:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   286be:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   286c0:	3418      	adds	r4, #24
   286c2:	b145      	cbz	r5, 286d6 <metal_io_init+0x50>
   286c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   286c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   286c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   286cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   286d0:	b009      	add	sp, #36	; 0x24
   286d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   286d6:	466d      	mov	r5, sp
   286d8:	e7f4      	b.n	286c4 <metal_io_init+0x3e>

000286da <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   286da:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   286dc:	6804      	ldr	r4, [r0, #0]
		: NULL);
   286de:	1c66      	adds	r6, r4, #1
   286e0:	d031      	beq.n	28746 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   286e2:	6885      	ldr	r5, [r0, #8]
   286e4:	42a9      	cmp	r1, r5
   286e6:	d22e      	bcs.n	28746 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   286e8:	1864      	adds	r4, r4, r1
   286ea:	d02c      	beq.n	28746 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   286ec:	185e      	adds	r6, r3, r1
   286ee:	42ae      	cmp	r6, r5
		len = io->size - offset;
   286f0:	bf88      	it	hi
   286f2:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   286f4:	6a05      	ldr	r5, [r0, #32]
   286f6:	b135      	cbz	r5, 28706 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   286f8:	9300      	str	r3, [sp, #0]
   286fa:	2305      	movs	r3, #5
   286fc:	47a8      	blx	r5
   286fe:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   28700:	4618      	mov	r0, r3
   28702:	b002      	add	sp, #8
   28704:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   28706:	f3bf 8f5b 	dmb	ish
		while ( len && (
   2870a:	4619      	mov	r1, r3
   2870c:	1aa4      	subs	r4, r4, r2
   2870e:	1910      	adds	r0, r2, r4
   28710:	b119      	cbz	r1, 2871a <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   28712:	ea40 0502 	orr.w	r5, r0, r2
   28716:	07ad      	lsls	r5, r5, #30
   28718:	d10a      	bne.n	28730 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2871a:	2903      	cmp	r1, #3
   2871c:	dc0d      	bgt.n	2873a <metal_io_block_read+0x60>
   2871e:	3801      	subs	r0, #1
   28720:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   28722:	428a      	cmp	r2, r1
   28724:	d0ec      	beq.n	28700 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   28726:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   2872a:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2872e:	e7f8      	b.n	28722 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   28730:	7800      	ldrb	r0, [r0, #0]
			len--;
   28732:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   28734:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   28738:	e7e9      	b.n	2870e <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   2873a:	f850 4b04 	ldr.w	r4, [r0], #4
   2873e:	3904      	subs	r1, #4
   28740:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   28744:	e7e9      	b.n	2871a <metal_io_block_read+0x40>
		return -ERANGE;
   28746:	f06f 0321 	mvn.w	r3, #33	; 0x21
   2874a:	e7d9      	b.n	28700 <metal_io_block_read+0x26>

0002874c <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2874c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2874e:	6804      	ldr	r4, [r0, #0]
		: NULL);
   28750:	1c65      	adds	r5, r4, #1
   28752:	d032      	beq.n	287ba <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   28754:	6885      	ldr	r5, [r0, #8]
   28756:	42a9      	cmp	r1, r5
   28758:	d22f      	bcs.n	287ba <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   2875a:	1864      	adds	r4, r4, r1
   2875c:	d02d      	beq.n	287ba <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2875e:	185e      	adds	r6, r3, r1
   28760:	42ae      	cmp	r6, r5
		len = io->size - offset;
   28762:	bf88      	it	hi
   28764:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   28766:	6a45      	ldr	r5, [r0, #36]	; 0x24
   28768:	b1cd      	cbz	r5, 2879e <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   2876a:	9300      	str	r3, [sp, #0]
   2876c:	2305      	movs	r3, #5
   2876e:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   28770:	b002      	add	sp, #8
   28772:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   28774:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   28778:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   2877a:	7005      	strb	r5, [r0, #0]
			len--;
   2877c:	4615      	mov	r5, r2
   2877e:	18a0      	adds	r0, r4, r2
		while ( len && (
   28780:	b119      	cbz	r1, 2878a <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   28782:	ea40 0602 	orr.w	r6, r0, r2
   28786:	07b6      	lsls	r6, r6, #30
   28788:	d1f4      	bne.n	28774 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2878a:	2903      	cmp	r1, #3
   2878c:	dc0a      	bgt.n	287a4 <metal_io_block_write+0x58>
   2878e:	3d01      	subs	r5, #1
   28790:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   28792:	4288      	cmp	r0, r1
   28794:	d10c      	bne.n	287b0 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   28796:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2879a:	4618      	mov	r0, r3
   2879c:	e7e8      	b.n	28770 <metal_io_block_write+0x24>
   2879e:	4619      	mov	r1, r3
   287a0:	1aa4      	subs	r4, r4, r2
   287a2:	e7eb      	b.n	2877c <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   287a4:	f855 2b04 	ldr.w	r2, [r5], #4
   287a8:	3904      	subs	r1, #4
   287aa:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   287ae:	e7ec      	b.n	2878a <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   287b0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   287b4:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   287b8:	e7eb      	b.n	28792 <metal_io_block_write+0x46>
		return -ERANGE;
   287ba:	f06f 0021 	mvn.w	r0, #33	; 0x21
   287be:	e7d7      	b.n	28770 <metal_io_block_write+0x24>

000287c0 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   287c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   287c2:	6804      	ldr	r4, [r0, #0]
   287c4:	461d      	mov	r5, r3
		: NULL);
   287c6:	1c66      	adds	r6, r4, #1
   287c8:	d02b      	beq.n	28822 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   287ca:	6883      	ldr	r3, [r0, #8]
   287cc:	4299      	cmp	r1, r3
   287ce:	d228      	bcs.n	28822 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   287d0:	1864      	adds	r4, r4, r1
   287d2:	d026      	beq.n	28822 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   287d4:	186e      	adds	r6, r5, r1
   287d6:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   287d8:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   287da:	bf88      	it	hi
   287dc:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   287de:	b12e      	cbz	r6, 287ec <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   287e0:	2305      	movs	r3, #5
   287e2:	9500      	str	r5, [sp, #0]
   287e4:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   287e6:	4628      	mov	r0, r5
}
   287e8:	b002      	add	sp, #8
   287ea:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   287ec:	4621      	mov	r1, r4
   287ee:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   287f0:	b94b      	cbnz	r3, 28806 <metal_io_block_set+0x46>
   287f2:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   287f4:	4299      	cmp	r1, r3
   287f6:	d111      	bne.n	2881c <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   287f8:	f3bf 8f5b 	dmb	ish
   287fc:	e7f3      	b.n	287e6 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   287fe:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   28802:	3b01      	subs	r3, #1
   28804:	e7f4      	b.n	287f0 <metal_io_block_set+0x30>
   28806:	0788      	lsls	r0, r1, #30
   28808:	d1f9      	bne.n	287fe <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2880a:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   2880e:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   28810:	2b03      	cmp	r3, #3
   28812:	ddee      	ble.n	287f2 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   28814:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   28818:	3b04      	subs	r3, #4
   2881a:	e7f9      	b.n	28810 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   2881c:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   28820:	e7e8      	b.n	287f4 <metal_io_block_set+0x34>
		return -ERANGE;
   28822:	f06f 0021 	mvn.w	r0, #33	; 0x21
   28826:	e7df      	b.n	287e8 <metal_io_block_set+0x28>

00028828 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   28828:	2000      	movs	r0, #0
   2882a:	4770      	bx	lr

0002882c <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2882c:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   2882e:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   28830:	4602      	mov	r2, r0
   28832:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   28834:	b984      	cbnz	r4, 28858 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   28836:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   28838:	291f      	cmp	r1, #31
   2883a:	bf98      	it	ls
   2883c:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   28840:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   28842:	b161      	cbz	r1, 2885e <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   28844:	6880      	ldr	r0, [r0, #8]
   28846:	4283      	cmp	r3, r0
   28848:	d209      	bcs.n	2885e <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   2884a:	6910      	ldr	r0, [r2, #16]
   2884c:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   2884e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   28852:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   28854:	bc10      	pop	{r4}
   28856:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   28858:	4623      	mov	r3, r4
}
   2885a:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   2885c:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2885e:	f04f 30ff 	mov.w	r0, #4294967295
   28862:	e7f7      	b.n	28854 <metal_io_phys+0x28>

00028864 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   28864:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   28866:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   28868:	4605      	mov	r5, r0
   2886a:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   2886c:	b9e3      	cbnz	r3, 288a8 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2886e:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   28870:	1c62      	adds	r2, r4, #1
   28872:	bf09      	itett	eq
   28874:	6843      	ldreq	r3, [r0, #4]
   28876:	400c      	andne	r4, r1
   28878:	681c      	ldreq	r4, [r3, #0]
   2887a:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   2887c:	4621      	mov	r1, r4
   2887e:	4628      	mov	r0, r5
   28880:	f7ff ffd4 	bl	2882c <metal_io_phys>
   28884:	4286      	cmp	r6, r0
   28886:	d007      	beq.n	28898 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   28888:	692b      	ldr	r3, [r5, #16]
   2888a:	3301      	adds	r3, #1
   2888c:	441c      	add	r4, r3
		} while (offset < io->size);
   2888e:	68ab      	ldr	r3, [r5, #8]
   28890:	429c      	cmp	r4, r3
   28892:	d3f3      	bcc.n	2887c <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   28894:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   28898:	6828      	ldr	r0, [r5, #0]
		: NULL);
   2889a:	1c43      	adds	r3, r0, #1
   2889c:	d007      	beq.n	288ae <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2889e:	68ab      	ldr	r3, [r5, #8]
   288a0:	42a3      	cmp	r3, r4
   288a2:	d904      	bls.n	288ae <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   288a4:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   288a6:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   288a8:	4798      	blx	r3
   288aa:	4604      	mov	r4, r0
   288ac:	e7f4      	b.n	28898 <metal_io_phys_to_virt+0x34>
		: NULL);
   288ae:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   288b0:	e7f9      	b.n	288a6 <metal_io_phys_to_virt+0x42>

000288b2 <virtqueue_create>:
{
   288b2:	b530      	push	{r4, r5, lr}
   288b4:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   288b6:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   288ba:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   288bc:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   288be:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   288c0:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   288c2:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   288c4:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   288c6:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   288c8:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   288ca:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   288ce:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   288d2:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   288d6:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   288d8:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   288da:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   288de:	1c6a      	adds	r2, r5, #1
   288e0:	4413      	add	r3, r2
   288e2:	426d      	negs	r5, r5
   288e4:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   288e6:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   288e8:	6983      	ldr	r3, [r0, #24]
   288ea:	b953      	cbnz	r3, 28902 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   288ec:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   288ee:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   288f0:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   288f2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   288f6:	db06      	blt.n	28906 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   288f8:	2300      	movs	r3, #0
   288fa:	7393      	strb	r3, [r2, #14]
   288fc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   28900:	73d3      	strb	r3, [r2, #15]
}
   28902:	2000      	movs	r0, #0
   28904:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   28906:	3301      	adds	r3, #1
   28908:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   2890a:	e7f0      	b.n	288ee <virtqueue_create+0x3c>

0002890c <virtqueue_add_buffer>:
{
   2890c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   28910:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   28914:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   28916:	4655      	mov	r5, sl
   28918:	2600      	movs	r6, #0
{
   2891a:	b085      	sub	sp, #20
	needed = readable + writable;
   2891c:	eb02 0803 	add.w	r8, r2, r3
{
   28920:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   28922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   28924:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   28928:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   2892c:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   2892e:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   28932:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   28936:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   28938:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   2893a:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2893c:	45b0      	cmp	r8, r6
   2893e:	dc1a      	bgt.n	28976 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   28940:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   28942:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   28944:	eba3 030b 	sub.w	r3, r3, fp
   28948:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2894a:	69e3      	ldr	r3, [r4, #28]
   2894c:	8961      	ldrh	r1, [r4, #10]
   2894e:	885a      	ldrh	r2, [r3, #2]
   28950:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   28952:	400a      	ands	r2, r1
   28954:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   28958:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   2895c:	f3bf 8f5b 	dmb	ish
}
   28960:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   28962:	69e2      	ldr	r2, [r4, #28]
   28964:	8853      	ldrh	r3, [r2, #2]
   28966:	3301      	adds	r3, #1
   28968:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2896a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2896c:	3301      	adds	r3, #1
   2896e:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   28970:	b005      	add	sp, #20
   28972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   28976:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   28978:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2897a:	f857 1c04 	ldr.w	r1, [r7, #-4]
   2897e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   28982:	9302      	str	r3, [sp, #8]
   28984:	6803      	ldr	r3, [r0, #0]
   28986:	9203      	str	r2, [sp, #12]
   28988:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2898a:	6883      	ldr	r3, [r0, #8]
   2898c:	3708      	adds	r7, #8
   2898e:	4299      	cmp	r1, r3
   28990:	bf28      	it	cs
   28992:	f04f 31ff 	movcs.w	r1, #4294967295
   28996:	f7ff ff49 	bl	2882c <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2899a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2899e:	5098      	str	r0, [r3, r2]
   289a0:	2200      	movs	r2, #0
   289a2:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   289a4:	f857 2c08 	ldr.w	r2, [r7, #-8]
   289a8:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   289aa:	9a01      	ldr	r2, [sp, #4]
   289ac:	4296      	cmp	r6, r2
   289ae:	bfac      	ite	ge
   289b0:	2200      	movge	r2, #0
   289b2:	2201      	movlt	r2, #1
		if (i >= readable)
   289b4:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   289b6:	bfd8      	it	le
   289b8:	f042 0202 	orrle.w	r2, r2, #2
   289bc:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   289be:	3601      	adds	r6, #1
   289c0:	89ed      	ldrh	r5, [r5, #14]
   289c2:	e7bb      	b.n	2893c <virtqueue_add_buffer+0x30>

000289c4 <virtqueue_get_buffer>:
{
   289c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   289c6:	b350      	cbz	r0, 28a1e <virtqueue_get_buffer+0x5a>
   289c8:	6a05      	ldr	r5, [r0, #32]
   289ca:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   289cc:	886b      	ldrh	r3, [r5, #2]
   289ce:	42a3      	cmp	r3, r4
   289d0:	d030      	beq.n	28a34 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   289d2:	1c63      	adds	r3, r4, #1
   289d4:	85c3      	strh	r3, [r0, #46]	; 0x2e
   289d6:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   289d8:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   289dc:	3b01      	subs	r3, #1
   289de:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   289e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   289e4:	686b      	ldr	r3, [r5, #4]
   289e6:	b29e      	uxth	r6, r3
	if (len)
   289e8:	b109      	cbz	r1, 289ee <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   289ea:	68ad      	ldr	r5, [r5, #8]
   289ec:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   289ee:	f8d0 c018 	ldr.w	ip, [r0, #24]
   289f2:	b29b      	uxth	r3, r3
   289f4:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   289f8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   289fc:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   289fe:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   28a00:	442f      	add	r7, r5
	dxp->ndescs--;
   28a02:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   28a04:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   28a06:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   28a08:	898d      	ldrh	r5, [r1, #12]
   28a0a:	076f      	lsls	r7, r5, #29
   28a0c:	d50e      	bpl.n	28a2c <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   28a0e:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   28a10:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   28a12:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   28a14:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   28a16:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   28a18:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   28a1a:	b102      	cbz	r2, 28a1e <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   28a1c:	8014      	strh	r4, [r2, #0]
}
   28a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   28a20:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   28a22:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   28a24:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   28a26:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   28a2a:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   28a2c:	898d      	ldrh	r5, [r1, #12]
   28a2e:	07ed      	lsls	r5, r5, #31
   28a30:	d4f6      	bmi.n	28a20 <virtqueue_get_buffer+0x5c>
   28a32:	e7ec      	b.n	28a0e <virtqueue_get_buffer+0x4a>
		return NULL;
   28a34:	2000      	movs	r0, #0
   28a36:	e7f2      	b.n	28a1e <virtqueue_get_buffer+0x5a>

00028a38 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   28a38:	6983      	ldr	r3, [r0, #24]
   28a3a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   28a3e:	6898      	ldr	r0, [r3, #8]
   28a40:	4770      	bx	lr

00028a42 <virtqueue_get_available_buffer>:
{
   28a42:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   28a44:	f3bf 8f5b 	dmb	ish
{
   28a48:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28a4a:	69c1      	ldr	r1, [r0, #28]
{
   28a4c:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28a4e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   28a50:	884a      	ldrh	r2, [r1, #2]
{
   28a52:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28a54:	429a      	cmp	r2, r3
   28a56:	d016      	beq.n	28a86 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   28a58:	1c5a      	adds	r2, r3, #1
   28a5a:	8602      	strh	r2, [r0, #48]	; 0x30
   28a5c:	8942      	ldrh	r2, [r0, #10]
   28a5e:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   28a60:	4013      	ands	r3, r2
   28a62:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   28a66:	888a      	ldrh	r2, [r1, #4]
   28a68:	802a      	strh	r2, [r5, #0]
   28a6a:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   28a6c:	6982      	ldr	r2, [r0, #24]
   28a6e:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   28a70:	58d1      	ldr	r1, [r2, r3]
   28a72:	6a80      	ldr	r0, [r0, #40]	; 0x28
   28a74:	f7ff fef6 	bl	28864 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   28a78:	882a      	ldrh	r2, [r5, #0]
   28a7a:	69a3      	ldr	r3, [r4, #24]
   28a7c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   28a80:	689b      	ldr	r3, [r3, #8]
   28a82:	6033      	str	r3, [r6, #0]
}
   28a84:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   28a86:	2000      	movs	r0, #0
   28a88:	e7fc      	b.n	28a84 <virtqueue_get_available_buffer+0x42>

00028a8a <virtqueue_disable_cb>:
{
   28a8a:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   28a8c:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28a8e:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   28a90:	6912      	ldr	r2, [r2, #16]
   28a92:	0092      	lsls	r2, r2, #2
   28a94:	d517      	bpl.n	28ac6 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28a96:	b943      	cbnz	r3, 28aaa <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   28a98:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   28a9a:	69c2      	ldr	r2, [r0, #28]
   28a9c:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   28a9e:	8944      	ldrh	r4, [r0, #10]
   28aa0:	3b01      	subs	r3, #1
   28aa2:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   28aa4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   28aa8:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   28aaa:	6803      	ldr	r3, [r0, #0]
   28aac:	699b      	ldr	r3, [r3, #24]
   28aae:	2b01      	cmp	r3, #1
   28ab0:	d108      	bne.n	28ac4 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   28ab2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   28ab4:	6a02      	ldr	r2, [r0, #32]
   28ab6:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   28ab8:	8940      	ldrh	r0, [r0, #10]
   28aba:	3b01      	subs	r3, #1
   28abc:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   28abe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   28ac2:	8093      	strh	r3, [r2, #4]
}
   28ac4:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28ac6:	b923      	cbnz	r3, 28ad2 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   28ac8:	69c2      	ldr	r2, [r0, #28]
   28aca:	8813      	ldrh	r3, [r2, #0]
   28acc:	f043 0301 	orr.w	r3, r3, #1
   28ad0:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   28ad2:	6803      	ldr	r3, [r0, #0]
   28ad4:	699b      	ldr	r3, [r3, #24]
   28ad6:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   28ad8:	bf01      	itttt	eq
   28ada:	6a02      	ldreq	r2, [r0, #32]
   28adc:	8813      	ldrheq	r3, [r2, #0]
   28ade:	f043 0301 	orreq.w	r3, r3, #1
   28ae2:	8013      	strheq	r3, [r2, #0]
}
   28ae4:	e7ee      	b.n	28ac4 <virtqueue_disable_cb+0x3a>

00028ae6 <virtqueue_kick>:
{
   28ae6:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   28ae8:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   28aec:	6803      	ldr	r3, [r0, #0]
{
   28aee:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   28af0:	691a      	ldr	r2, [r3, #16]
   28af2:	699b      	ldr	r3, [r3, #24]
   28af4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   28af8:	d01a      	beq.n	28b30 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28afa:	b97b      	cbnz	r3, 28b1c <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   28afc:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   28afe:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   28b00:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   28b02:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   28b04:	3b01      	subs	r3, #1
   28b06:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   28b0a:	8892      	ldrh	r2, [r2, #4]
   28b0c:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   28b0e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   28b10:	b29b      	uxth	r3, r3
   28b12:	429a      	cmp	r2, r3
   28b14:	d814      	bhi.n	28b40 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   28b16:	2300      	movs	r3, #0
   28b18:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   28b1a:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   28b1c:	2b01      	cmp	r3, #1
   28b1e:	d1fa      	bne.n	28b16 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   28b20:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   28b22:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   28b24:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   28b26:	6941      	ldr	r1, [r0, #20]
   28b28:	3b01      	subs	r3, #1
   28b2a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   28b2e:	e7ec      	b.n	28b0a <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   28b30:	b963      	cbnz	r3, 28b4c <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   28b32:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   28b34:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   28b36:	43db      	mvns	r3, r3
   28b38:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   28b3c:	2b00      	cmp	r3, #0
   28b3e:	d0ea      	beq.n	28b16 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   28b40:	6923      	ldr	r3, [r4, #16]
   28b42:	2b00      	cmp	r3, #0
   28b44:	d0e7      	beq.n	28b16 <virtqueue_kick+0x30>
		vq->notify(vq);
   28b46:	4620      	mov	r0, r4
   28b48:	4798      	blx	r3
   28b4a:	e7e4      	b.n	28b16 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   28b4c:	2b01      	cmp	r3, #1
   28b4e:	d1e2      	bne.n	28b16 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   28b50:	69c3      	ldr	r3, [r0, #28]
   28b52:	e7ef      	b.n	28b34 <virtqueue_kick+0x4e>

00028b54 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   28b54:	69c3      	ldr	r3, [r0, #28]
   28b56:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   28b58:	8859      	ldrh	r1, [r3, #2]
   28b5a:	4291      	cmp	r1, r2
   28b5c:	d00a      	beq.n	28b74 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   28b5e:	8941      	ldrh	r1, [r0, #10]
   28b60:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   28b62:	400a      	ands	r2, r1
   28b64:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   28b68:	889a      	ldrh	r2, [r3, #4]
   28b6a:	6983      	ldr	r3, [r0, #24]
   28b6c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   28b70:	6898      	ldr	r0, [r3, #8]
	return len;
   28b72:	4770      	bx	lr
		return 0;
   28b74:	2000      	movs	r0, #0
}
   28b76:	4770      	bx	lr

00028b78 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   28b78:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   28b7c:	68c3      	ldr	r3, [r0, #12]
   28b7e:	b103      	cbz	r3, 28b82 <virtqueue_notification+0xa>
		vq->callback(vq);
   28b80:	4718      	bx	r3
}
   28b82:	4770      	bx	lr

00028b84 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   28b84:	f04f 32ff 	mov.w	r2, #4294967295
   28b88:	f04f 33ff 	mov.w	r3, #4294967295
   28b8c:	f7f6 bfea 	b.w	1fb64 <z_impl_k_sem_take>

00028b90 <rpmsg_unregister_endpoint>:
{
   28b90:	b570      	push	{r4, r5, r6, lr}
   28b92:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   28b94:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   28b96:	f105 0658 	add.w	r6, r5, #88	; 0x58
   28b9a:	4630      	mov	r0, r6
   28b9c:	f7ff fff2 	bl	28b84 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   28ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28ba2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   28ba6:	2b7f      	cmp	r3, #127	; 0x7f
   28ba8:	d80b      	bhi.n	28bc2 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   28baa:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   28bac:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   28bae:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   28bb0:	f003 031f 	and.w	r3, r3, #31
   28bb4:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   28bb6:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   28bba:	ea23 0302 	bic.w	r3, r3, r2
   28bbe:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   28bc2:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   28bc6:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   28bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   28bca:	f104 0334 	add.w	r3, r4, #52	; 0x34
   28bce:	6011      	str	r1, [r2, #0]
	node->next = node;
   28bd0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   28bd4:	2300      	movs	r3, #0
   28bd6:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   28bd8:	4630      	mov	r0, r6
}
   28bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28bde:	f7f6 bf7d 	b.w	1fadc <z_impl_k_sem_give>

00028be2 <rpmsg_send_ns_message>:
{
   28be2:	b530      	push	{r4, r5, lr}
   28be4:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   28be6:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   28be8:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   28bea:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   28bec:	2220      	movs	r2, #32
   28bee:	4601      	mov	r1, r0
   28bf0:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   28bf2:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   28bf4:	f000 fdb9 	bl	2976a <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   28bf8:	2328      	movs	r3, #40	; 0x28
   28bfa:	2201      	movs	r2, #1
   28bfc:	4629      	mov	r1, r5
   28bfe:	e9cd 3200 	strd	r3, r2, [sp]
   28c02:	4620      	mov	r0, r4
   28c04:	2235      	movs	r2, #53	; 0x35
   28c06:	ab02      	add	r3, sp, #8
   28c08:	f7f5 fc3e 	bl	1e488 <rpmsg_send_offchannel_raw>
}
   28c0c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   28c10:	b00d      	add	sp, #52	; 0x34
   28c12:	bd30      	pop	{r4, r5, pc}

00028c14 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   28c14:	b128      	cbz	r0, 28c22 <rpmsg_hold_rx_buffer+0xe>
   28c16:	6a00      	ldr	r0, [r0, #32]
   28c18:	b118      	cbz	r0, 28c22 <rpmsg_hold_rx_buffer+0xe>
   28c1a:	b111      	cbz	r1, 28c22 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   28c1c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   28c1e:	b103      	cbz	r3, 28c22 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   28c20:	4718      	bx	r3
}
   28c22:	4770      	bx	lr

00028c24 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   28c24:	b130      	cbz	r0, 28c34 <rpmsg_release_rx_buffer+0x10>
   28c26:	6a00      	ldr	r0, [r0, #32]
   28c28:	b120      	cbz	r0, 28c34 <rpmsg_release_rx_buffer+0x10>
   28c2a:	b119      	cbz	r1, 28c34 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   28c2c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   28c30:	b103      	cbz	r3, 28c34 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   28c32:	4718      	bx	r3
}
   28c34:	4770      	bx	lr

00028c36 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   28c36:	b130      	cbz	r0, 28c46 <rpmsg_get_tx_payload_buffer+0x10>
   28c38:	6a00      	ldr	r0, [r0, #32]
   28c3a:	b120      	cbz	r0, 28c46 <rpmsg_get_tx_payload_buffer+0x10>
   28c3c:	b119      	cbz	r1, 28c46 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   28c3e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   28c42:	b103      	cbz	r3, 28c46 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   28c44:	4718      	bx	r3
}
   28c46:	2000      	movs	r0, #0
   28c48:	4770      	bx	lr

00028c4a <rpmsg_get_endpoint>:
{
   28c4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28c4e:	4606      	mov	r6, r0
   28c50:	4688      	mov	r8, r1
   28c52:	4617      	mov	r7, r2
   28c54:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   28c56:	6804      	ldr	r4, [r0, #0]
   28c58:	42a6      	cmp	r6, r4
   28c5a:	d101      	bne.n	28c60 <rpmsg_get_endpoint+0x16>
	return NULL;
   28c5c:	2500      	movs	r5, #0
   28c5e:	e023      	b.n	28ca8 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   28c60:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   28c62:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   28c66:	d002      	beq.n	28c6e <rpmsg_get_endpoint+0x24>
   28c68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   28c6a:	42bb      	cmp	r3, r7
   28c6c:	d01c      	beq.n	28ca8 <rpmsg_get_endpoint+0x5e>
		if (name)
   28c6e:	f1b8 0f00 	cmp.w	r8, #0
   28c72:	d101      	bne.n	28c78 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   28c74:	6824      	ldr	r4, [r4, #0]
   28c76:	e7ef      	b.n	28c58 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   28c78:	2220      	movs	r2, #32
   28c7a:	4641      	mov	r1, r8
   28c7c:	4628      	mov	r0, r5
   28c7e:	f000 fd62 	bl	29746 <strncmp>
		if (!name || !name_match)
   28c82:	2800      	cmp	r0, #0
   28c84:	d1f6      	bne.n	28c74 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   28c86:	f1b9 3fff 	cmp.w	r9, #4294967295
   28c8a:	d002      	beq.n	28c92 <rpmsg_get_endpoint+0x48>
   28c8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   28c8e:	454b      	cmp	r3, r9
   28c90:	d00a      	beq.n	28ca8 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   28c92:	1c7b      	adds	r3, r7, #1
   28c94:	d00b      	beq.n	28cae <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   28c96:	6824      	ldr	r4, [r4, #0]
   28c98:	42b4      	cmp	r4, r6
   28c9a:	d0df      	beq.n	28c5c <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   28c9c:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   28ca0:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   28ca4:	429f      	cmp	r7, r3
   28ca6:	d1e7      	bne.n	28c78 <rpmsg_get_endpoint+0x2e>
}
   28ca8:	4628      	mov	r0, r5
   28caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   28cae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   28cb0:	3301      	adds	r3, #1
   28cb2:	d0f9      	beq.n	28ca8 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   28cb4:	6824      	ldr	r4, [r4, #0]
   28cb6:	42b4      	cmp	r4, r6
   28cb8:	d0d0      	beq.n	28c5c <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   28cba:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   28cbe:	e7d6      	b.n	28c6e <rpmsg_get_endpoint+0x24>

00028cc0 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   28cc0:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   28cc2:	4604      	mov	r4, r0
   28cc4:	b190      	cbz	r0, 28cec <rpmsg_destroy_ept+0x2c>
   28cc6:	6a03      	ldr	r3, [r0, #32]
   28cc8:	b183      	cbz	r3, 28cec <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   28cca:	7802      	ldrb	r2, [r0, #0]
   28ccc:	b14a      	cbz	r2, 28ce2 <rpmsg_destroy_ept+0x22>
   28cce:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   28cd2:	b133      	cbz	r3, 28ce2 <rpmsg_destroy_ept+0x22>
   28cd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   28cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   28cda:	d302      	bcc.n	28ce2 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   28cdc:	2101      	movs	r1, #1
   28cde:	f7ff ff80 	bl	28be2 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   28ce2:	4620      	mov	r0, r4
}
   28ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   28ce8:	f7ff bf52 	b.w	28b90 <rpmsg_unregister_endpoint>
}
   28cec:	bd10      	pop	{r4, pc}

00028cee <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   28cee:	f851 3c08 	ldr.w	r3, [r1, #-8]
   28cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   28cf6:	f841 3c08 	str.w	r3, [r1, #-8]
}
   28cfa:	4770      	bx	lr

00028cfc <rpmsg_virtio_tx_callback>:
}
   28cfc:	4770      	bx	lr

00028cfe <k_sem_give>:
   28cfe:	f7f6 beed 	b.w	1fadc <z_impl_k_sem_give>

00028d02 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   28d02:	f04f 32ff 	mov.w	r2, #4294967295
   28d06:	f04f 33ff 	mov.w	r3, #4294967295
   28d0a:	f7f6 bf2b 	b.w	1fb64 <z_impl_k_sem_take>

00028d0e <rpmsg_virtio_release_tx_buffer>:
{
   28d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28d10:	460c      	mov	r4, r1
   28d12:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   28d14:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   28d18:	f100 0758 	add.w	r7, r0, #88	; 0x58
   28d1c:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   28d1e:	b2b6      	uxth	r6, r6
   28d20:	f7ff ffef 	bl	28d02 <__metal_mutex_acquire>
	r_desc->idx = idx;
   28d24:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   28d28:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   28d2c:	f1a4 0310 	sub.w	r3, r4, #16
   28d30:	f844 2c0c 	str.w	r2, [r4, #-12]
   28d34:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   28d38:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   28d3c:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   28d40:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   28d44:	4638      	mov	r0, r7
   28d46:	6013      	str	r3, [r2, #0]
   28d48:	f7ff ffd9 	bl	28cfe <k_sem_give>
}
   28d4c:	2000      	movs	r0, #0
   28d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028d50 <rpmsg_virtio_ns_callback>:
{
   28d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   28d54:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   28d56:	2a28      	cmp	r2, #40	; 0x28
{
   28d58:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   28d5a:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   28d5e:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   28d60:	d126      	bne.n	28db0 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   28d62:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   28d64:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   28d66:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   28d68:	42a1      	cmp	r1, r4
   28d6a:	bf28      	it	cs
   28d6c:	f04f 31ff 	movcs.w	r1, #4294967295
   28d70:	2320      	movs	r3, #32
   28d72:	466a      	mov	r2, sp
   28d74:	f7ff fcb1 	bl	286da <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   28d78:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   28d7c:	f8d7 8020 	ldr.w	r8, [r7, #32]
   28d80:	4630      	mov	r0, r6
   28d82:	f7ff ffbe 	bl	28d02 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   28d86:	4643      	mov	r3, r8
   28d88:	f04f 32ff 	mov.w	r2, #4294967295
   28d8c:	4669      	mov	r1, sp
   28d8e:	4628      	mov	r0, r5
   28d90:	f7ff ff5b 	bl	28c4a <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   28d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   28d96:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   28d98:	07db      	lsls	r3, r3, #31
   28d9a:	d519      	bpl.n	28dd0 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   28d9c:	b960      	cbnz	r0, 28db8 <rpmsg_virtio_ns_callback+0x68>
   28d9e:	4630      	mov	r0, r6
   28da0:	f7ff ffad 	bl	28cfe <k_sem_give>
		if (rdev->ns_unbind_cb)
   28da4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   28da6:	b11b      	cbz	r3, 28db0 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   28da8:	4642      	mov	r2, r8
   28daa:	4669      	mov	r1, sp
   28dac:	4628      	mov	r0, r5
   28dae:	4798      	blx	r3
}
   28db0:	2000      	movs	r0, #0
   28db2:	b008      	add	sp, #32
   28db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   28db8:	f04f 33ff 	mov.w	r3, #4294967295
   28dbc:	6283      	str	r3, [r0, #40]	; 0x28
   28dbe:	4630      	mov	r0, r6
   28dc0:	f7ff ff9d 	bl	28cfe <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   28dc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28dc6:	2b00      	cmp	r3, #0
   28dc8:	d0ec      	beq.n	28da4 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   28dca:	4620      	mov	r0, r4
   28dcc:	4798      	blx	r3
   28dce:	e7e9      	b.n	28da4 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   28dd0:	b920      	cbnz	r0, 28ddc <rpmsg_virtio_ns_callback+0x8c>
   28dd2:	4630      	mov	r0, r6
   28dd4:	f7ff ff93 	bl	28cfe <k_sem_give>
			if (rdev->ns_bind_cb)
   28dd8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   28dda:	e7e4      	b.n	28da6 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   28ddc:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   28de0:	4630      	mov	r0, r6
   28de2:	f7ff ff8c 	bl	28cfe <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   28de6:	e7e3      	b.n	28db0 <rpmsg_virtio_ns_callback+0x60>

00028de8 <rpmsg_virtio_get_rx_buffer>:
{
   28de8:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   28dea:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   28dee:	4613      	mov	r3, r2
   28df0:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   28df2:	b925      	cbnz	r5, 28dfe <rpmsg_virtio_get_rx_buffer+0x16>
}
   28df4:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   28df6:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   28dfa:	f7ff bde3 	b.w	289c4 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   28dfe:	2d01      	cmp	r5, #1
   28e00:	d106      	bne.n	28e10 <rpmsg_virtio_get_rx_buffer+0x28>
}
   28e02:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   28e04:	460a      	mov	r2, r1
   28e06:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   28e0a:	4619      	mov	r1, r3
   28e0c:	f7ff be19 	b.w	28a42 <virtqueue_get_available_buffer>
}
   28e10:	2000      	movs	r0, #0
   28e12:	bc30      	pop	{r4, r5}
   28e14:	4770      	bx	lr

00028e16 <rpmsg_virtio_return_buffer>:
{
   28e16:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   28e18:	460c      	mov	r4, r1
   28e1a:	4619      	mov	r1, r3
   28e1c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   28e20:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   28e22:	b95d      	cbnz	r5, 28e3c <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   28e24:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   28e26:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   28e2a:	2301      	movs	r3, #1
   28e2c:	462a      	mov	r2, r5
   28e2e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   28e32:	a902      	add	r1, sp, #8
   28e34:	f7ff fd6a 	bl	2890c <virtqueue_add_buffer>
}
   28e38:	b004      	add	sp, #16
   28e3a:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   28e3c:	2d01      	cmp	r5, #1
   28e3e:	d1fb      	bne.n	28e38 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   28e40:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   28e44:	b004      	add	sp, #16
   28e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   28e4a:	f7f5 bb01 	b.w	1e450 <virtqueue_add_consumed_buffer>

00028e4e <rpmsg_virtio_release_rx_buffer>:
{
   28e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e50:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   28e52:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   28e56:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   28e5a:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   28e5c:	b2b6      	uxth	r6, r6
{
   28e5e:	460d      	mov	r5, r1
   28e60:	f7ff ff4f 	bl	28d02 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   28e64:	4631      	mov	r1, r6
   28e66:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   28e6a:	f7ff fde5 	bl	28a38 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   28e6e:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   28e70:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   28e72:	f1a5 0110 	sub.w	r1, r5, #16
   28e76:	4620      	mov	r0, r4
   28e78:	f7ff ffcd 	bl	28e16 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   28e7c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   28e80:	f7ff fe31 	bl	28ae6 <virtqueue_kick>
   28e84:	4638      	mov	r0, r7
}
   28e86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28e8a:	f7ff bf38 	b.w	28cfe <k_sem_give>

00028e8e <rpmsg_virtio_shm_pool_get_buffer>:
{
   28e8e:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   28e90:	b148      	cbz	r0, 28ea6 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   28e92:	b149      	cbz	r1, 28ea8 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   28e94:	6843      	ldr	r3, [r0, #4]
   28e96:	428b      	cmp	r3, r1
   28e98:	d306      	bcc.n	28ea8 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   28e9a:	6882      	ldr	r2, [r0, #8]
   28e9c:	6804      	ldr	r4, [r0, #0]
   28e9e:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   28ea0:	1a5b      	subs	r3, r3, r1
   28ea2:	6043      	str	r3, [r0, #4]
	return buffer;
   28ea4:	18a0      	adds	r0, r4, r2
}
   28ea6:	bd10      	pop	{r4, pc}
		return NULL;
   28ea8:	2000      	movs	r0, #0
   28eaa:	e7fc      	b.n	28ea6 <rpmsg_virtio_shm_pool_get_buffer+0x18>

00028eac <rpmsg_virtio_get_tx_payload_buffer>:
{
   28eac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   28eb0:	4605      	mov	r5, r0
   28eb2:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   28eb6:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   28eb8:	6a03      	ldr	r3, [r0, #32]
   28eba:	4617      	mov	r7, r2
   28ebc:	681b      	ldr	r3, [r3, #0]
   28ebe:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   28ec0:	0743      	lsls	r3, r0, #29
   28ec2:	d403      	bmi.n	28ecc <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   28ec4:	2000      	movs	r0, #0
}
   28ec6:	b002      	add	sp, #8
   28ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   28ecc:	f643 2398 	movw	r3, #15000	; 0x3a98
   28ed0:	2f00      	cmp	r7, #0
   28ed2:	bf18      	it	ne
   28ed4:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   28ed6:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   28eda:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   28ede:	4640      	mov	r0, r8
   28ee0:	f7ff ff0f 	bl	28d02 <__metal_mutex_acquire>
	return list->next == list;
   28ee4:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   28ee8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   28eec:	4554      	cmp	r4, sl
   28eee:	f8d3 9018 	ldr.w	r9, [r3, #24]
   28ef2:	d025      	beq.n	28f40 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   28ef4:	b324      	cbz	r4, 28f40 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   28ef6:	e9d4 2300 	ldrd	r2, r3, [r4]
   28efa:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   28efc:	6822      	ldr	r2, [r4, #0]
   28efe:	601a      	str	r2, [r3, #0]
	node->next = node;
   28f00:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   28f04:	f1b9 0f00 	cmp.w	r9, #0
   28f08:	d10e      	bne.n	28f28 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   28f0a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   28f0e:	6033      	str	r3, [r6, #0]
   28f10:	4640      	mov	r0, r8
   28f12:	f7ff fef4 	bl	28cfe <k_sem_give>
	rp_hdr->reserved = idx;
   28f16:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   28f1a:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   28f1e:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   28f20:	6833      	ldr	r3, [r6, #0]
   28f22:	3b10      	subs	r3, #16
   28f24:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   28f26:	e7ce      	b.n	28ec6 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   28f28:	f1b9 0f01 	cmp.w	r9, #1
   28f2c:	d1f0      	bne.n	28f10 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   28f2e:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   28f30:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   28f34:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   28f38:	f7ff fd7e 	bl	28a38 <virtqueue_get_buffer_length>
   28f3c:	6030      	str	r0, [r6, #0]
   28f3e:	e7e7      	b.n	28f10 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   28f40:	f1b9 0f00 	cmp.w	r9, #0
   28f44:	d12a      	bne.n	28f9c <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   28f46:	4631      	mov	r1, r6
   28f48:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   28f4c:	f10d 0206 	add.w	r2, sp, #6
   28f50:	f7ff fd38 	bl	289c4 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   28f54:	4604      	mov	r4, r0
   28f56:	2800      	cmp	r0, #0
   28f58:	d1da      	bne.n	28f10 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   28f5a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   28f5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   28f60:	b953      	cbnz	r3, 28f78 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   28f62:	4640      	mov	r0, r8
   28f64:	f7ff fecb 	bl	28cfe <k_sem_give>
		if (rp_hdr || !tick_count)
   28f68:	2f00      	cmp	r7, #0
   28f6a:	d0ab      	beq.n	28ec4 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   28f6c:	2021      	movs	r0, #33	; 0x21
   28f6e:	2100      	movs	r1, #0
   28f70:	f7f8 fca8 	bl	218c4 <z_impl_k_sleep>
		tick_count--;
   28f74:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   28f76:	e7b2      	b.n	28ede <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   28f78:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   28f7c:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   28f80:	f7ff ff85 	bl	28e8e <rpmsg_virtio_shm_pool_get_buffer>
   28f84:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   28f86:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   28f8a:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   28f8e:	6033      	str	r3, [r6, #0]
   28f90:	4640      	mov	r0, r8
   28f92:	f7ff feb4 	bl	28cfe <k_sem_give>
		if (rp_hdr || !tick_count)
   28f96:	2c00      	cmp	r4, #0
   28f98:	d0e6      	beq.n	28f68 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   28f9a:	e7bc      	b.n	28f16 <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   28f9c:	f1b9 0f01 	cmp.w	r9, #1
   28fa0:	d1df      	bne.n	28f62 <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   28fa2:	4632      	mov	r2, r6
   28fa4:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   28fa8:	f10d 0106 	add.w	r1, sp, #6
   28fac:	f7ff fd49 	bl	28a42 <virtqueue_get_available_buffer>
   28fb0:	4604      	mov	r4, r0
   28fb2:	e7ed      	b.n	28f90 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

00028fb4 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   28fb4:	b120      	cbz	r0, 28fc0 <rpmsg_virtio_init_shm_pool+0xc>
   28fb6:	b119      	cbz	r1, 28fc0 <rpmsg_virtio_init_shm_pool+0xc>
   28fb8:	b112      	cbz	r2, 28fc0 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   28fba:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   28fbe:	6001      	str	r1, [r0, #0]
}
   28fc0:	4770      	bx	lr

00028fc2 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   28fc2:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   28fc4:	4604      	mov	r4, r0
   28fc6:	b918      	cbnz	r0, 28fd0 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   28fc8:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   28fca:	3834      	subs	r0, #52	; 0x34
   28fcc:	f7ff fe78 	bl	28cc0 <rpmsg_destroy_ept>
	return list->next == list;
   28fd0:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   28fd2:	4284      	cmp	r4, r0
   28fd4:	d1f9      	bne.n	28fca <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   28fd6:	2300      	movs	r3, #0
		rvdev->svq = 0;
   28fd8:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   28fdc:	e7f4      	b.n	28fc8 <rpmsg_deinit_vdev+0x6>

00028fde <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   28fde:	f7f5 bda9 	b.w	1eb34 <_DoInit>

00028fe2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   28fe2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   28fe4:	f7ff fffb 	bl	28fde <SEGGER_RTT_Init>

	return 0;
}
   28fe8:	2000      	movs	r0, #0
   28fea:	bd08      	pop	{r3, pc}

00028fec <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   28fec:	4770      	bx	lr

00028fee <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   28fee:	b140      	cbz	r0, 29002 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   28ff0:	68c3      	ldr	r3, [r0, #12]
   28ff2:	7858      	ldrb	r0, [r3, #1]
   28ff4:	f010 0001 	ands.w	r0, r0, #1
   28ff8:	bf1e      	ittt	ne
   28ffa:	7818      	ldrbne	r0, [r3, #0]
   28ffc:	fab0 f080 	clzne	r0, r0
   29000:	0940      	lsrne	r0, r0, #5
}
   29002:	4770      	bx	lr

00029004 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29004:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29006:	ab0b      	add	r3, sp, #44	; 0x2c
   29008:	9305      	str	r3, [sp, #20]
   2900a:	9303      	str	r3, [sp, #12]
   2900c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2900e:	2201      	movs	r2, #1
   29010:	9302      	str	r3, [sp, #8]
   29012:	2300      	movs	r3, #0
   29014:	4618      	mov	r0, r3
   29016:	e9cd 3300 	strd	r3, r3, [sp]
   2901a:	f7e4 fff9 	bl	e010 <z_impl_z_log_msg_runtime_vcreate>
}
   2901e:	b007      	add	sp, #28
   29020:	f85d fb04 	ldr.w	pc, [sp], #4

00029024 <z_early_memset>:
   29024:	f000 ba5f 	b.w	294e6 <memset>

00029028 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29028:	f000 ba23 	b.w	29472 <memcpy>

0002902c <k_heap_init>:
{
   2902c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2902e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   29032:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   29036:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   29038:	f7e3 bd52 	b.w	cae0 <sys_heap_init>

0002903c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2903c:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   29040:	4313      	orrs	r3, r2
   29042:	f013 0303 	ands.w	r3, r3, #3
   29046:	d10c      	bne.n	29062 <create_free_list+0x26>
	slab->free_list = NULL;
   29048:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2904a:	68c1      	ldr	r1, [r0, #12]
   2904c:	4299      	cmp	r1, r3
   2904e:	d801      	bhi.n	29054 <create_free_list+0x18>
	return 0;
   29050:	2000      	movs	r0, #0
   29052:	4770      	bx	lr
		*(char **)p = slab->free_list;
   29054:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   29056:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   29058:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2905a:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   2905c:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   2905e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   29060:	e7f3      	b.n	2904a <create_free_list+0xe>
		return -EINVAL;
   29062:	f06f 0015 	mvn.w	r0, #21
}
   29066:	4770      	bx	lr

00029068 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   29068:	f3ef 8005 	mrs	r0, IPSR
}
   2906c:	3800      	subs	r0, #0
   2906e:	bf18      	it	ne
   29070:	2001      	movne	r0, #1
   29072:	4770      	bx	lr

00029074 <z_impl_k_thread_name_set>:
}
   29074:	f06f 0057 	mvn.w	r0, #87	; 0x57
   29078:	4770      	bx	lr

0002907a <k_thread_name_get>:
}
   2907a:	2000      	movs	r0, #0
   2907c:	4770      	bx	lr

0002907e <z_impl_k_thread_start>:
	z_sched_start(thread);
   2907e:	f7f7 bd81 	b.w	20b84 <z_sched_start>

00029082 <z_pm_save_idle_exit>:
{
   29082:	b508      	push	{r3, lr}
	pm_system_resume();
   29084:	f7e6 fb3a 	bl	f6fc <pm_system_resume>
}
   29088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2908c:	f7ff b89e 	b.w	281cc <sys_clock_idle_exit>

00029090 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   29090:	f990 300e 	ldrsb.w	r3, [r0, #14]
   29094:	428b      	cmp	r3, r1
   29096:	d001      	beq.n	2909c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   29098:	f7f8 b876 	b.w	21188 <z_set_prio>
}
   2909c:	2000      	movs	r0, #0
   2909e:	4770      	bx	lr

000290a0 <z_impl_k_mutex_init>:
{
   290a0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   290a2:	2000      	movs	r0, #0
   290a4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   290a8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   290ac:	4770      	bx	lr

000290ae <z_queue_node_peek>:
{
   290ae:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   290b0:	4604      	mov	r4, r0
   290b2:	b130      	cbz	r0, 290c2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   290b4:	6802      	ldr	r2, [r0, #0]
   290b6:	0793      	lsls	r3, r2, #30
   290b8:	d003      	beq.n	290c2 <z_queue_node_peek+0x14>
		ret = anode->data;
   290ba:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   290bc:	b109      	cbz	r1, 290c2 <z_queue_node_peek+0x14>
			k_free(anode);
   290be:	f000 f9bc 	bl	2943a <k_free>
}
   290c2:	4620      	mov	r0, r4
   290c4:	bd10      	pop	{r4, pc}

000290c6 <z_impl_k_queue_init>:
	list->head = NULL;
   290c6:	2300      	movs	r3, #0
	list->tail = NULL;
   290c8:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   290cc:	6083      	str	r3, [r0, #8]
   290ce:	f100 030c 	add.w	r3, r0, #12
   290d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   290d6:	f100 0314 	add.w	r3, r0, #20
   290da:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   290de:	4770      	bx	lr

000290e0 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   290e0:	2301      	movs	r3, #1
{
   290e2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   290e4:	9300      	str	r3, [sp, #0]
   290e6:	2300      	movs	r3, #0
{
   290e8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   290ea:	4619      	mov	r1, r3
   290ec:	f7f6 fbf2 	bl	1f8d4 <queue_insert>
}
   290f0:	b003      	add	sp, #12
   290f2:	f85d fb04 	ldr.w	pc, [sp], #4

000290f6 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   290f6:	2300      	movs	r3, #0
{
   290f8:	b507      	push	{r0, r1, r2, lr}
   290fa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   290fc:	9300      	str	r3, [sp, #0]
   290fe:	4619      	mov	r1, r3
   29100:	f7f6 fbe8 	bl	1f8d4 <queue_insert>
}
   29104:	b003      	add	sp, #12
   29106:	f85d fb04 	ldr.w	pc, [sp], #4

0002910a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2910a:	b15a      	cbz	r2, 29124 <z_impl_k_sem_init+0x1a>
   2910c:	428a      	cmp	r2, r1
   2910e:	d309      	bcc.n	29124 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   29110:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   29114:	e9c0 1202 	strd	r1, r2, [r0, #8]
   29118:	e9c0 0000 	strd	r0, r0, [r0]
   2911c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   29120:	2000      	movs	r0, #0
   29122:	4770      	bx	lr
		return -EINVAL;
   29124:	f06f 0015 	mvn.w	r0, #21
}
   29128:	4770      	bx	lr

0002912a <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2912a:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2912c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2912e:	408b      	lsls	r3, r1
   29130:	ea22 0303 	bic.w	r3, r2, r3
   29134:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   29136:	fa22 f001 	lsr.w	r0, r2, r1
}
   2913a:	f000 0001 	and.w	r0, r0, #1
   2913e:	4770      	bx	lr

00029140 <unschedule_locked>:
{
   29140:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29142:	2103      	movs	r1, #3
{
   29144:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29146:	300c      	adds	r0, #12
   29148:	f7ff ffef 	bl	2912a <flag_test_and_clear>
   2914c:	4604      	mov	r4, r0
   2914e:	b118      	cbz	r0, 29158 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   29150:	f105 0010 	add.w	r0, r5, #16
   29154:	f7f8 fe56 	bl	21e04 <z_abort_timeout>
}
   29158:	4620      	mov	r0, r4
   2915a:	bd38      	pop	{r3, r4, r5, pc}

0002915c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2915c:	b120      	cbz	r0, 29168 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2915e:	2200      	movs	r2, #0
   29160:	3090      	adds	r0, #144	; 0x90
   29162:	4611      	mov	r1, r2
   29164:	f7f8 bcb0 	b.w	21ac8 <z_sched_wake>
}
   29168:	4770      	bx	lr

0002916a <cancel_async_locked>:
{
   2916a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2916c:	68c3      	ldr	r3, [r0, #12]
{
   2916e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29170:	f3c3 0640 	ubfx	r6, r3, #1, #1
   29174:	079b      	lsls	r3, r3, #30
   29176:	d416      	bmi.n	291a6 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   29178:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2917a:	2102      	movs	r1, #2
   2917c:	300c      	adds	r0, #12
   2917e:	f7ff ffd4 	bl	2912a <flag_test_and_clear>
   29182:	b180      	cbz	r0, 291a6 <cancel_async_locked+0x3c>
	return list->head;
   29184:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29188:	b16a      	cbz	r2, 291a6 <cancel_async_locked+0x3c>
   2918a:	4294      	cmp	r4, r2
   2918c:	d11d      	bne.n	291ca <cancel_async_locked+0x60>
	return node->next;
   2918e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   29190:	b99e      	cbnz	r6, 291ba <cancel_async_locked+0x50>
   29192:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   29196:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   2919a:	429c      	cmp	r4, r3
   2919c:	d101      	bne.n	291a2 <cancel_async_locked+0x38>
	list->tail = node;
   2919e:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   291a2:	2300      	movs	r3, #0
   291a4:	6023      	str	r3, [r4, #0]
	return *flagp;
   291a6:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   291a8:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   291ac:	bf1e      	ittt	ne
   291ae:	f043 0302 	orrne.w	r3, r3, #2
   291b2:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   291b4:	f040 0002 	orrne.w	r0, r0, #2
}
   291b8:	bd70      	pop	{r4, r5, r6, pc}
   291ba:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   291bc:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   291c0:	4294      	cmp	r4, r2
	list->tail = node;
   291c2:	bf08      	it	eq
   291c4:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   291c8:	e7eb      	b.n	291a2 <cancel_async_locked+0x38>
	return node->next;
   291ca:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   291cc:	6812      	ldr	r2, [r2, #0]
   291ce:	e7db      	b.n	29188 <cancel_async_locked+0x1e>

000291d0 <k_work_submit_to_queue>:
{
   291d0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   291d2:	f7f6 ff97 	bl	20104 <z_work_submit_to_queue>
	if (ret > 0) {
   291d6:	1e04      	subs	r4, r0, #0
   291d8:	dd09      	ble.n	291ee <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   291da:	f04f 0320 	mov.w	r3, #32
   291de:	f3ef 8011 	mrs	r0, BASEPRI
   291e2:	f383 8812 	msr	BASEPRI_MAX, r3
   291e6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   291ea:	f000 f80d 	bl	29208 <z_reschedule_irqlock>
}
   291ee:	4620      	mov	r0, r4
   291f0:	bd10      	pop	{r4, pc}

000291f2 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   291f2:	f7f6 bf41 	b.w	20078 <k_work_busy_get>

000291f6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   291f6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   291fa:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   291fe:	4283      	cmp	r3, r0
		return b2 - b1;
   29200:	bf14      	ite	ne
   29202:	1ac0      	subne	r0, r0, r3
	return 0;
   29204:	2000      	moveq	r0, #0
}
   29206:	4770      	bx	lr

00029208 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   29208:	4603      	mov	r3, r0
   2920a:	b920      	cbnz	r0, 29216 <z_reschedule_irqlock+0xe>
   2920c:	f3ef 8205 	mrs	r2, IPSR
   29210:	b90a      	cbnz	r2, 29216 <z_reschedule_irqlock+0xe>
   29212:	f7e6 be5d 	b.w	fed0 <arch_swap>
	__asm__ volatile(
   29216:	f383 8811 	msr	BASEPRI, r3
   2921a:	f3bf 8f6f 	isb	sy
}
   2921e:	4770      	bx	lr

00029220 <z_reschedule_unlocked>:
	__asm__ volatile(
   29220:	f04f 0320 	mov.w	r3, #32
   29224:	f3ef 8011 	mrs	r0, BASEPRI
   29228:	f383 8812 	msr	BASEPRI_MAX, r3
   2922c:	f3bf 8f6f 	isb	sy
   29230:	f7ff bfea 	b.w	29208 <z_reschedule_irqlock>

00029234 <z_unpend_all>:
{
   29234:	b538      	push	{r3, r4, r5, lr}
   29236:	4605      	mov	r5, r0
	int need_sched = 0;
   29238:	2000      	movs	r0, #0
	return list->head == list;
   2923a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2923c:	42a5      	cmp	r5, r4
   2923e:	d000      	beq.n	29242 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   29240:	b904      	cbnz	r4, 29244 <z_unpend_all+0x10>
}
   29242:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   29244:	4620      	mov	r0, r4
   29246:	f7f8 f8b9 	bl	213bc <z_unpend_thread>
		z_ready_thread(thread);
   2924a:	4620      	mov	r0, r4
   2924c:	f7f7 fbcc 	bl	209e8 <z_ready_thread>
		need_sched = 1;
   29250:	2001      	movs	r0, #1
   29252:	e7f2      	b.n	2923a <z_unpend_all+0x6>

00029254 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   29254:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   29256:	f7f8 ff57 	bl	22108 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2925a:	bd08      	pop	{r3, pc}

0002925c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2925c:	f7f8 bf54 	b.w	22108 <sys_clock_tick_get>

00029260 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   29260:	b108      	cbz	r0, 29266 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   29262:	f7e4 bbad 	b.w	d9c0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   29266:	4770      	bx	lr

00029268 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29268:	f1b1 3fff 	cmp.w	r1, #4294967295
   2926c:	bf08      	it	eq
   2926e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   29272:	b538      	push	{r3, r4, r5, lr}
   29274:	460c      	mov	r4, r1
   29276:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29278:	d014      	beq.n	292a4 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2927a:	4308      	orrs	r0, r1
   2927c:	d103      	bne.n	29286 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2927e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   29282:	f7f8 bf41 	b.w	22108 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   29286:	f06f 0001 	mvn.w	r0, #1
   2928a:	f04f 33ff 	mov.w	r3, #4294967295
   2928e:	1b40      	subs	r0, r0, r5
   29290:	eb63 0101 	sbc.w	r1, r3, r1
   29294:	2900      	cmp	r1, #0
   29296:	da04      	bge.n	292a2 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   29298:	f7f8 ff36 	bl	22108 <sys_clock_tick_get>
   2929c:	1940      	adds	r0, r0, r5
   2929e:	eb41 0104 	adc.w	r1, r1, r4
}
   292a2:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   292a4:	f04f 30ff 	mov.w	r0, #4294967295
   292a8:	4601      	mov	r1, r0
   292aa:	e7fa      	b.n	292a2 <sys_clock_timeout_end_calc+0x3a>

000292ac <k_timer_init>:
	timer->status = 0U;
   292ac:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   292ae:	e9c0 1208 	strd	r1, r2, [r0, #32]
   292b2:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   292b6:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   292ba:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   292be:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   292c0:	6343      	str	r3, [r0, #52]	; 0x34
}
   292c2:	4770      	bx	lr

000292c4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   292c4:	b510      	push	{r4, lr}
   292c6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   292c8:	f7f8 fd9c 	bl	21e04 <z_abort_timeout>

	if (inactive) {
   292cc:	b9b0      	cbnz	r0, 292fc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   292ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   292d0:	b10b      	cbz	r3, 292d6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   292d2:	4620      	mov	r0, r4
   292d4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   292d6:	f104 0018 	add.w	r0, r4, #24
   292da:	f7f8 f911 	bl	21500 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   292de:	b168      	cbz	r0, 292fc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   292e0:	f7f7 fb82 	bl	209e8 <z_ready_thread>
   292e4:	f04f 0320 	mov.w	r3, #32
   292e8:	f3ef 8011 	mrs	r0, BASEPRI
   292ec:	f383 8812 	msr	BASEPRI_MAX, r3
   292f0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   292f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   292f8:	f7ff bf86 	b.w	29208 <z_reschedule_irqlock>
   292fc:	bd10      	pop	{r4, pc}

000292fe <add_event>:
{
   292fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29300:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29302:	e9d0 1300 	ldrd	r1, r3, [r0]
   29306:	4288      	cmp	r0, r1
   29308:	4604      	mov	r4, r0
   2930a:	d105      	bne.n	29318 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2930c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2930e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   29312:	601d      	str	r5, [r3, #0]
	list->tail = node;
   29314:	6065      	str	r5, [r4, #4]
   29316:	e01d      	b.n	29354 <add_event+0x56>
	if ((pending == NULL) ||
   29318:	2b00      	cmp	r3, #0
   2931a:	d0f7      	beq.n	2930c <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2931c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2931e:	b100      	cbz	r0, 29322 <add_event+0x24>
   29320:	3860      	subs	r0, #96	; 0x60
   29322:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29326:	4639      	mov	r1, r7
   29328:	f7ff ff65 	bl	291f6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2932c:	2800      	cmp	r0, #0
   2932e:	dced      	bgt.n	2930c <add_event+0xe>
	return list->head == list;
   29330:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29332:	42b4      	cmp	r4, r6
   29334:	d0ea      	beq.n	2930c <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29336:	2e00      	cmp	r6, #0
   29338:	d0e8      	beq.n	2930c <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2933a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2933c:	b101      	cbz	r1, 29340 <add_event+0x42>
   2933e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   29340:	4638      	mov	r0, r7
   29342:	f7ff ff58 	bl	291f6 <z_sched_prio_cmp>
   29346:	2800      	cmp	r0, #0
   29348:	dd05      	ble.n	29356 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2934a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2934c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   29350:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   29352:	6075      	str	r5, [r6, #4]
}
   29354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   29356:	6863      	ldr	r3, [r4, #4]
   29358:	429e      	cmp	r6, r3
   2935a:	d0d7      	beq.n	2930c <add_event+0xe>
   2935c:	6836      	ldr	r6, [r6, #0]
   2935e:	e7ea      	b.n	29336 <add_event+0x38>

00029360 <signal_poll_event>:
{
   29360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   29364:	6884      	ldr	r4, [r0, #8]
{
   29366:	4605      	mov	r5, r0
   29368:	460e      	mov	r6, r1
	if (poller != NULL) {
   2936a:	b144      	cbz	r4, 2937e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2936c:	7863      	ldrb	r3, [r4, #1]
   2936e:	2b01      	cmp	r3, #1
   29370:	d12e      	bne.n	293d0 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   29372:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   29376:	f013 0302 	ands.w	r3, r3, #2
   2937a:	d10a      	bne.n	29392 <signal_poll_event+0x32>
		poller->is_polling = false;
   2937c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2937e:	2000      	movs	r0, #0
	event->state |= state;
   29380:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   29382:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   29384:	f3c3 3286 	ubfx	r2, r3, #14, #7
   29388:	4316      	orrs	r6, r2
   2938a:	f366 3394 	bfi	r3, r6, #14, #7
   2938e:	60eb      	str	r3, [r5, #12]
	return retcode;
   29390:	e03e      	b.n	29410 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   29392:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   29396:	f1b3 3fff 	cmp.w	r3, #4294967295
   2939a:	bf08      	it	eq
   2939c:	f112 0f02 	cmneq.w	r2, #2
   293a0:	d032      	beq.n	29408 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   293a2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   293a6:	4640      	mov	r0, r8
   293a8:	f7f8 f808 	bl	213bc <z_unpend_thread>
	arch_thread_return_value_set(thread,
   293ac:	2e08      	cmp	r6, #8
   293ae:	bf0c      	ite	eq
   293b0:	f06f 0303 	mvneq.w	r3, #3
   293b4:	2300      	movne	r3, #0
   293b6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   293b8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   293bc:	06db      	lsls	r3, r3, #27
   293be:	d109      	bne.n	293d4 <signal_poll_event+0x74>
   293c0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   293c4:	b937      	cbnz	r7, 293d4 <signal_poll_event+0x74>
	z_ready_thread(thread);
   293c6:	4640      	mov	r0, r8
   293c8:	f7f7 fb0e 	bl	209e8 <z_ready_thread>
		poller->is_polling = false;
   293cc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   293ce:	e7d6      	b.n	2937e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   293d0:	2b02      	cmp	r3, #2
   293d2:	d001      	beq.n	293d8 <signal_poll_event+0x78>
		poller->is_polling = false;
   293d4:	2300      	movs	r3, #0
   293d6:	e7d1      	b.n	2937c <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   293d8:	7823      	ldrb	r3, [r4, #0]
   293da:	2b00      	cmp	r3, #0
   293dc:	d0cf      	beq.n	2937e <signal_poll_event+0x1e>
   293de:	f854 7c04 	ldr.w	r7, [r4, #-4]
   293e2:	2f00      	cmp	r7, #0
   293e4:	d0f2      	beq.n	293cc <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   293e6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   293ea:	f1a4 0914 	sub.w	r9, r4, #20
   293ee:	f104 0014 	add.w	r0, r4, #20
   293f2:	f7f8 fd07 	bl	21e04 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   293f6:	4649      	mov	r1, r9
   293f8:	4638      	mov	r0, r7
		twork->poll_result = 0;
   293fa:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   293fe:	f7f6 fe81 	bl	20104 <z_work_submit_to_queue>
		poller->is_polling = false;
   29402:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   29406:	e7ba      	b.n	2937e <signal_poll_event+0x1e>
		poller->is_polling = false;
   29408:	2300      	movs	r3, #0
		return -EAGAIN;
   2940a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2940e:	7023      	strb	r3, [r4, #0]
}
   29410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029414 <z_handle_obj_poll_events>:
{
   29414:	4603      	mov	r3, r0
	return list->head == list;
   29416:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   29418:	4283      	cmp	r3, r0
   2941a:	d008      	beq.n	2942e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2941c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   29420:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29422:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29424:	2300      	movs	r3, #0
	node->prev = NULL;
   29426:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2942a:	f7ff bf99 	b.w	29360 <signal_poll_event>
}
   2942e:	4770      	bx	lr

00029430 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   29430:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   29432:	e9c0 0000 	strd	r0, r0, [r0]
   29436:	6083      	str	r3, [r0, #8]
}
   29438:	4770      	bx	lr

0002943a <k_free>:
	if (ptr != NULL) {
   2943a:	b120      	cbz	r0, 29446 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2943c:	1f01      	subs	r1, r0, #4
   2943e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   29442:	f7f5 be2f 	b.w	1f0a4 <k_heap_free>
}
   29446:	4770      	bx	lr

00029448 <k_malloc>:
{
   29448:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2944a:	2004      	movs	r0, #4
   2944c:	f7f9 bb22 	b.w	22a94 <k_aligned_alloc>

00029450 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   29450:	4770      	bx	lr

00029452 <memcmp>:
   29452:	3901      	subs	r1, #1
   29454:	4402      	add	r2, r0
   29456:	b510      	push	{r4, lr}
   29458:	4290      	cmp	r0, r2
   2945a:	d101      	bne.n	29460 <memcmp+0xe>
   2945c:	2000      	movs	r0, #0
   2945e:	e005      	b.n	2946c <memcmp+0x1a>
   29460:	7803      	ldrb	r3, [r0, #0]
   29462:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   29466:	42a3      	cmp	r3, r4
   29468:	d001      	beq.n	2946e <memcmp+0x1c>
   2946a:	1b18      	subs	r0, r3, r4
   2946c:	bd10      	pop	{r4, pc}
   2946e:	3001      	adds	r0, #1
   29470:	e7f2      	b.n	29458 <memcmp+0x6>

00029472 <memcpy>:
   29472:	440a      	add	r2, r1
   29474:	1e43      	subs	r3, r0, #1
   29476:	4291      	cmp	r1, r2
   29478:	d100      	bne.n	2947c <memcpy+0xa>
   2947a:	4770      	bx	lr
   2947c:	b510      	push	{r4, lr}
   2947e:	f811 4b01 	ldrb.w	r4, [r1], #1
   29482:	4291      	cmp	r1, r2
   29484:	f803 4f01 	strb.w	r4, [r3, #1]!
   29488:	d1f9      	bne.n	2947e <memcpy+0xc>
   2948a:	bd10      	pop	{r4, pc}

0002948c <__memcpy_chk>:
   2948c:	429a      	cmp	r2, r3
   2948e:	b508      	push	{r3, lr}
   29490:	d901      	bls.n	29496 <__memcpy_chk+0xa>
   29492:	f7e7 fc7b 	bl	10d8c <__chk_fail>
   29496:	4281      	cmp	r1, r0
   29498:	d804      	bhi.n	294a4 <__memcpy_chk+0x18>
   2949a:	188b      	adds	r3, r1, r2
   2949c:	4298      	cmp	r0, r3
   2949e:	d3f8      	bcc.n	29492 <__memcpy_chk+0x6>
   294a0:	4281      	cmp	r1, r0
   294a2:	d102      	bne.n	294aa <__memcpy_chk+0x1e>
   294a4:	1883      	adds	r3, r0, r2
   294a6:	4299      	cmp	r1, r3
   294a8:	d3f3      	bcc.n	29492 <__memcpy_chk+0x6>
   294aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   294ae:	f7ff bfe0 	b.w	29472 <memcpy>

000294b2 <memmove>:
   294b2:	4288      	cmp	r0, r1
   294b4:	b510      	push	{r4, lr}
   294b6:	eb01 0402 	add.w	r4, r1, r2
   294ba:	d902      	bls.n	294c2 <memmove+0x10>
   294bc:	4284      	cmp	r4, r0
   294be:	4623      	mov	r3, r4
   294c0:	d807      	bhi.n	294d2 <memmove+0x20>
   294c2:	1e43      	subs	r3, r0, #1
   294c4:	42a1      	cmp	r1, r4
   294c6:	d008      	beq.n	294da <memmove+0x28>
   294c8:	f811 2b01 	ldrb.w	r2, [r1], #1
   294cc:	f803 2f01 	strb.w	r2, [r3, #1]!
   294d0:	e7f8      	b.n	294c4 <memmove+0x12>
   294d2:	4402      	add	r2, r0
   294d4:	4601      	mov	r1, r0
   294d6:	428a      	cmp	r2, r1
   294d8:	d100      	bne.n	294dc <memmove+0x2a>
   294da:	bd10      	pop	{r4, pc}
   294dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   294e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   294e4:	e7f7      	b.n	294d6 <memmove+0x24>

000294e6 <memset>:
   294e6:	4402      	add	r2, r0
   294e8:	4603      	mov	r3, r0
   294ea:	4293      	cmp	r3, r2
   294ec:	d100      	bne.n	294f0 <memset+0xa>
   294ee:	4770      	bx	lr
   294f0:	f803 1b01 	strb.w	r1, [r3], #1
   294f4:	e7f9      	b.n	294ea <memset+0x4>

000294f6 <_calloc_r>:
   294f6:	b538      	push	{r3, r4, r5, lr}
   294f8:	fb02 f501 	mul.w	r5, r2, r1
   294fc:	4629      	mov	r1, r5
   294fe:	f7f9 fbb5 	bl	22c6c <_malloc_r>
   29502:	4604      	mov	r4, r0
   29504:	b118      	cbz	r0, 2950e <_calloc_r+0x18>
   29506:	462a      	mov	r2, r5
   29508:	2100      	movs	r1, #0
   2950a:	f7ff ffec 	bl	294e6 <memset>
   2950e:	4620      	mov	r0, r4
   29510:	bd38      	pop	{r3, r4, r5, pc}

00029512 <__cvt>:
   29512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29516:	b089      	sub	sp, #36	; 0x24
   29518:	2b00      	cmp	r3, #0
   2951a:	461d      	mov	r5, r3
   2951c:	4614      	mov	r4, r2
   2951e:	bfba      	itte	lt
   29520:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   29524:	4614      	movlt	r4, r2
   29526:	2300      	movge	r3, #0
   29528:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2952a:	bfbc      	itt	lt
   2952c:	461d      	movlt	r5, r3
   2952e:	232d      	movlt	r3, #45	; 0x2d
   29530:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   29534:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   29538:	f028 0a20 	bic.w	sl, r8, #32
   2953c:	7013      	strb	r3, [r2, #0]
   2953e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   29542:	d005      	beq.n	29550 <__cvt+0x3e>
   29544:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   29548:	d100      	bne.n	2954c <__cvt+0x3a>
   2954a:	3601      	adds	r6, #1
   2954c:	2302      	movs	r3, #2
   2954e:	e000      	b.n	29552 <__cvt+0x40>
   29550:	2303      	movs	r3, #3
   29552:	aa07      	add	r2, sp, #28
   29554:	9204      	str	r2, [sp, #16]
   29556:	aa06      	add	r2, sp, #24
   29558:	e9cd 3600 	strd	r3, r6, [sp]
   2955c:	e9cd 9202 	strd	r9, r2, [sp, #8]
   29560:	462b      	mov	r3, r5
   29562:	4622      	mov	r2, r4
   29564:	f7e0 fb88 	bl	9c78 <_dtoa_r>
   29568:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   2956c:	4607      	mov	r7, r0
   2956e:	d119      	bne.n	295a4 <__cvt+0x92>
   29570:	f01b 0f01 	tst.w	fp, #1
   29574:	d00e      	beq.n	29594 <__cvt+0x82>
   29576:	eb07 0806 	add.w	r8, r7, r6
   2957a:	2200      	movs	r2, #0
   2957c:	2300      	movs	r3, #0
   2957e:	4620      	mov	r0, r4
   29580:	4629      	mov	r1, r5
   29582:	f7df fd25 	bl	8fd0 <__aeabi_dcmpeq>
   29586:	b108      	cbz	r0, 2958c <__cvt+0x7a>
   29588:	f8cd 801c 	str.w	r8, [sp, #28]
   2958c:	2230      	movs	r2, #48	; 0x30
   2958e:	9b07      	ldr	r3, [sp, #28]
   29590:	4543      	cmp	r3, r8
   29592:	d321      	bcc.n	295d8 <__cvt+0xc6>
   29594:	9b07      	ldr	r3, [sp, #28]
   29596:	4638      	mov	r0, r7
   29598:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2959a:	1bdb      	subs	r3, r3, r7
   2959c:	6013      	str	r3, [r2, #0]
   2959e:	b009      	add	sp, #36	; 0x24
   295a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   295a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   295a8:	d0e2      	beq.n	29570 <__cvt+0x5e>
   295aa:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   295ae:	eb00 0806 	add.w	r8, r0, r6
   295b2:	d1e2      	bne.n	2957a <__cvt+0x68>
   295b4:	7803      	ldrb	r3, [r0, #0]
   295b6:	2b30      	cmp	r3, #48	; 0x30
   295b8:	d10a      	bne.n	295d0 <__cvt+0xbe>
   295ba:	2200      	movs	r2, #0
   295bc:	2300      	movs	r3, #0
   295be:	4620      	mov	r0, r4
   295c0:	4629      	mov	r1, r5
   295c2:	f7df fd05 	bl	8fd0 <__aeabi_dcmpeq>
   295c6:	b918      	cbnz	r0, 295d0 <__cvt+0xbe>
   295c8:	f1c6 0601 	rsb	r6, r6, #1
   295cc:	f8c9 6000 	str.w	r6, [r9]
   295d0:	f8d9 3000 	ldr.w	r3, [r9]
   295d4:	4498      	add	r8, r3
   295d6:	e7d0      	b.n	2957a <__cvt+0x68>
   295d8:	1c59      	adds	r1, r3, #1
   295da:	9107      	str	r1, [sp, #28]
   295dc:	701a      	strb	r2, [r3, #0]
   295de:	e7d6      	b.n	2958e <__cvt+0x7c>

000295e0 <__exponent>:
   295e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   295e2:	2900      	cmp	r1, #0
   295e4:	7002      	strb	r2, [r0, #0]
   295e6:	bfba      	itte	lt
   295e8:	4249      	neglt	r1, r1
   295ea:	232d      	movlt	r3, #45	; 0x2d
   295ec:	232b      	movge	r3, #43	; 0x2b
   295ee:	2909      	cmp	r1, #9
   295f0:	7043      	strb	r3, [r0, #1]
   295f2:	dd28      	ble.n	29646 <__exponent+0x66>
   295f4:	f10d 0307 	add.w	r3, sp, #7
   295f8:	270a      	movs	r7, #10
   295fa:	461d      	mov	r5, r3
   295fc:	461a      	mov	r2, r3
   295fe:	3b01      	subs	r3, #1
   29600:	fbb1 f6f7 	udiv	r6, r1, r7
   29604:	fb07 1416 	mls	r4, r7, r6, r1
   29608:	3430      	adds	r4, #48	; 0x30
   2960a:	f802 4c01 	strb.w	r4, [r2, #-1]
   2960e:	460c      	mov	r4, r1
   29610:	4631      	mov	r1, r6
   29612:	2c63      	cmp	r4, #99	; 0x63
   29614:	dcf2      	bgt.n	295fc <__exponent+0x1c>
   29616:	3130      	adds	r1, #48	; 0x30
   29618:	1e94      	subs	r4, r2, #2
   2961a:	f803 1c01 	strb.w	r1, [r3, #-1]
   2961e:	1c41      	adds	r1, r0, #1
   29620:	4623      	mov	r3, r4
   29622:	42ab      	cmp	r3, r5
   29624:	d30a      	bcc.n	2963c <__exponent+0x5c>
   29626:	f10d 0309 	add.w	r3, sp, #9
   2962a:	1a9b      	subs	r3, r3, r2
   2962c:	42ac      	cmp	r4, r5
   2962e:	bf88      	it	hi
   29630:	2300      	movhi	r3, #0
   29632:	3302      	adds	r3, #2
   29634:	4403      	add	r3, r0
   29636:	1a18      	subs	r0, r3, r0
   29638:	b003      	add	sp, #12
   2963a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2963c:	f813 6b01 	ldrb.w	r6, [r3], #1
   29640:	f801 6f01 	strb.w	r6, [r1, #1]!
   29644:	e7ed      	b.n	29622 <__exponent+0x42>
   29646:	2330      	movs	r3, #48	; 0x30
   29648:	3130      	adds	r1, #48	; 0x30
   2964a:	7083      	strb	r3, [r0, #2]
   2964c:	1d03      	adds	r3, r0, #4
   2964e:	70c1      	strb	r1, [r0, #3]
   29650:	e7f1      	b.n	29636 <__exponent+0x56>

00029652 <_printf_common>:
   29652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29656:	4616      	mov	r6, r2
   29658:	4698      	mov	r8, r3
   2965a:	688a      	ldr	r2, [r1, #8]
   2965c:	4607      	mov	r7, r0
   2965e:	690b      	ldr	r3, [r1, #16]
   29660:	460c      	mov	r4, r1
   29662:	f8dd 9020 	ldr.w	r9, [sp, #32]
   29666:	4293      	cmp	r3, r2
   29668:	bfb8      	it	lt
   2966a:	4613      	movlt	r3, r2
   2966c:	6033      	str	r3, [r6, #0]
   2966e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   29672:	b10a      	cbz	r2, 29678 <_printf_common+0x26>
   29674:	3301      	adds	r3, #1
   29676:	6033      	str	r3, [r6, #0]
   29678:	6823      	ldr	r3, [r4, #0]
   2967a:	0699      	lsls	r1, r3, #26
   2967c:	bf42      	ittt	mi
   2967e:	6833      	ldrmi	r3, [r6, #0]
   29680:	3302      	addmi	r3, #2
   29682:	6033      	strmi	r3, [r6, #0]
   29684:	6825      	ldr	r5, [r4, #0]
   29686:	f015 0506 	ands.w	r5, r5, #6
   2968a:	d106      	bne.n	2969a <_printf_common+0x48>
   2968c:	f104 0a19 	add.w	sl, r4, #25
   29690:	68e3      	ldr	r3, [r4, #12]
   29692:	6832      	ldr	r2, [r6, #0]
   29694:	1a9b      	subs	r3, r3, r2
   29696:	42ab      	cmp	r3, r5
   29698:	dc2b      	bgt.n	296f2 <_printf_common+0xa0>
   2969a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2969e:	6822      	ldr	r2, [r4, #0]
   296a0:	3b00      	subs	r3, #0
   296a2:	bf18      	it	ne
   296a4:	2301      	movne	r3, #1
   296a6:	0692      	lsls	r2, r2, #26
   296a8:	d430      	bmi.n	2970c <_printf_common+0xba>
   296aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   296ae:	4641      	mov	r1, r8
   296b0:	4638      	mov	r0, r7
   296b2:	47c8      	blx	r9
   296b4:	3001      	adds	r0, #1
   296b6:	d023      	beq.n	29700 <_printf_common+0xae>
   296b8:	6823      	ldr	r3, [r4, #0]
   296ba:	341a      	adds	r4, #26
   296bc:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   296c0:	f003 0306 	and.w	r3, r3, #6
   296c4:	2b04      	cmp	r3, #4
   296c6:	bf0a      	itet	eq
   296c8:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   296cc:	2500      	movne	r5, #0
   296ce:	6833      	ldreq	r3, [r6, #0]
   296d0:	f04f 0600 	mov.w	r6, #0
   296d4:	bf08      	it	eq
   296d6:	1aed      	subeq	r5, r5, r3
   296d8:	f854 3c12 	ldr.w	r3, [r4, #-18]
   296dc:	bf08      	it	eq
   296de:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   296e2:	4293      	cmp	r3, r2
   296e4:	bfc4      	itt	gt
   296e6:	1a9b      	subgt	r3, r3, r2
   296e8:	18ed      	addgt	r5, r5, r3
   296ea:	42b5      	cmp	r5, r6
   296ec:	d11a      	bne.n	29724 <_printf_common+0xd2>
   296ee:	2000      	movs	r0, #0
   296f0:	e008      	b.n	29704 <_printf_common+0xb2>
   296f2:	2301      	movs	r3, #1
   296f4:	4652      	mov	r2, sl
   296f6:	4641      	mov	r1, r8
   296f8:	4638      	mov	r0, r7
   296fa:	47c8      	blx	r9
   296fc:	3001      	adds	r0, #1
   296fe:	d103      	bne.n	29708 <_printf_common+0xb6>
   29700:	f04f 30ff 	mov.w	r0, #4294967295
   29704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29708:	3501      	adds	r5, #1
   2970a:	e7c1      	b.n	29690 <_printf_common+0x3e>
   2970c:	18e1      	adds	r1, r4, r3
   2970e:	1c5a      	adds	r2, r3, #1
   29710:	2030      	movs	r0, #48	; 0x30
   29712:	3302      	adds	r3, #2
   29714:	4422      	add	r2, r4
   29716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2971a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2971e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   29722:	e7c2      	b.n	296aa <_printf_common+0x58>
   29724:	2301      	movs	r3, #1
   29726:	4622      	mov	r2, r4
   29728:	4641      	mov	r1, r8
   2972a:	4638      	mov	r0, r7
   2972c:	47c8      	blx	r9
   2972e:	3001      	adds	r0, #1
   29730:	d0e6      	beq.n	29700 <_printf_common+0xae>
   29732:	3601      	adds	r6, #1
   29734:	e7d9      	b.n	296ea <_printf_common+0x98>

00029736 <strcpy>:
   29736:	4603      	mov	r3, r0
   29738:	f811 2b01 	ldrb.w	r2, [r1], #1
   2973c:	f803 2b01 	strb.w	r2, [r3], #1
   29740:	2a00      	cmp	r2, #0
   29742:	d1f9      	bne.n	29738 <strcpy+0x2>
   29744:	4770      	bx	lr

00029746 <strncmp>:
   29746:	b510      	push	{r4, lr}
   29748:	b16a      	cbz	r2, 29766 <strncmp+0x20>
   2974a:	3901      	subs	r1, #1
   2974c:	1884      	adds	r4, r0, r2
   2974e:	f810 2b01 	ldrb.w	r2, [r0], #1
   29752:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   29756:	429a      	cmp	r2, r3
   29758:	d103      	bne.n	29762 <strncmp+0x1c>
   2975a:	42a0      	cmp	r0, r4
   2975c:	d001      	beq.n	29762 <strncmp+0x1c>
   2975e:	2a00      	cmp	r2, #0
   29760:	d1f5      	bne.n	2974e <strncmp+0x8>
   29762:	1ad0      	subs	r0, r2, r3
   29764:	bd10      	pop	{r4, pc}
   29766:	4610      	mov	r0, r2
   29768:	e7fc      	b.n	29764 <strncmp+0x1e>

0002976a <strncpy>:
   2976a:	3901      	subs	r1, #1
   2976c:	4603      	mov	r3, r0
   2976e:	b510      	push	{r4, lr}
   29770:	b132      	cbz	r2, 29780 <strncpy+0x16>
   29772:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   29776:	3a01      	subs	r2, #1
   29778:	f803 4b01 	strb.w	r4, [r3], #1
   2977c:	2c00      	cmp	r4, #0
   2977e:	d1f7      	bne.n	29770 <strncpy+0x6>
   29780:	441a      	add	r2, r3
   29782:	2100      	movs	r1, #0
   29784:	4293      	cmp	r3, r2
   29786:	d100      	bne.n	2978a <strncpy+0x20>
   29788:	bd10      	pop	{r4, pc}
   2978a:	f803 1b01 	strb.w	r1, [r3], #1
   2978e:	e7f9      	b.n	29784 <strncpy+0x1a>

00029790 <strnlen>:
   29790:	4602      	mov	r2, r0
   29792:	4401      	add	r1, r0
   29794:	b510      	push	{r4, lr}
   29796:	428a      	cmp	r2, r1
   29798:	4613      	mov	r3, r2
   2979a:	d003      	beq.n	297a4 <strnlen+0x14>
   2979c:	781c      	ldrb	r4, [r3, #0]
   2979e:	3201      	adds	r2, #1
   297a0:	2c00      	cmp	r4, #0
   297a2:	d1f8      	bne.n	29796 <strnlen+0x6>
   297a4:	1a18      	subs	r0, r3, r0
   297a6:	bd10      	pop	{r4, pc}

000297a8 <quorem>:
   297a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297ac:	6903      	ldr	r3, [r0, #16]
   297ae:	4607      	mov	r7, r0
   297b0:	690c      	ldr	r4, [r1, #16]
   297b2:	42a3      	cmp	r3, r4
   297b4:	f2c0 8083 	blt.w	298be <quorem+0x116>
   297b8:	3c01      	subs	r4, #1
   297ba:	f100 0514 	add.w	r5, r0, #20
   297be:	f101 0814 	add.w	r8, r1, #20
   297c2:	00a3      	lsls	r3, r4, #2
   297c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   297c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   297cc:	9300      	str	r3, [sp, #0]
   297ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   297d2:	9301      	str	r3, [sp, #4]
   297d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   297d8:	3301      	adds	r3, #1
   297da:	429a      	cmp	r2, r3
   297dc:	fbb2 f6f3 	udiv	r6, r2, r3
   297e0:	d331      	bcc.n	29846 <quorem+0x9e>
   297e2:	f04f 0a00 	mov.w	sl, #0
   297e6:	46c4      	mov	ip, r8
   297e8:	46ae      	mov	lr, r5
   297ea:	46d3      	mov	fp, sl
   297ec:	f85c 3b04 	ldr.w	r3, [ip], #4
   297f0:	b298      	uxth	r0, r3
   297f2:	45e1      	cmp	r9, ip
   297f4:	ea4f 4313 	mov.w	r3, r3, lsr #16
   297f8:	fb06 a000 	mla	r0, r6, r0, sl
   297fc:	ea4f 4210 	mov.w	r2, r0, lsr #16
   29800:	b280      	uxth	r0, r0
   29802:	fb06 2303 	mla	r3, r6, r3, r2
   29806:	f8de 2000 	ldr.w	r2, [lr]
   2980a:	b292      	uxth	r2, r2
   2980c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   29810:	eba2 0200 	sub.w	r2, r2, r0
   29814:	b29b      	uxth	r3, r3
   29816:	f8de 0000 	ldr.w	r0, [lr]
   2981a:	445a      	add	r2, fp
   2981c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   29820:	b292      	uxth	r2, r2
   29822:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   29826:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2982a:	ea4f 4b23 	mov.w	fp, r3, asr #16
   2982e:	f84e 2b04 	str.w	r2, [lr], #4
   29832:	d2db      	bcs.n	297ec <quorem+0x44>
   29834:	9b00      	ldr	r3, [sp, #0]
   29836:	58eb      	ldr	r3, [r5, r3]
   29838:	b92b      	cbnz	r3, 29846 <quorem+0x9e>
   2983a:	9b01      	ldr	r3, [sp, #4]
   2983c:	3b04      	subs	r3, #4
   2983e:	429d      	cmp	r5, r3
   29840:	461a      	mov	r2, r3
   29842:	d330      	bcc.n	298a6 <quorem+0xfe>
   29844:	613c      	str	r4, [r7, #16]
   29846:	4638      	mov	r0, r7
   29848:	f000 f8cd 	bl	299e6 <__mcmp>
   2984c:	2800      	cmp	r0, #0
   2984e:	db26      	blt.n	2989e <quorem+0xf6>
   29850:	4629      	mov	r1, r5
   29852:	2000      	movs	r0, #0
   29854:	f858 2b04 	ldr.w	r2, [r8], #4
   29858:	f8d1 c000 	ldr.w	ip, [r1]
   2985c:	fa1f fe82 	uxth.w	lr, r2
   29860:	45c1      	cmp	r9, r8
   29862:	fa1f f38c 	uxth.w	r3, ip
   29866:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2986a:	eba3 030e 	sub.w	r3, r3, lr
   2986e:	4403      	add	r3, r0
   29870:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   29874:	b29b      	uxth	r3, r3
   29876:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   2987a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2987e:	ea4f 4022 	mov.w	r0, r2, asr #16
   29882:	f841 3b04 	str.w	r3, [r1], #4
   29886:	d2e5      	bcs.n	29854 <quorem+0xac>
   29888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2988c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   29890:	b922      	cbnz	r2, 2989c <quorem+0xf4>
   29892:	3b04      	subs	r3, #4
   29894:	429d      	cmp	r5, r3
   29896:	461a      	mov	r2, r3
   29898:	d30b      	bcc.n	298b2 <quorem+0x10a>
   2989a:	613c      	str	r4, [r7, #16]
   2989c:	3601      	adds	r6, #1
   2989e:	4630      	mov	r0, r6
   298a0:	b003      	add	sp, #12
   298a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298a6:	6812      	ldr	r2, [r2, #0]
   298a8:	3b04      	subs	r3, #4
   298aa:	2a00      	cmp	r2, #0
   298ac:	d1ca      	bne.n	29844 <quorem+0x9c>
   298ae:	3c01      	subs	r4, #1
   298b0:	e7c5      	b.n	2983e <quorem+0x96>
   298b2:	6812      	ldr	r2, [r2, #0]
   298b4:	3b04      	subs	r3, #4
   298b6:	2a00      	cmp	r2, #0
   298b8:	d1ef      	bne.n	2989a <quorem+0xf2>
   298ba:	3c01      	subs	r4, #1
   298bc:	e7ea      	b.n	29894 <quorem+0xec>
   298be:	2000      	movs	r0, #0
   298c0:	e7ee      	b.n	298a0 <quorem+0xf8>

000298c2 <__sfmoreglue>:
   298c2:	b570      	push	{r4, r5, r6, lr}
   298c4:	2368      	movs	r3, #104	; 0x68
   298c6:	1e4d      	subs	r5, r1, #1
   298c8:	460e      	mov	r6, r1
   298ca:	435d      	muls	r5, r3
   298cc:	f105 0174 	add.w	r1, r5, #116	; 0x74
   298d0:	f7f9 f9cc 	bl	22c6c <_malloc_r>
   298d4:	4604      	mov	r4, r0
   298d6:	b140      	cbz	r0, 298ea <__sfmoreglue+0x28>
   298d8:	2100      	movs	r1, #0
   298da:	f105 0268 	add.w	r2, r5, #104	; 0x68
   298de:	e9c0 1600 	strd	r1, r6, [r0]
   298e2:	300c      	adds	r0, #12
   298e4:	60a0      	str	r0, [r4, #8]
   298e6:	f7ff fdfe 	bl	294e6 <memset>
   298ea:	4620      	mov	r0, r4
   298ec:	bd70      	pop	{r4, r5, r6, pc}

000298ee <_fwalk_reent>:
   298ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   298f2:	4606      	mov	r6, r0
   298f4:	4688      	mov	r8, r1
   298f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
   298fa:	2700      	movs	r7, #0
   298fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   29900:	f1b9 0901 	subs.w	r9, r9, #1
   29904:	d505      	bpl.n	29912 <_fwalk_reent+0x24>
   29906:	6824      	ldr	r4, [r4, #0]
   29908:	2c00      	cmp	r4, #0
   2990a:	d1f7      	bne.n	298fc <_fwalk_reent+0xe>
   2990c:	4638      	mov	r0, r7
   2990e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29912:	89ab      	ldrh	r3, [r5, #12]
   29914:	2b01      	cmp	r3, #1
   29916:	d907      	bls.n	29928 <_fwalk_reent+0x3a>
   29918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2991c:	3301      	adds	r3, #1
   2991e:	d003      	beq.n	29928 <_fwalk_reent+0x3a>
   29920:	4629      	mov	r1, r5
   29922:	4630      	mov	r0, r6
   29924:	47c0      	blx	r8
   29926:	4307      	orrs	r7, r0
   29928:	3568      	adds	r5, #104	; 0x68
   2992a:	e7e9      	b.n	29900 <_fwalk_reent+0x12>

0002992c <memchr>:
   2992c:	b2c9      	uxtb	r1, r1
   2992e:	4603      	mov	r3, r0
   29930:	4402      	add	r2, r0
   29932:	b510      	push	{r4, lr}
   29934:	4293      	cmp	r3, r2
   29936:	4618      	mov	r0, r3
   29938:	d101      	bne.n	2993e <memchr+0x12>
   2993a:	2000      	movs	r0, #0
   2993c:	e003      	b.n	29946 <memchr+0x1a>
   2993e:	7804      	ldrb	r4, [r0, #0]
   29940:	3301      	adds	r3, #1
   29942:	428c      	cmp	r4, r1
   29944:	d1f6      	bne.n	29934 <memchr+0x8>
   29946:	bd10      	pop	{r4, pc}

00029948 <__hi0bits>:
   29948:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2994c:	4603      	mov	r3, r0
   2994e:	bf36      	itet	cc
   29950:	0403      	lslcc	r3, r0, #16
   29952:	2000      	movcs	r0, #0
   29954:	2010      	movcc	r0, #16
   29956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2995a:	bf3c      	itt	cc
   2995c:	021b      	lslcc	r3, r3, #8
   2995e:	3008      	addcc	r0, #8
   29960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   29964:	bf3c      	itt	cc
   29966:	011b      	lslcc	r3, r3, #4
   29968:	3004      	addcc	r0, #4
   2996a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2996e:	d303      	bcc.n	29978 <__hi0bits+0x30>
   29970:	2b00      	cmp	r3, #0
   29972:	db0a      	blt.n	2998a <__hi0bits+0x42>
   29974:	3001      	adds	r0, #1
   29976:	4770      	bx	lr
   29978:	009b      	lsls	r3, r3, #2
   2997a:	d501      	bpl.n	29980 <__hi0bits+0x38>
   2997c:	3002      	adds	r0, #2
   2997e:	4770      	bx	lr
   29980:	005b      	lsls	r3, r3, #1
   29982:	d501      	bpl.n	29988 <__hi0bits+0x40>
   29984:	3003      	adds	r0, #3
   29986:	4770      	bx	lr
   29988:	2020      	movs	r0, #32
   2998a:	4770      	bx	lr

0002998c <__lo0bits>:
   2998c:	6803      	ldr	r3, [r0, #0]
   2998e:	4602      	mov	r2, r0
   29990:	f013 0007 	ands.w	r0, r3, #7
   29994:	d00b      	beq.n	299ae <__lo0bits+0x22>
   29996:	07d9      	lsls	r1, r3, #31
   29998:	d421      	bmi.n	299de <__lo0bits+0x52>
   2999a:	0798      	lsls	r0, r3, #30
   2999c:	bf47      	ittee	mi
   2999e:	085b      	lsrmi	r3, r3, #1
   299a0:	2001      	movmi	r0, #1
   299a2:	089b      	lsrpl	r3, r3, #2
   299a4:	2002      	movpl	r0, #2
   299a6:	bf4c      	ite	mi
   299a8:	6013      	strmi	r3, [r2, #0]
   299aa:	6013      	strpl	r3, [r2, #0]
   299ac:	4770      	bx	lr
   299ae:	b299      	uxth	r1, r3
   299b0:	b909      	cbnz	r1, 299b6 <__lo0bits+0x2a>
   299b2:	0c1b      	lsrs	r3, r3, #16
   299b4:	2010      	movs	r0, #16
   299b6:	b2d9      	uxtb	r1, r3
   299b8:	b909      	cbnz	r1, 299be <__lo0bits+0x32>
   299ba:	3008      	adds	r0, #8
   299bc:	0a1b      	lsrs	r3, r3, #8
   299be:	0719      	lsls	r1, r3, #28
   299c0:	bf04      	itt	eq
   299c2:	091b      	lsreq	r3, r3, #4
   299c4:	3004      	addeq	r0, #4
   299c6:	0799      	lsls	r1, r3, #30
   299c8:	bf04      	itt	eq
   299ca:	089b      	lsreq	r3, r3, #2
   299cc:	3002      	addeq	r0, #2
   299ce:	07d9      	lsls	r1, r3, #31
   299d0:	d403      	bmi.n	299da <__lo0bits+0x4e>
   299d2:	085b      	lsrs	r3, r3, #1
   299d4:	f100 0001 	add.w	r0, r0, #1
   299d8:	d003      	beq.n	299e2 <__lo0bits+0x56>
   299da:	6013      	str	r3, [r2, #0]
   299dc:	4770      	bx	lr
   299de:	2000      	movs	r0, #0
   299e0:	4770      	bx	lr
   299e2:	2020      	movs	r0, #32
   299e4:	4770      	bx	lr

000299e6 <__mcmp>:
   299e6:	4603      	mov	r3, r0
   299e8:	690a      	ldr	r2, [r1, #16]
   299ea:	6900      	ldr	r0, [r0, #16]
   299ec:	1a80      	subs	r0, r0, r2
   299ee:	b530      	push	{r4, r5, lr}
   299f0:	d10e      	bne.n	29a10 <__mcmp+0x2a>
   299f2:	3314      	adds	r3, #20
   299f4:	3114      	adds	r1, #20
   299f6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   299fa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   299fe:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   29a02:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   29a06:	4295      	cmp	r5, r2
   29a08:	d003      	beq.n	29a12 <__mcmp+0x2c>
   29a0a:	d205      	bcs.n	29a18 <__mcmp+0x32>
   29a0c:	f04f 30ff 	mov.w	r0, #4294967295
   29a10:	bd30      	pop	{r4, r5, pc}
   29a12:	42a3      	cmp	r3, r4
   29a14:	d3f3      	bcc.n	299fe <__mcmp+0x18>
   29a16:	e7fb      	b.n	29a10 <__mcmp+0x2a>
   29a18:	2001      	movs	r0, #1
   29a1a:	e7f9      	b.n	29a10 <__mcmp+0x2a>

00029a1c <__sfputc_r>:
   29a1c:	6893      	ldr	r3, [r2, #8]
   29a1e:	3b01      	subs	r3, #1
   29a20:	2b00      	cmp	r3, #0
   29a22:	6093      	str	r3, [r2, #8]
   29a24:	b410      	push	{r4}
   29a26:	da07      	bge.n	29a38 <__sfputc_r+0x1c>
   29a28:	6994      	ldr	r4, [r2, #24]
   29a2a:	42a3      	cmp	r3, r4
   29a2c:	db01      	blt.n	29a32 <__sfputc_r+0x16>
   29a2e:	290a      	cmp	r1, #10
   29a30:	d102      	bne.n	29a38 <__sfputc_r+0x1c>
   29a32:	bc10      	pop	{r4}
   29a34:	f7fa ba4a 	b.w	23ecc <__swbuf_r>
   29a38:	6813      	ldr	r3, [r2, #0]
   29a3a:	1c58      	adds	r0, r3, #1
   29a3c:	6010      	str	r0, [r2, #0]
   29a3e:	4608      	mov	r0, r1
   29a40:	7019      	strb	r1, [r3, #0]
   29a42:	bc10      	pop	{r4}
   29a44:	4770      	bx	lr

00029a46 <__sfputs_r>:
   29a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a48:	4606      	mov	r6, r0
   29a4a:	460f      	mov	r7, r1
   29a4c:	4614      	mov	r4, r2
   29a4e:	18d5      	adds	r5, r2, r3
   29a50:	42ac      	cmp	r4, r5
   29a52:	d101      	bne.n	29a58 <__sfputs_r+0x12>
   29a54:	2000      	movs	r0, #0
   29a56:	e007      	b.n	29a68 <__sfputs_r+0x22>
   29a58:	463a      	mov	r2, r7
   29a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
   29a5e:	4630      	mov	r0, r6
   29a60:	f7ff ffdc 	bl	29a1c <__sfputc_r>
   29a64:	1c43      	adds	r3, r0, #1
   29a66:	d1f3      	bne.n	29a50 <__sfputs_r+0xa>
   29a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029a6a <__sread>:
   29a6a:	b510      	push	{r4, lr}
   29a6c:	460c      	mov	r4, r1
   29a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29a72:	f7fa fb99 	bl	241a8 <_read_r>
   29a76:	2800      	cmp	r0, #0
   29a78:	bfab      	itete	ge
   29a7a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   29a7c:	89a3      	ldrhlt	r3, [r4, #12]
   29a7e:	181b      	addge	r3, r3, r0
   29a80:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   29a84:	bfac      	ite	ge
   29a86:	6563      	strge	r3, [r4, #84]	; 0x54
   29a88:	81a3      	strhlt	r3, [r4, #12]
   29a8a:	bd10      	pop	{r4, pc}

00029a8c <__swrite>:
   29a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29a90:	461f      	mov	r7, r3
   29a92:	898b      	ldrh	r3, [r1, #12]
   29a94:	4605      	mov	r5, r0
   29a96:	460c      	mov	r4, r1
   29a98:	05db      	lsls	r3, r3, #23
   29a9a:	4616      	mov	r6, r2
   29a9c:	d505      	bpl.n	29aaa <__swrite+0x1e>
   29a9e:	2302      	movs	r3, #2
   29aa0:	2200      	movs	r2, #0
   29aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29aa6:	f7fa fb2d 	bl	24104 <_lseek_r>
   29aaa:	89a3      	ldrh	r3, [r4, #12]
   29aac:	4632      	mov	r2, r6
   29aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29ab2:	4628      	mov	r0, r5
   29ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   29ab8:	81a3      	strh	r3, [r4, #12]
   29aba:	463b      	mov	r3, r7
   29abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29ac0:	f7fa ba56 	b.w	23f70 <_write_r>

00029ac4 <__sseek>:
   29ac4:	b510      	push	{r4, lr}
   29ac6:	460c      	mov	r4, r1
   29ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29acc:	f7fa fb1a 	bl	24104 <_lseek_r>
   29ad0:	1c43      	adds	r3, r0, #1
   29ad2:	89a3      	ldrh	r3, [r4, #12]
   29ad4:	bf15      	itete	ne
   29ad6:	6560      	strne	r0, [r4, #84]	; 0x54
   29ad8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   29adc:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   29ae0:	81a3      	strheq	r3, [r4, #12]
   29ae2:	bf18      	it	ne
   29ae4:	81a3      	strhne	r3, [r4, #12]
   29ae6:	bd10      	pop	{r4, pc}

00029ae8 <__sclose>:
   29ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29aec:	f7fa babe 	b.w	2406c <_close_r>

00029af0 <abort>:
   29af0:	2006      	movs	r0, #6
   29af2:	b508      	push	{r3, lr}
   29af4:	f7fa fb6a 	bl	241cc <raise>
   29af8:	2001      	movs	r0, #1
   29afa:	f7e7 f8c7 	bl	10c8c <_exit>

00029afe <__sflush_r>:
   29afe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   29b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29b04:	0717      	lsls	r7, r2, #28
   29b06:	4605      	mov	r5, r0
   29b08:	460c      	mov	r4, r1
   29b0a:	d456      	bmi.n	29bba <__sflush_r+0xbc>
   29b0c:	684b      	ldr	r3, [r1, #4]
   29b0e:	2b00      	cmp	r3, #0
   29b10:	dc02      	bgt.n	29b18 <__sflush_r+0x1a>
   29b12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   29b14:	2b00      	cmp	r3, #0
   29b16:	dd3d      	ble.n	29b94 <__sflush_r+0x96>
   29b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   29b1a:	2e00      	cmp	r6, #0
   29b1c:	d03a      	beq.n	29b94 <__sflush_r+0x96>
   29b1e:	2300      	movs	r3, #0
   29b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   29b24:	682f      	ldr	r7, [r5, #0]
   29b26:	6a21      	ldr	r1, [r4, #32]
   29b28:	602b      	str	r3, [r5, #0]
   29b2a:	d025      	beq.n	29b78 <__sflush_r+0x7a>
   29b2c:	6d62      	ldr	r2, [r4, #84]	; 0x54
   29b2e:	89a3      	ldrh	r3, [r4, #12]
   29b30:	0758      	lsls	r0, r3, #29
   29b32:	d505      	bpl.n	29b40 <__sflush_r+0x42>
   29b34:	6863      	ldr	r3, [r4, #4]
   29b36:	1ad2      	subs	r2, r2, r3
   29b38:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29b3a:	b10b      	cbz	r3, 29b40 <__sflush_r+0x42>
   29b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   29b3e:	1ad2      	subs	r2, r2, r3
   29b40:	6a21      	ldr	r1, [r4, #32]
   29b42:	2300      	movs	r3, #0
   29b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   29b46:	4628      	mov	r0, r5
   29b48:	47b0      	blx	r6
   29b4a:	1c41      	adds	r1, r0, #1
   29b4c:	d024      	beq.n	29b98 <__sflush_r+0x9a>
   29b4e:	2300      	movs	r3, #0
   29b50:	6063      	str	r3, [r4, #4]
   29b52:	6923      	ldr	r3, [r4, #16]
   29b54:	6023      	str	r3, [r4, #0]
   29b56:	89a3      	ldrh	r3, [r4, #12]
   29b58:	04da      	lsls	r2, r3, #19
   29b5a:	d500      	bpl.n	29b5e <__sflush_r+0x60>
   29b5c:	6560      	str	r0, [r4, #84]	; 0x54
   29b5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   29b60:	602f      	str	r7, [r5, #0]
   29b62:	b1b9      	cbz	r1, 29b94 <__sflush_r+0x96>
   29b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29b68:	4299      	cmp	r1, r3
   29b6a:	d002      	beq.n	29b72 <__sflush_r+0x74>
   29b6c:	4628      	mov	r0, r5
   29b6e:	f7f9 f833 	bl	22bd8 <_free_r>
   29b72:	2300      	movs	r3, #0
   29b74:	6363      	str	r3, [r4, #52]	; 0x34
   29b76:	e00d      	b.n	29b94 <__sflush_r+0x96>
   29b78:	2301      	movs	r3, #1
   29b7a:	4628      	mov	r0, r5
   29b7c:	47b0      	blx	r6
   29b7e:	1c46      	adds	r6, r0, #1
   29b80:	4602      	mov	r2, r0
   29b82:	d1d4      	bne.n	29b2e <__sflush_r+0x30>
   29b84:	682b      	ldr	r3, [r5, #0]
   29b86:	2b00      	cmp	r3, #0
   29b88:	d0d1      	beq.n	29b2e <__sflush_r+0x30>
   29b8a:	2b1d      	cmp	r3, #29
   29b8c:	d001      	beq.n	29b92 <__sflush_r+0x94>
   29b8e:	2b16      	cmp	r3, #22
   29b90:	d129      	bne.n	29be6 <__sflush_r+0xe8>
   29b92:	602f      	str	r7, [r5, #0]
   29b94:	2000      	movs	r0, #0
   29b96:	e02d      	b.n	29bf4 <__sflush_r+0xf6>
   29b98:	682a      	ldr	r2, [r5, #0]
   29b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29b9e:	b142      	cbz	r2, 29bb2 <__sflush_r+0xb4>
   29ba0:	2a1d      	cmp	r2, #29
   29ba2:	d001      	beq.n	29ba8 <__sflush_r+0xaa>
   29ba4:	2a16      	cmp	r2, #22
   29ba6:	d120      	bne.n	29bea <__sflush_r+0xec>
   29ba8:	2300      	movs	r3, #0
   29baa:	6063      	str	r3, [r4, #4]
   29bac:	6923      	ldr	r3, [r4, #16]
   29bae:	6023      	str	r3, [r4, #0]
   29bb0:	e7d5      	b.n	29b5e <__sflush_r+0x60>
   29bb2:	6062      	str	r2, [r4, #4]
   29bb4:	6922      	ldr	r2, [r4, #16]
   29bb6:	6022      	str	r2, [r4, #0]
   29bb8:	e7ce      	b.n	29b58 <__sflush_r+0x5a>
   29bba:	690f      	ldr	r7, [r1, #16]
   29bbc:	2f00      	cmp	r7, #0
   29bbe:	d0e9      	beq.n	29b94 <__sflush_r+0x96>
   29bc0:	0793      	lsls	r3, r2, #30
   29bc2:	680e      	ldr	r6, [r1, #0]
   29bc4:	600f      	str	r7, [r1, #0]
   29bc6:	bf0c      	ite	eq
   29bc8:	694b      	ldreq	r3, [r1, #20]
   29bca:	2300      	movne	r3, #0
   29bcc:	1bf6      	subs	r6, r6, r7
   29bce:	608b      	str	r3, [r1, #8]
   29bd0:	2e00      	cmp	r6, #0
   29bd2:	dddf      	ble.n	29b94 <__sflush_r+0x96>
   29bd4:	4633      	mov	r3, r6
   29bd6:	463a      	mov	r2, r7
   29bd8:	6a21      	ldr	r1, [r4, #32]
   29bda:	4628      	mov	r0, r5
   29bdc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   29be0:	47e0      	blx	ip
   29be2:	2800      	cmp	r0, #0
   29be4:	dc07      	bgt.n	29bf6 <__sflush_r+0xf8>
   29be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29bee:	f04f 30ff 	mov.w	r0, #4294967295
   29bf2:	81a3      	strh	r3, [r4, #12]
   29bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29bf6:	4407      	add	r7, r0
   29bf8:	1a36      	subs	r6, r6, r0
   29bfa:	e7e9      	b.n	29bd0 <__sflush_r+0xd2>

00029bfc <__swhatbuf_r>:
   29bfc:	b570      	push	{r4, r5, r6, lr}
   29bfe:	460c      	mov	r4, r1
   29c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   29c04:	b096      	sub	sp, #88	; 0x58
   29c06:	4615      	mov	r5, r2
   29c08:	2900      	cmp	r1, #0
   29c0a:	461e      	mov	r6, r3
   29c0c:	da0c      	bge.n	29c28 <__swhatbuf_r+0x2c>
   29c0e:	89a3      	ldrh	r3, [r4, #12]
   29c10:	2100      	movs	r1, #0
   29c12:	f013 0f80 	tst.w	r3, #128	; 0x80
   29c16:	bf14      	ite	ne
   29c18:	2340      	movne	r3, #64	; 0x40
   29c1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   29c1e:	2000      	movs	r0, #0
   29c20:	6031      	str	r1, [r6, #0]
   29c22:	602b      	str	r3, [r5, #0]
   29c24:	b016      	add	sp, #88	; 0x58
   29c26:	bd70      	pop	{r4, r5, r6, pc}
   29c28:	466a      	mov	r2, sp
   29c2a:	f7fa fae9 	bl	24200 <_fstat_r>
   29c2e:	2800      	cmp	r0, #0
   29c30:	dbed      	blt.n	29c0e <__swhatbuf_r+0x12>
   29c32:	9901      	ldr	r1, [sp, #4]
   29c34:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   29c38:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   29c3c:	4259      	negs	r1, r3
   29c3e:	4159      	adcs	r1, r3
   29c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
   29c44:	e7eb      	b.n	29c1e <__swhatbuf_r+0x22>

00029c46 <__ascii_mbtowc>:
   29c46:	b082      	sub	sp, #8
   29c48:	b901      	cbnz	r1, 29c4c <__ascii_mbtowc+0x6>
   29c4a:	a901      	add	r1, sp, #4
   29c4c:	b142      	cbz	r2, 29c60 <__ascii_mbtowc+0x1a>
   29c4e:	b14b      	cbz	r3, 29c64 <__ascii_mbtowc+0x1e>
   29c50:	7813      	ldrb	r3, [r2, #0]
   29c52:	600b      	str	r3, [r1, #0]
   29c54:	7812      	ldrb	r2, [r2, #0]
   29c56:	1e10      	subs	r0, r2, #0
   29c58:	bf18      	it	ne
   29c5a:	2001      	movne	r0, #1
   29c5c:	b002      	add	sp, #8
   29c5e:	4770      	bx	lr
   29c60:	4610      	mov	r0, r2
   29c62:	e7fb      	b.n	29c5c <__ascii_mbtowc+0x16>
   29c64:	f06f 0001 	mvn.w	r0, #1
   29c68:	e7f8      	b.n	29c5c <__ascii_mbtowc+0x16>

00029c6a <_raise_r>:
   29c6a:	291f      	cmp	r1, #31
   29c6c:	b538      	push	{r3, r4, r5, lr}
   29c6e:	4605      	mov	r5, r0
   29c70:	460c      	mov	r4, r1
   29c72:	d904      	bls.n	29c7e <_raise_r+0x14>
   29c74:	2316      	movs	r3, #22
   29c76:	6003      	str	r3, [r0, #0]
   29c78:	f04f 30ff 	mov.w	r0, #4294967295
   29c7c:	bd38      	pop	{r3, r4, r5, pc}
   29c7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   29c80:	b112      	cbz	r2, 29c88 <_raise_r+0x1e>
   29c82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   29c86:	b94b      	cbnz	r3, 29c9c <_raise_r+0x32>
   29c88:	4628      	mov	r0, r5
   29c8a:	f000 f816 	bl	29cba <_getpid_r>
   29c8e:	4622      	mov	r2, r4
   29c90:	4601      	mov	r1, r0
   29c92:	4628      	mov	r0, r5
   29c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29c98:	f7fa baa0 	b.w	241dc <_kill_r>
   29c9c:	2b01      	cmp	r3, #1
   29c9e:	d00a      	beq.n	29cb6 <_raise_r+0x4c>
   29ca0:	1c59      	adds	r1, r3, #1
   29ca2:	d103      	bne.n	29cac <_raise_r+0x42>
   29ca4:	2316      	movs	r3, #22
   29ca6:	6003      	str	r3, [r0, #0]
   29ca8:	2001      	movs	r0, #1
   29caa:	e7e7      	b.n	29c7c <_raise_r+0x12>
   29cac:	2100      	movs	r1, #0
   29cae:	4620      	mov	r0, r4
   29cb0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   29cb4:	4798      	blx	r3
   29cb6:	2000      	movs	r0, #0
   29cb8:	e7e0      	b.n	29c7c <_raise_r+0x12>

00029cba <_getpid_r>:
   29cba:	f7fb bf22 	b.w	25b02 <_getpid>

00029cbe <__ascii_wctomb>:
   29cbe:	4603      	mov	r3, r0
   29cc0:	4608      	mov	r0, r1
   29cc2:	b141      	cbz	r1, 29cd6 <__ascii_wctomb+0x18>
   29cc4:	2aff      	cmp	r2, #255	; 0xff
   29cc6:	d904      	bls.n	29cd2 <__ascii_wctomb+0x14>
   29cc8:	228a      	movs	r2, #138	; 0x8a
   29cca:	f04f 30ff 	mov.w	r0, #4294967295
   29cce:	601a      	str	r2, [r3, #0]
   29cd0:	4770      	bx	lr
   29cd2:	2001      	movs	r0, #1
   29cd4:	700a      	strb	r2, [r1, #0]
   29cd6:	4770      	bx	lr
