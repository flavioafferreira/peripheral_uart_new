
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	18 30 03 20 f5 fc 00 00 ed 4d 02 00 c9 fc 00 00     .0. .....M......
    8010:	c9 fc 00 00 c9 fc 00 00 c9 fc 00 00 c9 fc 00 00     ................
	...
    802c:	ad f5 00 00 c9 fc 00 00 00 00 00 00 4d f5 00 00     ............M...
    803c:	c9 fc 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8050:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8060:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8070:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8080:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8090:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    80a0:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    80b0:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    80c0:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    80d0:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    80e0:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    80f0:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8100:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8110:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8120:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8130:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8140:	35 f6 00 00 35 f6 00 00 35 f6 00 00 35 f6 00 00     5...5...5...5...
    8150:	35 f6 00 00                                         5...

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2f>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88fc:	bf24      	itt	cs
    88fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8906:	d90d      	bls.n	8924 <__aeabi_d2f+0x30>
    8908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    890c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    891c:	bf08      	it	eq
    891e:	f020 0001 	biceq.w	r0, r0, #1
    8922:	4770      	bx	lr
    8924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8928:	d121      	bne.n	896e <__aeabi_d2f+0x7a>
    892a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    892e:	bfbc      	itt	lt
    8930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8934:	4770      	bxlt	lr
    8936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    893a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    893e:	f1c2 0218 	rsb	r2, r2, #24
    8942:	f1c2 0c20 	rsb	ip, r2, #32
    8946:	fa10 f30c 	lsls.w	r3, r0, ip
    894a:	fa20 f002 	lsr.w	r0, r0, r2
    894e:	bf18      	it	ne
    8950:	f040 0001 	orrne.w	r0, r0, #1
    8954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    895c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8960:	ea40 000c 	orr.w	r0, r0, ip
    8964:	fa23 f302 	lsr.w	r3, r3, r2
    8968:	ea4f 0343 	mov.w	r3, r3, lsl #1
    896c:	e7cc      	b.n	8908 <__aeabi_d2f+0x14>
    896e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8972:	d107      	bne.n	8984 <__aeabi_d2f+0x90>
    8974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8978:	bf1e      	ittt	ne
    897a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    897e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8982:	4770      	bxne	lr
    8984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    898c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8990:	4770      	bx	lr
    8992:	bf00      	nop

00008994 <__aeabi_frsub>:
    8994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8998:	e002      	b.n	89a0 <__addsf3>
    899a:	bf00      	nop

0000899c <__aeabi_fsub>:
    899c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089a0 <__addsf3>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	bf1f      	itttt	ne
    89a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89a8:	ea92 0f03 	teqne	r2, r3
    89ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    89b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b4:	d06a      	beq.n	8a8c <__addsf3+0xec>
    89b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    89ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    89be:	bfc1      	itttt	gt
    89c0:	18d2      	addgt	r2, r2, r3
    89c2:	4041      	eorgt	r1, r0
    89c4:	4048      	eorgt	r0, r1
    89c6:	4041      	eorgt	r1, r0
    89c8:	bfb8      	it	lt
    89ca:	425b      	neglt	r3, r3
    89cc:	2b19      	cmp	r3, #25
    89ce:	bf88      	it	hi
    89d0:	4770      	bxhi	lr
    89d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    89d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89de:	bf18      	it	ne
    89e0:	4240      	negne	r0, r0
    89e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    89e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    89ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    89ee:	bf18      	it	ne
    89f0:	4249      	negne	r1, r1
    89f2:	ea92 0f03 	teq	r2, r3
    89f6:	d03f      	beq.n	8a78 <__addsf3+0xd8>
    89f8:	f1a2 0201 	sub.w	r2, r2, #1
    89fc:	fa41 fc03 	asr.w	ip, r1, r3
    8a00:	eb10 000c 	adds.w	r0, r0, ip
    8a04:	f1c3 0320 	rsb	r3, r3, #32
    8a08:	fa01 f103 	lsl.w	r1, r1, r3
    8a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a10:	d502      	bpl.n	8a18 <__addsf3+0x78>
    8a12:	4249      	negs	r1, r1
    8a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a1c:	d313      	bcc.n	8a46 <__addsf3+0xa6>
    8a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a22:	d306      	bcc.n	8a32 <__addsf3+0x92>
    8a24:	0840      	lsrs	r0, r0, #1
    8a26:	ea4f 0131 	mov.w	r1, r1, rrx
    8a2a:	f102 0201 	add.w	r2, r2, #1
    8a2e:	2afe      	cmp	r2, #254	; 0xfe
    8a30:	d251      	bcs.n	8ad6 <__addsf3+0x136>
    8a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a3a:	bf08      	it	eq
    8a3c:	f020 0001 	biceq.w	r0, r0, #1
    8a40:	ea40 0003 	orr.w	r0, r0, r3
    8a44:	4770      	bx	lr
    8a46:	0049      	lsls	r1, r1, #1
    8a48:	eb40 0000 	adc.w	r0, r0, r0
    8a4c:	3a01      	subs	r2, #1
    8a4e:	bf28      	it	cs
    8a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8a54:	d2ed      	bcs.n	8a32 <__addsf3+0x92>
    8a56:	fab0 fc80 	clz	ip, r0
    8a5a:	f1ac 0c08 	sub.w	ip, ip, #8
    8a5e:	ebb2 020c 	subs.w	r2, r2, ip
    8a62:	fa00 f00c 	lsl.w	r0, r0, ip
    8a66:	bfaa      	itet	ge
    8a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8a6c:	4252      	neglt	r2, r2
    8a6e:	4318      	orrge	r0, r3
    8a70:	bfbc      	itt	lt
    8a72:	40d0      	lsrlt	r0, r2
    8a74:	4318      	orrlt	r0, r3
    8a76:	4770      	bx	lr
    8a78:	f092 0f00 	teq	r2, #0
    8a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8a80:	bf06      	itte	eq
    8a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8a86:	3201      	addeq	r2, #1
    8a88:	3b01      	subne	r3, #1
    8a8a:	e7b5      	b.n	89f8 <__addsf3+0x58>
    8a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8a94:	bf18      	it	ne
    8a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a9a:	d021      	beq.n	8ae0 <__addsf3+0x140>
    8a9c:	ea92 0f03 	teq	r2, r3
    8aa0:	d004      	beq.n	8aac <__addsf3+0x10c>
    8aa2:	f092 0f00 	teq	r2, #0
    8aa6:	bf08      	it	eq
    8aa8:	4608      	moveq	r0, r1
    8aaa:	4770      	bx	lr
    8aac:	ea90 0f01 	teq	r0, r1
    8ab0:	bf1c      	itt	ne
    8ab2:	2000      	movne	r0, #0
    8ab4:	4770      	bxne	lr
    8ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8aba:	d104      	bne.n	8ac6 <__addsf3+0x126>
    8abc:	0040      	lsls	r0, r0, #1
    8abe:	bf28      	it	cs
    8ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ac4:	4770      	bx	lr
    8ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8aca:	bf3c      	itt	cc
    8acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8ad0:	4770      	bxcc	lr
    8ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ade:	4770      	bx	lr
    8ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8ae4:	bf16      	itet	ne
    8ae6:	4608      	movne	r0, r1
    8ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8aec:	4601      	movne	r1, r0
    8aee:	0242      	lsls	r2, r0, #9
    8af0:	bf06      	itte	eq
    8af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8af6:	ea90 0f01 	teqeq	r0, r1
    8afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8afe:	4770      	bx	lr

00008b00 <__aeabi_ui2f>:
    8b00:	f04f 0300 	mov.w	r3, #0
    8b04:	e004      	b.n	8b10 <__aeabi_i2f+0x8>
    8b06:	bf00      	nop

00008b08 <__aeabi_i2f>:
    8b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b0c:	bf48      	it	mi
    8b0e:	4240      	negmi	r0, r0
    8b10:	ea5f 0c00 	movs.w	ip, r0
    8b14:	bf08      	it	eq
    8b16:	4770      	bxeq	lr
    8b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b1c:	4601      	mov	r1, r0
    8b1e:	f04f 0000 	mov.w	r0, #0
    8b22:	e01c      	b.n	8b5e <__aeabi_l2f+0x2a>

00008b24 <__aeabi_ul2f>:
    8b24:	ea50 0201 	orrs.w	r2, r0, r1
    8b28:	bf08      	it	eq
    8b2a:	4770      	bxeq	lr
    8b2c:	f04f 0300 	mov.w	r3, #0
    8b30:	e00a      	b.n	8b48 <__aeabi_l2f+0x14>
    8b32:	bf00      	nop

00008b34 <__aeabi_l2f>:
    8b34:	ea50 0201 	orrs.w	r2, r0, r1
    8b38:	bf08      	it	eq
    8b3a:	4770      	bxeq	lr
    8b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b40:	d502      	bpl.n	8b48 <__aeabi_l2f+0x14>
    8b42:	4240      	negs	r0, r0
    8b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b48:	ea5f 0c01 	movs.w	ip, r1
    8b4c:	bf02      	ittt	eq
    8b4e:	4684      	moveq	ip, r0
    8b50:	4601      	moveq	r1, r0
    8b52:	2000      	moveq	r0, #0
    8b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8b58:	bf08      	it	eq
    8b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8b62:	fabc f28c 	clz	r2, ip
    8b66:	3a08      	subs	r2, #8
    8b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8b6c:	db10      	blt.n	8b90 <__aeabi_l2f+0x5c>
    8b6e:	fa01 fc02 	lsl.w	ip, r1, r2
    8b72:	4463      	add	r3, ip
    8b74:	fa00 fc02 	lsl.w	ip, r0, r2
    8b78:	f1c2 0220 	rsb	r2, r2, #32
    8b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8b80:	fa20 f202 	lsr.w	r2, r0, r2
    8b84:	eb43 0002 	adc.w	r0, r3, r2
    8b88:	bf08      	it	eq
    8b8a:	f020 0001 	biceq.w	r0, r0, #1
    8b8e:	4770      	bx	lr
    8b90:	f102 0220 	add.w	r2, r2, #32
    8b94:	fa01 fc02 	lsl.w	ip, r1, r2
    8b98:	f1c2 0220 	rsb	r2, r2, #32
    8b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8ba0:	fa21 f202 	lsr.w	r2, r1, r2
    8ba4:	eb43 0002 	adc.w	r0, r3, r2
    8ba8:	bf08      	it	eq
    8baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bae:	4770      	bx	lr

00008bb0 <__aeabi_fmul>:
    8bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8bb8:	bf1e      	ittt	ne
    8bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8bbe:	ea92 0f0c 	teqne	r2, ip
    8bc2:	ea93 0f0c 	teqne	r3, ip
    8bc6:	d06f      	beq.n	8ca8 <__aeabi_fmul+0xf8>
    8bc8:	441a      	add	r2, r3
    8bca:	ea80 0c01 	eor.w	ip, r0, r1
    8bce:	0240      	lsls	r0, r0, #9
    8bd0:	bf18      	it	ne
    8bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8bd6:	d01e      	beq.n	8c16 <__aeabi_fmul+0x66>
    8bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8be4:	fba0 3101 	umull	r3, r1, r0, r1
    8be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8bf0:	bf3e      	ittt	cc
    8bf2:	0049      	lslcc	r1, r1, #1
    8bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8bf8:	005b      	lslcc	r3, r3, #1
    8bfa:	ea40 0001 	orr.w	r0, r0, r1
    8bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c02:	2afd      	cmp	r2, #253	; 0xfd
    8c04:	d81d      	bhi.n	8c42 <__aeabi_fmul+0x92>
    8c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c0e:	bf08      	it	eq
    8c10:	f020 0001 	biceq.w	r0, r0, #1
    8c14:	4770      	bx	lr
    8c16:	f090 0f00 	teq	r0, #0
    8c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c1e:	bf08      	it	eq
    8c20:	0249      	lsleq	r1, r1, #9
    8c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c2a:	3a7f      	subs	r2, #127	; 0x7f
    8c2c:	bfc2      	ittt	gt
    8c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c36:	4770      	bxgt	lr
    8c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	3a01      	subs	r2, #1
    8c42:	dc5d      	bgt.n	8d00 <__aeabi_fmul+0x150>
    8c44:	f112 0f19 	cmn.w	r2, #25
    8c48:	bfdc      	itt	le
    8c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c4e:	4770      	bxle	lr
    8c50:	f1c2 0200 	rsb	r2, r2, #0
    8c54:	0041      	lsls	r1, r0, #1
    8c56:	fa21 f102 	lsr.w	r1, r1, r2
    8c5a:	f1c2 0220 	rsb	r2, r2, #32
    8c5e:	fa00 fc02 	lsl.w	ip, r0, r2
    8c62:	ea5f 0031 	movs.w	r0, r1, rrx
    8c66:	f140 0000 	adc.w	r0, r0, #0
    8c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8c6e:	bf08      	it	eq
    8c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8c74:	4770      	bx	lr
    8c76:	f092 0f00 	teq	r2, #0
    8c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8c7e:	bf02      	ittt	eq
    8c80:	0040      	lsleq	r0, r0, #1
    8c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8c86:	3a01      	subeq	r2, #1
    8c88:	d0f9      	beq.n	8c7e <__aeabi_fmul+0xce>
    8c8a:	ea40 000c 	orr.w	r0, r0, ip
    8c8e:	f093 0f00 	teq	r3, #0
    8c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8c96:	bf02      	ittt	eq
    8c98:	0049      	lsleq	r1, r1, #1
    8c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8c9e:	3b01      	subeq	r3, #1
    8ca0:	d0f9      	beq.n	8c96 <__aeabi_fmul+0xe6>
    8ca2:	ea41 010c 	orr.w	r1, r1, ip
    8ca6:	e78f      	b.n	8bc8 <__aeabi_fmul+0x18>
    8ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cac:	ea92 0f0c 	teq	r2, ip
    8cb0:	bf18      	it	ne
    8cb2:	ea93 0f0c 	teqne	r3, ip
    8cb6:	d00a      	beq.n	8cce <__aeabi_fmul+0x11e>
    8cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8cbc:	bf18      	it	ne
    8cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8cc2:	d1d8      	bne.n	8c76 <__aeabi_fmul+0xc6>
    8cc4:	ea80 0001 	eor.w	r0, r0, r1
    8cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ccc:	4770      	bx	lr
    8cce:	f090 0f00 	teq	r0, #0
    8cd2:	bf17      	itett	ne
    8cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8cd8:	4608      	moveq	r0, r1
    8cda:	f091 0f00 	teqne	r1, #0
    8cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8ce2:	d014      	beq.n	8d0e <__aeabi_fmul+0x15e>
    8ce4:	ea92 0f0c 	teq	r2, ip
    8ce8:	d101      	bne.n	8cee <__aeabi_fmul+0x13e>
    8cea:	0242      	lsls	r2, r0, #9
    8cec:	d10f      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cee:	ea93 0f0c 	teq	r3, ip
    8cf2:	d103      	bne.n	8cfc <__aeabi_fmul+0x14c>
    8cf4:	024b      	lsls	r3, r1, #9
    8cf6:	bf18      	it	ne
    8cf8:	4608      	movne	r0, r1
    8cfa:	d108      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cfc:	ea80 0001 	eor.w	r0, r0, r1
    8d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d0c:	4770      	bx	lr
    8d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d16:	4770      	bx	lr

00008d18 <__aeabi_fdiv>:
    8d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d20:	bf1e      	ittt	ne
    8d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d26:	ea92 0f0c 	teqne	r2, ip
    8d2a:	ea93 0f0c 	teqne	r3, ip
    8d2e:	d069      	beq.n	8e04 <__aeabi_fdiv+0xec>
    8d30:	eba2 0203 	sub.w	r2, r2, r3
    8d34:	ea80 0c01 	eor.w	ip, r0, r1
    8d38:	0249      	lsls	r1, r1, #9
    8d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d3e:	d037      	beq.n	8db0 <__aeabi_fdiv+0x98>
    8d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8d50:	428b      	cmp	r3, r1
    8d52:	bf38      	it	cc
    8d54:	005b      	lslcc	r3, r3, #1
    8d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8d5e:	428b      	cmp	r3, r1
    8d60:	bf24      	itt	cs
    8d62:	1a5b      	subcs	r3, r3, r1
    8d64:	ea40 000c 	orrcs.w	r0, r0, ip
    8d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8d6c:	bf24      	itt	cs
    8d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8d7a:	bf24      	itt	cs
    8d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8d88:	bf24      	itt	cs
    8d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	bf18      	it	ne
    8d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8d9a:	d1e0      	bne.n	8d5e <__aeabi_fdiv+0x46>
    8d9c:	2afd      	cmp	r2, #253	; 0xfd
    8d9e:	f63f af50 	bhi.w	8c42 <__aeabi_fmul+0x92>
    8da2:	428b      	cmp	r3, r1
    8da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8da8:	bf08      	it	eq
    8daa:	f020 0001 	biceq.w	r0, r0, #1
    8dae:	4770      	bx	lr
    8db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	bfc2      	ittt	gt
    8dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8dc4:	4770      	bxgt	lr
    8dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dca:	f04f 0300 	mov.w	r3, #0
    8dce:	3a01      	subs	r2, #1
    8dd0:	e737      	b.n	8c42 <__aeabi_fmul+0x92>
    8dd2:	f092 0f00 	teq	r2, #0
    8dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8dda:	bf02      	ittt	eq
    8ddc:	0040      	lsleq	r0, r0, #1
    8dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8de2:	3a01      	subeq	r2, #1
    8de4:	d0f9      	beq.n	8dda <__aeabi_fdiv+0xc2>
    8de6:	ea40 000c 	orr.w	r0, r0, ip
    8dea:	f093 0f00 	teq	r3, #0
    8dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8df2:	bf02      	ittt	eq
    8df4:	0049      	lsleq	r1, r1, #1
    8df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dfa:	3b01      	subeq	r3, #1
    8dfc:	d0f9      	beq.n	8df2 <__aeabi_fdiv+0xda>
    8dfe:	ea41 010c 	orr.w	r1, r1, ip
    8e02:	e795      	b.n	8d30 <__aeabi_fdiv+0x18>
    8e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e08:	ea92 0f0c 	teq	r2, ip
    8e0c:	d108      	bne.n	8e20 <__aeabi_fdiv+0x108>
    8e0e:	0242      	lsls	r2, r0, #9
    8e10:	f47f af7d 	bne.w	8d0e <__aeabi_fmul+0x15e>
    8e14:	ea93 0f0c 	teq	r3, ip
    8e18:	f47f af70 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e1c:	4608      	mov	r0, r1
    8e1e:	e776      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e20:	ea93 0f0c 	teq	r3, ip
    8e24:	d104      	bne.n	8e30 <__aeabi_fdiv+0x118>
    8e26:	024b      	lsls	r3, r1, #9
    8e28:	f43f af4c 	beq.w	8cc4 <__aeabi_fmul+0x114>
    8e2c:	4608      	mov	r0, r1
    8e2e:	e76e      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e34:	bf18      	it	ne
    8e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e3a:	d1ca      	bne.n	8dd2 <__aeabi_fdiv+0xba>
    8e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e40:	f47f af5c 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e48:	f47f af3c 	bne.w	8cc4 <__aeabi_fmul+0x114>
    8e4c:	e75f      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e4e:	bf00      	nop

00008e50 <__aeabi_ldivmod>:
    8e50:	b97b      	cbnz	r3, 8e72 <__aeabi_ldivmod+0x22>
    8e52:	b972      	cbnz	r2, 8e72 <__aeabi_ldivmod+0x22>
    8e54:	2900      	cmp	r1, #0
    8e56:	bfbe      	ittt	lt
    8e58:	2000      	movlt	r0, #0
    8e5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8e5e:	e006      	blt.n	8e6e <__aeabi_ldivmod+0x1e>
    8e60:	bf08      	it	eq
    8e62:	2800      	cmpeq	r0, #0
    8e64:	bf1c      	itt	ne
    8e66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8e6a:	f04f 30ff 	movne.w	r0, #4294967295
    8e6e:	f000 b857 	b.w	8f20 <__aeabi_idiv0>
    8e72:	f1ad 0c08 	sub.w	ip, sp, #8
    8e76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8e7a:	2900      	cmp	r1, #0
    8e7c:	db09      	blt.n	8e92 <__aeabi_ldivmod+0x42>
    8e7e:	2b00      	cmp	r3, #0
    8e80:	db1a      	blt.n	8eb8 <__aeabi_ldivmod+0x68>
    8e82:	f000 f915 	bl	90b0 <__udivmoddi4>
    8e86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8e8e:	b004      	add	sp, #16
    8e90:	4770      	bx	lr
    8e92:	4240      	negs	r0, r0
    8e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e98:	2b00      	cmp	r3, #0
    8e9a:	db1b      	blt.n	8ed4 <__aeabi_ldivmod+0x84>
    8e9c:	f000 f908 	bl	90b0 <__udivmoddi4>
    8ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ea8:	b004      	add	sp, #16
    8eaa:	4240      	negs	r0, r0
    8eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8eb0:	4252      	negs	r2, r2
    8eb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eb6:	4770      	bx	lr
    8eb8:	4252      	negs	r2, r2
    8eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ebe:	f000 f8f7 	bl	90b0 <__udivmoddi4>
    8ec2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8eca:	b004      	add	sp, #16
    8ecc:	4240      	negs	r0, r0
    8ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ed2:	4770      	bx	lr
    8ed4:	4252      	negs	r2, r2
    8ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eda:	f000 f8e9 	bl	90b0 <__udivmoddi4>
    8ede:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ee6:	b004      	add	sp, #16
    8ee8:	4252      	negs	r2, r2
    8eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eee:	4770      	bx	lr

00008ef0 <__aeabi_uldivmod>:
    8ef0:	b953      	cbnz	r3, 8f08 <__aeabi_uldivmod+0x18>
    8ef2:	b94a      	cbnz	r2, 8f08 <__aeabi_uldivmod+0x18>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	bf08      	it	eq
    8ef8:	2800      	cmpeq	r0, #0
    8efa:	bf1c      	itt	ne
    8efc:	f04f 31ff 	movne.w	r1, #4294967295
    8f00:	f04f 30ff 	movne.w	r0, #4294967295
    8f04:	f000 b80c 	b.w	8f20 <__aeabi_idiv0>
    8f08:	f1ad 0c08 	sub.w	ip, sp, #8
    8f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f10:	f000 f8ce 	bl	90b0 <__udivmoddi4>
    8f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1c:	b004      	add	sp, #16
    8f1e:	4770      	bx	lr

00008f20 <__aeabi_idiv0>:
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop

00008f24 <__gedf2>:
    8f24:	f04f 3cff 	mov.w	ip, #4294967295
    8f28:	e006      	b.n	8f38 <__cmpdf2+0x4>
    8f2a:	bf00      	nop

00008f2c <__ledf2>:
    8f2c:	f04f 0c01 	mov.w	ip, #1
    8f30:	e002      	b.n	8f38 <__cmpdf2+0x4>
    8f32:	bf00      	nop

00008f34 <__cmpdf2>:
    8f34:	f04f 0c01 	mov.w	ip, #1
    8f38:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f48:	bf18      	it	ne
    8f4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f4e:	d01b      	beq.n	8f88 <__cmpdf2+0x54>
    8f50:	b001      	add	sp, #4
    8f52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f56:	bf0c      	ite	eq
    8f58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f5c:	ea91 0f03 	teqne	r1, r3
    8f60:	bf02      	ittt	eq
    8f62:	ea90 0f02 	teqeq	r0, r2
    8f66:	2000      	moveq	r0, #0
    8f68:	4770      	bxeq	lr
    8f6a:	f110 0f00 	cmn.w	r0, #0
    8f6e:	ea91 0f03 	teq	r1, r3
    8f72:	bf58      	it	pl
    8f74:	4299      	cmppl	r1, r3
    8f76:	bf08      	it	eq
    8f78:	4290      	cmpeq	r0, r2
    8f7a:	bf2c      	ite	cs
    8f7c:	17d8      	asrcs	r0, r3, #31
    8f7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8f82:	f040 0001 	orr.w	r0, r0, #1
    8f86:	4770      	bx	lr
    8f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f90:	d102      	bne.n	8f98 <__cmpdf2+0x64>
    8f92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8f96:	d107      	bne.n	8fa8 <__cmpdf2+0x74>
    8f98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fa0:	d1d6      	bne.n	8f50 <__cmpdf2+0x1c>
    8fa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8fa6:	d0d3      	beq.n	8f50 <__cmpdf2+0x1c>
    8fa8:	f85d 0b04 	ldr.w	r0, [sp], #4
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__aeabi_cdrcmple>:
    8fb0:	4684      	mov	ip, r0
    8fb2:	4610      	mov	r0, r2
    8fb4:	4662      	mov	r2, ip
    8fb6:	468c      	mov	ip, r1
    8fb8:	4619      	mov	r1, r3
    8fba:	4663      	mov	r3, ip
    8fbc:	e000      	b.n	8fc0 <__aeabi_cdcmpeq>
    8fbe:	bf00      	nop

00008fc0 <__aeabi_cdcmpeq>:
    8fc0:	b501      	push	{r0, lr}
    8fc2:	f7ff ffb7 	bl	8f34 <__cmpdf2>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	bf48      	it	mi
    8fca:	f110 0f00 	cmnmi.w	r0, #0
    8fce:	bd01      	pop	{r0, pc}

00008fd0 <__aeabi_dcmpeq>:
    8fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fd4:	f7ff fff4 	bl	8fc0 <__aeabi_cdcmpeq>
    8fd8:	bf0c      	ite	eq
    8fda:	2001      	moveq	r0, #1
    8fdc:	2000      	movne	r0, #0
    8fde:	f85d fb08 	ldr.w	pc, [sp], #8
    8fe2:	bf00      	nop

00008fe4 <__aeabi_dcmplt>:
    8fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fe8:	f7ff ffea 	bl	8fc0 <__aeabi_cdcmpeq>
    8fec:	bf34      	ite	cc
    8fee:	2001      	movcc	r0, #1
    8ff0:	2000      	movcs	r0, #0
    8ff2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ff6:	bf00      	nop

00008ff8 <__aeabi_dcmple>:
    8ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ffc:	f7ff ffe0 	bl	8fc0 <__aeabi_cdcmpeq>
    9000:	bf94      	ite	ls
    9002:	2001      	movls	r0, #1
    9004:	2000      	movhi	r0, #0
    9006:	f85d fb08 	ldr.w	pc, [sp], #8
    900a:	bf00      	nop

0000900c <__aeabi_dcmpge>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff ffce 	bl	8fb0 <__aeabi_cdrcmple>
    9014:	bf94      	ite	ls
    9016:	2001      	movls	r0, #1
    9018:	2000      	movhi	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmpgt>:
    9020:	f84d ed08 	str.w	lr, [sp, #-8]!
    9024:	f7ff ffc4 	bl	8fb0 <__aeabi_cdrcmple>
    9028:	bf34      	ite	cc
    902a:	2001      	movcc	r0, #1
    902c:	2000      	movcs	r0, #0
    902e:	f85d fb08 	ldr.w	pc, [sp], #8
    9032:	bf00      	nop

00009034 <__aeabi_dcmpun>:
    9034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    903c:	d102      	bne.n	9044 <__aeabi_dcmpun+0x10>
    903e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9042:	d10a      	bne.n	905a <__aeabi_dcmpun+0x26>
    9044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    904c:	d102      	bne.n	9054 <__aeabi_dcmpun+0x20>
    904e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9052:	d102      	bne.n	905a <__aeabi_dcmpun+0x26>
    9054:	f04f 0000 	mov.w	r0, #0
    9058:	4770      	bx	lr
    905a:	f04f 0001 	mov.w	r0, #1
    905e:	4770      	bx	lr

00009060 <__aeabi_d2iz>:
    9060:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9068:	d215      	bcs.n	9096 <__aeabi_d2iz+0x36>
    906a:	d511      	bpl.n	9090 <__aeabi_d2iz+0x30>
    906c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9074:	d912      	bls.n	909c <__aeabi_d2iz+0x3c>
    9076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    907a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    907e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9086:	fa23 f002 	lsr.w	r0, r3, r2
    908a:	bf18      	it	ne
    908c:	4240      	negne	r0, r0
    908e:	4770      	bx	lr
    9090:	f04f 0000 	mov.w	r0, #0
    9094:	4770      	bx	lr
    9096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    909a:	d105      	bne.n	90a8 <__aeabi_d2iz+0x48>
    909c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    90a0:	bf08      	it	eq
    90a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    90a6:	4770      	bx	lr
    90a8:	f04f 0000 	mov.w	r0, #0
    90ac:	4770      	bx	lr
    90ae:	bf00      	nop

000090b0 <__udivmoddi4>:
    90b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90b4:	4686      	mov	lr, r0
    90b6:	468c      	mov	ip, r1
    90b8:	4608      	mov	r0, r1
    90ba:	9e08      	ldr	r6, [sp, #32]
    90bc:	4615      	mov	r5, r2
    90be:	4674      	mov	r4, lr
    90c0:	4619      	mov	r1, r3
    90c2:	2b00      	cmp	r3, #0
    90c4:	f040 80c1 	bne.w	924a <__udivmoddi4+0x19a>
    90c8:	4285      	cmp	r5, r0
    90ca:	fab2 f282 	clz	r2, r2
    90ce:	d945      	bls.n	915c <__udivmoddi4+0xac>
    90d0:	b14a      	cbz	r2, 90e6 <__udivmoddi4+0x36>
    90d2:	f1c2 0320 	rsb	r3, r2, #32
    90d6:	fa00 fc02 	lsl.w	ip, r0, r2
    90da:	4095      	lsls	r5, r2
    90dc:	4094      	lsls	r4, r2
    90de:	fa2e f303 	lsr.w	r3, lr, r3
    90e2:	ea43 0c0c 	orr.w	ip, r3, ip
    90e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    90ea:	b2a8      	uxth	r0, r5
    90ec:	0c23      	lsrs	r3, r4, #16
    90ee:	fbbc f8fe 	udiv	r8, ip, lr
    90f2:	fb0e cc18 	mls	ip, lr, r8, ip
    90f6:	fb08 f900 	mul.w	r9, r8, r0
    90fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    90fe:	4599      	cmp	r9, r3
    9100:	d928      	bls.n	9154 <__udivmoddi4+0xa4>
    9102:	18eb      	adds	r3, r5, r3
    9104:	f108 37ff 	add.w	r7, r8, #4294967295
    9108:	d204      	bcs.n	9114 <__udivmoddi4+0x64>
    910a:	4599      	cmp	r9, r3
    910c:	d902      	bls.n	9114 <__udivmoddi4+0x64>
    910e:	f1a8 0702 	sub.w	r7, r8, #2
    9112:	442b      	add	r3, r5
    9114:	eba3 0309 	sub.w	r3, r3, r9
    9118:	b2a4      	uxth	r4, r4
    911a:	fbb3 fcfe 	udiv	ip, r3, lr
    911e:	fb0e 331c 	mls	r3, lr, ip, r3
    9122:	fb0c f000 	mul.w	r0, ip, r0
    9126:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    912a:	42a0      	cmp	r0, r4
    912c:	d914      	bls.n	9158 <__udivmoddi4+0xa8>
    912e:	192c      	adds	r4, r5, r4
    9130:	f10c 33ff 	add.w	r3, ip, #4294967295
    9134:	d204      	bcs.n	9140 <__udivmoddi4+0x90>
    9136:	42a0      	cmp	r0, r4
    9138:	d902      	bls.n	9140 <__udivmoddi4+0x90>
    913a:	f1ac 0302 	sub.w	r3, ip, #2
    913e:	442c      	add	r4, r5
    9140:	1a24      	subs	r4, r4, r0
    9142:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9146:	b11e      	cbz	r6, 9150 <__udivmoddi4+0xa0>
    9148:	40d4      	lsrs	r4, r2
    914a:	2300      	movs	r3, #0
    914c:	6034      	str	r4, [r6, #0]
    914e:	6073      	str	r3, [r6, #4]
    9150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9154:	4647      	mov	r7, r8
    9156:	e7dd      	b.n	9114 <__udivmoddi4+0x64>
    9158:	4663      	mov	r3, ip
    915a:	e7f1      	b.n	9140 <__udivmoddi4+0x90>
    915c:	bb92      	cbnz	r2, 91c4 <__udivmoddi4+0x114>
    915e:	1b43      	subs	r3, r0, r5
    9160:	2101      	movs	r1, #1
    9162:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9166:	b2af      	uxth	r7, r5
    9168:	0c20      	lsrs	r0, r4, #16
    916a:	fbb3 fcfe 	udiv	ip, r3, lr
    916e:	fb0e 331c 	mls	r3, lr, ip, r3
    9172:	fb0c f807 	mul.w	r8, ip, r7
    9176:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    917a:	4598      	cmp	r8, r3
    917c:	d961      	bls.n	9242 <__udivmoddi4+0x192>
    917e:	18eb      	adds	r3, r5, r3
    9180:	f10c 30ff 	add.w	r0, ip, #4294967295
    9184:	d204      	bcs.n	9190 <__udivmoddi4+0xe0>
    9186:	4598      	cmp	r8, r3
    9188:	d902      	bls.n	9190 <__udivmoddi4+0xe0>
    918a:	f1ac 0002 	sub.w	r0, ip, #2
    918e:	442b      	add	r3, r5
    9190:	eba3 0308 	sub.w	r3, r3, r8
    9194:	b2a4      	uxth	r4, r4
    9196:	fbb3 fcfe 	udiv	ip, r3, lr
    919a:	fb0e 331c 	mls	r3, lr, ip, r3
    919e:	fb0c f707 	mul.w	r7, ip, r7
    91a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91a6:	42a7      	cmp	r7, r4
    91a8:	d94d      	bls.n	9246 <__udivmoddi4+0x196>
    91aa:	192c      	adds	r4, r5, r4
    91ac:	f10c 33ff 	add.w	r3, ip, #4294967295
    91b0:	d204      	bcs.n	91bc <__udivmoddi4+0x10c>
    91b2:	42a7      	cmp	r7, r4
    91b4:	d902      	bls.n	91bc <__udivmoddi4+0x10c>
    91b6:	f1ac 0302 	sub.w	r3, ip, #2
    91ba:	442c      	add	r4, r5
    91bc:	1be4      	subs	r4, r4, r7
    91be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91c2:	e7c0      	b.n	9146 <__udivmoddi4+0x96>
    91c4:	f1c2 0320 	rsb	r3, r2, #32
    91c8:	4095      	lsls	r5, r2
    91ca:	4094      	lsls	r4, r2
    91cc:	fa20 f103 	lsr.w	r1, r0, r3
    91d0:	fa2e f303 	lsr.w	r3, lr, r3
    91d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    91d8:	4090      	lsls	r0, r2
    91da:	b2af      	uxth	r7, r5
    91dc:	4303      	orrs	r3, r0
    91de:	fbb1 fcfe 	udiv	ip, r1, lr
    91e2:	fb0e 101c 	mls	r0, lr, ip, r1
    91e6:	0c19      	lsrs	r1, r3, #16
    91e8:	fb0c f807 	mul.w	r8, ip, r7
    91ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    91f0:	4588      	cmp	r8, r1
    91f2:	d922      	bls.n	923a <__udivmoddi4+0x18a>
    91f4:	1869      	adds	r1, r5, r1
    91f6:	f10c 30ff 	add.w	r0, ip, #4294967295
    91fa:	d204      	bcs.n	9206 <__udivmoddi4+0x156>
    91fc:	4588      	cmp	r8, r1
    91fe:	d902      	bls.n	9206 <__udivmoddi4+0x156>
    9200:	f1ac 0002 	sub.w	r0, ip, #2
    9204:	4429      	add	r1, r5
    9206:	eba1 0108 	sub.w	r1, r1, r8
    920a:	b29b      	uxth	r3, r3
    920c:	fbb1 fcfe 	udiv	ip, r1, lr
    9210:	fb0e 111c 	mls	r1, lr, ip, r1
    9214:	fb0c f707 	mul.w	r7, ip, r7
    9218:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    921c:	429f      	cmp	r7, r3
    921e:	d90e      	bls.n	923e <__udivmoddi4+0x18e>
    9220:	18eb      	adds	r3, r5, r3
    9222:	f10c 31ff 	add.w	r1, ip, #4294967295
    9226:	d204      	bcs.n	9232 <__udivmoddi4+0x182>
    9228:	429f      	cmp	r7, r3
    922a:	d902      	bls.n	9232 <__udivmoddi4+0x182>
    922c:	f1ac 0102 	sub.w	r1, ip, #2
    9230:	442b      	add	r3, r5
    9232:	1bdb      	subs	r3, r3, r7
    9234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9238:	e793      	b.n	9162 <__udivmoddi4+0xb2>
    923a:	4660      	mov	r0, ip
    923c:	e7e3      	b.n	9206 <__udivmoddi4+0x156>
    923e:	4661      	mov	r1, ip
    9240:	e7f7      	b.n	9232 <__udivmoddi4+0x182>
    9242:	4660      	mov	r0, ip
    9244:	e7a4      	b.n	9190 <__udivmoddi4+0xe0>
    9246:	4663      	mov	r3, ip
    9248:	e7b8      	b.n	91bc <__udivmoddi4+0x10c>
    924a:	4283      	cmp	r3, r0
    924c:	d906      	bls.n	925c <__udivmoddi4+0x1ac>
    924e:	b916      	cbnz	r6, 9256 <__udivmoddi4+0x1a6>
    9250:	2100      	movs	r1, #0
    9252:	4608      	mov	r0, r1
    9254:	e77c      	b.n	9150 <__udivmoddi4+0xa0>
    9256:	e9c6 e000 	strd	lr, r0, [r6]
    925a:	e7f9      	b.n	9250 <__udivmoddi4+0x1a0>
    925c:	fab3 f783 	clz	r7, r3
    9260:	b98f      	cbnz	r7, 9286 <__udivmoddi4+0x1d6>
    9262:	4283      	cmp	r3, r0
    9264:	d301      	bcc.n	926a <__udivmoddi4+0x1ba>
    9266:	4572      	cmp	r2, lr
    9268:	d808      	bhi.n	927c <__udivmoddi4+0x1cc>
    926a:	ebbe 0402 	subs.w	r4, lr, r2
    926e:	eb60 0303 	sbc.w	r3, r0, r3
    9272:	2001      	movs	r0, #1
    9274:	469c      	mov	ip, r3
    9276:	b91e      	cbnz	r6, 9280 <__udivmoddi4+0x1d0>
    9278:	2100      	movs	r1, #0
    927a:	e769      	b.n	9150 <__udivmoddi4+0xa0>
    927c:	4638      	mov	r0, r7
    927e:	e7fa      	b.n	9276 <__udivmoddi4+0x1c6>
    9280:	e9c6 4c00 	strd	r4, ip, [r6]
    9284:	e7f8      	b.n	9278 <__udivmoddi4+0x1c8>
    9286:	f1c7 0c20 	rsb	ip, r7, #32
    928a:	40bb      	lsls	r3, r7
    928c:	fa0e f507 	lsl.w	r5, lr, r7
    9290:	fa22 f40c 	lsr.w	r4, r2, ip
    9294:	fa2e f10c 	lsr.w	r1, lr, ip
    9298:	40ba      	lsls	r2, r7
    929a:	431c      	orrs	r4, r3
    929c:	fa20 f30c 	lsr.w	r3, r0, ip
    92a0:	40b8      	lsls	r0, r7
    92a2:	ea4f 4914 	mov.w	r9, r4, lsr #16
    92a6:	4301      	orrs	r1, r0
    92a8:	fa1f fe84 	uxth.w	lr, r4
    92ac:	fbb3 f8f9 	udiv	r8, r3, r9
    92b0:	fb09 3018 	mls	r0, r9, r8, r3
    92b4:	0c0b      	lsrs	r3, r1, #16
    92b6:	fb08 fa0e 	mul.w	sl, r8, lr
    92ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    92be:	459a      	cmp	sl, r3
    92c0:	d940      	bls.n	9344 <__udivmoddi4+0x294>
    92c2:	18e3      	adds	r3, r4, r3
    92c4:	f108 30ff 	add.w	r0, r8, #4294967295
    92c8:	d204      	bcs.n	92d4 <__udivmoddi4+0x224>
    92ca:	459a      	cmp	sl, r3
    92cc:	d902      	bls.n	92d4 <__udivmoddi4+0x224>
    92ce:	f1a8 0002 	sub.w	r0, r8, #2
    92d2:	4423      	add	r3, r4
    92d4:	eba3 030a 	sub.w	r3, r3, sl
    92d8:	b289      	uxth	r1, r1
    92da:	fbb3 f8f9 	udiv	r8, r3, r9
    92de:	fb09 3318 	mls	r3, r9, r8, r3
    92e2:	fb08 fe0e 	mul.w	lr, r8, lr
    92e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    92ea:	458e      	cmp	lr, r1
    92ec:	d92c      	bls.n	9348 <__udivmoddi4+0x298>
    92ee:	1861      	adds	r1, r4, r1
    92f0:	f108 33ff 	add.w	r3, r8, #4294967295
    92f4:	d204      	bcs.n	9300 <__udivmoddi4+0x250>
    92f6:	458e      	cmp	lr, r1
    92f8:	d902      	bls.n	9300 <__udivmoddi4+0x250>
    92fa:	f1a8 0302 	sub.w	r3, r8, #2
    92fe:	4421      	add	r1, r4
    9300:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    9304:	eba1 010e 	sub.w	r1, r1, lr
    9308:	fba0 9802 	umull	r9, r8, r0, r2
    930c:	4541      	cmp	r1, r8
    930e:	46ce      	mov	lr, r9
    9310:	4643      	mov	r3, r8
    9312:	d302      	bcc.n	931a <__udivmoddi4+0x26a>
    9314:	d106      	bne.n	9324 <__udivmoddi4+0x274>
    9316:	454d      	cmp	r5, r9
    9318:	d204      	bcs.n	9324 <__udivmoddi4+0x274>
    931a:	3801      	subs	r0, #1
    931c:	ebb9 0e02 	subs.w	lr, r9, r2
    9320:	eb68 0304 	sbc.w	r3, r8, r4
    9324:	2e00      	cmp	r6, #0
    9326:	d0a7      	beq.n	9278 <__udivmoddi4+0x1c8>
    9328:	ebb5 020e 	subs.w	r2, r5, lr
    932c:	eb61 0103 	sbc.w	r1, r1, r3
    9330:	fa01 fc0c 	lsl.w	ip, r1, ip
    9334:	fa22 f307 	lsr.w	r3, r2, r7
    9338:	40f9      	lsrs	r1, r7
    933a:	ea4c 0303 	orr.w	r3, ip, r3
    933e:	e9c6 3100 	strd	r3, r1, [r6]
    9342:	e799      	b.n	9278 <__udivmoddi4+0x1c8>
    9344:	4640      	mov	r0, r8
    9346:	e7c5      	b.n	92d4 <__udivmoddi4+0x224>
    9348:	4643      	mov	r3, r8
    934a:	e7d9      	b.n	9300 <__udivmoddi4+0x250>

0000934c <strcmp>:
    934c:	f810 2b01 	ldrb.w	r2, [r0], #1
    9350:	f811 3b01 	ldrb.w	r3, [r1], #1
    9354:	2a01      	cmp	r2, #1
    9356:	bf28      	it	cs
    9358:	429a      	cmpcs	r2, r3
    935a:	d0f7      	beq.n	934c <strcmp>
    935c:	1ad0      	subs	r0, r2, r3
    935e:	4770      	bx	lr

00009360 <strlen>:
    9360:	4603      	mov	r3, r0
    9362:	f813 2b01 	ldrb.w	r2, [r3], #1
    9366:	2a00      	cmp	r2, #0
    9368:	d1fb      	bne.n	9362 <strlen+0x2>
    936a:	1a18      	subs	r0, r3, r0
    936c:	3801      	subs	r0, #1
    936e:	4770      	bx	lr

00009370 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9372:	460c      	mov	r4, r1
  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9374:	f7ff f842 	bl	83fc <__aeabi_i2d>
    9378:	a325      	add	r3, pc, #148	; (adr r3, 9410 <ntc_temperature+0xa0>)
    937a:	e9d3 2300 	ldrd	r2, r3, [r3]
    937e:	f7ff f8a7 	bl	84d0 <__aeabi_dmul>
    9382:	f7ff fab7 	bl	88f4 <__aeabi_d2f>
    9386:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    9388:	1e63      	subs	r3, r4, #1
    938a:	b2db      	uxtb	r3, r3
    938c:	2b02      	cmp	r3, #2
    938e:	bf96      	itet	ls
    9390:	4a27      	ldrls	r2, [pc, #156]	; (9430 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9392:	2000      	movhi	r0, #0
    9394:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    9398:	4629      	mov	r1, r5
    939a:	f7ff fc09 	bl	8bb0 <__aeabi_fmul>
    939e:	f7ff f83f 	bl	8420 <__aeabi_f2d>
    93a2:	4606      	mov	r6, r0
    93a4:	4628      	mov	r0, r5
    93a6:	460f      	mov	r7, r1
    93a8:	f7ff f83a 	bl	8420 <__aeabi_f2d>
    93ac:	4602      	mov	r2, r0
    93ae:	460b      	mov	r3, r1
    93b0:	2000      	movs	r0, #0
    93b2:	4920      	ldr	r1, [pc, #128]	; (9434 <ntc_temperature+0xc4>)
    93b4:	f7fe fed4 	bl	8160 <__aeabi_dsub>
    93b8:	4602      	mov	r2, r0
    93ba:	460b      	mov	r3, r1
    93bc:	4630      	mov	r0, r6
    93be:	4639      	mov	r1, r7
    93c0:	f7ff f9b0 	bl	8724 <__aeabi_ddiv>
    93c4:	f7ff fa96 	bl	88f4 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    93c8:	491b      	ldr	r1, [pc, #108]	; (9438 <ntc_temperature+0xc8>)
    93ca:	f7ff fca5 	bl	8d18 <__aeabi_fdiv>
    93ce:	f7ff f827 	bl	8420 <__aeabi_f2d>
    93d2:	f018 fef9 	bl	221c8 <log>
    93d6:	a310      	add	r3, pc, #64	; (adr r3, 9418 <ntc_temperature+0xa8>)
    93d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    93dc:	f7ff f9a2 	bl	8724 <__aeabi_ddiv>
    93e0:	a30f      	add	r3, pc, #60	; (adr r3, 9420 <ntc_temperature+0xb0>)
    93e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    93e6:	f7fe febd 	bl	8164 <__adddf3>
    93ea:	4602      	mov	r2, r0
    93ec:	460b      	mov	r3, r1
    93ee:	2000      	movs	r0, #0
    93f0:	4912      	ldr	r1, [pc, #72]	; (943c <ntc_temperature+0xcc>)
    93f2:	f7ff f997 	bl	8724 <__aeabi_ddiv>
    93f6:	f7ff fa7d 	bl	88f4 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    93fa:	f7ff f811 	bl	8420 <__aeabi_f2d>
    93fe:	a30a      	add	r3, pc, #40	; (adr r3, 9428 <ntc_temperature+0xb8>)
    9400:	e9d3 2300 	ldrd	r2, r3, [r3]
    9404:	f7fe feac 	bl	8160 <__aeabi_dsub>
    9408:	f7ff fa74 	bl	88f4 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    940e:	bf00      	nop
    9410:	3a66a002 	.word	0x3a66a002
    9414:	3f2ccdb3 	.word	0x3f2ccdb3
    9418:	00000000 	.word	0x00000000
    941c:	40af0200 	.word	0x40af0200
    9420:	dcb5db83 	.word	0xdcb5db83
    9424:	3f6b79e1 	.word	0x3f6b79e1
    9428:	66666666 	.word	0x66666666
    942c:	40711266 	.word	0x40711266
    9430:	00029a70 	.word	0x00029a70
    9434:	40080000 	.word	0x40080000
    9438:	461c4000 	.word	0x461c4000
    943c:	3ff00000 	.word	0x3ff00000

00009440 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9440:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9442:	4d64      	ldr	r5, [pc, #400]	; (95d4 <bt_init+0x194>)
{
    9444:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9446:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    944a:	6899      	ldr	r1, [r3, #8]
    944c:	f011 0101 	ands.w	r1, r1, #1
    9450:	d11a      	bne.n	9488 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9452:	f640 4003 	movw	r0, #3075	; 0xc03
    9456:	aa05      	add	r2, sp, #20
    9458:	f007 fd2a 	bl	10eb0 <bt_hci_cmd_send_sync>
		if (err) {
    945c:	4604      	mov	r4, r0
    945e:	2800      	cmp	r0, #0
    9460:	f040 80b5 	bne.w	95ce <bt_init+0x18e>
		hci_reset_complete(rsp);
    9464:	9805      	ldr	r0, [sp, #20]
	uint8_t status = buf->data[0];
    9466:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9468:	781b      	ldrb	r3, [r3, #0]
    946a:	b95b      	cbnz	r3, 9484 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    946c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9470:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9474:	f002 0209 	and.w	r2, r2, #9
    9478:	e8d3 1fef 	ldaex	r1, [r3]
    947c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    9480:	2c00      	cmp	r4, #0
    9482:	d1f9      	bne.n	9478 <bt_init+0x38>
		net_buf_unref(rsp);
    9484:	f00f f8e2 	bl	1864c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9488:	2100      	movs	r1, #0
    948a:	f241 0003 	movw	r0, #4099	; 0x1003
    948e:	aa05      	add	r2, sp, #20
    9490:	f007 fd0e 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    9494:	4604      	mov	r4, r0
    9496:	2800      	cmp	r0, #0
    9498:	f040 8099 	bne.w	95ce <bt_init+0x18e>
	read_local_features_complete(rsp);
    949c:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    949e:	4e4e      	ldr	r6, [pc, #312]	; (95d8 <bt_init+0x198>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    94a0:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94a2:	f8d2 0001 	ldr.w	r0, [r2, #1]
    94a6:	f8d2 1005 	ldr.w	r1, [r2, #5]
    94aa:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    94ac:	4618      	mov	r0, r3
    94ae:	f00f f8cd 	bl	1864c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    94b2:	4621      	mov	r1, r4
    94b4:	f241 0001 	movw	r0, #4097	; 0x1001
    94b8:	aa05      	add	r2, sp, #20
    94ba:	f007 fcf9 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    94be:	4604      	mov	r4, r0
    94c0:	2800      	cmp	r0, #0
    94c2:	f040 8084 	bne.w	95ce <bt_init+0x18e>
	read_local_ver_complete(rsp);
    94c6:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    94c8:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    94ca:	785a      	ldrb	r2, [r3, #1]
    94cc:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    94d0:	885a      	ldrh	r2, [r3, #2]
    94d2:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    94d6:	791a      	ldrb	r2, [r3, #4]
    94d8:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    94dc:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    94e0:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    94e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    94e8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    94ec:	f00f f8ae 	bl	1864c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    94f0:	4621      	mov	r1, r4
    94f2:	f241 0002 	movw	r0, #4098	; 0x1002
    94f6:	aa05      	add	r2, sp, #20
    94f8:	f007 fcda 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    94fc:	4604      	mov	r4, r0
    94fe:	2800      	cmp	r0, #0
    9500:	d165      	bne.n	95ce <bt_init+0x18e>
	read_supported_commands_complete(rsp);
    9502:	9f05      	ldr	r7, [sp, #20]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    9504:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    9506:	1c53      	adds	r3, r2, #1
    9508:	3241      	adds	r2, #65	; 0x41
    950a:	4634      	mov	r4, r6
    950c:	6818      	ldr	r0, [r3, #0]
    950e:	6859      	ldr	r1, [r3, #4]
    9510:	3308      	adds	r3, #8
    9512:	c403      	stmia	r4!, {r0, r1}
    9514:	4293      	cmp	r3, r2
    9516:	4626      	mov	r6, r4
    9518:	d1f7      	bne.n	950a <bt_init+0xca>
	net_buf_unref(rsp);
    951a:	4638      	mov	r0, r7
    951c:	f00f f896 	bl	1864c <net_buf_unref>
		err = prng_init();
    9520:	f009 faea 	bl	12af8 <prng_init>
		if (err) {
    9524:	4604      	mov	r4, r0
    9526:	2800      	cmp	r0, #0
    9528:	d151      	bne.n	95ce <bt_init+0x18e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    952a:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    952e:	f013 0320 	ands.w	r3, r3, #32
    9532:	d118      	bne.n	9566 <bt_init+0x126>
		LOG_WRN("Controller to host flow control not supported");
    9534:	4a29      	ldr	r2, [pc, #164]	; (95dc <bt_init+0x19c>)
    9536:	492a      	ldr	r1, [pc, #168]	; (95e0 <bt_init+0x1a0>)
    9538:	e9cd 3201 	strd	r3, r2, [sp, #4]
    953c:	9300      	str	r3, [sp, #0]
    953e:	2202      	movs	r2, #2
    9540:	f01b fd8c 	bl	2505c <z_log_msg_runtime_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    9544:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    9548:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    954c:	d14c      	bne.n	95e8 <bt_init+0x1a8>
		LOG_ERR("Non-LE capable controller detected!");
    954e:	4a25      	ldr	r2, [pc, #148]	; (95e4 <bt_init+0x1a4>)
    9550:	4618      	mov	r0, r3
    9552:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9556:	4922      	ldr	r1, [pc, #136]	; (95e0 <bt_init+0x1a0>)
    9558:	2201      	movs	r2, #1
    955a:	9300      	str	r3, [sp, #0]
    955c:	f01b fd7e 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    9560:	f06f 0412 	mvn.w	r4, #18
    9564:	e033      	b.n	95ce <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9566:	2107      	movs	r1, #7
    9568:	f640 4033 	movw	r0, #3123	; 0xc33
    956c:	f007 fc52 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
    9570:	4606      	mov	r6, r0
    9572:	2800      	cmp	r0, #0
    9574:	f000 8140 	beq.w	97f8 <bt_init+0x3b8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9578:	2107      	movs	r1, #7
    957a:	300c      	adds	r0, #12
    957c:	f00f f988 	bl	18890 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    9580:	2345      	movs	r3, #69	; 0x45
    9582:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9584:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9586:	f8c0 4002 	str.w	r4, [r0, #2]
    958a:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    958c:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    958e:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9590:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9592:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9594:	4631      	mov	r1, r6
    9596:	f640 4033 	movw	r0, #3123	; 0xc33
    959a:	f007 fc89 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    959e:	4604      	mov	r4, r0
    95a0:	b9a8      	cbnz	r0, 95ce <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    95a2:	2101      	movs	r1, #1
    95a4:	f640 4031 	movw	r0, #3121	; 0xc31
    95a8:	f007 fc34 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
    95ac:	4606      	mov	r6, r0
    95ae:	2800      	cmp	r0, #0
    95b0:	f000 8122 	beq.w	97f8 <bt_init+0x3b8>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    95b4:	2101      	movs	r1, #1
    95b6:	300c      	adds	r0, #12
    95b8:	f01d fbcc 	bl	26d54 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    95bc:	4622      	mov	r2, r4
    95be:	4631      	mov	r1, r6
    95c0:	f640 4031 	movw	r0, #3121	; 0xc31
    95c4:	f007 fc74 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    95c8:	4604      	mov	r4, r0
    95ca:	2800      	cmp	r0, #0
    95cc:	d0ba      	beq.n	9544 <bt_init+0x104>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    95ce:	4620      	mov	r0, r4
    95d0:	b007      	add	sp, #28
    95d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95d4:	20008000 	.word	0x20008000
    95d8:	20008070 	.word	0x20008070
    95dc:	0002c841 	.word	0x0002c841
    95e0:	000296c4 	.word	0x000296c4
    95e4:	0002c86f 	.word	0x0002c86f
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    95e8:	2100      	movs	r1, #0
    95ea:	f242 0003 	movw	r0, #8195	; 0x2003
    95ee:	aa05      	add	r2, sp, #20
    95f0:	f007 fc5e 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    95f4:	4604      	mov	r4, r0
    95f6:	2800      	cmp	r0, #0
    95f8:	d1e9      	bne.n	95ce <bt_init+0x18e>
	read_le_features_complete(rsp);
    95fa:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    95fc:	4ebe      	ldr	r6, [pc, #760]	; (98f8 <bt_init+0x4b8>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    95fe:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9600:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9604:	f8d2 1005 	ldr.w	r1, [r2, #5]
    9608:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    960a:	4618      	mov	r0, r3
    960c:	f00f f81e 	bl	1864c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9610:	4621      	mov	r1, r4
    9612:	f242 0002 	movw	r0, #8194	; 0x2002
    9616:	aa05      	add	r2, sp, #20
    9618:	f007 fc4a 	bl	10eb0 <bt_hci_cmd_send_sync>
		if (err) {
    961c:	4604      	mov	r4, r0
    961e:	2800      	cmp	r0, #0
    9620:	d1d5      	bne.n	95ce <bt_init+0x18e>
		le_read_buffer_size_complete(rsp);
    9622:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9624:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    9626:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    962a:	b291      	uxth	r1, r2
    962c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    9630:	b129      	cbz	r1, 963e <bt_init+0x1fe>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9632:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9634:	4611      	mov	r1, r2
    9636:	f106 0028 	add.w	r0, r6, #40	; 0x28
    963a:	f01e ff0e 	bl	2845a <z_impl_k_sem_init>
		net_buf_unref(rsp);
    963e:	4620      	mov	r0, r4
    9640:	f00f f804 	bl	1864c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9644:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    9648:	f016 0620 	ands.w	r6, r6, #32
    964c:	d118      	bne.n	9680 <bt_init+0x240>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    964e:	2102      	movs	r1, #2
    9650:	f640 406d 	movw	r0, #3181	; 0xc6d
    9654:	f007 fbde 	bl	10e14 <bt_hci_cmd_create>
		if (!buf) {
    9658:	4604      	mov	r4, r0
    965a:	2800      	cmp	r0, #0
    965c:	f000 80cc 	beq.w	97f8 <bt_init+0x3b8>
	return net_buf_simple_add(&buf->b, len);
    9660:	2102      	movs	r1, #2
    9662:	300c      	adds	r0, #12
    9664:	f00f f914 	bl	18890 <net_buf_simple_add>
		cp_le->le = 0x01;
    9668:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    966a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    966c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    966e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9670:	4632      	mov	r2, r6
    9672:	f640 406d 	movw	r0, #3181	; 0xc6d
    9676:	f007 fc1b 	bl	10eb0 <bt_hci_cmd_send_sync>
		if (err) {
    967a:	4604      	mov	r4, r0
    967c:	2800      	cmp	r0, #0
    967e:	d1a6      	bne.n	95ce <bt_init+0x18e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9680:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    9684:	071f      	lsls	r7, r3, #28
    9686:	d512      	bpl.n	96ae <bt_init+0x26e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9688:	2100      	movs	r1, #0
    968a:	f242 001c 	movw	r0, #8220	; 0x201c
    968e:	aa05      	add	r2, sp, #20
    9690:	f007 fc0e 	bl	10eb0 <bt_hci_cmd_send_sync>
		if (err) {
    9694:	4604      	mov	r4, r0
    9696:	2800      	cmp	r0, #0
    9698:	d199      	bne.n	95ce <bt_init+0x18e>
		le_read_supp_states_complete(rsp);
    969a:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    969c:	68c3      	ldr	r3, [r0, #12]
    969e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    96a2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    96a6:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    96aa:	f00e ffcf 	bl	1864c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    96ae:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    96b2:	069e      	lsls	r6, r3, #26
    96b4:	d524      	bpl.n	9700 <bt_init+0x2c0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    96b6:	f10d 0112 	add.w	r1, sp, #18
    96ba:	a804      	add	r0, sp, #16
    96bc:	f007 fc6e 	bl	10f9c <hci_le_read_max_data_len>
		if (err) {
    96c0:	4604      	mov	r4, r0
    96c2:	2800      	cmp	r0, #0
    96c4:	d183      	bne.n	95ce <bt_init+0x18e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96c6:	2104      	movs	r1, #4
    96c8:	f242 0024 	movw	r0, #8228	; 0x2024
    96cc:	f007 fba2 	bl	10e14 <bt_hci_cmd_create>
		if (!buf) {
    96d0:	4606      	mov	r6, r0
    96d2:	2800      	cmp	r0, #0
    96d4:	f000 8090 	beq.w	97f8 <bt_init+0x3b8>
    96d8:	2104      	movs	r1, #4
    96da:	300c      	adds	r0, #12
    96dc:	f00f f8d8 	bl	18890 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96e0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96e4:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    96e6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96ec:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    96ee:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96f0:	f242 0024 	movw	r0, #8228	; 0x2024
    96f4:	f007 fbdc 	bl	10eb0 <bt_hci_cmd_send_sync>
		if (err) {
    96f8:	4604      	mov	r4, r0
    96fa:	2800      	cmp	r0, #0
    96fc:	f47f af67 	bne.w	95ce <bt_init+0x18e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    9700:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9704:	065c      	lsls	r4, r3, #25
    9706:	d510      	bpl.n	972a <bt_init+0x2ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9708:	2100      	movs	r1, #0
    970a:	f242 002a 	movw	r0, #8234	; 0x202a
    970e:	aa05      	add	r2, sp, #20
    9710:	f007 fbce 	bl	10eb0 <bt_hci_cmd_send_sync>
		if (err) {
    9714:	4604      	mov	r4, r0
    9716:	2800      	cmp	r0, #0
    9718:	f47f af59 	bne.w	95ce <bt_init+0x18e>
		le_read_resolving_list_size_complete(rsp);
    971c:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
    971e:	68c3      	ldr	r3, [r0, #12]
    9720:	785b      	ldrb	r3, [r3, #1]
    9722:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    9726:	f00e ff91 	bl	1864c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    972a:	2108      	movs	r1, #8
    972c:	f242 0001 	movw	r0, #8193	; 0x2001
    9730:	f007 fb70 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
    9734:	4604      	mov	r4, r0
    9736:	2800      	cmp	r0, #0
    9738:	d05e      	beq.n	97f8 <bt_init+0x3b8>
    973a:	2108      	movs	r1, #8
    973c:	300c      	adds	r0, #12
    973e:	f00f f8a7 	bl	18890 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    9742:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    9746:	f240 2302 	movw	r3, #514	; 0x202
    974a:	f011 0f40 	tst.w	r1, #64	; 0x40
    974e:	bf08      	it	eq
    9750:	2303      	moveq	r3, #3
    9752:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9754:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9756:	bf4c      	ite	mi
    9758:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    975c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9760:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9762:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9766:	bf48      	it	mi
    9768:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    976c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9770:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9774:	bf18      	it	ne
    9776:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    977a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    977e:	07cf      	lsls	r7, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9780:	bf48      	it	mi
    9782:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9786:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    9788:	bf08      	it	eq
    978a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    978e:	2100      	movs	r1, #0
    9790:	f01b fc7b 	bl	2508a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9794:	4621      	mov	r1, r4
    9796:	2200      	movs	r2, #0
    9798:	f242 0001 	movw	r0, #8193	; 0x2001
    979c:	f007 fb88 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    97a0:	4604      	mov	r4, r0
    97a2:	2800      	cmp	r0, #0
    97a4:	f47f af13 	bne.w	95ce <bt_init+0x18e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97a8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    97ac:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97b0:	069e      	lsls	r6, r3, #26
    97b2:	d424      	bmi.n	97fe <bt_init+0x3be>
	if (bt_dev.le.acl_mtu) {
    97b4:	b9c9      	cbnz	r1, 97ea <bt_init+0x3aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    97b6:	f241 0005 	movw	r0, #4101	; 0x1005
    97ba:	aa05      	add	r2, sp, #20
    97bc:	f007 fb78 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    97c0:	4604      	mov	r4, r0
    97c2:	2800      	cmp	r0, #0
    97c4:	f47f af03 	bne.w	95ce <bt_init+0x18e>
	if (bt_dev.le.acl_mtu) {
    97c8:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    97cc:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
    97ce:	b94b      	cbnz	r3, 97e4 <bt_init+0x3a4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    97d0:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    97d2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    97d6:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    97da:	889a      	ldrh	r2, [r3, #4]
    97dc:	4847      	ldr	r0, [pc, #284]	; (98fc <bt_init+0x4bc>)
    97de:	4611      	mov	r1, r2
    97e0:	f01e fe3b 	bl	2845a <z_impl_k_sem_init>
	net_buf_unref(rsp);
    97e4:	4620      	mov	r0, r4
    97e6:	f00e ff31 	bl	1864c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    97ea:	2108      	movs	r1, #8
    97ec:	f640 4001 	movw	r0, #3073	; 0xc01
    97f0:	f007 fb10 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
    97f4:	4604      	mov	r4, r0
    97f6:	b980      	cbnz	r0, 981a <bt_init+0x3da>
		return -ENOBUFS;
    97f8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    97fc:	e6e7      	b.n	95ce <bt_init+0x18e>
	else if (!bt_dev.le.acl_mtu) {
    97fe:	2900      	cmp	r1, #0
    9800:	d1f3      	bne.n	97ea <bt_init+0x3aa>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9802:	4b3f      	ldr	r3, [pc, #252]	; (9900 <bt_init+0x4c0>)
    9804:	2201      	movs	r2, #1
    9806:	e9cd 0301 	strd	r0, r3, [sp, #4]
    980a:	493e      	ldr	r1, [pc, #248]	; (9904 <bt_init+0x4c4>)
    980c:	4603      	mov	r3, r0
    980e:	9000      	str	r0, [sp, #0]
    9810:	f01b fc24 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    9814:	f06f 0404 	mvn.w	r4, #4
    9818:	e6d9      	b.n	95ce <bt_init+0x18e>
    981a:	2108      	movs	r1, #8
    981c:	300c      	adds	r0, #12
    981e:	f00f f837 	bl	18890 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9822:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9826:	4602      	mov	r2, r0
    9828:	07d9      	lsls	r1, r3, #31
    982a:	d41c      	bmi.n	9866 <bt_init+0x426>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    982c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    9830:	4835      	ldr	r0, [pc, #212]	; (9908 <bt_init+0x4c8>)
	sys_put_le64(mask, ev->events);
    9832:	f01b fc2a 	bl	2508a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9836:	4621      	mov	r1, r4
    9838:	2200      	movs	r2, #0
    983a:	f640 4001 	movw	r0, #3073	; 0xc01
    983e:	f007 fb37 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    9842:	4604      	mov	r4, r0
    9844:	2800      	cmp	r0, #0
    9846:	f47f aec2 	bne.w	95ce <bt_init+0x18e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    984a:	4601      	mov	r1, r0
    984c:	aa05      	add	r2, sp, #20
    984e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9852:	f007 fb2d 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    9856:	4606      	mov	r6, r0
    9858:	b148      	cbz	r0, 986e <bt_init+0x42e>
		LOG_WRN("Vendor HCI extensions not available");
    985a:	4b2c      	ldr	r3, [pc, #176]	; (990c <bt_init+0x4cc>)
			LOG_WRN("Failed to read supported vendor features");
    985c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9860:	9400      	str	r4, [sp, #0]
    9862:	4623      	mov	r3, r4
    9864:	e013      	b.n	988e <bt_init+0x44e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9866:	a122      	add	r1, pc, #136	; (adr r1, 98f0 <bt_init+0x4b0>)
    9868:	e9d1 0100 	ldrd	r0, r1, [r1]
    986c:	e7e1      	b.n	9832 <bt_init+0x3f2>
	net_buf_unref(rsp);
    986e:	9805      	ldr	r0, [sp, #20]
    9870:	f00e feec 	bl	1864c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9874:	4631      	mov	r1, r6
    9876:	f64f 4002 	movw	r0, #64514	; 0xfc02
    987a:	aa05      	add	r2, sp, #20
    987c:	f007 fb18 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
    9880:	4604      	mov	r4, r0
    9882:	b1c0      	cbz	r0, 98b6 <bt_init+0x476>
		LOG_WRN("Failed to read supported vendor commands");
    9884:	4b22      	ldr	r3, [pc, #136]	; (9910 <bt_init+0x4d0>)
    9886:	9600      	str	r6, [sp, #0]
    9888:	e9cd 6301 	strd	r6, r3, [sp, #4]
    988c:	4633      	mov	r3, r6
			LOG_WRN("Failed to read supported vendor features");
    988e:	2202      	movs	r2, #2
    9890:	4618      	mov	r0, r3
    9892:	491c      	ldr	r1, [pc, #112]	; (9904 <bt_init+0x4c4>)
    9894:	f01b fbe2 	bl	2505c <z_log_msg_runtime_create.constprop.0>
	err = bt_id_init();
    9898:	f008 fdae 	bl	123f8 <bt_id_init>
	if (err) {
    989c:	4604      	mov	r4, r0
    989e:	2800      	cmp	r0, #0
    98a0:	f47f ae95 	bne.w	95ce <bt_init+0x18e>
		err = bt_conn_init();
    98a4:	f00a fa8e 	bl	13dc4 <bt_conn_init>
		if (err) {
    98a8:	4604      	mov	r4, r0
    98aa:	2800      	cmp	r0, #0
    98ac:	f47f ae8f 	bne.w	95ce <bt_init+0x18e>
	bt_finalize_init();
    98b0:	f008 f8f2 	bl	11a98 <bt_finalize_init>
	return 0;
    98b4:	e68b      	b.n	95ce <bt_init+0x18e>
	rp.cmds = (void *)rsp->data;
    98b6:	9805      	ldr	r0, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    98b8:	68c3      	ldr	r3, [r0, #12]
    98ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    98be:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    98c2:	f00e fec3 	bl	1864c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    98c6:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    98ca:	075b      	lsls	r3, r3, #29
    98cc:	d5e4      	bpl.n	9898 <bt_init+0x458>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    98ce:	4621      	mov	r1, r4
    98d0:	f64f 4003 	movw	r0, #64515	; 0xfc03
    98d4:	aa05      	add	r2, sp, #20
    98d6:	f007 faeb 	bl	10eb0 <bt_hci_cmd_send_sync>
		if (err) {
    98da:	b108      	cbz	r0, 98e0 <bt_init+0x4a0>
			LOG_WRN("Failed to read supported vendor features");
    98dc:	4b0d      	ldr	r3, [pc, #52]	; (9914 <bt_init+0x4d4>)
    98de:	e7bd      	b.n	985c <bt_init+0x41c>
		rp.feat = (void *)rsp->data;
    98e0:	9805      	ldr	r0, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
    98e2:	68c3      	ldr	r3, [r0, #12]
    98e4:	785b      	ldrb	r3, [r3, #1]
    98e6:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    98ea:	f00e feaf 	bl	1864c <net_buf_unref>
    98ee:	e7d3      	b.n	9898 <bt_init+0x458>
    98f0:	02008890 	.word	0x02008890
    98f4:	20008000 	.word	0x20008000
    98f8:	200080d0 	.word	0x200080d0
    98fc:	20008100 	.word	0x20008100
    9900:	0002c893 	.word	0x0002c893
    9904:	000296c4 	.word	0x000296c4
    9908:	02008810 	.word	0x02008810
    990c:	0002c8b6 	.word	0x0002c8b6
    9910:	0002c8da 	.word	0x0002c8da
    9914:	0002c903 	.word	0x0002c903

00009918 <__ieee754_log>:
    9918:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    991c:	4602      	mov	r2, r0
    991e:	460b      	mov	r3, r1
    9920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9924:	460d      	mov	r5, r1
    9926:	b087      	sub	sp, #28
    9928:	da24      	bge.n	9974 <__ieee754_log+0x5c>
    992a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    992e:	4304      	orrs	r4, r0
    9930:	d108      	bne.n	9944 <__ieee754_log+0x2c>
    9932:	2200      	movs	r2, #0
    9934:	2300      	movs	r3, #0
    9936:	2000      	movs	r0, #0
    9938:	49c9      	ldr	r1, [pc, #804]	; (9c60 <__ieee754_log+0x348>)
    993a:	f7fe fef3 	bl	8724 <__aeabi_ddiv>
    993e:	b007      	add	sp, #28
    9940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9944:	2900      	cmp	r1, #0
    9946:	da04      	bge.n	9952 <__ieee754_log+0x3a>
    9948:	f7fe fc0a 	bl	8160 <__aeabi_dsub>
    994c:	2200      	movs	r2, #0
    994e:	2300      	movs	r3, #0
    9950:	e7f3      	b.n	993a <__ieee754_log+0x22>
    9952:	2200      	movs	r2, #0
    9954:	4bc3      	ldr	r3, [pc, #780]	; (9c64 <__ieee754_log+0x34c>)
    9956:	f7fe fdbb 	bl	84d0 <__aeabi_dmul>
    995a:	460b      	mov	r3, r1
    995c:	460d      	mov	r5, r1
    995e:	4602      	mov	r2, r0
    9960:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9964:	48c0      	ldr	r0, [pc, #768]	; (9c68 <__ieee754_log+0x350>)
    9966:	4285      	cmp	r5, r0
    9968:	dd06      	ble.n	9978 <__ieee754_log+0x60>
    996a:	4610      	mov	r0, r2
    996c:	4619      	mov	r1, r3
    996e:	f7fe fbf9 	bl	8164 <__adddf3>
    9972:	e7e4      	b.n	993e <__ieee754_log+0x26>
    9974:	2100      	movs	r1, #0
    9976:	e7f5      	b.n	9964 <__ieee754_log+0x4c>
    9978:	152c      	asrs	r4, r5, #20
    997a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    997e:	4610      	mov	r0, r2
    9980:	2200      	movs	r2, #0
    9982:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    9986:	440c      	add	r4, r1
    9988:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    998c:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    9990:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    9994:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    9998:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    999c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    99a0:	ea41 0305 	orr.w	r3, r1, r5
    99a4:	4619      	mov	r1, r3
    99a6:	4bb1      	ldr	r3, [pc, #708]	; (9c6c <__ieee754_log+0x354>)
    99a8:	f7fe fbda 	bl	8160 <__aeabi_dsub>
    99ac:	1cab      	adds	r3, r5, #2
    99ae:	4682      	mov	sl, r0
    99b0:	468b      	mov	fp, r1
    99b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    99b6:	2200      	movs	r2, #0
    99b8:	2b02      	cmp	r3, #2
    99ba:	dc53      	bgt.n	9a64 <__ieee754_log+0x14c>
    99bc:	2300      	movs	r3, #0
    99be:	f7ff fb07 	bl	8fd0 <__aeabi_dcmpeq>
    99c2:	b1d0      	cbz	r0, 99fa <__ieee754_log+0xe2>
    99c4:	2c00      	cmp	r4, #0
    99c6:	f000 8120 	beq.w	9c0a <__ieee754_log+0x2f2>
    99ca:	4620      	mov	r0, r4
    99cc:	f7fe fd16 	bl	83fc <__aeabi_i2d>
    99d0:	4606      	mov	r6, r0
    99d2:	460f      	mov	r7, r1
    99d4:	a38e      	add	r3, pc, #568	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    99d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    99da:	f7fe fd79 	bl	84d0 <__aeabi_dmul>
    99de:	4604      	mov	r4, r0
    99e0:	460d      	mov	r5, r1
    99e2:	4630      	mov	r0, r6
    99e4:	4639      	mov	r1, r7
    99e6:	a38c      	add	r3, pc, #560	; (adr r3, 9c18 <__ieee754_log+0x300>)
    99e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    99ec:	f7fe fd70 	bl	84d0 <__aeabi_dmul>
    99f0:	4602      	mov	r2, r0
    99f2:	460b      	mov	r3, r1
    99f4:	4620      	mov	r0, r4
    99f6:	4629      	mov	r1, r5
    99f8:	e7b9      	b.n	996e <__ieee754_log+0x56>
    99fa:	a389      	add	r3, pc, #548	; (adr r3, 9c20 <__ieee754_log+0x308>)
    99fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a00:	4650      	mov	r0, sl
    9a02:	4659      	mov	r1, fp
    9a04:	f7fe fd64 	bl	84d0 <__aeabi_dmul>
    9a08:	4602      	mov	r2, r0
    9a0a:	460b      	mov	r3, r1
    9a0c:	2000      	movs	r0, #0
    9a0e:	4998      	ldr	r1, [pc, #608]	; (9c70 <__ieee754_log+0x358>)
    9a10:	f7fe fba6 	bl	8160 <__aeabi_dsub>
    9a14:	4606      	mov	r6, r0
    9a16:	460f      	mov	r7, r1
    9a18:	4652      	mov	r2, sl
    9a1a:	465b      	mov	r3, fp
    9a1c:	4650      	mov	r0, sl
    9a1e:	4659      	mov	r1, fp
    9a20:	f7fe fd56 	bl	84d0 <__aeabi_dmul>
    9a24:	4602      	mov	r2, r0
    9a26:	460b      	mov	r3, r1
    9a28:	4630      	mov	r0, r6
    9a2a:	4639      	mov	r1, r7
    9a2c:	f7fe fd50 	bl	84d0 <__aeabi_dmul>
    9a30:	4606      	mov	r6, r0
    9a32:	460f      	mov	r7, r1
    9a34:	b914      	cbnz	r4, 9a3c <__ieee754_log+0x124>
    9a36:	4632      	mov	r2, r6
    9a38:	463b      	mov	r3, r7
    9a3a:	e0a0      	b.n	9b7e <__ieee754_log+0x266>
    9a3c:	4620      	mov	r0, r4
    9a3e:	f7fe fcdd 	bl	83fc <__aeabi_i2d>
    9a42:	4680      	mov	r8, r0
    9a44:	4689      	mov	r9, r1
    9a46:	a372      	add	r3, pc, #456	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9a48:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a4c:	f7fe fd40 	bl	84d0 <__aeabi_dmul>
    9a50:	4604      	mov	r4, r0
    9a52:	460d      	mov	r5, r1
    9a54:	4640      	mov	r0, r8
    9a56:	4649      	mov	r1, r9
    9a58:	a36f      	add	r3, pc, #444	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a5e:	f7fe fd37 	bl	84d0 <__aeabi_dmul>
    9a62:	e0a5      	b.n	9bb0 <__ieee754_log+0x298>
    9a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a68:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9a6c:	f7fe fb7a 	bl	8164 <__adddf3>
    9a70:	4602      	mov	r2, r0
    9a72:	460b      	mov	r3, r1
    9a74:	4650      	mov	r0, sl
    9a76:	4659      	mov	r1, fp
    9a78:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9a7c:	f7fe fe52 	bl	8724 <__aeabi_ddiv>
    9a80:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9a84:	3551      	adds	r5, #81	; 0x51
    9a86:	e9cd 0100 	strd	r0, r1, [sp]
    9a8a:	4620      	mov	r0, r4
    9a8c:	4335      	orrs	r5, r6
    9a8e:	f7fe fcb5 	bl	83fc <__aeabi_i2d>
    9a92:	e9dd 2300 	ldrd	r2, r3, [sp]
    9a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9a9a:	4610      	mov	r0, r2
    9a9c:	4619      	mov	r1, r3
    9a9e:	f7fe fd17 	bl	84d0 <__aeabi_dmul>
    9aa2:	4602      	mov	r2, r0
    9aa4:	460b      	mov	r3, r1
    9aa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9aaa:	f7fe fd11 	bl	84d0 <__aeabi_dmul>
    9aae:	4680      	mov	r8, r0
    9ab0:	4689      	mov	r9, r1
    9ab2:	a35d      	add	r3, pc, #372	; (adr r3, 9c28 <__ieee754_log+0x310>)
    9ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ab8:	f7fe fd0a 	bl	84d0 <__aeabi_dmul>
    9abc:	a35c      	add	r3, pc, #368	; (adr r3, 9c30 <__ieee754_log+0x318>)
    9abe:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ac2:	f7fe fb4f 	bl	8164 <__adddf3>
    9ac6:	4642      	mov	r2, r8
    9ac8:	464b      	mov	r3, r9
    9aca:	f7fe fd01 	bl	84d0 <__aeabi_dmul>
    9ace:	a35a      	add	r3, pc, #360	; (adr r3, 9c38 <__ieee754_log+0x320>)
    9ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ad4:	f7fe fb46 	bl	8164 <__adddf3>
    9ad8:	4642      	mov	r2, r8
    9ada:	464b      	mov	r3, r9
    9adc:	f7fe fcf8 	bl	84d0 <__aeabi_dmul>
    9ae0:	a357      	add	r3, pc, #348	; (adr r3, 9c40 <__ieee754_log+0x328>)
    9ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ae6:	f7fe fb3d 	bl	8164 <__adddf3>
    9aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9aee:	f7fe fcef 	bl	84d0 <__aeabi_dmul>
    9af2:	a355      	add	r3, pc, #340	; (adr r3, 9c48 <__ieee754_log+0x330>)
    9af4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9af8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9afc:	4640      	mov	r0, r8
    9afe:	4649      	mov	r1, r9
    9b00:	f7fe fce6 	bl	84d0 <__aeabi_dmul>
    9b04:	a352      	add	r3, pc, #328	; (adr r3, 9c50 <__ieee754_log+0x338>)
    9b06:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b0a:	f7fe fb2b 	bl	8164 <__adddf3>
    9b0e:	4642      	mov	r2, r8
    9b10:	464b      	mov	r3, r9
    9b12:	f7fe fcdd 	bl	84d0 <__aeabi_dmul>
    9b16:	a350      	add	r3, pc, #320	; (adr r3, 9c58 <__ieee754_log+0x340>)
    9b18:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b1c:	f7fe fb22 	bl	8164 <__adddf3>
    9b20:	4642      	mov	r2, r8
    9b22:	464b      	mov	r3, r9
    9b24:	f7fe fcd4 	bl	84d0 <__aeabi_dmul>
    9b28:	4602      	mov	r2, r0
    9b2a:	460b      	mov	r3, r1
    9b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9b30:	f7fe fb18 	bl	8164 <__adddf3>
    9b34:	2d00      	cmp	r5, #0
    9b36:	4680      	mov	r8, r0
    9b38:	4689      	mov	r9, r1
    9b3a:	dd48      	ble.n	9bce <__ieee754_log+0x2b6>
    9b3c:	2200      	movs	r2, #0
    9b3e:	4b4c      	ldr	r3, [pc, #304]	; (9c70 <__ieee754_log+0x358>)
    9b40:	4650      	mov	r0, sl
    9b42:	4659      	mov	r1, fp
    9b44:	f7fe fcc4 	bl	84d0 <__aeabi_dmul>
    9b48:	4652      	mov	r2, sl
    9b4a:	465b      	mov	r3, fp
    9b4c:	f7fe fcc0 	bl	84d0 <__aeabi_dmul>
    9b50:	4602      	mov	r2, r0
    9b52:	460b      	mov	r3, r1
    9b54:	4606      	mov	r6, r0
    9b56:	460f      	mov	r7, r1
    9b58:	4640      	mov	r0, r8
    9b5a:	4649      	mov	r1, r9
    9b5c:	f7fe fb02 	bl	8164 <__adddf3>
    9b60:	e9dd 2300 	ldrd	r2, r3, [sp]
    9b64:	f7fe fcb4 	bl	84d0 <__aeabi_dmul>
    9b68:	4680      	mov	r8, r0
    9b6a:	4689      	mov	r9, r1
    9b6c:	b964      	cbnz	r4, 9b88 <__ieee754_log+0x270>
    9b6e:	4602      	mov	r2, r0
    9b70:	460b      	mov	r3, r1
    9b72:	4630      	mov	r0, r6
    9b74:	4639      	mov	r1, r7
    9b76:	f7fe faf3 	bl	8160 <__aeabi_dsub>
    9b7a:	4602      	mov	r2, r0
    9b7c:	460b      	mov	r3, r1
    9b7e:	4650      	mov	r0, sl
    9b80:	4659      	mov	r1, fp
    9b82:	f7fe faed 	bl	8160 <__aeabi_dsub>
    9b86:	e6da      	b.n	993e <__ieee754_log+0x26>
    9b88:	a321      	add	r3, pc, #132	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9b92:	f7fe fc9d 	bl	84d0 <__aeabi_dmul>
    9b96:	4604      	mov	r4, r0
    9b98:	460d      	mov	r5, r1
    9b9a:	a31f      	add	r3, pc, #124	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9ba4:	f7fe fc94 	bl	84d0 <__aeabi_dmul>
    9ba8:	4642      	mov	r2, r8
    9baa:	464b      	mov	r3, r9
    9bac:	f7fe fada 	bl	8164 <__adddf3>
    9bb0:	4602      	mov	r2, r0
    9bb2:	460b      	mov	r3, r1
    9bb4:	4630      	mov	r0, r6
    9bb6:	4639      	mov	r1, r7
    9bb8:	f7fe fad2 	bl	8160 <__aeabi_dsub>
    9bbc:	4652      	mov	r2, sl
    9bbe:	465b      	mov	r3, fp
    9bc0:	f7fe face 	bl	8160 <__aeabi_dsub>
    9bc4:	4602      	mov	r2, r0
    9bc6:	460b      	mov	r3, r1
    9bc8:	4620      	mov	r0, r4
    9bca:	4629      	mov	r1, r5
    9bcc:	e7d9      	b.n	9b82 <__ieee754_log+0x26a>
    9bce:	4602      	mov	r2, r0
    9bd0:	460b      	mov	r3, r1
    9bd2:	4650      	mov	r0, sl
    9bd4:	4659      	mov	r1, fp
    9bd6:	f7fe fac3 	bl	8160 <__aeabi_dsub>
    9bda:	e9dd 2300 	ldrd	r2, r3, [sp]
    9bde:	f7fe fc77 	bl	84d0 <__aeabi_dmul>
    9be2:	4606      	mov	r6, r0
    9be4:	460f      	mov	r7, r1
    9be6:	2c00      	cmp	r4, #0
    9be8:	f43f af25 	beq.w	9a36 <__ieee754_log+0x11e>
    9bec:	a308      	add	r3, pc, #32	; (adr r3, 9c10 <__ieee754_log+0x2f8>)
    9bee:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bf6:	f7fe fc6b 	bl	84d0 <__aeabi_dmul>
    9bfa:	4604      	mov	r4, r0
    9bfc:	460d      	mov	r5, r1
    9bfe:	a306      	add	r3, pc, #24	; (adr r3, 9c18 <__ieee754_log+0x300>)
    9c00:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c08:	e729      	b.n	9a5e <__ieee754_log+0x146>
    9c0a:	2000      	movs	r0, #0
    9c0c:	2100      	movs	r1, #0
    9c0e:	e696      	b.n	993e <__ieee754_log+0x26>
    9c10:	fee00000 	.word	0xfee00000
    9c14:	3fe62e42 	.word	0x3fe62e42
    9c18:	35793c76 	.word	0x35793c76
    9c1c:	3dea39ef 	.word	0x3dea39ef
    9c20:	55555555 	.word	0x55555555
    9c24:	3fd55555 	.word	0x3fd55555
    9c28:	df3e5244 	.word	0xdf3e5244
    9c2c:	3fc2f112 	.word	0x3fc2f112
    9c30:	96cb03de 	.word	0x96cb03de
    9c34:	3fc74664 	.word	0x3fc74664
    9c38:	94229359 	.word	0x94229359
    9c3c:	3fd24924 	.word	0x3fd24924
    9c40:	55555593 	.word	0x55555593
    9c44:	3fe55555 	.word	0x3fe55555
    9c48:	d078c69f 	.word	0xd078c69f
    9c4c:	3fc39a09 	.word	0x3fc39a09
    9c50:	1d8e78af 	.word	0x1d8e78af
    9c54:	3fcc71c5 	.word	0x3fcc71c5
    9c58:	9997fa04 	.word	0x9997fa04
    9c5c:	3fd99999 	.word	0x3fd99999
    9c60:	c3500000 	.word	0xc3500000
    9c64:	43500000 	.word	0x43500000
    9c68:	7fefffff 	.word	0x7fefffff
    9c6c:	3ff00000 	.word	0x3ff00000
    9c70:	3fe00000 	.word	0x3fe00000
    9c74:	00000000 	.word	0x00000000

00009c78 <_dtoa_r>:
    9c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c7c:	4614      	mov	r4, r2
    9c7e:	b097      	sub	sp, #92	; 0x5c
    9c80:	461d      	mov	r5, r3
    9c82:	6a47      	ldr	r7, [r0, #36]	; 0x24
    9c84:	4683      	mov	fp, r0
    9c86:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    9c88:	e9cd 4504 	strd	r4, r5, [sp, #16]
    9c8c:	b97f      	cbnz	r7, 9cae <_dtoa_r+0x36>
    9c8e:	2010      	movs	r0, #16
    9c90:	f018 fada 	bl	22248 <malloc>
    9c94:	4602      	mov	r2, r0
    9c96:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    9c9a:	b920      	cbnz	r0, 9ca6 <_dtoa_r+0x2e>
    9c9c:	4ba2      	ldr	r3, [pc, #648]	; (9f28 <_dtoa_r+0x2b0>)
    9c9e:	21ea      	movs	r1, #234	; 0xea
    9ca0:	48a2      	ldr	r0, [pc, #648]	; (9f2c <_dtoa_r+0x2b4>)
    9ca2:	f018 ff09 	bl	22ab8 <__assert_func>
    9ca6:	e9c0 7701 	strd	r7, r7, [r0, #4]
    9caa:	6007      	str	r7, [r0, #0]
    9cac:	60c7      	str	r7, [r0, #12]
    9cae:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cb2:	6819      	ldr	r1, [r3, #0]
    9cb4:	b159      	cbz	r1, 9cce <_dtoa_r+0x56>
    9cb6:	685a      	ldr	r2, [r3, #4]
    9cb8:	2301      	movs	r3, #1
    9cba:	4658      	mov	r0, fp
    9cbc:	4093      	lsls	r3, r2
    9cbe:	604a      	str	r2, [r1, #4]
    9cc0:	608b      	str	r3, [r1, #8]
    9cc2:	f019 f839 	bl	22d38 <_Bfree>
    9cc6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cca:	2200      	movs	r2, #0
    9ccc:	601a      	str	r2, [r3, #0]
    9cce:	1e2b      	subs	r3, r5, #0
    9cd0:	bfb7      	itett	lt
    9cd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9cd6:	2300      	movge	r3, #0
    9cd8:	2201      	movlt	r2, #1
    9cda:	9305      	strlt	r3, [sp, #20]
    9cdc:	bfa8      	it	ge
    9cde:	6033      	strge	r3, [r6, #0]
    9ce0:	9f05      	ldr	r7, [sp, #20]
    9ce2:	4b93      	ldr	r3, [pc, #588]	; (9f30 <_dtoa_r+0x2b8>)
    9ce4:	bfb8      	it	lt
    9ce6:	6032      	strlt	r2, [r6, #0]
    9ce8:	43bb      	bics	r3, r7
    9cea:	d119      	bne.n	9d20 <_dtoa_r+0xa8>
    9cec:	f242 730f 	movw	r3, #9999	; 0x270f
    9cf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9cf2:	6013      	str	r3, [r2, #0]
    9cf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9cf8:	4323      	orrs	r3, r4
    9cfa:	f000 85e0 	beq.w	a8be <_dtoa_r+0xc46>
    9cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d00:	b953      	cbnz	r3, 9d18 <_dtoa_r+0xa0>
    9d02:	4b8c      	ldr	r3, [pc, #560]	; (9f34 <_dtoa_r+0x2bc>)
    9d04:	e021      	b.n	9d4a <_dtoa_r+0xd2>
    9d06:	4b8c      	ldr	r3, [pc, #560]	; (9f38 <_dtoa_r+0x2c0>)
    9d08:	9308      	str	r3, [sp, #32]
    9d0a:	3308      	adds	r3, #8
    9d0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d0e:	6013      	str	r3, [r2, #0]
    9d10:	9808      	ldr	r0, [sp, #32]
    9d12:	b017      	add	sp, #92	; 0x5c
    9d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d18:	4b86      	ldr	r3, [pc, #536]	; (9f34 <_dtoa_r+0x2bc>)
    9d1a:	9308      	str	r3, [sp, #32]
    9d1c:	3303      	adds	r3, #3
    9d1e:	e7f5      	b.n	9d0c <_dtoa_r+0x94>
    9d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9d24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d2c:	2200      	movs	r2, #0
    9d2e:	2300      	movs	r3, #0
    9d30:	f7ff f94e 	bl	8fd0 <__aeabi_dcmpeq>
    9d34:	4680      	mov	r8, r0
    9d36:	b150      	cbz	r0, 9d4e <_dtoa_r+0xd6>
    9d38:	2301      	movs	r3, #1
    9d3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d3c:	6013      	str	r3, [r2, #0]
    9d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d40:	b113      	cbz	r3, 9d48 <_dtoa_r+0xd0>
    9d42:	4b7e      	ldr	r3, [pc, #504]	; (9f3c <_dtoa_r+0x2c4>)
    9d44:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d46:	6013      	str	r3, [r2, #0]
    9d48:	4b7d      	ldr	r3, [pc, #500]	; (9f40 <_dtoa_r+0x2c8>)
    9d4a:	9308      	str	r3, [sp, #32]
    9d4c:	e7e0      	b.n	9d10 <_dtoa_r+0x98>
    9d4e:	ab14      	add	r3, sp, #80	; 0x50
    9d50:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9d54:	4658      	mov	r0, fp
    9d56:	9301      	str	r3, [sp, #4]
    9d58:	ab15      	add	r3, sp, #84	; 0x54
    9d5a:	9300      	str	r3, [sp, #0]
    9d5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9d60:	f019 fa70 	bl	23244 <__d2b>
    9d64:	9003      	str	r0, [sp, #12]
    9d66:	2e00      	cmp	r6, #0
    9d68:	d078      	beq.n	9e5c <_dtoa_r+0x1e4>
    9d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d6c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9d70:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9d78:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9d7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9d84:	4619      	mov	r1, r3
    9d86:	2200      	movs	r2, #0
    9d88:	4b6e      	ldr	r3, [pc, #440]	; (9f44 <_dtoa_r+0x2cc>)
    9d8a:	f7fe f9e9 	bl	8160 <__aeabi_dsub>
    9d8e:	a360      	add	r3, pc, #384	; (adr r3, 9f10 <_dtoa_r+0x298>)
    9d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d94:	f7fe fb9c 	bl	84d0 <__aeabi_dmul>
    9d98:	a35f      	add	r3, pc, #380	; (adr r3, 9f18 <_dtoa_r+0x2a0>)
    9d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d9e:	f7fe f9e1 	bl	8164 <__adddf3>
    9da2:	4604      	mov	r4, r0
    9da4:	460d      	mov	r5, r1
    9da6:	4630      	mov	r0, r6
    9da8:	f7fe fb28 	bl	83fc <__aeabi_i2d>
    9dac:	a35c      	add	r3, pc, #368	; (adr r3, 9f20 <_dtoa_r+0x2a8>)
    9dae:	e9d3 2300 	ldrd	r2, r3, [r3]
    9db2:	f7fe fb8d 	bl	84d0 <__aeabi_dmul>
    9db6:	4602      	mov	r2, r0
    9db8:	460b      	mov	r3, r1
    9dba:	4620      	mov	r0, r4
    9dbc:	4629      	mov	r1, r5
    9dbe:	f7fe f9d1 	bl	8164 <__adddf3>
    9dc2:	4604      	mov	r4, r0
    9dc4:	460d      	mov	r5, r1
    9dc6:	f7ff f94b 	bl	9060 <__aeabi_d2iz>
    9dca:	2200      	movs	r2, #0
    9dcc:	4607      	mov	r7, r0
    9dce:	2300      	movs	r3, #0
    9dd0:	4620      	mov	r0, r4
    9dd2:	4629      	mov	r1, r5
    9dd4:	f7ff f906 	bl	8fe4 <__aeabi_dcmplt>
    9dd8:	b140      	cbz	r0, 9dec <_dtoa_r+0x174>
    9dda:	4638      	mov	r0, r7
    9ddc:	f7fe fb0e 	bl	83fc <__aeabi_i2d>
    9de0:	4622      	mov	r2, r4
    9de2:	462b      	mov	r3, r5
    9de4:	f7ff f8f4 	bl	8fd0 <__aeabi_dcmpeq>
    9de8:	b900      	cbnz	r0, 9dec <_dtoa_r+0x174>
    9dea:	3f01      	subs	r7, #1
    9dec:	2f16      	cmp	r7, #22
    9dee:	d854      	bhi.n	9e9a <_dtoa_r+0x222>
    9df0:	4b55      	ldr	r3, [pc, #340]	; (9f48 <_dtoa_r+0x2d0>)
    9df2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dfe:	f7ff f8f1 	bl	8fe4 <__aeabi_dcmplt>
    9e02:	2800      	cmp	r0, #0
    9e04:	d04b      	beq.n	9e9e <_dtoa_r+0x226>
    9e06:	3f01      	subs	r7, #1
    9e08:	2300      	movs	r3, #0
    9e0a:	9312      	str	r3, [sp, #72]	; 0x48
    9e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9e0e:	1b9b      	subs	r3, r3, r6
    9e10:	1e5a      	subs	r2, r3, #1
    9e12:	bf4c      	ite	mi
    9e14:	f1c3 0301 	rsbmi	r3, r3, #1
    9e18:	2300      	movpl	r3, #0
    9e1a:	920a      	str	r2, [sp, #40]	; 0x28
    9e1c:	bf45      	ittet	mi
    9e1e:	9306      	strmi	r3, [sp, #24]
    9e20:	2300      	movmi	r3, #0
    9e22:	9306      	strpl	r3, [sp, #24]
    9e24:	930a      	strmi	r3, [sp, #40]	; 0x28
    9e26:	2f00      	cmp	r7, #0
    9e28:	db3b      	blt.n	9ea2 <_dtoa_r+0x22a>
    9e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e2c:	970f      	str	r7, [sp, #60]	; 0x3c
    9e2e:	443b      	add	r3, r7
    9e30:	930a      	str	r3, [sp, #40]	; 0x28
    9e32:	2300      	movs	r3, #0
    9e34:	930b      	str	r3, [sp, #44]	; 0x2c
    9e36:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e38:	2b09      	cmp	r3, #9
    9e3a:	f200 8089 	bhi.w	9f50 <_dtoa_r+0x2d8>
    9e3e:	2b05      	cmp	r3, #5
    9e40:	bfc5      	ittet	gt
    9e42:	3b04      	subgt	r3, #4
    9e44:	2400      	movgt	r4, #0
    9e46:	2401      	movle	r4, #1
    9e48:	9320      	strgt	r3, [sp, #128]	; 0x80
    9e4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e4c:	3b02      	subs	r3, #2
    9e4e:	2b03      	cmp	r3, #3
    9e50:	f200 8089 	bhi.w	9f66 <_dtoa_r+0x2ee>
    9e54:	e8df f003 	tbb	[pc, r3]
    9e58:	59383a2d 	.word	0x59383a2d
    9e5c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    9e60:	441e      	add	r6, r3
    9e62:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9e66:	2b20      	cmp	r3, #32
    9e68:	bfc9      	itett	gt
    9e6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    9e6e:	f1c3 0320 	rsble	r3, r3, #32
    9e72:	409f      	lslgt	r7, r3
    9e74:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    9e78:	bfd8      	it	le
    9e7a:	fa04 f003 	lslle.w	r0, r4, r3
    9e7e:	f106 36ff 	add.w	r6, r6, #4294967295
    9e82:	bfc4      	itt	gt
    9e84:	fa24 f303 	lsrgt.w	r3, r4, r3
    9e88:	ea47 0003 	orrgt.w	r0, r7, r3
    9e8c:	f7fe faa6 	bl	83dc <__aeabi_ui2d>
    9e90:	2201      	movs	r2, #1
    9e92:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    9e96:	9213      	str	r2, [sp, #76]	; 0x4c
    9e98:	e774      	b.n	9d84 <_dtoa_r+0x10c>
    9e9a:	2301      	movs	r3, #1
    9e9c:	e7b5      	b.n	9e0a <_dtoa_r+0x192>
    9e9e:	9012      	str	r0, [sp, #72]	; 0x48
    9ea0:	e7b4      	b.n	9e0c <_dtoa_r+0x194>
    9ea2:	9b06      	ldr	r3, [sp, #24]
    9ea4:	1bdb      	subs	r3, r3, r7
    9ea6:	9306      	str	r3, [sp, #24]
    9ea8:	427b      	negs	r3, r7
    9eaa:	930b      	str	r3, [sp, #44]	; 0x2c
    9eac:	2300      	movs	r3, #0
    9eae:	930f      	str	r3, [sp, #60]	; 0x3c
    9eb0:	e7c1      	b.n	9e36 <_dtoa_r+0x1be>
    9eb2:	2300      	movs	r3, #0
    9eb4:	930e      	str	r3, [sp, #56]	; 0x38
    9eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9eb8:	2b00      	cmp	r3, #0
    9eba:	dc57      	bgt.n	9f6c <_dtoa_r+0x2f4>
    9ebc:	2301      	movs	r3, #1
    9ebe:	4699      	mov	r9, r3
    9ec0:	461a      	mov	r2, r3
    9ec2:	9309      	str	r3, [sp, #36]	; 0x24
    9ec4:	9221      	str	r2, [sp, #132]	; 0x84
    9ec6:	e00c      	b.n	9ee2 <_dtoa_r+0x26a>
    9ec8:	2301      	movs	r3, #1
    9eca:	e7f3      	b.n	9eb4 <_dtoa_r+0x23c>
    9ecc:	2300      	movs	r3, #0
    9ece:	930e      	str	r3, [sp, #56]	; 0x38
    9ed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ed2:	18fb      	adds	r3, r7, r3
    9ed4:	f103 0901 	add.w	r9, r3, #1
    9ed8:	9309      	str	r3, [sp, #36]	; 0x24
    9eda:	464b      	mov	r3, r9
    9edc:	2b01      	cmp	r3, #1
    9ede:	bfb8      	it	lt
    9ee0:	2301      	movlt	r3, #1
    9ee2:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    9ee6:	2100      	movs	r1, #0
    9ee8:	2204      	movs	r2, #4
    9eea:	f102 0514 	add.w	r5, r2, #20
    9eee:	429d      	cmp	r5, r3
    9ef0:	d940      	bls.n	9f74 <_dtoa_r+0x2fc>
    9ef2:	6041      	str	r1, [r0, #4]
    9ef4:	4658      	mov	r0, fp
    9ef6:	f018 fedf 	bl	22cb8 <_Balloc>
    9efa:	9008      	str	r0, [sp, #32]
    9efc:	2800      	cmp	r0, #0
    9efe:	d13c      	bne.n	9f7a <_dtoa_r+0x302>
    9f00:	4b12      	ldr	r3, [pc, #72]	; (9f4c <_dtoa_r+0x2d4>)
    9f02:	4602      	mov	r2, r0
    9f04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9f08:	e6ca      	b.n	9ca0 <_dtoa_r+0x28>
    9f0a:	2301      	movs	r3, #1
    9f0c:	e7df      	b.n	9ece <_dtoa_r+0x256>
    9f0e:	bf00      	nop
    9f10:	636f4361 	.word	0x636f4361
    9f14:	3fd287a7 	.word	0x3fd287a7
    9f18:	8b60c8b3 	.word	0x8b60c8b3
    9f1c:	3fc68a28 	.word	0x3fc68a28
    9f20:	509f79fb 	.word	0x509f79fb
    9f24:	3fd34413 	.word	0x3fd34413
    9f28:	0002fd55 	.word	0x0002fd55
    9f2c:	0002fd6c 	.word	0x0002fd6c
    9f30:	7ff00000 	.word	0x7ff00000
    9f34:	0002fd51 	.word	0x0002fd51
    9f38:	0002fd48 	.word	0x0002fd48
    9f3c:	0002fb7d 	.word	0x0002fb7d
    9f40:	0002fb7c 	.word	0x0002fb7c
    9f44:	3ff80000 	.word	0x3ff80000
    9f48:	000298c0 	.word	0x000298c0
    9f4c:	0002fde0 	.word	0x0002fde0
    9f50:	2401      	movs	r4, #1
    9f52:	2300      	movs	r3, #0
    9f54:	940e      	str	r4, [sp, #56]	; 0x38
    9f56:	9320      	str	r3, [sp, #128]	; 0x80
    9f58:	f04f 33ff 	mov.w	r3, #4294967295
    9f5c:	2200      	movs	r2, #0
    9f5e:	4699      	mov	r9, r3
    9f60:	9309      	str	r3, [sp, #36]	; 0x24
    9f62:	2312      	movs	r3, #18
    9f64:	e7ae      	b.n	9ec4 <_dtoa_r+0x24c>
    9f66:	2301      	movs	r3, #1
    9f68:	930e      	str	r3, [sp, #56]	; 0x38
    9f6a:	e7f5      	b.n	9f58 <_dtoa_r+0x2e0>
    9f6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f6e:	4699      	mov	r9, r3
    9f70:	9309      	str	r3, [sp, #36]	; 0x24
    9f72:	e7b6      	b.n	9ee2 <_dtoa_r+0x26a>
    9f74:	3101      	adds	r1, #1
    9f76:	0052      	lsls	r2, r2, #1
    9f78:	e7b7      	b.n	9eea <_dtoa_r+0x272>
    9f7a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9f7e:	f1b9 0f0e 	cmp.w	r9, #14
    9f82:	9a08      	ldr	r2, [sp, #32]
    9f84:	601a      	str	r2, [r3, #0]
    9f86:	d86f      	bhi.n	a068 <_dtoa_r+0x3f0>
    9f88:	2c00      	cmp	r4, #0
    9f8a:	d06d      	beq.n	a068 <_dtoa_r+0x3f0>
    9f8c:	2f00      	cmp	r7, #0
    9f8e:	dd36      	ble.n	9ffe <_dtoa_r+0x386>
    9f90:	f007 020f 	and.w	r2, r7, #15
    9f94:	4ba0      	ldr	r3, [pc, #640]	; (a218 <_dtoa_r+0x5a0>)
    9f96:	05f8      	lsls	r0, r7, #23
    9f98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
    9fa0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    9fa4:	ea4f 1427 	mov.w	r4, r7, asr #4
    9fa8:	d517      	bpl.n	9fda <_dtoa_r+0x362>
    9faa:	4b9c      	ldr	r3, [pc, #624]	; (a21c <_dtoa_r+0x5a4>)
    9fac:	f004 040f 	and.w	r4, r4, #15
    9fb0:	f04f 0803 	mov.w	r8, #3
    9fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9fbc:	f7fe fbb2 	bl	8724 <__aeabi_ddiv>
    9fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9fc4:	4d95      	ldr	r5, [pc, #596]	; (a21c <_dtoa_r+0x5a4>)
    9fc6:	b95c      	cbnz	r4, 9fe0 <_dtoa_r+0x368>
    9fc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9fd0:	f7fe fba8 	bl	8724 <__aeabi_ddiv>
    9fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9fd8:	e02b      	b.n	a032 <_dtoa_r+0x3ba>
    9fda:	f04f 0802 	mov.w	r8, #2
    9fde:	e7f1      	b.n	9fc4 <_dtoa_r+0x34c>
    9fe0:	07e1      	lsls	r1, r4, #31
    9fe2:	d509      	bpl.n	9ff8 <_dtoa_r+0x380>
    9fe4:	f108 0801 	add.w	r8, r8, #1
    9fe8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    9fec:	e9d5 2300 	ldrd	r2, r3, [r5]
    9ff0:	f7fe fa6e 	bl	84d0 <__aeabi_dmul>
    9ff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    9ff8:	1064      	asrs	r4, r4, #1
    9ffa:	3508      	adds	r5, #8
    9ffc:	e7e3      	b.n	9fc6 <_dtoa_r+0x34e>
    9ffe:	f000 8107 	beq.w	a210 <_dtoa_r+0x598>
    a002:	427c      	negs	r4, r7
    a004:	4b84      	ldr	r3, [pc, #528]	; (a218 <_dtoa_r+0x5a0>)
    a006:	4d85      	ldr	r5, [pc, #532]	; (a21c <_dtoa_r+0x5a4>)
    a008:	f04f 0802 	mov.w	r8, #2
    a00c:	f004 020f 	and.w	r2, r4, #15
    a010:	1124      	asrs	r4, r4, #4
    a012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a01e:	f7fe fa57 	bl	84d0 <__aeabi_dmul>
    a022:	2300      	movs	r3, #0
    a024:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a028:	2c00      	cmp	r4, #0
    a02a:	f040 80e5 	bne.w	a1f8 <_dtoa_r+0x580>
    a02e:	2b00      	cmp	r3, #0
    a030:	d1d0      	bne.n	9fd4 <_dtoa_r+0x35c>
    a032:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a034:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a038:	2b00      	cmp	r3, #0
    a03a:	f000 814c 	beq.w	a2d6 <_dtoa_r+0x65e>
    a03e:	2200      	movs	r2, #0
    a040:	4b77      	ldr	r3, [pc, #476]	; (a220 <_dtoa_r+0x5a8>)
    a042:	4620      	mov	r0, r4
    a044:	4629      	mov	r1, r5
    a046:	f7fe ffcd 	bl	8fe4 <__aeabi_dcmplt>
    a04a:	2800      	cmp	r0, #0
    a04c:	f000 8143 	beq.w	a2d6 <_dtoa_r+0x65e>
    a050:	f1b9 0f00 	cmp.w	r9, #0
    a054:	f000 813f 	beq.w	a2d6 <_dtoa_r+0x65e>
    a058:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a05a:	2b00      	cmp	r3, #0
    a05c:	f300 80e4 	bgt.w	a228 <_dtoa_r+0x5b0>
    a060:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a064:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a068:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a06a:	2b00      	cmp	r3, #0
    a06c:	db02      	blt.n	a074 <_dtoa_r+0x3fc>
    a06e:	2f0e      	cmp	r7, #14
    a070:	f340 8242 	ble.w	a4f8 <_dtoa_r+0x880>
    a074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a076:	2a00      	cmp	r2, #0
    a078:	f040 8267 	bne.w	a54a <_dtoa_r+0x8d2>
    a07c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a07e:	2500      	movs	r5, #0
    a080:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a084:	f1b8 0f00 	cmp.w	r8, #0
    a088:	d00d      	beq.n	a0a6 <_dtoa_r+0x42e>
    a08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a08c:	2b00      	cmp	r3, #0
    a08e:	dd0a      	ble.n	a0a6 <_dtoa_r+0x42e>
    a090:	4543      	cmp	r3, r8
    a092:	9a06      	ldr	r2, [sp, #24]
    a094:	bfa8      	it	ge
    a096:	4643      	movge	r3, r8
    a098:	1ad2      	subs	r2, r2, r3
    a09a:	eba8 0803 	sub.w	r8, r8, r3
    a09e:	9206      	str	r2, [sp, #24]
    a0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0a2:	1ad3      	subs	r3, r2, r3
    a0a4:	930a      	str	r3, [sp, #40]	; 0x28
    a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0a8:	b30b      	cbz	r3, a0ee <_dtoa_r+0x476>
    a0aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0ac:	2b00      	cmp	r3, #0
    a0ae:	f000 82a6 	beq.w	a5fe <_dtoa_r+0x986>
    a0b2:	2c00      	cmp	r4, #0
    a0b4:	f000 82a1 	beq.w	a5fa <_dtoa_r+0x982>
    a0b8:	4629      	mov	r1, r5
    a0ba:	4622      	mov	r2, r4
    a0bc:	4658      	mov	r0, fp
    a0be:	f018 ff65 	bl	22f8c <__pow5mult>
    a0c2:	9a03      	ldr	r2, [sp, #12]
    a0c4:	4601      	mov	r1, r0
    a0c6:	4605      	mov	r5, r0
    a0c8:	4658      	mov	r0, fp
    a0ca:	f018 feb5 	bl	22e38 <__multiply>
    a0ce:	9903      	ldr	r1, [sp, #12]
    a0d0:	4606      	mov	r6, r0
    a0d2:	4658      	mov	r0, fp
    a0d4:	f018 fe30 	bl	22d38 <_Bfree>
    a0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0da:	1b1b      	subs	r3, r3, r4
    a0dc:	930b      	str	r3, [sp, #44]	; 0x2c
    a0de:	f000 8291 	beq.w	a604 <_dtoa_r+0x98c>
    a0e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a0e4:	4631      	mov	r1, r6
    a0e6:	4658      	mov	r0, fp
    a0e8:	f018 ff50 	bl	22f8c <__pow5mult>
    a0ec:	9003      	str	r0, [sp, #12]
    a0ee:	2101      	movs	r1, #1
    a0f0:	4658      	mov	r0, fp
    a0f2:	f018 fe8b 	bl	22e0c <__i2b>
    a0f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0f8:	4604      	mov	r4, r0
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	f000 8284 	beq.w	a608 <_dtoa_r+0x990>
    a100:	461a      	mov	r2, r3
    a102:	4601      	mov	r1, r0
    a104:	4658      	mov	r0, fp
    a106:	f018 ff41 	bl	22f8c <__pow5mult>
    a10a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a10c:	4604      	mov	r4, r0
    a10e:	2b01      	cmp	r3, #1
    a110:	dc03      	bgt.n	a11a <_dtoa_r+0x4a2>
    a112:	9b04      	ldr	r3, [sp, #16]
    a114:	2b00      	cmp	r3, #0
    a116:	f000 827c 	beq.w	a612 <_dtoa_r+0x99a>
    a11a:	2600      	movs	r6, #0
    a11c:	6923      	ldr	r3, [r4, #16]
    a11e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a122:	6918      	ldr	r0, [r3, #16]
    a124:	f01e fda5 	bl	28c72 <__hi0bits>
    a128:	f1c0 0020 	rsb	r0, r0, #32
    a12c:	960f      	str	r6, [sp, #60]	; 0x3c
    a12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a130:	4418      	add	r0, r3
    a132:	f010 001f 	ands.w	r0, r0, #31
    a136:	f000 8291 	beq.w	a65c <_dtoa_r+0x9e4>
    a13a:	f1c0 0320 	rsb	r3, r0, #32
    a13e:	2b04      	cmp	r3, #4
    a140:	f340 8281 	ble.w	a646 <_dtoa_r+0x9ce>
    a144:	f1c0 001c 	rsb	r0, r0, #28
    a148:	9b06      	ldr	r3, [sp, #24]
    a14a:	4403      	add	r3, r0
    a14c:	4480      	add	r8, r0
    a14e:	9306      	str	r3, [sp, #24]
    a150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a152:	4403      	add	r3, r0
    a154:	930a      	str	r3, [sp, #40]	; 0x28
    a156:	9b06      	ldr	r3, [sp, #24]
    a158:	2b00      	cmp	r3, #0
    a15a:	dd05      	ble.n	a168 <_dtoa_r+0x4f0>
    a15c:	461a      	mov	r2, r3
    a15e:	9903      	ldr	r1, [sp, #12]
    a160:	4658      	mov	r0, fp
    a162:	f018 ff6d 	bl	23040 <__lshift>
    a166:	9003      	str	r0, [sp, #12]
    a168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a16a:	2b00      	cmp	r3, #0
    a16c:	dd05      	ble.n	a17a <_dtoa_r+0x502>
    a16e:	4621      	mov	r1, r4
    a170:	461a      	mov	r2, r3
    a172:	4658      	mov	r0, fp
    a174:	f018 ff64 	bl	23040 <__lshift>
    a178:	4604      	mov	r4, r0
    a17a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a17c:	2b00      	cmp	r3, #0
    a17e:	f000 8276 	beq.w	a66e <_dtoa_r+0x9f6>
    a182:	4621      	mov	r1, r4
    a184:	9803      	ldr	r0, [sp, #12]
    a186:	f01e fdc3 	bl	28d10 <__mcmp>
    a18a:	2800      	cmp	r0, #0
    a18c:	f280 826f 	bge.w	a66e <_dtoa_r+0x9f6>
    a190:	2300      	movs	r3, #0
    a192:	220a      	movs	r2, #10
    a194:	9903      	ldr	r1, [sp, #12]
    a196:	4658      	mov	r0, fp
    a198:	f018 fdf0 	bl	22d7c <__multadd>
    a19c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a19e:	1e7e      	subs	r6, r7, #1
    a1a0:	9003      	str	r0, [sp, #12]
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	f000 825c 	beq.w	a660 <_dtoa_r+0x9e8>
    a1a8:	2300      	movs	r3, #0
    a1aa:	4629      	mov	r1, r5
    a1ac:	220a      	movs	r2, #10
    a1ae:	4658      	mov	r0, fp
    a1b0:	f018 fde4 	bl	22d7c <__multadd>
    a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1b6:	4605      	mov	r5, r0
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	dc03      	bgt.n	a1c4 <_dtoa_r+0x54c>
    a1bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a1be:	2b02      	cmp	r3, #2
    a1c0:	f300 825e 	bgt.w	a680 <_dtoa_r+0xa08>
    a1c4:	f1b8 0f00 	cmp.w	r8, #0
    a1c8:	dd05      	ble.n	a1d6 <_dtoa_r+0x55e>
    a1ca:	4629      	mov	r1, r5
    a1cc:	4642      	mov	r2, r8
    a1ce:	4658      	mov	r0, fp
    a1d0:	f018 ff36 	bl	23040 <__lshift>
    a1d4:	4605      	mov	r5, r0
    a1d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1d8:	2b00      	cmp	r3, #0
    a1da:	f000 82d0 	beq.w	a77e <_dtoa_r+0xb06>
    a1de:	6869      	ldr	r1, [r5, #4]
    a1e0:	4658      	mov	r0, fp
    a1e2:	f018 fd69 	bl	22cb8 <_Balloc>
    a1e6:	4607      	mov	r7, r0
    a1e8:	2800      	cmp	r0, #0
    a1ea:	f040 827f 	bne.w	a6ec <_dtoa_r+0xa74>
    a1ee:	4b0d      	ldr	r3, [pc, #52]	; (a224 <_dtoa_r+0x5ac>)
    a1f0:	4602      	mov	r2, r0
    a1f2:	f240 21ea 	movw	r1, #746	; 0x2ea
    a1f6:	e553      	b.n	9ca0 <_dtoa_r+0x28>
    a1f8:	07e2      	lsls	r2, r4, #31
    a1fa:	d506      	bpl.n	a20a <_dtoa_r+0x592>
    a1fc:	f108 0801 	add.w	r8, r8, #1
    a200:	e9d5 2300 	ldrd	r2, r3, [r5]
    a204:	f7fe f964 	bl	84d0 <__aeabi_dmul>
    a208:	2301      	movs	r3, #1
    a20a:	1064      	asrs	r4, r4, #1
    a20c:	3508      	adds	r5, #8
    a20e:	e70b      	b.n	a028 <_dtoa_r+0x3b0>
    a210:	f04f 0802 	mov.w	r8, #2
    a214:	e70d      	b.n	a032 <_dtoa_r+0x3ba>
    a216:	bf00      	nop
    a218:	000298c0 	.word	0x000298c0
    a21c:	00029898 	.word	0x00029898
    a220:	3ff00000 	.word	0x3ff00000
    a224:	0002fde0 	.word	0x0002fde0
    a228:	4620      	mov	r0, r4
    a22a:	2200      	movs	r2, #0
    a22c:	4bac      	ldr	r3, [pc, #688]	; (a4e0 <_dtoa_r+0x868>)
    a22e:	4629      	mov	r1, r5
    a230:	f7fe f94e 	bl	84d0 <__aeabi_dmul>
    a234:	1e7e      	subs	r6, r7, #1
    a236:	f108 0801 	add.w	r8, r8, #1
    a23a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a23c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a240:	4640      	mov	r0, r8
    a242:	f7fe f8db 	bl	83fc <__aeabi_i2d>
    a246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a24a:	f7fe f941 	bl	84d0 <__aeabi_dmul>
    a24e:	4ba5      	ldr	r3, [pc, #660]	; (a4e4 <_dtoa_r+0x86c>)
    a250:	2200      	movs	r2, #0
    a252:	f7fd ff87 	bl	8164 <__adddf3>
    a256:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    a25a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a25e:	9311      	str	r3, [sp, #68]	; 0x44
    a260:	2c00      	cmp	r4, #0
    a262:	d13b      	bne.n	a2dc <_dtoa_r+0x664>
    a264:	2200      	movs	r2, #0
    a266:	4ba0      	ldr	r3, [pc, #640]	; (a4e8 <_dtoa_r+0x870>)
    a268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a26c:	f7fd ff78 	bl	8160 <__aeabi_dsub>
    a270:	4602      	mov	r2, r0
    a272:	460b      	mov	r3, r1
    a274:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a278:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a27c:	f7fe fed0 	bl	9020 <__aeabi_dcmpgt>
    a280:	2800      	cmp	r0, #0
    a282:	f040 8157 	bne.w	a534 <_dtoa_r+0x8bc>
    a286:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    a28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a28e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a292:	f7fe fea7 	bl	8fe4 <__aeabi_dcmplt>
    a296:	2800      	cmp	r0, #0
    a298:	f43f aee2 	beq.w	a060 <_dtoa_r+0x3e8>
    a29c:	2400      	movs	r4, #0
    a29e:	4625      	mov	r5, r4
    a2a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a2a2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a2a6:	43de      	mvns	r6, r3
    a2a8:	f04f 0800 	mov.w	r8, #0
    a2ac:	4621      	mov	r1, r4
    a2ae:	4658      	mov	r0, fp
    a2b0:	f018 fd42 	bl	22d38 <_Bfree>
    a2b4:	2d00      	cmp	r5, #0
    a2b6:	f000 80a9 	beq.w	a40c <_dtoa_r+0x794>
    a2ba:	f1b8 0f00 	cmp.w	r8, #0
    a2be:	d005      	beq.n	a2cc <_dtoa_r+0x654>
    a2c0:	45a8      	cmp	r8, r5
    a2c2:	d003      	beq.n	a2cc <_dtoa_r+0x654>
    a2c4:	4641      	mov	r1, r8
    a2c6:	4658      	mov	r0, fp
    a2c8:	f018 fd36 	bl	22d38 <_Bfree>
    a2cc:	4629      	mov	r1, r5
    a2ce:	4658      	mov	r0, fp
    a2d0:	f018 fd32 	bl	22d38 <_Bfree>
    a2d4:	e09a      	b.n	a40c <_dtoa_r+0x794>
    a2d6:	463e      	mov	r6, r7
    a2d8:	464c      	mov	r4, r9
    a2da:	e7b1      	b.n	a240 <_dtoa_r+0x5c8>
    a2dc:	4b83      	ldr	r3, [pc, #524]	; (a4ec <_dtoa_r+0x874>)
    a2de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a2e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    a2e6:	9b08      	ldr	r3, [sp, #32]
    a2e8:	441c      	add	r4, r3
    a2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	d04a      	beq.n	a386 <_dtoa_r+0x70e>
    a2f0:	4602      	mov	r2, r0
    a2f2:	460b      	mov	r3, r1
    a2f4:	2000      	movs	r0, #0
    a2f6:	497e      	ldr	r1, [pc, #504]	; (a4f0 <_dtoa_r+0x878>)
    a2f8:	f7fe fa14 	bl	8724 <__aeabi_ddiv>
    a2fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a300:	f7fd ff2e 	bl	8160 <__aeabi_dsub>
    a304:	f8dd a020 	ldr.w	sl, [sp, #32]
    a308:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a30c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a310:	f7fe fea6 	bl	9060 <__aeabi_d2iz>
    a314:	4605      	mov	r5, r0
    a316:	f7fe f871 	bl	83fc <__aeabi_i2d>
    a31a:	4602      	mov	r2, r0
    a31c:	3530      	adds	r5, #48	; 0x30
    a31e:	460b      	mov	r3, r1
    a320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a324:	f7fd ff1c 	bl	8160 <__aeabi_dsub>
    a328:	f80a 5b01 	strb.w	r5, [sl], #1
    a32c:	4602      	mov	r2, r0
    a32e:	460b      	mov	r3, r1
    a330:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a334:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a338:	f7fe fe72 	bl	9020 <__aeabi_dcmpgt>
    a33c:	2800      	cmp	r0, #0
    a33e:	d165      	bne.n	a40c <_dtoa_r+0x794>
    a340:	2000      	movs	r0, #0
    a342:	496c      	ldr	r1, [pc, #432]	; (a4f4 <_dtoa_r+0x87c>)
    a344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a348:	f7fd ff0a 	bl	8160 <__aeabi_dsub>
    a34c:	4602      	mov	r2, r0
    a34e:	460b      	mov	r3, r1
    a350:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a354:	f7fe fe64 	bl	9020 <__aeabi_dcmpgt>
    a358:	2800      	cmp	r0, #0
    a35a:	f040 810d 	bne.w	a578 <_dtoa_r+0x900>
    a35e:	45a2      	cmp	sl, r4
    a360:	f000 80ea 	beq.w	a538 <_dtoa_r+0x8c0>
    a364:	2200      	movs	r2, #0
    a366:	4b5e      	ldr	r3, [pc, #376]	; (a4e0 <_dtoa_r+0x868>)
    a368:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a36c:	f7fe f8b0 	bl	84d0 <__aeabi_dmul>
    a370:	2200      	movs	r2, #0
    a372:	4b5b      	ldr	r3, [pc, #364]	; (a4e0 <_dtoa_r+0x868>)
    a374:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a37c:	f7fe f8a8 	bl	84d0 <__aeabi_dmul>
    a380:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a384:	e7c2      	b.n	a30c <_dtoa_r+0x694>
    a386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a38a:	f7fe f8a1 	bl	84d0 <__aeabi_dmul>
    a38e:	46a0      	mov	r8, r4
    a390:	f8dd a020 	ldr.w	sl, [sp, #32]
    a394:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a39c:	f7fe fe60 	bl	9060 <__aeabi_d2iz>
    a3a0:	4605      	mov	r5, r0
    a3a2:	f7fe f82b 	bl	83fc <__aeabi_i2d>
    a3a6:	4602      	mov	r2, r0
    a3a8:	3530      	adds	r5, #48	; 0x30
    a3aa:	460b      	mov	r3, r1
    a3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3b0:	f7fd fed6 	bl	8160 <__aeabi_dsub>
    a3b4:	f80a 5b01 	strb.w	r5, [sl], #1
    a3b8:	4602      	mov	r2, r0
    a3ba:	460b      	mov	r3, r1
    a3bc:	45a2      	cmp	sl, r4
    a3be:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a3c2:	f04f 0200 	mov.w	r2, #0
    a3c6:	d123      	bne.n	a410 <_dtoa_r+0x798>
    a3c8:	4b49      	ldr	r3, [pc, #292]	; (a4f0 <_dtoa_r+0x878>)
    a3ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a3ce:	f7fd fec9 	bl	8164 <__adddf3>
    a3d2:	4602      	mov	r2, r0
    a3d4:	460b      	mov	r3, r1
    a3d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3da:	f7fe fe21 	bl	9020 <__aeabi_dcmpgt>
    a3de:	2800      	cmp	r0, #0
    a3e0:	f040 80ca 	bne.w	a578 <_dtoa_r+0x900>
    a3e4:	2000      	movs	r0, #0
    a3e6:	4942      	ldr	r1, [pc, #264]	; (a4f0 <_dtoa_r+0x878>)
    a3e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a3ec:	f7fd feb8 	bl	8160 <__aeabi_dsub>
    a3f0:	4602      	mov	r2, r0
    a3f2:	460b      	mov	r3, r1
    a3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3f8:	f7fe fdf4 	bl	8fe4 <__aeabi_dcmplt>
    a3fc:	b170      	cbz	r0, a41c <_dtoa_r+0x7a4>
    a3fe:	46c2      	mov	sl, r8
    a400:	f108 38ff 	add.w	r8, r8, #4294967295
    a404:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a408:	2b30      	cmp	r3, #48	; 0x30
    a40a:	d0f8      	beq.n	a3fe <_dtoa_r+0x786>
    a40c:	4637      	mov	r7, r6
    a40e:	e055      	b.n	a4bc <_dtoa_r+0x844>
    a410:	4b33      	ldr	r3, [pc, #204]	; (a4e0 <_dtoa_r+0x868>)
    a412:	f7fe f85d 	bl	84d0 <__aeabi_dmul>
    a416:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a41a:	e7bd      	b.n	a398 <_dtoa_r+0x720>
    a41c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a420:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a424:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a426:	2b00      	cmp	r3, #0
    a428:	f6ff ae28 	blt.w	a07c <_dtoa_r+0x404>
    a42c:	2f0e      	cmp	r7, #14
    a42e:	f73f ae25 	bgt.w	a07c <_dtoa_r+0x404>
    a432:	4b2e      	ldr	r3, [pc, #184]	; (a4ec <_dtoa_r+0x874>)
    a434:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a438:	e9d3 3400 	ldrd	r3, r4, [r3]
    a43c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a440:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a442:	2b00      	cmp	r3, #0
    a444:	da02      	bge.n	a44c <_dtoa_r+0x7d4>
    a446:	f1b9 0f00 	cmp.w	r9, #0
    a44a:	d064      	beq.n	a516 <_dtoa_r+0x89e>
    a44c:	f8dd a020 	ldr.w	sl, [sp, #32]
    a450:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a458:	4620      	mov	r0, r4
    a45a:	4629      	mov	r1, r5
    a45c:	f7fe f962 	bl	8724 <__aeabi_ddiv>
    a460:	f7fe fdfe 	bl	9060 <__aeabi_d2iz>
    a464:	4606      	mov	r6, r0
    a466:	f7fd ffc9 	bl	83fc <__aeabi_i2d>
    a46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a46e:	f7fe f82f 	bl	84d0 <__aeabi_dmul>
    a472:	4602      	mov	r2, r0
    a474:	4620      	mov	r0, r4
    a476:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a47a:	460b      	mov	r3, r1
    a47c:	4629      	mov	r1, r5
    a47e:	f7fd fe6f 	bl	8160 <__aeabi_dsub>
    a482:	f80a 4b01 	strb.w	r4, [sl], #1
    a486:	9c08      	ldr	r4, [sp, #32]
    a488:	4602      	mov	r2, r0
    a48a:	460b      	mov	r3, r1
    a48c:	ebaa 0404 	sub.w	r4, sl, r4
    a490:	45a1      	cmp	r9, r4
    a492:	f040 8082 	bne.w	a59a <_dtoa_r+0x922>
    a496:	f7fd fe65 	bl	8164 <__adddf3>
    a49a:	4604      	mov	r4, r0
    a49c:	460d      	mov	r5, r1
    a49e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4a2:	f7fe fdbd 	bl	9020 <__aeabi_dcmpgt>
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d165      	bne.n	a576 <_dtoa_r+0x8fe>
    a4aa:	4620      	mov	r0, r4
    a4ac:	4629      	mov	r1, r5
    a4ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4b2:	f7fe fd8d 	bl	8fd0 <__aeabi_dcmpeq>
    a4b6:	b108      	cbz	r0, a4bc <_dtoa_r+0x844>
    a4b8:	07f3      	lsls	r3, r6, #31
    a4ba:	d45c      	bmi.n	a576 <_dtoa_r+0x8fe>
    a4bc:	9903      	ldr	r1, [sp, #12]
    a4be:	4658      	mov	r0, fp
    a4c0:	f018 fc3a 	bl	22d38 <_Bfree>
    a4c4:	2300      	movs	r3, #0
    a4c6:	3701      	adds	r7, #1
    a4c8:	f88a 3000 	strb.w	r3, [sl]
    a4cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4ce:	601f      	str	r7, [r3, #0]
    a4d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	f43f ac1c 	beq.w	9d10 <_dtoa_r+0x98>
    a4d8:	f8c3 a000 	str.w	sl, [r3]
    a4dc:	e418      	b.n	9d10 <_dtoa_r+0x98>
    a4de:	bf00      	nop
    a4e0:	40240000 	.word	0x40240000
    a4e4:	401c0000 	.word	0x401c0000
    a4e8:	40140000 	.word	0x40140000
    a4ec:	000298c0 	.word	0x000298c0
    a4f0:	3fe00000 	.word	0x3fe00000
    a4f4:	3ff00000 	.word	0x3ff00000
    a4f8:	4ba2      	ldr	r3, [pc, #648]	; (a784 <_dtoa_r+0xb0c>)
    a4fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a4fe:	e9d3 3400 	ldrd	r3, r4, [r3]
    a502:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a506:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a508:	2b00      	cmp	r3, #0
    a50a:	da9f      	bge.n	a44c <_dtoa_r+0x7d4>
    a50c:	f1b9 0f00 	cmp.w	r9, #0
    a510:	dc9c      	bgt.n	a44c <_dtoa_r+0x7d4>
    a512:	f47f aec3 	bne.w	a29c <_dtoa_r+0x624>
    a516:	2200      	movs	r2, #0
    a518:	4b9b      	ldr	r3, [pc, #620]	; (a788 <_dtoa_r+0xb10>)
    a51a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a51e:	f7fd ffd7 	bl	84d0 <__aeabi_dmul>
    a522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a526:	f7fe fd71 	bl	900c <__aeabi_dcmpge>
    a52a:	4604      	mov	r4, r0
    a52c:	2800      	cmp	r0, #0
    a52e:	f47f aeb5 	bne.w	a29c <_dtoa_r+0x624>
    a532:	463e      	mov	r6, r7
    a534:	4625      	mov	r5, r4
    a536:	e0b4      	b.n	a6a2 <_dtoa_r+0xa2a>
    a538:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a53c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a540:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a542:	2b00      	cmp	r3, #0
    a544:	db01      	blt.n	a54a <_dtoa_r+0x8d2>
    a546:	2f0e      	cmp	r7, #14
    a548:	ddd6      	ble.n	a4f8 <_dtoa_r+0x880>
    a54a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a54c:	2a01      	cmp	r2, #1
    a54e:	dc36      	bgt.n	a5be <_dtoa_r+0x946>
    a550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a552:	b382      	cbz	r2, a5b6 <_dtoa_r+0x93e>
    a554:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a558:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a55a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a55e:	9a06      	ldr	r2, [sp, #24]
    a560:	2101      	movs	r1, #1
    a562:	4658      	mov	r0, fp
    a564:	441a      	add	r2, r3
    a566:	9206      	str	r2, [sp, #24]
    a568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a56a:	441a      	add	r2, r3
    a56c:	920a      	str	r2, [sp, #40]	; 0x28
    a56e:	f018 fc4d 	bl	22e0c <__i2b>
    a572:	4605      	mov	r5, r0
    a574:	e586      	b.n	a084 <_dtoa_r+0x40c>
    a576:	463e      	mov	r6, r7
    a578:	4653      	mov	r3, sl
    a57a:	469a      	mov	sl, r3
    a57c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a580:	2a39      	cmp	r2, #57	; 0x39
    a582:	d106      	bne.n	a592 <_dtoa_r+0x91a>
    a584:	9a08      	ldr	r2, [sp, #32]
    a586:	429a      	cmp	r2, r3
    a588:	d1f7      	bne.n	a57a <_dtoa_r+0x902>
    a58a:	2230      	movs	r2, #48	; 0x30
    a58c:	9908      	ldr	r1, [sp, #32]
    a58e:	3601      	adds	r6, #1
    a590:	700a      	strb	r2, [r1, #0]
    a592:	781a      	ldrb	r2, [r3, #0]
    a594:	3201      	adds	r2, #1
    a596:	701a      	strb	r2, [r3, #0]
    a598:	e738      	b.n	a40c <_dtoa_r+0x794>
    a59a:	2200      	movs	r2, #0
    a59c:	4b7b      	ldr	r3, [pc, #492]	; (a78c <_dtoa_r+0xb14>)
    a59e:	f7fd ff97 	bl	84d0 <__aeabi_dmul>
    a5a2:	2200      	movs	r2, #0
    a5a4:	2300      	movs	r3, #0
    a5a6:	4604      	mov	r4, r0
    a5a8:	460d      	mov	r5, r1
    a5aa:	f7fe fd11 	bl	8fd0 <__aeabi_dcmpeq>
    a5ae:	2800      	cmp	r0, #0
    a5b0:	f43f af50 	beq.w	a454 <_dtoa_r+0x7dc>
    a5b4:	e782      	b.n	a4bc <_dtoa_r+0x844>
    a5b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a5b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a5bc:	e7cc      	b.n	a558 <_dtoa_r+0x8e0>
    a5be:	f109 34ff 	add.w	r4, r9, #4294967295
    a5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5c4:	42a3      	cmp	r3, r4
    a5c6:	db08      	blt.n	a5da <_dtoa_r+0x962>
    a5c8:	f1b9 0f00 	cmp.w	r9, #0
    a5cc:	eba3 0404 	sub.w	r4, r3, r4
    a5d0:	db0e      	blt.n	a5f0 <_dtoa_r+0x978>
    a5d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a5d6:	464b      	mov	r3, r9
    a5d8:	e7c1      	b.n	a55e <_dtoa_r+0x8e6>
    a5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a5de:	1ae3      	subs	r3, r4, r3
    a5e0:	940b      	str	r4, [sp, #44]	; 0x2c
    a5e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a5e6:	2400      	movs	r4, #0
    a5e8:	441a      	add	r2, r3
    a5ea:	464b      	mov	r3, r9
    a5ec:	920f      	str	r2, [sp, #60]	; 0x3c
    a5ee:	e7b6      	b.n	a55e <_dtoa_r+0x8e6>
    a5f0:	9b06      	ldr	r3, [sp, #24]
    a5f2:	eba3 0809 	sub.w	r8, r3, r9
    a5f6:	2300      	movs	r3, #0
    a5f8:	e7b1      	b.n	a55e <_dtoa_r+0x8e6>
    a5fa:	9e03      	ldr	r6, [sp, #12]
    a5fc:	e571      	b.n	a0e2 <_dtoa_r+0x46a>
    a5fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a600:	9903      	ldr	r1, [sp, #12]
    a602:	e570      	b.n	a0e6 <_dtoa_r+0x46e>
    a604:	9603      	str	r6, [sp, #12]
    a606:	e572      	b.n	a0ee <_dtoa_r+0x476>
    a608:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a60a:	2b01      	cmp	r3, #1
    a60c:	dc17      	bgt.n	a63e <_dtoa_r+0x9c6>
    a60e:	9b04      	ldr	r3, [sp, #16]
    a610:	b9ab      	cbnz	r3, a63e <_dtoa_r+0x9c6>
    a612:	9b05      	ldr	r3, [sp, #20]
    a614:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a618:	b99b      	cbnz	r3, a642 <_dtoa_r+0x9ca>
    a61a:	9b05      	ldr	r3, [sp, #20]
    a61c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a620:	0d36      	lsrs	r6, r6, #20
    a622:	0536      	lsls	r6, r6, #20
    a624:	b136      	cbz	r6, a634 <_dtoa_r+0x9bc>
    a626:	9b06      	ldr	r3, [sp, #24]
    a628:	2601      	movs	r6, #1
    a62a:	3301      	adds	r3, #1
    a62c:	9306      	str	r3, [sp, #24]
    a62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a630:	3301      	adds	r3, #1
    a632:	930a      	str	r3, [sp, #40]	; 0x28
    a634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a636:	2b00      	cmp	r3, #0
    a638:	f47f ad70 	bne.w	a11c <_dtoa_r+0x4a4>
    a63c:	960f      	str	r6, [sp, #60]	; 0x3c
    a63e:	2001      	movs	r0, #1
    a640:	e575      	b.n	a12e <_dtoa_r+0x4b6>
    a642:	2600      	movs	r6, #0
    a644:	e7f6      	b.n	a634 <_dtoa_r+0x9bc>
    a646:	f43f ad86 	beq.w	a156 <_dtoa_r+0x4de>
    a64a:	331c      	adds	r3, #28
    a64c:	9a06      	ldr	r2, [sp, #24]
    a64e:	441a      	add	r2, r3
    a650:	4498      	add	r8, r3
    a652:	9206      	str	r2, [sp, #24]
    a654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a656:	441a      	add	r2, r3
    a658:	920a      	str	r2, [sp, #40]	; 0x28
    a65a:	e57c      	b.n	a156 <_dtoa_r+0x4de>
    a65c:	4603      	mov	r3, r0
    a65e:	e7f4      	b.n	a64a <_dtoa_r+0x9d2>
    a660:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a662:	2b00      	cmp	r3, #0
    a664:	dc2b      	bgt.n	a6be <_dtoa_r+0xa46>
    a666:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a668:	2b02      	cmp	r3, #2
    a66a:	dc09      	bgt.n	a680 <_dtoa_r+0xa08>
    a66c:	e027      	b.n	a6be <_dtoa_r+0xa46>
    a66e:	f1b9 0f00 	cmp.w	r9, #0
    a672:	dc1d      	bgt.n	a6b0 <_dtoa_r+0xa38>
    a674:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a676:	2b02      	cmp	r3, #2
    a678:	dd1a      	ble.n	a6b0 <_dtoa_r+0xa38>
    a67a:	463e      	mov	r6, r7
    a67c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a682:	2b00      	cmp	r3, #0
    a684:	f47f ae0c 	bne.w	a2a0 <_dtoa_r+0x628>
    a688:	4621      	mov	r1, r4
    a68a:	2205      	movs	r2, #5
    a68c:	4658      	mov	r0, fp
    a68e:	f018 fb75 	bl	22d7c <__multadd>
    a692:	4601      	mov	r1, r0
    a694:	4604      	mov	r4, r0
    a696:	9803      	ldr	r0, [sp, #12]
    a698:	f01e fb3a 	bl	28d10 <__mcmp>
    a69c:	2800      	cmp	r0, #0
    a69e:	f77f adff 	ble.w	a2a0 <_dtoa_r+0x628>
    a6a2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a6a6:	2331      	movs	r3, #49	; 0x31
    a6a8:	3601      	adds	r6, #1
    a6aa:	f80a 3b01 	strb.w	r3, [sl], #1
    a6ae:	e5fb      	b.n	a2a8 <_dtoa_r+0x630>
    a6b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6b2:	463e      	mov	r6, r7
    a6b4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6b8:	2b00      	cmp	r3, #0
    a6ba:	f47f ad83 	bne.w	a1c4 <_dtoa_r+0x54c>
    a6be:	9f08      	ldr	r7, [sp, #32]
    a6c0:	4621      	mov	r1, r4
    a6c2:	9803      	ldr	r0, [sp, #12]
    a6c4:	f01e fa05 	bl	28ad2 <quorem>
    a6c8:	9b08      	ldr	r3, [sp, #32]
    a6ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a6d0:	f807 9b01 	strb.w	r9, [r7], #1
    a6d4:	1afb      	subs	r3, r7, r3
    a6d6:	429a      	cmp	r2, r3
    a6d8:	f340 80cb 	ble.w	a872 <_dtoa_r+0xbfa>
    a6dc:	2300      	movs	r3, #0
    a6de:	220a      	movs	r2, #10
    a6e0:	9903      	ldr	r1, [sp, #12]
    a6e2:	4658      	mov	r0, fp
    a6e4:	f018 fb4a 	bl	22d7c <__multadd>
    a6e8:	9003      	str	r0, [sp, #12]
    a6ea:	e7e9      	b.n	a6c0 <_dtoa_r+0xa48>
    a6ec:	692a      	ldr	r2, [r5, #16]
    a6ee:	f105 010c 	add.w	r1, r5, #12
    a6f2:	300c      	adds	r0, #12
    a6f4:	3202      	adds	r2, #2
    a6f6:	0092      	lsls	r2, r2, #2
    a6f8:	f01e f863 	bl	287c2 <memcpy>
    a6fc:	2201      	movs	r2, #1
    a6fe:	4639      	mov	r1, r7
    a700:	4658      	mov	r0, fp
    a702:	f018 fc9d 	bl	23040 <__lshift>
    a706:	9b08      	ldr	r3, [sp, #32]
    a708:	46a8      	mov	r8, r5
    a70a:	4605      	mov	r5, r0
    a70c:	f103 0a01 	add.w	sl, r3, #1
    a710:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a714:	4413      	add	r3, r2
    a716:	930a      	str	r3, [sp, #40]	; 0x28
    a718:	9b04      	ldr	r3, [sp, #16]
    a71a:	f003 0301 	and.w	r3, r3, #1
    a71e:	930b      	str	r3, [sp, #44]	; 0x2c
    a720:	f10a 33ff 	add.w	r3, sl, #4294967295
    a724:	4621      	mov	r1, r4
    a726:	9803      	ldr	r0, [sp, #12]
    a728:	9306      	str	r3, [sp, #24]
    a72a:	f01e f9d2 	bl	28ad2 <quorem>
    a72e:	4641      	mov	r1, r8
    a730:	9009      	str	r0, [sp, #36]	; 0x24
    a732:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a736:	9803      	ldr	r0, [sp, #12]
    a738:	f01e faea 	bl	28d10 <__mcmp>
    a73c:	462a      	mov	r2, r5
    a73e:	4621      	mov	r1, r4
    a740:	4607      	mov	r7, r0
    a742:	4658      	mov	r0, fp
    a744:	f018 fce8 	bl	23118 <__mdiff>
    a748:	68c2      	ldr	r2, [r0, #12]
    a74a:	4601      	mov	r1, r0
    a74c:	b302      	cbz	r2, a790 <_dtoa_r+0xb18>
    a74e:	4658      	mov	r0, fp
    a750:	f018 faf2 	bl	22d38 <_Bfree>
    a754:	2f00      	cmp	r7, #0
    a756:	da3a      	bge.n	a7ce <_dtoa_r+0xb56>
    a758:	2201      	movs	r2, #1
    a75a:	9903      	ldr	r1, [sp, #12]
    a75c:	4658      	mov	r0, fp
    a75e:	f018 fc6f 	bl	23040 <__lshift>
    a762:	4621      	mov	r1, r4
    a764:	9003      	str	r0, [sp, #12]
    a766:	f01e fad3 	bl	28d10 <__mcmp>
    a76a:	2800      	cmp	r0, #0
    a76c:	dc03      	bgt.n	a776 <_dtoa_r+0xafe>
    a76e:	d129      	bne.n	a7c4 <_dtoa_r+0xb4c>
    a770:	f019 0f01 	tst.w	r9, #1
    a774:	d026      	beq.n	a7c4 <_dtoa_r+0xb4c>
    a776:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a77a:	d11d      	bne.n	a7b8 <_dtoa_r+0xb40>
    a77c:	e032      	b.n	a7e4 <_dtoa_r+0xb6c>
    a77e:	4628      	mov	r0, r5
    a780:	e7c1      	b.n	a706 <_dtoa_r+0xa8e>
    a782:	bf00      	nop
    a784:	000298c0 	.word	0x000298c0
    a788:	40140000 	.word	0x40140000
    a78c:	40240000 	.word	0x40240000
    a790:	900e      	str	r0, [sp, #56]	; 0x38
    a792:	9803      	ldr	r0, [sp, #12]
    a794:	f01e fabc 	bl	28d10 <__mcmp>
    a798:	990e      	ldr	r1, [sp, #56]	; 0x38
    a79a:	900c      	str	r0, [sp, #48]	; 0x30
    a79c:	4658      	mov	r0, fp
    a79e:	f018 facb 	bl	22d38 <_Bfree>
    a7a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7a4:	bb5a      	cbnz	r2, a7fe <_dtoa_r+0xb86>
    a7a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7a8:	b953      	cbnz	r3, a7c0 <_dtoa_r+0xb48>
    a7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7ac:	b943      	cbnz	r3, a7c0 <_dtoa_r+0xb48>
    a7ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7b2:	d017      	beq.n	a7e4 <_dtoa_r+0xb6c>
    a7b4:	2f00      	cmp	r7, #0
    a7b6:	dd05      	ble.n	a7c4 <_dtoa_r+0xb4c>
    a7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a7be:	e001      	b.n	a7c4 <_dtoa_r+0xb4c>
    a7c0:	2f00      	cmp	r7, #0
    a7c2:	da2a      	bge.n	a81a <_dtoa_r+0xba2>
    a7c4:	f8dd a018 	ldr.w	sl, [sp, #24]
    a7c8:	f80a 9b01 	strb.w	r9, [sl], #1
    a7cc:	e56e      	b.n	a2ac <_dtoa_r+0x634>
    a7ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7d0:	433b      	orrs	r3, r7
    a7d2:	d104      	bne.n	a7de <_dtoa_r+0xb66>
    a7d4:	9b04      	ldr	r3, [sp, #16]
    a7d6:	f003 0301 	and.w	r3, r3, #1
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d0bc      	beq.n	a758 <_dtoa_r+0xae0>
    a7de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7e2:	d136      	bne.n	a852 <_dtoa_r+0xbda>
    a7e4:	9f06      	ldr	r7, [sp, #24]
    a7e6:	2339      	movs	r3, #57	; 0x39
    a7e8:	f807 3b01 	strb.w	r3, [r7], #1
    a7ec:	46ba      	mov	sl, r7
    a7ee:	3f01      	subs	r7, #1
    a7f0:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a7f4:	2b39      	cmp	r3, #57	; 0x39
    a7f6:	d05a      	beq.n	a8ae <_dtoa_r+0xc36>
    a7f8:	3301      	adds	r3, #1
    a7fa:	703b      	strb	r3, [r7, #0]
    a7fc:	e556      	b.n	a2ac <_dtoa_r+0x634>
    a7fe:	2f00      	cmp	r7, #0
    a800:	db06      	blt.n	a810 <_dtoa_r+0xb98>
    a802:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a804:	433b      	orrs	r3, r7
    a806:	d106      	bne.n	a816 <_dtoa_r+0xb9e>
    a808:	9b04      	ldr	r3, [sp, #16]
    a80a:	f003 0301 	and.w	r3, r3, #1
    a80e:	b913      	cbnz	r3, a816 <_dtoa_r+0xb9e>
    a810:	2a00      	cmp	r2, #0
    a812:	dca1      	bgt.n	a758 <_dtoa_r+0xae0>
    a814:	e7d6      	b.n	a7c4 <_dtoa_r+0xb4c>
    a816:	2a00      	cmp	r2, #0
    a818:	dce1      	bgt.n	a7de <_dtoa_r+0xb66>
    a81a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a81c:	4657      	mov	r7, sl
    a81e:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a822:	4553      	cmp	r3, sl
    a824:	d02e      	beq.n	a884 <_dtoa_r+0xc0c>
    a826:	2300      	movs	r3, #0
    a828:	220a      	movs	r2, #10
    a82a:	9903      	ldr	r1, [sp, #12]
    a82c:	4658      	mov	r0, fp
    a82e:	f018 faa5 	bl	22d7c <__multadd>
    a832:	45a8      	cmp	r8, r5
    a834:	9003      	str	r0, [sp, #12]
    a836:	f04f 0300 	mov.w	r3, #0
    a83a:	f04f 020a 	mov.w	r2, #10
    a83e:	4641      	mov	r1, r8
    a840:	4658      	mov	r0, fp
    a842:	d10b      	bne.n	a85c <_dtoa_r+0xbe4>
    a844:	f018 fa9a 	bl	22d7c <__multadd>
    a848:	4680      	mov	r8, r0
    a84a:	4605      	mov	r5, r0
    a84c:	f10a 0a01 	add.w	sl, sl, #1
    a850:	e766      	b.n	a720 <_dtoa_r+0xaa8>
    a852:	f8dd a018 	ldr.w	sl, [sp, #24]
    a856:	f109 0901 	add.w	r9, r9, #1
    a85a:	e7b5      	b.n	a7c8 <_dtoa_r+0xb50>
    a85c:	f018 fa8e 	bl	22d7c <__multadd>
    a860:	4629      	mov	r1, r5
    a862:	4680      	mov	r8, r0
    a864:	2300      	movs	r3, #0
    a866:	220a      	movs	r2, #10
    a868:	4658      	mov	r0, fp
    a86a:	f018 fa87 	bl	22d7c <__multadd>
    a86e:	4605      	mov	r5, r0
    a870:	e7ec      	b.n	a84c <_dtoa_r+0xbd4>
    a872:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a874:	f04f 0800 	mov.w	r8, #0
    a878:	2b00      	cmp	r3, #0
    a87a:	bfcc      	ite	gt
    a87c:	461f      	movgt	r7, r3
    a87e:	2701      	movle	r7, #1
    a880:	9b08      	ldr	r3, [sp, #32]
    a882:	441f      	add	r7, r3
    a884:	2201      	movs	r2, #1
    a886:	9903      	ldr	r1, [sp, #12]
    a888:	4658      	mov	r0, fp
    a88a:	f018 fbd9 	bl	23040 <__lshift>
    a88e:	4621      	mov	r1, r4
    a890:	9003      	str	r0, [sp, #12]
    a892:	f01e fa3d 	bl	28d10 <__mcmp>
    a896:	2800      	cmp	r0, #0
    a898:	dca8      	bgt.n	a7ec <_dtoa_r+0xb74>
    a89a:	d102      	bne.n	a8a2 <_dtoa_r+0xc2a>
    a89c:	f019 0f01 	tst.w	r9, #1
    a8a0:	d1a4      	bne.n	a7ec <_dtoa_r+0xb74>
    a8a2:	46ba      	mov	sl, r7
    a8a4:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    a8a8:	2b30      	cmp	r3, #48	; 0x30
    a8aa:	d0fa      	beq.n	a8a2 <_dtoa_r+0xc2a>
    a8ac:	e4fe      	b.n	a2ac <_dtoa_r+0x634>
    a8ae:	9b08      	ldr	r3, [sp, #32]
    a8b0:	42bb      	cmp	r3, r7
    a8b2:	d19b      	bne.n	a7ec <_dtoa_r+0xb74>
    a8b4:	2331      	movs	r3, #49	; 0x31
    a8b6:	9a08      	ldr	r2, [sp, #32]
    a8b8:	3601      	adds	r6, #1
    a8ba:	7013      	strb	r3, [r2, #0]
    a8bc:	e4f6      	b.n	a2ac <_dtoa_r+0x634>
    a8be:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	f47f aa20 	bne.w	9d06 <_dtoa_r+0x8e>
    a8c6:	4b01      	ldr	r3, [pc, #4]	; (a8cc <_dtoa_r+0xc54>)
    a8c8:	f7ff ba3f 	b.w	9d4a <_dtoa_r+0xd2>
    a8cc:	0002fd48 	.word	0x0002fd48

0000a8d0 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    a8d0:	4603      	mov	r3, r0
    a8d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a8d4:	2401      	movs	r4, #1
    a8d6:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    a8d8:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a8da:	409c      	lsls	r4, r3
    a8dc:	6843      	ldr	r3, [r0, #4]
    a8de:	681b      	ldr	r3, [r3, #0]
    a8e0:	421c      	tst	r4, r3
    a8e2:	d10e      	bne.n	a902 <gpio_pin_get_dt+0x32>
    a8e4:	490e      	ldr	r1, [pc, #56]	; (a920 <gpio_pin_get_dt+0x50>)
    a8e6:	f240 43e4 	movw	r3, #1252	; 0x4e4
    a8ea:	4a0e      	ldr	r2, [pc, #56]	; (a924 <gpio_pin_get_dt+0x54>)
    a8ec:	480e      	ldr	r0, [pc, #56]	; (a928 <gpio_pin_get_dt+0x58>)
    a8ee:	f019 fb98 	bl	24022 <assert_print>
    a8f2:	480e      	ldr	r0, [pc, #56]	; (a92c <gpio_pin_get_dt+0x5c>)
    a8f4:	f019 fb95 	bl	24022 <assert_print>
    a8f8:	f240 41e4 	movw	r1, #1252	; 0x4e4
    a8fc:	4809      	ldr	r0, [pc, #36]	; (a924 <gpio_pin_get_dt+0x54>)
    a8fe:	f019 fb89 	bl	24014 <assert_post_action>
	const struct gpio_driver_data *const data =
    a902:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    a904:	6883      	ldr	r3, [r0, #8]
    a906:	a901      	add	r1, sp, #4
    a908:	685b      	ldr	r3, [r3, #4]
    a90a:	4798      	blx	r3
	if (ret == 0) {
    a90c:	b930      	cbnz	r0, a91c <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    a90e:	682a      	ldr	r2, [r5, #0]
    a910:	9b01      	ldr	r3, [sp, #4]
    a912:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    a914:	4223      	tst	r3, r4
    a916:	bf14      	ite	ne
    a918:	2001      	movne	r0, #1
    a91a:	2000      	moveq	r0, #0
}
    a91c:	b003      	add	sp, #12
    a91e:	bd30      	pop	{r4, r5, pc}
    a920:	0002a62b 	.word	0x0002a62b
    a924:	0002a5fa 	.word	0x0002a5fa
    a928:	0002a669 	.word	0x0002a669
    a92c:	0002a686 	.word	0x0002a686

0000a930 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
	
}

//DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a930:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a932:	f01c fdf4 	bl	2751e <sys_clock_cycle_get_32>
    a936:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    a938:	4804      	ldr	r0, [pc, #16]	; (a94c <digital_0_call_back+0x1c>)
    a93a:	f019 f9b0 	bl	23c9e <printk>
	if(digital_value[0]<=DIGITAL_0_LIMIT)digital_value[0]++;
    a93e:	4a04      	ldr	r2, [pc, #16]	; (a950 <digital_0_call_back+0x20>)
    a940:	8813      	ldrh	r3, [r2, #0]
    a942:	8813      	ldrh	r3, [r2, #0]
    a944:	3301      	adds	r3, #1
    a946:	b21b      	sxth	r3, r3
    a948:	8013      	strh	r3, [r2, #0]
}
    a94a:	bd08      	pop	{r3, pc}
    a94c:	0002a698 	.word	0x0002a698
    a950:	2002148c 	.word	0x2002148c

0000a954 <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a954:	b508      	push	{r3, lr}
    a956:	f01c fde2 	bl	2751e <sys_clock_cycle_get_32>
    a95a:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    a95c:	4804      	ldr	r0, [pc, #16]	; (a970 <digital_1_call_back+0x1c>)
    a95e:	f019 f99e 	bl	23c9e <printk>
	if(digital_value[1]<=DIGITAL_0_LIMIT)digital_value[1]++;
    a962:	4a04      	ldr	r2, [pc, #16]	; (a974 <digital_1_call_back+0x20>)
    a964:	8853      	ldrh	r3, [r2, #2]
    a966:	8853      	ldrh	r3, [r2, #2]
    a968:	3301      	adds	r3, #1
    a96a:	b21b      	sxth	r3, r3
    a96c:	8053      	strh	r3, [r2, #2]
}
    a96e:	bd08      	pop	{r3, pc}
    a970:	0002a6b3 	.word	0x0002a6b3
    a974:	2002148c 	.word	0x2002148c

0000a978 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a978:	b508      	push	{r3, lr}
    a97a:	f01c fdd0 	bl	2751e <sys_clock_cycle_get_32>
    a97e:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    a980:	4804      	ldr	r0, [pc, #16]	; (a994 <digital_2_call_back+0x1c>)
    a982:	f019 f98c 	bl	23c9e <printk>
	if(digital_value[2]<=DIGITAL_0_LIMIT)digital_value[2]++;
    a986:	4a04      	ldr	r2, [pc, #16]	; (a998 <digital_2_call_back+0x20>)
    a988:	8893      	ldrh	r3, [r2, #4]
    a98a:	8893      	ldrh	r3, [r2, #4]
    a98c:	3301      	adds	r3, #1
    a98e:	b21b      	sxth	r3, r3
    a990:	8093      	strh	r3, [r2, #4]
}
    a992:	bd08      	pop	{r3, pc}
    a994:	0002a6ce 	.word	0x0002a6ce
    a998:	2002148c 	.word	0x2002148c

0000a99c <uart_2_work_handler>:
{
    a99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    a99e:	2030      	movs	r0, #48	; 0x30
    a9a0:	f01d fefa 	bl	28798 <k_malloc>
    a9a4:	4603      	mov	r3, r0
	if (buf) {
    a9a6:	b140      	cbz	r0, a9ba <uart_2_work_handler+0x1e>
		buf->len = 0;
    a9a8:	2200      	movs	r2, #0
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9aa:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    a9ac:	8582      	strh	r2, [r0, #44]	; 0x2c
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9ae:	480b      	ldr	r0, [pc, #44]	; (a9dc <uart_2_work_handler+0x40>)
}
    a9b0:	b005      	add	sp, #20
    a9b2:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9b6:	f018 bf9c 	b.w	238f2 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    a9ba:	4a09      	ldr	r2, [pc, #36]	; (a9e0 <uart_2_work_handler+0x44>)
    a9bc:	9000      	str	r0, [sp, #0]
    a9be:	e9cd 0201 	strd	r0, r2, [sp, #4]
    a9c2:	4908      	ldr	r1, [pc, #32]	; (a9e4 <uart_2_work_handler+0x48>)
    a9c4:	2202      	movs	r2, #2
    a9c6:	f018 ff85 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9ca:	f240 6267 	movw	r2, #1639	; 0x667
    a9ce:	2300      	movs	r3, #0
    a9d0:	4805      	ldr	r0, [pc, #20]	; (a9e8 <uart_2_work_handler+0x4c>)
}
    a9d2:	b005      	add	sp, #20
    a9d4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9d8:	f015 b960 	b.w	1fc9c <k_work_reschedule>
    a9dc:	0002917c 	.word	0x0002917c
    a9e0:	0002a6e9 	.word	0x0002a6e9
    a9e4:	00029784 	.word	0x00029784
    a9e8:	20009110 	.word	0x20009110

0000a9ec <uart_work_handler>:
{
    a9ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    a9ee:	2030      	movs	r0, #48	; 0x30
    a9f0:	f01d fed2 	bl	28798 <k_malloc>
    a9f4:	4603      	mov	r3, r0
	if (buf) {
    a9f6:	b140      	cbz	r0, aa0a <uart_work_handler+0x1e>
		buf->len = 0;
    a9f8:	2200      	movs	r2, #0
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9fa:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    a9fc:	8582      	strh	r2, [r0, #44]	; 0x2c
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    a9fe:	480b      	ldr	r0, [pc, #44]	; (aa2c <uart_work_handler+0x40>)
}
    aa00:	b005      	add	sp, #20
    aa02:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa06:	f018 bf74 	b.w	238f2 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART receive buffer");
    aa0a:	4a09      	ldr	r2, [pc, #36]	; (aa30 <uart_work_handler+0x44>)
    aa0c:	9000      	str	r0, [sp, #0]
    aa0e:	e9cd 0201 	strd	r0, r2, [sp, #4]
    aa12:	4908      	ldr	r1, [pc, #32]	; (aa34 <uart_work_handler+0x48>)
    aa14:	2202      	movs	r2, #2
    aa16:	f018 ff5d 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa1a:	f240 6267 	movw	r2, #1639	; 0x667
    aa1e:	2300      	movs	r3, #0
    aa20:	4805      	ldr	r0, [pc, #20]	; (aa38 <uart_work_handler+0x4c>)
}
    aa22:	b005      	add	sp, #20
    aa24:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa28:	f015 b938 	b.w	1fc9c <k_work_reschedule>
    aa2c:	00029194 	.word	0x00029194
    aa30:	0002a714 	.word	0x0002a714
    aa34:	00029784 	.word	0x00029784
    aa38:	20009140 	.word	0x20009140

0000aa3c <button3_thread>:
		    flash_test_();
	}
}


void button3_thread(void){
    aa3c:	b570      	push	{r4, r5, r6, lr}
    uint32_t i;
	while(1){
		i=0;
		k_sem_take(&button_3,K_FOREVER);
    aa3e:	4e09      	ldr	r6, [pc, #36]	; (aa64 <button3_thread+0x28>)
	    while (i<=C_Buffer_Current_Position){
    aa40:	4d09      	ldr	r5, [pc, #36]	; (aa68 <button3_thread+0x2c>)
		k_sem_take(&button_3,K_FOREVER);
    aa42:	f04f 32ff 	mov.w	r2, #4294967295
    aa46:	f04f 33ff 	mov.w	r3, #4294967295
    aa4a:	4630      	mov	r0, r6
    aa4c:	f018 ff61 	bl	23912 <k_sem_take.constprop.0.isra.0>
		i=0;
    aa50:	2400      	movs	r4, #0
	     print_current_position_cb(i);
    aa52:	4620      	mov	r0, r4
    aa54:	f001 f97e 	bl	bd54 <print_current_position_cb>
	    while (i<=C_Buffer_Current_Position){
    aa58:	682b      	ldr	r3, [r5, #0]
	     i++;
    aa5a:	3401      	adds	r4, #1
	    while (i<=C_Buffer_Current_Position){
    aa5c:	42a3      	cmp	r3, r4
    aa5e:	d3f0      	bcc.n	aa42 <button3_thread+0x6>
    aa60:	e7f7      	b.n	aa52 <button3_thread+0x16>
    aa62:	bf00      	nop
    aa64:	20008aec 	.word	0x20008aec
    aa68:	20020e74 	.word	0x20020e74

0000aa6c <button4_thread>:
		}
    }
}

void button4_thread(void){
    aa6c:	b538      	push	{r3, r4, r5, lr}

    uint8_t *packet_data;
	packet_data = k_malloc(25);
    aa6e:	2019      	movs	r0, #25
    aa70:	f01d fe92 	bl	28798 <k_malloc>
	//49 53 41 44 4f 52 41 
    *packet_data = 0x49;
    aa74:	2349      	movs	r3, #73	; 0x49
    *(packet_data+1) = 0x53;
    *(packet_data+2) = 0x41;
    *(packet_data+3) = 0x44;
    aa76:	2244      	movs	r2, #68	; 0x44
    *packet_data = 0x49;
    aa78:	7003      	strb	r3, [r0, #0]
    *(packet_data+3) = 0x44;
    aa7a:	70c2      	strb	r2, [r0, #3]
    *(packet_data+1) = 0x53;
    aa7c:	2353      	movs	r3, #83	; 0x53
    *(packet_data+4) = 0x4F;
    aa7e:	224f      	movs	r2, #79	; 0x4f
    *(packet_data+1) = 0x53;
    aa80:	7043      	strb	r3, [r0, #1]
    *(packet_data+4) = 0x4F;
    aa82:	7102      	strb	r2, [r0, #4]
    *(packet_data+2) = 0x41;
    aa84:	2341      	movs	r3, #65	; 0x41
    *(packet_data+5) = 0x52;
    aa86:	2252      	movs	r2, #82	; 0x52
	packet_data = k_malloc(25);
    aa88:	4604      	mov	r4, r0
    *(packet_data+6) = 0x41;
	while(1){
		k_sem_take(&button_test,K_FOREVER);
    aa8a:	4d08      	ldr	r5, [pc, #32]	; (aaac <button4_thread+0x40>)
    *(packet_data+2) = 0x41;
    aa8c:	7083      	strb	r3, [r0, #2]
    *(packet_data+5) = 0x52;
    aa8e:	7142      	strb	r2, [r0, #5]
    *(packet_data+6) = 0x41;
    aa90:	7183      	strb	r3, [r0, #6]
		k_sem_take(&button_test,K_FOREVER);
    aa92:	4628      	mov	r0, r5
    aa94:	f04f 32ff 	mov.w	r2, #4294967295
    aa98:	f04f 33ff 	mov.w	r3, #4294967295
    aa9c:	f018 ff39 	bl	23912 <k_sem_take.constprop.0.isra.0>
    	bt_nus_send(NULL, packet_data,7);
    aaa0:	2207      	movs	r2, #7
    aaa2:	4621      	mov	r1, r4
    aaa4:	2000      	movs	r0, #0
    aaa6:	f004 faab 	bl	f000 <bt_nus_send>
	while(1){
    aaaa:	e7f2      	b.n	aa92 <button4_thread+0x26>
    aaac:	20008b04 	.word	0x20008b04

0000aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    aab0:	4603      	mov	r3, r0
    aab2:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    aab4:	6800      	ldr	r0, [r0, #0]
    aab6:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aab8:	2301      	movs	r3, #1
    aaba:	6845      	ldr	r5, [r0, #4]
    aabc:	408b      	lsls	r3, r1
    aabe:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    aac0:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aac2:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    aac4:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aac6:	d10e      	bne.n	aae6 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    aac8:	490e      	ldr	r1, [pc, #56]	; (ab04 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    aaca:	f44f 731d 	mov.w	r3, #628	; 0x274
    aace:	4a0e      	ldr	r2, [pc, #56]	; (ab08 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    aad0:	480e      	ldr	r0, [pc, #56]	; (ab0c <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    aad2:	f019 faa6 	bl	24022 <assert_print>
    aad6:	480e      	ldr	r0, [pc, #56]	; (ab10 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    aad8:	f019 faa3 	bl	24022 <assert_print>
    aadc:	f44f 711d 	mov.w	r1, #628	; 0x274
    aae0:	4809      	ldr	r0, [pc, #36]	; (ab08 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    aae2:	f019 fa97 	bl	24014 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    aae6:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    aae8:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    aaea:	6994      	ldr	r4, [r2, #24]
    aaec:	bf18      	it	ne
    aaee:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    aaf2:	46a4      	mov	ip, r4
}
    aaf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    aaf8:	bf08      	it	eq
    aafa:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    aafe:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    ab02:	4760      	bx	ip
    ab04:	0002a62b 	.word	0x0002a62b
    ab08:	0002a5fa 	.word	0x0002a5fa
    ab0c:	0002a669 	.word	0x0002a669
    ab10:	0002a686 	.word	0x0002a686

0000ab14 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab14:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ab16:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab18:	b08a      	sub	sp, #40	; 0x28
    ab1a:	4604      	mov	r4, r0
    ab1c:	460e      	mov	r6, r1
    ab1e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ab20:	2b03      	cmp	r3, #3
    ab22:	d820      	bhi.n	ab66 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ab24:	e8df f003 	tbb	[pc, r3]
    ab28:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ab2c:	4911      	ldr	r1, [pc, #68]	; (ab74 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ab2e:	4628      	mov	r0, r5
    ab30:	f01d ff96 	bl	28a60 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ab34:	9505      	str	r5, [sp, #20]
    ab36:	7863      	ldrb	r3, [r4, #1]
    ab38:	211e      	movs	r1, #30
    ab3a:	9304      	str	r3, [sp, #16]
    ab3c:	78a3      	ldrb	r3, [r4, #2]
    ab3e:	4630      	mov	r0, r6
    ab40:	9303      	str	r3, [sp, #12]
    ab42:	78e3      	ldrb	r3, [r4, #3]
    ab44:	4a0c      	ldr	r2, [pc, #48]	; (ab78 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    ab46:	9302      	str	r3, [sp, #8]
    ab48:	7923      	ldrb	r3, [r4, #4]
    ab4a:	9301      	str	r3, [sp, #4]
    ab4c:	7963      	ldrb	r3, [r4, #5]
    ab4e:	9300      	str	r3, [sp, #0]
    ab50:	79a3      	ldrb	r3, [r4, #6]
    ab52:	f019 f8b1 	bl	23cb8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    ab56:	b00a      	add	sp, #40	; 0x28
    ab58:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ab5a:	4908      	ldr	r1, [pc, #32]	; (ab7c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    ab5c:	e7e7      	b.n	ab2e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    ab5e:	4908      	ldr	r1, [pc, #32]	; (ab80 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    ab60:	e7e5      	b.n	ab2e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    ab62:	4908      	ldr	r1, [pc, #32]	; (ab84 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    ab64:	e7e3      	b.n	ab2e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ab66:	210a      	movs	r1, #10
    ab68:	4628      	mov	r0, r5
    ab6a:	4a07      	ldr	r2, [pc, #28]	; (ab88 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    ab6c:	f019 f8a4 	bl	23cb8 <snprintk>
		break;
    ab70:	e7e0      	b.n	ab34 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    ab72:	bf00      	nop
    ab74:	0002a73d 	.word	0x0002a73d
    ab78:	0002a75f 	.word	0x0002a75f
    ab7c:	0002a744 	.word	0x0002a744
    ab80:	0002a74b 	.word	0x0002a74b
    ab84:	0002a755 	.word	0x0002a755
    ab88:	0002dc26 	.word	0x0002dc26

0000ab8c <security_changed>:
{
    ab8c:	b570      	push	{r4, r5, r6, lr}
    ab8e:	4614      	mov	r4, r2
    ab90:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ab92:	ae06      	add	r6, sp, #24
{
    ab94:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ab96:	f01a fe0b 	bl	257b0 <bt_conn_get_dst>
    ab9a:	4631      	mov	r1, r6
    ab9c:	f7ff ffba 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
    aba0:	b96c      	cbnz	r4, abbe <security_changed+0x32>
		LOG_INF("Security changed: %s level %u", addr, level);
    aba2:	4b0e      	ldr	r3, [pc, #56]	; (abdc <security_changed+0x50>)
    aba4:	2203      	movs	r2, #3
    aba6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    abaa:	4620      	mov	r0, r4
    abac:	4623      	mov	r3, r4
    abae:	e9cd 6503 	strd	r6, r5, [sp, #12]
    abb2:	490b      	ldr	r1, [pc, #44]	; (abe0 <security_changed+0x54>)
    abb4:	9400      	str	r4, [sp, #0]
    abb6:	f018 fe8d 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
}
    abba:	b00e      	add	sp, #56	; 0x38
    abbc:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    abbe:	4b09      	ldr	r3, [pc, #36]	; (abe4 <security_changed+0x58>)
    abc0:	2202      	movs	r2, #2
    abc2:	9302      	str	r3, [sp, #8]
    abc4:	2300      	movs	r3, #0
    abc6:	e9cd 5404 	strd	r5, r4, [sp, #16]
    abca:	4618      	mov	r0, r3
    abcc:	e9cd 3300 	strd	r3, r3, [sp]
    abd0:	4903      	ldr	r1, [pc, #12]	; (abe0 <security_changed+0x54>)
    abd2:	9603      	str	r6, [sp, #12]
    abd4:	f018 fe7e 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
}
    abd8:	e7ef      	b.n	abba <security_changed+0x2e>
    abda:	bf00      	nop
    abdc:	0002a782 	.word	0x0002a782
    abe0:	00029784 	.word	0x00029784
    abe4:	0002a7a0 	.word	0x0002a7a0

0000abe8 <pairing_failed>:
{
    abe8:	b530      	push	{r4, r5, lr}
    abea:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abec:	ad06      	add	r5, sp, #24
{
    abee:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abf0:	f01a fdde 	bl	257b0 <bt_conn_get_dst>
    abf4:	4629      	mov	r1, r5
    abf6:	f7ff ff8d 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    abfa:	4b07      	ldr	r3, [pc, #28]	; (ac18 <pairing_failed+0x30>)
    abfc:	2203      	movs	r2, #3
    abfe:	9302      	str	r3, [sp, #8]
    ac00:	2300      	movs	r3, #0
    ac02:	e9cd 5403 	strd	r5, r4, [sp, #12]
    ac06:	4618      	mov	r0, r3
    ac08:	e9cd 3300 	strd	r3, r3, [sp]
    ac0c:	4903      	ldr	r1, [pc, #12]	; (ac1c <pairing_failed+0x34>)
    ac0e:	f018 fe61 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
}
    ac12:	b00f      	add	sp, #60	; 0x3c
    ac14:	bd30      	pop	{r4, r5, pc}
    ac16:	bf00      	nop
    ac18:	0002a7c4 	.word	0x0002a7c4
    ac1c:	00029784 	.word	0x00029784

0000ac20 <pairing_complete>:
{
    ac20:	b530      	push	{r4, r5, lr}
    ac22:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac24:	ad06      	add	r5, sp, #24
{
    ac26:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac28:	f01a fdc2 	bl	257b0 <bt_conn_get_dst>
    ac2c:	4629      	mov	r1, r5
    ac2e:	f7ff ff71 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    ac32:	4b07      	ldr	r3, [pc, #28]	; (ac50 <pairing_complete+0x30>)
    ac34:	2203      	movs	r2, #3
    ac36:	9302      	str	r3, [sp, #8]
    ac38:	2300      	movs	r3, #0
    ac3a:	e9cd 5403 	strd	r5, r4, [sp, #12]
    ac3e:	4618      	mov	r0, r3
    ac40:	e9cd 3300 	strd	r3, r3, [sp]
    ac44:	4903      	ldr	r1, [pc, #12]	; (ac54 <pairing_complete+0x34>)
    ac46:	f018 fe45 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
}
    ac4a:	b00f      	add	sp, #60	; 0x3c
    ac4c:	bd30      	pop	{r4, r5, pc}
    ac4e:	bf00      	nop
    ac50:	0002a7e7 	.word	0x0002a7e7
    ac54:	00029784 	.word	0x00029784

0000ac58 <auth_cancel>:
{
    ac58:	b510      	push	{r4, lr}
    ac5a:	b08c      	sub	sp, #48	; 0x30
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac5c:	ac04      	add	r4, sp, #16
    ac5e:	f01a fda7 	bl	257b0 <bt_conn_get_dst>
    ac62:	4621      	mov	r1, r4
    ac64:	f7ff ff56 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    ac68:	4b06      	ldr	r3, [pc, #24]	; (ac84 <auth_cancel+0x2c>)
    ac6a:	2203      	movs	r2, #3
    ac6c:	9302      	str	r3, [sp, #8]
    ac6e:	2300      	movs	r3, #0
    ac70:	4905      	ldr	r1, [pc, #20]	; (ac88 <auth_cancel+0x30>)
    ac72:	4618      	mov	r0, r3
    ac74:	e9cd 3300 	strd	r3, r3, [sp]
    ac78:	9403      	str	r4, [sp, #12]
    ac7a:	f018 fe2b 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
}
    ac7e:	b00c      	add	sp, #48	; 0x30
    ac80:	bd10      	pop	{r4, pc}
    ac82:	bf00      	nop
    ac84:	0002a809 	.word	0x0002a809
    ac88:	00029784 	.word	0x00029784

0000ac8c <auth_passkey_display>:
{
    ac8c:	b530      	push	{r4, r5, lr}
    ac8e:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac90:	ad06      	add	r5, sp, #24
{
    ac92:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac94:	f01a fd8c 	bl	257b0 <bt_conn_get_dst>
    ac98:	4629      	mov	r1, r5
    ac9a:	f7ff ff3b 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ac9e:	4b07      	ldr	r3, [pc, #28]	; (acbc <auth_passkey_display+0x30>)
    aca0:	2203      	movs	r2, #3
    aca2:	9302      	str	r3, [sp, #8]
    aca4:	2300      	movs	r3, #0
    aca6:	e9cd 5403 	strd	r5, r4, [sp, #12]
    acaa:	4618      	mov	r0, r3
    acac:	e9cd 3300 	strd	r3, r3, [sp]
    acb0:	4903      	ldr	r1, [pc, #12]	; (acc0 <auth_passkey_display+0x34>)
    acb2:	f018 fe0f 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
}
    acb6:	b00f      	add	sp, #60	; 0x3c
    acb8:	bd30      	pop	{r4, r5, pc}
    acba:	bf00      	nop
    acbc:	0002a81f 	.word	0x0002a81f
    acc0:	00029784 	.word	0x00029784

0000acc4 <auth_passkey_confirm>:
{
    acc4:	b570      	push	{r4, r5, r6, lr}
    acc6:	b08e      	sub	sp, #56	; 0x38
    acc8:	460c      	mov	r4, r1
    acca:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    accc:	f008 fb7c 	bl	133c8 <bt_conn_ref>
    acd0:	4b11      	ldr	r3, [pc, #68]	; (ad18 <auth_passkey_confirm+0x54>)
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acd2:	ae06      	add	r6, sp, #24
	auth_conn = bt_conn_ref(conn);
    acd4:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acd6:	4628      	mov	r0, r5
    acd8:	f01a fd6a 	bl	257b0 <bt_conn_get_dst>
    acdc:	4631      	mov	r1, r6
    acde:	f7ff ff19 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ace2:	e9cd 6403 	strd	r6, r4, [sp, #12]
    ace6:	2400      	movs	r4, #0
    ace8:	4d0c      	ldr	r5, [pc, #48]	; (ad1c <auth_passkey_confirm+0x58>)
    acea:	4b0d      	ldr	r3, [pc, #52]	; (ad20 <auth_passkey_confirm+0x5c>)
    acec:	4629      	mov	r1, r5
    acee:	4620      	mov	r0, r4
    acf0:	9302      	str	r3, [sp, #8]
    acf2:	2203      	movs	r2, #3
    acf4:	4623      	mov	r3, r4
    acf6:	e9cd 4400 	strd	r4, r4, [sp]
    acfa:	f018 fdeb 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    acfe:	4b09      	ldr	r3, [pc, #36]	; (ad24 <auth_passkey_confirm+0x60>)
    ad00:	2203      	movs	r2, #3
    ad02:	e9cd 4301 	strd	r4, r3, [sp, #4]
    ad06:	4629      	mov	r1, r5
    ad08:	4623      	mov	r3, r4
    ad0a:	4620      	mov	r0, r4
    ad0c:	9400      	str	r4, [sp, #0]
    ad0e:	f018 fde1 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
}
    ad12:	b00e      	add	sp, #56	; 0x38
    ad14:	bd70      	pop	{r4, r5, r6, pc}
    ad16:	bf00      	nop
    ad18:	20009d30 	.word	0x20009d30
    ad1c:	00029784 	.word	0x00029784
    ad20:	0002a81f 	.word	0x0002a81f
    ad24:	0002a834 	.word	0x0002a834

0000ad28 <bt_receive_cb>:
{
    ad28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    ad2c:	2400      	movs	r4, #0
{
    ad2e:	4605      	mov	r5, r0
    ad30:	b088      	sub	sp, #32
    ad32:	460f      	mov	r7, r1
    ad34:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    ad36:	4621      	mov	r1, r4
    ad38:	221a      	movs	r2, #26
    ad3a:	a801      	add	r0, sp, #4
    ad3c:	9400      	str	r4, [sp, #0]
    ad3e:	f01d fd67 	bl	28810 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    ad42:	4628      	mov	r0, r5
    ad44:	f01a fd34 	bl	257b0 <bt_conn_get_dst>
    ad48:	4669      	mov	r1, sp
    ad4a:	f7ff fee3 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    ad4e:	4669      	mov	r1, sp
    ad50:	481d      	ldr	r0, [pc, #116]	; (adc8 <bt_receive_cb+0xa0>)
    ad52:	f017 fe89 	bl	22a68 <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ad56:	f8df 8074 	ldr.w	r8, [pc, #116]	; adcc <bt_receive_cb+0xa4>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ad5a:	f8df 9074 	ldr.w	r9, [pc, #116]	; add0 <bt_receive_cb+0xa8>
	for (uint16_t pos = 0; pos != len;) {
    ad5e:	42b4      	cmp	r4, r6
    ad60:	d007      	beq.n	ad72 <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    ad62:	2030      	movs	r0, #48	; 0x30
    ad64:	f01d fd18 	bl	28798 <k_malloc>
		if (!tx) {
    ad68:	4605      	mov	r5, r0
    ad6a:	b928      	cbnz	r0, ad78 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    ad6c:	4819      	ldr	r0, [pc, #100]	; (add4 <bt_receive_cb+0xac>)
    ad6e:	f017 fe7b 	bl	22a68 <iprintf>
}
    ad72:	b008      	add	sp, #32
    ad74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size) {
    ad78:	1b32      	subs	r2, r6, r4
    ad7a:	2a27      	cmp	r2, #39	; 0x27
			tx->len = tx_data_size;
    ad7c:	bf8c      	ite	hi
    ad7e:	2227      	movhi	r2, #39	; 0x27
			tx->len = (len - pos);
    ad80:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    ad82:	f100 0a04 	add.w	sl, r0, #4
    ad86:	8582      	strh	r2, [r0, #44]	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ad88:	1939      	adds	r1, r7, r4
    ad8a:	4650      	mov	r0, sl
    ad8c:	f01d fd19 	bl	287c2 <memcpy>
		pos += tx->len;
    ad90:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    ad92:	441c      	add	r4, r3
    ad94:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
    ad96:	42a6      	cmp	r6, r4
    ad98:	d109      	bne.n	adae <bt_receive_cb+0x86>
    ad9a:	19ba      	adds	r2, r7, r6
    ad9c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    ada0:	2a0d      	cmp	r2, #13
    ada2:	d104      	bne.n	adae <bt_receive_cb+0x86>
			tx->data[tx->len] = '\n';
    ada4:	210a      	movs	r1, #10
    ada6:	18ea      	adds	r2, r5, r3
			tx->len++;
    ada8:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    adaa:	7111      	strb	r1, [r2, #4]
			tx->len++;
    adac:	85ab      	strh	r3, [r5, #44]	; 0x2c
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    adae:	4651      	mov	r1, sl
    adb0:	4640      	mov	r0, r8
    adb2:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    adb4:	f018 fda5 	bl	23902 <uart_tx.constprop.0>
		if (err) {
    adb8:	2800      	cmp	r0, #0
    adba:	d0d0      	beq.n	ad5e <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    adbc:	4629      	mov	r1, r5
    adbe:	4648      	mov	r0, r9
    adc0:	f01d fb36 	bl	28430 <k_queue_append>
    adc4:	e7cb      	b.n	ad5e <bt_receive_cb+0x36>
    adc6:	bf00      	nop
    adc8:	0002a863 	.word	0x0002a863
    adcc:	00029194 	.word	0x00029194
    add0:	20008b98 	.word	0x20008b98
    add4:	0002a87a 	.word	0x0002a87a

0000add8 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    add8:	4603      	mov	r3, r0
    adda:	b510      	push	{r4, lr}
    addc:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    adde:	7919      	ldrb	r1, [r3, #4]
    ade0:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    ade2:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ade4:	fa03 f101 	lsl.w	r1, r3, r1
    ade8:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    adea:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    adec:	681b      	ldr	r3, [r3, #0]
    adee:	4219      	tst	r1, r3
    adf0:	d10e      	bne.n	ae10 <gpio_pin_set_dt.isra.0+0x38>
    adf2:	490e      	ldr	r1, [pc, #56]	; (ae2c <gpio_pin_set_dt.isra.0+0x54>)
    adf4:	f240 533d 	movw	r3, #1341	; 0x53d
    adf8:	4a0d      	ldr	r2, [pc, #52]	; (ae30 <gpio_pin_set_dt.isra.0+0x58>)
    adfa:	480e      	ldr	r0, [pc, #56]	; (ae34 <gpio_pin_set_dt.isra.0+0x5c>)
    adfc:	f019 f911 	bl	24022 <assert_print>
    ae00:	480d      	ldr	r0, [pc, #52]	; (ae38 <gpio_pin_set_dt.isra.0+0x60>)
    ae02:	f019 f90e 	bl	24022 <assert_print>
    ae06:	f240 513d 	movw	r1, #1341	; 0x53d
    ae0a:	4809      	ldr	r0, [pc, #36]	; (ae30 <gpio_pin_set_dt.isra.0+0x58>)
    ae0c:	f019 f902 	bl	24014 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    ae10:	6823      	ldr	r3, [r4, #0]
    ae12:	4219      	tst	r1, r3
    ae14:	d003      	beq.n	ae1e <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    ae16:	b122      	cbz	r2, ae22 <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    ae18:	6883      	ldr	r3, [r0, #8]
    ae1a:	691b      	ldr	r3, [r3, #16]
    ae1c:	e003      	b.n	ae26 <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    ae1e:	2a00      	cmp	r2, #0
    ae20:	d0fa      	beq.n	ae18 <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    ae22:	6883      	ldr	r3, [r0, #8]
    ae24:	68db      	ldr	r3, [r3, #12]
}
    ae26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    ae2a:	4718      	bx	r3
    ae2c:	0002a62b 	.word	0x0002a62b
    ae30:	0002a5fa 	.word	0x0002a5fa
    ae34:	0002a669 	.word	0x0002a669
    ae38:	0002a686 	.word	0x0002a686

0000ae3c <button_pressed_1>:
void button_pressed_1(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    ae3c:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ae3e:	4807      	ldr	r0, [pc, #28]	; (ae5c <button_pressed_1+0x20>)
    ae40:	f014 f98c 	bl	1f15c <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    ae44:	2101      	movs	r1, #1
    ae46:	4806      	ldr	r0, [pc, #24]	; (ae60 <button_pressed_1+0x24>)
    ae48:	f7ff ffc6 	bl	add8 <gpio_pin_set_dt.isra.0>
    ae4c:	f01c fb67 	bl	2751e <sys_clock_cycle_get_32>
}
    ae50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ae54:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    ae56:	4803      	ldr	r0, [pc, #12]	; (ae64 <button_pressed_1+0x28>)
    ae58:	f018 bf21 	b.w	23c9e <printk>
    ae5c:	20008b64 	.word	0x20008b64
    ae60:	00029a18 	.word	0x00029a18
    ae64:	0002a8a5 	.word	0x0002a8a5

0000ae68 <connected>:
{
    ae68:	b570      	push	{r4, r5, r6, lr}
    ae6a:	4605      	mov	r5, r0
	if (err) {
    ae6c:	460c      	mov	r4, r1
{
    ae6e:	b08c      	sub	sp, #48	; 0x30
	if (err) {
    ae70:	b161      	cbz	r1, ae8c <connected+0x24>
		LOG_ERR("Connection failed (err %u)", err);
    ae72:	4b14      	ldr	r3, [pc, #80]	; (aec4 <connected+0x5c>)
    ae74:	9103      	str	r1, [sp, #12]
    ae76:	9302      	str	r3, [sp, #8]
    ae78:	2300      	movs	r3, #0
    ae7a:	2201      	movs	r2, #1
    ae7c:	4618      	mov	r0, r3
    ae7e:	e9cd 3300 	strd	r3, r3, [sp]
    ae82:	4911      	ldr	r1, [pc, #68]	; (aec8 <connected+0x60>)
    ae84:	f018 fd26 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
}
    ae88:	b00c      	add	sp, #48	; 0x30
    ae8a:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ae8c:	ae04      	add	r6, sp, #16
    ae8e:	f01a fc8f 	bl	257b0 <bt_conn_get_dst>
    ae92:	4631      	mov	r1, r6
    ae94:	f7ff fe3e 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    ae98:	4b0c      	ldr	r3, [pc, #48]	; (aecc <connected+0x64>)
    ae9a:	2203      	movs	r2, #3
    ae9c:	4620      	mov	r0, r4
    ae9e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    aea2:	4909      	ldr	r1, [pc, #36]	; (aec8 <connected+0x60>)
    aea4:	4623      	mov	r3, r4
    aea6:	9603      	str	r6, [sp, #12]
    aea8:	9400      	str	r4, [sp, #0]
    aeaa:	f018 fd13 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    aeae:	4628      	mov	r0, r5
    aeb0:	f008 fa8a 	bl	133c8 <bt_conn_ref>
    aeb4:	4b06      	ldr	r3, [pc, #24]	; (aed0 <connected+0x68>)
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    aeb6:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    aeb8:	6018      	str	r0, [r3, #0]
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    aeba:	4806      	ldr	r0, [pc, #24]	; (aed4 <connected+0x6c>)
    aebc:	f7ff ff8c 	bl	add8 <gpio_pin_set_dt.isra.0>
    aec0:	e7e2      	b.n	ae88 <connected+0x20>
    aec2:	bf00      	nop
    aec4:	0002a8bd 	.word	0x0002a8bd
    aec8:	00029784 	.word	0x00029784
    aecc:	0002a8d8 	.word	0x0002a8d8
    aed0:	20009d34 	.word	0x20009d34
    aed4:	00029a30 	.word	0x00029a30

0000aed8 <disconnected>:
{
    aed8:	b530      	push	{r4, r5, lr}
    aeda:	460c      	mov	r4, r1
    aedc:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    aede:	ad06      	add	r5, sp, #24
    aee0:	f01a fc66 	bl	257b0 <bt_conn_get_dst>
    aee4:	4629      	mov	r1, r5
    aee6:	f7ff fe15 	bl	ab14 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    aeea:	e9cd 5403 	strd	r5, r4, [sp, #12]
    aeee:	2400      	movs	r4, #0
    aef0:	4b0d      	ldr	r3, [pc, #52]	; (af28 <disconnected+0x50>)
	if (auth_conn) {
    aef2:	4d0e      	ldr	r5, [pc, #56]	; (af2c <disconnected+0x54>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    aef4:	4620      	mov	r0, r4
    aef6:	9302      	str	r3, [sp, #8]
    aef8:	2203      	movs	r2, #3
    aefa:	4623      	mov	r3, r4
    aefc:	e9cd 4400 	strd	r4, r4, [sp]
    af00:	490b      	ldr	r1, [pc, #44]	; (af30 <disconnected+0x58>)
    af02:	f018 fce7 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
	if (auth_conn) {
    af06:	6828      	ldr	r0, [r5, #0]
    af08:	b110      	cbz	r0, af10 <disconnected+0x38>
		bt_conn_unref(auth_conn);
    af0a:	f008 fa85 	bl	13418 <bt_conn_unref>
		auth_conn = NULL;
    af0e:	602c      	str	r4, [r5, #0]
	if (current_conn) {
    af10:	4c08      	ldr	r4, [pc, #32]	; (af34 <disconnected+0x5c>)
    af12:	6820      	ldr	r0, [r4, #0]
    af14:	b130      	cbz	r0, af24 <disconnected+0x4c>
		bt_conn_unref(current_conn);
    af16:	f008 fa7f 	bl	13418 <bt_conn_unref>
		current_conn = NULL;
    af1a:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    af1c:	4806      	ldr	r0, [pc, #24]	; (af38 <disconnected+0x60>)
		current_conn = NULL;
    af1e:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    af20:	f7ff ff5a 	bl	add8 <gpio_pin_set_dt.isra.0>
}
    af24:	b00f      	add	sp, #60	; 0x3c
    af26:	bd30      	pop	{r4, r5, pc}
    af28:	0002a8e5 	.word	0x0002a8e5
    af2c:	20009d30 	.word	0x20009d30
    af30:	00029784 	.word	0x00029784
    af34:	20009d34 	.word	0x20009d34
    af38:	00029a30 	.word	0x00029a30

0000af3c <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    af3c:	4603      	mov	r3, r0
    af3e:	b570      	push	{r4, r5, r6, lr}
    af40:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    af42:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    af44:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    af46:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    af48:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    af4a:	f002 0430 	and.w	r4, r2, #48	; 0x30
    af4e:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    af50:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    af52:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    af56:	d10e      	bne.n	af76 <gpio_pin_configure_dt.isra.0+0x3a>
    af58:	4925      	ldr	r1, [pc, #148]	; (aff0 <gpio_pin_configure_dt.isra.0+0xb4>)
    af5a:	f240 23b7 	movw	r3, #695	; 0x2b7
    af5e:	4a25      	ldr	r2, [pc, #148]	; (aff4 <gpio_pin_configure_dt.isra.0+0xb8>)
    af60:	4825      	ldr	r0, [pc, #148]	; (aff8 <gpio_pin_configure_dt.isra.0+0xbc>)
    af62:	f019 f85e 	bl	24022 <assert_print>
    af66:	4825      	ldr	r0, [pc, #148]	; (affc <gpio_pin_configure_dt.isra.0+0xc0>)
    af68:	f019 f85b 	bl	24022 <assert_print>
    af6c:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    af70:	4820      	ldr	r0, [pc, #128]	; (aff4 <gpio_pin_configure_dt.isra.0+0xb8>)
    af72:	f019 f84f 	bl	24014 <assert_post_action>
    af76:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    af7a:	2c02      	cmp	r4, #2
    af7c:	d10c      	bne.n	af98 <gpio_pin_configure_dt.isra.0+0x5c>
    af7e:	4920      	ldr	r1, [pc, #128]	; (b000 <gpio_pin_configure_dt.isra.0+0xc4>)
    af80:	f240 23bb 	movw	r3, #699	; 0x2bb
    af84:	4a1b      	ldr	r2, [pc, #108]	; (aff4 <gpio_pin_configure_dt.isra.0+0xb8>)
    af86:	481c      	ldr	r0, [pc, #112]	; (aff8 <gpio_pin_configure_dt.isra.0+0xbc>)
    af88:	f019 f84b 	bl	24022 <assert_print>
    af8c:	481d      	ldr	r0, [pc, #116]	; (b004 <gpio_pin_configure_dt.isra.0+0xc8>)
    af8e:	f019 f848 	bl	24022 <assert_print>
    af92:	f240 21bb 	movw	r1, #699	; 0x2bb
    af96:	e7eb      	b.n	af70 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    af98:	f002 0406 	and.w	r4, r2, #6
    af9c:	2c04      	cmp	r4, #4
    af9e:	d109      	bne.n	afb4 <gpio_pin_configure_dt.isra.0+0x78>
    afa0:	4919      	ldr	r1, [pc, #100]	; (b008 <gpio_pin_configure_dt.isra.0+0xcc>)
    afa2:	f240 23bf 	movw	r3, #703	; 0x2bf
    afa6:	4a13      	ldr	r2, [pc, #76]	; (aff4 <gpio_pin_configure_dt.isra.0+0xb8>)
    afa8:	4813      	ldr	r0, [pc, #76]	; (aff8 <gpio_pin_configure_dt.isra.0+0xbc>)
    afaa:	f019 f83a 	bl	24022 <assert_print>
    afae:	f240 21bf 	movw	r1, #703	; 0x2bf
    afb2:	e7dd      	b.n	af70 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    afb4:	2401      	movs	r4, #1
    afb6:	681b      	ldr	r3, [r3, #0]
    afb8:	408c      	lsls	r4, r1
    afba:	421c      	tst	r4, r3
    afbc:	d10c      	bne.n	afd8 <gpio_pin_configure_dt.isra.0+0x9c>
    afbe:	4913      	ldr	r1, [pc, #76]	; (b00c <gpio_pin_configure_dt.isra.0+0xd0>)
    afc0:	f240 23d2 	movw	r3, #722	; 0x2d2
    afc4:	4a0b      	ldr	r2, [pc, #44]	; (aff4 <gpio_pin_configure_dt.isra.0+0xb8>)
    afc6:	480c      	ldr	r0, [pc, #48]	; (aff8 <gpio_pin_configure_dt.isra.0+0xbc>)
    afc8:	f019 f82b 	bl	24022 <assert_print>
    afcc:	4810      	ldr	r0, [pc, #64]	; (b010 <gpio_pin_configure_dt.isra.0+0xd4>)
    afce:	f019 f828 	bl	24022 <assert_print>
    afd2:	f240 21d2 	movw	r1, #722	; 0x2d2
    afd6:	e7cb      	b.n	af70 <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    afd8:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    afda:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    afde:	bf14      	ite	ne
    afe0:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    afe2:	43a3      	biceq	r3, r4
    afe4:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    afe6:	6833      	ldr	r3, [r6, #0]
}
    afe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    afec:	4718      	bx	r3
    afee:	bf00      	nop
    aff0:	0002a902 	.word	0x0002a902
    aff4:	0002a5fa 	.word	0x0002a5fa
    aff8:	0002a669 	.word	0x0002a669
    affc:	0002a93b 	.word	0x0002a93b
    b000:	0002a978 	.word	0x0002a978
    b004:	0002a9ad 	.word	0x0002a9ad
    b008:	0002a9ff 	.word	0x0002a9ff
    b00c:	0002a62b 	.word	0x0002a62b
    b010:	0002a686 	.word	0x0002a686

0000b014 <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	switch (evt->type) {
    b016:	780b      	ldrb	r3, [r1, #0]
    b018:	2b05      	cmp	r3, #5
    b01a:	d828      	bhi.n	b06e <uart_cb+0x5a>
    b01c:	e8df f003 	tbb	[pc, r3]
    b020:	672b8f03 	.word	0x672b8f03
    b024:	467f      	.short	0x467f
		if ((evt->data.tx.len == 0) ||
    b026:	688b      	ldr	r3, [r1, #8]
    b028:	b30b      	cbz	r3, b06e <uart_cb+0x5a>
		    (!evt->data.tx.buf)) {
    b02a:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    b02c:	b1f8      	cbz	r0, b06e <uart_cb+0x5a>
		if (aborted_buf) {
    b02e:	4a4e      	ldr	r2, [pc, #312]	; (b168 <uart_cb+0x154>)
    b030:	6813      	ldr	r3, [r2, #0]
    b032:	b1f3      	cbz	r3, b072 <uart_cb+0x5e>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b034:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    b036:	2300      	movs	r3, #0
    b038:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    b03a:	4a4c      	ldr	r2, [pc, #304]	; (b16c <uart_cb+0x158>)
    b03c:	6013      	str	r3, [r2, #0]
		k_free(buf);
    b03e:	f01d fba4 	bl	2878a <k_free>
	return z_impl_k_queue_get(queue, timeout);
    b042:	2200      	movs	r2, #0
    b044:	2300      	movs	r3, #0
    b046:	484a      	ldr	r0, [pc, #296]	; (b170 <uart_cb+0x15c>)
    b048:	f014 f81e 	bl	1f088 <z_impl_k_queue_get>
		if (!buf) {
    b04c:	b178      	cbz	r0, b06e <uart_cb+0x5a>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
    b04e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b050:	1d01      	adds	r1, r0, #4
    b052:	4848      	ldr	r0, [pc, #288]	; (b174 <uart_cb+0x160>)
    b054:	f018 fc55 	bl	23902 <uart_tx.constprop.0>
    b058:	b148      	cbz	r0, b06e <uart_cb+0x5a>
			LOG_WRN("Failed to send data over UART");
    b05a:	4b47      	ldr	r3, [pc, #284]	; (b178 <uart_cb+0x164>)
    b05c:	2202      	movs	r2, #2
    b05e:	9302      	str	r3, [sp, #8]
    b060:	2300      	movs	r3, #0
    b062:	4618      	mov	r0, r3
    b064:	e9cd 3300 	strd	r3, r3, [sp]
    b068:	4944      	ldr	r1, [pc, #272]	; (b17c <uart_cb+0x168>)
			LOG_WRN("Not able to allocate UART receive buffer");
    b06a:	f018 fc33 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
}
    b06e:	b004      	add	sp, #16
    b070:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
    b072:	3804      	subs	r0, #4
    b074:	e7e3      	b.n	b03e <uart_cb+0x2a>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b076:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    b078:	68cb      	ldr	r3, [r1, #12]
    b07a:	8d10      	ldrh	r0, [r2, #40]	; 0x28
    b07c:	4403      	add	r3, r0
		if (disable_req) {
    b07e:	4840      	ldr	r0, [pc, #256]	; (b180 <uart_cb+0x16c>)
		buf->len += evt->data.rx.len;
    b080:	b29b      	uxth	r3, r3
    b082:	8513      	strh	r3, [r2, #40]	; 0x28
		if (disable_req) {
    b084:	7802      	ldrb	r2, [r0, #0]
    b086:	2a00      	cmp	r2, #0
    b088:	d1f1      	bne.n	b06e <uart_cb+0x5a>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    b08a:	684a      	ldr	r2, [r1, #4]
    b08c:	4413      	add	r3, r2
    b08e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b092:	2b0a      	cmp	r3, #10
    b094:	d001      	beq.n	b09a <uart_cb+0x86>
    b096:	2b0d      	cmp	r3, #13
    b098:	d1e9      	bne.n	b06e <uart_cb+0x5a>
			disable_req = true;
    b09a:	2301      	movs	r3, #1
    b09c:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    b09e:	4835      	ldr	r0, [pc, #212]	; (b174 <uart_cb+0x160>)
    b0a0:	6883      	ldr	r3, [r0, #8]
    b0a2:	695b      	ldr	r3, [r3, #20]
}
    b0a4:	b004      	add	sp, #16
    b0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0aa:	4718      	bx	r3
		disable_req = false;
    b0ac:	2400      	movs	r4, #0
    b0ae:	4b34      	ldr	r3, [pc, #208]	; (b180 <uart_cb+0x16c>)
		buf = k_malloc(sizeof(*buf));
    b0b0:	2030      	movs	r0, #48	; 0x30
		disable_req = false;
    b0b2:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    b0b4:	f01d fb70 	bl	28798 <k_malloc>
    b0b8:	4603      	mov	r3, r0
		if (buf) {
    b0ba:	b138      	cbz	r0, b0cc <uart_cb+0xb8>
			buf->len = 0;
    b0bc:	8584      	strh	r4, [r0, #44]	; 0x2c
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b0be:	1d01      	adds	r1, r0, #4
    b0c0:	482c      	ldr	r0, [pc, #176]	; (b174 <uart_cb+0x160>)
}
    b0c2:	b004      	add	sp, #16
    b0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b0c8:	f018 bc13 	b.w	238f2 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    b0cc:	4a2d      	ldr	r2, [pc, #180]	; (b184 <uart_cb+0x170>)
    b0ce:	9000      	str	r0, [sp, #0]
    b0d0:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b0d4:	4929      	ldr	r1, [pc, #164]	; (b17c <uart_cb+0x168>)
    b0d6:	2202      	movs	r2, #2
    b0d8:	f018 fbfc 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b0dc:	f240 6267 	movw	r2, #1639	; 0x667
    b0e0:	2300      	movs	r3, #0
    b0e2:	4829      	ldr	r0, [pc, #164]	; (b188 <uart_cb+0x174>)
}
    b0e4:	b004      	add	sp, #16
    b0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b0ea:	f014 bdd7 	b.w	1fc9c <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    b0ee:	2030      	movs	r0, #48	; 0x30
    b0f0:	f01d fb52 	bl	28798 <k_malloc>
    b0f4:	4603      	mov	r3, r0
		if (buf) {
    b0f6:	b158      	cbz	r0, b110 <uart_cb+0xfc>
			buf->len = 0;
    b0f8:	2200      	movs	r2, #0
    b0fa:	8582      	strh	r2, [r0, #44]	; 0x2c
	return api->rx_buf_rsp(dev, buf, len);
    b0fc:	481d      	ldr	r0, [pc, #116]	; (b174 <uart_cb+0x160>)
    b0fe:	1d19      	adds	r1, r3, #4
    b100:	6882      	ldr	r2, [r0, #8]
    b102:	6914      	ldr	r4, [r2, #16]
    b104:	2228      	movs	r2, #40	; 0x28
    b106:	4623      	mov	r3, r4
}
    b108:	b004      	add	sp, #16
    b10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b10e:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    b110:	4a1c      	ldr	r2, [pc, #112]	; (b184 <uart_cb+0x170>)
    b112:	491a      	ldr	r1, [pc, #104]	; (b17c <uart_cb+0x168>)
    b114:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b118:	9000      	str	r0, [sp, #0]
    b11a:	2202      	movs	r2, #2
    b11c:	e7a5      	b.n	b06a <uart_cb+0x56>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    b11e:	684b      	ldr	r3, [r1, #4]
    b120:	1f19      	subs	r1, r3, #4
		if (buf->len > 0) {
    b122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b124:	b12b      	cbz	r3, b132 <uart_cb+0x11e>
			k_fifo_put(&fifo_uart_rx_data, buf);
    b126:	4819      	ldr	r0, [pc, #100]	; (b18c <uart_cb+0x178>)
}
    b128:	b004      	add	sp, #16
    b12a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    b12e:	f01d b97f 	b.w	28430 <k_queue_append>
			k_free(buf);
    b132:	4608      	mov	r0, r1
}
    b134:	b004      	add	sp, #16
    b136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    b13a:	f01d bb26 	b.w	2878a <k_free>
		if (!aborted_buf) {
    b13e:	4a0a      	ldr	r2, [pc, #40]	; (b168 <uart_cb+0x154>)
    b140:	6813      	ldr	r3, [r2, #0]
    b142:	b90b      	cbnz	r3, b148 <uart_cb+0x134>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    b144:	684b      	ldr	r3, [r1, #4]
    b146:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    b148:	4808      	ldr	r0, [pc, #32]	; (b16c <uart_cb+0x158>)
    b14a:	688b      	ldr	r3, [r1, #8]
    b14c:	6801      	ldr	r1, [r0, #0]
    b14e:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b150:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    b152:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
    b154:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
		uart_tx(uart, &buf->data[aborted_len],
    b156:	4807      	ldr	r0, [pc, #28]	; (b174 <uart_cb+0x160>)
    b158:	1ad2      	subs	r2, r2, r3
    b15a:	4419      	add	r1, r3
}
    b15c:	b004      	add	sp, #16
    b15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
    b162:	f018 bbce 	b.w	23902 <uart_tx.constprop.0>
    b166:	bf00      	nop
    b168:	20009d2c 	.word	0x20009d2c
    b16c:	20009d28 	.word	0x20009d28
    b170:	20008b98 	.word	0x20008b98
    b174:	00029194 	.word	0x00029194
    b178:	0002aa32 	.word	0x0002aa32
    b17c:	00029784 	.word	0x00029784
    b180:	200214ca 	.word	0x200214ca
    b184:	0002a714 	.word	0x0002a714
    b188:	20009140 	.word	0x20009140
    b18c:	20008b7c 	.word	0x20008b7c

0000b190 <shoot_minute_save_thread>:
void shoot_minute_save_thread(void){
    b190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_uptime_ticks();
    b194:	f01d fa0a 	bl	285ac <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b198:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b19c:	fba0 0302 	umull	r0, r3, r0, r2
    b1a0:	fb02 3101 	mla	r1, r2, r1, r3
    b1a4:	0bc0      	lsrs	r0, r0, #15
   uint64_t actual_time = k_uptime_get()/1000;
    b1a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b1aa:	2300      	movs	r3, #0
    b1ac:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    b1b0:	0bc9      	lsrs	r1, r1, #15
    b1b2:	f7fd fe4d 	bl	8e50 <__aeabi_ldivmod>
    h = (actual_time/3600); 
    b1b6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b1ba:	2300      	movs	r3, #0
   uint64_t actual_time = k_uptime_get()/1000;
    b1bc:	460d      	mov	r5, r1
    b1be:	4606      	mov	r6, r0
    h = (actual_time/3600); 
    b1c0:	f7fd fe96 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b1c4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b1c8:	fb03 f100 	mul.w	r1, r3, r0
    b1cc:	1a70      	subs	r0, r6, r1
    b1ce:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    b1d2:	223c      	movs	r2, #60	; 0x3c
    b1d4:	2300      	movs	r3, #0
    b1d6:	f7fd fe8b 	bl	8ef0 <__aeabi_uldivmod>
    b1da:	4605      	mov	r5, r0
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b1dc:	4f22      	ldr	r7, [pc, #136]	; (b268 <shoot_minute_save_thread+0xd8>)
    b1de:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    b1e2:	f01d f9e3 	bl	285ac <z_impl_k_uptime_ticks>
    b1e6:	fba0 4306 	umull	r4, r3, r0, r6
    b1ea:	fb06 3101 	mla	r1, r6, r1, r3
    b1ee:	0be4      	lsrs	r4, r4, #15
    actual_time = k_uptime_get()/1000;
    b1f0:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
    b1f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b1f8:	2300      	movs	r3, #0
    b1fa:	0bc9      	lsrs	r1, r1, #15
    b1fc:	f7fd fe28 	bl	8e50 <__aeabi_ldivmod>
	h = (actual_time/3600); 
    b200:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b204:	2300      	movs	r3, #0
    actual_time = k_uptime_get()/1000;
    b206:	4604      	mov	r4, r0
    b208:	468a      	mov	sl, r1
	m = (actual_time -(3600*h))/60;
    b20a:	f44f 6861 	mov.w	r8, #3600	; 0xe10
	h = (actual_time/3600); 
    b20e:	f7fd fe6f 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b212:	fb08 f800 	mul.w	r8, r8, r0
	h = (actual_time/3600); 
    b216:	4681      	mov	r9, r0
	m = (actual_time -(3600*h))/60;
    b218:	ebb4 0008 	subs.w	r0, r4, r8
    b21c:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b220:	eb6a 71e8 	sbc.w	r1, sl, r8, asr #31
    b224:	2300      	movs	r3, #0
    b226:	f7fd fe63 	bl	8ef0 <__aeabi_uldivmod>
   if (m==(last_minute+1)){
    b22a:	1c6a      	adds	r2, r5, #1
    b22c:	4282      	cmp	r2, r0
    b22e:	d1d8      	bne.n	b1e2 <shoot_minute_save_thread+0x52>
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b230:	233c      	movs	r3, #60	; 0x3c
        if (m==59){last_minute=-1;}
    b232:	2a3b      	cmp	r2, #59	; 0x3b
    b234:	bf14      	ite	ne
    b236:	4615      	movne	r5, r2
    b238:	f04f 35ff 	moveq.w	r5, #4294967295
	s = (actual_time -(3600*h)-(m*60));
    b23c:	eba4 0408 	sub.w	r4, r4, r8
		if (h==24){h=0;} // only up to 23:59:59h
    b240:	f1b9 0f18 	cmp.w	r9, #24
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b244:	fb03 4312 	mls	r3, r3, r2, r4
    b248:	bf14      	ite	ne
    b24a:	4649      	movne	r1, r9
    b24c:	2100      	moveq	r1, #0
    b24e:	4638      	mov	r0, r7
    b250:	f018 fd25 	bl	23c9e <printk>
        feed_circular_buffer();
    b254:	f000 fc48 	bl	bae8 <feed_circular_buffer>
		print_current_position_cb(C_Buffer_Current_Position);
    b258:	4b04      	ldr	r3, [pc, #16]	; (b26c <shoot_minute_save_thread+0xdc>)
    b25a:	6818      	ldr	r0, [r3, #0]
    b25c:	f000 fd7a 	bl	bd54 <print_current_position_cb>
		printk(" \n");
    b260:	4803      	ldr	r0, [pc, #12]	; (b270 <shoot_minute_save_thread+0xe0>)
    b262:	f018 fd1c 	bl	23c9e <printk>
    b266:	e7ba      	b.n	b1de <shoot_minute_save_thread+0x4e>
    b268:	0002aa50 	.word	0x0002aa50
    b26c:	20020e74 	.word	0x20020e74
    b270:	0002aee2 	.word	0x0002aee2

0000b274 <ble_write_thread>:
{
    b274:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    b276:	f04f 32ff 	mov.w	r2, #4294967295
    b27a:	f04f 33ff 	mov.w	r3, #4294967295
    b27e:	480d      	ldr	r0, [pc, #52]	; (b2b4 <ble_write_thread+0x40>)
    b280:	f018 fb47 	bl	23912 <k_sem_take.constprop.0.isra.0>
	return z_impl_k_queue_get(queue, timeout);
    b284:	4d0c      	ldr	r5, [pc, #48]	; (b2b8 <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    b286:	4e0d      	ldr	r6, [pc, #52]	; (b2bc <ble_write_thread+0x48>)
    b288:	f04f 32ff 	mov.w	r2, #4294967295
    b28c:	f04f 33ff 	mov.w	r3, #4294967295
    b290:	4628      	mov	r0, r5
    b292:	f013 fef9 	bl	1f088 <z_impl_k_queue_get>
    b296:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len)) {
    b298:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b29a:	1d01      	adds	r1, r0, #4
    b29c:	2000      	movs	r0, #0
    b29e:	f003 feaf 	bl	f000 <bt_nus_send>
    b2a2:	b110      	cbz	r0, b2aa <ble_write_thread+0x36>
			printk("Falha aqui- Failed to send data over BLE connection");
    b2a4:	4630      	mov	r0, r6
    b2a6:	f018 fcfa 	bl	23c9e <printk>
		k_free(buf);
    b2aa:	4620      	mov	r0, r4
    b2ac:	f01d fa6d 	bl	2878a <k_free>
	for (;;) {
    b2b0:	e7ea      	b.n	b288 <ble_write_thread+0x14>
    b2b2:	bf00      	nop
    b2b4:	20008ad4 	.word	0x20008ad4
    b2b8:	20008b7c 	.word	0x20008b7c
    b2bc:	0002aa80 	.word	0x0002aa80

0000b2c0 <adc_thread>:
}




void adc_thread(void){
    b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b2c4:	4e36      	ldr	r6, [pc, #216]	; (b3a0 <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    b2c6:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b3a4 <adc_thread+0xe4>
    b2ca:	b085      	sub	sp, #20
	int err;
    

    while (1) {	
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b2cc:	4c36      	ldr	r4, [pc, #216]	; (b3a8 <adc_thread+0xe8>)
    b2ce:	2700      	movs	r7, #0
    b2d0:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
            k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b2d2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b3ac <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    b2d6:	7963      	ldrb	r3, [r4, #5]
    b2d8:	b13b      	cbz	r3, b2ea <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    b2da:	2301      	movs	r3, #1
    b2dc:	7922      	ldrb	r2, [r4, #4]
    b2de:	4093      	lsls	r3, r2
    b2e0:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    b2e2:	7c23      	ldrb	r3, [r4, #16]
    b2e4:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    b2e6:	7c63      	ldrb	r3, [r4, #17]
    b2e8:	7473      	strb	r3, [r6, #17]
    b2ea:	f04f 32ff 	mov.w	r2, #4294967295
    b2ee:	f04f 33ff 	mov.w	r3, #4294967295
    b2f2:	4650      	mov	r0, sl
    b2f4:	f013 fcd0 	bl	1ec98 <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    b2f8:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    b2fa:	68ab      	ldr	r3, [r5, #8]
    b2fc:	4631      	mov	r1, r6
    b2fe:	4628      	mov	r0, r5
    b300:	685b      	ldr	r3, [r3, #4]
    b302:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b304:	7922      	ldrb	r2, [r4, #4]
    b306:	f9b8 1000 	ldrsh.w	r1, [r8]
    b30a:	4b29      	ldr	r3, [pc, #164]	; (b3b0 <adc_thread+0xf0>)
    b30c:	9201      	str	r2, [sp, #4]
    b30e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

           if (flag==1){
    b312:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b3b4 <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    b316:	4650      	mov	r0, sl
    b318:	f013 fd8e 	bl	1ee38 <z_impl_k_mutex_unlock>
    b31c:	f8d9 3000 	ldr.w	r3, [r9]
    b320:	9a01      	ldr	r2, [sp, #4]
    b322:	2b01      	cmp	r3, #1
    b324:	d12d      	bne.n	b382 <adc_thread+0xc2>
			printk("- %s, channel %d: ",adc_channels[i].dev->name,adc_channels[i].channel_id);
    b326:	6829      	ldr	r1, [r5, #0]
    b328:	4823      	ldr	r0, [pc, #140]	; (b3b8 <adc_thread+0xf8>)
    b32a:	f018 fcb8 	bl	23c9e <printk>
			printk("%"PRId16, buf_adc);
    b32e:	f9b8 1000 	ldrsh.w	r1, [r8]
    b332:	4822      	ldr	r0, [pc, #136]	; (b3bc <adc_thread+0xfc>)
    b334:	f018 fcb3 	bl	23c9e <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b338:	7963      	ldrb	r3, [r4, #5]
			val_mv = buf_adc;
    b33a:	f9b8 5000 	ldrsh.w	r5, [r8]
    b33e:	b1e3      	cbz	r3, b37a <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    b340:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b342:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    b344:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b348:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    b34a:	bf0a      	itet	eq
    b34c:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    b34e:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    b350:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    b352:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    b354:	bf08      	it	eq
    b356:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    b358:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    b35a:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    b35c:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    b35e:	bf44      	itt	mi
    b360:	f103 33ff 	addmi.w	r3, r3, #4294967295
    b364:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    b366:	79a0      	ldrb	r0, [r4, #6]
    b368:	a903      	add	r1, sp, #12
    b36a:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    b36c:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    b36e:	f00d fabb 	bl	188e8 <adc_gain_invert>
	if (ret == 0) {
    b372:	b910      	cbnz	r0, b37a <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    b374:	9d03      	ldr	r5, [sp, #12]
    b376:	9b01      	ldr	r3, [sp, #4]
    b378:	411d      	asrs	r5, r3
			adc_raw_to_millivolts_dt(&adc_channels[i],&val_mv);
			printk(" = %"PRId32" mV\n", val_mv);
    b37a:	4629      	mov	r1, r5
    b37c:	4810      	ldr	r0, [pc, #64]	; (b3c0 <adc_thread+0x100>)
    b37e:	f018 fc8e 	bl	23c9e <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b382:	3701      	adds	r7, #1
    b384:	2f06      	cmp	r7, #6
    b386:	f104 0414 	add.w	r4, r4, #20
    b38a:	d1a4      	bne.n	b2d6 <adc_thread+0x16>
		   }
			
		}
        flag=0;
    b38c:	2300      	movs	r3, #0
    b38e:	f8c9 3000 	str.w	r3, [r9]
	return z_impl_k_sleep(timeout);
    b392:	2100      	movs	r1, #0
    b394:	f640 40cd 	movw	r0, #3277	; 0xccd
    b398:	f015 fdd4 	bl	20f44 <z_impl_k_sleep>
    while (1) {	
    b39c:	e796      	b.n	b2cc <adc_thread+0xc>
    b39e:	bf00      	nop
    b3a0:	200083e8 	.word	0x200083e8
    b3a4:	20009d40 	.word	0x20009d40
    b3a8:	000299a0 	.word	0x000299a0
    b3ac:	200214ac 	.word	0x200214ac
    b3b0:	2002149c 	.word	0x2002149c
    b3b4:	20009d3c 	.word	0x20009d3c
    b3b8:	0002aab4 	.word	0x0002aab4
    b3bc:	0002aac7 	.word	0x0002aac7
    b3c0:	0002aacb 	.word	0x0002aacb

0000b3c4 <button_pressed_4>:
void button_pressed_4(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b3c4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b3c6:	4805      	ldr	r0, [pc, #20]	; (b3dc <button_pressed_4+0x18>)
    b3c8:	f013 fec8 	bl	1f15c <z_impl_k_sem_give>
    b3cc:	f01c f8a7 	bl	2751e <sys_clock_cycle_get_32>
}
    b3d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b3d4:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b3d6:	4802      	ldr	r0, [pc, #8]	; (b3e0 <button_pressed_4+0x1c>)
    b3d8:	f018 bc61 	b.w	23c9e <printk>
    b3dc:	20008b04 	.word	0x20008b04
    b3e0:	0002aad5 	.word	0x0002aad5

0000b3e4 <button_pressed_3>:
void button_pressed_3(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b3e4:	b508      	push	{r3, lr}
    b3e6:	4805      	ldr	r0, [pc, #20]	; (b3fc <button_pressed_3+0x18>)
    b3e8:	f013 feb8 	bl	1f15c <z_impl_k_sem_give>
    b3ec:	f01c f897 	bl	2751e <sys_clock_cycle_get_32>
}
    b3f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b3f4:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b3f6:	4802      	ldr	r0, [pc, #8]	; (b400 <button_pressed_3+0x1c>)
    b3f8:	f018 bc51 	b.w	23c9e <printk>
    b3fc:	20008aec 	.word	0x20008aec
    b400:	0002aaed 	.word	0x0002aaed

0000b404 <button_pressed_2>:
void button_pressed_2(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b404:	b508      	push	{r3, lr}
    b406:	4807      	ldr	r0, [pc, #28]	; (b424 <button_pressed_2+0x20>)
    b408:	f013 fea8 	bl	1f15c <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    b40c:	2101      	movs	r1, #1
    b40e:	4806      	ldr	r0, [pc, #24]	; (b428 <button_pressed_2+0x24>)
    b410:	f7ff fce2 	bl	add8 <gpio_pin_set_dt.isra.0>
    b414:	f01c f883 	bl	2751e <sys_clock_cycle_get_32>
}
    b418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b41c:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    b41e:	4803      	ldr	r0, [pc, #12]	; (b42c <button_pressed_2+0x28>)
    b420:	f018 bc3d 	b.w	23c9e <printk>
    b424:	20008b34 	.word	0x20008b34
    b428:	00029a20 	.word	0x00029a20
    b42c:	0002ab05 	.word	0x0002ab05

0000b430 <uart2_teste>:
void uart2_teste(void){
    b430:	b510      	push	{r4, lr}
   buf = k_malloc(sizeof(*buf));
    b432:	2030      	movs	r0, #48	; 0x30
    b434:	f01d f9b0 	bl	28798 <k_malloc>
    buf->data[0] = 0x41;
    b438:	f244 2341 	movw	r3, #16961	; 0x4241
    buf->len=3;
    b43c:	2203      	movs	r2, #3
    buf->data[0] = 0x41;
    b43e:	8083      	strh	r3, [r0, #4]
	buf->data[2] = 0x43;
    b440:	2343      	movs	r3, #67	; 0x43
   buf = k_malloc(sizeof(*buf));
    b442:	4604      	mov	r4, r0
	buf->data[2] = 0x43;
    b444:	7183      	strb	r3, [r0, #6]
    buf->len=3;
    b446:	8582      	strh	r2, [r0, #44]	; 0x2c
   uart_tx(uart_2, buf->data, buf->len, SYS_FOREVER_MS);
    b448:	1d01      	adds	r1, r0, #4
    b44a:	4804      	ldr	r0, [pc, #16]	; (b45c <uart2_teste+0x2c>)
    b44c:	f018 fa59 	bl	23902 <uart_tx.constprop.0>
   k_free(buf);
    b450:	4620      	mov	r0, r4
}
    b452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   k_free(buf);
    b456:	f01d b998 	b.w	2878a <k_free>
    b45a:	bf00      	nop
    b45c:	0002917c 	.word	0x0002917c

0000b460 <flash_test_>:
void flash_test_(void) {
    b460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   buf = k_malloc(buff_size);
    b464:	f44f 7080 	mov.w	r0, #256	; 0x100
    b468:	f01d f996 	bl	28798 <k_malloc>
    b46c:	4604      	mov	r4, r0
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b46e:	4825      	ldr	r0, [pc, #148]	; (b504 <flash_test_+0xa4>)
    b470:	f012 fef8 	bl	1e264 <z_impl_device_get_binding>
    flash_device = device_get_binding("mx25r6435f@0");
    b474:	4e24      	ldr	r6, [pc, #144]	; (b508 <flash_test_+0xa8>)
    b476:	6030      	str	r0, [r6, #0]
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    b478:	6883      	ldr	r3, [r0, #8]
    b47a:	4622      	mov	r2, r4
    b47c:	681d      	ldr	r5, [r3, #0]
    b47e:	2100      	movs	r1, #0
    b480:	f44f 7380 	mov.w	r3, #256	; 0x100
    b484:	47a8      	blx	r5
    printf("Result flash_read:%d \n", err);
    b486:	f8df 8084 	ldr.w	r8, [pc, #132]	; b50c <flash_test_+0xac>
    err = flash_read(flash_device, 0, buf, buff_size);
    b48a:	4d21      	ldr	r5, [pc, #132]	; (b510 <flash_test_+0xb0>)
    printf("valor:%d\n",buf[0]);
    b48c:	4f21      	ldr	r7, [pc, #132]	; (b514 <flash_test_+0xb4>)
    b48e:	4601      	mov	r1, r0
    err = flash_read(flash_device, 0, buf, buff_size);
    b490:	6028      	str	r0, [r5, #0]
    printf("Result flash_read:%d \n", err);
    b492:	4640      	mov	r0, r8
    b494:	f017 fae8 	bl	22a68 <iprintf>
    printf("valor:%d\n",buf[0]);
    b498:	4638      	mov	r0, r7
    b49a:	7821      	ldrb	r1, [r4, #0]
    b49c:	f017 fae4 	bl	22a68 <iprintf>
    err = flash_erase(flash_device, 0, 4096); //Mininum to be erased
    b4a0:	6830      	ldr	r0, [r6, #0]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    b4a2:	6883      	ldr	r3, [r0, #8]
    b4a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    b4a8:	689b      	ldr	r3, [r3, #8]
    b4aa:	2100      	movs	r1, #0
    b4ac:	4798      	blx	r3
    b4ae:	4601      	mov	r1, r0
    b4b0:	6028      	str	r0, [r5, #0]
    printf("Result flash_erase:%d \n", err);
    b4b2:	4819      	ldr	r0, [pc, #100]	; (b518 <flash_test_+0xb8>)
    b4b4:	f017 fad8 	bl	22a68 <iprintf>
    buf[0]=0xfd;
    b4b8:	23fd      	movs	r3, #253	; 0xfd
    err = flash_write(flash_device, 0,  buf, buff_size);
    b4ba:	6830      	ldr	r0, [r6, #0]
    buf[0]=0xfd;
    b4bc:	7023      	strb	r3, [r4, #0]
	rc = api->write(dev, offset, data, len);
    b4be:	6883      	ldr	r3, [r0, #8]
    b4c0:	4622      	mov	r2, r4
    b4c2:	f8d3 9004 	ldr.w	r9, [r3, #4]
    b4c6:	2100      	movs	r1, #0
    b4c8:	f44f 7380 	mov.w	r3, #256	; 0x100
    b4cc:	47c8      	blx	r9
    b4ce:	4601      	mov	r1, r0
    err = flash_write(flash_device, 0,  buf, buff_size);
    b4d0:	6028      	str	r0, [r5, #0]
    printf("Result flash_write:%d \n", err);
    b4d2:	4812      	ldr	r0, [pc, #72]	; (b51c <flash_test_+0xbc>)
    b4d4:	f017 fac8 	bl	22a68 <iprintf>
	buf[0]=0xFF;
    b4d8:	23ff      	movs	r3, #255	; 0xff
    err = flash_read(flash_device, 0,  buf, buff_size);
    b4da:	6830      	ldr	r0, [r6, #0]
	buf[0]=0xFF;
    b4dc:	7023      	strb	r3, [r4, #0]
	return api->read(dev, offset, data, len);
    b4de:	6883      	ldr	r3, [r0, #8]
    b4e0:	4622      	mov	r2, r4
    b4e2:	681e      	ldr	r6, [r3, #0]
    b4e4:	2100      	movs	r1, #0
    b4e6:	f44f 7380 	mov.w	r3, #256	; 0x100
    b4ea:	47b0      	blx	r6
    b4ec:	4601      	mov	r1, r0
    err = flash_read(flash_device, 0,  buf, buff_size);
    b4ee:	6028      	str	r0, [r5, #0]
    printf("Result flash_read:%d \n", err);
    b4f0:	4640      	mov	r0, r8
    b4f2:	f017 fab9 	bl	22a68 <iprintf>
    printf("valor:%d\n",buf[0]);
    b4f6:	4638      	mov	r0, r7
    b4f8:	7821      	ldrb	r1, [r4, #0]
}
    b4fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printf("valor:%d\n",buf[0]);
    b4fe:	f017 bab3 	b.w	22a68 <iprintf>
    b502:	bf00      	nop
    b504:	0002ab1d 	.word	0x0002ab1d
    b508:	200083e4 	.word	0x200083e4
    b50c:	0002ab2a 	.word	0x0002ab2a
    b510:	20009d38 	.word	0x20009d38
    b514:	0002ab41 	.word	0x0002ab41
    b518:	0002ab4b 	.word	0x0002ab4b
    b51c:	0002ab63 	.word	0x0002ab63

0000b520 <write_memory_thread>:
void write_memory_thread(void){
    b520:	b510      	push	{r4, lr}
		    k_sem_take(&save_memory,K_FOREVER);
    b522:	4c05      	ldr	r4, [pc, #20]	; (b538 <write_memory_thread+0x18>)
    b524:	f04f 32ff 	mov.w	r2, #4294967295
    b528:	f04f 33ff 	mov.w	r3, #4294967295
    b52c:	4620      	mov	r0, r4
    b52e:	f018 f9f0 	bl	23912 <k_sem_take.constprop.0.isra.0>
		    flash_test_();
    b532:	f7ff ff95 	bl	b460 <flash_test_>
	while(1){
    b536:	e7f5      	b.n	b524 <write_memory_thread+0x4>
    b538:	20008b34 	.word	0x20008b34

0000b53c <send_bluetooth>:
{
    b53c:	b084      	sub	sp, #16
    b53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b542:	ac06      	add	r4, sp, #24
    b544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b548:	203d      	movs	r0, #61	; 0x3d
    uint32_t comprimento=buf.len;
    b54a:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b54e:	f01d f923 	bl	28798 <k_malloc>
    int k=0;
    b552:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b554:	4605      	mov	r5, r0
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b556:	f8df 8054 	ldr.w	r8, [pc, #84]	; b5ac <send_bluetooth+0x70>
    while(k<comprimento-1){
    b55a:	1e77      	subs	r7, r6, #1
    b55c:	42a7      	cmp	r7, r4
    b55e:	d91d      	bls.n	b59c <send_bluetooth+0x60>
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b560:	42b4      	cmp	r4, r6
    b562:	d301      	bcc.n	b568 <send_bluetooth+0x2c>
    b564:	2200      	movs	r2, #0
    b566:	e00f      	b.n	b588 <send_bluetooth+0x4c>
    b568:	2200      	movs	r2, #0
    b56a:	1e6b      	subs	r3, r5, #1
       data[small_pkt]=buf.data[k];
    b56c:	f104 0118 	add.w	r1, r4, #24
    b570:	4469      	add	r1, sp
       small_pkt++;
    b572:	3201      	adds	r2, #1
	   *(packet_data+small_pkt) = buf.data[k];
    b574:	7909      	ldrb	r1, [r1, #4]
       small_pkt++;
    b576:	b292      	uxth	r2, r2
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b578:	2a3d      	cmp	r2, #61	; 0x3d
	   *(packet_data+small_pkt) = buf.data[k];
    b57a:	f803 1f01 	strb.w	r1, [r3, #1]!
       k++;
    b57e:	f104 0401 	add.w	r4, r4, #1
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b582:	d001      	beq.n	b588 <send_bluetooth+0x4c>
    b584:	42a6      	cmp	r6, r4
    b586:	d8f1      	bhi.n	b56c <send_bluetooth+0x30>
           if (bt_nus_send(NULL, packet_data ,small_pkt)) {
    b588:	4629      	mov	r1, r5
    b58a:	2000      	movs	r0, #0
    b58c:	f003 fd38 	bl	f000 <bt_nus_send>
    b590:	2800      	cmp	r0, #0
    b592:	d0e3      	beq.n	b55c <send_bluetooth+0x20>
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b594:	4640      	mov	r0, r8
    b596:	f018 fb82 	bl	23c9e <printk>
    b59a:	e7df      	b.n	b55c <send_bluetooth+0x20>
     k_free(packet_data);
    b59c:	4628      	mov	r0, r5
    b59e:	f01d f8f4 	bl	2878a <k_free>
}
    b5a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5a6:	2000      	movs	r0, #0
    b5a8:	b004      	add	sp, #16
    b5aa:	4770      	bx	lr
    b5ac:	0002ab7b 	.word	0x0002ab7b

0000b5b0 <send_protobuf_thread>:
void send_protobuf_thread(void){
    b5b0:	b510      	push	{r4, lr}
		    k_sem_take(&send_proto,K_FOREVER);
    b5b2:	4c05      	ldr	r4, [pc, #20]	; (b5c8 <send_protobuf_thread+0x18>)
    b5b4:	f04f 32ff 	mov.w	r2, #4294967295
    b5b8:	f04f 33ff 	mov.w	r3, #4294967295
    b5bc:	4620      	mov	r0, r4
    b5be:	f018 f9a8 	bl	23912 <k_sem_take.constprop.0.isra.0>
		    send_protobuf();
    b5c2:	f018 f9ae 	bl	23922 <send_protobuf>
   while(1){
    b5c6:	e7f5      	b.n	b5b4 <send_protobuf_thread+0x4>
    b5c8:	20008b64 	.word	0x20008b64

0000b5cc <configure_all_buttons>:
void configure_all_buttons(void){
    b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    b5ce:	4c30      	ldr	r4, [pc, #192]	; (b690 <configure_all_buttons+0xc4>)
    b5d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b5d4:	4620      	mov	r0, r4
    b5d6:	f7ff fcb1 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b5da:	4620      	mov	r0, r4
    b5dc:	f7ff fa68 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    b5e0:	492c      	ldr	r1, [pc, #176]	; (b694 <configure_all_buttons+0xc8>)
    b5e2:	4b2d      	ldr	r3, [pc, #180]	; (b698 <configure_all_buttons+0xcc>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b5e4:	4c2d      	ldr	r4, [pc, #180]	; (b69c <configure_all_buttons+0xd0>)
    b5e6:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b5e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b5ec:	4620      	mov	r0, r4
    b5ee:	608b      	str	r3, [r1, #8]
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b5f0:	4d2b      	ldr	r5, [pc, #172]	; (b6a0 <configure_all_buttons+0xd4>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b5f2:	f018 f990 	bl	23916 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b5f6:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b5f8:	4f2a      	ldr	r7, [pc, #168]	; (b6a4 <configure_all_buttons+0xd8>)
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b5fa:	2217      	movs	r2, #23
    b5fc:	4631      	mov	r1, r6
    b5fe:	4628      	mov	r0, r5
    b600:	f018 fb4d 	bl	23c9e <printk>
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b604:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b608:	4638      	mov	r0, r7
    b60a:	f7ff fc97 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b60e:	4638      	mov	r0, r7
    b610:	f7ff fa4e 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b614:	4924      	ldr	r1, [pc, #144]	; (b6a8 <configure_all_buttons+0xdc>)
    b616:	4b25      	ldr	r3, [pc, #148]	; (b6ac <configure_all_buttons+0xe0>)
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b618:	4620      	mov	r0, r4
    b61a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b61c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b620:	4f23      	ldr	r7, [pc, #140]	; (b6b0 <configure_all_buttons+0xe4>)
    b622:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b624:	f018 f977 	bl	23916 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    b628:	2218      	movs	r2, #24
    b62a:	4631      	mov	r1, r6
    b62c:	4628      	mov	r0, r5
    b62e:	f018 fb36 	bl	23c9e <printk>
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b632:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b636:	4638      	mov	r0, r7
    b638:	f7ff fc80 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON3_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b63c:	4638      	mov	r0, r7
    b63e:	f7ff fa37 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b642:	491c      	ldr	r1, [pc, #112]	; (b6b4 <configure_all_buttons+0xe8>)
    b644:	4b1c      	ldr	r3, [pc, #112]	; (b6b8 <configure_all_buttons+0xec>)
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b646:	4620      	mov	r0, r4
    b648:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b64a:	f44f 7380 	mov.w	r3, #256	; 0x100
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b64e:	4f1b      	ldr	r7, [pc, #108]	; (b6bc <configure_all_buttons+0xf0>)
    b650:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b652:	f018 f960 	bl	23916 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    b656:	2208      	movs	r2, #8
    b658:	4631      	mov	r1, r6
    b65a:	4628      	mov	r0, r5
    b65c:	f018 fb1f 	bl	23c9e <printk>
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b660:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b664:	4638      	mov	r0, r7
    b666:	f7ff fc69 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON4_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b66a:	4638      	mov	r0, r7
    b66c:	f7ff fa20 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b670:	4913      	ldr	r1, [pc, #76]	; (b6c0 <configure_all_buttons+0xf4>)
    b672:	4b14      	ldr	r3, [pc, #80]	; (b6c4 <configure_all_buttons+0xf8>)
 gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    b674:	4620      	mov	r0, r4
    b676:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b678:	f44f 7300 	mov.w	r3, #512	; 0x200
    b67c:	608b      	str	r3, [r1, #8]
    b67e:	f018 f94a 	bl	23916 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b682:	4631      	mov	r1, r6
    b684:	4628      	mov	r0, r5
}
    b686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b68a:	2209      	movs	r2, #9
    b68c:	f018 bb07 	b.w	23c9e <printk>
    b690:	00029a68 	.word	0x00029a68
    b694:	20009d9c 	.word	0x20009d9c
    b698:	0000ae3d 	.word	0x0000ae3d
    b69c:	00029134 	.word	0x00029134
    b6a0:	0002ab9f 	.word	0x0002ab9f
    b6a4:	00029a60 	.word	0x00029a60
    b6a8:	20009d90 	.word	0x20009d90
    b6ac:	0000b405 	.word	0x0000b405
    b6b0:	00029a58 	.word	0x00029a58
    b6b4:	20009d84 	.word	0x20009d84
    b6b8:	0000b3e5 	.word	0x0000b3e5
    b6bc:	00029a50 	.word	0x00029a50
    b6c0:	20009d78 	.word	0x20009d78
    b6c4:	0000b3c5 	.word	0x0000b3c5

0000b6c8 <configure_digital_inputs>:
void configure_digital_inputs(void){
    b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT );
    b6ca:	4c2e      	ldr	r4, [pc, #184]	; (b784 <configure_digital_inputs+0xbc>)
    b6cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b6d0:	4620      	mov	r0, r4
    b6d2:	f7ff fc33 	bl	af3c <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 4 Value:%d \n",gpio_pin_get_dt(DIG_0_ADR));
    b6d6:	4620      	mov	r0, r4
    b6d8:	f7ff f8fa 	bl	a8d0 <gpio_pin_get_dt>
    b6dc:	4601      	mov	r1, r0
    b6de:	482a      	ldr	r0, [pc, #168]	; (b788 <configure_digital_inputs+0xc0>)
    b6e0:	f018 fadd 	bl	23c9e <printk>
 gpio_pin_interrupt_configure_dt(DIG_0_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b6e4:	4620      	mov	r0, r4
    b6e6:	f7ff f9e3 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b6ea:	4928      	ldr	r1, [pc, #160]	; (b78c <configure_digital_inputs+0xc4>)
    b6ec:	4b28      	ldr	r3, [pc, #160]	; (b790 <configure_digital_inputs+0xc8>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b6ee:	4c29      	ldr	r4, [pc, #164]	; (b794 <configure_digital_inputs+0xcc>)
    b6f0:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b6f2:	2310      	movs	r3, #16
    b6f4:	4620      	mov	r0, r4
    b6f6:	608b      	str	r3, [r1, #8]
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b6f8:	4d27      	ldr	r5, [pc, #156]	; (b798 <configure_digital_inputs+0xd0>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b6fa:	f018 f90c 	bl	23916 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b6fe:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b700:	4f26      	ldr	r7, [pc, #152]	; (b79c <configure_digital_inputs+0xd4>)
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b702:	2204      	movs	r2, #4
    b704:	4631      	mov	r1, r6
    b706:	4628      	mov	r0, r5
    b708:	f018 fac9 	bl	23c9e <printk>
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b70c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b710:	4638      	mov	r0, r7
    b712:	f7ff fc13 	bl	af3c <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 5 Value:%d \n",gpio_pin_get_dt(DIG_1_ADR));
    b716:	4638      	mov	r0, r7
    b718:	f7ff f8da 	bl	a8d0 <gpio_pin_get_dt>
    b71c:	4601      	mov	r1, r0
    b71e:	4820      	ldr	r0, [pc, #128]	; (b7a0 <configure_digital_inputs+0xd8>)
    b720:	f018 fabd 	bl	23c9e <printk>
 gpio_pin_interrupt_configure_dt(DIG_1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b724:	4638      	mov	r0, r7
    b726:	f7ff f9c3 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b72a:	491e      	ldr	r1, [pc, #120]	; (b7a4 <configure_digital_inputs+0xdc>)
    b72c:	4b1e      	ldr	r3, [pc, #120]	; (b7a8 <configure_digital_inputs+0xe0>)
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b72e:	4f1f      	ldr	r7, [pc, #124]	; (b7ac <configure_digital_inputs+0xe4>)
    b730:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b732:	2320      	movs	r3, #32
 gpio_add_callback(DIG_1.port, DIG_1_CB);
    b734:	4620      	mov	r0, r4
    b736:	608b      	str	r3, [r1, #8]
    b738:	f018 f8ed 	bl	23916 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    b73c:	2205      	movs	r2, #5
    b73e:	4631      	mov	r1, r6
    b740:	4628      	mov	r0, r5
    b742:	f018 faac 	bl	23c9e <printk>
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b746:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b74a:	4638      	mov	r0, r7
    b74c:	f7ff fbf6 	bl	af3c <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 6 Value:%d \n",gpio_pin_get_dt(DIG_2_ADR));
    b750:	4638      	mov	r0, r7
    b752:	f7ff f8bd 	bl	a8d0 <gpio_pin_get_dt>
    b756:	4601      	mov	r1, r0
    b758:	4815      	ldr	r0, [pc, #84]	; (b7b0 <configure_digital_inputs+0xe8>)
    b75a:	f018 faa0 	bl	23c9e <printk>
 gpio_pin_interrupt_configure_dt(DIG_2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b75e:	4638      	mov	r0, r7
    b760:	f7ff f9a6 	bl	aab0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b764:	4913      	ldr	r1, [pc, #76]	; (b7b4 <configure_digital_inputs+0xec>)
    b766:	4b14      	ldr	r3, [pc, #80]	; (b7b8 <configure_digital_inputs+0xf0>)
 gpio_add_callback(DIG_2.port, DIG_2_CB);
    b768:	4620      	mov	r0, r4
    b76a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b76c:	2340      	movs	r3, #64	; 0x40
    b76e:	608b      	str	r3, [r1, #8]
    b770:	f018 f8d1 	bl	23916 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b774:	4631      	mov	r1, r6
    b776:	4628      	mov	r0, r5
}
    b778:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b77c:	2206      	movs	r2, #6
    b77e:	f018 ba8e 	b.w	23c9e <printk>
    b782:	bf00      	nop
    b784:	00029a48 	.word	0x00029a48
    b788:	0002abbb 	.word	0x0002abbb
    b78c:	20009d6c 	.word	0x20009d6c
    b790:	0000a931 	.word	0x0000a931
    b794:	0002911c 	.word	0x0002911c
    b798:	0002abd3 	.word	0x0002abd3
    b79c:	00029a40 	.word	0x00029a40
    b7a0:	0002abf6 	.word	0x0002abf6
    b7a4:	20009d60 	.word	0x20009d60
    b7a8:	0000a955 	.word	0x0000a955
    b7ac:	00029a38 	.word	0x00029a38
    b7b0:	0002ac0e 	.word	0x0002ac0e
    b7b4:	20009d54 	.word	0x20009d54
    b7b8:	0000a979 	.word	0x0000a979

0000b7bc <configure_led>:
void configure_led(void){
    b7bc:	b508      	push	{r3, lr}
 gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    b7be:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b7c2:	480a      	ldr	r0, [pc, #40]	; (b7ec <configure_led+0x30>)
    b7c4:	f7ff fbba 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    b7c8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b7cc:	4808      	ldr	r0, [pc, #32]	; (b7f0 <configure_led+0x34>)
    b7ce:	f7ff fbb5 	bl	af3c <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    b7d2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b7d6:	4807      	ldr	r0, [pc, #28]	; (b7f4 <configure_led+0x38>)
    b7d8:	f7ff fbb0 	bl	af3c <gpio_pin_configure_dt.isra.0>
}
    b7dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    b7e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b7e4:	4804      	ldr	r0, [pc, #16]	; (b7f8 <configure_led+0x3c>)
    b7e6:	f7ff bba9 	b.w	af3c <gpio_pin_configure_dt.isra.0>
    b7ea:	bf00      	nop
    b7ec:	00029a30 	.word	0x00029a30
    b7f0:	00029a28 	.word	0x00029a28
    b7f4:	00029a20 	.word	0x00029a20
    b7f8:	00029a18 	.word	0x00029a18

0000b7fc <turn_off_all_leds>:
void turn_off_all_leds(void){
    b7fc:	b508      	push	{r3, lr}
       gpio_pin_set_dt(LED1, OFF);
    b7fe:	2100      	movs	r1, #0
    b800:	4808      	ldr	r0, [pc, #32]	; (b824 <turn_off_all_leds+0x28>)
    b802:	f7ff fae9 	bl	add8 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED2, OFF);
    b806:	2100      	movs	r1, #0
    b808:	4807      	ldr	r0, [pc, #28]	; (b828 <turn_off_all_leds+0x2c>)
    b80a:	f7ff fae5 	bl	add8 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED3, OFF);
    b80e:	2100      	movs	r1, #0
    b810:	4806      	ldr	r0, [pc, #24]	; (b82c <turn_off_all_leds+0x30>)
    b812:	f7ff fae1 	bl	add8 <gpio_pin_set_dt.isra.0>
}
    b816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       gpio_pin_set_dt(LED4, OFF);
    b81a:	2100      	movs	r1, #0
    b81c:	4804      	ldr	r0, [pc, #16]	; (b830 <turn_off_all_leds+0x34>)
    b81e:	f7ff badb 	b.w	add8 <gpio_pin_set_dt.isra.0>
    b822:	bf00      	nop
    b824:	00029a30 	.word	0x00029a30
    b828:	00029a28 	.word	0x00029a28
    b82c:	00029a20 	.word	0x00029a20
    b830:	00029a18 	.word	0x00029a18

0000b834 <configure_adc>:
void configure_adc(void){
    b834:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b836:	2500      	movs	r5, #0
    b838:	4c12      	ldr	r4, [pc, #72]	; (b884 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev)) {
    b83a:	f854 0c06 	ldr.w	r0, [r4, #-6]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b83e:	f01c fd7e 	bl	2833e <z_device_is_ready>
    b842:	b920      	cbnz	r0, b84e <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    b844:	4810      	ldr	r0, [pc, #64]	; (b888 <configure_adc+0x54>)
}
    b846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    b84a:	f018 ba28 	b.w	23c9e <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b84e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    b852:	b16b      	cbz	r3, b870 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    b854:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    b858:	6883      	ldr	r3, [r0, #8]
    b85a:	4621      	mov	r1, r4
    b85c:	681b      	ldr	r3, [r3, #0]
    b85e:	4798      	blx	r3
		if (err < 0) {
    b860:	1e02      	subs	r2, r0, #0
    b862:	da08      	bge.n	b876 <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    b864:	4629      	mov	r1, r5
}
    b866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    b86a:	4808      	ldr	r0, [pc, #32]	; (b88c <configure_adc+0x58>)
    b86c:	f018 ba17 	b.w	23c9e <printk>
		return -ENOTSUP;
    b870:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b874:	e7f6      	b.n	b864 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b876:	3501      	adds	r5, #1
    b878:	2d06      	cmp	r5, #6
    b87a:	f104 0414 	add.w	r4, r4, #20
    b87e:	d1dc      	bne.n	b83a <configure_adc+0x6>
}
    b880:	bd38      	pop	{r3, r4, r5, pc}
    b882:	bf00      	nop
    b884:	000299a6 	.word	0x000299a6
    b888:	0002ac26 	.word	0x0002ac26
    b88c:	0002ac47 	.word	0x0002ac47

0000b890 <main>:
{
    b890:	b570      	push	{r4, r5, r6, lr}
    b892:	b08c      	sub	sp, #48	; 0x30
	return z_impl_k_mutex_init(mutex);
    b894:	4862      	ldr	r0, [pc, #392]	; (ba20 <main+0x190>)
    b896:	f01c fdab 	bl	283f0 <z_impl_k_mutex_init>
	configure_led();
    b89a:	f7ff ff8f 	bl	b7bc <configure_led>
	turn_off_all_leds();
    b89e:	f7ff ffad 	bl	b7fc <turn_off_all_leds>
 	configure_all_buttons();
    b8a2:	f7ff fe93 	bl	b5cc <configure_all_buttons>
	configure_digital_inputs();
    b8a6:	f7ff ff0f 	bl	b6c8 <configure_digital_inputs>
	configure_adc();
    b8aa:	f7ff ffc3 	bl	b834 <configure_adc>
    b8ae:	4d5d      	ldr	r5, [pc, #372]	; (ba24 <main+0x194>)
    b8b0:	4628      	mov	r0, r5
    b8b2:	f01c fd44 	bl	2833e <z_device_is_ready>
	if (!device_is_ready(uart)) {
    b8b6:	b1d0      	cbz	r0, b8ee <main+0x5e>
	rx = k_malloc(sizeof(*rx));
    b8b8:	2030      	movs	r0, #48	; 0x30
    b8ba:	f01c ff6d 	bl	28798 <k_malloc>
	if (rx) {
    b8be:	4604      	mov	r4, r0
    b8c0:	b1a8      	cbz	r0, b8ee <main+0x5e>
		rx->len = 0;
    b8c2:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    b8c4:	4958      	ldr	r1, [pc, #352]	; (ba28 <main+0x198>)
		rx->len = 0;
    b8c6:	8586      	strh	r6, [r0, #44]	; 0x2c
	k_work_init_delayable(&uart_work, uart_work_handler);
    b8c8:	4858      	ldr	r0, [pc, #352]	; (ba2c <main+0x19c>)
    b8ca:	f014 f8cb 	bl	1fa64 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b8ce:	68ab      	ldr	r3, [r5, #8]
    b8d0:	681b      	ldr	r3, [r3, #0]
    b8d2:	b973      	cbnz	r3, b8f2 <main+0x62>
		k_free(rx);
    b8d4:	4620      	mov	r0, r4
    b8d6:	f01c ff58 	bl	2878a <k_free>
		LOG_ERR("Cannot initialize UART callback");
    b8da:	4b55      	ldr	r3, [pc, #340]	; (ba30 <main+0x1a0>)
    b8dc:	2201      	movs	r2, #1
    b8de:	9302      	str	r3, [sp, #8]
    b8e0:	2300      	movs	r3, #0
    b8e2:	4954      	ldr	r1, [pc, #336]	; (ba34 <main+0x1a4>)
    b8e4:	4618      	mov	r0, r3
    b8e6:	e9cd 3300 	strd	r3, r3, [sp]
    b8ea:	f017 fff3 	bl	238d4 <z_log_msg_runtime_create.constprop.0>
		error();
    b8ee:	f018 f82e 	bl	2394e <error>
	return api->callback_set(dev, callback, user_data);
    b8f2:	4632      	mov	r2, r6
    b8f4:	4628      	mov	r0, r5
    b8f6:	4950      	ldr	r1, [pc, #320]	; (ba38 <main+0x1a8>)
    b8f8:	4798      	blx	r3
	if (err) {
    b8fa:	2800      	cmp	r0, #0
    b8fc:	d1ea      	bne.n	b8d4 <main+0x44>
	tx = k_malloc(sizeof(*tx));
    b8fe:	2030      	movs	r0, #48	; 0x30
    b900:	f01c ff4a 	bl	28798 <k_malloc>
	if (tx) {
    b904:	4606      	mov	r6, r0
    b906:	2800      	cmp	r0, #0
    b908:	d0f1      	beq.n	b8ee <main+0x5e>
		pos = snprintf(tx->data, sizeof(tx->data),
    b90a:	1d03      	adds	r3, r0, #4
    b90c:	4618      	mov	r0, r3
    b90e:	494b      	ldr	r1, [pc, #300]	; (ba3c <main+0x1ac>)
    b910:	f01d f8a6 	bl	28a60 <strcpy>
		tx->len = pos;
    b914:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b916:	4601      	mov	r1, r0
		tx->len = pos;
    b918:	85b2      	strh	r2, [r6, #44]	; 0x2c
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b91a:	4628      	mov	r0, r5
    b91c:	f017 fff1 	bl	23902 <uart_tx.constprop.0>
	if (err) {
    b920:	4601      	mov	r1, r0
    b922:	b118      	cbz	r0, b92c <main+0x9c>
		printf("Cannot display welcome message (err: %d)", err);
    b924:	4846      	ldr	r0, [pc, #280]	; (ba40 <main+0x1b0>)
    b926:	f017 f89f 	bl	22a68 <iprintf>
	if (err) {
    b92a:	e7e0      	b.n	b8ee <main+0x5e>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
    b92c:	1d21      	adds	r1, r4, #4
    b92e:	4628      	mov	r0, r5
    b930:	f017 ffdf 	bl	238f2 <uart_rx_enable.constprop.0>
	if (err) {
    b934:	4604      	mov	r4, r0
    b936:	2800      	cmp	r0, #0
    b938:	d1d9      	bne.n	b8ee <main+0x5e>
    b93a:	4e42      	ldr	r6, [pc, #264]	; (ba44 <main+0x1b4>)
    b93c:	4630      	mov	r0, r6
    b93e:	f01c fcfe 	bl	2833e <z_device_is_ready>
	if (!device_is_ready(uart_2)) {
    b942:	2800      	cmp	r0, #0
    b944:	d0d3      	beq.n	b8ee <main+0x5e>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    b946:	2030      	movs	r0, #48	; 0x30
    b948:	f01c ff26 	bl	28798 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    b94c:	493e      	ldr	r1, [pc, #248]	; (ba48 <main+0x1b8>)
	rx_uart2->len = 0;
    b94e:	8584      	strh	r4, [r0, #44]	; 0x2c
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    b950:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    b952:	483e      	ldr	r0, [pc, #248]	; (ba4c <main+0x1bc>)
    b954:	f014 f886 	bl	1fa64 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b958:	68b3      	ldr	r3, [r6, #8]
    b95a:	681b      	ldr	r3, [r3, #0]
    b95c:	b11b      	cbz	r3, b966 <main+0xd6>
	return api->callback_set(dev, callback, user_data);
    b95e:	4622      	mov	r2, r4
    b960:	4630      	mov	r0, r6
    b962:	493b      	ldr	r1, [pc, #236]	; (ba50 <main+0x1c0>)
    b964:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), 50);
    b966:	4837      	ldr	r0, [pc, #220]	; (ba44 <main+0x1b4>)
    b968:	1d29      	adds	r1, r5, #4
    b96a:	f017 ffc2 	bl	238f2 <uart_rx_enable.constprop.0>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    b96e:	4839      	ldr	r0, [pc, #228]	; (ba54 <main+0x1c4>)
    b970:	f008 f9f2 	bl	13d58 <bt_conn_auth_cb_register>
		if (err) {
    b974:	b128      	cbz	r0, b982 <main+0xf2>
			printk("Failed to register authorization callbacks.\n");
    b976:	4838      	ldr	r0, [pc, #224]	; (ba58 <main+0x1c8>)
}
    b978:	b00c      	add	sp, #48	; 0x30
    b97a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    b97e:	f018 b98e 	b.w	23c9e <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    b982:	4836      	ldr	r0, [pc, #216]	; (ba5c <main+0x1cc>)
    b984:	f008 fa02 	bl	13d8c <bt_conn_auth_info_cb_register>
		if (err) {
    b988:	b108      	cbz	r0, b98e <main+0xfe>
			printk("Failed to register authorization info callbacks.\n");
    b98a:	4835      	ldr	r0, [pc, #212]	; (ba60 <main+0x1d0>)
    b98c:	e7f4      	b.n	b978 <main+0xe8>
	err = bt_enable(NULL);
    b98e:	f006 f895 	bl	11abc <bt_enable>
	if (err) {
    b992:	2800      	cmp	r0, #0
    b994:	d1ab      	bne.n	b8ee <main+0x5e>
	printf("Bluetooth initialized \n\r");
    b996:	4833      	ldr	r0, [pc, #204]	; (ba64 <main+0x1d4>)
    b998:	f017 f866 	bl	22a68 <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    b99c:	4832      	ldr	r0, [pc, #200]	; (ba68 <main+0x1d8>)
    b99e:	f017 f863 	bl	22a68 <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    b9a2:	4832      	ldr	r0, [pc, #200]	; (ba6c <main+0x1dc>)
    b9a4:	f017 f860 	bl	22a68 <iprintf>
	z_impl_k_sem_give(sem);
    b9a8:	4831      	ldr	r0, [pc, #196]	; (ba70 <main+0x1e0>)
    b9aa:	f013 fbd7 	bl	1f15c <z_impl_k_sem_give>
	err = bt_nus_init(&nus_cb);
    b9ae:	4831      	ldr	r0, [pc, #196]	; (ba74 <main+0x1e4>)
    b9b0:	f003 fb1a 	bl	efe8 <bt_nus_init>
	if (err) {
    b9b4:	4601      	mov	r1, r0
    b9b6:	b128      	cbz	r0, b9c4 <main+0x134>
		printf("Failed to initialize UART service (err: %d)", err);
    b9b8:	482f      	ldr	r0, [pc, #188]	; (ba78 <main+0x1e8>)
}
    b9ba:	b00c      	add	sp, #48	; 0x30
    b9bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    b9c0:	f017 b852 	b.w	22a68 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    b9c4:	4d2d      	ldr	r5, [pc, #180]	; (ba7c <main+0x1ec>)
    b9c6:	ac07      	add	r4, sp, #28
    b9c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b9ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b9cc:	682b      	ldr	r3, [r5, #0]
    b9ce:	2501      	movs	r5, #1
    b9d0:	6023      	str	r3, [r4, #0]
    b9d2:	2202      	movs	r2, #2
    b9d4:	4b2a      	ldr	r3, [pc, #168]	; (ba80 <main+0x1f0>)
    b9d6:	492b      	ldr	r1, [pc, #172]	; (ba84 <main+0x1f4>)
    b9d8:	9500      	str	r5, [sp, #0]
    b9da:	a807      	add	r0, sp, #28
    b9dc:	f006 ff62 	bl	128a4 <bt_le_adv_start>
	if (err) {
    b9e0:	4604      	mov	r4, r0
    b9e2:	b128      	cbz	r0, b9f0 <main+0x160>
		printf("Advertising failed to start (err %d)", err);
    b9e4:	4601      	mov	r1, r0
    b9e6:	4828      	ldr	r0, [pc, #160]	; (ba88 <main+0x1f8>)
    b9e8:	f017 f83e 	bl	22a68 <iprintf>
}
    b9ec:	b00c      	add	sp, #48	; 0x30
    b9ee:	bd70      	pop	{r4, r5, r6, pc}
	flag=1;//print ad values once
    b9f0:	4b26      	ldr	r3, [pc, #152]	; (ba8c <main+0x1fc>)
    b9f2:	4e27      	ldr	r6, [pc, #156]	; (ba90 <main+0x200>)
    b9f4:	601d      	str	r5, [r3, #0]
    flash_test_();
    b9f6:	f7ff fd33 	bl	b460 <flash_test_>
    b9fa:	ad05      	add	r5, sp, #20
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    b9fc:	3401      	adds	r4, #1
		uart2_teste();
    b9fe:	f7ff fd17 	bl	b430 <uart2_teste>
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    ba02:	e896 0003 	ldmia.w	r6, {r0, r1}
    ba06:	e885 0003 	stmia.w	r5, {r0, r1}
        gpio_pin_set_dt(&led, value);
    ba0a:	4628      	mov	r0, r5
    ba0c:	f004 0101 	and.w	r1, r4, #1
    ba10:	f7ff f9e2 	bl	add8 <gpio_pin_set_dt.isra.0>
	return z_impl_k_sleep(timeout);
    ba14:	2100      	movs	r1, #0
    ba16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ba1a:	f015 fa93 	bl	20f44 <z_impl_k_sleep>
	for (;;) {
    ba1e:	e7ed      	b.n	b9fc <main+0x16c>
    ba20:	20009d40 	.word	0x20009d40
    ba24:	00029194 	.word	0x00029194
    ba28:	0000a9ed 	.word	0x0000a9ed
    ba2c:	20009140 	.word	0x20009140
    ba30:	0002ac69 	.word	0x0002ac69
    ba34:	00029784 	.word	0x00029784
    ba38:	0000b015 	.word	0x0000b015
    ba3c:	0002ac89 	.word	0x0002ac89
    ba40:	0002acb0 	.word	0x0002acb0
    ba44:	0002917c 	.word	0x0002917c
    ba48:	0000a99d 	.word	0x0000a99d
    ba4c:	20009110 	.word	0x20009110
    ba50:	000238d3 	.word	0x000238d3
    ba54:	200083cc 	.word	0x200083cc
    ba58:	0002acd9 	.word	0x0002acd9
    ba5c:	200083bc 	.word	0x200083bc
    ba60:	0002ad06 	.word	0x0002ad06
    ba64:	0002ad38 	.word	0x0002ad38
    ba68:	0002ad51 	.word	0x0002ad51
    ba6c:	0002ad72 	.word	0x0002ad72
    ba70:	20008ad4 	.word	0x20008ad4
    ba74:	200083b0 	.word	0x200083b0
    ba78:	0002ad9b 	.word	0x0002ad9b
    ba7c:	000297d0 	.word	0x000297d0
    ba80:	00029988 	.word	0x00029988
    ba84:	00029990 	.word	0x00029990
    ba88:	0002adc7 	.word	0x0002adc7
    ba8c:	20009d3c 	.word	0x20009d3c
    ba90:	00029a28 	.word	0x00029a28

0000ba94 <time_stamp_function>:
uint32_t time_stamp_function(void){
    ba94:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    ba96:	f01c fd89 	bl	285ac <z_impl_k_uptime_ticks>
    ba9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ba9e:	fba0 0302 	umull	r0, r3, r0, r2
    baa2:	fb02 3101 	mla	r1, r2, r1, r3
    baa6:	0bc0      	lsrs	r0, r0, #15
  uint64_t actual_time_seconds = k_uptime_get()/1000;
    baa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    baac:	2300      	movs	r3, #0
    baae:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    bab2:	0bc9      	lsrs	r1, r1, #15
    bab4:	f7fd f9cc 	bl	8e50 <__aeabi_ldivmod>
    bab8:	4603      	mov	r3, r0
}
    baba:	4801      	ldr	r0, [pc, #4]	; (bac0 <time_stamp_function+0x2c>)
    babc:	4418      	add	r0, r3
    babe:	bd08      	pop	{r3, pc}
    bac0:	61cf9980 	.word	0x61cf9980

0000bac4 <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    bac4:	b538      	push	{r3, r4, r5, lr}
    bac6:	460d      	mov	r5, r1
    bac8:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    baca:	f7ff ffe3 	bl	ba94 <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    bace:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    bad0:	4b04      	ldr	r3, [pc, #16]	; (bae4 <values_of_digital_sensor+0x20>)
    bad2:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    bad6:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    bada:	e9c4 0200 	strd	r0, r2, [r4]
}
    bade:	4620      	mov	r0, r4
    bae0:	bd38      	pop	{r3, r4, r5, pc}
    bae2:	bf00      	nop
    bae4:	2002148c 	.word	0x2002148c

0000bae8 <feed_circular_buffer>:
void feed_circular_buffer(void){
    bae8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    baec:	4d2f      	ldr	r5, [pc, #188]	; (bbac <feed_circular_buffer+0xc4>)
    baee:	4b30      	ldr	r3, [pc, #192]	; (bbb0 <feed_circular_buffer+0xc8>)
    baf0:	682e      	ldr	r6, [r5, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    baf2:	f5b6 6fb4 	cmp.w	r6, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    baf6:	601e      	str	r6, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    baf8:	d256      	bcs.n	bba8 <feed_circular_buffer+0xc0>
  gnss_return_value.timestamp=time_stamp_function();
    bafa:	f7ff ffcb 	bl	ba94 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bafe:	f04f 0800 	mov.w	r8, #0
    bb02:	4c2c      	ldr	r4, [pc, #176]	; (bbb4 <feed_circular_buffer+0xcc>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb04:	682f      	ldr	r7, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bb06:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bb0a:	e9c6 8802 	strd	r8, r8, [r6, #8]
    bb0e:	6070      	str	r0, [r6, #4]
  analog_return_value.timestamp=time_stamp_function();
    bb10:	f7ff ffc0 	bl	ba94 <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    bb14:	4e28      	ldr	r6, [pc, #160]	; (bbb8 <feed_circular_buffer+0xd0>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb16:	eb04 1387 	add.w	r3, r4, r7, lsl #6
  analog_return_value.value=adc_value[channel];
    bb1a:	f9b6 2000 	ldrsh.w	r2, [r6]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb1e:	466f      	mov	r7, sp
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb20:	e9c3 0204 	strd	r0, r2, [r3, #16]
  ntc_return.timestamp=time_stamp_function();
    bb24:	f7ff ffb6 	bl	ba94 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    bb28:	682b      	ldr	r3, [r5, #0]
    bb2a:	8872      	ldrh	r2, [r6, #2]
    bb2c:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb30:	839a      	strh	r2, [r3, #28]
  ntc_return.timestamp=time_stamp_function();
    bb32:	f7ff ffaf 	bl	ba94 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    bb36:	682b      	ldr	r3, [r5, #0]
    bb38:	88b2      	ldrh	r2, [r6, #4]
    bb3a:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb3e:	849a      	strh	r2, [r3, #36]	; 0x24
  ntc_return.timestamp=time_stamp_function();
    bb40:	f7ff ffa8 	bl	ba94 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    bb44:	682b      	ldr	r3, [r5, #0]
    bb46:	88f2      	ldrh	r2, [r6, #6]
    bb48:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  ntc_return.timestamp=time_stamp_function();
    bb4e:	f7ff ffa1 	bl	ba94 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    bb52:	682b      	ldr	r3, [r5, #0]
    bb54:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb58:	6198      	str	r0, [r3, #24]
  ntc_return.timestamp=time_stamp_function();
    bb5a:	f7ff ff9b 	bl	ba94 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    bb5e:	682b      	ldr	r3, [r5, #0]
    bb60:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bb64:	6218      	str	r0, [r3, #32]
  ntc_return.timestamp=time_stamp_function();
    bb66:	f7ff ff95 	bl	ba94 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bb6a:	682e      	ldr	r6, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb6c:	4641      	mov	r1, r8
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bb6e:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bb72:	62b0      	str	r0, [r6, #40]	; 0x28
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb74:	4638      	mov	r0, r7
    bb76:	f7ff ffa5 	bl	bac4 <values_of_digital_sensor>
    bb7a:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bb7e:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb80:	3630      	adds	r6, #48	; 0x30
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bb82:	eb04 1483 	add.w	r4, r4, r3, lsl #6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb86:	e886 0003 	stmia.w	r6, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bb8a:	3438      	adds	r4, #56	; 0x38
    bb8c:	2101      	movs	r1, #1
    bb8e:	4638      	mov	r0, r7
    bb90:	f7ff ff98 	bl	bac4 <values_of_digital_sensor>
    bb94:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer_Free_Position++;
    bb98:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bb9a:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer_Free_Position++;
    bb9e:	3301      	adds	r3, #1
    bba0:	602b      	str	r3, [r5, #0]
}
    bba2:	b002      	add	sp, #8
    bba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bba8:	2300      	movs	r3, #0
    bbaa:	e7f9      	b.n	bba0 <feed_circular_buffer+0xb8>
    bbac:	20020e78 	.word	0x20020e78
    bbb0:	20020e74 	.word	0x20020e74
    bbb4:	2000a674 	.word	0x2000a674
    bbb8:	2002149c 	.word	0x2002149c

0000bbbc <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    bbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    bbbe:	4b1c      	ldr	r3, [pc, #112]	; (bc30 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    bbc0:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    bbc2:	6818      	ldr	r0, [r3, #0]
    bbc4:	889b      	ldrh	r3, [r3, #4]
    bbc6:	9000      	str	r0, [sp, #0]
    bbc8:	2218      	movs	r2, #24
    bbca:	2100      	movs	r1, #0
    bbcc:	f10d 0006 	add.w	r0, sp, #6
    bbd0:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    bbd4:	2601      	movs	r6, #1
   char tag[30]="10203";
    bbd6:	f01c fe1b 	bl	28810 <memset>
     msg.positions.timestamp=1;
    bbda:	2300      	movs	r3, #0
    msg.timestamp=0;
    bbdc:	4c15      	ldr	r4, [pc, #84]	; (bc34 <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    bbde:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    bbe0:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    bbe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bbe8:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    bbea:	4b13      	ldr	r3, [pc, #76]	; (bc38 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bbec:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    bbee:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    bbf0:	230b      	movs	r3, #11
    bbf2:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    bbf4:	4b11      	ldr	r3, [pc, #68]	; (bc3c <fill_fields_to_test+0x80>)
    bbf6:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    bbf8:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    bbfa:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    bbfc:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    bbfe:	7766      	strb	r6, [r4, #29]
    bc00:	f104 001e 	add.w	r0, r4, #30
    bc04:	f01c ff2c 	bl	28a60 <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bc08:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    bc0c:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bc10:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bc14:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bc16:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    bc1a:	f7fc ff75 	bl	8b08 <__aeabi_i2f>
   while (sensor_id<6){
    bc1e:	3501      	adds	r5, #1
    bc20:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bc22:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    bc24:	f104 0424 	add.w	r4, r4, #36	; 0x24
    bc28:	d1e6      	bne.n	bbf8 <fill_fields_to_test+0x3c>
}
    bc2a:	4802      	ldr	r0, [pc, #8]	; (bc34 <fill_fields_to_test+0x78>)
    bc2c:	b009      	add	sp, #36	; 0x24
    bc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc30:	0002982c 	.word	0x0002982c
    bc34:	2000a584 	.word	0x2000a584
    bc38:	40400000 	.word	0x40400000
    bc3c:	41400000 	.word	0x41400000

0000bc40 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    bc40:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc42:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    bc46:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    bc48:	f7ff ffb8 	bl	bbbc <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    bc4c:	2202      	movs	r2, #2
    bc4e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    bc52:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    bc56:	4a3a      	ldr	r2, [pc, #232]	; (bd40 <send_array_dd_v0+0x100>)
    bc58:	ae0c      	add	r6, sp, #48	; 0x30
    bc5a:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bc5c:	4631      	mov	r1, r6
    bc5e:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    bc60:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bc62:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bc64:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bc66:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    bc68:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bc6a:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bc6c:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bc6e:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    bc70:	f101 010c 	add.w	r1, r1, #12
    bc74:	d1f8      	bne.n	bc68 <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bc76:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bc78:	6958      	ldr	r0, [r3, #20]
    bc7a:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    bc7c:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bc7e:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bc80:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bc84:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    bc88:	f101 0108 	add.w	r1, r1, #8
    bc8c:	d1f6      	bne.n	bc7c <send_array_dd_v0+0x3c>
    bc8e:	f103 051e 	add.w	r5, r3, #30
    bc92:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    bc96:	f855 3c06 	ldr.w	r3, [r5, #-6]
    bc9a:	4629      	mov	r1, r5
    bc9c:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    bca0:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    bca4:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    bca8:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    bcac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    bcb0:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    bcb4:	f01c fed4 	bl	28a60 <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bcb8:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    bcba:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bcbc:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bcc0:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bcc2:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bcc6:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bcca:	4633      	mov	r3, r6
    bccc:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    bcd0:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bcd2:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bcd4:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bcd8:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    bcdc:	f103 0308 	add.w	r3, r3, #8
    bce0:	d1f6      	bne.n	bcd0 <send_array_dd_v0+0x90>
   while (sensor_id<6){
    bce2:	3524      	adds	r5, #36	; 0x24
    bce4:	42a5      	cmp	r5, r4
    bce6:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    bcea:	d1d4      	bne.n	bc96 <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bcec:	466c      	mov	r4, sp
    bcee:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    bcf2:	4668      	mov	r0, sp
    bcf4:	4913      	ldr	r1, [pc, #76]	; (bd44 <send_array_dd_v0+0x104>)
    bcf6:	ad07      	add	r5, sp, #28
    bcf8:	f000 f906 	bl	bf08 <pb_ostream_from_buffer>
    bcfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bcfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd00:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bd02:	4911      	ldr	r1, [pc, #68]	; (bd48 <send_array_dd_v0+0x108>)
    bd04:	aa0c      	add	r2, sp, #48	; 0x30
    bd06:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bd08:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bd0a:	f000 fb7d 	bl	c408 <pb_encode>
   int j=0;
    bd0e:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    bd10:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    bd12:	490c      	ldr	r1, [pc, #48]	; (bd44 <send_array_dd_v0+0x104>)
    bd14:	4a0d      	ldr	r2, [pc, #52]	; (bd4c <send_array_dd_v0+0x10c>)
    bd16:	4283      	cmp	r3, r0
    bd18:	d10b      	bne.n	bd32 <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    bd1a:	490d      	ldr	r1, [pc, #52]	; (bd50 <send_array_dd_v0+0x110>)
    return function_return;
    bd1c:	f240 72dc 	movw	r2, #2012	; 0x7dc
    bd20:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    bd22:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    bd26:	f01c fd4c 	bl	287c2 <memcpy>
}
    bd2a:	4638      	mov	r0, r7
    bd2c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    bd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    bd32:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    bd36:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    bd38:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    bd3c:	e7eb      	b.n	bd16 <send_array_dd_v0+0xd6>
    bd3e:	bf00      	nop
    bd40:	0012d687 	.word	0x0012d687
    bd44:	200214cb 	.word	0x200214cb
    bd48:	00029a7c 	.word	0x00029a7c
    bd4c:	20009dab 	.word	0x20009dab
    bd50:	20009da8 	.word	0x20009da8

0000bd54 <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    bd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd58:	4604      	mov	r4, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bd5a:	4d30      	ldr	r5, [pc, #192]	; (be1c <print_current_position_cb+0xc8>)
    printf("\n\n####Position %d #####\n",pos);
    bd5c:	4601      	mov	r1, r0
void print_current_position_cb(uint32_t pos){
    bd5e:	b085      	sub	sp, #20
    printf("\n\n####Position %d #####\n",pos);
    bd60:	482f      	ldr	r0, [pc, #188]	; (be20 <print_current_position_cb+0xcc>)
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bd62:	01a6      	lsls	r6, r4, #6
    bd64:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    bd68:	f016 fe7e 	bl	22a68 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bd6c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    bd70:	6863      	ldr	r3, [r4, #4]
    bd72:	482c      	ldr	r0, [pc, #176]	; (be24 <print_current_position_cb+0xd0>)
    bd74:	f016 fe78 	bl	22a68 <iprintf>
	if (!spec->channel_cfg_dt_node_exists) {
    bd78:	4a2b      	ldr	r2, [pc, #172]	; (be28 <print_current_position_cb+0xd4>)
    val_mv = C_Buffer[pos].analog.value;
    bd7a:	6967      	ldr	r7, [r4, #20]
    bd7c:	7953      	ldrb	r3, [r2, #5]
    bd7e:	b1cb      	cbz	r3, bdb4 <print_current_position_cb+0x60>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bd80:	79d3      	ldrb	r3, [r2, #7]
	if (spec->channel_cfg.differential) {
    bd82:	7a91      	ldrb	r1, [r2, #10]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bd84:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    bd86:	bf0a      	itet	eq
    bd88:	6813      	ldreq	r3, [r2, #0]
		vref_mv = spec->vref_mv;
    bd8a:	89d3      	ldrhne	r3, [r2, #14]
	return api->ref_internal;
    bd8c:	689b      	ldreq	r3, [r3, #8]
	resolution = spec->resolution;
    bd8e:	7c14      	ldrb	r4, [r2, #16]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bd90:	bf08      	it	eq
    bd92:	891b      	ldrheq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    bd94:	0689      	lsls	r1, r1, #26
	int32_t adc_mv = *valp * ref_mv;
    bd96:	fb07 f303 	mul.w	r3, r7, r3
		resolution -= 1U;
    bd9a:	bf48      	it	mi
    bd9c:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int ret = adc_gain_invert(gain, &adc_mv);
    bda0:	7990      	ldrb	r0, [r2, #6]
    bda2:	a903      	add	r1, sp, #12
		resolution -= 1U;
    bda4:	bf48      	it	mi
    bda6:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    bda8:	9303      	str	r3, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    bdaa:	f00c fd9d 	bl	188e8 <adc_gain_invert>
	if (ret == 0) {
    bdae:	b908      	cbnz	r0, bdb4 <print_current_position_cb+0x60>
		*valp = (adc_mv >> resolution);
    bdb0:	9f03      	ldr	r7, [sp, #12]
    bdb2:	4127      	asrs	r7, r4
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    bdb4:	19ac      	adds	r4, r5, r6
    bdb6:	463b      	mov	r3, r7
    bdb8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    bdbc:	481b      	ldr	r0, [pc, #108]	; (be2c <print_current_position_cb+0xd8>)
    bdbe:	f016 fe53 	bl	22a68 <iprintf>
    int i=0;
    bdc2:	2700      	movs	r7, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    bdc4:	f8df 9068 	ldr.w	r9, [pc, #104]	; be30 <print_current_position_cb+0xdc>
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    bdc8:	f107 0801 	add.w	r8, r7, #1
    bdcc:	8ba0      	ldrh	r0, [r4, #28]
    bdce:	fa5f f188 	uxtb.w	r1, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    bdd2:	f8d4 a018 	ldr.w	sl, [r4, #24]
      C_Buffer[pos].ntc[i].value,
    bdd6:	f9b4 b01c 	ldrsh.w	fp, [r4, #28]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    bdda:	f7fd fac9 	bl	9370 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    bdde:	f7fc fb1f 	bl	8420 <__aeabi_f2d>
    bde2:	e9cd 0100 	strd	r0, r1, [sp]
    bde6:	4639      	mov	r1, r7
      i++;
    bde8:	4647      	mov	r7, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    bdea:	465b      	mov	r3, fp
    bdec:	4652      	mov	r2, sl
    bdee:	4648      	mov	r0, r9
    bdf0:	f016 fe3a 	bl	22a68 <iprintf>
    while (i<3){
    bdf4:	2f03      	cmp	r7, #3
    bdf6:	f104 0408 	add.w	r4, r4, #8
    bdfa:	d1e5      	bne.n	bdc8 <print_current_position_cb+0x74>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    bdfc:	4435      	add	r5, r6
    bdfe:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
    be02:	2100      	movs	r1, #0
    be04:	480b      	ldr	r0, [pc, #44]	; (be34 <print_current_position_cb+0xe0>)
    be06:	f016 fe2f 	bl	22a68 <iprintf>
    be0a:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    be0e:	2101      	movs	r1, #1
    be10:	4808      	ldr	r0, [pc, #32]	; (be34 <print_current_position_cb+0xe0>)
}
    be12:	b005      	add	sp, #20
    be14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    be18:	f016 be26 	b.w	22a68 <iprintf>
    be1c:	2000a674 	.word	0x2000a674
    be20:	0002ae7a 	.word	0x0002ae7a
    be24:	0002ae93 	.word	0x0002ae93
    be28:	000299a0 	.word	0x000299a0
    be2c:	0002aebf 	.word	0x0002aebf
    be30:	0002aee5 	.word	0x0002aee5
    be34:	0002af0b 	.word	0x0002af0b

0000be38 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    be38:	b500      	push	{lr}
    pb_type_t type = field->type;
    be3a:	7d83      	ldrb	r3, [r0, #22]
{
    be3c:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    be3e:	2b3f      	cmp	r3, #63	; 0x3f
{
    be40:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    be42:	d849      	bhi.n	bed8 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    be44:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    be48:	d01c      	beq.n	be84 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    be4a:	2820      	cmp	r0, #32
    be4c:	d102      	bne.n	be54 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    be4e:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    be50:	8818      	ldrh	r0, [r3, #0]
    be52:	e006      	b.n	be62 <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    be54:	2830      	cmp	r0, #48	; 0x30
    be56:	d0fa      	beq.n	be4e <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    be58:	2810      	cmp	r0, #16
    be5a:	d106      	bne.n	be6a <pb_check_proto3_default_value+0x32>
    be5c:	6a0a      	ldr	r2, [r1, #32]
    be5e:	b122      	cbz	r2, be6a <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    be60:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    be62:	fab0 f080 	clz	r0, r0
    be66:	0940      	lsrs	r0, r0, #5
    be68:	e00c      	b.n	be84 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    be6a:	680a      	ldr	r2, [r1, #0]
    be6c:	6890      	ldr	r0, [r2, #8]
    be6e:	b980      	cbnz	r0, be92 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    be70:	f003 020f 	and.w	r2, r3, #15
    be74:	2a05      	cmp	r2, #5
    be76:	d80e      	bhi.n	be96 <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    be78:	69cb      	ldr	r3, [r1, #28]
    be7a:	8a4a      	ldrh	r2, [r1, #18]
    be7c:	441a      	add	r2, r3
    be7e:	4293      	cmp	r3, r2
    be80:	d103      	bne.n	be8a <pb_check_proto3_default_value+0x52>
            return true;
    be82:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    be84:	b00b      	add	sp, #44	; 0x2c
    be86:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    be8a:	f813 1b01 	ldrb.w	r1, [r3], #1
    be8e:	2900      	cmp	r1, #0
    be90:	d0f5      	beq.n	be7e <pb_check_proto3_default_value+0x46>
            return false;
    be92:	2000      	movs	r0, #0
    be94:	e7f6      	b.n	be84 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    be96:	2a06      	cmp	r2, #6
    be98:	d101      	bne.n	be9e <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    be9a:	69cb      	ldr	r3, [r1, #28]
    be9c:	e7d8      	b.n	be50 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    be9e:	2a07      	cmp	r2, #7
    bea0:	d102      	bne.n	bea8 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    bea2:	69cb      	ldr	r3, [r1, #28]
    bea4:	7818      	ldrb	r0, [r3, #0]
    bea6:	e7dc      	b.n	be62 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    bea8:	2a0b      	cmp	r2, #11
    beaa:	d101      	bne.n	beb0 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    beac:	8a48      	ldrh	r0, [r1, #18]
    beae:	e7d8      	b.n	be62 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    beb0:	f003 030e 	and.w	r3, r3, #14
    beb4:	2b08      	cmp	r3, #8
    beb6:	d1e5      	bne.n	be84 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    beb8:	69ca      	ldr	r2, [r1, #28]
    beba:	4668      	mov	r0, sp
    bebc:	6a49      	ldr	r1, [r1, #36]	; 0x24
    bebe:	f017 fdf1 	bl	23aa4 <pb_field_iter_begin>
    bec2:	2800      	cmp	r0, #0
    bec4:	d0dd      	beq.n	be82 <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    bec6:	4668      	mov	r0, sp
    bec8:	f7ff ffb6 	bl	be38 <pb_check_proto3_default_value>
    becc:	2800      	cmp	r0, #0
    bece:	d0d9      	beq.n	be84 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    bed0:	4668      	mov	r0, sp
    bed2:	f017 fe0a 	bl	23aea <pb_field_iter_next>
    bed6:	e7f4      	b.n	bec2 <pb_check_proto3_default_value+0x8a>
    bed8:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    bedc:	2a80      	cmp	r2, #128	; 0x80
    bede:	d101      	bne.n	bee4 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    bee0:	69c0      	ldr	r0, [r0, #28]
    bee2:	e7be      	b.n	be62 <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    bee4:	2a40      	cmp	r2, #64	; 0x40
    bee6:	d1d4      	bne.n	be92 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    bee8:	f003 030f 	and.w	r3, r3, #15
    beec:	2b0a      	cmp	r3, #10
    beee:	d102      	bne.n	bef6 <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    bef0:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    bef2:	6818      	ldr	r0, [r3, #0]
    bef4:	e7b5      	b.n	be62 <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    bef6:	6803      	ldr	r3, [r0, #0]
    bef8:	4a02      	ldr	r2, [pc, #8]	; (bf04 <pb_check_proto3_default_value+0xcc>)
    befa:	68d8      	ldr	r0, [r3, #12]
    befc:	4290      	cmp	r0, r2
    befe:	d1b0      	bne.n	be62 <pb_check_proto3_default_value+0x2a>
    bf00:	e7f6      	b.n	bef0 <pb_check_proto3_default_value+0xb8>
    bf02:	bf00      	nop
    bf04:	00023b09 	.word	0x00023b09

0000bf08 <pb_ostream_from_buffer>:
    return stream;
    bf08:	6082      	str	r2, [r0, #8]
    bf0a:	2200      	movs	r2, #0
{
    bf0c:	b510      	push	{r4, lr}
    return stream;
    bf0e:	4c03      	ldr	r4, [pc, #12]	; (bf1c <pb_ostream_from_buffer+0x14>)
    bf10:	e9c0 2203 	strd	r2, r2, [r0, #12]
    bf14:	e9c0 4100 	strd	r4, r1, [r0]
}
    bf18:	bd10      	pop	{r4, pc}
    bf1a:	bf00      	nop
    bf1c:	00023b39 	.word	0x00023b39

0000bf20 <pb_write>:
{
    bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf22:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    bf24:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    bf26:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    bf28:	b19a      	cbz	r2, bf52 <pb_write+0x32>
    bf2a:	6806      	ldr	r6, [r0, #0]
    bf2c:	b18e      	cbz	r6, bf52 <pb_write+0x32>
    bf2e:	18d3      	adds	r3, r2, r3
    bf30:	d202      	bcs.n	bf38 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    bf32:	6887      	ldr	r7, [r0, #8]
    bf34:	429f      	cmp	r7, r3
    bf36:	d207      	bcs.n	bf48 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    bf38:	6923      	ldr	r3, [r4, #16]
    bf3a:	4a08      	ldr	r2, [pc, #32]	; (bf5c <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    bf3c:	2b00      	cmp	r3, #0
    bf3e:	bf08      	it	eq
    bf40:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    bf42:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    bf44:	6123      	str	r3, [r4, #16]
}
    bf46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    bf48:	47b0      	blx	r6
    bf4a:	b910      	cbnz	r0, bf52 <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    bf4c:	6923      	ldr	r3, [r4, #16]
    bf4e:	4a04      	ldr	r2, [pc, #16]	; (bf60 <pb_write+0x40>)
    bf50:	e7f4      	b.n	bf3c <pb_write+0x1c>
    stream->bytes_written += count;
    bf52:	68e3      	ldr	r3, [r4, #12]
    return true;
    bf54:	2001      	movs	r0, #1
    stream->bytes_written += count;
    bf56:	442b      	add	r3, r5
    bf58:	60e3      	str	r3, [r4, #12]
    return true;
    bf5a:	e7f4      	b.n	bf46 <pb_write+0x26>
    bf5c:	0002af2d 	.word	0x0002af2d
    bf60:	0002af39 	.word	0x0002af39

0000bf64 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    bf64:	b410      	push	{r4}
    bf66:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    bf68:	8a4b      	ldrh	r3, [r1, #18]
    bf6a:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    bf6e:	2c02      	cmp	r4, #2
    bf70:	d117      	bne.n	bfa2 <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    bf72:	2b01      	cmp	r3, #1
    bf74:	d105      	bne.n	bf82 <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    bf76:	69cb      	ldr	r3, [r1, #28]
    bf78:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    bf7a:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    bf7c:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    bf7e:	f017 bde4 	b.w	23b4a <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    bf82:	2b02      	cmp	r3, #2
    bf84:	d102      	bne.n	bf8c <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    bf86:	69cb      	ldr	r3, [r1, #28]
    bf88:	881a      	ldrh	r2, [r3, #0]
    bf8a:	e7f6      	b.n	bf7a <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    bf8c:	2b04      	cmp	r3, #4
    bf8e:	d102      	bne.n	bf96 <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    bf90:	69cb      	ldr	r3, [r1, #28]
    bf92:	681a      	ldr	r2, [r3, #0]
    bf94:	e7f1      	b.n	bf7a <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    bf96:	2b08      	cmp	r3, #8
    bf98:	d11f      	bne.n	bfda <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    bf9a:	69cb      	ldr	r3, [r1, #28]
    bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    bfa0:	e7ec      	b.n	bf7c <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    bfa2:	2b01      	cmp	r3, #1
    bfa4:	d108      	bne.n	bfb8 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    bfa6:	69cb      	ldr	r3, [r1, #28]
    bfa8:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    bfac:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    bfae:	2c03      	cmp	r4, #3
    bfb0:	d1e4      	bne.n	bf7c <pb_enc_varint+0x18>
}
    bfb2:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    bfb4:	f017 be08 	b.w	23bc8 <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    bfb8:	2b02      	cmp	r3, #2
    bfba:	d103      	bne.n	bfc4 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    bfbc:	69cb      	ldr	r3, [r1, #28]
    bfbe:	f9b3 2000 	ldrsh.w	r2, [r3]
    bfc2:	e7f3      	b.n	bfac <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    bfc4:	2b04      	cmp	r3, #4
    bfc6:	d102      	bne.n	bfce <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    bfc8:	69cb      	ldr	r3, [r1, #28]
    bfca:	681a      	ldr	r2, [r3, #0]
    bfcc:	e7ee      	b.n	bfac <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    bfce:	2b08      	cmp	r3, #8
    bfd0:	d103      	bne.n	bfda <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    bfd2:	69cb      	ldr	r3, [r1, #28]
    bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
    bfd8:	e7e9      	b.n	bfae <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    bfda:	6903      	ldr	r3, [r0, #16]
    bfdc:	4a03      	ldr	r2, [pc, #12]	; (bfec <pb_enc_varint+0x88>)
    bfde:	2b00      	cmp	r3, #0
    bfe0:	bf08      	it	eq
    bfe2:	4613      	moveq	r3, r2
    bfe4:	6103      	str	r3, [r0, #16]
}
    bfe6:	bc10      	pop	{r4}
    bfe8:	2000      	movs	r0, #0
    bfea:	4770      	bx	lr
    bfec:	0002af42 	.word	0x0002af42

0000bff0 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    bff0:	8a4a      	ldrh	r2, [r1, #18]
    bff2:	2a04      	cmp	r2, #4
    bff4:	d102      	bne.n	bffc <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    bff6:	69c9      	ldr	r1, [r1, #28]
    bff8:	f017 bdef 	b.w	23bda <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    bffc:	2a08      	cmp	r2, #8
    bffe:	d102      	bne.n	c006 <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    c000:	69c9      	ldr	r1, [r1, #28]
    c002:	f017 bded 	b.w	23be0 <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    c006:	6902      	ldr	r2, [r0, #16]
    c008:	4903      	ldr	r1, [pc, #12]	; (c018 <pb_enc_fixed+0x28>)
    c00a:	2a00      	cmp	r2, #0
    c00c:	bf08      	it	eq
    c00e:	460a      	moveq	r2, r1
    c010:	6102      	str	r2, [r0, #16]
    }
}
    c012:	2000      	movs	r0, #0
    c014:	4770      	bx	lr
    c016:	bf00      	nop
    c018:	0002af42 	.word	0x0002af42

0000c01c <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    c01c:	7d8a      	ldrb	r2, [r1, #22]
{
    c01e:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    c020:	f002 020f 	and.w	r2, r2, #15
    c024:	2a0b      	cmp	r2, #11
    c026:	d811      	bhi.n	c04c <pb_encode_tag_for_field+0x30>
    c028:	e8df f002 	tbb	[pc, r2]
    c02c:	0c0c0c0c 	.word	0x0c0c0c0c
    c030:	0a0a060e 	.word	0x0a0a060e
    c034:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    c038:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    c03a:	8a1a      	ldrh	r2, [r3, #16]
    c03c:	f017 bdd3 	b.w	23be6 <pb_encode_tag>
            wiretype = PB_WT_STRING;
    c040:	2102      	movs	r1, #2
            break;
    c042:	e7fa      	b.n	c03a <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    c044:	2100      	movs	r1, #0
    c046:	e7f8      	b.n	c03a <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    c048:	2105      	movs	r1, #5
    c04a:	e7f6      	b.n	c03a <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    c04c:	6903      	ldr	r3, [r0, #16]
    c04e:	4a03      	ldr	r2, [pc, #12]	; (c05c <pb_encode_tag_for_field+0x40>)
    c050:	2b00      	cmp	r3, #0
    c052:	bf08      	it	eq
    c054:	4613      	moveq	r3, r2
    c056:	6103      	str	r3, [r0, #16]
}
    c058:	2000      	movs	r0, #0
    c05a:	4770      	bx	lr
    c05c:	0002af54 	.word	0x0002af54

0000c060 <pb_encode_submessage>:
{
    c060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c064:	460e      	mov	r6, r1
    c066:	4617      	mov	r7, r2
    c068:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c06a:	2214      	movs	r2, #20
    c06c:	2100      	movs	r1, #0
{
    c06e:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c070:	a801      	add	r0, sp, #4
    c072:	f01c fbcd 	bl	28810 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    c076:	463a      	mov	r2, r7
    c078:	4631      	mov	r1, r6
    c07a:	a801      	add	r0, sp, #4
    c07c:	f000 f9c4 	bl	c408 <pb_encode>
    c080:	b910      	cbnz	r0, c088 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    c082:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    c084:	6123      	str	r3, [r4, #16]
    c086:	e008      	b.n	c09a <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c088:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    c08c:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c08e:	4643      	mov	r3, r8
    c090:	462a      	mov	r2, r5
    c092:	4620      	mov	r0, r4
    c094:	f017 fd59 	bl	23b4a <pb_encode_varint>
    c098:	b918      	cbnz	r0, c0a2 <pb_encode_submessage+0x42>
        return false;
    c09a:	2000      	movs	r0, #0
}
    c09c:	b006      	add	sp, #24
    c09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    c0a2:	6821      	ldr	r1, [r4, #0]
    c0a4:	b921      	cbnz	r1, c0b0 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    c0a6:	462a      	mov	r2, r5
    c0a8:	4620      	mov	r0, r4
    c0aa:	f7ff ff39 	bl	bf20 <pb_write>
    c0ae:	e7f5      	b.n	c09c <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    c0b0:	68e3      	ldr	r3, [r4, #12]
    c0b2:	68a2      	ldr	r2, [r4, #8]
    c0b4:	442b      	add	r3, r5
    c0b6:	4293      	cmp	r3, r2
    c0b8:	d905      	bls.n	c0c6 <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    c0ba:	6923      	ldr	r3, [r4, #16]
    c0bc:	4a0e      	ldr	r2, [pc, #56]	; (c0f8 <pb_encode_submessage+0x98>)
    c0be:	2b00      	cmp	r3, #0
    c0c0:	bf08      	it	eq
    c0c2:	4613      	moveq	r3, r2
    c0c4:	e7de      	b.n	c084 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    c0c6:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    c0c8:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    c0ca:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    c0cc:	a801      	add	r0, sp, #4
    c0ce:	4631      	mov	r1, r6
    substream.max_size = size;
    c0d0:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    c0d4:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    c0d8:	f000 f996 	bl	c408 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    c0dc:	9a04      	ldr	r2, [sp, #16]
    c0de:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    c0e0:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    c0e2:	4413      	add	r3, r2
    c0e4:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    c0e6:	9b02      	ldr	r3, [sp, #8]
    c0e8:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    c0ea:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    c0ec:	d101      	bne.n	c0f2 <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    c0ee:	6123      	str	r3, [r4, #16]
    c0f0:	e7d4      	b.n	c09c <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    c0f2:	4a02      	ldr	r2, [pc, #8]	; (c0fc <pb_encode_submessage+0x9c>)
    c0f4:	e7e3      	b.n	c0be <pb_encode_submessage+0x5e>
    c0f6:	bf00      	nop
    c0f8:	0002af2d 	.word	0x0002af2d
    c0fc:	0002af67 	.word	0x0002af67

0000c100 <encode_basic_field>:
{
    c100:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    c102:	69cb      	ldr	r3, [r1, #28]
{
    c104:	4604      	mov	r4, r0
    c106:	460d      	mov	r5, r1
    if (!field->pData)
    c108:	2b00      	cmp	r3, #0
    c10a:	d07f      	beq.n	c20c <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    c10c:	f7ff ff86 	bl	c01c <pb_encode_tag_for_field>
    c110:	2800      	cmp	r0, #0
    c112:	d073      	beq.n	c1fc <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    c114:	7da8      	ldrb	r0, [r5, #22]
    c116:	f000 030f 	and.w	r3, r0, #15
    c11a:	2b0b      	cmp	r3, #11
    c11c:	d873      	bhi.n	c206 <encode_basic_field+0x106>
    c11e:	e8df f003 	tbb	[pc, r3]
    c122:	1106      	.short	0x1106
    c124:	17171111 	.word	0x17171111
    c128:	5252351d 	.word	0x5252351d
    c12c:	6f72      	.short	0x6f72
        if (p[i] != 0)
    c12e:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    c130:	4620      	mov	r0, r4
}
    c132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    c136:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    c138:	2300      	movs	r3, #0
    c13a:	3a00      	subs	r2, #0
    c13c:	bf18      	it	ne
    c13e:	2201      	movne	r2, #1
    c140:	f017 bd03 	b.w	23b4a <pb_encode_varint>
            return pb_enc_varint(stream, field);
    c144:	4629      	mov	r1, r5
    c146:	4620      	mov	r0, r4
}
    c148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    c14c:	f7ff bf0a 	b.w	bf64 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    c150:	4629      	mov	r1, r5
    c152:	4620      	mov	r0, r4
}
    c154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    c158:	f7ff bf4a 	b.w	bff0 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    c15c:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    c15e:	b909      	cbnz	r1, c164 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    c160:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    c162:	e00e      	b.n	c182 <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c164:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c166:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c168:	d80a      	bhi.n	c180 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c16a:	8a6b      	ldrh	r3, [r5, #18]
    c16c:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c16e:	4293      	cmp	r3, r2
    c170:	d206      	bcs.n	c180 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    c172:	6923      	ldr	r3, [r4, #16]
    c174:	4a26      	ldr	r2, [pc, #152]	; (c210 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    c176:	2b00      	cmp	r3, #0
    c178:	bf08      	it	eq
    c17a:	4613      	moveq	r3, r2
    c17c:	6123      	str	r3, [r4, #16]
    c17e:	e03d      	b.n	c1fc <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    c180:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c182:	4620      	mov	r0, r4
}
    c184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c188:	f017 bd33 	b.w	23bf2 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c18c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    c190:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    c192:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    c194:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c196:	d00e      	beq.n	c1b6 <encode_basic_field+0xb6>
        if (max_size == 0)
    c198:	b913      	cbnz	r3, c1a0 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    c19a:	6923      	ldr	r3, [r4, #16]
    c19c:	4a1d      	ldr	r2, [pc, #116]	; (c214 <encode_basic_field+0x114>)
    c19e:	e7ea      	b.n	c176 <encode_basic_field+0x76>
        max_size -= 1;
    c1a0:	3b01      	subs	r3, #1
    if (str == NULL)
    c1a2:	2900      	cmp	r1, #0
    c1a4:	d0dc      	beq.n	c160 <encode_basic_field+0x60>
    size_t size = 0;
    c1a6:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    c1a8:	429a      	cmp	r2, r3
    c1aa:	5c88      	ldrb	r0, [r1, r2]
    c1ac:	d006      	beq.n	c1bc <encode_basic_field+0xbc>
    c1ae:	2800      	cmp	r0, #0
    c1b0:	d0e7      	beq.n	c182 <encode_basic_field+0x82>
            size++;
    c1b2:	3201      	adds	r2, #1
            p++;
    c1b4:	e7f8      	b.n	c1a8 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    c1b6:	f04f 33ff 	mov.w	r3, #4294967295
    c1ba:	e7f2      	b.n	c1a2 <encode_basic_field+0xa2>
        if (*p != '\0')
    c1bc:	2800      	cmp	r0, #0
    c1be:	d0e0      	beq.n	c182 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    c1c0:	6923      	ldr	r3, [r4, #16]
    c1c2:	4a15      	ldr	r2, [pc, #84]	; (c218 <encode_basic_field+0x118>)
    c1c4:	e7d7      	b.n	c176 <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    c1c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c1c8:	b912      	cbnz	r2, c1d0 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    c1ca:	6923      	ldr	r3, [r4, #16]
    c1cc:	4a13      	ldr	r2, [pc, #76]	; (c21c <encode_basic_field+0x11c>)
    c1ce:	e7d2      	b.n	c176 <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c1d0:	2b09      	cmp	r3, #9
    c1d2:	d006      	beq.n	c1e2 <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c1d4:	4620      	mov	r0, r4
    c1d6:	69ea      	ldr	r2, [r5, #28]
    c1d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    c1da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c1de:	f7ff bf3f 	b.w	c060 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c1e2:	6a2a      	ldr	r2, [r5, #32]
    c1e4:	2a00      	cmp	r2, #0
    c1e6:	d0f5      	beq.n	c1d4 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    c1e8:	f852 3c08 	ldr.w	r3, [r2, #-8]
    c1ec:	2b00      	cmp	r3, #0
    c1ee:	d0f1      	beq.n	c1d4 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    c1f0:	4629      	mov	r1, r5
    c1f2:	4620      	mov	r0, r4
    c1f4:	3a04      	subs	r2, #4
    c1f6:	4798      	blx	r3
    c1f8:	2800      	cmp	r0, #0
    c1fa:	d1eb      	bne.n	c1d4 <encode_basic_field+0xd4>
        return false;
    c1fc:	2000      	movs	r0, #0
}
    c1fe:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c200:	8a6a      	ldrh	r2, [r5, #18]
    c202:	69e9      	ldr	r1, [r5, #28]
    c204:	e7bd      	b.n	c182 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    c206:	6923      	ldr	r3, [r4, #16]
    c208:	4a05      	ldr	r2, [pc, #20]	; (c220 <encode_basic_field+0x120>)
    c20a:	e7b4      	b.n	c176 <encode_basic_field+0x76>
        return true;
    c20c:	2001      	movs	r0, #1
    c20e:	e7f6      	b.n	c1fe <encode_basic_field+0xfe>
    c210:	0002af7b 	.word	0x0002af7b
    c214:	0002af8f 	.word	0x0002af8f
    c218:	0002afa2 	.word	0x0002afa2
    c21c:	0002afb6 	.word	0x0002afb6
    c220:	0002af54 	.word	0x0002af54

0000c224 <encode_field>:
{
    c224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c228:	7d8b      	ldrb	r3, [r1, #22]
{
    c22a:	4605      	mov	r5, r0
    c22c:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c230:	2a30      	cmp	r2, #48	; 0x30
{
    c232:	460c      	mov	r4, r1
    c234:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c236:	d112      	bne.n	c25e <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    c238:	6a0b      	ldr	r3, [r1, #32]
    c23a:	881a      	ldrh	r2, [r3, #0]
    c23c:	8a0b      	ldrh	r3, [r1, #16]
    c23e:	429a      	cmp	r2, r3
    c240:	d114      	bne.n	c26c <encode_field+0x48>
    if (!field->pData)
    c242:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c244:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    c246:	b9ea      	cbnz	r2, c284 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c248:	f013 0f30 	tst.w	r3, #48	; 0x30
    c24c:	d10e      	bne.n	c26c <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    c24e:	692b      	ldr	r3, [r5, #16]
    c250:	4a69      	ldr	r2, [pc, #420]	; (c3f8 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c252:	2b00      	cmp	r3, #0
    c254:	bf08      	it	eq
    c256:	4613      	moveq	r3, r2
    c258:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c25a:	2000      	movs	r0, #0
    c25c:	e007      	b.n	c26e <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    c25e:	2a10      	cmp	r2, #16
    c260:	d1ef      	bne.n	c242 <encode_field+0x1e>
        if (field->pSize)
    c262:	6a0a      	ldr	r2, [r1, #32]
    c264:	b132      	cbz	r2, c274 <encode_field+0x50>
        if (p[i] != 0)
    c266:	7813      	ldrb	r3, [r2, #0]
    c268:	2b00      	cmp	r3, #0
    c26a:	d1ea      	bne.n	c242 <encode_field+0x1e>
            return true;
    c26c:	2001      	movs	r0, #1
}
    c26e:	b007      	add	sp, #28
    c270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    c274:	2b3f      	cmp	r3, #63	; 0x3f
    c276:	d8e4      	bhi.n	c242 <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    c278:	4608      	mov	r0, r1
    c27a:	f7ff fddd 	bl	be38 <pb_check_proto3_default_value>
    c27e:	2800      	cmp	r0, #0
    c280:	d0df      	beq.n	c242 <encode_field+0x1e>
    c282:	e7f3      	b.n	c26c <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    c284:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    c288:	2a40      	cmp	r2, #64	; 0x40
    c28a:	d10c      	bne.n	c2a6 <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    c28c:	6823      	ldr	r3, [r4, #0]
    c28e:	68db      	ldr	r3, [r3, #12]
    c290:	2b00      	cmp	r3, #0
    c292:	d0eb      	beq.n	c26c <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    c294:	4622      	mov	r2, r4
    c296:	4629      	mov	r1, r5
    c298:	2000      	movs	r0, #0
    c29a:	4798      	blx	r3
    c29c:	2800      	cmp	r0, #0
    c29e:	d1e5      	bne.n	c26c <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    c2a0:	692b      	ldr	r3, [r5, #16]
    c2a2:	4a56      	ldr	r2, [pc, #344]	; (c3fc <encode_field+0x1d8>)
    c2a4:	e7d5      	b.n	c252 <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    c2a6:	f003 0130 	and.w	r1, r3, #48	; 0x30
    c2aa:	2920      	cmp	r1, #32
    c2ac:	f040 809d 	bne.w	c3ea <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    c2b0:	6a21      	ldr	r1, [r4, #32]
    c2b2:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    c2b4:	2e00      	cmp	r6, #0
    c2b6:	d0d9      	beq.n	c26c <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c2b8:	2a80      	cmp	r2, #128	; 0x80
    c2ba:	d120      	bne.n	c2fe <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    c2bc:	f003 030f 	and.w	r3, r3, #15
    c2c0:	2b05      	cmp	r3, #5
    c2c2:	d85e      	bhi.n	c382 <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    c2c4:	2102      	movs	r1, #2
    c2c6:	4628      	mov	r0, r5
    c2c8:	8a22      	ldrh	r2, [r4, #16]
    c2ca:	f017 fc8c 	bl	23be6 <pb_encode_tag>
    c2ce:	2800      	cmp	r0, #0
    c2d0:	d0c3      	beq.n	c25a <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    c2d2:	7da3      	ldrb	r3, [r4, #22]
    c2d4:	f003 030f 	and.w	r3, r3, #15
    c2d8:	2b04      	cmp	r3, #4
    c2da:	d116      	bne.n	c30a <encode_field+0xe6>
            size = 4 * (size_t)count;
    c2dc:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c2de:	463a      	mov	r2, r7
    c2e0:	2300      	movs	r3, #0
    c2e2:	4628      	mov	r0, r5
    c2e4:	f017 fc31 	bl	23b4a <pb_encode_varint>
    c2e8:	2800      	cmp	r0, #0
    c2ea:	d0b6      	beq.n	c25a <encode_field+0x36>
        if (stream->callback == NULL)
    c2ec:	6829      	ldr	r1, [r5, #0]
    c2ee:	bb79      	cbnz	r1, c350 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c2f0:	463a      	mov	r2, r7
    c2f2:	4628      	mov	r0, r5
}
    c2f4:	b007      	add	sp, #28
    c2f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c2fa:	f7ff be11 	b.w	bf20 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c2fe:	8aa2      	ldrh	r2, [r4, #20]
    c300:	42b2      	cmp	r2, r6
    c302:	d2db      	bcs.n	c2bc <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c304:	692b      	ldr	r3, [r5, #16]
    c306:	4a3e      	ldr	r2, [pc, #248]	; (c400 <encode_field+0x1dc>)
    c308:	e7a3      	b.n	c252 <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c30a:	2b05      	cmp	r3, #5
    c30c:	d101      	bne.n	c312 <encode_field+0xee>
            size = 8 * (size_t)count;
    c30e:	00f7      	lsls	r7, r6, #3
    c310:	e7e5      	b.n	c2de <encode_field+0xba>
            void *pData_orig = field->pData;
    c312:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    c314:	2214      	movs	r2, #20
    c316:	2100      	movs	r1, #0
    c318:	a801      	add	r0, sp, #4
    c31a:	f01c fa79 	bl	28810 <memset>
            void *pData_orig = field->pData;
    c31e:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    c322:	4621      	mov	r1, r4
    c324:	a801      	add	r0, sp, #4
    c326:	f7ff fe1d 	bl	bf64 <pb_enc_varint>
    c32a:	b928      	cbnz	r0, c338 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c32c:	692b      	ldr	r3, [r5, #16]
    c32e:	2b00      	cmp	r3, #0
    c330:	d192      	bne.n	c258 <encode_field+0x34>
    c332:	9b05      	ldr	r3, [sp, #20]
    c334:	4a33      	ldr	r2, [pc, #204]	; (c404 <encode_field+0x1e0>)
    c336:	e78c      	b.n	c252 <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    c338:	69e3      	ldr	r3, [r4, #28]
    c33a:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    c33c:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    c33e:	4413      	add	r3, r2
    c340:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    c342:	b2bb      	uxth	r3, r7
    c344:	429e      	cmp	r6, r3
    c346:	d8ec      	bhi.n	c322 <encode_field+0xfe>
            size = sizestream.bytes_written;
    c348:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    c34a:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    c34e:	e7c6      	b.n	c2de <encode_field+0xba>
    c350:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c352:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    c354:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c356:	f003 030e 	and.w	r3, r3, #14
    c35a:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    c35c:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c35e:	d10d      	bne.n	c37c <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    c360:	f7ff fe46 	bl	bff0 <pb_enc_fixed>
    c364:	2800      	cmp	r0, #0
    c366:	f43f af78 	beq.w	c25a <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c36a:	69e3      	ldr	r3, [r4, #28]
    c36c:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c36e:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    c370:	4413      	add	r3, r2
    c372:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c374:	b2bb      	uxth	r3, r7
    c376:	429e      	cmp	r6, r3
    c378:	d8eb      	bhi.n	c352 <encode_field+0x12e>
    c37a:	e777      	b.n	c26c <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    c37c:	f7ff fdf2 	bl	bf64 <pb_enc_varint>
    c380:	e7f0      	b.n	c364 <encode_field+0x140>
    c382:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    c386:	7da3      	ldrb	r3, [r4, #22]
    c388:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    c38c:	2b86      	cmp	r3, #134	; 0x86
    c38e:	d127      	bne.n	c3e0 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    c390:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    c392:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    c394:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    c398:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    c39a:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    c39e:	f1b9 0f00 	cmp.w	r9, #0
    c3a2:	d11a      	bne.n	c3da <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    c3a4:	f7ff fe3a 	bl	c01c <pb_encode_tag_for_field>
    c3a8:	b908      	cbnz	r0, c3ae <encode_field+0x18a>
                field->pData = pData_orig;
    c3aa:	61e7      	str	r7, [r4, #28]
                if (!status)
    c3ac:	e755      	b.n	c25a <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    c3ae:	2201      	movs	r2, #1
    c3b0:	4628      	mov	r0, r5
    c3b2:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    c3b4:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    c3b8:	f7ff fdb2 	bl	bf20 <pb_write>
                field->pData = pData_orig;
    c3bc:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    c3be:	2800      	cmp	r0, #0
    c3c0:	f43f af4b 	beq.w	c25a <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c3c4:	69e3      	ldr	r3, [r4, #28]
    c3c6:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c3c8:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    c3cc:	4413      	add	r3, r2
    c3ce:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c3d0:	fa1f f388 	uxth.w	r3, r8
    c3d4:	429e      	cmp	r6, r3
    c3d6:	d8d6      	bhi.n	c386 <encode_field+0x162>
    c3d8:	e748      	b.n	c26c <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    c3da:	f7ff fe91 	bl	c100 <encode_basic_field>
    c3de:	e7ed      	b.n	c3bc <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    c3e0:	4621      	mov	r1, r4
    c3e2:	4628      	mov	r0, r5
    c3e4:	f7ff fe8c 	bl	c100 <encode_basic_field>
    c3e8:	e7e9      	b.n	c3be <encode_field+0x19a>
        return encode_basic_field(stream, field);
    c3ea:	4621      	mov	r1, r4
    c3ec:	4628      	mov	r0, r5
}
    c3ee:	b007      	add	sp, #28
    c3f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    c3f4:	f7ff be84 	b.w	c100 <encode_basic_field>
    c3f8:	0002afcf 	.word	0x0002afcf
    c3fc:	0002afe6 	.word	0x0002afe6
    c400:	0002aff5 	.word	0x0002aff5
    c404:	0002b00d 	.word	0x0002b00d

0000c408 <pb_encode>:
{
    c408:	b530      	push	{r4, r5, lr}
    c40a:	b095      	sub	sp, #84	; 0x54
    c40c:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    c40e:	4668      	mov	r0, sp
    c410:	f017 fb76 	bl	23b00 <pb_field_iter_begin_const>
    c414:	b370      	cbz	r0, c474 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    c416:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c41a:	f003 030f 	and.w	r3, r3, #15
    c41e:	2b0a      	cmp	r3, #10
    c420:	d121      	bne.n	c466 <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c422:	9b07      	ldr	r3, [sp, #28]
    c424:	681d      	ldr	r5, [r3, #0]
    while (extension)
    c426:	b91d      	cbnz	r5, c430 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    c428:	4668      	mov	r0, sp
    c42a:	f017 fb5e 	bl	23aea <pb_field_iter_next>
    c42e:	e7f1      	b.n	c414 <pb_encode+0xc>
        if (extension->type->encode)
    c430:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    c432:	4629      	mov	r1, r5
        if (extension->type->encode)
    c434:	685b      	ldr	r3, [r3, #4]
    c436:	b123      	cbz	r3, c442 <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    c438:	4620      	mov	r0, r4
    c43a:	4798      	blx	r3
        if (!status)
    c43c:	b158      	cbz	r0, c456 <pb_encode+0x4e>
        extension = extension->next;
    c43e:	68ad      	ldr	r5, [r5, #8]
    c440:	e7f1      	b.n	c426 <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    c442:	a80a      	add	r0, sp, #40	; 0x28
    c444:	f017 fb5e 	bl	23b04 <pb_field_iter_begin_extension_const>
    c448:	b940      	cbnz	r0, c45c <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    c44a:	6923      	ldr	r3, [r4, #16]
    c44c:	4a0a      	ldr	r2, [pc, #40]	; (c478 <pb_encode+0x70>)
    c44e:	2b00      	cmp	r3, #0
    c450:	bf08      	it	eq
    c452:	4613      	moveq	r3, r2
    c454:	6123      	str	r3, [r4, #16]
                return false;
    c456:	2000      	movs	r0, #0
}
    c458:	b015      	add	sp, #84	; 0x54
    c45a:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    c45c:	4620      	mov	r0, r4
    c45e:	a90a      	add	r1, sp, #40	; 0x28
    c460:	f7ff fee0 	bl	c224 <encode_field>
    c464:	e7ea      	b.n	c43c <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    c466:	4669      	mov	r1, sp
    c468:	4620      	mov	r0, r4
    c46a:	f7ff fedb 	bl	c224 <encode_field>
    c46e:	2800      	cmp	r0, #0
    c470:	d1da      	bne.n	c428 <pb_encode+0x20>
    c472:	e7f0      	b.n	c456 <pb_encode+0x4e>
        return true; /* Empty message type */
    c474:	2001      	movs	r0, #1
    c476:	e7ef      	b.n	c458 <pb_encode+0x50>
    c478:	0002b014 	.word	0x0002b014

0000c47c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    c47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c480:	b091      	sub	sp, #68	; 0x44
    c482:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    c484:	f002 0304 	and.w	r3, r2, #4
    c488:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    c48a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    c48e:	3301      	adds	r3, #1
    c490:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    c492:	0783      	lsls	r3, r0, #30
{
    c494:	4605      	mov	r5, r0
    c496:	460e      	mov	r6, r1
    c498:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    c49c:	9202      	str	r2, [sp, #8]
	if ((uintptr_t)packaged % sizeof(void *)) {
    c49e:	f040 81fe 	bne.w	c89e <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    c4a2:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    c4a4:	b130      	cbz	r0, c4b4 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    c4a6:	2907      	cmp	r1, #7
    c4a8:	d809      	bhi.n	c4be <cbvprintf_package+0x42>
		return -ENOSPC;
    c4aa:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    c4ae:	b011      	add	sp, #68	; 0x44
    c4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    c4b4:	f001 0607 	and.w	r6, r1, #7
    c4b8:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    c4ba:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    c4be:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
    c4c2:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
    c4c6:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    c4c8:	4647      	mov	r7, r8
	s = fmt--;
    c4ca:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    c4cc:	f04f 32ff 	mov.w	r2, #4294967295
	bool parsing = false;
    c4d0:	4643      	mov	r3, r8
	size = sizeof(char *);
    c4d2:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    c4d4:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
    c4d8:	b10d      	cbz	r5, c4de <cbvprintf_package+0x62>
				*(const char **)buf = s;
    c4da:	9800      	ldr	r0, [sp, #0]
    c4dc:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c4de:	9804      	ldr	r0, [sp, #16]
    c4e0:	2800      	cmp	r0, #0
    c4e2:	f300 80e1 	bgt.w	c6a8 <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c4e6:	489c      	ldr	r0, [pc, #624]	; (c758 <cbvprintf_package+0x2dc>)
    c4e8:	f8dd c000 	ldr.w	ip, [sp]
    c4ec:	4584      	cmp	ip, r0
    c4ee:	d303      	bcc.n	c4f8 <cbvprintf_package+0x7c>
    c4f0:	489a      	ldr	r0, [pc, #616]	; (c75c <cbvprintf_package+0x2e0>)
    c4f2:	4584      	cmp	ip, r0
    c4f4:	f0c0 80d8 	bcc.w	c6a8 <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c4f8:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c4fc:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c500:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c504:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c508:	f000 80e9 	beq.w	c6de <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c50c:	f04f 0c00 	mov.w	ip, #0
    c510:	e0d3      	b.n	c6ba <cbvprintf_package+0x23e>
			switch (*fmt) {
    c512:	287a      	cmp	r0, #122	; 0x7a
    c514:	d864      	bhi.n	c5e0 <cbvprintf_package+0x164>
    c516:	284b      	cmp	r0, #75	; 0x4b
    c518:	d80f      	bhi.n	c53a <cbvprintf_package+0xbe>
    c51a:	2847      	cmp	r0, #71	; 0x47
    c51c:	d860      	bhi.n	c5e0 <cbvprintf_package+0x164>
    c51e:	2829      	cmp	r0, #41	; 0x29
    c520:	d82f      	bhi.n	c582 <cbvprintf_package+0x106>
    c522:	2825      	cmp	r0, #37	; 0x25
    c524:	d05b      	beq.n	c5de <cbvprintf_package+0x162>
    c526:	d85b      	bhi.n	c5e0 <cbvprintf_package+0x164>
    c528:	2820      	cmp	r0, #32
    c52a:	d07f      	beq.n	c62c <cbvprintf_package+0x1b0>
    c52c:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
    c530:	f1d9 0300 	rsbs	r3, r9, #0
    c534:	eb43 0309 	adc.w	r3, r3, r9
    c538:	e078      	b.n	c62c <cbvprintf_package+0x1b0>
    c53a:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
    c53e:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
    c542:	d84d      	bhi.n	c5e0 <cbvprintf_package+0x164>
    c544:	e8df f00e 	tbb	[pc, lr]
    c548:	4c4c4c72 	.word	0x4c4c4c72
    c54c:	4c4c4c4c 	.word	0x4c4c4c4c
    c550:	4c4c4c4c 	.word	0x4c4c4c4c
    c554:	4c4c4c4e 	.word	0x4c4c4c4e
    c558:	4c4c4c4c 	.word	0x4c4c4c4c
    c55c:	4e4c5c4c 	.word	0x4e4c5c4c
    c560:	5c5c5c4e 	.word	0x5c5c5c4e
    c564:	4c6f4e72 	.word	0x4c6f4e72
    c568:	4e184c72 	.word	0x4e184c72
    c56c:	814c4c18 	.word	0x814c4c18
    c570:	4c4c4e7e 	.word	0x4c4c4e7e
    c574:	4c4e      	.short	0x4c4e
    c576:	7e          	.byte	0x7e
    c577:	00          	.byte	0x00
    c578:	2000      	movs	r0, #0
    c57a:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
    c57c:	f04f 0b04 	mov.w	fp, #4
    c580:	e03c      	b.n	c5fc <cbvprintf_package+0x180>
			switch (*fmt) {
    c582:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
    c586:	2001      	movs	r0, #1
    c588:	fa5f fe8e 	uxtb.w	lr, lr
    c58c:	fa00 fe0e 	lsl.w	lr, r0, lr
    c590:	f64f 70da 	movw	r0, #65498	; 0xffda
    c594:	ea1e 0f00 	tst.w	lr, r0
    c598:	d148      	bne.n	c62c <cbvprintf_package+0x1b0>
    c59a:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
    c59e:	d12f      	bne.n	c600 <cbvprintf_package+0x184>
    c5a0:	f01e 0301 	ands.w	r3, lr, #1
    c5a4:	d042      	beq.n	c62c <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
    c5a6:	3c01      	subs	r4, #1
    c5a8:	445c      	add	r4, fp
    c5aa:	f1cb 0e00 	rsb	lr, fp, #0
    c5ae:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    c5b2:	2d00      	cmp	r5, #0
    c5b4:	d05e      	beq.n	c674 <cbvprintf_package+0x1f8>
    c5b6:	ebaa 0e05 	sub.w	lr, sl, r5
    c5ba:	44a6      	add	lr, r4
    c5bc:	4576      	cmp	r6, lr
    c5be:	f4ff af74 	bcc.w	c4aa <cbvprintf_package+0x2e>
		if (is_str_arg) {
    c5c2:	2800      	cmp	r0, #0
    c5c4:	d168      	bne.n	c698 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    c5c6:	f1ba 0f04 	cmp.w	sl, #4
    c5ca:	d143      	bne.n	c654 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    c5cc:	46e1      	mov	r9, ip
    c5ce:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
    c5d2:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    c5d4:	46cc      	mov	ip, r9
    c5d6:	f04f 0a04 	mov.w	sl, #4
    c5da:	3404      	adds	r4, #4
    c5dc:	e026      	b.n	c62c <cbvprintf_package+0x1b0>
				arg_idx--;
    c5de:	3a01      	subs	r2, #1
				parsing = false;
    c5e0:	2300      	movs	r3, #0
				continue;
    c5e2:	e023      	b.n	c62c <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
    c5e4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    c5e8:	2b6c      	cmp	r3, #108	; 0x6c
    c5ea:	d130      	bne.n	c64e <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    c5ec:	2000      	movs	r0, #0
    c5ee:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    c5f2:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    c5f4:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
    c5f6:	d1c1      	bne.n	c57c <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
    c5f8:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
    c5fc:	46da      	mov	sl, fp
    c5fe:	e7d2      	b.n	c5a6 <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
    c600:	f10c 0907 	add.w	r9, ip, #7
    c604:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
    c608:	3407      	adds	r4, #7
    c60a:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    c60e:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
    c612:	b135      	cbz	r5, c622 <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
    c614:	9805      	ldr	r0, [sp, #20]
    c616:	4420      	add	r0, r4
    c618:	42b0      	cmp	r0, r6
    c61a:	f63f af46 	bhi.w	c4aa <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    c61e:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    c622:	2300      	movs	r3, #0
				buf += size;
    c624:	3408      	adds	r4, #8
			switch (*fmt) {
    c626:	f04f 0b08 	mov.w	fp, #8
    c62a:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
    c62c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    c630:	2800      	cmp	r0, #0
    c632:	f000 80bc 	beq.w	c7ae <cbvprintf_package+0x332>
			if (!parsing) {
    c636:	2b00      	cmp	r3, #0
    c638:	f47f af6b 	bne.w	c512 <cbvprintf_package+0x96>
				if (*fmt == '%') {
    c63c:	2825      	cmp	r0, #37	; 0x25
    c63e:	d1f5      	bne.n	c62c <cbvprintf_package+0x1b0>
					parsing = true;
    c640:	2301      	movs	r3, #1
					arg_idx++;
    c642:	3201      	adds	r2, #1
				align = VA_STACK_ALIGN(size_t);
    c644:	f04f 0b04 	mov.w	fp, #4
    c648:	e7ef      	b.n	c62a <cbvprintf_package+0x1ae>
			switch (*fmt) {
    c64a:	4618      	mov	r0, r3
    c64c:	e795      	b.n	c57a <cbvprintf_package+0xfe>
    c64e:	2000      	movs	r0, #0
				parsing = false;
    c650:	4603      	mov	r3, r0
    c652:	e7a8      	b.n	c5a6 <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
    c654:	f1ba 0f08 	cmp.w	sl, #8
    c658:	f040 809b 	bne.w	c792 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    c65c:	f10c 0907 	add.w	r9, ip, #7
    c660:	f029 0c07 	bic.w	ip, r9, #7
    c664:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
    c668:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
    c66c:	f04f 0a08 	mov.w	sl, #8
    c670:	3408      	adds	r4, #8
    c672:	e7db      	b.n	c62c <cbvprintf_package+0x1b0>
		if (is_str_arg) {
    c674:	b980      	cbnz	r0, c698 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    c676:	f1ba 0f04 	cmp.w	sl, #4
    c67a:	d102      	bne.n	c682 <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
    c67c:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
    c680:	e7a8      	b.n	c5d4 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
    c682:	f1ba 0f08 	cmp.w	sl, #8
    c686:	f040 8084 	bne.w	c792 <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    c68a:	f10c 0907 	add.w	r9, ip, #7
    c68e:	f029 0907 	bic.w	r9, r9, #7
    c692:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
    c696:	e7e9      	b.n	c66c <cbvprintf_package+0x1f0>
			s = va_arg(ap, char *);
    c698:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c69a:	9804      	ldr	r0, [sp, #16]
    c69c:	3801      	subs	r0, #1
    c69e:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    c6a0:	f859 0b04 	ldr.w	r0, [r9], #4
    c6a4:	9000      	str	r0, [sp, #0]
    c6a6:	e717      	b.n	c4d8 <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
    c6a8:	9802      	ldr	r0, [sp, #8]
    c6aa:	0780      	lsls	r0, r0, #30
    c6ac:	d548      	bpl.n	c740 <cbvprintf_package+0x2c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    c6ae:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    c6b2:	eba4 0e05 	sub.w	lr, r4, r5
    c6b6:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    c6ba:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    c6be:	d31d      	bcc.n	c6fc <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
    c6c0:	4927      	ldr	r1, [pc, #156]	; (c760 <cbvprintf_package+0x2e4>)
    c6c2:	f240 237b 	movw	r3, #635	; 0x27b
    c6c6:	4a27      	ldr	r2, [pc, #156]	; (c764 <cbvprintf_package+0x2e8>)
    c6c8:	4827      	ldr	r0, [pc, #156]	; (c768 <cbvprintf_package+0x2ec>)
    c6ca:	f017 fcaa 	bl	24022 <assert_print>
    c6ce:	4827      	ldr	r0, [pc, #156]	; (c76c <cbvprintf_package+0x2f0>)
    c6d0:	f017 fca7 	bl	24022 <assert_print>
    c6d4:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    c6d8:	4822      	ldr	r0, [pc, #136]	; (c764 <cbvprintf_package+0x2e8>)
    c6da:	f017 fc9b 	bl	24014 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    c6de:	2f0f      	cmp	r7, #15
    c6e0:	d80e      	bhi.n	c700 <cbvprintf_package+0x284>
				if (buf0 != NULL) {
    c6e2:	2d00      	cmp	r5, #0
    c6e4:	d046      	beq.n	c774 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    c6e6:	f107 0c40 	add.w	ip, r7, #64	; 0x40
    c6ea:	44ec      	add	ip, sp
    c6ec:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    c6f0:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    c6f4:	9803      	ldr	r0, [sp, #12]
    c6f6:	3001      	adds	r0, #1
    c6f8:	9003      	str	r0, [sp, #12]
    c6fa:	e020      	b.n	c73e <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    c6fc:	2f0f      	cmp	r7, #15
    c6fe:	d90c      	bls.n	c71a <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
    c700:	4917      	ldr	r1, [pc, #92]	; (c760 <cbvprintf_package+0x2e4>)
    c702:	f44f 7320 	mov.w	r3, #640	; 0x280
    c706:	4a17      	ldr	r2, [pc, #92]	; (c764 <cbvprintf_package+0x2e8>)
    c708:	4817      	ldr	r0, [pc, #92]	; (c768 <cbvprintf_package+0x2ec>)
    c70a:	f017 fc8a 	bl	24022 <assert_print>
    c70e:	4818      	ldr	r0, [pc, #96]	; (c770 <cbvprintf_package+0x2f4>)
    c710:	f017 fc87 	bl	24022 <assert_print>
    c714:	f44f 7120 	mov.w	r1, #640	; 0x280
    c718:	e7de      	b.n	c6d8 <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
    c71a:	b1bd      	cbz	r5, c74c <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    c71c:	f107 0e40 	add.w	lr, r7, #64	; 0x40
    c720:	44ee      	add	lr, sp
    c722:	b2c0      	uxtb	r0, r0
    c724:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    c728:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    c72c:	f1bc 0f00 	cmp.w	ip, #0
    c730:	d0e0      	beq.n	c6f4 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    c732:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c736:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    c73a:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
    c73e:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    c740:	f1c5 0008 	rsb	r0, r5, #8
    c744:	46cc      	mov	ip, r9
			buf += sizeof(char *);
    c746:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    c748:	9005      	str	r0, [sp, #20]
    c74a:	e76f      	b.n	c62c <cbvprintf_package+0x1b0>
				} else if (is_ro) {
    c74c:	f1bc 0f00 	cmp.w	ip, #0
    c750:	d010      	beq.n	c774 <cbvprintf_package+0x2f8>
					len += 1;
    c752:	3601      	adds	r6, #1
    c754:	e7f3      	b.n	c73e <cbvprintf_package+0x2c2>
    c756:	bf00      	nop
    c758:	0002900c 	.word	0x0002900c
    c75c:	0002fe80 	.word	0x0002fe80
    c760:	0002fb7c 	.word	0x0002fb7c
    c764:	0002b026 	.word	0x0002b026
    c768:	0002a669 	.word	0x0002a669
    c76c:	0002b054 	.word	0x0002b054
    c770:	0002b075 	.word	0x0002b075
				} else if (rws_pos_en) {
    c774:	9801      	ldr	r0, [sp, #4]
					len += 2;
    c776:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    c778:	2800      	cmp	r0, #0
    c77a:	d1e0      	bne.n	c73e <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
    c77c:	9800      	ldr	r0, [sp, #0]
    c77e:	e9cd 3106 	strd	r3, r1, [sp, #24]
    c782:	9205      	str	r2, [sp, #20]
    c784:	f7fc fdec 	bl	9360 <strlen>
    c788:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    c78c:	9a05      	ldr	r2, [sp, #20]
    c78e:	4406      	add	r6, r0
    c790:	e7d5      	b.n	c73e <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
    c792:	f240 23c5 	movw	r3, #709	; 0x2c5
    c796:	4a43      	ldr	r2, [pc, #268]	; (c8a4 <cbvprintf_package+0x428>)
    c798:	4943      	ldr	r1, [pc, #268]	; (c8a8 <cbvprintf_package+0x42c>)
    c79a:	4844      	ldr	r0, [pc, #272]	; (c8ac <cbvprintf_package+0x430>)
    c79c:	f017 fc41 	bl	24022 <assert_print>
    c7a0:	4651      	mov	r1, sl
    c7a2:	4843      	ldr	r0, [pc, #268]	; (c8b0 <cbvprintf_package+0x434>)
    c7a4:	f017 fc3d 	bl	24022 <assert_print>
    c7a8:	f240 21c5 	movw	r1, #709	; 0x2c5
    c7ac:	e794      	b.n	c6d8 <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
    c7ae:	1b63      	subs	r3, r4, r5
    c7b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c7b4:	d30c      	bcc.n	c7d0 <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
    c7b6:	493c      	ldr	r1, [pc, #240]	; (c8a8 <cbvprintf_package+0x42c>)
    c7b8:	f240 23d1 	movw	r3, #721	; 0x2d1
    c7bc:	4a39      	ldr	r2, [pc, #228]	; (c8a4 <cbvprintf_package+0x428>)
    c7be:	483b      	ldr	r0, [pc, #236]	; (c8ac <cbvprintf_package+0x430>)
    c7c0:	f017 fc2f 	bl	24022 <assert_print>
    c7c4:	483b      	ldr	r0, [pc, #236]	; (c8b4 <cbvprintf_package+0x438>)
    c7c6:	f017 fc2c 	bl	24022 <assert_print>
    c7ca:	f240 21d1 	movw	r1, #721	; 0x2d1
    c7ce:	e783      	b.n	c6d8 <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
    c7d0:	b91d      	cbnz	r5, c7da <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    c7d2:	f1a6 0408 	sub.w	r4, r6, #8
    c7d6:	18e0      	adds	r0, r4, r3
    c7d8:	e669      	b.n	c4ae <cbvprintf_package+0x32>
	if (rws_pos_en) {
    c7da:	9a01      	ldr	r2, [sp, #4]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    c7dc:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    c7de:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    c7e0:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    c7e2:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
    c7e6:	b1c2      	cbz	r2, c81a <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    c7e8:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    c7ea:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
    c7ee:	f1b8 0f00 	cmp.w	r8, #0
    c7f2:	d005      	beq.n	c800 <cbvprintf_package+0x384>
		for (i = 0; i < s_idx; i++) {
    c7f4:	2200      	movs	r2, #0
    c7f6:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    c7f8:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    c7fc:	4297      	cmp	r7, r2
    c7fe:	d10e      	bne.n	c81e <cbvprintf_package+0x3a2>
			*buf++ = str_ptr_arg[i];
    c800:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    c804:	f1c5 0301 	rsb	r3, r5, #1
    c808:	f10d 0920 	add.w	r9, sp, #32
    c80c:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
    c80e:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    c812:	4557      	cmp	r7, sl
    c814:	d112      	bne.n	c83c <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
    c816:	1b60      	subs	r0, r4, r5
    c818:	e649      	b.n	c4ae <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    c81a:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    c81c:	e7e5      	b.n	c7ea <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    c81e:	f810 3b01 	ldrb.w	r3, [r0], #1
    c822:	0619      	lsls	r1, r3, #24
    c824:	d508      	bpl.n	c838 <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
    c826:	eb04 0e0c 	add.w	lr, r4, ip
    c82a:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    c82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    c830:	f4ff ae3b 	bcc.w	c4aa <cbvprintf_package+0x2e>
			*buf++ = pos;
    c834:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    c838:	3201      	adds	r2, #1
    c83a:	e7df      	b.n	c7fc <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    c83c:	f1b8 0f00 	cmp.w	r8, #0
    c840:	d003      	beq.n	c84a <cbvprintf_package+0x3ce>
    c842:	f999 2000 	ldrsb.w	r2, [r9]
    c846:	2a00      	cmp	r2, #0
    c848:	db17      	blt.n	c87a <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
    c84a:	9b01      	ldr	r3, [sp, #4]
    c84c:	b1d3      	cbz	r3, c884 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
    c84e:	f81a 200b 	ldrb.w	r2, [sl, fp]
    c852:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    c856:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    c858:	9b02      	ldr	r3, [sp, #8]
    c85a:	1898      	adds	r0, r3, r2
    c85c:	4420      	add	r0, r4
    c85e:	4286      	cmp	r6, r0
    c860:	f4ff ae23 	bcc.w	c4aa <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    c864:	f899 0000 	ldrb.w	r0, [r9]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c868:	9900      	ldr	r1, [sp, #0]
    c86a:	f804 0b01 	strb.w	r0, [r4], #1
    c86e:	4620      	mov	r0, r4
    c870:	9203      	str	r2, [sp, #12]
    c872:	f01b ffa6 	bl	287c2 <memcpy>
		buf += size;
    c876:	9a03      	ldr	r2, [sp, #12]
    c878:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    c87a:	f10a 0a01 	add.w	sl, sl, #1
    c87e:	f109 0901 	add.w	r9, r9, #1
    c882:	e7c6      	b.n	c812 <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    c884:	f899 2000 	ldrb.w	r2, [r9]
    c888:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    c88c:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    c88e:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
    c890:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    c892:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    c896:	f7fc fd63 	bl	9360 <strlen>
    c89a:	1c42      	adds	r2, r0, #1
    c89c:	e7dc      	b.n	c858 <cbvprintf_package+0x3dc>
		return -EFAULT;
    c89e:	f06f 000d 	mvn.w	r0, #13
    c8a2:	e604      	b.n	c4ae <cbvprintf_package+0x32>
    c8a4:	0002b026 	.word	0x0002b026
    c8a8:	0002fb7c 	.word	0x0002fb7c
    c8ac:	0002a669 	.word	0x0002a669
    c8b0:	0002b08f 	.word	0x0002b08f
    c8b4:	0002b0a4 	.word	0x0002b0a4

0000c8b8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    c8b8:	4b01      	ldr	r3, [pc, #4]	; (c8c0 <char_out+0x8>)
    c8ba:	681b      	ldr	r3, [r3, #0]
    c8bc:	4718      	bx	r3
    c8be:	bf00      	nop
    c8c0:	200083fc 	.word	0x200083fc

0000c8c4 <__printk_hook_install>:
	_char_out = fn;
    c8c4:	4b01      	ldr	r3, [pc, #4]	; (c8cc <__printk_hook_install+0x8>)
    c8c6:	6018      	str	r0, [r3, #0]
}
    c8c8:	4770      	bx	lr
    c8ca:	bf00      	nop
    c8cc:	200083fc 	.word	0x200083fc

0000c8d0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    c8d0:	b507      	push	{r0, r1, r2, lr}
    c8d2:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    c8d4:	2100      	movs	r1, #0
    c8d6:	4602      	mov	r2, r0
    c8d8:	9100      	str	r1, [sp, #0]
    c8da:	4803      	ldr	r0, [pc, #12]	; (c8e8 <vprintk+0x18>)
    c8dc:	f000 fc9a 	bl	d214 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    c8e0:	b003      	add	sp, #12
    c8e2:	f85d fb04 	ldr.w	pc, [sp], #4
    c8e6:	bf00      	nop
    c8e8:	0000c8b9 	.word	0x0000c8b9

0000c8ec <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    c8ec:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    c8ee:	2500      	movs	r5, #0
{
    c8f0:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    c8f2:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    c8f6:	4604      	mov	r4, r0
    c8f8:	9500      	str	r5, [sp, #0]
    c8fa:	a903      	add	r1, sp, #12
    c8fc:	4805      	ldr	r0, [pc, #20]	; (c914 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    c8fe:	9505      	str	r5, [sp, #20]
    c900:	f000 fc88 	bl	d214 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    c904:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    c908:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    c90a:	bfb8      	it	lt
    c90c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    c90e:	b007      	add	sp, #28
    c910:	bd30      	pop	{r4, r5, pc}
    c912:	bf00      	nop
    c914:	00023c79 	.word	0x00023c79

0000c918 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    c918:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    c91a:	460c      	mov	r4, r1
    c91c:	2900      	cmp	r1, #0
    c91e:	d034      	beq.n	c98a <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    c920:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c922:	1f0b      	subs	r3, r1, #4
    c924:	1a9b      	subs	r3, r3, r2
    c926:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    c928:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    c92c:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c92e:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    c930:	07e8      	lsls	r0, r5, #31
    c932:	d40d      	bmi.n	c950 <sys_heap_free+0x38>
    c934:	23af      	movs	r3, #175	; 0xaf
    c936:	4a15      	ldr	r2, [pc, #84]	; (c98c <sys_heap_free+0x74>)
    c938:	4915      	ldr	r1, [pc, #84]	; (c990 <sys_heap_free+0x78>)
    c93a:	4816      	ldr	r0, [pc, #88]	; (c994 <sys_heap_free+0x7c>)
    c93c:	f017 fb71 	bl	24022 <assert_print>
    c940:	4621      	mov	r1, r4
    c942:	4815      	ldr	r0, [pc, #84]	; (c998 <sys_heap_free+0x80>)
    c944:	f017 fb6d 	bl	24022 <assert_print>
    c948:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    c94a:	4810      	ldr	r0, [pc, #64]	; (c98c <sys_heap_free+0x74>)
    c94c:	f017 fb62 	bl	24014 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    c950:	4610      	mov	r0, r2
    c952:	f017 f9c8 	bl	23ce6 <chunk_size>
    c956:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    c958:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    c95c:	1b80      	subs	r0, r0, r6
    c95e:	4281      	cmp	r1, r0
    c960:	d00b      	beq.n	c97a <sys_heap_free+0x62>
    c962:	23b7      	movs	r3, #183	; 0xb7
    c964:	4a09      	ldr	r2, [pc, #36]	; (c98c <sys_heap_free+0x74>)
    c966:	490d      	ldr	r1, [pc, #52]	; (c99c <sys_heap_free+0x84>)
    c968:	480a      	ldr	r0, [pc, #40]	; (c994 <sys_heap_free+0x7c>)
    c96a:	f017 fb5a 	bl	24022 <assert_print>
    c96e:	4621      	mov	r1, r4
    c970:	480b      	ldr	r0, [pc, #44]	; (c9a0 <sys_heap_free+0x88>)
    c972:	f017 fb56 	bl	24022 <assert_print>
    c976:	21b7      	movs	r1, #183	; 0xb7
    c978:	e7e7      	b.n	c94a <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c97a:	f025 0501 	bic.w	r5, r5, #1
    c97e:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    c980:	4610      	mov	r0, r2
}
    c982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    c986:	f017 ba6b 	b.w	23e60 <free_chunk>
}
    c98a:	bd70      	pop	{r4, r5, r6, pc}
    c98c:	0002b0cc 	.word	0x0002b0cc
    c990:	0002b0ed 	.word	0x0002b0ed
    c994:	0002a669 	.word	0x0002a669
    c998:	0002b0fe 	.word	0x0002b0fe
    c99c:	0002b136 	.word	0x0002b136
    c9a0:	0002b15c 	.word	0x0002b15c

0000c9a4 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    c9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c9a8:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    c9aa:	400b      	ands	r3, r1
{
    c9ac:	460f      	mov	r7, r1
    c9ae:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    c9b0:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    c9b2:	d010      	beq.n	c9d6 <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    c9b4:	f1c1 0900 	rsb	r9, r1, #0
    c9b8:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    c9bc:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    c9be:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    c9c0:	2a04      	cmp	r2, #4
    c9c2:	bf28      	it	cs
    c9c4:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    c9c6:	4219      	tst	r1, r3
    c9c8:	d10c      	bne.n	c9e4 <sys_heap_aligned_alloc+0x40>
    c9ca:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    c9cc:	b9e4      	cbnz	r4, ca08 <sys_heap_aligned_alloc+0x64>
		return NULL;
    c9ce:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    c9d0:	4628      	mov	r0, r5
    c9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    c9d6:	2904      	cmp	r1, #4
    c9d8:	d813      	bhi.n	ca02 <sys_heap_aligned_alloc+0x5e>
}
    c9da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    c9de:	4611      	mov	r1, r2
    c9e0:	f017 ba6f 	b.w	23ec2 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    c9e4:	492c      	ldr	r1, [pc, #176]	; (ca98 <sys_heap_aligned_alloc+0xf4>)
    c9e6:	f44f 73a2 	mov.w	r3, #324	; 0x144
    c9ea:	4a2c      	ldr	r2, [pc, #176]	; (ca9c <sys_heap_aligned_alloc+0xf8>)
    c9ec:	482c      	ldr	r0, [pc, #176]	; (caa0 <sys_heap_aligned_alloc+0xfc>)
    c9ee:	f017 fb18 	bl	24022 <assert_print>
    c9f2:	482c      	ldr	r0, [pc, #176]	; (caa4 <sys_heap_aligned_alloc+0x100>)
    c9f4:	f017 fb15 	bl	24022 <assert_print>
    c9f8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c9fc:	4827      	ldr	r0, [pc, #156]	; (ca9c <sys_heap_aligned_alloc+0xf8>)
    c9fe:	f017 fb09 	bl	24014 <assert_post_action>
		rew = 0;
    ca02:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    ca04:	2204      	movs	r2, #4
    ca06:	e7e1      	b.n	c9cc <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    ca08:	68b3      	ldr	r3, [r6, #8]
    ca0a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    ca0e:	d9de      	bls.n	c9ce <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ca10:	f104 010b 	add.w	r1, r4, #11
    ca14:	4439      	add	r1, r7
    ca16:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ca18:	4630      	mov	r0, r6
    ca1a:	08c9      	lsrs	r1, r1, #3
    ca1c:	f017 f9b9 	bl	23d92 <alloc_chunk>
	if (c0 == 0) {
    ca20:	4680      	mov	r8, r0
    ca22:	2800      	cmp	r0, #0
    ca24:	d0d3      	beq.n	c9ce <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    ca26:	f109 0504 	add.w	r5, r9, #4
    ca2a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    ca2e:	1e7b      	subs	r3, r7, #1
    ca30:	4435      	add	r5, r6
    ca32:	441d      	add	r5, r3
    ca34:	427f      	negs	r7, r7
    ca36:	403d      	ands	r5, r7
    ca38:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca3c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca3e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca40:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca42:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca44:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ca48:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ca4a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca4e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ca52:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ca56:	d208      	bcs.n	ca6a <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    ca58:	4601      	mov	r1, r0
    ca5a:	463a      	mov	r2, r7
    ca5c:	4630      	mov	r0, r6
    ca5e:	f017 f9e5 	bl	23e2c <split_chunks>
		free_list_add(h, c0);
    ca62:	4641      	mov	r1, r8
    ca64:	4630      	mov	r0, r6
    ca66:	f017 f943 	bl	23cf0 <free_list_add>
	return c + chunk_size(h, c);
    ca6a:	4639      	mov	r1, r7
    ca6c:	4630      	mov	r0, r6
    ca6e:	f017 f93a 	bl	23ce6 <chunk_size>
    ca72:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ca74:	4284      	cmp	r4, r0
    ca76:	d207      	bcs.n	ca88 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    ca78:	4630      	mov	r0, r6
    ca7a:	4622      	mov	r2, r4
    ca7c:	f017 f9d6 	bl	23e2c <split_chunks>
		free_list_add(h, c_end);
    ca80:	4621      	mov	r1, r4
    ca82:	4630      	mov	r0, r6
    ca84:	f017 f934 	bl	23cf0 <free_list_add>
	void *cmem = &buf[c];
    ca88:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ca8c:	8873      	ldrh	r3, [r6, #2]
    ca8e:	f043 0301 	orr.w	r3, r3, #1
    ca92:	8073      	strh	r3, [r6, #2]
    ca94:	e79c      	b.n	c9d0 <sys_heap_aligned_alloc+0x2c>
    ca96:	bf00      	nop
    ca98:	0002b198 	.word	0x0002b198
    ca9c:	0002b0cc 	.word	0x0002b0cc
    caa0:	0002a669 	.word	0x0002a669
    caa4:	0002b1b3 	.word	0x0002b1b3

0000caa8 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    caa8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    caac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    caae:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cab0:	d30e      	bcc.n	cad0 <sys_heap_init+0x28>
    cab2:	493a      	ldr	r1, [pc, #232]	; (cb9c <sys_heap_init+0xf4>)
    cab4:	f240 13eb 	movw	r3, #491	; 0x1eb
    cab8:	4a39      	ldr	r2, [pc, #228]	; (cba0 <sys_heap_init+0xf8>)
    caba:	483a      	ldr	r0, [pc, #232]	; (cba4 <sys_heap_init+0xfc>)
    cabc:	f017 fab1 	bl	24022 <assert_print>
    cac0:	4839      	ldr	r0, [pc, #228]	; (cba8 <sys_heap_init+0x100>)
    cac2:	f017 faae 	bl	24022 <assert_print>
    cac6:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    caca:	4835      	ldr	r0, [pc, #212]	; (cba0 <sys_heap_init+0xf8>)
    cacc:	f017 faa2 	bl	24014 <assert_post_action>
    cad0:	2a04      	cmp	r2, #4
    cad2:	d80c      	bhi.n	caee <sys_heap_init+0x46>
    cad4:	4935      	ldr	r1, [pc, #212]	; (cbac <sys_heap_init+0x104>)
    cad6:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    cada:	4a31      	ldr	r2, [pc, #196]	; (cba0 <sys_heap_init+0xf8>)
    cadc:	4831      	ldr	r0, [pc, #196]	; (cba4 <sys_heap_init+0xfc>)
    cade:	f017 faa0 	bl	24022 <assert_print>
    cae2:	4833      	ldr	r0, [pc, #204]	; (cbb0 <sys_heap_init+0x108>)
    cae4:	f017 fa9d 	bl	24022 <assert_print>
    cae8:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    caec:	e7ed      	b.n	caca <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    caee:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    caf0:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    caf2:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    caf4:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    caf8:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cafc:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cafe:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cb00:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cb04:	d80c      	bhi.n	cb20 <sys_heap_init+0x78>
    cb06:	492b      	ldr	r1, [pc, #172]	; (cbb4 <sys_heap_init+0x10c>)
    cb08:	f240 13fb 	movw	r3, #507	; 0x1fb
    cb0c:	4a24      	ldr	r2, [pc, #144]	; (cba0 <sys_heap_init+0xf8>)
    cb0e:	4825      	ldr	r0, [pc, #148]	; (cba4 <sys_heap_init+0xfc>)
    cb10:	f017 fa87 	bl	24022 <assert_print>
    cb14:	4826      	ldr	r0, [pc, #152]	; (cbb0 <sys_heap_init+0x108>)
    cb16:	f017 fa84 	bl	24022 <assert_print>
    cb1a:	f240 11fb 	movw	r1, #507	; 0x1fb
    cb1e:	e7d4      	b.n	caca <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    cb20:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    cb24:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    cb26:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cb28:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cb2c:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    cb30:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cb32:	3107      	adds	r1, #7
    cb34:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cb36:	1c4d      	adds	r5, r1, #1
    cb38:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    cb3a:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    cb3c:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cb3e:	d90c      	bls.n	cb5a <sys_heap_init+0xb2>
    cb40:	491d      	ldr	r1, [pc, #116]	; (cbb8 <sys_heap_init+0x110>)
    cb42:	f44f 7303 	mov.w	r3, #524	; 0x20c
    cb46:	4a16      	ldr	r2, [pc, #88]	; (cba0 <sys_heap_init+0xf8>)
    cb48:	4816      	ldr	r0, [pc, #88]	; (cba4 <sys_heap_init+0xfc>)
    cb4a:	f017 fa6a 	bl	24022 <assert_print>
    cb4e:	4818      	ldr	r0, [pc, #96]	; (cbb0 <sys_heap_init+0x108>)
    cb50:	f017 fa67 	bl	24022 <assert_print>
    cb54:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cb58:	e7b7      	b.n	caca <sys_heap_init+0x22>
    cb5a:	f100 050c 	add.w	r5, r0, #12
    cb5e:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    cb62:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    cb66:	42b5      	cmp	r5, r6
    cb68:	d1fb      	bne.n	cb62 <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cb6a:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cb6c:	f045 0501 	orr.w	r5, r5, #1
    cb70:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    cb72:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    cb74:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cb78:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    cb7a:	8004      	strh	r4, [r0, #0]
    cb7c:	8077      	strh	r7, [r6, #2]
    cb7e:	1886      	adds	r6, r0, r2
    cb80:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    cb84:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    cb88:	8074      	strh	r4, [r6, #2]
    cb8a:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cb8c:	885a      	ldrh	r2, [r3, #2]
    cb8e:	f042 0201 	orr.w	r2, r2, #1
    cb92:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    cb94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    cb98:	f017 b8aa 	b.w	23cf0 <free_list_add>
    cb9c:	0002b1d0 	.word	0x0002b1d0
    cba0:	0002b0cc 	.word	0x0002b0cc
    cba4:	0002a669 	.word	0x0002a669
    cba8:	0002b1e6 	.word	0x0002b1e6
    cbac:	0002b1fd 	.word	0x0002b1fd
    cbb0:	0002b21e 	.word	0x0002b21e
    cbb4:	0002b237 	.word	0x0002b237
    cbb8:	0002b260 	.word	0x0002b260

0000cbbc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    cbbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbc0:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cbc2:	8ba3      	ldrh	r3, [r4, #28]
{
    cbc4:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    cbc6:	0719      	lsls	r1, r3, #28
{
    cbc8:	4615      	mov	r5, r2
	if (processing) {
    cbca:	d412      	bmi.n	cbf2 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    cbcc:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cbce:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    cbd2:	d164      	bne.n	cc9e <process_event+0xe2>
			evt = process_recheck(mgr);
    cbd4:	4620      	mov	r0, r4
    cbd6:	f017 f99d 	bl	23f14 <process_recheck>
		}

		if (evt == EVT_NOP) {
    cbda:	b188      	cbz	r0, cc00 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    cbdc:	3801      	subs	r0, #1
    cbde:	2804      	cmp	r0, #4
    cbe0:	f200 8134 	bhi.w	ce4c <process_event+0x290>
    cbe4:	e8df f010 	tbh	[pc, r0, lsl #1]
    cbe8:	0132005b 	.word	0x0132005b
    cbec:	00d10081 	.word	0x00d10081
    cbf0:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    cbf2:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    cbf4:	bf0c      	ite	eq
    cbf6:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cbfa:	f043 0120 	orrne.w	r1, r3, #32
    cbfe:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    cc00:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc02:	4620      	mov	r0, r4
    cc04:	f012 f800 	bl	1ec08 <z_spin_unlock_valid>
    cc08:	2800      	cmp	r0, #0
    cc0a:	f040 819b 	bne.w	cf44 <process_event+0x388>
    cc0e:	4998      	ldr	r1, [pc, #608]	; (ce70 <process_event+0x2b4>)
    cc10:	23c2      	movs	r3, #194	; 0xc2
    cc12:	4a98      	ldr	r2, [pc, #608]	; (ce74 <process_event+0x2b8>)
    cc14:	4898      	ldr	r0, [pc, #608]	; (ce78 <process_event+0x2bc>)
    cc16:	f017 fa04 	bl	24022 <assert_print>
    cc1a:	4621      	mov	r1, r4
    cc1c:	e0b0      	b.n	cd80 <process_event+0x1c4>
    cc1e:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    cc22:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    cc24:	2801      	cmp	r0, #1
    cc26:	d81e      	bhi.n	cc66 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    cc28:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    cc2a:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    cc2c:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    cc2e:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    cc32:	d114      	bne.n	cc5e <process_event+0xa2>
		*clients = mgr->clients;
    cc34:	463a      	mov	r2, r7
    cc36:	e003      	b.n	cc40 <process_event+0x84>
				mgr->refs += 1U;
    cc38:	8be0      	ldrh	r0, [r4, #30]
    cc3a:	3001      	adds	r0, #1
    cc3c:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    cc3e:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    cc40:	2a00      	cmp	r2, #0
    cc42:	d1f9      	bne.n	cc38 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cc44:	f023 0307 	bic.w	r3, r3, #7
    cc48:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    cc4c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cc4e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cc50:	f017 f960 	bl	23f14 <process_recheck>
    cc54:	b390      	cbz	r0, ccbc <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cc56:	f042 0220 	orr.w	r2, r2, #32
    cc5a:	83a2      	strh	r2, [r4, #28]
    cc5c:	e02e      	b.n	ccbc <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cc5e:	f023 0307 	bic.w	r3, r3, #7
    cc62:	b29a      	uxth	r2, r3
}
    cc64:	e7f2      	b.n	cc4c <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    cc66:	2a04      	cmp	r2, #4
    cc68:	d133      	bne.n	ccd2 <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cc6a:	f023 0307 	bic.w	r3, r3, #7
    cc6e:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    cc70:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cc72:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cc74:	f017 f94e 	bl	23f14 <process_recheck>
    cc78:	b110      	cbz	r0, cc80 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cc7a:	f042 0220 	orr.w	r2, r2, #32
    cc7e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cc80:	8ba3      	ldrh	r3, [r4, #28]
    cc82:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cc86:	4589      	cmp	r9, r1
    cc88:	f040 80ea 	bne.w	ce60 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cc8c:	8ba1      	ldrh	r1, [r4, #28]
    cc8e:	06ca      	lsls	r2, r1, #27
    cc90:	f140 814f 	bpl.w	cf32 <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cc94:	f021 0310 	bic.w	r3, r1, #16
    cc98:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    cc9a:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    cc9e:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cca2:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    cca4:	f1b8 0f00 	cmp.w	r8, #0
    cca8:	dab9      	bge.n	cc1e <process_event+0x62>
	list->head = NULL;
    ccaa:	2200      	movs	r2, #0
		*clients = mgr->clients;
    ccac:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ccae:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    ccb2:	e9c4 2200 	strd	r2, r2, [r4]
    ccb6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ccba:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ccbc:	8ba3      	ldrh	r3, [r4, #28]
    ccbe:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ccc2:	4589      	cmp	r9, r1
    ccc4:	f040 80cd 	bne.w	ce62 <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    ccc8:	2f00      	cmp	r7, #0
    ccca:	d0df      	beq.n	cc8c <process_event+0xd0>
    cccc:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ccce:	46b2      	mov	sl, r6
    ccd0:	e044      	b.n	cd5c <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    ccd2:	496a      	ldr	r1, [pc, #424]	; (ce7c <process_event+0x2c0>)
    ccd4:	f240 131b 	movw	r3, #283	; 0x11b
    ccd8:	4a69      	ldr	r2, [pc, #420]	; (ce80 <process_event+0x2c4>)
    ccda:	4867      	ldr	r0, [pc, #412]	; (ce78 <process_event+0x2bc>)
    ccdc:	f017 f9a1 	bl	24022 <assert_print>
    cce0:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    cce4:	4866      	ldr	r0, [pc, #408]	; (ce80 <process_event+0x2c4>)
    cce6:	f017 f995 	bl	24014 <assert_post_action>
    ccea:	b149      	cbz	r1, cd00 <process_event+0x144>
    ccec:	4965      	ldr	r1, [pc, #404]	; (ce84 <process_event+0x2c8>)
    ccee:	f44f 73ab 	mov.w	r3, #342	; 0x156
    ccf2:	4a63      	ldr	r2, [pc, #396]	; (ce80 <process_event+0x2c4>)
    ccf4:	4860      	ldr	r0, [pc, #384]	; (ce78 <process_event+0x2bc>)
    ccf6:	f017 f994 	bl	24022 <assert_print>
    ccfa:	f44f 71ab 	mov.w	r1, #342	; 0x156
    ccfe:	e7f1      	b.n	cce4 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    cd00:	6823      	ldr	r3, [r4, #0]
    cd02:	b94b      	cbnz	r3, cd18 <process_event+0x15c>
    cd04:	4960      	ldr	r1, [pc, #384]	; (ce88 <process_event+0x2cc>)
    cd06:	f240 1357 	movw	r3, #343	; 0x157
    cd0a:	4a5d      	ldr	r2, [pc, #372]	; (ce80 <process_event+0x2c4>)
    cd0c:	485a      	ldr	r0, [pc, #360]	; (ce78 <process_event+0x2bc>)
    cd0e:	f017 f988 	bl	24022 <assert_print>
    cd12:	f240 1157 	movw	r1, #343	; 0x157
    cd16:	e7e5      	b.n	cce4 <process_event+0x128>
			transit = mgr->transitions->start;
    cd18:	6923      	ldr	r3, [r4, #16]
    cd1a:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    cd1c:	b94e      	cbnz	r6, cd32 <process_event+0x176>
    cd1e:	495b      	ldr	r1, [pc, #364]	; (ce8c <process_event+0x2d0>)
    cd20:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    cd24:	4a56      	ldr	r2, [pc, #344]	; (ce80 <process_event+0x2c4>)
    cd26:	4854      	ldr	r0, [pc, #336]	; (ce78 <process_event+0x2bc>)
    cd28:	f017 f97b 	bl	24022 <assert_print>
    cd2c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    cd30:	e7d8      	b.n	cce4 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd32:	460f      	mov	r7, r1
		res = 0;
    cd34:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd36:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd3a:	8ba3      	ldrh	r3, [r4, #28]
    cd3c:	f023 0307 	bic.w	r3, r3, #7
    cd40:	f043 0306 	orr.w	r3, r3, #6
    cd44:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd46:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    cd48:	68a2      	ldr	r2, [r4, #8]
    cd4a:	2a00      	cmp	r2, #0
    cd4c:	f040 808b 	bne.w	ce66 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    cd50:	2f00      	cmp	r7, #0
    cd52:	f040 808b 	bne.w	ce6c <process_event+0x2b0>
		    || (transit != NULL)) {
    cd56:	2e00      	cmp	r6, #0
    cd58:	d098      	beq.n	cc8c <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd5a:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cd5c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    cd60:	f104 0b14 	add.w	fp, r4, #20
    cd64:	4658      	mov	r0, fp
			mgr->flags = flags;
    cd66:	83a3      	strh	r3, [r4, #28]
    cd68:	f011 ff4e 	bl	1ec08 <z_spin_unlock_valid>
    cd6c:	2800      	cmp	r0, #0
    cd6e:	f040 8097 	bne.w	cea0 <process_event+0x2e4>
    cd72:	493f      	ldr	r1, [pc, #252]	; (ce70 <process_event+0x2b4>)
    cd74:	23c2      	movs	r3, #194	; 0xc2
    cd76:	4a3f      	ldr	r2, [pc, #252]	; (ce74 <process_event+0x2b8>)
    cd78:	483f      	ldr	r0, [pc, #252]	; (ce78 <process_event+0x2bc>)
    cd7a:	f017 f952 	bl	24022 <assert_print>
    cd7e:	4659      	mov	r1, fp
    cd80:	4843      	ldr	r0, [pc, #268]	; (ce90 <process_event+0x2d4>)
    cd82:	f017 f94e 	bl	24022 <assert_print>
    cd86:	21c2      	movs	r1, #194	; 0xc2
    cd88:	e0ae      	b.n	cee8 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    cd8a:	2902      	cmp	r1, #2
    cd8c:	d009      	beq.n	cda2 <process_event+0x1e6>
    cd8e:	4941      	ldr	r1, [pc, #260]	; (ce94 <process_event+0x2d8>)
    cd90:	f240 135d 	movw	r3, #349	; 0x15d
    cd94:	4a3a      	ldr	r2, [pc, #232]	; (ce80 <process_event+0x2c4>)
    cd96:	4838      	ldr	r0, [pc, #224]	; (ce78 <process_event+0x2bc>)
    cd98:	f017 f943 	bl	24022 <assert_print>
    cd9c:	f240 115d 	movw	r1, #349	; 0x15d
    cda0:	e7a0      	b.n	cce4 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    cda2:	8be7      	ldrh	r7, [r4, #30]
    cda4:	b14f      	cbz	r7, cdba <process_event+0x1fe>
    cda6:	493c      	ldr	r1, [pc, #240]	; (ce98 <process_event+0x2dc>)
    cda8:	f44f 73af 	mov.w	r3, #350	; 0x15e
    cdac:	4a34      	ldr	r2, [pc, #208]	; (ce80 <process_event+0x2c4>)
    cdae:	4832      	ldr	r0, [pc, #200]	; (ce78 <process_event+0x2bc>)
    cdb0:	f017 f937 	bl	24022 <assert_print>
    cdb4:	f44f 71af 	mov.w	r1, #350	; 0x15e
    cdb8:	e794      	b.n	cce4 <process_event+0x128>
			transit = mgr->transitions->stop;
    cdba:	6923      	ldr	r3, [r4, #16]
    cdbc:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    cdbe:	b94e      	cbnz	r6, cdd4 <process_event+0x218>
    cdc0:	4932      	ldr	r1, [pc, #200]	; (ce8c <process_event+0x2d0>)
    cdc2:	f240 1361 	movw	r3, #353	; 0x161
    cdc6:	4a2e      	ldr	r2, [pc, #184]	; (ce80 <process_event+0x2c4>)
    cdc8:	482b      	ldr	r0, [pc, #172]	; (ce78 <process_event+0x2bc>)
    cdca:	f017 f92a 	bl	24022 <assert_print>
    cdce:	f240 1161 	movw	r1, #353	; 0x161
    cdd2:	e787      	b.n	cce4 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cdd4:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    cdd6:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cdd8:	f023 0307 	bic.w	r3, r3, #7
    cddc:	f043 0304 	orr.w	r3, r3, #4
    cde0:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cde2:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cde6:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cde8:	e7ae      	b.n	cd48 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    cdea:	2901      	cmp	r1, #1
    cdec:	d009      	beq.n	ce02 <process_event+0x246>
    cdee:	492b      	ldr	r1, [pc, #172]	; (ce9c <process_event+0x2e0>)
    cdf0:	f44f 73b2 	mov.w	r3, #356	; 0x164
    cdf4:	4a22      	ldr	r2, [pc, #136]	; (ce80 <process_event+0x2c4>)
    cdf6:	4820      	ldr	r0, [pc, #128]	; (ce78 <process_event+0x2bc>)
    cdf8:	f017 f913 	bl	24022 <assert_print>
    cdfc:	f44f 71b2 	mov.w	r1, #356	; 0x164
    ce00:	e770      	b.n	cce4 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ce02:	6823      	ldr	r3, [r4, #0]
    ce04:	b94b      	cbnz	r3, ce1a <process_event+0x25e>
    ce06:	4920      	ldr	r1, [pc, #128]	; (ce88 <process_event+0x2cc>)
    ce08:	f240 1365 	movw	r3, #357	; 0x165
    ce0c:	4a1c      	ldr	r2, [pc, #112]	; (ce80 <process_event+0x2c4>)
    ce0e:	481a      	ldr	r0, [pc, #104]	; (ce78 <process_event+0x2bc>)
    ce10:	f017 f907 	bl	24022 <assert_print>
    ce14:	f240 1165 	movw	r1, #357	; 0x165
    ce18:	e764      	b.n	cce4 <process_event+0x128>
			transit = mgr->transitions->reset;
    ce1a:	6923      	ldr	r3, [r4, #16]
    ce1c:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    ce1e:	b94e      	cbnz	r6, ce34 <process_event+0x278>
    ce20:	491a      	ldr	r1, [pc, #104]	; (ce8c <process_event+0x2d0>)
    ce22:	f44f 73b4 	mov.w	r3, #360	; 0x168
    ce26:	4a16      	ldr	r2, [pc, #88]	; (ce80 <process_event+0x2c4>)
    ce28:	4813      	ldr	r0, [pc, #76]	; (ce78 <process_event+0x2bc>)
    ce2a:	f017 f8fa 	bl	24022 <assert_print>
    ce2e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    ce32:	e757      	b.n	cce4 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce34:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce36:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    ce38:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce3a:	f023 0307 	bic.w	r3, r3, #7
    ce3e:	f043 0305 	orr.w	r3, r3, #5
    ce42:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce44:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce48:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce4a:	e77d      	b.n	cd48 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    ce4c:	490b      	ldr	r1, [pc, #44]	; (ce7c <process_event+0x2c0>)
    ce4e:	f240 136b 	movw	r3, #363	; 0x16b
    ce52:	4a0b      	ldr	r2, [pc, #44]	; (ce80 <process_event+0x2c4>)
    ce54:	4808      	ldr	r0, [pc, #32]	; (ce78 <process_event+0x2bc>)
    ce56:	f017 f8e4 	bl	24022 <assert_print>
    ce5a:	f240 116b 	movw	r1, #363	; 0x16b
    ce5e:	e741      	b.n	cce4 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    ce60:	2700      	movs	r7, #0
    ce62:	2600      	movs	r6, #0
    ce64:	e770      	b.n	cd48 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce66:	f04f 0a01 	mov.w	sl, #1
    ce6a:	e777      	b.n	cd5c <process_event+0x1a0>
    ce6c:	4692      	mov	sl, r2
    ce6e:	e775      	b.n	cd5c <process_event+0x1a0>
    ce70:	0002b35b 	.word	0x0002b35b
    ce74:	0002b32e 	.word	0x0002b32e
    ce78:	0002a669 	.word	0x0002a669
    ce7c:	0002fb7c 	.word	0x0002fb7c
    ce80:	0002b28b 	.word	0x0002b28b
    ce84:	0002b2ad 	.word	0x0002b2ad
    ce88:	0002b2b9 	.word	0x0002b2b9
    ce8c:	0002b2dc 	.word	0x0002b2dc
    ce90:	0002b372 	.word	0x0002b372
    ce94:	0002b2f3 	.word	0x0002b2f3
    ce98:	0002b309 	.word	0x0002b309
    ce9c:	0002b318 	.word	0x0002b318
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cea0:	f385 8811 	msr	BASEPRI, r5
    cea4:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cea8:	f1ba 0f00 	cmp.w	sl, #0
    ceac:	d11e      	bne.n	ceec <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    ceae:	2f00      	cmp	r7, #0
    ceb0:	d12f      	bne.n	cf12 <process_event+0x356>
			if (transit != NULL) {
    ceb2:	b116      	cbz	r6, ceba <process_event+0x2fe>
				transit(mgr, transition_complete);
    ceb4:	4620      	mov	r0, r4
    ceb6:	4926      	ldr	r1, [pc, #152]	; (cf50 <process_event+0x394>)
    ceb8:	47b0      	blx	r6
	__asm__ volatile(
    ceba:	f04f 0320 	mov.w	r3, #32
    cebe:	f3ef 8511 	mrs	r5, BASEPRI
    cec2:	f383 8812 	msr	BASEPRI_MAX, r3
    cec6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ceca:	4658      	mov	r0, fp
    cecc:	f011 fe8e 	bl	1ebec <z_spin_lock_valid>
    ced0:	bb38      	cbnz	r0, cf22 <process_event+0x366>
    ced2:	2394      	movs	r3, #148	; 0x94
    ced4:	4a1f      	ldr	r2, [pc, #124]	; (cf54 <process_event+0x398>)
    ced6:	4920      	ldr	r1, [pc, #128]	; (cf58 <process_event+0x39c>)
    ced8:	4820      	ldr	r0, [pc, #128]	; (cf5c <process_event+0x3a0>)
    ceda:	f017 f8a2 	bl	24022 <assert_print>
    cede:	4659      	mov	r1, fp
    cee0:	481f      	ldr	r0, [pc, #124]	; (cf60 <process_event+0x3a4>)
    cee2:	f017 f89e 	bl	24022 <assert_print>
    cee6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cee8:	481a      	ldr	r0, [pc, #104]	; (cf54 <process_event+0x398>)
    ceea:	e6fc      	b.n	cce6 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    ceec:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ceee:	2900      	cmp	r1, #0
    cef0:	d0dd      	beq.n	ceae <process_event+0x2f2>
	return node->next;
    cef2:	680d      	ldr	r5, [r1, #0]
    cef4:	2900      	cmp	r1, #0
    cef6:	d0da      	beq.n	ceae <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    cef8:	4643      	mov	r3, r8
    cefa:	464a      	mov	r2, r9
    cefc:	4620      	mov	r0, r4
    cefe:	f8d1 a004 	ldr.w	sl, [r1, #4]
    cf02:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cf04:	b11d      	cbz	r5, cf0e <process_event+0x352>
    cf06:	682b      	ldr	r3, [r5, #0]
    cf08:	4629      	mov	r1, r5
    cf0a:	461d      	mov	r5, r3
    cf0c:	e7f2      	b.n	cef4 <process_event+0x338>
    cf0e:	462b      	mov	r3, r5
    cf10:	e7fa      	b.n	cf08 <process_event+0x34c>
    cf12:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    cf14:	4643      	mov	r3, r8
    cf16:	464a      	mov	r2, r9
    cf18:	4620      	mov	r0, r4
    cf1a:	683f      	ldr	r7, [r7, #0]
    cf1c:	f017 f826 	bl	23f6c <notify_one>
    cf20:	e7c5      	b.n	ceae <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    cf22:	4658      	mov	r0, fp
    cf24:	f011 fe7e 	bl	1ec24 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cf28:	8ba3      	ldrh	r3, [r4, #28]
    cf2a:	f023 0308 	bic.w	r3, r3, #8
    cf2e:	83a3      	strh	r3, [r4, #28]
    cf30:	e6ac      	b.n	cc8c <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    cf32:	068b      	lsls	r3, r1, #26
    cf34:	f57f ae64 	bpl.w	cc00 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    cf38:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cf3c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    cf3e:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    cf42:	e647      	b.n	cbd4 <process_event+0x18>
	__asm__ volatile(
    cf44:	f385 8811 	msr	BASEPRI, r5
    cf48:	f3bf 8f6f 	isb	sy
}
    cf4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf50:	0000cf65 	.word	0x0000cf65
    cf54:	0002b32e 	.word	0x0002b32e
    cf58:	0002b387 	.word	0x0002b387
    cf5c:	0002a669 	.word	0x0002a669
    cf60:	0002b39c 	.word	0x0002b39c

0000cf64 <transition_complete>:
{
    cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf66:	4604      	mov	r4, r0
    cf68:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    cf6a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    cf6e:	f04f 0320 	mov.w	r3, #32
    cf72:	f3ef 8711 	mrs	r7, BASEPRI
    cf76:	f383 8812 	msr	BASEPRI_MAX, r3
    cf7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf7e:	4630      	mov	r0, r6
    cf80:	f011 fe34 	bl	1ebec <z_spin_lock_valid>
    cf84:	b968      	cbnz	r0, cfa2 <transition_complete+0x3e>
    cf86:	2394      	movs	r3, #148	; 0x94
    cf88:	4a0b      	ldr	r2, [pc, #44]	; (cfb8 <transition_complete+0x54>)
    cf8a:	490c      	ldr	r1, [pc, #48]	; (cfbc <transition_complete+0x58>)
    cf8c:	480c      	ldr	r0, [pc, #48]	; (cfc0 <transition_complete+0x5c>)
    cf8e:	f017 f848 	bl	24022 <assert_print>
    cf92:	4631      	mov	r1, r6
    cf94:	480b      	ldr	r0, [pc, #44]	; (cfc4 <transition_complete+0x60>)
    cf96:	f017 f844 	bl	24022 <assert_print>
    cf9a:	2194      	movs	r1, #148	; 0x94
    cf9c:	4806      	ldr	r0, [pc, #24]	; (cfb8 <transition_complete+0x54>)
    cf9e:	f017 f839 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
    cfa2:	4630      	mov	r0, r6
    cfa4:	f011 fe3e 	bl	1ec24 <z_spin_lock_set_owner>
	mgr->last_res = res;
    cfa8:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    cfaa:	463a      	mov	r2, r7
    cfac:	4620      	mov	r0, r4
}
    cfae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    cfb2:	2101      	movs	r1, #1
    cfb4:	f7ff be02 	b.w	cbbc <process_event>
    cfb8:	0002b32e 	.word	0x0002b32e
    cfbc:	0002b387 	.word	0x0002b387
    cfc0:	0002a669 	.word	0x0002a669
    cfc4:	0002b39c 	.word	0x0002b39c

0000cfc8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    cfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cfcc:	4604      	mov	r4, r0
    cfce:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    cfd0:	f016 ffbc 	bl	23f4c <validate_args>

	if (rv < 0) {
    cfd4:	1e05      	subs	r5, r0, #0
    cfd6:	db67      	blt.n	d0a8 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    cfd8:	f104 0914 	add.w	r9, r4, #20
    cfdc:	f04f 0320 	mov.w	r3, #32
    cfe0:	f3ef 8a11 	mrs	sl, BASEPRI
    cfe4:	f383 8812 	msr	BASEPRI_MAX, r3
    cfe8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cfec:	4648      	mov	r0, r9
    cfee:	f011 fdfd 	bl	1ebec <z_spin_lock_valid>
    cff2:	4680      	mov	r8, r0
    cff4:	b960      	cbnz	r0, d010 <onoff_request+0x48>
    cff6:	2394      	movs	r3, #148	; 0x94
    cff8:	4a37      	ldr	r2, [pc, #220]	; (d0d8 <onoff_request+0x110>)
    cffa:	4938      	ldr	r1, [pc, #224]	; (d0dc <onoff_request+0x114>)
    cffc:	4838      	ldr	r0, [pc, #224]	; (d0e0 <onoff_request+0x118>)
    cffe:	f017 f810 	bl	24022 <assert_print>
    d002:	4649      	mov	r1, r9
    d004:	4837      	ldr	r0, [pc, #220]	; (d0e4 <onoff_request+0x11c>)
    d006:	f017 f80c 	bl	24022 <assert_print>
    d00a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d00c:	4832      	ldr	r0, [pc, #200]	; (d0d8 <onoff_request+0x110>)
    d00e:	e040      	b.n	d092 <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    d010:	4648      	mov	r0, r9
    d012:	f011 fe07 	bl	1ec24 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    d016:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d01a:	8be3      	ldrh	r3, [r4, #30]
    d01c:	8ba6      	ldrh	r6, [r4, #28]
    d01e:	4293      	cmp	r3, r2
    d020:	f006 0607 	and.w	r6, r6, #7
    d024:	d043      	beq.n	d0ae <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    d026:	2e02      	cmp	r6, #2
    d028:	d113      	bne.n	d052 <onoff_request+0x8a>
	rv = state;
    d02a:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    d02c:	3301      	adds	r3, #1
    d02e:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d030:	4648      	mov	r0, r9
    d032:	f011 fde9 	bl	1ec08 <z_spin_unlock_valid>
    d036:	2800      	cmp	r0, #0
    d038:	d13f      	bne.n	d0ba <onoff_request+0xf2>
    d03a:	23c2      	movs	r3, #194	; 0xc2
    d03c:	4a26      	ldr	r2, [pc, #152]	; (d0d8 <onoff_request+0x110>)
    d03e:	492a      	ldr	r1, [pc, #168]	; (d0e8 <onoff_request+0x120>)
    d040:	4827      	ldr	r0, [pc, #156]	; (d0e0 <onoff_request+0x118>)
    d042:	f016 ffee 	bl	24022 <assert_print>
    d046:	4649      	mov	r1, r9
    d048:	4828      	ldr	r0, [pc, #160]	; (d0ec <onoff_request+0x124>)
    d04a:	f016 ffea 	bl	24022 <assert_print>
    d04e:	21c2      	movs	r1, #194	; 0xc2
    d050:	e7dc      	b.n	d00c <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    d052:	2e06      	cmp	r6, #6
    d054:	d813      	bhi.n	d07e <onoff_request+0xb6>
    d056:	e8df f006 	tbb	[pc, r6]
    d05a:	2d09      	.short	0x2d09
    d05c:	04091212 	.word	0x04091212
    d060:	09          	.byte	0x09
    d061:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    d062:	f06f 0585 	mvn.w	r5, #133	; 0x85
    d066:	f04f 0800 	mov.w	r8, #0
    d06a:	e7e1      	b.n	d030 <onoff_request+0x68>
	parent->next = child;
    d06c:	2300      	movs	r3, #0
    d06e:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    d070:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d072:	b983      	cbnz	r3, d096 <onoff_request+0xce>
	list->head = node;
    d074:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    d078:	b186      	cbz	r6, d09c <onoff_request+0xd4>
	rv = state;
    d07a:	4635      	mov	r5, r6
    d07c:	e7f3      	b.n	d066 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d07e:	491c      	ldr	r1, [pc, #112]	; (d0f0 <onoff_request+0x128>)
    d080:	4817      	ldr	r0, [pc, #92]	; (d0e0 <onoff_request+0x118>)
    d082:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d086:	4a1b      	ldr	r2, [pc, #108]	; (d0f4 <onoff_request+0x12c>)
    d088:	f016 ffcb 	bl	24022 <assert_print>
    d08c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    d090:	4818      	ldr	r0, [pc, #96]	; (d0f4 <onoff_request+0x12c>)
    d092:	f016 ffbf 	bl	24014 <assert_post_action>
	parent->next = child;
    d096:	601f      	str	r7, [r3, #0]
	list->tail = node;
    d098:	6067      	str	r7, [r4, #4]
}
    d09a:	e7ed      	b.n	d078 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    d09c:	4652      	mov	r2, sl
    d09e:	2102      	movs	r1, #2
    d0a0:	4620      	mov	r0, r4
    d0a2:	f7ff fd8b 	bl	cbbc <process_event>
    d0a6:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    d0a8:	4628      	mov	r0, r5
    d0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    d0ae:	f06f 050a 	mvn.w	r5, #10
    d0b2:	e7d8      	b.n	d066 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    d0b4:	f06f 0504 	mvn.w	r5, #4
    d0b8:	e7d5      	b.n	d066 <onoff_request+0x9e>
	__asm__ volatile(
    d0ba:	f38a 8811 	msr	BASEPRI, sl
    d0be:	f3bf 8f6f 	isb	sy
		if (notify) {
    d0c2:	f1b8 0f00 	cmp.w	r8, #0
    d0c6:	d0ef      	beq.n	d0a8 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    d0c8:	2300      	movs	r3, #0
    d0ca:	4632      	mov	r2, r6
    d0cc:	4639      	mov	r1, r7
    d0ce:	4620      	mov	r0, r4
    d0d0:	f016 ff4c 	bl	23f6c <notify_one>
    d0d4:	e7e8      	b.n	d0a8 <onoff_request+0xe0>
    d0d6:	bf00      	nop
    d0d8:	0002b32e 	.word	0x0002b32e
    d0dc:	0002b387 	.word	0x0002b387
    d0e0:	0002a669 	.word	0x0002a669
    d0e4:	0002b39c 	.word	0x0002b39c
    d0e8:	0002b35b 	.word	0x0002b35b
    d0ec:	0002b372 	.word	0x0002b372
    d0f0:	0002b318 	.word	0x0002b318
    d0f4:	0002b28b 	.word	0x0002b28b

0000d0f8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    d0f8:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    d0fa:	6842      	ldr	r2, [r0, #4]
    d0fc:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    d0fe:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    d102:	2a02      	cmp	r2, #2
	notify->result = res;
    d104:	6081      	str	r1, [r0, #8]
	switch (method) {
    d106:	d00a      	beq.n	d11e <sys_notify_finalize+0x26>
    d108:	2a03      	cmp	r2, #3
    d10a:	f04f 0100 	mov.w	r1, #0
    d10e:	d003      	beq.n	d118 <sys_notify_finalize+0x20>
    d110:	2a01      	cmp	r2, #1
    d112:	d10a      	bne.n	d12a <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d114:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d116:	e006      	b.n	d126 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    d118:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d11a:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    d11c:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    d11e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d120:	2200      	movs	r2, #0
    d122:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d124:	b958      	cbnz	r0, d13e <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    d126:	2000      	movs	r0, #0
    d128:	e7f8      	b.n	d11c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    d12a:	4906      	ldr	r1, [pc, #24]	; (d144 <sys_notify_finalize+0x4c>)
    d12c:	4806      	ldr	r0, [pc, #24]	; (d148 <sys_notify_finalize+0x50>)
    d12e:	2345      	movs	r3, #69	; 0x45
    d130:	4a06      	ldr	r2, [pc, #24]	; (d14c <sys_notify_finalize+0x54>)
    d132:	f016 ff76 	bl	24022 <assert_print>
    d136:	2145      	movs	r1, #69	; 0x45
    d138:	4804      	ldr	r0, [pc, #16]	; (d14c <sys_notify_finalize+0x54>)
    d13a:	f016 ff6b 	bl	24014 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    d13e:	f014 ff5b 	bl	21ff8 <z_impl_k_poll_signal_raise>
    d142:	e7f0      	b.n	d126 <sys_notify_finalize+0x2e>
    d144:	0002fb7c 	.word	0x0002fb7c
    d148:	0002a669 	.word	0x0002a669
    d14c:	0002b3b4 	.word	0x0002b3b4

0000d150 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    d150:	b5f0      	push	{r4, r5, r6, r7, lr}
    d152:	4602      	mov	r2, r0
    d154:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    d156:	270a      	movs	r7, #10
	size_t val = 0;
    d158:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    d15a:	4e07      	ldr	r6, [pc, #28]	; (d178 <extract_decimal+0x28>)
    d15c:	460b      	mov	r3, r1
    d15e:	781c      	ldrb	r4, [r3, #0]
    d160:	3101      	adds	r1, #1
    d162:	5d35      	ldrb	r5, [r6, r4]
    d164:	076d      	lsls	r5, r5, #29
    d166:	d401      	bmi.n	d16c <extract_decimal+0x1c>
	}
	*str = sp;
    d168:	6013      	str	r3, [r2, #0]
	return val;
}
    d16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    d16c:	fb07 4300 	mla	r3, r7, r0, r4
    d170:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d174:	e7f2      	b.n	d15c <extract_decimal+0xc>
    d176:	bf00      	nop
    d178:	0002fbde 	.word	0x0002fbde

0000d17c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    d17c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d180:	4615      	mov	r5, r2
    d182:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    d184:	78d3      	ldrb	r3, [r2, #3]
    d186:	4a22      	ldr	r2, [pc, #136]	; (d210 <encode_uint+0x94>)
	switch (specifier) {
    d188:	2b6f      	cmp	r3, #111	; 0x6f
    d18a:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    d18e:	4680      	mov	r8, r0
    d190:	460f      	mov	r7, r1
    d192:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    d196:	d029      	beq.n	d1ec <encode_uint+0x70>
    d198:	d824      	bhi.n	d1e4 <encode_uint+0x68>
		return 10;
    d19a:	2b58      	cmp	r3, #88	; 0x58
    d19c:	bf0c      	ite	eq
    d19e:	2610      	moveq	r6, #16
    d1a0:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    d1a2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    d1a6:	4632      	mov	r2, r6
    d1a8:	2300      	movs	r3, #0
    d1aa:	4640      	mov	r0, r8
    d1ac:	4639      	mov	r1, r7
    d1ae:	f7fb fe9f 	bl	8ef0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    d1b2:	2a09      	cmp	r2, #9
    d1b4:	b2d4      	uxtb	r4, r2
    d1b6:	d81e      	bhi.n	d1f6 <encode_uint+0x7a>
    d1b8:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    d1ba:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d1bc:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    d1be:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d1c2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    d1c6:	d301      	bcc.n	d1cc <encode_uint+0x50>
    d1c8:	45d1      	cmp	r9, sl
    d1ca:	d811      	bhi.n	d1f0 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    d1cc:	782b      	ldrb	r3, [r5, #0]
    d1ce:	069b      	lsls	r3, r3, #26
    d1d0:	d505      	bpl.n	d1de <encode_uint+0x62>
		if (radix == 8) {
    d1d2:	2e08      	cmp	r6, #8
    d1d4:	d115      	bne.n	d202 <encode_uint+0x86>
			conv->altform_0 = true;
    d1d6:	78ab      	ldrb	r3, [r5, #2]
    d1d8:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    d1dc:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    d1de:	4648      	mov	r0, r9
    d1e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    d1e4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    d1e8:	2b70      	cmp	r3, #112	; 0x70
    d1ea:	e7d7      	b.n	d19c <encode_uint+0x20>
	switch (specifier) {
    d1ec:	2608      	movs	r6, #8
    d1ee:	e7d8      	b.n	d1a2 <encode_uint+0x26>
		value /= radix;
    d1f0:	4680      	mov	r8, r0
    d1f2:	460f      	mov	r7, r1
    d1f4:	e7d7      	b.n	d1a6 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d1f6:	f1bb 0f01 	cmp.w	fp, #1
    d1fa:	bf0c      	ite	eq
    d1fc:	3437      	addeq	r4, #55	; 0x37
    d1fe:	3457      	addne	r4, #87	; 0x57
    d200:	e7db      	b.n	d1ba <encode_uint+0x3e>
		} else if (radix == 16) {
    d202:	2e10      	cmp	r6, #16
    d204:	d1eb      	bne.n	d1de <encode_uint+0x62>
			conv->altform_0c = true;
    d206:	78ab      	ldrb	r3, [r5, #2]
    d208:	f043 0310 	orr.w	r3, r3, #16
    d20c:	e7e6      	b.n	d1dc <encode_uint+0x60>
    d20e:	bf00      	nop
    d210:	0002fbde 	.word	0x0002fbde

0000d214 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    d214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d218:	4682      	mov	sl, r0
    d21a:	4617      	mov	r7, r2
    d21c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d21e:	2500      	movs	r5, #0
{
    d220:	b097      	sub	sp, #92	; 0x5c
    d222:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d224:	7838      	ldrb	r0, [r7, #0]
    d226:	b908      	cbnz	r0, d22c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d228:	4628      	mov	r0, r5
    d22a:	e349      	b.n	d8c0 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    d22c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    d22e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    d230:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    d232:	d006      	beq.n	d242 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    d234:	9903      	ldr	r1, [sp, #12]
    d236:	47d0      	blx	sl
    d238:	2800      	cmp	r0, #0
    d23a:	f2c0 8341 	blt.w	d8c0 <z_cbvprintf_impl+0x6ac>
    d23e:	3501      	adds	r5, #1
		if (bps == NULL) {
    d240:	e1f0      	b.n	d624 <z_cbvprintf_impl+0x410>
		} state = {
    d242:	2218      	movs	r2, #24
    d244:	2100      	movs	r1, #0
    d246:	a810      	add	r0, sp, #64	; 0x40
    d248:	f01b fae2 	bl	28810 <memset>
	if (*sp == '%') {
    d24c:	787b      	ldrb	r3, [r7, #1]
    d24e:	2b25      	cmp	r3, #37	; 0x25
    d250:	f000 80a3 	beq.w	d39a <z_cbvprintf_impl+0x186>
    d254:	2300      	movs	r3, #0
    d256:	4698      	mov	r8, r3
    d258:	469e      	mov	lr, r3
    d25a:	469c      	mov	ip, r3
    d25c:	4618      	mov	r0, r3
    d25e:	1c79      	adds	r1, r7, #1
    d260:	460e      	mov	r6, r1
		switch (*sp) {
    d262:	f811 2b01 	ldrb.w	r2, [r1], #1
    d266:	2a2b      	cmp	r2, #43	; 0x2b
    d268:	f000 80c6 	beq.w	d3f8 <z_cbvprintf_impl+0x1e4>
    d26c:	f200 80bd 	bhi.w	d3ea <z_cbvprintf_impl+0x1d6>
    d270:	2a20      	cmp	r2, #32
    d272:	f000 80c4 	beq.w	d3fe <z_cbvprintf_impl+0x1ea>
    d276:	2a23      	cmp	r2, #35	; 0x23
    d278:	f000 80c4 	beq.w	d404 <z_cbvprintf_impl+0x1f0>
    d27c:	b12b      	cbz	r3, d28a <z_cbvprintf_impl+0x76>
    d27e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d286:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d28a:	f1b8 0f00 	cmp.w	r8, #0
    d28e:	d005      	beq.n	d29c <z_cbvprintf_impl+0x88>
    d290:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d294:	f043 0320 	orr.w	r3, r3, #32
    d298:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d29c:	f1be 0f00 	cmp.w	lr, #0
    d2a0:	d005      	beq.n	d2ae <z_cbvprintf_impl+0x9a>
    d2a2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d2a6:	f043 0310 	orr.w	r3, r3, #16
    d2aa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d2ae:	f1bc 0f00 	cmp.w	ip, #0
    d2b2:	d005      	beq.n	d2c0 <z_cbvprintf_impl+0xac>
    d2b4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d2b8:	f043 0308 	orr.w	r3, r3, #8
    d2bc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d2c0:	b128      	cbz	r0, d2ce <z_cbvprintf_impl+0xba>
    d2c2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d2c6:	f043 0304 	orr.w	r3, r3, #4
    d2ca:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    d2ce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d2d2:	f003 0144 	and.w	r1, r3, #68	; 0x44
    d2d6:	2944      	cmp	r1, #68	; 0x44
    d2d8:	d103      	bne.n	d2e2 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    d2da:	f36f 1386 	bfc	r3, #6, #1
    d2de:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    d2e2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d2e6:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    d2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d2ec:	9609      	str	r6, [sp, #36]	; 0x24
    d2ee:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d2f2:	f040 808c 	bne.w	d40e <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    d2f6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d2fa:	f043 0301 	orr.w	r3, r3, #1
    d2fe:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    d302:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    d304:	781a      	ldrb	r2, [r3, #0]
    d306:	2a2e      	cmp	r2, #46	; 0x2e
    d308:	bf0c      	ite	eq
    d30a:	2101      	moveq	r1, #1
    d30c:	2100      	movne	r1, #0
    d30e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d312:	f361 0241 	bfi	r2, r1, #1, #1
    d316:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    d31a:	d10c      	bne.n	d336 <z_cbvprintf_impl+0x122>
	++sp;
    d31c:	1c5a      	adds	r2, r3, #1
    d31e:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    d320:	785a      	ldrb	r2, [r3, #1]
    d322:	2a2a      	cmp	r2, #42	; 0x2a
    d324:	f040 8083 	bne.w	d42e <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    d328:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    d32c:	3302      	adds	r3, #2
		conv->prec_star = true;
    d32e:	f042 0204 	orr.w	r2, r2, #4
    d332:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    d336:	781a      	ldrb	r2, [r3, #0]
    d338:	2a6c      	cmp	r2, #108	; 0x6c
    d33a:	f000 80a4 	beq.w	d486 <z_cbvprintf_impl+0x272>
    d33e:	f200 8086 	bhi.w	d44e <z_cbvprintf_impl+0x23a>
    d342:	2a68      	cmp	r2, #104	; 0x68
    d344:	f000 808c 	beq.w	d460 <z_cbvprintf_impl+0x24c>
    d348:	2a6a      	cmp	r2, #106	; 0x6a
    d34a:	f000 80a5 	beq.w	d498 <z_cbvprintf_impl+0x284>
    d34e:	2a4c      	cmp	r2, #76	; 0x4c
    d350:	f000 80aa 	beq.w	d4a8 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    d354:	461a      	mov	r2, r3
    d356:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    d35a:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    d35c:	9204      	str	r2, [sp, #16]
    d35e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    d362:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    d366:	f200 8117 	bhi.w	d598 <z_cbvprintf_impl+0x384>
    d36a:	2b6d      	cmp	r3, #109	; 0x6d
    d36c:	f200 80a9 	bhi.w	d4c2 <z_cbvprintf_impl+0x2ae>
    d370:	2b69      	cmp	r3, #105	; 0x69
    d372:	f200 8111 	bhi.w	d598 <z_cbvprintf_impl+0x384>
    d376:	2b57      	cmp	r3, #87	; 0x57
    d378:	f200 80be 	bhi.w	d4f8 <z_cbvprintf_impl+0x2e4>
    d37c:	2b41      	cmp	r3, #65	; 0x41
    d37e:	d003      	beq.n	d388 <z_cbvprintf_impl+0x174>
    d380:	3b45      	subs	r3, #69	; 0x45
    d382:	2b02      	cmp	r3, #2
    d384:	f200 8108 	bhi.w	d598 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    d388:	2204      	movs	r2, #4
    d38a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d38e:	f362 0302 	bfi	r3, r2, #0, #3
    d392:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    d396:	2301      	movs	r3, #1
			break;
    d398:	e0ca      	b.n	d530 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    d39a:	1cba      	adds	r2, r7, #2
    d39c:	9204      	str	r2, [sp, #16]
    d39e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    d3a2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d3a6:	07da      	lsls	r2, r3, #31
    d3a8:	f140 80fd 	bpl.w	d5a6 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    d3ac:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    d3b0:	f1b9 0f00 	cmp.w	r9, #0
    d3b4:	da07      	bge.n	d3c6 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    d3b6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    d3ba:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    d3be:	f042 0204 	orr.w	r2, r2, #4
    d3c2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    d3c6:	075e      	lsls	r6, r3, #29
    d3c8:	f140 80f6 	bpl.w	d5b8 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    d3cc:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    d3d0:	f1bb 0f00 	cmp.w	fp, #0
    d3d4:	f280 80f5 	bge.w	d5c2 <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    d3d8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d3dc:	f36f 0341 	bfc	r3, #1, #1
    d3e0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    d3e4:	f04f 3bff 	mov.w	fp, #4294967295
    d3e8:	e0eb      	b.n	d5c2 <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    d3ea:	2a2d      	cmp	r2, #45	; 0x2d
    d3ec:	d00d      	beq.n	d40a <z_cbvprintf_impl+0x1f6>
    d3ee:	2a30      	cmp	r2, #48	; 0x30
    d3f0:	f47f af44 	bne.w	d27c <z_cbvprintf_impl+0x68>
    d3f4:	2301      	movs	r3, #1
	} while (loop);
    d3f6:	e733      	b.n	d260 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    d3f8:	f04f 0c01 	mov.w	ip, #1
    d3fc:	e730      	b.n	d260 <z_cbvprintf_impl+0x4c>
    d3fe:	f04f 0e01 	mov.w	lr, #1
    d402:	e72d      	b.n	d260 <z_cbvprintf_impl+0x4c>
    d404:	f04f 0801 	mov.w	r8, #1
    d408:	e72a      	b.n	d260 <z_cbvprintf_impl+0x4c>
    d40a:	2001      	movs	r0, #1
    d40c:	e728      	b.n	d260 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    d40e:	a809      	add	r0, sp, #36	; 0x24
    d410:	f7ff fe9e 	bl	d150 <extract_decimal>
	if (sp != wp) {
    d414:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d416:	42b3      	cmp	r3, r6
    d418:	f43f af74 	beq.w	d304 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    d41c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    d420:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    d422:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    d424:	f360 0241 	bfi	r2, r0, #1, #1
    d428:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    d42c:	e76a      	b.n	d304 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    d42e:	a809      	add	r0, sp, #36	; 0x24
    d430:	f7ff fe8e 	bl	d150 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    d434:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    d438:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    d43a:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d43e:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    d442:	f362 0341 	bfi	r3, r2, #1, #1
    d446:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    d44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d44c:	e773      	b.n	d336 <z_cbvprintf_impl+0x122>
	switch (*sp) {
    d44e:	2a74      	cmp	r2, #116	; 0x74
    d450:	d026      	beq.n	d4a0 <z_cbvprintf_impl+0x28c>
    d452:	2a7a      	cmp	r2, #122	; 0x7a
    d454:	f47f af7e 	bne.w	d354 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    d458:	2106      	movs	r1, #6
    d45a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d45e:	e00c      	b.n	d47a <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    d460:	785a      	ldrb	r2, [r3, #1]
    d462:	2a68      	cmp	r2, #104	; 0x68
    d464:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d468:	d106      	bne.n	d478 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    d46a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d46c:	f361 02c6 	bfi	r2, r1, #3, #4
    d470:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    d474:	3302      	adds	r3, #2
    d476:	e76d      	b.n	d354 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    d478:	2102      	movs	r1, #2
    d47a:	f361 02c6 	bfi	r2, r1, #3, #4
    d47e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    d482:	3301      	adds	r3, #1
    d484:	e766      	b.n	d354 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    d486:	785a      	ldrb	r2, [r3, #1]
    d488:	2a6c      	cmp	r2, #108	; 0x6c
    d48a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d48e:	d101      	bne.n	d494 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    d490:	2104      	movs	r1, #4
    d492:	e7eb      	b.n	d46c <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    d494:	2103      	movs	r1, #3
    d496:	e7f0      	b.n	d47a <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    d498:	2105      	movs	r1, #5
    d49a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d49e:	e7ec      	b.n	d47a <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    d4a0:	2107      	movs	r1, #7
    d4a2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d4a6:	e7e8      	b.n	d47a <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    d4a8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    d4ac:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    d4b0:	f022 0202 	bic.w	r2, r2, #2
    d4b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    d4b8:	f042 0202 	orr.w	r2, r2, #2
    d4bc:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    d4c0:	e7df      	b.n	d482 <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    d4c2:	3b6e      	subs	r3, #110	; 0x6e
    d4c4:	b2d9      	uxtb	r1, r3
    d4c6:	2301      	movs	r3, #1
    d4c8:	408b      	lsls	r3, r1
    d4ca:	f240 4182 	movw	r1, #1154	; 0x482
    d4ce:	420b      	tst	r3, r1
    d4d0:	d138      	bne.n	d544 <z_cbvprintf_impl+0x330>
    d4d2:	f013 0f24 	tst.w	r3, #36	; 0x24
    d4d6:	d152      	bne.n	d57e <z_cbvprintf_impl+0x36a>
    d4d8:	07d8      	lsls	r0, r3, #31
    d4da:	d55d      	bpl.n	d598 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    d4dc:	2103      	movs	r1, #3
    d4de:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d4e2:	f361 0302 	bfi	r3, r1, #0, #3
    d4e6:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d4ea:	f002 0378 	and.w	r3, r2, #120	; 0x78
    d4ee:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    d4f2:	424b      	negs	r3, r1
    d4f4:	414b      	adcs	r3, r1
    d4f6:	e01b      	b.n	d530 <z_cbvprintf_impl+0x31c>
    d4f8:	2001      	movs	r0, #1
	switch (conv->specifier) {
    d4fa:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    d4fe:	b2c9      	uxtb	r1, r1
    d500:	fa00 f101 	lsl.w	r1, r0, r1
    d504:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    d508:	f47f af3e 	bne.w	d388 <z_cbvprintf_impl+0x174>
    d50c:	f640 0601 	movw	r6, #2049	; 0x801
    d510:	4231      	tst	r1, r6
    d512:	d11d      	bne.n	d550 <z_cbvprintf_impl+0x33c>
    d514:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    d518:	d03e      	beq.n	d598 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    d51a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d51e:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d522:	f002 0278 	and.w	r2, r2, #120	; 0x78
    d526:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    d528:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d52c:	d034      	beq.n	d598 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    d52e:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    d530:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    d534:	f3c2 0140 	ubfx	r1, r2, #1, #1
    d538:	430b      	orrs	r3, r1
    d53a:	f363 0241 	bfi	r2, r3, #1, #1
    d53e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    d542:	e72e      	b.n	d3a2 <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    d544:	2102      	movs	r1, #2
    d546:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d54a:	f361 0302 	bfi	r3, r1, #0, #3
    d54e:	e7e8      	b.n	d522 <z_cbvprintf_impl+0x30e>
    d550:	2002      	movs	r0, #2
    d552:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d556:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    d55a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d55e:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    d560:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    d564:	bf02      	ittt	eq
    d566:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    d56a:	f041 0101 	orreq.w	r1, r1, #1
    d56e:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    d572:	2b63      	cmp	r3, #99	; 0x63
    d574:	d1db      	bne.n	d52e <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    d576:	1e13      	subs	r3, r2, #0
    d578:	bf18      	it	ne
    d57a:	2301      	movne	r3, #1
    d57c:	e7d8      	b.n	d530 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    d57e:	2103      	movs	r1, #3
    d580:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d584:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    d588:	f361 0302 	bfi	r3, r1, #0, #3
    d58c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d590:	bf14      	ite	ne
    d592:	2301      	movne	r3, #1
    d594:	2300      	moveq	r3, #0
    d596:	e7cb      	b.n	d530 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    d598:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d59c:	f043 0301 	orr.w	r3, r3, #1
    d5a0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    d5a4:	e7c3      	b.n	d52e <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    d5a6:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    d5aa:	2a00      	cmp	r2, #0
		int width = -1;
    d5ac:	bfac      	ite	ge
    d5ae:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    d5b2:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    d5b6:	e706      	b.n	d3c6 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    d5b8:	0798      	lsls	r0, r3, #30
    d5ba:	f57f af13 	bpl.w	d3e4 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    d5be:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    d5c2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    d5c4:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    d5c8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    d5cc:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    d5d0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    d5d4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    d5d6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    d5da:	d133      	bne.n	d644 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    d5dc:	1ecb      	subs	r3, r1, #3
    d5de:	2b04      	cmp	r3, #4
    d5e0:	d804      	bhi.n	d5ec <z_cbvprintf_impl+0x3d8>
    d5e2:	e8df f003 	tbb	[pc, r3]
    d5e6:	4621      	.short	0x4621
    d5e8:	2146      	.short	0x2146
    d5ea:	21          	.byte	0x21
    d5eb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    d5ec:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    d5ee:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    d5f0:	ea4f 72e3 	mov.w	r2, r3, asr #31
    d5f4:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d5f8:	d11c      	bne.n	d634 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    d5fa:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    d5fe:	17da      	asrs	r2, r3, #31
    d600:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    d604:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    d606:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d60a:	f013 0603 	ands.w	r6, r3, #3
    d60e:	d050      	beq.n	d6b2 <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    d610:	463a      	mov	r2, r7
    d612:	4650      	mov	r0, sl
    d614:	9b04      	ldr	r3, [sp, #16]
    d616:	9903      	ldr	r1, [sp, #12]
    d618:	f016 fce5 	bl	23fe6 <outs>
    d61c:	2800      	cmp	r0, #0
    d61e:	f2c0 814f 	blt.w	d8c0 <z_cbvprintf_impl+0x6ac>
    d622:	4405      	add	r5, r0
			continue;
    d624:	9f04      	ldr	r7, [sp, #16]
    d626:	e5fd      	b.n	d224 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    d628:	f854 3b04 	ldr.w	r3, [r4], #4
    d62c:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    d62e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    d632:	e7e8      	b.n	d606 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    d634:	2902      	cmp	r1, #2
    d636:	d1e5      	bne.n	d604 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    d638:	b21a      	sxth	r2, r3
    d63a:	f343 33c0 	sbfx	r3, r3, #15, #1
    d63e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d642:	e7df      	b.n	d604 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    d644:	2b02      	cmp	r3, #2
    d646:	d124      	bne.n	d692 <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    d648:	1ecb      	subs	r3, r1, #3
    d64a:	2b04      	cmp	r3, #4
    d64c:	d804      	bhi.n	d658 <z_cbvprintf_impl+0x444>
    d64e:	e8df f003 	tbb	[pc, r3]
    d652:	1018      	.short	0x1018
    d654:	1810      	.short	0x1810
    d656:	18          	.byte	0x18
    d657:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    d658:	2901      	cmp	r1, #1
    d65a:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    d65e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    d662:	d014      	beq.n	d68e <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    d664:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    d666:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    d66a:	d1cc      	bne.n	d606 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    d66c:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    d66e:	9310      	str	r3, [sp, #64]	; 0x40
    d670:	e7c9      	b.n	d606 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    d672:	3407      	adds	r4, #7
    d674:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    d678:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    d67c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d680:	e7c1      	b.n	d606 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    d682:	f854 3b04 	ldr.w	r3, [r4], #4
    d686:	9310      	str	r3, [sp, #64]	; 0x40
    d688:	2300      	movs	r3, #0
    d68a:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    d68c:	e7bb      	b.n	d606 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    d68e:	b2db      	uxtb	r3, r3
    d690:	e7cd      	b.n	d62e <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    d692:	2b04      	cmp	r3, #4
    d694:	d108      	bne.n	d6a8 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    d696:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    d698:	f024 0407 	bic.w	r4, r4, #7
    d69c:	e9d4 2300 	ldrd	r2, r3, [r4]
    d6a0:	3408      	adds	r4, #8
    d6a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d6a6:	e7ae      	b.n	d606 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    d6a8:	2b03      	cmp	r3, #3
    d6aa:	d1ac      	bne.n	d606 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    d6ac:	f854 3b04 	ldr.w	r3, [r4], #4
    d6b0:	e7dd      	b.n	d66e <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    d6b2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d6b6:	2878      	cmp	r0, #120	; 0x78
    d6b8:	d8b4      	bhi.n	d624 <z_cbvprintf_impl+0x410>
    d6ba:	2862      	cmp	r0, #98	; 0x62
    d6bc:	d81c      	bhi.n	d6f8 <z_cbvprintf_impl+0x4e4>
    d6be:	2825      	cmp	r0, #37	; 0x25
    d6c0:	f43f adb8 	beq.w	d234 <z_cbvprintf_impl+0x20>
    d6c4:	2858      	cmp	r0, #88	; 0x58
    d6c6:	d1ad      	bne.n	d624 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    d6c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d6cc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d6d0:	9300      	str	r3, [sp, #0]
    d6d2:	aa12      	add	r2, sp, #72	; 0x48
    d6d4:	ab0a      	add	r3, sp, #40	; 0x28
    d6d6:	f7ff fd51 	bl	d17c <encode_uint>
			if (precision >= 0) {
    d6da:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    d6de:	4607      	mov	r7, r0
			if (precision >= 0) {
    d6e0:	f280 8097 	bge.w	d812 <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    d6e4:	2f00      	cmp	r7, #0
    d6e6:	d09d      	beq.n	d624 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d6e8:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d6ec:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    d6f0:	2e00      	cmp	r6, #0
    d6f2:	d04e      	beq.n	d792 <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    d6f4:	3001      	adds	r0, #1
    d6f6:	e04c      	b.n	d792 <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    d6f8:	3863      	subs	r0, #99	; 0x63
    d6fa:	2815      	cmp	r0, #21
    d6fc:	d892      	bhi.n	d624 <z_cbvprintf_impl+0x410>
    d6fe:	a201      	add	r2, pc, #4	; (adr r2, d704 <z_cbvprintf_impl+0x4f0>)
    d700:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    d704:	0000d783 	.word	0x0000d783
    d708:	0000d7e9 	.word	0x0000d7e9
    d70c:	0000d625 	.word	0x0000d625
    d710:	0000d625 	.word	0x0000d625
    d714:	0000d625 	.word	0x0000d625
    d718:	0000d625 	.word	0x0000d625
    d71c:	0000d7e9 	.word	0x0000d7e9
    d720:	0000d625 	.word	0x0000d625
    d724:	0000d625 	.word	0x0000d625
    d728:	0000d625 	.word	0x0000d625
    d72c:	0000d625 	.word	0x0000d625
    d730:	0000d871 	.word	0x0000d871
    d734:	0000d80d 	.word	0x0000d80d
    d738:	0000d833 	.word	0x0000d833
    d73c:	0000d625 	.word	0x0000d625
    d740:	0000d625 	.word	0x0000d625
    d744:	0000d75d 	.word	0x0000d75d
    d748:	0000d625 	.word	0x0000d625
    d74c:	0000d80d 	.word	0x0000d80d
    d750:	0000d625 	.word	0x0000d625
    d754:	0000d625 	.word	0x0000d625
    d758:	0000d80d 	.word	0x0000d80d
			if (precision >= 0) {
    d75c:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    d760:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    d762:	db0a      	blt.n	d77a <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    d764:	4659      	mov	r1, fp
    d766:	4638      	mov	r0, r7
    d768:	f01b f9a7 	bl	28aba <strnlen>
			bpe = bps + len;
    d76c:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    d770:	2f00      	cmp	r7, #0
    d772:	f43f af57 	beq.w	d624 <z_cbvprintf_impl+0x410>
		char sign = 0;
    d776:	2600      	movs	r6, #0
    d778:	e00b      	b.n	d792 <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    d77a:	4638      	mov	r0, r7
    d77c:	f7fb fdf0 	bl	9360 <strlen>
    d780:	e7f4      	b.n	d76c <z_cbvprintf_impl+0x558>
		char sign = 0;
    d782:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    d784:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d786:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    d788:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d78c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    d790:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    d792:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d796:	f013 0210 	ands.w	r2, r3, #16
    d79a:	9205      	str	r2, [sp, #20]
    d79c:	f000 8083 	beq.w	d8a6 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    d7a0:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    d7a2:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    d7a4:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    d7a8:	bf48      	it	mi
    d7aa:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    d7ac:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    d7ae:	bf48      	it	mi
    d7b0:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    d7b2:	f1b9 0f00 	cmp.w	r9, #0
    d7b6:	f340 8090 	ble.w	d8da <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    d7ba:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    d7be:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    d7c2:	f3c2 0380 	ubfx	r3, r2, #2, #1
    d7c6:	0750      	lsls	r0, r2, #29
    d7c8:	9306      	str	r3, [sp, #24]
    d7ca:	f100 8086 	bmi.w	d8da <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    d7ce:	0651      	lsls	r1, r2, #25
    d7d0:	d579      	bpl.n	d8c6 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    d7d2:	b13e      	cbz	r6, d7e4 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    d7d4:	4630      	mov	r0, r6
    d7d6:	9903      	ldr	r1, [sp, #12]
    d7d8:	47d0      	blx	sl
    d7da:	2800      	cmp	r0, #0
    d7dc:	db70      	blt.n	d8c0 <z_cbvprintf_impl+0x6ac>
    d7de:	9b06      	ldr	r3, [sp, #24]
    d7e0:	3501      	adds	r5, #1
    d7e2:	461e      	mov	r6, r3
					pad = '0';
    d7e4:	2230      	movs	r2, #48	; 0x30
    d7e6:	e06f      	b.n	d8c8 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    d7e8:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    d7ea:	bf5a      	itte	pl
    d7ec:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    d7f0:	015e      	lslpl	r6, r3, #5
				sign = '+';
    d7f2:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    d7f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    d7f8:	2b00      	cmp	r3, #0
    d7fa:	f6bf af65 	bge.w	d6c8 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    d7fe:	4252      	negs	r2, r2
    d800:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    d804:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    d806:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d80a:	e75d      	b.n	d6c8 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    d80c:	2600      	movs	r6, #0
    d80e:	e75b      	b.n	d6c8 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    d810:	2600      	movs	r6, #0
				conv->flag_zero = false;
    d812:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    d816:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d81a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    d81c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    d820:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    d822:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    d826:	f67f af5d 	bls.w	d6e4 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    d82a:	ebab 0303 	sub.w	r3, fp, r3
    d82e:	9313      	str	r3, [sp, #76]	; 0x4c
    d830:	e758      	b.n	d6e4 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    d832:	9810      	ldr	r0, [sp, #64]	; 0x40
    d834:	b380      	cbz	r0, d898 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d836:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d83a:	ab0a      	add	r3, sp, #40	; 0x28
    d83c:	2100      	movs	r1, #0
    d83e:	f8cd 8000 	str.w	r8, [sp]
    d842:	aa12      	add	r2, sp, #72	; 0x48
    d844:	f7ff fc9a 	bl	d17c <encode_uint>
				conv->altform_0c = true;
    d848:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d84c:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    d850:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d854:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    d858:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d85c:	4607      	mov	r7, r0
				conv->altform_0c = true;
    d85e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d862:	dad5      	bge.n	d810 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    d864:	2800      	cmp	r0, #0
    d866:	f43f aedd 	beq.w	d624 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d86a:	eba8 0000 	sub.w	r0, r8, r0
    d86e:	e782      	b.n	d776 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    d870:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    d872:	2907      	cmp	r1, #7
    d874:	f63f aed6 	bhi.w	d624 <z_cbvprintf_impl+0x410>
    d878:	e8df f001 	tbb	[pc, r1]
    d87c:	0c06040c 	.word	0x0c06040c
    d880:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    d884:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    d886:	e6cd      	b.n	d624 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    d888:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    d88a:	e6cb      	b.n	d624 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    d88c:	17ea      	asrs	r2, r5, #31
    d88e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    d892:	e6c7      	b.n	d624 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    d894:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    d896:	e6c5      	b.n	d624 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    d898:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d958 <z_cbvprintf_impl+0x744>
		char sign = 0;
    d89c:	4606      	mov	r6, r0
    d89e:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    d8a2:	2005      	movs	r0, #5
    d8a4:	e775      	b.n	d792 <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    d8a6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    d8a8:	bf48      	it	mi
    d8aa:	3001      	addmi	r0, #1
    d8ac:	e779      	b.n	d7a2 <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    d8ae:	4610      	mov	r0, r2
    d8b0:	9307      	str	r3, [sp, #28]
    d8b2:	9206      	str	r2, [sp, #24]
    d8b4:	9903      	ldr	r1, [sp, #12]
    d8b6:	47d0      	blx	sl
    d8b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d8bc:	2800      	cmp	r0, #0
    d8be:	da04      	bge.n	d8ca <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    d8c0:	b017      	add	sp, #92	; 0x5c
    d8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    d8c6:	2220      	movs	r2, #32
					pad = '0';
    d8c8:	464b      	mov	r3, r9
				while (width-- > 0) {
    d8ca:	4619      	mov	r1, r3
    d8cc:	2900      	cmp	r1, #0
    d8ce:	f103 33ff 	add.w	r3, r3, #4294967295
    d8d2:	dcec      	bgt.n	d8ae <z_cbvprintf_impl+0x69a>
    d8d4:	444d      	add	r5, r9
    d8d6:	4699      	mov	r9, r3
    d8d8:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    d8da:	b12e      	cbz	r6, d8e8 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    d8dc:	4630      	mov	r0, r6
    d8de:	9903      	ldr	r1, [sp, #12]
    d8e0:	47d0      	blx	sl
    d8e2:	2800      	cmp	r0, #0
    d8e4:	dbec      	blt.n	d8c0 <z_cbvprintf_impl+0x6ac>
    d8e6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    d8e8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d8ec:	06da      	lsls	r2, r3, #27
    d8ee:	d401      	bmi.n	d8f4 <z_cbvprintf_impl+0x6e0>
    d8f0:	071b      	lsls	r3, r3, #28
    d8f2:	d505      	bpl.n	d900 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    d8f4:	2030      	movs	r0, #48	; 0x30
    d8f6:	9903      	ldr	r1, [sp, #12]
    d8f8:	47d0      	blx	sl
    d8fa:	2800      	cmp	r0, #0
    d8fc:	dbe0      	blt.n	d8c0 <z_cbvprintf_impl+0x6ac>
    d8fe:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    d900:	9b05      	ldr	r3, [sp, #20]
    d902:	b133      	cbz	r3, d912 <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    d904:	9903      	ldr	r1, [sp, #12]
    d906:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d90a:	47d0      	blx	sl
    d90c:	2800      	cmp	r0, #0
    d90e:	dbd7      	blt.n	d8c0 <z_cbvprintf_impl+0x6ac>
    d910:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d912:	44ab      	add	fp, r5
    d914:	e005      	b.n	d922 <z_cbvprintf_impl+0x70e>
				OUTC('0');
    d916:	2030      	movs	r0, #48	; 0x30
    d918:	9903      	ldr	r1, [sp, #12]
    d91a:	47d0      	blx	sl
    d91c:	2800      	cmp	r0, #0
    d91e:	dbcf      	blt.n	d8c0 <z_cbvprintf_impl+0x6ac>
    d920:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d922:	ebab 0305 	sub.w	r3, fp, r5
    d926:	2b00      	cmp	r3, #0
    d928:	dcf5      	bgt.n	d916 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    d92a:	4643      	mov	r3, r8
    d92c:	463a      	mov	r2, r7
    d92e:	4650      	mov	r0, sl
    d930:	9903      	ldr	r1, [sp, #12]
    d932:	f016 fb58 	bl	23fe6 <outs>
    d936:	2800      	cmp	r0, #0
    d938:	dbc2      	blt.n	d8c0 <z_cbvprintf_impl+0x6ac>
    d93a:	4405      	add	r5, r0
		while (width > 0) {
    d93c:	44a9      	add	r9, r5
    d93e:	eba9 0305 	sub.w	r3, r9, r5
    d942:	2b00      	cmp	r3, #0
    d944:	f77f ae6e 	ble.w	d624 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    d948:	2020      	movs	r0, #32
    d94a:	9903      	ldr	r1, [sp, #12]
    d94c:	47d0      	blx	sl
    d94e:	2800      	cmp	r0, #0
    d950:	dbb6      	blt.n	d8c0 <z_cbvprintf_impl+0x6ac>
    d952:	3501      	adds	r5, #1
			--width;
    d954:	e7f3      	b.n	d93e <z_cbvprintf_impl+0x72a>
    d956:	bf00      	nop
    d958:	0002b3dc 	.word	0x0002b3dc

0000d95c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    d95c:	b148      	cbz	r0, d972 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    d95e:	4b05      	ldr	r3, [pc, #20]	; (d974 <arch_busy_wait+0x18>)
    d960:	4a05      	ldr	r2, [pc, #20]	; (d978 <arch_busy_wait+0x1c>)
    d962:	681b      	ldr	r3, [r3, #0]
    d964:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    d968:	4358      	muls	r0, r3
    d96a:	4b04      	ldr	r3, [pc, #16]	; (d97c <arch_busy_wait+0x20>)
    d96c:	f043 0301 	orr.w	r3, r3, #1
    d970:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    d972:	4770      	bx	lr
    d974:	20008688 	.word	0x20008688
    d978:	000f4240 	.word	0x000f4240
    d97c:	00029890 	.word	0x00029890

0000d980 <z_log_msg_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    d980:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
    d982:	ab0b      	add	r3, sp, #44	; 0x2c
    d984:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    d986:	9303      	str	r3, [sp, #12]
    d988:	4b05      	ldr	r3, [pc, #20]	; (d9a0 <z_log_msg_runtime_create.constprop.0+0x20>)
    d98a:	2201      	movs	r2, #1
    d98c:	9302      	str	r3, [sp, #8]
    d98e:	2300      	movs	r3, #0
    d990:	4618      	mov	r0, r3
    d992:	e9cd 3300 	strd	r3, r3, [sp]
    d996:	f000 fb09 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
	z_log_msg_runtime_vcreate(domain_id, source, level,
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    d99a:	b007      	add	sp, #28
    d99c:	f85d fb04 	ldr.w	pc, [sp], #4
    d9a0:	0002b3e1 	.word	0x0002b3e1

0000d9a4 <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    d9a4:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    d9a6:	b570      	push	{r4, r5, r6, lr}
    d9a8:	4605      	mov	r5, r0
    d9aa:	461e      	mov	r6, r3
    d9ac:	4608      	mov	r0, r1
    d9ae:	d90b      	bls.n	d9c8 <ppi_ipc_to_rtc.isra.0+0x24>
    d9b0:	491d      	ldr	r1, [pc, #116]	; (da28 <ppi_ipc_to_rtc.isra.0+0x84>)
    d9b2:	481e      	ldr	r0, [pc, #120]	; (da2c <ppi_ipc_to_rtc.isra.0+0x88>)
    d9b4:	f240 13e7 	movw	r3, #487	; 0x1e7
    d9b8:	4a1d      	ldr	r2, [pc, #116]	; (da30 <ppi_ipc_to_rtc.isra.0+0x8c>)
    d9ba:	f016 fb32 	bl	24022 <assert_print>
    d9be:	f240 11e7 	movw	r1, #487	; 0x1e7
    d9c2:	481b      	ldr	r0, [pc, #108]	; (da30 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    d9c4:	f016 fb26 	bl	24014 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    d9c8:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    d9ca:	f00d fc5f 	bl	1b28c <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    d9ce:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    d9d2:	b1ae      	cbz	r6, da00 <ppi_ipc_to_rtc.isra.0+0x5c>
    d9d4:	b950      	cbnz	r0, d9ec <ppi_ipc_to_rtc.isra.0+0x48>
    d9d6:	4917      	ldr	r1, [pc, #92]	; (da34 <ppi_ipc_to_rtc.isra.0+0x90>)
    d9d8:	f240 234e 	movw	r3, #590	; 0x24e
    d9dc:	4a16      	ldr	r2, [pc, #88]	; (da38 <ppi_ipc_to_rtc.isra.0+0x94>)
    d9de:	4813      	ldr	r0, [pc, #76]	; (da2c <ppi_ipc_to_rtc.isra.0+0x88>)
    d9e0:	f016 fb1f 	bl	24022 <assert_print>
    d9e4:	f240 214e 	movw	r1, #590	; 0x24e
    d9e8:	4813      	ldr	r0, [pc, #76]	; (da38 <ppi_ipc_to_rtc.isra.0+0x94>)
    d9ea:	e7eb      	b.n	d9c4 <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    d9ec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    d9f0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    d9f4:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    d9f8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    d9fc:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    d9fe:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    da00:	b948      	cbnz	r0, da16 <ppi_ipc_to_rtc.isra.0+0x72>
    da02:	490c      	ldr	r1, [pc, #48]	; (da34 <ppi_ipc_to_rtc.isra.0+0x90>)
    da04:	f240 2363 	movw	r3, #611	; 0x263
    da08:	4a0b      	ldr	r2, [pc, #44]	; (da38 <ppi_ipc_to_rtc.isra.0+0x94>)
    da0a:	4808      	ldr	r0, [pc, #32]	; (da2c <ppi_ipc_to_rtc.isra.0+0x88>)
    da0c:	f016 fb09 	bl	24022 <assert_print>
    da10:	f240 2163 	movw	r1, #611	; 0x263
    da14:	e7e8      	b.n	d9e8 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    da16:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    da1a:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    da1e:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    da22:	6016      	str	r6, [r2, #0]
    da24:	e7eb      	b.n	d9fe <ppi_ipc_to_rtc.isra.0+0x5a>
    da26:	bf00      	nop
    da28:	0002b43b 	.word	0x0002b43b
    da2c:	0002a669 	.word	0x0002a669
    da30:	0002b409 	.word	0x0002b409
    da34:	0002b47e 	.word	0x0002b47e
    da38:	0002b446 	.word	0x0002b446

0000da3c <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    da3c:	b570      	push	{r4, r5, r6, lr}
    da3e:	b086      	sub	sp, #24
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    da40:	a805      	add	r0, sp, #20
    da42:	f00e fad7 	bl	1bff4 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    da46:	4b25      	ldr	r3, [pc, #148]	; (dadc <sync_rtc_setup+0xa0>)
    da48:	4298      	cmp	r0, r3
    da4a:	d143      	bne.n	dad4 <sync_rtc_setup+0x98>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    da4c:	f00d fe12 	bl	1b674 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    da50:	1e04      	subs	r4, r0, #0
    da52:	da0f      	bge.n	da74 <sync_rtc_setup+0x38>
		nrfx_dppi_channel_free(channels.ch.ppi);
    da54:	f89d 0014 	ldrb.w	r0, [sp, #20]
    da58:	f00e fad2 	bl	1c000 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    da5c:	4b20      	ldr	r3, [pc, #128]	; (dae0 <sync_rtc_setup+0xa4>)
    da5e:	2201      	movs	r2, #1
    da60:	9302      	str	r3, [sp, #8]
    da62:	2300      	movs	r3, #0
    da64:	491f      	ldr	r1, [pc, #124]	; (dae4 <sync_rtc_setup+0xa8>)
    da66:	4618      	mov	r0, r3
    da68:	e9cd 3300 	strd	r3, r3, [sp]
    da6c:	9403      	str	r4, [sp, #12]
    da6e:	f7ff ff87 	bl	d980 <z_log_msg_runtime_create.constprop.0>
	}

	return rv;
    da72:	e02c      	b.n	dace <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    da74:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    da78:	4d1b      	ldr	r5, [pc, #108]	; (dae8 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    da7a:	f88d 4015 	strb.w	r4, [sp, #21]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    da7e:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    da80:	f8ad 3016 	strh.w	r3, [sp, #22]
    da84:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    da86:	9b05      	ldr	r3, [sp, #20]
    da88:	b914      	cbnz	r4, da90 <sync_rtc_setup+0x54>
		return -ENOSYS;
    da8a:	f06f 0457 	mvn.w	r4, #87	; 0x57
    da8e:	e7e5      	b.n	da5c <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    da90:	2108      	movs	r1, #8
    da92:	4628      	mov	r0, r5
    da94:	4a15      	ldr	r2, [pc, #84]	; (daec <sync_rtc_setup+0xb0>)
    da96:	47a0      	blx	r4
	if (err < 0) {
    da98:	1e04      	subs	r4, r0, #0
    da9a:	dbdf      	blt.n	da5c <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    da9c:	6933      	ldr	r3, [r6, #16]
    da9e:	2b00      	cmp	r3, #0
    daa0:	d0f3      	beq.n	da8a <sync_rtc_setup+0x4e>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    daa2:	2201      	movs	r2, #1
    daa4:	2108      	movs	r1, #8
    daa6:	4628      	mov	r0, r5
    daa8:	4798      	blx	r3
	if (rv < 0) {
    daaa:	1e04      	subs	r4, r0, #0
    daac:	dbd6      	blt.n	da5c <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    daae:	2301      	movs	r3, #1
    dab0:	f89d 0014 	ldrb.w	r0, [sp, #20]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    dab4:	4a0e      	ldr	r2, [pc, #56]	; (daf0 <sync_rtc_setup+0xb4>)
    dab6:	fa03 f100 	lsl.w	r1, r3, r0
    daba:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    dabe:	f89d 2017 	ldrb.w	r2, [sp, #23]
    dac2:	f89d 1015 	ldrb.w	r1, [sp, #21]
    dac6:	f7ff ff6d 	bl	d9a4 <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    daca:	2c00      	cmp	r4, #0
    dacc:	d1c6      	bne.n	da5c <sync_rtc_setup+0x20>
}
    dace:	4620      	mov	r0, r4
    dad0:	b006      	add	sp, #24
    dad2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -ENODEV;
    dad4:	f06f 0412 	mvn.w	r4, #18
    dad8:	e7c0      	b.n	da5c <sync_rtc_setup+0x20>
    dada:	bf00      	nop
    dadc:	0bad0000 	.word	0x0bad0000
    dae0:	0002b3e1 	.word	0x0002b3e1
    dae4:	000297ac 	.word	0x000297ac
    dae8:	000291f4 	.word	0x000291f4
    daec:	0000dba5 	.word	0x0000dba5
    daf0:	40017000 	.word	0x40017000

0000daf4 <rtc_cb>:
{
    daf4:	b570      	push	{r4, r5, r6, lr}
    daf6:	9e04      	ldr	r6, [sp, #16]
    daf8:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    dafc:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    dafe:	f3c6 2607 	ubfx	r6, r6, #8, #8
    db02:	4630      	mov	r0, r6
    db04:	f00d fba8 	bl	1b258 <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    db08:	2c0f      	cmp	r4, #15
    db0a:	d90b      	bls.n	db24 <rtc_cb+0x30>
    db0c:	491b      	ldr	r1, [pc, #108]	; (db7c <rtc_cb+0x88>)
    db0e:	481c      	ldr	r0, [pc, #112]	; (db80 <rtc_cb+0x8c>)
    db10:	f240 13e1 	movw	r3, #481	; 0x1e1
    db14:	4a1b      	ldr	r2, [pc, #108]	; (db84 <rtc_cb+0x90>)
    db16:	f016 fa84 	bl	24022 <assert_print>
    db1a:	f240 11e1 	movw	r1, #481	; 0x1e1
    db1e:	4819      	ldr	r0, [pc, #100]	; (db84 <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    db20:	f016 fa78 	bl	24014 <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    db24:	00a4      	lsls	r4, r4, #2
    db26:	b2e4      	uxtb	r4, r4
    db28:	b950      	cbnz	r0, db40 <rtc_cb+0x4c>
    db2a:	4917      	ldr	r1, [pc, #92]	; (db88 <rtc_cb+0x94>)
    db2c:	4814      	ldr	r0, [pc, #80]	; (db80 <rtc_cb+0x8c>)
    db2e:	f44f 7317 	mov.w	r3, #604	; 0x25c
    db32:	4a16      	ldr	r2, [pc, #88]	; (db8c <rtc_cb+0x98>)
    db34:	f016 fa75 	bl	24022 <assert_print>
    db38:	f44f 7117 	mov.w	r1, #604	; 0x25c
    db3c:	4813      	ldr	r0, [pc, #76]	; (db8c <rtc_cb+0x98>)
    db3e:	e7ef      	b.n	db20 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    db40:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    db42:	4b13      	ldr	r3, [pc, #76]	; (db90 <rtc_cb+0x9c>)
    db44:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    db48:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    db4a:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    db4c:	4a11      	ldr	r2, [pc, #68]	; (db94 <rtc_cb+0xa0>)
    db4e:	40ab      	lsls	r3, r5
    db50:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    db54:	4630      	mov	r0, r6
    db56:	f00d fdab 	bl	1b6b0 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    db5a:	4628      	mov	r0, r5
    db5c:	f00e fa50 	bl	1c000 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    db60:	4b0d      	ldr	r3, [pc, #52]	; (db98 <rtc_cb+0xa4>)
    db62:	4298      	cmp	r0, r3
    db64:	d008      	beq.n	db78 <rtc_cb+0x84>
    db66:	490d      	ldr	r1, [pc, #52]	; (db9c <rtc_cb+0xa8>)
    db68:	4805      	ldr	r0, [pc, #20]	; (db80 <rtc_cb+0x8c>)
    db6a:	2374      	movs	r3, #116	; 0x74
    db6c:	4a0c      	ldr	r2, [pc, #48]	; (dba0 <rtc_cb+0xac>)
    db6e:	f016 fa58 	bl	24022 <assert_print>
    db72:	2174      	movs	r1, #116	; 0x74
    db74:	480a      	ldr	r0, [pc, #40]	; (dba0 <rtc_cb+0xac>)
    db76:	e7d3      	b.n	db20 <rtc_cb+0x2c>
}
    db78:	bd70      	pop	{r4, r5, r6, pc}
    db7a:	bf00      	nop
    db7c:	0002b43b 	.word	0x0002b43b
    db80:	0002a669 	.word	0x0002a669
    db84:	0002b409 	.word	0x0002b409
    db88:	0002b482 	.word	0x0002b482
    db8c:	0002b446 	.word	0x0002b446
    db90:	4002a080 	.word	0x4002a080
    db94:	40017000 	.word	0x40017000
    db98:	0bad0000 	.word	0x0bad0000
    db9c:	0002b4bd 	.word	0x0002b4bd
    dba0:	0002b486 	.word	0x0002b486

0000dba4 <mbox_callback>:
{
    dba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    dba8:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    dbaa:	6883      	ldr	r3, [r0, #8]
    dbac:	691b      	ldr	r3, [r3, #16]
    dbae:	b94b      	cbnz	r3, dbc4 <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    dbb0:	4927      	ldr	r1, [pc, #156]	; (dc50 <mbox_callback+0xac>)
    dbb2:	4828      	ldr	r0, [pc, #160]	; (dc54 <mbox_callback+0xb0>)
    dbb4:	23ca      	movs	r3, #202	; 0xca
    dbb6:	4a28      	ldr	r2, [pc, #160]	; (dc58 <mbox_callback+0xb4>)
    dbb8:	f016 fa33 	bl	24022 <assert_print>
    dbbc:	21ca      	movs	r1, #202	; 0xca
    dbbe:	4826      	ldr	r0, [pc, #152]	; (dc58 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    dbc0:	f016 fa28 	bl	24014 <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    dbc4:	2200      	movs	r2, #0
    dbc6:	4798      	blx	r3
    dbc8:	4606      	mov	r6, r0
    dbca:	2800      	cmp	r0, #0
    dbcc:	d1f0      	bne.n	dbb0 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    dbce:	f3c4 2907 	ubfx	r9, r4, #8, #8
    dbd2:	4648      	mov	r0, r9
    dbd4:	f00d fb74 	bl	1b2c0 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    dbd8:	fa5f f884 	uxtb.w	r8, r4
    dbdc:	4633      	mov	r3, r6
    dbde:	4649      	mov	r1, r9
    dbe0:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    dbe2:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    dbe4:	4640      	mov	r0, r8
    dbe6:	f7ff fedd 	bl	d9a4 <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    dbea:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    dbee:	4648      	mov	r0, r9
    dbf0:	f00d fb32 	bl	1b258 <z_nrf_rtc_timer_compare_evt_address_get>
    dbf4:	2d0f      	cmp	r5, #15
    dbf6:	d90a      	bls.n	dc0e <mbox_callback+0x6a>
    dbf8:	4918      	ldr	r1, [pc, #96]	; (dc5c <mbox_callback+0xb8>)
    dbfa:	4816      	ldr	r0, [pc, #88]	; (dc54 <mbox_callback+0xb0>)
    dbfc:	f240 13e1 	movw	r3, #481	; 0x1e1
    dc00:	4a17      	ldr	r2, [pc, #92]	; (dc60 <mbox_callback+0xbc>)
    dc02:	f016 fa0e 	bl	24022 <assert_print>
    dc06:	f240 11e1 	movw	r1, #481	; 0x1e1
    dc0a:	4815      	ldr	r0, [pc, #84]	; (dc60 <mbox_callback+0xbc>)
    dc0c:	e7d8      	b.n	dbc0 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    dc0e:	4a15      	ldr	r2, [pc, #84]	; (dc64 <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    dc10:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    dc12:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    dc14:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    dc18:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    dc1a:	b950      	cbnz	r0, dc32 <mbox_callback+0x8e>
    dc1c:	4912      	ldr	r1, [pc, #72]	; (dc68 <mbox_callback+0xc4>)
    dc1e:	480d      	ldr	r0, [pc, #52]	; (dc54 <mbox_callback+0xb0>)
    dc20:	f44f 7312 	mov.w	r3, #584	; 0x248
    dc24:	4a11      	ldr	r2, [pc, #68]	; (dc6c <mbox_callback+0xc8>)
    dc26:	f016 f9fc 	bl	24022 <assert_print>
    dc2a:	f44f 7112 	mov.w	r1, #584	; 0x248
    dc2e:	480f      	ldr	r0, [pc, #60]	; (dc6c <mbox_callback+0xc8>)
    dc30:	e7c6      	b.n	dbc0 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    dc32:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    dc36:	4b0e      	ldr	r3, [pc, #56]	; (dc70 <mbox_callback+0xcc>)
    dc38:	f107 0232 	add.w	r2, r7, #50	; 0x32
    dc3c:	9300      	str	r3, [sp, #0]
    dc3e:	4648      	mov	r0, r9
    dc40:	4633      	mov	r3, r6
    dc42:	9401      	str	r4, [sp, #4]
    dc44:	0052      	lsls	r2, r2, #1
    dc46:	f00d fc25 	bl	1b494 <z_nrf_rtc_timer_set>
}
    dc4a:	b003      	add	sp, #12
    dc4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dc50:	0002b4d1 	.word	0x0002b4d1
    dc54:	0002a669 	.word	0x0002a669
    dc58:	0002b486 	.word	0x0002b486
    dc5c:	0002b43b 	.word	0x0002b43b
    dc60:	0002b409 	.word	0x0002b409
    dc64:	4002a080 	.word	0x4002a080
    dc68:	0002b482 	.word	0x0002b482
    dc6c:	0002b446 	.word	0x0002b446
    dc70:	0000daf5 	.word	0x0000daf5

0000dc74 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    dc74:	f019 bda1 	b.w	277ba <SystemInit>

0000dc78 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    dc78:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    dc7a:	aa01      	add	r2, sp, #4
    dc7c:	f019 fd84 	bl	27788 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    dc80:	4604      	mov	r4, r0
    dc82:	b168      	cbz	r0, dca0 <soc_secure_gpio_pin_mcu_select+0x28>
    dc84:	2316      	movs	r3, #22
    dc86:	4a0e      	ldr	r2, [pc, #56]	; (dcc0 <soc_secure_gpio_pin_mcu_select+0x48>)
    dc88:	490e      	ldr	r1, [pc, #56]	; (dcc4 <soc_secure_gpio_pin_mcu_select+0x4c>)
    dc8a:	480f      	ldr	r0, [pc, #60]	; (dcc8 <soc_secure_gpio_pin_mcu_select+0x50>)
    dc8c:	f016 f9c9 	bl	24022 <assert_print>
    dc90:	4621      	mov	r1, r4
    dc92:	480e      	ldr	r0, [pc, #56]	; (dccc <soc_secure_gpio_pin_mcu_select+0x54>)
    dc94:	f016 f9c5 	bl	24022 <assert_print>
    dc98:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    dc9a:	4809      	ldr	r0, [pc, #36]	; (dcc0 <soc_secure_gpio_pin_mcu_select+0x48>)
    dc9c:	f016 f9ba 	bl	24014 <assert_post_action>
    dca0:	9b01      	ldr	r3, [sp, #4]
    dca2:	b15b      	cbz	r3, dcbc <soc_secure_gpio_pin_mcu_select+0x44>
    dca4:	2317      	movs	r3, #23
    dca6:	4a06      	ldr	r2, [pc, #24]	; (dcc0 <soc_secure_gpio_pin_mcu_select+0x48>)
    dca8:	4909      	ldr	r1, [pc, #36]	; (dcd0 <soc_secure_gpio_pin_mcu_select+0x58>)
    dcaa:	4807      	ldr	r0, [pc, #28]	; (dcc8 <soc_secure_gpio_pin_mcu_select+0x50>)
    dcac:	f016 f9b9 	bl	24022 <assert_print>
    dcb0:	9901      	ldr	r1, [sp, #4]
    dcb2:	4808      	ldr	r0, [pc, #32]	; (dcd4 <soc_secure_gpio_pin_mcu_select+0x5c>)
    dcb4:	f016 f9b5 	bl	24022 <assert_print>
    dcb8:	2117      	movs	r1, #23
    dcba:	e7ee      	b.n	dc9a <soc_secure_gpio_pin_mcu_select+0x22>
}
    dcbc:	b002      	add	sp, #8
    dcbe:	bd10      	pop	{r4, pc}
    dcc0:	0002b4e3 	.word	0x0002b4e3
    dcc4:	0002b51d 	.word	0x0002b51d
    dcc8:	0002a669 	.word	0x0002a669
    dccc:	0002b53d 	.word	0x0002b53d
    dcd0:	0002b557 	.word	0x0002b557
    dcd4:	0002b563 	.word	0x0002b563

0000dcd8 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    dcd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    dcdc:	f8df a0fc 	ldr.w	sl, [pc, #252]	; dddc <z_log_init.isra.0+0x104>
    dce0:	4f3f      	ldr	r7, [pc, #252]	; (dde0 <z_log_init.isra.0+0x108>)
    dce2:	4681      	mov	r9, r0
    dce4:	ebaa 0307 	sub.w	r3, sl, r7

	if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    dce8:	2b9f      	cmp	r3, #159	; 0x9f
static uint32_t z_log_init(bool blocking, bool can_sleep)
    dcea:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    dcec:	d90b      	bls.n	dd06 <z_log_init.isra.0+0x2e>
    dcee:	493d      	ldr	r1, [pc, #244]	; (dde4 <z_log_init.isra.0+0x10c>)
    dcf0:	f240 1315 	movw	r3, #277	; 0x115
    dcf4:	4a3c      	ldr	r2, [pc, #240]	; (dde8 <z_log_init.isra.0+0x110>)
    dcf6:	483d      	ldr	r0, [pc, #244]	; (ddec <z_log_init.isra.0+0x114>)
    dcf8:	f016 f993 	bl	24022 <assert_print>
    dcfc:	f240 1115 	movw	r1, #277	; 0x115
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dd00:	4839      	ldr	r0, [pc, #228]	; (dde8 <z_log_init.isra.0+0x110>)
    dd02:	f016 f987 	bl	24014 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    dd06:	483a      	ldr	r0, [pc, #232]	; (ddf0 <z_log_init.isra.0+0x118>)
    dd08:	f016 f9f4 	bl	240f4 <atomic_inc>
    dd0c:	4606      	mov	r6, r0
    dd0e:	2800      	cmp	r0, #0
    dd10:	d134      	bne.n	dd7c <z_log_init.isra.0+0xa4>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dd12:	463c      	mov	r4, r7
	uint32_t mask = 0;
    dd14:	4605      	mov	r5, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    dd16:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dd1a:	4554      	cmp	r4, sl
    dd1c:	d927      	bls.n	dd6e <z_log_init.isra.0+0x96>
    dd1e:	4935      	ldr	r1, [pc, #212]	; (ddf4 <z_log_init.isra.0+0x11c>)
    dd20:	f44f 7391 	mov.w	r3, #290	; 0x122
    dd24:	4a30      	ldr	r2, [pc, #192]	; (dde8 <z_log_init.isra.0+0x110>)
    dd26:	4831      	ldr	r0, [pc, #196]	; (ddec <z_log_init.isra.0+0x114>)
    dd28:	f016 f97b 	bl	24022 <assert_print>
    dd2c:	4832      	ldr	r0, [pc, #200]	; (ddf8 <z_log_init.isra.0+0x120>)
    dd2e:	f016 f978 	bl	24022 <assert_print>
    dd32:	f44f 7191 	mov.w	r1, #290	; 0x122
    dd36:	e7e3      	b.n	dd00 <z_log_init.isra.0+0x28>
		if (backend->autostart) {
    dd38:	7b23      	ldrb	r3, [r4, #12]
    dd3a:	b173      	cbz	r3, dd5a <z_log_init.isra.0+0x82>
	if (backend->api->init) {
    dd3c:	6823      	ldr	r3, [r4, #0]
    dd3e:	68db      	ldr	r3, [r3, #12]
    dd40:	b10b      	cbz	r3, dd46 <z_log_init.isra.0+0x6e>
		backend->api->init(backend);
    dd42:	4620      	mov	r0, r4
    dd44:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    dd46:	6823      	ldr	r3, [r4, #0]
    dd48:	691b      	ldr	r3, [r3, #16]
    dd4a:	b943      	cbnz	r3, dd5e <z_log_init.isra.0+0x86>
				log_backend_enable(backend,
    dd4c:	6863      	ldr	r3, [r4, #4]
    dd4e:	2204      	movs	r2, #4
    dd50:	4620      	mov	r0, r4
    dd52:	6819      	ldr	r1, [r3, #0]
    dd54:	f000 f904 	bl	df60 <log_backend_enable>
			}

			i++;
    dd58:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dd5a:	3410      	adds	r4, #16
    dd5c:	e7dd      	b.n	dd1a <z_log_init.isra.0+0x42>
		return backend->api->is_ready(backend);
    dd5e:	4620      	mov	r0, r4
    dd60:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    dd62:	2800      	cmp	r0, #0
    dd64:	d0f2      	beq.n	dd4c <z_log_init.isra.0+0x74>
				mask |= BIT(i);
    dd66:	fa0b f306 	lsl.w	r3, fp, r6
    dd6a:	431d      	orrs	r5, r3
    dd6c:	e7f4      	b.n	dd58 <z_log_init.isra.0+0x80>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dd6e:	d3e3      	bcc.n	dd38 <z_log_init.isra.0+0x60>
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    dd70:	f1b9 0f00 	cmp.w	r9, #0
    dd74:	d002      	beq.n	dd7c <z_log_init.isra.0+0xa4>
		mask_cpy &= ~BIT(i);
    dd76:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    dd7a:	b90d      	cbnz	r5, dd80 <z_log_init.isra.0+0xa8>
			}
		}
	}

	return mask;
}
    dd7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd80:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    dd82:	fa95 f4a5 	rbit	r4, r5
    dd86:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    dd8a:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    dd8e:	0126      	lsls	r6, r4, #4
    dd90:	eb07 1404 	add.w	r4, r7, r4, lsl #4
		mask_cpy &= ~BIT(i);
    dd94:	ea6f 0b03 	mvn.w	fp, r3
    dd98:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    dd9c:	7b23      	ldrb	r3, [r4, #12]
    dd9e:	b15b      	cbz	r3, ddb8 <z_log_init.isra.0+0xe0>
	if (backend->api->is_ready != NULL) {
    dda0:	59bb      	ldr	r3, [r7, r6]
    dda2:	691b      	ldr	r3, [r3, #16]
    dda4:	b9a3      	cbnz	r3, ddd0 <z_log_init.isra.0+0xf8>
					   backend->cb->ctx,
    dda6:	443e      	add	r6, r7
			log_backend_enable(backend,
    dda8:	6873      	ldr	r3, [r6, #4]
    ddaa:	2204      	movs	r2, #4
    ddac:	4620      	mov	r0, r4
    ddae:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    ddb0:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    ddb4:	f000 f8d4 	bl	df60 <log_backend_enable>
	while (mask_cpy) {
    ddb8:	2d00      	cmp	r5, #0
    ddba:	d1e2      	bne.n	dd82 <z_log_init.isra.0+0xaa>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    ddbc:	f1b8 0f00 	cmp.w	r8, #0
    ddc0:	d004      	beq.n	ddcc <z_log_init.isra.0+0xf4>
	return z_impl_k_sleep(timeout);
    ddc2:	f44f 70a4 	mov.w	r0, #328	; 0x148
    ddc6:	2100      	movs	r1, #0
    ddc8:	f013 f8bc 	bl	20f44 <z_impl_k_sleep>
    ddcc:	464d      	mov	r5, r9
    ddce:	e7d4      	b.n	dd7a <z_log_init.isra.0+0xa2>
		return backend->api->is_ready(backend);
    ddd0:	4620      	mov	r0, r4
    ddd2:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    ddd4:	2800      	cmp	r0, #0
    ddd6:	d1ef      	bne.n	ddb8 <z_log_init.isra.0+0xe0>
    ddd8:	e7e5      	b.n	dda6 <z_log_init.isra.0+0xce>
    ddda:	bf00      	nop
    dddc:	000297cc 	.word	0x000297cc
    dde0:	000297bc 	.word	0x000297bc
    dde4:	0002b5aa 	.word	0x0002b5aa
    dde8:	0002b57d 	.word	0x0002b57d
    ddec:	0002a669 	.word	0x0002a669
    ddf0:	20020e84 	.word	0x20020e84
    ddf4:	0002b5ce 	.word	0x0002b5ce
    ddf8:	0002b5ef 	.word	0x0002b5ef

0000ddfc <log_format_func_t_get>:
}
    ddfc:	4b01      	ldr	r3, [pc, #4]	; (de04 <log_format_func_t_get+0x8>)
    ddfe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    de02:	4770      	bx	lr
    de04:	00029c94 	.word	0x00029c94

0000de08 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    de08:	b508      	push	{r3, lr}
    de0a:	4603      	mov	r3, r0
    de0c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    de0e:	b12b      	cbz	r3, de1c <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    de10:	4a04      	ldr	r2, [pc, #16]	; (de24 <log_set_timestamp_func+0x1c>)
    de12:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    de14:	f000 faec 	bl	e3f0 <log_output_timestamp_freq_set>
	}

	return 0;
    de18:	2000      	movs	r0, #0
}
    de1a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    de1c:	f06f 0015 	mvn.w	r0, #21
    de20:	e7fb      	b.n	de1a <log_set_timestamp_func+0x12>
    de22:	bf00      	nop
    de24:	20008400 	.word	0x20008400

0000de28 <log_core_init>:
	panic_mode = false;
    de28:	2300      	movs	r3, #0
    de2a:	4a04      	ldr	r2, [pc, #16]	; (de3c <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    de2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    de30:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    de32:	4a03      	ldr	r2, [pc, #12]	; (de40 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    de34:	4803      	ldr	r0, [pc, #12]	; (de44 <log_core_init+0x1c>)
	dropped_cnt = 0;
    de36:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    de38:	f7ff bfe6 	b.w	de08 <log_set_timestamp_func>
    de3c:	20021c9e 	.word	0x20021c9e
    de40:	20020e7c 	.word	0x20020e7c
    de44:	000240f1 	.word	0x000240f1

0000de48 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    de48:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    de4a:	4d13      	ldr	r5, [pc, #76]	; (de98 <z_impl_log_panic+0x50>)
    de4c:	7829      	ldrb	r1, [r5, #0]
    de4e:	bb09      	cbnz	r1, de94 <z_impl_log_panic+0x4c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    de50:	2001      	movs	r0, #1
    de52:	f7ff ff41 	bl	dcd8 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    de56:	4c11      	ldr	r4, [pc, #68]	; (de9c <z_impl_log_panic+0x54>)
    de58:	4e11      	ldr	r6, [pc, #68]	; (dea0 <z_impl_log_panic+0x58>)
    de5a:	42b4      	cmp	r4, r6
    de5c:	d917      	bls.n	de8e <z_impl_log_panic+0x46>
    de5e:	4911      	ldr	r1, [pc, #68]	; (dea4 <z_impl_log_panic+0x5c>)
    de60:	f44f 73c2 	mov.w	r3, #388	; 0x184
    de64:	4a10      	ldr	r2, [pc, #64]	; (dea8 <z_impl_log_panic+0x60>)
    de66:	4811      	ldr	r0, [pc, #68]	; (deac <z_impl_log_panic+0x64>)
    de68:	f016 f8db 	bl	24022 <assert_print>
    de6c:	4810      	ldr	r0, [pc, #64]	; (deb0 <z_impl_log_panic+0x68>)
    de6e:	f016 f8d8 	bl	24022 <assert_print>
    de72:	f44f 71c2 	mov.w	r1, #388	; 0x184
    de76:	480c      	ldr	r0, [pc, #48]	; (dea8 <z_impl_log_panic+0x60>)
    de78:	f016 f8cc 	bl	24014 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    de7c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    de7e:	795b      	ldrb	r3, [r3, #5]
    de80:	b11b      	cbz	r3, de8a <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    de82:	6823      	ldr	r3, [r4, #0]
    de84:	4620      	mov	r0, r4
    de86:	689b      	ldr	r3, [r3, #8]
    de88:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    de8a:	3410      	adds	r4, #16
    de8c:	e7e5      	b.n	de5a <z_impl_log_panic+0x12>
    de8e:	d3f5      	bcc.n	de7c <z_impl_log_panic+0x34>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    de90:	2301      	movs	r3, #1
    de92:	702b      	strb	r3, [r5, #0]
}
    de94:	bd70      	pop	{r4, r5, r6, pc}
    de96:	bf00      	nop
    de98:	20021c9e 	.word	0x20021c9e
    de9c:	000297bc 	.word	0x000297bc
    dea0:	000297cc 	.word	0x000297cc
    dea4:	0002b5ce 	.word	0x0002b5ce
    dea8:	0002b57d 	.word	0x0002b57d
    deac:	0002a669 	.word	0x0002a669
    deb0:	0002b5ef 	.word	0x0002b5ef

0000deb4 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    deb4:	b510      	push	{r4, lr}
    deb6:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    deb8:	4806      	ldr	r0, [pc, #24]	; (ded4 <z_log_dropped+0x20>)
    deba:	f016 f91b 	bl	240f4 <atomic_inc>
	if (buffered) {
    debe:	b13c      	cbz	r4, ded0 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    dec0:	4b05      	ldr	r3, [pc, #20]	; (ded8 <z_log_dropped+0x24>)
    dec2:	e8d3 1fef 	ldaex	r1, [r3]
    dec6:	3901      	subs	r1, #1
    dec8:	e8c3 1fe2 	stlex	r2, r1, [r3]
    decc:	2a00      	cmp	r2, #0
    dece:	d1f8      	bne.n	dec2 <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    ded0:	bd10      	pop	{r4, pc}
    ded2:	bf00      	nop
    ded4:	20020e7c 	.word	0x20020e7c
    ded8:	20020e80 	.word	0x20020e80

0000dedc <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    dedc:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    dede:	4b12      	ldr	r3, [pc, #72]	; (df28 <z_log_msg_commit+0x4c>)
{
    dee0:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    dee2:	681b      	ldr	r3, [r3, #0]
    dee4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    dee6:	4c11      	ldr	r4, [pc, #68]	; (df2c <z_log_msg_commit+0x50>)
    dee8:	4e11      	ldr	r6, [pc, #68]	; (df30 <z_log_msg_commit+0x54>)
	msg->hdr.timestamp = timestamp_func();
    deea:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    deec:	42b4      	cmp	r4, r6
    deee:	d918      	bls.n	df22 <z_log_msg_commit+0x46>
    def0:	4910      	ldr	r1, [pc, #64]	; (df34 <z_log_msg_commit+0x58>)
    def2:	f240 13c1 	movw	r3, #449	; 0x1c1
    def6:	4a10      	ldr	r2, [pc, #64]	; (df38 <z_log_msg_commit+0x5c>)
    def8:	4810      	ldr	r0, [pc, #64]	; (df3c <z_log_msg_commit+0x60>)
    defa:	f016 f892 	bl	24022 <assert_print>
    defe:	4810      	ldr	r0, [pc, #64]	; (df40 <z_log_msg_commit+0x64>)
    df00:	f016 f88f 	bl	24022 <assert_print>
    df04:	f240 11c1 	movw	r1, #449	; 0x1c1
    df08:	480b      	ldr	r0, [pc, #44]	; (df38 <z_log_msg_commit+0x5c>)
    df0a:	f016 f883 	bl	24014 <assert_post_action>
	return backend->cb->active;
    df0e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    df10:	795b      	ldrb	r3, [r3, #5]
    df12:	b123      	cbz	r3, df1e <z_log_msg_commit+0x42>
	backend->api->process(backend, msg);
    df14:	6823      	ldr	r3, [r4, #0]
    df16:	4629      	mov	r1, r5
    df18:	4620      	mov	r0, r4
    df1a:	681b      	ldr	r3, [r3, #0]
    df1c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    df1e:	3410      	adds	r4, #16
    df20:	e7e4      	b.n	deec <z_log_msg_commit+0x10>
    df22:	d3f4      	bcc.n	df0e <z_log_msg_commit+0x32>
	msg_commit(&log_buffer, msg);
}
    df24:	bd70      	pop	{r4, r5, r6, pc}
    df26:	bf00      	nop
    df28:	20008400 	.word	0x20008400
    df2c:	000297bc 	.word	0x000297bc
    df30:	000297cc 	.word	0x000297cc
    df34:	0002b5ce 	.word	0x0002b5ce
    df38:	0002b57d 	.word	0x0002b57d
    df3c:	0002a669 	.word	0x0002a669
    df40:	0002b5ef 	.word	0x0002b5ef

0000df44 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    df44:	4a04      	ldr	r2, [pc, #16]	; (df58 <log_source_name_get+0x14>)
    df46:	4b05      	ldr	r3, [pc, #20]	; (df5c <log_source_name_get+0x18>)
    df48:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    df4a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    df4e:	bf34      	ite	cc
    df50:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    df54:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    df56:	4770      	bx	lr
    df58:	00029664 	.word	0x00029664
    df5c:	000297bc 	.word	0x000297bc

0000df60 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    df60:	4b0e      	ldr	r3, [pc, #56]	; (df9c <log_backend_enable+0x3c>)
{
    df62:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    df64:	1ac3      	subs	r3, r0, r3
    df66:	111b      	asrs	r3, r3, #4
    df68:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    df6a:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    df6c:	b948      	cbnz	r0, df82 <log_backend_enable+0x22>
    df6e:	490c      	ldr	r1, [pc, #48]	; (dfa0 <log_backend_enable+0x40>)
    df70:	480c      	ldr	r0, [pc, #48]	; (dfa4 <log_backend_enable+0x44>)
    df72:	23de      	movs	r3, #222	; 0xde
    df74:	4a0c      	ldr	r2, [pc, #48]	; (dfa8 <log_backend_enable+0x48>)
    df76:	f016 f854 	bl	24022 <assert_print>
    df7a:	21de      	movs	r1, #222	; 0xde
    df7c:	480a      	ldr	r0, [pc, #40]	; (dfa8 <log_backend_enable+0x48>)
    df7e:	f016 f849 	bl	24014 <assert_post_action>
	backend->cb->id = id;
    df82:	6844      	ldr	r4, [r0, #4]
    df84:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    df86:	6843      	ldr	r3, [r0, #4]
    df88:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    df8a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    df8c:	6843      	ldr	r3, [r0, #4]
    df8e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    df90:	6843      	ldr	r3, [r0, #4]
    df92:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    df94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    df98:	f016 b8bc 	b.w	24114 <z_log_notify_backend_enabled>
    df9c:	000297bc 	.word	0x000297bc
    dfa0:	0002b692 	.word	0x0002b692
    dfa4:	0002a669 	.word	0x0002a669
    dfa8:	0002b65a 	.word	0x0002b65a

0000dfac <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfb0:	b085      	sub	sp, #20
    dfb2:	af02      	add	r7, sp, #8
    dfb4:	4604      	mov	r4, r0
    dfb6:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    dfba:	460e      	mov	r6, r1
    dfbc:	4693      	mov	fp, r2
    dfbe:	4698      	mov	r8, r3
    dfc0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    dfc2:	f1ba 0f00 	cmp.w	sl, #0
    dfc6:	d015      	beq.n	dff4 <z_impl_z_log_msg_runtime_vcreate+0x48>
		va_list ap2;

		va_copy(ap2, ap);
    dfc8:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    dfcc:	f8cd 9000 	str.w	r9, [sp]
    dfd0:	2110      	movs	r1, #16
    dfd2:	4653      	mov	r3, sl
    dfd4:	2000      	movs	r0, #0
    dfd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    dfd8:	f7fe fa50 	bl	c47c <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    dfdc:	1e01      	subs	r1, r0, #0
    dfde:	da0a      	bge.n	dff6 <z_impl_z_log_msg_runtime_vcreate+0x4a>
    dfe0:	491f      	ldr	r1, [pc, #124]	; (e060 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    dfe2:	2368      	movs	r3, #104	; 0x68
    dfe4:	4a1f      	ldr	r2, [pc, #124]	; (e064 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    dfe6:	4820      	ldr	r0, [pc, #128]	; (e068 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    dfe8:	f016 f81b 	bl	24022 <assert_print>
    dfec:	2168      	movs	r1, #104	; 0x68
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
    dfee:	481d      	ldr	r0, [pc, #116]	; (e064 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    dff0:	f016 f810 	bl	24014 <assert_post_action>
		plen = 0;
    dff4:	4651      	mov	r1, sl
	struct log_msg_desc desc =
    dff6:	4a1d      	ldr	r2, [pc, #116]	; (e06c <z_impl_z_log_msg_runtime_vcreate+0xc0>)
    dff8:	f004 0407 	and.w	r4, r4, #7
    dffc:	f00b 0b07 	and.w	fp, fp, #7
    e000:	00e4      	lsls	r4, r4, #3
    e002:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    e006:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    e00a:	4314      	orrs	r4, r2
    e00c:	4a18      	ldr	r2, [pc, #96]	; (e070 <z_impl_z_log_msg_runtime_vcreate+0xc4>)
    e00e:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    e012:	3517      	adds	r5, #23
    e014:	440d      	add	r5, r1
		msg = alloca(msg_wlen * sizeof(int));
    e016:	f025 0507 	bic.w	r5, r5, #7
    e01a:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    e01e:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    e020:	ad02      	add	r5, sp, #8
	if (pkg && fmt) {
    e022:	f1ba 0f00 	cmp.w	sl, #0
    e026:	d011      	beq.n	e04c <z_impl_z_log_msg_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    e028:	f8cd 9000 	str.w	r9, [sp]
    e02c:	4653      	mov	r3, sl
    e02e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e030:	f105 0010 	add.w	r0, r5, #16
    e034:	f7fe fa22 	bl	c47c <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    e038:	2800      	cmp	r0, #0
    e03a:	da07      	bge.n	e04c <z_impl_z_log_msg_runtime_vcreate+0xa0>
    e03c:	4908      	ldr	r1, [pc, #32]	; (e060 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    e03e:	2382      	movs	r3, #130	; 0x82
    e040:	4a08      	ldr	r2, [pc, #32]	; (e064 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    e042:	4809      	ldr	r0, [pc, #36]	; (e068 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    e044:	f015 ffed 	bl	24022 <assert_print>
    e048:	2182      	movs	r1, #130	; 0x82
    e04a:	e7d0      	b.n	dfee <z_impl_z_log_msg_runtime_vcreate+0x42>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    e04c:	4643      	mov	r3, r8
    e04e:	4622      	mov	r2, r4
    e050:	4631      	mov	r1, r6
    e052:	4628      	mov	r0, r5
    e054:	f016 f861 	bl	2411a <z_log_msg_finalize>
	}
}
    e058:	370c      	adds	r7, #12
    e05a:	46bd      	mov	sp, r7
    e05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e060:	0002b6de 	.word	0x0002b6de
    e064:	0002b6b2 	.word	0x0002b6b2
    e068:	0002a669 	.word	0x0002a669
    e06c:	0007fe00 	.word	0x0007fe00
    e070:	7ff80000 	.word	0x7ff80000

0000e074 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    e074:	b40e      	push	{r1, r2, r3}
    e076:	b503      	push	{r0, r1, lr}
    e078:	ab03      	add	r3, sp, #12
    e07a:	f853 2b04 	ldr.w	r2, [r3], #4
    e07e:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e080:	4804      	ldr	r0, [pc, #16]	; (e094 <print_formatted+0x20>)
	va_start(args, fmt);
    e082:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e084:	f016 f88c 	bl	241a0 <cbvprintf>
	va_end(args);

	return length;
}
    e088:	b002      	add	sp, #8
    e08a:	f85d eb04 	ldr.w	lr, [sp], #4
    e08e:	b003      	add	sp, #12
    e090:	4770      	bx	lr
    e092:	bf00      	nop
    e094:	0002414f 	.word	0x0002414f

0000e098 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e098:	06ca      	lsls	r2, r1, #27
    e09a:	d405      	bmi.n	e0a8 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e09c:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    e09e:	bf4c      	ite	mi
    e0a0:	4902      	ldrmi	r1, [pc, #8]	; (e0ac <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    e0a2:	4903      	ldrpl	r1, [pc, #12]	; (e0b0 <newline_print+0x18>)
    e0a4:	f7ff bfe6 	b.w	e074 <print_formatted>
	}
}
    e0a8:	4770      	bx	lr
    e0aa:	bf00      	nop
    e0ac:	0002df2d 	.word	0x0002df2d
    e0b0:	0002acad 	.word	0x0002acad

0000e0b4 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    e0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0b8:	b089      	sub	sp, #36	; 0x24
    e0ba:	469a      	mov	sl, r3
    e0bc:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    e0c0:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    e0c4:	9305      	str	r3, [sp, #20]
    e0c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e0c8:	4604      	mov	r4, r0
    e0ca:	460d      	mov	r5, r1
    e0cc:	9e16      	ldr	r6, [sp, #88]	; 0x58
    e0ce:	9206      	str	r2, [sp, #24]
    e0d0:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    e0d2:	f1bb 0f00 	cmp.w	fp, #0
    e0d6:	f000 8085 	beq.w	e1e4 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    e0da:	f006 0308 	and.w	r3, r6, #8
    e0de:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    e0e0:	f016 f819 	bl	24116 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    e0e4:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    e0e8:	4602      	mov	r2, r0
    e0ea:	2800      	cmp	r0, #0
    e0ec:	d049      	beq.n	e182 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    e0ee:	4620      	mov	r0, r4
    e0f0:	498c      	ldr	r1, [pc, #560]	; (e324 <log_output_process+0x270>)
    e0f2:	f7ff ffbf 	bl	e074 <print_formatted>
    e0f6:	4680      	mov	r8, r0
	if (stamp) {
    e0f8:	f1b9 0f00 	cmp.w	r9, #0
    e0fc:	d008      	beq.n	e110 <log_output_process+0x5c>
	if (!format) {
    e0fe:	f016 0f44 	tst.w	r6, #68	; 0x44
    e102:	d140      	bne.n	e186 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    e104:	462a      	mov	r2, r5
    e106:	4620      	mov	r0, r4
    e108:	4987      	ldr	r1, [pc, #540]	; (e328 <log_output_process+0x274>)
    e10a:	f7ff ffb3 	bl	e074 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    e10e:	4480      	add	r8, r0
	if (color) {
    e110:	f006 0301 	and.w	r3, r6, #1
    e114:	b153      	cbz	r3, e12c <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    e116:	4b85      	ldr	r3, [pc, #532]	; (e32c <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    e118:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    e11a:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    e11e:	4b84      	ldr	r3, [pc, #528]	; (e330 <log_output_process+0x27c>)
    e120:	4984      	ldr	r1, [pc, #528]	; (e334 <log_output_process+0x280>)
    e122:	2a00      	cmp	r2, #0
    e124:	bf08      	it	eq
    e126:	461a      	moveq	r2, r3
    e128:	f7ff ffa4 	bl	e074 <print_formatted>
	if (level_on) {
    e12c:	f006 0308 	and.w	r3, r6, #8
    e130:	2b00      	cmp	r3, #0
    e132:	d054      	beq.n	e1de <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    e134:	4b80      	ldr	r3, [pc, #512]	; (e338 <log_output_process+0x284>)
    e136:	4620      	mov	r0, r4
    e138:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    e13c:	497f      	ldr	r1, [pc, #508]	; (e33c <log_output_process+0x288>)
    e13e:	f7ff ff99 	bl	e074 <print_formatted>
    e142:	4605      	mov	r5, r0
	if (domain) {
    e144:	9b06      	ldr	r3, [sp, #24]
    e146:	b12b      	cbz	r3, e154 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    e148:	461a      	mov	r2, r3
    e14a:	4620      	mov	r0, r4
    e14c:	497c      	ldr	r1, [pc, #496]	; (e340 <log_output_process+0x28c>)
    e14e:	f7ff ff91 	bl	e074 <print_formatted>
    e152:	4405      	add	r5, r0
	if (source) {
    e154:	f1ba 0f00 	cmp.w	sl, #0
    e158:	d005      	beq.n	e166 <log_output_process+0xb2>
		total += print_formatted(output,
    e15a:	4652      	mov	r2, sl
    e15c:	4620      	mov	r0, r4
    e15e:	4979      	ldr	r1, [pc, #484]	; (e344 <log_output_process+0x290>)
    e160:	f7ff ff88 	bl	e074 <print_formatted>
    e164:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    e166:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    e168:	2f00      	cmp	r7, #0
    e16a:	d149      	bne.n	e200 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    e16c:	9b04      	ldr	r3, [sp, #16]
    e16e:	2b00      	cmp	r3, #0
    e170:	d160      	bne.n	e234 <log_output_process+0x180>
	if (color) {
    e172:	07f3      	lsls	r3, r6, #31
    e174:	f100 80cf 	bmi.w	e316 <log_output_process+0x262>
	newline_print(output, flags);
    e178:	4631      	mov	r1, r6
    e17a:	4620      	mov	r0, r4
    e17c:	f7ff ff8c 	bl	e098 <newline_print>
}
    e180:	e0c3      	b.n	e30a <log_output_process+0x256>
	uint32_t length = 0U;
    e182:	4680      	mov	r8, r0
    e184:	e7b8      	b.n	e0f8 <log_output_process+0x44>
	} else if (freq != 0U) {
    e186:	4b70      	ldr	r3, [pc, #448]	; (e348 <log_output_process+0x294>)
    e188:	6818      	ldr	r0, [r3, #0]
    e18a:	2800      	cmp	r0, #0
    e18c:	d0bf      	beq.n	e10e <log_output_process+0x5a>
		timestamp /= timestamp_div;
    e18e:	4b6f      	ldr	r3, [pc, #444]	; (e34c <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    e190:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    e194:	681b      	ldr	r3, [r3, #0]
    e196:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    e19a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    e19e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    e1a2:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    e1a6:	fb09 f505 	mul.w	r5, r9, r5
    e1aa:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e1ae:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    e1b2:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    e1b6:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e1ba:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    e1be:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e1c2:	fb09 f505 	mul.w	r5, r9, r5
    e1c6:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    e1ca:	fb0c 1113 	mls	r1, ip, r3, r1
    e1ce:	4620      	mov	r0, r4
    e1d0:	9100      	str	r1, [sp, #0]
    e1d2:	e9cd e501 	strd	lr, r5, [sp, #4]
    e1d6:	495e      	ldr	r1, [pc, #376]	; (e350 <log_output_process+0x29c>)
    e1d8:	f7ff ff4c 	bl	e074 <print_formatted>
    e1dc:	e797      	b.n	e10e <log_output_process+0x5a>
	int total = 0;
    e1de:	f006 0508 	and.w	r5, r6, #8
    e1e2:	e7af      	b.n	e144 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e1e4:	f1ba 0f01 	cmp.w	sl, #1
    e1e8:	d106      	bne.n	e1f8 <log_output_process+0x144>
	if (package) {
    e1ea:	b9ef      	cbnz	r7, e228 <log_output_process+0x174>
	if (data_len) {
    e1ec:	9b04      	ldr	r3, [sp, #16]
    e1ee:	2b00      	cmp	r3, #0
    e1f0:	f000 808b 	beq.w	e30a <log_output_process+0x256>
		prefix_offset = 0;
    e1f4:	2500      	movs	r5, #0
    e1f6:	e01d      	b.n	e234 <log_output_process+0x180>
	if (package) {
    e1f8:	2f00      	cmp	r7, #0
    e1fa:	d0f7      	beq.n	e1ec <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e1fc:	4855      	ldr	r0, [pc, #340]	; (e354 <log_output_process+0x2a0>)
    e1fe:	e014      	b.n	e22a <log_output_process+0x176>
		cb = out_func;
    e200:	4855      	ldr	r0, [pc, #340]	; (e358 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    e202:	463b      	mov	r3, r7
    e204:	4622      	mov	r2, r4
    e206:	4955      	ldr	r1, [pc, #340]	; (e35c <log_output_process+0x2a8>)
    e208:	f015 fd03 	bl	23c12 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    e20c:	2800      	cmp	r0, #0
    e20e:	da0e      	bge.n	e22e <log_output_process+0x17a>
    e210:	4953      	ldr	r1, [pc, #332]	; (e360 <log_output_process+0x2ac>)
    e212:	4854      	ldr	r0, [pc, #336]	; (e364 <log_output_process+0x2b0>)
    e214:	f44f 7300 	mov.w	r3, #512	; 0x200
    e218:	4a53      	ldr	r2, [pc, #332]	; (e368 <log_output_process+0x2b4>)
    e21a:	f015 ff02 	bl	24022 <assert_print>
    e21e:	f44f 7100 	mov.w	r1, #512	; 0x200
    e222:	4851      	ldr	r0, [pc, #324]	; (e368 <log_output_process+0x2b4>)
    e224:	f015 fef6 	bl	24014 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    e228:	484b      	ldr	r0, [pc, #300]	; (e358 <log_output_process+0x2a4>)
		prefix_offset = 0;
    e22a:	465d      	mov	r5, fp
    e22c:	e7e9      	b.n	e202 <log_output_process+0x14e>
	if (data_len) {
    e22e:	9b04      	ldr	r3, [sp, #16]
    e230:	2b00      	cmp	r3, #0
    e232:	d066      	beq.n	e302 <log_output_process+0x24e>
		print_formatted(output, " ");
    e234:	f8df 8134 	ldr.w	r8, [pc, #308]	; e36c <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    e238:	f8df 9134 	ldr.w	r9, [pc, #308]	; e370 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e23c:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    e23e:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e240:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    e242:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e244:	bf28      	it	cs
    e246:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    e248:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    e24c:	f7ff ff24 	bl	e098 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    e250:	4555      	cmp	r5, sl
    e252:	dc43      	bgt.n	e2dc <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    e254:	9b05      	ldr	r3, [sp, #20]
    e256:	4649      	mov	r1, r9
    e258:	4620      	mov	r0, r4
    e25a:	781a      	ldrb	r2, [r3, #0]
    e25c:	f7ff ff0a 	bl	e074 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e260:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    e264:	f01a 0f07 	tst.w	sl, #7
    e268:	d103      	bne.n	e272 <log_output_process+0x1be>
			print_formatted(output, " ");
    e26a:	4641      	mov	r1, r8
    e26c:	4620      	mov	r0, r4
    e26e:	f7ff ff01 	bl	e074 <print_formatted>
		if (i < length) {
    e272:	4557      	cmp	r7, sl
    e274:	d939      	bls.n	e2ea <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    e276:	9b05      	ldr	r3, [sp, #20]
    e278:	4649      	mov	r1, r9
    e27a:	4620      	mov	r0, r4
    e27c:	f813 200a 	ldrb.w	r2, [r3, sl]
    e280:	f7ff fef8 	bl	e074 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e284:	f10a 0a01 	add.w	sl, sl, #1
    e288:	f1ba 0f10 	cmp.w	sl, #16
    e28c:	d1ea      	bne.n	e264 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e28e:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    e292:	4620      	mov	r0, r4
    e294:	4937      	ldr	r1, [pc, #220]	; (e374 <log_output_process+0x2c0>)
    e296:	f7ff feed 	bl	e074 <print_formatted>
		if (i < length) {
    e29a:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    e29c:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    e29e:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    e2a0:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    e2a2:	4b35      	ldr	r3, [pc, #212]	; (e378 <log_output_process+0x2c4>)
    e2a4:	5c99      	ldrb	r1, [r3, r2]
    e2a6:	f011 0f97 	tst.w	r1, #151	; 0x97
    e2aa:	bf08      	it	eq
    e2ac:	222e      	moveq	r2, #46	; 0x2e
    e2ae:	4933      	ldr	r1, [pc, #204]	; (e37c <log_output_process+0x2c8>)
    e2b0:	f7ff fee0 	bl	e074 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e2b4:	f10a 0a01 	add.w	sl, sl, #1
    e2b8:	f1ba 0f10 	cmp.w	sl, #16
    e2bc:	d01a      	beq.n	e2f4 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    e2be:	f01a 0f07 	tst.w	sl, #7
    e2c2:	d103      	bne.n	e2cc <log_output_process+0x218>
			print_formatted(output, " ");
    e2c4:	4641      	mov	r1, r8
    e2c6:	4620      	mov	r0, r4
    e2c8:	f7ff fed4 	bl	e074 <print_formatted>
		if (i < length) {
    e2cc:	4557      	cmp	r7, sl
    e2ce:	4652      	mov	r2, sl
    e2d0:	d8e4      	bhi.n	e29c <log_output_process+0x1e8>
			print_formatted(output, " ");
    e2d2:	4641      	mov	r1, r8
    e2d4:	4620      	mov	r0, r4
    e2d6:	f7ff fecd 	bl	e074 <print_formatted>
    e2da:	e7eb      	b.n	e2b4 <log_output_process+0x200>
		print_formatted(output, " ");
    e2dc:	4641      	mov	r1, r8
    e2de:	4620      	mov	r0, r4
    e2e0:	f7ff fec8 	bl	e074 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    e2e4:	f10a 0a01 	add.w	sl, sl, #1
    e2e8:	e7b2      	b.n	e250 <log_output_process+0x19c>
			print_formatted(output, "   ");
    e2ea:	4620      	mov	r0, r4
    e2ec:	4924      	ldr	r1, [pc, #144]	; (e380 <log_output_process+0x2cc>)
    e2ee:	f7ff fec1 	bl	e074 <print_formatted>
    e2f2:	e7c7      	b.n	e284 <log_output_process+0x1d0>
		data += length;
    e2f4:	9b05      	ldr	r3, [sp, #20]
    e2f6:	443b      	add	r3, r7
    e2f8:	9305      	str	r3, [sp, #20]
	} while (len);
    e2fa:	9b04      	ldr	r3, [sp, #16]
    e2fc:	1bdb      	subs	r3, r3, r7
    e2fe:	9304      	str	r3, [sp, #16]
    e300:	d19c      	bne.n	e23c <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    e302:	f1bb 0f00 	cmp.w	fp, #0
    e306:	f47f af34 	bne.w	e172 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    e30a:	4620      	mov	r0, r4
}
    e30c:	b009      	add	sp, #36	; 0x24
    e30e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    e312:	f015 bf4c 	b.w	241ae <log_output_flush>
		print_formatted(output, "%s", log_color);
    e316:	4620      	mov	r0, r4
    e318:	4a05      	ldr	r2, [pc, #20]	; (e330 <log_output_process+0x27c>)
    e31a:	4906      	ldr	r1, [pc, #24]	; (e334 <log_output_process+0x280>)
    e31c:	f7ff feaa 	bl	e074 <print_formatted>
}
    e320:	e72a      	b.n	e178 <log_output_process+0xc4>
    e322:	bf00      	nop
    e324:	0002b6ed 	.word	0x0002b6ed
    e328:	0002b6f1 	.word	0x0002b6f1
    e32c:	00029ca4 	.word	0x00029ca4
    e330:	0002b6e8 	.word	0x0002b6e8
    e334:	0002a81c 	.word	0x0002a81c
    e338:	00029cb8 	.word	0x00029cb8
    e33c:	0002b716 	.word	0x0002b716
    e340:	0002b71c 	.word	0x0002b71c
    e344:	0002b720 	.word	0x0002b720
    e348:	20020e8c 	.word	0x20020e8c
    e34c:	20020e88 	.word	0x20020e88
    e350:	0002b6fa 	.word	0x0002b6fa
    e354:	0002416b 	.word	0x0002416b
    e358:	0002414f 	.word	0x0002414f
    e35c:	000241a1 	.word	0x000241a1
    e360:	0002b754 	.word	0x0002b754
    e364:	0002a669 	.word	0x0002a669
    e368:	0002b725 	.word	0x0002b725
    e36c:	0002f09e 	.word	0x0002f09e
    e370:	0002b75d 	.word	0x0002b75d
    e374:	0002b763 	.word	0x0002b763
    e378:	0002fbde 	.word	0x0002fbde
    e37c:	0002b765 	.word	0x0002b765
    e380:	0002f09c 	.word	0x0002f09c

0000e384 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    e384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    e388:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    e38a:	684b      	ldr	r3, [r1, #4]
    e38c:	4605      	mov	r5, r0
    e38e:	460c      	mov	r4, r1
    e390:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    e392:	688e      	ldr	r6, [r1, #8]
    e394:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    e396:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    e39a:	b15b      	cbz	r3, e3b4 <log_output_msg_process+0x30>
    e39c:	4a13      	ldr	r2, [pc, #76]	; (e3ec <log_output_msg_process+0x68>)
    e39e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    e3a0:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    e3a4:	2900      	cmp	r1, #0
    e3a6:	db1f      	blt.n	e3e8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    e3a8:	7820      	ldrb	r0, [r4, #0]
    e3aa:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e3ae:	f7ff fdc9 	bl	df44 <log_source_name_get>
    e3b2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    e3b4:	4621      	mov	r1, r4
    e3b6:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    e3ba:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    e3bc:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    e3c0:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    e3c2:	eb01 0402 	add.w	r4, r1, r2
    e3c6:	bf08      	it	eq
    e3c8:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    e3ca:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    e3ce:	e9cd 0803 	strd	r0, r8, [sp, #12]
    e3d2:	e9cd 1401 	strd	r1, r4, [sp, #4]
    e3d6:	2200      	movs	r2, #0
    e3d8:	4631      	mov	r1, r6
    e3da:	4628      	mov	r0, r5
    e3dc:	9700      	str	r7, [sp, #0]
    e3de:	f7ff fe69 	bl	e0b4 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    e3e2:	b006      	add	sp, #24
    e3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    e3e8:	2300      	movs	r3, #0
    e3ea:	e7e3      	b.n	e3b4 <log_output_msg_process+0x30>
    e3ec:	00029664 	.word	0x00029664

0000e3f0 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    e3f0:	2100      	movs	r1, #0
    e3f2:	2301      	movs	r3, #1
    e3f4:	4a06      	ldr	r2, [pc, #24]	; (e410 <log_output_timestamp_freq_set+0x20>)
    e3f6:	4290      	cmp	r0, r2
    e3f8:	d806      	bhi.n	e408 <log_output_timestamp_freq_set+0x18>
    e3fa:	4a06      	ldr	r2, [pc, #24]	; (e414 <log_output_timestamp_freq_set+0x24>)
    e3fc:	b901      	cbnz	r1, e400 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    e3fe:	2301      	movs	r3, #1
    e400:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    e402:	4b05      	ldr	r3, [pc, #20]	; (e418 <log_output_timestamp_freq_set+0x28>)
    e404:	6018      	str	r0, [r3, #0]
}
    e406:	4770      	bx	lr
		timestamp_div *= 2U;
    e408:	2101      	movs	r1, #1
		frequency /= 2U;
    e40a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    e40c:	005b      	lsls	r3, r3, #1
    e40e:	e7f2      	b.n	e3f6 <log_output_timestamp_freq_set+0x6>
    e410:	000f4240 	.word	0x000f4240
    e414:	20020e88 	.word	0x20020e88
    e418:	20020e8c 	.word	0x20020e8c

0000e41c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    e41c:	2201      	movs	r2, #1
    e41e:	4b01      	ldr	r3, [pc, #4]	; (e424 <log_backend_rtt_init+0x8>)
    e420:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    e422:	4770      	bx	lr
    e424:	20021c9f 	.word	0x20021c9f

0000e428 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    e428:	4b01      	ldr	r3, [pc, #4]	; (e430 <format_set+0x8>)
	return 0;
}
    e42a:	2000      	movs	r0, #0
	log_format_current = log_type;
    e42c:	6019      	str	r1, [r3, #0]
}
    e42e:	4770      	bx	lr
    e430:	20020ea4 	.word	0x20020ea4

0000e434 <panic>:
	panic_mode = true;
    e434:	2201      	movs	r2, #1
    e436:	4b02      	ldr	r3, [pc, #8]	; (e440 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    e438:	4802      	ldr	r0, [pc, #8]	; (e444 <panic+0x10>)
    e43a:	701a      	strb	r2, [r3, #0]
    e43c:	f015 beb7 	b.w	241ae <log_output_flush>
    e440:	20021ca0 	.word	0x20021ca0
    e444:	00029ce8 	.word	0x00029ce8

0000e448 <process>:
{
    e448:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e44a:	4b06      	ldr	r3, [pc, #24]	; (e464 <process+0x1c>)
{
    e44c:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e44e:	6818      	ldr	r0, [r3, #0]
    e450:	f7ff fcd4 	bl	ddfc <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    e454:	4621      	mov	r1, r4
}
    e456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    e45a:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    e45c:	220f      	movs	r2, #15
    e45e:	4802      	ldr	r0, [pc, #8]	; (e468 <process+0x20>)
    e460:	4718      	bx	r3
    e462:	bf00      	nop
    e464:	20020ea4 	.word	0x20020ea4
    e468:	00029ce8 	.word	0x00029ce8

0000e46c <data_out_block_mode>:
{
    e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e46e:	4607      	mov	r7, r0
    e470:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    e472:	2404      	movs	r4, #4
    e474:	4d17      	ldr	r5, [pc, #92]	; (e4d4 <data_out_block_mode+0x68>)
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    e476:	4632      	mov	r2, r6
    e478:	4639      	mov	r1, r7
    e47a:	2000      	movs	r0, #0
    e47c:	f00f fea0 	bl	1e1c0 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    e480:	b1c8      	cbz	r0, e4b6 <data_out_block_mode+0x4a>
	host_present = true;
    e482:	2301      	movs	r3, #1
    e484:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    e486:	4b14      	ldr	r3, [pc, #80]	; (e4d8 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    e488:	781b      	ldrb	r3, [r3, #0]
    e48a:	b92b      	cbnz	r3, e498 <data_out_block_mode+0x2c>
}
    e48c:	4630      	mov	r0, r6
    e48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    e490:	b95c      	cbnz	r4, e4aa <data_out_block_mode+0x3e>
		host_present = false;
    e492:	702c      	strb	r4, [r5, #0]
    e494:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    e498:	2000      	movs	r0, #0
    e49a:	f00f fed9 	bl	1e250 <SEGGER_RTT_HasDataUp>
    e49e:	2800      	cmp	r0, #0
    e4a0:	d0f4      	beq.n	e48c <data_out_block_mode+0x20>
    e4a2:	782b      	ldrb	r3, [r5, #0]
    e4a4:	2b00      	cmp	r3, #0
    e4a6:	d1f3      	bne.n	e490 <data_out_block_mode+0x24>
    e4a8:	e7f0      	b.n	e48c <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    e4aa:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    e4ac:	f241 3088 	movw	r0, #5000	; 0x1388
    e4b0:	f01a f87e 	bl	285b0 <z_impl_k_busy_wait>
}
    e4b4:	e7f0      	b.n	e498 <data_out_block_mode+0x2c>
		} else if (host_present) {
    e4b6:	782b      	ldrb	r3, [r5, #0]
    e4b8:	b113      	cbz	r3, e4c0 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    e4ba:	3c01      	subs	r4, #1
    e4bc:	d104      	bne.n	e4c8 <data_out_block_mode+0x5c>
		host_present = false;
    e4be:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    e4c0:	782b      	ldrb	r3, [r5, #0]
    e4c2:	2b00      	cmp	r3, #0
    e4c4:	d1d7      	bne.n	e476 <data_out_block_mode+0xa>
    e4c6:	e7e1      	b.n	e48c <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    e4c8:	f241 3088 	movw	r0, #5000	; 0x1388
    e4cc:	f01a f870 	bl	285b0 <z_impl_k_busy_wait>
    e4d0:	e7f6      	b.n	e4c0 <data_out_block_mode+0x54>
    e4d2:	bf00      	nop
    e4d4:	20021c9f 	.word	0x20021c9f
    e4d8:	20021ca0 	.word	0x20021ca0

0000e4dc <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    e4dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e4de:	4603      	mov	r3, r0
	const struct ipc_service_backend *backend;

	if (!instance) {
    e4e0:	b960      	cbnz	r0, e4fc <ipc_service_open_instance+0x20>
		LOG_ERR("Invalid instance");
    e4e2:	4a11      	ldr	r2, [pc, #68]	; (e528 <ipc_service_open_instance+0x4c>)
    e4e4:	9000      	str	r0, [sp, #0]
    e4e6:	e9cd 0201 	strd	r0, r2, [sp, #4]
    e4ea:	4910      	ldr	r1, [pc, #64]	; (e52c <ipc_service_open_instance+0x50>)
    e4ec:	2201      	movs	r2, #1
    e4ee:	f015 fe6b 	bl	241c8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    e4f2:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    e4f6:	b005      	add	sp, #20
    e4f8:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    e4fc:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    e4fe:	b95b      	cbnz	r3, e518 <ipc_service_open_instance+0x3c>
		LOG_ERR("Invalid backend configuration");
    e500:	4a0b      	ldr	r2, [pc, #44]	; (e530 <ipc_service_open_instance+0x54>)
    e502:	4618      	mov	r0, r3
    e504:	e9cd 3201 	strd	r3, r2, [sp, #4]
    e508:	4908      	ldr	r1, [pc, #32]	; (e52c <ipc_service_open_instance+0x50>)
    e50a:	2201      	movs	r2, #1
    e50c:	9300      	str	r3, [sp, #0]
    e50e:	f015 fe5b 	bl	241c8 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    e512:	f06f 0004 	mvn.w	r0, #4
    e516:	e7ee      	b.n	e4f6 <ipc_service_open_instance+0x1a>
	if (!backend->open_instance) {
    e518:	681b      	ldr	r3, [r3, #0]
    e51a:	b11b      	cbz	r3, e524 <ipc_service_open_instance+0x48>
}
    e51c:	b005      	add	sp, #20
    e51e:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    e522:	4718      	bx	r3
		return 0;
    e524:	4618      	mov	r0, r3
    e526:	e7e6      	b.n	e4f6 <ipc_service_open_instance+0x1a>
    e528:	0002b79f 	.word	0x0002b79f
    e52c:	00029744 	.word	0x00029744
    e530:	0002b7b0 	.word	0x0002b7b0

0000e534 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    e534:	b530      	push	{r4, r5, lr}
    e536:	b085      	sub	sp, #20
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    e538:	b108      	cbz	r0, e53e <ipc_service_register_endpoint+0xa>
    e53a:	b101      	cbz	r1, e53e <ipc_service_register_endpoint+0xa>
    e53c:	b96a      	cbnz	r2, e55a <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    e53e:	4b13      	ldr	r3, [pc, #76]	; (e58c <ipc_service_register_endpoint+0x58>)
    e540:	2201      	movs	r2, #1
    e542:	9302      	str	r3, [sp, #8]
    e544:	2300      	movs	r3, #0
    e546:	4912      	ldr	r1, [pc, #72]	; (e590 <ipc_service_register_endpoint+0x5c>)
    e548:	4618      	mov	r0, r3
    e54a:	e9cd 3300 	strd	r3, r3, [sp]
    e54e:	f015 fe3b 	bl	241c8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    e552:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    e556:	b005      	add	sp, #20
    e558:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    e55a:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    e55c:	b10c      	cbz	r4, e562 <ipc_service_register_endpoint+0x2e>
    e55e:	68e5      	ldr	r5, [r4, #12]
    e560:	b965      	cbnz	r5, e57c <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    e562:	4b0c      	ldr	r3, [pc, #48]	; (e594 <ipc_service_register_endpoint+0x60>)
    e564:	2201      	movs	r2, #1
    e566:	9302      	str	r3, [sp, #8]
    e568:	2300      	movs	r3, #0
    e56a:	4909      	ldr	r1, [pc, #36]	; (e590 <ipc_service_register_endpoint+0x5c>)
    e56c:	4618      	mov	r0, r3
    e56e:	e9cd 3300 	strd	r3, r3, [sp]
    e572:	f015 fe29 	bl	241c8 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    e576:	f06f 0004 	mvn.w	r0, #4
    e57a:	e7ec      	b.n	e556 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    e57c:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    e580:	68e3      	ldr	r3, [r4, #12]
}
    e582:	b005      	add	sp, #20
    e584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    e588:	4718      	bx	r3
    e58a:	bf00      	nop
    e58c:	0002b7ce 	.word	0x0002b7ce
    e590:	00029744 	.word	0x00029744
    e594:	0002b7b0 	.word	0x0002b7b0

0000e598 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    e598:	b530      	push	{r4, r5, lr}
    e59a:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    e59c:	4604      	mov	r4, r0
{
    e59e:	b085      	sub	sp, #20
	if (!ept) {
    e5a0:	b960      	cbnz	r0, e5bc <ipc_service_send+0x24>
		LOG_ERR("Invalid endpoint");
    e5a2:	4b19      	ldr	r3, [pc, #100]	; (e608 <ipc_service_send+0x70>)
    e5a4:	9000      	str	r0, [sp, #0]
    e5a6:	e9cd 0301 	strd	r0, r3, [sp, #4]
    e5aa:	2201      	movs	r2, #1
    e5ac:	4603      	mov	r3, r0
    e5ae:	4917      	ldr	r1, [pc, #92]	; (e60c <ipc_service_send+0x74>)
    e5b0:	f015 fe0a 	bl	241c8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    e5b4:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    e5b8:	b005      	add	sp, #20
    e5ba:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    e5bc:	6800      	ldr	r0, [r0, #0]
    e5be:	b958      	cbnz	r0, e5d8 <ipc_service_send+0x40>
		LOG_ERR("Endpoint not registered\n");
    e5c0:	4b13      	ldr	r3, [pc, #76]	; (e610 <ipc_service_send+0x78>)
    e5c2:	9000      	str	r0, [sp, #0]
    e5c4:	e9cd 0301 	strd	r0, r3, [sp, #4]
    e5c8:	2201      	movs	r2, #1
    e5ca:	4603      	mov	r3, r0
    e5cc:	490f      	ldr	r1, [pc, #60]	; (e60c <ipc_service_send+0x74>)
    e5ce:	f015 fdfb 	bl	241c8 <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
    e5d2:	f06f 0001 	mvn.w	r0, #1
    e5d6:	e7ef      	b.n	e5b8 <ipc_service_send+0x20>
	backend = ept->instance->api;
    e5d8:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    e5da:	b10a      	cbz	r2, e5e0 <ipc_service_send+0x48>
    e5dc:	6895      	ldr	r5, [r2, #8]
    e5de:	b965      	cbnz	r5, e5fa <ipc_service_send+0x62>
		LOG_ERR("Invalid backend configuration");
    e5e0:	4b0c      	ldr	r3, [pc, #48]	; (e614 <ipc_service_send+0x7c>)
    e5e2:	2201      	movs	r2, #1
    e5e4:	9302      	str	r3, [sp, #8]
    e5e6:	2300      	movs	r3, #0
    e5e8:	4908      	ldr	r1, [pc, #32]	; (e60c <ipc_service_send+0x74>)
    e5ea:	4618      	mov	r0, r3
    e5ec:	e9cd 3300 	strd	r3, r3, [sp]
    e5f0:	f015 fdea 	bl	241c8 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    e5f4:	f06f 0004 	mvn.w	r0, #4
    e5f8:	e7de      	b.n	e5b8 <ipc_service_send+0x20>
	return backend->send(ept->instance, ept->token, data, len);
    e5fa:	460a      	mov	r2, r1
    e5fc:	46ac      	mov	ip, r5
    e5fe:	6861      	ldr	r1, [r4, #4]
}
    e600:	b005      	add	sp, #20
    e602:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    e606:	4760      	bx	ip
    e608:	0002b7fa 	.word	0x0002b7fa
    e60c:	00029744 	.word	0x00029744
    e610:	0002b80b 	.word	0x0002b80b
    e614:	0002b7b0 	.word	0x0002b7b0

0000e618 <shared_memory_prepare>:
__ssp_bos_icheck3(memset, void *, int)
    e618:	2000      	movs	r0, #0
    e61a:	4b01      	ldr	r3, [pc, #4]	; (e620 <shared_memory_prepare+0x8>)
    e61c:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    e61e:	4770      	bx	lr
    e620:	20070000 	.word	0x20070000

0000e624 <advertise_ept>:
{
    e624:	b530      	push	{r4, r5, lr}
    e626:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    e628:	490e      	ldr	r1, [pc, #56]	; (e664 <advertise_ept+0x40>)
{
    e62a:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    e62c:	9102      	str	r1, [sp, #8]
    e62e:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    e632:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    e634:	e9cd 3100 	strd	r3, r1, [sp]
    e638:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    e63c:	f04f 33ff 	mov.w	r3, #4294967295
    e640:	4620      	mov	r0, r4
    e642:	f00f fa83 	bl	1db4c <rpmsg_create_ept>
	if (err != 0) {
    e646:	b950      	cbnz	r0, e65e <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    e648:	2301      	movs	r3, #1
    e64a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    e64e:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    e652:	b123      	cbz	r3, e65e <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    e654:	4620      	mov	r0, r4
}
    e656:	b005      	add	sp, #20
    e658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    e65c:	4718      	bx	r3
}
    e65e:	b005      	add	sp, #20
    e660:	bd30      	pop	{r4, r5, pc}
    e662:	bf00      	nop
    e664:	000242d9 	.word	0x000242d9

0000e668 <get_ept>:
{
    e668:	b538      	push	{r3, r4, r5, lr}
    e66a:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    e66c:	4611      	mov	r1, r2
{
    e66e:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    e670:	f015 fe34 	bl	242dc <get_ept_slot_with_name>
	if (ept != NULL) {
    e674:	4603      	mov	r3, r0
    e676:	b938      	cbnz	r0, e688 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    e678:	4628      	mov	r0, r5
    e67a:	4904      	ldr	r1, [pc, #16]	; (e68c <get_ept+0x24>)
    e67c:	f015 fe2e 	bl	242dc <get_ept_slot_with_name>
    e680:	4603      	mov	r3, r0
	if (ept != NULL) {
    e682:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    e684:	6023      	str	r3, [r4, #0]
}
    e686:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    e688:	2001      	movs	r0, #1
    e68a:	e7fb      	b.n	e684 <get_ept+0x1c>
    e68c:	0002df2e 	.word	0x0002df2e

0000e690 <open>:
{
    e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    e694:	2301      	movs	r3, #1
    e696:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    e698:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    e69a:	6846      	ldr	r6, [r0, #4]
{
    e69c:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    e69e:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    e6a2:	e8d7 2fef 	ldaex	r2, [r7]
    e6a6:	2a00      	cmp	r2, #0
    e6a8:	d103      	bne.n	e6b2 <open+0x22>
    e6aa:	e8c7 3fe1 	stlex	r1, r3, [r7]
    e6ae:	2900      	cmp	r1, #0
    e6b0:	d1f7      	bne.n	e6a2 <open+0x12>
    e6b2:	f040 80b8 	bne.w	e826 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    e6b6:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    e6b8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    e6ba:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    e6bc:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    e6be:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    e6c2:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    e6c6:	bf26      	itte	cs
    e6c8:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    e6cc:	fab3 f383 	clzcs	r3, r3
		return 0;
    e6d0:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    e6d2:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    e6d6:	bf28      	it	cs
    e6d8:	f1c3 0320 	rsbcs	r3, r3, #32
    e6dc:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    e6de:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    e6e0:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    e6e4:	f000 8099 	beq.w	e81a <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    e6e8:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    e6ea:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    e6ec:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    e6ee:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    e6f0:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    e6f4:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    e6f6:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    e6f8:	3209      	adds	r2, #9
    e6fa:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    e6fe:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    e700:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    e704:	440a      	add	r2, r1
	return (buf_size * num);
    e706:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    e708:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    e70c:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    e70e:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    e712:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    e716:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    e718:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    e71a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    e71e:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    e722:	3303      	adds	r3, #3
    e724:	4413      	add	r3, r2
    e726:	f023 0303 	bic.w	r3, r3, #3
    e72a:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    e72e:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    e730:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    e734:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    e738:	4b3c      	ldr	r3, [pc, #240]	; (e82c <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    e73a:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    e73c:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    e740:	6831      	ldr	r1, [r6, #0]
    e742:	f000 fa1d 	bl	eb80 <ipc_static_vrings_init>
	if (err != 0) {
    e746:	4604      	mov	r4, r0
    e748:	bb30      	cbnz	r0, e798 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    e74a:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    e74e:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    e752:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    e756:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    e75a:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    e75c:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    e75e:	bf08      	it	eq
    e760:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    e762:	f011 f86f 	bl	1f844 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    e766:	2300      	movs	r3, #0
    e768:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    e76c:	4930      	ldr	r1, [pc, #192]	; (e830 <open+0x1a0>)
    e76e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e772:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    e776:	9300      	str	r3, [sp, #0]
    e778:	4658      	mov	r0, fp
    e77a:	4623      	mov	r3, r4
    e77c:	f011 f87c 	bl	1f878 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    e780:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    e784:	492b      	ldr	r1, [pc, #172]	; (e834 <open+0x1a4>)
    e786:	f010 ff91 	bl	1f6ac <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    e78a:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    e78e:	6883      	ldr	r3, [r0, #8]
    e790:	685c      	ldr	r4, [r3, #4]
    e792:	b91c      	cbnz	r4, e79c <open+0x10c>
		return -ENOSYS;
    e794:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    e798:	2100      	movs	r1, #0
    e79a:	e037      	b.n	e80c <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    e79c:	464b      	mov	r3, r9
    e79e:	4a26      	ldr	r2, [pc, #152]	; (e838 <open+0x1a8>)
    e7a0:	f8da 1018 	ldr.w	r1, [sl, #24]
    e7a4:	47a0      	blx	r4
	if (err != 0) {
    e7a6:	4604      	mov	r4, r0
    e7a8:	2800      	cmp	r0, #0
    e7aa:	d1f5      	bne.n	e798 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    e7ac:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    e7b0:	6883      	ldr	r3, [r0, #8]
    e7b2:	691b      	ldr	r3, [r3, #16]
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	d0ed      	beq.n	e794 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    e7b8:	2201      	movs	r2, #1
    e7ba:	f8da 1018 	ldr.w	r1, [sl, #24]
    e7be:	4798      	blx	r3
	if (err != 0) {
    e7c0:	4604      	mov	r4, r0
    e7c2:	2800      	cmp	r0, #0
    e7c4:	d1e8      	bne.n	e798 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    e7c6:	4b1d      	ldr	r3, [pc, #116]	; (e83c <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    e7c8:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    e7ca:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    e7ce:	4b1c      	ldr	r3, [pc, #112]	; (e840 <open+0x1b0>)
    e7d0:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    e7d4:	4b1b      	ldr	r3, [pc, #108]	; (e844 <open+0x1b4>)
    e7d6:	9303      	str	r3, [sp, #12]
    e7d8:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    e7dc:	9302      	str	r3, [sp, #8]
    e7de:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    e7e2:	e9cd 8300 	strd	r8, r3, [sp]
    e7e6:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    e7ea:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    e7ec:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    e7f0:	f000 f98e 	bl	eb10 <ipc_rpmsg_init>
	if (err != 0) {
    e7f4:	4604      	mov	r4, r0
    e7f6:	2800      	cmp	r0, #0
    e7f8:	d1ce      	bne.n	e798 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    e7fa:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    e7fe:	f00f fb49 	bl	1de94 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    e802:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    e804:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    e808:	db0a      	blt.n	e820 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    e80a:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    e80c:	4638      	mov	r0, r7
    e80e:	f015 fd9a 	bl	24346 <atomic_set.isra.0>
}
    e812:	4620      	mov	r0, r4
    e814:	b005      	add	sp, #20
    e816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    e81a:	f06f 040b 	mvn.w	r4, #11
    e81e:	e7bb      	b.n	e798 <open+0x108>
		err = -EINVAL;
    e820:	f06f 0415 	mvn.w	r4, #21
    e824:	e7b8      	b.n	e798 <open+0x108>
		return -EALREADY;
    e826:	f06f 0477 	mvn.w	r4, #119	; 0x77
    e82a:	e7f2      	b.n	e812 <open+0x182>
    e82c:	0002432f 	.word	0x0002432f
    e830:	20031018 	.word	0x20031018
    e834:	00024315 	.word	0x00024315
    e838:	00024309 	.word	0x00024309
    e83c:	0000e90d 	.word	0x0000e90d
    e840:	000243e7 	.word	0x000243e7
    e844:	00024377 	.word	0x00024377

0000e848 <close>:
{
    e848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e84c:	4606      	mov	r6, r0
    e84e:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    e852:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    e854:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    e858:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    e85c:	e8d7 3fef 	ldaex	r3, [r7]
    e860:	2b02      	cmp	r3, #2
    e862:	d103      	bne.n	e86c <close+0x24>
    e864:	e8c7 9fe2 	stlex	r2, r9, [r7]
    e868:	2a00      	cmp	r2, #0
    e86a:	d1f7      	bne.n	e85c <close+0x14>
    e86c:	d149      	bne.n	e902 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    e86e:	4826      	ldr	r0, [pc, #152]	; (e908 <close+0xc0>)
    e870:	f105 0140 	add.w	r1, r5, #64	; 0x40
    e874:	f7fa fd6a 	bl	934c <strcmp>
    e878:	b120      	cbz	r0, e884 <close+0x3c>
		return -EBUSY;
    e87a:	f06f 040f 	mvn.w	r4, #15
}
    e87e:	4620      	mov	r0, r4
    e880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    e884:	4820      	ldr	r0, [pc, #128]	; (e908 <close+0xc0>)
    e886:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    e88a:	f7fa fd5f 	bl	934c <strcmp>
    e88e:	2800      	cmp	r0, #0
    e890:	d1f3      	bne.n	e87a <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    e892:	4628      	mov	r0, r5
    e894:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    e898:	f015 fdd8 	bl	2444c <ipc_rpmsg_deinit>
	if (err != 0) {
    e89c:	4604      	mov	r4, r0
    e89e:	bb70      	cbnz	r0, e8fe <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    e8a0:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    e8a2:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    e8a4:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    e8a6:	6883      	ldr	r3, [r0, #8]
    e8a8:	691b      	ldr	r3, [r3, #16]
    e8aa:	b333      	cbz	r3, e8fa <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    e8ac:	4622      	mov	r2, r4
    e8ae:	6989      	ldr	r1, [r1, #24]
    e8b0:	4798      	blx	r3
	if (err != 0) {
    e8b2:	4604      	mov	r4, r0
    e8b4:	bb18      	cbnz	r0, e8fe <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    e8b6:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    e8ba:	4649      	mov	r1, r9
    e8bc:	4630      	mov	r0, r6
    e8be:	f011 f843 	bl	1f948 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    e8c2:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    e8c4:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    e8c8:	f001 fa8e 	bl	fde8 <z_impl_k_thread_abort>
    e8cc:	4630      	mov	r0, r6
    e8ce:	f8d8 1000 	ldr.w	r1, [r8]
    e8d2:	f015 fdf8 	bl	244c6 <ipc_static_vrings_deinit>
	if (err != 0) {
    e8d6:	4604      	mov	r4, r0
    e8d8:	b988      	cbnz	r0, e8fe <close+0xb6>
    e8da:	4601      	mov	r1, r0
    e8dc:	22e8      	movs	r2, #232	; 0xe8
    e8de:	4630      	mov	r0, r6
    e8e0:	f019 ff96 	bl	28810 <memset>
    e8e4:	4621      	mov	r1, r4
    e8e6:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    e8ea:	4628      	mov	r0, r5
    e8ec:	f019 ff90 	bl	28810 <memset>
	atomic_set(&data->state, STATE_READY);
    e8f0:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    e8f2:	4638      	mov	r0, r7
    e8f4:	f015 fd27 	bl	24346 <atomic_set.isra.0>
	return err;
    e8f8:	e7c1      	b.n	e87e <close+0x36>
		return -ENOSYS;
    e8fa:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    e8fe:	2102      	movs	r1, #2
    e900:	e7f7      	b.n	e8f2 <close+0xaa>
		return -EALREADY;
    e902:	f06f 0477 	mvn.w	r4, #119	; 0x77
    e906:	e7ba      	b.n	e87e <close+0x36>
    e908:	0002df2e 	.word	0x0002df2e

0000e90c <bound_cb>:
{
    e90c:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    e90e:	4604      	mov	r4, r0
    e910:	b140      	cbz	r0, e924 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    e912:	2300      	movs	r3, #0
    e914:	2201      	movs	r2, #1
    e916:	e9cd 3200 	strd	r3, r2, [sp]
    e91a:	4b07      	ldr	r3, [pc, #28]	; (e938 <bound_cb+0x2c>)
    e91c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    e920:	f00f f8c8 	bl	1dab4 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    e924:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e926:	681b      	ldr	r3, [r3, #0]
    e928:	b123      	cbz	r3, e934 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    e92a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    e92c:	b002      	add	sp, #8
    e92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    e932:	4718      	bx	r3
}
    e934:	b002      	add	sp, #8
    e936:	bd10      	pop	{r4, pc}
    e938:	0002df2e 	.word	0x0002df2e

0000e93c <send>:
{
    e93c:	b513      	push	{r0, r1, r4, lr}
    e93e:	4604      	mov	r4, r0
    e940:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e942:	6921      	ldr	r1, [r4, #16]
    e944:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    e948:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    e94c:	2902      	cmp	r1, #2
    e94e:	d110      	bne.n	e972 <send+0x36>
	if (len == 0) {
    e950:	b193      	cbz	r3, e978 <send+0x3c>
	if (!rpmsg_ept) {
    e952:	b1a0      	cbz	r0, e97e <send+0x42>
    e954:	2101      	movs	r1, #1
    e956:	e9cd 3100 	strd	r3, r1, [sp]
    e95a:	4613      	mov	r3, r2
    e95c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    e960:	f00f f8a8 	bl	1dab4 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    e964:	4b07      	ldr	r3, [pc, #28]	; (e984 <send+0x48>)
		return -ENOMEM;
    e966:	4298      	cmp	r0, r3
    e968:	bf08      	it	eq
    e96a:	f06f 000b 	mvneq.w	r0, #11
}
    e96e:	b002      	add	sp, #8
    e970:	bd10      	pop	{r4, pc}
		return -EBUSY;
    e972:	f06f 000f 	mvn.w	r0, #15
    e976:	e7fa      	b.n	e96e <send+0x32>
		return -EBADMSG;
    e978:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    e97c:	e7f7      	b.n	e96e <send+0x32>
		return -ENOENT;
    e97e:	f06f 0001 	mvn.w	r0, #1
    e982:	e7f4      	b.n	e96e <send+0x32>
    e984:	fffff82e 	.word	0xfffff82e

0000e988 <register_ept>:
{
    e988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e98c:	4688      	mov	r8, r1
    e98e:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    e990:	6906      	ldr	r6, [r0, #16]
    e992:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    e996:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    e99a:	2b02      	cmp	r3, #2
    e99c:	d15f      	bne.n	ea5e <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    e99e:	6813      	ldr	r3, [r2, #0]
    e9a0:	b923      	cbnz	r3, e9ac <register_ept+0x24>
		return -EINVAL;
    e9a2:	f06f 0015 	mvn.w	r0, #21
}
    e9a6:	b003      	add	sp, #12
    e9a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    e9ac:	781b      	ldrb	r3, [r3, #0]
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	d0f7      	beq.n	e9a2 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    e9b2:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    e9b6:	f1b9 0f00 	cmp.w	r9, #0
    e9ba:	d133      	bne.n	ea24 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    e9bc:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    e9c0:	f04f 32ff 	mov.w	r2, #4294967295
    e9c4:	f04f 33ff 	mov.w	r3, #4294967295
    e9c8:	4638      	mov	r0, r7
    e9ca:	f010 f965 	bl	1ec98 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    e9ce:	4630      	mov	r0, r6
    e9d0:	682a      	ldr	r2, [r5, #0]
    e9d2:	a901      	add	r1, sp, #4
    e9d4:	f7ff fe48 	bl	e668 <get_ept>
	if (rpmsg_ept == NULL) {
    e9d8:	9c01      	ldr	r4, [sp, #4]
    e9da:	b91c      	cbnz	r4, e9e4 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    e9dc:	4638      	mov	r0, r7
    e9de:	f015 fcb0 	bl	24342 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    e9e2:	e7de      	b.n	e9a2 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    e9e4:	f105 0308 	add.w	r3, r5, #8
    e9e8:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    e9ea:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    e9ec:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    e9f0:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    e9f2:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    e9f4:	b160      	cbz	r0, ea10 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    e9f6:	4638      	mov	r0, r7
    e9f8:	f015 fca3 	bl	24342 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    e9fc:	4621      	mov	r1, r4
    e9fe:	4630      	mov	r0, r6
    ea00:	6e23      	ldr	r3, [r4, #96]	; 0x60
    ea02:	682a      	ldr	r2, [r5, #0]
    ea04:	f7ff fe0e 	bl	e624 <advertise_ept>
	return 0;
    ea08:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    ea0a:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    ea0e:	e7ca      	b.n	e9a6 <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    ea10:	2220      	movs	r2, #32
    ea12:	6829      	ldr	r1, [r5, #0]
    ea14:	f104 0040 	add.w	r0, r4, #64	; 0x40
    ea18:	f01a f83c 	bl	28a94 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    ea1c:	4638      	mov	r0, r7
    ea1e:	f015 fc90 	bl	24342 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    ea22:	e7f1      	b.n	ea08 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    ea24:	4630      	mov	r0, r6
    ea26:	490f      	ldr	r1, [pc, #60]	; (ea64 <register_ept+0xdc>)
    ea28:	f015 fc58 	bl	242dc <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    ea2c:	4604      	mov	r4, r0
    ea2e:	2800      	cmp	r0, #0
    ea30:	d0b7      	beq.n	e9a2 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    ea32:	f105 0308 	add.w	r3, r5, #8
    ea36:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    ea38:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    ea3a:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    ea3c:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    ea3e:	2300      	movs	r3, #0
    ea40:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    ea44:	2220      	movs	r2, #32
    ea46:	6829      	ldr	r1, [r5, #0]
    ea48:	3040      	adds	r0, #64	; 0x40
    ea4a:	f01a f823 	bl	28a94 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    ea4e:	4622      	mov	r2, r4
    ea50:	2101      	movs	r1, #1
    ea52:	4630      	mov	r0, r6
    ea54:	f000 f83e 	bl	ead4 <ipc_rpmsg_register_ept>
	if (err != 0) {
    ea58:	2800      	cmp	r0, #0
    ea5a:	d0d5      	beq.n	ea08 <register_ept+0x80>
    ea5c:	e7a1      	b.n	e9a2 <register_ept+0x1a>
		return -EBUSY;
    ea5e:	f06f 000f 	mvn.w	r0, #15
    ea62:	e7a0      	b.n	e9a6 <register_ept+0x1e>
    ea64:	0002df2e 	.word	0x0002df2e

0000ea68 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    ea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea6c:	4605      	mov	r5, r0
    ea6e:	460e      	mov	r6, r1
    ea70:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    ea72:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    ea74:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    ea78:	b085      	sub	sp, #20
    ea7a:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    ea7e:	4621      	mov	r1, r4
    ea80:	4630      	mov	r0, r6
    ea82:	f7fa fc63 	bl	934c <strcmp>
    ea86:	b9e0      	cbnz	r0, eac2 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    ea88:	4b11      	ldr	r3, [pc, #68]	; (ead0 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    ea8a:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    ea8e:	9302      	str	r3, [sp, #8]
    ea90:	f8da 3010 	ldr.w	r3, [sl, #16]
    ea94:	4632      	mov	r2, r6
    ea96:	e9cd 8300 	strd	r8, r3, [sp]
    ea9a:	4629      	mov	r1, r5
    ea9c:	f04f 33ff 	mov.w	r3, #4294967295
    eaa0:	4658      	mov	r0, fp
    eaa2:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    eaa6:	f00f f851 	bl	1db4c <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    eaaa:	b960      	cbnz	r0, eac6 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    eaac:	2370      	movs	r3, #112	; 0x70
    eaae:	2201      	movs	r2, #1
    eab0:	fb03 9307 	mla	r3, r3, r7, r9
    eab4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    eab8:	f8da 300c 	ldr.w	r3, [sl, #12]
    eabc:	b10b      	cbz	r3, eac2 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    eabe:	4658      	mov	r0, fp
    eac0:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    eac2:	3470      	adds	r4, #112	; 0x70
    eac4:	b117      	cbz	r7, eacc <ns_bind_cb+0x64>
			}
		}
	}
}
    eac6:	b005      	add	sp, #20
    eac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    eacc:	2701      	movs	r7, #1
    eace:	e7d6      	b.n	ea7e <ns_bind_cb+0x16>
    ead0:	00024449 	.word	0x00024449

0000ead4 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    ead4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ead6:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    ead8:	b190      	cbz	r0, eb00 <ipc_rpmsg_register_ept+0x2c>
    eada:	b18a      	cbz	r2, eb00 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    eadc:	2901      	cmp	r1, #1
    eade:	d112      	bne.n	eb06 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    eae0:	4b0a      	ldr	r3, [pc, #40]	; (eb0c <ipc_rpmsg_register_ept+0x38>)
    eae2:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    eae6:	9302      	str	r3, [sp, #8]
    eae8:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    eaec:	3240      	adds	r2, #64	; 0x40
    eaee:	9301      	str	r3, [sp, #4]
    eaf0:	f04f 33ff 	mov.w	r3, #4294967295
    eaf4:	4620      	mov	r0, r4
    eaf6:	9300      	str	r3, [sp, #0]
    eaf8:	f00f f828 	bl	1db4c <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    eafc:	b004      	add	sp, #16
    eafe:	bd10      	pop	{r4, pc}
		return -EINVAL;
    eb00:	f06f 0015 	mvn.w	r0, #21
    eb04:	e7fa      	b.n	eafc <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    eb06:	2000      	movs	r0, #0
    eb08:	e7f8      	b.n	eafc <ipc_rpmsg_register_ept+0x28>
    eb0a:	bf00      	nop
    eb0c:	00024449 	.word	0x00024449

0000eb10 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    eb10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eb14:	b087      	sub	sp, #28
    eb16:	460e      	mov	r6, r1
    eb18:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    eb1c:	4614      	mov	r4, r2
    eb1e:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    eb22:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    eb24:	b330      	cbz	r0, eb74 <ipc_rpmsg_init+0x64>
    eb26:	b329      	cbz	r1, eb74 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    eb28:	f8df c050 	ldr.w	ip, [pc, #80]	; eb7c <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    eb2c:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    eb30:	2d00      	cmp	r5, #0
    eb32:	bf08      	it	eq
    eb34:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    eb36:	b99e      	cbnz	r6, eb60 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    eb38:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    eb3c:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    eb40:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    eb42:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    eb44:	f019 fbde 	bl	28304 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    eb48:	ab03      	add	r3, sp, #12
    eb4a:	e9cd 4300 	strd	r4, r3, [sp]
    eb4e:	462a      	mov	r2, r5
    eb50:	463b      	mov	r3, r7
    eb52:	4641      	mov	r1, r8
    eb54:	4648      	mov	r0, r9
    eb56:	f00f f9c3 	bl	1dee0 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    eb5a:	b007      	add	sp, #28
    eb5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    eb60:	2200      	movs	r2, #0
    eb62:	4641      	mov	r1, r8
    eb64:	920e      	str	r2, [sp, #56]	; 0x38
    eb66:	4648      	mov	r0, r9
    eb68:	462a      	mov	r2, r5
}
    eb6a:	b007      	add	sp, #28
    eb6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    eb70:	f00f bae0 	b.w	1e134 <rpmsg_init_vdev>
		return -EINVAL;
    eb74:	f06f 0015 	mvn.w	r0, #21
    eb78:	e7ef      	b.n	eb5a <ipc_rpmsg_init+0x4a>
    eb7a:	bf00      	nop
    eb7c:	0000ea69 	.word	0x0000ea69

0000eb80 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    eb80:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb82:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    eb84:	4604      	mov	r4, r0
{
    eb86:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    eb88:	2800      	cmp	r0, #0
    eb8a:	d06f      	beq.n	ec6c <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    eb8c:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    eb8e:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    eb90:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    eb92:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    eb94:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    eb98:	4f36      	ldr	r7, [pc, #216]	; (ec74 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    eb9a:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    eb9c:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    eba0:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    eba4:	e9cd 3301 	strd	r3, r3, [sp, #4]
    eba8:	f04f 33ff 	mov.w	r3, #4294967295
    ebac:	9300      	str	r3, [sp, #0]
    ebae:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    ebb0:	f018 ff11 	bl	279d6 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ebb4:	4a30      	ldr	r2, [pc, #192]	; (ec78 <ipc_static_vrings_init+0xf8>)
    ebb6:	ab06      	add	r3, sp, #24
    ebb8:	e892 0003 	ldmia.w	r2, {r0, r1}
    ebbc:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    ebc0:	4618      	mov	r0, r3
    ebc2:	f00e fe97 	bl	1d8f4 <metal_init>
	if (err != 0) {
    ebc6:	4605      	mov	r5, r0
    ebc8:	b9d8      	cbnz	r0, ec02 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    ebca:	f104 0034 	add.w	r0, r4, #52	; 0x34
    ebce:	f00e fe71 	bl	1d8b4 <metal_register_generic_device>
	if (err != 0) {
    ebd2:	4605      	mov	r5, r0
    ebd4:	b9a8      	cbnz	r0, ec02 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    ebd6:	4639      	mov	r1, r7
    ebd8:	4828      	ldr	r0, [pc, #160]	; (ec7c <ipc_static_vrings_init+0xfc>)
    ebda:	aa05      	add	r2, sp, #20
    ebdc:	f018 fed3 	bl	27986 <metal_device_open>
	if (err != 0) {
    ebe0:	4605      	mov	r5, r0
    ebe2:	b970      	cbnz	r0, ec02 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    ebe4:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    ebe6:	689a      	ldr	r2, [r3, #8]
    ebe8:	b172      	cbz	r2, ec08 <ipc_static_vrings_init+0x88>
    ebea:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    ebec:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    ebf0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    ebf4:	f015 fc59 	bl	244aa <virtqueue_allocate>
    ebf8:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    ebfc:	b930      	cbnz	r0, ec0c <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    ebfe:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    ec02:	4628      	mov	r0, r5
    ec04:	b009      	add	sp, #36	; 0x24
    ec06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec08:	4603      	mov	r3, r0
    ec0a:	e7ef      	b.n	ebec <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    ec0c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    ec10:	f015 fc4b 	bl	244aa <virtqueue_allocate>
    ec14:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    ec18:	2800      	cmp	r0, #0
    ec1a:	d0f0      	beq.n	ebfe <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    ec1c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    ec20:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    ec24:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    ec28:	2304      	movs	r3, #4
    ec2a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    ec2e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    ec32:	2302      	movs	r3, #2
    ec34:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    ec36:	4b12      	ldr	r3, [pc, #72]	; (ec80 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    ec38:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    ec3c:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    ec40:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    ec44:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    ec48:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    ec4c:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    ec4e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    ec52:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    ec56:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    ec5a:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    ec5e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    ec62:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    ec66:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    ec68:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    ec6a:	e7ca      	b.n	ec02 <ipc_static_vrings_init+0x82>
		return -EINVAL;
    ec6c:	f06f 0515 	mvn.w	r5, #21
    ec70:	e7c7      	b.n	ec02 <ipc_static_vrings_init+0x82>
    ec72:	bf00      	nop
    ec74:	0002b835 	.word	0x0002b835
    ec78:	000297e4 	.word	0x000297e4
    ec7c:	0002b83f 	.word	0x0002b83f
    ec80:	00029d24 	.word	0x00029d24

0000ec84 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    ec84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec88:	4605      	mov	r5, r0
	__asm__ volatile(
    ec8a:	f04f 0320 	mov.w	r3, #32
    ec8e:	f3ef 8611 	mrs	r6, BASEPRI
    ec92:	f383 8812 	msr	BASEPRI_MAX, r3
    ec96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ec9a:	4820      	ldr	r0, [pc, #128]	; (ed1c <pm_state_notify+0x98>)
    ec9c:	f00f ffa6 	bl	1ebec <z_spin_lock_valid>
    eca0:	b968      	cbnz	r0, ecbe <pm_state_notify+0x3a>
    eca2:	2394      	movs	r3, #148	; 0x94
    eca4:	4a1e      	ldr	r2, [pc, #120]	; (ed20 <pm_state_notify+0x9c>)
    eca6:	491f      	ldr	r1, [pc, #124]	; (ed24 <pm_state_notify+0xa0>)
    eca8:	481f      	ldr	r0, [pc, #124]	; (ed28 <pm_state_notify+0xa4>)
    ecaa:	f015 f9ba 	bl	24022 <assert_print>
    ecae:	491b      	ldr	r1, [pc, #108]	; (ed1c <pm_state_notify+0x98>)
    ecb0:	481e      	ldr	r0, [pc, #120]	; (ed2c <pm_state_notify+0xa8>)
    ecb2:	f015 f9b6 	bl	24022 <assert_print>
    ecb6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ecb8:	4819      	ldr	r0, [pc, #100]	; (ed20 <pm_state_notify+0x9c>)
    ecba:	f015 f9ab 	bl	24014 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ecbe:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
    ecc2:	4816      	ldr	r0, [pc, #88]	; (ed1c <pm_state_notify+0x98>)
    ecc4:	f00f ffae 	bl	1ec24 <z_spin_lock_set_owner>
	return list->head;
    ecc8:	4b19      	ldr	r3, [pc, #100]	; (ed30 <pm_state_notify+0xac>)
    ecca:	4f1a      	ldr	r7, [pc, #104]	; (ed34 <pm_state_notify+0xb0>)
    eccc:	681c      	ldr	r4, [r3, #0]
    ecce:	f8df 8068 	ldr.w	r8, [pc, #104]	; ed38 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ecd2:	b97c      	cbnz	r4, ecf4 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ecd4:	4811      	ldr	r0, [pc, #68]	; (ed1c <pm_state_notify+0x98>)
    ecd6:	f00f ff97 	bl	1ec08 <z_spin_unlock_valid>
    ecda:	b9c8      	cbnz	r0, ed10 <pm_state_notify+0x8c>
    ecdc:	23c2      	movs	r3, #194	; 0xc2
    ecde:	4a10      	ldr	r2, [pc, #64]	; (ed20 <pm_state_notify+0x9c>)
    ece0:	4916      	ldr	r1, [pc, #88]	; (ed3c <pm_state_notify+0xb8>)
    ece2:	4811      	ldr	r0, [pc, #68]	; (ed28 <pm_state_notify+0xa4>)
    ece4:	f015 f99d 	bl	24022 <assert_print>
    ece8:	490c      	ldr	r1, [pc, #48]	; (ed1c <pm_state_notify+0x98>)
    ecea:	4815      	ldr	r0, [pc, #84]	; (ed40 <pm_state_notify+0xbc>)
    ecec:	f015 f999 	bl	24022 <assert_print>
    ecf0:	21c2      	movs	r1, #194	; 0xc2
    ecf2:	e7e1      	b.n	ecb8 <pm_state_notify+0x34>
			callback = notifier->state_exit;
    ecf4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    ecf8:	2d00      	cmp	r5, #0
    ecfa:	bf18      	it	ne
    ecfc:	4613      	movne	r3, r2
		if (callback) {
    ecfe:	b12b      	cbz	r3, ed0c <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ed00:	f898 2014 	ldrb.w	r2, [r8, #20]
    ed04:	fb09 f202 	mul.w	r2, r9, r2
    ed08:	5cb8      	ldrb	r0, [r7, r2]
    ed0a:	4798      	blx	r3
	return node->next;
    ed0c:	6824      	ldr	r4, [r4, #0]
    ed0e:	e7e0      	b.n	ecd2 <pm_state_notify+0x4e>
	__asm__ volatile(
    ed10:	f386 8811 	msr	BASEPRI, r6
    ed14:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    ed18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ed1c:	20020ea8 	.word	0x20020ea8
    ed20:	0002b32e 	.word	0x0002b32e
    ed24:	0002b387 	.word	0x0002b387
    ed28:	0002a669 	.word	0x0002a669
    ed2c:	0002b39c 	.word	0x0002b39c
    ed30:	20020ec8 	.word	0x20020ec8
    ed34:	20020ebc 	.word	0x20020ebc
    ed38:	20021424 	.word	0x20021424
    ed3c:	0002b35b 	.word	0x0002b35b
    ed40:	0002b372 	.word	0x0002b372

0000ed44 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    ed44:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    ed46:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    ed48:	4b16      	ldr	r3, [pc, #88]	; (eda4 <pm_system_resume+0x60>)
    ed4a:	7d1c      	ldrb	r4, [r3, #20]
    ed4c:	f004 031f 	and.w	r3, r4, #31
    ed50:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ed52:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ed54:	4b14      	ldr	r3, [pc, #80]	; (eda8 <pm_system_resume+0x64>)
    ed56:	0961      	lsrs	r1, r4, #5
    ed58:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ed5c:	e8d3 1fef 	ldaex	r1, [r3]
    ed60:	ea01 0500 	and.w	r5, r1, r0
    ed64:	e8c3 5fe6 	stlex	r6, r5, [r3]
    ed68:	2e00      	cmp	r6, #0
    ed6a:	d1f7      	bne.n	ed5c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    ed6c:	420a      	tst	r2, r1
    ed6e:	d013      	beq.n	ed98 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    ed70:	4b0e      	ldr	r3, [pc, #56]	; (edac <pm_system_resume+0x68>)
    ed72:	4d0f      	ldr	r5, [pc, #60]	; (edb0 <pm_system_resume+0x6c>)
    ed74:	b18b      	cbz	r3, ed9a <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    ed76:	230c      	movs	r3, #12
    ed78:	4363      	muls	r3, r4
    ed7a:	18ea      	adds	r2, r5, r3
    ed7c:	7851      	ldrb	r1, [r2, #1]
    ed7e:	5ce8      	ldrb	r0, [r5, r3]
    ed80:	f015 f994 	bl	240ac <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    ed84:	2000      	movs	r0, #0
    ed86:	f7ff ff7d 	bl	ec84 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    ed8a:	230c      	movs	r3, #12
    ed8c:	435c      	muls	r4, r3
    ed8e:	2300      	movs	r3, #0
    ed90:	192a      	adds	r2, r5, r4
    ed92:	512b      	str	r3, [r5, r4]
    ed94:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    ed98:	bd70      	pop	{r4, r5, r6, pc}
    ed9a:	f383 8811 	msr	BASEPRI, r3
    ed9e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    eda2:	e7ef      	b.n	ed84 <pm_system_resume+0x40>
    eda4:	20021424 	.word	0x20021424
    eda8:	20020ed0 	.word	0x20020ed0
    edac:	000240ad 	.word	0x000240ad
    edb0:	20020ebc 	.word	0x20020ebc

0000edb4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    edb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    edb8:	4b45      	ldr	r3, [pc, #276]	; (eed0 <pm_system_suspend+0x11c>)
{
    edba:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    edbc:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    edbe:	f04f 0320 	mov.w	r3, #32
    edc2:	f3ef 8811 	mrs	r8, BASEPRI
    edc6:	f383 8812 	msr	BASEPRI_MAX, r3
    edca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    edce:	4841      	ldr	r0, [pc, #260]	; (eed4 <pm_system_suspend+0x120>)
    edd0:	f00f ff0c 	bl	1ebec <z_spin_lock_valid>
    edd4:	b968      	cbnz	r0, edf2 <pm_system_suspend+0x3e>
    edd6:	2394      	movs	r3, #148	; 0x94
    edd8:	4a3f      	ldr	r2, [pc, #252]	; (eed8 <pm_system_suspend+0x124>)
    edda:	4940      	ldr	r1, [pc, #256]	; (eedc <pm_system_suspend+0x128>)
    eddc:	4840      	ldr	r0, [pc, #256]	; (eee0 <pm_system_suspend+0x12c>)
    edde:	f015 f920 	bl	24022 <assert_print>
    ede2:	493c      	ldr	r1, [pc, #240]	; (eed4 <pm_system_suspend+0x120>)
    ede4:	483f      	ldr	r0, [pc, #252]	; (eee4 <pm_system_suspend+0x130>)
    ede6:	f015 f91c 	bl	24022 <assert_print>
    edea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    edec:	483a      	ldr	r0, [pc, #232]	; (eed8 <pm_system_suspend+0x124>)
    edee:	f015 f911 	bl	24014 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    edf2:	240c      	movs	r4, #12
    edf4:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
    edf6:	4837      	ldr	r0, [pc, #220]	; (eed4 <pm_system_suspend+0x120>)
    edf8:	f00f ff14 	bl	1ec24 <z_spin_lock_set_owner>
    edfc:	4b3a      	ldr	r3, [pc, #232]	; (eee8 <pm_system_suspend+0x134>)
    edfe:	4e3b      	ldr	r6, [pc, #236]	; (eeec <pm_system_suspend+0x138>)
    ee00:	5d19      	ldrb	r1, [r3, r4]
    ee02:	191a      	adds	r2, r3, r4
    ee04:	b1b9      	cbz	r1, ee36 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    ee06:	ca07      	ldmia	r2, {r0, r1, r2}
    ee08:	eb06 0c04 	add.w	ip, r6, r4
    ee0c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    ee10:	2200      	movs	r2, #0
    ee12:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ee14:	482f      	ldr	r0, [pc, #188]	; (eed4 <pm_system_suspend+0x120>)
    ee16:	f00f fef7 	bl	1ec08 <z_spin_unlock_valid>
    ee1a:	4604      	mov	r4, r0
    ee1c:	b9b0      	cbnz	r0, ee4c <pm_system_suspend+0x98>
    ee1e:	23c2      	movs	r3, #194	; 0xc2
    ee20:	4a2d      	ldr	r2, [pc, #180]	; (eed8 <pm_system_suspend+0x124>)
    ee22:	4933      	ldr	r1, [pc, #204]	; (eef0 <pm_system_suspend+0x13c>)
    ee24:	482e      	ldr	r0, [pc, #184]	; (eee0 <pm_system_suspend+0x12c>)
    ee26:	f015 f8fc 	bl	24022 <assert_print>
    ee2a:	492a      	ldr	r1, [pc, #168]	; (eed4 <pm_system_suspend+0x120>)
    ee2c:	4831      	ldr	r0, [pc, #196]	; (eef4 <pm_system_suspend+0x140>)
    ee2e:	f015 f8f8 	bl	24022 <assert_print>
    ee32:	21c2      	movs	r1, #194	; 0xc2
    ee34:	e7da      	b.n	edec <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    ee36:	4639      	mov	r1, r7
    ee38:	4628      	mov	r0, r5
    ee3a:	f000 f865 	bl	ef08 <pm_policy_next_state>
		if (info != NULL) {
    ee3e:	2800      	cmp	r0, #0
    ee40:	d0e8      	beq.n	ee14 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    ee42:	c807      	ldmia	r0, {r0, r1, r2}
    ee44:	4434      	add	r4, r6
    ee46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ee4a:	e7e3      	b.n	ee14 <pm_system_suspend+0x60>
	__asm__ volatile(
    ee4c:	f388 8811 	msr	BASEPRI, r8
    ee50:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    ee54:	230c      	movs	r3, #12
    ee56:	436b      	muls	r3, r5
    ee58:	18f2      	adds	r2, r6, r3
    ee5a:	5cf3      	ldrb	r3, [r6, r3]
    ee5c:	b3ab      	cbz	r3, eeca <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    ee5e:	1c7b      	adds	r3, r7, #1
    ee60:	d00f      	beq.n	ee82 <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
    ee62:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    ee66:	2100      	movs	r1, #0
    ee68:	f8d2 e008 	ldr.w	lr, [r2, #8]
    ee6c:	4822      	ldr	r0, [pc, #136]	; (eef8 <pm_system_suspend+0x144>)
    ee6e:	2300      	movs	r3, #0
    ee70:	fbee 010c 	umlal	r0, r1, lr, ip
    ee74:	4a21      	ldr	r2, [pc, #132]	; (eefc <pm_system_suspend+0x148>)
    ee76:	f7fa f83b 	bl	8ef0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    ee7a:	2101      	movs	r1, #1
    ee7c:	1a38      	subs	r0, r7, r0
    ee7e:	f012 fb93 	bl	215a8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    ee82:	f011 fa11 	bl	202a8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    ee86:	2001      	movs	r0, #1
    ee88:	f7ff fefc 	bl	ec84 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ee8c:	4b1c      	ldr	r3, [pc, #112]	; (ef00 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ee8e:	096a      	lsrs	r2, r5, #5
    ee90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    ee94:	2201      	movs	r2, #1
    ee96:	f005 011f 	and.w	r1, r5, #31
    ee9a:	408a      	lsls	r2, r1
    ee9c:	e8d3 0fef 	ldaex	r0, [r3]
    eea0:	4310      	orrs	r0, r2
    eea2:	e8c3 0fe1 	stlex	r1, r0, [r3]
    eea6:	2900      	cmp	r1, #0
    eea8:	d1f8      	bne.n	ee9c <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
    eeaa:	4b16      	ldr	r3, [pc, #88]	; (ef04 <pm_system_suspend+0x150>)
    eeac:	b133      	cbz	r3, eebc <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
    eeae:	230c      	movs	r3, #12
    eeb0:	436b      	muls	r3, r5
    eeb2:	18f2      	adds	r2, r6, r3
    eeb4:	7851      	ldrb	r1, [r2, #1]
    eeb6:	5cf0      	ldrb	r0, [r6, r3]
    eeb8:	f015 f8ec 	bl	24094 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    eebc:	f7ff ff42 	bl	ed44 <pm_system_resume>
	k_sched_unlock();
    eec0:	f011 fa5e 	bl	20380 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    eec4:	4620      	mov	r0, r4
    eec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    eeca:	461c      	mov	r4, r3
    eecc:	e7fa      	b.n	eec4 <pm_system_suspend+0x110>
    eece:	bf00      	nop
    eed0:	20021424 	.word	0x20021424
    eed4:	20020eac 	.word	0x20020eac
    eed8:	0002b32e 	.word	0x0002b32e
    eedc:	0002b387 	.word	0x0002b387
    eee0:	0002a669 	.word	0x0002a669
    eee4:	0002b39c 	.word	0x0002b39c
    eee8:	20020eb0 	.word	0x20020eb0
    eeec:	20020ebc 	.word	0x20020ebc
    eef0:	0002b35b 	.word	0x0002b35b
    eef4:	0002b372 	.word	0x0002b372
    eef8:	000f423f 	.word	0x000f423f
    eefc:	000f4240 	.word	0x000f4240
    ef00:	20020ed0 	.word	0x20020ed0
    ef04:	00024095 	.word	0x00024095

0000ef08 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    ef08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef0c:	b085      	sub	sp, #20
    ef0e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    ef10:	a903      	add	r1, sp, #12
    ef12:	f000 f843 	bl	ef9c <pm_state_cpu_get_all>
    ef16:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    ef1a:	4604      	mov	r4, r0
    ef1c:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    ef20:	4b1b      	ldr	r3, [pc, #108]	; (ef90 <pm_policy_next_state+0x88>)
    ef22:	9d03      	ldr	r5, [sp, #12]
    ef24:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    ef28:	1e43      	subs	r3, r0, #1
    ef2a:	b21b      	sxth	r3, r3
    ef2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ef30:	f8df 8060 	ldr.w	r8, [pc, #96]	; ef94 <pm_policy_next_state+0x8c>
    ef34:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ef38:	b924      	cbnz	r4, ef44 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    ef3a:	46a1      	mov	r9, r4
}
    ef3c:	4648      	mov	r0, r9
    ef3e:	b005      	add	sp, #20
    ef40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef44:	46c4      	mov	ip, r8
    ef46:	4659      	mov	r1, fp
    ef48:	6868      	ldr	r0, [r5, #4]
    ef4a:	2300      	movs	r3, #0
    ef4c:	fbe0 c107 	umlal	ip, r1, r0, r7
    ef50:	4a11      	ldr	r2, [pc, #68]	; (ef98 <pm_policy_next_state+0x90>)
    ef52:	4660      	mov	r0, ip
    ef54:	f7f9 ffcc 	bl	8ef0 <__aeabi_uldivmod>
    ef58:	46c4      	mov	ip, r8
    ef5a:	4659      	mov	r1, fp
    ef5c:	9001      	str	r0, [sp, #4]
    ef5e:	68a8      	ldr	r0, [r5, #8]
    ef60:	2300      	movs	r3, #0
    ef62:	fbe0 c107 	umlal	ip, r1, r0, r7
    ef66:	4a0c      	ldr	r2, [pc, #48]	; (ef98 <pm_policy_next_state+0x90>)
    ef68:	4660      	mov	r0, ip
    ef6a:	f7f9 ffc1 	bl	8ef0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    ef6e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    ef72:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    ef74:	d001      	beq.n	ef7a <pm_policy_next_state+0x72>
    ef76:	4582      	cmp	sl, r0
    ef78:	d905      	bls.n	ef86 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    ef7a:	1c73      	adds	r3, r6, #1
    ef7c:	d0de      	beq.n	ef3c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    ef7e:	9b01      	ldr	r3, [sp, #4]
    ef80:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    ef82:	42b0      	cmp	r0, r6
    ef84:	d9da      	bls.n	ef3c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    ef86:	3c01      	subs	r4, #1
    ef88:	b2a4      	uxth	r4, r4
    ef8a:	3d0c      	subs	r5, #12
    ef8c:	e7d4      	b.n	ef38 <pm_policy_next_state+0x30>
    ef8e:	bf00      	nop
    ef90:	20008430 	.word	0x20008430
    ef94:	000f423f 	.word	0x000f423f
    ef98:	000f4240 	.word	0x000f4240

0000ef9c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    ef9c:	b908      	cbnz	r0, efa2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    ef9e:	4b02      	ldr	r3, [pc, #8]	; (efa8 <pm_state_cpu_get_all+0xc>)
    efa0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    efa2:	2000      	movs	r0, #0
    efa4:	4770      	bx	lr
    efa6:	bf00      	nop
    efa8:	00029d48 	.word	0x00029d48

0000efac <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
    efac:	4b03      	ldr	r3, [pc, #12]	; (efbc <nus_ccc_cfg_changed+0x10>)
    efae:	689b      	ldr	r3, [r3, #8]
    efb0:	b11b      	cbz	r3, efba <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
    efb2:	1e48      	subs	r0, r1, #1
    efb4:	bf18      	it	ne
    efb6:	2001      	movne	r0, #1
    efb8:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
    efba:	4770      	bx	lr
    efbc:	20020ed4 	.word	0x20020ed4

0000efc0 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
    efc0:	b510      	push	{r4, lr}
    efc2:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
    efc4:	4b03      	ldr	r3, [pc, #12]	; (efd4 <on_receive+0x14>)
{
    efc6:	4611      	mov	r1, r2
	if (nus_cb.received) {
    efc8:	681b      	ldr	r3, [r3, #0]
    efca:	b10b      	cbz	r3, efd0 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
    efcc:	4622      	mov	r2, r4
    efce:	4798      	blx	r3
}
	return len;
}
    efd0:	4620      	mov	r0, r4
    efd2:	bd10      	pop	{r4, pc}
    efd4:	20020ed4 	.word	0x20020ed4

0000efd8 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
    efd8:	4b02      	ldr	r3, [pc, #8]	; (efe4 <on_sent+0xc>)
    efda:	685b      	ldr	r3, [r3, #4]
    efdc:	b103      	cbz	r3, efe0 <on_sent+0x8>
		nus_cb.sent(conn);
    efde:	4718      	bx	r3
	}
}
    efe0:	4770      	bx	lr
    efe2:	bf00      	nop
    efe4:	20020ed4 	.word	0x20020ed4

0000efe8 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
    efe8:	b130      	cbz	r0, eff8 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
    efea:	4b04      	ldr	r3, [pc, #16]	; (effc <bt_nus_init+0x14>)
    efec:	6802      	ldr	r2, [r0, #0]
    efee:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
    eff0:	6842      	ldr	r2, [r0, #4]
    eff2:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
    eff4:	6882      	ldr	r2, [r0, #8]
    eff6:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
    eff8:	2000      	movs	r0, #0
    effa:	4770      	bx	lr
    effc:	20020ed4 	.word	0x20020ed4

0000f000 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
    f000:	b570      	push	{r4, r5, r6, lr}
    f002:	460e      	mov	r6, r1
    f004:	4615      	mov	r5, r2
    f006:	4604      	mov	r4, r0
    f008:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
    f00a:	2100      	movs	r1, #0
    f00c:	2218      	movs	r2, #24
    f00e:	4668      	mov	r0, sp
    f010:	f019 fbfe 	bl	28810 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
    f014:	490b      	ldr	r1, [pc, #44]	; (f044 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
    f016:	4b0c      	ldr	r3, [pc, #48]	; (f048 <bt_nus_send+0x48>)
	params.data = data;
    f018:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
    f01c:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
    f020:	9304      	str	r3, [sp, #16]

	if (!conn) {
    f022:	b92c      	cbnz	r4, f030 <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
    f024:	4669      	mov	r1, sp
    f026:	4620      	mov	r0, r4
    f028:	f007 f858 	bl	160dc <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
    f02c:	b006      	add	sp, #24
    f02e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
    f030:	2201      	movs	r2, #1
    f032:	4620      	mov	r0, r4
    f034:	f006 fd18 	bl	15a68 <bt_gatt_is_subscribed>
    f038:	2800      	cmp	r0, #0
    f03a:	d1f3      	bne.n	f024 <bt_nus_send+0x24>
		return -EINVAL;
    f03c:	f06f 0015 	mvn.w	r0, #21
    f040:	e7f4      	b.n	f02c <bt_nus_send+0x2c>
    f042:	bf00      	nop
    f044:	00029d70 	.word	0x00029d70
    f048:	0000efd9 	.word	0x0000efd9

0000f04c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    f04c:	4904      	ldr	r1, [pc, #16]	; (f060 <sub_bytes+0x14>)
    f04e:	1e43      	subs	r3, r0, #1
    f050:	300f      	adds	r0, #15
    f052:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    f056:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    f058:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    f05a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    f05c:	d1f9      	bne.n	f052 <sub_bytes+0x6>
	}
}
    f05e:	4770      	bx	lr
    f060:	0002b851 	.word	0x0002b851

0000f064 <tc_aes128_set_encrypt_key>:
{
    f064:	b5f0      	push	{r4, r5, r6, r7, lr}
    f066:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    f068:	4e26      	ldr	r6, [pc, #152]	; (f104 <tc_aes128_set_encrypt_key+0xa0>)
{
    f06a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    f06c:	ad01      	add	r5, sp, #4
{
    f06e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    f070:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    f072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    f074:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    f076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    f078:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    f07c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    f080:	4638      	mov	r0, r7
    f082:	2f00      	cmp	r7, #0
    f084:	d039      	beq.n	f0fa <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    f086:	2c00      	cmp	r4, #0
    f088:	d039      	beq.n	f0fe <tc_aes128_set_encrypt_key+0x9a>
    f08a:	1f38      	subs	r0, r7, #4
    f08c:	4602      	mov	r2, r0
    f08e:	4621      	mov	r1, r4
    f090:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    f092:	784b      	ldrb	r3, [r1, #1]
    f094:	780d      	ldrb	r5, [r1, #0]
    f096:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    f098:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    f09c:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    f09e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    f0a0:	432b      	orrs	r3, r5
    f0a2:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    f0a6:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    f0a8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    f0ac:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    f0b0:	d1ef      	bne.n	f092 <tc_aes128_set_encrypt_key+0x2e>
    f0b2:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    f0b4:	4c14      	ldr	r4, [pc, #80]	; (f108 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    f0b6:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    f0b8:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    f0ba:	d116      	bne.n	f0ea <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    f0bc:	f3c3 4207 	ubfx	r2, r3, #16, #8
    f0c0:	5ca5      	ldrb	r5, [r4, r2]
    f0c2:	0e1a      	lsrs	r2, r3, #24
    f0c4:	5ca2      	ldrb	r2, [r4, r2]
    f0c6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    f0ca:	f3c3 2507 	ubfx	r5, r3, #8, #8
    f0ce:	5d65      	ldrb	r5, [r4, r5]
    f0d0:	b2db      	uxtb	r3, r3
    f0d2:	5ce3      	ldrb	r3, [r4, r3]
    f0d4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    f0d8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    f0dc:	f021 0303 	bic.w	r3, r1, #3
    f0e0:	3330      	adds	r3, #48	; 0x30
    f0e2:	446b      	add	r3, sp
    f0e4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    f0e8:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    f0ea:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    f0ee:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    f0f0:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    f0f2:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    f0f4:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    f0f6:	d1de      	bne.n	f0b6 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    f0f8:	2001      	movs	r0, #1
}
    f0fa:	b00d      	add	sp, #52	; 0x34
    f0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    f0fe:	4620      	mov	r0, r4
    f100:	e7fb      	b.n	f0fa <tc_aes128_set_encrypt_key+0x96>
    f102:	bf00      	nop
    f104:	000297ec 	.word	0x000297ec
    f108:	0002b851 	.word	0x0002b851

0000f10c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    f10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    f110:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    f112:	6803      	ldr	r3, [r0, #0]
{
    f114:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    f116:	9302      	str	r3, [sp, #8]
    f118:	6843      	ldr	r3, [r0, #4]
    f11a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; f2d8 <compress+0x1cc>
    f11e:	9303      	str	r3, [sp, #12]
    f120:	6883      	ldr	r3, [r0, #8]
    f122:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    f126:	9304      	str	r3, [sp, #16]
    f128:	68c3      	ldr	r3, [r0, #12]
    f12a:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    f12c:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    f12e:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    f132:	9306      	str	r3, [sp, #24]
    f134:	6943      	ldr	r3, [r0, #20]
    f136:	9307      	str	r3, [sp, #28]
    f138:	6983      	ldr	r3, [r0, #24]
    f13a:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    f13e:	9308      	str	r3, [sp, #32]
    f140:	69c3      	ldr	r3, [r0, #28]
    f142:	4698      	mov	r8, r3
    f144:	9309      	str	r3, [sp, #36]	; 0x24
    f146:	9b08      	ldr	r3, [sp, #32]
    f148:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    f14a:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    f14c:	ab0c      	add	r3, sp, #48	; 0x30
    f14e:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    f150:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    f154:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    f156:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    f15a:	44a9      	add	r9, r5
    f15c:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    f160:	9d00      	ldr	r5, [sp, #0]
    f162:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    f166:	444b      	add	r3, r9
    f168:	ea25 0502 	bic.w	r5, r5, r2
    f16c:	ea02 090c 	and.w	r9, r2, ip
    f170:	ea85 0509 	eor.w	r5, r5, r9
    f174:	442b      	add	r3, r5
    f176:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    f178:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    f17c:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    f180:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    f184:	4025      	ands	r5, r4
    f186:	ea06 090b 	and.w	r9, r6, fp
    f18a:	ea85 0509 	eor.w	r5, r5, r9
    f18e:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    f192:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    f194:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    f196:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    f198:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    f19c:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    f19e:	46de      	mov	lr, fp
    f1a0:	f8dd 8000 	ldr.w	r8, [sp]
    f1a4:	f040 8088 	bne.w	f2b8 <compress+0x1ac>
    f1a8:	f04f 0a10 	mov.w	sl, #16
    f1ac:	494b      	ldr	r1, [pc, #300]	; (f2dc <compress+0x1d0>)
    f1ae:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    f1b0:	4651      	mov	r1, sl
    f1b2:	f10a 0a01 	add.w	sl, sl, #1
    f1b6:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    f1ba:	f00a 070f 	and.w	r7, sl, #15
    f1be:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    f1c2:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    f1c6:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    f1ca:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    f1ce:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    f1d0:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    f1d4:	f101 070e 	add.w	r7, r1, #14
    f1d8:	f007 070f 	and.w	r7, r7, #15
    f1dc:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    f1e0:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    f1e4:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    f1e6:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    f1ea:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    f1ee:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    f1f2:	f001 010f 	and.w	r1, r1, #15
    f1f6:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    f1fa:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    f1fe:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    f202:	f859 ec40 	ldr.w	lr, [r9, #-64]
    f206:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    f20a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    f20e:	4471      	add	r1, lr
		s0 = sigma0(s0);
    f210:	f8dd e004 	ldr.w	lr, [sp, #4]
    f214:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    f218:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    f21c:	4441      	add	r1, r8
		s1 = sigma1(s1);
    f21e:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    f222:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    f224:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    f228:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    f22c:	ea2c 0705 	bic.w	r7, ip, r5
    f230:	ea87 0708 	eor.w	r7, r7, r8
    f234:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    f238:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    f23c:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    f240:	4477      	add	r7, lr
    f242:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    f246:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    f24a:	4477      	add	r7, lr
    f24c:	440f      	add	r7, r1
    f24e:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    f250:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    f254:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    f256:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    f25a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    f25e:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    f262:	ea07 0703 	and.w	r7, r7, r3
    f266:	ea04 0806 	and.w	r8, r4, r6
    f26a:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    f26e:	ea87 0708 	eor.w	r7, r7, r8
    f272:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    f274:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    f276:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    f27a:	f8cd c000 	str.w	ip, [sp]
    f27e:	46b3      	mov	fp, r6
    f280:	d122      	bne.n	f2c8 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    f282:	9902      	ldr	r1, [sp, #8]
    f284:	4439      	add	r1, r7
    f286:	6001      	str	r1, [r0, #0]
    f288:	9903      	ldr	r1, [sp, #12]
    f28a:	4419      	add	r1, r3
    f28c:	9b04      	ldr	r3, [sp, #16]
    f28e:	6041      	str	r1, [r0, #4]
    f290:	4423      	add	r3, r4
    f292:	6083      	str	r3, [r0, #8]
    f294:	9b05      	ldr	r3, [sp, #20]
    f296:	4433      	add	r3, r6
    f298:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    f29a:	9b06      	ldr	r3, [sp, #24]
    f29c:	4473      	add	r3, lr
    f29e:	6103      	str	r3, [r0, #16]
    f2a0:	9b07      	ldr	r3, [sp, #28]
    f2a2:	442b      	add	r3, r5
    f2a4:	6143      	str	r3, [r0, #20]
    f2a6:	9b08      	ldr	r3, [sp, #32]
    f2a8:	4413      	add	r3, r2
    f2aa:	6183      	str	r3, [r0, #24]
    f2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2ae:	4463      	add	r3, ip
    f2b0:	61c3      	str	r3, [r0, #28]
}
    f2b2:	b01d      	add	sp, #116	; 0x74
    f2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2b8:	46b3      	mov	fp, r6
    f2ba:	f8cd c000 	str.w	ip, [sp]
    f2be:	4626      	mov	r6, r4
    f2c0:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    f2c2:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    f2c4:	462a      	mov	r2, r5
    f2c6:	e740      	b.n	f14a <compress+0x3e>
    f2c8:	4694      	mov	ip, r2
    f2ca:	4626      	mov	r6, r4
    f2cc:	462a      	mov	r2, r5
    f2ce:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    f2d0:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    f2d2:	463b      	mov	r3, r7
    f2d4:	e76c      	b.n	f1b0 <compress+0xa4>
    f2d6:	bf00      	nop
    f2d8:	00029dc0 	.word	0x00029dc0
    f2dc:	00029dfc 	.word	0x00029dfc

0000f2e0 <tc_sha256_init>:
{
    f2e0:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    f2e2:	4604      	mov	r4, r0
    f2e4:	b1c8      	cbz	r0, f31a <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    f2e6:	2270      	movs	r2, #112	; 0x70
    f2e8:	2100      	movs	r1, #0
    f2ea:	f015 f929 	bl	24540 <_set>
	s->iv[1] = 0xbb67ae85;
    f2ee:	4b0b      	ldr	r3, [pc, #44]	; (f31c <tc_sha256_init+0x3c>)
    f2f0:	4a0b      	ldr	r2, [pc, #44]	; (f320 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    f2f2:	490c      	ldr	r1, [pc, #48]	; (f324 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    f2f4:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    f2f8:	4b0b      	ldr	r3, [pc, #44]	; (f328 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    f2fa:	480c      	ldr	r0, [pc, #48]	; (f32c <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    f2fc:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    f300:	4b0b      	ldr	r3, [pc, #44]	; (f330 <tc_sha256_init+0x50>)
    f302:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    f306:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    f308:	4b0a      	ldr	r3, [pc, #40]	; (f334 <tc_sha256_init+0x54>)
    f30a:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    f30c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    f310:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    f314:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    f318:	61e3      	str	r3, [r4, #28]
}
    f31a:	bd10      	pop	{r4, pc}
    f31c:	bb67ae85 	.word	0xbb67ae85
    f320:	6a09e667 	.word	0x6a09e667
    f324:	3c6ef372 	.word	0x3c6ef372
    f328:	a54ff53a 	.word	0xa54ff53a
    f32c:	510e527f 	.word	0x510e527f
    f330:	9b05688c 	.word	0x9b05688c
    f334:	1f83d9ab 	.word	0x1f83d9ab

0000f338 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    f338:	4901      	ldr	r1, [pc, #4]	; (f340 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    f33a:	2210      	movs	r2, #16
	str	r2, [r1]
    f33c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    f33e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    f340:	e000ed10 	.word	0xe000ed10

0000f344 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    f344:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    f346:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    f348:	f380 8811 	msr	BASEPRI, r0
	isb
    f34c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    f350:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    f354:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    f356:	b662      	cpsie	i
	isb
    f358:	f3bf 8f6f 	isb	sy

	bx	lr
    f35c:	4770      	bx	lr
    f35e:	bf00      	nop

0000f360 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    f360:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    f362:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    f364:	f381 8811 	msr	BASEPRI, r1

	wfe
    f368:	bf20      	wfe

	msr	BASEPRI, r0
    f36a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    f36e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    f370:	4770      	bx	lr
    f372:	bf00      	nop

0000f374 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f374:	b570      	push	{r4, r5, r6, lr}
    f376:	4606      	mov	r6, r0

	if (esf != NULL) {
    f378:	460d      	mov	r5, r1
{
    f37a:	b086      	sub	sp, #24
	if (esf != NULL) {
    f37c:	2900      	cmp	r1, #0
    f37e:	d038      	beq.n	f3f2 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    f380:	2400      	movs	r4, #0
    f382:	688b      	ldr	r3, [r1, #8]
    f384:	2201      	movs	r2, #1
    f386:	9305      	str	r3, [sp, #20]
    f388:	684b      	ldr	r3, [r1, #4]
    f38a:	4620      	mov	r0, r4
    f38c:	9304      	str	r3, [sp, #16]
    f38e:	680b      	ldr	r3, [r1, #0]
    f390:	491b      	ldr	r1, [pc, #108]	; (f400 <z_arm_fatal_error+0x8c>)
    f392:	9303      	str	r3, [sp, #12]
    f394:	4b1b      	ldr	r3, [pc, #108]	; (f404 <z_arm_fatal_error+0x90>)
    f396:	e9cd 4400 	strd	r4, r4, [sp]
    f39a:	9302      	str	r3, [sp, #8]
    f39c:	4623      	mov	r3, r4
    f39e:	f015 fd0d 	bl	24dbc <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    f3a2:	696b      	ldr	r3, [r5, #20]
    f3a4:	2201      	movs	r2, #1
    f3a6:	9305      	str	r3, [sp, #20]
    f3a8:	692b      	ldr	r3, [r5, #16]
    f3aa:	4620      	mov	r0, r4
    f3ac:	9304      	str	r3, [sp, #16]
    f3ae:	68eb      	ldr	r3, [r5, #12]
    f3b0:	4913      	ldr	r1, [pc, #76]	; (f400 <z_arm_fatal_error+0x8c>)
    f3b2:	9303      	str	r3, [sp, #12]
    f3b4:	4b14      	ldr	r3, [pc, #80]	; (f408 <z_arm_fatal_error+0x94>)
    f3b6:	9400      	str	r4, [sp, #0]
    f3b8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f3bc:	4623      	mov	r3, r4
    f3be:	f015 fcfd 	bl	24dbc <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    f3c2:	69eb      	ldr	r3, [r5, #28]
    f3c4:	2201      	movs	r2, #1
    f3c6:	9303      	str	r3, [sp, #12]
    f3c8:	4b10      	ldr	r3, [pc, #64]	; (f40c <z_arm_fatal_error+0x98>)
    f3ca:	4620      	mov	r0, r4
    f3cc:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f3d0:	490b      	ldr	r1, [pc, #44]	; (f400 <z_arm_fatal_error+0x8c>)
    f3d2:	4623      	mov	r3, r4
    f3d4:	9400      	str	r4, [sp, #0]
    f3d6:	f015 fcf1 	bl	24dbc <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    f3da:	69ab      	ldr	r3, [r5, #24]
    f3dc:	2201      	movs	r2, #1
    f3de:	9303      	str	r3, [sp, #12]
    f3e0:	4b0b      	ldr	r3, [pc, #44]	; (f410 <z_arm_fatal_error+0x9c>)
    f3e2:	4620      	mov	r0, r4
    f3e4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f3e8:	4905      	ldr	r1, [pc, #20]	; (f400 <z_arm_fatal_error+0x8c>)
    f3ea:	4623      	mov	r3, r4
    f3ec:	9400      	str	r4, [sp, #0]
    f3ee:	f015 fce5 	bl	24dbc <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    f3f2:	4629      	mov	r1, r5
    f3f4:	4630      	mov	r0, r6
}
    f3f6:	b006      	add	sp, #24
    f3f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    f3fc:	f00e bf62 	b.w	1e2c4 <z_fatal_error>
    f400:	0002977c 	.word	0x0002977c
    f404:	0002b951 	.word	0x0002b951
    f408:	0002b980 	.word	0x0002b980
    f40c:	0002b9af 	.word	0x0002b9af
    f410:	0002b9be 	.word	0x0002b9be

0000f414 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    f414:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    f416:	2800      	cmp	r0, #0
    f418:	db07      	blt.n	f42a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f41a:	2301      	movs	r3, #1
    f41c:	0941      	lsrs	r1, r0, #5
    f41e:	4a03      	ldr	r2, [pc, #12]	; (f42c <arch_irq_enable+0x18>)
    f420:	f000 001f 	and.w	r0, r0, #31
    f424:	4083      	lsls	r3, r0
    f426:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    f42a:	4770      	bx	lr
    f42c:	e000e100 	.word	0xe000e100

0000f430 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    f430:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    f432:	2800      	cmp	r0, #0
    f434:	db0c      	blt.n	f450 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f436:	2201      	movs	r2, #1
    f438:	4906      	ldr	r1, [pc, #24]	; (f454 <arch_irq_disable+0x24>)
    f43a:	0943      	lsrs	r3, r0, #5
    f43c:	f000 001f 	and.w	r0, r0, #31
    f440:	4082      	lsls	r2, r0
    f442:	3320      	adds	r3, #32
    f444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    f448:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f44c:	f3bf 8f6f 	isb	sy
}
    f450:	4770      	bx	lr
    f452:	bf00      	nop
    f454:	e000e100 	.word	0xe000e100

0000f458 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    f458:	4b05      	ldr	r3, [pc, #20]	; (f470 <arch_irq_is_enabled+0x18>)
    f45a:	0942      	lsrs	r2, r0, #5
    f45c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    f460:	2301      	movs	r3, #1
    f462:	f000 001f 	and.w	r0, r0, #31
    f466:	fa03 f000 	lsl.w	r0, r3, r0
}
    f46a:	4010      	ands	r0, r2
    f46c:	4770      	bx	lr
    f46e:	bf00      	nop
    f470:	e000e100 	.word	0xe000e100

0000f474 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    f474:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    f476:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    f478:	2b07      	cmp	r3, #7
{
    f47a:	4604      	mov	r4, r0
    f47c:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    f47e:	d90f      	bls.n	f4a0 <z_arm_irq_priority_set+0x2c>
    f480:	235b      	movs	r3, #91	; 0x5b
    f482:	4a10      	ldr	r2, [pc, #64]	; (f4c4 <z_arm_irq_priority_set+0x50>)
    f484:	4910      	ldr	r1, [pc, #64]	; (f4c8 <z_arm_irq_priority_set+0x54>)
    f486:	4811      	ldr	r0, [pc, #68]	; (f4cc <z_arm_irq_priority_set+0x58>)
    f488:	f014 fdcb 	bl	24022 <assert_print>
    f48c:	4629      	mov	r1, r5
    f48e:	4810      	ldr	r0, [pc, #64]	; (f4d0 <z_arm_irq_priority_set+0x5c>)
    f490:	2307      	movs	r3, #7
    f492:	4622      	mov	r2, r4
    f494:	f014 fdc5 	bl	24022 <assert_print>
    f498:	215b      	movs	r1, #91	; 0x5b
    f49a:	480a      	ldr	r0, [pc, #40]	; (f4c4 <z_arm_irq_priority_set+0x50>)
    f49c:	f014 fdba 	bl	24014 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    f4a0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    f4a2:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4a4:	bfac      	ite	ge
    f4a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4aa:	4a0a      	ldrlt	r2, [pc, #40]	; (f4d4 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4ac:	ea4f 1343 	mov.w	r3, r3, lsl #5
    f4b0:	b2db      	uxtb	r3, r3
    f4b2:	bfab      	itete	ge
    f4b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4b8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4bc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f4c0:	5413      	strblt	r3, [r2, r0]
}
    f4c2:	bd38      	pop	{r3, r4, r5, pc}
    f4c4:	0002b9ec 	.word	0x0002b9ec
    f4c8:	0002ba22 	.word	0x0002ba22
    f4cc:	0002a669 	.word	0x0002a669
    f4d0:	0002ba3d 	.word	0x0002ba3d
    f4d4:	e000ed14 	.word	0xe000ed14

0000f4d8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    f4d8:	bf30      	wfi
    b z_SysNmiOnReset
    f4da:	f7ff bffd 	b.w	f4d8 <z_SysNmiOnReset>
    f4de:	bf00      	nop

0000f4e0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f4e0:	4a0b      	ldr	r2, [pc, #44]	; (f510 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    f4e2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f4e4:	4b0b      	ldr	r3, [pc, #44]	; (f514 <z_arm_prep_c+0x34>)
    f4e6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    f4ea:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    f4ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f4f0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    f4f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    f4f8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    f4fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    f500:	f00e ff96 	bl	1e430 <z_bss_zero>
	z_data_copy();
    f504:	f011 fe90 	bl	21228 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    f508:	f000 fbe8 	bl	fcdc <z_arm_interrupt_init>
	z_cstart();
    f50c:	f00e ffd0 	bl	1e4b0 <z_cstart>
    f510:	00008000 	.word	0x00008000
    f514:	e000ed00 	.word	0xe000ed00

0000f518 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    f518:	4a09      	ldr	r2, [pc, #36]	; (f540 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    f51a:	490a      	ldr	r1, [pc, #40]	; (f544 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    f51c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    f51e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    f520:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    f522:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f524:	4908      	ldr	r1, [pc, #32]	; (f548 <arch_swap+0x30>)
    f526:	684b      	ldr	r3, [r1, #4]
    f528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f52c:	604b      	str	r3, [r1, #4]
    f52e:	2300      	movs	r3, #0
    f530:	f383 8811 	msr	BASEPRI, r3
    f534:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    f538:	6893      	ldr	r3, [r2, #8]
}
    f53a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    f53c:	4770      	bx	lr
    f53e:	bf00      	nop
    f540:	20021424 	.word	0x20021424
    f544:	0002a544 	.word	0x0002a544
    f548:	e000ed00 	.word	0xe000ed00

0000f54c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    f54c:	4915      	ldr	r1, [pc, #84]	; (f5a4 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    f54e:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    f550:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    f554:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    f558:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    f55a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    f55e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f562:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    f564:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    f568:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    f56c:	4f0e      	ldr	r7, [pc, #56]	; (f5a8 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    f56e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    f572:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    f574:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    f576:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    f578:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    f57c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    f57e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    f580:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    f582:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    f586:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    f58a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    f58e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    f592:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    f596:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    f598:	f015 fc2f 	bl	24dfa <configure_builtin_stack_guard>
    pop {r2, lr}
    f59c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    f5a0:	4770      	bx	lr
    f5a2:	0000      	.short	0x0000
    ldr r1, =_kernel
    f5a4:	20021424 	.word	0x20021424
    ldr v4, =_SCS_ICSR
    f5a8:	e000ed04 	.word	0xe000ed04

0000f5ac <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    f5ac:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    f5b0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    f5b2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    f5b6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    f5ba:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    f5bc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    f5c0:	2902      	cmp	r1, #2
    beq _oops
    f5c2:	d0ff      	beq.n	f5c4 <_oops>

0000f5c4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    f5c4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    f5c6:	f015 fc09 	bl	24ddc <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    f5ca:	bd01      	pop	{r0, pc}

0000f5cc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    f5cc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    f5d0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    f5d2:	490d      	ldr	r1, [pc, #52]	; (f608 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    f5d4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    f5d8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    f5da:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    f5de:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    f5e2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    f5e4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    f5e8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    f5ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    f5f0:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    f5f4:	2300      	movs	r3, #0
    f5f6:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    f5f8:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    f5fc:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    f5fe:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    f600:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    f604:	4770      	bx	lr
    f606:	bf00      	nop
    f608:	00023cd3 	.word	0x00023cd3

0000f60c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    f60c:	4b08      	ldr	r3, [pc, #32]	; (f630 <arch_switch_to_main_thread+0x24>)
    f60e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    f610:	6e83      	ldr	r3, [r0, #104]	; 0x68
    f612:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f616:	4610      	mov	r0, r2
    f618:	f381 8809 	msr	PSP, r1
    f61c:	2100      	movs	r1, #0
    f61e:	b663      	cpsie	if
    f620:	f381 8811 	msr	BASEPRI, r1
    f624:	f3bf 8f6f 	isb	sy
    f628:	2200      	movs	r2, #0
    f62a:	2300      	movs	r3, #0
    f62c:	f014 fb51 	bl	23cd2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    f630:	20021424 	.word	0x20021424

0000f634 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    f634:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    f636:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    f638:	4a0b      	ldr	r2, [pc, #44]	; (f668 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    f63a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    f63c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    f63e:	bf1e      	ittt	ne
	movne	r1, #0
    f640:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    f642:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    f644:	f018 fec5 	blne	283d2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    f648:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    f64a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    f64e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    f652:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    f656:	4905      	ldr	r1, [pc, #20]	; (f66c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    f658:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    f65a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    f65c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    f65e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    f662:	4903      	ldr	r1, [pc, #12]	; (f670 <_isr_wrapper+0x3c>)
	bx r1
    f664:	4708      	bx	r1
    f666:	0000      	.short	0x0000
	ldr r2, =_kernel
    f668:	20021424 	.word	0x20021424
	ldr r1, =_sw_isr_table
    f66c:	0002923c 	.word	0x0002923c
	ldr r1, =z_arm_int_exit
    f670:	0000f675 	.word	0x0000f675

0000f674 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    f674:	4b04      	ldr	r3, [pc, #16]	; (f688 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    f676:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    f678:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    f67a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    f67c:	d003      	beq.n	f686 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    f67e:	4903      	ldr	r1, [pc, #12]	; (f68c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    f680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    f684:	600a      	str	r2, [r1, #0]

0000f686 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    f686:	4770      	bx	lr
	ldr r3, =_kernel
    f688:	20021424 	.word	0x20021424
	ldr r1, =_SCS_ICSR
    f68c:	e000ed04 	.word	0xe000ed04

0000f690 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f690:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    f692:	2400      	movs	r4, #0
    f694:	4b48      	ldr	r3, [pc, #288]	; (f7b8 <mem_manage_fault.constprop.0+0x128>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f696:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    f698:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f69a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    f69c:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f69e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    f6a0:	2201      	movs	r2, #1
    f6a2:	4620      	mov	r0, r4
    f6a4:	e9cd 4400 	strd	r4, r4, [sp]
    f6a8:	4944      	ldr	r1, [pc, #272]	; (f7bc <mem_manage_fault.constprop.0+0x12c>)
    f6aa:	f015 fbaa 	bl	24e02 <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f6ae:	4b44      	ldr	r3, [pc, #272]	; (f7c0 <mem_manage_fault.constprop.0+0x130>)
    f6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f6b2:	06dd      	lsls	r5, r3, #27
    f6b4:	d509      	bpl.n	f6ca <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
    f6b6:	4b43      	ldr	r3, [pc, #268]	; (f7c4 <mem_manage_fault.constprop.0+0x134>)
    f6b8:	2201      	movs	r2, #1
    f6ba:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f6be:	4620      	mov	r0, r4
    f6c0:	4623      	mov	r3, r4
    f6c2:	493e      	ldr	r1, [pc, #248]	; (f7bc <mem_manage_fault.constprop.0+0x12c>)
    f6c4:	9400      	str	r4, [sp, #0]
    f6c6:	f015 fb9c 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    f6ca:	4b3d      	ldr	r3, [pc, #244]	; (f7c0 <mem_manage_fault.constprop.0+0x130>)
    f6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f6ce:	0718      	lsls	r0, r3, #28
    f6d0:	d509      	bpl.n	f6e6 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    f6d2:	4b3d      	ldr	r3, [pc, #244]	; (f7c8 <mem_manage_fault.constprop.0+0x138>)
    f6d4:	2201      	movs	r2, #1
    f6d6:	9302      	str	r3, [sp, #8]
    f6d8:	2300      	movs	r3, #0
    f6da:	4938      	ldr	r1, [pc, #224]	; (f7bc <mem_manage_fault.constprop.0+0x12c>)
    f6dc:	4618      	mov	r0, r3
    f6de:	e9cd 3300 	strd	r3, r3, [sp]
    f6e2:	f015 fb8e 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    f6e6:	4d36      	ldr	r5, [pc, #216]	; (f7c0 <mem_manage_fault.constprop.0+0x130>)
    f6e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f6ea:	0799      	lsls	r1, r3, #30
    f6ec:	d51e      	bpl.n	f72c <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
    f6ee:	2400      	movs	r4, #0
    f6f0:	4b36      	ldr	r3, [pc, #216]	; (f7cc <mem_manage_fault.constprop.0+0x13c>)
    f6f2:	2201      	movs	r2, #1
    f6f4:	9302      	str	r3, [sp, #8]
    f6f6:	4620      	mov	r0, r4
    f6f8:	4623      	mov	r3, r4
    f6fa:	e9cd 4400 	strd	r4, r4, [sp]
    f6fe:	492f      	ldr	r1, [pc, #188]	; (f7bc <mem_manage_fault.constprop.0+0x12c>)
    f700:	f015 fb7f 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    f704:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    f706:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    f708:	0612      	lsls	r2, r2, #24
    f70a:	d50f      	bpl.n	f72c <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    f70c:	9303      	str	r3, [sp, #12]
    f70e:	4b30      	ldr	r3, [pc, #192]	; (f7d0 <mem_manage_fault.constprop.0+0x140>)
    f710:	2201      	movs	r2, #1
    f712:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f716:	4620      	mov	r0, r4
    f718:	4623      	mov	r3, r4
    f71a:	4928      	ldr	r1, [pc, #160]	; (f7bc <mem_manage_fault.constprop.0+0x12c>)
    f71c:	9400      	str	r4, [sp, #0]
    f71e:	f015 fb70 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    f722:	b11f      	cbz	r7, f72c <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    f724:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f72a:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    f72c:	4b24      	ldr	r3, [pc, #144]	; (f7c0 <mem_manage_fault.constprop.0+0x130>)
    f72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f730:	07df      	lsls	r7, r3, #31
    f732:	d509      	bpl.n	f748 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
    f734:	4b27      	ldr	r3, [pc, #156]	; (f7d4 <mem_manage_fault.constprop.0+0x144>)
    f736:	2201      	movs	r2, #1
    f738:	9302      	str	r3, [sp, #8]
    f73a:	2300      	movs	r3, #0
    f73c:	491f      	ldr	r1, [pc, #124]	; (f7bc <mem_manage_fault.constprop.0+0x12c>)
    f73e:	4618      	mov	r0, r3
    f740:	e9cd 3300 	strd	r3, r3, [sp]
    f744:	f015 fb5d 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f748:	4b1d      	ldr	r3, [pc, #116]	; (f7c0 <mem_manage_fault.constprop.0+0x130>)
    f74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f74c:	069d      	lsls	r5, r3, #26
    f74e:	d509      	bpl.n	f764 <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
    f750:	4b21      	ldr	r3, [pc, #132]	; (f7d8 <mem_manage_fault.constprop.0+0x148>)
    f752:	2201      	movs	r2, #1
    f754:	9302      	str	r3, [sp, #8]
    f756:	2300      	movs	r3, #0
    f758:	4918      	ldr	r1, [pc, #96]	; (f7bc <mem_manage_fault.constprop.0+0x12c>)
    f75a:	4618      	mov	r0, r3
    f75c:	e9cd 3300 	strd	r3, r3, [sp]
    f760:	f015 fb4f 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f764:	4b16      	ldr	r3, [pc, #88]	; (f7c0 <mem_manage_fault.constprop.0+0x130>)
    f766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f768:	06d4      	lsls	r4, r2, #27
    f76a:	d402      	bmi.n	f772 <mem_manage_fault.constprop.0+0xe2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    f76c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f76e:	0790      	lsls	r0, r2, #30
    f770:	d511      	bpl.n	f796 <mem_manage_fault.constprop.0+0x106>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    f772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f774:	06d9      	lsls	r1, r3, #27
    f776:	d50e      	bpl.n	f796 <mem_manage_fault.constprop.0+0x106>
    f778:	4918      	ldr	r1, [pc, #96]	; (f7dc <mem_manage_fault.constprop.0+0x14c>)
    f77a:	f44f 73ae 	mov.w	r3, #348	; 0x15c
    f77e:	4a18      	ldr	r2, [pc, #96]	; (f7e0 <mem_manage_fault.constprop.0+0x150>)
    f780:	4818      	ldr	r0, [pc, #96]	; (f7e4 <mem_manage_fault.constprop.0+0x154>)
    f782:	f014 fc4e 	bl	24022 <assert_print>
    f786:	4818      	ldr	r0, [pc, #96]	; (f7e8 <mem_manage_fault.constprop.0+0x158>)
    f788:	f014 fc4b 	bl	24022 <assert_print>
    f78c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    f790:	4813      	ldr	r0, [pc, #76]	; (f7e0 <mem_manage_fault.constprop.0+0x150>)
    f792:	f014 fc3f 	bl	24014 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    f796:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f798:	4b09      	ldr	r3, [pc, #36]	; (f7c0 <mem_manage_fault.constprop.0+0x130>)
    f79a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f79c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    f79e:	bf42      	ittt	mi
    f7a0:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    f7a2:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    f7a6:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    f7a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f7aa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    f7ae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    f7b0:	7030      	strb	r0, [r6, #0]

	return reason;
}
    f7b2:	b005      	add	sp, #20
    f7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7b6:	bf00      	nop
    f7b8:	0002ba7d 	.word	0x0002ba7d
    f7bc:	0002977c 	.word	0x0002977c
    f7c0:	e000ed00 	.word	0xe000ed00
    f7c4:	0002ba93 	.word	0x0002ba93
    f7c8:	0002bac6 	.word	0x0002bac6
    f7cc:	0002bad9 	.word	0x0002bad9
    f7d0:	0002baf1 	.word	0x0002baf1
    f7d4:	0002bb07 	.word	0x0002bb07
    f7d8:	0002bb26 	.word	0x0002bb26
    f7dc:	0002bb8f 	.word	0x0002bb8f
    f7e0:	0002bb55 	.word	0x0002bb55
    f7e4:	0002a669 	.word	0x0002a669
    f7e8:	0002bbd9 	.word	0x0002bbd9

0000f7ec <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    f7ee:	2400      	movs	r4, #0
    f7f0:	4b3b      	ldr	r3, [pc, #236]	; (f8e0 <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f7f2:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
    f7f4:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f7f6:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    f7f8:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f7fa:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    f7fc:	2201      	movs	r2, #1
    f7fe:	4620      	mov	r0, r4
    f800:	e9cd 4400 	strd	r4, r4, [sp]
    f804:	4937      	ldr	r1, [pc, #220]	; (f8e4 <bus_fault.constprop.0+0xf8>)
    f806:	f015 fafc 	bl	24e02 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f80a:	4b37      	ldr	r3, [pc, #220]	; (f8e8 <bus_fault.constprop.0+0xfc>)
    f80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f80e:	04db      	lsls	r3, r3, #19
    f810:	d509      	bpl.n	f826 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    f812:	4b36      	ldr	r3, [pc, #216]	; (f8ec <bus_fault.constprop.0+0x100>)
    f814:	2201      	movs	r2, #1
    f816:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f81a:	4620      	mov	r0, r4
    f81c:	4623      	mov	r3, r4
    f81e:	4931      	ldr	r1, [pc, #196]	; (f8e4 <bus_fault.constprop.0+0xf8>)
    f820:	9400      	str	r4, [sp, #0]
    f822:	f015 faee 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    f826:	4b30      	ldr	r3, [pc, #192]	; (f8e8 <bus_fault.constprop.0+0xfc>)
    f828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f82a:	051d      	lsls	r5, r3, #20
    f82c:	d509      	bpl.n	f842 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    f82e:	4b30      	ldr	r3, [pc, #192]	; (f8f0 <bus_fault.constprop.0+0x104>)
    f830:	2201      	movs	r2, #1
    f832:	9302      	str	r3, [sp, #8]
    f834:	2300      	movs	r3, #0
    f836:	492b      	ldr	r1, [pc, #172]	; (f8e4 <bus_fault.constprop.0+0xf8>)
    f838:	4618      	mov	r0, r3
    f83a:	e9cd 3300 	strd	r3, r3, [sp]
    f83e:	f015 fae0 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    f842:	4d29      	ldr	r5, [pc, #164]	; (f8e8 <bus_fault.constprop.0+0xfc>)
    f844:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f846:	059c      	lsls	r4, r3, #22
    f848:	d51e      	bpl.n	f888 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    f84a:	2400      	movs	r4, #0
    f84c:	4b29      	ldr	r3, [pc, #164]	; (f8f4 <bus_fault.constprop.0+0x108>)
    f84e:	2201      	movs	r2, #1
    f850:	4620      	mov	r0, r4
    f852:	9302      	str	r3, [sp, #8]
    f854:	e9cd 4400 	strd	r4, r4, [sp]
    f858:	4623      	mov	r3, r4
    f85a:	4922      	ldr	r1, [pc, #136]	; (f8e4 <bus_fault.constprop.0+0xf8>)
    f85c:	f015 fad1 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    f860:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    f862:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    f864:	0410      	lsls	r0, r2, #16
    f866:	d50f      	bpl.n	f888 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    f868:	9303      	str	r3, [sp, #12]
    f86a:	4b23      	ldr	r3, [pc, #140]	; (f8f8 <bus_fault.constprop.0+0x10c>)
    f86c:	2201      	movs	r2, #1
    f86e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f872:	4620      	mov	r0, r4
    f874:	4623      	mov	r3, r4
    f876:	491b      	ldr	r1, [pc, #108]	; (f8e4 <bus_fault.constprop.0+0xf8>)
    f878:	9400      	str	r4, [sp, #0]
    f87a:	f015 fac2 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    f87e:	b11f      	cbz	r7, f888 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    f880:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f882:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    f886:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    f888:	4b17      	ldr	r3, [pc, #92]	; (f8e8 <bus_fault.constprop.0+0xfc>)
    f88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f88c:	0559      	lsls	r1, r3, #21
    f88e:	d509      	bpl.n	f8a4 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    f890:	4b1a      	ldr	r3, [pc, #104]	; (f8fc <bus_fault.constprop.0+0x110>)
    f892:	2201      	movs	r2, #1
    f894:	9302      	str	r3, [sp, #8]
    f896:	2300      	movs	r3, #0
    f898:	4912      	ldr	r1, [pc, #72]	; (f8e4 <bus_fault.constprop.0+0xf8>)
    f89a:	4618      	mov	r0, r3
    f89c:	e9cd 3300 	strd	r3, r3, [sp]
    f8a0:	f015 faaf 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    f8a4:	4a10      	ldr	r2, [pc, #64]	; (f8e8 <bus_fault.constprop.0+0xfc>)
    f8a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f8a8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    f8ac:	d012      	beq.n	f8d4 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    f8ae:	4b14      	ldr	r3, [pc, #80]	; (f900 <bus_fault.constprop.0+0x114>)
    f8b0:	9302      	str	r3, [sp, #8]
    f8b2:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f8b4:	2201      	movs	r2, #1
    f8b6:	4618      	mov	r0, r3
    f8b8:	e9cd 3300 	strd	r3, r3, [sp]
    f8bc:	4909      	ldr	r1, [pc, #36]	; (f8e4 <bus_fault.constprop.0+0xf8>)
    f8be:	f015 faa0 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    f8c2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f8c4:	4a08      	ldr	r2, [pc, #32]	; (f8e8 <bus_fault.constprop.0+0xfc>)
    f8c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f8c8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    f8cc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    f8ce:	7030      	strb	r0, [r6, #0]

	return reason;
}
    f8d0:	b005      	add	sp, #20
    f8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    f8d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    f8d6:	0492      	lsls	r2, r2, #18
    f8d8:	d5f3      	bpl.n	f8c2 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f8da:	4a0a      	ldr	r2, [pc, #40]	; (f904 <bus_fault.constprop.0+0x118>)
    f8dc:	9202      	str	r2, [sp, #8]
    f8de:	e7e9      	b.n	f8b4 <bus_fault.constprop.0+0xc8>
    f8e0:	0002bc3d 	.word	0x0002bc3d
    f8e4:	0002977c 	.word	0x0002977c
    f8e8:	e000ed00 	.word	0xe000ed00
    f8ec:	0002bc53 	.word	0x0002bc53
    f8f0:	0002bac6 	.word	0x0002bac6
    f8f4:	0002bc64 	.word	0x0002bc64
    f8f8:	0002bc7d 	.word	0x0002bc7d
    f8fc:	0002bc92 	.word	0x0002bc92
    f900:	0002bcad 	.word	0x0002bcad
    f904:	0002bb26 	.word	0x0002bb26

0000f908 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    f908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    f90a:	2400      	movs	r4, #0
    f90c:	4b3b      	ldr	r3, [pc, #236]	; (f9fc <usage_fault.constprop.0+0xf4>)
    f90e:	2201      	movs	r2, #1
    f910:	9302      	str	r3, [sp, #8]
    f912:	4620      	mov	r0, r4
    f914:	4623      	mov	r3, r4
    f916:	e9cd 4400 	strd	r4, r4, [sp]
    f91a:	4939      	ldr	r1, [pc, #228]	; (fa00 <usage_fault.constprop.0+0xf8>)
    f91c:	f015 fa71 	bl	24e02 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f920:	4b38      	ldr	r3, [pc, #224]	; (fa04 <usage_fault.constprop.0+0xfc>)
    f922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f924:	019b      	lsls	r3, r3, #6
    f926:	d509      	bpl.n	f93c <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    f928:	4b37      	ldr	r3, [pc, #220]	; (fa08 <usage_fault.constprop.0+0x100>)
    f92a:	2201      	movs	r2, #1
    f92c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    f930:	4620      	mov	r0, r4
    f932:	4623      	mov	r3, r4
    f934:	4932      	ldr	r1, [pc, #200]	; (fa00 <usage_fault.constprop.0+0xf8>)
    f936:	9400      	str	r4, [sp, #0]
    f938:	f015 fa63 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f93c:	4b31      	ldr	r3, [pc, #196]	; (fa04 <usage_fault.constprop.0+0xfc>)
    f93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f940:	01dc      	lsls	r4, r3, #7
    f942:	d509      	bpl.n	f958 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    f944:	4b31      	ldr	r3, [pc, #196]	; (fa0c <usage_fault.constprop.0+0x104>)
    f946:	2201      	movs	r2, #1
    f948:	9302      	str	r3, [sp, #8]
    f94a:	2300      	movs	r3, #0
    f94c:	492c      	ldr	r1, [pc, #176]	; (fa00 <usage_fault.constprop.0+0xf8>)
    f94e:	4618      	mov	r0, r3
    f950:	e9cd 3300 	strd	r3, r3, [sp]
    f954:	f015 fa55 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    f958:	4b2a      	ldr	r3, [pc, #168]	; (fa04 <usage_fault.constprop.0+0xfc>)
    f95a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    f95c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    f960:	d00a      	beq.n	f978 <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    f962:	4b2b      	ldr	r3, [pc, #172]	; (fa10 <usage_fault.constprop.0+0x108>)
    f964:	2201      	movs	r2, #1
    f966:	9302      	str	r3, [sp, #8]
    f968:	2300      	movs	r3, #0
    f96a:	4925      	ldr	r1, [pc, #148]	; (fa00 <usage_fault.constprop.0+0xf8>)
    f96c:	4618      	mov	r0, r3
    f96e:	e9cd 3300 	strd	r3, r3, [sp]
    f972:	f015 fa46 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    f976:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f978:	4b22      	ldr	r3, [pc, #136]	; (fa04 <usage_fault.constprop.0+0xfc>)
    f97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f97c:	0318      	lsls	r0, r3, #12
    f97e:	d509      	bpl.n	f994 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
    f980:	4b24      	ldr	r3, [pc, #144]	; (fa14 <usage_fault.constprop.0+0x10c>)
    f982:	2201      	movs	r2, #1
    f984:	9302      	str	r3, [sp, #8]
    f986:	2300      	movs	r3, #0
    f988:	491d      	ldr	r1, [pc, #116]	; (fa00 <usage_fault.constprop.0+0xf8>)
    f98a:	4618      	mov	r0, r3
    f98c:	e9cd 3300 	strd	r3, r3, [sp]
    f990:	f015 fa37 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    f994:	4b1b      	ldr	r3, [pc, #108]	; (fa04 <usage_fault.constprop.0+0xfc>)
    f996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f998:	0359      	lsls	r1, r3, #13
    f99a:	d509      	bpl.n	f9b0 <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    f99c:	4b1e      	ldr	r3, [pc, #120]	; (fa18 <usage_fault.constprop.0+0x110>)
    f99e:	2201      	movs	r2, #1
    f9a0:	9302      	str	r3, [sp, #8]
    f9a2:	2300      	movs	r3, #0
    f9a4:	4916      	ldr	r1, [pc, #88]	; (fa00 <usage_fault.constprop.0+0xf8>)
    f9a6:	4618      	mov	r0, r3
    f9a8:	e9cd 3300 	strd	r3, r3, [sp]
    f9ac:	f015 fa29 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    f9b0:	4b14      	ldr	r3, [pc, #80]	; (fa04 <usage_fault.constprop.0+0xfc>)
    f9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f9b4:	039a      	lsls	r2, r3, #14
    f9b6:	d509      	bpl.n	f9cc <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    f9b8:	4b18      	ldr	r3, [pc, #96]	; (fa1c <usage_fault.constprop.0+0x114>)
    f9ba:	2201      	movs	r2, #1
    f9bc:	9302      	str	r3, [sp, #8]
    f9be:	2300      	movs	r3, #0
    f9c0:	490f      	ldr	r1, [pc, #60]	; (fa00 <usage_fault.constprop.0+0xf8>)
    f9c2:	4618      	mov	r0, r3
    f9c4:	e9cd 3300 	strd	r3, r3, [sp]
    f9c8:	f015 fa1b 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    f9cc:	4b0d      	ldr	r3, [pc, #52]	; (fa04 <usage_fault.constprop.0+0xfc>)
    f9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f9d0:	03db      	lsls	r3, r3, #15
    f9d2:	d509      	bpl.n	f9e8 <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    f9d4:	4b12      	ldr	r3, [pc, #72]	; (fa20 <usage_fault.constprop.0+0x118>)
    f9d6:	2201      	movs	r2, #1
    f9d8:	9302      	str	r3, [sp, #8]
    f9da:	2300      	movs	r3, #0
    f9dc:	4908      	ldr	r1, [pc, #32]	; (fa00 <usage_fault.constprop.0+0xf8>)
    f9de:	4618      	mov	r0, r3
    f9e0:	e9cd 3300 	strd	r3, r3, [sp]
    f9e4:	f015 fa0d 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f9e8:	4a06      	ldr	r2, [pc, #24]	; (fa04 <usage_fault.constprop.0+0xfc>)

	return reason;
}
    f9ea:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f9ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f9ee:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    f9f2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    f9f6:	6293      	str	r3, [r2, #40]	; 0x28
}
    f9f8:	b004      	add	sp, #16
    f9fa:	bd10      	pop	{r4, pc}
    f9fc:	0002bcc5 	.word	0x0002bcc5
    fa00:	0002977c 	.word	0x0002977c
    fa04:	e000ed00 	.word	0xe000ed00
    fa08:	0002bcdd 	.word	0x0002bcdd
    fa0c:	0002bcf0 	.word	0x0002bcf0
    fa10:	0002bd0a 	.word	0x0002bd0a
    fa14:	0002bd34 	.word	0x0002bd34
    fa18:	0002bd52 	.word	0x0002bd52
    fa1c:	0002bd77 	.word	0x0002bd77
    fa20:	0002bd91 	.word	0x0002bd91

0000fa24 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    fa24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    fa28:	4b8e      	ldr	r3, [pc, #568]	; (fc64 <z_arm_fault+0x240>)
{
    fa2a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    fa2c:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
    fa30:	4688      	mov	r8, r1
    fa32:	4616      	mov	r6, r2
    fa34:	2300      	movs	r3, #0
    fa36:	b090      	sub	sp, #64	; 0x40
    fa38:	f3ca 0708 	ubfx	r7, sl, #0, #9
    fa3c:	f383 8811 	msr	BASEPRI, r3
    fa40:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    fa44:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    fa48:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    fa4c:	d00e      	beq.n	fa6c <z_arm_fault+0x48>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    fa4e:	4986      	ldr	r1, [pc, #536]	; (fc68 <z_arm_fault+0x244>)
    fa50:	f44f 6384 	mov.w	r3, #1056	; 0x420
    fa54:	4a85      	ldr	r2, [pc, #532]	; (fc6c <z_arm_fault+0x248>)
    fa56:	4886      	ldr	r0, [pc, #536]	; (fc70 <z_arm_fault+0x24c>)
    fa58:	f014 fae3 	bl	24022 <assert_print>
    fa5c:	4885      	ldr	r0, [pc, #532]	; (fc74 <z_arm_fault+0x250>)
    fa5e:	f014 fae0 	bl	24022 <assert_print>
    fa62:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
    fa66:	4881      	ldr	r0, [pc, #516]	; (fc6c <z_arm_fault+0x248>)
    fa68:	f014 fad4 	bl	24014 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    fa6c:	f012 0401 	ands.w	r4, r2, #1
    fa70:	d1ed      	bne.n	fa4e <z_arm_fault+0x2a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    fa72:	0650      	lsls	r0, r2, #25
    fa74:	d404      	bmi.n	fa80 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    fa76:	0711      	lsls	r1, r2, #28
    fa78:	d40e      	bmi.n	fa98 <z_arm_fault+0x74>
			*nested_exc = true;
    fa7a:	f04f 0901 	mov.w	r9, #1
    fa7e:	e00e      	b.n	fa9e <z_arm_fault+0x7a>
		PR_FAULT_INFO("Exception occurred in Secure State");
    fa80:	4b7d      	ldr	r3, [pc, #500]	; (fc78 <z_arm_fault+0x254>)
    fa82:	2201      	movs	r2, #1
    fa84:	e9cd 4301 	strd	r4, r3, [sp, #4]
    fa88:	4620      	mov	r0, r4
    fa8a:	4623      	mov	r3, r4
    fa8c:	497b      	ldr	r1, [pc, #492]	; (fc7c <z_arm_fault+0x258>)
    fa8e:	9400      	str	r4, [sp, #0]
    fa90:	f015 f9b7 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    fa94:	0772      	lsls	r2, r6, #29
    fa96:	d500      	bpl.n	fa9a <z_arm_fault+0x76>
			ptr_esf = (z_arch_esf_t *)psp;
    fa98:	4645      	mov	r5, r8
	*nested_exc = false;
    fa9a:	f04f 0900 	mov.w	r9, #0
	__ASSERT(esf != NULL,
    fa9e:	2d00      	cmp	r5, #0
    faa0:	d0d5      	beq.n	fa4e <z_arm_fault+0x2a>
	*recoverable = false;
    faa2:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    faa6:	1efb      	subs	r3, r7, #3
	*recoverable = false;
    faa8:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    faac:	2b09      	cmp	r3, #9
    faae:	f200 80bf 	bhi.w	fc30 <z_arm_fault+0x20c>
    fab2:	e8df f003 	tbb	[pc, r3]
    fab6:	b305      	.short	0xb305
    fab8:	bdbd96b7 	.word	0xbdbd96b7
    fabc:	bbbdbdbd 	.word	0xbbbdbdbd
	PR_FAULT_INFO("***** HARD FAULT *****");
    fac0:	4b6f      	ldr	r3, [pc, #444]	; (fc80 <z_arm_fault+0x25c>)
    fac2:	2201      	movs	r2, #1
    fac4:	e9cd 8301 	strd	r8, r3, [sp, #4]
    fac8:	2300      	movs	r3, #0
    faca:	496c      	ldr	r1, [pc, #432]	; (fc7c <z_arm_fault+0x258>)
    facc:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    face:	4f65      	ldr	r7, [pc, #404]	; (fc64 <z_arm_fault+0x240>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    fad0:	f8cd 8000 	str.w	r8, [sp]
    fad4:	f015 f995 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
    fad8:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    fadc:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    fade:	f016 0602 	ands.w	r6, r6, #2
    fae2:	d005      	beq.n	faf0 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
    fae4:	4b67      	ldr	r3, [pc, #412]	; (fc84 <z_arm_fault+0x260>)
	PR_FAULT_INFO(
    fae6:	e9cd 8301 	strd	r8, r3, [sp, #4]
    faea:	f8cd 8000 	str.w	r8, [sp]
    faee:	e006      	b.n	fafe <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    faf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    faf2:	2b00      	cmp	r3, #0
    faf4:	da0a      	bge.n	fb0c <z_arm_fault+0xe8>
		PR_EXC("  Debug event");
    faf6:	4b64      	ldr	r3, [pc, #400]	; (fc88 <z_arm_fault+0x264>)
    faf8:	9600      	str	r6, [sp, #0]
    fafa:	e9cd 6301 	strd	r6, r3, [sp, #4]
	PR_FAULT_INFO(
    fafe:	2300      	movs	r3, #0
    fb00:	2201      	movs	r2, #1
    fb02:	4618      	mov	r0, r3
    fb04:	495d      	ldr	r1, [pc, #372]	; (fc7c <z_arm_fault+0x258>)
    fb06:	f015 f97c 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
}
    fb0a:	e03b      	b.n	fb84 <z_arm_fault+0x160>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fb0e:	005b      	lsls	r3, r3, #1
    fb10:	d577      	bpl.n	fc02 <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
    fb12:	4b5e      	ldr	r3, [pc, #376]	; (fc8c <z_arm_fault+0x268>)
    fb14:	2201      	movs	r2, #1
    fb16:	e9cd 6301 	strd	r6, r3, [sp, #4]
    fb1a:	4630      	mov	r0, r6
    fb1c:	4633      	mov	r3, r6
    fb1e:	4957      	ldr	r1, [pc, #348]	; (fc7c <z_arm_fault+0x258>)
    fb20:	9600      	str	r6, [sp, #0]
    fb22:	f015 f96e 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    fb26:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    fb28:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    fb2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fb2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    fb30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fb34:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    fb38:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    fb3a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    fb3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    fb42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    fb44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fb48:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    fb4c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    fb50:	429a      	cmp	r2, r3
    fb52:	d00a      	beq.n	fb6a <z_arm_fault+0x146>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    fb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb56:	b2db      	uxtb	r3, r3
    fb58:	2b00      	cmp	r3, #0
    fb5a:	d034      	beq.n	fbc6 <z_arm_fault+0x1a2>
			reason = mem_manage_fault(esf, 1, recoverable);
    fb5c:	2001      	movs	r0, #1
    fb5e:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
    fb62:	f7ff fd95 	bl	f690 <mem_manage_fault.constprop.0>
    fb66:	4604      	mov	r4, r0
		break;
    fb68:	e00c      	b.n	fb84 <z_arm_fault+0x160>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    fb6a:	682b      	ldr	r3, [r5, #0]
    fb6c:	2201      	movs	r2, #1
    fb6e:	9303      	str	r3, [sp, #12]
    fb70:	4b47      	ldr	r3, [pc, #284]	; (fc90 <z_arm_fault+0x26c>)
    fb72:	4630      	mov	r0, r6
    fb74:	e9cd 6301 	strd	r6, r3, [sp, #4]
    fb78:	4940      	ldr	r1, [pc, #256]	; (fc7c <z_arm_fault+0x258>)
    fb7a:	4633      	mov	r3, r6
    fb7c:	9600      	str	r6, [sp, #0]
    fb7e:	f015 f940 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
    fb82:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    fb84:	f89d 301f 	ldrb.w	r3, [sp, #31]
    fb88:	b9d3      	cbnz	r3, fbc0 <z_arm_fault+0x19c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    fb8a:	aa08      	add	r2, sp, #32
    fb8c:	f105 0620 	add.w	r6, r5, #32
    fb90:	4613      	mov	r3, r2
    fb92:	6828      	ldr	r0, [r5, #0]
    fb94:	6869      	ldr	r1, [r5, #4]
    fb96:	3508      	adds	r5, #8
    fb98:	c303      	stmia	r3!, {r0, r1}
    fb9a:	42b5      	cmp	r5, r6
    fb9c:	461a      	mov	r2, r3
    fb9e:	d1f7      	bne.n	fb90 <z_arm_fault+0x16c>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    fba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fba2:	f1b9 0f00 	cmp.w	r9, #0
    fba6:	d057      	beq.n	fc58 <z_arm_fault+0x234>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    fba8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    fbac:	b922      	cbnz	r2, fbb8 <z_arm_fault+0x194>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    fbae:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    fbb2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    fbb6:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    fbb8:	4620      	mov	r0, r4
    fbba:	a908      	add	r1, sp, #32
    fbbc:	f7ff fbda 	bl	f374 <z_arm_fatal_error>
}
    fbc0:	b010      	add	sp, #64	; 0x40
    fbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    fbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbc8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    fbcc:	d005      	beq.n	fbda <z_arm_fault+0x1b6>
			reason = bus_fault(esf, 1, recoverable);
    fbce:	2001      	movs	r0, #1
    fbd0:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
    fbd4:	f7ff fe0a 	bl	f7ec <bus_fault.constprop.0>
    fbd8:	e7c5      	b.n	fb66 <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    fbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    fbe0:	d302      	bcc.n	fbe8 <z_arm_fault+0x1c4>
		reason = usage_fault(esf);
    fbe2:	f7ff fe91 	bl	f908 <usage_fault.constprop.0>
    fbe6:	e7be      	b.n	fb66 <z_arm_fault+0x142>
			__ASSERT(0,
    fbe8:	492a      	ldr	r1, [pc, #168]	; (fc94 <z_arm_fault+0x270>)
    fbea:	f240 23f2 	movw	r3, #754	; 0x2f2
    fbee:	4a1f      	ldr	r2, [pc, #124]	; (fc6c <z_arm_fault+0x248>)
    fbf0:	481f      	ldr	r0, [pc, #124]	; (fc70 <z_arm_fault+0x24c>)
    fbf2:	f014 fa16 	bl	24022 <assert_print>
    fbf6:	4828      	ldr	r0, [pc, #160]	; (fc98 <z_arm_fault+0x274>)
    fbf8:	f014 fa13 	bl	24022 <assert_print>
    fbfc:	f240 21f2 	movw	r1, #754	; 0x2f2
    fc00:	e731      	b.n	fa66 <z_arm_fault+0x42>
		__ASSERT(0,
    fc02:	4924      	ldr	r1, [pc, #144]	; (fc94 <z_arm_fault+0x270>)
    fc04:	f240 23f6 	movw	r3, #758	; 0x2f6
    fc08:	4a18      	ldr	r2, [pc, #96]	; (fc6c <z_arm_fault+0x248>)
    fc0a:	4819      	ldr	r0, [pc, #100]	; (fc70 <z_arm_fault+0x24c>)
    fc0c:	f014 fa09 	bl	24022 <assert_print>
    fc10:	4822      	ldr	r0, [pc, #136]	; (fc9c <z_arm_fault+0x278>)
    fc12:	f014 fa06 	bl	24022 <assert_print>
    fc16:	f240 21f6 	movw	r1, #758	; 0x2f6
    fc1a:	e724      	b.n	fa66 <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
    fc1c:	2000      	movs	r0, #0
    fc1e:	f10d 011f 	add.w	r1, sp, #31
    fc22:	e79e      	b.n	fb62 <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    fc24:	2000      	movs	r0, #0
    fc26:	f10d 011f 	add.w	r1, sp, #31
    fc2a:	e7d3      	b.n	fbd4 <z_arm_fault+0x1b0>
	PR_FAULT_INFO(
    fc2c:	4b1c      	ldr	r3, [pc, #112]	; (fca0 <z_arm_fault+0x27c>)
    fc2e:	e75a      	b.n	fae6 <z_arm_fault+0xc2>
	PR_FAULT_INFO("***** %s %d) *****",
    fc30:	4a1c      	ldr	r2, [pc, #112]	; (fca4 <z_arm_fault+0x280>)
    fc32:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
    fc36:	4b1c      	ldr	r3, [pc, #112]	; (fca8 <z_arm_fault+0x284>)
    fc38:	bf18      	it	ne
    fc3a:	4613      	movne	r3, r2
    fc3c:	3f10      	subs	r7, #16
    fc3e:	e9cd 3703 	strd	r3, r7, [sp, #12]
    fc42:	4b1a      	ldr	r3, [pc, #104]	; (fcac <z_arm_fault+0x288>)
    fc44:	2201      	movs	r2, #1
    fc46:	9302      	str	r3, [sp, #8]
    fc48:	2300      	movs	r3, #0
    fc4a:	490c      	ldr	r1, [pc, #48]	; (fc7c <z_arm_fault+0x258>)
    fc4c:	4618      	mov	r0, r3
    fc4e:	e9cd 3300 	strd	r3, r3, [sp]
    fc52:	f015 f8d6 	bl	24e02 <z_log_msg_runtime_create.constprop.0>
}
    fc56:	e795      	b.n	fb84 <z_arm_fault+0x160>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    fc58:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    fc5c:	f023 0301 	bic.w	r3, r3, #1
    fc60:	e7a9      	b.n	fbb6 <z_arm_fault+0x192>
    fc62:	bf00      	nop
    fc64:	e000ed00 	.word	0xe000ed00
    fc68:	0002bdea 	.word	0x0002bdea
    fc6c:	0002bb55 	.word	0x0002bb55
    fc70:	0002a669 	.word	0x0002a669
    fc74:	0002bdfd 	.word	0x0002bdfd
    fc78:	0002be3b 	.word	0x0002be3b
    fc7c:	0002977c 	.word	0x0002977c
    fc80:	0002be5e 	.word	0x0002be5e
    fc84:	0002be75 	.word	0x0002be75
    fc88:	0002be96 	.word	0x0002be96
    fc8c:	0002bea4 	.word	0x0002bea4
    fc90:	0002bec3 	.word	0x0002bec3
    fc94:	0002fb7c 	.word	0x0002fb7c
    fc98:	0002bedf 	.word	0x0002bedf
    fc9c:	0002bf03 	.word	0x0002bf03
    fca0:	0002bf33 	.word	0x0002bf33
    fca4:	0002bdd1 	.word	0x0002bdd1
    fca8:	0002bdbc 	.word	0x0002bdbc
    fcac:	0002bf57 	.word	0x0002bf57

0000fcb0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    fcb0:	4b04      	ldr	r3, [pc, #16]	; (fcc4 <z_arm_fault_init+0x14>)
    fcb2:	695a      	ldr	r2, [r3, #20]
    fcb4:	f042 0210 	orr.w	r2, r2, #16
    fcb8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    fcba:	695a      	ldr	r2, [r3, #20]
    fcbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    fcc0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    fcc2:	4770      	bx	lr
    fcc4:	e000ed00 	.word	0xe000ed00

0000fcc8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    fcc8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    fccc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    fcd0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    fcd2:	4672      	mov	r2, lr
	bl z_arm_fault
    fcd4:	f7ff fea6 	bl	fa24 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    fcd8:	bd01      	pop	{r0, pc}
    fcda:	bf00      	nop

0000fcdc <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    fcdc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fcde:	2120      	movs	r1, #32
    fce0:	4803      	ldr	r0, [pc, #12]	; (fcf0 <z_arm_interrupt_init+0x14>)
    fce2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    fce4:	3301      	adds	r3, #1
    fce6:	2b45      	cmp	r3, #69	; 0x45
    fce8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    fcec:	d1f9      	bne.n	fce2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    fcee:	4770      	bx	lr
    fcf0:	e000e100 	.word	0xe000e100

0000fcf4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    fcf4:	2000      	movs	r0, #0
    msr CONTROL, r0
    fcf6:	f380 8814 	msr	CONTROL, r0
    isb
    fcfa:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    fcfe:	2000      	movs	r0, #0
    msr MSPLIM, r0
    fd00:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    fd04:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    fd08:	f7fd ffb4 	bl	dc74 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    fd0c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    fd0e:	490e      	ldr	r1, [pc, #56]	; (fd48 <__start+0x54>)
    str r0, [r1]
    fd10:	6008      	str	r0, [r1, #0]
    dsb
    fd12:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    fd16:	480d      	ldr	r0, [pc, #52]	; (fd4c <__start+0x58>)
    msr msp, r0
    fd18:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    fd1c:	f000 f83e 	bl	fd9c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fd20:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fd22:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    fd26:	480a      	ldr	r0, [pc, #40]	; (fd50 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    fd28:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    fd2c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    fd2e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    fd32:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    fd36:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    fd38:	4308      	orrs	r0, r1
    msr CONTROL, r0
    fd3a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    fd3e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    fd42:	f7ff fbcd 	bl	f4e0 <z_arm_prep_c>
    fd46:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    fd48:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    fd4c:	20033018 	.word	0x20033018
    ldr r0, =z_interrupt_stacks
    fd50:	200322d8 	.word	0x200322d8

0000fd54 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    fd54:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    fd58:	4905      	ldr	r1, [pc, #20]	; (fd70 <sys_arch_reboot+0x1c>)
    fd5a:	4b06      	ldr	r3, [pc, #24]	; (fd74 <sys_arch_reboot+0x20>)
    fd5c:	68ca      	ldr	r2, [r1, #12]
    fd5e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    fd62:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    fd64:	60cb      	str	r3, [r1, #12]
    fd66:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    fd6a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    fd6c:	e7fd      	b.n	fd6a <sys_arch_reboot+0x16>
    fd6e:	bf00      	nop
    fd70:	e000ed00 	.word	0xe000ed00
    fd74:	05fa0004 	.word	0x05fa0004

0000fd78 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    fd78:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    fd7a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    fd7c:	4906      	ldr	r1, [pc, #24]	; (fd98 <z_arm_clear_arm_mpu_config+0x20>)
    fd7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    fd82:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    fd86:	4293      	cmp	r3, r2
    fd88:	db00      	blt.n	fd8c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    fd8a:	4770      	bx	lr
  mpu->RNR = rnr;
    fd8c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    fd90:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    fd94:	3301      	adds	r3, #1
    fd96:	e7f6      	b.n	fd86 <z_arm_clear_arm_mpu_config+0xe>
    fd98:	e000ed00 	.word	0xe000ed00

0000fd9c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    fd9c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    fd9e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    fda0:	2400      	movs	r4, #0
    fda2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    fda6:	f7ff ffe7 	bl	fd78 <z_arm_clear_arm_mpu_config>
    fdaa:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    fdac:	f04f 30ff 	mov.w	r0, #4294967295
    fdb0:	4a0c      	ldr	r2, [pc, #48]	; (fde4 <z_arm_init_arch_hw_at_boot+0x48>)
    fdb2:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    fdb6:	3301      	adds	r3, #1
    fdb8:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    fdba:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    fdbe:	d1f8      	bne.n	fdb2 <z_arm_init_arch_hw_at_boot+0x16>
    fdc0:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    fdc2:	f04f 30ff 	mov.w	r0, #4294967295
    fdc6:	4a07      	ldr	r2, [pc, #28]	; (fde4 <z_arm_init_arch_hw_at_boot+0x48>)
    fdc8:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    fdcc:	3301      	adds	r3, #1
    fdce:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    fdd0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    fdd4:	d1f8      	bne.n	fdc8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    fdd6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    fdd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fddc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    fde0:	bd10      	pop	{r4, pc}
    fde2:	bf00      	nop
    fde4:	e000e100 	.word	0xe000e100

0000fde8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    fde8:	4b08      	ldr	r3, [pc, #32]	; (fe0c <z_impl_k_thread_abort+0x24>)
    fdea:	689b      	ldr	r3, [r3, #8]
    fdec:	4283      	cmp	r3, r0
    fdee:	d10b      	bne.n	fe08 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fdf0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    fdf4:	b143      	cbz	r3, fe08 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    fdf6:	4b06      	ldr	r3, [pc, #24]	; (fe10 <z_impl_k_thread_abort+0x28>)
    fdf8:	685a      	ldr	r2, [r3, #4]
    fdfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    fdfe:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    fe00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fe02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    fe06:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    fe08:	f011 b8d6 	b.w	20fb8 <z_thread_abort>
    fe0c:	20021424 	.word	0x20021424
    fe10:	e000ed00 	.word	0xe000ed00

0000fe14 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    fe14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    fe16:	4c09      	ldr	r4, [pc, #36]	; (fe3c <z_arm_configure_static_mpu_regions+0x28>)
    fe18:	4a09      	ldr	r2, [pc, #36]	; (fe40 <z_arm_configure_static_mpu_regions+0x2c>)
    fe1a:	4623      	mov	r3, r4
    fe1c:	2101      	movs	r1, #1
    fe1e:	4809      	ldr	r0, [pc, #36]	; (fe44 <z_arm_configure_static_mpu_regions+0x30>)
    fe20:	f000 f918 	bl	10054 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    fe24:	2300      	movs	r3, #0
    fe26:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    fe28:	4b07      	ldr	r3, [pc, #28]	; (fe48 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    fe2a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    fe2c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    fe2e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    fe30:	9301      	str	r3, [sp, #4]
    fe32:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    fe34:	f000 f932 	bl	1009c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    fe38:	b004      	add	sp, #16
    fe3a:	bd10      	pop	{r4, pc}
    fe3c:	20070000 	.word	0x20070000
    fe40:	20008000 	.word	0x20008000
    fe44:	00029ec0 	.word	0x00029ec0
    fe48:	20008d58 	.word	0x20008d58

0000fe4c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    fe4c:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    fe4e:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    fe50:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    fe52:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    fe56:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    fe5a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    fe5c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    fe5e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    fe60:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    fe64:	4905      	ldr	r1, [pc, #20]	; (fe7c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    fe66:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    fe6a:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    fe6e:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    fe72:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    fe76:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    fe7a:	bd10      	pop	{r4, pc}
    fe7c:	e000ed00 	.word	0xe000ed00

0000fe80 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    fe80:	2807      	cmp	r0, #7
{
    fe82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fe84:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
    fe86:	d90f      	bls.n	fea8 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    fe88:	4b09      	ldr	r3, [pc, #36]	; (feb0 <region_allocate_and_init+0x30>)
    fe8a:	9003      	str	r0, [sp, #12]
    fe8c:	9302      	str	r3, [sp, #8]
    fe8e:	2300      	movs	r3, #0
    fe90:	2201      	movs	r2, #1
    fe92:	4618      	mov	r0, r3
    fe94:	e9cd 3300 	strd	r3, r3, [sp]
    fe98:	4906      	ldr	r1, [pc, #24]	; (feb4 <region_allocate_and_init+0x34>)
    fe9a:	f014 ffcd 	bl	24e38 <z_log_msg_runtime_create.constprop.0>
    fe9e:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    fea2:	4620      	mov	r0, r4
    fea4:	b004      	add	sp, #16
    fea6:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
    fea8:	f7ff ffd0 	bl	fe4c <region_init>
	return index;
    feac:	e7f9      	b.n	fea2 <region_allocate_and_init+0x22>
    feae:	bf00      	nop
    feb0:	0002bf6e 	.word	0x0002bf6e
    feb4:	00029764 	.word	0x00029764

0000feb8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    feb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    febc:	4689      	mov	r9, r1
    febe:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    fec0:	4606      	mov	r6, r0
    fec2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    fec6:	4d54      	ldr	r5, [pc, #336]	; (10018 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x18>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    fec8:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
    feca:	45c8      	cmp	r8, r9
    fecc:	da2d      	bge.n	ff2a <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
    fece:	f8d6 a004 	ldr.w	sl, [r6, #4]
    fed2:	f1ba 0f00 	cmp.w	sl, #0
    fed6:	d04a      	beq.n	ff6e <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
    fed8:	f1ba 0f1f 	cmp.w	sl, #31
    fedc:	d917      	bls.n	ff0e <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
    fede:	f01a 0f1f 	tst.w	sl, #31
    fee2:	d114      	bne.n	ff0e <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
    fee4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    fee8:	f01b 0f1f 	tst.w	fp, #31
    feec:	d10f      	bne.n	ff0e <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    feee:	4658      	mov	r0, fp
    fef0:	f014 ff99 	bl	24e26 <arm_cmse_mpu_region_get>
    fef4:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    fef6:	eb0a 000b 	add.w	r0, sl, fp
    fefa:	3801      	subs	r0, #1
    fefc:	f014 ff93 	bl	24e26 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    ff00:	4287      	cmp	r7, r0
    ff02:	d016      	beq.n	ff32 <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    ff04:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    ff08:	4b44      	ldr	r3, [pc, #272]	; (1001c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c>)
    ff0a:	9703      	str	r7, [sp, #12]
    ff0c:	e002      	b.n	ff14 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
    ff0e:	4b44      	ldr	r3, [pc, #272]	; (10020 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x20>)
    ff10:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
    ff14:	9302      	str	r3, [sp, #8]
    ff16:	2300      	movs	r3, #0
    ff18:	2201      	movs	r2, #1
    ff1a:	4618      	mov	r0, r3
    ff1c:	e9cd 3300 	strd	r3, r3, [sp]
    ff20:	4940      	ldr	r1, [pc, #256]	; (10024 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x24>)
    ff22:	f014 ff89 	bl	24e38 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
    ff26:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    ff2a:	4620      	mov	r0, r4
    ff2c:	b009      	add	sp, #36	; 0x24
    ff2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    ff32:	f117 0f16 	cmn.w	r7, #22
    ff36:	d0e7      	beq.n	ff08 <mpu_configure_regions_and_partition.constprop.0+0x50>
    ff38:	42bc      	cmp	r4, r7
    ff3a:	dde5      	ble.n	ff08 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
    ff3c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    ff40:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    ff44:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    ff48:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    ff4c:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    ff50:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    ff54:	e9d6 3200 	ldrd	r3, r2, [r6]
    ff58:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    ff5a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    ff5c:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    ff60:	d11d      	bne.n	ff9e <mpu_configure_regions_and_partition.constprop.0+0xe6>
    ff62:	45d3      	cmp	fp, sl
    ff64:	d107      	bne.n	ff76 <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
    ff66:	4631      	mov	r1, r6
    ff68:	b2f8      	uxtb	r0, r7
    ff6a:	f014 ff75 	bl	24e58 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    ff6e:	f108 0801 	add.w	r8, r8, #1
    ff72:	360c      	adds	r6, #12
    ff74:	e7a9      	b.n	feca <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    ff76:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    ff78:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    ff7c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    ff80:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    ff84:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    ff88:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    ff8a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    ff8e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    ff90:	f014 ff62 	bl	24e58 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    ff94:	f110 0f16 	cmn.w	r0, #22
    ff98:	d0c5      	beq.n	ff26 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
    ff9a:	1c44      	adds	r4, r0, #1
    ff9c:	e7e7      	b.n	ff6e <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
    ff9e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    ffa2:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    ffa6:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    ffa8:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    ffac:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    ffb0:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    ffb2:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    ffb4:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    ffb6:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    ffb8:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    ffbc:	d0e8      	beq.n	ff90 <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
    ffbe:	f014 ff4b 	bl	24e58 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    ffc2:	f110 0f16 	cmn.w	r0, #22
    ffc6:	d0ae      	beq.n	ff26 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
    ffc8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    ffcc:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    ffd0:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
    ffd4:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
    ffd8:	f362 0304 	bfi	r3, r2, #0, #5
    ffdc:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
    ffe0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    ffe4:	f89d 2018 	ldrb.w	r2, [sp, #24]
    ffe8:	085b      	lsrs	r3, r3, #1
    ffea:	f363 1247 	bfi	r2, r3, #5, #3
    ffee:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
    fff2:	e9d6 3200 	ldrd	r3, r2, [r6]
    fff6:	4413      	add	r3, r2
    fff8:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    fffa:	f023 031f 	bic.w	r3, r3, #31
    fffe:	445b      	add	r3, fp
   10000:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   10004:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   10006:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   1000a:	a904      	add	r1, sp, #16
   1000c:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   1000e:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   10010:	f7ff ff36 	bl	fe80 <region_allocate_and_init>
   10014:	e7be      	b.n	ff94 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   10016:	bf00      	nop
   10018:	e000ed00 	.word	0xe000ed00
   1001c:	0002bfb7 	.word	0x0002bfb7
   10020:	0002bf94 	.word	0x0002bf94
   10024:	00029764 	.word	0x00029764

00010028 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   10028:	2205      	movs	r2, #5
   1002a:	4b04      	ldr	r3, [pc, #16]	; (1003c <arm_core_mpu_enable+0x14>)
   1002c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   10030:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10034:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   10038:	4770      	bx	lr
   1003a:	bf00      	nop
   1003c:	e000ed00 	.word	0xe000ed00

00010040 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   10040:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   10044:	2200      	movs	r2, #0
   10046:	4b02      	ldr	r3, [pc, #8]	; (10050 <arm_core_mpu_disable+0x10>)
   10048:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1004c:	4770      	bx	lr
   1004e:	bf00      	nop
   10050:	e000ed00 	.word	0xe000ed00

00010054 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   10054:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   10056:	4d0c      	ldr	r5, [pc, #48]	; (10088 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   10058:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1005a:	782a      	ldrb	r2, [r5, #0]
   1005c:	f7ff ff2c 	bl	feb8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10060:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   10062:	3016      	adds	r0, #22
   10064:	d10f      	bne.n	10086 <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   10066:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1006a:	4a08      	ldr	r2, [pc, #32]	; (1008c <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1006c:	4908      	ldr	r1, [pc, #32]	; (10090 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   1006e:	4809      	ldr	r0, [pc, #36]	; (10094 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   10070:	f013 ffd7 	bl	24022 <assert_print>
   10074:	4621      	mov	r1, r4
   10076:	4808      	ldr	r0, [pc, #32]	; (10098 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   10078:	f013 ffd3 	bl	24022 <assert_print>
   1007c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   10080:	4802      	ldr	r0, [pc, #8]	; (1008c <arm_core_mpu_configure_static_mpu_regions+0x38>)
   10082:	f013 ffc7 	bl	24014 <assert_post_action>
			regions_num);
	}
}
   10086:	bd38      	pop	{r3, r4, r5, pc}
   10088:	20021ca2 	.word	0x20021ca2
   1008c:	0002bfda 	.word	0x0002bfda
   10090:	0002fb7c 	.word	0x0002fb7c
   10094:	0002a669 	.word	0x0002a669
   10098:	0002c011 	.word	0x0002c011

0001009c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1009c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   100a0:	4e31      	ldr	r6, [pc, #196]	; (10168 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   100a2:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   100a4:	4605      	mov	r5, r0
   100a6:	f04f 0800 	mov.w	r8, #0
   100aa:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   100ac:	4f2f      	ldr	r7, [pc, #188]	; (1016c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   100ae:	45c8      	cmp	r8, r9
   100b0:	db02      	blt.n	100b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   100b2:	b003      	add	sp, #12
   100b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   100b8:	f8d5 a004 	ldr.w	sl, [r5, #4]
   100bc:	f1ba 0f00 	cmp.w	sl, #0
   100c0:	d04c      	beq.n	1015c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   100c2:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   100c4:	4608      	mov	r0, r1
   100c6:	9101      	str	r1, [sp, #4]
   100c8:	f014 fead 	bl	24e26 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   100cc:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   100ce:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   100d0:	eb0a 0001 	add.w	r0, sl, r1
   100d4:	3801      	subs	r0, #1
   100d6:	f014 fea6 	bl	24e26 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   100da:	4284      	cmp	r4, r0
   100dc:	f04f 0214 	mov.w	r2, #20
   100e0:	4b23      	ldr	r3, [pc, #140]	; (10170 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   100e2:	d015      	beq.n	10110 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   100e4:	fb02 f308 	mul.w	r3, r2, r8
   100e8:	f06f 0215 	mvn.w	r2, #21
   100ec:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   100f0:	f44f 7395 	mov.w	r3, #298	; 0x12a
   100f4:	4a1f      	ldr	r2, [pc, #124]	; (10174 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   100f6:	4920      	ldr	r1, [pc, #128]	; (10178 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   100f8:	4820      	ldr	r0, [pc, #128]	; (1017c <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   100fa:	f013 ff92 	bl	24022 <assert_print>
   100fe:	4649      	mov	r1, r9
   10100:	481f      	ldr	r0, [pc, #124]	; (10180 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   10102:	f013 ff8e 	bl	24022 <assert_print>
   10106:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1010a:	481a      	ldr	r0, [pc, #104]	; (10174 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1010c:	f013 ff82 	bl	24014 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   10110:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   10114:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   10116:	d0eb      	beq.n	100f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   10118:	7819      	ldrb	r1, [r3, #0]
   1011a:	42a1      	cmp	r1, r4
   1011c:	dde8      	ble.n	100f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   1011e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   10122:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   10126:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   1012a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1012e:	f100 0108 	add.w	r1, r0, #8
   10132:	7b00      	ldrb	r0, [r0, #12]
   10134:	f364 0004 	bfi	r0, r4, #0, #5
   10138:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   1013a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1013e:	790c      	ldrb	r4, [r1, #4]
   10140:	0840      	lsrs	r0, r0, #1
   10142:	f360 1447 	bfi	r4, r0, #5, #3
   10146:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   10148:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1014c:	f021 011f 	bic.w	r1, r1, #31
   10150:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   10152:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   10156:	f021 011f 	bic.w	r1, r1, #31
   1015a:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1015c:	f108 0801 	add.w	r8, r8, #1
   10160:	3614      	adds	r6, #20
   10162:	350c      	adds	r5, #12
   10164:	e7a3      	b.n	100ae <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   10166:	bf00      	nop
   10168:	20020ee0 	.word	0x20020ee0
   1016c:	e000ed00 	.word	0xe000ed00
   10170:	20021ca2 	.word	0x20021ca2
   10174:	0002bfda 	.word	0x0002bfda
   10178:	0002fb7c 	.word	0x0002fb7c
   1017c:	0002a669 	.word	0x0002a669
   10180:	0002c03d 	.word	0x0002c03d

00010184 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   10184:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   10186:	4d1f      	ldr	r5, [pc, #124]	; (10204 <z_arm_mpu_init+0x80>)
   10188:	682c      	ldr	r4, [r5, #0]
   1018a:	2c08      	cmp	r4, #8
   1018c:	d910      	bls.n	101b0 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1018e:	f240 1351 	movw	r3, #337	; 0x151
   10192:	4a1d      	ldr	r2, [pc, #116]	; (10208 <z_arm_mpu_init+0x84>)
   10194:	491d      	ldr	r1, [pc, #116]	; (1020c <z_arm_mpu_init+0x88>)
   10196:	481e      	ldr	r0, [pc, #120]	; (10210 <z_arm_mpu_init+0x8c>)
   10198:	f013 ff43 	bl	24022 <assert_print>
   1019c:	4621      	mov	r1, r4
   1019e:	2208      	movs	r2, #8
   101a0:	481c      	ldr	r0, [pc, #112]	; (10214 <z_arm_mpu_init+0x90>)
   101a2:	f013 ff3e 	bl	24022 <assert_print>
   101a6:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   101aa:	4817      	ldr	r0, [pc, #92]	; (10208 <z_arm_mpu_init+0x84>)
   101ac:	f013 ff32 	bl	24014 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   101b0:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   101b2:	f7ff ff45 	bl	10040 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   101b6:	4b18      	ldr	r3, [pc, #96]	; (10218 <z_arm_mpu_init+0x94>)
   101b8:	4a18      	ldr	r2, [pc, #96]	; (1021c <z_arm_mpu_init+0x98>)
   101ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   101be:	4284      	cmp	r4, r0
   101c0:	d117      	bne.n	101f2 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   101c2:	4b17      	ldr	r3, [pc, #92]	; (10220 <z_arm_mpu_init+0x9c>)
   101c4:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   101c6:	f7ff ff2f 	bl	10028 <arm_core_mpu_enable>
	__ASSERT(
   101ca:	4b13      	ldr	r3, [pc, #76]	; (10218 <z_arm_mpu_init+0x94>)
   101cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   101d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   101d4:	2b08      	cmp	r3, #8
   101d6:	d013      	beq.n	10200 <z_arm_mpu_init+0x7c>
   101d8:	4912      	ldr	r1, [pc, #72]	; (10224 <z_arm_mpu_init+0xa0>)
   101da:	f240 13bb 	movw	r3, #443	; 0x1bb
   101de:	4a0a      	ldr	r2, [pc, #40]	; (10208 <z_arm_mpu_init+0x84>)
   101e0:	480b      	ldr	r0, [pc, #44]	; (10210 <z_arm_mpu_init+0x8c>)
   101e2:	f013 ff1e 	bl	24022 <assert_print>
   101e6:	4810      	ldr	r0, [pc, #64]	; (10228 <z_arm_mpu_init+0xa4>)
   101e8:	f013 ff1b 	bl	24022 <assert_print>
   101ec:	f240 11bb 	movw	r1, #443	; 0x1bb
   101f0:	e7db      	b.n	101aa <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   101f2:	6869      	ldr	r1, [r5, #4]
   101f4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   101f8:	f7ff fe28 	bl	fe4c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   101fc:	3001      	adds	r0, #1
   101fe:	e7de      	b.n	101be <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   10200:	2000      	movs	r0, #0
   10202:	bd38      	pop	{r3, r4, r5, pc}
   10204:	00029ecc 	.word	0x00029ecc
   10208:	0002bfda 	.word	0x0002bfda
   1020c:	0002fb7c 	.word	0x0002fb7c
   10210:	0002a669 	.word	0x0002a669
   10214:	0002c06c 	.word	0x0002c06c
   10218:	e000ed00 	.word	0xe000ed00
   1021c:	0044ffaa 	.word	0x0044ffaa
   10220:	20021ca2 	.word	0x20021ca2
   10224:	0002c0a0 	.word	0x0002c0a0
   10228:	0002c0f0 	.word	0x0002c0f0

0001022c <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   1022c:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   1022e:	4b0b      	ldr	r3, [pc, #44]	; (1025c <malloc_prepare+0x30>)
   10230:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   10234:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   10238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1023c:	d20c      	bcs.n	10258 <malloc_prepare+0x2c>
   1023e:	4908      	ldr	r1, [pc, #32]	; (10260 <malloc_prepare+0x34>)
   10240:	2381      	movs	r3, #129	; 0x81
   10242:	4a08      	ldr	r2, [pc, #32]	; (10264 <malloc_prepare+0x38>)
   10244:	4808      	ldr	r0, [pc, #32]	; (10268 <malloc_prepare+0x3c>)
   10246:	f013 feec 	bl	24022 <assert_print>
   1024a:	4808      	ldr	r0, [pc, #32]	; (1026c <malloc_prepare+0x40>)
   1024c:	f013 fee9 	bl	24022 <assert_print>
   10250:	2181      	movs	r1, #129	; 0x81
   10252:	4804      	ldr	r0, [pc, #16]	; (10264 <malloc_prepare+0x38>)
   10254:	f013 fede 	bl	24014 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   10258:	2000      	movs	r0, #0
   1025a:	bd08      	pop	{r3, pc}
   1025c:	20036f88 	.word	0x20036f88
   10260:	0002c141 	.word	0x0002c141
   10264:	0002c111 	.word	0x0002c111
   10268:	0002a669 	.word	0x0002a669
   1026c:	0002c188 	.word	0x0002c188

00010270 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10270:	4b01      	ldr	r3, [pc, #4]	; (10278 <__stdout_hook_install+0x8>)
   10272:	6018      	str	r0, [r3, #0]
}
   10274:	4770      	bx	lr
   10276:	bf00      	nop
   10278:	2000846c 	.word	0x2000846c

0001027c <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   1027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1027e:	4606      	mov	r6, r0
   10280:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   10282:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   10284:	4f06      	ldr	r7, [pc, #24]	; (102a0 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   10286:	42ac      	cmp	r4, r5
   10288:	da08      	bge.n	1029c <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   1028a:	683b      	ldr	r3, [r7, #0]
   1028c:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1028e:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   10290:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   10292:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   10296:	d001      	beq.n	1029c <z_impl_zephyr_read_stdin+0x20>
   10298:	280d      	cmp	r0, #13
   1029a:	d1f4      	bne.n	10286 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   1029c:	4620      	mov	r0, r4
   1029e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102a0:	20008468 	.word	0x20008468

000102a4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   102a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   102a6:	460d      	mov	r5, r1
   102a8:	4f09      	ldr	r7, [pc, #36]	; (102d0 <z_impl_zephyr_write_stdout+0x2c>)
   102aa:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   102ac:	f1c0 0401 	rsb	r4, r0, #1
   102b0:	19a3      	adds	r3, r4, r6
   102b2:	429d      	cmp	r5, r3
   102b4:	dc01      	bgt.n	102ba <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   102b6:	4628      	mov	r0, r5
   102b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   102ba:	7873      	ldrb	r3, [r6, #1]
   102bc:	2b0a      	cmp	r3, #10
   102be:	d102      	bne.n	102c6 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   102c0:	200d      	movs	r0, #13
   102c2:	683b      	ldr	r3, [r7, #0]
   102c4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   102c6:	683b      	ldr	r3, [r7, #0]
   102c8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   102cc:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   102ce:	e7ef      	b.n	102b0 <z_impl_zephyr_write_stdout+0xc>
   102d0:	2000846c 	.word	0x2000846c

000102d4 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   102d4:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   102d6:	2105      	movs	r1, #5
   102d8:	4801      	ldr	r0, [pc, #4]	; (102e0 <_exit+0xc>)
   102da:	f7ff ffe3 	bl	102a4 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   102de:	e7fe      	b.n	102de <_exit+0xa>
   102e0:	0002c20f 	.word	0x0002c20f

000102e4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   102e4:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   102e6:	4c07      	ldr	r4, [pc, #28]	; (10304 <_sbrk+0x20>)
   102e8:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   102ea:	18c2      	adds	r2, r0, r3
   102ec:	4806      	ldr	r0, [pc, #24]	; (10308 <_sbrk+0x24>)
   102ee:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   102f2:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   102f6:	428a      	cmp	r2, r1
		heap_sz += count;
   102f8:	bf36      	itet	cc
   102fa:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   102fc:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   10300:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   10302:	bd10      	pop	{r4, pc}
   10304:	20020ef4 	.word	0x20020ef4
   10308:	20036f88 	.word	0x20036f88

0001030c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   1030c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1030e:	4604      	mov	r4, r0
   10310:	b958      	cbnz	r0, 1032a <__retarget_lock_init_recursive+0x1e>
   10312:	4911      	ldr	r1, [pc, #68]	; (10358 <__retarget_lock_init_recursive+0x4c>)
   10314:	f240 137b 	movw	r3, #379	; 0x17b
   10318:	4a10      	ldr	r2, [pc, #64]	; (1035c <__retarget_lock_init_recursive+0x50>)
   1031a:	4811      	ldr	r0, [pc, #68]	; (10360 <__retarget_lock_init_recursive+0x54>)
   1031c:	f013 fe81 	bl	24022 <assert_print>
   10320:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   10324:	480d      	ldr	r0, [pc, #52]	; (1035c <__retarget_lock_init_recursive+0x50>)
   10326:	f013 fe75 	bl	24014 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   1032a:	2014      	movs	r0, #20
   1032c:	f011 ff8c 	bl	22248 <malloc>
   10330:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   10332:	b960      	cbnz	r0, 1034e <__retarget_lock_init_recursive+0x42>
   10334:	490b      	ldr	r1, [pc, #44]	; (10364 <__retarget_lock_init_recursive+0x58>)
   10336:	f240 1383 	movw	r3, #387	; 0x183
   1033a:	4a08      	ldr	r2, [pc, #32]	; (1035c <__retarget_lock_init_recursive+0x50>)
   1033c:	4808      	ldr	r0, [pc, #32]	; (10360 <__retarget_lock_init_recursive+0x54>)
   1033e:	f013 fe70 	bl	24022 <assert_print>
   10342:	4809      	ldr	r0, [pc, #36]	; (10368 <__retarget_lock_init_recursive+0x5c>)
   10344:	f013 fe6d 	bl	24022 <assert_print>
   10348:	f240 1183 	movw	r1, #387	; 0x183
   1034c:	e7ea      	b.n	10324 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   1034e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   10352:	f018 b84d 	b.w	283f0 <z_impl_k_mutex_init>
   10356:	bf00      	nop
   10358:	0002c216 	.word	0x0002c216
   1035c:	0002c111 	.word	0x0002c111
   10360:	0002a669 	.word	0x0002a669
   10364:	0002c215 	.word	0x0002c215
   10368:	0002c251 	.word	0x0002c251

0001036c <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   1036c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1036e:	b958      	cbnz	r0, 10388 <__retarget_lock_acquire_recursive+0x1c>
   10370:	4909      	ldr	r1, [pc, #36]	; (10398 <__retarget_lock_acquire_recursive+0x2c>)
   10372:	480a      	ldr	r0, [pc, #40]	; (1039c <__retarget_lock_acquire_recursive+0x30>)
   10374:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   10378:	4a09      	ldr	r2, [pc, #36]	; (103a0 <__retarget_lock_acquire_recursive+0x34>)
   1037a:	f013 fe52 	bl	24022 <assert_print>
   1037e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   10382:	4807      	ldr	r0, [pc, #28]	; (103a0 <__retarget_lock_acquire_recursive+0x34>)
   10384:	f013 fe46 	bl	24014 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   10388:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   1038c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10390:	f04f 33ff 	mov.w	r3, #4294967295
   10394:	f00e bc80 	b.w	1ec98 <z_impl_k_mutex_lock>
   10398:	0002c216 	.word	0x0002c216
   1039c:	0002a669 	.word	0x0002a669
   103a0:	0002c111 	.word	0x0002c111

000103a4 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   103a4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   103a6:	b958      	cbnz	r0, 103c0 <__retarget_lock_release_recursive+0x1c>
   103a8:	4907      	ldr	r1, [pc, #28]	; (103c8 <__retarget_lock_release_recursive+0x24>)
   103aa:	4808      	ldr	r0, [pc, #32]	; (103cc <__retarget_lock_release_recursive+0x28>)
   103ac:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   103b0:	4a07      	ldr	r2, [pc, #28]	; (103d0 <__retarget_lock_release_recursive+0x2c>)
   103b2:	f013 fe36 	bl	24022 <assert_print>
   103b6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   103ba:	4805      	ldr	r0, [pc, #20]	; (103d0 <__retarget_lock_release_recursive+0x2c>)
   103bc:	f013 fe2a 	bl	24014 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   103c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   103c4:	f00e bd38 	b.w	1ee38 <z_impl_k_mutex_unlock>
   103c8:	0002c216 	.word	0x0002c216
   103cc:	0002a669 	.word	0x0002a669
   103d0:	0002c111 	.word	0x0002c111

000103d4 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   103d4:	2000      	movs	r0, #0
   103d6:	4b02      	ldr	r3, [pc, #8]	; (103e0 <remoteproc_mgr_boot+0xc>)
   103d8:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   103dc:	4770      	bx	lr
   103de:	bf00      	nop
   103e0:	40005000 	.word	0x40005000

000103e4 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   103e4:	4b0e      	ldr	r3, [pc, #56]	; (10420 <bt_hex+0x3c>)
   103e6:	2940      	cmp	r1, #64	; 0x40
   103e8:	bf28      	it	cs
   103ea:	2140      	movcs	r1, #64	; 0x40
{
   103ec:	b570      	push	{r4, r5, r6, lr}
   103ee:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   103f0:	4c0c      	ldr	r4, [pc, #48]	; (10424 <bt_hex+0x40>)
   103f2:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   103f4:	42b0      	cmp	r0, r6
   103f6:	f103 0302 	add.w	r3, r3, #2
   103fa:	d104      	bne.n	10406 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   103fc:	2300      	movs	r3, #0
   103fe:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   10402:	4807      	ldr	r0, [pc, #28]	; (10420 <bt_hex+0x3c>)
   10404:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   10406:	7802      	ldrb	r2, [r0, #0]
   10408:	0912      	lsrs	r2, r2, #4
   1040a:	5ca2      	ldrb	r2, [r4, r2]
   1040c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   10410:	f810 2b01 	ldrb.w	r2, [r0], #1
   10414:	f002 020f 	and.w	r2, r2, #15
   10418:	5ca2      	ldrb	r2, [r4, r2]
   1041a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1041e:	e7e9      	b.n	103f4 <bt_hex+0x10>
   10420:	20021cc1 	.word	0x20021cc1
   10424:	0002c2b6 	.word	0x0002c2b6

00010428 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   10428:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1042a:	7803      	ldrb	r3, [r0, #0]
   1042c:	b08b      	sub	sp, #44	; 0x2c
   1042e:	4604      	mov	r4, r0
   10430:	ad07      	add	r5, sp, #28
   10432:	2b03      	cmp	r3, #3
   10434:	d821      	bhi.n	1047a <bt_addr_le_str+0x52>
   10436:	e8df f003 	tbb	[pc, r3]
   1043a:	1a02      	.short	0x1a02
   1043c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1043e:	4912      	ldr	r1, [pc, #72]	; (10488 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   10440:	4628      	mov	r0, r5
   10442:	f018 fb0d 	bl	28a60 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10446:	9505      	str	r5, [sp, #20]
   10448:	7863      	ldrb	r3, [r4, #1]
   1044a:	211e      	movs	r1, #30
   1044c:	9304      	str	r3, [sp, #16]
   1044e:	78a3      	ldrb	r3, [r4, #2]
   10450:	4a0e      	ldr	r2, [pc, #56]	; (1048c <bt_addr_le_str+0x64>)
   10452:	9303      	str	r3, [sp, #12]
   10454:	78e3      	ldrb	r3, [r4, #3]
   10456:	480e      	ldr	r0, [pc, #56]	; (10490 <bt_addr_le_str+0x68>)
   10458:	9302      	str	r3, [sp, #8]
   1045a:	7923      	ldrb	r3, [r4, #4]
   1045c:	9301      	str	r3, [sp, #4]
   1045e:	7963      	ldrb	r3, [r4, #5]
   10460:	9300      	str	r3, [sp, #0]
   10462:	79a3      	ldrb	r3, [r4, #6]
   10464:	f013 fc28 	bl	23cb8 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   10468:	4809      	ldr	r0, [pc, #36]	; (10490 <bt_addr_le_str+0x68>)
   1046a:	b00b      	add	sp, #44	; 0x2c
   1046c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1046e:	4909      	ldr	r1, [pc, #36]	; (10494 <bt_addr_le_str+0x6c>)
   10470:	e7e6      	b.n	10440 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   10472:	4909      	ldr	r1, [pc, #36]	; (10498 <bt_addr_le_str+0x70>)
   10474:	e7e4      	b.n	10440 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   10476:	4909      	ldr	r1, [pc, #36]	; (1049c <bt_addr_le_str+0x74>)
   10478:	e7e2      	b.n	10440 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1047a:	210a      	movs	r1, #10
   1047c:	4628      	mov	r0, r5
   1047e:	4a08      	ldr	r2, [pc, #32]	; (104a0 <bt_addr_le_str+0x78>)
   10480:	f013 fc1a 	bl	23cb8 <snprintk>
		break;
   10484:	e7df      	b.n	10446 <bt_addr_le_str+0x1e>
   10486:	bf00      	nop
   10488:	0002a73d 	.word	0x0002a73d
   1048c:	0002a75f 	.word	0x0002a75f
   10490:	20021ca3 	.word	0x20021ca3
   10494:	0002a744 	.word	0x0002a744
   10498:	0002a74b 	.word	0x0002a74b
   1049c:	0002a755 	.word	0x0002a755
   104a0:	0002dc26 	.word	0x0002dc26

000104a4 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   104a4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   104a6:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   104a8:	4d09      	ldr	r5, [pc, #36]	; (104d0 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   104aa:	4b0a      	ldr	r3, [pc, #40]	; (104d4 <long_wq_init+0x30>)
{
   104ac:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   104ae:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   104b0:	9302      	str	r3, [sp, #8]
   104b2:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   104b4:	f00f f9c6 	bl	1f844 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   104b8:	ab02      	add	r3, sp, #8
   104ba:	4628      	mov	r0, r5
   104bc:	9300      	str	r3, [sp, #0]
   104be:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   104c2:	230a      	movs	r3, #10
   104c4:	4904      	ldr	r1, [pc, #16]	; (104d8 <long_wq_init+0x34>)
   104c6:	f00f f9d7 	bl	1f878 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   104ca:	4620      	mov	r0, r4
   104cc:	b005      	add	sp, #20
   104ce:	bd30      	pop	{r4, r5, pc}
   104d0:	200094e8 	.word	0x200094e8
   104d4:	0002c2ce 	.word	0x0002c2ce
   104d8:	20031418 	.word	0x20031418

000104dc <bt_long_wq_schedule>:
{
   104dc:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   104de:	4801      	ldr	r0, [pc, #4]	; (104e4 <bt_long_wq_schedule+0x8>)
   104e0:	f00f baec 	b.w	1fabc <k_work_schedule_for_queue>
   104e4:	200094e8 	.word	0x200094e8

000104e8 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   104e8:	7803      	ldrb	r3, [r0, #0]
{
   104ea:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   104ec:	2b01      	cmp	r3, #1
   104ee:	d013      	beq.n	10518 <uuid_to_uuid128+0x30>
   104f0:	2b02      	cmp	r3, #2
   104f2:	d027      	beq.n	10544 <uuid_to_uuid128+0x5c>
   104f4:	b97b      	cbnz	r3, 10516 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   104f6:	460a      	mov	r2, r1
   104f8:	4b18      	ldr	r3, [pc, #96]	; (1055c <uuid_to_uuid128+0x74>)
   104fa:	f103 0410 	add.w	r4, r3, #16
   104fe:	f853 5b04 	ldr.w	r5, [r3], #4
   10502:	42a3      	cmp	r3, r4
   10504:	f842 5b04 	str.w	r5, [r2], #4
   10508:	d1f9      	bne.n	104fe <uuid_to_uuid128+0x16>
   1050a:	781b      	ldrb	r3, [r3, #0]
   1050c:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1050e:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   10510:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   10512:	0a1b      	lsrs	r3, r3, #8
   10514:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   10516:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   10518:	460a      	mov	r2, r1
   1051a:	4b10      	ldr	r3, [pc, #64]	; (1055c <uuid_to_uuid128+0x74>)
   1051c:	f103 0410 	add.w	r4, r3, #16
   10520:	f853 5b04 	ldr.w	r5, [r3], #4
   10524:	42a3      	cmp	r3, r4
   10526:	f842 5b04 	str.w	r5, [r2], #4
   1052a:	d1f9      	bne.n	10520 <uuid_to_uuid128+0x38>
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   10530:	6843      	ldr	r3, [r0, #4]
   10532:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   10536:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   10538:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1053a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   1053c:	0a1b      	lsrs	r3, r3, #8
   1053e:	738a      	strb	r2, [r1, #14]
   10540:	740b      	strb	r3, [r1, #16]
}
   10542:	e7e8      	b.n	10516 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10544:	f100 0310 	add.w	r3, r0, #16
   10548:	f850 2b04 	ldr.w	r2, [r0], #4
   1054c:	4298      	cmp	r0, r3
   1054e:	f841 2b04 	str.w	r2, [r1], #4
   10552:	d1f9      	bne.n	10548 <uuid_to_uuid128+0x60>
   10554:	7803      	ldrb	r3, [r0, #0]
   10556:	700b      	strb	r3, [r1, #0]
   10558:	e7dd      	b.n	10516 <uuid_to_uuid128+0x2e>
   1055a:	bf00      	nop
   1055c:	0002c2d7 	.word	0x0002c2d7

00010560 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   10560:	b538      	push	{r3, r4, r5, lr}
   10562:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   10564:	2d01      	cmp	r5, #1
{
   10566:	4610      	mov	r0, r2
   10568:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1056a:	d010      	beq.n	1058e <bt_buf_get_rx+0x2e>
   1056c:	2d03      	cmp	r5, #3
   1056e:	d01a      	beq.n	105a6 <bt_buf_get_rx+0x46>
   10570:	2d05      	cmp	r5, #5
   10572:	d018      	beq.n	105a6 <bt_buf_get_rx+0x46>
   10574:	490e      	ldr	r1, [pc, #56]	; (105b0 <bt_buf_get_rx+0x50>)
   10576:	233d      	movs	r3, #61	; 0x3d
   10578:	4a0e      	ldr	r2, [pc, #56]	; (105b4 <bt_buf_get_rx+0x54>)
   1057a:	480f      	ldr	r0, [pc, #60]	; (105b8 <bt_buf_get_rx+0x58>)
   1057c:	f013 fd51 	bl	24022 <assert_print>
   10580:	480e      	ldr	r0, [pc, #56]	; (105bc <bt_buf_get_rx+0x5c>)
   10582:	f013 fd4e 	bl	24022 <assert_print>
   10586:	213d      	movs	r1, #61	; 0x3d
   10588:	480a      	ldr	r0, [pc, #40]	; (105b4 <bt_buf_get_rx+0x54>)
   1058a:	f013 fd43 	bl	24014 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1058e:	480c      	ldr	r0, [pc, #48]	; (105c0 <bt_buf_get_rx+0x60>)
   10590:	f016 fbb2 	bl	26cf8 <net_buf_alloc_fixed>
   10594:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   10596:	b120      	cbz	r0, 105a2 <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   10598:	2101      	movs	r1, #1
   1059a:	300c      	adds	r0, #12
   1059c:	f007 ff44 	bl	18428 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   105a0:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   105a2:	4620      	mov	r0, r4
   105a4:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   105a6:	4602      	mov	r2, r0
   105a8:	460b      	mov	r3, r1
   105aa:	4806      	ldr	r0, [pc, #24]	; (105c4 <bt_buf_get_rx+0x64>)
   105ac:	e7f0      	b.n	10590 <bt_buf_get_rx+0x30>
   105ae:	bf00      	nop
   105b0:	0002c317 	.word	0x0002c317
   105b4:	0002c2e8 	.word	0x0002c2e8
   105b8:	0002a669 	.word	0x0002a669
   105bc:	0002c35c 	.word	0x0002c35c
   105c0:	20008c88 	.word	0x20008c88
   105c4:	20008bec 	.word	0x20008bec

000105c8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   105c8:	b510      	push	{r4, lr}
   105ca:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   105cc:	490a      	ldr	r1, [pc, #40]	; (105f8 <bt_buf_get_cmd_complete+0x30>)
{
   105ce:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   105d0:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   105d4:	b920      	cbnz	r0, 105e0 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   105d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   105da:	2001      	movs	r0, #1
   105dc:	f7ff bfc0 	b.w	10560 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   105e0:	f008 f878 	bl	186d4 <net_buf_ref>
   105e4:	2101      	movs	r1, #1
		buf->len = 0U;
   105e6:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   105e8:	4604      	mov	r4, r0
   105ea:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   105ec:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   105ee:	300c      	adds	r0, #12
   105f0:	f007 ff1a 	bl	18428 <net_buf_simple_reserve>
}
   105f4:	4620      	mov	r0, r4
   105f6:	bd10      	pop	{r4, pc}
   105f8:	20008000 	.word	0x20008000

000105fc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   105fc:	b570      	push	{r4, r5, r6, lr}
   105fe:	4604      	mov	r4, r0
	switch (evt) {
   10600:	2c0f      	cmp	r4, #15
{
   10602:	460d      	mov	r5, r1
   10604:	4610      	mov	r0, r2
   10606:	4619      	mov	r1, r3
	switch (evt) {
   10608:	d805      	bhi.n	10616 <bt_buf_get_evt+0x1a>
   1060a:	2c0d      	cmp	r4, #13
   1060c:	d90d      	bls.n	1062a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1060e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   10612:	f7ff bfd9 	b.w	105c8 <bt_buf_get_cmd_complete>
	switch (evt) {
   10616:	2c13      	cmp	r4, #19
   10618:	d107      	bne.n	1062a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   1061a:	480c      	ldr	r0, [pc, #48]	; (1064c <bt_buf_get_evt+0x50>)
   1061c:	f016 fb6c 	bl	26cf8 <net_buf_alloc_fixed>
			if (buf) {
   10620:	4604      	mov	r4, r0
   10622:	b938      	cbnz	r0, 10634 <bt_buf_get_evt+0x38>
{
   10624:	2400      	movs	r4, #0
}
   10626:	4620      	mov	r0, r4
   10628:	bd70      	pop	{r4, r5, r6, pc}
   1062a:	4602      	mov	r2, r0
   1062c:	460b      	mov	r3, r1
		if (discardable) {
   1062e:	b145      	cbz	r5, 10642 <bt_buf_get_evt+0x46>
   10630:	4807      	ldr	r0, [pc, #28]	; (10650 <bt_buf_get_evt+0x54>)
   10632:	e7f3      	b.n	1061c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   10634:	2101      	movs	r1, #1
   10636:	300c      	adds	r0, #12
   10638:	f007 fef6 	bl	18428 <net_buf_simple_reserve>
   1063c:	2301      	movs	r3, #1
   1063e:	7623      	strb	r3, [r4, #24]
}
   10640:	e7f1      	b.n	10626 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   10642:	2001      	movs	r0, #1
}
   10644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   10648:	f7ff bf8a 	b.w	10560 <bt_buf_get_rx>
   1064c:	20008d24 	.word	0x20008d24
   10650:	20008c54 	.word	0x20008c54

00010654 <hci_disconn_complete_prio>:
{
   10654:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   10656:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10658:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   1065c:	781b      	ldrb	r3, [r3, #0]
   1065e:	b963      	cbnz	r3, 1067a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   10660:	4620      	mov	r0, r4
   10662:	f002 ff09 	bl	13478 <bt_conn_lookup_handle>
	if (!conn) {
   10666:	4605      	mov	r5, r0
   10668:	b940      	cbnz	r0, 1067c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1066a:	4b08      	ldr	r3, [pc, #32]	; (1068c <hci_disconn_complete_prio+0x38>)
   1066c:	881a      	ldrh	r2, [r3, #0]
   1066e:	b922      	cbnz	r2, 1067a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   10670:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   10674:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   10678:	8018      	strh	r0, [r3, #0]
}
   1067a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1067c:	2101      	movs	r1, #1
   1067e:	f002 ff03 	bl	13488 <bt_conn_set_state>
	bt_conn_unref(conn);
   10682:	4628      	mov	r0, r5
}
   10684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   10688:	f002 bec6 	b.w	13418 <bt_conn_unref>
   1068c:	200214ae 	.word	0x200214ae

00010690 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   10690:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   10692:	4c08      	ldr	r4, [pc, #32]	; (106b4 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   10694:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   10696:	2205      	movs	r2, #5
   10698:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1069c:	f003 f9c8 	bl	13a30 <bt_conn_lookup_state_le>
		if (!conn) {
   106a0:	b938      	cbnz	r0, 106b2 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   106a2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   106a6:	2204      	movs	r2, #4
}
   106a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   106ac:	4902      	ldr	r1, [pc, #8]	; (106b8 <find_pending_connect.part.0+0x28>)
   106ae:	f003 b9bf 	b.w	13a30 <bt_conn_lookup_state_le>
}
   106b2:	bd10      	pop	{r4, pc}
   106b4:	20008000 	.word	0x20008000
   106b8:	0002c29c 	.word	0x0002c29c

000106bc <hci_data_buf_overflow>:
{
   106bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   106be:	68c3      	ldr	r3, [r0, #12]
   106c0:	2202      	movs	r2, #2
   106c2:	781b      	ldrb	r3, [r3, #0]
   106c4:	4906      	ldr	r1, [pc, #24]	; (106e0 <hci_data_buf_overflow+0x24>)
   106c6:	9303      	str	r3, [sp, #12]
   106c8:	4b06      	ldr	r3, [pc, #24]	; (106e4 <hci_data_buf_overflow+0x28>)
   106ca:	9302      	str	r3, [sp, #8]
   106cc:	2300      	movs	r3, #0
   106ce:	4618      	mov	r0, r3
   106d0:	e9cd 3300 	strd	r3, r3, [sp]
   106d4:	f014 fcc2 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   106d8:	b005      	add	sp, #20
   106da:	f85d fb04 	ldr.w	pc, [sp], #4
   106de:	bf00      	nop
   106e0:	000296c4 	.word	0x000296c4
   106e4:	0002c37c 	.word	0x0002c37c

000106e8 <rx_queue_put>:
{
   106e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   106ea:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   106ec:	480b      	ldr	r0, [pc, #44]	; (1071c <rx_queue_put+0x34>)
   106ee:	f007 fec1 	bl	18474 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   106f2:	490b      	ldr	r1, [pc, #44]	; (10720 <rx_queue_put+0x38>)
   106f4:	480b      	ldr	r0, [pc, #44]	; (10724 <rx_queue_put+0x3c>)
   106f6:	f017 ff13 	bl	28520 <k_work_submit_to_queue>
	if (err < 0) {
   106fa:	2800      	cmp	r0, #0
   106fc:	da0a      	bge.n	10714 <rx_queue_put+0x2c>
		LOG_ERR("Could not submit rx_work: %d", err);
   106fe:	4b0a      	ldr	r3, [pc, #40]	; (10728 <rx_queue_put+0x40>)
   10700:	9003      	str	r0, [sp, #12]
   10702:	9302      	str	r3, [sp, #8]
   10704:	2300      	movs	r3, #0
   10706:	2201      	movs	r2, #1
   10708:	4618      	mov	r0, r3
   1070a:	e9cd 3300 	strd	r3, r3, [sp]
   1070e:	4907      	ldr	r1, [pc, #28]	; (1072c <rx_queue_put+0x44>)
   10710:	f014 fca4 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   10714:	b005      	add	sp, #20
   10716:	f85d fb04 	ldr.w	pc, [sp], #4
   1071a:	bf00      	nop
   1071c:	2000813c 	.word	0x2000813c
   10720:	200084ac 	.word	0x200084ac
   10724:	20009618 	.word	0x20009618
   10728:	0002c3a4 	.word	0x0002c3a4
   1072c:	000296c4 	.word	0x000296c4

00010730 <hci_hardware_error>:
{
   10730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   10732:	2101      	movs	r1, #1
   10734:	300c      	adds	r0, #12
   10736:	f008 f88d 	bl	18854 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1073a:	7803      	ldrb	r3, [r0, #0]
   1073c:	2201      	movs	r2, #1
   1073e:	9303      	str	r3, [sp, #12]
   10740:	4b05      	ldr	r3, [pc, #20]	; (10758 <hci_hardware_error+0x28>)
   10742:	4906      	ldr	r1, [pc, #24]	; (1075c <hci_hardware_error+0x2c>)
   10744:	9302      	str	r3, [sp, #8]
   10746:	2300      	movs	r3, #0
   10748:	4618      	mov	r0, r3
   1074a:	e9cd 3300 	strd	r3, r3, [sp]
   1074e:	f014 fc85 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   10752:	b005      	add	sp, #20
   10754:	f85d fb04 	ldr.w	pc, [sp], #4
   10758:	0002c3c1 	.word	0x0002c3c1
   1075c:	000296c4 	.word	0x000296c4

00010760 <le_data_len_change>:
{
   10760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10762:	68c3      	ldr	r3, [r0, #12]
   10764:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   10766:	4620      	mov	r0, r4
   10768:	f002 fe86 	bl	13478 <bt_conn_lookup_handle>
   1076c:	4603      	mov	r3, r0
	if (!conn) {
   1076e:	b950      	cbnz	r0, 10786 <le_data_len_change+0x26>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   10770:	4a07      	ldr	r2, [pc, #28]	; (10790 <le_data_len_change+0x30>)
   10772:	4908      	ldr	r1, [pc, #32]	; (10794 <le_data_len_change+0x34>)
   10774:	e9cd 0201 	strd	r0, r2, [sp, #4]
   10778:	9403      	str	r4, [sp, #12]
   1077a:	2201      	movs	r2, #1
   1077c:	9000      	str	r0, [sp, #0]
   1077e:	f014 fc6d 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   10782:	b004      	add	sp, #16
   10784:	bd10      	pop	{r4, pc}
   10786:	b004      	add	sp, #16
   10788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1078c:	f002 be44 	b.w	13418 <bt_conn_unref>
   10790:	0002c3e3 	.word	0x0002c3e3
   10794:	000296c4 	.word	0x000296c4

00010798 <le_phy_update_complete>:
{
   10798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1079a:	68c3      	ldr	r3, [r0, #12]
   1079c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   107a0:	4620      	mov	r0, r4
   107a2:	f002 fe69 	bl	13478 <bt_conn_lookup_handle>
   107a6:	4603      	mov	r3, r0
	if (!conn) {
   107a8:	b950      	cbnz	r0, 107c0 <le_phy_update_complete+0x28>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   107aa:	4a08      	ldr	r2, [pc, #32]	; (107cc <le_phy_update_complete+0x34>)
   107ac:	4908      	ldr	r1, [pc, #32]	; (107d0 <le_phy_update_complete+0x38>)
   107ae:	e9cd 0201 	strd	r0, r2, [sp, #4]
   107b2:	9403      	str	r4, [sp, #12]
   107b4:	2201      	movs	r2, #1
   107b6:	9000      	str	r0, [sp, #0]
   107b8:	f014 fc50 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   107bc:	b004      	add	sp, #16
   107be:	bd10      	pop	{r4, pc}
   107c0:	b004      	add	sp, #16
   107c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   107c6:	f002 be27 	b.w	13418 <bt_conn_unref>
   107ca:	bf00      	nop
   107cc:	0002c3e3 	.word	0x0002c3e3
   107d0:	000296c4 	.word	0x000296c4

000107d4 <hci_disconn_complete>:
{
   107d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   107d6:	68c5      	ldr	r5, [r0, #12]
{
   107d8:	b085      	sub	sp, #20
	if (evt->status) {
   107da:	782e      	ldrb	r6, [r5, #0]
   107dc:	b986      	cbnz	r6, 10800 <hci_disconn_complete+0x2c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   107de:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   107e2:	4638      	mov	r0, r7
   107e4:	f002 fe48 	bl	13478 <bt_conn_lookup_handle>
	if (!conn) {
   107e8:	4604      	mov	r4, r0
   107ea:	b958      	cbnz	r0, 10804 <hci_disconn_complete+0x30>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   107ec:	4b0b      	ldr	r3, [pc, #44]	; (1081c <hci_disconn_complete+0x48>)
   107ee:	2201      	movs	r2, #1
   107f0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   107f4:	490a      	ldr	r1, [pc, #40]	; (10820 <hci_disconn_complete+0x4c>)
   107f6:	4603      	mov	r3, r0
   107f8:	9703      	str	r7, [sp, #12]
   107fa:	9000      	str	r0, [sp, #0]
   107fc:	f014 fc2e 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   10800:	b005      	add	sp, #20
   10802:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   10804:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10806:	4631      	mov	r1, r6
	conn->err = evt->reason;
   10808:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1080a:	f002 fe3d 	bl	13488 <bt_conn_set_state>
		bt_conn_unref(conn);
   1080e:	4620      	mov	r0, r4
}
   10810:	b005      	add	sp, #20
   10812:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   10816:	f002 bdff 	b.w	13418 <bt_conn_unref>
   1081a:	bf00      	nop
   1081c:	0002c407 	.word	0x0002c407
   10820:	000296c4 	.word	0x000296c4

00010824 <handle_event>:
{
   10824:	b530      	push	{r4, r5, lr}
   10826:	4604      	mov	r4, r0
   10828:	4608      	mov	r0, r1
   1082a:	b087      	sub	sp, #28
   1082c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   10830:	4293      	cmp	r3, r2
   10832:	d112      	bne.n	1085a <handle_event+0x36>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   10834:	8a05      	ldrh	r5, [r0, #16]
   10836:	68c0      	ldr	r0, [r0, #12]
   10838:	4629      	mov	r1, r5
   1083a:	f7ff fdd3 	bl	103e4 <bt_hex>
   1083e:	4b16      	ldr	r3, [pc, #88]	; (10898 <handle_event+0x74>)
   10840:	e9cd 5004 	strd	r5, r0, [sp, #16]
   10844:	9302      	str	r3, [sp, #8]
   10846:	2300      	movs	r3, #0
   10848:	2202      	movs	r2, #2
   1084a:	4618      	mov	r0, r3
   1084c:	e9cd 3300 	strd	r3, r3, [sp]
   10850:	4912      	ldr	r1, [pc, #72]	; (1089c <handle_event+0x78>)
   10852:	9403      	str	r4, [sp, #12]
   10854:	f014 fc02 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   10858:	e014      	b.n	10884 <handle_event+0x60>
		if (handler->event != event) {
   1085a:	4611      	mov	r1, r2
   1085c:	f811 5b08 	ldrb.w	r5, [r1], #8
   10860:	42a5      	cmp	r5, r4
   10862:	d116      	bne.n	10892 <handle_event+0x6e>
		if (buf->len < handler->min_len) {
   10864:	8a03      	ldrh	r3, [r0, #16]
   10866:	7851      	ldrb	r1, [r2, #1]
   10868:	4299      	cmp	r1, r3
   1086a:	d90d      	bls.n	10888 <handle_event+0x64>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   1086c:	e9cd 3403 	strd	r3, r4, [sp, #12]
   10870:	4b0b      	ldr	r3, [pc, #44]	; (108a0 <handle_event+0x7c>)
   10872:	2201      	movs	r2, #1
   10874:	9302      	str	r3, [sp, #8]
   10876:	2300      	movs	r3, #0
   10878:	4908      	ldr	r1, [pc, #32]	; (1089c <handle_event+0x78>)
   1087a:	4618      	mov	r0, r3
   1087c:	e9cd 3300 	strd	r3, r3, [sp]
   10880:	f014 fbec 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   10884:	b007      	add	sp, #28
   10886:	bd30      	pop	{r4, r5, pc}
		handler->handler(buf);
   10888:	6853      	ldr	r3, [r2, #4]
}
   1088a:	b007      	add	sp, #28
   1088c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   10890:	4718      	bx	r3
   10892:	460a      	mov	r2, r1
   10894:	e7cc      	b.n	10830 <handle_event+0xc>
   10896:	bf00      	nop
   10898:	0002c44f 	.word	0x0002c44f
   1089c:	000296c4 	.word	0x000296c4
   108a0:	0002c42d 	.word	0x0002c42d

000108a4 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   108a4:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   108a6:	4853      	ldr	r0, [pc, #332]	; (109f4 <rx_work_handler+0x150>)
{
   108a8:	b086      	sub	sp, #24
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   108aa:	f007 fe4d 	bl	18548 <net_buf_slist_get>
	if (!buf) {
   108ae:	4604      	mov	r4, r0
   108b0:	2800      	cmp	r0, #0
   108b2:	d064      	beq.n	1097e <rx_work_handler+0xda>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   108b4:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   108b6:	2b01      	cmp	r3, #1
   108b8:	d063      	beq.n	10982 <rx_work_handler+0xde>
   108ba:	2b03      	cmp	r3, #3
   108bc:	f040 8090 	bne.w	109e0 <rx_work_handler+0x13c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   108c0:	8a03      	ldrh	r3, [r0, #16]
   108c2:	2b03      	cmp	r3, #3
   108c4:	d80c      	bhi.n	108e0 <rx_work_handler+0x3c>
   108c6:	f240 13ed 	movw	r3, #493	; 0x1ed
   108ca:	4a4b      	ldr	r2, [pc, #300]	; (109f8 <rx_work_handler+0x154>)
   108cc:	494b      	ldr	r1, [pc, #300]	; (109fc <rx_work_handler+0x158>)
   108ce:	484c      	ldr	r0, [pc, #304]	; (10a00 <rx_work_handler+0x15c>)
   108d0:	f013 fba7 	bl	24022 <assert_print>
   108d4:	4040      	eors	r0, r0
   108d6:	f380 8811 	msr	BASEPRI, r0
   108da:	f04f 0003 	mov.w	r0, #3
   108de:	df02      	svc	2
   108e0:	2104      	movs	r1, #4
   108e2:	f104 000c 	add.w	r0, r4, #12
   108e6:	f007 ffb5 	bl	18854 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   108ea:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   108ec:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   108ee:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   108f0:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   108f2:	8a23      	ldrh	r3, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   108f4:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   108f8:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   108fa:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   108fc:	d00f      	beq.n	1091e <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   108fe:	e9cd 3203 	strd	r3, r2, [sp, #12]
   10902:	4b40      	ldr	r3, [pc, #256]	; (10a04 <rx_work_handler+0x160>)
   10904:	2201      	movs	r2, #1
   10906:	9302      	str	r3, [sp, #8]
   10908:	2300      	movs	r3, #0
   1090a:	493f      	ldr	r1, [pc, #252]	; (10a08 <rx_work_handler+0x164>)
   1090c:	4618      	mov	r0, r3
   1090e:	e9cd 3300 	strd	r3, r3, [sp]
   10912:	f014 fba3 	bl	2505c <z_log_msg_runtime_create.constprop.0>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   10916:	4620      	mov	r0, r4
   10918:	f007 fe98 	bl	1864c <net_buf_unref>
		break;
   1091c:	e01a      	b.n	10954 <rx_work_handler+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1091e:	f002 fdab 	bl	13478 <bt_conn_lookup_handle>
	if (!conn) {
   10922:	4605      	mov	r5, r0
   10924:	b958      	cbnz	r0, 1093e <rx_work_handler+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   10926:	8b63      	ldrh	r3, [r4, #26]
   10928:	2201      	movs	r2, #1
   1092a:	9303      	str	r3, [sp, #12]
   1092c:	4b37      	ldr	r3, [pc, #220]	; (10a0c <rx_work_handler+0x168>)
   1092e:	4936      	ldr	r1, [pc, #216]	; (10a08 <rx_work_handler+0x164>)
   10930:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10934:	4603      	mov	r3, r0
   10936:	9000      	str	r0, [sp, #0]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   10938:	f014 fb90 	bl	2505c <z_log_msg_runtime_create.constprop.0>
   1093c:	e7eb      	b.n	10916 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   1093e:	f002 fe87 	bl	13650 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   10942:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   10944:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   10946:	0b32      	lsrs	r2, r6, #12
   10948:	4628      	mov	r0, r5
   1094a:	f002 fc09 	bl	13160 <bt_conn_recv>
	bt_conn_unref(conn);
   1094e:	4628      	mov	r0, r5
   10950:	f002 fd62 	bl	13418 <bt_conn_unref>
	return list->head;
   10954:	4b2e      	ldr	r3, [pc, #184]	; (10a10 <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   10956:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1095a:	b183      	cbz	r3, 1097e <rx_work_handler+0xda>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1095c:	492d      	ldr	r1, [pc, #180]	; (10a14 <rx_work_handler+0x170>)
   1095e:	482e      	ldr	r0, [pc, #184]	; (10a18 <rx_work_handler+0x174>)
   10960:	f017 fdde 	bl	28520 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   10964:	2800      	cmp	r0, #0
   10966:	da0a      	bge.n	1097e <rx_work_handler+0xda>
			LOG_ERR("Could not submit rx_work: %d", err);
   10968:	4b2c      	ldr	r3, [pc, #176]	; (10a1c <rx_work_handler+0x178>)
   1096a:	9003      	str	r0, [sp, #12]
   1096c:	9302      	str	r3, [sp, #8]
   1096e:	2300      	movs	r3, #0
   10970:	2201      	movs	r2, #1
   10972:	4618      	mov	r0, r3
   10974:	e9cd 3300 	strd	r3, r3, [sp]
   10978:	4923      	ldr	r1, [pc, #140]	; (10a08 <rx_work_handler+0x164>)
   1097a:	f014 fb6f 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   1097e:	b006      	add	sp, #24
   10980:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   10982:	8a03      	ldrh	r3, [r0, #16]
   10984:	2b01      	cmp	r3, #1
   10986:	d80c      	bhi.n	109a2 <rx_work_handler+0xfe>
   10988:	f640 136d 	movw	r3, #2413	; 0x96d
   1098c:	4a1a      	ldr	r2, [pc, #104]	; (109f8 <rx_work_handler+0x154>)
   1098e:	491b      	ldr	r1, [pc, #108]	; (109fc <rx_work_handler+0x158>)
   10990:	481b      	ldr	r0, [pc, #108]	; (10a00 <rx_work_handler+0x15c>)
   10992:	f013 fb46 	bl	24022 <assert_print>
   10996:	4040      	eors	r0, r0
   10998:	f380 8811 	msr	BASEPRI, r0
   1099c:	f04f 0003 	mov.w	r0, #3
   109a0:	df02      	svc	2
   109a2:	2102      	movs	r1, #2
   109a4:	f104 000c 	add.w	r0, r4, #12
   109a8:	f007 ff54 	bl	18854 <net_buf_simple_pull_mem>
   109ac:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   109ae:	7800      	ldrb	r0, [r0, #0]
   109b0:	f014 fb12 	bl	24fd8 <bt_hci_evt_get_flags>
   109b4:	0783      	lsls	r3, r0, #30
   109b6:	d40c      	bmi.n	109d2 <rx_work_handler+0x12e>
   109b8:	f640 1371 	movw	r3, #2417	; 0x971
   109bc:	4a0e      	ldr	r2, [pc, #56]	; (109f8 <rx_work_handler+0x154>)
   109be:	4918      	ldr	r1, [pc, #96]	; (10a20 <rx_work_handler+0x17c>)
   109c0:	480f      	ldr	r0, [pc, #60]	; (10a00 <rx_work_handler+0x15c>)
   109c2:	f013 fb2e 	bl	24022 <assert_print>
   109c6:	4040      	eors	r0, r0
   109c8:	f380 8811 	msr	BASEPRI, r0
   109cc:	f04f 0003 	mov.w	r0, #3
   109d0:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   109d2:	2306      	movs	r3, #6
   109d4:	4621      	mov	r1, r4
   109d6:	4a13      	ldr	r2, [pc, #76]	; (10a24 <rx_work_handler+0x180>)
   109d8:	7828      	ldrb	r0, [r5, #0]
   109da:	f7ff ff23 	bl	10824 <handle_event>
	net_buf_unref(buf);
   109de:	e79a      	b.n	10916 <rx_work_handler+0x72>
	switch (bt_buf_get_type(buf)) {
   109e0:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   109e2:	4b11      	ldr	r3, [pc, #68]	; (10a28 <rx_work_handler+0x184>)
   109e4:	2201      	movs	r2, #1
   109e6:	9302      	str	r3, [sp, #8]
   109e8:	2300      	movs	r3, #0
   109ea:	4907      	ldr	r1, [pc, #28]	; (10a08 <rx_work_handler+0x164>)
   109ec:	4618      	mov	r0, r3
   109ee:	e9cd 3300 	strd	r3, r3, [sp]
   109f2:	e7a1      	b.n	10938 <rx_work_handler+0x94>
   109f4:	2000813c 	.word	0x2000813c
   109f8:	0002c471 	.word	0x0002c471
   109fc:	0002c4a5 	.word	0x0002c4a5
   10a00:	0002a669 	.word	0x0002a669
   10a04:	0002c4be 	.word	0x0002c4be
   10a08:	000296c4 	.word	0x000296c4
   10a0c:	0002c4e2 	.word	0x0002c4e2
   10a10:	20008000 	.word	0x20008000
   10a14:	200084ac 	.word	0x200084ac
   10a18:	20009618 	.word	0x20009618
   10a1c:	0002c3a4 	.word	0x0002c3a4
   10a20:	0002c504 	.word	0x0002c504
   10a24:	00029f5c 	.word	0x00029f5c
   10a28:	0002c532 	.word	0x0002c532

00010a2c <hci_le_meta_event>:
{
   10a2c:	b510      	push	{r4, lr}
   10a2e:	2101      	movs	r1, #1
   10a30:	4604      	mov	r4, r0
   10a32:	300c      	adds	r0, #12
   10a34:	f007 ff0e 	bl	18854 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   10a38:	4621      	mov	r1, r4
}
   10a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   10a3e:	230a      	movs	r3, #10
   10a40:	4a01      	ldr	r2, [pc, #4]	; (10a48 <hci_le_meta_event+0x1c>)
   10a42:	7800      	ldrb	r0, [r0, #0]
   10a44:	f7ff beee 	b.w	10824 <handle_event>
   10a48:	00029f8c 	.word	0x00029f8c

00010a4c <le_remote_feat_complete>:
{
   10a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   10a4e:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10a50:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   10a54:	4630      	mov	r0, r6
   10a56:	f002 fd0f 	bl	13478 <bt_conn_lookup_handle>
	if (!conn) {
   10a5a:	4604      	mov	r4, r0
   10a5c:	b958      	cbnz	r0, 10a76 <le_remote_feat_complete+0x2a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   10a5e:	4b10      	ldr	r3, [pc, #64]	; (10aa0 <le_remote_feat_complete+0x54>)
   10a60:	2201      	movs	r2, #1
   10a62:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10a66:	490f      	ldr	r1, [pc, #60]	; (10aa4 <le_remote_feat_complete+0x58>)
   10a68:	4603      	mov	r3, r0
   10a6a:	9603      	str	r6, [sp, #12]
   10a6c:	9000      	str	r0, [sp, #0]
   10a6e:	f014 faf5 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   10a72:	b004      	add	sp, #16
   10a74:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   10a76:	782b      	ldrb	r3, [r5, #0]
   10a78:	b93b      	cbnz	r3, 10a8a <le_remote_feat_complete+0x3e>
   10a7a:	f8d5 3003 	ldr.w	r3, [r5, #3]
   10a7e:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   10a82:	f8d5 3007 	ldr.w	r3, [r5, #7]
   10a86:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10a8e:	1d20      	adds	r0, r4, #4
   10a90:	f014 facd 	bl	2502e <atomic_or>
	bt_conn_unref(conn);
   10a94:	4620      	mov	r0, r4
}
   10a96:	b004      	add	sp, #16
   10a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   10a9c:	f002 bcbc 	b.w	13418 <bt_conn_unref>
   10aa0:	0002c3e3 	.word	0x0002c3e3
   10aa4:	000296c4 	.word	0x000296c4

00010aa8 <hci_cmd_done>:
{
   10aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10aac:	4606      	mov	r6, r0
   10aae:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   10ab0:	7a90      	ldrb	r0, [r2, #10]
{
   10ab2:	460f      	mov	r7, r1
   10ab4:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   10ab6:	f007 fb8f 	bl	181d8 <net_buf_pool_get>
   10aba:	4d3d      	ldr	r5, [pc, #244]	; (10bb0 <hci_cmd_done+0x108>)
   10abc:	4285      	cmp	r5, r0
   10abe:	d014      	beq.n	10aea <hci_cmd_done+0x42>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   10ac0:	7aa4      	ldrb	r4, [r4, #10]
   10ac2:	4620      	mov	r0, r4
   10ac4:	f007 fb88 	bl	181d8 <net_buf_pool_get>
   10ac8:	4b3a      	ldr	r3, [pc, #232]	; (10bb4 <hci_cmd_done+0x10c>)
   10aca:	e9cd 0505 	strd	r0, r5, [sp, #20]
   10ace:	9302      	str	r3, [sp, #8]
   10ad0:	2300      	movs	r3, #0
   10ad2:	2202      	movs	r2, #2
   10ad4:	4618      	mov	r0, r3
   10ad6:	e9cd 6403 	strd	r6, r4, [sp, #12]
   10ada:	e9cd 3300 	strd	r3, r3, [sp]
   10ade:	4936      	ldr	r1, [pc, #216]	; (10bb8 <hci_cmd_done+0x110>)
   10ae0:	f014 fabc 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   10ae4:	b008      	add	sp, #32
   10ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   10aea:	4620      	mov	r0, r4
   10aec:	f007 fb7c 	bl	181e8 <net_buf_id>
   10af0:	f04f 080c 	mov.w	r8, #12
   10af4:	4d31      	ldr	r5, [pc, #196]	; (10bbc <hci_cmd_done+0x114>)
   10af6:	fb08 5000 	mla	r0, r8, r0, r5
   10afa:	8843      	ldrh	r3, [r0, #2]
   10afc:	42b3      	cmp	r3, r6
   10afe:	d012      	beq.n	10b26 <hci_cmd_done+0x7e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   10b00:	4620      	mov	r0, r4
   10b02:	f007 fb71 	bl	181e8 <net_buf_id>
   10b06:	fb08 5000 	mla	r0, r8, r0, r5
   10b0a:	8843      	ldrh	r3, [r0, #2]
   10b0c:	2202      	movs	r2, #2
   10b0e:	e9cd 6303 	strd	r6, r3, [sp, #12]
   10b12:	4b2b      	ldr	r3, [pc, #172]	; (10bc0 <hci_cmd_done+0x118>)
   10b14:	4928      	ldr	r1, [pc, #160]	; (10bb8 <hci_cmd_done+0x110>)
   10b16:	9302      	str	r3, [sp, #8]
   10b18:	2300      	movs	r3, #0
   10b1a:	4618      	mov	r0, r3
   10b1c:	e9cd 3300 	strd	r3, r3, [sp]
   10b20:	f014 fa9c 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		return;
   10b24:	e7de      	b.n	10ae4 <hci_cmd_done+0x3c>
	if (bt_dev.sent_cmd) {
   10b26:	4e27      	ldr	r6, [pc, #156]	; (10bc4 <hci_cmd_done+0x11c>)
   10b28:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   10b2c:	b120      	cbz	r0, 10b38 <hci_cmd_done+0x90>
		net_buf_unref(bt_dev.sent_cmd);
   10b2e:	f007 fd8d 	bl	1864c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   10b32:	2300      	movs	r3, #0
   10b34:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   10b38:	4620      	mov	r0, r4
   10b3a:	f007 fb55 	bl	181e8 <net_buf_id>
   10b3e:	260c      	movs	r6, #12
   10b40:	fb06 5000 	mla	r0, r6, r0, r5
   10b44:	6843      	ldr	r3, [r0, #4]
   10b46:	b19b      	cbz	r3, 10b70 <hci_cmd_done+0xc8>
   10b48:	b997      	cbnz	r7, 10b70 <hci_cmd_done+0xc8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   10b4a:	4620      	mov	r0, r4
   10b4c:	f007 fb4c 	bl	181e8 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10b50:	2101      	movs	r1, #1
   10b52:	fb06 5000 	mla	r0, r6, r0, r5
   10b56:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   10b58:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   10b5c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   10b5e:	f003 061f 	and.w	r6, r3, #31
   10b62:	40b1      	lsls	r1, r6
	if (val) {
   10b64:	095b      	lsrs	r3, r3, #5
   10b66:	b1e2      	cbz	r2, 10ba2 <hci_cmd_done+0xfa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10b68:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   10b6c:	f014 fa5f 	bl	2502e <atomic_or>
	if (cmd(buf)->sync) {
   10b70:	4620      	mov	r0, r4
   10b72:	f007 fb39 	bl	181e8 <net_buf_id>
   10b76:	260c      	movs	r6, #12
   10b78:	fb06 5000 	mla	r0, r6, r0, r5
   10b7c:	6883      	ldr	r3, [r0, #8]
   10b7e:	2b00      	cmp	r3, #0
   10b80:	d0b0      	beq.n	10ae4 <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
   10b82:	4620      	mov	r0, r4
   10b84:	f007 fb30 	bl	181e8 <net_buf_id>
   10b88:	4370      	muls	r0, r6
   10b8a:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   10b8c:	4620      	mov	r0, r4
   10b8e:	f007 fb2b 	bl	181e8 <net_buf_id>
   10b92:	fb06 5500 	mla	r5, r6, r0, r5
   10b96:	68a8      	ldr	r0, [r5, #8]
}
   10b98:	b008      	add	sp, #32
   10b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   10b9e:	f00e badd 	b.w	1f15c <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10ba2:	43c9      	mvns	r1, r1
   10ba4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   10ba8:	f014 fa67 	bl	2507a <atomic_and.isra.0>
   10bac:	e7e0      	b.n	10b70 <hci_cmd_done+0xc8>
   10bae:	bf00      	nop
   10bb0:	20008cf0 	.word	0x20008cf0
   10bb4:	0002c546 	.word	0x0002c546
   10bb8:	000296c4 	.word	0x000296c4
   10bbc:	20020ef8 	.word	0x20020ef8
   10bc0:	0002c57b 	.word	0x0002c57b
   10bc4:	20008000 	.word	0x20008000

00010bc8 <hci_cmd_status>:
{
   10bc8:	b538      	push	{r3, r4, r5, lr}
   10bca:	2104      	movs	r1, #4
   10bcc:	4604      	mov	r4, r0
   10bce:	300c      	adds	r0, #12
   10bd0:	f007 fe40 	bl	18854 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   10bd4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   10bd6:	7801      	ldrb	r1, [r0, #0]
   10bd8:	4622      	mov	r2, r4
   10bda:	8840      	ldrh	r0, [r0, #2]
   10bdc:	f7ff ff64 	bl	10aa8 <hci_cmd_done>
	if (ncmd) {
   10be0:	b125      	cbz	r5, 10bec <hci_cmd_status+0x24>
}
   10be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10be6:	4802      	ldr	r0, [pc, #8]	; (10bf0 <hci_cmd_status+0x28>)
   10be8:	f00e bab8 	b.w	1f15c <z_impl_k_sem_give>
   10bec:	bd38      	pop	{r3, r4, r5, pc}
   10bee:	bf00      	nop
   10bf0:	20008120 	.word	0x20008120

00010bf4 <hci_cmd_complete>:
{
   10bf4:	b538      	push	{r3, r4, r5, lr}
   10bf6:	2103      	movs	r1, #3
   10bf8:	4604      	mov	r4, r0
   10bfa:	300c      	adds	r0, #12
   10bfc:	f007 fe2a 	bl	18854 <net_buf_simple_pull_mem>
	status = buf->data[0];
   10c00:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   10c02:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   10c04:	4622      	mov	r2, r4
   10c06:	7819      	ldrb	r1, [r3, #0]
   10c08:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   10c0c:	f7ff ff4c 	bl	10aa8 <hci_cmd_done>
	if (ncmd) {
   10c10:	b125      	cbz	r5, 10c1c <hci_cmd_complete+0x28>
}
   10c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10c16:	4802      	ldr	r0, [pc, #8]	; (10c20 <hci_cmd_complete+0x2c>)
   10c18:	f00e baa0 	b.w	1f15c <z_impl_k_sem_give>
   10c1c:	bd38      	pop	{r3, r4, r5, pc}
   10c1e:	bf00      	nop
   10c20:	20008120 	.word	0x20008120

00010c24 <hci_num_completed_packets>:
{
   10c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   10c28:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   10c2a:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   10c2c:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   10c2e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 10d18 <hci_num_completed_packets+0xf4>
	for (i = 0; i < evt->num_handles; i++) {
   10c32:	783b      	ldrb	r3, [r7, #0]
   10c34:	429d      	cmp	r5, r3
   10c36:	db02      	blt.n	10c3e <hci_num_completed_packets+0x1a>
}
   10c38:	b004      	add	sp, #16
   10c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   10c3e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   10c42:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   10c46:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   10c4a:	4650      	mov	r0, sl
   10c4c:	f002 fc14 	bl	13478 <bt_conn_lookup_handle>
		if (!conn) {
   10c50:	4604      	mov	r4, r0
   10c52:	b1d8      	cbz	r0, 10c8c <hci_num_completed_packets+0x68>
			k_work_submit(&conn->tx_complete_work);
   10c54:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   10c58:	2e00      	cmp	r6, #0
   10c5a:	d032      	beq.n	10cc2 <hci_num_completed_packets+0x9e>
	__asm__ volatile(
   10c5c:	f04f 0320 	mov.w	r3, #32
   10c60:	f3ef 8211 	mrs	r2, BASEPRI
   10c64:	f383 8812 	msr	BASEPRI_MAX, r3
   10c68:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   10c6c:	69e3      	ldr	r3, [r4, #28]
   10c6e:	b1d3      	cbz	r3, 10ca6 <hci_num_completed_packets+0x82>
				conn->pending_no_cb--;
   10c70:	3b01      	subs	r3, #1
   10c72:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   10c74:	f382 8811 	msr	BASEPRI, r2
   10c78:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   10c7c:	4620      	mov	r0, r4
   10c7e:	f002 f9f3 	bl	13068 <bt_conn_get_pkts>
   10c82:	3e01      	subs	r6, #1
   10c84:	f00e fa6a 	bl	1f15c <z_impl_k_sem_give>
   10c88:	b2b6      	uxth	r6, r6
   10c8a:	e7e5      	b.n	10c58 <hci_num_completed_packets+0x34>
			LOG_ERR("No connection for handle %u", handle);
   10c8c:	4b23      	ldr	r3, [pc, #140]	; (10d1c <hci_num_completed_packets+0xf8>)
   10c8e:	2201      	movs	r2, #1
   10c90:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10c94:	4922      	ldr	r1, [pc, #136]	; (10d20 <hci_num_completed_packets+0xfc>)
   10c96:	4603      	mov	r3, r0
   10c98:	f8cd a00c 	str.w	sl, [sp, #12]
   10c9c:	9000      	str	r0, [sp, #0]
   10c9e:	f014 f9dd 	bl	2505c <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   10ca2:	3501      	adds	r5, #1
   10ca4:	e7c5      	b.n	10c32 <hci_num_completed_packets+0xe>
   10ca6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   10ca8:	b97b      	cbnz	r3, 10cca <hci_num_completed_packets+0xa6>
   10caa:	f382 8811 	msr	BASEPRI, r2
   10cae:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   10cb2:	2201      	movs	r2, #1
   10cb4:	4618      	mov	r0, r3
   10cb6:	e9cd 3901 	strd	r3, r9, [sp, #4]
   10cba:	4919      	ldr	r1, [pc, #100]	; (10d20 <hci_num_completed_packets+0xfc>)
   10cbc:	9300      	str	r3, [sp, #0]
   10cbe:	f014 f9cd 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   10cc2:	4620      	mov	r0, r4
   10cc4:	f002 fba8 	bl	13418 <bt_conn_unref>
   10cc8:	e7eb      	b.n	10ca2 <hci_num_completed_packets+0x7e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10cca:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   10ccc:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10cce:	4283      	cmp	r3, r0
	list->head = node;
   10cd0:	6161      	str	r1, [r4, #20]
	list->tail = node;
   10cd2:	bf08      	it	eq
   10cd4:	61a1      	streq	r1, [r4, #24]
   10cd6:	f382 8811 	msr	BASEPRI, r2
   10cda:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   10cde:	f04f 0220 	mov.w	r2, #32
   10ce2:	f3ef 8111 	mrs	r1, BASEPRI
   10ce6:	f382 8812 	msr	BASEPRI_MAX, r2
   10cea:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   10cee:	68da      	ldr	r2, [r3, #12]
   10cf0:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   10cf2:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   10cf6:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   10cfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   10cfc:	b94a      	cbnz	r2, 10d12 <hci_num_completed_packets+0xee>
	list->head = node;
   10cfe:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   10d02:	f381 8811 	msr	BASEPRI, r1
   10d06:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   10d0a:	4650      	mov	r0, sl
   10d0c:	f00e fd94 	bl	1f838 <k_work_submit>
   10d10:	e7b4      	b.n	10c7c <hci_num_completed_packets+0x58>
	parent->next = child;
   10d12:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10d14:	6263      	str	r3, [r4, #36]	; 0x24
}
   10d16:	e7f4      	b.n	10d02 <hci_num_completed_packets+0xde>
   10d18:	0002c5ca 	.word	0x0002c5ca
   10d1c:	0002c5ae 	.word	0x0002c5ae
   10d20:	000296c4 	.word	0x000296c4

00010d24 <le_conn_update_complete>:
{
   10d24:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   10d26:	68c5      	ldr	r5, [r0, #12]
{
   10d28:	b086      	sub	sp, #24
	handle = sys_le16_to_cpu(evt->handle);
   10d2a:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   10d2e:	4630      	mov	r0, r6
   10d30:	f002 fba2 	bl	13478 <bt_conn_lookup_handle>
	if (!conn) {
   10d34:	4604      	mov	r4, r0
   10d36:	b958      	cbnz	r0, 10d50 <le_conn_update_complete+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   10d38:	4b2b      	ldr	r3, [pc, #172]	; (10de8 <le_conn_update_complete+0xc4>)
   10d3a:	2201      	movs	r2, #1
   10d3c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10d40:	492a      	ldr	r1, [pc, #168]	; (10dec <le_conn_update_complete+0xc8>)
   10d42:	4603      	mov	r3, r0
   10d44:	9603      	str	r6, [sp, #12]
   10d46:	9000      	str	r0, [sp, #0]
   10d48:	f014 f988 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   10d4c:	b006      	add	sp, #24
   10d4e:	bd70      	pop	{r4, r5, r6, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   10d50:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   10d52:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   10d54:	2b1a      	cmp	r3, #26
   10d56:	d119      	bne.n	10d8c <le_conn_update_complete+0x68>
   10d58:	78c3      	ldrb	r3, [r0, #3]
   10d5a:	2b01      	cmp	r3, #1
   10d5c:	d12a      	bne.n	10db4 <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10d5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10d62:	4630      	mov	r0, r6
   10d64:	f014 f963 	bl	2502e <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   10d68:	0542      	lsls	r2, r0, #21
   10d6a:	d40f      	bmi.n	10d8c <le_conn_update_complete+0x68>
		param.interval_min = conn->le.interval_min;
   10d6c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   10d70:	4620      	mov	r0, r4
		param.interval_min = conn->le.interval_min;
   10d72:	9304      	str	r3, [sp, #16]
		param.latency = conn->le.pending_latency;
   10d74:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   10d78:	a904      	add	r1, sp, #16
		param.latency = conn->le.pending_latency;
   10d7a:	9305      	str	r3, [sp, #20]
		bt_l2cap_update_conn_param(conn, &param);
   10d7c:	f003 f98a 	bl	14094 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   10d80:	4620      	mov	r0, r4
}
   10d82:	b006      	add	sp, #24
   10d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   10d88:	f002 bb46 	b.w	13418 <bt_conn_unref>
		if (!evt->status) {
   10d8c:	782b      	ldrb	r3, [r5, #0]
   10d8e:	b98b      	cbnz	r3, 10db4 <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   10d90:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   10d94:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   10d98:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   10d9c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10da0:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   10da4:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10da8:	f46f 7180 	mvn.w	r1, #256	; 0x100
   10dac:	4630      	mov	r0, r6
   10dae:	f014 f964 	bl	2507a <atomic_and.isra.0>
}
   10db2:	e014      	b.n	10dde <le_conn_update_complete+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10db4:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   10db8:	05db      	lsls	r3, r3, #23
   10dba:	d5f5      	bpl.n	10da8 <le_conn_update_complete+0x84>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   10dbc:	782b      	ldrb	r3, [r5, #0]
   10dbe:	2b20      	cmp	r3, #32
   10dc0:	d1f2      	bne.n	10da8 <le_conn_update_complete+0x84>
			   conn->le.conn_param_retry_countdown) {
   10dc2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   10dc6:	2b00      	cmp	r3, #0
   10dc8:	d0ee      	beq.n	10da8 <le_conn_update_complete+0x84>
			conn->le.conn_param_retry_countdown--;
   10dca:	3b01      	subs	r3, #1
   10dcc:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   10dd0:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   10dd4:	2300      	movs	r3, #0
   10dd6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   10dda:	f00e fee5 	bl	1fba8 <k_work_schedule>
		notify_le_param_updated(conn);
   10dde:	4620      	mov	r0, r4
   10de0:	f002 fc9a 	bl	13718 <notify_le_param_updated>
   10de4:	e7cc      	b.n	10d80 <le_conn_update_complete+0x5c>
   10de6:	bf00      	nop
   10de8:	0002c3e3 	.word	0x0002c3e3
   10dec:	000296c4 	.word	0x000296c4

00010df0 <bt_hci_cmd_state_set_init>:
{
   10df0:	b510      	push	{r4, lr}
	state->bit = bit;
   10df2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   10df6:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   10dfa:	460c      	mov	r4, r1
	state->val = val;
   10dfc:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   10dfe:	f007 f9f3 	bl	181e8 <net_buf_id>
   10e02:	220c      	movs	r2, #12
   10e04:	4b02      	ldr	r3, [pc, #8]	; (10e10 <bt_hci_cmd_state_set_init+0x20>)
   10e06:	fb02 3300 	mla	r3, r2, r0, r3
   10e0a:	605c      	str	r4, [r3, #4]
}
   10e0c:	bd10      	pop	{r4, pc}
   10e0e:	bf00      	nop
   10e10:	20020ef8 	.word	0x20020ef8

00010e14 <bt_hci_cmd_create>:
{
   10e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   10e18:	f04f 32ff 	mov.w	r2, #4294967295
   10e1c:	4606      	mov	r6, r0
   10e1e:	f04f 33ff 	mov.w	r3, #4294967295
   10e22:	481e      	ldr	r0, [pc, #120]	; (10e9c <bt_hci_cmd_create+0x88>)
   10e24:	460f      	mov	r7, r1
   10e26:	f015 ff67 	bl	26cf8 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   10e2a:	4604      	mov	r4, r0
   10e2c:	b958      	cbnz	r0, 10e46 <bt_hci_cmd_create+0x32>
   10e2e:	491c      	ldr	r1, [pc, #112]	; (10ea0 <bt_hci_cmd_create+0x8c>)
   10e30:	481c      	ldr	r0, [pc, #112]	; (10ea4 <bt_hci_cmd_create+0x90>)
   10e32:	f240 1301 	movw	r3, #257	; 0x101
   10e36:	4a1c      	ldr	r2, [pc, #112]	; (10ea8 <bt_hci_cmd_create+0x94>)
   10e38:	f013 f8f3 	bl	24022 <assert_print>
   10e3c:	f240 1101 	movw	r1, #257	; 0x101
   10e40:	4819      	ldr	r0, [pc, #100]	; (10ea8 <bt_hci_cmd_create+0x94>)
   10e42:	f013 f8e7 	bl	24014 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   10e46:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   10e4a:	f100 0a0c 	add.w	sl, r0, #12
   10e4e:	2101      	movs	r1, #1
   10e50:	4650      	mov	r0, sl
   10e52:	f007 fae9 	bl	18428 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   10e56:	4620      	mov	r0, r4
   10e58:	f884 8018 	strb.w	r8, [r4, #24]
   10e5c:	f007 f9c4 	bl	181e8 <net_buf_id>
   10e60:	f04f 090c 	mov.w	r9, #12
   10e64:	4d11      	ldr	r5, [pc, #68]	; (10eac <bt_hci_cmd_create+0x98>)
   10e66:	fb09 5000 	mla	r0, r9, r0, r5
   10e6a:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   10e6c:	4620      	mov	r0, r4
   10e6e:	f007 f9bb 	bl	181e8 <net_buf_id>
   10e72:	fb09 5000 	mla	r0, r9, r0, r5
   10e76:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   10e7a:	4620      	mov	r0, r4
   10e7c:	f007 f9b4 	bl	181e8 <net_buf_id>
   10e80:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   10e84:	2103      	movs	r1, #3
   10e86:	4650      	mov	r0, sl
   10e88:	f8c5 8004 	str.w	r8, [r5, #4]
   10e8c:	f007 fd00 	bl	18890 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   10e90:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   10e92:	7087      	strb	r7, [r0, #2]
}
   10e94:	4620      	mov	r0, r4
   10e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10e9a:	bf00      	nop
   10e9c:	20008cf0 	.word	0x20008cf0
   10ea0:	0002dfab 	.word	0x0002dfab
   10ea4:	0002a669 	.word	0x0002a669
   10ea8:	0002c471 	.word	0x0002c471
   10eac:	20020ef8 	.word	0x20020ef8

00010eb0 <bt_hci_cmd_send_sync>:
{
   10eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10eb4:	4607      	mov	r7, r0
   10eb6:	4615      	mov	r5, r2
	if (!buf) {
   10eb8:	460c      	mov	r4, r1
{
   10eba:	b08c      	sub	sp, #48	; 0x30
	if (!buf) {
   10ebc:	b921      	cbnz	r1, 10ec8 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   10ebe:	f7ff ffa9 	bl	10e14 <bt_hci_cmd_create>
		if (!buf) {
   10ec2:	4604      	mov	r4, r0
   10ec4:	2800      	cmp	r0, #0
   10ec6:	d056      	beq.n	10f76 <bt_hci_cmd_send_sync+0xc6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   10ec8:	ae06      	add	r6, sp, #24
   10eca:	2201      	movs	r2, #1
   10ecc:	2100      	movs	r1, #0
   10ece:	4630      	mov	r0, r6
   10ed0:	f017 fac3 	bl	2845a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   10ed4:	4620      	mov	r0, r4
   10ed6:	f007 f987 	bl	181e8 <net_buf_id>
   10eda:	230c      	movs	r3, #12
   10edc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 10f7c <bt_hci_cmd_send_sync+0xcc>
   10ee0:	fb03 8000 	mla	r0, r3, r0, r8
   10ee4:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   10ee6:	4620      	mov	r0, r4
   10ee8:	f007 fbf4 	bl	186d4 <net_buf_ref>
   10eec:	4601      	mov	r1, r0
   10eee:	4824      	ldr	r0, [pc, #144]	; (10f80 <bt_hci_cmd_send_sync+0xd0>)
   10ef0:	f007 fb86 	bl	18600 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   10ef4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   10ef8:	4630      	mov	r0, r6
   10efa:	2300      	movs	r3, #0
   10efc:	f00e f972 	bl	1f1e4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   10f00:	4606      	mov	r6, r0
   10f02:	b180      	cbz	r0, 10f26 <bt_hci_cmd_send_sync+0x76>
   10f04:	f240 1349 	movw	r3, #329	; 0x149
   10f08:	4a1e      	ldr	r2, [pc, #120]	; (10f84 <bt_hci_cmd_send_sync+0xd4>)
   10f0a:	491f      	ldr	r1, [pc, #124]	; (10f88 <bt_hci_cmd_send_sync+0xd8>)
   10f0c:	481f      	ldr	r0, [pc, #124]	; (10f8c <bt_hci_cmd_send_sync+0xdc>)
   10f0e:	f013 f888 	bl	24022 <assert_print>
   10f12:	4631      	mov	r1, r6
   10f14:	481e      	ldr	r0, [pc, #120]	; (10f90 <bt_hci_cmd_send_sync+0xe0>)
   10f16:	f013 f884 	bl	24022 <assert_print>
   10f1a:	4040      	eors	r0, r0
   10f1c:	f380 8811 	msr	BASEPRI, r0
   10f20:	f04f 0003 	mov.w	r0, #3
   10f24:	df02      	svc	2
	status = cmd(buf)->status;
   10f26:	4620      	mov	r0, r4
   10f28:	f007 f95e 	bl	181e8 <net_buf_id>
   10f2c:	230c      	movs	r3, #12
   10f2e:	4358      	muls	r0, r3
   10f30:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   10f34:	b1be      	cbz	r6, 10f66 <bt_hci_cmd_send_sync+0xb6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   10f36:	4b17      	ldr	r3, [pc, #92]	; (10f94 <bt_hci_cmd_send_sync+0xe4>)
   10f38:	2202      	movs	r2, #2
   10f3a:	9302      	str	r3, [sp, #8]
   10f3c:	2300      	movs	r3, #0
   10f3e:	4916      	ldr	r1, [pc, #88]	; (10f98 <bt_hci_cmd_send_sync+0xe8>)
   10f40:	4618      	mov	r0, r3
   10f42:	e9cd 3300 	strd	r3, r3, [sp]
   10f46:	e9cd 7603 	strd	r7, r6, [sp, #12]
   10f4a:	f014 f887 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   10f4e:	4620      	mov	r0, r4
   10f50:	f007 fb7c 	bl	1864c <net_buf_unref>
			return -ECONNREFUSED;
   10f54:	2e09      	cmp	r6, #9
   10f56:	bf14      	ite	ne
   10f58:	f06f 0004 	mvnne.w	r0, #4
   10f5c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   10f60:	b00c      	add	sp, #48	; 0x30
   10f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   10f66:	b115      	cbz	r5, 10f6e <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   10f68:	602c      	str	r4, [r5, #0]
	return 0;
   10f6a:	2000      	movs	r0, #0
   10f6c:	e7f8      	b.n	10f60 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   10f6e:	4620      	mov	r0, r4
   10f70:	f007 fb6c 	bl	1864c <net_buf_unref>
   10f74:	e7f9      	b.n	10f6a <bt_hci_cmd_send_sync+0xba>
			return -ENOBUFS;
   10f76:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10f7a:	e7f1      	b.n	10f60 <bt_hci_cmd_send_sync+0xb0>
   10f7c:	20020ef8 	.word	0x20020ef8
   10f80:	20008144 	.word	0x20008144
   10f84:	0002c471 	.word	0x0002c471
   10f88:	0002b4d1 	.word	0x0002b4d1
   10f8c:	0002a669 	.word	0x0002a669
   10f90:	0002c5e1 	.word	0x0002c5e1
   10f94:	0002c601 	.word	0x0002c601
   10f98:	000296c4 	.word	0x000296c4

00010f9c <hci_le_read_max_data_len>:
{
   10f9c:	b570      	push	{r4, r5, r6, lr}
   10f9e:	b086      	sub	sp, #24
   10fa0:	4606      	mov	r6, r0
   10fa2:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   10fa4:	f242 002f 	movw	r0, #8239	; 0x202f
   10fa8:	2100      	movs	r1, #0
   10faa:	aa05      	add	r2, sp, #20
   10fac:	f7ff ff80 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
   10fb0:	4604      	mov	r4, r0
   10fb2:	b160      	cbz	r0, 10fce <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   10fb4:	4b0b      	ldr	r3, [pc, #44]	; (10fe4 <hci_le_read_max_data_len+0x48>)
   10fb6:	2201      	movs	r2, #1
   10fb8:	9302      	str	r3, [sp, #8]
   10fba:	2300      	movs	r3, #0
   10fbc:	490a      	ldr	r1, [pc, #40]	; (10fe8 <hci_le_read_max_data_len+0x4c>)
   10fbe:	4618      	mov	r0, r3
   10fc0:	e9cd 3300 	strd	r3, r3, [sp]
   10fc4:	f014 f84a 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   10fc8:	4620      	mov	r0, r4
   10fca:	b006      	add	sp, #24
   10fcc:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   10fce:	9805      	ldr	r0, [sp, #20]
   10fd0:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   10fd2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10fd6:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   10fd8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   10fdc:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   10fde:	f007 fb35 	bl	1864c <net_buf_unref>
	return 0;
   10fe2:	e7f1      	b.n	10fc8 <hci_le_read_max_data_len+0x2c>
   10fe4:	0002c61d 	.word	0x0002c61d
   10fe8:	000296c4 	.word	0x000296c4

00010fec <bt_hci_le_rand>:
{
   10fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   10fee:	4b14      	ldr	r3, [pc, #80]	; (11040 <bt_hci_le_rand+0x54>)
{
   10ff0:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   10ff2:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   10ff6:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   10ff8:	2b00      	cmp	r3, #0
   10ffa:	da1d      	bge.n	11038 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   10ffc:	b914      	cbnz	r4, 11004 <bt_hci_le_rand+0x18>
	return 0;
   10ffe:	4620      	mov	r0, r4
}
   11000:	b003      	add	sp, #12
   11002:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   11004:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11006:	f04f 0100 	mov.w	r1, #0
   1100a:	f242 0018 	movw	r0, #8216	; 0x2018
   1100e:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   11010:	4626      	mov	r6, r4
   11012:	bf28      	it	cs
   11014:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11016:	f7ff ff4b 	bl	10eb0 <bt_hci_cmd_send_sync>
		if (err) {
   1101a:	2800      	cmp	r0, #0
   1101c:	d1f0      	bne.n	11000 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   1101e:	9f01      	ldr	r7, [sp, #4]
   11020:	4632      	mov	r2, r6
   11022:	68f9      	ldr	r1, [r7, #12]
   11024:	4628      	mov	r0, r5
   11026:	3101      	adds	r1, #1
   11028:	f017 fbcb 	bl	287c2 <memcpy>
		net_buf_unref(rsp);
   1102c:	4638      	mov	r0, r7
   1102e:	f007 fb0d 	bl	1864c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   11032:	4435      	add	r5, r6
		len -= count;
   11034:	1ba4      	subs	r4, r4, r6
   11036:	e7e1      	b.n	10ffc <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   11038:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1103c:	e7e0      	b.n	11000 <bt_hci_le_rand+0x14>
   1103e:	bf00      	nop
   11040:	20008000 	.word	0x20008000

00011044 <bt_hci_le_enh_conn_complete>:
{
   11044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11048:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   1104c:	2700      	movs	r7, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   1104e:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   11052:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   11056:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   11058:	4a9f      	ldr	r2, [pc, #636]	; (112d8 <bt_hci_le_enh_conn_complete+0x294>)
   1105a:	b29b      	uxth	r3, r3
   1105c:	8811      	ldrh	r1, [r2, #0]
{
   1105e:	b08a      	sub	sp, #40	; 0x28
		if (disconnected_handles[i] == handle) {
   11060:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   11062:	bf04      	itt	eq
   11064:	8017      	strheq	r7, [r2, #0]
			return true;
   11066:	2701      	moveq	r7, #1
	bt_id_pending_keys_update();
   11068:	f000 fe96 	bl	11d98 <bt_id_pending_keys_update>
	if (evt->status) {
   1106c:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1106e:	fa1f f988 	uxth.w	r9, r8
	if (evt->status) {
   11072:	b37e      	cbz	r6, 110d4 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11074:	2e3c      	cmp	r6, #60	; 0x3c
   11076:	d121      	bne.n	110bc <bt_hci_le_enh_conn_complete+0x78>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11078:	f001 fada 	bl	12630 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1107c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   11080:	3010      	adds	r0, #16
   11082:	f013 fffa 	bl	2507a <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   11086:	2000      	movs	r0, #0
   11088:	f7ff fb02 	bl	10690 <find_pending_connect.part.0>
		if (!conn) {
   1108c:	4604      	mov	r4, r0
   1108e:	b958      	cbnz	r0, 110a8 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   11090:	4b92      	ldr	r3, [pc, #584]	; (112dc <bt_hci_le_enh_conn_complete+0x298>)
   11092:	2201      	movs	r2, #1
   11094:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11098:	4991      	ldr	r1, [pc, #580]	; (112e0 <bt_hci_le_enh_conn_complete+0x29c>)
   1109a:	4603      	mov	r3, r0
   1109c:	9000      	str	r0, [sp, #0]
   1109e:	f013 ffdd 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   110a2:	b00a      	add	sp, #40	; 0x28
   110a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   110a8:	7306      	strb	r6, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   110aa:	2100      	movs	r1, #0
   110ac:	f002 f9ec 	bl	13488 <bt_conn_set_state>
		bt_conn_unref(conn);
   110b0:	4620      	mov	r0, r4
}
   110b2:	b00a      	add	sp, #40	; 0x28
   110b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   110b8:	f002 b9ae 	b.w	13418 <bt_conn_unref>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   110bc:	4b89      	ldr	r3, [pc, #548]	; (112e4 <bt_hci_le_enh_conn_complete+0x2a0>)
   110be:	2202      	movs	r2, #2
   110c0:	9302      	str	r3, [sp, #8]
   110c2:	2300      	movs	r3, #0
   110c4:	4986      	ldr	r1, [pc, #536]	; (112e0 <bt_hci_le_enh_conn_complete+0x29c>)
   110c6:	4618      	mov	r0, r3
   110c8:	e9cd 3300 	strd	r3, r3, [sp]
   110cc:	9603      	str	r6, [sp, #12]
   110ce:	f013 ffc5 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		return;
   110d2:	e7e6      	b.n	110a2 <bt_hci_le_enh_conn_complete+0x5e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   110d4:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   110d6:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   110da:	3b02      	subs	r3, #2
   110dc:	2b01      	cmp	r3, #1
   110de:	d827      	bhi.n	11130 <bt_hci_le_enh_conn_complete+0xec>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   110e0:	4651      	mov	r1, sl
   110e2:	a808      	add	r0, sp, #32
   110e4:	f013 ffb3 	bl	2504e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   110e8:	f89d 3020 	ldrb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   110ec:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   110f0:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   110f2:	f10d 0019 	add.w	r0, sp, #25
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   110f6:	f88d 3020 	strb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   110fa:	f013 ffa3 	bl	25044 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   110fe:	2301      	movs	r3, #1
   11100:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   11104:	78eb      	ldrb	r3, [r5, #3]
   11106:	2b01      	cmp	r3, #1
   11108:	d025      	beq.n	11156 <bt_hci_le_enh_conn_complete+0x112>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   1110a:	4650      	mov	r0, sl
   1110c:	f7ff f98c 	bl	10428 <bt_addr_le_str>
   11110:	4b75      	ldr	r3, [pc, #468]	; (112e8 <bt_hci_le_enh_conn_complete+0x2a4>)
   11112:	9003      	str	r0, [sp, #12]
   11114:	9302      	str	r3, [sp, #8]
   11116:	2300      	movs	r3, #0
   11118:	2201      	movs	r2, #1
   1111a:	4618      	mov	r0, r3
   1111c:	e9cd 3300 	strd	r3, r3, [sp]
   11120:	496f      	ldr	r1, [pc, #444]	; (112e0 <bt_hci_le_enh_conn_complete+0x29c>)
   11122:	f013 ff9b 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   11126:	211f      	movs	r1, #31
   11128:	4648      	mov	r0, r9
   1112a:	f013 ffbe 	bl	250aa <bt_hci_disconnect>
		return;
   1112e:	e7b8      	b.n	110a2 <bt_hci_le_enh_conn_complete+0x5e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   11130:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   11132:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   11134:	2b01      	cmp	r3, #1
   11136:	bf04      	itt	eq
   11138:	4b6c      	ldreq	r3, [pc, #432]	; (112ec <bt_hci_le_enh_conn_complete+0x2a8>)
   1113a:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   1113e:	4630      	mov	r0, r6
   11140:	f014 f8e0 	bl	25304 <bt_lookup_id_addr>
   11144:	4601      	mov	r1, r0
   11146:	a808      	add	r0, sp, #32
   11148:	f013 ff81 	bl	2504e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   1114c:	4651      	mov	r1, sl
   1114e:	a806      	add	r0, sp, #24
   11150:	f013 ff7d 	bl	2504e <bt_addr_le_copy>
   11154:	e7d6      	b.n	11104 <bt_hci_le_enh_conn_complete+0xc0>
   11156:	a808      	add	r0, sp, #32
   11158:	f7ff fa9a 	bl	10690 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1115c:	78eb      	ldrb	r3, [r5, #3]
   1115e:	4604      	mov	r4, r0
   11160:	2b01      	cmp	r3, #1
   11162:	d10a      	bne.n	1117a <bt_hci_le_enh_conn_complete+0x136>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   11164:	f001 fa64 	bl	12630 <bt_le_adv_lookup_legacy>
   11168:	4606      	mov	r6, r0
   1116a:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1116e:	3010      	adds	r0, #16
   11170:	f013 ff83 	bl	2507a <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   11174:	4630      	mov	r0, r6
   11176:	f014 f9f3 	bl	25560 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   1117a:	2c00      	cmp	r4, #0
   1117c:	d0c5      	beq.n	1110a <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   1117e:	4620      	mov	r0, r4
	conn->err = 0U;
   11180:	2200      	movs	r2, #0
	conn->handle = handle;
   11182:	f820 8b90 	strh.w	r8, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   11186:	a908      	add	r1, sp, #32
   11188:	f013 ff61 	bl	2504e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1118c:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   11190:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   11194:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   11198:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1119c:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   111a0:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   111a4:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   111a6:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   111a8:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   111aa:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   111ac:	d115      	bne.n	111da <bt_hci_le_enh_conn_complete+0x196>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   111ae:	a906      	add	r1, sp, #24
   111b0:	f104 0097 	add.w	r0, r4, #151	; 0x97
   111b4:	f013 ff4b 	bl	2504e <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   111b8:	f001 fa3a 	bl	12630 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   111bc:	7a21      	ldrb	r1, [r4, #8]
   111be:	4a4b      	ldr	r2, [pc, #300]	; (112ec <bt_hci_le_enh_conn_complete+0x2a8>)
   111c0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   111c4:	4411      	add	r1, r2
   111c6:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   111ca:	f013 ff40 	bl	2504e <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   111ce:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   111d2:	065d      	lsls	r5, r3, #25
   111d4:	d501      	bpl.n	111da <bt_hci_le_enh_conn_complete+0x196>
			bt_le_adv_resume();
   111d6:	f001 fbef 	bl	129b8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   111da:	2107      	movs	r1, #7
   111dc:	4620      	mov	r0, r4
   111de:	f002 f953 	bl	13488 <bt_conn_set_state>
	if (is_disconnected) {
   111e2:	b11f      	cbz	r7, 111ec <bt_hci_le_enh_conn_complete+0x1a8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   111e4:	2101      	movs	r1, #1
   111e6:	4620      	mov	r0, r4
   111e8:	f002 f94e 	bl	13488 <bt_conn_set_state>
	bt_conn_connected(conn);
   111ec:	4620      	mov	r0, r4
   111ee:	f014 fa68 	bl	256c2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   111f2:	7b63      	ldrb	r3, [r4, #13]
   111f4:	2b07      	cmp	r3, #7
   111f6:	d167      	bne.n	112c8 <bt_hci_le_enh_conn_complete+0x284>
   111f8:	1d23      	adds	r3, r4, #4
   111fa:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   111fe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   11202:	4e3a      	ldr	r6, [pc, #232]	; (112ec <bt_hci_le_enh_conn_complete+0x2a8>)
   11204:	d125      	bne.n	11252 <bt_hci_le_enh_conn_complete+0x20e>
   11206:	78e3      	ldrb	r3, [r4, #3]
   11208:	b11b      	cbz	r3, 11212 <bt_hci_le_enh_conn_complete+0x1ce>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1120a:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1120e:	0718      	lsls	r0, r3, #28
   11210:	d51f      	bpl.n	11252 <bt_hci_le_enh_conn_complete+0x20e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   11212:	2102      	movs	r1, #2
   11214:	f242 0016 	movw	r0, #8214	; 0x2016
   11218:	f7ff fdfc 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   1121c:	4605      	mov	r5, r0
   1121e:	2800      	cmp	r0, #0
   11220:	d056      	beq.n	112d0 <bt_hci_le_enh_conn_complete+0x28c>
   11222:	2102      	movs	r1, #2
   11224:	300c      	adds	r0, #12
   11226:	f007 fb33 	bl	18890 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1122a:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   1122c:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   1122e:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   11230:	4629      	mov	r1, r5
   11232:	f242 0016 	movw	r0, #8214	; 0x2016
   11236:	f7ff fe3b 	bl	10eb0 <bt_hci_cmd_send_sync>
		if (err) {
   1123a:	b150      	cbz	r0, 11252 <bt_hci_le_enh_conn_complete+0x20e>
			LOG_ERR("Failed read remote features (%d)", err);
   1123c:	4b2c      	ldr	r3, [pc, #176]	; (112f0 <bt_hci_le_enh_conn_complete+0x2ac>)
   1123e:	9003      	str	r0, [sp, #12]
   11240:	9302      	str	r3, [sp, #8]
   11242:	2300      	movs	r3, #0
   11244:	2201      	movs	r2, #1
   11246:	4618      	mov	r0, r3
   11248:	e9cd 3300 	strd	r3, r3, [sp]
   1124c:	4924      	ldr	r1, [pc, #144]	; (112e0 <bt_hci_le_enh_conn_complete+0x29c>)
   1124e:	f013 ff05 	bl	2505c <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   11252:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   11256:	07d9      	lsls	r1, r3, #31
   11258:	d513      	bpl.n	11282 <bt_hci_le_enh_conn_complete+0x23e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1125a:	2500      	movs	r5, #0
   1125c:	2302      	movs	r3, #2
   1125e:	4629      	mov	r1, r5
   11260:	461a      	mov	r2, r3
   11262:	4620      	mov	r0, r4
   11264:	9500      	str	r5, [sp, #0]
   11266:	f013 ff59 	bl	2511c <bt_le_set_phy>
		if (err) {
   1126a:	b150      	cbz	r0, 11282 <bt_hci_le_enh_conn_complete+0x23e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   1126c:	4b21      	ldr	r3, [pc, #132]	; (112f4 <bt_hci_le_enh_conn_complete+0x2b0>)
   1126e:	9003      	str	r0, [sp, #12]
   11270:	e9cd 5301 	strd	r5, r3, [sp, #4]
   11274:	2201      	movs	r2, #1
   11276:	462b      	mov	r3, r5
   11278:	4628      	mov	r0, r5
   1127a:	4919      	ldr	r1, [pc, #100]	; (112e0 <bt_hci_le_enh_conn_complete+0x29c>)
   1127c:	9500      	str	r5, [sp, #0]
   1127e:	f013 feed 	bl	2505c <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   11282:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   11286:	069a      	lsls	r2, r3, #26
   11288:	d51e      	bpl.n	112c8 <bt_hci_le_enh_conn_complete+0x284>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1128a:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   1128e:	689b      	ldr	r3, [r3, #8]
   11290:	079b      	lsls	r3, r3, #30
   11292:	d519      	bpl.n	112c8 <bt_hci_le_enh_conn_complete+0x284>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   11294:	f10d 0116 	add.w	r1, sp, #22
   11298:	a805      	add	r0, sp, #20
   1129a:	f7ff fe7f 	bl	10f9c <hci_le_read_max_data_len>
			if (!err) {
   1129e:	4605      	mov	r5, r0
   112a0:	b990      	cbnz	r0, 112c8 <bt_hci_le_enh_conn_complete+0x284>
				err = bt_le_set_data_len(conn,
   112a2:	4620      	mov	r0, r4
   112a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   112a8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   112ac:	f013 ff18 	bl	250e0 <bt_le_set_data_len>
				if (err) {
   112b0:	b150      	cbz	r0, 112c8 <bt_hci_le_enh_conn_complete+0x284>
					LOG_ERR("Failed to set data len (%d)", err);
   112b2:	4b11      	ldr	r3, [pc, #68]	; (112f8 <bt_hci_le_enh_conn_complete+0x2b4>)
   112b4:	9003      	str	r0, [sp, #12]
   112b6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   112ba:	2201      	movs	r2, #1
   112bc:	462b      	mov	r3, r5
   112be:	4628      	mov	r0, r5
   112c0:	4907      	ldr	r1, [pc, #28]	; (112e0 <bt_hci_le_enh_conn_complete+0x29c>)
   112c2:	9500      	str	r5, [sp, #0]
   112c4:	f013 feca 	bl	2505c <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   112c8:	4620      	mov	r0, r4
   112ca:	f002 f8a5 	bl	13418 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   112ce:	e6e8      	b.n	110a2 <bt_hci_le_enh_conn_complete+0x5e>
		return -ENOBUFS;
   112d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   112d4:	e7b2      	b.n	1123c <bt_hci_le_enh_conn_complete+0x1f8>
   112d6:	bf00      	nop
   112d8:	200214ae 	.word	0x200214ae
   112dc:	0002c63d 	.word	0x0002c63d
   112e0:	000296c4 	.word	0x000296c4
   112e4:	0002c65e 	.word	0x0002c65e
   112e8:	0002c677 	.word	0x0002c677
   112ec:	20008000 	.word	0x20008000
   112f0:	0002c693 	.word	0x0002c693
   112f4:	0002c6b4 	.word	0x0002c6b4
   112f8:	0002c6cb 	.word	0x0002c6cb

000112fc <le_legacy_conn_complete>:
{
   112fc:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   112fe:	68c1      	ldr	r1, [r0, #12]
{
   11300:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   11302:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   11304:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   11306:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   1130a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1130e:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   11310:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   11314:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   11318:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1131c:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   11320:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   11324:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   11328:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1132c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   11330:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   11334:	7b4b      	ldrb	r3, [r1, #13]
   11336:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1133a:	f013 fe88 	bl	2504e <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1133e:	4907      	ldr	r1, [pc, #28]	; (1135c <le_legacy_conn_complete+0x60>)
   11340:	f10d 000b 	add.w	r0, sp, #11
   11344:	f013 fe7e 	bl	25044 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   11348:	f10d 0011 	add.w	r0, sp, #17
   1134c:	f013 fe7a 	bl	25044 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   11350:	4668      	mov	r0, sp
   11352:	f7ff fe77 	bl	11044 <bt_hci_le_enh_conn_complete>
}
   11356:	b009      	add	sp, #36	; 0x24
   11358:	f85d fb04 	ldr.w	pc, [sp], #4
   1135c:	0002c2b0 	.word	0x0002c2b0

00011360 <bt_security_err_get>:
	switch (hci_err) {
   11360:	2829      	cmp	r0, #41	; 0x29
   11362:	bf9a      	itte	ls
   11364:	4b01      	ldrls	r3, [pc, #4]	; (1136c <bt_security_err_get+0xc>)
   11366:	5c18      	ldrbls	r0, [r3, r0]
{
   11368:	2009      	movhi	r0, #9
}
   1136a:	4770      	bx	lr
   1136c:	0002c96d 	.word	0x0002c96d

00011370 <hci_encrypt_key_refresh_complete>:
{
   11370:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   11372:	68c3      	ldr	r3, [r0, #12]
{
   11374:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(evt->handle);
   11376:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   1137a:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1137c:	4630      	mov	r0, r6
   1137e:	f002 f87b 	bl	13478 <bt_conn_lookup_handle>
	if (!conn) {
   11382:	4604      	mov	r4, r0
   11384:	b958      	cbnz	r0, 1139e <hci_encrypt_key_refresh_complete+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   11386:	4b1e      	ldr	r3, [pc, #120]	; (11400 <hci_encrypt_key_refresh_complete+0x90>)
   11388:	2201      	movs	r2, #1
   1138a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1138e:	491d      	ldr	r1, [pc, #116]	; (11404 <hci_encrypt_key_refresh_complete+0x94>)
   11390:	4603      	mov	r3, r0
   11392:	9603      	str	r6, [sp, #12]
   11394:	9000      	str	r0, [sp, #0]
   11396:	f013 fe61 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   1139a:	b005      	add	sp, #20
   1139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   1139e:	b16d      	cbz	r5, 113bc <hci_encrypt_key_refresh_complete+0x4c>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   113a0:	4628      	mov	r0, r5
   113a2:	f7ff ffdd 	bl	11360 <bt_security_err_get>
   113a6:	4629      	mov	r1, r5
   113a8:	4602      	mov	r2, r0
   113aa:	4620      	mov	r0, r4
   113ac:	f002 faa4 	bl	138f8 <bt_conn_security_changed>
	bt_conn_unref(conn);
   113b0:	4620      	mov	r0, r4
}
   113b2:	b005      	add	sp, #20
   113b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   113b8:	f002 b82e 	b.w	13418 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   113bc:	7887      	ldrb	r7, [r0, #2]
   113be:	2f01      	cmp	r7, #1
   113c0:	d1ee      	bne.n	113a0 <hci_encrypt_key_refresh_complete+0x30>
		bt_smp_update_keys(conn);
   113c2:	f006 fc2b 	bl	17c1c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   113c6:	4620      	mov	r0, r4
   113c8:	f013 fe18 	bl	24ffc <update_sec_level>
   113cc:	4606      	mov	r6, r0
   113ce:	2800      	cmp	r0, #0
   113d0:	d1e6      	bne.n	113a0 <hci_encrypt_key_refresh_complete+0x30>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   113d2:	2005      	movs	r0, #5
   113d4:	f7ff ffc4 	bl	11360 <bt_security_err_get>
   113d8:	2105      	movs	r1, #5
   113da:	4602      	mov	r2, r0
   113dc:	4620      	mov	r0, r4
   113de:	f002 fa8b 	bl	138f8 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   113e2:	4b09      	ldr	r3, [pc, #36]	; (11408 <hci_encrypt_key_refresh_complete+0x98>)
   113e4:	4630      	mov	r0, r6
   113e6:	e9cd 6301 	strd	r6, r3, [sp, #4]
   113ea:	463a      	mov	r2, r7
   113ec:	4633      	mov	r3, r6
   113ee:	4905      	ldr	r1, [pc, #20]	; (11404 <hci_encrypt_key_refresh_complete+0x94>)
   113f0:	9600      	str	r6, [sp, #0]
   113f2:	f013 fe33 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   113f6:	2105      	movs	r1, #5
   113f8:	4620      	mov	r0, r4
   113fa:	f014 f96b 	bl	256d4 <bt_conn_disconnect>
   113fe:	e7d7      	b.n	113b0 <hci_encrypt_key_refresh_complete+0x40>
   11400:	0002c407 	.word	0x0002c407
   11404:	000296c4 	.word	0x000296c4
   11408:	0002c6e7 	.word	0x0002c6e7

0001140c <hci_encrypt_change>:
{
   1140c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1140e:	68c6      	ldr	r6, [r0, #12]
{
   11410:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11412:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   11416:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   11418:	4638      	mov	r0, r7
   1141a:	f002 f82d 	bl	13478 <bt_conn_lookup_handle>
	if (!conn) {
   1141e:	4604      	mov	r4, r0
   11420:	b958      	cbnz	r0, 1143a <hci_encrypt_change+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   11422:	4b23      	ldr	r3, [pc, #140]	; (114b0 <hci_encrypt_change+0xa4>)
   11424:	2201      	movs	r2, #1
   11426:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1142a:	4922      	ldr	r1, [pc, #136]	; (114b4 <hci_encrypt_change+0xa8>)
   1142c:	4603      	mov	r3, r0
   1142e:	9703      	str	r7, [sp, #12]
   11430:	9000      	str	r0, [sp, #0]
   11432:	f013 fe13 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   11436:	b005      	add	sp, #20
   11438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   1143a:	b16d      	cbz	r5, 11458 <hci_encrypt_change+0x4c>
		bt_conn_security_changed(conn, status,
   1143c:	4628      	mov	r0, r5
   1143e:	f7ff ff8f 	bl	11360 <bt_security_err_get>
   11442:	4629      	mov	r1, r5
   11444:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   11446:	4620      	mov	r0, r4
   11448:	f002 fa56 	bl	138f8 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1144c:	4620      	mov	r0, r4
}
   1144e:	b005      	add	sp, #20
   11450:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   11454:	f001 bfe0 	b.w	13418 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   11458:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1145a:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   1145c:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   1145e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   11460:	d005      	beq.n	1146e <hci_encrypt_change+0x62>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   11462:	2000      	movs	r0, #0
   11464:	f7ff ff7c 	bl	11360 <bt_security_err_get>
   11468:	2100      	movs	r1, #0
   1146a:	4602      	mov	r2, r0
   1146c:	e7eb      	b.n	11446 <hci_encrypt_change+0x3a>
		if (conn->encrypt) {
   1146e:	b10b      	cbz	r3, 11474 <hci_encrypt_change+0x68>
			bt_smp_update_keys(conn);
   11470:	f006 fbd4 	bl	17c1c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   11474:	4620      	mov	r0, r4
   11476:	f013 fdc1 	bl	24ffc <update_sec_level>
   1147a:	4605      	mov	r5, r0
   1147c:	2800      	cmp	r0, #0
   1147e:	d1f0      	bne.n	11462 <hci_encrypt_change+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   11480:	2005      	movs	r0, #5
   11482:	f7ff ff6d 	bl	11360 <bt_security_err_get>
   11486:	2105      	movs	r1, #5
   11488:	4602      	mov	r2, r0
   1148a:	4620      	mov	r0, r4
   1148c:	f002 fa34 	bl	138f8 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   11490:	4b09      	ldr	r3, [pc, #36]	; (114b8 <hci_encrypt_change+0xac>)
   11492:	4628      	mov	r0, r5
   11494:	e9cd 5301 	strd	r5, r3, [sp, #4]
   11498:	2201      	movs	r2, #1
   1149a:	462b      	mov	r3, r5
   1149c:	4905      	ldr	r1, [pc, #20]	; (114b4 <hci_encrypt_change+0xa8>)
   1149e:	9500      	str	r5, [sp, #0]
   114a0:	f013 fddc 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   114a4:	2105      	movs	r1, #5
   114a6:	4620      	mov	r0, r4
   114a8:	f014 f914 	bl	256d4 <bt_conn_disconnect>
   114ac:	e7ce      	b.n	1144c <hci_encrypt_change+0x40>
   114ae:	bf00      	nop
   114b0:	0002c407 	.word	0x0002c407
   114b4:	000296c4 	.word	0x000296c4
   114b8:	0002c6e7 	.word	0x0002c6e7

000114bc <bt_send>:
	return bt_dev.drv->send(buf);
   114bc:	4b02      	ldr	r3, [pc, #8]	; (114c8 <bt_send+0xc>)
   114be:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   114c2:	695b      	ldr	r3, [r3, #20]
   114c4:	4718      	bx	r3
   114c6:	bf00      	nop
   114c8:	20008000 	.word	0x20008000

000114cc <bt_hci_cmd_send>:
{
   114cc:	b530      	push	{r4, r5, lr}
   114ce:	4605      	mov	r5, r0
	if (!buf) {
   114d0:	460c      	mov	r4, r1
{
   114d2:	b085      	sub	sp, #20
	if (!buf) {
   114d4:	b919      	cbnz	r1, 114de <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   114d6:	f7ff fc9d 	bl	10e14 <bt_hci_cmd_create>
		if (!buf) {
   114da:	4604      	mov	r4, r0
   114dc:	b1f8      	cbz	r0, 1151e <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   114de:	f640 4335 	movw	r3, #3125	; 0xc35
   114e2:	429d      	cmp	r5, r3
   114e4:	d115      	bne.n	11512 <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
   114e6:	4620      	mov	r0, r4
   114e8:	f7ff ffe8 	bl	114bc <bt_send>
		if (err) {
   114ec:	4605      	mov	r5, r0
   114ee:	b1a0      	cbz	r0, 1151a <bt_hci_cmd_send+0x4e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   114f0:	4b0c      	ldr	r3, [pc, #48]	; (11524 <bt_hci_cmd_send+0x58>)
   114f2:	9003      	str	r0, [sp, #12]
   114f4:	9302      	str	r3, [sp, #8]
   114f6:	2300      	movs	r3, #0
   114f8:	2201      	movs	r2, #1
   114fa:	4618      	mov	r0, r3
   114fc:	e9cd 3300 	strd	r3, r3, [sp]
   11500:	4909      	ldr	r1, [pc, #36]	; (11528 <bt_hci_cmd_send+0x5c>)
   11502:	f013 fdab 	bl	2505c <z_log_msg_runtime_create.constprop.0>
			net_buf_unref(buf);
   11506:	4620      	mov	r0, r4
   11508:	f007 f8a0 	bl	1864c <net_buf_unref>
}
   1150c:	4628      	mov	r0, r5
   1150e:	b005      	add	sp, #20
   11510:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   11512:	4621      	mov	r1, r4
   11514:	4805      	ldr	r0, [pc, #20]	; (1152c <bt_hci_cmd_send+0x60>)
   11516:	f007 f873 	bl	18600 <net_buf_put>
	return 0;
   1151a:	2500      	movs	r5, #0
   1151c:	e7f6      	b.n	1150c <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   1151e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   11522:	e7f3      	b.n	1150c <bt_hci_cmd_send+0x40>
   11524:	0002c70d 	.word	0x0002c70d
   11528:	000296c4 	.word	0x000296c4
   1152c:	20008144 	.word	0x20008144

00011530 <bt_hci_host_num_completed_packets>:
{
   11530:	b5f0      	push	{r4, r5, r6, r7, lr}
   11532:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   11534:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   11536:	7e46      	ldrb	r6, [r0, #25]
{
   11538:	b085      	sub	sp, #20
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1153a:	7a80      	ldrb	r0, [r0, #10]
   1153c:	f006 fe4c 	bl	181d8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   11540:	4621      	mov	r1, r4
   11542:	f016 ff80 	bl	28446 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   11546:	4b2a      	ldr	r3, [pc, #168]	; (115f0 <bt_hci_host_num_completed_packets+0xc0>)
   11548:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   1154c:	069b      	lsls	r3, r3, #26
   1154e:	d50e      	bpl.n	1156e <bt_hci_host_num_completed_packets+0x3e>
	conn = bt_conn_lookup_index(index);
   11550:	4630      	mov	r0, r6
   11552:	f002 fc2f 	bl	13db4 <bt_conn_lookup_index>
	if (!conn) {
   11556:	4604      	mov	r4, r0
   11558:	b958      	cbnz	r0, 11572 <bt_hci_host_num_completed_packets+0x42>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   1155a:	4b26      	ldr	r3, [pc, #152]	; (115f4 <bt_hci_host_num_completed_packets+0xc4>)
   1155c:	2202      	movs	r2, #2
   1155e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11562:	4925      	ldr	r1, [pc, #148]	; (115f8 <bt_hci_host_num_completed_packets+0xc8>)
   11564:	4603      	mov	r3, r0
   11566:	9603      	str	r6, [sp, #12]
   11568:	9000      	str	r0, [sp, #0]
   1156a:	f013 fd77 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   1156e:	b005      	add	sp, #20
   11570:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   11572:	7b43      	ldrb	r3, [r0, #13]
   11574:	3b07      	subs	r3, #7
   11576:	2b01      	cmp	r3, #1
   11578:	d90f      	bls.n	1159a <bt_hci_host_num_completed_packets+0x6a>
		LOG_WRN("Not reporting packet for non-connected conn");
   1157a:	4b20      	ldr	r3, [pc, #128]	; (115fc <bt_hci_host_num_completed_packets+0xcc>)
   1157c:	2202      	movs	r2, #2
   1157e:	9302      	str	r3, [sp, #8]
   11580:	2300      	movs	r3, #0
   11582:	491d      	ldr	r1, [pc, #116]	; (115f8 <bt_hci_host_num_completed_packets+0xc8>)
   11584:	4618      	mov	r0, r3
   11586:	e9cd 3300 	strd	r3, r3, [sp]
   1158a:	f013 fd67 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   1158e:	4620      	mov	r0, r4
}
   11590:	b005      	add	sp, #20
   11592:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   11596:	f001 bf3f 	b.w	13418 <bt_conn_unref>
	bt_conn_unref(conn);
   1159a:	f001 ff3d 	bl	13418 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   1159e:	2105      	movs	r1, #5
   115a0:	f640 4035 	movw	r0, #3125	; 0xc35
   115a4:	f7ff fc36 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   115a8:	4604      	mov	r4, r0
   115aa:	b948      	cbnz	r0, 115c0 <bt_hci_host_num_completed_packets+0x90>
		LOG_ERR("Unable to allocate new HCI command");
   115ac:	4b14      	ldr	r3, [pc, #80]	; (11600 <bt_hci_host_num_completed_packets+0xd0>)
   115ae:	2201      	movs	r2, #1
   115b0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   115b4:	4910      	ldr	r1, [pc, #64]	; (115f8 <bt_hci_host_num_completed_packets+0xc8>)
   115b6:	4603      	mov	r3, r0
   115b8:	9000      	str	r0, [sp, #0]
   115ba:	f013 fd4f 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		return;
   115be:	e7d6      	b.n	1156e <bt_hci_host_num_completed_packets+0x3e>
	return net_buf_simple_add(&buf->b, len);
   115c0:	f100 070c 	add.w	r7, r0, #12
   115c4:	2101      	movs	r1, #1
   115c6:	4638      	mov	r0, r7
   115c8:	f007 f962 	bl	18890 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   115cc:	2601      	movs	r6, #1
   115ce:	2104      	movs	r1, #4
   115d0:	7006      	strb	r6, [r0, #0]
   115d2:	4638      	mov	r0, r7
   115d4:	f007 f95c 	bl	18890 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   115d8:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   115da:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   115dc:	7086      	strb	r6, [r0, #2]
   115de:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   115e0:	4621      	mov	r1, r4
   115e2:	f640 4035 	movw	r0, #3125	; 0xc35
}
   115e6:	b005      	add	sp, #20
   115e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   115ec:	f7ff bf6e 	b.w	114cc <bt_hci_cmd_send>
   115f0:	20008000 	.word	0x20008000
   115f4:	0002c72f 	.word	0x0002c72f
   115f8:	000296c4 	.word	0x000296c4
   115fc:	0002c758 	.word	0x0002c758
   11600:	0002c784 	.word	0x0002c784

00011604 <le_ltk_request>:
{
   11604:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   11606:	68c6      	ldr	r6, [r0, #12]
{
   11608:	b089      	sub	sp, #36	; 0x24
	handle = sys_le16_to_cpu(evt->handle);
   1160a:	8837      	ldrh	r7, [r6, #0]
   1160c:	b2bd      	uxth	r5, r7
	conn = bt_conn_lookup_handle(handle);
   1160e:	4628      	mov	r0, r5
   11610:	f001 ff32 	bl	13478 <bt_conn_lookup_handle>
	if (!conn) {
   11614:	4604      	mov	r4, r0
   11616:	b958      	cbnz	r0, 11630 <le_ltk_request+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11618:	4b2a      	ldr	r3, [pc, #168]	; (116c4 <le_ltk_request+0xc0>)
   1161a:	2201      	movs	r2, #1
   1161c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   11620:	4929      	ldr	r1, [pc, #164]	; (116c8 <le_ltk_request+0xc4>)
   11622:	4603      	mov	r3, r0
   11624:	9503      	str	r5, [sp, #12]
   11626:	9000      	str	r0, [sp, #0]
   11628:	f013 fd18 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   1162c:	b009      	add	sp, #36	; 0x24
   1162e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   11630:	ad04      	add	r5, sp, #16
   11632:	f8d6 2002 	ldr.w	r2, [r6, #2]
   11636:	f8d6 3006 	ldr.w	r3, [r6, #6]
   1163a:	9501      	str	r5, [sp, #4]
   1163c:	8971      	ldrh	r1, [r6, #10]
   1163e:	9100      	str	r1, [sp, #0]
   11640:	f015 f9b1 	bl	269a6 <bt_smp_request_ltk>
   11644:	b360      	cbz	r0, 116a0 <le_ltk_request+0x9c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   11646:	2112      	movs	r1, #18
   11648:	f242 001a 	movw	r0, #8218	; 0x201a
   1164c:	f7ff fbe2 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   11650:	4606      	mov	r6, r0
   11652:	b968      	cbnz	r0, 11670 <le_ltk_request+0x6c>
		LOG_ERR("Out of command buffers");
   11654:	4b1d      	ldr	r3, [pc, #116]	; (116cc <le_ltk_request+0xc8>)
   11656:	2201      	movs	r2, #1
   11658:	9302      	str	r3, [sp, #8]
   1165a:	2300      	movs	r3, #0
   1165c:	491a      	ldr	r1, [pc, #104]	; (116c8 <le_ltk_request+0xc4>)
   1165e:	4618      	mov	r0, r3
   11660:	e9cd 3300 	strd	r3, r3, [sp]
   11664:	f013 fcfa 	bl	2505c <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   11668:	4620      	mov	r0, r4
   1166a:	f001 fed5 	bl	13418 <bt_conn_unref>
   1166e:	e7dd      	b.n	1162c <le_ltk_request+0x28>
   11670:	2112      	movs	r1, #18
   11672:	300c      	adds	r0, #12
   11674:	f007 f90c 	bl	18890 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   11678:	4602      	mov	r2, r0
   1167a:	462b      	mov	r3, r5
   1167c:	f822 7b02 	strh.w	r7, [r2], #2
   11680:	af08      	add	r7, sp, #32
   11682:	461d      	mov	r5, r3
   11684:	cd03      	ldmia	r5!, {r0, r1}
   11686:	42bd      	cmp	r5, r7
   11688:	6010      	str	r0, [r2, #0]
   1168a:	6051      	str	r1, [r2, #4]
   1168c:	462b      	mov	r3, r5
   1168e:	f102 0208 	add.w	r2, r2, #8
   11692:	d1f6      	bne.n	11682 <le_ltk_request+0x7e>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   11694:	4631      	mov	r1, r6
   11696:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1169a:	f7ff ff17 	bl	114cc <bt_hci_cmd_send>
   1169e:	e7e3      	b.n	11668 <le_ltk_request+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   116a0:	2102      	movs	r1, #2
   116a2:	f242 001b 	movw	r0, #8219	; 0x201b
   116a6:	f7ff fbb5 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   116aa:	4605      	mov	r5, r0
   116ac:	2800      	cmp	r0, #0
   116ae:	d0d1      	beq.n	11654 <le_ltk_request+0x50>
   116b0:	2102      	movs	r1, #2
   116b2:	300c      	adds	r0, #12
   116b4:	f007 f8ec 	bl	18890 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   116b8:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   116ba:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   116bc:	f242 001b 	movw	r0, #8219	; 0x201b
   116c0:	e7eb      	b.n	1169a <le_ltk_request+0x96>
   116c2:	bf00      	nop
   116c4:	0002c3e3 	.word	0x0002c3e3
   116c8:	000296c4 	.word	0x000296c4
   116cc:	0002c7a7 	.word	0x0002c7a7

000116d0 <le_conn_param_neg_reply>:
{
   116d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   116d2:	4606      	mov	r6, r0
   116d4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   116d6:	f242 0021 	movw	r0, #8225	; 0x2021
   116da:	2103      	movs	r1, #3
   116dc:	f7ff fb9a 	bl	10e14 <bt_hci_cmd_create>
   116e0:	4604      	mov	r4, r0
	if (!buf) {
   116e2:	b950      	cbnz	r0, 116fa <le_conn_param_neg_reply+0x2a>
		LOG_ERR("Unable to allocate buffer");
   116e4:	4b0c      	ldr	r3, [pc, #48]	; (11718 <le_conn_param_neg_reply+0x48>)
   116e6:	2201      	movs	r2, #1
   116e8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   116ec:	490b      	ldr	r1, [pc, #44]	; (1171c <le_conn_param_neg_reply+0x4c>)
   116ee:	4603      	mov	r3, r0
   116f0:	9000      	str	r0, [sp, #0]
   116f2:	f013 fcb3 	bl	2505c <z_log_msg_runtime_create.constprop.0>
}
   116f6:	b004      	add	sp, #16
   116f8:	bd70      	pop	{r4, r5, r6, pc}
   116fa:	2103      	movs	r1, #3
   116fc:	300c      	adds	r0, #12
   116fe:	f007 f8c7 	bl	18890 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   11702:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   11704:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   11706:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   11708:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1170c:	b004      	add	sp, #16
   1170e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   11712:	f7ff bedb 	b.w	114cc <bt_hci_cmd_send>
   11716:	bf00      	nop
   11718:	0002c7be 	.word	0x0002c7be
   1171c:	000296c4 	.word	0x000296c4

00011720 <le_conn_param_req>:
{
   11720:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   11722:	68c3      	ldr	r3, [r0, #12]
{
   11724:	b086      	sub	sp, #24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   11726:	78d9      	ldrb	r1, [r3, #3]
   11728:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1172a:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1172c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11730:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   11734:	7959      	ldrb	r1, [r3, #5]
   11736:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   11738:	b2b5      	uxth	r5, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1173a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1173e:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(evt->latency);
   11742:	799a      	ldrb	r2, [r3, #6]
   11744:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   11746:	4628      	mov	r0, r5
	param.latency = sys_le16_to_cpu(evt->latency);
   11748:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1174c:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   11750:	7a1a      	ldrb	r2, [r3, #8]
   11752:	7a5b      	ldrb	r3, [r3, #9]
   11754:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   11758:	f8ad 3016 	strh.w	r3, [sp, #22]
	conn = bt_conn_lookup_handle(handle);
   1175c:	f001 fe8c 	bl	13478 <bt_conn_lookup_handle>
	if (!conn) {
   11760:	4604      	mov	r4, r0
   11762:	b978      	cbnz	r0, 11784 <le_conn_param_req+0x64>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   11764:	4b1e      	ldr	r3, [pc, #120]	; (117e0 <le_conn_param_req+0xc0>)
   11766:	491f      	ldr	r1, [pc, #124]	; (117e4 <le_conn_param_req+0xc4>)
   11768:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1176c:	9000      	str	r0, [sp, #0]
   1176e:	4603      	mov	r3, r0
   11770:	2201      	movs	r2, #1
   11772:	9503      	str	r5, [sp, #12]
   11774:	f013 fc72 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   11778:	2102      	movs	r1, #2
   1177a:	4628      	mov	r0, r5
   1177c:	f7ff ffa8 	bl	116d0 <le_conn_param_neg_reply>
}
   11780:	b006      	add	sp, #24
   11782:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
   11784:	a904      	add	r1, sp, #16
   11786:	f002 f81f 	bl	137c8 <le_param_req>
   1178a:	b938      	cbnz	r0, 1179c <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1178c:	211e      	movs	r1, #30
   1178e:	4628      	mov	r0, r5
   11790:	f7ff ff9e 	bl	116d0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   11794:	4620      	mov	r0, r4
   11796:	f001 fe3f 	bl	13418 <bt_conn_unref>
   1179a:	e7f1      	b.n	11780 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1179c:	210e      	movs	r1, #14
   1179e:	f242 0020 	movw	r0, #8224	; 0x2020
   117a2:	f7ff fb37 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   117a6:	4605      	mov	r5, r0
   117a8:	2800      	cmp	r0, #0
   117aa:	d0f3      	beq.n	11794 <le_conn_param_req+0x74>
   117ac:	210e      	movs	r1, #14
   117ae:	300c      	adds	r0, #12
   117b0:	f007 f86e 	bl	18890 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   117b4:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   117b6:	8006      	strh	r6, [r0, #0]
   117b8:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   117bc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   117c0:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   117c2:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   117c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   117c8:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   117ca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   117ce:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   117d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   117d4:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   117d6:	f242 0020 	movw	r0, #8224	; 0x2020
   117da:	f7ff fe77 	bl	114cc <bt_hci_cmd_send>
   117de:	e7d9      	b.n	11794 <le_conn_param_req+0x74>
   117e0:	0002c3e3 	.word	0x0002c3e3
   117e4:	000296c4 	.word	0x000296c4

000117e8 <hci_tx_thread>:
{
   117e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   117ec:	f8df 8148 	ldr.w	r8, [pc, #328]	; 11938 <hci_tx_thread+0x150>
		BT_ASSERT(err == 0);
   117f0:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1193c <hci_tx_thread+0x154>
{
   117f4:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
   117f6:	f108 0b14 	add.w	fp, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   117fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   117fe:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
   11800:	f36f 3394 	bfc	r3, #14, #7
   11804:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   11808:	f001 fda6 	bl	13358 <bt_conn_prepare_events>
   1180c:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1180e:	f04f 32ff 	mov.w	r2, #4294967295
   11812:	f04f 33ff 	mov.w	r3, #4294967295
   11816:	4629      	mov	r1, r5
   11818:	4847      	ldr	r0, [pc, #284]	; (11938 <hci_tx_thread+0x150>)
   1181a:	f010 fb11 	bl	21e40 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1181e:	b160      	cbz	r0, 1183a <hci_tx_thread+0x52>
   11820:	f640 13e6 	movw	r3, #2534	; 0x9e6
   11824:	464a      	mov	r2, r9
   11826:	4946      	ldr	r1, [pc, #280]	; (11940 <hci_tx_thread+0x158>)
   11828:	4846      	ldr	r0, [pc, #280]	; (11944 <hci_tx_thread+0x15c>)
   1182a:	f012 fbfa 	bl	24022 <assert_print>
   1182e:	4040      	eors	r0, r0
   11830:	f380 8811 	msr	BASEPRI, r0
   11834:	f04f 0003 	mov.w	r0, #3
   11838:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1183a:	f04f 0a00 	mov.w	sl, #0
{
   1183e:	4e3e      	ldr	r6, [pc, #248]	; (11938 <hci_tx_thread+0x150>)
	for (; count; ev++, count--) {
   11840:	b915      	cbnz	r5, 11848 <hci_tx_thread+0x60>
	z_impl_k_yield();
   11842:	f00f fa45 	bl	20cd0 <z_impl_k_yield>
	while (1) {
   11846:	e7d8      	b.n	117fa <hci_tx_thread+0x12>
		switch (ev->state) {
   11848:	68f3      	ldr	r3, [r6, #12]
   1184a:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1184e:	2b01      	cmp	r3, #1
   11850:	d95a      	bls.n	11908 <hci_tx_thread+0x120>
   11852:	2b04      	cmp	r3, #4
   11854:	d162      	bne.n	1191c <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
   11856:	7b33      	ldrb	r3, [r6, #12]
   11858:	2b00      	cmp	r3, #0
   1185a:	d158      	bne.n	1190e <hci_tx_thread+0x126>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1185c:	2200      	movs	r2, #0
   1185e:	2300      	movs	r3, #0
   11860:	4839      	ldr	r0, [pc, #228]	; (11948 <hci_tx_thread+0x160>)
   11862:	f015 fa4e 	bl	26d02 <net_buf_get>
	BT_ASSERT(buf);
   11866:	4604      	mov	r4, r0
   11868:	b960      	cbnz	r0, 11884 <hci_tx_thread+0x9c>
   1186a:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1186e:	464a      	mov	r2, r9
   11870:	4936      	ldr	r1, [pc, #216]	; (1194c <hci_tx_thread+0x164>)
   11872:	4834      	ldr	r0, [pc, #208]	; (11944 <hci_tx_thread+0x15c>)
   11874:	f012 fbd5 	bl	24022 <assert_print>
   11878:	4040      	eors	r0, r0
   1187a:	f380 8811 	msr	BASEPRI, r0
   1187e:	f04f 0003 	mov.w	r0, #3
   11882:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   11884:	4f32      	ldr	r7, [pc, #200]	; (11950 <hci_tx_thread+0x168>)
	return z_impl_k_sem_take(sem, timeout);
   11886:	f04f 33ff 	mov.w	r3, #4294967295
   1188a:	f04f 32ff 	mov.w	r2, #4294967295
   1188e:	4831      	ldr	r0, [pc, #196]	; (11954 <hci_tx_thread+0x16c>)
   11890:	f00d fca8 	bl	1f1e4 <z_impl_k_sem_take>
   11894:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   11898:	b183      	cbz	r3, 118bc <hci_tx_thread+0xd4>
		LOG_ERR("Uncleared pending sent_cmd");
   1189a:	4b2f      	ldr	r3, [pc, #188]	; (11958 <hci_tx_thread+0x170>)
   1189c:	2201      	movs	r2, #1
   1189e:	9302      	str	r3, [sp, #8]
   118a0:	2300      	movs	r3, #0
   118a2:	492e      	ldr	r1, [pc, #184]	; (1195c <hci_tx_thread+0x174>)
   118a4:	4618      	mov	r0, r3
   118a6:	e9cd 3300 	strd	r3, r3, [sp]
   118aa:	f013 fbd7 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   118ae:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   118b2:	f006 fecb 	bl	1864c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   118b6:	2300      	movs	r3, #0
   118b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   118bc:	4620      	mov	r0, r4
   118be:	f006 ff09 	bl	186d4 <net_buf_ref>
   118c2:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   118c6:	4620      	mov	r0, r4
   118c8:	f7ff fdf8 	bl	114bc <bt_send>
	if (err) {
   118cc:	b1e0      	cbz	r0, 11908 <hci_tx_thread+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   118ce:	4b24      	ldr	r3, [pc, #144]	; (11960 <hci_tx_thread+0x178>)
   118d0:	9003      	str	r0, [sp, #12]
   118d2:	9302      	str	r3, [sp, #8]
   118d4:	2300      	movs	r3, #0
   118d6:	2201      	movs	r2, #1
   118d8:	4618      	mov	r0, r3
   118da:	e9cd 3300 	strd	r3, r3, [sp]
   118de:	491f      	ldr	r1, [pc, #124]	; (1195c <hci_tx_thread+0x174>)
   118e0:	f013 fbbc 	bl	2505c <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   118e4:	481b      	ldr	r0, [pc, #108]	; (11954 <hci_tx_thread+0x16c>)
   118e6:	f00d fc39 	bl	1f15c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   118ea:	4620      	mov	r0, r4
   118ec:	f006 fc7c 	bl	181e8 <net_buf_id>
   118f0:	220c      	movs	r2, #12
   118f2:	4b1c      	ldr	r3, [pc, #112]	; (11964 <hci_tx_thread+0x17c>)
   118f4:	211f      	movs	r1, #31
   118f6:	fb02 3000 	mla	r0, r2, r0, r3
   118fa:	4622      	mov	r2, r4
   118fc:	8840      	ldrh	r0, [r0, #2]
   118fe:	f7ff f8d3 	bl	10aa8 <hci_cmd_done>
		net_buf_unref(buf);
   11902:	4620      	mov	r0, r4
   11904:	f006 fea2 	bl	1864c <net_buf_unref>
	for (; count; ev++, count--) {
   11908:	3614      	adds	r6, #20
   1190a:	3d01      	subs	r5, #1
   1190c:	e798      	b.n	11840 <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1190e:	2b01      	cmp	r3, #1
   11910:	d1fa      	bne.n	11908 <hci_tx_thread+0x120>
					conn = CONTAINER_OF(ev->fifo,
   11912:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   11914:	3838      	subs	r0, #56	; 0x38
   11916:	f002 f9b7 	bl	13c88 <bt_conn_process_tx>
   1191a:	e7f5      	b.n	11908 <hci_tx_thread+0x120>
		switch (ev->state) {
   1191c:	9303      	str	r3, [sp, #12]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1191e:	4b12      	ldr	r3, [pc, #72]	; (11968 <hci_tx_thread+0x180>)
   11920:	2202      	movs	r2, #2
   11922:	e9cd a301 	strd	sl, r3, [sp, #4]
   11926:	2300      	movs	r3, #0
   11928:	490c      	ldr	r1, [pc, #48]	; (1195c <hci_tx_thread+0x174>)
   1192a:	4618      	mov	r0, r3
   1192c:	f8cd a000 	str.w	sl, [sp]
   11930:	f013 fb94 	bl	2505c <z_log_msg_runtime_create.constprop.0>
   11934:	e7e8      	b.n	11908 <hci_tx_thread+0x120>
   11936:	bf00      	nop
   11938:	20008470 	.word	0x20008470
   1193c:	0002c471 	.word	0x0002c471
   11940:	0002b4d1 	.word	0x0002b4d1
   11944:	0002a669 	.word	0x0002a669
   11948:	20008144 	.word	0x20008144
   1194c:	0002dfab 	.word	0x0002dfab
   11950:	20008000 	.word	0x20008000
   11954:	20008120 	.word	0x20008120
   11958:	0002c7d8 	.word	0x0002c7d8
   1195c:	000296c4 	.word	0x000296c4
   11960:	0002c70d 	.word	0x0002c70d
   11964:	20020ef8 	.word	0x20020ef8
   11968:	0002c7f3 	.word	0x0002c7f3

0001196c <hci_event_prio>:
{
   1196c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11970:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   11972:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   11976:	4630      	mov	r0, r6
   11978:	f015 f9d4 	bl	26d24 <net_buf_simple_headroom>
	state->len = buf->len;
   1197c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   11980:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11982:	f1b8 0f01 	cmp.w	r8, #1
   11986:	d80c      	bhi.n	119a2 <hci_event_prio+0x36>
   11988:	f640 537b 	movw	r3, #3451	; 0xd7b
   1198c:	4a1b      	ldr	r2, [pc, #108]	; (119fc <hci_event_prio+0x90>)
   1198e:	491c      	ldr	r1, [pc, #112]	; (11a00 <hci_event_prio+0x94>)
   11990:	481c      	ldr	r0, [pc, #112]	; (11a04 <hci_event_prio+0x98>)
   11992:	f012 fb46 	bl	24022 <assert_print>
   11996:	4040      	eors	r0, r0
   11998:	f380 8811 	msr	BASEPRI, r0
   1199c:	f04f 0003 	mov.w	r0, #3
   119a0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   119a2:	4630      	mov	r0, r6
   119a4:	2102      	movs	r1, #2
   119a6:	f006 ff55 	bl	18854 <net_buf_simple_pull_mem>
   119aa:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   119ac:	7800      	ldrb	r0, [r0, #0]
   119ae:	f013 fb13 	bl	24fd8 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   119b2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   119b4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   119b6:	d40c      	bmi.n	119d2 <hci_event_prio+0x66>
   119b8:	f640 537f 	movw	r3, #3455	; 0xd7f
   119bc:	4a0f      	ldr	r2, [pc, #60]	; (119fc <hci_event_prio+0x90>)
   119be:	4912      	ldr	r1, [pc, #72]	; (11a08 <hci_event_prio+0x9c>)
   119c0:	4810      	ldr	r0, [pc, #64]	; (11a04 <hci_event_prio+0x98>)
   119c2:	f012 fb2e 	bl	24022 <assert_print>
   119c6:	4040      	eors	r0, r0
   119c8:	f380 8811 	msr	BASEPRI, r0
   119cc:	f04f 0003 	mov.w	r0, #3
   119d0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   119d2:	2305      	movs	r3, #5
   119d4:	4621      	mov	r1, r4
   119d6:	4a0d      	ldr	r2, [pc, #52]	; (11a0c <hci_event_prio+0xa0>)
   119d8:	7838      	ldrb	r0, [r7, #0]
   119da:	f7fe ff23 	bl	10824 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   119de:	07b3      	lsls	r3, r6, #30
   119e0:	d507      	bpl.n	119f2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   119e2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   119e4:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   119e8:	fa13 f585 	uxtah	r5, r3, r5
   119ec:	60e5      	str	r5, [r4, #12]
}
   119ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   119f2:	4620      	mov	r0, r4
}
   119f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   119f8:	f006 be28 	b.w	1864c <net_buf_unref>
   119fc:	0002c471 	.word	0x0002c471
   11a00:	0002c4a5 	.word	0x0002c4a5
   11a04:	0002a669 	.word	0x0002a669
   11a08:	0002c814 	.word	0x0002c814
   11a0c:	00029f34 	.word	0x00029f34

00011a10 <bt_recv>:
{
   11a10:	b530      	push	{r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11a12:	7e03      	ldrb	r3, [r0, #24]
   11a14:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   11a16:	2b01      	cmp	r3, #1
{
   11a18:	b085      	sub	sp, #20
	switch (bt_buf_get_type(buf)) {
   11a1a:	d006      	beq.n	11a2a <bt_recv+0x1a>
   11a1c:	2b03      	cmp	r3, #3
   11a1e:	d112      	bne.n	11a46 <bt_recv+0x36>
			rx_queue_put(buf);
   11a20:	f7fe fe62 	bl	106e8 <rx_queue_put>
		return 0;
   11a24:	2000      	movs	r0, #0
}
   11a26:	b005      	add	sp, #20
   11a28:	bd30      	pop	{r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   11a2a:	68c3      	ldr	r3, [r0, #12]
   11a2c:	7818      	ldrb	r0, [r3, #0]
   11a2e:	f013 fad3 	bl	24fd8 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   11a32:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   11a34:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   11a36:	d502      	bpl.n	11a3e <bt_recv+0x2e>
			hci_event_prio(buf);
   11a38:	4620      	mov	r0, r4
   11a3a:	f7ff ff97 	bl	1196c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   11a3e:	07ab      	lsls	r3, r5, #30
   11a40:	d5f0      	bpl.n	11a24 <bt_recv+0x14>
			rx_queue_put(buf);
   11a42:	4620      	mov	r0, r4
   11a44:	e7ec      	b.n	11a20 <bt_recv+0x10>
	switch (bt_buf_get_type(buf)) {
   11a46:	9303      	str	r3, [sp, #12]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   11a48:	4b07      	ldr	r3, [pc, #28]	; (11a68 <bt_recv+0x58>)
   11a4a:	2201      	movs	r2, #1
   11a4c:	9302      	str	r3, [sp, #8]
   11a4e:	2300      	movs	r3, #0
   11a50:	4906      	ldr	r1, [pc, #24]	; (11a6c <bt_recv+0x5c>)
   11a52:	4618      	mov	r0, r3
   11a54:	e9cd 3300 	strd	r3, r3, [sp]
   11a58:	f013 fb00 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   11a5c:	4620      	mov	r0, r4
   11a5e:	f006 fdf5 	bl	1864c <net_buf_unref>
		return -EINVAL;
   11a62:	f06f 0015 	mvn.w	r0, #21
   11a66:	e7de      	b.n	11a26 <bt_recv+0x16>
   11a68:	0002c82d 	.word	0x0002c82d
   11a6c:	000296c4 	.word	0x000296c4

00011a70 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   11a70:	4a08      	ldr	r2, [pc, #32]	; (11a94 <bt_hci_driver_register+0x24>)
{
   11a72:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   11a74:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   11a78:	b930      	cbnz	r0, 11a88 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   11a7a:	68d9      	ldr	r1, [r3, #12]
   11a7c:	b139      	cbz	r1, 11a8e <bt_hci_driver_register+0x1e>
   11a7e:	6959      	ldr	r1, [r3, #20]
   11a80:	b129      	cbz	r1, 11a8e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   11a82:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   11a86:	4770      	bx	lr
		return -EALREADY;
   11a88:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11a8c:	4770      	bx	lr
		return -EINVAL;
   11a8e:	f06f 0015 	mvn.w	r0, #21
}
   11a92:	4770      	bx	lr
   11a94:	20008000 	.word	0x20008000

00011a98 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11a98:	2104      	movs	r1, #4
   11a9a:	4801      	ldr	r0, [pc, #4]	; (11aa0 <bt_finalize_init+0x8>)
   11a9c:	f013 bac7 	b.w	2502e <atomic_or>
   11aa0:	200080cc 	.word	0x200080cc

00011aa4 <init_work>:
{
   11aa4:	b510      	push	{r4, lr}
	err = bt_init();
   11aa6:	f7f7 fccb 	bl	9440 <bt_init>
	if (ready_cb) {
   11aaa:	4b03      	ldr	r3, [pc, #12]	; (11ab8 <init_work+0x14>)
   11aac:	681b      	ldr	r3, [r3, #0]
   11aae:	b113      	cbz	r3, 11ab6 <init_work+0x12>
}
   11ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   11ab4:	4718      	bx	r3
}
   11ab6:	bd10      	pop	{r4, pc}
   11ab8:	20020f70 	.word	0x20020f70

00011abc <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   11abc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   11abe:	4e38      	ldr	r6, [pc, #224]	; (11ba0 <bt_enable+0xe4>)
{
   11ac0:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
   11ac2:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
{
   11ac6:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   11ac8:	b96b      	cbnz	r3, 11ae6 <bt_enable+0x2a>
		LOG_ERR("No HCI driver registered");
   11aca:	4a36      	ldr	r2, [pc, #216]	; (11ba4 <bt_enable+0xe8>)
   11acc:	4618      	mov	r0, r3
   11ace:	e9cd 3201 	strd	r3, r2, [sp, #4]
   11ad2:	4935      	ldr	r1, [pc, #212]	; (11ba8 <bt_enable+0xec>)
   11ad4:	2201      	movs	r2, #1
   11ad6:	9300      	str	r3, [sp, #0]
   11ad8:	f013 fac0 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   11adc:	f06f 0512 	mvn.w	r5, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   11ae0:	4628      	mov	r0, r5
   11ae2:	b009      	add	sp, #36	; 0x24
   11ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11ae6:	f06f 0102 	mvn.w	r1, #2
   11aea:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   11aee:	f013 fac4 	bl	2507a <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   11af2:	2101      	movs	r1, #1
   11af4:	f013 fa9b 	bl	2502e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11af8:	ea10 0401 	ands.w	r4, r0, r1
   11afc:	d14d      	bne.n	11b9a <bt_enable+0xde>
	ready_cb = cb;
   11afe:	4b2b      	ldr	r3, [pc, #172]	; (11bac <bt_enable+0xf0>)
   11b00:	601f      	str	r7, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   11b02:	460a      	mov	r2, r1
   11b04:	f506 7090 	add.w	r0, r6, #288	; 0x120
   11b08:	f016 fca7 	bl	2845a <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   11b0c:	f506 70a2 	add.w	r0, r6, #324	; 0x144
   11b10:	f016 fc81 	bl	28416 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11b14:	2200      	movs	r2, #0
   11b16:	2300      	movs	r3, #0
   11b18:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11b1c:	f06f 0308 	mvn.w	r3, #8
   11b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11b24:	e9cd 4302 	strd	r4, r3, [sp, #8]
   11b28:	e9cd 4400 	strd	r4, r4, [sp]
   11b2c:	4b20      	ldr	r3, [pc, #128]	; (11bb0 <bt_enable+0xf4>)
   11b2e:	4921      	ldr	r1, [pc, #132]	; (11bb4 <bt_enable+0xf8>)
   11b30:	9404      	str	r4, [sp, #16]
   11b32:	4821      	ldr	r0, [pc, #132]	; (11bb8 <bt_enable+0xfc>)
   11b34:	f00c ff90 	bl	1ea58 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11b38:	4920      	ldr	r1, [pc, #128]	; (11bbc <bt_enable+0x100>)
   11b3a:	481f      	ldr	r0, [pc, #124]	; (11bb8 <bt_enable+0xfc>)
   11b3c:	f016 fc42 	bl	283c4 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   11b40:	481f      	ldr	r0, [pc, #124]	; (11bc0 <bt_enable+0x104>)
   11b42:	f00d fe7f 	bl	1f844 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   11b46:	f06f 0307 	mvn.w	r3, #7
   11b4a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   11b4e:	491d      	ldr	r1, [pc, #116]	; (11bc4 <bt_enable+0x108>)
   11b50:	481b      	ldr	r0, [pc, #108]	; (11bc0 <bt_enable+0x104>)
   11b52:	9400      	str	r4, [sp, #0]
   11b54:	f00d fe90 	bl	1f878 <k_work_queue_start>
   11b58:	491b      	ldr	r1, [pc, #108]	; (11bc8 <bt_enable+0x10c>)
   11b5a:	4819      	ldr	r0, [pc, #100]	; (11bc0 <bt_enable+0x104>)
   11b5c:	f016 fc32 	bl	283c4 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   11b60:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   11b64:	68db      	ldr	r3, [r3, #12]
   11b66:	4798      	blx	r3
	if (err) {
   11b68:	4605      	mov	r5, r0
   11b6a:	b158      	cbz	r0, 11b84 <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   11b6c:	4b17      	ldr	r3, [pc, #92]	; (11bcc <bt_enable+0x110>)
   11b6e:	9003      	str	r0, [sp, #12]
   11b70:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11b74:	2201      	movs	r2, #1
   11b76:	4623      	mov	r3, r4
   11b78:	4620      	mov	r0, r4
   11b7a:	490b      	ldr	r1, [pc, #44]	; (11ba8 <bt_enable+0xec>)
   11b7c:	9400      	str	r4, [sp, #0]
   11b7e:	f013 fa6d 	bl	2505c <z_log_msg_runtime_create.constprop.0>
		return err;
   11b82:	e7ad      	b.n	11ae0 <bt_enable+0x24>
	if (!cb) {
   11b84:	b927      	cbnz	r7, 11b90 <bt_enable+0xd4>
}
   11b86:	b009      	add	sp, #36	; 0x24
   11b88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
   11b8c:	f7f7 bc58 	b.w	9440 <bt_init>
	k_work_submit(&bt_dev.init);
   11b90:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   11b94:	f00d fe50 	bl	1f838 <k_work_submit>
	return 0;
   11b98:	e7a2      	b.n	11ae0 <bt_enable+0x24>
		return -EALREADY;
   11b9a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   11b9e:	e79f      	b.n	11ae0 <bt_enable+0x24>
   11ba0:	20008000 	.word	0x20008000
   11ba4:	0002c92c 	.word	0x0002c92c
   11ba8:	000296c4 	.word	0x000296c4
   11bac:	20020f70 	.word	0x20020f70
   11bb0:	000117e9 	.word	0x000117e9
   11bb4:	20031930 	.word	0x20031930
   11bb8:	20009590 	.word	0x20009590
   11bbc:	0002c945 	.word	0x0002c945
   11bc0:	20009618 	.word	0x20009618
   11bc4:	20031d30 	.word	0x20031d30
   11bc8:	0002c94b 	.word	0x0002c94b
   11bcc:	0002c951 	.word	0x0002c951

00011bd0 <bt_is_ready>:
   11bd0:	4b02      	ldr	r3, [pc, #8]	; (11bdc <bt_is_ready+0xc>)
   11bd2:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   11bd6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   11bda:	4770      	bx	lr
   11bdc:	200080cc 	.word	0x200080cc

00011be0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   11be0:	4800      	ldr	r0, [pc, #0]	; (11be4 <bt_get_name+0x4>)
   11be2:	4770      	bx	lr
   11be4:	0002ae5b 	.word	0x0002ae5b

00011be8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   11be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11bea:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   11bec:	2500      	movs	r5, #0
   11bee:	4f09      	ldr	r7, [pc, #36]	; (11c14 <id_find+0x2c>)
   11bf0:	79fb      	ldrb	r3, [r7, #7]
   11bf2:	b2ec      	uxtb	r4, r5
   11bf4:	42a3      	cmp	r3, r4
   11bf6:	d802      	bhi.n	11bfe <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   11bf8:	f06f 0001 	mvn.w	r0, #1
   11bfc:	e009      	b.n	11c12 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   11bfe:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   11c02:	4630      	mov	r0, r6
   11c04:	4439      	add	r1, r7
   11c06:	f013 fae1 	bl	251cc <bt_addr_le_eq>
   11c0a:	3501      	adds	r5, #1
   11c0c:	2800      	cmp	r0, #0
   11c0e:	d0ef      	beq.n	11bf0 <id_find+0x8>
   11c10:	4620      	mov	r0, r4
}
   11c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c14:	20008000 	.word	0x20008000

00011c18 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   11c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11c1a:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   11c1c:	460d      	mov	r5, r1
   11c1e:	b171      	cbz	r1, 11c3e <id_create.constprop.0+0x26>
   11c20:	4628      	mov	r0, r5
   11c22:	4912      	ldr	r1, [pc, #72]	; (11c6c <id_create.constprop.0+0x54>)
   11c24:	f013 fad2 	bl	251cc <bt_addr_le_eq>
   11c28:	b948      	cbnz	r0, 11c3e <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   11c2a:	4629      	mov	r1, r5
   11c2c:	4810      	ldr	r0, [pc, #64]	; (11c70 <id_create.constprop.0+0x58>)
   11c2e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   11c32:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   11c34:	f013 fad7 	bl	251e6 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   11c38:	2000      	movs	r0, #0
}
   11c3a:	b003      	add	sp, #12
   11c3c:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   11c3e:	4668      	mov	r0, sp
   11c40:	f013 f9bc 	bl	24fbc <bt_addr_le_create_static>
			if (err) {
   11c44:	2800      	cmp	r0, #0
   11c46:	d1f8      	bne.n	11c3a <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   11c48:	4668      	mov	r0, sp
   11c4a:	f7ff ffcd 	bl	11be8 <id_find>
   11c4e:	2800      	cmp	r0, #0
   11c50:	daf5      	bge.n	11c3e <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   11c52:	4b07      	ldr	r3, [pc, #28]	; (11c70 <id_create.constprop.0+0x58>)
   11c54:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   11c58:	4669      	mov	r1, sp
   11c5a:	4418      	add	r0, r3
   11c5c:	f013 fac3 	bl	251e6 <bt_addr_le_copy>
		if (addr) {
   11c60:	2d00      	cmp	r5, #0
   11c62:	d0e9      	beq.n	11c38 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   11c64:	4601      	mov	r1, r0
   11c66:	4628      	mov	r0, r5
   11c68:	e7e4      	b.n	11c34 <id_create.constprop.0+0x1c>
   11c6a:	bf00      	nop
   11c6c:	0002c2a3 	.word	0x0002c2a3
   11c70:	20008000 	.word	0x20008000

00011c74 <set_random_address>:
{
   11c74:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   11c76:	2206      	movs	r2, #6
   11c78:	4911      	ldr	r1, [pc, #68]	; (11cc0 <set_random_address+0x4c>)
   11c7a:	4605      	mov	r5, r0
   11c7c:	f016 fd91 	bl	287a2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   11c80:	b1c8      	cbz	r0, 11cb6 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   11c82:	2106      	movs	r1, #6
   11c84:	f242 0005 	movw	r0, #8197	; 0x2005
   11c88:	f7ff f8c4 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   11c8c:	4604      	mov	r4, r0
   11c8e:	b1a0      	cbz	r0, 11cba <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11c90:	2206      	movs	r2, #6
   11c92:	4629      	mov	r1, r5
   11c94:	300c      	adds	r0, #12
   11c96:	f015 f851 	bl	26d3c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   11c9a:	2200      	movs	r2, #0
   11c9c:	4621      	mov	r1, r4
   11c9e:	f242 0005 	movw	r0, #8197	; 0x2005
   11ca2:	f7ff f905 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
   11ca6:	b938      	cbnz	r0, 11cb8 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   11ca8:	4805      	ldr	r0, [pc, #20]	; (11cc0 <set_random_address+0x4c>)
   11caa:	4629      	mov	r1, r5
   11cac:	f013 fa96 	bl	251dc <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   11cb0:	2301      	movs	r3, #1
   11cb2:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   11cb6:	2000      	movs	r0, #0
}
   11cb8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   11cba:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11cbe:	e7fb      	b.n	11cb8 <set_random_address+0x44>
   11cc0:	20008061 	.word	0x20008061

00011cc4 <find_rl_conflict>:
{
   11cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cc8:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   11cca:	460c      	mov	r4, r1
{
   11ccc:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   11cce:	b959      	cbnz	r1, 11ce8 <find_rl_conflict+0x24>
   11cd0:	492b      	ldr	r1, [pc, #172]	; (11d80 <find_rl_conflict+0xbc>)
   11cd2:	f44f 7357 	mov.w	r3, #860	; 0x35c
   11cd6:	4a2b      	ldr	r2, [pc, #172]	; (11d84 <find_rl_conflict+0xc0>)
   11cd8:	482b      	ldr	r0, [pc, #172]	; (11d88 <find_rl_conflict+0xc4>)
   11cda:	f012 f9a2 	bl	24022 <assert_print>
   11cde:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   11ce2:	4828      	ldr	r0, [pc, #160]	; (11d84 <find_rl_conflict+0xc0>)
   11ce4:	f012 f996 	bl	24014 <assert_post_action>
   11ce8:	6808      	ldr	r0, [r1, #0]
   11cea:	b948      	cbnz	r0, 11d00 <find_rl_conflict+0x3c>
   11cec:	4927      	ldr	r1, [pc, #156]	; (11d8c <find_rl_conflict+0xc8>)
   11cee:	f240 335d 	movw	r3, #861	; 0x35d
   11cf2:	4a24      	ldr	r2, [pc, #144]	; (11d84 <find_rl_conflict+0xc0>)
   11cf4:	4824      	ldr	r0, [pc, #144]	; (11d88 <find_rl_conflict+0xc4>)
   11cf6:	f012 f994 	bl	24022 <assert_print>
   11cfa:	f240 315d 	movw	r1, #861	; 0x35d
   11cfe:	e7f0      	b.n	11ce2 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   11d00:	b94d      	cbnz	r5, 11d16 <find_rl_conflict+0x52>
   11d02:	4923      	ldr	r1, [pc, #140]	; (11d90 <find_rl_conflict+0xcc>)
   11d04:	f240 335e 	movw	r3, #862	; 0x35e
   11d08:	4a1e      	ldr	r2, [pc, #120]	; (11d84 <find_rl_conflict+0xc0>)
   11d0a:	481f      	ldr	r0, [pc, #124]	; (11d88 <find_rl_conflict+0xc4>)
   11d0c:	f012 f989 	bl	24022 <assert_print>
   11d10:	f240 315e 	movw	r1, #862	; 0x35e
   11d14:	e7e5      	b.n	11ce2 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   11d16:	7a03      	ldrb	r3, [r0, #8]
   11d18:	075a      	lsls	r2, r3, #29
   11d1a:	d509      	bpl.n	11d30 <find_rl_conflict+0x6c>
   11d1c:	491d      	ldr	r1, [pc, #116]	; (11d94 <find_rl_conflict+0xd0>)
   11d1e:	f44f 7358 	mov.w	r3, #864	; 0x360
   11d22:	4a18      	ldr	r2, [pc, #96]	; (11d84 <find_rl_conflict+0xc0>)
   11d24:	4818      	ldr	r0, [pc, #96]	; (11d88 <find_rl_conflict+0xc4>)
   11d26:	f012 f97c 	bl	24022 <assert_print>
   11d2a:	f44f 7158 	mov.w	r1, #864	; 0x360
   11d2e:	e7d8      	b.n	11ce2 <find_rl_conflict+0x1e>
	if (conflict->found) {
   11d30:	684f      	ldr	r7, [r1, #4]
   11d32:	b9f7      	cbnz	r7, 11d72 <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   11d34:	7a2b      	ldrb	r3, [r5, #8]
   11d36:	075b      	lsls	r3, r3, #29
   11d38:	d51b      	bpl.n	11d72 <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   11d3a:	1c69      	adds	r1, r5, #1
   11d3c:	3001      	adds	r0, #1
   11d3e:	f013 fa45 	bl	251cc <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   11d42:	f8d4 8000 	ldr.w	r8, [r4]
   11d46:	2216      	movs	r2, #22
   11d48:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   11d4a:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   11d4c:	4668      	mov	r0, sp
   11d4e:	f016 fd5f 	bl	28810 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   11d52:	2210      	movs	r2, #16
   11d54:	4669      	mov	r1, sp
   11d56:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   11d5a:	f016 fd22 	bl	287a2 <memcmp>
   11d5e:	b158      	cbz	r0, 11d78 <find_rl_conflict+0xb4>
   11d60:	6820      	ldr	r0, [r4, #0]
   11d62:	2210      	movs	r2, #16
   11d64:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   11d68:	302a      	adds	r0, #42	; 0x2a
   11d6a:	f016 fd1a 	bl	287a2 <memcmp>
   11d6e:	b918      	cbnz	r0, 11d78 <find_rl_conflict+0xb4>
		conflict->found = resident;
   11d70:	6065      	str	r5, [r4, #4]
}
   11d72:	b006      	add	sp, #24
   11d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   11d78:	2e00      	cmp	r6, #0
   11d7a:	d1f9      	bne.n	11d70 <find_rl_conflict+0xac>
   11d7c:	e7f9      	b.n	11d72 <find_rl_conflict+0xae>
   11d7e:	bf00      	nop
   11d80:	0002c9d1 	.word	0x0002c9d1
   11d84:	0002c9a3 	.word	0x0002c9a3
   11d88:	0002a669 	.word	0x0002a669
   11d8c:	0002c9e9 	.word	0x0002c9e9
   11d90:	0002ca0c 	.word	0x0002ca0c
   11d94:	0002ca24 	.word	0x0002ca24

00011d98 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11d98:	4b08      	ldr	r3, [pc, #32]	; (11dbc <bt_id_pending_keys_update+0x24>)
   11d9a:	e8d3 2fef 	ldaex	r2, [r3]
   11d9e:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   11da2:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11da6:	2800      	cmp	r0, #0
   11da8:	d1f7      	bne.n	11d9a <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   11daa:	0413      	lsls	r3, r2, #16
   11dac:	d504      	bpl.n	11db8 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   11dae:	2200      	movs	r2, #0
   11db0:	2002      	movs	r0, #2
   11db2:	4903      	ldr	r1, [pc, #12]	; (11dc0 <bt_id_pending_keys_update+0x28>)
   11db4:	f006 b818 	b.w	17de8 <bt_keys_foreach_type>
}
   11db8:	4770      	bx	lr
   11dba:	bf00      	nop
   11dbc:	200080cc 	.word	0x200080cc
   11dc0:	00025363 	.word	0x00025363

00011dc4 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   11dc4:	2300      	movs	r3, #0
{
   11dc6:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   11dc8:	4905      	ldr	r1, [pc, #20]	; (11de0 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   11dca:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   11dce:	466a      	mov	r2, sp
   11dd0:	2002      	movs	r0, #2
   11dd2:	f006 f809 	bl	17de8 <bt_keys_foreach_type>
}
   11dd6:	9801      	ldr	r0, [sp, #4]
   11dd8:	b003      	add	sp, #12
   11dda:	f85d fb04 	ldr.w	pc, [sp], #4
   11dde:	bf00      	nop
   11de0:	00011cc5 	.word	0x00011cc5

00011de4 <bt_id_add>:
{
   11de4:	b5f0      	push	{r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   11de6:	4605      	mov	r5, r0
{
   11de8:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   11dea:	b170      	cbz	r0, 11e0a <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   11dec:	4c59      	ldr	r4, [pc, #356]	; (11f54 <bt_id_add+0x170>)
   11dee:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   11df2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   11df6:	b10a      	cbz	r2, 11dfc <bt_id_add+0x18>
   11df8:	429a      	cmp	r2, r3
   11dfa:	d208      	bcs.n	11e0e <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   11dfc:	3301      	adds	r3, #1
   11dfe:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   11e02:	7a2b      	ldrb	r3, [r5, #8]
   11e04:	f043 0304 	orr.w	r3, r3, #4
   11e08:	722b      	strb	r3, [r5, #8]
}
   11e0a:	b007      	add	sp, #28
   11e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   11e0e:	2100      	movs	r1, #0
   11e10:	2206      	movs	r2, #6
   11e12:	4608      	mov	r0, r1
   11e14:	f001 fe0c 	bl	13a30 <bt_conn_lookup_state_le>
	if (conn) {
   11e18:	4606      	mov	r6, r0
   11e1a:	b188      	cbz	r0, 11e40 <bt_id_add+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11e1c:	34cc      	adds	r4, #204	; 0xcc
   11e1e:	e8d4 3fef 	ldaex	r3, [r4]
   11e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   11e26:	e8c4 3fe2 	stlex	r2, r3, [r4]
   11e2a:	2a00      	cmp	r2, #0
   11e2c:	d1f7      	bne.n	11e1e <bt_id_add+0x3a>
	keys->state |= flag;
   11e2e:	7a2b      	ldrb	r3, [r5, #8]
   11e30:	f043 0301 	orr.w	r3, r3, #1
   11e34:	722b      	strb	r3, [r5, #8]
}
   11e36:	b007      	add	sp, #28
   11e38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   11e3c:	f001 baec 	b.w	13418 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   11e40:	4601      	mov	r1, r0
   11e42:	4845      	ldr	r0, [pc, #276]	; (11f58 <bt_id_add+0x174>)
   11e44:	f000 fbee 	bl	12624 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   11e48:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   11e4c:	b163      	cbz	r3, 11e68 <bt_id_add+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   11e4e:	4630      	mov	r0, r6
   11e50:	f013 fa1b 	bl	2528a <addr_res_enable>
		if (err) {
   11e54:	b140      	cbz	r0, 11e68 <bt_id_add+0x84>
			LOG_WRN("Failed to disable address resolution");
   11e56:	4b41      	ldr	r3, [pc, #260]	; (11f5c <bt_id_add+0x178>)
   11e58:	2202      	movs	r2, #2
   11e5a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   11e5e:	4633      	mov	r3, r6
   11e60:	9600      	str	r6, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   11e62:	4618      	mov	r0, r3
   11e64:	493e      	ldr	r1, [pc, #248]	; (11f60 <bt_id_add+0x17c>)
   11e66:	e054      	b.n	11f12 <bt_id_add+0x12e>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   11e68:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   11e6c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   11e70:	429a      	cmp	r2, r3
   11e72:	d12b      	bne.n	11ecc <bt_id_add+0xe8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   11e74:	2600      	movs	r6, #0
   11e76:	4b3b      	ldr	r3, [pc, #236]	; (11f64 <bt_id_add+0x180>)
   11e78:	2202      	movs	r2, #2
   11e7a:	4630      	mov	r0, r6
   11e7c:	4938      	ldr	r1, [pc, #224]	; (11f60 <bt_id_add+0x17c>)
   11e7e:	9302      	str	r3, [sp, #8]
   11e80:	e9cd 6600 	strd	r6, r6, [sp]
   11e84:	4633      	mov	r3, r6
   11e86:	f013 f9f1 	bl	2526c <z_log_msg_runtime_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   11e8a:	4632      	mov	r2, r6
   11e8c:	4631      	mov	r1, r6
   11e8e:	f242 0029 	movw	r0, #8233	; 0x2029
   11e92:	f7ff f80d 	bl	10eb0 <bt_hci_cmd_send_sync>
		if (err) {
   11e96:	b130      	cbz	r0, 11ea6 <bt_id_add+0xc2>
			LOG_ERR("Failed to clear resolution list");
   11e98:	4b33      	ldr	r3, [pc, #204]	; (11f68 <bt_id_add+0x184>)
   11e9a:	9600      	str	r6, [sp, #0]
   11e9c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   11ea0:	4633      	mov	r3, r6
		LOG_ERR("Failed to set privacy mode");
   11ea2:	2201      	movs	r2, #1
   11ea4:	e7dd      	b.n	11e62 <bt_id_add+0x7e>
		bt_dev.le.rl_entries++;
   11ea6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   11eaa:	3301      	adds	r3, #1
   11eac:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   11eb0:	7a2b      	ldrb	r3, [r5, #8]
   11eb2:	f043 0304 	orr.w	r3, r3, #4
   11eb6:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   11eb8:	2001      	movs	r0, #1
   11eba:	f013 f9e6 	bl	2528a <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   11ebe:	2100      	movs	r1, #0
   11ec0:	482a      	ldr	r0, [pc, #168]	; (11f6c <bt_id_add+0x188>)
}
   11ec2:	b007      	add	sp, #28
   11ec4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   11ec8:	f000 bbac 	b.w	12624 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   11ecc:	462a      	mov	r2, r5
   11ece:	1c6f      	adds	r7, r5, #1
   11ed0:	4639      	mov	r1, r7
   11ed2:	f812 0b2a 	ldrb.w	r0, [r2], #42
   11ed6:	f013 f98d 	bl	251f4 <hci_id_add>
	if (err) {
   11eda:	4606      	mov	r6, r0
   11edc:	b128      	cbz	r0, 11eea <bt_id_add+0x106>
		LOG_ERR("Failed to add IRK to controller");
   11ede:	4b24      	ldr	r3, [pc, #144]	; (11f70 <bt_id_add+0x18c>)
		LOG_ERR("Failed to set privacy mode");
   11ee0:	9302      	str	r3, [sp, #8]
   11ee2:	2300      	movs	r3, #0
   11ee4:	e9cd 3300 	strd	r3, r3, [sp]
   11ee8:	e7db      	b.n	11ea2 <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   11eea:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   11eee:	3301      	adds	r3, #1
   11ef0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   11ef4:	7a2b      	ldrb	r3, [r5, #8]
   11ef6:	f043 0304 	orr.w	r3, r3, #4
   11efa:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   11efc:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   11f00:	f013 0304 	ands.w	r3, r3, #4
   11f04:	d108      	bne.n	11f18 <bt_id_add+0x134>
		LOG_WRN("Set privacy mode command is not supported");
   11f06:	4a1b      	ldr	r2, [pc, #108]	; (11f74 <bt_id_add+0x190>)
   11f08:	4915      	ldr	r1, [pc, #84]	; (11f60 <bt_id_add+0x17c>)
   11f0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   11f0e:	2202      	movs	r2, #2
   11f10:	9300      	str	r3, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   11f12:	f013 f9ab 	bl	2526c <z_log_msg_runtime_create.constprop.0>
		goto done;
   11f16:	e7cf      	b.n	11eb8 <bt_id_add+0xd4>
	bt_addr_le_copy(&cp.id_addr, addr);
   11f18:	4639      	mov	r1, r7
   11f1a:	a804      	add	r0, sp, #16
   11f1c:	f013 f963 	bl	251e6 <bt_addr_le_copy>
	cp.mode = mode;
   11f20:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   11f22:	2108      	movs	r1, #8
   11f24:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   11f28:	f88d 3017 	strb.w	r3, [sp, #23]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   11f2c:	f7fe ff72 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   11f30:	4604      	mov	r4, r0
   11f32:	b160      	cbz	r0, 11f4e <bt_id_add+0x16a>
   11f34:	2208      	movs	r2, #8
   11f36:	a904      	add	r1, sp, #16
   11f38:	300c      	adds	r0, #12
   11f3a:	f014 feff 	bl	26d3c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   11f3e:	4632      	mov	r2, r6
   11f40:	4621      	mov	r1, r4
   11f42:	f242 004e 	movw	r0, #8270	; 0x204e
   11f46:	f7fe ffb3 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
   11f4a:	2800      	cmp	r0, #0
   11f4c:	d0b4      	beq.n	11eb8 <bt_id_add+0xd4>
		LOG_ERR("Failed to set privacy mode");
   11f4e:	4b0a      	ldr	r3, [pc, #40]	; (11f78 <bt_id_add+0x194>)
   11f50:	e7c6      	b.n	11ee0 <bt_id_add+0xfc>
   11f52:	bf00      	nop
   11f54:	20008000 	.word	0x20008000
   11f58:	000252e1 	.word	0x000252e1
   11f5c:	0002ca59 	.word	0x0002ca59
   11f60:	000296dc 	.word	0x000296dc
   11f64:	0002ca7e 	.word	0x0002ca7e
   11f68:	0002caaf 	.word	0x0002caaf
   11f6c:	000252bb 	.word	0x000252bb
   11f70:	0002cacf 	.word	0x0002cacf
   11f74:	0002caef 	.word	0x0002caef
   11f78:	0002cb19 	.word	0x0002cb19

00011f7c <bt_id_del>:
{
   11f7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   11f80:	4605      	mov	r5, r0
   11f82:	b3a8      	cbz	r0, 11ff0 <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   11f84:	4c4c      	ldr	r4, [pc, #304]	; (120b8 <bt_id_del+0x13c>)
   11f86:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   11f8a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   11f8e:	b1da      	cbz	r2, 11fc8 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   11f90:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   11f92:	4293      	cmp	r3, r2
   11f94:	dc25      	bgt.n	11fe2 <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   11f96:	2100      	movs	r1, #0
   11f98:	2206      	movs	r2, #6
   11f9a:	4608      	mov	r0, r1
   11f9c:	f001 fd48 	bl	13a30 <bt_conn_lookup_state_le>
	if (conn) {
   11fa0:	4606      	mov	r6, r0
   11fa2:	b340      	cbz	r0, 11ff6 <bt_id_del+0x7a>
   11fa4:	34cc      	adds	r4, #204	; 0xcc
   11fa6:	e8d4 3fef 	ldaex	r3, [r4]
   11faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   11fae:	e8c4 3fe2 	stlex	r2, r3, [r4]
   11fb2:	2a00      	cmp	r2, #0
   11fb4:	d1f7      	bne.n	11fa6 <bt_id_del+0x2a>
	keys->state |= flag;
   11fb6:	7a2b      	ldrb	r3, [r5, #8]
   11fb8:	f043 0302 	orr.w	r3, r3, #2
   11fbc:	722b      	strb	r3, [r5, #8]
}
   11fbe:	b004      	add	sp, #16
   11fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   11fc4:	f001 ba28 	b.w	13418 <bt_conn_unref>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   11fc8:	b95b      	cbnz	r3, 11fe2 <bt_id_del+0x66>
   11fca:	493c      	ldr	r1, [pc, #240]	; (120bc <bt_id_del+0x140>)
   11fcc:	483c      	ldr	r0, [pc, #240]	; (120c0 <bt_id_del+0x144>)
   11fce:	f240 4323 	movw	r3, #1059	; 0x423
   11fd2:	4a3c      	ldr	r2, [pc, #240]	; (120c4 <bt_id_del+0x148>)
   11fd4:	f012 f825 	bl	24022 <assert_print>
   11fd8:	f240 4123 	movw	r1, #1059	; 0x423
   11fdc:	4839      	ldr	r0, [pc, #228]	; (120c4 <bt_id_del+0x148>)
   11fde:	f012 f819 	bl	24014 <assert_post_action>
			bt_dev.le.rl_entries--;
   11fe2:	3b01      	subs	r3, #1
   11fe4:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   11fe8:	7a2b      	ldrb	r3, [r5, #8]
   11fea:	f023 0304 	bic.w	r3, r3, #4
   11fee:	722b      	strb	r3, [r5, #8]
}
   11ff0:	b004      	add	sp, #16
   11ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   11ff6:	4601      	mov	r1, r0
   11ff8:	4833      	ldr	r0, [pc, #204]	; (120c8 <bt_id_del+0x14c>)
   11ffa:	f000 fb13 	bl	12624 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   11ffe:	4630      	mov	r0, r6
   12000:	f013 f943 	bl	2528a <addr_res_enable>
	if (err) {
   12004:	4607      	mov	r7, r0
   12006:	b1b8      	cbz	r0, 12038 <bt_id_del+0xbc>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   12008:	4b30      	ldr	r3, [pc, #192]	; (120cc <bt_id_del+0x150>)
   1200a:	9003      	str	r0, [sp, #12]
   1200c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   12010:	2201      	movs	r2, #1
   12012:	4633      	mov	r3, r6
   12014:	4630      	mov	r0, r6
   12016:	492e      	ldr	r1, [pc, #184]	; (120d0 <bt_id_del+0x154>)
   12018:	9600      	str	r6, [sp, #0]
   1201a:	f013 f927 	bl	2526c <z_log_msg_runtime_create.constprop.0>
	if (bt_dev.le.rl_entries) {
   1201e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   12022:	b113      	cbz	r3, 1202a <bt_id_del+0xae>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   12024:	2001      	movs	r0, #1
   12026:	f013 f930 	bl	2528a <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1202a:	2100      	movs	r1, #0
   1202c:	4829      	ldr	r0, [pc, #164]	; (120d4 <bt_id_del+0x158>)
}
   1202e:	b004      	add	sp, #16
   12030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   12034:	f000 baf6 	b.w	12624 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   12038:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1203c:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   12040:	429a      	cmp	r2, r3
   12042:	d20c      	bcs.n	1205e <bt_id_del+0xe2>
		bt_dev.le.rl_entries--;
   12044:	3b01      	subs	r3, #1
   12046:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1204a:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1204c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   1204e:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12052:	2002      	movs	r0, #2
   12054:	4920      	ldr	r1, [pc, #128]	; (120d8 <bt_id_del+0x15c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   12056:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   12058:	f005 fec6 	bl	17de8 <bt_keys_foreach_type>
		goto done;
   1205c:	e7df      	b.n	1201e <bt_id_del+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   1205e:	2107      	movs	r1, #7
   12060:	f242 0028 	movw	r0, #8232	; 0x2028
   12064:	f7fe fed6 	bl	10e14 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   12068:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   1206c:	4606      	mov	r6, r0
   1206e:	b950      	cbnz	r0, 12086 <bt_id_del+0x10a>
		LOG_ERR("Failed to remove IRK from controller");
   12070:	4b1a      	ldr	r3, [pc, #104]	; (120dc <bt_id_del+0x160>)
   12072:	2201      	movs	r2, #1
   12074:	9302      	str	r3, [sp, #8]
   12076:	2300      	movs	r3, #0
   12078:	4915      	ldr	r1, [pc, #84]	; (120d0 <bt_id_del+0x154>)
   1207a:	4618      	mov	r0, r3
   1207c:	e9cd 3300 	strd	r3, r3, [sp]
   12080:	f013 f8f4 	bl	2526c <z_log_msg_runtime_create.constprop.0>
		goto done;
   12084:	e7cb      	b.n	1201e <bt_id_del+0xa2>
	return net_buf_simple_add(&buf->b, len);
   12086:	2107      	movs	r1, #7
   12088:	300c      	adds	r0, #12
   1208a:	f006 fc01 	bl	18890 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1208e:	4641      	mov	r1, r8
   12090:	f013 f8a9 	bl	251e6 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   12094:	463a      	mov	r2, r7
   12096:	4631      	mov	r1, r6
   12098:	f242 0028 	movw	r0, #8232	; 0x2028
   1209c:	f7fe ff08 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
   120a0:	2800      	cmp	r0, #0
   120a2:	d1e5      	bne.n	12070 <bt_id_del+0xf4>
	bt_dev.le.rl_entries--;
   120a4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   120a8:	3b01      	subs	r3, #1
   120aa:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   120ae:	7a2b      	ldrb	r3, [r5, #8]
   120b0:	f023 0304 	bic.w	r3, r3, #4
   120b4:	722b      	strb	r3, [r5, #8]
   120b6:	e7b2      	b.n	1201e <bt_id_del+0xa2>
   120b8:	20008000 	.word	0x20008000
   120bc:	0002cb34 	.word	0x0002cb34
   120c0:	0002a669 	.word	0x0002a669
   120c4:	0002c9a3 	.word	0x0002c9a3
   120c8:	000252e1 	.word	0x000252e1
   120cc:	0002cb4d 	.word	0x0002cb4d
   120d0:	000296dc 	.word	0x000296dc
   120d4:	000252bb 	.word	0x000252bb
   120d8:	00025257 	.word	0x00025257
   120dc:	0002cb7a 	.word	0x0002cb7a

000120e0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   120e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   120e2:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   120e4:	4604      	mov	r4, r0
   120e6:	b920      	cbnz	r0, 120f2 <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   120e8:	b31d      	cbz	r5, 12132 <bt_id_create+0x52>
			return -EINVAL;
   120ea:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   120ee:	b004      	add	sp, #16
   120f0:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   120f2:	4921      	ldr	r1, [pc, #132]	; (12178 <bt_id_create+0x98>)
   120f4:	f013 f86a 	bl	251cc <bt_addr_le_eq>
   120f8:	2800      	cmp	r0, #0
   120fa:	d1f5      	bne.n	120e8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   120fc:	7823      	ldrb	r3, [r4, #0]
   120fe:	2b01      	cmp	r3, #1
   12100:	d104      	bne.n	1210c <bt_id_create+0x2c>
   12102:	79a3      	ldrb	r3, [r4, #6]
   12104:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12108:	2bc0      	cmp	r3, #192	; 0xc0
   1210a:	d00a      	beq.n	12122 <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   1210c:	4b1b      	ldr	r3, [pc, #108]	; (1217c <bt_id_create+0x9c>)
   1210e:	2201      	movs	r2, #1
   12110:	9302      	str	r3, [sp, #8]
   12112:	2300      	movs	r3, #0
   12114:	491a      	ldr	r1, [pc, #104]	; (12180 <bt_id_create+0xa0>)
   12116:	4618      	mov	r0, r3
   12118:	e9cd 3300 	strd	r3, r3, [sp]
   1211c:	f013 f8a6 	bl	2526c <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   12120:	e7e3      	b.n	120ea <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   12122:	4620      	mov	r0, r4
   12124:	f7ff fd60 	bl	11be8 <id_find>
   12128:	2800      	cmp	r0, #0
   1212a:	dbdd      	blt.n	120e8 <bt_id_create+0x8>
			return -EALREADY;
   1212c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12130:	e7dd      	b.n	120ee <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   12132:	4d14      	ldr	r5, [pc, #80]	; (12184 <bt_id_create+0xa4>)
   12134:	79eb      	ldrb	r3, [r5, #7]
   12136:	2b01      	cmp	r3, #1
   12138:	d01a      	beq.n	12170 <bt_id_create+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1213a:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   1213e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12142:	07db      	lsls	r3, r3, #31
   12144:	d50b      	bpl.n	1215e <bt_id_create+0x7e>
	new_id = bt_dev.id_count;
   12146:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   12148:	4621      	mov	r1, r4
   1214a:	4630      	mov	r0, r6
   1214c:	f7ff fd64 	bl	11c18 <id_create.constprop.0>
	if (err) {
   12150:	2800      	cmp	r0, #0
   12152:	d1cc      	bne.n	120ee <bt_id_create+0xe>
		bt_dev.id_count++;
   12154:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   12156:	4630      	mov	r0, r6
		bt_dev.id_count++;
   12158:	3301      	adds	r3, #1
   1215a:	71eb      	strb	r3, [r5, #7]
	return new_id;
   1215c:	e7c7      	b.n	120ee <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1215e:	2c00      	cmp	r4, #0
   12160:	d0c3      	beq.n	120ea <bt_id_create+0xa>
   12162:	4620      	mov	r0, r4
   12164:	4904      	ldr	r1, [pc, #16]	; (12178 <bt_id_create+0x98>)
   12166:	f013 f831 	bl	251cc <bt_addr_le_eq>
   1216a:	2800      	cmp	r0, #0
   1216c:	d0eb      	beq.n	12146 <bt_id_create+0x66>
   1216e:	e7bc      	b.n	120ea <bt_id_create+0xa>
		return -ENOMEM;
   12170:	f06f 000b 	mvn.w	r0, #11
   12174:	e7bb      	b.n	120ee <bt_id_create+0xe>
   12176:	bf00      	nop
   12178:	0002c2a3 	.word	0x0002c2a3
   1217c:	0002cb9f 	.word	0x0002cb9f
   12180:	000296dc 	.word	0x000296dc
   12184:	20008000 	.word	0x20008000

00012188 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   12188:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1218a:	4604      	mov	r4, r0
{
   1218c:	b086      	sub	sp, #24
	CHECKIF(addr == NULL) {
   1218e:	b958      	cbnz	r0, 121a8 <bt_id_read_public_addr+0x20>
		LOG_WRN("Invalid input parameters");
   12190:	4b1d      	ldr	r3, [pc, #116]	; (12208 <bt_id_read_public_addr+0x80>)
   12192:	2202      	movs	r2, #2
   12194:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12198:	4603      	mov	r3, r0
   1219a:	491c      	ldr	r1, [pc, #112]	; (1220c <bt_id_read_public_addr+0x84>)
   1219c:	9000      	str	r0, [sp, #0]
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   1219e:	f013 f865 	bl	2526c <z_log_msg_runtime_create.constprop.0>
		return 0U;
   121a2:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   121a4:	b006      	add	sp, #24
   121a6:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   121a8:	2100      	movs	r1, #0
   121aa:	f241 0009 	movw	r0, #4105	; 0x1009
   121ae:	aa05      	add	r2, sp, #20
   121b0:	f7fe fe7e 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
   121b4:	4606      	mov	r6, r0
   121b6:	b140      	cbz	r0, 121ca <bt_id_read_public_addr+0x42>
		LOG_WRN("Failed to read public address");
   121b8:	4b15      	ldr	r3, [pc, #84]	; (12210 <bt_id_read_public_addr+0x88>)
   121ba:	2202      	movs	r2, #2
   121bc:	9302      	str	r3, [sp, #8]
   121be:	2300      	movs	r3, #0
   121c0:	4912      	ldr	r1, [pc, #72]	; (1220c <bt_id_read_public_addr+0x84>)
   121c2:	4618      	mov	r0, r3
   121c4:	e9cd 3300 	strd	r3, r3, [sp]
   121c8:	e7e9      	b.n	1219e <bt_id_read_public_addr+0x16>
	rp = (void *)rsp->data;
   121ca:	9b05      	ldr	r3, [sp, #20]
   121cc:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   121ce:	68dd      	ldr	r5, [r3, #12]
   121d0:	4910      	ldr	r1, [pc, #64]	; (12214 <bt_id_read_public_addr+0x8c>)
   121d2:	3501      	adds	r5, #1
   121d4:	4628      	mov	r0, r5
   121d6:	f016 fae4 	bl	287a2 <memcmp>
   121da:	b918      	cbnz	r0, 121e4 <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   121dc:	9805      	ldr	r0, [sp, #20]
   121de:	f006 fa35 	bl	1864c <net_buf_unref>
		return 0U;
   121e2:	e7de      	b.n	121a2 <bt_id_read_public_addr+0x1a>
   121e4:	2206      	movs	r2, #6
   121e6:	4628      	mov	r0, r5
   121e8:	490b      	ldr	r1, [pc, #44]	; (12218 <bt_id_read_public_addr+0x90>)
   121ea:	f016 fada 	bl	287a2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   121ee:	2800      	cmp	r0, #0
   121f0:	d0f4      	beq.n	121dc <bt_id_read_public_addr+0x54>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   121f2:	4629      	mov	r1, r5
   121f4:	1c60      	adds	r0, r4, #1
   121f6:	f012 fff1 	bl	251dc <bt_addr_copy>
	net_buf_unref(rsp);
   121fa:	9805      	ldr	r0, [sp, #20]
	addr->type = BT_ADDR_LE_PUBLIC;
   121fc:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   121fe:	f006 fa25 	bl	1864c <net_buf_unref>
	return 1U;
   12202:	2001      	movs	r0, #1
   12204:	e7ce      	b.n	121a4 <bt_id_read_public_addr+0x1c>
   12206:	bf00      	nop
   12208:	0002cbcd 	.word	0x0002cbcd
   1220c:	000296dc 	.word	0x000296dc
   12210:	0002cbe6 	.word	0x0002cbe6
   12214:	0002c2b0 	.word	0x0002c2b0
   12218:	0002c2aa 	.word	0x0002c2aa

0001221c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1221c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1221e:	4668      	mov	r0, sp
   12220:	f7ff ffb2 	bl	12188 <bt_id_read_public_addr>
   12224:	4b04      	ldr	r3, [pc, #16]	; (12238 <bt_setup_public_id_addr+0x1c>)
   12226:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   12228:	b118      	cbz	r0, 12232 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1222a:	4669      	mov	r1, sp
   1222c:	2000      	movs	r0, #0
   1222e:	f7ff fcf3 	bl	11c18 <id_create.constprop.0>
}
   12232:	b003      	add	sp, #12
   12234:	f85d fb04 	ldr.w	pc, [sp], #4
   12238:	20008000 	.word	0x20008000

0001223c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1223c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1223e:	4b25      	ldr	r3, [pc, #148]	; (122d4 <bt_read_static_addr+0x98>)
{
   12240:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12242:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   12246:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12248:	f013 0301 	ands.w	r3, r3, #1
{
   1224c:	b087      	sub	sp, #28
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1224e:	d10c      	bne.n	1226a <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   12250:	4a21      	ldr	r2, [pc, #132]	; (122d8 <bt_read_static_addr+0x9c>)
   12252:	9202      	str	r2, [sp, #8]
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   12254:	2202      	movs	r2, #2
   12256:	4618      	mov	r0, r3
   12258:	e9cd 3300 	strd	r3, r3, [sp]
   1225c:	491f      	ldr	r1, [pc, #124]	; (122dc <bt_read_static_addr+0xa0>)
   1225e:	f013 f805 	bl	2526c <z_log_msg_runtime_create.constprop.0>
		return 0;
   12262:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   12264:	4620      	mov	r0, r4
   12266:	b007      	add	sp, #28
   12268:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1226a:	2100      	movs	r1, #0
   1226c:	f64f 4009 	movw	r0, #64521	; 0xfc09
   12270:	aa05      	add	r2, sp, #20
   12272:	f7fe fe1d 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
   12276:	4603      	mov	r3, r0
   12278:	b118      	cbz	r0, 12282 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   1227a:	4b19      	ldr	r3, [pc, #100]	; (122e0 <bt_read_static_addr+0xa4>)
   1227c:	9302      	str	r3, [sp, #8]
   1227e:	2300      	movs	r3, #0
   12280:	e7e8      	b.n	12254 <bt_read_static_addr+0x18>
	rp = (void *)rsp->data;
   12282:	9805      	ldr	r0, [sp, #20]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   12284:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   12286:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   12288:	7854      	ldrb	r4, [r2, #1]
   1228a:	3202      	adds	r2, #2
   1228c:	42b4      	cmp	r4, r6
   1228e:	bf28      	it	cs
   12290:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   12292:	429c      	cmp	r4, r3
   12294:	dc0e      	bgt.n	122b4 <bt_read_static_addr+0x78>
	net_buf_unref(rsp);
   12296:	f006 f9d9 	bl	1864c <net_buf_unref>
	if (!cnt) {
   1229a:	2c00      	cmp	r4, #0
   1229c:	d1e2      	bne.n	12264 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   1229e:	4b11      	ldr	r3, [pc, #68]	; (122e4 <bt_read_static_addr+0xa8>)
   122a0:	2202      	movs	r2, #2
   122a2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   122a6:	4620      	mov	r0, r4
   122a8:	4623      	mov	r3, r4
   122aa:	490c      	ldr	r1, [pc, #48]	; (122dc <bt_read_static_addr+0xa0>)
   122ac:	9400      	str	r4, [sp, #0]
   122ae:	f012 ffdd 	bl	2526c <z_log_msg_runtime_create.constprop.0>
   122b2:	e7d7      	b.n	12264 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   122b4:	4611      	mov	r1, r2
   122b6:	fb07 5603 	mla	r6, r7, r3, r5
   122ba:	f102 0c14 	add.w	ip, r2, #20
   122be:	f851 eb04 	ldr.w	lr, [r1], #4
   122c2:	4561      	cmp	r1, ip
   122c4:	f846 eb04 	str.w	lr, [r6], #4
   122c8:	d1f9      	bne.n	122be <bt_read_static_addr+0x82>
   122ca:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   122cc:	3301      	adds	r3, #1
   122ce:	8031      	strh	r1, [r6, #0]
   122d0:	3216      	adds	r2, #22
   122d2:	e7de      	b.n	12292 <bt_read_static_addr+0x56>
   122d4:	20008000 	.word	0x20008000
   122d8:	0002cc04 	.word	0x0002cc04
   122dc:	000296dc 	.word	0x000296dc
   122e0:	0002cc30 	.word	0x0002cc30
   122e4:	0002cc50 	.word	0x0002cc50

000122e8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   122e8:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   122ea:	4d15      	ldr	r5, [pc, #84]	; (12340 <bt_setup_random_id_addr+0x58>)
{
   122ec:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   122ee:	79ec      	ldrb	r4, [r5, #7]
   122f0:	b92c      	cbnz	r4, 122fe <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   122f2:	2101      	movs	r1, #1
   122f4:	a802      	add	r0, sp, #8
   122f6:	f7ff ffa1 	bl	1223c <bt_read_static_addr>
   122fa:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   122fc:	b9c0      	cbnz	r0, 12330 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   122fe:	2100      	movs	r1, #0
   12300:	4608      	mov	r0, r1
}
   12302:	b008      	add	sp, #32
   12304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   12308:	f7ff beea 	b.w	120e0 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1230c:	ab02      	add	r3, sp, #8
   1230e:	fb06 3102 	mla	r1, r6, r2, r3
   12312:	f10d 0001 	add.w	r0, sp, #1
   12316:	f012 ff61 	bl	251dc <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   1231a:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1231c:	4669      	mov	r1, sp
   1231e:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   12320:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   12324:	f7ff fc78 	bl	11c18 <id_create.constprop.0>
				if (err) {
   12328:	3401      	adds	r4, #1
   1232a:	b110      	cbz	r0, 12332 <bt_setup_random_id_addr+0x4a>
}
   1232c:	b008      	add	sp, #32
   1232e:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   12330:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   12332:	79eb      	ldrb	r3, [r5, #7]
   12334:	b2e2      	uxtb	r2, r4
   12336:	4293      	cmp	r3, r2
   12338:	d8e8      	bhi.n	1230c <bt_setup_random_id_addr+0x24>
			return 0;
   1233a:	2000      	movs	r0, #0
   1233c:	e7f6      	b.n	1232c <bt_setup_random_id_addr+0x44>
   1233e:	bf00      	nop
   12340:	20008000 	.word	0x20008000

00012344 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   12344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12348:	4690      	mov	r8, r2
   1234a:	460e      	mov	r6, r1
   1234c:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1234e:	4602      	mov	r2, r0
   12350:	2800      	cmp	r0, #0
   12352:	d04b      	beq.n	123ec <bt_id_set_adv_own_addr+0xa8>
   12354:	2b00      	cmp	r3, #0
   12356:	d049      	beq.n	123ec <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   12358:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   1235a:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1235c:	d531      	bpl.n	123c2 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1235e:	4f25      	ldr	r7, [pc, #148]	; (123f4 <bt_id_set_adv_own_addr+0xb0>)
   12360:	f1b8 0f00 	cmp.w	r8, #0
   12364:	d013      	beq.n	1238e <bt_id_set_adv_own_addr+0x4a>
   12366:	0688      	lsls	r0, r1, #26
   12368:	d40a      	bmi.n	12380 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1236a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1236e:	5cfb      	ldrb	r3, [r7, r3]
   12370:	2b01      	cmp	r3, #1
   12372:	d015      	beq.n	123a0 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   12374:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   12376:	06b2      	lsls	r2, r6, #26
   12378:	d50f      	bpl.n	1239a <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1237a:	f043 0302 	orr.w	r3, r3, #2
   1237e:	e00b      	b.n	12398 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   12380:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   12384:	0659      	lsls	r1, r3, #25
   12386:	d4f0      	bmi.n	1236a <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   12388:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1238c:	e006      	b.n	1239c <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1238e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   12392:	5cfb      	ldrb	r3, [r7, r3]
   12394:	2b01      	cmp	r3, #1
   12396:	d003      	beq.n	123a0 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   12398:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1239a:	2000      	movs	r0, #0
}
   1239c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   123a0:	2107      	movs	r1, #7
   123a2:	fb01 7104 	mla	r1, r1, r4, r7
   123a6:	4610      	mov	r0, r2
   123a8:	3101      	adds	r1, #1
   123aa:	f012 ffb7 	bl	2531c <bt_id_set_adv_random_addr>
				if (err) {
   123ae:	2800      	cmp	r0, #0
   123b0:	d1f4      	bne.n	1239c <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   123b2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   123b6:	5d3b      	ldrb	r3, [r7, r4]
   123b8:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   123ba:	f1b8 0f00 	cmp.w	r8, #0
   123be:	d0ec      	beq.n	1239a <bt_id_set_adv_own_addr+0x56>
   123c0:	e7d9      	b.n	12376 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   123c2:	074b      	lsls	r3, r1, #29
   123c4:	d50e      	bpl.n	123e4 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   123c6:	4e0b      	ldr	r6, [pc, #44]	; (123f4 <bt_id_set_adv_own_addr+0xb0>)
   123c8:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   123cc:	5df3      	ldrb	r3, [r6, r7]
   123ce:	2b01      	cmp	r3, #1
   123d0:	d1e2      	bne.n	12398 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   123d2:	2107      	movs	r1, #7
   123d4:	fb11 3104 	smlabb	r1, r1, r4, r3
   123d8:	4431      	add	r1, r6
   123da:	f012 ff9f 	bl	2531c <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   123de:	5df3      	ldrb	r3, [r6, r7]
   123e0:	702b      	strb	r3, [r5, #0]
		if (err) {
   123e2:	e7db      	b.n	1239c <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   123e4:	f012 ffa2 	bl	2532c <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   123e8:	2301      	movs	r3, #1
   123ea:	e7f9      	b.n	123e0 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   123ec:	f06f 0015 	mvn.w	r0, #21
   123f0:	e7d4      	b.n	1239c <bt_id_set_adv_own_addr+0x58>
   123f2:	bf00      	nop
   123f4:	20008000 	.word	0x20008000

000123f8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   123f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   123fa:	4e13      	ldr	r6, [pc, #76]	; (12448 <bt_id_init+0x50>)
   123fc:	79f5      	ldrb	r5, [r6, #7]
   123fe:	b11d      	cbz	r5, 12408 <bt_id_init+0x10>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   12400:	2400      	movs	r4, #0
}
   12402:	4620      	mov	r0, r4
   12404:	b004      	add	sp, #16
   12406:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_setup_public_id_addr();
   12408:	f7ff ff08 	bl	1221c <bt_setup_public_id_addr>
		if (err) {
   1240c:	4604      	mov	r4, r0
   1240e:	b150      	cbz	r0, 12426 <bt_id_init+0x2e>
			LOG_ERR("Unable to set identity address");
   12410:	4b0e      	ldr	r3, [pc, #56]	; (1244c <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   12412:	e9cd 5301 	strd	r5, r3, [sp, #4]
   12416:	2201      	movs	r2, #1
   12418:	462b      	mov	r3, r5
   1241a:	4628      	mov	r0, r5
   1241c:	490c      	ldr	r1, [pc, #48]	; (12450 <bt_id_init+0x58>)
   1241e:	9500      	str	r5, [sp, #0]
   12420:	f012 ff24 	bl	2526c <z_log_msg_runtime_create.constprop.0>
			return err;
   12424:	e7ed      	b.n	12402 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   12426:	79f5      	ldrb	r5, [r6, #7]
   12428:	2d00      	cmp	r5, #0
   1242a:	d1e9      	bne.n	12400 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1242c:	f7ff ff5c 	bl	122e8 <bt_setup_random_id_addr>
		if (err) {
   12430:	4604      	mov	r4, r0
   12432:	2800      	cmp	r0, #0
   12434:	d1ec      	bne.n	12410 <bt_id_init+0x18>
		err = set_random_address(&bt_dev.id_addr[0].a);
   12436:	1c70      	adds	r0, r6, #1
   12438:	f7ff fc1c 	bl	11c74 <set_random_address>
		if (err) {
   1243c:	4604      	mov	r4, r0
   1243e:	2800      	cmp	r0, #0
   12440:	d0de      	beq.n	12400 <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   12442:	4b04      	ldr	r3, [pc, #16]	; (12454 <bt_id_init+0x5c>)
   12444:	e7e5      	b.n	12412 <bt_id_init+0x1a>
   12446:	bf00      	nop
   12448:	20008000 	.word	0x20008000
   1244c:	0002cc79 	.word	0x0002cc79
   12450:	000296dc 	.word	0x000296dc
   12454:	0002cc98 	.word	0x0002cc98

00012458 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   12458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1245c:	460c      	mov	r4, r1
   1245e:	b087      	sub	sp, #28
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   12460:	2120      	movs	r1, #32
{
   12462:	4692      	mov	sl, r2
   12464:	9004      	str	r0, [sp, #16]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   12466:	f7fe fcd5 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   1246a:	4605      	mov	r5, r0
   1246c:	2800      	cmp	r0, #0
   1246e:	d05a      	beq.n	12526 <hci_set_ad+0xce>
   12470:	2120      	movs	r1, #32
   12472:	300c      	adds	r0, #12
   12474:	f006 fa0c 	bl	18890 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   12478:	2220      	movs	r2, #32
   1247a:	4681      	mov	r9, r0
   1247c:	2100      	movs	r1, #0
   1247e:	f016 f9c7 	bl	28810 <memset>
	uint8_t set_data_len = 0;
   12482:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   12484:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   12488:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   1248c:	2300      	movs	r3, #0
   1248e:	f8d4 8000 	ldr.w	r8, [r4]
   12492:	6862      	ldr	r2, [r4, #4]
   12494:	4293      	cmp	r3, r2
   12496:	d30c      	bcc.n	124b2 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   12498:	3408      	adds	r4, #8
   1249a:	45a2      	cmp	sl, r4
   1249c:	d1f6      	bne.n	1248c <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1249e:	2200      	movs	r2, #0
   124a0:	4629      	mov	r1, r5
   124a2:	9804      	ldr	r0, [sp, #16]
	*data_len = set_data_len;
   124a4:	f889 6000 	strb.w	r6, [r9]
}
   124a8:	b007      	add	sp, #28
   124aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   124ae:	f7fe bcff 	b.w	10eb0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   124b2:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   124b6:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   124b8:	1811      	adds	r1, r2, r0
   124ba:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   124bc:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   124c0:	d91a      	bls.n	124f8 <hci_set_ad+0xa0>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   124c2:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   124c6:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   124ca:	d101      	bne.n	124d0 <hci_set_ad+0x78>
   124cc:	2a00      	cmp	r2, #0
   124ce:	dc11      	bgt.n	124f4 <hci_set_ad+0x9c>
					LOG_ERR("Too big advertising data");
   124d0:	4b16      	ldr	r3, [pc, #88]	; (1252c <hci_set_ad+0xd4>)
   124d2:	2201      	movs	r2, #1
   124d4:	9302      	str	r3, [sp, #8]
   124d6:	2300      	movs	r3, #0
   124d8:	4915      	ldr	r1, [pc, #84]	; (12530 <hci_set_ad+0xd8>)
   124da:	4618      	mov	r0, r3
   124dc:	e9cd 3300 	strd	r3, r3, [sp]
   124e0:	f012 ff73 	bl	253ca <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   124e4:	4628      	mov	r0, r5
   124e6:	f006 f8b1 	bl	1864c <net_buf_unref>
					return -EINVAL;
   124ea:	f06f 0015 	mvn.w	r0, #21
}
   124ee:	b007      	add	sp, #28
   124f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   124f4:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   124f8:	b2d7      	uxtb	r7, r2
   124fa:	1c79      	adds	r1, r7, #1
   124fc:	f80b 1006 	strb.w	r1, [fp, r6]
   12500:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   12502:	b2c9      	uxtb	r1, r1
   12504:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12508:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1250c:	fa5b f080 	uxtab	r0, fp, r0
   12510:	9305      	str	r3, [sp, #20]
			set_data_len += len;
   12512:	3702      	adds	r7, #2
   12514:	f016 f955 	bl	287c2 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   12518:	9b05      	ldr	r3, [sp, #20]
			set_data_len += len;
   1251a:	4437      	add	r7, r6
   1251c:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   1251e:	3301      	adds	r3, #1
   12520:	f108 0808 	add.w	r8, r8, #8
   12524:	e7b5      	b.n	12492 <hci_set_ad+0x3a>
		return -ENOBUFS;
   12526:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1252a:	e7e0      	b.n	124ee <hci_set_ad+0x96>
   1252c:	0002ccbb 	.word	0x0002ccbb
   12530:	00029694 	.word	0x00029694

00012534 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   12534:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   12536:	4605      	mov	r5, r0
   12538:	4b16      	ldr	r3, [pc, #88]	; (12594 <le_adv_start_add_conn+0x60>)
   1253a:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   1253e:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   12540:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   12544:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   12546:	2207      	movs	r2, #7
   12548:	4628      	mov	r0, r5
   1254a:	4913      	ldr	r1, [pc, #76]	; (12598 <le_adv_start_add_conn+0x64>)
   1254c:	f016 f929 	bl	287a2 <memcmp>
   12550:	4603      	mov	r3, r0
   12552:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   12554:	b96b      	cbnz	r3, 12572 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   12556:	4911      	ldr	r1, [pc, #68]	; (1259c <le_adv_start_add_conn+0x68>)
   12558:	f001 fa0c 	bl	13974 <bt_conn_add_le>
		if (!conn) {
   1255c:	4604      	mov	r4, r0
   1255e:	b910      	cbnz	r0, 12566 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   12560:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   12564:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   12566:	2104      	movs	r1, #4
   12568:	f000 ff8e 	bl	13488 <bt_conn_set_state>
		return 0;
   1256c:	2000      	movs	r0, #0
		*out_conn = conn;
   1256e:	6034      	str	r4, [r6, #0]
   12570:	e7f8      	b.n	12564 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   12572:	4629      	mov	r1, r5
   12574:	f001 fa36 	bl	139e4 <bt_conn_exists_le>
   12578:	b940      	cbnz	r0, 1258c <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1257a:	7820      	ldrb	r0, [r4, #0]
   1257c:	4629      	mov	r1, r5
   1257e:	f001 f9f9 	bl	13974 <bt_conn_add_le>
	if (!conn) {
   12582:	4604      	mov	r4, r0
   12584:	2800      	cmp	r0, #0
   12586:	d0eb      	beq.n	12560 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   12588:	2105      	movs	r1, #5
   1258a:	e7ed      	b.n	12568 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   1258c:	f06f 0015 	mvn.w	r0, #21
   12590:	e7e8      	b.n	12564 <le_adv_start_add_conn+0x30>
   12592:	bf00      	nop
   12594:	20008000 	.word	0x20008000
   12598:	0002c2a3 	.word	0x0002c2a3
   1259c:	0002c29c 	.word	0x0002c29c

000125a0 <valid_adv_param>:
{
   125a0:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   125a2:	6843      	ldr	r3, [r0, #4]
{
   125a4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   125a6:	0558      	lsls	r0, r3, #21
   125a8:	d501      	bpl.n	125ae <valid_adv_param+0xe>
		return false;
   125aa:	2000      	movs	r0, #0
}
   125ac:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   125ae:	6922      	ldr	r2, [r4, #16]
   125b0:	b10a      	cbz	r2, 125b6 <valid_adv_param+0x16>
   125b2:	07d9      	lsls	r1, r3, #31
   125b4:	d5f9      	bpl.n	125aa <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   125b6:	4d19      	ldr	r5, [pc, #100]	; (1261c <valid_adv_param+0x7c>)
   125b8:	7820      	ldrb	r0, [r4, #0]
   125ba:	79eb      	ldrb	r3, [r5, #7]
   125bc:	4283      	cmp	r3, r0
   125be:	d9f4      	bls.n	125aa <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   125c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   125c4:	2207      	movs	r2, #7
   125c6:	4916      	ldr	r1, [pc, #88]	; (12620 <valid_adv_param+0x80>)
   125c8:	4428      	add	r0, r5
   125ca:	f016 f8ea 	bl	287a2 <memcmp>
	if (param->id >= bt_dev.id_count ||
   125ce:	2800      	cmp	r0, #0
   125d0:	d0eb      	beq.n	125aa <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   125d2:	6860      	ldr	r0, [r4, #4]
   125d4:	07c2      	lsls	r2, r0, #31
   125d6:	d406      	bmi.n	125e6 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   125d8:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   125dc:	2b08      	cmp	r3, #8
   125de:	d802      	bhi.n	125e6 <valid_adv_param+0x46>
   125e0:	68a3      	ldr	r3, [r4, #8]
   125e2:	2b9f      	cmp	r3, #159	; 0x9f
   125e4:	d9e1      	bls.n	125aa <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   125e6:	f010 0f30 	tst.w	r0, #48	; 0x30
   125ea:	d002      	beq.n	125f2 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   125ec:	6923      	ldr	r3, [r4, #16]
   125ee:	2b00      	cmp	r3, #0
   125f0:	d0db      	beq.n	125aa <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   125f2:	06c3      	lsls	r3, r0, #27
   125f4:	d401      	bmi.n	125fa <valid_adv_param+0x5a>
   125f6:	6923      	ldr	r3, [r4, #16]
   125f8:	b943      	cbnz	r3, 1260c <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   125fa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   125fe:	429a      	cmp	r2, r3
   12600:	d8d3      	bhi.n	125aa <valid_adv_param+0xa>
   12602:	2a1f      	cmp	r2, #31
   12604:	d9d1      	bls.n	125aa <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   12606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1260a:	d8ce      	bhi.n	125aa <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1260c:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   12610:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   12614:	bf18      	it	ne
   12616:	2001      	movne	r0, #1
   12618:	e7c8      	b.n	125ac <valid_adv_param+0xc>
   1261a:	bf00      	nop
   1261c:	20008000 	.word	0x20008000
   12620:	0002c2a3 	.word	0x0002c2a3

00012624 <bt_le_ext_adv_foreach>:
{
   12624:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   12626:	4801      	ldr	r0, [pc, #4]	; (1262c <bt_le_ext_adv_foreach+0x8>)
   12628:	4718      	bx	r3
   1262a:	bf00      	nop
   1262c:	20008018 	.word	0x20008018

00012630 <bt_le_adv_lookup_legacy>:
}
   12630:	4800      	ldr	r0, [pc, #0]	; (12634 <bt_le_adv_lookup_legacy+0x4>)
   12632:	4770      	bx	lr
   12634:	20008018 	.word	0x20008018

00012638 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   12638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1263c:	b08d      	sub	sp, #52	; 0x34
   1263e:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   12640:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   12642:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   12646:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   12648:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1264c:	4890      	ldr	r0, [pc, #576]	; (12890 <bt_le_adv_start_legacy+0x258>)
   1264e:	bf18      	it	ne
   12650:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   12652:	9307      	str	r3, [sp, #28]
   12654:	f012 fea4 	bl	253a0 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   12658:	0747      	lsls	r7, r0, #29
{
   1265a:	460d      	mov	r5, r1
   1265c:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1265e:	f140 810d 	bpl.w	1287c <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   12662:	4608      	mov	r0, r1
   12664:	f7ff ff9c 	bl	125a0 <valid_adv_param>
   12668:	b928      	cbnz	r0, 12676 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1266a:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1266e:	4620      	mov	r0, r4
   12670:	b00d      	add	sp, #52	; 0x34
   12672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   12676:	4628      	mov	r0, r5
   12678:	f012 fe6f 	bl	2535a <bt_id_adv_random_addr_check>
   1267c:	4681      	mov	r9, r0
   1267e:	2800      	cmp	r0, #0
   12680:	d0f3      	beq.n	1266a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   12682:	f106 0810 	add.w	r8, r6, #16
   12686:	4640      	mov	r0, r8
   12688:	f012 fe8a 	bl	253a0 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1268c:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   12690:	0600      	lsls	r0, r0, #24
   12692:	f100 80f6 	bmi.w	12882 <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   12696:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1269a:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1269e:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   126a0:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   126a2:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   126a6:	68eb      	ldr	r3, [r5, #12]
   126a8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   126ac:	f012 fe69 	bl	25382 <get_adv_channel_map>
	if (adv->id != param->id) {
   126b0:	7832      	ldrb	r2, [r6, #0]
   126b2:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   126b4:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   126b8:	429a      	cmp	r2, r3
   126ba:	d004      	beq.n	126c6 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   126bc:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   126c0:	4873      	ldr	r0, [pc, #460]	; (12890 <bt_le_adv_start_legacy+0x258>)
   126c2:	f012 fe70 	bl	253a6 <atomic_and>
	adv->id = param->id;
   126c6:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   126c8:	4a72      	ldr	r2, [pc, #456]	; (12894 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   126ca:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   126cc:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   126d0:	4630      	mov	r0, r6
   126d2:	4622      	mov	r2, r4
   126d4:	6869      	ldr	r1, [r5, #4]
   126d6:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   126da:	f7ff fe33 	bl	12344 <bt_id_set_adv_own_addr>
	if (err) {
   126de:	4604      	mov	r4, r0
   126e0:	2800      	cmp	r0, #0
   126e2:	d1c4      	bne.n	1266e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   126e4:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   126e8:	f1ba 0f00 	cmp.w	sl, #0
   126ec:	d013      	beq.n	12716 <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   126ee:	6929      	ldr	r1, [r5, #16]
   126f0:	f012 fe64 	bl	253bc <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   126f4:	4628      	mov	r0, r5
   126f6:	f012 fefc 	bl	254f2 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   126fa:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   126fc:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   126fe:	07d9      	lsls	r1, r3, #31
   12700:	d416      	bmi.n	12730 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   12702:	059b      	lsls	r3, r3, #22
   12704:	d403      	bmi.n	1270e <bt_le_adv_start_legacy+0xd6>
   12706:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12708:	b90b      	cbnz	r3, 1270e <bt_le_adv_start_legacy+0xd6>
   1270a:	2f02      	cmp	r7, #2
   1270c:	d159      	bne.n	127c2 <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1270e:	2302      	movs	r3, #2
   12710:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   12714:	e019      	b.n	1274a <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   12716:	4960      	ldr	r1, [pc, #384]	; (12898 <bt_le_adv_start_legacy+0x260>)
   12718:	f012 fe50 	bl	253bc <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   1271c:	4628      	mov	r0, r5
   1271e:	f012 fee8 	bl	254f2 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   12722:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   12724:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   12726:	07da      	lsls	r2, r3, #31
   12728:	d5eb      	bpl.n	12702 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   1272a:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1272e:	e00c      	b.n	1274a <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   12730:	f013 0f10 	tst.w	r3, #16
   12734:	bf0c      	ite	eq
   12736:	2301      	moveq	r3, #1
   12738:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1273a:	6929      	ldr	r1, [r5, #16]
   1273c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   12740:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   12744:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   12746:	f012 fe39 	bl	253bc <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1274a:	210f      	movs	r1, #15
   1274c:	f242 0006 	movw	r0, #8198	; 0x2006
   12750:	f7fe fb60 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   12754:	4604      	mov	r4, r0
   12756:	2800      	cmp	r0, #0
   12758:	f000 8096 	beq.w	12888 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1275c:	220f      	movs	r2, #15
   1275e:	a908      	add	r1, sp, #32
   12760:	300c      	adds	r0, #12
   12762:	f014 faeb 	bl	26d3c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   12766:	4621      	mov	r1, r4
   12768:	2200      	movs	r2, #0
   1276a:	f242 0006 	movw	r0, #8198	; 0x2006
   1276e:	f7fe fb9f 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
   12772:	4604      	mov	r4, r0
   12774:	2800      	cmp	r0, #0
   12776:	f47f af7a 	bne.w	1266e <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1277a:	f1ba 0f00 	cmp.w	sl, #0
   1277e:	d026      	beq.n	127ce <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   12780:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12782:	07dc      	lsls	r4, r3, #31
   12784:	d431      	bmi.n	127ea <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   12786:	4630      	mov	r0, r6
   12788:	2101      	movs	r1, #1
   1278a:	f012 fec2 	bl	25512 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1278e:	9e07      	ldr	r6, [sp, #28]
	if (err) {
   12790:	4604      	mov	r4, r0
   12792:	2800      	cmp	r0, #0
   12794:	d06a      	beq.n	1286c <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   12796:	2500      	movs	r5, #0
   12798:	4b40      	ldr	r3, [pc, #256]	; (1289c <bt_le_adv_start_legacy+0x264>)
   1279a:	2201      	movs	r2, #1
   1279c:	9302      	str	r3, [sp, #8]
   1279e:	4628      	mov	r0, r5
   127a0:	462b      	mov	r3, r5
   127a2:	e9cd 5500 	strd	r5, r5, [sp]
   127a6:	493e      	ldr	r1, [pc, #248]	; (128a0 <bt_le_adv_start_legacy+0x268>)
   127a8:	f012 fe0f 	bl	253ca <z_log_msg_runtime_create.constprop.0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   127ac:	2e00      	cmp	r6, #0
   127ae:	f43f af5e 	beq.w	1266e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   127b2:	4630      	mov	r0, r6
   127b4:	4629      	mov	r1, r5
   127b6:	f000 fe67 	bl	13488 <bt_conn_set_state>
			bt_conn_unref(conn);
   127ba:	4630      	mov	r0, r6
   127bc:	f000 fe2c 	bl	13418 <bt_conn_unref>
   127c0:	e755      	b.n	1266e <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   127c2:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   127c4:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   127c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   127cc:	e7bd      	b.n	1274a <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   127ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   127d0:	4659      	mov	r1, fp
   127d2:	9300      	str	r3, [sp, #0]
   127d4:	4630      	mov	r0, r6
   127d6:	e9cd 9701 	strd	r9, r7, [sp, #4]
   127da:	9b16      	ldr	r3, [sp, #88]	; 0x58
   127dc:	9a05      	ldr	r2, [sp, #20]
   127de:	f012 fe16 	bl	2540e <le_adv_update.constprop.0>
		if (err) {
   127e2:	4604      	mov	r4, r0
   127e4:	2800      	cmp	r0, #0
   127e6:	d0cb      	beq.n	12780 <bt_le_adv_start_legacy+0x148>
   127e8:	e741      	b.n	1266e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   127ea:	4630      	mov	r0, r6
   127ec:	a907      	add	r1, sp, #28
   127ee:	f7ff fea1 	bl	12534 <le_adv_start_add_conn>
		if (err) {
   127f2:	4604      	mov	r4, r0
   127f4:	2800      	cmp	r0, #0
   127f6:	d0c6      	beq.n	12786 <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   127f8:	f110 0f0c 	cmn.w	r0, #12
   127fc:	f47f af37 	bne.w	1266e <bt_le_adv_start_legacy+0x36>
   12800:	f1ba 0f00 	cmp.w	sl, #0
   12804:	f47f af33 	bne.w	1266e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   12808:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   1280a:	0798      	lsls	r0, r3, #30
   1280c:	f53f af2f 	bmi.w	1266e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   12810:	686c      	ldr	r4, [r5, #4]
   12812:	f084 0402 	eor.w	r4, r4, #2
   12816:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1281a:	f004 0201 	and.w	r2, r4, #1
   1281e:	210e      	movs	r1, #14
   12820:	4640      	mov	r0, r8
   12822:	f012 fde1 	bl	253e8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   12826:	1e7b      	subs	r3, r7, #1
   12828:	425a      	negs	r2, r3
   1282a:	415a      	adcs	r2, r3
   1282c:	2108      	movs	r1, #8
   1282e:	4640      	mov	r0, r8
   12830:	f012 fdda 	bl	253e8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   12834:	1eb9      	subs	r1, r7, #2
   12836:	424a      	negs	r2, r1
   12838:	414a      	adcs	r2, r1
   1283a:	4640      	mov	r0, r8
   1283c:	2109      	movs	r1, #9
   1283e:	f012 fdd3 	bl	253e8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   12842:	686a      	ldr	r2, [r5, #4]
   12844:	210a      	movs	r1, #10
   12846:	4640      	mov	r0, r8
   12848:	f002 0201 	and.w	r2, r2, #1
   1284c:	f012 fdcc 	bl	253e8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   12850:	464a      	mov	r2, r9
   12852:	210b      	movs	r1, #11
   12854:	4640      	mov	r0, r8
   12856:	f012 fdc7 	bl	253e8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1285a:	686a      	ldr	r2, [r5, #4]
   1285c:	210d      	movs	r1, #13
   1285e:	4640      	mov	r0, r8
   12860:	f3c2 0280 	ubfx	r2, r2, #2, #1
   12864:	f012 fdc0 	bl	253e8 <atomic_set_bit_to>
	return 0;
   12868:	2400      	movs	r4, #0
   1286a:	e700      	b.n	1266e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1286c:	b116      	cbz	r6, 12874 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   1286e:	4630      	mov	r0, r6
   12870:	f000 fdd2 	bl	13418 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   12874:	f1ba 0f00 	cmp.w	sl, #0
   12878:	d1cf      	bne.n	1281a <bt_le_adv_start_legacy+0x1e2>
   1287a:	e7c9      	b.n	12810 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   1287c:	f06f 040a 	mvn.w	r4, #10
   12880:	e6f5      	b.n	1266e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   12882:	f06f 0477 	mvn.w	r4, #119	; 0x77
   12886:	e6f2      	b.n	1266e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   12888:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1288c:	e6ef      	b.n	1266e <bt_le_adv_start_legacy+0x36>
   1288e:	bf00      	nop
   12890:	200080cc 	.word	0x200080cc
   12894:	20008000 	.word	0x20008000
   12898:	0002c2a3 	.word	0x0002c2a3
   1289c:	0002ccd4 	.word	0x0002ccd4
   128a0:	00029694 	.word	0x00029694

000128a4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   128a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   128a6:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   128a8:	9a06      	ldr	r2, [sp, #24]
{
   128aa:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   128ac:	e9cd 3200 	strd	r3, r2, [sp]
   128b0:	462b      	mov	r3, r5
   128b2:	460a      	mov	r2, r1
   128b4:	4601      	mov	r1, r0
   128b6:	4811      	ldr	r0, [pc, #68]	; (128fc <bt_le_adv_start+0x58>)
   128b8:	f7ff febe 	bl	12638 <bt_le_adv_start_legacy>
   128bc:	4621      	mov	r1, r4
   128be:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   128c0:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   128c2:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   128c6:	429d      	cmp	r5, r3
   128c8:	d102      	bne.n	128d0 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   128ca:	4630      	mov	r0, r6
   128cc:	b002      	add	sp, #8
   128ce:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   128d0:	880a      	ldrh	r2, [r1, #0]
   128d2:	4282      	cmp	r2, r0
   128d4:	d104      	bne.n	128e0 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   128d6:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   128d8:	b112      	cbz	r2, 128e0 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   128da:	7812      	ldrb	r2, [r2, #0]
   128dc:	07d2      	lsls	r2, r2, #31
   128de:	d402      	bmi.n	128e6 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   128e0:	3301      	adds	r3, #1
   128e2:	3108      	adds	r1, #8
   128e4:	e7ef      	b.n	128c6 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   128e6:	4906      	ldr	r1, [pc, #24]	; (12900 <bt_le_adv_start+0x5c>)
   128e8:	4806      	ldr	r0, [pc, #24]	; (12904 <bt_le_adv_start+0x60>)
   128ea:	f00d f8bb 	bl	1fa64 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   128ee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   128f2:	2300      	movs	r3, #0
   128f4:	4803      	ldr	r0, [pc, #12]	; (12904 <bt_le_adv_start+0x60>)
   128f6:	f00d f9d1 	bl	1fc9c <k_work_reschedule>
   128fa:	e7e6      	b.n	128ca <bt_le_adv_start+0x26>
   128fc:	20008018 	.word	0x20008018
   12900:	0001298d 	.word	0x0001298d
   12904:	20008030 	.word	0x20008030

00012908 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   12908:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1290a:	481a      	ldr	r0, [pc, #104]	; (12974 <bt_le_adv_stop+0x6c>)
   1290c:	f012 fe28 	bl	25560 <bt_le_lim_adv_cancel_timeout>
   12910:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   12914:	4818      	ldr	r0, [pc, #96]	; (12978 <bt_le_adv_stop+0x70>)
   12916:	f012 fd46 	bl	253a6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1291a:	4817      	ldr	r0, [pc, #92]	; (12978 <bt_le_adv_stop+0x70>)
   1291c:	f012 fd40 	bl	253a0 <atomic_get>
   12920:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   12922:	061a      	lsls	r2, r3, #24
   12924:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   12928:	d523      	bpl.n	12972 <bt_le_adv_stop+0x6a>
   1292a:	4813      	ldr	r0, [pc, #76]	; (12978 <bt_le_adv_stop+0x70>)
   1292c:	f012 fd38 	bl	253a0 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12930:	0543      	lsls	r3, r0, #21
   12932:	d514      	bpl.n	1295e <bt_le_adv_stop+0x56>
   12934:	2207      	movs	r2, #7
   12936:	4911      	ldr	r1, [pc, #68]	; (1297c <bt_le_adv_stop+0x74>)
   12938:	4811      	ldr	r0, [pc, #68]	; (12980 <bt_le_adv_stop+0x78>)
   1293a:	f015 ff32 	bl	287a2 <memcmp>
   1293e:	4b11      	ldr	r3, [pc, #68]	; (12984 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   12940:	b998      	cbnz	r0, 1296a <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   12942:	2204      	movs	r2, #4
   12944:	4910      	ldr	r1, [pc, #64]	; (12988 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   12946:	7e18      	ldrb	r0, [r3, #24]
   12948:	f001 f872 	bl	13a30 <bt_conn_lookup_state_le>
   1294c:	4604      	mov	r4, r0
	if (conn) {
   1294e:	b130      	cbz	r0, 1295e <bt_le_adv_stop+0x56>
		conn->err = status;
   12950:	2100      	movs	r1, #0
   12952:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12954:	f000 fd98 	bl	13488 <bt_conn_set_state>
		bt_conn_unref(conn);
   12958:	4620      	mov	r0, r4
   1295a:	f000 fd5d 	bl	13418 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1295e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   12962:	2100      	movs	r1, #0
   12964:	4803      	ldr	r0, [pc, #12]	; (12974 <bt_le_adv_stop+0x6c>)
   12966:	f012 bdd4 	b.w	25512 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1296a:	2205      	movs	r2, #5
   1296c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   12970:	e7e9      	b.n	12946 <bt_le_adv_stop+0x3e>
}
   12972:	bd10      	pop	{r4, pc}
   12974:	20008018 	.word	0x20008018
   12978:	20008028 	.word	0x20008028
   1297c:	0002c2a3 	.word	0x0002c2a3
   12980:	20008021 	.word	0x20008021
   12984:	20008000 	.word	0x20008000
   12988:	0002c29c 	.word	0x0002c29c

0001298c <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1298c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1298e:	f7ff ffbb 	bl	12908 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   12992:	4b07      	ldr	r3, [pc, #28]	; (129b0 <adv_timeout+0x24>)
   12994:	9003      	str	r0, [sp, #12]
   12996:	9302      	str	r3, [sp, #8]
   12998:	2300      	movs	r3, #0
   1299a:	2202      	movs	r2, #2
   1299c:	4618      	mov	r0, r3
   1299e:	e9cd 3300 	strd	r3, r3, [sp]
   129a2:	4904      	ldr	r1, [pc, #16]	; (129b4 <adv_timeout+0x28>)
   129a4:	f012 fd11 	bl	253ca <z_log_msg_runtime_create.constprop.0>
}
   129a8:	b005      	add	sp, #20
   129aa:	f85d fb04 	ldr.w	pc, [sp], #4
   129ae:	bf00      	nop
   129b0:	0002ccef 	.word	0x0002ccef
   129b4:	00029694 	.word	0x00029694

000129b8 <bt_le_adv_resume>:
{
   129b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   129ba:	4c1e      	ldr	r4, [pc, #120]	; (12a34 <bt_le_adv_resume+0x7c>)
   129bc:	4620      	mov	r0, r4
   129be:	f012 fcef 	bl	253a0 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   129c2:	0440      	lsls	r0, r0, #17
   129c4:	d534      	bpl.n	12a30 <bt_le_adv_resume+0x78>
   129c6:	4620      	mov	r0, r4
   129c8:	f012 fcea 	bl	253a0 <atomic_get>
   129cc:	0601      	lsls	r1, r0, #24
   129ce:	d42f      	bmi.n	12a30 <bt_le_adv_resume+0x78>
   129d0:	4620      	mov	r0, r4
   129d2:	f012 fce5 	bl	253a0 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   129d6:	0542      	lsls	r2, r0, #21
   129d8:	d52a      	bpl.n	12a30 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   129da:	a901      	add	r1, sp, #4
   129dc:	f1a4 0010 	sub.w	r0, r4, #16
   129e0:	f7ff fda8 	bl	12534 <le_adv_start_add_conn>
	if (err) {
   129e4:	4605      	mov	r5, r0
   129e6:	bb18      	cbnz	r0, 12a30 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   129e8:	2101      	movs	r1, #1
   129ea:	f1a4 0010 	sub.w	r0, r4, #16
   129ee:	f012 fd90 	bl	25512 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   129f2:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   129f4:	b928      	cbnz	r0, 12a02 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   129f6:	4630      	mov	r0, r6
}
   129f8:	b002      	add	sp, #8
   129fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   129fe:	f000 bd0b 	b.w	13418 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12a02:	4629      	mov	r1, r5
   12a04:	4630      	mov	r0, r6
   12a06:	f000 fd3f 	bl	13488 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12a0a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   12a0e:	4620      	mov	r0, r4
   12a10:	f012 fcc9 	bl	253a6 <atomic_and>
   12a14:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   12a16:	4630      	mov	r0, r6
   12a18:	f000 fcfe 	bl	13418 <bt_conn_unref>
	if (persist_paused) {
   12a1c:	046b      	lsls	r3, r5, #17
   12a1e:	d507      	bpl.n	12a30 <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12a20:	e8d4 3fef 	ldaex	r3, [r4]
   12a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12a28:	e8c4 3fe2 	stlex	r2, r3, [r4]
   12a2c:	2a00      	cmp	r2, #0
   12a2e:	d1f7      	bne.n	12a20 <bt_le_adv_resume+0x68>
}
   12a30:	b002      	add	sp, #8
   12a32:	bd70      	pop	{r4, r5, r6, pc}
   12a34:	20008028 	.word	0x20008028

00012a38 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   12a38:	b530      	push	{r4, r5, lr}
   12a3a:	b08f      	sub	sp, #60	; 0x3c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   12a3c:	2120      	movs	r1, #32
   12a3e:	a806      	add	r0, sp, #24
   12a40:	f7fe fad4 	bl	10fec <bt_hci_le_rand>
	if (ret) {
   12a44:	4604      	mov	r4, r0
   12a46:	bb08      	cbnz	r0, 12a8c <prng_reseed.constprop.0+0x54>
	return z_impl_k_uptime_ticks();
   12a48:	f015 fdb0 	bl	285ac <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   12a4c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   12a50:	fba0 2305 	umull	r2, r3, r0, r5
   12a54:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   12a58:	2308      	movs	r3, #8
   12a5a:	0bd2      	lsrs	r2, r2, #15
   12a5c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   12a60:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   12a62:	e9cd 2104 	strd	r2, r1, [sp, #16]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   12a66:	9300      	str	r3, [sp, #0]
   12a68:	2220      	movs	r2, #32
   12a6a:	480a      	ldr	r0, [pc, #40]	; (12a94 <prng_reseed.constprop.0+0x5c>)
   12a6c:	ab04      	add	r3, sp, #16
   12a6e:	a906      	add	r1, sp, #24
   12a70:	f012 f944 	bl	24cfc <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   12a74:	b950      	cbnz	r0, 12a8c <prng_reseed.constprop.0+0x54>
		LOG_ERR("Failed to re-seed PRNG");
   12a76:	4b08      	ldr	r3, [pc, #32]	; (12a98 <prng_reseed.constprop.0+0x60>)
   12a78:	9400      	str	r4, [sp, #0]
   12a7a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12a7e:	2201      	movs	r2, #1
   12a80:	4623      	mov	r3, r4
   12a82:	4906      	ldr	r1, [pc, #24]	; (12a9c <prng_reseed.constprop.0+0x64>)
   12a84:	f012 fd6f 	bl	25566 <z_log_msg_runtime_create.constprop.0>
   12a88:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
   12a8c:	4620      	mov	r0, r4
   12a8e:	b00f      	add	sp, #60	; 0x3c
   12a90:	bd30      	pop	{r4, r5, pc}
   12a92:	bf00      	nop
   12a94:	200096c0 	.word	0x200096c0
   12a98:	0002cd15 	.word	0x0002cd15
   12a9c:	000296d4 	.word	0x000296d4

00012aa0 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   12aa0:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   12aa2:	b508      	push	{r3, lr}
   12aa4:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   12aa8:	d910      	bls.n	12acc <sys_memcpy_swap.constprop.0+0x2c>
   12aaa:	4298      	cmp	r0, r3
   12aac:	d213      	bcs.n	12ad6 <sys_memcpy_swap.constprop.0+0x36>
   12aae:	490e      	ldr	r1, [pc, #56]	; (12ae8 <sys_memcpy_swap.constprop.0+0x48>)
   12ab0:	f240 2315 	movw	r3, #533	; 0x215
   12ab4:	4a0d      	ldr	r2, [pc, #52]	; (12aec <sys_memcpy_swap.constprop.0+0x4c>)
   12ab6:	480e      	ldr	r0, [pc, #56]	; (12af0 <sys_memcpy_swap.constprop.0+0x50>)
   12ab8:	f011 fab3 	bl	24022 <assert_print>
   12abc:	480d      	ldr	r0, [pc, #52]	; (12af4 <sys_memcpy_swap.constprop.0+0x54>)
   12abe:	f011 fab0 	bl	24022 <assert_print>
   12ac2:	f240 2115 	movw	r1, #533	; 0x215
   12ac6:	4809      	ldr	r0, [pc, #36]	; (12aec <sys_memcpy_swap.constprop.0+0x4c>)
   12ac8:	f011 faa4 	bl	24014 <assert_post_action>
   12acc:	d0ef      	beq.n	12aae <sys_memcpy_swap.constprop.0+0xe>
   12ace:	f100 0210 	add.w	r2, r0, #16
   12ad2:	4291      	cmp	r1, r2
   12ad4:	e7ea      	b.n	12aac <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   12ad6:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   12ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   12adc:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   12ade:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   12ae2:	d1f9      	bne.n	12ad8 <sys_memcpy_swap.constprop.0+0x38>
	}
}
   12ae4:	bd08      	pop	{r3, pc}
   12ae6:	bf00      	nop
   12ae8:	0002cd5e 	.word	0x0002cd5e
   12aec:	0002cd2c 	.word	0x0002cd2c
   12af0:	0002a669 	.word	0x0002a669
   12af4:	0002cdb5 	.word	0x0002cdb5

00012af8 <prng_init>:

int prng_init(void)
{
   12af8:	b510      	push	{r4, lr}
   12afa:	b086      	sub	sp, #24
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   12afc:	2108      	movs	r1, #8
   12afe:	a804      	add	r0, sp, #16
   12b00:	f7fe fa74 	bl	10fec <bt_hci_le_rand>
	if (ret) {
   12b04:	4604      	mov	r4, r0
   12b06:	b980      	cbnz	r0, 12b2a <prng_init+0x32>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   12b08:	2208      	movs	r2, #8
   12b0a:	480b      	ldr	r0, [pc, #44]	; (12b38 <prng_init+0x40>)
   12b0c:	a904      	add	r1, sp, #16
   12b0e:	f012 f8d5 	bl	24cbc <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   12b12:	b968      	cbnz	r0, 12b30 <prng_init+0x38>
		LOG_ERR("Failed to initialize PRNG");
   12b14:	4b09      	ldr	r3, [pc, #36]	; (12b3c <prng_init+0x44>)
   12b16:	9400      	str	r4, [sp, #0]
   12b18:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12b1c:	2201      	movs	r2, #1
   12b1e:	4623      	mov	r3, r4
   12b20:	4907      	ldr	r1, [pc, #28]	; (12b40 <prng_init+0x48>)
   12b22:	f012 fd20 	bl	25566 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   12b26:	f06f 0404 	mvn.w	r4, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   12b2a:	4620      	mov	r0, r4
   12b2c:	b006      	add	sp, #24
   12b2e:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   12b30:	f7ff ff82 	bl	12a38 <prng_reseed.constprop.0>
   12b34:	4604      	mov	r4, r0
   12b36:	e7f8      	b.n	12b2a <prng_init+0x32>
   12b38:	200096c0 	.word	0x200096c0
   12b3c:	0002cde7 	.word	0x0002cde7
   12b40:	000296d4 	.word	0x000296d4

00012b44 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   12b44:	b538      	push	{r3, r4, r5, lr}
   12b46:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   12b48:	4604      	mov	r4, r0
   12b4a:	b198      	cbz	r0, 12b74 <bt_rand+0x30>
   12b4c:	b191      	cbz	r1, 12b74 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   12b4e:	4a0b      	ldr	r2, [pc, #44]	; (12b7c <bt_rand+0x38>)
   12b50:	f012 f8ed 	bl	24d2e <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   12b54:	1c43      	adds	r3, r0, #1
   12b56:	d107      	bne.n	12b68 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   12b58:	f7ff ff6e 	bl	12a38 <prng_reseed.constprop.0>
		if (ret) {
   12b5c:	b948      	cbnz	r0, 12b72 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   12b5e:	4629      	mov	r1, r5
   12b60:	4620      	mov	r0, r4
   12b62:	4a06      	ldr	r2, [pc, #24]	; (12b7c <bt_rand+0x38>)
   12b64:	f012 f8e3 	bl	24d2e <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   12b68:	2801      	cmp	r0, #1
   12b6a:	bf0c      	ite	eq
   12b6c:	2000      	moveq	r0, #0
   12b6e:	f06f 0004 	mvnne.w	r0, #4
}
   12b72:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   12b74:	f06f 0015 	mvn.w	r0, #21
   12b78:	e7fb      	b.n	12b72 <bt_rand+0x2e>
   12b7a:	bf00      	nop
   12b7c:	200096c0 	.word	0x200096c0

00012b80 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   12b80:	2240      	movs	r2, #64	; 0x40
{
   12b82:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   12b84:	4903      	ldr	r1, [pc, #12]	; (12b94 <bt_pub_key_is_debug+0x14>)
   12b86:	f015 fe0c 	bl	287a2 <memcmp>
}
   12b8a:	fab0 f080 	clz	r0, r0
   12b8e:	0940      	lsrs	r0, r0, #5
   12b90:	bd08      	pop	{r3, pc}
   12b92:	bf00      	nop
   12b94:	0002ce97 	.word	0x0002ce97

00012b98 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   12b98:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   12b9a:	4b3c      	ldr	r3, [pc, #240]	; (12c8c <bt_pub_key_gen+0xf4>)
{
   12b9c:	b085      	sub	sp, #20
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   12b9e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   12ba2:	f003 0306 	and.w	r3, r3, #6
   12ba6:	2b06      	cmp	r3, #6
   12ba8:	d00e      	beq.n	12bc8 <bt_pub_key_gen+0x30>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   12baa:	4b39      	ldr	r3, [pc, #228]	; (12c90 <bt_pub_key_gen+0xf8>)
   12bac:	2202      	movs	r2, #2
   12bae:	9302      	str	r3, [sp, #8]
   12bb0:	2300      	movs	r3, #0
   12bb2:	4938      	ldr	r1, [pc, #224]	; (12c94 <bt_pub_key_gen+0xfc>)
   12bb4:	4618      	mov	r0, r3
   12bb6:	e9cd 3300 	strd	r3, r3, [sp]
   12bba:	f012 fd10 	bl	255de <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   12bbe:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   12bc2:	4628      	mov	r0, r5
   12bc4:	b005      	add	sp, #20
   12bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   12bc8:	2800      	cmp	r0, #0
   12bca:	d05b      	beq.n	12c84 <bt_pub_key_gen+0xec>
	return list->head;
   12bcc:	4e32      	ldr	r6, [pc, #200]	; (12c98 <bt_pub_key_gen+0x100>)
   12bce:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   12bd0:	b19a      	cbz	r2, 12bfa <bt_pub_key_gen+0x62>
   12bd2:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   12bd4:	4283      	cmp	r3, r0
   12bd6:	d10c      	bne.n	12bf2 <bt_pub_key_gen+0x5a>
			LOG_WRN("Callback already registered");
   12bd8:	4b30      	ldr	r3, [pc, #192]	; (12c9c <bt_pub_key_gen+0x104>)
   12bda:	2202      	movs	r2, #2
   12bdc:	9302      	str	r3, [sp, #8]
   12bde:	2300      	movs	r3, #0
   12be0:	492c      	ldr	r1, [pc, #176]	; (12c94 <bt_pub_key_gen+0xfc>)
   12be2:	4618      	mov	r0, r3
   12be4:	e9cd 3300 	strd	r3, r3, [sp]
   12be8:	f012 fcf9 	bl	255de <z_log_msg_runtime_create.constprop.0>
			return -EALREADY;
   12bec:	f06f 0577 	mvn.w	r5, #119	; 0x77
   12bf0:	e7e7      	b.n	12bc2 <bt_pub_key_gen+0x2a>
	return node->next;
   12bf2:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   12bf4:	b10b      	cbz	r3, 12bfa <bt_pub_key_gen+0x62>
   12bf6:	3b04      	subs	r3, #4
   12bf8:	e7ec      	b.n	12bd4 <bt_pub_key_gen+0x3c>
	parent->next = child;
   12bfa:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   12bfc:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   12bfe:	1d03      	adds	r3, r0, #4
	list->head = node;
   12c00:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   12c02:	b902      	cbnz	r2, 12c06 <bt_pub_key_gen+0x6e>
	list->tail = node;
   12c04:	6073      	str	r3, [r6, #4]
   12c06:	4f26      	ldr	r7, [pc, #152]	; (12ca0 <bt_pub_key_gen+0x108>)
   12c08:	e8d7 4fef 	ldaex	r4, [r7]
   12c0c:	f044 0320 	orr.w	r3, r4, #32
   12c10:	e8c7 3fe2 	stlex	r2, r3, [r7]
   12c14:	2a00      	cmp	r2, #0
   12c16:	d1f7      	bne.n	12c08 <bt_pub_key_gen+0x70>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   12c18:	f014 0420 	ands.w	r4, r4, #32
   12c1c:	d001      	beq.n	12c22 <bt_pub_key_gen+0x8a>
	return 0;
   12c1e:	2500      	movs	r5, #0
   12c20:	e7cf      	b.n	12bc2 <bt_pub_key_gen+0x2a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12c22:	e8d7 3fef 	ldaex	r3, [r7]
   12c26:	f023 0310 	bic.w	r3, r3, #16
   12c2a:	e8c7 3fe2 	stlex	r2, r3, [r7]
   12c2e:	2a00      	cmp	r2, #0
   12c30:	d1f7      	bne.n	12c22 <bt_pub_key_gen+0x8a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   12c32:	4622      	mov	r2, r4
   12c34:	4621      	mov	r1, r4
   12c36:	f242 0025 	movw	r0, #8229	; 0x2025
   12c3a:	f7fe f939 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
   12c3e:	4605      	mov	r5, r0
   12c40:	2800      	cmp	r0, #0
   12c42:	d0ec      	beq.n	12c1e <bt_pub_key_gen+0x86>
		LOG_ERR("Sending LE P256 Public Key command failed");
   12c44:	4b17      	ldr	r3, [pc, #92]	; (12ca4 <bt_pub_key_gen+0x10c>)
   12c46:	2201      	movs	r2, #1
   12c48:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12c4c:	4620      	mov	r0, r4
   12c4e:	4623      	mov	r3, r4
   12c50:	4910      	ldr	r1, [pc, #64]	; (12c94 <bt_pub_key_gen+0xfc>)
   12c52:	9400      	str	r4, [sp, #0]
   12c54:	f012 fcc3 	bl	255de <z_log_msg_runtime_create.constprop.0>
   12c58:	e8d7 3fef 	ldaex	r3, [r7]
   12c5c:	f023 0320 	bic.w	r3, r3, #32
   12c60:	e8c7 3fe2 	stlex	r2, r3, [r7]
   12c64:	2a00      	cmp	r2, #0
   12c66:	d1f7      	bne.n	12c58 <bt_pub_key_gen+0xc0>
	return list->head;
   12c68:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   12c6a:	b13c      	cbz	r4, 12c7c <bt_pub_key_gen+0xe4>
			if (cb->func) {
   12c6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   12c70:	3c04      	subs	r4, #4
			if (cb->func) {
   12c72:	b10b      	cbz	r3, 12c78 <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   12c74:	2000      	movs	r0, #0
   12c76:	4798      	blx	r3
	return node->next;
   12c78:	6864      	ldr	r4, [r4, #4]
   12c7a:	e7f6      	b.n	12c6a <bt_pub_key_gen+0xd2>
	list->head = NULL;
   12c7c:	2300      	movs	r3, #0
	list->tail = NULL;
   12c7e:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   12c82:	e79e      	b.n	12bc2 <bt_pub_key_gen+0x2a>
		return -EINVAL;
   12c84:	f06f 0515 	mvn.w	r5, #21
   12c88:	e79b      	b.n	12bc2 <bt_pub_key_gen+0x2a>
   12c8a:	bf00      	nop
   12c8c:	20008000 	.word	0x20008000
   12c90:	0002ce10 	.word	0x0002ce10
   12c94:	000296b4 	.word	0x000296b4
   12c98:	20020f78 	.word	0x20020f78
   12c9c:	0002ce2f 	.word	0x0002ce2f
   12ca0:	200080cc 	.word	0x200080cc
   12ca4:	0002ce4b 	.word	0x0002ce4b

00012ca8 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12ca8:	4b04      	ldr	r3, [pc, #16]	; (12cbc <bt_pub_key_get+0x14>)
   12caa:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   12cae:	f013 0f10 	tst.w	r3, #16
}
   12cb2:	4803      	ldr	r0, [pc, #12]	; (12cc0 <bt_pub_key_get+0x18>)
   12cb4:	bf08      	it	eq
   12cb6:	2000      	moveq	r0, #0
   12cb8:	4770      	bx	lr
   12cba:	bf00      	nop
   12cbc:	200080cc 	.word	0x200080cc
   12cc0:	20021d42 	.word	0x20021d42

00012cc4 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   12cc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   12cc6:	4e24      	ldr	r6, [pc, #144]	; (12d58 <bt_dh_key_gen+0x94>)
{
   12cc8:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   12cca:	6833      	ldr	r3, [r6, #0]
   12ccc:	428b      	cmp	r3, r1
   12cce:	d03c      	beq.n	12d4a <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   12cd0:	b123      	cbz	r3, 12cdc <bt_dh_key_gen+0x18>
		return -EBUSY;
   12cd2:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   12cd6:	4620      	mov	r0, r4
   12cd8:	b004      	add	sp, #16
   12cda:	bd70      	pop	{r4, r5, r6, pc}
   12cdc:	4b1f      	ldr	r3, [pc, #124]	; (12d5c <bt_dh_key_gen+0x98>)
   12cde:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   12ce2:	0692      	lsls	r2, r2, #26
   12ce4:	d4f5      	bmi.n	12cd2 <bt_dh_key_gen+0xe>
   12ce6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   12cea:	06db      	lsls	r3, r3, #27
   12cec:	d530      	bpl.n	12d50 <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   12cee:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   12cf0:	f242 0026 	movw	r0, #8230	; 0x2026
   12cf4:	2140      	movs	r1, #64	; 0x40
   12cf6:	f7fe f88d 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   12cfa:	4605      	mov	r5, r0
   12cfc:	b310      	cbz	r0, 12d44 <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   12cfe:	2140      	movs	r1, #64	; 0x40
   12d00:	300c      	adds	r0, #12
   12d02:	f005 fdc5 	bl	18890 <net_buf_simple_add>
   12d06:	4623      	mov	r3, r4
   12d08:	f104 0240 	add.w	r2, r4, #64	; 0x40
   12d0c:	f853 1b04 	ldr.w	r1, [r3], #4
   12d10:	4293      	cmp	r3, r2
   12d12:	f840 1b04 	str.w	r1, [r0], #4
   12d16:	d1f9      	bne.n	12d0c <bt_dh_key_gen+0x48>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   12d18:	2200      	movs	r2, #0
   12d1a:	4629      	mov	r1, r5
   12d1c:	f242 0026 	movw	r0, #8230	; 0x2026
   12d20:	f7fe f8c6 	bl	10eb0 <bt_hci_cmd_send_sync>
	if (err) {
   12d24:	4604      	mov	r4, r0
   12d26:	2800      	cmp	r0, #0
   12d28:	d0d5      	beq.n	12cd6 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   12d2a:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   12d2c:	4a0c      	ldr	r2, [pc, #48]	; (12d60 <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   12d2e:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   12d30:	4618      	mov	r0, r3
   12d32:	e9cd 3201 	strd	r3, r2, [sp, #4]
   12d36:	490b      	ldr	r1, [pc, #44]	; (12d64 <bt_dh_key_gen+0xa0>)
   12d38:	2202      	movs	r2, #2
   12d3a:	9403      	str	r4, [sp, #12]
   12d3c:	9300      	str	r3, [sp, #0]
   12d3e:	f012 fc4e 	bl	255de <z_log_msg_runtime_create.constprop.0>
		return err;
   12d42:	e7c8      	b.n	12cd6 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   12d44:	f06f 0468 	mvn.w	r4, #104	; 0x68
   12d48:	e7ef      	b.n	12d2a <bt_dh_key_gen+0x66>
		return -EALREADY;
   12d4a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   12d4e:	e7c2      	b.n	12cd6 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   12d50:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   12d54:	e7bf      	b.n	12cd6 <bt_dh_key_gen+0x12>
   12d56:	bf00      	nop
   12d58:	20020f74 	.word	0x20020f74
   12d5c:	200080cc 	.word	0x200080cc
   12d60:	0002ce75 	.word	0x0002ce75
   12d64:	000296b4 	.word	0x000296b4

00012d68 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   12d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12d6a:	4b19      	ldr	r3, [pc, #100]	; (12dd0 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   12d6c:	68c5      	ldr	r5, [r0, #12]
   12d6e:	e8d3 2fef 	ldaex	r2, [r3]
   12d72:	f022 0220 	bic.w	r2, r2, #32
   12d76:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12d7a:	2900      	cmp	r1, #0
   12d7c:	d1f7      	bne.n	12d6e <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   12d7e:	782a      	ldrb	r2, [r5, #0]
   12d80:	b98a      	cbnz	r2, 12da6 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   12d82:	4914      	ldr	r1, [pc, #80]	; (12dd4 <bt_hci_evt_le_pkey_complete+0x6c>)
   12d84:	1c6a      	adds	r2, r5, #1
   12d86:	f105 0041 	add.w	r0, r5, #65	; 0x41
   12d8a:	f852 4b04 	ldr.w	r4, [r2], #4
   12d8e:	4282      	cmp	r2, r0
   12d90:	f841 4b04 	str.w	r4, [r1], #4
   12d94:	d1f9      	bne.n	12d8a <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12d96:	e8d3 1fef 	ldaex	r1, [r3]
   12d9a:	f041 0110 	orr.w	r1, r1, #16
   12d9e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   12da2:	2a00      	cmp	r2, #0
   12da4:	d1f7      	bne.n	12d96 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   12da6:	4e0c      	ldr	r6, [pc, #48]	; (12dd8 <bt_hci_evt_le_pkey_complete+0x70>)
   12da8:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   12daa:	b16c      	cbz	r4, 12dc8 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   12dac:	4f09      	ldr	r7, [pc, #36]	; (12dd4 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   12dae:	3c04      	subs	r4, #4
		if (cb->func) {
   12db0:	6823      	ldr	r3, [r4, #0]
   12db2:	b12b      	cbz	r3, 12dc0 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   12db4:	782a      	ldrb	r2, [r5, #0]
   12db6:	2a00      	cmp	r2, #0
   12db8:	bf0c      	ite	eq
   12dba:	4638      	moveq	r0, r7
   12dbc:	2000      	movne	r0, #0
   12dbe:	4798      	blx	r3
	return node->next;
   12dc0:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   12dc2:	b10c      	cbz	r4, 12dc8 <bt_hci_evt_le_pkey_complete+0x60>
   12dc4:	3c04      	subs	r4, #4
   12dc6:	e7f3      	b.n	12db0 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   12dc8:	2300      	movs	r3, #0
	list->tail = NULL;
   12dca:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   12dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12dd0:	200080cc 	.word	0x200080cc
   12dd4:	20021d42 	.word	0x20021d42
   12dd8:	20020f78 	.word	0x20020f78

00012ddc <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   12ddc:	4905      	ldr	r1, [pc, #20]	; (12df4 <bt_hci_evt_le_dhkey_complete+0x18>)
   12dde:	680b      	ldr	r3, [r1, #0]
   12de0:	b133      	cbz	r3, 12df0 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   12de2:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   12de4:	2000      	movs	r0, #0
   12de6:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   12de8:	7811      	ldrb	r1, [r2, #0]
   12dea:	b901      	cbnz	r1, 12dee <bt_hci_evt_le_dhkey_complete+0x12>
   12dec:	1c50      	adds	r0, r2, #1
   12dee:	4718      	bx	r3
	}
}
   12df0:	4770      	bx	lr
   12df2:	bf00      	nop
   12df4:	20020f74 	.word	0x20020f74

00012df8 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   12df8:	b570      	push	{r4, r5, r6, lr}
   12dfa:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   12dfc:	4b12      	ldr	r3, [pc, #72]	; (12e48 <notify_connected+0x50>)
   12dfe:	681d      	ldr	r5, [r3, #0]
   12e00:	b995      	cbnz	r5, 12e28 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   12e02:	4d12      	ldr	r5, [pc, #72]	; (12e4c <notify_connected+0x54>)
   12e04:	4e12      	ldr	r6, [pc, #72]	; (12e50 <notify_connected+0x58>)
   12e06:	42b5      	cmp	r5, r6
   12e08:	d91c      	bls.n	12e44 <notify_connected+0x4c>
   12e0a:	4912      	ldr	r1, [pc, #72]	; (12e54 <notify_connected+0x5c>)
   12e0c:	f240 535b 	movw	r3, #1371	; 0x55b
   12e10:	4a11      	ldr	r2, [pc, #68]	; (12e58 <notify_connected+0x60>)
   12e12:	4812      	ldr	r0, [pc, #72]	; (12e5c <notify_connected+0x64>)
   12e14:	f011 f905 	bl	24022 <assert_print>
   12e18:	4811      	ldr	r0, [pc, #68]	; (12e60 <notify_connected+0x68>)
   12e1a:	f011 f902 	bl	24022 <assert_print>
   12e1e:	f240 515b 	movw	r1, #1371	; 0x55b
   12e22:	480d      	ldr	r0, [pc, #52]	; (12e58 <notify_connected+0x60>)
   12e24:	f011 f8f6 	bl	24014 <assert_post_action>
		if (cb->connected) {
   12e28:	682b      	ldr	r3, [r5, #0]
   12e2a:	b113      	cbz	r3, 12e32 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   12e2c:	4620      	mov	r0, r4
   12e2e:	7b21      	ldrb	r1, [r4, #12]
   12e30:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   12e32:	69ad      	ldr	r5, [r5, #24]
   12e34:	e7e4      	b.n	12e00 <notify_connected+0x8>
		if (cb->connected) {
   12e36:	682b      	ldr	r3, [r5, #0]
   12e38:	b113      	cbz	r3, 12e40 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   12e3a:	4620      	mov	r0, r4
   12e3c:	7b21      	ldrb	r1, [r4, #12]
   12e3e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   12e40:	351c      	adds	r5, #28
   12e42:	e7e0      	b.n	12e06 <notify_connected+0xe>
   12e44:	d3f7      	bcc.n	12e36 <notify_connected+0x3e>
		}
	}
}
   12e46:	bd70      	pop	{r4, r5, r6, pc}
   12e48:	20020fa0 	.word	0x20020fa0
   12e4c:	00029630 	.word	0x00029630
   12e50:	0002964c 	.word	0x0002964c
   12e54:	0002cf0e 	.word	0x0002cf0e
   12e58:	0002cede 	.word	0x0002cede
   12e5c:	0002a669 	.word	0x0002a669
   12e60:	0002b5ef 	.word	0x0002b5ef

00012e64 <tx_notify>:
{
   12e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e68:	4604      	mov	r4, r0
	tx->cb = NULL;
   12e6a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   12e6e:	4f14      	ldr	r7, [pc, #80]	; (12ec0 <tx_notify+0x5c>)
	__asm__ volatile(
   12e70:	f04f 0220 	mov.w	r2, #32
   12e74:	f3ef 8311 	mrs	r3, BASEPRI
   12e78:	f382 8812 	msr	BASEPRI_MAX, r2
   12e7c:	f3bf 8f6f 	isb	sy
	return list->head;
   12e80:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   12e82:	b929      	cbnz	r1, 12e90 <tx_notify+0x2c>
	__asm__ volatile(
   12e84:	f383 8811 	msr	BASEPRI, r3
   12e88:	f3bf 8f6f 	isb	sy
}
   12e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e90:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   12e92:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12e94:	4281      	cmp	r1, r0
	list->tail = node;
   12e96:	bf08      	it	eq
   12e98:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   12e9a:	6222      	str	r2, [r4, #32]
   12e9c:	f383 8811 	msr	BASEPRI, r3
   12ea0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   12ea4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   12ea8:	4638      	mov	r0, r7
	tx->user_data = NULL;
   12eaa:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   12eae:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   12eb2:	f015 fabd 	bl	28430 <k_queue_append>
		cb(conn, user_data, 0);
   12eb6:	2200      	movs	r2, #0
   12eb8:	4631      	mov	r1, r6
   12eba:	4620      	mov	r0, r4
   12ebc:	47a8      	blx	r5
	while (1) {
   12ebe:	e7d7      	b.n	12e70 <tx_notify+0xc>
   12ec0:	20008bd0 	.word	0x20008bd0

00012ec4 <conn_tx_destroy>:
{
   12ec4:	b570      	push	{r4, r5, r6, lr}
   12ec6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   12ec8:	b949      	cbnz	r1, 12ede <conn_tx_destroy+0x1a>
   12eca:	490d      	ldr	r1, [pc, #52]	; (12f00 <conn_tx_destroy+0x3c>)
   12ecc:	480d      	ldr	r0, [pc, #52]	; (12f04 <conn_tx_destroy+0x40>)
   12ece:	2339      	movs	r3, #57	; 0x39
   12ed0:	4a0d      	ldr	r2, [pc, #52]	; (12f08 <conn_tx_destroy+0x44>)
   12ed2:	f011 f8a6 	bl	24022 <assert_print>
   12ed6:	2139      	movs	r1, #57	; 0x39
   12ed8:	480b      	ldr	r0, [pc, #44]	; (12f08 <conn_tx_destroy+0x44>)
   12eda:	f011 f89b 	bl	24014 <assert_post_action>
	tx->cb = NULL;
   12ede:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   12ee0:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   12ee4:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   12ee6:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   12eea:	4808      	ldr	r0, [pc, #32]	; (12f0c <conn_tx_destroy+0x48>)
   12eec:	f015 faa0 	bl	28430 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   12ef0:	4631      	mov	r1, r6
   12ef2:	4620      	mov	r0, r4
   12ef4:	462b      	mov	r3, r5
}
   12ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   12efa:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   12efe:	4718      	bx	r3
   12f00:	0002cf29 	.word	0x0002cf29
   12f04:	0002a669 	.word	0x0002a669
   12f08:	0002cede 	.word	0x0002cede
   12f0c:	20008bd0 	.word	0x20008bd0

00012f10 <send_frag>:
{
   12f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12f14:	4604      	mov	r4, r0
   12f16:	460e      	mov	r6, r1
   12f18:	4617      	mov	r7, r2
   12f1a:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   12f1c:	698d      	ldr	r5, [r1, #24]
{
   12f1e:	b085      	sub	sp, #20
	return z_impl_k_sem_take(sem, timeout);
   12f20:	f04f 33ff 	mov.w	r3, #4294967295
   12f24:	f04f 32ff 	mov.w	r2, #4294967295
   12f28:	4849      	ldr	r0, [pc, #292]	; (13050 <send_frag+0x140>)
   12f2a:	f00c f95b 	bl	1f1e4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   12f2e:	7b63      	ldrb	r3, [r4, #13]
   12f30:	2b07      	cmp	r3, #7
   12f32:	f040 8081 	bne.w	13038 <send_frag+0x128>
	__asm__ volatile(
   12f36:	f04f 0320 	mov.w	r3, #32
   12f3a:	f3ef 8211 	mrs	r2, BASEPRI
   12f3e:	f383 8812 	msr	BASEPRI_MAX, r3
   12f42:	f3bf 8f6f 	isb	sy
	if (tx) {
   12f46:	2d00      	cmp	r5, #0
   12f48:	d049      	beq.n	12fde <send_frag+0xce>
	parent->next = child;
   12f4a:	2300      	movs	r3, #0
   12f4c:	602b      	str	r3, [r5, #0]
	return list->tail;
   12f4e:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   12f50:	2b00      	cmp	r3, #0
   12f52:	d141      	bne.n	12fd8 <send_frag+0xc8>
	list->head = node;
   12f54:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   12f58:	f382 8811 	msr	BASEPRI, r2
   12f5c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   12f60:	2104      	movs	r1, #4
   12f62:	f106 000c 	add.w	r0, r6, #12
   12f66:	f005 fc37 	bl	187d8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   12f6a:	8823      	ldrh	r3, [r4, #0]
   12f6c:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   12f70:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   12f74:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   12f76:	8a33      	ldrh	r3, [r6, #16]
   12f78:	3b04      	subs	r3, #4
   12f7a:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12f7c:	2302      	movs	r3, #2
	return bt_send(buf);
   12f7e:	4630      	mov	r0, r6
   12f80:	7633      	strb	r3, [r6, #24]
   12f82:	f7fe fa9b 	bl	114bc <bt_send>
	if (err) {
   12f86:	2800      	cmp	r0, #0
   12f88:	d060      	beq.n	1304c <send_frag+0x13c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   12f8a:	4b32      	ldr	r3, [pc, #200]	; (13054 <send_frag+0x144>)
   12f8c:	9003      	str	r0, [sp, #12]
   12f8e:	9302      	str	r3, [sp, #8]
   12f90:	2300      	movs	r3, #0
   12f92:	2201      	movs	r2, #1
   12f94:	4618      	mov	r0, r3
   12f96:	e9cd 3300 	strd	r3, r3, [sp]
   12f9a:	492f      	ldr	r1, [pc, #188]	; (13058 <send_frag+0x148>)
   12f9c:	f012 fb54 	bl	25648 <z_log_msg_runtime_create.constprop.0>
	__asm__ volatile(
   12fa0:	f04f 0320 	mov.w	r3, #32
   12fa4:	f3ef 8711 	mrs	r7, BASEPRI
   12fa8:	f383 8812 	msr	BASEPRI_MAX, r3
   12fac:	f3bf 8f6f 	isb	sy
		if (tx) {
   12fb0:	b315      	cbz	r5, 12ff8 <send_frag+0xe8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   12fb2:	4629      	mov	r1, r5
   12fb4:	f104 0014 	add.w	r0, r4, #20
   12fb8:	f012 fb20 	bl	255fc <sys_slist_find_and_remove>
	__asm__ volatile(
   12fbc:	f387 8811 	msr	BASEPRI, r7
   12fc0:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   12fc4:	4822      	ldr	r0, [pc, #136]	; (13050 <send_frag+0x140>)
   12fc6:	f00c f8c9 	bl	1f15c <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   12fca:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   12fcc:	4629      	mov	r1, r5
   12fce:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   12fd0:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   12fd2:	f7ff ff77 	bl	12ec4 <conn_tx_destroy>
   12fd6:	e028      	b.n	1302a <send_frag+0x11a>
	parent->next = child;
   12fd8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   12fda:	61a5      	str	r5, [r4, #24]
}
   12fdc:	e7bc      	b.n	12f58 <send_frag+0x48>
	return list->tail;
   12fde:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   12fe0:	b133      	cbz	r3, 12ff0 <send_frag+0xe0>
			pending_no_cb = &tail_tx->pending_no_cb;
   12fe2:	f103 080c 	add.w	r8, r3, #12
   12fe6:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   12fe8:	3301      	adds	r3, #1
   12fea:	f8c8 3000 	str.w	r3, [r8]
   12fee:	e7b3      	b.n	12f58 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   12ff0:	69e3      	ldr	r3, [r4, #28]
   12ff2:	f104 081c 	add.w	r8, r4, #28
   12ff6:	e7f7      	b.n	12fe8 <send_frag+0xd8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   12ff8:	f8d8 2000 	ldr.w	r2, [r8]
   12ffc:	b95a      	cbnz	r2, 13016 <send_frag+0x106>
   12ffe:	4917      	ldr	r1, [pc, #92]	; (1305c <send_frag+0x14c>)
   13000:	4817      	ldr	r0, [pc, #92]	; (13060 <send_frag+0x150>)
   13002:	f240 2327 	movw	r3, #551	; 0x227
   13006:	4a17      	ldr	r2, [pc, #92]	; (13064 <send_frag+0x154>)
   13008:	f011 f80b 	bl	24022 <assert_print>
   1300c:	f240 2127 	movw	r1, #551	; 0x227
   13010:	4814      	ldr	r0, [pc, #80]	; (13064 <send_frag+0x154>)
   13012:	f010 ffff 	bl	24014 <assert_post_action>
			(*pending_no_cb)--;
   13016:	3a01      	subs	r2, #1
   13018:	f8c8 2000 	str.w	r2, [r8]
   1301c:	f387 8811 	msr	BASEPRI, r7
   13020:	f3bf 8f6f 	isb	sy
   13024:	480a      	ldr	r0, [pc, #40]	; (13050 <send_frag+0x140>)
   13026:	f00c f899 	bl	1f15c <z_impl_k_sem_give>
	if (always_consume) {
   1302a:	f1b9 0f00 	cmp.w	r9, #0
   1302e:	d109      	bne.n	13044 <send_frag+0x134>
	return false;
   13030:	2000      	movs	r0, #0
}
   13032:	b005      	add	sp, #20
   13034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13038:	4805      	ldr	r0, [pc, #20]	; (13050 <send_frag+0x140>)
   1303a:	f00c f88f 	bl	1f15c <z_impl_k_sem_give>
	if (tx) {
   1303e:	2d00      	cmp	r5, #0
   13040:	d1c3      	bne.n	12fca <send_frag+0xba>
   13042:	e7f2      	b.n	1302a <send_frag+0x11a>
		net_buf_unref(buf);
   13044:	4630      	mov	r0, r6
   13046:	f005 fb01 	bl	1864c <net_buf_unref>
   1304a:	e7f1      	b.n	13030 <send_frag+0x120>
	return true;
   1304c:	2001      	movs	r0, #1
   1304e:	e7f0      	b.n	13032 <send_frag+0x122>
   13050:	20008100 	.word	0x20008100
   13054:	0002c70d 	.word	0x0002c70d
   13058:	000296a4 	.word	0x000296a4
   1305c:	0002cf2c 	.word	0x0002cf2c
   13060:	0002a669 	.word	0x0002a669
   13064:	0002cede 	.word	0x0002cede

00013068 <bt_conn_get_pkts>:
}
   13068:	4800      	ldr	r0, [pc, #0]	; (1306c <bt_conn_get_pkts+0x4>)
   1306a:	4770      	bx	lr
   1306c:	20008100 	.word	0x20008100

00013070 <bt_conn_new>:
{
   13070:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   13072:	2200      	movs	r2, #0
   13074:	4604      	mov	r4, r0
   13076:	428a      	cmp	r2, r1
   13078:	d102      	bne.n	13080 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1307a:	2400      	movs	r4, #0
}
   1307c:	4620      	mov	r0, r4
   1307e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13080:	2001      	movs	r0, #1
   13082:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   13086:	e8d3 5fef 	ldaex	r5, [r3]
   1308a:	2d00      	cmp	r5, #0
   1308c:	d104      	bne.n	13098 <bt_conn_new+0x28>
   1308e:	e8c3 0fec 	stlex	ip, r0, [r3]
   13092:	f1bc 0f00 	cmp.w	ip, #0
   13096:	d1f6      	bne.n	13086 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13098:	d002      	beq.n	130a0 <bt_conn_new+0x30>
   1309a:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   1309c:	4402      	add	r2, r0
   1309e:	e7ea      	b.n	13076 <bt_conn_new+0x6>
	if (!conn) {
   130a0:	2c00      	cmp	r4, #0
   130a2:	d0ea      	beq.n	1307a <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   130a4:	22c4      	movs	r2, #196	; 0xc4
   130a6:	2100      	movs	r1, #0
   130a8:	4620      	mov	r0, r4
   130aa:	f015 fbb1 	bl	28810 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   130ae:	f104 0060 	add.w	r0, r4, #96	; 0x60
   130b2:	4904      	ldr	r1, [pc, #16]	; (130c4 <bt_conn_new+0x54>)
   130b4:	f00c fcd6 	bl	1fa64 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   130b8:	4903      	ldr	r1, [pc, #12]	; (130c8 <bt_conn_new+0x58>)
   130ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
   130be:	f00c faf5 	bl	1f6ac <k_work_init>
	return conn;
   130c2:	e7db      	b.n	1307c <bt_conn_new+0xc>
   130c4:	00013add 	.word	0x00013add
   130c8:	00025667 	.word	0x00025667

000130cc <conn_cleanup>:
{
   130cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130d0:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   130d2:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   130d4:	f104 0638 	add.w	r6, r4, #56	; 0x38
   130d8:	2300      	movs	r3, #0
   130da:	2200      	movs	r2, #0
   130dc:	4630      	mov	r0, r6
   130de:	f013 fe10 	bl	26d02 <net_buf_get>
   130e2:	4603      	mov	r3, r0
   130e4:	b980      	cbnz	r0, 13108 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   130e6:	6963      	ldr	r3, [r4, #20]
   130e8:	b1cb      	cbz	r3, 1311e <conn_cleanup+0x52>
   130ea:	4918      	ldr	r1, [pc, #96]	; (1314c <conn_cleanup+0x80>)
   130ec:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   130f0:	4a17      	ldr	r2, [pc, #92]	; (13150 <conn_cleanup+0x84>)
   130f2:	4818      	ldr	r0, [pc, #96]	; (13154 <conn_cleanup+0x88>)
   130f4:	f010 ff95 	bl	24022 <assert_print>
   130f8:	4817      	ldr	r0, [pc, #92]	; (13158 <conn_cleanup+0x8c>)
   130fa:	f010 ff92 	bl	24022 <assert_print>
   130fe:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   13102:	4813      	ldr	r0, [pc, #76]	; (13150 <conn_cleanup+0x84>)
   13104:	f010 ff86 	bl	24014 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   13108:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   1310a:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   1310c:	f005 fa9e 	bl	1864c <net_buf_unref>
		if (tx) {
   13110:	2d00      	cmp	r5, #0
   13112:	d0e1      	beq.n	130d8 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   13114:	4629      	mov	r1, r5
   13116:	4620      	mov	r0, r4
   13118:	f7ff fed4 	bl	12ec4 <conn_tx_destroy>
   1311c:	e7da      	b.n	130d4 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1311e:	69e3      	ldr	r3, [r4, #28]
   13120:	b14b      	cbz	r3, 13136 <conn_cleanup+0x6a>
   13122:	490e      	ldr	r1, [pc, #56]	; (1315c <conn_cleanup+0x90>)
   13124:	f240 23b5 	movw	r3, #693	; 0x2b5
   13128:	4a09      	ldr	r2, [pc, #36]	; (13150 <conn_cleanup+0x84>)
   1312a:	480a      	ldr	r0, [pc, #40]	; (13154 <conn_cleanup+0x88>)
   1312c:	f010 ff79 	bl	24022 <assert_print>
   13130:	f240 21b5 	movw	r1, #693	; 0x2b5
   13134:	e7e5      	b.n	13102 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   13136:	4620      	mov	r0, r4
   13138:	f012 fa98 	bl	2566c <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1313c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13140:	2200      	movs	r2, #0
}
   13142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   13146:	2300      	movs	r3, #0
   13148:	f00c bda8 	b.w	1fc9c <k_work_reschedule>
   1314c:	0002cf3f 	.word	0x0002cf3f
   13150:	0002cede 	.word	0x0002cede
   13154:	0002a669 	.word	0x0002a669
   13158:	0002cf65 	.word	0x0002cf65
   1315c:	0002cf7a 	.word	0x0002cf7a

00013160 <bt_conn_recv>:
{
   13160:	b5f0      	push	{r4, r5, r6, r7, lr}
   13162:	4616      	mov	r6, r2
   13164:	b087      	sub	sp, #28
   13166:	4604      	mov	r4, r0
   13168:	460d      	mov	r5, r1
	tx_notify(conn);
   1316a:	f7ff fe7b 	bl	12e64 <tx_notify>
	switch (flags) {
   1316e:	2e01      	cmp	r6, #1
   13170:	d02e      	beq.n	131d0 <bt_conn_recv+0x70>
   13172:	2e02      	cmp	r6, #2
   13174:	d165      	bne.n	13242 <bt_conn_recv+0xe2>
		if (conn->rx) {
   13176:	6923      	ldr	r3, [r4, #16]
   13178:	b163      	cbz	r3, 13194 <bt_conn_recv+0x34>
			LOG_ERR("Unexpected first L2CAP frame");
   1317a:	4b3d      	ldr	r3, [pc, #244]	; (13270 <bt_conn_recv+0x110>)
   1317c:	2201      	movs	r2, #1
   1317e:	9302      	str	r3, [sp, #8]
   13180:	2300      	movs	r3, #0
   13182:	493c      	ldr	r1, [pc, #240]	; (13274 <bt_conn_recv+0x114>)
   13184:	4618      	mov	r0, r3
   13186:	e9cd 3300 	strd	r3, r3, [sp]
   1318a:	f012 fa5d 	bl	25648 <z_log_msg_runtime_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   1318e:	4620      	mov	r0, r4
   13190:	f012 fa6c 	bl	2566c <bt_conn_reset_rx_state>
		conn->rx = buf;
   13194:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   13196:	6921      	ldr	r1, [r4, #16]
   13198:	8a0a      	ldrh	r2, [r1, #16]
   1319a:	2a01      	cmp	r2, #1
   1319c:	d966      	bls.n	1326c <bt_conn_recv+0x10c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1319e:	68cb      	ldr	r3, [r1, #12]
   131a0:	881b      	ldrh	r3, [r3, #0]
   131a2:	3304      	adds	r3, #4
   131a4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   131a6:	429a      	cmp	r2, r3
   131a8:	d360      	bcc.n	1326c <bt_conn_recv+0x10c>
	if (conn->rx->len > acl_total_len) {
   131aa:	d956      	bls.n	1325a <bt_conn_recv+0xfa>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   131ac:	e9cd 2303 	strd	r2, r3, [sp, #12]
   131b0:	4b31      	ldr	r3, [pc, #196]	; (13278 <bt_conn_recv+0x118>)
   131b2:	2201      	movs	r2, #1
   131b4:	9302      	str	r3, [sp, #8]
   131b6:	2300      	movs	r3, #0
   131b8:	492e      	ldr	r1, [pc, #184]	; (13274 <bt_conn_recv+0x114>)
   131ba:	4618      	mov	r0, r3
   131bc:	e9cd 3300 	strd	r3, r3, [sp]
   131c0:	f012 fa42 	bl	25648 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   131c4:	4620      	mov	r0, r4
}
   131c6:	b007      	add	sp, #28
   131c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_reset_rx_state(conn);
   131cc:	f012 ba4e 	b.w	2566c <bt_conn_reset_rx_state>
		if (!conn->rx) {
   131d0:	6923      	ldr	r3, [r4, #16]
   131d2:	b963      	cbnz	r3, 131ee <bt_conn_recv+0x8e>
			LOG_ERR("Unexpected L2CAP continuation");
   131d4:	4a29      	ldr	r2, [pc, #164]	; (1327c <bt_conn_recv+0x11c>)
   131d6:	4618      	mov	r0, r3
   131d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   131dc:	4925      	ldr	r1, [pc, #148]	; (13274 <bt_conn_recv+0x114>)
   131de:	4632      	mov	r2, r6
   131e0:	9300      	str	r3, [sp, #0]
   131e2:	f012 fa31 	bl	25648 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   131e6:	4620      	mov	r0, r4
   131e8:	f012 fa40 	bl	2566c <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   131ec:	e001      	b.n	131f2 <bt_conn_recv+0x92>
		if (!buf->len) {
   131ee:	8a2f      	ldrh	r7, [r5, #16]
   131f0:	b92f      	cbnz	r7, 131fe <bt_conn_recv+0x9e>
			net_buf_unref(buf);
   131f2:	4628      	mov	r0, r5
}
   131f4:	b007      	add	sp, #28
   131f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			net_buf_unref(buf);
   131fa:	f005 ba27 	b.w	1864c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   131fe:	f103 000c 	add.w	r0, r3, #12
   13202:	f013 fd93 	bl	26d2c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   13206:	4287      	cmp	r7, r0
   13208:	d911      	bls.n	1322e <bt_conn_recv+0xce>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1320a:	2700      	movs	r7, #0
   1320c:	4b1c      	ldr	r3, [pc, #112]	; (13280 <bt_conn_recv+0x120>)
   1320e:	4632      	mov	r2, r6
   13210:	4638      	mov	r0, r7
   13212:	4918      	ldr	r1, [pc, #96]	; (13274 <bt_conn_recv+0x114>)
   13214:	9302      	str	r3, [sp, #8]
   13216:	e9cd 7700 	strd	r7, r7, [sp]
   1321a:	463b      	mov	r3, r7
   1321c:	f012 fa14 	bl	25648 <z_log_msg_runtime_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   13220:	463a      	mov	r2, r7
   13222:	4620      	mov	r0, r4
   13224:	6921      	ldr	r1, [r4, #16]
   13226:	f000 fefd 	bl	14024 <bt_l2cap_recv>
			conn->rx = NULL;
   1322a:	6127      	str	r7, [r4, #16]
   1322c:	e7e1      	b.n	131f2 <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1322e:	6920      	ldr	r0, [r4, #16]
   13230:	8a2a      	ldrh	r2, [r5, #16]
   13232:	68e9      	ldr	r1, [r5, #12]
   13234:	300c      	adds	r0, #12
   13236:	f013 fd81 	bl	26d3c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1323a:	4628      	mov	r0, r5
   1323c:	f005 fa06 	bl	1864c <net_buf_unref>
		break;
   13240:	e7a9      	b.n	13196 <bt_conn_recv+0x36>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   13242:	4b10      	ldr	r3, [pc, #64]	; (13284 <bt_conn_recv+0x124>)
   13244:	2201      	movs	r2, #1
   13246:	9302      	str	r3, [sp, #8]
   13248:	2300      	movs	r3, #0
   1324a:	490a      	ldr	r1, [pc, #40]	; (13274 <bt_conn_recv+0x114>)
   1324c:	4618      	mov	r0, r3
   1324e:	e9cd 3300 	strd	r3, r3, [sp]
	switch (flags) {
   13252:	9603      	str	r6, [sp, #12]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   13254:	f012 f9f8 	bl	25648 <z_log_msg_runtime_create.constprop.0>
   13258:	e7c5      	b.n	131e6 <bt_conn_recv+0x86>
	conn->rx = NULL;
   1325a:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   1325c:	2201      	movs	r2, #1
   1325e:	4620      	mov	r0, r4
	conn->rx = NULL;
   13260:	6123      	str	r3, [r4, #16]
}
   13262:	b007      	add	sp, #28
   13264:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf, true);
   13268:	f000 bedc 	b.w	14024 <bt_l2cap_recv>
}
   1326c:	b007      	add	sp, #28
   1326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13270:	0002cf93 	.word	0x0002cf93
   13274:	000296a4 	.word	0x000296a4
   13278:	0002d013 	.word	0x0002d013
   1327c:	0002cfb0 	.word	0x0002cfb0
   13280:	0002cfce 	.word	0x0002cfce
   13284:	0002cff5 	.word	0x0002cff5

00013288 <bt_conn_send_cb>:
{
   13288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1328c:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1328e:	7b43      	ldrb	r3, [r0, #13]
{
   13290:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   13292:	2b07      	cmp	r3, #7
{
   13294:	4688      	mov	r8, r1
   13296:	4617      	mov	r7, r2
   13298:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
   1329a:	d00c      	beq.n	132b6 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   1329c:	4b28      	ldr	r3, [pc, #160]	; (13340 <bt_conn_send_cb+0xb8>)
   1329e:	2201      	movs	r2, #1
   132a0:	9302      	str	r3, [sp, #8]
   132a2:	2300      	movs	r3, #0
   132a4:	4927      	ldr	r1, [pc, #156]	; (13344 <bt_conn_send_cb+0xbc>)
   132a6:	4618      	mov	r0, r3
   132a8:	e9cd 3300 	strd	r3, r3, [sp]
   132ac:	f012 f9cc 	bl	25648 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   132b0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   132b4:	e01c      	b.n	132f0 <bt_conn_send_cb+0x68>
	if (cb) {
   132b6:	2a00      	cmp	r2, #0
   132b8:	d03f      	beq.n	1333a <bt_conn_send_cb+0xb2>
	return z_impl_z_current_get();
   132ba:	f00d fe77 	bl	20fac <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   132be:	4b22      	ldr	r3, [pc, #136]	; (13348 <bt_conn_send_cb+0xc0>)
   132c0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   132c2:	4822      	ldr	r0, [pc, #136]	; (1334c <bt_conn_send_cb+0xc4>)
   132c4:	bf07      	ittee	eq
   132c6:	2200      	moveq	r2, #0
   132c8:	2300      	moveq	r3, #0
   132ca:	f04f 32ff 	movne.w	r2, #4294967295
   132ce:	f04f 33ff 	movne.w	r3, #4294967295
   132d2:	f00b fed9 	bl	1f088 <z_impl_k_queue_get>
   132d6:	4604      	mov	r4, r0
		if (!tx) {
   132d8:	b968      	cbnz	r0, 132f6 <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   132da:	4b1d      	ldr	r3, [pc, #116]	; (13350 <bt_conn_send_cb+0xc8>)
   132dc:	9000      	str	r0, [sp, #0]
   132de:	e9cd 0301 	strd	r0, r3, [sp, #4]
   132e2:	2201      	movs	r2, #1
   132e4:	4603      	mov	r3, r0
   132e6:	4917      	ldr	r1, [pc, #92]	; (13344 <bt_conn_send_cb+0xbc>)
   132e8:	f012 f9ae 	bl	25648 <z_log_msg_runtime_create.constprop.0>
			return -ENOBUFS;
   132ec:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   132f0:	b005      	add	sp, #20
   132f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   132f6:	7b73      	ldrb	r3, [r6, #13]
   132f8:	2500      	movs	r5, #0
   132fa:	2b07      	cmp	r3, #7
   132fc:	d011      	beq.n	13322 <bt_conn_send_cb+0x9a>
			LOG_WRN("Disconnected while allocating context");
   132fe:	4b15      	ldr	r3, [pc, #84]	; (13354 <bt_conn_send_cb+0xcc>)
   13300:	4628      	mov	r0, r5
   13302:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13306:	2202      	movs	r2, #2
   13308:	462b      	mov	r3, r5
   1330a:	490e      	ldr	r1, [pc, #56]	; (13344 <bt_conn_send_cb+0xbc>)
   1330c:	9500      	str	r5, [sp, #0]
   1330e:	f012 f99b 	bl	25648 <z_log_msg_runtime_create.constprop.0>
	k_fifo_put(&free_tx, tx);
   13312:	4621      	mov	r1, r4
	tx->user_data = NULL;
   13314:	e9c4 5501 	strd	r5, r5, [r4, #4]
	k_fifo_put(&free_tx, tx);
   13318:	480c      	ldr	r0, [pc, #48]	; (1334c <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   1331a:	60e5      	str	r5, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1331c:	f015 f888 	bl	28430 <k_queue_append>
}
   13320:	e7c6      	b.n	132b0 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   13322:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   13326:	60c5      	str	r5, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   13328:	f106 0038 	add.w	r0, r6, #56	; 0x38
   1332c:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   1332e:	f8c8 4018 	str.w	r4, [r8, #24]
	net_buf_put(&conn->tx_queue, buf);
   13332:	f005 f965 	bl	18600 <net_buf_put>
	return 0;
   13336:	2000      	movs	r0, #0
   13338:	e7da      	b.n	132f0 <bt_conn_send_cb+0x68>
   1333a:	4614      	mov	r4, r2
   1333c:	e7f4      	b.n	13328 <bt_conn_send_cb+0xa0>
   1333e:	bf00      	nop
   13340:	0002d02e 	.word	0x0002d02e
   13344:	000296a4 	.word	0x000296a4
   13348:	20009c78 	.word	0x20009c78
   1334c:	20008bd0 	.word	0x20008bd0
   13350:	0002d03d 	.word	0x0002d03d
   13354:	0002d05b 	.word	0x0002d05b

00013358 <bt_conn_prepare_events>:
{
   13358:	b570      	push	{r4, r5, r6, lr}
   1335a:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   1335c:	4817      	ldr	r0, [pc, #92]	; (133bc <bt_conn_prepare_events+0x64>)
   1335e:	f015 fa0f 	bl	28780 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   13362:	2200      	movs	r2, #0
   13364:	2101      	movs	r1, #1
   13366:	4620      	mov	r0, r4
   13368:	4b14      	ldr	r3, [pc, #80]	; (133bc <bt_conn_prepare_events+0x64>)
   1336a:	f00e fd27 	bl	21dbc <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1336e:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13372:	4b13      	ldr	r3, [pc, #76]	; (133c0 <bt_conn_prepare_events+0x68>)
   13374:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   13378:	b90a      	cbnz	r2, 1337e <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1337a:	2001      	movs	r0, #1
}
   1337c:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1337e:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   13382:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   13386:	b953      	cbnz	r3, 1339e <bt_conn_prepare_events+0x46>
   13388:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1338c:	1d28      	adds	r0, r5, #4
   1338e:	f012 f950 	bl	25632 <atomic_and>
   13392:	0643      	lsls	r3, r0, #25
   13394:	d503      	bpl.n	1339e <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   13396:	4628      	mov	r0, r5
   13398:	f7ff fe98 	bl	130cc <conn_cleanup>
		return -ENOTCONN;
   1339c:	e7ed      	b.n	1337a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1339e:	7b6b      	ldrb	r3, [r5, #13]
   133a0:	2b07      	cmp	r3, #7
   133a2:	d1ea      	bne.n	1337a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   133a4:	4630      	mov	r0, r6
   133a6:	4b07      	ldr	r3, [pc, #28]	; (133c4 <bt_conn_prepare_events+0x6c>)
   133a8:	2200      	movs	r2, #0
   133aa:	2104      	movs	r1, #4
   133ac:	f00e fd06 	bl	21dbc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   133b0:	2301      	movs	r3, #1
			ev_count++;
   133b2:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   133b4:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   133b8:	e7e0      	b.n	1337c <bt_conn_prepare_events+0x24>
   133ba:	bf00      	nop
   133bc:	200084bc 	.word	0x200084bc
   133c0:	200098bc 	.word	0x200098bc
   133c4:	20009830 	.word	0x20009830

000133c8 <bt_conn_ref>:
{
   133c8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   133ca:	b180      	cbz	r0, 133ee <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   133cc:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   133d0:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   133d4:	b1bb      	cbz	r3, 13406 <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   133d6:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   133d8:	e8d2 4fef 	ldaex	r4, [r2]
   133dc:	429c      	cmp	r4, r3
   133de:	d104      	bne.n	133ea <bt_conn_ref+0x22>
   133e0:	e8c2 1fec 	stlex	ip, r1, [r2]
   133e4:	f1bc 0f00 	cmp.w	ip, #0
   133e8:	d1f6      	bne.n	133d8 <bt_conn_ref+0x10>
   133ea:	d1f1      	bne.n	133d0 <bt_conn_ref+0x8>
}
   133ec:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   133ee:	4907      	ldr	r1, [pc, #28]	; (1340c <bt_conn_ref+0x44>)
   133f0:	4807      	ldr	r0, [pc, #28]	; (13410 <bt_conn_ref+0x48>)
   133f2:	f240 437c 	movw	r3, #1148	; 0x47c
   133f6:	4a07      	ldr	r2, [pc, #28]	; (13414 <bt_conn_ref+0x4c>)
   133f8:	f010 fe13 	bl	24022 <assert_print>
   133fc:	f240 417c 	movw	r1, #1148	; 0x47c
   13400:	4804      	ldr	r0, [pc, #16]	; (13414 <bt_conn_ref+0x4c>)
   13402:	f010 fe07 	bl	24014 <assert_post_action>
			return NULL;
   13406:	4618      	mov	r0, r3
   13408:	e7f0      	b.n	133ec <bt_conn_ref+0x24>
   1340a:	bf00      	nop
   1340c:	0002c77f 	.word	0x0002c77f
   13410:	0002a669 	.word	0x0002a669
   13414:	0002cede 	.word	0x0002cede

00013418 <bt_conn_unref>:
{
   13418:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   1341a:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1341e:	e8d3 2fef 	ldaex	r2, [r3]
   13422:	1e51      	subs	r1, r2, #1
   13424:	e8c3 1fe4 	stlex	r4, r1, [r3]
   13428:	2c00      	cmp	r4, #0
   1342a:	d1f8      	bne.n	1341e <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   1342c:	2a00      	cmp	r2, #0
   1342e:	dc0e      	bgt.n	1344e <bt_conn_unref+0x36>
   13430:	490d      	ldr	r1, [pc, #52]	; (13468 <bt_conn_unref+0x50>)
   13432:	f44f 6393 	mov.w	r3, #1176	; 0x498
   13436:	4a0d      	ldr	r2, [pc, #52]	; (1346c <bt_conn_unref+0x54>)
   13438:	480d      	ldr	r0, [pc, #52]	; (13470 <bt_conn_unref+0x58>)
   1343a:	f010 fdf2 	bl	24022 <assert_print>
   1343e:	480d      	ldr	r0, [pc, #52]	; (13474 <bt_conn_unref+0x5c>)
   13440:	f010 fdef 	bl	24022 <assert_print>
   13444:	f44f 6193 	mov.w	r1, #1176	; 0x498
   13448:	4808      	ldr	r0, [pc, #32]	; (1346c <bt_conn_unref+0x54>)
   1344a:	f010 fde3 	bl	24014 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1344e:	f240 1201 	movw	r2, #257	; 0x101
   13452:	8841      	ldrh	r1, [r0, #2]
   13454:	4291      	cmp	r1, r2
   13456:	d106      	bne.n	13466 <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13458:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   1345c:	b91b      	cbnz	r3, 13466 <bt_conn_unref+0x4e>
}
   1345e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   13462:	f7ff baa9 	b.w	129b8 <bt_le_adv_resume>
}
   13466:	bd10      	pop	{r4, pc}
   13468:	0002d081 	.word	0x0002d081
   1346c:	0002cede 	.word	0x0002cede
   13470:	0002a669 	.word	0x0002a669
   13474:	0002d089 	.word	0x0002d089

00013478 <bt_conn_lookup_handle>:
{
   13478:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1347a:	2101      	movs	r1, #1
   1347c:	4801      	ldr	r0, [pc, #4]	; (13484 <bt_conn_lookup_handle+0xc>)
   1347e:	f012 b8fe 	b.w	2567e <conn_lookup_handle>
   13482:	bf00      	nop
   13484:	200097f8 	.word	0x200097f8

00013488 <bt_conn_set_state>:
{
   13488:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == state) {
   1348a:	7b46      	ldrb	r6, [r0, #13]
{
   1348c:	4604      	mov	r4, r0
	if (conn->state == state) {
   1348e:	428e      	cmp	r6, r1
{
   13490:	460d      	mov	r5, r1
	if (conn->state == state) {
   13492:	d111      	bne.n	134b8 <bt_conn_set_state+0x30>
	switch (state) {
   13494:	2e08      	cmp	r6, #8
   13496:	bf96      	itet	ls
   13498:	4b65      	ldrls	r3, [pc, #404]	; (13630 <bt_conn_set_state+0x1a8>)
	if (conn->state == state) {
   1349a:	4b66      	ldrhi	r3, [pc, #408]	; (13634 <bt_conn_set_state+0x1ac>)
   1349c:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   134a0:	9303      	str	r3, [sp, #12]
   134a2:	4b65      	ldr	r3, [pc, #404]	; (13638 <bt_conn_set_state+0x1b0>)
		LOG_WRN("no valid (%u) state was set", state);
   134a4:	9302      	str	r3, [sp, #8]
   134a6:	2300      	movs	r3, #0
   134a8:	2202      	movs	r2, #2
   134aa:	4618      	mov	r0, r3
   134ac:	e9cd 3300 	strd	r3, r3, [sp]
   134b0:	4962      	ldr	r1, [pc, #392]	; (1363c <bt_conn_set_state+0x1b4>)
   134b2:	f012 f8c9 	bl	25648 <z_log_msg_runtime_create.constprop.0>
   134b6:	e098      	b.n	135ea <bt_conn_set_state+0x162>
	conn->state = state;
   134b8:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   134ba:	b926      	cbnz	r6, 134c6 <bt_conn_set_state+0x3e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   134bc:	7883      	ldrb	r3, [r0, #2]
   134be:	2b08      	cmp	r3, #8
   134c0:	d001      	beq.n	134c6 <bt_conn_set_state+0x3e>
			bt_conn_ref(conn);
   134c2:	f7ff ff81 	bl	133c8 <bt_conn_ref>
	switch (conn->state) {
   134c6:	7b63      	ldrb	r3, [r4, #13]
   134c8:	2b08      	cmp	r3, #8
   134ca:	f200 80ad 	bhi.w	13628 <bt_conn_set_state+0x1a0>
   134ce:	e8df f003 	tbb	[pc, r3]
   134d2:	053a      	.short	0x053a
   134d4:	8c8c8c8c 	.word	0x8c8c8c8c
   134d8:	1c8c      	.short	0x1c8c
   134da:	8c          	.byte	0x8c
   134db:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   134dc:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   134de:	4d58      	ldr	r5, [pc, #352]	; (13640 <bt_conn_set_state+0x1b8>)
	__asm__ volatile(
   134e0:	f04f 0220 	mov.w	r2, #32
   134e4:	f3ef 8311 	mrs	r3, BASEPRI
   134e8:	f382 8812 	msr	BASEPRI_MAX, r2
   134ec:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   134f0:	69e2      	ldr	r2, [r4, #28]
   134f2:	2a00      	cmp	r2, #0
   134f4:	d073      	beq.n	135de <bt_conn_set_state+0x156>
			conn->pending_no_cb--;
   134f6:	3a01      	subs	r2, #1
   134f8:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   134fa:	f383 8811 	msr	BASEPRI, r3
   134fe:	f3bf 8f6f 	isb	sy
   13502:	4628      	mov	r0, r5
   13504:	f00b fe2a 	bl	1f15c <z_impl_k_sem_give>
}
   13508:	e7ea      	b.n	134e0 <bt_conn_set_state+0x58>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1350a:	78a3      	ldrb	r3, [r4, #2]
   1350c:	2b04      	cmp	r3, #4
   1350e:	d06c      	beq.n	135ea <bt_conn_set_state+0x162>
	z_impl_k_queue_init(queue);
   13510:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13514:	f014 ff7f 	bl	28416 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   13518:	2100      	movs	r1, #0
   1351a:	484a      	ldr	r0, [pc, #296]	; (13644 <bt_conn_set_state+0x1bc>)
   1351c:	f00e fd6c 	bl	21ff8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   13520:	2300      	movs	r3, #0
	list->tail = NULL;
   13522:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13526:	78e3      	ldrb	r3, [r4, #3]
   13528:	2b01      	cmp	r3, #1
   1352a:	d15e      	bne.n	135ea <bt_conn_set_state+0x162>
			conn->le.conn_param_retry_countdown =
   1352c:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   1352e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   13532:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   13536:	2300      	movs	r3, #0
   13538:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   1353c:	b004      	add	sp, #16
   1353e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   13542:	f00c bb31 	b.w	1fba8 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   13546:	78a3      	ldrb	r3, [r4, #2]
   13548:	2b04      	cmp	r3, #4
   1354a:	d105      	bne.n	13558 <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   1354c:	4620      	mov	r0, r4
}
   1354e:	b004      	add	sp, #16
   13550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   13554:	f7ff bf60 	b.w	13418 <bt_conn_unref>
		switch (old_state) {
   13558:	2e08      	cmp	r6, #8
   1355a:	d846      	bhi.n	135ea <bt_conn_set_state+0x162>
   1355c:	a301      	add	r3, pc, #4	; (adr r3, 13564 <bt_conn_set_state+0xdc>)
   1355e:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   13562:	bf00      	nop
   13564:	000135d9 	.word	0x000135d9
   13568:	00013589 	.word	0x00013589
   1356c:	000135cb 	.word	0x000135cb
   13570:	0001354d 	.word	0x0001354d
   13574:	0001354d 	.word	0x0001354d
   13578:	000135cb 	.word	0x000135cb
   1357c:	000135cb 	.word	0x000135cb
   13580:	000135eb 	.word	0x000135eb
   13584:	000135d9 	.word	0x000135d9
			tx_notify(conn);
   13588:	4620      	mov	r0, r4
   1358a:	f7ff fc6b 	bl	12e64 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1358e:	78a3      	ldrb	r3, [r4, #2]
   13590:	2b01      	cmp	r3, #1
   13592:	d10a      	bne.n	135aa <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   13594:	f104 0560 	add.w	r5, r4, #96	; 0x60
   13598:	4628      	mov	r0, r5
   1359a:	f014 ffd2 	bl	28542 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1359e:	f010 0f0c 	tst.w	r0, #12
   135a2:	d002      	beq.n	135aa <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   135a4:	4628      	mov	r0, r5
   135a6:	f00c fb7f 	bl	1fca8 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   135aa:	3404      	adds	r4, #4
   135ac:	e8d4 3fef 	ldaex	r3, [r4]
   135b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   135b4:	e8c4 3fe2 	stlex	r2, r3, [r4]
   135b8:	2a00      	cmp	r2, #0
   135ba:	d1f7      	bne.n	135ac <bt_conn_set_state+0x124>
   135bc:	2100      	movs	r1, #0
   135be:	4821      	ldr	r0, [pc, #132]	; (13644 <bt_conn_set_state+0x1bc>)
}
   135c0:	b004      	add	sp, #16
   135c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   135c6:	f00e bd17 	b.w	21ff8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   135ca:	7b23      	ldrb	r3, [r4, #12]
   135cc:	2b00      	cmp	r3, #0
   135ce:	d0bd      	beq.n	1354c <bt_conn_set_state+0xc4>
				notify_connected(conn);
   135d0:	4620      	mov	r0, r4
   135d2:	f7ff fc11 	bl	12df8 <notify_connected>
   135d6:	e7b9      	b.n	1354c <bt_conn_set_state+0xc4>
			LOG_WRN("Invalid (%u) old state", state);
   135d8:	4b1b      	ldr	r3, [pc, #108]	; (13648 <bt_conn_set_state+0x1c0>)
   135da:	9503      	str	r5, [sp, #12]
   135dc:	e762      	b.n	134a4 <bt_conn_set_state+0x1c>
	return list->head;
   135de:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   135e0:	b929      	cbnz	r1, 135ee <bt_conn_set_state+0x166>
   135e2:	f383 8811 	msr	BASEPRI, r3
   135e6:	f3bf 8f6f 	isb	sy
}
   135ea:	b004      	add	sp, #16
   135ec:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   135ee:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   135f0:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   135f2:	4281      	cmp	r1, r0
	list->tail = node;
   135f4:	bf08      	it	eq
   135f6:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   135f8:	6162      	str	r2, [r4, #20]
   135fa:	f383 8811 	msr	BASEPRI, r3
   135fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   13602:	f04f 0220 	mov.w	r2, #32
   13606:	f3ef 8311 	mrs	r3, BASEPRI
   1360a:	f382 8812 	msr	BASEPRI_MAX, r2
   1360e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   13612:	68ca      	ldr	r2, [r1, #12]
   13614:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   13616:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   13618:	f383 8811 	msr	BASEPRI, r3
   1361c:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   13620:	4620      	mov	r0, r4
   13622:	f7ff fc4f 	bl	12ec4 <conn_tx_destroy>
   13626:	e76c      	b.n	13502 <bt_conn_set_state+0x7a>
		LOG_WRN("no valid (%u) state was set", state);
   13628:	4b08      	ldr	r3, [pc, #32]	; (1364c <bt_conn_set_state+0x1c4>)
   1362a:	9503      	str	r5, [sp, #12]
   1362c:	e73a      	b.n	134a4 <bt_conn_set_state+0x1c>
   1362e:	bf00      	nop
   13630:	00029fec 	.word	0x00029fec
   13634:	0002d0a7 	.word	0x0002d0a7
   13638:	0002d0b1 	.word	0x0002d0b1
   1363c:	000296a4 	.word	0x000296a4
   13640:	20008100 	.word	0x20008100
   13644:	200084bc 	.word	0x200084bc
   13648:	0002d0c2 	.word	0x0002d0c2
   1364c:	0002d0d9 	.word	0x0002d0d9

00013650 <bt_conn_index>:
		index = conn - acl_conns;
   13650:	4a0c      	ldr	r2, [pc, #48]	; (13684 <bt_conn_index+0x34>)
{
   13652:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   13654:	490c      	ldr	r1, [pc, #48]	; (13688 <bt_conn_index+0x38>)
   13656:	1a83      	subs	r3, r0, r2
   13658:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1365a:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   1365c:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   13660:	d00e      	beq.n	13680 <bt_conn_index+0x30>
   13662:	490a      	ldr	r1, [pc, #40]	; (1368c <bt_conn_index+0x3c>)
   13664:	f240 43b6 	movw	r3, #1206	; 0x4b6
   13668:	4a09      	ldr	r2, [pc, #36]	; (13690 <bt_conn_index+0x40>)
   1366a:	480a      	ldr	r0, [pc, #40]	; (13694 <bt_conn_index+0x44>)
   1366c:	f010 fcd9 	bl	24022 <assert_print>
   13670:	4809      	ldr	r0, [pc, #36]	; (13698 <bt_conn_index+0x48>)
   13672:	f010 fcd6 	bl	24022 <assert_print>
   13676:	f240 41b6 	movw	r1, #1206	; 0x4b6
   1367a:	4805      	ldr	r0, [pc, #20]	; (13690 <bt_conn_index+0x40>)
   1367c:	f010 fcca 	bl	24014 <assert_post_action>
}
   13680:	b2d8      	uxtb	r0, r3
   13682:	bd08      	pop	{r3, pc}
   13684:	200097f8 	.word	0x200097f8
   13688:	c28f5c29 	.word	0xc28f5c29
   1368c:	0002d0f5 	.word	0x0002d0f5
   13690:	0002cede 	.word	0x0002cede
   13694:	0002a669 	.word	0x0002a669
   13698:	0002d1be 	.word	0x0002d1be

0001369c <bt_conn_create_pdu_timeout>:
{
   1369c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1369e:	b085      	sub	sp, #20
   136a0:	4604      	mov	r4, r0
   136a2:	460d      	mov	r5, r1
   136a4:	4617      	mov	r7, r2
   136a6:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   136a8:	f014 fe86 	bl	283b8 <k_is_in_isr>
   136ac:	b158      	cbz	r0, 136c6 <bt_conn_create_pdu_timeout+0x2a>
   136ae:	4914      	ldr	r1, [pc, #80]	; (13700 <bt_conn_create_pdu_timeout+0x64>)
   136b0:	4814      	ldr	r0, [pc, #80]	; (13704 <bt_conn_create_pdu_timeout+0x68>)
   136b2:	f240 43d2 	movw	r3, #1234	; 0x4d2
   136b6:	4a14      	ldr	r2, [pc, #80]	; (13708 <bt_conn_create_pdu_timeout+0x6c>)
   136b8:	f010 fcb3 	bl	24022 <assert_print>
   136bc:	f240 41d2 	movw	r1, #1234	; 0x4d2
   136c0:	4811      	ldr	r0, [pc, #68]	; (13708 <bt_conn_create_pdu_timeout+0x6c>)
   136c2:	f010 fca7 	bl	24014 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   136c6:	4911      	ldr	r1, [pc, #68]	; (1370c <bt_conn_create_pdu_timeout+0x70>)
   136c8:	463a      	mov	r2, r7
   136ca:	2c00      	cmp	r4, #0
   136cc:	bf14      	ite	ne
   136ce:	4620      	movne	r0, r4
   136d0:	4608      	moveq	r0, r1
   136d2:	4633      	mov	r3, r6
   136d4:	f013 fb10 	bl	26cf8 <net_buf_alloc_fixed>
	if (!buf) {
   136d8:	4604      	mov	r4, r0
   136da:	b958      	cbnz	r0, 136f4 <bt_conn_create_pdu_timeout+0x58>
		LOG_WRN("Unable to allocate buffer within timeout");
   136dc:	4b0c      	ldr	r3, [pc, #48]	; (13710 <bt_conn_create_pdu_timeout+0x74>)
   136de:	2202      	movs	r2, #2
   136e0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   136e4:	490b      	ldr	r1, [pc, #44]	; (13714 <bt_conn_create_pdu_timeout+0x78>)
   136e6:	4603      	mov	r3, r0
   136e8:	9000      	str	r0, [sp, #0]
   136ea:	f011 ffad 	bl	25648 <z_log_msg_runtime_create.constprop.0>
}
   136ee:	4620      	mov	r0, r4
   136f0:	b005      	add	sp, #20
   136f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   136f4:	1d69      	adds	r1, r5, #5
   136f6:	300c      	adds	r0, #12
   136f8:	f004 fe96 	bl	18428 <net_buf_simple_reserve>
	return buf;
   136fc:	e7f7      	b.n	136ee <bt_conn_create_pdu_timeout+0x52>
   136fe:	bf00      	nop
   13700:	0002d1d8 	.word	0x0002d1d8
   13704:	0002a669 	.word	0x0002a669
   13708:	0002cede 	.word	0x0002cede
   1370c:	20008c20 	.word	0x20008c20
   13710:	0002d1e7 	.word	0x0002d1e7
   13714:	000296a4 	.word	0x000296a4

00013718 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   13718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1371a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1371c:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1371e:	e8d0 3faf 	lda	r3, [r0]
   13722:	059b      	lsls	r3, r3, #22
   13724:	d511      	bpl.n	1374a <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   13726:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1372a:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   1372e:	429a      	cmp	r2, r3
   13730:	d80b      	bhi.n	1374a <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   13732:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   13736:	429a      	cmp	r2, r3
   13738:	d307      	bcc.n	1374a <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1373a:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   1373e:	429a      	cmp	r2, r3
   13740:	d103      	bne.n	1374a <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13742:	f46f 7100 	mvn.w	r1, #512	; 0x200
   13746:	f011 ff74 	bl	25632 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1374a:	4b18      	ldr	r3, [pc, #96]	; (137ac <notify_le_param_updated+0x94>)
   1374c:	681d      	ldr	r5, [r3, #0]
   1374e:	b995      	cbnz	r5, 13776 <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13750:	4d17      	ldr	r5, [pc, #92]	; (137b0 <notify_le_param_updated+0x98>)
   13752:	4f18      	ldr	r7, [pc, #96]	; (137b4 <notify_le_param_updated+0x9c>)
   13754:	42bd      	cmp	r5, r7
   13756:	d926      	bls.n	137a6 <notify_le_param_updated+0x8e>
   13758:	4917      	ldr	r1, [pc, #92]	; (137b8 <notify_le_param_updated+0xa0>)
   1375a:	f240 53a5 	movw	r3, #1445	; 0x5a5
   1375e:	4a17      	ldr	r2, [pc, #92]	; (137bc <notify_le_param_updated+0xa4>)
   13760:	4817      	ldr	r0, [pc, #92]	; (137c0 <notify_le_param_updated+0xa8>)
   13762:	f010 fc5e 	bl	24022 <assert_print>
   13766:	4817      	ldr	r0, [pc, #92]	; (137c4 <notify_le_param_updated+0xac>)
   13768:	f010 fc5b 	bl	24022 <assert_print>
   1376c:	f240 51a5 	movw	r1, #1445	; 0x5a5
   13770:	4812      	ldr	r0, [pc, #72]	; (137bc <notify_le_param_updated+0xa4>)
   13772:	f010 fc4f 	bl	24014 <assert_post_action>
		if (cb->le_param_updated) {
   13776:	68ee      	ldr	r6, [r5, #12]
   13778:	b13e      	cbz	r6, 1378a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   1377a:	4620      	mov	r0, r4
   1377c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   13780:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   13784:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   13788:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1378a:	69ad      	ldr	r5, [r5, #24]
   1378c:	e7df      	b.n	1374e <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   1378e:	68ee      	ldr	r6, [r5, #12]
   13790:	b13e      	cbz	r6, 137a2 <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   13792:	4620      	mov	r0, r4
   13794:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   13798:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1379c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   137a0:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   137a2:	351c      	adds	r5, #28
   137a4:	e7d6      	b.n	13754 <notify_le_param_updated+0x3c>
   137a6:	d3f2      	bcc.n	1378e <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   137a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137aa:	bf00      	nop
   137ac:	20020fa0 	.word	0x20020fa0
   137b0:	00029630 	.word	0x00029630
   137b4:	0002964c 	.word	0x0002964c
   137b8:	0002cf0e 	.word	0x0002cf0e
   137bc:	0002cede 	.word	0x0002cede
   137c0:	0002a669 	.word	0x0002a669
   137c4:	0002b5ef 	.word	0x0002b5ef

000137c8 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   137c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137cc:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   137ce:	4608      	mov	r0, r1
{
   137d0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   137d2:	f011 fcce 	bl	25172 <bt_le_conn_params_valid>
   137d6:	4605      	mov	r5, r0
   137d8:	b918      	cbnz	r0, 137e2 <le_param_req+0x1a>
		return false;
   137da:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   137dc:	4628      	mov	r0, r5
   137de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   137e2:	4b1b      	ldr	r3, [pc, #108]	; (13850 <le_param_req+0x88>)
   137e4:	681e      	ldr	r6, [r3, #0]
   137e6:	b99e      	cbnz	r6, 13810 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   137e8:	4e1a      	ldr	r6, [pc, #104]	; (13854 <le_param_req+0x8c>)
   137ea:	f8df 806c 	ldr.w	r8, [pc, #108]	; 13858 <le_param_req+0x90>
   137ee:	4546      	cmp	r6, r8
   137f0:	d927      	bls.n	13842 <le_param_req+0x7a>
   137f2:	491a      	ldr	r1, [pc, #104]	; (1385c <le_param_req+0x94>)
   137f4:	f240 53ed 	movw	r3, #1517	; 0x5ed
   137f8:	4a19      	ldr	r2, [pc, #100]	; (13860 <le_param_req+0x98>)
   137fa:	481a      	ldr	r0, [pc, #104]	; (13864 <le_param_req+0x9c>)
   137fc:	f010 fc11 	bl	24022 <assert_print>
   13800:	4819      	ldr	r0, [pc, #100]	; (13868 <le_param_req+0xa0>)
   13802:	f010 fc0e 	bl	24022 <assert_print>
   13806:	f240 51ed 	movw	r1, #1517	; 0x5ed
   1380a:	4815      	ldr	r0, [pc, #84]	; (13860 <le_param_req+0x98>)
   1380c:	f010 fc02 	bl	24014 <assert_post_action>
		if (!cb->le_param_req) {
   13810:	68b3      	ldr	r3, [r6, #8]
   13812:	b90b      	cbnz	r3, 13818 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   13814:	69b6      	ldr	r6, [r6, #24]
   13816:	e7e6      	b.n	137e6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   13818:	4621      	mov	r1, r4
   1381a:	4638      	mov	r0, r7
   1381c:	4798      	blx	r3
   1381e:	2800      	cmp	r0, #0
   13820:	d0db      	beq.n	137da <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   13822:	4620      	mov	r0, r4
   13824:	f011 fca5 	bl	25172 <bt_le_conn_params_valid>
   13828:	2800      	cmp	r0, #0
   1382a:	d1f3      	bne.n	13814 <le_param_req+0x4c>
   1382c:	e7d5      	b.n	137da <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1382e:	4621      	mov	r1, r4
   13830:	4638      	mov	r0, r7
   13832:	4798      	blx	r3
   13834:	2800      	cmp	r0, #0
   13836:	d0d0      	beq.n	137da <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   13838:	4620      	mov	r0, r4
   1383a:	f011 fc9a 	bl	25172 <bt_le_conn_params_valid>
   1383e:	b920      	cbnz	r0, 1384a <le_param_req+0x82>
   13840:	e7cb      	b.n	137da <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13842:	d2cb      	bcs.n	137dc <le_param_req+0x14>
		if (!cb->le_param_req) {
   13844:	68b3      	ldr	r3, [r6, #8]
   13846:	2b00      	cmp	r3, #0
   13848:	d1f1      	bne.n	1382e <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1384a:	361c      	adds	r6, #28
   1384c:	e7cf      	b.n	137ee <le_param_req+0x26>
   1384e:	bf00      	nop
   13850:	20020fa0 	.word	0x20020fa0
   13854:	00029630 	.word	0x00029630
   13858:	0002964c 	.word	0x0002964c
   1385c:	0002cf0e 	.word	0x0002cf0e
   13860:	0002cede 	.word	0x0002cede
   13864:	0002a669 	.word	0x0002a669
   13868:	0002b5ef 	.word	0x0002b5ef

0001386c <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   1386c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   13870:	78c3      	ldrb	r3, [r0, #3]
{
   13872:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   13874:	b9db      	cbnz	r3, 138ae <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   13876:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1387a:	4b18      	ldr	r3, [pc, #96]	; (138dc <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1387c:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   13880:	681d      	ldr	r5, [r3, #0]
   13882:	b9bd      	cbnz	r5, 138b4 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13884:	4d16      	ldr	r5, [pc, #88]	; (138e0 <bt_conn_identity_resolved+0x74>)
   13886:	4f17      	ldr	r7, [pc, #92]	; (138e4 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   13888:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1388c:	42bd      	cmp	r5, r7
   1388e:	d921      	bls.n	138d4 <bt_conn_identity_resolved+0x68>
   13890:	4915      	ldr	r1, [pc, #84]	; (138e8 <bt_conn_identity_resolved+0x7c>)
   13892:	f240 73bc 	movw	r3, #1980	; 0x7bc
   13896:	4a15      	ldr	r2, [pc, #84]	; (138ec <bt_conn_identity_resolved+0x80>)
   13898:	4815      	ldr	r0, [pc, #84]	; (138f0 <bt_conn_identity_resolved+0x84>)
   1389a:	f010 fbc2 	bl	24022 <assert_print>
   1389e:	4815      	ldr	r0, [pc, #84]	; (138f4 <bt_conn_identity_resolved+0x88>)
   138a0:	f010 fbbf 	bl	24022 <assert_print>
   138a4:	f240 71bc 	movw	r1, #1980	; 0x7bc
   138a8:	4810      	ldr	r0, [pc, #64]	; (138ec <bt_conn_identity_resolved+0x80>)
   138aa:	f010 fbb3 	bl	24014 <assert_post_action>
		rpa = &conn->le.init_addr;
   138ae:	f100 0697 	add.w	r6, r0, #151	; 0x97
   138b2:	e7e2      	b.n	1387a <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   138b4:	692b      	ldr	r3, [r5, #16]
   138b6:	b11b      	cbz	r3, 138c0 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   138b8:	463a      	mov	r2, r7
   138ba:	4631      	mov	r1, r6
   138bc:	4620      	mov	r0, r4
   138be:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   138c0:	69ad      	ldr	r5, [r5, #24]
   138c2:	e7de      	b.n	13882 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   138c4:	692b      	ldr	r3, [r5, #16]
   138c6:	b11b      	cbz	r3, 138d0 <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   138c8:	4642      	mov	r2, r8
   138ca:	4631      	mov	r1, r6
   138cc:	4620      	mov	r0, r4
   138ce:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   138d0:	351c      	adds	r5, #28
   138d2:	e7db      	b.n	1388c <bt_conn_identity_resolved+0x20>
   138d4:	d3f6      	bcc.n	138c4 <bt_conn_identity_resolved+0x58>
		}
	}
}
   138d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138da:	bf00      	nop
   138dc:	20020fa0 	.word	0x20020fa0
   138e0:	00029630 	.word	0x00029630
   138e4:	0002964c 	.word	0x0002964c
   138e8:	0002cf0e 	.word	0x0002cf0e
   138ec:	0002cede 	.word	0x0002cede
   138f0:	0002a669 	.word	0x0002a669
   138f4:	0002b5ef 	.word	0x0002b5ef

000138f8 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   138f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   138fa:	7a43      	ldrb	r3, [r0, #9]
{
   138fc:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   138fe:	7283      	strb	r3, [r0, #10]
{
   13900:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   13902:	f011 ffbd 	bl	25880 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   13906:	4b14      	ldr	r3, [pc, #80]	; (13958 <bt_conn_security_changed+0x60>)
   13908:	681d      	ldr	r5, [r3, #0]
   1390a:	b995      	cbnz	r5, 13932 <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1390c:	4d13      	ldr	r5, [pc, #76]	; (1395c <bt_conn_security_changed+0x64>)
   1390e:	4f14      	ldr	r7, [pc, #80]	; (13960 <bt_conn_security_changed+0x68>)
   13910:	42bd      	cmp	r5, r7
   13912:	d91e      	bls.n	13952 <bt_conn_security_changed+0x5a>
   13914:	4913      	ldr	r1, [pc, #76]	; (13964 <bt_conn_security_changed+0x6c>)
   13916:	f640 0328 	movw	r3, #2088	; 0x828
   1391a:	4a13      	ldr	r2, [pc, #76]	; (13968 <bt_conn_security_changed+0x70>)
   1391c:	4813      	ldr	r0, [pc, #76]	; (1396c <bt_conn_security_changed+0x74>)
   1391e:	f010 fb80 	bl	24022 <assert_print>
   13922:	4813      	ldr	r0, [pc, #76]	; (13970 <bt_conn_security_changed+0x78>)
   13924:	f010 fb7d 	bl	24022 <assert_print>
   13928:	f640 0128 	movw	r1, #2088	; 0x828
   1392c:	480e      	ldr	r0, [pc, #56]	; (13968 <bt_conn_security_changed+0x70>)
   1392e:	f010 fb71 	bl	24014 <assert_post_action>
		if (cb->security_changed) {
   13932:	696b      	ldr	r3, [r5, #20]
   13934:	b11b      	cbz	r3, 1393e <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   13936:	4632      	mov	r2, r6
   13938:	4620      	mov	r0, r4
   1393a:	7a61      	ldrb	r1, [r4, #9]
   1393c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1393e:	69ad      	ldr	r5, [r5, #24]
   13940:	e7e3      	b.n	1390a <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   13942:	696b      	ldr	r3, [r5, #20]
   13944:	b11b      	cbz	r3, 1394e <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   13946:	4632      	mov	r2, r6
   13948:	4620      	mov	r0, r4
   1394a:	7a61      	ldrb	r1, [r4, #9]
   1394c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1394e:	351c      	adds	r5, #28
   13950:	e7de      	b.n	13910 <bt_conn_security_changed+0x18>
   13952:	d3f6      	bcc.n	13942 <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   13954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13956:	bf00      	nop
   13958:	20020fa0 	.word	0x20020fa0
   1395c:	00029630 	.word	0x00029630
   13960:	0002964c 	.word	0x0002964c
   13964:	0002cf0e 	.word	0x0002cf0e
   13968:	0002cede 	.word	0x0002cede
   1396c:	0002a669 	.word	0x0002a669
   13970:	0002b5ef 	.word	0x0002b5ef

00013974 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   13974:	b538      	push	{r3, r4, r5, lr}
   13976:	4605      	mov	r5, r0
   13978:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1397a:	480b      	ldr	r0, [pc, #44]	; (139a8 <bt_conn_add_le+0x34>)
   1397c:	2101      	movs	r1, #1
   1397e:	f7ff fb77 	bl	13070 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   13982:	b180      	cbz	r0, 139a6 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   13984:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13986:	6823      	ldr	r3, [r4, #0]
   13988:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   1398c:	88a3      	ldrh	r3, [r4, #4]
   1398e:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   13992:	79a3      	ldrb	r3, [r4, #6]
   13994:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   13998:	2301      	movs	r3, #1
   1399a:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1399c:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1399e:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   139a0:	4b02      	ldr	r3, [pc, #8]	; (139ac <bt_conn_add_le+0x38>)
   139a2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   139a6:	bd38      	pop	{r3, r4, r5, pc}
   139a8:	200097f8 	.word	0x200097f8
   139ac:	00280018 	.word	0x00280018

000139b0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   139b0:	b570      	push	{r4, r5, r6, lr}
   139b2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   139b4:	480a      	ldr	r0, [pc, #40]	; (139e0 <bt_conn_lookup_addr_le+0x30>)
{
   139b6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   139b8:	f7ff fd06 	bl	133c8 <bt_conn_ref>
   139bc:	4604      	mov	r4, r0

		if (!conn) {
   139be:	b120      	cbz	r0, 139ca <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   139c0:	7883      	ldrb	r3, [r0, #2]
   139c2:	2b01      	cmp	r3, #1
   139c4:	d004      	beq.n	139d0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   139c6:	f7ff fd27 	bl	13418 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   139ca:	2400      	movs	r4, #0
}
   139cc:	4620      	mov	r0, r4
   139ce:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   139d0:	4632      	mov	r2, r6
   139d2:	4629      	mov	r1, r5
   139d4:	f011 fecc 	bl	25770 <bt_conn_is_peer_addr_le>
   139d8:	2800      	cmp	r0, #0
   139da:	d1f7      	bne.n	139cc <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   139dc:	4620      	mov	r0, r4
   139de:	e7f2      	b.n	139c6 <bt_conn_lookup_addr_le+0x16>
   139e0:	200097f8 	.word	0x200097f8

000139e4 <bt_conn_exists_le>:
{
   139e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   139e6:	f7ff ffe3 	bl	139b0 <bt_conn_lookup_addr_le>
	if (conn) {
   139ea:	4604      	mov	r4, r0
   139ec:	b1a8      	cbz	r0, 13a1a <bt_conn_exists_le+0x36>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   139ee:	7b43      	ldrb	r3, [r0, #13]
   139f0:	490b      	ldr	r1, [pc, #44]	; (13a20 <bt_conn_exists_le+0x3c>)
   139f2:	2b08      	cmp	r3, #8
   139f4:	bf96      	itet	ls
   139f6:	4a0b      	ldrls	r2, [pc, #44]	; (13a24 <bt_conn_exists_le+0x40>)
   139f8:	4b0b      	ldrhi	r3, [pc, #44]	; (13a28 <bt_conn_exists_le+0x44>)
   139fa:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   139fe:	2202      	movs	r2, #2
   13a00:	9303      	str	r3, [sp, #12]
   13a02:	4b0a      	ldr	r3, [pc, #40]	; (13a2c <bt_conn_exists_le+0x48>)
   13a04:	9302      	str	r3, [sp, #8]
   13a06:	2300      	movs	r3, #0
   13a08:	4618      	mov	r0, r3
   13a0a:	e9cd 3300 	strd	r3, r3, [sp]
   13a0e:	f011 fe1b 	bl	25648 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   13a12:	4620      	mov	r0, r4
   13a14:	f7ff fd00 	bl	13418 <bt_conn_unref>
		return true;
   13a18:	2001      	movs	r0, #1
}
   13a1a:	b004      	add	sp, #16
   13a1c:	bd10      	pop	{r4, pc}
   13a1e:	bf00      	nop
   13a20:	000296a4 	.word	0x000296a4
   13a24:	00029fec 	.word	0x00029fec
   13a28:	0002d0a7 	.word	0x0002d0a7
   13a2c:	0002d210 	.word	0x0002d210

00013a30 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   13a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a32:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13a34:	480e      	ldr	r0, [pc, #56]	; (13a70 <bt_conn_lookup_state_le+0x40>)
{
   13a36:	460e      	mov	r6, r1
   13a38:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13a3a:	f7ff fcc5 	bl	133c8 <bt_conn_ref>

		if (!conn) {
   13a3e:	4604      	mov	r4, r0
   13a40:	b120      	cbz	r0, 13a4c <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   13a42:	7883      	ldrb	r3, [r0, #2]
   13a44:	2b01      	cmp	r3, #1
   13a46:	d003      	beq.n	13a50 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   13a48:	f7ff fce6 	bl	13418 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   13a4c:	2400      	movs	r4, #0
   13a4e:	e00d      	b.n	13a6c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   13a50:	b136      	cbz	r6, 13a60 <bt_conn_lookup_state_le+0x30>
   13a52:	4632      	mov	r2, r6
   13a54:	4629      	mov	r1, r5
   13a56:	f011 fe8b 	bl	25770 <bt_conn_is_peer_addr_le>
   13a5a:	b908      	cbnz	r0, 13a60 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   13a5c:	4620      	mov	r0, r4
   13a5e:	e7f3      	b.n	13a48 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   13a60:	7b63      	ldrb	r3, [r4, #13]
   13a62:	42bb      	cmp	r3, r7
   13a64:	d1fa      	bne.n	13a5c <bt_conn_lookup_state_le+0x2c>
   13a66:	7a23      	ldrb	r3, [r4, #8]
   13a68:	42ab      	cmp	r3, r5
   13a6a:	d1f7      	bne.n	13a5c <bt_conn_lookup_state_le+0x2c>
}
   13a6c:	4620      	mov	r0, r4
   13a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a70:	200097f8 	.word	0x200097f8

00013a74 <send_conn_le_param_update>:
{
   13a74:	b538      	push	{r3, r4, r5, lr}
   13a76:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   13a78:	4608      	mov	r0, r1
{
   13a7a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   13a7c:	f011 fb79 	bl	25172 <bt_le_conn_params_valid>
   13a80:	b338      	cbz	r0, 13ad2 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   13a82:	4b15      	ldr	r3, [pc, #84]	; (13ad8 <send_conn_le_param_update+0x64>)
   13a84:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   13a88:	0799      	lsls	r1, r3, #30
   13a8a:	d407      	bmi.n	13a9c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   13a8c:	78e3      	ldrb	r3, [r4, #3]
   13a8e:	b173      	cbz	r3, 13aae <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   13a90:	4629      	mov	r1, r5
   13a92:	4620      	mov	r0, r4
}
   13a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   13a98:	f000 bafc 	b.w	14094 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   13a9c:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   13aa0:	079a      	lsls	r2, r3, #30
   13aa2:	d5f3      	bpl.n	13a8c <send_conn_le_param_update+0x18>
   13aa4:	1d23      	adds	r3, r4, #4
   13aa6:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   13aaa:	055b      	lsls	r3, r3, #21
   13aac:	d4ee      	bmi.n	13a8c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   13aae:	4629      	mov	r1, r5
   13ab0:	4620      	mov	r0, r4
   13ab2:	f011 fe7f 	bl	257b4 <bt_conn_le_conn_update>
		if (rc == 0) {
   13ab6:	b958      	cbnz	r0, 13ad0 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   13ab8:	882b      	ldrh	r3, [r5, #0]
   13aba:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   13abe:	886b      	ldrh	r3, [r5, #2]
   13ac0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   13ac4:	88ab      	ldrh	r3, [r5, #4]
   13ac6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   13aca:	88eb      	ldrh	r3, [r5, #6]
   13acc:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   13ad0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   13ad2:	f06f 0015 	mvn.w	r0, #21
   13ad6:	e7fb      	b.n	13ad0 <send_conn_le_param_update+0x5c>
   13ad8:	20008000 	.word	0x20008000

00013adc <deferred_work>:
{
   13adc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   13ade:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   13ae2:	4604      	mov	r4, r0
   13ae4:	b087      	sub	sp, #28
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   13ae6:	f1a0 0760 	sub.w	r7, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   13aea:	bb7b      	cbnz	r3, 13b4c <deferred_work+0x70>
		bt_l2cap_disconnected(conn);
   13aec:	4638      	mov	r0, r7
   13aee:	f011 feaf 	bl	25850 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   13af2:	4b3c      	ldr	r3, [pc, #240]	; (13be4 <deferred_work+0x108>)
   13af4:	681d      	ldr	r5, [r3, #0]
   13af6:	b995      	cbnz	r5, 13b1e <deferred_work+0x42>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13af8:	4d3b      	ldr	r5, [pc, #236]	; (13be8 <deferred_work+0x10c>)
   13afa:	4e3c      	ldr	r6, [pc, #240]	; (13bec <deferred_work+0x110>)
   13afc:	42b5      	cmp	r5, r6
   13afe:	d91e      	bls.n	13b3e <deferred_work+0x62>
   13b00:	493b      	ldr	r1, [pc, #236]	; (13bf0 <deferred_work+0x114>)
   13b02:	f240 536c 	movw	r3, #1388	; 0x56c
   13b06:	4a3b      	ldr	r2, [pc, #236]	; (13bf4 <deferred_work+0x118>)
   13b08:	483b      	ldr	r0, [pc, #236]	; (13bf8 <deferred_work+0x11c>)
   13b0a:	f010 fa8a 	bl	24022 <assert_print>
   13b0e:	483b      	ldr	r0, [pc, #236]	; (13bfc <deferred_work+0x120>)
   13b10:	f010 fa87 	bl	24022 <assert_print>
   13b14:	f240 516c 	movw	r1, #1388	; 0x56c
   13b18:	4836      	ldr	r0, [pc, #216]	; (13bf4 <deferred_work+0x118>)
   13b1a:	f010 fa7b 	bl	24014 <assert_post_action>
		if (cb->disconnected) {
   13b1e:	686b      	ldr	r3, [r5, #4]
   13b20:	b11b      	cbz	r3, 13b2a <deferred_work+0x4e>
			cb->disconnected(conn, conn->err);
   13b22:	4638      	mov	r0, r7
   13b24:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   13b28:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   13b2a:	69ad      	ldr	r5, [r5, #24]
   13b2c:	e7e3      	b.n	13af6 <deferred_work+0x1a>
		if (cb->disconnected) {
   13b2e:	686b      	ldr	r3, [r5, #4]
   13b30:	b11b      	cbz	r3, 13b3a <deferred_work+0x5e>
			cb->disconnected(conn, conn->err);
   13b32:	4638      	mov	r0, r7
   13b34:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   13b38:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13b3a:	351c      	adds	r5, #28
   13b3c:	e7de      	b.n	13afc <deferred_work+0x20>
   13b3e:	d3f6      	bcc.n	13b2e <deferred_work+0x52>
		bt_conn_unref(conn);
   13b40:	4638      	mov	r0, r7
}
   13b42:	b007      	add	sp, #28
   13b44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   13b48:	f7ff bc66 	b.w	13418 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   13b4c:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   13b50:	2b01      	cmp	r3, #1
   13b52:	d11f      	bne.n	13b94 <deferred_work+0xb8>
	if (atomic_test_and_clear_bit(conn->flags,
   13b54:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13b58:	f46f 7100 	mvn.w	r1, #512	; 0x200
   13b5c:	4628      	mov	r0, r5
   13b5e:	f011 fd68 	bl	25632 <atomic_and>
   13b62:	f410 7600 	ands.w	r6, r0, #512	; 0x200
   13b66:	d023      	beq.n	13bb0 <deferred_work+0xd4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   13b68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   13b6a:	4638      	mov	r0, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   13b6c:	9304      	str	r3, [sp, #16]
   13b6e:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   13b70:	a904      	add	r1, sp, #16
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   13b72:	9305      	str	r3, [sp, #20]
		err = send_conn_le_param_update(conn, param);
   13b74:	f7ff ff7e 	bl	13a74 <send_conn_le_param_update>
		if (!err) {
   13b78:	b970      	cbnz	r0, 13b98 <deferred_work+0xbc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13b7a:	f46f 7180 	mvn.w	r1, #256	; 0x100
   13b7e:	4628      	mov	r0, r5
   13b80:	f011 fd57 	bl	25632 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13b84:	e8d5 3fef 	ldaex	r3, [r5]
   13b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13b8c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   13b90:	2a00      	cmp	r2, #0
   13b92:	d1f7      	bne.n	13b84 <deferred_work+0xa8>
}
   13b94:	b007      	add	sp, #28
   13b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   13b98:	4b19      	ldr	r3, [pc, #100]	; (13c00 <deferred_work+0x124>)
   13b9a:	9003      	str	r0, [sp, #12]
   13b9c:	9302      	str	r3, [sp, #8]
   13b9e:	2300      	movs	r3, #0
   13ba0:	e9cd 3300 	strd	r3, r3, [sp]
			LOG_WRN("Send auto LE param update failed (err %d)",
   13ba4:	2202      	movs	r2, #2
   13ba6:	4618      	mov	r0, r3
   13ba8:	4916      	ldr	r1, [pc, #88]	; (13c04 <deferred_work+0x128>)
   13baa:	f011 fd4d 	bl	25648 <z_log_msg_runtime_create.constprop.0>
   13bae:	e7e9      	b.n	13b84 <deferred_work+0xa8>
		param = BT_LE_CONN_PARAM(
   13bb0:	4a15      	ldr	r2, [pc, #84]	; (13c08 <deferred_work+0x12c>)
   13bb2:	ab04      	add	r3, sp, #16
   13bb4:	6810      	ldr	r0, [r2, #0]
   13bb6:	6851      	ldr	r1, [r2, #4]
   13bb8:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   13bba:	4638      	mov	r0, r7
   13bbc:	a904      	add	r1, sp, #16
   13bbe:	f7ff ff59 	bl	13a74 <send_conn_le_param_update>
		if (!err) {
   13bc2:	b940      	cbnz	r0, 13bd6 <deferred_work+0xfa>
   13bc4:	e8d5 3fef 	ldaex	r3, [r5]
   13bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13bcc:	e8c5 3fe2 	stlex	r2, r3, [r5]
   13bd0:	2a00      	cmp	r2, #0
   13bd2:	d0d7      	beq.n	13b84 <deferred_work+0xa8>
   13bd4:	e7f6      	b.n	13bc4 <deferred_work+0xe8>
			LOG_WRN("Send auto LE param update failed (err %d)",
   13bd6:	4b0d      	ldr	r3, [pc, #52]	; (13c0c <deferred_work+0x130>)
   13bd8:	9003      	str	r0, [sp, #12]
   13bda:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13bde:	9600      	str	r6, [sp, #0]
   13be0:	4633      	mov	r3, r6
   13be2:	e7df      	b.n	13ba4 <deferred_work+0xc8>
   13be4:	20020fa0 	.word	0x20020fa0
   13be8:	00029630 	.word	0x00029630
   13bec:	0002964c 	.word	0x0002964c
   13bf0:	0002cf0e 	.word	0x0002cf0e
   13bf4:	0002cede 	.word	0x0002cede
   13bf8:	0002a669 	.word	0x0002a669
   13bfc:	0002b5ef 	.word	0x0002b5ef
   13c00:	0002d233 	.word	0x0002d233
   13c04:	000296a4 	.word	0x000296a4
   13c08:	00029824 	.word	0x00029824
   13c0c:	0002d258 	.word	0x0002d258

00013c10 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   13c10:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   13c12:	4801      	ldr	r0, [pc, #4]	; (13c18 <bt_conn_create_frag_timeout+0x8>)
   13c14:	f7ff bd42 	b.w	1369c <bt_conn_create_pdu_timeout>
   13c18:	20008cbc 	.word	0x20008cbc

00013c1c <create_frag>:
{
   13c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c20:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   13c22:	f04f 33ff 	mov.w	r3, #4294967295
   13c26:	f04f 32ff 	mov.w	r2, #4294967295
   13c2a:	2000      	movs	r0, #0
{
   13c2c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   13c2e:	f7ff ffef 	bl	13c10 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   13c32:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   13c34:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   13c36:	2b07      	cmp	r3, #7
   13c38:	f04f 0600 	mov.w	r6, #0
   13c3c:	d005      	beq.n	13c4a <create_frag+0x2e>
		net_buf_unref(frag);
   13c3e:	f004 fd05 	bl	1864c <net_buf_unref>
		return NULL;
   13c42:	4635      	mov	r5, r6
}
   13c44:	4628      	mov	r0, r5
   13c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   13c4a:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   13c4c:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   13c50:	4e0c      	ldr	r6, [pc, #48]	; (13c84 <create_frag+0x68>)
   13c52:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   13c54:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   13c58:	f013 f868 	bl	26d2c <net_buf_simple_tailroom>
   13c5c:	4580      	cmp	r8, r0
   13c5e:	d20c      	bcs.n	13c7a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   13c60:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13c64:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   13c68:	4632      	mov	r2, r6
   13c6a:	4638      	mov	r0, r7
   13c6c:	f013 f866 	bl	26d3c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   13c70:	4631      	mov	r1, r6
   13c72:	4620      	mov	r0, r4
   13c74:	f004 fdd0 	bl	18818 <net_buf_simple_pull>
   13c78:	e7e4      	b.n	13c44 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   13c7a:	4638      	mov	r0, r7
   13c7c:	f013 f856 	bl	26d2c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   13c80:	b286      	uxth	r6, r0
   13c82:	e7ef      	b.n	13c64 <create_frag+0x48>
   13c84:	20008000 	.word	0x20008000

00013c88 <bt_conn_process_tx>:
{
   13c88:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   13c8a:	7b43      	ldrb	r3, [r0, #13]
{
   13c8c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   13c8e:	b95b      	cbnz	r3, 13ca8 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13c90:	f06f 0140 	mvn.w	r1, #64	; 0x40
   13c94:	3004      	adds	r0, #4
   13c96:	f011 fccc 	bl	25632 <atomic_and>
   13c9a:	0643      	lsls	r3, r0, #25
   13c9c:	d504      	bpl.n	13ca8 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   13c9e:	4620      	mov	r0, r4
}
   13ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   13ca4:	f7ff ba12 	b.w	130cc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   13ca8:	2200      	movs	r2, #0
   13caa:	2300      	movs	r3, #0
   13cac:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13cb0:	f013 f827 	bl	26d02 <net_buf_get>
	BT_ASSERT(buf);
   13cb4:	4605      	mov	r5, r0
   13cb6:	b960      	cbnz	r0, 13cd2 <bt_conn_process_tx+0x4a>
   13cb8:	f240 331a 	movw	r3, #794	; 0x31a
   13cbc:	4a22      	ldr	r2, [pc, #136]	; (13d48 <bt_conn_process_tx+0xc0>)
   13cbe:	4923      	ldr	r1, [pc, #140]	; (13d4c <bt_conn_process_tx+0xc4>)
   13cc0:	4823      	ldr	r0, [pc, #140]	; (13d50 <bt_conn_process_tx+0xc8>)
   13cc2:	f010 f9ae 	bl	24022 <assert_print>
   13cc6:	4040      	eors	r0, r0
   13cc8:	f380 8811 	msr	BASEPRI, r0
   13ccc:	f04f 0003 	mov.w	r0, #3
   13cd0:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   13cd2:	4e20      	ldr	r6, [pc, #128]	; (13d54 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   13cd4:	8a2a      	ldrh	r2, [r5, #16]
   13cd6:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   13cda:	429a      	cmp	r2, r3
   13cdc:	d807      	bhi.n	13cee <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   13cde:	2300      	movs	r3, #0
   13ce0:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   13ce2:	4629      	mov	r1, r5
   13ce4:	4620      	mov	r0, r4
   13ce6:	f7ff f913 	bl	12f10 <send_frag>
	if (!send_buf(conn, buf)) {
   13cea:	b968      	cbnz	r0, 13d08 <bt_conn_process_tx+0x80>
   13cec:	e005      	b.n	13cfa <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   13cee:	4629      	mov	r1, r5
   13cf0:	4620      	mov	r0, r4
   13cf2:	f7ff ff93 	bl	13c1c <create_frag>
	if (!frag) {
   13cf6:	4601      	mov	r1, r0
   13cf8:	b938      	cbnz	r0, 13d0a <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   13cfa:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   13cfc:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   13cfe:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   13d00:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   13d02:	f004 fca3 	bl	1864c <net_buf_unref>
		if (tx) {
   13d06:	b9ce      	cbnz	r6, 13d3c <bt_conn_process_tx+0xb4>
}
   13d08:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   13d0a:	2301      	movs	r3, #1
   13d0c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   13d0e:	4620      	mov	r0, r4
   13d10:	f7ff f8fe 	bl	12f10 <send_frag>
   13d14:	2800      	cmp	r0, #0
   13d16:	d0f0      	beq.n	13cfa <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   13d18:	8a2a      	ldrh	r2, [r5, #16]
   13d1a:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   13d1e:	429a      	cmp	r2, r3
   13d20:	d802      	bhi.n	13d28 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   13d22:	2300      	movs	r3, #0
   13d24:	2203      	movs	r2, #3
   13d26:	e7dc      	b.n	13ce2 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   13d28:	4629      	mov	r1, r5
   13d2a:	4620      	mov	r0, r4
   13d2c:	f7ff ff76 	bl	13c1c <create_frag>
		if (!frag) {
   13d30:	4601      	mov	r1, r0
   13d32:	2800      	cmp	r0, #0
   13d34:	d0e1      	beq.n	13cfa <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   13d36:	2301      	movs	r3, #1
   13d38:	461a      	mov	r2, r3
   13d3a:	e7e8      	b.n	13d0e <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   13d3c:	4631      	mov	r1, r6
   13d3e:	4620      	mov	r0, r4
}
   13d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   13d44:	f7ff b8be 	b.w	12ec4 <conn_tx_destroy>
   13d48:	0002cede 	.word	0x0002cede
   13d4c:	0002dfab 	.word	0x0002dfab
   13d50:	0002a669 	.word	0x0002a669
   13d54:	20008000 	.word	0x20008000

00013d58 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   13d58:	4b0b      	ldr	r3, [pc, #44]	; (13d88 <bt_conn_auth_cb_register+0x30>)
   13d5a:	b158      	cbz	r0, 13d74 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   13d5c:	681a      	ldr	r2, [r3, #0]
   13d5e:	b962      	cbnz	r2, 13d7a <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   13d60:	6902      	ldr	r2, [r0, #16]
   13d62:	b93a      	cbnz	r2, 13d74 <bt_conn_auth_cb_register+0x1c>
   13d64:	6802      	ldr	r2, [r0, #0]
   13d66:	b95a      	cbnz	r2, 13d80 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   13d68:	6842      	ldr	r2, [r0, #4]
   13d6a:	b94a      	cbnz	r2, 13d80 <bt_conn_auth_cb_register+0x28>
   13d6c:	6882      	ldr	r2, [r0, #8]
   13d6e:	b93a      	cbnz	r2, 13d80 <bt_conn_auth_cb_register+0x28>
   13d70:	6942      	ldr	r2, [r0, #20]
   13d72:	b92a      	cbnz	r2, 13d80 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   13d74:	6018      	str	r0, [r3, #0]
		return 0;
   13d76:	2000      	movs	r0, #0
   13d78:	4770      	bx	lr
		return -EALREADY;
   13d7a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13d7e:	4770      	bx	lr
		return -EINVAL;
   13d80:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   13d84:	4770      	bx	lr
   13d86:	bf00      	nop
   13d88:	20020fac 	.word	0x20020fac

00013d8c <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   13d8c:	b168      	cbz	r0, 13daa <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   13d8e:	2300      	movs	r3, #0
   13d90:	60c3      	str	r3, [r0, #12]
	return list->tail;
   13d92:	4b07      	ldr	r3, [pc, #28]	; (13db0 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   13d94:	f100 020c 	add.w	r2, r0, #12
   13d98:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   13d9a:	b919      	cbnz	r1, 13da4 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   13d9c:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   13da0:	2000      	movs	r0, #0
   13da2:	4770      	bx	lr
	parent->next = child;
   13da4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   13da6:	605a      	str	r2, [r3, #4]
}
   13da8:	e7fa      	b.n	13da0 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   13daa:	f06f 0015 	mvn.w	r0, #21
}
   13dae:	4770      	bx	lr
   13db0:	20020fa4 	.word	0x20020fa4

00013db4 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   13db4:	b910      	cbnz	r0, 13dbc <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   13db6:	4802      	ldr	r0, [pc, #8]	; (13dc0 <bt_conn_lookup_index+0xc>)
   13db8:	f7ff bb06 	b.w	133c8 <bt_conn_ref>
}
   13dbc:	2000      	movs	r0, #0
   13dbe:	4770      	bx	lr
   13dc0:	200097f8 	.word	0x200097f8

00013dc4 <bt_conn_init>:

int bt_conn_init(void)
{
   13dc4:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   13dc6:	480a      	ldr	r0, [pc, #40]	; (13df0 <bt_conn_init+0x2c>)
   13dc8:	f014 fb25 	bl	28416 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   13dcc:	4909      	ldr	r1, [pc, #36]	; (13df4 <bt_conn_init+0x30>)
   13dce:	4808      	ldr	r0, [pc, #32]	; (13df0 <bt_conn_init+0x2c>)
   13dd0:	f014 fb2e 	bl	28430 <k_queue_append>
   13dd4:	4908      	ldr	r1, [pc, #32]	; (13df8 <bt_conn_init+0x34>)
   13dd6:	4806      	ldr	r0, [pc, #24]	; (13df0 <bt_conn_init+0x2c>)
   13dd8:	f014 fb2a 	bl	28430 <k_queue_append>
	}

	bt_att_init();
   13ddc:	f001 f8e4 	bl	14fa8 <bt_att_init>

	err = bt_smp_init();
   13de0:	f003 ffb4 	bl	17d4c <bt_smp_init>
	if (err) {
   13de4:	4604      	mov	r4, r0
   13de6:	b908      	cbnz	r0, 13dec <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   13de8:	f011 fd95 	bl	25916 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   13dec:	4620      	mov	r0, r4
   13dee:	bd10      	pop	{r4, pc}
   13df0:	20008bd0 	.word	0x20008bd0
   13df4:	20020f80 	.word	0x20020f80
   13df8:	20020f90 	.word	0x20020f90

00013dfc <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   13dfc:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   13dfe:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   13e00:	4605      	mov	r5, r0
   13e02:	460f      	mov	r7, r1
   13e04:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   13e06:	2104      	movs	r1, #4
   13e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13e0c:	2000      	movs	r0, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   13e0e:	b085      	sub	sp, #20
	return bt_conn_create_pdu_timeout(pool,
   13e10:	f7ff fc44 	bl	1369c <bt_conn_create_pdu_timeout>
	if (!buf) {
   13e14:	4604      	mov	r4, r0
   13e16:	b960      	cbnz	r0, 13e32 <l2cap_create_le_sig_pdu.constprop.0+0x36>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   13e18:	4b0a      	ldr	r3, [pc, #40]	; (13e44 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
   13e1a:	2201      	movs	r2, #1
   13e1c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13e20:	4909      	ldr	r1, [pc, #36]	; (13e48 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   13e22:	4603      	mov	r3, r0
   13e24:	9503      	str	r5, [sp, #12]
   13e26:	9000      	str	r0, [sp, #0]
   13e28:	f011 fced 	bl	25806 <z_log_msg_runtime_create.constprop.0>
}
   13e2c:	4620      	mov	r0, r4
   13e2e:	b005      	add	sp, #20
   13e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   13e32:	2104      	movs	r1, #4
   13e34:	300c      	adds	r0, #12
   13e36:	f004 fd2b 	bl	18890 <net_buf_simple_add>
	hdr->code = code;
   13e3a:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   13e3c:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   13e3e:	8046      	strh	r6, [r0, #2]
	return buf;
   13e40:	e7f4      	b.n	13e2c <l2cap_create_le_sig_pdu.constprop.0+0x30>
   13e42:	bf00      	nop
   13e44:	0002d2fb 	.word	0x0002d2fb
   13e48:	000296ec 	.word	0x000296ec

00013e4c <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   13e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   13e4e:	4c0b      	ldr	r4, [pc, #44]	; (13e7c <l2cap_accept+0x30>)
   13e50:	2300      	movs	r3, #0
   13e52:	6822      	ldr	r2, [r4, #0]
   13e54:	b92a      	cbnz	r2, 13e62 <l2cap_accept+0x16>
		}

		l2cap->chan.chan.ops = &ops;
		*chan = &l2cap->chan.chan;

		return 0;
   13e56:	4610      	mov	r0, r2
		l2cap->chan.chan.ops = &ops;
   13e58:	4b09      	ldr	r3, [pc, #36]	; (13e80 <l2cap_accept+0x34>)
   13e5a:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;
   13e5c:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   13e5e:	b004      	add	sp, #16
   13e60:	bd10      	pop	{r4, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   13e62:	4a08      	ldr	r2, [pc, #32]	; (13e84 <l2cap_accept+0x38>)
   13e64:	9003      	str	r0, [sp, #12]
   13e66:	e9cd 3201 	strd	r3, r2, [sp, #4]
   13e6a:	4618      	mov	r0, r3
   13e6c:	2201      	movs	r2, #1
   13e6e:	4906      	ldr	r1, [pc, #24]	; (13e88 <l2cap_accept+0x3c>)
   13e70:	9300      	str	r3, [sp, #0]
   13e72:	f011 fcc8 	bl	25806 <z_log_msg_runtime_create.constprop.0>
   13e76:	f06f 000b 	mvn.w	r0, #11
   13e7a:	e7f0      	b.n	13e5e <l2cap_accept+0x12>
   13e7c:	20020fb0 	.word	0x20020fb0
   13e80:	0002a030 	.word	0x0002a030
   13e84:	0002d323 	.word	0x0002d323
   13e88:	000296ec 	.word	0x000296ec

00013e8c <bt_l2cap_connected>:
{
   13e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13e8e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13e90:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   13e92:	4d27      	ldr	r5, [pc, #156]	; (13f30 <bt_l2cap_connected+0xa4>)
   13e94:	4f27      	ldr	r7, [pc, #156]	; (13f34 <bt_l2cap_connected+0xa8>)
   13e96:	42bd      	cmp	r5, r7
   13e98:	d946      	bls.n	13f28 <bt_l2cap_connected+0x9c>
   13e9a:	4927      	ldr	r1, [pc, #156]	; (13f38 <bt_l2cap_connected+0xac>)
   13e9c:	f240 1381 	movw	r3, #385	; 0x181
   13ea0:	4a26      	ldr	r2, [pc, #152]	; (13f3c <bt_l2cap_connected+0xb0>)
   13ea2:	4827      	ldr	r0, [pc, #156]	; (13f40 <bt_l2cap_connected+0xb4>)
   13ea4:	f010 f8bd 	bl	24022 <assert_print>
   13ea8:	4826      	ldr	r0, [pc, #152]	; (13f44 <bt_l2cap_connected+0xb8>)
   13eaa:	f010 f8ba 	bl	24022 <assert_print>
   13eae:	f240 1181 	movw	r1, #385	; 0x181
   13eb2:	4822      	ldr	r0, [pc, #136]	; (13f3c <bt_l2cap_connected+0xb0>)
   13eb4:	f010 f8ae 	bl	24014 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   13eb8:	4620      	mov	r0, r4
   13eba:	686b      	ldr	r3, [r5, #4]
   13ebc:	a901      	add	r1, sp, #4
   13ebe:	4798      	blx	r3
   13ec0:	2800      	cmp	r0, #0
   13ec2:	db2c      	blt.n	13f1e <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   13ec4:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   13ec6:	882a      	ldrh	r2, [r5, #0]
   13ec8:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   13eca:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   13ecc:	68a8      	ldr	r0, [r5, #8]
   13ece:	f103 0210 	add.w	r2, r3, #16
   13ed2:	e8d2 1fef 	ldaex	r1, [r2]
   13ed6:	e8c2 6fec 	stlex	ip, r6, [r2]
   13eda:	f1bc 0f00 	cmp.w	ip, #0
   13ede:	d1f8      	bne.n	13ed2 <bt_l2cap_connected+0x46>
	parent->next = child;
   13ee0:	609e      	str	r6, [r3, #8]
	return list->tail;
   13ee2:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   13ee4:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   13ee8:	b9d9      	cbnz	r1, 13f22 <bt_l2cap_connected+0x96>
	list->head = node;
   13eea:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   13eee:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   13ef0:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   13ef2:	9801      	ldr	r0, [sp, #4]
   13ef4:	6843      	ldr	r3, [r0, #4]
   13ef6:	681b      	ldr	r3, [r3, #0]
   13ef8:	b103      	cbz	r3, 13efc <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   13efa:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13efc:	9b01      	ldr	r3, [sp, #4]
   13efe:	3310      	adds	r3, #16
   13f00:	e8d3 1fef 	ldaex	r1, [r3]
   13f04:	f041 0101 	orr.w	r1, r1, #1
   13f08:	e8c3 1fe2 	stlex	r2, r1, [r3]
   13f0c:	2a00      	cmp	r2, #0
   13f0e:	d1f7      	bne.n	13f00 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   13f10:	9801      	ldr	r0, [sp, #4]
   13f12:	6843      	ldr	r3, [r0, #4]
   13f14:	69db      	ldr	r3, [r3, #28]
   13f16:	b113      	cbz	r3, 13f1e <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   13f18:	f100 0110 	add.w	r1, r0, #16
   13f1c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   13f1e:	350c      	adds	r5, #12
   13f20:	e7b9      	b.n	13e96 <bt_l2cap_connected+0xa>
	parent->next = child;
   13f22:	600a      	str	r2, [r1, #0]
	list->tail = node;
   13f24:	65a2      	str	r2, [r4, #88]	; 0x58
}
   13f26:	e7e2      	b.n	13eee <bt_l2cap_connected+0x62>
   13f28:	d3c6      	bcc.n	13eb8 <bt_l2cap_connected+0x2c>
}
   13f2a:	b003      	add	sp, #12
   13f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f2e:	bf00      	nop
   13f30:	0002960c 	.word	0x0002960c
   13f34:	00029630 	.word	0x00029630
   13f38:	0002d37b 	.word	0x0002d37b
   13f3c:	0002d34a 	.word	0x0002d34a
   13f40:	0002a669 	.word	0x0002a669
   13f44:	0002b5ef 	.word	0x0002b5ef

00013f48 <l2cap_recv>:
{
   13f48:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   13f4a:	8a0b      	ldrh	r3, [r1, #16]
{
   13f4c:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   13f4e:	2b03      	cmp	r3, #3
{
   13f50:	460c      	mov	r4, r1
   13f52:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   13f54:	d803      	bhi.n	13f5e <l2cap_recv+0x16>
		LOG_ERR("Too small L2CAP signaling PDU");
   13f56:	4b2d      	ldr	r3, [pc, #180]	; (1400c <l2cap_recv+0xc4>)
		LOG_ERR("Too small LE conn param rsp");
   13f58:	9302      	str	r3, [sp, #8]
   13f5a:	2300      	movs	r3, #0
   13f5c:	e01c      	b.n	13f98 <l2cap_recv+0x50>
	return net_buf_simple_pull_mem(&buf->b, len);
   13f5e:	2104      	movs	r1, #4
   13f60:	f104 000c 	add.w	r0, r4, #12
   13f64:	f004 fc76 	bl	18854 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   13f68:	8a23      	ldrh	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   13f6a:	8842      	ldrh	r2, [r0, #2]
   13f6c:	4605      	mov	r5, r0
	if (buf->len != len) {
   13f6e:	429a      	cmp	r2, r3
   13f70:	d00e      	beq.n	13f90 <l2cap_recv+0x48>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   13f72:	e9cd 3203 	strd	r3, r2, [sp, #12]
   13f76:	4b26      	ldr	r3, [pc, #152]	; (14010 <l2cap_recv+0xc8>)
   13f78:	2201      	movs	r2, #1
   13f7a:	9302      	str	r3, [sp, #8]
   13f7c:	2300      	movs	r3, #0
   13f7e:	4925      	ldr	r1, [pc, #148]	; (14014 <l2cap_recv+0xcc>)
   13f80:	4618      	mov	r0, r3
   13f82:	e9cd 3300 	strd	r3, r3, [sp]
   13f86:	f011 fc3e 	bl	25806 <z_log_msg_runtime_create.constprop.0>
}
   13f8a:	2000      	movs	r0, #0
   13f8c:	b006      	add	sp, #24
   13f8e:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   13f90:	7843      	ldrb	r3, [r0, #1]
   13f92:	b94b      	cbnz	r3, 13fa8 <l2cap_recv+0x60>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   13f94:	4a20      	ldr	r2, [pc, #128]	; (14018 <l2cap_recv+0xd0>)
   13f96:	9202      	str	r2, [sp, #8]
   13f98:	2201      	movs	r2, #1
   13f9a:	4618      	mov	r0, r3
   13f9c:	e9cd 3300 	strd	r3, r3, [sp]
   13fa0:	491c      	ldr	r1, [pc, #112]	; (14014 <l2cap_recv+0xcc>)
   13fa2:	f011 fc30 	bl	25806 <z_log_msg_runtime_create.constprop.0>
		return 0;
   13fa6:	e7f0      	b.n	13f8a <l2cap_recv+0x42>
	switch (hdr->code) {
   13fa8:	7803      	ldrb	r3, [r0, #0]
   13faa:	2b01      	cmp	r3, #1
   13fac:	d0ed      	beq.n	13f8a <l2cap_recv+0x42>
   13fae:	2b13      	cmp	r3, #19
   13fb0:	d103      	bne.n	13fba <l2cap_recv+0x72>
	if (buf->len < sizeof(*rsp)) {
   13fb2:	2a01      	cmp	r2, #1
   13fb4:	d8e9      	bhi.n	13f8a <l2cap_recv+0x42>
		LOG_ERR("Too small LE conn param rsp");
   13fb6:	4b19      	ldr	r3, [pc, #100]	; (1401c <l2cap_recv+0xd4>)
   13fb8:	e7ce      	b.n	13f58 <l2cap_recv+0x10>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   13fba:	2400      	movs	r4, #0
	switch (hdr->code) {
   13fbc:	9303      	str	r3, [sp, #12]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   13fbe:	4b18      	ldr	r3, [pc, #96]	; (14020 <l2cap_recv+0xd8>)
   13fc0:	2202      	movs	r2, #2
   13fc2:	4620      	mov	r0, r4
   13fc4:	4913      	ldr	r1, [pc, #76]	; (14014 <l2cap_recv+0xcc>)
   13fc6:	9302      	str	r3, [sp, #8]
   13fc8:	e9cd 4400 	strd	r4, r4, [sp]
   13fcc:	4623      	mov	r3, r4
   13fce:	f011 fc1a 	bl	25806 <z_log_msg_runtime_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   13fd2:	7869      	ldrb	r1, [r5, #1]
   13fd4:	2202      	movs	r2, #2
   13fd6:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   13fd8:	6836      	ldr	r6, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   13fda:	f7ff ff0f 	bl	13dfc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   13fde:	4605      	mov	r5, r0
   13fe0:	2800      	cmp	r0, #0
   13fe2:	d0d2      	beq.n	13f8a <l2cap_recv+0x42>
	return net_buf_simple_add(&buf->b, len);
   13fe4:	2102      	movs	r1, #2
   13fe6:	300c      	adds	r0, #12
   13fe8:	f004 fc52 	bl	18890 <net_buf_simple_add>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   13fec:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   13fee:	7004      	strb	r4, [r0, #0]
   13ff0:	7044      	strb	r4, [r0, #1]
   13ff2:	462a      	mov	r2, r5
   13ff4:	2105      	movs	r1, #5
   13ff6:	4630      	mov	r0, r6
   13ff8:	9400      	str	r4, [sp, #0]
   13ffa:	f011 fc61 	bl	258c0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   13ffe:	2800      	cmp	r0, #0
   14000:	d0c3      	beq.n	13f8a <l2cap_recv+0x42>
		net_buf_unref(buf);
   14002:	4628      	mov	r0, r5
   14004:	f004 fb22 	bl	1864c <net_buf_unref>
   14008:	e7bf      	b.n	13f8a <l2cap_recv+0x42>
   1400a:	bf00      	nop
   1400c:	0002d3a2 	.word	0x0002d3a2
   14010:	0002d3c0 	.word	0x0002d3c0
   14014:	000296ec 	.word	0x000296ec
   14018:	0002d3e1 	.word	0x0002d3e1
   1401c:	0002d402 	.word	0x0002d402
   14020:	0002d41e 	.word	0x0002d41e

00014024 <bt_l2cap_recv>:
{
   14024:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   14026:	8a0b      	ldrh	r3, [r1, #16]
{
   14028:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1402a:	2b03      	cmp	r3, #3
{
   1402c:	460c      	mov	r4, r1
   1402e:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   14030:	d80f      	bhi.n	14052 <bt_l2cap_recv+0x2e>
		LOG_ERR("Too small L2CAP PDU received");
   14032:	4b15      	ldr	r3, [pc, #84]	; (14088 <bt_l2cap_recv+0x64>)
   14034:	2201      	movs	r2, #1
   14036:	9302      	str	r3, [sp, #8]
   14038:	2300      	movs	r3, #0
   1403a:	4914      	ldr	r1, [pc, #80]	; (1408c <bt_l2cap_recv+0x68>)
   1403c:	4618      	mov	r0, r3
   1403e:	e9cd 3300 	strd	r3, r3, [sp]
   14042:	f011 fbe0 	bl	25806 <z_log_msg_runtime_create.constprop.0>
	net_buf_unref(buf);
   14046:	4620      	mov	r0, r4
}
   14048:	b005      	add	sp, #20
   1404a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   1404e:	f004 bafd 	b.w	1864c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   14052:	2104      	movs	r1, #4
   14054:	f104 000c 	add.w	r0, r4, #12
   14058:	f004 fbfc 	bl	18854 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1405c:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1405e:	4628      	mov	r0, r5
   14060:	f011 fc50 	bl	25904 <bt_l2cap_le_lookup_rx_cid>
   14064:	4603      	mov	r3, r0
	if (!chan) {
   14066:	b948      	cbnz	r0, 1407c <bt_l2cap_recv+0x58>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   14068:	4a09      	ldr	r2, [pc, #36]	; (14090 <bt_l2cap_recv+0x6c>)
   1406a:	9103      	str	r1, [sp, #12]
   1406c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   14070:	4906      	ldr	r1, [pc, #24]	; (1408c <bt_l2cap_recv+0x68>)
   14072:	2202      	movs	r2, #2
   14074:	9000      	str	r0, [sp, #0]
   14076:	f011 fbc6 	bl	25806 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1407a:	e7e4      	b.n	14046 <bt_l2cap_recv+0x22>
	chan->ops->recv(chan, buf);
   1407c:	6843      	ldr	r3, [r0, #4]
   1407e:	4621      	mov	r1, r4
   14080:	695b      	ldr	r3, [r3, #20]
   14082:	4798      	blx	r3
   14084:	e7df      	b.n	14046 <bt_l2cap_recv+0x22>
   14086:	bf00      	nop
   14088:	0002d446 	.word	0x0002d446
   1408c:	000296ec 	.word	0x000296ec
   14090:	0002d463 	.word	0x0002d463

00014094 <bt_l2cap_update_conn_param>:
{
   14094:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   14096:	4b17      	ldr	r3, [pc, #92]	; (140f4 <bt_l2cap_update_conn_param+0x60>)
{
   14098:	460e      	mov	r6, r1
	ident++;
   1409a:	7819      	ldrb	r1, [r3, #0]
{
   1409c:	4605      	mov	r5, r0
	ident++;
   1409e:	3101      	adds	r1, #1
   140a0:	b2c9      	uxtb	r1, r1
   140a2:	2901      	cmp	r1, #1
   140a4:	bf38      	it	cc
   140a6:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   140a8:	2208      	movs	r2, #8
   140aa:	2012      	movs	r0, #18
	ident++;
   140ac:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   140ae:	f7ff fea5 	bl	13dfc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   140b2:	4604      	mov	r4, r0
   140b4:	b1d0      	cbz	r0, 140ec <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   140b6:	2108      	movs	r1, #8
   140b8:	300c      	adds	r0, #12
   140ba:	f004 fbe9 	bl	18890 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   140be:	8833      	ldrh	r3, [r6, #0]
   140c0:	4622      	mov	r2, r4
   140c2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   140c4:	8873      	ldrh	r3, [r6, #2]
   140c6:	2105      	movs	r1, #5
   140c8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   140ca:	88b3      	ldrh	r3, [r6, #4]
   140cc:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   140ce:	88f3      	ldrh	r3, [r6, #6]
   140d0:	80c3      	strh	r3, [r0, #6]
   140d2:	2300      	movs	r3, #0
   140d4:	4628      	mov	r0, r5
   140d6:	9300      	str	r3, [sp, #0]
   140d8:	f011 fbf2 	bl	258c0 <bt_l2cap_send_cb>
	if (err) {
   140dc:	4605      	mov	r5, r0
   140de:	b110      	cbz	r0, 140e6 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   140e0:	4620      	mov	r0, r4
   140e2:	f004 fab3 	bl	1864c <net_buf_unref>
}
   140e6:	4628      	mov	r0, r5
   140e8:	b002      	add	sp, #8
   140ea:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   140ec:	f06f 050b 	mvn.w	r5, #11
   140f0:	e7f9      	b.n	140e6 <bt_l2cap_update_conn_param+0x52>
   140f2:	bf00      	nop
   140f4:	20021d82 	.word	0x20021d82

000140f8 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   140f8:	2823      	cmp	r0, #35	; 0x23
   140fa:	d81f      	bhi.n	1413c <att_op_get_type+0x44>
   140fc:	281a      	cmp	r0, #26
   140fe:	d804      	bhi.n	1410a <att_op_get_type+0x12>
   14100:	1e43      	subs	r3, r0, #1
   14102:	2b18      	cmp	r3, #24
   14104:	d90e      	bls.n	14124 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   14106:	2006      	movs	r0, #6
   14108:	4770      	bx	lr
	switch (op) {
   1410a:	f1a0 031b 	sub.w	r3, r0, #27
   1410e:	2b08      	cmp	r3, #8
   14110:	d81e      	bhi.n	14150 <att_op_get_type+0x58>
   14112:	e8df f003 	tbb	[pc, r3]
   14116:	1d05      	.short	0x1d05
   14118:	191d231b 	.word	0x191d231b
   1411c:	1d25      	.short	0x1d25
   1411e:	05          	.byte	0x05
   1411f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   14120:	2003      	movs	r0, #3
   14122:	4770      	bx	lr
   14124:	2301      	movs	r3, #1
	switch (op) {
   14126:	4a0f      	ldr	r2, [pc, #60]	; (14164 <att_op_get_type+0x6c>)
   14128:	4083      	lsls	r3, r0
   1412a:	401a      	ands	r2, r3
   1412c:	b9c2      	cbnz	r2, 14160 <att_op_get_type+0x68>
   1412e:	4a0e      	ldr	r2, [pc, #56]	; (14168 <att_op_get_type+0x70>)
   14130:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   14132:	2a00      	cmp	r2, #0
   14134:	bf14      	ite	ne
   14136:	2001      	movne	r0, #1
   14138:	2006      	moveq	r0, #6
   1413a:	4770      	bx	lr
	switch (op) {
   1413c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   14140:	2b52      	cmp	r3, #82	; 0x52
   14142:	d105      	bne.n	14150 <att_op_get_type+0x58>
		return ATT_COMMAND;
   14144:	2000      	movs	r0, #0
}
   14146:	4770      	bx	lr
		return ATT_REQUEST;
   14148:	2001      	movs	r0, #1
   1414a:	4770      	bx	lr
		return ATT_INDICATION;
   1414c:	2005      	movs	r0, #5
   1414e:	4770      	bx	lr
		return ATT_COMMAND;
   14150:	f010 0f40 	tst.w	r0, #64	; 0x40
   14154:	bf0c      	ite	eq
   14156:	2006      	moveq	r0, #6
   14158:	2000      	movne	r0, #0
   1415a:	4770      	bx	lr
	switch (op) {
   1415c:	2004      	movs	r0, #4
   1415e:	4770      	bx	lr
		return ATT_RESPONSE;
   14160:	2002      	movs	r0, #2
   14162:	4770      	bx	lr
   14164:	028aaaaa 	.word	0x028aaaaa
   14168:	01455554 	.word	0x01455554

0001416c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1416c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1416e:	3804      	subs	r0, #4
   14170:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   14172:	a901      	add	r1, sp, #4
   14174:	4802      	ldr	r0, [pc, #8]	; (14180 <bt_att_released+0x14>)
   14176:	f00a fbb9 	bl	1e8ec <k_mem_slab_free>
}
   1417a:	b003      	add	sp, #12
   1417c:	f85d fb04 	ldr.w	pc, [sp], #4
   14180:	20008a2c 	.word	0x20008a2c

00014184 <tx_meta_data_free>:
{
   14184:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   14186:	4604      	mov	r4, r0
   14188:	b948      	cbnz	r0, 1419e <tx_meta_data_free+0x1a>
   1418a:	490a      	ldr	r1, [pc, #40]	; (141b4 <tx_meta_data_free+0x30>)
   1418c:	480a      	ldr	r0, [pc, #40]	; (141b8 <tx_meta_data_free+0x34>)
   1418e:	23a6      	movs	r3, #166	; 0xa6
   14190:	4a0a      	ldr	r2, [pc, #40]	; (141bc <tx_meta_data_free+0x38>)
   14192:	f00f ff46 	bl	24022 <assert_print>
   14196:	21a6      	movs	r1, #166	; 0xa6
   14198:	4808      	ldr	r0, [pc, #32]	; (141bc <tx_meta_data_free+0x38>)
   1419a:	f00f ff3b 	bl	24014 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   1419e:	2100      	movs	r1, #0
   141a0:	2214      	movs	r2, #20
   141a2:	f014 fb35 	bl	28810 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   141a6:	4621      	mov	r1, r4
}
   141a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   141ac:	4804      	ldr	r0, [pc, #16]	; (141c0 <tx_meta_data_free+0x3c>)
   141ae:	f014 b93f 	b.w	28430 <k_queue_append>
   141b2:	bf00      	nop
   141b4:	0002cff0 	.word	0x0002cff0
   141b8:	0002a669 	.word	0x0002a669
   141bc:	0002d498 	.word	0x0002d498
   141c0:	20008bb4 	.word	0x20008bb4

000141c4 <find_type_cb>:
{
   141c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   141c8:	f642 0301 	movw	r3, #10241	; 0x2801
   141cc:	2500      	movs	r5, #0
{
   141ce:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   141d0:	f8d2 9000 	ldr.w	r9, [r2]
{
   141d4:	4607      	mov	r7, r0
   141d6:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   141d8:	6800      	ldr	r0, [r0, #0]
   141da:	a90d      	add	r1, sp, #52	; 0x34
	struct bt_conn *conn = chan->chan.chan.conn;
   141dc:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
   141e0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   141e2:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   141e6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   141ea:	f010 fe99 	bl	24f20 <bt_uuid_cmp>
   141ee:	2800      	cmp	r0, #0
   141f0:	d067      	beq.n	142c2 <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   141f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   141f6:	6838      	ldr	r0, [r7, #0]
   141f8:	a90d      	add	r1, sp, #52	; 0x34
   141fa:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   141fe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   14202:	f010 fe8d 	bl	24f20 <bt_uuid_cmp>
   14206:	b138      	cbz	r0, 14218 <find_type_cb+0x54>
		if (data->group &&
   14208:	68a3      	ldr	r3, [r4, #8]
   1420a:	b11b      	cbz	r3, 14214 <find_type_cb+0x50>
   1420c:	885a      	ldrh	r2, [r3, #2]
   1420e:	42b2      	cmp	r2, r6
   14210:	d200      	bcs.n	14214 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   14212:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   14214:	2001      	movs	r0, #1
   14216:	e009      	b.n	1422c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   14218:	6861      	ldr	r1, [r4, #4]
   1421a:	4608      	mov	r0, r1
   1421c:	f011 fb86 	bl	2592c <net_buf_frags_len>
   14220:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   14224:	1a1b      	subs	r3, r3, r0
   14226:	2b03      	cmp	r3, #3
   14228:	d803      	bhi.n	14232 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1422a:	2000      	movs	r0, #0
}
   1422c:	b013      	add	sp, #76	; 0x4c
   1422e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   14232:	4608      	mov	r0, r1
   14234:	f004 fa66 	bl	18704 <net_buf_frag_last>
   14238:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1423a:	6860      	ldr	r0, [r4, #4]
   1423c:	f011 fb76 	bl	2592c <net_buf_frags_len>
   14240:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   14244:	f105 0b0c 	add.w	fp, r5, #12
   14248:	ebaa 0a00 	sub.w	sl, sl, r0
   1424c:	4658      	mov	r0, fp
   1424e:	f012 fd6d 	bl	26d2c <net_buf_simple_tailroom>
   14252:	4582      	cmp	sl, r0
   14254:	d238      	bcs.n	142c8 <find_type_cb+0x104>
   14256:	6860      	ldr	r0, [r4, #4]
   14258:	f011 fb68 	bl	2592c <net_buf_frags_len>
   1425c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   14260:	1a18      	subs	r0, r3, r0
	if (!len) {
   14262:	b970      	cbnz	r0, 14282 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   14264:	6863      	ldr	r3, [r4, #4]
   14266:	7a98      	ldrb	r0, [r3, #10]
   14268:	f003 ffb6 	bl	181d8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1426c:	2200      	movs	r2, #0
   1426e:	2300      	movs	r3, #0
   14270:	f012 fd42 	bl	26cf8 <net_buf_alloc_fixed>
		if (!frag) {
   14274:	4605      	mov	r5, r0
   14276:	2800      	cmp	r0, #0
   14278:	d0d7      	beq.n	1422a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1427a:	4601      	mov	r1, r0
   1427c:	6860      	ldr	r0, [r4, #4]
   1427e:	f004 fa87 	bl	18790 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   14282:	2300      	movs	r3, #0
   14284:	9300      	str	r3, [sp, #0]
   14286:	2310      	movs	r3, #16
   14288:	4639      	mov	r1, r7
   1428a:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1428e:	4640      	mov	r0, r8
   14290:	eb0d 0203 	add.w	r2, sp, r3
   14294:	47c8      	blx	r9
	if (read < 0) {
   14296:	1e07      	subs	r7, r0, #0
   14298:	db13      	blt.n	142c2 <find_type_cb+0xfe>
	if (read != data->value_len) {
   1429a:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1429c:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1429e:	42ba      	cmp	r2, r7
   142a0:	d031      	beq.n	14306 <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   142a2:	4601      	mov	r1, r0
   142a4:	a80d      	add	r0, sp, #52	; 0x34
   142a6:	f010 fe69 	bl	24f7c <bt_uuid_create>
   142aa:	4603      	mov	r3, r0
   142ac:	b980      	cbnz	r0, 142d0 <find_type_cb+0x10c>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   142ae:	7c22      	ldrb	r2, [r4, #16]
   142b0:	9203      	str	r2, [sp, #12]
   142b2:	4a17      	ldr	r2, [pc, #92]	; (14310 <find_type_cb+0x14c>)
			LOG_WRN("Unable to create UUID: size %d", read);
   142b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   142b8:	4916      	ldr	r1, [pc, #88]	; (14314 <find_type_cb+0x150>)
   142ba:	2202      	movs	r2, #2
   142bc:	9300      	str	r3, [sp, #0]
   142be:	f011 fc24 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
	data->group = NULL;
   142c2:	2300      	movs	r3, #0
   142c4:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   142c6:	e7a5      	b.n	14214 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   142c8:	4658      	mov	r0, fp
   142ca:	f012 fd2f 	bl	26d2c <net_buf_simple_tailroom>
   142ce:	e7c8      	b.n	14262 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   142d0:	b2fa      	uxtb	r2, r7
   142d2:	a904      	add	r1, sp, #16
   142d4:	a808      	add	r0, sp, #32
   142d6:	f010 fe51 	bl	24f7c <bt_uuid_create>
   142da:	4603      	mov	r3, r0
   142dc:	b910      	cbnz	r0, 142e4 <find_type_cb+0x120>
			LOG_WRN("Unable to create UUID: size %d", read);
   142de:	4a0e      	ldr	r2, [pc, #56]	; (14318 <find_type_cb+0x154>)
   142e0:	9703      	str	r7, [sp, #12]
   142e2:	e7e7      	b.n	142b4 <find_type_cb+0xf0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   142e4:	a908      	add	r1, sp, #32
   142e6:	a80d      	add	r0, sp, #52	; 0x34
   142e8:	f010 fe1a 	bl	24f20 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   142ec:	2800      	cmp	r0, #0
   142ee:	d1e8      	bne.n	142c2 <find_type_cb+0xfe>
	data->err = 0x00;
   142f0:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   142f2:	2104      	movs	r1, #4
   142f4:	7463      	strb	r3, [r4, #17]
   142f6:	f105 000c 	add.w	r0, r5, #12
   142fa:	f004 fac9 	bl	18890 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   142fe:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   14300:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   14302:	68a3      	ldr	r3, [r4, #8]
   14304:	e785      	b.n	14212 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   14306:	a904      	add	r1, sp, #16
   14308:	f014 fa4b 	bl	287a2 <memcmp>
   1430c:	e7ee      	b.n	142ec <find_type_cb+0x128>
   1430e:	bf00      	nop
   14310:	0002d4c7 	.word	0x0002d4c7
   14314:	0002969c 	.word	0x0002969c
   14318:	0002d4e6 	.word	0x0002d4e6

0001431c <chan_send>:
{
   1431c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14320:	4606      	mov	r6, r0
   14322:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   14324:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   14328:	68cb      	ldr	r3, [r1, #12]
{
   1432a:	b085      	sub	sp, #20
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1432c:	2102      	movs	r1, #2
   1432e:	3098      	adds	r0, #152	; 0x98
   14330:	f011 fb16 	bl	25960 <atomic_test_bit>
   14334:	2800      	cmp	r0, #0
   14336:	d053      	beq.n	143e0 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   14338:	781b      	ldrb	r3, [r3, #0]
   1433a:	2bd2      	cmp	r3, #210	; 0xd2
   1433c:	d11a      	bne.n	14374 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   1433e:	6833      	ldr	r3, [r6, #0]
   14340:	4621      	mov	r1, r4
   14342:	6818      	ldr	r0, [r3, #0]
   14344:	f012 fbb9 	bl	26aba <bt_smp_sign>
		if (err) {
   14348:	4605      	mov	r5, r0
   1434a:	b198      	cbz	r0, 14374 <chan_send+0x58>
			LOG_ERR("Error signing data");
   1434c:	4b26      	ldr	r3, [pc, #152]	; (143e8 <chan_send+0xcc>)
   1434e:	2201      	movs	r2, #1
   14350:	9302      	str	r3, [sp, #8]
   14352:	2300      	movs	r3, #0
   14354:	4925      	ldr	r1, [pc, #148]	; (143ec <chan_send+0xd0>)
   14356:	4618      	mov	r0, r3
   14358:	e9cd 3300 	strd	r3, r3, [sp]
   1435c:	f011 fbd5 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   14360:	69a0      	ldr	r0, [r4, #24]
   14362:	f7ff ff0f 	bl	14184 <tx_meta_data_free>
			net_buf_unref(buf);
   14366:	4620      	mov	r0, r4
   14368:	f004 f970 	bl	1864c <net_buf_unref>
}
   1436c:	4628      	mov	r0, r5
   1436e:	b005      	add	sp, #20
   14370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   14374:	f104 000c 	add.w	r0, r4, #12
   14378:	f012 fcd4 	bl	26d24 <net_buf_simple_headroom>
	state->len = buf->len;
   1437c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   14380:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14384:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   14386:	4607      	mov	r7, r0
   14388:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1438a:	68e3      	ldr	r3, [r4, #12]
   1438c:	7818      	ldrb	r0, [r3, #0]
   1438e:	f7ff feb3 	bl	140f8 <att_op_get_type>
   14392:	2805      	cmp	r0, #5
   14394:	4605      	mov	r5, r0
	switch (op_type) {
   14396:	d813      	bhi.n	143c0 <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14398:	4b15      	ldr	r3, [pc, #84]	; (143f0 <chan_send+0xd4>)
   1439a:	4622      	mov	r2, r4
   1439c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   143a0:	2104      	movs	r1, #4
   143a2:	4630      	mov	r0, r6
   143a4:	f8cd 9000 	str.w	r9, [sp]
   143a8:	f011 fa8a 	bl	258c0 <bt_l2cap_send_cb>
	if (err) {
   143ac:	4605      	mov	r5, r0
   143ae:	2800      	cmp	r0, #0
   143b0:	d0dc      	beq.n	1436c <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   143b2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   143b4:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   143b8:	fa13 f787 	uxtah	r7, r3, r7
   143bc:	60e7      	str	r7, [r4, #12]
}
   143be:	e7d5      	b.n	1436c <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   143c0:	f240 2357 	movw	r3, #599	; 0x257
   143c4:	4a0b      	ldr	r2, [pc, #44]	; (143f4 <chan_send+0xd8>)
   143c6:	490c      	ldr	r1, [pc, #48]	; (143f8 <chan_send+0xdc>)
   143c8:	480c      	ldr	r0, [pc, #48]	; (143fc <chan_send+0xe0>)
   143ca:	f00f fe2a 	bl	24022 <assert_print>
   143ce:	4629      	mov	r1, r5
   143d0:	480b      	ldr	r0, [pc, #44]	; (14400 <chan_send+0xe4>)
   143d2:	f00f fe26 	bl	24022 <assert_print>
   143d6:	f240 2157 	movw	r1, #599	; 0x257
   143da:	4806      	ldr	r0, [pc, #24]	; (143f4 <chan_send+0xd8>)
   143dc:	f00f fe1a 	bl	24014 <assert_post_action>
		return -EINVAL;
   143e0:	f06f 0515 	mvn.w	r5, #21
   143e4:	e7c2      	b.n	1436c <chan_send+0x50>
   143e6:	bf00      	nop
   143e8:	0002d505 	.word	0x0002d505
   143ec:	0002969c 	.word	0x0002969c
   143f0:	0002a058 	.word	0x0002a058
   143f4:	0002d498 	.word	0x0002d498
   143f8:	0002fb7c 	.word	0x0002fb7c
   143fc:	0002a669 	.word	0x0002a669
   14400:	0002d518 	.word	0x0002d518

00014404 <bt_att_chan_req_send>:
{
   14404:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   14406:	b958      	cbnz	r0, 14420 <bt_att_chan_req_send+0x1c>
   14408:	4919      	ldr	r1, [pc, #100]	; (14470 <bt_att_chan_req_send+0x6c>)
   1440a:	f44f 7346 	mov.w	r3, #792	; 0x318
   1440e:	4a19      	ldr	r2, [pc, #100]	; (14474 <bt_att_chan_req_send+0x70>)
   14410:	4819      	ldr	r0, [pc, #100]	; (14478 <bt_att_chan_req_send+0x74>)
   14412:	f00f fe06 	bl	24022 <assert_print>
   14416:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   1441a:	4816      	ldr	r0, [pc, #88]	; (14474 <bt_att_chan_req_send+0x70>)
   1441c:	f00f fdfa 	bl	24014 <assert_post_action>
   14420:	b949      	cbnz	r1, 14436 <bt_att_chan_req_send+0x32>
   14422:	4916      	ldr	r1, [pc, #88]	; (1447c <bt_att_chan_req_send+0x78>)
   14424:	f240 3319 	movw	r3, #793	; 0x319
   14428:	4a12      	ldr	r2, [pc, #72]	; (14474 <bt_att_chan_req_send+0x70>)
   1442a:	4813      	ldr	r0, [pc, #76]	; (14478 <bt_att_chan_req_send+0x74>)
   1442c:	f00f fdf9 	bl	24022 <assert_print>
   14430:	f240 3119 	movw	r1, #793	; 0x319
   14434:	e7f1      	b.n	1441a <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   14436:	684a      	ldr	r2, [r1, #4]
   14438:	b94a      	cbnz	r2, 1444e <bt_att_chan_req_send+0x4a>
   1443a:	4911      	ldr	r1, [pc, #68]	; (14480 <bt_att_chan_req_send+0x7c>)
   1443c:	f240 331a 	movw	r3, #794	; 0x31a
   14440:	4a0c      	ldr	r2, [pc, #48]	; (14474 <bt_att_chan_req_send+0x70>)
   14442:	480d      	ldr	r0, [pc, #52]	; (14478 <bt_att_chan_req_send+0x74>)
   14444:	f00f fded 	bl	24022 <assert_print>
   14448:	f240 311a 	movw	r1, #794	; 0x31a
   1444c:	e7e5      	b.n	1441a <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   1444e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   14452:	b14b      	cbz	r3, 14468 <bt_att_chan_req_send+0x64>
   14454:	490b      	ldr	r1, [pc, #44]	; (14484 <bt_att_chan_req_send+0x80>)
   14456:	f240 331b 	movw	r3, #795	; 0x31b
   1445a:	4a06      	ldr	r2, [pc, #24]	; (14474 <bt_att_chan_req_send+0x70>)
   1445c:	4806      	ldr	r0, [pc, #24]	; (14478 <bt_att_chan_req_send+0x74>)
   1445e:	f00f fde0 	bl	24022 <assert_print>
   14462:	f240 311b 	movw	r1, #795	; 0x31b
   14466:	e7d8      	b.n	1441a <bt_att_chan_req_send+0x16>
}
   14468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   1446c:	f011 bb5c 	b.w	25b28 <chan_req_send>
   14470:	0002d531 	.word	0x0002d531
   14474:	0002d498 	.word	0x0002d498
   14478:	0002a669 	.word	0x0002a669
   1447c:	0002d547 	.word	0x0002d547
   14480:	0002d536 	.word	0x0002d536
   14484:	0002d540 	.word	0x0002d540

00014488 <att_get>:
{
   14488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1448a:	7b43      	ldrb	r3, [r0, #13]
   1448c:	2b07      	cmp	r3, #7
   1448e:	d00d      	beq.n	144ac <att_get+0x24>
		LOG_WRN("Not connected");
   14490:	4b18      	ldr	r3, [pc, #96]	; (144f4 <att_get+0x6c>)
   14492:	2202      	movs	r2, #2
   14494:	9302      	str	r3, [sp, #8]
   14496:	2300      	movs	r3, #0
   14498:	4618      	mov	r0, r3
   1449a:	e9cd 3300 	strd	r3, r3, [sp]
   1449e:	4916      	ldr	r1, [pc, #88]	; (144f8 <att_get+0x70>)
		LOG_ERR("Unable to find ATT channel");
   144a0:	f011 fb33 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
		return NULL;
   144a4:	2000      	movs	r0, #0
}
   144a6:	b005      	add	sp, #20
   144a8:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   144ac:	2104      	movs	r1, #4
   144ae:	f011 fa29 	bl	25904 <bt_l2cap_le_lookup_rx_cid>
   144b2:	4603      	mov	r3, r0
	if (!chan) {
   144b4:	b930      	cbnz	r0, 144c4 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   144b6:	4a11      	ldr	r2, [pc, #68]	; (144fc <att_get+0x74>)
   144b8:	490f      	ldr	r1, [pc, #60]	; (144f8 <att_get+0x70>)
   144ba:	e9cd 0201 	strd	r0, r2, [sp, #4]
   144be:	9000      	str	r0, [sp, #0]
   144c0:	2201      	movs	r2, #1
   144c2:	e7ed      	b.n	144a0 <att_get+0x18>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   144c4:	2102      	movs	r1, #2
   144c6:	3094      	adds	r0, #148	; 0x94
   144c8:	f011 fa4a 	bl	25960 <atomic_test_bit>
   144cc:	b970      	cbnz	r0, 144ec <att_get+0x64>
   144ce:	490c      	ldr	r1, [pc, #48]	; (14500 <att_get+0x78>)
   144d0:	f640 332a 	movw	r3, #2858	; 0xb2a
   144d4:	4a0b      	ldr	r2, [pc, #44]	; (14504 <att_get+0x7c>)
   144d6:	480c      	ldr	r0, [pc, #48]	; (14508 <att_get+0x80>)
   144d8:	f00f fda3 	bl	24022 <assert_print>
   144dc:	480b      	ldr	r0, [pc, #44]	; (1450c <att_get+0x84>)
   144de:	f00f fda0 	bl	24022 <assert_print>
   144e2:	f640 312a 	movw	r1, #2858	; 0xb2a
   144e6:	4807      	ldr	r0, [pc, #28]	; (14504 <att_get+0x7c>)
   144e8:	f00f fd94 	bl	24014 <assert_post_action>
	return att_chan->att;
   144ec:	f853 0c04 	ldr.w	r0, [r3, #-4]
   144f0:	e7d9      	b.n	144a6 <att_get+0x1e>
   144f2:	bf00      	nop
   144f4:	0002d54b 	.word	0x0002d54b
   144f8:	0002969c 	.word	0x0002969c
   144fc:	0002d559 	.word	0x0002d559
   14500:	0002d574 	.word	0x0002d574
   14504:	0002d498 	.word	0x0002d498
   14508:	0002a669 	.word	0x0002a669
   1450c:	0002d5a4 	.word	0x0002d5a4

00014510 <bt_att_connected>:
{
   14510:	b510      	push	{r4, lr}
   14512:	4604      	mov	r4, r0
   14514:	f100 0394 	add.w	r3, r0, #148	; 0x94
   14518:	e8d3 1fef 	ldaex	r1, [r3]
   1451c:	f041 0104 	orr.w	r1, r1, #4
   14520:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14524:	2a00      	cmp	r2, #0
   14526:	d1f7      	bne.n	14518 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14528:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   1452a:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1452c:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1452e:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   14530:	f011 fa58 	bl	259e4 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   14534:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   14538:	4903      	ldr	r1, [pc, #12]	; (14548 <bt_att_connected+0x38>)
   1453a:	f00b fa93 	bl	1fa64 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1453e:	6820      	ldr	r0, [r4, #0]
}
   14540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   14544:	f001 bf04 	b.w	16350 <bt_gatt_connected>
   14548:	000151a5 	.word	0x000151a5

0001454c <read_group_cb>:
{
   1454c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14550:	f04f 0800 	mov.w	r8, #0
   14554:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   14558:	4605      	mov	r5, r0
   1455a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1455c:	6800      	ldr	r0, [r0, #0]
   1455e:	a902      	add	r1, sp, #8
{
   14560:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   14562:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14564:	f88d 8008 	strb.w	r8, [sp, #8]
   14568:	f8ad 300a 	strh.w	r3, [sp, #10]
   1456c:	f010 fcd8 	bl	24f20 <bt_uuid_cmp>
   14570:	b1a0      	cbz	r0, 1459c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14572:	f642 0301 	movw	r3, #10241	; 0x2801
   14576:	6828      	ldr	r0, [r5, #0]
   14578:	a903      	add	r1, sp, #12
   1457a:	f88d 800c 	strb.w	r8, [sp, #12]
   1457e:	f8ad 300e 	strh.w	r3, [sp, #14]
   14582:	f010 fccd 	bl	24f20 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14586:	b148      	cbz	r0, 1459c <read_group_cb+0x50>
		if (data->group &&
   14588:	6923      	ldr	r3, [r4, #16]
   1458a:	b11b      	cbz	r3, 14594 <read_group_cb+0x48>
   1458c:	885a      	ldrh	r2, [r3, #2]
   1458e:	42b2      	cmp	r2, r6
   14590:	d200      	bcs.n	14594 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   14592:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   14594:	2001      	movs	r0, #1
}
   14596:	b004      	add	sp, #16
   14598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1459c:	6861      	ldr	r1, [r4, #4]
   1459e:	6828      	ldr	r0, [r5, #0]
   145a0:	f010 fcbe 	bl	24f20 <bt_uuid_cmp>
   145a4:	b110      	cbz	r0, 145ac <read_group_cb+0x60>
		data->group = NULL;
   145a6:	2300      	movs	r3, #0
   145a8:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   145aa:	e7f3      	b.n	14594 <read_group_cb+0x48>
	if (data->rsp->len &&
   145ac:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   145ae:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   145b0:	781a      	ldrb	r2, [r3, #0]
   145b2:	b132      	cbz	r2, 145c2 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   145b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   145b6:	8a01      	ldrh	r1, [r0, #16]
   145b8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   145ba:	4293      	cmp	r3, r2
   145bc:	da01      	bge.n	145c2 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   145be:	2000      	movs	r0, #0
   145c0:	e7e9      	b.n	14596 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   145c2:	2104      	movs	r1, #4
   145c4:	300c      	adds	r0, #12
   145c6:	f004 f963 	bl	18890 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   145ca:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   145cc:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   145ce:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   145d0:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   145d2:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   145d4:	4b07      	ldr	r3, [pc, #28]	; (145f4 <read_group_cb+0xa8>)
   145d6:	9401      	str	r4, [sp, #4]
   145d8:	9300      	str	r3, [sp, #0]
   145da:	4638      	mov	r0, r7
   145dc:	2300      	movs	r3, #0
   145de:	68a2      	ldr	r2, [r4, #8]
   145e0:	f011 fae3 	bl	25baa <att_chan_read>
	if (read < 0) {
   145e4:	2800      	cmp	r0, #0
   145e6:	dbea      	blt.n	145be <read_group_cb+0x72>
	if (!data->group) {
   145e8:	6920      	ldr	r0, [r4, #16]
   145ea:	3800      	subs	r0, #0
   145ec:	bf18      	it	ne
   145ee:	2001      	movne	r0, #1
   145f0:	e7d1      	b.n	14596 <read_group_cb+0x4a>
   145f2:	bf00      	nop
   145f4:	00025a4b 	.word	0x00025a4b

000145f8 <read_type_cb>:
{
   145f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   145fc:	6817      	ldr	r7, [r2, #0]
{
   145fe:	4605      	mov	r5, r0
   14600:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14602:	6800      	ldr	r0, [r0, #0]
   14604:	6851      	ldr	r1, [r2, #4]
{
   14606:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   14608:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1460a:	f010 fc89 	bl	24f20 <bt_uuid_cmp>
   1460e:	4681      	mov	r9, r0
   14610:	2800      	cmp	r0, #0
   14612:	d13c      	bne.n	1468e <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14614:	4630      	mov	r0, r6
   14616:	2295      	movs	r2, #149	; 0x95
   14618:	4629      	mov	r1, r5
   1461a:	f011 ff8c 	bl	26536 <bt_gatt_check_perm>
   1461e:	4606      	mov	r6, r0
   14620:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   14622:	b140      	cbz	r0, 14636 <read_type_cb+0x3e>
		if (data->rsp->len) {
   14624:	68e3      	ldr	r3, [r4, #12]
   14626:	781b      	ldrb	r3, [r3, #0]
   14628:	b10b      	cbz	r3, 1462e <read_type_cb+0x36>
			data->err = 0x00;
   1462a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1462e:	2000      	movs	r0, #0
}
   14630:	b003      	add	sp, #12
   14632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   14636:	68a0      	ldr	r0, [r4, #8]
   14638:	f004 f864 	bl	18704 <net_buf_frag_last>
   1463c:	2102      	movs	r1, #2
   1463e:	300c      	adds	r0, #12
   14640:	f004 f926 	bl	18890 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   14644:	4b13      	ldr	r3, [pc, #76]	; (14694 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   14646:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   14648:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1464c:	9300      	str	r3, [sp, #0]
   1464e:	9401      	str	r4, [sp, #4]
   14650:	4633      	mov	r3, r6
   14652:	4629      	mov	r1, r5
   14654:	4638      	mov	r0, r7
   14656:	68a2      	ldr	r2, [r4, #8]
   14658:	f011 faa7 	bl	25baa <att_chan_read>
	if (read < 0) {
   1465c:	2800      	cmp	r0, #0
   1465e:	da07      	bge.n	14670 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   14660:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   14664:	bf32      	itee	cc
   14666:	200e      	movcc	r0, #14
		return -err;
   14668:	4240      	negcs	r0, r0
   1466a:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1466c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1466e:	e7de      	b.n	1462e <read_type_cb+0x36>
	if (!data->item) {
   14670:	6923      	ldr	r3, [r4, #16]
   14672:	2b00      	cmp	r3, #0
   14674:	d0db      	beq.n	1462e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   14676:	68a0      	ldr	r0, [r4, #8]
   14678:	f011 f958 	bl	2592c <net_buf_frags_len>
   1467c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1467e:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   14680:	68e3      	ldr	r3, [r4, #12]
   14682:	781b      	ldrb	r3, [r3, #0]
   14684:	4298      	cmp	r0, r3
   14686:	bf94      	ite	ls
   14688:	2000      	movls	r0, #0
   1468a:	2001      	movhi	r0, #1
   1468c:	e7d0      	b.n	14630 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1468e:	2001      	movs	r0, #1
   14690:	e7ce      	b.n	14630 <read_type_cb+0x38>
   14692:	bf00      	nop
   14694:	0002593d 	.word	0x0002593d

00014698 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   14698:	b5f0      	push	{r4, r5, r6, r7, lr}
   1469a:	b087      	sub	sp, #28
   1469c:	4604      	mov	r4, r0
   1469e:	460f      	mov	r7, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   146a0:	2200      	movs	r2, #0
   146a2:	2300      	movs	r3, #0
   146a4:	4831      	ldr	r0, [pc, #196]	; (1476c <bt_att_accept+0xd4>)
   146a6:	a904      	add	r1, sp, #16
   146a8:	f00a f8b6 	bl	1e818 <k_mem_slab_alloc>
   146ac:	4605      	mov	r5, r0
   146ae:	b178      	cbz	r0, 146d0 <bt_att_accept+0x38>
		LOG_ERR("No available ATT context for conn %p", conn);
   146b0:	4b2f      	ldr	r3, [pc, #188]	; (14770 <bt_att_accept+0xd8>)
   146b2:	2201      	movs	r2, #1
   146b4:	9302      	str	r3, [sp, #8]
   146b6:	2300      	movs	r3, #0
   146b8:	e9cd 3300 	strd	r3, r3, [sp]
   146bc:	9403      	str	r4, [sp, #12]
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   146be:	4618      	mov	r0, r3
   146c0:	492c      	ldr	r1, [pc, #176]	; (14774 <bt_att_accept+0xdc>)
   146c2:	f011 fa22 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   146c6:	f06f 060b 	mvn.w	r6, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   146ca:	4630      	mov	r0, r6
   146cc:	b007      	add	sp, #28
   146ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   146d0:	f00c fc6c 	bl	20fac <z_impl_z_current_get>
	(void)memset(att, 0, sizeof(*att));
   146d4:	9e04      	ldr	r6, [sp, #16]
	att_handle_rsp_thread = k_current_get();
   146d6:	4b28      	ldr	r3, [pc, #160]	; (14778 <bt_att_accept+0xe0>)
   146d8:	222c      	movs	r2, #44	; 0x2c
   146da:	6018      	str	r0, [r3, #0]
   146dc:	4629      	mov	r1, r5
   146de:	1d30      	adds	r0, r6, #4
   146e0:	f014 f896 	bl	28810 <memset>
	att->conn = conn;
   146e4:	6034      	str	r4, [r6, #0]
	sys_slist_init(&att->reqs);
   146e6:	9c04      	ldr	r4, [sp, #16]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   146e8:	2200      	movs	r2, #0
   146ea:	2300      	movs	r3, #0
	list->tail = NULL;
   146ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
   146f0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   146f4:	4821      	ldr	r0, [pc, #132]	; (1477c <bt_att_accept+0xe4>)
   146f6:	a905      	add	r1, sp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   146f8:	9505      	str	r5, [sp, #20]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   146fa:	f00a f88d 	bl	1e818 <k_mem_slab_alloc>
   146fe:	4606      	mov	r6, r0
   14700:	b140      	cbz	r0, 14714 <bt_att_accept+0x7c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   14702:	6823      	ldr	r3, [r4, #0]
   14704:	2202      	movs	r2, #2
   14706:	9303      	str	r3, [sp, #12]
   14708:	4b1d      	ldr	r3, [pc, #116]	; (14780 <bt_att_accept+0xe8>)
   1470a:	9500      	str	r5, [sp, #0]
   1470c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14710:	462b      	mov	r3, r5
   14712:	e7d4      	b.n	146be <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   14714:	9b05      	ldr	r3, [sp, #20]
   14716:	4601      	mov	r1, r0
   14718:	22f8      	movs	r2, #248	; 0xf8
   1471a:	4618      	mov	r0, r3
   1471c:	f014 f878 	bl	28810 <memset>
	chan->chan.chan.ops = &ops;
   14720:	4a18      	ldr	r2, [pc, #96]	; (14784 <bt_att_accept+0xec>)
   14722:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   14724:	30a0      	adds	r0, #160	; 0xa0
   14726:	f013 fe76 	bl	28416 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1472a:	9b05      	ldr	r3, [sp, #20]
   1472c:	3398      	adds	r3, #152	; 0x98
   1472e:	e8d3 2fef 	ldaex	r2, [r3]
   14732:	e8c3 6fe1 	stlex	r1, r6, [r3]
   14736:	2900      	cmp	r1, #0
   14738:	d1f9      	bne.n	1472e <bt_att_accept+0x96>
	chan->att = att;
   1473a:	9b05      	ldr	r3, [sp, #20]
   1473c:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1473e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   14740:	9d05      	ldr	r5, [sp, #20]
	if (sys_slist_is_empty(&att->chans)) {
   14742:	b91b      	cbnz	r3, 1474c <bt_att_accept+0xb4>
   14744:	f104 000c 	add.w	r0, r4, #12
   14748:	f013 fe65 	bl	28416 <z_impl_k_queue_init>
	return list->head;
   1474c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1474e:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
	parent->next = child;
   14752:	f8c5 20f0 	str.w	r2, [r5, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   14756:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   14758:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1475a:	b902      	cbnz	r2, 1475e <bt_att_accept+0xc6>
	list->tail = node;
   1475c:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   1475e:	9b05      	ldr	r3, [sp, #20]
	if (!chan) {
   14760:	2b00      	cmp	r3, #0
   14762:	d0b0      	beq.n	146c6 <bt_att_accept+0x2e>
	*ch = &chan->chan.chan;
   14764:	3304      	adds	r3, #4
   14766:	603b      	str	r3, [r7, #0]
	return 0;
   14768:	e7af      	b.n	146ca <bt_att_accept+0x32>
   1476a:	bf00      	nop
   1476c:	20008a0c 	.word	0x20008a0c
   14770:	0002d5c0 	.word	0x0002d5c0
   14774:	0002969c 	.word	0x0002969c
   14778:	2002106c 	.word	0x2002106c
   1477c:	20008a2c 	.word	0x20008a2c
   14780:	0002d5e5 	.word	0x0002d5e5
   14784:	200084cc 	.word	0x200084cc

00014788 <bt_att_chan_create_pdu>:
{
   14788:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1478a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1478c:	3201      	adds	r2, #1
   1478e:	429a      	cmp	r2, r3
{
   14790:	460d      	mov	r5, r1
   14792:	b087      	sub	sp, #28
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   14794:	d90f      	bls.n	147b6 <bt_att_chan_create_pdu+0x2e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   14796:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1479a:	4b25      	ldr	r3, [pc, #148]	; (14830 <bt_att_chan_create_pdu+0xa8>)
   1479c:	2202      	movs	r2, #2
   1479e:	9302      	str	r3, [sp, #8]
   147a0:	2300      	movs	r3, #0
   147a2:	4924      	ldr	r1, [pc, #144]	; (14834 <bt_att_chan_create_pdu+0xac>)
   147a4:	4618      	mov	r0, r3
   147a6:	e9cd 3300 	strd	r3, r3, [sp]
   147aa:	f011 f9ae 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
		return NULL;
   147ae:	2400      	movs	r4, #0
}
   147b0:	4620      	mov	r0, r4
   147b2:	b007      	add	sp, #28
   147b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   147b6:	4608      	mov	r0, r1
   147b8:	f7ff fc9e 	bl	140f8 <att_op_get_type>
   147bc:	2802      	cmp	r0, #2
   147be:	d018      	beq.n	147f2 <bt_att_chan_create_pdu+0x6a>
   147c0:	2804      	cmp	r0, #4
   147c2:	d016      	beq.n	147f2 <bt_att_chan_create_pdu+0x6a>
		timeout = K_FOREVER;
   147c4:	f04f 36ff 	mov.w	r6, #4294967295
   147c8:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   147cc:	2100      	movs	r1, #0
   147ce:	4632      	mov	r2, r6
   147d0:	463b      	mov	r3, r7
   147d2:	4608      	mov	r0, r1
   147d4:	f011 f871 	bl	258ba <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   147d8:	4604      	mov	r4, r0
   147da:	b970      	cbnz	r0, 147fa <bt_att_chan_create_pdu+0x72>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   147dc:	4b16      	ldr	r3, [pc, #88]	; (14838 <bt_att_chan_create_pdu+0xb0>)
   147de:	2201      	movs	r2, #1
   147e0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   147e4:	4913      	ldr	r1, [pc, #76]	; (14834 <bt_att_chan_create_pdu+0xac>)
   147e6:	4603      	mov	r3, r0
   147e8:	9503      	str	r5, [sp, #12]
   147ea:	9000      	str	r0, [sp, #0]
   147ec:	f011 f98d 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
		return NULL;
   147f0:	e7dd      	b.n	147ae <bt_att_chan_create_pdu+0x26>
	switch (att_op_get_type(op)) {
   147f2:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   147f6:	2700      	movs	r7, #0
   147f8:	e7e8      	b.n	147cc <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   147fa:	4810      	ldr	r0, [pc, #64]	; (1483c <bt_att_chan_create_pdu+0xb4>)
   147fc:	463b      	mov	r3, r7
   147fe:	4632      	mov	r2, r6
   14800:	f00a fc42 	bl	1f088 <z_impl_k_queue_get>
   14804:	4603      	mov	r3, r0
	if (!data) {
   14806:	b958      	cbnz	r0, 14820 <bt_att_chan_create_pdu+0x98>
		LOG_WRN("Unable to allocate ATT TX meta");
   14808:	4a0d      	ldr	r2, [pc, #52]	; (14840 <bt_att_chan_create_pdu+0xb8>)
   1480a:	9000      	str	r0, [sp, #0]
   1480c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   14810:	4908      	ldr	r1, [pc, #32]	; (14834 <bt_att_chan_create_pdu+0xac>)
   14812:	2202      	movs	r2, #2
   14814:	f011 f979 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   14818:	4620      	mov	r0, r4
   1481a:	f003 ff17 	bl	1864c <net_buf_unref>
		return NULL;
   1481e:	e7c6      	b.n	147ae <bt_att_chan_create_pdu+0x26>
	bt_att_tx_meta_data(buf) = data;
   14820:	61a0      	str	r0, [r4, #24]
   14822:	2101      	movs	r1, #1
   14824:	f104 000c 	add.w	r0, r4, #12
   14828:	f004 f832 	bl	18890 <net_buf_simple_add>
	hdr->code = op;
   1482c:	7005      	strb	r5, [r0, #0]
	return buf;
   1482e:	e7bf      	b.n	147b0 <bt_att_chan_create_pdu+0x28>
   14830:	0002d60a 	.word	0x0002d60a
   14834:	0002969c 	.word	0x0002969c
   14838:	0002d2fb 	.word	0x0002d2fb
   1483c:	20008bb4 	.word	0x20008bb4
   14840:	0002d62f 	.word	0x0002d62f

00014844 <bt_att_recv>:
{
   14844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   14848:	8a0b      	ldrh	r3, [r1, #16]
{
   1484a:	4607      	mov	r7, r0
   1484c:	460d      	mov	r5, r1
   1484e:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   14850:	b963      	cbnz	r3, 1486c <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   14852:	4a42      	ldr	r2, [pc, #264]	; (1495c <bt_att_recv+0x118>)
   14854:	9300      	str	r3, [sp, #0]
   14856:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1485a:	2201      	movs	r2, #1
			LOG_WRN("Ignoring unexpected request");
   1485c:	4618      	mov	r0, r3
   1485e:	4940      	ldr	r1, [pc, #256]	; (14960 <bt_att_recv+0x11c>)
   14860:	f011 f953 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
}
   14864:	2000      	movs	r0, #0
   14866:	b006      	add	sp, #24
   14868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1486c:	2101      	movs	r1, #1
   1486e:	f105 000c 	add.w	r0, r5, #12
   14872:	f003 ffef 	bl	18854 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   14876:	f857 3c04 	ldr.w	r3, [r7, #-4]
   1487a:	4604      	mov	r4, r0
   1487c:	2b00      	cmp	r3, #0
   1487e:	d0f1      	beq.n	14864 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   14880:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   14882:	7802      	ldrb	r2, [r0, #0]
   14884:	4e37      	ldr	r6, [pc, #220]	; (14964 <bt_att_recv+0x120>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   14886:	f1a7 0804 	sub.w	r8, r7, #4
		if (hdr->code == handlers[i].op) {
   1488a:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   1488e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   14892:	4290      	cmp	r0, r2
   14894:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   14898:	d111      	bne.n	148be <bt_att_recv+0x7a>
		if (handler->type == ATT_REQUEST &&
   1489a:	f891 9002 	ldrb.w	r9, [r1, #2]
   1489e:	f1b9 0f01 	cmp.w	r9, #1
   148a2:	d12b      	bne.n	148fc <bt_att_recv+0xb8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   148a4:	2100      	movs	r1, #0
   148a6:	f107 0094 	add.w	r0, r7, #148	; 0x94
   148aa:	f011 fa24 	bl	25cf6 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   148ae:	b380      	cbz	r0, 14912 <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected request");
   148b0:	4b2d      	ldr	r3, [pc, #180]	; (14968 <bt_att_recv+0x124>)
   148b2:	9302      	str	r3, [sp, #8]
   148b4:	2300      	movs	r3, #0
   148b6:	2202      	movs	r2, #2
   148b8:	e9cd 3300 	strd	r3, r3, [sp]
   148bc:	e7ce      	b.n	1485c <bt_att_recv+0x18>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   148be:	3301      	adds	r3, #1
   148c0:	2b0e      	cmp	r3, #14
   148c2:	d1e2      	bne.n	1488a <bt_att_recv+0x46>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   148c4:	2500      	movs	r5, #0
   148c6:	4b29      	ldr	r3, [pc, #164]	; (1496c <bt_att_recv+0x128>)
   148c8:	4628      	mov	r0, r5
   148ca:	4925      	ldr	r1, [pc, #148]	; (14960 <bt_att_recv+0x11c>)
   148cc:	9203      	str	r2, [sp, #12]
   148ce:	9302      	str	r3, [sp, #8]
   148d0:	2202      	movs	r2, #2
   148d2:	462b      	mov	r3, r5
   148d4:	e9cd 5500 	strd	r5, r5, [sp]
   148d8:	f011 f917 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   148dc:	7821      	ldrb	r1, [r4, #0]
   148de:	4608      	mov	r0, r1
   148e0:	f7ff fc0a 	bl	140f8 <att_op_get_type>
   148e4:	2800      	cmp	r0, #0
   148e6:	d0bd      	beq.n	14864 <bt_att_recv+0x20>
   148e8:	2805      	cmp	r0, #5
   148ea:	d0bb      	beq.n	14864 <bt_att_recv+0x20>
	if (!req) {
   148ec:	2900      	cmp	r1, #0
   148ee:	d0b9      	beq.n	14864 <bt_att_recv+0x20>
   148f0:	2306      	movs	r3, #6
   148f2:	2200      	movs	r2, #0
   148f4:	4640      	mov	r0, r8
   148f6:	f011 fb62 	bl	25fbe <send_err_rsp.part.0>
   148fa:	e7b3      	b.n	14864 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   148fc:	f1b9 0f05 	cmp.w	r9, #5
   14900:	d107      	bne.n	14912 <bt_att_recv+0xce>
			   atomic_test_and_set_bit(att_chan->flags,
   14902:	2101      	movs	r1, #1
   14904:	f107 0094 	add.w	r0, r7, #148	; 0x94
   14908:	f011 f9f5 	bl	25cf6 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1490c:	b108      	cbz	r0, 14912 <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected indication");
   1490e:	4b18      	ldr	r3, [pc, #96]	; (14970 <bt_att_recv+0x12c>)
   14910:	e7cf      	b.n	148b2 <bt_att_recv+0x6e>
	if (buf->len < handler->expect_len) {
   14912:	4456      	add	r6, sl
   14914:	8a2b      	ldrh	r3, [r5, #16]
   14916:	7872      	ldrb	r2, [r6, #1]
   14918:	429a      	cmp	r2, r3
   1491a:	d911      	bls.n	14940 <bt_att_recv+0xfc>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1491c:	7822      	ldrb	r2, [r4, #0]
   1491e:	4910      	ldr	r1, [pc, #64]	; (14960 <bt_att_recv+0x11c>)
   14920:	e9cd 3203 	strd	r3, r2, [sp, #12]
   14924:	4b13      	ldr	r3, [pc, #76]	; (14974 <bt_att_recv+0x130>)
   14926:	2201      	movs	r2, #1
   14928:	9302      	str	r3, [sp, #8]
   1492a:	2300      	movs	r3, #0
   1492c:	4618      	mov	r0, r3
   1492e:	e9cd 3300 	strd	r3, r3, [sp]
   14932:	f011 f8ea 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   14936:	f1b9 0f01 	cmp.w	r9, #1
   1493a:	d193      	bne.n	14864 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   1493c:	2304      	movs	r3, #4
   1493e:	e009      	b.n	14954 <bt_att_recv+0x110>
		err = handler->func(att_chan, buf);
   14940:	6873      	ldr	r3, [r6, #4]
   14942:	4629      	mov	r1, r5
   14944:	4640      	mov	r0, r8
   14946:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   14948:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1494c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1494e:	d189      	bne.n	14864 <bt_att_recv+0x20>
   14950:	2800      	cmp	r0, #0
   14952:	d087      	beq.n	14864 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   14954:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   14956:	2900      	cmp	r1, #0
   14958:	d084      	beq.n	14864 <bt_att_recv+0x20>
   1495a:	e7ca      	b.n	148f2 <bt_att_recv+0xae>
   1495c:	0002d64e 	.word	0x0002d64e
   14960:	0002969c 	.word	0x0002969c
   14964:	0002a070 	.word	0x0002a070
   14968:	0002d683 	.word	0x0002d683
   1496c:	0002d669 	.word	0x0002d669
   14970:	0002d69f 	.word	0x0002d69f
   14974:	0002d6be 	.word	0x0002d6be

00014978 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   14978:	b5f0      	push	{r4, r5, r6, r7, lr}
   1497a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1497c:	6803      	ldr	r3, [r0, #0]
   1497e:	460d      	mov	r5, r1
   14980:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   14982:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14984:	bf18      	it	ne
   14986:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   14988:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1498a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1498c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1498e:	f011 fe06 	bl	2659e <bt_gatt_change_aware>
   14992:	b948      	cbnz	r0, 149a8 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   14994:	2105      	movs	r1, #5
   14996:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1499a:	f011 f9ac 	bl	25cf6 <atomic_test_and_set_bit>
   1499e:	2800      	cmp	r0, #0
   149a0:	d048      	beq.n	14a34 <att_write_rsp.constprop.0+0xbc>
			return 0;
   149a2:	2000      	movs	r0, #0
}
   149a4:	b007      	add	sp, #28
   149a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   149a8:	2e00      	cmp	r6, #0
   149aa:	d045      	beq.n	14a38 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   149ac:	2218      	movs	r2, #24
   149ae:	2100      	movs	r1, #0
   149b0:	4668      	mov	r0, sp
   149b2:	f013 ff2d 	bl	28810 <memset>
	if (rsp) {
   149b6:	bb67      	cbnz	r7, 14a12 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   149b8:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   149ba:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   149bc:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   149be:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   149c0:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   149c2:	2300      	movs	r3, #0
   149c4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   149c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   149ca:	4a1c      	ldr	r2, [pc, #112]	; (14a3c <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   149cc:	9303      	str	r3, [sp, #12]
	data.len = len;
   149ce:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   149d2:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   149d6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   149da:	2301      	movs	r3, #1
   149dc:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   149e0:	466b      	mov	r3, sp
   149e2:	f010 fff4 	bl	259ce <bt_gatt_foreach_attr>
	if (data.err) {
   149e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   149ea:	b1e3      	cbz	r3, 14a26 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   149ec:	2f00      	cmp	r7, #0
   149ee:	d0d8      	beq.n	149a2 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   149f0:	9b01      	ldr	r3, [sp, #4]
   149f2:	6998      	ldr	r0, [r3, #24]
   149f4:	f7ff fbc6 	bl	14184 <tx_meta_data_free>
			net_buf_unref(data.buf);
   149f8:	9801      	ldr	r0, [sp, #4]
   149fa:	f003 fe27 	bl	1864c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   149fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   14a02:	2d00      	cmp	r5, #0
   14a04:	d0cd      	beq.n	149a2 <att_write_rsp.constprop.0+0x2a>
   14a06:	4632      	mov	r2, r6
   14a08:	4629      	mov	r1, r5
   14a0a:	4620      	mov	r0, r4
   14a0c:	f011 fad7 	bl	25fbe <send_err_rsp.part.0>
   14a10:	e7c7      	b.n	149a2 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   14a12:	2200      	movs	r2, #0
   14a14:	4639      	mov	r1, r7
   14a16:	4620      	mov	r0, r4
   14a18:	f7ff feb6 	bl	14788 <bt_att_chan_create_pdu>
   14a1c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   14a1e:	2800      	cmp	r0, #0
   14a20:	d1ca      	bne.n	149b8 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   14a22:	200e      	movs	r0, #14
   14a24:	e7be      	b.n	149a4 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   14a26:	9901      	ldr	r1, [sp, #4]
   14a28:	2900      	cmp	r1, #0
   14a2a:	d0ba      	beq.n	149a2 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   14a2c:	4620      	mov	r0, r4
   14a2e:	f011 f8ae 	bl	25b8e <bt_att_chan_send_rsp>
   14a32:	e7b6      	b.n	149a2 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14a34:	2012      	movs	r0, #18
   14a36:	e7b5      	b.n	149a4 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   14a38:	2001      	movs	r0, #1
   14a3a:	e7b3      	b.n	149a4 <att_write_rsp.constprop.0+0x2c>
   14a3c:	0002596d 	.word	0x0002596d

00014a40 <bt_att_create_pdu>:
{
   14a40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14a42:	460e      	mov	r6, r1
   14a44:	4615      	mov	r5, r2
	att = att_get(conn);
   14a46:	f7ff fd1f 	bl	14488 <att_get>
	if (!att) {
   14a4a:	b1c0      	cbz	r0, 14a7e <bt_att_create_pdu+0x3e>
	return list->head;
   14a4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   14a4e:	4618      	mov	r0, r3
   14a50:	b11b      	cbz	r3, 14a5a <bt_att_create_pdu+0x1a>
	return node->next;
   14a52:	f850 39f0 	ldr.w	r3, [r0], #-240
   14a56:	b103      	cbz	r3, 14a5a <bt_att_create_pdu+0x1a>
   14a58:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   14a5a:	1c6c      	adds	r4, r5, #1
   14a5c:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   14a5e:	b118      	cbz	r0, 14a68 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   14a60:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   14a62:	42a1      	cmp	r1, r4
   14a64:	d216      	bcs.n	14a94 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   14a66:	b96b      	cbnz	r3, 14a84 <bt_att_create_pdu+0x44>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   14a68:	4b0f      	ldr	r3, [pc, #60]	; (14aa8 <bt_att_create_pdu+0x68>)
   14a6a:	2202      	movs	r2, #2
   14a6c:	9302      	str	r3, [sp, #8]
   14a6e:	2300      	movs	r3, #0
   14a70:	490e      	ldr	r1, [pc, #56]	; (14aac <bt_att_create_pdu+0x6c>)
   14a72:	4618      	mov	r0, r3
   14a74:	e9cd 3300 	strd	r3, r3, [sp]
   14a78:	9403      	str	r4, [sp, #12]
   14a7a:	f011 f846 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
}
   14a7e:	2000      	movs	r0, #0
   14a80:	b004      	add	sp, #16
   14a82:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   14a84:	4618      	mov	r0, r3
   14a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   14a8a:	b153      	cbz	r3, 14aa2 <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   14a8c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   14a8e:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   14a90:	428a      	cmp	r2, r1
   14a92:	d8f7      	bhi.n	14a84 <bt_att_create_pdu+0x44>
		return bt_att_chan_create_pdu(chan, op, len);
   14a94:	462a      	mov	r2, r5
   14a96:	4631      	mov	r1, r6
}
   14a98:	b004      	add	sp, #16
   14a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   14a9e:	f7ff be73 	b.w	14788 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   14aa2:	4614      	mov	r4, r2
   14aa4:	e7dc      	b.n	14a60 <bt_att_create_pdu+0x20>
   14aa6:	bf00      	nop
   14aa8:	0002d6dd 	.word	0x0002d6dd
   14aac:	0002969c 	.word	0x0002969c

00014ab0 <att_read_group_req>:
{
   14ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14ab4:	8a0e      	ldrh	r6, [r1, #16]
{
   14ab6:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   14ab8:	3e04      	subs	r6, #4
   14aba:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   14abc:	2e02      	cmp	r6, #2
{
   14abe:	4608      	mov	r0, r1
   14ac0:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   14ac2:	d001      	beq.n	14ac8 <att_read_group_req+0x18>
   14ac4:	2e10      	cmp	r6, #16
   14ac6:	d16a      	bne.n	14b9e <att_read_group_req+0xee>
   14ac8:	2104      	movs	r1, #4
   14aca:	300c      	adds	r0, #12
   14acc:	f003 fec2 	bl	18854 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14ad0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   14ad4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14ad6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14ad8:	1d01      	adds	r1, r0, #4
   14ada:	4632      	mov	r2, r6
   14adc:	4640      	mov	r0, r8
   14ade:	f010 fa4d 	bl	24f7c <bt_uuid_create>
   14ae2:	2800      	cmp	r0, #0
   14ae4:	d05d      	beq.n	14ba2 <att_read_group_req+0xf2>
	if (!start || !end) {
   14ae6:	2d00      	cmp	r5, #0
   14ae8:	d03a      	beq.n	14b60 <att_read_group_req+0xb0>
   14aea:	2600      	movs	r6, #0
   14aec:	2f00      	cmp	r7, #0
   14aee:	d036      	beq.n	14b5e <att_read_group_req+0xae>
	if (start > end) {
   14af0:	42bd      	cmp	r5, r7
   14af2:	d835      	bhi.n	14b60 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   14af4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14af8:	4640      	mov	r0, r8
   14afa:	a901      	add	r1, sp, #4
   14afc:	f88d 6004 	strb.w	r6, [sp, #4]
   14b00:	f8ad 3006 	strh.w	r3, [sp, #6]
   14b04:	f010 fa0c 	bl	24f20 <bt_uuid_cmp>
   14b08:	bb70      	cbnz	r0, 14b68 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   14b0a:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   14b0c:	2214      	movs	r2, #20
   14b0e:	2100      	movs	r1, #0
   14b10:	a807      	add	r0, sp, #28
   14b12:	f013 fe7d 	bl	28810 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   14b16:	2201      	movs	r2, #1
   14b18:	2111      	movs	r1, #17
   14b1a:	4630      	mov	r0, r6
   14b1c:	f7ff ff90 	bl	14a40 <bt_att_create_pdu>
   14b20:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   14b22:	2800      	cmp	r0, #0
   14b24:	d03d      	beq.n	14ba2 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   14b26:	2101      	movs	r1, #1
   14b28:	300c      	adds	r0, #12
	data.uuid = uuid;
   14b2a:	e9cd 4807 	strd	r4, r8, [sp, #28]
   14b2e:	f003 feaf 	bl	18890 <net_buf_simple_add>
	data.rsp->len = 0U;
   14b32:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   14b34:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14b36:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   14b38:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14b3a:	4a1b      	ldr	r2, [pc, #108]	; (14ba8 <att_read_group_req+0xf8>)
	data.group = NULL;
   14b3c:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14b3e:	4628      	mov	r0, r5
   14b40:	ab07      	add	r3, sp, #28
   14b42:	f010 ff44 	bl	259ce <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   14b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14b48:	781b      	ldrb	r3, [r3, #0]
   14b4a:	bb1b      	cbnz	r3, 14b94 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   14b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14b4e:	6998      	ldr	r0, [r3, #24]
   14b50:	f7ff fb18 	bl	14184 <tx_meta_data_free>
		net_buf_unref(data.buf);
   14b54:	9809      	ldr	r0, [sp, #36]	; 0x24
   14b56:	f003 fd79 	bl	1864c <net_buf_unref>
	if (!req) {
   14b5a:	230a      	movs	r3, #10
   14b5c:	e001      	b.n	14b62 <att_read_group_req+0xb2>
			*err = 0U;
   14b5e:	463d      	mov	r5, r7
	if (!req) {
   14b60:	2301      	movs	r3, #1
   14b62:	462a      	mov	r2, r5
   14b64:	2110      	movs	r1, #16
   14b66:	e00e      	b.n	14b86 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   14b68:	f642 0301 	movw	r3, #10241	; 0x2801
   14b6c:	4640      	mov	r0, r8
   14b6e:	a907      	add	r1, sp, #28
   14b70:	f88d 601c 	strb.w	r6, [sp, #28]
   14b74:	f8ad 301e 	strh.w	r3, [sp, #30]
   14b78:	f010 f9d2 	bl	24f20 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   14b7c:	2800      	cmp	r0, #0
   14b7e:	d0c4      	beq.n	14b0a <att_read_group_req+0x5a>
	if (!req) {
   14b80:	2310      	movs	r3, #16
   14b82:	462a      	mov	r2, r5
   14b84:	4619      	mov	r1, r3
   14b86:	4620      	mov	r0, r4
   14b88:	f011 fa19 	bl	25fbe <send_err_rsp.part.0>
		return 0;
   14b8c:	2000      	movs	r0, #0
}
   14b8e:	b00c      	add	sp, #48	; 0x30
   14b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   14b94:	4620      	mov	r0, r4
   14b96:	9909      	ldr	r1, [sp, #36]	; 0x24
   14b98:	f010 fff9 	bl	25b8e <bt_att_chan_send_rsp>
	return 0;
   14b9c:	e7f6      	b.n	14b8c <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   14b9e:	2004      	movs	r0, #4
   14ba0:	e7f5      	b.n	14b8e <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   14ba2:	200e      	movs	r0, #14
   14ba4:	e7f3      	b.n	14b8e <att_read_group_req+0xde>
   14ba6:	bf00      	nop
   14ba8:	0001454d 	.word	0x0001454d

00014bac <att_read_mult_vl_req>:
{
   14bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14bb0:	6846      	ldr	r6, [r0, #4]
{
   14bb2:	4604      	mov	r4, r0
   14bb4:	460d      	mov	r5, r1
   14bb6:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   14bb8:	2101      	movs	r1, #1
   14bba:	4630      	mov	r0, r6
   14bbc:	f011 fcef 	bl	2659e <bt_gatt_change_aware>
   14bc0:	b950      	cbnz	r0, 14bd8 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   14bc2:	2105      	movs	r1, #5
   14bc4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   14bc8:	f011 f895 	bl	25cf6 <atomic_test_and_set_bit>
   14bcc:	2800      	cmp	r0, #0
   14bce:	d13b      	bne.n	14c48 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14bd0:	2012      	movs	r0, #18
}
   14bd2:	b005      	add	sp, #20
   14bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   14bd8:	2210      	movs	r2, #16
   14bda:	2100      	movs	r1, #0
   14bdc:	4668      	mov	r0, sp
   14bde:	f013 fe17 	bl	28810 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   14be2:	2200      	movs	r2, #0
   14be4:	2121      	movs	r1, #33	; 0x21
   14be6:	4630      	mov	r0, r6
   14be8:	f7ff ff2a 	bl	14a40 <bt_att_create_pdu>
   14bec:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14bee:	b368      	cbz	r0, 14c4c <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   14bf0:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   14bf4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 14c50 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   14bf8:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   14bfa:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   14bfe:	8a2b      	ldrh	r3, [r5, #16]
   14c00:	2b01      	cmp	r3, #1
   14c02:	d804      	bhi.n	14c0e <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   14c04:	4620      	mov	r0, r4
   14c06:	9902      	ldr	r1, [sp, #8]
   14c08:	f010 ffc1 	bl	25b8e <bt_att_chan_send_rsp>
	return 0;
   14c0c:	e01c      	b.n	14c48 <att_read_mult_vl_req+0x9c>
   14c0e:	4638      	mov	r0, r7
   14c10:	f012 f880 	bl	26d14 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   14c14:	466b      	mov	r3, sp
   14c16:	464a      	mov	r2, r9
   14c18:	4601      	mov	r1, r0
   14c1a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   14c1c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   14c20:	f010 fed5 	bl	259ce <bt_gatt_foreach_attr>
		if (data.err) {
   14c24:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14c28:	2b00      	cmp	r3, #0
   14c2a:	d0e8      	beq.n	14bfe <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   14c2c:	9b02      	ldr	r3, [sp, #8]
   14c2e:	6998      	ldr	r0, [r3, #24]
   14c30:	f7ff faa8 	bl	14184 <tx_meta_data_free>
			net_buf_unref(data.buf);
   14c34:	9802      	ldr	r0, [sp, #8]
   14c36:	f003 fd09 	bl	1864c <net_buf_unref>
	if (!req) {
   14c3a:	4632      	mov	r2, r6
   14c3c:	2120      	movs	r1, #32
   14c3e:	4620      	mov	r0, r4
   14c40:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14c44:	f011 f9bb 	bl	25fbe <send_err_rsp.part.0>
			return 0;
   14c48:	2000      	movs	r0, #0
   14c4a:	e7c2      	b.n	14bd2 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   14c4c:	200e      	movs	r0, #14
   14c4e:	e7c0      	b.n	14bd2 <att_read_mult_vl_req+0x26>
   14c50:	00025d5f 	.word	0x00025d5f

00014c54 <att_read_mult_req>:
{
   14c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14c58:	6846      	ldr	r6, [r0, #4]
{
   14c5a:	4604      	mov	r4, r0
   14c5c:	460d      	mov	r5, r1
   14c5e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   14c60:	2101      	movs	r1, #1
   14c62:	4630      	mov	r0, r6
   14c64:	f011 fc9b 	bl	2659e <bt_gatt_change_aware>
   14c68:	b950      	cbnz	r0, 14c80 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   14c6a:	2105      	movs	r1, #5
   14c6c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   14c70:	f011 f841 	bl	25cf6 <atomic_test_and_set_bit>
   14c74:	2800      	cmp	r0, #0
   14c76:	d13b      	bne.n	14cf0 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14c78:	2012      	movs	r0, #18
}
   14c7a:	b005      	add	sp, #20
   14c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   14c80:	2210      	movs	r2, #16
   14c82:	2100      	movs	r1, #0
   14c84:	4668      	mov	r0, sp
   14c86:	f013 fdc3 	bl	28810 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   14c8a:	2200      	movs	r2, #0
   14c8c:	210f      	movs	r1, #15
   14c8e:	4630      	mov	r0, r6
   14c90:	f7ff fed6 	bl	14a40 <bt_att_create_pdu>
   14c94:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14c96:	b368      	cbz	r0, 14cf4 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   14c98:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14c9c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 14cf8 <att_read_mult_req+0xa4>
	data.chan = chan;
   14ca0:	9400      	str	r4, [sp, #0]
   14ca2:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   14ca6:	8a2b      	ldrh	r3, [r5, #16]
   14ca8:	2b01      	cmp	r3, #1
   14caa:	d804      	bhi.n	14cb6 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   14cac:	4620      	mov	r0, r4
   14cae:	9902      	ldr	r1, [sp, #8]
   14cb0:	f010 ff6d 	bl	25b8e <bt_att_chan_send_rsp>
	return 0;
   14cb4:	e01c      	b.n	14cf0 <att_read_mult_req+0x9c>
   14cb6:	4638      	mov	r0, r7
   14cb8:	f012 f82c 	bl	26d14 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14cbc:	466b      	mov	r3, sp
   14cbe:	464a      	mov	r2, r9
   14cc0:	4601      	mov	r1, r0
   14cc2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   14cc4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14cc8:	f010 fe81 	bl	259ce <bt_gatt_foreach_attr>
		if (data.err) {
   14ccc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	d0e8      	beq.n	14ca6 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   14cd4:	9b02      	ldr	r3, [sp, #8]
   14cd6:	6998      	ldr	r0, [r3, #24]
   14cd8:	f7ff fa54 	bl	14184 <tx_meta_data_free>
			net_buf_unref(data.buf);
   14cdc:	9802      	ldr	r0, [sp, #8]
   14cde:	f003 fcb5 	bl	1864c <net_buf_unref>
	if (!req) {
   14ce2:	4632      	mov	r2, r6
   14ce4:	210e      	movs	r1, #14
   14ce6:	4620      	mov	r0, r4
   14ce8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14cec:	f011 f967 	bl	25fbe <send_err_rsp.part.0>
			return 0;
   14cf0:	2000      	movs	r0, #0
   14cf2:	e7c2      	b.n	14c7a <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   14cf4:	200e      	movs	r0, #14
   14cf6:	e7c0      	b.n	14c7a <att_read_mult_req+0x26>
   14cf8:	00025d19 	.word	0x00025d19

00014cfc <att_read_rsp>:
{
   14cfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14d00:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   14d04:	4604      	mov	r4, r0
   14d06:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   14d08:	4640      	mov	r0, r8
   14d0a:	2101      	movs	r1, #1
{
   14d0c:	4617      	mov	r7, r2
   14d0e:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   14d10:	f011 fc45 	bl	2659e <bt_gatt_change_aware>
   14d14:	b948      	cbnz	r0, 14d2a <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   14d16:	2105      	movs	r1, #5
   14d18:	f104 0098 	add.w	r0, r4, #152	; 0x98
   14d1c:	f010 ffeb 	bl	25cf6 <atomic_test_and_set_bit>
   14d20:	bb78      	cbnz	r0, 14d82 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14d22:	2012      	movs	r0, #18
}
   14d24:	b004      	add	sp, #16
   14d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   14d2a:	b38d      	cbz	r5, 14d90 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   14d2c:	2210      	movs	r2, #16
   14d2e:	2100      	movs	r1, #0
   14d30:	4668      	mov	r0, sp
   14d32:	f013 fd6d 	bl	28810 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   14d36:	2200      	movs	r2, #0
   14d38:	4639      	mov	r1, r7
   14d3a:	4640      	mov	r0, r8
   14d3c:	f7ff fe80 	bl	14a40 <bt_att_create_pdu>
   14d40:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14d42:	b338      	cbz	r0, 14d94 <att_read_rsp+0x98>
	data.offset = offset;
   14d44:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14d48:	4629      	mov	r1, r5
	data.offset = offset;
   14d4a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14d4e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14d50:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14d52:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14d56:	4a10      	ldr	r2, [pc, #64]	; (14d98 <att_read_rsp+0x9c>)
   14d58:	466b      	mov	r3, sp
	data.chan = chan;
   14d5a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14d5c:	f010 fe37 	bl	259ce <bt_gatt_foreach_attr>
	if (data.err) {
   14d60:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14d64:	b17b      	cbz	r3, 14d86 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   14d66:	9b02      	ldr	r3, [sp, #8]
   14d68:	6998      	ldr	r0, [r3, #24]
   14d6a:	f7ff fa0b 	bl	14184 <tx_meta_data_free>
		net_buf_unref(data.buf);
   14d6e:	9802      	ldr	r0, [sp, #8]
   14d70:	f003 fc6c 	bl	1864c <net_buf_unref>
	if (!req) {
   14d74:	462a      	mov	r2, r5
   14d76:	4631      	mov	r1, r6
   14d78:	4620      	mov	r0, r4
   14d7a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14d7e:	f011 f91e 	bl	25fbe <send_err_rsp.part.0>
			return 0;
   14d82:	2000      	movs	r0, #0
   14d84:	e7ce      	b.n	14d24 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   14d86:	4620      	mov	r0, r4
   14d88:	9902      	ldr	r1, [sp, #8]
   14d8a:	f010 ff00 	bl	25b8e <bt_att_chan_send_rsp>
	return 0;
   14d8e:	e7f8      	b.n	14d82 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   14d90:	2001      	movs	r0, #1
   14d92:	e7c7      	b.n	14d24 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   14d94:	200e      	movs	r0, #14
   14d96:	e7c5      	b.n	14d24 <att_read_rsp+0x28>
   14d98:	00025d19 	.word	0x00025d19

00014d9c <att_read_type_req>:
{
   14d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14da0:	8a0d      	ldrh	r5, [r1, #16]
{
   14da2:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   14da4:	3d04      	subs	r5, #4
   14da6:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   14da8:	2d02      	cmp	r5, #2
{
   14daa:	4608      	mov	r0, r1
   14dac:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   14dae:	d001      	beq.n	14db4 <att_read_type_req+0x18>
   14db0:	2d10      	cmp	r5, #16
   14db2:	d150      	bne.n	14e56 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   14db4:	2104      	movs	r1, #4
   14db6:	300c      	adds	r0, #12
   14db8:	f003 fd4c 	bl	18854 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14dbc:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   14dc0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14dc2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14dc4:	1d01      	adds	r1, r0, #4
   14dc6:	462a      	mov	r2, r5
   14dc8:	4640      	mov	r0, r8
   14dca:	f010 f8d7 	bl	24f7c <bt_uuid_create>
   14dce:	b188      	cbz	r0, 14df4 <att_read_type_req+0x58>
	if (!start || !end) {
   14dd0:	b19e      	cbz	r6, 14dfa <att_read_type_req+0x5e>
   14dd2:	b18f      	cbz	r7, 14df8 <att_read_type_req+0x5c>
	if (start > end) {
   14dd4:	42be      	cmp	r6, r7
   14dd6:	d810      	bhi.n	14dfa <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   14dd8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   14dda:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   14ddc:	2100      	movs	r1, #0
   14dde:	eb0d 0002 	add.w	r0, sp, r2
   14de2:	f013 fd15 	bl	28810 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   14de6:	2201      	movs	r2, #1
   14de8:	2109      	movs	r1, #9
   14dea:	4628      	mov	r0, r5
   14dec:	f7ff fe28 	bl	14a40 <bt_att_create_pdu>
   14df0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   14df2:	b960      	cbnz	r0, 14e0e <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   14df4:	200e      	movs	r0, #14
   14df6:	e007      	b.n	14e08 <att_read_type_req+0x6c>
			*err = 0U;
   14df8:	463e      	mov	r6, r7
	if (!req) {
   14dfa:	2301      	movs	r3, #1
   14dfc:	4632      	mov	r2, r6
   14dfe:	2108      	movs	r1, #8
   14e00:	4620      	mov	r0, r4
   14e02:	f011 f8dc 	bl	25fbe <send_err_rsp.part.0>
		return 0;
   14e06:	2000      	movs	r0, #0
}
   14e08:	b00c      	add	sp, #48	; 0x30
   14e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   14e0e:	2101      	movs	r1, #1
   14e10:	300c      	adds	r0, #12
	data.uuid = uuid;
   14e12:	e9cd 4806 	strd	r4, r8, [sp, #24]
   14e16:	f003 fd3b 	bl	18890 <net_buf_simple_add>
	data.rsp->len = 0U;
   14e1a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   14e1c:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   14e1e:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14e20:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   14e22:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14e24:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   14e28:	4630      	mov	r0, r6
   14e2a:	ab06      	add	r3, sp, #24
   14e2c:	4a0b      	ldr	r2, [pc, #44]	; (14e5c <att_read_type_req+0xc0>)
   14e2e:	f010 fdce 	bl	259ce <bt_gatt_foreach_attr>
	if (data.err) {
   14e32:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   14e36:	b14b      	cbz	r3, 14e4c <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   14e38:	9b08      	ldr	r3, [sp, #32]
   14e3a:	6998      	ldr	r0, [r3, #24]
   14e3c:	f7ff f9a2 	bl	14184 <tx_meta_data_free>
		net_buf_unref(data.buf);
   14e40:	9808      	ldr	r0, [sp, #32]
   14e42:	f003 fc03 	bl	1864c <net_buf_unref>
	if (!req) {
   14e46:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   14e4a:	e7d7      	b.n	14dfc <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   14e4c:	4620      	mov	r0, r4
   14e4e:	9908      	ldr	r1, [sp, #32]
   14e50:	f010 fe9d 	bl	25b8e <bt_att_chan_send_rsp>
	return 0;
   14e54:	e7d7      	b.n	14e06 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   14e56:	2004      	movs	r0, #4
   14e58:	e7d6      	b.n	14e08 <att_read_type_req+0x6c>
   14e5a:	bf00      	nop
   14e5c:	000145f9 	.word	0x000145f9

00014e60 <att_find_type_req>:
{
   14e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14e64:	460f      	mov	r7, r1
   14e66:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   14e68:	2106      	movs	r1, #6
   14e6a:	b086      	sub	sp, #24
   14e6c:	f107 000c 	add.w	r0, r7, #12
   14e70:	f003 fcf0 	bl	18854 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   14e74:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14e76:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   14e7a:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   14e7c:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   14e80:	b1c5      	cbz	r5, 14eb4 <att_find_type_req+0x54>
   14e82:	2300      	movs	r3, #0
   14e84:	f1b8 0f00 	cmp.w	r8, #0
   14e88:	d013      	beq.n	14eb2 <att_find_type_req+0x52>
	if (start > end) {
   14e8a:	4545      	cmp	r5, r8
   14e8c:	d812      	bhi.n	14eb4 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   14e8e:	f88d 3000 	strb.w	r3, [sp]
   14e92:	f88d 3004 	strb.w	r3, [sp, #4]
   14e96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14e9a:	4668      	mov	r0, sp
   14e9c:	a901      	add	r1, sp, #4
   14e9e:	f8ad 2002 	strh.w	r2, [sp, #2]
   14ea2:	f8ad 3006 	strh.w	r3, [sp, #6]
   14ea6:	f010 f83b 	bl	24f20 <bt_uuid_cmp>
   14eaa:	4606      	mov	r6, r0
   14eac:	b160      	cbz	r0, 14ec8 <att_find_type_req+0x68>
	if (!req) {
   14eae:	230a      	movs	r3, #10
   14eb0:	e001      	b.n	14eb6 <att_find_type_req+0x56>
			*err = 0U;
   14eb2:	4645      	mov	r5, r8
	if (!req) {
   14eb4:	2301      	movs	r3, #1
   14eb6:	462a      	mov	r2, r5
   14eb8:	2106      	movs	r1, #6
   14eba:	4620      	mov	r0, r4
   14ebc:	f011 f87f 	bl	25fbe <send_err_rsp.part.0>
		return 0;
   14ec0:	2000      	movs	r0, #0
}
   14ec2:	b006      	add	sp, #24
   14ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   14ec8:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   14ecc:	4601      	mov	r1, r0
   14ece:	2214      	movs	r2, #20
   14ed0:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   14ed2:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   14ed4:	f013 fc9c 	bl	28810 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   14ed8:	4632      	mov	r2, r6
   14eda:	2107      	movs	r1, #7
   14edc:	4650      	mov	r0, sl
   14ede:	f7ff fdaf 	bl	14a40 <bt_att_create_pdu>
   14ee2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14ee4:	b1f8      	cbz	r0, 14f26 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14ee6:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14ee8:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14eea:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14eee:	4628      	mov	r0, r5
   14ef0:	ab01      	add	r3, sp, #4
   14ef2:	4a0e      	ldr	r2, [pc, #56]	; (14f2c <att_find_type_req+0xcc>)
	data.value = value;
   14ef4:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   14ef8:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   14efa:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14efe:	f010 fd66 	bl	259ce <bt_gatt_foreach_attr>
	if (data.err) {
   14f02:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14f06:	b14b      	cbz	r3, 14f1c <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   14f08:	9b02      	ldr	r3, [sp, #8]
   14f0a:	6998      	ldr	r0, [r3, #24]
   14f0c:	f7ff f93a 	bl	14184 <tx_meta_data_free>
		net_buf_unref(data.buf);
   14f10:	9802      	ldr	r0, [sp, #8]
   14f12:	f003 fb9b 	bl	1864c <net_buf_unref>
	if (!req) {
   14f16:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14f1a:	e7cc      	b.n	14eb6 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   14f1c:	4620      	mov	r0, r4
   14f1e:	9902      	ldr	r1, [sp, #8]
   14f20:	f010 fe35 	bl	25b8e <bt_att_chan_send_rsp>
	return 0;
   14f24:	e7cc      	b.n	14ec0 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   14f26:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   14f28:	e7cb      	b.n	14ec2 <att_find_type_req+0x62>
   14f2a:	bf00      	nop
   14f2c:	000141c5 	.word	0x000141c5

00014f30 <att_find_info_req>:
{
   14f30:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   14f32:	68cb      	ldr	r3, [r1, #12]
{
   14f34:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   14f36:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14f38:	885e      	ldrh	r6, [r3, #2]
{
   14f3a:	b085      	sub	sp, #20
	if (!start || !end) {
   14f3c:	b195      	cbz	r5, 14f64 <att_find_info_req+0x34>
   14f3e:	b186      	cbz	r6, 14f62 <att_find_info_req+0x32>
	if (start > end) {
   14f40:	42ae      	cmp	r6, r5
   14f42:	d30f      	bcc.n	14f64 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   14f44:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   14f46:	2210      	movs	r2, #16
   14f48:	2100      	movs	r1, #0
   14f4a:	4668      	mov	r0, sp
   14f4c:	f013 fc60 	bl	28810 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   14f50:	2200      	movs	r2, #0
   14f52:	2105      	movs	r1, #5
   14f54:	4638      	mov	r0, r7
   14f56:	f7ff fd73 	bl	14a40 <bt_att_create_pdu>
   14f5a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   14f5c:	b958      	cbnz	r0, 14f76 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   14f5e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   14f60:	e007      	b.n	14f72 <att_find_info_req+0x42>
			*err = 0U;
   14f62:	4635      	mov	r5, r6
	if (!req) {
   14f64:	2301      	movs	r3, #1
   14f66:	462a      	mov	r2, r5
   14f68:	2104      	movs	r1, #4
   14f6a:	4620      	mov	r0, r4
   14f6c:	f011 f827 	bl	25fbe <send_err_rsp.part.0>
		return 0;
   14f70:	2000      	movs	r0, #0
}
   14f72:	b005      	add	sp, #20
   14f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   14f76:	466b      	mov	r3, sp
   14f78:	4631      	mov	r1, r6
   14f7a:	4628      	mov	r0, r5
   14f7c:	4a09      	ldr	r2, [pc, #36]	; (14fa4 <att_find_info_req+0x74>)
	data.chan = chan;
   14f7e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   14f80:	f010 fd25 	bl	259ce <bt_gatt_foreach_attr>
	if (!data.rsp) {
   14f84:	9b02      	ldr	r3, [sp, #8]
   14f86:	b943      	cbnz	r3, 14f9a <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   14f88:	9b01      	ldr	r3, [sp, #4]
   14f8a:	6998      	ldr	r0, [r3, #24]
   14f8c:	f7ff f8fa 	bl	14184 <tx_meta_data_free>
		net_buf_unref(data.buf);
   14f90:	9801      	ldr	r0, [sp, #4]
   14f92:	f003 fb5b 	bl	1864c <net_buf_unref>
	if (!req) {
   14f96:	230a      	movs	r3, #10
   14f98:	e7e5      	b.n	14f66 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   14f9a:	4620      	mov	r0, r4
   14f9c:	9901      	ldr	r1, [sp, #4]
   14f9e:	f010 fdf6 	bl	25b8e <bt_att_chan_send_rsp>
	return 0;
   14fa2:	e7e5      	b.n	14f70 <att_find_info_req+0x40>
   14fa4:	00025a6b 	.word	0x00025a6b

00014fa8 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   14fa8:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   14faa:	4c09      	ldr	r4, [pc, #36]	; (14fd0 <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   14fac:	4d09      	ldr	r5, [pc, #36]	; (14fd4 <bt_att_init+0x2c>)
   14fae:	4620      	mov	r0, r4
   14fb0:	f013 fa31 	bl	28416 <z_impl_k_queue_init>
   14fb4:	4629      	mov	r1, r5
   14fb6:	4620      	mov	r0, r4
   14fb8:	f013 fa3a 	bl	28430 <k_queue_append>
   14fbc:	4620      	mov	r0, r4
   14fbe:	f105 0114 	add.w	r1, r5, #20
   14fc2:	f013 fa35 	bl	28430 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   14fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   14fca:	f000 bb9f 	b.w	1570c <bt_gatt_init>
   14fce:	bf00      	nop
   14fd0:	20008bb4 	.word	0x20008bb4
   14fd4:	20021044 	.word	0x20021044

00014fd8 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   14fd8:	2300      	movs	r3, #0
{
   14fda:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14fdc:	4605      	mov	r5, r0
   14fde:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   14fe0:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   14fe2:	f00b ffe3 	bl	20fac <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   14fe6:	4b0c      	ldr	r3, [pc, #48]	; (15018 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   14fe8:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   14fea:	681b      	ldr	r3, [r3, #0]
   14fec:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   14fee:	bf04      	itt	eq
   14ff0:	2500      	moveq	r5, #0
   14ff2:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   14ff4:	462a      	mov	r2, r5
   14ff6:	4623      	mov	r3, r4
   14ff8:	4808      	ldr	r0, [pc, #32]	; (1501c <bt_att_req_alloc+0x44>)
   14ffa:	f009 fc0d 	bl	1e818 <k_mem_slab_alloc>
   14ffe:	4601      	mov	r1, r0
   15000:	b940      	cbnz	r0, 15014 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   15002:	9b01      	ldr	r3, [sp, #4]
   15004:	221c      	movs	r2, #28
   15006:	4618      	mov	r0, r3
   15008:	f013 fc02 	bl	28810 <memset>
   1500c:	4603      	mov	r3, r0

	return req;
}
   1500e:	4618      	mov	r0, r3
   15010:	b003      	add	sp, #12
   15012:	bd30      	pop	{r4, r5, pc}
		return NULL;
   15014:	2300      	movs	r3, #0
   15016:	e7fa      	b.n	1500e <bt_att_req_alloc+0x36>
   15018:	2002106c 	.word	0x2002106c
   1501c:	20008a4c 	.word	0x20008a4c

00015020 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   15020:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   15022:	6883      	ldr	r3, [r0, #8]
{
   15024:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   15026:	b14b      	cbz	r3, 1503c <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   15028:	6998      	ldr	r0, [r3, #24]
   1502a:	f7ff f8ab 	bl	14184 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1502e:	9b01      	ldr	r3, [sp, #4]
   15030:	6898      	ldr	r0, [r3, #8]
   15032:	f003 fb0b 	bl	1864c <net_buf_unref>
		req->buf = NULL;
   15036:	2200      	movs	r2, #0
   15038:	9b01      	ldr	r3, [sp, #4]
   1503a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1503c:	4803      	ldr	r0, [pc, #12]	; (1504c <bt_att_req_free+0x2c>)
   1503e:	a901      	add	r1, sp, #4
   15040:	f009 fc54 	bl	1e8ec <k_mem_slab_free>
}
   15044:	b003      	add	sp, #12
   15046:	f85d fb04 	ldr.w	pc, [sp], #4
   1504a:	bf00      	nop
   1504c:	20008a4c 	.word	0x20008a4c

00015050 <att_handle_rsp>:
{
   15050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15054:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15056:	30c0      	adds	r0, #192	; 0xc0
{
   15058:	461d      	mov	r5, r3
   1505a:	460e      	mov	r6, r1
   1505c:	4617      	mov	r7, r2
	k_work_cancel_delayable(&chan->timeout_work);
   1505e:	f00a fe23 	bl	1fca8 <k_work_cancel_delayable>
	if (!chan->req) {
   15062:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   15066:	b97b      	cbnz	r3, 15088 <att_handle_rsp+0x38>
		LOG_WRN("No pending ATT request");
   15068:	4a19      	ldr	r2, [pc, #100]	; (150d0 <att_handle_rsp+0x80>)
   1506a:	4618      	mov	r0, r3
   1506c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   15070:	4918      	ldr	r1, [pc, #96]	; (150d4 <att_handle_rsp+0x84>)
   15072:	2202      	movs	r2, #2
   15074:	9300      	str	r3, [sp, #0]
   15076:	f010 fd48 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
	att_req_send_process(chan->att);
   1507a:	6820      	ldr	r0, [r4, #0]
   1507c:	f010 fed7 	bl	25e2e <att_req_send_process>
}
   15080:	2000      	movs	r0, #0
   15082:	b004      	add	sp, #16
   15084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   15088:	4a13      	ldr	r2, [pc, #76]	; (150d8 <att_handle_rsp+0x88>)
   1508a:	f04f 0800 	mov.w	r8, #0
   1508e:	4293      	cmp	r3, r2
   15090:	d102      	bne.n	15098 <att_handle_rsp+0x48>
		chan->req = NULL;
   15092:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   15096:	e7f0      	b.n	1507a <att_handle_rsp+0x2a>
	func = chan->req->func;
   15098:	f8d3 9004 	ldr.w	r9, [r3, #4]
	chan->req->func = NULL;
   1509c:	f8c3 8004 	str.w	r8, [r3, #4]
	params = chan->req->user_data;
   150a0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   150a4:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   150a8:	f7ff ffba 	bl	15020 <bt_att_req_free>
	att_req_send_process(chan->att);
   150ac:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   150ae:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   150b2:	f010 febc 	bl	25e2e <att_req_send_process>
	if (func) {
   150b6:	f1b9 0f00 	cmp.w	r9, #0
   150ba:	d0e1      	beq.n	15080 <att_handle_rsp+0x30>
		func(chan->att->conn, err, pdu, len, params);
   150bc:	6820      	ldr	r0, [r4, #0]
   150be:	f8cd a000 	str.w	sl, [sp]
   150c2:	463b      	mov	r3, r7
   150c4:	4632      	mov	r2, r6
   150c6:	4629      	mov	r1, r5
   150c8:	6800      	ldr	r0, [r0, #0]
   150ca:	47c8      	blx	r9
   150cc:	e7d8      	b.n	15080 <att_handle_rsp+0x30>
   150ce:	bf00      	nop
   150d0:	0002d6f8 	.word	0x0002d6f8
   150d4:	0002969c 	.word	0x0002969c
   150d8:	20021070 	.word	0x20021070

000150dc <bt_att_disconnected>:
{
   150dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   150e0:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   150e4:	4604      	mov	r4, r0
	if (!att_chan->att) {
   150e6:	2e00      	cmp	r6, #0
   150e8:	d056      	beq.n	15198 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   150ea:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   150ee:	f106 0028 	add.w	r0, r6, #40	; 0x28
   150f2:	f010 fde5 	bl	25cc0 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   150f6:	1f27      	subs	r7, r4, #4
   150f8:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   150fc:	2200      	movs	r2, #0
   150fe:	2300      	movs	r3, #0
   15100:	4640      	mov	r0, r8
   15102:	f011 fdfe 	bl	26d02 <net_buf_get>
   15106:	4605      	mov	r5, r0
   15108:	bb28      	cbnz	r0, 15156 <bt_att_disconnected+0x7a>
	if (chan->req) {
   1510a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1510e:	b12b      	cbz	r3, 1511c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   15110:	4602      	mov	r2, r0
   15112:	4601      	mov	r1, r0
   15114:	230e      	movs	r3, #14
   15116:	4638      	mov	r0, r7
   15118:	f7ff ff9a 	bl	15050 <att_handle_rsp>
	chan->att = NULL;
   1511c:	2300      	movs	r3, #0
   1511e:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   15122:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15124:	2b00      	cmp	r3, #0
   15126:	d137      	bne.n	15198 <bt_att_disconnected+0xbc>
	att_reset(att);
   15128:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1512a:	9803      	ldr	r0, [sp, #12]
   1512c:	2200      	movs	r2, #0
   1512e:	2300      	movs	r3, #0
   15130:	300c      	adds	r0, #12
   15132:	f011 fde6 	bl	26d02 <net_buf_get>
   15136:	4605      	mov	r5, r0
   15138:	b9a0      	cbnz	r0, 15164 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   1513a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1513c:	6845      	ldr	r5, [r0, #4]
   1513e:	b9c5      	cbnz	r5, 15172 <bt_att_disconnected+0x96>
	att->conn = NULL;
   15140:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   15142:	a903      	add	r1, sp, #12
   15144:	4816      	ldr	r0, [pc, #88]	; (151a0 <bt_att_disconnected+0xc4>)
   15146:	f009 fbd1 	bl	1e8ec <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1514a:	6820      	ldr	r0, [r4, #0]
}
   1514c:	b004      	add	sp, #16
   1514e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   15152:	f001 b94d 	b.w	163f0 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15156:	69a8      	ldr	r0, [r5, #24]
   15158:	f7ff f814 	bl	14184 <tx_meta_data_free>
		net_buf_unref(buf);
   1515c:	4628      	mov	r0, r5
   1515e:	f003 fa75 	bl	1864c <net_buf_unref>
   15162:	e7cb      	b.n	150fc <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15164:	69a8      	ldr	r0, [r5, #24]
   15166:	f7ff f80d 	bl	14184 <tx_meta_data_free>
		net_buf_unref(buf);
   1516a:	4628      	mov	r0, r5
   1516c:	f003 fa6e 	bl	1864c <net_buf_unref>
   15170:	e7db      	b.n	1512a <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15172:	6882      	ldr	r2, [r0, #8]
	return node->next;
   15174:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15176:	4295      	cmp	r5, r2
	list->head = node;
   15178:	6043      	str	r3, [r0, #4]
	list->tail = node;
   1517a:	bf08      	it	eq
   1517c:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1517e:	686e      	ldr	r6, [r5, #4]
   15180:	b136      	cbz	r6, 15190 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   15182:	69ab      	ldr	r3, [r5, #24]
   15184:	210e      	movs	r1, #14
   15186:	9300      	str	r3, [sp, #0]
   15188:	2300      	movs	r3, #0
   1518a:	6800      	ldr	r0, [r0, #0]
   1518c:	461a      	mov	r2, r3
   1518e:	47b0      	blx	r6
		bt_att_req_free(req);
   15190:	4628      	mov	r0, r5
   15192:	f7ff ff45 	bl	15020 <bt_att_req_free>
   15196:	e7d0      	b.n	1513a <bt_att_disconnected+0x5e>
}
   15198:	b004      	add	sp, #16
   1519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1519e:	bf00      	nop
   151a0:	20008a0c 	.word	0x20008a0c

000151a4 <att_timeout>:
{
   151a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("ATT Timeout");
   151a6:	4b09      	ldr	r3, [pc, #36]	; (151cc <att_timeout+0x28>)
{
   151a8:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   151aa:	9302      	str	r3, [sp, #8]
   151ac:	2300      	movs	r3, #0
   151ae:	2201      	movs	r2, #1
   151b0:	4618      	mov	r0, r3
   151b2:	e9cd 3300 	strd	r3, r3, [sp]
   151b6:	4906      	ldr	r1, [pc, #24]	; (151d0 <att_timeout+0x2c>)
   151b8:	f010 fca7 	bl	25b0a <z_log_msg_runtime_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   151bc:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   151c0:	b004      	add	sp, #16
   151c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   151c6:	f7ff bf89 	b.w	150dc <bt_att_disconnected>
   151ca:	bf00      	nop
   151cc:	0002d70f 	.word	0x0002d70f
   151d0:	0002969c 	.word	0x0002969c

000151d4 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   151d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151d6:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   151d8:	b958      	cbnz	r0, 151f2 <bt_att_send+0x1e>
   151da:	4929      	ldr	r1, [pc, #164]	; (15280 <bt_att_send+0xac>)
   151dc:	f640 63a4 	movw	r3, #3748	; 0xea4
   151e0:	4a28      	ldr	r2, [pc, #160]	; (15284 <bt_att_send+0xb0>)
   151e2:	4829      	ldr	r0, [pc, #164]	; (15288 <bt_att_send+0xb4>)
   151e4:	f00e ff1d 	bl	24022 <assert_print>
   151e8:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   151ec:	4825      	ldr	r0, [pc, #148]	; (15284 <bt_att_send+0xb0>)
   151ee:	f00e ff11 	bl	24014 <assert_post_action>
   151f2:	b949      	cbnz	r1, 15208 <bt_att_send+0x34>
   151f4:	4925      	ldr	r1, [pc, #148]	; (1528c <bt_att_send+0xb8>)
   151f6:	f640 63a5 	movw	r3, #3749	; 0xea5
   151fa:	4a22      	ldr	r2, [pc, #136]	; (15284 <bt_att_send+0xb0>)
   151fc:	4822      	ldr	r0, [pc, #136]	; (15288 <bt_att_send+0xb4>)
   151fe:	f00e ff10 	bl	24022 <assert_print>
   15202:	f640 61a5 	movw	r1, #3749	; 0xea5
   15206:	e7f1      	b.n	151ec <bt_att_send+0x18>

	att = att_get(conn);
   15208:	f7ff f93e 	bl	14488 <att_get>
	if (!att) {
   1520c:	4605      	mov	r5, r0
   1520e:	b940      	cbnz	r0, 15222 <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   15210:	69a0      	ldr	r0, [r4, #24]
   15212:	f7fe ffb7 	bl	14184 <tx_meta_data_free>
		net_buf_unref(buf);
   15216:	4620      	mov	r0, r4
   15218:	f003 fa18 	bl	1864c <net_buf_unref>
		return -ENOTCONN;
   1521c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   15220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   15222:	f100 060c 	add.w	r6, r0, #12
   15226:	4621      	mov	r1, r4
   15228:	4630      	mov	r0, r6
   1522a:	f003 f9e9 	bl	18600 <net_buf_put>
	return list->head;
   1522e:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15230:	b14d      	cbz	r5, 15246 <bt_att_send+0x72>
	return node->next;
   15232:	f855 49f0 	ldr.w	r4, [r5], #-240
   15236:	b104      	cbz	r4, 1523a <bt_att_send+0x66>
   15238:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   1523a:	4631      	mov	r1, r6
   1523c:	4628      	mov	r0, r5
   1523e:	f010 fc8d 	bl	25b5c <process_queue>
		if (!err) {
   15242:	4603      	mov	r3, r0
   15244:	b980      	cbnz	r0, 15268 <bt_att_send+0x94>
	return 0;
   15246:	2000      	movs	r0, #0
   15248:	e7ea      	b.n	15220 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1524a:	2103      	movs	r1, #3
   1524c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15250:	f010 fb86 	bl	25960 <atomic_test_bit>
   15254:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   15256:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1525a:	f010 fb81 	bl	25960 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1525e:	4287      	cmp	r7, r0
   15260:	f06f 0301 	mvn.w	r3, #1
   15264:	d107      	bne.n	15276 <bt_att_send+0xa2>
   15266:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15268:	2c00      	cmp	r4, #0
   1526a:	d0ec      	beq.n	15246 <bt_att_send+0x72>
   1526c:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   15270:	b922      	cbnz	r2, 1527c <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   15272:	3302      	adds	r3, #2
   15274:	d0e9      	beq.n	1524a <bt_att_send+0x76>
{
   15276:	4625      	mov	r5, r4
   15278:	4614      	mov	r4, r2
   1527a:	e7de      	b.n	1523a <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1527c:	3af0      	subs	r2, #240	; 0xf0
   1527e:	e7f8      	b.n	15272 <bt_att_send+0x9e>
   15280:	0002c77f 	.word	0x0002c77f
   15284:	0002d498 	.word	0x0002d498
   15288:	0002a669 	.word	0x0002a669
   1528c:	0002dfab 	.word	0x0002dfab

00015290 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   15290:	b510      	push	{r4, lr}
   15292:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   15294:	b958      	cbnz	r0, 152ae <bt_att_req_send+0x1e>
   15296:	4915      	ldr	r1, [pc, #84]	; (152ec <bt_att_req_send+0x5c>)
   15298:	f640 63ba 	movw	r3, #3770	; 0xeba
   1529c:	4a14      	ldr	r2, [pc, #80]	; (152f0 <bt_att_req_send+0x60>)
   1529e:	4815      	ldr	r0, [pc, #84]	; (152f4 <bt_att_req_send+0x64>)
   152a0:	f00e febf 	bl	24022 <assert_print>
   152a4:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   152a8:	4811      	ldr	r0, [pc, #68]	; (152f0 <bt_att_req_send+0x60>)
   152aa:	f00e feb3 	bl	24014 <assert_post_action>
   152ae:	b949      	cbnz	r1, 152c4 <bt_att_req_send+0x34>
   152b0:	4911      	ldr	r1, [pc, #68]	; (152f8 <bt_att_req_send+0x68>)
   152b2:	f640 63bb 	movw	r3, #3771	; 0xebb
   152b6:	4a0e      	ldr	r2, [pc, #56]	; (152f0 <bt_att_req_send+0x60>)
   152b8:	480e      	ldr	r0, [pc, #56]	; (152f4 <bt_att_req_send+0x64>)
   152ba:	f00e feb2 	bl	24022 <assert_print>
   152be:	f640 61bb 	movw	r1, #3771	; 0xebb
   152c2:	e7f1      	b.n	152a8 <bt_att_req_send+0x18>

	att = att_get(conn);
   152c4:	f7ff f8e0 	bl	14488 <att_get>
	if (!att) {
   152c8:	b160      	cbz	r0, 152e4 <bt_att_req_send+0x54>
	parent->next = child;
   152ca:	2300      	movs	r3, #0
   152cc:	6023      	str	r3, [r4, #0]
	return list->tail;
   152ce:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   152d0:	b92b      	cbnz	r3, 152de <bt_att_req_send+0x4e>
	list->head = node;
   152d2:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   152d6:	f010 fdaa 	bl	25e2e <att_req_send_process>

	return 0;
   152da:	2000      	movs	r0, #0
}
   152dc:	bd10      	pop	{r4, pc}
	parent->next = child;
   152de:	601c      	str	r4, [r3, #0]
	list->tail = node;
   152e0:	6084      	str	r4, [r0, #8]
}
   152e2:	e7f8      	b.n	152d6 <bt_att_req_send+0x46>
		return -ENOTCONN;
   152e4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   152e8:	e7f8      	b.n	152dc <bt_att_req_send+0x4c>
   152ea:	bf00      	nop
   152ec:	0002c77f 	.word	0x0002c77f
   152f0:	0002d498 	.word	0x0002d498
   152f4:	0002a669 	.word	0x0002a669
   152f8:	0002d547 	.word	0x0002d547

000152fc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   152fc:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   152fe:	4606      	mov	r6, r0
   15300:	4d13      	ldr	r5, [pc, #76]	; (15350 <find_cf_cfg+0x54>)
   15302:	b140      	cbz	r0, 15316 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15304:	462a      	mov	r2, r5
   15306:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1530a:	1e6c      	subs	r4, r5, #1
   1530c:	f010 fa30 	bl	25770 <bt_conn_is_peer_addr_le>
   15310:	b198      	cbz	r0, 1533a <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   15312:	4620      	mov	r0, r4
   15314:	e00c      	b.n	15330 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   15316:	4628      	mov	r0, r5
   15318:	490e      	ldr	r1, [pc, #56]	; (15354 <find_cf_cfg+0x58>)
   1531a:	f010 ffc8 	bl	262ae <bt_addr_le_eq>
   1531e:	b940      	cbnz	r0, 15332 <find_cf_cfg+0x36>
   15320:	490c      	ldr	r1, [pc, #48]	; (15354 <find_cf_cfg+0x58>)
   15322:	f105 0010 	add.w	r0, r5, #16
   15326:	f010 ffc2 	bl	262ae <bt_addr_le_eq>
   1532a:	b120      	cbz	r0, 15336 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1532c:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   15330:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   15332:	1e68      	subs	r0, r5, #1
   15334:	e7fc      	b.n	15330 <find_cf_cfg+0x34>
	return NULL;
   15336:	2000      	movs	r0, #0
   15338:	e7fa      	b.n	15330 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1533a:	4630      	mov	r0, r6
   1533c:	7c21      	ldrb	r1, [r4, #16]
   1533e:	f104 0211 	add.w	r2, r4, #17
   15342:	f010 fa15 	bl	25770 <bt_conn_is_peer_addr_le>
   15346:	2800      	cmp	r0, #0
   15348:	d0f5      	beq.n	15336 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1534a:	f104 0010 	add.w	r0, r4, #16
   1534e:	e7ef      	b.n	15330 <find_cf_cfg+0x34>
   15350:	200210a5 	.word	0x200210a5
   15354:	0002c2a3 	.word	0x0002c2a3

00015358 <find_sc_cfg>:
{
   15358:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1535a:	4c0e      	ldr	r4, [pc, #56]	; (15394 <find_sc_cfg+0x3c>)
{
   1535c:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   1535e:	7823      	ldrb	r3, [r4, #0]
{
   15360:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   15362:	4283      	cmp	r3, r0
   15364:	d00c      	beq.n	15380 <find_sc_cfg+0x28>
   15366:	7b23      	ldrb	r3, [r4, #12]
   15368:	42ab      	cmp	r3, r5
   1536a:	d110      	bne.n	1538e <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1536c:	4631      	mov	r1, r6
   1536e:	480a      	ldr	r0, [pc, #40]	; (15398 <find_sc_cfg+0x40>)
   15370:	f010 ff9d 	bl	262ae <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   15374:	b158      	cbz	r0, 1538e <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   15376:	2301      	movs	r3, #1
			return &sc_cfg[i];
   15378:	220c      	movs	r2, #12
   1537a:	fb02 4003 	mla	r0, r2, r3, r4
   1537e:	e007      	b.n	15390 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   15380:	1c60      	adds	r0, r4, #1
   15382:	f010 ff94 	bl	262ae <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   15386:	2800      	cmp	r0, #0
   15388:	d0ed      	beq.n	15366 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1538a:	2300      	movs	r3, #0
   1538c:	e7f4      	b.n	15378 <find_sc_cfg+0x20>
	return NULL;
   1538e:	2000      	movs	r0, #0
}
   15390:	bd70      	pop	{r4, r5, r6, pc}
   15392:	bf00      	nop
   15394:	200214b0 	.word	0x200214b0
   15398:	200214bd 	.word	0x200214bd

0001539c <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1539c:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1539e:	1c4a      	adds	r2, r1, #1
{
   153a0:	460c      	mov	r4, r1
		if (conn) {
   153a2:	4605      	mov	r5, r0
   153a4:	b968      	cbnz	r0, 153c2 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   153a6:	4610      	mov	r0, r2
   153a8:	490d      	ldr	r1, [pc, #52]	; (153e0 <find_ccc_cfg+0x44>)
   153aa:	f010 ff80 	bl	262ae <bt_addr_le_eq>
   153ae:	b930      	cbnz	r0, 153be <find_ccc_cfg+0x22>
   153b0:	490b      	ldr	r1, [pc, #44]	; (153e0 <find_ccc_cfg+0x44>)
   153b2:	f104 000b 	add.w	r0, r4, #11
   153b6:	f010 ff7a 	bl	262ae <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   153ba:	b170      	cbz	r0, 153da <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   153bc:	340a      	adds	r4, #10
   153be:	4620      	mov	r0, r4
   153c0:	e00c      	b.n	153dc <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   153c2:	7809      	ldrb	r1, [r1, #0]
   153c4:	f010 f9d4 	bl	25770 <bt_conn_is_peer_addr_le>
   153c8:	2800      	cmp	r0, #0
   153ca:	d1f8      	bne.n	153be <find_ccc_cfg+0x22>
   153cc:	4628      	mov	r0, r5
   153ce:	7aa1      	ldrb	r1, [r4, #10]
   153d0:	f104 020b 	add.w	r2, r4, #11
   153d4:	f010 f9cc 	bl	25770 <bt_conn_is_peer_addr_le>
   153d8:	e7ef      	b.n	153ba <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   153da:	2000      	movs	r0, #0
}
   153dc:	bd38      	pop	{r3, r4, r5, pc}
   153de:	bf00      	nop
   153e0:	0002c2a3 	.word	0x0002c2a3

000153e4 <read_ppcp>:
{
   153e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   153e6:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   153e8:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   153ec:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   153ee:	4a06      	ldr	r2, [pc, #24]	; (15408 <read_ppcp+0x24>)
   153f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   153f4:	2308      	movs	r3, #8
   153f6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   153fa:	9300      	str	r3, [sp, #0]
   153fc:	446b      	add	r3, sp
   153fe:	f010 ff6a 	bl	262d6 <bt_gatt_attr_read.constprop.0>
}
   15402:	b005      	add	sp, #20
   15404:	f85d fb04 	ldr.w	pc, [sp], #4
   15408:	00280018 	.word	0x00280018

0001540c <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1540c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15410:	b085      	sub	sp, #20
   15412:	461e      	mov	r6, r3
   15414:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   15418:	4681      	mov	r9, r0
   1541a:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1541c:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   15420:	2b00      	cmp	r3, #0
   15422:	d14a      	bne.n	154ba <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   15424:	1e73      	subs	r3, r6, #1
   15426:	2b01      	cmp	r3, #1
   15428:	d84a      	bhi.n	154c0 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1542a:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1542c:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1542e:	7815      	ldrb	r5, [r2, #0]
   15430:	bf18      	it	ne
   15432:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   15434:	f7ff ffb2 	bl	1539c <find_ccc_cfg>
	if (!cfg) {
   15438:	4604      	mov	r4, r0
   1543a:	b9e8      	cbnz	r0, 15478 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1543c:	b91d      	cbnz	r5, 15446 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1543e:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   15440:	b005      	add	sp, #20
   15442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   15446:	4641      	mov	r1, r8
   15448:	f7ff ffa8 	bl	1539c <find_ccc_cfg>
		if (!cfg) {
   1544c:	4604      	mov	r4, r0
   1544e:	b958      	cbnz	r0, 15468 <bt_gatt_attr_write_ccc+0x5c>
			LOG_WRN("No space to store CCC cfg");
   15450:	4b1d      	ldr	r3, [pc, #116]	; (154c8 <bt_gatt_attr_write_ccc+0xbc>)
   15452:	9000      	str	r0, [sp, #0]
   15454:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15458:	2202      	movs	r2, #2
   1545a:	4603      	mov	r3, r0
   1545c:	491b      	ldr	r1, [pc, #108]	; (154cc <bt_gatt_attr_write_ccc+0xc0>)
   1545e:	f010 ffc2 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   15462:	f06f 0010 	mvn.w	r0, #16
   15466:	e7eb      	b.n	15440 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15468:	f109 0190 	add.w	r1, r9, #144	; 0x90
   1546c:	3001      	adds	r0, #1
   1546e:	f010 ff26 	bl	262be <bt_addr_le_copy>
		cfg->id = conn->id;
   15472:	f899 3008 	ldrb.w	r3, [r9, #8]
   15476:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   15478:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1547c:	b98b      	cbnz	r3, 154a2 <bt_gatt_attr_write_ccc+0x96>
	cfg->value = value;
   1547e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   15480:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   15484:	42ab      	cmp	r3, r5
   15486:	d003      	beq.n	15490 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   15488:	4641      	mov	r1, r8
   1548a:	4638      	mov	r0, r7
   1548c:	f010 fe97 	bl	261be <gatt_ccc_changed>
	if (!value) {
   15490:	2d00      	cmp	r5, #0
   15492:	d1d4      	bne.n	1543e <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   15494:	490e      	ldr	r1, [pc, #56]	; (154d0 <bt_gatt_attr_write_ccc+0xc4>)
   15496:	1c60      	adds	r0, r4, #1
   15498:	f010 ff11 	bl	262be <bt_addr_le_copy>
	cfg->id = 0U;
   1549c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1549e:	8125      	strh	r5, [r4, #8]
}
   154a0:	e7cd      	b.n	1543e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   154a2:	462a      	mov	r2, r5
   154a4:	4639      	mov	r1, r7
   154a6:	4648      	mov	r0, r9
   154a8:	4798      	blx	r3
		if (write < 0) {
   154aa:	2800      	cmp	r0, #0
   154ac:	dbc8      	blt.n	15440 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   154ae:	3801      	subs	r0, #1
   154b0:	2801      	cmp	r0, #1
   154b2:	d9e4      	bls.n	1547e <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   154b4:	f06f 000d 	mvn.w	r0, #13
   154b8:	e7c2      	b.n	15440 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   154ba:	f06f 0006 	mvn.w	r0, #6
   154be:	e7bf      	b.n	15440 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   154c0:	f06f 000c 	mvn.w	r0, #12
   154c4:	e7bc      	b.n	15440 <bt_gatt_attr_write_ccc+0x34>
   154c6:	bf00      	nop
   154c8:	0002d722 	.word	0x0002d722
   154cc:	000296bc 	.word	0x000296bc
   154d0:	0002c2a3 	.word	0x0002c2a3

000154d4 <clear_cf_cfg>:
{
   154d4:	4602      	mov	r2, r0
   154d6:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   154d8:	4907      	ldr	r1, [pc, #28]	; (154f8 <clear_cf_cfg+0x24>)
   154da:	3001      	adds	r0, #1
   154dc:	f010 feef 	bl	262be <bt_addr_le_copy>
   154e0:	2300      	movs	r3, #0
   154e2:	320c      	adds	r2, #12
   154e4:	f802 3c04 	strb.w	r3, [r2, #-4]
   154e8:	e8d2 1fef 	ldaex	r1, [r2]
   154ec:	e8c2 3fe0 	stlex	r0, r3, [r2]
   154f0:	2800      	cmp	r0, #0
   154f2:	d1f9      	bne.n	154e8 <clear_cf_cfg+0x14>
}
   154f4:	bd08      	pop	{r3, pc}
   154f6:	bf00      	nop
   154f8:	0002c2a3 	.word	0x0002c2a3

000154fc <sc_save>:
{
   154fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15500:	4680      	mov	r8, r0
   15502:	460f      	mov	r7, r1
   15504:	4616      	mov	r6, r2
   15506:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   15508:	f7ff ff26 	bl	15358 <find_sc_cfg>
	if (!cfg) {
   1550c:	4604      	mov	r4, r0
   1550e:	b9a8      	cbnz	r0, 1553c <sc_save+0x40>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   15510:	4911      	ldr	r1, [pc, #68]	; (15558 <sc_save+0x5c>)
   15512:	f7ff ff21 	bl	15358 <find_sc_cfg>
		if (!cfg) {
   15516:	4604      	mov	r4, r0
   15518:	b958      	cbnz	r0, 15532 <sc_save+0x36>
			LOG_ERR("unable to save SC: no cfg left");
   1551a:	4b10      	ldr	r3, [pc, #64]	; (1555c <sc_save+0x60>)
   1551c:	2201      	movs	r2, #1
   1551e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15522:	490f      	ldr	r1, [pc, #60]	; (15560 <sc_save+0x64>)
   15524:	4603      	mov	r3, r0
   15526:	9000      	str	r0, [sp, #0]
   15528:	f010 ff5d 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
}
   1552c:	b004      	add	sp, #16
   1552e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   15532:	4639      	mov	r1, r7
		cfg->id = id;
   15534:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   15538:	f010 fec1 	bl	262be <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1553c:	8922      	ldrh	r2, [r4, #8]
   1553e:	8963      	ldrh	r3, [r4, #10]
   15540:	b91a      	cbnz	r2, 1554a <sc_save+0x4e>
   15542:	b92b      	cbnz	r3, 15550 <sc_save+0x54>
		cfg->data.start = start;
   15544:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   15546:	8165      	strh	r5, [r4, #10]
   15548:	e7f0      	b.n	1552c <sc_save+0x30>
	if (new_start >= *start && new_end <= *end) {
   1554a:	42b2      	cmp	r2, r6
		*start = new_start;
   1554c:	bf88      	it	hi
   1554e:	8126      	strhhi	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   15550:	42ab      	cmp	r3, r5
   15552:	d2eb      	bcs.n	1552c <sc_save+0x30>
   15554:	e7f7      	b.n	15546 <sc_save+0x4a>
   15556:	bf00      	nop
   15558:	0002c2a3 	.word	0x0002c2a3
   1555c:	0002d73c 	.word	0x0002d73c
   15560:	000296bc 	.word	0x000296bc

00015564 <cf_write>:
{
   15564:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15568:	461f      	mov	r7, r3
   1556a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1556e:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   15570:	2b01      	cmp	r3, #1
{
   15572:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   15574:	d83b      	bhi.n	155ee <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   15576:	443b      	add	r3, r7
   15578:	2b01      	cmp	r3, #1
   1557a:	463d      	mov	r5, r7
   1557c:	dc3a      	bgt.n	155f4 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1557e:	f7ff febd 	bl	152fc <find_cf_cfg>
	if (!cfg) {
   15582:	4604      	mov	r4, r0
   15584:	b990      	cbnz	r0, 155ac <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   15586:	f7ff feb9 	bl	152fc <find_cf_cfg>
	if (!cfg) {
   1558a:	4604      	mov	r4, r0
   1558c:	b970      	cbnz	r0, 155ac <cf_write+0x48>
		LOG_WRN("No space to store Client Supported Features");
   1558e:	4b1c      	ldr	r3, [pc, #112]	; (15600 <cf_write+0x9c>)
   15590:	2202      	movs	r2, #2
   15592:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15596:	491b      	ldr	r1, [pc, #108]	; (15604 <cf_write+0xa0>)
   15598:	4603      	mov	r3, r0
   1559a:	9000      	str	r0, [sp, #0]
   1559c:	f010 ff23 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   155a0:	f06f 0510 	mvn.w	r5, #16
}
   155a4:	4628      	mov	r0, r5
   155a6:	b004      	add	sp, #16
   155a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   155ac:	b197      	cbz	r7, 155d4 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   155ae:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   155b0:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   155b2:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   155b6:	fa21 f003 	lsr.w	r0, r1, r3
   155ba:	07c7      	lsls	r7, r0, #31
   155bc:	d503      	bpl.n	155c6 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   155be:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   155c2:	07c0      	lsls	r0, r0, #31
   155c4:	d519      	bpl.n	155fa <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   155c6:	3301      	adds	r3, #1
   155c8:	2b03      	cmp	r3, #3
   155ca:	d1f4      	bne.n	155b6 <cf_write+0x52>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   155cc:	f002 0207 	and.w	r2, r2, #7
   155d0:	4311      	orrs	r1, r2
   155d2:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   155d4:	f106 0190 	add.w	r1, r6, #144	; 0x90
   155d8:	1c60      	adds	r0, r4, #1
   155da:	f010 fe70 	bl	262be <bt_addr_le_copy>
	cfg->id = conn->id;
   155de:	4620      	mov	r0, r4
   155e0:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   155e2:	2100      	movs	r1, #0
	cfg->id = conn->id;
   155e4:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   155e8:	f010 ff2d 	bl	26446 <atomic_set_bit>
	return len;
   155ec:	e7da      	b.n	155a4 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   155ee:	f06f 0506 	mvn.w	r5, #6
   155f2:	e7d7      	b.n	155a4 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   155f4:	f06f 050c 	mvn.w	r5, #12
   155f8:	e7d4      	b.n	155a4 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   155fa:	f06f 0512 	mvn.w	r5, #18
   155fe:	e7d1      	b.n	155a4 <cf_write+0x40>
   15600:	0002d75b 	.word	0x0002d75b
   15604:	000296bc 	.word	0x000296bc

00015608 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   15608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1560c:	4b28      	ldr	r3, [pc, #160]	; (156b0 <disconnected_cb+0xa8>)
{
   1560e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15610:	6882      	ldr	r2, [r0, #8]
{
   15612:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15614:	429a      	cmp	r2, r3
   15616:	d12b      	bne.n	15670 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   15618:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1561a:	8aab      	ldrh	r3, [r5, #20]
   1561c:	b343      	cbz	r3, 15670 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   1561e:	f04f 0800 	mov.w	r8, #0
   15622:	1c6c      	adds	r4, r5, #1
   15624:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   15628:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1562c:	b19b      	cbz	r3, 15656 <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1562e:	4622      	mov	r2, r4
   15630:	4630      	mov	r0, r6
   15632:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   15636:	f010 f89b 	bl	25770 <bt_conn_is_peer_addr_le>
   1563a:	b9e0      	cbnz	r0, 15676 <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1563c:	4621      	mov	r1, r4
   1563e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   15642:	f7fe f9b5 	bl	139b0 <bt_conn_lookup_addr_le>
			if (tmp) {
   15646:	b130      	cbz	r0, 15656 <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   15648:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   1564a:	2b07      	cmp	r3, #7
   1564c:	bf08      	it	eq
   1564e:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   15652:	f7fd fee1 	bl	13418 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   15656:	340a      	adds	r4, #10
   15658:	454c      	cmp	r4, r9
   1565a:	d1e5      	bne.n	15628 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   1565c:	f1b8 0f00 	cmp.w	r8, #0
   15660:	d106      	bne.n	15670 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   15662:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   15664:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   15668:	b113      	cbz	r3, 15670 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   1566a:	4641      	mov	r1, r8
   1566c:	4638      	mov	r0, r7
   1566e:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   15670:	2001      	movs	r0, #1
   15672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15676:	f106 0a90 	add.w	sl, r6, #144	; 0x90
   1567a:	4651      	mov	r1, sl
   1567c:	7a30      	ldrb	r0, [r6, #8]
   1567e:	f00f fd9c 	bl	251ba <bt_addr_le_is_bonded>
   15682:	b978      	cbnz	r0, 156a4 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   15684:	4b0b      	ldr	r3, [pc, #44]	; (156b4 <disconnected_cb+0xac>)
   15686:	429d      	cmp	r5, r3
   15688:	d102      	bne.n	15690 <disconnected_cb+0x88>
					sc_clear(conn);
   1568a:	4630      	mov	r0, r6
   1568c:	f010 feba 	bl	26404 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   15690:	4620      	mov	r0, r4
   15692:	4909      	ldr	r1, [pc, #36]	; (156b8 <disconnected_cb+0xb0>)
   15694:	f010 fe13 	bl	262be <bt_addr_le_copy>
	cfg->id = 0U;
   15698:	2300      	movs	r3, #0
   1569a:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   1569e:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   156a2:	e7d8      	b.n	15656 <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   156a4:	4651      	mov	r1, sl
   156a6:	4620      	mov	r0, r4
   156a8:	f010 fe09 	bl	262be <bt_addr_le_copy>
   156ac:	e7d3      	b.n	15656 <disconnected_cb+0x4e>
   156ae:	bf00      	nop
   156b0:	0001540d 	.word	0x0001540d
   156b4:	2000850c 	.word	0x2000850c
   156b8:	0002c2a3 	.word	0x0002c2a3

000156bc <sc_indicate_rsp>:
{
   156bc:	b510      	push	{r4, lr}
   156be:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   156c0:	4811      	ldr	r0, [pc, #68]	; (15708 <sc_indicate_rsp+0x4c>)
   156c2:	e8d0 3fef 	ldaex	r3, [r0]
   156c6:	f023 0302 	bic.w	r3, r3, #2
   156ca:	e8c0 3fe2 	stlex	r2, r3, [r0]
   156ce:	2a00      	cmp	r2, #0
   156d0:	d1f7      	bne.n	156c2 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   156d2:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   156d6:	07da      	lsls	r2, r3, #31
   156d8:	d504      	bpl.n	156e4 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   156da:	2200      	movs	r2, #0
   156dc:	2300      	movs	r3, #0
   156de:	3830      	subs	r0, #48	; 0x30
   156e0:	f00a fadc 	bl	1fc9c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   156e4:	4620      	mov	r0, r4
   156e6:	f010 fd3d 	bl	26164 <bt_att_fixed_chan_only>
   156ea:	b160      	cbz	r0, 15706 <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   156ec:	4620      	mov	r0, r4
   156ee:	f7ff fe05 	bl	152fc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   156f2:	b140      	cbz	r0, 15706 <sc_indicate_rsp+0x4a>
   156f4:	7a03      	ldrb	r3, [r0, #8]
   156f6:	07db      	lsls	r3, r3, #31
   156f8:	d505      	bpl.n	15706 <sc_indicate_rsp+0x4a>
}
   156fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   156fe:	2100      	movs	r1, #0
   15700:	300c      	adds	r0, #12
   15702:	f010 bea0 	b.w	26446 <atomic_set_bit>
}
   15706:	bd10      	pop	{r4, pc}
   15708:	20009978 	.word	0x20009978

0001570c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1570c:	2201      	movs	r2, #1
{
   1570e:	b510      	push	{r4, lr}
   15710:	4b24      	ldr	r3, [pc, #144]	; (157a4 <bt_gatt_init+0x98>)
   15712:	e8d3 1fef 	ldaex	r1, [r3]
   15716:	2900      	cmp	r1, #0
   15718:	d103      	bne.n	15722 <bt_gatt_init+0x16>
   1571a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1571e:	2800      	cmp	r0, #0
   15720:	d1f7      	bne.n	15712 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   15722:	d13e      	bne.n	157a2 <bt_gatt_init+0x96>
   15724:	4b20      	ldr	r3, [pc, #128]	; (157a8 <bt_gatt_init+0x9c>)
   15726:	e8d3 1fef 	ldaex	r1, [r3]
   1572a:	2900      	cmp	r1, #0
   1572c:	d103      	bne.n	15736 <bt_gatt_init+0x2a>
   1572e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   15732:	2800      	cmp	r0, #0
   15734:	d1f7      	bne.n	15726 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   15736:	d120      	bne.n	1577a <bt_gatt_init+0x6e>
   15738:	2000      	movs	r0, #0
   1573a:	491c      	ldr	r1, [pc, #112]	; (157ac <bt_gatt_init+0xa0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1573c:	4a1c      	ldr	r2, [pc, #112]	; (157b0 <bt_gatt_init+0xa4>)
   1573e:	880b      	ldrh	r3, [r1, #0]
   15740:	4c1c      	ldr	r4, [pc, #112]	; (157b4 <bt_gatt_init+0xa8>)
   15742:	42a2      	cmp	r2, r4
   15744:	d916      	bls.n	15774 <bt_gatt_init+0x68>
   15746:	b100      	cbz	r0, 1574a <bt_gatt_init+0x3e>
   15748:	800b      	strh	r3, [r1, #0]
   1574a:	491b      	ldr	r1, [pc, #108]	; (157b8 <bt_gatt_init+0xac>)
   1574c:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   15750:	4a1a      	ldr	r2, [pc, #104]	; (157bc <bt_gatt_init+0xb0>)
   15752:	481b      	ldr	r0, [pc, #108]	; (157c0 <bt_gatt_init+0xb4>)
   15754:	f00e fc65 	bl	24022 <assert_print>
   15758:	481a      	ldr	r0, [pc, #104]	; (157c4 <bt_gatt_init+0xb8>)
   1575a:	f00e fc62 	bl	24022 <assert_print>
   1575e:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   15762:	4816      	ldr	r0, [pc, #88]	; (157bc <bt_gatt_init+0xb0>)
   15764:	f00e fc56 	bl	24014 <assert_post_action>
		last_static_handle += svc->attr_count;
   15768:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1576a:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   1576c:	4403      	add	r3, r0
   1576e:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   15770:	2001      	movs	r0, #1
   15772:	e7e6      	b.n	15742 <bt_gatt_init+0x36>
   15774:	d3f8      	bcc.n	15768 <bt_gatt_init+0x5c>
   15776:	b100      	cbz	r0, 1577a <bt_gatt_init+0x6e>
   15778:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1577a:	2200      	movs	r2, #0
   1577c:	4b12      	ldr	r3, [pc, #72]	; (157c8 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1577e:	4913      	ldr	r1, [pc, #76]	; (157cc <bt_gatt_init+0xc0>)
   15780:	4813      	ldr	r0, [pc, #76]	; (157d0 <bt_gatt_init+0xc4>)
	list->tail = NULL;
   15782:	e9c3 2200 	strd	r2, r2, [r3]
   15786:	f00a f96d 	bl	1fa64 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1578a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1578e:	2300      	movs	r3, #0
   15790:	480f      	ldr	r0, [pc, #60]	; (157d0 <bt_gatt_init+0xc4>)
   15792:	f7fa fea3 	bl	104dc <bt_long_wq_schedule>
}
   15796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1579a:	490e      	ldr	r1, [pc, #56]	; (157d4 <bt_gatt_init+0xc8>)
   1579c:	480e      	ldr	r0, [pc, #56]	; (157d8 <bt_gatt_init+0xcc>)
   1579e:	f00a b961 	b.w	1fa64 <k_work_init_delayable>
}
   157a2:	bd10      	pop	{r4, pc}
   157a4:	200210c8 	.word	0x200210c8
   157a8:	200210c4 	.word	0x200210c4
   157ac:	200214c8 	.word	0x200214c8
   157b0:	0002964c 	.word	0x0002964c
   157b4:	00029664 	.word	0x00029664
   157b8:	0002d7be 	.word	0x0002d7be
   157bc:	0002d787 	.word	0x0002d787
   157c0:	0002a669 	.word	0x0002a669
   157c4:	0002b5ef 	.word	0x0002b5ef
   157c8:	200210cc 	.word	0x200210cc
   157cc:	00026533 	.word	0x00026533
   157d0:	200098d0 	.word	0x200098d0
   157d4:	00015e55 	.word	0x00015e55
   157d8:	20009948 	.word	0x20009948

000157dc <bt_gatt_attr_get_handle>:
	if (!attr) {
   157dc:	4603      	mov	r3, r0
{
   157de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   157e2:	b398      	cbz	r0, 1584c <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   157e4:	8a00      	ldrh	r0, [r0, #16]
   157e6:	bb88      	cbnz	r0, 1584c <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   157e8:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   157ea:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   157ee:	4919      	ldr	r1, [pc, #100]	; (15854 <bt_gatt_attr_get_handle+0x78>)
   157f0:	f8df e064 	ldr.w	lr, [pc, #100]	; 15858 <bt_gatt_attr_get_handle+0x7c>
   157f4:	4571      	cmp	r1, lr
   157f6:	d928      	bls.n	1584a <bt_gatt_attr_get_handle+0x6e>
   157f8:	4918      	ldr	r1, [pc, #96]	; (1585c <bt_gatt_attr_get_handle+0x80>)
   157fa:	f240 635d 	movw	r3, #1629	; 0x65d
   157fe:	4a18      	ldr	r2, [pc, #96]	; (15860 <bt_gatt_attr_get_handle+0x84>)
   15800:	4818      	ldr	r0, [pc, #96]	; (15864 <bt_gatt_attr_get_handle+0x88>)
   15802:	f00e fc0e 	bl	24022 <assert_print>
   15806:	4818      	ldr	r0, [pc, #96]	; (15868 <bt_gatt_attr_get_handle+0x8c>)
   15808:	f00e fc0b 	bl	24022 <assert_print>
   1580c:	f240 615d 	movw	r1, #1629	; 0x65d
   15810:	4813      	ldr	r0, [pc, #76]	; (15860 <bt_gatt_attr_get_handle+0x84>)
   15812:	f00e fbff 	bl	24014 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   15816:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1581a:	42bb      	cmp	r3, r7
   1581c:	d304      	bcc.n	15828 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1581e:	fb0c 7206 	mla	r2, ip, r6, r7
   15822:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   15824:	4293      	cmp	r3, r2
   15826:	d90e      	bls.n	15846 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   15828:	4434      	add	r4, r6
   1582a:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1582c:	4614      	mov	r4, r2
   1582e:	3108      	adds	r1, #8
   15830:	e7e0      	b.n	157f4 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   15832:	fb0c 7805 	mla	r8, ip, r5, r7
   15836:	4543      	cmp	r3, r8
   15838:	d00a      	beq.n	15850 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1583a:	3501      	adds	r5, #1
   1583c:	1962      	adds	r2, r4, r5
   1583e:	42b5      	cmp	r5, r6
   15840:	b292      	uxth	r2, r2
   15842:	d1f6      	bne.n	15832 <bt_gatt_attr_get_handle+0x56>
   15844:	e7f2      	b.n	1582c <bt_gatt_attr_get_handle+0x50>
   15846:	2500      	movs	r5, #0
   15848:	e7f8      	b.n	1583c <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1584a:	d3e4      	bcc.n	15816 <bt_gatt_attr_get_handle+0x3a>
}
   1584c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15850:	4610      	mov	r0, r2
   15852:	e7fb      	b.n	1584c <bt_gatt_attr_get_handle+0x70>
   15854:	0002964c 	.word	0x0002964c
   15858:	00029664 	.word	0x00029664
   1585c:	0002d7b7 	.word	0x0002d7b7
   15860:	0002d787 	.word	0x0002d787
   15864:	0002a669 	.word	0x0002a669
   15868:	0002b5ef 	.word	0x0002b5ef

0001586c <bt_gatt_foreach_attr_type>:
{
   1586c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15870:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   15872:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   15876:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1587a:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   1587c:	2d00      	cmp	r5, #0
   1587e:	bf08      	it	eq
   15880:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   15882:	4b2b      	ldr	r3, [pc, #172]	; (15930 <bt_gatt_foreach_attr_type+0xc4>)
{
   15884:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   15886:	881b      	ldrh	r3, [r3, #0]
{
   15888:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   1588a:	4283      	cmp	r3, r0
   1588c:	d232      	bcs.n	158f4 <bt_gatt_foreach_attr_type+0x88>
}
   1588e:	b003      	add	sp, #12
   15890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   15894:	4640      	mov	r0, r8
   15896:	5889      	ldr	r1, [r1, r2]
   15898:	9301      	str	r3, [sp, #4]
   1589a:	f00f fb41 	bl	24f20 <bt_uuid_cmp>
   1589e:	9b01      	ldr	r3, [sp, #4]
   158a0:	b190      	cbz	r0, 158c8 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   158a2:	3401      	adds	r4, #1
   158a4:	f10a 0a01 	add.w	sl, sl, #1
   158a8:	b2a4      	uxth	r4, r4
   158aa:	6873      	ldr	r3, [r6, #4]
   158ac:	4553      	cmp	r3, sl
   158ae:	d92c      	bls.n	1590a <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   158b0:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   158b2:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   158b4:	429c      	cmp	r4, r3
   158b6:	d8ea      	bhi.n	1588e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   158b8:	42bc      	cmp	r4, r7
   158ba:	d3f2      	bcc.n	158a2 <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   158bc:	fb0b f20a 	mul.w	r2, fp, sl
   158c0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   158c2:	f1b8 0f00 	cmp.w	r8, #0
   158c6:	d1e5      	bne.n	15894 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   158c8:	f1b9 0f00 	cmp.w	r9, #0
   158cc:	d10b      	bne.n	158e6 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   158ce:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   158d0:	4618      	mov	r0, r3
	*num_matches -= 1;
   158d2:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   158d4:	4621      	mov	r1, r4
   158d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   158d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   158da:	4798      	blx	r3
	if (!*num_matches) {
   158dc:	2d00      	cmp	r5, #0
   158de:	d0d6      	beq.n	1588e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   158e0:	2800      	cmp	r0, #0
   158e2:	d1de      	bne.n	158a2 <bt_gatt_foreach_attr_type+0x36>
   158e4:	e7d3      	b.n	1588e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   158e6:	68da      	ldr	r2, [r3, #12]
   158e8:	4591      	cmp	r9, r2
   158ea:	d1da      	bne.n	158a2 <bt_gatt_foreach_attr_type+0x36>
   158ec:	e7ef      	b.n	158ce <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   158ee:	f04f 0a00 	mov.w	sl, #0
   158f2:	e7da      	b.n	158aa <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   158f4:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   158f6:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   158fa:	4e0e      	ldr	r6, [pc, #56]	; (15934 <bt_gatt_foreach_attr_type+0xc8>)
   158fc:	e006      	b.n	1590c <bt_gatt_foreach_attr_type+0xa0>
   158fe:	d2c6      	bcs.n	1588e <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   15900:	6873      	ldr	r3, [r6, #4]
   15902:	4423      	add	r3, r4
   15904:	42bb      	cmp	r3, r7
   15906:	d2f2      	bcs.n	158ee <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   15908:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1590a:	3608      	adds	r6, #8
   1590c:	4b0a      	ldr	r3, [pc, #40]	; (15938 <bt_gatt_foreach_attr_type+0xcc>)
   1590e:	429e      	cmp	r6, r3
   15910:	d9f5      	bls.n	158fe <bt_gatt_foreach_attr_type+0x92>
   15912:	490a      	ldr	r1, [pc, #40]	; (1593c <bt_gatt_foreach_attr_type+0xd0>)
   15914:	f240 7321 	movw	r3, #1825	; 0x721
   15918:	4a09      	ldr	r2, [pc, #36]	; (15940 <bt_gatt_foreach_attr_type+0xd4>)
   1591a:	480a      	ldr	r0, [pc, #40]	; (15944 <bt_gatt_foreach_attr_type+0xd8>)
   1591c:	f00e fb81 	bl	24022 <assert_print>
   15920:	4809      	ldr	r0, [pc, #36]	; (15948 <bt_gatt_foreach_attr_type+0xdc>)
   15922:	f00e fb7e 	bl	24022 <assert_print>
   15926:	f240 7121 	movw	r1, #1825	; 0x721
   1592a:	4805      	ldr	r0, [pc, #20]	; (15940 <bt_gatt_foreach_attr_type+0xd4>)
   1592c:	f00e fb72 	bl	24014 <assert_post_action>
   15930:	200214c8 	.word	0x200214c8
   15934:	0002964c 	.word	0x0002964c
   15938:	00029664 	.word	0x00029664
   1593c:	0002d7b7 	.word	0x0002d7b7
   15940:	0002d787 	.word	0x0002d787
   15944:	0002a669 	.word	0x0002a669
   15948:	0002b5ef 	.word	0x0002b5ef

0001594c <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   1594c:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   1594e:	b510      	push	{r4, lr}
   15950:	b0cc      	sub	sp, #304	; 0x130
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15952:	aa20      	add	r2, sp, #128	; 0x80
   15954:	a904      	add	r1, sp, #16
   15956:	a808      	add	r0, sp, #32
	uint8_t key[16] = {};
   15958:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1595c:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15960:	f00e ff41 	bl	247e6 <tc_cmac_setup>
   15964:	4603      	mov	r3, r0
   15966:	b948      	cbnz	r0, 1597c <db_hash_gen.constprop.0+0x30>
		LOG_ERR("Unable to setup AES CMAC");
   15968:	4a17      	ldr	r2, [pc, #92]	; (159c8 <db_hash_gen.constprop.0+0x7c>)
		LOG_ERR("Unable to calculate hash");
   1596a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1596e:	4917      	ldr	r1, [pc, #92]	; (159cc <db_hash_gen.constprop.0+0x80>)
   15970:	2201      	movs	r2, #1
   15972:	9300      	str	r3, [sp, #0]
   15974:	f010 fd37 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
}
   15978:	b04c      	add	sp, #304	; 0x130
   1597a:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1597c:	ab08      	add	r3, sp, #32
   1597e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15982:	2001      	movs	r0, #1
   15984:	4a12      	ldr	r2, [pc, #72]	; (159d0 <db_hash_gen.constprop.0+0x84>)
   15986:	f010 fdc9 	bl	2651c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1598a:	4812      	ldr	r0, [pc, #72]	; (159d4 <db_hash_gen.constprop.0+0x88>)
   1598c:	a908      	add	r1, sp, #32
   1598e:	f00e ffbf 	bl	24910 <tc_cmac_final>
   15992:	4603      	mov	r3, r0
   15994:	b908      	cbnz	r0, 1599a <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   15996:	4a10      	ldr	r2, [pc, #64]	; (159d8 <db_hash_gen.constprop.0+0x8c>)
   15998:	e7e7      	b.n	1596a <db_hash_gen.constprop.0+0x1e>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1599a:	2208      	movs	r2, #8
   1599c:	4b0d      	ldr	r3, [pc, #52]	; (159d4 <db_hash_gen.constprop.0+0x88>)
   1599e:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   159a2:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   159a4:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   159a8:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   159aa:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   159ae:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   159b0:	d1f7      	bne.n	159a2 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   159b2:	4b0a      	ldr	r3, [pc, #40]	; (159dc <db_hash_gen.constprop.0+0x90>)
   159b4:	e8d3 1fef 	ldaex	r1, [r3]
   159b8:	f041 0104 	orr.w	r1, r1, #4
   159bc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   159c0:	2a00      	cmp	r2, #0
   159c2:	d0d9      	beq.n	15978 <db_hash_gen.constprop.0+0x2c>
   159c4:	e7f6      	b.n	159b4 <db_hash_gen.constprop.0+0x68>
   159c6:	bf00      	nop
   159c8:	0002d7e6 	.word	0x0002d7e6
   159cc:	000296bc 	.word	0x000296bc
   159d0:	00026209 	.word	0x00026209
   159d4:	200098c0 	.word	0x200098c0
   159d8:	0002d7ff 	.word	0x0002d7ff
   159dc:	20009978 	.word	0x20009978

000159e0 <db_hash_read>:
{
   159e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   159e4:	4914      	ldr	r1, [pc, #80]	; (15a38 <db_hash_read+0x58>)
{
   159e6:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   159e8:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   159ec:	4614      	mov	r4, r2
   159ee:	461d      	mov	r5, r3
   159f0:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   159f4:	f00a f9b2 	bl	1fd5c <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   159f8:	4b10      	ldr	r3, [pc, #64]	; (15a3c <db_hash_read+0x5c>)
   159fa:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   159fe:	0759      	lsls	r1, r3, #29
   15a00:	d401      	bmi.n	15a06 <db_hash_read+0x26>
		db_hash_gen(true);
   15a02:	f7ff ffa3 	bl	1594c <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   15a06:	4630      	mov	r0, r6
   15a08:	f7ff fc78 	bl	152fc <find_cf_cfg>
	if (cfg &&
   15a0c:	b150      	cbz	r0, 15a24 <db_hash_read+0x44>
   15a0e:	7a03      	ldrb	r3, [r0, #8]
   15a10:	07da      	lsls	r2, r3, #31
   15a12:	d507      	bpl.n	15a24 <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   15a14:	300c      	adds	r0, #12
   15a16:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   15a1a:	07db      	lsls	r3, r3, #31
   15a1c:	d402      	bmi.n	15a24 <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   15a1e:	2101      	movs	r1, #1
   15a20:	f010 fd11 	bl	26446 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   15a24:	2310      	movs	r3, #16
   15a26:	463a      	mov	r2, r7
   15a28:	9306      	str	r3, [sp, #24]
   15a2a:	4629      	mov	r1, r5
   15a2c:	4620      	mov	r0, r4
}
   15a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   15a32:	4b03      	ldr	r3, [pc, #12]	; (15a40 <db_hash_read+0x60>)
   15a34:	f010 bc4f 	b.w	262d6 <bt_gatt_attr_read.constprop.0>
   15a38:	20009900 	.word	0x20009900
   15a3c:	20009978 	.word	0x20009978
   15a40:	200098c0 	.word	0x200098c0

00015a44 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   15a44:	2300      	movs	r3, #0
{
   15a46:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   15a48:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   15a4a:	f7ff fec7 	bl	157dc <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   15a4e:	1c41      	adds	r1, r0, #1
   15a50:	b289      	uxth	r1, r1
   15a52:	4608      	mov	r0, r1
   15a54:	4a03      	ldr	r2, [pc, #12]	; (15a64 <bt_gatt_attr_next+0x20>)
   15a56:	ab01      	add	r3, sp, #4
   15a58:	f010 fd60 	bl	2651c <bt_gatt_foreach_attr>
}
   15a5c:	9801      	ldr	r0, [sp, #4]
   15a5e:	b003      	add	sp, #12
   15a60:	f85d fb04 	ldr.w	pc, [sp], #4
   15a64:	000261b9 	.word	0x000261b9

00015a68 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   15a68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15a6c:	460c      	mov	r4, r1
   15a6e:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   15a70:	4605      	mov	r5, r0
   15a72:	b970      	cbnz	r0, 15a92 <bt_gatt_is_subscribed+0x2a>
   15a74:	4960      	ldr	r1, [pc, #384]	; (15bf8 <bt_gatt_is_subscribed+0x190>)
   15a76:	f640 434d 	movw	r3, #3149	; 0xc4d
   15a7a:	4a60      	ldr	r2, [pc, #384]	; (15bfc <bt_gatt_is_subscribed+0x194>)
   15a7c:	4860      	ldr	r0, [pc, #384]	; (15c00 <bt_gatt_is_subscribed+0x198>)
   15a7e:	f00e fad0 	bl	24022 <assert_print>
   15a82:	4860      	ldr	r0, [pc, #384]	; (15c04 <bt_gatt_is_subscribed+0x19c>)
   15a84:	f00e facd 	bl	24022 <assert_print>
   15a88:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   15a8c:	485b      	ldr	r0, [pc, #364]	; (15bfc <bt_gatt_is_subscribed+0x194>)
   15a8e:	f00e fac1 	bl	24014 <assert_post_action>
   15a92:	b961      	cbnz	r1, 15aae <bt_gatt_is_subscribed+0x46>
   15a94:	495c      	ldr	r1, [pc, #368]	; (15c08 <bt_gatt_is_subscribed+0x1a0>)
   15a96:	f640 434e 	movw	r3, #3150	; 0xc4e
   15a9a:	4a58      	ldr	r2, [pc, #352]	; (15bfc <bt_gatt_is_subscribed+0x194>)
   15a9c:	4858      	ldr	r0, [pc, #352]	; (15c00 <bt_gatt_is_subscribed+0x198>)
   15a9e:	f00e fac0 	bl	24022 <assert_print>
   15aa2:	4858      	ldr	r0, [pc, #352]	; (15c04 <bt_gatt_is_subscribed+0x19c>)
   15aa4:	f00e fabd 	bl	24022 <assert_print>
   15aa8:	f640 414e 	movw	r1, #3150	; 0xc4e
   15aac:	e7ee      	b.n	15a8c <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   15aae:	7b43      	ldrb	r3, [r0, #13]
   15ab0:	2b07      	cmp	r3, #7
   15ab2:	d110      	bne.n	15ad6 <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   15ab4:	2300      	movs	r3, #0
   15ab6:	f88d 300c 	strb.w	r3, [sp, #12]
   15aba:	f642 0303 	movw	r3, #10243	; 0x2803
   15abe:	6820      	ldr	r0, [r4, #0]
   15ac0:	a903      	add	r1, sp, #12
   15ac2:	f8ad 300e 	strh.w	r3, [sp, #14]
   15ac6:	f00f fa2b 	bl	24f20 <bt_uuid_cmp>
   15aca:	b9d0      	cbnz	r0, 15b02 <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   15acc:	68e3      	ldr	r3, [r4, #12]
   15ace:	799b      	ldrb	r3, [r3, #6]
   15ad0:	f013 0f30 	tst.w	r3, #48	; 0x30
   15ad4:	d103      	bne.n	15ade <bt_gatt_is_subscribed+0x76>
		return false;
   15ad6:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   15ad8:	b004      	add	sp, #16
   15ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   15ade:	4620      	mov	r0, r4
   15ae0:	f7ff ffb0 	bl	15a44 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   15ae4:	4604      	mov	r4, r0
   15ae6:	b960      	cbnz	r0, 15b02 <bt_gatt_is_subscribed+0x9a>
   15ae8:	4947      	ldr	r1, [pc, #284]	; (15c08 <bt_gatt_is_subscribed+0x1a0>)
   15aea:	f640 435f 	movw	r3, #3167	; 0xc5f
   15aee:	4a43      	ldr	r2, [pc, #268]	; (15bfc <bt_gatt_is_subscribed+0x194>)
   15af0:	4843      	ldr	r0, [pc, #268]	; (15c00 <bt_gatt_is_subscribed+0x198>)
   15af2:	f00e fa96 	bl	24022 <assert_print>
   15af6:	4845      	ldr	r0, [pc, #276]	; (15c0c <bt_gatt_is_subscribed+0x1a4>)
   15af8:	f00e fa93 	bl	24022 <assert_print>
   15afc:	f640 415f 	movw	r1, #3167	; 0xc5f
   15b00:	e7c4      	b.n	15a8c <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   15b02:	2300      	movs	r3, #0
   15b04:	6820      	ldr	r0, [r4, #0]
   15b06:	f88d 300c 	strb.w	r3, [sp, #12]
   15b0a:	f642 1302 	movw	r3, #10498	; 0x2902
   15b0e:	a903      	add	r1, sp, #12
   15b10:	f8ad 300e 	strh.w	r3, [sp, #14]
   15b14:	f00f fa04 	bl	24f20 <bt_uuid_cmp>
   15b18:	b188      	cbz	r0, 15b3e <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   15b1a:	4620      	mov	r0, r4
   15b1c:	f7ff ff92 	bl	15a44 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   15b20:	4604      	mov	r4, r0
   15b22:	b960      	cbnz	r0, 15b3e <bt_gatt_is_subscribed+0xd6>
   15b24:	4938      	ldr	r1, [pc, #224]	; (15c08 <bt_gatt_is_subscribed+0x1a0>)
   15b26:	f640 4365 	movw	r3, #3173	; 0xc65
   15b2a:	4a34      	ldr	r2, [pc, #208]	; (15bfc <bt_gatt_is_subscribed+0x194>)
   15b2c:	4834      	ldr	r0, [pc, #208]	; (15c00 <bt_gatt_is_subscribed+0x198>)
   15b2e:	f00e fa78 	bl	24022 <assert_print>
   15b32:	4836      	ldr	r0, [pc, #216]	; (15c0c <bt_gatt_is_subscribed+0x1a4>)
   15b34:	f00e fa75 	bl	24022 <assert_print>
   15b38:	f640 4165 	movw	r1, #3173	; 0xc65
   15b3c:	e7a6      	b.n	15a8c <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   15b3e:	2700      	movs	r7, #0
   15b40:	f642 1802 	movw	r8, #10498	; 0x2902
   15b44:	6820      	ldr	r0, [r4, #0]
   15b46:	4669      	mov	r1, sp
   15b48:	f88d 7000 	strb.w	r7, [sp]
   15b4c:	f8ad 8002 	strh.w	r8, [sp, #2]
   15b50:	f00f f9e6 	bl	24f20 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15b54:	bb20      	cbnz	r0, 15ba0 <bt_gatt_is_subscribed+0x138>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   15b56:	2300      	movs	r3, #0
   15b58:	6820      	ldr	r0, [r4, #0]
   15b5a:	f88d 300c 	strb.w	r3, [sp, #12]
   15b5e:	f642 1302 	movw	r3, #10498	; 0x2902
   15b62:	a903      	add	r1, sp, #12
   15b64:	f8ad 300e 	strh.w	r3, [sp, #14]
   15b68:	f00f f9da 	bl	24f20 <bt_uuid_cmp>
   15b6c:	2800      	cmp	r0, #0
   15b6e:	d1b2      	bne.n	15ad6 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   15b70:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   15b72:	4628      	mov	r0, r5
   15b74:	4622      	mov	r2, r4
   15b76:	f812 1b01 	ldrb.w	r1, [r2], #1
   15b7a:	f00f fdf9 	bl	25770 <bt_conn_is_peer_addr_le>
   15b7e:	b110      	cbz	r0, 15b86 <bt_gatt_is_subscribed+0x11e>
   15b80:	8923      	ldrh	r3, [r4, #8]
   15b82:	421e      	tst	r6, r3
   15b84:	d10a      	bne.n	15b9c <bt_gatt_is_subscribed+0x134>
   15b86:	4628      	mov	r0, r5
   15b88:	7aa1      	ldrb	r1, [r4, #10]
   15b8a:	f104 020b 	add.w	r2, r4, #11
   15b8e:	f00f fdef 	bl	25770 <bt_conn_is_peer_addr_le>
   15b92:	2800      	cmp	r0, #0
   15b94:	d09f      	beq.n	15ad6 <bt_gatt_is_subscribed+0x6e>
   15b96:	8a63      	ldrh	r3, [r4, #18]
   15b98:	421e      	tst	r6, r3
   15b9a:	d09c      	beq.n	15ad6 <bt_gatt_is_subscribed+0x6e>
			return true;
   15b9c:	2001      	movs	r0, #1
   15b9e:	e79b      	b.n	15ad8 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   15ba0:	f642 0303 	movw	r3, #10243	; 0x2803
   15ba4:	6820      	ldr	r0, [r4, #0]
   15ba6:	a901      	add	r1, sp, #4
   15ba8:	f88d 7004 	strb.w	r7, [sp, #4]
   15bac:	f8ad 3006 	strh.w	r3, [sp, #6]
   15bb0:	f00f f9b6 	bl	24f20 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   15bb4:	2800      	cmp	r0, #0
   15bb6:	d0ce      	beq.n	15b56 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15bb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15bbc:	6820      	ldr	r0, [r4, #0]
   15bbe:	a902      	add	r1, sp, #8
   15bc0:	f88d 7008 	strb.w	r7, [sp, #8]
   15bc4:	f8ad 300a 	strh.w	r3, [sp, #10]
   15bc8:	f00f f9aa 	bl	24f20 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   15bcc:	2800      	cmp	r0, #0
   15bce:	d0c2      	beq.n	15b56 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15bd0:	f642 0301 	movw	r3, #10241	; 0x2801
   15bd4:	6820      	ldr	r0, [r4, #0]
   15bd6:	a903      	add	r1, sp, #12
   15bd8:	f88d 700c 	strb.w	r7, [sp, #12]
   15bdc:	f8ad 300e 	strh.w	r3, [sp, #14]
   15be0:	f00f f99e 	bl	24f20 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15be4:	2800      	cmp	r0, #0
   15be6:	d0b6      	beq.n	15b56 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   15be8:	4620      	mov	r0, r4
   15bea:	f7ff ff2b 	bl	15a44 <bt_gatt_attr_next>
		if (!attr) {
   15bee:	4604      	mov	r4, r0
   15bf0:	2800      	cmp	r0, #0
   15bf2:	d1a7      	bne.n	15b44 <bt_gatt_is_subscribed+0xdc>
   15bf4:	e76f      	b.n	15ad6 <bt_gatt_is_subscribed+0x6e>
   15bf6:	bf00      	nop
   15bf8:	0002c77f 	.word	0x0002c77f
   15bfc:	0002d787 	.word	0x0002d787
   15c00:	0002a669 	.word	0x0002a669
   15c04:	0002d818 	.word	0x0002d818
   15c08:	0002d82d 	.word	0x0002d82d
   15c0c:	0002d832 	.word	0x0002d832

00015c10 <gatt_indicate>:
{
   15c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15c14:	4615      	mov	r5, r2
   15c16:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   15c18:	2294      	movs	r2, #148	; 0x94
   15c1a:	6869      	ldr	r1, [r5, #4]
{
   15c1c:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   15c1e:	f010 fc8a 	bl	26536 <bt_gatt_check_perm>
   15c22:	4680      	mov	r8, r0
   15c24:	b178      	cbz	r0, 15c46 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   15c26:	4b35      	ldr	r3, [pc, #212]	; (15cfc <gatt_indicate+0xec>)
   15c28:	2202      	movs	r2, #2
   15c2a:	9302      	str	r3, [sp, #8]
   15c2c:	2300      	movs	r3, #0
   15c2e:	4934      	ldr	r1, [pc, #208]	; (15d00 <gatt_indicate+0xf0>)
   15c30:	4618      	mov	r0, r3
   15c32:	e9cd 3300 	strd	r3, r3, [sp]
   15c36:	f010 fbd6 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   15c3a:	f04f 35ff 	mov.w	r5, #4294967295
}
   15c3e:	4628      	mov	r0, r5
   15c40:	b004      	add	sp, #16
   15c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   15c46:	2202      	movs	r2, #2
   15c48:	4638      	mov	r0, r7
   15c4a:	6869      	ldr	r1, [r5, #4]
   15c4c:	f7ff ff0c 	bl	15a68 <bt_gatt_is_subscribed>
   15c50:	4603      	mov	r3, r0
   15c52:	b950      	cbnz	r0, 15c6a <gatt_indicate+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   15c54:	4a2b      	ldr	r2, [pc, #172]	; (15d04 <gatt_indicate+0xf4>)
   15c56:	492a      	ldr	r1, [pc, #168]	; (15d00 <gatt_indicate+0xf0>)
   15c58:	e9cd 0201 	strd	r0, r2, [sp, #4]
   15c5c:	9000      	str	r0, [sp, #0]
   15c5e:	2202      	movs	r2, #2
   15c60:	f010 fbc1 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   15c64:	f06f 0515 	mvn.w	r5, #21
   15c68:	e7e9      	b.n	15c3e <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   15c6a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   15c6e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   15c70:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   15c72:	f7ff f9b1 	bl	14fd8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   15c76:	3602      	adds	r6, #2
	if (!req) {
   15c78:	4604      	mov	r4, r0
   15c7a:	b1c8      	cbz	r0, 15cb0 <gatt_indicate+0xa0>
	req->att_op = op;
   15c7c:	211d      	movs	r1, #29
	req->func = func;
   15c7e:	4b22      	ldr	r3, [pc, #136]	; (15d08 <gatt_indicate+0xf8>)
	req->len = len;
   15c80:	6146      	str	r6, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   15c82:	4632      	mov	r2, r6
	req->att_op = op;
   15c84:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   15c86:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   15c8a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   15c8c:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   15c8e:	4638      	mov	r0, r7
   15c90:	f7fe fed6 	bl	14a40 <bt_att_create_pdu>
	if (!buf) {
   15c94:	4606      	mov	r6, r0
   15c96:	b970      	cbnz	r0, 15cb6 <gatt_indicate+0xa6>
		LOG_WRN("No buffer available to send indication");
   15c98:	4b1c      	ldr	r3, [pc, #112]	; (15d0c <gatt_indicate+0xfc>)
   15c9a:	9000      	str	r0, [sp, #0]
   15c9c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15ca0:	2202      	movs	r2, #2
   15ca2:	4603      	mov	r3, r0
   15ca4:	4916      	ldr	r1, [pc, #88]	; (15d00 <gatt_indicate+0xf0>)
   15ca6:	f010 fb9e 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
		bt_att_req_free(req);
   15caa:	4620      	mov	r0, r4
   15cac:	f7ff f9b8 	bl	15020 <bt_att_req_free>
		return -ENOMEM;
   15cb0:	f06f 050b 	mvn.w	r5, #11
   15cb4:	e7c3      	b.n	15c3e <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   15cb6:	2301      	movs	r3, #1
   15cb8:	4642      	mov	r2, r8
   15cba:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   15cbc:	f106 0a0c 	add.w	sl, r6, #12
   15cc0:	f010 fa73 	bl	261aa <bt_att_set_tx_meta_data>
   15cc4:	2102      	movs	r1, #2
   15cc6:	4650      	mov	r0, sl
   15cc8:	f002 fde2 	bl	18890 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   15ccc:	4680      	mov	r8, r0
   15cce:	f828 9b02 	strh.w	r9, [r8], #2
   15cd2:	8aa9      	ldrh	r1, [r5, #20]
   15cd4:	4650      	mov	r0, sl
   15cd6:	f002 fddb 	bl	18890 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15cda:	8aaa      	ldrh	r2, [r5, #20]
   15cdc:	6929      	ldr	r1, [r5, #16]
   15cde:	4640      	mov	r0, r8
   15ce0:	f012 fd6f 	bl	287c2 <memcpy>
	err = bt_att_req_send(conn, req);
   15ce4:	4621      	mov	r1, r4
   15ce6:	4638      	mov	r0, r7
	req->buf = buf;
   15ce8:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   15cea:	f7ff fad1 	bl	15290 <bt_att_req_send>
	if (err) {
   15cee:	4605      	mov	r5, r0
   15cf0:	2800      	cmp	r0, #0
   15cf2:	d0a4      	beq.n	15c3e <gatt_indicate+0x2e>
		bt_att_req_free(req);
   15cf4:	4620      	mov	r0, r4
   15cf6:	f7ff f993 	bl	15020 <bt_att_req_free>
   15cfa:	e7a0      	b.n	15c3e <gatt_indicate+0x2e>
   15cfc:	0002d848 	.word	0x0002d848
   15d00:	000296bc 	.word	0x000296bc
   15d04:	0002d85e 	.word	0x0002d85e
   15d08:	000261db 	.word	0x000261db
   15d0c:	0002d889 	.word	0x0002d889

00015d10 <bt_gatt_indicate>:
{
   15d10:	b530      	push	{r4, r5, lr}
   15d12:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   15d14:	460c      	mov	r4, r1
{
   15d16:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   15d18:	b971      	cbnz	r1, 15d38 <bt_gatt_indicate+0x28>
   15d1a:	4946      	ldr	r1, [pc, #280]	; (15e34 <bt_gatt_indicate+0x124>)
   15d1c:	f640 330d 	movw	r3, #2829	; 0xb0d
   15d20:	4a45      	ldr	r2, [pc, #276]	; (15e38 <bt_gatt_indicate+0x128>)
   15d22:	4846      	ldr	r0, [pc, #280]	; (15e3c <bt_gatt_indicate+0x12c>)
   15d24:	f00e f97d 	bl	24022 <assert_print>
   15d28:	4845      	ldr	r0, [pc, #276]	; (15e40 <bt_gatt_indicate+0x130>)
   15d2a:	f00e f97a 	bl	24022 <assert_print>
   15d2e:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   15d32:	4841      	ldr	r0, [pc, #260]	; (15e38 <bt_gatt_indicate+0x128>)
   15d34:	f00e f96e 	bl	24014 <assert_post_action>
   15d38:	684b      	ldr	r3, [r1, #4]
   15d3a:	b973      	cbnz	r3, 15d5a <bt_gatt_indicate+0x4a>
   15d3c:	680b      	ldr	r3, [r1, #0]
   15d3e:	b963      	cbnz	r3, 15d5a <bt_gatt_indicate+0x4a>
   15d40:	4940      	ldr	r1, [pc, #256]	; (15e44 <bt_gatt_indicate+0x134>)
   15d42:	f640 330e 	movw	r3, #2830	; 0xb0e
   15d46:	4a3c      	ldr	r2, [pc, #240]	; (15e38 <bt_gatt_indicate+0x128>)
   15d48:	483c      	ldr	r0, [pc, #240]	; (15e3c <bt_gatt_indicate+0x12c>)
   15d4a:	f00e f96a 	bl	24022 <assert_print>
   15d4e:	483c      	ldr	r0, [pc, #240]	; (15e40 <bt_gatt_indicate+0x130>)
   15d50:	f00e f967 	bl	24022 <assert_print>
   15d54:	f640 310e 	movw	r1, #2830	; 0xb0e
   15d58:	e7eb      	b.n	15d32 <bt_gatt_indicate+0x22>
   15d5a:	4b3b      	ldr	r3, [pc, #236]	; (15e48 <bt_gatt_indicate+0x138>)
   15d5c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15d60:	075a      	lsls	r2, r3, #29
   15d62:	d561      	bpl.n	15e28 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   15d64:	b115      	cbz	r5, 15d6c <bt_gatt_indicate+0x5c>
   15d66:	7b6b      	ldrb	r3, [r5, #13]
   15d68:	2b07      	cmp	r3, #7
   15d6a:	d160      	bne.n	15e2e <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   15d6c:	6860      	ldr	r0, [r4, #4]
   15d6e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15d70:	f7ff fd34 	bl	157dc <bt_gatt_attr_get_handle>
	if (params->uuid) {
   15d74:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15d76:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   15d7a:	b33a      	cbz	r2, 15dcc <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15d7c:	a905      	add	r1, sp, #20
   15d7e:	9102      	str	r1, [sp, #8]
   15d80:	4932      	ldr	r1, [pc, #200]	; (15e4c <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   15d82:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15d84:	9101      	str	r1, [sp, #4]
   15d86:	2101      	movs	r1, #1
   15d88:	9100      	str	r1, [sp, #0]
   15d8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   15d8e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15d90:	f7ff fd6c 	bl	1586c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   15d94:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   15d96:	b91b      	cbnz	r3, 15da0 <bt_gatt_indicate+0x90>
			return -ENOENT;
   15d98:	f06f 0001 	mvn.w	r0, #1
}
   15d9c:	b00b      	add	sp, #44	; 0x2c
   15d9e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   15da0:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   15da2:	9b05      	ldr	r3, [sp, #20]
   15da4:	a904      	add	r1, sp, #16
   15da6:	6818      	ldr	r0, [r3, #0]
   15da8:	2300      	movs	r3, #0
   15daa:	f88d 3010 	strb.w	r3, [sp, #16]
   15dae:	f642 0303 	movw	r3, #10243	; 0x2803
   15db2:	f8ad 3012 	strh.w	r3, [sp, #18]
   15db6:	f00f f8b3 	bl	24f20 <bt_uuid_cmp>
   15dba:	b970      	cbnz	r0, 15dda <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   15dbc:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   15dbe:	68c3      	ldr	r3, [r0, #12]
   15dc0:	799b      	ldrb	r3, [r3, #6]
   15dc2:	069b      	lsls	r3, r3, #26
   15dc4:	d405      	bmi.n	15dd2 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   15dc6:	f06f 0015 	mvn.w	r0, #21
   15dca:	e7e7      	b.n	15d9c <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   15dcc:	2800      	cmp	r0, #0
   15dce:	d1e8      	bne.n	15da2 <bt_gatt_indicate+0x92>
   15dd0:	e7e2      	b.n	15d98 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   15dd2:	f010 fb5c 	bl	2648e <bt_gatt_attr_value_handle>
   15dd6:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   15dda:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   15dde:	b13d      	cbz	r5, 15df0 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   15de0:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   15de2:	4601      	mov	r1, r0
   15de4:	4622      	mov	r2, r4
   15de6:	4628      	mov	r0, r5
		params->_ref = 1;
   15de8:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   15dea:	f7ff ff11 	bl	15c10 <gatt_indicate>
   15dee:	e7d5      	b.n	15d9c <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   15df0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   15df4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   15df6:	2302      	movs	r3, #2
   15df8:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15dfc:	f642 1302 	movw	r3, #10498	; 0x2902
   15e00:	f8ad 3012 	strh.w	r3, [sp, #18]
   15e04:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   15e06:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15e08:	9302      	str	r3, [sp, #8]
   15e0a:	4b11      	ldr	r3, [pc, #68]	; (15e50 <bt_gatt_indicate+0x140>)
   15e0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15e10:	9301      	str	r3, [sp, #4]
   15e12:	2301      	movs	r3, #1
   15e14:	aa04      	add	r2, sp, #16
   15e16:	9300      	str	r3, [sp, #0]
   15e18:	462b      	mov	r3, r5
	data.ind_params = params;
   15e1a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15e1c:	f88d 5010 	strb.w	r5, [sp, #16]
   15e20:	f7ff fd24 	bl	1586c <bt_gatt_foreach_attr_type>
	return data.err;
   15e24:	9807      	ldr	r0, [sp, #28]
   15e26:	e7b9      	b.n	15d9c <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   15e28:	f06f 000a 	mvn.w	r0, #10
   15e2c:	e7b6      	b.n	15d9c <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   15e2e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15e32:	e7b3      	b.n	15d9c <bt_gatt_indicate+0x8c>
   15e34:	0002d8b0 	.word	0x0002d8b0
   15e38:	0002d787 	.word	0x0002d787
   15e3c:	0002a669 	.word	0x0002a669
   15e40:	0002d8b7 	.word	0x0002d8b7
   15e44:	0002d8cd 	.word	0x0002d8cd
   15e48:	200080cc 	.word	0x200080cc
   15e4c:	00026201 	.word	0x00026201
   15e50:	00016219 	.word	0x00016219

00015e54 <sc_process>:
{
   15e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15e56:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   15e58:	f1a0 0120 	sub.w	r1, r0, #32
   15e5c:	f100 0430 	add.w	r4, r0, #48	; 0x30
   15e60:	e8d4 2faf 	lda	r2, [r4]
   15e64:	f3c2 0040 	ubfx	r0, r2, #1, #1
   15e68:	0792      	lsls	r2, r2, #30
   15e6a:	d50e      	bpl.n	15e8a <sc_process+0x36>
   15e6c:	4919      	ldr	r1, [pc, #100]	; (15ed4 <sc_process+0x80>)
   15e6e:	f240 439a 	movw	r3, #1178	; 0x49a
   15e72:	4a19      	ldr	r2, [pc, #100]	; (15ed8 <sc_process+0x84>)
   15e74:	4819      	ldr	r0, [pc, #100]	; (15edc <sc_process+0x88>)
   15e76:	f00e f8d4 	bl	24022 <assert_print>
   15e7a:	4819      	ldr	r0, [pc, #100]	; (15ee0 <sc_process+0x8c>)
   15e7c:	f00e f8d1 	bl	24022 <assert_print>
   15e80:	f240 419a 	movw	r1, #1178	; 0x49a
   15e84:	4814      	ldr	r0, [pc, #80]	; (15ed8 <sc_process+0x84>)
   15e86:	f00e f8c5 	bl	24014 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   15e8a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   15e8e:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15e90:	e8d4 2fef 	ldaex	r2, [r4]
   15e94:	f022 0201 	bic.w	r2, r2, #1
   15e98:	e8c4 2fe5 	stlex	r5, r2, [r4]
   15e9c:	2d00      	cmp	r5, #0
   15e9e:	d1f7      	bne.n	15e90 <sc_process+0x3c>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   15ea0:	4a10      	ldr	r2, [pc, #64]	; (15ee4 <sc_process+0x90>)
	sc->start = 0U;
   15ea2:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   15ea6:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   15eaa:	4a0f      	ldr	r2, [pc, #60]	; (15ee8 <sc_process+0x94>)
	sc->end = 0U;
   15eac:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.func = sc_indicate_rsp;
   15eb0:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   15eb4:	aa01      	add	r2, sp, #4
   15eb6:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   15eba:	2204      	movs	r2, #4
   15ebc:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   15ec0:	f7ff ff26 	bl	15d10 <bt_gatt_indicate>
   15ec4:	b918      	cbnz	r0, 15ece <sc_process+0x7a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   15ec6:	2101      	movs	r1, #1
   15ec8:	4620      	mov	r0, r4
   15eca:	f010 fabc 	bl	26446 <atomic_set_bit>
}
   15ece:	b003      	add	sp, #12
   15ed0:	bd30      	pop	{r4, r5, pc}
   15ed2:	bf00      	nop
   15ed4:	0002d8ea 	.word	0x0002d8ea
   15ed8:	0002d787 	.word	0x0002d787
   15edc:	0002a669 	.word	0x0002a669
   15ee0:	0002d91b 	.word	0x0002d91b
   15ee4:	0002a108 	.word	0x0002a108
   15ee8:	000156bd 	.word	0x000156bd

00015eec <update_ccc>:
{
   15eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15ef0:	4b3e      	ldr	r3, [pc, #248]	; (15fec <update_ccc+0x100>)
{
   15ef2:	4617      	mov	r7, r2
	struct bt_conn *conn = data->conn;
   15ef4:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   15ef6:	6882      	ldr	r2, [r0, #8]
{
   15ef8:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15efa:	429a      	cmp	r2, r3
{
   15efc:	b086      	sub	sp, #24
	if (attr->write != bt_gatt_attr_write_ccc) {
   15efe:	d170      	bne.n	15fe2 <update_ccc+0xf6>
	ccc = attr->user_data;
   15f00:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   15f04:	f108 0601 	add.w	r6, r8, #1
   15f08:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   15f0c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   15f10:	b1d3      	cbz	r3, 15f48 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15f12:	4632      	mov	r2, r6
   15f14:	4620      	mov	r0, r4
   15f16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   15f1a:	f00f fc29 	bl	25770 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   15f1e:	b198      	cbz	r0, 15f48 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   15f20:	f44f 7295 	mov.w	r2, #298	; 0x12a
   15f24:	4629      	mov	r1, r5
   15f26:	4620      	mov	r0, r4
   15f28:	f010 fb05 	bl	26536 <bt_gatt_check_perm>
		if (err) {
   15f2c:	b308      	cbz	r0, 15f72 <update_ccc+0x86>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   15f2e:	2803      	cmp	r0, #3
   15f30:	d10e      	bne.n	15f50 <update_ccc+0x64>
				LOG_WRN("CCC %p not writable", attr);
   15f32:	4b2f      	ldr	r3, [pc, #188]	; (15ff0 <update_ccc+0x104>)
   15f34:	2202      	movs	r2, #2
   15f36:	9302      	str	r3, [sp, #8]
   15f38:	2300      	movs	r3, #0
   15f3a:	492e      	ldr	r1, [pc, #184]	; (15ff4 <update_ccc+0x108>)
   15f3c:	4618      	mov	r0, r3
   15f3e:	e9cd 3300 	strd	r3, r3, [sp]
   15f42:	9503      	str	r5, [sp, #12]
   15f44:	f010 fa4f 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   15f48:	360a      	adds	r6, #10
   15f4a:	454e      	cmp	r6, r9
   15f4c:	d1de      	bne.n	15f0c <update_ccc+0x20>
   15f4e:	e048      	b.n	15fe2 <update_ccc+0xf6>
			sec = BT_SECURITY_L2;
   15f50:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   15f52:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   15f54:	bf0c      	ite	eq
   15f56:	f04f 0a03 	moveq.w	sl, #3
   15f5a:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   15f5e:	f00f fc05 	bl	2576c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   15f62:	4582      	cmp	sl, r0
   15f64:	d905      	bls.n	15f72 <update_ccc+0x86>
				if (data->sec < sec) {
   15f66:	793b      	ldrb	r3, [r7, #4]
   15f68:	4553      	cmp	r3, sl
   15f6a:	d2ed      	bcs.n	15f48 <update_ccc+0x5c>
					data->sec = sec;
   15f6c:	f887 a004 	strb.w	sl, [r7, #4]
   15f70:	e7ea      	b.n	15f48 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   15f72:	4641      	mov	r1, r8
   15f74:	4628      	mov	r0, r5
   15f76:	f010 f922 	bl	261be <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   15f7a:	4b1f      	ldr	r3, [pc, #124]	; (15ff8 <update_ccc+0x10c>)
   15f7c:	4598      	cmp	r8, r3
   15f7e:	d130      	bne.n	15fe2 <update_ccc+0xf6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   15f80:	7a20      	ldrb	r0, [r4, #8]
   15f82:	f104 0190 	add.w	r1, r4, #144	; 0x90
   15f86:	f7ff f9e7 	bl	15358 <find_sc_cfg>
	if (!cfg) {
   15f8a:	b350      	cbz	r0, 15fe2 <update_ccc+0xf6>
	if (!(cfg->data.start || cfg->data.end)) {
   15f8c:	8902      	ldrh	r2, [r0, #8]
   15f8e:	8943      	ldrh	r3, [r0, #10]
   15f90:	ea52 0103 	orrs.w	r1, r2, r3
   15f94:	d025      	beq.n	15fe2 <update_ccc+0xf6>
	index = bt_conn_index(conn);
   15f96:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   15f98:	f8ad 2014 	strh.w	r2, [sp, #20]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   15f9c:	f8ad 3016 	strh.w	r3, [sp, #22]
	index = bt_conn_index(conn);
   15fa0:	f7fd fb56 	bl	13650 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   15fa4:	2318      	movs	r3, #24
   15fa6:	4915      	ldr	r1, [pc, #84]	; (15ffc <update_ccc+0x110>)
   15fa8:	4a15      	ldr	r2, [pc, #84]	; (16000 <update_ccc+0x114>)
   15faa:	fb03 1300 	mla	r3, r3, r0, r1
   15fae:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   15fb0:	4a14      	ldr	r2, [pc, #80]	; (16004 <update_ccc+0x118>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   15fb2:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   15fb4:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   15fb6:	aa05      	add	r2, sp, #20
   15fb8:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   15fba:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   15fbc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15fc0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   15fc4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   15fc6:	4620      	mov	r0, r4
   15fc8:	f7ff fea2 	bl	15d10 <bt_gatt_indicate>
   15fcc:	b148      	cbz	r0, 15fe2 <update_ccc+0xf6>
		LOG_ERR("SC restore indication failed");
   15fce:	4b0e      	ldr	r3, [pc, #56]	; (16008 <update_ccc+0x11c>)
   15fd0:	2201      	movs	r2, #1
   15fd2:	9302      	str	r3, [sp, #8]
   15fd4:	2300      	movs	r3, #0
   15fd6:	4907      	ldr	r1, [pc, #28]	; (15ff4 <update_ccc+0x108>)
   15fd8:	4618      	mov	r0, r3
   15fda:	e9cd 3300 	strd	r3, r3, [sp]
   15fde:	f010 fa02 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
}
   15fe2:	2001      	movs	r0, #1
   15fe4:	b006      	add	sp, #24
   15fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15fea:	bf00      	nop
   15fec:	0001540d 	.word	0x0001540d
   15ff0:	0002d936 	.word	0x0002d936
   15ff4:	000296bc 	.word	0x000296bc
   15ff8:	2000850c 	.word	0x2000850c
   15ffc:	2002108c 	.word	0x2002108c
   16000:	0002a108 	.word	0x0002a108
   16004:	0002645b 	.word	0x0002645b
   16008:	0002d94a 	.word	0x0002d94a

0001600c <gatt_notify>:
{
   1600c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16010:	4614      	mov	r4, r2
   16012:	4688      	mov	r8, r1
   16014:	b085      	sub	sp, #20
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   16016:	2294      	movs	r2, #148	; 0x94
   16018:	6861      	ldr	r1, [r4, #4]
{
   1601a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1601c:	f010 fa8b 	bl	26536 <bt_gatt_check_perm>
   16020:	b170      	cbz	r0, 16040 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   16022:	4b2a      	ldr	r3, [pc, #168]	; (160cc <gatt_notify+0xc0>)
   16024:	2202      	movs	r2, #2
   16026:	9302      	str	r3, [sp, #8]
   16028:	2300      	movs	r3, #0
   1602a:	4929      	ldr	r1, [pc, #164]	; (160d0 <gatt_notify+0xc4>)
   1602c:	4618      	mov	r0, r3
   1602e:	e9cd 3300 	strd	r3, r3, [sp]
   16032:	f010 f9d8 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   16036:	f04f 30ff 	mov.w	r0, #4294967295
}
   1603a:	b005      	add	sp, #20
   1603c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   16040:	2201      	movs	r2, #1
   16042:	4630      	mov	r0, r6
   16044:	6861      	ldr	r1, [r4, #4]
   16046:	f7ff fd0f 	bl	15a68 <bt_gatt_is_subscribed>
   1604a:	4603      	mov	r3, r0
   1604c:	b950      	cbnz	r0, 16064 <gatt_notify+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   1604e:	4a21      	ldr	r2, [pc, #132]	; (160d4 <gatt_notify+0xc8>)
   16050:	9000      	str	r0, [sp, #0]
   16052:	e9cd 0201 	strd	r0, r2, [sp, #4]
   16056:	491e      	ldr	r1, [pc, #120]	; (160d0 <gatt_notify+0xc4>)
   16058:	2202      	movs	r2, #2
   1605a:	f010 f9c4 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1605e:	f06f 0015 	mvn.w	r0, #21
   16062:	e7ea      	b.n	1603a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   16064:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   16066:	211b      	movs	r1, #27
   16068:	4630      	mov	r0, r6
   1606a:	3202      	adds	r2, #2
   1606c:	f7fe fce8 	bl	14a40 <bt_att_create_pdu>
	if (!buf) {
   16070:	4605      	mov	r5, r0
   16072:	b958      	cbnz	r0, 1608c <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   16074:	4b18      	ldr	r3, [pc, #96]	; (160d8 <gatt_notify+0xcc>)
   16076:	9000      	str	r0, [sp, #0]
   16078:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1607c:	2202      	movs	r2, #2
   1607e:	4603      	mov	r3, r0
   16080:	4913      	ldr	r1, [pc, #76]	; (160d0 <gatt_notify+0xc4>)
   16082:	f010 f9b0 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   16086:	f06f 000b 	mvn.w	r0, #11
   1608a:	e7d6      	b.n	1603a <gatt_notify+0x2e>
   1608c:	f100 090c 	add.w	r9, r0, #12
   16090:	2102      	movs	r1, #2
   16092:	4648      	mov	r0, r9
   16094:	f002 fbfc 	bl	18890 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   16098:	4607      	mov	r7, r0
   1609a:	f827 8b02 	strh.w	r8, [r7], #2
   1609e:	89a1      	ldrh	r1, [r4, #12]
   160a0:	4648      	mov	r0, r9
   160a2:	f002 fbf5 	bl	18890 <net_buf_simple_add>
   160a6:	89a2      	ldrh	r2, [r4, #12]
   160a8:	68a1      	ldr	r1, [r4, #8]
   160aa:	4638      	mov	r0, r7
   160ac:	f012 fb89 	bl	287c2 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   160b0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   160b4:	4628      	mov	r0, r5
   160b6:	2301      	movs	r3, #1
   160b8:	f010 f877 	bl	261aa <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   160bc:	4629      	mov	r1, r5
   160be:	4630      	mov	r0, r6
}
   160c0:	b005      	add	sp, #20
   160c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   160c6:	f7ff b885 	b.w	151d4 <bt_att_send>
   160ca:	bf00      	nop
   160cc:	0002d848 	.word	0x0002d848
   160d0:	000296bc 	.word	0x000296bc
   160d4:	0002d85e 	.word	0x0002d85e
   160d8:	0002d967 	.word	0x0002d967

000160dc <bt_gatt_notify_cb>:
{
   160dc:	b530      	push	{r4, r5, lr}
   160de:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   160e0:	460c      	mov	r4, r1
{
   160e2:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   160e4:	b971      	cbnz	r1, 16104 <bt_gatt_notify_cb+0x28>
   160e6:	4944      	ldr	r1, [pc, #272]	; (161f8 <bt_gatt_notify_cb+0x11c>)
   160e8:	f640 232d 	movw	r3, #2605	; 0xa2d
   160ec:	4a43      	ldr	r2, [pc, #268]	; (161fc <bt_gatt_notify_cb+0x120>)
   160ee:	4844      	ldr	r0, [pc, #272]	; (16200 <bt_gatt_notify_cb+0x124>)
   160f0:	f00d ff97 	bl	24022 <assert_print>
   160f4:	4843      	ldr	r0, [pc, #268]	; (16204 <bt_gatt_notify_cb+0x128>)
   160f6:	f00d ff94 	bl	24022 <assert_print>
   160fa:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   160fe:	483f      	ldr	r0, [pc, #252]	; (161fc <bt_gatt_notify_cb+0x120>)
   16100:	f00d ff88 	bl	24014 <assert_post_action>
   16104:	684b      	ldr	r3, [r1, #4]
   16106:	b973      	cbnz	r3, 16126 <bt_gatt_notify_cb+0x4a>
   16108:	680b      	ldr	r3, [r1, #0]
   1610a:	b963      	cbnz	r3, 16126 <bt_gatt_notify_cb+0x4a>
   1610c:	493e      	ldr	r1, [pc, #248]	; (16208 <bt_gatt_notify_cb+0x12c>)
   1610e:	f640 232e 	movw	r3, #2606	; 0xa2e
   16112:	4a3a      	ldr	r2, [pc, #232]	; (161fc <bt_gatt_notify_cb+0x120>)
   16114:	483a      	ldr	r0, [pc, #232]	; (16200 <bt_gatt_notify_cb+0x124>)
   16116:	f00d ff84 	bl	24022 <assert_print>
   1611a:	483a      	ldr	r0, [pc, #232]	; (16204 <bt_gatt_notify_cb+0x128>)
   1611c:	f00d ff81 	bl	24022 <assert_print>
   16120:	f640 212e 	movw	r1, #2606	; 0xa2e
   16124:	e7eb      	b.n	160fe <bt_gatt_notify_cb+0x22>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16126:	4b39      	ldr	r3, [pc, #228]	; (1620c <bt_gatt_notify_cb+0x130>)
   16128:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1612c:	075a      	lsls	r2, r3, #29
   1612e:	d55d      	bpl.n	161ec <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16130:	b115      	cbz	r5, 16138 <bt_gatt_notify_cb+0x5c>
   16132:	7b6b      	ldrb	r3, [r5, #13]
   16134:	2b07      	cmp	r3, #7
   16136:	d15c      	bne.n	161f2 <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   16138:	6860      	ldr	r0, [r4, #4]
   1613a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1613c:	f7ff fb4e 	bl	157dc <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16140:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16142:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16146:	b33a      	cbz	r2, 16198 <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16148:	a905      	add	r1, sp, #20
   1614a:	9102      	str	r1, [sp, #8]
   1614c:	4930      	ldr	r1, [pc, #192]	; (16210 <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   1614e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16150:	9101      	str	r1, [sp, #4]
   16152:	2101      	movs	r1, #1
   16154:	9100      	str	r1, [sp, #0]
   16156:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1615a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1615c:	f7ff fb86 	bl	1586c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16160:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16162:	b91b      	cbnz	r3, 1616c <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   16164:	f06f 0001 	mvn.w	r0, #1
}
   16168:	b00b      	add	sp, #44	; 0x2c
   1616a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1616c:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1616e:	9b05      	ldr	r3, [sp, #20]
   16170:	a904      	add	r1, sp, #16
   16172:	6818      	ldr	r0, [r3, #0]
   16174:	2300      	movs	r3, #0
   16176:	f88d 3010 	strb.w	r3, [sp, #16]
   1617a:	f642 0303 	movw	r3, #10243	; 0x2803
   1617e:	f8ad 3012 	strh.w	r3, [sp, #18]
   16182:	f00e fecd 	bl	24f20 <bt_uuid_cmp>
   16186:	b970      	cbnz	r0, 161a6 <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16188:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1618a:	68c3      	ldr	r3, [r0, #12]
   1618c:	799b      	ldrb	r3, [r3, #6]
   1618e:	06db      	lsls	r3, r3, #27
   16190:	d405      	bmi.n	1619e <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   16192:	f06f 0015 	mvn.w	r0, #21
   16196:	e7e7      	b.n	16168 <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   16198:	2800      	cmp	r0, #0
   1619a:	d1e8      	bne.n	1616e <bt_gatt_notify_cb+0x92>
   1619c:	e7e2      	b.n	16164 <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1619e:	f010 f976 	bl	2648e <bt_gatt_attr_value_handle>
   161a2:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   161a6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   161aa:	b12d      	cbz	r5, 161b8 <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   161ac:	4601      	mov	r1, r0
   161ae:	4622      	mov	r2, r4
   161b0:	4628      	mov	r0, r5
   161b2:	f7ff ff2b 	bl	1600c <gatt_notify>
   161b6:	e7d7      	b.n	16168 <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   161b8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   161bc:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   161c0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   161c2:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   161c4:	f8ad 2012 	strh.w	r2, [sp, #18]
   161c8:	aa05      	add	r2, sp, #20
   161ca:	9202      	str	r2, [sp, #8]
   161cc:	4a11      	ldr	r2, [pc, #68]	; (16214 <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   161ce:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   161d2:	e9cd 3200 	strd	r3, r2, [sp]
   161d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   161da:	462b      	mov	r3, r5
   161dc:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   161de:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   161e0:	f88d 5010 	strb.w	r5, [sp, #16]
   161e4:	f7ff fb42 	bl	1586c <bt_gatt_foreach_attr_type>
	return data.err;
   161e8:	9807      	ldr	r0, [sp, #28]
   161ea:	e7bd      	b.n	16168 <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   161ec:	f06f 000a 	mvn.w	r0, #10
   161f0:	e7ba      	b.n	16168 <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   161f2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   161f6:	e7b7      	b.n	16168 <bt_gatt_notify_cb+0x8c>
   161f8:	0002d8b0 	.word	0x0002d8b0
   161fc:	0002d787 	.word	0x0002d787
   16200:	0002a669 	.word	0x0002a669
   16204:	0002d8b7 	.word	0x0002d8b7
   16208:	0002d8cd 	.word	0x0002d8cd
   1620c:	200080cc 	.word	0x200080cc
   16210:	00026201 	.word	0x00026201
   16214:	00016219 	.word	0x00016219

00016218 <notify_cb>:
{
   16218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1621c:	4b46      	ldr	r3, [pc, #280]	; (16338 <notify_cb+0x120>)
{
   1621e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16220:	6882      	ldr	r2, [r0, #8]
{
   16222:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16224:	429a      	cmp	r2, r3
{
   16226:	b085      	sub	sp, #20
	if (attr->write != bt_gatt_attr_write_ccc) {
   16228:	d136      	bne.n	16298 <notify_cb+0x80>
	ccc = attr->user_data;
   1622a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1622e:	4b43      	ldr	r3, [pc, #268]	; (1633c <notify_cb+0x124>)
   16230:	459a      	cmp	sl, r3
   16232:	d119      	bne.n	16268 <notify_cb+0x50>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16234:	2600      	movs	r6, #0
   16236:	4c42      	ldr	r4, [pc, #264]	; (16340 <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16238:	4f42      	ldr	r7, [pc, #264]	; (16344 <notify_cb+0x12c>)
   1623a:	4639      	mov	r1, r7
   1623c:	4620      	mov	r0, r4
   1623e:	f010 f836 	bl	262ae <bt_addr_le_eq>
   16242:	b978      	cbnz	r0, 16264 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   16244:	2207      	movs	r2, #7
   16246:	4621      	mov	r1, r4
   16248:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1624c:	f7fd fbf0 	bl	13a30 <bt_conn_lookup_state_le>
			if (!conn) {
   16250:	bb38      	cbnz	r0, 162a2 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   16252:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   16254:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   16256:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   16258:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1625c:	8853      	ldrh	r3, [r2, #2]
   1625e:	8812      	ldrh	r2, [r2, #0]
   16260:	f7ff f94c 	bl	154fc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16264:	340c      	adds	r4, #12
   16266:	b1d6      	cbz	r6, 1629e <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16268:	f10a 0601 	add.w	r6, sl, #1
   1626c:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   16270:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   16274:	89ab      	ldrh	r3, [r5, #12]
   16276:	429a      	cmp	r2, r3
   16278:	d10b      	bne.n	16292 <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1627a:	4631      	mov	r1, r6
   1627c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   16280:	f7fd fb96 	bl	139b0 <bt_conn_lookup_addr_le>
		if (!conn) {
   16284:	4604      	mov	r4, r0
   16286:	b120      	cbz	r0, 16292 <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   16288:	7b43      	ldrb	r3, [r0, #13]
   1628a:	2b07      	cmp	r3, #7
   1628c:	d00c      	beq.n	162a8 <notify_cb+0x90>
			bt_conn_unref(conn);
   1628e:	f7fd f8c3 	bl	13418 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16292:	360a      	adds	r6, #10
   16294:	45b3      	cmp	fp, r6
   16296:	d1eb      	bne.n	16270 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   16298:	f04f 0901 	mov.w	r9, #1
   1629c:	e048      	b.n	16330 <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1629e:	2601      	movs	r6, #1
   162a0:	e7cb      	b.n	1623a <notify_cb+0x22>
			bt_conn_unref(conn);
   162a2:	f7fd f8b9 	bl	13418 <bt_conn_unref>
   162a6:	e7dd      	b.n	16264 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   162a8:	f8da 3020 	ldr.w	r3, [sl, #32]
   162ac:	b123      	cbz	r3, 162b8 <notify_cb+0xa0>
   162ae:	4641      	mov	r1, r8
   162b0:	4798      	blx	r3
   162b2:	b908      	cbnz	r0, 162b8 <notify_cb+0xa0>
			bt_conn_unref(conn);
   162b4:	4620      	mov	r0, r4
   162b6:	e7ea      	b.n	1628e <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   162b8:	2294      	movs	r2, #148	; 0x94
   162ba:	4641      	mov	r1, r8
   162bc:	4620      	mov	r0, r4
   162be:	f010 f93a 	bl	26536 <bt_gatt_check_perm>
   162c2:	4681      	mov	r9, r0
   162c4:	b150      	cbz	r0, 162dc <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   162c6:	4b20      	ldr	r3, [pc, #128]	; (16348 <notify_cb+0x130>)
   162c8:	2202      	movs	r2, #2
   162ca:	9302      	str	r3, [sp, #8]
   162cc:	2300      	movs	r3, #0
   162ce:	491f      	ldr	r1, [pc, #124]	; (1634c <notify_cb+0x134>)
   162d0:	4618      	mov	r0, r3
   162d2:	e9cd 3300 	strd	r3, r3, [sp]
   162d6:	f010 f886 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
			bt_conn_unref(conn);
   162da:	e7eb      	b.n	162b4 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   162dc:	89ab      	ldrh	r3, [r5, #12]
   162de:	2b02      	cmp	r3, #2
   162e0:	d115      	bne.n	1630e <notify_cb+0xf6>
   162e2:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   162e6:	079a      	lsls	r2, r3, #30
   162e8:	d405      	bmi.n	162f6 <notify_cb+0xde>
		bt_conn_unref(conn);
   162ea:	4620      	mov	r0, r4
   162ec:	f7fd f894 	bl	13418 <bt_conn_unref>
		data->err = 0;
   162f0:	2300      	movs	r3, #0
   162f2:	60ab      	str	r3, [r5, #8]
   162f4:	e7cd      	b.n	16292 <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   162f6:	4620      	mov	r0, r4
   162f8:	692a      	ldr	r2, [r5, #16]
   162fa:	88a9      	ldrh	r1, [r5, #4]
   162fc:	f7ff fc88 	bl	15c10 <gatt_indicate>
			if (err == 0) {
   16300:	4607      	mov	r7, r0
   16302:	b980      	cbnz	r0, 16326 <notify_cb+0x10e>
				data->ind_params->_ref++;
   16304:	692a      	ldr	r2, [r5, #16]
   16306:	7d93      	ldrb	r3, [r2, #22]
   16308:	3301      	adds	r3, #1
   1630a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1630c:	e7ed      	b.n	162ea <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1630e:	2b01      	cmp	r3, #1
   16310:	d1eb      	bne.n	162ea <notify_cb+0xd2>
   16312:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   16316:	07db      	lsls	r3, r3, #31
   16318:	d5e7      	bpl.n	162ea <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1631a:	4620      	mov	r0, r4
   1631c:	692a      	ldr	r2, [r5, #16]
   1631e:	88a9      	ldrh	r1, [r5, #4]
   16320:	f7ff fe74 	bl	1600c <gatt_notify>
   16324:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   16326:	4620      	mov	r0, r4
   16328:	f7fd f876 	bl	13418 <bt_conn_unref>
		if (err < 0) {
   1632c:	2f00      	cmp	r7, #0
   1632e:	dadf      	bge.n	162f0 <notify_cb+0xd8>
}
   16330:	4648      	mov	r0, r9
   16332:	b005      	add	sp, #20
   16334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16338:	0001540d 	.word	0x0001540d
   1633c:	2000850c 	.word	0x2000850c
   16340:	200214b1 	.word	0x200214b1
   16344:	0002c2a3 	.word	0x0002c2a3
   16348:	0002d848 	.word	0x0002d848
   1634c:	000296bc 	.word	0x000296bc

00016350 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   16350:	b510      	push	{r4, lr}
   16352:	b086      	sub	sp, #24
   16354:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   16356:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   16358:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1635a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1635e:	4a0f      	ldr	r2, [pc, #60]	; (1639c <bt_gatt_connected+0x4c>)
   16360:	ab04      	add	r3, sp, #16
	data.sec = BT_SECURITY_L1;
   16362:	f88d 0014 	strb.w	r0, [sp, #20]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16366:	f010 f8d9 	bl	2651c <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   1636a:	4620      	mov	r0, r4
   1636c:	f00f f9fe 	bl	2576c <bt_conn_get_security>
   16370:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   16374:	4288      	cmp	r0, r1
   16376:	d20e      	bcs.n	16396 <bt_gatt_connected+0x46>
		int err = bt_conn_set_security(conn, data.sec);
   16378:	4620      	mov	r0, r4
   1637a:	f00f f9cb 	bl	25714 <bt_conn_set_security>

		if (err) {
   1637e:	b150      	cbz	r0, 16396 <bt_gatt_connected+0x46>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   16380:	4b07      	ldr	r3, [pc, #28]	; (163a0 <bt_gatt_connected+0x50>)
   16382:	9003      	str	r0, [sp, #12]
   16384:	9302      	str	r3, [sp, #8]
   16386:	2300      	movs	r3, #0
   16388:	2202      	movs	r2, #2
   1638a:	4618      	mov	r0, r3
   1638c:	e9cd 3300 	strd	r3, r3, [sp]
   16390:	4904      	ldr	r1, [pc, #16]	; (163a4 <bt_gatt_connected+0x54>)
   16392:	f010 f828 	bl	263e6 <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   16396:	b006      	add	sp, #24
   16398:	bd10      	pop	{r4, pc}
   1639a:	bf00      	nop
   1639c:	00015eed 	.word	0x00015eed
   163a0:	0002d990 	.word	0x0002d990
   163a4:	000296bc 	.word	0x000296bc

000163a8 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   163a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163aa:	4605      	mov	r5, r0
   163ac:	460e      	mov	r6, r1
   163ae:	4617      	mov	r7, r2
	return list->head;
   163b0:	4b06      	ldr	r3, [pc, #24]	; (163cc <bt_gatt_att_max_mtu_changed+0x24>)
   163b2:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   163b4:	b14c      	cbz	r4, 163ca <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   163b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   163ba:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   163bc:	b11b      	cbz	r3, 163c6 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   163be:	463a      	mov	r2, r7
   163c0:	4631      	mov	r1, r6
   163c2:	4628      	mov	r0, r5
   163c4:	4798      	blx	r3
	return node->next;
   163c6:	6864      	ldr	r4, [r4, #4]
   163c8:	e7f4      	b.n	163b4 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   163ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   163cc:	200210cc 	.word	0x200210cc

000163d0 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   163d0:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   163d2:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   163d4:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   163d6:	466b      	mov	r3, sp
   163d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   163dc:	4a03      	ldr	r2, [pc, #12]	; (163ec <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   163de:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   163e2:	f010 f89b 	bl	2651c <bt_gatt_foreach_attr>
}
   163e6:	b003      	add	sp, #12
   163e8:	f85d fb04 	ldr.w	pc, [sp], #4
   163ec:	00015eed 	.word	0x00015eed

000163f0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   163f0:	b570      	push	{r4, r5, r6, lr}
   163f2:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   163f4:	4603      	mov	r3, r0
   163f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   163fa:	2001      	movs	r0, #1
   163fc:	4a0d      	ldr	r2, [pc, #52]	; (16434 <bt_gatt_disconnected+0x44>)
   163fe:	f010 f88d 	bl	2651c <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   16402:	4620      	mov	r0, r4
   16404:	f7fe ff7a 	bl	152fc <find_cf_cfg>
	if (!cfg) {
   16408:	4605      	mov	r5, r0
   1640a:	b188      	cbz	r0, 16430 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1640c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   16410:	4631      	mov	r1, r6
   16412:	7a20      	ldrb	r0, [r4, #8]
   16414:	f00e fed1 	bl	251ba <bt_addr_le_is_bonded>
   16418:	b920      	cbnz	r0, 16424 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1641a:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1641c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   16420:	f7ff b858 	b.w	154d4 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16424:	4631      	mov	r1, r6
   16426:	1c68      	adds	r0, r5, #1
}
   16428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1642c:	f00f bf47 	b.w	262be <bt_addr_le_copy>
}
   16430:	bd70      	pop	{r4, r5, r6, pc}
   16432:	bf00      	nop
   16434:	00015609 	.word	0x00015609

00016438 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   16438:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1643a:	4b05      	ldr	r3, [pc, #20]	; (16450 <smp_find+0x18>)
{
   1643c:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1643e:	4618      	mov	r0, r3
   16440:	f010 f8eb 	bl	2661a <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   16444:	3b04      	subs	r3, #4
   16446:	2800      	cmp	r0, #0
}
   16448:	bf14      	ite	ne
   1644a:	4618      	movne	r0, r3
   1644c:	2000      	moveq	r0, #0
   1644e:	bd08      	pop	{r3, pc}
   16450:	20009984 	.word	0x20009984

00016454 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   16454:	4b08      	ldr	r3, [pc, #32]	; (16478 <latch_auth_cb+0x24>)
   16456:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1645a:	681a      	ldr	r2, [r3, #0]
   1645c:	4b07      	ldr	r3, [pc, #28]	; (1647c <latch_auth_cb+0x28>)
   1645e:	e8d0 1fef 	ldaex	r1, [r0]
   16462:	4299      	cmp	r1, r3
   16464:	d104      	bne.n	16470 <latch_auth_cb+0x1c>
   16466:	e8c0 2fec 	stlex	ip, r2, [r0]
   1646a:	f1bc 0f00 	cmp.w	ip, #0
   1646e:	d1f6      	bne.n	1645e <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16470:	e8d0 0faf 	lda	r0, [r0]
}
   16474:	4770      	bx	lr
   16476:	bf00      	nop
   16478:	20020fac 	.word	0x20020fac
   1647c:	20009980 	.word	0x20009980

00016480 <get_io_capa>:
{
   16480:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16482:	f7ff ffe7 	bl	16454 <latch_auth_cb>
	if (!smp_auth_cb) {
   16486:	4603      	mov	r3, r0
   16488:	b1c8      	cbz	r0, 164be <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1648a:	e9d0 1200 	ldrd	r1, r2, [r0]
   1648e:	b921      	cbnz	r1, 1649a <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   16490:	2a00      	cmp	r2, #0
   16492:	bf0c      	ite	eq
   16494:	2003      	moveq	r0, #3
   16496:	2002      	movne	r0, #2
   16498:	e010      	b.n	164bc <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1649a:	b132      	cbz	r2, 164aa <get_io_capa+0x2a>
   1649c:	6883      	ldr	r3, [r0, #8]
   1649e:	b913      	cbnz	r3, 164a6 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   164a0:	4b09      	ldr	r3, [pc, #36]	; (164c8 <get_io_capa+0x48>)
   164a2:	781b      	ldrb	r3, [r3, #0]
   164a4:	b933      	cbnz	r3, 164b4 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   164a6:	2004      	movs	r0, #4
   164a8:	e008      	b.n	164bc <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   164aa:	4907      	ldr	r1, [pc, #28]	; (164c8 <get_io_capa+0x48>)
   164ac:	7808      	ldrb	r0, [r1, #0]
   164ae:	b128      	cbz	r0, 164bc <get_io_capa+0x3c>
   164b0:	689b      	ldr	r3, [r3, #8]
   164b2:	b933      	cbnz	r3, 164c2 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   164b4:	3a00      	subs	r2, #0
   164b6:	bf18      	it	ne
   164b8:	2201      	movne	r2, #1
   164ba:	0050      	lsls	r0, r2, #1
}
   164bc:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   164be:	2003      	movs	r0, #3
   164c0:	e7fc      	b.n	164bc <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   164c2:	2001      	movs	r0, #1
   164c4:	e7fa      	b.n	164bc <get_io_capa+0x3c>
   164c6:	bf00      	nop
   164c8:	20021d83 	.word	0x20021d83

000164cc <get_auth>:
{
   164cc:	b510      	push	{r4, lr}
	if (sc_supported) {
   164ce:	4b0c      	ldr	r3, [pc, #48]	; (16500 <get_auth+0x34>)
   164d0:	781b      	ldrb	r3, [r3, #0]
   164d2:	b17b      	cbz	r3, 164f4 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   164d4:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   164d8:	f7ff ffd2 	bl	16480 <get_io_capa>
	if (bondable) {
   164dc:	4b09      	ldr	r3, [pc, #36]	; (16504 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   164de:	2803      	cmp	r0, #3
	if (bondable) {
   164e0:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   164e2:	bf0c      	ite	eq
   164e4:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   164e8:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   164ec:	b12b      	cbz	r3, 164fa <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   164ee:	f044 0001 	orr.w	r0, r4, #1
}
   164f2:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   164f4:	f001 0407 	and.w	r4, r1, #7
   164f8:	e7ee      	b.n	164d8 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   164fa:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   164fe:	e7f8      	b.n	164f2 <get_auth+0x26>
   16500:	20021d83 	.word	0x20021d83
   16504:	200089ea 	.word	0x200089ea

00016508 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   16508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1650a:	4b0d      	ldr	r3, [pc, #52]	; (16540 <bt_smp_accept+0x38>)
{
   1650c:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1650e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   16512:	b930      	cbnz	r0, 16522 <bt_smp_accept+0x1a>
			continue;
		}

		smp->chan.chan.ops = &ops;
   16514:	4a0b      	ldr	r2, [pc, #44]	; (16544 <bt_smp_accept+0x3c>)

		*chan = &smp->chan.chan;
   16516:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   16518:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   1651a:	600b      	str	r3, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1651c:	b005      	add	sp, #20
   1651e:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_ERR("No available SMP context for conn %p", conn);
   16522:	4b09      	ldr	r3, [pc, #36]	; (16548 <bt_smp_accept+0x40>)
   16524:	9203      	str	r2, [sp, #12]
   16526:	9302      	str	r3, [sp, #8]
   16528:	2300      	movs	r3, #0
   1652a:	2201      	movs	r2, #1
   1652c:	4618      	mov	r0, r3
   1652e:	e9cd 3300 	strd	r3, r3, [sp]
   16532:	4906      	ldr	r1, [pc, #24]	; (1654c <bt_smp_accept+0x44>)
   16534:	f010 f8c9 	bl	266ca <z_log_msg_runtime_create.constprop.0>
   16538:	f06f 000b 	mvn.w	r0, #11
   1653c:	e7ee      	b.n	1651c <bt_smp_accept+0x14>
   1653e:	bf00      	nop
   16540:	20009980 	.word	0x20009980
   16544:	0002a20c 	.word	0x0002a20c
   16548:	0002d9cb 	.word	0x0002d9cb
   1654c:	00029704 	.word	0x00029704

00016550 <smp_chan_get>:
{
   16550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   16552:	2106      	movs	r1, #6
   16554:	f00f f9d6 	bl	25904 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16558:	4604      	mov	r4, r0
   1655a:	b958      	cbnz	r0, 16574 <smp_chan_get+0x24>
		LOG_ERR("Unable to find SMP channel");
   1655c:	4b07      	ldr	r3, [pc, #28]	; (1657c <smp_chan_get+0x2c>)
   1655e:	2201      	movs	r2, #1
   16560:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16564:	4906      	ldr	r1, [pc, #24]	; (16580 <smp_chan_get+0x30>)
   16566:	4603      	mov	r3, r0
   16568:	9000      	str	r0, [sp, #0]
   1656a:	f010 f8ae 	bl	266ca <z_log_msg_runtime_create.constprop.0>
}
   1656e:	4620      	mov	r0, r4
   16570:	b004      	add	sp, #16
   16572:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   16574:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   16578:	e7f9      	b.n	1656e <smp_chan_get+0x1e>
   1657a:	bf00      	nop
   1657c:	0002d9f0 	.word	0x0002d9f0
   16580:	00029704 	.word	0x00029704

00016584 <smp_init>:
{
   16584:	b538      	push	{r3, r4, r5, lr}
   16586:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   16588:	22ec      	movs	r2, #236	; 0xec
   1658a:	2100      	movs	r1, #0
   1658c:	f012 f940 	bl	28810 <memset>
	if (bt_rand(smp->prnd, 16)) {
   16590:	2110      	movs	r1, #16
   16592:	f105 0027 	add.w	r0, r5, #39	; 0x27
   16596:	f7fc fad5 	bl	12b44 <bt_rand>
   1659a:	4604      	mov	r4, r0
   1659c:	b948      	cbnz	r0, 165b2 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1659e:	2105      	movs	r1, #5
   165a0:	4628      	mov	r0, r5
   165a2:	f010 f8a1 	bl	266e8 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   165a6:	f7fc fb7f 	bl	12ca8 <bt_pub_key_get>
   165aa:	4b03      	ldr	r3, [pc, #12]	; (165b8 <smp_init+0x34>)
   165ac:	6018      	str	r0, [r3, #0]
}
   165ae:	4620      	mov	r0, r4
   165b0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   165b2:	2408      	movs	r4, #8
   165b4:	e7fb      	b.n	165ae <smp_init+0x2a>
   165b6:	bf00      	nop
   165b8:	200210d4 	.word	0x200210d4

000165bc <smp_dhkey_generate>:
{
   165bc:	b530      	push	{r4, r5, lr}
   165be:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   165c0:	1d05      	adds	r5, r0, #4
   165c2:	2108      	movs	r1, #8
   165c4:	4628      	mov	r0, r5
{
   165c6:	b085      	sub	sp, #20
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   165c8:	f010 f88e 	bl	266e8 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   165cc:	490b      	ldr	r1, [pc, #44]	; (165fc <smp_dhkey_generate+0x40>)
   165ce:	f104 0057 	add.w	r0, r4, #87	; 0x57
   165d2:	f7fc fb77 	bl	12cc4 <bt_dh_key_gen>
	if (err) {
   165d6:	b170      	cbz	r0, 165f6 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   165d8:	2108      	movs	r1, #8
   165da:	4628      	mov	r0, r5
   165dc:	f010 f844 	bl	26668 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   165e0:	4b07      	ldr	r3, [pc, #28]	; (16600 <smp_dhkey_generate+0x44>)
   165e2:	2201      	movs	r2, #1
   165e4:	9302      	str	r3, [sp, #8]
   165e6:	2300      	movs	r3, #0
   165e8:	4906      	ldr	r1, [pc, #24]	; (16604 <smp_dhkey_generate+0x48>)
   165ea:	4618      	mov	r0, r3
   165ec:	e9cd 3300 	strd	r3, r3, [sp]
   165f0:	f010 f86b 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   165f4:	2008      	movs	r0, #8
}
   165f6:	b005      	add	sp, #20
   165f8:	bd30      	pop	{r4, r5, pc}
   165fa:	bf00      	nop
   165fc:	00026ac1 	.word	0x00026ac1
   16600:	0002da0b 	.word	0x0002da0b
   16604:	00029704 	.word	0x00029704

00016608 <smp_ident_info>:
{
   16608:	b5f0      	push	{r4, r5, r6, r7, lr}
   1660a:	460b      	mov	r3, r1
   1660c:	4606      	mov	r6, r0
   1660e:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   16610:	210d      	movs	r1, #13
   16612:	3004      	adds	r0, #4
   16614:	f010 f801 	bl	2661a <atomic_test_bit>
   16618:	b330      	cbz	r0, 16668 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1661a:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1661c:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   16620:	2002      	movs	r0, #2
   16622:	f103 0790 	add.w	r7, r3, #144	; 0x90
   16626:	463a      	mov	r2, r7
   16628:	7a19      	ldrb	r1, [r3, #8]
   1662a:	f001 fcbf 	bl	17fac <bt_keys_get_type>
		if (!keys) {
   1662e:	4604      	mov	r4, r0
   16630:	b980      	cbnz	r0, 16654 <smp_ident_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   16632:	4638      	mov	r0, r7
   16634:	f7f9 fef8 	bl	10428 <bt_addr_le_str>
   16638:	4b0e      	ldr	r3, [pc, #56]	; (16674 <smp_ident_info+0x6c>)
   1663a:	9003      	str	r0, [sp, #12]
   1663c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   16640:	4620      	mov	r0, r4
   16642:	4623      	mov	r3, r4
   16644:	2201      	movs	r2, #1
   16646:	490c      	ldr	r1, [pc, #48]	; (16678 <smp_ident_info+0x70>)
   16648:	9400      	str	r4, [sp, #0]
   1664a:	f010 f83e 	bl	266ca <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1664e:	2008      	movs	r0, #8
}
   16650:	b005      	add	sp, #20
   16652:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16654:	462b      	mov	r3, r5
   16656:	342a      	adds	r4, #42	; 0x2a
   16658:	f105 0210 	add.w	r2, r5, #16
   1665c:	f853 1b04 	ldr.w	r1, [r3], #4
   16660:	4293      	cmp	r3, r2
   16662:	f844 1b04 	str.w	r1, [r4], #4
   16666:	d1f9      	bne.n	1665c <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   16668:	4630      	mov	r0, r6
   1666a:	2109      	movs	r1, #9
   1666c:	f010 f83c 	bl	266e8 <atomic_set_bit>
	return 0;
   16670:	2000      	movs	r0, #0
   16672:	e7ed      	b.n	16650 <smp_ident_info+0x48>
   16674:	0002da24 	.word	0x0002da24
   16678:	00029704 	.word	0x00029704

0001667c <smp_encrypt_info>:
{
   1667c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1667e:	460b      	mov	r3, r1
   16680:	4606      	mov	r6, r0
   16682:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   16684:	210d      	movs	r1, #13
   16686:	3004      	adds	r0, #4
   16688:	f00f ffc7 	bl	2661a <atomic_test_bit>
   1668c:	b330      	cbz	r0, 166dc <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1668e:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   16690:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   16694:	2004      	movs	r0, #4
   16696:	f103 0790 	add.w	r7, r3, #144	; 0x90
   1669a:	463a      	mov	r2, r7
   1669c:	7a19      	ldrb	r1, [r3, #8]
   1669e:	f001 fc85 	bl	17fac <bt_keys_get_type>
		if (!keys) {
   166a2:	4604      	mov	r4, r0
   166a4:	b980      	cbnz	r0, 166c8 <smp_encrypt_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   166a6:	4638      	mov	r0, r7
   166a8:	f7f9 febe 	bl	10428 <bt_addr_le_str>
   166ac:	4b0e      	ldr	r3, [pc, #56]	; (166e8 <smp_encrypt_info+0x6c>)
   166ae:	9003      	str	r0, [sp, #12]
   166b0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   166b4:	4620      	mov	r0, r4
   166b6:	4623      	mov	r3, r4
   166b8:	2201      	movs	r2, #1
   166ba:	490c      	ldr	r1, [pc, #48]	; (166ec <smp_encrypt_info+0x70>)
   166bc:	9400      	str	r4, [sp, #0]
   166be:	f010 f804 	bl	266ca <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   166c2:	2008      	movs	r0, #8
}
   166c4:	b005      	add	sp, #20
   166c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   166c8:	462b      	mov	r3, r5
   166ca:	341a      	adds	r4, #26
   166cc:	f105 0210 	add.w	r2, r5, #16
   166d0:	f853 1b04 	ldr.w	r1, [r3], #4
   166d4:	4293      	cmp	r3, r2
   166d6:	f844 1b04 	str.w	r1, [r4], #4
   166da:	d1f9      	bne.n	166d0 <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   166dc:	4630      	mov	r0, r6
   166de:	2107      	movs	r1, #7
   166e0:	f010 f802 	bl	266e8 <atomic_set_bit>
	return 0;
   166e4:	2000      	movs	r0, #0
   166e6:	e7ed      	b.n	166c4 <smp_encrypt_info+0x48>
   166e8:	0002da24 	.word	0x0002da24
   166ec:	00029704 	.word	0x00029704

000166f0 <smp_send_pairing_confirm>:
{
   166f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (smp->method) {
   166f2:	7a04      	ldrb	r4, [r0, #8]
{
   166f4:	4605      	mov	r5, r0
	switch (smp->method) {
   166f6:	2c02      	cmp	r4, #2
   166f8:	d823      	bhi.n	16742 <smp_send_pairing_confirm+0x52>
   166fa:	b144      	cbz	r4, 1670e <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   166fc:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   16700:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   16704:	40dc      	lsrs	r4, r3
   16706:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1670a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1670e:	2103      	movs	r1, #3
   16710:	4628      	mov	r0, r5
   16712:	f00f fff9 	bl	26708 <smp_create_pdu.constprop.0>
	if (!buf) {
   16716:	4606      	mov	r6, r0
   16718:	b308      	cbz	r0, 1675e <smp_send_pairing_confirm+0x6e>
   1671a:	2110      	movs	r1, #16
   1671c:	300c      	adds	r0, #12
   1671e:	f002 f8b7 	bl	18890 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   16722:	9000      	str	r0, [sp, #0]
   16724:	4816      	ldr	r0, [pc, #88]	; (16780 <smp_send_pairing_confirm+0x90>)
   16726:	4623      	mov	r3, r4
   16728:	6800      	ldr	r0, [r0, #0]
   1672a:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1672e:	f105 0157 	add.w	r1, r5, #87	; 0x57
   16732:	f010 fa6b 	bl	26c0c <bt_crypto_f4>
   16736:	4604      	mov	r4, r0
   16738:	b1b0      	cbz	r0, 16768 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
   1673a:	4630      	mov	r0, r6
   1673c:	f001 ff86 	bl	1864c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   16740:	e00d      	b.n	1675e <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   16742:	2c03      	cmp	r4, #3
   16744:	f04f 0300 	mov.w	r3, #0
   16748:	d00c      	beq.n	16764 <smp_send_pairing_confirm+0x74>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1674a:	4a0e      	ldr	r2, [pc, #56]	; (16784 <smp_send_pairing_confirm+0x94>)
   1674c:	4618      	mov	r0, r3
   1674e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   16752:	490d      	ldr	r1, [pc, #52]	; (16788 <smp_send_pairing_confirm+0x98>)
   16754:	2201      	movs	r2, #1
	switch (smp->method) {
   16756:	9403      	str	r4, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   16758:	9300      	str	r3, [sp, #0]
   1675a:	f00f ffb6 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1675e:	2008      	movs	r0, #8
}
   16760:	b004      	add	sp, #16
   16762:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   16764:	461c      	mov	r4, r3
   16766:	e7d2      	b.n	1670e <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   16768:	4602      	mov	r2, r0
   1676a:	4631      	mov	r1, r6
   1676c:	4628      	mov	r0, r5
   1676e:	f00f ff8f 	bl	26690 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   16772:	1d28      	adds	r0, r5, #4
   16774:	4621      	mov	r1, r4
   16776:	f00f ff77 	bl	26668 <atomic_clear_bit>
	return 0;
   1677a:	4620      	mov	r0, r4
   1677c:	e7f0      	b.n	16760 <smp_send_pairing_confirm+0x70>
   1677e:	bf00      	nop
   16780:	200210d4 	.word	0x200210d4
   16784:	0002da3e 	.word	0x0002da3e
   16788:	00029704 	.word	0x00029704

0001678c <smp_public_key_periph>:
{
   1678c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1678e:	4604      	mov	r4, r0
   16790:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16792:	f7ff fe5f 	bl	16454 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   16796:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16798:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1679a:	210e      	movs	r1, #14
   1679c:	4628      	mov	r0, r5
   1679e:	f00f ff3c 	bl	2661a <atomic_test_bit>
   167a2:	b990      	cbnz	r0, 167ca <smp_public_key_periph+0x3e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   167a4:	4b51      	ldr	r3, [pc, #324]	; (168ec <smp_public_key_periph+0x160>)
   167a6:	2220      	movs	r2, #32
   167a8:	6819      	ldr	r1, [r3, #0]
   167aa:	f104 0057 	add.w	r0, r4, #87	; 0x57
   167ae:	f011 fff8 	bl	287a2 <memcmp>
   167b2:	4603      	mov	r3, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   167b4:	b948      	cbnz	r0, 167ca <smp_public_key_periph+0x3e>
		LOG_WRN("Remote public key rejected");
   167b6:	4a4e      	ldr	r2, [pc, #312]	; (168f0 <smp_public_key_periph+0x164>)
   167b8:	494e      	ldr	r1, [pc, #312]	; (168f4 <smp_public_key_periph+0x168>)
   167ba:	e9cd 0201 	strd	r0, r2, [sp, #4]
   167be:	9000      	str	r0, [sp, #0]
   167c0:	2202      	movs	r2, #2
   167c2:	f00f ff82 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   167c6:	2008      	movs	r0, #8
   167c8:	e034      	b.n	16834 <smp_public_key_periph+0xa8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   167ca:	210c      	movs	r1, #12
   167cc:	4620      	mov	r0, r4
   167ce:	f00f ff9b 	bl	26708 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   167d2:	4607      	mov	r7, r0
   167d4:	2800      	cmp	r0, #0
   167d6:	d0f6      	beq.n	167c6 <smp_public_key_periph+0x3a>
   167d8:	2140      	movs	r1, #64	; 0x40
   167da:	300c      	adds	r0, #12
   167dc:	f002 f858 	bl	18890 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   167e0:	4b42      	ldr	r3, [pc, #264]	; (168ec <smp_public_key_periph+0x160>)
   167e2:	4602      	mov	r2, r0
   167e4:	681b      	ldr	r3, [r3, #0]
   167e6:	4601      	mov	r1, r0
   167e8:	f103 0020 	add.w	r0, r3, #32
   167ec:	f853 cb04 	ldr.w	ip, [r3], #4
   167f0:	4283      	cmp	r3, r0
   167f2:	f841 cb04 	str.w	ip, [r1], #4
   167f6:	d1f9      	bne.n	167ec <smp_public_key_periph+0x60>
   167f8:	3220      	adds	r2, #32
   167fa:	f103 0120 	add.w	r1, r3, #32
   167fe:	f853 0b04 	ldr.w	r0, [r3], #4
   16802:	428b      	cmp	r3, r1
   16804:	f842 0b04 	str.w	r0, [r2], #4
   16808:	d1f9      	bne.n	167fe <smp_public_key_periph+0x72>
	smp_send(smp, req_buf, NULL, NULL);
   1680a:	2200      	movs	r2, #0
   1680c:	4639      	mov	r1, r7
   1680e:	4620      	mov	r0, r4
   16810:	f00f ff3e 	bl	26690 <smp_send.constprop.0>
	switch (smp->method) {
   16814:	7a23      	ldrb	r3, [r4, #8]
   16816:	2b05      	cmp	r3, #5
   16818:	d85a      	bhi.n	168d0 <smp_public_key_periph+0x144>
   1681a:	e8df f003 	tbb	[pc, r3]
   1681e:	3903      	.short	0x3903
   16820:	5659030d 	.word	0x5659030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16824:	2104      	movs	r1, #4
   16826:	4620      	mov	r0, r4
   16828:	f00f ff5e 	bl	266e8 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1682c:	f7ff ff60 	bl	166f0 <smp_send_pairing_confirm>
		if (err) {
   16830:	2800      	cmp	r0, #0
   16832:	d03c      	beq.n	168ae <smp_public_key_periph+0x122>
}
   16834:	b005      	add	sp, #20
   16836:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16838:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1683a:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1683e:	f7ff fe09 	bl	16454 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   16842:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16844:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   16846:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1684a:	f7fc f97b 	bl	12b44 <bt_rand>
   1684e:	2800      	cmp	r0, #0
   16850:	d1b9      	bne.n	167c6 <smp_public_key_periph+0x3a>
		smp->passkey %= 1000000;
   16852:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   16856:	4a28      	ldr	r2, [pc, #160]	; (168f8 <smp_public_key_periph+0x16c>)
	smp->passkey_round = 0U;
   16858:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   1685c:	fbb3 f1f2 	udiv	r1, r3, r2
   16860:	fb02 3311 	mls	r3, r2, r1, r3
   16864:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   16868:	b156      	cbz	r6, 16880 <smp_public_key_periph+0xf4>
   1686a:	6833      	ldr	r3, [r6, #0]
   1686c:	b143      	cbz	r3, 16880 <smp_public_key_periph+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1686e:	210b      	movs	r1, #11
   16870:	4628      	mov	r0, r5
   16872:	f00f ff39 	bl	266e8 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   16876:	4638      	mov	r0, r7
   16878:	6833      	ldr	r3, [r6, #0]
   1687a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1687e:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   16880:	2103      	movs	r1, #3
   16882:	4620      	mov	r0, r4
   16884:	f00f ff30 	bl	266e8 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   16888:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1688a:	f00f ff2d 	bl	266e8 <atomic_set_bit>
		break;
   1688e:	e00e      	b.n	168ae <smp_public_key_periph+0x122>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   16890:	4620      	mov	r0, r4
   16892:	2103      	movs	r1, #3
   16894:	f00f ff28 	bl	266e8 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   16898:	210e      	movs	r1, #14
   1689a:	f00f ff25 	bl	266e8 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1689e:	4628      	mov	r0, r5
   168a0:	210a      	movs	r1, #10
   168a2:	f00f ff21 	bl	266e8 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   168a6:	6873      	ldr	r3, [r6, #4]
   168a8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   168ac:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   168ae:	4628      	mov	r0, r5
   168b0:	2107      	movs	r1, #7
   168b2:	f00f ff19 	bl	266e8 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   168b6:	2008      	movs	r0, #8
   168b8:	f7ff fdbe 	bl	16438 <smp_find>
   168bc:	b9a0      	cbnz	r0, 168e8 <smp_public_key_periph+0x15c>
		return smp_dhkey_generate(smp);
   168be:	4620      	mov	r0, r4
}
   168c0:	b005      	add	sp, #20
   168c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   168c6:	f7ff be79 	b.w	165bc <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   168ca:	2104      	movs	r1, #4
   168cc:	4620      	mov	r0, r4
   168ce:	e7dc      	b.n	1688a <smp_public_key_periph+0xfe>
	switch (smp->method) {
   168d0:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   168d2:	4b0a      	ldr	r3, [pc, #40]	; (168fc <smp_public_key_periph+0x170>)
   168d4:	2201      	movs	r2, #1
   168d6:	9302      	str	r3, [sp, #8]
   168d8:	2300      	movs	r3, #0
   168da:	4906      	ldr	r1, [pc, #24]	; (168f4 <smp_public_key_periph+0x168>)
   168dc:	4618      	mov	r0, r3
   168de:	e9cd 3300 	strd	r3, r3, [sp]
   168e2:	f00f fef2 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   168e6:	e76e      	b.n	167c6 <smp_public_key_periph+0x3a>
	return 0;
   168e8:	2000      	movs	r0, #0
   168ea:	e7a3      	b.n	16834 <smp_public_key_periph+0xa8>
   168ec:	200210d4 	.word	0x200210d4
   168f0:	0002da5a 	.word	0x0002da5a
   168f4:	00029704 	.word	0x00029704
   168f8:	000f4240 	.word	0x000f4240
   168fc:	0002da3e 	.word	0x0002da3e

00016900 <smp_public_key>:
{
   16900:	b530      	push	{r4, r5, lr}
   16902:	4604      	mov	r4, r0
   16904:	460d      	mov	r5, r1
   16906:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16908:	f7ff fda4 	bl	16454 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1690c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   16910:	4602      	mov	r2, r0
   16912:	68eb      	ldr	r3, [r5, #12]
   16914:	f103 0120 	add.w	r1, r3, #32
   16918:	f853 5b04 	ldr.w	r5, [r3], #4
   1691c:	428b      	cmp	r3, r1
   1691e:	f842 5b04 	str.w	r5, [r2], #4
   16922:	d1f9      	bne.n	16918 <smp_public_key+0x18>
   16924:	f104 0277 	add.w	r2, r4, #119	; 0x77
   16928:	f103 0120 	add.w	r1, r3, #32
   1692c:	f853 5b04 	ldr.w	r5, [r3], #4
   16930:	428b      	cmp	r3, r1
   16932:	f842 5b04 	str.w	r5, [r2], #4
   16936:	d1f9      	bne.n	1692c <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   16938:	f7fc f922 	bl	12b80 <bt_pub_key_is_debug>
   1693c:	b940      	cbnz	r0, 16950 <smp_public_key+0x50>
	if (!sc_public_key) {
   1693e:	4b1c      	ldr	r3, [pc, #112]	; (169b0 <smp_public_key+0xb0>)
   16940:	681d      	ldr	r5, [r3, #0]
   16942:	bb75      	cbnz	r5, 169a2 <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   16944:	1d20      	adds	r0, r4, #4
   16946:	2106      	movs	r1, #6
   16948:	f00f fece 	bl	266e8 <atomic_set_bit>
	return 0;
   1694c:	4628      	mov	r0, r5
		return 0;
   1694e:	e026      	b.n	1699e <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   16950:	4b18      	ldr	r3, [pc, #96]	; (169b4 <smp_public_key+0xb4>)
   16952:	2203      	movs	r2, #3
   16954:	9302      	str	r3, [sp, #8]
   16956:	2300      	movs	r3, #0
   16958:	4917      	ldr	r1, [pc, #92]	; (169b8 <smp_public_key+0xb8>)
   1695a:	4618      	mov	r0, r3
   1695c:	e9cd 3300 	strd	r3, r3, [sp]
   16960:	f00f feb3 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   16964:	210e      	movs	r1, #14
   16966:	1d20      	adds	r0, r4, #4
   16968:	f00f febe 	bl	266e8 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1696c:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   16970:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   16974:	b933      	cbnz	r3, 16984 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   16976:	7a28      	ldrb	r0, [r5, #8]
   16978:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1697c:	f001 f9fc 	bl	17d78 <bt_keys_get_addr>
   16980:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   16984:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   16988:	2b00      	cmp	r3, #0
   1698a:	d0d8      	beq.n	1693e <smp_public_key+0x3e>
   1698c:	89da      	ldrh	r2, [r3, #14]
   1698e:	f002 0224 	and.w	r2, r2, #36	; 0x24
   16992:	2a00      	cmp	r2, #0
   16994:	d0d3      	beq.n	1693e <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   16996:	7b5b      	ldrb	r3, [r3, #13]
   16998:	079b      	lsls	r3, r3, #30
   1699a:	d4d0      	bmi.n	1693e <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1699c:	2003      	movs	r0, #3
}
   1699e:	b005      	add	sp, #20
   169a0:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   169a2:	4620      	mov	r0, r4
}
   169a4:	b005      	add	sp, #20
   169a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   169aa:	f7ff beef 	b.w	1678c <smp_public_key_periph>
   169ae:	bf00      	nop
   169b0:	200210d4 	.word	0x200210d4
   169b4:	0002da75 	.word	0x0002da75
   169b8:	00029704 	.word	0x00029704

000169bc <smp_pairing_req>:
{
   169bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   169c0:	460d      	mov	r5, r1
   169c2:	b086      	sub	sp, #24
   169c4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   169c6:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   169ca:	f7ff fd43 	bl	16454 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   169ce:	f8d5 800c 	ldr.w	r8, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   169d2:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   169d4:	f898 3003 	ldrb.w	r3, [r8, #3]
   169d8:	3b07      	subs	r3, #7
   169da:	2b09      	cmp	r3, #9
   169dc:	d903      	bls.n	169e6 <smp_pairing_req+0x2a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   169de:	2006      	movs	r0, #6
}
   169e0:	b006      	add	sp, #24
   169e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   169e6:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   169ea:	b15b      	cbz	r3, 16a04 <smp_pairing_req+0x48>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   169ec:	1d25      	adds	r5, r4, #4
   169ee:	210f      	movs	r1, #15
   169f0:	4628      	mov	r0, r5
   169f2:	f00f fe12 	bl	2661a <atomic_test_bit>
   169f6:	b980      	cbnz	r0, 16a1a <smp_pairing_req+0x5e>
		int ret = smp_init(smp);
   169f8:	4620      	mov	r0, r4
   169fa:	f7ff fdc3 	bl	16584 <smp_init>
		if (ret) {
   169fe:	b160      	cbz	r0, 16a1a <smp_pairing_req+0x5e>
			return ret;
   16a00:	b2c0      	uxtb	r0, r0
   16a02:	e7ed      	b.n	169e0 <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   16a04:	7a30      	ldrb	r0, [r6, #8]
   16a06:	f106 0190 	add.w	r1, r6, #144	; 0x90
   16a0a:	f001 f9b5 	bl	17d78 <bt_keys_get_addr>
   16a0e:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   16a12:	2800      	cmp	r0, #0
   16a14:	d1ea      	bne.n	169ec <smp_pairing_req+0x30>
			return BT_SMP_ERR_UNSPECIFIED;
   16a16:	2008      	movs	r0, #8
   16a18:	e7e2      	b.n	169e0 <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   16a1a:	2301      	movs	r3, #1
   16a1c:	7263      	strb	r3, [r4, #9]
   16a1e:	f8d8 3000 	ldr.w	r3, [r8]
	rsp->auth_req = get_auth(smp, req->auth_req);
   16a22:	4620      	mov	r0, r4
   16a24:	f8c4 300a 	str.w	r3, [r4, #10]
   16a28:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   16a2c:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   16a2e:	2302      	movs	r3, #2
   16a30:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   16a32:	f898 1002 	ldrb.w	r1, [r8, #2]
   16a36:	f7ff fd49 	bl	164cc <get_auth>
   16a3a:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   16a3c:	4620      	mov	r0, r4
   16a3e:	f7ff fd1f 	bl	16480 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   16a42:	4ba9      	ldr	r3, [pc, #676]	; (16ce8 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   16a44:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   16a46:	781b      	ldrb	r3, [r3, #0]
   16a48:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   16a4a:	2310      	movs	r3, #16
   16a4c:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   16a4e:	f898 3004 	ldrb.w	r3, [r8, #4]
   16a52:	f003 0303 	and.w	r3, r3, #3
   16a56:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   16a58:	f898 3005 	ldrb.w	r3, [r8, #5]
   16a5c:	f003 0301 	and.w	r3, r3, #1
   16a60:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   16a62:	7ce3      	ldrb	r3, [r4, #19]
   16a64:	071b      	lsls	r3, r3, #28
   16a66:	d50d      	bpl.n	16a84 <smp_pairing_req+0xc8>
   16a68:	f898 3002 	ldrb.w	r3, [r8, #2]
   16a6c:	0718      	lsls	r0, r3, #28
   16a6e:	d509      	bpl.n	16a84 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   16a70:	2105      	movs	r1, #5
   16a72:	4628      	mov	r0, r5
   16a74:	f00f fe38 	bl	266e8 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   16a78:	7d63      	ldrb	r3, [r4, #21]
   16a7a:	f003 0302 	and.w	r3, r3, #2
   16a7e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   16a80:	2300      	movs	r3, #0
   16a82:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   16a84:	7ce3      	ldrb	r3, [r4, #19]
   16a86:	0699      	lsls	r1, r3, #26
   16a88:	d507      	bpl.n	16a9a <smp_pairing_req+0xde>
   16a8a:	f898 3002 	ldrb.w	r3, [r8, #2]
   16a8e:	069a      	lsls	r2, r3, #26
   16a90:	d503      	bpl.n	16a9a <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   16a92:	2114      	movs	r1, #20
   16a94:	4628      	mov	r0, r5
   16a96:	f00f fe27 	bl	266e8 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   16a9a:	7da3      	ldrb	r3, [r4, #22]
   16a9c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   16aa0:	7d63      	ldrb	r3, [r4, #21]
   16aa2:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   16aa6:	7ce3      	ldrb	r3, [r4, #19]
   16aa8:	07db      	lsls	r3, r3, #31
   16aaa:	d507      	bpl.n	16abc <smp_pairing_req+0x100>
   16aac:	f898 3002 	ldrb.w	r3, [r8, #2]
   16ab0:	07d8      	lsls	r0, r3, #31
   16ab2:	d503      	bpl.n	16abc <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   16ab4:	210d      	movs	r1, #13
   16ab6:	4628      	mov	r0, r5
   16ab8:	f00f fe16 	bl	266e8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   16abc:	2103      	movs	r1, #3
   16abe:	4628      	mov	r0, r5
   16ac0:	f00f fe12 	bl	266e8 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16ac4:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   16ac6:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16aca:	f00f fda6 	bl	2661a <atomic_test_bit>
   16ace:	bb40      	cbnz	r0, 16b22 <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   16ad0:	f1b8 0f04 	cmp.w	r8, #4
   16ad4:	d845      	bhi.n	16b62 <smp_pairing_req+0x1a6>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   16ad6:	7ae3      	ldrb	r3, [r4, #11]
   16ad8:	7ca2      	ldrb	r2, [r4, #18]
   16ada:	4013      	ands	r3, r2
   16adc:	07d9      	lsls	r1, r3, #31
   16ade:	d43e      	bmi.n	16b5e <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   16ae0:	7b21      	ldrb	r1, [r4, #12]
   16ae2:	7ce3      	ldrb	r3, [r4, #19]
   16ae4:	4319      	orrs	r1, r3
   16ae6:	f011 0104 	ands.w	r1, r1, #4
   16aea:	d011      	beq.n	16b10 <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   16aec:	4620      	mov	r0, r4
   16aee:	f7ff fcc7 	bl	16480 <get_io_capa>
   16af2:	4b7e      	ldr	r3, [pc, #504]	; (16cec <smp_pairing_req+0x330>)
   16af4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   16af8:	4498      	add	r8, r3
   16afa:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   16afe:	2904      	cmp	r1, #4
   16b00:	d106      	bne.n	16b10 <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   16b02:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   16b06:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   16b08:	2b00      	cmp	r3, #0
   16b0a:	bf14      	ite	ne
   16b0c:	2101      	movne	r1, #1
   16b0e:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   16b10:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   16b12:	4620      	mov	r0, r4
   16b14:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   16b18:	f00f fd85 	bl	26626 <update_keys_check>
   16b1c:	bb18      	cbnz	r0, 16b66 <smp_pairing_req+0x1aa>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   16b1e:	2003      	movs	r0, #3
   16b20:	e75e      	b.n	169e0 <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   16b22:	7b23      	ldrb	r3, [r4, #12]
   16b24:	7ce0      	ldrb	r0, [r4, #19]
   16b26:	ea03 0200 	and.w	r2, r3, r0
   16b2a:	0712      	lsls	r2, r2, #28
   16b2c:	d506      	bpl.n	16b3c <smp_pairing_req+0x180>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   16b2e:	7ae2      	ldrb	r2, [r4, #11]
   16b30:	f894 c012 	ldrb.w	ip, [r4, #18]
   16b34:	ea42 020c 	orr.w	r2, r2, ip
   16b38:	07d2      	lsls	r2, r2, #31
   16b3a:	d4e9      	bmi.n	16b10 <smp_pairing_req+0x154>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   16b3c:	f1b8 0f04 	cmp.w	r8, #4
   16b40:	d80f      	bhi.n	16b62 <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   16b42:	ea43 0100 	orr.w	r1, r3, r0
   16b46:	f011 0104 	ands.w	r1, r1, #4
   16b4a:	d0e1      	beq.n	16b10 <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   16b4c:	4620      	mov	r0, r4
   16b4e:	f7ff fc97 	bl	16480 <get_io_capa>
   16b52:	4b67      	ldr	r3, [pc, #412]	; (16cf0 <smp_pairing_req+0x334>)
   16b54:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   16b58:	4443      	add	r3, r8
   16b5a:	5c19      	ldrb	r1, [r3, r0]
   16b5c:	e7d8      	b.n	16b10 <smp_pairing_req+0x154>
		return LEGACY_OOB;
   16b5e:	2106      	movs	r1, #6
   16b60:	e7d6      	b.n	16b10 <smp_pairing_req+0x154>
		return JUST_WORKS;
   16b62:	2100      	movs	r1, #0
   16b64:	e7d4      	b.n	16b10 <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   16b66:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   16b6a:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   16b6c:	2b03      	cmp	r3, #3
   16b6e:	d03c      	beq.n	16bea <smp_pairing_req+0x22e>
   16b70:	d82a      	bhi.n	16bc8 <smp_pairing_req+0x20c>
   16b72:	3b01      	subs	r3, #1
   16b74:	2b01      	cmp	r3, #1
   16b76:	f63f af4e 	bhi.w	16a16 <smp_pairing_req+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16b7a:	2105      	movs	r1, #5
   16b7c:	4628      	mov	r0, r5
   16b7e:	f00f fd4c 	bl	2661a <atomic_test_bit>
   16b82:	2800      	cmp	r0, #0
   16b84:	f040 80be 	bne.w	16d04 <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16b88:	4620      	mov	r0, r4
   16b8a:	f7ff fc63 	bl	16454 <latch_auth_cb>
   16b8e:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16b90:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   16b92:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16b96:	f7ff fc5d 	bl	16454 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   16b9a:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16b9e:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   16ba0:	f898 0008 	ldrb.w	r0, [r8, #8]
   16ba4:	f001 f9c6 	bl	17f34 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   16ba8:	7a23      	ldrb	r3, [r4, #8]
   16baa:	b310      	cbz	r0, 16bf2 <smp_pairing_req+0x236>
   16bac:	7b42      	ldrb	r2, [r0, #13]
   16bae:	07d2      	lsls	r2, r2, #31
   16bb0:	d51f      	bpl.n	16bf2 <smp_pairing_req+0x236>
   16bb2:	b9f3      	cbnz	r3, 16bf2 <smp_pairing_req+0x236>
		LOG_ERR("JustWorks failed, authenticated keys present");
   16bb4:	4a4f      	ldr	r2, [pc, #316]	; (16cf4 <smp_pairing_req+0x338>)
   16bb6:	4618      	mov	r0, r3
   16bb8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   16bbc:	494e      	ldr	r1, [pc, #312]	; (16cf8 <smp_pairing_req+0x33c>)
   16bbe:	2201      	movs	r2, #1
   16bc0:	9300      	str	r3, [sp, #0]
   16bc2:	f00f fd82 	bl	266ca <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   16bc6:	e726      	b.n	16a16 <smp_pairing_req+0x5a>
	switch (sec) {
   16bc8:	2b04      	cmp	r3, #4
   16bca:	f47f af24 	bne.w	16a16 <smp_pairing_req+0x5a>
	return MIN(req->max_key_size, rsp->max_key_size);
   16bce:	7d23      	ldrb	r3, [r4, #20]
   16bd0:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   16bd2:	4293      	cmp	r3, r2
   16bd4:	bf28      	it	cs
   16bd6:	4613      	movcs	r3, r2
   16bd8:	2b10      	cmp	r3, #16
   16bda:	f47f af00 	bne.w	169de <smp_pairing_req+0x22>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16bde:	2105      	movs	r1, #5
   16be0:	4628      	mov	r0, r5
   16be2:	f00f fd1a 	bl	2661a <atomic_test_bit>
   16be6:	2800      	cmp	r0, #0
   16be8:	d099      	beq.n	16b1e <smp_pairing_req+0x162>
		if (smp->method == JUST_WORKS) {
   16bea:	7a23      	ldrb	r3, [r4, #8]
   16bec:	2b00      	cmp	r3, #0
   16bee:	d1c4      	bne.n	16b7a <smp_pairing_req+0x1be>
   16bf0:	e795      	b.n	16b1e <smp_pairing_req+0x162>
	switch (smp->method) {
   16bf2:	2b06      	cmp	r3, #6
   16bf4:	d85d      	bhi.n	16cb2 <smp_pairing_req+0x2f6>
   16bf6:	e8df f003 	tbb	[pc, r3]
   16bfa:	5418      	.short	0x5418
   16bfc:	5c5c5c2d 	.word	0x5c5c5c2d
   16c00:	04          	.byte	0x04
   16c01:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   16c02:	2e00      	cmp	r6, #0
   16c04:	d061      	beq.n	16cca <smp_pairing_req+0x30e>
   16c06:	68f3      	ldr	r3, [r6, #12]
   16c08:	2b00      	cmp	r3, #0
   16c0a:	d05e      	beq.n	16cca <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   16c0c:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16c0e:	210a      	movs	r1, #10
   16c10:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   16c12:	f8ad 3014 	strh.w	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16c16:	f00f fd67 	bl	266e8 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   16c1a:	68f3      	ldr	r3, [r6, #12]
   16c1c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   16c20:	a905      	add	r1, sp, #20
   16c22:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16c24:	7a23      	ldrb	r3, [r4, #8]
   16c26:	2b00      	cmp	r3, #0
   16c28:	d151      	bne.n	16cce <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16c2a:	210f      	movs	r1, #15
   16c2c:	4628      	mov	r0, r5
   16c2e:	f00f fcf4 	bl	2661a <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16c32:	2800      	cmp	r0, #0
   16c34:	d14b      	bne.n	16cce <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16c36:	2f00      	cmp	r7, #0
   16c38:	d049      	beq.n	16cce <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   16c3a:	697b      	ldr	r3, [r7, #20]
   16c3c:	2b00      	cmp	r3, #0
   16c3e:	d046      	beq.n	16cce <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16c40:	4628      	mov	r0, r5
   16c42:	210a      	movs	r1, #10
   16c44:	f00f fd50 	bl	266e8 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   16c48:	697b      	ldr	r3, [r7, #20]
   16c4a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   16c4e:	4798      	blx	r3
		return 0;
   16c50:	2000      	movs	r0, #0
   16c52:	e6c5      	b.n	169e0 <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   16c54:	2104      	movs	r1, #4
   16c56:	a805      	add	r0, sp, #20
   16c58:	f7fb ff74 	bl	12b44 <bt_rand>
   16c5c:	2800      	cmp	r0, #0
   16c5e:	f47f aeda 	bne.w	16a16 <smp_pairing_req+0x5a>
			passkey %= 1000000;
   16c62:	9b05      	ldr	r3, [sp, #20]
   16c64:	4a25      	ldr	r2, [pc, #148]	; (16cfc <smp_pairing_req+0x340>)
   16c66:	fbb3 f1f2 	udiv	r1, r3, r2
   16c6a:	fb02 3311 	mls	r3, r2, r1, r3
   16c6e:	9305      	str	r3, [sp, #20]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   16c70:	b14e      	cbz	r6, 16c86 <smp_pairing_req+0x2ca>
   16c72:	6833      	ldr	r3, [r6, #0]
   16c74:	b13b      	cbz	r3, 16c86 <smp_pairing_req+0x2ca>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   16c76:	210b      	movs	r1, #11
   16c78:	4628      	mov	r0, r5
   16c7a:	f00f fd35 	bl	266e8 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   16c7e:	4640      	mov	r0, r8
   16c80:	6833      	ldr	r3, [r6, #0]
   16c82:	9905      	ldr	r1, [sp, #20]
   16c84:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   16c86:	9b05      	ldr	r3, [sp, #20]
	dst[1] = val >> 8;
   16c88:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   16c8c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   16c90:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   16c92:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   16c96:	0a1b      	lsrs	r3, r3, #8
   16c98:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   16c9c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   16ca0:	e7c0      	b.n	16c24 <smp_pairing_req+0x268>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16ca2:	4628      	mov	r0, r5
   16ca4:	210a      	movs	r1, #10
   16ca6:	f00f fd1f 	bl	266e8 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   16caa:	4640      	mov	r0, r8
   16cac:	6873      	ldr	r3, [r6, #4]
   16cae:	4798      	blx	r3
	if (ret) {
   16cb0:	e7b8      	b.n	16c24 <smp_pairing_req+0x268>
	switch (smp->method) {
   16cb2:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   16cb4:	4b12      	ldr	r3, [pc, #72]	; (16d00 <smp_pairing_req+0x344>)
   16cb6:	2201      	movs	r2, #1
   16cb8:	9302      	str	r3, [sp, #8]
   16cba:	2300      	movs	r3, #0
   16cbc:	490e      	ldr	r1, [pc, #56]	; (16cf8 <smp_pairing_req+0x33c>)
   16cbe:	4618      	mov	r0, r3
   16cc0:	e9cd 3300 	strd	r3, r3, [sp]
   16cc4:	f00f fd01 	bl	266ca <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   16cc8:	e6a5      	b.n	16a16 <smp_pairing_req+0x5a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   16cca:	2002      	movs	r0, #2
   16ccc:	e688      	b.n	169e0 <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   16cce:	2103      	movs	r1, #3
   16cd0:	4620      	mov	r0, r4
   16cd2:	f00f fd09 	bl	266e8 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   16cd6:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   16cd8:	f00f fd06 	bl	266e8 <atomic_set_bit>
}
   16cdc:	b006      	add	sp, #24
   16cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   16ce2:	f00f bd30 	b.w	26746 <send_pairing_rsp>
   16ce6:	bf00      	nop
   16ce8:	20021d84 	.word	0x20021d84
   16cec:	0002de16 	.word	0x0002de16
   16cf0:	0002ddfd 	.word	0x0002ddfd
   16cf4:	0002da96 	.word	0x0002da96
   16cf8:	00029704 	.word	0x00029704
   16cfc:	000f4240 	.word	0x000f4240
   16d00:	0002da3e 	.word	0x0002da3e
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   16d04:	7a23      	ldrb	r3, [r4, #8]
   16d06:	b973      	cbnz	r3, 16d26 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16d08:	210f      	movs	r1, #15
   16d0a:	4628      	mov	r0, r5
   16d0c:	f00f fc85 	bl	2661a <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   16d10:	b948      	cbnz	r0, 16d26 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   16d12:	b147      	cbz	r7, 16d26 <smp_pairing_req+0x36a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   16d14:	697b      	ldr	r3, [r7, #20]
   16d16:	b133      	cbz	r3, 16d26 <smp_pairing_req+0x36a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16d18:	4628      	mov	r0, r5
   16d1a:	210a      	movs	r1, #10
   16d1c:	f00f fce4 	bl	266e8 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   16d20:	4630      	mov	r0, r6
   16d22:	697b      	ldr	r3, [r7, #20]
   16d24:	e793      	b.n	16c4e <smp_pairing_req+0x292>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   16d26:	210c      	movs	r1, #12
   16d28:	4620      	mov	r0, r4
   16d2a:	e7d5      	b.n	16cd8 <smp_pairing_req+0x31c>

00016d2c <compute_and_check_and_send_periph_dhcheck>:
{
   16d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d30:	4604      	mov	r4, r0
   16d32:	b090      	sub	sp, #64	; 0x40
	(void)memset(r, 0, sizeof(r));
   16d34:	ad0c      	add	r5, sp, #48	; 0x30
   16d36:	2210      	movs	r2, #16
   16d38:	2100      	movs	r1, #0
   16d3a:	4628      	mov	r0, r5
   16d3c:	f011 fd68 	bl	28810 <memset>
	switch (smp->method) {
   16d40:	7a23      	ldrb	r3, [r4, #8]
   16d42:	2b05      	cmp	r3, #5
   16d44:	d83a      	bhi.n	16dbc <compute_and_check_and_send_periph_dhcheck+0x90>
   16d46:	e8df f003 	tbb	[pc, r3]
   16d4a:	0306      	.short	0x0306
   16d4c:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   16d50:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   16d54:	930c      	str	r3, [sp, #48]	; 0x30
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   16d56:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   16d5a:	f104 0247 	add.w	r2, r4, #71	; 0x47
   16d5e:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   16d62:	e9cd 7201 	strd	r7, r2, [sp, #4]
   16d66:	f104 0837 	add.w	r8, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   16d6a:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   16d6e:	f104 0927 	add.w	r9, r4, #39	; 0x27
   16d72:	9200      	str	r2, [sp, #0]
   16d74:	4641      	mov	r1, r8
   16d76:	464a      	mov	r2, r9
   16d78:	3397      	adds	r3, #151	; 0x97
   16d7a:	f104 0097 	add.w	r0, r4, #151	; 0x97
   16d7e:	f001 f987 	bl	18090 <bt_crypto_f5>
   16d82:	4682      	mov	sl, r0
   16d84:	b348      	cbz	r0, 16dda <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   16d86:	4b4e      	ldr	r3, [pc, #312]	; (16ec0 <compute_and_check_and_send_periph_dhcheck+0x194>)
   16d88:	9302      	str	r3, [sp, #8]
   16d8a:	2300      	movs	r3, #0
   16d8c:	e9cd 3300 	strd	r3, r3, [sp]
   16d90:	2201      	movs	r2, #1
   16d92:	4618      	mov	r0, r3
   16d94:	494b      	ldr	r1, [pc, #300]	; (16ec4 <compute_and_check_and_send_periph_dhcheck+0x198>)
   16d96:	f00f fc98 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   16d9a:	e01a      	b.n	16dd2 <compute_and_check_and_send_periph_dhcheck+0xa6>
		if (smp->oobd_remote) {
   16d9c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   16da0:	2b00      	cmp	r3, #0
   16da2:	d0d8      	beq.n	16d56 <compute_and_check_and_send_periph_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   16da4:	462e      	mov	r6, r5
   16da6:	f103 0710 	add.w	r7, r3, #16
   16daa:	4632      	mov	r2, r6
   16dac:	6818      	ldr	r0, [r3, #0]
   16dae:	6859      	ldr	r1, [r3, #4]
   16db0:	3308      	adds	r3, #8
   16db2:	c203      	stmia	r2!, {r0, r1}
   16db4:	42bb      	cmp	r3, r7
   16db6:	4616      	mov	r6, r2
   16db8:	d1f7      	bne.n	16daa <compute_and_check_and_send_periph_dhcheck+0x7e>
   16dba:	e7cc      	b.n	16d56 <compute_and_check_and_send_periph_dhcheck+0x2a>
	switch (smp->method) {
   16dbc:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   16dbe:	4b42      	ldr	r3, [pc, #264]	; (16ec8 <compute_and_check_and_send_periph_dhcheck+0x19c>)
   16dc0:	2201      	movs	r2, #1
   16dc2:	9302      	str	r3, [sp, #8]
   16dc4:	2300      	movs	r3, #0
   16dc6:	493f      	ldr	r1, [pc, #252]	; (16ec4 <compute_and_check_and_send_periph_dhcheck+0x198>)
   16dc8:	4618      	mov	r0, r3
   16dca:	e9cd 3300 	strd	r3, r3, [sp]
   16dce:	f00f fc7c 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   16dd2:	2008      	movs	r0, #8
}
   16dd4:	b010      	add	sp, #64	; 0x40
   16dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   16dda:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   16dde:	ae08      	add	r6, sp, #32
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   16de0:	f103 0297 	add.w	r2, r3, #151	; 0x97
   16de4:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   16de6:	9301      	str	r3, [sp, #4]
   16de8:	f104 0311 	add.w	r3, r4, #17
   16dec:	9202      	str	r2, [sp, #8]
   16dee:	9300      	str	r3, [sp, #0]
   16df0:	4642      	mov	r2, r8
   16df2:	462b      	mov	r3, r5
   16df4:	4649      	mov	r1, r9
   16df6:	4638      	mov	r0, r7
   16df8:	9603      	str	r6, [sp, #12]
   16dfa:	f00f ff2c 	bl	26c56 <bt_crypto_f6>
   16dfe:	b130      	cbz	r0, 16e0e <compute_and_check_and_send_periph_dhcheck+0xe2>
		LOG_ERR("Calculate local DHKey check failed");
   16e00:	4b32      	ldr	r3, [pc, #200]	; (16ecc <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   16e02:	f8cd a000 	str.w	sl, [sp]
   16e06:	e9cd a301 	strd	sl, r3, [sp, #4]
   16e0a:	4653      	mov	r3, sl
   16e0c:	e7c0      	b.n	16d90 <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   16e0e:	7a23      	ldrb	r3, [r4, #8]
   16e10:	2b05      	cmp	r3, #5
   16e12:	d10e      	bne.n	16e32 <compute_and_check_and_send_periph_dhcheck+0x106>
		if (smp->oobd_local) {
   16e14:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   16e18:	b311      	cbz	r1, 16e60 <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   16e1a:	460b      	mov	r3, r1
   16e1c:	46ac      	mov	ip, r5
   16e1e:	f101 0e10 	add.w	lr, r1, #16
   16e22:	4662      	mov	r2, ip
   16e24:	6818      	ldr	r0, [r3, #0]
   16e26:	6859      	ldr	r1, [r3, #4]
   16e28:	3308      	adds	r3, #8
   16e2a:	c203      	stmia	r2!, {r0, r1}
   16e2c:	4573      	cmp	r3, lr
   16e2e:	4694      	mov	ip, r2
   16e30:	d1f7      	bne.n	16e22 <compute_and_check_and_send_periph_dhcheck+0xf6>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   16e32:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   16e36:	f10d 0a10 	add.w	sl, sp, #16
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   16e3a:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   16e3e:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   16e40:	9301      	str	r3, [sp, #4]
   16e42:	f104 030a 	add.w	r3, r4, #10
   16e46:	9202      	str	r2, [sp, #8]
   16e48:	9300      	str	r3, [sp, #0]
   16e4a:	464a      	mov	r2, r9
   16e4c:	462b      	mov	r3, r5
   16e4e:	4641      	mov	r1, r8
   16e50:	4638      	mov	r0, r7
   16e52:	f8cd a00c 	str.w	sl, [sp, #12]
   16e56:	f00f fefe 	bl	26c56 <bt_crypto_f6>
   16e5a:	b130      	cbz	r0, 16e6a <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   16e5c:	4b1c      	ldr	r3, [pc, #112]	; (16ed0 <compute_and_check_and_send_periph_dhcheck+0x1a4>)
   16e5e:	e793      	b.n	16d88 <compute_and_check_and_send_periph_dhcheck+0x5c>
			memset(r, 0, sizeof(r));
   16e60:	2210      	movs	r2, #16
   16e62:	4628      	mov	r0, r5
   16e64:	f011 fcd4 	bl	28810 <memset>
   16e68:	e7e3      	b.n	16e32 <compute_and_check_and_send_periph_dhcheck+0x106>
	if (memcmp(smp->e, re, 16)) {
   16e6a:	2210      	movs	r2, #16
   16e6c:	4651      	mov	r1, sl
   16e6e:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   16e72:	f011 fc96 	bl	287a2 <memcmp>
   16e76:	bb00      	cbnz	r0, 16eba <compute_and_check_and_send_periph_dhcheck+0x18e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   16e78:	210d      	movs	r1, #13
   16e7a:	4620      	mov	r0, r4
   16e7c:	f00f fc44 	bl	26708 <smp_create_pdu.constprop.0>
	if (!buf) {
   16e80:	4607      	mov	r7, r0
   16e82:	2800      	cmp	r0, #0
   16e84:	d0a5      	beq.n	16dd2 <compute_and_check_and_send_periph_dhcheck+0xa6>
   16e86:	2110      	movs	r1, #16
   16e88:	300c      	adds	r0, #12
   16e8a:	f001 fd01 	bl	18890 <net_buf_simple_add>
   16e8e:	4632      	mov	r2, r6
   16e90:	4603      	mov	r3, r0
   16e92:	4616      	mov	r6, r2
   16e94:	ce03      	ldmia	r6!, {r0, r1}
   16e96:	42ae      	cmp	r6, r5
   16e98:	6018      	str	r0, [r3, #0]
   16e9a:	6059      	str	r1, [r3, #4]
   16e9c:	4632      	mov	r2, r6
   16e9e:	f103 0308 	add.w	r3, r3, #8
   16ea2:	d1f6      	bne.n	16e92 <compute_and_check_and_send_periph_dhcheck+0x166>
	smp_send(smp, buf, NULL, NULL);
   16ea4:	2200      	movs	r2, #0
   16ea6:	4639      	mov	r1, r7
   16ea8:	4620      	mov	r0, r4
   16eaa:	f00f fbf1 	bl	26690 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   16eae:	1d20      	adds	r0, r4, #4
   16eb0:	2101      	movs	r1, #1
   16eb2:	f00f fc19 	bl	266e8 <atomic_set_bit>
	return 0;
   16eb6:	2000      	movs	r0, #0
   16eb8:	e78c      	b.n	16dd4 <compute_and_check_and_send_periph_dhcheck+0xa8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   16eba:	200b      	movs	r0, #11
   16ebc:	e78a      	b.n	16dd4 <compute_and_check_and_send_periph_dhcheck+0xa8>
   16ebe:	bf00      	nop
   16ec0:	0002dac3 	.word	0x0002dac3
   16ec4:	00029704 	.word	0x00029704
   16ec8:	0002da3e 	.word	0x0002da3e
   16ecc:	0002dad8 	.word	0x0002dad8
   16ed0:	0002dafb 	.word	0x0002dafb

00016ed4 <bt_smp_connected>:
{
   16ed4:	b538      	push	{r3, r4, r5, lr}
   16ed6:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   16ed8:	4908      	ldr	r1, [pc, #32]	; (16efc <bt_smp_connected+0x28>)
   16eda:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   16ede:	3094      	adds	r0, #148	; 0x94
   16ee0:	f008 fdc0 	bl	1fa64 <k_work_init_delayable>
	smp_reset(smp);
   16ee4:	4628      	mov	r0, r5
   16ee6:	f00f fca8 	bl	2683a <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16eea:	4b05      	ldr	r3, [pc, #20]	; (16f00 <bt_smp_connected+0x2c>)
   16eec:	34c4      	adds	r4, #196	; 0xc4
   16eee:	e8d4 2fef 	ldaex	r2, [r4]
   16ef2:	e8c4 3fe1 	stlex	r1, r3, [r4]
   16ef6:	2900      	cmp	r1, #0
   16ef8:	d1f9      	bne.n	16eee <bt_smp_connected+0x1a>
}
   16efa:	bd38      	pop	{r3, r4, r5, pc}
   16efc:	00017b81 	.word	0x00017b81
   16f00:	20009980 	.word	0x20009980

00016f04 <smp_pairing_confirm>:
{
   16f04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   16f06:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   16f08:	68cd      	ldr	r5, [r1, #12]
{
   16f0a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   16f0c:	210b      	movs	r1, #11
   16f0e:	4630      	mov	r0, r6
   16f10:	f00f fbaa 	bl	26668 <atomic_clear_bit>
   16f14:	462b      	mov	r3, r5
   16f16:	f104 0217 	add.w	r2, r4, #23
   16f1a:	f105 0110 	add.w	r1, r5, #16
   16f1e:	f853 0b04 	ldr.w	r0, [r3], #4
   16f22:	428b      	cmp	r3, r1
   16f24:	f842 0b04 	str.w	r0, [r2], #4
   16f28:	d1f9      	bne.n	16f1e <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16f2a:	2105      	movs	r1, #5
   16f2c:	4630      	mov	r0, r6
   16f2e:	f00f fb74 	bl	2661a <atomic_test_bit>
   16f32:	b928      	cbnz	r0, 16f40 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   16f34:	4620      	mov	r0, r4
}
   16f36:	b004      	add	sp, #16
   16f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   16f3c:	f00f bcf3 	b.w	26926 <legacy_pairing_confirm>
	switch (smp->method) {
   16f40:	7a23      	ldrb	r3, [r4, #8]
   16f42:	2b01      	cmp	r3, #1
   16f44:	d00a      	beq.n	16f5c <smp_pairing_confirm+0x58>
   16f46:	2b02      	cmp	r3, #2
   16f48:	d115      	bne.n	16f76 <smp_pairing_confirm+0x72>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16f4a:	2104      	movs	r1, #4
   16f4c:	4620      	mov	r0, r4
   16f4e:	f00f fbcb 	bl	266e8 <atomic_set_bit>
}
   16f52:	b004      	add	sp, #16
   16f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   16f58:	f7ff bbca 	b.w	166f0 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   16f5c:	210a      	movs	r1, #10
   16f5e:	4630      	mov	r0, r6
   16f60:	f00f fb5b 	bl	2661a <atomic_test_bit>
   16f64:	2800      	cmp	r0, #0
   16f66:	d0f0      	beq.n	16f4a <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   16f68:	4630      	mov	r0, r6
   16f6a:	2100      	movs	r1, #0
   16f6c:	f00f fbbc 	bl	266e8 <atomic_set_bit>
			return 0;
   16f70:	2000      	movs	r0, #0
}
   16f72:	b004      	add	sp, #16
   16f74:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   16f76:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   16f78:	4b05      	ldr	r3, [pc, #20]	; (16f90 <smp_pairing_confirm+0x8c>)
   16f7a:	2201      	movs	r2, #1
   16f7c:	9302      	str	r3, [sp, #8]
   16f7e:	2300      	movs	r3, #0
   16f80:	4904      	ldr	r1, [pc, #16]	; (16f94 <smp_pairing_confirm+0x90>)
   16f82:	4618      	mov	r0, r3
   16f84:	e9cd 3300 	strd	r3, r3, [sp]
   16f88:	f00f fb9f 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   16f8c:	2008      	movs	r0, #8
   16f8e:	e7f0      	b.n	16f72 <smp_pairing_confirm+0x6e>
   16f90:	0002da3e 	.word	0x0002da3e
   16f94:	00029704 	.word	0x00029704

00016f98 <smp_pairing_random>:
{
   16f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16f9c:	4604      	mov	r4, r0
   16f9e:	b089      	sub	sp, #36	; 0x24
   16fa0:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16fa2:	f7ff fa57 	bl	16454 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16fa6:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   16faa:	4605      	mov	r5, r0
   16fac:	464a      	mov	r2, r9
   16fae:	68f3      	ldr	r3, [r6, #12]
   16fb0:	f103 0110 	add.w	r1, r3, #16
   16fb4:	f853 0b04 	ldr.w	r0, [r3], #4
   16fb8:	428b      	cmp	r3, r1
   16fba:	f842 0b04 	str.w	r0, [r2], #4
   16fbe:	d1f9      	bne.n	16fb4 <smp_pairing_random+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16fc0:	1d27      	adds	r7, r4, #4
   16fc2:	2105      	movs	r1, #5
   16fc4:	4638      	mov	r0, r7
   16fc6:	f00f fb28 	bl	2661a <atomic_test_bit>
   16fca:	2800      	cmp	r0, #0
   16fcc:	d14f      	bne.n	1706e <smp_pairing_random+0xd6>
	struct bt_conn *conn = smp->chan.chan.conn;
   16fce:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   16fd2:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   16fd6:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   16fda:	ad04      	add	r5, sp, #16
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   16fdc:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   16fde:	9201      	str	r2, [sp, #4]
   16fe0:	9300      	str	r3, [sp, #0]
   16fe2:	4649      	mov	r1, r9
   16fe4:	4630      	mov	r0, r6
   16fe6:	9502      	str	r5, [sp, #8]
   16fe8:	f104 0310 	add.w	r3, r4, #16
   16fec:	f104 0209 	add.w	r2, r4, #9
   16ff0:	f00f fc3e 	bl	26870 <smp_c1>
	if (err) {
   16ff4:	bb20      	cbnz	r0, 17040 <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   16ff6:	2210      	movs	r2, #16
   16ff8:	4629      	mov	r1, r5
   16ffa:	f104 0017 	add.w	r0, r4, #23
   16ffe:	f011 fbd0 	bl	287a2 <memcmp>
   17002:	4680      	mov	r8, r0
   17004:	2800      	cmp	r0, #0
   17006:	d177      	bne.n	170f8 <smp_pairing_random+0x160>
	memcpy(out, r2, 8);
   17008:	462b      	mov	r3, r5
   1700a:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   1700e:	f8d9 1004 	ldr.w	r1, [r9, #4]
	return bt_encrypt_le(k, out, out);
   17012:	462a      	mov	r2, r5
	memcpy(out, r2, 8);
   17014:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   17016:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1701a:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   1701e:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   17020:	4629      	mov	r1, r5
   17022:	4630      	mov	r0, r6
   17024:	f00e faaf 	bl	25586 <bt_encrypt_le>
		if (err) {
   17028:	b170      	cbz	r0, 17048 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   1702a:	4b62      	ldr	r3, [pc, #392]	; (171b4 <smp_pairing_random+0x21c>)
   1702c:	f8cd 8000 	str.w	r8, [sp]
   17030:	e9cd 8301 	strd	r8, r3, [sp, #4]
   17034:	4643      	mov	r3, r8
		LOG_ERR("Calculate confirm failed");
   17036:	2201      	movs	r2, #1
   17038:	4618      	mov	r0, r3
   1703a:	495f      	ldr	r1, [pc, #380]	; (171b8 <smp_pairing_random+0x220>)
   1703c:	f00f fb45 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   17040:	2008      	movs	r0, #8
}
   17042:	b009      	add	sp, #36	; 0x24
   17044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17048:	4633      	mov	r3, r6
   1704a:	ae08      	add	r6, sp, #32
   1704c:	462a      	mov	r2, r5
   1704e:	ca03      	ldmia	r2!, {r0, r1}
   17050:	42b2      	cmp	r2, r6
   17052:	6018      	str	r0, [r3, #0]
   17054:	6059      	str	r1, [r3, #4]
   17056:	4615      	mov	r5, r2
   17058:	f103 0308 	add.w	r3, r3, #8
   1705c:	d1f6      	bne.n	1704c <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1705e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17060:	4638      	mov	r0, r7
   17062:	f00f fb41 	bl	266e8 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   17066:	4620      	mov	r0, r4
   17068:	f00f fb87 	bl	2677a <smp_send_pairing_random>
   1706c:	e7e9      	b.n	17042 <smp_pairing_random+0xaa>
	switch (smp->method) {
   1706e:	7a23      	ldrb	r3, [r4, #8]
   17070:	2b05      	cmp	r3, #5
   17072:	f200 8091 	bhi.w	17198 <smp_pairing_random+0x200>
   17076:	e8df f003 	tbb	[pc, r3]
   1707a:	1f19      	.short	0x1f19
   1707c:	658f031f 	.word	0x658f031f
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   17080:	ab04      	add	r3, sp, #16
   17082:	494e      	ldr	r1, [pc, #312]	; (171bc <smp_pairing_random+0x224>)
   17084:	9300      	str	r3, [sp, #0]
   17086:	464a      	mov	r2, r9
   17088:	6809      	ldr	r1, [r1, #0]
   1708a:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1708e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   17092:	f001 f865 	bl	18160 <bt_crypto_g2>
   17096:	2800      	cmp	r0, #0
   17098:	d1d2      	bne.n	17040 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1709a:	210a      	movs	r1, #10
   1709c:	4638      	mov	r0, r7
   1709e:	f00f fb23 	bl	266e8 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   170a2:	68ab      	ldr	r3, [r5, #8]
   170a4:	9904      	ldr	r1, [sp, #16]
   170a6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   170aa:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   170ac:	210d      	movs	r1, #13
   170ae:	4620      	mov	r0, r4
   170b0:	f00f fb1a 	bl	266e8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   170b4:	2110      	movs	r1, #16
   170b6:	e7d3      	b.n	17060 <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   170b8:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   170bc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   170c0:	493e      	ldr	r1, [pc, #248]	; (171bc <smp_pairing_random+0x224>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   170c2:	40d3      	lsrs	r3, r2
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   170c4:	ad04      	add	r5, sp, #16
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   170c6:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   170ca:	9500      	str	r5, [sp, #0]
   170cc:	464a      	mov	r2, r9
   170ce:	6809      	ldr	r1, [r1, #0]
   170d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   170d4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   170d8:	f00f fd98 	bl	26c0c <bt_crypto_f4>
   170dc:	b128      	cbz	r0, 170ea <smp_pairing_random+0x152>
		LOG_ERR("Calculate confirm failed");
   170de:	4b38      	ldr	r3, [pc, #224]	; (171c0 <smp_pairing_random+0x228>)
   170e0:	9302      	str	r3, [sp, #8]
   170e2:	2300      	movs	r3, #0
   170e4:	e9cd 3300 	strd	r3, r3, [sp]
   170e8:	e7a5      	b.n	17036 <smp_pairing_random+0x9e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   170ea:	2210      	movs	r2, #16
   170ec:	4629      	mov	r1, r5
   170ee:	f104 0017 	add.w	r0, r4, #23
   170f2:	f011 fb56 	bl	287a2 <memcmp>
   170f6:	b108      	cbz	r0, 170fc <smp_pairing_random+0x164>
		return BT_SMP_ERR_CONFIRM_FAILED;
   170f8:	2004      	movs	r0, #4
   170fa:	e7a2      	b.n	17042 <smp_pairing_random+0xaa>
		atomic_set_bit(smp->allowed_cmds,
   170fc:	2103      	movs	r1, #3
   170fe:	4620      	mov	r0, r4
   17100:	f00f faf2 	bl	266e8 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   17104:	f00f fb39 	bl	2677a <smp_send_pairing_random>
		if (err) {
   17108:	2800      	cmp	r0, #0
   1710a:	d19a      	bne.n	17042 <smp_pairing_random+0xaa>
		smp->passkey_round++;
   1710c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17110:	3301      	adds	r3, #1
   17112:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   17114:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   17116:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1711a:	d109      	bne.n	17130 <smp_pairing_random+0x198>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1711c:	210d      	movs	r1, #13
   1711e:	4620      	mov	r0, r4
   17120:	f00f fae2 	bl	266e8 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   17124:	2110      	movs	r1, #16
   17126:	4638      	mov	r0, r7
   17128:	f00f fade 	bl	266e8 <atomic_set_bit>
			return 0;
   1712c:	2000      	movs	r0, #0
   1712e:	e788      	b.n	17042 <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   17130:	2110      	movs	r1, #16
   17132:	f104 0027 	add.w	r0, r4, #39	; 0x27
   17136:	f7fb fd05 	bl	12b44 <bt_rand>
   1713a:	3800      	subs	r0, #0
   1713c:	bf18      	it	ne
   1713e:	2001      	movne	r0, #1
   17140:	00c0      	lsls	r0, r0, #3
   17142:	e77e      	b.n	17042 <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   17144:	2110      	movs	r1, #16
   17146:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1714a:	f7fb fcfb 	bl	12b44 <bt_rand>
   1714e:	2800      	cmp	r0, #0
   17150:	f47f af76 	bne.w	17040 <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   17154:	b365      	cbz	r5, 171b0 <smp_pairing_random+0x218>
   17156:	68eb      	ldr	r3, [r5, #12]
   17158:	b353      	cbz	r3, 171b0 <smp_pairing_random+0x218>
			struct bt_conn_oob_info info = {
   1715a:	4b1a      	ldr	r3, [pc, #104]	; (171c4 <smp_pairing_random+0x22c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1715c:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1715e:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   17160:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   17162:	f8ad 3010 	strh.w	r3, [sp, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   17166:	7ca3      	ldrb	r3, [r4, #18]
   17168:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1716c:	d412      	bmi.n	17194 <smp_pairing_random+0x1fc>
   1716e:	2b00      	cmp	r3, #0
   17170:	bf14      	ite	ne
   17172:	2301      	movne	r3, #1
   17174:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   17176:	f88d 3011 	strb.w	r3, [sp, #17]
			smp->oobd_local = NULL;
   1717a:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1717c:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   1717e:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   17182:	210c      	movs	r1, #12
   17184:	f00f fab0 	bl	266e8 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   17188:	68eb      	ldr	r3, [r5, #12]
   1718a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1718e:	a904      	add	r1, sp, #16
   17190:	4798      	blx	r3
			return 0;
   17192:	e7cb      	b.n	1712c <smp_pairing_random+0x194>
		if (rsp_oob_present) {
   17194:	005b      	lsls	r3, r3, #1
   17196:	e7ee      	b.n	17176 <smp_pairing_random+0x1de>
	switch (smp->method) {
   17198:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1719a:	4b0b      	ldr	r3, [pc, #44]	; (171c8 <smp_pairing_random+0x230>)
   1719c:	2201      	movs	r2, #1
   1719e:	9302      	str	r3, [sp, #8]
   171a0:	2300      	movs	r3, #0
   171a2:	4905      	ldr	r1, [pc, #20]	; (171b8 <smp_pairing_random+0x220>)
   171a4:	4618      	mov	r0, r3
   171a6:	e9cd 3300 	strd	r3, r3, [sp]
   171aa:	f00f fa8e 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   171ae:	e747      	b.n	17040 <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   171b0:	2002      	movs	r0, #2
   171b2:	e746      	b.n	17042 <smp_pairing_random+0xaa>
   171b4:	0002db1f 	.word	0x0002db1f
   171b8:	00029704 	.word	0x00029704
   171bc:	200210d4 	.word	0x200210d4
   171c0:	0002db34 	.word	0x0002db34
   171c4:	0002984a 	.word	0x0002984a
   171c8:	0002da3e 	.word	0x0002da3e

000171cc <bt_smp_start_security>:
{
   171cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   171d0:	78c6      	ldrb	r6, [r0, #3]
{
   171d2:	4604      	mov	r4, r0
	switch (conn->role) {
   171d4:	2e01      	cmp	r6, #1
   171d6:	d005      	beq.n	171e4 <bt_smp_start_security+0x18>
		return -EINVAL;
   171d8:	f06f 0415 	mvn.w	r4, #21
}
   171dc:	4620      	mov	r0, r4
   171de:	b003      	add	sp, #12
   171e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   171e4:	f7ff f9b4 	bl	16550 <smp_chan_get>
	if (!smp) {
   171e8:	4605      	mov	r5, r0
   171ea:	2800      	cmp	r0, #0
   171ec:	f000 80ac 	beq.w	17348 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   171f0:	1d07      	adds	r7, r0, #4
   171f2:	2104      	movs	r1, #4
   171f4:	4638      	mov	r0, r7
   171f6:	f00f fa10 	bl	2661a <atomic_test_bit>
   171fa:	2800      	cmp	r0, #0
   171fc:	f040 80a7 	bne.w	1734e <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   17200:	2103      	movs	r1, #3
   17202:	4638      	mov	r0, r7
   17204:	f00f fa09 	bl	2661a <atomic_test_bit>
   17208:	b110      	cbz	r0, 17210 <bt_smp_start_security+0x44>
		return -EBUSY;
   1720a:	f06f 040f 	mvn.w	r4, #15
   1720e:	e7e5      	b.n	171dc <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   17210:	4631      	mov	r1, r6
   17212:	4638      	mov	r0, r7
   17214:	f00f fa01 	bl	2661a <atomic_test_bit>
   17218:	2800      	cmp	r0, #0
   1721a:	d1f6      	bne.n	1720a <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1721c:	4628      	mov	r0, r5
   1721e:	f7ff f919 	bl	16454 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   17222:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   17226:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   17228:	7a9b      	ldrb	r3, [r3, #10]
   1722a:	2b03      	cmp	r3, #3
   1722c:	d042      	beq.n	172b4 <bt_smp_start_security+0xe8>
   1722e:	d832      	bhi.n	17296 <bt_smp_start_security+0xca>
   17230:	3b01      	subs	r3, #1
   17232:	2b01      	cmp	r3, #1
   17234:	d948      	bls.n	172c8 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   17236:	210b      	movs	r1, #11
   17238:	1d20      	adds	r0, r4, #4
   1723a:	f00f f9ee 	bl	2661a <atomic_test_bit>
   1723e:	2800      	cmp	r0, #0
   17240:	d1ca      	bne.n	171d8 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   17242:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17246:	b983      	cbnz	r3, 1726a <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   17248:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1724c:	4632      	mov	r2, r6
   1724e:	2020      	movs	r0, #32
   17250:	7a21      	ldrb	r1, [r4, #8]
   17252:	f000 fde9 	bl	17e28 <bt_keys_find>
   17256:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   1725a:	b930      	cbnz	r0, 1726a <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1725c:	4632      	mov	r2, r6
   1725e:	2004      	movs	r0, #4
   17260:	7a21      	ldrb	r1, [r4, #8]
   17262:	f000 fde1 	bl	17e28 <bt_keys_find>
   17266:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   1726a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1726e:	2b00      	cmp	r3, #0
   17270:	d0b2      	beq.n	171d8 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   17272:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   17274:	f012 0f24 	tst.w	r2, #36	; 0x24
   17278:	d0ae      	beq.n	171d8 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1727a:	7aa1      	ldrb	r1, [r4, #10]
   1727c:	2902      	cmp	r1, #2
   1727e:	d923      	bls.n	172c8 <bt_smp_start_security+0xfc>
   17280:	7b58      	ldrb	r0, [r3, #13]
   17282:	07c0      	lsls	r0, r0, #31
   17284:	d5a8      	bpl.n	171d8 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   17286:	2903      	cmp	r1, #3
   17288:	d01e      	beq.n	172c8 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1728a:	0692      	lsls	r2, r2, #26
   1728c:	d5a4      	bpl.n	171d8 <bt_smp_start_security+0xc>
   1728e:	7b1b      	ldrb	r3, [r3, #12]
   17290:	2b10      	cmp	r3, #16
   17292:	d1a1      	bne.n	171d8 <bt_smp_start_security+0xc>
   17294:	e018      	b.n	172c8 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   17296:	2b04      	cmp	r3, #4
   17298:	d1cd      	bne.n	17236 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1729a:	4628      	mov	r0, r5
   1729c:	f7ff f8f0 	bl	16480 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   172a0:	2803      	cmp	r0, #3
   172a2:	d104      	bne.n	172ae <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   172a4:	2e00      	cmp	r6, #0
   172a6:	d0c6      	beq.n	17236 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   172a8:	68f3      	ldr	r3, [r6, #12]
   172aa:	2b00      	cmp	r3, #0
   172ac:	d0c3      	beq.n	17236 <bt_smp_start_security+0x6a>
   172ae:	4b29      	ldr	r3, [pc, #164]	; (17354 <bt_smp_start_security+0x188>)
   172b0:	781b      	ldrb	r3, [r3, #0]
   172b2:	e007      	b.n	172c4 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   172b4:	4628      	mov	r0, r5
   172b6:	f7ff f8e3 	bl	16480 <get_io_capa>
   172ba:	2803      	cmp	r0, #3
   172bc:	d104      	bne.n	172c8 <bt_smp_start_security+0xfc>
   172be:	2e00      	cmp	r6, #0
   172c0:	d0b9      	beq.n	17236 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   172c2:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   172c4:	2b00      	cmp	r3, #0
   172c6:	d0b6      	beq.n	17236 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   172c8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   172cc:	b13b      	cbz	r3, 172de <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   172ce:	4628      	mov	r0, r5
   172d0:	f7ff f958 	bl	16584 <smp_init>
   172d4:	4680      	mov	r8, r0
   172d6:	b170      	cbz	r0, 172f6 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   172d8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   172dc:	e77e      	b.n	171dc <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   172de:	7a20      	ldrb	r0, [r4, #8]
   172e0:	f104 0190 	add.w	r1, r4, #144	; 0x90
   172e4:	f000 fd48 	bl	17d78 <bt_keys_get_addr>
   172e8:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   172ec:	2800      	cmp	r0, #0
   172ee:	d1ee      	bne.n	172ce <bt_smp_start_security+0x102>
			return -ENOMEM;
   172f0:	f06f 040b 	mvn.w	r4, #11
   172f4:	e772      	b.n	171dc <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   172f6:	210b      	movs	r1, #11
   172f8:	4628      	mov	r0, r5
   172fa:	f00f fa05 	bl	26708 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   172fe:	4606      	mov	r6, r0
   17300:	2800      	cmp	r0, #0
   17302:	d0e9      	beq.n	172d8 <bt_smp_start_security+0x10c>
   17304:	2101      	movs	r1, #1
   17306:	300c      	adds	r0, #12
   17308:	f001 fac2 	bl	18890 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1730c:	2109      	movs	r1, #9
   1730e:	4681      	mov	r9, r0
   17310:	4628      	mov	r0, r5
   17312:	f7ff f8db 	bl	164cc <get_auth>
   17316:	4643      	mov	r3, r8
   17318:	f889 0000 	strb.w	r0, [r9]
   1731c:	4632      	mov	r2, r6
   1731e:	4620      	mov	r0, r4
   17320:	2106      	movs	r1, #6
   17322:	f8cd 8000 	str.w	r8, [sp]
   17326:	f00e facb 	bl	258c0 <bt_l2cap_send_cb>
	if (err) {
   1732a:	4604      	mov	r4, r0
   1732c:	b118      	cbz	r0, 17336 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1732e:	4630      	mov	r0, r6
   17330:	f001 f98c 	bl	1864c <net_buf_unref>
		return err;
   17334:	e752      	b.n	171dc <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   17336:	4638      	mov	r0, r7
   17338:	210f      	movs	r1, #15
   1733a:	f00f f9d5 	bl	266e8 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1733e:	2101      	movs	r1, #1
   17340:	4628      	mov	r0, r5
   17342:	f00f f9d1 	bl	266e8 <atomic_set_bit>
	return 0;
   17346:	e749      	b.n	171dc <bt_smp_start_security+0x10>
		return -ENOTCONN;
   17348:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1734c:	e746      	b.n	171dc <bt_smp_start_security+0x10>
		return -EIO;
   1734e:	f06f 0404 	mvn.w	r4, #4
   17352:	e743      	b.n	171dc <bt_smp_start_security+0x10>
   17354:	20021d83 	.word	0x20021d83

00017358 <smp_pairing_complete>:
{
   17358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1735a:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1735c:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   17360:	1d04      	adds	r4, r0, #4
	if (!status) {
   17362:	bb39      	cbnz	r1, 173b4 <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   17364:	210d      	movs	r1, #13
   17366:	4620      	mov	r0, r4
   17368:	f00f f957 	bl	2661a <atomic_test_bit>
	return list->head;
   1736c:	4b36      	ldr	r3, [pc, #216]	; (17448 <smp_pairing_complete+0xf0>)
   1736e:	4607      	mov	r7, r0
   17370:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   17372:	b19b      	cbz	r3, 1739c <smp_pairing_complete+0x44>
	return node->next;
   17374:	681c      	ldr	r4, [r3, #0]
   17376:	b104      	cbz	r4, 1737a <smp_pairing_complete+0x22>
   17378:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1737a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1737e:	b113      	cbz	r3, 17386 <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   17380:	4639      	mov	r1, r7
   17382:	4628      	mov	r0, r5
   17384:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   17386:	b14c      	cbz	r4, 1739c <smp_pairing_complete+0x44>
   17388:	4623      	mov	r3, r4
   1738a:	68e4      	ldr	r4, [r4, #12]
   1738c:	681b      	ldr	r3, [r3, #0]
   1738e:	b11c      	cbz	r4, 17398 <smp_pairing_complete+0x40>
   17390:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   17392:	2b00      	cmp	r3, #0
   17394:	d1f4      	bne.n	17380 <smp_pairing_complete+0x28>
   17396:	e7f7      	b.n	17388 <smp_pairing_complete+0x30>
   17398:	2b00      	cmp	r3, #0
   1739a:	d1f1      	bne.n	17380 <smp_pairing_complete+0x28>
	smp_reset(smp);
   1739c:	4630      	mov	r0, r6
   1739e:	f00f fa4c 	bl	2683a <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   173a2:	7a6a      	ldrb	r2, [r5, #9]
   173a4:	7aab      	ldrb	r3, [r5, #10]
   173a6:	429a      	cmp	r2, r3
   173a8:	d04d      	beq.n	17446 <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   173aa:	4628      	mov	r0, r5
}
   173ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   173b0:	f7ff bf0c 	b.w	171cc <bt_smp_start_security>
	switch (smp_err) {
   173b4:	3901      	subs	r1, #1
   173b6:	b2c9      	uxtb	r1, r1
   173b8:	290e      	cmp	r1, #14
   173ba:	bf96      	itet	ls
   173bc:	4b23      	ldrls	r3, [pc, #140]	; (1744c <smp_pairing_complete+0xf4>)
	if (!status) {
   173be:	2709      	movhi	r7, #9
   173c0:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   173c2:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   173c6:	b143      	cbz	r3, 173da <smp_pairing_complete+0x82>
   173c8:	7b1b      	ldrb	r3, [r3, #12]
   173ca:	bb33      	cbnz	r3, 1741a <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   173cc:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   173d0:	f000 fe10 	bl	17ff4 <bt_keys_clear>
			conn->le.keys = NULL;
   173d4:	2300      	movs	r3, #0
   173d6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   173da:	2102      	movs	r1, #2
   173dc:	4620      	mov	r0, r4
   173de:	f00f f91c 	bl	2661a <atomic_test_bit>
   173e2:	b948      	cbnz	r0, 173f8 <smp_pairing_complete+0xa0>
	switch (err) {
   173e4:	2f07      	cmp	r7, #7
   173e6:	bf94      	ite	ls
   173e8:	4b19      	ldrls	r3, [pc, #100]	; (17450 <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   173ea:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   173ec:	463a      	mov	r2, r7
   173ee:	4628      	mov	r0, r5
   173f0:	bf98      	it	ls
   173f2:	5dd9      	ldrbls	r1, [r3, r7]
   173f4:	f7fc fa80 	bl	138f8 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   173f8:	2103      	movs	r1, #3
   173fa:	4620      	mov	r0, r4
   173fc:	f00f f90d 	bl	2661a <atomic_test_bit>
   17400:	2800      	cmp	r0, #0
   17402:	d0cb      	beq.n	1739c <smp_pairing_complete+0x44>
	return list->head;
   17404:	4b10      	ldr	r3, [pc, #64]	; (17448 <smp_pairing_complete+0xf0>)
   17406:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   17408:	2b00      	cmp	r3, #0
   1740a:	d0c7      	beq.n	1739c <smp_pairing_complete+0x44>
	return node->next;
   1740c:	681c      	ldr	r4, [r3, #0]
   1740e:	b104      	cbz	r4, 17412 <smp_pairing_complete+0xba>
   17410:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   17412:	f853 3c08 	ldr.w	r3, [r3, #-8]
   17416:	b94b      	cbnz	r3, 1742c <smp_pairing_complete+0xd4>
   17418:	e00b      	b.n	17432 <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1741a:	2102      	movs	r1, #2
   1741c:	4620      	mov	r0, r4
   1741e:	f00f f8fc 	bl	2661a <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   17422:	2800      	cmp	r0, #0
   17424:	d1d2      	bne.n	173cc <smp_pairing_complete+0x74>
   17426:	e7d8      	b.n	173da <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   17428:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1742a:	b123      	cbz	r3, 17436 <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   1742c:	4639      	mov	r1, r7
   1742e:	4628      	mov	r0, r5
   17430:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   17432:	2c00      	cmp	r4, #0
   17434:	d0b2      	beq.n	1739c <smp_pairing_complete+0x44>
   17436:	4623      	mov	r3, r4
   17438:	68e4      	ldr	r4, [r4, #12]
   1743a:	685b      	ldr	r3, [r3, #4]
   1743c:	2c00      	cmp	r4, #0
   1743e:	d1f3      	bne.n	17428 <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   17440:	2b00      	cmp	r3, #0
   17442:	d1f3      	bne.n	1742c <smp_pairing_complete+0xd4>
   17444:	e7aa      	b.n	1739c <smp_pairing_complete+0x44>
}
   17446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17448:	20020fa4 	.word	0x20020fa4
   1744c:	0002ddee 	.word	0x0002ddee
   17450:	0002dddd 	.word	0x0002dddd

00017454 <smp_error>:
{
   17454:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   17456:	1d03      	adds	r3, r0, #4
{
   17458:	4606      	mov	r6, r0
   1745a:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1745c:	4618      	mov	r0, r3
   1745e:	2102      	movs	r1, #2
{
   17460:	b085      	sub	sp, #20
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   17462:	f00f f8da 	bl	2661a <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   17466:	4604      	mov	r4, r0
   17468:	b120      	cbz	r0, 17474 <smp_error+0x20>
   1746a:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1746e:	fab4 f484 	clz	r4, r4
   17472:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   17474:	2103      	movs	r1, #3
   17476:	4618      	mov	r0, r3
   17478:	f00f f8cf 	bl	2661a <atomic_test_bit>
   1747c:	b1b0      	cbz	r0, 174ac <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   1747e:	4639      	mov	r1, r7
   17480:	4630      	mov	r0, r6
   17482:	f7ff ff69 	bl	17358 <smp_pairing_complete>
	if (remote_already_completed) {
   17486:	b1f4      	cbz	r4, 174c6 <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   17488:	4b1d      	ldr	r3, [pc, #116]	; (17500 <smp_error+0xac>)
   1748a:	491e      	ldr	r1, [pc, #120]	; (17504 <smp_error+0xb0>)
   1748c:	9302      	str	r3, [sp, #8]
   1748e:	2300      	movs	r3, #0
   17490:	2202      	movs	r2, #2
   17492:	4618      	mov	r0, r3
   17494:	e9cd 3300 	strd	r3, r3, [sp]
   17498:	f00f f917 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1749c:	2105      	movs	r1, #5
   1749e:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   174a2:	f00e f917 	bl	256d4 <bt_conn_disconnect>
		return 0;
   174a6:	2000      	movs	r0, #0
}
   174a8:	b005      	add	sp, #20
   174aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   174ac:	2101      	movs	r1, #1
   174ae:	4618      	mov	r0, r3
   174b0:	f00f f8b3 	bl	2661a <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   174b4:	2800      	cmp	r0, #0
   174b6:	d1e2      	bne.n	1747e <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   174b8:	210f      	movs	r1, #15
   174ba:	4618      	mov	r0, r3
   174bc:	f00f f8ad 	bl	2661a <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   174c0:	2800      	cmp	r0, #0
   174c2:	d1dc      	bne.n	1747e <smp_error+0x2a>
   174c4:	e7df      	b.n	17486 <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   174c6:	2105      	movs	r1, #5
   174c8:	4630      	mov	r0, r6
   174ca:	f00f f91d 	bl	26708 <smp_create_pdu.constprop.0>
	if (!buf) {
   174ce:	4605      	mov	r5, r0
   174d0:	b190      	cbz	r0, 174f8 <smp_error+0xa4>
   174d2:	2101      	movs	r1, #1
   174d4:	300c      	adds	r0, #12
   174d6:	f001 f9db 	bl	18890 <net_buf_simple_add>
	rsp->reason = reason;
   174da:	7007      	strb	r7, [r0, #0]
   174dc:	9400      	str	r4, [sp, #0]
   174de:	4623      	mov	r3, r4
   174e0:	462a      	mov	r2, r5
   174e2:	2106      	movs	r1, #6
   174e4:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   174e8:	f00e f9ea 	bl	258c0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   174ec:	2800      	cmp	r0, #0
   174ee:	d0da      	beq.n	174a6 <smp_error+0x52>
		net_buf_unref(buf);
   174f0:	4628      	mov	r0, r5
   174f2:	f001 f8ab 	bl	1864c <net_buf_unref>
   174f6:	e7d6      	b.n	174a6 <smp_error+0x52>
		return -ENOBUFS;
   174f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   174fc:	e7d4      	b.n	174a8 <smp_error+0x54>
   174fe:	bf00      	nop
   17500:	0002db4d 	.word	0x0002db4d
   17504:	00029704 	.word	0x00029704

00017508 <bt_smp_recv>:
{
   17508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1750c:	8a0b      	ldrh	r3, [r1, #16]
{
   1750e:	4604      	mov	r4, r0
   17510:	460e      	mov	r6, r1
   17512:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   17514:	b963      	cbnz	r3, 17530 <bt_smp_recv+0x28>
		LOG_ERR("Too small SMP PDU received");
   17516:	4a3c      	ldr	r2, [pc, #240]	; (17608 <bt_smp_recv+0x100>)
   17518:	4618      	mov	r0, r3
   1751a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1751e:	493b      	ldr	r1, [pc, #236]	; (1760c <bt_smp_recv+0x104>)
   17520:	2201      	movs	r2, #1
   17522:	9300      	str	r3, [sp, #0]
   17524:	f00f f8d1 	bl	266ca <z_log_msg_runtime_create.constprop.0>
}
   17528:	2000      	movs	r0, #0
   1752a:	b006      	add	sp, #24
   1752c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   17530:	2101      	movs	r1, #1
   17532:	f106 000c 	add.w	r0, r6, #12
   17536:	f001 f98d 	bl	18854 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1753a:	2104      	movs	r1, #4
   1753c:	4607      	mov	r7, r0
   1753e:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
   17542:	f00f f86a 	bl	2661a <atomic_test_bit>
   17546:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   1754a:	7839      	ldrb	r1, [r7, #0]
   1754c:	4604      	mov	r4, r0
   1754e:	b158      	cbz	r0, 17568 <bt_smp_recv+0x60>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   17550:	4b2f      	ldr	r3, [pc, #188]	; (17610 <bt_smp_recv+0x108>)
   17552:	2202      	movs	r2, #2
   17554:	9302      	str	r3, [sp, #8]
   17556:	2300      	movs	r3, #0
   17558:	4618      	mov	r0, r3
   1755a:	e9cd 3300 	strd	r3, r3, [sp]
   1755e:	9103      	str	r1, [sp, #12]
   17560:	492a      	ldr	r1, [pc, #168]	; (1760c <bt_smp_recv+0x104>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   17562:	f00f f8b2 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return 0;
   17566:	e7df      	b.n	17528 <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   17568:	290e      	cmp	r1, #14
   1756a:	d908      	bls.n	1757e <bt_smp_recv+0x76>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1756c:	4b29      	ldr	r3, [pc, #164]	; (17614 <bt_smp_recv+0x10c>)
   1756e:	9103      	str	r1, [sp, #12]
   17570:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17574:	2202      	movs	r2, #2
   17576:	4603      	mov	r3, r0
   17578:	4924      	ldr	r1, [pc, #144]	; (1760c <bt_smp_recv+0x104>)
   1757a:	9000      	str	r0, [sp, #0]
   1757c:	e7f1      	b.n	17562 <bt_smp_recv+0x5a>
	if (!handlers[hdr->code].func) {
   1757e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 17618 <bt_smp_recv+0x110>
   17582:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   17586:	b96b      	cbnz	r3, 175a4 <bt_smp_recv+0x9c>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   17588:	4a24      	ldr	r2, [pc, #144]	; (1761c <bt_smp_recv+0x114>)
   1758a:	9103      	str	r1, [sp, #12]
   1758c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   17590:	491e      	ldr	r1, [pc, #120]	; (1760c <bt_smp_recv+0x104>)
   17592:	2202      	movs	r2, #2
   17594:	9300      	str	r3, [sp, #0]
   17596:	f00f f898 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1759a:	2107      	movs	r1, #7
		smp_error(smp, err);
   1759c:	4628      	mov	r0, r5
   1759e:	f7ff ff59 	bl	17454 <smp_error>
   175a2:	e7c1      	b.n	17528 <bt_smp_recv+0x20>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   175a4:	4628      	mov	r0, r5
   175a6:	f00f f936 	bl	26816 <atomic_test_and_clear_bit>
   175aa:	783a      	ldrb	r2, [r7, #0]
   175ac:	4603      	mov	r3, r0
   175ae:	b968      	cbnz	r0, 175cc <bt_smp_recv+0xc4>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   175b0:	9203      	str	r2, [sp, #12]
   175b2:	4a1b      	ldr	r2, [pc, #108]	; (17620 <bt_smp_recv+0x118>)
   175b4:	4915      	ldr	r1, [pc, #84]	; (1760c <bt_smp_recv+0x104>)
   175b6:	e9cd 0201 	strd	r0, r2, [sp, #4]
   175ba:	9000      	str	r0, [sp, #0]
   175bc:	2202      	movs	r2, #2
   175be:	f00f f884 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   175c2:	783b      	ldrb	r3, [r7, #0]
   175c4:	2b05      	cmp	r3, #5
   175c6:	d0af      	beq.n	17528 <bt_smp_recv+0x20>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   175c8:	2108      	movs	r1, #8
   175ca:	e7e7      	b.n	1759c <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   175cc:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   175d0:	8a33      	ldrh	r3, [r6, #16]
   175d2:	7909      	ldrb	r1, [r1, #4]
   175d4:	4299      	cmp	r1, r3
   175d6:	d00d      	beq.n	175f4 <bt_smp_recv+0xec>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   175d8:	e9cd 3203 	strd	r3, r2, [sp, #12]
   175dc:	4b11      	ldr	r3, [pc, #68]	; (17624 <bt_smp_recv+0x11c>)
   175de:	490b      	ldr	r1, [pc, #44]	; (1760c <bt_smp_recv+0x104>)
   175e0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   175e4:	2201      	movs	r2, #1
   175e6:	4623      	mov	r3, r4
   175e8:	4620      	mov	r0, r4
   175ea:	9400      	str	r4, [sp, #0]
   175ec:	f00f f86d 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   175f0:	210a      	movs	r1, #10
   175f2:	e7d3      	b.n	1759c <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   175f4:	4631      	mov	r1, r6
   175f6:	4628      	mov	r0, r5
   175f8:	f858 3032 	ldr.w	r3, [r8, r2, lsl #3]
   175fc:	4798      	blx	r3
	if (err) {
   175fe:	4601      	mov	r1, r0
   17600:	2800      	cmp	r0, #0
   17602:	d091      	beq.n	17528 <bt_smp_recv+0x20>
   17604:	e7ca      	b.n	1759c <bt_smp_recv+0x94>
   17606:	bf00      	nop
   17608:	0002dba5 	.word	0x0002dba5
   1760c:	00029704 	.word	0x00029704
   17610:	0002dbc0 	.word	0x0002dbc0
   17614:	0002dbf1 	.word	0x0002dbf1
   17618:	0002a234 	.word	0x0002a234
   1761c:	0002dc13 	.word	0x0002dc13
   17620:	0002dc2d 	.word	0x0002dc2d
   17624:	0002d6be 	.word	0x0002d6be

00017628 <bt_smp_pkey_ready>:
{
   17628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sc_public_key = pkey;
   1762a:	4a10      	ldr	r2, [pc, #64]	; (1766c <bt_smp_pkey_ready+0x44>)
{
   1762c:	4603      	mov	r3, r0
	sc_public_key = pkey;
   1762e:	6010      	str	r0, [r2, #0]
	if (!pkey) {
   17630:	b948      	cbnz	r0, 17646 <bt_smp_pkey_ready+0x1e>
		LOG_WRN("Public key not available");
   17632:	4a0f      	ldr	r2, [pc, #60]	; (17670 <bt_smp_pkey_ready+0x48>)
   17634:	490f      	ldr	r1, [pc, #60]	; (17674 <bt_smp_pkey_ready+0x4c>)
   17636:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1763a:	9000      	str	r0, [sp, #0]
   1763c:	2202      	movs	r2, #2
   1763e:	f00f f844 	bl	266ca <z_log_msg_runtime_create.constprop.0>
}
   17642:	b004      	add	sp, #16
   17644:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   17646:	480c      	ldr	r0, [pc, #48]	; (17678 <bt_smp_pkey_ready+0x50>)
   17648:	f007 fd88 	bl	1f15c <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1764c:	4b0b      	ldr	r3, [pc, #44]	; (1767c <bt_smp_pkey_ready+0x54>)
		err = smp_public_key_periph(smp);
   1764e:	1f1c      	subs	r4, r3, #4
   17650:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   17654:	065b      	lsls	r3, r3, #25
   17656:	d5f4      	bpl.n	17642 <bt_smp_pkey_ready+0x1a>
		err = smp_public_key_periph(smp);
   17658:	4620      	mov	r0, r4
   1765a:	f7ff f897 	bl	1678c <smp_public_key_periph>
		if (err) {
   1765e:	4601      	mov	r1, r0
   17660:	2800      	cmp	r0, #0
   17662:	d0ee      	beq.n	17642 <bt_smp_pkey_ready+0x1a>
			smp_error(smp, err);
   17664:	4620      	mov	r0, r4
   17666:	f7ff fef5 	bl	17454 <smp_error>
   1766a:	e7ea      	b.n	17642 <bt_smp_pkey_ready+0x1a>
   1766c:	200210d4 	.word	0x200210d4
   17670:	0002dc48 	.word	0x0002dc48
   17674:	00029704 	.word	0x00029704
   17678:	20008b4c 	.word	0x20008b4c
   1767c:	20009984 	.word	0x20009984

00017680 <smp_ident_addr_info>:
{
   17680:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   17684:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   17688:	68cf      	ldr	r7, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1768a:	f023 0302 	bic.w	r3, r3, #2
   1768e:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   17692:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   17696:	783b      	ldrb	r3, [r7, #0]
{
   17698:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1769a:	f106 0890 	add.w	r8, r6, #144	; 0x90
   1769e:	b32b      	cbz	r3, 176ec <smp_ident_addr_info+0x6c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   176a0:	79bb      	ldrb	r3, [r7, #6]
   176a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   176a6:	2bc0      	cmp	r3, #192	; 0xc0
   176a8:	d020      	beq.n	176ec <smp_ident_addr_info+0x6c>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   176aa:	4638      	mov	r0, r7
   176ac:	f7f8 febc 	bl	10428 <bt_addr_le_str>
   176b0:	2400      	movs	r4, #0
   176b2:	4b5d      	ldr	r3, [pc, #372]	; (17828 <smp_ident_addr_info+0x1a8>)
   176b4:	2201      	movs	r2, #1
   176b6:	495d      	ldr	r1, [pc, #372]	; (1782c <smp_ident_addr_info+0x1ac>)
   176b8:	9003      	str	r0, [sp, #12]
   176ba:	9302      	str	r3, [sp, #8]
   176bc:	4620      	mov	r0, r4
   176be:	4623      	mov	r3, r4
   176c0:	e9cd 4400 	strd	r4, r4, [sp]
   176c4:	f00f f801 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   176c8:	4640      	mov	r0, r8
   176ca:	f7f8 fead 	bl	10428 <bt_addr_le_str>
   176ce:	4b58      	ldr	r3, [pc, #352]	; (17830 <smp_ident_addr_info+0x1b0>)
   176d0:	9003      	str	r0, [sp, #12]
   176d2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   176d6:	4620      	mov	r0, r4
   176d8:	4623      	mov	r3, r4
   176da:	2201      	movs	r2, #1
   176dc:	4953      	ldr	r1, [pc, #332]	; (1782c <smp_ident_addr_info+0x1ac>)
   176de:	9400      	str	r4, [sp, #0]
   176e0:	f00e fff3 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   176e4:	200a      	movs	r0, #10
}
   176e6:	b004      	add	sp, #16
   176e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   176ec:	2207      	movs	r2, #7
   176ee:	4639      	mov	r1, r7
   176f0:	4640      	mov	r0, r8
   176f2:	f011 f856 	bl	287a2 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   176f6:	b168      	cbz	r0, 17714 <smp_ident_addr_info+0x94>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   176f8:	4639      	mov	r1, r7
   176fa:	7a30      	ldrb	r0, [r6, #8]
   176fc:	f000 fc1a 	bl	17f34 <bt_keys_find_addr>
		if (keys) {
   17700:	4605      	mov	r5, r0
   17702:	b138      	cbz	r0, 17714 <smp_ident_addr_info+0x94>
			if (!update_keys_check(smp, keys)) {
   17704:	4601      	mov	r1, r0
   17706:	4620      	mov	r0, r4
   17708:	f00e ff8d 	bl	26626 <update_keys_check>
   1770c:	b1e8      	cbz	r0, 1774a <smp_ident_addr_info+0xca>
			bt_keys_clear(keys);
   1770e:	4628      	mov	r0, r5
   17710:	f000 fc70 	bl	17ff4 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17714:	210d      	movs	r1, #13
   17716:	1d20      	adds	r0, r4, #4
   17718:	f00e ff7f 	bl	2661a <atomic_test_bit>
   1771c:	2800      	cmp	r0, #0
   1771e:	d071      	beq.n	17804 <smp_ident_addr_info+0x184>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   17720:	4642      	mov	r2, r8
   17722:	2002      	movs	r0, #2
   17724:	7a31      	ldrb	r1, [r6, #8]
   17726:	f000 fc41 	bl	17fac <bt_keys_get_type>
		if (!keys) {
   1772a:	4605      	mov	r5, r0
   1772c:	b978      	cbnz	r0, 1774e <smp_ident_addr_info+0xce>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1772e:	4640      	mov	r0, r8
   17730:	f7f8 fe7a 	bl	10428 <bt_addr_le_str>
   17734:	4b3f      	ldr	r3, [pc, #252]	; (17834 <smp_ident_addr_info+0x1b4>)
   17736:	9003      	str	r0, [sp, #12]
   17738:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1773c:	2201      	movs	r2, #1
   1773e:	462b      	mov	r3, r5
   17740:	4628      	mov	r0, r5
   17742:	493a      	ldr	r1, [pc, #232]	; (1782c <smp_ident_addr_info+0x1ac>)
   17744:	9500      	str	r5, [sp, #0]
   17746:	f00e ffc0 	bl	266ca <z_log_msg_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   1774a:	2008      	movs	r0, #8
   1774c:	e7cb      	b.n	176e6 <smp_ident_addr_info+0x66>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1774e:	78f3      	ldrb	r3, [r6, #3]
   17750:	bba3      	cbnz	r3, 177bc <smp_ident_addr_info+0x13c>
			dst = &conn->le.resp_addr;
   17752:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   17756:	781a      	ldrb	r2, [r3, #0]
   17758:	2a01      	cmp	r2, #1
   1775a:	d11e      	bne.n	1779a <smp_ident_addr_info+0x11a>
		if (bt_addr_le_is_rpa(dst)) {
   1775c:	799a      	ldrb	r2, [r3, #6]
   1775e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17762:	2a40      	cmp	r2, #64	; 0x40
   17764:	d119      	bne.n	1779a <smp_ident_addr_info+0x11a>
   17766:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1776a:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   1776e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   17772:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   17774:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   17778:	b17b      	cbz	r3, 1779a <smp_ident_addr_info+0x11a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1777a:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   1777e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17782:	2bc0      	cmp	r3, #192	; 0xc0
   17784:	d009      	beq.n	1779a <smp_ident_addr_info+0x11a>
				bt_addr_le_copy(&keys->addr, &req->addr);
   17786:	4639      	mov	r1, r7
   17788:	1c68      	adds	r0, r5, #1
   1778a:	f00e ff78 	bl	2667e <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   1778e:	4640      	mov	r0, r8
   17790:	f00e ff75 	bl	2667e <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   17794:	4630      	mov	r0, r6
   17796:	f7fc f869 	bl	1386c <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1779a:	f894 60e9 	ldrb.w	r6, [r4, #233]	; 0xe9
   1779e:	f016 0602 	ands.w	r6, r6, #2
   177a2:	d00e      	beq.n	177c2 <smp_ident_addr_info+0x142>
   177a4:	4924      	ldr	r1, [pc, #144]	; (17838 <smp_ident_addr_info+0x1b8>)
   177a6:	f640 6363 	movw	r3, #3683	; 0xe63
   177aa:	4a24      	ldr	r2, [pc, #144]	; (1783c <smp_ident_addr_info+0x1bc>)
   177ac:	4824      	ldr	r0, [pc, #144]	; (17840 <smp_ident_addr_info+0x1c0>)
   177ae:	f00c fc38 	bl	24022 <assert_print>
   177b2:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   177b6:	4821      	ldr	r0, [pc, #132]	; (1783c <smp_ident_addr_info+0x1bc>)
   177b8:	f00c fc2c 	bl	24014 <assert_post_action>
			dst = &conn->le.init_addr;
   177bc:	f106 0397 	add.w	r3, r6, #151	; 0x97
   177c0:	e7c9      	b.n	17756 <smp_ident_addr_info+0xd6>
	conflict = bt_id_find_conflict(new_bond);
   177c2:	4628      	mov	r0, r5
   177c4:	f7fa fafe 	bl	11dc4 <bt_id_find_conflict>
	if (conflict) {
   177c8:	b158      	cbz	r0, 177e2 <smp_ident_addr_info+0x162>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   177ca:	4b1e      	ldr	r3, [pc, #120]	; (17844 <smp_ident_addr_info+0x1c4>)
   177cc:	4630      	mov	r0, r6
   177ce:	e9cd 6301 	strd	r6, r3, [sp, #4]
   177d2:	2202      	movs	r2, #2
   177d4:	4633      	mov	r3, r6
   177d6:	4915      	ldr	r1, [pc, #84]	; (1782c <smp_ident_addr_info+0x1ac>)
   177d8:	9600      	str	r6, [sp, #0]
   177da:	f00e ff76 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   177de:	2003      	movs	r0, #3
   177e0:	e781      	b.n	176e6 <smp_ident_addr_info+0x66>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   177e2:	4628      	mov	r0, r5
   177e4:	f7fa faee 	bl	11dc4 <bt_id_find_conflict>
   177e8:	b148      	cbz	r0, 177fe <smp_ident_addr_info+0x17e>
   177ea:	4917      	ldr	r1, [pc, #92]	; (17848 <smp_ident_addr_info+0x1c8>)
   177ec:	f640 637f 	movw	r3, #3711	; 0xe7f
   177f0:	4a12      	ldr	r2, [pc, #72]	; (1783c <smp_ident_addr_info+0x1bc>)
   177f2:	4813      	ldr	r0, [pc, #76]	; (17840 <smp_ident_addr_info+0x1c0>)
   177f4:	f00c fc15 	bl	24022 <assert_print>
   177f8:	f640 617f 	movw	r1, #3711	; 0xe7f
   177fc:	e7db      	b.n	177b6 <smp_ident_addr_info+0x136>
	bt_id_add(new_bond);
   177fe:	4628      	mov	r0, r5
   17800:	f7fa faf0 	bl	11de4 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   17804:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   17808:	075b      	lsls	r3, r3, #29
   1780a:	d503      	bpl.n	17814 <smp_ident_addr_info+0x194>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1780c:	210a      	movs	r1, #10
   1780e:	4620      	mov	r0, r4
   17810:	f00e ff6a 	bl	266e8 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   17814:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   17818:	b109      	cbz	r1, 1781e <smp_ident_addr_info+0x19e>
	return 0;
   1781a:	2000      	movs	r0, #0
   1781c:	e763      	b.n	176e6 <smp_ident_addr_info+0x66>
		smp_pairing_complete(smp, 0);
   1781e:	4620      	mov	r0, r4
   17820:	f7ff fd9a 	bl	17358 <smp_pairing_complete>
   17824:	e7f9      	b.n	1781a <smp_ident_addr_info+0x19a>
   17826:	bf00      	nop
   17828:	0002dc61 	.word	0x0002dc61
   1782c:	00029704 	.word	0x00029704
   17830:	0002dd48 	.word	0x0002dd48
   17834:	0002da24 	.word	0x0002da24
   17838:	0002dca4 	.word	0x0002dca4
   1783c:	0002dc75 	.word	0x0002dc75
   17840:	0002a669 	.word	0x0002a669
   17844:	0002dcbf 	.word	0x0002dcbf
   17848:	0002dcfa 	.word	0x0002dcfa

0001784c <smp_central_ident>:
{
   1784c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1784e:	460b      	mov	r3, r1
   17850:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   17852:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   17856:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17858:	210d      	movs	r1, #13
   1785a:	3004      	adds	r0, #4
   1785c:	f00e fedd 	bl	2661a <atomic_test_bit>
   17860:	b318      	cbz	r0, 178aa <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   17862:	f105 0790 	add.w	r7, r5, #144	; 0x90
   17866:	7a29      	ldrb	r1, [r5, #8]
   17868:	463a      	mov	r2, r7
   1786a:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   1786c:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1786e:	f000 fb9d 	bl	17fac <bt_keys_get_type>
		if (!keys) {
   17872:	4605      	mov	r5, r0
   17874:	b980      	cbnz	r0, 17898 <smp_central_ident+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   17876:	4638      	mov	r0, r7
   17878:	f7f8 fdd6 	bl	10428 <bt_addr_le_str>
   1787c:	4b17      	ldr	r3, [pc, #92]	; (178dc <smp_central_ident+0x90>)
   1787e:	9003      	str	r0, [sp, #12]
   17880:	e9cd 5301 	strd	r5, r3, [sp, #4]
   17884:	4628      	mov	r0, r5
   17886:	462b      	mov	r3, r5
   17888:	2201      	movs	r2, #1
   1788a:	4915      	ldr	r1, [pc, #84]	; (178e0 <smp_central_ident+0x94>)
   1788c:	9500      	str	r5, [sp, #0]
   1788e:	f00e ff1c 	bl	266ca <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   17892:	2008      	movs	r0, #8
}
   17894:	b005      	add	sp, #20
   17896:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17898:	4632      	mov	r2, r6
   1789a:	f832 3b02 	ldrh.w	r3, [r2], #2
   1789e:	8303      	strh	r3, [r0, #24]
   178a0:	f8d6 3002 	ldr.w	r3, [r6, #2]
   178a4:	6103      	str	r3, [r0, #16]
   178a6:	6853      	ldr	r3, [r2, #4]
   178a8:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   178aa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   178ae:	f023 0201 	bic.w	r2, r3, #1
   178b2:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   178b6:	079a      	lsls	r2, r3, #30
   178b8:	d508      	bpl.n	178cc <smp_central_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   178ba:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   178bc:	4620      	mov	r0, r4
   178be:	f00e ff13 	bl	266e8 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   178c2:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   178c6:	b129      	cbz	r1, 178d4 <smp_central_ident+0x88>
	return 0;
   178c8:	2000      	movs	r0, #0
   178ca:	e7e3      	b.n	17894 <smp_central_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   178cc:	075b      	lsls	r3, r3, #29
   178ce:	d5f8      	bpl.n	178c2 <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   178d0:	210a      	movs	r1, #10
   178d2:	e7f3      	b.n	178bc <smp_central_ident+0x70>
		smp_pairing_complete(smp, 0);
   178d4:	4620      	mov	r0, r4
   178d6:	f7ff fd3f 	bl	17358 <smp_pairing_complete>
   178da:	e7f5      	b.n	178c8 <smp_central_ident+0x7c>
   178dc:	0002da24 	.word	0x0002da24
   178e0:	00029704 	.word	0x00029704

000178e4 <smp_pairing_failed>:
{
   178e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   178e8:	460e      	mov	r6, r1
   178ea:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   178ec:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   178f0:	f7fe fdb0 	bl	16454 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   178f4:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   178f6:	4914      	ldr	r1, [pc, #80]	; (17948 <smp_pairing_failed+0x64>)
   178f8:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   178fa:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   178fc:	9303      	str	r3, [sp, #12]
   178fe:	4b13      	ldr	r3, [pc, #76]	; (1794c <smp_pairing_failed+0x68>)
   17900:	2201      	movs	r2, #1
   17902:	9302      	str	r3, [sp, #8]
   17904:	2300      	movs	r3, #0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   17906:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   17908:	4618      	mov	r0, r3
   1790a:	e9cd 3300 	strd	r3, r3, [sp]
   1790e:	f00e fedc 	bl	266ca <z_log_msg_runtime_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   17912:	210a      	movs	r1, #10
   17914:	4638      	mov	r0, r7
   17916:	f00e ff7e 	bl	26816 <atomic_test_and_clear_bit>
   1791a:	b140      	cbz	r0, 1792e <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1791c:	b975      	cbnz	r5, 1793c <smp_pairing_failed+0x58>
	smp_pairing_complete(smp, req->reason);
   1791e:	4620      	mov	r0, r4
   17920:	7831      	ldrb	r1, [r6, #0]
   17922:	f7ff fd19 	bl	17358 <smp_pairing_complete>
}
   17926:	2000      	movs	r0, #0
   17928:	b004      	add	sp, #16
   1792a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1792e:	210b      	movs	r1, #11
   17930:	4638      	mov	r0, r7
   17932:	f00e ff70 	bl	26816 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   17936:	2800      	cmp	r0, #0
   17938:	d1f0      	bne.n	1791c <smp_pairing_failed+0x38>
   1793a:	e7f0      	b.n	1791e <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1793c:	692b      	ldr	r3, [r5, #16]
   1793e:	2b00      	cmp	r3, #0
   17940:	d0ed      	beq.n	1791e <smp_pairing_failed+0x3a>
			smp_auth_cb->cancel(conn);
   17942:	4640      	mov	r0, r8
   17944:	4798      	blx	r3
   17946:	e7ea      	b.n	1791e <smp_pairing_failed+0x3a>
   17948:	00029704 	.word	0x00029704
   1794c:	0002dd19 	.word	0x0002dd19

00017950 <bt_smp_encrypt_change>:
{
   17950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   17954:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   17956:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1795a:	4604      	mov	r4, r0
   1795c:	460f      	mov	r7, r1
   1795e:	b08c      	sub	sp, #48	; 0x30
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   17960:	2101      	movs	r1, #1
   17962:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   17964:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   17968:	f00e ff55 	bl	26816 <atomic_test_and_clear_bit>
   1796c:	2800      	cmp	r0, #0
   1796e:	d068      	beq.n	17a42 <bt_smp_encrypt_change+0xf2>
	if (hci_status) {
   17970:	b1e7      	cbz	r7, 179ac <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   17972:	2103      	movs	r1, #3
   17974:	4630      	mov	r0, r6
   17976:	f00e fe50 	bl	2661a <atomic_test_bit>
   1797a:	2800      	cmp	r0, #0
   1797c:	d061      	beq.n	17a42 <bt_smp_encrypt_change+0xf2>
			uint8_t smp_err = smp_err_get(
   1797e:	4638      	mov	r0, r7
   17980:	f7f9 fcee 	bl	11360 <bt_security_err_get>
	switch (auth_err) {
   17984:	3801      	subs	r0, #1
   17986:	b2c0      	uxtb	r0, r0
   17988:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   1798a:	bf8c      	ite	hi
   1798c:	2400      	movhi	r4, #0
   1798e:	4b75      	ldrls	r3, [pc, #468]	; (17b64 <bt_smp_encrypt_change+0x214>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   17990:	f04f 0102 	mov.w	r1, #2
   17994:	bf98      	it	ls
   17996:	5c1c      	ldrbls	r4, [r3, r0]
   17998:	4630      	mov	r0, r6
   1799a:	f00e fea5 	bl	266e8 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1799e:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   179a0:	4628      	mov	r0, r5
}
   179a2:	b00c      	add	sp, #48	; 0x30
   179a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   179a8:	f7ff bcd6 	b.w	17358 <smp_pairing_complete>
	if (!conn->encrypt) {
   179ac:	f898 300b 	ldrb.w	r3, [r8, #11]
   179b0:	2b00      	cmp	r3, #0
   179b2:	d046      	beq.n	17a42 <bt_smp_encrypt_change+0xf2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   179b4:	2103      	movs	r1, #3
   179b6:	4630      	mov	r0, r6
   179b8:	f00e fe2f 	bl	2661a <atomic_test_bit>
   179bc:	b928      	cbnz	r0, 179ca <bt_smp_encrypt_change+0x7a>
		smp_reset(smp);
   179be:	4628      	mov	r0, r5
}
   179c0:	b00c      	add	sp, #48	; 0x30
   179c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   179c6:	f00e bf38 	b.w	2683a <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   179ca:	2105      	movs	r1, #5
   179cc:	4630      	mov	r0, r6
   179ce:	f00e fe24 	bl	2661a <atomic_test_bit>
   179d2:	b1b8      	cbz	r0, 17a04 <bt_smp_encrypt_change+0xb4>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   179d4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   179d8:	071b      	lsls	r3, r3, #28
   179da:	d507      	bpl.n	179ec <bt_smp_encrypt_change+0x9c>
   179dc:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   179e0:	071f      	lsls	r7, r3, #28
   179e2:	d503      	bpl.n	179ec <bt_smp_encrypt_change+0x9c>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   179e4:	2111      	movs	r1, #17
   179e6:	4630      	mov	r0, r6
   179e8:	f00e fe7e 	bl	266e8 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   179ec:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   179f0:	f023 0308 	bic.w	r3, r3, #8
   179f4:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   179f8:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   179fc:	f023 0308 	bic.w	r3, r3, #8
   17a00:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   17a04:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   17a08:	07d8      	lsls	r0, r3, #31
   17a0a:	d51d      	bpl.n	17a48 <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   17a0c:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   17a0e:	4628      	mov	r0, r5
   17a10:	f00e fe6a 	bl	266e8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   17a14:	2102      	movs	r1, #2
   17a16:	4630      	mov	r0, r6
   17a18:	f00e fe66 	bl	266e8 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   17a1c:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   17a1e:	f8d3 70c0 	ldr.w	r7, [r3, #192]	; 0xc0
   17a22:	b9cf      	cbnz	r7, 17a58 <bt_smp_encrypt_change+0x108>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   17a24:	f103 0090 	add.w	r0, r3, #144	; 0x90
   17a28:	f7f8 fcfe 	bl	10428 <bt_addr_le_str>
   17a2c:	4b4e      	ldr	r3, [pc, #312]	; (17b68 <bt_smp_encrypt_change+0x218>)
   17a2e:	9003      	str	r0, [sp, #12]
   17a30:	e9cd 7301 	strd	r7, r3, [sp, #4]
   17a34:	2201      	movs	r2, #1
   17a36:	463b      	mov	r3, r7
   17a38:	4638      	mov	r0, r7
   17a3a:	494c      	ldr	r1, [pc, #304]	; (17b6c <bt_smp_encrypt_change+0x21c>)
   17a3c:	9700      	str	r7, [sp, #0]
   17a3e:	f00e fe44 	bl	266ca <z_log_msg_runtime_create.constprop.0>
}
   17a42:	b00c      	add	sp, #48	; 0x30
   17a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   17a48:	0799      	lsls	r1, r3, #30
   17a4a:	d501      	bpl.n	17a50 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   17a4c:	2108      	movs	r1, #8
   17a4e:	e7de      	b.n	17a0e <bt_smp_encrypt_change+0xbe>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   17a50:	075a      	lsls	r2, r3, #29
   17a52:	d5df      	bpl.n	17a14 <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   17a54:	210a      	movs	r1, #10
   17a56:	e7da      	b.n	17a0e <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17a58:	2105      	movs	r1, #5
   17a5a:	f00e fdde 	bl	2661a <atomic_test_bit>
   17a5e:	4607      	mov	r7, r0
   17a60:	b9b0      	cbnz	r0, 17a90 <bt_smp_encrypt_change+0x140>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   17a62:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   17a66:	07db      	lsls	r3, r3, #31
   17a68:	d512      	bpl.n	17a90 <bt_smp_encrypt_change+0x140>
	struct bt_keys *keys = conn->le.keys;
   17a6a:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   17a6c:	211a      	movs	r1, #26
   17a6e:	a805      	add	r0, sp, #20
	struct bt_keys *keys = conn->le.keys;
   17a70:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   17a74:	f7fb f866 	bl	12b44 <bt_rand>
   17a78:	4681      	mov	r9, r0
   17a7a:	b170      	cbz	r0, 17a9a <bt_smp_encrypt_change+0x14a>
			LOG_ERR("Unable to get random bytes");
   17a7c:	4b3c      	ldr	r3, [pc, #240]	; (17b70 <bt_smp_encrypt_change+0x220>)
   17a7e:	2201      	movs	r2, #1
   17a80:	e9cd 7301 	strd	r7, r3, [sp, #4]
   17a84:	4638      	mov	r0, r7
   17a86:	463b      	mov	r3, r7
   17a88:	4938      	ldr	r1, [pc, #224]	; (17b6c <bt_smp_encrypt_change+0x21c>)
   17a8a:	9700      	str	r7, [sp, #0]
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   17a8c:	f00e fe1d 	bl	266ca <z_log_msg_runtime_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   17a90:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   17a94:	2900      	cmp	r1, #0
   17a96:	d1d4      	bne.n	17a42 <bt_smp_encrypt_change+0xf2>
   17a98:	e782      	b.n	179a0 <bt_smp_encrypt_change+0x50>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   17a9a:	2106      	movs	r1, #6
   17a9c:	4628      	mov	r0, r5
   17a9e:	f00e fe33 	bl	26708 <smp_create_pdu.constprop.0>
		if (!buf) {
   17aa2:	4607      	mov	r7, r0
   17aa4:	b938      	cbnz	r0, 17ab6 <bt_smp_encrypt_change+0x166>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   17aa6:	4b33      	ldr	r3, [pc, #204]	; (17b74 <bt_smp_encrypt_change+0x224>)
   17aa8:	e9cd 7301 	strd	r7, r3, [sp, #4]
   17aac:	2201      	movs	r2, #1
   17aae:	463b      	mov	r3, r7
   17ab0:	492e      	ldr	r1, [pc, #184]	; (17b6c <bt_smp_encrypt_change+0x21c>)
   17ab2:	9700      	str	r7, [sp, #0]
   17ab4:	e7ea      	b.n	17a8c <bt_smp_encrypt_change+0x13c>
	return net_buf_simple_add(&buf->b, len);
   17ab6:	2110      	movs	r1, #16
   17ab8:	300c      	adds	r0, #12
   17aba:	f000 fee9 	bl	18890 <net_buf_simple_add>
   17abe:	f898 200c 	ldrb.w	r2, [r8, #12]
   17ac2:	a905      	add	r1, sp, #20
   17ac4:	4682      	mov	sl, r0
   17ac6:	f010 fe7c 	bl	287c2 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   17aca:	f898 000c 	ldrb.w	r0, [r8, #12]
   17ace:	280f      	cmp	r0, #15
   17ad0:	d805      	bhi.n	17ade <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   17ad2:	f1c0 0210 	rsb	r2, r0, #16
   17ad6:	4649      	mov	r1, r9
   17ad8:	4450      	add	r0, sl
   17ada:	f010 fe99 	bl	28810 <memset>
		smp_send(smp, buf, NULL, NULL);
   17ade:	4639      	mov	r1, r7
   17ae0:	2200      	movs	r2, #0
   17ae2:	4628      	mov	r0, r5
   17ae4:	f00e fdd4 	bl	26690 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   17ae8:	2107      	movs	r1, #7
   17aea:	4628      	mov	r0, r5
   17aec:	f00e fe0c 	bl	26708 <smp_create_pdu.constprop.0>
		if (!buf) {
   17af0:	4607      	mov	r7, r0
   17af2:	b908      	cbnz	r0, 17af8 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   17af4:	4b20      	ldr	r3, [pc, #128]	; (17b78 <bt_smp_encrypt_change+0x228>)
   17af6:	e7d7      	b.n	17aa8 <bt_smp_encrypt_change+0x158>
   17af8:	210a      	movs	r1, #10
   17afa:	300c      	adds	r0, #12
   17afc:	f000 fec8 	bl	18890 <net_buf_simple_add>
   17b00:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17b02:	aa09      	add	r2, sp, #36	; 0x24
   17b04:	ca03      	ldmia	r2!, {r0, r1}
   17b06:	f8c3 0002 	str.w	r0, [r3, #2]
   17b0a:	f8c3 1006 	str.w	r1, [r3, #6]
   17b0e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		smp_send(smp, buf, smp_ident_sent, NULL);
   17b12:	4639      	mov	r1, r7
   17b14:	4628      	mov	r0, r5
   17b16:	801a      	strh	r2, [r3, #0]
   17b18:	4a18      	ldr	r2, [pc, #96]	; (17b7c <bt_smp_encrypt_change+0x22c>)
   17b1a:	f00e fdb9 	bl	26690 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17b1e:	4630      	mov	r0, r6
   17b20:	210d      	movs	r1, #13
   17b22:	f00e fd7a 	bl	2661a <atomic_test_bit>
   17b26:	ae09      	add	r6, sp, #36	; 0x24
   17b28:	2800      	cmp	r0, #0
   17b2a:	d0b1      	beq.n	17a90 <bt_smp_encrypt_change+0x140>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   17b2c:	2101      	movs	r1, #1
   17b2e:	4640      	mov	r0, r8
   17b30:	f000 fa24 	bl	17f7c <bt_keys_add_type>
   17b34:	f108 074a 	add.w	r7, r8, #74	; 0x4a
   17b38:	ab05      	add	r3, sp, #20
   17b3a:	461a      	mov	r2, r3
   17b3c:	ca03      	ldmia	r2!, {r0, r1}
   17b3e:	42b2      	cmp	r2, r6
   17b40:	6038      	str	r0, [r7, #0]
   17b42:	6079      	str	r1, [r7, #4]
   17b44:	4613      	mov	r3, r2
   17b46:	f107 0708 	add.w	r7, r7, #8
   17b4a:	d1f6      	bne.n	17b3a <bt_smp_encrypt_change+0x1ea>
   17b4c:	4633      	mov	r3, r6
   17b4e:	cb03      	ldmia	r3!, {r0, r1}
   17b50:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   17b54:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   17b58:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   17b5c:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   17b60:	e796      	b.n	17a90 <bt_smp_encrypt_change+0x140>
   17b62:	bf00      	nop
   17b64:	0002dde5 	.word	0x0002dde5
   17b68:	0002dd3b 	.word	0x0002dd3b
   17b6c:	00029704 	.word	0x00029704
   17b70:	0002dd50 	.word	0x0002dd50
   17b74:	0002dd6b 	.word	0x0002dd6b
   17b78:	0002dd92 	.word	0x0002dd92
   17b7c:	00017bbd 	.word	0x00017bbd

00017b80 <smp_timeout>:
{
   17b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("SMP Timeout");
   17b82:	4b0c      	ldr	r3, [pc, #48]	; (17bb4 <smp_timeout+0x34>)
{
   17b84:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   17b86:	9302      	str	r3, [sp, #8]
   17b88:	2300      	movs	r3, #0
   17b8a:	2201      	movs	r2, #1
   17b8c:	4618      	mov	r0, r3
   17b8e:	e9cd 3300 	strd	r3, r3, [sp]
   17b92:	4909      	ldr	r1, [pc, #36]	; (17bb8 <smp_timeout+0x38>)
   17b94:	f00e fd99 	bl	266ca <z_log_msg_runtime_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   17b98:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   17b9c:	2108      	movs	r1, #8
   17b9e:	f7ff fbdb 	bl	17358 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   17ba2:	2104      	movs	r1, #4
   17ba4:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   17ba8:	b004      	add	sp, #16
   17baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   17bae:	f00e bd9b 	b.w	266e8 <atomic_set_bit>
   17bb2:	bf00      	nop
   17bb4:	0002ddba 	.word	0x0002ddba
   17bb8:	00029704 	.word	0x00029704

00017bbc <smp_ident_sent>:
{
   17bbc:	b508      	push	{r3, lr}
	if (!err) {
   17bbe:	bb1a      	cbnz	r2, 17c08 <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   17bc0:	7883      	ldrb	r3, [r0, #2]
   17bc2:	2b01      	cmp	r3, #1
   17bc4:	d120      	bne.n	17c08 <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   17bc6:	2106      	movs	r1, #6
   17bc8:	f00d fe93 	bl	258f2 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   17bcc:	b970      	cbnz	r0, 17bec <smp_ident_sent+0x30>
   17bce:	490f      	ldr	r1, [pc, #60]	; (17c0c <smp_ident_sent+0x50>)
   17bd0:	f240 2365 	movw	r3, #613	; 0x265
   17bd4:	4a0e      	ldr	r2, [pc, #56]	; (17c10 <smp_ident_sent+0x54>)
   17bd6:	480f      	ldr	r0, [pc, #60]	; (17c14 <smp_ident_sent+0x58>)
   17bd8:	f00c fa23 	bl	24022 <assert_print>
   17bdc:	480e      	ldr	r0, [pc, #56]	; (17c18 <smp_ident_sent+0x5c>)
   17bde:	f00c fa20 	bl	24022 <assert_print>
   17be2:	f240 2165 	movw	r1, #613	; 0x265
   17be6:	480a      	ldr	r0, [pc, #40]	; (17c10 <smp_ident_sent+0x54>)
   17be8:	f00c fa14 	bl	24014 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   17bec:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   17bf0:	f023 0301 	bic.w	r3, r3, #1
   17bf4:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   17bf8:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   17bfc:	b921      	cbnz	r1, 17c08 <smp_ident_sent+0x4c>
}
   17bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   17c02:	38ec      	subs	r0, #236	; 0xec
   17c04:	f7ff bba8 	b.w	17358 <smp_pairing_complete>
}
   17c08:	bd08      	pop	{r3, pc}
   17c0a:	bf00      	nop
   17c0c:	0002d531 	.word	0x0002d531
   17c10:	0002dc75 	.word	0x0002dc75
   17c14:	0002a669 	.word	0x0002a669
   17c18:	0002ddc6 	.word	0x0002ddc6

00017c1c <bt_smp_update_keys>:
{
   17c1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17c20:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   17c22:	f7fe fc95 	bl	16550 <smp_chan_get>
	if (!smp) {
   17c26:	4605      	mov	r5, r0
   17c28:	2800      	cmp	r0, #0
   17c2a:	d074      	beq.n	17d16 <bt_smp_update_keys+0xfa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   17c2c:	1d07      	adds	r7, r0, #4
   17c2e:	2103      	movs	r1, #3
   17c30:	4638      	mov	r0, r7
   17c32:	f00e fcf2 	bl	2661a <atomic_test_bit>
   17c36:	2800      	cmp	r0, #0
   17c38:	d06d      	beq.n	17d16 <bt_smp_update_keys+0xfa>
	if (conn->le.keys) {
   17c3a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   17c3e:	b108      	cbz	r0, 17c44 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   17c40:	f000 f9d8 	bl	17ff4 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   17c44:	f104 0890 	add.w	r8, r4, #144	; 0x90
   17c48:	4641      	mov	r1, r8
   17c4a:	7a20      	ldrb	r0, [r4, #8]
   17c4c:	f000 f894 	bl	17d78 <bt_keys_get_addr>
   17c50:	4606      	mov	r6, r0
   17c52:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   17c56:	b9a0      	cbnz	r0, 17c82 <bt_smp_update_keys+0x66>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   17c58:	4640      	mov	r0, r8
   17c5a:	f7f8 fbe5 	bl	10428 <bt_addr_le_str>
   17c5e:	4b39      	ldr	r3, [pc, #228]	; (17d44 <bt_smp_update_keys+0x128>)
   17c60:	9003      	str	r0, [sp, #12]
   17c62:	e9cd 6301 	strd	r6, r3, [sp, #4]
   17c66:	4630      	mov	r0, r6
   17c68:	4633      	mov	r3, r6
   17c6a:	2201      	movs	r2, #1
   17c6c:	4936      	ldr	r1, [pc, #216]	; (17d48 <bt_smp_update_keys+0x12c>)
   17c6e:	9600      	str	r6, [sp, #0]
   17c70:	f00e fd2b 	bl	266ca <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   17c74:	2108      	movs	r1, #8
   17c76:	4628      	mov	r0, r5
}
   17c78:	b004      	add	sp, #16
   17c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   17c7e:	f7ff bbe9 	b.w	17454 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   17c82:	210e      	movs	r1, #14
   17c84:	4638      	mov	r0, r7
   17c86:	f00e fcc8 	bl	2661a <atomic_test_bit>
   17c8a:	b128      	cbz	r0, 17c98 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   17c8c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   17c90:	7b53      	ldrb	r3, [r2, #13]
   17c92:	f043 0302 	orr.w	r3, r3, #2
   17c96:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   17c98:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   17c9a:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   17c9e:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   17ca0:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   17ca2:	d83b      	bhi.n	17d1c <bt_smp_update_keys+0x100>
   17ca4:	2a00      	cmp	r2, #0
   17ca6:	d040      	beq.n	17d2a <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   17ca8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   17cac:	7b53      	ldrb	r3, [r2, #13]
   17cae:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   17cb2:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   17cb4:	7d2b      	ldrb	r3, [r5, #20]
   17cb6:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   17cb8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   17cbc:	428b      	cmp	r3, r1
   17cbe:	bf28      	it	cs
   17cc0:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17cc2:	4638      	mov	r0, r7
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   17cc4:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17cc6:	2105      	movs	r1, #5
   17cc8:	f00e fca7 	bl	2661a <atomic_test_bit>
   17ccc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   17cd0:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   17cd2:	b398      	cbz	r0, 17d3c <bt_smp_update_keys+0x120>
		conn->le.keys->flags |= BT_KEYS_SC;
   17cd4:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17cd8:	210d      	movs	r1, #13
   17cda:	4638      	mov	r0, r7
		conn->le.keys->flags |= BT_KEYS_SC;
   17cdc:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   17cde:	f00e fc9c 	bl	2661a <atomic_test_bit>
   17ce2:	b1c0      	cbz	r0, 17d16 <bt_smp_update_keys+0xfa>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   17ce4:	2120      	movs	r1, #32
   17ce6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   17cea:	f000 f947 	bl	17f7c <bt_keys_add_type>
   17cee:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17cf2:	f105 0247 	add.w	r2, r5, #71	; 0x47
   17cf6:	331a      	adds	r3, #26
   17cf8:	3557      	adds	r5, #87	; 0x57
   17cfa:	f852 1b04 	ldr.w	r1, [r2], #4
   17cfe:	42aa      	cmp	r2, r5
   17d00:	f843 1b04 	str.w	r1, [r3], #4
   17d04:	d1f9      	bne.n	17cfa <bt_smp_update_keys+0xde>
__ssp_bos_icheck3(memset, void *, int)
   17d06:	2300      	movs	r3, #0
   17d08:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   17d0c:	6113      	str	r3, [r2, #16]
   17d0e:	6153      	str	r3, [r2, #20]
   17d10:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   17d14:	8313      	strh	r3, [r2, #24]
}
   17d16:	b004      	add	sp, #16
   17d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   17d1c:	3a05      	subs	r2, #5
   17d1e:	2a01      	cmp	r2, #1
   17d20:	d803      	bhi.n	17d2a <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   17d22:	f043 0320 	orr.w	r3, r3, #32
   17d26:	734b      	strb	r3, [r1, #13]
   17d28:	e7be      	b.n	17ca8 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   17d2a:	f023 0320 	bic.w	r3, r3, #32
   17d2e:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   17d30:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   17d34:	7b53      	ldrb	r3, [r2, #13]
   17d36:	f023 0301 	bic.w	r3, r3, #1
   17d3a:	e7ba      	b.n	17cb2 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   17d3c:	f022 0210 	bic.w	r2, r2, #16
   17d40:	735a      	strb	r2, [r3, #13]
   17d42:	e7e8      	b.n	17d16 <bt_smp_update_keys+0xfa>
   17d44:	0002da24 	.word	0x0002da24
   17d48:	00029704 	.word	0x00029704

00017d4c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   17d4c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   17d4e:	4b07      	ldr	r3, [pc, #28]	; (17d6c <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   17d50:	4807      	ldr	r0, [pc, #28]	; (17d70 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   17d52:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   17d56:	f003 0306 	and.w	r3, r3, #6
   17d5a:	1f9a      	subs	r2, r3, #6
   17d5c:	4253      	negs	r3, r2
   17d5e:	4153      	adcs	r3, r2
   17d60:	4a04      	ldr	r2, [pc, #16]	; (17d74 <bt_smp_init+0x28>)
   17d62:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   17d64:	f7fa ff18 	bl	12b98 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   17d68:	2000      	movs	r0, #0
   17d6a:	bd08      	pop	{r3, pc}
   17d6c:	20008000 	.word	0x20008000
   17d70:	20008548 	.word	0x20008548
   17d74:	20021d83 	.word	0x20021d83

00017d78 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   17d78:	b570      	push	{r4, r5, r6, lr}
   17d7a:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	__ASSERT_NO_MSG(addr != NULL);
   17d7c:	460d      	mov	r5, r1
   17d7e:	b959      	cbnz	r1, 17d98 <bt_keys_get_addr+0x20>
   17d80:	4913      	ldr	r1, [pc, #76]	; (17dd0 <bt_keys_get_addr+0x58>)
   17d82:	4814      	ldr	r0, [pc, #80]	; (17dd4 <bt_keys_get_addr+0x5c>)
   17d84:	2359      	movs	r3, #89	; 0x59
   17d86:	4a14      	ldr	r2, [pc, #80]	; (17dd8 <bt_keys_get_addr+0x60>)
   17d88:	f00c f94b 	bl	24022 <assert_print>
   17d8c:	2159      	movs	r1, #89	; 0x59
   17d8e:	4812      	ldr	r0, [pc, #72]	; (17dd8 <bt_keys_get_addr+0x60>)
   17d90:	f00c f940 	bl	24014 <assert_post_action>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   17d94:	2000      	movs	r0, #0
   17d96:	e019      	b.n	17dcc <bt_keys_get_addr+0x54>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   17d98:	4c10      	ldr	r4, [pc, #64]	; (17ddc <bt_keys_get_addr+0x64>)
   17d9a:	f814 3b01 	ldrb.w	r3, [r4], #1
   17d9e:	4283      	cmp	r3, r0
   17da0:	d104      	bne.n	17dac <bt_keys_get_addr+0x34>
	return memcmp(a, b, sizeof(*a));
   17da2:	2207      	movs	r2, #7
   17da4:	4620      	mov	r0, r4
   17da6:	f010 fcfc 	bl	287a2 <memcmp>
   17daa:	b170      	cbz	r0, 17dca <bt_keys_get_addr+0x52>
   17dac:	2207      	movs	r2, #7
   17dae:	490c      	ldr	r1, [pc, #48]	; (17de0 <bt_keys_get_addr+0x68>)
   17db0:	480c      	ldr	r0, [pc, #48]	; (17de4 <bt_keys_get_addr+0x6c>)
   17db2:	f010 fcf6 	bl	287a2 <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   17db6:	2800      	cmp	r0, #0
   17db8:	d1ec      	bne.n	17d94 <bt_keys_get_addr+0x1c>
		keys->id = id;
   17dba:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   17dbe:	682b      	ldr	r3, [r5, #0]
   17dc0:	6023      	str	r3, [r4, #0]
   17dc2:	88ab      	ldrh	r3, [r5, #4]
   17dc4:	80a3      	strh	r3, [r4, #4]
   17dc6:	79ab      	ldrb	r3, [r5, #6]
   17dc8:	71a3      	strb	r3, [r4, #6]
		keys = &key_pool[i];
   17dca:	4804      	ldr	r0, [pc, #16]	; (17ddc <bt_keys_get_addr+0x64>)
}
   17dcc:	bd70      	pop	{r4, r5, r6, pc}
   17dce:	bf00      	nop
   17dd0:	0002de66 	.word	0x0002de66
   17dd4:	0002a669 	.word	0x0002a669
   17dd8:	0002de36 	.word	0x0002de36
   17ddc:	200210d8 	.word	0x200210d8
   17de0:	0002c2a3 	.word	0x0002c2a3
   17de4:	200210d9 	.word	0x200210d9

00017de8 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   17de8:	460b      	mov	r3, r1
   17dea:	b510      	push	{r4, lr}
   17dec:	4611      	mov	r1, r2
   17dee:	4604      	mov	r4, r0
	int i;

	__ASSERT_NO_MSG(func != NULL);
   17df0:	b963      	cbnz	r3, 17e0c <bt_keys_foreach_type+0x24>
   17df2:	4909      	ldr	r1, [pc, #36]	; (17e18 <bt_keys_foreach_type+0x30>)
   17df4:	4809      	ldr	r0, [pc, #36]	; (17e1c <bt_keys_foreach_type+0x34>)
   17df6:	23b3      	movs	r3, #179	; 0xb3
   17df8:	4a09      	ldr	r2, [pc, #36]	; (17e20 <bt_keys_foreach_type+0x38>)
   17dfa:	f00c f912 	bl	24022 <assert_print>
   17dfe:	21b3      	movs	r1, #179	; 0xb3
   17e00:	4807      	ldr	r0, [pc, #28]	; (17e20 <bt_keys_foreach_type+0x38>)
   17e02:	f00c f907 	bl	24014 <assert_post_action>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
   17e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   17e0a:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   17e0c:	4805      	ldr	r0, [pc, #20]	; (17e24 <bt_keys_foreach_type+0x3c>)
   17e0e:	89c2      	ldrh	r2, [r0, #14]
   17e10:	4222      	tst	r2, r4
   17e12:	d1f8      	bne.n	17e06 <bt_keys_foreach_type+0x1e>
}
   17e14:	bd10      	pop	{r4, pc}
   17e16:	bf00      	nop
   17e18:	0002de7a 	.word	0x0002de7a
   17e1c:	0002a669 	.word	0x0002a669
   17e20:	0002de36 	.word	0x0002de36
   17e24:	200210d8 	.word	0x200210d8

00017e28 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   17e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e2a:	4605      	mov	r5, r0
   17e2c:	460e      	mov	r6, r1
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   17e2e:	4614      	mov	r4, r2
   17e30:	b9aa      	cbnz	r2, 17e5e <bt_keys_find+0x36>
   17e32:	490f      	ldr	r1, [pc, #60]	; (17e70 <bt_keys_find+0x48>)
   17e34:	480f      	ldr	r0, [pc, #60]	; (17e74 <bt_keys_find+0x4c>)
   17e36:	23c0      	movs	r3, #192	; 0xc0
   17e38:	4a0f      	ldr	r2, [pc, #60]	; (17e78 <bt_keys_find+0x50>)
   17e3a:	f00c f8f2 	bl	24022 <assert_print>
   17e3e:	21c0      	movs	r1, #192	; 0xc0
   17e40:	480d      	ldr	r0, [pc, #52]	; (17e78 <bt_keys_find+0x50>)
   17e42:	f00c f8e7 	bl	24014 <assert_post_action>

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   17e46:	b18a      	cbz	r2, 17e6c <bt_keys_find+0x44>
   17e48:	42b1      	cmp	r1, r6
   17e4a:	d10f      	bne.n	17e6c <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   17e4c:	2207      	movs	r2, #7
   17e4e:	4621      	mov	r1, r4
   17e50:	480a      	ldr	r0, [pc, #40]	; (17e7c <bt_keys_find+0x54>)
   17e52:	f010 fca6 	bl	287a2 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17e56:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   17e58:	b918      	cbnz	r0, 17e62 <bt_keys_find+0x3a>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
   17e5a:	4809      	ldr	r0, [pc, #36]	; (17e80 <bt_keys_find+0x58>)
   17e5c:	e007      	b.n	17e6e <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17e5e:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   17e60:	4f07      	ldr	r7, [pc, #28]	; (17e80 <bt_keys_find+0x58>)
   17e62:	89fa      	ldrh	r2, [r7, #14]
   17e64:	7839      	ldrb	r1, [r7, #0]
   17e66:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17e68:	2b00      	cmp	r3, #0
   17e6a:	d0ec      	beq.n	17e46 <bt_keys_find+0x1e>
		}
	}

	return NULL;
   17e6c:	2000      	movs	r0, #0
}
   17e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17e70:	0002de66 	.word	0x0002de66
   17e74:	0002a669 	.word	0x0002a669
   17e78:	0002de36 	.word	0x0002de36
   17e7c:	200210d9 	.word	0x200210d9
   17e80:	200210d8 	.word	0x200210d8

00017e84 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   17e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e86:	4606      	mov	r6, r0
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   17e88:	460c      	mov	r4, r1
   17e8a:	b949      	cbnz	r1, 17ea0 <bt_keys_find_irk+0x1c>
   17e8c:	4923      	ldr	r1, [pc, #140]	; (17f1c <bt_keys_find_irk+0x98>)
   17e8e:	4824      	ldr	r0, [pc, #144]	; (17f20 <bt_keys_find_irk+0x9c>)
   17e90:	23e9      	movs	r3, #233	; 0xe9
   17e92:	4a24      	ldr	r2, [pc, #144]	; (17f24 <bt_keys_find_irk+0xa0>)
   17e94:	f00c f8c5 	bl	24022 <assert_print>
   17e98:	21e9      	movs	r1, #233	; 0xe9
   17e9a:	4822      	ldr	r0, [pc, #136]	; (17f24 <bt_keys_find_irk+0xa0>)
   17e9c:	f00c f8ba 	bl	24014 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   17ea0:	780b      	ldrb	r3, [r1, #0]
   17ea2:	2b01      	cmp	r3, #1
   17ea4:	d001      	beq.n	17eaa <bt_keys_find_irk+0x26>

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   17ea6:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   17ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   17eaa:	798b      	ldrb	r3, [r1, #6]
   17eac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17eb0:	2b40      	cmp	r3, #64	; 0x40
   17eb2:	d1f8      	bne.n	17ea6 <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17eb4:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   17eb6:	4d1c      	ldr	r5, [pc, #112]	; (17f28 <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   17eb8:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   17ebc:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   17ebe:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17ec0:	f002 0202 	and.w	r2, r2, #2
   17ec4:	b1db      	cbz	r3, 17efe <bt_keys_find_irk+0x7a>
   17ec6:	2300      	movs	r3, #0
   17ec8:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   17eca:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17ecc:	f002 0202 	and.w	r2, r2, #2
   17ed0:	2b00      	cmp	r3, #0
   17ed2:	d1e8      	bne.n	17ea6 <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   17ed4:	2a00      	cmp	r2, #0
   17ed6:	d0e6      	beq.n	17ea6 <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   17ed8:	42b1      	cmp	r1, r6
   17eda:	d1e4      	bne.n	17ea6 <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   17edc:	1c67      	adds	r7, r4, #1
   17ede:	4639      	mov	r1, r7
   17ee0:	4812      	ldr	r0, [pc, #72]	; (17f2c <bt_keys_find_irk+0xa8>)
   17ee2:	f00c fff4 	bl	24ece <bt_rpa_irk_matches>
   17ee6:	2301      	movs	r3, #1
   17ee8:	2800      	cmp	r0, #0
   17eea:	d0ed      	beq.n	17ec8 <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   17eec:	f8d4 3001 	ldr.w	r3, [r4, #1]
   17ef0:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   17ef4:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   17ef8:	4b0d      	ldr	r3, [pc, #52]	; (17f30 <bt_keys_find_irk+0xac>)
   17efa:	809a      	strh	r2, [r3, #4]
}
   17efc:	e00b      	b.n	17f16 <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   17efe:	2a00      	cmp	r2, #0
   17f00:	d0e2      	beq.n	17ec8 <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   17f02:	42b0      	cmp	r0, r6
   17f04:	d1e0      	bne.n	17ec8 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   17f06:	2206      	movs	r2, #6
   17f08:	4639      	mov	r1, r7
   17f0a:	1c60      	adds	r0, r4, #1
   17f0c:	f010 fc49 	bl	287a2 <memcmp>
   17f10:	2301      	movs	r3, #1
   17f12:	2800      	cmp	r0, #0
   17f14:	d1d2      	bne.n	17ebc <bt_keys_find_irk+0x38>
			return &key_pool[i];
   17f16:	4804      	ldr	r0, [pc, #16]	; (17f28 <bt_keys_find_irk+0xa4>)
   17f18:	e7c6      	b.n	17ea8 <bt_keys_find_irk+0x24>
   17f1a:	bf00      	nop
   17f1c:	0002de66 	.word	0x0002de66
   17f20:	0002a669 	.word	0x0002a669
   17f24:	0002de36 	.word	0x0002de36
   17f28:	200210d8 	.word	0x200210d8
   17f2c:	20021102 	.word	0x20021102
   17f30:	20021112 	.word	0x20021112

00017f34 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   17f34:	b510      	push	{r4, lr}
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   17f36:	b959      	cbnz	r1, 17f50 <bt_keys_find_addr+0x1c>
   17f38:	490c      	ldr	r1, [pc, #48]	; (17f6c <bt_keys_find_addr+0x38>)
   17f3a:	480d      	ldr	r0, [pc, #52]	; (17f70 <bt_keys_find_addr+0x3c>)
   17f3c:	f44f 738d 	mov.w	r3, #282	; 0x11a
   17f40:	4a0c      	ldr	r2, [pc, #48]	; (17f74 <bt_keys_find_addr+0x40>)
   17f42:	f00c f86e 	bl	24022 <assert_print>
   17f46:	f44f 718d 	mov.w	r1, #282	; 0x11a
   17f4a:	480a      	ldr	r0, [pc, #40]	; (17f74 <bt_keys_find_addr+0x40>)
   17f4c:	f00c f862 	bl	24014 <assert_post_action>

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   17f50:	4c09      	ldr	r4, [pc, #36]	; (17f78 <bt_keys_find_addr+0x44>)
   17f52:	7823      	ldrb	r3, [r4, #0]
   17f54:	4283      	cmp	r3, r0
   17f56:	d104      	bne.n	17f62 <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   17f58:	2207      	movs	r2, #7
   17f5a:	1c60      	adds	r0, r4, #1
   17f5c:	f010 fc21 	bl	287a2 <memcmp>
   17f60:	b108      	cbz	r0, 17f66 <bt_keys_find_addr+0x32>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   17f62:	2000      	movs	r0, #0
}
   17f64:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   17f66:	4620      	mov	r0, r4
   17f68:	e7fc      	b.n	17f64 <bt_keys_find_addr+0x30>
   17f6a:	bf00      	nop
   17f6c:	0002de66 	.word	0x0002de66
   17f70:	0002a669 	.word	0x0002a669
   17f74:	0002de36 	.word	0x0002de36
   17f78:	200210d8 	.word	0x200210d8

00017f7c <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
   17f7c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   17f7e:	b958      	cbnz	r0, 17f98 <bt_keys_add_type+0x1c>
   17f80:	4907      	ldr	r1, [pc, #28]	; (17fa0 <bt_keys_add_type+0x24>)
   17f82:	4808      	ldr	r0, [pc, #32]	; (17fa4 <bt_keys_add_type+0x28>)
   17f84:	f44f 7395 	mov.w	r3, #298	; 0x12a
   17f88:	4a07      	ldr	r2, [pc, #28]	; (17fa8 <bt_keys_add_type+0x2c>)
   17f8a:	f00c f84a 	bl	24022 <assert_print>
   17f8e:	f44f 7195 	mov.w	r1, #298	; 0x12a
   17f92:	4805      	ldr	r0, [pc, #20]	; (17fa8 <bt_keys_add_type+0x2c>)
   17f94:	f00c f83e 	bl	24014 <assert_post_action>

	keys->keys |= type;
   17f98:	89c3      	ldrh	r3, [r0, #14]
   17f9a:	4319      	orrs	r1, r3
   17f9c:	81c1      	strh	r1, [r0, #14]
}
   17f9e:	bd08      	pop	{r3, pc}
   17fa0:	0002de8e 	.word	0x0002de8e
   17fa4:	0002a669 	.word	0x0002a669
   17fa8:	0002de36 	.word	0x0002de36

00017fac <bt_keys_get_type>:
{
   17fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17fae:	4606      	mov	r6, r0
   17fb0:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   17fb2:	4615      	mov	r5, r2
   17fb4:	b94a      	cbnz	r2, 17fca <bt_keys_get_type+0x1e>
   17fb6:	490c      	ldr	r1, [pc, #48]	; (17fe8 <bt_keys_get_type+0x3c>)
   17fb8:	480c      	ldr	r0, [pc, #48]	; (17fec <bt_keys_get_type+0x40>)
   17fba:	23d2      	movs	r3, #210	; 0xd2
   17fbc:	4a0c      	ldr	r2, [pc, #48]	; (17ff0 <bt_keys_get_type+0x44>)
   17fbe:	f00c f830 	bl	24022 <assert_print>
   17fc2:	21d2      	movs	r1, #210	; 0xd2
   17fc4:	480a      	ldr	r0, [pc, #40]	; (17ff0 <bt_keys_get_type+0x44>)
   17fc6:	f00c f825 	bl	24014 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   17fca:	f7ff ff2d 	bl	17e28 <bt_keys_find>
	if (keys) {
   17fce:	4604      	mov	r4, r0
   17fd0:	b940      	cbnz	r0, 17fe4 <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   17fd2:	4629      	mov	r1, r5
   17fd4:	4638      	mov	r0, r7
   17fd6:	f7ff fecf 	bl	17d78 <bt_keys_get_addr>
	if (!keys) {
   17fda:	4604      	mov	r4, r0
   17fdc:	b110      	cbz	r0, 17fe4 <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   17fde:	4631      	mov	r1, r6
   17fe0:	f7ff ffcc 	bl	17f7c <bt_keys_add_type>
}
   17fe4:	4620      	mov	r0, r4
   17fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17fe8:	0002de66 	.word	0x0002de66
   17fec:	0002a669 	.word	0x0002a669
   17ff0:	0002de36 	.word	0x0002de36

00017ff4 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   17ff4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);
   17ff6:	4604      	mov	r4, r0
   17ff8:	b958      	cbnz	r0, 18012 <bt_keys_clear+0x1e>
   17ffa:	490c      	ldr	r1, [pc, #48]	; (1802c <bt_keys_clear+0x38>)
   17ffc:	480c      	ldr	r0, [pc, #48]	; (18030 <bt_keys_clear+0x3c>)
   17ffe:	f240 1331 	movw	r3, #305	; 0x131
   18002:	4a0c      	ldr	r2, [pc, #48]	; (18034 <bt_keys_clear+0x40>)
   18004:	f00c f80d 	bl	24022 <assert_print>
   18008:	f240 1131 	movw	r1, #305	; 0x131
   1800c:	4809      	ldr	r0, [pc, #36]	; (18034 <bt_keys_clear+0x40>)
   1800e:	f00c f801 	bl	24014 <assert_post_action>

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   18012:	7a03      	ldrb	r3, [r0, #8]
   18014:	075b      	lsls	r3, r3, #29
   18016:	d501      	bpl.n	1801c <bt_keys_clear+0x28>
		bt_id_del(keys);
   18018:	f7f9 ffb0 	bl	11f7c <bt_id_del>
   1801c:	4620      	mov	r0, r4
		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   1801e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18022:	225c      	movs	r2, #92	; 0x5c
   18024:	2100      	movs	r1, #0
   18026:	f010 bbf3 	b.w	28810 <memset>
   1802a:	bf00      	nop
   1802c:	0002de8e 	.word	0x0002de8e
   18030:	0002a669 	.word	0x0002a669
   18034:	0002de36 	.word	0x0002de36

00018038 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   18038:	4288      	cmp	r0, r1
{
   1803a:	b510      	push	{r4, lr}
   1803c:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   18040:	d911      	bls.n	18066 <sys_memcpy_swap+0x2e>
   18042:	188c      	adds	r4, r1, r2
   18044:	42a0      	cmp	r0, r4
   18046:	d211      	bcs.n	1806c <sys_memcpy_swap+0x34>
   18048:	490d      	ldr	r1, [pc, #52]	; (18080 <sys_memcpy_swap+0x48>)
   1804a:	f240 2315 	movw	r3, #533	; 0x215
   1804e:	4a0d      	ldr	r2, [pc, #52]	; (18084 <sys_memcpy_swap+0x4c>)
   18050:	480d      	ldr	r0, [pc, #52]	; (18088 <sys_memcpy_swap+0x50>)
   18052:	f00b ffe6 	bl	24022 <assert_print>
   18056:	480d      	ldr	r0, [pc, #52]	; (1808c <sys_memcpy_swap+0x54>)
   18058:	f00b ffe3 	bl	24022 <assert_print>
   1805c:	f240 2115 	movw	r1, #533	; 0x215
   18060:	4808      	ldr	r0, [pc, #32]	; (18084 <sys_memcpy_swap+0x4c>)
   18062:	f00b ffd7 	bl	24014 <assert_post_action>
   18066:	d0ef      	beq.n	18048 <sys_memcpy_swap+0x10>
   18068:	4299      	cmp	r1, r3
   1806a:	e7ec      	b.n	18046 <sys_memcpy_swap+0xe>
	psrc += length - 1;
   1806c:	3a01      	subs	r2, #1
   1806e:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   18070:	f811 2901 	ldrb.w	r2, [r1], #-1
   18074:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   18078:	4283      	cmp	r3, r0
   1807a:	d1f9      	bne.n	18070 <sys_memcpy_swap+0x38>
}
   1807c:	bd10      	pop	{r4, pc}
   1807e:	bf00      	nop
   18080:	0002cd5e 	.word	0x0002cd5e
   18084:	0002cd2c 	.word	0x0002cd2c
   18088:	0002a669 	.word	0x0002a669
   1808c:	0002cdb5 	.word	0x0002cdb5

00018090 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   18090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18094:	b09a      	sub	sp, #104	; 0x68
   18096:	4616      	mov	r6, r2
   18098:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1809c:	aa0c      	add	r2, sp, #48	; 0x30
{
   1809e:	4684      	mov	ip, r0
   180a0:	468a      	mov	sl, r1
   180a2:	4690      	mov	r8, r2
   180a4:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   180a6:	4b2c      	ldr	r3, [pc, #176]	; (18158 <bt_crypto_f5+0xc8>)
   180a8:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   180ac:	4614      	mov	r4, r2
   180ae:	6818      	ldr	r0, [r3, #0]
   180b0:	6859      	ldr	r1, [r3, #4]
   180b2:	3308      	adds	r3, #8
   180b4:	c403      	stmia	r4!, {r0, r1}
   180b6:	4573      	cmp	r3, lr
   180b8:	4622      	mov	r2, r4
   180ba:	d1f7      	bne.n	180ac <bt_crypto_f5+0x1c>
   180bc:	6818      	ldr	r0, [r3, #0]
   180be:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   180c0:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   180c2:	6020      	str	r0, [r4, #0]
   180c4:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   180c6:	2220      	movs	r2, #32
   180c8:	a804      	add	r0, sp, #16
   180ca:	f7ff ffb5 	bl	18038 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   180ce:	466b      	mov	r3, sp
   180d0:	2220      	movs	r2, #32
   180d2:	4822      	ldr	r0, [pc, #136]	; (1815c <bt_crypto_f5+0xcc>)
   180d4:	a904      	add	r1, sp, #16
   180d6:	f00e fd7b 	bl	26bd0 <bt_crypto_aes_cmac>
	if (err) {
   180da:	4604      	mov	r4, r0
   180dc:	bbc0      	cbnz	r0, 18150 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   180de:	2210      	movs	r2, #16
   180e0:	4651      	mov	r1, sl
   180e2:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   180e6:	f7ff ffa7 	bl	18038 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   180ea:	2210      	movs	r2, #16
   180ec:	4631      	mov	r1, r6
   180ee:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   180f2:	f7ff ffa1 	bl	18038 <sys_memcpy_swap>
	m[37] = a1->type;
   180f6:	4629      	mov	r1, r5
   180f8:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   180fc:	2206      	movs	r2, #6
   180fe:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   18102:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   18106:	f7ff ff97 	bl	18038 <sys_memcpy_swap>
	m[44] = a2->type;
   1810a:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1810c:	2206      	movs	r2, #6
	m[44] = a2->type;
   1810e:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18112:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   18116:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1811a:	f7ff ff8d 	bl	18038 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1811e:	464b      	mov	r3, r9
   18120:	2235      	movs	r2, #53	; 0x35
   18122:	4641      	mov	r1, r8
   18124:	4668      	mov	r0, sp
   18126:	f00e fd53 	bl	26bd0 <bt_crypto_aes_cmac>
	if (err) {
   1812a:	4604      	mov	r4, r0
   1812c:	b980      	cbnz	r0, 18150 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1812e:	4648      	mov	r0, r9
   18130:	f00e fd40 	bl	26bb4 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   18134:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   18136:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   18138:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1813c:	4641      	mov	r1, r8
   1813e:	463b      	mov	r3, r7
   18140:	4668      	mov	r0, sp
   18142:	f00e fd45 	bl	26bd0 <bt_crypto_aes_cmac>
	if (err) {
   18146:	4604      	mov	r4, r0
   18148:	b910      	cbnz	r0, 18150 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1814a:	4638      	mov	r0, r7
   1814c:	f00e fd32 	bl	26bb4 <sys_mem_swap.constprop.0>

	return 0;
}
   18150:	4620      	mov	r0, r4
   18152:	b01a      	add	sp, #104	; 0x68
   18154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18158:	0002984c 	.word	0x0002984c
   1815c:	0002deaa 	.word	0x0002deaa

00018160 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   18160:	b570      	push	{r4, r5, r6, lr}
   18162:	460e      	mov	r6, r1
   18164:	461d      	mov	r5, r3
   18166:	4614      	mov	r4, r2
   18168:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1816a:	4601      	mov	r1, r0
   1816c:	2220      	movs	r2, #32
   1816e:	a804      	add	r0, sp, #16
   18170:	f7ff ff62 	bl	18038 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   18174:	2220      	movs	r2, #32
   18176:	4631      	mov	r1, r6
   18178:	a80c      	add	r0, sp, #48	; 0x30
   1817a:	f7ff ff5d 	bl	18038 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1817e:	2210      	movs	r2, #16
   18180:	4629      	mov	r1, r5
   18182:	a814      	add	r0, sp, #80	; 0x50
   18184:	f7ff ff58 	bl	18038 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   18188:	2210      	movs	r2, #16
   1818a:	4621      	mov	r1, r4
   1818c:	4668      	mov	r0, sp
   1818e:	f7ff ff53 	bl	18038 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   18192:	466b      	mov	r3, sp
   18194:	2250      	movs	r2, #80	; 0x50
   18196:	4618      	mov	r0, r3
   18198:	a904      	add	r1, sp, #16
   1819a:	f00e fd19 	bl	26bd0 <bt_crypto_aes_cmac>
	if (err) {
   1819e:	b940      	cbnz	r0, 181b2 <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   181a0:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   181a2:	4a05      	ldr	r2, [pc, #20]	; (181b8 <bt_crypto_g2+0x58>)
   181a4:	ba1b      	rev	r3, r3
   181a6:	fbb3 f1f2 	udiv	r1, r3, r2
   181aa:	fb02 3311 	mls	r3, r2, r1, r3
   181ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   181b0:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   181b2:	b018      	add	sp, #96	; 0x60
   181b4:	bd70      	pop	{r4, r5, r6, pc}
   181b6:	bf00      	nop
   181b8:	000f4240 	.word	0x000f4240

000181bc <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   181bc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   181be:	4804      	ldr	r0, [pc, #16]	; (181d0 <fs_init+0x14>)
   181c0:	f010 f916 	bl	283f0 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   181c4:	4b03      	ldr	r3, [pc, #12]	; (181d4 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   181c6:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   181c8:	e9c3 3300 	strd	r3, r3, [r3]
   181cc:	bd08      	pop	{r3, pc}
   181ce:	bf00      	nop
   181d0:	20021134 	.word	0x20021134
   181d4:	20021148 	.word	0x20021148

000181d8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   181d8:	2234      	movs	r2, #52	; 0x34
   181da:	4b02      	ldr	r3, [pc, #8]	; (181e4 <net_buf_pool_get+0xc>)
   181dc:	fb02 3000 	mla	r0, r2, r0, r3
   181e0:	4770      	bx	lr
   181e2:	bf00      	nop
   181e4:	20008bec 	.word	0x20008bec

000181e8 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   181e8:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   181ea:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   181ec:	4b06      	ldr	r3, [pc, #24]	; (18208 <net_buf_id+0x20>)
   181ee:	fb01 3302 	mla	r3, r1, r2, r3
   181f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   181f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   181f8:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   181fa:	331b      	adds	r3, #27
   181fc:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   18200:	fbb0 f0f3 	udiv	r0, r0, r3
   18204:	4770      	bx	lr
   18206:	bf00      	nop
   18208:	20008bec 	.word	0x20008bec

0001820c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1820c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1820e:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18210:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18212:	4b09      	ldr	r3, [pc, #36]	; (18238 <fixed_data_alloc+0x2c>)
   18214:	fb04 3302 	mla	r3, r4, r2, r3
   18218:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   1821a:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1821c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1821e:	681a      	ldr	r2, [r3, #0]
   18220:	4294      	cmp	r4, r2
   18222:	bf94      	ite	ls
   18224:	600c      	strls	r4, [r1, #0]
   18226:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   18228:	e9d3 5400 	ldrd	r5, r4, [r3]
   1822c:	f7ff ffdc 	bl	181e8 <net_buf_id>
}
   18230:	fb05 4000 	mla	r0, r5, r0, r4
   18234:	bd38      	pop	{r3, r4, r5, pc}
   18236:	bf00      	nop
   18238:	20008bec 	.word	0x20008bec

0001823c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1823c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18240:	b085      	sub	sp, #20
   18242:	9103      	str	r1, [sp, #12]
   18244:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18246:	4619      	mov	r1, r3
   18248:	4610      	mov	r0, r2
{
   1824a:	4692      	mov	sl, r2
   1824c:	4699      	mov	r9, r3
   1824e:	4690      	mov	r8, r2
   18250:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18252:	f010 f9b1 	bl	285b8 <sys_clock_timeout_end_calc>
   18256:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1825a:	b945      	cbnz	r5, 1826e <net_buf_alloc_len+0x32>
   1825c:	4966      	ldr	r1, [pc, #408]	; (183f8 <net_buf_alloc_len+0x1bc>)
   1825e:	23f4      	movs	r3, #244	; 0xf4
   18260:	4a66      	ldr	r2, [pc, #408]	; (183fc <net_buf_alloc_len+0x1c0>)
   18262:	4867      	ldr	r0, [pc, #412]	; (18400 <net_buf_alloc_len+0x1c4>)
   18264:	f00b fedd 	bl	24022 <assert_print>
   18268:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1826a:	4864      	ldr	r0, [pc, #400]	; (183fc <net_buf_alloc_len+0x1c0>)
   1826c:	e019      	b.n	182a2 <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1826e:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   18272:	f04f 0320 	mov.w	r3, #32
   18276:	f3ef 8b11 	mrs	fp, BASEPRI
   1827a:	f383 8812 	msr	BASEPRI_MAX, r3
   1827e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18282:	4630      	mov	r0, r6
   18284:	f006 fcb2 	bl	1ebec <z_spin_lock_valid>
   18288:	b968      	cbnz	r0, 182a6 <net_buf_alloc_len+0x6a>
   1828a:	2394      	movs	r3, #148	; 0x94
   1828c:	4a5d      	ldr	r2, [pc, #372]	; (18404 <net_buf_alloc_len+0x1c8>)
   1828e:	495e      	ldr	r1, [pc, #376]	; (18408 <net_buf_alloc_len+0x1cc>)
   18290:	485b      	ldr	r0, [pc, #364]	; (18400 <net_buf_alloc_len+0x1c4>)
   18292:	f00b fec6 	bl	24022 <assert_print>
   18296:	4631      	mov	r1, r6
   18298:	485c      	ldr	r0, [pc, #368]	; (1840c <net_buf_alloc_len+0x1d0>)
   1829a:	f00b fec2 	bl	24022 <assert_print>
   1829e:	2194      	movs	r1, #148	; 0x94
   182a0:	4858      	ldr	r0, [pc, #352]	; (18404 <net_buf_alloc_len+0x1c8>)
   182a2:	f00b feb7 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   182a6:	4630      	mov	r0, r6
   182a8:	f006 fcbc 	bl	1ec24 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   182ac:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   182ae:	2b00      	cmp	r3, #0
   182b0:	d070      	beq.n	18394 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   182b2:	8c2a      	ldrh	r2, [r5, #32]
   182b4:	429a      	cmp	r2, r3
   182b6:	d94d      	bls.n	18354 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   182b8:	2200      	movs	r2, #0
   182ba:	2300      	movs	r3, #0
   182bc:	4628      	mov	r0, r5
   182be:	f006 fee3 	bl	1f088 <z_impl_k_queue_get>
			if (buf) {
   182c2:	4604      	mov	r4, r0
   182c4:	2800      	cmp	r0, #0
   182c6:	d045      	beq.n	18354 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182c8:	4630      	mov	r0, r6
   182ca:	f006 fc9d 	bl	1ec08 <z_spin_unlock_valid>
   182ce:	b958      	cbnz	r0, 182e8 <net_buf_alloc_len+0xac>
   182d0:	23c2      	movs	r3, #194	; 0xc2
   182d2:	4a4c      	ldr	r2, [pc, #304]	; (18404 <net_buf_alloc_len+0x1c8>)
   182d4:	494e      	ldr	r1, [pc, #312]	; (18410 <net_buf_alloc_len+0x1d4>)
   182d6:	484a      	ldr	r0, [pc, #296]	; (18400 <net_buf_alloc_len+0x1c4>)
   182d8:	f00b fea3 	bl	24022 <assert_print>
   182dc:	4631      	mov	r1, r6
   182de:	484d      	ldr	r0, [pc, #308]	; (18414 <net_buf_alloc_len+0x1d8>)
   182e0:	f00b fe9f 	bl	24022 <assert_print>
   182e4:	21c2      	movs	r1, #194	; 0xc2
   182e6:	e7db      	b.n	182a0 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   182e8:	f38b 8811 	msr	BASEPRI, fp
   182ec:	f3bf 8f6f 	isb	sy
	if (size) {
   182f0:	9d03      	ldr	r5, [sp, #12]
   182f2:	2d00      	cmp	r5, #0
   182f4:	d074      	beq.n	183e0 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   182f6:	ea59 030a 	orrs.w	r3, r9, sl
   182fa:	d012      	beq.n	18322 <net_buf_alloc_len+0xe6>
   182fc:	f1b9 3fff 	cmp.w	r9, #4294967295
   18300:	bf08      	it	eq
   18302:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   18306:	d00c      	beq.n	18322 <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   18308:	f009 fa3e 	bl	21788 <sys_clock_tick_get>
   1830c:	9b01      	ldr	r3, [sp, #4]
   1830e:	ebb3 0800 	subs.w	r8, r3, r0
   18312:	9b02      	ldr	r3, [sp, #8]
   18314:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   18318:	2f00      	cmp	r7, #0
   1831a:	bfbc      	itt	lt
   1831c:	f04f 0800 	movlt.w	r8, #0
   18320:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   18322:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18326:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   18328:	4e3b      	ldr	r6, [pc, #236]	; (18418 <net_buf_alloc_len+0x1dc>)
   1832a:	4642      	mov	r2, r8
   1832c:	fb09 6303 	mla	r3, r9, r3, r6
   18330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18332:	4620      	mov	r0, r4
   18334:	681b      	ldr	r3, [r3, #0]
   18336:	a903      	add	r1, sp, #12
   18338:	f8d3 a000 	ldr.w	sl, [r3]
   1833c:	463b      	mov	r3, r7
   1833e:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   18340:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   18342:	2800      	cmp	r0, #0
   18344:	d13c      	bne.n	183c0 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   18346:	7aa0      	ldrb	r0, [r4, #10]
   18348:	4621      	mov	r1, r4
   1834a:	fb00 6009 	mla	r0, r0, r9, r6
   1834e:	f010 f87a 	bl	28446 <k_queue_prepend>
}
   18352:	e030      	b.n	183b6 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   18354:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   18356:	4630      	mov	r0, r6
   18358:	1e63      	subs	r3, r4, #1
   1835a:	846b      	strh	r3, [r5, #34]	; 0x22
   1835c:	f006 fc54 	bl	1ec08 <z_spin_unlock_valid>
   18360:	2800      	cmp	r0, #0
   18362:	d0b5      	beq.n	182d0 <net_buf_alloc_len+0x94>
   18364:	f38b 8811 	msr	BASEPRI, fp
   18368:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1836c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   18370:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18372:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   18374:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   18376:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18378:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1837c:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   18380:	4b25      	ldr	r3, [pc, #148]	; (18418 <net_buf_alloc_len+0x1dc>)
   18382:	4a26      	ldr	r2, [pc, #152]	; (1841c <net_buf_alloc_len+0x1e0>)
   18384:	1aeb      	subs	r3, r5, r3
   18386:	109b      	asrs	r3, r3, #2
   18388:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1838a:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1838c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   18390:	72e3      	strb	r3, [r4, #11]
		goto success;
   18392:	e7ad      	b.n	182f0 <net_buf_alloc_len+0xb4>
   18394:	4630      	mov	r0, r6
   18396:	f006 fc37 	bl	1ec08 <z_spin_unlock_valid>
   1839a:	2800      	cmp	r0, #0
   1839c:	d098      	beq.n	182d0 <net_buf_alloc_len+0x94>
   1839e:	f38b 8811 	msr	BASEPRI, fp
   183a2:	f3bf 8f6f 	isb	sy
   183a6:	4652      	mov	r2, sl
   183a8:	464b      	mov	r3, r9
   183aa:	4628      	mov	r0, r5
   183ac:	f006 fe6c 	bl	1f088 <z_impl_k_queue_get>
	if (!buf) {
   183b0:	4604      	mov	r4, r0
   183b2:	2800      	cmp	r0, #0
   183b4:	d19c      	bne.n	182f0 <net_buf_alloc_len+0xb4>
		return NULL;
   183b6:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   183b8:	4620      	mov	r0, r4
   183ba:	b005      	add	sp, #20
   183bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   183c0:	9b03      	ldr	r3, [sp, #12]
   183c2:	429d      	cmp	r5, r3
   183c4:	d90d      	bls.n	183e2 <net_buf_alloc_len+0x1a6>
   183c6:	4916      	ldr	r1, [pc, #88]	; (18420 <net_buf_alloc_len+0x1e4>)
   183c8:	f240 1355 	movw	r3, #341	; 0x155
   183cc:	4a0b      	ldr	r2, [pc, #44]	; (183fc <net_buf_alloc_len+0x1c0>)
   183ce:	480c      	ldr	r0, [pc, #48]	; (18400 <net_buf_alloc_len+0x1c4>)
   183d0:	f00b fe27 	bl	24022 <assert_print>
   183d4:	4813      	ldr	r0, [pc, #76]	; (18424 <net_buf_alloc_len+0x1e8>)
   183d6:	f00b fe24 	bl	24022 <assert_print>
   183da:	f240 1155 	movw	r1, #341	; 0x155
   183de:	e744      	b.n	1826a <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   183e0:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   183e2:	2300      	movs	r3, #0
	buf->ref   = 1U;
   183e4:	2201      	movs	r2, #1
	buf->frags = NULL;
   183e6:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   183e8:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   183ea:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   183ec:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   183ee:	6963      	ldr	r3, [r4, #20]
   183f0:	8262      	strh	r2, [r4, #18]
   183f2:	60e3      	str	r3, [r4, #12]
}
   183f4:	e7e0      	b.n	183b8 <net_buf_alloc_len+0x17c>
   183f6:	bf00      	nop
   183f8:	0002df16 	.word	0x0002df16
   183fc:	0002dec7 	.word	0x0002dec7
   18400:	0002a669 	.word	0x0002a669
   18404:	0002b32e 	.word	0x0002b32e
   18408:	0002b387 	.word	0x0002b387
   1840c:	0002b39c 	.word	0x0002b39c
   18410:	0002b35b 	.word	0x0002b35b
   18414:	0002b372 	.word	0x0002b372
   18418:	20008bec 	.word	0x20008bec
   1841c:	c4ec4ec5 	.word	0xc4ec4ec5
   18420:	0002df1b 	.word	0x0002df1b
   18424:	0002df2c 	.word	0x0002df2c

00018428 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   18428:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1842a:	b958      	cbnz	r0, 18444 <net_buf_simple_reserve+0x1c>
   1842c:	490d      	ldr	r1, [pc, #52]	; (18464 <net_buf_simple_reserve+0x3c>)
   1842e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   18432:	4a0d      	ldr	r2, [pc, #52]	; (18468 <net_buf_simple_reserve+0x40>)
   18434:	480d      	ldr	r0, [pc, #52]	; (1846c <net_buf_simple_reserve+0x44>)
   18436:	f00b fdf4 	bl	24022 <assert_print>
   1843a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1843e:	480a      	ldr	r0, [pc, #40]	; (18468 <net_buf_simple_reserve+0x40>)
   18440:	f00b fde8 	bl	24014 <assert_post_action>
   18444:	8883      	ldrh	r3, [r0, #4]
   18446:	b14b      	cbz	r3, 1845c <net_buf_simple_reserve+0x34>
   18448:	4909      	ldr	r1, [pc, #36]	; (18470 <net_buf_simple_reserve+0x48>)
   1844a:	f240 13b9 	movw	r3, #441	; 0x1b9
   1844e:	4a06      	ldr	r2, [pc, #24]	; (18468 <net_buf_simple_reserve+0x40>)
   18450:	4806      	ldr	r0, [pc, #24]	; (1846c <net_buf_simple_reserve+0x44>)
   18452:	f00b fde6 	bl	24022 <assert_print>
   18456:	f240 11b9 	movw	r1, #441	; 0x1b9
   1845a:	e7f0      	b.n	1843e <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1845c:	6883      	ldr	r3, [r0, #8]
   1845e:	440b      	add	r3, r1
   18460:	6003      	str	r3, [r0, #0]
}
   18462:	bd08      	pop	{r3, pc}
   18464:	0002dfab 	.word	0x0002dfab
   18468:	0002dec7 	.word	0x0002dec7
   1846c:	0002a669 	.word	0x0002a669
   18470:	0002df2f 	.word	0x0002df2f

00018474 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   18474:	b570      	push	{r4, r5, r6, lr}
   18476:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   18478:	4605      	mov	r5, r0
   1847a:	b958      	cbnz	r0, 18494 <net_buf_slist_put+0x20>
   1847c:	4928      	ldr	r1, [pc, #160]	; (18520 <net_buf_slist_put+0xac>)
   1847e:	f240 13c5 	movw	r3, #453	; 0x1c5
   18482:	4a28      	ldr	r2, [pc, #160]	; (18524 <net_buf_slist_put+0xb0>)
   18484:	4828      	ldr	r0, [pc, #160]	; (18528 <net_buf_slist_put+0xb4>)
   18486:	f00b fdcc 	bl	24022 <assert_print>
   1848a:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1848e:	4825      	ldr	r0, [pc, #148]	; (18524 <net_buf_slist_put+0xb0>)
   18490:	f00b fdc0 	bl	24014 <assert_post_action>
   18494:	b949      	cbnz	r1, 184aa <net_buf_slist_put+0x36>
   18496:	4925      	ldr	r1, [pc, #148]	; (1852c <net_buf_slist_put+0xb8>)
   18498:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   1849c:	4a21      	ldr	r2, [pc, #132]	; (18524 <net_buf_slist_put+0xb0>)
   1849e:	4822      	ldr	r0, [pc, #136]	; (18528 <net_buf_slist_put+0xb4>)
   184a0:	f00b fdbf 	bl	24022 <assert_print>
   184a4:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   184a8:	e7f1      	b.n	1848e <net_buf_slist_put+0x1a>
	__asm__ volatile(
   184aa:	f04f 0320 	mov.w	r3, #32
   184ae:	f3ef 8611 	mrs	r6, BASEPRI
   184b2:	f383 8812 	msr	BASEPRI_MAX, r3
   184b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   184ba:	481d      	ldr	r0, [pc, #116]	; (18530 <net_buf_slist_put+0xbc>)
   184bc:	f006 fb96 	bl	1ebec <z_spin_lock_valid>
   184c0:	b960      	cbnz	r0, 184dc <net_buf_slist_put+0x68>
   184c2:	2394      	movs	r3, #148	; 0x94
   184c4:	4a1b      	ldr	r2, [pc, #108]	; (18534 <net_buf_slist_put+0xc0>)
   184c6:	491c      	ldr	r1, [pc, #112]	; (18538 <net_buf_slist_put+0xc4>)
   184c8:	4817      	ldr	r0, [pc, #92]	; (18528 <net_buf_slist_put+0xb4>)
   184ca:	f00b fdaa 	bl	24022 <assert_print>
   184ce:	4918      	ldr	r1, [pc, #96]	; (18530 <net_buf_slist_put+0xbc>)
   184d0:	481a      	ldr	r0, [pc, #104]	; (1853c <net_buf_slist_put+0xc8>)
   184d2:	f00b fda6 	bl	24022 <assert_print>
   184d6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   184d8:	4816      	ldr	r0, [pc, #88]	; (18534 <net_buf_slist_put+0xc0>)
   184da:	e7d9      	b.n	18490 <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   184dc:	4814      	ldr	r0, [pc, #80]	; (18530 <net_buf_slist_put+0xbc>)
   184de:	f006 fba1 	bl	1ec24 <z_spin_lock_set_owner>
	parent->next = child;
   184e2:	2300      	movs	r3, #0
   184e4:	6023      	str	r3, [r4, #0]
	return list->tail;
   184e6:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   184e8:	b98b      	cbnz	r3, 1850e <net_buf_slist_put+0x9a>
	list->head = node;
   184ea:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   184ee:	4810      	ldr	r0, [pc, #64]	; (18530 <net_buf_slist_put+0xbc>)
   184f0:	f006 fb8a 	bl	1ec08 <z_spin_unlock_valid>
   184f4:	b970      	cbnz	r0, 18514 <net_buf_slist_put+0xa0>
   184f6:	23c2      	movs	r3, #194	; 0xc2
   184f8:	4a0e      	ldr	r2, [pc, #56]	; (18534 <net_buf_slist_put+0xc0>)
   184fa:	4911      	ldr	r1, [pc, #68]	; (18540 <net_buf_slist_put+0xcc>)
   184fc:	480a      	ldr	r0, [pc, #40]	; (18528 <net_buf_slist_put+0xb4>)
   184fe:	f00b fd90 	bl	24022 <assert_print>
   18502:	490b      	ldr	r1, [pc, #44]	; (18530 <net_buf_slist_put+0xbc>)
   18504:	480f      	ldr	r0, [pc, #60]	; (18544 <net_buf_slist_put+0xd0>)
   18506:	f00b fd8c 	bl	24022 <assert_print>
   1850a:	21c2      	movs	r1, #194	; 0xc2
   1850c:	e7e4      	b.n	184d8 <net_buf_slist_put+0x64>
	parent->next = child;
   1850e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18510:	606c      	str	r4, [r5, #4]
}
   18512:	e7ec      	b.n	184ee <net_buf_slist_put+0x7a>
	__asm__ volatile(
   18514:	f386 8811 	msr	BASEPRI, r6
   18518:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1851c:	bd70      	pop	{r4, r5, r6, pc}
   1851e:	bf00      	nop
   18520:	0002caca 	.word	0x0002caca
   18524:	0002dec7 	.word	0x0002dec7
   18528:	0002a669 	.word	0x0002a669
   1852c:	0002dfab 	.word	0x0002dfab
   18530:	20021150 	.word	0x20021150
   18534:	0002b32e 	.word	0x0002b32e
   18538:	0002b387 	.word	0x0002b387
   1853c:	0002b39c 	.word	0x0002b39c
   18540:	0002b35b 	.word	0x0002b35b
   18544:	0002b372 	.word	0x0002b372

00018548 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   18548:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1854a:	4604      	mov	r4, r0
   1854c:	b958      	cbnz	r0, 18566 <net_buf_slist_get+0x1e>
   1854e:	4923      	ldr	r1, [pc, #140]	; (185dc <net_buf_slist_get+0x94>)
   18550:	4823      	ldr	r0, [pc, #140]	; (185e0 <net_buf_slist_get+0x98>)
   18552:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   18556:	4a23      	ldr	r2, [pc, #140]	; (185e4 <net_buf_slist_get+0x9c>)
   18558:	f00b fd63 	bl	24022 <assert_print>
   1855c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   18560:	4820      	ldr	r0, [pc, #128]	; (185e4 <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18562:	f00b fd57 	bl	24014 <assert_post_action>
	__asm__ volatile(
   18566:	f04f 0320 	mov.w	r3, #32
   1856a:	f3ef 8611 	mrs	r6, BASEPRI
   1856e:	f383 8812 	msr	BASEPRI_MAX, r3
   18572:	f3bf 8f6f 	isb	sy
   18576:	481c      	ldr	r0, [pc, #112]	; (185e8 <net_buf_slist_get+0xa0>)
   18578:	f006 fb38 	bl	1ebec <z_spin_lock_valid>
   1857c:	b960      	cbnz	r0, 18598 <net_buf_slist_get+0x50>
   1857e:	2394      	movs	r3, #148	; 0x94
   18580:	4a1a      	ldr	r2, [pc, #104]	; (185ec <net_buf_slist_get+0xa4>)
   18582:	491b      	ldr	r1, [pc, #108]	; (185f0 <net_buf_slist_get+0xa8>)
   18584:	4816      	ldr	r0, [pc, #88]	; (185e0 <net_buf_slist_get+0x98>)
   18586:	f00b fd4c 	bl	24022 <assert_print>
   1858a:	4917      	ldr	r1, [pc, #92]	; (185e8 <net_buf_slist_get+0xa0>)
   1858c:	4819      	ldr	r0, [pc, #100]	; (185f4 <net_buf_slist_get+0xac>)
   1858e:	f00b fd48 	bl	24022 <assert_print>
   18592:	2194      	movs	r1, #148	; 0x94
   18594:	4815      	ldr	r0, [pc, #84]	; (185ec <net_buf_slist_get+0xa4>)
   18596:	e7e4      	b.n	18562 <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   18598:	4813      	ldr	r0, [pc, #76]	; (185e8 <net_buf_slist_get+0xa0>)
   1859a:	f006 fb43 	bl	1ec24 <z_spin_lock_set_owner>
	return list->head;
   1859e:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   185a0:	b12d      	cbz	r5, 185ae <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   185a2:	6862      	ldr	r2, [r4, #4]
	return node->next;
   185a4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   185a6:	4295      	cmp	r5, r2
	list->head = node;
   185a8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   185aa:	bf08      	it	eq
   185ac:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   185ae:	480e      	ldr	r0, [pc, #56]	; (185e8 <net_buf_slist_get+0xa0>)
   185b0:	f006 fb2a 	bl	1ec08 <z_spin_unlock_valid>
   185b4:	b958      	cbnz	r0, 185ce <net_buf_slist_get+0x86>
   185b6:	23c2      	movs	r3, #194	; 0xc2
   185b8:	4a0c      	ldr	r2, [pc, #48]	; (185ec <net_buf_slist_get+0xa4>)
   185ba:	490f      	ldr	r1, [pc, #60]	; (185f8 <net_buf_slist_get+0xb0>)
   185bc:	4808      	ldr	r0, [pc, #32]	; (185e0 <net_buf_slist_get+0x98>)
   185be:	f00b fd30 	bl	24022 <assert_print>
   185c2:	4909      	ldr	r1, [pc, #36]	; (185e8 <net_buf_slist_get+0xa0>)
   185c4:	480d      	ldr	r0, [pc, #52]	; (185fc <net_buf_slist_get+0xb4>)
   185c6:	f00b fd2c 	bl	24022 <assert_print>
   185ca:	21c2      	movs	r1, #194	; 0xc2
   185cc:	e7e2      	b.n	18594 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   185ce:	f386 8811 	msr	BASEPRI, r6
   185d2:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   185d6:	4628      	mov	r0, r5
   185d8:	bd70      	pop	{r4, r5, r6, pc}
   185da:	bf00      	nop
   185dc:	0002caca 	.word	0x0002caca
   185e0:	0002a669 	.word	0x0002a669
   185e4:	0002dec7 	.word	0x0002dec7
   185e8:	20021150 	.word	0x20021150
   185ec:	0002b32e 	.word	0x0002b32e
   185f0:	0002b387 	.word	0x0002b387
   185f4:	0002b39c 	.word	0x0002b39c
   185f8:	0002b35b 	.word	0x0002b35b
   185fc:	0002b372 	.word	0x0002b372

00018600 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   18600:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   18602:	b958      	cbnz	r0, 1861c <net_buf_put+0x1c>
   18604:	490d      	ldr	r1, [pc, #52]	; (1863c <net_buf_put+0x3c>)
   18606:	f240 13df 	movw	r3, #479	; 0x1df
   1860a:	4a0d      	ldr	r2, [pc, #52]	; (18640 <net_buf_put+0x40>)
   1860c:	480d      	ldr	r0, [pc, #52]	; (18644 <net_buf_put+0x44>)
   1860e:	f00b fd08 	bl	24022 <assert_print>
   18612:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   18616:	480a      	ldr	r0, [pc, #40]	; (18640 <net_buf_put+0x40>)
   18618:	f00b fcfc 	bl	24014 <assert_post_action>
   1861c:	b949      	cbnz	r1, 18632 <net_buf_put+0x32>
   1861e:	490a      	ldr	r1, [pc, #40]	; (18648 <net_buf_put+0x48>)
   18620:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   18624:	4a06      	ldr	r2, [pc, #24]	; (18640 <net_buf_put+0x40>)
   18626:	4807      	ldr	r0, [pc, #28]	; (18644 <net_buf_put+0x44>)
   18628:	f00b fcfb 	bl	24022 <assert_print>
   1862c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   18630:	e7f1      	b.n	18616 <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   18632:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   18636:	f00f befb 	b.w	28430 <k_queue_append>
   1863a:	bf00      	nop
   1863c:	0002df3e 	.word	0x0002df3e
   18640:	0002dec7 	.word	0x0002dec7
   18644:	0002a669 	.word	0x0002a669
   18648:	0002dfab 	.word	0x0002dfab

0001864c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1864c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   18650:	4605      	mov	r5, r0
   18652:	b328      	cbz	r0, 186a0 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   18654:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   18656:	f04f 0834 	mov.w	r8, #52	; 0x34
   1865a:	4e1a      	ldr	r6, [pc, #104]	; (186c4 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   1865c:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1865e:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   18660:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   18662:	3b01      	subs	r3, #1
   18664:	b2db      	uxtb	r3, r3
   18666:	7223      	strb	r3, [r4, #8]
   18668:	b9c3      	cbnz	r3, 1869c <net_buf_unref+0x50>
		if (buf->__buf) {
   1866a:	6961      	ldr	r1, [r4, #20]
   1866c:	b159      	cbz	r1, 18686 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1866e:	7a63      	ldrb	r3, [r4, #9]
   18670:	07db      	lsls	r3, r3, #31
   18672:	d407      	bmi.n	18684 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18674:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   18676:	4620      	mov	r0, r4
   18678:	fb08 6303 	mla	r3, r8, r3, r6
   1867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1867e:	681b      	ldr	r3, [r3, #0]
   18680:	689b      	ldr	r3, [r3, #8]
   18682:	4798      	blx	r3
			buf->__buf = NULL;
   18684:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   18686:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   18688:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1868a:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1868e:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   18690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18692:	b18b      	cbz	r3, 186b8 <net_buf_unref+0x6c>
			pool->destroy(buf);
   18694:	4620      	mov	r0, r4
   18696:	4798      	blx	r3
	while (buf) {
   18698:	2d00      	cmp	r5, #0
   1869a:	d1df      	bne.n	1865c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   186a0:	4909      	ldr	r1, [pc, #36]	; (186c8 <net_buf_unref+0x7c>)
   186a2:	480a      	ldr	r0, [pc, #40]	; (186cc <net_buf_unref+0x80>)
   186a4:	f240 13eb 	movw	r3, #491	; 0x1eb
   186a8:	4a09      	ldr	r2, [pc, #36]	; (186d0 <net_buf_unref+0x84>)
   186aa:	f00b fcba 	bl	24022 <assert_print>
   186ae:	f240 11eb 	movw	r1, #491	; 0x1eb
   186b2:	4807      	ldr	r0, [pc, #28]	; (186d0 <net_buf_unref+0x84>)
   186b4:	f00b fcae 	bl	24014 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   186b8:	4621      	mov	r1, r4
   186ba:	fb00 6008 	mla	r0, r0, r8, r6
   186be:	f00f fec2 	bl	28446 <k_queue_prepend>
}
   186c2:	e7e9      	b.n	18698 <net_buf_unref+0x4c>
   186c4:	20008bec 	.word	0x20008bec
   186c8:	0002dfab 	.word	0x0002dfab
   186cc:	0002a669 	.word	0x0002a669
   186d0:	0002dec7 	.word	0x0002dec7

000186d4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   186d4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   186d6:	b958      	cbnz	r0, 186f0 <net_buf_ref+0x1c>
   186d8:	4907      	ldr	r1, [pc, #28]	; (186f8 <net_buf_ref+0x24>)
   186da:	4808      	ldr	r0, [pc, #32]	; (186fc <net_buf_ref+0x28>)
   186dc:	f240 231a 	movw	r3, #538	; 0x21a
   186e0:	4a07      	ldr	r2, [pc, #28]	; (18700 <net_buf_ref+0x2c>)
   186e2:	f00b fc9e 	bl	24022 <assert_print>
   186e6:	f240 211a 	movw	r1, #538	; 0x21a
   186ea:	4805      	ldr	r0, [pc, #20]	; (18700 <net_buf_ref+0x2c>)
   186ec:	f00b fc92 	bl	24014 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   186f0:	7a02      	ldrb	r2, [r0, #8]
   186f2:	3201      	adds	r2, #1
   186f4:	7202      	strb	r2, [r0, #8]
	return buf;
}
   186f6:	bd08      	pop	{r3, pc}
   186f8:	0002dfab 	.word	0x0002dfab
   186fc:	0002a669 	.word	0x0002a669
   18700:	0002dec7 	.word	0x0002dec7

00018704 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   18704:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   18706:	4603      	mov	r3, r0
   18708:	b958      	cbnz	r0, 18722 <net_buf_frag_last+0x1e>
   1870a:	4908      	ldr	r1, [pc, #32]	; (1872c <net_buf_frag_last+0x28>)
   1870c:	4808      	ldr	r0, [pc, #32]	; (18730 <net_buf_frag_last+0x2c>)
   1870e:	f240 2357 	movw	r3, #599	; 0x257
   18712:	4a08      	ldr	r2, [pc, #32]	; (18734 <net_buf_frag_last+0x30>)
   18714:	f00b fc85 	bl	24022 <assert_print>
   18718:	f240 2157 	movw	r1, #599	; 0x257
   1871c:	4805      	ldr	r0, [pc, #20]	; (18734 <net_buf_frag_last+0x30>)
   1871e:	f00b fc79 	bl	24014 <assert_post_action>

	while (buf->frags) {
   18722:	4618      	mov	r0, r3
   18724:	685b      	ldr	r3, [r3, #4]
   18726:	2b00      	cmp	r3, #0
   18728:	d1fb      	bne.n	18722 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1872a:	bd08      	pop	{r3, pc}
   1872c:	0002dfab 	.word	0x0002dfab
   18730:	0002a669 	.word	0x0002a669
   18734:	0002dec7 	.word	0x0002dec7

00018738 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   18738:	b570      	push	{r4, r5, r6, lr}
   1873a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1873c:	4604      	mov	r4, r0
   1873e:	b958      	cbnz	r0, 18758 <net_buf_frag_insert+0x20>
   18740:	490f      	ldr	r1, [pc, #60]	; (18780 <net_buf_frag_insert+0x48>)
   18742:	f240 2362 	movw	r3, #610	; 0x262
   18746:	4a0f      	ldr	r2, [pc, #60]	; (18784 <net_buf_frag_insert+0x4c>)
   18748:	480f      	ldr	r0, [pc, #60]	; (18788 <net_buf_frag_insert+0x50>)
   1874a:	f00b fc6a 	bl	24022 <assert_print>
   1874e:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   18752:	480c      	ldr	r0, [pc, #48]	; (18784 <net_buf_frag_insert+0x4c>)
   18754:	f00b fc5e 	bl	24014 <assert_post_action>
   18758:	b949      	cbnz	r1, 1876e <net_buf_frag_insert+0x36>
   1875a:	490c      	ldr	r1, [pc, #48]	; (1878c <net_buf_frag_insert+0x54>)
   1875c:	f240 2363 	movw	r3, #611	; 0x263
   18760:	4a08      	ldr	r2, [pc, #32]	; (18784 <net_buf_frag_insert+0x4c>)
   18762:	4809      	ldr	r0, [pc, #36]	; (18788 <net_buf_frag_insert+0x50>)
   18764:	f00b fc5d 	bl	24022 <assert_print>
   18768:	f240 2163 	movw	r1, #611	; 0x263
   1876c:	e7f1      	b.n	18752 <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1876e:	6846      	ldr	r6, [r0, #4]
   18770:	b11e      	cbz	r6, 1877a <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   18772:	4608      	mov	r0, r1
   18774:	f7ff ffc6 	bl	18704 <net_buf_frag_last>
   18778:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1877a:	6065      	str	r5, [r4, #4]
}
   1877c:	bd70      	pop	{r4, r5, r6, pc}
   1877e:	bf00      	nop
   18780:	0002df43 	.word	0x0002df43
   18784:	0002dec7 	.word	0x0002dec7
   18788:	0002a669 	.word	0x0002a669
   1878c:	0002df4a 	.word	0x0002df4a

00018790 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   18790:	b538      	push	{r3, r4, r5, lr}
   18792:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   18794:	460c      	mov	r4, r1
   18796:	b959      	cbnz	r1, 187b0 <net_buf_frag_add+0x20>
   18798:	490c      	ldr	r1, [pc, #48]	; (187cc <net_buf_frag_add+0x3c>)
   1879a:	480d      	ldr	r0, [pc, #52]	; (187d0 <net_buf_frag_add+0x40>)
   1879c:	f240 236e 	movw	r3, #622	; 0x26e
   187a0:	4a0c      	ldr	r2, [pc, #48]	; (187d4 <net_buf_frag_add+0x44>)
   187a2:	f00b fc3e 	bl	24022 <assert_print>
   187a6:	f240 216e 	movw	r1, #622	; 0x26e
   187aa:	480a      	ldr	r0, [pc, #40]	; (187d4 <net_buf_frag_add+0x44>)
   187ac:	f00b fc32 	bl	24014 <assert_post_action>

	if (!head) {
   187b0:	b920      	cbnz	r0, 187bc <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   187b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   187b6:	4608      	mov	r0, r1
   187b8:	f7ff bf8c 	b.w	186d4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   187bc:	f7ff ffa2 	bl	18704 <net_buf_frag_last>
   187c0:	4621      	mov	r1, r4
   187c2:	f7ff ffb9 	bl	18738 <net_buf_frag_insert>
}
   187c6:	4628      	mov	r0, r5
   187c8:	bd38      	pop	{r3, r4, r5, pc}
   187ca:	bf00      	nop
   187cc:	0002df4a 	.word	0x0002df4a
   187d0:	0002a669 	.word	0x0002a669
   187d4:	0002dec7 	.word	0x0002dec7

000187d8 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   187d8:	b508      	push	{r3, lr}
   187da:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   187dc:	6800      	ldr	r0, [r0, #0]
   187de:	689a      	ldr	r2, [r3, #8]
   187e0:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   187e2:	4291      	cmp	r1, r2
   187e4:	d90b      	bls.n	187fe <net_buf_simple_push+0x26>
   187e6:	4909      	ldr	r1, [pc, #36]	; (1880c <net_buf_simple_push+0x34>)
   187e8:	4809      	ldr	r0, [pc, #36]	; (18810 <net_buf_simple_push+0x38>)
   187ea:	f240 33f2 	movw	r3, #1010	; 0x3f2
   187ee:	4a09      	ldr	r2, [pc, #36]	; (18814 <net_buf_simple_push+0x3c>)
   187f0:	f00b fc17 	bl	24022 <assert_print>
   187f4:	f240 31f2 	movw	r1, #1010	; 0x3f2
   187f8:	4806      	ldr	r0, [pc, #24]	; (18814 <net_buf_simple_push+0x3c>)
   187fa:	f00b fc0b 	bl	24014 <assert_post_action>
	buf->len += len;
   187fe:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   18800:	1a40      	subs	r0, r0, r1
	buf->len += len;
   18802:	4411      	add	r1, r2
	buf->data -= len;
   18804:	6018      	str	r0, [r3, #0]
	buf->len += len;
   18806:	8099      	strh	r1, [r3, #4]
}
   18808:	bd08      	pop	{r3, pc}
   1880a:	bf00      	nop
   1880c:	0002df5f 	.word	0x0002df5f
   18810:	0002a669 	.word	0x0002a669
   18814:	0002dec7 	.word	0x0002dec7

00018818 <net_buf_simple_pull>:
{
   18818:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1881a:	8882      	ldrh	r2, [r0, #4]
{
   1881c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1881e:	428a      	cmp	r2, r1
   18820:	d20b      	bcs.n	1883a <net_buf_simple_pull+0x22>
   18822:	4909      	ldr	r1, [pc, #36]	; (18848 <net_buf_simple_pull+0x30>)
   18824:	4809      	ldr	r0, [pc, #36]	; (1884c <net_buf_simple_pull+0x34>)
   18826:	f240 4352 	movw	r3, #1106	; 0x452
   1882a:	4a09      	ldr	r2, [pc, #36]	; (18850 <net_buf_simple_pull+0x38>)
   1882c:	f00b fbf9 	bl	24022 <assert_print>
   18830:	f240 4152 	movw	r1, #1106	; 0x452
   18834:	4806      	ldr	r0, [pc, #24]	; (18850 <net_buf_simple_pull+0x38>)
   18836:	f00b fbed 	bl	24014 <assert_post_action>
	buf->len -= len;
   1883a:	1a52      	subs	r2, r2, r1
   1883c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1883e:	6800      	ldr	r0, [r0, #0]
   18840:	4408      	add	r0, r1
   18842:	6018      	str	r0, [r3, #0]
}
   18844:	bd08      	pop	{r3, pc}
   18846:	bf00      	nop
   18848:	0002df4f 	.word	0x0002df4f
   1884c:	0002a669 	.word	0x0002a669
   18850:	0002dec7 	.word	0x0002dec7

00018854 <net_buf_simple_pull_mem>:
{
   18854:	b508      	push	{r3, lr}
   18856:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   18858:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1885a:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1885c:	428a      	cmp	r2, r1
   1885e:	d20b      	bcs.n	18878 <net_buf_simple_pull_mem+0x24>
   18860:	4908      	ldr	r1, [pc, #32]	; (18884 <net_buf_simple_pull_mem+0x30>)
   18862:	4809      	ldr	r0, [pc, #36]	; (18888 <net_buf_simple_pull_mem+0x34>)
   18864:	f240 435e 	movw	r3, #1118	; 0x45e
   18868:	4a08      	ldr	r2, [pc, #32]	; (1888c <net_buf_simple_pull_mem+0x38>)
   1886a:	f00b fbda 	bl	24022 <assert_print>
   1886e:	f240 415e 	movw	r1, #1118	; 0x45e
   18872:	4806      	ldr	r0, [pc, #24]	; (1888c <net_buf_simple_pull_mem+0x38>)
   18874:	f00b fbce 	bl	24014 <assert_post_action>
	buf->len -= len;
   18878:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1887a:	4401      	add	r1, r0
	buf->len -= len;
   1887c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1887e:	6019      	str	r1, [r3, #0]
}
   18880:	bd08      	pop	{r3, pc}
   18882:	bf00      	nop
   18884:	0002df4f 	.word	0x0002df4f
   18888:	0002a669 	.word	0x0002a669
   1888c:	0002dec7 	.word	0x0002dec7

00018890 <net_buf_simple_add>:
{
   18890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   18892:	8885      	ldrh	r5, [r0, #4]
   18894:	6803      	ldr	r3, [r0, #0]
   18896:	460e      	mov	r6, r1
   18898:	4604      	mov	r4, r0
   1889a:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1889c:	f00e fa46 	bl	26d2c <net_buf_simple_tailroom>
   188a0:	42b0      	cmp	r0, r6
   188a2:	d20b      	bcs.n	188bc <net_buf_simple_add+0x2c>
   188a4:	4907      	ldr	r1, [pc, #28]	; (188c4 <net_buf_simple_add+0x34>)
   188a6:	4808      	ldr	r0, [pc, #32]	; (188c8 <net_buf_simple_add+0x38>)
   188a8:	f240 3303 	movw	r3, #771	; 0x303
   188ac:	4a07      	ldr	r2, [pc, #28]	; (188cc <net_buf_simple_add+0x3c>)
   188ae:	f00b fbb8 	bl	24022 <assert_print>
   188b2:	f240 3103 	movw	r1, #771	; 0x303
   188b6:	4805      	ldr	r0, [pc, #20]	; (188cc <net_buf_simple_add+0x3c>)
   188b8:	f00b fbac 	bl	24014 <assert_post_action>
	buf->len += len;
   188bc:	4435      	add	r5, r6
   188be:	80a5      	strh	r5, [r4, #4]
}
   188c0:	4638      	mov	r0, r7
   188c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   188c4:	0002df83 	.word	0x0002df83
   188c8:	0002a669 	.word	0x0002a669
   188cc:	0002dec7 	.word	0x0002dec7

000188d0 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   188d0:	b508      	push	{r3, lr}
   188d2:	4804      	ldr	r0, [pc, #16]	; (188e4 <xoshiro128_initialize+0x14>)
   188d4:	f00f fd33 	bl	2833e <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   188d8:	2800      	cmp	r0, #0
}
   188da:	bf0c      	ite	eq
   188dc:	f06f 0012 	mvneq.w	r0, #18
   188e0:	2000      	movne	r0, #0
   188e2:	bd08      	pop	{r3, pc}
   188e4:	00029164 	.word	0x00029164

000188e8 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   188e8:	2813      	cmp	r0, #19
   188ea:	d80e      	bhi.n	1890a <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   188ec:	4a08      	ldr	r2, [pc, #32]	; (18910 <adc_gain_invert+0x28>)
   188ee:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   188f2:	b153      	cbz	r3, 1890a <adc_gain_invert+0x22>
   188f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   188f8:	7852      	ldrb	r2, [r2, #1]
   188fa:	b132      	cbz	r2, 1890a <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   188fc:	6808      	ldr	r0, [r1, #0]
   188fe:	4343      	muls	r3, r0
   18900:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   18904:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   18906:	600b      	str	r3, [r1, #0]
			rv = 0;
   18908:	4770      	bx	lr
	int rv = -EINVAL;
   1890a:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   1890e:	4770      	bx	lr
   18910:	0002dfaf 	.word	0x0002dfaf

00018914 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   18914:	2201      	movs	r2, #1
   18916:	4b05      	ldr	r3, [pc, #20]	; (1892c <adc_context_start_sampling+0x18>)
   18918:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1891c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   18920:	b109      	cbz	r1, 18926 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18922:	60da      	str	r2, [r3, #12]
}
   18924:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18926:	601a      	str	r2, [r3, #0]
   18928:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1892a:	4770      	bx	lr
   1892c:	4000e000 	.word	0x4000e000

00018930 <adc_nrfx_channel_setup>:
{
   18930:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   18932:	790d      	ldrb	r5, [r1, #4]
   18934:	f005 041f 	and.w	r4, r5, #31
	if (channel_id >= SAADC_CH_NUM) {
   18938:	2c07      	cmp	r4, #7
   1893a:	d825      	bhi.n	18988 <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->gain) {
   1893c:	780a      	ldrb	r2, [r1, #0]
   1893e:	2a0b      	cmp	r2, #11
   18940:	d818      	bhi.n	18974 <adc_nrfx_channel_setup+0x44>
   18942:	e8df f002 	tbb	[pc, r2]
   18946:	0707      	.short	0x0707
   18948:	06170707 	.word	0x06170707
   1894c:	13111717 	.word	0x13111717
   18950:	1517      	.short	0x1517
		config.gain = NRF_SAADC_GAIN1_2;
   18952:	2204      	movs	r2, #4
	switch (channel_cfg->reference) {
   18954:	784b      	ldrb	r3, [r1, #1]
   18956:	2b03      	cmp	r3, #3
   18958:	d01a      	beq.n	18990 <adc_nrfx_channel_setup+0x60>
   1895a:	2b04      	cmp	r3, #4
   1895c:	f04f 0300 	mov.w	r3, #0
   18960:	d017      	beq.n	18992 <adc_nrfx_channel_setup+0x62>
		LOG_ERR("Selected ADC reference is not valid");
   18962:	4a30      	ldr	r2, [pc, #192]	; (18a24 <adc_nrfx_channel_setup+0xf4>)
   18964:	9202      	str	r2, [sp, #8]
   18966:	e008      	b.n	1897a <adc_nrfx_channel_setup+0x4a>
		config.gain = NRF_SAADC_GAIN1;
   18968:	2205      	movs	r2, #5
		break;
   1896a:	e7f3      	b.n	18954 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   1896c:	2206      	movs	r2, #6
		break;
   1896e:	e7f1      	b.n	18954 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   18970:	2207      	movs	r2, #7
		break;
   18972:	e7ef      	b.n	18954 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   18974:	4b2c      	ldr	r3, [pc, #176]	; (18a28 <adc_nrfx_channel_setup+0xf8>)
   18976:	9302      	str	r3, [sp, #8]
   18978:	2300      	movs	r3, #0
   1897a:	2201      	movs	r2, #1
   1897c:	4618      	mov	r0, r3
   1897e:	e9cd 3300 	strd	r3, r3, [sp]
   18982:	492a      	ldr	r1, [pc, #168]	; (18a2c <adc_nrfx_channel_setup+0xfc>)
   18984:	f00e f9ed 	bl	26d62 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   18988:	f06f 0015 	mvn.w	r0, #21
}
   1898c:	b004      	add	sp, #16
   1898e:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   18990:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
   18992:	f244 060a 	movw	r6, #16394	; 0x400a
   18996:	8848      	ldrh	r0, [r1, #2]
   18998:	42b0      	cmp	r0, r6
   1899a:	d03d      	beq.n	18a18 <adc_nrfx_channel_setup+0xe8>
   1899c:	d80a      	bhi.n	189b4 <adc_nrfx_channel_setup+0x84>
   1899e:	f244 0603 	movw	r6, #16387	; 0x4003
   189a2:	42b0      	cmp	r0, r6
   189a4:	d014      	beq.n	189d0 <adc_nrfx_channel_setup+0xa0>
   189a6:	f244 0605 	movw	r6, #16389	; 0x4005
   189aa:	42b0      	cmp	r0, r6
   189ac:	d032      	beq.n	18a14 <adc_nrfx_channel_setup+0xe4>
   189ae:	b398      	cbz	r0, 18a18 <adc_nrfx_channel_setup+0xe8>
		LOG_ERR("Selected ADC acquisition time is not valid");
   189b0:	4b1f      	ldr	r3, [pc, #124]	; (18a30 <adc_nrfx_channel_setup+0x100>)
   189b2:	e7e0      	b.n	18976 <adc_nrfx_channel_setup+0x46>
	switch (channel_cfg->acquisition_time) {
   189b4:	f244 0614 	movw	r6, #16404	; 0x4014
   189b8:	42b0      	cmp	r0, r6
   189ba:	d02f      	beq.n	18a1c <adc_nrfx_channel_setup+0xec>
   189bc:	f244 0628 	movw	r6, #16424	; 0x4028
   189c0:	42b0      	cmp	r0, r6
   189c2:	d02d      	beq.n	18a20 <adc_nrfx_channel_setup+0xf0>
   189c4:	f244 060f 	movw	r6, #16399	; 0x400f
   189c8:	42b0      	cmp	r0, r6
   189ca:	d1f1      	bne.n	189b0 <adc_nrfx_channel_setup+0x80>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   189cc:	2003      	movs	r0, #3
   189ce:	e000      	b.n	189d2 <adc_nrfx_channel_setup+0xa2>
	nrf_saadc_channel_config_t config = {
   189d0:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   189d2:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   189d6:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   189d8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
   189dc:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   189e0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].PSELP = pselp;
   189e4:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   189e6:	0123      	lsls	r3, r4, #4
   189e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   189ec:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   189f0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   189f4:	0123      	lsls	r3, r4, #4
   189f6:	798a      	ldrb	r2, [r1, #6]
   189f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   189fc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   18a00:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   18a04:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   18a08:	4b0a      	ldr	r3, [pc, #40]	; (18a34 <adc_nrfx_channel_setup+0x104>)
   18a0a:	794a      	ldrb	r2, [r1, #5]
   18a0c:	4423      	add	r3, r4
   18a0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   18a12:	e7bb      	b.n	1898c <adc_nrfx_channel_setup+0x5c>
	switch (channel_cfg->acquisition_time) {
   18a14:	2001      	movs	r0, #1
   18a16:	e7dc      	b.n	189d2 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   18a18:	2002      	movs	r0, #2
   18a1a:	e7da      	b.n	189d2 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   18a1c:	2004      	movs	r0, #4
   18a1e:	e7d8      	b.n	189d2 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   18a20:	2005      	movs	r0, #5
   18a22:	e7d6      	b.n	189d2 <adc_nrfx_channel_setup+0xa2>
   18a24:	0002dff6 	.word	0x0002dff6
   18a28:	0002dfd7 	.word	0x0002dfd7
   18a2c:	0002968c 	.word	0x0002968c
   18a30:	0002e01a 	.word	0x0002e01a
   18a34:	20008168 	.word	0x20008168

00018a38 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   18a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a3a:	460c      	mov	r4, r1
   18a3c:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
   18a3e:	f04f 33ff 	mov.w	r3, #4294967295
   18a42:	f04f 32ff 	mov.w	r2, #4294967295
   18a46:	486d      	ldr	r0, [pc, #436]	; (18bfc <adc_nrfx_read+0x1c4>)
   18a48:	f006 fbcc 	bl	1f1e4 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   18a4c:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   18a4e:	1e73      	subs	r3, r6, #1
   18a50:	2bfe      	cmp	r3, #254	; 0xfe
   18a52:	f04f 0300 	mov.w	r3, #0
   18a56:	d909      	bls.n	18a6c <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
   18a58:	4a69      	ldr	r2, [pc, #420]	; (18c00 <adc_nrfx_read+0x1c8>)
   18a5a:	9202      	str	r2, [sp, #8]
		LOG_ERR(
   18a5c:	2201      	movs	r2, #1
   18a5e:	4618      	mov	r0, r3
   18a60:	e9cd 3300 	strd	r3, r3, [sp]
   18a64:	4967      	ldr	r1, [pc, #412]	; (18c04 <adc_nrfx_read+0x1cc>)
   18a66:	f00e f97c 	bl	26d62 <z_log_msg_runtime_create.constprop.0>
	if (error) {
   18a6a:	e014      	b.n	18a96 <adc_nrfx_read+0x5e>
   18a6c:	461a      	mov	r2, r3
	active_channels = 0U;
   18a6e:	4618      	mov	r0, r3
    p_reg->CH[channel].PSELP = pselp;
   18a70:	4d65      	ldr	r5, [pc, #404]	; (18c08 <adc_nrfx_read+0x1d0>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   18a72:	4f66      	ldr	r7, [pc, #408]	; (18c0c <adc_nrfx_read+0x1d4>)
		if (selected_channels & BIT(channel_id)) {
   18a74:	fa26 f302 	lsr.w	r3, r6, r2
   18a78:	f013 0301 	ands.w	r3, r3, #1
   18a7c:	d039      	beq.n	18af2 <adc_nrfx_read+0xba>
			if (m_data.positive_inputs[channel_id] == 0U) {
   18a7e:	5cbb      	ldrb	r3, [r7, r2]
   18a80:	b98b      	cbnz	r3, 18aa6 <adc_nrfx_read+0x6e>
				LOG_ERR("Channel %u not configured",
   18a82:	9203      	str	r2, [sp, #12]
   18a84:	4a62      	ldr	r2, [pc, #392]	; (18c10 <adc_nrfx_read+0x1d8>)
   18a86:	9202      	str	r2, [sp, #8]
   18a88:	e9cd 3300 	strd	r3, r3, [sp]
   18a8c:	2201      	movs	r2, #1
   18a8e:	4618      	mov	r0, r3
   18a90:	495c      	ldr	r1, [pc, #368]	; (18c04 <adc_nrfx_read+0x1cc>)
   18a92:	f00e f966 	bl	26d62 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   18a96:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   18a9a:	4858      	ldr	r0, [pc, #352]	; (18bfc <adc_nrfx_read+0x1c4>)
   18a9c:	f006 fb5e 	bl	1f15c <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   18aa0:	4620      	mov	r0, r4
   18aa2:	b007      	add	sp, #28
   18aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   18aa6:	f894 c011 	ldrb.w	ip, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   18aaa:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
   18aae:	f1bc 0c00 	subs.w	ip, ip, #0
   18ab2:	bf18      	it	ne
   18ab4:	f04f 0c01 	movne.w	ip, #1
   18ab8:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
			++active_channels;
   18abc:	3001      	adds	r0, #1
   18abe:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   18ac2:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   18ac6:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   18aca:	f102 0151 	add.w	r1, r2, #81	; 0x51
   18ace:	0109      	lsls	r1, r1, #4
   18ad0:	506b      	str	r3, [r5, r1]
   18ad2:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
   18ad4:	3201      	adds	r2, #1
   18ad6:	2a08      	cmp	r2, #8
   18ad8:	d1cc      	bne.n	18a74 <adc_nrfx_read+0x3c>
	error = set_resolution(sequence);
   18ada:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
   18adc:	2300      	movs	r3, #0
   18ade:	f1a2 0108 	sub.w	r1, r2, #8
   18ae2:	2906      	cmp	r1, #6
   18ae4:	d818      	bhi.n	18b18 <adc_nrfx_read+0xe0>
   18ae6:	e8df f001 	tbb	[pc, r1]
   18aea:	171e      	.short	0x171e
   18aec:	17091720 	.word	0x17091720
   18af0:	15          	.byte	0x15
   18af1:	00          	.byte	0x00
   18af2:	f102 0151 	add.w	r1, r2, #81	; 0x51
   18af6:	0109      	lsls	r1, r1, #4
   18af8:	506b      	str	r3, [r5, r1]
}
   18afa:	e7eb      	b.n	18ad4 <adc_nrfx_read+0x9c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   18afc:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   18afe:	4a42      	ldr	r2, [pc, #264]	; (18c08 <adc_nrfx_read+0x1d0>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   18b00:	2801      	cmp	r0, #1
   18b02:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   18b06:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   18b08:	d911      	bls.n	18b2e <adc_nrfx_read+0xf6>
   18b0a:	b193      	cbz	r3, 18b32 <adc_nrfx_read+0xfa>
		LOG_ERR(
   18b0c:	4b41      	ldr	r3, [pc, #260]	; (18c14 <adc_nrfx_read+0x1dc>)
   18b0e:	9302      	str	r3, [sp, #8]
   18b10:	2300      	movs	r3, #0
   18b12:	e7a3      	b.n	18a5c <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   18b14:	2303      	movs	r3, #3
		break;
   18b16:	e7f2      	b.n	18afe <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   18b18:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
   18b1a:	4a3f      	ldr	r2, [pc, #252]	; (18c18 <adc_nrfx_read+0x1e0>)
   18b1c:	9300      	str	r3, [sp, #0]
   18b1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   18b22:	2300      	movs	r3, #0
   18b24:	e7b2      	b.n	18a8c <adc_nrfx_read+0x54>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   18b26:	2300      	movs	r3, #0
   18b28:	e7e9      	b.n	18afe <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   18b2a:	2301      	movs	r3, #1
   18b2c:	e7e7      	b.n	18afe <adc_nrfx_read+0xc6>
	switch (sequence->oversampling) {
   18b2e:	2b08      	cmp	r3, #8
   18b30:	d816      	bhi.n	18b60 <adc_nrfx_read+0x128>
    p_reg->OVERSAMPLE = oversample;
   18b32:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
   18b36:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   18b38:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
   18b3a:	b9b2      	cbnz	r2, 18b6a <adc_nrfx_read+0x132>
	if (sequence->buffer_size < needed_buffer_size) {
   18b3c:	68e2      	ldr	r2, [r4, #12]
   18b3e:	429a      	cmp	r2, r3
   18b40:	d217      	bcs.n	18b72 <adc_nrfx_read+0x13a>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   18b42:	e9cd 2303 	strd	r2, r3, [sp, #12]
   18b46:	4b35      	ldr	r3, [pc, #212]	; (18c1c <adc_nrfx_read+0x1e4>)
   18b48:	2201      	movs	r2, #1
   18b4a:	9302      	str	r3, [sp, #8]
   18b4c:	2300      	movs	r3, #0
   18b4e:	492d      	ldr	r1, [pc, #180]	; (18c04 <adc_nrfx_read+0x1cc>)
   18b50:	4618      	mov	r0, r3
   18b52:	e9cd 3300 	strd	r3, r3, [sp]
   18b56:	f00e f904 	bl	26d62 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   18b5a:	f06f 040b 	mvn.w	r4, #11
   18b5e:	e79c      	b.n	18a9a <adc_nrfx_read+0x62>
	switch (sequence->oversampling) {
   18b60:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
   18b62:	4b2f      	ldr	r3, [pc, #188]	; (18c20 <adc_nrfx_read+0x1e8>)
   18b64:	9302      	str	r3, [sp, #8]
   18b66:	2300      	movs	r3, #0
   18b68:	e78e      	b.n	18a88 <adc_nrfx_read+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   18b6a:	8992      	ldrh	r2, [r2, #12]
   18b6c:	fb02 3303 	mla	r3, r2, r3, r3
   18b70:	e7e4      	b.n	18b3c <adc_nrfx_read+0x104>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   18b72:	4626      	mov	r6, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   18b74:	68a2      	ldr	r2, [r4, #8]
   18b76:	4b24      	ldr	r3, [pc, #144]	; (18c08 <adc_nrfx_read+0x1d0>)
   18b78:	4f2a      	ldr	r7, [pc, #168]	; (18c24 <adc_nrfx_read+0x1ec>)
   18b7a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
   18b7e:	f107 0574 	add.w	r5, r7, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   18b82:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   18b86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   18b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   18b8a:	6833      	ldr	r3, [r6, #0]
   18b8c:	463e      	mov	r6, r7
   18b8e:	602b      	str	r3, [r5, #0]
	ctx->status = 0;
   18b90:	2500      	movs	r5, #0
   18b92:	673d      	str	r5, [r7, #112]	; 0x70

	if (sequence->options) {
   18b94:	6823      	ldr	r3, [r4, #0]
   18b96:	b36b      	cbz	r3, 18bf4 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
   18b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   18b9a:	f107 0488 	add.w	r4, r7, #136	; 0x88
   18b9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   18ba2:	677c      	str	r4, [r7, #116]	; 0x74
		ctx->sampling_index = 0U;
   18ba4:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   18ba8:	b320      	cbz	r0, 18bf4 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18baa:	e8d6 3fef 	ldaex	r3, [r6]
   18bae:	e8c6 5fe2 	stlex	r2, r5, [r6]
   18bb2:	2a00      	cmp	r2, #0
   18bb4:	d1f9      	bne.n	18baa <adc_nrfx_read+0x172>
   18bb6:	491c      	ldr	r1, [pc, #112]	; (18c28 <adc_nrfx_read+0x1f0>)
   18bb8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   18bbc:	460e      	mov	r6, r1
   18bbe:	4629      	mov	r1, r5
   18bc0:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
   18bc4:	2300      	movs	r3, #0
   18bc6:	fbe4 6100 	umlal	r6, r1, r4, r0
   18bca:	4a18      	ldr	r2, [pc, #96]	; (18c2c <adc_nrfx_read+0x1f4>)
   18bcc:	4630      	mov	r0, r6
   18bce:	f7f0 f98f 	bl	8ef0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   18bd2:	2200      	movs	r2, #0
   18bd4:	e9cd 0100 	strd	r0, r1, [sp]
   18bd8:	2300      	movs	r3, #0
   18bda:	f107 0008 	add.w	r0, r7, #8
   18bde:	f008 fecf 	bl	21980 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   18be2:	f04f 32ff 	mov.w	r2, #4294967295
   18be6:	f04f 33ff 	mov.w	r3, #4294967295
   18bea:	4811      	ldr	r0, [pc, #68]	; (18c30 <adc_nrfx_read+0x1f8>)
   18bec:	f006 fafa 	bl	1f1e4 <z_impl_k_sem_take>
	return ctx->status;
   18bf0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
	return error;
   18bf2:	e752      	b.n	18a9a <adc_nrfx_read+0x62>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   18bf4:	480b      	ldr	r0, [pc, #44]	; (18c24 <adc_nrfx_read+0x1ec>)
   18bf6:	f7ff fe8d 	bl	18914 <adc_context_start_sampling>
   18bfa:	e7f2      	b.n	18be2 <adc_nrfx_read+0x1aa>
   18bfc:	200081a8 	.word	0x200081a8
   18c00:	0002e045 	.word	0x0002e045
   18c04:	0002968c 	.word	0x0002968c
   18c08:	4000e000 	.word	0x4000e000
   18c0c:	20008208 	.word	0x20008208
   18c10:	0002e063 	.word	0x0002e063
   18c14:	0002e0a2 	.word	0x0002e0a2
   18c18:	0002e07d 	.word	0x0002e07d
   18c1c:	0002e0f7 	.word	0x0002e0f7
   18c20:	0002e0d4 	.word	0x0002e0d4
   18c24:	20008168 	.word	0x20008168
   18c28:	000f423f 	.word	0x000f423f
   18c2c:	000f4240 	.word	0x000f4240
   18c30:	200081c0 	.word	0x200081c0

00018c34 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   18c34:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c36:	2400      	movs	r4, #0
   18c38:	4b0d      	ldr	r3, [pc, #52]	; (18c70 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   18c3a:	200e      	movs	r0, #14
   18c3c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   18c40:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   18c44:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   18c48:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   18c4c:	2212      	movs	r2, #18
   18c4e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   18c52:	f7f6 fbdf 	bl	f414 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18c56:	4622      	mov	r2, r4
   18c58:	2101      	movs	r1, #1
   18c5a:	200e      	movs	r0, #14
   18c5c:	f7f6 fc0a 	bl	f474 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   18c60:	4804      	ldr	r0, [pc, #16]	; (18c74 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   18c62:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18c64:	b913      	cbnz	r3, 18c6c <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   18c66:	3040      	adds	r0, #64	; 0x40
   18c68:	f006 fa78 	bl	1f15c <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   18c6c:	2000      	movs	r0, #0
   18c6e:	bd10      	pop	{r4, pc}
   18c70:	4000e000 	.word	0x4000e000
   18c74:	20008168 	.word	0x20008168

00018c78 <saadc_irq_handler>:
{
   18c78:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18c7a:	4b2d      	ldr	r3, [pc, #180]	; (18d30 <saadc_irq_handler+0xb8>)
   18c7c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   18c80:	2a00      	cmp	r2, #0
   18c82:	d048      	beq.n	18d16 <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c84:	2200      	movs	r2, #0
   18c86:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18c8a:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c8e:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   18c90:	4c28      	ldr	r4, [pc, #160]	; (18d34 <saadc_irq_handler+0xbc>)
   18c92:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   18c94:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   18c98:	6f63      	ldr	r3, [r4, #116]	; 0x74
   18c9a:	4625      	mov	r5, r4
   18c9c:	b3b3      	cbz	r3, 18d0c <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   18c9e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   18ca2:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   18ca6:	b133      	cbz	r3, 18cb6 <saadc_irq_handler+0x3e>
			action = callback(dev,
   18ca8:	f104 0174 	add.w	r1, r4, #116	; 0x74
   18cac:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   18cae:	2801      	cmp	r0, #1
   18cb0:	d014      	beq.n	18cdc <saadc_irq_handler+0x64>
   18cb2:	2802      	cmp	r0, #2
   18cb4:	d024      	beq.n	18d00 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   18cb6:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   18cba:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   18cbe:	429a      	cmp	r2, r3
   18cc0:	d91e      	bls.n	18d00 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   18cc2:	3301      	adds	r3, #1
   18cc4:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   18cc8:	4b19      	ldr	r3, [pc, #100]	; (18d30 <saadc_irq_handler+0xb8>)
   18cca:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   18cce:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   18cd2:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   18cd4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   18cd8:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   18cdc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   18ce0:	b923      	cbnz	r3, 18cec <saadc_irq_handler+0x74>
}
   18ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   18ce6:	4813      	ldr	r0, [pc, #76]	; (18d34 <saadc_irq_handler+0xbc>)
   18ce8:	f7ff be14 	b.w	18914 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   18cec:	e8d5 3fef 	ldaex	r3, [r5]
   18cf0:	1e5a      	subs	r2, r3, #1
   18cf2:	e8c5 2fe1 	stlex	r1, r2, [r5]
   18cf6:	2900      	cmp	r1, #0
   18cf8:	d1f8      	bne.n	18cec <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   18cfa:	2b01      	cmp	r3, #1
   18cfc:	dcf1      	bgt.n	18ce2 <saadc_irq_handler+0x6a>
   18cfe:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   18d00:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   18d04:	b113      	cbz	r3, 18d0c <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   18d06:	480c      	ldr	r0, [pc, #48]	; (18d38 <saadc_irq_handler+0xc0>)
   18d08:	f00f fc84 	bl	28614 <z_impl_k_timer_stop>
   18d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   18d10:	480a      	ldr	r0, [pc, #40]	; (18d3c <saadc_irq_handler+0xc4>)
   18d12:	f006 ba23 	b.w	1f15c <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18d16:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   18d1a:	2900      	cmp	r1, #0
   18d1c:	d0ef      	beq.n	18cfe <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18d1e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   18d22:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18d26:	2201      	movs	r2, #1
   18d28:	609a      	str	r2, [r3, #8]
   18d2a:	601a      	str	r2, [r3, #0]
   18d2c:	605a      	str	r2, [r3, #4]
}
   18d2e:	e7e6      	b.n	18cfe <saadc_irq_handler+0x86>
   18d30:	4000e000 	.word	0x4000e000
   18d34:	20008168 	.word	0x20008168
   18d38:	20008170 	.word	0x20008170
   18d3c:	200081c0 	.word	0x200081c0

00018d40 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   18d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18d42:	2340      	movs	r3, #64	; 0x40
{
   18d44:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   18d46:	490a      	ldr	r1, [pc, #40]	; (18d70 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18d48:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   18d4a:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18d4c:	1149      	asrs	r1, r1, #5
{
   18d4e:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18d50:	4623      	mov	r3, r4
   18d52:	4a08      	ldr	r2, [pc, #32]	; (18d74 <onoff_start+0x34>)
   18d54:	4808      	ldr	r0, [pc, #32]	; (18d78 <onoff_start+0x38>)
   18d56:	f00e f83a 	bl	26dce <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   18d5a:	1e01      	subs	r1, r0, #0
   18d5c:	da05      	bge.n	18d6a <onoff_start+0x2a>
		notify(mgr, err);
   18d5e:	4628      	mov	r0, r5
   18d60:	4623      	mov	r3, r4
	}
}
   18d62:	b003      	add	sp, #12
   18d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   18d68:	4718      	bx	r3
}
   18d6a:	b003      	add	sp, #12
   18d6c:	bd30      	pop	{r4, r5, pc}
   18d6e:	bf00      	nop
   18d70:	20021168 	.word	0x20021168
   18d74:	00026e3d 	.word	0x00026e3d
   18d78:	00029104 	.word	0x00029104

00018d7c <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   18d7c:	b2c9      	uxtb	r1, r1
   18d7e:	2903      	cmp	r1, #3
{
   18d80:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   18d82:	d909      	bls.n	18d98 <get_status+0x1c>
   18d84:	4909      	ldr	r1, [pc, #36]	; (18dac <get_status+0x30>)
   18d86:	480a      	ldr	r0, [pc, #40]	; (18db0 <get_status+0x34>)
   18d88:	237a      	movs	r3, #122	; 0x7a
   18d8a:	4a0a      	ldr	r2, [pc, #40]	; (18db4 <get_status+0x38>)
   18d8c:	f00b f949 	bl	24022 <assert_print>
   18d90:	217a      	movs	r1, #122	; 0x7a
   18d92:	4808      	ldr	r0, [pc, #32]	; (18db4 <get_status+0x38>)
   18d94:	f00b f93e 	bl	24014 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   18d98:	220c      	movs	r2, #12
   18d9a:	6903      	ldr	r3, [r0, #16]
   18d9c:	fb01 3302 	mla	r3, r1, r2, r3
   18da0:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   18da4:	f000 0007 	and.w	r0, r0, #7
   18da8:	bd08      	pop	{r3, pc}
   18daa:	bf00      	nop
   18dac:	0002e171 	.word	0x0002e171
   18db0:	0002a669 	.word	0x0002a669
   18db4:	0002e134 	.word	0x0002e134

00018db8 <stop>:
{
   18db8:	b570      	push	{r4, r5, r6, lr}
   18dba:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   18dbc:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   18dbe:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   18dc0:	d90b      	bls.n	18dda <stop+0x22>
   18dc2:	491a      	ldr	r1, [pc, #104]	; (18e2c <stop+0x74>)
   18dc4:	481a      	ldr	r0, [pc, #104]	; (18e30 <stop+0x78>)
   18dc6:	f240 135d 	movw	r3, #349	; 0x15d
   18dca:	4a1a      	ldr	r2, [pc, #104]	; (18e34 <stop+0x7c>)
   18dcc:	f00b f929 	bl	24022 <assert_print>
   18dd0:	f240 115d 	movw	r1, #349	; 0x15d
   18dd4:	4817      	ldr	r0, [pc, #92]	; (18e34 <stop+0x7c>)
   18dd6:	f00b f91d 	bl	24014 <assert_post_action>
	__asm__ volatile(
   18dda:	f04f 0420 	mov.w	r4, #32
   18dde:	f3ef 8511 	mrs	r5, BASEPRI
   18de2:	f384 8812 	msr	BASEPRI_MAX, r4
   18de6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   18dea:	260c      	movs	r6, #12
   18dec:	fb06 3401 	mla	r4, r6, r1, r3
   18df0:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   18df4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   18df8:	d008      	beq.n	18e0c <stop+0x54>
   18dfa:	42a2      	cmp	r2, r4
   18dfc:	d006      	beq.n	18e0c <stop+0x54>
	__asm__ volatile(
   18dfe:	f385 8811 	msr	BASEPRI, r5
   18e02:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   18e06:	f04f 30ff 	mov.w	r0, #4294967295
}
   18e0a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   18e0c:	2201      	movs	r2, #1
   18e0e:	4371      	muls	r1, r6
   18e10:	440b      	add	r3, r1
   18e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   18e16:	f385 8811 	msr	BASEPRI, r5
   18e1a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   18e1e:	6843      	ldr	r3, [r0, #4]
   18e20:	440b      	add	r3, r1
   18e22:	685b      	ldr	r3, [r3, #4]
   18e24:	4798      	blx	r3
	return 0;
   18e26:	2000      	movs	r0, #0
   18e28:	e7ef      	b.n	18e0a <stop+0x52>
   18e2a:	bf00      	nop
   18e2c:	0002e171 	.word	0x0002e171
   18e30:	0002a669 	.word	0x0002a669
   18e34:	0002e134 	.word	0x0002e134

00018e38 <onoff_stop>:
{
   18e38:	b570      	push	{r4, r5, r6, lr}
   18e3a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   18e3c:	4906      	ldr	r1, [pc, #24]	; (18e58 <onoff_stop+0x20>)
{
   18e3e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   18e40:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   18e42:	1149      	asrs	r1, r1, #5
   18e44:	2240      	movs	r2, #64	; 0x40
   18e46:	4805      	ldr	r0, [pc, #20]	; (18e5c <onoff_stop+0x24>)
   18e48:	f7ff ffb6 	bl	18db8 <stop>
	notify(mgr, res);
   18e4c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   18e4e:	4601      	mov	r1, r0
	notify(mgr, res);
   18e50:	4620      	mov	r0, r4
}
   18e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   18e56:	4718      	bx	r3
   18e58:	20021168 	.word	0x20021168
   18e5c:	00029104 	.word	0x00029104

00018e60 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   18e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18e64:	2200      	movs	r2, #0
   18e66:	2101      	movs	r1, #1
{
   18e68:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18e6a:	2005      	movs	r0, #5
   18e6c:	f7f6 fb02 	bl	f474 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   18e70:	4811      	ldr	r0, [pc, #68]	; (18eb8 <clk_init+0x58>)
   18e72:	f002 ff81 	bl	1bd78 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   18e76:	4b11      	ldr	r3, [pc, #68]	; (18ebc <clk_init+0x5c>)
   18e78:	4298      	cmp	r0, r3
   18e7a:	d119      	bne.n	18eb0 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   18e7c:	f002 ffa0 	bl	1bdc0 <nrfx_clock_enable>
   18e80:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   18e82:	f04f 080c 	mov.w	r8, #12
   18e86:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   18e88:	f8df 9034 	ldr.w	r9, [pc, #52]	; 18ec0 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   18e8c:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   18e8e:	4649      	mov	r1, r9
   18e90:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   18e94:	f00b f880 	bl	23f98 <onoff_manager_init>
		if (err < 0) {
   18e98:	2800      	cmp	r0, #0
   18e9a:	db07      	blt.n	18eac <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   18e9c:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   18ea0:	3401      	adds	r4, #1
   18ea2:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   18ea4:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   18ea8:	d1f0      	bne.n	18e8c <clk_init+0x2c>
	}

	return 0;
   18eaa:	2000      	movs	r0, #0
}
   18eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   18eb0:	f06f 0004 	mvn.w	r0, #4
   18eb4:	e7fa      	b.n	18eac <clk_init+0x4c>
   18eb6:	bf00      	nop
   18eb8:	00018efd 	.word	0x00018efd
   18ebc:	0bad0000 	.word	0x0bad0000
   18ec0:	0002a2c4 	.word	0x0002a2c4

00018ec4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   18ec4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   18ec6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   18ec8:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   18eca:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   18ecc:	434b      	muls	r3, r1
   18ece:	4809      	ldr	r0, [pc, #36]	; (18ef4 <clkstarted_handle.constprop.0+0x30>)
   18ed0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   18ed2:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   18ed4:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   18ed8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   18eda:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   18ede:	f00d ff63 	bl	26da8 <set_on_state>
	if (callback) {
   18ee2:	b12d      	cbz	r5, 18ef0 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   18ee4:	4632      	mov	r2, r6
   18ee6:	462b      	mov	r3, r5
}
   18ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   18eec:	4802      	ldr	r0, [pc, #8]	; (18ef8 <clkstarted_handle.constprop.0+0x34>)
   18eee:	4718      	bx	r3
}
   18ef0:	bd70      	pop	{r4, r5, r6, pc}
   18ef2:	bf00      	nop
   18ef4:	20021168 	.word	0x20021168
   18ef8:	00029104 	.word	0x00029104

00018efc <clock_event_handler>:
{
   18efc:	b508      	push	{r3, lr}
	switch (event) {
   18efe:	2805      	cmp	r0, #5
   18f00:	d820      	bhi.n	18f44 <clock_event_handler+0x48>
   18f02:	e8df f000 	tbb	[pc, r0]
   18f06:	1103      	.short	0x1103
   18f08:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   18f0c:	4b13      	ldr	r3, [pc, #76]	; (18f5c <clock_event_handler+0x60>)
   18f0e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   18f12:	f010 0007 	ands.w	r0, r0, #7
   18f16:	d11f      	bne.n	18f58 <clock_event_handler+0x5c>
}
   18f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   18f1c:	f7ff bfd2 	b.w	18ec4 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   18f20:	2002      	movs	r0, #2
   18f22:	e7f9      	b.n	18f18 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   18f24:	2003      	movs	r0, #3
   18f26:	e7f7      	b.n	18f18 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   18f28:	2001      	movs	r0, #1
   18f2a:	e7f5      	b.n	18f18 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   18f2c:	490c      	ldr	r1, [pc, #48]	; (18f60 <clock_event_handler+0x64>)
   18f2e:	f240 236e 	movw	r3, #622	; 0x26e
   18f32:	4a0c      	ldr	r2, [pc, #48]	; (18f64 <clock_event_handler+0x68>)
   18f34:	480c      	ldr	r0, [pc, #48]	; (18f68 <clock_event_handler+0x6c>)
   18f36:	f00b f874 	bl	24022 <assert_print>
   18f3a:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   18f3e:	4809      	ldr	r0, [pc, #36]	; (18f64 <clock_event_handler+0x68>)
   18f40:	f00b f868 	bl	24014 <assert_post_action>
   18f44:	4906      	ldr	r1, [pc, #24]	; (18f60 <clock_event_handler+0x64>)
   18f46:	f240 2372 	movw	r3, #626	; 0x272
   18f4a:	4a06      	ldr	r2, [pc, #24]	; (18f64 <clock_event_handler+0x68>)
   18f4c:	4806      	ldr	r0, [pc, #24]	; (18f68 <clock_event_handler+0x6c>)
   18f4e:	f00b f868 	bl	24022 <assert_print>
   18f52:	f240 2172 	movw	r1, #626	; 0x272
   18f56:	e7f2      	b.n	18f3e <clock_event_handler+0x42>
}
   18f58:	bd08      	pop	{r3, pc}
   18f5a:	bf00      	nop
   18f5c:	20021168 	.word	0x20021168
   18f60:	0002fb7c 	.word	0x0002fb7c
   18f64:	0002e134 	.word	0x0002e134
   18f68:	0002a669 	.word	0x0002a669

00018f6c <generic_hfclk_start>:
{
   18f6c:	b508      	push	{r3, lr}
	__asm__ volatile(
   18f6e:	f04f 0320 	mov.w	r3, #32
   18f72:	f3ef 8111 	mrs	r1, BASEPRI
   18f76:	f383 8812 	msr	BASEPRI_MAX, r3
   18f7a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   18f7e:	4a11      	ldr	r2, [pc, #68]	; (18fc4 <generic_hfclk_start+0x58>)
   18f80:	6813      	ldr	r3, [r2, #0]
   18f82:	f043 0002 	orr.w	r0, r3, #2
   18f86:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   18f88:	07da      	lsls	r2, r3, #31
   18f8a:	d408      	bmi.n	18f9e <generic_hfclk_start+0x32>
	__asm__ volatile(
   18f8c:	f381 8811 	msr	BASEPRI, r1
   18f90:	f3bf 8f6f 	isb	sy
}
   18f94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   18f98:	2001      	movs	r0, #1
   18f9a:	f002 bf3b 	b.w	1be14 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18f9e:	4b0a      	ldr	r3, [pc, #40]	; (18fc8 <generic_hfclk_start+0x5c>)
   18fa0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18fa4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   18fa8:	07d3      	lsls	r3, r2, #31
   18faa:	d5ef      	bpl.n	18f8c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   18fac:	4807      	ldr	r0, [pc, #28]	; (18fcc <generic_hfclk_start+0x60>)
   18fae:	f00d fefb 	bl	26da8 <set_on_state>
   18fb2:	f381 8811 	msr	BASEPRI, r1
   18fb6:	f3bf 8f6f 	isb	sy
}
   18fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   18fbe:	2000      	movs	r0, #0
   18fc0:	f7ff bf80 	b.w	18ec4 <clkstarted_handle.constprop.0>
   18fc4:	20021218 	.word	0x20021218
   18fc8:	40005000 	.word	0x40005000
   18fcc:	200211f0 	.word	0x200211f0

00018fd0 <api_blocking_start>:
{
   18fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18fd2:	2200      	movs	r2, #0
   18fd4:	2301      	movs	r3, #1
   18fd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18fda:	ab04      	add	r3, sp, #16
   18fdc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18fe0:	4a09      	ldr	r2, [pc, #36]	; (19008 <api_blocking_start+0x38>)
   18fe2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18fe4:	f8cd d000 	str.w	sp, [sp]
   18fe8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18fec:	f00d ff1f 	bl	26e2e <api_start>
	if (err < 0) {
   18ff0:	2800      	cmp	r0, #0
   18ff2:	db05      	blt.n	19000 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   18ff4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   18ff8:	2300      	movs	r3, #0
   18ffa:	4668      	mov	r0, sp
   18ffc:	f006 f8f2 	bl	1f1e4 <z_impl_k_sem_take>
}
   19000:	b007      	add	sp, #28
   19002:	f85d fb04 	ldr.w	pc, [sp], #4
   19006:	bf00      	nop
   19008:	00026e6d 	.word	0x00026e6d

0001900c <generic_hfclk_stop>:
{
   1900c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1900e:	f04f 0320 	mov.w	r3, #32
   19012:	f3ef 8411 	mrs	r4, BASEPRI
   19016:	f383 8812 	msr	BASEPRI_MAX, r3
   1901a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1901e:	4a07      	ldr	r2, [pc, #28]	; (1903c <generic_hfclk_stop+0x30>)
   19020:	6813      	ldr	r3, [r2, #0]
   19022:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   19026:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   19028:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1902a:	d402      	bmi.n	19032 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1902c:	2001      	movs	r0, #1
   1902e:	f002 ff6f 	bl	1bf10 <nrfx_clock_stop>
	__asm__ volatile(
   19032:	f384 8811 	msr	BASEPRI, r4
   19036:	f3bf 8f6f 	isb	sy
}
   1903a:	bd10      	pop	{r4, pc}
   1903c:	20021218 	.word	0x20021218

00019040 <z_nrf_clock_control_lf_on>:
{
   19040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19044:	2201      	movs	r2, #1
   19046:	4606      	mov	r6, r0
   19048:	4941      	ldr	r1, [pc, #260]	; (19150 <z_nrf_clock_control_lf_on+0x110>)
   1904a:	e8d1 3fef 	ldaex	r3, [r1]
   1904e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   19052:	2800      	cmp	r0, #0
   19054:	d1f9      	bne.n	1904a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   19056:	b9a3      	cbnz	r3, 19082 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   19058:	493e      	ldr	r1, [pc, #248]	; (19154 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1905a:	483f      	ldr	r0, [pc, #252]	; (19158 <z_nrf_clock_control_lf_on+0x118>)
   1905c:	604b      	str	r3, [r1, #4]
   1905e:	60cb      	str	r3, [r1, #12]
   19060:	608a      	str	r2, [r1, #8]
   19062:	f7f3 ffb1 	bl	cfc8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   19066:	2800      	cmp	r0, #0
   19068:	da0b      	bge.n	19082 <z_nrf_clock_control_lf_on+0x42>
   1906a:	493c      	ldr	r1, [pc, #240]	; (1915c <z_nrf_clock_control_lf_on+0x11c>)
   1906c:	f44f 730c 	mov.w	r3, #560	; 0x230
   19070:	4a3b      	ldr	r2, [pc, #236]	; (19160 <z_nrf_clock_control_lf_on+0x120>)
   19072:	483c      	ldr	r0, [pc, #240]	; (19164 <z_nrf_clock_control_lf_on+0x124>)
   19074:	f00a ffd5 	bl	24022 <assert_print>
   19078:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1907c:	4838      	ldr	r0, [pc, #224]	; (19160 <z_nrf_clock_control_lf_on+0x120>)
   1907e:	f00a ffc9 	bl	24014 <assert_post_action>
	switch (start_mode) {
   19082:	b35e      	cbz	r6, 190dc <z_nrf_clock_control_lf_on+0x9c>
   19084:	1e73      	subs	r3, r6, #1
   19086:	2b01      	cmp	r3, #1
   19088:	d858      	bhi.n	1913c <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1908a:	2e01      	cmp	r6, #1
   1908c:	d106      	bne.n	1909c <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1908e:	4b36      	ldr	r3, [pc, #216]	; (19168 <z_nrf_clock_control_lf_on+0x128>)
   19090:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   19094:	f003 0303 	and.w	r3, r3, #3
   19098:	2b02      	cmp	r3, #2
   1909a:	d01f      	beq.n	190dc <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1909c:	f00f f98c 	bl	283b8 <k_is_in_isr>
   190a0:	4605      	mov	r5, r0
   190a2:	b9e8      	cbnz	r0, 190e0 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   190a4:	4b31      	ldr	r3, [pc, #196]	; (1916c <z_nrf_clock_control_lf_on+0x12c>)
   190a6:	781b      	ldrb	r3, [r3, #0]
   190a8:	b1d3      	cbz	r3, 190e0 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   190aa:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   190ac:	4607      	mov	r7, r0
   190ae:	4b2e      	ldr	r3, [pc, #184]	; (19168 <z_nrf_clock_control_lf_on+0x128>)
   190b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   190b4:	4c2c      	ldr	r4, [pc, #176]	; (19168 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   190b6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 19170 <z_nrf_clock_control_lf_on+0x130>
   190ba:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   190be:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   190c2:	03d2      	lsls	r2, r2, #15
   190c4:	d516      	bpl.n	190f4 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   190c6:	f003 0303 	and.w	r3, r3, #3
   190ca:	2b02      	cmp	r3, #2
   190cc:	d001      	beq.n	190d2 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   190ce:	2e01      	cmp	r6, #1
   190d0:	d110      	bne.n	190f4 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   190d2:	b375      	cbz	r5, 19132 <z_nrf_clock_control_lf_on+0xf2>
   190d4:	f387 8811 	msr	BASEPRI, r7
   190d8:	f3bf 8f6f 	isb	sy
}
   190dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   190e0:	f04f 0320 	mov.w	r3, #32
   190e4:	f3ef 8711 	mrs	r7, BASEPRI
   190e8:	f383 8812 	msr	BASEPRI_MAX, r3
   190ec:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   190f0:	2501      	movs	r5, #1
   190f2:	e7df      	b.n	190b4 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   190f4:	b1c5      	cbz	r5, 19128 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   190f6:	4638      	mov	r0, r7
   190f8:	f7f6 f932 	bl	f360 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   190fc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   19100:	b2db      	uxtb	r3, r3
   19102:	2b01      	cmp	r3, #1
   19104:	d1d9      	bne.n	190ba <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19106:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1910a:	2a00      	cmp	r2, #0
   1910c:	d0d5      	beq.n	190ba <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1910e:	2200      	movs	r2, #0
   19110:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19114:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   19118:	2202      	movs	r2, #2
   1911a:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1911e:	2220      	movs	r2, #32
   19120:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19124:	60a3      	str	r3, [r4, #8]
}
   19126:	e7c8      	b.n	190ba <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   19128:	2100      	movs	r1, #0
   1912a:	2021      	movs	r0, #33	; 0x21
   1912c:	f007 ff0a 	bl	20f44 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19130:	e7e4      	b.n	190fc <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   19132:	2202      	movs	r2, #2
   19134:	4b0c      	ldr	r3, [pc, #48]	; (19168 <z_nrf_clock_control_lf_on+0x128>)
   19136:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1913a:	e7cf      	b.n	190dc <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   1913c:	490d      	ldr	r1, [pc, #52]	; (19174 <z_nrf_clock_control_lf_on+0x134>)
   1913e:	f240 2342 	movw	r3, #578	; 0x242
   19142:	4a07      	ldr	r2, [pc, #28]	; (19160 <z_nrf_clock_control_lf_on+0x120>)
   19144:	4807      	ldr	r0, [pc, #28]	; (19164 <z_nrf_clock_control_lf_on+0x124>)
   19146:	f00a ff6c 	bl	24022 <assert_print>
   1914a:	f240 2142 	movw	r1, #578	; 0x242
   1914e:	e795      	b.n	1907c <z_nrf_clock_control_lf_on+0x3c>
   19150:	20021164 	.word	0x20021164
   19154:	20021154 	.word	0x20021154
   19158:	20021188 	.word	0x20021188
   1915c:	0002b754 	.word	0x0002b754
   19160:	0002e134 	.word	0x0002e134
   19164:	0002a669 	.word	0x0002a669
   19168:	40005000 	.word	0x40005000
   1916c:	200221b2 	.word	0x200221b2
   19170:	e000e100 	.word	0xe000e100
   19174:	0002fb7c 	.word	0x0002fb7c

00019178 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   19178:	b508      	push	{r3, lr}
   1917a:	4807      	ldr	r0, [pc, #28]	; (19198 <uart_console_init+0x20>)
   1917c:	f00f f8df 	bl	2833e <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   19180:	b138      	cbz	r0, 19192 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   19182:	4806      	ldr	r0, [pc, #24]	; (1919c <uart_console_init+0x24>)
   19184:	f7f7 f874 	bl	10270 <__stdout_hook_install>
	__printk_hook_install(console_out);
   19188:	4804      	ldr	r0, [pc, #16]	; (1919c <uart_console_init+0x24>)
   1918a:	f7f3 fb9b 	bl	c8c4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1918e:	2000      	movs	r0, #0
}
   19190:	bd08      	pop	{r3, pc}
		return -ENODEV;
   19192:	f06f 0012 	mvn.w	r0, #18
   19196:	e7fb      	b.n	19190 <uart_console_init+0x18>
   19198:	00029194 	.word	0x00029194
   1919c:	000191a1 	.word	0x000191a1

000191a0 <console_out>:
	if ('\n' == c) {
   191a0:	280a      	cmp	r0, #10
{
   191a2:	b538      	push	{r3, r4, r5, lr}
   191a4:	4604      	mov	r4, r0
   191a6:	4d07      	ldr	r5, [pc, #28]	; (191c4 <console_out+0x24>)
	if ('\n' == c) {
   191a8:	d104      	bne.n	191b4 <console_out+0x14>
	api->poll_out(dev, out_char);
   191aa:	68ab      	ldr	r3, [r5, #8]
   191ac:	210d      	movs	r1, #13
   191ae:	4628      	mov	r0, r5
   191b0:	69db      	ldr	r3, [r3, #28]
   191b2:	4798      	blx	r3
   191b4:	68ab      	ldr	r3, [r5, #8]
   191b6:	4803      	ldr	r0, [pc, #12]	; (191c4 <console_out+0x24>)
   191b8:	69db      	ldr	r3, [r3, #28]
   191ba:	b2e1      	uxtb	r1, r4
   191bc:	4798      	blx	r3
}
   191be:	4620      	mov	r0, r4
   191c0:	bd38      	pop	{r3, r4, r5, pc}
   191c2:	bf00      	nop
   191c4:	00029194 	.word	0x00029194

000191c8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   191c8:	b510      	push	{r4, lr}
	return port->data;
   191ca:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   191cc:	b961      	cbnz	r1, 191e8 <gpio_nrfx_manage_callback+0x20>
   191ce:	4920      	ldr	r1, [pc, #128]	; (19250 <gpio_nrfx_manage_callback+0x88>)
   191d0:	232a      	movs	r3, #42	; 0x2a
   191d2:	4a20      	ldr	r2, [pc, #128]	; (19254 <gpio_nrfx_manage_callback+0x8c>)
   191d4:	4820      	ldr	r0, [pc, #128]	; (19258 <gpio_nrfx_manage_callback+0x90>)
   191d6:	f00a ff24 	bl	24022 <assert_print>
   191da:	4820      	ldr	r0, [pc, #128]	; (1925c <gpio_nrfx_manage_callback+0x94>)
   191dc:	f00a ff21 	bl	24022 <assert_print>
   191e0:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   191e2:	481c      	ldr	r0, [pc, #112]	; (19254 <gpio_nrfx_manage_callback+0x8c>)
   191e4:	f00a ff16 	bl	24014 <assert_post_action>
   191e8:	6848      	ldr	r0, [r1, #4]
   191ea:	b950      	cbnz	r0, 19202 <gpio_nrfx_manage_callback+0x3a>
   191ec:	491c      	ldr	r1, [pc, #112]	; (19260 <gpio_nrfx_manage_callback+0x98>)
   191ee:	232b      	movs	r3, #43	; 0x2b
   191f0:	4a18      	ldr	r2, [pc, #96]	; (19254 <gpio_nrfx_manage_callback+0x8c>)
   191f2:	4819      	ldr	r0, [pc, #100]	; (19258 <gpio_nrfx_manage_callback+0x90>)
   191f4:	f00a ff15 	bl	24022 <assert_print>
   191f8:	481a      	ldr	r0, [pc, #104]	; (19264 <gpio_nrfx_manage_callback+0x9c>)
   191fa:	f00a ff12 	bl	24022 <assert_print>
   191fe:	212b      	movs	r1, #43	; 0x2b
   19200:	e7ef      	b.n	191e2 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   19202:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   19204:	b1f8      	cbz	r0, 19246 <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19206:	4288      	cmp	r0, r1
   19208:	d119      	bne.n	1923e <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1920a:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1920c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1920e:	42a1      	cmp	r1, r4
	list->head = node;
   19210:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   19212:	d100      	bne.n	19216 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   19214:	6098      	str	r0, [r3, #8]
	parent->next = child;
   19216:	2000      	movs	r0, #0
   19218:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1921a:	b12a      	cbz	r2, 19228 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1921c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1921e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   19220:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   19222:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   19224:	b902      	cbnz	r2, 19228 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   19226:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   19228:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1922a:	e010      	b.n	1924e <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1922c:	4281      	cmp	r1, r0
   1922e:	d106      	bne.n	1923e <gpio_nrfx_manage_callback+0x76>
	return node->next;
   19230:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   19232:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   19234:	6898      	ldr	r0, [r3, #8]
   19236:	4281      	cmp	r1, r0
   19238:	d1ed      	bne.n	19216 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1923a:	609c      	str	r4, [r3, #8]
}
   1923c:	e7eb      	b.n	19216 <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1923e:	4604      	mov	r4, r0
   19240:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19242:	2800      	cmp	r0, #0
   19244:	d1f2      	bne.n	1922c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   19246:	2a00      	cmp	r2, #0
   19248:	d1e8      	bne.n	1921c <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1924a:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1924e:	bd10      	pop	{r4, pc}
   19250:	0002ac80 	.word	0x0002ac80
   19254:	0002e1cf 	.word	0x0002e1cf
   19258:	0002a669 	.word	0x0002a669
   1925c:	0002e20b 	.word	0x0002e20b
   19260:	0002e21a 	.word	0x0002e21a
   19264:	0002e22c 	.word	0x0002e22c

00019268 <gpio_nrfx_pin_interrupt_configure>:
{
   19268:	b530      	push	{r4, r5, lr}
	return port->config;
   1926a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1926c:	f001 041f 	and.w	r4, r1, #31
   19270:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   19272:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   19276:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19278:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1927c:	d105      	bne.n	1928a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1927e:	4620      	mov	r0, r4
   19280:	f003 f990 	bl	1c5a4 <nrfx_gpiote_trigger_disable>
		return 0;
   19284:	2000      	movs	r0, #0
}
   19286:	b005      	add	sp, #20
   19288:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1928a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1928c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   19290:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   19294:	d114      	bne.n	192c0 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   19296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1929a:	bf0c      	ite	eq
   1929c:	2304      	moveq	r3, #4
   1929e:	2305      	movne	r3, #5
   192a0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   192a4:	2300      	movs	r3, #0
   192a6:	4620      	mov	r0, r4
   192a8:	4619      	mov	r1, r3
   192aa:	aa02      	add	r2, sp, #8
   192ac:	f002 ff84 	bl	1c1b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   192b0:	4b2a      	ldr	r3, [pc, #168]	; (1935c <gpio_nrfx_pin_interrupt_configure+0xf4>)
   192b2:	4298      	cmp	r0, r3
   192b4:	d14f      	bne.n	19356 <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   192b6:	2101      	movs	r1, #1
   192b8:	4620      	mov	r0, r4
   192ba:	f003 f909 	bl	1c4d0 <nrfx_gpiote_trigger_enable>
	return 0;
   192be:	e7e1      	b.n	19284 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   192c0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   192c4:	d024      	beq.n	19310 <gpio_nrfx_pin_interrupt_configure+0xa8>
   192c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   192ca:	bf14      	ite	ne
   192cc:	2301      	movne	r3, #1
   192ce:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   192d0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   192d4:	6883      	ldr	r3, [r0, #8]
   192d6:	40cb      	lsrs	r3, r1
   192d8:	07d8      	lsls	r0, r3, #31
   192da:	d4e3      	bmi.n	192a4 <gpio_nrfx_pin_interrupt_configure+0x3c>
   192dc:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   192e0:	d1e0      	bne.n	192a4 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   192e2:	0962      	lsrs	r2, r4, #5
   192e4:	f004 031f 	and.w	r3, r4, #31
   192e8:	d014      	beq.n	19314 <gpio_nrfx_pin_interrupt_configure+0xac>
   192ea:	2a01      	cmp	r2, #1
   192ec:	d104      	bne.n	192f8 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   192ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   192f2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   192f4:	07d1      	lsls	r1, r2, #31
   192f6:	d414      	bmi.n	19322 <gpio_nrfx_pin_interrupt_configure+0xba>
   192f8:	4919      	ldr	r1, [pc, #100]	; (19360 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   192fa:	481a      	ldr	r0, [pc, #104]	; (19364 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   192fc:	f240 2347 	movw	r3, #583	; 0x247
   19300:	4a19      	ldr	r2, [pc, #100]	; (19368 <gpio_nrfx_pin_interrupt_configure+0x100>)
   19302:	f00a fe8e 	bl	24022 <assert_print>
   19306:	f240 2147 	movw	r1, #583	; 0x247
   1930a:	4817      	ldr	r0, [pc, #92]	; (19368 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1930c:	f00a fe82 	bl	24014 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   19310:	2303      	movs	r3, #3
   19312:	e7dd      	b.n	192d0 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   19314:	f04f 32ff 	mov.w	r2, #4294967295
   19318:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1931a:	07d2      	lsls	r2, r2, #31
   1931c:	d5ec      	bpl.n	192f8 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1931e:	4a13      	ldr	r2, [pc, #76]	; (1936c <gpio_nrfx_pin_interrupt_configure+0x104>)
   19320:	e000      	b.n	19324 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   19322:	4a13      	ldr	r2, [pc, #76]	; (19370 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   19324:	3380      	adds	r3, #128	; 0x80
   19326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1932a:	07db      	lsls	r3, r3, #31
   1932c:	d4ba      	bmi.n	192a4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1932e:	f10d 0507 	add.w	r5, sp, #7
   19332:	4629      	mov	r1, r5
   19334:	4620      	mov	r0, r4
   19336:	f003 f865 	bl	1c404 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1933a:	4b0e      	ldr	r3, [pc, #56]	; (19374 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1933c:	4298      	cmp	r0, r3
   1933e:	d001      	beq.n	19344 <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   19340:	9503      	str	r5, [sp, #12]
   19342:	e7af      	b.n	192a4 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   19344:	4628      	mov	r0, r5
   19346:	f003 f8bd 	bl	1c4c4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1934a:	4b04      	ldr	r3, [pc, #16]	; (1935c <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1934c:	4298      	cmp	r0, r3
   1934e:	d0f7      	beq.n	19340 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   19350:	f06f 000b 	mvn.w	r0, #11
   19354:	e797      	b.n	19286 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   19356:	f06f 0015 	mvn.w	r0, #21
   1935a:	e794      	b.n	19286 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1935c:	0bad0000 	.word	0x0bad0000
   19360:	0002e276 	.word	0x0002e276
   19364:	0002a669 	.word	0x0002a669
   19368:	0002e243 	.word	0x0002e243
   1936c:	40842500 	.word	0x40842500
   19370:	40842800 	.word	0x40842800
   19374:	0bad0004 	.word	0x0bad0004

00019378 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   19378:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1937a:	f003 f893 	bl	1c4a4 <nrfx_gpiote_is_init>
   1937e:	4604      	mov	r4, r0
   19380:	b968      	cbnz	r0, 1939e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   19382:	f003 f867 	bl	1c454 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   19386:	4b08      	ldr	r3, [pc, #32]	; (193a8 <gpio_nrfx_init+0x30>)
   19388:	4298      	cmp	r0, r3
   1938a:	d10a      	bne.n	193a2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1938c:	4621      	mov	r1, r4
   1938e:	4807      	ldr	r0, [pc, #28]	; (193ac <gpio_nrfx_init+0x34>)
   19390:	f003 f832 	bl	1c3f8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   19394:	4622      	mov	r2, r4
   19396:	2105      	movs	r1, #5
   19398:	202f      	movs	r0, #47	; 0x2f
   1939a:	f7f6 f86b 	bl	f474 <z_arm_irq_priority_set>
		return 0;
   1939e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   193a0:	bd10      	pop	{r4, pc}
		return -EIO;
   193a2:	f06f 0004 	mvn.w	r0, #4
   193a6:	e7fb      	b.n	193a0 <gpio_nrfx_init+0x28>
   193a8:	0bad0000 	.word	0x0bad0000
   193ac:	000193b1 	.word	0x000193b1

000193b0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   193b0:	0942      	lsrs	r2, r0, #5
{
   193b2:	4603      	mov	r3, r0
   193b4:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   193b6:	d002      	beq.n	193be <nrfx_gpio_handler+0xe>
   193b8:	2a01      	cmp	r2, #1
   193ba:	d01e      	beq.n	193fa <nrfx_gpio_handler+0x4a>
}
   193bc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   193be:	4e14      	ldr	r6, [pc, #80]	; (19410 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   193c0:	6932      	ldr	r2, [r6, #16]
   193c2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   193c4:	2900      	cmp	r1, #0
   193c6:	d0f9      	beq.n	193bc <nrfx_gpio_handler+0xc>
   193c8:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   193ca:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   193ce:	680c      	ldr	r4, [r1, #0]
   193d0:	409d      	lsls	r5, r3
   193d2:	2900      	cmp	r1, #0
   193d4:	d0f2      	beq.n	193bc <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   193d6:	688a      	ldr	r2, [r1, #8]
   193d8:	402a      	ands	r2, r5
   193da:	d012      	beq.n	19402 <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   193dc:	684b      	ldr	r3, [r1, #4]
   193de:	b973      	cbnz	r3, 193fe <nrfx_gpio_handler+0x4e>
   193e0:	490c      	ldr	r1, [pc, #48]	; (19414 <nrfx_gpio_handler+0x64>)
   193e2:	234d      	movs	r3, #77	; 0x4d
   193e4:	4a0c      	ldr	r2, [pc, #48]	; (19418 <nrfx_gpio_handler+0x68>)
   193e6:	480d      	ldr	r0, [pc, #52]	; (1941c <nrfx_gpio_handler+0x6c>)
   193e8:	f00a fe1b 	bl	24022 <assert_print>
   193ec:	480c      	ldr	r0, [pc, #48]	; (19420 <nrfx_gpio_handler+0x70>)
   193ee:	f00a fe18 	bl	24022 <assert_print>
   193f2:	214d      	movs	r1, #77	; 0x4d
   193f4:	4808      	ldr	r0, [pc, #32]	; (19418 <nrfx_gpio_handler+0x68>)
   193f6:	f00a fe0d 	bl	24014 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   193fa:	4e0a      	ldr	r6, [pc, #40]	; (19424 <nrfx_gpio_handler+0x74>)
   193fc:	e7e0      	b.n	193c0 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   193fe:	4630      	mov	r0, r6
   19400:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19402:	b11c      	cbz	r4, 1940c <nrfx_gpio_handler+0x5c>
   19404:	6823      	ldr	r3, [r4, #0]
   19406:	4621      	mov	r1, r4
   19408:	461c      	mov	r4, r3
   1940a:	e7e2      	b.n	193d2 <nrfx_gpio_handler+0x22>
   1940c:	4623      	mov	r3, r4
   1940e:	e7fa      	b.n	19406 <nrfx_gpio_handler+0x56>
   19410:	00029134 	.word	0x00029134
   19414:	0002ef98 	.word	0x0002ef98
   19418:	0002e1cf 	.word	0x0002e1cf
   1941c:	0002a669 	.word	0x0002a669
   19420:	0002e22c 	.word	0x0002e22c
   19424:	0002911c 	.word	0x0002911c

00019428 <gpio_nrfx_pin_configure>:
{
   19428:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1942c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19430:	f001 051f 	and.w	r5, r1, #31
   19434:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   19438:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1943a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1943e:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   19440:	4628      	mov	r0, r5
   19442:	f10d 0103 	add.w	r1, sp, #3
   19446:	f002 ffdd 	bl	1c404 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1944a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1944e:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   19450:	d115      	bne.n	1947e <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   19452:	4628      	mov	r0, r5
   19454:	f003 f8d0 	bl	1c5f8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   19458:	4b48      	ldr	r3, [pc, #288]	; (1957c <gpio_nrfx_pin_configure+0x154>)
   1945a:	429e      	cmp	r6, r3
   1945c:	d170      	bne.n	19540 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1945e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   19462:	f003 f829 	bl	1c4b8 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19466:	42b0      	cmp	r0, r6
   19468:	d06a      	beq.n	19540 <gpio_nrfx_pin_configure+0x118>
   1946a:	4945      	ldr	r1, [pc, #276]	; (19580 <gpio_nrfx_pin_configure+0x158>)
   1946c:	236a      	movs	r3, #106	; 0x6a
   1946e:	4a45      	ldr	r2, [pc, #276]	; (19584 <gpio_nrfx_pin_configure+0x15c>)
   19470:	4845      	ldr	r0, [pc, #276]	; (19588 <gpio_nrfx_pin_configure+0x160>)
   19472:	f00a fdd6 	bl	24022 <assert_print>
   19476:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19478:	4842      	ldr	r0, [pc, #264]	; (19584 <gpio_nrfx_pin_configure+0x15c>)
   1947a:	f00a fdcb 	bl	24014 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1947e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19480:	4628      	mov	r0, r5
   19482:	4619      	mov	r1, r3
   19484:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   19486:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1948a:	f002 fe95 	bl	1c1b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1948e:	4b3b      	ldr	r3, [pc, #236]	; (1957c <gpio_nrfx_pin_configure+0x154>)
   19490:	4298      	cmp	r0, r3
   19492:	d004      	beq.n	1949e <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   19494:	f06f 0015 	mvn.w	r0, #21
}
   19498:	b004      	add	sp, #16
   1949a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1949e:	4286      	cmp	r6, r0
   194a0:	d10d      	bne.n	194be <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   194a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   194a6:	f003 f807 	bl	1c4b8 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   194aa:	42b0      	cmp	r0, r6
   194ac:	d007      	beq.n	194be <gpio_nrfx_pin_configure+0x96>
   194ae:	4934      	ldr	r1, [pc, #208]	; (19580 <gpio_nrfx_pin_configure+0x158>)
   194b0:	237c      	movs	r3, #124	; 0x7c
   194b2:	4a34      	ldr	r2, [pc, #208]	; (19584 <gpio_nrfx_pin_configure+0x15c>)
   194b4:	4834      	ldr	r0, [pc, #208]	; (19588 <gpio_nrfx_pin_configure+0x160>)
   194b6:	f00a fdb4 	bl	24022 <assert_print>
   194ba:	217c      	movs	r1, #124	; 0x7c
   194bc:	e7dc      	b.n	19478 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   194be:	03a6      	lsls	r6, r4, #14
   194c0:	d54c      	bpl.n	1955c <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   194c2:	f240 3306 	movw	r3, #774	; 0x306
   194c6:	4023      	ands	r3, r4
   194c8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   194cc:	d019      	beq.n	19502 <gpio_nrfx_pin_configure+0xda>
   194ce:	d80c      	bhi.n	194ea <gpio_nrfx_pin_configure+0xc2>
   194d0:	2b06      	cmp	r3, #6
   194d2:	d017      	beq.n	19504 <gpio_nrfx_pin_configure+0xdc>
   194d4:	d804      	bhi.n	194e0 <gpio_nrfx_pin_configure+0xb8>
   194d6:	b1ab      	cbz	r3, 19504 <gpio_nrfx_pin_configure+0xdc>
   194d8:	2b02      	cmp	r3, #2
   194da:	d1db      	bne.n	19494 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   194dc:	2304      	movs	r3, #4
   194de:	e011      	b.n	19504 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   194e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   194e4:	d1d6      	bne.n	19494 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   194e6:	2301      	movs	r3, #1
   194e8:	e00c      	b.n	19504 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   194ea:	f240 2202 	movw	r2, #514	; 0x202
   194ee:	4293      	cmp	r3, r2
   194f0:	d028      	beq.n	19544 <gpio_nrfx_pin_configure+0x11c>
   194f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   194f6:	d027      	beq.n	19548 <gpio_nrfx_pin_configure+0x120>
   194f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   194fc:	d1ca      	bne.n	19494 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   194fe:	2302      	movs	r3, #2
   19500:	e000      	b.n	19504 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   19502:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   19504:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   19508:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1950c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   19510:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   19512:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   19516:	bf4c      	ite	mi
   19518:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1951a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1951e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   19520:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   19524:	d512      	bpl.n	1954c <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   19526:	2301      	movs	r3, #1
   19528:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1952c:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1952e:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   19530:	2200      	movs	r2, #0
   19532:	4628      	mov	r0, r5
   19534:	a901      	add	r1, sp, #4
   19536:	f002 fee7 	bl	1c308 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1953a:	4b10      	ldr	r3, [pc, #64]	; (1957c <gpio_nrfx_pin_configure+0x154>)
   1953c:	4298      	cmp	r0, r3
   1953e:	d1a9      	bne.n	19494 <gpio_nrfx_pin_configure+0x6c>
   19540:	2000      	movs	r0, #0
   19542:	e7a9      	b.n	19498 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   19544:	2305      	movs	r3, #5
   19546:	e7dd      	b.n	19504 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19548:	2303      	movs	r3, #3
   1954a:	e7db      	b.n	19504 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1954c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1954e:	bf41      	itttt	mi
   19550:	2301      	movmi	r3, #1
   19552:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   19556:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   19558:	60d3      	strmi	r3, [r2, #12]
}
   1955a:	e7e9      	b.n	19530 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1955c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1955e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   19562:	bf4c      	ite	mi
   19564:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   19566:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1956a:	461a      	mov	r2, r3
   1956c:	4628      	mov	r0, r5
   1956e:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   19570:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19574:	f002 fe20 	bl	1c1b8 <nrfx_gpiote_input_configure>
   19578:	e7df      	b.n	1953a <gpio_nrfx_pin_configure+0x112>
   1957a:	bf00      	nop
   1957c:	0bad0000 	.word	0x0bad0000
   19580:	0002b4bd 	.word	0x0002b4bd
   19584:	0002e299 	.word	0x0002e299
   19588:	0002a669 	.word	0x0002a669

0001958c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1958c:	4603      	mov	r3, r0
   1958e:	b510      	push	{r4, lr}
   19590:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   19592:	7919      	ldrb	r1, [r3, #4]
   19594:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   19596:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   19598:	fa03 f101 	lsl.w	r1, r3, r1
   1959c:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1959e:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   195a0:	681b      	ldr	r3, [r3, #0]
   195a2:	4219      	tst	r1, r3
   195a4:	d10e      	bne.n	195c4 <gpio_pin_set_dt.isra.0+0x38>
   195a6:	490e      	ldr	r1, [pc, #56]	; (195e0 <gpio_pin_set_dt.isra.0+0x54>)
   195a8:	f240 533d 	movw	r3, #1341	; 0x53d
   195ac:	4a0d      	ldr	r2, [pc, #52]	; (195e4 <gpio_pin_set_dt.isra.0+0x58>)
   195ae:	480e      	ldr	r0, [pc, #56]	; (195e8 <gpio_pin_set_dt.isra.0+0x5c>)
   195b0:	f00a fd37 	bl	24022 <assert_print>
   195b4:	480d      	ldr	r0, [pc, #52]	; (195ec <gpio_pin_set_dt.isra.0+0x60>)
   195b6:	f00a fd34 	bl	24022 <assert_print>
   195ba:	f240 513d 	movw	r1, #1341	; 0x53d
   195be:	4809      	ldr	r0, [pc, #36]	; (195e4 <gpio_pin_set_dt.isra.0+0x58>)
   195c0:	f00a fd28 	bl	24014 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   195c4:	6823      	ldr	r3, [r4, #0]
   195c6:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   195c8:	bf18      	it	ne
   195ca:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   195ce:	b122      	cbz	r2, 195da <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   195d0:	6883      	ldr	r3, [r0, #8]
   195d2:	68db      	ldr	r3, [r3, #12]
}
   195d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   195d8:	4718      	bx	r3
   195da:	6883      	ldr	r3, [r0, #8]
   195dc:	691b      	ldr	r3, [r3, #16]
   195de:	e7f9      	b.n	195d4 <gpio_pin_set_dt.isra.0+0x48>
   195e0:	0002a62b 	.word	0x0002a62b
   195e4:	0002a5fa 	.word	0x0002a5fa
   195e8:	0002a669 	.word	0x0002a669
   195ec:	0002a686 	.word	0x0002a686

000195f0 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   195f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   195f4:	6844      	ldr	r4, [r0, #4]
{
   195f6:	b088      	sub	sp, #32
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   195f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   195fa:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   195fc:	2100      	movs	r1, #0
   195fe:	4630      	mov	r0, r6
   19600:	aa07      	add	r2, sp, #28
   19602:	f00d ff90 	bl	27526 <pinctrl_lookup_state>
	if (ret < 0) {
   19606:	2800      	cmp	r0, #0
   19608:	db2a      	blt.n	19660 <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1960a:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1960c:	6832      	ldr	r2, [r6, #0]
   1960e:	7919      	ldrb	r1, [r3, #4]
   19610:	6818      	ldr	r0, [r3, #0]
   19612:	f00d ff9b 	bl	2754c <pinctrl_configure_pins>
	if (err < 0) {
   19616:	2800      	cmp	r0, #0
   19618:	db22      	blt.n	19660 <spi_nrfx_init+0x70>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1961a:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1961c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1961e:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   19620:	68ac      	ldr	r4, [r5, #8]
   19622:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   19626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1962a:	429c      	cmp	r4, r3
   1962c:	d304      	bcc.n	19638 <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1962e:	4628      	mov	r0, r5
   19630:	f00d fc90 	bl	26f54 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   19634:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   19636:	e013      	b.n	19660 <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
   19638:	6820      	ldr	r0, [r4, #0]
   1963a:	f00e fe80 	bl	2833e <z_device_is_ready>
   1963e:	4603      	mov	r3, r0
   19640:	b988      	cbnz	r0, 19666 <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   19642:	7922      	ldrb	r2, [r4, #4]
   19644:	4932      	ldr	r1, [pc, #200]	; (19710 <spi_nrfx_init+0x120>)
   19646:	9204      	str	r2, [sp, #16]
   19648:	6822      	ldr	r2, [r4, #0]
   1964a:	6812      	ldr	r2, [r2, #0]
   1964c:	9000      	str	r0, [sp, #0]
   1964e:	9203      	str	r2, [sp, #12]
   19650:	4a30      	ldr	r2, [pc, #192]	; (19714 <spi_nrfx_init+0x124>)
   19652:	e9cd 0201 	strd	r0, r2, [sp, #4]
   19656:	2201      	movs	r2, #1
   19658:	f00d fc4a 	bl	26ef0 <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   1965c:	f06f 0012 	mvn.w	r0, #18
#endif
}
   19660:	b008      	add	sp, #32
   19662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
   19666:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   19668:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1966a:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1966c:	f003 0230 	and.w	r2, r3, #48	; 0x30
   19670:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   19672:	f8d0 e010 	ldr.w	lr, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   19676:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1967a:	d10e      	bne.n	1969a <spi_nrfx_init+0xaa>
   1967c:	4926      	ldr	r1, [pc, #152]	; (19718 <spi_nrfx_init+0x128>)
   1967e:	f240 23b7 	movw	r3, #695	; 0x2b7
   19682:	4a26      	ldr	r2, [pc, #152]	; (1971c <spi_nrfx_init+0x12c>)
   19684:	4826      	ldr	r0, [pc, #152]	; (19720 <spi_nrfx_init+0x130>)
   19686:	f00a fccc 	bl	24022 <assert_print>
   1968a:	4826      	ldr	r0, [pc, #152]	; (19724 <spi_nrfx_init+0x134>)
   1968c:	f00a fcc9 	bl	24022 <assert_print>
   19690:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   19694:	4821      	ldr	r0, [pc, #132]	; (1971c <spi_nrfx_init+0x12c>)
   19696:	f00a fcbd 	bl	24014 <assert_post_action>
   1969a:	f003 0206 	and.w	r2, r3, #6
   1969e:	2a04      	cmp	r2, #4
   196a0:	d109      	bne.n	196b6 <spi_nrfx_init+0xc6>
   196a2:	4921      	ldr	r1, [pc, #132]	; (19728 <spi_nrfx_init+0x138>)
   196a4:	f240 23bf 	movw	r3, #703	; 0x2bf
   196a8:	4a1c      	ldr	r2, [pc, #112]	; (1971c <spi_nrfx_init+0x12c>)
   196aa:	481d      	ldr	r0, [pc, #116]	; (19720 <spi_nrfx_init+0x130>)
   196ac:	f00a fcb9 	bl	24022 <assert_print>
   196b0:	f240 21bf 	movw	r1, #703	; 0x2bf
   196b4:	e7ee      	b.n	19694 <spi_nrfx_init+0xa4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   196b6:	683f      	ldr	r7, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   196b8:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   196ba:	fa06 fc01 	lsl.w	ip, r6, r1
	return gpio_pin_configure(spec->port,
   196be:	bf54      	ite	pl
   196c0:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   196c4:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   196c8:	ea1c 0f07 	tst.w	ip, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   196cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   196d0:	d10c      	bne.n	196ec <spi_nrfx_init+0xfc>
   196d2:	4916      	ldr	r1, [pc, #88]	; (1972c <spi_nrfx_init+0x13c>)
   196d4:	f240 23d2 	movw	r3, #722	; 0x2d2
   196d8:	4a10      	ldr	r2, [pc, #64]	; (1971c <spi_nrfx_init+0x12c>)
   196da:	4811      	ldr	r0, [pc, #68]	; (19720 <spi_nrfx_init+0x130>)
   196dc:	f00a fca1 	bl	24022 <assert_print>
   196e0:	4813      	ldr	r0, [pc, #76]	; (19730 <spi_nrfx_init+0x140>)
   196e2:	f00a fc9e 	bl	24022 <assert_print>
   196e6:	f240 21d2 	movw	r1, #722	; 0x2d2
   196ea:	e7d3      	b.n	19694 <spi_nrfx_init+0xa4>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   196ec:	f8de 7000 	ldr.w	r7, [lr]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   196f0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   196f2:	bf4c      	ite	mi
   196f4:	ea4c 0707 	orrmi.w	r7, ip, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   196f8:	ea27 070c 	bicpl.w	r7, r7, ip
   196fc:	f8ce 7000 	str.w	r7, [lr]
	return api->pin_configure(port, pin, flags);
   19700:	f8d8 3000 	ldr.w	r3, [r8]
   19704:	4798      	blx	r3
		if (ret < 0) {
   19706:	2800      	cmp	r0, #0
   19708:	dbaa      	blt.n	19660 <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1970a:	3408      	adds	r4, #8
   1970c:	e789      	b.n	19622 <spi_nrfx_init+0x32>
   1970e:	bf00      	nop
   19710:	000297a4 	.word	0x000297a4
   19714:	0002e2dd 	.word	0x0002e2dd
   19718:	0002a902 	.word	0x0002a902
   1971c:	0002a5fa 	.word	0x0002a5fa
   19720:	0002a669 	.word	0x0002a669
   19724:	0002a93b 	.word	0x0002a93b
   19728:	0002a9ff 	.word	0x0002a9ff
   1972c:	0002a62b 	.word	0x0002a62b
   19730:	0002a686 	.word	0x0002a686

00019734 <transfer_next_chunk>:
{
   19734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   19736:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   19738:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1973a:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1973c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1973e:	b98d      	cbnz	r5, 19764 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   19740:	2b00      	cmp	r3, #0
   19742:	d137      	bne.n	197b4 <transfer_next_chunk+0x80>
	int error = 0;
   19744:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   19746:	2200      	movs	r2, #0
   19748:	4620      	mov	r0, r4
   1974a:	4611      	mov	r1, r2
   1974c:	f00d fbe0 	bl	26f10 <_spi_context_cs_control>
	ctx->sync_status = status;
   19750:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   19752:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19756:	f005 fd01 	bl	1f15c <z_impl_k_sem_give>
	dev_data->busy = false;
   1975a:	2300      	movs	r3, #0
   1975c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   19760:	b004      	add	sp, #16
   19762:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   19764:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   19766:	bb0b      	cbnz	r3, 197ac <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   19768:	bb39      	cbnz	r1, 197ba <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1976a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1976e:	42aa      	cmp	r2, r5
   19770:	bf28      	it	cs
   19772:	462a      	movcs	r2, r5
   19774:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   19776:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   19778:	9100      	str	r1, [sp, #0]
   1977a:	b11b      	cbz	r3, 19784 <transfer_next_chunk+0x50>
   1977c:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1977e:	2b00      	cmp	r3, #0
   19780:	bf18      	it	ne
   19782:	4613      	movne	r3, r2
   19784:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   19786:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19788:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1978a:	b11b      	cbz	r3, 19794 <transfer_next_chunk+0x60>
   1978c:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1978e:	2b00      	cmp	r3, #0
   19790:	bf18      	it	ne
   19792:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   19794:	2200      	movs	r2, #0
   19796:	4669      	mov	r1, sp
   19798:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1979a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1979c:	f003 fed0 	bl	1d540 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   197a0:	4b0d      	ldr	r3, [pc, #52]	; (197d8 <transfer_next_chunk+0xa4>)
   197a2:	4298      	cmp	r0, r3
   197a4:	d0dc      	beq.n	19760 <transfer_next_chunk+0x2c>
			error = -EIO;
   197a6:	f06f 0504 	mvn.w	r5, #4
   197aa:	e7cc      	b.n	19746 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   197ac:	429d      	cmp	r5, r3
   197ae:	bf28      	it	cs
   197b0:	461d      	movcs	r5, r3
   197b2:	e7d9      	b.n	19768 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   197b4:	461d      	mov	r5, r3
   197b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   197b8:	e7d7      	b.n	1976a <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   197ba:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   197be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   197c2:	d0d2      	beq.n	1976a <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   197c4:	2d08      	cmp	r5, #8
   197c6:	bf28      	it	cs
   197c8:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   197ca:	6f20      	ldr	r0, [r4, #112]	; 0x70
   197cc:	462a      	mov	r2, r5
   197ce:	f00e fff8 	bl	287c2 <memcpy>
			tx_buf = dev_data->buffer;
   197d2:	6f21      	ldr	r1, [r4, #112]	; 0x70
   197d4:	e7c9      	b.n	1976a <transfer_next_chunk+0x36>
   197d6:	bf00      	nop
   197d8:	0bad0000 	.word	0x0bad0000

000197dc <event_handler>:
{
   197dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   197de:	7803      	ldrb	r3, [r0, #0]
{
   197e0:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   197e2:	2b00      	cmp	r3, #0
   197e4:	d154      	bne.n	19890 <event_handler+0xb4>
	if (!ctx->tx_len) {
   197e6:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   197e8:	6e89      	ldr	r1, [r1, #104]	; 0x68
   197ea:	b152      	cbz	r2, 19802 <event_handler+0x26>
	if (len > ctx->tx_len) {
   197ec:	4291      	cmp	r1, r2
   197ee:	d91d      	bls.n	1982c <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   197f0:	4a28      	ldr	r2, [pc, #160]	; (19894 <event_handler+0xb8>)
   197f2:	4618      	mov	r0, r3
   197f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   197f8:	4927      	ldr	r1, [pc, #156]	; (19898 <event_handler+0xbc>)
   197fa:	2201      	movs	r2, #1
   197fc:	9300      	str	r3, [sp, #0]
   197fe:	f00d fb77 	bl	26ef0 <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   19802:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   19804:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   19806:	b15b      	cbz	r3, 19820 <event_handler+0x44>
	if (len > ctx->rx_len) {
   19808:	429a      	cmp	r2, r3
   1980a:	d928      	bls.n	1985e <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   1980c:	4b21      	ldr	r3, [pc, #132]	; (19894 <event_handler+0xb8>)
   1980e:	2201      	movs	r2, #1
   19810:	9302      	str	r3, [sp, #8]
   19812:	2300      	movs	r3, #0
   19814:	4920      	ldr	r1, [pc, #128]	; (19898 <event_handler+0xbc>)
   19816:	4618      	mov	r0, r3
   19818:	e9cd 3300 	strd	r3, r3, [sp]
   1981c:	f00d fb68 	bl	26ef0 <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   19820:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   19822:	b004      	add	sp, #16
   19824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   19828:	f7ff bf84 	b.w	19734 <transfer_next_chunk>
	ctx->tx_len -= len;
   1982c:	1a52      	subs	r2, r2, r1
   1982e:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   19830:	b97a      	cbnz	r2, 19852 <event_handler+0x76>
		++ctx->current_tx;
   19832:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   19834:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   19838:	3308      	adds	r3, #8
   1983a:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   1983c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1983e:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   19842:	3b01      	subs	r3, #1
   19844:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   19846:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1984a:	f00d fb3e 	bl	26eca <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1984e:	6560      	str	r0, [r4, #84]	; 0x54
   19850:	e7d7      	b.n	19802 <event_handler+0x26>
	} else if (ctx->tx_buf) {
   19852:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19854:	2b00      	cmp	r3, #0
   19856:	d0d4      	beq.n	19802 <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   19858:	440b      	add	r3, r1
   1985a:	6563      	str	r3, [r4, #84]	; 0x54
   1985c:	e7d1      	b.n	19802 <event_handler+0x26>
	ctx->rx_len -= len;
   1985e:	1a9b      	subs	r3, r3, r2
   19860:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   19862:	b97b      	cbnz	r3, 19884 <event_handler+0xa8>
		++ctx->current_rx;
   19864:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   19866:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1986a:	3308      	adds	r3, #8
   1986c:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1986e:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   19870:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   19874:	3b01      	subs	r3, #1
   19876:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   19878:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1987c:	f00d fb25 	bl	26eca <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   19880:	65e0      	str	r0, [r4, #92]	; 0x5c
   19882:	e7cd      	b.n	19820 <event_handler+0x44>
	} else if (ctx->rx_buf) {
   19884:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19886:	2b00      	cmp	r3, #0
   19888:	d0ca      	beq.n	19820 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   1988a:	4413      	add	r3, r2
   1988c:	65e3      	str	r3, [r4, #92]	; 0x5c
   1988e:	e7c7      	b.n	19820 <event_handler+0x44>
}
   19890:	b004      	add	sp, #16
   19892:	bd10      	pop	{r4, pc}
   19894:	0002e301 	.word	0x0002e301
   19898:	000297a4 	.word	0x000297a4

0001989c <spi_nrfx_transceive>:
{
   1989c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198a0:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   198a2:	888b      	ldrh	r3, [r1, #4]
   198a4:	460f      	mov	r7, r1
   198a6:	0499      	lsls	r1, r3, #18
   198a8:	4680      	mov	r8, r0
   198aa:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   198ac:	6904      	ldr	r4, [r0, #16]
{
   198ae:	b08f      	sub	sp, #60	; 0x3c
   198b0:	d435      	bmi.n	1991e <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   198b2:	f04f 32ff 	mov.w	r2, #4294967295
   198b6:	f04f 33ff 	mov.w	r3, #4294967295
   198ba:	f104 0010 	add.w	r0, r4, #16
   198be:	f005 fc91 	bl	1f1e4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   198c2:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   198c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   198c8:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   198cc:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   198ce:	9305      	str	r3, [sp, #20]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   198d0:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   198d4:	9306      	str	r3, [sp, #24]
   198d6:	b123      	cbz	r3, 198e2 <spi_nrfx_transceive+0x46>
   198d8:	f8da 3000 	ldr.w	r3, [sl]
   198dc:	429f      	cmp	r7, r3
   198de:	f000 80da 	beq.w	19a96 <spi_nrfx_transceive+0x1fa>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   198e2:	88be      	ldrh	r6, [r7, #4]
   198e4:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   198e8:	d020      	beq.n	1992c <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   198ea:	4ba1      	ldr	r3, [pc, #644]	; (19b70 <spi_nrfx_transceive+0x2d4>)
   198ec:	2201      	movs	r2, #1
   198ee:	9302      	str	r3, [sp, #8]
   198f0:	2300      	movs	r3, #0
   198f2:	49a0      	ldr	r1, [pc, #640]	; (19b74 <spi_nrfx_transceive+0x2d8>)
   198f4:	4618      	mov	r0, r3
   198f6:	e9cd 3300 	strd	r3, r3, [sp]
   198fa:	f00d faf9 	bl	26ef0 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   198fe:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   19902:	6823      	ldr	r3, [r4, #0]
   19904:	889b      	ldrh	r3, [r3, #4]
   19906:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1990a:	d104      	bne.n	19916 <spi_nrfx_transceive+0x7a>
		ctx->owner = NULL;
   1990c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1990e:	f104 0010 	add.w	r0, r4, #16
   19912:	f005 fc23 	bl	1f15c <z_impl_k_sem_give>
}
   19916:	4628      	mov	r0, r5
   19918:	b00f      	add	sp, #60	; 0x3c
   1991a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1991e:	69a3      	ldr	r3, [r4, #24]
   19920:	2b00      	cmp	r3, #0
   19922:	d1c6      	bne.n	198b2 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   19924:	6863      	ldr	r3, [r4, #4]
   19926:	429f      	cmp	r7, r3
   19928:	d1c3      	bne.n	198b2 <spi_nrfx_transceive+0x16>
   1992a:	e7cb      	b.n	198c4 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1992c:	f016 0201 	ands.w	r2, r6, #1
   19930:	d00e      	beq.n	19950 <spi_nrfx_transceive+0xb4>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   19932:	f8d8 2000 	ldr.w	r2, [r8]
   19936:	4618      	mov	r0, r3
   19938:	9203      	str	r2, [sp, #12]
   1993a:	4a8f      	ldr	r2, [pc, #572]	; (19b78 <spi_nrfx_transceive+0x2dc>)
   1993c:	498d      	ldr	r1, [pc, #564]	; (19b74 <spi_nrfx_transceive+0x2d8>)
   1993e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   19942:	9300      	str	r3, [sp, #0]
   19944:	2201      	movs	r2, #1
   19946:	f00d fad3 	bl	26ef0 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1994a:	f06f 0515 	mvn.w	r5, #21
   1994e:	e7d8      	b.n	19902 <spi_nrfx_transceive+0x66>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   19950:	f016 0308 	ands.w	r3, r6, #8
   19954:	d00a      	beq.n	1996c <spi_nrfx_transceive+0xd0>
		LOG_ERR("Loopback mode is not supported");
   19956:	4b89      	ldr	r3, [pc, #548]	; (19b7c <spi_nrfx_transceive+0x2e0>)
   19958:	9200      	str	r2, [sp, #0]
   1995a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1995e:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   19960:	2201      	movs	r2, #1
   19962:	4618      	mov	r0, r3
   19964:	4983      	ldr	r1, [pc, #524]	; (19b74 <spi_nrfx_transceive+0x2d8>)
   19966:	f00d fac3 	bl	26ef0 <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   1996a:	e7ee      	b.n	1994a <spi_nrfx_transceive+0xae>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1996c:	f3c6 1245 	ubfx	r2, r6, #5, #6
   19970:	2a08      	cmp	r2, #8
   19972:	d004      	beq.n	1997e <spi_nrfx_transceive+0xe2>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   19974:	4a82      	ldr	r2, [pc, #520]	; (19b80 <spi_nrfx_transceive+0x2e4>)
   19976:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1997a:	9300      	str	r3, [sp, #0]
   1997c:	e7f0      	b.n	19960 <spi_nrfx_transceive+0xc4>
	if (spi_cfg->frequency < 125000) {
   1997e:	683a      	ldr	r2, [r7, #0]
   19980:	9207      	str	r2, [sp, #28]
   19982:	9907      	ldr	r1, [sp, #28]
   19984:	4a7f      	ldr	r2, [pc, #508]	; (19b84 <spi_nrfx_transceive+0x2e8>)
   19986:	4291      	cmp	r1, r2
   19988:	d801      	bhi.n	1998e <spi_nrfx_transceive+0xf2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1998a:	4a7f      	ldr	r2, [pc, #508]	; (19b88 <spi_nrfx_transceive+0x2ec>)
   1998c:	e7f3      	b.n	19976 <spi_nrfx_transceive+0xda>
	if (max_freq > 16000000 &&
   1998e:	4b7f      	ldr	r3, [pc, #508]	; (19b8c <spi_nrfx_transceive+0x2f0>)
   19990:	429d      	cmp	r5, r3
   19992:	d906      	bls.n	199a2 <spi_nrfx_transceive+0x106>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   19994:	4a7e      	ldr	r2, [pc, #504]	; (19b90 <spi_nrfx_transceive+0x2f4>)
   19996:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1999a:	f012 0f03 	tst.w	r2, #3
   1999e:	bf18      	it	ne
   199a0:	461d      	movne	r5, r3
	config = dev_config->def_config;
   199a2:	9b05      	ldr	r3, [sp, #20]
   199a4:	f10d 0c20 	add.w	ip, sp, #32
   199a8:	f103 0e0c 	add.w	lr, r3, #12
   199ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   199b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   199b4:	9b07      	ldr	r3, [sp, #28]
	config = dev_config->def_config;
   199b6:	e89e 0003 	ldmia.w	lr, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   199ba:	42ab      	cmp	r3, r5
   199bc:	bf28      	it	cs
   199be:	462b      	movcs	r3, r5
   199c0:	461d      	mov	r5, r3
	if (frequency < 250000) {
   199c2:	4b74      	ldr	r3, [pc, #464]	; (19b94 <spi_nrfx_transceive+0x2f8>)
	config = dev_config->def_config;
   199c4:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   199c8:	429d      	cmp	r5, r3
   199ca:	d946      	bls.n	19a5a <spi_nrfx_transceive+0x1be>
	} else if (frequency < 500000) {
   199cc:	4b72      	ldr	r3, [pc, #456]	; (19b98 <spi_nrfx_transceive+0x2fc>)
   199ce:	429d      	cmp	r5, r3
   199d0:	d946      	bls.n	19a60 <spi_nrfx_transceive+0x1c4>
	} else if (frequency < 1000000) {
   199d2:	4b72      	ldr	r3, [pc, #456]	; (19b9c <spi_nrfx_transceive+0x300>)
   199d4:	429d      	cmp	r5, r3
   199d6:	d946      	bls.n	19a66 <spi_nrfx_transceive+0x1ca>
	} else if (frequency < 2000000) {
   199d8:	4b71      	ldr	r3, [pc, #452]	; (19ba0 <spi_nrfx_transceive+0x304>)
   199da:	429d      	cmp	r5, r3
   199dc:	d946      	bls.n	19a6c <spi_nrfx_transceive+0x1d0>
	} else if (frequency < 4000000) {
   199de:	4b71      	ldr	r3, [pc, #452]	; (19ba4 <spi_nrfx_transceive+0x308>)
   199e0:	429d      	cmp	r5, r3
   199e2:	d946      	bls.n	19a72 <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 8000000) {
   199e4:	4b70      	ldr	r3, [pc, #448]	; (19ba8 <spi_nrfx_transceive+0x30c>)
   199e6:	429d      	cmp	r5, r3
   199e8:	d346      	bcc.n	19a78 <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 16000000) {
   199ea:	4b68      	ldr	r3, [pc, #416]	; (19b8c <spi_nrfx_transceive+0x2f0>)
   199ec:	429d      	cmp	r5, r3
   199ee:	d346      	bcc.n	19a7e <spi_nrfx_transceive+0x1e2>
		return NRF_SPIM_FREQ_16M;
   199f0:	4b6e      	ldr	r3, [pc, #440]	; (19bac <spi_nrfx_transceive+0x310>)
   199f2:	429d      	cmp	r5, r3
   199f4:	bf2c      	ite	cs
   199f6:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   199fa:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   199fe:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   19a00:	950a      	str	r5, [sp, #40]	; 0x28
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   19a02:	f006 0304 	and.w	r3, r6, #4
   19a06:	d53d      	bpl.n	19a84 <spi_nrfx_transceive+0x1e8>
			return NRF_SPIM_MODE_2;
   19a08:	2b00      	cmp	r3, #0
   19a0a:	bf14      	ite	ne
   19a0c:	2303      	movne	r3, #3
   19a0e:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   19a10:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (dev_data->initialized) {
   19a14:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   19a16:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   19a1a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
	if (dev_data->initialized) {
   19a1e:	b12b      	cbz	r3, 19a2c <spi_nrfx_transceive+0x190>
		nrfx_spim_uninit(&dev_config->spim);
   19a20:	9805      	ldr	r0, [sp, #20]
   19a22:	f003 fd23 	bl	1d46c <nrfx_spim_uninit>
		dev_data->initialized = false;
   19a26:	2300      	movs	r3, #0
   19a28:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   19a2c:	4653      	mov	r3, sl
   19a2e:	4a60      	ldr	r2, [pc, #384]	; (19bb0 <spi_nrfx_transceive+0x314>)
   19a30:	9805      	ldr	r0, [sp, #20]
   19a32:	a908      	add	r1, sp, #32
   19a34:	f003 fbe8 	bl	1d208 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   19a38:	4b5e      	ldr	r3, [pc, #376]	; (19bb4 <spi_nrfx_transceive+0x318>)
   19a3a:	4298      	cmp	r0, r3
   19a3c:	d026      	beq.n	19a8c <spi_nrfx_transceive+0x1f0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   19a3e:	4b5e      	ldr	r3, [pc, #376]	; (19bb8 <spi_nrfx_transceive+0x31c>)
   19a40:	9003      	str	r0, [sp, #12]
   19a42:	9302      	str	r3, [sp, #8]
   19a44:	2300      	movs	r3, #0
   19a46:	2201      	movs	r2, #1
   19a48:	4618      	mov	r0, r3
   19a4a:	e9cd 3300 	strd	r3, r3, [sp]
   19a4e:	4949      	ldr	r1, [pc, #292]	; (19b74 <spi_nrfx_transceive+0x2d8>)
   19a50:	f00d fa4e 	bl	26ef0 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   19a54:	f06f 0504 	mvn.w	r5, #4
   19a58:	e753      	b.n	19902 <spi_nrfx_transceive+0x66>
		return NRF_SPIM_FREQ_125K;
   19a5a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   19a5e:	e7ce      	b.n	199fe <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_250K;
   19a60:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   19a64:	e7cb      	b.n	199fe <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_500K;
   19a66:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   19a6a:	e7c8      	b.n	199fe <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_1M;
   19a6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   19a70:	e7c5      	b.n	199fe <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_2M;
   19a72:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   19a76:	e7c2      	b.n	199fe <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_4M;
   19a78:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   19a7c:	e7bf      	b.n	199fe <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_8M;
   19a7e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   19a82:	e7bc      	b.n	199fe <spi_nrfx_transceive+0x162>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   19a84:	3b00      	subs	r3, #0
   19a86:	bf18      	it	ne
   19a88:	2301      	movne	r3, #1
   19a8a:	e7c1      	b.n	19a10 <spi_nrfx_transceive+0x174>
	dev_data->initialized = true;
   19a8c:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   19a8e:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   19a92:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   19a96:	2301      	movs	r3, #1
   19a98:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   19a9c:	f1b9 0f00 	cmp.w	r9, #0
   19aa0:	d154      	bne.n	19b4c <spi_nrfx_transceive+0x2b0>
   19aa2:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   19aa6:	2300      	movs	r3, #0
   19aa8:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   19aaa:	f104 0258 	add.w	r2, r4, #88	; 0x58
   19aae:	f104 0148 	add.w	r1, r4, #72	; 0x48
   19ab2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   19ab6:	f00d fa08 	bl	26eca <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   19aba:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   19abc:	f1bb 0f00 	cmp.w	fp, #0
   19ac0:	d14c      	bne.n	19b5c <spi_nrfx_transceive+0x2c0>
   19ac2:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   19ac6:	2300      	movs	r3, #0
   19ac8:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   19aca:	f104 0260 	add.w	r2, r4, #96	; 0x60
   19ace:	f104 0150 	add.w	r1, r4, #80	; 0x50
   19ad2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   19ad6:	f00d f9f8 	bl	26eca <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   19ada:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   19adc:	2101      	movs	r1, #1
   19ade:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   19ae0:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   19ae2:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   19ae4:	4620      	mov	r0, r4
   19ae6:	f00d fa13 	bl	26f10 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   19aea:	4640      	mov	r0, r8
   19aec:	f7ff fe22 	bl	19734 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   19af0:	6e25      	ldr	r5, [r4, #96]	; 0x60
   19af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   19af4:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   19af6:	429d      	cmp	r5, r3
   19af8:	bf38      	it	cc
   19afa:	461d      	movcc	r5, r3
   19afc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   19b00:	435d      	muls	r5, r3
			     ctx->config->frequency;
   19b02:	f857 3b28 	ldr.w	r3, [r7], #40
   19b06:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   19b0a:	681b      	ldr	r3, [r3, #0]
   19b0c:	4631      	mov	r1, r6
   19b0e:	fbb5 f5f3 	udiv	r5, r5, r3
   19b12:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   19b16:	35c8      	adds	r5, #200	; 0xc8
   19b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19b1c:	2300      	movs	r3, #0
   19b1e:	fbe5 010c 	umlal	r0, r1, r5, ip
   19b22:	f7ef f9e5 	bl	8ef0 <__aeabi_uldivmod>
   19b26:	4602      	mov	r2, r0
   19b28:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   19b2a:	4638      	mov	r0, r7
   19b2c:	f005 fb5a 	bl	1f1e4 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   19b30:	b1e0      	cbz	r0, 19b6c <spi_nrfx_transceive+0x2d0>
		LOG_ERR("Timeout waiting for transfer complete");
   19b32:	4b22      	ldr	r3, [pc, #136]	; (19bbc <spi_nrfx_transceive+0x320>)
   19b34:	2201      	movs	r2, #1
   19b36:	e9cd 6301 	strd	r6, r3, [sp, #4]
   19b3a:	4630      	mov	r0, r6
   19b3c:	4633      	mov	r3, r6
   19b3e:	490d      	ldr	r1, [pc, #52]	; (19b74 <spi_nrfx_transceive+0x2d8>)
   19b40:	9600      	str	r6, [sp, #0]
   19b42:	f00d f9d5 	bl	26ef0 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   19b46:	f06f 0573 	mvn.w	r5, #115	; 0x73
   19b4a:	e6da      	b.n	19902 <spi_nrfx_transceive+0x66>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   19b4c:	f8d9 3000 	ldr.w	r3, [r9]
   19b50:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   19b52:	2b00      	cmp	r3, #0
   19b54:	d0a7      	beq.n	19aa6 <spi_nrfx_transceive+0x20a>
   19b56:	f8d9 3004 	ldr.w	r3, [r9, #4]
   19b5a:	e7a5      	b.n	19aa8 <spi_nrfx_transceive+0x20c>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   19b5c:	f8db 3000 	ldr.w	r3, [fp]
   19b60:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   19b62:	2b00      	cmp	r3, #0
   19b64:	d0af      	beq.n	19ac6 <spi_nrfx_transceive+0x22a>
   19b66:	f8db 3004 	ldr.w	r3, [fp, #4]
   19b6a:	e7ad      	b.n	19ac8 <spi_nrfx_transceive+0x22c>
	status = ctx->sync_status;
   19b6c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   19b6e:	e6c8      	b.n	19902 <spi_nrfx_transceive+0x66>
   19b70:	0002e31f 	.word	0x0002e31f
   19b74:	000297a4 	.word	0x000297a4
   19b78:	0002e339 	.word	0x0002e339
   19b7c:	0002e35b 	.word	0x0002e35b
   19b80:	0002e37a 	.word	0x0002e37a
   19b84:	0001e847 	.word	0x0001e847
   19b88:	0002e3a9 	.word	0x0002e3a9
   19b8c:	00f42400 	.word	0x00f42400
   19b90:	40005000 	.word	0x40005000
   19b94:	0003d08f 	.word	0x0003d08f
   19b98:	0007a11f 	.word	0x0007a11f
   19b9c:	000f423f 	.word	0x000f423f
   19ba0:	001e847f 	.word	0x001e847f
   19ba4:	003d08ff 	.word	0x003d08ff
   19ba8:	007a1200 	.word	0x007a1200
   19bac:	01e84800 	.word	0x01e84800
   19bb0:	000197dd 	.word	0x000197dd
   19bb4:	0bad0000 	.word	0x0bad0000
   19bb8:	0002e3da 	.word	0x0002e3da
   19bbc:	0002e401 	.word	0x0002e401

00019bc0 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   19bc0:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   19bc4:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   19bc8:	280a      	cmp	r0, #10
   19bca:	bf9a      	itte	ls
   19bcc:	4b02      	ldrls	r3, [pc, #8]	; (19bd8 <qspi_get_zephyr_ret_code+0x18>)
   19bce:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   19bd2:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   19bd6:	4770      	bx	lr
   19bd8:	0002a5e4 	.word	0x0002a5e4

00019bdc <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   19bdc:	4b02      	ldr	r3, [pc, #8]	; (19be8 <qspi_nor_pages_layout+0xc>)
   19bde:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   19be0:	2301      	movs	r3, #1
   19be2:	6013      	str	r3, [r2, #0]
}
   19be4:	4770      	bx	lr
   19be6:	bf00      	nop
   19be8:	0002a428 	.word	0x0002a428

00019bec <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   19bec:	4800      	ldr	r0, [pc, #0]	; (19bf0 <qspi_flash_get_parameters+0x4>)
   19bee:	4770      	bx	lr
   19bf0:	0002a3bc 	.word	0x0002a3bc

00019bf4 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   19bf4:	4b05      	ldr	r3, [pc, #20]	; (19c0c <qspi_wait_for_completion.isra.0+0x18>)
   19bf6:	4299      	cmp	r1, r3
   19bf8:	d106      	bne.n	19c08 <qspi_wait_for_completion.isra.0+0x14>
   19bfa:	f04f 32ff 	mov.w	r2, #4294967295
   19bfe:	f04f 33ff 	mov.w	r3, #4294967295
   19c02:	3030      	adds	r0, #48	; 0x30
   19c04:	f005 baee 	b.w	1f1e4 <z_impl_k_sem_take>
}
   19c08:	4770      	bx	lr
   19c0a:	bf00      	nop
   19c0c:	0bad0000 	.word	0x0bad0000

00019c10 <qspi_device_init>:
{
   19c10:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   19c12:	6905      	ldr	r5, [r0, #16]
{
   19c14:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   19c16:	4e0f      	ldr	r6, [pc, #60]	; (19c54 <qspi_device_init+0x44>)
	qspi_lock(dev);
   19c18:	4628      	mov	r0, r5
   19c1a:	f00d f9d4 	bl	26fc6 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   19c1e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   19c22:	f00d f9b9 	bl	26f98 <k_sem_give>
	if (!qspi_initialized) {
   19c26:	7833      	ldrb	r3, [r6, #0]
   19c28:	b98b      	cbnz	r3, 19c4e <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   19c2a:	462a      	mov	r2, r5
   19c2c:	490a      	ldr	r1, [pc, #40]	; (19c58 <qspi_device_init+0x48>)
   19c2e:	6860      	ldr	r0, [r4, #4]
   19c30:	f003 f86a 	bl	1cd08 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   19c34:	f7ff ffc4 	bl	19bc0 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   19c38:	fab0 f380 	clz	r3, r0
   19c3c:	4605      	mov	r5, r0
   19c3e:	095b      	lsrs	r3, r3, #5
   19c40:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   19c42:	6920      	ldr	r0, [r4, #16]
   19c44:	3018      	adds	r0, #24
   19c46:	f00d f9a7 	bl	26f98 <k_sem_give>
}
   19c4a:	4628      	mov	r0, r5
   19c4c:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   19c4e:	2500      	movs	r5, #0
   19c50:	e7f7      	b.n	19c42 <qspi_device_init+0x32>
   19c52:	bf00      	nop
   19c54:	20021d8d 	.word	0x20021d8d
   19c58:	00026f9d 	.word	0x00026f9d

00019c5c <qspi_send_cmd>:
{
   19c5c:	b570      	push	{r4, r5, r6, lr}
	if (cmd->tx_buf) {
   19c5e:	684c      	ldr	r4, [r1, #4]
{
   19c60:	4605      	mov	r5, r0
   19c62:	b088      	sub	sp, #32
	if (cmd->tx_buf) {
   19c64:	b1ec      	cbz	r4, 19ca2 <qspi_send_cmd+0x46>
		tx_buf = cmd->tx_buf->buf;
   19c66:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   19c6a:	6888      	ldr	r0, [r1, #8]
   19c6c:	b1d8      	cbz	r0, 19ca6 <qspi_send_cmd+0x4a>
		rx_len = cmd->rx_buf->len;
   19c6e:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   19c72:	b1c8      	cbz	r0, 19ca8 <qspi_send_cmd+0x4c>
   19c74:	b1c3      	cbz	r3, 19ca8 <qspi_send_cmd+0x4c>
		if (rx_len != tx_len) {
   19c76:	4283      	cmp	r3, r0
   19c78:	d10f      	bne.n	19c9a <qspi_send_cmd+0x3e>
		xfer_len += tx_len;
   19c7a:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   19c7c:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   19c7e:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   19c80:	d915      	bls.n	19cae <qspi_send_cmd+0x52>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   19c82:	e9cd 1303 	strd	r1, r3, [sp, #12]
   19c86:	4b1a      	ldr	r3, [pc, #104]	; (19cf0 <qspi_send_cmd+0x94>)
   19c88:	2202      	movs	r2, #2
   19c8a:	9302      	str	r3, [sp, #8]
   19c8c:	2300      	movs	r3, #0
   19c8e:	4919      	ldr	r1, [pc, #100]	; (19cf4 <qspi_send_cmd+0x98>)
   19c90:	4618      	mov	r0, r3
   19c92:	e9cd 3300 	strd	r3, r3, [sp]
   19c96:	f00d f987 	bl	26fa8 <z_log_msg_runtime_create.constprop.0>
}
   19c9a:	f06f 0015 	mvn.w	r0, #21
   19c9e:	b008      	add	sp, #32
   19ca0:	bd70      	pop	{r4, r5, r6, pc}
	size_t tx_len = 0;
   19ca2:	4623      	mov	r3, r4
   19ca4:	e7e1      	b.n	19c6a <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   19ca6:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   19ca8:	3301      	adds	r3, #1
   19caa:	4403      	add	r3, r0
   19cac:	e7e6      	b.n	19c7c <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   19cae:	f88d 3019 	strb.w	r3, [sp, #25]
   19cb2:	f240 1301 	movw	r3, #257	; 0x101
   19cb6:	f8ad 301a 	strh.w	r3, [sp, #26]
   19cba:	2300      	movs	r3, #0
	qspi_lock(dev);
   19cbc:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   19cbe:	f88d 301c 	strb.w	r3, [sp, #28]
   19cc2:	f88d 1018 	strb.w	r1, [sp, #24]
   19cc6:	f88d 201d 	strb.w	r2, [sp, #29]
	qspi_lock(dev);
   19cca:	f00d f97c 	bl	26fc6 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   19cce:	4621      	mov	r1, r4
   19cd0:	4632      	mov	r2, r6
   19cd2:	a806      	add	r0, sp, #24
   19cd4:	f003 f90a 	bl	1ceec <nrfx_qspi_cinstr_xfer>
   19cd8:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   19cda:	6928      	ldr	r0, [r5, #16]
   19cdc:	3018      	adds	r0, #24
   19cde:	f00d f95b 	bl	26f98 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   19ce2:	4620      	mov	r0, r4
}
   19ce4:	b008      	add	sp, #32
   19ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
   19cea:	f7ff bf69 	b.w	19bc0 <qspi_get_zephyr_ret_code>
   19cee:	bf00      	nop
   19cf0:	0002e43e 	.word	0x0002e43e
   19cf4:	00029794 	.word	0x00029794

00019cf8 <qspi_device_uninit>:
{
   19cf8:	b538      	push	{r3, r4, r5, lr}
   19cfa:	4604      	mov	r4, r0
	qspi_lock(dev);
   19cfc:	6900      	ldr	r0, [r0, #16]
   19cfe:	f00d f962 	bl	26fc6 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   19d02:	6925      	ldr	r5, [r4, #16]
   19d04:	2200      	movs	r2, #0
   19d06:	2300      	movs	r3, #0
   19d08:	f105 0048 	add.w	r0, r5, #72	; 0x48
   19d0c:	f005 fa6a 	bl	1f1e4 <z_impl_k_sem_take>
	if (last) {
   19d10:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   19d12:	b94b      	cbnz	r3, 19d28 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   19d14:	4d0a      	ldr	r5, [pc, #40]	; (19d40 <qspi_device_uninit+0x48>)
   19d16:	f003 f94b 	bl	1cfb0 <nrfx_qspi_mem_busy_check>
   19d1a:	42a8      	cmp	r0, r5
   19d1c:	d10a      	bne.n	19d34 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   19d1e:	f003 f969 	bl	1cff4 <nrfx_qspi_uninit>
		qspi_initialized = false;
   19d22:	2200      	movs	r2, #0
   19d24:	4b07      	ldr	r3, [pc, #28]	; (19d44 <qspi_device_uninit+0x4c>)
   19d26:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   19d28:	6920      	ldr	r0, [r4, #16]
}
   19d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   19d2e:	3018      	adds	r0, #24
   19d30:	f00d b932 	b.w	26f98 <k_sem_give>
	return z_impl_k_sleep(timeout);
   19d34:	2100      	movs	r1, #0
   19d36:	f240 6067 	movw	r0, #1639	; 0x667
   19d3a:	f007 f903 	bl	20f44 <z_impl_k_sleep>
   19d3e:	e7ea      	b.n	19d16 <qspi_device_uninit+0x1e>
   19d40:	0bad0000 	.word	0x0bad0000
   19d44:	20021d8d 	.word	0x20021d8d

00019d48 <qspi_nor_read>:
{
   19d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d4c:	4681      	mov	r9, r0
   19d4e:	460e      	mov	r6, r1
   19d50:	461c      	mov	r4, r3
	if (!dest) {
   19d52:	4690      	mov	r8, r2
{
   19d54:	b08b      	sub	sp, #44	; 0x2c
	if (!dest) {
   19d56:	b1aa      	cbz	r2, 19d84 <qspi_nor_read+0x3c>
	if (!size) {
   19d58:	2b00      	cmp	r3, #0
   19d5a:	f000 809f 	beq.w	19e9c <qspi_nor_read+0x154>
	if (addr < 0 ||
   19d5e:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   19d60:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   19d62:	db03      	blt.n	19d6c <qspi_nor_read+0x24>
   19d64:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   19d66:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   19d68:	4293      	cmp	r3, r2
   19d6a:	d911      	bls.n	19d90 <qspi_nor_read+0x48>
		LOG_ERR("read error: address or size "
   19d6c:	4b4c      	ldr	r3, [pc, #304]	; (19ea0 <qspi_nor_read+0x158>)
   19d6e:	2201      	movs	r2, #1
   19d70:	9302      	str	r3, [sp, #8]
   19d72:	2300      	movs	r3, #0
   19d74:	e9cd 6403 	strd	r6, r4, [sp, #12]
   19d78:	4618      	mov	r0, r3
   19d7a:	e9cd 3300 	strd	r3, r3, [sp]
   19d7e:	4949      	ldr	r1, [pc, #292]	; (19ea4 <qspi_nor_read+0x15c>)
   19d80:	f00d f912 	bl	26fa8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   19d84:	f06f 0515 	mvn.w	r5, #21
}
   19d88:	4628      	mov	r0, r5
   19d8a:	b00b      	add	sp, #44	; 0x2c
   19d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   19d90:	f7ff ff3e 	bl	19c10 <qspi_device_init>
	if (rc != 0) {
   19d94:	4605      	mov	r5, r0
   19d96:	2800      	cmp	r0, #0
   19d98:	d17c      	bne.n	19e94 <qspi_nor_read+0x14c>
	qspi_lock(dev);
   19d9a:	4275      	negs	r5, r6
   19d9c:	f005 0503 	and.w	r5, r5, #3
   19da0:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19da4:	f00d f90f 	bl	26fc6 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   19da8:	42a5      	cmp	r5, r4
   19daa:	bf28      	it	cs
   19dac:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   19dae:	f1d8 0300 	rsbs	r3, r8, #0
   19db2:	f003 0303 	and.w	r3, r3, #3
   19db6:	f008 0703 	and.w	r7, r8, #3
   19dba:	bf58      	it	pl
   19dbc:	425f      	negpl	r7, r3
   19dbe:	427f      	negs	r7, r7
   19dc0:	f007 0703 	and.w	r7, r7, #3
   19dc4:	42a7      	cmp	r7, r4
   19dc6:	bf28      	it	cs
   19dc8:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   19dca:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   19dcc:	1be4      	subs	r4, r4, r7
   19dce:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   19dd2:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   19dd6:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   19dd8:	bfc8      	it	gt
   19dda:	46a2      	movgt	sl, r4
   19ddc:	f003 0b03 	and.w	fp, r3, #3
   19de0:	bfc8      	it	gt
   19de2:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   19de6:	f1ba 0f00 	cmp.w	sl, #0
   19dea:	d019      	beq.n	19e20 <qspi_nor_read+0xd8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   19dec:	eb08 0307 	add.w	r3, r8, r7
   19df0:	1972      	adds	r2, r6, r5
   19df2:	4651      	mov	r1, sl
   19df4:	4618      	mov	r0, r3
   19df6:	9307      	str	r3, [sp, #28]
   19df8:	f00d fd6b 	bl	278d2 <nrfx_qspi_read>
   19dfc:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   19dfe:	4601      	mov	r1, r0
   19e00:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19e04:	f7ff fef6 	bl	19bf4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   19e08:	4a27      	ldr	r2, [pc, #156]	; (19ea8 <qspi_nor_read+0x160>)
   19e0a:	4294      	cmp	r4, r2
   19e0c:	d139      	bne.n	19e82 <qspi_nor_read+0x13a>
		if (flash_prefix != dest_prefix) {
   19e0e:	42bd      	cmp	r5, r7
   19e10:	d006      	beq.n	19e20 <qspi_nor_read+0xd8>
__ssp_bos_icheck3(memmove, void *, const void *)
   19e12:	9b07      	ldr	r3, [sp, #28]
   19e14:	4652      	mov	r2, sl
   19e16:	4619      	mov	r1, r3
   19e18:	eb08 0005 	add.w	r0, r8, r5
   19e1c:	f00e fcde 	bl	287dc <memmove>
	if (flash_prefix != 0) {
   19e20:	b1ad      	cbz	r5, 19e4e <qspi_nor_read+0x106>
				     (WORD_SIZE - flash_prefix));
   19e22:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   19e26:	2104      	movs	r1, #4
   19e28:	1bf2      	subs	r2, r6, r7
   19e2a:	a808      	add	r0, sp, #32
   19e2c:	f00d fd51 	bl	278d2 <nrfx_qspi_read>
   19e30:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   19e32:	4601      	mov	r1, r0
   19e34:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19e38:	f7ff fedc 	bl	19bf4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   19e3c:	4b1a      	ldr	r3, [pc, #104]	; (19ea8 <qspi_nor_read+0x160>)
   19e3e:	429c      	cmp	r4, r3
   19e40:	d11f      	bne.n	19e82 <qspi_nor_read+0x13a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19e42:	ab08      	add	r3, sp, #32
   19e44:	462a      	mov	r2, r5
   19e46:	4640      	mov	r0, r8
   19e48:	19d9      	adds	r1, r3, r7
   19e4a:	f00e fcba 	bl	287c2 <memcpy>
	if (flash_suffix != 0) {
   19e4e:	f1bb 0f00 	cmp.w	fp, #0
   19e52:	d015      	beq.n	19e80 <qspi_nor_read+0x138>
				     addr + flash_prefix + flash_middle);
   19e54:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   19e56:	2108      	movs	r1, #8
   19e58:	4452      	add	r2, sl
   19e5a:	a808      	add	r0, sp, #32
   19e5c:	f00d fd39 	bl	278d2 <nrfx_qspi_read>
   19e60:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   19e62:	4601      	mov	r1, r0
   19e64:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19e68:	f7ff fec4 	bl	19bf4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   19e6c:	4b0e      	ldr	r3, [pc, #56]	; (19ea8 <qspi_nor_read+0x160>)
   19e6e:	429c      	cmp	r4, r3
   19e70:	d107      	bne.n	19e82 <qspi_nor_read+0x13a>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   19e72:	eb0a 0005 	add.w	r0, sl, r5
   19e76:	465a      	mov	r2, fp
   19e78:	a908      	add	r1, sp, #32
   19e7a:	4440      	add	r0, r8
   19e7c:	f00e fca1 	bl	287c2 <memcpy>
	return res;
   19e80:	4c09      	ldr	r4, [pc, #36]	; (19ea8 <qspi_nor_read+0x160>)
	k_sem_give(&dev_data->sem);
   19e82:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19e86:	3018      	adds	r0, #24
   19e88:	f00d f886 	bl	26f98 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   19e8c:	4620      	mov	r0, r4
   19e8e:	f7ff fe97 	bl	19bc0 <qspi_get_zephyr_ret_code>
   19e92:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   19e94:	4648      	mov	r0, r9
   19e96:	f7ff ff2f 	bl	19cf8 <qspi_device_uninit>
	return rc;
   19e9a:	e775      	b.n	19d88 <qspi_nor_read+0x40>
		return 0;
   19e9c:	461d      	mov	r5, r3
   19e9e:	e773      	b.n	19d88 <qspi_nor_read+0x40>
   19ea0:	0002e461 	.word	0x0002e461
   19ea4:	00029794 	.word	0x00029794
   19ea8:	0bad0000 	.word	0x0bad0000

00019eac <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   19eac:	2202      	movs	r2, #2
{
   19eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19eb2:	4b64      	ldr	r3, [pc, #400]	; (1a044 <qspi_nor_init+0x198>)
   19eb4:	b090      	sub	sp, #64	; 0x40
   19eb6:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   19eba:	6843      	ldr	r3, [r0, #4]
{
   19ebc:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   19ebe:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   19ec0:	2100      	movs	r1, #0
   19ec2:	4630      	mov	r0, r6
   19ec4:	aa0d      	add	r2, sp, #52	; 0x34
   19ec6:	f00d fb2e 	bl	27526 <pinctrl_lookup_state>
	if (ret < 0) {
   19eca:	1e04      	subs	r4, r0, #0
   19ecc:	db35      	blt.n	19f3a <qspi_nor_init+0x8e>
	return pinctrl_apply_state_direct(config, state);
   19ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   19ed0:	6832      	ldr	r2, [r6, #0]
   19ed2:	7919      	ldrb	r1, [r3, #4]
   19ed4:	6818      	ldr	r0, [r3, #0]
   19ed6:	f00d fb39 	bl	2754c <pinctrl_configure_pins>
	if (ret < 0) {
   19eda:	1e04      	subs	r4, r0, #0
   19edc:	db2d      	blt.n	19f3a <qspi_nor_init+0x8e>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   19ede:	2200      	movs	r2, #0
   19ee0:	2101      	movs	r1, #1
   19ee2:	202b      	movs	r0, #43	; 0x2b
   19ee4:	f7f5 fac6 	bl	f474 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   19ee8:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   19eea:	692a      	ldr	r2, [r5, #16]
   19eec:	4630      	mov	r0, r6
   19eee:	4956      	ldr	r1, [pc, #344]	; (1a048 <qspi_nor_init+0x19c>)
   19ef0:	f002 ff0a 	bl	1cd08 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   19ef4:	f7ff fe64 	bl	19bc0 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   19ef8:	1e04      	subs	r4, r0, #0
   19efa:	db1e      	blt.n	19f3a <qspi_nor_init+0x8e>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   19efc:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   19efe:	3b02      	subs	r3, #2
   19f00:	2b01      	cmp	r3, #1
   19f02:	d91e      	bls.n	19f42 <qspi_nor_init+0x96>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   19f04:	f896 800a 	ldrb.w	r8, [r6, #10]
   19f08:	f1a8 0803 	sub.w	r8, r8, #3
   19f0c:	f1b8 0f01 	cmp.w	r8, #1
   19f10:	bf8c      	ite	hi
   19f12:	f04f 0800 	movhi.w	r8, #0
   19f16:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   19f1a:	4628      	mov	r0, r5
   19f1c:	f00d f875 	bl	2700a <qspi_rdsr.constprop.0>
		if (ret < 0) {
   19f20:	1e04      	subs	r4, r0, #0
   19f22:	da11      	bge.n	19f48 <qspi_nor_init+0x9c>
			LOG_ERR("RDSR failed: %d", ret);
   19f24:	4b49      	ldr	r3, [pc, #292]	; (1a04c <qspi_nor_init+0x1a0>)
   19f26:	2201      	movs	r2, #1
   19f28:	9302      	str	r3, [sp, #8]
   19f2a:	2300      	movs	r3, #0
   19f2c:	4948      	ldr	r1, [pc, #288]	; (1a050 <qspi_nor_init+0x1a4>)
   19f2e:	4618      	mov	r0, r3
   19f30:	e9cd 3300 	strd	r3, r3, [sp]
   19f34:	9403      	str	r4, [sp, #12]
   19f36:	f00d f837 	bl	26fa8 <z_log_msg_runtime_create.constprop.0>
}
   19f3a:	4620      	mov	r0, r4
   19f3c:	b010      	add	sp, #64	; 0x40
   19f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   19f42:	f04f 0801 	mov.w	r8, #1
   19f46:	e7e8      	b.n	19f1a <qspi_nor_init+0x6e>
		uint8_t sr = (uint8_t)ret;
   19f48:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   19f4a:	f3c4 1480 	ubfx	r4, r4, #6, #1
   19f4e:	45a0      	cmp	r8, r4
   19f50:	ae0a      	add	r6, sp, #40	; 0x28
   19f52:	af0b      	add	r7, sp, #44	; 0x2c
   19f54:	d02f      	beq.n	19fb6 <qspi_nor_init+0x10a>
	uint8_t sr_array[2] = {0};
   19f56:	2300      	movs	r3, #0
			sr ^= qe_mask;
   19f58:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   19f5c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		sr_array[0] = sr_val;
   19f60:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	const struct qspi_buf sr_buf = {
   19f64:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   19f66:	4628      	mov	r0, r5
   19f68:	a90d      	add	r1, sp, #52	; 0x34
	struct qspi_cmd cmd = {
   19f6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct qspi_buf sr_buf = {
   19f6e:	960b      	str	r6, [sp, #44]	; 0x2c
	struct qspi_cmd cmd = {
   19f70:	930f      	str	r3, [sp, #60]	; 0x3c
   19f72:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   19f76:	970e      	str	r7, [sp, #56]	; 0x38
	ret = qspi_send_cmd(dev, &cmd, true);
   19f78:	f7ff fe70 	bl	19c5c <qspi_send_cmd>
	if (ret == 0) {
   19f7c:	1e04      	subs	r4, r0, #0
   19f7e:	d013      	beq.n	19fa8 <qspi_nor_init+0xfc>
		if (ret < 0) {
   19f80:	dadb      	bge.n	19f3a <qspi_nor_init+0x8e>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   19f82:	4a34      	ldr	r2, [pc, #208]	; (1a054 <qspi_nor_init+0x1a8>)
   19f84:	4b34      	ldr	r3, [pc, #208]	; (1a058 <qspi_nor_init+0x1ac>)
   19f86:	4932      	ldr	r1, [pc, #200]	; (1a050 <qspi_nor_init+0x1a4>)
   19f88:	f1b8 0f00 	cmp.w	r8, #0
   19f8c:	bf18      	it	ne
   19f8e:	4613      	movne	r3, r2
   19f90:	e9cd 3403 	strd	r3, r4, [sp, #12]
   19f94:	4b31      	ldr	r3, [pc, #196]	; (1a05c <qspi_nor_init+0x1b0>)
   19f96:	2201      	movs	r2, #1
   19f98:	9302      	str	r3, [sp, #8]
   19f9a:	2300      	movs	r3, #0
   19f9c:	4618      	mov	r0, r3
   19f9e:	e9cd 3300 	strd	r3, r3, [sp]
   19fa2:	f00d f801 	bl	26fa8 <z_log_msg_runtime_create.constprop.0>
	if (ret != 0) {
   19fa6:	e7c8      	b.n	19f3a <qspi_nor_init+0x8e>
		ret = qspi_rdsr(dev, 1);
   19fa8:	4628      	mov	r0, r5
   19faa:	f00d f82e 	bl	2700a <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   19fae:	1e04      	subs	r4, r0, #0
   19fb0:	dbe7      	blt.n	19f82 <qspi_nor_init+0xd6>
   19fb2:	07e3      	lsls	r3, r4, #31
   19fb4:	d4f8      	bmi.n	19fa8 <qspi_nor_init+0xfc>
	qspi_device_uninit(dev);
   19fb6:	4628      	mov	r0, r5
   19fb8:	f7ff fe9e 	bl	19cf8 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   19fbc:	2403      	movs	r4, #3
   19fbe:	2300      	movs	r3, #0
   19fc0:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   19fc4:	930e      	str	r3, [sp, #56]	; 0x38
   19fc6:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   19fc8:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   19fca:	960b      	str	r6, [sp, #44]	; 0x2c
	const struct qspi_cmd cmd = {
   19fcc:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   19fd0:	970f      	str	r7, [sp, #60]	; 0x3c
	int ret = qspi_device_init(dev);
   19fd2:	f7ff fe1d 	bl	19c10 <qspi_device_init>
	if (ret == 0) {
   19fd6:	4602      	mov	r2, r0
   19fd8:	b128      	cbz	r0, 19fe6 <qspi_nor_init+0x13a>
	qspi_device_uninit(dev);
   19fda:	4628      	mov	r0, r5
   19fdc:	f7ff fe8c 	bl	19cf8 <qspi_device_uninit>
		return -ENODEV;
   19fe0:	f06f 0412 	mvn.w	r4, #18
   19fe4:	e7a9      	b.n	19f3a <qspi_nor_init+0x8e>
		ret = qspi_send_cmd(dev, &cmd, false);
   19fe6:	4628      	mov	r0, r5
   19fe8:	a90d      	add	r1, sp, #52	; 0x34
   19fea:	f7ff fe37 	bl	19c5c <qspi_send_cmd>
   19fee:	4607      	mov	r7, r0
	qspi_device_uninit(dev);
   19ff0:	4628      	mov	r0, r5
   19ff2:	f7ff fe81 	bl	19cf8 <qspi_device_uninit>
	if (ret != 0) {
   19ff6:	2f00      	cmp	r7, #0
   19ff8:	d1f2      	bne.n	19fe0 <qspi_nor_init+0x134>
	const struct qspi_nor_config *qnc = dev->config;
   19ffa:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   19ffc:	4622      	mov	r2, r4
   19ffe:	4631      	mov	r1, r6
   1a000:	f105 001c 	add.w	r0, r5, #28
   1a004:	f00e fbcd 	bl	287a2 <memcmp>
   1a008:	4604      	mov	r4, r0
   1a00a:	2800      	cmp	r0, #0
   1a00c:	d095      	beq.n	19f3a <qspi_nor_init+0x8e>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1a00e:	7fab      	ldrb	r3, [r5, #30]
   1a010:	2201      	movs	r2, #1
   1a012:	9308      	str	r3, [sp, #32]
   1a014:	7f6b      	ldrb	r3, [r5, #29]
   1a016:	4638      	mov	r0, r7
   1a018:	9307      	str	r3, [sp, #28]
   1a01a:	7f2b      	ldrb	r3, [r5, #28]
   1a01c:	490c      	ldr	r1, [pc, #48]	; (1a050 <qspi_nor_init+0x1a4>)
   1a01e:	9306      	str	r3, [sp, #24]
   1a020:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1a024:	9700      	str	r7, [sp, #0]
   1a026:	9305      	str	r3, [sp, #20]
   1a028:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   1a02c:	9304      	str	r3, [sp, #16]
   1a02e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1a032:	9303      	str	r3, [sp, #12]
   1a034:	4b0a      	ldr	r3, [pc, #40]	; (1a060 <qspi_nor_init+0x1b4>)
   1a036:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1a03a:	463b      	mov	r3, r7
   1a03c:	f00c ffb4 	bl	26fa8 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1a040:	e7ce      	b.n	19fe0 <qspi_nor_init+0x134>
   1a042:	bf00      	nop
   1a044:	40005000 	.word	0x40005000
   1a048:	00026f9d 	.word	0x00026f9d
   1a04c:	0002e4b0 	.word	0x0002e4b0
   1a050:	00029794 	.word	0x00029794
   1a054:	0002d0f1 	.word	0x0002d0f1
   1a058:	0002e4aa 	.word	0x0002e4aa
   1a05c:	0002e4c0 	.word	0x0002e4c0
   1a060:	0002e4d1 	.word	0x0002e4d1

0001a064 <qspi_nor_erase>:
{
   1a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1a068:	2900      	cmp	r1, #0
{
   1a06a:	4606      	mov	r6, r0
   1a06c:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1a06e:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1a072:	b087      	sub	sp, #28
	if (addr < 0 ||
   1a074:	db05      	blt.n	1a082 <qspi_nor_erase+0x1e>
   1a076:	f8da 3018 	ldr.w	r3, [sl, #24]
	    (addr + size) > params->size) {
   1a07a:	188a      	adds	r2, r1, r2
	if (addr < 0 ||
   1a07c:	429a      	cmp	r2, r3
	    (addr + size) > params->size) {
   1a07e:	4688      	mov	r8, r1
	if (addr < 0 ||
   1a080:	d911      	bls.n	1a0a6 <qspi_nor_erase+0x42>
		LOG_ERR("erase error: address or size "
   1a082:	4b46      	ldr	r3, [pc, #280]	; (1a19c <qspi_nor_erase+0x138>)
   1a084:	e9cd 1503 	strd	r1, r5, [sp, #12]
   1a088:	9302      	str	r3, [sp, #8]
   1a08a:	2300      	movs	r3, #0
   1a08c:	2201      	movs	r2, #1
   1a08e:	4618      	mov	r0, r3
   1a090:	e9cd 3300 	strd	r3, r3, [sp]
   1a094:	4942      	ldr	r1, [pc, #264]	; (1a1a0 <qspi_nor_erase+0x13c>)
   1a096:	f00c ff87 	bl	26fa8 <z_log_msg_runtime_create.constprop.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1a09a:	f06f 0415 	mvn.w	r4, #21
}
   1a09e:	4620      	mov	r0, r4
   1a0a0:	b007      	add	sp, #28
   1a0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1a0a6:	f3c1 020b 	ubfx	r2, r1, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1a0aa:	2d00      	cmp	r5, #0
   1a0ac:	d0f5      	beq.n	1a09a <qspi_nor_erase+0x36>
   1a0ae:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1a0b2:	4313      	orrs	r3, r2
   1a0b4:	d1f1      	bne.n	1a09a <qspi_nor_erase+0x36>
	rv = qspi_device_init(dev);
   1a0b6:	f7ff fdab 	bl	19c10 <qspi_device_init>
	if (rv != 0) {
   1a0ba:	4604      	mov	r4, r0
   1a0bc:	bb68      	cbnz	r0, 1a11a <qspi_nor_erase+0xb6>
	qspi_trans_lock(dev);
   1a0be:	6930      	ldr	r0, [r6, #16]
   1a0c0:	f00c ff88 	bl	26fd4 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1a0c4:	4621      	mov	r1, r4
   1a0c6:	4630      	mov	r0, r6
   1a0c8:	f00c ff8a 	bl	26fe0 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1a0cc:	4604      	mov	r4, r0
   1a0ce:	bb08      	cbnz	r0, 1a114 <qspi_nor_erase+0xb0>
	qspi_lock(dev);
   1a0d0:	6930      	ldr	r0, [r6, #16]
   1a0d2:	f00c ff78 	bl	26fc6 <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
   1a0d6:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1a1a4 <qspi_nor_erase+0x140>
		if (size == params->size) {
   1a0da:	f8da 3018 	ldr.w	r3, [sl, #24]
   1a0de:	42ab      	cmp	r3, r5
   1a0e0:	d11f      	bne.n	1a122 <qspi_nor_erase+0xbe>
			res = nrfx_qspi_chip_erase();
   1a0e2:	f00d fbf9 	bl	278d8 <nrfx_qspi_chip_erase>
   1a0e6:	46a9      	mov	r9, r5
   1a0e8:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   1a0ea:	4639      	mov	r1, r7
   1a0ec:	6930      	ldr	r0, [r6, #16]
   1a0ee:	f7ff fd81 	bl	19bf4 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1a0f2:	455f      	cmp	r7, fp
   1a0f4:	d141      	bne.n	1a17a <qspi_nor_erase+0x116>
	while (size > 0) {
   1a0f6:	ebb5 0509 	subs.w	r5, r5, r9
			addr += adj;
   1a0fa:	44c8      	add	r8, r9
	while (size > 0) {
   1a0fc:	d1ed      	bne.n	1a0da <qspi_nor_erase+0x76>
	k_sem_give(&dev_data->sem);
   1a0fe:	6930      	ldr	r0, [r6, #16]
   1a100:	3018      	adds	r0, #24
   1a102:	f00c ff49 	bl	26f98 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1a106:	2101      	movs	r1, #1
   1a108:	4630      	mov	r0, r6
   1a10a:	f00c ff69 	bl	26fe0 <qspi_nor_write_protection_set>
   1a10e:	2c00      	cmp	r4, #0
   1a110:	bf08      	it	eq
   1a112:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1a114:	6930      	ldr	r0, [r6, #16]
   1a116:	f00c ff3f 	bl	26f98 <k_sem_give>
	qspi_device_uninit(dev);
   1a11a:	4630      	mov	r0, r6
   1a11c:	f7ff fdec 	bl	19cf8 <qspi_device_uninit>
	return rv;
   1a120:	e7bd      	b.n	1a09e <qspi_nor_erase+0x3a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1a122:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1a126:	d30a      	bcc.n	1a13e <qspi_nor_erase+0xda>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1a128:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1a12c:	b953      	cbnz	r3, 1a144 <qspi_nor_erase+0xe0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1a12e:	4641      	mov	r1, r8
   1a130:	2001      	movs	r0, #1
   1a132:	f002 ffc1 	bl	1d0b8 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1a136:	f44f 3980 	mov.w	r9, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1a13a:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   1a13c:	e7d5      	b.n	1a0ea <qspi_nor_erase+0x86>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1a13e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1a142:	d309      	bcc.n	1a158 <qspi_nor_erase+0xf4>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1a144:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1a148:	b930      	cbnz	r0, 1a158 <qspi_nor_erase+0xf4>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1a14a:	4641      	mov	r1, r8
   1a14c:	f002 ffb4 	bl	1d0b8 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1a150:	f44f 5980 	mov.w	r9, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1a154:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   1a156:	e7c8      	b.n	1a0ea <qspi_nor_erase+0x86>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1a158:	4b13      	ldr	r3, [pc, #76]	; (1a1a8 <qspi_nor_erase+0x144>)
   1a15a:	2201      	movs	r2, #1
   1a15c:	9302      	str	r3, [sp, #8]
   1a15e:	2300      	movs	r3, #0
   1a160:	490f      	ldr	r1, [pc, #60]	; (1a1a0 <qspi_nor_erase+0x13c>)
   1a162:	4618      	mov	r0, r3
   1a164:	e9cd 3300 	strd	r3, r3, [sp]
   1a168:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1a16c:	f00c ff1c 	bl	26fa8 <z_log_msg_runtime_create.constprop.0>
		qspi_wait_for_completion(dev, res);
   1a170:	490e      	ldr	r1, [pc, #56]	; (1a1ac <qspi_nor_erase+0x148>)
   1a172:	6930      	ldr	r0, [r6, #16]
   1a174:	f7ff fd3e 	bl	19bf4 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1a178:	4f0c      	ldr	r7, [pc, #48]	; (1a1ac <qspi_nor_erase+0x148>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1a17a:	4b0d      	ldr	r3, [pc, #52]	; (1a1b0 <qspi_nor_erase+0x14c>)
   1a17c:	2201      	movs	r2, #1
   1a17e:	9302      	str	r3, [sp, #8]
   1a180:	2300      	movs	r3, #0
   1a182:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1a186:	4618      	mov	r0, r3
   1a188:	e9cd 3300 	strd	r3, r3, [sp]
   1a18c:	4904      	ldr	r1, [pc, #16]	; (1a1a0 <qspi_nor_erase+0x13c>)
   1a18e:	f00c ff0b 	bl	26fa8 <z_log_msg_runtime_create.constprop.0>
			rv = qspi_get_zephyr_ret_code(res);
   1a192:	4638      	mov	r0, r7
   1a194:	f7ff fd14 	bl	19bc0 <qspi_get_zephyr_ret_code>
   1a198:	4604      	mov	r4, r0
			break;
   1a19a:	e7b0      	b.n	1a0fe <qspi_nor_erase+0x9a>
   1a19c:	0002e503 	.word	0x0002e503
   1a1a0:	00029794 	.word	0x00029794
   1a1a4:	0bad0000 	.word	0x0bad0000
   1a1a8:	0002e54d 	.word	0x0002e54d
   1a1ac:	0bad0004 	.word	0x0bad0004
   1a1b0:	0002e56b 	.word	0x0002e56b

0001a1b4 <qspi_nor_write>:
{
   1a1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a1b8:	4605      	mov	r5, r0
   1a1ba:	460f      	mov	r7, r1
   1a1bc:	461e      	mov	r6, r3
	if (!src) {
   1a1be:	4690      	mov	r8, r2
{
   1a1c0:	b088      	sub	sp, #32
	if (!src) {
   1a1c2:	b1ca      	cbz	r2, 1a1f8 <qspi_nor_write+0x44>
	if ((size == 0)
   1a1c4:	b1c3      	cbz	r3, 1a1f8 <qspi_nor_write+0x44>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1a1c6:	2b04      	cmp	r3, #4
   1a1c8:	d901      	bls.n	1a1ce <qspi_nor_write+0x1a>
   1a1ca:	079a      	lsls	r2, r3, #30
   1a1cc:	d114      	bne.n	1a1f8 <qspi_nor_write+0x44>
	if ((addr % 4U) != 0) {
   1a1ce:	07bb      	lsls	r3, r7, #30
   1a1d0:	d112      	bne.n	1a1f8 <qspi_nor_write+0x44>
	if (addr < 0 ||
   1a1d2:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   1a1d4:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1a1d6:	db03      	blt.n	1a1e0 <qspi_nor_write+0x2c>
   1a1d8:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1a1da:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   1a1dc:	4293      	cmp	r3, r2
   1a1de:	d911      	bls.n	1a204 <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
   1a1e0:	4b40      	ldr	r3, [pc, #256]	; (1a2e4 <qspi_nor_write+0x130>)
   1a1e2:	2201      	movs	r2, #1
   1a1e4:	9302      	str	r3, [sp, #8]
   1a1e6:	2300      	movs	r3, #0
   1a1e8:	e9cd 7603 	strd	r7, r6, [sp, #12]
   1a1ec:	4618      	mov	r0, r3
   1a1ee:	e9cd 3300 	strd	r3, r3, [sp]
   1a1f2:	493d      	ldr	r1, [pc, #244]	; (1a2e8 <qspi_nor_write+0x134>)
   1a1f4:	f00c fed8 	bl	26fa8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a1f8:	f06f 0415 	mvn.w	r4, #21
}
   1a1fc:	4620      	mov	r0, r4
   1a1fe:	b008      	add	sp, #32
   1a200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   1a204:	4628      	mov	r0, r5
   1a206:	f7ff fd03 	bl	19c10 <qspi_device_init>
	if (rc != 0) {
   1a20a:	4604      	mov	r4, r0
   1a20c:	2800      	cmp	r0, #0
   1a20e:	d160      	bne.n	1a2d2 <qspi_nor_write+0x11e>
	qspi_trans_lock(dev);
   1a210:	6928      	ldr	r0, [r5, #16]
   1a212:	f00c fedf 	bl	26fd4 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1a216:	4621      	mov	r1, r4
   1a218:	4628      	mov	r0, r5
   1a21a:	f00c fee1 	bl	26fe0 <qspi_nor_write_protection_set>
   1a21e:	4604      	mov	r4, r0
	qspi_lock(dev);
   1a220:	6928      	ldr	r0, [r5, #16]
   1a222:	f00c fed0 	bl	26fc6 <qspi_lock.isra.0>
	if (!res) {
   1a226:	2c00      	cmp	r4, #0
   1a228:	d140      	bne.n	1a2ac <qspi_nor_write+0xf8>
		if (size < 4U) {
   1a22a:	2e03      	cmp	r6, #3
   1a22c:	d81c      	bhi.n	1a268 <qspi_nor_write+0xb4>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1a22e:	463a      	mov	r2, r7
   1a230:	2104      	movs	r1, #4
   1a232:	a807      	add	r0, sp, #28
   1a234:	f00d fb4d 	bl	278d2 <nrfx_qspi_read>
   1a238:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1a23a:	4601      	mov	r1, r0
   1a23c:	6928      	ldr	r0, [r5, #16]
   1a23e:	f7ff fcd9 	bl	19bf4 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1a242:	4b2a      	ldr	r3, [pc, #168]	; (1a2ec <qspi_nor_write+0x138>)
   1a244:	429c      	cmp	r4, r3
   1a246:	d131      	bne.n	1a2ac <qspi_nor_write+0xf8>
		memcpy(buf, sptr, slen);
   1a248:	4632      	mov	r2, r6
   1a24a:	4641      	mov	r1, r8
   1a24c:	a807      	add	r0, sp, #28
   1a24e:	f00e fab8 	bl	287c2 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1a252:	463a      	mov	r2, r7
   1a254:	2104      	movs	r1, #4
   1a256:	a807      	add	r0, sp, #28
			res = nrfx_qspi_write(src, size, addr);
   1a258:	f00d fb38 	bl	278cc <nrfx_qspi_write>
   1a25c:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1a25e:	4601      	mov	r1, r0
   1a260:	6928      	ldr	r0, [r5, #16]
   1a262:	f7ff fcc7 	bl	19bf4 <qspi_wait_for_completion.isra.0>
   1a266:	e021      	b.n	1a2ac <qspi_nor_write+0xf8>
   1a268:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1a26c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a270:	d033      	beq.n	1a2da <qspi_nor_write+0x126>
			if (res == NRFX_SUCCESS) {
   1a272:	f8df a078 	ldr.w	sl, [pc, #120]	; 1a2ec <qspi_nor_write+0x138>
			size_t len = MIN(slen, sizeof(buf));
   1a276:	2e04      	cmp	r6, #4
   1a278:	46b1      	mov	r9, r6
   1a27a:	bf28      	it	cs
   1a27c:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   1a280:	4641      	mov	r1, r8
   1a282:	464a      	mov	r2, r9
   1a284:	a807      	add	r0, sp, #28
   1a286:	f00e fa9c 	bl	287c2 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1a28a:	463a      	mov	r2, r7
   1a28c:	2104      	movs	r1, #4
   1a28e:	a807      	add	r0, sp, #28
   1a290:	f00d fb1c 	bl	278cc <nrfx_qspi_write>
   1a294:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1a296:	4601      	mov	r1, r0
   1a298:	6928      	ldr	r0, [r5, #16]
   1a29a:	f7ff fcab 	bl	19bf4 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1a29e:	4554      	cmp	r4, sl
   1a2a0:	d104      	bne.n	1a2ac <qspi_nor_write+0xf8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1a2a2:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   1a2a6:	44c8      	add	r8, r9
				addr += len;
   1a2a8:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1a2aa:	d1e4      	bne.n	1a276 <qspi_nor_write+0xc2>
	k_sem_give(&dev_data->sem);
   1a2ac:	6928      	ldr	r0, [r5, #16]
   1a2ae:	3018      	adds	r0, #24
   1a2b0:	f00c fe72 	bl	26f98 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1a2b4:	2101      	movs	r1, #1
   1a2b6:	4628      	mov	r0, r5
   1a2b8:	f00c fe92 	bl	26fe0 <qspi_nor_write_protection_set>
   1a2bc:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1a2be:	6928      	ldr	r0, [r5, #16]
   1a2c0:	f00c fe6a 	bl	26f98 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1a2c4:	2c00      	cmp	r4, #0
   1a2c6:	bf14      	ite	ne
   1a2c8:	4620      	movne	r0, r4
   1a2ca:	4630      	moveq	r0, r6
   1a2cc:	f7ff fc78 	bl	19bc0 <qspi_get_zephyr_ret_code>
   1a2d0:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1a2d2:	4628      	mov	r0, r5
   1a2d4:	f7ff fd10 	bl	19cf8 <qspi_device_uninit>
	return rc;
   1a2d8:	e790      	b.n	1a1fc <qspi_nor_write+0x48>
			res = nrfx_qspi_write(src, size, addr);
   1a2da:	463a      	mov	r2, r7
   1a2dc:	4631      	mov	r1, r6
   1a2de:	4640      	mov	r0, r8
   1a2e0:	e7ba      	b.n	1a258 <qspi_nor_write+0xa4>
   1a2e2:	bf00      	nop
   1a2e4:	0002e589 	.word	0x0002e589
   1a2e8:	00029794 	.word	0x00029794
   1a2ec:	0bad0000 	.word	0x0bad0000

0001a2f0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1a2f0:	4b02      	ldr	r3, [pc, #8]	; (1a2fc <flash_nrf_pages_layout+0xc>)
   1a2f2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1a2f4:	2301      	movs	r3, #1
   1a2f6:	6013      	str	r3, [r2, #0]
}
   1a2f8:	4770      	bx	lr
   1a2fa:	bf00      	nop
   1a2fc:	20021234 	.word	0x20021234

0001a300 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1a300:	4800      	ldr	r0, [pc, #0]	; (1a304 <flash_nrf_get_parameters+0x4>)
   1a302:	4770      	bx	lr
   1a304:	0002a444 	.word	0x0002a444

0001a308 <flash_nrf_read>:
{
   1a308:	b570      	push	{r4, r5, r6, lr}
   1a30a:	460c      	mov	r4, r1
   1a30c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1a30e:	4619      	mov	r1, r3
   1a310:	4620      	mov	r0, r4
{
   1a312:	461d      	mov	r5, r3
   1a314:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   1a316:	f00c fe93 	bl	27040 <is_regular_addr_valid>
   1a31a:	4603      	mov	r3, r0
   1a31c:	b968      	cbnz	r0, 1a33a <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1a31e:	4a0f      	ldr	r2, [pc, #60]	; (1a35c <flash_nrf_read+0x54>)
   1a320:	9000      	str	r0, [sp, #0]
   1a322:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1a326:	e9cd 4503 	strd	r4, r5, [sp, #12]
   1a32a:	2201      	movs	r2, #1
   1a32c:	490c      	ldr	r1, [pc, #48]	; (1a360 <flash_nrf_read+0x58>)
   1a32e:	f00c fe98 	bl	27062 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a332:	f06f 0015 	mvn.w	r0, #21
}
   1a336:	b006      	add	sp, #24
   1a338:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1a33a:	b165      	cbz	r5, 1a356 <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
   1a33c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1a340:	462a      	mov	r2, r5
   1a342:	4621      	mov	r1, r4
   1a344:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   1a346:	da04      	bge.n	1a352 <flash_nrf_read+0x4a>
}
   1a348:	b006      	add	sp, #24
   1a34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   1a34e:	f009 beb3 	b.w	240b8 <soc_secure_mem_read>
   1a352:	f00e fa36 	bl	287c2 <memcpy>
		return 0;
   1a356:	2000      	movs	r0, #0
   1a358:	e7ed      	b.n	1a336 <flash_nrf_read+0x2e>
   1a35a:	bf00      	nop
   1a35c:	0002e5dc 	.word	0x0002e5dc
   1a360:	0002972c 	.word	0x0002972c

0001a364 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1a364:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a366:	2201      	movs	r2, #1
   1a368:	4806      	ldr	r0, [pc, #24]	; (1a384 <nrf_flash_init+0x20>)
   1a36a:	4611      	mov	r1, r2
   1a36c:	f00e f875 	bl	2845a <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1a370:	f00d faa6 	bl	278c0 <nrfx_nvmc_flash_page_count_get>
   1a374:	4c04      	ldr	r4, [pc, #16]	; (1a388 <nrf_flash_init+0x24>)
   1a376:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1a378:	f00d fa9f 	bl	278ba <nrfx_nvmc_flash_page_size_get>
   1a37c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1a37e:	2000      	movs	r0, #0
   1a380:	bd10      	pop	{r4, pc}
   1a382:	bf00      	nop
   1a384:	2002123c 	.word	0x2002123c
   1a388:	20021234 	.word	0x20021234

0001a38c <flash_nrf_erase>:
{
   1a38c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a38e:	b087      	sub	sp, #28
   1a390:	460e      	mov	r6, r1
   1a392:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1a394:	f00d fa91 	bl	278ba <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1a398:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1a39a:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1a39c:	4630      	mov	r0, r6
   1a39e:	f00c fe4f 	bl	27040 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1a3a2:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   1a3a4:	4603      	mov	r3, r0
   1a3a6:	b388      	cbz	r0, 1a40c <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1a3a8:	fbb6 f3f5 	udiv	r3, r6, r5
   1a3ac:	fb05 6313 	mls	r3, r5, r3, r6
   1a3b0:	b923      	cbnz	r3, 1a3bc <flash_nrf_erase+0x30>
   1a3b2:	fbb4 f3f5 	udiv	r3, r4, r5
   1a3b6:	fb05 4313 	mls	r3, r5, r3, r4
   1a3ba:	b173      	cbz	r3, 1a3da <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1a3bc:	4b18      	ldr	r3, [pc, #96]	; (1a420 <flash_nrf_erase+0x94>)
   1a3be:	2201      	movs	r2, #1
   1a3c0:	9302      	str	r3, [sp, #8]
   1a3c2:	2300      	movs	r3, #0
   1a3c4:	4618      	mov	r0, r3
   1a3c6:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1a3ca:	e9cd 3300 	strd	r3, r3, [sp]
   1a3ce:	4915      	ldr	r1, [pc, #84]	; (1a424 <flash_nrf_erase+0x98>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1a3d0:	f00c fe47 	bl	27062 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1a3d4:	f06f 0015 	mvn.w	r0, #21
   1a3d8:	e002      	b.n	1a3e0 <flash_nrf_erase+0x54>
		if (!n_pages) {
   1a3da:	42a5      	cmp	r5, r4
   1a3dc:	d902      	bls.n	1a3e4 <flash_nrf_erase+0x58>
			return 0;
   1a3de:	2000      	movs	r0, #0
}
   1a3e0:	b007      	add	sp, #28
   1a3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   1a3e4:	f04f 32ff 	mov.w	r2, #4294967295
   1a3e8:	f04f 33ff 	mov.w	r3, #4294967295
   1a3ec:	480e      	ldr	r0, [pc, #56]	; (1a428 <flash_nrf_erase+0x9c>)
   1a3ee:	f004 fef9 	bl	1f1e4 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1a3f2:	f00d fa62 	bl	278ba <nrfx_nvmc_flash_page_size_get>
   1a3f6:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1a3f8:	4638      	mov	r0, r7
   1a3fa:	f002 fad5 	bl	1c9a8 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1a3fe:	1b64      	subs	r4, r4, r5
   1a400:	442f      	add	r7, r5
   1a402:	d1f9      	bne.n	1a3f8 <flash_nrf_erase+0x6c>
	z_impl_k_sem_give(sem);
   1a404:	4808      	ldr	r0, [pc, #32]	; (1a428 <flash_nrf_erase+0x9c>)
   1a406:	f004 fea9 	bl	1f15c <z_impl_k_sem_give>
}
   1a40a:	e7e8      	b.n	1a3de <flash_nrf_erase+0x52>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1a40c:	4a07      	ldr	r2, [pc, #28]	; (1a42c <flash_nrf_erase+0xa0>)
   1a40e:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1a412:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1a416:	4903      	ldr	r1, [pc, #12]	; (1a424 <flash_nrf_erase+0x98>)
   1a418:	2201      	movs	r2, #1
   1a41a:	9000      	str	r0, [sp, #0]
   1a41c:	e7d8      	b.n	1a3d0 <flash_nrf_erase+0x44>
   1a41e:	bf00      	nop
   1a420:	0002e5f9 	.word	0x0002e5f9
   1a424:	0002972c 	.word	0x0002972c
   1a428:	2002123c 	.word	0x2002123c
   1a42c:	0002e5dc 	.word	0x0002e5dc

0001a430 <flash_nrf_write>:
{
   1a430:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a432:	460e      	mov	r6, r1
   1a434:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   1a436:	4619      	mov	r1, r3
   1a438:	4630      	mov	r0, r6
{
   1a43a:	461c      	mov	r4, r3
   1a43c:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
   1a43e:	f00c fdff 	bl	27040 <is_regular_addr_valid>
   1a442:	4603      	mov	r3, r0
   1a444:	b968      	cbnz	r0, 1a462 <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1a446:	4a1d      	ldr	r2, [pc, #116]	; (1a4bc <flash_nrf_write+0x8c>)
   1a448:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1a44c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1a450:	2201      	movs	r2, #1
   1a452:	491b      	ldr	r1, [pc, #108]	; (1a4c0 <flash_nrf_write+0x90>)
   1a454:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1a456:	f00c fe04 	bl	27062 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a45a:	f06f 0015 	mvn.w	r0, #21
}
   1a45e:	b007      	add	sp, #28
   1a460:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1a462:	ea46 0504 	orr.w	r5, r6, r4
   1a466:	f015 0503 	ands.w	r5, r5, #3
   1a46a:	d00a      	beq.n	1a482 <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1a46c:	4b15      	ldr	r3, [pc, #84]	; (1a4c4 <flash_nrf_write+0x94>)
   1a46e:	2201      	movs	r2, #1
   1a470:	9302      	str	r3, [sp, #8]
   1a472:	2300      	movs	r3, #0
   1a474:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1a478:	4618      	mov	r0, r3
   1a47a:	e9cd 3300 	strd	r3, r3, [sp]
   1a47e:	4910      	ldr	r1, [pc, #64]	; (1a4c0 <flash_nrf_write+0x90>)
   1a480:	e7e9      	b.n	1a456 <flash_nrf_write+0x26>
	if (!len) {
   1a482:	b1a4      	cbz	r4, 1a4ae <flash_nrf_write+0x7e>
	return z_impl_k_sem_take(sem, timeout);
   1a484:	f04f 32ff 	mov.w	r2, #4294967295
   1a488:	f04f 33ff 	mov.w	r3, #4294967295
   1a48c:	480e      	ldr	r0, [pc, #56]	; (1a4c8 <flash_nrf_write+0x98>)
   1a48e:	f004 fea9 	bl	1f1e4 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1a492:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1a496:	42a5      	cmp	r5, r4
   1a498:	eb05 0006 	add.w	r0, r5, r6
   1a49c:	d109      	bne.n	1a4b2 <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1a49e:	4a0b      	ldr	r2, [pc, #44]	; (1a4cc <flash_nrf_write+0x9c>)
   1a4a0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1a4a4:	07db      	lsls	r3, r3, #31
   1a4a6:	d5fb      	bpl.n	1a4a0 <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
   1a4a8:	4807      	ldr	r0, [pc, #28]	; (1a4c8 <flash_nrf_write+0x98>)
   1a4aa:	f004 fe57 	bl	1f15c <z_impl_k_sem_give>
	return ret;
   1a4ae:	2000      	movs	r0, #0
   1a4b0:	e7d5      	b.n	1a45e <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1a4b2:	5979      	ldr	r1, [r7, r5]
   1a4b4:	f002 faaa 	bl	1ca0c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1a4b8:	3504      	adds	r5, #4
}
   1a4ba:	e7ec      	b.n	1a496 <flash_nrf_write+0x66>
   1a4bc:	0002e5dc 	.word	0x0002e5dc
   1a4c0:	0002972c 	.word	0x0002972c
   1a4c4:	0002e618 	.word	0x0002e618
   1a4c8:	2002123c 	.word	0x2002123c
   1a4cc:	40039000 	.word	0x40039000

0001a4d0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1a4d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1a4d2:	ab0b      	add	r3, sp, #44	; 0x2c
   1a4d4:	9305      	str	r3, [sp, #20]
   1a4d6:	9303      	str	r3, [sp, #12]
   1a4d8:	4b05      	ldr	r3, [pc, #20]	; (1a4f0 <z_log_msg_runtime_create.constprop.0+0x20>)
   1a4da:	2201      	movs	r2, #1
   1a4dc:	9302      	str	r3, [sp, #8]
   1a4de:	2300      	movs	r3, #0
   1a4e0:	4618      	mov	r0, r3
   1a4e2:	e9cd 3300 	strd	r3, r3, [sp]
   1a4e6:	f7f3 fd61 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   1a4ea:	b007      	add	sp, #28
   1a4ec:	f85d fb04 	ldr.w	pc, [sp], #4
   1a4f0:	0002e657 	.word	0x0002e657

0001a4f4 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1a4f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a4f6:	461d      	mov	r5, r3
	return config->uarte_regs;
   1a4f8:	6843      	ldr	r3, [r0, #4]
{
   1a4fa:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1a4fc:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1a4fe:	f8d3 c000 	ldr.w	ip, [r3]
   1a502:	f04f 0320 	mov.w	r3, #32
   1a506:	f3ef 8711 	mrs	r7, BASEPRI
   1a50a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a50e:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1a512:	68e3      	ldr	r3, [r4, #12]
   1a514:	68d8      	ldr	r0, [r3, #12]
   1a516:	b138      	cbz	r0, 1a528 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1a518:	f387 8811 	msr	BASEPRI, r7
   1a51c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1a520:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1a524:	b003      	add	sp, #12
   1a526:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1a528:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1a52a:	68e3      	ldr	r3, [r4, #12]
   1a52c:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a52e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a532:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1a536:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1a53a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a53e:	68e3      	ldr	r3, [r4, #12]
   1a540:	d111      	bne.n	1a566 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1a542:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1a544:	68e3      	ldr	r3, [r4, #12]
   1a546:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1a548:	4621      	mov	r1, r4
   1a54a:	4630      	mov	r0, r6
   1a54c:	f00c ff0f 	bl	2736e <start_tx_locked>
   1a550:	f387 8811 	msr	BASEPRI, r7
   1a554:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1a558:	7ae3      	ldrb	r3, [r4, #11]
   1a55a:	2b01      	cmp	r3, #1
   1a55c:	d101      	bne.n	1a562 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1a55e:	1c6b      	adds	r3, r5, #1
   1a560:	d106      	bne.n	1a570 <uarte_nrfx_tx+0x7c>
	return 0;
   1a562:	2000      	movs	r0, #0
   1a564:	e7de      	b.n	1a524 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1a566:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1a568:	4620      	mov	r0, r4
   1a56a:	f00c fe79 	bl	27260 <setup_tx_cache>
   1a56e:	e7eb      	b.n	1a548 <uarte_nrfx_tx+0x54>
   1a570:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1a574:	2100      	movs	r1, #0
   1a576:	480a      	ldr	r0, [pc, #40]	; (1a5a0 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1a578:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1a57c:	2300      	movs	r3, #0
   1a57e:	fbc5 0106 	smlal	r0, r1, r5, r6
   1a582:	4a08      	ldr	r2, [pc, #32]	; (1a5a4 <uarte_nrfx_tx+0xb0>)
   1a584:	f7ee fcb4 	bl	8ef0 <__aeabi_uldivmod>
   1a588:	68e4      	ldr	r4, [r4, #12]
   1a58a:	4602      	mov	r2, r0
   1a58c:	460b      	mov	r3, r1
   1a58e:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1a590:	2000      	movs	r0, #0
   1a592:	2100      	movs	r1, #0
   1a594:	e9cd 0100 	strd	r0, r1, [sp]
   1a598:	4620      	mov	r0, r4
   1a59a:	f007 f9f1 	bl	21980 <z_impl_k_timer_start>
   1a59e:	e7e0      	b.n	1a562 <uarte_nrfx_tx+0x6e>
   1a5a0:	000f423f 	.word	0x000f423f
   1a5a4:	000f4240 	.word	0x000f4240

0001a5a8 <uarte_nrfx_configure>:
{
   1a5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1a5aa:	794b      	ldrb	r3, [r1, #5]
   1a5ac:	2b01      	cmp	r3, #1
   1a5ae:	d029      	beq.n	1a604 <uarte_nrfx_configure+0x5c>
   1a5b0:	2b03      	cmp	r3, #3
   1a5b2:	d124      	bne.n	1a5fe <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1a5b4:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1a5b6:	798b      	ldrb	r3, [r1, #6]
   1a5b8:	2b03      	cmp	r3, #3
   1a5ba:	d120      	bne.n	1a5fe <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1a5bc:	79ce      	ldrb	r6, [r1, #7]
   1a5be:	b10e      	cbz	r6, 1a5c4 <uarte_nrfx_configure+0x1c>
   1a5c0:	2e01      	cmp	r6, #1
   1a5c2:	d11c      	bne.n	1a5fe <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1a5c4:	790a      	ldrb	r2, [r1, #4]
   1a5c6:	2a01      	cmp	r2, #1
   1a5c8:	d01e      	beq.n	1a608 <uarte_nrfx_configure+0x60>
   1a5ca:	2a02      	cmp	r2, #2
   1a5cc:	d020      	beq.n	1a610 <uarte_nrfx_configure+0x68>
   1a5ce:	b9b2      	cbnz	r2, 1a5fe <uarte_nrfx_configure+0x56>
   1a5d0:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a5d2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1a5d4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1a5d6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1a5da:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1a5de:	d06e      	beq.n	1a6be <uarte_nrfx_configure+0x116>
   1a5e0:	d833      	bhi.n	1a64a <uarte_nrfx_configure+0xa2>
   1a5e2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1a5e6:	d06d      	beq.n	1a6c4 <uarte_nrfx_configure+0x11c>
   1a5e8:	d81c      	bhi.n	1a624 <uarte_nrfx_configure+0x7c>
   1a5ea:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1a5ee:	d06b      	beq.n	1a6c8 <uarte_nrfx_configure+0x120>
   1a5f0:	d810      	bhi.n	1a614 <uarte_nrfx_configure+0x6c>
   1a5f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1a5f6:	d06a      	beq.n	1a6ce <uarte_nrfx_configure+0x126>
   1a5f8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1a5fc:	d06a      	beq.n	1a6d4 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1a5fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a602:	e05b      	b.n	1a6bc <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1a604:	2700      	movs	r7, #0
   1a606:	e7d6      	b.n	1a5b6 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1a608:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1a60c:	220e      	movs	r2, #14
   1a60e:	e7e0      	b.n	1a5d2 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1a610:	2400      	movs	r4, #0
   1a612:	e7fb      	b.n	1a60c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1a614:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1a618:	d05f      	beq.n	1a6da <uarte_nrfx_configure+0x132>
   1a61a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1a61e:	d1ee      	bne.n	1a5fe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1a620:	4b38      	ldr	r3, [pc, #224]	; (1a704 <uarte_nrfx_configure+0x15c>)
   1a622:	e03c      	b.n	1a69e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1a624:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1a628:	d05a      	beq.n	1a6e0 <uarte_nrfx_configure+0x138>
   1a62a:	d807      	bhi.n	1a63c <uarte_nrfx_configure+0x94>
   1a62c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1a630:	d058      	beq.n	1a6e4 <uarte_nrfx_configure+0x13c>
   1a632:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1a636:	d1e2      	bne.n	1a5fe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1a638:	4b33      	ldr	r3, [pc, #204]	; (1a708 <uarte_nrfx_configure+0x160>)
   1a63a:	e030      	b.n	1a69e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1a63c:	f647 2512 	movw	r5, #31250	; 0x7a12
   1a640:	42ab      	cmp	r3, r5
   1a642:	d1dc      	bne.n	1a5fe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1a644:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1a648:	e029      	b.n	1a69e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1a64a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1a64e:	d04b      	beq.n	1a6e8 <uarte_nrfx_configure+0x140>
   1a650:	d813      	bhi.n	1a67a <uarte_nrfx_configure+0xd2>
   1a652:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1a656:	d04a      	beq.n	1a6ee <uarte_nrfx_configure+0x146>
   1a658:	d809      	bhi.n	1a66e <uarte_nrfx_configure+0xc6>
   1a65a:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1a65e:	42ab      	cmp	r3, r5
   1a660:	d047      	beq.n	1a6f2 <uarte_nrfx_configure+0x14a>
   1a662:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1a666:	d1ca      	bne.n	1a5fe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1a668:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1a66c:	e017      	b.n	1a69e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1a66e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1a672:	d1c4      	bne.n	1a5fe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1a674:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1a678:	e011      	b.n	1a69e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1a67a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1a67e:	d03b      	beq.n	1a6f8 <uarte_nrfx_configure+0x150>
   1a680:	d808      	bhi.n	1a694 <uarte_nrfx_configure+0xec>
   1a682:	4d22      	ldr	r5, [pc, #136]	; (1a70c <uarte_nrfx_configure+0x164>)
   1a684:	42ab      	cmp	r3, r5
   1a686:	d03a      	beq.n	1a6fe <uarte_nrfx_configure+0x156>
   1a688:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1a68c:	d1b7      	bne.n	1a5fe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1a68e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1a692:	e004      	b.n	1a69e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1a694:	4d1e      	ldr	r5, [pc, #120]	; (1a710 <uarte_nrfx_configure+0x168>)
   1a696:	42ab      	cmp	r3, r5
   1a698:	d1b1      	bne.n	1a5fe <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1a69a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1a69e:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1a6a0:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1a6a4:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1a6a6:	433a      	orrs	r2, r7
   1a6a8:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1a6aa:	4334      	orrs	r4, r6
   1a6ac:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a6ae:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1a6b2:	1d2b      	adds	r3, r5, #4
   1a6b4:	c903      	ldmia	r1, {r0, r1}
   1a6b6:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1a6ba:	2000      	movs	r0, #0
}
   1a6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1a6be:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1a6c2:	e7ec      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1a6c4:	4b13      	ldr	r3, [pc, #76]	; (1a714 <uarte_nrfx_configure+0x16c>)
   1a6c6:	e7ea      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1a6c8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1a6cc:	e7e7      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1a6ce:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1a6d2:	e7e4      	b.n	1a69e <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1a6d4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1a6d8:	e7e1      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1a6da:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1a6de:	e7de      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1a6e0:	4b0d      	ldr	r3, [pc, #52]	; (1a718 <uarte_nrfx_configure+0x170>)
   1a6e2:	e7dc      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1a6e4:	4b0d      	ldr	r3, [pc, #52]	; (1a71c <uarte_nrfx_configure+0x174>)
   1a6e6:	e7da      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1a6e8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1a6ec:	e7d7      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1a6ee:	4b0c      	ldr	r3, [pc, #48]	; (1a720 <uarte_nrfx_configure+0x178>)
   1a6f0:	e7d5      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1a6f2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1a6f6:	e7d2      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1a6f8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1a6fc:	e7cf      	b.n	1a69e <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1a6fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a702:	e7cc      	b.n	1a69e <uarte_nrfx_configure+0xf6>
   1a704:	0013b000 	.word	0x0013b000
   1a708:	004ea000 	.word	0x004ea000
   1a70c:	0003d090 	.word	0x0003d090
   1a710:	000f4240 	.word	0x000f4240
   1a714:	00275000 	.word	0x00275000
   1a718:	0075c000 	.word	0x0075c000
   1a71c:	003af000 	.word	0x003af000
   1a720:	013a9000 	.word	0x013a9000

0001a724 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a724:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1a726:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1a72a:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1a72e:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1a730:	f8d9 5000 	ldr.w	r5, [r9]
static int uarte_instance_init(const struct device *dev,
   1a734:	b087      	sub	sp, #28
   1a736:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1a73a:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1a73c:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1a740:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1a742:	aa05      	add	r2, sp, #20
   1a744:	4640      	mov	r0, r8
   1a746:	f00c feee 	bl	27526 <pinctrl_lookup_state>
	if (ret < 0) {
   1a74a:	1e04      	subs	r4, r0, #0
   1a74c:	db25      	blt.n	1a79a <uarte_instance_init.constprop.0+0x76>
	return pinctrl_apply_state_direct(config, state);
   1a74e:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a750:	f8d8 2000 	ldr.w	r2, [r8]
   1a754:	7919      	ldrb	r1, [r3, #4]
   1a756:	6818      	ldr	r0, [r3, #0]
   1a758:	f00c fef8 	bl	2754c <pinctrl_configure_pins>
	if (err < 0) {
   1a75c:	1e04      	subs	r4, r0, #0
   1a75e:	db1c      	blt.n	1a79a <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1a760:	4638      	mov	r0, r7
   1a762:	1d31      	adds	r1, r6, #4
   1a764:	f7ff ff20 	bl	1a5a8 <uarte_nrfx_configure>
	if (err) {
   1a768:	4604      	mov	r4, r0
   1a76a:	b9b0      	cbnz	r0, 1a79a <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1a76c:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1a770:	0799      	lsls	r1, r3, #30
   1a772:	d532      	bpl.n	1a7da <uarte_instance_init.constprop.0+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1a774:	f106 001c 	add.w	r0, r6, #28
   1a778:	f001 fc3c 	bl	1bff4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1a77c:	4b4f      	ldr	r3, [pc, #316]	; (1a8bc <uarte_instance_init.constprop.0+0x198>)
   1a77e:	4298      	cmp	r0, r3
   1a780:	d00f      	beq.n	1a7a2 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
   1a782:	4b4f      	ldr	r3, [pc, #316]	; (1a8c0 <uarte_instance_init.constprop.0+0x19c>)
   1a784:	4620      	mov	r0, r4
   1a786:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1a78a:	9400      	str	r4, [sp, #0]
   1a78c:	4623      	mov	r3, r4
   1a78e:	2201      	movs	r2, #1
   1a790:	494c      	ldr	r1, [pc, #304]	; (1a8c4 <uarte_instance_init.constprop.0+0x1a0>)
   1a792:	f7ff fe9d 	bl	1a4d0 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1a796:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1a79a:	4620      	mov	r0, r4
   1a79c:	b007      	add	sp, #28
   1a79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a7a2:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1a7a4:	f115 0f0c 	cmn.w	r5, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1a7a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a7ac:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1a7b0:	d10b      	bne.n	1a7ca <uarte_instance_init.constprop.0+0xa6>
   1a7b2:	4945      	ldr	r1, [pc, #276]	; (1a8c8 <uarte_instance_init.constprop.0+0x1a4>)
   1a7b4:	4845      	ldr	r0, [pc, #276]	; (1a8cc <uarte_instance_init.constprop.0+0x1a8>)
   1a7b6:	f240 234e 	movw	r3, #590	; 0x24e
   1a7ba:	4a45      	ldr	r2, [pc, #276]	; (1a8d0 <uarte_instance_init.constprop.0+0x1ac>)
   1a7bc:	f009 fc31 	bl	24022 <assert_print>
   1a7c0:	f240 214e 	movw	r1, #590	; 0x24e
   1a7c4:	4842      	ldr	r0, [pc, #264]	; (1a8d0 <uarte_instance_init.constprop.0+0x1ac>)
   1a7c6:	f009 fc25 	bl	24014 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1a7ca:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1a7ce:	2301      	movs	r3, #1
   1a7d0:	7f32      	ldrb	r2, [r6, #28]
   1a7d2:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1a7d4:	4a3f      	ldr	r2, [pc, #252]	; (1a8d4 <uarte_instance_init.constprop.0+0x1b0>)
   1a7d6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1a7da:	68f3      	ldr	r3, [r6, #12]
   1a7dc:	2b00      	cmp	r3, #0
   1a7de:	d059      	beq.n	1a894 <uarte_instance_init.constprop.0+0x170>
    p_reg->INTENSET = mask;
   1a7e0:	2204      	movs	r2, #4
	return config->uarte_regs;
   1a7e2:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1a7e4:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1a7e8:	681b      	ldr	r3, [r3, #0]
   1a7ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1a7ee:	2201      	movs	r2, #1
   1a7f0:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1a7f4:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1a7f8:	4937      	ldr	r1, [pc, #220]	; (1a8d8 <uarte_instance_init.constprop.0+0x1b4>)
   1a7fa:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a7fe:	2108      	movs	r1, #8
   1a800:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a804:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1a808:	b1a1      	cbz	r1, 1a834 <uarte_instance_init.constprop.0+0x110>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a80a:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a80c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1a810:	b91a      	cbnz	r2, 1a81a <uarte_instance_init.constprop.0+0xf6>
   1a812:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1a816:	2a00      	cmp	r2, #0
   1a818:	d0f8      	beq.n	1a80c <uarte_instance_init.constprop.0+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a81a:	2200      	movs	r2, #0
   1a81c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1a820:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1a824:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1a828:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1a82c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1a830:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1a834:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1a838:	2200      	movs	r2, #0
   1a83a:	4928      	ldr	r1, [pc, #160]	; (1a8dc <uarte_instance_init.constprop.0+0x1b8>)
   1a83c:	3080      	adds	r0, #128	; 0x80
   1a83e:	f00d fedd 	bl	285fc <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1a842:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1a846:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1a84a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1a84e:	2200      	movs	r2, #0
   1a850:	4923      	ldr	r1, [pc, #140]	; (1a8e0 <uarte_instance_init.constprop.0+0x1bc>)
   1a852:	3020      	adds	r0, #32
   1a854:	f00d fed2 	bl	285fc <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1a858:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1a85c:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1a860:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1a864:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1a866:	bf5c      	itt	pl
   1a868:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1a86c:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a870:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1a874:	06db      	lsls	r3, r3, #27
   1a876:	bf44      	itt	mi
   1a878:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1a87c:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a880:	6973      	ldr	r3, [r6, #20]
   1a882:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a886:	2300      	movs	r3, #0
   1a888:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a88c:	2301      	movs	r3, #1
   1a88e:	60ab      	str	r3, [r5, #8]
   1a890:	60eb      	str	r3, [r5, #12]
	return 0;
   1a892:	e782      	b.n	1a79a <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a894:	2308      	movs	r3, #8
   1a896:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1a89a:	f899 3008 	ldrb.w	r3, [r9, #8]
   1a89e:	2b00      	cmp	r3, #0
   1a8a0:	d1de      	bne.n	1a860 <uarte_instance_init.constprop.0+0x13c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a8a2:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1a8a6:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a8aa:	69b3      	ldr	r3, [r6, #24]
   1a8ac:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a8b0:	2301      	movs	r3, #1
   1a8b2:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a8b6:	602b      	str	r3, [r5, #0]
}
   1a8b8:	e7d2      	b.n	1a860 <uarte_instance_init.constprop.0+0x13c>
   1a8ba:	bf00      	nop
   1a8bc:	0bad0000 	.word	0x0bad0000
   1a8c0:	0002e657 	.word	0x0002e657
   1a8c4:	000297b4 	.word	0x000297b4
   1a8c8:	0002b47e 	.word	0x0002b47e
   1a8cc:	0002a669 	.word	0x0002a669
   1a8d0:	0002b446 	.word	0x0002b446
   1a8d4:	40017000 	.word	0x40017000
   1a8d8:	000a0210 	.word	0x000a0210
   1a8dc:	000273e1 	.word	0x000273e1
   1a8e0:	000274b1 	.word	0x000274b1

0001a8e4 <uarte_nrfx_poll_out>:
{
   1a8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8e8:	4604      	mov	r4, r0
   1a8ea:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1a8ec:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1a8ee:	f00d fd63 	bl	283b8 <k_is_in_isr>
   1a8f2:	b9b0      	cbnz	r0, 1a922 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1a8f4:	4b2a      	ldr	r3, [pc, #168]	; (1a9a0 <uarte_nrfx_poll_out+0xbc>)
   1a8f6:	781b      	ldrb	r3, [r3, #0]
   1a8f8:	b19b      	cbz	r3, 1a922 <uarte_nrfx_poll_out+0x3e>
{
   1a8fa:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1a8fc:	6860      	ldr	r0, [r4, #4]
   1a8fe:	f00c fd26 	bl	2734e <is_tx_ready.isra.0>
   1a902:	2800      	cmp	r0, #0
   1a904:	d138      	bne.n	1a978 <uarte_nrfx_poll_out+0x94>
   1a906:	2001      	movs	r0, #1
   1a908:	f00c ff5a 	bl	277c0 <nrfx_busy_wait>
   1a90c:	3f01      	subs	r7, #1
   1a90e:	d1f5      	bne.n	1a8fc <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1a910:	2100      	movs	r1, #0
   1a912:	2021      	movs	r0, #33	; 0x21
   1a914:	f006 fb16 	bl	20f44 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a918:	e7ef      	b.n	1a8fa <uarte_nrfx_poll_out+0x16>
   1a91a:	f381 8811 	msr	BASEPRI, r1
   1a91e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a922:	f04f 0320 	mov.w	r3, #32
   1a926:	f3ef 8111 	mrs	r1, BASEPRI
   1a92a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a92e:	f3bf 8f6f 	isb	sy
   1a932:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1a936:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1a938:	4640      	mov	r0, r8
   1a93a:	f00c fd08 	bl	2734e <is_tx_ready.isra.0>
   1a93e:	2800      	cmp	r0, #0
   1a940:	d0eb      	beq.n	1a91a <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1a942:	68eb      	ldr	r3, [r5, #12]
   1a944:	b15b      	cbz	r3, 1a95e <uarte_nrfx_poll_out+0x7a>
   1a946:	68da      	ldr	r2, [r3, #12]
   1a948:	b14a      	cbz	r2, 1a95e <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1a94a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1a94e:	2a00      	cmp	r2, #0
   1a950:	da05      	bge.n	1a95e <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1a952:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1a956:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1a95a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1a95e:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1a960:	2201      	movs	r2, #1
	*data->char_out = c;
   1a962:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1a964:	4620      	mov	r0, r4
   1a966:	6969      	ldr	r1, [r5, #20]
   1a968:	f00c fb9a 	bl	270a0 <tx_start>
	__asm__ volatile(
   1a96c:	f387 8811 	msr	BASEPRI, r7
   1a970:	f3bf 8f6f 	isb	sy
}
   1a974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1a978:	f04f 0320 	mov.w	r3, #32
   1a97c:	f3ef 8111 	mrs	r1, BASEPRI
   1a980:	f383 8812 	msr	BASEPRI_MAX, r3
   1a984:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1a988:	6860      	ldr	r0, [r4, #4]
   1a98a:	460f      	mov	r7, r1
   1a98c:	f00c fcdf 	bl	2734e <is_tx_ready.isra.0>
   1a990:	2800      	cmp	r0, #0
   1a992:	d1e4      	bne.n	1a95e <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1a994:	f381 8811 	msr	BASEPRI, r1
   1a998:	f3bf 8f6f 	isb	sy
}
   1a99c:	e7b8      	b.n	1a910 <uarte_nrfx_poll_out+0x2c>
   1a99e:	bf00      	nop
   1a9a0:	200221b2 	.word	0x200221b2

0001a9a4 <uarte_nrfx_rx_enable>:
{
   1a9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1a9a8:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1a9ac:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1a9ae:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1a9b2:	4605      	mov	r5, r0
   1a9b4:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1a9b6:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1a9b8:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1a9bc:	b172      	cbz	r2, 1a9dc <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1a9be:	4944      	ldr	r1, [pc, #272]	; (1aad0 <uarte_nrfx_rx_enable+0x12c>)
   1a9c0:	f240 337d 	movw	r3, #893	; 0x37d
   1a9c4:	4a43      	ldr	r2, [pc, #268]	; (1aad4 <uarte_nrfx_rx_enable+0x130>)
   1a9c6:	4844      	ldr	r0, [pc, #272]	; (1aad8 <uarte_nrfx_rx_enable+0x134>)
   1a9c8:	f009 fb2b 	bl	24022 <assert_print>
   1a9cc:	4843      	ldr	r0, [pc, #268]	; (1aadc <uarte_nrfx_rx_enable+0x138>)
   1a9ce:	f009 fb28 	bl	24022 <assert_print>
   1a9d2:	f240 317d 	movw	r1, #893	; 0x37d
   1a9d6:	483f      	ldr	r0, [pc, #252]	; (1aad4 <uarte_nrfx_rx_enable+0x130>)
   1a9d8:	f009 fb1c 	bl	24014 <assert_post_action>
	if (data->async->rx_enabled) {
   1a9dc:	68e2      	ldr	r2, [r4, #12]
   1a9de:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1a9e2:	2900      	cmp	r1, #0
   1a9e4:	d170      	bne.n	1aac8 <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1a9e6:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1a9ea:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1a9ec:	bfca      	itet	gt
   1a9ee:	2205      	movgt	r2, #5
   1a9f0:	235c      	movle	r3, #92	; 0x5c
   1a9f2:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1a9f6:	68e2      	ldr	r2, [r4, #12]
   1a9f8:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1a9fa:	68e3      	ldr	r3, [r4, #12]
   1a9fc:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1aa00:	68e3      	ldr	r3, [r4, #12]
   1aa02:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1aa04:	2300      	movs	r3, #0
   1aa06:	68e2      	ldr	r2, [r4, #12]
   1aa08:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1aa0a:	68e2      	ldr	r2, [r4, #12]
   1aa0c:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1aa0e:	68e2      	ldr	r2, [r4, #12]
   1aa10:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1aa12:	f8da 3004 	ldr.w	r3, [sl, #4]
   1aa16:	06da      	lsls	r2, r3, #27
   1aa18:	d523      	bpl.n	1aa62 <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1aa1a:	68e1      	ldr	r1, [r4, #12]
   1aa1c:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1aa20:	b1fe      	cbz	r6, 1aa62 <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1aa22:	42be      	cmp	r6, r7
   1aa24:	bf28      	it	cs
   1aa26:	463e      	movcs	r6, r7
   1aa28:	4640      	mov	r0, r8
   1aa2a:	4632      	mov	r2, r6
   1aa2c:	31c4      	adds	r1, #196	; 0xc4
   1aa2e:	f00d fec8 	bl	287c2 <memcpy>
			if (!len) {
   1aa32:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1aa34:	44b0      	add	r8, r6
			if (!len) {
   1aa36:	d114      	bne.n	1aa62 <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1aa38:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1aa3a:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1aa3c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1aa40:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1aa42:	1b9b      	subs	r3, r3, r6
   1aa44:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1aa48:	f00c fb59 	bl	270fe <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1aa4c:	68e1      	ldr	r1, [r4, #12]
   1aa4e:	4628      	mov	r0, r5
   1aa50:	3158      	adds	r1, #88	; 0x58
   1aa52:	f00c fb6d 	bl	27130 <rx_buf_release>
				notify_rx_disable(dev);
   1aa56:	4628      	mov	r0, r5
   1aa58:	f00c fb82 	bl	27160 <notify_rx_disable>
	return 0;
   1aa5c:	2000      	movs	r0, #0
}
   1aa5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aa62:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1aa64:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1aa68:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aa6c:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1aa70:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1aa74:	2201      	movs	r2, #1
   1aa76:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1aa7a:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1aa7e:	68e3      	ldr	r3, [r4, #12]
   1aa80:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1aa84:	f8da 3004 	ldr.w	r3, [sl, #4]
   1aa88:	06db      	lsls	r3, r3, #27
   1aa8a:	d519      	bpl.n	1aac0 <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1aa8c:	f04f 0320 	mov.w	r3, #32
   1aa90:	f3ef 8111 	mrs	r1, BASEPRI
   1aa94:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa98:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1aa9c:	692b      	ldr	r3, [r5, #16]
   1aa9e:	68db      	ldr	r3, [r3, #12]
   1aaa0:	b12b      	cbz	r3, 1aaae <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1aaa2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1aaa6:	f042 0202 	orr.w	r2, r2, #2
   1aaaa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1aaae:	2208      	movs	r2, #8
	return config->uarte_regs;
   1aab0:	686b      	ldr	r3, [r5, #4]
   1aab2:	681b      	ldr	r3, [r3, #0]
   1aab4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1aab8:	f381 8811 	msr	BASEPRI, r1
   1aabc:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aac0:	2301      	movs	r3, #1
   1aac2:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1aac6:	e7c9      	b.n	1aa5c <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1aac8:	f06f 000f 	mvn.w	r0, #15
   1aacc:	e7c7      	b.n	1aa5e <uarte_nrfx_rx_enable+0xba>
   1aace:	bf00      	nop
   1aad0:	0002fb7c 	.word	0x0002fb7c
   1aad4:	0002e676 	.word	0x0002e676
   1aad8:	0002a669 	.word	0x0002a669
   1aadc:	0002e6aa 	.word	0x0002e6aa

0001aae0 <uarte_nrfx_isr_async>:
{
   1aae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1aae4:	6843      	ldr	r3, [r0, #4]
{
   1aae6:	4604      	mov	r4, r0
	return config->uarte_regs;
   1aae8:	681d      	ldr	r5, [r3, #0]
{
   1aaea:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aaec:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1aaf0:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1aaf2:	b169      	cbz	r1, 1ab10 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aaf4:	2200      	movs	r2, #0
   1aaf6:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1aafa:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1aafe:	68da      	ldr	r2, [r3, #12]
   1ab00:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1ab04:	3301      	adds	r3, #1
   1ab06:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1ab0a:	b008      	add	sp, #32
   1ab0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ab10:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1ab14:	b323      	cbz	r3, 1ab60 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ab16:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1ab1a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1ab1e:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1ab20:	2214      	movs	r2, #20
	return config->uarte_regs;
   1ab22:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1ab24:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1ab26:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1ab2a:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1ab2e:	f00d fe6f 	bl	28810 <memset>
   1ab32:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1ab34:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1ab36:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1ab3a:	f100 8103 	bmi.w	1ad44 <uarte_nrfx_isr_async+0x264>
   1ab3e:	07b3      	lsls	r3, r6, #30
   1ab40:	f100 8102 	bmi.w	1ad48 <uarte_nrfx_isr_async+0x268>
   1ab44:	0777      	lsls	r7, r6, #29
   1ab46:	f100 8101 	bmi.w	1ad4c <uarte_nrfx_isr_async+0x26c>
   1ab4a:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1ab4e:	4620      	mov	r0, r4
   1ab50:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1ab52:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1ab56:	f00c facb 	bl	270f0 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1ab5a:	4620      	mov	r0, r4
   1ab5c:	f00c fb5e 	bl	2721c <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ab60:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1ab64:	b38b      	cbz	r3, 1abca <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1ab66:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1ab6a:	06d8      	lsls	r0, r3, #27
   1ab6c:	d52d      	bpl.n	1abca <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ab6e:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1ab72:	2201      	movs	r2, #1
   1ab74:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1ab78:	6926      	ldr	r6, [r4, #16]
   1ab7a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1ab7e:	6863      	ldr	r3, [r4, #4]
   1ab80:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1ab82:	68f3      	ldr	r3, [r6, #12]
   1ab84:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1ab88:	68f0      	ldr	r0, [r6, #12]
   1ab8a:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1ab8c:	f00d fd42 	bl	28614 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1ab90:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1ab92:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1ab96:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1ab9a:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1ab9e:	68f2      	ldr	r2, [r6, #12]
   1aba0:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1aba2:	1a1b      	subs	r3, r3, r0
   1aba4:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1aba6:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1aba8:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1abac:	4408      	add	r0, r1
	if (rx_len > 0) {
   1abae:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1abb0:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1abb2:	dd02      	ble.n	1abba <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1abb4:	4620      	mov	r0, r4
   1abb6:	f00c faa2 	bl	270fe <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1abba:	68f1      	ldr	r1, [r6, #12]
   1abbc:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1abc0:	2b00      	cmp	r3, #0
   1abc2:	f040 80c5 	bne.w	1ad50 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1abc6:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1abca:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1abce:	b383      	cbz	r3, 1ac32 <uarte_nrfx_isr_async+0x152>
   1abd0:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1abd4:	bb6e      	cbnz	r6, 1ac32 <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1abd6:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1abd8:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1abdc:	4631      	mov	r1, r6
   1abde:	a803      	add	r0, sp, #12
   1abe0:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1abe4:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1abe6:	f00d fe13 	bl	28810 <memset>
   1abea:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1abec:	a903      	add	r1, sp, #12
   1abee:	4620      	mov	r0, r4
	struct uart_event evt = {
   1abf0:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1abf4:	f00c fa7c 	bl	270f0 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1abf8:	68fb      	ldr	r3, [r7, #12]
   1abfa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1abfc:	1c51      	adds	r1, r2, #1
   1abfe:	d018      	beq.n	1ac32 <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1ac00:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1ac02:	68ff      	ldr	r7, [r7, #12]
   1ac04:	498e      	ldr	r1, [pc, #568]	; (1ae40 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1ac06:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1ac08:	468e      	mov	lr, r1
   1ac0a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1ac0e:	4631      	mov	r1, r6
   1ac10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1ac14:	fbcc e100 	smlal	lr, r1, ip, r0
   1ac18:	2300      	movs	r3, #0
   1ac1a:	4670      	mov	r0, lr
   1ac1c:	4a89      	ldr	r2, [pc, #548]	; (1ae44 <uarte_nrfx_isr_async+0x364>)
   1ac1e:	f7ee f967 	bl	8ef0 <__aeabi_uldivmod>
   1ac22:	4602      	mov	r2, r0
   1ac24:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1ac26:	e9cd 0100 	strd	r0, r1, [sp]
   1ac2a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1ac2e:	f006 fea7 	bl	21980 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac32:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1ac36:	b333      	cbz	r3, 1ac86 <uarte_nrfx_isr_async+0x1a6>
   1ac38:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1ac3c:	bb1e      	cbnz	r6, 1ac86 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac3e:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1ac42:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1ac44:	4620      	mov	r0, r4
   1ac46:	68f9      	ldr	r1, [r7, #12]
   1ac48:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1ac4c:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1ac4e:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1ac52:	f00c fa6d 	bl	27130 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1ac56:	68f9      	ldr	r1, [r7, #12]
   1ac58:	4620      	mov	r0, r4
   1ac5a:	3164      	adds	r1, #100	; 0x64
   1ac5c:	f00c fa68 	bl	27130 <rx_buf_release>
	if (data->async->rx_enabled) {
   1ac60:	68fb      	ldr	r3, [r7, #12]
   1ac62:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1ac66:	2a00      	cmp	r2, #0
   1ac68:	f000 80a3 	beq.w	1adb2 <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1ac6c:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ac70:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ac74:	06d8      	lsls	r0, r3, #27
   1ac76:	d503      	bpl.n	1ac80 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1ac78:	2102      	movs	r1, #2
   1ac7a:	4620      	mov	r0, r4
   1ac7c:	f00c fb3d 	bl	272fa <async_uart_release>
	notify_rx_disable(dev);
   1ac80:	4620      	mov	r0, r4
   1ac82:	f00c fa6d 	bl	27160 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac86:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1ac8a:	b1db      	cbz	r3, 1acc4 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1ac8c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1ac90:	05d9      	lsls	r1, r3, #23
   1ac92:	d517      	bpl.n	1acc4 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1ac94:	6863      	ldr	r3, [r4, #4]
   1ac96:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1ac98:	f04f 0120 	mov.w	r1, #32
   1ac9c:	f3ef 8211 	mrs	r2, BASEPRI
   1aca0:	f381 8812 	msr	BASEPRI_MAX, r1
   1aca4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aca8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1acac:	b131      	cbz	r1, 1acbc <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1acae:	2100      	movs	r1, #0
   1acb0:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1acb4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1acb8:	2101      	movs	r1, #1
   1acba:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1acbc:	f382 8811 	msr	BASEPRI, r2
   1acc0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1acc4:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1acc8:	2b00      	cmp	r3, #0
   1acca:	f43f af1e 	beq.w	1ab0a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1acce:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1acd2:	025a      	lsls	r2, r3, #9
   1acd4:	f57f af19 	bpl.w	1ab0a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1acd8:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1acda:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1acdc:	e9d3 7300 	ldrd	r7, r3, [r3]
   1ace0:	06db      	lsls	r3, r3, #27
   1ace2:	d46b      	bmi.n	1adbc <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1ace4:	68eb      	ldr	r3, [r5, #12]
   1ace6:	689b      	ldr	r3, [r3, #8]
   1ace8:	2b00      	cmp	r3, #0
   1acea:	f43f af0e 	beq.w	1ab0a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1acee:	f04f 0320 	mov.w	r3, #32
   1acf2:	f3ef 8211 	mrs	r2, BASEPRI
   1acf6:	f383 8812 	msr	BASEPRI_MAX, r3
   1acfa:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1acfe:	68eb      	ldr	r3, [r5, #12]
   1ad00:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1ad04:	2900      	cmp	r1, #0
   1ad06:	bfac      	ite	ge
   1ad08:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1ad0c:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1ad10:	f382 8811 	msr	BASEPRI, r2
   1ad14:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1ad18:	68eb      	ldr	r3, [r5, #12]
   1ad1a:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1ad1e:	2a00      	cmp	r2, #0
   1ad20:	d059      	beq.n	1add6 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1ad22:	f04f 0320 	mov.w	r3, #32
   1ad26:	f3ef 8611 	mrs	r6, BASEPRI
   1ad2a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad2e:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1ad32:	4629      	mov	r1, r5
   1ad34:	4620      	mov	r0, r4
   1ad36:	f00c fb1a 	bl	2736e <start_tx_locked>
	__asm__ volatile(
   1ad3a:	f386 8811 	msr	BASEPRI, r6
   1ad3e:	f3bf 8f6f 	isb	sy
				return;
   1ad42:	e6e2      	b.n	1ab0a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1ad44:	2601      	movs	r6, #1
   1ad46:	e702      	b.n	1ab4e <uarte_nrfx_isr_async+0x6e>
   1ad48:	2602      	movs	r6, #2
   1ad4a:	e700      	b.n	1ab4e <uarte_nrfx_isr_async+0x6e>
   1ad4c:	2604      	movs	r6, #4
   1ad4e:	e6fe      	b.n	1ab4e <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1ad50:	4620      	mov	r0, r4
   1ad52:	3158      	adds	r1, #88	; 0x58
   1ad54:	f00c f9ec 	bl	27130 <rx_buf_release>
	__asm__ volatile(
   1ad58:	f04f 0320 	mov.w	r3, #32
   1ad5c:	f3ef 8111 	mrs	r1, BASEPRI
   1ad60:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad64:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1ad68:	68f3      	ldr	r3, [r6, #12]
   1ad6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1ad6c:	b1f2      	cbz	r2, 1adac <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1ad6e:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1ad70:	68f3      	ldr	r3, [r6, #12]
   1ad72:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1ad74:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1ad76:	2300      	movs	r3, #0
   1ad78:	68f2      	ldr	r2, [r6, #12]
   1ad7a:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1ad7c:	68f2      	ldr	r2, [r6, #12]
   1ad7e:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1ad80:	68f2      	ldr	r2, [r6, #12]
   1ad82:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ad84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1ad88:	b90b      	cbnz	r3, 1ad8e <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ad8a:	2301      	movs	r3, #1
   1ad8c:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1ad8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1ad92:	f023 0320 	bic.w	r3, r3, #32
   1ad96:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1ad9a:	f381 8811 	msr	BASEPRI, r1
   1ad9e:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1ada2:	2200      	movs	r2, #0
   1ada4:	68f3      	ldr	r3, [r6, #12]
   1ada6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1adaa:	e70e      	b.n	1abca <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1adac:	2301      	movs	r3, #1
   1adae:	607b      	str	r3, [r7, #4]
}
   1adb0:	e7f3      	b.n	1ad9a <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1adb2:	4611      	mov	r1, r2
   1adb4:	6860      	ldr	r0, [r4, #4]
   1adb6:	f00c fa6b 	bl	27290 <rx_flush.isra.0>
   1adba:	e759      	b.n	1ac70 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1adbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1adc0:	2101      	movs	r1, #1
   1adc2:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1adc6:	4620      	mov	r0, r4
   1adc8:	f00c fa97 	bl	272fa <async_uart_release>
		if (!data->async->tx_size) {
   1adcc:	68eb      	ldr	r3, [r5, #12]
   1adce:	68db      	ldr	r3, [r3, #12]
   1add0:	2b00      	cmp	r3, #0
   1add2:	d187      	bne.n	1ace4 <uarte_nrfx_isr_async+0x204>
   1add4:	e699      	b.n	1ab0a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1add6:	6899      	ldr	r1, [r3, #8]
   1add8:	691a      	ldr	r2, [r3, #16]
   1adda:	4291      	cmp	r1, r2
   1addc:	d00c      	beq.n	1adf8 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1adde:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1ade0:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1ade2:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1ade4:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1ade6:	d128      	bne.n	1ae3a <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1ade8:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1adea:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1adec:	f00c fa38 	bl	27260 <setup_tx_cache>
   1adf0:	2800      	cmp	r0, #0
   1adf2:	d196      	bne.n	1ad22 <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1adf4:	68eb      	ldr	r3, [r5, #12]
   1adf6:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1adf8:	68e8      	ldr	r0, [r5, #12]
   1adfa:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1adfc:	f00d fc0a 	bl	28614 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1ae00:	2214      	movs	r2, #20
   1ae02:	2100      	movs	r1, #0
   1ae04:	a803      	add	r0, sp, #12
   1ae06:	f00d fd03 	bl	28810 <memset>
		.data.tx.buf = data->async->tx_buf,
   1ae0a:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1ae0c:	4620      	mov	r0, r4
	struct uart_event evt = {
   1ae0e:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1ae10:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1ae12:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1ae16:	68db      	ldr	r3, [r3, #12]
   1ae18:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1ae1a:	bf1c      	itt	ne
   1ae1c:	2301      	movne	r3, #1
   1ae1e:	f88d 300c 	strbne.w	r3, [sp, #12]
   1ae22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1ae26:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1ae2a:	2300      	movs	r3, #0
   1ae2c:	68ea      	ldr	r2, [r5, #12]
   1ae2e:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1ae30:	68ea      	ldr	r2, [r5, #12]
   1ae32:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1ae34:	f00c f95c 	bl	270f0 <user_callback>
   1ae38:	e667      	b.n	1ab0a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1ae3a:	4616      	mov	r6, r2
   1ae3c:	e7dc      	b.n	1adf8 <uarte_nrfx_isr_async+0x318>
   1ae3e:	bf00      	nop
   1ae40:	000f423f 	.word	0x000f423f
   1ae44:	000f4240 	.word	0x000f4240

0001ae48 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1ae48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1ae4a:	7e01      	ldrb	r1, [r0, #24]
   1ae4c:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1ae4e:	2902      	cmp	r1, #2
   1ae50:	d014      	beq.n	1ae7c <bt_rpmsg_send+0x34>
   1ae52:	2904      	cmp	r1, #4
   1ae54:	d011      	beq.n	1ae7a <bt_rpmsg_send+0x32>
   1ae56:	b1f9      	cbz	r1, 1ae98 <bt_rpmsg_send+0x50>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1ae58:	4b10      	ldr	r3, [pc, #64]	; (1ae9c <bt_rpmsg_send+0x54>)
	switch (bt_buf_get_type(buf)) {
   1ae5a:	9103      	str	r1, [sp, #12]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1ae5c:	9302      	str	r3, [sp, #8]
   1ae5e:	2300      	movs	r3, #0
   1ae60:	2201      	movs	r2, #1
   1ae62:	4618      	mov	r0, r3
   1ae64:	e9cd 3300 	strd	r3, r3, [sp]
   1ae68:	490d      	ldr	r1, [pc, #52]	; (1aea0 <bt_rpmsg_send+0x58>)
   1ae6a:	f00c fb25 	bl	274b8 <z_log_msg_runtime_create.constprop.0>
	}

done:
	net_buf_unref(buf);
   1ae6e:	4620      	mov	r0, r4
   1ae70:	f7fd fbec 	bl	1864c <net_buf_unref>
	return 0;
}
   1ae74:	2000      	movs	r0, #0
   1ae76:	b004      	add	sp, #16
   1ae78:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   1ae7a:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1ae7c:	f104 000c 	add.w	r0, r4, #12
   1ae80:	f00b ff41 	bl	26d06 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1ae84:	8a22      	ldrh	r2, [r4, #16]
   1ae86:	68e1      	ldr	r1, [r4, #12]
   1ae88:	4806      	ldr	r0, [pc, #24]	; (1aea4 <bt_rpmsg_send+0x5c>)
   1ae8a:	f7f3 fb85 	bl	e598 <ipc_service_send>
	if (err < 0) {
   1ae8e:	2800      	cmp	r0, #0
   1ae90:	daed      	bge.n	1ae6e <bt_rpmsg_send+0x26>
		LOG_ERR("Failed to send (err %d)", err);
   1ae92:	4b05      	ldr	r3, [pc, #20]	; (1aea8 <bt_rpmsg_send+0x60>)
   1ae94:	9003      	str	r0, [sp, #12]
   1ae96:	e7e1      	b.n	1ae5c <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
   1ae98:	2101      	movs	r1, #1
   1ae9a:	e7ef      	b.n	1ae7c <bt_rpmsg_send+0x34>
   1ae9c:	0002e6e6 	.word	0x0002e6e6
   1aea0:	000296cc 	.word	0x000296cc
   1aea4:	20021254 	.word	0x20021254
   1aea8:	0002e6f6 	.word	0x0002e6f6

0001aeac <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1aeac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1aeae:	4809      	ldr	r0, [pc, #36]	; (1aed4 <bt_rpmsg_init+0x28>)
   1aeb0:	f7f6 fdde 	bl	11a70 <bt_hci_driver_register>
	if (err < 0) {
   1aeb4:	1e04      	subs	r4, r0, #0
   1aeb6:	da0a      	bge.n	1aece <bt_rpmsg_init+0x22>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1aeb8:	4b07      	ldr	r3, [pc, #28]	; (1aed8 <bt_rpmsg_init+0x2c>)
   1aeba:	2201      	movs	r2, #1
   1aebc:	9302      	str	r3, [sp, #8]
   1aebe:	2300      	movs	r3, #0
   1aec0:	4906      	ldr	r1, [pc, #24]	; (1aedc <bt_rpmsg_init+0x30>)
   1aec2:	4618      	mov	r0, r3
   1aec4:	e9cd 3300 	strd	r3, r3, [sp]
   1aec8:	9403      	str	r4, [sp, #12]
   1aeca:	f00c faf5 	bl	274b8 <z_log_msg_runtime_create.constprop.0>
	}

	return err;
}
   1aece:	4620      	mov	r0, r4
   1aed0:	b004      	add	sp, #16
   1aed2:	bd10      	pop	{r4, pc}
   1aed4:	0002a4e8 	.word	0x0002a4e8
   1aed8:	0002e70e 	.word	0x0002e70e
   1aedc:	000296cc 	.word	0x000296cc

0001aee0 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1aee0:	4801      	ldr	r0, [pc, #4]	; (1aee8 <hci_ept_bound+0x8>)
   1aee2:	f004 b93b 	b.w	1f15c <z_impl_k_sem_give>
   1aee6:	bf00      	nop
   1aee8:	20008b1c 	.word	0x20008b1c

0001aeec <bt_rpmsg_open>:
{
   1aeec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1aeee:	4816      	ldr	r0, [pc, #88]	; (1af48 <bt_rpmsg_open+0x5c>)
   1aef0:	f7f3 faf4 	bl	e4dc <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1aef4:	4604      	mov	r4, r0
   1aef6:	b180      	cbz	r0, 1af1a <bt_rpmsg_open+0x2e>
   1aef8:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1aefc:	d00d      	beq.n	1af1a <bt_rpmsg_open+0x2e>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1aefe:	4b13      	ldr	r3, [pc, #76]	; (1af4c <bt_rpmsg_open+0x60>)
   1af00:	9003      	str	r0, [sp, #12]
		LOG_ERR("Endpoint binding failed with %d", err);
   1af02:	9302      	str	r3, [sp, #8]
   1af04:	2300      	movs	r3, #0
   1af06:	2201      	movs	r2, #1
   1af08:	4618      	mov	r0, r3
   1af0a:	e9cd 3300 	strd	r3, r3, [sp]
   1af0e:	4910      	ldr	r1, [pc, #64]	; (1af50 <bt_rpmsg_open+0x64>)
   1af10:	f00c fad2 	bl	274b8 <z_log_msg_runtime_create.constprop.0>
}
   1af14:	4620      	mov	r0, r4
   1af16:	b004      	add	sp, #16
   1af18:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1af1a:	4a0e      	ldr	r2, [pc, #56]	; (1af54 <bt_rpmsg_open+0x68>)
   1af1c:	490e      	ldr	r1, [pc, #56]	; (1af58 <bt_rpmsg_open+0x6c>)
   1af1e:	480a      	ldr	r0, [pc, #40]	; (1af48 <bt_rpmsg_open+0x5c>)
   1af20:	f7f3 fb08 	bl	e534 <ipc_service_register_endpoint>
	if (err) {
   1af24:	4604      	mov	r4, r0
   1af26:	b110      	cbz	r0, 1af2e <bt_rpmsg_open+0x42>
		LOG_ERR("Registering endpoint failed with %d", err);
   1af28:	4b0c      	ldr	r3, [pc, #48]	; (1af5c <bt_rpmsg_open+0x70>)
   1af2a:	9003      	str	r0, [sp, #12]
   1af2c:	e7e9      	b.n	1af02 <bt_rpmsg_open+0x16>
	return z_impl_k_sem_take(sem, timeout);
   1af2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1af32:	2300      	movs	r3, #0
   1af34:	480a      	ldr	r0, [pc, #40]	; (1af60 <bt_rpmsg_open+0x74>)
   1af36:	f004 f955 	bl	1f1e4 <z_impl_k_sem_take>
	if (err) {
   1af3a:	4604      	mov	r4, r0
   1af3c:	2800      	cmp	r0, #0
   1af3e:	d0e9      	beq.n	1af14 <bt_rpmsg_open+0x28>
		LOG_ERR("Endpoint binding failed with %d", err);
   1af40:	4b08      	ldr	r3, [pc, #32]	; (1af64 <bt_rpmsg_open+0x78>)
   1af42:	9003      	str	r0, [sp, #12]
   1af44:	e7dd      	b.n	1af02 <bt_rpmsg_open+0x16>
   1af46:	bf00      	nop
   1af48:	000291ac 	.word	0x000291ac
   1af4c:	0002e738 	.word	0x0002e738
   1af50:	000296cc 	.word	0x000296cc
   1af54:	20008668 	.word	0x20008668
   1af58:	20021254 	.word	0x20021254
   1af5c:	0002e768 	.word	0x0002e768
   1af60:	20008b1c 	.word	0x20008b1c
   1af64:	0002e78c 	.word	0x0002e78c

0001af68 <hci_ept_recv>:
{
   1af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af6c:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   1af6e:	7800      	ldrb	r0, [r0, #0]
{
   1af70:	460d      	mov	r5, r1
	switch (pkt_indicator) {
   1af72:	2804      	cmp	r0, #4
{
   1af74:	b089      	sub	sp, #36	; 0x24
	remaining -= sizeof(pkt_indicator);
   1af76:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1af7a:	d009      	beq.n	1af90 <hci_ept_recv+0x28>
   1af7c:	2805      	cmp	r0, #5
   1af7e:	f000 8099 	beq.w	1b0b4 <hci_ept_recv+0x14c>
   1af82:	2802      	cmp	r0, #2
   1af84:	f040 80bd 	bne.w	1b102 <hci_ept_recv+0x19a>
	if (remaining < sizeof(hdr)) {
   1af88:	2b03      	cmp	r3, #3
   1af8a:	d867      	bhi.n	1b05c <hci_ept_recv+0xf4>
		LOG_ERR("Not enough data for ACL header");
   1af8c:	4b63      	ldr	r3, [pc, #396]	; (1b11c <hci_ept_recv+0x1b4>)
   1af8e:	e002      	b.n	1af96 <hci_ept_recv+0x2e>
	if (remaining < sizeof(hdr)) {
   1af90:	2b01      	cmp	r3, #1
   1af92:	d80c      	bhi.n	1afae <hci_ept_recv+0x46>
		LOG_ERR("Not enough data for event header");
   1af94:	4b62      	ldr	r3, [pc, #392]	; (1b120 <hci_ept_recv+0x1b8>)
		LOG_ERR("Event payload length is not correct");
   1af96:	9302      	str	r3, [sp, #8]
   1af98:	2300      	movs	r3, #0
   1af9a:	2201      	movs	r2, #1
   1af9c:	4618      	mov	r0, r3
   1af9e:	e9cd 3300 	strd	r3, r3, [sp]
   1afa2:	4960      	ldr	r1, [pc, #384]	; (1b124 <hci_ept_recv+0x1bc>)
   1afa4:	f00c fa88 	bl	274b8 <z_log_msg_runtime_create.constprop.0>
}
   1afa8:	b009      	add	sp, #36	; 0x24
   1afaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1afae:	7873      	ldrb	r3, [r6, #1]
   1afb0:	2b3e      	cmp	r3, #62	; 0x3e
   1afb2:	d136      	bne.n	1b022 <hci_ept_recv+0xba>
		switch (subevt_type) {
   1afb4:	78f7      	ldrb	r7, [r6, #3]
   1afb6:	1ebb      	subs	r3, r7, #2
   1afb8:	425f      	negs	r7, r3
   1afba:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1afbc:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1afc0:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
   1afc2:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1afc6:	f8ad 301c 	strh.w	r3, [sp, #28]
	if (remaining != hdr.len) {
   1afca:	d12f      	bne.n	1b02c <hci_ept_recv+0xc4>
   1afcc:	b35f      	cbz	r7, 1b026 <hci_ept_recv+0xbe>
   1afce:	f04f 0800 	mov.w	r8, #0
   1afd2:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1afd6:	f8df b150 	ldr.w	fp, [pc, #336]	; 1b128 <hci_ept_recv+0x1c0>
   1afda:	f8df a148 	ldr.w	sl, [pc, #328]	; 1b124 <hci_ept_recv+0x1bc>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1afde:	4642      	mov	r2, r8
   1afe0:	464b      	mov	r3, r9
   1afe2:	4639      	mov	r1, r7
   1afe4:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1afe8:	f7f5 fb08 	bl	105fc <bt_buf_get_evt>
		if (!buf) {
   1afec:	4604      	mov	r4, r0
   1afee:	b1f8      	cbz	r0, 1b030 <hci_ept_recv+0xc8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1aff0:	f100 070c 	add.w	r7, r0, #12
   1aff4:	2202      	movs	r2, #2
   1aff6:	a907      	add	r1, sp, #28
   1aff8:	4638      	mov	r0, r7
   1affa:	f00b fe9f 	bl	26d3c <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1affe:	4638      	mov	r0, r7
   1b000:	f00b fe94 	bl	26d2c <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1b004:	4285      	cmp	r5, r0
   1b006:	d91e      	bls.n	1b046 <hci_ept_recv+0xde>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1b008:	4b48      	ldr	r3, [pc, #288]	; (1b12c <hci_ept_recv+0x1c4>)
   1b00a:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1b00e:	9302      	str	r3, [sp, #8]
   1b010:	2300      	movs	r3, #0
   1b012:	2201      	movs	r2, #1
   1b014:	4618      	mov	r0, r3
   1b016:	e9cd 3300 	strd	r3, r3, [sp]
   1b01a:	4942      	ldr	r1, [pc, #264]	; (1b124 <hci_ept_recv+0x1bc>)
   1b01c:	f00c fa4c 	bl	274b8 <z_log_msg_runtime_create.constprop.0>
   1b020:	e03c      	b.n	1b09c <hci_ept_recv+0x134>
			return false;
   1b022:	2700      	movs	r7, #0
   1b024:	e7ca      	b.n	1afbc <hci_ept_recv+0x54>
   1b026:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1b02a:	e7d2      	b.n	1afd2 <hci_ept_recv+0x6a>
		LOG_ERR("Event payload length is not correct");
   1b02c:	4b40      	ldr	r3, [pc, #256]	; (1b130 <hci_ept_recv+0x1c8>)
   1b02e:	e7b2      	b.n	1af96 <hci_ept_recv+0x2e>
			if (discardable) {
   1b030:	2f00      	cmp	r7, #0
   1b032:	d1b9      	bne.n	1afa8 <hci_ept_recv+0x40>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1b034:	463b      	mov	r3, r7
   1b036:	2202      	movs	r2, #2
   1b038:	4651      	mov	r1, sl
   1b03a:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1b03e:	9700      	str	r7, [sp, #0]
   1b040:	f00c fa3a 	bl	274b8 <z_log_msg_runtime_create.constprop.0>
	} while (!buf);
   1b044:	e7cb      	b.n	1afde <hci_ept_recv+0x76>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b046:	462a      	mov	r2, r5
   1b048:	1cf1      	adds	r1, r6, #3
   1b04a:	4638      	mov	r0, r7
   1b04c:	f00b fe76 	bl	26d3c <net_buf_simple_add_mem>
		bt_recv(buf);
   1b050:	4620      	mov	r0, r4
}
   1b052:	b009      	add	sp, #36	; 0x24
   1b054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_recv(buf);
   1b058:	f7f6 bcda 	b.w	11a10 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1b05c:	2200      	movs	r2, #0
   1b05e:	2300      	movs	r3, #0
   1b060:	2003      	movs	r0, #3
   1b062:	f7f5 fa7d 	bl	10560 <bt_buf_get_rx>
	if (buf) {
   1b066:	4604      	mov	r4, r0
   1b068:	b1e0      	cbz	r0, 1b0a4 <hci_ept_recv+0x13c>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1b06a:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1b06e:	f100 070c 	add.w	r7, r0, #12
   1b072:	2204      	movs	r2, #4
   1b074:	4638      	mov	r0, r7
   1b076:	a907      	add	r1, sp, #28
   1b078:	9307      	str	r3, [sp, #28]
   1b07a:	f00b fe5f 	bl	26d3c <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1b07e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1b082:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1b084:	429d      	cmp	r5, r3
   1b086:	d034      	beq.n	1b0f2 <hci_ept_recv+0x18a>
		LOG_ERR("ACL payload length is not correct");
   1b088:	4b2a      	ldr	r3, [pc, #168]	; (1b134 <hci_ept_recv+0x1cc>)
		LOG_ERR("ISO payload length is not correct");
   1b08a:	9302      	str	r3, [sp, #8]
   1b08c:	2300      	movs	r3, #0
   1b08e:	2201      	movs	r2, #1
   1b090:	4618      	mov	r0, r3
   1b092:	e9cd 3300 	strd	r3, r3, [sp]
   1b096:	4923      	ldr	r1, [pc, #140]	; (1b124 <hci_ept_recv+0x1bc>)
   1b098:	f00c fa0e 	bl	274b8 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1b09c:	4620      	mov	r0, r4
   1b09e:	f7fd fad5 	bl	1864c <net_buf_unref>
	if (buf) {
   1b0a2:	e781      	b.n	1afa8 <hci_ept_recv+0x40>
		LOG_ERR("No available ACL buffers!");
   1b0a4:	4b24      	ldr	r3, [pc, #144]	; (1b138 <hci_ept_recv+0x1d0>)
		LOG_ERR("No available ISO buffers!");
   1b0a6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b0aa:	2201      	movs	r2, #1
   1b0ac:	4623      	mov	r3, r4
   1b0ae:	491d      	ldr	r1, [pc, #116]	; (1b124 <hci_ept_recv+0x1bc>)
   1b0b0:	9400      	str	r4, [sp, #0]
   1b0b2:	e777      	b.n	1afa4 <hci_ept_recv+0x3c>
	if (remaining < sizeof(hdr)) {
   1b0b4:	2b03      	cmp	r3, #3
   1b0b6:	d801      	bhi.n	1b0bc <hci_ept_recv+0x154>
		LOG_ERR("Not enough data for ISO header");
   1b0b8:	4b20      	ldr	r3, [pc, #128]	; (1b13c <hci_ept_recv+0x1d4>)
   1b0ba:	e76c      	b.n	1af96 <hci_ept_recv+0x2e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1b0bc:	2200      	movs	r2, #0
   1b0be:	2300      	movs	r3, #0
   1b0c0:	f7f5 fa4e 	bl	10560 <bt_buf_get_rx>
	if (buf) {
   1b0c4:	4604      	mov	r4, r0
   1b0c6:	b190      	cbz	r0, 1b0ee <hci_ept_recv+0x186>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1b0c8:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1b0cc:	f100 070c 	add.w	r7, r0, #12
   1b0d0:	2204      	movs	r2, #4
   1b0d2:	4638      	mov	r0, r7
   1b0d4:	a907      	add	r1, sp, #28
   1b0d6:	9307      	str	r3, [sp, #28]
   1b0d8:	f00b fe30 	bl	26d3c <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1b0dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1b0e0:	3d05      	subs	r5, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1b0e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1b0e6:	429d      	cmp	r5, r3
   1b0e8:	d003      	beq.n	1b0f2 <hci_ept_recv+0x18a>
		LOG_ERR("ISO payload length is not correct");
   1b0ea:	4b15      	ldr	r3, [pc, #84]	; (1b140 <hci_ept_recv+0x1d8>)
   1b0ec:	e7cd      	b.n	1b08a <hci_ept_recv+0x122>
		LOG_ERR("No available ISO buffers!");
   1b0ee:	4b15      	ldr	r3, [pc, #84]	; (1b144 <hci_ept_recv+0x1dc>)
   1b0f0:	e7d9      	b.n	1b0a6 <hci_ept_recv+0x13e>
	return net_buf_simple_tailroom(&buf->b);
   1b0f2:	4638      	mov	r0, r7
   1b0f4:	f00b fe1a 	bl	26d2c <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1b0f8:	4285      	cmp	r5, r0
   1b0fa:	d885      	bhi.n	1b008 <hci_ept_recv+0xa0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b0fc:	462a      	mov	r2, r5
   1b0fe:	1d71      	adds	r1, r6, #5
   1b100:	e7a3      	b.n	1b04a <hci_ept_recv+0xe2>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1b102:	4b11      	ldr	r3, [pc, #68]	; (1b148 <hci_ept_recv+0x1e0>)
	switch (pkt_indicator) {
   1b104:	9003      	str	r0, [sp, #12]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1b106:	9302      	str	r3, [sp, #8]
   1b108:	2300      	movs	r3, #0
   1b10a:	2201      	movs	r2, #1
   1b10c:	4618      	mov	r0, r3
   1b10e:	e9cd 3300 	strd	r3, r3, [sp]
   1b112:	4904      	ldr	r1, [pc, #16]	; (1b124 <hci_ept_recv+0x1bc>)
   1b114:	f00c f9d0 	bl	274b8 <z_log_msg_runtime_create.constprop.0>
   1b118:	e746      	b.n	1afa8 <hci_ept_recv+0x40>
   1b11a:	bf00      	nop
   1b11c:	0002e849 	.word	0x0002e849
   1b120:	0002e7ac 	.word	0x0002e7ac
   1b124:	000296cc 	.word	0x000296cc
   1b128:	0002e7f1 	.word	0x0002e7f1
   1b12c:	0002e826 	.word	0x0002e826
   1b130:	0002e7cd 	.word	0x0002e7cd
   1b134:	0002e882 	.word	0x0002e882
   1b138:	0002e868 	.word	0x0002e868
   1b13c:	0002e8a4 	.word	0x0002e8a4
   1b140:	0002e8dd 	.word	0x0002e8dd
   1b144:	0002e8c3 	.word	0x0002e8c3
   1b148:	0002e8ff 	.word	0x0002e8ff

0001b14c <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1b14c:	2301      	movs	r3, #1
   1b14e:	4083      	lsls	r3, r0
{
   1b150:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1b152:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b154:	4a0b      	ldr	r2, [pc, #44]	; (1b184 <compare_int_lock+0x38>)
   1b156:	e8d2 1fef 	ldaex	r1, [r2]
   1b15a:	ea01 0504 	and.w	r5, r1, r4
   1b15e:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1b162:	2e00      	cmp	r6, #0
   1b164:	d1f7      	bne.n	1b156 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1b166:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b16a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1b16c:	4806      	ldr	r0, [pc, #24]	; (1b188 <compare_int_lock+0x3c>)
   1b16e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1b172:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b176:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1b17a:	420b      	tst	r3, r1
}
   1b17c:	bf14      	ite	ne
   1b17e:	2001      	movne	r0, #1
   1b180:	2000      	moveq	r0, #0
   1b182:	bd70      	pop	{r4, r5, r6, pc}
   1b184:	20021264 	.word	0x20021264
   1b188:	40015000 	.word	0x40015000

0001b18c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1b18e:	491b      	ldr	r1, [pc, #108]	; (1b1fc <sys_clock_timeout_handler+0x70>)
{
   1b190:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1b192:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1b196:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1b198:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1b19c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1b1a0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1b1a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1b1a6:	d30f      	bcc.n	1b1c8 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1b1a8:	f006 fa4e 	bl	21648 <sys_clock_announce>
    return p_reg->CC[ch];
   1b1ac:	00a3      	lsls	r3, r4, #2
   1b1ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b1b2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1b1b6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1b1ba:	4295      	cmp	r5, r2
   1b1bc:	d11d      	bne.n	1b1fa <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1b1be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1b1c2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1b1c6:	e012      	b.n	1b1ee <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1b1c8:	4b0d      	ldr	r3, [pc, #52]	; (1b200 <sys_clock_timeout_handler+0x74>)
   1b1ca:	681b      	ldr	r3, [r3, #0]
   1b1cc:	0a1a      	lsrs	r2, r3, #8
   1b1ce:	061b      	lsls	r3, r3, #24
   1b1d0:	195e      	adds	r6, r3, r5
   1b1d2:	4b0c      	ldr	r3, [pc, #48]	; (1b204 <sys_clock_timeout_handler+0x78>)
   1b1d4:	f142 0700 	adc.w	r7, r2, #0
   1b1d8:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1b1dc:	f006 fa34 	bl	21648 <sys_clock_announce>
    return p_reg->CC[ch];
   1b1e0:	4a09      	ldr	r2, [pc, #36]	; (1b208 <sys_clock_timeout_handler+0x7c>)
   1b1e2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1b1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1b1ea:	429d      	cmp	r5, r3
   1b1ec:	d105      	bne.n	1b1fa <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1b1ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1b1f2:	4a05      	ldr	r2, [pc, #20]	; (1b208 <sys_clock_timeout_handler+0x7c>)
   1b1f4:	40a3      	lsls	r3, r4
   1b1f6:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1b1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b1fc:	20009b58 	.word	0x20009b58
   1b200:	20021268 	.word	0x20021268
   1b204:	20009b60 	.word	0x20009b60
   1b208:	40015000 	.word	0x40015000

0001b20c <compare_int_unlock>:
	if (key) {
   1b20c:	b1d9      	cbz	r1, 1b246 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1b20e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b210:	4a0d      	ldr	r2, [pc, #52]	; (1b248 <compare_int_unlock+0x3c>)
   1b212:	4083      	lsls	r3, r0
   1b214:	e8d2 cfef 	ldaex	ip, [r2]
   1b218:	ea4c 0c03 	orr.w	ip, ip, r3
   1b21c:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1b220:	2900      	cmp	r1, #0
   1b222:	d1f7      	bne.n	1b214 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1b224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1b228:	4a08      	ldr	r2, [pc, #32]	; (1b24c <compare_int_unlock+0x40>)
   1b22a:	4083      	lsls	r3, r0
   1b22c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b230:	4b07      	ldr	r3, [pc, #28]	; (1b250 <compare_int_unlock+0x44>)
   1b232:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1b236:	40c3      	lsrs	r3, r0
   1b238:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b23a:	bf42      	ittt	mi
   1b23c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1b240:	4b04      	ldrmi	r3, [pc, #16]	; (1b254 <compare_int_unlock+0x48>)
   1b242:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1b246:	4770      	bx	lr
   1b248:	20021264 	.word	0x20021264
   1b24c:	40015000 	.word	0x40015000
   1b250:	2002125c 	.word	0x2002125c
   1b254:	e000e100 	.word	0xe000e100

0001b258 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1b258:	2801      	cmp	r0, #1
{
   1b25a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1b25c:	d909      	bls.n	1b272 <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1b25e:	4907      	ldr	r1, [pc, #28]	; (1b27c <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1b260:	4807      	ldr	r0, [pc, #28]	; (1b280 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1b262:	237c      	movs	r3, #124	; 0x7c
   1b264:	4a07      	ldr	r2, [pc, #28]	; (1b284 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1b266:	f008 fedc 	bl	24022 <assert_print>
   1b26a:	217c      	movs	r1, #124	; 0x7c
   1b26c:	4805      	ldr	r0, [pc, #20]	; (1b284 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1b26e:	f008 fed1 	bl	24014 <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1b272:	0083      	lsls	r3, r0, #2
}
   1b274:	4804      	ldr	r0, [pc, #16]	; (1b288 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1b276:	4418      	add	r0, r3
   1b278:	bd08      	pop	{r3, pc}
   1b27a:	bf00      	nop
   1b27c:	0002e97a 	.word	0x0002e97a
   1b280:	0002a669 	.word	0x0002a669
   1b284:	0002e949 	.word	0x0002e949
   1b288:	40015140 	.word	0x40015140

0001b28c <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1b28c:	2801      	cmp	r0, #1
{
   1b28e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1b290:	d909      	bls.n	1b2a6 <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1b292:	4907      	ldr	r1, [pc, #28]	; (1b2b0 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1b294:	4807      	ldr	r0, [pc, #28]	; (1b2b4 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1b296:	2383      	movs	r3, #131	; 0x83
   1b298:	4a07      	ldr	r2, [pc, #28]	; (1b2b8 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1b29a:	f008 fec2 	bl	24022 <assert_print>
   1b29e:	2183      	movs	r1, #131	; 0x83
   1b2a0:	4805      	ldr	r0, [pc, #20]	; (1b2b8 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1b2a2:	f008 feb7 	bl	24014 <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1b2a6:	2800      	cmp	r0, #0
}
   1b2a8:	4804      	ldr	r0, [pc, #16]	; (1b2bc <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1b2aa:	bf08      	it	eq
   1b2ac:	2000      	moveq	r0, #0
   1b2ae:	bd08      	pop	{r3, pc}
   1b2b0:	0002e97a 	.word	0x0002e97a
   1b2b4:	0002a669 	.word	0x0002a669
   1b2b8:	0002e949 	.word	0x0002e949
   1b2bc:	40015044 	.word	0x40015044

0001b2c0 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1b2c0:	2801      	cmp	r0, #1
{
   1b2c2:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1b2c4:	d909      	bls.n	1b2da <z_nrf_rtc_timer_compare_read+0x1a>
   1b2c6:	4908      	ldr	r1, [pc, #32]	; (1b2e8 <z_nrf_rtc_timer_compare_read+0x28>)
   1b2c8:	4808      	ldr	r0, [pc, #32]	; (1b2ec <z_nrf_rtc_timer_compare_read+0x2c>)
   1b2ca:	23b9      	movs	r3, #185	; 0xb9
   1b2cc:	4a08      	ldr	r2, [pc, #32]	; (1b2f0 <z_nrf_rtc_timer_compare_read+0x30>)
   1b2ce:	f008 fea8 	bl	24022 <assert_print>
   1b2d2:	21b9      	movs	r1, #185	; 0xb9
   1b2d4:	4806      	ldr	r0, [pc, #24]	; (1b2f0 <z_nrf_rtc_timer_compare_read+0x30>)
   1b2d6:	f008 fe9d 	bl	24014 <assert_post_action>
    return p_reg->CC[ch];
   1b2da:	4b06      	ldr	r3, [pc, #24]	; (1b2f4 <z_nrf_rtc_timer_compare_read+0x34>)
   1b2dc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1b2e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1b2e4:	bd08      	pop	{r3, pc}
   1b2e6:	bf00      	nop
   1b2e8:	0002e97a 	.word	0x0002e97a
   1b2ec:	0002a669 	.word	0x0002a669
   1b2f0:	0002e949 	.word	0x0002e949
   1b2f4:	40015000 	.word	0x40015000

0001b2f8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1b2f8:	4b0d      	ldr	r3, [pc, #52]	; (1b330 <z_nrf_rtc_timer_read+0x38>)
   1b2fa:	6818      	ldr	r0, [r3, #0]
   1b2fc:	0a01      	lsrs	r1, r0, #8
   1b2fe:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1b300:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1b304:	4b0b      	ldr	r3, [pc, #44]	; (1b334 <z_nrf_rtc_timer_read+0x3c>)
   1b306:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1b30a:	1818      	adds	r0, r3, r0
   1b30c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1b310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1b314:	d20a      	bcs.n	1b32c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1b316:	4b08      	ldr	r3, [pc, #32]	; (1b338 <z_nrf_rtc_timer_read+0x40>)
   1b318:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b31c:	4290      	cmp	r0, r2
   1b31e:	eb71 0303 	sbcs.w	r3, r1, r3
   1b322:	d203      	bcs.n	1b32c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1b324:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1b328:	f141 0100 	adc.w	r1, r1, #0
}
   1b32c:	4770      	bx	lr
   1b32e:	bf00      	nop
   1b330:	20021268 	.word	0x20021268
   1b334:	40015000 	.word	0x40015000
   1b338:	20009b60 	.word	0x20009b60

0001b33c <compare_set>:
{
   1b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b340:	b085      	sub	sp, #20
   1b342:	4614      	mov	r4, r2
   1b344:	461d      	mov	r5, r3
   1b346:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1b348:	f7ff ff00 	bl	1b14c <compare_int_lock>
   1b34c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1b34e:	f7ff ffd3 	bl	1b2f8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1b352:	42a0      	cmp	r0, r4
   1b354:	eb71 0305 	sbcs.w	r3, r1, r5
   1b358:	f080 8086 	bcs.w	1b468 <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1b35c:	4b49      	ldr	r3, [pc, #292]	; (1b484 <compare_set+0x148>)
   1b35e:	1a20      	subs	r0, r4, r0
   1b360:	eb65 0101 	sbc.w	r1, r5, r1
   1b364:	4298      	cmp	r0, r3
   1b366:	f171 0100 	sbcs.w	r1, r1, #0
   1b36a:	f080 8088 	bcs.w	1b47e <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1b36e:	4b46      	ldr	r3, [pc, #280]	; (1b488 <compare_set+0x14c>)
   1b370:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1b374:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1b378:	429d      	cmp	r5, r3
   1b37a:	bf08      	it	eq
   1b37c:	4294      	cmpeq	r4, r2
   1b37e:	d05e      	beq.n	1b43e <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1b380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1b384:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1b388:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1b38a:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1b38e:	f06f 0101 	mvn.w	r1, #1
   1b392:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1b396:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1b39a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1b39e:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1b3a2:	40bb      	lsls	r3, r7
   1b3a4:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b3a8:	fa1f f888 	uxth.w	r8, r8
   1b3ac:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1b3b0:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1b3b2:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1b3b6:	4b35      	ldr	r3, [pc, #212]	; (1b48c <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b3b8:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1b3bc:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1b3c0:	eba0 000a 	sub.w	r0, r0, sl
   1b3c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1b3c8:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1b3cc:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1b3ce:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1b3d2:	d107      	bne.n	1b3e4 <compare_set+0xa8>
   1b3d4:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1b3d6:	2013      	movs	r0, #19
   1b3d8:	f00d f8ea 	bl	285b0 <z_impl_k_busy_wait>
   1b3dc:	f06f 0101 	mvn.w	r1, #1
   1b3e0:	4b2a      	ldr	r3, [pc, #168]	; (1b48c <compare_set+0x150>)
   1b3e2:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1b3e4:	eba1 000a 	sub.w	r0, r1, sl
   1b3e8:	4430      	add	r0, r6
   1b3ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1b3ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b3f2:	f04f 0000 	mov.w	r0, #0
   1b3f6:	f8c8 0000 	str.w	r0, [r8]
   1b3fa:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1b3fe:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1b400:	bf88      	it	hi
   1b402:	eb0a 060b 	addhi.w	r6, sl, fp
   1b406:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1b40a:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1b40e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1b412:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1b416:	bf88      	it	hi
   1b418:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1b41c:	4582      	cmp	sl, r0
   1b41e:	d006      	beq.n	1b42e <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1b420:	1a08      	subs	r0, r1, r0
   1b422:	4430      	add	r0, r6
   1b424:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1b428:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b42c:	d81a      	bhi.n	1b464 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1b42e:	1ab6      	subs	r6, r6, r2
   1b430:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1b434:	1936      	adds	r6, r6, r4
   1b436:	f145 0300 	adc.w	r3, r5, #0
   1b43a:	4634      	mov	r4, r6
   1b43c:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1b43e:	4912      	ldr	r1, [pc, #72]	; (1b488 <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1b440:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1b442:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1b446:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1b44a:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1b44c:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1b44e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1b450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b452:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1b454:	4638      	mov	r0, r7
   1b456:	9901      	ldr	r1, [sp, #4]
   1b458:	f7ff fed8 	bl	1b20c <compare_int_unlock>
}
   1b45c:	4620      	mov	r0, r4
   1b45e:	b005      	add	sp, #20
   1b460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b464:	4630      	mov	r0, r6
   1b466:	e7a9      	b.n	1b3bc <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1b468:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b46a:	4a09      	ldr	r2, [pc, #36]	; (1b490 <compare_set+0x154>)
   1b46c:	40bb      	lsls	r3, r7
   1b46e:	e8d2 0fef 	ldaex	r0, [r2]
   1b472:	4318      	orrs	r0, r3
   1b474:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1b478:	2900      	cmp	r1, #0
   1b47a:	d0e0      	beq.n	1b43e <compare_set+0x102>
   1b47c:	e7f7      	b.n	1b46e <compare_set+0x132>
			return -EINVAL;
   1b47e:	f06f 0415 	mvn.w	r4, #21
   1b482:	e7e7      	b.n	1b454 <compare_set+0x118>
   1b484:	01000001 	.word	0x01000001
   1b488:	20009b38 	.word	0x20009b38
   1b48c:	40015000 	.word	0x40015000
   1b490:	2002125c 	.word	0x2002125c

0001b494 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1b494:	2801      	cmp	r0, #1
{
   1b496:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1b498:	d00b      	beq.n	1b4b2 <z_nrf_rtc_timer_set+0x1e>
   1b49a:	4908      	ldr	r1, [pc, #32]	; (1b4bc <z_nrf_rtc_timer_set+0x28>)
   1b49c:	4808      	ldr	r0, [pc, #32]	; (1b4c0 <z_nrf_rtc_timer_set+0x2c>)
   1b49e:	f240 1353 	movw	r3, #339	; 0x153
   1b4a2:	4a08      	ldr	r2, [pc, #32]	; (1b4c4 <z_nrf_rtc_timer_set+0x30>)
   1b4a4:	f008 fdbd 	bl	24022 <assert_print>
   1b4a8:	f240 1153 	movw	r1, #339	; 0x153
   1b4ac:	4805      	ldr	r0, [pc, #20]	; (1b4c4 <z_nrf_rtc_timer_set+0x30>)
   1b4ae:	f008 fdb1 	bl	24014 <assert_post_action>
}
   1b4b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1b4b6:	f7ff bf41 	b.w	1b33c <compare_set>
   1b4ba:	bf00      	nop
   1b4bc:	0002e996 	.word	0x0002e996
   1b4c0:	0002a669 	.word	0x0002a669
   1b4c4:	0002e949 	.word	0x0002e949

0001b4c8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1b4c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1b4ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1b4ce:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b4d0:	f04f 30ff 	mov.w	r0, #4294967295
   1b4d4:	f04f 31ff 	mov.w	r1, #4294967295
   1b4d8:	4c19      	ldr	r4, [pc, #100]	; (1b540 <sys_clock_driver_init+0x78>)
   1b4da:	4b1a      	ldr	r3, [pc, #104]	; (1b544 <sys_clock_driver_init+0x7c>)
   1b4dc:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1b4e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1b4e4:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1b4e8:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1b4ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1b4f0:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b4f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1b4f6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1b4fa:	4b13      	ldr	r3, [pc, #76]	; (1b548 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1b4fc:	2101      	movs	r1, #1
   1b4fe:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1b502:	2015      	movs	r0, #21
   1b504:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1b508:	462a      	mov	r2, r5
   1b50a:	f7f3 ffb3 	bl	f474 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1b50e:	2015      	movs	r0, #21
   1b510:	f7f3 ff80 	bl	f414 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1b514:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1b516:	2203      	movs	r2, #3
   1b518:	60a3      	str	r3, [r4, #8]
   1b51a:	6023      	str	r3, [r4, #0]
   1b51c:	4b0b      	ldr	r3, [pc, #44]	; (1b54c <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1b51e:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1b520:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1b522:	4b0b      	ldr	r3, [pc, #44]	; (1b550 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1b524:	4a0b      	ldr	r2, [pc, #44]	; (1b554 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1b526:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1b528:	4b0b      	ldr	r3, [pc, #44]	; (1b558 <sys_clock_driver_init+0x90>)
   1b52a:	9501      	str	r5, [sp, #4]
   1b52c:	9300      	str	r3, [sp, #0]
   1b52e:	2300      	movs	r3, #0
   1b530:	f7ff ff04 	bl	1b33c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1b534:	4630      	mov	r0, r6
   1b536:	f7fd fd83 	bl	19040 <z_nrf_clock_control_lf_on>

	return 0;
}
   1b53a:	4628      	mov	r0, r5
   1b53c:	b002      	add	sp, #8
   1b53e:	bd70      	pop	{r4, r5, r6, pc}
   1b540:	40015000 	.word	0x40015000
   1b544:	20009b38 	.word	0x20009b38
   1b548:	e000e100 	.word	0xe000e100
   1b54c:	20021264 	.word	0x20021264
   1b550:	20021260 	.word	0x20021260
   1b554:	007fffff 	.word	0x007fffff
   1b558:	0001b18d 	.word	0x0001b18d

0001b55c <rtc_nrf_isr>:
{
   1b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1b560:	4b3f      	ldr	r3, [pc, #252]	; (1b660 <rtc_nrf_isr+0x104>)
   1b562:	b085      	sub	sp, #20
   1b564:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1b568:	0792      	lsls	r2, r2, #30
   1b56a:	d50b      	bpl.n	1b584 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b56c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1b570:	b142      	cbz	r2, 1b584 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b572:	2200      	movs	r2, #0
   1b574:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1b578:	4a3a      	ldr	r2, [pc, #232]	; (1b664 <rtc_nrf_isr+0x108>)
   1b57a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1b57e:	6813      	ldr	r3, [r2, #0]
   1b580:	3301      	adds	r3, #1
   1b582:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1b584:	4d38      	ldr	r5, [pc, #224]	; (1b668 <rtc_nrf_isr+0x10c>)
   1b586:	2400      	movs	r4, #0
   1b588:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1b58a:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1b58e:	4e34      	ldr	r6, [pc, #208]	; (1b660 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1b590:	f04f 0320 	mov.w	r3, #32
   1b594:	f3ef 8211 	mrs	r2, BASEPRI
   1b598:	f383 8812 	msr	BASEPRI_MAX, r3
   1b59c:	f3bf 8f6f 	isb	sy
   1b5a0:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1b5a4:	fa0b f904 	lsl.w	r9, fp, r4
   1b5a8:	ea19 0f03 	tst.w	r9, r3
   1b5ac:	d10a      	bne.n	1b5c4 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1b5ae:	f382 8811 	msr	BASEPRI, r2
   1b5b2:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1b5b6:	3510      	adds	r5, #16
   1b5b8:	b114      	cbz	r4, 1b5c0 <rtc_nrf_isr+0x64>
}
   1b5ba:	b005      	add	sp, #20
   1b5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1b5c0:	2401      	movs	r4, #1
   1b5c2:	e7e5      	b.n	1b590 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1b5c4:	2301      	movs	r3, #1
   1b5c6:	40a3      	lsls	r3, r4
   1b5c8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b5ca:	4928      	ldr	r1, [pc, #160]	; (1b66c <rtc_nrf_isr+0x110>)
   1b5cc:	e8d1 0fef 	ldaex	r0, [r1]
   1b5d0:	ea00 0c03 	and.w	ip, r0, r3
   1b5d4:	e8c1 cfee 	stlex	lr, ip, [r1]
   1b5d8:	f1be 0f00 	cmp.w	lr, #0
   1b5dc:	d1f6      	bne.n	1b5cc <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b5de:	4b24      	ldr	r3, [pc, #144]	; (1b670 <rtc_nrf_isr+0x114>)
   1b5e0:	00a1      	lsls	r1, r4, #2
   1b5e2:	b918      	cbnz	r0, 1b5ec <rtc_nrf_isr+0x90>
   1b5e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1b5e8:	2800      	cmp	r0, #0
   1b5ea:	d0e0      	beq.n	1b5ae <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b5ec:	f04f 0a00 	mov.w	sl, #0
   1b5f0:	f841 a003 	str.w	sl, [r1, r3]
   1b5f4:	58cb      	ldr	r3, [r1, r3]
   1b5f6:	f382 8811 	msr	BASEPRI, r2
   1b5fa:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1b5fe:	f7ff fe7b 	bl	1b2f8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1b602:	f04f 0320 	mov.w	r3, #32
   1b606:	f3ef 8c11 	mrs	ip, BASEPRI
   1b60a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b60e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1b612:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1b616:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1b61a:	4290      	cmp	r0, r2
   1b61c:	4199      	sbcs	r1, r3
   1b61e:	d204      	bcs.n	1b62a <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1b620:	f38c 8811 	msr	BASEPRI, ip
   1b624:	f3bf 8f6f 	isb	sy
		if (handler) {
   1b628:	e7c5      	b.n	1b5b6 <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1b62a:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b62e:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1b632:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b634:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1b638:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b63c:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1b640:	4907      	ldr	r1, [pc, #28]	; (1b660 <rtc_nrf_isr+0x104>)
   1b642:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1b646:	f38c 8811 	msr	BASEPRI, ip
   1b64a:	f3bf 8f6f 	isb	sy
		if (handler) {
   1b64e:	f1b8 0f00 	cmp.w	r8, #0
   1b652:	d0b0      	beq.n	1b5b6 <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1b654:	9903      	ldr	r1, [sp, #12]
   1b656:	4620      	mov	r0, r4
   1b658:	9100      	str	r1, [sp, #0]
   1b65a:	47c0      	blx	r8
   1b65c:	e7ab      	b.n	1b5b6 <rtc_nrf_isr+0x5a>
   1b65e:	bf00      	nop
   1b660:	40015000 	.word	0x40015000
   1b664:	20021268 	.word	0x20021268
   1b668:	20009b38 	.word	0x20009b38
   1b66c:	2002125c 	.word	0x2002125c
   1b670:	40015140 	.word	0x40015140

0001b674 <z_nrf_rtc_timer_chan_alloc>:
{
   1b674:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1b676:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1b678:	4b0c      	ldr	r3, [pc, #48]	; (1b6ac <z_nrf_rtc_timer_chan_alloc+0x38>)
   1b67a:	6818      	ldr	r0, [r3, #0]
   1b67c:	b190      	cbz	r0, 1b6a4 <z_nrf_rtc_timer_chan_alloc+0x30>
   1b67e:	fab0 f080 	clz	r0, r0
   1b682:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1b686:	fa04 f100 	lsl.w	r1, r4, r0
   1b68a:	43c9      	mvns	r1, r1
   1b68c:	e8d3 2fef 	ldaex	r2, [r3]
   1b690:	ea02 0501 	and.w	r5, r2, r1
   1b694:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1b698:	2e00      	cmp	r6, #0
   1b69a:	d1f7      	bne.n	1b68c <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1b69c:	40c2      	lsrs	r2, r0
   1b69e:	07d2      	lsls	r2, r2, #31
   1b6a0:	d5eb      	bpl.n	1b67a <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1b6a2:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1b6a4:	f06f 000b 	mvn.w	r0, #11
   1b6a8:	e7fb      	b.n	1b6a2 <z_nrf_rtc_timer_chan_alloc+0x2e>
   1b6aa:	bf00      	nop
   1b6ac:	20021260 	.word	0x20021260

0001b6b0 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1b6b0:	2801      	cmp	r0, #1
{
   1b6b2:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1b6b4:	d00b      	beq.n	1b6ce <z_nrf_rtc_timer_chan_free+0x1e>
   1b6b6:	490b      	ldr	r1, [pc, #44]	; (1b6e4 <z_nrf_rtc_timer_chan_free+0x34>)
   1b6b8:	480b      	ldr	r0, [pc, #44]	; (1b6e8 <z_nrf_rtc_timer_chan_free+0x38>)
   1b6ba:	f240 2321 	movw	r3, #545	; 0x221
   1b6be:	4a0b      	ldr	r2, [pc, #44]	; (1b6ec <z_nrf_rtc_timer_chan_free+0x3c>)
   1b6c0:	f008 fcaf 	bl	24022 <assert_print>
   1b6c4:	f240 2121 	movw	r1, #545	; 0x221
   1b6c8:	4808      	ldr	r0, [pc, #32]	; (1b6ec <z_nrf_rtc_timer_chan_free+0x3c>)
   1b6ca:	f008 fca3 	bl	24014 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b6ce:	4b08      	ldr	r3, [pc, #32]	; (1b6f0 <z_nrf_rtc_timer_chan_free+0x40>)
   1b6d0:	e8d3 1fef 	ldaex	r1, [r3]
   1b6d4:	f041 0102 	orr.w	r1, r1, #2
   1b6d8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1b6dc:	2a00      	cmp	r2, #0
   1b6de:	d1f7      	bne.n	1b6d0 <z_nrf_rtc_timer_chan_free+0x20>
}
   1b6e0:	bd08      	pop	{r3, pc}
   1b6e2:	bf00      	nop
   1b6e4:	0002e996 	.word	0x0002e996
   1b6e8:	0002a669 	.word	0x0002a669
   1b6ec:	0002e949 	.word	0x0002e949
   1b6f0:	20021260 	.word	0x20021260

0001b6f4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1b6f4:	1c43      	adds	r3, r0, #1
{
   1b6f6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1b6f8:	d020      	beq.n	1b73c <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1b6fa:	2801      	cmp	r0, #1
   1b6fc:	dd20      	ble.n	1b740 <sys_clock_set_timeout+0x4c>
   1b6fe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b702:	da1f      	bge.n	1b744 <sys_clock_set_timeout+0x50>
   1b704:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1b706:	f7ff fdf7 	bl	1b2f8 <z_nrf_rtc_timer_read>
   1b70a:	4b0f      	ldr	r3, [pc, #60]	; (1b748 <sys_clock_set_timeout+0x54>)
   1b70c:	e9d3 1300 	ldrd	r1, r3, [r3]
   1b710:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1b712:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b716:	bf28      	it	cs
   1b718:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1b71a:	480c      	ldr	r0, [pc, #48]	; (1b74c <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1b71c:	3201      	adds	r2, #1
   1b71e:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1b720:	4282      	cmp	r2, r0
   1b722:	bf28      	it	cs
   1b724:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1b726:	2000      	movs	r0, #0
   1b728:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b72a:	4909      	ldr	r1, [pc, #36]	; (1b750 <sys_clock_set_timeout+0x5c>)
   1b72c:	9001      	str	r0, [sp, #4]
   1b72e:	9100      	str	r1, [sp, #0]
   1b730:	f143 0300 	adc.w	r3, r3, #0
   1b734:	f7ff fe02 	bl	1b33c <compare_set>
}
   1b738:	b002      	add	sp, #8
   1b73a:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1b73c:	4803      	ldr	r0, [pc, #12]	; (1b74c <sys_clock_set_timeout+0x58>)
   1b73e:	e7e1      	b.n	1b704 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1b740:	2400      	movs	r4, #0
   1b742:	e7e0      	b.n	1b706 <sys_clock_set_timeout+0x12>
   1b744:	4c01      	ldr	r4, [pc, #4]	; (1b74c <sys_clock_set_timeout+0x58>)
   1b746:	e7de      	b.n	1b706 <sys_clock_set_timeout+0x12>
   1b748:	20009b58 	.word	0x20009b58
   1b74c:	007fffff 	.word	0x007fffff
   1b750:	0001b18d 	.word	0x0001b18d

0001b754 <sys_clock_elapsed>:
{
   1b754:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1b756:	f7ff fdcf 	bl	1b2f8 <z_nrf_rtc_timer_read>
   1b75a:	4b02      	ldr	r3, [pc, #8]	; (1b764 <sys_clock_elapsed+0x10>)
   1b75c:	681b      	ldr	r3, [r3, #0]
}
   1b75e:	1ac0      	subs	r0, r0, r3
   1b760:	bd08      	pop	{r3, pc}
   1b762:	bf00      	nop
   1b764:	20009b58 	.word	0x20009b58

0001b768 <nrf_gpio_pin_port_decode>:
{
   1b768:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b76a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1b76c:	095a      	lsrs	r2, r3, #5
   1b76e:	d00d      	beq.n	1b78c <nrf_gpio_pin_port_decode+0x24>
   1b770:	2a01      	cmp	r2, #1
   1b772:	d013      	beq.n	1b79c <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b774:	490e      	ldr	r1, [pc, #56]	; (1b7b0 <nrf_gpio_pin_port_decode+0x48>)
   1b776:	480f      	ldr	r0, [pc, #60]	; (1b7b4 <nrf_gpio_pin_port_decode+0x4c>)
   1b778:	f240 2347 	movw	r3, #583	; 0x247
   1b77c:	4a0e      	ldr	r2, [pc, #56]	; (1b7b8 <nrf_gpio_pin_port_decode+0x50>)
   1b77e:	f008 fc50 	bl	24022 <assert_print>
   1b782:	f240 2147 	movw	r1, #583	; 0x247
   1b786:	480c      	ldr	r0, [pc, #48]	; (1b7b8 <nrf_gpio_pin_port_decode+0x50>)
   1b788:	f008 fc44 	bl	24014 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1b78c:	f04f 32ff 	mov.w	r2, #4294967295
   1b790:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b794:	07d9      	lsls	r1, r3, #31
   1b796:	d5ed      	bpl.n	1b774 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1b798:	4808      	ldr	r0, [pc, #32]	; (1b7bc <nrf_gpio_pin_port_decode+0x54>)
   1b79a:	e008      	b.n	1b7ae <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1b79c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1b7a0:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1b7a4:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b7a6:	07d2      	lsls	r2, r2, #31
   1b7a8:	d5e4      	bpl.n	1b774 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1b7aa:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1b7ac:	4804      	ldr	r0, [pc, #16]	; (1b7c0 <nrf_gpio_pin_port_decode+0x58>)
}
   1b7ae:	bd08      	pop	{r3, pc}
   1b7b0:	0002e276 	.word	0x0002e276
   1b7b4:	0002a669 	.word	0x0002a669
   1b7b8:	0002e243 	.word	0x0002e243
   1b7bc:	40842500 	.word	0x40842500
   1b7c0:	40842800 	.word	0x40842800

0001b7c4 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1b7c4:	b510      	push	{r4, lr}
   1b7c6:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1b7c8:	6902      	ldr	r2, [r0, #16]
{
   1b7ca:	b0a6      	sub	sp, #152	; 0x98

	data->dev = dev;
   1b7cc:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1b7d0:	4924      	ldr	r1, [pc, #144]	; (1b864 <mbox_nrf_init+0xa0>)
   1b7d2:	2000      	movs	r0, #0
   1b7d4:	f001 f812 	bl	1c7fc <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1b7d8:	2200      	movs	r2, #0
   1b7da:	2101      	movs	r1, #1
   1b7dc:	202a      	movs	r0, #42	; 0x2a
   1b7de:	f7f3 fe49 	bl	f474 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1b7e2:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1b7e4:	2284      	movs	r2, #132	; 0x84
   1b7e6:	2100      	movs	r1, #0
   1b7e8:	a805      	add	r0, sp, #20
   1b7ea:	f00d f811 	bl	28810 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1b7ee:	6863      	ldr	r3, [r4, #4]
   1b7f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1b7f4:	d309      	bcc.n	1b80a <mbox_nrf_init+0x46>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1b7f6:	4b1c      	ldr	r3, [pc, #112]	; (1b868 <mbox_nrf_init+0xa4>)
   1b7f8:	2202      	movs	r2, #2
   1b7fa:	9302      	str	r3, [sp, #8]
   1b7fc:	2300      	movs	r3, #0
   1b7fe:	491b      	ldr	r1, [pc, #108]	; (1b86c <mbox_nrf_init+0xa8>)
   1b800:	4618      	mov	r0, r3
   1b802:	e9cd 3300 	strd	r3, r3, [sp]
   1b806:	f00b ff65 	bl	276d4 <z_log_msg_runtime_create.constprop.0>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1b80a:	6823      	ldr	r3, [r4, #0]
   1b80c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1b810:	d309      	bcc.n	1b826 <mbox_nrf_init+0x62>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1b812:	4b17      	ldr	r3, [pc, #92]	; (1b870 <mbox_nrf_init+0xac>)
   1b814:	2202      	movs	r2, #2
   1b816:	9302      	str	r3, [sp, #8]
   1b818:	2300      	movs	r3, #0
   1b81a:	4914      	ldr	r1, [pc, #80]	; (1b86c <mbox_nrf_init+0xa8>)
   1b81c:	4618      	mov	r0, r3
   1b81e:	e9cd 3300 	strd	r3, r3, [sp]
   1b822:	f00b ff57 	bl	276d4 <z_log_msg_runtime_create.constprop.0>
	ch_config.receive_events_enabled = 0;
   1b826:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1b828:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1b82a:	9325      	str	r3, [sp, #148]	; 0x94
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1b82c:	aa05      	add	r2, sp, #20
		if (conf->tx_mask & BIT(ch)) {
   1b82e:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1b830:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1b832:	40d9      	lsrs	r1, r3
   1b834:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1b836:	bf44      	itt	mi
   1b838:	fa00 f103 	lslmi.w	r1, r0, r3
   1b83c:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1b840:	6821      	ldr	r1, [r4, #0]
   1b842:	40d9      	lsrs	r1, r3
   1b844:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1b846:	bf48      	it	mi
   1b848:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1b84c:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1b850:	bf48      	it	mi
   1b852:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1b854:	2b10      	cmp	r3, #16
   1b856:	d1ea      	bne.n	1b82e <mbox_nrf_init+0x6a>
	nrfx_ipc_config_load(&ch_config);
   1b858:	a805      	add	r0, sp, #20
   1b85a:	f000 ffe7 	bl	1c82c <nrfx_ipc_config_load>

	return 0;
}
   1b85e:	2000      	movs	r0, #0
   1b860:	b026      	add	sp, #152	; 0x98
   1b862:	bd10      	pop	{r4, pc}
   1b864:	0001b8c5 	.word	0x0001b8c5
   1b868:	0002e9b1 	.word	0x0002e9b1
   1b86c:	0002975c 	.word	0x0002975c
   1b870:	0002e9dd 	.word	0x0002e9dd

0001b874 <mbox_nrf_send>:
{
   1b874:	b530      	push	{r4, r5, lr}
   1b876:	4605      	mov	r5, r0
   1b878:	460c      	mov	r4, r1
   1b87a:	b085      	sub	sp, #20
	if (msg) {
   1b87c:	b14a      	cbz	r2, 1b892 <mbox_nrf_send+0x1e>
		LOG_WRN("Sending data not supported");
   1b87e:	4b0f      	ldr	r3, [pc, #60]	; (1b8bc <mbox_nrf_send+0x48>)
   1b880:	2202      	movs	r2, #2
   1b882:	9302      	str	r3, [sp, #8]
   1b884:	2300      	movs	r3, #0
   1b886:	490e      	ldr	r1, [pc, #56]	; (1b8c0 <mbox_nrf_send+0x4c>)
   1b888:	4618      	mov	r0, r3
   1b88a:	e9cd 3300 	strd	r3, r3, [sp]
   1b88e:	f00b ff21 	bl	276d4 <z_log_msg_runtime_create.constprop.0>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1b892:	2c0f      	cmp	r4, #15
   1b894:	d80f      	bhi.n	1b8b6 <mbox_nrf_send+0x42>
   1b896:	686b      	ldr	r3, [r5, #4]
   1b898:	685b      	ldr	r3, [r3, #4]
   1b89a:	40e3      	lsrs	r3, r4
   1b89c:	07db      	lsls	r3, r3, #31
   1b89e:	d50a      	bpl.n	1b8b6 <mbox_nrf_send+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b8a0:	2301      	movs	r3, #1
	return 0;
   1b8a2:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1b8a4:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b8a6:	b2e4      	uxtb	r4, r4
   1b8a8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1b8ac:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1b8b0:	6023      	str	r3, [r4, #0]
}
   1b8b2:	b005      	add	sp, #20
   1b8b4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1b8b6:	f06f 0015 	mvn.w	r0, #21
   1b8ba:	e7fa      	b.n	1b8b2 <mbox_nrf_send+0x3e>
   1b8bc:	0002ea09 	.word	0x0002ea09
   1b8c0:	0002975c 	.word	0x0002975c

0001b8c4 <mbox_dispatcher>:
{
   1b8c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1b8c6:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1b8ca:	280f      	cmp	r0, #15
{
   1b8cc:	4604      	mov	r4, r0
   1b8ce:	460d      	mov	r5, r1
   1b8d0:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1b8d2:	d803      	bhi.n	1b8dc <mbox_dispatcher+0x18>
   1b8d4:	681b      	ldr	r3, [r3, #0]
   1b8d6:	40c3      	lsrs	r3, r0
   1b8d8:	07db      	lsls	r3, r3, #31
   1b8da:	d409      	bmi.n	1b8f0 <mbox_dispatcher+0x2c>
		LOG_WRN("RX event on illegal channel");
   1b8dc:	4b14      	ldr	r3, [pc, #80]	; (1b930 <mbox_dispatcher+0x6c>)
   1b8de:	2202      	movs	r2, #2
   1b8e0:	9302      	str	r3, [sp, #8]
   1b8e2:	2300      	movs	r3, #0
   1b8e4:	4913      	ldr	r1, [pc, #76]	; (1b934 <mbox_dispatcher+0x70>)
   1b8e6:	4618      	mov	r0, r3
   1b8e8:	e9cd 3300 	strd	r3, r3, [sp]
   1b8ec:	f00b fef2 	bl	276d4 <z_log_msg_runtime_create.constprop.0>
	if (!(data->enabled_mask & BIT(channel))) {
   1b8f0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1b8f4:	40e3      	lsrs	r3, r4
   1b8f6:	f013 0301 	ands.w	r3, r3, #1
   1b8fa:	d108      	bne.n	1b90e <mbox_dispatcher+0x4a>
		LOG_WRN("RX event on disabled channel");
   1b8fc:	4a0e      	ldr	r2, [pc, #56]	; (1b938 <mbox_dispatcher+0x74>)
   1b8fe:	4618      	mov	r0, r3
   1b900:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1b904:	490b      	ldr	r1, [pc, #44]	; (1b934 <mbox_dispatcher+0x70>)
   1b906:	2202      	movs	r2, #2
   1b908:	9300      	str	r3, [sp, #0]
   1b90a:	f00b fee3 	bl	276d4 <z_log_msg_runtime_create.constprop.0>
	if (data->cb[channel] != NULL) {
   1b90e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1b912:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1b916:	b145      	cbz	r5, 1b92a <mbox_dispatcher+0x66>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1b918:	2300      	movs	r3, #0
   1b91a:	4621      	mov	r1, r4
   1b91c:	4630      	mov	r0, r6
   1b91e:	46ac      	mov	ip, r5
   1b920:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1b922:	b004      	add	sp, #16
   1b924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1b928:	4760      	bx	ip
}
   1b92a:	b004      	add	sp, #16
   1b92c:	bd70      	pop	{r4, r5, r6, pc}
   1b92e:	bf00      	nop
   1b930:	0002ea24 	.word	0x0002ea24
   1b934:	0002975c 	.word	0x0002975c
   1b938:	0002ea40 	.word	0x0002ea40

0001b93c <mbox_nrf_set_enabled>:
{
   1b93c:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1b93e:	290f      	cmp	r1, #15
{
   1b940:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1b942:	6905      	ldr	r5, [r0, #16]
{
   1b944:	b085      	sub	sp, #20
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1b946:	d841      	bhi.n	1b9cc <mbox_nrf_set_enabled+0x90>
   1b948:	6843      	ldr	r3, [r0, #4]
   1b94a:	681b      	ldr	r3, [r3, #0]
   1b94c:	40cb      	lsrs	r3, r1
   1b94e:	07db      	lsls	r3, r3, #31
   1b950:	d53c      	bpl.n	1b9cc <mbox_nrf_set_enabled+0x90>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1b952:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1b956:	40cb      	lsrs	r3, r1
   1b958:	f003 0301 	and.w	r3, r3, #1
   1b95c:	b91a      	cbnz	r2, 1b966 <mbox_nrf_set_enabled+0x2a>
   1b95e:	bb0b      	cbnz	r3, 1b9a4 <mbox_nrf_set_enabled+0x68>
		return -EALREADY;
   1b960:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1b964:	e030      	b.n	1b9c8 <mbox_nrf_set_enabled+0x8c>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1b966:	2b00      	cmp	r3, #0
   1b968:	d1fa      	bne.n	1b960 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1b96a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1b96e:	b943      	cbnz	r3, 1b982 <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   1b970:	4a18      	ldr	r2, [pc, #96]	; (1b9d4 <mbox_nrf_set_enabled+0x98>)
   1b972:	4618      	mov	r0, r3
   1b974:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1b978:	4917      	ldr	r1, [pc, #92]	; (1b9d8 <mbox_nrf_set_enabled+0x9c>)
   1b97a:	2202      	movs	r2, #2
   1b97c:	9300      	str	r3, [sp, #0]
   1b97e:	f00b fea9 	bl	276d4 <z_log_msg_runtime_create.constprop.0>
	if (enable && data->enabled_mask == 0) {
   1b982:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1b986:	b913      	cbnz	r3, 1b98e <mbox_nrf_set_enabled+0x52>
		irq_enable(DT_INST_IRQN(0));
   1b988:	202a      	movs	r0, #42	; 0x2a
   1b98a:	f7f3 fd43 	bl	f414 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1b98e:	2201      	movs	r2, #1
   1b990:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1b994:	40a2      	lsls	r2, r4
   1b996:	4313      	orrs	r3, r2
   1b998:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1b99c:	b2e0      	uxtb	r0, r4
   1b99e:	f000 ff87 	bl	1c8b0 <nrfx_ipc_receive_event_enable>
   1b9a2:	e00a      	b.n	1b9ba <mbox_nrf_set_enabled+0x7e>
		nrfx_ipc_receive_event_disable(channel);
   1b9a4:	b2c8      	uxtb	r0, r1
   1b9a6:	f000 ffa1 	bl	1c8ec <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1b9aa:	2201      	movs	r2, #1
   1b9ac:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1b9b0:	40a2      	lsls	r2, r4
   1b9b2:	ea23 0302 	bic.w	r3, r3, r2
   1b9b6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1b9ba:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1b9be:	b913      	cbnz	r3, 1b9c6 <mbox_nrf_set_enabled+0x8a>
		irq_disable(DT_INST_IRQN(0));
   1b9c0:	202a      	movs	r0, #42	; 0x2a
   1b9c2:	f7f3 fd35 	bl	f430 <arch_irq_disable>
	return 0;
   1b9c6:	2000      	movs	r0, #0
}
   1b9c8:	b005      	add	sp, #20
   1b9ca:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1b9cc:	f06f 0015 	mvn.w	r0, #21
   1b9d0:	e7fa      	b.n	1b9c8 <mbox_nrf_set_enabled+0x8c>
   1b9d2:	bf00      	nop
   1b9d4:	0002ea5d 	.word	0x0002ea5d
   1b9d8:	0002975c 	.word	0x0002975c

0001b9dc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1b9dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1b9de:	ab0b      	add	r3, sp, #44	; 0x2c
   1b9e0:	9305      	str	r3, [sp, #20]
   1b9e2:	9303      	str	r3, [sp, #12]
   1b9e4:	4b05      	ldr	r3, [pc, #20]	; (1b9fc <z_log_msg_runtime_create.constprop.0+0x20>)
   1b9e6:	2201      	movs	r2, #1
   1b9e8:	9302      	str	r3, [sp, #8]
   1b9ea:	2300      	movs	r3, #0
   1b9ec:	4618      	mov	r0, r3
   1b9ee:	e9cd 3300 	strd	r3, r3, [sp]
   1b9f2:	f7f2 fadb 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   1b9f6:	b007      	add	sp, #28
   1b9f8:	f85d fb04 	ldr.w	pc, [sp], #4
   1b9fc:	0002eaba 	.word	0x0002eaba

0001ba00 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1ba00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1ba02:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1ba04:	f7f2 fa20 	bl	de48 <z_impl_log_panic>
   1ba08:	4b06      	ldr	r3, [pc, #24]	; (1ba24 <k_sys_fatal_error_handler+0x24>)
   1ba0a:	4620      	mov	r0, r4
   1ba0c:	9302      	str	r3, [sp, #8]
   1ba0e:	2201      	movs	r2, #1
   1ba10:	4623      	mov	r3, r4
   1ba12:	e9cd 4400 	strd	r4, r4, [sp]
   1ba16:	4904      	ldr	r1, [pc, #16]	; (1ba28 <k_sys_fatal_error_handler+0x28>)
   1ba18:	f7ff ffe0 	bl	1b9dc <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   1ba1c:	4620      	mov	r0, r4
   1ba1e:	f7f4 f999 	bl	fd54 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1ba22:	bf00      	nop
   1ba24:	0002eaba 	.word	0x0002eaba
   1ba28:	00029724 	.word	0x00029724

0001ba2c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1ba2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba30:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1ba32:	4b15      	ldr	r3, [pc, #84]	; (1ba88 <tfm_ns_interface_dispatch+0x5c>)
   1ba34:	4604      	mov	r4, r0
   1ba36:	f893 8000 	ldrb.w	r8, [r3]
   1ba3a:	460d      	mov	r5, r1
   1ba3c:	4616      	mov	r6, r2
   1ba3e:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1ba40:	f1b8 0f00 	cmp.w	r8, #0
   1ba44:	d115      	bne.n	1ba72 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1ba46:	4668      	mov	r0, sp
   1ba48:	f009 f9eb 	bl	24e22 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1ba4c:	463a      	mov	r2, r7
   1ba4e:	4631      	mov	r1, r6
   1ba50:	4628      	mov	r0, r5
   1ba52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1ba54:	47a0      	blx	r4
   1ba56:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1ba58:	4668      	mov	r0, sp
   1ba5a:	f009 f9e3 	bl	24e24 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1ba5e:	f1b8 0f00 	cmp.w	r8, #0
   1ba62:	d002      	beq.n	1ba6a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1ba64:	4809      	ldr	r0, [pc, #36]	; (1ba8c <tfm_ns_interface_dispatch+0x60>)
   1ba66:	f003 f9e7 	bl	1ee38 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1ba6a:	4620      	mov	r0, r4
   1ba6c:	b022      	add	sp, #136	; 0x88
   1ba6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1ba72:	f04f 32ff 	mov.w	r2, #4294967295
   1ba76:	f04f 33ff 	mov.w	r3, #4294967295
   1ba7a:	4804      	ldr	r0, [pc, #16]	; (1ba8c <tfm_ns_interface_dispatch+0x60>)
   1ba7c:	f003 f90c 	bl	1ec98 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1ba80:	2800      	cmp	r0, #0
   1ba82:	d0e0      	beq.n	1ba46 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1ba84:	241f      	movs	r4, #31
   1ba86:	e7f0      	b.n	1ba6a <tfm_ns_interface_dispatch+0x3e>
   1ba88:	200221b2 	.word	0x200221b2
   1ba8c:	20008ac0 	.word	0x20008ac0

0001ba90 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1ba90:	b530      	push	{r4, r5, lr}
   1ba92:	b095      	sub	sp, #84	; 0x54
   1ba94:	4605      	mov	r5, r0
   1ba96:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1ba98:	2230      	movs	r2, #48	; 0x30
   1ba9a:	2100      	movs	r1, #0
   1ba9c:	a808      	add	r0, sp, #32
   1ba9e:	f00c feb7 	bl	28810 <memset>
   1baa2:	233f      	movs	r3, #63	; 0x3f
   1baa4:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1baa6:	ab07      	add	r3, sp, #28
   1baa8:	9303      	str	r3, [sp, #12]
   1baaa:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1baac:	9406      	str	r4, [sp, #24]
   1baae:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1bab2:	b154      	cbz	r4, 1baca <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1bab4:	2301      	movs	r3, #1
   1bab6:	aa05      	add	r2, sp, #20
   1bab8:	9200      	str	r2, [sp, #0]
   1baba:	2100      	movs	r1, #0
   1babc:	4804      	ldr	r0, [pc, #16]	; (1bad0 <psa_generate_random+0x40>)
   1babe:	9301      	str	r3, [sp, #4]
   1bac0:	aa03      	add	r2, sp, #12
   1bac2:	f000 f807 	bl	1bad4 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1bac6:	b015      	add	sp, #84	; 0x54
   1bac8:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1baca:	4620      	mov	r0, r4
   1bacc:	e7fb      	b.n	1bac6 <psa_generate_random+0x36>
   1bace:	bf00      	nop
   1bad0:	40000100 	.word	0x40000100

0001bad4 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1bad4:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1bad6:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1bada:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1bade:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1bae0:	d20d      	bcs.n	1bafe <psa_call+0x2a>
        (type < INT16_MIN) ||
   1bae2:	ea43 0504 	orr.w	r5, r3, r4
   1bae6:	2dff      	cmp	r5, #255	; 0xff
   1bae8:	d809      	bhi.n	1bafe <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1baea:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1baee:	4613      	mov	r3, r2
   1baf0:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1baf4:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1baf6:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1baf8:	4803      	ldr	r0, [pc, #12]	; (1bb08 <psa_call+0x34>)
   1bafa:	f7ff bf97 	b.w	1ba2c <tfm_ns_interface_dispatch>
}
   1bafe:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1bb02:	bc30      	pop	{r4, r5}
   1bb04:	4770      	bx	lr
   1bb06:	bf00      	nop
   1bb08:	00007c21 	.word	0x00007c21

0001bb0c <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1bb0c:	2300      	movs	r3, #0
{
   1bb0e:	b507      	push	{r0, r1, r2, lr}
   1bb10:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1bb12:	9300      	str	r3, [sp, #0]
   1bb14:	4601      	mov	r1, r0
   1bb16:	4803      	ldr	r0, [pc, #12]	; (1bb24 <psa_connect+0x18>)
   1bb18:	f7ff ff88 	bl	1ba2c <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1bb1c:	b003      	add	sp, #12
   1bb1e:	f85d fb04 	ldr.w	pc, [sp], #4
   1bb22:	bf00      	nop
   1bb24:	00007c19 	.word	0x00007c19

0001bb28 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1bb28:	2300      	movs	r3, #0
{
   1bb2a:	b507      	push	{r0, r1, r2, lr}
   1bb2c:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1bb2e:	461a      	mov	r2, r3
   1bb30:	9300      	str	r3, [sp, #0]
   1bb32:	4803      	ldr	r0, [pc, #12]	; (1bb40 <psa_close+0x18>)
   1bb34:	f7ff ff7a 	bl	1ba2c <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1bb38:	b003      	add	sp, #12
   1bb3a:	f85d fb04 	ldr.w	pc, [sp], #4
   1bb3e:	bf00      	nop
   1bb40:	00007c11 	.word	0x00007c11

0001bb44 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1bb44:	4b04      	ldr	r3, [pc, #16]	; (1bb58 <SystemCoreClockUpdate+0x14>)
   1bb46:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1bb4a:	4b04      	ldr	r3, [pc, #16]	; (1bb5c <SystemCoreClockUpdate+0x18>)
   1bb4c:	f002 0203 	and.w	r2, r2, #3
   1bb50:	40d3      	lsrs	r3, r2
   1bb52:	4a03      	ldr	r2, [pc, #12]	; (1bb60 <SystemCoreClockUpdate+0x1c>)
   1bb54:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1bb56:	4770      	bx	lr
   1bb58:	40005000 	.word	0x40005000
   1bb5c:	07a12000 	.word	0x07a12000
   1bb60:	20008688 	.word	0x20008688

0001bb64 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1bb64:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1bb66:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1bb68:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1bb6a:	fab2 f382 	clz	r3, r2
   1bb6e:	f1c3 031f 	rsb	r3, r3, #31
   1bb72:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1bb74:	fa05 f403 	lsl.w	r4, r5, r3
   1bb78:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bb7c:	e8d0 6fef 	ldaex	r6, [r0]
   1bb80:	4296      	cmp	r6, r2
   1bb82:	d104      	bne.n	1bb8e <nrfx_flag32_alloc+0x2a>
   1bb84:	e8c0 4fec 	stlex	ip, r4, [r0]
   1bb88:	f1bc 0f00 	cmp.w	ip, #0
   1bb8c:	d1f6      	bne.n	1bb7c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1bb8e:	d1eb      	bne.n	1bb68 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1bb90:	4801      	ldr	r0, [pc, #4]	; (1bb98 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1bb92:	700b      	strb	r3, [r1, #0]
}
   1bb94:	bd70      	pop	{r4, r5, r6, pc}
   1bb96:	bf00      	nop
   1bb98:	0bad0000 	.word	0x0bad0000

0001bb9c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1bb9c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1bb9e:	6803      	ldr	r3, [r0, #0]
   1bba0:	40cb      	lsrs	r3, r1
   1bba2:	07db      	lsls	r3, r3, #31
   1bba4:	d410      	bmi.n	1bbc8 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1bba6:	2301      	movs	r3, #1
   1bba8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1bbaa:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1bbac:	ea43 0102 	orr.w	r1, r3, r2
   1bbb0:	e8d0 4fef 	ldaex	r4, [r0]
   1bbb4:	4294      	cmp	r4, r2
   1bbb6:	d104      	bne.n	1bbc2 <nrfx_flag32_free+0x26>
   1bbb8:	e8c0 1fec 	stlex	ip, r1, [r0]
   1bbbc:	f1bc 0f00 	cmp.w	ip, #0
   1bbc0:	d1f6      	bne.n	1bbb0 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1bbc2:	d1f2      	bne.n	1bbaa <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1bbc4:	4801      	ldr	r0, [pc, #4]	; (1bbcc <nrfx_flag32_free+0x30>)
}
   1bbc6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1bbc8:	4801      	ldr	r0, [pc, #4]	; (1bbd0 <nrfx_flag32_free+0x34>)
   1bbca:	e7fc      	b.n	1bbc6 <nrfx_flag32_free+0x2a>
   1bbcc:	0bad0000 	.word	0x0bad0000
   1bbd0:	0bad0004 	.word	0x0bad0004

0001bbd4 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1bbd4:	2200      	movs	r2, #0
{
   1bbd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bbd8:	4b62      	ldr	r3, [pc, #392]	; (1bd64 <clock_stop+0x190>)
    switch (domain)
   1bbda:	2803      	cmp	r0, #3
   1bbdc:	d838      	bhi.n	1bc50 <clock_stop+0x7c>
   1bbde:	e8df f000 	tbb	[pc, r0]
   1bbe2:	0d02      	.short	0x0d02
   1bbe4:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1bbe6:	2102      	movs	r1, #2
   1bbe8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bbec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1bbf0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bbf4:	2201      	movs	r2, #1
   1bbf6:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1bbf8:	2400      	movs	r4, #0
   1bbfa:	e009      	b.n	1bc10 <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1bbfc:	2101      	movs	r1, #1
   1bbfe:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bc02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1bc06:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1bc0a:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bc0e:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1bc10:	2301      	movs	r3, #1
   1bc12:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1bc16:	2803      	cmp	r0, #3
   1bc18:	f200 8093 	bhi.w	1bd42 <clock_stop+0x16e>
   1bc1c:	e8df f000 	tbb	[pc, r0]
   1bc20:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1bc24:	f44f 7100 	mov.w	r1, #512	; 0x200
   1bc28:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bc2c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1bc30:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bc34:	2201      	movs	r2, #1
   1bc36:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1bc38:	e7de      	b.n	1bbf8 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1bc3a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1bc3e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bc42:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1bc46:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bc4a:	2201      	movs	r2, #1
   1bc4c:	61da      	str	r2, [r3, #28]
   1bc4e:	e7d3      	b.n	1bbf8 <clock_stop+0x24>
            NRFX_ASSERT(0);
   1bc50:	4945      	ldr	r1, [pc, #276]	; (1bd68 <clock_stop+0x194>)
   1bc52:	4846      	ldr	r0, [pc, #280]	; (1bd6c <clock_stop+0x198>)
   1bc54:	23d8      	movs	r3, #216	; 0xd8
   1bc56:	4a46      	ldr	r2, [pc, #280]	; (1bd70 <clock_stop+0x19c>)
   1bc58:	f008 f9e3 	bl	24022 <assert_print>
   1bc5c:	21d8      	movs	r1, #216	; 0xd8
   1bc5e:	4844      	ldr	r0, [pc, #272]	; (1bd70 <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1bc60:	f008 f9d8 	bl	24014 <assert_post_action>
    switch (domain)
   1bc64:	f242 7510 	movw	r5, #10000	; 0x2710
   1bc68:	4e3e      	ldr	r6, [pc, #248]	; (1bd64 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1bc6a:	b194      	cbz	r4, 1bc92 <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1bc6c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1bc70:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1bc74:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1bc76:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1bc7a:	03d9      	lsls	r1, r3, #15
   1bc7c:	d507      	bpl.n	1bc8e <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1bc7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1bc82:	2801      	cmp	r0, #1
   1bc84:	d103      	bne.n	1bc8e <clock_stop+0xba>
   1bc86:	f00b fd9b 	bl	277c0 <nrfx_busy_wait>
   1bc8a:	3d01      	subs	r5, #1
   1bc8c:	d1ed      	bne.n	1bc6a <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1bc8e:	b002      	add	sp, #8
   1bc90:	bd70      	pop	{r4, r5, r6, pc}
   1bc92:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1bc96:	03da      	lsls	r2, r3, #15
   1bc98:	d5f9      	bpl.n	1bc8e <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1bc9a:	2001      	movs	r0, #1
   1bc9c:	f00b fd90 	bl	277c0 <nrfx_busy_wait>
   1bca0:	3d01      	subs	r5, #1
   1bca2:	d1f6      	bne.n	1bc92 <clock_stop+0xbe>
   1bca4:	e7f3      	b.n	1bc8e <clock_stop+0xba>
    switch (domain)
   1bca6:	f242 7510 	movw	r5, #10000	; 0x2710
   1bcaa:	4e2e      	ldr	r6, [pc, #184]	; (1bd64 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1bcac:	b18c      	cbz	r4, 1bcd2 <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bcae:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1bcb2:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1bcb6:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bcb8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1bcbc:	03db      	lsls	r3, r3, #15
   1bcbe:	d5e6      	bpl.n	1bc8e <clock_stop+0xba>
   1bcc0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1bcc4:	2801      	cmp	r0, #1
   1bcc6:	d1e2      	bne.n	1bc8e <clock_stop+0xba>
   1bcc8:	f00b fd7a 	bl	277c0 <nrfx_busy_wait>
   1bccc:	3d01      	subs	r5, #1
   1bcce:	d1ed      	bne.n	1bcac <clock_stop+0xd8>
   1bcd0:	e7dd      	b.n	1bc8e <clock_stop+0xba>
   1bcd2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1bcd6:	03d8      	lsls	r0, r3, #15
   1bcd8:	d5d9      	bpl.n	1bc8e <clock_stop+0xba>
   1bcda:	2001      	movs	r0, #1
   1bcdc:	f00b fd70 	bl	277c0 <nrfx_busy_wait>
   1bce0:	3d01      	subs	r5, #1
   1bce2:	d1f6      	bne.n	1bcd2 <clock_stop+0xfe>
   1bce4:	e7d3      	b.n	1bc8e <clock_stop+0xba>
    switch (domain)
   1bce6:	f242 7510 	movw	r5, #10000	; 0x2710
   1bcea:	4e1e      	ldr	r6, [pc, #120]	; (1bd64 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1bcec:	b18c      	cbz	r4, 1bd12 <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1bcee:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1bcf2:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1bcf6:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1bcf8:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1bcfc:	03d9      	lsls	r1, r3, #15
   1bcfe:	d5c6      	bpl.n	1bc8e <clock_stop+0xba>
   1bd00:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1bd04:	2801      	cmp	r0, #1
   1bd06:	d1c2      	bne.n	1bc8e <clock_stop+0xba>
   1bd08:	f00b fd5a 	bl	277c0 <nrfx_busy_wait>
   1bd0c:	3d01      	subs	r5, #1
   1bd0e:	d1ed      	bne.n	1bcec <clock_stop+0x118>
   1bd10:	e7bd      	b.n	1bc8e <clock_stop+0xba>
   1bd12:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1bd16:	03da      	lsls	r2, r3, #15
   1bd18:	d5b9      	bpl.n	1bc8e <clock_stop+0xba>
   1bd1a:	2001      	movs	r0, #1
   1bd1c:	f00b fd50 	bl	277c0 <nrfx_busy_wait>
   1bd20:	3d01      	subs	r5, #1
   1bd22:	d1f6      	bne.n	1bd12 <clock_stop+0x13e>
   1bd24:	e7b3      	b.n	1bc8e <clock_stop+0xba>
    switch (domain)
   1bd26:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1bd2a:	4e0e      	ldr	r6, [pc, #56]	; (1bd64 <clock_stop+0x190>)
   1bd2c:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1bd30:	03db      	lsls	r3, r3, #15
   1bd32:	d5ac      	bpl.n	1bc8e <clock_stop+0xba>
   1bd34:	b984      	cbnz	r4, 1bd58 <clock_stop+0x184>
   1bd36:	2001      	movs	r0, #1
   1bd38:	f00b fd42 	bl	277c0 <nrfx_busy_wait>
   1bd3c:	3d01      	subs	r5, #1
   1bd3e:	d1f5      	bne.n	1bd2c <clock_stop+0x158>
   1bd40:	e7a5      	b.n	1bc8e <clock_stop+0xba>
            NRFX_ASSERT(0);
   1bd42:	4909      	ldr	r1, [pc, #36]	; (1bd68 <clock_stop+0x194>)
   1bd44:	4809      	ldr	r0, [pc, #36]	; (1bd6c <clock_stop+0x198>)
   1bd46:	f240 3347 	movw	r3, #839	; 0x347
   1bd4a:	4a0a      	ldr	r2, [pc, #40]	; (1bd74 <clock_stop+0x1a0>)
   1bd4c:	f008 f969 	bl	24022 <assert_print>
   1bd50:	f240 3147 	movw	r1, #839	; 0x347
   1bd54:	4807      	ldr	r0, [pc, #28]	; (1bd74 <clock_stop+0x1a0>)
   1bd56:	e783      	b.n	1bc60 <clock_stop+0x8c>
   1bd58:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1bd5c:	2801      	cmp	r0, #1
   1bd5e:	d0eb      	beq.n	1bd38 <clock_stop+0x164>
   1bd60:	e795      	b.n	1bc8e <clock_stop+0xba>
   1bd62:	bf00      	nop
   1bd64:	40005000 	.word	0x40005000
   1bd68:	0002fb7c 	.word	0x0002fb7c
   1bd6c:	0002a669 	.word	0x0002a669
   1bd70:	0002ead7 	.word	0x0002ead7
   1bd74:	0002eb14 	.word	0x0002eb14

0001bd78 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1bd78:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1bd7a:	b958      	cbnz	r0, 1bd94 <nrfx_clock_init+0x1c>
   1bd7c:	490a      	ldr	r1, [pc, #40]	; (1bda8 <nrfx_clock_init+0x30>)
   1bd7e:	480b      	ldr	r0, [pc, #44]	; (1bdac <nrfx_clock_init+0x34>)
   1bd80:	f240 1315 	movw	r3, #277	; 0x115
   1bd84:	4a0a      	ldr	r2, [pc, #40]	; (1bdb0 <nrfx_clock_init+0x38>)
   1bd86:	f008 f94c 	bl	24022 <assert_print>
   1bd8a:	f240 1115 	movw	r1, #277	; 0x115
   1bd8e:	4808      	ldr	r0, [pc, #32]	; (1bdb0 <nrfx_clock_init+0x38>)
   1bd90:	f008 f940 	bl	24014 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1bd94:	4b07      	ldr	r3, [pc, #28]	; (1bdb4 <nrfx_clock_init+0x3c>)
   1bd96:	791a      	ldrb	r2, [r3, #4]
   1bd98:	b922      	cbnz	r2, 1bda4 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1bd9a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1bd9c:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1bd9e:	4806      	ldr	r0, [pc, #24]	; (1bdb8 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1bda0:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1bda2:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1bda4:	4805      	ldr	r0, [pc, #20]	; (1bdbc <nrfx_clock_init+0x44>)
    return err_code;
   1bda6:	e7fc      	b.n	1bda2 <nrfx_clock_init+0x2a>
   1bda8:	0002eb48 	.word	0x0002eb48
   1bdac:	0002a669 	.word	0x0002a669
   1bdb0:	0002ead7 	.word	0x0002ead7
   1bdb4:	200212f4 	.word	0x200212f4
   1bdb8:	0bad0000 	.word	0x0bad0000
   1bdbc:	0bad000c 	.word	0x0bad000c

0001bdc0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1bdc0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1bdc2:	4b0f      	ldr	r3, [pc, #60]	; (1be00 <nrfx_clock_enable+0x40>)
   1bdc4:	791b      	ldrb	r3, [r3, #4]
   1bdc6:	b95b      	cbnz	r3, 1bde0 <nrfx_clock_enable+0x20>
   1bdc8:	490e      	ldr	r1, [pc, #56]	; (1be04 <nrfx_clock_enable+0x44>)
   1bdca:	480f      	ldr	r0, [pc, #60]	; (1be08 <nrfx_clock_enable+0x48>)
   1bdcc:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1bdd0:	4a0e      	ldr	r2, [pc, #56]	; (1be0c <nrfx_clock_enable+0x4c>)
   1bdd2:	f008 f926 	bl	24022 <assert_print>
   1bdd6:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1bdda:	480c      	ldr	r0, [pc, #48]	; (1be0c <nrfx_clock_enable+0x4c>)
   1bddc:	f008 f91a 	bl	24014 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1bde0:	2005      	movs	r0, #5
   1bde2:	f7f3 fb39 	bl	f458 <arch_irq_is_enabled>
   1bde6:	b910      	cbnz	r0, 1bdee <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1bde8:	2005      	movs	r0, #5
   1bdea:	f7f3 fb13 	bl	f414 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1bdee:	2201      	movs	r2, #1
   1bdf0:	4b07      	ldr	r3, [pc, #28]	; (1be10 <nrfx_clock_enable+0x50>)
   1bdf2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1bdf6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1bdfa:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1bdfe:	bd08      	pop	{r3, pc}
   1be00:	200212f4 	.word	0x200212f4
   1be04:	0002eb56 	.word	0x0002eb56
   1be08:	0002a669 	.word	0x0002a669
   1be0c:	0002ead7 	.word	0x0002ead7
   1be10:	40005000 	.word	0x40005000

0001be14 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1be14:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1be16:	4b38      	ldr	r3, [pc, #224]	; (1bef8 <nrfx_clock_start+0xe4>)
   1be18:	791b      	ldrb	r3, [r3, #4]
   1be1a:	b95b      	cbnz	r3, 1be34 <nrfx_clock_start+0x20>
   1be1c:	4937      	ldr	r1, [pc, #220]	; (1befc <nrfx_clock_start+0xe8>)
   1be1e:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1be22:	4a37      	ldr	r2, [pc, #220]	; (1bf00 <nrfx_clock_start+0xec>)
   1be24:	4837      	ldr	r0, [pc, #220]	; (1bf04 <nrfx_clock_start+0xf0>)
   1be26:	f008 f8fc 	bl	24022 <assert_print>
   1be2a:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1be2e:	4834      	ldr	r0, [pc, #208]	; (1bf00 <nrfx_clock_start+0xec>)
   1be30:	f008 f8f0 	bl	24014 <assert_post_action>
    switch (domain)
   1be34:	4b34      	ldr	r3, [pc, #208]	; (1bf08 <nrfx_clock_start+0xf4>)
   1be36:	2803      	cmp	r0, #3
   1be38:	d853      	bhi.n	1bee2 <nrfx_clock_start+0xce>
   1be3a:	e8df f000 	tbb	[pc, r0]
   1be3e:	3002      	.short	0x3002
   1be40:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1be42:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1be46:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1be4a:	03c9      	lsls	r1, r1, #15
   1be4c:	d511      	bpl.n	1be72 <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1be4e:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1be52:	2b02      	cmp	r3, #2
   1be54:	d11c      	bne.n	1be90 <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1be56:	4a2c      	ldr	r2, [pc, #176]	; (1bf08 <nrfx_clock_start+0xf4>)
   1be58:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1be5c:	2300      	movs	r3, #0
   1be5e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1be62:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1be66:	2302      	movs	r3, #2
   1be68:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1be6c:	2301      	movs	r3, #1
   1be6e:	6093      	str	r3, [r2, #8]
}
   1be70:	e00d      	b.n	1be8e <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1be72:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1be76:	07d2      	lsls	r2, r2, #31
   1be78:	d50f      	bpl.n	1be9a <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1be7a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1be7e:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1be82:	3a01      	subs	r2, #1
   1be84:	2a01      	cmp	r2, #1
   1be86:	d805      	bhi.n	1be94 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1be88:	2202      	movs	r2, #2
   1be8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1be8e:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1be90:	2b01      	cmp	r3, #1
   1be92:	d002      	beq.n	1be9a <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1be94:	2000      	movs	r0, #0
   1be96:	f7ff fe9d 	bl	1bbd4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1be9a:	2301      	movs	r3, #1
   1be9c:	e7db      	b.n	1be56 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1be9e:	2200      	movs	r2, #0
   1bea0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1bea4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1bea8:	2201      	movs	r2, #1
   1beaa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1beae:	601a      	str	r2, [r3, #0]
}
   1beb0:	e7ed      	b.n	1be8e <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1beb2:	2200      	movs	r2, #0
   1beb4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1beb8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1bebc:	f44f 7200 	mov.w	r2, #512	; 0x200
   1bec0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bec4:	2201      	movs	r2, #1
   1bec6:	621a      	str	r2, [r3, #32]
}
   1bec8:	e7e1      	b.n	1be8e <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1beca:	2200      	movs	r2, #0
   1becc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1bed0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1bed4:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bed8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bedc:	2201      	movs	r2, #1
   1bede:	619a      	str	r2, [r3, #24]
}
   1bee0:	e7d5      	b.n	1be8e <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1bee2:	490a      	ldr	r1, [pc, #40]	; (1bf0c <nrfx_clock_start+0xf8>)
   1bee4:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1bee8:	4a05      	ldr	r2, [pc, #20]	; (1bf00 <nrfx_clock_start+0xec>)
   1beea:	4806      	ldr	r0, [pc, #24]	; (1bf04 <nrfx_clock_start+0xf0>)
   1beec:	f008 f899 	bl	24022 <assert_print>
   1bef0:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1bef4:	e79b      	b.n	1be2e <nrfx_clock_start+0x1a>
   1bef6:	bf00      	nop
   1bef8:	200212f4 	.word	0x200212f4
   1befc:	0002eb56 	.word	0x0002eb56
   1bf00:	0002ead7 	.word	0x0002ead7
   1bf04:	0002a669 	.word	0x0002a669
   1bf08:	40005000 	.word	0x40005000
   1bf0c:	0002fb7c 	.word	0x0002fb7c

0001bf10 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1bf10:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1bf12:	4b09      	ldr	r3, [pc, #36]	; (1bf38 <nrfx_clock_stop+0x28>)
   1bf14:	791b      	ldrb	r3, [r3, #4]
   1bf16:	b95b      	cbnz	r3, 1bf30 <nrfx_clock_stop+0x20>
   1bf18:	4908      	ldr	r1, [pc, #32]	; (1bf3c <nrfx_clock_stop+0x2c>)
   1bf1a:	4809      	ldr	r0, [pc, #36]	; (1bf40 <nrfx_clock_stop+0x30>)
   1bf1c:	f240 13ad 	movw	r3, #429	; 0x1ad
   1bf20:	4a08      	ldr	r2, [pc, #32]	; (1bf44 <nrfx_clock_stop+0x34>)
   1bf22:	f008 f87e 	bl	24022 <assert_print>
   1bf26:	f240 11ad 	movw	r1, #429	; 0x1ad
   1bf2a:	4806      	ldr	r0, [pc, #24]	; (1bf44 <nrfx_clock_stop+0x34>)
   1bf2c:	f008 f872 	bl	24014 <assert_post_action>
    clock_stop(domain);
}
   1bf30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1bf34:	f7ff be4e 	b.w	1bbd4 <clock_stop>
   1bf38:	200212f4 	.word	0x200212f4
   1bf3c:	0002eb56 	.word	0x0002eb56
   1bf40:	0002a669 	.word	0x0002a669
   1bf44:	0002ead7 	.word	0x0002ead7

0001bf48 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1bf48:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1bf4a:	4b28      	ldr	r3, [pc, #160]	; (1bfec <nrfx_power_clock_irq_handler+0xa4>)
   1bf4c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1bf50:	b152      	cbz	r2, 1bf68 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bf52:	2000      	movs	r0, #0
   1bf54:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1bf58:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1bf5c:	2201      	movs	r2, #1
   1bf5e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1bf62:	4b23      	ldr	r3, [pc, #140]	; (1bff0 <nrfx_power_clock_irq_handler+0xa8>)
   1bf64:	681b      	ldr	r3, [r3, #0]
   1bf66:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1bf68:	4b20      	ldr	r3, [pc, #128]	; (1bfec <nrfx_power_clock_irq_handler+0xa4>)
   1bf6a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1bf6e:	b18a      	cbz	r2, 1bf94 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bf70:	2200      	movs	r2, #0
   1bf72:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1bf76:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1bf7a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1bf7e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1bf82:	f002 0203 	and.w	r2, r2, #3
   1bf86:	2a01      	cmp	r2, #1
   1bf88:	f04f 0102 	mov.w	r1, #2
   1bf8c:	d126      	bne.n	1bfdc <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1bf8e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bf92:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1bf94:	4b15      	ldr	r3, [pc, #84]	; (1bfec <nrfx_power_clock_irq_handler+0xa4>)
   1bf96:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1bf9a:	b162      	cbz	r2, 1bfb6 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bf9c:	2200      	movs	r2, #0
   1bf9e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1bfa2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1bfa6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bfaa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1bfae:	4b10      	ldr	r3, [pc, #64]	; (1bff0 <nrfx_power_clock_irq_handler+0xa8>)
   1bfb0:	2004      	movs	r0, #4
   1bfb2:	681b      	ldr	r3, [r3, #0]
   1bfb4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1bfb6:	4b0d      	ldr	r3, [pc, #52]	; (1bfec <nrfx_power_clock_irq_handler+0xa4>)
   1bfb8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1bfbc:	b1aa      	cbz	r2, 1bfea <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bfbe:	2200      	movs	r2, #0
   1bfc0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1bfc4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1bfc8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1bfcc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1bfd0:	4b07      	ldr	r3, [pc, #28]	; (1bff0 <nrfx_power_clock_irq_handler+0xa8>)
   1bfd2:	2005      	movs	r0, #5
    }
#endif
}
   1bfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1bfd8:	681b      	ldr	r3, [r3, #0]
   1bfda:	4718      	bx	r3
   1bfdc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1bfe0:	4b03      	ldr	r3, [pc, #12]	; (1bff0 <nrfx_power_clock_irq_handler+0xa8>)
   1bfe2:	2001      	movs	r0, #1
   1bfe4:	681b      	ldr	r3, [r3, #0]
   1bfe6:	4798      	blx	r3
   1bfe8:	e7d4      	b.n	1bf94 <nrfx_power_clock_irq_handler+0x4c>
}
   1bfea:	bd10      	pop	{r4, pc}
   1bfec:	40005000 	.word	0x40005000
   1bff0:	200212f4 	.word	0x200212f4

0001bff4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1bff4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1bff6:	4801      	ldr	r0, [pc, #4]	; (1bffc <nrfx_dppi_channel_alloc+0x8>)
   1bff8:	f7ff bdb4 	b.w	1bb64 <nrfx_flag32_alloc>
   1bffc:	2000868c 	.word	0x2000868c

0001c000 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1c000:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1c002:	4a04      	ldr	r2, [pc, #16]	; (1c014 <nrfx_dppi_channel_free+0x14>)
   1c004:	4083      	lsls	r3, r0
{
   1c006:	4601      	mov	r1, r0
   1c008:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1c00c:	4802      	ldr	r0, [pc, #8]	; (1c018 <nrfx_dppi_channel_free+0x18>)
   1c00e:	f7ff bdc5 	b.w	1bb9c <nrfx_flag32_free>
   1c012:	bf00      	nop
   1c014:	40017000 	.word	0x40017000
   1c018:	2000868c 	.word	0x2000868c

0001c01c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1c01c:	4b03      	ldr	r3, [pc, #12]	; (1c02c <pin_in_use_by_te+0x10>)
   1c01e:	3008      	adds	r0, #8
   1c020:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1c024:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1c028:	4770      	bx	lr
   1c02a:	bf00      	nop
   1c02c:	20008690 	.word	0x20008690

0001c030 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1c030:	4b04      	ldr	r3, [pc, #16]	; (1c044 <pin_has_trigger+0x14>)
   1c032:	3008      	adds	r0, #8
   1c034:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1c038:	f010 001c 	ands.w	r0, r0, #28
   1c03c:	bf18      	it	ne
   1c03e:	2001      	movne	r0, #1
   1c040:	4770      	bx	lr
   1c042:	bf00      	nop
   1c044:	20008690 	.word	0x20008690

0001c048 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1c048:	4b03      	ldr	r3, [pc, #12]	; (1c058 <pin_is_output+0x10>)
   1c04a:	3008      	adds	r0, #8
   1c04c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1c050:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1c054:	4770      	bx	lr
   1c056:	bf00      	nop
   1c058:	20008690 	.word	0x20008690

0001c05c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1c05c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c05e:	4c0d      	ldr	r4, [pc, #52]	; (1c094 <call_handler+0x38>)
   1c060:	f100 0308 	add.w	r3, r0, #8
   1c064:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1c068:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c06a:	05da      	lsls	r2, r3, #23
{
   1c06c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c06e:	d507      	bpl.n	1c080 <call_handler+0x24>
   1c070:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1c074:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1c078:	6852      	ldr	r2, [r2, #4]
   1c07a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1c07e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1c080:	68a3      	ldr	r3, [r4, #8]
   1c082:	b12b      	cbz	r3, 1c090 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1c084:	4631      	mov	r1, r6
   1c086:	4628      	mov	r0, r5
   1c088:	68e2      	ldr	r2, [r4, #12]
    }
}
   1c08a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1c08e:	4718      	bx	r3
}
   1c090:	bd70      	pop	{r4, r5, r6, pc}
   1c092:	bf00      	nop
   1c094:	20008690 	.word	0x20008690

0001c098 <release_handler>:
{
   1c098:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1c09a:	4a18      	ldr	r2, [pc, #96]	; (1c0fc <release_handler+0x64>)
   1c09c:	3008      	adds	r0, #8
   1c09e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1c0a2:	05d9      	lsls	r1, r3, #23
   1c0a4:	d51d      	bpl.n	1c0e2 <release_handler+0x4a>
   1c0a6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1c0aa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1c0ae:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1c0b2:	2000      	movs	r0, #0
   1c0b4:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1c0b8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1c0bc:	f413 7f80 	tst.w	r3, #256	; 0x100
   1c0c0:	d003      	beq.n	1c0ca <release_handler+0x32>
   1c0c2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1c0c6:	4299      	cmp	r1, r3
   1c0c8:	d00b      	beq.n	1c0e2 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1c0ca:	3001      	adds	r0, #1
   1c0cc:	2830      	cmp	r0, #48	; 0x30
   1c0ce:	d1f3      	bne.n	1c0b8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1c0d0:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1c0d2:	480b      	ldr	r0, [pc, #44]	; (1c100 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1c0d4:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1c0d8:	f7ff fd60 	bl	1bb9c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1c0dc:	4b09      	ldr	r3, [pc, #36]	; (1c104 <release_handler+0x6c>)
   1c0de:	4298      	cmp	r0, r3
   1c0e0:	d100      	bne.n	1c0e4 <release_handler+0x4c>
}
   1c0e2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1c0e4:	4908      	ldr	r1, [pc, #32]	; (1c108 <release_handler+0x70>)
   1c0e6:	4809      	ldr	r0, [pc, #36]	; (1c10c <release_handler+0x74>)
   1c0e8:	f44f 7399 	mov.w	r3, #306	; 0x132
   1c0ec:	4a08      	ldr	r2, [pc, #32]	; (1c110 <release_handler+0x78>)
   1c0ee:	f007 ff98 	bl	24022 <assert_print>
   1c0f2:	f44f 7199 	mov.w	r1, #306	; 0x132
   1c0f6:	4806      	ldr	r0, [pc, #24]	; (1c110 <release_handler+0x78>)
   1c0f8:	f007 ff8c 	bl	24014 <assert_post_action>
   1c0fc:	20008690 	.word	0x20008690
   1c100:	20008704 	.word	0x20008704
   1c104:	0bad0000 	.word	0x0bad0000
   1c108:	0002b4bd 	.word	0x0002b4bd
   1c10c:	0002a669 	.word	0x0002a669
   1c110:	0002eb89 	.word	0x0002eb89

0001c114 <pin_handler_trigger_uninit>:
{
   1c114:	b538      	push	{r3, r4, r5, lr}
   1c116:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1c118:	f7ff ff80 	bl	1c01c <pin_in_use_by_te>
   1c11c:	4c0b      	ldr	r4, [pc, #44]	; (1c14c <pin_handler_trigger_uninit+0x38>)
   1c11e:	f102 0508 	add.w	r5, r2, #8
   1c122:	b160      	cbz	r0, 1c13e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1c124:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c126:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1c12a:	0b5b      	lsrs	r3, r3, #13
   1c12c:	009b      	lsls	r3, r3, #2
   1c12e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c132:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1c136:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1c13a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1c13e:	4610      	mov	r0, r2
   1c140:	f7ff ffaa 	bl	1c098 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1c144:	2300      	movs	r3, #0
   1c146:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1c14a:	bd38      	pop	{r3, r4, r5, pc}
   1c14c:	20008690 	.word	0x20008690

0001c150 <nrf_gpio_pin_port_decode>:
{
   1c150:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c152:	6802      	ldr	r2, [r0, #0]
{
   1c154:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c156:	4610      	mov	r0, r2
   1c158:	f00b fb34 	bl	277c4 <nrf_gpio_pin_present_check>
   1c15c:	b958      	cbnz	r0, 1c176 <nrf_gpio_pin_port_decode+0x26>
   1c15e:	4910      	ldr	r1, [pc, #64]	; (1c1a0 <nrf_gpio_pin_port_decode+0x50>)
   1c160:	f240 2347 	movw	r3, #583	; 0x247
   1c164:	4a0f      	ldr	r2, [pc, #60]	; (1c1a4 <nrf_gpio_pin_port_decode+0x54>)
   1c166:	4810      	ldr	r0, [pc, #64]	; (1c1a8 <nrf_gpio_pin_port_decode+0x58>)
   1c168:	f007 ff5b 	bl	24022 <assert_print>
   1c16c:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1c170:	480c      	ldr	r0, [pc, #48]	; (1c1a4 <nrf_gpio_pin_port_decode+0x54>)
   1c172:	f007 ff4f 	bl	24014 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1c176:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1c17a:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1c17c:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1c17e:	d00b      	beq.n	1c198 <nrf_gpio_pin_port_decode+0x48>
   1c180:	2a01      	cmp	r2, #1
   1c182:	d00b      	beq.n	1c19c <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1c184:	4909      	ldr	r1, [pc, #36]	; (1c1ac <nrf_gpio_pin_port_decode+0x5c>)
   1c186:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1c18a:	4a06      	ldr	r2, [pc, #24]	; (1c1a4 <nrf_gpio_pin_port_decode+0x54>)
   1c18c:	4806      	ldr	r0, [pc, #24]	; (1c1a8 <nrf_gpio_pin_port_decode+0x58>)
   1c18e:	f007 ff48 	bl	24022 <assert_print>
   1c192:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1c196:	e7eb      	b.n	1c170 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1c198:	4805      	ldr	r0, [pc, #20]	; (1c1b0 <nrf_gpio_pin_port_decode+0x60>)
}
   1c19a:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1c19c:	4805      	ldr	r0, [pc, #20]	; (1c1b4 <nrf_gpio_pin_port_decode+0x64>)
   1c19e:	e7fc      	b.n	1c19a <nrf_gpio_pin_port_decode+0x4a>
   1c1a0:	0002e276 	.word	0x0002e276
   1c1a4:	0002e243 	.word	0x0002e243
   1c1a8:	0002a669 	.word	0x0002a669
   1c1ac:	0002fb7c 	.word	0x0002fb7c
   1c1b0:	40842500 	.word	0x40842500
   1c1b4:	40842800 	.word	0x40842800

0001c1b8 <nrfx_gpiote_input_configure>:
{
   1c1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1ba:	4604      	mov	r4, r0
   1c1bc:	4617      	mov	r7, r2
   1c1be:	461d      	mov	r5, r3
   1c1c0:	b085      	sub	sp, #20
    if (p_input_config)
   1c1c2:	b1d9      	cbz	r1, 1c1fc <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1c1c4:	f00b fb0f 	bl	277e6 <pin_is_task_output>
   1c1c8:	bb00      	cbnz	r0, 1c20c <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1c1ca:	460b      	mov	r3, r1
   1c1cc:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1c1d0:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1c1d4:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1c1d8:	f10d 020f 	add.w	r2, sp, #15
   1c1dc:	f10d 010e 	add.w	r1, sp, #14
   1c1e0:	4620      	mov	r0, r4
   1c1e2:	f00b fb0b 	bl	277fc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1c1e6:	4a44      	ldr	r2, [pc, #272]	; (1c2f8 <nrfx_gpiote_input_configure+0x140>)
   1c1e8:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1c1ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1c1f0:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1c1f4:	f043 0301 	orr.w	r3, r3, #1
   1c1f8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1c1fc:	b36f      	cbz	r7, 1c25a <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1c1fe:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1c200:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1c202:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1c204:	f7ff ff20 	bl	1c048 <pin_is_output>
   1c208:	b110      	cbz	r0, 1c210 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1c20a:	b1da      	cbz	r2, 1c244 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1c20c:	483b      	ldr	r0, [pc, #236]	; (1c2fc <nrfx_gpiote_input_configure+0x144>)
   1c20e:	e026      	b.n	1c25e <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1c210:	4839      	ldr	r0, [pc, #228]	; (1c2f8 <nrfx_gpiote_input_configure+0x140>)
   1c212:	f104 0c08 	add.w	ip, r4, #8
   1c216:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1c21a:	f021 0120 	bic.w	r1, r1, #32
   1c21e:	04c9      	lsls	r1, r1, #19
   1c220:	0cc9      	lsrs	r1, r1, #19
   1c222:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1c226:	b16a      	cbz	r2, 1c244 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1c228:	2e03      	cmp	r6, #3
   1c22a:	d8ef      	bhi.n	1c20c <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1c22c:	687b      	ldr	r3, [r7, #4]
   1c22e:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1c230:	00ba      	lsls	r2, r7, #2
   1c232:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1c236:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1c23a:	b996      	cbnz	r6, 1c262 <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1c23c:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1c240:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1c244:	4a2c      	ldr	r2, [pc, #176]	; (1c2f8 <nrfx_gpiote_input_configure+0x140>)
   1c246:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1c24a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1c24e:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1c252:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1c256:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1c25a:	bb15      	cbnz	r5, 1c2a2 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1c25c:	4828      	ldr	r0, [pc, #160]	; (1c300 <nrfx_gpiote_input_configure+0x148>)
}
   1c25e:	b005      	add	sp, #20
   1c260:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1c262:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1c266:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1c26a:	f023 0303 	bic.w	r3, r3, #3
   1c26e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1c272:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1c276:	f041 0120 	orr.w	r1, r1, #32
   1c27a:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1c27e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1c282:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c286:	0223      	lsls	r3, r4, #8
   1c288:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1c28c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1c290:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1c294:	ea43 030e 	orr.w	r3, r3, lr
   1c298:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1c29c:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1c2a0:	e7d0      	b.n	1c244 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1c2a2:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1c2a4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1c2a8:	f7ff fef6 	bl	1c098 <release_handler>
    if (!handler)
   1c2ac:	2e00      	cmp	r6, #0
   1c2ae:	d0d5      	beq.n	1c25c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1c2b0:	4d11      	ldr	r5, [pc, #68]	; (1c2f8 <nrfx_gpiote_input_configure+0x140>)
   1c2b2:	e9d5 2300 	ldrd	r2, r3, [r5]
   1c2b6:	4296      	cmp	r6, r2
   1c2b8:	d101      	bne.n	1c2be <nrfx_gpiote_input_configure+0x106>
   1c2ba:	429f      	cmp	r7, r3
   1c2bc:	d019      	beq.n	1c2f2 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1c2be:	4811      	ldr	r0, [pc, #68]	; (1c304 <nrfx_gpiote_input_configure+0x14c>)
   1c2c0:	f10d 010f 	add.w	r1, sp, #15
   1c2c4:	f7ff fc4e 	bl	1bb64 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1c2c8:	4b0d      	ldr	r3, [pc, #52]	; (1c300 <nrfx_gpiote_input_configure+0x148>)
   1c2ca:	4298      	cmp	r0, r3
   1c2cc:	d1c7      	bne.n	1c25e <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1c2ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1c2d2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1c2d6:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1c2da:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1c2dc:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1c2e0:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1c2e4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1c2e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1c2ec:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1c2f0:	e7b4      	b.n	1c25c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1c2f2:	2200      	movs	r2, #0
   1c2f4:	e7ed      	b.n	1c2d2 <nrfx_gpiote_input_configure+0x11a>
   1c2f6:	bf00      	nop
   1c2f8:	20008690 	.word	0x20008690
   1c2fc:	0bad0004 	.word	0x0bad0004
   1c300:	0bad0000 	.word	0x0bad0000
   1c304:	20008704 	.word	0x20008704

0001c308 <nrfx_gpiote_output_configure>:
{
   1c308:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c30a:	4604      	mov	r4, r0
   1c30c:	4615      	mov	r5, r2
   1c30e:	b085      	sub	sp, #20
    if (p_config)
   1c310:	b321      	cbz	r1, 1c35c <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1c312:	f7ff fe99 	bl	1c048 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1c316:	b920      	cbnz	r0, 1c322 <nrfx_gpiote_output_configure+0x1a>
   1c318:	4620      	mov	r0, r4
   1c31a:	f7ff fe7f 	bl	1c01c <pin_in_use_by_te>
   1c31e:	2800      	cmp	r0, #0
   1c320:	d161      	bne.n	1c3e6 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1c322:	4620      	mov	r0, r4
   1c324:	f7ff fe84 	bl	1c030 <pin_has_trigger>
   1c328:	b110      	cbz	r0, 1c330 <nrfx_gpiote_output_configure+0x28>
   1c32a:	784b      	ldrb	r3, [r1, #1]
   1c32c:	2b01      	cmp	r3, #1
   1c32e:	d05a      	beq.n	1c3e6 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1c330:	2301      	movs	r3, #1
   1c332:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1c336:	2300      	movs	r3, #0
   1c338:	1c4a      	adds	r2, r1, #1
   1c33a:	e9cd 1300 	strd	r1, r3, [sp]
   1c33e:	4620      	mov	r0, r4
   1c340:	1c8b      	adds	r3, r1, #2
   1c342:	f10d 010f 	add.w	r1, sp, #15
   1c346:	f00b fa59 	bl	277fc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1c34a:	4a28      	ldr	r2, [pc, #160]	; (1c3ec <nrfx_gpiote_output_configure+0xe4>)
   1c34c:	f104 0108 	add.w	r1, r4, #8
   1c350:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1c354:	f043 0303 	orr.w	r3, r3, #3
   1c358:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1c35c:	b915      	cbnz	r5, 1c364 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1c35e:	4824      	ldr	r0, [pc, #144]	; (1c3f0 <nrfx_gpiote_output_configure+0xe8>)
}
   1c360:	b005      	add	sp, #20
   1c362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1c364:	4620      	mov	r0, r4
   1c366:	f7ff fe6f 	bl	1c048 <pin_is_output>
        if (pin_is_input(pin))
   1c36a:	2800      	cmp	r0, #0
   1c36c:	d03b      	beq.n	1c3e6 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1c36e:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1c372:	2300      	movs	r3, #0
   1c374:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1c376:	4e1d      	ldr	r6, [pc, #116]	; (1c3ec <nrfx_gpiote_output_configure+0xe4>)
   1c378:	f104 0708 	add.w	r7, r4, #8
   1c37c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1c380:	0089      	lsls	r1, r1, #2
   1c382:	f020 0020 	bic.w	r0, r0, #32
   1c386:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1c38a:	04c0      	lsls	r0, r0, #19
   1c38c:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1c390:	0cc0      	lsrs	r0, r0, #19
   1c392:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1c396:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1c39a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1c39e:	786a      	ldrb	r2, [r5, #1]
   1c3a0:	2a00      	cmp	r2, #0
   1c3a2:	d0dc      	beq.n	1c35e <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1c3a4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1c3a8:	78ad      	ldrb	r5, [r5, #2]
   1c3aa:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1c3ae:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1c3b2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c3b6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1c3ba:	0223      	lsls	r3, r4, #8
   1c3bc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1c3c0:	0412      	lsls	r2, r2, #16
   1c3c2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c3c6:	ea43 030e 	orr.w	r3, r3, lr
   1c3ca:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1c3cc:	052a      	lsls	r2, r5, #20
   1c3ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1c3d2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c3d6:	4313      	orrs	r3, r2
   1c3d8:	f040 0020 	orr.w	r0, r0, #32
   1c3dc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1c3e0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1c3e4:	e7bb      	b.n	1c35e <nrfx_gpiote_output_configure+0x56>
{
   1c3e6:	4803      	ldr	r0, [pc, #12]	; (1c3f4 <nrfx_gpiote_output_configure+0xec>)
   1c3e8:	e7ba      	b.n	1c360 <nrfx_gpiote_output_configure+0x58>
   1c3ea:	bf00      	nop
   1c3ec:	20008690 	.word	0x20008690
   1c3f0:	0bad0000 	.word	0x0bad0000
   1c3f4:	0bad0004 	.word	0x0bad0004

0001c3f8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1c3f8:	4b01      	ldr	r3, [pc, #4]	; (1c400 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1c3fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1c3fe:	4770      	bx	lr
   1c400:	20008690 	.word	0x20008690

0001c404 <nrfx_gpiote_channel_get>:
{
   1c404:	4602      	mov	r2, r0
   1c406:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1c408:	b959      	cbnz	r1, 1c422 <nrfx_gpiote_channel_get+0x1e>
   1c40a:	490c      	ldr	r1, [pc, #48]	; (1c43c <nrfx_gpiote_channel_get+0x38>)
   1c40c:	480c      	ldr	r0, [pc, #48]	; (1c440 <nrfx_gpiote_channel_get+0x3c>)
   1c40e:	f240 2335 	movw	r3, #565	; 0x235
   1c412:	4a0c      	ldr	r2, [pc, #48]	; (1c444 <nrfx_gpiote_channel_get+0x40>)
   1c414:	f007 fe05 	bl	24022 <assert_print>
   1c418:	f240 2135 	movw	r1, #565	; 0x235
   1c41c:	4809      	ldr	r0, [pc, #36]	; (1c444 <nrfx_gpiote_channel_get+0x40>)
   1c41e:	f007 fdf9 	bl	24014 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1c422:	f7ff fdfb 	bl	1c01c <pin_in_use_by_te>
   1c426:	b138      	cbz	r0, 1c438 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c428:	4b07      	ldr	r3, [pc, #28]	; (1c448 <nrfx_gpiote_channel_get+0x44>)
   1c42a:	3208      	adds	r2, #8
   1c42c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1c430:	4806      	ldr	r0, [pc, #24]	; (1c44c <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c432:	0b5b      	lsrs	r3, r3, #13
   1c434:	700b      	strb	r3, [r1, #0]
}
   1c436:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1c438:	4805      	ldr	r0, [pc, #20]	; (1c450 <nrfx_gpiote_channel_get+0x4c>)
   1c43a:	e7fc      	b.n	1c436 <nrfx_gpiote_channel_get+0x32>
   1c43c:	0002ebc7 	.word	0x0002ebc7
   1c440:	0002a669 	.word	0x0002a669
   1c444:	0002eb89 	.word	0x0002eb89
   1c448:	20008690 	.word	0x20008690
   1c44c:	0bad0000 	.word	0x0bad0000
   1c450:	0bad0004 	.word	0x0bad0004

0001c454 <nrfx_gpiote_init>:
{
   1c454:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1c456:	4c0f      	ldr	r4, [pc, #60]	; (1c494 <nrfx_gpiote_init+0x40>)
   1c458:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1c45c:	b9bd      	cbnz	r5, 1c48e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1c45e:	2260      	movs	r2, #96	; 0x60
   1c460:	4629      	mov	r1, r5
   1c462:	f104 0010 	add.w	r0, r4, #16
   1c466:	f00c f9d3 	bl	28810 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1c46a:	202f      	movs	r0, #47	; 0x2f
   1c46c:	f7f2 ffd2 	bl	f414 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c470:	4b09      	ldr	r3, [pc, #36]	; (1c498 <nrfx_gpiote_init+0x44>)
    return err_code;
   1c472:	480a      	ldr	r0, [pc, #40]	; (1c49c <nrfx_gpiote_init+0x48>)
   1c474:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1c478:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1c47c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1c480:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1c484:	2301      	movs	r3, #1
   1c486:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1c48a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1c48c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1c48e:	4804      	ldr	r0, [pc, #16]	; (1c4a0 <nrfx_gpiote_init+0x4c>)
   1c490:	e7fc      	b.n	1c48c <nrfx_gpiote_init+0x38>
   1c492:	bf00      	nop
   1c494:	20008690 	.word	0x20008690
   1c498:	4002f000 	.word	0x4002f000
   1c49c:	0bad0000 	.word	0x0bad0000
   1c4a0:	0bad0005 	.word	0x0bad0005

0001c4a4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1c4a4:	4b03      	ldr	r3, [pc, #12]	; (1c4b4 <nrfx_gpiote_is_init+0x10>)
   1c4a6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1c4aa:	3800      	subs	r0, #0
   1c4ac:	bf18      	it	ne
   1c4ae:	2001      	movne	r0, #1
   1c4b0:	4770      	bx	lr
   1c4b2:	bf00      	nop
   1c4b4:	20008690 	.word	0x20008690

0001c4b8 <nrfx_gpiote_channel_free>:
{
   1c4b8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1c4ba:	4801      	ldr	r0, [pc, #4]	; (1c4c0 <nrfx_gpiote_channel_free+0x8>)
   1c4bc:	f7ff bb6e 	b.w	1bb9c <nrfx_flag32_free>
   1c4c0:	20008700 	.word	0x20008700

0001c4c4 <nrfx_gpiote_channel_alloc>:
{
   1c4c4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1c4c6:	4801      	ldr	r0, [pc, #4]	; (1c4cc <nrfx_gpiote_channel_alloc+0x8>)
   1c4c8:	f7ff bb4c 	b.w	1bb64 <nrfx_flag32_alloc>
   1c4cc:	20008700 	.word	0x20008700

0001c4d0 <nrfx_gpiote_trigger_enable>:
{
   1c4d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c4d2:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1c4d4:	f7ff fdac 	bl	1c030 <pin_has_trigger>
   1c4d8:	b958      	cbnz	r0, 1c4f2 <nrfx_gpiote_trigger_enable+0x22>
   1c4da:	492b      	ldr	r1, [pc, #172]	; (1c588 <nrfx_gpiote_trigger_enable+0xb8>)
   1c4dc:	f240 33df 	movw	r3, #991	; 0x3df
   1c4e0:	4a2a      	ldr	r2, [pc, #168]	; (1c58c <nrfx_gpiote_trigger_enable+0xbc>)
   1c4e2:	482b      	ldr	r0, [pc, #172]	; (1c590 <nrfx_gpiote_trigger_enable+0xc0>)
   1c4e4:	f007 fd9d 	bl	24022 <assert_print>
   1c4e8:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1c4ec:	4827      	ldr	r0, [pc, #156]	; (1c58c <nrfx_gpiote_trigger_enable+0xbc>)
   1c4ee:	f007 fd91 	bl	24014 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c4f2:	4620      	mov	r0, r4
   1c4f4:	f7ff fd92 	bl	1c01c <pin_in_use_by_te>
   1c4f8:	4a26      	ldr	r2, [pc, #152]	; (1c594 <nrfx_gpiote_trigger_enable+0xc4>)
   1c4fa:	f104 0508 	add.w	r5, r4, #8
   1c4fe:	b1e0      	cbz	r0, 1c53a <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1c500:	4620      	mov	r0, r4
   1c502:	f7ff fda1 	bl	1c048 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c506:	b9c0      	cbnz	r0, 1c53a <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c508:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1c50c:	4c22      	ldr	r4, [pc, #136]	; (1c598 <nrfx_gpiote_trigger_enable+0xc8>)
   1c50e:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1c510:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c512:	50e0      	str	r0, [r4, r3]
   1c514:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1c516:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c51a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1c51e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1c522:	f040 0001 	orr.w	r0, r0, #1
   1c526:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1c52a:	b121      	cbz	r1, 1c536 <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1c52c:	2301      	movs	r3, #1
   1c52e:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1c530:	4a1a      	ldr	r2, [pc, #104]	; (1c59c <nrfx_gpiote_trigger_enable+0xcc>)
   1c532:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1c536:	b003      	add	sp, #12
   1c538:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1c53a:	b949      	cbnz	r1, 1c550 <nrfx_gpiote_trigger_enable+0x80>
   1c53c:	4918      	ldr	r1, [pc, #96]	; (1c5a0 <nrfx_gpiote_trigger_enable+0xd0>)
   1c53e:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1c542:	4a12      	ldr	r2, [pc, #72]	; (1c58c <nrfx_gpiote_trigger_enable+0xbc>)
   1c544:	4812      	ldr	r0, [pc, #72]	; (1c590 <nrfx_gpiote_trigger_enable+0xc0>)
   1c546:	f007 fd6c 	bl	24022 <assert_print>
   1c54a:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1c54e:	e7cd      	b.n	1c4ec <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c550:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1c554:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1c558:	2b04      	cmp	r3, #4
   1c55a:	d011      	beq.n	1c580 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1c55c:	2b05      	cmp	r3, #5
   1c55e:	d011      	beq.n	1c584 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c560:	a801      	add	r0, sp, #4
   1c562:	9401      	str	r4, [sp, #4]
   1c564:	f7ff fdf4 	bl	1c150 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c568:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1c56a:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c56c:	40d9      	lsrs	r1, r3
   1c56e:	f001 0101 	and.w	r1, r1, #1
   1c572:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1c574:	4620      	mov	r0, r4
}
   1c576:	b003      	add	sp, #12
   1c578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1c57c:	f00b b98b 	b.w	27896 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1c580:	2103      	movs	r1, #3
   1c582:	e7f7      	b.n	1c574 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1c584:	2102      	movs	r1, #2
   1c586:	e7f5      	b.n	1c574 <nrfx_gpiote_trigger_enable+0xa4>
   1c588:	0002ebd1 	.word	0x0002ebd1
   1c58c:	0002eb89 	.word	0x0002eb89
   1c590:	0002a669 	.word	0x0002a669
   1c594:	20008690 	.word	0x20008690
   1c598:	4002f100 	.word	0x4002f100
   1c59c:	4002f000 	.word	0x4002f000
   1c5a0:	0002ebe6 	.word	0x0002ebe6

0001c5a4 <nrfx_gpiote_trigger_disable>:
{
   1c5a4:	b508      	push	{r3, lr}
   1c5a6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c5a8:	f7ff fd38 	bl	1c01c <pin_in_use_by_te>
   1c5ac:	b1c8      	cbz	r0, 1c5e2 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1c5ae:	4610      	mov	r0, r2
   1c5b0:	f7ff fd4a 	bl	1c048 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c5b4:	b9a8      	cbnz	r0, 1c5e2 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c5b6:	4b0e      	ldr	r3, [pc, #56]	; (1c5f0 <nrfx_gpiote_trigger_disable+0x4c>)
   1c5b8:	3208      	adds	r2, #8
   1c5ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1c5be:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c5c0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1c5c2:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1c5c4:	490b      	ldr	r1, [pc, #44]	; (1c5f4 <nrfx_gpiote_trigger_disable+0x50>)
   1c5c6:	009b      	lsls	r3, r3, #2
   1c5c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c5cc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1c5d0:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1c5d4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1c5d8:	f022 0203 	bic.w	r2, r2, #3
   1c5dc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1c5e0:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1c5e2:	2100      	movs	r1, #0
}
   1c5e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1c5e8:	4610      	mov	r0, r2
   1c5ea:	f00b b954 	b.w	27896 <nrf_gpio_cfg_sense_set>
   1c5ee:	bf00      	nop
   1c5f0:	20008690 	.word	0x20008690
   1c5f4:	4002f000 	.word	0x4002f000

0001c5f8 <nrfx_gpiote_pin_uninit>:
{
   1c5f8:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1c5fa:	4b10      	ldr	r3, [pc, #64]	; (1c63c <nrfx_gpiote_pin_uninit+0x44>)
   1c5fc:	f100 0208 	add.w	r2, r0, #8
   1c600:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1c604:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1c606:	07db      	lsls	r3, r3, #31
   1c608:	d516      	bpl.n	1c638 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1c60a:	f7ff ffcb 	bl	1c5a4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1c60e:	4620      	mov	r0, r4
   1c610:	f7ff fd80 	bl	1c114 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c614:	a801      	add	r0, sp, #4
   1c616:	9401      	str	r4, [sp, #4]
   1c618:	f7ff fd9a 	bl	1c150 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1c61c:	9b01      	ldr	r3, [sp, #4]
   1c61e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1c622:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1c626:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1c62a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1c62e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1c632:	4803      	ldr	r0, [pc, #12]	; (1c640 <nrfx_gpiote_pin_uninit+0x48>)
}
   1c634:	b002      	add	sp, #8
   1c636:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1c638:	4802      	ldr	r0, [pc, #8]	; (1c644 <nrfx_gpiote_pin_uninit+0x4c>)
   1c63a:	e7fb      	b.n	1c634 <nrfx_gpiote_pin_uninit+0x3c>
   1c63c:	20008690 	.word	0x20008690
   1c640:	0bad0000 	.word	0x0bad0000
   1c644:	0bad0004 	.word	0x0bad0004

0001c648 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1c64c:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1c64e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c650:	4634      	mov	r4, r6
{
   1c652:	4b64      	ldr	r3, [pc, #400]	; (1c7e4 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1c654:	4864      	ldr	r0, [pc, #400]	; (1c7e8 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c656:	4965      	ldr	r1, [pc, #404]	; (1c7ec <nrfx_gpiote_irq_handler+0x1a4>)
{
   1c658:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c65a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1c65c:	b135      	cbz	r5, 1c66c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1c65e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1c662:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c664:	bf1e      	ittt	ne
   1c666:	601c      	strne	r4, [r3, #0]
   1c668:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1c66a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c66c:	3304      	adds	r3, #4
   1c66e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1c670:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c674:	d1f1      	bne.n	1c65a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c676:	f8df a170 	ldr.w	sl, [pc, #368]	; 1c7e8 <nrfx_gpiote_irq_handler+0x1a0>
   1c67a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1c67e:	2b00      	cmp	r3, #0
   1c680:	f000 8093 	beq.w	1c7aa <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1c684:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1c7f0 <nrfx_gpiote_irq_handler+0x1a8>
   1c688:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1c68c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1c68e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1c692:	4b58      	ldr	r3, [pc, #352]	; (1c7f4 <nrfx_gpiote_irq_handler+0x1ac>)
   1c694:	6a1a      	ldr	r2, [r3, #32]
   1c696:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1c698:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1c69a:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1c69e:	f10d 0b10 	add.w	fp, sp, #16
   1c6a2:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1c6a6:	9300      	str	r3, [sp, #0]
   1c6a8:	e04a      	b.n	1c740 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1c6aa:	fa94 f4a4 	rbit	r4, r4
   1c6ae:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1c6b2:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c6b4:	4a50      	ldr	r2, [pc, #320]	; (1c7f8 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1c6b6:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c6b8:	f104 0308 	add.w	r3, r4, #8
   1c6bc:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1c6c0:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1c6c2:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1c6c4:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1c6c8:	fa03 f101 	lsl.w	r1, r3, r1
   1c6cc:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1c6d0:	08ba      	lsrs	r2, r7, #2
   1c6d2:	ea23 0301 	bic.w	r3, r3, r1
   1c6d6:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c6da:	a803      	add	r0, sp, #12
   1c6dc:	9201      	str	r2, [sp, #4]
   1c6de:	9403      	str	r4, [sp, #12]
   1c6e0:	f7ff fd36 	bl	1c150 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1c6e4:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1c6e6:	9a01      	ldr	r2, [sp, #4]
   1c6e8:	3380      	adds	r3, #128	; 0x80
   1c6ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c6ee:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1c6f2:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c6f4:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1c6f6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1c6fa:	d52b      	bpl.n	1c754 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1c6fc:	4639      	mov	r1, r7
   1c6fe:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1c700:	b2dd      	uxtb	r5, r3
   1c702:	f7ff fcab 	bl	1c05c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c706:	a803      	add	r0, sp, #12
   1c708:	9403      	str	r4, [sp, #12]
   1c70a:	f7ff fd21 	bl	1c150 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1c70e:	9b03      	ldr	r3, [sp, #12]
   1c710:	3380      	adds	r3, #128	; 0x80
   1c712:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1c716:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1c71a:	429d      	cmp	r5, r3
   1c71c:	d107      	bne.n	1c72e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1c71e:	2100      	movs	r1, #0
   1c720:	4620      	mov	r0, r4
   1c722:	f00b f8b8 	bl	27896 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1c726:	4629      	mov	r1, r5
   1c728:	4620      	mov	r0, r4
   1c72a:	f00b f8b4 	bl	27896 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c72e:	a803      	add	r0, sp, #12
   1c730:	9403      	str	r4, [sp, #12]
   1c732:	f7ff fd0d 	bl	1c150 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1c736:	2201      	movs	r2, #1
   1c738:	9b03      	ldr	r3, [sp, #12]
   1c73a:	fa02 f303 	lsl.w	r3, r2, r3
   1c73e:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1c740:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1c744:	2c00      	cmp	r4, #0
   1c746:	d1b0      	bne.n	1c6aa <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1c748:	f1b9 0f00 	cmp.w	r9, #0
   1c74c:	d11d      	bne.n	1c78a <nrfx_gpiote_irq_handler+0x142>
   1c74e:	f04f 0901 	mov.w	r9, #1
   1c752:	e7a6      	b.n	1c6a2 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1c754:	2b02      	cmp	r3, #2
   1c756:	d10c      	bne.n	1c772 <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1c758:	2103      	movs	r1, #3
   1c75a:	4620      	mov	r0, r4
   1c75c:	f00b f89b 	bl	27896 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1c760:	f005 0305 	and.w	r3, r5, #5
   1c764:	2b01      	cmp	r3, #1
   1c766:	d1e2      	bne.n	1c72e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1c768:	4639      	mov	r1, r7
   1c76a:	4620      	mov	r0, r4
   1c76c:	f7ff fc76 	bl	1c05c <call_handler>
   1c770:	e7dd      	b.n	1c72e <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1c772:	2102      	movs	r1, #2
   1c774:	4620      	mov	r0, r4
   1c776:	9301      	str	r3, [sp, #4]
   1c778:	f00b f88d 	bl	27896 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1c77c:	2d03      	cmp	r5, #3
   1c77e:	d0f3      	beq.n	1c768 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1c780:	9b01      	ldr	r3, [sp, #4]
   1c782:	2b03      	cmp	r3, #3
   1c784:	d1d3      	bne.n	1c72e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1c786:	2d02      	cmp	r5, #2
   1c788:	e7ed      	b.n	1c766 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c78a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1c78e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1c792:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1c796:	4917      	ldr	r1, [pc, #92]	; (1c7f4 <nrfx_gpiote_irq_handler+0x1ac>)
   1c798:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1c79a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1c79e:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1c7a0:	4313      	orrs	r3, r2
   1c7a2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1c7a4:	620a      	str	r2, [r1, #32]
   1c7a6:	f47f af78 	bne.w	1c69a <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1c7aa:	2401      	movs	r4, #1
    while (mask)
   1c7ac:	b916      	cbnz	r6, 1c7b4 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1c7ae:	b007      	add	sp, #28
   1c7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1c7b4:	fa96 f3a6 	rbit	r3, r6
   1c7b8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1c7bc:	fa04 f203 	lsl.w	r2, r4, r3
   1c7c0:	009b      	lsls	r3, r3, #2
   1c7c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c7c6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1c7ca:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1c7ce:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1c7d2:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1c7d6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1c7da:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1c7de:	f7ff fc3d 	bl	1c05c <call_handler>
   1c7e2:	e7e3      	b.n	1c7ac <nrfx_gpiote_irq_handler+0x164>
   1c7e4:	4002f100 	.word	0x4002f100
   1c7e8:	4002f000 	.word	0x4002f000
   1c7ec:	4002f120 	.word	0x4002f120
   1c7f0:	40842500 	.word	0x40842500
   1c7f4:	40842800 	.word	0x40842800
   1c7f8:	20008690 	.word	0x20008690

0001c7fc <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1c7fc:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1c7fe:	4c08      	ldr	r4, [pc, #32]	; (1c820 <nrfx_ipc_init+0x24>)
{
   1c800:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1c802:	7923      	ldrb	r3, [r4, #4]
{
   1c804:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1c806:	b943      	cbnz	r3, 1c81a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1c808:	202a      	movs	r0, #42	; 0x2a
   1c80a:	f7f2 fe03 	bl	f414 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1c80e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1c810:	4804      	ldr	r0, [pc, #16]	; (1c824 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1c812:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1c814:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1c816:	60a5      	str	r5, [r4, #8]
}
   1c818:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1c81a:	4803      	ldr	r0, [pc, #12]	; (1c828 <nrfx_ipc_init+0x2c>)
   1c81c:	e7fc      	b.n	1c818 <nrfx_ipc_init+0x1c>
   1c81e:	bf00      	nop
   1c820:	200212fc 	.word	0x200212fc
   1c824:	0bad0000 	.word	0x0bad0000
   1c828:	0bad000c 	.word	0x0bad000c

0001c82c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1c82c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1c82e:	b948      	cbnz	r0, 1c844 <nrfx_ipc_config_load+0x18>
   1c830:	4919      	ldr	r1, [pc, #100]	; (1c898 <nrfx_ipc_config_load+0x6c>)
   1c832:	2345      	movs	r3, #69	; 0x45
   1c834:	4a19      	ldr	r2, [pc, #100]	; (1c89c <nrfx_ipc_config_load+0x70>)
   1c836:	481a      	ldr	r0, [pc, #104]	; (1c8a0 <nrfx_ipc_config_load+0x74>)
   1c838:	f007 fbf3 	bl	24022 <assert_print>
   1c83c:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1c83e:	4817      	ldr	r0, [pc, #92]	; (1c89c <nrfx_ipc_config_load+0x70>)
   1c840:	f007 fbe8 	bl	24014 <assert_post_action>
   1c844:	4b17      	ldr	r3, [pc, #92]	; (1c8a4 <nrfx_ipc_config_load+0x78>)
   1c846:	791b      	ldrb	r3, [r3, #4]
   1c848:	2b01      	cmp	r3, #1
   1c84a:	d007      	beq.n	1c85c <nrfx_ipc_config_load+0x30>
   1c84c:	4916      	ldr	r1, [pc, #88]	; (1c8a8 <nrfx_ipc_config_load+0x7c>)
   1c84e:	2346      	movs	r3, #70	; 0x46
   1c850:	4a12      	ldr	r2, [pc, #72]	; (1c89c <nrfx_ipc_config_load+0x70>)
   1c852:	4813      	ldr	r0, [pc, #76]	; (1c8a0 <nrfx_ipc_config_load+0x74>)
   1c854:	f007 fbe5 	bl	24022 <assert_print>
   1c858:	2146      	movs	r1, #70	; 0x46
   1c85a:	e7f0      	b.n	1c83e <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1c85c:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1c85e:	4a13      	ldr	r2, [pc, #76]	; (1c8ac <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1c860:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1c864:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1c868:	3301      	adds	r3, #1
   1c86a:	2b10      	cmp	r3, #16
   1c86c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1c870:	d1f6      	bne.n	1c860 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1c872:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1c874:	4a0d      	ldr	r2, [pc, #52]	; (1c8ac <nrfx_ipc_config_load+0x80>)
   1c876:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1c87a:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1c87e:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1c882:	3301      	adds	r3, #1
   1c884:	2b10      	cmp	r3, #16
   1c886:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1c88a:	d1f6      	bne.n	1c87a <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1c88c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1c890:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1c894:	bd38      	pop	{r3, r4, r5, pc}
   1c896:	bf00      	nop
   1c898:	0002ec38 	.word	0x0002ec38
   1c89c:	0002ebfd 	.word	0x0002ebfd
   1c8a0:	0002a669 	.word	0x0002a669
   1c8a4:	200212fc 	.word	0x200212fc
   1c8a8:	0002ec41 	.word	0x0002ec41
   1c8ac:	4002a000 	.word	0x4002a000

0001c8b0 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1c8b0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1c8b2:	4b09      	ldr	r3, [pc, #36]	; (1c8d8 <nrfx_ipc_receive_event_enable+0x28>)
   1c8b4:	791b      	ldrb	r3, [r3, #4]
   1c8b6:	2b01      	cmp	r3, #1
   1c8b8:	d009      	beq.n	1c8ce <nrfx_ipc_receive_event_enable+0x1e>
   1c8ba:	4908      	ldr	r1, [pc, #32]	; (1c8dc <nrfx_ipc_receive_event_enable+0x2c>)
   1c8bc:	4808      	ldr	r0, [pc, #32]	; (1c8e0 <nrfx_ipc_receive_event_enable+0x30>)
   1c8be:	236b      	movs	r3, #107	; 0x6b
   1c8c0:	4a08      	ldr	r2, [pc, #32]	; (1c8e4 <nrfx_ipc_receive_event_enable+0x34>)
   1c8c2:	f007 fbae 	bl	24022 <assert_print>
   1c8c6:	216b      	movs	r1, #107	; 0x6b
   1c8c8:	4806      	ldr	r0, [pc, #24]	; (1c8e4 <nrfx_ipc_receive_event_enable+0x34>)
   1c8ca:	f007 fba3 	bl	24014 <assert_post_action>
   1c8ce:	4a06      	ldr	r2, [pc, #24]	; (1c8e8 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1c8d0:	4083      	lsls	r3, r0
   1c8d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1c8d6:	bd08      	pop	{r3, pc}
   1c8d8:	200212fc 	.word	0x200212fc
   1c8dc:	0002ec41 	.word	0x0002ec41
   1c8e0:	0002a669 	.word	0x0002a669
   1c8e4:	0002ebfd 	.word	0x0002ebfd
   1c8e8:	4002a000 	.word	0x4002a000

0001c8ec <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1c8ec:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1c8ee:	4b09      	ldr	r3, [pc, #36]	; (1c914 <nrfx_ipc_receive_event_disable+0x28>)
   1c8f0:	791b      	ldrb	r3, [r3, #4]
   1c8f2:	2b01      	cmp	r3, #1
   1c8f4:	d009      	beq.n	1c90a <nrfx_ipc_receive_event_disable+0x1e>
   1c8f6:	4908      	ldr	r1, [pc, #32]	; (1c918 <nrfx_ipc_receive_event_disable+0x2c>)
   1c8f8:	4808      	ldr	r0, [pc, #32]	; (1c91c <nrfx_ipc_receive_event_disable+0x30>)
   1c8fa:	2371      	movs	r3, #113	; 0x71
   1c8fc:	4a08      	ldr	r2, [pc, #32]	; (1c920 <nrfx_ipc_receive_event_disable+0x34>)
   1c8fe:	f007 fb90 	bl	24022 <assert_print>
   1c902:	2171      	movs	r1, #113	; 0x71
   1c904:	4806      	ldr	r0, [pc, #24]	; (1c920 <nrfx_ipc_receive_event_disable+0x34>)
   1c906:	f007 fb85 	bl	24014 <assert_post_action>
    p_reg->INTENCLR = mask;
   1c90a:	4a06      	ldr	r2, [pc, #24]	; (1c924 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1c90c:	4083      	lsls	r3, r0
   1c90e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1c912:	bd08      	pop	{r3, pc}
   1c914:	200212fc 	.word	0x200212fc
   1c918:	0002ec41 	.word	0x0002ec41
   1c91c:	0002a669 	.word	0x0002a669
   1c920:	0002ebfd 	.word	0x0002ebfd
   1c924:	4002a000 	.word	0x4002a000

0001c928 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1c928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1c92a:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c92c:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1c92e:	4b12      	ldr	r3, [pc, #72]	; (1c978 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1c930:	4d12      	ldr	r5, [pc, #72]	; (1c97c <nrfx_ipc_irq_handler+0x54>)
   1c932:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1c936:	b904      	cbnz	r4, 1c93a <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1c938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1c93a:	fa94 f0a4 	rbit	r0, r4
   1c93e:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1c942:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1c946:	280f      	cmp	r0, #15
   1c948:	ea24 0403 	bic.w	r4, r4, r3
   1c94c:	dd0b      	ble.n	1c966 <nrfx_ipc_irq_handler+0x3e>
   1c94e:	490c      	ldr	r1, [pc, #48]	; (1c980 <nrfx_ipc_irq_handler+0x58>)
   1c950:	480c      	ldr	r0, [pc, #48]	; (1c984 <nrfx_ipc_irq_handler+0x5c>)
   1c952:	f240 13e7 	movw	r3, #487	; 0x1e7
   1c956:	4a0c      	ldr	r2, [pc, #48]	; (1c988 <nrfx_ipc_irq_handler+0x60>)
   1c958:	f007 fb63 	bl	24022 <assert_print>
   1c95c:	f240 11e7 	movw	r1, #487	; 0x1e7
   1c960:	4809      	ldr	r0, [pc, #36]	; (1c988 <nrfx_ipc_irq_handler+0x60>)
   1c962:	f007 fb57 	bl	24014 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c966:	4b09      	ldr	r3, [pc, #36]	; (1c98c <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1c968:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c96a:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1c96c:	682b      	ldr	r3, [r5, #0]
   1c96e:	2b00      	cmp	r3, #0
   1c970:	d0e1      	beq.n	1c936 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1c972:	68a9      	ldr	r1, [r5, #8]
   1c974:	4798      	blx	r3
   1c976:	e7de      	b.n	1c936 <nrfx_ipc_irq_handler+0xe>
   1c978:	4002a000 	.word	0x4002a000
   1c97c:	200212fc 	.word	0x200212fc
   1c980:	0002b43b 	.word	0x0002b43b
   1c984:	0002a669 	.word	0x0002a669
   1c988:	0002b409 	.word	0x0002b409
   1c98c:	4002a100 	.word	0x4002a100

0001c990 <nvmc_word_write>:
   1c990:	4a04      	ldr	r2, [pc, #16]	; (1c9a4 <nvmc_word_write+0x14>)
   1c992:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1c996:	07db      	lsls	r3, r3, #31
   1c998:	d5fb      	bpl.n	1c992 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1c99a:	6001      	str	r1, [r0, #0]
   1c99c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1c9a0:	4770      	bx	lr
   1c9a2:	bf00      	nop
   1c9a4:	40039000 	.word	0x40039000

0001c9a8 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1c9a8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1c9ac:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1c9ae:	d30b      	bcc.n	1c9c8 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1c9b0:	4910      	ldr	r1, [pc, #64]	; (1c9f4 <nrfx_nvmc_page_erase+0x4c>)
   1c9b2:	4811      	ldr	r0, [pc, #68]	; (1c9f8 <nrfx_nvmc_page_erase+0x50>)
   1c9b4:	f44f 7383 	mov.w	r3, #262	; 0x106
   1c9b8:	4a10      	ldr	r2, [pc, #64]	; (1c9fc <nrfx_nvmc_page_erase+0x54>)
   1c9ba:	f007 fb32 	bl	24022 <assert_print>
   1c9be:	f44f 7183 	mov.w	r1, #262	; 0x106
   1c9c2:	480e      	ldr	r0, [pc, #56]	; (1c9fc <nrfx_nvmc_page_erase+0x54>)
   1c9c4:	f007 fb26 	bl	24014 <assert_post_action>
    return !(addr % flash_page_size_get());
   1c9c8:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1c9cc:	b97b      	cbnz	r3, 1c9ee <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1c9ce:	2202      	movs	r2, #2
   1c9d0:	4b0b      	ldr	r3, [pc, #44]	; (1ca00 <nrfx_nvmc_page_erase+0x58>)
   1c9d2:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1c9d6:	f04f 32ff 	mov.w	r2, #4294967295
   1c9da:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c9dc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1c9e0:	07d2      	lsls	r2, r2, #31
   1c9e2:	d5fb      	bpl.n	1c9dc <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1c9e4:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1c9e6:	4807      	ldr	r0, [pc, #28]	; (1ca04 <nrfx_nvmc_page_erase+0x5c>)
   1c9e8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1c9ec:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1c9ee:	4806      	ldr	r0, [pc, #24]	; (1ca08 <nrfx_nvmc_page_erase+0x60>)
   1c9f0:	e7fc      	b.n	1c9ec <nrfx_nvmc_page_erase+0x44>
   1c9f2:	bf00      	nop
   1c9f4:	0002ecca 	.word	0x0002ecca
   1c9f8:	0002a669 	.word	0x0002a669
   1c9fc:	0002ec6e 	.word	0x0002ec6e
   1ca00:	40039000 	.word	0x40039000
   1ca04:	0bad0000 	.word	0x0bad0000
   1ca08:	0bad000a 	.word	0x0bad000a

0001ca0c <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1ca0c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1ca10:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1ca12:	d30b      	bcc.n	1ca2c <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1ca14:	4910      	ldr	r1, [pc, #64]	; (1ca58 <nrfx_nvmc_word_write+0x4c>)
   1ca16:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1ca1a:	4a10      	ldr	r2, [pc, #64]	; (1ca5c <nrfx_nvmc_word_write+0x50>)
   1ca1c:	4810      	ldr	r0, [pc, #64]	; (1ca60 <nrfx_nvmc_word_write+0x54>)
   1ca1e:	f007 fb00 	bl	24022 <assert_print>
   1ca22:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1ca26:	480d      	ldr	r0, [pc, #52]	; (1ca5c <nrfx_nvmc_word_write+0x50>)
   1ca28:	f007 faf4 	bl	24014 <assert_post_action>
   1ca2c:	f010 0403 	ands.w	r4, r0, #3
   1ca30:	d009      	beq.n	1ca46 <nrfx_nvmc_word_write+0x3a>
   1ca32:	490c      	ldr	r1, [pc, #48]	; (1ca64 <nrfx_nvmc_word_write+0x58>)
   1ca34:	f240 1395 	movw	r3, #405	; 0x195
   1ca38:	4a08      	ldr	r2, [pc, #32]	; (1ca5c <nrfx_nvmc_word_write+0x50>)
   1ca3a:	4809      	ldr	r0, [pc, #36]	; (1ca60 <nrfx_nvmc_word_write+0x54>)
   1ca3c:	f007 faf1 	bl	24022 <assert_print>
   1ca40:	f240 1195 	movw	r1, #405	; 0x195
   1ca44:	e7ef      	b.n	1ca26 <nrfx_nvmc_word_write+0x1a>
   1ca46:	2301      	movs	r3, #1
   1ca48:	4d07      	ldr	r5, [pc, #28]	; (1ca68 <nrfx_nvmc_word_write+0x5c>)
   1ca4a:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1ca4e:	f7ff ff9f 	bl	1c990 <nvmc_word_write>
   1ca52:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1ca56:	bd38      	pop	{r3, r4, r5, pc}
   1ca58:	0002ece4 	.word	0x0002ece4
   1ca5c:	0002ec6e 	.word	0x0002ec6e
   1ca60:	0002a669 	.word	0x0002a669
   1ca64:	0002ecfe 	.word	0x0002ecfe
   1ca68:	40039000 	.word	0x40039000

0001ca6c <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1ca6c:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ca6e:	4d43      	ldr	r5, [pc, #268]	; (1cb7c <qspi_xfer+0x110>)
   1ca70:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1ca74:	b94c      	cbnz	r4, 1ca8a <qspi_xfer+0x1e>
   1ca76:	4942      	ldr	r1, [pc, #264]	; (1cb80 <qspi_xfer+0x114>)
   1ca78:	2368      	movs	r3, #104	; 0x68
   1ca7a:	4a42      	ldr	r2, [pc, #264]	; (1cb84 <qspi_xfer+0x118>)
   1ca7c:	4842      	ldr	r0, [pc, #264]	; (1cb88 <qspi_xfer+0x11c>)
   1ca7e:	f007 fad0 	bl	24022 <assert_print>
   1ca82:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1ca84:	483f      	ldr	r0, [pc, #252]	; (1cb84 <qspi_xfer+0x118>)
   1ca86:	f007 fac5 	bl	24014 <assert_post_action>
   1ca8a:	b938      	cbnz	r0, 1ca9c <qspi_xfer+0x30>
   1ca8c:	493f      	ldr	r1, [pc, #252]	; (1cb8c <qspi_xfer+0x120>)
   1ca8e:	2369      	movs	r3, #105	; 0x69
   1ca90:	4a3c      	ldr	r2, [pc, #240]	; (1cb84 <qspi_xfer+0x118>)
   1ca92:	483d      	ldr	r0, [pc, #244]	; (1cb88 <qspi_xfer+0x11c>)
   1ca94:	f007 fac5 	bl	24022 <assert_print>
   1ca98:	2169      	movs	r1, #105	; 0x69
   1ca9a:	e7f3      	b.n	1ca84 <qspi_xfer+0x18>
   1ca9c:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1caa0:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1caa4:	d165      	bne.n	1cb72 <qspi_xfer+0x106>
   1caa6:	0786      	lsls	r6, r0, #30
   1caa8:	d163      	bne.n	1cb72 <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1caaa:	2c01      	cmp	r4, #1
   1caac:	d001      	beq.n	1cab2 <qspi_xfer+0x46>
   1caae:	429c      	cmp	r4, r3
   1cab0:	d161      	bne.n	1cb76 <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1cab2:	682c      	ldr	r4, [r5, #0]
   1cab4:	bb04      	cbnz	r4, 1caf8 <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1cab6:	2b02      	cmp	r3, #2
   1cab8:	4b35      	ldr	r3, [pc, #212]	; (1cb90 <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1caba:	bf0b      	itete	eq
   1cabc:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1cac0:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1cac4:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1cac8:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1cacc:	bf0b      	itete	eq
   1cace:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1cad2:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1cad6:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1cad8:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cada:	2100      	movs	r1, #0
   1cadc:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cae0:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1cae4:	2201      	movs	r2, #1
   1cae6:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1caea:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1caec:	4a28      	ldr	r2, [pc, #160]	; (1cb90 <qspi_xfer+0x124>)
   1caee:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1caf2:	2b00      	cmp	r3, #0
   1caf4:	d0fb      	beq.n	1caee <qspi_xfer+0x82>
   1caf6:	e00d      	b.n	1cb14 <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1caf8:	68ae      	ldr	r6, [r5, #8]
   1cafa:	4c25      	ldr	r4, [pc, #148]	; (1cb90 <qspi_xfer+0x124>)
   1cafc:	b166      	cbz	r6, 1cb18 <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1cafe:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1cb00:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1cb02:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1cb04:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1cb06:	d12d      	bne.n	1cb64 <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1cb08:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1cb0c:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1cb10:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1cb14:	481f      	ldr	r0, [pc, #124]	; (1cb94 <qspi_xfer+0x128>)
}
   1cb16:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1cb18:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1cb1a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1cb1e:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1cb20:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1cb22:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1cb24:	bf0c      	ite	eq
   1cb26:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1cb2a:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cb2e:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1cb32:	bf0b      	itete	eq
   1cb34:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1cb38:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1cb3c:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1cb40:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1cb44:	bf08      	it	eq
   1cb46:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cb48:	4911      	ldr	r1, [pc, #68]	; (1cb90 <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1cb4a:	bf18      	it	ne
   1cb4c:	2304      	movne	r3, #4
   1cb4e:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1cb52:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cb54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cb58:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1cb5c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cb60:	601a      	str	r2, [r3, #0]
}
   1cb62:	e7d7      	b.n	1cb14 <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1cb64:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1cb68:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1cb6c:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1cb70:	e7d0      	b.n	1cb14 <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1cb72:	4809      	ldr	r0, [pc, #36]	; (1cb98 <qspi_xfer+0x12c>)
   1cb74:	e7cf      	b.n	1cb16 <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1cb76:	4809      	ldr	r0, [pc, #36]	; (1cb9c <qspi_xfer+0x130>)
   1cb78:	e7cd      	b.n	1cb16 <qspi_xfer+0xaa>
   1cb7a:	bf00      	nop
   1cb7c:	20021308 	.word	0x20021308
   1cb80:	0002ed63 	.word	0x0002ed63
   1cb84:	0002ed27 	.word	0x0002ed27
   1cb88:	0002a669 	.word	0x0002a669
   1cb8c:	0002ed8f 	.word	0x0002ed8f
   1cb90:	4002b000 	.word	0x4002b000
   1cb94:	0bad0000 	.word	0x0bad0000
   1cb98:	0bad000a 	.word	0x0bad000a
   1cb9c:	0bad000b 	.word	0x0bad000b

0001cba0 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1cba0:	b538      	push	{r3, r4, r5, lr}
   1cba2:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cba4:	4d06      	ldr	r5, [pc, #24]	; (1cbc0 <qspi_ready_wait+0x20>)
   1cba6:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1cbaa:	b933      	cbnz	r3, 1cbba <qspi_ready_wait+0x1a>
   1cbac:	200a      	movs	r0, #10
   1cbae:	f00a fe07 	bl	277c0 <nrfx_busy_wait>
   1cbb2:	3c01      	subs	r4, #1
   1cbb4:	d1f7      	bne.n	1cba6 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1cbb6:	4803      	ldr	r0, [pc, #12]	; (1cbc4 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1cbb8:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1cbba:	4803      	ldr	r0, [pc, #12]	; (1cbc8 <qspi_ready_wait+0x28>)
   1cbbc:	e7fc      	b.n	1cbb8 <qspi_ready_wait+0x18>
   1cbbe:	bf00      	nop
   1cbc0:	4002b000 	.word	0x4002b000
   1cbc4:	0bad0007 	.word	0x0bad0007
   1cbc8:	0bad0000 	.word	0x0bad0000

0001cbcc <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1cbcc:	4b08      	ldr	r3, [pc, #32]	; (1cbf0 <qspi_event_xfer_handle.constprop.0+0x24>)
   1cbce:	689a      	ldr	r2, [r3, #8]
   1cbd0:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1cbd2:	691a      	ldr	r2, [r3, #16]
   1cbd4:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1cbd6:	699a      	ldr	r2, [r3, #24]
   1cbd8:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1cbda:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1cbdc:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1cbde:	b132      	cbz	r2, 1cbee <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1cbe0:	695a      	ldr	r2, [r3, #20]
   1cbe2:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1cbe4:	69da      	ldr	r2, [r3, #28]
   1cbe6:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1cbe8:	2200      	movs	r2, #0
   1cbea:	60da      	str	r2, [r3, #12]
   1cbec:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1cbee:	4770      	bx	lr
   1cbf0:	20021308 	.word	0x20021308

0001cbf4 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1cbf4:	b508      	push	{r3, lr}
    switch (port)
   1cbf6:	0943      	lsrs	r3, r0, #5
   1cbf8:	d00d      	beq.n	1cc16 <nrf_gpio_cfg.constprop.0+0x22>
   1cbfa:	2b01      	cmp	r3, #1
   1cbfc:	d01e      	beq.n	1cc3c <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cbfe:	4914      	ldr	r1, [pc, #80]	; (1cc50 <nrf_gpio_cfg.constprop.0+0x5c>)
   1cc00:	4814      	ldr	r0, [pc, #80]	; (1cc54 <nrf_gpio_cfg.constprop.0+0x60>)
   1cc02:	f240 2347 	movw	r3, #583	; 0x247
   1cc06:	4a14      	ldr	r2, [pc, #80]	; (1cc58 <nrf_gpio_cfg.constprop.0+0x64>)
   1cc08:	f007 fa0b 	bl	24022 <assert_print>
   1cc0c:	f240 2147 	movw	r1, #583	; 0x247
   1cc10:	4811      	ldr	r0, [pc, #68]	; (1cc58 <nrf_gpio_cfg.constprop.0+0x64>)
   1cc12:	f007 f9ff 	bl	24014 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1cc16:	f04f 33ff 	mov.w	r3, #4294967295
   1cc1a:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cc1c:	07da      	lsls	r2, r3, #31
   1cc1e:	d5ee      	bpl.n	1cbfe <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1cc20:	4a0e      	ldr	r2, [pc, #56]	; (1cc5c <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1cc22:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1cc26:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1cc2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1cc2e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1cc32:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1cc36:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1cc3a:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1cc3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1cc40:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1cc44:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cc46:	07db      	lsls	r3, r3, #31
   1cc48:	d5d9      	bpl.n	1cbfe <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1cc4a:	4a05      	ldr	r2, [pc, #20]	; (1cc60 <nrf_gpio_cfg.constprop.0+0x6c>)
   1cc4c:	e7e9      	b.n	1cc22 <nrf_gpio_cfg.constprop.0+0x2e>
   1cc4e:	bf00      	nop
   1cc50:	0002e276 	.word	0x0002e276
   1cc54:	0002a669 	.word	0x0002a669
   1cc58:	0002e243 	.word	0x0002e243
   1cc5c:	40842500 	.word	0x40842500
   1cc60:	40842800 	.word	0x40842800

0001cc64 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1cc64:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1cc66:	4b0e      	ldr	r3, [pc, #56]	; (1cca0 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1cc68:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1cc6a:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1cc6e:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1cc72:	2807      	cmp	r0, #7
   1cc74:	d813      	bhi.n	1cc9e <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1cc76:	e8df f000 	tbb	[pc, r0]
   1cc7a:	0f11      	.short	0x0f11
   1cc7c:	080a0b0d 	.word	0x080a0b0d
   1cc80:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1cc82:	0e10      	lsrs	r0, r2, #24
   1cc84:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1cc86:	0c10      	lsrs	r0, r2, #16
   1cc88:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1cc8a:	0a10      	lsrs	r0, r2, #8
   1cc8c:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1cc8e:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1cc90:	0e1a      	lsrs	r2, r3, #24
   1cc92:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1cc94:	0c1a      	lsrs	r2, r3, #16
   1cc96:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1cc98:	0a1a      	lsrs	r2, r3, #8
   1cc9a:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1cc9c:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1cc9e:	bd10      	pop	{r4, pc}
   1cca0:	4002b000 	.word	0x4002b000

0001cca4 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1cca4:	3802      	subs	r0, #2
   1cca6:	2807      	cmp	r0, #7
   1cca8:	d81f      	bhi.n	1ccea <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1ccaa:	e8df f000 	tbb	[pc, r0]
   1ccae:	2729      	.short	0x2729
   1ccb0:	21231125 	.word	0x21231125
   1ccb4:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1ccb6:	79cb      	ldrb	r3, [r1, #7]
   1ccb8:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1ccba:	798a      	ldrb	r2, [r1, #6]
   1ccbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1ccc0:	794a      	ldrb	r2, [r1, #5]
   1ccc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1ccc6:	790a      	ldrb	r2, [r1, #4]
   1ccc8:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1ccca:	4a0e      	ldr	r2, [pc, #56]	; (1cd04 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1cccc:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1ccd0:	78cb      	ldrb	r3, [r1, #3]
   1ccd2:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1ccd4:	788a      	ldrb	r2, [r1, #2]
   1ccd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1ccda:	784a      	ldrb	r2, [r1, #1]
   1ccdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1cce0:	780a      	ldrb	r2, [r1, #0]
   1cce2:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1cce4:	4a07      	ldr	r2, [pc, #28]	; (1cd04 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1cce6:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1ccea:	4770      	bx	lr
    switch (length)
   1ccec:	2300      	movs	r3, #0
   1ccee:	e7e4      	b.n	1ccba <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1ccf0:	2300      	movs	r3, #0
   1ccf2:	e7e5      	b.n	1ccc0 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1ccf4:	2300      	movs	r3, #0
   1ccf6:	e7e6      	b.n	1ccc6 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1ccf8:	2300      	movs	r3, #0
   1ccfa:	e7eb      	b.n	1ccd4 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1ccfc:	2300      	movs	r3, #0
   1ccfe:	e7ec      	b.n	1ccda <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1cd00:	2300      	movs	r3, #0
   1cd02:	e7ed      	b.n	1cce0 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1cd04:	4002b000 	.word	0x4002b000

0001cd08 <nrfx_qspi_init>:
{
   1cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd0a:	460d      	mov	r5, r1
   1cd0c:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1cd0e:	4604      	mov	r4, r0
   1cd10:	b958      	cbnz	r0, 1cd2a <nrfx_qspi_init+0x22>
   1cd12:	496e      	ldr	r1, [pc, #440]	; (1cecc <nrfx_qspi_init+0x1c4>)
   1cd14:	486e      	ldr	r0, [pc, #440]	; (1ced0 <nrfx_qspi_init+0x1c8>)
   1cd16:	f44f 7388 	mov.w	r3, #272	; 0x110
   1cd1a:	4a6e      	ldr	r2, [pc, #440]	; (1ced4 <nrfx_qspi_init+0x1cc>)
   1cd1c:	f007 f981 	bl	24022 <assert_print>
   1cd20:	f44f 7188 	mov.w	r1, #272	; 0x110
   1cd24:	486b      	ldr	r0, [pc, #428]	; (1ced4 <nrfx_qspi_init+0x1cc>)
   1cd26:	f007 f975 	bl	24014 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1cd2a:	4f6b      	ldr	r7, [pc, #428]	; (1ced8 <nrfx_qspi_init+0x1d0>)
   1cd2c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1cd30:	2b00      	cmp	r3, #0
   1cd32:	f040 80c6 	bne.w	1cec2 <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1cd36:	7cc2      	ldrb	r2, [r0, #19]
   1cd38:	b112      	cbz	r2, 1cd40 <nrfx_qspi_init+0x38>
   1cd3a:	7d03      	ldrb	r3, [r0, #20]
   1cd3c:	2b00      	cmp	r3, #0
   1cd3e:	d170      	bne.n	1ce22 <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1cd40:	7920      	ldrb	r0, [r4, #4]
   1cd42:	28ff      	cmp	r0, #255	; 0xff
   1cd44:	f000 80bf 	beq.w	1cec6 <nrfx_qspi_init+0x1be>
   1cd48:	7963      	ldrb	r3, [r4, #5]
   1cd4a:	2bff      	cmp	r3, #255	; 0xff
   1cd4c:	f000 80bb 	beq.w	1cec6 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1cd50:	79a3      	ldrb	r3, [r4, #6]
   1cd52:	2bff      	cmp	r3, #255	; 0xff
   1cd54:	f000 80b7 	beq.w	1cec6 <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1cd58:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1cd5a:	29ff      	cmp	r1, #255	; 0xff
   1cd5c:	f000 80b3 	beq.w	1cec6 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1cd60:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1cd62:	f8df c178 	ldr.w	ip, [pc, #376]	; 1cedc <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1cd66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1cd6a:	4563      	cmp	r3, ip
   1cd6c:	f040 80ab 	bne.w	1cec6 <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1cd70:	290e      	cmp	r1, #14
   1cd72:	f040 80a8 	bne.w	1cec6 <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1cd76:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1cd78:	2bff      	cmp	r3, #255	; 0xff
   1cd7a:	d002      	beq.n	1cd82 <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1cd7c:	2b0f      	cmp	r3, #15
   1cd7e:	f040 80a2 	bne.w	1cec6 <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1cd82:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1cd84:	2bff      	cmp	r3, #255	; 0xff
   1cd86:	d002      	beq.n	1cd8e <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1cd88:	2b10      	cmp	r3, #16
   1cd8a:	f040 809c 	bne.w	1cec6 <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1cd8e:	b9d2      	cbnz	r2, 1cdc6 <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1cd90:	2103      	movs	r1, #3
   1cd92:	f7ff ff2f 	bl	1cbf4 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1cd96:	2103      	movs	r1, #3
   1cd98:	7960      	ldrb	r0, [r4, #5]
   1cd9a:	f7ff ff2b 	bl	1cbf4 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1cd9e:	2103      	movs	r1, #3
   1cda0:	79a0      	ldrb	r0, [r4, #6]
   1cda2:	f7ff ff27 	bl	1cbf4 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1cda6:	79e0      	ldrb	r0, [r4, #7]
   1cda8:	2103      	movs	r1, #3
   1cdaa:	f7ff ff23 	bl	1cbf4 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1cdae:	7a20      	ldrb	r0, [r4, #8]
   1cdb0:	28ff      	cmp	r0, #255	; 0xff
   1cdb2:	d002      	beq.n	1cdba <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1cdb4:	2103      	movs	r1, #3
   1cdb6:	f7ff ff1d 	bl	1cbf4 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1cdba:	7a60      	ldrb	r0, [r4, #9]
   1cdbc:	28ff      	cmp	r0, #255	; 0xff
   1cdbe:	d002      	beq.n	1cdc6 <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1cdc0:	2103      	movs	r1, #3
   1cdc2:	f7ff ff17 	bl	1cbf4 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1cdc6:	7d23      	ldrb	r3, [r4, #20]
   1cdc8:	bb5b      	cbnz	r3, 1ce22 <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1cdca:	7923      	ldrb	r3, [r4, #4]
   1cdcc:	2bff      	cmp	r3, #255	; 0xff
   1cdce:	bf14      	ite	ne
   1cdd0:	461a      	movne	r2, r3
   1cdd2:	f04f 32ff 	moveq.w	r2, #4294967295
   1cdd6:	4b42      	ldr	r3, [pc, #264]	; (1cee0 <nrfx_qspi_init+0x1d8>)
   1cdd8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1cddc:	7962      	ldrb	r2, [r4, #5]
   1cdde:	2aff      	cmp	r2, #255	; 0xff
   1cde0:	bf08      	it	eq
   1cde2:	f04f 32ff 	moveq.w	r2, #4294967295
   1cde6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1cdea:	79a2      	ldrb	r2, [r4, #6]
   1cdec:	2aff      	cmp	r2, #255	; 0xff
   1cdee:	bf08      	it	eq
   1cdf0:	f04f 32ff 	moveq.w	r2, #4294967295
   1cdf4:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1cdf8:	79e2      	ldrb	r2, [r4, #7]
   1cdfa:	2aff      	cmp	r2, #255	; 0xff
   1cdfc:	bf08      	it	eq
   1cdfe:	f04f 32ff 	moveq.w	r2, #4294967295
   1ce02:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1ce06:	7a22      	ldrb	r2, [r4, #8]
   1ce08:	2aff      	cmp	r2, #255	; 0xff
   1ce0a:	bf08      	it	eq
   1ce0c:	f04f 32ff 	moveq.w	r2, #4294967295
   1ce10:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1ce14:	7a62      	ldrb	r2, [r4, #9]
   1ce16:	2aff      	cmp	r2, #255	; 0xff
   1ce18:	bf08      	it	eq
   1ce1a:	f04f 32ff 	moveq.w	r2, #4294967295
   1ce1e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1ce22:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1ce24:	4a2e      	ldr	r2, [pc, #184]	; (1cee0 <nrfx_qspi_init+0x1d8>)
   1ce26:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1ce2a:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1ce2c:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1ce2e:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1ce30:	019b      	lsls	r3, r3, #6
   1ce32:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1ce36:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1ce38:	7b61      	ldrb	r1, [r4, #13]
   1ce3a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1ce3e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1ce42:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1ce44:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1ce48:	bbb1      	cbnz	r1, 1ceb8 <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1ce4a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1ce4e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1ce52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1ce56:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1ce5a:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1ce5e:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1ce60:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1ce64:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1ce68:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1ce6a:	7be1      	ldrb	r1, [r4, #15]
   1ce6c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1ce70:	7c21      	ldrb	r1, [r4, #16]
   1ce72:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1ce76:	7c61      	ldrb	r1, [r4, #17]
   1ce78:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1ce7c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ce80:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1ce82:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ce86:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1ce8a:	2301      	movs	r3, #1
   1ce8c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1ce90:	b115      	cbz	r5, 1ce98 <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1ce92:	202b      	movs	r0, #43	; 0x2b
   1ce94:	f7f2 fabe 	bl	f414 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1ce98:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ce9a:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1ce9c:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1cea0:	4b0f      	ldr	r3, [pc, #60]	; (1cee0 <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1cea2:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1cea6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ceaa:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ceae:	601a      	str	r2, [r3, #0]
}
   1ceb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1ceb4:	f7ff be74 	b.w	1cba0 <qspi_ready_wait>
        regval &= ~(1 << 17);
   1ceb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1cebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1cec0:	e7c5      	b.n	1ce4e <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1cec2:	4808      	ldr	r0, [pc, #32]	; (1cee4 <nrfx_qspi_init+0x1dc>)
}
   1cec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1cec6:	4808      	ldr	r0, [pc, #32]	; (1cee8 <nrfx_qspi_init+0x1e0>)
   1cec8:	e7fc      	b.n	1cec4 <nrfx_qspi_init+0x1bc>
   1ceca:	bf00      	nop
   1cecc:	0002ec38 	.word	0x0002ec38
   1ced0:	0002a669 	.word	0x0002a669
   1ced4:	0002ed27 	.word	0x0002ed27
   1ced8:	20021308 	.word	0x20021308
   1cedc:	000d1211 	.word	0x000d1211
   1cee0:	4002b000 	.word	0x4002b000
   1cee4:	0bad0005 	.word	0x0bad0005
   1cee8:	0bad0004 	.word	0x0bad0004

0001ceec <nrfx_qspi_cinstr_xfer>:
{
   1ceec:	b570      	push	{r4, r5, r6, lr}
   1ceee:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1cef0:	4a26      	ldr	r2, [pc, #152]	; (1cf8c <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1cef2:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1cef4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1cef8:	b95a      	cbnz	r2, 1cf12 <nrfx_qspi_cinstr_xfer+0x26>
   1cefa:	4925      	ldr	r1, [pc, #148]	; (1cf90 <nrfx_qspi_cinstr_xfer+0xa4>)
   1cefc:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1cf00:	4a24      	ldr	r2, [pc, #144]	; (1cf94 <nrfx_qspi_cinstr_xfer+0xa8>)
   1cf02:	4825      	ldr	r0, [pc, #148]	; (1cf98 <nrfx_qspi_cinstr_xfer+0xac>)
   1cf04:	f007 f88d 	bl	24022 <assert_print>
   1cf08:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1cf0c:	4821      	ldr	r0, [pc, #132]	; (1cf94 <nrfx_qspi_cinstr_xfer+0xa8>)
   1cf0e:	f007 f881 	bl	24014 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1cf12:	2a01      	cmp	r2, #1
   1cf14:	d137      	bne.n	1cf86 <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cf16:	2200      	movs	r2, #0
   1cf18:	4e20      	ldr	r6, [pc, #128]	; (1cf9c <nrfx_qspi_cinstr_xfer+0xb0>)
   1cf1a:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1cf1e:	b111      	cbz	r1, 1cf26 <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1cf20:	7840      	ldrb	r0, [r0, #1]
   1cf22:	f7ff febf 	bl	1cca4 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1cf26:	2301      	movs	r3, #1
   1cf28:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1cf2c:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1cf2e:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1cf30:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1cf32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1cf36:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1cf38:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1cf3a:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1cf3c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1cf40:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1cf42:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1cf46:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1cf48:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1cf4c:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1cf50:	f7ff fe26 	bl	1cba0 <qspi_ready_wait>
   1cf54:	4b12      	ldr	r3, [pc, #72]	; (1cfa0 <nrfx_qspi_cinstr_xfer+0xb4>)
   1cf56:	4298      	cmp	r0, r3
   1cf58:	d10b      	bne.n	1cf72 <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   1cf5a:	792b      	ldrb	r3, [r5, #4]
   1cf5c:	b993      	cbnz	r3, 1cf84 <nrfx_qspi_cinstr_xfer+0x98>
   1cf5e:	4911      	ldr	r1, [pc, #68]	; (1cfa4 <nrfx_qspi_cinstr_xfer+0xb8>)
   1cf60:	f240 136b 	movw	r3, #363	; 0x16b
   1cf64:	4a0b      	ldr	r2, [pc, #44]	; (1cf94 <nrfx_qspi_cinstr_xfer+0xa8>)
   1cf66:	480c      	ldr	r0, [pc, #48]	; (1cf98 <nrfx_qspi_cinstr_xfer+0xac>)
   1cf68:	f007 f85b 	bl	24022 <assert_print>
   1cf6c:	f240 116b 	movw	r1, #363	; 0x16b
   1cf70:	e7cc      	b.n	1cf0c <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cf72:	2300      	movs	r3, #0
   1cf74:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   1cf78:	b11c      	cbz	r4, 1cf82 <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   1cf7a:	4621      	mov	r1, r4
   1cf7c:	7868      	ldrb	r0, [r5, #1]
   1cf7e:	f7ff fe71 	bl	1cc64 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   1cf82:	4809      	ldr	r0, [pc, #36]	; (1cfa8 <nrfx_qspi_cinstr_xfer+0xbc>)
}
   1cf84:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   1cf86:	4809      	ldr	r0, [pc, #36]	; (1cfac <nrfx_qspi_cinstr_xfer+0xc0>)
   1cf88:	e7fc      	b.n	1cf84 <nrfx_qspi_cinstr_xfer+0x98>
   1cf8a:	bf00      	nop
   1cf8c:	20021308 	.word	0x20021308
   1cf90:	0002ed63 	.word	0x0002ed63
   1cf94:	0002ed27 	.word	0x0002ed27
   1cf98:	0002a669 	.word	0x0002a669
   1cf9c:	4002b000 	.word	0x4002b000
   1cfa0:	0bad0007 	.word	0x0bad0007
   1cfa4:	0002eda7 	.word	0x0002eda7
   1cfa8:	0bad0000 	.word	0x0bad0000
   1cfac:	0bad000b 	.word	0x0bad000b

0001cfb0 <nrfx_qspi_mem_busy_check>:
{
   1cfb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   1cfb2:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   1cfb4:	4a0c      	ldr	r2, [pc, #48]	; (1cfe8 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1cfb6:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   1cfb8:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1cfba:	f10d 0207 	add.w	r2, sp, #7
   1cfbe:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   1cfc0:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   1cfc4:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1cfc8:	f7ff ff90 	bl	1ceec <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   1cfcc:	4b07      	ldr	r3, [pc, #28]	; (1cfec <nrfx_qspi_mem_busy_check+0x3c>)
   1cfce:	4298      	cmp	r0, r3
   1cfd0:	d106      	bne.n	1cfe0 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   1cfd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   1cfd6:	f013 0f01 	tst.w	r3, #1
   1cfda:	4b05      	ldr	r3, [pc, #20]	; (1cff0 <nrfx_qspi_mem_busy_check+0x40>)
   1cfdc:	bf18      	it	ne
   1cfde:	4618      	movne	r0, r3
}
   1cfe0:	b005      	add	sp, #20
   1cfe2:	f85d fb04 	ldr.w	pc, [sp], #4
   1cfe6:	bf00      	nop
   1cfe8:	01000205 	.word	0x01000205
   1cfec:	0bad0000 	.word	0x0bad0000
   1cff0:	0bad000b 	.word	0x0bad000b

0001cff4 <nrfx_qspi_uninit>:
{
   1cff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1cff8:	4e29      	ldr	r6, [pc, #164]	; (1d0a0 <nrfx_qspi_uninit+0xac>)
   1cffa:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1cffe:	b95b      	cbnz	r3, 1d018 <nrfx_qspi_uninit+0x24>
   1d000:	4928      	ldr	r1, [pc, #160]	; (1d0a4 <nrfx_qspi_uninit+0xb0>)
   1d002:	4829      	ldr	r0, [pc, #164]	; (1d0a8 <nrfx_qspi_uninit+0xb4>)
   1d004:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   1d008:	4a28      	ldr	r2, [pc, #160]	; (1d0ac <nrfx_qspi_uninit+0xb8>)
   1d00a:	f007 f80a 	bl	24022 <assert_print>
   1d00e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1d012:	4826      	ldr	r0, [pc, #152]	; (1d0ac <nrfx_qspi_uninit+0xb8>)
   1d014:	f006 fffe 	bl	24014 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   1d018:	202b      	movs	r0, #43	; 0x2b
   1d01a:	f7f2 fa09 	bl	f430 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   1d01e:	4b24      	ldr	r3, [pc, #144]	; (1d0b0 <nrfx_qspi_uninit+0xbc>)
   1d020:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   1d024:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   1d028:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   1d02c:	bf04      	itt	eq
   1d02e:	4a21      	ldreq	r2, [pc, #132]	; (1d0b4 <nrfx_qspi_uninit+0xc0>)
   1d030:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   1d034:	2201      	movs	r2, #1
   1d036:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d03a:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   1d03c:	2200      	movs	r2, #0
   1d03e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d042:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   1d046:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   1d04a:	bb22      	cbnz	r2, 1d096 <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   1d04c:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   1d050:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   1d054:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   1d056:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   1d05a:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   1d05e:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   1d062:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   1d066:	f00a fc2e 	bl	278c6 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   1d06a:	fa5f f089 	uxtb.w	r0, r9
   1d06e:	f00a fc2a 	bl	278c6 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   1d072:	fa5f f088 	uxtb.w	r0, r8
   1d076:	f00a fc26 	bl	278c6 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   1d07a:	b2f8      	uxtb	r0, r7
   1d07c:	f00a fc23 	bl	278c6 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1d080:	b2e8      	uxtb	r0, r5
   1d082:	28ff      	cmp	r0, #255	; 0xff
   1d084:	b2e4      	uxtb	r4, r4
   1d086:	d001      	beq.n	1d08c <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   1d088:	f00a fc1d 	bl	278c6 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1d08c:	2cff      	cmp	r4, #255	; 0xff
   1d08e:	d002      	beq.n	1d096 <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   1d090:	4620      	mov	r0, r4
   1d092:	f00a fc18 	bl	278c6 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   1d096:	2300      	movs	r3, #0
   1d098:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   1d09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d0a0:	20021308 	.word	0x20021308
   1d0a4:	0002ed63 	.word	0x0002ed63
   1d0a8:	0002a669 	.word	0x0002a669
   1d0ac:	0002ed27 	.word	0x0002ed27
   1d0b0:	4002b000 	.word	0x4002b000
   1d0b4:	00030100 	.word	0x00030100

0001d0b8 <nrfx_qspi_erase>:
{
   1d0b8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1d0ba:	4a1a      	ldr	r2, [pc, #104]	; (1d124 <nrfx_qspi_erase+0x6c>)
   1d0bc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1d0c0:	b95b      	cbnz	r3, 1d0da <nrfx_qspi_erase+0x22>
   1d0c2:	4919      	ldr	r1, [pc, #100]	; (1d128 <nrfx_qspi_erase+0x70>)
   1d0c4:	4819      	ldr	r0, [pc, #100]	; (1d12c <nrfx_qspi_erase+0x74>)
   1d0c6:	f44f 730a 	mov.w	r3, #552	; 0x228
   1d0ca:	4a19      	ldr	r2, [pc, #100]	; (1d130 <nrfx_qspi_erase+0x78>)
   1d0cc:	f006 ffa9 	bl	24022 <assert_print>
   1d0d0:	f44f 710a 	mov.w	r1, #552	; 0x228
   1d0d4:	4816      	ldr	r0, [pc, #88]	; (1d130 <nrfx_qspi_erase+0x78>)
   1d0d6:	f006 ff9d 	bl	24014 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   1d0da:	078c      	lsls	r4, r1, #30
   1d0dc:	d11e      	bne.n	1d11c <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   1d0de:	6814      	ldr	r4, [r2, #0]
   1d0e0:	b10c      	cbz	r4, 1d0e6 <nrfx_qspi_erase+0x2e>
   1d0e2:	2b01      	cmp	r3, #1
   1d0e4:	d11c      	bne.n	1d120 <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   1d0e6:	2304      	movs	r3, #4
   1d0e8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   1d0ec:	4b11      	ldr	r3, [pc, #68]	; (1d134 <nrfx_qspi_erase+0x7c>)
   1d0ee:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d0f2:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   1d0f4:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d0f8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d0fc:	2101      	movs	r1, #1
   1d0fe:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   1d100:	6810      	ldr	r0, [r2, #0]
   1d102:	b940      	cbnz	r0, 1d116 <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d104:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1d108:	2900      	cmp	r1, #0
   1d10a:	d0fb      	beq.n	1d104 <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   1d10c:	2301      	movs	r3, #1
   1d10e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   1d112:	4809      	ldr	r0, [pc, #36]	; (1d138 <nrfx_qspi_erase+0x80>)
}
   1d114:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   1d116:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   1d11a:	e7fa      	b.n	1d112 <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   1d11c:	4807      	ldr	r0, [pc, #28]	; (1d13c <nrfx_qspi_erase+0x84>)
   1d11e:	e7f9      	b.n	1d114 <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   1d120:	4807      	ldr	r0, [pc, #28]	; (1d140 <nrfx_qspi_erase+0x88>)
   1d122:	e7f7      	b.n	1d114 <nrfx_qspi_erase+0x5c>
   1d124:	20021308 	.word	0x20021308
   1d128:	0002ed63 	.word	0x0002ed63
   1d12c:	0002a669 	.word	0x0002a669
   1d130:	0002ed27 	.word	0x0002ed27
   1d134:	4002b000 	.word	0x4002b000
   1d138:	0bad0000 	.word	0x0bad0000
   1d13c:	0bad000a 	.word	0x0bad000a
   1d140:	0bad000b 	.word	0x0bad000b

0001d144 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   1d144:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d146:	4b17      	ldr	r3, [pc, #92]	; (1d1a4 <nrfx_qspi_irq_handler+0x60>)
   1d148:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1d14c:	b1e2      	cbz	r2, 1d188 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d14e:	2200      	movs	r2, #0
    switch (m_cb.state)
   1d150:	4c15      	ldr	r4, [pc, #84]	; (1d1a8 <nrfx_qspi_irq_handler+0x64>)
   1d152:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d156:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   1d15a:	2a03      	cmp	r2, #3
   1d15c:	d015      	beq.n	1d18a <nrfx_qspi_irq_handler+0x46>
   1d15e:	2a04      	cmp	r2, #4
   1d160:	d015      	beq.n	1d18e <nrfx_qspi_irq_handler+0x4a>
   1d162:	2a02      	cmp	r2, #2
   1d164:	d104      	bne.n	1d170 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   1d166:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1d168:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   1d16c:	f7ff fd2e 	bl	1cbcc <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   1d170:	68a3      	ldr	r3, [r4, #8]
   1d172:	b913      	cbnz	r3, 1d17a <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   1d174:	2301      	movs	r3, #1
   1d176:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   1d17a:	e9d4 3100 	ldrd	r3, r1, [r4]
   1d17e:	2000      	movs	r0, #0
   1d180:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   1d182:	2300      	movs	r3, #0
   1d184:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   1d188:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1d18a:	2302      	movs	r3, #2
   1d18c:	e7ec      	b.n	1d168 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   1d18e:	2203      	movs	r2, #3
   1d190:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   1d194:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   1d198:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   1d19a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1d19e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1d1a2:	e7e5      	b.n	1d170 <nrfx_qspi_irq_handler+0x2c>
   1d1a4:	4002b000 	.word	0x4002b000
   1d1a8:	20021308 	.word	0x20021308

0001d1ac <nrf_gpio_pin_port_decode>:
{
   1d1ac:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d1ae:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1d1b0:	095a      	lsrs	r2, r3, #5
   1d1b2:	d00d      	beq.n	1d1d0 <nrf_gpio_pin_port_decode+0x24>
   1d1b4:	2a01      	cmp	r2, #1
   1d1b6:	d013      	beq.n	1d1e0 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d1b8:	490e      	ldr	r1, [pc, #56]	; (1d1f4 <nrf_gpio_pin_port_decode+0x48>)
   1d1ba:	480f      	ldr	r0, [pc, #60]	; (1d1f8 <nrf_gpio_pin_port_decode+0x4c>)
   1d1bc:	f240 2347 	movw	r3, #583	; 0x247
   1d1c0:	4a0e      	ldr	r2, [pc, #56]	; (1d1fc <nrf_gpio_pin_port_decode+0x50>)
   1d1c2:	f006 ff2e 	bl	24022 <assert_print>
   1d1c6:	f240 2147 	movw	r1, #583	; 0x247
   1d1ca:	480c      	ldr	r0, [pc, #48]	; (1d1fc <nrf_gpio_pin_port_decode+0x50>)
   1d1cc:	f006 ff22 	bl	24014 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1d1d0:	f04f 32ff 	mov.w	r2, #4294967295
   1d1d4:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d1d8:	07d9      	lsls	r1, r3, #31
   1d1da:	d5ed      	bpl.n	1d1b8 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1d1dc:	4808      	ldr	r0, [pc, #32]	; (1d200 <nrf_gpio_pin_port_decode+0x54>)
   1d1de:	e008      	b.n	1d1f2 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1d1e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1d1e4:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d1e8:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d1ea:	07d2      	lsls	r2, r2, #31
   1d1ec:	d5e4      	bpl.n	1d1b8 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1d1ee:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1d1f0:	4804      	ldr	r0, [pc, #16]	; (1d204 <nrf_gpio_pin_port_decode+0x58>)
}
   1d1f2:	bd08      	pop	{r3, pc}
   1d1f4:	0002e276 	.word	0x0002e276
   1d1f8:	0002a669 	.word	0x0002a669
   1d1fc:	0002e243 	.word	0x0002e243
   1d200:	40842500 	.word	0x40842500
   1d204:	40842800 	.word	0x40842800

0001d208 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   1d208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d20c:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   1d20e:	460c      	mov	r4, r1
   1d210:	b959      	cbnz	r1, 1d22a <nrfx_spim_init+0x22>
   1d212:	498d      	ldr	r1, [pc, #564]	; (1d448 <nrfx_spim_init+0x240>)
   1d214:	488d      	ldr	r0, [pc, #564]	; (1d44c <nrfx_spim_init+0x244>)
   1d216:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   1d21a:	4a8d      	ldr	r2, [pc, #564]	; (1d450 <nrfx_spim_init+0x248>)
   1d21c:	f006 ff01 	bl	24022 <assert_print>
   1d220:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   1d224:	488a      	ldr	r0, [pc, #552]	; (1d450 <nrfx_spim_init+0x248>)
   1d226:	f006 fef5 	bl	24014 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1d22a:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1d22c:	4d89      	ldr	r5, [pc, #548]	; (1d454 <nrfx_spim_init+0x24c>)
   1d22e:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   1d232:	7f09      	ldrb	r1, [r1, #28]
   1d234:	2900      	cmp	r1, #0
   1d236:	f040 8100 	bne.w	1d43a <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   1d23a:	2f00      	cmp	r7, #0
   1d23c:	f040 80ff 	bne.w	1d43e <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1d240:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1d244:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   1d246:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1d248:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1d24c:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1d24e:	d027      	beq.n	1d2a0 <nrfx_spim_init+0x98>
   1d250:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   1d254:	d124      	bne.n	1d2a0 <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1d256:	b119      	cbz	r1, 1d260 <nrfx_spim_init+0x58>
   1d258:	7d20      	ldrb	r0, [r4, #20]
   1d25a:	2800      	cmp	r0, #0
   1d25c:	f040 80d5 	bne.w	1d40a <nrfx_spim_init+0x202>
   1d260:	487d      	ldr	r0, [pc, #500]	; (1d458 <nrfx_spim_init+0x250>)
   1d262:	4581      	cmp	r9, r0
   1d264:	d11c      	bne.n	1d2a0 <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1d266:	7820      	ldrb	r0, [r4, #0]
   1d268:	28ff      	cmp	r0, #255	; 0xff
   1d26a:	d002      	beq.n	1d272 <nrfx_spim_init+0x6a>
   1d26c:	2808      	cmp	r0, #8
   1d26e:	f040 80e8 	bne.w	1d442 <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1d272:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1d274:	28ff      	cmp	r0, #255	; 0xff
   1d276:	d002      	beq.n	1d27e <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1d278:	280b      	cmp	r0, #11
   1d27a:	f040 80e2 	bne.w	1d442 <nrfx_spim_init+0x23a>
   1d27e:	2eff      	cmp	r6, #255	; 0xff
   1d280:	d002      	beq.n	1d288 <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1d282:	2e0c      	cmp	r6, #12
   1d284:	f040 80dd 	bne.w	1d442 <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1d288:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1d28a:	28ff      	cmp	r0, #255	; 0xff
   1d28c:	d002      	beq.n	1d294 <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1d28e:	2809      	cmp	r0, #9
   1d290:	f040 80d7 	bne.w	1d442 <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1d294:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1d296:	28ff      	cmp	r0, #255	; 0xff
   1d298:	d002      	beq.n	1d2a0 <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1d29a:	280a      	cmp	r0, #10
   1d29c:	f040 80d1 	bne.w	1d442 <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1d2a0:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1d2a4:	7fab      	ldrb	r3, [r5, #30]
   1d2a6:	f361 0300 	bfi	r3, r1, #0, #1
   1d2aa:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   1d2ac:	7922      	ldrb	r2, [r4, #4]
   1d2ae:	b2db      	uxtb	r3, r3
   1d2b0:	f362 0341 	bfi	r3, r2, #1, #1
   1d2b4:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   1d2b6:	7c62      	ldrb	r2, [r4, #17]
   1d2b8:	b2db      	uxtb	r3, r3
   1d2ba:	f362 0382 	bfi	r3, r2, #2, #1
   1d2be:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   1d2c0:	78e3      	ldrb	r3, [r4, #3]
   1d2c2:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   1d2c4:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1d2c6:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   1d2ca:	2b00      	cmp	r3, #0
   1d2cc:	d142      	bne.n	1d354 <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   1d2ce:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   1d2d0:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   1d2d2:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   1d2d6:	7b23      	ldrb	r3, [r4, #12]
   1d2d8:	bf08      	it	eq
   1d2da:	2703      	moveq	r7, #3
   1d2dc:	2b01      	cmp	r3, #1
   1d2de:	f200 8096 	bhi.w	1d40e <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   1d2e2:	f00a fafd 	bl	278e0 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1d2e6:	2300      	movs	r3, #0
   1d2e8:	9700      	str	r7, [sp, #0]
   1d2ea:	7820      	ldrb	r0, [r4, #0]
   1d2ec:	461a      	mov	r2, r3
   1d2ee:	2101      	movs	r1, #1
   1d2f0:	f00a fb1e 	bl	27930 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1d2f4:	7860      	ldrb	r0, [r4, #1]
   1d2f6:	28ff      	cmp	r0, #255	; 0xff
   1d2f8:	d008      	beq.n	1d30c <nrfx_spim_init+0x104>
   1d2fa:	f00a faf1 	bl	278e0 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   1d2fe:	2201      	movs	r2, #1
   1d300:	9700      	str	r7, [sp, #0]
   1d302:	2300      	movs	r3, #0
   1d304:	4611      	mov	r1, r2
   1d306:	7860      	ldrb	r0, [r4, #1]
   1d308:	f00a fb12 	bl	27930 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1d30c:	78a0      	ldrb	r0, [r4, #2]
   1d30e:	28ff      	cmp	r0, #255	; 0xff
   1d310:	d005      	beq.n	1d31e <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   1d312:	2200      	movs	r2, #0
   1d314:	9700      	str	r7, [sp, #0]
   1d316:	4611      	mov	r1, r2
   1d318:	7ba3      	ldrb	r3, [r4, #14]
   1d31a:	f00a fb09 	bl	27930 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1d31e:	78e0      	ldrb	r0, [r4, #3]
   1d320:	28ff      	cmp	r0, #255	; 0xff
   1d322:	d00b      	beq.n	1d33c <nrfx_spim_init+0x134>
    if (value == 0)
   1d324:	7923      	ldrb	r3, [r4, #4]
   1d326:	2b00      	cmp	r3, #0
   1d328:	d074      	beq.n	1d414 <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   1d32a:	f00a fad9 	bl	278e0 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   1d32e:	2201      	movs	r2, #1
   1d330:	9700      	str	r7, [sp, #0]
   1d332:	2300      	movs	r3, #0
   1d334:	4611      	mov	r1, r2
   1d336:	78e0      	ldrb	r0, [r4, #3]
   1d338:	f00a fafa 	bl	27930 <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1d33c:	7be0      	ldrb	r0, [r4, #15]
   1d33e:	28ff      	cmp	r0, #255	; 0xff
   1d340:	d008      	beq.n	1d354 <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   1d342:	f00a fad9 	bl	278f8 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   1d346:	2201      	movs	r2, #1
   1d348:	9700      	str	r7, [sp, #0]
   1d34a:	2300      	movs	r3, #0
   1d34c:	4611      	mov	r1, r2
   1d34e:	7be0      	ldrb	r0, [r4, #15]
   1d350:	f00a faee 	bl	27930 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1d354:	7d23      	ldrb	r3, [r4, #20]
   1d356:	bb6b      	cbnz	r3, 1d3b4 <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1d358:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1d35a:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1d35c:	2bff      	cmp	r3, #255	; 0xff
   1d35e:	bf18      	it	ne
   1d360:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1d362:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1d364:	bf08      	it	eq
   1d366:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1d36a:	2bff      	cmp	r3, #255	; 0xff
   1d36c:	bf08      	it	eq
   1d36e:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   1d372:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1d376:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1d37a:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1d37e:	f898 3004 	ldrb.w	r3, [r8, #4]
   1d382:	b9bb      	cbnz	r3, 1d3b4 <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   1d384:	78e3      	ldrb	r3, [r4, #3]
   1d386:	2bff      	cmp	r3, #255	; 0xff
   1d388:	d047      	beq.n	1d41a <nrfx_spim_init+0x212>
   1d38a:	7c62      	ldrb	r2, [r4, #17]
   1d38c:	2a00      	cmp	r2, #0
   1d38e:	d044      	beq.n	1d41a <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   1d390:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   1d392:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   1d394:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1d398:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1d39c:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1d3a0:	f898 3004 	ldrb.w	r3, [r8, #4]
   1d3a4:	b933      	cbnz	r3, 1d3b4 <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1d3a6:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   1d3a8:	2bff      	cmp	r3, #255	; 0xff
   1d3aa:	bf08      	it	eq
   1d3ac:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   1d3b0:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   1d3b4:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   1d3b6:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1d3ba:	68a3      	ldr	r3, [r4, #8]
   1d3bc:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1d3c0:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1d3c2:	7b22      	ldrb	r2, [r4, #12]
   1d3c4:	3b00      	subs	r3, #0
   1d3c6:	bf18      	it	ne
   1d3c8:	2301      	movne	r3, #1
    switch (spi_mode)
   1d3ca:	2a02      	cmp	r2, #2
   1d3cc:	d02f      	beq.n	1d42e <nrfx_spim_init+0x226>
   1d3ce:	2a03      	cmp	r2, #3
   1d3d0:	d030      	beq.n	1d434 <nrfx_spim_init+0x22c>
   1d3d2:	2a01      	cmp	r2, #1
   1d3d4:	d101      	bne.n	1d3da <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1d3d6:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1d3da:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1d3de:	79a3      	ldrb	r3, [r4, #6]
   1d3e0:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1d3e4:	2307      	movs	r3, #7
   1d3e6:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   1d3ea:	682b      	ldr	r3, [r5, #0]
   1d3ec:	b12b      	cbz	r3, 1d3fa <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1d3ee:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1d3f2:	f340 3007 	sbfx	r0, r0, #12, #8
   1d3f6:	f7f2 f80d 	bl	f414 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1d3fa:	2300      	movs	r3, #0
   1d3fc:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1d3fe:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1d400:	4816      	ldr	r0, [pc, #88]	; (1d45c <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1d402:	772b      	strb	r3, [r5, #28]
}
   1d404:	b003      	add	sp, #12
   1d406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1d40a:	4601      	mov	r1, r0
   1d40c:	e748      	b.n	1d2a0 <nrfx_spim_init+0x98>
   1d40e:	f00a fa73 	bl	278f8 <nrf_gpio_pin_set>
   1d412:	e768      	b.n	1d2e6 <nrfx_spim_init+0xde>
   1d414:	f00a fa70 	bl	278f8 <nrf_gpio_pin_set>
   1d418:	e789      	b.n	1d32e <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   1d41a:	f04f 33ff 	mov.w	r3, #4294967295
   1d41e:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1d422:	2300      	movs	r3, #0
   1d424:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1d428:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   1d42c:	e7b8      	b.n	1d3a0 <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1d42e:	f043 0304 	orr.w	r3, r3, #4
        break;
   1d432:	e7d2      	b.n	1d3da <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1d434:	f043 0306 	orr.w	r3, r3, #6
        break;
   1d438:	e7cf      	b.n	1d3da <nrfx_spim_init+0x1d2>
        return err_code;
   1d43a:	4809      	ldr	r0, [pc, #36]	; (1d460 <nrfx_spim_init+0x258>)
   1d43c:	e7e2      	b.n	1d404 <nrfx_spim_init+0x1fc>
        return err_code;
   1d43e:	4809      	ldr	r0, [pc, #36]	; (1d464 <nrfx_spim_init+0x25c>)
   1d440:	e7e0      	b.n	1d404 <nrfx_spim_init+0x1fc>
            return err_code;
   1d442:	4809      	ldr	r0, [pc, #36]	; (1d468 <nrfx_spim_init+0x260>)
   1d444:	e7de      	b.n	1d404 <nrfx_spim_init+0x1fc>
   1d446:	bf00      	nop
   1d448:	0002ec38 	.word	0x0002ec38
   1d44c:	0002a669 	.word	0x0002a669
   1d450:	0002edb9 	.word	0x0002edb9
   1d454:	2002133c 	.word	0x2002133c
   1d458:	4000a000 	.word	0x4000a000
   1d45c:	0bad0000 	.word	0x0bad0000
   1d460:	0bad0005 	.word	0x0bad0005
   1d464:	0bad0003 	.word	0x0bad0003
   1d468:	0bad0004 	.word	0x0bad0004

0001d46c <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   1d46c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1d470:	4d2e      	ldr	r5, [pc, #184]	; (1d52c <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1d472:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   1d476:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1d478:	ea4f 1648 	mov.w	r6, r8, lsl #5
   1d47c:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   1d480:	f898 301c 	ldrb.w	r3, [r8, #28]
   1d484:	b95b      	cbnz	r3, 1d49e <nrfx_spim_uninit+0x32>
   1d486:	492a      	ldr	r1, [pc, #168]	; (1d530 <nrfx_spim_uninit+0xc4>)
   1d488:	482a      	ldr	r0, [pc, #168]	; (1d534 <nrfx_spim_uninit+0xc8>)
   1d48a:	f240 230f 	movw	r3, #527	; 0x20f
   1d48e:	4a2a      	ldr	r2, [pc, #168]	; (1d538 <nrfx_spim_uninit+0xcc>)
   1d490:	f006 fdc7 	bl	24022 <assert_print>
   1d494:	f240 210f 	movw	r1, #527	; 0x20f
   1d498:	4827      	ldr	r0, [pc, #156]	; (1d538 <nrfx_spim_uninit+0xcc>)
   1d49a:	f006 fdbb 	bl	24014 <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1d49e:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1d4a0:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   1d4a2:	b1cb      	cbz	r3, 1d4d8 <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1d4a4:	f344 3007 	sbfx	r0, r4, #12, #8
   1d4a8:	f7f1 ffc2 	bl	f430 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1d4ac:	4b23      	ldr	r3, [pc, #140]	; (1d53c <nrfx_spim_uninit+0xd0>)
   1d4ae:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   1d4b2:	f898 301d 	ldrb.w	r3, [r8, #29]
   1d4b6:	b17b      	cbz	r3, 1d4d8 <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d4b8:	2301      	movs	r3, #1
   1d4ba:	f04f 0864 	mov.w	r8, #100	; 0x64
   1d4be:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d4c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1d4c4:	b92b      	cbnz	r3, 1d4d2 <nrfx_spim_uninit+0x66>
   1d4c6:	2001      	movs	r0, #1
   1d4c8:	f00a f97a 	bl	277c0 <nrfx_busy_wait>
   1d4cc:	f1b8 0801 	subs.w	r8, r8, #1
   1d4d0:	d1f6      	bne.n	1d4c0 <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   1d4d2:	2200      	movs	r2, #0
   1d4d4:	19ab      	adds	r3, r5, r6
   1d4d6:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1d4d8:	2300      	movs	r3, #0
   1d4da:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1d4de:	19ab      	adds	r3, r5, r6
   1d4e0:	7f9b      	ldrb	r3, [r3, #30]
   1d4e2:	07db      	lsls	r3, r3, #31
   1d4e4:	d41b      	bmi.n	1d51e <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   1d4e6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1d4ea:	f00a fa40 	bl	2796e <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1d4ee:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1d4f2:	f00a fa3c 	bl	2796e <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   1d4f6:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1d4fa:	f00a fa38 	bl	2796e <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1d4fe:	793b      	ldrb	r3, [r7, #4]
   1d500:	b91b      	cbnz	r3, 1d50a <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   1d502:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   1d506:	f00a fa32 	bl	2796e <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1d50a:	19ab      	adds	r3, r5, r6
   1d50c:	7fd8      	ldrb	r0, [r3, #31]
   1d50e:	28ff      	cmp	r0, #255	; 0xff
   1d510:	d005      	beq.n	1d51e <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   1d512:	2300      	movs	r3, #0
   1d514:	2201      	movs	r2, #1
   1d516:	4619      	mov	r1, r3
   1d518:	9300      	str	r3, [sp, #0]
   1d51a:	f00a fa09 	bl	27930 <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1d51e:	2300      	movs	r3, #0
   1d520:	4435      	add	r5, r6
   1d522:	772b      	strb	r3, [r5, #28]
}
   1d524:	b002      	add	sp, #8
   1d526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d52a:	bf00      	nop
   1d52c:	2002133c 	.word	0x2002133c
   1d530:	0002edf5 	.word	0x0002edf5
   1d534:	0002a669 	.word	0x0002a669
   1d538:	0002edb9 	.word	0x0002edb9
   1d53c:	00080152 	.word	0x00080152

0001d540 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1d540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1d544:	4e60      	ldr	r6, [pc, #384]	; (1d6c8 <nrfx_spim_xfer+0x188>)
   1d546:	7903      	ldrb	r3, [r0, #4]
{
   1d548:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1d54a:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1d54e:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   1d552:	4607      	mov	r7, r0
   1d554:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1d556:	b95a      	cbnz	r2, 1d570 <nrfx_spim_xfer+0x30>
   1d558:	495c      	ldr	r1, [pc, #368]	; (1d6cc <nrfx_spim_xfer+0x18c>)
   1d55a:	f240 23de 	movw	r3, #734	; 0x2de
   1d55e:	4a5c      	ldr	r2, [pc, #368]	; (1d6d0 <nrfx_spim_xfer+0x190>)
   1d560:	485c      	ldr	r0, [pc, #368]	; (1d6d4 <nrfx_spim_xfer+0x194>)
   1d562:	f006 fd5e 	bl	24022 <assert_print>
   1d566:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   1d56a:	4859      	ldr	r0, [pc, #356]	; (1d6d0 <nrfx_spim_xfer+0x190>)
   1d56c:	f006 fd52 	bl	24014 <assert_post_action>
   1d570:	680a      	ldr	r2, [r1, #0]
   1d572:	b95a      	cbnz	r2, 1d58c <nrfx_spim_xfer+0x4c>
   1d574:	684a      	ldr	r2, [r1, #4]
   1d576:	b14a      	cbz	r2, 1d58c <nrfx_spim_xfer+0x4c>
   1d578:	4957      	ldr	r1, [pc, #348]	; (1d6d8 <nrfx_spim_xfer+0x198>)
   1d57a:	f240 23df 	movw	r3, #735	; 0x2df
   1d57e:	4a54      	ldr	r2, [pc, #336]	; (1d6d0 <nrfx_spim_xfer+0x190>)
   1d580:	4854      	ldr	r0, [pc, #336]	; (1d6d4 <nrfx_spim_xfer+0x194>)
   1d582:	f006 fd4e 	bl	24022 <assert_print>
   1d586:	f240 21df 	movw	r1, #735	; 0x2df
   1d58a:	e7ee      	b.n	1d56a <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   1d58c:	68a2      	ldr	r2, [r4, #8]
   1d58e:	b96a      	cbnz	r2, 1d5ac <nrfx_spim_xfer+0x6c>
   1d590:	68e2      	ldr	r2, [r4, #12]
   1d592:	2a00      	cmp	r2, #0
   1d594:	f000 8094 	beq.w	1d6c0 <nrfx_spim_xfer+0x180>
   1d598:	4950      	ldr	r1, [pc, #320]	; (1d6dc <nrfx_spim_xfer+0x19c>)
   1d59a:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   1d59e:	4a4c      	ldr	r2, [pc, #304]	; (1d6d0 <nrfx_spim_xfer+0x190>)
   1d5a0:	484c      	ldr	r0, [pc, #304]	; (1d6d4 <nrfx_spim_xfer+0x194>)
   1d5a2:	f006 fd3e 	bl	24022 <assert_print>
   1d5a6:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   1d5aa:	e7de      	b.n	1d56a <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1d5ac:	b93b      	cbnz	r3, 1d5be <nrfx_spim_xfer+0x7e>
   1d5ae:	68e3      	ldr	r3, [r4, #12]
   1d5b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1d5b4:	d203      	bcs.n	1d5be <nrfx_spim_xfer+0x7e>
   1d5b6:	6863      	ldr	r3, [r4, #4]
   1d5b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1d5bc:	d309      	bcc.n	1d5d2 <nrfx_spim_xfer+0x92>
   1d5be:	4948      	ldr	r1, [pc, #288]	; (1d6e0 <nrfx_spim_xfer+0x1a0>)
   1d5c0:	f240 23e1 	movw	r3, #737	; 0x2e1
   1d5c4:	4a42      	ldr	r2, [pc, #264]	; (1d6d0 <nrfx_spim_xfer+0x190>)
   1d5c6:	4843      	ldr	r0, [pc, #268]	; (1d6d4 <nrfx_spim_xfer+0x194>)
   1d5c8:	f006 fd2b 	bl	24022 <assert_print>
   1d5cc:	f240 21e1 	movw	r1, #737	; 0x2e1
   1d5d0:	e7cb      	b.n	1d56a <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   1d5d2:	f015 0908 	ands.w	r9, r5, #8
   1d5d6:	d00f      	beq.n	1d5f8 <nrfx_spim_xfer+0xb8>
   1d5d8:	7fb3      	ldrb	r3, [r6, #30]
   1d5da:	075b      	lsls	r3, r3, #29
   1d5dc:	d40c      	bmi.n	1d5f8 <nrfx_spim_xfer+0xb8>
   1d5de:	7ff3      	ldrb	r3, [r6, #31]
   1d5e0:	2bff      	cmp	r3, #255	; 0xff
   1d5e2:	d009      	beq.n	1d5f8 <nrfx_spim_xfer+0xb8>
   1d5e4:	493f      	ldr	r1, [pc, #252]	; (1d6e4 <nrfx_spim_xfer+0x1a4>)
   1d5e6:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   1d5ea:	4a39      	ldr	r2, [pc, #228]	; (1d6d0 <nrfx_spim_xfer+0x190>)
   1d5ec:	4839      	ldr	r0, [pc, #228]	; (1d6d4 <nrfx_spim_xfer+0x194>)
   1d5ee:	f006 fd18 	bl	24022 <assert_print>
   1d5f2:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   1d5f6:	e7b8      	b.n	1d56a <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1d5f8:	7f73      	ldrb	r3, [r6, #29]
   1d5fa:	2b00      	cmp	r3, #0
   1d5fc:	d15e      	bne.n	1d6bc <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   1d5fe:	6833      	ldr	r3, [r6, #0]
   1d600:	b123      	cbz	r3, 1d60c <nrfx_spim_xfer+0xcc>
   1d602:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   1d606:	bf04      	itt	eq
   1d608:	2301      	moveq	r3, #1
   1d60a:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1d60c:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1d6e8 <nrfx_spim_xfer+0x1a8>
   1d610:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1d614:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   1d618:	2101      	movs	r1, #1
   1d61a:	4640      	mov	r0, r8
   1d61c:	f00a f978 	bl	27910 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1d620:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   1d622:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1d624:	b121      	cbz	r1, 1d630 <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1d626:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   1d62a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1d62e:	d106      	bne.n	1d63e <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1d630:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1d632:	b14a      	cbz	r2, 1d648 <nrfx_spim_xfer+0x108>
   1d634:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1d638:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1d63c:	d004      	beq.n	1d648 <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   1d63e:	2300      	movs	r3, #0
        return err_code;
   1d640:	482a      	ldr	r0, [pc, #168]	; (1d6ec <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   1d642:	7773      	strb	r3, [r6, #29]
}
   1d644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1d648:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d64a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d64e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d652:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   1d656:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d65a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d65e:	2200      	movs	r2, #0
   1d660:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1d664:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1d668:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1d66c:	bf18      	it	ne
   1d66e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1d670:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1d674:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1d678:	bf18      	it	ne
   1d67a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1d67c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   1d680:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1d682:	f1b9 0f00 	cmp.w	r9, #0
   1d686:	d006      	beq.n	1d696 <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   1d688:	b96a      	cbnz	r2, 1d6a6 <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   1d68a:	2100      	movs	r1, #0
   1d68c:	4640      	mov	r0, r8
   1d68e:	f00a f93f 	bl	27910 <set_ss_pin_state>
    return err_code;
   1d692:	4817      	ldr	r0, [pc, #92]	; (1d6f0 <nrfx_spim_xfer+0x1b0>)
   1d694:	e7d6      	b.n	1d644 <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d696:	2101      	movs	r1, #1
   1d698:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   1d69a:	b922      	cbnz	r2, 1d6a6 <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d69c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1d6a0:	2a00      	cmp	r2, #0
   1d6a2:	d0fb      	beq.n	1d69c <nrfx_spim_xfer+0x15c>
   1d6a4:	e7f1      	b.n	1d68a <nrfx_spim_xfer+0x14a>
    if (!enable)
   1d6a6:	f015 0f04 	tst.w	r5, #4
   1d6aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d6ae:	d002      	beq.n	1d6b6 <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   1d6b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d6b4:	e7ed      	b.n	1d692 <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   1d6b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d6ba:	e7ea      	b.n	1d692 <nrfx_spim_xfer+0x152>
        return err_code;
   1d6bc:	480d      	ldr	r0, [pc, #52]	; (1d6f4 <nrfx_spim_xfer+0x1b4>)
   1d6be:	e7c1      	b.n	1d644 <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1d6c0:	2b00      	cmp	r3, #0
   1d6c2:	f43f af78 	beq.w	1d5b6 <nrfx_spim_xfer+0x76>
   1d6c6:	e77a      	b.n	1d5be <nrfx_spim_xfer+0x7e>
   1d6c8:	2002133c 	.word	0x2002133c
   1d6cc:	0002edf5 	.word	0x0002edf5
   1d6d0:	0002edb9 	.word	0x0002edb9
   1d6d4:	0002a669 	.word	0x0002a669
   1d6d8:	0002ee21 	.word	0x0002ee21
   1d6dc:	0002ee68 	.word	0x0002ee68
   1d6e0:	0002eeaf 	.word	0x0002eeaf
   1d6e4:	0002ef53 	.word	0x0002ef53
   1d6e8:	20021348 	.word	0x20021348
   1d6ec:	0bad000a 	.word	0x0bad000a
   1d6f0:	0bad0000 	.word	0x0bad0000
   1d6f4:	0bad000b 	.word	0x0bad000b

0001d6f8 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   1d6f8:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6fa:	4b13      	ldr	r3, [pc, #76]	; (1d748 <nrfx_spim_4_irq_handler+0x50>)
   1d6fc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1d700:	b302      	cbz	r2, 1d744 <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d702:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   1d704:	4c11      	ldr	r4, [pc, #68]	; (1d74c <nrfx_spim_4_irq_handler+0x54>)
   1d706:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   1d70a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   1d70e:	6823      	ldr	r3, [r4, #0]
   1d710:	b95b      	cbnz	r3, 1d72a <nrfx_spim_4_irq_handler+0x32>
   1d712:	490f      	ldr	r1, [pc, #60]	; (1d750 <nrfx_spim_4_irq_handler+0x58>)
   1d714:	480f      	ldr	r0, [pc, #60]	; (1d754 <nrfx_spim_4_irq_handler+0x5c>)
   1d716:	f240 333b 	movw	r3, #827	; 0x33b
   1d71a:	4a0f      	ldr	r2, [pc, #60]	; (1d758 <nrfx_spim_4_irq_handler+0x60>)
   1d71c:	f006 fc81 	bl	24022 <assert_print>
   1d720:	f240 313b 	movw	r1, #827	; 0x33b
   1d724:	480c      	ldr	r0, [pc, #48]	; (1d758 <nrfx_spim_4_irq_handler+0x60>)
   1d726:	f006 fc75 	bl	24014 <assert_post_action>
    set_ss_pin_state(p_cb, false);
   1d72a:	4629      	mov	r1, r5
   1d72c:	4620      	mov	r0, r4
   1d72e:	f00a f8ef 	bl	27910 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1d732:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   1d736:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1d738:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1d73a:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   1d73e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1d742:	4718      	bx	r3
}
   1d744:	bd70      	pop	{r4, r5, r6, pc}
   1d746:	bf00      	nop
   1d748:	4000a000 	.word	0x4000a000
   1d74c:	2002133c 	.word	0x2002133c
   1d750:	0002ef96 	.word	0x0002ef96
   1d754:	0002a669 	.word	0x0002a669
   1d758:	0002edb9 	.word	0x0002edb9

0001d75c <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   1d75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d760:	460e      	mov	r6, r1
   1d762:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1d764:	4d0c      	ldr	r5, [pc, #48]	; (1d798 <metal_generic_dev_open+0x3c>)
   1d766:	f855 4f18 	ldr.w	r4, [r5, #24]!
   1d76a:	42ac      	cmp	r4, r5
   1d76c:	d103      	bne.n	1d776 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   1d76e:	f06f 0012 	mvn.w	r0, #18
   1d772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1d776:	4631      	mov	r1, r6
   1d778:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   1d77c:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   1d780:	f7eb fde4 	bl	934c <strcmp>
   1d784:	b930      	cbnz	r0, 1d794 <metal_generic_dev_open+0x38>
			*device = dev;
   1d786:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   1d78a:	4640      	mov	r0, r8
}
   1d78c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   1d790:	f00a b9f2 	b.w	27b78 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1d794:	6824      	ldr	r4, [r4, #0]
   1d796:	e7e8      	b.n	1d76a <metal_generic_dev_open+0xe>
   1d798:	2002135c 	.word	0x2002135c

0001d79c <metal_bus_unregister>:
{
   1d79c:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1d79e:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1d7a2:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1d7a4:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   1d7a6:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1d7aa:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1d7ac:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   1d7b0:	6843      	ldr	r3, [r0, #4]
{
   1d7b2:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   1d7b4:	b103      	cbz	r3, 1d7b8 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   1d7b6:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   1d7b8:	4b05      	ldr	r3, [pc, #20]	; (1d7d0 <metal_bus_unregister+0x34>)
   1d7ba:	781a      	ldrb	r2, [r3, #0]
   1d7bc:	2a06      	cmp	r2, #6
   1d7be:	d905      	bls.n	1d7cc <metal_bus_unregister+0x30>
   1d7c0:	685b      	ldr	r3, [r3, #4]
   1d7c2:	b11b      	cbz	r3, 1d7cc <metal_bus_unregister+0x30>
   1d7c4:	2007      	movs	r0, #7
   1d7c6:	6822      	ldr	r2, [r4, #0]
   1d7c8:	4902      	ldr	r1, [pc, #8]	; (1d7d4 <metal_bus_unregister+0x38>)
   1d7ca:	4798      	blx	r3
}
   1d7cc:	2000      	movs	r0, #0
   1d7ce:	bd10      	pop	{r4, pc}
   1d7d0:	2002135c 	.word	0x2002135c
   1d7d4:	0002efb9 	.word	0x0002efb9

0001d7d8 <metal_bus_find>:
{
   1d7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d7dc:	4607      	mov	r7, r0
   1d7de:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   1d7e0:	4e0b      	ldr	r6, [pc, #44]	; (1d810 <metal_bus_find+0x38>)
   1d7e2:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1d7e6:	42b4      	cmp	r4, r6
   1d7e8:	d102      	bne.n	1d7f0 <metal_bus_find+0x18>
	return -ENOENT;
   1d7ea:	f06f 0001 	mvn.w	r0, #1
   1d7ee:	e00a      	b.n	1d806 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   1d7f0:	4639      	mov	r1, r7
   1d7f2:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1d7f6:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1d7fa:	f7eb fda7 	bl	934c <strcmp>
   1d7fe:	b920      	cbnz	r0, 1d80a <metal_bus_find+0x32>
   1d800:	b11d      	cbz	r5, 1d80a <metal_bus_find+0x32>
			*result = bus;
   1d802:	f8c5 8000 	str.w	r8, [r5]
}
   1d806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1d80a:	6824      	ldr	r4, [r4, #0]
   1d80c:	e7eb      	b.n	1d7e6 <metal_bus_find+0xe>
   1d80e:	bf00      	nop
   1d810:	2002135c 	.word	0x2002135c

0001d814 <metal_bus_register>:
{
   1d814:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1d816:	4604      	mov	r4, r0
   1d818:	b910      	cbnz	r0, 1d820 <metal_bus_register+0xc>
		return -EINVAL;
   1d81a:	f06f 0015 	mvn.w	r0, #21
}
   1d81e:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   1d820:	6800      	ldr	r0, [r0, #0]
   1d822:	2800      	cmp	r0, #0
   1d824:	d0f9      	beq.n	1d81a <metal_bus_register+0x6>
   1d826:	f7eb fd9b 	bl	9360 <strlen>
   1d82a:	2800      	cmp	r0, #0
   1d82c:	d0f5      	beq.n	1d81a <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1d82e:	2100      	movs	r1, #0
   1d830:	6820      	ldr	r0, [r4, #0]
   1d832:	f7ff ffd1 	bl	1d7d8 <metal_bus_find>
   1d836:	b1c8      	cbz	r0, 1d86c <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   1d838:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   1d83c:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   1d840:	4b0c      	ldr	r3, [pc, #48]	; (1d874 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1d842:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1d846:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   1d848:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   1d84c:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1d84e:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   1d850:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1d852:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1d854:	781a      	ldrb	r2, [r3, #0]
   1d856:	2a06      	cmp	r2, #6
   1d858:	d901      	bls.n	1d85e <metal_bus_register+0x4a>
   1d85a:	685b      	ldr	r3, [r3, #4]
   1d85c:	b90b      	cbnz	r3, 1d862 <metal_bus_register+0x4e>
	return 0;
   1d85e:	2000      	movs	r0, #0
   1d860:	e7dd      	b.n	1d81e <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1d862:	2007      	movs	r0, #7
   1d864:	6822      	ldr	r2, [r4, #0]
   1d866:	4904      	ldr	r1, [pc, #16]	; (1d878 <metal_bus_register+0x64>)
   1d868:	4798      	blx	r3
   1d86a:	e7f8      	b.n	1d85e <metal_bus_register+0x4a>
		return -EEXIST;
   1d86c:	f06f 0010 	mvn.w	r0, #16
   1d870:	e7d5      	b.n	1d81e <metal_bus_register+0xa>
   1d872:	bf00      	nop
   1d874:	2002135c 	.word	0x2002135c
   1d878:	0002efbb 	.word	0x0002efbb

0001d87c <metal_device_close>:
	metal_assert(device && device->bus);
   1d87c:	4601      	mov	r1, r0
{
   1d87e:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   1d880:	b108      	cbz	r0, 1d886 <metal_device_close+0xa>
   1d882:	6840      	ldr	r0, [r0, #4]
   1d884:	b948      	cbnz	r0, 1d89a <metal_device_close+0x1e>
   1d886:	4908      	ldr	r1, [pc, #32]	; (1d8a8 <metal_device_close+0x2c>)
   1d888:	4808      	ldr	r0, [pc, #32]	; (1d8ac <metal_device_close+0x30>)
   1d88a:	2351      	movs	r3, #81	; 0x51
   1d88c:	4a08      	ldr	r2, [pc, #32]	; (1d8b0 <metal_device_close+0x34>)
   1d88e:	f006 fbc8 	bl	24022 <assert_print>
   1d892:	2151      	movs	r1, #81	; 0x51
   1d894:	4806      	ldr	r0, [pc, #24]	; (1d8b0 <metal_device_close+0x34>)
   1d896:	f006 fbbd 	bl	24014 <assert_post_action>
	if (device->bus->ops.dev_close)
   1d89a:	68c3      	ldr	r3, [r0, #12]
   1d89c:	b113      	cbz	r3, 1d8a4 <metal_device_close+0x28>
}
   1d89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   1d8a2:	4718      	bx	r3
}
   1d8a4:	bd10      	pop	{r4, pc}
   1d8a6:	bf00      	nop
   1d8a8:	0002f005 	.word	0x0002f005
   1d8ac:	0002a669 	.word	0x0002a669
   1d8b0:	0002efce 	.word	0x0002efce

0001d8b4 <metal_register_generic_device>:
{
   1d8b4:	b510      	push	{r4, lr}
   1d8b6:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   1d8b8:	6800      	ldr	r0, [r0, #0]
   1d8ba:	b910      	cbnz	r0, 1d8c2 <metal_register_generic_device+0xe>
		return -EINVAL;
   1d8bc:	f06f 0015 	mvn.w	r0, #21
}
   1d8c0:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   1d8c2:	f7eb fd4d 	bl	9360 <strlen>
   1d8c6:	2800      	cmp	r0, #0
   1d8c8:	d0f8      	beq.n	1d8bc <metal_register_generic_device+0x8>
   1d8ca:	68a3      	ldr	r3, [r4, #8]
   1d8cc:	2b01      	cmp	r3, #1
   1d8ce:	d8f5      	bhi.n	1d8bc <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   1d8d0:	4b06      	ldr	r3, [pc, #24]	; (1d8ec <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1d8d2:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1d8d6:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   1d8d8:	4b05      	ldr	r3, [pc, #20]	; (1d8f0 <metal_register_generic_device+0x3c>)
   1d8da:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   1d8dc:	f103 0018 	add.w	r0, r3, #24
   1d8e0:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   1d8e2:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   1d8e4:	61d9      	str	r1, [r3, #28]
	return 0;
   1d8e6:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   1d8e8:	6011      	str	r1, [r2, #0]
}
   1d8ea:	e7e9      	b.n	1d8c0 <metal_register_generic_device+0xc>
   1d8ec:	2000870c 	.word	0x2000870c
   1d8f0:	2002135c 	.word	0x2002135c

0001d8f4 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   1d8f4:	4b0e      	ldr	r3, [pc, #56]	; (1d930 <metal_init+0x3c>)
{
   1d8f6:	b510      	push	{r4, lr}
   1d8f8:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   1d8fa:	2220      	movs	r2, #32
   1d8fc:	2100      	movs	r1, #0
   1d8fe:	4618      	mov	r0, r3
   1d900:	f00a ff86 	bl	28810 <memset>

	_metal.common.log_handler   = params->log_handler;
   1d904:	6822      	ldr	r2, [r4, #0]
   1d906:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   1d908:	4602      	mov	r2, r0
   1d90a:	7921      	ldrb	r1, [r4, #4]
   1d90c:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   1d910:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   1d914:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   1d918:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   1d91c:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   1d920:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1d924:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   1d926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   1d92a:	f000 b80f 	b.w	1d94c <metal_sys_init>
   1d92e:	bf00      	nop
   1d930:	2002135c 	.word	0x2002135c

0001d934 <metal_finish>:

void metal_finish(void)
{
   1d934:	b508      	push	{r3, lr}
	metal_sys_finish();
   1d936:	f000 f811 	bl	1d95c <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   1d93a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   1d93e:	2220      	movs	r2, #32
   1d940:	2100      	movs	r1, #0
   1d942:	4801      	ldr	r0, [pc, #4]	; (1d948 <metal_finish+0x14>)
   1d944:	f00a bf64 	b.w	28810 <memset>
   1d948:	2002135c 	.word	0x2002135c

0001d94c <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   1d94c:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   1d94e:	4802      	ldr	r0, [pc, #8]	; (1d958 <metal_sys_init+0xc>)
   1d950:	f7ff ff60 	bl	1d814 <metal_bus_register>
	return 0;
}
   1d954:	2000      	movs	r0, #0
   1d956:	bd08      	pop	{r3, pc}
   1d958:	2000870c 	.word	0x2000870c

0001d95c <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   1d95c:	4801      	ldr	r0, [pc, #4]	; (1d964 <metal_sys_finish+0x8>)
   1d95e:	f7ff bf1d 	b.w	1d79c <metal_bus_unregister>
   1d962:	bf00      	nop
   1d964:	2000870c 	.word	0x2000870c

0001d968 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   1d968:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1d96a:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   1d96c:	2b06      	cmp	r3, #6
{
   1d96e:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   1d970:	bf88      	it	hi
   1d972:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   1d974:	4b09      	ldr	r3, [pc, #36]	; (1d99c <metal_zephyr_log_handler+0x34>)
{
   1d976:	ac05      	add	r4, sp, #20
   1d978:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   1d97c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1d980:	4807      	ldr	r0, [pc, #28]	; (1d9a0 <metal_zephyr_log_handler+0x38>)
   1d982:	f006 f98c 	bl	23c9e <printk>

	va_start(args, format);
	vprintk(format, args);
   1d986:	4621      	mov	r1, r4
   1d988:	4628      	mov	r0, r5
	va_start(args, format);
   1d98a:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   1d98c:	f7ee ffa0 	bl	c8d0 <vprintk>
	va_end(args);
}
   1d990:	b002      	add	sp, #8
   1d992:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1d996:	b003      	add	sp, #12
   1d998:	4770      	bx	lr
   1d99a:	bf00      	nop
   1d99c:	0002a524 	.word	0x0002a524
   1d9a0:	0002a81c 	.word	0x0002a81c

0001d9a4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   1d9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9a8:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   1d9aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1d9ac:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   1d9ae:	4293      	cmp	r3, r2
{
   1d9b0:	4617      	mov	r7, r2
   1d9b2:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   1d9b4:	d341      	bcc.n	1da3a <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1d9b6:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   1d9b8:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   1d9bc:	42bd      	cmp	r5, r7
   1d9be:	d103      	bne.n	1d9c8 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   1d9c0:	2000      	movs	r0, #0
}
   1d9c2:	b007      	add	sp, #28
   1d9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   1d9c8:	fb0b f805 	mul.w	r8, fp, r5
   1d9cc:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1d9d0:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   1d9d2:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1d9d6:	1d23      	adds	r3, r4, #4
   1d9d8:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1d9da:	b9ca      	cbnz	r2, 1da10 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   1d9dc:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1d9de:	6861      	ldr	r1, [r4, #4]
   1d9e0:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   1d9e2:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1d9e6:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   1d9e8:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1d9ea:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   1d9ee:	1e5c      	subs	r4, r3, #1
   1d9f0:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   1d9f4:	425b      	negs	r3, r3
   1d9f6:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   1d9fa:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   1d9fc:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   1da00:	6884      	ldr	r4, [r0, #8]
   1da02:	3306      	adds	r3, #6
   1da04:	42a1      	cmp	r1, r4
   1da06:	bf28      	it	cs
   1da08:	f04f 31ff 	movcs.w	r1, #4294967295
   1da0c:	f00a f880 	bl	27b10 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1da10:	f859 3008 	ldr.w	r3, [r9, r8]
   1da14:	4630      	mov	r0, r6
   1da16:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   1da18:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1da1a:	b2a9      	uxth	r1, r5
   1da1c:	6a1b      	ldr	r3, [r3, #32]
   1da1e:	9301      	str	r3, [sp, #4]
   1da20:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1da22:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1da26:	9300      	str	r3, [sp, #0]
   1da28:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   1da2c:	9b05      	ldr	r3, [sp, #20]
   1da2e:	f00a f8e8 	bl	27c02 <virtqueue_create>
		if (ret)
   1da32:	2800      	cmp	r0, #0
   1da34:	d1c5      	bne.n	1d9c2 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1da36:	3501      	adds	r5, #1
   1da38:	e7c0      	b.n	1d9bc <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1da3a:	4801      	ldr	r0, [pc, #4]	; (1da40 <virtio_create_virtqueues+0x9c>)
   1da3c:	e7c1      	b.n	1d9c2 <virtio_create_virtqueues+0x1e>
   1da3e:	bf00      	nop
   1da40:	fffff440 	.word	0xfffff440

0001da44 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   1da44:	b510      	push	{r4, lr}
	if (vq) {
   1da46:	4604      	mov	r4, r0
   1da48:	b190      	cbz	r0, 1da70 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   1da4a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1da4c:	8943      	ldrh	r3, [r0, #10]
   1da4e:	429a      	cmp	r2, r3
   1da50:	d009      	beq.n	1da66 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   1da52:	4b08      	ldr	r3, [pc, #32]	; (1da74 <virtqueue_free+0x30>)
   1da54:	781a      	ldrb	r2, [r3, #0]
   1da56:	2a03      	cmp	r2, #3
   1da58:	d905      	bls.n	1da66 <virtqueue_free+0x22>
   1da5a:	685b      	ldr	r3, [r3, #4]
   1da5c:	b11b      	cbz	r3, 1da66 <virtqueue_free+0x22>
   1da5e:	6842      	ldr	r2, [r0, #4]
   1da60:	4905      	ldr	r1, [pc, #20]	; (1da78 <virtqueue_free+0x34>)
   1da62:	2004      	movs	r0, #4
   1da64:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   1da66:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   1da68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1da6c:	f00a be8d 	b.w	2878a <k_free>
   1da70:	bd10      	pop	{r4, pc}
   1da72:	bf00      	nop
   1da74:	2002135c 	.word	0x2002135c
   1da78:	0002f0b3 	.word	0x0002f0b3

0001da7c <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   1da7c:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   1da7e:	8944      	ldrh	r4, [r0, #10]
   1da80:	428c      	cmp	r4, r1
   1da82:	d912      	bls.n	1daaa <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   1da84:	6a03      	ldr	r3, [r0, #32]
   1da86:	3c01      	subs	r4, #1
   1da88:	885d      	ldrh	r5, [r3, #2]
   1da8a:	402c      	ands	r4, r5
   1da8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   1da90:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   1da92:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1da94:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1da98:	6a02      	ldr	r2, [r0, #32]
   1da9a:	8853      	ldrh	r3, [r2, #2]
   1da9c:	3301      	adds	r3, #1
   1da9e:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1daa0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1daa2:	3301      	adds	r3, #1
   1daa4:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1daa6:	2000      	movs	r0, #0
}
   1daa8:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1daaa:	4801      	ldr	r0, [pc, #4]	; (1dab0 <virtqueue_add_consumed_buffer+0x34>)
   1daac:	e7fc      	b.n	1daa8 <virtqueue_add_consumed_buffer+0x2c>
   1daae:	bf00      	nop
   1dab0:	fffff441 	.word	0xfffff441

0001dab4 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   1dab4:	b470      	push	{r4, r5, r6}
   1dab6:	9e03      	ldr	r6, [sp, #12]
   1dab8:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1daba:	b158      	cbz	r0, 1dad4 <rpmsg_send_offchannel_raw+0x20>
   1dabc:	6a00      	ldr	r0, [r0, #32]
   1dabe:	b148      	cbz	r0, 1dad4 <rpmsg_send_offchannel_raw+0x20>
   1dac0:	b143      	cbz	r3, 1dad4 <rpmsg_send_offchannel_raw+0x20>
   1dac2:	3401      	adds	r4, #1
   1dac4:	d006      	beq.n	1dad4 <rpmsg_send_offchannel_raw+0x20>
   1dac6:	2e00      	cmp	r6, #0
   1dac8:	db04      	blt.n	1dad4 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   1daca:	6f84      	ldr	r4, [r0, #120]	; 0x78
   1dacc:	b114      	cbz	r4, 1dad4 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1dace:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   1dad0:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1dad2:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1dad4:	4801      	ldr	r0, [pc, #4]	; (1dadc <rpmsg_send_offchannel_raw+0x28>)
}
   1dad6:	bc70      	pop	{r4, r5, r6}
   1dad8:	4770      	bx	lr
   1dada:	bf00      	nop
   1dadc:	fffff82d 	.word	0xfffff82d

0001dae0 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   1dae0:	b470      	push	{r4, r5, r6}
   1dae2:	9e03      	ldr	r6, [sp, #12]
   1dae4:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1dae6:	b160      	cbz	r0, 1db02 <rpmsg_send_offchannel_nocopy+0x22>
   1dae8:	6a00      	ldr	r0, [r0, #32]
   1daea:	b150      	cbz	r0, 1db02 <rpmsg_send_offchannel_nocopy+0x22>
   1daec:	b14b      	cbz	r3, 1db02 <rpmsg_send_offchannel_nocopy+0x22>
   1daee:	3401      	adds	r4, #1
   1daf0:	d007      	beq.n	1db02 <rpmsg_send_offchannel_nocopy+0x22>
   1daf2:	2e00      	cmp	r6, #0
   1daf4:	db05      	blt.n	1db02 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   1daf6:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   1dafa:	b114      	cbz	r4, 1db02 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1dafc:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   1dafe:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1db00:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1db02:	4801      	ldr	r0, [pc, #4]	; (1db08 <rpmsg_send_offchannel_nocopy+0x28>)
}
   1db04:	bc70      	pop	{r4, r5, r6}
   1db06:	4770      	bx	lr
   1db08:	fffff82d 	.word	0xfffff82d

0001db0c <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   1db0c:	b570      	push	{r4, r5, r6, lr}
   1db0e:	460c      	mov	r4, r1
   1db10:	4611      	mov	r1, r2
   1db12:	4605      	mov	r5, r0
   1db14:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1db16:	4b0c      	ldr	r3, [pc, #48]	; (1db48 <rpmsg_register_endpoint+0x3c>)
   1db18:	2220      	movs	r2, #32
   1db1a:	2900      	cmp	r1, #0
   1db1c:	bf08      	it	eq
   1db1e:	4619      	moveq	r1, r3
   1db20:	4620      	mov	r0, r4
   1db22:	f00a ffb7 	bl	28a94 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   1db26:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   1db28:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   1db2a:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   1db2c:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   1db2e:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   1db30:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1db32:	9b06      	ldr	r3, [sp, #24]
   1db34:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   1db36:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1db38:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   1db3c:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   1db40:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   1db42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1db44:	6013      	str	r3, [r2, #0]
}
   1db46:	bd70      	pop	{r4, r5, r6, pc}
   1db48:	0002df2e 	.word	0x0002df2e

0001db4c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   1db4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1db50:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   1db54:	460d      	mov	r5, r1
   1db56:	4692      	mov	sl, r2
   1db58:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   1db5a:	4606      	mov	r6, r0
   1db5c:	2800      	cmp	r0, #0
   1db5e:	d06c      	beq.n	1dc3a <rpmsg_create_ept+0xee>
   1db60:	2900      	cmp	r1, #0
   1db62:	d06a      	beq.n	1dc3a <rpmsg_create_ept+0xee>
   1db64:	f1b9 0f00 	cmp.w	r9, #0
   1db68:	d067      	beq.n	1dc3a <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1db6a:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1db6e:	4640      	mov	r0, r8
   1db70:	f00a f9b0 	bl	27ed4 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   1db74:	1c78      	adds	r0, r7, #1
   1db76:	d140      	bne.n	1dbfa <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1db78:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1db7a:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1db7e:	f014 0401 	ands.w	r4, r4, #1
   1db82:	d00b      	beq.n	1db9c <rpmsg_create_ept+0x50>
	for (bit = start;
   1db84:	2400      	movs	r4, #0
	     bit++)
   1db86:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1db88:	2c80      	cmp	r4, #128	; 0x80
   1db8a:	d054      	beq.n	1dc36 <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1db8c:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1db8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1db92:	f004 011f 	and.w	r1, r4, #31
   1db96:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1db98:	07d1      	lsls	r1, r2, #31
   1db9a:	d4f4      	bmi.n	1db86 <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1db9c:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1db9e:	0960      	lsrs	r0, r4, #5
   1dba0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   1dba4:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1dba8:	f004 041f 	and.w	r4, r4, #31
   1dbac:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1dbae:	430a      	orrs	r2, r1
   1dbb0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   1dbb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1dbb6:	4652      	mov	r2, sl
   1dbb8:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1dbbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1dbbe:	4631      	mov	r1, r6
   1dbc0:	9300      	str	r3, [sp, #0]
   1dbc2:	4628      	mov	r0, r5
   1dbc4:	463b      	mov	r3, r7
   1dbc6:	f7ff ffa1 	bl	1db0c <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1dbca:	4640      	mov	r0, r8
   1dbcc:	f001 fac6 	bl	1f15c <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   1dbd0:	7834      	ldrb	r4, [r6, #0]
   1dbd2:	b174      	cbz	r4, 1dbf2 <rpmsg_create_ept+0xa6>
   1dbd4:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   1dbd8:	b15c      	cbz	r4, 1dbf2 <rpmsg_create_ept+0xa6>
   1dbda:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1dbdc:	3301      	adds	r3, #1
   1dbde:	d12e      	bne.n	1dc3e <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1dbe0:	2100      	movs	r1, #0
   1dbe2:	4630      	mov	r0, r6
   1dbe4:	f00a f9a5 	bl	27f32 <rpmsg_send_ns_message>

	if (status)
   1dbe8:	4604      	mov	r4, r0
   1dbea:	b110      	cbz	r0, 1dbf2 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   1dbec:	4630      	mov	r0, r6
   1dbee:	f00a f977 	bl	27ee0 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1dbf2:	4620      	mov	r0, r4
   1dbf4:	b004      	add	sp, #16
   1dbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   1dbfa:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   1dbfe:	d3d9      	bcc.n	1dbb4 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1dc00:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1dc04:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   1dc06:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   1dc0a:	d80f      	bhi.n	1dc2c <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1dc0c:	0958      	lsrs	r0, r3, #5
   1dc0e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1dc12:	f003 031f 	and.w	r3, r3, #31
   1dc16:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   1dc1a:	07d2      	lsls	r2, r2, #31
   1dc1c:	d40b      	bmi.n	1dc36 <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1dc1e:	2201      	movs	r2, #1
   1dc20:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1dc24:	4323      	orrs	r3, r4
   1dc26:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   1dc2a:	e7c3      	b.n	1dbb4 <rpmsg_create_ept+0x68>
   1dc2c:	4c05      	ldr	r4, [pc, #20]	; (1dc44 <rpmsg_create_ept+0xf8>)
   1dc2e:	4640      	mov	r0, r8
   1dc30:	f001 fa94 	bl	1f15c <z_impl_k_sem_give>
}
   1dc34:	e7dd      	b.n	1dbf2 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   1dc36:	4c04      	ldr	r4, [pc, #16]	; (1dc48 <rpmsg_create_ept+0xfc>)
   1dc38:	e7f9      	b.n	1dc2e <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   1dc3a:	4c02      	ldr	r4, [pc, #8]	; (1dc44 <rpmsg_create_ept+0xf8>)
   1dc3c:	e7d9      	b.n	1dbf2 <rpmsg_create_ept+0xa6>
   1dc3e:	2400      	movs	r4, #0
   1dc40:	e7d7      	b.n	1dbf2 <rpmsg_create_ept+0xa6>
   1dc42:	bf00      	nop
   1dc44:	fffff82d 	.word	0xfffff82d
   1dc48:	fffff829 	.word	0xfffff829

0001dc4c <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   1dc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   1dc50:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   1dc54:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   1dc58:	2300      	movs	r3, #0
{
   1dc5a:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1dc5c:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1dc5e:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1dc62:	2310      	movs	r3, #16
	rp_hdr.src = src;
   1dc64:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   1dc68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1dc6a:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   1dc6c:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   1dc70:	f8ad 501c 	strh.w	r5, [sp, #28]
   1dc74:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1dc76:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1dc78:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1dc7c:	42b1      	cmp	r1, r6
   1dc7e:	bf28      	it	cs
   1dc80:	f04f 31ff 	movcs.w	r1, #4294967295
   1dc84:	eb0d 0203 	add.w	r2, sp, r3
   1dc88:	f009 ff08 	bl	27a9c <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1dc8c:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   1dc8e:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1dc90:	d00b      	beq.n	1dcaa <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   1dc92:	4924      	ldr	r1, [pc, #144]	; (1dd24 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   1dc94:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1dc98:	4a23      	ldr	r2, [pc, #140]	; (1dd28 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1dc9a:	4824      	ldr	r0, [pc, #144]	; (1dd2c <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1dc9c:	f006 f9c1 	bl	24022 <assert_print>
   1dca0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1dca4:	4820      	ldr	r0, [pc, #128]	; (1dd28 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1dca6:	f006 f9b5 	bl	24014 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   1dcaa:	f104 0658 	add.w	r6, r4, #88	; 0x58
   1dcae:	4630      	mov	r0, r6
   1dcb0:	f00a f9cf 	bl	28052 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   1dcb4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1dcb8:	699b      	ldr	r3, [r3, #24]
   1dcba:	b9d3      	cbnz	r3, 1dcf2 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   1dcbc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1dcc0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1dcc4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1dcc8:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1dcca:	b9cb      	cbnz	r3, 1dd00 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   1dccc:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1dcd0:	f8cd 8000 	str.w	r8, [sp]
   1dcd4:	2201      	movs	r2, #1
   1dcd6:	a902      	add	r1, sp, #8
   1dcd8:	f009 ffc0 	bl	27c5c <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1dcdc:	b1b0      	cbz	r0, 1dd0c <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   1dcde:	4914      	ldr	r1, [pc, #80]	; (1dd30 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   1dce0:	f240 13b9 	movw	r3, #441	; 0x1b9
   1dce4:	4a10      	ldr	r2, [pc, #64]	; (1dd28 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1dce6:	4811      	ldr	r0, [pc, #68]	; (1dd2c <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1dce8:	f006 f99b 	bl	24022 <assert_print>
   1dcec:	f240 11b9 	movw	r1, #441	; 0x1b9
   1dcf0:	e7d8      	b.n	1dca4 <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1dcf2:	4639      	mov	r1, r7
   1dcf4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1dcf8:	f00a f846 	bl	27d88 <virtqueue_get_buffer_length>
   1dcfc:	4602      	mov	r2, r0
   1dcfe:	e7df      	b.n	1dcc0 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   1dd00:	2b01      	cmp	r3, #1
   1dd02:	d103      	bne.n	1dd0c <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1dd04:	4639      	mov	r1, r7
   1dd06:	f7ff feb9 	bl	1da7c <virtqueue_add_consumed_buffer>
   1dd0a:	e7e7      	b.n	1dcdc <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   1dd0c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1dd10:	f00a f891 	bl	27e36 <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   1dd14:	4630      	mov	r0, r6
   1dd16:	f00a f99a 	bl	2804e <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   1dd1a:	4628      	mov	r0, r5
   1dd1c:	b008      	add	sp, #32
   1dd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd22:	bf00      	nop
   1dd24:	0002f118 	.word	0x0002f118
   1dd28:	0002f0d5 	.word	0x0002f0d5
   1dd2c:	0002a669 	.word	0x0002a669
   1dd30:	0002f131 	.word	0x0002f131

0001dd34 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   1dd34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1dd38:	6803      	ldr	r3, [r0, #0]
   1dd3a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   1dd3c:	f107 0658 	add.w	r6, r7, #88	; 0x58
   1dd40:	4630      	mov	r0, r6
   1dd42:	f00a f986 	bl	28052 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1dd46:	4638      	mov	r0, r7
   1dd48:	f10d 020a 	add.w	r2, sp, #10
   1dd4c:	a903      	add	r1, sp, #12
   1dd4e:	f00a f9f3 	bl	28138 <rpmsg_virtio_get_rx_buffer>
   1dd52:	4604      	mov	r4, r0
   1dd54:	4630      	mov	r0, r6
   1dd56:	f00a f97a 	bl	2804e <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   1dd5a:	2c00      	cmp	r4, #0
   1dd5c:	d04f      	beq.n	1ddfe <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   1dd5e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1dd62:	4630      	mov	r0, r6
   1dd64:	60a3      	str	r3, [r4, #8]
   1dd66:	f00a f974 	bl	28052 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1dd6a:	f04f 33ff 	mov.w	r3, #4294967295
   1dd6e:	2100      	movs	r1, #0
   1dd70:	4638      	mov	r0, r7
   1dd72:	6862      	ldr	r2, [r4, #4]
   1dd74:	f00a f911 	bl	27f9a <rpmsg_get_endpoint>
   1dd78:	4605      	mov	r5, r0
   1dd7a:	4630      	mov	r0, r6
   1dd7c:	f00a f967 	bl	2804e <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   1dd80:	b1ed      	cbz	r5, 1ddbe <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1dd82:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1dd84:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1dd86:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   1dd88:	bf08      	it	eq
   1dd8a:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1dd8c:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   1dd8e:	bf08      	it	eq
   1dd90:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1dd92:	6823      	ldr	r3, [r4, #0]
   1dd94:	89a2      	ldrh	r2, [r4, #12]
   1dd96:	9100      	str	r1, [sp, #0]
   1dd98:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1dd9c:	f104 0110 	add.w	r1, r4, #16
   1dda0:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   1dda2:	2800      	cmp	r0, #0
   1dda4:	da0b      	bge.n	1ddbe <rpmsg_virtio_rx_callback+0x8a>
   1dda6:	4917      	ldr	r1, [pc, #92]	; (1de04 <rpmsg_virtio_rx_callback+0xd0>)
   1dda8:	4817      	ldr	r0, [pc, #92]	; (1de08 <rpmsg_virtio_rx_callback+0xd4>)
   1ddaa:	f240 2343 	movw	r3, #579	; 0x243
   1ddae:	4a17      	ldr	r2, [pc, #92]	; (1de0c <rpmsg_virtio_rx_callback+0xd8>)
   1ddb0:	f006 f937 	bl	24022 <assert_print>
   1ddb4:	f240 2143 	movw	r1, #579	; 0x243
   1ddb8:	4814      	ldr	r0, [pc, #80]	; (1de0c <rpmsg_virtio_rx_callback+0xd8>)
   1ddba:	f006 f92b 	bl	24014 <assert_post_action>
   1ddbe:	4630      	mov	r0, r6
   1ddc0:	f00a f947 	bl	28052 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   1ddc4:	68a3      	ldr	r3, [r4, #8]
   1ddc6:	2b00      	cmp	r3, #0
   1ddc8:	db06      	blt.n	1ddd8 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1ddca:	4621      	mov	r1, r4
   1ddcc:	4638      	mov	r0, r7
   1ddce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1ddd2:	9a03      	ldr	r2, [sp, #12]
   1ddd4:	f00a f9c7 	bl	28166 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1ddd8:	4638      	mov	r0, r7
   1ddda:	f10d 020a 	add.w	r2, sp, #10
   1ddde:	a903      	add	r1, sp, #12
   1dde0:	f00a f9aa 	bl	28138 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1dde4:	4604      	mov	r4, r0
   1dde6:	b118      	cbz	r0, 1ddf0 <rpmsg_virtio_rx_callback+0xbc>
   1dde8:	4630      	mov	r0, r6
   1ddea:	f00a f930 	bl	2804e <k_sem_give>
	while (rp_hdr) {
   1ddee:	e7b6      	b.n	1dd5e <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   1ddf0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1ddf4:	f00a f81f 	bl	27e36 <virtqueue_kick>
   1ddf8:	4630      	mov	r0, r6
   1ddfa:	f00a f928 	bl	2804e <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   1ddfe:	b004      	add	sp, #16
   1de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de04:	0002f13d 	.word	0x0002f13d
   1de08:	0002a669 	.word	0x0002a669
   1de0c:	0002f0d5 	.word	0x0002f0d5

0001de10 <rpmsg_virtio_send_offchannel_raw>:
{
   1de10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1de14:	b085      	sub	sp, #20
   1de16:	460f      	mov	r7, r1
   1de18:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1de1a:	a903      	add	r1, sp, #12
   1de1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   1de1e:	4606      	mov	r6, r0
   1de20:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1de22:	f00a f9eb 	bl	281fc <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   1de26:	4604      	mov	r4, r0
   1de28:	b350      	cbz	r0, 1de80 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   1de2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1de2c:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   1de2e:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   1de32:	429d      	cmp	r5, r3
   1de34:	bfa8      	it	ge
   1de36:	461d      	movge	r5, r3
   1de38:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1de3a:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1de3e:	1a61      	subs	r1, r4, r1
   1de40:	4561      	cmp	r1, ip
   1de42:	bf28      	it	cs
   1de44:	f04f 31ff 	movcs.w	r1, #4294967295
   1de48:	462b      	mov	r3, r5
   1de4a:	464a      	mov	r2, r9
   1de4c:	f009 fe26 	bl	27a9c <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   1de50:	4285      	cmp	r5, r0
   1de52:	d00b      	beq.n	1de6c <rpmsg_virtio_send_offchannel_raw+0x5c>
   1de54:	490b      	ldr	r1, [pc, #44]	; (1de84 <rpmsg_virtio_send_offchannel_raw+0x74>)
   1de56:	480c      	ldr	r0, [pc, #48]	; (1de88 <rpmsg_virtio_send_offchannel_raw+0x78>)
   1de58:	f240 2303 	movw	r3, #515	; 0x203
   1de5c:	4a0b      	ldr	r2, [pc, #44]	; (1de8c <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1de5e:	f006 f8e0 	bl	24022 <assert_print>
   1de62:	f240 2103 	movw	r1, #515	; 0x203
   1de66:	4809      	ldr	r0, [pc, #36]	; (1de8c <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1de68:	f006 f8d4 	bl	24014 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   1de6c:	4623      	mov	r3, r4
   1de6e:	4642      	mov	r2, r8
   1de70:	4639      	mov	r1, r7
   1de72:	4630      	mov	r0, r6
   1de74:	9500      	str	r5, [sp, #0]
   1de76:	f7ff fee9 	bl	1dc4c <rpmsg_virtio_send_offchannel_nocopy>
}
   1de7a:	b005      	add	sp, #20
   1de7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   1de80:	4803      	ldr	r0, [pc, #12]	; (1de90 <rpmsg_virtio_send_offchannel_raw+0x80>)
   1de82:	e7fa      	b.n	1de7a <rpmsg_virtio_send_offchannel_raw+0x6a>
   1de84:	0002f149 	.word	0x0002f149
   1de88:	0002a669 	.word	0x0002a669
   1de8c:	0002f0d5 	.word	0x0002f0d5
   1de90:	fffff82e 	.word	0xfffff82e

0001de94 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   1de94:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   1de96:	4604      	mov	r4, r0
   1de98:	b1e0      	cbz	r0, 1ded4 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   1de9a:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1de9e:	4628      	mov	r0, r5
   1dea0:	f00a f8d7 	bl	28052 <__metal_mutex_acquire>
   1dea4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1dea8:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1deaa:	b953      	cbnz	r3, 1dec2 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   1deac:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   1deb0:	3c10      	subs	r4, #16
	if (length <= 0) {
   1deb2:	2c00      	cmp	r4, #0
   1deb4:	dc00      	bgt.n	1deb8 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   1deb6:	4c08      	ldr	r4, [pc, #32]	; (1ded8 <rpmsg_virtio_get_buffer_size+0x44>)
   1deb8:	4628      	mov	r0, r5
   1deba:	f00a f8c8 	bl	2804e <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   1debe:	4620      	mov	r0, r4
   1dec0:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   1dec2:	2b01      	cmp	r3, #1
   1dec4:	d1f7      	bne.n	1deb6 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1dec6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1deca:	f009 ffeb 	bl	27ea4 <virtqueue_get_desc_size>
   1dece:	f1a0 0410 	sub.w	r4, r0, #16
   1ded2:	e7ee      	b.n	1deb2 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   1ded4:	4c01      	ldr	r4, [pc, #4]	; (1dedc <rpmsg_virtio_get_buffer_size+0x48>)
   1ded6:	e7f2      	b.n	1debe <rpmsg_virtio_get_buffer_size+0x2a>
   1ded8:	fffff82e 	.word	0xfffff82e
   1dedc:	fffff82d 	.word	0xfffff82d

0001dee0 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   1dee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dee4:	b08a      	sub	sp, #40	; 0x28
   1dee6:	460d      	mov	r5, r1
   1dee8:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   1deec:	4690      	mov	r8, r2
   1deee:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   1def0:	4604      	mov	r4, r0
   1def2:	b920      	cbnz	r0, 1defe <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   1def4:	4f81      	ldr	r7, [pc, #516]	; (1e0fc <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   1def6:	4638      	mov	r0, r7
   1def8:	b00a      	add	sp, #40	; 0x28
   1defa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   1defe:	2900      	cmp	r1, #0
   1df00:	d0f8      	beq.n	1def4 <rpmsg_init_vdev_with_config+0x14>
   1df02:	2b00      	cmp	r3, #0
   1df04:	d0f6      	beq.n	1def4 <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   1df06:	2294      	movs	r2, #148	; 0x94
   1df08:	2100      	movs	r1, #0
   1df0a:	f00a fc81 	bl	28810 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1df0e:	2201      	movs	r2, #1
   1df10:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1df14:	4611      	mov	r1, r2
   1df16:	f00a faa0 	bl	2845a <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1df1a:	4b79      	ldr	r3, [pc, #484]	; (1e100 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   1df1c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   1df20:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   1df24:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1df26:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   1df28:	4b76      	ldr	r3, [pc, #472]	; (1e104 <rpmsg_init_vdev_with_config+0x224>)
   1df2a:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   1df2c:	4b76      	ldr	r3, [pc, #472]	; (1e108 <rpmsg_init_vdev_with_config+0x228>)
   1df2e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   1df32:	4b76      	ldr	r3, [pc, #472]	; (1e10c <rpmsg_init_vdev_with_config+0x22c>)
   1df34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   1df38:	4b75      	ldr	r3, [pc, #468]	; (1e110 <rpmsg_init_vdev_with_config+0x230>)
   1df3a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   1df3e:	4b75      	ldr	r3, [pc, #468]	; (1e114 <rpmsg_init_vdev_with_config+0x234>)
   1df40:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1df44:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1df48:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   1df4c:	f1b8 0f00 	cmp.w	r8, #0
   1df50:	d16e      	bne.n	1e030 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   1df52:	2f00      	cmp	r7, #0
   1df54:	d0ce      	beq.n	1def4 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   1df56:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   1df5a:	f104 0394 	add.w	r3, r4, #148	; 0x94
   1df5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1df62:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1df66:	6a03      	ldr	r3, [r0, #32]
   1df68:	689b      	ldr	r3, [r3, #8]
   1df6a:	4798      	blx	r3
   1df6c:	2300      	movs	r3, #0
   1df6e:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1df70:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1df74:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1df76:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   1df7a:	f1b8 0f00 	cmp.w	r8, #0
   1df7e:	d16d      	bne.n	1e05c <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   1df80:	7a3b      	ldrb	r3, [r7, #8]
   1df82:	2b00      	cmp	r3, #0
   1df84:	d068      	beq.n	1e058 <rpmsg_init_vdev_with_config+0x178>
   1df86:	f109 030c 	add.w	r3, r9, #12
   1df8a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   1df8e:	f1b9 0f00 	cmp.w	r9, #0
   1df92:	d0af      	beq.n	1def4 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   1df94:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1df98:	2a00      	cmp	r2, #0
   1df9a:	f000 80ad 	beq.w	1e0f8 <rpmsg_init_vdev_with_config+0x218>
   1df9e:	689b      	ldr	r3, [r3, #8]
   1dfa0:	2b00      	cmp	r3, #0
   1dfa2:	f000 80a9 	beq.w	1e0f8 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   1dfa6:	4b5c      	ldr	r3, [pc, #368]	; (1e118 <rpmsg_init_vdev_with_config+0x238>)
   1dfa8:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   1dfaa:	4b5c      	ldr	r3, [pc, #368]	; (1e11c <rpmsg_init_vdev_with_config+0x23c>)
   1dfac:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   1dfae:	4b5c      	ldr	r3, [pc, #368]	; (1e120 <rpmsg_init_vdev_with_config+0x240>)
   1dfb0:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   1dfb2:	4b5c      	ldr	r3, [pc, #368]	; (1e124 <rpmsg_init_vdev_with_config+0x244>)
   1dfb4:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1dfb6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1dfb8:	681b      	ldr	r3, [r3, #0]
   1dfba:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   1dfbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1dfc0:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   1dfc2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   1dfc6:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   1dfca:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   1dfce:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   1dfd0:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   1dfd4:	9300      	str	r3, [sp, #0]
   1dfd6:	2202      	movs	r2, #2
   1dfd8:	2100      	movs	r1, #0
   1dfda:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1dfde:	ab04      	add	r3, sp, #16
   1dfe0:	f7ff fce0 	bl	1d9a4 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   1dfe4:	4607      	mov	r7, r0
   1dfe6:	2800      	cmp	r0, #0
   1dfe8:	d185      	bne.n	1def6 <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   1dfea:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1dfee:	f009 fef4 	bl	27dda <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   1dff2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1dff4:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   1dff6:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   1dff8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1dffa:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   1dffc:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   1dffe:	f1b8 0f00 	cmp.w	r8, #0
   1e002:	d161      	bne.n	1e0c8 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1e004:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   1e006:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1e00a:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1e00c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   1e010:	895b      	ldrh	r3, [r3, #10]
   1e012:	4553      	cmp	r3, sl
   1e014:	d834      	bhi.n	1e080 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   1e016:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1e01a:	e9c4 4400 	strd	r4, r4, [r4]
   1e01e:	2b00      	cmp	r3, #0
   1e020:	d159      	bne.n	1e0d6 <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   1e022:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1e026:	2104      	movs	r1, #4
   1e028:	6a03      	ldr	r3, [r0, #32]
   1e02a:	685b      	ldr	r3, [r3, #4]
   1e02c:	4798      	blx	r3
}
   1e02e:	e762      	b.n	1def6 <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   1e030:	f1b8 0f01 	cmp.w	r8, #1
   1e034:	d195      	bne.n	1df62 <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   1e036:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1e03a:	6a03      	ldr	r3, [r0, #32]
   1e03c:	681b      	ldr	r3, [r3, #0]
   1e03e:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1e040:	0642      	lsls	r2, r0, #25
   1e042:	d506      	bpl.n	1e052 <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   1e044:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1e048:	2100      	movs	r1, #0
   1e04a:	6a03      	ldr	r3, [r0, #32]
   1e04c:	685b      	ldr	r3, [r3, #4]
   1e04e:	4798      	blx	r3
}
   1e050:	e7f1      	b.n	1e036 <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1e052:	0743      	lsls	r3, r0, #29
   1e054:	d5ef      	bpl.n	1e036 <rpmsg_init_vdev_with_config+0x156>
   1e056:	e784      	b.n	1df62 <rpmsg_init_vdev_with_config+0x82>
   1e058:	464b      	mov	r3, r9
   1e05a:	e796      	b.n	1df8a <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   1e05c:	f1b8 0f01 	cmp.w	r8, #1
   1e060:	d1b1      	bne.n	1dfc6 <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   1e062:	4b2e      	ldr	r3, [pc, #184]	; (1e11c <rpmsg_init_vdev_with_config+0x23c>)
   1e064:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   1e066:	4b2c      	ldr	r3, [pc, #176]	; (1e118 <rpmsg_init_vdev_with_config+0x238>)
   1e068:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   1e06a:	4b2e      	ldr	r3, [pc, #184]	; (1e124 <rpmsg_init_vdev_with_config+0x244>)
   1e06c:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   1e06e:	4b2c      	ldr	r3, [pc, #176]	; (1e120 <rpmsg_init_vdev_with_config+0x240>)
   1e070:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1e072:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1e074:	699b      	ldr	r3, [r3, #24]
   1e076:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   1e07a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1e07c:	681b      	ldr	r3, [r3, #0]
   1e07e:	e7a0      	b.n	1dfc2 <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1e080:	4648      	mov	r0, r9
   1e082:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   1e086:	f00a f8aa 	bl	281de <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   1e08a:	4605      	mov	r5, r0
   1e08c:	b1c8      	cbz	r0, 1e0c2 <rpmsg_init_vdev_with_config+0x1e2>
   1e08e:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   1e090:	9008      	str	r0, [sp, #32]
   1e092:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1e094:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   1e096:	2200      	movs	r2, #0
   1e098:	4281      	cmp	r1, r0
   1e09a:	bf28      	it	cs
   1e09c:	f04f 31ff 	movcs.w	r1, #4294967295
   1e0a0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1e0a4:	4630      	mov	r0, r6
   1e0a6:	f009 fd33 	bl	27b10 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1e0aa:	9500      	str	r5, [sp, #0]
   1e0ac:	2301      	movs	r3, #1
   1e0ae:	2200      	movs	r2, #0
   1e0b0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1e0b4:	a908      	add	r1, sp, #32
   1e0b6:	f009 fdd1 	bl	27c5c <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1e0ba:	b918      	cbnz	r0, 1e0c4 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1e0bc:	f10a 0a01 	add.w	sl, sl, #1
   1e0c0:	e7a4      	b.n	1e00c <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   1e0c2:	4819      	ldr	r0, [pc, #100]	; (1e128 <rpmsg_init_vdev_with_config+0x248>)
   1e0c4:	4607      	mov	r7, r0
   1e0c6:	e716      	b.n	1def6 <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   1e0c8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1e0cc:	e9c4 4400 	strd	r4, r4, [r4]
   1e0d0:	2b00      	cmp	r3, #0
   1e0d2:	f43f af10 	beq.w	1def6 <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   1e0d6:	2300      	movs	r3, #0
   1e0d8:	9302      	str	r3, [sp, #8]
   1e0da:	4b14      	ldr	r3, [pc, #80]	; (1e12c <rpmsg_init_vdev_with_config+0x24c>)
   1e0dc:	4620      	mov	r0, r4
   1e0de:	9301      	str	r3, [sp, #4]
   1e0e0:	2335      	movs	r3, #53	; 0x35
   1e0e2:	4a13      	ldr	r2, [pc, #76]	; (1e130 <rpmsg_init_vdev_with_config+0x250>)
   1e0e4:	9300      	str	r3, [sp, #0]
   1e0e6:	f104 0108 	add.w	r1, r4, #8
   1e0ea:	f7ff fd0f 	bl	1db0c <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   1e0ee:	f1b8 0f00 	cmp.w	r8, #0
   1e0f2:	f47f af00 	bne.w	1def6 <rpmsg_init_vdev_with_config+0x16>
   1e0f6:	e794      	b.n	1e022 <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   1e0f8:	4f0b      	ldr	r7, [pc, #44]	; (1e128 <rpmsg_init_vdev_with_config+0x248>)
   1e0fa:	e6fc      	b.n	1def6 <rpmsg_init_vdev_with_config+0x16>
   1e0fc:	fffff82d 	.word	0xfffff82d
   1e100:	0001de11 	.word	0x0001de11
   1e104:	0002803f 	.word	0x0002803f
   1e108:	0002819f 	.word	0x0002819f
   1e10c:	000281fd 	.word	0x000281fd
   1e110:	0001dc4d 	.word	0x0001dc4d
   1e114:	0002805f 	.word	0x0002805f
   1e118:	0002f157 	.word	0x0002f157
   1e11c:	0002f15d 	.word	0x0002f15d
   1e120:	0001dd35 	.word	0x0001dd35
   1e124:	0002804d 	.word	0x0002804d
   1e128:	fffff82e 	.word	0xfffff82e
   1e12c:	000280a1 	.word	0x000280a1
   1e130:	0002f163 	.word	0x0002f163

0001e134 <rpmsg_init_vdev>:
{
   1e134:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e136:	4605      	mov	r5, r0
   1e138:	460e      	mov	r6, r1
   1e13a:	4617      	mov	r7, r2
   1e13c:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   1e13e:	4a07      	ldr	r2, [pc, #28]	; (1e15c <rpmsg_init_vdev+0x28>)
   1e140:	ac03      	add	r4, sp, #12
   1e142:	ca07      	ldmia	r2, {r0, r1, r2}
   1e144:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   1e148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1e14a:	4631      	mov	r1, r6
   1e14c:	9200      	str	r2, [sp, #0]
   1e14e:	4628      	mov	r0, r5
   1e150:	463a      	mov	r2, r7
   1e152:	9401      	str	r4, [sp, #4]
   1e154:	f7ff fec4 	bl	1dee0 <rpmsg_init_vdev_with_config>
}
   1e158:	b007      	add	sp, #28
   1e15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e15c:	00029818 	.word	0x00029818

0001e160 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1e160:	2203      	movs	r2, #3
   1e162:	4b11      	ldr	r3, [pc, #68]	; (1e1a8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1e164:	4911      	ldr	r1, [pc, #68]	; (1e1ac <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1e166:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1e168:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1e16a:	4a11      	ldr	r2, [pc, #68]	; (1e1b0 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   1e16c:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1e16e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1e170:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e174:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   1e176:	2200      	movs	r2, #0
   1e178:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1e17a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1e17c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1e17e:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1e180:	490c      	ldr	r1, [pc, #48]	; (1e1b4 <_DoInit+0x54>)
   1e182:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1e184:	2110      	movs	r1, #16
   1e186:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1e188:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1e18a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1e18c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1e18e:	4a0a      	ldr	r2, [pc, #40]	; (1e1b8 <_DoInit+0x58>)
   1e190:	6812      	ldr	r2, [r2, #0]
   1e192:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1e196:	4a09      	ldr	r2, [pc, #36]	; (1e1bc <_DoInit+0x5c>)
   1e198:	6810      	ldr	r0, [r2, #0]
   1e19a:	8892      	ldrh	r2, [r2, #4]
   1e19c:	6018      	str	r0, [r3, #0]
   1e19e:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1e1a0:	2220      	movs	r2, #32
   1e1a2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1e1a4:	4770      	bx	lr
   1e1a6:	bf00      	nop
   1e1a8:	2002137c 	.word	0x2002137c
   1e1ac:	0002f166 	.word	0x0002f166
   1e1b0:	20021db2 	.word	0x20021db2
   1e1b4:	20021da2 	.word	0x20021da2
   1e1b8:	0002f16f 	.word	0x0002f16f
   1e1bc:	0002f173 	.word	0x0002f173

0001e1c0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1e1c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1e1c4:	f04f 0b18 	mov.w	fp, #24
   1e1c8:	4f20      	ldr	r7, [pc, #128]	; (1e24c <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1e1ca:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1e1cc:	fb0b 7200 	mla	r2, fp, r0, r7
   1e1d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1e1d2:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1e1d4:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1e1d6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1e1d8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1e1da:	d831      	bhi.n	1e240 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1e1dc:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1e1e0:	ebaa 0905 	sub.w	r9, sl, r5
   1e1e4:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1e1e8:	4294      	cmp	r4, r2
   1e1ea:	d811      	bhi.n	1e210 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1e1ec:	2318      	movs	r3, #24
   1e1ee:	fb06 3303 	mla	r3, r6, r3, r3
   1e1f2:	443b      	add	r3, r7
   1e1f4:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e1f6:	4622      	mov	r2, r4
   1e1f8:	4641      	mov	r1, r8
   1e1fa:	4428      	add	r0, r5
   1e1fc:	f00a fae1 	bl	287c2 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1e200:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1e202:	2318      	movs	r3, #24
      return 1;
   1e204:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1e206:	fb03 7306 	mla	r3, r3, r6, r7
   1e20a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1e20c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1e210:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1e212:	429c      	cmp	r4, r3
   1e214:	d818      	bhi.n	1e248 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1e216:	fb00 bb0b 	mla	fp, r0, fp, fp
   1e21a:	44bb      	add	fp, r7
   1e21c:	f8db 0004 	ldr.w	r0, [fp, #4]
   1e220:	464a      	mov	r2, r9
   1e222:	4428      	add	r0, r5
   1e224:	442c      	add	r4, r5
   1e226:	f00a facc 	bl	287c2 <memcpy>
      if (NumBytes) {
   1e22a:	ebb4 040a 	subs.w	r4, r4, sl
   1e22e:	d0e8      	beq.n	1e202 <SEGGER_RTT_WriteSkipNoLock+0x42>
   1e230:	4622      	mov	r2, r4
   1e232:	f8db 0004 	ldr.w	r0, [fp, #4]
   1e236:	eb08 0109 	add.w	r1, r8, r9
   1e23a:	f00a fac2 	bl	287c2 <memcpy>
      return 1;
   1e23e:	e7e0      	b.n	1e202 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1e240:	3b01      	subs	r3, #1
   1e242:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1e244:	42a3      	cmp	r3, r4
   1e246:	d2d1      	bcs.n	1e1ec <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1e248:	2000      	movs	r0, #0
   1e24a:	e7df      	b.n	1e20c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1e24c:	2002137c 	.word	0x2002137c

0001e250 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1e250:	2218      	movs	r2, #24
   1e252:	4b03      	ldr	r3, [pc, #12]	; (1e260 <SEGGER_RTT_HasDataUp+0x10>)
   1e254:	fb02 3300 	mla	r3, r2, r0, r3
   1e258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1e25a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1e25c:	1a80      	subs	r0, r0, r2
   1e25e:	4770      	bx	lr
   1e260:	2002137c 	.word	0x2002137c

0001e264 <z_impl_device_get_binding>:
		++dev;
	}
}

const struct device *z_impl_device_get_binding(const char *name)
{
   1e264:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1e266:	4605      	mov	r5, r0
   1e268:	b910      	cbnz	r0, 1e270 <z_impl_device_get_binding+0xc>
		return NULL;
   1e26a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1e26c:	4620      	mov	r0, r4
   1e26e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1e270:	7803      	ldrb	r3, [r0, #0]
   1e272:	2b00      	cmp	r3, #0
   1e274:	d0f9      	beq.n	1e26a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e276:	4c0e      	ldr	r4, [pc, #56]	; (1e2b0 <z_impl_device_get_binding+0x4c>)
   1e278:	4e0e      	ldr	r6, [pc, #56]	; (1e2b4 <z_impl_device_get_binding+0x50>)
   1e27a:	42b4      	cmp	r4, r6
   1e27c:	d108      	bne.n	1e290 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e27e:	4c0c      	ldr	r4, [pc, #48]	; (1e2b0 <z_impl_device_get_binding+0x4c>)
   1e280:	42b4      	cmp	r4, r6
   1e282:	d0f2      	beq.n	1e26a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1e284:	4620      	mov	r0, r4
   1e286:	f00a f85a 	bl	2833e <z_device_is_ready>
   1e28a:	b950      	cbnz	r0, 1e2a2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e28c:	3418      	adds	r4, #24
   1e28e:	e7f7      	b.n	1e280 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   1e290:	4620      	mov	r0, r4
   1e292:	f00a f854 	bl	2833e <z_device_is_ready>
   1e296:	b110      	cbz	r0, 1e29e <z_impl_device_get_binding+0x3a>
   1e298:	6823      	ldr	r3, [r4, #0]
   1e29a:	42ab      	cmp	r3, r5
   1e29c:	d0e6      	beq.n	1e26c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e29e:	3418      	adds	r4, #24
   1e2a0:	e7eb      	b.n	1e27a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1e2a2:	4628      	mov	r0, r5
   1e2a4:	6821      	ldr	r1, [r4, #0]
   1e2a6:	f7eb f851 	bl	934c <strcmp>
   1e2aa:	2800      	cmp	r0, #0
   1e2ac:	d1ee      	bne.n	1e28c <z_impl_device_get_binding+0x28>
   1e2ae:	e7dd      	b.n	1e26c <z_impl_device_get_binding+0x8>
   1e2b0:	00029104 	.word	0x00029104
   1e2b4:	0002923c 	.word	0x0002923c

0001e2b8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1e2b8:	4b01      	ldr	r3, [pc, #4]	; (1e2c0 <z_impl_z_errno+0x8>)
   1e2ba:	6898      	ldr	r0, [r3, #8]
}
   1e2bc:	3064      	adds	r0, #100	; 0x64
   1e2be:	4770      	bx	lr
   1e2c0:	20021424 	.word	0x20021424

0001e2c4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1e2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e2c8:	4605      	mov	r5, r0
   1e2ca:	b086      	sub	sp, #24
   1e2cc:	460f      	mov	r7, r1
	__asm__ volatile(
   1e2ce:	f04f 0320 	mov.w	r3, #32
   1e2d2:	f3ef 8811 	mrs	r8, BASEPRI
   1e2d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1e2da:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1e2de:	f002 fe65 	bl	20fac <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1e2e2:	2400      	movs	r4, #0
   1e2e4:	2d04      	cmp	r5, #4
   1e2e6:	bf96      	itet	ls
   1e2e8:	4b28      	ldrls	r3, [pc, #160]	; (1e38c <z_fatal_error+0xc8>)
   1e2ea:	4b29      	ldrhi	r3, [pc, #164]	; (1e390 <z_fatal_error+0xcc>)
   1e2ec:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   1e2f0:	4606      	mov	r6, r0
   1e2f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1e2f6:	4b27      	ldr	r3, [pc, #156]	; (1e394 <z_fatal_error+0xd0>)
   1e2f8:	2201      	movs	r2, #1
   1e2fa:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1e2fe:	4620      	mov	r0, r4
   1e300:	4623      	mov	r3, r4
   1e302:	4925      	ldr	r1, [pc, #148]	; (1e398 <z_fatal_error+0xd4>)
   1e304:	9503      	str	r5, [sp, #12]
   1e306:	9400      	str	r4, [sp, #0]
   1e308:	f00a f824 	bl	28354 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1e30c:	b16f      	cbz	r7, 1e32a <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1e30e:	69fb      	ldr	r3, [r7, #28]
   1e310:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1e314:	b14b      	cbz	r3, 1e32a <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   1e316:	4b21      	ldr	r3, [pc, #132]	; (1e39c <z_fatal_error+0xd8>)
   1e318:	2201      	movs	r2, #1
   1e31a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1e31e:	4620      	mov	r0, r4
   1e320:	4623      	mov	r3, r4
   1e322:	491d      	ldr	r1, [pc, #116]	; (1e398 <z_fatal_error+0xd4>)
   1e324:	9400      	str	r4, [sp, #0]
   1e326:	f00a f815 	bl	28354 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1e32a:	b12e      	cbz	r6, 1e338 <z_fatal_error+0x74>
   1e32c:	4630      	mov	r0, r6
   1e32e:	f00a f84c 	bl	283ca <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1e332:	b108      	cbz	r0, 1e338 <z_fatal_error+0x74>
   1e334:	7803      	ldrb	r3, [r0, #0]
   1e336:	b903      	cbnz	r3, 1e33a <z_fatal_error+0x76>
		thread_name = "unknown";
   1e338:	4819      	ldr	r0, [pc, #100]	; (1e3a0 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1e33a:	4b1a      	ldr	r3, [pc, #104]	; (1e3a4 <z_fatal_error+0xe0>)
   1e33c:	2201      	movs	r2, #1
   1e33e:	9302      	str	r3, [sp, #8]
   1e340:	2300      	movs	r3, #0
   1e342:	e9cd 6003 	strd	r6, r0, [sp, #12]
   1e346:	e9cd 3300 	strd	r3, r3, [sp]
   1e34a:	4618      	mov	r0, r3
   1e34c:	4912      	ldr	r1, [pc, #72]	; (1e398 <z_fatal_error+0xd4>)
   1e34e:	f00a f801 	bl	28354 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1e352:	4639      	mov	r1, r7
   1e354:	4628      	mov	r0, r5
   1e356:	f7fd fb53 	bl	1ba00 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1e35a:	2d04      	cmp	r5, #4
   1e35c:	d10c      	bne.n	1e378 <z_fatal_error+0xb4>
   1e35e:	4912      	ldr	r1, [pc, #72]	; (1e3a8 <z_fatal_error+0xe4>)
   1e360:	2393      	movs	r3, #147	; 0x93
   1e362:	4a12      	ldr	r2, [pc, #72]	; (1e3ac <z_fatal_error+0xe8>)
   1e364:	4812      	ldr	r0, [pc, #72]	; (1e3b0 <z_fatal_error+0xec>)
   1e366:	f005 fe5c 	bl	24022 <assert_print>
   1e36a:	4812      	ldr	r0, [pc, #72]	; (1e3b4 <z_fatal_error+0xf0>)
   1e36c:	f005 fe59 	bl	24022 <assert_print>
   1e370:	2193      	movs	r1, #147	; 0x93
   1e372:	480e      	ldr	r0, [pc, #56]	; (1e3ac <z_fatal_error+0xe8>)
   1e374:	f005 fe4e 	bl	24014 <assert_post_action>
	__asm__ volatile(
   1e378:	f388 8811 	msr	BASEPRI, r8
   1e37c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1e380:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1e382:	b006      	add	sp, #24
   1e384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e388:	f7f1 bd2e 	b.w	fde8 <z_impl_k_thread_abort>
   1e38c:	0002a548 	.word	0x0002a548
   1e390:	0002f17a 	.word	0x0002f17a
   1e394:	0002f190 	.word	0x0002f190
   1e398:	0002977c 	.word	0x0002977c
   1e39c:	0002f1b8 	.word	0x0002f1b8
   1e3a0:	0002f188 	.word	0x0002f188
   1e3a4:	0002f1d9 	.word	0x0002f1d9
   1e3a8:	0002f213 	.word	0x0002f213
   1e3ac:	0002f1f1 	.word	0x0002f1f1
   1e3b0:	0002a669 	.word	0x0002a669
   1e3b4:	0002f230 	.word	0x0002f230

0001e3b8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e3b8:	4b0f      	ldr	r3, [pc, #60]	; (1e3f8 <z_sys_init_run_level+0x40>)
{
   1e3ba:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e3bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1e3c0:	3001      	adds	r0, #1
   1e3c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1e3c6:	42a6      	cmp	r6, r4
   1e3c8:	d800      	bhi.n	1e3cc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1e3ca:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1e3cc:	e9d4 3500 	ldrd	r3, r5, [r4]
   1e3d0:	4628      	mov	r0, r5
   1e3d2:	4798      	blx	r3
		if (dev != NULL) {
   1e3d4:	b16d      	cbz	r5, 1e3f2 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1e3d6:	b138      	cbz	r0, 1e3e8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1e3d8:	2800      	cmp	r0, #0
   1e3da:	bfb8      	it	lt
   1e3dc:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   1e3de:	28ff      	cmp	r0, #255	; 0xff
   1e3e0:	bfa8      	it	ge
   1e3e2:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1e3e4:	68eb      	ldr	r3, [r5, #12]
   1e3e6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1e3e8:	68ea      	ldr	r2, [r5, #12]
   1e3ea:	7853      	ldrb	r3, [r2, #1]
   1e3ec:	f043 0301 	orr.w	r3, r3, #1
   1e3f0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e3f2:	3408      	adds	r4, #8
   1e3f4:	e7e7      	b.n	1e3c6 <z_sys_init_run_level+0xe>
   1e3f6:	bf00      	nop
   1e3f8:	0002a55c 	.word	0x0002a55c

0001e3fc <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1e3fc:	2201      	movs	r2, #1
{
   1e3fe:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1e400:	4b09      	ldr	r3, [pc, #36]	; (1e428 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1e402:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1e404:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1e406:	f7ff ffd7 	bl	1e3b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1e40a:	f003 fed7 	bl	221bc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1e40e:	2004      	movs	r0, #4
   1e410:	f7ff ffd2 	bl	1e3b8 <z_sys_init_run_level>

	z_init_static_threads();
   1e414:	f000 fb66 	bl	1eae4 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1e418:	f7ed fa3a 	bl	b890 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1e41c:	4a03      	ldr	r2, [pc, #12]	; (1e42c <bg_thread_main+0x30>)
   1e41e:	7b13      	ldrb	r3, [r2, #12]
   1e420:	f023 0301 	bic.w	r3, r3, #1
   1e424:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1e426:	bd08      	pop	{r3, pc}
   1e428:	200221b2 	.word	0x200221b2
   1e42c:	20009bf0 	.word	0x20009bf0

0001e430 <z_bss_zero>:
{
   1e430:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1e432:	4803      	ldr	r0, [pc, #12]	; (1e440 <z_bss_zero+0x10>)
   1e434:	4a03      	ldr	r2, [pc, #12]	; (1e444 <z_bss_zero+0x14>)
   1e436:	2100      	movs	r1, #0
   1e438:	1a12      	subs	r2, r2, r0
   1e43a:	f009 ff9b 	bl	28374 <z_early_memset>
}
   1e43e:	bd08      	pop	{r3, pc}
   1e440:	20008d58 	.word	0x20008d58
   1e444:	200221b4 	.word	0x200221b4

0001e448 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   1e448:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1e44a:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1e44c:	4e13      	ldr	r6, [pc, #76]	; (1e49c <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   1e44e:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   1e450:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1e454:	2300      	movs	r3, #0
{
   1e456:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1e458:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1e45c:	220f      	movs	r2, #15
   1e45e:	9301      	str	r3, [sp, #4]
   1e460:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1e464:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   1e466:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1e46a:	4d0d      	ldr	r5, [pc, #52]	; (1e4a0 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   1e46c:	490d      	ldr	r1, [pc, #52]	; (1e4a4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1e46e:	fb03 5500 	mla	r5, r3, r0, r5
{
   1e472:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1e474:	fb02 1100 	mla	r1, r2, r0, r1
   1e478:	4b0b      	ldr	r3, [pc, #44]	; (1e4a8 <z_init_cpu+0x60>)
   1e47a:	4630      	mov	r0, r6
   1e47c:	9500      	str	r5, [sp, #0]
   1e47e:	f000 fa97 	bl	1e9b0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e482:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   1e484:	752c      	strb	r4, [r5, #20]
   1e486:	f023 0304 	bic.w	r3, r3, #4
   1e48a:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1e48c:	4b07      	ldr	r3, [pc, #28]	; (1e4ac <z_init_cpu+0x64>)
   1e48e:	3401      	adds	r4, #1
   1e490:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1e494:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1e496:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1e498:	b006      	add	sp, #24
   1e49a:	bd70      	pop	{r4, r5, r6, pc}
   1e49c:	20009b68 	.word	0x20009b68
   1e4a0:	20021424 	.word	0x20021424
   1e4a4:	20032ad8 	.word	0x20032ad8
   1e4a8:	0001ec35 	.word	0x0001ec35
   1e4ac:	200322d8 	.word	0x200322d8

0001e4b0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1e4b0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1e4b2:	2000      	movs	r0, #0
{
   1e4b4:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1e4b6:	f7ff ff7f 	bl	1e3b8 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1e4ba:	4b2f      	ldr	r3, [pc, #188]	; (1e578 <z_cstart+0xc8>)
	uint32_t msp =
   1e4bc:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1e4c0:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1e4c4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e4c8:	2400      	movs	r4, #0
   1e4ca:	23e0      	movs	r3, #224	; 0xe0
   1e4cc:	4d2b      	ldr	r5, [pc, #172]	; (1e57c <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1e4ce:	4e2c      	ldr	r6, [pc, #176]	; (1e580 <z_cstart+0xd0>)
   1e4d0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1e4d4:	77ec      	strb	r4, [r5, #31]
   1e4d6:	762c      	strb	r4, [r5, #24]
   1e4d8:	766c      	strb	r4, [r5, #25]
   1e4da:	76ac      	strb	r4, [r5, #26]
   1e4dc:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1e4e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e4e2:	4f28      	ldr	r7, [pc, #160]	; (1e584 <z_cstart+0xd4>)
   1e4e4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1e4e8:	626b      	str	r3, [r5, #36]	; 0x24
   1e4ea:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1e4ee:	f7f1 fbdf 	bl	fcb0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1e4f2:	f7f0 ff21 	bl	f338 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1e4f6:	f04f 33ff 	mov.w	r3, #4294967295
   1e4fa:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1e4fc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1e4fe:	f7f1 fe41 	bl	10184 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1e502:	f7f1 fc87 	bl	fe14 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1e506:	f7ef fc8f 	bl	de28 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1e50a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1e50e:	ad06      	add	r5, sp, #24
   1e510:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   1e512:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1e516:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1e51a:	f003 fe31 	bl	22180 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1e51e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1e520:	f009 ff0c 	bl	2833c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1e524:	2001      	movs	r0, #1
   1e526:	f7ff ff47 	bl	1e3b8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1e52a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1e52c:	4d16      	ldr	r5, [pc, #88]	; (1e588 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1e52e:	f7ff ff43 	bl	1e3b8 <z_sys_init_run_level>
	z_sched_init();
   1e532:	f002 fbc1 	bl	20cb8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e536:	4b15      	ldr	r3, [pc, #84]	; (1e58c <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1e538:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e53a:	9305      	str	r3, [sp, #20]
   1e53c:	2301      	movs	r3, #1
   1e53e:	4914      	ldr	r1, [pc, #80]	; (1e590 <z_cstart+0xe0>)
   1e540:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e544:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1e548:	4628      	mov	r0, r5
   1e54a:	463b      	mov	r3, r7
   1e54c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e550:	9400      	str	r4, [sp, #0]
   1e552:	f000 fa2d 	bl	1e9b0 <z_setup_new_thread>
   1e556:	4606      	mov	r6, r0
   1e558:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   1e55a:	4628      	mov	r0, r5
   1e55c:	f022 0204 	bic.w	r2, r2, #4
   1e560:	736a      	strb	r2, [r5, #13]
   1e562:	f001 fd81 	bl	20068 <z_ready_thread>
	z_init_cpu(0);
   1e566:	4620      	mov	r0, r4
   1e568:	f7ff ff6e 	bl	1e448 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1e56c:	463a      	mov	r2, r7
   1e56e:	4631      	mov	r1, r6
   1e570:	4628      	mov	r0, r5
   1e572:	f7f1 f84b 	bl	f60c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1e576:	bf00      	nop
   1e578:	200322d8 	.word	0x200322d8
   1e57c:	e000ed00 	.word	0xe000ed00
   1e580:	20021424 	.word	0x20021424
   1e584:	0001e3fd 	.word	0x0001e3fd
   1e588:	20009bf0 	.word	0x20009bf0
   1e58c:	0002f2af 	.word	0x0002f2af
   1e590:	20032c18 	.word	0x20032c18

0001e594 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1e594:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1e596:	4c0d      	ldr	r4, [pc, #52]	; (1e5cc <statics_init+0x38>)
   1e598:	4d0d      	ldr	r5, [pc, #52]	; (1e5d0 <statics_init+0x3c>)
   1e59a:	42ac      	cmp	r4, r5
   1e59c:	d913      	bls.n	1e5c6 <statics_init+0x32>
   1e59e:	490d      	ldr	r1, [pc, #52]	; (1e5d4 <statics_init+0x40>)
   1e5a0:	2318      	movs	r3, #24
   1e5a2:	4a0d      	ldr	r2, [pc, #52]	; (1e5d8 <statics_init+0x44>)
   1e5a4:	480d      	ldr	r0, [pc, #52]	; (1e5dc <statics_init+0x48>)
   1e5a6:	f005 fd3c 	bl	24022 <assert_print>
   1e5aa:	480d      	ldr	r0, [pc, #52]	; (1e5e0 <statics_init+0x4c>)
   1e5ac:	f005 fd39 	bl	24022 <assert_print>
   1e5b0:	2118      	movs	r1, #24
   1e5b2:	4809      	ldr	r0, [pc, #36]	; (1e5d8 <statics_init+0x44>)
   1e5b4:	f005 fd2e 	bl	24014 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1e5b8:	4620      	mov	r0, r4
   1e5ba:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1e5be:	f009 fedd 	bl	2837c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1e5c2:	3418      	adds	r4, #24
   1e5c4:	e7e9      	b.n	1e59a <statics_init+0x6>
   1e5c6:	d3f7      	bcc.n	1e5b8 <statics_init+0x24>
		}
	}
	return 0;
}
   1e5c8:	2000      	movs	r0, #0
   1e5ca:	bd38      	pop	{r3, r4, r5, pc}
   1e5cc:	20008a6c 	.word	0x20008a6c
   1e5d0:	20008a84 	.word	0x20008a84
   1e5d4:	0002f2d9 	.word	0x0002f2d9
   1e5d8:	0002f2b7 	.word	0x0002f2b7
   1e5dc:	0002a669 	.word	0x0002a669
   1e5e0:	0002b5ef 	.word	0x0002b5ef

0001e5e4 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1e5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5e8:	b085      	sub	sp, #20
   1e5ea:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1e5ee:	4680      	mov	r8, r0
   1e5f0:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e5f2:	4648      	mov	r0, r9
   1e5f4:	4659      	mov	r1, fp
{
   1e5f6:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e5f8:	f009 ffde 	bl	285b8 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1e5fc:	f1bb 3fff 	cmp.w	fp, #4294967295
   1e600:	bf08      	it	eq
   1e602:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1e606:	4606      	mov	r6, r0
   1e608:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1e60a:	bf04      	itt	eq
   1e60c:	f04f 36ff 	moveq.w	r6, #4294967295
   1e610:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1e614:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   1e618:	f04f 0320 	mov.w	r3, #32
   1e61c:	f3ef 8511 	mrs	r5, BASEPRI
   1e620:	f383 8812 	msr	BASEPRI_MAX, r3
   1e624:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e628:	4620      	mov	r0, r4
   1e62a:	f000 fadf 	bl	1ebec <z_spin_lock_valid>
   1e62e:	b960      	cbnz	r0, 1e64a <k_heap_aligned_alloc+0x66>
   1e630:	2394      	movs	r3, #148	; 0x94
   1e632:	4a33      	ldr	r2, [pc, #204]	; (1e700 <k_heap_aligned_alloc+0x11c>)
   1e634:	4933      	ldr	r1, [pc, #204]	; (1e704 <k_heap_aligned_alloc+0x120>)
   1e636:	4834      	ldr	r0, [pc, #208]	; (1e708 <k_heap_aligned_alloc+0x124>)
   1e638:	f005 fcf3 	bl	24022 <assert_print>
   1e63c:	4621      	mov	r1, r4
   1e63e:	4833      	ldr	r0, [pc, #204]	; (1e70c <k_heap_aligned_alloc+0x128>)
   1e640:	f005 fcef 	bl	24022 <assert_print>
   1e644:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e646:	482e      	ldr	r0, [pc, #184]	; (1e700 <k_heap_aligned_alloc+0x11c>)
   1e648:	e031      	b.n	1e6ae <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   1e64a:	4620      	mov	r0, r4
   1e64c:	f000 faea 	bl	1ec24 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e650:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1e654:	b113      	cbz	r3, 1e65c <k_heap_aligned_alloc+0x78>
   1e656:	ea5b 0909 	orrs.w	r9, fp, r9
   1e65a:	d11d      	bne.n	1e698 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e65c:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1e660:	4652      	mov	r2, sl
   1e662:	4640      	mov	r0, r8
   1e664:	9903      	ldr	r1, [sp, #12]
   1e666:	f7ee f99d 	bl	c9a4 <sys_heap_aligned_alloc>
   1e66a:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   1e66c:	f003 f88c 	bl	21788 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1e670:	f1b9 0f00 	cmp.w	r9, #0
   1e674:	d01d      	beq.n	1e6b2 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e676:	4620      	mov	r0, r4
   1e678:	f000 fac6 	bl	1ec08 <z_spin_unlock_valid>
   1e67c:	2800      	cmp	r0, #0
   1e67e:	d137      	bne.n	1e6f0 <k_heap_aligned_alloc+0x10c>
   1e680:	23c2      	movs	r3, #194	; 0xc2
   1e682:	4a1f      	ldr	r2, [pc, #124]	; (1e700 <k_heap_aligned_alloc+0x11c>)
   1e684:	4922      	ldr	r1, [pc, #136]	; (1e710 <k_heap_aligned_alloc+0x12c>)
   1e686:	4820      	ldr	r0, [pc, #128]	; (1e708 <k_heap_aligned_alloc+0x124>)
   1e688:	f005 fccb 	bl	24022 <assert_print>
   1e68c:	4621      	mov	r1, r4
   1e68e:	4821      	ldr	r0, [pc, #132]	; (1e714 <k_heap_aligned_alloc+0x130>)
   1e690:	f005 fcc7 	bl	24022 <assert_print>
   1e694:	21c2      	movs	r1, #194	; 0xc2
   1e696:	e7d6      	b.n	1e646 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1e698:	491f      	ldr	r1, [pc, #124]	; (1e718 <k_heap_aligned_alloc+0x134>)
   1e69a:	234c      	movs	r3, #76	; 0x4c
   1e69c:	4a1f      	ldr	r2, [pc, #124]	; (1e71c <k_heap_aligned_alloc+0x138>)
   1e69e:	481a      	ldr	r0, [pc, #104]	; (1e708 <k_heap_aligned_alloc+0x124>)
   1e6a0:	f005 fcbf 	bl	24022 <assert_print>
   1e6a4:	481e      	ldr	r0, [pc, #120]	; (1e720 <k_heap_aligned_alloc+0x13c>)
   1e6a6:	f005 fcbc 	bl	24022 <assert_print>
   1e6aa:	214c      	movs	r1, #76	; 0x4c
   1e6ac:	481b      	ldr	r0, [pc, #108]	; (1e71c <k_heap_aligned_alloc+0x138>)
   1e6ae:	f005 fcb1 	bl	24014 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   1e6b2:	1a30      	subs	r0, r6, r0
   1e6b4:	eb67 0101 	sbc.w	r1, r7, r1
   1e6b8:	2801      	cmp	r0, #1
   1e6ba:	f171 0300 	sbcs.w	r3, r1, #0
   1e6be:	dbda      	blt.n	1e676 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1e6c0:	e9cd 0100 	strd	r0, r1, [sp]
   1e6c4:	465a      	mov	r2, fp
   1e6c6:	4629      	mov	r1, r5
   1e6c8:	4620      	mov	r0, r4
   1e6ca:	f002 f827 	bl	2071c <z_pend_curr>
   1e6ce:	f04f 0320 	mov.w	r3, #32
   1e6d2:	f3ef 8511 	mrs	r5, BASEPRI
   1e6d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e6de:	4620      	mov	r0, r4
   1e6e0:	f000 fa84 	bl	1ebec <z_spin_lock_valid>
   1e6e4:	2800      	cmp	r0, #0
   1e6e6:	d0a3      	beq.n	1e630 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   1e6e8:	4620      	mov	r0, r4
   1e6ea:	f000 fa9b 	bl	1ec24 <z_spin_lock_set_owner>
	return k;
   1e6ee:	e7b7      	b.n	1e660 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   1e6f0:	f385 8811 	msr	BASEPRI, r5
   1e6f4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1e6f8:	4648      	mov	r0, r9
   1e6fa:	b005      	add	sp, #20
   1e6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e700:	0002b32e 	.word	0x0002b32e
   1e704:	0002b387 	.word	0x0002b387
   1e708:	0002a669 	.word	0x0002a669
   1e70c:	0002b39c 	.word	0x0002b39c
   1e710:	0002b35b 	.word	0x0002b35b
   1e714:	0002b372 	.word	0x0002b372
   1e718:	0002f2ef 	.word	0x0002f2ef
   1e71c:	0002f2b7 	.word	0x0002f2b7
   1e720:	0002df2c 	.word	0x0002df2c

0001e724 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1e724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e726:	4605      	mov	r5, r0
   1e728:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1e72a:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   1e72e:	f04f 0320 	mov.w	r3, #32
   1e732:	f3ef 8711 	mrs	r7, BASEPRI
   1e736:	f383 8812 	msr	BASEPRI_MAX, r3
   1e73a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e73e:	4620      	mov	r0, r4
   1e740:	f000 fa54 	bl	1ebec <z_spin_lock_valid>
   1e744:	b968      	cbnz	r0, 1e762 <k_heap_free+0x3e>
   1e746:	2394      	movs	r3, #148	; 0x94
   1e748:	4a19      	ldr	r2, [pc, #100]	; (1e7b0 <k_heap_free+0x8c>)
   1e74a:	491a      	ldr	r1, [pc, #104]	; (1e7b4 <k_heap_free+0x90>)
   1e74c:	481a      	ldr	r0, [pc, #104]	; (1e7b8 <k_heap_free+0x94>)
   1e74e:	f005 fc68 	bl	24022 <assert_print>
   1e752:	4621      	mov	r1, r4
   1e754:	4819      	ldr	r0, [pc, #100]	; (1e7bc <k_heap_free+0x98>)
   1e756:	f005 fc64 	bl	24022 <assert_print>
   1e75a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e75c:	4814      	ldr	r0, [pc, #80]	; (1e7b0 <k_heap_free+0x8c>)
   1e75e:	f005 fc59 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e762:	4620      	mov	r0, r4
   1e764:	f000 fa5e 	bl	1ec24 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1e768:	4628      	mov	r0, r5
   1e76a:	4631      	mov	r1, r6
   1e76c:	f7ee f8d4 	bl	c918 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1e770:	f105 000c 	add.w	r0, r5, #12
   1e774:	f009 ff06 	bl	28584 <z_unpend_all>
   1e778:	b128      	cbz	r0, 1e786 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   1e77a:	4639      	mov	r1, r7
   1e77c:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1e77e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1e782:	f001 bcfd 	b.w	20180 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e786:	4620      	mov	r0, r4
   1e788:	f000 fa3e 	bl	1ec08 <z_spin_unlock_valid>
   1e78c:	b958      	cbnz	r0, 1e7a6 <k_heap_free+0x82>
   1e78e:	23c2      	movs	r3, #194	; 0xc2
   1e790:	4a07      	ldr	r2, [pc, #28]	; (1e7b0 <k_heap_free+0x8c>)
   1e792:	490b      	ldr	r1, [pc, #44]	; (1e7c0 <k_heap_free+0x9c>)
   1e794:	4808      	ldr	r0, [pc, #32]	; (1e7b8 <k_heap_free+0x94>)
   1e796:	f005 fc44 	bl	24022 <assert_print>
   1e79a:	4621      	mov	r1, r4
   1e79c:	4809      	ldr	r0, [pc, #36]	; (1e7c4 <k_heap_free+0xa0>)
   1e79e:	f005 fc40 	bl	24022 <assert_print>
   1e7a2:	21c2      	movs	r1, #194	; 0xc2
   1e7a4:	e7da      	b.n	1e75c <k_heap_free+0x38>
	__asm__ volatile(
   1e7a6:	f387 8811 	msr	BASEPRI, r7
   1e7aa:	f3bf 8f6f 	isb	sy
}
   1e7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e7b0:	0002b32e 	.word	0x0002b32e
   1e7b4:	0002b387 	.word	0x0002b387
   1e7b8:	0002a669 	.word	0x0002a669
   1e7bc:	0002b39c 	.word	0x0002b39c
   1e7c0:	0002b35b 	.word	0x0002b35b
   1e7c4:	0002b372 	.word	0x0002b372

0001e7c8 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   1e7c8:	2000      	movs	r0, #0
{
   1e7ca:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e7cc:	4c0c      	ldr	r4, [pc, #48]	; (1e800 <init_mem_slab_module+0x38>)
   1e7ce:	4d0d      	ldr	r5, [pc, #52]	; (1e804 <init_mem_slab_module+0x3c>)
   1e7d0:	42ac      	cmp	r4, r5
   1e7d2:	d913      	bls.n	1e7fc <init_mem_slab_module+0x34>
   1e7d4:	490c      	ldr	r1, [pc, #48]	; (1e808 <init_mem_slab_module+0x40>)
   1e7d6:	233d      	movs	r3, #61	; 0x3d
   1e7d8:	4a0c      	ldr	r2, [pc, #48]	; (1e80c <init_mem_slab_module+0x44>)
   1e7da:	480d      	ldr	r0, [pc, #52]	; (1e810 <init_mem_slab_module+0x48>)
   1e7dc:	f005 fc21 	bl	24022 <assert_print>
   1e7e0:	480c      	ldr	r0, [pc, #48]	; (1e814 <init_mem_slab_module+0x4c>)
   1e7e2:	f005 fc1e 	bl	24022 <assert_print>
   1e7e6:	213d      	movs	r1, #61	; 0x3d
   1e7e8:	4808      	ldr	r0, [pc, #32]	; (1e80c <init_mem_slab_module+0x44>)
   1e7ea:	f005 fc13 	bl	24014 <assert_post_action>
		rc = create_free_list(slab);
   1e7ee:	4620      	mov	r0, r4
   1e7f0:	f009 fdcc 	bl	2838c <create_free_list>
		if (rc < 0) {
   1e7f4:	2800      	cmp	r0, #0
   1e7f6:	db02      	blt.n	1e7fe <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e7f8:	3420      	adds	r4, #32
   1e7fa:	e7e9      	b.n	1e7d0 <init_mem_slab_module+0x8>
   1e7fc:	d3f7      	bcc.n	1e7ee <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   1e7fe:	bd38      	pop	{r3, r4, r5, pc}
   1e800:	20008a0c 	.word	0x20008a0c
   1e804:	20008a6c 	.word	0x20008a6c
   1e808:	0002f35a 	.word	0x0002f35a
   1e80c:	0002f335 	.word	0x0002f335
   1e810:	0002a669 	.word	0x0002a669
   1e814:	0002b5ef 	.word	0x0002b5ef

0001e818 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1e818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e81c:	4604      	mov	r4, r0
   1e81e:	460e      	mov	r6, r1
   1e820:	4690      	mov	r8, r2
   1e822:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1e824:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e828:	f04f 0320 	mov.w	r3, #32
   1e82c:	f3ef 8911 	mrs	r9, BASEPRI
   1e830:	f383 8812 	msr	BASEPRI_MAX, r3
   1e834:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e838:	4628      	mov	r0, r5
   1e83a:	f000 f9d7 	bl	1ebec <z_spin_lock_valid>
   1e83e:	b968      	cbnz	r0, 1e85c <k_mem_slab_alloc+0x44>
   1e840:	2394      	movs	r3, #148	; 0x94
   1e842:	4a23      	ldr	r2, [pc, #140]	; (1e8d0 <k_mem_slab_alloc+0xb8>)
   1e844:	4923      	ldr	r1, [pc, #140]	; (1e8d4 <k_mem_slab_alloc+0xbc>)
   1e846:	4824      	ldr	r0, [pc, #144]	; (1e8d8 <k_mem_slab_alloc+0xc0>)
   1e848:	f005 fbeb 	bl	24022 <assert_print>
   1e84c:	4629      	mov	r1, r5
   1e84e:	4823      	ldr	r0, [pc, #140]	; (1e8dc <k_mem_slab_alloc+0xc4>)
   1e850:	f005 fbe7 	bl	24022 <assert_print>
   1e854:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e856:	481e      	ldr	r0, [pc, #120]	; (1e8d0 <k_mem_slab_alloc+0xb8>)
   1e858:	f005 fbdc 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e85c:	4628      	mov	r0, r5
   1e85e:	f000 f9e1 	bl	1ec24 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1e862:	69a3      	ldr	r3, [r4, #24]
   1e864:	b1b3      	cbz	r3, 1e894 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   1e866:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   1e868:	681b      	ldr	r3, [r3, #0]
   1e86a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1e86c:	69e3      	ldr	r3, [r4, #28]
   1e86e:	3301      	adds	r3, #1
   1e870:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1e872:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e874:	4628      	mov	r0, r5
   1e876:	f000 f9c7 	bl	1ec08 <z_spin_unlock_valid>
   1e87a:	bb18      	cbnz	r0, 1e8c4 <k_mem_slab_alloc+0xac>
   1e87c:	23c2      	movs	r3, #194	; 0xc2
   1e87e:	4a14      	ldr	r2, [pc, #80]	; (1e8d0 <k_mem_slab_alloc+0xb8>)
   1e880:	4917      	ldr	r1, [pc, #92]	; (1e8e0 <k_mem_slab_alloc+0xc8>)
   1e882:	4815      	ldr	r0, [pc, #84]	; (1e8d8 <k_mem_slab_alloc+0xc0>)
   1e884:	f005 fbcd 	bl	24022 <assert_print>
   1e888:	4629      	mov	r1, r5
   1e88a:	4816      	ldr	r0, [pc, #88]	; (1e8e4 <k_mem_slab_alloc+0xcc>)
   1e88c:	f005 fbc9 	bl	24022 <assert_print>
   1e890:	21c2      	movs	r1, #194	; 0xc2
   1e892:	e7e0      	b.n	1e856 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1e894:	ea58 0207 	orrs.w	r2, r8, r7
   1e898:	d103      	bne.n	1e8a2 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   1e89a:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   1e89e:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   1e8a0:	e7e8      	b.n	1e874 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1e8a2:	4622      	mov	r2, r4
   1e8a4:	4649      	mov	r1, r9
   1e8a6:	4628      	mov	r0, r5
   1e8a8:	e9cd 8700 	strd	r8, r7, [sp]
   1e8ac:	f001 ff36 	bl	2071c <z_pend_curr>
		if (result == 0) {
   1e8b0:	4604      	mov	r4, r0
   1e8b2:	b918      	cbnz	r0, 1e8bc <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   1e8b4:	4b0c      	ldr	r3, [pc, #48]	; (1e8e8 <k_mem_slab_alloc+0xd0>)
   1e8b6:	689b      	ldr	r3, [r3, #8]
   1e8b8:	695b      	ldr	r3, [r3, #20]
   1e8ba:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1e8bc:	4620      	mov	r0, r4
   1e8be:	b003      	add	sp, #12
   1e8c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   1e8c4:	f389 8811 	msr	BASEPRI, r9
   1e8c8:	f3bf 8f6f 	isb	sy
	return result;
   1e8cc:	e7f6      	b.n	1e8bc <k_mem_slab_alloc+0xa4>
   1e8ce:	bf00      	nop
   1e8d0:	0002b32e 	.word	0x0002b32e
   1e8d4:	0002b387 	.word	0x0002b387
   1e8d8:	0002a669 	.word	0x0002a669
   1e8dc:	0002b39c 	.word	0x0002b39c
   1e8e0:	0002b35b 	.word	0x0002b35b
   1e8e4:	0002b372 	.word	0x0002b372
   1e8e8:	20021424 	.word	0x20021424

0001e8ec <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1e8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8f0:	4604      	mov	r4, r0
   1e8f2:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1e8f4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1e8f8:	f04f 0320 	mov.w	r3, #32
   1e8fc:	f3ef 8711 	mrs	r7, BASEPRI
   1e900:	f383 8812 	msr	BASEPRI_MAX, r3
   1e904:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e908:	4628      	mov	r0, r5
   1e90a:	f000 f96f 	bl	1ebec <z_spin_lock_valid>
   1e90e:	b968      	cbnz	r0, 1e92c <k_mem_slab_free+0x40>
   1e910:	2394      	movs	r3, #148	; 0x94
   1e912:	4a21      	ldr	r2, [pc, #132]	; (1e998 <k_mem_slab_free+0xac>)
   1e914:	4921      	ldr	r1, [pc, #132]	; (1e99c <k_mem_slab_free+0xb0>)
   1e916:	4822      	ldr	r0, [pc, #136]	; (1e9a0 <k_mem_slab_free+0xb4>)
   1e918:	f005 fb83 	bl	24022 <assert_print>
   1e91c:	4629      	mov	r1, r5
   1e91e:	4821      	ldr	r0, [pc, #132]	; (1e9a4 <k_mem_slab_free+0xb8>)
   1e920:	f005 fb7f 	bl	24022 <assert_print>
   1e924:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e926:	481c      	ldr	r0, [pc, #112]	; (1e998 <k_mem_slab_free+0xac>)
   1e928:	f005 fb74 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e92c:	4628      	mov	r0, r5
   1e92e:	f000 f979 	bl	1ec24 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1e932:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1e936:	f1b8 0f00 	cmp.w	r8, #0
   1e93a:	d10f      	bne.n	1e95c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1e93c:	4620      	mov	r0, r4
   1e93e:	f002 f96b 	bl	20c18 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1e942:	b158      	cbz	r0, 1e95c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1e944:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1e946:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1e94a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1e94c:	f001 fb8c 	bl	20068 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1e950:	4639      	mov	r1, r7
   1e952:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1e954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1e958:	f001 bc12 	b.w	20180 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1e95c:	6833      	ldr	r3, [r6, #0]
   1e95e:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e960:	4628      	mov	r0, r5
   1e962:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1e964:	6833      	ldr	r3, [r6, #0]
   1e966:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1e968:	69e3      	ldr	r3, [r4, #28]
   1e96a:	3b01      	subs	r3, #1
   1e96c:	61e3      	str	r3, [r4, #28]
   1e96e:	f000 f94b 	bl	1ec08 <z_spin_unlock_valid>
   1e972:	b958      	cbnz	r0, 1e98c <k_mem_slab_free+0xa0>
   1e974:	23c2      	movs	r3, #194	; 0xc2
   1e976:	4a08      	ldr	r2, [pc, #32]	; (1e998 <k_mem_slab_free+0xac>)
   1e978:	490b      	ldr	r1, [pc, #44]	; (1e9a8 <k_mem_slab_free+0xbc>)
   1e97a:	4809      	ldr	r0, [pc, #36]	; (1e9a0 <k_mem_slab_free+0xb4>)
   1e97c:	f005 fb51 	bl	24022 <assert_print>
   1e980:	4629      	mov	r1, r5
   1e982:	480a      	ldr	r0, [pc, #40]	; (1e9ac <k_mem_slab_free+0xc0>)
   1e984:	f005 fb4d 	bl	24022 <assert_print>
   1e988:	21c2      	movs	r1, #194	; 0xc2
   1e98a:	e7cc      	b.n	1e926 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   1e98c:	f387 8811 	msr	BASEPRI, r7
   1e990:	f3bf 8f6f 	isb	sy
}
   1e994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e998:	0002b32e 	.word	0x0002b32e
   1e99c:	0002b387 	.word	0x0002b387
   1e9a0:	0002a669 	.word	0x0002a669
   1e9a4:	0002b39c 	.word	0x0002b39c
   1e9a8:	0002b35b 	.word	0x0002b35b
   1e9ac:	0002b372 	.word	0x0002b372

0001e9b0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1e9b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1e9b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1e9b4:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1e9b6:	2e0f      	cmp	r6, #15
   1e9b8:	d12a      	bne.n	1ea10 <z_setup_new_thread+0x60>
   1e9ba:	4821      	ldr	r0, [pc, #132]	; (1ea40 <z_setup_new_thread+0x90>)
   1e9bc:	4283      	cmp	r3, r0
   1e9be:	d12b      	bne.n	1ea18 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1e9c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1e9c4:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1e9c8:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1e9ca:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   1e9cc:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1e9ce:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e9d0:	3207      	adds	r2, #7
   1e9d2:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1e9d6:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   1e9da:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   1e9dc:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e9de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   1e9e0:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1e9e2:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   1e9e6:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   1e9e8:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1e9ea:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e9ec:	9202      	str	r2, [sp, #8]
   1e9ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e9f0:	4620      	mov	r0, r4
   1e9f2:	9201      	str	r2, [sp, #4]
   1e9f4:	9a08      	ldr	r2, [sp, #32]
   1e9f6:	9200      	str	r2, [sp, #0]
   1e9f8:	4632      	mov	r2, r6
   1e9fa:	f7f0 fde7 	bl	f5cc <arch_new_thread>
	if (!_current) {
   1e9fe:	4b11      	ldr	r3, [pc, #68]	; (1ea44 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   1ea00:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1ea02:	689b      	ldr	r3, [r3, #8]
   1ea04:	b103      	cbz	r3, 1ea08 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   1ea06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   1ea08:	4630      	mov	r0, r6
   1ea0a:	6763      	str	r3, [r4, #116]	; 0x74
   1ea0c:	b004      	add	sp, #16
   1ea0e:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1ea10:	f106 0010 	add.w	r0, r6, #16
   1ea14:	281e      	cmp	r0, #30
   1ea16:	d9d3      	bls.n	1e9c0 <z_setup_new_thread+0x10>
   1ea18:	f44f 7306 	mov.w	r3, #536	; 0x218
   1ea1c:	4a0a      	ldr	r2, [pc, #40]	; (1ea48 <z_setup_new_thread+0x98>)
   1ea1e:	490b      	ldr	r1, [pc, #44]	; (1ea4c <z_setup_new_thread+0x9c>)
   1ea20:	480b      	ldr	r0, [pc, #44]	; (1ea50 <z_setup_new_thread+0xa0>)
   1ea22:	f005 fafe 	bl	24022 <assert_print>
   1ea26:	4631      	mov	r1, r6
   1ea28:	480a      	ldr	r0, [pc, #40]	; (1ea54 <z_setup_new_thread+0xa4>)
   1ea2a:	f06f 030f 	mvn.w	r3, #15
   1ea2e:	220e      	movs	r2, #14
   1ea30:	f005 faf7 	bl	24022 <assert_print>
   1ea34:	f44f 7106 	mov.w	r1, #536	; 0x218
   1ea38:	4803      	ldr	r0, [pc, #12]	; (1ea48 <z_setup_new_thread+0x98>)
   1ea3a:	f005 faeb 	bl	24014 <assert_post_action>
   1ea3e:	bf00      	nop
   1ea40:	0001ec35 	.word	0x0001ec35
   1ea44:	20021424 	.word	0x20021424
   1ea48:	0002f377 	.word	0x0002f377
   1ea4c:	0002f39a 	.word	0x0002f39a
   1ea50:	0002a669 	.word	0x0002a669
   1ea54:	0002f41a 	.word	0x0002f41a

0001ea58 <z_impl_k_thread_create>:
{
   1ea58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea5a:	b087      	sub	sp, #28
   1ea5c:	4604      	mov	r4, r0
   1ea5e:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   1ea62:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1ea66:	b175      	cbz	r5, 1ea86 <z_impl_k_thread_create+0x2e>
   1ea68:	4919      	ldr	r1, [pc, #100]	; (1ead0 <z_impl_k_thread_create+0x78>)
   1ea6a:	f240 2387 	movw	r3, #647	; 0x287
   1ea6e:	4a19      	ldr	r2, [pc, #100]	; (1ead4 <z_impl_k_thread_create+0x7c>)
   1ea70:	4819      	ldr	r0, [pc, #100]	; (1ead8 <z_impl_k_thread_create+0x80>)
   1ea72:	f005 fad6 	bl	24022 <assert_print>
   1ea76:	4819      	ldr	r0, [pc, #100]	; (1eadc <z_impl_k_thread_create+0x84>)
   1ea78:	f005 fad3 	bl	24022 <assert_print>
   1ea7c:	f240 2187 	movw	r1, #647	; 0x287
   1ea80:	4814      	ldr	r0, [pc, #80]	; (1ead4 <z_impl_k_thread_create+0x7c>)
   1ea82:	f005 fac7 	bl	24014 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ea86:	9505      	str	r5, [sp, #20]
   1ea88:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1ea8a:	9504      	str	r5, [sp, #16]
   1ea8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1ea8e:	9503      	str	r5, [sp, #12]
   1ea90:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1ea92:	9502      	str	r5, [sp, #8]
   1ea94:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1ea96:	9501      	str	r5, [sp, #4]
   1ea98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1ea9a:	9500      	str	r5, [sp, #0]
   1ea9c:	f7ff ff88 	bl	1e9b0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1eaa0:	f1b6 3fff 	cmp.w	r6, #4294967295
   1eaa4:	bf08      	it	eq
   1eaa6:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1eaaa:	d005      	beq.n	1eab8 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1eaac:	ea56 0307 	orrs.w	r3, r6, r7
   1eab0:	d105      	bne.n	1eabe <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   1eab2:	4620      	mov	r0, r4
   1eab4:	f001 fba6 	bl	20204 <z_sched_start>
}
   1eab8:	4620      	mov	r0, r4
   1eaba:	b007      	add	sp, #28
   1eabc:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1eabe:	463a      	mov	r2, r7
   1eac0:	4633      	mov	r3, r6
   1eac2:	4907      	ldr	r1, [pc, #28]	; (1eae0 <z_impl_k_thread_create+0x88>)
   1eac4:	f104 0018 	add.w	r0, r4, #24
   1eac8:	f002 fc16 	bl	212f8 <z_add_timeout>
   1eacc:	e7f4      	b.n	1eab8 <z_impl_k_thread_create+0x60>
   1eace:	bf00      	nop
   1ead0:	0002f44b 	.word	0x0002f44b
   1ead4:	0002f377 	.word	0x0002f377
   1ead8:	0002a669 	.word	0x0002a669
   1eadc:	0002f45d 	.word	0x0002f45d
   1eae0:	00020ad1 	.word	0x00020ad1

0001eae4 <z_init_static_threads>:
{
   1eae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eae8:	4c39      	ldr	r4, [pc, #228]	; (1ebd0 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1eaea:	4d3a      	ldr	r5, [pc, #232]	; (1ebd4 <z_init_static_threads+0xf0>)
{
   1eaec:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1eaee:	42ac      	cmp	r4, r5
   1eaf0:	4626      	mov	r6, r4
   1eaf2:	d92a      	bls.n	1eb4a <z_init_static_threads+0x66>
   1eaf4:	4938      	ldr	r1, [pc, #224]	; (1ebd8 <z_init_static_threads+0xf4>)
   1eaf6:	f240 23ee 	movw	r3, #750	; 0x2ee
   1eafa:	4a38      	ldr	r2, [pc, #224]	; (1ebdc <z_init_static_threads+0xf8>)
   1eafc:	4838      	ldr	r0, [pc, #224]	; (1ebe0 <z_init_static_threads+0xfc>)
   1eafe:	f005 fa90 	bl	24022 <assert_print>
   1eb02:	4838      	ldr	r0, [pc, #224]	; (1ebe4 <z_init_static_threads+0x100>)
   1eb04:	f005 fa8d 	bl	24022 <assert_print>
   1eb08:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   1eb0c:	4833      	ldr	r0, [pc, #204]	; (1ebdc <z_init_static_threads+0xf8>)
   1eb0e:	f005 fa81 	bl	24014 <assert_post_action>
		z_setup_new_thread(
   1eb12:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1eb16:	9305      	str	r3, [sp, #20]
   1eb18:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1eb1c:	9304      	str	r3, [sp, #16]
   1eb1e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1eb22:	9303      	str	r3, [sp, #12]
   1eb24:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1eb28:	9302      	str	r3, [sp, #8]
   1eb2a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1eb2e:	9301      	str	r3, [sp, #4]
   1eb30:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1eb34:	9300      	str	r3, [sp, #0]
   1eb36:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1eb3a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1eb3e:	f7ff ff37 	bl	1e9b0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1eb42:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1eb46:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1eb48:	e7d1      	b.n	1eaee <z_init_static_threads+0xa>
   1eb4a:	42ae      	cmp	r6, r5
   1eb4c:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1eb50:	d3df      	bcc.n	1eb12 <z_init_static_threads+0x2e>
	k_sched_lock();
   1eb52:	f001 fba9 	bl	202a8 <k_sched_lock>
   1eb56:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1eb5a:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   1eb5e:	4c1c      	ldr	r4, [pc, #112]	; (1ebd0 <z_init_static_threads+0xec>)
   1eb60:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1ebe8 <z_init_static_threads+0x104>
   1eb64:	42ac      	cmp	r4, r5
   1eb66:	d92c      	bls.n	1ebc2 <z_init_static_threads+0xde>
   1eb68:	491b      	ldr	r1, [pc, #108]	; (1ebd8 <z_init_static_threads+0xf4>)
   1eb6a:	f240 330d 	movw	r3, #781	; 0x30d
   1eb6e:	4a1b      	ldr	r2, [pc, #108]	; (1ebdc <z_init_static_threads+0xf8>)
   1eb70:	481b      	ldr	r0, [pc, #108]	; (1ebe0 <z_init_static_threads+0xfc>)
   1eb72:	f005 fa56 	bl	24022 <assert_print>
   1eb76:	481b      	ldr	r0, [pc, #108]	; (1ebe4 <z_init_static_threads+0x100>)
   1eb78:	f005 fa53 	bl	24022 <assert_print>
   1eb7c:	f240 310d 	movw	r1, #781	; 0x30d
   1eb80:	e7c4      	b.n	1eb0c <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1eb82:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1eb84:	1c5a      	adds	r2, r3, #1
   1eb86:	d00d      	beq.n	1eba4 <z_init_static_threads+0xc0>
   1eb88:	2100      	movs	r1, #0
   1eb8a:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   1eb8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1eb90:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1eb94:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1eb98:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1eb9c:	d104      	bne.n	1eba8 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   1eb9e:	4640      	mov	r0, r8
   1eba0:	f001 fb30 	bl	20204 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1eba4:	3430      	adds	r4, #48	; 0x30
   1eba6:	e7dd      	b.n	1eb64 <z_init_static_threads+0x80>
   1eba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ebac:	2300      	movs	r3, #0
   1ebae:	f7ea f99f 	bl	8ef0 <__aeabi_uldivmod>
   1ebb2:	4602      	mov	r2, r0
   1ebb4:	460b      	mov	r3, r1
   1ebb6:	f108 0018 	add.w	r0, r8, #24
   1ebba:	4649      	mov	r1, r9
   1ebbc:	f002 fb9c 	bl	212f8 <z_add_timeout>
   1ebc0:	e7f0      	b.n	1eba4 <z_init_static_threads+0xc0>
   1ebc2:	d3de      	bcc.n	1eb82 <z_init_static_threads+0x9e>
}
   1ebc4:	b007      	add	sp, #28
   1ebc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1ebca:	f001 bbd9 	b.w	20380 <k_sched_unlock>
   1ebce:	bf00      	nop
   1ebd0:	00029464 	.word	0x00029464
   1ebd4:	000295b4 	.word	0x000295b4
   1ebd8:	0002f482 	.word	0x0002f482
   1ebdc:	0002f377 	.word	0x0002f377
   1ebe0:	0002a669 	.word	0x0002a669
   1ebe4:	0002b5ef 	.word	0x0002b5ef
   1ebe8:	00020ad1 	.word	0x00020ad1

0001ebec <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1ebec:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1ebee:	b138      	cbz	r0, 1ec00 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1ebf0:	4b04      	ldr	r3, [pc, #16]	; (1ec04 <z_spin_lock_valid+0x18>)
   1ebf2:	f000 0003 	and.w	r0, r0, #3
   1ebf6:	7d1b      	ldrb	r3, [r3, #20]
   1ebf8:	1ac0      	subs	r0, r0, r3
   1ebfa:	bf18      	it	ne
   1ebfc:	2001      	movne	r0, #1
   1ebfe:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1ec00:	2001      	movs	r0, #1
}
   1ec02:	4770      	bx	lr
   1ec04:	20021424 	.word	0x20021424

0001ec08 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1ec08:	4a05      	ldr	r2, [pc, #20]	; (1ec20 <z_spin_unlock_valid+0x18>)
{
   1ec0a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1ec0c:	7d11      	ldrb	r1, [r2, #20]
   1ec0e:	6892      	ldr	r2, [r2, #8]
   1ec10:	430a      	orrs	r2, r1
   1ec12:	6801      	ldr	r1, [r0, #0]
   1ec14:	2000      	movs	r0, #0
   1ec16:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   1ec18:	bf04      	itt	eq
   1ec1a:	6018      	streq	r0, [r3, #0]
	return true;
   1ec1c:	2001      	moveq	r0, #1
}
   1ec1e:	4770      	bx	lr
   1ec20:	20021424 	.word	0x20021424

0001ec24 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1ec24:	4b02      	ldr	r3, [pc, #8]	; (1ec30 <z_spin_lock_set_owner+0xc>)
   1ec26:	7d1a      	ldrb	r2, [r3, #20]
   1ec28:	689b      	ldr	r3, [r3, #8]
   1ec2a:	4313      	orrs	r3, r2
   1ec2c:	6003      	str	r3, [r0, #0]
}
   1ec2e:	4770      	bx	lr
   1ec30:	20021424 	.word	0x20021424

0001ec34 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1ec34:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1ec36:	4c13      	ldr	r4, [pc, #76]	; (1ec84 <idle+0x50>)
   1ec38:	68a3      	ldr	r3, [r4, #8]
   1ec3a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1ec3e:	2b00      	cmp	r3, #0
   1ec40:	db10      	blt.n	1ec64 <idle+0x30>
   1ec42:	4d11      	ldr	r5, [pc, #68]	; (1ec88 <idle+0x54>)
	__asm__ volatile(
   1ec44:	f04f 0220 	mov.w	r2, #32
   1ec48:	f3ef 8311 	mrs	r3, BASEPRI
   1ec4c:	f382 8812 	msr	BASEPRI_MAX, r2
   1ec50:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1ec54:	f002 fc62 	bl	2151c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1ec58:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1ec5a:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1ec5c:	b963      	cbnz	r3, 1ec78 <idle+0x44>
	arch_cpu_idle();
   1ec5e:	f7f0 fb71 	bl	f344 <arch_cpu_idle>
}
   1ec62:	e7ef      	b.n	1ec44 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1ec64:	4909      	ldr	r1, [pc, #36]	; (1ec8c <idle+0x58>)
   1ec66:	480a      	ldr	r0, [pc, #40]	; (1ec90 <idle+0x5c>)
   1ec68:	2327      	movs	r3, #39	; 0x27
   1ec6a:	4a0a      	ldr	r2, [pc, #40]	; (1ec94 <idle+0x60>)
   1ec6c:	f005 f9d9 	bl	24022 <assert_print>
   1ec70:	2127      	movs	r1, #39	; 0x27
   1ec72:	4808      	ldr	r0, [pc, #32]	; (1ec94 <idle+0x60>)
   1ec74:	f005 f9ce 	bl	24014 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1ec78:	f7f0 f89c 	bl	edb4 <pm_system_suspend>
   1ec7c:	2800      	cmp	r0, #0
   1ec7e:	d1e1      	bne.n	1ec44 <idle+0x10>
   1ec80:	e7ed      	b.n	1ec5e <idle+0x2a>
   1ec82:	bf00      	nop
   1ec84:	20021424 	.word	0x20021424
   1ec88:	200221b2 	.word	0x200221b2
   1ec8c:	0002f4d0 	.word	0x0002f4d0
   1ec90:	0002a669 	.word	0x0002a669
   1ec94:	0002f4af 	.word	0x0002f4af

0001ec98 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1ec98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ec9c:	4604      	mov	r4, r0
   1ec9e:	4617      	mov	r7, r2
   1eca0:	461e      	mov	r6, r3
   1eca2:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1eca6:	b165      	cbz	r5, 1ecc2 <z_impl_k_mutex_lock+0x2a>
   1eca8:	4958      	ldr	r1, [pc, #352]	; (1ee0c <z_impl_k_mutex_lock+0x174>)
   1ecaa:	2365      	movs	r3, #101	; 0x65
   1ecac:	4a58      	ldr	r2, [pc, #352]	; (1ee10 <z_impl_k_mutex_lock+0x178>)
   1ecae:	4859      	ldr	r0, [pc, #356]	; (1ee14 <z_impl_k_mutex_lock+0x17c>)
   1ecb0:	f005 f9b7 	bl	24022 <assert_print>
   1ecb4:	4858      	ldr	r0, [pc, #352]	; (1ee18 <z_impl_k_mutex_lock+0x180>)
   1ecb6:	f005 f9b4 	bl	24022 <assert_print>
   1ecba:	2165      	movs	r1, #101	; 0x65
   1ecbc:	4854      	ldr	r0, [pc, #336]	; (1ee10 <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ecbe:	f005 f9a9 	bl	24014 <assert_post_action>
   1ecc2:	f04f 0320 	mov.w	r3, #32
   1ecc6:	f3ef 8811 	mrs	r8, BASEPRI
   1ecca:	f383 8812 	msr	BASEPRI_MAX, r3
   1ecce:	f3bf 8f6f 	isb	sy
   1ecd2:	4852      	ldr	r0, [pc, #328]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
   1ecd4:	f7ff ff8a 	bl	1ebec <z_spin_lock_valid>
   1ecd8:	b960      	cbnz	r0, 1ecf4 <z_impl_k_mutex_lock+0x5c>
   1ecda:	2394      	movs	r3, #148	; 0x94
   1ecdc:	4a50      	ldr	r2, [pc, #320]	; (1ee20 <z_impl_k_mutex_lock+0x188>)
   1ecde:	4951      	ldr	r1, [pc, #324]	; (1ee24 <z_impl_k_mutex_lock+0x18c>)
   1ece0:	484c      	ldr	r0, [pc, #304]	; (1ee14 <z_impl_k_mutex_lock+0x17c>)
   1ece2:	f005 f99e 	bl	24022 <assert_print>
   1ece6:	494d      	ldr	r1, [pc, #308]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
   1ece8:	484f      	ldr	r0, [pc, #316]	; (1ee28 <z_impl_k_mutex_lock+0x190>)
   1ecea:	f005 f99a 	bl	24022 <assert_print>
   1ecee:	2194      	movs	r1, #148	; 0x94
   1ecf0:	484b      	ldr	r0, [pc, #300]	; (1ee20 <z_impl_k_mutex_lock+0x188>)
   1ecf2:	e7e4      	b.n	1ecbe <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   1ecf4:	4849      	ldr	r0, [pc, #292]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
   1ecf6:	f7ff ff95 	bl	1ec24 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1ecfa:	68e3      	ldr	r3, [r4, #12]
   1ecfc:	4a4b      	ldr	r2, [pc, #300]	; (1ee2c <z_impl_k_mutex_lock+0x194>)
   1ecfe:	b19b      	cbz	r3, 1ed28 <z_impl_k_mutex_lock+0x90>
   1ed00:	68a0      	ldr	r0, [r4, #8]
   1ed02:	6891      	ldr	r1, [r2, #8]
   1ed04:	4288      	cmp	r0, r1
   1ed06:	d027      	beq.n	1ed58 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1ed08:	ea57 0306 	orrs.w	r3, r7, r6
   1ed0c:	d12c      	bne.n	1ed68 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ed0e:	4843      	ldr	r0, [pc, #268]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
   1ed10:	f7ff ff7a 	bl	1ec08 <z_spin_unlock_valid>
   1ed14:	b1a0      	cbz	r0, 1ed40 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   1ed16:	f388 8811 	msr	BASEPRI, r8
   1ed1a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1ed1e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1ed22:	b002      	add	sp, #8
   1ed24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1ed28:	6891      	ldr	r1, [r2, #8]
   1ed2a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1ed2e:	3301      	adds	r3, #1
   1ed30:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1ed32:	6893      	ldr	r3, [r2, #8]
   1ed34:	4839      	ldr	r0, [pc, #228]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1ed36:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1ed38:	60a3      	str	r3, [r4, #8]
   1ed3a:	f7ff ff65 	bl	1ec08 <z_spin_unlock_valid>
   1ed3e:	b968      	cbnz	r0, 1ed5c <z_impl_k_mutex_lock+0xc4>
   1ed40:	23c2      	movs	r3, #194	; 0xc2
   1ed42:	4a37      	ldr	r2, [pc, #220]	; (1ee20 <z_impl_k_mutex_lock+0x188>)
   1ed44:	493a      	ldr	r1, [pc, #232]	; (1ee30 <z_impl_k_mutex_lock+0x198>)
   1ed46:	4833      	ldr	r0, [pc, #204]	; (1ee14 <z_impl_k_mutex_lock+0x17c>)
   1ed48:	f005 f96b 	bl	24022 <assert_print>
   1ed4c:	4933      	ldr	r1, [pc, #204]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
   1ed4e:	4839      	ldr	r0, [pc, #228]	; (1ee34 <z_impl_k_mutex_lock+0x19c>)
   1ed50:	f005 f967 	bl	24022 <assert_print>
   1ed54:	21c2      	movs	r1, #194	; 0xc2
   1ed56:	e7cb      	b.n	1ecf0 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   1ed58:	6921      	ldr	r1, [r4, #16]
   1ed5a:	e7e8      	b.n	1ed2e <z_impl_k_mutex_lock+0x96>
   1ed5c:	f388 8811 	msr	BASEPRI, r8
   1ed60:	f3bf 8f6f 	isb	sy
		return 0;
   1ed64:	2000      	movs	r0, #0
   1ed66:	e7dc      	b.n	1ed22 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1ed68:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1ed6c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1ed70:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1ed74:	4299      	cmp	r1, r3
   1ed76:	bfa8      	it	ge
   1ed78:	4619      	movge	r1, r3
   1ed7a:	4291      	cmp	r1, r2
   1ed7c:	bfb8      	it	lt
   1ed7e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1ed80:	428b      	cmp	r3, r1
   1ed82:	dd02      	ble.n	1ed8a <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   1ed84:	f009 fb2c 	bl	283e0 <adjust_owner_prio.isra.0>
   1ed88:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1ed8a:	4622      	mov	r2, r4
   1ed8c:	4641      	mov	r1, r8
   1ed8e:	e9cd 7600 	strd	r7, r6, [sp]
   1ed92:	4822      	ldr	r0, [pc, #136]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
   1ed94:	f001 fcc2 	bl	2071c <z_pend_curr>
	if (got_mutex == 0) {
   1ed98:	2800      	cmp	r0, #0
   1ed9a:	d0e3      	beq.n	1ed64 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1ed9c:	f04f 0320 	mov.w	r3, #32
   1eda0:	f3ef 8611 	mrs	r6, BASEPRI
   1eda4:	f383 8812 	msr	BASEPRI_MAX, r3
   1eda8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1edac:	481b      	ldr	r0, [pc, #108]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
   1edae:	f7ff ff1d 	bl	1ebec <z_spin_lock_valid>
   1edb2:	2800      	cmp	r0, #0
   1edb4:	d091      	beq.n	1ecda <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   1edb6:	4819      	ldr	r0, [pc, #100]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
   1edb8:	f7ff ff34 	bl	1ec24 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   1edbc:	68a0      	ldr	r0, [r4, #8]
   1edbe:	b1c0      	cbz	r0, 1edf2 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1edc0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1edc2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1edc4:	429c      	cmp	r4, r3
   1edc6:	d00a      	beq.n	1edde <z_impl_k_mutex_lock+0x146>
   1edc8:	b14b      	cbz	r3, 1edde <z_impl_k_mutex_lock+0x146>
   1edca:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1edce:	4299      	cmp	r1, r3
   1edd0:	bfa8      	it	ge
   1edd2:	4619      	movge	r1, r3
   1edd4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1edd8:	4299      	cmp	r1, r3
   1edda:	bfb8      	it	lt
   1eddc:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1edde:	f009 faff 	bl	283e0 <adjust_owner_prio.isra.0>
   1ede2:	b130      	cbz	r0, 1edf2 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   1ede4:	4631      	mov	r1, r6
   1ede6:	480d      	ldr	r0, [pc, #52]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
   1ede8:	f001 f9ca 	bl	20180 <z_reschedule>
	return -EAGAIN;
   1edec:	f06f 000a 	mvn.w	r0, #10
   1edf0:	e797      	b.n	1ed22 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   1edf2:	2d00      	cmp	r5, #0
   1edf4:	d1f6      	bne.n	1ede4 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1edf6:	4809      	ldr	r0, [pc, #36]	; (1ee1c <z_impl_k_mutex_lock+0x184>)
   1edf8:	f7ff ff06 	bl	1ec08 <z_spin_unlock_valid>
   1edfc:	2800      	cmp	r0, #0
   1edfe:	d09f      	beq.n	1ed40 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   1ee00:	f386 8811 	msr	BASEPRI, r6
   1ee04:	f3bf 8f6f 	isb	sy
   1ee08:	e7f0      	b.n	1edec <z_impl_k_mutex_lock+0x154>
   1ee0a:	bf00      	nop
   1ee0c:	0002f44b 	.word	0x0002f44b
   1ee10:	0002f4f8 	.word	0x0002f4f8
   1ee14:	0002a669 	.word	0x0002a669
   1ee18:	0002f51a 	.word	0x0002f51a
   1ee1c:	2002144c 	.word	0x2002144c
   1ee20:	0002b32e 	.word	0x0002b32e
   1ee24:	0002b387 	.word	0x0002b387
   1ee28:	0002b39c 	.word	0x0002b39c
   1ee2c:	20021424 	.word	0x20021424
   1ee30:	0002b35b 	.word	0x0002b35b
   1ee34:	0002b372 	.word	0x0002b372

0001ee38 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1ee38:	b570      	push	{r4, r5, r6, lr}
   1ee3a:	4604      	mov	r4, r0
   1ee3c:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1ee40:	b166      	cbz	r6, 1ee5c <z_impl_k_mutex_unlock+0x24>
   1ee42:	4938      	ldr	r1, [pc, #224]	; (1ef24 <z_impl_k_mutex_unlock+0xec>)
   1ee44:	23cd      	movs	r3, #205	; 0xcd
   1ee46:	4a38      	ldr	r2, [pc, #224]	; (1ef28 <z_impl_k_mutex_unlock+0xf0>)
   1ee48:	4838      	ldr	r0, [pc, #224]	; (1ef2c <z_impl_k_mutex_unlock+0xf4>)
   1ee4a:	f005 f8ea 	bl	24022 <assert_print>
   1ee4e:	4838      	ldr	r0, [pc, #224]	; (1ef30 <z_impl_k_mutex_unlock+0xf8>)
   1ee50:	f005 f8e7 	bl	24022 <assert_print>
   1ee54:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1ee56:	4834      	ldr	r0, [pc, #208]	; (1ef28 <z_impl_k_mutex_unlock+0xf0>)
   1ee58:	f005 f8dc 	bl	24014 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   1ee5c:	6883      	ldr	r3, [r0, #8]
   1ee5e:	2b00      	cmp	r3, #0
   1ee60:	d059      	beq.n	1ef16 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   1ee62:	4a34      	ldr	r2, [pc, #208]	; (1ef34 <z_impl_k_mutex_unlock+0xfc>)
   1ee64:	6892      	ldr	r2, [r2, #8]
   1ee66:	4293      	cmp	r3, r2
   1ee68:	d158      	bne.n	1ef1c <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1ee6a:	68c3      	ldr	r3, [r0, #12]
   1ee6c:	b93b      	cbnz	r3, 1ee7e <z_impl_k_mutex_unlock+0x46>
   1ee6e:	4932      	ldr	r1, [pc, #200]	; (1ef38 <z_impl_k_mutex_unlock+0x100>)
   1ee70:	23e5      	movs	r3, #229	; 0xe5
   1ee72:	4a2d      	ldr	r2, [pc, #180]	; (1ef28 <z_impl_k_mutex_unlock+0xf0>)
   1ee74:	482d      	ldr	r0, [pc, #180]	; (1ef2c <z_impl_k_mutex_unlock+0xf4>)
   1ee76:	f005 f8d4 	bl	24022 <assert_print>
   1ee7a:	21e5      	movs	r1, #229	; 0xe5
   1ee7c:	e7eb      	b.n	1ee56 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1ee7e:	2b01      	cmp	r3, #1
   1ee80:	d003      	beq.n	1ee8a <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   1ee82:	3b01      	subs	r3, #1
   1ee84:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1ee86:	2000      	movs	r0, #0
}
   1ee88:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1ee8a:	f04f 0320 	mov.w	r3, #32
   1ee8e:	f3ef 8511 	mrs	r5, BASEPRI
   1ee92:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ee9a:	4828      	ldr	r0, [pc, #160]	; (1ef3c <z_impl_k_mutex_unlock+0x104>)
   1ee9c:	f7ff fea6 	bl	1ebec <z_spin_lock_valid>
   1eea0:	b960      	cbnz	r0, 1eebc <z_impl_k_mutex_unlock+0x84>
   1eea2:	2394      	movs	r3, #148	; 0x94
   1eea4:	4a26      	ldr	r2, [pc, #152]	; (1ef40 <z_impl_k_mutex_unlock+0x108>)
   1eea6:	4927      	ldr	r1, [pc, #156]	; (1ef44 <z_impl_k_mutex_unlock+0x10c>)
   1eea8:	4820      	ldr	r0, [pc, #128]	; (1ef2c <z_impl_k_mutex_unlock+0xf4>)
   1eeaa:	f005 f8ba 	bl	24022 <assert_print>
   1eeae:	4923      	ldr	r1, [pc, #140]	; (1ef3c <z_impl_k_mutex_unlock+0x104>)
   1eeb0:	4825      	ldr	r0, [pc, #148]	; (1ef48 <z_impl_k_mutex_unlock+0x110>)
   1eeb2:	f005 f8b6 	bl	24022 <assert_print>
   1eeb6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eeb8:	4821      	ldr	r0, [pc, #132]	; (1ef40 <z_impl_k_mutex_unlock+0x108>)
   1eeba:	e7cd      	b.n	1ee58 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   1eebc:	481f      	ldr	r0, [pc, #124]	; (1ef3c <z_impl_k_mutex_unlock+0x104>)
   1eebe:	f7ff feb1 	bl	1ec24 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1eec2:	6921      	ldr	r1, [r4, #16]
   1eec4:	68a0      	ldr	r0, [r4, #8]
   1eec6:	f009 fa8b 	bl	283e0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1eeca:	4620      	mov	r0, r4
   1eecc:	f001 fea4 	bl	20c18 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1eed0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1eed2:	b150      	cbz	r0, 1eeea <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   1eed4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1eed8:	6122      	str	r2, [r4, #16]
   1eeda:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1eedc:	f001 f8c4 	bl	20068 <z_ready_thread>
		z_reschedule(&lock, key);
   1eee0:	4629      	mov	r1, r5
   1eee2:	4816      	ldr	r0, [pc, #88]	; (1ef3c <z_impl_k_mutex_unlock+0x104>)
   1eee4:	f001 f94c 	bl	20180 <z_reschedule>
   1eee8:	e7cd      	b.n	1ee86 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   1eeea:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eeec:	4813      	ldr	r0, [pc, #76]	; (1ef3c <z_impl_k_mutex_unlock+0x104>)
   1eeee:	f7ff fe8b 	bl	1ec08 <z_spin_unlock_valid>
   1eef2:	b958      	cbnz	r0, 1ef0c <z_impl_k_mutex_unlock+0xd4>
   1eef4:	23c2      	movs	r3, #194	; 0xc2
   1eef6:	4a12      	ldr	r2, [pc, #72]	; (1ef40 <z_impl_k_mutex_unlock+0x108>)
   1eef8:	4914      	ldr	r1, [pc, #80]	; (1ef4c <z_impl_k_mutex_unlock+0x114>)
   1eefa:	480c      	ldr	r0, [pc, #48]	; (1ef2c <z_impl_k_mutex_unlock+0xf4>)
   1eefc:	f005 f891 	bl	24022 <assert_print>
   1ef00:	490e      	ldr	r1, [pc, #56]	; (1ef3c <z_impl_k_mutex_unlock+0x104>)
   1ef02:	4813      	ldr	r0, [pc, #76]	; (1ef50 <z_impl_k_mutex_unlock+0x118>)
   1ef04:	f005 f88d 	bl	24022 <assert_print>
   1ef08:	21c2      	movs	r1, #194	; 0xc2
   1ef0a:	e7d5      	b.n	1eeb8 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   1ef0c:	f385 8811 	msr	BASEPRI, r5
   1ef10:	f3bf 8f6f 	isb	sy
   1ef14:	e7b7      	b.n	1ee86 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   1ef16:	f06f 0015 	mvn.w	r0, #21
   1ef1a:	e7b5      	b.n	1ee88 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   1ef1c:	f04f 30ff 	mov.w	r0, #4294967295
   1ef20:	e7b2      	b.n	1ee88 <z_impl_k_mutex_unlock+0x50>
   1ef22:	bf00      	nop
   1ef24:	0002f44b 	.word	0x0002f44b
   1ef28:	0002f4f8 	.word	0x0002f4f8
   1ef2c:	0002a669 	.word	0x0002a669
   1ef30:	0002f51a 	.word	0x0002f51a
   1ef34:	20021424 	.word	0x20021424
   1ef38:	0002f53f 	.word	0x0002f53f
   1ef3c:	2002144c 	.word	0x2002144c
   1ef40:	0002b32e 	.word	0x0002b32e
   1ef44:	0002b387 	.word	0x0002b387
   1ef48:	0002b39c 	.word	0x0002b39c
   1ef4c:	0002b35b 	.word	0x0002b35b
   1ef50:	0002b372 	.word	0x0002b372

0001ef54 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1ef54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ef58:	4604      	mov	r4, r0
   1ef5a:	460e      	mov	r6, r1
   1ef5c:	4690      	mov	r8, r2
   1ef5e:	4699      	mov	r9, r3
   1ef60:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1ef64:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1ef68:	f04f 0320 	mov.w	r3, #32
   1ef6c:	f3ef 8711 	mrs	r7, BASEPRI
   1ef70:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ef78:	4628      	mov	r0, r5
   1ef7a:	f7ff fe37 	bl	1ebec <z_spin_lock_valid>
   1ef7e:	b968      	cbnz	r0, 1ef9c <queue_insert+0x48>
   1ef80:	2394      	movs	r3, #148	; 0x94
   1ef82:	4a3b      	ldr	r2, [pc, #236]	; (1f070 <queue_insert+0x11c>)
   1ef84:	493b      	ldr	r1, [pc, #236]	; (1f074 <queue_insert+0x120>)
   1ef86:	483c      	ldr	r0, [pc, #240]	; (1f078 <queue_insert+0x124>)
   1ef88:	f005 f84b 	bl	24022 <assert_print>
   1ef8c:	4629      	mov	r1, r5
   1ef8e:	483b      	ldr	r0, [pc, #236]	; (1f07c <queue_insert+0x128>)
   1ef90:	f005 f847 	bl	24022 <assert_print>
   1ef94:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ef96:	4836      	ldr	r0, [pc, #216]	; (1f070 <queue_insert+0x11c>)
   1ef98:	f005 f83c 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ef9c:	4628      	mov	r0, r5
   1ef9e:	f7ff fe41 	bl	1ec24 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   1efa2:	f1ba 0f00 	cmp.w	sl, #0
   1efa6:	d000      	beq.n	1efaa <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1efa8:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1efaa:	f104 000c 	add.w	r0, r4, #12
   1efae:	f001 fe33 	bl	20c18 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1efb2:	b158      	cbz	r0, 1efcc <queue_insert+0x78>
   1efb4:	2300      	movs	r3, #0
   1efb6:	f8c0 8014 	str.w	r8, [r0, #20]
   1efba:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1efbc:	f001 f854 	bl	20068 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1efc0:	4628      	mov	r0, r5
   1efc2:	4639      	mov	r1, r7
   1efc4:	f001 f8dc 	bl	20180 <z_reschedule>
		return 0;
   1efc8:	2000      	movs	r0, #0
   1efca:	e01c      	b.n	1f006 <queue_insert+0xb2>
	if (alloc) {
   1efcc:	f1b9 0f00 	cmp.w	r9, #0
   1efd0:	d02b      	beq.n	1f02a <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   1efd2:	2108      	movs	r1, #8
   1efd4:	f003 f8da 	bl	2218c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1efd8:	b9b8      	cbnz	r0, 1f00a <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1efda:	4628      	mov	r0, r5
   1efdc:	f7ff fe14 	bl	1ec08 <z_spin_unlock_valid>
   1efe0:	b958      	cbnz	r0, 1effa <queue_insert+0xa6>
   1efe2:	23c2      	movs	r3, #194	; 0xc2
   1efe4:	4a22      	ldr	r2, [pc, #136]	; (1f070 <queue_insert+0x11c>)
   1efe6:	4926      	ldr	r1, [pc, #152]	; (1f080 <queue_insert+0x12c>)
   1efe8:	4823      	ldr	r0, [pc, #140]	; (1f078 <queue_insert+0x124>)
   1efea:	f005 f81a 	bl	24022 <assert_print>
   1efee:	4629      	mov	r1, r5
   1eff0:	4824      	ldr	r0, [pc, #144]	; (1f084 <queue_insert+0x130>)
   1eff2:	f005 f816 	bl	24022 <assert_print>
   1eff6:	21c2      	movs	r1, #194	; 0xc2
   1eff8:	e7cd      	b.n	1ef96 <queue_insert+0x42>
	__asm__ volatile(
   1effa:	f387 8811 	msr	BASEPRI, r7
   1effe:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1f002:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   1f006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1f00a:	2201      	movs	r2, #1
		anode->data = data;
   1f00c:	f8c0 8004 	str.w	r8, [r0, #4]
   1f010:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f012:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f014:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1f018:	b95e      	cbnz	r6, 1f032 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f01a:	6822      	ldr	r2, [r4, #0]
   1f01c:	430a      	orrs	r2, r1
   1f01e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f020:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1f022:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f024:	b96a      	cbnz	r2, 1f042 <queue_insert+0xee>
	list->tail = node;
   1f026:	6060      	str	r0, [r4, #4]
}
   1f028:	e00b      	b.n	1f042 <queue_insert+0xee>
}
   1f02a:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1f02c:	f8c8 9000 	str.w	r9, [r8]
}
   1f030:	e7ef      	b.n	1f012 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f032:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1f034:	2a03      	cmp	r2, #3
   1f036:	d810      	bhi.n	1f05a <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f038:	6001      	str	r1, [r0, #0]
	return list->tail;
   1f03a:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1f03c:	b939      	cbnz	r1, 1f04e <queue_insert+0xfa>
	list->head = node;
   1f03e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f042:	2104      	movs	r1, #4
   1f044:	f104 0014 	add.w	r0, r4, #20
   1f048:	f009 fb8c 	bl	28764 <z_handle_obj_poll_events>
   1f04c:	e7b8      	b.n	1efc0 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f04e:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f050:	f002 0203 	and.w	r2, r2, #3
   1f054:	4302      	orrs	r2, r0
   1f056:	600a      	str	r2, [r1, #0]
   1f058:	e7e5      	b.n	1f026 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f05a:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f05e:	430a      	orrs	r2, r1
   1f060:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f062:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f064:	f002 0203 	and.w	r2, r2, #3
   1f068:	ea40 0302 	orr.w	r3, r0, r2
   1f06c:	6033      	str	r3, [r6, #0]
}
   1f06e:	e7e8      	b.n	1f042 <queue_insert+0xee>
   1f070:	0002b32e 	.word	0x0002b32e
   1f074:	0002b387 	.word	0x0002b387
   1f078:	0002a669 	.word	0x0002a669
   1f07c:	0002b39c 	.word	0x0002b39c
   1f080:	0002b35b 	.word	0x0002b35b
   1f084:	0002b372 	.word	0x0002b372

0001f088 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1f088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f08c:	4606      	mov	r6, r0
   1f08e:	4691      	mov	r9, r2
   1f090:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f092:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f096:	f04f 0320 	mov.w	r3, #32
   1f09a:	f3ef 8811 	mrs	r8, BASEPRI
   1f09e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f0a6:	4628      	mov	r0, r5
   1f0a8:	f7ff fda0 	bl	1ebec <z_spin_lock_valid>
   1f0ac:	b968      	cbnz	r0, 1f0ca <z_impl_k_queue_get+0x42>
   1f0ae:	2394      	movs	r3, #148	; 0x94
   1f0b0:	4a23      	ldr	r2, [pc, #140]	; (1f140 <z_impl_k_queue_get+0xb8>)
   1f0b2:	4924      	ldr	r1, [pc, #144]	; (1f144 <z_impl_k_queue_get+0xbc>)
   1f0b4:	4824      	ldr	r0, [pc, #144]	; (1f148 <z_impl_k_queue_get+0xc0>)
   1f0b6:	f004 ffb4 	bl	24022 <assert_print>
   1f0ba:	4629      	mov	r1, r5
   1f0bc:	4823      	ldr	r0, [pc, #140]	; (1f14c <z_impl_k_queue_get+0xc4>)
   1f0be:	f004 ffb0 	bl	24022 <assert_print>
   1f0c2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f0c4:	481e      	ldr	r0, [pc, #120]	; (1f140 <z_impl_k_queue_get+0xb8>)
   1f0c6:	f004 ffa5 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f0ca:	4628      	mov	r0, r5
   1f0cc:	f7ff fdaa 	bl	1ec24 <z_spin_lock_set_owner>
	return list->head;
   1f0d0:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1f0d2:	b1ec      	cbz	r4, 1f110 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f0d4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f0d6:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f0d8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f0dc:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1f0de:	4620      	mov	r0, r4
   1f0e0:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1f0e4:	6033      	str	r3, [r6, #0]
	list->tail = node;
   1f0e6:	bf08      	it	eq
   1f0e8:	6073      	streq	r3, [r6, #4]
   1f0ea:	f009 f988 	bl	283fe <z_queue_node_peek>
   1f0ee:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f0f0:	4628      	mov	r0, r5
   1f0f2:	f7ff fd89 	bl	1ec08 <z_spin_unlock_valid>
   1f0f6:	b9d8      	cbnz	r0, 1f130 <z_impl_k_queue_get+0xa8>
   1f0f8:	23c2      	movs	r3, #194	; 0xc2
   1f0fa:	4a11      	ldr	r2, [pc, #68]	; (1f140 <z_impl_k_queue_get+0xb8>)
   1f0fc:	4914      	ldr	r1, [pc, #80]	; (1f150 <z_impl_k_queue_get+0xc8>)
   1f0fe:	4812      	ldr	r0, [pc, #72]	; (1f148 <z_impl_k_queue_get+0xc0>)
   1f100:	f004 ff8f 	bl	24022 <assert_print>
   1f104:	4629      	mov	r1, r5
   1f106:	4813      	ldr	r0, [pc, #76]	; (1f154 <z_impl_k_queue_get+0xcc>)
   1f108:	f004 ff8b 	bl	24022 <assert_print>
   1f10c:	21c2      	movs	r1, #194	; 0xc2
   1f10e:	e7d9      	b.n	1f0c4 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f110:	ea59 0307 	orrs.w	r3, r9, r7
   1f114:	d0ec      	beq.n	1f0f0 <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1f116:	4641      	mov	r1, r8
   1f118:	4628      	mov	r0, r5
   1f11a:	e9cd 9700 	strd	r9, r7, [sp]
   1f11e:	f106 020c 	add.w	r2, r6, #12
   1f122:	f001 fafb 	bl	2071c <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   1f126:	b938      	cbnz	r0, 1f138 <z_impl_k_queue_get+0xb0>
   1f128:	4b0b      	ldr	r3, [pc, #44]	; (1f158 <z_impl_k_queue_get+0xd0>)
   1f12a:	689b      	ldr	r3, [r3, #8]
   1f12c:	695c      	ldr	r4, [r3, #20]
   1f12e:	e003      	b.n	1f138 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   1f130:	f388 8811 	msr	BASEPRI, r8
   1f134:	f3bf 8f6f 	isb	sy
}
   1f138:	4620      	mov	r0, r4
   1f13a:	b003      	add	sp, #12
   1f13c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f140:	0002b32e 	.word	0x0002b32e
   1f144:	0002b387 	.word	0x0002b387
   1f148:	0002a669 	.word	0x0002a669
   1f14c:	0002b39c 	.word	0x0002b39c
   1f150:	0002b35b 	.word	0x0002b35b
   1f154:	0002b372 	.word	0x0002b372
   1f158:	20021424 	.word	0x20021424

0001f15c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1f15c:	b538      	push	{r3, r4, r5, lr}
   1f15e:	4604      	mov	r4, r0
	__asm__ volatile(
   1f160:	f04f 0320 	mov.w	r3, #32
   1f164:	f3ef 8511 	mrs	r5, BASEPRI
   1f168:	f383 8812 	msr	BASEPRI_MAX, r3
   1f16c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f170:	4817      	ldr	r0, [pc, #92]	; (1f1d0 <z_impl_k_sem_give+0x74>)
   1f172:	f7ff fd3b 	bl	1ebec <z_spin_lock_valid>
   1f176:	b968      	cbnz	r0, 1f194 <z_impl_k_sem_give+0x38>
   1f178:	2394      	movs	r3, #148	; 0x94
   1f17a:	4a16      	ldr	r2, [pc, #88]	; (1f1d4 <z_impl_k_sem_give+0x78>)
   1f17c:	4916      	ldr	r1, [pc, #88]	; (1f1d8 <z_impl_k_sem_give+0x7c>)
   1f17e:	4817      	ldr	r0, [pc, #92]	; (1f1dc <z_impl_k_sem_give+0x80>)
   1f180:	f004 ff4f 	bl	24022 <assert_print>
   1f184:	4912      	ldr	r1, [pc, #72]	; (1f1d0 <z_impl_k_sem_give+0x74>)
   1f186:	4816      	ldr	r0, [pc, #88]	; (1f1e0 <z_impl_k_sem_give+0x84>)
   1f188:	f004 ff4b 	bl	24022 <assert_print>
   1f18c:	2194      	movs	r1, #148	; 0x94
   1f18e:	4811      	ldr	r0, [pc, #68]	; (1f1d4 <z_impl_k_sem_give+0x78>)
   1f190:	f004 ff40 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f194:	480e      	ldr	r0, [pc, #56]	; (1f1d0 <z_impl_k_sem_give+0x74>)
   1f196:	f7ff fd45 	bl	1ec24 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1f19a:	4620      	mov	r0, r4
   1f19c:	f001 fd3c 	bl	20c18 <z_unpend_first_thread>

	if (thread != NULL) {
   1f1a0:	b148      	cbz	r0, 1f1b6 <z_impl_k_sem_give+0x5a>
   1f1a2:	2200      	movs	r2, #0
   1f1a4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1f1a6:	f000 ff5f 	bl	20068 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1f1aa:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1f1ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1f1b0:	4807      	ldr	r0, [pc, #28]	; (1f1d0 <z_impl_k_sem_give+0x74>)
   1f1b2:	f000 bfe5 	b.w	20180 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1f1b6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1f1ba:	429a      	cmp	r2, r3
   1f1bc:	bf18      	it	ne
   1f1be:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1f1c0:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1f1c2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1f1c4:	f104 0010 	add.w	r0, r4, #16
   1f1c8:	f009 facc 	bl	28764 <z_handle_obj_poll_events>
}
   1f1cc:	e7ed      	b.n	1f1aa <z_impl_k_sem_give+0x4e>
   1f1ce:	bf00      	nop
   1f1d0:	20021450 	.word	0x20021450
   1f1d4:	0002b32e 	.word	0x0002b32e
   1f1d8:	0002b387 	.word	0x0002b387
   1f1dc:	0002a669 	.word	0x0002a669
   1f1e0:	0002b39c 	.word	0x0002b39c

0001f1e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1f1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f1e6:	4604      	mov	r4, r0
   1f1e8:	4616      	mov	r6, r2
   1f1ea:	461d      	mov	r5, r3
   1f1ec:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1f1f0:	b17b      	cbz	r3, 1f212 <z_impl_k_sem_take+0x2e>
   1f1f2:	ea52 0305 	orrs.w	r3, r2, r5
   1f1f6:	d00c      	beq.n	1f212 <z_impl_k_sem_take+0x2e>
   1f1f8:	492d      	ldr	r1, [pc, #180]	; (1f2b0 <z_impl_k_sem_take+0xcc>)
   1f1fa:	2379      	movs	r3, #121	; 0x79
   1f1fc:	4a2d      	ldr	r2, [pc, #180]	; (1f2b4 <z_impl_k_sem_take+0xd0>)
   1f1fe:	482e      	ldr	r0, [pc, #184]	; (1f2b8 <z_impl_k_sem_take+0xd4>)
   1f200:	f004 ff0f 	bl	24022 <assert_print>
   1f204:	482d      	ldr	r0, [pc, #180]	; (1f2bc <z_impl_k_sem_take+0xd8>)
   1f206:	f004 ff0c 	bl	24022 <assert_print>
   1f20a:	2179      	movs	r1, #121	; 0x79
   1f20c:	4829      	ldr	r0, [pc, #164]	; (1f2b4 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f20e:	f004 ff01 	bl	24014 <assert_post_action>
   1f212:	f04f 0320 	mov.w	r3, #32
   1f216:	f3ef 8711 	mrs	r7, BASEPRI
   1f21a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f21e:	f3bf 8f6f 	isb	sy
   1f222:	4827      	ldr	r0, [pc, #156]	; (1f2c0 <z_impl_k_sem_take+0xdc>)
   1f224:	f7ff fce2 	bl	1ebec <z_spin_lock_valid>
   1f228:	b960      	cbnz	r0, 1f244 <z_impl_k_sem_take+0x60>
   1f22a:	2394      	movs	r3, #148	; 0x94
   1f22c:	4a25      	ldr	r2, [pc, #148]	; (1f2c4 <z_impl_k_sem_take+0xe0>)
   1f22e:	4926      	ldr	r1, [pc, #152]	; (1f2c8 <z_impl_k_sem_take+0xe4>)
   1f230:	4821      	ldr	r0, [pc, #132]	; (1f2b8 <z_impl_k_sem_take+0xd4>)
   1f232:	f004 fef6 	bl	24022 <assert_print>
   1f236:	4922      	ldr	r1, [pc, #136]	; (1f2c0 <z_impl_k_sem_take+0xdc>)
   1f238:	4824      	ldr	r0, [pc, #144]	; (1f2cc <z_impl_k_sem_take+0xe8>)
   1f23a:	f004 fef2 	bl	24022 <assert_print>
   1f23e:	2194      	movs	r1, #148	; 0x94
   1f240:	4820      	ldr	r0, [pc, #128]	; (1f2c4 <z_impl_k_sem_take+0xe0>)
   1f242:	e7e4      	b.n	1f20e <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   1f244:	481e      	ldr	r0, [pc, #120]	; (1f2c0 <z_impl_k_sem_take+0xdc>)
   1f246:	f7ff fced 	bl	1ec24 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1f24a:	68a3      	ldr	r3, [r4, #8]
   1f24c:	b1c3      	cbz	r3, 1f280 <z_impl_k_sem_take+0x9c>
		sem->count--;
   1f24e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f250:	481b      	ldr	r0, [pc, #108]	; (1f2c0 <z_impl_k_sem_take+0xdc>)
   1f252:	60a3      	str	r3, [r4, #8]
   1f254:	f7ff fcd8 	bl	1ec08 <z_spin_unlock_valid>
   1f258:	b958      	cbnz	r0, 1f272 <z_impl_k_sem_take+0x8e>
   1f25a:	23c2      	movs	r3, #194	; 0xc2
   1f25c:	4a19      	ldr	r2, [pc, #100]	; (1f2c4 <z_impl_k_sem_take+0xe0>)
   1f25e:	491c      	ldr	r1, [pc, #112]	; (1f2d0 <z_impl_k_sem_take+0xec>)
   1f260:	4815      	ldr	r0, [pc, #84]	; (1f2b8 <z_impl_k_sem_take+0xd4>)
   1f262:	f004 fede 	bl	24022 <assert_print>
   1f266:	4916      	ldr	r1, [pc, #88]	; (1f2c0 <z_impl_k_sem_take+0xdc>)
   1f268:	481a      	ldr	r0, [pc, #104]	; (1f2d4 <z_impl_k_sem_take+0xf0>)
   1f26a:	f004 feda 	bl	24022 <assert_print>
   1f26e:	21c2      	movs	r1, #194	; 0xc2
   1f270:	e7e6      	b.n	1f240 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   1f272:	f387 8811 	msr	BASEPRI, r7
   1f276:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1f27a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1f27c:	b003      	add	sp, #12
   1f27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f280:	ea56 0305 	orrs.w	r3, r6, r5
   1f284:	d10b      	bne.n	1f29e <z_impl_k_sem_take+0xba>
   1f286:	480e      	ldr	r0, [pc, #56]	; (1f2c0 <z_impl_k_sem_take+0xdc>)
   1f288:	f7ff fcbe 	bl	1ec08 <z_spin_unlock_valid>
   1f28c:	2800      	cmp	r0, #0
   1f28e:	d0e4      	beq.n	1f25a <z_impl_k_sem_take+0x76>
   1f290:	f387 8811 	msr	BASEPRI, r7
   1f294:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1f298:	f06f 000f 	mvn.w	r0, #15
   1f29c:	e7ee      	b.n	1f27c <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1f29e:	4622      	mov	r2, r4
   1f2a0:	4639      	mov	r1, r7
   1f2a2:	e9cd 6500 	strd	r6, r5, [sp]
   1f2a6:	4806      	ldr	r0, [pc, #24]	; (1f2c0 <z_impl_k_sem_take+0xdc>)
   1f2a8:	f001 fa38 	bl	2071c <z_pend_curr>
	return ret;
   1f2ac:	e7e6      	b.n	1f27c <z_impl_k_sem_take+0x98>
   1f2ae:	bf00      	nop
   1f2b0:	0002f576 	.word	0x0002f576
   1f2b4:	0002f556 	.word	0x0002f556
   1f2b8:	0002a669 	.word	0x0002a669
   1f2bc:	0002df2c 	.word	0x0002df2c
   1f2c0:	20021450 	.word	0x20021450
   1f2c4:	0002b32e 	.word	0x0002b32e
   1f2c8:	0002b387 	.word	0x0002b387
   1f2cc:	0002b39c 	.word	0x0002b39c
   1f2d0:	0002b35b 	.word	0x0002b35b
   1f2d4:	0002b372 	.word	0x0002b372

0001f2d8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1f2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1f2da:	2400      	movs	r4, #0
   1f2dc:	4b08      	ldr	r3, [pc, #32]	; (1f300 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1f2de:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   1f2e2:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   1f2e4:	ab02      	add	r3, sp, #8
   1f2e6:	9300      	str	r3, [sp, #0]
   1f2e8:	4906      	ldr	r1, [pc, #24]	; (1f304 <k_sys_work_q_init+0x2c>)
   1f2ea:	f04f 33ff 	mov.w	r3, #4294967295
   1f2ee:	4806      	ldr	r0, [pc, #24]	; (1f308 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1f2f0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1f2f4:	f000 fac0 	bl	1f878 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1f2f8:	4620      	mov	r0, r4
   1f2fa:	b004      	add	sp, #16
   1f2fc:	bd10      	pop	{r4, pc}
   1f2fe:	bf00      	nop
   1f300:	0002f5c4 	.word	0x0002f5c4
   1f304:	20033018 	.word	0x20033018
   1f308:	20009c78 	.word	0x20009c78

0001f30c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f310:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f312:	4e6e      	ldr	r6, [pc, #440]	; (1f4cc <work_queue_main+0x1c0>)
	return list->head;
   1f314:	4f6e      	ldr	r7, [pc, #440]	; (1f4d0 <work_queue_main+0x1c4>)
   1f316:	b085      	sub	sp, #20
	__asm__ volatile(
   1f318:	f04f 0320 	mov.w	r3, #32
   1f31c:	f3ef 8811 	mrs	r8, BASEPRI
   1f320:	f383 8812 	msr	BASEPRI_MAX, r3
   1f324:	f3bf 8f6f 	isb	sy
   1f328:	4630      	mov	r0, r6
   1f32a:	f7ff fc5f 	bl	1ebec <z_spin_lock_valid>
   1f32e:	b968      	cbnz	r0, 1f34c <work_queue_main+0x40>
   1f330:	2394      	movs	r3, #148	; 0x94
   1f332:	4a68      	ldr	r2, [pc, #416]	; (1f4d4 <work_queue_main+0x1c8>)
   1f334:	4968      	ldr	r1, [pc, #416]	; (1f4d8 <work_queue_main+0x1cc>)
   1f336:	4869      	ldr	r0, [pc, #420]	; (1f4dc <work_queue_main+0x1d0>)
   1f338:	f004 fe73 	bl	24022 <assert_print>
   1f33c:	4963      	ldr	r1, [pc, #396]	; (1f4cc <work_queue_main+0x1c0>)
   1f33e:	4868      	ldr	r0, [pc, #416]	; (1f4e0 <work_queue_main+0x1d4>)
   1f340:	f004 fe6f 	bl	24022 <assert_print>
   1f344:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f346:	4863      	ldr	r0, [pc, #396]	; (1f4d4 <work_queue_main+0x1c8>)
   1f348:	f004 fe64 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f34c:	4630      	mov	r0, r6
   1f34e:	f7ff fc69 	bl	1ec24 <z_spin_lock_set_owner>
   1f352:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   1f356:	b9ad      	cbnz	r5, 1f384 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1f358:	2102      	movs	r1, #2
   1f35a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1f35e:	f009 f88c 	bl	2847a <flag_test_and_clear>
   1f362:	2800      	cmp	r0, #0
   1f364:	d135      	bne.n	1f3d2 <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1f366:	2300      	movs	r3, #0
   1f368:	f04f 32ff 	mov.w	r2, #4294967295
   1f36c:	9302      	str	r3, [sp, #8]
   1f36e:	f04f 33ff 	mov.w	r3, #4294967295
   1f372:	4641      	mov	r1, r8
   1f374:	e9cd 2300 	strd	r2, r3, [sp]
   1f378:	4630      	mov	r0, r6
   1f37a:	f104 0290 	add.w	r2, r4, #144	; 0x90
   1f37e:	f001 ff41 	bl	21204 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   1f382:	e7c9      	b.n	1f318 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f384:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   1f388:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f38a:	4295      	cmp	r5, r2
	list->tail = node;
   1f38c:	bf08      	it	eq
   1f38e:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   1f392:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   1f396:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f39a:	4630      	mov	r0, r6
   1f39c:	f043 0302 	orr.w	r3, r3, #2
   1f3a0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   1f3a4:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   1f3a6:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   1f3aa:	f023 0304 	bic.w	r3, r3, #4
   1f3ae:	f043 0301 	orr.w	r3, r3, #1
   1f3b2:	60eb      	str	r3, [r5, #12]
   1f3b4:	f7ff fc28 	bl	1ec08 <z_spin_unlock_valid>
   1f3b8:	b9a8      	cbnz	r0, 1f3e6 <work_queue_main+0xda>
   1f3ba:	23c2      	movs	r3, #194	; 0xc2
   1f3bc:	4a45      	ldr	r2, [pc, #276]	; (1f4d4 <work_queue_main+0x1c8>)
   1f3be:	4949      	ldr	r1, [pc, #292]	; (1f4e4 <work_queue_main+0x1d8>)
   1f3c0:	4846      	ldr	r0, [pc, #280]	; (1f4dc <work_queue_main+0x1d0>)
   1f3c2:	f004 fe2e 	bl	24022 <assert_print>
   1f3c6:	4941      	ldr	r1, [pc, #260]	; (1f4cc <work_queue_main+0x1c0>)
   1f3c8:	4847      	ldr	r0, [pc, #284]	; (1f4e8 <work_queue_main+0x1dc>)
   1f3ca:	f004 fe2a 	bl	24022 <assert_print>
   1f3ce:	21c2      	movs	r1, #194	; 0xc2
   1f3d0:	e7b9      	b.n	1f346 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1f3d2:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1f3d6:	2200      	movs	r2, #0
   1f3d8:	2101      	movs	r1, #1
   1f3da:	4628      	mov	r0, r5
   1f3dc:	f001 feb4 	bl	21148 <z_sched_wake>
   1f3e0:	2800      	cmp	r0, #0
   1f3e2:	d1f8      	bne.n	1f3d6 <work_queue_main+0xca>
   1f3e4:	e7bf      	b.n	1f366 <work_queue_main+0x5a>
	__asm__ volatile(
   1f3e6:	f388 8811 	msr	BASEPRI, r8
   1f3ea:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   1f3ee:	f1b9 0f00 	cmp.w	r9, #0
   1f3f2:	d10a      	bne.n	1f40a <work_queue_main+0xfe>
   1f3f4:	493d      	ldr	r1, [pc, #244]	; (1f4ec <work_queue_main+0x1e0>)
   1f3f6:	4839      	ldr	r0, [pc, #228]	; (1f4dc <work_queue_main+0x1d0>)
   1f3f8:	f240 239b 	movw	r3, #667	; 0x29b
   1f3fc:	4a3c      	ldr	r2, [pc, #240]	; (1f4f0 <work_queue_main+0x1e4>)
   1f3fe:	f004 fe10 	bl	24022 <assert_print>
   1f402:	f240 219b 	movw	r1, #667	; 0x29b
   1f406:	483a      	ldr	r0, [pc, #232]	; (1f4f0 <work_queue_main+0x1e4>)
   1f408:	e79e      	b.n	1f348 <work_queue_main+0x3c>
		handler(work);
   1f40a:	4628      	mov	r0, r5
   1f40c:	47c8      	blx	r9
	__asm__ volatile(
   1f40e:	f04f 0320 	mov.w	r3, #32
   1f412:	f3ef 8a11 	mrs	sl, BASEPRI
   1f416:	f383 8812 	msr	BASEPRI_MAX, r3
   1f41a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f41e:	4630      	mov	r0, r6
   1f420:	f7ff fbe4 	bl	1ebec <z_spin_lock_valid>
   1f424:	2800      	cmp	r0, #0
   1f426:	d083      	beq.n	1f330 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   1f428:	4630      	mov	r0, r6
   1f42a:	f7ff fbfb 	bl	1ec24 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   1f42e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f430:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1f432:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f436:	d417      	bmi.n	1f468 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   1f438:	60ea      	str	r2, [r5, #12]
   1f43a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f43e:	4630      	mov	r0, r6
   1f440:	f023 0302 	bic.w	r3, r3, #2
   1f444:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   1f448:	f3c3 2500 	ubfx	r5, r3, #8, #1
   1f44c:	f7ff fbdc 	bl	1ec08 <z_spin_unlock_valid>
   1f450:	2800      	cmp	r0, #0
   1f452:	d0b2      	beq.n	1f3ba <work_queue_main+0xae>
	__asm__ volatile(
   1f454:	f38a 8811 	msr	BASEPRI, sl
   1f458:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1f45c:	2d00      	cmp	r5, #0
   1f45e:	f47f af5b 	bne.w	1f318 <work_queue_main+0xc>
	z_impl_k_yield();
   1f462:	f001 fc35 	bl	20cd0 <z_impl_k_yield>
}
   1f466:	e757      	b.n	1f318 <work_queue_main+0xc>
	return list->head;
   1f468:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   1f46a:	f023 0303 	bic.w	r3, r3, #3
   1f46e:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1f470:	2800      	cmp	r0, #0
   1f472:	d0e2      	beq.n	1f43a <work_queue_main+0x12e>
	return node->next;
   1f474:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   1f478:	46c3      	mov	fp, r8
	return node->next;
   1f47a:	f8d0 9000 	ldr.w	r9, [r0]
   1f47e:	2800      	cmp	r0, #0
   1f480:	d0db      	beq.n	1f43a <work_queue_main+0x12e>
		if (wc->work == work) {
   1f482:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1f484:	4602      	mov	r2, r0
		if (wc->work == work) {
   1f486:	429d      	cmp	r5, r3
   1f488:	d10d      	bne.n	1f4a6 <work_queue_main+0x19a>
   1f48a:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f48c:	f1b8 0f00 	cmp.w	r8, #0
   1f490:	d112      	bne.n	1f4b8 <work_queue_main+0x1ac>
   1f492:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   1f494:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f496:	4283      	cmp	r3, r0
   1f498:	d100      	bne.n	1f49c <work_queue_main+0x190>
	list->tail = node;
   1f49a:	607a      	str	r2, [r7, #4]
	parent->next = child;
   1f49c:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   1f4a0:	f7ff fe5c 	bl	1f15c <z_impl_k_sem_give>
}
   1f4a4:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1f4a6:	f1b9 0f00 	cmp.w	r9, #0
   1f4aa:	d00d      	beq.n	1f4c8 <work_queue_main+0x1bc>
	return node->next;
   1f4ac:	f8d9 3000 	ldr.w	r3, [r9]
   1f4b0:	4648      	mov	r0, r9
   1f4b2:	4690      	mov	r8, r2
   1f4b4:	4699      	mov	r9, r3
   1f4b6:	e7e2      	b.n	1f47e <work_queue_main+0x172>
	parent->next = child;
   1f4b8:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   1f4bc:	687b      	ldr	r3, [r7, #4]
   1f4be:	4283      	cmp	r3, r0
	list->tail = node;
   1f4c0:	bf08      	it	eq
   1f4c2:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   1f4c6:	e7e9      	b.n	1f49c <work_queue_main+0x190>
   1f4c8:	464b      	mov	r3, r9
   1f4ca:	e7f1      	b.n	1f4b0 <work_queue_main+0x1a4>
   1f4cc:	2002145c 	.word	0x2002145c
   1f4d0:	20021454 	.word	0x20021454
   1f4d4:	0002b32e 	.word	0x0002b32e
   1f4d8:	0002b387 	.word	0x0002b387
   1f4dc:	0002a669 	.word	0x0002a669
   1f4e0:	0002b39c 	.word	0x0002b39c
   1f4e4:	0002b35b 	.word	0x0002b35b
   1f4e8:	0002b372 	.word	0x0002b372
   1f4ec:	0002f5ee 	.word	0x0002f5ee
   1f4f0:	0002f5cd 	.word	0x0002f5cd

0001f4f4 <cancel_sync_locked>:
{
   1f4f4:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1f4f6:	68c3      	ldr	r3, [r0, #12]
{
   1f4f8:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   1f4fa:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1f4fe:	079b      	lsls	r3, r3, #30
{
   1f500:	460c      	mov	r4, r1
	if (ret) {
   1f502:	d50d      	bpl.n	1f520 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f504:	2201      	movs	r2, #1
   1f506:	2100      	movs	r1, #0
   1f508:	f104 0008 	add.w	r0, r4, #8
   1f50c:	f008 ffa5 	bl	2845a <z_impl_k_sem_init>
	parent->next = child;
   1f510:	2300      	movs	r3, #0
   1f512:	6023      	str	r3, [r4, #0]
	return list->tail;
   1f514:	4b05      	ldr	r3, [pc, #20]	; (1f52c <cancel_sync_locked+0x38>)
	canceler->work = work;
   1f516:	6065      	str	r5, [r4, #4]
   1f518:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1f51a:	b91a      	cbnz	r2, 1f524 <cancel_sync_locked+0x30>
	list->head = node;
   1f51c:	e9c3 4400 	strd	r4, r4, [r3]
}
   1f520:	4630      	mov	r0, r6
   1f522:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1f524:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1f526:	605c      	str	r4, [r3, #4]
}
   1f528:	e7fa      	b.n	1f520 <cancel_sync_locked+0x2c>
   1f52a:	bf00      	nop
   1f52c:	20021454 	.word	0x20021454

0001f530 <submit_to_queue_locked>:
{
   1f530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1f532:	68c3      	ldr	r3, [r0, #12]
{
   1f534:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f536:	079a      	lsls	r2, r3, #30
{
   1f538:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f53a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1f53e:	d439      	bmi.n	1f5b4 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1f540:	075b      	lsls	r3, r3, #29
   1f542:	d425      	bmi.n	1f590 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   1f544:	680b      	ldr	r3, [r1, #0]
   1f546:	b90b      	cbnz	r3, 1f54c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1f548:	6883      	ldr	r3, [r0, #8]
   1f54a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1f54c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1f54e:	07dd      	lsls	r5, r3, #31
   1f550:	d521      	bpl.n	1f596 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   1f552:	68a3      	ldr	r3, [r4, #8]
   1f554:	b95b      	cbnz	r3, 1f56e <submit_to_queue_locked+0x3e>
   1f556:	4928      	ldr	r1, [pc, #160]	; (1f5f8 <submit_to_queue_locked+0xc8>)
   1f558:	4828      	ldr	r0, [pc, #160]	; (1f5fc <submit_to_queue_locked+0xcc>)
   1f55a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1f55e:	4a28      	ldr	r2, [pc, #160]	; (1f600 <submit_to_queue_locked+0xd0>)
   1f560:	f004 fd5f 	bl	24022 <assert_print>
   1f564:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1f568:	4825      	ldr	r0, [pc, #148]	; (1f600 <submit_to_queue_locked+0xd0>)
   1f56a:	f004 fd53 	bl	24014 <assert_post_action>
			ret = 2;
   1f56e:	2602      	movs	r6, #2
			*queuep = work->queue;
   1f570:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1f572:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   1f574:	2d00      	cmp	r5, #0
   1f576:	d03c      	beq.n	1f5f2 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1f578:	4b22      	ldr	r3, [pc, #136]	; (1f604 <submit_to_queue_locked+0xd4>)
   1f57a:	689b      	ldr	r3, [r3, #8]
   1f57c:	42ab      	cmp	r3, r5
   1f57e:	d00c      	beq.n	1f59a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1f580:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1f584:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1f586:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1f58a:	d416      	bmi.n	1f5ba <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   1f58c:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1f590:	2300      	movs	r3, #0
   1f592:	603b      	str	r3, [r7, #0]
	return ret;
   1f594:	e027      	b.n	1f5e6 <submit_to_queue_locked+0xb6>
		ret = 1;
   1f596:	2601      	movs	r6, #1
   1f598:	e7eb      	b.n	1f572 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1f59a:	f008 ff0d 	bl	283b8 <k_is_in_isr>
   1f59e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   1f5a2:	2800      	cmp	r0, #0
   1f5a4:	d1ee      	bne.n	1f584 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1f5a6:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1f5a8:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1f5ac:	d5ee      	bpl.n	1f58c <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   1f5ae:	b152      	cbz	r2, 1f5c6 <submit_to_queue_locked+0x96>
   1f5b0:	075b      	lsls	r3, r3, #29
   1f5b2:	d408      	bmi.n	1f5c6 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   1f5b4:	f06f 060f 	mvn.w	r6, #15
   1f5b8:	e7ea      	b.n	1f590 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   1f5ba:	2a00      	cmp	r2, #0
   1f5bc:	d1fa      	bne.n	1f5b4 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   1f5be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1f5c2:	2b00      	cmp	r3, #0
   1f5c4:	d1f6      	bne.n	1f5b4 <submit_to_queue_locked+0x84>
	parent->next = child;
   1f5c6:	2300      	movs	r3, #0
   1f5c8:	6023      	str	r3, [r4, #0]
	return list->tail;
   1f5ca:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   1f5ce:	b963      	cbnz	r3, 1f5ea <submit_to_queue_locked+0xba>
	list->head = node;
   1f5d0:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   1f5d4:	4628      	mov	r0, r5
   1f5d6:	f008 ff69 	bl	284ac <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1f5da:	68e3      	ldr	r3, [r4, #12]
   1f5dc:	f043 0304 	orr.w	r3, r3, #4
   1f5e0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1f5e2:	683b      	ldr	r3, [r7, #0]
   1f5e4:	60a3      	str	r3, [r4, #8]
}
   1f5e6:	4630      	mov	r0, r6
   1f5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1f5ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f5ec:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   1f5f0:	e7f0      	b.n	1f5d4 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   1f5f2:	f06f 0615 	mvn.w	r6, #21
   1f5f6:	e7cb      	b.n	1f590 <submit_to_queue_locked+0x60>
   1f5f8:	0002f605 	.word	0x0002f605
   1f5fc:	0002a669 	.word	0x0002a669
   1f600:	0002f5cd 	.word	0x0002f5cd
   1f604:	20021424 	.word	0x20021424

0001f608 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   1f608:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f60a:	4604      	mov	r4, r0
	__asm__ volatile(
   1f60c:	f04f 0320 	mov.w	r3, #32
   1f610:	f3ef 8511 	mrs	r5, BASEPRI
   1f614:	f383 8812 	msr	BASEPRI_MAX, r3
   1f618:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f61c:	481c      	ldr	r0, [pc, #112]	; (1f690 <work_timeout+0x88>)
   1f61e:	f7ff fae5 	bl	1ebec <z_spin_lock_valid>
   1f622:	b968      	cbnz	r0, 1f640 <work_timeout+0x38>
   1f624:	2394      	movs	r3, #148	; 0x94
   1f626:	4a1b      	ldr	r2, [pc, #108]	; (1f694 <work_timeout+0x8c>)
   1f628:	491b      	ldr	r1, [pc, #108]	; (1f698 <work_timeout+0x90>)
   1f62a:	481c      	ldr	r0, [pc, #112]	; (1f69c <work_timeout+0x94>)
   1f62c:	f004 fcf9 	bl	24022 <assert_print>
   1f630:	4917      	ldr	r1, [pc, #92]	; (1f690 <work_timeout+0x88>)
   1f632:	481b      	ldr	r0, [pc, #108]	; (1f6a0 <work_timeout+0x98>)
   1f634:	f004 fcf5 	bl	24022 <assert_print>
   1f638:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f63a:	4816      	ldr	r0, [pc, #88]	; (1f694 <work_timeout+0x8c>)
   1f63c:	f004 fcea 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f640:	4813      	ldr	r0, [pc, #76]	; (1f690 <work_timeout+0x88>)
   1f642:	f7ff faef 	bl	1ec24 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   1f646:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1f648:	2103      	movs	r1, #3
   1f64a:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   1f64c:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1f64e:	f1a4 0610 	sub.w	r6, r4, #16
   1f652:	f008 ff12 	bl	2847a <flag_test_and_clear>
   1f656:	b128      	cbz	r0, 1f664 <work_timeout+0x5c>
		queue = dw->queue;
   1f658:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   1f65a:	4630      	mov	r0, r6
   1f65c:	a901      	add	r1, sp, #4
		queue = dw->queue;
   1f65e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1f660:	f7ff ff66 	bl	1f530 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f664:	480a      	ldr	r0, [pc, #40]	; (1f690 <work_timeout+0x88>)
   1f666:	f7ff facf 	bl	1ec08 <z_spin_unlock_valid>
   1f66a:	b958      	cbnz	r0, 1f684 <work_timeout+0x7c>
   1f66c:	23c2      	movs	r3, #194	; 0xc2
   1f66e:	4a09      	ldr	r2, [pc, #36]	; (1f694 <work_timeout+0x8c>)
   1f670:	490c      	ldr	r1, [pc, #48]	; (1f6a4 <work_timeout+0x9c>)
   1f672:	480a      	ldr	r0, [pc, #40]	; (1f69c <work_timeout+0x94>)
   1f674:	f004 fcd5 	bl	24022 <assert_print>
   1f678:	4905      	ldr	r1, [pc, #20]	; (1f690 <work_timeout+0x88>)
   1f67a:	480b      	ldr	r0, [pc, #44]	; (1f6a8 <work_timeout+0xa0>)
   1f67c:	f004 fcd1 	bl	24022 <assert_print>
   1f680:	21c2      	movs	r1, #194	; 0xc2
   1f682:	e7da      	b.n	1f63a <work_timeout+0x32>
	__asm__ volatile(
   1f684:	f385 8811 	msr	BASEPRI, r5
   1f688:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   1f68c:	b002      	add	sp, #8
   1f68e:	bd70      	pop	{r4, r5, r6, pc}
   1f690:	2002145c 	.word	0x2002145c
   1f694:	0002b32e 	.word	0x0002b32e
   1f698:	0002b387 	.word	0x0002b387
   1f69c:	0002a669 	.word	0x0002a669
   1f6a0:	0002b39c 	.word	0x0002b39c
   1f6a4:	0002b35b 	.word	0x0002b35b
   1f6a8:	0002b372 	.word	0x0002b372

0001f6ac <k_work_init>:
{
   1f6ac:	b538      	push	{r3, r4, r5, lr}
   1f6ae:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   1f6b0:	4604      	mov	r4, r0
   1f6b2:	b948      	cbnz	r0, 1f6c8 <k_work_init+0x1c>
   1f6b4:	490c      	ldr	r1, [pc, #48]	; (1f6e8 <k_work_init+0x3c>)
   1f6b6:	2389      	movs	r3, #137	; 0x89
   1f6b8:	4a0c      	ldr	r2, [pc, #48]	; (1f6ec <k_work_init+0x40>)
   1f6ba:	480d      	ldr	r0, [pc, #52]	; (1f6f0 <k_work_init+0x44>)
   1f6bc:	f004 fcb1 	bl	24022 <assert_print>
   1f6c0:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   1f6c2:	480a      	ldr	r0, [pc, #40]	; (1f6ec <k_work_init+0x40>)
   1f6c4:	f004 fca6 	bl	24014 <assert_post_action>
   1f6c8:	b939      	cbnz	r1, 1f6da <k_work_init+0x2e>
   1f6ca:	490a      	ldr	r1, [pc, #40]	; (1f6f4 <k_work_init+0x48>)
   1f6cc:	238a      	movs	r3, #138	; 0x8a
   1f6ce:	4a07      	ldr	r2, [pc, #28]	; (1f6ec <k_work_init+0x40>)
   1f6d0:	4807      	ldr	r0, [pc, #28]	; (1f6f0 <k_work_init+0x44>)
   1f6d2:	f004 fca6 	bl	24022 <assert_print>
   1f6d6:	218a      	movs	r1, #138	; 0x8a
   1f6d8:	e7f3      	b.n	1f6c2 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1f6da:	2210      	movs	r2, #16
   1f6dc:	2100      	movs	r1, #0
   1f6de:	f009 f897 	bl	28810 <memset>
   1f6e2:	6065      	str	r5, [r4, #4]
}
   1f6e4:	bd38      	pop	{r3, r4, r5, pc}
   1f6e6:	bf00      	nop
   1f6e8:	0002f6a4 	.word	0x0002f6a4
   1f6ec:	0002f5cd 	.word	0x0002f5cd
   1f6f0:	0002a669 	.word	0x0002a669
   1f6f4:	0002f5ee 	.word	0x0002f5ee

0001f6f8 <k_work_busy_get>:
{
   1f6f8:	b538      	push	{r3, r4, r5, lr}
   1f6fa:	4604      	mov	r4, r0
	__asm__ volatile(
   1f6fc:	f04f 0320 	mov.w	r3, #32
   1f700:	f3ef 8511 	mrs	r5, BASEPRI
   1f704:	f383 8812 	msr	BASEPRI_MAX, r3
   1f708:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f70c:	4816      	ldr	r0, [pc, #88]	; (1f768 <k_work_busy_get+0x70>)
   1f70e:	f7ff fa6d 	bl	1ebec <z_spin_lock_valid>
   1f712:	b968      	cbnz	r0, 1f730 <k_work_busy_get+0x38>
   1f714:	2394      	movs	r3, #148	; 0x94
   1f716:	4a15      	ldr	r2, [pc, #84]	; (1f76c <k_work_busy_get+0x74>)
   1f718:	4915      	ldr	r1, [pc, #84]	; (1f770 <k_work_busy_get+0x78>)
   1f71a:	4816      	ldr	r0, [pc, #88]	; (1f774 <k_work_busy_get+0x7c>)
   1f71c:	f004 fc81 	bl	24022 <assert_print>
   1f720:	4911      	ldr	r1, [pc, #68]	; (1f768 <k_work_busy_get+0x70>)
   1f722:	4815      	ldr	r0, [pc, #84]	; (1f778 <k_work_busy_get+0x80>)
   1f724:	f004 fc7d 	bl	24022 <assert_print>
   1f728:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f72a:	4810      	ldr	r0, [pc, #64]	; (1f76c <k_work_busy_get+0x74>)
   1f72c:	f004 fc72 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f730:	480d      	ldr	r0, [pc, #52]	; (1f768 <k_work_busy_get+0x70>)
   1f732:	f7ff fa77 	bl	1ec24 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   1f736:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f738:	480b      	ldr	r0, [pc, #44]	; (1f768 <k_work_busy_get+0x70>)
   1f73a:	f004 040f 	and.w	r4, r4, #15
   1f73e:	f7ff fa63 	bl	1ec08 <z_spin_unlock_valid>
   1f742:	b958      	cbnz	r0, 1f75c <k_work_busy_get+0x64>
   1f744:	23c2      	movs	r3, #194	; 0xc2
   1f746:	4a09      	ldr	r2, [pc, #36]	; (1f76c <k_work_busy_get+0x74>)
   1f748:	490c      	ldr	r1, [pc, #48]	; (1f77c <k_work_busy_get+0x84>)
   1f74a:	480a      	ldr	r0, [pc, #40]	; (1f774 <k_work_busy_get+0x7c>)
   1f74c:	f004 fc69 	bl	24022 <assert_print>
   1f750:	4905      	ldr	r1, [pc, #20]	; (1f768 <k_work_busy_get+0x70>)
   1f752:	480b      	ldr	r0, [pc, #44]	; (1f780 <k_work_busy_get+0x88>)
   1f754:	f004 fc65 	bl	24022 <assert_print>
   1f758:	21c2      	movs	r1, #194	; 0xc2
   1f75a:	e7e6      	b.n	1f72a <k_work_busy_get+0x32>
	__asm__ volatile(
   1f75c:	f385 8811 	msr	BASEPRI, r5
   1f760:	f3bf 8f6f 	isb	sy
}
   1f764:	4620      	mov	r0, r4
   1f766:	bd38      	pop	{r3, r4, r5, pc}
   1f768:	2002145c 	.word	0x2002145c
   1f76c:	0002b32e 	.word	0x0002b32e
   1f770:	0002b387 	.word	0x0002b387
   1f774:	0002a669 	.word	0x0002a669
   1f778:	0002b39c 	.word	0x0002b39c
   1f77c:	0002b35b 	.word	0x0002b35b
   1f780:	0002b372 	.word	0x0002b372

0001f784 <z_work_submit_to_queue>:
{
   1f784:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   1f786:	460c      	mov	r4, r1
{
   1f788:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   1f78a:	b959      	cbnz	r1, 1f7a4 <z_work_submit_to_queue+0x20>
   1f78c:	4921      	ldr	r1, [pc, #132]	; (1f814 <z_work_submit_to_queue+0x90>)
   1f78e:	4822      	ldr	r0, [pc, #136]	; (1f818 <z_work_submit_to_queue+0x94>)
   1f790:	f44f 73ba 	mov.w	r3, #372	; 0x174
   1f794:	4a21      	ldr	r2, [pc, #132]	; (1f81c <z_work_submit_to_queue+0x98>)
   1f796:	f004 fc44 	bl	24022 <assert_print>
   1f79a:	f44f 71ba 	mov.w	r1, #372	; 0x174
   1f79e:	481f      	ldr	r0, [pc, #124]	; (1f81c <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f7a0:	f004 fc38 	bl	24014 <assert_post_action>
	__asm__ volatile(
   1f7a4:	f04f 0320 	mov.w	r3, #32
   1f7a8:	f3ef 8511 	mrs	r5, BASEPRI
   1f7ac:	f383 8812 	msr	BASEPRI_MAX, r3
   1f7b0:	f3bf 8f6f 	isb	sy
   1f7b4:	481a      	ldr	r0, [pc, #104]	; (1f820 <z_work_submit_to_queue+0x9c>)
   1f7b6:	f7ff fa19 	bl	1ebec <z_spin_lock_valid>
   1f7ba:	b960      	cbnz	r0, 1f7d6 <z_work_submit_to_queue+0x52>
   1f7bc:	2394      	movs	r3, #148	; 0x94
   1f7be:	4a19      	ldr	r2, [pc, #100]	; (1f824 <z_work_submit_to_queue+0xa0>)
   1f7c0:	4919      	ldr	r1, [pc, #100]	; (1f828 <z_work_submit_to_queue+0xa4>)
   1f7c2:	4815      	ldr	r0, [pc, #84]	; (1f818 <z_work_submit_to_queue+0x94>)
   1f7c4:	f004 fc2d 	bl	24022 <assert_print>
   1f7c8:	4915      	ldr	r1, [pc, #84]	; (1f820 <z_work_submit_to_queue+0x9c>)
   1f7ca:	4818      	ldr	r0, [pc, #96]	; (1f82c <z_work_submit_to_queue+0xa8>)
   1f7cc:	f004 fc29 	bl	24022 <assert_print>
   1f7d0:	2194      	movs	r1, #148	; 0x94
   1f7d2:	4814      	ldr	r0, [pc, #80]	; (1f824 <z_work_submit_to_queue+0xa0>)
   1f7d4:	e7e4      	b.n	1f7a0 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   1f7d6:	4812      	ldr	r0, [pc, #72]	; (1f820 <z_work_submit_to_queue+0x9c>)
   1f7d8:	f7ff fa24 	bl	1ec24 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   1f7dc:	4620      	mov	r0, r4
   1f7de:	a901      	add	r1, sp, #4
   1f7e0:	f7ff fea6 	bl	1f530 <submit_to_queue_locked>
   1f7e4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f7e6:	480e      	ldr	r0, [pc, #56]	; (1f820 <z_work_submit_to_queue+0x9c>)
   1f7e8:	f7ff fa0e 	bl	1ec08 <z_spin_unlock_valid>
   1f7ec:	b958      	cbnz	r0, 1f806 <z_work_submit_to_queue+0x82>
   1f7ee:	23c2      	movs	r3, #194	; 0xc2
   1f7f0:	4a0c      	ldr	r2, [pc, #48]	; (1f824 <z_work_submit_to_queue+0xa0>)
   1f7f2:	490f      	ldr	r1, [pc, #60]	; (1f830 <z_work_submit_to_queue+0xac>)
   1f7f4:	4808      	ldr	r0, [pc, #32]	; (1f818 <z_work_submit_to_queue+0x94>)
   1f7f6:	f004 fc14 	bl	24022 <assert_print>
   1f7fa:	4909      	ldr	r1, [pc, #36]	; (1f820 <z_work_submit_to_queue+0x9c>)
   1f7fc:	480d      	ldr	r0, [pc, #52]	; (1f834 <z_work_submit_to_queue+0xb0>)
   1f7fe:	f004 fc10 	bl	24022 <assert_print>
   1f802:	21c2      	movs	r1, #194	; 0xc2
   1f804:	e7e5      	b.n	1f7d2 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   1f806:	f385 8811 	msr	BASEPRI, r5
   1f80a:	f3bf 8f6f 	isb	sy
}
   1f80e:	4620      	mov	r0, r4
   1f810:	b003      	add	sp, #12
   1f812:	bd30      	pop	{r4, r5, pc}
   1f814:	0002f6a4 	.word	0x0002f6a4
   1f818:	0002a669 	.word	0x0002a669
   1f81c:	0002f5cd 	.word	0x0002f5cd
   1f820:	2002145c 	.word	0x2002145c
   1f824:	0002b32e 	.word	0x0002b32e
   1f828:	0002b387 	.word	0x0002b387
   1f82c:	0002b39c 	.word	0x0002b39c
   1f830:	0002b35b 	.word	0x0002b35b
   1f834:	0002b372 	.word	0x0002b372

0001f838 <k_work_submit>:
{
   1f838:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1f83a:	4801      	ldr	r0, [pc, #4]	; (1f840 <k_work_submit+0x8>)
   1f83c:	f008 be70 	b.w	28520 <k_work_submit_to_queue>
   1f840:	20009c78 	.word	0x20009c78

0001f844 <k_work_queue_init>:
{
   1f844:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   1f846:	b958      	cbnz	r0, 1f860 <k_work_queue_init+0x1c>
   1f848:	4908      	ldr	r1, [pc, #32]	; (1f86c <k_work_queue_init+0x28>)
   1f84a:	4809      	ldr	r0, [pc, #36]	; (1f870 <k_work_queue_init+0x2c>)
   1f84c:	f240 23b9 	movw	r3, #697	; 0x2b9
   1f850:	4a08      	ldr	r2, [pc, #32]	; (1f874 <k_work_queue_init+0x30>)
   1f852:	f004 fbe6 	bl	24022 <assert_print>
   1f856:	f240 21b9 	movw	r1, #697	; 0x2b9
   1f85a:	4806      	ldr	r0, [pc, #24]	; (1f874 <k_work_queue_init+0x30>)
   1f85c:	f004 fbda 	bl	24014 <assert_post_action>
	*queue = (struct k_work_q) {
   1f860:	22a8      	movs	r2, #168	; 0xa8
   1f862:	2100      	movs	r1, #0
   1f864:	f008 ffd4 	bl	28810 <memset>
}
   1f868:	bd08      	pop	{r3, pc}
   1f86a:	bf00      	nop
   1f86c:	0002f60b 	.word	0x0002f60b
   1f870:	0002a669 	.word	0x0002a669
   1f874:	0002f5cd 	.word	0x0002f5cd

0001f878 <k_work_queue_start>:
{
   1f878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f87a:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   1f87c:	4604      	mov	r4, r0
{
   1f87e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   1f880:	b958      	cbnz	r0, 1f89a <k_work_queue_start+0x22>
   1f882:	492b      	ldr	r1, [pc, #172]	; (1f930 <k_work_queue_start+0xb8>)
   1f884:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   1f888:	4a2a      	ldr	r2, [pc, #168]	; (1f934 <k_work_queue_start+0xbc>)
   1f88a:	482b      	ldr	r0, [pc, #172]	; (1f938 <k_work_queue_start+0xc0>)
   1f88c:	f004 fbc9 	bl	24022 <assert_print>
   1f890:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   1f894:	4827      	ldr	r0, [pc, #156]	; (1f934 <k_work_queue_start+0xbc>)
   1f896:	f004 fbbd 	bl	24014 <assert_post_action>
   1f89a:	b949      	cbnz	r1, 1f8b0 <k_work_queue_start+0x38>
   1f89c:	4927      	ldr	r1, [pc, #156]	; (1f93c <k_work_queue_start+0xc4>)
   1f89e:	f240 23c9 	movw	r3, #713	; 0x2c9
   1f8a2:	4a24      	ldr	r2, [pc, #144]	; (1f934 <k_work_queue_start+0xbc>)
   1f8a4:	4824      	ldr	r0, [pc, #144]	; (1f938 <k_work_queue_start+0xc0>)
   1f8a6:	f004 fbbc 	bl	24022 <assert_print>
   1f8aa:	f240 21c9 	movw	r1, #713	; 0x2c9
   1f8ae:	e7f1      	b.n	1f894 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   1f8b0:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   1f8b4:	f010 0001 	ands.w	r0, r0, #1
   1f8b8:	d009      	beq.n	1f8ce <k_work_queue_start+0x56>
   1f8ba:	4921      	ldr	r1, [pc, #132]	; (1f940 <k_work_queue_start+0xc8>)
   1f8bc:	f240 23ca 	movw	r3, #714	; 0x2ca
   1f8c0:	4a1c      	ldr	r2, [pc, #112]	; (1f934 <k_work_queue_start+0xbc>)
   1f8c2:	481d      	ldr	r0, [pc, #116]	; (1f938 <k_work_queue_start+0xc0>)
   1f8c4:	f004 fbad 	bl	24022 <assert_print>
   1f8c8:	f240 21ca 	movw	r1, #714	; 0x2ca
   1f8cc:	e7e2      	b.n	1f894 <k_work_queue_start+0x1c>
	list->tail = NULL;
   1f8ce:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1f8d2:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   1f8d6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   1f8da:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1f8de:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   1f8e2:	b31d      	cbz	r5, 1f92c <k_work_queue_start+0xb4>
   1f8e4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1f8e6:	2800      	cmp	r0, #0
   1f8e8:	f240 1001 	movw	r0, #257	; 0x101
   1f8ec:	bf08      	it	eq
   1f8ee:	2001      	moveq	r0, #1
	*flagp = flags;
   1f8f0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f8f4:	2000      	movs	r0, #0
   1f8f6:	f04f 36ff 	mov.w	r6, #4294967295
   1f8fa:	f04f 37ff 	mov.w	r7, #4294967295
   1f8fe:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1f902:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1f906:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1f90a:	4620      	mov	r0, r4
   1f90c:	4b0d      	ldr	r3, [pc, #52]	; (1f944 <k_work_queue_start+0xcc>)
   1f90e:	9400      	str	r4, [sp, #0]
   1f910:	f7ff f8a2 	bl	1ea58 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1f914:	b125      	cbz	r5, 1f920 <k_work_queue_start+0xa8>
   1f916:	6829      	ldr	r1, [r5, #0]
   1f918:	b111      	cbz	r1, 1f920 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   1f91a:	4620      	mov	r0, r4
   1f91c:	f008 fd52 	bl	283c4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1f920:	4620      	mov	r0, r4
}
   1f922:	b009      	add	sp, #36	; 0x24
   1f924:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1f928:	f008 bd51 	b.w	283ce <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1f92c:	2001      	movs	r0, #1
   1f92e:	e7df      	b.n	1f8f0 <k_work_queue_start+0x78>
   1f930:	0002f663 	.word	0x0002f663
   1f934:	0002f5cd 	.word	0x0002f5cd
   1f938:	0002a669 	.word	0x0002a669
   1f93c:	0002f669 	.word	0x0002f669
   1f940:	0002f66f 	.word	0x0002f66f
   1f944:	0001f30d 	.word	0x0001f30d

0001f948 <k_work_queue_drain>:
{
   1f948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1f94a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   1f94c:	4604      	mov	r4, r0
   1f94e:	b958      	cbnz	r0, 1f968 <k_work_queue_drain+0x20>
   1f950:	493a      	ldr	r1, [pc, #232]	; (1fa3c <k_work_queue_drain+0xf4>)
   1f952:	f240 23ed 	movw	r3, #749	; 0x2ed
   1f956:	4a3a      	ldr	r2, [pc, #232]	; (1fa40 <k_work_queue_drain+0xf8>)
   1f958:	483a      	ldr	r0, [pc, #232]	; (1fa44 <k_work_queue_drain+0xfc>)
   1f95a:	f004 fb62 	bl	24022 <assert_print>
   1f95e:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   1f962:	4837      	ldr	r0, [pc, #220]	; (1fa40 <k_work_queue_drain+0xf8>)
   1f964:	f004 fb56 	bl	24014 <assert_post_action>
   1f968:	f008 fd26 	bl	283b8 <k_is_in_isr>
   1f96c:	b148      	cbz	r0, 1f982 <k_work_queue_drain+0x3a>
   1f96e:	4936      	ldr	r1, [pc, #216]	; (1fa48 <k_work_queue_drain+0x100>)
   1f970:	f240 23ee 	movw	r3, #750	; 0x2ee
   1f974:	4a32      	ldr	r2, [pc, #200]	; (1fa40 <k_work_queue_drain+0xf8>)
   1f976:	4833      	ldr	r0, [pc, #204]	; (1fa44 <k_work_queue_drain+0xfc>)
   1f978:	f004 fb53 	bl	24022 <assert_print>
   1f97c:	f240 21ee 	movw	r1, #750	; 0x2ee
   1f980:	e7ef      	b.n	1f962 <k_work_queue_drain+0x1a>
	__asm__ volatile(
   1f982:	f04f 0320 	mov.w	r3, #32
   1f986:	f3ef 8611 	mrs	r6, BASEPRI
   1f98a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f98e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f992:	482e      	ldr	r0, [pc, #184]	; (1fa4c <k_work_queue_drain+0x104>)
   1f994:	f7ff f92a 	bl	1ebec <z_spin_lock_valid>
   1f998:	b960      	cbnz	r0, 1f9b4 <k_work_queue_drain+0x6c>
   1f99a:	2394      	movs	r3, #148	; 0x94
   1f99c:	4a2c      	ldr	r2, [pc, #176]	; (1fa50 <k_work_queue_drain+0x108>)
   1f99e:	492d      	ldr	r1, [pc, #180]	; (1fa54 <k_work_queue_drain+0x10c>)
   1f9a0:	4828      	ldr	r0, [pc, #160]	; (1fa44 <k_work_queue_drain+0xfc>)
   1f9a2:	f004 fb3e 	bl	24022 <assert_print>
   1f9a6:	4929      	ldr	r1, [pc, #164]	; (1fa4c <k_work_queue_drain+0x104>)
   1f9a8:	482b      	ldr	r0, [pc, #172]	; (1fa58 <k_work_queue_drain+0x110>)
   1f9aa:	f004 fb3a 	bl	24022 <assert_print>
   1f9ae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f9b0:	4827      	ldr	r0, [pc, #156]	; (1fa50 <k_work_queue_drain+0x108>)
   1f9b2:	e7d7      	b.n	1f964 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   1f9b4:	4825      	ldr	r0, [pc, #148]	; (1fa4c <k_work_queue_drain+0x104>)
   1f9b6:	f7ff f935 	bl	1ec24 <z_spin_lock_set_owner>
	return *flagp;
   1f9ba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   1f9be:	f013 0f06 	tst.w	r3, #6
   1f9c2:	d11d      	bne.n	1fa00 <k_work_queue_drain+0xb8>
	    || plug
   1f9c4:	b1b5      	cbz	r5, 1f9f4 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   1f9c6:	f043 030c 	orr.w	r3, r3, #12
   1f9ca:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   1f9ce:	4620      	mov	r0, r4
   1f9d0:	f008 fd6c 	bl	284ac <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   1f9d4:	2300      	movs	r3, #0
   1f9d6:	f04f 32ff 	mov.w	r2, #4294967295
   1f9da:	9302      	str	r3, [sp, #8]
   1f9dc:	f04f 33ff 	mov.w	r3, #4294967295
   1f9e0:	4631      	mov	r1, r6
   1f9e2:	e9cd 2300 	strd	r2, r3, [sp]
   1f9e6:	4819      	ldr	r0, [pc, #100]	; (1fa4c <k_work_queue_drain+0x104>)
   1f9e8:	f104 0298 	add.w	r2, r4, #152	; 0x98
   1f9ec:	f001 fc0a 	bl	21204 <z_sched_wait>
}
   1f9f0:	b004      	add	sp, #16
   1f9f2:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   1f9f4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   1f9f8:	b14d      	cbz	r5, 1fa0e <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   1f9fa:	f043 0304 	orr.w	r3, r3, #4
   1f9fe:	e7e4      	b.n	1f9ca <k_work_queue_drain+0x82>
   1fa00:	f043 0204 	orr.w	r2, r3, #4
   1fa04:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   1fa08:	2d00      	cmp	r5, #0
   1fa0a:	d0e0      	beq.n	1f9ce <k_work_queue_drain+0x86>
   1fa0c:	e7db      	b.n	1f9c6 <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fa0e:	480f      	ldr	r0, [pc, #60]	; (1fa4c <k_work_queue_drain+0x104>)
   1fa10:	f7ff f8fa 	bl	1ec08 <z_spin_unlock_valid>
   1fa14:	b958      	cbnz	r0, 1fa2e <k_work_queue_drain+0xe6>
   1fa16:	23c2      	movs	r3, #194	; 0xc2
   1fa18:	4a0d      	ldr	r2, [pc, #52]	; (1fa50 <k_work_queue_drain+0x108>)
   1fa1a:	4910      	ldr	r1, [pc, #64]	; (1fa5c <k_work_queue_drain+0x114>)
   1fa1c:	4809      	ldr	r0, [pc, #36]	; (1fa44 <k_work_queue_drain+0xfc>)
   1fa1e:	f004 fb00 	bl	24022 <assert_print>
   1fa22:	490a      	ldr	r1, [pc, #40]	; (1fa4c <k_work_queue_drain+0x104>)
   1fa24:	480e      	ldr	r0, [pc, #56]	; (1fa60 <k_work_queue_drain+0x118>)
   1fa26:	f004 fafc 	bl	24022 <assert_print>
   1fa2a:	21c2      	movs	r1, #194	; 0xc2
   1fa2c:	e7c0      	b.n	1f9b0 <k_work_queue_drain+0x68>
	__asm__ volatile(
   1fa2e:	f386 8811 	msr	BASEPRI, r6
   1fa32:	f3bf 8f6f 	isb	sy
	int ret = 0;
   1fa36:	4628      	mov	r0, r5
	return ret;
   1fa38:	e7da      	b.n	1f9f0 <k_work_queue_drain+0xa8>
   1fa3a:	bf00      	nop
   1fa3c:	0002f663 	.word	0x0002f663
   1fa40:	0002f5cd 	.word	0x0002f5cd
   1fa44:	0002a669 	.word	0x0002a669
   1fa48:	0002d1d8 	.word	0x0002d1d8
   1fa4c:	2002145c 	.word	0x2002145c
   1fa50:	0002b32e 	.word	0x0002b32e
   1fa54:	0002b387 	.word	0x0002b387
   1fa58:	0002b39c 	.word	0x0002b39c
   1fa5c:	0002b35b 	.word	0x0002b35b
   1fa60:	0002b372 	.word	0x0002b372

0001fa64 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   1fa64:	b538      	push	{r3, r4, r5, lr}
   1fa66:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1fa68:	4604      	mov	r4, r0
   1fa6a:	b958      	cbnz	r0, 1fa84 <k_work_init_delayable+0x20>
   1fa6c:	490f      	ldr	r1, [pc, #60]	; (1faac <k_work_init_delayable+0x48>)
   1fa6e:	f44f 7350 	mov.w	r3, #832	; 0x340
   1fa72:	4a0f      	ldr	r2, [pc, #60]	; (1fab0 <k_work_init_delayable+0x4c>)
   1fa74:	480f      	ldr	r0, [pc, #60]	; (1fab4 <k_work_init_delayable+0x50>)
   1fa76:	f004 fad4 	bl	24022 <assert_print>
   1fa7a:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   1fa7e:	480c      	ldr	r0, [pc, #48]	; (1fab0 <k_work_init_delayable+0x4c>)
   1fa80:	f004 fac8 	bl	24014 <assert_post_action>
   1fa84:	b949      	cbnz	r1, 1fa9a <k_work_init_delayable+0x36>
   1fa86:	490c      	ldr	r1, [pc, #48]	; (1fab8 <k_work_init_delayable+0x54>)
   1fa88:	f240 3341 	movw	r3, #833	; 0x341
   1fa8c:	4a08      	ldr	r2, [pc, #32]	; (1fab0 <k_work_init_delayable+0x4c>)
   1fa8e:	4809      	ldr	r0, [pc, #36]	; (1fab4 <k_work_init_delayable+0x50>)
   1fa90:	f004 fac7 	bl	24022 <assert_print>
   1fa94:	f240 3141 	movw	r1, #833	; 0x341
   1fa98:	e7f1      	b.n	1fa7e <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   1fa9a:	2230      	movs	r2, #48	; 0x30
   1fa9c:	2100      	movs	r1, #0
   1fa9e:	f008 feb7 	bl	28810 <memset>
   1faa2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1faa6:	6065      	str	r5, [r4, #4]
   1faa8:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   1faaa:	bd38      	pop	{r3, r4, r5, pc}
   1faac:	0002f6a3 	.word	0x0002f6a3
   1fab0:	0002f5cd 	.word	0x0002f5cd
   1fab4:	0002a669 	.word	0x0002a669
   1fab8:	0002f5ee 	.word	0x0002f5ee

0001fabc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1fabc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fabe:	4616      	mov	r6, r2
   1fac0:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1fac2:	460c      	mov	r4, r1
{
   1fac4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   1fac6:	b959      	cbnz	r1, 1fae0 <k_work_schedule_for_queue+0x24>
   1fac8:	492d      	ldr	r1, [pc, #180]	; (1fb80 <k_work_schedule_for_queue+0xc4>)
   1faca:	482e      	ldr	r0, [pc, #184]	; (1fb84 <k_work_schedule_for_queue+0xc8>)
   1facc:	f240 33b7 	movw	r3, #951	; 0x3b7
   1fad0:	4a2d      	ldr	r2, [pc, #180]	; (1fb88 <k_work_schedule_for_queue+0xcc>)
   1fad2:	f004 faa6 	bl	24022 <assert_print>
   1fad6:	f240 31b7 	movw	r1, #951	; 0x3b7
   1fada:	482b      	ldr	r0, [pc, #172]	; (1fb88 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fadc:	f004 fa9a 	bl	24014 <assert_post_action>
	__asm__ volatile(
   1fae0:	f04f 0320 	mov.w	r3, #32
   1fae4:	f3ef 8711 	mrs	r7, BASEPRI
   1fae8:	f383 8812 	msr	BASEPRI_MAX, r3
   1faec:	f3bf 8f6f 	isb	sy
   1faf0:	4826      	ldr	r0, [pc, #152]	; (1fb8c <k_work_schedule_for_queue+0xd0>)
   1faf2:	f7ff f87b 	bl	1ebec <z_spin_lock_valid>
   1faf6:	b960      	cbnz	r0, 1fb12 <k_work_schedule_for_queue+0x56>
   1faf8:	2394      	movs	r3, #148	; 0x94
   1fafa:	4a25      	ldr	r2, [pc, #148]	; (1fb90 <k_work_schedule_for_queue+0xd4>)
   1fafc:	4925      	ldr	r1, [pc, #148]	; (1fb94 <k_work_schedule_for_queue+0xd8>)
   1fafe:	4821      	ldr	r0, [pc, #132]	; (1fb84 <k_work_schedule_for_queue+0xc8>)
   1fb00:	f004 fa8f 	bl	24022 <assert_print>
   1fb04:	4921      	ldr	r1, [pc, #132]	; (1fb8c <k_work_schedule_for_queue+0xd0>)
   1fb06:	4824      	ldr	r0, [pc, #144]	; (1fb98 <k_work_schedule_for_queue+0xdc>)
   1fb08:	f004 fa8b 	bl	24022 <assert_print>
   1fb0c:	2194      	movs	r1, #148	; 0x94
   1fb0e:	4820      	ldr	r0, [pc, #128]	; (1fb90 <k_work_schedule_for_queue+0xd4>)
   1fb10:	e7e4      	b.n	1fadc <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   1fb12:	481e      	ldr	r0, [pc, #120]	; (1fb8c <k_work_schedule_for_queue+0xd0>)
   1fb14:	f7ff f886 	bl	1ec24 <z_spin_lock_set_owner>
	return *flagp;
   1fb18:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1fb1a:	f013 0f0e 	tst.w	r3, #14
   1fb1e:	d125      	bne.n	1fb6c <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fb20:	ea55 0206 	orrs.w	r2, r5, r6
   1fb24:	d114      	bne.n	1fb50 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   1fb26:	4620      	mov	r0, r4
   1fb28:	a901      	add	r1, sp, #4
   1fb2a:	f7ff fd01 	bl	1f530 <submit_to_queue_locked>
   1fb2e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fb30:	4816      	ldr	r0, [pc, #88]	; (1fb8c <k_work_schedule_for_queue+0xd0>)
   1fb32:	f7ff f869 	bl	1ec08 <z_spin_unlock_valid>
   1fb36:	b9d8      	cbnz	r0, 1fb70 <k_work_schedule_for_queue+0xb4>
   1fb38:	23c2      	movs	r3, #194	; 0xc2
   1fb3a:	4a15      	ldr	r2, [pc, #84]	; (1fb90 <k_work_schedule_for_queue+0xd4>)
   1fb3c:	4917      	ldr	r1, [pc, #92]	; (1fb9c <k_work_schedule_for_queue+0xe0>)
   1fb3e:	4811      	ldr	r0, [pc, #68]	; (1fb84 <k_work_schedule_for_queue+0xc8>)
   1fb40:	f004 fa6f 	bl	24022 <assert_print>
   1fb44:	4911      	ldr	r1, [pc, #68]	; (1fb8c <k_work_schedule_for_queue+0xd0>)
   1fb46:	4816      	ldr	r0, [pc, #88]	; (1fba0 <k_work_schedule_for_queue+0xe4>)
   1fb48:	f004 fa6b 	bl	24022 <assert_print>
   1fb4c:	21c2      	movs	r1, #194	; 0xc2
   1fb4e:	e7de      	b.n	1fb0e <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   1fb50:	f043 0308 	orr.w	r3, r3, #8
   1fb54:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1fb56:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fb58:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   1fb5c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fb5e:	4632      	mov	r2, r6
   1fb60:	462b      	mov	r3, r5
   1fb62:	4910      	ldr	r1, [pc, #64]	; (1fba4 <k_work_schedule_for_queue+0xe8>)
   1fb64:	f001 fbc8 	bl	212f8 <z_add_timeout>
	return ret;
   1fb68:	2401      	movs	r4, #1
   1fb6a:	e7e1      	b.n	1fb30 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   1fb6c:	2400      	movs	r4, #0
   1fb6e:	e7df      	b.n	1fb30 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   1fb70:	f387 8811 	msr	BASEPRI, r7
   1fb74:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1fb78:	4620      	mov	r0, r4
   1fb7a:	b003      	add	sp, #12
   1fb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fb7e:	bf00      	nop
   1fb80:	0002f6a3 	.word	0x0002f6a3
   1fb84:	0002a669 	.word	0x0002a669
   1fb88:	0002f5cd 	.word	0x0002f5cd
   1fb8c:	2002145c 	.word	0x2002145c
   1fb90:	0002b32e 	.word	0x0002b32e
   1fb94:	0002b387 	.word	0x0002b387
   1fb98:	0002b39c 	.word	0x0002b39c
   1fb9c:	0002b35b 	.word	0x0002b35b
   1fba0:	0002b372 	.word	0x0002b372
   1fba4:	0001f609 	.word	0x0001f609

0001fba8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1fba8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1fbaa:	4801      	ldr	r0, [pc, #4]	; (1fbb0 <k_work_schedule+0x8>)
   1fbac:	f7ff bf86 	b.w	1fabc <k_work_schedule_for_queue>
   1fbb0:	20009c78 	.word	0x20009c78

0001fbb4 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1fbb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fbb6:	4616      	mov	r6, r2
   1fbb8:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1fbba:	460c      	mov	r4, r1
{
   1fbbc:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   1fbbe:	b959      	cbnz	r1, 1fbd8 <k_work_reschedule_for_queue+0x24>
   1fbc0:	492c      	ldr	r1, [pc, #176]	; (1fc74 <k_work_reschedule_for_queue+0xc0>)
   1fbc2:	482d      	ldr	r0, [pc, #180]	; (1fc78 <k_work_reschedule_for_queue+0xc4>)
   1fbc4:	f240 33db 	movw	r3, #987	; 0x3db
   1fbc8:	4a2c      	ldr	r2, [pc, #176]	; (1fc7c <k_work_reschedule_for_queue+0xc8>)
   1fbca:	f004 fa2a 	bl	24022 <assert_print>
   1fbce:	f240 31db 	movw	r1, #987	; 0x3db
   1fbd2:	482a      	ldr	r0, [pc, #168]	; (1fc7c <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fbd4:	f004 fa1e 	bl	24014 <assert_post_action>
	__asm__ volatile(
   1fbd8:	f04f 0320 	mov.w	r3, #32
   1fbdc:	f3ef 8711 	mrs	r7, BASEPRI
   1fbe0:	f383 8812 	msr	BASEPRI_MAX, r3
   1fbe4:	f3bf 8f6f 	isb	sy
   1fbe8:	4825      	ldr	r0, [pc, #148]	; (1fc80 <k_work_reschedule_for_queue+0xcc>)
   1fbea:	f7fe ffff 	bl	1ebec <z_spin_lock_valid>
   1fbee:	b960      	cbnz	r0, 1fc0a <k_work_reschedule_for_queue+0x56>
   1fbf0:	2394      	movs	r3, #148	; 0x94
   1fbf2:	4a24      	ldr	r2, [pc, #144]	; (1fc84 <k_work_reschedule_for_queue+0xd0>)
   1fbf4:	4924      	ldr	r1, [pc, #144]	; (1fc88 <k_work_reschedule_for_queue+0xd4>)
   1fbf6:	4820      	ldr	r0, [pc, #128]	; (1fc78 <k_work_reschedule_for_queue+0xc4>)
   1fbf8:	f004 fa13 	bl	24022 <assert_print>
   1fbfc:	4920      	ldr	r1, [pc, #128]	; (1fc80 <k_work_reschedule_for_queue+0xcc>)
   1fbfe:	4823      	ldr	r0, [pc, #140]	; (1fc8c <k_work_reschedule_for_queue+0xd8>)
   1fc00:	f004 fa0f 	bl	24022 <assert_print>
   1fc04:	2194      	movs	r1, #148	; 0x94
   1fc06:	481f      	ldr	r0, [pc, #124]	; (1fc84 <k_work_reschedule_for_queue+0xd0>)
   1fc08:	e7e4      	b.n	1fbd4 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   1fc0a:	481d      	ldr	r0, [pc, #116]	; (1fc80 <k_work_reschedule_for_queue+0xcc>)
   1fc0c:	f7ff f80a 	bl	1ec24 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1fc10:	4620      	mov	r0, r4
   1fc12:	f008 fc3d 	bl	28490 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fc16:	ea55 0306 	orrs.w	r3, r5, r6
   1fc1a:	d114      	bne.n	1fc46 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   1fc1c:	4620      	mov	r0, r4
   1fc1e:	a901      	add	r1, sp, #4
   1fc20:	f7ff fc86 	bl	1f530 <submit_to_queue_locked>
   1fc24:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fc26:	4816      	ldr	r0, [pc, #88]	; (1fc80 <k_work_reschedule_for_queue+0xcc>)
   1fc28:	f7fe ffee 	bl	1ec08 <z_spin_unlock_valid>
   1fc2c:	b9d0      	cbnz	r0, 1fc64 <k_work_reschedule_for_queue+0xb0>
   1fc2e:	23c2      	movs	r3, #194	; 0xc2
   1fc30:	4a14      	ldr	r2, [pc, #80]	; (1fc84 <k_work_reschedule_for_queue+0xd0>)
   1fc32:	4917      	ldr	r1, [pc, #92]	; (1fc90 <k_work_reschedule_for_queue+0xdc>)
   1fc34:	4810      	ldr	r0, [pc, #64]	; (1fc78 <k_work_reschedule_for_queue+0xc4>)
   1fc36:	f004 f9f4 	bl	24022 <assert_print>
   1fc3a:	4911      	ldr	r1, [pc, #68]	; (1fc80 <k_work_reschedule_for_queue+0xcc>)
   1fc3c:	4815      	ldr	r0, [pc, #84]	; (1fc94 <k_work_reschedule_for_queue+0xe0>)
   1fc3e:	f004 f9f0 	bl	24022 <assert_print>
   1fc42:	21c2      	movs	r1, #194	; 0xc2
   1fc44:	e7df      	b.n	1fc06 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   1fc46:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fc48:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   1fc4c:	f043 0308 	orr.w	r3, r3, #8
   1fc50:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1fc52:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fc54:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   1fc56:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fc58:	490f      	ldr	r1, [pc, #60]	; (1fc98 <k_work_reschedule_for_queue+0xe4>)
   1fc5a:	462b      	mov	r3, r5
   1fc5c:	f001 fb4c 	bl	212f8 <z_add_timeout>
	return ret;
   1fc60:	2401      	movs	r4, #1
   1fc62:	e7e0      	b.n	1fc26 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   1fc64:	f387 8811 	msr	BASEPRI, r7
   1fc68:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1fc6c:	4620      	mov	r0, r4
   1fc6e:	b003      	add	sp, #12
   1fc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fc72:	bf00      	nop
   1fc74:	0002f6a3 	.word	0x0002f6a3
   1fc78:	0002a669 	.word	0x0002a669
   1fc7c:	0002f5cd 	.word	0x0002f5cd
   1fc80:	2002145c 	.word	0x2002145c
   1fc84:	0002b32e 	.word	0x0002b32e
   1fc88:	0002b387 	.word	0x0002b387
   1fc8c:	0002b39c 	.word	0x0002b39c
   1fc90:	0002b35b 	.word	0x0002b35b
   1fc94:	0002b372 	.word	0x0002b372
   1fc98:	0001f609 	.word	0x0001f609

0001fc9c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1fc9c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1fc9e:	4801      	ldr	r0, [pc, #4]	; (1fca4 <k_work_reschedule+0x8>)
   1fca0:	f7ff bf88 	b.w	1fbb4 <k_work_reschedule_for_queue>
   1fca4:	20009c78 	.word	0x20009c78

0001fca8 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1fca8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   1fcaa:	4604      	mov	r4, r0
   1fcac:	b958      	cbnz	r0, 1fcc6 <k_work_cancel_delayable+0x1e>
   1fcae:	4922      	ldr	r1, [pc, #136]	; (1fd38 <k_work_cancel_delayable+0x90>)
   1fcb0:	4822      	ldr	r0, [pc, #136]	; (1fd3c <k_work_cancel_delayable+0x94>)
   1fcb2:	f240 33fd 	movw	r3, #1021	; 0x3fd
   1fcb6:	4a22      	ldr	r2, [pc, #136]	; (1fd40 <k_work_cancel_delayable+0x98>)
   1fcb8:	f004 f9b3 	bl	24022 <assert_print>
   1fcbc:	f240 31fd 	movw	r1, #1021	; 0x3fd
   1fcc0:	481f      	ldr	r0, [pc, #124]	; (1fd40 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fcc2:	f004 f9a7 	bl	24014 <assert_post_action>
	__asm__ volatile(
   1fcc6:	f04f 0320 	mov.w	r3, #32
   1fcca:	f3ef 8511 	mrs	r5, BASEPRI
   1fcce:	f383 8812 	msr	BASEPRI_MAX, r3
   1fcd2:	f3bf 8f6f 	isb	sy
   1fcd6:	481b      	ldr	r0, [pc, #108]	; (1fd44 <k_work_cancel_delayable+0x9c>)
   1fcd8:	f7fe ff88 	bl	1ebec <z_spin_lock_valid>
   1fcdc:	b960      	cbnz	r0, 1fcf8 <k_work_cancel_delayable+0x50>
   1fcde:	2394      	movs	r3, #148	; 0x94
   1fce0:	4a19      	ldr	r2, [pc, #100]	; (1fd48 <k_work_cancel_delayable+0xa0>)
   1fce2:	491a      	ldr	r1, [pc, #104]	; (1fd4c <k_work_cancel_delayable+0xa4>)
   1fce4:	4815      	ldr	r0, [pc, #84]	; (1fd3c <k_work_cancel_delayable+0x94>)
   1fce6:	f004 f99c 	bl	24022 <assert_print>
   1fcea:	4916      	ldr	r1, [pc, #88]	; (1fd44 <k_work_cancel_delayable+0x9c>)
   1fcec:	4818      	ldr	r0, [pc, #96]	; (1fd50 <k_work_cancel_delayable+0xa8>)
   1fcee:	f004 f998 	bl	24022 <assert_print>
   1fcf2:	2194      	movs	r1, #148	; 0x94
   1fcf4:	4814      	ldr	r0, [pc, #80]	; (1fd48 <k_work_cancel_delayable+0xa0>)
   1fcf6:	e7e4      	b.n	1fcc2 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   1fcf8:	4812      	ldr	r0, [pc, #72]	; (1fd44 <k_work_cancel_delayable+0x9c>)
   1fcfa:	f7fe ff93 	bl	1ec24 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   1fcfe:	4620      	mov	r0, r4
   1fd00:	f008 fbc6 	bl	28490 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1fd04:	4620      	mov	r0, r4
   1fd06:	f008 fbd8 	bl	284ba <cancel_async_locked>
   1fd0a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd0c:	480d      	ldr	r0, [pc, #52]	; (1fd44 <k_work_cancel_delayable+0x9c>)
   1fd0e:	f7fe ff7b 	bl	1ec08 <z_spin_unlock_valid>
   1fd12:	b958      	cbnz	r0, 1fd2c <k_work_cancel_delayable+0x84>
   1fd14:	23c2      	movs	r3, #194	; 0xc2
   1fd16:	4a0c      	ldr	r2, [pc, #48]	; (1fd48 <k_work_cancel_delayable+0xa0>)
   1fd18:	490e      	ldr	r1, [pc, #56]	; (1fd54 <k_work_cancel_delayable+0xac>)
   1fd1a:	4808      	ldr	r0, [pc, #32]	; (1fd3c <k_work_cancel_delayable+0x94>)
   1fd1c:	f004 f981 	bl	24022 <assert_print>
   1fd20:	4908      	ldr	r1, [pc, #32]	; (1fd44 <k_work_cancel_delayable+0x9c>)
   1fd22:	480d      	ldr	r0, [pc, #52]	; (1fd58 <k_work_cancel_delayable+0xb0>)
   1fd24:	f004 f97d 	bl	24022 <assert_print>
   1fd28:	21c2      	movs	r1, #194	; 0xc2
   1fd2a:	e7e3      	b.n	1fcf4 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   1fd2c:	f385 8811 	msr	BASEPRI, r5
   1fd30:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1fd34:	4620      	mov	r0, r4
   1fd36:	bd38      	pop	{r3, r4, r5, pc}
   1fd38:	0002f6a3 	.word	0x0002f6a3
   1fd3c:	0002a669 	.word	0x0002a669
   1fd40:	0002f5cd 	.word	0x0002f5cd
   1fd44:	2002145c 	.word	0x2002145c
   1fd48:	0002b32e 	.word	0x0002b32e
   1fd4c:	0002b387 	.word	0x0002b387
   1fd50:	0002b39c 	.word	0x0002b39c
   1fd54:	0002b35b 	.word	0x0002b35b
   1fd58:	0002b372 	.word	0x0002b372

0001fd5c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1fd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd60:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1fd62:	4605      	mov	r5, r0
   1fd64:	b958      	cbnz	r0, 1fd7e <k_work_cancel_delayable_sync+0x22>
   1fd66:	493a      	ldr	r1, [pc, #232]	; (1fe50 <k_work_cancel_delayable_sync+0xf4>)
   1fd68:	f240 430e 	movw	r3, #1038	; 0x40e
   1fd6c:	4a39      	ldr	r2, [pc, #228]	; (1fe54 <k_work_cancel_delayable_sync+0xf8>)
   1fd6e:	483a      	ldr	r0, [pc, #232]	; (1fe58 <k_work_cancel_delayable_sync+0xfc>)
   1fd70:	f004 f957 	bl	24022 <assert_print>
   1fd74:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   1fd78:	4836      	ldr	r0, [pc, #216]	; (1fe54 <k_work_cancel_delayable_sync+0xf8>)
   1fd7a:	f004 f94b 	bl	24014 <assert_post_action>
   1fd7e:	b949      	cbnz	r1, 1fd94 <k_work_cancel_delayable_sync+0x38>
   1fd80:	4936      	ldr	r1, [pc, #216]	; (1fe5c <k_work_cancel_delayable_sync+0x100>)
   1fd82:	f240 430f 	movw	r3, #1039	; 0x40f
   1fd86:	4a33      	ldr	r2, [pc, #204]	; (1fe54 <k_work_cancel_delayable_sync+0xf8>)
   1fd88:	4833      	ldr	r0, [pc, #204]	; (1fe58 <k_work_cancel_delayable_sync+0xfc>)
   1fd8a:	f004 f94a 	bl	24022 <assert_print>
   1fd8e:	f240 410f 	movw	r1, #1039	; 0x40f
   1fd92:	e7f1      	b.n	1fd78 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   1fd94:	f008 fb10 	bl	283b8 <k_is_in_isr>
   1fd98:	4604      	mov	r4, r0
   1fd9a:	b148      	cbz	r0, 1fdb0 <k_work_cancel_delayable_sync+0x54>
   1fd9c:	4930      	ldr	r1, [pc, #192]	; (1fe60 <k_work_cancel_delayable_sync+0x104>)
   1fd9e:	f44f 6382 	mov.w	r3, #1040	; 0x410
   1fda2:	4a2c      	ldr	r2, [pc, #176]	; (1fe54 <k_work_cancel_delayable_sync+0xf8>)
   1fda4:	482c      	ldr	r0, [pc, #176]	; (1fe58 <k_work_cancel_delayable_sync+0xfc>)
   1fda6:	f004 f93c 	bl	24022 <assert_print>
   1fdaa:	f44f 6182 	mov.w	r1, #1040	; 0x410
   1fdae:	e7e3      	b.n	1fd78 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   1fdb0:	f04f 0320 	mov.w	r3, #32
   1fdb4:	f3ef 8811 	mrs	r8, BASEPRI
   1fdb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1fdbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fdc0:	4828      	ldr	r0, [pc, #160]	; (1fe64 <k_work_cancel_delayable_sync+0x108>)
   1fdc2:	f7fe ff13 	bl	1ebec <z_spin_lock_valid>
   1fdc6:	b960      	cbnz	r0, 1fde2 <k_work_cancel_delayable_sync+0x86>
   1fdc8:	2394      	movs	r3, #148	; 0x94
   1fdca:	4a27      	ldr	r2, [pc, #156]	; (1fe68 <k_work_cancel_delayable_sync+0x10c>)
   1fdcc:	4927      	ldr	r1, [pc, #156]	; (1fe6c <k_work_cancel_delayable_sync+0x110>)
   1fdce:	4822      	ldr	r0, [pc, #136]	; (1fe58 <k_work_cancel_delayable_sync+0xfc>)
   1fdd0:	f004 f927 	bl	24022 <assert_print>
   1fdd4:	4923      	ldr	r1, [pc, #140]	; (1fe64 <k_work_cancel_delayable_sync+0x108>)
   1fdd6:	4826      	ldr	r0, [pc, #152]	; (1fe70 <k_work_cancel_delayable_sync+0x114>)
   1fdd8:	f004 f923 	bl	24022 <assert_print>
   1fddc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fdde:	4822      	ldr	r0, [pc, #136]	; (1fe68 <k_work_cancel_delayable_sync+0x10c>)
   1fde0:	e7cb      	b.n	1fd7a <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   1fde2:	4820      	ldr	r0, [pc, #128]	; (1fe64 <k_work_cancel_delayable_sync+0x108>)
   1fde4:	f7fe ff1e 	bl	1ec24 <z_spin_lock_set_owner>
	return *flagp;
   1fde8:	68eb      	ldr	r3, [r5, #12]
   1fdea:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1fdee:	2b00      	cmp	r3, #0
   1fdf0:	bf14      	ite	ne
   1fdf2:	2701      	movne	r7, #1
   1fdf4:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1fdf6:	d00a      	beq.n	1fe0e <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   1fdf8:	4628      	mov	r0, r5
   1fdfa:	f008 fb49 	bl	28490 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1fdfe:	4628      	mov	r0, r5
   1fe00:	f008 fb5b 	bl	284ba <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1fe04:	4631      	mov	r1, r6
   1fe06:	4628      	mov	r0, r5
   1fe08:	f7ff fb74 	bl	1f4f4 <cancel_sync_locked>
   1fe0c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fe0e:	4815      	ldr	r0, [pc, #84]	; (1fe64 <k_work_cancel_delayable_sync+0x108>)
   1fe10:	f7fe fefa 	bl	1ec08 <z_spin_unlock_valid>
   1fe14:	b958      	cbnz	r0, 1fe2e <k_work_cancel_delayable_sync+0xd2>
   1fe16:	23c2      	movs	r3, #194	; 0xc2
   1fe18:	4a13      	ldr	r2, [pc, #76]	; (1fe68 <k_work_cancel_delayable_sync+0x10c>)
   1fe1a:	4916      	ldr	r1, [pc, #88]	; (1fe74 <k_work_cancel_delayable_sync+0x118>)
   1fe1c:	480e      	ldr	r0, [pc, #56]	; (1fe58 <k_work_cancel_delayable_sync+0xfc>)
   1fe1e:	f004 f900 	bl	24022 <assert_print>
   1fe22:	4910      	ldr	r1, [pc, #64]	; (1fe64 <k_work_cancel_delayable_sync+0x108>)
   1fe24:	4814      	ldr	r0, [pc, #80]	; (1fe78 <k_work_cancel_delayable_sync+0x11c>)
   1fe26:	f004 f8fc 	bl	24022 <assert_print>
   1fe2a:	21c2      	movs	r1, #194	; 0xc2
   1fe2c:	e7d7      	b.n	1fdde <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   1fe2e:	f388 8811 	msr	BASEPRI, r8
   1fe32:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1fe36:	b13c      	cbz	r4, 1fe48 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   1fe38:	f04f 32ff 	mov.w	r2, #4294967295
   1fe3c:	f04f 33ff 	mov.w	r3, #4294967295
   1fe40:	f106 0008 	add.w	r0, r6, #8
   1fe44:	f7ff f9ce 	bl	1f1e4 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1fe48:	4638      	mov	r0, r7
   1fe4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fe4e:	bf00      	nop
   1fe50:	0002f6a3 	.word	0x0002f6a3
   1fe54:	0002f5cd 	.word	0x0002f5cd
   1fe58:	0002a669 	.word	0x0002a669
   1fe5c:	0002f64f 	.word	0x0002f64f
   1fe60:	0002d1d8 	.word	0x0002d1d8
   1fe64:	2002145c 	.word	0x2002145c
   1fe68:	0002b32e 	.word	0x0002b32e
   1fe6c:	0002b387 	.word	0x0002b387
   1fe70:	0002b39c 	.word	0x0002b39c
   1fe74:	0002b35b 	.word	0x0002b35b
   1fe78:	0002b372 	.word	0x0002b372

0001fe7c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1fe7c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1fe7e:	4d07      	ldr	r5, [pc, #28]	; (1fe9c <z_reset_time_slice+0x20>)
   1fe80:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1fe82:	b154      	cbz	r4, 1fe9a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1fe84:	f7fb fc66 	bl	1b754 <sys_clock_elapsed>
   1fe88:	4b05      	ldr	r3, [pc, #20]	; (1fea0 <z_reset_time_slice+0x24>)
   1fe8a:	4404      	add	r4, r0
   1fe8c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1fe8e:	6828      	ldr	r0, [r5, #0]
   1fe90:	2100      	movs	r1, #0
	}
}
   1fe92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1fe96:	f001 bb87 	b.w	215a8 <z_set_timeout_expiry>
}
   1fe9a:	bd38      	pop	{r3, r4, r5, pc}
   1fe9c:	20021468 	.word	0x20021468
   1fea0:	20021424 	.word	0x20021424

0001fea4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1fea4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1fea6:	4d14      	ldr	r5, [pc, #80]	; (1fef8 <update_cache+0x54>)
   1fea8:	462b      	mov	r3, r5
   1feaa:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1feae:	429c      	cmp	r4, r3
   1feb0:	d000      	beq.n	1feb4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1feb2:	b904      	cbnz	r4, 1feb6 <update_cache+0x12>
   1feb4:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   1feb6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1feb8:	b9a8      	cbnz	r0, 1fee6 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   1feba:	b963      	cbnz	r3, 1fed6 <update_cache+0x32>
   1febc:	490f      	ldr	r1, [pc, #60]	; (1fefc <update_cache+0x58>)
   1febe:	2389      	movs	r3, #137	; 0x89
   1fec0:	4a0f      	ldr	r2, [pc, #60]	; (1ff00 <update_cache+0x5c>)
   1fec2:	4810      	ldr	r0, [pc, #64]	; (1ff04 <update_cache+0x60>)
   1fec4:	f004 f8ad 	bl	24022 <assert_print>
   1fec8:	480f      	ldr	r0, [pc, #60]	; (1ff08 <update_cache+0x64>)
   1feca:	f004 f8aa 	bl	24022 <assert_print>
   1fece:	2189      	movs	r1, #137	; 0x89
   1fed0:	480b      	ldr	r0, [pc, #44]	; (1ff00 <update_cache+0x5c>)
   1fed2:	f004 f89f 	bl	24014 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1fed6:	7b5a      	ldrb	r2, [r3, #13]
   1fed8:	06d2      	lsls	r2, r2, #27
   1feda:	d104      	bne.n	1fee6 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1fedc:	69a2      	ldr	r2, [r4, #24]
   1fede:	b912      	cbnz	r2, 1fee6 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   1fee0:	89da      	ldrh	r2, [r3, #14]
   1fee2:	2a7f      	cmp	r2, #127	; 0x7f
   1fee4:	d805      	bhi.n	1fef2 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1fee6:	429c      	cmp	r4, r3
   1fee8:	d002      	beq.n	1fef0 <update_cache+0x4c>
			z_reset_time_slice(thread);
   1feea:	4620      	mov	r0, r4
   1feec:	f7ff ffc6 	bl	1fe7c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1fef0:	4623      	mov	r3, r4
   1fef2:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1fef4:	bd38      	pop	{r3, r4, r5, pc}
   1fef6:	bf00      	nop
   1fef8:	20021424 	.word	0x20021424
   1fefc:	0002f6da 	.word	0x0002f6da
   1ff00:	0002f6b8 	.word	0x0002f6b8
   1ff04:	0002a669 	.word	0x0002a669
   1ff08:	0002df2c 	.word	0x0002df2c

0001ff0c <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   1ff0c:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ff0e:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1ff12:	7b42      	ldrb	r2, [r0, #13]
   1ff14:	2b00      	cmp	r3, #0
   1ff16:	db38      	blt.n	1ff8a <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ff18:	06d3      	lsls	r3, r2, #27
   1ff1a:	d136      	bne.n	1ff8a <ready_thread+0x7e>
	return node->next != NULL;
   1ff1c:	6983      	ldr	r3, [r0, #24]
   1ff1e:	2b00      	cmp	r3, #0
   1ff20:	d133      	bne.n	1ff8a <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ff22:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1ff26:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ff28:	4a18      	ldr	r2, [pc, #96]	; (1ff8c <ready_thread+0x80>)
   1ff2a:	4290      	cmp	r0, r2
   1ff2c:	d109      	bne.n	1ff42 <ready_thread+0x36>
   1ff2e:	4918      	ldr	r1, [pc, #96]	; (1ff90 <ready_thread+0x84>)
   1ff30:	4818      	ldr	r0, [pc, #96]	; (1ff94 <ready_thread+0x88>)
   1ff32:	23ba      	movs	r3, #186	; 0xba
   1ff34:	4a18      	ldr	r2, [pc, #96]	; (1ff98 <ready_thread+0x8c>)
   1ff36:	f004 f874 	bl	24022 <assert_print>
   1ff3a:	21ba      	movs	r1, #186	; 0xba
   1ff3c:	4816      	ldr	r0, [pc, #88]	; (1ff98 <ready_thread+0x8c>)
   1ff3e:	f004 f869 	bl	24014 <assert_post_action>
	return list->head == list;
   1ff42:	4916      	ldr	r1, [pc, #88]	; (1ff9c <ready_thread+0x90>)
   1ff44:	460a      	mov	r2, r1
   1ff46:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ff4a:	4294      	cmp	r4, r2
   1ff4c:	bf18      	it	ne
   1ff4e:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1ff50:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ff52:	b923      	cbnz	r3, 1ff5e <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1ff54:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   1ff58:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1ff5a:	6248      	str	r0, [r1, #36]	; 0x24
}
   1ff5c:	e00c      	b.n	1ff78 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   1ff5e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1ff62:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1ff66:	42b5      	cmp	r5, r6
   1ff68:	d00b      	beq.n	1ff82 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ff6a:	42ae      	cmp	r6, r5
   1ff6c:	dd09      	ble.n	1ff82 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1ff6e:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1ff70:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1ff74:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1ff76:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   1ff78:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   1ff7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1ff7e:	f7ff bf91 	b.w	1fea4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ff82:	42a3      	cmp	r3, r4
   1ff84:	d0e6      	beq.n	1ff54 <ready_thread+0x48>
   1ff86:	681b      	ldr	r3, [r3, #0]
   1ff88:	e7e3      	b.n	1ff52 <ready_thread+0x46>
}
   1ff8a:	bd70      	pop	{r4, r5, r6, pc}
   1ff8c:	20009b68 	.word	0x20009b68
   1ff90:	0002f701 	.word	0x0002f701
   1ff94:	0002a669 	.word	0x0002a669
   1ff98:	0002f6b8 	.word	0x0002f6b8
   1ff9c:	20021424 	.word	0x20021424

0001ffa0 <k_sched_time_slice_set>:
{
   1ffa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ffa2:	4604      	mov	r4, r0
   1ffa4:	460d      	mov	r5, r1
	__asm__ volatile(
   1ffa6:	f04f 0320 	mov.w	r3, #32
   1ffaa:	f3ef 8711 	mrs	r7, BASEPRI
   1ffae:	f383 8812 	msr	BASEPRI_MAX, r3
   1ffb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ffb6:	4822      	ldr	r0, [pc, #136]	; (20040 <k_sched_time_slice_set+0xa0>)
   1ffb8:	f7fe fe18 	bl	1ebec <z_spin_lock_valid>
   1ffbc:	b968      	cbnz	r0, 1ffda <k_sched_time_slice_set+0x3a>
   1ffbe:	2394      	movs	r3, #148	; 0x94
   1ffc0:	4a20      	ldr	r2, [pc, #128]	; (20044 <k_sched_time_slice_set+0xa4>)
   1ffc2:	4921      	ldr	r1, [pc, #132]	; (20048 <k_sched_time_slice_set+0xa8>)
   1ffc4:	4821      	ldr	r0, [pc, #132]	; (2004c <k_sched_time_slice_set+0xac>)
   1ffc6:	f004 f82c 	bl	24022 <assert_print>
   1ffca:	491d      	ldr	r1, [pc, #116]	; (20040 <k_sched_time_slice_set+0xa0>)
   1ffcc:	4820      	ldr	r0, [pc, #128]	; (20050 <k_sched_time_slice_set+0xb0>)
   1ffce:	f004 f828 	bl	24022 <assert_print>
   1ffd2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ffd4:	481b      	ldr	r0, [pc, #108]	; (20044 <k_sched_time_slice_set+0xa4>)
   1ffd6:	f004 f81d 	bl	24014 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1ffda:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   1ffdc:	4818      	ldr	r0, [pc, #96]	; (20040 <k_sched_time_slice_set+0xa0>)
   1ffde:	f7fe fe21 	bl	1ec24 <z_spin_lock_set_owner>
   1ffe2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1ffe6:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ffea:	4631      	mov	r1, r6
   1ffec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fff0:	2300      	movs	r3, #0
   1fff2:	fbe4 010c 	umlal	r0, r1, r4, ip
   1fff6:	f7e8 ff7b 	bl	8ef0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1fffa:	42b4      	cmp	r4, r6
   1fffc:	dd02      	ble.n	20004 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   1fffe:	2802      	cmp	r0, #2
   20000:	bfb8      	it	lt
   20002:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   20004:	4a13      	ldr	r2, [pc, #76]	; (20054 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   20006:	4b14      	ldr	r3, [pc, #80]	; (20058 <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   20008:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   2000a:	4a14      	ldr	r2, [pc, #80]	; (2005c <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   2000c:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   2000e:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   20010:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   20012:	f7ff ff33 	bl	1fe7c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20016:	480a      	ldr	r0, [pc, #40]	; (20040 <k_sched_time_slice_set+0xa0>)
   20018:	f7fe fdf6 	bl	1ec08 <z_spin_unlock_valid>
   2001c:	b958      	cbnz	r0, 20036 <k_sched_time_slice_set+0x96>
   2001e:	23c2      	movs	r3, #194	; 0xc2
   20020:	4a08      	ldr	r2, [pc, #32]	; (20044 <k_sched_time_slice_set+0xa4>)
   20022:	490f      	ldr	r1, [pc, #60]	; (20060 <k_sched_time_slice_set+0xc0>)
   20024:	4809      	ldr	r0, [pc, #36]	; (2004c <k_sched_time_slice_set+0xac>)
   20026:	f003 fffc 	bl	24022 <assert_print>
   2002a:	4905      	ldr	r1, [pc, #20]	; (20040 <k_sched_time_slice_set+0xa0>)
   2002c:	480d      	ldr	r0, [pc, #52]	; (20064 <k_sched_time_slice_set+0xc4>)
   2002e:	f003 fff8 	bl	24022 <assert_print>
   20032:	21c2      	movs	r1, #194	; 0xc2
   20034:	e7ce      	b.n	1ffd4 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   20036:	f387 8811 	msr	BASEPRI, r7
   2003a:	f3bf 8f6f 	isb	sy
}
   2003e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20040:	2002146c 	.word	0x2002146c
   20044:	0002b32e 	.word	0x0002b32e
   20048:	0002b387 	.word	0x0002b387
   2004c:	0002a669 	.word	0x0002a669
   20050:	0002b39c 	.word	0x0002b39c
   20054:	20021468 	.word	0x20021468
   20058:	20021424 	.word	0x20021424
   2005c:	20021464 	.word	0x20021464
   20060:	0002b35b 	.word	0x0002b35b
   20064:	0002b372 	.word	0x0002b372

00020068 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   20068:	b538      	push	{r3, r4, r5, lr}
   2006a:	4604      	mov	r4, r0
	__asm__ volatile(
   2006c:	f04f 0320 	mov.w	r3, #32
   20070:	f3ef 8511 	mrs	r5, BASEPRI
   20074:	f383 8812 	msr	BASEPRI_MAX, r3
   20078:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2007c:	4816      	ldr	r0, [pc, #88]	; (200d8 <z_ready_thread+0x70>)
   2007e:	f7fe fdb5 	bl	1ebec <z_spin_lock_valid>
   20082:	b968      	cbnz	r0, 200a0 <z_ready_thread+0x38>
   20084:	2394      	movs	r3, #148	; 0x94
   20086:	4a15      	ldr	r2, [pc, #84]	; (200dc <z_ready_thread+0x74>)
   20088:	4915      	ldr	r1, [pc, #84]	; (200e0 <z_ready_thread+0x78>)
   2008a:	4816      	ldr	r0, [pc, #88]	; (200e4 <z_ready_thread+0x7c>)
   2008c:	f003 ffc9 	bl	24022 <assert_print>
   20090:	4911      	ldr	r1, [pc, #68]	; (200d8 <z_ready_thread+0x70>)
   20092:	4815      	ldr	r0, [pc, #84]	; (200e8 <z_ready_thread+0x80>)
   20094:	f003 ffc5 	bl	24022 <assert_print>
   20098:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2009a:	4810      	ldr	r0, [pc, #64]	; (200dc <z_ready_thread+0x74>)
   2009c:	f003 ffba 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   200a0:	480d      	ldr	r0, [pc, #52]	; (200d8 <z_ready_thread+0x70>)
   200a2:	f7fe fdbf 	bl	1ec24 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   200a6:	4620      	mov	r0, r4
   200a8:	f7ff ff30 	bl	1ff0c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   200ac:	480a      	ldr	r0, [pc, #40]	; (200d8 <z_ready_thread+0x70>)
   200ae:	f7fe fdab 	bl	1ec08 <z_spin_unlock_valid>
   200b2:	b958      	cbnz	r0, 200cc <z_ready_thread+0x64>
   200b4:	23c2      	movs	r3, #194	; 0xc2
   200b6:	4a09      	ldr	r2, [pc, #36]	; (200dc <z_ready_thread+0x74>)
   200b8:	490c      	ldr	r1, [pc, #48]	; (200ec <z_ready_thread+0x84>)
   200ba:	480a      	ldr	r0, [pc, #40]	; (200e4 <z_ready_thread+0x7c>)
   200bc:	f003 ffb1 	bl	24022 <assert_print>
   200c0:	4905      	ldr	r1, [pc, #20]	; (200d8 <z_ready_thread+0x70>)
   200c2:	480b      	ldr	r0, [pc, #44]	; (200f0 <z_ready_thread+0x88>)
   200c4:	f003 ffad 	bl	24022 <assert_print>
   200c8:	21c2      	movs	r1, #194	; 0xc2
   200ca:	e7e6      	b.n	2009a <z_ready_thread+0x32>
	__asm__ volatile(
   200cc:	f385 8811 	msr	BASEPRI, r5
   200d0:	f3bf 8f6f 	isb	sy
		}
	}
}
   200d4:	bd38      	pop	{r3, r4, r5, pc}
   200d6:	bf00      	nop
   200d8:	2002146c 	.word	0x2002146c
   200dc:	0002b32e 	.word	0x0002b32e
   200e0:	0002b387 	.word	0x0002b387
   200e4:	0002a669 	.word	0x0002a669
   200e8:	0002b39c 	.word	0x0002b39c
   200ec:	0002b35b 	.word	0x0002b35b
   200f0:	0002b372 	.word	0x0002b372

000200f4 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   200f4:	b538      	push	{r3, r4, r5, lr}
   200f6:	4604      	mov	r4, r0
	__asm__ volatile(
   200f8:	f04f 0320 	mov.w	r3, #32
   200fc:	f3ef 8511 	mrs	r5, BASEPRI
   20100:	f383 8812 	msr	BASEPRI_MAX, r3
   20104:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20108:	4816      	ldr	r0, [pc, #88]	; (20164 <z_unpend_thread_no_timeout+0x70>)
   2010a:	f7fe fd6f 	bl	1ebec <z_spin_lock_valid>
   2010e:	b968      	cbnz	r0, 2012c <z_unpend_thread_no_timeout+0x38>
   20110:	2394      	movs	r3, #148	; 0x94
   20112:	4a15      	ldr	r2, [pc, #84]	; (20168 <z_unpend_thread_no_timeout+0x74>)
   20114:	4915      	ldr	r1, [pc, #84]	; (2016c <z_unpend_thread_no_timeout+0x78>)
   20116:	4816      	ldr	r0, [pc, #88]	; (20170 <z_unpend_thread_no_timeout+0x7c>)
   20118:	f003 ff83 	bl	24022 <assert_print>
   2011c:	4911      	ldr	r1, [pc, #68]	; (20164 <z_unpend_thread_no_timeout+0x70>)
   2011e:	4815      	ldr	r0, [pc, #84]	; (20174 <z_unpend_thread_no_timeout+0x80>)
   20120:	f003 ff7f 	bl	24022 <assert_print>
   20124:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20126:	4810      	ldr	r0, [pc, #64]	; (20168 <z_unpend_thread_no_timeout+0x74>)
   20128:	f003 ff74 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   2012c:	480d      	ldr	r0, [pc, #52]	; (20164 <z_unpend_thread_no_timeout+0x70>)
   2012e:	f7fe fd79 	bl	1ec24 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   20132:	4620      	mov	r0, r4
   20134:	f000 fc62 	bl	209fc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20138:	480a      	ldr	r0, [pc, #40]	; (20164 <z_unpend_thread_no_timeout+0x70>)
   2013a:	f7fe fd65 	bl	1ec08 <z_spin_unlock_valid>
   2013e:	b958      	cbnz	r0, 20158 <z_unpend_thread_no_timeout+0x64>
   20140:	23c2      	movs	r3, #194	; 0xc2
   20142:	4a09      	ldr	r2, [pc, #36]	; (20168 <z_unpend_thread_no_timeout+0x74>)
   20144:	490c      	ldr	r1, [pc, #48]	; (20178 <z_unpend_thread_no_timeout+0x84>)
   20146:	480a      	ldr	r0, [pc, #40]	; (20170 <z_unpend_thread_no_timeout+0x7c>)
   20148:	f003 ff6b 	bl	24022 <assert_print>
   2014c:	4905      	ldr	r1, [pc, #20]	; (20164 <z_unpend_thread_no_timeout+0x70>)
   2014e:	480b      	ldr	r0, [pc, #44]	; (2017c <z_unpend_thread_no_timeout+0x88>)
   20150:	f003 ff67 	bl	24022 <assert_print>
   20154:	21c2      	movs	r1, #194	; 0xc2
   20156:	e7e6      	b.n	20126 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   20158:	f385 8811 	msr	BASEPRI, r5
   2015c:	f3bf 8f6f 	isb	sy
	}
}
   20160:	bd38      	pop	{r3, r4, r5, pc}
   20162:	bf00      	nop
   20164:	2002146c 	.word	0x2002146c
   20168:	0002b32e 	.word	0x0002b32e
   2016c:	0002b387 	.word	0x0002b387
   20170:	0002a669 	.word	0x0002a669
   20174:	0002b39c 	.word	0x0002b39c
   20178:	0002b35b 	.word	0x0002b35b
   2017c:	0002b372 	.word	0x0002b372

00020180 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   20180:	b570      	push	{r4, r5, r6, lr}
   20182:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20184:	460d      	mov	r5, r1
   20186:	b9e9      	cbnz	r1, 201c4 <z_reschedule+0x44>
   20188:	f3ef 8605 	mrs	r6, IPSR
   2018c:	b9d6      	cbnz	r6, 201c4 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   2018e:	4b18      	ldr	r3, [pc, #96]	; (201f0 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   20190:	69da      	ldr	r2, [r3, #28]
   20192:	689b      	ldr	r3, [r3, #8]
   20194:	429a      	cmp	r2, r3
   20196:	d015      	beq.n	201c4 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20198:	f7fe fd36 	bl	1ec08 <z_spin_unlock_valid>
   2019c:	b968      	cbnz	r0, 201ba <z_reschedule+0x3a>
   2019e:	23e1      	movs	r3, #225	; 0xe1
   201a0:	4a14      	ldr	r2, [pc, #80]	; (201f4 <z_reschedule+0x74>)
   201a2:	4915      	ldr	r1, [pc, #84]	; (201f8 <z_reschedule+0x78>)
   201a4:	4815      	ldr	r0, [pc, #84]	; (201fc <z_reschedule+0x7c>)
   201a6:	f003 ff3c 	bl	24022 <assert_print>
   201aa:	4621      	mov	r1, r4
   201ac:	4814      	ldr	r0, [pc, #80]	; (20200 <z_reschedule+0x80>)
   201ae:	f003 ff38 	bl	24022 <assert_print>
   201b2:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   201b4:	480f      	ldr	r0, [pc, #60]	; (201f4 <z_reschedule+0x74>)
   201b6:	f003 ff2d 	bl	24014 <assert_post_action>
	ret = arch_swap(key);
   201ba:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   201bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   201c0:	f7ef b9aa 	b.w	f518 <arch_swap>
   201c4:	4620      	mov	r0, r4
   201c6:	f7fe fd1f 	bl	1ec08 <z_spin_unlock_valid>
   201ca:	b958      	cbnz	r0, 201e4 <z_reschedule+0x64>
   201cc:	23c2      	movs	r3, #194	; 0xc2
   201ce:	4a09      	ldr	r2, [pc, #36]	; (201f4 <z_reschedule+0x74>)
   201d0:	4909      	ldr	r1, [pc, #36]	; (201f8 <z_reschedule+0x78>)
   201d2:	480a      	ldr	r0, [pc, #40]	; (201fc <z_reschedule+0x7c>)
   201d4:	f003 ff25 	bl	24022 <assert_print>
   201d8:	4621      	mov	r1, r4
   201da:	4809      	ldr	r0, [pc, #36]	; (20200 <z_reschedule+0x80>)
   201dc:	f003 ff21 	bl	24022 <assert_print>
   201e0:	21c2      	movs	r1, #194	; 0xc2
   201e2:	e7e7      	b.n	201b4 <z_reschedule+0x34>
   201e4:	f385 8811 	msr	BASEPRI, r5
   201e8:	f3bf 8f6f 	isb	sy
   201ec:	bd70      	pop	{r4, r5, r6, pc}
   201ee:	bf00      	nop
   201f0:	20021424 	.word	0x20021424
   201f4:	0002b32e 	.word	0x0002b32e
   201f8:	0002b35b 	.word	0x0002b35b
   201fc:	0002a669 	.word	0x0002a669
   20200:	0002b372 	.word	0x0002b372

00020204 <z_sched_start>:
{
   20204:	b538      	push	{r3, r4, r5, lr}
   20206:	4604      	mov	r4, r0
	__asm__ volatile(
   20208:	f04f 0320 	mov.w	r3, #32
   2020c:	f3ef 8511 	mrs	r5, BASEPRI
   20210:	f383 8812 	msr	BASEPRI_MAX, r3
   20214:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20218:	481c      	ldr	r0, [pc, #112]	; (2028c <z_sched_start+0x88>)
   2021a:	f7fe fce7 	bl	1ebec <z_spin_lock_valid>
   2021e:	b968      	cbnz	r0, 2023c <z_sched_start+0x38>
   20220:	2394      	movs	r3, #148	; 0x94
   20222:	4a1b      	ldr	r2, [pc, #108]	; (20290 <z_sched_start+0x8c>)
   20224:	491b      	ldr	r1, [pc, #108]	; (20294 <z_sched_start+0x90>)
   20226:	481c      	ldr	r0, [pc, #112]	; (20298 <z_sched_start+0x94>)
   20228:	f003 fefb 	bl	24022 <assert_print>
   2022c:	4917      	ldr	r1, [pc, #92]	; (2028c <z_sched_start+0x88>)
   2022e:	481b      	ldr	r0, [pc, #108]	; (2029c <z_sched_start+0x98>)
   20230:	f003 fef7 	bl	24022 <assert_print>
   20234:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20236:	4816      	ldr	r0, [pc, #88]	; (20290 <z_sched_start+0x8c>)
   20238:	f003 feec 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   2023c:	4813      	ldr	r0, [pc, #76]	; (2028c <z_sched_start+0x88>)
   2023e:	f7fe fcf1 	bl	1ec24 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   20242:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   20244:	075a      	lsls	r2, r3, #29
   20246:	d414      	bmi.n	20272 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20248:	4810      	ldr	r0, [pc, #64]	; (2028c <z_sched_start+0x88>)
   2024a:	f7fe fcdd 	bl	1ec08 <z_spin_unlock_valid>
   2024e:	b958      	cbnz	r0, 20268 <z_sched_start+0x64>
   20250:	23c2      	movs	r3, #194	; 0xc2
   20252:	4a0f      	ldr	r2, [pc, #60]	; (20290 <z_sched_start+0x8c>)
   20254:	4912      	ldr	r1, [pc, #72]	; (202a0 <z_sched_start+0x9c>)
   20256:	4810      	ldr	r0, [pc, #64]	; (20298 <z_sched_start+0x94>)
   20258:	f003 fee3 	bl	24022 <assert_print>
   2025c:	490b      	ldr	r1, [pc, #44]	; (2028c <z_sched_start+0x88>)
   2025e:	4811      	ldr	r0, [pc, #68]	; (202a4 <z_sched_start+0xa0>)
   20260:	f003 fedf 	bl	24022 <assert_print>
   20264:	21c2      	movs	r1, #194	; 0xc2
   20266:	e7e6      	b.n	20236 <z_sched_start+0x32>
	__asm__ volatile(
   20268:	f385 8811 	msr	BASEPRI, r5
   2026c:	f3bf 8f6f 	isb	sy
}
   20270:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20272:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   20276:	4620      	mov	r0, r4
   20278:	7363      	strb	r3, [r4, #13]
   2027a:	f7ff fe47 	bl	1ff0c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2027e:	4629      	mov	r1, r5
}
   20280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   20284:	4801      	ldr	r0, [pc, #4]	; (2028c <z_sched_start+0x88>)
   20286:	f7ff bf7b 	b.w	20180 <z_reschedule>
   2028a:	bf00      	nop
   2028c:	2002146c 	.word	0x2002146c
   20290:	0002b32e 	.word	0x0002b32e
   20294:	0002b387 	.word	0x0002b387
   20298:	0002a669 	.word	0x0002a669
   2029c:	0002b39c 	.word	0x0002b39c
   202a0:	0002b35b 	.word	0x0002b35b
   202a4:	0002b372 	.word	0x0002b372

000202a8 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   202a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   202aa:	f04f 0320 	mov.w	r3, #32
   202ae:	f3ef 8411 	mrs	r4, BASEPRI
   202b2:	f383 8812 	msr	BASEPRI_MAX, r3
   202b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   202ba:	4825      	ldr	r0, [pc, #148]	; (20350 <k_sched_lock+0xa8>)
   202bc:	f7fe fc96 	bl	1ebec <z_spin_lock_valid>
   202c0:	b960      	cbnz	r0, 202dc <k_sched_lock+0x34>
   202c2:	2394      	movs	r3, #148	; 0x94
   202c4:	4a23      	ldr	r2, [pc, #140]	; (20354 <k_sched_lock+0xac>)
   202c6:	4924      	ldr	r1, [pc, #144]	; (20358 <k_sched_lock+0xb0>)
   202c8:	4824      	ldr	r0, [pc, #144]	; (2035c <k_sched_lock+0xb4>)
   202ca:	f003 feaa 	bl	24022 <assert_print>
   202ce:	4920      	ldr	r1, [pc, #128]	; (20350 <k_sched_lock+0xa8>)
   202d0:	4823      	ldr	r0, [pc, #140]	; (20360 <k_sched_lock+0xb8>)
   202d2:	f003 fea6 	bl	24022 <assert_print>
   202d6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   202d8:	481e      	ldr	r0, [pc, #120]	; (20354 <k_sched_lock+0xac>)
   202da:	e010      	b.n	202fe <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   202dc:	481c      	ldr	r0, [pc, #112]	; (20350 <k_sched_lock+0xa8>)
   202de:	f7fe fca1 	bl	1ec24 <z_spin_lock_set_owner>
   202e2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   202e6:	b163      	cbz	r3, 20302 <k_sched_lock+0x5a>
   202e8:	491e      	ldr	r1, [pc, #120]	; (20364 <k_sched_lock+0xbc>)
   202ea:	23fd      	movs	r3, #253	; 0xfd
   202ec:	4a1e      	ldr	r2, [pc, #120]	; (20368 <k_sched_lock+0xc0>)
   202ee:	481b      	ldr	r0, [pc, #108]	; (2035c <k_sched_lock+0xb4>)
   202f0:	f003 fe97 	bl	24022 <assert_print>
   202f4:	481d      	ldr	r0, [pc, #116]	; (2036c <k_sched_lock+0xc4>)
   202f6:	f003 fe94 	bl	24022 <assert_print>
   202fa:	21fd      	movs	r1, #253	; 0xfd
   202fc:	481a      	ldr	r0, [pc, #104]	; (20368 <k_sched_lock+0xc0>)
   202fe:	f003 fe89 	bl	24014 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   20302:	4b1b      	ldr	r3, [pc, #108]	; (20370 <k_sched_lock+0xc8>)
   20304:	689a      	ldr	r2, [r3, #8]
   20306:	7bd3      	ldrb	r3, [r2, #15]
   20308:	2b01      	cmp	r3, #1
   2030a:	d10a      	bne.n	20322 <k_sched_lock+0x7a>
   2030c:	4919      	ldr	r1, [pc, #100]	; (20374 <k_sched_lock+0xcc>)
   2030e:	23fe      	movs	r3, #254	; 0xfe
   20310:	4a15      	ldr	r2, [pc, #84]	; (20368 <k_sched_lock+0xc0>)
   20312:	4812      	ldr	r0, [pc, #72]	; (2035c <k_sched_lock+0xb4>)
   20314:	f003 fe85 	bl	24022 <assert_print>
   20318:	4814      	ldr	r0, [pc, #80]	; (2036c <k_sched_lock+0xc4>)
   2031a:	f003 fe82 	bl	24022 <assert_print>
   2031e:	21fe      	movs	r1, #254	; 0xfe
   20320:	e7ec      	b.n	202fc <k_sched_lock+0x54>
	--_current->base.sched_locked;
   20322:	3b01      	subs	r3, #1
   20324:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20326:	480a      	ldr	r0, [pc, #40]	; (20350 <k_sched_lock+0xa8>)
   20328:	f7fe fc6e 	bl	1ec08 <z_spin_unlock_valid>
   2032c:	b958      	cbnz	r0, 20346 <k_sched_lock+0x9e>
   2032e:	23c2      	movs	r3, #194	; 0xc2
   20330:	4a08      	ldr	r2, [pc, #32]	; (20354 <k_sched_lock+0xac>)
   20332:	4911      	ldr	r1, [pc, #68]	; (20378 <k_sched_lock+0xd0>)
   20334:	4809      	ldr	r0, [pc, #36]	; (2035c <k_sched_lock+0xb4>)
   20336:	f003 fe74 	bl	24022 <assert_print>
   2033a:	4905      	ldr	r1, [pc, #20]	; (20350 <k_sched_lock+0xa8>)
   2033c:	480f      	ldr	r0, [pc, #60]	; (2037c <k_sched_lock+0xd4>)
   2033e:	f003 fe70 	bl	24022 <assert_print>
   20342:	21c2      	movs	r1, #194	; 0xc2
   20344:	e7c8      	b.n	202d8 <k_sched_lock+0x30>
	__asm__ volatile(
   20346:	f384 8811 	msr	BASEPRI, r4
   2034a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2034e:	bd10      	pop	{r4, pc}
   20350:	2002146c 	.word	0x2002146c
   20354:	0002b32e 	.word	0x0002b32e
   20358:	0002b387 	.word	0x0002b387
   2035c:	0002a669 	.word	0x0002a669
   20360:	0002b39c 	.word	0x0002b39c
   20364:	0002f44b 	.word	0x0002f44b
   20368:	0002f722 	.word	0x0002f722
   2036c:	0002df2c 	.word	0x0002df2c
   20370:	20021424 	.word	0x20021424
   20374:	0002f74d 	.word	0x0002f74d
   20378:	0002b35b 	.word	0x0002b35b
   2037c:	0002b372 	.word	0x0002b372

00020380 <k_sched_unlock>:

void k_sched_unlock(void)
{
   20380:	b510      	push	{r4, lr}
	__asm__ volatile(
   20382:	f04f 0320 	mov.w	r3, #32
   20386:	f3ef 8411 	mrs	r4, BASEPRI
   2038a:	f383 8812 	msr	BASEPRI_MAX, r3
   2038e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20392:	4829      	ldr	r0, [pc, #164]	; (20438 <k_sched_unlock+0xb8>)
   20394:	f7fe fc2a 	bl	1ebec <z_spin_lock_valid>
   20398:	b960      	cbnz	r0, 203b4 <k_sched_unlock+0x34>
   2039a:	2394      	movs	r3, #148	; 0x94
   2039c:	4a27      	ldr	r2, [pc, #156]	; (2043c <k_sched_unlock+0xbc>)
   2039e:	4928      	ldr	r1, [pc, #160]	; (20440 <k_sched_unlock+0xc0>)
   203a0:	4828      	ldr	r0, [pc, #160]	; (20444 <k_sched_unlock+0xc4>)
   203a2:	f003 fe3e 	bl	24022 <assert_print>
   203a6:	4924      	ldr	r1, [pc, #144]	; (20438 <k_sched_unlock+0xb8>)
   203a8:	4827      	ldr	r0, [pc, #156]	; (20448 <k_sched_unlock+0xc8>)
   203aa:	f003 fe3a 	bl	24022 <assert_print>
   203ae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   203b0:	4822      	ldr	r0, [pc, #136]	; (2043c <k_sched_unlock+0xbc>)
   203b2:	e013      	b.n	203dc <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   203b4:	4820      	ldr	r0, [pc, #128]	; (20438 <k_sched_unlock+0xb8>)
   203b6:	f7fe fc35 	bl	1ec24 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   203ba:	4b24      	ldr	r3, [pc, #144]	; (2044c <k_sched_unlock+0xcc>)
   203bc:	689a      	ldr	r2, [r3, #8]
   203be:	7bd3      	ldrb	r3, [r2, #15]
   203c0:	b973      	cbnz	r3, 203e0 <k_sched_unlock+0x60>
   203c2:	4923      	ldr	r1, [pc, #140]	; (20450 <k_sched_unlock+0xd0>)
   203c4:	f240 33e7 	movw	r3, #999	; 0x3e7
   203c8:	4a22      	ldr	r2, [pc, #136]	; (20454 <k_sched_unlock+0xd4>)
   203ca:	481e      	ldr	r0, [pc, #120]	; (20444 <k_sched_unlock+0xc4>)
   203cc:	f003 fe29 	bl	24022 <assert_print>
   203d0:	4821      	ldr	r0, [pc, #132]	; (20458 <k_sched_unlock+0xd8>)
   203d2:	f003 fe26 	bl	24022 <assert_print>
   203d6:	f240 31e7 	movw	r1, #999	; 0x3e7
   203da:	481e      	ldr	r0, [pc, #120]	; (20454 <k_sched_unlock+0xd4>)
   203dc:	f003 fe1a 	bl	24014 <assert_post_action>
   203e0:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   203e4:	b160      	cbz	r0, 20400 <k_sched_unlock+0x80>
   203e6:	491d      	ldr	r1, [pc, #116]	; (2045c <k_sched_unlock+0xdc>)
   203e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   203ec:	4a19      	ldr	r2, [pc, #100]	; (20454 <k_sched_unlock+0xd4>)
   203ee:	4815      	ldr	r0, [pc, #84]	; (20444 <k_sched_unlock+0xc4>)
   203f0:	f003 fe17 	bl	24022 <assert_print>
   203f4:	4818      	ldr	r0, [pc, #96]	; (20458 <k_sched_unlock+0xd8>)
   203f6:	f003 fe14 	bl	24022 <assert_print>
   203fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   203fe:	e7ec      	b.n	203da <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   20400:	3301      	adds	r3, #1
   20402:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   20404:	f7ff fd4e 	bl	1fea4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20408:	480b      	ldr	r0, [pc, #44]	; (20438 <k_sched_unlock+0xb8>)
   2040a:	f7fe fbfd 	bl	1ec08 <z_spin_unlock_valid>
   2040e:	b958      	cbnz	r0, 20428 <k_sched_unlock+0xa8>
   20410:	23c2      	movs	r3, #194	; 0xc2
   20412:	4a0a      	ldr	r2, [pc, #40]	; (2043c <k_sched_unlock+0xbc>)
   20414:	4912      	ldr	r1, [pc, #72]	; (20460 <k_sched_unlock+0xe0>)
   20416:	480b      	ldr	r0, [pc, #44]	; (20444 <k_sched_unlock+0xc4>)
   20418:	f003 fe03 	bl	24022 <assert_print>
   2041c:	4906      	ldr	r1, [pc, #24]	; (20438 <k_sched_unlock+0xb8>)
   2041e:	4811      	ldr	r0, [pc, #68]	; (20464 <k_sched_unlock+0xe4>)
   20420:	f003 fdff 	bl	24022 <assert_print>
   20424:	21c2      	movs	r1, #194	; 0xc2
   20426:	e7c3      	b.n	203b0 <k_sched_unlock+0x30>
	__asm__ volatile(
   20428:	f384 8811 	msr	BASEPRI, r4
   2042c:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   20430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   20434:	f008 b89c 	b.w	28570 <z_reschedule_unlocked>
   20438:	2002146c 	.word	0x2002146c
   2043c:	0002b32e 	.word	0x0002b32e
   20440:	0002b387 	.word	0x0002b387
   20444:	0002a669 	.word	0x0002a669
   20448:	0002b39c 	.word	0x0002b39c
   2044c:	20021424 	.word	0x20021424
   20450:	0002f77e 	.word	0x0002f77e
   20454:	0002f6b8 	.word	0x0002f6b8
   20458:	0002df2c 	.word	0x0002df2c
   2045c:	0002f44b 	.word	0x0002f44b
   20460:	0002b35b 	.word	0x0002b35b
   20464:	0002b372 	.word	0x0002b372

00020468 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   20468:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2046a:	4b0b      	ldr	r3, [pc, #44]	; (20498 <z_priq_dumb_remove+0x30>)
   2046c:	4299      	cmp	r1, r3
   2046e:	d10b      	bne.n	20488 <z_priq_dumb_remove+0x20>
   20470:	490a      	ldr	r1, [pc, #40]	; (2049c <z_priq_dumb_remove+0x34>)
   20472:	480b      	ldr	r0, [pc, #44]	; (204a0 <z_priq_dumb_remove+0x38>)
   20474:	f240 4373 	movw	r3, #1139	; 0x473
   20478:	4a0a      	ldr	r2, [pc, #40]	; (204a4 <z_priq_dumb_remove+0x3c>)
   2047a:	f003 fdd2 	bl	24022 <assert_print>
   2047e:	f240 4173 	movw	r1, #1139	; 0x473
   20482:	4808      	ldr	r0, [pc, #32]	; (204a4 <z_priq_dumb_remove+0x3c>)
   20484:	f003 fdc6 	bl	24014 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   20488:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   2048c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2048e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20490:	2300      	movs	r3, #0
	node->prev = NULL;
   20492:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   20496:	bd08      	pop	{r3, pc}
   20498:	20009b68 	.word	0x20009b68
   2049c:	0002f701 	.word	0x0002f701
   204a0:	0002a669 	.word	0x0002a669
   204a4:	0002f6b8 	.word	0x0002f6b8

000204a8 <move_thread_to_end_of_prio_q>:
{
   204a8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   204aa:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   204ae:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   204b0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   204b2:	7b43      	ldrb	r3, [r0, #13]
   204b4:	da06      	bge.n	204c4 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   204b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   204ba:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   204bc:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   204be:	481d      	ldr	r0, [pc, #116]	; (20534 <move_thread_to_end_of_prio_q+0x8c>)
   204c0:	f7ff ffd2 	bl	20468 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   204c4:	7b63      	ldrb	r3, [r4, #13]
   204c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   204ca:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   204cc:	4b1a      	ldr	r3, [pc, #104]	; (20538 <move_thread_to_end_of_prio_q+0x90>)
   204ce:	429c      	cmp	r4, r3
   204d0:	d109      	bne.n	204e6 <move_thread_to_end_of_prio_q+0x3e>
   204d2:	491a      	ldr	r1, [pc, #104]	; (2053c <move_thread_to_end_of_prio_q+0x94>)
   204d4:	481a      	ldr	r0, [pc, #104]	; (20540 <move_thread_to_end_of_prio_q+0x98>)
   204d6:	23ba      	movs	r3, #186	; 0xba
   204d8:	4a1a      	ldr	r2, [pc, #104]	; (20544 <move_thread_to_end_of_prio_q+0x9c>)
   204da:	f003 fda2 	bl	24022 <assert_print>
   204de:	21ba      	movs	r1, #186	; 0xba
   204e0:	4818      	ldr	r0, [pc, #96]	; (20544 <move_thread_to_end_of_prio_q+0x9c>)
   204e2:	f003 fd97 	bl	24014 <assert_post_action>
	return list->head == list;
   204e6:	4a18      	ldr	r2, [pc, #96]	; (20548 <move_thread_to_end_of_prio_q+0xa0>)
   204e8:	4611      	mov	r1, r2
   204ea:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   204ee:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   204f0:	428b      	cmp	r3, r1
   204f2:	bf08      	it	eq
   204f4:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   204f6:	b923      	cbnz	r3, 20502 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   204f8:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   204fc:	6004      	str	r4, [r0, #0]
	list->tail = node;
   204fe:	6254      	str	r4, [r2, #36]	; 0x24
}
   20500:	e00c      	b.n	2051c <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   20502:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   20506:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2050a:	42b5      	cmp	r5, r6
   2050c:	d00e      	beq.n	2052c <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2050e:	42ae      	cmp	r6, r5
   20510:	dd0c      	ble.n	2052c <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   20512:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   20514:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   20518:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2051a:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   2051c:	6890      	ldr	r0, [r2, #8]
   2051e:	1b03      	subs	r3, r0, r4
   20520:	4258      	negs	r0, r3
   20522:	4158      	adcs	r0, r3
}
   20524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   20528:	f7ff bcbc 	b.w	1fea4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2052c:	4298      	cmp	r0, r3
   2052e:	d0e3      	beq.n	204f8 <move_thread_to_end_of_prio_q+0x50>
   20530:	681b      	ldr	r3, [r3, #0]
   20532:	e7e0      	b.n	204f6 <move_thread_to_end_of_prio_q+0x4e>
   20534:	20021444 	.word	0x20021444
   20538:	20009b68 	.word	0x20009b68
   2053c:	0002f701 	.word	0x0002f701
   20540:	0002a669 	.word	0x0002a669
   20544:	0002f6b8 	.word	0x0002f6b8
   20548:	20021424 	.word	0x20021424

0002054c <z_time_slice>:
{
   2054c:	b570      	push	{r4, r5, r6, lr}
   2054e:	4605      	mov	r5, r0
	__asm__ volatile(
   20550:	f04f 0320 	mov.w	r3, #32
   20554:	f3ef 8611 	mrs	r6, BASEPRI
   20558:	f383 8812 	msr	BASEPRI_MAX, r3
   2055c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20560:	4829      	ldr	r0, [pc, #164]	; (20608 <z_time_slice+0xbc>)
   20562:	f7fe fb43 	bl	1ebec <z_spin_lock_valid>
   20566:	b968      	cbnz	r0, 20584 <z_time_slice+0x38>
   20568:	2394      	movs	r3, #148	; 0x94
   2056a:	4a28      	ldr	r2, [pc, #160]	; (2060c <z_time_slice+0xc0>)
   2056c:	4928      	ldr	r1, [pc, #160]	; (20610 <z_time_slice+0xc4>)
   2056e:	4829      	ldr	r0, [pc, #164]	; (20614 <z_time_slice+0xc8>)
   20570:	f003 fd57 	bl	24022 <assert_print>
   20574:	4924      	ldr	r1, [pc, #144]	; (20608 <z_time_slice+0xbc>)
   20576:	4828      	ldr	r0, [pc, #160]	; (20618 <z_time_slice+0xcc>)
   20578:	f003 fd53 	bl	24022 <assert_print>
   2057c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2057e:	4823      	ldr	r0, [pc, #140]	; (2060c <z_time_slice+0xc0>)
   20580:	f003 fd48 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   20584:	4820      	ldr	r0, [pc, #128]	; (20608 <z_time_slice+0xbc>)
   20586:	f7fe fb4d 	bl	1ec24 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   2058a:	4b24      	ldr	r3, [pc, #144]	; (2061c <z_time_slice+0xd0>)
   2058c:	4a24      	ldr	r2, [pc, #144]	; (20620 <z_time_slice+0xd4>)
   2058e:	689c      	ldr	r4, [r3, #8]
   20590:	6811      	ldr	r1, [r2, #0]
   20592:	428c      	cmp	r4, r1
   20594:	d112      	bne.n	205bc <z_time_slice+0x70>
		z_reset_time_slice(_current);
   20596:	4620      	mov	r0, r4
   20598:	f7ff fc70 	bl	1fe7c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2059c:	481a      	ldr	r0, [pc, #104]	; (20608 <z_time_slice+0xbc>)
   2059e:	f7fe fb33 	bl	1ec08 <z_spin_unlock_valid>
   205a2:	bb58      	cbnz	r0, 205fc <z_time_slice+0xb0>
   205a4:	23c2      	movs	r3, #194	; 0xc2
   205a6:	4a19      	ldr	r2, [pc, #100]	; (2060c <z_time_slice+0xc0>)
   205a8:	491e      	ldr	r1, [pc, #120]	; (20624 <z_time_slice+0xd8>)
   205aa:	481a      	ldr	r0, [pc, #104]	; (20614 <z_time_slice+0xc8>)
   205ac:	f003 fd39 	bl	24022 <assert_print>
   205b0:	4915      	ldr	r1, [pc, #84]	; (20608 <z_time_slice+0xbc>)
   205b2:	481d      	ldr	r0, [pc, #116]	; (20628 <z_time_slice+0xdc>)
   205b4:	f003 fd35 	bl	24022 <assert_print>
   205b8:	21c2      	movs	r1, #194	; 0xc2
   205ba:	e7e0      	b.n	2057e <z_time_slice+0x32>
	pending_current = NULL;
   205bc:	2100      	movs	r1, #0
   205be:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   205c0:	4a1a      	ldr	r2, [pc, #104]	; (2062c <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   205c2:	6812      	ldr	r2, [r2, #0]
   205c4:	b1c2      	cbz	r2, 205f8 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   205c6:	89e2      	ldrh	r2, [r4, #14]
   205c8:	2a7f      	cmp	r2, #127	; 0x7f
   205ca:	d815      	bhi.n	205f8 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   205cc:	7b62      	ldrb	r2, [r4, #13]
   205ce:	06d2      	lsls	r2, r2, #27
   205d0:	d112      	bne.n	205f8 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   205d2:	4a17      	ldr	r2, [pc, #92]	; (20630 <z_time_slice+0xe4>)
   205d4:	f994 100e 	ldrsb.w	r1, [r4, #14]
   205d8:	6812      	ldr	r2, [r2, #0]
   205da:	4291      	cmp	r1, r2
   205dc:	db0c      	blt.n	205f8 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   205de:	4a15      	ldr	r2, [pc, #84]	; (20634 <z_time_slice+0xe8>)
   205e0:	4294      	cmp	r4, r2
   205e2:	d009      	beq.n	205f8 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   205e4:	691a      	ldr	r2, [r3, #16]
   205e6:	42aa      	cmp	r2, r5
   205e8:	dc03      	bgt.n	205f2 <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   205ea:	4620      	mov	r0, r4
   205ec:	f7ff ff5c 	bl	204a8 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   205f0:	e7d1      	b.n	20596 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   205f2:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   205f4:	611a      	str	r2, [r3, #16]
   205f6:	e7d1      	b.n	2059c <z_time_slice+0x50>
   205f8:	2200      	movs	r2, #0
   205fa:	e7fb      	b.n	205f4 <z_time_slice+0xa8>
	__asm__ volatile(
   205fc:	f386 8811 	msr	BASEPRI, r6
   20600:	f3bf 8f6f 	isb	sy
}
   20604:	bd70      	pop	{r4, r5, r6, pc}
   20606:	bf00      	nop
   20608:	2002146c 	.word	0x2002146c
   2060c:	0002b32e 	.word	0x0002b32e
   20610:	0002b387 	.word	0x0002b387
   20614:	0002a669 	.word	0x0002a669
   20618:	0002b39c 	.word	0x0002b39c
   2061c:	20021424 	.word	0x20021424
   20620:	20021460 	.word	0x20021460
   20624:	0002b35b 	.word	0x0002b35b
   20628:	0002b372 	.word	0x0002b372
   2062c:	20021468 	.word	0x20021468
   20630:	20021464 	.word	0x20021464
   20634:	20009b68 	.word	0x20009b68

00020638 <unready_thread>:
{
   20638:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2063a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2063e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   20640:	2a00      	cmp	r2, #0
   20642:	7b43      	ldrb	r3, [r0, #13]
   20644:	da06      	bge.n	20654 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2064a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2064c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2064e:	4806      	ldr	r0, [pc, #24]	; (20668 <unready_thread+0x30>)
   20650:	f7ff ff0a 	bl	20468 <z_priq_dumb_remove>
	update_cache(thread == _current);
   20654:	4b05      	ldr	r3, [pc, #20]	; (2066c <unready_thread+0x34>)
   20656:	6898      	ldr	r0, [r3, #8]
   20658:	1b03      	subs	r3, r0, r4
   2065a:	4258      	negs	r0, r3
   2065c:	4158      	adcs	r0, r3
}
   2065e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   20662:	f7ff bc1f 	b.w	1fea4 <update_cache>
   20666:	bf00      	nop
   20668:	20021444 	.word	0x20021444
   2066c:	20021424 	.word	0x20021424

00020670 <add_to_waitq_locked>:
{
   20670:	b538      	push	{r3, r4, r5, lr}
   20672:	4604      	mov	r4, r0
   20674:	460d      	mov	r5, r1
	unready_thread(thread);
   20676:	f7ff ffdf 	bl	20638 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2067a:	7b63      	ldrb	r3, [r4, #13]
   2067c:	f043 0302 	orr.w	r3, r3, #2
   20680:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   20682:	b34d      	cbz	r5, 206d8 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20684:	4b15      	ldr	r3, [pc, #84]	; (206dc <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   20686:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20688:	429c      	cmp	r4, r3
   2068a:	d109      	bne.n	206a0 <add_to_waitq_locked+0x30>
   2068c:	4914      	ldr	r1, [pc, #80]	; (206e0 <add_to_waitq_locked+0x70>)
   2068e:	4815      	ldr	r0, [pc, #84]	; (206e4 <add_to_waitq_locked+0x74>)
   20690:	23ba      	movs	r3, #186	; 0xba
   20692:	4a15      	ldr	r2, [pc, #84]	; (206e8 <add_to_waitq_locked+0x78>)
   20694:	f003 fcc5 	bl	24022 <assert_print>
   20698:	21ba      	movs	r1, #186	; 0xba
   2069a:	4813      	ldr	r0, [pc, #76]	; (206e8 <add_to_waitq_locked+0x78>)
   2069c:	f003 fcba 	bl	24014 <assert_post_action>
	return list->head == list;
   206a0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   206a2:	429d      	cmp	r5, r3
   206a4:	d109      	bne.n	206ba <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   206a6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   206a8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   206ac:	601c      	str	r4, [r3, #0]
	list->tail = node;
   206ae:	606c      	str	r4, [r5, #4]
}
   206b0:	e012      	b.n	206d8 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   206b2:	686a      	ldr	r2, [r5, #4]
   206b4:	4293      	cmp	r3, r2
   206b6:	d0f6      	beq.n	206a6 <add_to_waitq_locked+0x36>
   206b8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   206ba:	2b00      	cmp	r3, #0
   206bc:	d0f3      	beq.n	206a6 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   206be:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   206c2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   206c6:	428a      	cmp	r2, r1
   206c8:	d0f3      	beq.n	206b2 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   206ca:	4291      	cmp	r1, r2
   206cc:	ddf1      	ble.n	206b2 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   206ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   206d0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   206d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   206d6:	605c      	str	r4, [r3, #4]
}
   206d8:	bd38      	pop	{r3, r4, r5, pc}
   206da:	bf00      	nop
   206dc:	20009b68 	.word	0x20009b68
   206e0:	0002f701 	.word	0x0002f701
   206e4:	0002a669 	.word	0x0002a669
   206e8:	0002f6b8 	.word	0x0002f6b8

000206ec <pend_locked>:
{
   206ec:	b570      	push	{r4, r5, r6, lr}
   206ee:	4615      	mov	r5, r2
   206f0:	461c      	mov	r4, r3
   206f2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   206f4:	f7ff ffbc 	bl	20670 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   206f8:	f1b4 3fff 	cmp.w	r4, #4294967295
   206fc:	bf08      	it	eq
   206fe:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   20702:	d008      	beq.n	20716 <pend_locked+0x2a>
   20704:	462a      	mov	r2, r5
   20706:	4623      	mov	r3, r4
   20708:	f106 0018 	add.w	r0, r6, #24
   2070c:	4902      	ldr	r1, [pc, #8]	; (20718 <pend_locked+0x2c>)
}
   2070e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20712:	f000 bdf1 	b.w	212f8 <z_add_timeout>
   20716:	bd70      	pop	{r4, r5, r6, pc}
   20718:	00020ad1 	.word	0x00020ad1

0002071c <z_pend_curr>:
{
   2071c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20720:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   20724:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 207dc <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   20728:	4c2d      	ldr	r4, [pc, #180]	; (207e0 <z_pend_curr+0xc4>)
{
   2072a:	4617      	mov	r7, r2
	pending_current = _current;
   2072c:	4b2d      	ldr	r3, [pc, #180]	; (207e4 <z_pend_curr+0xc8>)
   2072e:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   20732:	42a0      	cmp	r0, r4
{
   20734:	4605      	mov	r5, r0
   20736:	460e      	mov	r6, r1
	pending_current = _current;
   20738:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2073a:	d10b      	bne.n	20754 <z_pend_curr+0x38>
   2073c:	492a      	ldr	r1, [pc, #168]	; (207e8 <z_pend_curr+0xcc>)
   2073e:	482b      	ldr	r0, [pc, #172]	; (207ec <z_pend_curr+0xd0>)
   20740:	f240 334e 	movw	r3, #846	; 0x34e
   20744:	4a2a      	ldr	r2, [pc, #168]	; (207f0 <z_pend_curr+0xd4>)
   20746:	f003 fc6c 	bl	24022 <assert_print>
   2074a:	f240 314e 	movw	r1, #846	; 0x34e
   2074e:	4828      	ldr	r0, [pc, #160]	; (207f0 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20750:	f003 fc60 	bl	24014 <assert_post_action>
	__asm__ volatile(
   20754:	f04f 0220 	mov.w	r2, #32
   20758:	f3ef 8311 	mrs	r3, BASEPRI
   2075c:	f382 8812 	msr	BASEPRI_MAX, r2
   20760:	f3bf 8f6f 	isb	sy
   20764:	4620      	mov	r0, r4
   20766:	f7fe fa41 	bl	1ebec <z_spin_lock_valid>
   2076a:	b960      	cbnz	r0, 20786 <z_pend_curr+0x6a>
   2076c:	2394      	movs	r3, #148	; 0x94
   2076e:	4a21      	ldr	r2, [pc, #132]	; (207f4 <z_pend_curr+0xd8>)
   20770:	4921      	ldr	r1, [pc, #132]	; (207f8 <z_pend_curr+0xdc>)
   20772:	481e      	ldr	r0, [pc, #120]	; (207ec <z_pend_curr+0xd0>)
   20774:	f003 fc55 	bl	24022 <assert_print>
   20778:	4621      	mov	r1, r4
   2077a:	4820      	ldr	r0, [pc, #128]	; (207fc <z_pend_curr+0xe0>)
   2077c:	f003 fc51 	bl	24022 <assert_print>
   20780:	2194      	movs	r1, #148	; 0x94
   20782:	481c      	ldr	r0, [pc, #112]	; (207f4 <z_pend_curr+0xd8>)
   20784:	e7e4      	b.n	20750 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   20786:	4620      	mov	r0, r4
   20788:	f7fe fa4c 	bl	1ec24 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   2078c:	f8da 0008 	ldr.w	r0, [sl, #8]
   20790:	4642      	mov	r2, r8
   20792:	464b      	mov	r3, r9
   20794:	4639      	mov	r1, r7
   20796:	f7ff ffa9 	bl	206ec <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2079a:	4628      	mov	r0, r5
   2079c:	f7fe fa34 	bl	1ec08 <z_spin_unlock_valid>
   207a0:	b958      	cbnz	r0, 207ba <z_pend_curr+0x9e>
   207a2:	4917      	ldr	r1, [pc, #92]	; (20800 <z_pend_curr+0xe4>)
   207a4:	23e1      	movs	r3, #225	; 0xe1
   207a6:	4a13      	ldr	r2, [pc, #76]	; (207f4 <z_pend_curr+0xd8>)
   207a8:	4810      	ldr	r0, [pc, #64]	; (207ec <z_pend_curr+0xd0>)
   207aa:	f003 fc3a 	bl	24022 <assert_print>
   207ae:	4629      	mov	r1, r5
   207b0:	4814      	ldr	r0, [pc, #80]	; (20804 <z_pend_curr+0xe8>)
   207b2:	f003 fc36 	bl	24022 <assert_print>
   207b6:	21e1      	movs	r1, #225	; 0xe1
   207b8:	e7e3      	b.n	20782 <z_pend_curr+0x66>
   207ba:	4620      	mov	r0, r4
   207bc:	f7fe fa24 	bl	1ec08 <z_spin_unlock_valid>
   207c0:	b938      	cbnz	r0, 207d2 <z_pend_curr+0xb6>
   207c2:	490f      	ldr	r1, [pc, #60]	; (20800 <z_pend_curr+0xe4>)
   207c4:	23e1      	movs	r3, #225	; 0xe1
   207c6:	4a0b      	ldr	r2, [pc, #44]	; (207f4 <z_pend_curr+0xd8>)
   207c8:	4808      	ldr	r0, [pc, #32]	; (207ec <z_pend_curr+0xd0>)
   207ca:	f003 fc2a 	bl	24022 <assert_print>
   207ce:	4621      	mov	r1, r4
   207d0:	e7ee      	b.n	207b0 <z_pend_curr+0x94>
   207d2:	4630      	mov	r0, r6
}
   207d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   207d8:	f7ee be9e 	b.w	f518 <arch_swap>
   207dc:	20021424 	.word	0x20021424
   207e0:	2002146c 	.word	0x2002146c
   207e4:	20021460 	.word	0x20021460
   207e8:	0002f7af 	.word	0x0002f7af
   207ec:	0002a669 	.word	0x0002a669
   207f0:	0002f6b8 	.word	0x0002f6b8
   207f4:	0002b32e 	.word	0x0002b32e
   207f8:	0002b387 	.word	0x0002b387
   207fc:	0002b39c 	.word	0x0002b39c
   20800:	0002b35b 	.word	0x0002b35b
   20804:	0002b372 	.word	0x0002b372

00020808 <z_set_prio>:
{
   20808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2080c:	4604      	mov	r4, r0
   2080e:	460e      	mov	r6, r1
   20810:	f04f 0320 	mov.w	r3, #32
   20814:	f3ef 8911 	mrs	r9, BASEPRI
   20818:	f383 8812 	msr	BASEPRI_MAX, r3
   2081c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20820:	4837      	ldr	r0, [pc, #220]	; (20900 <z_set_prio+0xf8>)
   20822:	f7fe f9e3 	bl	1ebec <z_spin_lock_valid>
   20826:	4607      	mov	r7, r0
   20828:	b960      	cbnz	r0, 20844 <z_set_prio+0x3c>
   2082a:	2394      	movs	r3, #148	; 0x94
   2082c:	4a35      	ldr	r2, [pc, #212]	; (20904 <z_set_prio+0xfc>)
   2082e:	4936      	ldr	r1, [pc, #216]	; (20908 <z_set_prio+0x100>)
   20830:	4836      	ldr	r0, [pc, #216]	; (2090c <z_set_prio+0x104>)
   20832:	f003 fbf6 	bl	24022 <assert_print>
   20836:	4932      	ldr	r1, [pc, #200]	; (20900 <z_set_prio+0xf8>)
   20838:	4835      	ldr	r0, [pc, #212]	; (20910 <z_set_prio+0x108>)
   2083a:	f003 fbf2 	bl	24022 <assert_print>
   2083e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20840:	4830      	ldr	r0, [pc, #192]	; (20904 <z_set_prio+0xfc>)
   20842:	e021      	b.n	20888 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   20844:	482e      	ldr	r0, [pc, #184]	; (20900 <z_set_prio+0xf8>)
   20846:	f7fe f9ed 	bl	1ec24 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   2084a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2084c:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2084e:	06da      	lsls	r2, r3, #27
   20850:	d11c      	bne.n	2088c <z_set_prio+0x84>
	return node->next != NULL;
   20852:	69a5      	ldr	r5, [r4, #24]
   20854:	b9d5      	cbnz	r5, 2088c <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   20856:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 20914 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2085a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2085e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20860:	4621      	mov	r1, r4
   20862:	4640      	mov	r0, r8
   20864:	f7ff fe00 	bl	20468 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   20868:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2086a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2086c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20870:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20872:	4b29      	ldr	r3, [pc, #164]	; (20918 <z_set_prio+0x110>)
   20874:	429c      	cmp	r4, r3
   20876:	d11b      	bne.n	208b0 <z_set_prio+0xa8>
   20878:	4928      	ldr	r1, [pc, #160]	; (2091c <z_set_prio+0x114>)
   2087a:	4824      	ldr	r0, [pc, #144]	; (2090c <z_set_prio+0x104>)
   2087c:	23ba      	movs	r3, #186	; 0xba
   2087e:	4a28      	ldr	r2, [pc, #160]	; (20920 <z_set_prio+0x118>)
   20880:	f003 fbcf 	bl	24022 <assert_print>
   20884:	21ba      	movs	r1, #186	; 0xba
   20886:	4826      	ldr	r0, [pc, #152]	; (20920 <z_set_prio+0x118>)
   20888:	f003 fbc4 	bl	24014 <assert_post_action>
   2088c:	2700      	movs	r7, #0
			thread->base.prio = prio;
   2088e:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20890:	481b      	ldr	r0, [pc, #108]	; (20900 <z_set_prio+0xf8>)
   20892:	f7fe f9b9 	bl	1ec08 <z_spin_unlock_valid>
   20896:	bb58      	cbnz	r0, 208f0 <z_set_prio+0xe8>
   20898:	23c2      	movs	r3, #194	; 0xc2
   2089a:	4a1a      	ldr	r2, [pc, #104]	; (20904 <z_set_prio+0xfc>)
   2089c:	4921      	ldr	r1, [pc, #132]	; (20924 <z_set_prio+0x11c>)
   2089e:	481b      	ldr	r0, [pc, #108]	; (2090c <z_set_prio+0x104>)
   208a0:	f003 fbbf 	bl	24022 <assert_print>
   208a4:	4916      	ldr	r1, [pc, #88]	; (20900 <z_set_prio+0xf8>)
   208a6:	4820      	ldr	r0, [pc, #128]	; (20928 <z_set_prio+0x120>)
   208a8:	f003 fbbb 	bl	24022 <assert_print>
   208ac:	21c2      	movs	r1, #194	; 0xc2
   208ae:	e7c7      	b.n	20840 <z_set_prio+0x38>
	return list->head == list;
   208b0:	4643      	mov	r3, r8
   208b2:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   208b6:	4542      	cmp	r2, r8
   208b8:	bf18      	it	ne
   208ba:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   208bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   208be:	b925      	cbnz	r5, 208ca <z_set_prio+0xc2>
	node->prev = tail;
   208c0:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   208c4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   208c6:	625c      	str	r4, [r3, #36]	; 0x24
}
   208c8:	e00a      	b.n	208e0 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   208ca:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   208ce:	428e      	cmp	r6, r1
   208d0:	d00a      	beq.n	208e8 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   208d2:	42b1      	cmp	r1, r6
   208d4:	dd08      	ble.n	208e8 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   208d6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   208d8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   208dc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   208de:	606c      	str	r4, [r5, #4]
			update_cache(1);
   208e0:	2001      	movs	r0, #1
   208e2:	f7ff fadf 	bl	1fea4 <update_cache>
   208e6:	e7d3      	b.n	20890 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   208e8:	42aa      	cmp	r2, r5
   208ea:	d0e9      	beq.n	208c0 <z_set_prio+0xb8>
   208ec:	682d      	ldr	r5, [r5, #0]
   208ee:	e7e6      	b.n	208be <z_set_prio+0xb6>
	__asm__ volatile(
   208f0:	f389 8811 	msr	BASEPRI, r9
   208f4:	f3bf 8f6f 	isb	sy
}
   208f8:	4638      	mov	r0, r7
   208fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   208fe:	bf00      	nop
   20900:	2002146c 	.word	0x2002146c
   20904:	0002b32e 	.word	0x0002b32e
   20908:	0002b387 	.word	0x0002b387
   2090c:	0002a669 	.word	0x0002a669
   20910:	0002b39c 	.word	0x0002b39c
   20914:	20021444 	.word	0x20021444
   20918:	20009b68 	.word	0x20009b68
   2091c:	0002f701 	.word	0x0002f701
   20920:	0002f6b8 	.word	0x0002f6b8
   20924:	0002b35b 	.word	0x0002b35b
   20928:	0002b372 	.word	0x0002b372

0002092c <z_impl_k_thread_suspend>:
{
   2092c:	b570      	push	{r4, r5, r6, lr}
   2092e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   20930:	3018      	adds	r0, #24
   20932:	f000 fda7 	bl	21484 <z_abort_timeout>
	__asm__ volatile(
   20936:	f04f 0320 	mov.w	r3, #32
   2093a:	f3ef 8611 	mrs	r6, BASEPRI
   2093e:	f383 8812 	msr	BASEPRI_MAX, r3
   20942:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20946:	4824      	ldr	r0, [pc, #144]	; (209d8 <z_impl_k_thread_suspend+0xac>)
   20948:	f7fe f950 	bl	1ebec <z_spin_lock_valid>
   2094c:	b968      	cbnz	r0, 2096a <z_impl_k_thread_suspend+0x3e>
   2094e:	2394      	movs	r3, #148	; 0x94
   20950:	4a22      	ldr	r2, [pc, #136]	; (209dc <z_impl_k_thread_suspend+0xb0>)
   20952:	4923      	ldr	r1, [pc, #140]	; (209e0 <z_impl_k_thread_suspend+0xb4>)
   20954:	4823      	ldr	r0, [pc, #140]	; (209e4 <z_impl_k_thread_suspend+0xb8>)
   20956:	f003 fb64 	bl	24022 <assert_print>
   2095a:	491f      	ldr	r1, [pc, #124]	; (209d8 <z_impl_k_thread_suspend+0xac>)
   2095c:	4822      	ldr	r0, [pc, #136]	; (209e8 <z_impl_k_thread_suspend+0xbc>)
   2095e:	f003 fb60 	bl	24022 <assert_print>
   20962:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20964:	481d      	ldr	r0, [pc, #116]	; (209dc <z_impl_k_thread_suspend+0xb0>)
   20966:	f003 fb55 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   2096a:	481b      	ldr	r0, [pc, #108]	; (209d8 <z_impl_k_thread_suspend+0xac>)
   2096c:	f7fe f95a 	bl	1ec24 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   20970:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   20974:	7b63      	ldrb	r3, [r4, #13]
   20976:	2a00      	cmp	r2, #0
   20978:	da06      	bge.n	20988 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2097a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2097e:	4621      	mov	r1, r4
   20980:	481a      	ldr	r0, [pc, #104]	; (209ec <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20982:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20984:	f7ff fd70 	bl	20468 <z_priq_dumb_remove>
		update_cache(thread == _current);
   20988:	4d19      	ldr	r5, [pc, #100]	; (209f0 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2098a:	7b63      	ldrb	r3, [r4, #13]
   2098c:	68a8      	ldr	r0, [r5, #8]
   2098e:	f043 0310 	orr.w	r3, r3, #16
   20992:	7363      	strb	r3, [r4, #13]
   20994:	1b03      	subs	r3, r0, r4
   20996:	4258      	negs	r0, r3
   20998:	4158      	adcs	r0, r3
   2099a:	f7ff fa83 	bl	1fea4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2099e:	480e      	ldr	r0, [pc, #56]	; (209d8 <z_impl_k_thread_suspend+0xac>)
   209a0:	f7fe f932 	bl	1ec08 <z_spin_unlock_valid>
   209a4:	b958      	cbnz	r0, 209be <z_impl_k_thread_suspend+0x92>
   209a6:	23c2      	movs	r3, #194	; 0xc2
   209a8:	4a0c      	ldr	r2, [pc, #48]	; (209dc <z_impl_k_thread_suspend+0xb0>)
   209aa:	4912      	ldr	r1, [pc, #72]	; (209f4 <z_impl_k_thread_suspend+0xc8>)
   209ac:	480d      	ldr	r0, [pc, #52]	; (209e4 <z_impl_k_thread_suspend+0xb8>)
   209ae:	f003 fb38 	bl	24022 <assert_print>
   209b2:	4909      	ldr	r1, [pc, #36]	; (209d8 <z_impl_k_thread_suspend+0xac>)
   209b4:	4810      	ldr	r0, [pc, #64]	; (209f8 <z_impl_k_thread_suspend+0xcc>)
   209b6:	f003 fb34 	bl	24022 <assert_print>
   209ba:	21c2      	movs	r1, #194	; 0xc2
   209bc:	e7d2      	b.n	20964 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   209be:	f386 8811 	msr	BASEPRI, r6
   209c2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   209c6:	68ab      	ldr	r3, [r5, #8]
   209c8:	42a3      	cmp	r3, r4
   209ca:	d103      	bne.n	209d4 <z_impl_k_thread_suspend+0xa8>
}
   209cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   209d0:	f007 bdce 	b.w	28570 <z_reschedule_unlocked>
}
   209d4:	bd70      	pop	{r4, r5, r6, pc}
   209d6:	bf00      	nop
   209d8:	2002146c 	.word	0x2002146c
   209dc:	0002b32e 	.word	0x0002b32e
   209e0:	0002b387 	.word	0x0002b387
   209e4:	0002a669 	.word	0x0002a669
   209e8:	0002b39c 	.word	0x0002b39c
   209ec:	20021444 	.word	0x20021444
   209f0:	20021424 	.word	0x20021424
   209f4:	0002b35b 	.word	0x0002b35b
   209f8:	0002b372 	.word	0x0002b372

000209fc <unpend_thread_no_timeout>:
{
   209fc:	b510      	push	{r4, lr}
   209fe:	4604      	mov	r4, r0
   20a00:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   20a02:	b958      	cbnz	r0, 20a1c <unpend_thread_no_timeout+0x20>
   20a04:	490a      	ldr	r1, [pc, #40]	; (20a30 <unpend_thread_no_timeout+0x34>)
   20a06:	480b      	ldr	r0, [pc, #44]	; (20a34 <unpend_thread_no_timeout+0x38>)
   20a08:	f240 23d6 	movw	r3, #726	; 0x2d6
   20a0c:	4a0a      	ldr	r2, [pc, #40]	; (20a38 <unpend_thread_no_timeout+0x3c>)
   20a0e:	f003 fb08 	bl	24022 <assert_print>
   20a12:	f240 21d6 	movw	r1, #726	; 0x2d6
   20a16:	4808      	ldr	r0, [pc, #32]	; (20a38 <unpend_thread_no_timeout+0x3c>)
   20a18:	f003 fafc 	bl	24014 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   20a1c:	4621      	mov	r1, r4
   20a1e:	f7ff fd23 	bl	20468 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20a22:	7b63      	ldrb	r3, [r4, #13]
   20a24:	f023 0302 	bic.w	r3, r3, #2
   20a28:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   20a2a:	2300      	movs	r3, #0
   20a2c:	60a3      	str	r3, [r4, #8]
}
   20a2e:	bd10      	pop	{r4, pc}
   20a30:	0002f7e6 	.word	0x0002f7e6
   20a34:	0002a669 	.word	0x0002a669
   20a38:	0002f6b8 	.word	0x0002f6b8

00020a3c <z_unpend_thread>:
{
   20a3c:	b538      	push	{r3, r4, r5, lr}
   20a3e:	4604      	mov	r4, r0
	__asm__ volatile(
   20a40:	f04f 0320 	mov.w	r3, #32
   20a44:	f3ef 8511 	mrs	r5, BASEPRI
   20a48:	f383 8812 	msr	BASEPRI_MAX, r3
   20a4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a50:	4818      	ldr	r0, [pc, #96]	; (20ab4 <z_unpend_thread+0x78>)
   20a52:	f7fe f8cb 	bl	1ebec <z_spin_lock_valid>
   20a56:	b968      	cbnz	r0, 20a74 <z_unpend_thread+0x38>
   20a58:	2394      	movs	r3, #148	; 0x94
   20a5a:	4a17      	ldr	r2, [pc, #92]	; (20ab8 <z_unpend_thread+0x7c>)
   20a5c:	4917      	ldr	r1, [pc, #92]	; (20abc <z_unpend_thread+0x80>)
   20a5e:	4818      	ldr	r0, [pc, #96]	; (20ac0 <z_unpend_thread+0x84>)
   20a60:	f003 fadf 	bl	24022 <assert_print>
   20a64:	4913      	ldr	r1, [pc, #76]	; (20ab4 <z_unpend_thread+0x78>)
   20a66:	4817      	ldr	r0, [pc, #92]	; (20ac4 <z_unpend_thread+0x88>)
   20a68:	f003 fadb 	bl	24022 <assert_print>
   20a6c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a6e:	4812      	ldr	r0, [pc, #72]	; (20ab8 <z_unpend_thread+0x7c>)
   20a70:	f003 fad0 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   20a74:	480f      	ldr	r0, [pc, #60]	; (20ab4 <z_unpend_thread+0x78>)
   20a76:	f7fe f8d5 	bl	1ec24 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   20a7a:	4620      	mov	r0, r4
   20a7c:	f7ff ffbe 	bl	209fc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a80:	480c      	ldr	r0, [pc, #48]	; (20ab4 <z_unpend_thread+0x78>)
   20a82:	f7fe f8c1 	bl	1ec08 <z_spin_unlock_valid>
   20a86:	b958      	cbnz	r0, 20aa0 <z_unpend_thread+0x64>
   20a88:	23c2      	movs	r3, #194	; 0xc2
   20a8a:	4a0b      	ldr	r2, [pc, #44]	; (20ab8 <z_unpend_thread+0x7c>)
   20a8c:	490e      	ldr	r1, [pc, #56]	; (20ac8 <z_unpend_thread+0x8c>)
   20a8e:	480c      	ldr	r0, [pc, #48]	; (20ac0 <z_unpend_thread+0x84>)
   20a90:	f003 fac7 	bl	24022 <assert_print>
   20a94:	4907      	ldr	r1, [pc, #28]	; (20ab4 <z_unpend_thread+0x78>)
   20a96:	480d      	ldr	r0, [pc, #52]	; (20acc <z_unpend_thread+0x90>)
   20a98:	f003 fac3 	bl	24022 <assert_print>
   20a9c:	21c2      	movs	r1, #194	; 0xc2
   20a9e:	e7e6      	b.n	20a6e <z_unpend_thread+0x32>
	__asm__ volatile(
   20aa0:	f385 8811 	msr	BASEPRI, r5
   20aa4:	f3bf 8f6f 	isb	sy
   20aa8:	f104 0018 	add.w	r0, r4, #24
}
   20aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20ab0:	f000 bce8 	b.w	21484 <z_abort_timeout>
   20ab4:	2002146c 	.word	0x2002146c
   20ab8:	0002b32e 	.word	0x0002b32e
   20abc:	0002b387 	.word	0x0002b387
   20ac0:	0002a669 	.word	0x0002a669
   20ac4:	0002b39c 	.word	0x0002b39c
   20ac8:	0002b35b 	.word	0x0002b35b
   20acc:	0002b372 	.word	0x0002b372

00020ad0 <z_thread_timeout>:
{
   20ad0:	b570      	push	{r4, r5, r6, lr}
   20ad2:	4604      	mov	r4, r0
	__asm__ volatile(
   20ad4:	f04f 0320 	mov.w	r3, #32
   20ad8:	f3ef 8611 	mrs	r6, BASEPRI
   20adc:	f383 8812 	msr	BASEPRI_MAX, r3
   20ae0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ae4:	481f      	ldr	r0, [pc, #124]	; (20b64 <z_thread_timeout+0x94>)
   20ae6:	f7fe f881 	bl	1ebec <z_spin_lock_valid>
   20aea:	b968      	cbnz	r0, 20b08 <z_thread_timeout+0x38>
   20aec:	2394      	movs	r3, #148	; 0x94
   20aee:	4a1e      	ldr	r2, [pc, #120]	; (20b68 <z_thread_timeout+0x98>)
   20af0:	491e      	ldr	r1, [pc, #120]	; (20b6c <z_thread_timeout+0x9c>)
   20af2:	481f      	ldr	r0, [pc, #124]	; (20b70 <z_thread_timeout+0xa0>)
   20af4:	f003 fa95 	bl	24022 <assert_print>
   20af8:	491a      	ldr	r1, [pc, #104]	; (20b64 <z_thread_timeout+0x94>)
   20afa:	481e      	ldr	r0, [pc, #120]	; (20b74 <z_thread_timeout+0xa4>)
   20afc:	f003 fa91 	bl	24022 <assert_print>
   20b00:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b02:	4819      	ldr	r0, [pc, #100]	; (20b68 <z_thread_timeout+0x98>)
   20b04:	f003 fa86 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   20b08:	4816      	ldr	r0, [pc, #88]	; (20b64 <z_thread_timeout+0x94>)
   20b0a:	f7fe f88b 	bl	1ec24 <z_spin_lock_set_owner>
		if (!killed) {
   20b0e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   20b12:	f013 0f28 	tst.w	r3, #40	; 0x28
   20b16:	d110      	bne.n	20b3a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   20b18:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   20b1c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   20b20:	b113      	cbz	r3, 20b28 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   20b22:	4628      	mov	r0, r5
   20b24:	f7ff ff6a 	bl	209fc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   20b28:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   20b2c:	4628      	mov	r0, r5
   20b2e:	f023 0314 	bic.w	r3, r3, #20
   20b32:	f804 3c0b 	strb.w	r3, [r4, #-11]
   20b36:	f7ff f9e9 	bl	1ff0c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b3a:	480a      	ldr	r0, [pc, #40]	; (20b64 <z_thread_timeout+0x94>)
   20b3c:	f7fe f864 	bl	1ec08 <z_spin_unlock_valid>
   20b40:	b958      	cbnz	r0, 20b5a <z_thread_timeout+0x8a>
   20b42:	23c2      	movs	r3, #194	; 0xc2
   20b44:	4a08      	ldr	r2, [pc, #32]	; (20b68 <z_thread_timeout+0x98>)
   20b46:	490c      	ldr	r1, [pc, #48]	; (20b78 <z_thread_timeout+0xa8>)
   20b48:	4809      	ldr	r0, [pc, #36]	; (20b70 <z_thread_timeout+0xa0>)
   20b4a:	f003 fa6a 	bl	24022 <assert_print>
   20b4e:	4905      	ldr	r1, [pc, #20]	; (20b64 <z_thread_timeout+0x94>)
   20b50:	480a      	ldr	r0, [pc, #40]	; (20b7c <z_thread_timeout+0xac>)
   20b52:	f003 fa66 	bl	24022 <assert_print>
   20b56:	21c2      	movs	r1, #194	; 0xc2
   20b58:	e7d3      	b.n	20b02 <z_thread_timeout+0x32>
	__asm__ volatile(
   20b5a:	f386 8811 	msr	BASEPRI, r6
   20b5e:	f3bf 8f6f 	isb	sy
}
   20b62:	bd70      	pop	{r4, r5, r6, pc}
   20b64:	2002146c 	.word	0x2002146c
   20b68:	0002b32e 	.word	0x0002b32e
   20b6c:	0002b387 	.word	0x0002b387
   20b70:	0002a669 	.word	0x0002a669
   20b74:	0002b39c 	.word	0x0002b39c
   20b78:	0002b35b 	.word	0x0002b35b
   20b7c:	0002b372 	.word	0x0002b372

00020b80 <z_unpend1_no_timeout>:
{
   20b80:	b570      	push	{r4, r5, r6, lr}
   20b82:	4605      	mov	r5, r0
	__asm__ volatile(
   20b84:	f04f 0320 	mov.w	r3, #32
   20b88:	f3ef 8611 	mrs	r6, BASEPRI
   20b8c:	f383 8812 	msr	BASEPRI_MAX, r3
   20b90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b94:	4819      	ldr	r0, [pc, #100]	; (20bfc <z_unpend1_no_timeout+0x7c>)
   20b96:	f7fe f829 	bl	1ebec <z_spin_lock_valid>
   20b9a:	b968      	cbnz	r0, 20bb8 <z_unpend1_no_timeout+0x38>
   20b9c:	2394      	movs	r3, #148	; 0x94
   20b9e:	4a18      	ldr	r2, [pc, #96]	; (20c00 <z_unpend1_no_timeout+0x80>)
   20ba0:	4918      	ldr	r1, [pc, #96]	; (20c04 <z_unpend1_no_timeout+0x84>)
   20ba2:	4819      	ldr	r0, [pc, #100]	; (20c08 <z_unpend1_no_timeout+0x88>)
   20ba4:	f003 fa3d 	bl	24022 <assert_print>
   20ba8:	4914      	ldr	r1, [pc, #80]	; (20bfc <z_unpend1_no_timeout+0x7c>)
   20baa:	4818      	ldr	r0, [pc, #96]	; (20c0c <z_unpend1_no_timeout+0x8c>)
   20bac:	f003 fa39 	bl	24022 <assert_print>
   20bb0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bb2:	4813      	ldr	r0, [pc, #76]	; (20c00 <z_unpend1_no_timeout+0x80>)
   20bb4:	f003 fa2e 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   20bb8:	4810      	ldr	r0, [pc, #64]	; (20bfc <z_unpend1_no_timeout+0x7c>)
   20bba:	f7fe f833 	bl	1ec24 <z_spin_lock_set_owner>
	return list->head == list;
   20bbe:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20bc0:	42a5      	cmp	r5, r4
   20bc2:	d013      	beq.n	20bec <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   20bc4:	b114      	cbz	r4, 20bcc <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   20bc6:	4620      	mov	r0, r4
   20bc8:	f7ff ff18 	bl	209fc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bcc:	480b      	ldr	r0, [pc, #44]	; (20bfc <z_unpend1_no_timeout+0x7c>)
   20bce:	f7fe f81b 	bl	1ec08 <z_spin_unlock_valid>
   20bd2:	b968      	cbnz	r0, 20bf0 <z_unpend1_no_timeout+0x70>
   20bd4:	23c2      	movs	r3, #194	; 0xc2
   20bd6:	4a0a      	ldr	r2, [pc, #40]	; (20c00 <z_unpend1_no_timeout+0x80>)
   20bd8:	490d      	ldr	r1, [pc, #52]	; (20c10 <z_unpend1_no_timeout+0x90>)
   20bda:	480b      	ldr	r0, [pc, #44]	; (20c08 <z_unpend1_no_timeout+0x88>)
   20bdc:	f003 fa21 	bl	24022 <assert_print>
   20be0:	4906      	ldr	r1, [pc, #24]	; (20bfc <z_unpend1_no_timeout+0x7c>)
   20be2:	480c      	ldr	r0, [pc, #48]	; (20c14 <z_unpend1_no_timeout+0x94>)
   20be4:	f003 fa1d 	bl	24022 <assert_print>
   20be8:	21c2      	movs	r1, #194	; 0xc2
   20bea:	e7e2      	b.n	20bb2 <z_unpend1_no_timeout+0x32>
   20bec:	2400      	movs	r4, #0
   20bee:	e7ed      	b.n	20bcc <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   20bf0:	f386 8811 	msr	BASEPRI, r6
   20bf4:	f3bf 8f6f 	isb	sy
}
   20bf8:	4620      	mov	r0, r4
   20bfa:	bd70      	pop	{r4, r5, r6, pc}
   20bfc:	2002146c 	.word	0x2002146c
   20c00:	0002b32e 	.word	0x0002b32e
   20c04:	0002b387 	.word	0x0002b387
   20c08:	0002a669 	.word	0x0002a669
   20c0c:	0002b39c 	.word	0x0002b39c
   20c10:	0002b35b 	.word	0x0002b35b
   20c14:	0002b372 	.word	0x0002b372

00020c18 <z_unpend_first_thread>:
{
   20c18:	b570      	push	{r4, r5, r6, lr}
   20c1a:	4605      	mov	r5, r0
	__asm__ volatile(
   20c1c:	f04f 0320 	mov.w	r3, #32
   20c20:	f3ef 8611 	mrs	r6, BASEPRI
   20c24:	f383 8812 	msr	BASEPRI_MAX, r3
   20c28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c2c:	481b      	ldr	r0, [pc, #108]	; (20c9c <z_unpend_first_thread+0x84>)
   20c2e:	f7fd ffdd 	bl	1ebec <z_spin_lock_valid>
   20c32:	b968      	cbnz	r0, 20c50 <z_unpend_first_thread+0x38>
   20c34:	2394      	movs	r3, #148	; 0x94
   20c36:	4a1a      	ldr	r2, [pc, #104]	; (20ca0 <z_unpend_first_thread+0x88>)
   20c38:	491a      	ldr	r1, [pc, #104]	; (20ca4 <z_unpend_first_thread+0x8c>)
   20c3a:	481b      	ldr	r0, [pc, #108]	; (20ca8 <z_unpend_first_thread+0x90>)
   20c3c:	f003 f9f1 	bl	24022 <assert_print>
   20c40:	4916      	ldr	r1, [pc, #88]	; (20c9c <z_unpend_first_thread+0x84>)
   20c42:	481a      	ldr	r0, [pc, #104]	; (20cac <z_unpend_first_thread+0x94>)
   20c44:	f003 f9ed 	bl	24022 <assert_print>
   20c48:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c4a:	4815      	ldr	r0, [pc, #84]	; (20ca0 <z_unpend_first_thread+0x88>)
   20c4c:	f003 f9e2 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   20c50:	4812      	ldr	r0, [pc, #72]	; (20c9c <z_unpend_first_thread+0x84>)
   20c52:	f7fd ffe7 	bl	1ec24 <z_spin_lock_set_owner>
	return list->head == list;
   20c56:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20c58:	42a5      	cmp	r5, r4
   20c5a:	d017      	beq.n	20c8c <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   20c5c:	b134      	cbz	r4, 20c6c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   20c5e:	4620      	mov	r0, r4
   20c60:	f7ff fecc 	bl	209fc <unpend_thread_no_timeout>
   20c64:	f104 0018 	add.w	r0, r4, #24
   20c68:	f000 fc0c 	bl	21484 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c6c:	480b      	ldr	r0, [pc, #44]	; (20c9c <z_unpend_first_thread+0x84>)
   20c6e:	f7fd ffcb 	bl	1ec08 <z_spin_unlock_valid>
   20c72:	b968      	cbnz	r0, 20c90 <z_unpend_first_thread+0x78>
   20c74:	23c2      	movs	r3, #194	; 0xc2
   20c76:	4a0a      	ldr	r2, [pc, #40]	; (20ca0 <z_unpend_first_thread+0x88>)
   20c78:	490d      	ldr	r1, [pc, #52]	; (20cb0 <z_unpend_first_thread+0x98>)
   20c7a:	480b      	ldr	r0, [pc, #44]	; (20ca8 <z_unpend_first_thread+0x90>)
   20c7c:	f003 f9d1 	bl	24022 <assert_print>
   20c80:	4906      	ldr	r1, [pc, #24]	; (20c9c <z_unpend_first_thread+0x84>)
   20c82:	480c      	ldr	r0, [pc, #48]	; (20cb4 <z_unpend_first_thread+0x9c>)
   20c84:	f003 f9cd 	bl	24022 <assert_print>
   20c88:	21c2      	movs	r1, #194	; 0xc2
   20c8a:	e7de      	b.n	20c4a <z_unpend_first_thread+0x32>
   20c8c:	2400      	movs	r4, #0
   20c8e:	e7ed      	b.n	20c6c <z_unpend_first_thread+0x54>
	__asm__ volatile(
   20c90:	f386 8811 	msr	BASEPRI, r6
   20c94:	f3bf 8f6f 	isb	sy
}
   20c98:	4620      	mov	r0, r4
   20c9a:	bd70      	pop	{r4, r5, r6, pc}
   20c9c:	2002146c 	.word	0x2002146c
   20ca0:	0002b32e 	.word	0x0002b32e
   20ca4:	0002b387 	.word	0x0002b387
   20ca8:	0002a669 	.word	0x0002a669
   20cac:	0002b39c 	.word	0x0002b39c
   20cb0:	0002b35b 	.word	0x0002b35b
   20cb4:	0002b372 	.word	0x0002b372

00020cb8 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   20cb8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   20cba:	4b04      	ldr	r3, [pc, #16]	; (20ccc <z_sched_init+0x14>)
   20cbc:	4608      	mov	r0, r1
   20cbe:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   20cc2:	e9c3 2208 	strd	r2, r2, [r3, #32]
   20cc6:	f7ff b96b 	b.w	1ffa0 <k_sched_time_slice_set>
   20cca:	bf00      	nop
   20ccc:	20021424 	.word	0x20021424

00020cd0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   20cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cd2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   20cd6:	b16b      	cbz	r3, 20cf4 <z_impl_k_yield+0x24>
   20cd8:	493c      	ldr	r1, [pc, #240]	; (20dcc <z_impl_k_yield+0xfc>)
   20cda:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   20cde:	4a3c      	ldr	r2, [pc, #240]	; (20dd0 <z_impl_k_yield+0x100>)
   20ce0:	483c      	ldr	r0, [pc, #240]	; (20dd4 <z_impl_k_yield+0x104>)
   20ce2:	f003 f99e 	bl	24022 <assert_print>
   20ce6:	483c      	ldr	r0, [pc, #240]	; (20dd8 <z_impl_k_yield+0x108>)
   20ce8:	f003 f99b 	bl	24022 <assert_print>
   20cec:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20cf0:	4837      	ldr	r0, [pc, #220]	; (20dd0 <z_impl_k_yield+0x100>)
   20cf2:	e017      	b.n	20d24 <z_impl_k_yield+0x54>
	__asm__ volatile(
   20cf4:	f04f 0320 	mov.w	r3, #32
   20cf8:	f3ef 8611 	mrs	r6, BASEPRI
   20cfc:	f383 8812 	msr	BASEPRI_MAX, r3
   20d00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d04:	4835      	ldr	r0, [pc, #212]	; (20ddc <z_impl_k_yield+0x10c>)
   20d06:	f7fd ff71 	bl	1ebec <z_spin_lock_valid>
   20d0a:	b968      	cbnz	r0, 20d28 <z_impl_k_yield+0x58>
   20d0c:	2394      	movs	r3, #148	; 0x94
   20d0e:	4a34      	ldr	r2, [pc, #208]	; (20de0 <z_impl_k_yield+0x110>)
   20d10:	4934      	ldr	r1, [pc, #208]	; (20de4 <z_impl_k_yield+0x114>)
   20d12:	4830      	ldr	r0, [pc, #192]	; (20dd4 <z_impl_k_yield+0x104>)
   20d14:	f003 f985 	bl	24022 <assert_print>
   20d18:	4930      	ldr	r1, [pc, #192]	; (20ddc <z_impl_k_yield+0x10c>)
   20d1a:	4833      	ldr	r0, [pc, #204]	; (20de8 <z_impl_k_yield+0x118>)
   20d1c:	f003 f981 	bl	24022 <assert_print>
   20d20:	2194      	movs	r1, #148	; 0x94
   20d22:	482f      	ldr	r0, [pc, #188]	; (20de0 <z_impl_k_yield+0x110>)
   20d24:	f003 f976 	bl	24014 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   20d28:	4c30      	ldr	r4, [pc, #192]	; (20dec <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   20d2a:	482c      	ldr	r0, [pc, #176]	; (20ddc <z_impl_k_yield+0x10c>)
   20d2c:	f7fd ff7a 	bl	1ec24 <z_spin_lock_set_owner>
   20d30:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   20d32:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20d36:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20d38:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20d3e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20d40:	f7ff fb92 	bl	20468 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   20d44:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   20d46:	7b5a      	ldrb	r2, [r3, #13]
   20d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20d4c:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20d4e:	4a28      	ldr	r2, [pc, #160]	; (20df0 <z_impl_k_yield+0x120>)
   20d50:	4293      	cmp	r3, r2
   20d52:	d107      	bne.n	20d64 <z_impl_k_yield+0x94>
   20d54:	4927      	ldr	r1, [pc, #156]	; (20df4 <z_impl_k_yield+0x124>)
   20d56:	23ba      	movs	r3, #186	; 0xba
   20d58:	4a1d      	ldr	r2, [pc, #116]	; (20dd0 <z_impl_k_yield+0x100>)
   20d5a:	481e      	ldr	r0, [pc, #120]	; (20dd4 <z_impl_k_yield+0x104>)
   20d5c:	f003 f961 	bl	24022 <assert_print>
   20d60:	21ba      	movs	r1, #186	; 0xba
   20d62:	e7c5      	b.n	20cf0 <z_impl_k_yield+0x20>
	return list->head == list;
   20d64:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   20d66:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20d68:	42aa      	cmp	r2, r5
   20d6a:	bf08      	it	eq
   20d6c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20d6e:	b922      	cbnz	r2, 20d7a <z_impl_k_yield+0xaa>
	node->prev = tail;
   20d70:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   20d74:	600b      	str	r3, [r1, #0]
	list->tail = node;
   20d76:	6263      	str	r3, [r4, #36]	; 0x24
}
   20d78:	e00c      	b.n	20d94 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   20d7a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   20d7e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   20d82:	42b8      	cmp	r0, r7
   20d84:	d019      	beq.n	20dba <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   20d86:	4287      	cmp	r7, r0
   20d88:	dd17      	ble.n	20dba <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   20d8a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20d8c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   20d90:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   20d92:	6053      	str	r3, [r2, #4]
	update_cache(1);
   20d94:	2001      	movs	r0, #1
   20d96:	f7ff f885 	bl	1fea4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d9a:	4810      	ldr	r0, [pc, #64]	; (20ddc <z_impl_k_yield+0x10c>)
   20d9c:	f7fd ff34 	bl	1ec08 <z_spin_unlock_valid>
   20da0:	b978      	cbnz	r0, 20dc2 <z_impl_k_yield+0xf2>
   20da2:	23e1      	movs	r3, #225	; 0xe1
   20da4:	4a0e      	ldr	r2, [pc, #56]	; (20de0 <z_impl_k_yield+0x110>)
   20da6:	4914      	ldr	r1, [pc, #80]	; (20df8 <z_impl_k_yield+0x128>)
   20da8:	480a      	ldr	r0, [pc, #40]	; (20dd4 <z_impl_k_yield+0x104>)
   20daa:	f003 f93a 	bl	24022 <assert_print>
   20dae:	490b      	ldr	r1, [pc, #44]	; (20ddc <z_impl_k_yield+0x10c>)
   20db0:	4812      	ldr	r0, [pc, #72]	; (20dfc <z_impl_k_yield+0x12c>)
   20db2:	f003 f936 	bl	24022 <assert_print>
   20db6:	21e1      	movs	r1, #225	; 0xe1
   20db8:	e7b3      	b.n	20d22 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   20dba:	428a      	cmp	r2, r1
   20dbc:	d0d8      	beq.n	20d70 <z_impl_k_yield+0xa0>
   20dbe:	6812      	ldr	r2, [r2, #0]
   20dc0:	e7d5      	b.n	20d6e <z_impl_k_yield+0x9e>
   20dc2:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   20dc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20dc8:	f7ee bba6 	b.w	f518 <arch_swap>
   20dcc:	0002f44b 	.word	0x0002f44b
   20dd0:	0002f6b8 	.word	0x0002f6b8
   20dd4:	0002a669 	.word	0x0002a669
   20dd8:	0002df2c 	.word	0x0002df2c
   20ddc:	2002146c 	.word	0x2002146c
   20de0:	0002b32e 	.word	0x0002b32e
   20de4:	0002b387 	.word	0x0002b387
   20de8:	0002b39c 	.word	0x0002b39c
   20dec:	20021424 	.word	0x20021424
   20df0:	20009b68 	.word	0x20009b68
   20df4:	0002f701 	.word	0x0002f701
   20df8:	0002b35b 	.word	0x0002b35b
   20dfc:	0002b372 	.word	0x0002b372

00020e00 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   20e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e04:	4605      	mov	r5, r0
   20e06:	460e      	mov	r6, r1
   20e08:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   20e0c:	b16b      	cbz	r3, 20e2a <z_tick_sleep+0x2a>
   20e0e:	493f      	ldr	r1, [pc, #252]	; (20f0c <z_tick_sleep+0x10c>)
   20e10:	f240 538c 	movw	r3, #1420	; 0x58c
   20e14:	4a3e      	ldr	r2, [pc, #248]	; (20f10 <z_tick_sleep+0x110>)
   20e16:	483f      	ldr	r0, [pc, #252]	; (20f14 <z_tick_sleep+0x114>)
   20e18:	f003 f903 	bl	24022 <assert_print>
   20e1c:	483e      	ldr	r0, [pc, #248]	; (20f18 <z_tick_sleep+0x118>)
   20e1e:	f003 f900 	bl	24022 <assert_print>
   20e22:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   20e26:	483a      	ldr	r0, [pc, #232]	; (20f10 <z_tick_sleep+0x110>)
   20e28:	e025      	b.n	20e76 <z_tick_sleep+0x76>
	if (ticks == 0) {
   20e2a:	ea50 0301 	orrs.w	r3, r0, r1
   20e2e:	d103      	bne.n	20e38 <z_tick_sleep+0x38>
	z_impl_k_yield();
   20e30:	f7ff ff4e 	bl	20cd0 <z_impl_k_yield>
		return 0;
   20e34:	2000      	movs	r0, #0
   20e36:	e066      	b.n	20f06 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   20e38:	1c82      	adds	r2, r0, #2
   20e3a:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   20e3e:	db1c      	blt.n	20e7a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   20e40:	f007 fbb0 	bl	285a4 <sys_clock_tick_get_32>
   20e44:	1944      	adds	r4, r0, r5
   20e46:	f04f 0320 	mov.w	r3, #32
   20e4a:	f3ef 8811 	mrs	r8, BASEPRI
   20e4e:	f383 8812 	msr	BASEPRI_MAX, r3
   20e52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e56:	4831      	ldr	r0, [pc, #196]	; (20f1c <z_tick_sleep+0x11c>)
   20e58:	f7fd fec8 	bl	1ebec <z_spin_lock_valid>
   20e5c:	b988      	cbnz	r0, 20e82 <z_tick_sleep+0x82>
   20e5e:	2394      	movs	r3, #148	; 0x94
   20e60:	4a2f      	ldr	r2, [pc, #188]	; (20f20 <z_tick_sleep+0x120>)
   20e62:	4930      	ldr	r1, [pc, #192]	; (20f24 <z_tick_sleep+0x124>)
   20e64:	482b      	ldr	r0, [pc, #172]	; (20f14 <z_tick_sleep+0x114>)
   20e66:	f003 f8dc 	bl	24022 <assert_print>
   20e6a:	492c      	ldr	r1, [pc, #176]	; (20f1c <z_tick_sleep+0x11c>)
   20e6c:	482e      	ldr	r0, [pc, #184]	; (20f28 <z_tick_sleep+0x128>)
   20e6e:	f003 f8d8 	bl	24022 <assert_print>
   20e72:	2194      	movs	r1, #148	; 0x94
   20e74:	482a      	ldr	r0, [pc, #168]	; (20f20 <z_tick_sleep+0x120>)
   20e76:	f003 f8cd 	bl	24014 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   20e7a:	f06f 0401 	mvn.w	r4, #1
   20e7e:	1a24      	subs	r4, r4, r0
   20e80:	e7e1      	b.n	20e46 <z_tick_sleep+0x46>
	pending_current = _current;
   20e82:	4f2a      	ldr	r7, [pc, #168]	; (20f2c <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   20e84:	4825      	ldr	r0, [pc, #148]	; (20f1c <z_tick_sleep+0x11c>)
   20e86:	f7fd fecd 	bl	1ec24 <z_spin_lock_set_owner>
   20e8a:	68b8      	ldr	r0, [r7, #8]
   20e8c:	4b28      	ldr	r3, [pc, #160]	; (20f30 <z_tick_sleep+0x130>)
   20e8e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   20e90:	f7ff fbd2 	bl	20638 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   20e94:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   20e96:	462a      	mov	r2, r5
   20e98:	4633      	mov	r3, r6
   20e9a:	3018      	adds	r0, #24
   20e9c:	4925      	ldr	r1, [pc, #148]	; (20f34 <z_tick_sleep+0x134>)
   20e9e:	f000 fa2b 	bl	212f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   20ea2:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ea4:	481d      	ldr	r0, [pc, #116]	; (20f1c <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20ea6:	7b53      	ldrb	r3, [r2, #13]
   20ea8:	f043 0310 	orr.w	r3, r3, #16
   20eac:	7353      	strb	r3, [r2, #13]
   20eae:	f7fd feab 	bl	1ec08 <z_spin_unlock_valid>
   20eb2:	b958      	cbnz	r0, 20ecc <z_tick_sleep+0xcc>
   20eb4:	23e1      	movs	r3, #225	; 0xe1
   20eb6:	4a1a      	ldr	r2, [pc, #104]	; (20f20 <z_tick_sleep+0x120>)
   20eb8:	491f      	ldr	r1, [pc, #124]	; (20f38 <z_tick_sleep+0x138>)
   20eba:	4816      	ldr	r0, [pc, #88]	; (20f14 <z_tick_sleep+0x114>)
   20ebc:	f003 f8b1 	bl	24022 <assert_print>
   20ec0:	4916      	ldr	r1, [pc, #88]	; (20f1c <z_tick_sleep+0x11c>)
   20ec2:	481e      	ldr	r0, [pc, #120]	; (20f3c <z_tick_sleep+0x13c>)
   20ec4:	f003 f8ad 	bl	24022 <assert_print>
   20ec8:	21e1      	movs	r1, #225	; 0xe1
   20eca:	e7d3      	b.n	20e74 <z_tick_sleep+0x74>
   20ecc:	4640      	mov	r0, r8
   20ece:	f7ee fb23 	bl	f518 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   20ed2:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   20ed4:	7b5b      	ldrb	r3, [r3, #13]
   20ed6:	06db      	lsls	r3, r3, #27
   20ed8:	d50c      	bpl.n	20ef4 <z_tick_sleep+0xf4>
   20eda:	4919      	ldr	r1, [pc, #100]	; (20f40 <z_tick_sleep+0x140>)
   20edc:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   20ee0:	4a0b      	ldr	r2, [pc, #44]	; (20f10 <z_tick_sleep+0x110>)
   20ee2:	480c      	ldr	r0, [pc, #48]	; (20f14 <z_tick_sleep+0x114>)
   20ee4:	f003 f89d 	bl	24022 <assert_print>
   20ee8:	480b      	ldr	r0, [pc, #44]	; (20f18 <z_tick_sleep+0x118>)
   20eea:	f003 f89a 	bl	24022 <assert_print>
   20eee:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   20ef2:	e798      	b.n	20e26 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   20ef4:	f007 fb56 	bl	285a4 <sys_clock_tick_get_32>
   20ef8:	1a20      	subs	r0, r4, r0
   20efa:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   20efe:	2801      	cmp	r0, #1
   20f00:	f173 0300 	sbcs.w	r3, r3, #0
   20f04:	db96      	blt.n	20e34 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   20f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20f0a:	bf00      	nop
   20f0c:	0002f44b 	.word	0x0002f44b
   20f10:	0002f6b8 	.word	0x0002f6b8
   20f14:	0002a669 	.word	0x0002a669
   20f18:	0002df2c 	.word	0x0002df2c
   20f1c:	2002146c 	.word	0x2002146c
   20f20:	0002b32e 	.word	0x0002b32e
   20f24:	0002b387 	.word	0x0002b387
   20f28:	0002b39c 	.word	0x0002b39c
   20f2c:	20021424 	.word	0x20021424
   20f30:	20021460 	.word	0x20021460
   20f34:	00020ad1 	.word	0x00020ad1
   20f38:	0002b35b 	.word	0x0002b35b
   20f3c:	0002b372 	.word	0x0002b372
   20f40:	0002f7fd 	.word	0x0002f7fd

00020f44 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   20f44:	b508      	push	{r3, lr}
   20f46:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   20f4a:	b173      	cbz	r3, 20f6a <z_impl_k_sleep+0x26>
   20f4c:	4912      	ldr	r1, [pc, #72]	; (20f98 <z_impl_k_sleep+0x54>)
   20f4e:	f240 53b7 	movw	r3, #1463	; 0x5b7
   20f52:	4a12      	ldr	r2, [pc, #72]	; (20f9c <z_impl_k_sleep+0x58>)
   20f54:	4812      	ldr	r0, [pc, #72]	; (20fa0 <z_impl_k_sleep+0x5c>)
   20f56:	f003 f864 	bl	24022 <assert_print>
   20f5a:	4812      	ldr	r0, [pc, #72]	; (20fa4 <z_impl_k_sleep+0x60>)
   20f5c:	f003 f861 	bl	24022 <assert_print>
   20f60:	f240 51b7 	movw	r1, #1463	; 0x5b7
   20f64:	480d      	ldr	r0, [pc, #52]	; (20f9c <z_impl_k_sleep+0x58>)
   20f66:	f003 f855 	bl	24014 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20f6a:	f1b1 3fff 	cmp.w	r1, #4294967295
   20f6e:	bf08      	it	eq
   20f70:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   20f74:	d106      	bne.n	20f84 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   20f76:	4b0c      	ldr	r3, [pc, #48]	; (20fa8 <z_impl_k_sleep+0x64>)
   20f78:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   20f7a:	f7ff fcd7 	bl	2092c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   20f7e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   20f82:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   20f84:	f7ff ff3c 	bl	20e00 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   20f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20f8c:	fb80 0303 	smull	r0, r3, r0, r3
   20f90:	0bc0      	lsrs	r0, r0, #15
   20f92:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   20f96:	e7f4      	b.n	20f82 <z_impl_k_sleep+0x3e>
   20f98:	0002f44b 	.word	0x0002f44b
   20f9c:	0002f6b8 	.word	0x0002f6b8
   20fa0:	0002a669 	.word	0x0002a669
   20fa4:	0002df2c 	.word	0x0002df2c
   20fa8:	20021424 	.word	0x20021424

00020fac <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   20fac:	4b01      	ldr	r3, [pc, #4]	; (20fb4 <z_impl_z_current_get+0x8>)
   20fae:	6898      	ldr	r0, [r3, #8]
   20fb0:	4770      	bx	lr
   20fb2:	bf00      	nop
   20fb4:	20021424 	.word	0x20021424

00020fb8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   20fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20fbc:	4604      	mov	r4, r0
   20fbe:	f04f 0320 	mov.w	r3, #32
   20fc2:	f3ef 8611 	mrs	r6, BASEPRI
   20fc6:	f383 8812 	msr	BASEPRI_MAX, r3
   20fca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20fce:	4851      	ldr	r0, [pc, #324]	; (21114 <z_thread_abort+0x15c>)
   20fd0:	f7fd fe0c 	bl	1ebec <z_spin_lock_valid>
   20fd4:	b968      	cbnz	r0, 20ff2 <z_thread_abort+0x3a>
   20fd6:	2394      	movs	r3, #148	; 0x94
   20fd8:	4a4f      	ldr	r2, [pc, #316]	; (21118 <z_thread_abort+0x160>)
   20fda:	4950      	ldr	r1, [pc, #320]	; (2111c <z_thread_abort+0x164>)
   20fdc:	4850      	ldr	r0, [pc, #320]	; (21120 <z_thread_abort+0x168>)
   20fde:	f003 f820 	bl	24022 <assert_print>
   20fe2:	494c      	ldr	r1, [pc, #304]	; (21114 <z_thread_abort+0x15c>)
   20fe4:	484f      	ldr	r0, [pc, #316]	; (21124 <z_thread_abort+0x16c>)
   20fe6:	f003 f81c 	bl	24022 <assert_print>
   20fea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20fec:	484a      	ldr	r0, [pc, #296]	; (21118 <z_thread_abort+0x160>)
   20fee:	f003 f811 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ff2:	4848      	ldr	r0, [pc, #288]	; (21114 <z_thread_abort+0x15c>)
   20ff4:	f7fd fe16 	bl	1ec24 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   20ff8:	7b23      	ldrb	r3, [r4, #12]
   20ffa:	07d9      	lsls	r1, r3, #31
   20ffc:	d522      	bpl.n	21044 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ffe:	4845      	ldr	r0, [pc, #276]	; (21114 <z_thread_abort+0x15c>)
   21000:	f7fd fe02 	bl	1ec08 <z_spin_unlock_valid>
   21004:	b958      	cbnz	r0, 2101e <z_thread_abort+0x66>
   21006:	23c2      	movs	r3, #194	; 0xc2
   21008:	4a43      	ldr	r2, [pc, #268]	; (21118 <z_thread_abort+0x160>)
   2100a:	4947      	ldr	r1, [pc, #284]	; (21128 <z_thread_abort+0x170>)
   2100c:	4844      	ldr	r0, [pc, #272]	; (21120 <z_thread_abort+0x168>)
   2100e:	f003 f808 	bl	24022 <assert_print>
   21012:	4940      	ldr	r1, [pc, #256]	; (21114 <z_thread_abort+0x15c>)
   21014:	4845      	ldr	r0, [pc, #276]	; (2112c <z_thread_abort+0x174>)
   21016:	f003 f804 	bl	24022 <assert_print>
   2101a:	21c2      	movs	r1, #194	; 0xc2
   2101c:	e7e6      	b.n	20fec <z_thread_abort+0x34>
	__asm__ volatile(
   2101e:	f386 8811 	msr	BASEPRI, r6
   21022:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   21026:	f240 63c3 	movw	r3, #1731	; 0x6c3
   2102a:	4a41      	ldr	r2, [pc, #260]	; (21130 <z_thread_abort+0x178>)
   2102c:	4941      	ldr	r1, [pc, #260]	; (21134 <z_thread_abort+0x17c>)
   2102e:	483c      	ldr	r0, [pc, #240]	; (21120 <z_thread_abort+0x168>)
   21030:	f002 fff7 	bl	24022 <assert_print>
   21034:	4621      	mov	r1, r4
   21036:	4840      	ldr	r0, [pc, #256]	; (21138 <z_thread_abort+0x180>)
   21038:	f002 fff3 	bl	24022 <assert_print>
   2103c:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   21040:	483b      	ldr	r0, [pc, #236]	; (21130 <z_thread_abort+0x178>)
   21042:	e7d4      	b.n	20fee <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   21044:	7b63      	ldrb	r3, [r4, #13]
   21046:	071a      	lsls	r2, r3, #28
   21048:	d50a      	bpl.n	21060 <z_thread_abort+0xa8>
   2104a:	4832      	ldr	r0, [pc, #200]	; (21114 <z_thread_abort+0x15c>)
   2104c:	f7fd fddc 	bl	1ec08 <z_spin_unlock_valid>
   21050:	2800      	cmp	r0, #0
   21052:	d0d8      	beq.n	21006 <z_thread_abort+0x4e>
   21054:	f386 8811 	msr	BASEPRI, r6
   21058:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21060:	f023 0220 	bic.w	r2, r3, #32
   21064:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   21068:	09d2      	lsrs	r2, r2, #7
   2106a:	d12c      	bne.n	210c6 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2106c:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   2106e:	68a3      	ldr	r3, [r4, #8]
   21070:	b113      	cbz	r3, 21078 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   21072:	4620      	mov	r0, r4
   21074:	f7ff fcc2 	bl	209fc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   21078:	f104 0018 	add.w	r0, r4, #24
   2107c:	f000 fa02 	bl	21484 <z_abort_timeout>
   21080:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21084:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   21088:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2108a:	42bd      	cmp	r5, r7
   2108c:	d000      	beq.n	21090 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2108e:	bb25      	cbnz	r5, 210da <z_thread_abort+0x122>
		update_cache(1);
   21090:	2001      	movs	r0, #1
   21092:	f7fe ff07 	bl	1fea4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   21096:	4b29      	ldr	r3, [pc, #164]	; (2113c <z_thread_abort+0x184>)
   21098:	689b      	ldr	r3, [r3, #8]
   2109a:	42a3      	cmp	r3, r4
   2109c:	d1d5      	bne.n	2104a <z_thread_abort+0x92>
   2109e:	f3ef 8305 	mrs	r3, IPSR
   210a2:	2b00      	cmp	r3, #0
   210a4:	d1d1      	bne.n	2104a <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210a6:	481b      	ldr	r0, [pc, #108]	; (21114 <z_thread_abort+0x15c>)
   210a8:	f7fd fdae 	bl	1ec08 <z_spin_unlock_valid>
   210ac:	bb10      	cbnz	r0, 210f4 <z_thread_abort+0x13c>
   210ae:	23e1      	movs	r3, #225	; 0xe1
   210b0:	4a19      	ldr	r2, [pc, #100]	; (21118 <z_thread_abort+0x160>)
   210b2:	491d      	ldr	r1, [pc, #116]	; (21128 <z_thread_abort+0x170>)
   210b4:	481a      	ldr	r0, [pc, #104]	; (21120 <z_thread_abort+0x168>)
   210b6:	f002 ffb4 	bl	24022 <assert_print>
   210ba:	4916      	ldr	r1, [pc, #88]	; (21114 <z_thread_abort+0x15c>)
   210bc:	481b      	ldr	r0, [pc, #108]	; (2112c <z_thread_abort+0x174>)
   210be:	f002 ffb0 	bl	24022 <assert_print>
   210c2:	21e1      	movs	r1, #225	; 0xe1
   210c4:	e792      	b.n	20fec <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   210c6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   210ca:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   210ce:	4621      	mov	r1, r4
   210d0:	481b      	ldr	r0, [pc, #108]	; (21140 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   210d2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   210d4:	f7ff f9c8 	bl	20468 <z_priq_dumb_remove>
}
   210d8:	e7c9      	b.n	2106e <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   210da:	4628      	mov	r0, r5
   210dc:	f7ff fc8e 	bl	209fc <unpend_thread_no_timeout>
   210e0:	f105 0018 	add.w	r0, r5, #24
   210e4:	f000 f9ce 	bl	21484 <z_abort_timeout>
		ready_thread(thread);
   210e8:	4628      	mov	r0, r5
   210ea:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   210ee:	f7fe ff0d 	bl	1ff0c <ready_thread>
   210f2:	e7c9      	b.n	21088 <z_thread_abort+0xd0>
   210f4:	4630      	mov	r0, r6
   210f6:	f7ee fa0f 	bl	f518 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   210fa:	490e      	ldr	r1, [pc, #56]	; (21134 <z_thread_abort+0x17c>)
   210fc:	f240 63f2 	movw	r3, #1778	; 0x6f2
   21100:	4a0b      	ldr	r2, [pc, #44]	; (21130 <z_thread_abort+0x178>)
   21102:	4807      	ldr	r0, [pc, #28]	; (21120 <z_thread_abort+0x168>)
   21104:	f002 ff8d 	bl	24022 <assert_print>
   21108:	480e      	ldr	r0, [pc, #56]	; (21144 <z_thread_abort+0x18c>)
   2110a:	f002 ff8a 	bl	24022 <assert_print>
   2110e:	f240 61f2 	movw	r1, #1778	; 0x6f2
   21112:	e795      	b.n	21040 <z_thread_abort+0x88>
   21114:	2002146c 	.word	0x2002146c
   21118:	0002b32e 	.word	0x0002b32e
   2111c:	0002b387 	.word	0x0002b387
   21120:	0002a669 	.word	0x0002a669
   21124:	0002b39c 	.word	0x0002b39c
   21128:	0002b35b 	.word	0x0002b35b
   2112c:	0002b372 	.word	0x0002b372
   21130:	0002f6b8 	.word	0x0002f6b8
   21134:	0002fb7c 	.word	0x0002fb7c
   21138:	0002f83d 	.word	0x0002f83d
   2113c:	20021424 	.word	0x20021424
   21140:	20021444 	.word	0x20021444
   21144:	0002f85c 	.word	0x0002f85c

00021148 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   21148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2114c:	4606      	mov	r6, r0
   2114e:	4688      	mov	r8, r1
   21150:	4617      	mov	r7, r2
	__asm__ volatile(
   21152:	f04f 0320 	mov.w	r3, #32
   21156:	f3ef 8911 	mrs	r9, BASEPRI
   2115a:	f383 8812 	msr	BASEPRI_MAX, r3
   2115e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21162:	4821      	ldr	r0, [pc, #132]	; (211e8 <z_sched_wake+0xa0>)
   21164:	f7fd fd42 	bl	1ebec <z_spin_lock_valid>
   21168:	4605      	mov	r5, r0
   2116a:	b968      	cbnz	r0, 21188 <z_sched_wake+0x40>
   2116c:	2394      	movs	r3, #148	; 0x94
   2116e:	4a1f      	ldr	r2, [pc, #124]	; (211ec <z_sched_wake+0xa4>)
   21170:	491f      	ldr	r1, [pc, #124]	; (211f0 <z_sched_wake+0xa8>)
   21172:	4820      	ldr	r0, [pc, #128]	; (211f4 <z_sched_wake+0xac>)
   21174:	f002 ff55 	bl	24022 <assert_print>
   21178:	491b      	ldr	r1, [pc, #108]	; (211e8 <z_sched_wake+0xa0>)
   2117a:	481f      	ldr	r0, [pc, #124]	; (211f8 <z_sched_wake+0xb0>)
   2117c:	f002 ff51 	bl	24022 <assert_print>
   21180:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21182:	481a      	ldr	r0, [pc, #104]	; (211ec <z_sched_wake+0xa4>)
   21184:	f002 ff46 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   21188:	4817      	ldr	r0, [pc, #92]	; (211e8 <z_sched_wake+0xa0>)
   2118a:	f7fd fd4b 	bl	1ec24 <z_spin_lock_set_owner>
	return list->head == list;
   2118e:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21190:	42a6      	cmp	r6, r4
   21192:	d01d      	beq.n	211d0 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   21194:	b1f4      	cbz	r4, 211d4 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   21196:	4620      	mov	r0, r4
   21198:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2119c:	6167      	str	r7, [r4, #20]
   2119e:	f7ff fc2d 	bl	209fc <unpend_thread_no_timeout>
   211a2:	f104 0018 	add.w	r0, r4, #24
   211a6:	f000 f96d 	bl	21484 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   211aa:	4620      	mov	r0, r4
   211ac:	f7fe feae 	bl	1ff0c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211b0:	480d      	ldr	r0, [pc, #52]	; (211e8 <z_sched_wake+0xa0>)
   211b2:	f7fd fd29 	bl	1ec08 <z_spin_unlock_valid>
   211b6:	b978      	cbnz	r0, 211d8 <z_sched_wake+0x90>
   211b8:	23c2      	movs	r3, #194	; 0xc2
   211ba:	4a0c      	ldr	r2, [pc, #48]	; (211ec <z_sched_wake+0xa4>)
   211bc:	490f      	ldr	r1, [pc, #60]	; (211fc <z_sched_wake+0xb4>)
   211be:	480d      	ldr	r0, [pc, #52]	; (211f4 <z_sched_wake+0xac>)
   211c0:	f002 ff2f 	bl	24022 <assert_print>
   211c4:	4908      	ldr	r1, [pc, #32]	; (211e8 <z_sched_wake+0xa0>)
   211c6:	480e      	ldr	r0, [pc, #56]	; (21200 <z_sched_wake+0xb8>)
   211c8:	f002 ff2b 	bl	24022 <assert_print>
   211cc:	21c2      	movs	r1, #194	; 0xc2
   211ce:	e7d8      	b.n	21182 <z_sched_wake+0x3a>
	bool ret = false;
   211d0:	2500      	movs	r5, #0
   211d2:	e7ed      	b.n	211b0 <z_sched_wake+0x68>
   211d4:	4625      	mov	r5, r4
   211d6:	e7eb      	b.n	211b0 <z_sched_wake+0x68>
	__asm__ volatile(
   211d8:	f389 8811 	msr	BASEPRI, r9
   211dc:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   211e0:	4628      	mov	r0, r5
   211e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   211e6:	bf00      	nop
   211e8:	2002146c 	.word	0x2002146c
   211ec:	0002b32e 	.word	0x0002b32e
   211f0:	0002b387 	.word	0x0002b387
   211f4:	0002a669 	.word	0x0002a669
   211f8:	0002b39c 	.word	0x0002b39c
   211fc:	0002b35b 	.word	0x0002b35b
   21200:	0002b372 	.word	0x0002b372

00021204 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   21204:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21206:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2120a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2120c:	e9cd 6700 	strd	r6, r7, [sp]
   21210:	f7ff fa84 	bl	2071c <z_pend_curr>

	if (data != NULL) {
   21214:	b11c      	cbz	r4, 2121e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   21216:	4b03      	ldr	r3, [pc, #12]	; (21224 <z_sched_wait+0x20>)
   21218:	689b      	ldr	r3, [r3, #8]
   2121a:	695b      	ldr	r3, [r3, #20]
   2121c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2121e:	b002      	add	sp, #8
   21220:	bdd0      	pop	{r4, r6, r7, pc}
   21222:	bf00      	nop
   21224:	20021424 	.word	0x20021424

00021228 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   21228:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2122a:	4806      	ldr	r0, [pc, #24]	; (21244 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   2122c:	4a06      	ldr	r2, [pc, #24]	; (21248 <z_data_copy+0x20>)
   2122e:	4907      	ldr	r1, [pc, #28]	; (2124c <z_data_copy+0x24>)
   21230:	1a12      	subs	r2, r2, r0
   21232:	f007 f8a1 	bl	28378 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2123a:	4a05      	ldr	r2, [pc, #20]	; (21250 <z_data_copy+0x28>)
   2123c:	4905      	ldr	r1, [pc, #20]	; (21254 <z_data_copy+0x2c>)
   2123e:	4806      	ldr	r0, [pc, #24]	; (21258 <z_data_copy+0x30>)
   21240:	f007 b89a 	b.w	28378 <z_early_memcpy>
   21244:	20008000 	.word	0x20008000
   21248:	20008d58 	.word	0x20008d58
   2124c:	0002fe80 	.word	0x0002fe80
   21250:	00000000 	.word	0x00000000
   21254:	0002fe80 	.word	0x0002fe80
   21258:	20008000 	.word	0x20008000

0002125c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2125c:	4b03      	ldr	r3, [pc, #12]	; (2126c <elapsed+0x10>)
   2125e:	681b      	ldr	r3, [r3, #0]
   21260:	b90b      	cbnz	r3, 21266 <elapsed+0xa>
   21262:	f7fa ba77 	b.w	1b754 <sys_clock_elapsed>
}
   21266:	2000      	movs	r0, #0
   21268:	4770      	bx	lr
   2126a:	bf00      	nop
   2126c:	20021470 	.word	0x20021470

00021270 <next_timeout>:

static int32_t next_timeout(void)
{
   21270:	b510      	push	{r4, lr}
	return list->head == list;
   21272:	4b11      	ldr	r3, [pc, #68]	; (212b8 <next_timeout+0x48>)
   21274:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21276:	429c      	cmp	r4, r3
   21278:	d10a      	bne.n	21290 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2127a:	f7ff ffef 	bl	2125c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   2127e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   21282:	4b0e      	ldr	r3, [pc, #56]	; (212bc <next_timeout+0x4c>)
   21284:	691b      	ldr	r3, [r3, #16]
   21286:	b113      	cbz	r3, 2128e <next_timeout+0x1e>
   21288:	4298      	cmp	r0, r3
   2128a:	bfa8      	it	ge
   2128c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2128e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   21290:	f7ff ffe4 	bl	2125c <elapsed>
	if ((to == NULL) ||
   21294:	2c00      	cmp	r4, #0
   21296:	d0f2      	beq.n	2127e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   21298:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2129c:	1a1b      	subs	r3, r3, r0
   2129e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   212a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   212a6:	f172 0100 	sbcs.w	r1, r2, #0
   212aa:	dae8      	bge.n	2127e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   212ac:	2a00      	cmp	r2, #0
   212ae:	bfac      	ite	ge
   212b0:	4618      	movge	r0, r3
   212b2:	2000      	movlt	r0, #0
   212b4:	e7e5      	b.n	21282 <next_timeout+0x12>
   212b6:	bf00      	nop
   212b8:	20008738 	.word	0x20008738
   212bc:	20021424 	.word	0x20021424

000212c0 <remove_timeout>:
{
   212c0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   212c2:	b170      	cbz	r0, 212e2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   212c4:	4b0b      	ldr	r3, [pc, #44]	; (212f4 <remove_timeout+0x34>)
   212c6:	685b      	ldr	r3, [r3, #4]
   212c8:	4298      	cmp	r0, r3
   212ca:	d00a      	beq.n	212e2 <remove_timeout+0x22>
   212cc:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   212ce:	b143      	cbz	r3, 212e2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   212d0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   212d4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   212d8:	1912      	adds	r2, r2, r4
   212da:	eb41 0105 	adc.w	r1, r1, r5
   212de:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   212e2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   212e6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   212e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   212ea:	2300      	movs	r3, #0
	node->prev = NULL;
   212ec:	e9c0 3300 	strd	r3, r3, [r0]
}
   212f0:	bd30      	pop	{r4, r5, pc}
   212f2:	bf00      	nop
   212f4:	20008738 	.word	0x20008738

000212f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   212f8:	f1b3 3fff 	cmp.w	r3, #4294967295
   212fc:	bf08      	it	eq
   212fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   21302:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21306:	4604      	mov	r4, r0
   21308:	4692      	mov	sl, r2
   2130a:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2130c:	f000 809e 	beq.w	2144c <z_add_timeout+0x154>
	return node->next != NULL;
   21310:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   21312:	b166      	cbz	r6, 2132e <z_add_timeout+0x36>
   21314:	494e      	ldr	r1, [pc, #312]	; (21450 <z_add_timeout+0x158>)
   21316:	2363      	movs	r3, #99	; 0x63
   21318:	4a4e      	ldr	r2, [pc, #312]	; (21454 <z_add_timeout+0x15c>)
   2131a:	484f      	ldr	r0, [pc, #316]	; (21458 <z_add_timeout+0x160>)
   2131c:	f002 fe81 	bl	24022 <assert_print>
   21320:	484e      	ldr	r0, [pc, #312]	; (2145c <z_add_timeout+0x164>)
   21322:	f002 fe7e 	bl	24022 <assert_print>
   21326:	2163      	movs	r1, #99	; 0x63
   21328:	484a      	ldr	r0, [pc, #296]	; (21454 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2132a:	f002 fe73 	bl	24014 <assert_post_action>
	to->fn = fn;
   2132e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   21330:	f04f 0320 	mov.w	r3, #32
   21334:	f3ef 8711 	mrs	r7, BASEPRI
   21338:	f383 8812 	msr	BASEPRI_MAX, r3
   2133c:	f3bf 8f6f 	isb	sy
   21340:	4847      	ldr	r0, [pc, #284]	; (21460 <z_add_timeout+0x168>)
   21342:	f7fd fc53 	bl	1ebec <z_spin_lock_valid>
   21346:	b960      	cbnz	r0, 21362 <z_add_timeout+0x6a>
   21348:	2394      	movs	r3, #148	; 0x94
   2134a:	4a46      	ldr	r2, [pc, #280]	; (21464 <z_add_timeout+0x16c>)
   2134c:	4946      	ldr	r1, [pc, #280]	; (21468 <z_add_timeout+0x170>)
   2134e:	4842      	ldr	r0, [pc, #264]	; (21458 <z_add_timeout+0x160>)
   21350:	f002 fe67 	bl	24022 <assert_print>
   21354:	4942      	ldr	r1, [pc, #264]	; (21460 <z_add_timeout+0x168>)
   21356:	4845      	ldr	r0, [pc, #276]	; (2146c <z_add_timeout+0x174>)
   21358:	f002 fe63 	bl	24022 <assert_print>
   2135c:	2194      	movs	r1, #148	; 0x94
   2135e:	4841      	ldr	r0, [pc, #260]	; (21464 <z_add_timeout+0x16c>)
   21360:	e7e3      	b.n	2132a <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   21362:	483f      	ldr	r0, [pc, #252]	; (21460 <z_add_timeout+0x168>)
   21364:	f7fd fc5e 	bl	1ec24 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   21368:	f1ba 3fff 	cmp.w	sl, #4294967295
   2136c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   21370:	da23      	bge.n	213ba <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   21372:	f06f 0301 	mvn.w	r3, #1
   21376:	493e      	ldr	r1, [pc, #248]	; (21470 <z_add_timeout+0x178>)
   21378:	e9d1 2000 	ldrd	r2, r0, [r1]
   2137c:	1a9b      	subs	r3, r3, r2
   2137e:	f04f 32ff 	mov.w	r2, #4294967295
   21382:	eb62 0000 	sbc.w	r0, r2, r0
   21386:	ebb3 030a 	subs.w	r3, r3, sl
   2138a:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2138e:	2b01      	cmp	r3, #1
   21390:	f170 0200 	sbcs.w	r2, r0, #0
   21394:	da01      	bge.n	2139a <z_add_timeout+0xa2>
   21396:	2301      	movs	r3, #1
   21398:	4630      	mov	r0, r6
   2139a:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   2139e:	4b35      	ldr	r3, [pc, #212]	; (21474 <z_add_timeout+0x17c>)
   213a0:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   213a2:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   213a6:	429a      	cmp	r2, r3
   213a8:	bf18      	it	ne
   213aa:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   213ac:	b986      	cbnz	r6, 213d0 <z_add_timeout+0xd8>
	node->prev = tail;
   213ae:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   213b2:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   213b6:	605c      	str	r4, [r3, #4]
}
   213b8:	e01c      	b.n	213f4 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   213ba:	f7ff ff4f 	bl	2125c <elapsed>
   213be:	f11a 0801 	adds.w	r8, sl, #1
   213c2:	f145 0500 	adc.w	r5, r5, #0
   213c6:	eb18 0300 	adds.w	r3, r8, r0
   213ca:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   213ce:	e7e4      	b.n	2139a <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   213d0:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   213d4:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   213d8:	428a      	cmp	r2, r1
   213da:	eb70 0e05 	sbcs.w	lr, r0, r5
   213de:	da28      	bge.n	21432 <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   213e0:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   213e2:	6872      	ldr	r2, [r6, #4]
   213e4:	eb65 0500 	sbc.w	r5, r5, r0
   213e8:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   213ec:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   213f0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   213f2:	6074      	str	r4, [r6, #4]
	return list->head == list;
   213f4:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   213f6:	429a      	cmp	r2, r3
   213f8:	d00b      	beq.n	21412 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   213fa:	4294      	cmp	r4, r2
   213fc:	d109      	bne.n	21412 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   213fe:	f7ff ff37 	bl	21270 <next_timeout>

			if (next_time == 0 ||
   21402:	b118      	cbz	r0, 2140c <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   21404:	4b1c      	ldr	r3, [pc, #112]	; (21478 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   21406:	691b      	ldr	r3, [r3, #16]
   21408:	4283      	cmp	r3, r0
   2140a:	d002      	beq.n	21412 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   2140c:	2100      	movs	r1, #0
   2140e:	f7fa f971 	bl	1b6f4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21412:	4813      	ldr	r0, [pc, #76]	; (21460 <z_add_timeout+0x168>)
   21414:	f7fd fbf8 	bl	1ec08 <z_spin_unlock_valid>
   21418:	b9a0      	cbnz	r0, 21444 <z_add_timeout+0x14c>
   2141a:	23c2      	movs	r3, #194	; 0xc2
   2141c:	4a11      	ldr	r2, [pc, #68]	; (21464 <z_add_timeout+0x16c>)
   2141e:	4917      	ldr	r1, [pc, #92]	; (2147c <z_add_timeout+0x184>)
   21420:	480d      	ldr	r0, [pc, #52]	; (21458 <z_add_timeout+0x160>)
   21422:	f002 fdfe 	bl	24022 <assert_print>
   21426:	490e      	ldr	r1, [pc, #56]	; (21460 <z_add_timeout+0x168>)
   21428:	4815      	ldr	r0, [pc, #84]	; (21480 <z_add_timeout+0x188>)
   2142a:	f002 fdfa 	bl	24022 <assert_print>
   2142e:	21c2      	movs	r1, #194	; 0xc2
   21430:	e795      	b.n	2135e <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   21432:	1a52      	subs	r2, r2, r1
   21434:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   21438:	4566      	cmp	r6, ip
   2143a:	e9c4 2004 	strd	r2, r0, [r4, #16]
   2143e:	d0b6      	beq.n	213ae <z_add_timeout+0xb6>
   21440:	6836      	ldr	r6, [r6, #0]
   21442:	e7b3      	b.n	213ac <z_add_timeout+0xb4>
	__asm__ volatile(
   21444:	f387 8811 	msr	BASEPRI, r7
   21448:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2144c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21450:	0002f8a2 	.word	0x0002f8a2
   21454:	0002f87e 	.word	0x0002f87e
   21458:	0002a669 	.word	0x0002a669
   2145c:	0002df2c 	.word	0x0002df2c
   21460:	20021474 	.word	0x20021474
   21464:	0002b32e 	.word	0x0002b32e
   21468:	0002b387 	.word	0x0002b387
   2146c:	0002b39c 	.word	0x0002b39c
   21470:	20009d20 	.word	0x20009d20
   21474:	20008738 	.word	0x20008738
   21478:	20021424 	.word	0x20021424
   2147c:	0002b35b 	.word	0x0002b35b
   21480:	0002b372 	.word	0x0002b372

00021484 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   21484:	b538      	push	{r3, r4, r5, lr}
   21486:	4604      	mov	r4, r0
	__asm__ volatile(
   21488:	f04f 0320 	mov.w	r3, #32
   2148c:	f3ef 8511 	mrs	r5, BASEPRI
   21490:	f383 8812 	msr	BASEPRI_MAX, r3
   21494:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21498:	4819      	ldr	r0, [pc, #100]	; (21500 <z_abort_timeout+0x7c>)
   2149a:	f7fd fba7 	bl	1ebec <z_spin_lock_valid>
   2149e:	b968      	cbnz	r0, 214bc <z_abort_timeout+0x38>
   214a0:	2394      	movs	r3, #148	; 0x94
   214a2:	4a18      	ldr	r2, [pc, #96]	; (21504 <z_abort_timeout+0x80>)
   214a4:	4918      	ldr	r1, [pc, #96]	; (21508 <z_abort_timeout+0x84>)
   214a6:	4819      	ldr	r0, [pc, #100]	; (2150c <z_abort_timeout+0x88>)
   214a8:	f002 fdbb 	bl	24022 <assert_print>
   214ac:	4914      	ldr	r1, [pc, #80]	; (21500 <z_abort_timeout+0x7c>)
   214ae:	4818      	ldr	r0, [pc, #96]	; (21510 <z_abort_timeout+0x8c>)
   214b0:	f002 fdb7 	bl	24022 <assert_print>
   214b4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214b6:	4813      	ldr	r0, [pc, #76]	; (21504 <z_abort_timeout+0x80>)
   214b8:	f002 fdac 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   214bc:	4810      	ldr	r0, [pc, #64]	; (21500 <z_abort_timeout+0x7c>)
   214be:	f7fd fbb1 	bl	1ec24 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   214c2:	6823      	ldr	r3, [r4, #0]
   214c4:	b19b      	cbz	r3, 214ee <z_abort_timeout+0x6a>
			remove_timeout(to);
   214c6:	4620      	mov	r0, r4
   214c8:	f7ff fefa 	bl	212c0 <remove_timeout>
			ret = 0;
   214cc:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214ce:	480c      	ldr	r0, [pc, #48]	; (21500 <z_abort_timeout+0x7c>)
   214d0:	f7fd fb9a 	bl	1ec08 <z_spin_unlock_valid>
   214d4:	b970      	cbnz	r0, 214f4 <z_abort_timeout+0x70>
   214d6:	23c2      	movs	r3, #194	; 0xc2
   214d8:	4a0a      	ldr	r2, [pc, #40]	; (21504 <z_abort_timeout+0x80>)
   214da:	490e      	ldr	r1, [pc, #56]	; (21514 <z_abort_timeout+0x90>)
   214dc:	480b      	ldr	r0, [pc, #44]	; (2150c <z_abort_timeout+0x88>)
   214de:	f002 fda0 	bl	24022 <assert_print>
   214e2:	4907      	ldr	r1, [pc, #28]	; (21500 <z_abort_timeout+0x7c>)
   214e4:	480c      	ldr	r0, [pc, #48]	; (21518 <z_abort_timeout+0x94>)
   214e6:	f002 fd9c 	bl	24022 <assert_print>
   214ea:	21c2      	movs	r1, #194	; 0xc2
   214ec:	e7e3      	b.n	214b6 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   214ee:	f06f 0415 	mvn.w	r4, #21
   214f2:	e7ec      	b.n	214ce <z_abort_timeout+0x4a>
	__asm__ volatile(
   214f4:	f385 8811 	msr	BASEPRI, r5
   214f8:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   214fc:	4620      	mov	r0, r4
   214fe:	bd38      	pop	{r3, r4, r5, pc}
   21500:	20021474 	.word	0x20021474
   21504:	0002b32e 	.word	0x0002b32e
   21508:	0002b387 	.word	0x0002b387
   2150c:	0002a669 	.word	0x0002a669
   21510:	0002b39c 	.word	0x0002b39c
   21514:	0002b35b 	.word	0x0002b35b
   21518:	0002b372 	.word	0x0002b372

0002151c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   2151c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2151e:	f04f 0320 	mov.w	r3, #32
   21522:	f3ef 8511 	mrs	r5, BASEPRI
   21526:	f383 8812 	msr	BASEPRI_MAX, r3
   2152a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2152e:	4817      	ldr	r0, [pc, #92]	; (2158c <z_get_next_timeout_expiry+0x70>)
   21530:	f7fd fb5c 	bl	1ebec <z_spin_lock_valid>
   21534:	b968      	cbnz	r0, 21552 <z_get_next_timeout_expiry+0x36>
   21536:	2394      	movs	r3, #148	; 0x94
   21538:	4a15      	ldr	r2, [pc, #84]	; (21590 <z_get_next_timeout_expiry+0x74>)
   2153a:	4916      	ldr	r1, [pc, #88]	; (21594 <z_get_next_timeout_expiry+0x78>)
   2153c:	4816      	ldr	r0, [pc, #88]	; (21598 <z_get_next_timeout_expiry+0x7c>)
   2153e:	f002 fd70 	bl	24022 <assert_print>
   21542:	4912      	ldr	r1, [pc, #72]	; (2158c <z_get_next_timeout_expiry+0x70>)
   21544:	4815      	ldr	r0, [pc, #84]	; (2159c <z_get_next_timeout_expiry+0x80>)
   21546:	f002 fd6c 	bl	24022 <assert_print>
   2154a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2154c:	4810      	ldr	r0, [pc, #64]	; (21590 <z_get_next_timeout_expiry+0x74>)
   2154e:	f002 fd61 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   21552:	480e      	ldr	r0, [pc, #56]	; (2158c <z_get_next_timeout_expiry+0x70>)
   21554:	f7fd fb66 	bl	1ec24 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   21558:	f7ff fe8a 	bl	21270 <next_timeout>
   2155c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2155e:	480b      	ldr	r0, [pc, #44]	; (2158c <z_get_next_timeout_expiry+0x70>)
   21560:	f7fd fb52 	bl	1ec08 <z_spin_unlock_valid>
   21564:	b958      	cbnz	r0, 2157e <z_get_next_timeout_expiry+0x62>
   21566:	23c2      	movs	r3, #194	; 0xc2
   21568:	4a09      	ldr	r2, [pc, #36]	; (21590 <z_get_next_timeout_expiry+0x74>)
   2156a:	490d      	ldr	r1, [pc, #52]	; (215a0 <z_get_next_timeout_expiry+0x84>)
   2156c:	480a      	ldr	r0, [pc, #40]	; (21598 <z_get_next_timeout_expiry+0x7c>)
   2156e:	f002 fd58 	bl	24022 <assert_print>
   21572:	4906      	ldr	r1, [pc, #24]	; (2158c <z_get_next_timeout_expiry+0x70>)
   21574:	480b      	ldr	r0, [pc, #44]	; (215a4 <z_get_next_timeout_expiry+0x88>)
   21576:	f002 fd54 	bl	24022 <assert_print>
   2157a:	21c2      	movs	r1, #194	; 0xc2
   2157c:	e7e6      	b.n	2154c <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   2157e:	f385 8811 	msr	BASEPRI, r5
   21582:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   21586:	4620      	mov	r0, r4
   21588:	bd38      	pop	{r3, r4, r5, pc}
   2158a:	bf00      	nop
   2158c:	20021474 	.word	0x20021474
   21590:	0002b32e 	.word	0x0002b32e
   21594:	0002b387 	.word	0x0002b387
   21598:	0002a669 	.word	0x0002a669
   2159c:	0002b39c 	.word	0x0002b39c
   215a0:	0002b35b 	.word	0x0002b35b
   215a4:	0002b372 	.word	0x0002b372

000215a8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   215a8:	b570      	push	{r4, r5, r6, lr}
   215aa:	4604      	mov	r4, r0
   215ac:	460d      	mov	r5, r1
	__asm__ volatile(
   215ae:	f04f 0320 	mov.w	r3, #32
   215b2:	f3ef 8611 	mrs	r6, BASEPRI
   215b6:	f383 8812 	msr	BASEPRI_MAX, r3
   215ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   215be:	481b      	ldr	r0, [pc, #108]	; (2162c <z_set_timeout_expiry+0x84>)
   215c0:	f7fd fb14 	bl	1ebec <z_spin_lock_valid>
   215c4:	b968      	cbnz	r0, 215e2 <z_set_timeout_expiry+0x3a>
   215c6:	2394      	movs	r3, #148	; 0x94
   215c8:	4a19      	ldr	r2, [pc, #100]	; (21630 <z_set_timeout_expiry+0x88>)
   215ca:	491a      	ldr	r1, [pc, #104]	; (21634 <z_set_timeout_expiry+0x8c>)
   215cc:	481a      	ldr	r0, [pc, #104]	; (21638 <z_set_timeout_expiry+0x90>)
   215ce:	f002 fd28 	bl	24022 <assert_print>
   215d2:	4916      	ldr	r1, [pc, #88]	; (2162c <z_set_timeout_expiry+0x84>)
   215d4:	4819      	ldr	r0, [pc, #100]	; (2163c <z_set_timeout_expiry+0x94>)
   215d6:	f002 fd24 	bl	24022 <assert_print>
   215da:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215dc:	4814      	ldr	r0, [pc, #80]	; (21630 <z_set_timeout_expiry+0x88>)
   215de:	f002 fd19 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   215e2:	4812      	ldr	r0, [pc, #72]	; (2162c <z_set_timeout_expiry+0x84>)
   215e4:	f7fd fb1e 	bl	1ec24 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   215e8:	f7ff fe42 	bl	21270 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   215ec:	2801      	cmp	r0, #1
   215ee:	dd07      	ble.n	21600 <z_set_timeout_expiry+0x58>
   215f0:	42a0      	cmp	r0, r4
   215f2:	db05      	blt.n	21600 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   215f4:	42a0      	cmp	r0, r4
   215f6:	4629      	mov	r1, r5
   215f8:	bfa8      	it	ge
   215fa:	4620      	movge	r0, r4
   215fc:	f7fa f87a 	bl	1b6f4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21600:	480a      	ldr	r0, [pc, #40]	; (2162c <z_set_timeout_expiry+0x84>)
   21602:	f7fd fb01 	bl	1ec08 <z_spin_unlock_valid>
   21606:	b958      	cbnz	r0, 21620 <z_set_timeout_expiry+0x78>
   21608:	23c2      	movs	r3, #194	; 0xc2
   2160a:	4a09      	ldr	r2, [pc, #36]	; (21630 <z_set_timeout_expiry+0x88>)
   2160c:	490c      	ldr	r1, [pc, #48]	; (21640 <z_set_timeout_expiry+0x98>)
   2160e:	480a      	ldr	r0, [pc, #40]	; (21638 <z_set_timeout_expiry+0x90>)
   21610:	f002 fd07 	bl	24022 <assert_print>
   21614:	4905      	ldr	r1, [pc, #20]	; (2162c <z_set_timeout_expiry+0x84>)
   21616:	480b      	ldr	r0, [pc, #44]	; (21644 <z_set_timeout_expiry+0x9c>)
   21618:	f002 fd03 	bl	24022 <assert_print>
   2161c:	21c2      	movs	r1, #194	; 0xc2
   2161e:	e7dd      	b.n	215dc <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   21620:	f386 8811 	msr	BASEPRI, r6
   21624:	f3bf 8f6f 	isb	sy
		}
	}
}
   21628:	bd70      	pop	{r4, r5, r6, pc}
   2162a:	bf00      	nop
   2162c:	20021474 	.word	0x20021474
   21630:	0002b32e 	.word	0x0002b32e
   21634:	0002b387 	.word	0x0002b387
   21638:	0002a669 	.word	0x0002a669
   2163c:	0002b39c 	.word	0x0002b39c
   21640:	0002b35b 	.word	0x0002b35b
   21644:	0002b372 	.word	0x0002b372

00021648 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   21648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2164c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2164e:	f7fe ff7d 	bl	2054c <z_time_slice>
	__asm__ volatile(
   21652:	f04f 0320 	mov.w	r3, #32
   21656:	f3ef 8711 	mrs	r7, BASEPRI
   2165a:	f383 8812 	msr	BASEPRI_MAX, r3
   2165e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21662:	483f      	ldr	r0, [pc, #252]	; (21760 <sys_clock_announce+0x118>)
   21664:	f7fd fac2 	bl	1ebec <z_spin_lock_valid>
   21668:	b968      	cbnz	r0, 21686 <sys_clock_announce+0x3e>
   2166a:	2394      	movs	r3, #148	; 0x94
   2166c:	4a3d      	ldr	r2, [pc, #244]	; (21764 <sys_clock_announce+0x11c>)
   2166e:	493e      	ldr	r1, [pc, #248]	; (21768 <sys_clock_announce+0x120>)
   21670:	483e      	ldr	r0, [pc, #248]	; (2176c <sys_clock_announce+0x124>)
   21672:	f002 fcd6 	bl	24022 <assert_print>
   21676:	493a      	ldr	r1, [pc, #232]	; (21760 <sys_clock_announce+0x118>)
   21678:	483d      	ldr	r0, [pc, #244]	; (21770 <sys_clock_announce+0x128>)
   2167a:	f002 fcd2 	bl	24022 <assert_print>
   2167e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21680:	4838      	ldr	r0, [pc, #224]	; (21764 <sys_clock_announce+0x11c>)
   21682:	f002 fcc7 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   21686:	4836      	ldr	r0, [pc, #216]	; (21760 <sys_clock_announce+0x118>)
   21688:	f7fd facc 	bl	1ec24 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2168c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 21774 <sys_clock_announce+0x12c>
	return list->head == list;
   21690:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 21778 <sys_clock_announce+0x130>
   21694:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   21698:	4a38      	ldr	r2, [pc, #224]	; (2177c <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2169a:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   2169c:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   216a0:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   216a4:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   216a8:	d00b      	beq.n	216c2 <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   216aa:	b155      	cbz	r5, 216c2 <sys_clock_announce+0x7a>
   216ac:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   216b0:	42b4      	cmp	r4, r6
   216b2:	eb71 0e00 	sbcs.w	lr, r1, r0
   216b6:	da1c      	bge.n	216f2 <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   216b8:	1b36      	subs	r6, r6, r4
   216ba:	eb60 0001 	sbc.w	r0, r0, r1
   216be:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   216c2:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   216c4:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   216c8:	eb4c 0101 	adc.w	r1, ip, r1
   216cc:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   216d0:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   216d4:	f7ff fdcc 	bl	21270 <next_timeout>
   216d8:	4621      	mov	r1, r4
   216da:	f7fa f80b 	bl	1b6f4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216de:	4820      	ldr	r0, [pc, #128]	; (21760 <sys_clock_announce+0x118>)
   216e0:	f7fd fa92 	bl	1ec08 <z_spin_unlock_valid>
   216e4:	b1a8      	cbz	r0, 21712 <sys_clock_announce+0xca>
	__asm__ volatile(
   216e6:	f387 8811 	msr	BASEPRI, r7
   216ea:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   216ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   216f2:	18f3      	adds	r3, r6, r3
   216f4:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   216f8:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   216fc:	2200      	movs	r2, #0
   216fe:	2300      	movs	r3, #0
		remove_timeout(t);
   21700:	4628      	mov	r0, r5
		t->dticks = 0;
   21702:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   21706:	f7ff fddb 	bl	212c0 <remove_timeout>
   2170a:	4815      	ldr	r0, [pc, #84]	; (21760 <sys_clock_announce+0x118>)
   2170c:	f7fd fa7c 	bl	1ec08 <z_spin_unlock_valid>
   21710:	b958      	cbnz	r0, 2172a <sys_clock_announce+0xe2>
   21712:	23c2      	movs	r3, #194	; 0xc2
   21714:	4a13      	ldr	r2, [pc, #76]	; (21764 <sys_clock_announce+0x11c>)
   21716:	491a      	ldr	r1, [pc, #104]	; (21780 <sys_clock_announce+0x138>)
   21718:	4814      	ldr	r0, [pc, #80]	; (2176c <sys_clock_announce+0x124>)
   2171a:	f002 fc82 	bl	24022 <assert_print>
   2171e:	4910      	ldr	r1, [pc, #64]	; (21760 <sys_clock_announce+0x118>)
   21720:	4818      	ldr	r0, [pc, #96]	; (21784 <sys_clock_announce+0x13c>)
   21722:	f002 fc7e 	bl	24022 <assert_print>
   21726:	21c2      	movs	r1, #194	; 0xc2
   21728:	e7aa      	b.n	21680 <sys_clock_announce+0x38>
   2172a:	f387 8811 	msr	BASEPRI, r7
   2172e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   21732:	4628      	mov	r0, r5
   21734:	68ab      	ldr	r3, [r5, #8]
   21736:	4798      	blx	r3
	__asm__ volatile(
   21738:	f04f 0320 	mov.w	r3, #32
   2173c:	f3ef 8711 	mrs	r7, BASEPRI
   21740:	f383 8812 	msr	BASEPRI_MAX, r3
   21744:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21748:	4805      	ldr	r0, [pc, #20]	; (21760 <sys_clock_announce+0x118>)
   2174a:	f7fd fa4f 	bl	1ebec <z_spin_lock_valid>
   2174e:	2800      	cmp	r0, #0
   21750:	d08b      	beq.n	2166a <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   21752:	4803      	ldr	r0, [pc, #12]	; (21760 <sys_clock_announce+0x118>)
   21754:	f7fd fa66 	bl	1ec24 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   21758:	f8d8 4000 	ldr.w	r4, [r8]
   2175c:	1ba4      	subs	r4, r4, r6
   2175e:	e799      	b.n	21694 <sys_clock_announce+0x4c>
   21760:	20021474 	.word	0x20021474
   21764:	0002b32e 	.word	0x0002b32e
   21768:	0002b387 	.word	0x0002b387
   2176c:	0002a669 	.word	0x0002a669
   21770:	0002b39c 	.word	0x0002b39c
   21774:	20021470 	.word	0x20021470
   21778:	20008738 	.word	0x20008738
   2177c:	20009d20 	.word	0x20009d20
   21780:	0002b35b 	.word	0x0002b35b
   21784:	0002b372 	.word	0x0002b372

00021788 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   21788:	b570      	push	{r4, r5, r6, lr}
   2178a:	f04f 0320 	mov.w	r3, #32
   2178e:	f3ef 8611 	mrs	r6, BASEPRI
   21792:	f383 8812 	msr	BASEPRI_MAX, r3
   21796:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2179a:	481a      	ldr	r0, [pc, #104]	; (21804 <sys_clock_tick_get+0x7c>)
   2179c:	f7fd fa26 	bl	1ebec <z_spin_lock_valid>
   217a0:	b968      	cbnz	r0, 217be <sys_clock_tick_get+0x36>
   217a2:	2394      	movs	r3, #148	; 0x94
   217a4:	4a18      	ldr	r2, [pc, #96]	; (21808 <sys_clock_tick_get+0x80>)
   217a6:	4919      	ldr	r1, [pc, #100]	; (2180c <sys_clock_tick_get+0x84>)
   217a8:	4819      	ldr	r0, [pc, #100]	; (21810 <sys_clock_tick_get+0x88>)
   217aa:	f002 fc3a 	bl	24022 <assert_print>
   217ae:	4915      	ldr	r1, [pc, #84]	; (21804 <sys_clock_tick_get+0x7c>)
   217b0:	4818      	ldr	r0, [pc, #96]	; (21814 <sys_clock_tick_get+0x8c>)
   217b2:	f002 fc36 	bl	24022 <assert_print>
   217b6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   217b8:	4813      	ldr	r0, [pc, #76]	; (21808 <sys_clock_tick_get+0x80>)
   217ba:	f002 fc2b 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   217be:	4811      	ldr	r0, [pc, #68]	; (21804 <sys_clock_tick_get+0x7c>)
   217c0:	f7fd fa30 	bl	1ec24 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   217c4:	f7ff fd4a 	bl	2125c <elapsed>
   217c8:	4a13      	ldr	r2, [pc, #76]	; (21818 <sys_clock_tick_get+0x90>)
   217ca:	e9d2 4500 	ldrd	r4, r5, [r2]
   217ce:	1904      	adds	r4, r0, r4
   217d0:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   217d4:	480b      	ldr	r0, [pc, #44]	; (21804 <sys_clock_tick_get+0x7c>)
   217d6:	f7fd fa17 	bl	1ec08 <z_spin_unlock_valid>
   217da:	b958      	cbnz	r0, 217f4 <sys_clock_tick_get+0x6c>
   217dc:	23c2      	movs	r3, #194	; 0xc2
   217de:	4a0a      	ldr	r2, [pc, #40]	; (21808 <sys_clock_tick_get+0x80>)
   217e0:	490e      	ldr	r1, [pc, #56]	; (2181c <sys_clock_tick_get+0x94>)
   217e2:	480b      	ldr	r0, [pc, #44]	; (21810 <sys_clock_tick_get+0x88>)
   217e4:	f002 fc1d 	bl	24022 <assert_print>
   217e8:	4906      	ldr	r1, [pc, #24]	; (21804 <sys_clock_tick_get+0x7c>)
   217ea:	480d      	ldr	r0, [pc, #52]	; (21820 <sys_clock_tick_get+0x98>)
   217ec:	f002 fc19 	bl	24022 <assert_print>
   217f0:	21c2      	movs	r1, #194	; 0xc2
   217f2:	e7e1      	b.n	217b8 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   217f4:	f386 8811 	msr	BASEPRI, r6
   217f8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   217fc:	4620      	mov	r0, r4
   217fe:	4629      	mov	r1, r5
   21800:	bd70      	pop	{r4, r5, r6, pc}
   21802:	bf00      	nop
   21804:	20021474 	.word	0x20021474
   21808:	0002b32e 	.word	0x0002b32e
   2180c:	0002b387 	.word	0x0002b387
   21810:	0002a669 	.word	0x0002a669
   21814:	0002b39c 	.word	0x0002b39c
   21818:	20009d20 	.word	0x20009d20
   2181c:	0002b35b 	.word	0x0002b35b
   21820:	0002b372 	.word	0x0002b372

00021824 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   21824:	b570      	push	{r4, r5, r6, lr}
   21826:	4604      	mov	r4, r0
	__asm__ volatile(
   21828:	f04f 0320 	mov.w	r3, #32
   2182c:	f3ef 8511 	mrs	r5, BASEPRI
   21830:	f383 8812 	msr	BASEPRI_MAX, r3
   21834:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21838:	4849      	ldr	r0, [pc, #292]	; (21960 <z_timer_expiration_handler+0x13c>)
   2183a:	f7fd f9d7 	bl	1ebec <z_spin_lock_valid>
   2183e:	b968      	cbnz	r0, 2185c <z_timer_expiration_handler+0x38>
   21840:	2394      	movs	r3, #148	; 0x94
   21842:	4a48      	ldr	r2, [pc, #288]	; (21964 <z_timer_expiration_handler+0x140>)
   21844:	4948      	ldr	r1, [pc, #288]	; (21968 <z_timer_expiration_handler+0x144>)
   21846:	4849      	ldr	r0, [pc, #292]	; (2196c <z_timer_expiration_handler+0x148>)
   21848:	f002 fbeb 	bl	24022 <assert_print>
   2184c:	4944      	ldr	r1, [pc, #272]	; (21960 <z_timer_expiration_handler+0x13c>)
   2184e:	4848      	ldr	r0, [pc, #288]	; (21970 <z_timer_expiration_handler+0x14c>)
   21850:	f002 fbe7 	bl	24022 <assert_print>
   21854:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21856:	4843      	ldr	r0, [pc, #268]	; (21964 <z_timer_expiration_handler+0x140>)
   21858:	f002 fbdc 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   2185c:	4840      	ldr	r0, [pc, #256]	; (21960 <z_timer_expiration_handler+0x13c>)
   2185e:	f7fd f9e1 	bl	1ec24 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   21862:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   21866:	3301      	adds	r3, #1
   21868:	f142 0200 	adc.w	r2, r2, #0
   2186c:	2b02      	cmp	r3, #2
   2186e:	f172 0200 	sbcs.w	r2, r2, #0
   21872:	d322      	bcc.n	218ba <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   21874:	f006 fe9a 	bl	285ac <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   21878:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   2187c:	3001      	adds	r0, #1
   2187e:	f141 0100 	adc.w	r1, r1, #0
   21882:	18c0      	adds	r0, r0, r3
   21884:	eb41 0102 	adc.w	r1, r1, r2
   21888:	2801      	cmp	r0, #1
   2188a:	f171 0100 	sbcs.w	r1, r1, #0
   2188e:	db29      	blt.n	218e4 <z_timer_expiration_handler+0xc0>
   21890:	f006 fe8c 	bl	285ac <z_impl_k_uptime_ticks>
   21894:	3001      	adds	r0, #1
   21896:	f141 0300 	adc.w	r3, r1, #0
   2189a:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   2189e:	1880      	adds	r0, r0, r2
   218a0:	f06f 0201 	mvn.w	r2, #1
   218a4:	eb43 0301 	adc.w	r3, r3, r1
   218a8:	f04f 31ff 	mov.w	r1, #4294967295
   218ac:	1a12      	subs	r2, r2, r0
   218ae:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   218b2:	4620      	mov	r0, r4
   218b4:	492f      	ldr	r1, [pc, #188]	; (21974 <z_timer_expiration_handler+0x150>)
   218b6:	f7ff fd1f 	bl	212f8 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   218ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
   218bc:	3301      	adds	r3, #1
   218be:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   218c0:	6a23      	ldr	r3, [r4, #32]
   218c2:	b35b      	cbz	r3, 2191c <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   218c4:	4826      	ldr	r0, [pc, #152]	; (21960 <z_timer_expiration_handler+0x13c>)
   218c6:	f7fd f99f 	bl	1ec08 <z_spin_unlock_valid>
   218ca:	b980      	cbnz	r0, 218ee <z_timer_expiration_handler+0xca>
   218cc:	23c2      	movs	r3, #194	; 0xc2
   218ce:	4a25      	ldr	r2, [pc, #148]	; (21964 <z_timer_expiration_handler+0x140>)
   218d0:	4929      	ldr	r1, [pc, #164]	; (21978 <z_timer_expiration_handler+0x154>)
   218d2:	4826      	ldr	r0, [pc, #152]	; (2196c <z_timer_expiration_handler+0x148>)
   218d4:	f002 fba5 	bl	24022 <assert_print>
   218d8:	4921      	ldr	r1, [pc, #132]	; (21960 <z_timer_expiration_handler+0x13c>)
   218da:	4828      	ldr	r0, [pc, #160]	; (2197c <z_timer_expiration_handler+0x158>)
   218dc:	f002 fba1 	bl	24022 <assert_print>
   218e0:	21c2      	movs	r1, #194	; 0xc2
   218e2:	e7b8      	b.n	21856 <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   218e4:	f06f 0201 	mvn.w	r2, #1
   218e8:	f04f 33ff 	mov.w	r3, #4294967295
   218ec:	e7e1      	b.n	218b2 <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   218ee:	f385 8811 	msr	BASEPRI, r5
   218f2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   218f6:	4620      	mov	r0, r4
   218f8:	6a23      	ldr	r3, [r4, #32]
   218fa:	4798      	blx	r3
	__asm__ volatile(
   218fc:	f04f 0320 	mov.w	r3, #32
   21900:	f3ef 8511 	mrs	r5, BASEPRI
   21904:	f383 8812 	msr	BASEPRI_MAX, r3
   21908:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2190c:	4814      	ldr	r0, [pc, #80]	; (21960 <z_timer_expiration_handler+0x13c>)
   2190e:	f7fd f96d 	bl	1ebec <z_spin_lock_valid>
   21912:	2800      	cmp	r0, #0
   21914:	d094      	beq.n	21840 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   21916:	4812      	ldr	r0, [pc, #72]	; (21960 <z_timer_expiration_handler+0x13c>)
   21918:	f7fd f984 	bl	1ec24 <z_spin_lock_set_owner>
	return list->head == list;
   2191c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21920:	42a6      	cmp	r6, r4
   21922:	d000      	beq.n	21926 <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   21924:	b94e      	cbnz	r6, 2193a <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21926:	480e      	ldr	r0, [pc, #56]	; (21960 <z_timer_expiration_handler+0x13c>)
   21928:	f7fd f96e 	bl	1ec08 <z_spin_unlock_valid>
   2192c:	2800      	cmp	r0, #0
   2192e:	d0cd      	beq.n	218cc <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   21930:	f385 8811 	msr	BASEPRI, r5
   21934:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   21938:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   2193a:	4630      	mov	r0, r6
   2193c:	f7fe fbda 	bl	200f4 <z_unpend_thread_no_timeout>
   21940:	2300      	movs	r3, #0
   21942:	4807      	ldr	r0, [pc, #28]	; (21960 <z_timer_expiration_handler+0x13c>)
   21944:	67f3      	str	r3, [r6, #124]	; 0x7c
   21946:	f7fd f95f 	bl	1ec08 <z_spin_unlock_valid>
   2194a:	2800      	cmp	r0, #0
   2194c:	d0be      	beq.n	218cc <z_timer_expiration_handler+0xa8>
   2194e:	f385 8811 	msr	BASEPRI, r5
   21952:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   21956:	4630      	mov	r0, r6
}
   21958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   2195c:	f7fe bb84 	b.w	20068 <z_ready_thread>
   21960:	20021478 	.word	0x20021478
   21964:	0002b32e 	.word	0x0002b32e
   21968:	0002b387 	.word	0x0002b387
   2196c:	0002a669 	.word	0x0002a669
   21970:	0002b39c 	.word	0x0002b39c
   21974:	00021825 	.word	0x00021825
   21978:	0002b35b 	.word	0x0002b35b
   2197c:	0002b372 	.word	0x0002b372

00021980 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   21980:	f1b3 3fff 	cmp.w	r3, #4294967295
   21984:	bf08      	it	eq
   21986:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2198a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2198e:	4619      	mov	r1, r3
   21990:	4605      	mov	r5, r0
   21992:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   21996:	4614      	mov	r4, r2
   21998:	4691      	mov	r9, r2
   2199a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2199c:	d037      	beq.n	21a0e <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2199e:	f1b0 3fff 	cmp.w	r0, #4294967295
   219a2:	bf08      	it	eq
   219a4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   219a8:	4637      	mov	r7, r6
   219aa:	4682      	mov	sl, r0
   219ac:	d011      	beq.n	219d2 <z_impl_k_timer_start+0x52>
   219ae:	ea50 0306 	orrs.w	r3, r0, r6
   219b2:	d00e      	beq.n	219d2 <z_impl_k_timer_start+0x52>
   219b4:	1c72      	adds	r2, r6, #1
   219b6:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   219ba:	db0a      	blt.n	219d2 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   219bc:	2e02      	cmp	r6, #2
   219be:	4684      	mov	ip, r0
   219c0:	f170 0000 	sbcs.w	r0, r0, #0
   219c4:	bfbc      	itt	lt
   219c6:	2702      	movlt	r7, #2
   219c8:	f04f 0c00 	movlt.w	ip, #0
   219cc:	3f01      	subs	r7, #1
   219ce:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   219d2:	1c63      	adds	r3, r4, #1
   219d4:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   219d8:	db0a      	blt.n	219f0 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   219da:	2c01      	cmp	r4, #1
   219dc:	f171 0300 	sbcs.w	r3, r1, #0
   219e0:	4622      	mov	r2, r4
   219e2:	bfbc      	itt	lt
   219e4:	2201      	movlt	r2, #1
   219e6:	2100      	movlt	r1, #0
   219e8:	f112 39ff 	adds.w	r9, r2, #4294967295
   219ec:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   219f0:	4628      	mov	r0, r5
   219f2:	f7ff fd47 	bl	21484 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   219f6:	2300      	movs	r3, #0
	timer->period = period;
   219f8:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   219fc:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   219fe:	464a      	mov	r2, r9
   21a00:	4643      	mov	r3, r8
   21a02:	4628      	mov	r0, r5
		     duration);
}
   21a04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   21a08:	4902      	ldr	r1, [pc, #8]	; (21a14 <z_impl_k_timer_start+0x94>)
   21a0a:	f7ff bc75 	b.w	212f8 <z_add_timeout>
}
   21a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21a12:	bf00      	nop
   21a14:	00021825 	.word	0x00021825

00021a18 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   21a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   21a1c:	2600      	movs	r6, #0
{
   21a1e:	4688      	mov	r8, r1
   21a20:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   21a22:	4604      	mov	r4, r0
	int events_registered = 0;
   21a24:	4637      	mov	r7, r6
	event->poller = NULL;
   21a26:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a28:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 21be8 <register_events+0x1d0>
{
   21a2c:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   21a2e:	4546      	cmp	r6, r8
   21a30:	db03      	blt.n	21a3a <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   21a32:	4638      	mov	r0, r7
   21a34:	b003      	add	sp, #12
   21a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   21a3a:	f04f 0320 	mov.w	r3, #32
   21a3e:	f3ef 8b11 	mrs	fp, BASEPRI
   21a42:	f383 8812 	msr	BASEPRI_MAX, r3
   21a46:	f3bf 8f6f 	isb	sy
   21a4a:	4648      	mov	r0, r9
   21a4c:	f7fd f8ce 	bl	1ebec <z_spin_lock_valid>
   21a50:	b960      	cbnz	r0, 21a6c <register_events+0x54>
   21a52:	2394      	movs	r3, #148	; 0x94
   21a54:	4a65      	ldr	r2, [pc, #404]	; (21bec <register_events+0x1d4>)
   21a56:	4966      	ldr	r1, [pc, #408]	; (21bf0 <register_events+0x1d8>)
   21a58:	4866      	ldr	r0, [pc, #408]	; (21bf4 <register_events+0x1dc>)
   21a5a:	f002 fae2 	bl	24022 <assert_print>
   21a5e:	4962      	ldr	r1, [pc, #392]	; (21be8 <register_events+0x1d0>)
   21a60:	4865      	ldr	r0, [pc, #404]	; (21bf8 <register_events+0x1e0>)
   21a62:	f002 fade 	bl	24022 <assert_print>
   21a66:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a68:	4860      	ldr	r0, [pc, #384]	; (21bec <register_events+0x1d4>)
   21a6a:	e060      	b.n	21b2e <register_events+0x116>
	z_spin_lock_set_owner(l);
   21a6c:	4648      	mov	r0, r9
   21a6e:	f7fd f8d9 	bl	1ec24 <z_spin_lock_set_owner>
	switch (event->type) {
   21a72:	7b63      	ldrb	r3, [r4, #13]
   21a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21a78:	2b08      	cmp	r3, #8
   21a7a:	d84a      	bhi.n	21b12 <register_events+0xfa>
   21a7c:	e8df f003 	tbb	[pc, r3]
   21a80:	49053d2b 	.word	0x49053d2b
   21a84:	49494927 	.word	0x49494927
   21a88:	43          	.byte	0x43
   21a89:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   21a8a:	6923      	ldr	r3, [r4, #16]
   21a8c:	689b      	ldr	r3, [r3, #8]
   21a8e:	b313      	cbz	r3, 21ad6 <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   21a90:	2302      	movs	r3, #2
	event->state |= state;
   21a92:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   21a94:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   21a98:	f3c2 3186 	ubfx	r1, r2, #14, #7
   21a9c:	430b      	orrs	r3, r1
   21a9e:	f363 3294 	bfi	r2, r3, #14, #7
   21aa2:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   21aa4:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21aa8:	4648      	mov	r0, r9
   21aaa:	f7fd f8ad 	bl	1ec08 <z_spin_unlock_valid>
   21aae:	3414      	adds	r4, #20
   21ab0:	2800      	cmp	r0, #0
   21ab2:	f040 8092 	bne.w	21bda <register_events+0x1c2>
   21ab6:	23c2      	movs	r3, #194	; 0xc2
   21ab8:	4a4c      	ldr	r2, [pc, #304]	; (21bec <register_events+0x1d4>)
   21aba:	4950      	ldr	r1, [pc, #320]	; (21bfc <register_events+0x1e4>)
   21abc:	484d      	ldr	r0, [pc, #308]	; (21bf4 <register_events+0x1dc>)
   21abe:	f002 fab0 	bl	24022 <assert_print>
   21ac2:	4949      	ldr	r1, [pc, #292]	; (21be8 <register_events+0x1d0>)
   21ac4:	484e      	ldr	r0, [pc, #312]	; (21c00 <register_events+0x1e8>)
   21ac6:	f002 faac 	bl	24022 <assert_print>
   21aca:	21c2      	movs	r1, #194	; 0xc2
   21acc:	e7cc      	b.n	21a68 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   21ace:	6923      	ldr	r3, [r4, #16]
   21ad0:	681b      	ldr	r3, [r3, #0]
   21ad2:	2b00      	cmp	r3, #0
   21ad4:	d12d      	bne.n	21b32 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   21ad6:	9b01      	ldr	r3, [sp, #4]
   21ad8:	2b00      	cmp	r3, #0
   21ada:	d1e5      	bne.n	21aa8 <register_events+0x90>
   21adc:	782b      	ldrb	r3, [r5, #0]
   21ade:	2b00      	cmp	r3, #0
   21ae0:	d0e2      	beq.n	21aa8 <register_events+0x90>
	switch (event->type) {
   21ae2:	7b63      	ldrb	r3, [r4, #13]
   21ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21ae8:	2b08      	cmp	r3, #8
   21aea:	d86b      	bhi.n	21bc4 <register_events+0x1ac>
   21aec:	e8df f003 	tbb	[pc, r3]
   21af0:	6a234935 	.word	0x6a234935
   21af4:	6a6a6a38 	.word	0x6a6a6a38
   21af8:	59          	.byte	0x59
   21af9:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   21afa:	6923      	ldr	r3, [r4, #16]
   21afc:	689b      	ldr	r3, [r3, #8]
   21afe:	2b00      	cmp	r3, #0
   21b00:	d0e9      	beq.n	21ad6 <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   21b02:	2301      	movs	r3, #1
   21b04:	e7c5      	b.n	21a92 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   21b06:	6923      	ldr	r3, [r4, #16]
   21b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21b0a:	2b00      	cmp	r3, #0
   21b0c:	d0e3      	beq.n	21ad6 <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   21b0e:	2310      	movs	r3, #16
   21b10:	e7bf      	b.n	21a92 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   21b12:	2363      	movs	r3, #99	; 0x63
   21b14:	4a3b      	ldr	r2, [pc, #236]	; (21c04 <register_events+0x1ec>)
   21b16:	493c      	ldr	r1, [pc, #240]	; (21c08 <register_events+0x1f0>)
   21b18:	4836      	ldr	r0, [pc, #216]	; (21bf4 <register_events+0x1dc>)
   21b1a:	f002 fa82 	bl	24022 <assert_print>
   21b1e:	7b61      	ldrb	r1, [r4, #13]
   21b20:	483a      	ldr	r0, [pc, #232]	; (21c0c <register_events+0x1f4>)
   21b22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   21b26:	f002 fa7c 	bl	24022 <assert_print>
   21b2a:	2163      	movs	r1, #99	; 0x63
   21b2c:	4835      	ldr	r0, [pc, #212]	; (21c04 <register_events+0x1ec>)
   21b2e:	f002 fa71 	bl	24014 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   21b32:	2304      	movs	r3, #4
   21b34:	e7ad      	b.n	21a92 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   21b36:	6920      	ldr	r0, [r4, #16]
   21b38:	b950      	cbnz	r0, 21b50 <register_events+0x138>
   21b3a:	4935      	ldr	r1, [pc, #212]	; (21c10 <register_events+0x1f8>)
   21b3c:	238d      	movs	r3, #141	; 0x8d
   21b3e:	4a31      	ldr	r2, [pc, #196]	; (21c04 <register_events+0x1ec>)
   21b40:	482c      	ldr	r0, [pc, #176]	; (21bf4 <register_events+0x1dc>)
   21b42:	f002 fa6e 	bl	24022 <assert_print>
   21b46:	4833      	ldr	r0, [pc, #204]	; (21c14 <register_events+0x1fc>)
   21b48:	f002 fa6b 	bl	24022 <assert_print>
   21b4c:	218d      	movs	r1, #141	; 0x8d
   21b4e:	e7ed      	b.n	21b2c <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   21b50:	462a      	mov	r2, r5
   21b52:	4621      	mov	r1, r4
   21b54:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   21b56:	f006 fd7a 	bl	2864e <add_event>
	event->poller = poller;
   21b5a:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   21b5c:	3701      	adds	r7, #1
   21b5e:	e7a3      	b.n	21aa8 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   21b60:	6920      	ldr	r0, [r4, #16]
   21b62:	b950      	cbnz	r0, 21b7a <register_events+0x162>
   21b64:	492c      	ldr	r1, [pc, #176]	; (21c18 <register_events+0x200>)
   21b66:	2391      	movs	r3, #145	; 0x91
   21b68:	4a26      	ldr	r2, [pc, #152]	; (21c04 <register_events+0x1ec>)
   21b6a:	4822      	ldr	r0, [pc, #136]	; (21bf4 <register_events+0x1dc>)
   21b6c:	f002 fa59 	bl	24022 <assert_print>
   21b70:	482a      	ldr	r0, [pc, #168]	; (21c1c <register_events+0x204>)
   21b72:	f002 fa56 	bl	24022 <assert_print>
   21b76:	2191      	movs	r1, #145	; 0x91
   21b78:	e7d8      	b.n	21b2c <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   21b7a:	462a      	mov	r2, r5
   21b7c:	4621      	mov	r1, r4
   21b7e:	3014      	adds	r0, #20
   21b80:	e7e9      	b.n	21b56 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   21b82:	6920      	ldr	r0, [r4, #16]
   21b84:	b950      	cbnz	r0, 21b9c <register_events+0x184>
   21b86:	4926      	ldr	r1, [pc, #152]	; (21c20 <register_events+0x208>)
   21b88:	2395      	movs	r3, #149	; 0x95
   21b8a:	4a1e      	ldr	r2, [pc, #120]	; (21c04 <register_events+0x1ec>)
   21b8c:	4819      	ldr	r0, [pc, #100]	; (21bf4 <register_events+0x1dc>)
   21b8e:	f002 fa48 	bl	24022 <assert_print>
   21b92:	4824      	ldr	r0, [pc, #144]	; (21c24 <register_events+0x20c>)
   21b94:	f002 fa45 	bl	24022 <assert_print>
   21b98:	2195      	movs	r1, #149	; 0x95
   21b9a:	e7c7      	b.n	21b2c <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   21b9c:	462a      	mov	r2, r5
   21b9e:	4621      	mov	r1, r4
   21ba0:	e7d9      	b.n	21b56 <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   21ba2:	6920      	ldr	r0, [r4, #16]
   21ba4:	b950      	cbnz	r0, 21bbc <register_events+0x1a4>
   21ba6:	4920      	ldr	r1, [pc, #128]	; (21c28 <register_events+0x210>)
   21ba8:	2399      	movs	r3, #153	; 0x99
   21baa:	4a16      	ldr	r2, [pc, #88]	; (21c04 <register_events+0x1ec>)
   21bac:	4811      	ldr	r0, [pc, #68]	; (21bf4 <register_events+0x1dc>)
   21bae:	f002 fa38 	bl	24022 <assert_print>
   21bb2:	481e      	ldr	r0, [pc, #120]	; (21c2c <register_events+0x214>)
   21bb4:	f002 fa35 	bl	24022 <assert_print>
   21bb8:	2199      	movs	r1, #153	; 0x99
   21bba:	e7b7      	b.n	21b2c <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   21bbc:	462a      	mov	r2, r5
   21bbe:	4621      	mov	r1, r4
   21bc0:	3028      	adds	r0, #40	; 0x28
   21bc2:	e7c8      	b.n	21b56 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   21bc4:	4910      	ldr	r1, [pc, #64]	; (21c08 <register_events+0x1f0>)
   21bc6:	23a6      	movs	r3, #166	; 0xa6
   21bc8:	4a0e      	ldr	r2, [pc, #56]	; (21c04 <register_events+0x1ec>)
   21bca:	480a      	ldr	r0, [pc, #40]	; (21bf4 <register_events+0x1dc>)
   21bcc:	f002 fa29 	bl	24022 <assert_print>
   21bd0:	4817      	ldr	r0, [pc, #92]	; (21c30 <register_events+0x218>)
   21bd2:	f002 fa26 	bl	24022 <assert_print>
   21bd6:	21a6      	movs	r1, #166	; 0xa6
   21bd8:	e7a8      	b.n	21b2c <register_events+0x114>
	__asm__ volatile(
   21bda:	f38b 8811 	msr	BASEPRI, fp
   21bde:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   21be2:	3601      	adds	r6, #1
   21be4:	e723      	b.n	21a2e <register_events+0x16>
   21be6:	bf00      	nop
   21be8:	2002147c 	.word	0x2002147c
   21bec:	0002b32e 	.word	0x0002b32e
   21bf0:	0002b387 	.word	0x0002b387
   21bf4:	0002a669 	.word	0x0002a669
   21bf8:	0002b39c 	.word	0x0002b39c
   21bfc:	0002b35b 	.word	0x0002b35b
   21c00:	0002b372 	.word	0x0002b372
   21c04:	0002f8c2 	.word	0x0002f8c2
   21c08:	0002fb7c 	.word	0x0002fb7c
   21c0c:	0002f8e3 	.word	0x0002f8e3
   21c10:	0002f900 	.word	0x0002f900
   21c14:	0002f91a 	.word	0x0002f91a
   21c18:	0002f92f 	.word	0x0002f92f
   21c1c:	0002f94b 	.word	0x0002f94b
   21c20:	0002f95c 	.word	0x0002f95c
   21c24:	0002f979 	.word	0x0002f979
   21c28:	0002f990 	.word	0x0002f990
   21c2c:	0002f9ab 	.word	0x0002f9ab
   21c30:	0002f9c4 	.word	0x0002f9c4

00021c34 <clear_event_registrations>:
{
   21c34:	2314      	movs	r3, #20
   21c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c3a:	4615      	mov	r5, r2
	while (num_events--) {
   21c3c:	460c      	mov	r4, r1
	event->poller = NULL;
   21c3e:	2600      	movs	r6, #0
   21c40:	fb03 0001 	mla	r0, r3, r1, r0
   21c44:	4f4b      	ldr	r7, [pc, #300]	; (21d74 <clear_event_registrations+0x140>)
	while (num_events--) {
   21c46:	b90c      	cbnz	r4, 21c4c <clear_event_registrations+0x18>
}
   21c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   21c4c:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   21c50:	f1a0 0814 	sub.w	r8, r0, #20
   21c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   21c58:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   21c5c:	2b08      	cmp	r3, #8
   21c5e:	d842      	bhi.n	21ce6 <clear_event_registrations+0xb2>
   21c60:	e8df f003 	tbb	[pc, r3]
   21c64:	41052555 	.word	0x41052555
   21c68:	41414116 	.word	0x41414116
   21c6c:	33          	.byte	0x33
   21c6d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   21c6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   21c72:	2b00      	cmp	r3, #0
   21c74:	d142      	bne.n	21cfc <clear_event_registrations+0xc8>
   21c76:	4940      	ldr	r1, [pc, #256]	; (21d78 <clear_event_registrations+0x144>)
   21c78:	23b6      	movs	r3, #182	; 0xb6
   21c7a:	4a40      	ldr	r2, [pc, #256]	; (21d7c <clear_event_registrations+0x148>)
   21c7c:	4840      	ldr	r0, [pc, #256]	; (21d80 <clear_event_registrations+0x14c>)
   21c7e:	f002 f9d0 	bl	24022 <assert_print>
   21c82:	4840      	ldr	r0, [pc, #256]	; (21d84 <clear_event_registrations+0x150>)
   21c84:	f002 f9cd 	bl	24022 <assert_print>
   21c88:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   21c8a:	483c      	ldr	r0, [pc, #240]	; (21d7c <clear_event_registrations+0x148>)
   21c8c:	f002 f9c2 	bl	24014 <assert_post_action>
   21c90:	f850 3c04 	ldr.w	r3, [r0, #-4]
   21c94:	2b00      	cmp	r3, #0
   21c96:	d131      	bne.n	21cfc <clear_event_registrations+0xc8>
   21c98:	493b      	ldr	r1, [pc, #236]	; (21d88 <clear_event_registrations+0x154>)
   21c9a:	23ba      	movs	r3, #186	; 0xba
   21c9c:	4a37      	ldr	r2, [pc, #220]	; (21d7c <clear_event_registrations+0x148>)
   21c9e:	4838      	ldr	r0, [pc, #224]	; (21d80 <clear_event_registrations+0x14c>)
   21ca0:	f002 f9bf 	bl	24022 <assert_print>
   21ca4:	4839      	ldr	r0, [pc, #228]	; (21d8c <clear_event_registrations+0x158>)
   21ca6:	f002 f9bc 	bl	24022 <assert_print>
   21caa:	21ba      	movs	r1, #186	; 0xba
   21cac:	e7ed      	b.n	21c8a <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   21cae:	f850 3c04 	ldr.w	r3, [r0, #-4]
   21cb2:	bb1b      	cbnz	r3, 21cfc <clear_event_registrations+0xc8>
   21cb4:	4936      	ldr	r1, [pc, #216]	; (21d90 <clear_event_registrations+0x15c>)
   21cb6:	23be      	movs	r3, #190	; 0xbe
   21cb8:	4a30      	ldr	r2, [pc, #192]	; (21d7c <clear_event_registrations+0x148>)
   21cba:	4831      	ldr	r0, [pc, #196]	; (21d80 <clear_event_registrations+0x14c>)
   21cbc:	f002 f9b1 	bl	24022 <assert_print>
   21cc0:	4834      	ldr	r0, [pc, #208]	; (21d94 <clear_event_registrations+0x160>)
   21cc2:	f002 f9ae 	bl	24022 <assert_print>
   21cc6:	21be      	movs	r1, #190	; 0xbe
   21cc8:	e7df      	b.n	21c8a <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   21cca:	f850 3c04 	ldr.w	r3, [r0, #-4]
   21cce:	b9ab      	cbnz	r3, 21cfc <clear_event_registrations+0xc8>
   21cd0:	4931      	ldr	r1, [pc, #196]	; (21d98 <clear_event_registrations+0x164>)
   21cd2:	23c2      	movs	r3, #194	; 0xc2
   21cd4:	4a29      	ldr	r2, [pc, #164]	; (21d7c <clear_event_registrations+0x148>)
   21cd6:	482a      	ldr	r0, [pc, #168]	; (21d80 <clear_event_registrations+0x14c>)
   21cd8:	f002 f9a3 	bl	24022 <assert_print>
   21cdc:	482f      	ldr	r0, [pc, #188]	; (21d9c <clear_event_registrations+0x168>)
   21cde:	f002 f9a0 	bl	24022 <assert_print>
   21ce2:	21c2      	movs	r1, #194	; 0xc2
   21ce4:	e7d1      	b.n	21c8a <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   21ce6:	492e      	ldr	r1, [pc, #184]	; (21da0 <clear_event_registrations+0x16c>)
   21ce8:	23cf      	movs	r3, #207	; 0xcf
   21cea:	4a24      	ldr	r2, [pc, #144]	; (21d7c <clear_event_registrations+0x148>)
   21cec:	4824      	ldr	r0, [pc, #144]	; (21d80 <clear_event_registrations+0x14c>)
   21cee:	f002 f998 	bl	24022 <assert_print>
   21cf2:	482c      	ldr	r0, [pc, #176]	; (21da4 <clear_event_registrations+0x170>)
   21cf4:	f002 f995 	bl	24022 <assert_print>
   21cf8:	21cf      	movs	r1, #207	; 0xcf
   21cfa:	e7c6      	b.n	21c8a <clear_event_registrations+0x56>
	return node->next != NULL;
   21cfc:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   21d00:	b12b      	cbz	r3, 21d0e <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   21d02:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   21d06:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21d08:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   21d0a:	e940 6605 	strd	r6, r6, [r0, #-20]
   21d0e:	4638      	mov	r0, r7
   21d10:	f7fc ff7a 	bl	1ec08 <z_spin_unlock_valid>
   21d14:	b960      	cbnz	r0, 21d30 <clear_event_registrations+0xfc>
   21d16:	23c2      	movs	r3, #194	; 0xc2
   21d18:	4a23      	ldr	r2, [pc, #140]	; (21da8 <clear_event_registrations+0x174>)
   21d1a:	4924      	ldr	r1, [pc, #144]	; (21dac <clear_event_registrations+0x178>)
   21d1c:	4818      	ldr	r0, [pc, #96]	; (21d80 <clear_event_registrations+0x14c>)
   21d1e:	f002 f980 	bl	24022 <assert_print>
   21d22:	4914      	ldr	r1, [pc, #80]	; (21d74 <clear_event_registrations+0x140>)
   21d24:	4822      	ldr	r0, [pc, #136]	; (21db0 <clear_event_registrations+0x17c>)
   21d26:	f002 f97c 	bl	24022 <assert_print>
   21d2a:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d2c:	481e      	ldr	r0, [pc, #120]	; (21da8 <clear_event_registrations+0x174>)
   21d2e:	e7ad      	b.n	21c8c <clear_event_registrations+0x58>
   21d30:	f385 8811 	msr	BASEPRI, r5
   21d34:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21d38:	f04f 0320 	mov.w	r3, #32
   21d3c:	f3ef 8511 	mrs	r5, BASEPRI
   21d40:	f383 8812 	msr	BASEPRI_MAX, r3
   21d44:	f3bf 8f6f 	isb	sy
   21d48:	4638      	mov	r0, r7
   21d4a:	f7fc ff4f 	bl	1ebec <z_spin_lock_valid>
   21d4e:	3c01      	subs	r4, #1
   21d50:	b958      	cbnz	r0, 21d6a <clear_event_registrations+0x136>
   21d52:	2394      	movs	r3, #148	; 0x94
   21d54:	4a14      	ldr	r2, [pc, #80]	; (21da8 <clear_event_registrations+0x174>)
   21d56:	4917      	ldr	r1, [pc, #92]	; (21db4 <clear_event_registrations+0x180>)
   21d58:	4809      	ldr	r0, [pc, #36]	; (21d80 <clear_event_registrations+0x14c>)
   21d5a:	f002 f962 	bl	24022 <assert_print>
   21d5e:	4905      	ldr	r1, [pc, #20]	; (21d74 <clear_event_registrations+0x140>)
   21d60:	4815      	ldr	r0, [pc, #84]	; (21db8 <clear_event_registrations+0x184>)
   21d62:	f002 f95e 	bl	24022 <assert_print>
   21d66:	2194      	movs	r1, #148	; 0x94
   21d68:	e7e0      	b.n	21d2c <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   21d6a:	4638      	mov	r0, r7
   21d6c:	f7fc ff5a 	bl	1ec24 <z_spin_lock_set_owner>
	return k;
   21d70:	4640      	mov	r0, r8
   21d72:	e768      	b.n	21c46 <clear_event_registrations+0x12>
   21d74:	2002147c 	.word	0x2002147c
   21d78:	0002f900 	.word	0x0002f900
   21d7c:	0002f8c2 	.word	0x0002f8c2
   21d80:	0002a669 	.word	0x0002a669
   21d84:	0002f91a 	.word	0x0002f91a
   21d88:	0002f92f 	.word	0x0002f92f
   21d8c:	0002f94b 	.word	0x0002f94b
   21d90:	0002f95c 	.word	0x0002f95c
   21d94:	0002f979 	.word	0x0002f979
   21d98:	0002f990 	.word	0x0002f990
   21d9c:	0002f9ab 	.word	0x0002f9ab
   21da0:	0002fb7c 	.word	0x0002fb7c
   21da4:	0002f9c4 	.word	0x0002f9c4
   21da8:	0002b32e 	.word	0x0002b32e
   21dac:	0002b35b 	.word	0x0002b35b
   21db0:	0002b372 	.word	0x0002b372
   21db4:	0002b387 	.word	0x0002b387
   21db8:	0002b39c 	.word	0x0002b39c

00021dbc <k_poll_event_init>:
{
   21dbc:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   21dbe:	b162      	cbz	r2, 21dda <k_poll_event_init+0x1e>
   21dc0:	4917      	ldr	r1, [pc, #92]	; (21e20 <k_poll_event_init+0x64>)
   21dc2:	232d      	movs	r3, #45	; 0x2d
   21dc4:	4a17      	ldr	r2, [pc, #92]	; (21e24 <k_poll_event_init+0x68>)
   21dc6:	4818      	ldr	r0, [pc, #96]	; (21e28 <k_poll_event_init+0x6c>)
   21dc8:	f002 f92b 	bl	24022 <assert_print>
   21dcc:	4817      	ldr	r0, [pc, #92]	; (21e2c <k_poll_event_init+0x70>)
   21dce:	f002 f928 	bl	24022 <assert_print>
   21dd2:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   21dd4:	4813      	ldr	r0, [pc, #76]	; (21e24 <k_poll_event_init+0x68>)
   21dd6:	f002 f91d 	bl	24014 <assert_post_action>
   21dda:	293f      	cmp	r1, #63	; 0x3f
   21ddc:	d90a      	bls.n	21df4 <k_poll_event_init+0x38>
   21dde:	4914      	ldr	r1, [pc, #80]	; (21e30 <k_poll_event_init+0x74>)
   21de0:	232f      	movs	r3, #47	; 0x2f
   21de2:	4a10      	ldr	r2, [pc, #64]	; (21e24 <k_poll_event_init+0x68>)
   21de4:	4810      	ldr	r0, [pc, #64]	; (21e28 <k_poll_event_init+0x6c>)
   21de6:	f002 f91c 	bl	24022 <assert_print>
   21dea:	4812      	ldr	r0, [pc, #72]	; (21e34 <k_poll_event_init+0x78>)
   21dec:	f002 f919 	bl	24022 <assert_print>
   21df0:	212f      	movs	r1, #47	; 0x2f
   21df2:	e7ef      	b.n	21dd4 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   21df4:	b953      	cbnz	r3, 21e0c <k_poll_event_init+0x50>
   21df6:	4910      	ldr	r1, [pc, #64]	; (21e38 <k_poll_event_init+0x7c>)
   21df8:	2330      	movs	r3, #48	; 0x30
   21dfa:	4a0a      	ldr	r2, [pc, #40]	; (21e24 <k_poll_event_init+0x68>)
   21dfc:	480a      	ldr	r0, [pc, #40]	; (21e28 <k_poll_event_init+0x6c>)
   21dfe:	f002 f910 	bl	24022 <assert_print>
   21e02:	480e      	ldr	r0, [pc, #56]	; (21e3c <k_poll_event_init+0x80>)
   21e04:	f002 f90d 	bl	24022 <assert_print>
   21e08:	2130      	movs	r1, #48	; 0x30
   21e0a:	e7e3      	b.n	21dd4 <k_poll_event_init+0x18>
	event->poller = NULL;
   21e0c:	6082      	str	r2, [r0, #8]
	event->type = type;
   21e0e:	0209      	lsls	r1, r1, #8
   21e10:	7b02      	ldrb	r2, [r0, #12]
   21e12:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   21e16:	4311      	orrs	r1, r2
	event->obj = obj;
   21e18:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   21e1c:	bd08      	pop	{r3, pc}
   21e1e:	bf00      	nop
   21e20:	0002f9da 	.word	0x0002f9da
   21e24:	0002f8c2 	.word	0x0002f8c2
   21e28:	0002a669 	.word	0x0002a669
   21e2c:	0002f9fa 	.word	0x0002f9fa
   21e30:	0002fa20 	.word	0x0002fa20
   21e34:	0002fa44 	.word	0x0002fa44
   21e38:	0002fa54 	.word	0x0002fa54
   21e3c:	0002fa67 	.word	0x0002fa67

00021e40 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   21e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e44:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   21e46:	4b5c      	ldr	r3, [pc, #368]	; (21fb8 <z_impl_k_poll+0x178>)
{
   21e48:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   21e4a:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   21e4e:	2301      	movs	r3, #1
{
   21e50:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   21e52:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   21e56:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   21e5a:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   21e5e:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   21e62:	f1bb 0f00 	cmp.w	fp, #0
   21e66:	d00e      	beq.n	21e86 <z_impl_k_poll+0x46>
   21e68:	4954      	ldr	r1, [pc, #336]	; (21fbc <z_impl_k_poll+0x17c>)
   21e6a:	f240 132d 	movw	r3, #301	; 0x12d
   21e6e:	4a54      	ldr	r2, [pc, #336]	; (21fc0 <z_impl_k_poll+0x180>)
   21e70:	4854      	ldr	r0, [pc, #336]	; (21fc4 <z_impl_k_poll+0x184>)
   21e72:	f002 f8d6 	bl	24022 <assert_print>
   21e76:	4854      	ldr	r0, [pc, #336]	; (21fc8 <z_impl_k_poll+0x188>)
   21e78:	f002 f8d3 	bl	24022 <assert_print>
   21e7c:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   21e80:	484f      	ldr	r0, [pc, #316]	; (21fc0 <z_impl_k_poll+0x180>)
   21e82:	f002 f8c7 	bl	24014 <assert_post_action>
   21e86:	b960      	cbnz	r0, 21ea2 <z_impl_k_poll+0x62>
   21e88:	4950      	ldr	r1, [pc, #320]	; (21fcc <z_impl_k_poll+0x18c>)
   21e8a:	f44f 7397 	mov.w	r3, #302	; 0x12e
   21e8e:	4a4c      	ldr	r2, [pc, #304]	; (21fc0 <z_impl_k_poll+0x180>)
   21e90:	484c      	ldr	r0, [pc, #304]	; (21fc4 <z_impl_k_poll+0x184>)
   21e92:	f002 f8c6 	bl	24022 <assert_print>
   21e96:	484e      	ldr	r0, [pc, #312]	; (21fd0 <z_impl_k_poll+0x190>)
   21e98:	f002 f8c3 	bl	24022 <assert_print>
   21e9c:	f44f 7197 	mov.w	r1, #302	; 0x12e
   21ea0:	e7ee      	b.n	21e80 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   21ea2:	2900      	cmp	r1, #0
   21ea4:	da0c      	bge.n	21ec0 <z_impl_k_poll+0x80>
   21ea6:	494b      	ldr	r1, [pc, #300]	; (21fd4 <z_impl_k_poll+0x194>)
   21ea8:	f240 132f 	movw	r3, #303	; 0x12f
   21eac:	4a44      	ldr	r2, [pc, #272]	; (21fc0 <z_impl_k_poll+0x180>)
   21eae:	4845      	ldr	r0, [pc, #276]	; (21fc4 <z_impl_k_poll+0x184>)
   21eb0:	f002 f8b7 	bl	24022 <assert_print>
   21eb4:	4848      	ldr	r0, [pc, #288]	; (21fd8 <z_impl_k_poll+0x198>)
   21eb6:	f002 f8b4 	bl	24022 <assert_print>
   21eba:	f240 112f 	movw	r1, #303	; 0x12f
   21ebe:	e7df      	b.n	21e80 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   21ec0:	ea57 0306 	orrs.w	r3, r7, r6
   21ec4:	bf0c      	ite	eq
   21ec6:	2301      	moveq	r3, #1
   21ec8:	2300      	movne	r3, #0
   21eca:	f7ff fda5 	bl	21a18 <register_events>
   21ece:	4681      	mov	r9, r0
   21ed0:	f04f 0320 	mov.w	r3, #32
   21ed4:	f3ef 8a11 	mrs	sl, BASEPRI
   21ed8:	f383 8812 	msr	BASEPRI_MAX, r3
   21edc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ee0:	483e      	ldr	r0, [pc, #248]	; (21fdc <z_impl_k_poll+0x19c>)
   21ee2:	f7fc fe83 	bl	1ebec <z_spin_lock_valid>
   21ee6:	b960      	cbnz	r0, 21f02 <z_impl_k_poll+0xc2>
   21ee8:	2394      	movs	r3, #148	; 0x94
   21eea:	4a3d      	ldr	r2, [pc, #244]	; (21fe0 <z_impl_k_poll+0x1a0>)
   21eec:	493d      	ldr	r1, [pc, #244]	; (21fe4 <z_impl_k_poll+0x1a4>)
   21eee:	4835      	ldr	r0, [pc, #212]	; (21fc4 <z_impl_k_poll+0x184>)
   21ef0:	f002 f897 	bl	24022 <assert_print>
   21ef4:	4939      	ldr	r1, [pc, #228]	; (21fdc <z_impl_k_poll+0x19c>)
   21ef6:	483c      	ldr	r0, [pc, #240]	; (21fe8 <z_impl_k_poll+0x1a8>)
   21ef8:	f002 f893 	bl	24022 <assert_print>
   21efc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21efe:	4838      	ldr	r0, [pc, #224]	; (21fe0 <z_impl_k_poll+0x1a0>)
   21f00:	e7bf      	b.n	21e82 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   21f02:	4836      	ldr	r0, [pc, #216]	; (21fdc <z_impl_k_poll+0x19c>)
   21f04:	f7fc fe8e 	bl	1ec24 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   21f08:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   21f0c:	b9e4      	cbnz	r4, 21f48 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   21f0e:	4628      	mov	r0, r5
   21f10:	4652      	mov	r2, sl
   21f12:	4649      	mov	r1, r9
   21f14:	f7ff fe8e 	bl	21c34 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f18:	4830      	ldr	r0, [pc, #192]	; (21fdc <z_impl_k_poll+0x19c>)
   21f1a:	f7fc fe75 	bl	1ec08 <z_spin_unlock_valid>
   21f1e:	b958      	cbnz	r0, 21f38 <z_impl_k_poll+0xf8>
   21f20:	23c2      	movs	r3, #194	; 0xc2
   21f22:	4a2f      	ldr	r2, [pc, #188]	; (21fe0 <z_impl_k_poll+0x1a0>)
   21f24:	4931      	ldr	r1, [pc, #196]	; (21fec <z_impl_k_poll+0x1ac>)
   21f26:	4827      	ldr	r0, [pc, #156]	; (21fc4 <z_impl_k_poll+0x184>)
   21f28:	f002 f87b 	bl	24022 <assert_print>
   21f2c:	492b      	ldr	r1, [pc, #172]	; (21fdc <z_impl_k_poll+0x19c>)
   21f2e:	4830      	ldr	r0, [pc, #192]	; (21ff0 <z_impl_k_poll+0x1b0>)
   21f30:	f002 f877 	bl	24022 <assert_print>
   21f34:	21c2      	movs	r1, #194	; 0xc2
   21f36:	e7e2      	b.n	21efe <z_impl_k_poll+0xbe>
	__asm__ volatile(
   21f38:	f38a 8811 	msr	BASEPRI, sl
   21f3c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   21f40:	4620      	mov	r0, r4
   21f42:	b003      	add	sp, #12
   21f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21f48:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   21f4c:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21f50:	d10b      	bne.n	21f6a <z_impl_k_poll+0x12a>
   21f52:	4822      	ldr	r0, [pc, #136]	; (21fdc <z_impl_k_poll+0x19c>)
   21f54:	f7fc fe58 	bl	1ec08 <z_spin_unlock_valid>
   21f58:	2800      	cmp	r0, #0
   21f5a:	d0e1      	beq.n	21f20 <z_impl_k_poll+0xe0>
   21f5c:	f38a 8811 	msr	BASEPRI, sl
   21f60:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   21f64:	f06f 040a 	mvn.w	r4, #10
   21f68:	e7ea      	b.n	21f40 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   21f6a:	4651      	mov	r1, sl
   21f6c:	e9cd 7600 	strd	r7, r6, [sp]
   21f70:	4a20      	ldr	r2, [pc, #128]	; (21ff4 <z_impl_k_poll+0x1b4>)
   21f72:	481a      	ldr	r0, [pc, #104]	; (21fdc <z_impl_k_poll+0x19c>)
   21f74:	f7fe fbd2 	bl	2071c <z_pend_curr>
   21f78:	4604      	mov	r4, r0
	__asm__ volatile(
   21f7a:	f04f 0320 	mov.w	r3, #32
   21f7e:	f3ef 8611 	mrs	r6, BASEPRI
   21f82:	f383 8812 	msr	BASEPRI_MAX, r3
   21f86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f8a:	4814      	ldr	r0, [pc, #80]	; (21fdc <z_impl_k_poll+0x19c>)
   21f8c:	f7fc fe2e 	bl	1ebec <z_spin_lock_valid>
   21f90:	2800      	cmp	r0, #0
   21f92:	d0a9      	beq.n	21ee8 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   21f94:	4811      	ldr	r0, [pc, #68]	; (21fdc <z_impl_k_poll+0x19c>)
   21f96:	f7fc fe45 	bl	1ec24 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   21f9a:	4628      	mov	r0, r5
   21f9c:	4632      	mov	r2, r6
   21f9e:	4649      	mov	r1, r9
   21fa0:	f7ff fe48 	bl	21c34 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fa4:	480d      	ldr	r0, [pc, #52]	; (21fdc <z_impl_k_poll+0x19c>)
   21fa6:	f7fc fe2f 	bl	1ec08 <z_spin_unlock_valid>
   21faa:	2800      	cmp	r0, #0
   21fac:	d0b8      	beq.n	21f20 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   21fae:	f386 8811 	msr	BASEPRI, r6
   21fb2:	f3bf 8f6f 	isb	sy
	return swap_rc;
   21fb6:	e7c3      	b.n	21f40 <z_impl_k_poll+0x100>
   21fb8:	20021424 	.word	0x20021424
   21fbc:	0002f44b 	.word	0x0002f44b
   21fc0:	0002f8c2 	.word	0x0002f8c2
   21fc4:	0002a669 	.word	0x0002a669
   21fc8:	0002df2c 	.word	0x0002df2c
   21fcc:	0002fa81 	.word	0x0002fa81
   21fd0:	0002fa97 	.word	0x0002fa97
   21fd4:	0002faa6 	.word	0x0002faa6
   21fd8:	0002fab6 	.word	0x0002fab6
   21fdc:	2002147c 	.word	0x2002147c
   21fe0:	0002b32e 	.word	0x0002b32e
   21fe4:	0002b387 	.word	0x0002b387
   21fe8:	0002b39c 	.word	0x0002b39c
   21fec:	0002b35b 	.word	0x0002b35b
   21ff0:	0002b372 	.word	0x0002b372
   21ff4:	20008740 	.word	0x20008740

00021ff8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   21ff8:	b570      	push	{r4, r5, r6, lr}
   21ffa:	4604      	mov	r4, r0
   21ffc:	460d      	mov	r5, r1
	__asm__ volatile(
   21ffe:	f04f 0320 	mov.w	r3, #32
   22002:	f3ef 8611 	mrs	r6, BASEPRI
   22006:	f383 8812 	msr	BASEPRI_MAX, r3
   2200a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2200e:	4820      	ldr	r0, [pc, #128]	; (22090 <z_impl_k_poll_signal_raise+0x98>)
   22010:	f7fc fdec 	bl	1ebec <z_spin_lock_valid>
   22014:	b968      	cbnz	r0, 22032 <z_impl_k_poll_signal_raise+0x3a>
   22016:	2394      	movs	r3, #148	; 0x94
   22018:	4a1e      	ldr	r2, [pc, #120]	; (22094 <z_impl_k_poll_signal_raise+0x9c>)
   2201a:	491f      	ldr	r1, [pc, #124]	; (22098 <z_impl_k_poll_signal_raise+0xa0>)
   2201c:	481f      	ldr	r0, [pc, #124]	; (2209c <z_impl_k_poll_signal_raise+0xa4>)
   2201e:	f002 f800 	bl	24022 <assert_print>
   22022:	491b      	ldr	r1, [pc, #108]	; (22090 <z_impl_k_poll_signal_raise+0x98>)
   22024:	481e      	ldr	r0, [pc, #120]	; (220a0 <z_impl_k_poll_signal_raise+0xa8>)
   22026:	f001 fffc 	bl	24022 <assert_print>
   2202a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2202c:	4819      	ldr	r0, [pc, #100]	; (22094 <z_impl_k_poll_signal_raise+0x9c>)
   2202e:	f001 fff1 	bl	24014 <assert_post_action>
	z_spin_lock_set_owner(l);
   22032:	4817      	ldr	r0, [pc, #92]	; (22090 <z_impl_k_poll_signal_raise+0x98>)
   22034:	f7fc fdf6 	bl	1ec24 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   22038:	2101      	movs	r1, #1
	return list->head == list;
   2203a:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   2203c:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2203e:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   22040:	60a1      	str	r1, [r4, #8]
   22042:	d10f      	bne.n	22064 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22044:	4812      	ldr	r0, [pc, #72]	; (22090 <z_impl_k_poll_signal_raise+0x98>)
   22046:	f7fc fddf 	bl	1ec08 <z_spin_unlock_valid>
   2204a:	b9d8      	cbnz	r0, 22084 <z_impl_k_poll_signal_raise+0x8c>
   2204c:	23c2      	movs	r3, #194	; 0xc2
   2204e:	4a11      	ldr	r2, [pc, #68]	; (22094 <z_impl_k_poll_signal_raise+0x9c>)
   22050:	4914      	ldr	r1, [pc, #80]	; (220a4 <z_impl_k_poll_signal_raise+0xac>)
   22052:	4812      	ldr	r0, [pc, #72]	; (2209c <z_impl_k_poll_signal_raise+0xa4>)
   22054:	f001 ffe5 	bl	24022 <assert_print>
   22058:	490d      	ldr	r1, [pc, #52]	; (22090 <z_impl_k_poll_signal_raise+0x98>)
   2205a:	4813      	ldr	r0, [pc, #76]	; (220a8 <z_impl_k_poll_signal_raise+0xb0>)
   2205c:	f001 ffe1 	bl	24022 <assert_print>
   22060:	21c2      	movs	r1, #194	; 0xc2
   22062:	e7e3      	b.n	2202c <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   22064:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22068:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2206a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2206c:	2300      	movs	r3, #0
	node->prev = NULL;
   2206e:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22072:	f006 fb1d 	bl	286b0 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   22076:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22078:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2207a:	4805      	ldr	r0, [pc, #20]	; (22090 <z_impl_k_poll_signal_raise+0x98>)
   2207c:	f7fe f880 	bl	20180 <z_reschedule>
	return rc;
}
   22080:	4620      	mov	r0, r4
   22082:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   22084:	f386 8811 	msr	BASEPRI, r6
   22088:	f3bf 8f6f 	isb	sy
		return 0;
   2208c:	2400      	movs	r4, #0
   2208e:	e7f7      	b.n	22080 <z_impl_k_poll_signal_raise+0x88>
   22090:	2002147c 	.word	0x2002147c
   22094:	0002b32e 	.word	0x0002b32e
   22098:	0002b387 	.word	0x0002b387
   2209c:	0002a669 	.word	0x0002a669
   220a0:	0002b39c 	.word	0x0002b39c
   220a4:	0002b35b 	.word	0x0002b35b
   220a8:	0002b372 	.word	0x0002b372

000220ac <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   220ac:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   220ae:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   220b2:	4606      	mov	r6, r0
   220b4:	460d      	mov	r5, r1
   220b6:	d220      	bcs.n	220fa <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   220b8:	f04f 0800 	mov.w	r8, #0
   220bc:	f04f 0900 	mov.w	r9, #0
   220c0:	f041 0104 	orr.w	r1, r1, #4
   220c4:	e9cd 8900 	strd	r8, r9, [sp]
   220c8:	f7fc fa8c 	bl	1e5e4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   220cc:	4604      	mov	r4, r0
   220ce:	b1a0      	cbz	r0, 220fa <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   220d0:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   220d4:	b195      	cbz	r5, 220fc <z_heap_aligned_alloc+0x50>
   220d6:	1e6b      	subs	r3, r5, #1
   220d8:	421c      	tst	r4, r3
   220da:	d00f      	beq.n	220fc <z_heap_aligned_alloc+0x50>
   220dc:	2325      	movs	r3, #37	; 0x25
   220de:	4a09      	ldr	r2, [pc, #36]	; (22104 <z_heap_aligned_alloc+0x58>)
   220e0:	4909      	ldr	r1, [pc, #36]	; (22108 <z_heap_aligned_alloc+0x5c>)
   220e2:	480a      	ldr	r0, [pc, #40]	; (2210c <z_heap_aligned_alloc+0x60>)
   220e4:	f001 ff9d 	bl	24022 <assert_print>
   220e8:	4621      	mov	r1, r4
   220ea:	4809      	ldr	r0, [pc, #36]	; (22110 <z_heap_aligned_alloc+0x64>)
   220ec:	462a      	mov	r2, r5
   220ee:	f001 ff98 	bl	24022 <assert_print>
   220f2:	2125      	movs	r1, #37	; 0x25
   220f4:	4803      	ldr	r0, [pc, #12]	; (22104 <z_heap_aligned_alloc+0x58>)
   220f6:	f001 ff8d 	bl	24014 <assert_post_action>
		return NULL;
   220fa:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   220fc:	4620      	mov	r0, r4
   220fe:	b002      	add	sp, #8
   22100:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   22104:	0002fac3 	.word	0x0002fac3
   22108:	0002fae7 	.word	0x0002fae7
   2210c:	0002a669 	.word	0x0002a669
   22110:	0002fb19 	.word	0x0002fb19

00022114 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   22114:	2803      	cmp	r0, #3
{
   22116:	460a      	mov	r2, r1
   22118:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   2211a:	d901      	bls.n	22120 <k_aligned_alloc+0xc>
   2211c:	0783      	lsls	r3, r0, #30
   2211e:	d00c      	beq.n	2213a <k_aligned_alloc+0x26>
   22120:	4910      	ldr	r1, [pc, #64]	; (22164 <k_aligned_alloc+0x50>)
   22122:	2342      	movs	r3, #66	; 0x42
   22124:	4a10      	ldr	r2, [pc, #64]	; (22168 <k_aligned_alloc+0x54>)
   22126:	4811      	ldr	r0, [pc, #68]	; (2216c <k_aligned_alloc+0x58>)
   22128:	f001 ff7b 	bl	24022 <assert_print>
   2212c:	4810      	ldr	r0, [pc, #64]	; (22170 <k_aligned_alloc+0x5c>)
   2212e:	f001 ff78 	bl	24022 <assert_print>
   22132:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   22134:	480c      	ldr	r0, [pc, #48]	; (22168 <k_aligned_alloc+0x54>)
   22136:	f001 ff6d 	bl	24014 <assert_post_action>
   2213a:	1e43      	subs	r3, r0, #1
   2213c:	4203      	tst	r3, r0
   2213e:	d00a      	beq.n	22156 <k_aligned_alloc+0x42>
   22140:	490c      	ldr	r1, [pc, #48]	; (22174 <k_aligned_alloc+0x60>)
   22142:	2346      	movs	r3, #70	; 0x46
   22144:	4a08      	ldr	r2, [pc, #32]	; (22168 <k_aligned_alloc+0x54>)
   22146:	4809      	ldr	r0, [pc, #36]	; (2216c <k_aligned_alloc+0x58>)
   22148:	f001 ff6b 	bl	24022 <assert_print>
   2214c:	480a      	ldr	r0, [pc, #40]	; (22178 <k_aligned_alloc+0x64>)
   2214e:	f001 ff68 	bl	24022 <assert_print>
   22152:	2146      	movs	r1, #70	; 0x46
   22154:	e7ee      	b.n	22134 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   22156:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   22158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2215c:	4807      	ldr	r0, [pc, #28]	; (2217c <k_aligned_alloc+0x68>)
   2215e:	f7ff bfa5 	b.w	220ac <z_heap_aligned_alloc>
   22162:	bf00      	nop
   22164:	0002fb41 	.word	0x0002fb41
   22168:	0002fac3 	.word	0x0002fac3
   2216c:	0002a669 	.word	0x0002a669
   22170:	0002fb7e 	.word	0x0002fb7e
   22174:	0002b198 	.word	0x0002b198
   22178:	0002b1b3 	.word	0x0002b1b3
   2217c:	20008a6c 	.word	0x20008a6c

00022180 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   22180:	4b01      	ldr	r3, [pc, #4]	; (22188 <k_thread_system_pool_assign+0x8>)
   22182:	6743      	str	r3, [r0, #116]	; 0x74
}
   22184:	4770      	bx	lr
   22186:	bf00      	nop
   22188:	20008a6c 	.word	0x20008a6c

0002218c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2218c:	b538      	push	{r3, r4, r5, lr}
   2218e:	4604      	mov	r4, r0
   22190:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   22192:	f006 f911 	bl	283b8 <k_is_in_isr>
   22196:	b920      	cbnz	r0, 221a2 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   22198:	4b06      	ldr	r3, [pc, #24]	; (221b4 <z_thread_aligned_alloc+0x28>)
   2219a:	689b      	ldr	r3, [r3, #8]
   2219c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2219e:	b90b      	cbnz	r3, 221a4 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   221a0:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   221a2:	4b05      	ldr	r3, [pc, #20]	; (221b8 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   221a4:	462a      	mov	r2, r5
   221a6:	4621      	mov	r1, r4
   221a8:	4618      	mov	r0, r3
}
   221aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   221ae:	f7ff bf7d 	b.w	220ac <z_heap_aligned_alloc>
   221b2:	bf00      	nop
   221b4:	20021424 	.word	0x20021424
   221b8:	20008a6c 	.word	0x20008a6c

000221bc <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   221bc:	4801      	ldr	r0, [pc, #4]	; (221c4 <boot_banner+0x8>)
   221be:	f001 bd6e 	b.w	23c9e <printk>
   221c2:	bf00      	nop
   221c4:	0002fbab 	.word	0x0002fbab

000221c8 <log>:
   221c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   221ca:	4604      	mov	r4, r0
   221cc:	460d      	mov	r5, r1
   221ce:	f7e7 fba3 	bl	9918 <__ieee754_log>
   221d2:	4b17      	ldr	r3, [pc, #92]	; (22230 <log+0x68>)
   221d4:	4606      	mov	r6, r0
   221d6:	460f      	mov	r7, r1
   221d8:	f993 3000 	ldrsb.w	r3, [r3]
   221dc:	3301      	adds	r3, #1
   221de:	d01a      	beq.n	22216 <log+0x4e>
   221e0:	4622      	mov	r2, r4
   221e2:	462b      	mov	r3, r5
   221e4:	4620      	mov	r0, r4
   221e6:	4629      	mov	r1, r5
   221e8:	f7e6 ff24 	bl	9034 <__aeabi_dcmpun>
   221ec:	b998      	cbnz	r0, 22216 <log+0x4e>
   221ee:	2200      	movs	r2, #0
   221f0:	2300      	movs	r3, #0
   221f2:	4620      	mov	r0, r4
   221f4:	4629      	mov	r1, r5
   221f6:	f7e6 ff13 	bl	9020 <__aeabi_dcmpgt>
   221fa:	b960      	cbnz	r0, 22216 <log+0x4e>
   221fc:	2200      	movs	r2, #0
   221fe:	2300      	movs	r3, #0
   22200:	4620      	mov	r0, r4
   22202:	4629      	mov	r1, r5
   22204:	f7e6 fee4 	bl	8fd0 <__aeabi_dcmpeq>
   22208:	b140      	cbz	r0, 2221c <log+0x54>
   2220a:	f002 fe5e 	bl	24eca <__errno>
   2220e:	2600      	movs	r6, #0
   22210:	2322      	movs	r3, #34	; 0x22
   22212:	4f08      	ldr	r7, [pc, #32]	; (22234 <log+0x6c>)
   22214:	6003      	str	r3, [r0, #0]
   22216:	4630      	mov	r0, r6
   22218:	4639      	mov	r1, r7
   2221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2221c:	f002 fe55 	bl	24eca <__errno>
   22220:	2321      	movs	r3, #33	; 0x21
   22222:	6003      	str	r3, [r0, #0]
   22224:	4804      	ldr	r0, [pc, #16]	; (22238 <log+0x70>)
   22226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2222a:	f000 b807 	b.w	2223c <nan>
   2222e:	bf00      	nop
   22230:	200089eb 	.word	0x200089eb
   22234:	fff00000 	.word	0xfff00000
   22238:	0002df2e 	.word	0x0002df2e

0002223c <nan>:
   2223c:	2000      	movs	r0, #0
   2223e:	4901      	ldr	r1, [pc, #4]	; (22244 <nan+0x8>)
   22240:	4770      	bx	lr
   22242:	bf00      	nop
   22244:	7ff80000 	.word	0x7ff80000

00022248 <malloc>:
   22248:	4b02      	ldr	r3, [pc, #8]	; (22254 <malloc+0xc>)
   2224a:	4601      	mov	r1, r0
   2224c:	6818      	ldr	r0, [r3, #0]
   2224e:	f000 b84d 	b.w	222ec <_malloc_r>
   22252:	bf00      	nop
   22254:	20008748 	.word	0x20008748

00022258 <_free_r>:
   22258:	b538      	push	{r3, r4, r5, lr}
   2225a:	4605      	mov	r5, r0
   2225c:	2900      	cmp	r1, #0
   2225e:	d041      	beq.n	222e4 <_free_r+0x8c>
   22260:	f851 3c04 	ldr.w	r3, [r1, #-4]
   22264:	1f0c      	subs	r4, r1, #4
   22266:	2b00      	cmp	r3, #0
   22268:	bfb8      	it	lt
   2226a:	18e4      	addlt	r4, r4, r3
   2226c:	f000 fd18 	bl	22ca0 <__malloc_lock>
   22270:	4a1d      	ldr	r2, [pc, #116]	; (222e8 <_free_r+0x90>)
   22272:	6813      	ldr	r3, [r2, #0]
   22274:	b933      	cbnz	r3, 22284 <_free_r+0x2c>
   22276:	6063      	str	r3, [r4, #4]
   22278:	6014      	str	r4, [r2, #0]
   2227a:	4628      	mov	r0, r5
   2227c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22280:	f000 bd14 	b.w	22cac <__malloc_unlock>
   22284:	42a3      	cmp	r3, r4
   22286:	d908      	bls.n	2229a <_free_r+0x42>
   22288:	6820      	ldr	r0, [r4, #0]
   2228a:	1821      	adds	r1, r4, r0
   2228c:	428b      	cmp	r3, r1
   2228e:	bf01      	itttt	eq
   22290:	6819      	ldreq	r1, [r3, #0]
   22292:	685b      	ldreq	r3, [r3, #4]
   22294:	1809      	addeq	r1, r1, r0
   22296:	6021      	streq	r1, [r4, #0]
   22298:	e7ed      	b.n	22276 <_free_r+0x1e>
   2229a:	461a      	mov	r2, r3
   2229c:	685b      	ldr	r3, [r3, #4]
   2229e:	b10b      	cbz	r3, 222a4 <_free_r+0x4c>
   222a0:	42a3      	cmp	r3, r4
   222a2:	d9fa      	bls.n	2229a <_free_r+0x42>
   222a4:	6811      	ldr	r1, [r2, #0]
   222a6:	1850      	adds	r0, r2, r1
   222a8:	42a0      	cmp	r0, r4
   222aa:	d10b      	bne.n	222c4 <_free_r+0x6c>
   222ac:	6820      	ldr	r0, [r4, #0]
   222ae:	4401      	add	r1, r0
   222b0:	1850      	adds	r0, r2, r1
   222b2:	6011      	str	r1, [r2, #0]
   222b4:	4283      	cmp	r3, r0
   222b6:	d1e0      	bne.n	2227a <_free_r+0x22>
   222b8:	6818      	ldr	r0, [r3, #0]
   222ba:	685b      	ldr	r3, [r3, #4]
   222bc:	4408      	add	r0, r1
   222be:	6053      	str	r3, [r2, #4]
   222c0:	6010      	str	r0, [r2, #0]
   222c2:	e7da      	b.n	2227a <_free_r+0x22>
   222c4:	d902      	bls.n	222cc <_free_r+0x74>
   222c6:	230c      	movs	r3, #12
   222c8:	602b      	str	r3, [r5, #0]
   222ca:	e7d6      	b.n	2227a <_free_r+0x22>
   222cc:	6820      	ldr	r0, [r4, #0]
   222ce:	1821      	adds	r1, r4, r0
   222d0:	428b      	cmp	r3, r1
   222d2:	bf02      	ittt	eq
   222d4:	6819      	ldreq	r1, [r3, #0]
   222d6:	685b      	ldreq	r3, [r3, #4]
   222d8:	1809      	addeq	r1, r1, r0
   222da:	6063      	str	r3, [r4, #4]
   222dc:	bf08      	it	eq
   222de:	6021      	streq	r1, [r4, #0]
   222e0:	6054      	str	r4, [r2, #4]
   222e2:	e7ca      	b.n	2227a <_free_r+0x22>
   222e4:	bd38      	pop	{r3, r4, r5, pc}
   222e6:	bf00      	nop
   222e8:	20021484 	.word	0x20021484

000222ec <_malloc_r>:
   222ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222ee:	1ccd      	adds	r5, r1, #3
   222f0:	4606      	mov	r6, r0
   222f2:	f025 0503 	bic.w	r5, r5, #3
   222f6:	3508      	adds	r5, #8
   222f8:	2d0c      	cmp	r5, #12
   222fa:	bf38      	it	cc
   222fc:	250c      	movcc	r5, #12
   222fe:	2d00      	cmp	r5, #0
   22300:	db01      	blt.n	22306 <_malloc_r+0x1a>
   22302:	42a9      	cmp	r1, r5
   22304:	d903      	bls.n	2230e <_malloc_r+0x22>
   22306:	230c      	movs	r3, #12
   22308:	6033      	str	r3, [r6, #0]
   2230a:	2000      	movs	r0, #0
   2230c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2230e:	f000 fcc7 	bl	22ca0 <__malloc_lock>
   22312:	4921      	ldr	r1, [pc, #132]	; (22398 <_malloc_r+0xac>)
   22314:	680a      	ldr	r2, [r1, #0]
   22316:	4614      	mov	r4, r2
   22318:	b99c      	cbnz	r4, 22342 <_malloc_r+0x56>
   2231a:	4f20      	ldr	r7, [pc, #128]	; (2239c <_malloc_r+0xb0>)
   2231c:	683b      	ldr	r3, [r7, #0]
   2231e:	b923      	cbnz	r3, 2232a <_malloc_r+0x3e>
   22320:	4621      	mov	r1, r4
   22322:	4630      	mov	r0, r6
   22324:	f000 fbb8 	bl	22a98 <_sbrk_r>
   22328:	6038      	str	r0, [r7, #0]
   2232a:	4629      	mov	r1, r5
   2232c:	4630      	mov	r0, r6
   2232e:	f000 fbb3 	bl	22a98 <_sbrk_r>
   22332:	1c43      	adds	r3, r0, #1
   22334:	d123      	bne.n	2237e <_malloc_r+0x92>
   22336:	230c      	movs	r3, #12
   22338:	4630      	mov	r0, r6
   2233a:	6033      	str	r3, [r6, #0]
   2233c:	f000 fcb6 	bl	22cac <__malloc_unlock>
   22340:	e7e3      	b.n	2230a <_malloc_r+0x1e>
   22342:	6823      	ldr	r3, [r4, #0]
   22344:	1b5b      	subs	r3, r3, r5
   22346:	d417      	bmi.n	22378 <_malloc_r+0x8c>
   22348:	2b0b      	cmp	r3, #11
   2234a:	d903      	bls.n	22354 <_malloc_r+0x68>
   2234c:	6023      	str	r3, [r4, #0]
   2234e:	441c      	add	r4, r3
   22350:	6025      	str	r5, [r4, #0]
   22352:	e004      	b.n	2235e <_malloc_r+0x72>
   22354:	6863      	ldr	r3, [r4, #4]
   22356:	42a2      	cmp	r2, r4
   22358:	bf0c      	ite	eq
   2235a:	600b      	streq	r3, [r1, #0]
   2235c:	6053      	strne	r3, [r2, #4]
   2235e:	4630      	mov	r0, r6
   22360:	f000 fca4 	bl	22cac <__malloc_unlock>
   22364:	f104 000b 	add.w	r0, r4, #11
   22368:	1d23      	adds	r3, r4, #4
   2236a:	f020 0007 	bic.w	r0, r0, #7
   2236e:	1ac2      	subs	r2, r0, r3
   22370:	bf1c      	itt	ne
   22372:	1a1b      	subne	r3, r3, r0
   22374:	50a3      	strne	r3, [r4, r2]
   22376:	e7c9      	b.n	2230c <_malloc_r+0x20>
   22378:	4622      	mov	r2, r4
   2237a:	6864      	ldr	r4, [r4, #4]
   2237c:	e7cc      	b.n	22318 <_malloc_r+0x2c>
   2237e:	1cc4      	adds	r4, r0, #3
   22380:	f024 0403 	bic.w	r4, r4, #3
   22384:	42a0      	cmp	r0, r4
   22386:	d0e3      	beq.n	22350 <_malloc_r+0x64>
   22388:	1a21      	subs	r1, r4, r0
   2238a:	4630      	mov	r0, r6
   2238c:	f000 fb84 	bl	22a98 <_sbrk_r>
   22390:	3001      	adds	r0, #1
   22392:	d1dd      	bne.n	22350 <_malloc_r+0x64>
   22394:	e7cf      	b.n	22336 <_malloc_r+0x4a>
   22396:	bf00      	nop
   22398:	20021484 	.word	0x20021484
   2239c:	20021480 	.word	0x20021480

000223a0 <_printf_float>:
   223a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223a4:	b091      	sub	sp, #68	; 0x44
   223a6:	460c      	mov	r4, r1
   223a8:	4616      	mov	r6, r2
   223aa:	461f      	mov	r7, r3
   223ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   223b0:	4605      	mov	r5, r0
   223b2:	f000 fc71 	bl	22c98 <_localeconv_r>
   223b6:	6803      	ldr	r3, [r0, #0]
   223b8:	4618      	mov	r0, r3
   223ba:	9308      	str	r3, [sp, #32]
   223bc:	f7e6 ffd0 	bl	9360 <strlen>
   223c0:	2300      	movs	r3, #0
   223c2:	9009      	str	r0, [sp, #36]	; 0x24
   223c4:	930e      	str	r3, [sp, #56]	; 0x38
   223c6:	f8d8 3000 	ldr.w	r3, [r8]
   223ca:	f894 a018 	ldrb.w	sl, [r4, #24]
   223ce:	3307      	adds	r3, #7
   223d0:	f8d4 b000 	ldr.w	fp, [r4]
   223d4:	f023 0307 	bic.w	r3, r3, #7
   223d8:	f103 0208 	add.w	r2, r3, #8
   223dc:	f8c8 2000 	str.w	r2, [r8]
   223e0:	f04f 32ff 	mov.w	r2, #4294967295
   223e4:	e9d3 8900 	ldrd	r8, r9, [r3]
   223e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   223ec:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   223f0:	930b      	str	r3, [sp, #44]	; 0x2c
   223f2:	4b9d      	ldr	r3, [pc, #628]	; (22668 <_printf_float+0x2c8>)
   223f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   223f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   223fc:	f7e6 fe1a 	bl	9034 <__aeabi_dcmpun>
   22400:	bb70      	cbnz	r0, 22460 <_printf_float+0xc0>
   22402:	f04f 32ff 	mov.w	r2, #4294967295
   22406:	4b98      	ldr	r3, [pc, #608]	; (22668 <_printf_float+0x2c8>)
   22408:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   2240c:	f7e6 fdf4 	bl	8ff8 <__aeabi_dcmple>
   22410:	bb30      	cbnz	r0, 22460 <_printf_float+0xc0>
   22412:	2200      	movs	r2, #0
   22414:	2300      	movs	r3, #0
   22416:	4640      	mov	r0, r8
   22418:	4649      	mov	r1, r9
   2241a:	f7e6 fde3 	bl	8fe4 <__aeabi_dcmplt>
   2241e:	b110      	cbz	r0, 22426 <_printf_float+0x86>
   22420:	232d      	movs	r3, #45	; 0x2d
   22422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   22426:	4a91      	ldr	r2, [pc, #580]	; (2266c <_printf_float+0x2cc>)
   22428:	4b91      	ldr	r3, [pc, #580]	; (22670 <_printf_float+0x2d0>)
   2242a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2242e:	bf94      	ite	ls
   22430:	4690      	movls	r8, r2
   22432:	4698      	movhi	r8, r3
   22434:	2303      	movs	r3, #3
   22436:	f04f 0900 	mov.w	r9, #0
   2243a:	6123      	str	r3, [r4, #16]
   2243c:	f02b 0304 	bic.w	r3, fp, #4
   22440:	6023      	str	r3, [r4, #0]
   22442:	4633      	mov	r3, r6
   22444:	aa0f      	add	r2, sp, #60	; 0x3c
   22446:	4621      	mov	r1, r4
   22448:	4628      	mov	r0, r5
   2244a:	9700      	str	r7, [sp, #0]
   2244c:	f006 fa96 	bl	2897c <_printf_common>
   22450:	3001      	adds	r0, #1
   22452:	f040 8099 	bne.w	22588 <_printf_float+0x1e8>
   22456:	f04f 30ff 	mov.w	r0, #4294967295
   2245a:	b011      	add	sp, #68	; 0x44
   2245c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22460:	4642      	mov	r2, r8
   22462:	464b      	mov	r3, r9
   22464:	4640      	mov	r0, r8
   22466:	4649      	mov	r1, r9
   22468:	f7e6 fde4 	bl	9034 <__aeabi_dcmpun>
   2246c:	b140      	cbz	r0, 22480 <_printf_float+0xe0>
   2246e:	464b      	mov	r3, r9
   22470:	4a80      	ldr	r2, [pc, #512]	; (22674 <_printf_float+0x2d4>)
   22472:	2b00      	cmp	r3, #0
   22474:	bfbc      	itt	lt
   22476:	232d      	movlt	r3, #45	; 0x2d
   22478:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   2247c:	4b7e      	ldr	r3, [pc, #504]	; (22678 <_printf_float+0x2d8>)
   2247e:	e7d4      	b.n	2242a <_printf_float+0x8a>
   22480:	6863      	ldr	r3, [r4, #4]
   22482:	1c5a      	adds	r2, r3, #1
   22484:	d129      	bne.n	224da <_printf_float+0x13a>
   22486:	2306      	movs	r3, #6
   22488:	6063      	str	r3, [r4, #4]
   2248a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2248e:	2200      	movs	r2, #0
   22490:	4628      	mov	r0, r5
   22492:	6023      	str	r3, [r4, #0]
   22494:	9206      	str	r2, [sp, #24]
   22496:	aa0e      	add	r2, sp, #56	; 0x38
   22498:	e9cd a204 	strd	sl, r2, [sp, #16]
   2249c:	aa0d      	add	r2, sp, #52	; 0x34
   2249e:	9203      	str	r2, [sp, #12]
   224a0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   224a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   224a8:	6863      	ldr	r3, [r4, #4]
   224aa:	4642      	mov	r2, r8
   224ac:	9300      	str	r3, [sp, #0]
   224ae:	464b      	mov	r3, r9
   224b0:	f006 f9c4 	bl	2883c <__cvt>
   224b4:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   224b8:	4680      	mov	r8, r0
   224ba:	990d      	ldr	r1, [sp, #52]	; 0x34
   224bc:	d115      	bne.n	224ea <_printf_float+0x14a>
   224be:	1ccb      	adds	r3, r1, #3
   224c0:	db3b      	blt.n	2253a <_printf_float+0x19a>
   224c2:	6863      	ldr	r3, [r4, #4]
   224c4:	4299      	cmp	r1, r3
   224c6:	dc38      	bgt.n	2253a <_printf_float+0x19a>
   224c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   224ca:	4299      	cmp	r1, r3
   224cc:	db55      	blt.n	2257a <_printf_float+0x1da>
   224ce:	6823      	ldr	r3, [r4, #0]
   224d0:	6121      	str	r1, [r4, #16]
   224d2:	07d8      	lsls	r0, r3, #31
   224d4:	d545      	bpl.n	22562 <_printf_float+0x1c2>
   224d6:	1c4b      	adds	r3, r1, #1
   224d8:	e042      	b.n	22560 <_printf_float+0x1c0>
   224da:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   224de:	2a47      	cmp	r2, #71	; 0x47
   224e0:	d1d3      	bne.n	2248a <_printf_float+0xea>
   224e2:	2b00      	cmp	r3, #0
   224e4:	d1d1      	bne.n	2248a <_printf_float+0xea>
   224e6:	2301      	movs	r3, #1
   224e8:	e7ce      	b.n	22488 <_printf_float+0xe8>
   224ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   224ee:	d107      	bne.n	22500 <_printf_float+0x160>
   224f0:	1cc8      	adds	r0, r1, #3
   224f2:	db25      	blt.n	22540 <_printf_float+0x1a0>
   224f4:	6863      	ldr	r3, [r4, #4]
   224f6:	428b      	cmp	r3, r1
   224f8:	db22      	blt.n	22540 <_printf_float+0x1a0>
   224fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
   224fe:	e7e3      	b.n	224c8 <_printf_float+0x128>
   22500:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   22504:	d81f      	bhi.n	22546 <_printf_float+0x1a6>
   22506:	3901      	subs	r1, #1
   22508:	4652      	mov	r2, sl
   2250a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2250e:	910d      	str	r1, [sp, #52]	; 0x34
   22510:	f006 f9fb 	bl	2890a <__exponent>
   22514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22516:	4681      	mov	r9, r0
   22518:	1813      	adds	r3, r2, r0
   2251a:	2a01      	cmp	r2, #1
   2251c:	6123      	str	r3, [r4, #16]
   2251e:	dc02      	bgt.n	22526 <_printf_float+0x186>
   22520:	6822      	ldr	r2, [r4, #0]
   22522:	07d2      	lsls	r2, r2, #31
   22524:	d501      	bpl.n	2252a <_printf_float+0x18a>
   22526:	3301      	adds	r3, #1
   22528:	6123      	str	r3, [r4, #16]
   2252a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2252e:	2b00      	cmp	r3, #0
   22530:	d087      	beq.n	22442 <_printf_float+0xa2>
   22532:	232d      	movs	r3, #45	; 0x2d
   22534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   22538:	e783      	b.n	22442 <_printf_float+0xa2>
   2253a:	f04f 0a65 	mov.w	sl, #101	; 0x65
   2253e:	e7e2      	b.n	22506 <_printf_float+0x166>
   22540:	f04f 0a45 	mov.w	sl, #69	; 0x45
   22544:	e7df      	b.n	22506 <_printf_float+0x166>
   22546:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   2254a:	d1bd      	bne.n	224c8 <_printf_float+0x128>
   2254c:	2900      	cmp	r1, #0
   2254e:	6863      	ldr	r3, [r4, #4]
   22550:	dd0b      	ble.n	2256a <_printf_float+0x1ca>
   22552:	6121      	str	r1, [r4, #16]
   22554:	b913      	cbnz	r3, 2255c <_printf_float+0x1bc>
   22556:	6822      	ldr	r2, [r4, #0]
   22558:	07d0      	lsls	r0, r2, #31
   2255a:	d502      	bpl.n	22562 <_printf_float+0x1c2>
   2255c:	3301      	adds	r3, #1
   2255e:	440b      	add	r3, r1
   22560:	6123      	str	r3, [r4, #16]
   22562:	f04f 0900 	mov.w	r9, #0
   22566:	65a1      	str	r1, [r4, #88]	; 0x58
   22568:	e7df      	b.n	2252a <_printf_float+0x18a>
   2256a:	b913      	cbnz	r3, 22572 <_printf_float+0x1d2>
   2256c:	6822      	ldr	r2, [r4, #0]
   2256e:	07d2      	lsls	r2, r2, #31
   22570:	d501      	bpl.n	22576 <_printf_float+0x1d6>
   22572:	3302      	adds	r3, #2
   22574:	e7f4      	b.n	22560 <_printf_float+0x1c0>
   22576:	2301      	movs	r3, #1
   22578:	e7f2      	b.n	22560 <_printf_float+0x1c0>
   2257a:	2900      	cmp	r1, #0
   2257c:	bfd4      	ite	le
   2257e:	f1c1 0202 	rsble	r2, r1, #2
   22582:	2201      	movgt	r2, #1
   22584:	4413      	add	r3, r2
   22586:	e7eb      	b.n	22560 <_printf_float+0x1c0>
   22588:	6823      	ldr	r3, [r4, #0]
   2258a:	055a      	lsls	r2, r3, #21
   2258c:	d407      	bmi.n	2259e <_printf_float+0x1fe>
   2258e:	6923      	ldr	r3, [r4, #16]
   22590:	4642      	mov	r2, r8
   22592:	4631      	mov	r1, r6
   22594:	4628      	mov	r0, r5
   22596:	47b8      	blx	r7
   22598:	3001      	adds	r0, #1
   2259a:	d12b      	bne.n	225f4 <_printf_float+0x254>
   2259c:	e75b      	b.n	22456 <_printf_float+0xb6>
   2259e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   225a2:	f240 80dc 	bls.w	2275e <_printf_float+0x3be>
   225a6:	2200      	movs	r2, #0
   225a8:	2300      	movs	r3, #0
   225aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   225ae:	f7e6 fd0f 	bl	8fd0 <__aeabi_dcmpeq>
   225b2:	2800      	cmp	r0, #0
   225b4:	d033      	beq.n	2261e <_printf_float+0x27e>
   225b6:	2301      	movs	r3, #1
   225b8:	4a30      	ldr	r2, [pc, #192]	; (2267c <_printf_float+0x2dc>)
   225ba:	4631      	mov	r1, r6
   225bc:	4628      	mov	r0, r5
   225be:	47b8      	blx	r7
   225c0:	3001      	adds	r0, #1
   225c2:	f43f af48 	beq.w	22456 <_printf_float+0xb6>
   225c6:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   225ca:	4543      	cmp	r3, r8
   225cc:	db02      	blt.n	225d4 <_printf_float+0x234>
   225ce:	6823      	ldr	r3, [r4, #0]
   225d0:	07d8      	lsls	r0, r3, #31
   225d2:	d50f      	bpl.n	225f4 <_printf_float+0x254>
   225d4:	4631      	mov	r1, r6
   225d6:	4628      	mov	r0, r5
   225d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   225dc:	47b8      	blx	r7
   225de:	3001      	adds	r0, #1
   225e0:	f43f af39 	beq.w	22456 <_printf_float+0xb6>
   225e4:	f04f 0900 	mov.w	r9, #0
   225e8:	f108 38ff 	add.w	r8, r8, #4294967295
   225ec:	f104 0a1a 	add.w	sl, r4, #26
   225f0:	45c8      	cmp	r8, r9
   225f2:	dc09      	bgt.n	22608 <_printf_float+0x268>
   225f4:	6823      	ldr	r3, [r4, #0]
   225f6:	079b      	lsls	r3, r3, #30
   225f8:	f100 8102 	bmi.w	22800 <_printf_float+0x460>
   225fc:	68e0      	ldr	r0, [r4, #12]
   225fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22600:	4298      	cmp	r0, r3
   22602:	bfb8      	it	lt
   22604:	4618      	movlt	r0, r3
   22606:	e728      	b.n	2245a <_printf_float+0xba>
   22608:	2301      	movs	r3, #1
   2260a:	4652      	mov	r2, sl
   2260c:	4631      	mov	r1, r6
   2260e:	4628      	mov	r0, r5
   22610:	47b8      	blx	r7
   22612:	3001      	adds	r0, #1
   22614:	f43f af1f 	beq.w	22456 <_printf_float+0xb6>
   22618:	f109 0901 	add.w	r9, r9, #1
   2261c:	e7e8      	b.n	225f0 <_printf_float+0x250>
   2261e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22620:	2b00      	cmp	r3, #0
   22622:	dc38      	bgt.n	22696 <_printf_float+0x2f6>
   22624:	2301      	movs	r3, #1
   22626:	4a15      	ldr	r2, [pc, #84]	; (2267c <_printf_float+0x2dc>)
   22628:	4631      	mov	r1, r6
   2262a:	4628      	mov	r0, r5
   2262c:	47b8      	blx	r7
   2262e:	3001      	adds	r0, #1
   22630:	f43f af11 	beq.w	22456 <_printf_float+0xb6>
   22634:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   22638:	ea59 0303 	orrs.w	r3, r9, r3
   2263c:	d102      	bne.n	22644 <_printf_float+0x2a4>
   2263e:	6823      	ldr	r3, [r4, #0]
   22640:	07d9      	lsls	r1, r3, #31
   22642:	d5d7      	bpl.n	225f4 <_printf_float+0x254>
   22644:	4631      	mov	r1, r6
   22646:	4628      	mov	r0, r5
   22648:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2264c:	47b8      	blx	r7
   2264e:	3001      	adds	r0, #1
   22650:	f43f af01 	beq.w	22456 <_printf_float+0xb6>
   22654:	f04f 0a00 	mov.w	sl, #0
   22658:	f104 0b1a 	add.w	fp, r4, #26
   2265c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2265e:	425b      	negs	r3, r3
   22660:	4553      	cmp	r3, sl
   22662:	dc0d      	bgt.n	22680 <_printf_float+0x2e0>
   22664:	464b      	mov	r3, r9
   22666:	e793      	b.n	22590 <_printf_float+0x1f0>
   22668:	7fefffff 	.word	0x7fefffff
   2266c:	0002fcde 	.word	0x0002fcde
   22670:	0002b780 	.word	0x0002b780
   22674:	0002fce2 	.word	0x0002fce2
   22678:	0002fce6 	.word	0x0002fce6
   2267c:	0002fb7c 	.word	0x0002fb7c
   22680:	2301      	movs	r3, #1
   22682:	465a      	mov	r2, fp
   22684:	4631      	mov	r1, r6
   22686:	4628      	mov	r0, r5
   22688:	47b8      	blx	r7
   2268a:	3001      	adds	r0, #1
   2268c:	f43f aee3 	beq.w	22456 <_printf_float+0xb6>
   22690:	f10a 0a01 	add.w	sl, sl, #1
   22694:	e7e2      	b.n	2265c <_printf_float+0x2bc>
   22696:	6da3      	ldr	r3, [r4, #88]	; 0x58
   22698:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2269c:	4553      	cmp	r3, sl
   2269e:	bfa8      	it	ge
   226a0:	4653      	movge	r3, sl
   226a2:	2b00      	cmp	r3, #0
   226a4:	4699      	mov	r9, r3
   226a6:	dc36      	bgt.n	22716 <_printf_float+0x376>
   226a8:	f04f 0b00 	mov.w	fp, #0
   226ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   226b0:	f104 021a 	add.w	r2, r4, #26
   226b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   226b6:	930a      	str	r3, [sp, #40]	; 0x28
   226b8:	eba3 0309 	sub.w	r3, r3, r9
   226bc:	455b      	cmp	r3, fp
   226be:	dc31      	bgt.n	22724 <_printf_float+0x384>
   226c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   226c2:	459a      	cmp	sl, r3
   226c4:	dc3a      	bgt.n	2273c <_printf_float+0x39c>
   226c6:	6823      	ldr	r3, [r4, #0]
   226c8:	07da      	lsls	r2, r3, #31
   226ca:	d437      	bmi.n	2273c <_printf_float+0x39c>
   226cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   226ce:	ebaa 0903 	sub.w	r9, sl, r3
   226d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   226d4:	ebaa 0303 	sub.w	r3, sl, r3
   226d8:	4599      	cmp	r9, r3
   226da:	bfa8      	it	ge
   226dc:	4699      	movge	r9, r3
   226de:	f1b9 0f00 	cmp.w	r9, #0
   226e2:	dc33      	bgt.n	2274c <_printf_float+0x3ac>
   226e4:	f04f 0800 	mov.w	r8, #0
   226e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   226ec:	f104 0b1a 	add.w	fp, r4, #26
   226f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   226f2:	ebaa 0303 	sub.w	r3, sl, r3
   226f6:	eba3 0309 	sub.w	r3, r3, r9
   226fa:	4543      	cmp	r3, r8
   226fc:	f77f af7a 	ble.w	225f4 <_printf_float+0x254>
   22700:	2301      	movs	r3, #1
   22702:	465a      	mov	r2, fp
   22704:	4631      	mov	r1, r6
   22706:	4628      	mov	r0, r5
   22708:	47b8      	blx	r7
   2270a:	3001      	adds	r0, #1
   2270c:	f43f aea3 	beq.w	22456 <_printf_float+0xb6>
   22710:	f108 0801 	add.w	r8, r8, #1
   22714:	e7ec      	b.n	226f0 <_printf_float+0x350>
   22716:	4642      	mov	r2, r8
   22718:	4631      	mov	r1, r6
   2271a:	4628      	mov	r0, r5
   2271c:	47b8      	blx	r7
   2271e:	3001      	adds	r0, #1
   22720:	d1c2      	bne.n	226a8 <_printf_float+0x308>
   22722:	e698      	b.n	22456 <_printf_float+0xb6>
   22724:	2301      	movs	r3, #1
   22726:	4631      	mov	r1, r6
   22728:	4628      	mov	r0, r5
   2272a:	920a      	str	r2, [sp, #40]	; 0x28
   2272c:	47b8      	blx	r7
   2272e:	3001      	adds	r0, #1
   22730:	f43f ae91 	beq.w	22456 <_printf_float+0xb6>
   22734:	f10b 0b01 	add.w	fp, fp, #1
   22738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2273a:	e7bb      	b.n	226b4 <_printf_float+0x314>
   2273c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   22740:	4631      	mov	r1, r6
   22742:	4628      	mov	r0, r5
   22744:	47b8      	blx	r7
   22746:	3001      	adds	r0, #1
   22748:	d1c0      	bne.n	226cc <_printf_float+0x32c>
   2274a:	e684      	b.n	22456 <_printf_float+0xb6>
   2274c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2274e:	464b      	mov	r3, r9
   22750:	4631      	mov	r1, r6
   22752:	4628      	mov	r0, r5
   22754:	4442      	add	r2, r8
   22756:	47b8      	blx	r7
   22758:	3001      	adds	r0, #1
   2275a:	d1c3      	bne.n	226e4 <_printf_float+0x344>
   2275c:	e67b      	b.n	22456 <_printf_float+0xb6>
   2275e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   22762:	f1ba 0f01 	cmp.w	sl, #1
   22766:	dc01      	bgt.n	2276c <_printf_float+0x3cc>
   22768:	07db      	lsls	r3, r3, #31
   2276a:	d536      	bpl.n	227da <_printf_float+0x43a>
   2276c:	2301      	movs	r3, #1
   2276e:	4642      	mov	r2, r8
   22770:	4631      	mov	r1, r6
   22772:	4628      	mov	r0, r5
   22774:	47b8      	blx	r7
   22776:	3001      	adds	r0, #1
   22778:	f43f ae6d 	beq.w	22456 <_printf_float+0xb6>
   2277c:	4631      	mov	r1, r6
   2277e:	4628      	mov	r0, r5
   22780:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   22784:	47b8      	blx	r7
   22786:	3001      	adds	r0, #1
   22788:	f43f ae65 	beq.w	22456 <_printf_float+0xb6>
   2278c:	2200      	movs	r2, #0
   2278e:	2300      	movs	r3, #0
   22790:	f10a 3aff 	add.w	sl, sl, #4294967295
   22794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   22798:	f7e6 fc1a 	bl	8fd0 <__aeabi_dcmpeq>
   2279c:	b9c0      	cbnz	r0, 227d0 <_printf_float+0x430>
   2279e:	4653      	mov	r3, sl
   227a0:	f108 0201 	add.w	r2, r8, #1
   227a4:	4631      	mov	r1, r6
   227a6:	4628      	mov	r0, r5
   227a8:	47b8      	blx	r7
   227aa:	3001      	adds	r0, #1
   227ac:	d10c      	bne.n	227c8 <_printf_float+0x428>
   227ae:	e652      	b.n	22456 <_printf_float+0xb6>
   227b0:	2301      	movs	r3, #1
   227b2:	465a      	mov	r2, fp
   227b4:	4631      	mov	r1, r6
   227b6:	4628      	mov	r0, r5
   227b8:	47b8      	blx	r7
   227ba:	3001      	adds	r0, #1
   227bc:	f43f ae4b 	beq.w	22456 <_printf_float+0xb6>
   227c0:	f108 0801 	add.w	r8, r8, #1
   227c4:	45d0      	cmp	r8, sl
   227c6:	dbf3      	blt.n	227b0 <_printf_float+0x410>
   227c8:	464b      	mov	r3, r9
   227ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
   227ce:	e6e0      	b.n	22592 <_printf_float+0x1f2>
   227d0:	f04f 0800 	mov.w	r8, #0
   227d4:	f104 0b1a 	add.w	fp, r4, #26
   227d8:	e7f4      	b.n	227c4 <_printf_float+0x424>
   227da:	2301      	movs	r3, #1
   227dc:	4642      	mov	r2, r8
   227de:	e7e1      	b.n	227a4 <_printf_float+0x404>
   227e0:	2301      	movs	r3, #1
   227e2:	464a      	mov	r2, r9
   227e4:	4631      	mov	r1, r6
   227e6:	4628      	mov	r0, r5
   227e8:	47b8      	blx	r7
   227ea:	3001      	adds	r0, #1
   227ec:	f43f ae33 	beq.w	22456 <_printf_float+0xb6>
   227f0:	f108 0801 	add.w	r8, r8, #1
   227f4:	68e3      	ldr	r3, [r4, #12]
   227f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   227f8:	1a5b      	subs	r3, r3, r1
   227fa:	4543      	cmp	r3, r8
   227fc:	dcf0      	bgt.n	227e0 <_printf_float+0x440>
   227fe:	e6fd      	b.n	225fc <_printf_float+0x25c>
   22800:	f04f 0800 	mov.w	r8, #0
   22804:	f104 0919 	add.w	r9, r4, #25
   22808:	e7f4      	b.n	227f4 <_printf_float+0x454>
   2280a:	bf00      	nop

0002280c <_printf_i>:
   2280c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   22810:	7e0f      	ldrb	r7, [r1, #24]
   22812:	4691      	mov	r9, r2
   22814:	4680      	mov	r8, r0
   22816:	460c      	mov	r4, r1
   22818:	2f78      	cmp	r7, #120	; 0x78
   2281a:	469a      	mov	sl, r3
   2281c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2281e:	f101 0243 	add.w	r2, r1, #67	; 0x43
   22822:	d807      	bhi.n	22834 <_printf_i+0x28>
   22824:	2f62      	cmp	r7, #98	; 0x62
   22826:	d80a      	bhi.n	2283e <_printf_i+0x32>
   22828:	2f00      	cmp	r7, #0
   2282a:	f000 80e0 	beq.w	229ee <_printf_i+0x1e2>
   2282e:	2f58      	cmp	r7, #88	; 0x58
   22830:	f000 80bb 	beq.w	229aa <_printf_i+0x19e>
   22834:	f104 0642 	add.w	r6, r4, #66	; 0x42
   22838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2283c:	e03a      	b.n	228b4 <_printf_i+0xa8>
   2283e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   22842:	2b15      	cmp	r3, #21
   22844:	d8f6      	bhi.n	22834 <_printf_i+0x28>
   22846:	a101      	add	r1, pc, #4	; (adr r1, 2284c <_printf_i+0x40>)
   22848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2284c:	000228a5 	.word	0x000228a5
   22850:	000228b9 	.word	0x000228b9
   22854:	00022835 	.word	0x00022835
   22858:	00022835 	.word	0x00022835
   2285c:	00022835 	.word	0x00022835
   22860:	00022835 	.word	0x00022835
   22864:	000228b9 	.word	0x000228b9
   22868:	00022835 	.word	0x00022835
   2286c:	00022835 	.word	0x00022835
   22870:	00022835 	.word	0x00022835
   22874:	00022835 	.word	0x00022835
   22878:	000229d5 	.word	0x000229d5
   2287c:	00022949 	.word	0x00022949
   22880:	0002298b 	.word	0x0002298b
   22884:	00022835 	.word	0x00022835
   22888:	00022835 	.word	0x00022835
   2288c:	000229f7 	.word	0x000229f7
   22890:	00022835 	.word	0x00022835
   22894:	00022949 	.word	0x00022949
   22898:	00022835 	.word	0x00022835
   2289c:	00022835 	.word	0x00022835
   228a0:	00022993 	.word	0x00022993
   228a4:	682b      	ldr	r3, [r5, #0]
   228a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
   228aa:	1d1a      	adds	r2, r3, #4
   228ac:	681b      	ldr	r3, [r3, #0]
   228ae:	602a      	str	r2, [r5, #0]
   228b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   228b4:	2301      	movs	r3, #1
   228b6:	e0ab      	b.n	22a10 <_printf_i+0x204>
   228b8:	6823      	ldr	r3, [r4, #0]
   228ba:	6829      	ldr	r1, [r5, #0]
   228bc:	061f      	lsls	r7, r3, #24
   228be:	f101 0004 	add.w	r0, r1, #4
   228c2:	6028      	str	r0, [r5, #0]
   228c4:	d501      	bpl.n	228ca <_printf_i+0xbe>
   228c6:	680d      	ldr	r5, [r1, #0]
   228c8:	e003      	b.n	228d2 <_printf_i+0xc6>
   228ca:	065e      	lsls	r6, r3, #25
   228cc:	d5fb      	bpl.n	228c6 <_printf_i+0xba>
   228ce:	f9b1 5000 	ldrsh.w	r5, [r1]
   228d2:	2d00      	cmp	r5, #0
   228d4:	6861      	ldr	r1, [r4, #4]
   228d6:	da7a      	bge.n	229ce <_printf_i+0x1c2>
   228d8:	202d      	movs	r0, #45	; 0x2d
   228da:	2900      	cmp	r1, #0
   228dc:	60a1      	str	r1, [r4, #8]
   228de:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   228e2:	da2d      	bge.n	22940 <_printf_i+0x134>
   228e4:	426d      	negs	r5, r5
   228e6:	485e      	ldr	r0, [pc, #376]	; (22a60 <_printf_i+0x254>)
   228e8:	230a      	movs	r3, #10
   228ea:	4616      	mov	r6, r2
   228ec:	fbb5 f1f3 	udiv	r1, r5, r3
   228f0:	fb03 5711 	mls	r7, r3, r1, r5
   228f4:	5dc7      	ldrb	r7, [r0, r7]
   228f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
   228fa:	462f      	mov	r7, r5
   228fc:	460d      	mov	r5, r1
   228fe:	42bb      	cmp	r3, r7
   22900:	d9f4      	bls.n	228ec <_printf_i+0xe0>
   22902:	2b08      	cmp	r3, #8
   22904:	d10b      	bne.n	2291e <_printf_i+0x112>
   22906:	6823      	ldr	r3, [r4, #0]
   22908:	07df      	lsls	r7, r3, #31
   2290a:	d508      	bpl.n	2291e <_printf_i+0x112>
   2290c:	6923      	ldr	r3, [r4, #16]
   2290e:	6861      	ldr	r1, [r4, #4]
   22910:	4299      	cmp	r1, r3
   22912:	bfde      	ittt	le
   22914:	2330      	movle	r3, #48	; 0x30
   22916:	f806 3c01 	strble.w	r3, [r6, #-1]
   2291a:	f106 36ff 	addle.w	r6, r6, #4294967295
   2291e:	1b92      	subs	r2, r2, r6
   22920:	6122      	str	r2, [r4, #16]
   22922:	464b      	mov	r3, r9
   22924:	aa03      	add	r2, sp, #12
   22926:	4621      	mov	r1, r4
   22928:	4640      	mov	r0, r8
   2292a:	f8cd a000 	str.w	sl, [sp]
   2292e:	f006 f825 	bl	2897c <_printf_common>
   22932:	3001      	adds	r0, #1
   22934:	d171      	bne.n	22a1a <_printf_i+0x20e>
   22936:	f04f 30ff 	mov.w	r0, #4294967295
   2293a:	b004      	add	sp, #16
   2293c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22940:	f023 0304 	bic.w	r3, r3, #4
   22944:	6023      	str	r3, [r4, #0]
   22946:	e7cd      	b.n	228e4 <_printf_i+0xd8>
   22948:	682b      	ldr	r3, [r5, #0]
   2294a:	6820      	ldr	r0, [r4, #0]
   2294c:	1d19      	adds	r1, r3, #4
   2294e:	6029      	str	r1, [r5, #0]
   22950:	0605      	lsls	r5, r0, #24
   22952:	d501      	bpl.n	22958 <_printf_i+0x14c>
   22954:	681d      	ldr	r5, [r3, #0]
   22956:	e002      	b.n	2295e <_printf_i+0x152>
   22958:	0641      	lsls	r1, r0, #25
   2295a:	d5fb      	bpl.n	22954 <_printf_i+0x148>
   2295c:	881d      	ldrh	r5, [r3, #0]
   2295e:	2f6f      	cmp	r7, #111	; 0x6f
   22960:	483f      	ldr	r0, [pc, #252]	; (22a60 <_printf_i+0x254>)
   22962:	bf14      	ite	ne
   22964:	230a      	movne	r3, #10
   22966:	2308      	moveq	r3, #8
   22968:	2100      	movs	r1, #0
   2296a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2296e:	6866      	ldr	r6, [r4, #4]
   22970:	2e00      	cmp	r6, #0
   22972:	60a6      	str	r6, [r4, #8]
   22974:	dbb9      	blt.n	228ea <_printf_i+0xde>
   22976:	6821      	ldr	r1, [r4, #0]
   22978:	f021 0104 	bic.w	r1, r1, #4
   2297c:	6021      	str	r1, [r4, #0]
   2297e:	2d00      	cmp	r5, #0
   22980:	d1b3      	bne.n	228ea <_printf_i+0xde>
   22982:	2e00      	cmp	r6, #0
   22984:	d1b1      	bne.n	228ea <_printf_i+0xde>
   22986:	4616      	mov	r6, r2
   22988:	e7bb      	b.n	22902 <_printf_i+0xf6>
   2298a:	6823      	ldr	r3, [r4, #0]
   2298c:	f043 0320 	orr.w	r3, r3, #32
   22990:	6023      	str	r3, [r4, #0]
   22992:	2778      	movs	r7, #120	; 0x78
   22994:	4833      	ldr	r0, [pc, #204]	; (22a64 <_printf_i+0x258>)
   22996:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2299a:	6829      	ldr	r1, [r5, #0]
   2299c:	6823      	ldr	r3, [r4, #0]
   2299e:	1d0e      	adds	r6, r1, #4
   229a0:	602e      	str	r6, [r5, #0]
   229a2:	061e      	lsls	r6, r3, #24
   229a4:	d503      	bpl.n	229ae <_printf_i+0x1a2>
   229a6:	680d      	ldr	r5, [r1, #0]
   229a8:	e004      	b.n	229b4 <_printf_i+0x1a8>
   229aa:	482d      	ldr	r0, [pc, #180]	; (22a60 <_printf_i+0x254>)
   229ac:	e7f3      	b.n	22996 <_printf_i+0x18a>
   229ae:	065d      	lsls	r5, r3, #25
   229b0:	d5f9      	bpl.n	229a6 <_printf_i+0x19a>
   229b2:	880d      	ldrh	r5, [r1, #0]
   229b4:	07d9      	lsls	r1, r3, #31
   229b6:	bf44      	itt	mi
   229b8:	f043 0320 	orrmi.w	r3, r3, #32
   229bc:	6023      	strmi	r3, [r4, #0]
   229be:	b10d      	cbz	r5, 229c4 <_printf_i+0x1b8>
   229c0:	2310      	movs	r3, #16
   229c2:	e7d1      	b.n	22968 <_printf_i+0x15c>
   229c4:	6823      	ldr	r3, [r4, #0]
   229c6:	f023 0320 	bic.w	r3, r3, #32
   229ca:	6023      	str	r3, [r4, #0]
   229cc:	e7f8      	b.n	229c0 <_printf_i+0x1b4>
   229ce:	4824      	ldr	r0, [pc, #144]	; (22a60 <_printf_i+0x254>)
   229d0:	230a      	movs	r3, #10
   229d2:	e7cc      	b.n	2296e <_printf_i+0x162>
   229d4:	682b      	ldr	r3, [r5, #0]
   229d6:	6826      	ldr	r6, [r4, #0]
   229d8:	1d18      	adds	r0, r3, #4
   229da:	6961      	ldr	r1, [r4, #20]
   229dc:	6028      	str	r0, [r5, #0]
   229de:	0635      	lsls	r5, r6, #24
   229e0:	681b      	ldr	r3, [r3, #0]
   229e2:	d501      	bpl.n	229e8 <_printf_i+0x1dc>
   229e4:	6019      	str	r1, [r3, #0]
   229e6:	e002      	b.n	229ee <_printf_i+0x1e2>
   229e8:	0670      	lsls	r0, r6, #25
   229ea:	d5fb      	bpl.n	229e4 <_printf_i+0x1d8>
   229ec:	8019      	strh	r1, [r3, #0]
   229ee:	2300      	movs	r3, #0
   229f0:	4616      	mov	r6, r2
   229f2:	6123      	str	r3, [r4, #16]
   229f4:	e795      	b.n	22922 <_printf_i+0x116>
   229f6:	682b      	ldr	r3, [r5, #0]
   229f8:	2100      	movs	r1, #0
   229fa:	1d1a      	adds	r2, r3, #4
   229fc:	602a      	str	r2, [r5, #0]
   229fe:	681e      	ldr	r6, [r3, #0]
   22a00:	6862      	ldr	r2, [r4, #4]
   22a02:	4630      	mov	r0, r6
   22a04:	f006 f927 	bl	28c56 <memchr>
   22a08:	b108      	cbz	r0, 22a0e <_printf_i+0x202>
   22a0a:	1b80      	subs	r0, r0, r6
   22a0c:	6060      	str	r0, [r4, #4]
   22a0e:	6863      	ldr	r3, [r4, #4]
   22a10:	6123      	str	r3, [r4, #16]
   22a12:	2300      	movs	r3, #0
   22a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   22a18:	e783      	b.n	22922 <_printf_i+0x116>
   22a1a:	6923      	ldr	r3, [r4, #16]
   22a1c:	4632      	mov	r2, r6
   22a1e:	4649      	mov	r1, r9
   22a20:	4640      	mov	r0, r8
   22a22:	47d0      	blx	sl
   22a24:	3001      	adds	r0, #1
   22a26:	d086      	beq.n	22936 <_printf_i+0x12a>
   22a28:	6823      	ldr	r3, [r4, #0]
   22a2a:	079b      	lsls	r3, r3, #30
   22a2c:	d414      	bmi.n	22a58 <_printf_i+0x24c>
   22a2e:	68e0      	ldr	r0, [r4, #12]
   22a30:	9b03      	ldr	r3, [sp, #12]
   22a32:	4298      	cmp	r0, r3
   22a34:	bfb8      	it	lt
   22a36:	4618      	movlt	r0, r3
   22a38:	e77f      	b.n	2293a <_printf_i+0x12e>
   22a3a:	2301      	movs	r3, #1
   22a3c:	4632      	mov	r2, r6
   22a3e:	4649      	mov	r1, r9
   22a40:	4640      	mov	r0, r8
   22a42:	47d0      	blx	sl
   22a44:	3001      	adds	r0, #1
   22a46:	f43f af76 	beq.w	22936 <_printf_i+0x12a>
   22a4a:	3501      	adds	r5, #1
   22a4c:	68e3      	ldr	r3, [r4, #12]
   22a4e:	9903      	ldr	r1, [sp, #12]
   22a50:	1a5b      	subs	r3, r3, r1
   22a52:	42ab      	cmp	r3, r5
   22a54:	dcf1      	bgt.n	22a3a <_printf_i+0x22e>
   22a56:	e7ea      	b.n	22a2e <_printf_i+0x222>
   22a58:	2500      	movs	r5, #0
   22a5a:	f104 0619 	add.w	r6, r4, #25
   22a5e:	e7f5      	b.n	22a4c <_printf_i+0x240>
   22a60:	0002fcea 	.word	0x0002fcea
   22a64:	0002fcfb 	.word	0x0002fcfb

00022a68 <iprintf>:
   22a68:	b40f      	push	{r0, r1, r2, r3}
   22a6a:	4b0a      	ldr	r3, [pc, #40]	; (22a94 <iprintf+0x2c>)
   22a6c:	b513      	push	{r0, r1, r4, lr}
   22a6e:	681c      	ldr	r4, [r3, #0]
   22a70:	b124      	cbz	r4, 22a7c <iprintf+0x14>
   22a72:	69a3      	ldr	r3, [r4, #24]
   22a74:	b913      	cbnz	r3, 22a7c <iprintf+0x14>
   22a76:	4620      	mov	r0, r4
   22a78:	f000 f87e 	bl	22b78 <__sinit>
   22a7c:	ab05      	add	r3, sp, #20
   22a7e:	9a04      	ldr	r2, [sp, #16]
   22a80:	68a1      	ldr	r1, [r4, #8]
   22a82:	4620      	mov	r0, r4
   22a84:	9301      	str	r3, [sp, #4]
   22a86:	f000 fc35 	bl	232f4 <_vfiprintf_r>
   22a8a:	b002      	add	sp, #8
   22a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22a90:	b004      	add	sp, #16
   22a92:	4770      	bx	lr
   22a94:	20008748 	.word	0x20008748

00022a98 <_sbrk_r>:
   22a98:	b538      	push	{r3, r4, r5, lr}
   22a9a:	2300      	movs	r3, #0
   22a9c:	4d05      	ldr	r5, [pc, #20]	; (22ab4 <_sbrk_r+0x1c>)
   22a9e:	4604      	mov	r4, r0
   22aa0:	4608      	mov	r0, r1
   22aa2:	602b      	str	r3, [r5, #0]
   22aa4:	f7ed fc1e 	bl	102e4 <_sbrk>
   22aa8:	1c43      	adds	r3, r0, #1
   22aaa:	d102      	bne.n	22ab2 <_sbrk_r+0x1a>
   22aac:	682b      	ldr	r3, [r5, #0]
   22aae:	b103      	cbz	r3, 22ab2 <_sbrk_r+0x1a>
   22ab0:	6023      	str	r3, [r4, #0]
   22ab2:	bd38      	pop	{r3, r4, r5, pc}
   22ab4:	20021488 	.word	0x20021488

00022ab8 <__assert_func>:
   22ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   22aba:	4614      	mov	r4, r2
   22abc:	461a      	mov	r2, r3
   22abe:	4b09      	ldr	r3, [pc, #36]	; (22ae4 <__assert_func+0x2c>)
   22ac0:	4605      	mov	r5, r0
   22ac2:	681b      	ldr	r3, [r3, #0]
   22ac4:	68d8      	ldr	r0, [r3, #12]
   22ac6:	b954      	cbnz	r4, 22ade <__assert_func+0x26>
   22ac8:	4b07      	ldr	r3, [pc, #28]	; (22ae8 <__assert_func+0x30>)
   22aca:	461c      	mov	r4, r3
   22acc:	9100      	str	r1, [sp, #0]
   22ace:	4907      	ldr	r1, [pc, #28]	; (22aec <__assert_func+0x34>)
   22ad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
   22ad4:	462b      	mov	r3, r5
   22ad6:	f000 f8cd 	bl	22c74 <fiprintf>
   22ada:	f006 f99e 	bl	28e1a <abort>
   22ade:	4b04      	ldr	r3, [pc, #16]	; (22af0 <__assert_func+0x38>)
   22ae0:	e7f4      	b.n	22acc <__assert_func+0x14>
   22ae2:	bf00      	nop
   22ae4:	20008748 	.word	0x20008748
   22ae8:	0002df2e 	.word	0x0002df2e
   22aec:	0002fd19 	.word	0x0002fd19
   22af0:	0002fd0c 	.word	0x0002fd0c

00022af4 <std>:
   22af4:	2300      	movs	r3, #0
   22af6:	b510      	push	{r4, lr}
   22af8:	4604      	mov	r4, r0
   22afa:	6083      	str	r3, [r0, #8]
   22afc:	8181      	strh	r1, [r0, #12]
   22afe:	4619      	mov	r1, r3
   22b00:	6643      	str	r3, [r0, #100]	; 0x64
   22b02:	81c2      	strh	r2, [r0, #14]
   22b04:	2208      	movs	r2, #8
   22b06:	6183      	str	r3, [r0, #24]
   22b08:	e9c0 3300 	strd	r3, r3, [r0]
   22b0c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   22b10:	305c      	adds	r0, #92	; 0x5c
   22b12:	f005 fe7d 	bl	28810 <memset>
   22b16:	4b05      	ldr	r3, [pc, #20]	; (22b2c <std+0x38>)
   22b18:	6224      	str	r4, [r4, #32]
   22b1a:	6263      	str	r3, [r4, #36]	; 0x24
   22b1c:	4b04      	ldr	r3, [pc, #16]	; (22b30 <std+0x3c>)
   22b1e:	62a3      	str	r3, [r4, #40]	; 0x28
   22b20:	4b04      	ldr	r3, [pc, #16]	; (22b34 <std+0x40>)
   22b22:	62e3      	str	r3, [r4, #44]	; 0x2c
   22b24:	4b04      	ldr	r3, [pc, #16]	; (22b38 <std+0x44>)
   22b26:	6323      	str	r3, [r4, #48]	; 0x30
   22b28:	bd10      	pop	{r4, pc}
   22b2a:	bf00      	nop
   22b2c:	00028d95 	.word	0x00028d95
   22b30:	00028db7 	.word	0x00028db7
   22b34:	00028def 	.word	0x00028def
   22b38:	00028e13 	.word	0x00028e13

00022b3c <_cleanup_r>:
   22b3c:	4901      	ldr	r1, [pc, #4]	; (22b44 <_cleanup_r+0x8>)
   22b3e:	f006 b86b 	b.w	28c18 <_fwalk_reent>
   22b42:	bf00      	nop
   22b44:	0002370d 	.word	0x0002370d

00022b48 <__sfp_lock_acquire>:
   22b48:	4801      	ldr	r0, [pc, #4]	; (22b50 <__sfp_lock_acquire+0x8>)
   22b4a:	f7ed bc0f 	b.w	1036c <__retarget_lock_acquire_recursive>
   22b4e:	bf00      	nop
   22b50:	20008a98 	.word	0x20008a98

00022b54 <__sfp_lock_release>:
   22b54:	4801      	ldr	r0, [pc, #4]	; (22b5c <__sfp_lock_release+0x8>)
   22b56:	f7ed bc25 	b.w	103a4 <__retarget_lock_release_recursive>
   22b5a:	bf00      	nop
   22b5c:	20008a98 	.word	0x20008a98

00022b60 <__sinit_lock_acquire>:
   22b60:	4801      	ldr	r0, [pc, #4]	; (22b68 <__sinit_lock_acquire+0x8>)
   22b62:	f7ed bc03 	b.w	1036c <__retarget_lock_acquire_recursive>
   22b66:	bf00      	nop
   22b68:	20008aac 	.word	0x20008aac

00022b6c <__sinit_lock_release>:
   22b6c:	4801      	ldr	r0, [pc, #4]	; (22b74 <__sinit_lock_release+0x8>)
   22b6e:	f7ed bc19 	b.w	103a4 <__retarget_lock_release_recursive>
   22b72:	bf00      	nop
   22b74:	20008aac 	.word	0x20008aac

00022b78 <__sinit>:
   22b78:	b510      	push	{r4, lr}
   22b7a:	4604      	mov	r4, r0
   22b7c:	f7ff fff0 	bl	22b60 <__sinit_lock_acquire>
   22b80:	69a3      	ldr	r3, [r4, #24]
   22b82:	b11b      	cbz	r3, 22b8c <__sinit+0x14>
   22b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22b88:	f7ff bff0 	b.w	22b6c <__sinit_lock_release>
   22b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   22b90:	6523      	str	r3, [r4, #80]	; 0x50
   22b92:	4620      	mov	r0, r4
   22b94:	4b12      	ldr	r3, [pc, #72]	; (22be0 <__sinit+0x68>)
   22b96:	4a13      	ldr	r2, [pc, #76]	; (22be4 <__sinit+0x6c>)
   22b98:	681b      	ldr	r3, [r3, #0]
   22b9a:	62a2      	str	r2, [r4, #40]	; 0x28
   22b9c:	42a3      	cmp	r3, r4
   22b9e:	bf04      	itt	eq
   22ba0:	2301      	moveq	r3, #1
   22ba2:	61a3      	streq	r3, [r4, #24]
   22ba4:	f000 f820 	bl	22be8 <__sfp>
   22ba8:	6060      	str	r0, [r4, #4]
   22baa:	4620      	mov	r0, r4
   22bac:	f000 f81c 	bl	22be8 <__sfp>
   22bb0:	60a0      	str	r0, [r4, #8]
   22bb2:	4620      	mov	r0, r4
   22bb4:	f000 f818 	bl	22be8 <__sfp>
   22bb8:	2200      	movs	r2, #0
   22bba:	2104      	movs	r1, #4
   22bbc:	60e0      	str	r0, [r4, #12]
   22bbe:	6860      	ldr	r0, [r4, #4]
   22bc0:	f7ff ff98 	bl	22af4 <std>
   22bc4:	2201      	movs	r2, #1
   22bc6:	2109      	movs	r1, #9
   22bc8:	68a0      	ldr	r0, [r4, #8]
   22bca:	f7ff ff93 	bl	22af4 <std>
   22bce:	2202      	movs	r2, #2
   22bd0:	2112      	movs	r1, #18
   22bd2:	68e0      	ldr	r0, [r4, #12]
   22bd4:	f7ff ff8e 	bl	22af4 <std>
   22bd8:	2301      	movs	r3, #1
   22bda:	61a3      	str	r3, [r4, #24]
   22bdc:	e7d2      	b.n	22b84 <__sinit+0xc>
   22bde:	bf00      	nop
   22be0:	0002a574 	.word	0x0002a574
   22be4:	00022b3d 	.word	0x00022b3d

00022be8 <__sfp>:
   22be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22bea:	4607      	mov	r7, r0
   22bec:	f7ff ffac 	bl	22b48 <__sfp_lock_acquire>
   22bf0:	4b1e      	ldr	r3, [pc, #120]	; (22c6c <__sfp+0x84>)
   22bf2:	681e      	ldr	r6, [r3, #0]
   22bf4:	69b3      	ldr	r3, [r6, #24]
   22bf6:	b913      	cbnz	r3, 22bfe <__sfp+0x16>
   22bf8:	4630      	mov	r0, r6
   22bfa:	f7ff ffbd 	bl	22b78 <__sinit>
   22bfe:	3648      	adds	r6, #72	; 0x48
   22c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   22c04:	3b01      	subs	r3, #1
   22c06:	d503      	bpl.n	22c10 <__sfp+0x28>
   22c08:	6833      	ldr	r3, [r6, #0]
   22c0a:	b30b      	cbz	r3, 22c50 <__sfp+0x68>
   22c0c:	6836      	ldr	r6, [r6, #0]
   22c0e:	e7f7      	b.n	22c00 <__sfp+0x18>
   22c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   22c14:	b9d5      	cbnz	r5, 22c4c <__sfp+0x64>
   22c16:	4b16      	ldr	r3, [pc, #88]	; (22c70 <__sfp+0x88>)
   22c18:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22c1c:	6665      	str	r5, [r4, #100]	; 0x64
   22c1e:	60e3      	str	r3, [r4, #12]
   22c20:	f7ed fb74 	bl	1030c <__retarget_lock_init_recursive>
   22c24:	f7ff ff96 	bl	22b54 <__sfp_lock_release>
   22c28:	2208      	movs	r2, #8
   22c2a:	4629      	mov	r1, r5
   22c2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   22c30:	6025      	str	r5, [r4, #0]
   22c32:	61a5      	str	r5, [r4, #24]
   22c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
   22c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
   22c3c:	f005 fde8 	bl	28810 <memset>
   22c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   22c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   22c48:	4620      	mov	r0, r4
   22c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22c4c:	3468      	adds	r4, #104	; 0x68
   22c4e:	e7d9      	b.n	22c04 <__sfp+0x1c>
   22c50:	2104      	movs	r1, #4
   22c52:	4638      	mov	r0, r7
   22c54:	f005 ffca 	bl	28bec <__sfmoreglue>
   22c58:	4604      	mov	r4, r0
   22c5a:	6030      	str	r0, [r6, #0]
   22c5c:	2800      	cmp	r0, #0
   22c5e:	d1d5      	bne.n	22c0c <__sfp+0x24>
   22c60:	f7ff ff78 	bl	22b54 <__sfp_lock_release>
   22c64:	230c      	movs	r3, #12
   22c66:	603b      	str	r3, [r7, #0]
   22c68:	e7ee      	b.n	22c48 <__sfp+0x60>
   22c6a:	bf00      	nop
   22c6c:	0002a574 	.word	0x0002a574
   22c70:	ffff0001 	.word	0xffff0001

00022c74 <fiprintf>:
   22c74:	b40e      	push	{r1, r2, r3}
   22c76:	b503      	push	{r0, r1, lr}
   22c78:	ab03      	add	r3, sp, #12
   22c7a:	4601      	mov	r1, r0
   22c7c:	4805      	ldr	r0, [pc, #20]	; (22c94 <fiprintf+0x20>)
   22c7e:	f853 2b04 	ldr.w	r2, [r3], #4
   22c82:	6800      	ldr	r0, [r0, #0]
   22c84:	9301      	str	r3, [sp, #4]
   22c86:	f000 fb35 	bl	232f4 <_vfiprintf_r>
   22c8a:	b002      	add	sp, #8
   22c8c:	f85d eb04 	ldr.w	lr, [sp], #4
   22c90:	b003      	add	sp, #12
   22c92:	4770      	bx	lr
   22c94:	20008748 	.word	0x20008748

00022c98 <_localeconv_r>:
   22c98:	4800      	ldr	r0, [pc, #0]	; (22c9c <_localeconv_r+0x4>)
   22c9a:	4770      	bx	lr
   22c9c:	2000889c 	.word	0x2000889c

00022ca0 <__malloc_lock>:
   22ca0:	4801      	ldr	r0, [pc, #4]	; (22ca8 <__malloc_lock+0x8>)
   22ca2:	f7ed bb63 	b.w	1036c <__retarget_lock_acquire_recursive>
   22ca6:	bf00      	nop
   22ca8:	20008a84 	.word	0x20008a84

00022cac <__malloc_unlock>:
   22cac:	4801      	ldr	r0, [pc, #4]	; (22cb4 <__malloc_unlock+0x8>)
   22cae:	f7ed bb79 	b.w	103a4 <__retarget_lock_release_recursive>
   22cb2:	bf00      	nop
   22cb4:	20008a84 	.word	0x20008a84

00022cb8 <_Balloc>:
   22cb8:	b570      	push	{r4, r5, r6, lr}
   22cba:	6a46      	ldr	r6, [r0, #36]	; 0x24
   22cbc:	4604      	mov	r4, r0
   22cbe:	460d      	mov	r5, r1
   22cc0:	b976      	cbnz	r6, 22ce0 <_Balloc+0x28>
   22cc2:	2010      	movs	r0, #16
   22cc4:	f7ff fac0 	bl	22248 <malloc>
   22cc8:	4602      	mov	r2, r0
   22cca:	6260      	str	r0, [r4, #36]	; 0x24
   22ccc:	b920      	cbnz	r0, 22cd8 <_Balloc+0x20>
   22cce:	4b18      	ldr	r3, [pc, #96]	; (22d30 <_Balloc+0x78>)
   22cd0:	2166      	movs	r1, #102	; 0x66
   22cd2:	4818      	ldr	r0, [pc, #96]	; (22d34 <_Balloc+0x7c>)
   22cd4:	f7ff fef0 	bl	22ab8 <__assert_func>
   22cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   22cdc:	6006      	str	r6, [r0, #0]
   22cde:	60c6      	str	r6, [r0, #12]
   22ce0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   22ce2:	68f3      	ldr	r3, [r6, #12]
   22ce4:	b183      	cbz	r3, 22d08 <_Balloc+0x50>
   22ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22ce8:	68db      	ldr	r3, [r3, #12]
   22cea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   22cee:	b9b8      	cbnz	r0, 22d20 <_Balloc+0x68>
   22cf0:	2101      	movs	r1, #1
   22cf2:	4620      	mov	r0, r4
   22cf4:	fa01 f605 	lsl.w	r6, r1, r5
   22cf8:	1d72      	adds	r2, r6, #5
   22cfa:	0092      	lsls	r2, r2, #2
   22cfc:	f005 fd90 	bl	28820 <_calloc_r>
   22d00:	b160      	cbz	r0, 22d1c <_Balloc+0x64>
   22d02:	e9c0 5601 	strd	r5, r6, [r0, #4]
   22d06:	e00e      	b.n	22d26 <_Balloc+0x6e>
   22d08:	2221      	movs	r2, #33	; 0x21
   22d0a:	2104      	movs	r1, #4
   22d0c:	4620      	mov	r0, r4
   22d0e:	f005 fd87 	bl	28820 <_calloc_r>
   22d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22d14:	60f0      	str	r0, [r6, #12]
   22d16:	68db      	ldr	r3, [r3, #12]
   22d18:	2b00      	cmp	r3, #0
   22d1a:	d1e4      	bne.n	22ce6 <_Balloc+0x2e>
   22d1c:	2000      	movs	r0, #0
   22d1e:	bd70      	pop	{r4, r5, r6, pc}
   22d20:	6802      	ldr	r2, [r0, #0]
   22d22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   22d26:	2300      	movs	r3, #0
   22d28:	e9c0 3303 	strd	r3, r3, [r0, #12]
   22d2c:	e7f7      	b.n	22d1e <_Balloc+0x66>
   22d2e:	bf00      	nop
   22d30:	0002fd55 	.word	0x0002fd55
   22d34:	0002fdf1 	.word	0x0002fdf1

00022d38 <_Bfree>:
   22d38:	b570      	push	{r4, r5, r6, lr}
   22d3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   22d3c:	4605      	mov	r5, r0
   22d3e:	460c      	mov	r4, r1
   22d40:	b976      	cbnz	r6, 22d60 <_Bfree+0x28>
   22d42:	2010      	movs	r0, #16
   22d44:	f7ff fa80 	bl	22248 <malloc>
   22d48:	4602      	mov	r2, r0
   22d4a:	6268      	str	r0, [r5, #36]	; 0x24
   22d4c:	b920      	cbnz	r0, 22d58 <_Bfree+0x20>
   22d4e:	4b09      	ldr	r3, [pc, #36]	; (22d74 <_Bfree+0x3c>)
   22d50:	218a      	movs	r1, #138	; 0x8a
   22d52:	4809      	ldr	r0, [pc, #36]	; (22d78 <_Bfree+0x40>)
   22d54:	f7ff feb0 	bl	22ab8 <__assert_func>
   22d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
   22d5c:	6006      	str	r6, [r0, #0]
   22d5e:	60c6      	str	r6, [r0, #12]
   22d60:	b13c      	cbz	r4, 22d72 <_Bfree+0x3a>
   22d62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   22d64:	6862      	ldr	r2, [r4, #4]
   22d66:	68db      	ldr	r3, [r3, #12]
   22d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   22d6c:	6021      	str	r1, [r4, #0]
   22d6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   22d72:	bd70      	pop	{r4, r5, r6, pc}
   22d74:	0002fd55 	.word	0x0002fd55
   22d78:	0002fdf1 	.word	0x0002fdf1

00022d7c <__multadd>:
   22d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d80:	f101 0c14 	add.w	ip, r1, #20
   22d84:	4607      	mov	r7, r0
   22d86:	460c      	mov	r4, r1
   22d88:	461e      	mov	r6, r3
   22d8a:	690d      	ldr	r5, [r1, #16]
   22d8c:	2000      	movs	r0, #0
   22d8e:	f8dc 3000 	ldr.w	r3, [ip]
   22d92:	3001      	adds	r0, #1
   22d94:	b299      	uxth	r1, r3
   22d96:	4285      	cmp	r5, r0
   22d98:	fb02 6101 	mla	r1, r2, r1, r6
   22d9c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   22da0:	ea4f 4311 	mov.w	r3, r1, lsr #16
   22da4:	b289      	uxth	r1, r1
   22da6:	fb02 3306 	mla	r3, r2, r6, r3
   22daa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   22dae:	ea4f 4613 	mov.w	r6, r3, lsr #16
   22db2:	f84c 1b04 	str.w	r1, [ip], #4
   22db6:	dcea      	bgt.n	22d8e <__multadd+0x12>
   22db8:	b30e      	cbz	r6, 22dfe <__multadd+0x82>
   22dba:	68a3      	ldr	r3, [r4, #8]
   22dbc:	42ab      	cmp	r3, r5
   22dbe:	dc19      	bgt.n	22df4 <__multadd+0x78>
   22dc0:	6861      	ldr	r1, [r4, #4]
   22dc2:	4638      	mov	r0, r7
   22dc4:	3101      	adds	r1, #1
   22dc6:	f7ff ff77 	bl	22cb8 <_Balloc>
   22dca:	4680      	mov	r8, r0
   22dcc:	b928      	cbnz	r0, 22dda <__multadd+0x5e>
   22dce:	4602      	mov	r2, r0
   22dd0:	4b0c      	ldr	r3, [pc, #48]	; (22e04 <__multadd+0x88>)
   22dd2:	21b5      	movs	r1, #181	; 0xb5
   22dd4:	480c      	ldr	r0, [pc, #48]	; (22e08 <__multadd+0x8c>)
   22dd6:	f7ff fe6f 	bl	22ab8 <__assert_func>
   22dda:	6922      	ldr	r2, [r4, #16]
   22ddc:	f104 010c 	add.w	r1, r4, #12
   22de0:	300c      	adds	r0, #12
   22de2:	3202      	adds	r2, #2
   22de4:	0092      	lsls	r2, r2, #2
   22de6:	f005 fcec 	bl	287c2 <memcpy>
   22dea:	4621      	mov	r1, r4
   22dec:	4644      	mov	r4, r8
   22dee:	4638      	mov	r0, r7
   22df0:	f7ff ffa2 	bl	22d38 <_Bfree>
   22df4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   22df8:	3501      	adds	r5, #1
   22dfa:	615e      	str	r6, [r3, #20]
   22dfc:	6125      	str	r5, [r4, #16]
   22dfe:	4620      	mov	r0, r4
   22e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22e04:	0002fde0 	.word	0x0002fde0
   22e08:	0002fdf1 	.word	0x0002fdf1

00022e0c <__i2b>:
   22e0c:	b510      	push	{r4, lr}
   22e0e:	460c      	mov	r4, r1
   22e10:	2101      	movs	r1, #1
   22e12:	f7ff ff51 	bl	22cb8 <_Balloc>
   22e16:	4602      	mov	r2, r0
   22e18:	b928      	cbnz	r0, 22e26 <__i2b+0x1a>
   22e1a:	4b05      	ldr	r3, [pc, #20]	; (22e30 <__i2b+0x24>)
   22e1c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   22e20:	4804      	ldr	r0, [pc, #16]	; (22e34 <__i2b+0x28>)
   22e22:	f7ff fe49 	bl	22ab8 <__assert_func>
   22e26:	2301      	movs	r3, #1
   22e28:	6144      	str	r4, [r0, #20]
   22e2a:	6103      	str	r3, [r0, #16]
   22e2c:	bd10      	pop	{r4, pc}
   22e2e:	bf00      	nop
   22e30:	0002fde0 	.word	0x0002fde0
   22e34:	0002fdf1 	.word	0x0002fdf1

00022e38 <__multiply>:
   22e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e3c:	4614      	mov	r4, r2
   22e3e:	690a      	ldr	r2, [r1, #16]
   22e40:	460f      	mov	r7, r1
   22e42:	b085      	sub	sp, #20
   22e44:	6923      	ldr	r3, [r4, #16]
   22e46:	429a      	cmp	r2, r3
   22e48:	bfa2      	ittt	ge
   22e4a:	4623      	movge	r3, r4
   22e4c:	460c      	movge	r4, r1
   22e4e:	461f      	movge	r7, r3
   22e50:	f8d4 a010 	ldr.w	sl, [r4, #16]
   22e54:	68a3      	ldr	r3, [r4, #8]
   22e56:	f8d7 9010 	ldr.w	r9, [r7, #16]
   22e5a:	6861      	ldr	r1, [r4, #4]
   22e5c:	eb0a 0609 	add.w	r6, sl, r9
   22e60:	42b3      	cmp	r3, r6
   22e62:	bfb8      	it	lt
   22e64:	3101      	addlt	r1, #1
   22e66:	f7ff ff27 	bl	22cb8 <_Balloc>
   22e6a:	b930      	cbnz	r0, 22e7a <__multiply+0x42>
   22e6c:	4602      	mov	r2, r0
   22e6e:	4b45      	ldr	r3, [pc, #276]	; (22f84 <__multiply+0x14c>)
   22e70:	f240 115d 	movw	r1, #349	; 0x15d
   22e74:	4844      	ldr	r0, [pc, #272]	; (22f88 <__multiply+0x150>)
   22e76:	f7ff fe1f 	bl	22ab8 <__assert_func>
   22e7a:	f100 0514 	add.w	r5, r0, #20
   22e7e:	2200      	movs	r2, #0
   22e80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   22e84:	462b      	mov	r3, r5
   22e86:	4543      	cmp	r3, r8
   22e88:	d321      	bcc.n	22ece <__multiply+0x96>
   22e8a:	f107 0114 	add.w	r1, r7, #20
   22e8e:	f104 0214 	add.w	r2, r4, #20
   22e92:	f104 0715 	add.w	r7, r4, #21
   22e96:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   22e9a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   22e9e:	9302      	str	r3, [sp, #8]
   22ea0:	1b13      	subs	r3, r2, r4
   22ea2:	3b15      	subs	r3, #21
   22ea4:	f023 0303 	bic.w	r3, r3, #3
   22ea8:	3304      	adds	r3, #4
   22eaa:	42ba      	cmp	r2, r7
   22eac:	bf38      	it	cc
   22eae:	2304      	movcc	r3, #4
   22eb0:	9301      	str	r3, [sp, #4]
   22eb2:	9b02      	ldr	r3, [sp, #8]
   22eb4:	9103      	str	r1, [sp, #12]
   22eb6:	428b      	cmp	r3, r1
   22eb8:	d80c      	bhi.n	22ed4 <__multiply+0x9c>
   22eba:	2e00      	cmp	r6, #0
   22ebc:	dd03      	ble.n	22ec6 <__multiply+0x8e>
   22ebe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   22ec2:	2b00      	cmp	r3, #0
   22ec4:	d05b      	beq.n	22f7e <__multiply+0x146>
   22ec6:	6106      	str	r6, [r0, #16]
   22ec8:	b005      	add	sp, #20
   22eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ece:	f843 2b04 	str.w	r2, [r3], #4
   22ed2:	e7d8      	b.n	22e86 <__multiply+0x4e>
   22ed4:	f8b1 a000 	ldrh.w	sl, [r1]
   22ed8:	f1ba 0f00 	cmp.w	sl, #0
   22edc:	d024      	beq.n	22f28 <__multiply+0xf0>
   22ede:	f104 0e14 	add.w	lr, r4, #20
   22ee2:	46a9      	mov	r9, r5
   22ee4:	f04f 0c00 	mov.w	ip, #0
   22ee8:	f85e 7b04 	ldr.w	r7, [lr], #4
   22eec:	f8d9 3000 	ldr.w	r3, [r9]
   22ef0:	fa1f fb87 	uxth.w	fp, r7
   22ef4:	4572      	cmp	r2, lr
   22ef6:	b29b      	uxth	r3, r3
   22ef8:	ea4f 4717 	mov.w	r7, r7, lsr #16
   22efc:	fb0a 330b 	mla	r3, sl, fp, r3
   22f00:	4463      	add	r3, ip
   22f02:	f8d9 c000 	ldr.w	ip, [r9]
   22f06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   22f0a:	fb0a c707 	mla	r7, sl, r7, ip
   22f0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   22f12:	b29b      	uxth	r3, r3
   22f14:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   22f18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   22f1c:	f849 3b04 	str.w	r3, [r9], #4
   22f20:	d8e2      	bhi.n	22ee8 <__multiply+0xb0>
   22f22:	9b01      	ldr	r3, [sp, #4]
   22f24:	f845 c003 	str.w	ip, [r5, r3]
   22f28:	9b03      	ldr	r3, [sp, #12]
   22f2a:	3104      	adds	r1, #4
   22f2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   22f30:	f1b9 0f00 	cmp.w	r9, #0
   22f34:	d021      	beq.n	22f7a <__multiply+0x142>
   22f36:	682b      	ldr	r3, [r5, #0]
   22f38:	f104 0c14 	add.w	ip, r4, #20
   22f3c:	46ae      	mov	lr, r5
   22f3e:	f04f 0a00 	mov.w	sl, #0
   22f42:	f8bc b000 	ldrh.w	fp, [ip]
   22f46:	b29b      	uxth	r3, r3
   22f48:	f8be 7002 	ldrh.w	r7, [lr, #2]
   22f4c:	fb09 770b 	mla	r7, r9, fp, r7
   22f50:	4457      	add	r7, sl
   22f52:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   22f56:	f84e 3b04 	str.w	r3, [lr], #4
   22f5a:	f85c 3b04 	ldr.w	r3, [ip], #4
   22f5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   22f62:	f8be 3000 	ldrh.w	r3, [lr]
   22f66:	4562      	cmp	r2, ip
   22f68:	fb09 330a 	mla	r3, r9, sl, r3
   22f6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   22f70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   22f74:	d8e5      	bhi.n	22f42 <__multiply+0x10a>
   22f76:	9f01      	ldr	r7, [sp, #4]
   22f78:	51eb      	str	r3, [r5, r7]
   22f7a:	3504      	adds	r5, #4
   22f7c:	e799      	b.n	22eb2 <__multiply+0x7a>
   22f7e:	3e01      	subs	r6, #1
   22f80:	e79b      	b.n	22eba <__multiply+0x82>
   22f82:	bf00      	nop
   22f84:	0002fde0 	.word	0x0002fde0
   22f88:	0002fdf1 	.word	0x0002fdf1

00022f8c <__pow5mult>:
   22f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22f90:	4615      	mov	r5, r2
   22f92:	f012 0203 	ands.w	r2, r2, #3
   22f96:	4607      	mov	r7, r0
   22f98:	460e      	mov	r6, r1
   22f9a:	d007      	beq.n	22fac <__pow5mult+0x20>
   22f9c:	3a01      	subs	r2, #1
   22f9e:	4c25      	ldr	r4, [pc, #148]	; (23034 <__pow5mult+0xa8>)
   22fa0:	2300      	movs	r3, #0
   22fa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   22fa6:	f7ff fee9 	bl	22d7c <__multadd>
   22faa:	4606      	mov	r6, r0
   22fac:	10ad      	asrs	r5, r5, #2
   22fae:	d03d      	beq.n	2302c <__pow5mult+0xa0>
   22fb0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   22fb2:	b97c      	cbnz	r4, 22fd4 <__pow5mult+0x48>
   22fb4:	2010      	movs	r0, #16
   22fb6:	f7ff f947 	bl	22248 <malloc>
   22fba:	4602      	mov	r2, r0
   22fbc:	6278      	str	r0, [r7, #36]	; 0x24
   22fbe:	b928      	cbnz	r0, 22fcc <__pow5mult+0x40>
   22fc0:	4b1d      	ldr	r3, [pc, #116]	; (23038 <__pow5mult+0xac>)
   22fc2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   22fc6:	481d      	ldr	r0, [pc, #116]	; (2303c <__pow5mult+0xb0>)
   22fc8:	f7ff fd76 	bl	22ab8 <__assert_func>
   22fcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   22fd0:	6004      	str	r4, [r0, #0]
   22fd2:	60c4      	str	r4, [r0, #12]
   22fd4:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   22fd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   22fdc:	b94c      	cbnz	r4, 22ff2 <__pow5mult+0x66>
   22fde:	f240 2171 	movw	r1, #625	; 0x271
   22fe2:	4638      	mov	r0, r7
   22fe4:	f7ff ff12 	bl	22e0c <__i2b>
   22fe8:	2300      	movs	r3, #0
   22fea:	4604      	mov	r4, r0
   22fec:	f8c8 0008 	str.w	r0, [r8, #8]
   22ff0:	6003      	str	r3, [r0, #0]
   22ff2:	f04f 0900 	mov.w	r9, #0
   22ff6:	07eb      	lsls	r3, r5, #31
   22ff8:	d50a      	bpl.n	23010 <__pow5mult+0x84>
   22ffa:	4631      	mov	r1, r6
   22ffc:	4622      	mov	r2, r4
   22ffe:	4638      	mov	r0, r7
   23000:	f7ff ff1a 	bl	22e38 <__multiply>
   23004:	4680      	mov	r8, r0
   23006:	4631      	mov	r1, r6
   23008:	4638      	mov	r0, r7
   2300a:	4646      	mov	r6, r8
   2300c:	f7ff fe94 	bl	22d38 <_Bfree>
   23010:	106d      	asrs	r5, r5, #1
   23012:	d00b      	beq.n	2302c <__pow5mult+0xa0>
   23014:	6820      	ldr	r0, [r4, #0]
   23016:	b938      	cbnz	r0, 23028 <__pow5mult+0x9c>
   23018:	4622      	mov	r2, r4
   2301a:	4621      	mov	r1, r4
   2301c:	4638      	mov	r0, r7
   2301e:	f7ff ff0b 	bl	22e38 <__multiply>
   23022:	6020      	str	r0, [r4, #0]
   23024:	f8c0 9000 	str.w	r9, [r0]
   23028:	4604      	mov	r4, r0
   2302a:	e7e4      	b.n	22ff6 <__pow5mult+0x6a>
   2302c:	4630      	mov	r0, r6
   2302e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23032:	bf00      	nop
   23034:	0002a5d8 	.word	0x0002a5d8
   23038:	0002fd55 	.word	0x0002fd55
   2303c:	0002fdf1 	.word	0x0002fdf1

00023040 <__lshift>:
   23040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23044:	460c      	mov	r4, r1
   23046:	4607      	mov	r7, r0
   23048:	4691      	mov	r9, r2
   2304a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2304e:	6923      	ldr	r3, [r4, #16]
   23050:	6849      	ldr	r1, [r1, #4]
   23052:	eb03 1862 	add.w	r8, r3, r2, asr #5
   23056:	68a3      	ldr	r3, [r4, #8]
   23058:	f108 0601 	add.w	r6, r8, #1
   2305c:	42b3      	cmp	r3, r6
   2305e:	db0b      	blt.n	23078 <__lshift+0x38>
   23060:	4638      	mov	r0, r7
   23062:	f7ff fe29 	bl	22cb8 <_Balloc>
   23066:	4605      	mov	r5, r0
   23068:	b948      	cbnz	r0, 2307e <__lshift+0x3e>
   2306a:	4602      	mov	r2, r0
   2306c:	4b28      	ldr	r3, [pc, #160]	; (23110 <__lshift+0xd0>)
   2306e:	f240 11d9 	movw	r1, #473	; 0x1d9
   23072:	4828      	ldr	r0, [pc, #160]	; (23114 <__lshift+0xd4>)
   23074:	f7ff fd20 	bl	22ab8 <__assert_func>
   23078:	3101      	adds	r1, #1
   2307a:	005b      	lsls	r3, r3, #1
   2307c:	e7ee      	b.n	2305c <__lshift+0x1c>
   2307e:	2300      	movs	r3, #0
   23080:	f100 0114 	add.w	r1, r0, #20
   23084:	f100 0210 	add.w	r2, r0, #16
   23088:	4618      	mov	r0, r3
   2308a:	4553      	cmp	r3, sl
   2308c:	db33      	blt.n	230f6 <__lshift+0xb6>
   2308e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   23092:	f104 0314 	add.w	r3, r4, #20
   23096:	6920      	ldr	r0, [r4, #16]
   23098:	f019 091f 	ands.w	r9, r9, #31
   2309c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   230a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   230a4:	d02b      	beq.n	230fe <__lshift+0xbe>
   230a6:	f1c9 0e20 	rsb	lr, r9, #32
   230aa:	468a      	mov	sl, r1
   230ac:	2200      	movs	r2, #0
   230ae:	6818      	ldr	r0, [r3, #0]
   230b0:	fa00 f009 	lsl.w	r0, r0, r9
   230b4:	4310      	orrs	r0, r2
   230b6:	f84a 0b04 	str.w	r0, [sl], #4
   230ba:	f853 2b04 	ldr.w	r2, [r3], #4
   230be:	459c      	cmp	ip, r3
   230c0:	fa22 f20e 	lsr.w	r2, r2, lr
   230c4:	d8f3      	bhi.n	230ae <__lshift+0x6e>
   230c6:	ebac 0304 	sub.w	r3, ip, r4
   230ca:	f104 0015 	add.w	r0, r4, #21
   230ce:	3b15      	subs	r3, #21
   230d0:	f023 0303 	bic.w	r3, r3, #3
   230d4:	3304      	adds	r3, #4
   230d6:	4584      	cmp	ip, r0
   230d8:	bf38      	it	cc
   230da:	2304      	movcc	r3, #4
   230dc:	50ca      	str	r2, [r1, r3]
   230de:	b10a      	cbz	r2, 230e4 <__lshift+0xa4>
   230e0:	f108 0602 	add.w	r6, r8, #2
   230e4:	3e01      	subs	r6, #1
   230e6:	4638      	mov	r0, r7
   230e8:	4621      	mov	r1, r4
   230ea:	612e      	str	r6, [r5, #16]
   230ec:	f7ff fe24 	bl	22d38 <_Bfree>
   230f0:	4628      	mov	r0, r5
   230f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   230f6:	3301      	adds	r3, #1
   230f8:	f842 0f04 	str.w	r0, [r2, #4]!
   230fc:	e7c5      	b.n	2308a <__lshift+0x4a>
   230fe:	3904      	subs	r1, #4
   23100:	f853 2b04 	ldr.w	r2, [r3], #4
   23104:	459c      	cmp	ip, r3
   23106:	f841 2f04 	str.w	r2, [r1, #4]!
   2310a:	d8f9      	bhi.n	23100 <__lshift+0xc0>
   2310c:	e7ea      	b.n	230e4 <__lshift+0xa4>
   2310e:	bf00      	nop
   23110:	0002fde0 	.word	0x0002fde0
   23114:	0002fdf1 	.word	0x0002fdf1

00023118 <__mdiff>:
   23118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2311c:	4689      	mov	r9, r1
   2311e:	4606      	mov	r6, r0
   23120:	4611      	mov	r1, r2
   23122:	4614      	mov	r4, r2
   23124:	4648      	mov	r0, r9
   23126:	f005 fdf3 	bl	28d10 <__mcmp>
   2312a:	1e05      	subs	r5, r0, #0
   2312c:	d112      	bne.n	23154 <__mdiff+0x3c>
   2312e:	4629      	mov	r1, r5
   23130:	4630      	mov	r0, r6
   23132:	f7ff fdc1 	bl	22cb8 <_Balloc>
   23136:	4602      	mov	r2, r0
   23138:	b928      	cbnz	r0, 23146 <__mdiff+0x2e>
   2313a:	4b40      	ldr	r3, [pc, #256]	; (2323c <__mdiff+0x124>)
   2313c:	f240 2132 	movw	r1, #562	; 0x232
   23140:	483f      	ldr	r0, [pc, #252]	; (23240 <__mdiff+0x128>)
   23142:	f7ff fcb9 	bl	22ab8 <__assert_func>
   23146:	2301      	movs	r3, #1
   23148:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2314c:	4610      	mov	r0, r2
   2314e:	b003      	add	sp, #12
   23150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23154:	bfbc      	itt	lt
   23156:	464b      	movlt	r3, r9
   23158:	46a1      	movlt	r9, r4
   2315a:	4630      	mov	r0, r6
   2315c:	bfb8      	it	lt
   2315e:	2501      	movlt	r5, #1
   23160:	f8d9 1004 	ldr.w	r1, [r9, #4]
   23164:	bfb4      	ite	lt
   23166:	461c      	movlt	r4, r3
   23168:	2500      	movge	r5, #0
   2316a:	f7ff fda5 	bl	22cb8 <_Balloc>
   2316e:	4602      	mov	r2, r0
   23170:	b918      	cbnz	r0, 2317a <__mdiff+0x62>
   23172:	4b32      	ldr	r3, [pc, #200]	; (2323c <__mdiff+0x124>)
   23174:	f44f 7110 	mov.w	r1, #576	; 0x240
   23178:	e7e2      	b.n	23140 <__mdiff+0x28>
   2317a:	f8d9 7010 	ldr.w	r7, [r9, #16]
   2317e:	f104 0e14 	add.w	lr, r4, #20
   23182:	6926      	ldr	r6, [r4, #16]
   23184:	f100 0b14 	add.w	fp, r0, #20
   23188:	60c5      	str	r5, [r0, #12]
   2318a:	f109 0514 	add.w	r5, r9, #20
   2318e:	f109 0310 	add.w	r3, r9, #16
   23192:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   23196:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   2319a:	46d9      	mov	r9, fp
   2319c:	f04f 0c00 	mov.w	ip, #0
   231a0:	9301      	str	r3, [sp, #4]
   231a2:	9b01      	ldr	r3, [sp, #4]
   231a4:	f85e 0b04 	ldr.w	r0, [lr], #4
   231a8:	f853 af04 	ldr.w	sl, [r3, #4]!
   231ac:	b281      	uxth	r1, r0
   231ae:	4576      	cmp	r6, lr
   231b0:	9301      	str	r3, [sp, #4]
   231b2:	fa1f f38a 	uxth.w	r3, sl
   231b6:	ea4f 4010 	mov.w	r0, r0, lsr #16
   231ba:	eba3 0301 	sub.w	r3, r3, r1
   231be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   231c2:	4463      	add	r3, ip
   231c4:	eb00 4023 	add.w	r0, r0, r3, asr #16
   231c8:	b29b      	uxth	r3, r3
   231ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
   231ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   231d2:	f849 3b04 	str.w	r3, [r9], #4
   231d6:	d8e4      	bhi.n	231a2 <__mdiff+0x8a>
   231d8:	1b33      	subs	r3, r6, r4
   231da:	3415      	adds	r4, #21
   231dc:	3b15      	subs	r3, #21
   231de:	f023 0303 	bic.w	r3, r3, #3
   231e2:	3304      	adds	r3, #4
   231e4:	42a6      	cmp	r6, r4
   231e6:	bf38      	it	cc
   231e8:	2304      	movcc	r3, #4
   231ea:	441d      	add	r5, r3
   231ec:	445b      	add	r3, fp
   231ee:	462c      	mov	r4, r5
   231f0:	461e      	mov	r6, r3
   231f2:	4544      	cmp	r4, r8
   231f4:	d30e      	bcc.n	23214 <__mdiff+0xfc>
   231f6:	f108 0103 	add.w	r1, r8, #3
   231fa:	1b49      	subs	r1, r1, r5
   231fc:	3d03      	subs	r5, #3
   231fe:	f021 0103 	bic.w	r1, r1, #3
   23202:	45a8      	cmp	r8, r5
   23204:	bf38      	it	cc
   23206:	2100      	movcc	r1, #0
   23208:	440b      	add	r3, r1
   2320a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2320e:	b199      	cbz	r1, 23238 <__mdiff+0x120>
   23210:	6117      	str	r7, [r2, #16]
   23212:	e79b      	b.n	2314c <__mdiff+0x34>
   23214:	f854 1b04 	ldr.w	r1, [r4], #4
   23218:	46e6      	mov	lr, ip
   2321a:	fa1f fc81 	uxth.w	ip, r1
   2321e:	0c08      	lsrs	r0, r1, #16
   23220:	4471      	add	r1, lr
   23222:	44f4      	add	ip, lr
   23224:	b289      	uxth	r1, r1
   23226:	eb00 402c 	add.w	r0, r0, ip, asr #16
   2322a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   2322e:	ea4f 4c20 	mov.w	ip, r0, asr #16
   23232:	f846 1b04 	str.w	r1, [r6], #4
   23236:	e7dc      	b.n	231f2 <__mdiff+0xda>
   23238:	3f01      	subs	r7, #1
   2323a:	e7e6      	b.n	2320a <__mdiff+0xf2>
   2323c:	0002fde0 	.word	0x0002fde0
   23240:	0002fdf1 	.word	0x0002fdf1

00023244 <__d2b>:
   23244:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   23248:	2101      	movs	r1, #1
   2324a:	4690      	mov	r8, r2
   2324c:	4699      	mov	r9, r3
   2324e:	9e08      	ldr	r6, [sp, #32]
   23250:	f7ff fd32 	bl	22cb8 <_Balloc>
   23254:	4604      	mov	r4, r0
   23256:	b930      	cbnz	r0, 23266 <__d2b+0x22>
   23258:	4602      	mov	r2, r0
   2325a:	4b24      	ldr	r3, [pc, #144]	; (232ec <__d2b+0xa8>)
   2325c:	f240 310a 	movw	r1, #778	; 0x30a
   23260:	4823      	ldr	r0, [pc, #140]	; (232f0 <__d2b+0xac>)
   23262:	f7ff fc29 	bl	22ab8 <__assert_func>
   23266:	f3c9 550a 	ubfx	r5, r9, #20, #11
   2326a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2326e:	b10d      	cbz	r5, 23274 <__d2b+0x30>
   23270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   23274:	9301      	str	r3, [sp, #4]
   23276:	f1b8 0300 	subs.w	r3, r8, #0
   2327a:	d024      	beq.n	232c6 <__d2b+0x82>
   2327c:	4668      	mov	r0, sp
   2327e:	9300      	str	r3, [sp, #0]
   23280:	f005 fd19 	bl	28cb6 <__lo0bits>
   23284:	e9dd 1200 	ldrd	r1, r2, [sp]
   23288:	b1d8      	cbz	r0, 232c2 <__d2b+0x7e>
   2328a:	f1c0 0320 	rsb	r3, r0, #32
   2328e:	fa02 f303 	lsl.w	r3, r2, r3
   23292:	40c2      	lsrs	r2, r0
   23294:	430b      	orrs	r3, r1
   23296:	9201      	str	r2, [sp, #4]
   23298:	6163      	str	r3, [r4, #20]
   2329a:	9b01      	ldr	r3, [sp, #4]
   2329c:	2b00      	cmp	r3, #0
   2329e:	61a3      	str	r3, [r4, #24]
   232a0:	bf0c      	ite	eq
   232a2:	2201      	moveq	r2, #1
   232a4:	2202      	movne	r2, #2
   232a6:	6122      	str	r2, [r4, #16]
   232a8:	b1ad      	cbz	r5, 232d6 <__d2b+0x92>
   232aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   232ae:	4405      	add	r5, r0
   232b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   232b4:	6035      	str	r5, [r6, #0]
   232b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   232b8:	6018      	str	r0, [r3, #0]
   232ba:	4620      	mov	r0, r4
   232bc:	b002      	add	sp, #8
   232be:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   232c2:	6161      	str	r1, [r4, #20]
   232c4:	e7e9      	b.n	2329a <__d2b+0x56>
   232c6:	a801      	add	r0, sp, #4
   232c8:	f005 fcf5 	bl	28cb6 <__lo0bits>
   232cc:	9b01      	ldr	r3, [sp, #4]
   232ce:	3020      	adds	r0, #32
   232d0:	2201      	movs	r2, #1
   232d2:	6163      	str	r3, [r4, #20]
   232d4:	e7e7      	b.n	232a6 <__d2b+0x62>
   232d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   232da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   232de:	6030      	str	r0, [r6, #0]
   232e0:	6918      	ldr	r0, [r3, #16]
   232e2:	f005 fcc6 	bl	28c72 <__hi0bits>
   232e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   232ea:	e7e4      	b.n	232b6 <__d2b+0x72>
   232ec:	0002fde0 	.word	0x0002fde0
   232f0:	0002fdf1 	.word	0x0002fdf1

000232f4 <_vfiprintf_r>:
   232f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   232f8:	460d      	mov	r5, r1
   232fa:	b09d      	sub	sp, #116	; 0x74
   232fc:	4614      	mov	r4, r2
   232fe:	4698      	mov	r8, r3
   23300:	4606      	mov	r6, r0
   23302:	b118      	cbz	r0, 2330c <_vfiprintf_r+0x18>
   23304:	6983      	ldr	r3, [r0, #24]
   23306:	b90b      	cbnz	r3, 2330c <_vfiprintf_r+0x18>
   23308:	f7ff fc36 	bl	22b78 <__sinit>
   2330c:	4b87      	ldr	r3, [pc, #540]	; (2352c <_vfiprintf_r+0x238>)
   2330e:	429d      	cmp	r5, r3
   23310:	d11b      	bne.n	2334a <_vfiprintf_r+0x56>
   23312:	6875      	ldr	r5, [r6, #4]
   23314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   23316:	07d9      	lsls	r1, r3, #31
   23318:	d405      	bmi.n	23326 <_vfiprintf_r+0x32>
   2331a:	89ab      	ldrh	r3, [r5, #12]
   2331c:	059a      	lsls	r2, r3, #22
   2331e:	d402      	bmi.n	23326 <_vfiprintf_r+0x32>
   23320:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23322:	f7ed f823 	bl	1036c <__retarget_lock_acquire_recursive>
   23326:	89ab      	ldrh	r3, [r5, #12]
   23328:	071b      	lsls	r3, r3, #28
   2332a:	d501      	bpl.n	23330 <_vfiprintf_r+0x3c>
   2332c:	692b      	ldr	r3, [r5, #16]
   2332e:	b9eb      	cbnz	r3, 2336c <_vfiprintf_r+0x78>
   23330:	4629      	mov	r1, r5
   23332:	4630      	mov	r0, r6
   23334:	f000 f96e 	bl	23614 <__swsetup_r>
   23338:	b1c0      	cbz	r0, 2336c <_vfiprintf_r+0x78>
   2333a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2333c:	07dc      	lsls	r4, r3, #31
   2333e:	d50e      	bpl.n	2335e <_vfiprintf_r+0x6a>
   23340:	f04f 30ff 	mov.w	r0, #4294967295
   23344:	b01d      	add	sp, #116	; 0x74
   23346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2334a:	4b79      	ldr	r3, [pc, #484]	; (23530 <_vfiprintf_r+0x23c>)
   2334c:	429d      	cmp	r5, r3
   2334e:	d101      	bne.n	23354 <_vfiprintf_r+0x60>
   23350:	68b5      	ldr	r5, [r6, #8]
   23352:	e7df      	b.n	23314 <_vfiprintf_r+0x20>
   23354:	4b77      	ldr	r3, [pc, #476]	; (23534 <_vfiprintf_r+0x240>)
   23356:	429d      	cmp	r5, r3
   23358:	bf08      	it	eq
   2335a:	68f5      	ldreq	r5, [r6, #12]
   2335c:	e7da      	b.n	23314 <_vfiprintf_r+0x20>
   2335e:	89ab      	ldrh	r3, [r5, #12]
   23360:	0598      	lsls	r0, r3, #22
   23362:	d4ed      	bmi.n	23340 <_vfiprintf_r+0x4c>
   23364:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23366:	f7ed f81d 	bl	103a4 <__retarget_lock_release_recursive>
   2336a:	e7e9      	b.n	23340 <_vfiprintf_r+0x4c>
   2336c:	2300      	movs	r3, #0
   2336e:	f8cd 800c 	str.w	r8, [sp, #12]
   23372:	f04f 0901 	mov.w	r9, #1
   23376:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 23538 <_vfiprintf_r+0x244>
   2337a:	9309      	str	r3, [sp, #36]	; 0x24
   2337c:	2320      	movs	r3, #32
   2337e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   23382:	2330      	movs	r3, #48	; 0x30
   23384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   23388:	4623      	mov	r3, r4
   2338a:	469a      	mov	sl, r3
   2338c:	f813 2b01 	ldrb.w	r2, [r3], #1
   23390:	b10a      	cbz	r2, 23396 <_vfiprintf_r+0xa2>
   23392:	2a25      	cmp	r2, #37	; 0x25
   23394:	d1f9      	bne.n	2338a <_vfiprintf_r+0x96>
   23396:	ebba 0b04 	subs.w	fp, sl, r4
   2339a:	d00b      	beq.n	233b4 <_vfiprintf_r+0xc0>
   2339c:	465b      	mov	r3, fp
   2339e:	4622      	mov	r2, r4
   233a0:	4629      	mov	r1, r5
   233a2:	4630      	mov	r0, r6
   233a4:	f005 fce4 	bl	28d70 <__sfputs_r>
   233a8:	3001      	adds	r0, #1
   233aa:	f000 80a6 	beq.w	234fa <_vfiprintf_r+0x206>
   233ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   233b0:	445a      	add	r2, fp
   233b2:	9209      	str	r2, [sp, #36]	; 0x24
   233b4:	f89a 3000 	ldrb.w	r3, [sl]
   233b8:	2b00      	cmp	r3, #0
   233ba:	f000 809e 	beq.w	234fa <_vfiprintf_r+0x206>
   233be:	2300      	movs	r3, #0
   233c0:	f04f 32ff 	mov.w	r2, #4294967295
   233c4:	f10a 0a01 	add.w	sl, sl, #1
   233c8:	9304      	str	r3, [sp, #16]
   233ca:	9307      	str	r3, [sp, #28]
   233cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   233d0:	931a      	str	r3, [sp, #104]	; 0x68
   233d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
   233d6:	4654      	mov	r4, sl
   233d8:	2205      	movs	r2, #5
   233da:	4857      	ldr	r0, [pc, #348]	; (23538 <_vfiprintf_r+0x244>)
   233dc:	f814 1b01 	ldrb.w	r1, [r4], #1
   233e0:	f005 fc39 	bl	28c56 <memchr>
   233e4:	9b04      	ldr	r3, [sp, #16]
   233e6:	b9d0      	cbnz	r0, 2341e <_vfiprintf_r+0x12a>
   233e8:	06d9      	lsls	r1, r3, #27
   233ea:	bf44      	itt	mi
   233ec:	2220      	movmi	r2, #32
   233ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   233f2:	071a      	lsls	r2, r3, #28
   233f4:	bf44      	itt	mi
   233f6:	222b      	movmi	r2, #43	; 0x2b
   233f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   233fc:	f89a 2000 	ldrb.w	r2, [sl]
   23400:	2a2a      	cmp	r2, #42	; 0x2a
   23402:	d014      	beq.n	2342e <_vfiprintf_r+0x13a>
   23404:	9a07      	ldr	r2, [sp, #28]
   23406:	4654      	mov	r4, sl
   23408:	2000      	movs	r0, #0
   2340a:	f04f 0c0a 	mov.w	ip, #10
   2340e:	4621      	mov	r1, r4
   23410:	f811 3b01 	ldrb.w	r3, [r1], #1
   23414:	3b30      	subs	r3, #48	; 0x30
   23416:	2b09      	cmp	r3, #9
   23418:	d94a      	bls.n	234b0 <_vfiprintf_r+0x1bc>
   2341a:	b970      	cbnz	r0, 2343a <_vfiprintf_r+0x146>
   2341c:	e014      	b.n	23448 <_vfiprintf_r+0x154>
   2341e:	eba0 0008 	sub.w	r0, r0, r8
   23422:	46a2      	mov	sl, r4
   23424:	fa09 f000 	lsl.w	r0, r9, r0
   23428:	4318      	orrs	r0, r3
   2342a:	9004      	str	r0, [sp, #16]
   2342c:	e7d3      	b.n	233d6 <_vfiprintf_r+0xe2>
   2342e:	9a03      	ldr	r2, [sp, #12]
   23430:	1d11      	adds	r1, r2, #4
   23432:	6812      	ldr	r2, [r2, #0]
   23434:	2a00      	cmp	r2, #0
   23436:	9103      	str	r1, [sp, #12]
   23438:	db01      	blt.n	2343e <_vfiprintf_r+0x14a>
   2343a:	9207      	str	r2, [sp, #28]
   2343c:	e004      	b.n	23448 <_vfiprintf_r+0x154>
   2343e:	4252      	negs	r2, r2
   23440:	f043 0302 	orr.w	r3, r3, #2
   23444:	9207      	str	r2, [sp, #28]
   23446:	9304      	str	r3, [sp, #16]
   23448:	7823      	ldrb	r3, [r4, #0]
   2344a:	2b2e      	cmp	r3, #46	; 0x2e
   2344c:	d10a      	bne.n	23464 <_vfiprintf_r+0x170>
   2344e:	7863      	ldrb	r3, [r4, #1]
   23450:	2b2a      	cmp	r3, #42	; 0x2a
   23452:	d132      	bne.n	234ba <_vfiprintf_r+0x1c6>
   23454:	9b03      	ldr	r3, [sp, #12]
   23456:	3402      	adds	r4, #2
   23458:	1d1a      	adds	r2, r3, #4
   2345a:	681b      	ldr	r3, [r3, #0]
   2345c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   23460:	9203      	str	r2, [sp, #12]
   23462:	9305      	str	r3, [sp, #20]
   23464:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2353c <_vfiprintf_r+0x248>
   23468:	2203      	movs	r2, #3
   2346a:	7821      	ldrb	r1, [r4, #0]
   2346c:	4650      	mov	r0, sl
   2346e:	f005 fbf2 	bl	28c56 <memchr>
   23472:	b138      	cbz	r0, 23484 <_vfiprintf_r+0x190>
   23474:	eba0 000a 	sub.w	r0, r0, sl
   23478:	2240      	movs	r2, #64	; 0x40
   2347a:	9b04      	ldr	r3, [sp, #16]
   2347c:	3401      	adds	r4, #1
   2347e:	4082      	lsls	r2, r0
   23480:	4313      	orrs	r3, r2
   23482:	9304      	str	r3, [sp, #16]
   23484:	f814 1b01 	ldrb.w	r1, [r4], #1
   23488:	2206      	movs	r2, #6
   2348a:	482d      	ldr	r0, [pc, #180]	; (23540 <_vfiprintf_r+0x24c>)
   2348c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   23490:	f005 fbe1 	bl	28c56 <memchr>
   23494:	2800      	cmp	r0, #0
   23496:	d03f      	beq.n	23518 <_vfiprintf_r+0x224>
   23498:	4b2a      	ldr	r3, [pc, #168]	; (23544 <_vfiprintf_r+0x250>)
   2349a:	bb1b      	cbnz	r3, 234e4 <_vfiprintf_r+0x1f0>
   2349c:	9b03      	ldr	r3, [sp, #12]
   2349e:	3307      	adds	r3, #7
   234a0:	f023 0307 	bic.w	r3, r3, #7
   234a4:	3308      	adds	r3, #8
   234a6:	9303      	str	r3, [sp, #12]
   234a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   234aa:	443b      	add	r3, r7
   234ac:	9309      	str	r3, [sp, #36]	; 0x24
   234ae:	e76b      	b.n	23388 <_vfiprintf_r+0x94>
   234b0:	fb0c 3202 	mla	r2, ip, r2, r3
   234b4:	460c      	mov	r4, r1
   234b6:	2001      	movs	r0, #1
   234b8:	e7a9      	b.n	2340e <_vfiprintf_r+0x11a>
   234ba:	2300      	movs	r3, #0
   234bc:	3401      	adds	r4, #1
   234be:	f04f 0c0a 	mov.w	ip, #10
   234c2:	4619      	mov	r1, r3
   234c4:	9305      	str	r3, [sp, #20]
   234c6:	4620      	mov	r0, r4
   234c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   234cc:	3a30      	subs	r2, #48	; 0x30
   234ce:	2a09      	cmp	r2, #9
   234d0:	d903      	bls.n	234da <_vfiprintf_r+0x1e6>
   234d2:	2b00      	cmp	r3, #0
   234d4:	d0c6      	beq.n	23464 <_vfiprintf_r+0x170>
   234d6:	9105      	str	r1, [sp, #20]
   234d8:	e7c4      	b.n	23464 <_vfiprintf_r+0x170>
   234da:	fb0c 2101 	mla	r1, ip, r1, r2
   234de:	4604      	mov	r4, r0
   234e0:	2301      	movs	r3, #1
   234e2:	e7f0      	b.n	234c6 <_vfiprintf_r+0x1d2>
   234e4:	ab03      	add	r3, sp, #12
   234e6:	462a      	mov	r2, r5
   234e8:	a904      	add	r1, sp, #16
   234ea:	4630      	mov	r0, r6
   234ec:	9300      	str	r3, [sp, #0]
   234ee:	4b16      	ldr	r3, [pc, #88]	; (23548 <_vfiprintf_r+0x254>)
   234f0:	f7fe ff56 	bl	223a0 <_printf_float>
   234f4:	4607      	mov	r7, r0
   234f6:	1c78      	adds	r0, r7, #1
   234f8:	d1d6      	bne.n	234a8 <_vfiprintf_r+0x1b4>
   234fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   234fc:	07d9      	lsls	r1, r3, #31
   234fe:	d405      	bmi.n	2350c <_vfiprintf_r+0x218>
   23500:	89ab      	ldrh	r3, [r5, #12]
   23502:	059a      	lsls	r2, r3, #22
   23504:	d402      	bmi.n	2350c <_vfiprintf_r+0x218>
   23506:	6da8      	ldr	r0, [r5, #88]	; 0x58
   23508:	f7ec ff4c 	bl	103a4 <__retarget_lock_release_recursive>
   2350c:	89ab      	ldrh	r3, [r5, #12]
   2350e:	065b      	lsls	r3, r3, #25
   23510:	f53f af16 	bmi.w	23340 <_vfiprintf_r+0x4c>
   23514:	9809      	ldr	r0, [sp, #36]	; 0x24
   23516:	e715      	b.n	23344 <_vfiprintf_r+0x50>
   23518:	ab03      	add	r3, sp, #12
   2351a:	462a      	mov	r2, r5
   2351c:	a904      	add	r1, sp, #16
   2351e:	4630      	mov	r0, r6
   23520:	9300      	str	r3, [sp, #0]
   23522:	4b09      	ldr	r3, [pc, #36]	; (23548 <_vfiprintf_r+0x254>)
   23524:	f7ff f972 	bl	2280c <_printf_i>
   23528:	e7e4      	b.n	234f4 <_vfiprintf_r+0x200>
   2352a:	bf00      	nop
   2352c:	0002a5b8 	.word	0x0002a5b8
   23530:	0002a598 	.word	0x0002a598
   23534:	0002a578 	.word	0x0002a578
   23538:	0002fe66 	.word	0x0002fe66
   2353c:	0002fe6c 	.word	0x0002fe6c
   23540:	0002fe70 	.word	0x0002fe70
   23544:	000223a1 	.word	0x000223a1
   23548:	00028d71 	.word	0x00028d71

0002354c <__swbuf_r>:
   2354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2354e:	460e      	mov	r6, r1
   23550:	4614      	mov	r4, r2
   23552:	4605      	mov	r5, r0
   23554:	b118      	cbz	r0, 2355e <__swbuf_r+0x12>
   23556:	6983      	ldr	r3, [r0, #24]
   23558:	b90b      	cbnz	r3, 2355e <__swbuf_r+0x12>
   2355a:	f7ff fb0d 	bl	22b78 <__sinit>
   2355e:	4b21      	ldr	r3, [pc, #132]	; (235e4 <__swbuf_r+0x98>)
   23560:	429c      	cmp	r4, r3
   23562:	d110      	bne.n	23586 <__swbuf_r+0x3a>
   23564:	686c      	ldr	r4, [r5, #4]
   23566:	69a3      	ldr	r3, [r4, #24]
   23568:	60a3      	str	r3, [r4, #8]
   2356a:	89a3      	ldrh	r3, [r4, #12]
   2356c:	071a      	lsls	r2, r3, #28
   2356e:	d501      	bpl.n	23574 <__swbuf_r+0x28>
   23570:	6923      	ldr	r3, [r4, #16]
   23572:	b993      	cbnz	r3, 2359a <__swbuf_r+0x4e>
   23574:	4621      	mov	r1, r4
   23576:	4628      	mov	r0, r5
   23578:	f000 f84c 	bl	23614 <__swsetup_r>
   2357c:	b168      	cbz	r0, 2359a <__swbuf_r+0x4e>
   2357e:	f04f 37ff 	mov.w	r7, #4294967295
   23582:	4638      	mov	r0, r7
   23584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23586:	4b18      	ldr	r3, [pc, #96]	; (235e8 <__swbuf_r+0x9c>)
   23588:	429c      	cmp	r4, r3
   2358a:	d101      	bne.n	23590 <__swbuf_r+0x44>
   2358c:	68ac      	ldr	r4, [r5, #8]
   2358e:	e7ea      	b.n	23566 <__swbuf_r+0x1a>
   23590:	4b16      	ldr	r3, [pc, #88]	; (235ec <__swbuf_r+0xa0>)
   23592:	429c      	cmp	r4, r3
   23594:	bf08      	it	eq
   23596:	68ec      	ldreq	r4, [r5, #12]
   23598:	e7e5      	b.n	23566 <__swbuf_r+0x1a>
   2359a:	6923      	ldr	r3, [r4, #16]
   2359c:	b2f6      	uxtb	r6, r6
   2359e:	6820      	ldr	r0, [r4, #0]
   235a0:	4637      	mov	r7, r6
   235a2:	1ac0      	subs	r0, r0, r3
   235a4:	6963      	ldr	r3, [r4, #20]
   235a6:	4283      	cmp	r3, r0
   235a8:	dc05      	bgt.n	235b6 <__swbuf_r+0x6a>
   235aa:	4621      	mov	r1, r4
   235ac:	4628      	mov	r0, r5
   235ae:	f000 f8ad 	bl	2370c <_fflush_r>
   235b2:	2800      	cmp	r0, #0
   235b4:	d1e3      	bne.n	2357e <__swbuf_r+0x32>
   235b6:	68a3      	ldr	r3, [r4, #8]
   235b8:	3001      	adds	r0, #1
   235ba:	3b01      	subs	r3, #1
   235bc:	60a3      	str	r3, [r4, #8]
   235be:	6823      	ldr	r3, [r4, #0]
   235c0:	1c5a      	adds	r2, r3, #1
   235c2:	6022      	str	r2, [r4, #0]
   235c4:	701e      	strb	r6, [r3, #0]
   235c6:	6963      	ldr	r3, [r4, #20]
   235c8:	4283      	cmp	r3, r0
   235ca:	d004      	beq.n	235d6 <__swbuf_r+0x8a>
   235cc:	89a3      	ldrh	r3, [r4, #12]
   235ce:	07db      	lsls	r3, r3, #31
   235d0:	d5d7      	bpl.n	23582 <__swbuf_r+0x36>
   235d2:	2e0a      	cmp	r6, #10
   235d4:	d1d5      	bne.n	23582 <__swbuf_r+0x36>
   235d6:	4621      	mov	r1, r4
   235d8:	4628      	mov	r0, r5
   235da:	f000 f897 	bl	2370c <_fflush_r>
   235de:	2800      	cmp	r0, #0
   235e0:	d0cf      	beq.n	23582 <__swbuf_r+0x36>
   235e2:	e7cc      	b.n	2357e <__swbuf_r+0x32>
   235e4:	0002a5b8 	.word	0x0002a5b8
   235e8:	0002a598 	.word	0x0002a598
   235ec:	0002a578 	.word	0x0002a578

000235f0 <_write_r>:
   235f0:	b538      	push	{r3, r4, r5, lr}
   235f2:	4604      	mov	r4, r0
   235f4:	4d06      	ldr	r5, [pc, #24]	; (23610 <_write_r+0x20>)
   235f6:	4608      	mov	r0, r1
   235f8:	4611      	mov	r1, r2
   235fa:	2200      	movs	r2, #0
   235fc:	602a      	str	r2, [r5, #0]
   235fe:	461a      	mov	r2, r3
   23600:	f001 fc4c 	bl	24e9c <_write>
   23604:	1c43      	adds	r3, r0, #1
   23606:	d102      	bne.n	2360e <_write_r+0x1e>
   23608:	682b      	ldr	r3, [r5, #0]
   2360a:	b103      	cbz	r3, 2360e <_write_r+0x1e>
   2360c:	6023      	str	r3, [r4, #0]
   2360e:	bd38      	pop	{r3, r4, r5, pc}
   23610:	20021488 	.word	0x20021488

00023614 <__swsetup_r>:
   23614:	4b31      	ldr	r3, [pc, #196]	; (236dc <__swsetup_r+0xc8>)
   23616:	b570      	push	{r4, r5, r6, lr}
   23618:	681d      	ldr	r5, [r3, #0]
   2361a:	4606      	mov	r6, r0
   2361c:	460c      	mov	r4, r1
   2361e:	b125      	cbz	r5, 2362a <__swsetup_r+0x16>
   23620:	69ab      	ldr	r3, [r5, #24]
   23622:	b913      	cbnz	r3, 2362a <__swsetup_r+0x16>
   23624:	4628      	mov	r0, r5
   23626:	f7ff faa7 	bl	22b78 <__sinit>
   2362a:	4b2d      	ldr	r3, [pc, #180]	; (236e0 <__swsetup_r+0xcc>)
   2362c:	429c      	cmp	r4, r3
   2362e:	d10e      	bne.n	2364e <__swsetup_r+0x3a>
   23630:	686c      	ldr	r4, [r5, #4]
   23632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23636:	071a      	lsls	r2, r3, #28
   23638:	d42c      	bmi.n	23694 <__swsetup_r+0x80>
   2363a:	06dd      	lsls	r5, r3, #27
   2363c:	d411      	bmi.n	23662 <__swsetup_r+0x4e>
   2363e:	2209      	movs	r2, #9
   23640:	6032      	str	r2, [r6, #0]
   23642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23646:	f04f 30ff 	mov.w	r0, #4294967295
   2364a:	81a3      	strh	r3, [r4, #12]
   2364c:	e03d      	b.n	236ca <__swsetup_r+0xb6>
   2364e:	4b25      	ldr	r3, [pc, #148]	; (236e4 <__swsetup_r+0xd0>)
   23650:	429c      	cmp	r4, r3
   23652:	d101      	bne.n	23658 <__swsetup_r+0x44>
   23654:	68ac      	ldr	r4, [r5, #8]
   23656:	e7ec      	b.n	23632 <__swsetup_r+0x1e>
   23658:	4b23      	ldr	r3, [pc, #140]	; (236e8 <__swsetup_r+0xd4>)
   2365a:	429c      	cmp	r4, r3
   2365c:	bf08      	it	eq
   2365e:	68ec      	ldreq	r4, [r5, #12]
   23660:	e7e7      	b.n	23632 <__swsetup_r+0x1e>
   23662:	0758      	lsls	r0, r3, #29
   23664:	d512      	bpl.n	2368c <__swsetup_r+0x78>
   23666:	6b61      	ldr	r1, [r4, #52]	; 0x34
   23668:	b141      	cbz	r1, 2367c <__swsetup_r+0x68>
   2366a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2366e:	4299      	cmp	r1, r3
   23670:	d002      	beq.n	23678 <__swsetup_r+0x64>
   23672:	4630      	mov	r0, r6
   23674:	f7fe fdf0 	bl	22258 <_free_r>
   23678:	2300      	movs	r3, #0
   2367a:	6363      	str	r3, [r4, #52]	; 0x34
   2367c:	89a3      	ldrh	r3, [r4, #12]
   2367e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   23682:	81a3      	strh	r3, [r4, #12]
   23684:	2300      	movs	r3, #0
   23686:	6063      	str	r3, [r4, #4]
   23688:	6923      	ldr	r3, [r4, #16]
   2368a:	6023      	str	r3, [r4, #0]
   2368c:	89a3      	ldrh	r3, [r4, #12]
   2368e:	f043 0308 	orr.w	r3, r3, #8
   23692:	81a3      	strh	r3, [r4, #12]
   23694:	6923      	ldr	r3, [r4, #16]
   23696:	b94b      	cbnz	r3, 236ac <__swsetup_r+0x98>
   23698:	89a3      	ldrh	r3, [r4, #12]
   2369a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2369e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   236a2:	d003      	beq.n	236ac <__swsetup_r+0x98>
   236a4:	4621      	mov	r1, r4
   236a6:	4630      	mov	r0, r6
   236a8:	f000 f87e 	bl	237a8 <__smakebuf_r>
   236ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   236b0:	f013 0201 	ands.w	r2, r3, #1
   236b4:	d00a      	beq.n	236cc <__swsetup_r+0xb8>
   236b6:	2200      	movs	r2, #0
   236b8:	60a2      	str	r2, [r4, #8]
   236ba:	6962      	ldr	r2, [r4, #20]
   236bc:	4252      	negs	r2, r2
   236be:	61a2      	str	r2, [r4, #24]
   236c0:	6922      	ldr	r2, [r4, #16]
   236c2:	b942      	cbnz	r2, 236d6 <__swsetup_r+0xc2>
   236c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   236c8:	d1bb      	bne.n	23642 <__swsetup_r+0x2e>
   236ca:	bd70      	pop	{r4, r5, r6, pc}
   236cc:	0799      	lsls	r1, r3, #30
   236ce:	bf58      	it	pl
   236d0:	6962      	ldrpl	r2, [r4, #20]
   236d2:	60a2      	str	r2, [r4, #8]
   236d4:	e7f4      	b.n	236c0 <__swsetup_r+0xac>
   236d6:	2000      	movs	r0, #0
   236d8:	e7f7      	b.n	236ca <__swsetup_r+0xb6>
   236da:	bf00      	nop
   236dc:	20008748 	.word	0x20008748
   236e0:	0002a5b8 	.word	0x0002a5b8
   236e4:	0002a598 	.word	0x0002a598
   236e8:	0002a578 	.word	0x0002a578

000236ec <_close_r>:
   236ec:	b538      	push	{r3, r4, r5, lr}
   236ee:	2300      	movs	r3, #0
   236f0:	4d05      	ldr	r5, [pc, #20]	; (23708 <_close_r+0x1c>)
   236f2:	4604      	mov	r4, r0
   236f4:	4608      	mov	r0, r1
   236f6:	602b      	str	r3, [r5, #0]
   236f8:	f001 fbd4 	bl	24ea4 <_close>
   236fc:	1c43      	adds	r3, r0, #1
   236fe:	d102      	bne.n	23706 <_close_r+0x1a>
   23700:	682b      	ldr	r3, [r5, #0]
   23702:	b103      	cbz	r3, 23706 <_close_r+0x1a>
   23704:	6023      	str	r3, [r4, #0]
   23706:	bd38      	pop	{r3, r4, r5, pc}
   23708:	20021488 	.word	0x20021488

0002370c <_fflush_r>:
   2370c:	b538      	push	{r3, r4, r5, lr}
   2370e:	690b      	ldr	r3, [r1, #16]
   23710:	4605      	mov	r5, r0
   23712:	460c      	mov	r4, r1
   23714:	b913      	cbnz	r3, 2371c <_fflush_r+0x10>
   23716:	2500      	movs	r5, #0
   23718:	4628      	mov	r0, r5
   2371a:	bd38      	pop	{r3, r4, r5, pc}
   2371c:	b118      	cbz	r0, 23726 <_fflush_r+0x1a>
   2371e:	6983      	ldr	r3, [r0, #24]
   23720:	b90b      	cbnz	r3, 23726 <_fflush_r+0x1a>
   23722:	f7ff fa29 	bl	22b78 <__sinit>
   23726:	4b14      	ldr	r3, [pc, #80]	; (23778 <_fflush_r+0x6c>)
   23728:	429c      	cmp	r4, r3
   2372a:	d11b      	bne.n	23764 <_fflush_r+0x58>
   2372c:	686c      	ldr	r4, [r5, #4]
   2372e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   23732:	2b00      	cmp	r3, #0
   23734:	d0ef      	beq.n	23716 <_fflush_r+0xa>
   23736:	6e62      	ldr	r2, [r4, #100]	; 0x64
   23738:	07d0      	lsls	r0, r2, #31
   2373a:	d404      	bmi.n	23746 <_fflush_r+0x3a>
   2373c:	0599      	lsls	r1, r3, #22
   2373e:	d402      	bmi.n	23746 <_fflush_r+0x3a>
   23740:	6da0      	ldr	r0, [r4, #88]	; 0x58
   23742:	f7ec fe13 	bl	1036c <__retarget_lock_acquire_recursive>
   23746:	4628      	mov	r0, r5
   23748:	4621      	mov	r1, r4
   2374a:	f005 fb6d 	bl	28e28 <__sflush_r>
   2374e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   23750:	4605      	mov	r5, r0
   23752:	07da      	lsls	r2, r3, #31
   23754:	d4e0      	bmi.n	23718 <_fflush_r+0xc>
   23756:	89a3      	ldrh	r3, [r4, #12]
   23758:	059b      	lsls	r3, r3, #22
   2375a:	d4dd      	bmi.n	23718 <_fflush_r+0xc>
   2375c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2375e:	f7ec fe21 	bl	103a4 <__retarget_lock_release_recursive>
   23762:	e7d9      	b.n	23718 <_fflush_r+0xc>
   23764:	4b05      	ldr	r3, [pc, #20]	; (2377c <_fflush_r+0x70>)
   23766:	429c      	cmp	r4, r3
   23768:	d101      	bne.n	2376e <_fflush_r+0x62>
   2376a:	68ac      	ldr	r4, [r5, #8]
   2376c:	e7df      	b.n	2372e <_fflush_r+0x22>
   2376e:	4b04      	ldr	r3, [pc, #16]	; (23780 <_fflush_r+0x74>)
   23770:	429c      	cmp	r4, r3
   23772:	bf08      	it	eq
   23774:	68ec      	ldreq	r4, [r5, #12]
   23776:	e7da      	b.n	2372e <_fflush_r+0x22>
   23778:	0002a5b8 	.word	0x0002a5b8
   2377c:	0002a598 	.word	0x0002a598
   23780:	0002a578 	.word	0x0002a578

00023784 <_lseek_r>:
   23784:	b538      	push	{r3, r4, r5, lr}
   23786:	4604      	mov	r4, r0
   23788:	4d06      	ldr	r5, [pc, #24]	; (237a4 <_lseek_r+0x20>)
   2378a:	4608      	mov	r0, r1
   2378c:	4611      	mov	r1, r2
   2378e:	2200      	movs	r2, #0
   23790:	602a      	str	r2, [r5, #0]
   23792:	461a      	mov	r2, r3
   23794:	f001 fb89 	bl	24eaa <_lseek>
   23798:	1c43      	adds	r3, r0, #1
   2379a:	d102      	bne.n	237a2 <_lseek_r+0x1e>
   2379c:	682b      	ldr	r3, [r5, #0]
   2379e:	b103      	cbz	r3, 237a2 <_lseek_r+0x1e>
   237a0:	6023      	str	r3, [r4, #0]
   237a2:	bd38      	pop	{r3, r4, r5, pc}
   237a4:	20021488 	.word	0x20021488

000237a8 <__smakebuf_r>:
   237a8:	898b      	ldrh	r3, [r1, #12]
   237aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   237ac:	079d      	lsls	r5, r3, #30
   237ae:	4606      	mov	r6, r0
   237b0:	460c      	mov	r4, r1
   237b2:	d507      	bpl.n	237c4 <__smakebuf_r+0x1c>
   237b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
   237b8:	6023      	str	r3, [r4, #0]
   237ba:	6123      	str	r3, [r4, #16]
   237bc:	2301      	movs	r3, #1
   237be:	6163      	str	r3, [r4, #20]
   237c0:	b003      	add	sp, #12
   237c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   237c4:	ab01      	add	r3, sp, #4
   237c6:	466a      	mov	r2, sp
   237c8:	f005 fbad 	bl	28f26 <__swhatbuf_r>
   237cc:	9f00      	ldr	r7, [sp, #0]
   237ce:	4605      	mov	r5, r0
   237d0:	4630      	mov	r0, r6
   237d2:	4639      	mov	r1, r7
   237d4:	f7fe fd8a 	bl	222ec <_malloc_r>
   237d8:	b948      	cbnz	r0, 237ee <__smakebuf_r+0x46>
   237da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   237de:	059a      	lsls	r2, r3, #22
   237e0:	d4ee      	bmi.n	237c0 <__smakebuf_r+0x18>
   237e2:	f023 0303 	bic.w	r3, r3, #3
   237e6:	f043 0302 	orr.w	r3, r3, #2
   237ea:	81a3      	strh	r3, [r4, #12]
   237ec:	e7e2      	b.n	237b4 <__smakebuf_r+0xc>
   237ee:	4b0d      	ldr	r3, [pc, #52]	; (23824 <__smakebuf_r+0x7c>)
   237f0:	62b3      	str	r3, [r6, #40]	; 0x28
   237f2:	89a3      	ldrh	r3, [r4, #12]
   237f4:	6020      	str	r0, [r4, #0]
   237f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   237fa:	81a3      	strh	r3, [r4, #12]
   237fc:	9b01      	ldr	r3, [sp, #4]
   237fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
   23802:	b15b      	cbz	r3, 2381c <__smakebuf_r+0x74>
   23804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   23808:	4630      	mov	r0, r6
   2380a:	f000 f84b 	bl	238a4 <_isatty_r>
   2380e:	b128      	cbz	r0, 2381c <__smakebuf_r+0x74>
   23810:	89a3      	ldrh	r3, [r4, #12]
   23812:	f023 0303 	bic.w	r3, r3, #3
   23816:	f043 0301 	orr.w	r3, r3, #1
   2381a:	81a3      	strh	r3, [r4, #12]
   2381c:	89a3      	ldrh	r3, [r4, #12]
   2381e:	431d      	orrs	r5, r3
   23820:	81a5      	strh	r5, [r4, #12]
   23822:	e7cd      	b.n	237c0 <__smakebuf_r+0x18>
   23824:	00022b3d 	.word	0x00022b3d

00023828 <_read_r>:
   23828:	b538      	push	{r3, r4, r5, lr}
   2382a:	4604      	mov	r4, r0
   2382c:	4d06      	ldr	r5, [pc, #24]	; (23848 <_read_r+0x20>)
   2382e:	4608      	mov	r0, r1
   23830:	4611      	mov	r1, r2
   23832:	2200      	movs	r2, #0
   23834:	602a      	str	r2, [r5, #0]
   23836:	461a      	mov	r2, r3
   23838:	f001 fb2c 	bl	24e94 <_read>
   2383c:	1c43      	adds	r3, r0, #1
   2383e:	d102      	bne.n	23846 <_read_r+0x1e>
   23840:	682b      	ldr	r3, [r5, #0]
   23842:	b103      	cbz	r3, 23846 <_read_r+0x1e>
   23844:	6023      	str	r3, [r4, #0]
   23846:	bd38      	pop	{r3, r4, r5, pc}
   23848:	20021488 	.word	0x20021488

0002384c <raise>:
   2384c:	4b02      	ldr	r3, [pc, #8]	; (23858 <raise+0xc>)
   2384e:	4601      	mov	r1, r0
   23850:	6818      	ldr	r0, [r3, #0]
   23852:	f005 bb9f 	b.w	28f94 <_raise_r>
   23856:	bf00      	nop
   23858:	20008748 	.word	0x20008748

0002385c <_kill_r>:
   2385c:	b538      	push	{r3, r4, r5, lr}
   2385e:	2300      	movs	r3, #0
   23860:	4d06      	ldr	r5, [pc, #24]	; (2387c <_kill_r+0x20>)
   23862:	4604      	mov	r4, r0
   23864:	4608      	mov	r0, r1
   23866:	4611      	mov	r1, r2
   23868:	602b      	str	r3, [r5, #0]
   2386a:	f001 fb25 	bl	24eb8 <_kill>
   2386e:	1c43      	adds	r3, r0, #1
   23870:	d102      	bne.n	23878 <_kill_r+0x1c>
   23872:	682b      	ldr	r3, [r5, #0]
   23874:	b103      	cbz	r3, 23878 <_kill_r+0x1c>
   23876:	6023      	str	r3, [r4, #0]
   23878:	bd38      	pop	{r3, r4, r5, pc}
   2387a:	bf00      	nop
   2387c:	20021488 	.word	0x20021488

00023880 <_fstat_r>:
   23880:	b538      	push	{r3, r4, r5, lr}
   23882:	2300      	movs	r3, #0
   23884:	4d06      	ldr	r5, [pc, #24]	; (238a0 <_fstat_r+0x20>)
   23886:	4604      	mov	r4, r0
   23888:	4608      	mov	r0, r1
   2388a:	4611      	mov	r1, r2
   2388c:	602b      	str	r3, [r5, #0]
   2388e:	f001 fb17 	bl	24ec0 <_fstat>
   23892:	1c43      	adds	r3, r0, #1
   23894:	d102      	bne.n	2389c <_fstat_r+0x1c>
   23896:	682b      	ldr	r3, [r5, #0]
   23898:	b103      	cbz	r3, 2389c <_fstat_r+0x1c>
   2389a:	6023      	str	r3, [r4, #0]
   2389c:	bd38      	pop	{r3, r4, r5, pc}
   2389e:	bf00      	nop
   238a0:	20021488 	.word	0x20021488

000238a4 <_isatty_r>:
   238a4:	b538      	push	{r3, r4, r5, lr}
   238a6:	2300      	movs	r3, #0
   238a8:	4d05      	ldr	r5, [pc, #20]	; (238c0 <_isatty_r+0x1c>)
   238aa:	4604      	mov	r4, r0
   238ac:	4608      	mov	r0, r1
   238ae:	602b      	str	r3, [r5, #0]
   238b0:	f001 fafd 	bl	24eae <_isatty>
   238b4:	1c43      	adds	r3, r0, #1
   238b6:	d102      	bne.n	238be <_isatty_r+0x1a>
   238b8:	682b      	ldr	r3, [r5, #0]
   238ba:	b103      	cbz	r3, 238be <_isatty_r+0x1a>
   238bc:	6023      	str	r3, [r4, #0]
   238be:	bd38      	pop	{r3, r4, r5, pc}
   238c0:	20021488 	.word	0x20021488

000238c4 <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   238c4:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   238c6:	f7fd fb71 	bl	20fac <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   238ca:	f7fe fc59 	bl	22180 <k_thread_system_pool_assign>
    return 0;
}
   238ce:	2000      	movs	r0, #0
   238d0:	bd08      	pop	{r3, pc}

000238d2 <uart_cb_2>:
}
   238d2:	4770      	bx	lr

000238d4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   238d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   238d6:	ab0b      	add	r3, sp, #44	; 0x2c
   238d8:	9305      	str	r3, [sp, #20]
   238da:	9303      	str	r3, [sp, #12]
   238dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   238de:	9302      	str	r3, [sp, #8]
   238e0:	2300      	movs	r3, #0
   238e2:	4618      	mov	r0, r3
   238e4:	e9cd 3300 	strd	r3, r3, [sp]
   238e8:	f7ea fb60 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   238ec:	b007      	add	sp, #28
   238ee:	f85d fb04 	ldr.w	pc, [sp], #4

000238f2 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   238f2:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   238f4:	6883      	ldr	r3, [r0, #8]
   238f6:	2228      	movs	r2, #40	; 0x28
   238f8:	68dc      	ldr	r4, [r3, #12]
   238fa:	2332      	movs	r3, #50	; 0x32
   238fc:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   238fe:	bc10      	pop	{r4}
   23900:	4760      	bx	ip

00023902 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   23902:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   23904:	6883      	ldr	r3, [r0, #8]
   23906:	685c      	ldr	r4, [r3, #4]
   23908:	f04f 33ff 	mov.w	r3, #4294967295
   2390c:	46a4      	mov	ip, r4
}
   2390e:	bc10      	pop	{r4}
   23910:	4760      	bx	ip

00023912 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   23912:	f7fb bc67 	b.w	1f1e4 <z_impl_k_sem_take>

00023916 <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   23916:	6883      	ldr	r3, [r0, #8]
   23918:	69db      	ldr	r3, [r3, #28]
   2391a:	b10b      	cbz	r3, 23920 <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2391c:	2201      	movs	r2, #1
   2391e:	4718      	bx	r3
}
   23920:	4770      	bx	lr

00023922 <send_protobuf>:
void send_protobuf(void){
   23922:	b510      	push	{r4, lr}
   23924:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
    buf_proto=send_array_dd_v0(); 
   23928:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   2392c:	4620      	mov	r0, r4
   2392e:	f7e8 f987 	bl	bc40 <send_array_dd_v0>
    send_bluetooth(buf_proto);
   23932:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   23936:	f240 72cc 	movw	r2, #1996	; 0x7cc
   2393a:	4668      	mov	r0, sp
   2393c:	f004 ff41 	bl	287c2 <memcpy>
   23940:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   23944:	f7e7 fdfa 	bl	b53c <send_bluetooth>
}
   23948:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   2394c:	bd10      	pop	{r4, pc}

0002394e <error>:
{
   2394e:	b508      	push	{r3, lr}
	turn_off_all_leds();
   23950:	f7e7 ff54 	bl	b7fc <turn_off_all_leds>
	return z_impl_k_sleep(timeout);
   23954:	2100      	movs	r1, #0
   23956:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2395a:	f7fd faf3 	bl	20f44 <z_impl_k_sleep>
	while (true) {
   2395e:	e7f9      	b.n	23954 <error+0x6>

00023960 <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   23960:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   23962:	6806      	ldr	r6, [r0, #0]
   23964:	8902      	ldrh	r2, [r0, #8]
   23966:	8a33      	ldrh	r3, [r6, #16]
   23968:	429a      	cmp	r2, r3
   2396a:	d271      	bcs.n	23a50 <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   2396c:	6831      	ldr	r1, [r6, #0]
   2396e:	8942      	ldrh	r2, [r0, #10]
   23970:	0093      	lsls	r3, r2, #2
   23972:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   23976:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   2397a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   2397e:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   23980:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   23982:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   23986:	d01f      	beq.n	239c8 <load_descriptor_values+0x68>
   23988:	2902      	cmp	r1, #2
   2398a:	d02a      	beq.n	239e2 <load_descriptor_values+0x82>
   2398c:	2900      	cmp	r1, #0
   2398e:	d135      	bne.n	239fc <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   23990:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   23994:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   23998:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   2399c:	0f12      	lsrs	r2, r2, #28
   2399e:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   239a0:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   239a2:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   239a6:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   239a8:	2a00      	cmp	r2, #0
   239aa:	d134      	bne.n	23a16 <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   239ac:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   239ae:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   239b0:	f004 040e 	and.w	r4, r4, #14
   239b4:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   239b6:	bf11      	iteee	ne
   239b8:	2300      	movne	r3, #0
   239ba:	89c2      	ldrheq	r2, [r0, #14]
   239bc:	6873      	ldreq	r3, [r6, #4]
   239be:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   239c2:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   239c4:	2001      	movs	r0, #1
}
   239c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   239c8:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   239ca:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   239ce:	4419      	add	r1, r3
   239d0:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   239d2:	0f0b      	lsrs	r3, r1, #28
   239d4:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   239d8:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   239da:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   239dc:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   239e0:	e7dd      	b.n	2399e <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   239e2:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   239e4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   239e8:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   239ea:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   239ee:	0a1a      	lsrs	r2, r3, #8
   239f0:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   239f4:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   239f6:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   239f8:	898a      	ldrh	r2, [r1, #12]
            break;
   239fa:	e7d0      	b.n	2399e <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   239fc:	6832      	ldr	r2, [r6, #0]
   239fe:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   23a00:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   23a04:	0a19      	lsrs	r1, r3, #8
   23a06:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   23a0a:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   23a0e:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   23a10:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   23a12:	b25b      	sxtb	r3, r3
            break;
   23a14:	e7c3      	b.n	2399e <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   23a16:	443a      	add	r2, r7
   23a18:	6182      	str	r2, [r0, #24]
        if (size_offset)
   23a1a:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   23a1e:	b123      	cbz	r3, 23a2a <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   23a20:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   23a22:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   23a24:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   23a26:	d109      	bne.n	23a3c <load_descriptor_values+0xdc>
   23a28:	e00f      	b.n	23a4a <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   23a2a:	f004 0530 	and.w	r5, r4, #48	; 0x30
   23a2e:	2d20      	cmp	r5, #32
   23a30:	d1f7      	bne.n	23a22 <load_descriptor_values+0xc2>
   23a32:	2c3f      	cmp	r4, #63	; 0x3f
   23a34:	d804      	bhi.n	23a40 <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   23a36:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   23a3a:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   23a3c:	61c2      	str	r2, [r0, #28]
   23a3e:	e7b7      	b.n	239b0 <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   23a40:	2980      	cmp	r1, #128	; 0x80
   23a42:	d1fa      	bne.n	23a3a <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   23a44:	f100 0314 	add.w	r3, r0, #20
   23a48:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   23a4a:	6813      	ldr	r3, [r2, #0]
   23a4c:	61c3      	str	r3, [r0, #28]
   23a4e:	e7af      	b.n	239b0 <load_descriptor_values+0x50>
        return false;
   23a50:	2000      	movs	r0, #0
   23a52:	e7b8      	b.n	239c6 <load_descriptor_values+0x66>

00023a54 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   23a54:	8903      	ldrh	r3, [r0, #8]
{
   23a56:	b510      	push	{r4, lr}
    iter->index++;
   23a58:	3301      	adds	r3, #1
   23a5a:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   23a5c:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   23a5e:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   23a60:	8a0a      	ldrh	r2, [r1, #16]
   23a62:	429a      	cmp	r2, r3
   23a64:	d803      	bhi.n	23a6e <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   23a66:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   23a68:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   23a6c:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   23a6e:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   23a70:	680b      	ldr	r3, [r1, #0]
   23a72:	8942      	ldrh	r2, [r0, #10]
   23a74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   23a78:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   23a7a:	f001 0103 	and.w	r1, r1, #3
   23a7e:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   23a82:	440a      	add	r2, r1
   23a84:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   23a86:	8982      	ldrh	r2, [r0, #12]
   23a88:	f003 0130 	and.w	r1, r3, #48	; 0x30
   23a8c:	2900      	cmp	r1, #0
   23a8e:	bf08      	it	eq
   23a90:	3201      	addeq	r2, #1
   23a92:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   23a94:	89c2      	ldrh	r2, [r0, #14]
   23a96:	f003 030e 	and.w	r3, r3, #14
   23a9a:	2b08      	cmp	r3, #8
   23a9c:	bf08      	it	eq
   23a9e:	3201      	addeq	r2, #1
   23aa0:	81c2      	strh	r2, [r0, #14]
}
   23aa2:	e7e3      	b.n	23a6c <advance_iterator+0x18>

00023aa4 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   23aa4:	b570      	push	{r4, r5, r6, lr}
   23aa6:	4604      	mov	r4, r0
   23aa8:	460e      	mov	r6, r1
   23aaa:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   23aac:	2100      	movs	r1, #0
   23aae:	2220      	movs	r2, #32
   23ab0:	3008      	adds	r0, #8
   23ab2:	f004 fead 	bl	28810 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   23ab6:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   23aba:	4620      	mov	r0, r4
}
   23abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   23ac0:	f7ff bf4e 	b.w	23960 <load_descriptor_values>

00023ac4 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   23ac4:	b538      	push	{r3, r4, r5, lr}
   23ac6:	460c      	mov	r4, r1
   23ac8:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   23aca:	680b      	ldr	r3, [r1, #0]
   23acc:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   23ace:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   23ad0:	681b      	ldr	r3, [r3, #0]
   23ad2:	0a1b      	lsrs	r3, r3, #8
   23ad4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23ad8:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   23ada:	bf14      	ite	ne
   23adc:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   23ade:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   23ae0:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   23ae2:	f7ff ffdf 	bl	23aa4 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   23ae6:	622c      	str	r4, [r5, #32]
    return status;
}
   23ae8:	bd38      	pop	{r3, r4, r5, pc}

00023aea <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   23aea:	b510      	push	{r4, lr}
   23aec:	4604      	mov	r4, r0
    advance_iterator(iter);
   23aee:	f7ff ffb1 	bl	23a54 <advance_iterator>
    (void)load_descriptor_values(iter);
   23af2:	f7ff ff35 	bl	23960 <load_descriptor_values>
    return iter->index != 0;
   23af6:	8920      	ldrh	r0, [r4, #8]
}
   23af8:	3800      	subs	r0, #0
   23afa:	bf18      	it	ne
   23afc:	2001      	movne	r0, #1
   23afe:	bd10      	pop	{r4, pc}

00023b00 <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   23b00:	f7ff bfd0 	b.w	23aa4 <pb_field_iter_begin>

00023b04 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   23b04:	f7ff bfde 	b.w	23ac4 <pb_field_iter_begin_extension>

00023b08 <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   23b08:	b410      	push	{r4}
   23b0a:	460b      	mov	r3, r1
   23b0c:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   23b0e:	8a52      	ldrh	r2, [r2, #18]
   23b10:	2a08      	cmp	r2, #8
   23b12:	d10e      	bne.n	23b32 <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   23b14:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   23b16:	b162      	cbz	r2, 23b32 <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   23b18:	b128      	cbz	r0, 23b26 <pb_default_field_callback+0x1e>
   23b1a:	6814      	ldr	r4, [r2, #0]
   23b1c:	b11c      	cbz	r4, 23b26 <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   23b1e:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   23b20:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   23b22:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   23b24:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   23b26:	b123      	cbz	r3, 23b32 <pb_default_field_callback+0x2a>
   23b28:	6814      	ldr	r4, [r2, #0]
   23b2a:	b114      	cbz	r4, 23b32 <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   23b2c:	4618      	mov	r0, r3
   23b2e:	3204      	adds	r2, #4
   23b30:	e7f6      	b.n	23b20 <pb_default_field_callback+0x18>
}
   23b32:	2001      	movs	r0, #1
   23b34:	bc10      	pop	{r4}
   23b36:	4770      	bx	lr

00023b38 <buf_write>:
{
   23b38:	4603      	mov	r3, r0
   23b3a:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   23b3c:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   23b3e:	1884      	adds	r4, r0, r2
   23b40:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23b42:	f004 fe3e 	bl	287c2 <memcpy>
}
   23b46:	2001      	movs	r0, #1
   23b48:	bd10      	pop	{r4, pc}

00023b4a <pb_encode_varint>:
{
   23b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   23b4c:	2a80      	cmp	r2, #128	; 0x80
{
   23b4e:	b085      	sub	sp, #20
    if (value <= 0x7F)
   23b50:	f173 0100 	sbcs.w	r1, r3, #0
{
   23b54:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   23b56:	b2d4      	uxtb	r4, r2
   23b58:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   23b5a:	d206      	bcs.n	23b6a <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   23b5c:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   23b5e:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   23b62:	f7e8 f9dd 	bl	bf20 <pb_write>
}
   23b66:	b005      	add	sp, #20
   23b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   23b6a:	09d5      	lsrs	r5, r2, #7
   23b6c:	4608      	mov	r0, r1
    size_t i = 0;
   23b6e:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   23b70:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   23b74:	ea53 0c05 	orrs.w	ip, r3, r5
   23b78:	4617      	mov	r7, r2
        buffer[i++] = byte;
   23b7a:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   23b7e:	d108      	bne.n	23b92 <pb_encode_varint+0x48>
   23b80:	463a      	mov	r2, r7
    buffer[i++] = byte;
   23b82:	f102 0310 	add.w	r3, r2, #16
   23b86:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   23b88:	4630      	mov	r0, r6
    buffer[i++] = byte;
   23b8a:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   23b8e:	3201      	adds	r2, #1
   23b90:	e7e7      	b.n	23b62 <pb_encode_varint+0x18>
        byte |= 0x80;
   23b92:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   23b96:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   23b98:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   23b9c:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   23ba0:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   23ba4:	d1e6      	bne.n	23b74 <pb_encode_varint+0x2a>
    if (high)
   23ba6:	2b00      	cmp	r3, #0
   23ba8:	d0eb      	beq.n	23b82 <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   23baa:	0118      	lsls	r0, r3, #4
   23bac:	f000 0070 	and.w	r0, r0, #112	; 0x70
   23bb0:	4304      	orrs	r4, r0
        high >>= 3;
   23bb2:	08db      	lsrs	r3, r3, #3
        while (high)
   23bb4:	2b00      	cmp	r3, #0
   23bb6:	d0e4      	beq.n	23b82 <pb_encode_varint+0x38>
            byte |= 0x80;
   23bb8:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   23bbc:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   23bbe:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   23bc2:	3201      	adds	r2, #1
   23bc4:	09db      	lsrs	r3, r3, #7
   23bc6:	e7f5      	b.n	23bb4 <pb_encode_varint+0x6a>

00023bc8 <pb_encode_svarint>:
    if (value < 0)
   23bc8:	1892      	adds	r2, r2, r2
   23bca:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   23bce:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   23bd2:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   23bd6:	f7ff bfb8 	b.w	23b4a <pb_encode_varint>

00023bda <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   23bda:	2204      	movs	r2, #4
   23bdc:	f7e8 b9a0 	b.w	bf20 <pb_write>

00023be0 <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   23be0:	2208      	movs	r2, #8
   23be2:	f7e8 b99d 	b.w	bf20 <pb_write>

00023be6 <pb_encode_tag>:
{
   23be6:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   23be8:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   23bec:	0f5b      	lsrs	r3, r3, #29
   23bee:	f7ff bfac 	b.w	23b4a <pb_encode_varint>

00023bf2 <pb_encode_string>:
{
   23bf2:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   23bf4:	2300      	movs	r3, #0
{
   23bf6:	4604      	mov	r4, r0
   23bf8:	460d      	mov	r5, r1
   23bfa:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   23bfc:	f7ff ffa5 	bl	23b4a <pb_encode_varint>
   23c00:	b130      	cbz	r0, 23c10 <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   23c02:	4632      	mov	r2, r6
   23c04:	4629      	mov	r1, r5
   23c06:	4620      	mov	r0, r4
}
   23c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   23c0c:	f7e8 b988 	b.w	bf20 <pb_write>
}
   23c10:	bd70      	pop	{r4, r5, r6, pc}

00023c12 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   23c12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23c16:	4606      	mov	r6, r0
   23c18:	460d      	mov	r5, r1
   23c1a:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   23c1c:	4698      	mov	r8, r3
   23c1e:	b32b      	cbz	r3, 23c6c <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   23c20:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   23c24:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   23c28:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   23c2c:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   23c2e:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   23c30:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   23c34:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   23c38:	441c      	add	r4, r3
   23c3a:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   23c3c:	45ca      	cmp	sl, r9
   23c3e:	d309      	bcc.n	23c54 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   23c40:	4639      	mov	r1, r7
   23c42:	4630      	mov	r0, r6
   23c44:	46ac      	mov	ip, r5
   23c46:	f8d8 2004 	ldr.w	r2, [r8, #4]
   23c4a:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   23c4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   23c52:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   23c54:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   23c58:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   23c5c:	4620      	mov	r0, r4
		*ps = s;
   23c5e:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   23c62:	f7e5 fb7d 	bl	9360 <strlen>
   23c66:	3001      	adds	r0, #1
   23c68:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   23c6a:	e7e7      	b.n	23c3c <cbpprintf_external+0x2a>
}
   23c6c:	f06f 0015 	mvn.w	r0, #21
   23c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023c74 <arch_printk_char_out>:
}
   23c74:	2000      	movs	r0, #0
   23c76:	4770      	bx	lr

00023c78 <str_out>:
{
   23c78:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   23c7a:	688a      	ldr	r2, [r1, #8]
   23c7c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   23c7e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   23c80:	b114      	cbz	r4, 23c88 <str_out+0x10>
   23c82:	684b      	ldr	r3, [r1, #4]
   23c84:	4293      	cmp	r3, r2
   23c86:	dc01      	bgt.n	23c8c <str_out+0x14>
		ctx->count++;
   23c88:	608d      	str	r5, [r1, #8]
}
   23c8a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   23c8c:	3b01      	subs	r3, #1
   23c8e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   23c90:	bf08      	it	eq
   23c92:	2200      	moveq	r2, #0
   23c94:	608d      	str	r5, [r1, #8]
   23c96:	bf0c      	ite	eq
   23c98:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   23c9a:	54a0      	strbne	r0, [r4, r2]
   23c9c:	e7f5      	b.n	23c8a <str_out+0x12>

00023c9e <printk>:
{
   23c9e:	b40f      	push	{r0, r1, r2, r3}
   23ca0:	b507      	push	{r0, r1, r2, lr}
   23ca2:	a904      	add	r1, sp, #16
   23ca4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   23ca8:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   23caa:	f7e8 fe11 	bl	c8d0 <vprintk>
}
   23cae:	b003      	add	sp, #12
   23cb0:	f85d eb04 	ldr.w	lr, [sp], #4
   23cb4:	b004      	add	sp, #16
   23cb6:	4770      	bx	lr

00023cb8 <snprintk>:
{
   23cb8:	b40c      	push	{r2, r3}
   23cba:	b507      	push	{r0, r1, r2, lr}
   23cbc:	ab04      	add	r3, sp, #16
   23cbe:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   23cc2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   23cc4:	f7e8 fe12 	bl	c8ec <vsnprintk>
}
   23cc8:	b003      	add	sp, #12
   23cca:	f85d eb04 	ldr.w	lr, [sp], #4
   23cce:	b002      	add	sp, #8
   23cd0:	4770      	bx	lr

00023cd2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   23cd2:	4604      	mov	r4, r0
   23cd4:	b508      	push	{r3, lr}
   23cd6:	4608      	mov	r0, r1
   23cd8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   23cda:	461a      	mov	r2, r3
   23cdc:	47a0      	blx	r4
	return z_impl_z_current_get();
   23cde:	f7fd f965 	bl	20fac <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   23ce2:	f7ec f881 	bl	fde8 <z_impl_k_thread_abort>

00023ce6 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   23ce6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   23cea:	8840      	ldrh	r0, [r0, #2]
}
   23cec:	0840      	lsrs	r0, r0, #1
   23cee:	4770      	bx	lr

00023cf0 <free_list_add>:
{
   23cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23cf2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   23cf4:	f7ff fff7 	bl	23ce6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   23cf8:	fab0 f080 	clz	r0, r0
   23cfc:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   23d00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   23d04:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   23d08:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   23d0a:	1d17      	adds	r7, r2, #4
{
   23d0c:	460c      	mov	r4, r1
   23d0e:	3206      	adds	r2, #6
   23d10:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   23d12:	b956      	cbnz	r6, 23d2a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   23d14:	2101      	movs	r1, #1
   23d16:	fa01 f000 	lsl.w	r0, r1, r0
   23d1a:	68d9      	ldr	r1, [r3, #12]
   23d1c:	4301      	orrs	r1, r0
   23d1e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   23d20:	f8cc 4010 	str.w	r4, [ip, #16]
   23d24:	53dd      	strh	r5, [r3, r7]
   23d26:	529d      	strh	r5, [r3, r2]
}
   23d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   23d2a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   23d2c:	3104      	adds	r1, #4
   23d2e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   23d30:	53d8      	strh	r0, [r3, r7]
   23d32:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   23d36:	529e      	strh	r6, [r3, r2]
   23d38:	80c5      	strh	r5, [r0, #6]
   23d3a:	525d      	strh	r5, [r3, r1]
   23d3c:	e7f4      	b.n	23d28 <free_list_add+0x38>

00023d3e <free_list_remove_bidx>:
{
   23d3e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   23d40:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   23d44:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   23d46:	4299      	cmp	r1, r3
   23d48:	f102 0104 	add.w	r1, r2, #4
   23d4c:	d10a      	bne.n	23d64 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   23d4e:	2301      	movs	r3, #1
   23d50:	fa03 f202 	lsl.w	r2, r3, r2
   23d54:	68c3      	ldr	r3, [r0, #12]
   23d56:	ea23 0302 	bic.w	r3, r3, r2
   23d5a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   23d5c:	2300      	movs	r3, #0
   23d5e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   23d62:	bd10      	pop	{r4, pc}
   23d64:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   23d66:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   23d6a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   23d6e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   23d72:	80cb      	strh	r3, [r1, #6]
   23d74:	8082      	strh	r2, [r0, #4]
}
   23d76:	e7f4      	b.n	23d62 <free_list_remove_bidx+0x24>

00023d78 <free_list_remove>:
{
   23d78:	b508      	push	{r3, lr}
   23d7a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   23d7c:	f7ff ffb3 	bl	23ce6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   23d80:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   23d84:	4618      	mov	r0, r3
}
   23d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   23d8a:	f1c2 021f 	rsb	r2, r2, #31
   23d8e:	f7ff bfd6 	b.w	23d3e <free_list_remove_bidx>

00023d92 <alloc_chunk>:
{
   23d92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23d96:	fab1 f581 	clz	r5, r1
   23d9a:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   23d9e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   23da2:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   23da6:	4603      	mov	r3, r0
   23da8:	460e      	mov	r6, r1
	if (b->next) {
   23daa:	b1c2      	cbz	r2, 23dde <alloc_chunk+0x4c>
   23dac:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   23dae:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   23db2:	4618      	mov	r0, r3
   23db4:	4621      	mov	r1, r4
   23db6:	f7ff ff96 	bl	23ce6 <chunk_size>
   23dba:	42b0      	cmp	r0, r6
   23dbc:	d306      	bcc.n	23dcc <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   23dbe:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   23dc0:	4618      	mov	r0, r3
   23dc2:	f7ff ffbc 	bl	23d3e <free_list_remove_bidx>
}
   23dc6:	4620      	mov	r0, r4
   23dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   23dcc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   23dd0:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   23dd2:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   23dd4:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   23dd8:	d001      	beq.n	23dde <alloc_chunk+0x4c>
   23dda:	4282      	cmp	r2, r0
   23ddc:	d1e7      	bne.n	23dae <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   23dde:	f04f 34ff 	mov.w	r4, #4294967295
   23de2:	f1c5 0220 	rsb	r2, r5, #32
   23de6:	4094      	lsls	r4, r2
   23de8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   23dea:	4014      	ands	r4, r2
   23dec:	d0eb      	beq.n	23dc6 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   23dee:	fa94 f2a4 	rbit	r2, r4
   23df2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   23df6:	1d11      	adds	r1, r2, #4
   23df8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   23dfc:	4621      	mov	r1, r4
   23dfe:	e7df      	b.n	23dc0 <alloc_chunk+0x2e>

00023e00 <merge_chunks>:
{
   23e00:	b538      	push	{r3, r4, r5, lr}
   23e02:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23e04:	f7ff ff6f 	bl	23ce6 <chunk_size>
{
   23e08:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23e0a:	4604      	mov	r4, r0
   23e0c:	4611      	mov	r1, r2
   23e0e:	4618      	mov	r0, r3
   23e10:	f7ff ff69 	bl	23ce6 <chunk_size>
   23e14:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23e16:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   23e18:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   23e1c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   23e1e:	4618      	mov	r0, r3
   23e20:	f7ff ff61 	bl	23ce6 <chunk_size>
	void *cmem = &buf[c];
   23e24:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   23e26:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   23e2a:	bd38      	pop	{r3, r4, r5, pc}

00023e2c <split_chunks>:
{
   23e2c:	b538      	push	{r3, r4, r5, lr}
   23e2e:	460c      	mov	r4, r1
   23e30:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   23e32:	f7ff ff58 	bl	23ce6 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   23e36:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   23e38:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   23e3a:	4405      	add	r5, r0
   23e3c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23e40:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   23e42:	8060      	strh	r0, [r4, #2]
   23e44:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23e48:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   23e4a:	8044      	strh	r4, [r0, #2]
   23e4c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   23e50:	4618      	mov	r0, r3
   23e52:	4611      	mov	r1, r2
   23e54:	f7ff ff47 	bl	23ce6 <chunk_size>
	void *cmem = &buf[c];
   23e58:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   23e5a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   23e5e:	bd38      	pop	{r3, r4, r5, pc}

00023e60 <free_chunk>:
{
   23e60:	b538      	push	{r3, r4, r5, lr}
   23e62:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   23e64:	f7ff ff3f 	bl	23ce6 <chunk_size>
   23e68:	460c      	mov	r4, r1
   23e6a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   23e6c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23e70:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   23e72:	07da      	lsls	r2, r3, #31
   23e74:	d40a      	bmi.n	23e8c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   23e76:	4628      	mov	r0, r5
   23e78:	f7ff ff7e 	bl	23d78 <free_list_remove>
	return c + chunk_size(h, c);
   23e7c:	4621      	mov	r1, r4
   23e7e:	4628      	mov	r0, r5
   23e80:	f7ff ff31 	bl	23ce6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   23e84:	1822      	adds	r2, r4, r0
   23e86:	4628      	mov	r0, r5
   23e88:	f7ff ffba 	bl	23e00 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   23e8c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   23e90:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   23e92:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23e96:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   23e98:	07db      	lsls	r3, r3, #31
   23e9a:	d40c      	bmi.n	23eb6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   23e9c:	4628      	mov	r0, r5
   23e9e:	f7ff ff6b 	bl	23d78 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   23ea2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   23ea6:	4622      	mov	r2, r4
   23ea8:	1a61      	subs	r1, r4, r1
   23eaa:	4628      	mov	r0, r5
   23eac:	f7ff ffa8 	bl	23e00 <merge_chunks>
   23eb0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   23eb4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   23eb6:	4621      	mov	r1, r4
   23eb8:	4628      	mov	r0, r5
}
   23eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   23ebe:	f7ff bf17 	b.w	23cf0 <free_list_add>

00023ec2 <sys_heap_alloc>:
{
   23ec2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   23ec4:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   23ec6:	b909      	cbnz	r1, 23ecc <sys_heap_alloc+0xa>
		return NULL;
   23ec8:	2000      	movs	r0, #0
}
   23eca:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   23ecc:	68ab      	ldr	r3, [r5, #8]
   23ece:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   23ed2:	d9f9      	bls.n	23ec8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23ed4:	310b      	adds	r1, #11
   23ed6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   23ed8:	4621      	mov	r1, r4
   23eda:	4628      	mov	r0, r5
   23edc:	f7ff ff59 	bl	23d92 <alloc_chunk>
	if (c == 0U) {
   23ee0:	4606      	mov	r6, r0
   23ee2:	2800      	cmp	r0, #0
   23ee4:	d0f0      	beq.n	23ec8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   23ee6:	4601      	mov	r1, r0
   23ee8:	4628      	mov	r0, r5
   23eea:	f7ff fefc 	bl	23ce6 <chunk_size>
   23eee:	42a0      	cmp	r0, r4
   23ef0:	d907      	bls.n	23f02 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   23ef2:	4628      	mov	r0, r5
   23ef4:	1932      	adds	r2, r6, r4
   23ef6:	f7ff ff99 	bl	23e2c <split_chunks>
		free_list_add(h, c + chunk_sz);
   23efa:	4611      	mov	r1, r2
   23efc:	4628      	mov	r0, r5
   23efe:	f7ff fef7 	bl	23cf0 <free_list_add>
	void *cmem = &buf[c];
   23f02:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   23f06:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23f08:	8853      	ldrh	r3, [r2, #2]
   23f0a:	3004      	adds	r0, #4
   23f0c:	f043 0301 	orr.w	r3, r3, #1
   23f10:	8053      	strh	r3, [r2, #2]
	return mem;
   23f12:	e7da      	b.n	23eca <sys_heap_alloc+0x8>

00023f14 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   23f14:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   23f16:	f013 0307 	ands.w	r3, r3, #7
   23f1a:	d105      	bne.n	23f28 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   23f1c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   23f1e:	2b00      	cmp	r3, #0
   23f20:	bf0c      	ite	eq
   23f22:	2000      	moveq	r0, #0
   23f24:	2003      	movne	r0, #3
   23f26:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   23f28:	2b02      	cmp	r3, #2
   23f2a:	d105      	bne.n	23f38 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   23f2c:	8bc0      	ldrh	r0, [r0, #30]
   23f2e:	fab0 f080 	clz	r0, r0
   23f32:	0940      	lsrs	r0, r0, #5
   23f34:	0080      	lsls	r0, r0, #2
   23f36:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   23f38:	2b01      	cmp	r3, #1
   23f3a:	d105      	bne.n	23f48 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   23f3c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   23f3e:	2b00      	cmp	r3, #0
   23f40:	bf0c      	ite	eq
   23f42:	2000      	moveq	r0, #0
   23f44:	2005      	movne	r0, #5
   23f46:	4770      	bx	lr
	int evt = EVT_NOP;
   23f48:	2000      	movs	r0, #0
}
   23f4a:	4770      	bx	lr

00023f4c <validate_args>:
{
   23f4c:	b510      	push	{r4, lr}
   23f4e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   23f50:	b100      	cbz	r0, 23f54 <validate_args+0x8>
   23f52:	b911      	cbnz	r1, 23f5a <validate_args+0xe>
		return -EINVAL;
   23f54:	f06f 0015 	mvn.w	r0, #21
}
   23f58:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   23f5a:	1d08      	adds	r0, r1, #4
   23f5c:	f000 f82f 	bl	23fbe <sys_notify_validate>
	if ((rv == 0)
   23f60:	2800      	cmp	r0, #0
   23f62:	d1f9      	bne.n	23f58 <validate_args+0xc>
	    && ((cli->notify.flags
   23f64:	68a3      	ldr	r3, [r4, #8]
   23f66:	2b03      	cmp	r3, #3
   23f68:	d9f6      	bls.n	23f58 <validate_args+0xc>
   23f6a:	e7f3      	b.n	23f54 <validate_args+0x8>

00023f6c <notify_one>:
{
   23f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f70:	460d      	mov	r5, r1
   23f72:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   23f74:	4619      	mov	r1, r3
   23f76:	1d28      	adds	r0, r5, #4
{
   23f78:	4690      	mov	r8, r2
   23f7a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   23f7c:	f7e9 f8bc 	bl	d0f8 <sys_notify_finalize>
	if (cb) {
   23f80:	4604      	mov	r4, r0
   23f82:	b138      	cbz	r0, 23f94 <notify_one+0x28>
		cb(mgr, cli, state, res);
   23f84:	4633      	mov	r3, r6
   23f86:	4642      	mov	r2, r8
   23f88:	4629      	mov	r1, r5
   23f8a:	4638      	mov	r0, r7
   23f8c:	46a4      	mov	ip, r4
}
   23f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   23f92:	4760      	bx	ip
}
   23f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023f98 <onoff_manager_init>:
{
   23f98:	b538      	push	{r3, r4, r5, lr}
   23f9a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   23f9c:	4605      	mov	r5, r0
   23f9e:	b158      	cbz	r0, 23fb8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   23fa0:	b151      	cbz	r1, 23fb8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   23fa2:	680b      	ldr	r3, [r1, #0]
   23fa4:	b143      	cbz	r3, 23fb8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   23fa6:	684b      	ldr	r3, [r1, #4]
   23fa8:	b133      	cbz	r3, 23fb8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   23faa:	2220      	movs	r2, #32
   23fac:	2100      	movs	r1, #0
   23fae:	f004 fc2f 	bl	28810 <memset>
	return 0;
   23fb2:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   23fb4:	612c      	str	r4, [r5, #16]
}
   23fb6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   23fb8:	f06f 0015 	mvn.w	r0, #21
   23fbc:	e7fb      	b.n	23fb6 <onoff_manager_init+0x1e>

00023fbe <sys_notify_validate>:
	if (notify == NULL) {
   23fbe:	4603      	mov	r3, r0
   23fc0:	b140      	cbz	r0, 23fd4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   23fc2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   23fc4:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   23fc8:	2a02      	cmp	r2, #2
   23fca:	d006      	beq.n	23fda <sys_notify_validate+0x1c>
   23fcc:	2a03      	cmp	r2, #3
   23fce:	d004      	beq.n	23fda <sys_notify_validate+0x1c>
   23fd0:	2a01      	cmp	r2, #1
   23fd2:	d005      	beq.n	23fe0 <sys_notify_validate+0x22>
   23fd4:	f06f 0015 	mvn.w	r0, #21
}
   23fd8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   23fda:	681a      	ldr	r2, [r3, #0]
   23fdc:	2a00      	cmp	r2, #0
   23fde:	d0f9      	beq.n	23fd4 <sys_notify_validate+0x16>
		notify->result = 0;
   23fe0:	2000      	movs	r0, #0
   23fe2:	6098      	str	r0, [r3, #8]
   23fe4:	4770      	bx	lr

00023fe6 <outs>:
{
   23fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23fea:	4607      	mov	r7, r0
   23fec:	4688      	mov	r8, r1
   23fee:	4615      	mov	r5, r2
   23ff0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   23ff2:	4614      	mov	r4, r2
   23ff4:	42b4      	cmp	r4, r6
   23ff6:	d305      	bcc.n	24004 <outs+0x1e>
   23ff8:	b10e      	cbz	r6, 23ffe <outs+0x18>
	return (int)count;
   23ffa:	1b60      	subs	r0, r4, r5
   23ffc:	e008      	b.n	24010 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   23ffe:	7823      	ldrb	r3, [r4, #0]
   24000:	2b00      	cmp	r3, #0
   24002:	d0fa      	beq.n	23ffa <outs+0x14>
		int rc = out((int)*sp++, ctx);
   24004:	4641      	mov	r1, r8
   24006:	f814 0b01 	ldrb.w	r0, [r4], #1
   2400a:	47b8      	blx	r7
		if (rc < 0) {
   2400c:	2800      	cmp	r0, #0
   2400e:	daf1      	bge.n	23ff4 <outs+0xe>
}
   24010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024014 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   24014:	4040      	eors	r0, r0
   24016:	f380 8811 	msr	BASEPRI, r0
   2401a:	f04f 0004 	mov.w	r0, #4
   2401e:	df02      	svc	2
}
   24020:	4770      	bx	lr

00024022 <assert_print>:

void assert_print(const char *fmt, ...)
{
   24022:	b40f      	push	{r0, r1, r2, r3}
   24024:	b507      	push	{r0, r1, r2, lr}
   24026:	a904      	add	r1, sp, #16
   24028:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2402c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2402e:	f7e8 fc4f 	bl	c8d0 <vprintk>

	va_end(ap);
}
   24032:	b003      	add	sp, #12
   24034:	f85d eb04 	ldr.w	lr, [sp], #4
   24038:	b004      	add	sp, #16
   2403a:	4770      	bx	lr

0002403c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 40);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   2403c:	4770      	bx	lr

0002403e <nordicsemi_nrf53_init>:
{
   2403e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24040:	f04f 0320 	mov.w	r3, #32
   24044:	f3ef 8511 	mrs	r5, BASEPRI
   24048:	f383 8812 	msr	BASEPRI_MAX, r3
   2404c:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   24050:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   24054:	2401      	movs	r4, #1
   24056:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   24058:	4621      	mov	r1, r4
   2405a:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   2405e:	2021      	movs	r0, #33	; 0x21
   24060:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   24064:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   24068:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   2406c:	f7e9 fe04 	bl	dc78 <soc_secure_gpio_pin_mcu_select>
   24070:	4621      	mov	r1, r4
   24072:	2020      	movs	r0, #32
   24074:	f7e9 fe00 	bl	dc78 <soc_secure_gpio_pin_mcu_select>
   24078:	4621      	mov	r1, r4
   2407a:	200b      	movs	r0, #11
   2407c:	f7e9 fdfc 	bl	dc78 <soc_secure_gpio_pin_mcu_select>
   24080:	4621      	mov	r1, r4
   24082:	200a      	movs	r0, #10
   24084:	f7e9 fdf8 	bl	dc78 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   24088:	f385 8811 	msr	BASEPRI, r5
   2408c:	f3bf 8f6f 	isb	sy
}
   24090:	2000      	movs	r0, #0
   24092:	bd38      	pop	{r3, r4, r5, pc}

00024094 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   24094:	2806      	cmp	r0, #6
   24096:	d108      	bne.n	240aa <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   24098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2409c:	2201      	movs	r2, #1
   2409e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   240a2:	f3bf 8f4f 	dsb	sy
        __WFE();
   240a6:	bf20      	wfe
    while (true)
   240a8:	e7fd      	b.n	240a6 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   240aa:	4770      	bx	lr

000240ac <pm_state_exit_post_ops>:
   240ac:	2300      	movs	r3, #0
   240ae:	f383 8811 	msr	BASEPRI, r3
   240b2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   240b6:	4770      	bx	lr

000240b8 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   240b8:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   240ba:	ab01      	add	r3, sp, #4
   240bc:	f003 fb4c 	bl	27758 <tfm_platform_mem_read>

	switch (status) {
   240c0:	2802      	cmp	r0, #2
   240c2:	d00a      	beq.n	240da <soc_secure_mem_read+0x22>
   240c4:	2803      	cmp	r0, #3
   240c6:	d00b      	beq.n	240e0 <soc_secure_mem_read+0x28>
   240c8:	b968      	cbnz	r0, 240e6 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   240ca:	9801      	ldr	r0, [sp, #4]
   240cc:	3800      	subs	r0, #0
   240ce:	bf18      	it	ne
   240d0:	2001      	movne	r0, #1
   240d2:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   240d4:	b003      	add	sp, #12
   240d6:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   240da:	f06f 0015 	mvn.w	r0, #21
   240de:	e7f9      	b.n	240d4 <soc_secure_mem_read+0x1c>
	switch (status) {
   240e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   240e4:	e7f6      	b.n	240d4 <soc_secure_mem_read+0x1c>
		return -EPERM;
   240e6:	f04f 30ff 	mov.w	r0, #4294967295
   240ea:	e7f3      	b.n	240d4 <soc_secure_mem_read+0x1c>

000240ec <dummy_timestamp>:
}
   240ec:	2000      	movs	r0, #0
   240ee:	4770      	bx	lr

000240f0 <default_get_timestamp>:
   240f0:	f003 ba15 	b.w	2751e <sys_clock_cycle_get_32>

000240f4 <atomic_inc>:
{
   240f4:	4603      	mov	r3, r0
}
   240f6:	e8d3 0fef 	ldaex	r0, [r3]
   240fa:	1c42      	adds	r2, r0, #1
   240fc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24100:	2900      	cmp	r1, #0
   24102:	d1f8      	bne.n	240f6 <atomic_inc+0x2>
   24104:	4770      	bx	lr

00024106 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   24106:	2100      	movs	r1, #0
{
   24108:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   2410a:	4608      	mov	r0, r1
   2410c:	f7e9 fde4 	bl	dcd8 <z_log_init.isra.0>
	}

	return 0;
}
   24110:	2000      	movs	r0, #0
   24112:	bd08      	pop	{r3, pc}

00024114 <z_log_notify_backend_enabled>:
}
   24114:	4770      	bx	lr

00024116 <z_log_get_tag>:
}
   24116:	2000      	movs	r0, #0
   24118:	4770      	bx	lr

0002411a <z_log_msg_finalize>:
{
   2411a:	b570      	push	{r4, r5, r6, lr}
   2411c:	460e      	mov	r6, r1
   2411e:	4615      	mov	r5, r2
   24120:	4619      	mov	r1, r3
	if (!msg) {
   24122:	4604      	mov	r4, r0
   24124:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   24128:	b918      	cbnz	r0, 24132 <z_log_msg_finalize+0x18>
}
   2412a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2412e:	f7e9 bec1 	b.w	deb4 <z_log_dropped>
	if (data) {
   24132:	b12b      	cbz	r3, 24140 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   24134:	3010      	adds	r0, #16
   24136:	f3c5 2349 	ubfx	r3, r5, #9, #10
   2413a:	4418      	add	r0, r3
   2413c:	f004 fb41 	bl	287c2 <memcpy>
	msg->hdr.source = source;
   24140:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   24144:	4620      	mov	r0, r4
}
   24146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2414a:	f7e9 bec7 	b.w	dedc <z_log_msg_commit>

0002414e <out_func>:
{
   2414e:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   24150:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   24154:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   24158:	2101      	movs	r1, #1
   2415a:	6852      	ldr	r2, [r2, #4]
   2415c:	f10d 0007 	add.w	r0, sp, #7
   24160:	4798      	blx	r3
}
   24162:	2000      	movs	r0, #0
   24164:	b003      	add	sp, #12
   24166:	f85d fb04 	ldr.w	pc, [sp], #4

0002416a <cr_out_func>:
	if (c == '\n') {
   2416a:	280a      	cmp	r0, #10
{
   2416c:	b538      	push	{r3, r4, r5, lr}
   2416e:	4604      	mov	r4, r0
   24170:	460d      	mov	r5, r1
	if (c == '\n') {
   24172:	d102      	bne.n	2417a <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   24174:	200d      	movs	r0, #13
   24176:	f7ff ffea 	bl	2414e <out_func>
	out_func(c, ctx);
   2417a:	4629      	mov	r1, r5
   2417c:	4620      	mov	r0, r4
   2417e:	f7ff ffe6 	bl	2414e <out_func>
}
   24182:	2000      	movs	r0, #0
   24184:	bd38      	pop	{r3, r4, r5, pc}

00024186 <buffer_write>:
{
   24186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24188:	4606      	mov	r6, r0
   2418a:	460d      	mov	r5, r1
   2418c:	4614      	mov	r4, r2
   2418e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   24190:	4621      	mov	r1, r4
   24192:	4628      	mov	r0, r5
   24194:	463a      	mov	r2, r7
   24196:	47b0      	blx	r6
	} while (len != 0);
   24198:	1a24      	subs	r4, r4, r0
		buf += processed;
   2419a:	4405      	add	r5, r0
	} while (len != 0);
   2419c:	d1f8      	bne.n	24190 <buffer_write+0xa>
}
   2419e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000241a0 <cbvprintf>:
{
   241a0:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   241a2:	2400      	movs	r4, #0
   241a4:	9400      	str	r4, [sp, #0]
   241a6:	f7e9 f835 	bl	d214 <z_cbvprintf_impl>
}
   241aa:	b002      	add	sp, #8
   241ac:	bd10      	pop	{r4, pc}

000241ae <log_output_flush>:
{
   241ae:	b510      	push	{r4, lr}
		     output->control_block->offset,
   241b0:	6842      	ldr	r2, [r0, #4]
{
   241b2:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   241b4:	e9d2 2300 	ldrd	r2, r3, [r2]
   241b8:	6881      	ldr	r1, [r0, #8]
   241ba:	6800      	ldr	r0, [r0, #0]
   241bc:	f7ff ffe3 	bl	24186 <buffer_write>
	output->control_block->offset = 0;
   241c0:	2200      	movs	r2, #0
   241c2:	6863      	ldr	r3, [r4, #4]
   241c4:	601a      	str	r2, [r3, #0]
}
   241c6:	bd10      	pop	{r4, pc}

000241c8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   241c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   241ca:	ab0b      	add	r3, sp, #44	; 0x2c
   241cc:	9305      	str	r3, [sp, #20]
   241ce:	9303      	str	r3, [sp, #12]
   241d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   241d2:	2201      	movs	r2, #1
   241d4:	9302      	str	r3, [sp, #8]
   241d6:	2300      	movs	r3, #0
   241d8:	4618      	mov	r0, r3
   241da:	e9cd 3300 	strd	r3, r3, [sp]
   241de:	f7e9 fee5 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   241e2:	b007      	add	sp, #28
   241e4:	f85d fb04 	ldr.w	pc, [sp], #4

000241e8 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   241e8:	6903      	ldr	r3, [r0, #16]
}
   241ea:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   241ee:	4770      	bx	lr

000241f0 <drop_tx_buffer>:
}
   241f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   241f4:	4770      	bx	lr

000241f6 <release_rx_buffer>:
{
   241f6:	4608      	mov	r0, r1
   241f8:	b508      	push	{r3, lr}
   241fa:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   241fc:	b118      	cbz	r0, 24206 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   241fe:	f003 feb9 	bl	27f74 <rpmsg_release_rx_buffer>
	return 0;
   24202:	2000      	movs	r0, #0
}
   24204:	bd08      	pop	{r3, pc}
		return -ENOENT;
   24206:	f06f 0001 	mvn.w	r0, #1
   2420a:	e7fb      	b.n	24204 <release_rx_buffer+0xe>

0002420c <hold_rx_buffer>:
{
   2420c:	4608      	mov	r0, r1
   2420e:	b508      	push	{r3, lr}
   24210:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   24212:	b118      	cbz	r0, 2421c <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   24214:	f003 fea6 	bl	27f64 <rpmsg_hold_rx_buffer>
	return 0;
   24218:	2000      	movs	r0, #0
}
   2421a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2421c:	f06f 0001 	mvn.w	r0, #1
   24220:	e7fb      	b.n	2421a <hold_rx_buffer+0xe>

00024222 <send_nocopy>:
{
   24222:	b513      	push	{r0, r1, r4, lr}
   24224:	4604      	mov	r4, r0
   24226:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24228:	6921      	ldr	r1, [r4, #16]
   2422a:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   2422e:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   24232:	2902      	cmp	r1, #2
   24234:	d109      	bne.n	2424a <send_nocopy+0x28>
	if (len == 0) {
   24236:	b15b      	cbz	r3, 24250 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   24238:	b168      	cbz	r0, 24256 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   2423a:	9300      	str	r3, [sp, #0]
   2423c:	4613      	mov	r3, r2
   2423e:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   24242:	f7f9 fc4d 	bl	1dae0 <rpmsg_send_offchannel_nocopy>
}
   24246:	b002      	add	sp, #8
   24248:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2424a:	f06f 000f 	mvn.w	r0, #15
   2424e:	e7fa      	b.n	24246 <send_nocopy+0x24>
		return -EBADMSG;
   24250:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   24254:	e7f7      	b.n	24246 <send_nocopy+0x24>
		return -ENOENT;
   24256:	f06f 0001 	mvn.w	r0, #1
   2425a:	e7f4      	b.n	24246 <send_nocopy+0x24>

0002425c <get_tx_buffer>:
{
   2425c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24260:	461c      	mov	r4, r3
   24262:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   24266:	4616      	mov	r6, r2
   24268:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   2426a:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   2426c:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   2426e:	b339      	cbz	r1, 242c0 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   24270:	b34a      	cbz	r2, 242c6 <get_tx_buffer+0x6a>
   24272:	b344      	cbz	r4, 242c6 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   24274:	1c6a      	adds	r2, r5, #1
   24276:	f143 0300 	adc.w	r3, r3, #0
   2427a:	2a02      	cmp	r2, #2
   2427c:	f173 0300 	sbcs.w	r3, r3, #0
   24280:	d224      	bcs.n	242cc <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   24282:	6822      	ldr	r2, [r4, #0]
   24284:	b142      	cbz	r2, 24298 <get_tx_buffer+0x3c>
   24286:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   2428a:	429a      	cmp	r2, r3
   2428c:	d904      	bls.n	24298 <get_tx_buffer+0x3c>
		return -ENOMEM;
   2428e:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   24292:	6023      	str	r3, [r4, #0]
}
   24294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   24298:	ea05 0908 	and.w	r9, r5, r8
   2429c:	f109 0301 	add.w	r3, r9, #1
   242a0:	425a      	negs	r2, r3
   242a2:	415a      	adcs	r2, r3
   242a4:	4621      	mov	r1, r4
   242a6:	4638      	mov	r0, r7
   242a8:	f003 fe6d 	bl	27f86 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   242ac:	b988      	cbnz	r0, 242d2 <get_tx_buffer+0x76>
   242ae:	f1b8 3fff 	cmp.w	r8, #4294967295
   242b2:	bf08      	it	eq
   242b4:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   242b8:	d0f0      	beq.n	2429c <get_tx_buffer+0x40>
		return -ENOBUFS;
   242ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
   242be:	e7e9      	b.n	24294 <get_tx_buffer+0x38>
		return -ENOENT;
   242c0:	f06f 0001 	mvn.w	r0, #1
   242c4:	e7e6      	b.n	24294 <get_tx_buffer+0x38>
		return -EINVAL;
   242c6:	f06f 0015 	mvn.w	r0, #21
   242ca:	e7e3      	b.n	24294 <get_tx_buffer+0x38>
		return -ENOTSUP;
   242cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   242d0:	e7e0      	b.n	24294 <get_tx_buffer+0x38>
	(*r_data) = payload;
   242d2:	6030      	str	r0, [r6, #0]
	return 0;
   242d4:	2000      	movs	r0, #0
   242d6:	e7dd      	b.n	24294 <get_tx_buffer+0x38>

000242d8 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   242d8:	f003 be9a 	b.w	28010 <rpmsg_destroy_ept>

000242dc <get_ept_slot_with_name>:
{
   242dc:	b538      	push	{r3, r4, r5, lr}
   242de:	460d      	mov	r5, r1
   242e0:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   242e2:	f100 0140 	add.w	r1, r0, #64	; 0x40
   242e6:	4628      	mov	r0, r5
   242e8:	f7e5 f830 	bl	934c <strcmp>
   242ec:	b130      	cbz	r0, 242fc <get_ept_slot_with_name+0x20>
   242ee:	4628      	mov	r0, r5
   242f0:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   242f4:	f7e5 f82a 	bl	934c <strcmp>
   242f8:	b920      	cbnz	r0, 24304 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   242fa:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   242fc:	2370      	movs	r3, #112	; 0x70
   242fe:	fb03 4000 	mla	r0, r3, r0, r4
}
   24302:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   24304:	2000      	movs	r0, #0
   24306:	e7fc      	b.n	24302 <get_ept_slot_with_name+0x26>

00024308 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   24308:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   2430c:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   24310:	f004 b906 	b.w	28520 <k_work_submit_to_queue>

00024314 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   24314:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   24318:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2431c:	3b00      	subs	r3, #0
   2431e:	bf18      	it	ne
   24320:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   24322:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   24326:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   2432a:	f003 bdcd 	b.w	27ec8 <virtqueue_notification>

0002432e <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   2432e:	68cb      	ldr	r3, [r1, #12]
   24330:	b133      	cbz	r3, 24340 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   24332:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   24334:	6883      	ldr	r3, [r0, #8]
   24336:	681b      	ldr	r3, [r3, #0]
   24338:	b113      	cbz	r3, 24340 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   2433a:	2200      	movs	r2, #0
   2433c:	6909      	ldr	r1, [r1, #16]
   2433e:	4718      	bx	r3
}
   24340:	4770      	bx	lr

00024342 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   24342:	f7fa bd79 	b.w	1ee38 <z_impl_k_mutex_unlock>

00024346 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24346:	e8d0 3fef 	ldaex	r3, [r0]
   2434a:	e8c0 1fe2 	stlex	r2, r1, [r0]
   2434e:	2a00      	cmp	r2, #0
   24350:	d1f9      	bne.n	24346 <atomic_set.isra.0>
}
   24352:	4770      	bx	lr

00024354 <backend_init>:
{
   24354:	b510      	push	{r4, lr}
	data->role = conf->role;
   24356:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   24358:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   2435a:	681b      	ldr	r3, [r3, #0]
   2435c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   24360:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   24364:	f004 f844 	bl	283f0 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   24368:	2100      	movs	r1, #0
   2436a:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   2436e:	f7ff ffea 	bl	24346 <atomic_set.isra.0>
}
   24372:	4608      	mov	r0, r1
   24374:	bd10      	pop	{r4, pc}

00024376 <ns_bind_cb>:
{
   24376:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2437a:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   2437c:	460d      	mov	r5, r1
   2437e:	b379      	cbz	r1, 243e0 <ns_bind_cb+0x6a>
   24380:	780b      	ldrb	r3, [r1, #0]
   24382:	b36b      	cbz	r3, 243e0 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   24384:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   24388:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2438c:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2438e:	f04f 32ff 	mov.w	r2, #4294967295
   24392:	f04f 33ff 	mov.w	r3, #4294967295
   24396:	4620      	mov	r0, r4
   24398:	f7fa fc7e 	bl	1ec98 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2439c:	462a      	mov	r2, r5
   2439e:	4640      	mov	r0, r8
   243a0:	a901      	add	r1, sp, #4
   243a2:	f7ea f961 	bl	e668 <get_ept>
	if (rpmsg_ept == NULL) {
   243a6:	9e01      	ldr	r6, [sp, #4]
   243a8:	b92e      	cbnz	r6, 243b6 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   243aa:	4620      	mov	r0, r4
}
   243ac:	b002      	add	sp, #8
   243ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   243b2:	f7ff bfc6 	b.w	24342 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   243b6:	b158      	cbz	r0, 243d0 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   243b8:	4620      	mov	r0, r4
   243ba:	f7ff ffc2 	bl	24342 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   243be:	463b      	mov	r3, r7
   243c0:	462a      	mov	r2, r5
   243c2:	4631      	mov	r1, r6
   243c4:	4640      	mov	r0, r8
}
   243c6:	b002      	add	sp, #8
   243c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   243cc:	f7ea b92a 	b.w	e624 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   243d0:	2220      	movs	r2, #32
   243d2:	4629      	mov	r1, r5
   243d4:	f106 0040 	add.w	r0, r6, #64	; 0x40
   243d8:	f004 fb5c 	bl	28a94 <strncpy>
		rpmsg_ept->dest = dest;
   243dc:	6637      	str	r7, [r6, #96]	; 0x60
   243de:	e7e4      	b.n	243aa <ns_bind_cb+0x34>
}
   243e0:	b002      	add	sp, #8
   243e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000243e6 <ept_cb>:
{
   243e6:	b510      	push	{r4, lr}
   243e8:	4608      	mov	r0, r1
   243ea:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   243ec:	4611      	mov	r1, r2
   243ee:	b952      	cbnz	r2, 24406 <ept_cb+0x20>
		if (!ept->bound) {
   243f0:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   243f4:	b92a      	cbnz	r2, 24402 <ept_cb+0x1c>
			ept->bound = true;
   243f6:	2201      	movs	r2, #1
			bound_cb(ept);
   243f8:	4618      	mov	r0, r3
			ept->bound = true;
   243fa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   243fe:	f7ea fa85 	bl	e90c <bound_cb>
}
   24402:	2000      	movs	r0, #0
   24404:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   24406:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   24408:	6854      	ldr	r4, [r2, #4]
   2440a:	2c00      	cmp	r4, #0
   2440c:	d0f9      	beq.n	24402 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   2440e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   24410:	47a0      	blx	r4
   24412:	e7f6      	b.n	24402 <ept_cb+0x1c>

00024414 <deregister_ept>:
{
   24414:	b510      	push	{r4, lr}
   24416:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24418:	6903      	ldr	r3, [r0, #16]
   2441a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   2441e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   24422:	2b02      	cmp	r3, #2
   24424:	d10a      	bne.n	2443c <deregister_ept+0x28>
	if (!rpmsg_ept) {
   24426:	b161      	cbz	r1, 24442 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   24428:	4608      	mov	r0, r1
   2442a:	f003 fdf1 	bl	28010 <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   2442e:	2270      	movs	r2, #112	; 0x70
   24430:	2100      	movs	r1, #0
   24432:	4620      	mov	r0, r4
   24434:	f004 f9ec 	bl	28810 <memset>
	return 0;
   24438:	2000      	movs	r0, #0
}
   2443a:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2443c:	f06f 000f 	mvn.w	r0, #15
   24440:	e7fb      	b.n	2443a <deregister_ept+0x26>
		return -ENOENT;
   24442:	f06f 0001 	mvn.w	r0, #1
   24446:	e7f8      	b.n	2443a <deregister_ept+0x26>

00024448 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   24448:	f003 bde2 	b.w	28010 <rpmsg_destroy_ept>

0002444c <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   2444c:	b538      	push	{r3, r4, r5, lr}
   2444e:	460d      	mov	r5, r1
	if (!instance) {
   24450:	4604      	mov	r4, r0
   24452:	b160      	cbz	r0, 2446e <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   24454:	30e0      	adds	r0, #224	; 0xe0
   24456:	f003 ff5c 	bl	28312 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   2445a:	b10d      	cbz	r5, 24460 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2445c:	2000      	movs	r0, #0
}
   2445e:	bd38      	pop	{r3, r4, r5, pc}
   24460:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   24464:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   24468:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   2446c:	e7f6      	b.n	2445c <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   2446e:	f06f 0015 	mvn.w	r0, #21
   24472:	e7f4      	b.n	2445e <ipc_rpmsg_deinit+0x12>

00024474 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   24474:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   24476:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2447a:	b113      	cbz	r3, 24482 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   2447c:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   24480:	4718      	bx	r3
}
   24482:	4770      	bx	lr

00024484 <virtio_set_features>:
}
   24484:	4770      	bx	lr

00024486 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   24486:	6983      	ldr	r3, [r0, #24]
   24488:	b913      	cbnz	r3, 24490 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   2448a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2448e:	7019      	strb	r1, [r3, #0]
}
   24490:	4770      	bx	lr

00024492 <virtio_get_features>:
}
   24492:	2001      	movs	r0, #1
   24494:	4770      	bx	lr

00024496 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   24496:	6983      	ldr	r3, [r0, #24]
   24498:	2b01      	cmp	r3, #1
   2449a:	d104      	bne.n	244a6 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   2449c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   244a0:	7818      	ldrb	r0, [r3, #0]
   244a2:	b2c0      	uxtb	r0, r0
   244a4:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   244a6:	2004      	movs	r0, #4
}
   244a8:	4770      	bx	lr

000244aa <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   244aa:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   244ac:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   244ae:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   244b0:	4620      	mov	r0, r4
   244b2:	f004 f971 	bl	28798 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   244b6:	4605      	mov	r5, r0
   244b8:	b118      	cbz	r0, 244c2 <virtqueue_allocate+0x18>
   244ba:	4622      	mov	r2, r4
   244bc:	2100      	movs	r1, #0
   244be:	f004 f9a7 	bl	28810 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   244c2:	4628      	mov	r0, r5
   244c4:	bd38      	pop	{r3, r4, r5, pc}

000244c6 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   244c6:	b538      	push	{r3, r4, r5, lr}
   244c8:	4604      	mov	r4, r0
   244ca:	2230      	movs	r2, #48	; 0x30
   244cc:	2100      	movs	r1, #0
   244ce:	f004 f99f 	bl	28810 <memset>
   244d2:	2218      	movs	r2, #24
   244d4:	2100      	movs	r1, #0
   244d6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   244da:	f004 f999 	bl	28810 <memset>
   244de:	2218      	movs	r2, #24
   244e0:	2100      	movs	r1, #0
   244e2:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   244e6:	f004 f993 	bl	28810 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   244ea:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   244ee:	f7f9 faa9 	bl	1da44 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   244f2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   244f6:	f7f9 faa5 	bl	1da44 <virtqueue_free>
	vr->shm_io = 0;
   244fa:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   244fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   24500:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   24504:	f7f9 f9ba 	bl	1d87c <metal_device_close>
	metal_finish();
   24508:	f7f9 fa14 	bl	1d934 <metal_finish>
	if (io->ops.close)
   2450c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   2450e:	f104 0540 	add.w	r5, r4, #64	; 0x40
   24512:	b10b      	cbz	r3, 24518 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   24514:	4628      	mov	r0, r5
   24516:	4798      	blx	r3
   24518:	2238      	movs	r2, #56	; 0x38
   2451a:	2100      	movs	r1, #0
   2451c:	4628      	mov	r0, r5
   2451e:	f004 f977 	bl	28810 <memset>

	return 0;
}
   24522:	2000      	movs	r0, #0
   24524:	bd38      	pop	{r3, r4, r5, pc}

00024526 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   24526:	b538      	push	{r3, r4, r5, lr}
   24528:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2452a:	42ab      	cmp	r3, r5
{
   2452c:	4611      	mov	r1, r2
   2452e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   24530:	d804      	bhi.n	2453c <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24532:	461a      	mov	r2, r3
   24534:	f004 f945 	bl	287c2 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   24538:	4620      	mov	r0, r4
   2453a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2453c:	2400      	movs	r4, #0
   2453e:	e7fb      	b.n	24538 <_copy+0x12>

00024540 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   24540:	f004 b966 	b.w	28810 <memset>

00024544 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   24544:	09c3      	lsrs	r3, r0, #7
   24546:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2454a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2454e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   24552:	b2c0      	uxtb	r0, r0
   24554:	4770      	bx	lr

00024556 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   24556:	78cb      	ldrb	r3, [r1, #3]
   24558:	7802      	ldrb	r2, [r0, #0]
   2455a:	4053      	eors	r3, r2
   2455c:	7003      	strb	r3, [r0, #0]
   2455e:	884b      	ldrh	r3, [r1, #2]
   24560:	7842      	ldrb	r2, [r0, #1]
   24562:	4053      	eors	r3, r2
   24564:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   24566:	680a      	ldr	r2, [r1, #0]
   24568:	7883      	ldrb	r3, [r0, #2]
   2456a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2456e:	7083      	strb	r3, [r0, #2]
   24570:	680a      	ldr	r2, [r1, #0]
   24572:	78c3      	ldrb	r3, [r0, #3]
   24574:	4053      	eors	r3, r2
   24576:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   24578:	79cb      	ldrb	r3, [r1, #7]
   2457a:	7902      	ldrb	r2, [r0, #4]
   2457c:	4053      	eors	r3, r2
   2457e:	7103      	strb	r3, [r0, #4]
   24580:	88cb      	ldrh	r3, [r1, #6]
   24582:	7942      	ldrb	r2, [r0, #5]
   24584:	4053      	eors	r3, r2
   24586:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   24588:	684a      	ldr	r2, [r1, #4]
   2458a:	7983      	ldrb	r3, [r0, #6]
   2458c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24590:	7183      	strb	r3, [r0, #6]
   24592:	684a      	ldr	r2, [r1, #4]
   24594:	79c3      	ldrb	r3, [r0, #7]
   24596:	4053      	eors	r3, r2
   24598:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2459a:	7acb      	ldrb	r3, [r1, #11]
   2459c:	7a02      	ldrb	r2, [r0, #8]
   2459e:	4053      	eors	r3, r2
   245a0:	7203      	strb	r3, [r0, #8]
   245a2:	7a42      	ldrb	r2, [r0, #9]
   245a4:	894b      	ldrh	r3, [r1, #10]
   245a6:	4053      	eors	r3, r2
   245a8:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   245aa:	688a      	ldr	r2, [r1, #8]
   245ac:	7a83      	ldrb	r3, [r0, #10]
   245ae:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   245b2:	7283      	strb	r3, [r0, #10]
   245b4:	688a      	ldr	r2, [r1, #8]
   245b6:	7ac3      	ldrb	r3, [r0, #11]
   245b8:	4053      	eors	r3, r2
   245ba:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   245bc:	7bcb      	ldrb	r3, [r1, #15]
   245be:	7b02      	ldrb	r2, [r0, #12]
   245c0:	4053      	eors	r3, r2
   245c2:	7303      	strb	r3, [r0, #12]
   245c4:	89cb      	ldrh	r3, [r1, #14]
   245c6:	7b42      	ldrb	r2, [r0, #13]
   245c8:	4053      	eors	r3, r2
   245ca:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   245cc:	68ca      	ldr	r2, [r1, #12]
   245ce:	7b83      	ldrb	r3, [r0, #14]
   245d0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   245d4:	7383      	strb	r3, [r0, #14]
   245d6:	68ca      	ldr	r2, [r1, #12]
   245d8:	7bc3      	ldrb	r3, [r0, #15]
   245da:	4053      	eors	r3, r2
   245dc:	73c3      	strb	r3, [r0, #15]
}
   245de:	4770      	bx	lr

000245e0 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   245e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   245e2:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   245e4:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   245e6:	f88d 2000 	strb.w	r2, [sp]
   245ea:	7942      	ldrb	r2, [r0, #5]
   245ec:	f88d 2001 	strb.w	r2, [sp, #1]
   245f0:	7a82      	ldrb	r2, [r0, #10]
   245f2:	f88d 2002 	strb.w	r2, [sp, #2]
   245f6:	7bc2      	ldrb	r2, [r0, #15]
   245f8:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   245fc:	7902      	ldrb	r2, [r0, #4]
   245fe:	f88d 2004 	strb.w	r2, [sp, #4]
   24602:	7a42      	ldrb	r2, [r0, #9]
   24604:	f88d 2005 	strb.w	r2, [sp, #5]
   24608:	7b82      	ldrb	r2, [r0, #14]
   2460a:	f88d 2006 	strb.w	r2, [sp, #6]
   2460e:	78c2      	ldrb	r2, [r0, #3]
   24610:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   24614:	7a02      	ldrb	r2, [r0, #8]
   24616:	f88d 2008 	strb.w	r2, [sp, #8]
   2461a:	7b42      	ldrb	r2, [r0, #13]
   2461c:	f88d 2009 	strb.w	r2, [sp, #9]
   24620:	7882      	ldrb	r2, [r0, #2]
   24622:	f88d 200a 	strb.w	r2, [sp, #10]
   24626:	79c2      	ldrb	r2, [r0, #7]
   24628:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2462c:	7b02      	ldrb	r2, [r0, #12]
   2462e:	f88d 200c 	strb.w	r2, [sp, #12]
   24632:	7842      	ldrb	r2, [r0, #1]
   24634:	f88d 200d 	strb.w	r2, [sp, #13]
   24638:	7982      	ldrb	r2, [r0, #6]
   2463a:	f88d 200e 	strb.w	r2, [sp, #14]
   2463e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24642:	2310      	movs	r3, #16
   24644:	466a      	mov	r2, sp
   24646:	4619      	mov	r1, r3
   24648:	f7ff ff6d 	bl	24526 <_copy>
}
   2464c:	b005      	add	sp, #20
   2464e:	f85d fb04 	ldr.w	pc, [sp], #4

00024652 <mult_row_column>:
{
   24652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24654:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24656:	7808      	ldrb	r0, [r1, #0]
{
   24658:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2465a:	f7ff ff73 	bl	24544 <_double_byte>
   2465e:	4605      	mov	r5, r0
   24660:	7860      	ldrb	r0, [r4, #1]
   24662:	f7ff ff6f 	bl	24544 <_double_byte>
   24666:	78a2      	ldrb	r2, [r4, #2]
   24668:	7863      	ldrb	r3, [r4, #1]
   2466a:	4053      	eors	r3, r2
   2466c:	78e2      	ldrb	r2, [r4, #3]
   2466e:	4053      	eors	r3, r2
   24670:	405d      	eors	r5, r3
   24672:	4068      	eors	r0, r5
   24674:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   24676:	7860      	ldrb	r0, [r4, #1]
   24678:	7827      	ldrb	r7, [r4, #0]
   2467a:	f7ff ff63 	bl	24544 <_double_byte>
   2467e:	4605      	mov	r5, r0
   24680:	78a0      	ldrb	r0, [r4, #2]
   24682:	f7ff ff5f 	bl	24544 <_double_byte>
   24686:	78a3      	ldrb	r3, [r4, #2]
   24688:	405f      	eors	r7, r3
   2468a:	78e3      	ldrb	r3, [r4, #3]
   2468c:	405f      	eors	r7, r3
   2468e:	407d      	eors	r5, r7
   24690:	4068      	eors	r0, r5
   24692:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   24694:	7863      	ldrb	r3, [r4, #1]
   24696:	7827      	ldrb	r7, [r4, #0]
   24698:	78a0      	ldrb	r0, [r4, #2]
   2469a:	405f      	eors	r7, r3
   2469c:	f7ff ff52 	bl	24544 <_double_byte>
   246a0:	4605      	mov	r5, r0
   246a2:	78e0      	ldrb	r0, [r4, #3]
   246a4:	f7ff ff4e 	bl	24544 <_double_byte>
   246a8:	78e3      	ldrb	r3, [r4, #3]
   246aa:	405f      	eors	r7, r3
   246ac:	407d      	eors	r5, r7
   246ae:	4068      	eors	r0, r5
   246b0:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   246b2:	7820      	ldrb	r0, [r4, #0]
   246b4:	f7ff ff46 	bl	24544 <_double_byte>
   246b8:	7862      	ldrb	r2, [r4, #1]
   246ba:	7823      	ldrb	r3, [r4, #0]
   246bc:	4053      	eors	r3, r2
   246be:	78a2      	ldrb	r2, [r4, #2]
   246c0:	4053      	eors	r3, r2
   246c2:	ea80 0503 	eor.w	r5, r0, r3
   246c6:	78e0      	ldrb	r0, [r4, #3]
   246c8:	f7ff ff3c 	bl	24544 <_double_byte>
   246cc:	b2ed      	uxtb	r5, r5
   246ce:	4045      	eors	r5, r0
   246d0:	70f5      	strb	r5, [r6, #3]
}
   246d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000246d4 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   246d4:	b570      	push	{r4, r5, r6, lr}
   246d6:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   246d8:	4605      	mov	r5, r0
{
   246da:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   246dc:	2800      	cmp	r0, #0
   246de:	d049      	beq.n	24774 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   246e0:	2900      	cmp	r1, #0
   246e2:	d049      	beq.n	24778 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   246e4:	2a00      	cmp	r2, #0
   246e6:	d049      	beq.n	2477c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   246e8:	2310      	movs	r3, #16
   246ea:	460a      	mov	r2, r1
   246ec:	4668      	mov	r0, sp
   246ee:	4619      	mov	r1, r3
   246f0:	f7ff ff19 	bl	24526 <_copy>
	add_round_key(state, s->words);
   246f4:	4621      	mov	r1, r4
   246f6:	4668      	mov	r0, sp
   246f8:	f7ff ff2d 	bl	24556 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   246fc:	3410      	adds	r4, #16
   246fe:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   24702:	4668      	mov	r0, sp
   24704:	f7ea fca2 	bl	f04c <sub_bytes>
		shift_rows(state);
   24708:	4668      	mov	r0, sp
   2470a:	f7ff ff69 	bl	245e0 <shift_rows>
	mult_row_column(t, s);
   2470e:	4669      	mov	r1, sp
   24710:	a804      	add	r0, sp, #16
   24712:	f7ff ff9e 	bl	24652 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   24716:	a901      	add	r1, sp, #4
   24718:	a805      	add	r0, sp, #20
   2471a:	f7ff ff9a 	bl	24652 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2471e:	a902      	add	r1, sp, #8
   24720:	a806      	add	r0, sp, #24
   24722:	f7ff ff96 	bl	24652 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   24726:	a903      	add	r1, sp, #12
   24728:	a807      	add	r0, sp, #28
   2472a:	f7ff ff92 	bl	24652 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2472e:	2310      	movs	r3, #16
   24730:	4668      	mov	r0, sp
   24732:	4619      	mov	r1, r3
   24734:	eb0d 0203 	add.w	r2, sp, r3
   24738:	f7ff fef5 	bl	24526 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2473c:	4621      	mov	r1, r4
   2473e:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   24740:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   24742:	f7ff ff08 	bl	24556 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   24746:	42b4      	cmp	r4, r6
   24748:	d1db      	bne.n	24702 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2474a:	f7ea fc7f 	bl	f04c <sub_bytes>
	shift_rows(state);
   2474e:	4668      	mov	r0, sp
   24750:	f7ff ff46 	bl	245e0 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   24754:	4621      	mov	r1, r4
   24756:	4668      	mov	r0, sp
   24758:	f7ff fefd 	bl	24556 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2475c:	2310      	movs	r3, #16
   2475e:	466a      	mov	r2, sp
   24760:	4619      	mov	r1, r3
   24762:	4628      	mov	r0, r5
   24764:	f7ff fedf 	bl	24526 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   24768:	4668      	mov	r0, sp
   2476a:	2210      	movs	r2, #16
   2476c:	2100      	movs	r1, #0
   2476e:	f7ff fee7 	bl	24540 <_set>

	return TC_CRYPTO_SUCCESS;
   24772:	2001      	movs	r0, #1
}
   24774:	b008      	add	sp, #32
   24776:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24778:	4608      	mov	r0, r1
   2477a:	e7fb      	b.n	24774 <tc_aes_encrypt+0xa0>
   2477c:	4610      	mov	r0, r2
   2477e:	e7f9      	b.n	24774 <tc_aes_encrypt+0xa0>

00024780 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24780:	460a      	mov	r2, r1
{
   24782:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24784:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   24788:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2478a:	2b00      	cmp	r3, #0
   2478c:	bfac      	ite	ge
   2478e:	2300      	movge	r3, #0
   24790:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   24792:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   24796:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2479a:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2479c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   247a0:	d002      	beq.n	247a8 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   247a2:	7813      	ldrb	r3, [r2, #0]
   247a4:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   247a6:	e7f4      	b.n	24792 <gf_double+0x12>
	}
}
   247a8:	bd10      	pop	{r4, pc}

000247aa <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   247aa:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   247ac:	b120      	cbz	r0, 247b8 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   247ae:	2258      	movs	r2, #88	; 0x58
   247b0:	2100      	movs	r1, #0
   247b2:	f7ff fec5 	bl	24540 <_set>
   247b6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   247b8:	bd08      	pop	{r3, pc}

000247ba <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   247ba:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   247bc:	4604      	mov	r4, r0
   247be:	b188      	cbz	r0, 247e4 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   247c0:	2210      	movs	r2, #16
   247c2:	2100      	movs	r1, #0
   247c4:	f7ff febc 	bl	24540 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   247c8:	2210      	movs	r2, #16
   247ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   247ce:	2100      	movs	r1, #0
   247d0:	f7ff feb6 	bl	24540 <_set>
	s->leftover_offset = 0;
   247d4:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   247d6:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   247d8:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   247da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   247de:	2001      	movs	r0, #1
   247e0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   247e4:	bd10      	pop	{r4, pc}

000247e6 <tc_cmac_setup>:
{
   247e6:	b570      	push	{r4, r5, r6, lr}
   247e8:	4604      	mov	r4, r0
   247ea:	460d      	mov	r5, r1
   247ec:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   247ee:	b310      	cbz	r0, 24836 <tc_cmac_setup+0x50>
   247f0:	b311      	cbz	r1, 24838 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   247f2:	2258      	movs	r2, #88	; 0x58
   247f4:	2100      	movs	r1, #0
   247f6:	f7ff fea3 	bl	24540 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   247fa:	4629      	mov	r1, r5
   247fc:	4630      	mov	r0, r6
	s->sched = sched;
   247fe:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   24800:	f7ea fc30 	bl	f064 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24804:	2210      	movs	r2, #16
   24806:	2100      	movs	r1, #0
   24808:	4620      	mov	r0, r4
   2480a:	f7ff fe99 	bl	24540 <_set>
	gf_double (s->K1, s->iv);
   2480e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   24812:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24814:	4621      	mov	r1, r4
   24816:	4620      	mov	r0, r4
   24818:	f7ff ff5c 	bl	246d4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2481c:	4621      	mov	r1, r4
   2481e:	4628      	mov	r0, r5
   24820:	f7ff ffae 	bl	24780 <gf_double>
	gf_double (s->K2, s->K1);
   24824:	4629      	mov	r1, r5
   24826:	f104 0020 	add.w	r0, r4, #32
   2482a:	f7ff ffa9 	bl	24780 <gf_double>
	tc_cmac_init(s);
   2482e:	4620      	mov	r0, r4
   24830:	f7ff ffc3 	bl	247ba <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   24834:	2001      	movs	r0, #1
}
   24836:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24838:	4608      	mov	r0, r1
   2483a:	e7fc      	b.n	24836 <tc_cmac_setup+0x50>

0002483c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2483c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24840:	460e      	mov	r6, r1
   24842:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24844:	4604      	mov	r4, r0
   24846:	2800      	cmp	r0, #0
   24848:	d060      	beq.n	2490c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2484a:	b1fa      	cbz	r2, 2488c <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2484c:	2900      	cmp	r1, #0
   2484e:	d05d      	beq.n	2490c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   24850:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   24854:	ea53 0102 	orrs.w	r1, r3, r2
   24858:	d058      	beq.n	2490c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2485a:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2485c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   24860:	f142 32ff 	adc.w	r2, r2, #4294967295
   24864:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   24868:	f1b8 0f00 	cmp.w	r8, #0
   2486c:	d02c      	beq.n	248c8 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2486e:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24872:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   24876:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24878:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2487a:	d20a      	bcs.n	24892 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2487c:	462b      	mov	r3, r5
   2487e:	4632      	mov	r2, r6
   24880:	4629      	mov	r1, r5
   24882:	f7ff fe50 	bl	24526 <_copy>
			s->leftover_offset += data_length;
   24886:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24888:	442b      	add	r3, r5
   2488a:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2488c:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2488e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   24892:	463b      	mov	r3, r7
   24894:	4632      	mov	r2, r6
   24896:	4639      	mov	r1, r7
   24898:	f7ff fe45 	bl	24526 <_copy>
		s->leftover_offset = 0;
   2489c:	2300      	movs	r3, #0
   2489e:	3d10      	subs	r5, #16
   248a0:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   248a2:	4445      	add	r5, r8
		data += remaining_space;
   248a4:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248a6:	1e63      	subs	r3, r4, #1
   248a8:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   248ac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   248b0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248b4:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   248b6:	ea82 0200 	eor.w	r2, r2, r0
   248ba:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248bc:	d1f6      	bne.n	248ac <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   248be:	4621      	mov	r1, r4
   248c0:	4620      	mov	r0, r4
   248c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   248c4:	f7ff ff06 	bl	246d4 <tc_aes_encrypt>
   248c8:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   248cc:	2d10      	cmp	r5, #16
   248ce:	d80a      	bhi.n	248e6 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   248d0:	2d00      	cmp	r5, #0
   248d2:	d0db      	beq.n	2488c <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   248d4:	462b      	mov	r3, r5
   248d6:	4632      	mov	r2, r6
   248d8:	4629      	mov	r1, r5
   248da:	f104 0030 	add.w	r0, r4, #48	; 0x30
   248de:	f7ff fe22 	bl	24526 <_copy>
		s->leftover_offset = data_length;
   248e2:	6465      	str	r5, [r4, #68]	; 0x44
   248e4:	e7d2      	b.n	2488c <tc_cmac_update+0x50>
   248e6:	1e63      	subs	r3, r4, #1
   248e8:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   248ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   248ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248f2:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   248f4:	ea82 0200 	eor.w	r2, r2, r0
   248f8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   248fa:	d1f6      	bne.n	248ea <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   248fc:	4621      	mov	r1, r4
   248fe:	4620      	mov	r0, r4
   24900:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24902:	f7ff fee7 	bl	246d4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   24906:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   24908:	3d10      	subs	r5, #16
   2490a:	e7df      	b.n	248cc <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2490c:	2000      	movs	r0, #0
   2490e:	e7be      	b.n	2488e <tc_cmac_update+0x52>

00024910 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   24910:	b570      	push	{r4, r5, r6, lr}
   24912:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   24914:	4605      	mov	r5, r0
   24916:	b1f0      	cbz	r0, 24956 <tc_cmac_final+0x46>
   24918:	b371      	cbz	r1, 24978 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2491a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2491c:	2a10      	cmp	r2, #16
   2491e:	d11b      	bne.n	24958 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   24920:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24922:	1e63      	subs	r3, r4, #1
   24924:	3901      	subs	r1, #1
   24926:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2492a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2492e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24932:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24934:	ea82 0206 	eor.w	r2, r2, r6
   24938:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2493c:	ea82 0206 	eor.w	r2, r2, r6
   24940:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24942:	d1f2      	bne.n	2492a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24944:	4621      	mov	r1, r4
   24946:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24948:	4628      	mov	r0, r5
   2494a:	f7ff fec3 	bl	246d4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2494e:	4620      	mov	r0, r4
   24950:	f7ff ff2b 	bl	247aa <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24954:	2001      	movs	r0, #1
}
   24956:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   24958:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2495c:	2100      	movs	r1, #0
   2495e:	f1c2 0210 	rsb	r2, r2, #16
   24962:	4420      	add	r0, r4
   24964:	f7ff fdec 	bl	24540 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   24968:	2280      	movs	r2, #128	; 0x80
   2496a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2496c:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   24970:	4423      	add	r3, r4
   24972:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24976:	e7d4      	b.n	24922 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   24978:	4608      	mov	r0, r1
   2497a:	e7ec      	b.n	24956 <tc_cmac_final+0x46>

0002497c <tc_sha256_update>:
{
   2497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2497e:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   24980:	b110      	cbz	r0, 24988 <tc_sha256_update+0xc>
   24982:	b1f9      	cbz	r1, 249c4 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   24984:	b90a      	cbnz	r2, 2498a <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   24986:	2001      	movs	r0, #1
}
   24988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2498a:	2700      	movs	r7, #0
   2498c:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2498e:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   24992:	6e83      	ldr	r3, [r0, #104]	; 0x68
   24994:	1c5a      	adds	r2, r3, #1
   24996:	6682      	str	r2, [r0, #104]	; 0x68
   24998:	f814 1b01 	ldrb.w	r1, [r4], #1
   2499c:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2499e:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   249a0:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   249a4:	d90b      	bls.n	249be <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   249a6:	4631      	mov	r1, r6
   249a8:	f7ea fbb0 	bl	f10c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   249ac:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   249b0:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   249b4:	f142 0200 	adc.w	r2, r2, #0
   249b8:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   249bc:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   249be:	42a5      	cmp	r5, r4
   249c0:	d1e7      	bne.n	24992 <tc_sha256_update+0x16>
   249c2:	e7e0      	b.n	24986 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   249c4:	4608      	mov	r0, r1
   249c6:	e7df      	b.n	24988 <tc_sha256_update+0xc>

000249c8 <tc_sha256_final>:
{
   249c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   249ca:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   249cc:	4605      	mov	r5, r0
   249ce:	2800      	cmp	r0, #0
   249d0:	d054      	beq.n	24a7c <tc_sha256_final+0xb4>
   249d2:	2900      	cmp	r1, #0
   249d4:	d053      	beq.n	24a7e <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   249d6:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   249d8:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   249dc:	00d8      	lsls	r0, r3, #3
   249de:	1812      	adds	r2, r2, r0
   249e0:	f141 0100 	adc.w	r1, r1, #0
   249e4:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   249e8:	2280      	movs	r2, #128	; 0x80
   249ea:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   249ec:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   249ee:	4423      	add	r3, r4
   249f0:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   249f2:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   249f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   249fa:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   249fe:	d90a      	bls.n	24a16 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   24a00:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   24a04:	4639      	mov	r1, r7
   24a06:	4430      	add	r0, r6
   24a08:	f7ff fd9a 	bl	24540 <_set>
		compress(s->iv, s->leftover);
   24a0c:	4631      	mov	r1, r6
   24a0e:	4620      	mov	r0, r4
   24a10:	f7ea fb7c 	bl	f10c <compress>
		s->leftover_offset = 0;
   24a14:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   24a16:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   24a18:	2100      	movs	r1, #0
   24a1a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   24a1e:	4430      	add	r0, r6
   24a20:	f7ff fd8e 	bl	24540 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   24a24:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   24a26:	4631      	mov	r1, r6
   24a28:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   24a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   24a2c:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   24a2e:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   24a30:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   24a34:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   24a38:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   24a3a:	0e1b      	lsrs	r3, r3, #24
   24a3c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   24a40:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   24a42:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   24a46:	f7ea fb61 	bl	f10c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   24a4a:	1d2b      	adds	r3, r5, #4
   24a4c:	1f21      	subs	r1, r4, #4
   24a4e:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   24a50:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   24a54:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   24a56:	0e10      	lsrs	r0, r2, #24
   24a58:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   24a5c:	0c10      	lsrs	r0, r2, #16
   24a5e:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   24a62:	0a10      	lsrs	r0, r2, #8
   24a64:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   24a68:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   24a6c:	42ab      	cmp	r3, r5
   24a6e:	d1ef      	bne.n	24a50 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   24a70:	4620      	mov	r0, r4
   24a72:	2270      	movs	r2, #112	; 0x70
   24a74:	2100      	movs	r1, #0
   24a76:	f7ff fd63 	bl	24540 <_set>
	return TC_CRYPTO_SUCCESS;
   24a7a:	2001      	movs	r0, #1
}
   24a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   24a7e:	4608      	mov	r0, r1
   24a80:	e7fc      	b.n	24a7c <tc_sha256_final+0xb4>

00024a82 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   24a82:	b530      	push	{r4, r5, lr}
   24a84:	1e43      	subs	r3, r0, #1
   24a86:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   24a88:	42a9      	cmp	r1, r5
   24a8a:	d106      	bne.n	24a9a <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   24a8c:	2136      	movs	r1, #54	; 0x36
   24a8e:	245c      	movs	r4, #92	; 0x5c
   24a90:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   24a92:	1a13      	subs	r3, r2, r0
   24a94:	2b3f      	cmp	r3, #63	; 0x3f
   24a96:	d90c      	bls.n	24ab2 <rekey+0x30>
	}
}
   24a98:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   24a9a:	780c      	ldrb	r4, [r1, #0]
   24a9c:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   24aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   24aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
   24aa8:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   24aac:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   24ab0:	e7ea      	b.n	24a88 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   24ab2:	f802 1b01 	strb.w	r1, [r2], #1
   24ab6:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   24aba:	e7ea      	b.n	24a92 <rekey+0x10>

00024abc <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   24abc:	b5f0      	push	{r4, r5, r6, r7, lr}
   24abe:	460e      	mov	r6, r1
   24ac0:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   24ac2:	4605      	mov	r5, r0
{
   24ac4:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   24ac6:	b1b8      	cbz	r0, 24af8 <tc_hmac_set_key+0x3c>
   24ac8:	b341      	cbz	r1, 24b1c <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   24aca:	b34a      	cbz	r2, 24b20 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   24acc:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   24ace:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   24ad2:	d813      	bhi.n	24afc <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   24ad4:	a810      	add	r0, sp, #64	; 0x40
   24ad6:	f7ea fc03 	bl	f2e0 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   24ada:	4622      	mov	r2, r4
   24adc:	4669      	mov	r1, sp
   24ade:	a810      	add	r0, sp, #64	; 0x40
   24ae0:	f7ff ff4c 	bl	2497c <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   24ae4:	a910      	add	r1, sp, #64	; 0x40
   24ae6:	a834      	add	r0, sp, #208	; 0xd0
   24ae8:	f7ff ff6e 	bl	249c8 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   24aec:	4622      	mov	r2, r4
   24aee:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   24af0:	4638      	mov	r0, r7
   24af2:	f7ff ffc6 	bl	24a82 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   24af6:	2001      	movs	r0, #1
}
   24af8:	b04d      	add	sp, #308	; 0x134
   24afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   24afc:	f7ea fbf0 	bl	f2e0 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   24b00:	4622      	mov	r2, r4
   24b02:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   24b04:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   24b08:	4628      	mov	r0, r5
   24b0a:	f7ff ff37 	bl	2497c <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   24b0e:	4629      	mov	r1, r5
   24b10:	4620      	mov	r0, r4
   24b12:	f7ff ff59 	bl	249c8 <tc_sha256_final>
		rekey(ctx->key,
   24b16:	2220      	movs	r2, #32
   24b18:	4621      	mov	r1, r4
   24b1a:	e7e9      	b.n	24af0 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   24b1c:	4608      	mov	r0, r1
   24b1e:	e7eb      	b.n	24af8 <tc_hmac_set_key+0x3c>
   24b20:	4610      	mov	r0, r2
   24b22:	e7e9      	b.n	24af8 <tc_hmac_set_key+0x3c>

00024b24 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   24b24:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   24b26:	4604      	mov	r4, r0
   24b28:	b140      	cbz	r0, 24b3c <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   24b2a:	f7ea fbd9 	bl	f2e0 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   24b2e:	2240      	movs	r2, #64	; 0x40
   24b30:	4620      	mov	r0, r4
   24b32:	f104 0170 	add.w	r1, r4, #112	; 0x70
   24b36:	f7ff ff21 	bl	2497c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   24b3a:	2001      	movs	r0, #1
}
   24b3c:	bd10      	pop	{r4, pc}

00024b3e <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   24b3e:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   24b40:	b110      	cbz	r0, 24b48 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   24b42:	f7ff ff1b 	bl	2497c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   24b46:	2001      	movs	r0, #1
}
   24b48:	bd08      	pop	{r3, pc}

00024b4a <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   24b4a:	b570      	push	{r4, r5, r6, lr}
   24b4c:	460e      	mov	r6, r1
   24b4e:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   24b50:	4605      	mov	r5, r0
   24b52:	b1f0      	cbz	r0, 24b92 <tc_hmac_final+0x48>
   24b54:	2920      	cmp	r1, #32
   24b56:	d11c      	bne.n	24b92 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   24b58:	b1ea      	cbz	r2, 24b96 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   24b5a:	4611      	mov	r1, r2
   24b5c:	f7ff ff34 	bl	249c8 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   24b60:	4620      	mov	r0, r4
   24b62:	f7ea fbbd 	bl	f2e0 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   24b66:	2240      	movs	r2, #64	; 0x40
   24b68:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   24b6c:	4620      	mov	r0, r4
   24b6e:	f7ff ff05 	bl	2497c <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   24b72:	4632      	mov	r2, r6
   24b74:	4629      	mov	r1, r5
   24b76:	4620      	mov	r0, r4
   24b78:	f7ff ff00 	bl	2497c <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   24b7c:	4621      	mov	r1, r4
   24b7e:	4628      	mov	r0, r5
   24b80:	f7ff ff22 	bl	249c8 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   24b84:	4620      	mov	r0, r4
   24b86:	22f0      	movs	r2, #240	; 0xf0
   24b88:	2100      	movs	r1, #0
   24b8a:	f7ff fcd9 	bl	24540 <_set>

	return TC_CRYPTO_SUCCESS;
   24b8e:	2001      	movs	r0, #1
}
   24b90:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24b92:	2000      	movs	r0, #0
   24b94:	e7fc      	b.n	24b90 <tc_hmac_final+0x46>
   24b96:	4610      	mov	r0, r2
   24b98:	e7fa      	b.n	24b90 <tc_hmac_final+0x46>

00024b9a <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   24b9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b9e:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   24ba0:	f04f 0b01 	mov.w	fp, #1
{
   24ba4:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   24ba6:	2300      	movs	r3, #0
{
   24ba8:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   24baa:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   24bae:	4631      	mov	r1, r6
{
   24bb0:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   24bb2:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   24bb4:	f88d 3006 	strb.w	r3, [sp, #6]
{
   24bb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   24bbc:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   24bc0:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   24bc4:	f7ff ff7a 	bl	24abc <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   24bc8:	4620      	mov	r0, r4
   24bca:	f7ff ffab 	bl	24b24 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   24bce:	2220      	movs	r2, #32
   24bd0:	4629      	mov	r1, r5
   24bd2:	4620      	mov	r0, r4
   24bd4:	f7ff ffb3 	bl	24b3e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   24bd8:	465a      	mov	r2, fp
   24bda:	4620      	mov	r0, r4
   24bdc:	f10d 0106 	add.w	r1, sp, #6
   24be0:	f7ff ffad 	bl	24b3e <tc_hmac_update>

	if (data && datalen)
   24be4:	f1b8 0f00 	cmp.w	r8, #0
   24be8:	d007      	beq.n	24bfa <update+0x60>
   24bea:	f1b9 0f00 	cmp.w	r9, #0
   24bee:	d004      	beq.n	24bfa <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   24bf0:	464a      	mov	r2, r9
   24bf2:	4641      	mov	r1, r8
   24bf4:	4620      	mov	r0, r4
   24bf6:	f7ff ffa2 	bl	24b3e <tc_hmac_update>
	if (additional_data && additional_datalen)
   24bfa:	b13f      	cbz	r7, 24c0c <update+0x72>
   24bfc:	f1ba 0f00 	cmp.w	sl, #0
   24c00:	d004      	beq.n	24c0c <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   24c02:	4652      	mov	r2, sl
   24c04:	4639      	mov	r1, r7
   24c06:	4620      	mov	r0, r4
   24c08:	f7ff ff99 	bl	24b3e <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   24c0c:	4622      	mov	r2, r4
   24c0e:	2120      	movs	r1, #32
   24c10:	4630      	mov	r0, r6
   24c12:	f7ff ff9a 	bl	24b4a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   24c16:	2220      	movs	r2, #32
   24c18:	4631      	mov	r1, r6
   24c1a:	4620      	mov	r0, r4
   24c1c:	f7ff ff4e 	bl	24abc <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   24c20:	4620      	mov	r0, r4
   24c22:	f7ff ff7f 	bl	24b24 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   24c26:	2220      	movs	r2, #32
   24c28:	4629      	mov	r1, r5
   24c2a:	4620      	mov	r0, r4
   24c2c:	f7ff ff87 	bl	24b3e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   24c30:	4622      	mov	r2, r4
   24c32:	2120      	movs	r1, #32
   24c34:	4628      	mov	r0, r5
   24c36:	f7ff ff88 	bl	24b4a <tc_hmac_final>

	if (data == 0 || datalen == 0)
   24c3a:	f1b8 0f00 	cmp.w	r8, #0
   24c3e:	d03a      	beq.n	24cb6 <update+0x11c>
   24c40:	f1b9 0f00 	cmp.w	r9, #0
   24c44:	d037      	beq.n	24cb6 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   24c46:	2220      	movs	r2, #32
   24c48:	4631      	mov	r1, r6
   24c4a:	4620      	mov	r0, r4
   24c4c:	f7ff ff36 	bl	24abc <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   24c50:	4620      	mov	r0, r4
   24c52:	f7ff ff67 	bl	24b24 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   24c56:	2220      	movs	r2, #32
   24c58:	4629      	mov	r1, r5
   24c5a:	4620      	mov	r0, r4
   24c5c:	f7ff ff6f 	bl	24b3e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   24c60:	2201      	movs	r2, #1
   24c62:	f10d 0107 	add.w	r1, sp, #7
   24c66:	4620      	mov	r0, r4
   24c68:	f7ff ff69 	bl	24b3e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   24c6c:	464a      	mov	r2, r9
   24c6e:	4641      	mov	r1, r8
   24c70:	4620      	mov	r0, r4
   24c72:	f7ff ff64 	bl	24b3e <tc_hmac_update>
	if (additional_data && additional_datalen)
   24c76:	b13f      	cbz	r7, 24c88 <update+0xee>
   24c78:	f1ba 0f00 	cmp.w	sl, #0
   24c7c:	d004      	beq.n	24c88 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   24c7e:	4652      	mov	r2, sl
   24c80:	4639      	mov	r1, r7
   24c82:	4620      	mov	r0, r4
   24c84:	f7ff ff5b 	bl	24b3e <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   24c88:	4622      	mov	r2, r4
   24c8a:	2120      	movs	r1, #32
   24c8c:	4630      	mov	r0, r6
   24c8e:	f7ff ff5c 	bl	24b4a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   24c92:	2220      	movs	r2, #32
   24c94:	4631      	mov	r1, r6
   24c96:	4620      	mov	r0, r4
   24c98:	f7ff ff10 	bl	24abc <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   24c9c:	4620      	mov	r0, r4
   24c9e:	f7ff ff41 	bl	24b24 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   24ca2:	2220      	movs	r2, #32
   24ca4:	4629      	mov	r1, r5
   24ca6:	4620      	mov	r0, r4
   24ca8:	f7ff ff49 	bl	24b3e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   24cac:	4622      	mov	r2, r4
   24cae:	2120      	movs	r1, #32
   24cb0:	4628      	mov	r0, r5
   24cb2:	f7ff ff4a 	bl	24b4a <tc_hmac_final>
}
   24cb6:	b003      	add	sp, #12
   24cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024cbc <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   24cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24cbe:	460c      	mov	r4, r1
   24cc0:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   24cc2:	4605      	mov	r5, r0
   24cc4:	b1b0      	cbz	r0, 24cf4 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   24cc6:	b1b9      	cbz	r1, 24cf8 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   24cc8:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   24cca:	2220      	movs	r2, #32
   24ccc:	2100      	movs	r1, #0
   24cce:	30f0      	adds	r0, #240	; 0xf0
   24cd0:	f7ff fc36 	bl	24540 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   24cd4:	2220      	movs	r2, #32
   24cd6:	2101      	movs	r1, #1
   24cd8:	f505 7088 	add.w	r0, r5, #272	; 0x110
   24cdc:	f7ff fc30 	bl	24540 <_set>
	update(prng, personalization, plen, 0, 0);
   24ce0:	4628      	mov	r0, r5
   24ce2:	4633      	mov	r3, r6
   24ce4:	463a      	mov	r2, r7
   24ce6:	4621      	mov	r1, r4
   24ce8:	9600      	str	r6, [sp, #0]
   24cea:	f7ff ff56 	bl	24b9a <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   24cee:	2001      	movs	r0, #1
	prng->countdown = 0;
   24cf0:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   24cf4:	b003      	add	sp, #12
   24cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   24cf8:	4608      	mov	r0, r1
   24cfa:	e7fb      	b.n	24cf4 <tc_hmac_prng_init+0x38>

00024cfc <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   24cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24cfe:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   24d00:	4605      	mov	r5, r0
   24d02:	b180      	cbz	r0, 24d26 <tc_hmac_prng_reseed+0x2a>
   24d04:	b179      	cbz	r1, 24d26 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   24d06:	2a1f      	cmp	r2, #31
   24d08:	d90d      	bls.n	24d26 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   24d0a:	b153      	cbz	r3, 24d22 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   24d0c:	b16c      	cbz	r4, 24d2a <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   24d0e:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   24d10:	f7ff ff43 	bl	24b9a <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   24d14:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   24d18:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   24d1a:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   24d1e:	b003      	add	sp, #12
   24d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   24d22:	9300      	str	r3, [sp, #0]
   24d24:	e7f4      	b.n	24d10 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   24d26:	2000      	movs	r0, #0
   24d28:	e7f9      	b.n	24d1e <tc_hmac_prng_reseed+0x22>
   24d2a:	4620      	mov	r0, r4
   24d2c:	e7f7      	b.n	24d1e <tc_hmac_prng_reseed+0x22>

00024d2e <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   24d2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24d32:	460d      	mov	r5, r1
   24d34:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   24d36:	4680      	mov	r8, r0
   24d38:	b3d8      	cbz	r0, 24db2 <tc_hmac_prng_generate+0x84>
   24d3a:	b3d2      	cbz	r2, 24db2 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   24d3c:	1e4b      	subs	r3, r1, #1
   24d3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   24d42:	d236      	bcs.n	24db2 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   24d44:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   24d48:	b3ab      	cbz	r3, 24db6 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   24d4a:	3b01      	subs	r3, #1
   24d4c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   24d50:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   24d54:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   24d58:	2220      	movs	r2, #32
   24d5a:	4649      	mov	r1, r9
   24d5c:	4620      	mov	r0, r4
   24d5e:	f7ff fead 	bl	24abc <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   24d62:	4620      	mov	r0, r4
   24d64:	f7ff fede 	bl	24b24 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   24d68:	2220      	movs	r2, #32
   24d6a:	4639      	mov	r1, r7
   24d6c:	4620      	mov	r0, r4
   24d6e:	f7ff fee6 	bl	24b3e <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   24d72:	4622      	mov	r2, r4
   24d74:	2120      	movs	r1, #32
   24d76:	4638      	mov	r0, r7
   24d78:	f7ff fee7 	bl	24b4a <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   24d7c:	2d20      	cmp	r5, #32
   24d7e:	462e      	mov	r6, r5
   24d80:	bf28      	it	cs
   24d82:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   24d84:	4640      	mov	r0, r8
   24d86:	4633      	mov	r3, r6
   24d88:	463a      	mov	r2, r7
   24d8a:	4631      	mov	r1, r6
   24d8c:	f7ff fbcb 	bl	24526 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   24d90:	2d20      	cmp	r5, #32
   24d92:	bf38      	it	cc
   24d94:	2520      	movcc	r5, #32
	while (outlen != 0) {
   24d96:	3d20      	subs	r5, #32
		out += bufferlen;
   24d98:	44b0      	add	r8, r6
	while (outlen != 0) {
   24d9a:	d1dd      	bne.n	24d58 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   24d9c:	4620      	mov	r0, r4
   24d9e:	462b      	mov	r3, r5
   24da0:	462a      	mov	r2, r5
   24da2:	4629      	mov	r1, r5
   24da4:	9500      	str	r5, [sp, #0]
   24da6:	f7ff fef8 	bl	24b9a <update>

	return TC_CRYPTO_SUCCESS;
   24daa:	2001      	movs	r0, #1
}
   24dac:	b003      	add	sp, #12
   24dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   24db2:	2000      	movs	r0, #0
   24db4:	e7fa      	b.n	24dac <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   24db6:	f04f 30ff 	mov.w	r0, #4294967295
   24dba:	e7f7      	b.n	24dac <tc_hmac_prng_generate+0x7e>

00024dbc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   24dbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   24dbe:	ab0b      	add	r3, sp, #44	; 0x2c
   24dc0:	9305      	str	r3, [sp, #20]
   24dc2:	9303      	str	r3, [sp, #12]
   24dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24dc6:	2201      	movs	r2, #1
   24dc8:	9302      	str	r3, [sp, #8]
   24dca:	2300      	movs	r3, #0
   24dcc:	4618      	mov	r0, r3
   24dce:	e9cd 3300 	strd	r3, r3, [sp]
   24dd2:	f7e9 f8eb 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   24dd6:	b007      	add	sp, #28
   24dd8:	f85d fb04 	ldr.w	pc, [sp], #4

00024ddc <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   24ddc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   24dde:	6800      	ldr	r0, [r0, #0]
   24de0:	f7ea bac8 	b.w	f374 <z_arm_fatal_error>

00024de4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24de4:	2100      	movs	r1, #0
   24de6:	2001      	movs	r0, #1
   24de8:	f7ea bac4 	b.w	f374 <z_arm_fatal_error>

00024dec <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   24dec:	b508      	push	{r3, lr}
	handler();
   24dee:	f7ea fb73 	bl	f4d8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24df6:	f7ea bc3d 	b.w	f674 <z_arm_exc_exit>

00024dfa <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   24dfa:	6e83      	ldr	r3, [r0, #104]	; 0x68
   24dfc:	f383 880b 	msr	PSPLIM, r3
}
   24e00:	4770      	bx	lr

00024e02 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   24e02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   24e04:	ab0b      	add	r3, sp, #44	; 0x2c
   24e06:	9305      	str	r3, [sp, #20]
   24e08:	9303      	str	r3, [sp, #12]
   24e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24e0c:	2201      	movs	r2, #1
   24e0e:	9302      	str	r3, [sp, #8]
   24e10:	2300      	movs	r3, #0
   24e12:	4618      	mov	r0, r3
   24e14:	e9cd 3300 	strd	r3, r3, [sp]
   24e18:	f7e9 f8c8 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   24e1c:	b007      	add	sp, #28
   24e1e:	f85d fb04 	ldr.w	pc, [sp], #4

00024e22 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   24e22:	4770      	bx	lr

00024e24 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   24e24:	4770      	bx	lr

00024e26 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   24e26:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   24e2a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   24e2e:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   24e30:	bf08      	it	eq
   24e32:	f06f 0015 	mvneq.w	r0, #21
   24e36:	4770      	bx	lr

00024e38 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   24e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   24e3a:	ab0b      	add	r3, sp, #44	; 0x2c
   24e3c:	9305      	str	r3, [sp, #20]
   24e3e:	9303      	str	r3, [sp, #12]
   24e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24e42:	2201      	movs	r2, #1
   24e44:	9302      	str	r3, [sp, #8]
   24e46:	2300      	movs	r3, #0
   24e48:	4618      	mov	r0, r3
   24e4a:	e9cd 3300 	strd	r3, r3, [sp]
   24e4e:	f7e9 f8ad 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   24e52:	b007      	add	sp, #28
   24e54:	f85d fb04 	ldr.w	pc, [sp], #4

00024e58 <mpu_configure_region>:
{
   24e58:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   24e5a:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   24e5c:	684b      	ldr	r3, [r1, #4]
{
   24e5e:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   24e60:	890a      	ldrh	r2, [r1, #8]
   24e62:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   24e64:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   24e66:	3b01      	subs	r3, #1
   24e68:	f024 041f 	bic.w	r4, r4, #31
   24e6c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   24e6e:	f002 021f 	and.w	r2, r2, #31
   24e72:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   24e76:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   24e7a:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   24e7c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   24e80:	9303      	str	r3, [sp, #12]
   24e82:	f7ea fffd 	bl	fe80 <region_allocate_and_init>
}
   24e86:	b005      	add	sp, #20
   24e88:	bd30      	pop	{r4, r5, pc}

00024e8a <_stdout_hook_default>:
}
   24e8a:	f04f 30ff 	mov.w	r0, #4294967295
   24e8e:	4770      	bx	lr

00024e90 <_stdin_hook_default>:
}
   24e90:	2000      	movs	r0, #0
   24e92:	4770      	bx	lr

00024e94 <_read>:
{
   24e94:	4608      	mov	r0, r1
   24e96:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   24e98:	f7eb b9f0 	b.w	1027c <z_impl_zephyr_read_stdin>

00024e9c <_write>:
{
   24e9c:	4608      	mov	r0, r1
   24e9e:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   24ea0:	f7eb ba00 	b.w	102a4 <z_impl_zephyr_write_stdout>

00024ea4 <_close>:
int _close(int file)
   24ea4:	f04f 30ff 	mov.w	r0, #4294967295
   24ea8:	4770      	bx	lr

00024eaa <_lseek>:
}
   24eaa:	2000      	movs	r0, #0
   24eac:	4770      	bx	lr

00024eae <_isatty>:
}
   24eae:	2802      	cmp	r0, #2
   24eb0:	bfcc      	ite	gt
   24eb2:	2000      	movgt	r0, #0
   24eb4:	2001      	movle	r0, #1
   24eb6:	4770      	bx	lr

00024eb8 <_kill>:
}
   24eb8:	2000      	movs	r0, #0
   24eba:	4770      	bx	lr

00024ebc <_getpid>:
}
   24ebc:	2000      	movs	r0, #0
   24ebe:	4770      	bx	lr

00024ec0 <_fstat>:
	st->st_mode = S_IFCHR;
   24ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   24ec4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   24ec6:	604b      	str	r3, [r1, #4]
}
   24ec8:	4770      	bx	lr

00024eca <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24eca:	f7f9 b9f5 	b.w	1e2b8 <z_impl_z_errno>

00024ece <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   24ece:	b530      	push	{r4, r5, lr}
   24ed0:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   24ed2:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   24ed6:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   24ed8:	794b      	ldrb	r3, [r1, #5]
   24eda:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   24ede:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   24ee0:	220d      	movs	r2, #13
   24ee2:	2100      	movs	r1, #0
   24ee4:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   24ee8:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   24eec:	f003 fc90 	bl	28810 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   24ef0:	aa02      	add	r2, sp, #8
   24ef2:	4611      	mov	r1, r2
   24ef4:	4628      	mov	r0, r5
   24ef6:	f000 fb46 	bl	25586 <bt_encrypt_le>
	if (err) {
   24efa:	b110      	cbz	r0, 24f02 <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   24efc:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   24efe:	b007      	add	sp, #28
   24f00:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   24f02:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   24f04:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   24f06:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   24f0a:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   24f0c:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   24f0e:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   24f10:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   24f14:	f003 fc45 	bl	287a2 <memcmp>
   24f18:	fab0 f080 	clz	r0, r0
   24f1c:	0940      	lsrs	r0, r0, #5
   24f1e:	e7ee      	b.n	24efe <bt_rpa_irk_matches+0x30>

00024f20 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24f20:	b510      	push	{r4, lr}
   24f22:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24f24:	7801      	ldrb	r1, [r0, #0]
   24f26:	7822      	ldrb	r2, [r4, #0]
{
   24f28:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24f2a:	428a      	cmp	r2, r1
   24f2c:	d00f      	beq.n	24f4e <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   24f2e:	4669      	mov	r1, sp
   24f30:	f7eb fada 	bl	104e8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24f34:	4620      	mov	r0, r4
   24f36:	a905      	add	r1, sp, #20
   24f38:	f7eb fad6 	bl	104e8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24f3c:	2210      	movs	r2, #16
   24f3e:	f10d 0115 	add.w	r1, sp, #21
   24f42:	f10d 0001 	add.w	r0, sp, #1
   24f46:	f003 fc2c 	bl	287a2 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   24f4a:	b00a      	add	sp, #40	; 0x28
   24f4c:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   24f4e:	2a01      	cmp	r2, #1
   24f50:	d006      	beq.n	24f60 <bt_uuid_cmp+0x40>
   24f52:	2a02      	cmp	r2, #2
   24f54:	d007      	beq.n	24f66 <bt_uuid_cmp+0x46>
   24f56:	b972      	cbnz	r2, 24f76 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24f58:	8840      	ldrh	r0, [r0, #2]
   24f5a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24f5c:	1ac0      	subs	r0, r0, r3
   24f5e:	e7f4      	b.n	24f4a <bt_uuid_cmp+0x2a>
   24f60:	6840      	ldr	r0, [r0, #4]
   24f62:	6863      	ldr	r3, [r4, #4]
   24f64:	e7fa      	b.n	24f5c <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24f66:	2210      	movs	r2, #16
   24f68:	1c61      	adds	r1, r4, #1
   24f6a:	3001      	adds	r0, #1
}
   24f6c:	b00a      	add	sp, #40	; 0x28
   24f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24f72:	f003 bc16 	b.w	287a2 <memcmp>
	switch (u1->type) {
   24f76:	f06f 0015 	mvn.w	r0, #21
   24f7a:	e7e6      	b.n	24f4a <bt_uuid_cmp+0x2a>

00024f7c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24f7c:	2a04      	cmp	r2, #4
   24f7e:	d00a      	beq.n	24f96 <bt_uuid_create+0x1a>
   24f80:	2a10      	cmp	r2, #16
   24f82:	d00d      	beq.n	24fa0 <bt_uuid_create+0x24>
   24f84:	2a02      	cmp	r2, #2
   24f86:	f04f 0300 	mov.w	r3, #0
   24f8a:	d115      	bne.n	24fb8 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   24f8c:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24f8e:	880b      	ldrh	r3, [r1, #0]
   24f90:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24f92:	2001      	movs	r0, #1
   24f94:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   24f96:	2301      	movs	r3, #1
   24f98:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24f9a:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24f9c:	6043      	str	r3, [r0, #4]
		break;
   24f9e:	e7f8      	b.n	24f92 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   24fa0:	2302      	movs	r3, #2
   24fa2:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24fa6:	f101 0310 	add.w	r3, r1, #16
   24faa:	f851 2b04 	ldr.w	r2, [r1], #4
   24fae:	4299      	cmp	r1, r3
   24fb0:	f840 2b04 	str.w	r2, [r0], #4
   24fb4:	d1f9      	bne.n	24faa <bt_uuid_create+0x2e>
   24fb6:	e7ec      	b.n	24f92 <bt_uuid_create+0x16>
	switch (data_len) {
   24fb8:	4618      	mov	r0, r3
}
   24fba:	4770      	bx	lr

00024fbc <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   24fbc:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   24fbe:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   24fc0:	2106      	movs	r1, #6
{
   24fc2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24fc4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24fc8:	f7ed fdbc 	bl	12b44 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   24fcc:	b918      	cbnz	r0, 24fd6 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   24fce:	79a3      	ldrb	r3, [r4, #6]
   24fd0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   24fd4:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   24fd6:	bd10      	pop	{r4, pc}

00024fd8 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   24fd8:	280f      	cmp	r0, #15
   24fda:	d807      	bhi.n	24fec <bt_hci_evt_get_flags+0x14>
   24fdc:	280d      	cmp	r0, #13
   24fde:	d80b      	bhi.n	24ff8 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   24fe0:	2805      	cmp	r0, #5
   24fe2:	bf08      	it	eq
   24fe4:	2003      	moveq	r0, #3
   24fe6:	bf18      	it	ne
   24fe8:	2002      	movne	r0, #2
   24fea:	4770      	bx	lr
	switch (evt) {
   24fec:	2813      	cmp	r0, #19
   24fee:	d003      	beq.n	24ff8 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   24ff0:	281a      	cmp	r0, #26
   24ff2:	bf08      	it	eq
   24ff4:	2001      	moveq	r0, #1
   24ff6:	e7f6      	b.n	24fe6 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   24ff8:	2001      	movs	r0, #1
	}
}
   24ffa:	4770      	bx	lr

00024ffc <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   24ffc:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   25000:	b183      	cbz	r3, 25024 <update_sec_level+0x28>
   25002:	7b5a      	ldrb	r2, [r3, #13]
   25004:	07d1      	lsls	r1, r2, #31
   25006:	d50d      	bpl.n	25024 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   25008:	06d2      	lsls	r2, r2, #27
   2500a:	d50d      	bpl.n	25028 <update_sec_level+0x2c>
   2500c:	7b1b      	ldrb	r3, [r3, #12]
   2500e:	2b10      	cmp	r3, #16
   25010:	bf14      	ite	ne
   25012:	2303      	movne	r3, #3
   25014:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   25016:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   25018:	7a80      	ldrb	r0, [r0, #10]
}
   2501a:	4298      	cmp	r0, r3
   2501c:	bf8c      	ite	hi
   2501e:	2000      	movhi	r0, #0
   25020:	2001      	movls	r0, #1
   25022:	4770      	bx	lr
   25024:	2302      	movs	r3, #2
   25026:	e7f6      	b.n	25016 <update_sec_level+0x1a>
   25028:	2303      	movs	r3, #3
   2502a:	e7f4      	b.n	25016 <update_sec_level+0x1a>

0002502c <hci_vendor_event>:
}
   2502c:	4770      	bx	lr

0002502e <atomic_or>:
{
   2502e:	4603      	mov	r3, r0
   25030:	b510      	push	{r4, lr}
}
   25032:	e8d3 0fef 	ldaex	r0, [r3]
   25036:	ea40 0201 	orr.w	r2, r0, r1
   2503a:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2503e:	2c00      	cmp	r4, #0
   25040:	d1f7      	bne.n	25032 <atomic_or+0x4>
   25042:	bd10      	pop	{r4, pc}

00025044 <bt_addr_copy>:
   25044:	680b      	ldr	r3, [r1, #0]
   25046:	6003      	str	r3, [r0, #0]
   25048:	888b      	ldrh	r3, [r1, #4]
   2504a:	8083      	strh	r3, [r0, #4]
}
   2504c:	4770      	bx	lr

0002504e <bt_addr_le_copy>:
   2504e:	680b      	ldr	r3, [r1, #0]
   25050:	6003      	str	r3, [r0, #0]
   25052:	888b      	ldrh	r3, [r1, #4]
   25054:	8083      	strh	r3, [r0, #4]
   25056:	798b      	ldrb	r3, [r1, #6]
   25058:	7183      	strb	r3, [r0, #6]
}
   2505a:	4770      	bx	lr

0002505c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2505c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2505e:	ab0b      	add	r3, sp, #44	; 0x2c
   25060:	9305      	str	r3, [sp, #20]
   25062:	9303      	str	r3, [sp, #12]
   25064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25066:	9302      	str	r3, [sp, #8]
   25068:	2300      	movs	r3, #0
   2506a:	4618      	mov	r0, r3
   2506c:	e9cd 3300 	strd	r3, r3, [sp]
   25070:	f7e8 ff9c 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   25074:	b007      	add	sp, #28
   25076:	f85d fb04 	ldr.w	pc, [sp], #4

0002507a <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2507a:	e8d0 3fef 	ldaex	r3, [r0]
   2507e:	400b      	ands	r3, r1
   25080:	e8c0 3fe2 	stlex	r2, r3, [r0]
   25084:	2a00      	cmp	r2, #0
   25086:	d1f8      	bne.n	2507a <atomic_and.isra.0>
}
   25088:	4770      	bx	lr

0002508a <sys_put_le64>:
	dst[1] = val >> 8;
   2508a:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2508e:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   25090:	2300      	movs	r3, #0
   25092:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   25094:	0e00      	lsrs	r0, r0, #24
   25096:	70d0      	strb	r0, [r2, #3]
   25098:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2509c:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2509e:	7093      	strb	r3, [r2, #2]
   250a0:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   250a2:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   250a4:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   250a6:	71d1      	strb	r1, [r2, #7]
}
   250a8:	4770      	bx	lr

000250aa <bt_hci_disconnect>:
{
   250aa:	b570      	push	{r4, r5, r6, lr}
   250ac:	4606      	mov	r6, r0
   250ae:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   250b0:	f240 4006 	movw	r0, #1030	; 0x406
   250b4:	2103      	movs	r1, #3
   250b6:	f7eb fead 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   250ba:	4604      	mov	r4, r0
   250bc:	b168      	cbz	r0, 250da <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   250be:	2103      	movs	r1, #3
   250c0:	300c      	adds	r0, #12
   250c2:	f7f3 fbe5 	bl	18890 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   250c6:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   250c8:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   250ca:	4621      	mov	r1, r4
}
   250cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   250d0:	2200      	movs	r2, #0
   250d2:	f240 4006 	movw	r0, #1030	; 0x406
   250d6:	f7eb beeb 	b.w	10eb0 <bt_hci_cmd_send_sync>
}
   250da:	f06f 0068 	mvn.w	r0, #104	; 0x68
   250de:	bd70      	pop	{r4, r5, r6, pc}

000250e0 <bt_le_set_data_len>:
{
   250e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   250e2:	4607      	mov	r7, r0
   250e4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   250e6:	f242 0022 	movw	r0, #8226	; 0x2022
   250ea:	2106      	movs	r1, #6
{
   250ec:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   250ee:	f7eb fe91 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   250f2:	4604      	mov	r4, r0
   250f4:	b178      	cbz	r0, 25116 <bt_le_set_data_len+0x36>
   250f6:	2106      	movs	r1, #6
   250f8:	300c      	adds	r0, #12
   250fa:	f7f3 fbc9 	bl	18890 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   250fe:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   25100:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   25102:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   25104:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   25106:	4621      	mov	r1, r4
}
   25108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2510c:	2200      	movs	r2, #0
   2510e:	f242 0022 	movw	r0, #8226	; 0x2022
   25112:	f7eb becd 	b.w	10eb0 <bt_hci_cmd_send_sync>
}
   25116:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2511a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002511c <bt_le_set_phy>:
{
   2511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25120:	4681      	mov	r9, r0
   25122:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   25124:	f242 0032 	movw	r0, #8242	; 0x2032
   25128:	2107      	movs	r1, #7
{
   2512a:	4617      	mov	r7, r2
   2512c:	461e      	mov	r6, r3
   2512e:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   25132:	f7eb fe6f 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   25136:	4605      	mov	r5, r0
   25138:	b1a0      	cbz	r0, 25164 <bt_le_set_phy+0x48>
   2513a:	2107      	movs	r1, #7
   2513c:	300c      	adds	r0, #12
   2513e:	f7f3 fba7 	bl	18890 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   25142:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   25146:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2514a:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2514c:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2514e:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   25150:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   25154:	4629      	mov	r1, r5
}
   25156:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2515a:	2200      	movs	r2, #0
   2515c:	f242 0032 	movw	r0, #8242	; 0x2032
   25160:	f7eb bea6 	b.w	10eb0 <bt_hci_cmd_send_sync>
}
   25164:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002516c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2516c:	68c0      	ldr	r0, [r0, #12]
   2516e:	f7eb bf69 	b.w	11044 <bt_hci_le_enh_conn_complete>

00025172 <bt_le_conn_params_valid>:
{
   25172:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   25174:	8803      	ldrh	r3, [r0, #0]
   25176:	8842      	ldrh	r2, [r0, #2]
   25178:	4293      	cmp	r3, r2
   2517a:	d819      	bhi.n	251b0 <bt_le_conn_params_valid+0x3e>
   2517c:	2b05      	cmp	r3, #5
   2517e:	d917      	bls.n	251b0 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   25180:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   25184:	d814      	bhi.n	251b0 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   25186:	8883      	ldrh	r3, [r0, #4]
   25188:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2518c:	d210      	bcs.n	251b0 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2518e:	f640 4476 	movw	r4, #3190	; 0xc76
   25192:	88c0      	ldrh	r0, [r0, #6]
   25194:	f1a0 010a 	sub.w	r1, r0, #10
   25198:	b289      	uxth	r1, r1
   2519a:	42a1      	cmp	r1, r4
   2519c:	d808      	bhi.n	251b0 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2519e:	3301      	adds	r3, #1
   251a0:	b29b      	uxth	r3, r3
   251a2:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   251a4:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   251a8:	bf34      	ite	cc
   251aa:	2001      	movcc	r0, #1
   251ac:	2000      	movcs	r0, #0
}
   251ae:	bd10      	pop	{r4, pc}
		return false;
   251b0:	2000      	movs	r0, #0
   251b2:	e7fc      	b.n	251ae <bt_le_conn_params_valid+0x3c>

000251b4 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   251b4:	f240 3041 	movw	r0, #833	; 0x341
   251b8:	4770      	bx	lr

000251ba <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   251ba:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   251bc:	f7f2 feba 	bl	17f34 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   251c0:	b118      	cbz	r0, 251ca <bt_addr_le_is_bonded+0x10>
   251c2:	89c0      	ldrh	r0, [r0, #14]
   251c4:	3800      	subs	r0, #0
   251c6:	bf18      	it	ne
   251c8:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   251ca:	bd08      	pop	{r3, pc}

000251cc <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   251cc:	2207      	movs	r2, #7
{
   251ce:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   251d0:	f003 fae7 	bl	287a2 <memcmp>
}
   251d4:	fab0 f080 	clz	r0, r0
   251d8:	0940      	lsrs	r0, r0, #5
   251da:	bd08      	pop	{r3, pc}

000251dc <bt_addr_copy>:
   251dc:	680b      	ldr	r3, [r1, #0]
   251de:	6003      	str	r3, [r0, #0]
   251e0:	888b      	ldrh	r3, [r1, #4]
   251e2:	8083      	strh	r3, [r0, #4]
}
   251e4:	4770      	bx	lr

000251e6 <bt_addr_le_copy>:
   251e6:	680b      	ldr	r3, [r1, #0]
   251e8:	6003      	str	r3, [r0, #0]
   251ea:	888b      	ldrh	r3, [r1, #4]
   251ec:	8083      	strh	r3, [r0, #4]
   251ee:	798b      	ldrb	r3, [r1, #6]
   251f0:	7183      	strb	r3, [r0, #6]
}
   251f2:	4770      	bx	lr

000251f4 <hci_id_add>:
{
   251f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   251f6:	460f      	mov	r7, r1
   251f8:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   251fa:	bb30      	cbnz	r0, 2524a <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   251fc:	2127      	movs	r1, #39	; 0x27
   251fe:	f242 0027 	movw	r0, #8231	; 0x2027
   25202:	f7eb fe07 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   25206:	4605      	mov	r5, r0
   25208:	b310      	cbz	r0, 25250 <hci_id_add+0x5c>
   2520a:	2127      	movs	r1, #39	; 0x27
   2520c:	300c      	adds	r0, #12
   2520e:	f7f3 fb3f 	bl	18890 <net_buf_simple_add>
   25212:	4622      	mov	r2, r4
   25214:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   25216:	4639      	mov	r1, r7
   25218:	f7ff ffe5 	bl	251e6 <bt_addr_le_copy>
   2521c:	1dc3      	adds	r3, r0, #7
   2521e:	f104 0110 	add.w	r1, r4, #16
   25222:	f852 0b04 	ldr.w	r0, [r2], #4
   25226:	428a      	cmp	r2, r1
   25228:	f843 0b04 	str.w	r0, [r3], #4
   2522c:	d1f9      	bne.n	25222 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   2522e:	2210      	movs	r2, #16
   25230:	2100      	movs	r1, #0
   25232:	f106 0017 	add.w	r0, r6, #23
   25236:	f003 faeb 	bl	28810 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2523a:	4629      	mov	r1, r5
}
   2523c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   25240:	2200      	movs	r2, #0
   25242:	f242 0027 	movw	r0, #8231	; 0x2027
   25246:	f7eb be33 	b.w	10eb0 <bt_hci_cmd_send_sync>
		return -EINVAL;
   2524a:	f06f 0015 	mvn.w	r0, #21
}
   2524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   25250:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25254:	e7fb      	b.n	2524e <hci_id_add+0x5a>

00025256 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   25256:	7a03      	ldrb	r3, [r0, #8]
{
   25258:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2525a:	075b      	lsls	r3, r3, #29
   2525c:	d505      	bpl.n	2526a <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2525e:	4601      	mov	r1, r0
   25260:	322a      	adds	r2, #42	; 0x2a
   25262:	f811 0b01 	ldrb.w	r0, [r1], #1
   25266:	f7ff bfc5 	b.w	251f4 <hci_id_add>
}
   2526a:	4770      	bx	lr

0002526c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2526c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2526e:	ab0b      	add	r3, sp, #44	; 0x2c
   25270:	9305      	str	r3, [sp, #20]
   25272:	9303      	str	r3, [sp, #12]
   25274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25276:	9302      	str	r3, [sp, #8]
   25278:	2300      	movs	r3, #0
   2527a:	4618      	mov	r0, r3
   2527c:	e9cd 3300 	strd	r3, r3, [sp]
   25280:	f7e8 fe94 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   25284:	b007      	add	sp, #28
   25286:	f85d fb04 	ldr.w	pc, [sp], #4

0002528a <addr_res_enable>:
{
   2528a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2528c:	2101      	movs	r1, #1
{
   2528e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   25290:	f242 002d 	movw	r0, #8237	; 0x202d
   25294:	f7eb fdbe 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   25298:	4604      	mov	r4, r0
   2529a:	b158      	cbz	r0, 252b4 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2529c:	4629      	mov	r1, r5
   2529e:	300c      	adds	r0, #12
   252a0:	f001 fd58 	bl	26d54 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   252a4:	4621      	mov	r1, r4
}
   252a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   252aa:	2200      	movs	r2, #0
   252ac:	f242 002d 	movw	r0, #8237	; 0x202d
   252b0:	f7eb bdfe 	b.w	10eb0 <bt_hci_cmd_send_sync>
}
   252b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   252b8:	bd38      	pop	{r3, r4, r5, pc}

000252ba <adv_unpause_enabled>:
{
   252ba:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   252bc:	f100 0310 	add.w	r3, r0, #16
   252c0:	e8d3 2fef 	ldaex	r2, [r3]
   252c4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   252c8:	e8c3 1fe4 	stlex	r4, r1, [r3]
   252cc:	2c00      	cmp	r4, #0
   252ce:	d1f7      	bne.n	252c0 <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   252d0:	0413      	lsls	r3, r2, #16
   252d2:	d503      	bpl.n	252dc <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   252d4:	2101      	movs	r1, #1
}
   252d6:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   252d8:	f000 b940 	b.w	2555c <bt_le_adv_set_enable>
}
   252dc:	bc10      	pop	{r4}
   252de:	4770      	bx	lr

000252e0 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   252e0:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   252e4:	e8d3 2faf 	lda	r2, [r3]
   252e8:	0612      	lsls	r2, r2, #24
   252ea:	d50a      	bpl.n	25302 <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   252ec:	e8d3 1fef 	ldaex	r1, [r3]
   252f0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   252f4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   252f8:	2a00      	cmp	r2, #0
   252fa:	d1f7      	bne.n	252ec <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   252fc:	2100      	movs	r1, #0
   252fe:	f000 b92d 	b.w	2555c <bt_le_adv_set_enable>
}
   25302:	4770      	bx	lr

00025304 <bt_lookup_id_addr>:
{
   25304:	b510      	push	{r4, lr}
   25306:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   25308:	b930      	cbnz	r0, 25318 <bt_lookup_id_addr+0x14>
   2530a:	b119      	cbz	r1, 25314 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2530c:	f7f2 fdba 	bl	17e84 <bt_keys_find_irk>
		if (keys) {
   25310:	b100      	cbz	r0, 25314 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   25312:	1c44      	adds	r4, r0, #1
}
   25314:	4620      	mov	r0, r4
   25316:	bd10      	pop	{r4, pc}
		return NULL;
   25318:	2400      	movs	r4, #0
   2531a:	e7fb      	b.n	25314 <bt_lookup_id_addr+0x10>

0002531c <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2531c:	b118      	cbz	r0, 25326 <bt_id_set_adv_random_addr+0xa>
   2531e:	b111      	cbz	r1, 25326 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   25320:	4608      	mov	r0, r1
   25322:	f7ec bca7 	b.w	11c74 <set_random_address>
}
   25326:	f06f 0015 	mvn.w	r0, #21
   2532a:	4770      	bx	lr

0002532c <bt_id_set_adv_private_addr>:
{
   2532c:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2532e:	4604      	mov	r4, r0
   25330:	b180      	cbz	r0, 25354 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   25332:	2106      	movs	r1, #6
   25334:	4668      	mov	r0, sp
   25336:	f7ed fc05 	bl	12b44 <bt_rand>
	if (err) {
   2533a:	b948      	cbnz	r0, 25350 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   2533c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   25340:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   25342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   25346:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   25348:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2534c:	f7ff ffe6 	bl	2531c <bt_id_set_adv_random_addr>
}
   25350:	b002      	add	sp, #8
   25352:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25354:	f06f 0015 	mvn.w	r0, #21
   25358:	e7fa      	b.n	25350 <bt_id_set_adv_private_addr+0x24>

0002535a <bt_id_adv_random_addr_check>:
}
   2535a:	3800      	subs	r0, #0
   2535c:	bf18      	it	ne
   2535e:	2001      	movne	r0, #1
   25360:	4770      	bx	lr

00025362 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   25362:	7a03      	ldrb	r3, [r0, #8]
   25364:	07d9      	lsls	r1, r3, #31
   25366:	d504      	bpl.n	25372 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   25368:	f023 0301 	bic.w	r3, r3, #1
   2536c:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2536e:	f7ec bd39 	b.w	11de4 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   25372:	0799      	lsls	r1, r3, #30
   25374:	d504      	bpl.n	25380 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   25376:	f023 0302 	bic.w	r3, r3, #2
   2537a:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2537c:	f7ec bdfe 	b.w	11f7c <bt_id_del>
}
   25380:	4770      	bx	lr

00025382 <get_adv_channel_map>:
{
   25382:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   25384:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   25388:	bf0c      	ite	eq
   2538a:	2007      	moveq	r0, #7
   2538c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2538e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   25390:	bf48      	it	mi
   25392:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   25396:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   25398:	bf48      	it	mi
   2539a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2539e:	4770      	bx	lr

000253a0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   253a0:	e8d0 0faf 	lda	r0, [r0]
}
   253a4:	4770      	bx	lr

000253a6 <atomic_and>:
{
   253a6:	4603      	mov	r3, r0
   253a8:	b510      	push	{r4, lr}
}
   253aa:	e8d3 0fef 	ldaex	r0, [r3]
   253ae:	ea00 0201 	and.w	r2, r0, r1
   253b2:	e8c3 2fe4 	stlex	r4, r2, [r3]
   253b6:	2c00      	cmp	r4, #0
   253b8:	d1f7      	bne.n	253aa <atomic_and+0x4>
   253ba:	bd10      	pop	{r4, pc}

000253bc <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   253bc:	680b      	ldr	r3, [r1, #0]
   253be:	6003      	str	r3, [r0, #0]
   253c0:	888b      	ldrh	r3, [r1, #4]
   253c2:	8083      	strh	r3, [r0, #4]
   253c4:	798b      	ldrb	r3, [r1, #6]
   253c6:	7183      	strb	r3, [r0, #6]
   253c8:	4770      	bx	lr

000253ca <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   253ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   253cc:	ab0b      	add	r3, sp, #44	; 0x2c
   253ce:	9305      	str	r3, [sp, #20]
   253d0:	9303      	str	r3, [sp, #12]
   253d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   253d4:	9302      	str	r3, [sp, #8]
   253d6:	2300      	movs	r3, #0
   253d8:	4618      	mov	r0, r3
   253da:	e9cd 3300 	strd	r3, r3, [sp]
   253de:	f7e8 fde5 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   253e2:	b007      	add	sp, #28
   253e4:	f85d fb04 	ldr.w	pc, [sp], #4

000253e8 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   253e8:	2301      	movs	r3, #1
{
   253ea:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   253ec:	fa03 f101 	lsl.w	r1, r3, r1
{
   253f0:	4604      	mov	r4, r0
	if (val) {
   253f2:	b142      	cbz	r2, 25406 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   253f4:	e8d4 3fef 	ldaex	r3, [r4]
   253f8:	430b      	orrs	r3, r1
   253fa:	e8c4 3fe2 	stlex	r2, r3, [r4]
   253fe:	2a00      	cmp	r2, #0
   25400:	d1f8      	bne.n	253f4 <atomic_set_bit_to+0xc>
	}
}
   25402:	bc10      	pop	{r4}
   25404:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25406:	43c9      	mvns	r1, r1
}
   25408:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2540a:	f7ff bfcc 	b.w	253a6 <atomic_and>

0002540e <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2540e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25412:	b087      	sub	sp, #28
   25414:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   25418:	4605      	mov	r5, r0
   2541a:	460c      	mov	r4, r1
   2541c:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2541e:	2100      	movs	r1, #0
   25420:	2210      	movs	r2, #16
   25422:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   25424:	461f      	mov	r7, r3
   25426:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2542a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   2542e:	f003 f9ef 	bl	28810 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   25432:	b9ce      	cbnz	r6, 25468 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   25434:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   25438:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2543a:	f242 0008 	movw	r0, #8200	; 0x2008
   2543e:	a902      	add	r1, sp, #8
   25440:	f7ed f80a 	bl	12458 <hci_set_ad>
		if (err) {
   25444:	4604      	mov	r4, r0
   25446:	b958      	cbnz	r0, 25460 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   25448:	f1ba 0f00 	cmp.w	sl, #0
   2544c:	d13a      	bne.n	254c4 <le_adv_update.constprop.0+0xb6>
   2544e:	3510      	adds	r5, #16
   25450:	e8d5 3fef 	ldaex	r3, [r5]
   25454:	f043 0304 	orr.w	r3, r3, #4
   25458:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2545c:	2a00      	cmp	r2, #0
   2545e:	d1f7      	bne.n	25450 <le_adv_update.constprop.0+0x42>
}
   25460:	4620      	mov	r0, r4
   25462:	b007      	add	sp, #28
   25464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   25468:	f7ec fbba 	bl	11be0 <bt_get_name>
   2546c:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2546e:	b9e4      	cbnz	r4, 254aa <le_adv_update.constprop.0+0x9c>
   25470:	bb37      	cbnz	r7, 254c0 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   25472:	4658      	mov	r0, fp
   25474:	f7e3 ff74 	bl	9360 <strlen>
   25478:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2547a:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2547c:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   25480:	f88d 3000 	strb.w	r3, [sp]
   25484:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   25488:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2548c:	d1d4      	bne.n	25438 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   2548e:	2202      	movs	r2, #2
			d[1].data = &data;
   25490:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   25494:	9605      	str	r6, [sp, #20]
			d_len = 2;
   25496:	e7d0      	b.n	2543a <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   25498:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2549c:	3a08      	subs	r2, #8
   2549e:	2a01      	cmp	r2, #1
   254a0:	d924      	bls.n	254ec <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   254a2:	3301      	adds	r3, #1
   254a4:	4598      	cmp	r8, r3
   254a6:	d1f7      	bne.n	25498 <le_adv_update.constprop.0+0x8a>
   254a8:	e7e2      	b.n	25470 <le_adv_update.constprop.0+0x62>
   254aa:	2300      	movs	r3, #0
   254ac:	e7fa      	b.n	254a4 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   254ae:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   254b2:	3a08      	subs	r2, #8
   254b4:	2a01      	cmp	r2, #1
   254b6:	d919      	bls.n	254ec <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   254b8:	3301      	adds	r3, #1
   254ba:	4599      	cmp	r9, r3
   254bc:	d1f7      	bne.n	254ae <le_adv_update.constprop.0+0xa0>
   254be:	e7d8      	b.n	25472 <le_adv_update.constprop.0+0x64>
   254c0:	2300      	movs	r3, #0
   254c2:	e7fa      	b.n	254ba <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   254c4:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   254c6:	2e02      	cmp	r6, #2
			d[1].len = 1;
   254c8:	bf08      	it	eq
   254ca:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   254cc:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   254d0:	bf08      	it	eq
   254d2:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   254d4:	a902      	add	r1, sp, #8
			d[1].data = &data;
   254d6:	bf08      	it	eq
   254d8:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   254dc:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   254e0:	f7ec ffba 	bl	12458 <hci_set_ad>
		if (err) {
   254e4:	2800      	cmp	r0, #0
   254e6:	d0b2      	beq.n	2544e <le_adv_update.constprop.0+0x40>
   254e8:	4604      	mov	r4, r0
   254ea:	e7b9      	b.n	25460 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   254ec:	f06f 0415 	mvn.w	r4, #21
   254f0:	e7b6      	b.n	25460 <le_adv_update.constprop.0+0x52>

000254f2 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   254f2:	6843      	ldr	r3, [r0, #4]
   254f4:	f013 0008 	ands.w	r0, r3, #8
   254f8:	d00a      	beq.n	25510 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   254fa:	035a      	lsls	r2, r3, #13
   254fc:	d407      	bmi.n	2550e <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   254fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   25502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   25506:	bf14      	ite	ne
   25508:	2002      	movne	r0, #2
   2550a:	2001      	moveq	r0, #1
   2550c:	4770      	bx	lr
   2550e:	2001      	movs	r0, #1
}
   25510:	4770      	bx	lr

00025512 <bt_le_adv_set_enable_legacy>:
{
   25512:	b570      	push	{r4, r5, r6, lr}
   25514:	4606      	mov	r6, r0
   25516:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   25518:	f242 000a 	movw	r0, #8202	; 0x200a
   2551c:	2101      	movs	r1, #1
{
   2551e:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   25520:	f7eb fc78 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   25524:	4604      	mov	r4, r0
   25526:	b1b0      	cbz	r0, 25556 <bt_le_adv_set_enable_legacy+0x44>
   25528:	300c      	adds	r0, #12
	if (enable) {
   2552a:	b195      	cbz	r5, 25552 <bt_le_adv_set_enable_legacy+0x40>
   2552c:	2101      	movs	r1, #1
   2552e:	f001 fc11 	bl	26d54 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   25532:	4620      	mov	r0, r4
   25534:	f106 0210 	add.w	r2, r6, #16
   25538:	a903      	add	r1, sp, #12
   2553a:	2307      	movs	r3, #7
   2553c:	9500      	str	r5, [sp, #0]
   2553e:	f7eb fc57 	bl	10df0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   25542:	2200      	movs	r2, #0
   25544:	4621      	mov	r1, r4
   25546:	f242 000a 	movw	r0, #8202	; 0x200a
   2554a:	f7eb fcb1 	bl	10eb0 <bt_hci_cmd_send_sync>
}
   2554e:	b006      	add	sp, #24
   25550:	bd70      	pop	{r4, r5, r6, pc}
   25552:	4629      	mov	r1, r5
   25554:	e7eb      	b.n	2552e <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   25556:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2555a:	e7f8      	b.n	2554e <bt_le_adv_set_enable_legacy+0x3c>

0002555c <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2555c:	f7ff bfd9 	b.w	25512 <bt_le_adv_set_enable_legacy>

00025560 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   25560:	3018      	adds	r0, #24
   25562:	f7fa bba1 	b.w	1fca8 <k_work_cancel_delayable>

00025566 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25566:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25568:	ab0b      	add	r3, sp, #44	; 0x2c
   2556a:	9305      	str	r3, [sp, #20]
   2556c:	9303      	str	r3, [sp, #12]
   2556e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25570:	2201      	movs	r2, #1
   25572:	9302      	str	r3, [sp, #8]
   25574:	2300      	movs	r3, #0
   25576:	4618      	mov	r0, r3
   25578:	e9cd 3300 	strd	r3, r3, [sp]
   2557c:	f7e8 fd16 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   25580:	b007      	add	sp, #28
   25582:	f85d fb04 	ldr.w	pc, [sp], #4

00025586 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   25586:	b530      	push	{r4, r5, lr}
   25588:	460d      	mov	r5, r1
   2558a:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2558c:	4601      	mov	r1, r0
{
   2558e:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   25590:	b310      	cbz	r0, 255d8 <bt_encrypt_le+0x52>
   25592:	b30d      	cbz	r5, 255d8 <bt_encrypt_le+0x52>
   25594:	b302      	cbz	r2, 255d8 <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   25596:	4668      	mov	r0, sp
   25598:	f7ed fa82 	bl	12aa0 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   2559c:	4669      	mov	r1, sp
   2559e:	a804      	add	r0, sp, #16
   255a0:	f7e9 fd60 	bl	f064 <tc_aes128_set_encrypt_key>
   255a4:	b1c0      	cbz	r0, 255d8 <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   255a6:	4629      	mov	r1, r5
   255a8:	4668      	mov	r0, sp
   255aa:	f7ed fa79 	bl	12aa0 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   255ae:	4669      	mov	r1, sp
   255b0:	4620      	mov	r0, r4
   255b2:	aa04      	add	r2, sp, #16
   255b4:	f7ff f88e 	bl	246d4 <tc_aes_encrypt>
   255b8:	b170      	cbz	r0, 255d8 <bt_encrypt_le+0x52>
   255ba:	1e63      	subs	r3, r4, #1
   255bc:	f104 0210 	add.w	r2, r4, #16
   255c0:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   255c2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   255c6:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   255ca:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   255cc:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   255ce:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   255d0:	d1f7      	bne.n	255c2 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   255d2:	2000      	movs	r0, #0
}
   255d4:	b031      	add	sp, #196	; 0xc4
   255d6:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   255d8:	f06f 0015 	mvn.w	r0, #21
   255dc:	e7fa      	b.n	255d4 <bt_encrypt_le+0x4e>

000255de <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   255de:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   255e0:	ab0b      	add	r3, sp, #44	; 0x2c
   255e2:	9305      	str	r3, [sp, #20]
   255e4:	9303      	str	r3, [sp, #12]
   255e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   255e8:	9302      	str	r3, [sp, #8]
   255ea:	2300      	movs	r3, #0
   255ec:	4618      	mov	r0, r3
   255ee:	e9cd 3300 	strd	r3, r3, [sp]
   255f2:	f7e8 fcdb 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   255f6:	b007      	add	sp, #28
   255f8:	f85d fb04 	ldr.w	pc, [sp], #4

000255fc <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   255fc:	2200      	movs	r2, #0
	return list->head;
   255fe:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25600:	b90b      	cbnz	r3, 25606 <sys_slist_find_and_remove+0xa>
   25602:	4618      	mov	r0, r3
   25604:	4770      	bx	lr
   25606:	428b      	cmp	r3, r1
   25608:	d110      	bne.n	2562c <sys_slist_find_and_remove+0x30>
	return node->next;
   2560a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2560c:	b942      	cbnz	r2, 25620 <sys_slist_find_and_remove+0x24>
   2560e:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   25610:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25612:	4291      	cmp	r1, r2
   25614:	d100      	bne.n	25618 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   25616:	6043      	str	r3, [r0, #4]
	parent->next = child;
   25618:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2561a:	2001      	movs	r0, #1
	parent->next = child;
   2561c:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2561e:	4770      	bx	lr
	parent->next = child;
   25620:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25622:	6843      	ldr	r3, [r0, #4]
   25624:	4299      	cmp	r1, r3
	list->tail = node;
   25626:	bf08      	it	eq
   25628:	6042      	streq	r2, [r0, #4]
}
   2562a:	e7f5      	b.n	25618 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2562c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2562e:	681b      	ldr	r3, [r3, #0]
   25630:	e7e6      	b.n	25600 <sys_slist_find_and_remove+0x4>

00025632 <atomic_and>:
{
   25632:	4603      	mov	r3, r0
   25634:	b510      	push	{r4, lr}
}
   25636:	e8d3 0fef 	ldaex	r0, [r3]
   2563a:	ea00 0201 	and.w	r2, r0, r1
   2563e:	e8c3 2fe4 	stlex	r4, r2, [r3]
   25642:	2c00      	cmp	r4, #0
   25644:	d1f7      	bne.n	25636 <atomic_and+0x4>
   25646:	bd10      	pop	{r4, pc}

00025648 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2564a:	ab0b      	add	r3, sp, #44	; 0x2c
   2564c:	9305      	str	r3, [sp, #20]
   2564e:	9303      	str	r3, [sp, #12]
   25650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25652:	9302      	str	r3, [sp, #8]
   25654:	2300      	movs	r3, #0
   25656:	4618      	mov	r0, r3
   25658:	e9cd 3300 	strd	r3, r3, [sp]
   2565c:	f7e8 fca6 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   25660:	b007      	add	sp, #28
   25662:	f85d fb04 	ldr.w	pc, [sp], #4

00025666 <tx_complete_work>:
	tx_notify(conn);
   25666:	3828      	subs	r0, #40	; 0x28
   25668:	f7ed bbfc 	b.w	12e64 <tx_notify>

0002566c <bt_conn_reset_rx_state>:
{
   2566c:	b510      	push	{r4, lr}
   2566e:	4604      	mov	r4, r0
	if (!conn->rx) {
   25670:	6900      	ldr	r0, [r0, #16]
   25672:	b118      	cbz	r0, 2567c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   25674:	f7f2 ffea 	bl	1864c <net_buf_unref>
	conn->rx = NULL;
   25678:	2300      	movs	r3, #0
   2567a:	6123      	str	r3, [r4, #16]
}
   2567c:	bd10      	pop	{r4, pc}

0002567e <conn_lookup_handle>:
{
   2567e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25682:	4607      	mov	r7, r0
   25684:	460e      	mov	r6, r1
   25686:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   25688:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2568a:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2568e:	42b4      	cmp	r4, r6
   25690:	d103      	bne.n	2569a <conn_lookup_handle+0x1c>
	return NULL;
   25692:	2300      	movs	r3, #0
}
   25694:	4618      	mov	r0, r3
   25696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2569a:	fb09 7004 	mla	r0, r9, r4, r7
   2569e:	f7ed fe93 	bl	133c8 <bt_conn_ref>
   256a2:	4603      	mov	r3, r0
		if (!conn) {
   256a4:	b158      	cbz	r0, 256be <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   256a6:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   256a8:	2d01      	cmp	r5, #1
   256aa:	d002      	beq.n	256b2 <conn_lookup_handle+0x34>
   256ac:	3d07      	subs	r5, #7
   256ae:	2d01      	cmp	r5, #1
   256b0:	d803      	bhi.n	256ba <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   256b2:	881a      	ldrh	r2, [r3, #0]
   256b4:	4542      	cmp	r2, r8
   256b6:	d0ed      	beq.n	25694 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   256b8:	4618      	mov	r0, r3
   256ba:	f7ed fead 	bl	13418 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   256be:	3401      	adds	r4, #1
   256c0:	e7e5      	b.n	2568e <conn_lookup_handle+0x10>

000256c2 <bt_conn_connected>:
{
   256c2:	b510      	push	{r4, lr}
   256c4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   256c6:	f7ee fbe1 	bl	13e8c <bt_l2cap_connected>
	notify_connected(conn);
   256ca:	4620      	mov	r0, r4
}
   256cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   256d0:	f7ed bb92 	b.w	12df8 <notify_connected>

000256d4 <bt_conn_disconnect>:
{
   256d4:	b510      	push	{r4, lr}
	switch (conn->state) {
   256d6:	7b43      	ldrb	r3, [r0, #13]
{
   256d8:	4604      	mov	r4, r0
	switch (conn->state) {
   256da:	3b02      	subs	r3, #2
   256dc:	2b06      	cmp	r3, #6
   256de:	d816      	bhi.n	2570e <bt_conn_disconnect+0x3a>
   256e0:	e8df f003 	tbb	[pc, r3]
   256e4:	15151504 	.word	0x15151504
   256e8:	0b09      	.short	0x0b09
   256ea:	09          	.byte	0x09
   256eb:	00          	.byte	0x00
		conn->err = reason;
   256ec:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   256ee:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   256f0:	4620      	mov	r0, r4
   256f2:	f7ed fec9 	bl	13488 <bt_conn_set_state>
{
   256f6:	2000      	movs	r0, #0
}
   256f8:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   256fa:	8800      	ldrh	r0, [r0, #0]
   256fc:	f7ff fcd5 	bl	250aa <bt_hci_disconnect>
	if (err) {
   25700:	2800      	cmp	r0, #0
   25702:	d1f9      	bne.n	256f8 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   25704:	7b63      	ldrb	r3, [r4, #13]
   25706:	2b07      	cmp	r3, #7
   25708:	d1f5      	bne.n	256f6 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2570a:	2108      	movs	r1, #8
   2570c:	e7f0      	b.n	256f0 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2570e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25712:	e7f1      	b.n	256f8 <bt_conn_disconnect+0x24>

00025714 <bt_conn_set_security>:
{
   25714:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   25716:	7b43      	ldrb	r3, [r0, #13]
{
   25718:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2571a:	2b07      	cmp	r3, #7
{
   2571c:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2571e:	d122      	bne.n	25766 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   25720:	7a43      	ldrb	r3, [r0, #9]
   25722:	428b      	cmp	r3, r1
   25724:	d215      	bcs.n	25752 <bt_conn_set_security+0x3e>
   25726:	7a83      	ldrb	r3, [r0, #10]
   25728:	428b      	cmp	r3, r1
   2572a:	d212      	bcs.n	25752 <bt_conn_set_security+0x3e>
	if (val) {
   2572c:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2572e:	f100 0004 	add.w	r0, r0, #4
   25732:	d510      	bpl.n	25756 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25734:	e8d0 3fef 	ldaex	r3, [r0]
   25738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2573c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   25740:	2a00      	cmp	r2, #0
   25742:	d1f7      	bne.n	25734 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   25744:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   25748:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2574a:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2574c:	f7f1 fd3e 	bl	171cc <bt_smp_start_security>
	if (err) {
   25750:	b930      	cbnz	r0, 25760 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   25752:	2000      	movs	r0, #0
}
   25754:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25756:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2575a:	f7ff ff6a 	bl	25632 <atomic_and>
   2575e:	e7f1      	b.n	25744 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   25760:	7a63      	ldrb	r3, [r4, #9]
   25762:	72a3      	strb	r3, [r4, #10]
   25764:	e7f6      	b.n	25754 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   25766:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2576a:	e7f3      	b.n	25754 <bt_conn_set_security+0x40>

0002576c <bt_conn_get_security>:
}
   2576c:	7a40      	ldrb	r0, [r0, #9]
   2576e:	4770      	bx	lr

00025770 <bt_conn_is_peer_addr_le>:
{
   25770:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   25772:	7a03      	ldrb	r3, [r0, #8]
{
   25774:	4604      	mov	r4, r0
	if (id != conn->id) {
   25776:	428b      	cmp	r3, r1
{
   25778:	4615      	mov	r5, r2
	if (id != conn->id) {
   2577a:	d115      	bne.n	257a8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2577c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   25780:	2207      	movs	r2, #7
   25782:	4628      	mov	r0, r5
   25784:	f003 f80d 	bl	287a2 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   25788:	b180      	cbz	r0, 257ac <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2578a:	78e3      	ldrb	r3, [r4, #3]
   2578c:	2207      	movs	r2, #7
   2578e:	b943      	cbnz	r3, 257a2 <bt_conn_is_peer_addr_le+0x32>
   25790:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   25794:	4628      	mov	r0, r5
   25796:	f003 f804 	bl	287a2 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2579a:	fab0 f080 	clz	r0, r0
   2579e:	0940      	lsrs	r0, r0, #5
}
   257a0:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   257a2:	f104 0197 	add.w	r1, r4, #151	; 0x97
   257a6:	e7f5      	b.n	25794 <bt_conn_is_peer_addr_le+0x24>
		return false;
   257a8:	2000      	movs	r0, #0
   257aa:	e7f9      	b.n	257a0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   257ac:	2001      	movs	r0, #1
   257ae:	e7f7      	b.n	257a0 <bt_conn_is_peer_addr_le+0x30>

000257b0 <bt_conn_get_dst>:
}
   257b0:	3090      	adds	r0, #144	; 0x90
   257b2:	4770      	bx	lr

000257b4 <bt_conn_le_conn_update>:
{
   257b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   257b6:	4607      	mov	r7, r0
   257b8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   257ba:	f242 0013 	movw	r0, #8211	; 0x2013
   257be:	210e      	movs	r1, #14
   257c0:	f7eb fb28 	bl	10e14 <bt_hci_cmd_create>
	if (!buf) {
   257c4:	4606      	mov	r6, r0
   257c6:	b1d0      	cbz	r0, 257fe <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   257c8:	210e      	movs	r1, #14
   257ca:	300c      	adds	r0, #12
   257cc:	f7f3 f860 	bl	18890 <net_buf_simple_add>
   257d0:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   257d2:	220e      	movs	r2, #14
   257d4:	2100      	movs	r1, #0
   257d6:	f003 f81b 	bl	28810 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   257da:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   257dc:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   257de:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   257e0:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   257e2:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   257e4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   257e6:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   257e8:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   257ec:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   257ee:	88ab      	ldrh	r3, [r5, #4]
   257f0:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   257f2:	88eb      	ldrh	r3, [r5, #6]
   257f4:	8123      	strh	r3, [r4, #8]
}
   257f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   257fa:	f7eb bb59 	b.w	10eb0 <bt_hci_cmd_send_sync>
}
   257fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025804 <l2cap_connected>:
}
   25804:	4770      	bx	lr

00025806 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25806:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25808:	ab0b      	add	r3, sp, #44	; 0x2c
   2580a:	9305      	str	r3, [sp, #20]
   2580c:	9303      	str	r3, [sp, #12]
   2580e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25810:	9302      	str	r3, [sp, #8]
   25812:	2300      	movs	r3, #0
   25814:	4618      	mov	r0, r3
   25816:	e9cd 3300 	strd	r3, r3, [sp]
   2581a:	f7e8 fbc7 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   2581e:	b007      	add	sp, #28
   25820:	f85d fb04 	ldr.w	pc, [sp], #4

00025824 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   25824:	4770      	bx	lr

00025826 <bt_l2cap_chan_del>:
{
   25826:	b570      	push	{r4, r5, r6, lr}
   25828:	4604      	mov	r4, r0
	if (!chan->conn) {
   2582a:	e9d0 3500 	ldrd	r3, r5, [r0]
   2582e:	b123      	cbz	r3, 2583a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   25830:	686b      	ldr	r3, [r5, #4]
   25832:	b103      	cbz	r3, 25836 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   25834:	4798      	blx	r3
	chan->conn = NULL;
   25836:	2300      	movs	r3, #0
   25838:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2583a:	68e3      	ldr	r3, [r4, #12]
   2583c:	b10b      	cbz	r3, 25842 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2583e:	4620      	mov	r0, r4
   25840:	4798      	blx	r3
	if (ops->released) {
   25842:	6a2b      	ldr	r3, [r5, #32]
   25844:	b11b      	cbz	r3, 2584e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   25846:	4620      	mov	r0, r4
}
   25848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2584c:	4718      	bx	r3
}
   2584e:	bd70      	pop	{r4, r5, r6, pc}

00025850 <bt_l2cap_disconnected>:
{
   25850:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   25852:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25854:	b130      	cbz	r0, 25864 <bt_l2cap_disconnected+0x14>
	return node->next;
   25856:	f850 4908 	ldr.w	r4, [r0], #-8
   2585a:	b104      	cbz	r4, 2585e <bt_l2cap_disconnected+0xe>
   2585c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2585e:	f7ff ffe2 	bl	25826 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25862:	b904      	cbnz	r4, 25866 <bt_l2cap_disconnected+0x16>
}
   25864:	bd38      	pop	{r3, r4, r5, pc}
   25866:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25868:	b12d      	cbz	r5, 25876 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2586a:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2586c:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2586e:	f7ff ffda 	bl	25826 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25872:	462c      	mov	r4, r5
   25874:	e7f7      	b.n	25866 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   25876:	4620      	mov	r0, r4
}
   25878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2587c:	f7ff bfd3 	b.w	25826 <bt_l2cap_chan_del>

00025880 <bt_l2cap_security_changed>:
{
   25880:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   25882:	6d43      	ldr	r3, [r0, #84]	; 0x54
   25884:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25886:	b1bb      	cbz	r3, 258b8 <bt_l2cap_security_changed+0x38>
   25888:	4618      	mov	r0, r3
	return node->next;
   2588a:	f850 4908 	ldr.w	r4, [r0], #-8
   2588e:	b104      	cbz	r4, 25892 <bt_l2cap_security_changed+0x12>
   25890:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   25892:	f853 3c04 	ldr.w	r3, [r3, #-4]
   25896:	689b      	ldr	r3, [r3, #8]
   25898:	b10b      	cbz	r3, 2589e <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2589a:	4629      	mov	r1, r5
   2589c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2589e:	b15c      	cbz	r4, 258b8 <bt_l2cap_security_changed+0x38>
   258a0:	4620      	mov	r0, r4
   258a2:	68a4      	ldr	r4, [r4, #8]
   258a4:	6843      	ldr	r3, [r0, #4]
   258a6:	b124      	cbz	r4, 258b2 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   258a8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   258aa:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   258ac:	2b00      	cmp	r3, #0
   258ae:	d1f4      	bne.n	2589a <bt_l2cap_security_changed+0x1a>
   258b0:	e7f6      	b.n	258a0 <bt_l2cap_security_changed+0x20>
   258b2:	689b      	ldr	r3, [r3, #8]
   258b4:	2b00      	cmp	r3, #0
   258b6:	d1f0      	bne.n	2589a <bt_l2cap_security_changed+0x1a>
}
   258b8:	bd38      	pop	{r3, r4, r5, pc}

000258ba <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   258ba:	3104      	adds	r1, #4
   258bc:	f7ed beee 	b.w	1369c <bt_conn_create_pdu_timeout>

000258c0 <bt_l2cap_send_cb>:
{
   258c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   258c4:	4614      	mov	r4, r2
   258c6:	4605      	mov	r5, r0
   258c8:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   258ca:	f102 000c 	add.w	r0, r2, #12
   258ce:	2104      	movs	r1, #4
   258d0:	461e      	mov	r6, r3
   258d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   258d6:	f7f2 ff7f 	bl	187d8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   258da:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   258dc:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   258de:	3a04      	subs	r2, #4
   258e0:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   258e2:	4643      	mov	r3, r8
   258e4:	4632      	mov	r2, r6
   258e6:	4621      	mov	r1, r4
   258e8:	4628      	mov	r0, r5
}
   258ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   258ee:	f7ed bccb 	b.w	13288 <bt_conn_send_cb>

000258f2 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   258f2:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   258f4:	b128      	cbz	r0, 25902 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   258f6:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   258f8:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   258fa:	428b      	cmp	r3, r1
   258fc:	d001      	beq.n	25902 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   258fe:	6880      	ldr	r0, [r0, #8]
   25900:	e7f8      	b.n	258f4 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   25902:	4770      	bx	lr

00025904 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   25904:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25906:	b128      	cbz	r0, 25914 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   25908:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2590a:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2590c:	428b      	cmp	r3, r1
   2590e:	d001      	beq.n	25914 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   25910:	6880      	ldr	r0, [r0, #8]
   25912:	e7f8      	b.n	25906 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   25914:	4770      	bx	lr

00025916 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   25916:	4770      	bx	lr

00025918 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   25918:	4603      	mov	r3, r0
	return list->head;
   2591a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2591c:	b128      	cbz	r0, 2592a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2591e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   25920:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25922:	4288      	cmp	r0, r1
	list->head = node;
   25924:	601a      	str	r2, [r3, #0]
	list->tail = node;
   25926:	bf08      	it	eq
   25928:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2592a:	4770      	bx	lr

0002592c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2592c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2592e:	2000      	movs	r0, #0

	while (buf) {
   25930:	b903      	cbnz	r3, 25934 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   25932:	4770      	bx	lr
		bytes += buf->len;
   25934:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   25936:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   25938:	4410      	add	r0, r2
		buf = buf->frags;
   2593a:	e7f9      	b.n	25930 <net_buf_frags_len+0x4>

0002593c <attr_read_type_cb>:
{
   2593c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2593e:	68d4      	ldr	r4, [r2, #12]
   25940:	3102      	adds	r1, #2
   25942:	7823      	ldrb	r3, [r4, #0]
   25944:	b913      	cbnz	r3, 2594c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   25946:	7021      	strb	r1, [r4, #0]
	return true;
   25948:	2001      	movs	r0, #1
}
   2594a:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2594c:	428b      	cmp	r3, r1
   2594e:	d0fb      	beq.n	25948 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   25950:	8a03      	ldrh	r3, [r0, #16]
   25952:	3b02      	subs	r3, #2
   25954:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   25956:	2000      	movs	r0, #0
   25958:	6110      	str	r0, [r2, #16]
		return false;
   2595a:	e7f6      	b.n	2594a <attr_read_type_cb+0xe>

0002595c <att_prepare_write_req>:
}
   2595c:	2006      	movs	r0, #6
   2595e:	4770      	bx	lr

00025960 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25960:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25964:	4108      	asrs	r0, r1
}
   25966:	f000 0001 	and.w	r0, r0, #1
   2596a:	4770      	bx	lr

0002596c <write_cb>:
{
   2596c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2596e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   25970:	4601      	mov	r1, r0
{
   25972:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25974:	f44f 7295 	mov.w	r2, #298	; 0x12a
   25978:	6820      	ldr	r0, [r4, #0]
   2597a:	f000 fddc 	bl	26536 <bt_gatt_check_perm>
   2597e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   25980:	bb00      	cbnz	r0, 259c4 <write_cb+0x58>
	if (!data->req) {
   25982:	7a23      	ldrb	r3, [r4, #8]
   25984:	b1b3      	cbz	r3, 259b4 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   25986:	f1a3 0218 	sub.w	r2, r3, #24
   2598a:	4253      	negs	r3, r2
   2598c:	4153      	adcs	r3, r2
   2598e:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   25990:	9301      	str	r3, [sp, #4]
   25992:	8a63      	ldrh	r3, [r4, #18]
   25994:	4629      	mov	r1, r5
   25996:	9300      	str	r3, [sp, #0]
   25998:	68ae      	ldr	r6, [r5, #8]
   2599a:	8a23      	ldrh	r3, [r4, #16]
   2599c:	68e2      	ldr	r2, [r4, #12]
   2599e:	6820      	ldr	r0, [r4, #0]
   259a0:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   259a2:	2800      	cmp	r0, #0
   259a4:	db08      	blt.n	259b8 <write_cb+0x4c>
   259a6:	8a23      	ldrh	r3, [r4, #16]
   259a8:	4283      	cmp	r3, r0
   259aa:	d10e      	bne.n	259ca <write_cb+0x5e>
	data->err = 0U;
   259ac:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   259ae:	2001      	movs	r0, #1
	data->err = 0U;
   259b0:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   259b2:	e008      	b.n	259c6 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   259b4:	2302      	movs	r3, #2
   259b6:	e7eb      	b.n	25990 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   259b8:	f110 0fff 	cmn.w	r0, #255	; 0xff
   259bc:	d305      	bcc.n	259ca <write_cb+0x5e>
		return -err;
   259be:	4240      	negs	r0, r0
   259c0:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   259c2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   259c4:	2000      	movs	r0, #0
}
   259c6:	b002      	add	sp, #8
   259c8:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   259ca:	200e      	movs	r0, #14
   259cc:	e7f9      	b.n	259c2 <write_cb+0x56>

000259ce <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   259ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   259d0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   259d4:	2300      	movs	r3, #0
   259d6:	461a      	mov	r2, r3
   259d8:	9300      	str	r3, [sp, #0]
   259da:	f7ef ff47 	bl	1586c <bt_gatt_foreach_attr_type>
				  user_data);
}
   259de:	b005      	add	sp, #20
   259e0:	f85d fb04 	ldr.w	pc, [sp], #4

000259e4 <att_chan_mtu_updated>:
{
   259e4:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   259e6:	6805      	ldr	r5, [r0, #0]
	return list->head;
   259e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   259ea:	b352      	cbz	r2, 25a42 <att_chan_mtu_updated+0x5e>
	return node->next;
   259ec:	6813      	ldr	r3, [r2, #0]
   259ee:	b103      	cbz	r3, 259f2 <att_chan_mtu_updated+0xe>
   259f0:	3bf0      	subs	r3, #240	; 0xf0
   259f2:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   259f6:	2200      	movs	r2, #0
   259f8:	4611      	mov	r1, r2
   259fa:	e000      	b.n	259fe <att_chan_mtu_updated+0x1a>
   259fc:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   259fe:	4284      	cmp	r4, r0
   25a00:	d007      	beq.n	25a12 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25a02:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   25a04:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25a06:	42b1      	cmp	r1, r6
   25a08:	bf38      	it	cc
   25a0a:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   25a0c:	42a2      	cmp	r2, r4
   25a0e:	bf38      	it	cc
   25a10:	4622      	movcc	r2, r4
   25a12:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25a14:	b12b      	cbz	r3, 25a22 <att_chan_mtu_updated+0x3e>
   25a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   25a1a:	2b00      	cmp	r3, #0
   25a1c:	d1ee      	bne.n	259fc <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   25a1e:	4284      	cmp	r4, r0
   25a20:	d1ef      	bne.n	25a02 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25a22:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   25a24:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25a26:	428b      	cmp	r3, r1
   25a28:	d801      	bhi.n	25a2e <att_chan_mtu_updated+0x4a>
   25a2a:	4290      	cmp	r0, r2
   25a2c:	d90b      	bls.n	25a46 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25a2e:	4282      	cmp	r2, r0
   25a30:	bf38      	it	cc
   25a32:	4602      	movcc	r2, r0
   25a34:	4299      	cmp	r1, r3
   25a36:	6828      	ldr	r0, [r5, #0]
   25a38:	bf38      	it	cc
   25a3a:	4619      	movcc	r1, r3
}
   25a3c:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25a3e:	f7f0 bcb3 	b.w	163a8 <bt_gatt_att_max_mtu_changed>
   25a42:	4611      	mov	r1, r2
   25a44:	e7ed      	b.n	25a22 <att_chan_mtu_updated+0x3e>
}
   25a46:	bc70      	pop	{r4, r5, r6}
   25a48:	4770      	bx	lr

00025a4a <attr_read_group_cb>:
	if (!data->rsp->len) {
   25a4a:	68d0      	ldr	r0, [r2, #12]
   25a4c:	3104      	adds	r1, #4
   25a4e:	7803      	ldrb	r3, [r0, #0]
   25a50:	b913      	cbnz	r3, 25a58 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   25a52:	7001      	strb	r1, [r0, #0]
	return true;
   25a54:	2001      	movs	r0, #1
   25a56:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   25a58:	428b      	cmp	r3, r1
   25a5a:	d0fb      	beq.n	25a54 <attr_read_group_cb+0xa>
		data->group = NULL;
   25a5c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   25a5e:	6891      	ldr	r1, [r2, #8]
   25a60:	8a0b      	ldrh	r3, [r1, #16]
   25a62:	3b04      	subs	r3, #4
   25a64:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   25a66:	6110      	str	r0, [r2, #16]
}
   25a68:	4770      	bx	lr

00025a6a <find_info_cb>:
{
   25a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   25a6c:	6893      	ldr	r3, [r2, #8]
{
   25a6e:	4605      	mov	r5, r0
   25a70:	460f      	mov	r7, r1
   25a72:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   25a74:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   25a76:	b963      	cbnz	r3, 25a92 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   25a78:	6850      	ldr	r0, [r2, #4]
   25a7a:	2101      	movs	r1, #1
   25a7c:	300c      	adds	r0, #12
   25a7e:	f7f2 ff07 	bl	18890 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25a82:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25a84:	682b      	ldr	r3, [r5, #0]
   25a86:	781b      	ldrb	r3, [r3, #0]
   25a88:	2b00      	cmp	r3, #0
   25a8a:	bf14      	ite	ne
   25a8c:	2302      	movne	r3, #2
   25a8e:	2301      	moveq	r3, #1
   25a90:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   25a92:	68a3      	ldr	r3, [r4, #8]
   25a94:	781b      	ldrb	r3, [r3, #0]
   25a96:	2b01      	cmp	r3, #1
   25a98:	d003      	beq.n	25aa2 <find_info_cb+0x38>
   25a9a:	2b02      	cmp	r3, #2
   25a9c:	d019      	beq.n	25ad2 <find_info_cb+0x68>
   25a9e:	2000      	movs	r0, #0
   25aa0:	e016      	b.n	25ad0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   25aa2:	682b      	ldr	r3, [r5, #0]
   25aa4:	781b      	ldrb	r3, [r3, #0]
   25aa6:	2b00      	cmp	r3, #0
   25aa8:	d1f9      	bne.n	25a9e <find_info_cb+0x34>
   25aaa:	6860      	ldr	r0, [r4, #4]
   25aac:	2104      	movs	r1, #4
   25aae:	300c      	adds	r0, #12
   25ab0:	f7f2 feee 	bl	18890 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25ab4:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   25ab6:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25ab8:	682a      	ldr	r2, [r5, #0]
   25aba:	68e3      	ldr	r3, [r4, #12]
   25abc:	8852      	ldrh	r2, [r2, #2]
   25abe:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   25ac0:	6863      	ldr	r3, [r4, #4]
   25ac2:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   25ac4:	8a1b      	ldrh	r3, [r3, #16]
   25ac6:	1ac0      	subs	r0, r0, r3
   25ac8:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   25aca:	bf94      	ite	ls
   25acc:	2000      	movls	r0, #0
   25ace:	2001      	movhi	r0, #1
}
   25ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25ad2:	682b      	ldr	r3, [r5, #0]
   25ad4:	781b      	ldrb	r3, [r3, #0]
   25ad6:	2b02      	cmp	r3, #2
   25ad8:	d1e1      	bne.n	25a9e <find_info_cb+0x34>
   25ada:	6860      	ldr	r0, [r4, #4]
   25adc:	2112      	movs	r1, #18
   25ade:	300c      	adds	r0, #12
   25ae0:	f7f2 fed6 	bl	18890 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25ae4:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   25ae6:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25ae8:	682b      	ldr	r3, [r5, #0]
   25aea:	68e2      	ldr	r2, [r4, #12]
   25aec:	1c59      	adds	r1, r3, #1
   25aee:	3202      	adds	r2, #2
   25af0:	3311      	adds	r3, #17
   25af2:	f851 0b04 	ldr.w	r0, [r1], #4
   25af6:	4299      	cmp	r1, r3
   25af8:	f842 0b04 	str.w	r0, [r2], #4
   25afc:	d1f9      	bne.n	25af2 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   25afe:	6863      	ldr	r3, [r4, #4]
   25b00:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   25b02:	8a1b      	ldrh	r3, [r3, #16]
   25b04:	1ac0      	subs	r0, r0, r3
   25b06:	2812      	cmp	r0, #18
   25b08:	e7df      	b.n	25aca <find_info_cb+0x60>

00025b0a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25b0a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25b0c:	ab0b      	add	r3, sp, #44	; 0x2c
   25b0e:	9305      	str	r3, [sp, #20]
   25b10:	9303      	str	r3, [sp, #12]
   25b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25b14:	9302      	str	r3, [sp, #8]
   25b16:	2300      	movs	r3, #0
   25b18:	4618      	mov	r0, r3
   25b1a:	e9cd 3300 	strd	r3, r3, [sp]
   25b1e:	f7e8 fa45 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   25b22:	b007      	add	sp, #28
   25b24:	f85d fb04 	ldr.w	pc, [sp], #4

00025b28 <chan_req_send>:
{
   25b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b2a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25b2c:	6888      	ldr	r0, [r1, #8]
   25b2e:	f7ff fefd 	bl	2592c <net_buf_frags_len>
   25b32:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   25b34:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25b36:	4283      	cmp	r3, r0
   25b38:	d30d      	bcc.n	25b56 <chan_req_send+0x2e>
	req->buf = NULL;
   25b3a:	2600      	movs	r6, #0
	chan->req = req;
   25b3c:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   25b40:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   25b42:	4628      	mov	r0, r5
	req->buf = NULL;
   25b44:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   25b46:	4639      	mov	r1, r7
   25b48:	f7ee fbe8 	bl	1431c <chan_send>
	if (err) {
   25b4c:	b110      	cbz	r0, 25b54 <chan_req_send+0x2c>
		req->buf = buf;
   25b4e:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   25b50:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   25b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   25b56:	f06f 0079 	mvn.w	r0, #121	; 0x79
   25b5a:	e7fb      	b.n	25b54 <chan_req_send+0x2c>

00025b5c <process_queue>:
{
   25b5c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   25b5e:	2200      	movs	r2, #0
{
   25b60:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   25b62:	2300      	movs	r3, #0
   25b64:	4608      	mov	r0, r1
{
   25b66:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   25b68:	f001 f8cb 	bl	26d02 <net_buf_get>
	if (buf) {
   25b6c:	4605      	mov	r5, r0
   25b6e:	b158      	cbz	r0, 25b88 <process_queue+0x2c>
	return chan_send(chan, buf);
   25b70:	4601      	mov	r1, r0
   25b72:	4620      	mov	r0, r4
   25b74:	f7ee fbd2 	bl	1431c <chan_send>
		if (err) {
   25b78:	4604      	mov	r4, r0
   25b7a:	b118      	cbz	r0, 25b84 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   25b7c:	4629      	mov	r1, r5
   25b7e:	4630      	mov	r0, r6
   25b80:	f002 fc61 	bl	28446 <k_queue_prepend>
}
   25b84:	4620      	mov	r0, r4
   25b86:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   25b88:	f06f 0401 	mvn.w	r4, #1
   25b8c:	e7fa      	b.n	25b84 <process_queue+0x28>

00025b8e <bt_att_chan_send_rsp>:
{
   25b8e:	b538      	push	{r3, r4, r5, lr}
   25b90:	4604      	mov	r4, r0
   25b92:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   25b94:	f7ee fbc2 	bl	1431c <chan_send>
	if (err) {
   25b98:	b130      	cbz	r0, 25ba8 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   25b9a:	4629      	mov	r1, r5
   25b9c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   25ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   25ba4:	f7f2 bd2c 	b.w	18600 <net_buf_put>
}
   25ba8:	bd38      	pop	{r3, r4, r5, pc}

00025baa <att_chan_read>:
{
   25baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25bae:	4680      	mov	r8, r0
   25bb0:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25bb2:	4610      	mov	r0, r2
{
   25bb4:	4699      	mov	r9, r3
   25bb6:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25bb8:	f7ff feb8 	bl	2592c <net_buf_frags_len>
   25bbc:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   25bc0:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25bc2:	4283      	cmp	r3, r0
   25bc4:	d97a      	bls.n	25cbc <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   25bc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   25bca:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   25bcc:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   25bce:	f7f2 fd99 	bl	18704 <net_buf_frag_last>
	size_t len, total = 0;
   25bd2:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   25bd6:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25bd8:	4630      	mov	r0, r6
   25bda:	f7ff fea7 	bl	2592c <net_buf_frags_len>
   25bde:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   25be2:	f105 070c 	add.w	r7, r5, #12
   25be6:	1a24      	subs	r4, r4, r0
   25be8:	4638      	mov	r0, r7
   25bea:	f001 f89f 	bl	26d2c <net_buf_simple_tailroom>
   25bee:	4284      	cmp	r4, r0
   25bf0:	d211      	bcs.n	25c16 <att_chan_read+0x6c>
   25bf2:	4630      	mov	r0, r6
   25bf4:	f7ff fe9a 	bl	2592c <net_buf_frags_len>
   25bf8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   25bfc:	1a24      	subs	r4, r4, r0
		if (!len) {
   25bfe:	bb34      	cbnz	r4, 25c4e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   25c00:	7ab0      	ldrb	r0, [r6, #10]
   25c02:	f7f2 fae9 	bl	181d8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   25c06:	2200      	movs	r2, #0
   25c08:	2300      	movs	r3, #0
   25c0a:	f001 f875 	bl	26cf8 <net_buf_alloc_fixed>
			if (!frag) {
   25c0e:	4605      	mov	r5, r0
   25c10:	b930      	cbnz	r0, 25c20 <att_chan_read+0x76>
	return total;
   25c12:	4657      	mov	r7, sl
   25c14:	e02c      	b.n	25c70 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   25c16:	4638      	mov	r0, r7
   25c18:	f001 f888 	bl	26d2c <net_buf_simple_tailroom>
   25c1c:	4604      	mov	r4, r0
   25c1e:	e7ee      	b.n	25bfe <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   25c20:	4601      	mov	r1, r0
   25c22:	4630      	mov	r0, r6
   25c24:	f7f2 fdb4 	bl	18790 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25c28:	4630      	mov	r0, r6
   25c2a:	f7ff fe7f 	bl	2592c <net_buf_frags_len>
   25c2e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   25c32:	f105 070c 	add.w	r7, r5, #12
   25c36:	1a24      	subs	r4, r4, r0
   25c38:	4638      	mov	r0, r7
   25c3a:	f001 f877 	bl	26d2c <net_buf_simple_tailroom>
   25c3e:	4284      	cmp	r4, r0
   25c40:	d21a      	bcs.n	25c78 <att_chan_read+0xce>
   25c42:	4630      	mov	r0, r6
   25c44:	f7ff fe72 	bl	2592c <net_buf_frags_len>
   25c48:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   25c4c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   25c4e:	68e9      	ldr	r1, [r5, #12]
   25c50:	8a2a      	ldrh	r2, [r5, #16]
   25c52:	f8cd 9000 	str.w	r9, [sp]
   25c56:	f8db 7004 	ldr.w	r7, [fp, #4]
   25c5a:	440a      	add	r2, r1
   25c5c:	9803      	ldr	r0, [sp, #12]
   25c5e:	4659      	mov	r1, fp
   25c60:	b2a3      	uxth	r3, r4
   25c62:	47b8      	blx	r7
		if (read < 0) {
   25c64:	1e07      	subs	r7, r0, #0
   25c66:	da0c      	bge.n	25c82 <att_chan_read+0xd8>
				return total;
   25c68:	f1ba 0f00 	cmp.w	sl, #0
   25c6c:	bf18      	it	ne
   25c6e:	4657      	movne	r7, sl
}
   25c70:	4638      	mov	r0, r7
   25c72:	b005      	add	sp, #20
   25c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c78:	4638      	mov	r0, r7
   25c7a:	f001 f857 	bl	26d2c <net_buf_simple_tailroom>
   25c7e:	4604      	mov	r4, r0
   25c80:	e7e5      	b.n	25c4e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   25c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25c84:	b993      	cbnz	r3, 25cac <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   25c86:	4639      	mov	r1, r7
   25c88:	f105 000c 	add.w	r0, r5, #12
   25c8c:	f7f2 fe00 	bl	18890 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25c90:	4630      	mov	r0, r6
   25c92:	f7ff fe4b 	bl	2592c <net_buf_frags_len>
   25c96:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   25c9a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25c9c:	4283      	cmp	r3, r0
		total += read;
   25c9e:	44ba      	add	sl, r7
		offset += read;
   25ca0:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25ca4:	d9b5      	bls.n	25c12 <att_chan_read+0x68>
   25ca6:	42a7      	cmp	r7, r4
   25ca8:	d096      	beq.n	25bd8 <att_chan_read+0x2e>
   25caa:	e7b2      	b.n	25c12 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25cac:	4639      	mov	r1, r7
   25cae:	4628      	mov	r0, r5
   25cb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25cb4:	4798      	blx	r3
   25cb6:	2800      	cmp	r0, #0
   25cb8:	d1e5      	bne.n	25c86 <att_chan_read+0xdc>
   25cba:	e7aa      	b.n	25c12 <att_chan_read+0x68>
		return 0;
   25cbc:	2700      	movs	r7, #0
   25cbe:	e7d7      	b.n	25c70 <att_chan_read+0xc6>

00025cc0 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25cc0:	2200      	movs	r2, #0
	return list->head;
   25cc2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25cc4:	b903      	cbnz	r3, 25cc8 <sys_slist_find_and_remove.isra.0+0x8>
   25cc6:	4770      	bx	lr
   25cc8:	428b      	cmp	r3, r1
   25cca:	d10f      	bne.n	25cec <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   25ccc:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   25cce:	b93a      	cbnz	r2, 25ce0 <sys_slist_find_and_remove.isra.0+0x20>
   25cd0:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   25cd2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25cd4:	4291      	cmp	r1, r2
   25cd6:	d100      	bne.n	25cda <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   25cd8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   25cda:	2300      	movs	r3, #0
   25cdc:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   25cde:	4770      	bx	lr
	parent->next = child;
   25ce0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25ce2:	6843      	ldr	r3, [r0, #4]
   25ce4:	4299      	cmp	r1, r3
	list->tail = node;
   25ce6:	bf08      	it	eq
   25ce8:	6042      	streq	r2, [r0, #4]
}
   25cea:	e7f6      	b.n	25cda <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   25cec:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25cee:	681b      	ldr	r3, [r3, #0]
   25cf0:	e7e8      	b.n	25cc4 <sys_slist_find_and_remove.isra.0+0x4>

00025cf2 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   25cf2:	2006      	movs	r0, #6
   25cf4:	4770      	bx	lr

00025cf6 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25cf6:	2301      	movs	r3, #1
{
   25cf8:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   25cfa:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25cfe:	e8d0 3fef 	ldaex	r3, [r0]
   25d02:	ea43 0201 	orr.w	r2, r3, r1
   25d06:	e8c0 2fe4 	stlex	r4, r2, [r0]
   25d0a:	2c00      	cmp	r4, #0
   25d0c:	d1f7      	bne.n	25cfe <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   25d0e:	4219      	tst	r1, r3
}
   25d10:	bf14      	ite	ne
   25d12:	2001      	movne	r0, #1
   25d14:	2000      	moveq	r0, #0
   25d16:	bd10      	pop	{r4, pc}

00025d18 <read_cb>:
{
   25d18:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   25d1a:	2300      	movs	r3, #0
{
   25d1c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   25d1e:	6816      	ldr	r6, [r2, #0]
{
   25d20:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   25d22:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25d24:	4629      	mov	r1, r5
	data->err = 0x00;
   25d26:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25d28:	2295      	movs	r2, #149	; 0x95
   25d2a:	f000 fc04 	bl	26536 <bt_gatt_check_perm>
   25d2e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   25d30:	b980      	cbnz	r0, 25d54 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25d32:	e9cd 0000 	strd	r0, r0, [sp]
   25d36:	4629      	mov	r1, r5
   25d38:	4630      	mov	r0, r6
   25d3a:	88a3      	ldrh	r3, [r4, #4]
   25d3c:	68a2      	ldr	r2, [r4, #8]
   25d3e:	f7ff ff34 	bl	25baa <att_chan_read>
	if (ret < 0) {
   25d42:	2800      	cmp	r0, #0
   25d44:	da09      	bge.n	25d5a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   25d46:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   25d4a:	bf32      	itee	cc
   25d4c:	200e      	movcc	r0, #14
		return -err;
   25d4e:	4240      	negcs	r0, r0
   25d50:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   25d52:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   25d54:	2000      	movs	r0, #0
}
   25d56:	b002      	add	sp, #8
   25d58:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   25d5a:	2001      	movs	r0, #1
   25d5c:	e7fb      	b.n	25d56 <read_cb+0x3e>

00025d5e <read_vl_cb>:
{
   25d5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   25d62:	2300      	movs	r3, #0
{
   25d64:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   25d66:	f8d2 8000 	ldr.w	r8, [r2]
{
   25d6a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   25d6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25d70:	4631      	mov	r1, r6
	data->err = 0x00;
   25d72:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25d74:	2295      	movs	r2, #149	; 0x95
   25d76:	f000 fbde 	bl	26536 <bt_gatt_check_perm>
   25d7a:	4605      	mov	r5, r0
   25d7c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   25d7e:	b9e0      	cbnz	r0, 25dba <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   25d80:	68a0      	ldr	r0, [r4, #8]
   25d82:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   25d86:	8a02      	ldrh	r2, [r0, #16]
   25d88:	1a9b      	subs	r3, r3, r2
   25d8a:	2b01      	cmp	r3, #1
   25d8c:	dd15      	ble.n	25dba <read_vl_cb+0x5c>
   25d8e:	2102      	movs	r1, #2
   25d90:	300c      	adds	r0, #12
   25d92:	f7f2 fd7d 	bl	18890 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25d96:	e9cd 5500 	strd	r5, r5, [sp]
   25d9a:	4607      	mov	r7, r0
   25d9c:	88a3      	ldrh	r3, [r4, #4]
   25d9e:	4631      	mov	r1, r6
   25da0:	4640      	mov	r0, r8
   25da2:	68a2      	ldr	r2, [r4, #8]
   25da4:	f7ff ff01 	bl	25baa <att_chan_read>
	if (read < 0) {
   25da8:	1e03      	subs	r3, r0, #0
   25daa:	da0a      	bge.n	25dc2 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   25dac:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   25db0:	bf32      	itee	cc
   25db2:	230e      	movcc	r3, #14
		return -err;
   25db4:	425b      	negcs	r3, r3
   25db6:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   25db8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   25dba:	2000      	movs	r0, #0
}
   25dbc:	b002      	add	sp, #8
   25dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   25dc2:	2001      	movs	r0, #1
	rsp->len = read;
   25dc4:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   25dc6:	e7f9      	b.n	25dbc <read_vl_cb+0x5e>

00025dc8 <bt_att_sent>:
{
   25dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25dca:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   25dcc:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   25dd0:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25dd2:	f100 0394 	add.w	r3, r0, #148	; 0x94
   25dd6:	e8d3 1fef 	ldaex	r1, [r3]
   25dda:	f021 0110 	bic.w	r1, r1, #16
   25dde:	e8c3 1fe2 	stlex	r2, r1, [r3]
   25de2:	2a00      	cmp	r2, #0
   25de4:	d1f7      	bne.n	25dd6 <bt_att_sent+0xe>
	if (!att) {
   25de6:	b30c      	cbz	r4, 25e2c <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25de8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   25dec:	b98b      	cbnz	r3, 25e12 <bt_att_sent+0x4a>
   25dee:	6863      	ldr	r3, [r4, #4]
   25df0:	b17b      	cbz	r3, 25e12 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25df2:	1d20      	adds	r0, r4, #4
   25df4:	f7ff fd90 	bl	25918 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25df8:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25dfa:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25dfc:	4638      	mov	r0, r7
   25dfe:	f7ff fe93 	bl	25b28 <chan_req_send>
   25e02:	2800      	cmp	r0, #0
   25e04:	da12      	bge.n	25e2c <bt_att_sent+0x64>
	return list->head;
   25e06:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   25e08:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   25e0a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   25e0c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   25e0e:	b903      	cbnz	r3, 25e12 <bt_att_sent+0x4a>
	list->tail = node;
   25e10:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   25e12:	4638      	mov	r0, r7
   25e14:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   25e18:	f7ff fea0 	bl	25b5c <process_queue>
	if (!err) {
   25e1c:	b130      	cbz	r0, 25e2c <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   25e1e:	4638      	mov	r0, r7
   25e20:	f104 010c 	add.w	r1, r4, #12
}
   25e24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   25e28:	f7ff be98 	b.w	25b5c <process_queue>
}
   25e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025e2e <att_req_send_process>:
{
   25e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   25e32:	6a84      	ldr	r4, [r0, #40]	; 0x28
   25e34:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25e36:	2c00      	cmp	r4, #0
   25e38:	d03b      	beq.n	25eb2 <att_req_send_process+0x84>
	return node->next;
   25e3a:	f854 69f0 	ldr.w	r6, [r4], #-240
   25e3e:	b106      	cbz	r6, 25e42 <att_req_send_process+0x14>
   25e40:	3ef0      	subs	r6, #240	; 0xf0
{
   25e42:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   25e44:	f108 0704 	add.w	r7, r8, #4
{
   25e48:	461d      	mov	r5, r3
   25e4a:	e013      	b.n	25e74 <att_req_send_process+0x46>
		if (!req && prev &&
   25e4c:	b1c3      	cbz	r3, 25e80 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   25e4e:	2103      	movs	r1, #3
   25e50:	f104 0098 	add.w	r0, r4, #152	; 0x98
   25e54:	f7ff fd84 	bl	25960 <atomic_test_bit>
   25e58:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   25e5a:	f103 0098 	add.w	r0, r3, #152	; 0x98
   25e5e:	f7ff fd7f 	bl	25960 <atomic_test_bit>
		if (!req && prev &&
   25e62:	4282      	cmp	r2, r0
   25e64:	d10c      	bne.n	25e80 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25e66:	b326      	cbz	r6, 25eb2 <att_req_send_process+0x84>
   25e68:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   25e6c:	b102      	cbz	r2, 25e70 <att_req_send_process+0x42>
   25e6e:	3af0      	subs	r2, #240	; 0xf0
{
   25e70:	4634      	mov	r4, r6
   25e72:	4616      	mov	r6, r2
		if (chan->req) {
   25e74:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   25e78:	2a00      	cmp	r2, #0
   25e7a:	d1f4      	bne.n	25e66 <att_req_send_process+0x38>
		if (!req && prev &&
   25e7c:	2d00      	cmp	r5, #0
   25e7e:	d0e5      	beq.n	25e4c <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   25e80:	4638      	mov	r0, r7
   25e82:	f7ff fd49 	bl	25918 <sys_slist_get>
	if (node) {
   25e86:	4605      	mov	r5, r0
   25e88:	b908      	cbnz	r0, 25e8e <att_req_send_process+0x60>
   25e8a:	4623      	mov	r3, r4
   25e8c:	e7eb      	b.n	25e66 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   25e8e:	4601      	mov	r1, r0
   25e90:	4620      	mov	r0, r4
   25e92:	f7ee fab7 	bl	14404 <bt_att_chan_req_send>
   25e96:	2800      	cmp	r0, #0
   25e98:	da0b      	bge.n	25eb2 <att_req_send_process+0x84>
	return list->head;
   25e9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   25e9e:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   25ea0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   25ea4:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   25ea8:	2b00      	cmp	r3, #0
   25eaa:	d1ee      	bne.n	25e8a <att_req_send_process+0x5c>
	list->tail = node;
   25eac:	f8c8 5008 	str.w	r5, [r8, #8]
}
   25eb0:	e7eb      	b.n	25e8a <att_req_send_process+0x5c>
}
   25eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025eb6 <bt_att_status>:
{
   25eb6:	b538      	push	{r3, r4, r5, lr}
   25eb8:	4605      	mov	r5, r0
   25eba:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25ebc:	2100      	movs	r1, #0
   25ebe:	f7ff fd4f 	bl	25960 <atomic_test_bit>
   25ec2:	b1c0      	cbz	r0, 25ef6 <bt_att_status+0x40>
	if (!chan->att) {
   25ec4:	f855 0c04 	ldr.w	r0, [r5, #-4]
   25ec8:	b1a8      	cbz	r0, 25ef6 <bt_att_status+0x40>
	if (chan->req) {
   25eca:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   25ece:	b993      	cbnz	r3, 25ef6 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   25ed0:	3004      	adds	r0, #4
   25ed2:	f7ff fd21 	bl	25918 <sys_slist_get>
	if (!node) {
   25ed6:	4604      	mov	r4, r0
   25ed8:	b168      	cbz	r0, 25ef6 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25eda:	4601      	mov	r1, r0
   25edc:	1f28      	subs	r0, r5, #4
   25ede:	f7ee fa91 	bl	14404 <bt_att_chan_req_send>
   25ee2:	2800      	cmp	r0, #0
   25ee4:	da07      	bge.n	25ef6 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   25ee6:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   25eea:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25eec:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25eee:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25ef0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25ef2:	b902      	cbnz	r2, 25ef6 <bt_att_status+0x40>
	list->tail = node;
   25ef4:	609c      	str	r4, [r3, #8]
}
   25ef6:	bd38      	pop	{r3, r4, r5, pc}

00025ef8 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   25ef8:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   25efa:	6883      	ldr	r3, [r0, #8]
   25efc:	699b      	ldr	r3, [r3, #24]
   25efe:	b10b      	cbz	r3, 25f04 <att_sent+0xc>
		chan->ops->sent(chan);
   25f00:	3004      	adds	r0, #4
   25f02:	4718      	bx	r3
}
   25f04:	4770      	bx	lr

00025f06 <att_tx_complete>:
{
   25f06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25f0a:	4606      	mov	r6, r0
   25f0c:	460d      	mov	r5, r1
	if (!err) {
   25f0e:	4614      	mov	r4, r2
   25f10:	b122      	cbz	r2, 25f1c <att_tx_complete+0x16>
}
   25f12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   25f16:	4608      	mov	r0, r1
   25f18:	f7ee b934 	b.w	14184 <tx_meta_data_free>
		att_sent(conn, user_data);
   25f1c:	f7ff ffec 	bl	25ef8 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   25f20:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   25f22:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   25f24:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   25f28:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   25f2c:	f7ee f92a 	bl	14184 <tx_meta_data_free>
	if (!err && func) {
   25f30:	b92f      	cbnz	r7, 25f3e <att_tx_complete+0x38>
}
   25f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   25f36:	4649      	mov	r1, r9
   25f38:	4630      	mov	r0, r6
   25f3a:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   25f3c:	3401      	adds	r4, #1
   25f3e:	b2a3      	uxth	r3, r4
   25f40:	4543      	cmp	r3, r8
   25f42:	d3f8      	bcc.n	25f36 <att_tx_complete+0x30>
   25f44:	e7f5      	b.n	25f32 <att_tx_complete+0x2c>

00025f46 <att_req_sent>:
{
   25f46:	b510      	push	{r4, lr}
   25f48:	460c      	mov	r4, r1
	if (!err) {
   25f4a:	b90a      	cbnz	r2, 25f50 <att_req_sent+0xa>
		att_sent(conn, user_data);
   25f4c:	f7ff ffd4 	bl	25ef8 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   25f50:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   25f52:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   25f56:	b12b      	cbz	r3, 25f64 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   25f58:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   25f5c:	2300      	movs	r3, #0
   25f5e:	30c0      	adds	r0, #192	; 0xc0
   25f60:	f7f9 fe9c 	bl	1fc9c <k_work_reschedule>
	tx_meta_data_free(user_data);
   25f64:	4620      	mov	r0, r4
}
   25f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   25f6a:	f7ee b90b 	b.w	14184 <tx_meta_data_free>

00025f6e <att_cfm_sent>:
{
   25f6e:	b510      	push	{r4, lr}
   25f70:	460c      	mov	r4, r1
	if (!err) {
   25f72:	b90a      	cbnz	r2, 25f78 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   25f74:	f7ff ffc0 	bl	25ef8 <att_sent>
   25f78:	6823      	ldr	r3, [r4, #0]
   25f7a:	3398      	adds	r3, #152	; 0x98
   25f7c:	e8d3 1fef 	ldaex	r1, [r3]
   25f80:	f021 0102 	bic.w	r1, r1, #2
   25f84:	e8c3 1fe2 	stlex	r2, r1, [r3]
   25f88:	2a00      	cmp	r2, #0
   25f8a:	d1f7      	bne.n	25f7c <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   25f8c:	4620      	mov	r0, r4
}
   25f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   25f92:	f7ee b8f7 	b.w	14184 <tx_meta_data_free>

00025f96 <att_rsp_sent>:
{
   25f96:	b510      	push	{r4, lr}
   25f98:	460c      	mov	r4, r1
	if (!err) {
   25f9a:	b90a      	cbnz	r2, 25fa0 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   25f9c:	f7ff ffac 	bl	25ef8 <att_sent>
   25fa0:	6823      	ldr	r3, [r4, #0]
   25fa2:	3398      	adds	r3, #152	; 0x98
   25fa4:	e8d3 1fef 	ldaex	r1, [r3]
   25fa8:	f021 0101 	bic.w	r1, r1, #1
   25fac:	e8c3 1fe2 	stlex	r2, r1, [r3]
   25fb0:	2a00      	cmp	r2, #0
   25fb2:	d1f7      	bne.n	25fa4 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   25fb4:	4620      	mov	r0, r4
}
   25fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   25fba:	f7ee b8e3 	b.w	14184 <tx_meta_data_free>

00025fbe <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25fc2:	4688      	mov	r8, r1
   25fc4:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25fc6:	2101      	movs	r1, #1
   25fc8:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25fca:	4605      	mov	r5, r0
   25fcc:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25fce:	f7ee fbdb 	bl	14788 <bt_att_chan_create_pdu>
	if (!buf) {
   25fd2:	4604      	mov	r4, r0
   25fd4:	b170      	cbz	r0, 25ff4 <send_err_rsp.part.0+0x36>
   25fd6:	2104      	movs	r1, #4
   25fd8:	300c      	adds	r0, #12
   25fda:	f7f2 fc59 	bl	18890 <net_buf_simple_add>
	rsp->request = req;
   25fde:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   25fe2:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   25fe6:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   25fe8:	4621      	mov	r1, r4
   25fea:	4628      	mov	r0, r5
}
   25fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   25ff0:	f7ff bdcd 	b.w	25b8e <bt_att_chan_send_rsp>
}
   25ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025ff8 <att_write_req>:
{
   25ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25ffa:	460c      	mov	r4, r1
   25ffc:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   25ffe:	f101 000c 	add.w	r0, r1, #12
   26002:	f000 fe87 	bl	26d14 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   26006:	8a22      	ldrh	r2, [r4, #16]
   26008:	4603      	mov	r3, r0
   2600a:	9201      	str	r2, [sp, #4]
   2600c:	68e2      	ldr	r2, [r4, #12]
   2600e:	2112      	movs	r1, #18
   26010:	9200      	str	r2, [sp, #0]
   26012:	4628      	mov	r0, r5
   26014:	2213      	movs	r2, #19
   26016:	f7ee fcaf 	bl	14978 <att_write_rsp.constprop.0>
}
   2601a:	b003      	add	sp, #12
   2601c:	bd30      	pop	{r4, r5, pc}

0002601e <att_write_cmd>:
{
   2601e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26020:	460c      	mov	r4, r1
   26022:	4605      	mov	r5, r0
   26024:	f101 000c 	add.w	r0, r1, #12
   26028:	f000 fe74 	bl	26d14 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2602c:	8a22      	ldrh	r2, [r4, #16]
   2602e:	4603      	mov	r3, r0
   26030:	9201      	str	r2, [sp, #4]
   26032:	68e2      	ldr	r2, [r4, #12]
   26034:	4628      	mov	r0, r5
   26036:	9200      	str	r2, [sp, #0]
   26038:	2200      	movs	r2, #0
   2603a:	4611      	mov	r1, r2
   2603c:	f7ee fc9c 	bl	14978 <att_write_rsp.constprop.0>
}
   26040:	b003      	add	sp, #12
   26042:	bd30      	pop	{r4, r5, pc}

00026044 <att_read_blob_req>:
{
   26044:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   26046:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   26048:	210c      	movs	r1, #12
   2604a:	8813      	ldrh	r3, [r2, #0]
   2604c:	8852      	ldrh	r2, [r2, #2]
   2604e:	9200      	str	r2, [sp, #0]
   26050:	220d      	movs	r2, #13
   26052:	f7ee fe53 	bl	14cfc <att_read_rsp>
}
   26056:	b003      	add	sp, #12
   26058:	f85d fb04 	ldr.w	pc, [sp], #4

0002605c <att_read_req>:
{
   2605c:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2605e:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   26060:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   26062:	210a      	movs	r1, #10
   26064:	881b      	ldrh	r3, [r3, #0]
   26066:	9200      	str	r2, [sp, #0]
   26068:	220b      	movs	r2, #11
   2606a:	f7ee fe47 	bl	14cfc <att_read_rsp>
}
   2606e:	b003      	add	sp, #12
   26070:	f85d fb04 	ldr.w	pc, [sp], #4

00026074 <att_mtu_req>:
{
   26074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26076:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   26078:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2607c:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2607e:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   26080:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   26082:	f7ff fc6d 	bl	25960 <atomic_test_bit>
   26086:	4604      	mov	r4, r0
   26088:	b9f0      	cbnz	r0, 260c8 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2608a:	68db      	ldr	r3, [r3, #12]
   2608c:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2608e:	2e16      	cmp	r6, #22
   26090:	d91c      	bls.n	260cc <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   26092:	4638      	mov	r0, r7
   26094:	2202      	movs	r2, #2
   26096:	f7ee fcd3 	bl	14a40 <bt_att_create_pdu>
	if (!pdu) {
   2609a:	4607      	mov	r7, r0
   2609c:	b1c0      	cbz	r0, 260d0 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2609e:	2102      	movs	r1, #2
   260a0:	300c      	adds	r0, #12
   260a2:	f7f2 fbf5 	bl	18890 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   260a6:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   260a8:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   260aa:	7003      	strb	r3, [r0, #0]
   260ac:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   260ae:	4628      	mov	r0, r5
   260b0:	f7ff fd6d 	bl	25b8e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   260b4:	2e41      	cmp	r6, #65	; 0x41
   260b6:	bf28      	it	cs
   260b8:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   260ba:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   260bc:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   260be:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   260c0:	f7ff fc90 	bl	259e4 <att_chan_mtu_updated>
	return 0;
   260c4:	4620      	mov	r0, r4
}
   260c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   260c8:	2006      	movs	r0, #6
   260ca:	e7fc      	b.n	260c6 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   260cc:	2004      	movs	r0, #4
   260ce:	e7fa      	b.n	260c6 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   260d0:	200e      	movs	r0, #14
   260d2:	e7f8      	b.n	260c6 <att_mtu_req+0x52>

000260d4 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   260d4:	8a0a      	ldrh	r2, [r1, #16]
   260d6:	2300      	movs	r3, #0
   260d8:	68c9      	ldr	r1, [r1, #12]
   260da:	f7ee bfb9 	b.w	15050 <att_handle_rsp>

000260de <bt_att_encrypt_change>:
{
   260de:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   260e0:	4606      	mov	r6, r0
	if (!att_chan->att) {
   260e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   260e6:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   260e8:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   260ec:	2b00      	cmp	r3, #0
   260ee:	d038      	beq.n	26162 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   260f0:	b141      	cbz	r1, 26104 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   260f2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   260f6:	2b00      	cmp	r3, #0
   260f8:	d033      	beq.n	26162 <bt_att_encrypt_change+0x84>
   260fa:	7c1b      	ldrb	r3, [r3, #16]
   260fc:	07da      	lsls	r2, r3, #31
   260fe:	d530      	bpl.n	26162 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   26100:	2305      	movs	r3, #5
   26102:	e021      	b.n	26148 <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   26104:	4628      	mov	r0, r5
   26106:	f7f0 f963 	bl	163d0 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2610a:	7a6b      	ldrb	r3, [r5, #9]
   2610c:	2b01      	cmp	r3, #1
   2610e:	d028      	beq.n	26162 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   26110:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   26114:	b32d      	cbz	r5, 26162 <bt_att_encrypt_change+0x84>
   26116:	7c2b      	ldrb	r3, [r5, #16]
   26118:	07db      	lsls	r3, r3, #31
   2611a:	d522      	bpl.n	26162 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2611c:	68eb      	ldr	r3, [r5, #12]
   2611e:	2b00      	cmp	r3, #0
   26120:	d0ee      	beq.n	26100 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   26122:	4630      	mov	r0, r6
   26124:	696a      	ldr	r2, [r5, #20]
   26126:	7c69      	ldrb	r1, [r5, #17]
   26128:	f7ee fb2e 	bl	14788 <bt_att_chan_create_pdu>
	if (!buf) {
   2612c:	4604      	mov	r4, r0
   2612e:	b150      	cbz	r0, 26146 <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   26130:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   26134:	68eb      	ldr	r3, [r5, #12]
   26136:	4798      	blx	r3
   26138:	b168      	cbz	r0, 26156 <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2613a:	69a0      	ldr	r0, [r4, #24]
   2613c:	f7ee f822 	bl	14184 <tx_meta_data_free>
		net_buf_unref(buf);
   26140:	4620      	mov	r0, r4
   26142:	f7f2 fa83 	bl	1864c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   26146:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   26148:	2200      	movs	r2, #0
   2614a:	4630      	mov	r0, r6
}
   2614c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   26150:	4611      	mov	r1, r2
   26152:	f7ee bf7d 	b.w	15050 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   26156:	4621      	mov	r1, r4
   26158:	4630      	mov	r0, r6
   2615a:	f7ee f8df 	bl	1431c <chan_send>
   2615e:	2800      	cmp	r0, #0
   26160:	d1eb      	bne.n	2613a <bt_att_encrypt_change+0x5c>
}
   26162:	bd70      	pop	{r4, r5, r6, pc}

00026164 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   26164:	2001      	movs	r0, #1
   26166:	4770      	bx	lr

00026168 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   26168:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2616a:	f7ee f98d 	bl	14488 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2616e:	b178      	cbz	r0, 26190 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   26170:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   26172:	b16b      	cbz	r3, 26190 <bt_att_clear_out_of_sync_sent+0x28>
   26174:	3bf0      	subs	r3, #240	; 0xf0
   26176:	f103 0298 	add.w	r2, r3, #152	; 0x98
   2617a:	e8d2 0fef 	ldaex	r0, [r2]
   2617e:	f020 0020 	bic.w	r0, r0, #32
   26182:	e8c2 0fe1 	stlex	r1, r0, [r2]
   26186:	2900      	cmp	r1, #0
   26188:	d1f7      	bne.n	2617a <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   2618a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2618e:	e7f0      	b.n	26172 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   26190:	bd08      	pop	{r3, pc}

00026192 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   26192:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   26194:	2104      	movs	r1, #4
   26196:	f7ff fbb5 	bl	25904 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2619a:	b128      	cbz	r0, 261a8 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2619c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   261a0:	2105      	movs	r1, #5
   261a2:	3094      	adds	r0, #148	; 0x94
   261a4:	f7ff bbdc 	b.w	25960 <atomic_test_bit>
}
   261a8:	bd08      	pop	{r3, pc}

000261aa <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   261aa:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   261ac:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   261b0:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   261b2:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   261b4:	8082      	strh	r2, [r0, #4]
}
   261b6:	4770      	bx	lr

000261b8 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   261b8:	6010      	str	r0, [r2, #0]
}
   261ba:	2000      	movs	r0, #0
   261bc:	4770      	bx	lr

000261be <gatt_ccc_changed>:
{
   261be:	460b      	mov	r3, r1
   261c0:	8909      	ldrh	r1, [r1, #8]
   261c2:	8a5a      	ldrh	r2, [r3, #18]
   261c4:	4291      	cmp	r1, r2
   261c6:	bf38      	it	cc
   261c8:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   261ca:	8a9a      	ldrh	r2, [r3, #20]
   261cc:	428a      	cmp	r2, r1
   261ce:	d003      	beq.n	261d8 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   261d0:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   261d2:	699b      	ldr	r3, [r3, #24]
   261d4:	b103      	cbz	r3, 261d8 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   261d6:	4718      	bx	r3
}
   261d8:	4770      	bx	lr

000261da <gatt_indicate_rsp>:
{
   261da:	b510      	push	{r4, lr}
   261dc:	9c02      	ldr	r4, [sp, #8]
   261de:	460a      	mov	r2, r1
	if (params->func) {
   261e0:	68a3      	ldr	r3, [r4, #8]
   261e2:	b10b      	cbz	r3, 261e8 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   261e4:	4621      	mov	r1, r4
   261e6:	4798      	blx	r3
	params->_ref--;
   261e8:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   261ea:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   261ec:	3b01      	subs	r3, #1
   261ee:	b2db      	uxtb	r3, r3
   261f0:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   261f2:	b122      	cbz	r2, 261fe <gatt_indicate_rsp+0x24>
   261f4:	b91b      	cbnz	r3, 261fe <gatt_indicate_rsp+0x24>
		params->destroy(params);
   261f6:	4620      	mov	r0, r4
}
   261f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   261fc:	4710      	bx	r2
}
   261fe:	bd10      	pop	{r4, pc}

00026200 <match_uuid>:
	data->attr = attr;
   26200:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   26202:	8091      	strh	r1, [r2, #4]
}
   26204:	2000      	movs	r0, #0
   26206:	4770      	bx	lr

00026208 <gen_hash_m>:
{
   26208:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2620a:	6807      	ldr	r7, [r0, #0]
{
   2620c:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2620e:	783d      	ldrb	r5, [r7, #0]
{
   26210:	4614      	mov	r4, r2
   26212:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   26214:	b9dd      	cbnz	r5, 2624e <gen_hash_m+0x46>
	switch (u16->val) {
   26216:	887b      	ldrh	r3, [r7, #2]
   26218:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2621c:	d004      	beq.n	26228 <gen_hash_m+0x20>
   2621e:	d810      	bhi.n	26242 <gen_hash_m+0x3a>
   26220:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   26224:	2b03      	cmp	r3, #3
   26226:	d812      	bhi.n	2624e <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   26228:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2622c:	2202      	movs	r2, #2
   2622e:	4620      	mov	r0, r4
   26230:	f10d 010a 	add.w	r1, sp, #10
   26234:	f7fe fb02 	bl	2483c <tc_cmac_update>
   26238:	b968      	cbnz	r0, 26256 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2623a:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2623e:	65a2      	str	r2, [r4, #88]	; 0x58
   26240:	e006      	b.n	26250 <gen_hash_m+0x48>
	switch (u16->val) {
   26242:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   26246:	33ff      	adds	r3, #255	; 0xff
   26248:	b29b      	uxth	r3, r3
   2624a:	2b04      	cmp	r3, #4
   2624c:	d91e      	bls.n	2628c <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2624e:	2501      	movs	r5, #1
}
   26250:	4628      	mov	r0, r5
   26252:	b009      	add	sp, #36	; 0x24
   26254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   26256:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26258:	2202      	movs	r2, #2
   2625a:	4620      	mov	r0, r4
   2625c:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   26260:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26264:	f7fe faea 	bl	2483c <tc_cmac_update>
   26268:	2800      	cmp	r0, #0
   2626a:	d0e6      	beq.n	2623a <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2626c:	2000      	movs	r0, #0
   2626e:	9000      	str	r0, [sp, #0]
   26270:	aa03      	add	r2, sp, #12
   26272:	2313      	movs	r3, #19
   26274:	4631      	mov	r1, r6
   26276:	6877      	ldr	r7, [r6, #4]
   26278:	47b8      	blx	r7
		if (len < 0) {
   2627a:	1e02      	subs	r2, r0, #0
   2627c:	dbdf      	blt.n	2623e <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2627e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26280:	4620      	mov	r0, r4
   26282:	f7fe fadb 	bl	2483c <tc_cmac_update>
   26286:	2800      	cmp	r0, #0
   26288:	d1e1      	bne.n	2624e <gen_hash_m+0x46>
   2628a:	e7d6      	b.n	2623a <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2628c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26290:	2202      	movs	r2, #2
   26292:	4620      	mov	r0, r4
   26294:	f10d 010a 	add.w	r1, sp, #10
   26298:	f7fe fad0 	bl	2483c <tc_cmac_update>
   2629c:	2800      	cmp	r0, #0
   2629e:	d0cc      	beq.n	2623a <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   262a0:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   262a2:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   262a4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   262a8:	f10d 010a 	add.w	r1, sp, #10
   262ac:	e7e8      	b.n	26280 <gen_hash_m+0x78>

000262ae <bt_addr_le_eq>:
   262ae:	2207      	movs	r2, #7
{
   262b0:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   262b2:	f002 fa76 	bl	287a2 <memcmp>
}
   262b6:	fab0 f080 	clz	r0, r0
   262ba:	0940      	lsrs	r0, r0, #5
   262bc:	bd08      	pop	{r3, pc}

000262be <bt_addr_le_copy>:
   262be:	680b      	ldr	r3, [r1, #0]
   262c0:	6003      	str	r3, [r0, #0]
   262c2:	888b      	ldrh	r3, [r1, #4]
   262c4:	8083      	strh	r3, [r0, #4]
   262c6:	798b      	ldrb	r3, [r1, #6]
   262c8:	7183      	strb	r3, [r0, #6]
}
   262ca:	4770      	bx	lr

000262cc <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   262cc:	2300      	movs	r3, #0
   262ce:	6003      	str	r3, [r0, #0]
   262d0:	6043      	str	r3, [r0, #4]
   262d2:	6083      	str	r3, [r0, #8]
}
   262d4:	4770      	bx	lr

000262d6 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   262d6:	b538      	push	{r3, r4, r5, lr}
   262d8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   262dc:	4615      	mov	r5, r2
	if (offset > value_len) {
   262de:	4294      	cmp	r4, r2
   262e0:	d30a      	bcc.n	262f8 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   262e2:	1aa4      	subs	r4, r4, r2
   262e4:	428c      	cmp	r4, r1
   262e6:	bfa8      	it	ge
   262e8:	460c      	movge	r4, r1
   262ea:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   262ec:	4622      	mov	r2, r4
   262ee:	1959      	adds	r1, r3, r5
   262f0:	f002 fa67 	bl	287c2 <memcpy>
}
   262f4:	4620      	mov	r0, r4
   262f6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   262f8:	f06f 0406 	mvn.w	r4, #6
   262fc:	e7fa      	b.n	262f4 <bt_gatt_attr_read.constprop.0+0x1e>

000262fe <bt_gatt_attr_read_ccc>:
{
   262fe:	b530      	push	{r4, r5, lr}
   26300:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   26302:	68c9      	ldr	r1, [r1, #12]
{
   26304:	4614      	mov	r4, r2
   26306:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   26308:	f7ef f848 	bl	1539c <find_ccc_cfg>
	if (cfg) {
   2630c:	b100      	cbz	r0, 26310 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2630e:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   26310:	2302      	movs	r3, #2
   26312:	f8ad 000e 	strh.w	r0, [sp, #14]
   26316:	9300      	str	r3, [sp, #0]
   26318:	4629      	mov	r1, r5
   2631a:	4620      	mov	r0, r4
   2631c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   26320:	f10d 030e 	add.w	r3, sp, #14
   26324:	f7ff ffd7 	bl	262d6 <bt_gatt_attr_read.constprop.0>
}
   26328:	b005      	add	sp, #20
   2632a:	bd30      	pop	{r4, r5, pc}

0002632c <bt_gatt_attr_read_service>:
{
   2632c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2632e:	460c      	mov	r4, r1
   26330:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   26332:	68e3      	ldr	r3, [r4, #12]
{
   26334:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   26336:	781c      	ldrb	r4, [r3, #0]
{
   26338:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2633c:	b13c      	cbz	r4, 2634e <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2633e:	2410      	movs	r4, #16
   26340:	3301      	adds	r3, #1
   26342:	9406      	str	r4, [sp, #24]
}
   26344:	b004      	add	sp, #16
   26346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2634a:	f7ff bfc4 	b.w	262d6 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2634e:	885b      	ldrh	r3, [r3, #2]
   26350:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   26354:	2302      	movs	r3, #2
   26356:	9300      	str	r3, [sp, #0]
   26358:	f10d 030e 	add.w	r3, sp, #14
   2635c:	f7ff ffbb 	bl	262d6 <bt_gatt_attr_read.constprop.0>
}
   26360:	b004      	add	sp, #16
   26362:	bd10      	pop	{r4, pc}

00026364 <cf_read>:
{
   26364:	b530      	push	{r4, r5, lr}
   26366:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   26368:	2300      	movs	r3, #0
{
   2636a:	b085      	sub	sp, #20
   2636c:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2636e:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   26372:	f7ee ffc3 	bl	152fc <find_cf_cfg>
	if (cfg) {
   26376:	b110      	cbz	r0, 2637e <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   26378:	7a03      	ldrb	r3, [r0, #8]
   2637a:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2637e:	2301      	movs	r3, #1
   26380:	4629      	mov	r1, r5
   26382:	9300      	str	r3, [sp, #0]
   26384:	4620      	mov	r0, r4
   26386:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2638a:	ab03      	add	r3, sp, #12
   2638c:	f7ff ffa3 	bl	262d6 <bt_gatt_attr_read.constprop.0>
}
   26390:	b005      	add	sp, #20
   26392:	bd30      	pop	{r4, r5, pc}

00026394 <read_name>:
{
   26394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26398:	4614      	mov	r4, r2
   2639a:	461d      	mov	r5, r3
   2639c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   263a0:	f7eb fc1e 	bl	11be0 <bt_get_name>
   263a4:	4606      	mov	r6, r0
				 strlen(name));
   263a6:	f7e2 ffdb 	bl	9360 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   263aa:	b280      	uxth	r0, r0
   263ac:	9006      	str	r0, [sp, #24]
   263ae:	4633      	mov	r3, r6
   263b0:	463a      	mov	r2, r7
   263b2:	4629      	mov	r1, r5
   263b4:	4620      	mov	r0, r4
}
   263b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   263ba:	f7ff bf8c 	b.w	262d6 <bt_gatt_attr_read.constprop.0>

000263be <read_appearance>:
{
   263be:	b530      	push	{r4, r5, lr}
   263c0:	b085      	sub	sp, #20
   263c2:	4614      	mov	r4, r2
   263c4:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   263c6:	f7fe fef5 	bl	251b4 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   263ca:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   263cc:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   263d0:	9300      	str	r3, [sp, #0]
   263d2:	4629      	mov	r1, r5
   263d4:	4620      	mov	r0, r4
   263d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   263da:	f10d 030e 	add.w	r3, sp, #14
   263de:	f7ff ff7a 	bl	262d6 <bt_gatt_attr_read.constprop.0>
}
   263e2:	b005      	add	sp, #20
   263e4:	bd30      	pop	{r4, r5, pc}

000263e6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   263e6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   263e8:	ab0b      	add	r3, sp, #44	; 0x2c
   263ea:	9305      	str	r3, [sp, #20]
   263ec:	9303      	str	r3, [sp, #12]
   263ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   263f0:	9302      	str	r3, [sp, #8]
   263f2:	2300      	movs	r3, #0
   263f4:	4618      	mov	r0, r3
   263f6:	e9cd 3300 	strd	r3, r3, [sp]
   263fa:	f7e7 fdd7 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   263fe:	b007      	add	sp, #28
   26400:	f85d fb04 	ldr.w	pc, [sp], #4

00026404 <sc_clear>:
{
   26404:	b538      	push	{r3, r4, r5, lr}
   26406:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   26408:	f100 0590 	add.w	r5, r0, #144	; 0x90
   2640c:	4629      	mov	r1, r5
   2640e:	7a00      	ldrb	r0, [r0, #8]
   26410:	f7fe fed3 	bl	251ba <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   26414:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   26416:	7a20      	ldrb	r0, [r4, #8]
   26418:	f7ee ff9e 	bl	15358 <find_sc_cfg>
		if (cfg) {
   2641c:	b118      	cbz	r0, 26426 <sc_clear+0x22>
}
   2641e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   26422:	f7ff bf53 	b.w	262cc <clear_sc_cfg>
}
   26426:	bd38      	pop	{r3, r4, r5, pc}

00026428 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   26428:	2a02      	cmp	r2, #2
{
   2642a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2642c:	d108      	bne.n	26440 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2642e:	2300      	movs	r3, #0
   26430:	f100 0190 	add.w	r1, r0, #144	; 0x90
   26434:	461a      	mov	r2, r3
   26436:	7a00      	ldrb	r0, [r0, #8]
   26438:	f7ef f860 	bl	154fc <sc_save>
}
   2643c:	2002      	movs	r0, #2
   2643e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   26440:	f7ff ffe0 	bl	26404 <sc_clear>
   26444:	e7fa      	b.n	2643c <sc_ccc_cfg_write+0x14>

00026446 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26446:	2301      	movs	r3, #1
   26448:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2644a:	e8d0 2fef 	ldaex	r2, [r0]
   2644e:	431a      	orrs	r2, r3
   26450:	e8c0 2fe1 	stlex	r1, r2, [r0]
   26454:	2900      	cmp	r1, #0
   26456:	d1f8      	bne.n	2644a <atomic_set_bit+0x4>
}
   26458:	4770      	bx	lr

0002645a <sc_restore_rsp>:
{
   2645a:	b538      	push	{r3, r4, r5, lr}
   2645c:	4604      	mov	r4, r0
   2645e:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   26460:	f7ff fe80 	bl	26164 <bt_att_fixed_chan_only>
   26464:	b150      	cbz	r0, 2647c <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   26466:	4620      	mov	r0, r4
   26468:	f7ee ff48 	bl	152fc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2646c:	b130      	cbz	r0, 2647c <sc_restore_rsp+0x22>
   2646e:	7a03      	ldrb	r3, [r0, #8]
   26470:	07db      	lsls	r3, r3, #31
   26472:	d503      	bpl.n	2647c <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   26474:	2100      	movs	r1, #0
   26476:	300c      	adds	r0, #12
   26478:	f7ff ffe5 	bl	26446 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2647c:	b935      	cbnz	r5, 2648c <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2647e:	7a20      	ldrb	r0, [r4, #8]
   26480:	f104 0190 	add.w	r1, r4, #144	; 0x90
   26484:	f7ee ff68 	bl	15358 <find_sc_cfg>
		if (sc_cfg) {
   26488:	b100      	cbz	r0, 2648c <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   2648a:	6085      	str	r5, [r0, #8]
}
   2648c:	bd38      	pop	{r3, r4, r5, pc}

0002648e <bt_gatt_attr_value_handle>:
{
   2648e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26490:	4604      	mov	r4, r0
   26492:	b910      	cbnz	r0, 2649a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   26494:	2000      	movs	r0, #0
}
   26496:	b002      	add	sp, #8
   26498:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2649a:	2300      	movs	r3, #0
   2649c:	f88d 3004 	strb.w	r3, [sp, #4]
   264a0:	f642 0303 	movw	r3, #10243	; 0x2803
   264a4:	6800      	ldr	r0, [r0, #0]
   264a6:	a901      	add	r1, sp, #4
   264a8:	f8ad 3006 	strh.w	r3, [sp, #6]
   264ac:	f7fe fd38 	bl	24f20 <bt_uuid_cmp>
   264b0:	2800      	cmp	r0, #0
   264b2:	d1ef      	bne.n	26494 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   264b4:	68e3      	ldr	r3, [r4, #12]
   264b6:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   264b8:	2800      	cmp	r0, #0
   264ba:	d1ec      	bne.n	26496 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   264bc:	4620      	mov	r0, r4
   264be:	f7ef f98d 	bl	157dc <bt_gatt_attr_get_handle>
   264c2:	3001      	adds	r0, #1
   264c4:	b280      	uxth	r0, r0
	return handle;
   264c6:	e7e6      	b.n	26496 <bt_gatt_attr_value_handle+0x8>

000264c8 <bt_gatt_attr_read_chrc>:
{
   264c8:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   264ca:	68cc      	ldr	r4, [r1, #12]
{
   264cc:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   264ce:	79a3      	ldrb	r3, [r4, #6]
{
   264d0:	b088      	sub	sp, #32
   264d2:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   264d4:	f88d 300c 	strb.w	r3, [sp, #12]
{
   264d8:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   264da:	f7ff ffd8 	bl	2648e <bt_gatt_attr_value_handle>
   264de:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   264e2:	6824      	ldr	r4, [r4, #0]
   264e4:	7823      	ldrb	r3, [r4, #0]
   264e6:	b96b      	cbnz	r3, 26504 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   264e8:	8863      	ldrh	r3, [r4, #2]
   264ea:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   264ee:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   264f0:	9300      	str	r3, [sp, #0]
   264f2:	4631      	mov	r1, r6
   264f4:	4628      	mov	r0, r5
   264f6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   264fa:	ab03      	add	r3, sp, #12
   264fc:	f7ff feeb 	bl	262d6 <bt_gatt_attr_read.constprop.0>
}
   26500:	b008      	add	sp, #32
   26502:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   26504:	1c63      	adds	r3, r4, #1
   26506:	f10d 020f 	add.w	r2, sp, #15
   2650a:	3411      	adds	r4, #17
   2650c:	f853 1b04 	ldr.w	r1, [r3], #4
   26510:	42a3      	cmp	r3, r4
   26512:	f842 1b04 	str.w	r1, [r2], #4
   26516:	d1f9      	bne.n	2650c <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   26518:	2313      	movs	r3, #19
   2651a:	e7e9      	b.n	264f0 <bt_gatt_attr_read_chrc+0x28>

0002651c <bt_gatt_foreach_attr>:
{
   2651c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2651e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   26522:	2300      	movs	r3, #0
   26524:	461a      	mov	r2, r3
   26526:	9300      	str	r3, [sp, #0]
   26528:	f7ef f9a0 	bl	1586c <bt_gatt_foreach_attr_type>
}
   2652c:	b005      	add	sp, #20
   2652e:	f85d fb04 	ldr.w	pc, [sp], #4

00026532 <db_hash_process>:
	db_hash_gen(true);
   26532:	f7ef ba0b 	b.w	1594c <db_hash_gen.constprop.0>

00026536 <bt_gatt_check_perm>:
{
   26536:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   26538:	07d4      	lsls	r4, r2, #31
{
   2653a:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2653c:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2653e:	d504      	bpl.n	2654a <bt_gatt_check_perm+0x14>
   26540:	f013 0f95 	tst.w	r3, #149	; 0x95
   26544:	d027      	beq.n	26596 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   26546:	6848      	ldr	r0, [r1, #4]
   26548:	b328      	cbz	r0, 26596 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2654a:	0790      	lsls	r0, r2, #30
   2654c:	d504      	bpl.n	26558 <bt_gatt_check_perm+0x22>
   2654e:	f413 7f95 	tst.w	r3, #298	; 0x12a
   26552:	d022      	beq.n	2659a <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   26554:	6889      	ldr	r1, [r1, #8]
   26556:	b301      	cbz	r1, 2659a <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   26558:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2655c:	f414 7fc0 	tst.w	r4, #384	; 0x180
   26560:	d007      	beq.n	26572 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   26562:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   26566:	b90b      	cbnz	r3, 2656c <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   26568:	2005      	movs	r0, #5
}
   2656a:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2656c:	7b5b      	ldrb	r3, [r3, #13]
   2656e:	06db      	lsls	r3, r3, #27
   26570:	d5fa      	bpl.n	26568 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   26572:	f014 0f30 	tst.w	r4, #48	; 0x30
   26576:	d108      	bne.n	2658a <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   26578:	f014 000c 	ands.w	r0, r4, #12
   2657c:	d0f5      	beq.n	2656a <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2657e:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   26580:	2b00      	cmp	r3, #0
   26582:	bf14      	ite	ne
   26584:	2000      	movne	r0, #0
   26586:	200f      	moveq	r0, #15
   26588:	e7ef      	b.n	2656a <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2658a:	4628      	mov	r0, r5
   2658c:	f7ff f8ee 	bl	2576c <bt_conn_get_security>
   26590:	2802      	cmp	r0, #2
   26592:	d8f1      	bhi.n	26578 <bt_gatt_check_perm+0x42>
   26594:	e7e8      	b.n	26568 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   26596:	2002      	movs	r0, #2
   26598:	e7e7      	b.n	2656a <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2659a:	2003      	movs	r0, #3
   2659c:	e7e5      	b.n	2656a <bt_gatt_check_perm+0x34>

0002659e <bt_gatt_change_aware>:
{
   2659e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265a0:	4606      	mov	r6, r0
   265a2:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   265a4:	f7ee feaa 	bl	152fc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   265a8:	b1e0      	cbz	r0, 265e4 <bt_gatt_change_aware+0x46>
   265aa:	7a03      	ldrb	r3, [r0, #8]
   265ac:	07db      	lsls	r3, r3, #31
   265ae:	d519      	bpl.n	265e4 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   265b0:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   265b4:	e8d4 5faf 	lda	r5, [r4]
   265b8:	f015 0501 	ands.w	r5, r5, #1
   265bc:	d112      	bne.n	265e4 <bt_gatt_change_aware+0x46>
	if (!req) {
   265be:	b197      	cbz	r7, 265e6 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   265c0:	e8d4 1fef 	ldaex	r1, [r4]
   265c4:	f021 0302 	bic.w	r3, r1, #2
   265c8:	e8c4 3fe2 	stlex	r2, r3, [r4]
   265cc:	2a00      	cmp	r2, #0
   265ce:	d1f7      	bne.n	265c0 <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   265d0:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   265d4:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   265d6:	d008      	beq.n	265ea <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   265d8:	f7ff fdc6 	bl	26168 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   265dc:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   265de:	4620      	mov	r0, r4
   265e0:	f7ff ff31 	bl	26446 <atomic_set_bit>
		return true;
   265e4:	2501      	movs	r5, #1
}
   265e6:	4628      	mov	r0, r5
   265e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   265ea:	f7ff fdbb 	bl	26164 <bt_att_fixed_chan_only>
   265ee:	2800      	cmp	r0, #0
   265f0:	d0f9      	beq.n	265e6 <bt_gatt_change_aware+0x48>
   265f2:	4630      	mov	r0, r6
   265f4:	f7ff fdcd 	bl	26192 <bt_att_out_of_sync_sent_on_fixed>
   265f8:	2800      	cmp	r0, #0
   265fa:	d0f4      	beq.n	265e6 <bt_gatt_change_aware+0x48>
   265fc:	e8d4 3fef 	ldaex	r3, [r4]
   26600:	f023 0302 	bic.w	r3, r3, #2
   26604:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26608:	2a00      	cmp	r2, #0
   2660a:	d1f7      	bne.n	265fc <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   2660c:	4630      	mov	r0, r6
   2660e:	f7ff fdab 	bl	26168 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   26612:	4639      	mov	r1, r7
   26614:	e7e3      	b.n	265de <bt_gatt_change_aware+0x40>

00026616 <smp_pairing_rsp>:
}
   26616:	2007      	movs	r0, #7
   26618:	4770      	bx	lr

0002661a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2661a:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2661e:	4108      	asrs	r0, r1
}
   26620:	f000 0001 	and.w	r0, r0, #1
   26624:	4770      	bx	lr

00026626 <update_keys_check>:
{
   26626:	4603      	mov	r3, r0
   26628:	b510      	push	{r4, lr}
	if (!keys ||
   2662a:	b1d9      	cbz	r1, 26664 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2662c:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2662e:	f010 0f24 	tst.w	r0, #36	; 0x24
   26632:	d017      	beq.n	26664 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   26634:	7d1a      	ldrb	r2, [r3, #20]
   26636:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   26638:	7b09      	ldrb	r1, [r1, #12]
   2663a:	42a2      	cmp	r2, r4
   2663c:	bf28      	it	cs
   2663e:	4622      	movcs	r2, r4
   26640:	4291      	cmp	r1, r2
   26642:	d901      	bls.n	26648 <update_keys_check+0x22>
			return false;
   26644:	2000      	movs	r0, #0
}
   26646:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   26648:	0682      	lsls	r2, r0, #26
   2664a:	d404      	bmi.n	26656 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2664c:	7a18      	ldrb	r0, [r3, #8]
   2664e:	3800      	subs	r0, #0
   26650:	bf18      	it	ne
   26652:	2001      	movne	r0, #1
   26654:	e7f7      	b.n	26646 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   26656:	2105      	movs	r1, #5
   26658:	1d18      	adds	r0, r3, #4
   2665a:	f7ff ffde 	bl	2661a <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2665e:	2800      	cmp	r0, #0
   26660:	d1f4      	bne.n	2664c <update_keys_check+0x26>
   26662:	e7ef      	b.n	26644 <update_keys_check+0x1e>
	return true;
   26664:	2001      	movs	r0, #1
   26666:	e7ee      	b.n	26646 <update_keys_check+0x20>

00026668 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26668:	2301      	movs	r3, #1
   2666a:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2666c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2666e:	e8d0 2fef 	ldaex	r2, [r0]
   26672:	401a      	ands	r2, r3
   26674:	e8c0 2fe1 	stlex	r1, r2, [r0]
   26678:	2900      	cmp	r1, #0
   2667a:	d1f8      	bne.n	2666e <atomic_clear_bit+0x6>
}
   2667c:	4770      	bx	lr

0002667e <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2667e:	680b      	ldr	r3, [r1, #0]
   26680:	6003      	str	r3, [r0, #0]
   26682:	888b      	ldrh	r3, [r1, #4]
   26684:	8083      	strh	r3, [r0, #4]
   26686:	798b      	ldrb	r3, [r1, #6]
   26688:	7183      	strb	r3, [r0, #6]
   2668a:	4770      	bx	lr

0002668c <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   2668c:	2007      	movs	r0, #7
   2668e:	4770      	bx	lr

00026690 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   26690:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26692:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   26694:	2200      	movs	r2, #0
   26696:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   26698:	4604      	mov	r4, r0
   2669a:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2669c:	460a      	mov	r2, r1
   2669e:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   266a2:	2106      	movs	r1, #6
   266a4:	f7ff f90c 	bl	258c0 <bt_l2cap_send_cb>
   266a8:	b128      	cbz	r0, 266b6 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   266aa:	4628      	mov	r0, r5
}
   266ac:	b003      	add	sp, #12
   266ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   266b2:	f7f1 bfcb 	b.w	1864c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   266b6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   266ba:	2300      	movs	r3, #0
   266bc:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   266c0:	b003      	add	sp, #12
   266c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   266c6:	f7f9 bae9 	b.w	1fc9c <k_work_reschedule>

000266ca <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   266ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   266cc:	ab0b      	add	r3, sp, #44	; 0x2c
   266ce:	9305      	str	r3, [sp, #20]
   266d0:	9303      	str	r3, [sp, #12]
   266d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   266d4:	9302      	str	r3, [sp, #8]
   266d6:	2300      	movs	r3, #0
   266d8:	4618      	mov	r0, r3
   266da:	e9cd 3300 	strd	r3, r3, [sp]
   266de:	f7e7 fc65 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   266e2:	b007      	add	sp, #28
   266e4:	f85d fb04 	ldr.w	pc, [sp], #4

000266e8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   266e8:	2301      	movs	r3, #1
   266ea:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   266ec:	e8d0 2fef 	ldaex	r2, [r0]
   266f0:	431a      	orrs	r2, r3
   266f2:	e8c0 2fe1 	stlex	r1, r2, [r0]
   266f6:	2900      	cmp	r1, #0
   266f8:	d1f8      	bne.n	266ec <atomic_set_bit+0x4>
}
   266fa:	4770      	bx	lr

000266fc <smp_keypress_notif>:
{
   266fc:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   266fe:	210e      	movs	r1, #14
   26700:	f7ff fff2 	bl	266e8 <atomic_set_bit>
}
   26704:	2000      	movs	r0, #0
   26706:	bd08      	pop	{r3, pc}

00026708 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   26708:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2670a:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2670c:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2670e:	4628      	mov	r0, r5
   26710:	2104      	movs	r1, #4
   26712:	f7ff ff82 	bl	2661a <atomic_test_bit>
   26716:	b168      	cbz	r0, 26734 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   26718:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2671a:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2671c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2671e:	4608      	mov	r0, r1
   26720:	f7ff f8cb 	bl	258ba <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   26724:	4604      	mov	r4, r0
   26726:	b940      	cbnz	r0, 2673a <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   26728:	2104      	movs	r1, #4
   2672a:	4628      	mov	r0, r5
   2672c:	f7ff ffdc 	bl	266e8 <atomic_set_bit>
}
   26730:	4620      	mov	r0, r4
   26732:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   26734:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   26738:	e7ef      	b.n	2671a <smp_create_pdu.constprop.0+0x12>
   2673a:	2101      	movs	r1, #1
   2673c:	300c      	adds	r0, #12
   2673e:	f7f2 f8a7 	bl	18890 <net_buf_simple_add>
	hdr->code = op;
   26742:	7006      	strb	r6, [r0, #0]
	return buf;
   26744:	e7f4      	b.n	26730 <smp_create_pdu.constprop.0+0x28>

00026746 <send_pairing_rsp>:
{
   26746:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   26748:	2102      	movs	r1, #2
{
   2674a:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2674c:	f7ff ffdc 	bl	26708 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   26750:	4605      	mov	r5, r0
   26752:	b180      	cbz	r0, 26776 <send_pairing_rsp+0x30>
   26754:	2106      	movs	r1, #6
   26756:	300c      	adds	r0, #12
   26758:	f7f2 f89a 	bl	18890 <net_buf_simple_add>
   2675c:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   26760:	2200      	movs	r2, #0
   26762:	6003      	str	r3, [r0, #0]
   26764:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   26768:	4629      	mov	r1, r5
   2676a:	8083      	strh	r3, [r0, #4]
   2676c:	4620      	mov	r0, r4
   2676e:	f7ff ff8f 	bl	26690 <smp_send.constprop.0>
	return 0;
   26772:	2000      	movs	r0, #0
}
   26774:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26776:	2008      	movs	r0, #8
   26778:	e7fc      	b.n	26774 <send_pairing_rsp+0x2e>

0002677a <smp_send_pairing_random>:
{
   2677a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2677c:	2104      	movs	r1, #4
{
   2677e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   26780:	f7ff ffc2 	bl	26708 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   26784:	4605      	mov	r5, r0
   26786:	b1a0      	cbz	r0, 267b2 <smp_send_pairing_random+0x38>
   26788:	2110      	movs	r1, #16
   2678a:	300c      	adds	r0, #12
   2678c:	f7f2 f880 	bl	18890 <net_buf_simple_add>
   26790:	f104 0327 	add.w	r3, r4, #39	; 0x27
   26794:	f104 0237 	add.w	r2, r4, #55	; 0x37
   26798:	f853 1b04 	ldr.w	r1, [r3], #4
   2679c:	4293      	cmp	r3, r2
   2679e:	f840 1b04 	str.w	r1, [r0], #4
   267a2:	d1f9      	bne.n	26798 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   267a4:	4620      	mov	r0, r4
   267a6:	2200      	movs	r2, #0
   267a8:	4629      	mov	r1, r5
   267aa:	f7ff ff71 	bl	26690 <smp_send.constprop.0>
	return 0;
   267ae:	2000      	movs	r0, #0
}
   267b0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   267b2:	2008      	movs	r0, #8
   267b4:	e7fc      	b.n	267b0 <smp_send_pairing_random+0x36>

000267b6 <smp_dhkey_check>:
{
   267b6:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   267b8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   267bc:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   267be:	78db      	ldrb	r3, [r3, #3]
   267c0:	2b01      	cmp	r3, #1
   267c2:	d119      	bne.n	267f8 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   267c4:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   267c6:	1d06      	adds	r6, r0, #4
   267c8:	2110      	movs	r1, #16
   267ca:	4630      	mov	r0, r6
   267cc:	f7ff ff4c 	bl	26668 <atomic_clear_bit>
   267d0:	462b      	mov	r3, r5
   267d2:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   267d6:	f105 0110 	add.w	r1, r5, #16
   267da:	f853 0b04 	ldr.w	r0, [r3], #4
   267de:	428b      	cmp	r3, r1
   267e0:	f842 0b04 	str.w	r0, [r2], #4
   267e4:	d1f9      	bne.n	267da <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   267e6:	2107      	movs	r1, #7
   267e8:	4630      	mov	r0, r6
   267ea:	f7ff ff16 	bl	2661a <atomic_test_bit>
   267ee:	b128      	cbz	r0, 267fc <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   267f0:	2109      	movs	r1, #9
   267f2:	4630      	mov	r0, r6
   267f4:	f7ff ff78 	bl	266e8 <atomic_set_bit>
}
   267f8:	2000      	movs	r0, #0
   267fa:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   267fc:	210a      	movs	r1, #10
   267fe:	4630      	mov	r0, r6
   26800:	f7ff ff0b 	bl	2661a <atomic_test_bit>
   26804:	2800      	cmp	r0, #0
   26806:	d1f3      	bne.n	267f0 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   26808:	4620      	mov	r0, r4
}
   2680a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2680e:	f7f0 ba8d 	b.w	16d2c <compute_and_check_and_send_periph_dhcheck>

00026812 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   26812:	2007      	movs	r0, #7
   26814:	4770      	bx	lr

00026816 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26816:	2301      	movs	r3, #1
   26818:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2681c:	43ca      	mvns	r2, r1
{
   2681e:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26820:	e8d0 3fef 	ldaex	r3, [r0]
   26824:	ea03 0402 	and.w	r4, r3, r2
   26828:	e8c0 4fe5 	stlex	r5, r4, [r0]
   2682c:	2d00      	cmp	r5, #0
   2682e:	d1f7      	bne.n	26820 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   26830:	4219      	tst	r1, r3
}
   26832:	bf14      	ite	ne
   26834:	2001      	movne	r0, #1
   26836:	2000      	moveq	r0, #0
   26838:	bd30      	pop	{r4, r5, pc}

0002683a <smp_reset>:
{
   2683a:	b538      	push	{r3, r4, r5, lr}
   2683c:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2683e:	2500      	movs	r5, #0
   26840:	1d03      	adds	r3, r0, #4
   26842:	e8d3 2fef 	ldaex	r2, [r3]
   26846:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2684a:	2900      	cmp	r1, #0
   2684c:	d1f9      	bne.n	26842 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   2684e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   26852:	f7f9 fa29 	bl	1fca8 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   26856:	7225      	strb	r5, [r4, #8]
   26858:	e8d4 3fef 	ldaex	r3, [r4]
   2685c:	e8c4 5fe2 	stlex	r2, r5, [r4]
   26860:	2a00      	cmp	r2, #0
   26862:	d1f9      	bne.n	26858 <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   26864:	4620      	mov	r0, r4
}
   26866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2686a:	2101      	movs	r1, #1
   2686c:	f7ff bf3c 	b.w	266e8 <atomic_set_bit>

00026870 <smp_c1>:
{
   26870:	b5f0      	push	{r4, r5, r6, r7, lr}
   26872:	b089      	sub	sp, #36	; 0x24
   26874:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   26878:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2687a:	7830      	ldrb	r0, [r6, #0]
{
   2687c:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2687e:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   26882:	7838      	ldrb	r0, [r7, #0]
   26884:	f101 0c10 	add.w	ip, r1, #16
   26888:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2688c:	6810      	ldr	r0, [r2, #0]
   2688e:	f8cd 0002 	str.w	r0, [sp, #2]
   26892:	8890      	ldrh	r0, [r2, #4]
   26894:	7992      	ldrb	r2, [r2, #6]
   26896:	f8ad 0006 	strh.w	r0, [sp, #6]
   2689a:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2689e:	681a      	ldr	r2, [r3, #0]
   268a0:	4668      	mov	r0, sp
   268a2:	f8cd 2009 	str.w	r2, [sp, #9]
   268a6:	889a      	ldrh	r2, [r3, #4]
   268a8:	799b      	ldrb	r3, [r3, #6]
   268aa:	f8ad 200d 	strh.w	r2, [sp, #13]
   268ae:	4622      	mov	r2, r4
   268b0:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   268b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   268b8:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   268bc:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   268be:	ea83 030e 	eor.w	r3, r3, lr
   268c2:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   268c6:	d1f5      	bne.n	268b4 <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   268c8:	4622      	mov	r2, r4
   268ca:	4621      	mov	r1, r4
   268cc:	4628      	mov	r0, r5
   268ce:	f7fe fe5a 	bl	25586 <bt_encrypt_le>
	if (err) {
   268d2:	4603      	mov	r3, r0
   268d4:	bb28      	cbnz	r0, 26922 <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   268d6:	9307      	str	r3, [sp, #28]
   268d8:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   268da:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   268de:	f8d7 0001 	ldr.w	r0, [r7, #1]
   268e2:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   268e6:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   268ea:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   268ec:	f8cd 2016 	str.w	r2, [sp, #22]
   268f0:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   268f4:	f104 0010 	add.w	r0, r4, #16
   268f8:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   268fc:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   268fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   26902:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   26906:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   26908:	ea82 0206 	eor.w	r2, r2, r6
   2690c:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   26910:	d1f5      	bne.n	268fe <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   26912:	4622      	mov	r2, r4
   26914:	4621      	mov	r1, r4
   26916:	4628      	mov	r0, r5
}
   26918:	b009      	add	sp, #36	; 0x24
   2691a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2691e:	f7fe be32 	b.w	25586 <bt_encrypt_le>
}
   26922:	b009      	add	sp, #36	; 0x24
   26924:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026926 <legacy_pairing_confirm>:
{
   26926:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26928:	1d07      	adds	r7, r0, #4
{
   2692a:	4604      	mov	r4, r0
   2692c:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2692e:	210a      	movs	r1, #10
   26930:	4638      	mov	r0, r7
   26932:	f7ff fe72 	bl	2661a <atomic_test_bit>
   26936:	bb88      	cbnz	r0, 2699c <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   26938:	2104      	movs	r1, #4
   2693a:	4620      	mov	r0, r4
   2693c:	f7ff fed4 	bl	266e8 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   26940:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   26942:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   26946:	f7ff fedf 	bl	26708 <smp_create_pdu.constprop.0>
	if (!buf) {
   2694a:	4605      	mov	r5, r0
   2694c:	b1c0      	cbz	r0, 26980 <legacy_pairing_confirm+0x5a>
   2694e:	2110      	movs	r1, #16
   26950:	300c      	adds	r0, #12
   26952:	f7f1 ff9d 	bl	18890 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   26956:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   2695a:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2695c:	9002      	str	r0, [sp, #8]
   2695e:	9301      	str	r3, [sp, #4]
   26960:	9600      	str	r6, [sp, #0]
   26962:	f104 0310 	add.w	r3, r4, #16
   26966:	f104 0209 	add.w	r2, r4, #9
   2696a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2696e:	f104 0047 	add.w	r0, r4, #71	; 0x47
   26972:	f7ff ff7d 	bl	26870 <smp_c1>
   26976:	4606      	mov	r6, r0
   26978:	b128      	cbz	r0, 26986 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2697a:	4628      	mov	r0, r5
   2697c:	f7f1 fe66 	bl	1864c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   26980:	2008      	movs	r0, #8
}
   26982:	b005      	add	sp, #20
   26984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   26986:	4602      	mov	r2, r0
   26988:	4629      	mov	r1, r5
   2698a:	4620      	mov	r0, r4
   2698c:	f7ff fe80 	bl	26690 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26990:	4631      	mov	r1, r6
   26992:	4638      	mov	r0, r7
   26994:	f7ff fe68 	bl	26668 <atomic_clear_bit>
	return 0;
   26998:	2000      	movs	r0, #0
   2699a:	e7f2      	b.n	26982 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2699c:	2100      	movs	r1, #0
   2699e:	4638      	mov	r0, r7
   269a0:	f7ff fea2 	bl	266e8 <atomic_set_bit>
	return 0;
   269a4:	e7f8      	b.n	26998 <legacy_pairing_confirm+0x72>

000269a6 <bt_smp_request_ltk>:
{
   269a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   269aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
   269ac:	4604      	mov	r4, r0
   269ae:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   269b2:	f7ef fdcd 	bl	16550 <smp_chan_get>
	if (!smp) {
   269b6:	4605      	mov	r5, r0
   269b8:	2800      	cmp	r0, #0
   269ba:	d07c      	beq.n	26ab6 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   269bc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   269c0:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   269c2:	f1b8 0f00 	cmp.w	r8, #0
   269c6:	d128      	bne.n	26a1a <bt_smp_request_ltk+0x74>
   269c8:	e9dd 3200 	ldrd	r3, r2, [sp]
   269cc:	4313      	orrs	r3, r2
   269ce:	d124      	bne.n	26a1a <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   269d0:	2103      	movs	r1, #3
   269d2:	4630      	mov	r0, r6
   269d4:	f7ff fe21 	bl	2661a <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   269d8:	b1f8      	cbz	r0, 26a1a <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   269da:	2101      	movs	r1, #1
   269dc:	4630      	mov	r0, r6
   269de:	f7ff fe1c 	bl	2661a <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   269e2:	b1d0      	cbz	r0, 26a1a <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   269e4:	7d2c      	ldrb	r4, [r5, #20]
   269e6:	7b6b      	ldrb	r3, [r5, #13]
   269e8:	f105 0147 	add.w	r1, r5, #71	; 0x47
   269ec:	429c      	cmp	r4, r3
   269ee:	bf28      	it	cs
   269f0:	461c      	movcs	r4, r3
   269f2:	4622      	mov	r2, r4
   269f4:	4638      	mov	r0, r7
   269f6:	f001 fee4 	bl	287c2 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   269fa:	2c0f      	cmp	r4, #15
   269fc:	d805      	bhi.n	26a0a <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   269fe:	4641      	mov	r1, r8
   26a00:	f1c4 0210 	rsb	r2, r4, #16
   26a04:	1938      	adds	r0, r7, r4
   26a06:	f001 ff03 	bl	28810 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26a0a:	4630      	mov	r0, r6
   26a0c:	2101      	movs	r1, #1
   26a0e:	f7ff fe6b 	bl	266e8 <atomic_set_bit>
		return true;
   26a12:	2001      	movs	r0, #1
}
   26a14:	b002      	add	sp, #8
   26a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   26a1a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   26a1e:	b983      	cbnz	r3, 26a42 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   26a20:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   26a24:	4642      	mov	r2, r8
   26a26:	2020      	movs	r0, #32
   26a28:	7a21      	ldrb	r1, [r4, #8]
   26a2a:	f7f1 f9fd 	bl	17e28 <bt_keys_find>
   26a2e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   26a32:	b930      	cbnz	r0, 26a42 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   26a34:	4642      	mov	r2, r8
   26a36:	2001      	movs	r0, #1
   26a38:	7a21      	ldrb	r1, [r4, #8]
   26a3a:	f7f1 f9f5 	bl	17e28 <bt_keys_find>
   26a3e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   26a42:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   26a46:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   26a4a:	f1b8 0f00 	cmp.w	r8, #0
   26a4e:	d10c      	bne.n	26a6a <bt_smp_request_ltk+0xc4>
   26a50:	e9dd 3200 	ldrd	r3, r2, [sp]
   26a54:	4313      	orrs	r3, r2
   26a56:	d108      	bne.n	26a6a <bt_smp_request_ltk+0xc4>
   26a58:	b300      	cbz	r0, 26a9c <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   26a5a:	89c3      	ldrh	r3, [r0, #14]
   26a5c:	069a      	lsls	r2, r3, #26
   26a5e:	d505      	bpl.n	26a6c <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   26a60:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26a62:	f100 011a 	add.w	r1, r0, #26
   26a66:	4622      	mov	r2, r4
   26a68:	e7c4      	b.n	269f4 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   26a6a:	b1b8      	cbz	r0, 26a9c <bt_smp_request_ltk+0xf6>
   26a6c:	89c3      	ldrh	r3, [r0, #14]
   26a6e:	07db      	lsls	r3, r3, #31
   26a70:	d514      	bpl.n	26a9c <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   26a72:	2208      	movs	r2, #8
   26a74:	4669      	mov	r1, sp
   26a76:	3040      	adds	r0, #64	; 0x40
   26a78:	f001 fe93 	bl	287a2 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   26a7c:	b970      	cbnz	r0, 26a9c <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   26a7e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   26a82:	2202      	movs	r2, #2
   26a84:	a908      	add	r1, sp, #32
   26a86:	3048      	adds	r0, #72	; 0x48
   26a88:	f001 fe8b 	bl	287a2 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   26a8c:	4680      	mov	r8, r0
   26a8e:	b928      	cbnz	r0, 26a9c <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   26a90:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   26a94:	7b0c      	ldrb	r4, [r1, #12]
   26a96:	314a      	adds	r1, #74	; 0x4a
   26a98:	4622      	mov	r2, r4
   26a9a:	e7ab      	b.n	269f4 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26a9c:	210f      	movs	r1, #15
   26a9e:	4630      	mov	r0, r6
   26aa0:	f7ff fdbb 	bl	2661a <atomic_test_bit>
   26aa4:	b120      	cbz	r0, 26ab0 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   26aa6:	2202      	movs	r2, #2
   26aa8:	2106      	movs	r1, #6
   26aaa:	4620      	mov	r0, r4
   26aac:	f7ec ff24 	bl	138f8 <bt_conn_security_changed>
	smp_reset(smp);
   26ab0:	4628      	mov	r0, r5
   26ab2:	f7ff fec2 	bl	2683a <smp_reset>
		return false;
   26ab6:	2000      	movs	r0, #0
   26ab8:	e7ac      	b.n	26a14 <bt_smp_request_ltk+0x6e>

00026aba <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   26aba:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26abe:	4770      	bx	lr

00026ac0 <bt_smp_dhkey_ready>:
{
   26ac0:	b570      	push	{r4, r5, r6, lr}
   26ac2:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   26ac4:	2008      	movs	r0, #8
   26ac6:	f7ef fcb7 	bl	16438 <smp_find>
	if (smp) {
   26aca:	4605      	mov	r5, r0
   26acc:	b1e0      	cbz	r0, 26b08 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   26ace:	1d06      	adds	r6, r0, #4
   26ad0:	2108      	movs	r1, #8
   26ad2:	4630      	mov	r0, r6
   26ad4:	f7ff fdc8 	bl	26668 <atomic_clear_bit>
	if (!dhkey) {
   26ad8:	b3bc      	cbz	r4, 26b4a <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   26ada:	2107      	movs	r1, #7
   26adc:	f7ff fdc4 	bl	26668 <atomic_clear_bit>
   26ae0:	4623      	mov	r3, r4
   26ae2:	f105 0297 	add.w	r2, r5, #151	; 0x97
   26ae6:	f104 0120 	add.w	r1, r4, #32
   26aea:	f853 0b04 	ldr.w	r0, [r3], #4
   26aee:	428b      	cmp	r3, r1
   26af0:	f842 0b04 	str.w	r0, [r2], #4
   26af4:	d1f9      	bne.n	26aea <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26af6:	210a      	movs	r1, #10
   26af8:	4630      	mov	r0, r6
   26afa:	f7ff fd8e 	bl	2661a <atomic_test_bit>
   26afe:	b170      	cbz	r0, 26b1e <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26b00:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26b02:	4630      	mov	r0, r6
   26b04:	f7ff fdf0 	bl	266e8 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   26b08:	2007      	movs	r0, #7
   26b0a:	f7ef fc95 	bl	16438 <smp_find>
		if (smp) {
   26b0e:	4604      	mov	r4, r0
   26b10:	b1e8      	cbz	r0, 26b4e <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   26b12:	f7ef fd53 	bl	165bc <smp_dhkey_generate>
			if (err) {
   26b16:	4601      	mov	r1, r0
   26b18:	b1c8      	cbz	r0, 26b4e <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   26b1a:	4620      	mov	r0, r4
   26b1c:	e012      	b.n	26b44 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26b1e:	2110      	movs	r1, #16
   26b20:	4630      	mov	r0, r6
   26b22:	f7ff fd7a 	bl	2661a <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26b26:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26b28:	2800      	cmp	r0, #0
   26b2a:	d1ea      	bne.n	26b02 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   26b2c:	4630      	mov	r0, r6
   26b2e:	f7ff fd74 	bl	2661a <atomic_test_bit>
   26b32:	2800      	cmp	r0, #0
   26b34:	d0e8      	beq.n	26b08 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   26b36:	4628      	mov	r0, r5
   26b38:	f7f0 f8f8 	bl	16d2c <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   26b3c:	4601      	mov	r1, r0
   26b3e:	2800      	cmp	r0, #0
   26b40:	d0e2      	beq.n	26b08 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   26b42:	4628      	mov	r0, r5
   26b44:	f7f0 fc86 	bl	17454 <smp_error>
   26b48:	e7de      	b.n	26b08 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   26b4a:	210b      	movs	r1, #11
   26b4c:	e7f9      	b.n	26b42 <bt_smp_dhkey_ready+0x82>
}
   26b4e:	bd70      	pop	{r4, r5, r6, pc}

00026b50 <bt_smp_disconnected>:
{
   26b50:	b570      	push	{r4, r5, r6, lr}
   26b52:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   26b54:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   26b58:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26b5c:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   26b5e:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   26b62:	f7f9 f8a1 	bl	1fca8 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26b66:	2103      	movs	r1, #3
   26b68:	4620      	mov	r0, r4
   26b6a:	f7ff fd56 	bl	2661a <atomic_test_bit>
   26b6e:	b1a0      	cbz	r0, 26b9a <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   26b70:	2108      	movs	r1, #8
   26b72:	4630      	mov	r0, r6
   26b74:	f7f0 fbf0 	bl	17358 <smp_pairing_complete>
	if (keys) {
   26b78:	b13d      	cbz	r5, 26b8a <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   26b7a:	89eb      	ldrh	r3, [r5, #14]
   26b7c:	b113      	cbz	r3, 26b84 <bt_smp_disconnected+0x34>
   26b7e:	7b6b      	ldrb	r3, [r5, #13]
   26b80:	079b      	lsls	r3, r3, #30
   26b82:	d502      	bpl.n	26b8a <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   26b84:	4628      	mov	r0, r5
   26b86:	f7f1 fa35 	bl	17ff4 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   26b8a:	4630      	mov	r0, r6
}
   26b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26b90:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   26b94:	2100      	movs	r1, #0
   26b96:	f001 be3b 	b.w	28810 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26b9a:	2101      	movs	r1, #1
   26b9c:	4620      	mov	r0, r4
   26b9e:	f7ff fd3c 	bl	2661a <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26ba2:	2800      	cmp	r0, #0
   26ba4:	d1e4      	bne.n	26b70 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26ba6:	210f      	movs	r1, #15
   26ba8:	4620      	mov	r0, r4
   26baa:	f7ff fd36 	bl	2661a <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26bae:	2800      	cmp	r0, #0
   26bb0:	d1de      	bne.n	26b70 <bt_smp_disconnected+0x20>
   26bb2:	e7e1      	b.n	26b78 <bt_smp_disconnected+0x28>

00026bb4 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   26bb4:	b510      	push	{r4, lr}
   26bb6:	1e43      	subs	r3, r0, #1
   26bb8:	f100 0210 	add.w	r2, r0, #16
   26bbc:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   26bbe:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   26bc2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   26bc6:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   26bc8:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   26bca:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   26bcc:	d1f7      	bne.n	26bbe <sys_mem_swap.constprop.0+0xa>
	}
}
   26bce:	bd10      	pop	{r4, pc}

00026bd0 <bt_crypto_aes_cmac>:
{
   26bd0:	b570      	push	{r4, r5, r6, lr}
   26bd2:	b0c2      	sub	sp, #264	; 0x108
   26bd4:	460d      	mov	r5, r1
   26bd6:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   26bd8:	4601      	mov	r1, r0
   26bda:	aa16      	add	r2, sp, #88	; 0x58
   26bdc:	4668      	mov	r0, sp
{
   26bde:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   26be0:	f7fd fe01 	bl	247e6 <tc_cmac_setup>
   26be4:	b918      	cbnz	r0, 26bee <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   26be6:	f06f 0004 	mvn.w	r0, #4
}
   26bea:	b042      	add	sp, #264	; 0x108
   26bec:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   26bee:	4632      	mov	r2, r6
   26bf0:	4629      	mov	r1, r5
   26bf2:	4668      	mov	r0, sp
   26bf4:	f7fd fe22 	bl	2483c <tc_cmac_update>
   26bf8:	2800      	cmp	r0, #0
   26bfa:	d0f4      	beq.n	26be6 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   26bfc:	4669      	mov	r1, sp
   26bfe:	4620      	mov	r0, r4
   26c00:	f7fd fe86 	bl	24910 <tc_cmac_final>
   26c04:	2800      	cmp	r0, #0
   26c06:	d0ee      	beq.n	26be6 <bt_crypto_aes_cmac+0x16>
	return 0;
   26c08:	2000      	movs	r0, #0
   26c0a:	e7ee      	b.n	26bea <bt_crypto_aes_cmac+0x1a>

00026c0c <bt_crypto_f4>:
{
   26c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   26c0e:	460e      	mov	r6, r1
   26c10:	4614      	mov	r4, r2
   26c12:	461d      	mov	r5, r3
   26c14:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   26c16:	4601      	mov	r1, r0
   26c18:	2220      	movs	r2, #32
   26c1a:	a805      	add	r0, sp, #20
{
   26c1c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   26c1e:	f7f1 fa0b 	bl	18038 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   26c22:	2220      	movs	r2, #32
   26c24:	4631      	mov	r1, r6
   26c26:	a80d      	add	r0, sp, #52	; 0x34
   26c28:	f7f1 fa06 	bl	18038 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   26c2c:	4621      	mov	r1, r4
   26c2e:	2210      	movs	r2, #16
   26c30:	a801      	add	r0, sp, #4
	m[64] = z;
   26c32:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   26c36:	f7f1 f9ff 	bl	18038 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   26c3a:	463b      	mov	r3, r7
   26c3c:	2241      	movs	r2, #65	; 0x41
   26c3e:	a905      	add	r1, sp, #20
   26c40:	a801      	add	r0, sp, #4
   26c42:	f7ff ffc5 	bl	26bd0 <bt_crypto_aes_cmac>
	if (err) {
   26c46:	4604      	mov	r4, r0
   26c48:	b910      	cbnz	r0, 26c50 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   26c4a:	4638      	mov	r0, r7
   26c4c:	f7ff ffb2 	bl	26bb4 <sys_mem_swap.constprop.0>
}
   26c50:	4620      	mov	r0, r4
   26c52:	b017      	add	sp, #92	; 0x5c
   26c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026c56 <bt_crypto_f6>:
{
   26c56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26c5a:	4616      	mov	r6, r2
   26c5c:	461d      	mov	r5, r3
   26c5e:	b097      	sub	sp, #92	; 0x5c
   26c60:	4604      	mov	r4, r0
   26c62:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   26c66:	2210      	movs	r2, #16
   26c68:	a805      	add	r0, sp, #20
{
   26c6a:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   26c6c:	f7f1 f9e4 	bl	18038 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   26c70:	2210      	movs	r2, #16
   26c72:	4631      	mov	r1, r6
   26c74:	a809      	add	r0, sp, #36	; 0x24
   26c76:	f7f1 f9df 	bl	18038 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   26c7a:	2210      	movs	r2, #16
   26c7c:	4629      	mov	r1, r5
   26c7e:	a80d      	add	r0, sp, #52	; 0x34
   26c80:	f7f1 f9da 	bl	18038 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   26c84:	2203      	movs	r2, #3
   26c86:	991e      	ldr	r1, [sp, #120]	; 0x78
   26c88:	a811      	add	r0, sp, #68	; 0x44
   26c8a:	f7f1 f9d5 	bl	18038 <sys_memcpy_swap>
	m[51] = a1->type;
   26c8e:	4649      	mov	r1, r9
   26c90:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   26c94:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   26c98:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   26c9c:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   26c9e:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   26ca0:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   26ca2:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   26ca4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   26ca8:	f7f1 f9c6 	bl	18038 <sys_memcpy_swap>
	m[58] = a2->type;
   26cac:	4641      	mov	r1, r8
   26cae:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   26cb2:	2206      	movs	r2, #6
	m[58] = a2->type;
   26cb4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   26cb8:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   26cbc:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   26cc0:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   26cc4:	888b      	ldrh	r3, [r1, #4]
   26cc6:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   26cca:	f7f1 f9b5 	bl	18038 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   26cce:	4621      	mov	r1, r4
   26cd0:	2210      	movs	r2, #16
   26cd2:	a801      	add	r0, sp, #4
   26cd4:	f7f1 f9b0 	bl	18038 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   26cd8:	463b      	mov	r3, r7
   26cda:	2241      	movs	r2, #65	; 0x41
   26cdc:	a905      	add	r1, sp, #20
   26cde:	a801      	add	r0, sp, #4
   26ce0:	f7ff ff76 	bl	26bd0 <bt_crypto_aes_cmac>
	if (err) {
   26ce4:	4604      	mov	r4, r0
   26ce6:	b910      	cbnz	r0, 26cee <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   26ce8:	4638      	mov	r0, r7
   26cea:	f7ff ff63 	bl	26bb4 <sys_mem_swap.constprop.0>
}
   26cee:	4620      	mov	r0, r4
   26cf0:	b017      	add	sp, #92	; 0x5c
   26cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00026cf6 <fixed_data_unref>:
}
   26cf6:	4770      	bx	lr

00026cf8 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   26cf8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   26cfa:	6849      	ldr	r1, [r1, #4]
   26cfc:	6809      	ldr	r1, [r1, #0]
   26cfe:	f7f1 ba9d 	b.w	1823c <net_buf_alloc_len>

00026d02 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   26d02:	f7f8 b9c1 	b.w	1f088 <z_impl_k_queue_get>

00026d06 <net_buf_simple_push_u8>:
{
   26d06:	b510      	push	{r4, lr}
   26d08:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   26d0a:	2101      	movs	r1, #1
   26d0c:	f7f1 fd64 	bl	187d8 <net_buf_simple_push>
	*data = val;
   26d10:	7004      	strb	r4, [r0, #0]
}
   26d12:	bd10      	pop	{r4, pc}

00026d14 <net_buf_simple_pull_le16>:
{
   26d14:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   26d16:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   26d18:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   26d1a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   26d1c:	f7f1 fd7c 	bl	18818 <net_buf_simple_pull>
}
   26d20:	4620      	mov	r0, r4
   26d22:	bd10      	pop	{r4, pc}

00026d24 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   26d24:	6802      	ldr	r2, [r0, #0]
   26d26:	6880      	ldr	r0, [r0, #8]
}
   26d28:	1a10      	subs	r0, r2, r0
   26d2a:	4770      	bx	lr

00026d2c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26d2c:	8883      	ldrh	r3, [r0, #4]
   26d2e:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   26d30:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26d32:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   26d34:	6803      	ldr	r3, [r0, #0]
   26d36:	1a5b      	subs	r3, r3, r1
}
   26d38:	1ad0      	subs	r0, r2, r3
   26d3a:	4770      	bx	lr

00026d3c <net_buf_simple_add_mem>:
{
   26d3c:	b538      	push	{r3, r4, r5, lr}
   26d3e:	460d      	mov	r5, r1
   26d40:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26d42:	4611      	mov	r1, r2
   26d44:	f7f1 fda4 	bl	18890 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26d48:	4622      	mov	r2, r4
   26d4a:	4629      	mov	r1, r5
}
   26d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26d50:	f001 bd37 	b.w	287c2 <memcpy>

00026d54 <net_buf_simple_add_u8>:
{
   26d54:	b510      	push	{r4, lr}
   26d56:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   26d58:	2101      	movs	r1, #1
   26d5a:	f7f1 fd99 	bl	18890 <net_buf_simple_add>
	*u8 = val;
   26d5e:	7004      	strb	r4, [r0, #0]
}
   26d60:	bd10      	pop	{r4, pc}

00026d62 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26d62:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26d64:	ab0b      	add	r3, sp, #44	; 0x2c
   26d66:	9305      	str	r3, [sp, #20]
   26d68:	9303      	str	r3, [sp, #12]
   26d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26d6c:	2201      	movs	r2, #1
   26d6e:	9302      	str	r3, [sp, #8]
   26d70:	2300      	movs	r3, #0
   26d72:	4618      	mov	r0, r3
   26d74:	e9cd 3300 	strd	r3, r3, [sp]
   26d78:	f7e7 f918 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   26d7c:	b007      	add	sp, #28
   26d7e:	f85d fb04 	ldr.w	pc, [sp], #4

00026d82 <adc_context_on_timer_expired>:
{
   26d82:	b410      	push	{r4}
   26d84:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26d86:	3808      	subs	r0, #8
   26d88:	e8d0 2fef 	ldaex	r2, [r0]
   26d8c:	1c51      	adds	r1, r2, #1
   26d8e:	e8c0 1fe4 	stlex	r4, r1, [r0]
   26d92:	2c00      	cmp	r4, #0
   26d94:	d1f8      	bne.n	26d88 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   26d96:	b912      	cbnz	r2, 26d9e <adc_context_on_timer_expired+0x1c>
}
   26d98:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   26d9a:	f7f1 bdbb 	b.w	18914 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   26d9e:	f06f 020f 	mvn.w	r2, #15
}
   26da2:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   26da4:	669a      	str	r2, [r3, #104]	; 0x68
}
   26da6:	4770      	bx	lr

00026da8 <set_on_state>:
	__asm__ volatile(
   26da8:	f04f 0320 	mov.w	r3, #32
   26dac:	f3ef 8211 	mrs	r2, BASEPRI
   26db0:	f383 8812 	msr	BASEPRI_MAX, r3
   26db4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   26db8:	6803      	ldr	r3, [r0, #0]
   26dba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   26dbe:	f043 0302 	orr.w	r3, r3, #2
   26dc2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   26dc4:	f382 8811 	msr	BASEPRI, r2
   26dc8:	f3bf 8f6f 	isb	sy
}
   26dcc:	4770      	bx	lr

00026dce <async_start>:
{
   26dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26dd0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   26dd2:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   26dd4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   26dd6:	f04f 0520 	mov.w	r5, #32
   26dda:	f3ef 8611 	mrs	r6, BASEPRI
   26dde:	f385 8812 	msr	BASEPRI_MAX, r5
   26de2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   26de6:	250c      	movs	r5, #12
   26de8:	4369      	muls	r1, r5
   26dea:	440c      	add	r4, r1
   26dec:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   26df0:	f005 0c07 	and.w	ip, r5, #7
   26df4:	f1bc 0f01 	cmp.w	ip, #1
   26df8:	d10c      	bne.n	26e14 <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   26dfa:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   26dfe:	f386 8811 	msr	BASEPRI, r6
   26e02:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   26e06:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   26e0a:	6843      	ldr	r3, [r0, #4]
   26e0c:	585b      	ldr	r3, [r3, r1]
   26e0e:	4798      	blx	r3
	return 0;
   26e10:	2000      	movs	r0, #0
}
   26e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   26e14:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   26e18:	42af      	cmp	r7, r5
   26e1a:	f386 8811 	msr	BASEPRI, r6
   26e1e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   26e22:	bf0c      	ite	eq
   26e24:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   26e28:	f04f 30ff 	movne.w	r0, #4294967295
   26e2c:	e7f1      	b.n	26e12 <async_start+0x44>

00026e2e <api_start>:
{
   26e2e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   26e30:	2480      	movs	r4, #128	; 0x80
   26e32:	9400      	str	r4, [sp, #0]
   26e34:	f7ff ffcb 	bl	26dce <async_start>
}
   26e38:	b002      	add	sp, #8
   26e3a:	bd10      	pop	{r4, pc}

00026e3c <onoff_started_callback>:
	return &data->mgr[type];
   26e3c:	6900      	ldr	r0, [r0, #16]
   26e3e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   26e40:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   26e44:	2100      	movs	r1, #0
   26e46:	4710      	bx	r2

00026e48 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   26e48:	2003      	movs	r0, #3
   26e4a:	f7f4 bfe3 	b.w	1be14 <nrfx_clock_start>

00026e4e <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   26e4e:	2002      	movs	r0, #2
   26e50:	f7f4 bfe0 	b.w	1be14 <nrfx_clock_start>

00026e54 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   26e54:	2000      	movs	r0, #0
   26e56:	f7f4 bfdd 	b.w	1be14 <nrfx_clock_start>

00026e5a <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   26e5a:	2003      	movs	r0, #3
   26e5c:	f7f5 b858 	b.w	1bf10 <nrfx_clock_stop>

00026e60 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   26e60:	2002      	movs	r0, #2
   26e62:	f7f5 b855 	b.w	1bf10 <nrfx_clock_stop>

00026e66 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   26e66:	2000      	movs	r0, #0
   26e68:	f7f5 b852 	b.w	1bf10 <nrfx_clock_stop>

00026e6c <blocking_start_callback>:
{
   26e6c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   26e6e:	f7f8 b975 	b.w	1f15c <z_impl_k_sem_give>

00026e72 <api_stop>:
	return stop(dev, subsys, CTX_API);
   26e72:	2280      	movs	r2, #128	; 0x80
   26e74:	f7f1 bfa0 	b.w	18db8 <stop>

00026e78 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e78:	6843      	ldr	r3, [r0, #4]
}
   26e7a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e7c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26e7e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   26e80:	600b      	str	r3, [r1, #0]
}
   26e82:	4770      	bx	lr

00026e84 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e84:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   26e86:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e8a:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   26e8c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   26e90:	6098      	str	r0, [r3, #8]
}
   26e92:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26e94:	60d9      	str	r1, [r3, #12]
   26e96:	4770      	bx	lr

00026e98 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e98:	6843      	ldr	r3, [r0, #4]
}
   26e9a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e9c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   26e9e:	6099      	str	r1, [r3, #8]
}
   26ea0:	4770      	bx	lr

00026ea2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26ea2:	6843      	ldr	r3, [r0, #4]
}
   26ea4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26ea6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   26ea8:	60d9      	str	r1, [r3, #12]
}
   26eaa:	4770      	bx	lr

00026eac <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26eac:	6843      	ldr	r3, [r0, #4]
   26eae:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   26eb0:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   26eb2:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   26eb6:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   26eb8:	6090      	str	r0, [r2, #8]
}
   26eba:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26ebc:	60d3      	str	r3, [r2, #12]
   26ebe:	4770      	bx	lr

00026ec0 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   26ec0:	2200      	movs	r2, #0
   26ec2:	2101      	movs	r1, #1
   26ec4:	200a      	movs	r0, #10
   26ec6:	f7e8 bad5 	b.w	f474 <z_arm_irq_priority_set>

00026eca <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   26eca:	b510      	push	{r4, lr}
	while (*count) {
   26ecc:	680b      	ldr	r3, [r1, #0]
   26ece:	b913      	cbnz	r3, 26ed6 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   26ed0:	4618      	mov	r0, r3
	*buf_len = 0;
   26ed2:	6013      	str	r3, [r2, #0]
	return NULL;
   26ed4:	e005      	b.n	26ee2 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   26ed6:	6803      	ldr	r3, [r0, #0]
   26ed8:	685c      	ldr	r4, [r3, #4]
   26eda:	b11c      	cbz	r4, 26ee4 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   26edc:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   26ede:	6803      	ldr	r3, [r0, #0]
   26ee0:	6818      	ldr	r0, [r3, #0]
}
   26ee2:	bd10      	pop	{r4, pc}
		++(*current);
   26ee4:	3308      	adds	r3, #8
   26ee6:	6003      	str	r3, [r0, #0]
		--(*count);
   26ee8:	680b      	ldr	r3, [r1, #0]
   26eea:	3b01      	subs	r3, #1
   26eec:	600b      	str	r3, [r1, #0]
   26eee:	e7ed      	b.n	26ecc <spi_context_get_next_buf.constprop.0+0x2>

00026ef0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26ef0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26ef2:	ab0b      	add	r3, sp, #44	; 0x2c
   26ef4:	9305      	str	r3, [sp, #20]
   26ef6:	9303      	str	r3, [sp, #12]
   26ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26efa:	2201      	movs	r2, #1
   26efc:	9302      	str	r3, [sp, #8]
   26efe:	2300      	movs	r3, #0
   26f00:	4618      	mov	r0, r3
   26f02:	e9cd 3300 	strd	r3, r3, [sp]
   26f06:	f7e7 f851 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   26f0a:	b007      	add	sp, #28
   26f0c:	f85d fb04 	ldr.w	pc, [sp], #4

00026f10 <_spi_context_cs_control>:
{
   26f10:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   26f12:	6803      	ldr	r3, [r0, #0]
{
   26f14:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   26f16:	b1e3      	cbz	r3, 26f52 <_spi_context_cs_control+0x42>
   26f18:	6898      	ldr	r0, [r3, #8]
   26f1a:	b1d0      	cbz	r0, 26f52 <_spi_context_cs_control+0x42>
   26f1c:	6805      	ldr	r5, [r0, #0]
   26f1e:	b1c5      	cbz	r5, 26f52 <_spi_context_cs_control+0x42>
		if (on) {
   26f20:	b149      	cbz	r1, 26f36 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   26f22:	2101      	movs	r1, #1
   26f24:	f7f2 fb32 	bl	1958c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   26f28:	6823      	ldr	r3, [r4, #0]
   26f2a:	689b      	ldr	r3, [r3, #8]
   26f2c:	6898      	ldr	r0, [r3, #8]
}
   26f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   26f32:	f001 bb3d 	b.w	285b0 <z_impl_k_busy_wait>
			if (!force_off &&
   26f36:	b912      	cbnz	r2, 26f3e <_spi_context_cs_control+0x2e>
   26f38:	889b      	ldrh	r3, [r3, #4]
   26f3a:	04db      	lsls	r3, r3, #19
   26f3c:	d409      	bmi.n	26f52 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   26f3e:	6880      	ldr	r0, [r0, #8]
   26f40:	f001 fb36 	bl	285b0 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   26f44:	6823      	ldr	r3, [r4, #0]
   26f46:	2100      	movs	r1, #0
   26f48:	6898      	ldr	r0, [r3, #8]
}
   26f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   26f4e:	f7f2 bb1d 	b.w	1958c <gpio_pin_set_dt.isra.0>
}
   26f52:	bd38      	pop	{r3, r4, r5, pc}

00026f54 <spi_context_unlock_unconditionally>:
{
   26f54:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   26f56:	2201      	movs	r2, #1
   26f58:	2100      	movs	r1, #0
{
   26f5a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   26f5c:	f7ff ffd8 	bl	26f10 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   26f60:	69a3      	ldr	r3, [r4, #24]
   26f62:	b933      	cbnz	r3, 26f72 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   26f64:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   26f66:	f104 0010 	add.w	r0, r4, #16
}
   26f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26f6e:	f7f8 b8f5 	b.w	1f15c <z_impl_k_sem_give>
   26f72:	bd10      	pop	{r4, pc}

00026f74 <spi_nrfx_release>:
{
   26f74:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   26f76:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   26f78:	6803      	ldr	r3, [r0, #0]
   26f7a:	428b      	cmp	r3, r1
   26f7c:	d106      	bne.n	26f8c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   26f7e:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   26f82:	b934      	cbnz	r4, 26f92 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   26f84:	f7ff ffe6 	bl	26f54 <spi_context_unlock_unconditionally>
	return 0;
   26f88:	4620      	mov	r0, r4
}
   26f8a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26f8c:	f06f 0015 	mvn.w	r0, #21
   26f90:	e7fb      	b.n	26f8a <spi_nrfx_release+0x16>
		return -EBUSY;
   26f92:	f06f 000f 	mvn.w	r0, #15
   26f96:	e7f8      	b.n	26f8a <spi_nrfx_release+0x16>

00026f98 <k_sem_give>:
   26f98:	f7f8 b8e0 	b.w	1f15c <z_impl_k_sem_give>

00026f9c <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   26f9c:	b918      	cbnz	r0, 26fa6 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   26f9e:	f101 0030 	add.w	r0, r1, #48	; 0x30
   26fa2:	f7ff bff9 	b.w	26f98 <k_sem_give>
}
   26fa6:	4770      	bx	lr

00026fa8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26fa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26faa:	ab0b      	add	r3, sp, #44	; 0x2c
   26fac:	9305      	str	r3, [sp, #20]
   26fae:	9303      	str	r3, [sp, #12]
   26fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26fb2:	9302      	str	r3, [sp, #8]
   26fb4:	2300      	movs	r3, #0
   26fb6:	4618      	mov	r0, r3
   26fb8:	e9cd 3300 	strd	r3, r3, [sp]
   26fbc:	f7e6 fff6 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   26fc0:	b007      	add	sp, #28
   26fc2:	f85d fb04 	ldr.w	pc, [sp], #4

00026fc6 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   26fc6:	f04f 32ff 	mov.w	r2, #4294967295
   26fca:	f04f 33ff 	mov.w	r3, #4294967295
   26fce:	3018      	adds	r0, #24
   26fd0:	f7f8 b908 	b.w	1f1e4 <z_impl_k_sem_take>

00026fd4 <qspi_trans_lock.isra.0>:
   26fd4:	f04f 32ff 	mov.w	r2, #4294967295
   26fd8:	f04f 33ff 	mov.w	r3, #4294967295
   26fdc:	f7f8 b902 	b.w	1f1e4 <z_impl_k_sem_take>

00026fe0 <qspi_nor_write_protection_set>:
{
   26fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   26fe2:	2200      	movs	r2, #0
   26fe4:	4291      	cmp	r1, r2
   26fe6:	bf0c      	ite	eq
   26fe8:	2306      	moveq	r3, #6
   26fea:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   26fec:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   26fee:	e9cd 2201 	strd	r2, r2, [sp, #4]
   26ff2:	9203      	str	r2, [sp, #12]
   26ff4:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   26ff8:	f7f2 fe30 	bl	19c5c <qspi_send_cmd>
		ret = -EIO;
   26ffc:	2800      	cmp	r0, #0
}
   26ffe:	bf18      	it	ne
   27000:	f06f 0004 	mvnne.w	r0, #4
   27004:	b005      	add	sp, #20
   27006:	f85d fb04 	ldr.w	pc, [sp], #4

0002700a <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2700a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2700c:	23ff      	movs	r3, #255	; 0xff
   2700e:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   27012:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   27016:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   27018:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2701a:	2301      	movs	r3, #1
   2701c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   27020:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   27022:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   27024:	f88d 300c 	strb.w	r3, [sp, #12]
   27028:	ab01      	add	r3, sp, #4
   2702a:	9204      	str	r2, [sp, #16]
   2702c:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2702e:	f7f2 fe15 	bl	19c5c <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   27032:	2800      	cmp	r0, #0
   27034:	bfa8      	it	ge
   27036:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2703a:	b007      	add	sp, #28
   2703c:	f85d fb04 	ldr.w	pc, [sp], #4

00027040 <is_regular_addr_valid>:
{
   27040:	b538      	push	{r3, r4, r5, lr}
   27042:	4605      	mov	r5, r0
   27044:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   27046:	f000 fc35 	bl	278b4 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2704a:	2d00      	cmp	r5, #0
   2704c:	db07      	blt.n	2705e <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2704e:	42a8      	cmp	r0, r5
   27050:	d905      	bls.n	2705e <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   27052:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   27054:	4284      	cmp	r4, r0
   27056:	bf8c      	ite	hi
   27058:	2000      	movhi	r0, #0
   2705a:	2001      	movls	r0, #1
}
   2705c:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2705e:	2000      	movs	r0, #0
   27060:	e7fc      	b.n	2705c <is_regular_addr_valid+0x1c>

00027062 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27062:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27064:	ab0b      	add	r3, sp, #44	; 0x2c
   27066:	9305      	str	r3, [sp, #20]
   27068:	9303      	str	r3, [sp, #12]
   2706a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2706c:	2201      	movs	r2, #1
   2706e:	9302      	str	r3, [sp, #8]
   27070:	2300      	movs	r3, #0
   27072:	4618      	mov	r0, r3
   27074:	e9cd 3300 	strd	r3, r3, [sp]
   27078:	f7e6 ff98 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   2707c:	b007      	add	sp, #28
   2707e:	f85d fb04 	ldr.w	pc, [sp], #4

00027082 <uarte_nrfx_config_get>:
{
   27082:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   27084:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   27086:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2708a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2708e:	2000      	movs	r0, #0
   27090:	4770      	bx	lr

00027092 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   27092:	6843      	ldr	r3, [r0, #4]
   27094:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   27096:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2709a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2709e:	4770      	bx	lr

000270a0 <tx_start>:
{
   270a0:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   270a2:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   270a4:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   270a6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   270aa:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   270ae:	2200      	movs	r2, #0
   270b0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   270b4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   270b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   270bc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   270c0:	6862      	ldr	r2, [r4, #4]
   270c2:	06d2      	lsls	r2, r2, #27
   270c4:	d511      	bpl.n	270ea <tx_start+0x4a>
	if (data->async) {
   270c6:	6902      	ldr	r2, [r0, #16]
   270c8:	68d2      	ldr	r2, [r2, #12]
   270ca:	b12a      	cbz	r2, 270d8 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   270cc:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   270d0:	f041 0101 	orr.w	r1, r1, #1
   270d4:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   270d8:	2108      	movs	r1, #8
	return config->uarte_regs;
   270da:	6842      	ldr	r2, [r0, #4]
   270dc:	6812      	ldr	r2, [r2, #0]
   270de:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   270e2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   270e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   270ea:	2201      	movs	r2, #1
   270ec:	609a      	str	r2, [r3, #8]
}
   270ee:	bd10      	pop	{r4, pc}

000270f0 <user_callback>:
	if (data->async->user_callback) {
   270f0:	6903      	ldr	r3, [r0, #16]
   270f2:	68da      	ldr	r2, [r3, #12]
   270f4:	6813      	ldr	r3, [r2, #0]
   270f6:	b10b      	cbz	r3, 270fc <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   270f8:	6852      	ldr	r2, [r2, #4]
   270fa:	4718      	bx	r3
}
   270fc:	4770      	bx	lr

000270fe <notify_uart_rx_rdy>:
{
   270fe:	b570      	push	{r4, r5, r6, lr}
   27100:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   27102:	6906      	ldr	r6, [r0, #16]
{
   27104:	4604      	mov	r4, r0
   27106:	460d      	mov	r5, r1
	struct uart_event evt = {
   27108:	2214      	movs	r2, #20
   2710a:	2100      	movs	r1, #0
   2710c:	a801      	add	r0, sp, #4
   2710e:	f001 fb7f 	bl	28810 <memset>
   27112:	2302      	movs	r3, #2
   27114:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   27118:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2711a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2711c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2711e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   27120:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   27122:	e9cd 3503 	strd	r3, r5, [sp, #12]
   27126:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   27128:	f7ff ffe2 	bl	270f0 <user_callback>
}
   2712c:	b006      	add	sp, #24
   2712e:	bd70      	pop	{r4, r5, r6, pc}

00027130 <rx_buf_release>:
{
   27130:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   27132:	680e      	ldr	r6, [r1, #0]
{
   27134:	4605      	mov	r5, r0
   27136:	460c      	mov	r4, r1
   27138:	b086      	sub	sp, #24
	if (*buf) {
   2713a:	b17e      	cbz	r6, 2715c <rx_buf_release+0x2c>
		struct uart_event evt = {
   2713c:	2214      	movs	r2, #20
   2713e:	2100      	movs	r1, #0
   27140:	a801      	add	r0, sp, #4
   27142:	f001 fb65 	bl	28810 <memset>
   27146:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   27148:	4628      	mov	r0, r5
   2714a:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2714e:	f88d 3004 	strb.w	r3, [sp, #4]
   27152:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   27154:	f7ff ffcc 	bl	270f0 <user_callback>
		*buf = NULL;
   27158:	2300      	movs	r3, #0
   2715a:	6023      	str	r3, [r4, #0]
}
   2715c:	b006      	add	sp, #24
   2715e:	bd70      	pop	{r4, r5, r6, pc}

00027160 <notify_rx_disable>:
{
   27160:	b510      	push	{r4, lr}
   27162:	b086      	sub	sp, #24
   27164:	4604      	mov	r4, r0
	struct uart_event evt = {
   27166:	2214      	movs	r2, #20
   27168:	2100      	movs	r1, #0
   2716a:	a801      	add	r0, sp, #4
   2716c:	f001 fb50 	bl	28810 <memset>
   27170:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   27172:	4620      	mov	r0, r4
   27174:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   27176:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2717a:	f7ff ffb9 	bl	270f0 <user_callback>
}
   2717e:	b006      	add	sp, #24
   27180:	bd10      	pop	{r4, pc}

00027182 <uarte_nrfx_rx_buf_rsp>:
{
   27182:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   27184:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   27186:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   27188:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2718a:	f04f 0020 	mov.w	r0, #32
   2718e:	f3ef 8611 	mrs	r6, BASEPRI
   27192:	f380 8812 	msr	BASEPRI_MAX, r0
   27196:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2719a:	68ec      	ldr	r4, [r5, #12]
   2719c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2719e:	b198      	cbz	r0, 271c8 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   271a0:	6e60      	ldr	r0, [r4, #100]	; 0x64
   271a2:	b9a0      	cbnz	r0, 271ce <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   271a4:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   271a6:	68ec      	ldr	r4, [r5, #12]
   271a8:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   271aa:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   271ae:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   271b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   271b6:	f042 0220 	orr.w	r2, r2, #32
   271ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   271be:	f386 8811 	msr	BASEPRI, r6
   271c2:	f3bf 8f6f 	isb	sy
}
   271c6:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   271c8:	f06f 000c 	mvn.w	r0, #12
   271cc:	e7f7      	b.n	271be <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   271ce:	f06f 000f 	mvn.w	r0, #15
   271d2:	e7f4      	b.n	271be <uarte_nrfx_rx_buf_rsp+0x3c>

000271d4 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   271d4:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   271d6:	68d8      	ldr	r0, [r3, #12]
   271d8:	b120      	cbz	r0, 271e4 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   271da:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   271dc:	68db      	ldr	r3, [r3, #12]
	return 0;
   271de:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   271e0:	605a      	str	r2, [r3, #4]
	return 0;
   271e2:	4770      	bx	lr
		return -ENOTSUP;
   271e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   271e8:	4770      	bx	lr

000271ea <uarte_nrfx_poll_in>:
{
   271ea:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   271ec:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   271ee:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   271f0:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   271f2:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   271f4:	b960      	cbnz	r0, 27210 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   271f6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   271fa:	b164      	cbz	r4, 27216 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   271fc:	6992      	ldr	r2, [r2, #24]
   271fe:	7812      	ldrb	r2, [r2, #0]
   27200:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27202:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   27206:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2720a:	2201      	movs	r2, #1
   2720c:	601a      	str	r2, [r3, #0]
}
   2720e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   27210:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27214:	e7fb      	b.n	2720e <uarte_nrfx_poll_in+0x24>
		return -1;
   27216:	f04f 30ff 	mov.w	r0, #4294967295
   2721a:	e7f8      	b.n	2720e <uarte_nrfx_poll_in+0x24>

0002721c <uarte_nrfx_rx_disable>:
{
   2721c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2721e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   27220:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   27222:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   27224:	68eb      	ldr	r3, [r5, #12]
   27226:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   27228:	b1ba      	cbz	r2, 2725a <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2722a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2722c:	b153      	cbz	r3, 27244 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2722e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   27232:	f023 0320 	bic.w	r3, r3, #32
   27236:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2723a:	2300      	movs	r3, #0
   2723c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   27240:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   27244:	68e8      	ldr	r0, [r5, #12]
   27246:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   27248:	f001 f9e4 	bl	28614 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2724c:	2000      	movs	r0, #0
   2724e:	68eb      	ldr	r3, [r5, #12]
   27250:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27254:	2301      	movs	r3, #1
   27256:	6063      	str	r3, [r4, #4]
}
   27258:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2725a:	f06f 000d 	mvn.w	r0, #13
   2725e:	e7fb      	b.n	27258 <uarte_nrfx_rx_disable+0x3c>

00027260 <setup_tx_cache>:
{
   27260:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   27262:	68c3      	ldr	r3, [r0, #12]
   27264:	68da      	ldr	r2, [r3, #12]
   27266:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   27268:	1a52      	subs	r2, r2, r1
   2726a:	d00f      	beq.n	2728c <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2726c:	2a08      	cmp	r2, #8
   2726e:	bf28      	it	cs
   27270:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   27272:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   27274:	68c3      	ldr	r3, [r0, #12]
   27276:	6999      	ldr	r1, [r3, #24]
   27278:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2727a:	68c3      	ldr	r3, [r0, #12]
   2727c:	6898      	ldr	r0, [r3, #8]
   2727e:	69d9      	ldr	r1, [r3, #28]
   27280:	4401      	add	r1, r0
   27282:	6998      	ldr	r0, [r3, #24]
   27284:	f001 fa9d 	bl	287c2 <memcpy>
	return true;
   27288:	2001      	movs	r0, #1
}
   2728a:	bd08      	pop	{r3, pc}
		return false;
   2728c:	4610      	mov	r0, r2
   2728e:	e7fc      	b.n	2728a <setup_tx_cache+0x2a>

00027290 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   27290:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   27292:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   27294:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   27296:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   27298:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2729c:	b1f1      	cbz	r1, 272dc <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2729e:	2100      	movs	r1, #0
   272a0:	4618      	mov	r0, r3
   272a2:	f001 fab5 	bl	28810 <memset>
   272a6:	4603      	mov	r3, r0
   272a8:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   272aa:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   272ae:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   272b0:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   272b2:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   272b6:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   272ba:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   272be:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   272c0:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   272c4:	2800      	cmp	r0, #0
   272c6:	d0fb      	beq.n	272c0 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   272c8:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   272cc:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   272d0:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   272d4:	b92b      	cbnz	r3, 272e2 <rx_flush.isra.0+0x52>
			return rx_amount;
   272d6:	b2c0      	uxtb	r0, r0
}
   272d8:	b002      	add	sp, #8
   272da:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   272dc:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   272de:	4669      	mov	r1, sp
   272e0:	e7e3      	b.n	272aa <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   272e2:	4285      	cmp	r5, r0
   272e4:	d1f7      	bne.n	272d6 <rx_flush.isra.0+0x46>
   272e6:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   272e8:	4293      	cmp	r3, r2
   272ea:	d101      	bne.n	272f0 <rx_flush.isra.0+0x60>
	return 0;
   272ec:	2000      	movs	r0, #0
   272ee:	e7f3      	b.n	272d8 <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   272f0:	f813 1b01 	ldrb.w	r1, [r3], #1
   272f4:	2900      	cmp	r1, #0
   272f6:	d0f7      	beq.n	272e8 <rx_flush.isra.0+0x58>
   272f8:	e7ed      	b.n	272d6 <rx_flush.isra.0+0x46>

000272fa <async_uart_release>:
{
   272fa:	b570      	push	{r4, r5, r6, lr}
   272fc:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   272fe:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   27300:	f04f 0320 	mov.w	r3, #32
   27304:	f3ef 8611 	mrs	r6, BASEPRI
   27308:	f383 8812 	msr	BASEPRI_MAX, r3
   2730c:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   27310:	68d0      	ldr	r0, [r2, #12]
   27312:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   27316:	ea23 0301 	bic.w	r3, r3, r1
   2731a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2731e:	68d5      	ldr	r5, [r2, #12]
   27320:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   27324:	b973      	cbnz	r3, 27344 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   27326:	2902      	cmp	r1, #2
   27328:	d107      	bne.n	2733a <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2732a:	2205      	movs	r2, #5
   2732c:	6860      	ldr	r0, [r4, #4]
   2732e:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   27332:	f7ff ffad 	bl	27290 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   27336:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2733a:	2200      	movs	r2, #0
	return config->uarte_regs;
   2733c:	6863      	ldr	r3, [r4, #4]
   2733e:	681b      	ldr	r3, [r3, #0]
   27340:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   27344:	f386 8811 	msr	BASEPRI, r6
   27348:	f3bf 8f6f 	isb	sy
}
   2734c:	bd70      	pop	{r4, r5, r6, pc}

0002734e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2734e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   27350:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27352:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   27356:	b940      	cbnz	r0, 2736a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   27358:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2735a:	079b      	lsls	r3, r3, #30
   2735c:	d406      	bmi.n	2736c <is_tx_ready.isra.0+0x1e>
   2735e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   27362:	3800      	subs	r0, #0
   27364:	bf18      	it	ne
   27366:	2001      	movne	r0, #1
   27368:	4770      	bx	lr
   2736a:	2001      	movs	r0, #1
}
   2736c:	4770      	bx	lr

0002736e <start_tx_locked>:
{
   2736e:	b510      	push	{r4, lr}
   27370:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   27372:	6840      	ldr	r0, [r0, #4]
   27374:	f7ff ffeb 	bl	2734e <is_tx_ready.isra.0>
   27378:	68cb      	ldr	r3, [r1, #12]
   2737a:	b918      	cbnz	r0, 27384 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2737c:	2201      	movs	r2, #1
   2737e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   27382:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   27384:	2200      	movs	r2, #0
   27386:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2738a:	f04f 32ff 	mov.w	r2, #4294967295
   2738e:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   27390:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   27392:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   27396:	68cb      	ldr	r3, [r1, #12]
}
   27398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2739c:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   273a0:	f7ff be7e 	b.w	270a0 <tx_start>

000273a4 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   273a4:	b510      	push	{r4, lr}
   273a6:	4604      	mov	r4, r0
   273a8:	2200      	movs	r2, #0
   273aa:	2101      	movs	r1, #1
   273ac:	200b      	movs	r0, #11
   273ae:	f7e8 f861 	bl	f474 <z_arm_irq_priority_set>
   273b2:	200b      	movs	r0, #11
   273b4:	f7e8 f82e 	bl	f414 <arch_irq_enable>
   273b8:	4620      	mov	r0, r4
   273ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   273be:	f7f3 b9b1 	b.w	1a724 <uarte_instance_init.constprop.0>

000273c2 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   273c2:	b510      	push	{r4, lr}
   273c4:	4604      	mov	r4, r0
   273c6:	2200      	movs	r2, #0
   273c8:	2101      	movs	r1, #1
   273ca:	2008      	movs	r0, #8
   273cc:	f7e8 f852 	bl	f474 <z_arm_irq_priority_set>
   273d0:	2008      	movs	r0, #8
   273d2:	f7e8 f81f 	bl	f414 <arch_irq_enable>
   273d6:	4620      	mov	r0, r4
   273d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   273dc:	f7f3 b9a2 	b.w	1a724 <uarte_instance_init.constprop.0>

000273e0 <rx_timeout>:
{
   273e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   273e2:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   273e4:	68e3      	ldr	r3, [r4, #12]
   273e6:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   273ea:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   273ee:	bb13      	cbnz	r3, 27436 <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   273f0:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   273f2:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   273f4:	6873      	ldr	r3, [r6, #4]
   273f6:	681b      	ldr	r3, [r3, #0]
   273f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   273fc:	68e3      	ldr	r3, [r4, #12]
   273fe:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   27402:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   27404:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   27406:	bf1f      	itttt	ne
   27408:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2740a:	68e3      	ldrne	r3, [r4, #12]
   2740c:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2740e:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   27410:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   27412:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   27416:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   27418:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2741a:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2741c:	da0c      	bge.n	27438 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2741e:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   27422:	68e3      	ldr	r3, [r4, #12]
   27424:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   27428:	4281      	cmp	r1, r0
   2742a:	d80b      	bhi.n	27444 <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2742c:	2210      	movs	r2, #16
	return config->uarte_regs;
   2742e:	6873      	ldr	r3, [r6, #4]
   27430:	681b      	ldr	r3, [r3, #0]
   27432:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   27436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   27438:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2743c:	eb02 0c01 	add.w	ip, r2, r1
   27440:	4584      	cmp	ip, r0
   27442:	d904      	bls.n	2744e <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   27444:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   27446:	2d00      	cmp	r5, #0
   27448:	ddf0      	ble.n	2742c <rx_timeout+0x4c>
		clipped = true;
   2744a:	2701      	movs	r7, #1
   2744c:	e005      	b.n	2745a <rx_timeout+0x7a>
	if (len > 0) {
   2744e:	2a00      	cmp	r2, #0
   27450:	d0ec      	beq.n	2742c <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   27452:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   27456:	428a      	cmp	r2, r1
   27458:	da12      	bge.n	27480 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2745a:	4629      	mov	r1, r5
   2745c:	4630      	mov	r0, r6
   2745e:	f7ff fe4e 	bl	270fe <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   27462:	68e2      	ldr	r2, [r4, #12]
   27464:	6e13      	ldr	r3, [r2, #96]	; 0x60
   27466:	442b      	add	r3, r5
   27468:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2746a:	68e2      	ldr	r2, [r4, #12]
   2746c:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2746e:	442b      	add	r3, r5
   27470:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   27472:	2f00      	cmp	r7, #0
   27474:	d0da      	beq.n	2742c <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   27476:	68e0      	ldr	r0, [r4, #12]
   27478:	3080      	adds	r0, #128	; 0x80
   2747a:	f001 f8cb 	bl	28614 <z_impl_k_timer_stop>
}
   2747e:	e7d5      	b.n	2742c <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   27480:	1a52      	subs	r2, r2, r1
   27482:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   27484:	e7d2      	b.n	2742c <rx_timeout+0x4c>

00027486 <uarte_nrfx_tx_abort>:
{
   27486:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   27488:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2748a:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2748c:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2748e:	68da      	ldr	r2, [r3, #12]
   27490:	6891      	ldr	r1, [r2, #8]
   27492:	b151      	cbz	r1, 274aa <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   27494:	2400      	movs	r4, #0
   27496:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2749a:	68d8      	ldr	r0, [r3, #12]
   2749c:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2749e:	f001 f8b9 	bl	28614 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   274a2:	2301      	movs	r3, #1
	return 0;
   274a4:	4620      	mov	r0, r4
   274a6:	60eb      	str	r3, [r5, #12]
}
   274a8:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   274aa:	f06f 000d 	mvn.w	r0, #13
   274ae:	e7fb      	b.n	274a8 <uarte_nrfx_tx_abort+0x22>

000274b0 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   274b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   274b2:	6818      	ldr	r0, [r3, #0]
   274b4:	f7ff bfe7 	b.w	27486 <uarte_nrfx_tx_abort>

000274b8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   274b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   274ba:	ab0b      	add	r3, sp, #44	; 0x2c
   274bc:	9305      	str	r3, [sp, #20]
   274be:	9303      	str	r3, [sp, #12]
   274c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   274c2:	9302      	str	r3, [sp, #8]
   274c4:	2300      	movs	r3, #0
   274c6:	4618      	mov	r0, r3
   274c8:	e9cd 3300 	strd	r3, r3, [sp]
   274cc:	f7e6 fd6e 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   274d0:	b007      	add	sp, #28
   274d2:	f85d fb04 	ldr.w	pc, [sp], #4

000274d6 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   274d6:	2000      	movs	r0, #0
   274d8:	4770      	bx	lr

000274da <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   274da:	b538      	push	{r3, r4, r5, lr}
   274dc:	460c      	mov	r4, r1
   274de:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   274e0:	f7ea fb76 	bl	11bd0 <bt_is_ready>
   274e4:	b128      	cbz	r0, 274f2 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   274e6:	4629      	mov	r1, r5
   274e8:	4620      	mov	r0, r4
}
   274ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   274ee:	f7e9 bd7d 	b.w	10fec <bt_hci_le_rand>
}
   274f2:	f06f 000a 	mvn.w	r0, #10
   274f6:	bd38      	pop	{r3, r4, r5, pc}

000274f8 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   274f8:	4608      	mov	r0, r1
   274fa:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   274fc:	4611      	mov	r1, r2
   274fe:	f7f4 fac7 	bl	1ba90 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   27502:	2800      	cmp	r0, #0
	}

	return 0;
}
   27504:	bf18      	it	ne
   27506:	f06f 0004 	mvnne.w	r0, #4
   2750a:	bd08      	pop	{r3, pc}

0002750c <entropy_psa_crypto_rng_init>:
{
   2750c:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2750e:	f000 f921 	bl	27754 <psa_crypto_init>
		return -EIO;
   27512:	2800      	cmp	r0, #0
}
   27514:	bf18      	it	ne
   27516:	f06f 0004 	mvnne.w	r0, #4
   2751a:	bd08      	pop	{r3, pc}

0002751c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2751c:	4770      	bx	lr

0002751e <sys_clock_cycle_get_32>:
{
   2751e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   27520:	f7f3 feea 	bl	1b2f8 <z_nrf_rtc_timer_read>
}
   27524:	bd08      	pop	{r3, pc}

00027526 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   27526:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   27528:	6843      	ldr	r3, [r0, #4]
   2752a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2752c:	7a05      	ldrb	r5, [r0, #8]
   2752e:	6844      	ldr	r4, [r0, #4]
   27530:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   27534:	42a3      	cmp	r3, r4
   27536:	d302      	bcc.n	2753e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   27538:	f06f 0001 	mvn.w	r0, #1
}
   2753c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2753e:	795c      	ldrb	r4, [r3, #5]
   27540:	428c      	cmp	r4, r1
   27542:	d001      	beq.n	27548 <pinctrl_lookup_state+0x22>
		(*state)++;
   27544:	3308      	adds	r3, #8
   27546:	e7f0      	b.n	2752a <pinctrl_lookup_state+0x4>
			return 0;
   27548:	2000      	movs	r0, #0
   2754a:	e7f7      	b.n	2753c <pinctrl_lookup_state+0x16>

0002754c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27550:	4615      	mov	r5, r2
   27552:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   27554:	f04f 0901 	mov.w	r9, #1
   27558:	b085      	sub	sp, #20
   2755a:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2755e:	45d0      	cmp	r8, sl
   27560:	d103      	bne.n	2756a <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   27562:	2000      	movs	r0, #0
}
   27564:	b005      	add	sp, #20
   27566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2756a:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2756e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   27572:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   27576:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   27578:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2757c:	bf08      	it	eq
   2757e:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   27582:	2b22      	cmp	r3, #34	; 0x22
   27584:	f200 8091 	bhi.w	276aa <pinctrl_configure_pins+0x15e>
   27588:	e8df f003 	tbb	[pc, r3]
   2758c:	38231e12 	.word	0x38231e12
   27590:	8f383426 	.word	0x8f383426
   27594:	3b8f8f8f 	.word	0x3b8f8f8f
   27598:	8f8f8f65 	.word	0x8f8f8f65
   2759c:	8f8f8f8f 	.word	0x8f8f8f8f
   275a0:	71688f8f 	.word	0x71688f8f
   275a4:	8f8f7774 	.word	0x8f8f7774
   275a8:	83807a8f 	.word	0x83807a8f
   275ac:	8986      	.short	0x8986
   275ae:	8c          	.byte	0x8c
   275af:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   275b0:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   275b4:	a803      	add	r0, sp, #12
   275b6:	9403      	str	r4, [sp, #12]
   275b8:	f7f4 f8d6 	bl	1b768 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   275bc:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   275be:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   275c0:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   275c4:	6083      	str	r3, [r0, #8]
   275c6:	e002      	b.n	275ce <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   275c8:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   275cc:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   275ce:	46b3      	mov	fp, r6
   275d0:	e01e      	b.n	27610 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   275d2:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   275d6:	e7ed      	b.n	275b4 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   275d8:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   275da:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   275de:	a803      	add	r0, sp, #12
   275e0:	9403      	str	r4, [sp, #12]
   275e2:	f7f4 f8c1 	bl	1b768 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   275e6:	9b03      	ldr	r3, [sp, #12]
   275e8:	f04f 0b01 	mov.w	fp, #1
   275ec:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   275f0:	60c3      	str	r3, [r0, #12]
   275f2:	e00d      	b.n	27610 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   275f4:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   275f8:	2601      	movs	r6, #1
   275fa:	e7f0      	b.n	275de <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   275fc:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   27600:	e7e4      	b.n	275cc <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   27602:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   27606:	2f00      	cmp	r7, #0
   27608:	d1e0      	bne.n	275cc <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2760a:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   2760c:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2760e:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   27610:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27614:	a803      	add	r0, sp, #12
   27616:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2761a:	2a00      	cmp	r2, #0
   2761c:	bf1c      	itt	ne
   2761e:	2601      	movne	r6, #1
   27620:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   27624:	9301      	str	r3, [sp, #4]
   27626:	9403      	str	r4, [sp, #12]
   27628:	f7f4 f89e 	bl	1b768 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2762c:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2762e:	9b01      	ldr	r3, [sp, #4]
   27630:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   27634:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   27638:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2763c:	023b      	lsls	r3, r7, #8
   2763e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   27642:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   27646:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   2764a:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2764c:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   27650:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   27654:	e783      	b.n	2755e <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   27656:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2765a:	e7d4      	b.n	27606 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2765c:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   27660:	f8da 3000 	ldr.w	r3, [sl]
   27664:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   27668:	2b00      	cmp	r3, #0
   2766a:	d0c5      	beq.n	275f8 <pinctrl_configure_pins+0xac>
   2766c:	e7a2      	b.n	275b4 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2766e:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   27672:	e7f5      	b.n	27660 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   27674:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   27678:	e7f2      	b.n	27660 <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2767a:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2767e:	e7ef      	b.n	27660 <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   27680:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   27684:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   27686:	f04f 0b00 	mov.w	fp, #0
   2768a:	e7c1      	b.n	27610 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2768c:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   27690:	e790      	b.n	275b4 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   27692:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   27696:	e7f5      	b.n	27684 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   27698:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2769c:	e7f2      	b.n	27684 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2769e:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   276a2:	e7ef      	b.n	27684 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   276a4:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   276a8:	e7ec      	b.n	27684 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   276aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   276ae:	e759      	b.n	27564 <pinctrl_configure_pins+0x18>

000276b0 <mbox_nrf_register_callback>:
{
   276b0:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   276b2:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   276b4:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   276b6:	bf9f      	itttt	ls
   276b8:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   276bc:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   276c0:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   276c2:	2000      	movls	r0, #0
		return -EINVAL;
   276c4:	bf88      	it	hi
   276c6:	f06f 0015 	mvnhi.w	r0, #21
}
   276ca:	bd10      	pop	{r4, pc}

000276cc <mbox_nrf_mtu_get>:
}
   276cc:	2000      	movs	r0, #0
   276ce:	4770      	bx	lr

000276d0 <mbox_nrf_max_channels_get>:
}
   276d0:	2010      	movs	r0, #16
   276d2:	4770      	bx	lr

000276d4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   276d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   276d6:	ab0b      	add	r3, sp, #44	; 0x2c
   276d8:	9305      	str	r3, [sp, #20]
   276da:	9303      	str	r3, [sp, #12]
   276dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   276de:	2202      	movs	r2, #2
   276e0:	9302      	str	r3, [sp, #8]
   276e2:	2300      	movs	r3, #0
   276e4:	4618      	mov	r0, r3
   276e6:	e9cd 3300 	strd	r3, r3, [sp]
   276ea:	f7e6 fc5f 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   276ee:	b007      	add	sp, #28
   276f0:	f85d fb04 	ldr.w	pc, [sp], #4

000276f4 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   276f4:	2000      	movs	r0, #0
   276f6:	4770      	bx	lr

000276f8 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   276f8:	2300      	movs	r3, #0
{
   276fa:	b570      	push	{r4, r5, r6, lr}
   276fc:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   276fe:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   27702:	ab03      	add	r3, sp, #12
   27704:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   27706:	2304      	movs	r3, #4
{
   27708:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   2770a:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2770c:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   2770e:	b169      	cbz	r1, 2772c <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   27710:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   27712:	680b      	ldr	r3, [r1, #0]
   27714:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   27716:	684b      	ldr	r3, [r1, #4]
   27718:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2771a:	2101      	movs	r1, #1
   2771c:	2041      	movs	r0, #65	; 0x41
   2771e:	f7f4 f9f5 	bl	1bb0c <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   27722:	1e05      	subs	r5, r0, #0
   27724:	dc04      	bgt.n	27730 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   27726:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   27728:	b008      	add	sp, #32
   2772a:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2772c:	2601      	movs	r6, #1
   2772e:	e7f4      	b.n	2771a <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   27730:	1e23      	subs	r3, r4, #0
   27732:	bf18      	it	ne
   27734:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   27736:	2100      	movs	r1, #0
   27738:	e9cd 4300 	strd	r4, r3, [sp]
   2773c:	aa04      	add	r2, sp, #16
   2773e:	4633      	mov	r3, r6
   27740:	f7f4 f9c8 	bl	1bad4 <psa_call>
   27744:	4604      	mov	r4, r0
    psa_close(handle);
   27746:	4628      	mov	r0, r5
   27748:	f7f4 f9ee 	bl	1bb28 <psa_close>
    if (status < PSA_SUCCESS) {
   2774c:	2c00      	cmp	r4, #0
   2774e:	dbea      	blt.n	27726 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   27750:	4620      	mov	r0, r4
   27752:	e7e9      	b.n	27728 <tfm_platform_ioctl+0x30>

00027754 <psa_crypto_init>:
}
   27754:	2000      	movs	r0, #0
   27756:	4770      	bx	lr

00027758 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   27758:	b510      	push	{r4, lr}
   2775a:	b088      	sub	sp, #32
   2775c:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2775e:	ab05      	add	r3, sp, #20
   27760:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   27762:	230c      	movs	r3, #12
   27764:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   27766:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   27768:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2776c:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   27770:	eb0d 0103 	add.w	r1, sp, r3
   27774:	aa03      	add	r2, sp, #12
   27776:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   27778:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2777c:	f7ff ffbc 	bl	276f8 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   27780:	9b00      	ldr	r3, [sp, #0]
   27782:	6023      	str	r3, [r4, #0]

	return ret;
}
   27784:	b008      	add	sp, #32
   27786:	bd10      	pop	{r4, pc}

00027788 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   27788:	2300      	movs	r3, #0
{
   2778a:	b510      	push	{r4, lr}
   2778c:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2778e:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   27792:	ab05      	add	r3, sp, #20
   27794:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   27796:	230c      	movs	r3, #12
   27798:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2779a:	2304      	movs	r3, #4
{
   2779c:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2779e:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   277a0:	aa03      	add	r2, sp, #12
   277a2:	eb0d 0103 	add.w	r1, sp, r3
   277a6:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   277a8:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   277aa:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   277ae:	f7ff ffa3 	bl	276f8 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   277b2:	9b00      	ldr	r3, [sp, #0]
   277b4:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   277b6:	b008      	add	sp, #32
   277b8:	bd10      	pop	{r4, pc}

000277ba <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   277ba:	f7f4 b9c3 	b.w	1bb44 <SystemCoreClockUpdate>

000277be <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   277be:	4700      	bx	r0

000277c0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   277c0:	f000 bef6 	b.w	285b0 <z_impl_k_busy_wait>

000277c4 <nrf_gpio_pin_present_check>:
    switch (port)
   277c4:	0943      	lsrs	r3, r0, #5
   277c6:	d00b      	beq.n	277e0 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   277c8:	2b01      	cmp	r3, #1
   277ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   277ce:	bf18      	it	ne
   277d0:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   277d2:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   277d6:	fa23 f000 	lsr.w	r0, r3, r0
}
   277da:	f000 0001 	and.w	r0, r0, #1
   277de:	4770      	bx	lr
    switch (port)
   277e0:	f04f 33ff 	mov.w	r3, #4294967295
   277e4:	e7f5      	b.n	277d2 <nrf_gpio_pin_present_check+0xe>

000277e6 <pin_is_task_output>:
{
   277e6:	b508      	push	{r3, lr}
   277e8:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   277ea:	f7f4 fc2d 	bl	1c048 <pin_is_output>
   277ee:	b110      	cbz	r0, 277f6 <pin_is_task_output+0x10>
   277f0:	4610      	mov	r0, r2
   277f2:	f7f4 fc13 	bl	1c01c <pin_in_use_by_te>
}
   277f6:	f000 0001 	and.w	r0, r0, #1
   277fa:	bd08      	pop	{r3, pc}

000277fc <nrf_gpio_reconfigure>:
{
   277fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27800:	4617      	mov	r7, r2
   27802:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   27806:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27808:	a801      	add	r0, sp, #4
{
   2780a:	460c      	mov	r4, r1
   2780c:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2780e:	f7f4 fc9f 	bl	1c150 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   27812:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   27814:	1e39      	subs	r1, r7, #0
   27816:	bf18      	it	ne
   27818:	2101      	movne	r1, #1
   2781a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2781e:	1e23      	subs	r3, r4, #0
   27820:	bf18      	it	ne
   27822:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   27824:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   27826:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2782a:	bf14      	ite	ne
   2782c:	210c      	movne	r1, #12
   2782e:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   27830:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   27832:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   27836:	bf14      	ite	ne
   27838:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   2783c:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2783e:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   27842:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   27846:	bf14      	ite	ne
   27848:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2784c:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2784e:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   27852:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   27854:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   27858:	b104      	cbz	r4, 2785c <nrf_gpio_reconfigure+0x60>
   2785a:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2785c:	b10f      	cbz	r7, 27862 <nrf_gpio_reconfigure+0x66>
   2785e:	783f      	ldrb	r7, [r7, #0]
   27860:	007f      	lsls	r7, r7, #1
   27862:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   27864:	b10e      	cbz	r6, 2786a <nrf_gpio_reconfigure+0x6e>
   27866:	7836      	ldrb	r6, [r6, #0]
   27868:	00b6      	lsls	r6, r6, #2
   2786a:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2786c:	b18d      	cbz	r5, 27892 <nrf_gpio_reconfigure+0x96>
   2786e:	7829      	ldrb	r1, [r5, #0]
   27870:	0209      	lsls	r1, r1, #8
   27872:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   27874:	f1b8 0f00 	cmp.w	r8, #0
   27878:	d003      	beq.n	27882 <nrf_gpio_reconfigure+0x86>
   2787a:	f898 8000 	ldrb.w	r8, [r8]
   2787e:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   27882:	4321      	orrs	r1, r4
   27884:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   27888:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   2788c:	b002      	add	sp, #8
   2788e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   27892:	4629      	mov	r1, r5
   27894:	e7ed      	b.n	27872 <nrf_gpio_reconfigure+0x76>

00027896 <nrf_gpio_cfg_sense_set>:
{
   27896:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   27898:	f10d 030f 	add.w	r3, sp, #15
   2789c:	9301      	str	r3, [sp, #4]
   2789e:	2300      	movs	r3, #0
{
   278a0:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   278a4:	461a      	mov	r2, r3
   278a6:	4619      	mov	r1, r3
   278a8:	9300      	str	r3, [sp, #0]
   278aa:	f7ff ffa7 	bl	277fc <nrf_gpio_reconfigure>
}
   278ae:	b005      	add	sp, #20
   278b0:	f85d fb04 	ldr.w	pc, [sp], #4

000278b4 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   278b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   278b8:	4770      	bx	lr

000278ba <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   278ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   278be:	4770      	bx	lr

000278c0 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   278c0:	f44f 7080 	mov.w	r0, #256	; 0x100
   278c4:	4770      	bx	lr

000278c6 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   278c6:	2100      	movs	r1, #0
   278c8:	f7f5 b994 	b.w	1cbf4 <nrf_gpio_cfg.constprop.0>

000278cc <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   278cc:	2302      	movs	r3, #2
   278ce:	f7f5 b8cd 	b.w	1ca6c <qspi_xfer>

000278d2 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   278d2:	2303      	movs	r3, #3
   278d4:	f7f5 b8ca 	b.w	1ca6c <qspi_xfer>

000278d8 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   278d8:	2100      	movs	r1, #0
   278da:	2002      	movs	r0, #2
   278dc:	f7f5 bbec 	b.w	1d0b8 <nrfx_qspi_erase>

000278e0 <nrf_gpio_pin_clear>:
{
   278e0:	b507      	push	{r0, r1, r2, lr}
   278e2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   278e4:	a801      	add	r0, sp, #4
   278e6:	f7f5 fc61 	bl	1d1ac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   278ea:	2301      	movs	r3, #1
   278ec:	9a01      	ldr	r2, [sp, #4]
   278ee:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   278f0:	60c3      	str	r3, [r0, #12]
}
   278f2:	b003      	add	sp, #12
   278f4:	f85d fb04 	ldr.w	pc, [sp], #4

000278f8 <nrf_gpio_pin_set>:
{
   278f8:	b507      	push	{r0, r1, r2, lr}
   278fa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   278fc:	a801      	add	r0, sp, #4
   278fe:	f7f5 fc55 	bl	1d1ac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   27902:	2301      	movs	r3, #1
   27904:	9a01      	ldr	r2, [sp, #4]
   27906:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   27908:	6083      	str	r3, [r0, #8]
}
   2790a:	b003      	add	sp, #12
   2790c:	f85d fb04 	ldr.w	pc, [sp], #4

00027910 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   27910:	7f83      	ldrb	r3, [r0, #30]
   27912:	075a      	lsls	r2, r3, #29
   27914:	d40b      	bmi.n	2792e <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   27916:	7fc0      	ldrb	r0, [r0, #31]
   27918:	28ff      	cmp	r0, #255	; 0xff
   2791a:	d008      	beq.n	2792e <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   2791c:	079b      	lsls	r3, r3, #30
   2791e:	bf58      	it	pl
   27920:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   27924:	b909      	cbnz	r1, 2792a <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   27926:	f7ff bfdb 	b.w	278e0 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2792a:	f7ff bfe5 	b.w	278f8 <nrf_gpio_pin_set>
}
   2792e:	4770      	bx	lr

00027930 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   27930:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27934:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27936:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   27938:	4698      	mov	r8, r3
   2793a:	460f      	mov	r7, r1
   2793c:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2793e:	f7f5 fc35 	bl	1d1ac <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   27942:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   27944:	f89d 4020 	ldrb.w	r4, [sp, #32]
   27948:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2794c:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2794e:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   27952:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   27956:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2795a:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2795e:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   27962:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   27964:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   27968:	b002      	add	sp, #8
   2796a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002796e <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2796e:	1c43      	adds	r3, r0, #1
{
   27970:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   27972:	d005      	beq.n	27980 <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   27974:	2300      	movs	r3, #0
   27976:	2201      	movs	r2, #1
   27978:	4619      	mov	r1, r3
   2797a:	9300      	str	r3, [sp, #0]
   2797c:	f7ff ffd8 	bl	27930 <nrf_gpio_cfg.constprop.0>
}
   27980:	b003      	add	sp, #12
   27982:	f85d fb04 	ldr.w	pc, [sp], #4

00027986 <metal_device_open>:
{
   27986:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27988:	460c      	mov	r4, r1
   2798a:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2798c:	4606      	mov	r6, r0
   2798e:	b918      	cbnz	r0, 27998 <metal_device_open+0x12>
		return -EINVAL;
   27990:	f06f 0015 	mvn.w	r0, #21
}
   27994:	b002      	add	sp, #8
   27996:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   27998:	f7e1 fce2 	bl	9360 <strlen>
   2799c:	2800      	cmp	r0, #0
   2799e:	d0f7      	beq.n	27990 <metal_device_open+0xa>
   279a0:	2c00      	cmp	r4, #0
   279a2:	d0f5      	beq.n	27990 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   279a4:	4620      	mov	r0, r4
   279a6:	f7e1 fcdb 	bl	9360 <strlen>
   279aa:	2800      	cmp	r0, #0
   279ac:	d0f0      	beq.n	27990 <metal_device_open+0xa>
   279ae:	2d00      	cmp	r5, #0
   279b0:	d0ee      	beq.n	27990 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   279b2:	4630      	mov	r0, r6
   279b4:	a901      	add	r1, sp, #4
   279b6:	f7f5 ff0f 	bl	1d7d8 <metal_bus_find>
	if (error)
   279ba:	2800      	cmp	r0, #0
   279bc:	d1ea      	bne.n	27994 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   279be:	9801      	ldr	r0, [sp, #4]
   279c0:	6883      	ldr	r3, [r0, #8]
   279c2:	b12b      	cbz	r3, 279d0 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   279c4:	462a      	mov	r2, r5
   279c6:	4621      	mov	r1, r4
}
   279c8:	b002      	add	sp, #8
   279ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   279ce:	4718      	bx	r3
		return -ENODEV;
   279d0:	f06f 0012 	mvn.w	r0, #18
   279d4:	e7de      	b.n	27994 <metal_device_open+0xe>

000279d6 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   279d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   279da:	b089      	sub	sp, #36	; 0x24
   279dc:	9e10      	ldr	r6, [sp, #64]	; 0x40
   279de:	4604      	mov	r4, r0
   279e0:	4689      	mov	r9, r1
   279e2:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   279e4:	2100      	movs	r1, #0
   279e6:	2220      	movs	r2, #32
   279e8:	4668      	mov	r0, sp
{
   279ea:	461f      	mov	r7, r3
   279ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   279ee:	f000 ff0f 	bl	28810 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   279f2:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   279f4:	bf97      	itett	ls
   279f6:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   279f8:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   279fc:	40b3      	lslls	r3, r6
   279fe:	f103 33ff 	addls.w	r3, r3, #4294967295
   27a02:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   27a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   27a06:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   27a0a:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   27a0e:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   27a10:	3418      	adds	r4, #24
   27a12:	b145      	cbz	r5, 27a26 <metal_io_init+0x50>
   27a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27a18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   27a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   27a20:	b009      	add	sp, #36	; 0x24
   27a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   27a26:	466d      	mov	r5, sp
   27a28:	e7f4      	b.n	27a14 <metal_io_init+0x3e>

00027a2a <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   27a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   27a2c:	6804      	ldr	r4, [r0, #0]
		: NULL);
   27a2e:	1c66      	adds	r6, r4, #1
   27a30:	d031      	beq.n	27a96 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   27a32:	6885      	ldr	r5, [r0, #8]
   27a34:	42a9      	cmp	r1, r5
   27a36:	d22e      	bcs.n	27a96 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   27a38:	1864      	adds	r4, r4, r1
   27a3a:	d02c      	beq.n	27a96 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   27a3c:	185e      	adds	r6, r3, r1
   27a3e:	42ae      	cmp	r6, r5
		len = io->size - offset;
   27a40:	bf88      	it	hi
   27a42:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   27a44:	6a05      	ldr	r5, [r0, #32]
   27a46:	b135      	cbz	r5, 27a56 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   27a48:	9300      	str	r3, [sp, #0]
   27a4a:	2305      	movs	r3, #5
   27a4c:	47a8      	blx	r5
   27a4e:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   27a50:	4618      	mov	r0, r3
   27a52:	b002      	add	sp, #8
   27a54:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   27a56:	f3bf 8f5b 	dmb	ish
		while ( len && (
   27a5a:	4619      	mov	r1, r3
   27a5c:	1aa4      	subs	r4, r4, r2
   27a5e:	1910      	adds	r0, r2, r4
   27a60:	b119      	cbz	r1, 27a6a <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   27a62:	ea40 0502 	orr.w	r5, r0, r2
   27a66:	07ad      	lsls	r5, r5, #30
   27a68:	d10a      	bne.n	27a80 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   27a6a:	2903      	cmp	r1, #3
   27a6c:	dc0d      	bgt.n	27a8a <metal_io_block_read+0x60>
   27a6e:	3801      	subs	r0, #1
   27a70:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   27a72:	428a      	cmp	r2, r1
   27a74:	d0ec      	beq.n	27a50 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   27a76:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   27a7a:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   27a7e:	e7f8      	b.n	27a72 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   27a80:	7800      	ldrb	r0, [r0, #0]
			len--;
   27a82:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   27a84:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   27a88:	e7e9      	b.n	27a5e <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   27a8a:	f850 4b04 	ldr.w	r4, [r0], #4
   27a8e:	3904      	subs	r1, #4
   27a90:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   27a94:	e7e9      	b.n	27a6a <metal_io_block_read+0x40>
		return -ERANGE;
   27a96:	f06f 0321 	mvn.w	r3, #33	; 0x21
   27a9a:	e7d9      	b.n	27a50 <metal_io_block_read+0x26>

00027a9c <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   27a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27a9e:	6804      	ldr	r4, [r0, #0]
		: NULL);
   27aa0:	1c65      	adds	r5, r4, #1
   27aa2:	d032      	beq.n	27b0a <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   27aa4:	6885      	ldr	r5, [r0, #8]
   27aa6:	42a9      	cmp	r1, r5
   27aa8:	d22f      	bcs.n	27b0a <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   27aaa:	1864      	adds	r4, r4, r1
   27aac:	d02d      	beq.n	27b0a <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   27aae:	185e      	adds	r6, r3, r1
   27ab0:	42ae      	cmp	r6, r5
		len = io->size - offset;
   27ab2:	bf88      	it	hi
   27ab4:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   27ab6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   27ab8:	b1cd      	cbz	r5, 27aee <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   27aba:	9300      	str	r3, [sp, #0]
   27abc:	2305      	movs	r3, #5
   27abe:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   27ac0:	b002      	add	sp, #8
   27ac2:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   27ac4:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   27ac8:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   27aca:	7005      	strb	r5, [r0, #0]
			len--;
   27acc:	4615      	mov	r5, r2
   27ace:	18a0      	adds	r0, r4, r2
		while ( len && (
   27ad0:	b119      	cbz	r1, 27ada <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   27ad2:	ea40 0602 	orr.w	r6, r0, r2
   27ad6:	07b6      	lsls	r6, r6, #30
   27ad8:	d1f4      	bne.n	27ac4 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   27ada:	2903      	cmp	r1, #3
   27adc:	dc0a      	bgt.n	27af4 <metal_io_block_write+0x58>
   27ade:	3d01      	subs	r5, #1
   27ae0:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   27ae2:	4288      	cmp	r0, r1
   27ae4:	d10c      	bne.n	27b00 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   27ae6:	f3bf 8f5b 	dmb	ish
	retlen = len;
   27aea:	4618      	mov	r0, r3
   27aec:	e7e8      	b.n	27ac0 <metal_io_block_write+0x24>
   27aee:	4619      	mov	r1, r3
   27af0:	1aa4      	subs	r4, r4, r2
   27af2:	e7eb      	b.n	27acc <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   27af4:	f855 2b04 	ldr.w	r2, [r5], #4
   27af8:	3904      	subs	r1, #4
   27afa:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   27afe:	e7ec      	b.n	27ada <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   27b00:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   27b04:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   27b08:	e7eb      	b.n	27ae2 <metal_io_block_write+0x46>
		return -ERANGE;
   27b0a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   27b0e:	e7d7      	b.n	27ac0 <metal_io_block_write+0x24>

00027b10 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   27b10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27b12:	6804      	ldr	r4, [r0, #0]
   27b14:	461d      	mov	r5, r3
		: NULL);
   27b16:	1c66      	adds	r6, r4, #1
   27b18:	d02b      	beq.n	27b72 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   27b1a:	6883      	ldr	r3, [r0, #8]
   27b1c:	4299      	cmp	r1, r3
   27b1e:	d228      	bcs.n	27b72 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   27b20:	1864      	adds	r4, r4, r1
   27b22:	d026      	beq.n	27b72 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   27b24:	186e      	adds	r6, r5, r1
   27b26:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   27b28:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   27b2a:	bf88      	it	hi
   27b2c:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   27b2e:	b12e      	cbz	r6, 27b3c <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   27b30:	2305      	movs	r3, #5
   27b32:	9500      	str	r5, [sp, #0]
   27b34:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   27b36:	4628      	mov	r0, r5
}
   27b38:	b002      	add	sp, #8
   27b3a:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   27b3c:	4621      	mov	r1, r4
   27b3e:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   27b40:	b94b      	cbnz	r3, 27b56 <metal_io_block_set+0x46>
   27b42:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   27b44:	4299      	cmp	r1, r3
   27b46:	d111      	bne.n	27b6c <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   27b48:	f3bf 8f5b 	dmb	ish
   27b4c:	e7f3      	b.n	27b36 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   27b4e:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   27b52:	3b01      	subs	r3, #1
   27b54:	e7f4      	b.n	27b40 <metal_io_block_set+0x30>
   27b56:	0788      	lsls	r0, r1, #30
   27b58:	d1f9      	bne.n	27b4e <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   27b5a:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   27b5e:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   27b60:	2b03      	cmp	r3, #3
   27b62:	ddee      	ble.n	27b42 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   27b64:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   27b68:	3b04      	subs	r3, #4
   27b6a:	e7f9      	b.n	27b60 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   27b6c:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   27b70:	e7e8      	b.n	27b44 <metal_io_block_set+0x34>
		return -ERANGE;
   27b72:	f06f 0021 	mvn.w	r0, #33	; 0x21
   27b76:	e7df      	b.n	27b38 <metal_io_block_set+0x28>

00027b78 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   27b78:	2000      	movs	r0, #0
   27b7a:	4770      	bx	lr

00027b7c <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   27b7c:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   27b7e:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   27b80:	4602      	mov	r2, r0
   27b82:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   27b84:	b984      	cbnz	r4, 27ba8 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   27b86:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   27b88:	291f      	cmp	r1, #31
   27b8a:	bf98      	it	ls
   27b8c:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   27b90:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   27b92:	b161      	cbz	r1, 27bae <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   27b94:	6880      	ldr	r0, [r0, #8]
   27b96:	4283      	cmp	r3, r0
   27b98:	d209      	bcs.n	27bae <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   27b9a:	6910      	ldr	r0, [r2, #16]
   27b9c:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   27b9e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   27ba2:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   27ba4:	bc10      	pop	{r4}
   27ba6:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   27ba8:	4623      	mov	r3, r4
}
   27baa:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   27bac:	4718      	bx	r3
			: METAL_BAD_PHYS);
   27bae:	f04f 30ff 	mov.w	r0, #4294967295
   27bb2:	e7f7      	b.n	27ba4 <metal_io_phys+0x28>

00027bb4 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   27bb4:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   27bb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   27bb8:	4605      	mov	r5, r0
   27bba:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   27bbc:	b9e3      	cbnz	r3, 27bf8 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   27bbe:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   27bc0:	1c62      	adds	r2, r4, #1
   27bc2:	bf09      	itett	eq
   27bc4:	6843      	ldreq	r3, [r0, #4]
   27bc6:	400c      	andne	r4, r1
   27bc8:	681c      	ldreq	r4, [r3, #0]
   27bca:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   27bcc:	4621      	mov	r1, r4
   27bce:	4628      	mov	r0, r5
   27bd0:	f7ff ffd4 	bl	27b7c <metal_io_phys>
   27bd4:	4286      	cmp	r6, r0
   27bd6:	d007      	beq.n	27be8 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   27bd8:	692b      	ldr	r3, [r5, #16]
   27bda:	3301      	adds	r3, #1
   27bdc:	441c      	add	r4, r3
		} while (offset < io->size);
   27bde:	68ab      	ldr	r3, [r5, #8]
   27be0:	429c      	cmp	r4, r3
   27be2:	d3f3      	bcc.n	27bcc <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   27be4:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   27be8:	6828      	ldr	r0, [r5, #0]
		: NULL);
   27bea:	1c43      	adds	r3, r0, #1
   27bec:	d007      	beq.n	27bfe <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   27bee:	68ab      	ldr	r3, [r5, #8]
   27bf0:	42a3      	cmp	r3, r4
   27bf2:	d904      	bls.n	27bfe <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   27bf4:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   27bf6:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   27bf8:	4798      	blx	r3
   27bfa:	4604      	mov	r4, r0
   27bfc:	e7f4      	b.n	27be8 <metal_io_phys_to_virt+0x34>
		: NULL);
   27bfe:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   27c00:	e7f9      	b.n	27bf6 <metal_io_phys_to_virt+0x42>

00027c02 <virtqueue_create>:
{
   27c02:	b530      	push	{r4, r5, lr}
   27c04:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   27c06:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   27c0a:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   27c0c:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   27c0e:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   27c10:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   27c12:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   27c14:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   27c16:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   27c18:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   27c1a:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   27c1e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   27c22:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   27c26:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   27c28:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   27c2a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   27c2e:	1c6a      	adds	r2, r5, #1
   27c30:	4413      	add	r3, r2
   27c32:	426d      	negs	r5, r5
   27c34:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   27c36:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   27c38:	6983      	ldr	r3, [r0, #24]
   27c3a:	b953      	cbnz	r3, 27c52 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   27c3c:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   27c3e:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   27c40:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   27c42:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   27c46:	db06      	blt.n	27c56 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   27c48:	2300      	movs	r3, #0
   27c4a:	7393      	strb	r3, [r2, #14]
   27c4c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   27c50:	73d3      	strb	r3, [r2, #15]
}
   27c52:	2000      	movs	r0, #0
   27c54:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   27c56:	3301      	adds	r3, #1
   27c58:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   27c5a:	e7f0      	b.n	27c3e <virtqueue_create+0x3c>

00027c5c <virtqueue_add_buffer>:
{
   27c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   27c60:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   27c64:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   27c66:	4655      	mov	r5, sl
   27c68:	2600      	movs	r6, #0
{
   27c6a:	b085      	sub	sp, #20
	needed = readable + writable;
   27c6c:	eb02 0803 	add.w	r8, r2, r3
{
   27c70:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   27c72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   27c74:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   27c78:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   27c7c:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   27c7e:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   27c82:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   27c86:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   27c88:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   27c8a:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   27c8c:	45b0      	cmp	r8, r6
   27c8e:	dc1a      	bgt.n	27cc6 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   27c90:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   27c92:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   27c94:	eba3 030b 	sub.w	r3, r3, fp
   27c98:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   27c9a:	69e3      	ldr	r3, [r4, #28]
   27c9c:	8961      	ldrh	r1, [r4, #10]
   27c9e:	885a      	ldrh	r2, [r3, #2]
   27ca0:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   27ca2:	400a      	ands	r2, r1
   27ca4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   27ca8:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   27cac:	f3bf 8f5b 	dmb	ish
}
   27cb0:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   27cb2:	69e2      	ldr	r2, [r4, #28]
   27cb4:	8853      	ldrh	r3, [r2, #2]
   27cb6:	3301      	adds	r3, #1
   27cb8:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   27cba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   27cbc:	3301      	adds	r3, #1
   27cbe:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   27cc0:	b005      	add	sp, #20
   27cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   27cc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   27cc8:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   27cca:	f857 1c04 	ldr.w	r1, [r7, #-4]
   27cce:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   27cd2:	9302      	str	r3, [sp, #8]
   27cd4:	6803      	ldr	r3, [r0, #0]
   27cd6:	9203      	str	r2, [sp, #12]
   27cd8:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   27cda:	6883      	ldr	r3, [r0, #8]
   27cdc:	3708      	adds	r7, #8
   27cde:	4299      	cmp	r1, r3
   27ce0:	bf28      	it	cs
   27ce2:	f04f 31ff 	movcs.w	r1, #4294967295
   27ce6:	f7ff ff49 	bl	27b7c <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   27cea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   27cee:	5098      	str	r0, [r3, r2]
   27cf0:	2200      	movs	r2, #0
   27cf2:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   27cf4:	f857 2c08 	ldr.w	r2, [r7, #-8]
   27cf8:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   27cfa:	9a01      	ldr	r2, [sp, #4]
   27cfc:	4296      	cmp	r6, r2
   27cfe:	bfac      	ite	ge
   27d00:	2200      	movge	r2, #0
   27d02:	2201      	movlt	r2, #1
		if (i >= readable)
   27d04:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   27d06:	bfd8      	it	le
   27d08:	f042 0202 	orrle.w	r2, r2, #2
   27d0c:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   27d0e:	3601      	adds	r6, #1
   27d10:	89ed      	ldrh	r5, [r5, #14]
   27d12:	e7bb      	b.n	27c8c <virtqueue_add_buffer+0x30>

00027d14 <virtqueue_get_buffer>:
{
   27d14:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   27d16:	b350      	cbz	r0, 27d6e <virtqueue_get_buffer+0x5a>
   27d18:	6a05      	ldr	r5, [r0, #32]
   27d1a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   27d1c:	886b      	ldrh	r3, [r5, #2]
   27d1e:	42a3      	cmp	r3, r4
   27d20:	d030      	beq.n	27d84 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   27d22:	1c63      	adds	r3, r4, #1
   27d24:	85c3      	strh	r3, [r0, #46]	; 0x2e
   27d26:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   27d28:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   27d2c:	3b01      	subs	r3, #1
   27d2e:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   27d30:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   27d34:	686b      	ldr	r3, [r5, #4]
   27d36:	b29e      	uxth	r6, r3
	if (len)
   27d38:	b109      	cbz	r1, 27d3e <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   27d3a:	68ad      	ldr	r5, [r5, #8]
   27d3c:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   27d3e:	f8d0 c018 	ldr.w	ip, [r0, #24]
   27d42:	b29b      	uxth	r3, r3
   27d44:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   27d48:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   27d4c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   27d4e:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   27d50:	442f      	add	r7, r5
	dxp->ndescs--;
   27d52:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   27d54:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   27d56:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   27d58:	898d      	ldrh	r5, [r1, #12]
   27d5a:	076f      	lsls	r7, r5, #29
   27d5c:	d50e      	bpl.n	27d7c <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   27d5e:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   27d60:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   27d62:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   27d64:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   27d66:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   27d68:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   27d6a:	b102      	cbz	r2, 27d6e <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   27d6c:	8014      	strh	r4, [r2, #0]
}
   27d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   27d70:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   27d72:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   27d74:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   27d76:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   27d7a:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   27d7c:	898d      	ldrh	r5, [r1, #12]
   27d7e:	07ed      	lsls	r5, r5, #31
   27d80:	d4f6      	bmi.n	27d70 <virtqueue_get_buffer+0x5c>
   27d82:	e7ec      	b.n	27d5e <virtqueue_get_buffer+0x4a>
		return NULL;
   27d84:	2000      	movs	r0, #0
   27d86:	e7f2      	b.n	27d6e <virtqueue_get_buffer+0x5a>

00027d88 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   27d88:	6983      	ldr	r3, [r0, #24]
   27d8a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   27d8e:	6898      	ldr	r0, [r3, #8]
   27d90:	4770      	bx	lr

00027d92 <virtqueue_get_available_buffer>:
{
   27d92:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   27d94:	f3bf 8f5b 	dmb	ish
{
   27d98:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   27d9a:	69c1      	ldr	r1, [r0, #28]
{
   27d9c:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   27d9e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   27da0:	884a      	ldrh	r2, [r1, #2]
{
   27da2:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   27da4:	429a      	cmp	r2, r3
   27da6:	d016      	beq.n	27dd6 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   27da8:	1c5a      	adds	r2, r3, #1
   27daa:	8602      	strh	r2, [r0, #48]	; 0x30
   27dac:	8942      	ldrh	r2, [r0, #10]
   27dae:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   27db0:	4013      	ands	r3, r2
   27db2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   27db6:	888a      	ldrh	r2, [r1, #4]
   27db8:	802a      	strh	r2, [r5, #0]
   27dba:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   27dbc:	6982      	ldr	r2, [r0, #24]
   27dbe:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   27dc0:	58d1      	ldr	r1, [r2, r3]
   27dc2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   27dc4:	f7ff fef6 	bl	27bb4 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   27dc8:	882a      	ldrh	r2, [r5, #0]
   27dca:	69a3      	ldr	r3, [r4, #24]
   27dcc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   27dd0:	689b      	ldr	r3, [r3, #8]
   27dd2:	6033      	str	r3, [r6, #0]
}
   27dd4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   27dd6:	2000      	movs	r0, #0
   27dd8:	e7fc      	b.n	27dd4 <virtqueue_get_available_buffer+0x42>

00027dda <virtqueue_disable_cb>:
{
   27dda:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   27ddc:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   27dde:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   27de0:	6912      	ldr	r2, [r2, #16]
   27de2:	0092      	lsls	r2, r2, #2
   27de4:	d517      	bpl.n	27e16 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   27de6:	b943      	cbnz	r3, 27dfa <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   27de8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   27dea:	69c2      	ldr	r2, [r0, #28]
   27dec:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   27dee:	8944      	ldrh	r4, [r0, #10]
   27df0:	3b01      	subs	r3, #1
   27df2:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   27df4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   27df8:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   27dfa:	6803      	ldr	r3, [r0, #0]
   27dfc:	699b      	ldr	r3, [r3, #24]
   27dfe:	2b01      	cmp	r3, #1
   27e00:	d108      	bne.n	27e14 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   27e02:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   27e04:	6a02      	ldr	r2, [r0, #32]
   27e06:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   27e08:	8940      	ldrh	r0, [r0, #10]
   27e0a:	3b01      	subs	r3, #1
   27e0c:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   27e0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   27e12:	8093      	strh	r3, [r2, #4]
}
   27e14:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   27e16:	b923      	cbnz	r3, 27e22 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   27e18:	69c2      	ldr	r2, [r0, #28]
   27e1a:	8813      	ldrh	r3, [r2, #0]
   27e1c:	f043 0301 	orr.w	r3, r3, #1
   27e20:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   27e22:	6803      	ldr	r3, [r0, #0]
   27e24:	699b      	ldr	r3, [r3, #24]
   27e26:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   27e28:	bf01      	itttt	eq
   27e2a:	6a02      	ldreq	r2, [r0, #32]
   27e2c:	8813      	ldrheq	r3, [r2, #0]
   27e2e:	f043 0301 	orreq.w	r3, r3, #1
   27e32:	8013      	strheq	r3, [r2, #0]
}
   27e34:	e7ee      	b.n	27e14 <virtqueue_disable_cb+0x3a>

00027e36 <virtqueue_kick>:
{
   27e36:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   27e38:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   27e3c:	6803      	ldr	r3, [r0, #0]
{
   27e3e:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   27e40:	691a      	ldr	r2, [r3, #16]
   27e42:	699b      	ldr	r3, [r3, #24]
   27e44:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   27e48:	d01a      	beq.n	27e80 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   27e4a:	b97b      	cbnz	r3, 27e6c <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   27e4c:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   27e4e:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   27e50:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   27e52:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   27e54:	3b01      	subs	r3, #1
   27e56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   27e5a:	8892      	ldrh	r2, [r2, #4]
   27e5c:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   27e5e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   27e60:	b29b      	uxth	r3, r3
   27e62:	429a      	cmp	r2, r3
   27e64:	d814      	bhi.n	27e90 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   27e66:	2300      	movs	r3, #0
   27e68:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   27e6a:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   27e6c:	2b01      	cmp	r3, #1
   27e6e:	d1fa      	bne.n	27e66 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   27e70:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   27e72:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   27e74:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   27e76:	6941      	ldr	r1, [r0, #20]
   27e78:	3b01      	subs	r3, #1
   27e7a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   27e7e:	e7ec      	b.n	27e5a <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   27e80:	b963      	cbnz	r3, 27e9c <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   27e82:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   27e84:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   27e86:	43db      	mvns	r3, r3
   27e88:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   27e8c:	2b00      	cmp	r3, #0
   27e8e:	d0ea      	beq.n	27e66 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   27e90:	6923      	ldr	r3, [r4, #16]
   27e92:	2b00      	cmp	r3, #0
   27e94:	d0e7      	beq.n	27e66 <virtqueue_kick+0x30>
		vq->notify(vq);
   27e96:	4620      	mov	r0, r4
   27e98:	4798      	blx	r3
   27e9a:	e7e4      	b.n	27e66 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   27e9c:	2b01      	cmp	r3, #1
   27e9e:	d1e2      	bne.n	27e66 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   27ea0:	69c3      	ldr	r3, [r0, #28]
   27ea2:	e7ef      	b.n	27e84 <virtqueue_kick+0x4e>

00027ea4 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   27ea4:	69c3      	ldr	r3, [r0, #28]
   27ea6:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   27ea8:	8859      	ldrh	r1, [r3, #2]
   27eaa:	4291      	cmp	r1, r2
   27eac:	d00a      	beq.n	27ec4 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   27eae:	8941      	ldrh	r1, [r0, #10]
   27eb0:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   27eb2:	400a      	ands	r2, r1
   27eb4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   27eb8:	889a      	ldrh	r2, [r3, #4]
   27eba:	6983      	ldr	r3, [r0, #24]
   27ebc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   27ec0:	6898      	ldr	r0, [r3, #8]
	return len;
   27ec2:	4770      	bx	lr
		return 0;
   27ec4:	2000      	movs	r0, #0
}
   27ec6:	4770      	bx	lr

00027ec8 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   27ec8:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   27ecc:	68c3      	ldr	r3, [r0, #12]
   27ece:	b103      	cbz	r3, 27ed2 <virtqueue_notification+0xa>
		vq->callback(vq);
   27ed0:	4718      	bx	r3
}
   27ed2:	4770      	bx	lr

00027ed4 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   27ed4:	f04f 32ff 	mov.w	r2, #4294967295
   27ed8:	f04f 33ff 	mov.w	r3, #4294967295
   27edc:	f7f7 b982 	b.w	1f1e4 <z_impl_k_sem_take>

00027ee0 <rpmsg_unregister_endpoint>:
{
   27ee0:	b570      	push	{r4, r5, r6, lr}
   27ee2:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   27ee4:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   27ee6:	f105 0658 	add.w	r6, r5, #88	; 0x58
   27eea:	4630      	mov	r0, r6
   27eec:	f7ff fff2 	bl	27ed4 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   27ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27ef2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   27ef6:	2b7f      	cmp	r3, #127	; 0x7f
   27ef8:	d80b      	bhi.n	27f12 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   27efa:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   27efc:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   27efe:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   27f00:	f003 031f 	and.w	r3, r3, #31
   27f04:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   27f06:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   27f0a:	ea23 0302 	bic.w	r3, r3, r2
   27f0e:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   27f12:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   27f16:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   27f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   27f1a:	f104 0334 	add.w	r3, r4, #52	; 0x34
   27f1e:	6011      	str	r1, [r2, #0]
	node->next = node;
   27f20:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   27f24:	2300      	movs	r3, #0
   27f26:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   27f28:	4630      	mov	r0, r6
}
   27f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27f2e:	f7f7 b915 	b.w	1f15c <z_impl_k_sem_give>

00027f32 <rpmsg_send_ns_message>:
{
   27f32:	b530      	push	{r4, r5, lr}
   27f34:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   27f36:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   27f38:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   27f3a:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   27f3c:	2220      	movs	r2, #32
   27f3e:	4601      	mov	r1, r0
   27f40:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   27f42:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   27f44:	f000 fda6 	bl	28a94 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   27f48:	2328      	movs	r3, #40	; 0x28
   27f4a:	2201      	movs	r2, #1
   27f4c:	4629      	mov	r1, r5
   27f4e:	e9cd 3200 	strd	r3, r2, [sp]
   27f52:	4620      	mov	r0, r4
   27f54:	2235      	movs	r2, #53	; 0x35
   27f56:	ab02      	add	r3, sp, #8
   27f58:	f7f5 fdac 	bl	1dab4 <rpmsg_send_offchannel_raw>
}
   27f5c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   27f60:	b00d      	add	sp, #52	; 0x34
   27f62:	bd30      	pop	{r4, r5, pc}

00027f64 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   27f64:	b128      	cbz	r0, 27f72 <rpmsg_hold_rx_buffer+0xe>
   27f66:	6a00      	ldr	r0, [r0, #32]
   27f68:	b118      	cbz	r0, 27f72 <rpmsg_hold_rx_buffer+0xe>
   27f6a:	b111      	cbz	r1, 27f72 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   27f6c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   27f6e:	b103      	cbz	r3, 27f72 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   27f70:	4718      	bx	r3
}
   27f72:	4770      	bx	lr

00027f74 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   27f74:	b130      	cbz	r0, 27f84 <rpmsg_release_rx_buffer+0x10>
   27f76:	6a00      	ldr	r0, [r0, #32]
   27f78:	b120      	cbz	r0, 27f84 <rpmsg_release_rx_buffer+0x10>
   27f7a:	b119      	cbz	r1, 27f84 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   27f7c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   27f80:	b103      	cbz	r3, 27f84 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   27f82:	4718      	bx	r3
}
   27f84:	4770      	bx	lr

00027f86 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   27f86:	b130      	cbz	r0, 27f96 <rpmsg_get_tx_payload_buffer+0x10>
   27f88:	6a00      	ldr	r0, [r0, #32]
   27f8a:	b120      	cbz	r0, 27f96 <rpmsg_get_tx_payload_buffer+0x10>
   27f8c:	b119      	cbz	r1, 27f96 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   27f8e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   27f92:	b103      	cbz	r3, 27f96 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   27f94:	4718      	bx	r3
}
   27f96:	2000      	movs	r0, #0
   27f98:	4770      	bx	lr

00027f9a <rpmsg_get_endpoint>:
{
   27f9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27f9e:	4606      	mov	r6, r0
   27fa0:	4688      	mov	r8, r1
   27fa2:	4617      	mov	r7, r2
   27fa4:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   27fa6:	6804      	ldr	r4, [r0, #0]
   27fa8:	42a6      	cmp	r6, r4
   27faa:	d101      	bne.n	27fb0 <rpmsg_get_endpoint+0x16>
	return NULL;
   27fac:	2500      	movs	r5, #0
   27fae:	e023      	b.n	27ff8 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   27fb0:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   27fb2:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   27fb6:	d002      	beq.n	27fbe <rpmsg_get_endpoint+0x24>
   27fb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   27fba:	42bb      	cmp	r3, r7
   27fbc:	d01c      	beq.n	27ff8 <rpmsg_get_endpoint+0x5e>
		if (name)
   27fbe:	f1b8 0f00 	cmp.w	r8, #0
   27fc2:	d101      	bne.n	27fc8 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   27fc4:	6824      	ldr	r4, [r4, #0]
   27fc6:	e7ef      	b.n	27fa8 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   27fc8:	2220      	movs	r2, #32
   27fca:	4641      	mov	r1, r8
   27fcc:	4628      	mov	r0, r5
   27fce:	f000 fd4f 	bl	28a70 <strncmp>
		if (!name || !name_match)
   27fd2:	2800      	cmp	r0, #0
   27fd4:	d1f6      	bne.n	27fc4 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   27fd6:	f1b9 3fff 	cmp.w	r9, #4294967295
   27fda:	d002      	beq.n	27fe2 <rpmsg_get_endpoint+0x48>
   27fdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27fde:	454b      	cmp	r3, r9
   27fe0:	d00a      	beq.n	27ff8 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   27fe2:	1c7b      	adds	r3, r7, #1
   27fe4:	d00b      	beq.n	27ffe <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   27fe6:	6824      	ldr	r4, [r4, #0]
   27fe8:	42b4      	cmp	r4, r6
   27fea:	d0df      	beq.n	27fac <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   27fec:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   27ff0:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   27ff4:	429f      	cmp	r7, r3
   27ff6:	d1e7      	bne.n	27fc8 <rpmsg_get_endpoint+0x2e>
}
   27ff8:	4628      	mov	r0, r5
   27ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   27ffe:	6aab      	ldr	r3, [r5, #40]	; 0x28
   28000:	3301      	adds	r3, #1
   28002:	d0f9      	beq.n	27ff8 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   28004:	6824      	ldr	r4, [r4, #0]
   28006:	42b4      	cmp	r4, r6
   28008:	d0d0      	beq.n	27fac <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2800a:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2800e:	e7d6      	b.n	27fbe <rpmsg_get_endpoint+0x24>

00028010 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   28010:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   28012:	4604      	mov	r4, r0
   28014:	b190      	cbz	r0, 2803c <rpmsg_destroy_ept+0x2c>
   28016:	6a03      	ldr	r3, [r0, #32]
   28018:	b183      	cbz	r3, 2803c <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   2801a:	7802      	ldrb	r2, [r0, #0]
   2801c:	b14a      	cbz	r2, 28032 <rpmsg_destroy_ept+0x22>
   2801e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   28022:	b133      	cbz	r3, 28032 <rpmsg_destroy_ept+0x22>
   28024:	6a43      	ldr	r3, [r0, #36]	; 0x24
   28026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2802a:	d302      	bcc.n	28032 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2802c:	2101      	movs	r1, #1
   2802e:	f7ff ff80 	bl	27f32 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   28032:	4620      	mov	r0, r4
}
   28034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   28038:	f7ff bf52 	b.w	27ee0 <rpmsg_unregister_endpoint>
}
   2803c:	bd10      	pop	{r4, pc}

0002803e <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2803e:	f851 3c08 	ldr.w	r3, [r1, #-8]
   28042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   28046:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2804a:	4770      	bx	lr

0002804c <rpmsg_virtio_tx_callback>:
}
   2804c:	4770      	bx	lr

0002804e <k_sem_give>:
   2804e:	f7f7 b885 	b.w	1f15c <z_impl_k_sem_give>

00028052 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   28052:	f04f 32ff 	mov.w	r2, #4294967295
   28056:	f04f 33ff 	mov.w	r3, #4294967295
   2805a:	f7f7 b8c3 	b.w	1f1e4 <z_impl_k_sem_take>

0002805e <rpmsg_virtio_release_tx_buffer>:
{
   2805e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28060:	460c      	mov	r4, r1
   28062:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   28064:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   28068:	f100 0758 	add.w	r7, r0, #88	; 0x58
   2806c:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   2806e:	b2b6      	uxth	r6, r6
   28070:	f7ff ffef 	bl	28052 <__metal_mutex_acquire>
	r_desc->idx = idx;
   28074:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   28078:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   2807c:	f1a4 0310 	sub.w	r3, r4, #16
   28080:	f844 2c0c 	str.w	r2, [r4, #-12]
   28084:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   28088:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   2808c:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   28090:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   28094:	4638      	mov	r0, r7
   28096:	6013      	str	r3, [r2, #0]
   28098:	f7ff ffd9 	bl	2804e <k_sem_give>
}
   2809c:	2000      	movs	r0, #0
   2809e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000280a0 <rpmsg_virtio_ns_callback>:
{
   280a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   280a4:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   280a6:	2a28      	cmp	r2, #40	; 0x28
{
   280a8:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   280aa:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   280ae:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   280b0:	d126      	bne.n	28100 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   280b2:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   280b4:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   280b6:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   280b8:	42a1      	cmp	r1, r4
   280ba:	bf28      	it	cs
   280bc:	f04f 31ff 	movcs.w	r1, #4294967295
   280c0:	2320      	movs	r3, #32
   280c2:	466a      	mov	r2, sp
   280c4:	f7ff fcb1 	bl	27a2a <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   280c8:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   280cc:	f8d7 8020 	ldr.w	r8, [r7, #32]
   280d0:	4630      	mov	r0, r6
   280d2:	f7ff ffbe 	bl	28052 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   280d6:	4643      	mov	r3, r8
   280d8:	f04f 32ff 	mov.w	r2, #4294967295
   280dc:	4669      	mov	r1, sp
   280de:	4628      	mov	r0, r5
   280e0:	f7ff ff5b 	bl	27f9a <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   280e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   280e6:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   280e8:	07db      	lsls	r3, r3, #31
   280ea:	d519      	bpl.n	28120 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   280ec:	b960      	cbnz	r0, 28108 <rpmsg_virtio_ns_callback+0x68>
   280ee:	4630      	mov	r0, r6
   280f0:	f7ff ffad 	bl	2804e <k_sem_give>
		if (rdev->ns_unbind_cb)
   280f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   280f6:	b11b      	cbz	r3, 28100 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   280f8:	4642      	mov	r2, r8
   280fa:	4669      	mov	r1, sp
   280fc:	4628      	mov	r0, r5
   280fe:	4798      	blx	r3
}
   28100:	2000      	movs	r0, #0
   28102:	b008      	add	sp, #32
   28104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   28108:	f04f 33ff 	mov.w	r3, #4294967295
   2810c:	6283      	str	r3, [r0, #40]	; 0x28
   2810e:	4630      	mov	r0, r6
   28110:	f7ff ff9d 	bl	2804e <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   28114:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28116:	2b00      	cmp	r3, #0
   28118:	d0ec      	beq.n	280f4 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   2811a:	4620      	mov	r0, r4
   2811c:	4798      	blx	r3
   2811e:	e7e9      	b.n	280f4 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   28120:	b920      	cbnz	r0, 2812c <rpmsg_virtio_ns_callback+0x8c>
   28122:	4630      	mov	r0, r6
   28124:	f7ff ff93 	bl	2804e <k_sem_give>
			if (rdev->ns_bind_cb)
   28128:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2812a:	e7e4      	b.n	280f6 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   2812c:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   28130:	4630      	mov	r0, r6
   28132:	f7ff ff8c 	bl	2804e <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   28136:	e7e3      	b.n	28100 <rpmsg_virtio_ns_callback+0x60>

00028138 <rpmsg_virtio_get_rx_buffer>:
{
   28138:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2813a:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   2813e:	4613      	mov	r3, r2
   28140:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   28142:	b925      	cbnz	r5, 2814e <rpmsg_virtio_get_rx_buffer+0x16>
}
   28144:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   28146:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2814a:	f7ff bde3 	b.w	27d14 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2814e:	2d01      	cmp	r5, #1
   28150:	d106      	bne.n	28160 <rpmsg_virtio_get_rx_buffer+0x28>
}
   28152:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   28154:	460a      	mov	r2, r1
   28156:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2815a:	4619      	mov	r1, r3
   2815c:	f7ff be19 	b.w	27d92 <virtqueue_get_available_buffer>
}
   28160:	2000      	movs	r0, #0
   28162:	bc30      	pop	{r4, r5}
   28164:	4770      	bx	lr

00028166 <rpmsg_virtio_return_buffer>:
{
   28166:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   28168:	460c      	mov	r4, r1
   2816a:	4619      	mov	r1, r3
   2816c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   28170:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   28172:	b95d      	cbnz	r5, 2818c <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   28174:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   28176:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2817a:	2301      	movs	r3, #1
   2817c:	462a      	mov	r2, r5
   2817e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   28182:	a902      	add	r1, sp, #8
   28184:	f7ff fd6a 	bl	27c5c <virtqueue_add_buffer>
}
   28188:	b004      	add	sp, #16
   2818a:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2818c:	2d01      	cmp	r5, #1
   2818e:	d1fb      	bne.n	28188 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   28190:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   28194:	b004      	add	sp, #16
   28196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2819a:	f7f5 bc6f 	b.w	1da7c <virtqueue_add_consumed_buffer>

0002819e <rpmsg_virtio_release_rx_buffer>:
{
   2819e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   281a0:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   281a2:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   281a6:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   281aa:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   281ac:	b2b6      	uxth	r6, r6
{
   281ae:	460d      	mov	r5, r1
   281b0:	f7ff ff4f 	bl	28052 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   281b4:	4631      	mov	r1, r6
   281b6:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   281ba:	f7ff fde5 	bl	27d88 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   281be:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   281c0:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   281c2:	f1a5 0110 	sub.w	r1, r5, #16
   281c6:	4620      	mov	r0, r4
   281c8:	f7ff ffcd 	bl	28166 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   281cc:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   281d0:	f7ff fe31 	bl	27e36 <virtqueue_kick>
   281d4:	4638      	mov	r0, r7
}
   281d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   281da:	f7ff bf38 	b.w	2804e <k_sem_give>

000281de <rpmsg_virtio_shm_pool_get_buffer>:
{
   281de:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   281e0:	b148      	cbz	r0, 281f6 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   281e2:	b149      	cbz	r1, 281f8 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   281e4:	6843      	ldr	r3, [r0, #4]
   281e6:	428b      	cmp	r3, r1
   281e8:	d306      	bcc.n	281f8 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   281ea:	6882      	ldr	r2, [r0, #8]
   281ec:	6804      	ldr	r4, [r0, #0]
   281ee:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   281f0:	1a5b      	subs	r3, r3, r1
   281f2:	6043      	str	r3, [r0, #4]
	return buffer;
   281f4:	18a0      	adds	r0, r4, r2
}
   281f6:	bd10      	pop	{r4, pc}
		return NULL;
   281f8:	2000      	movs	r0, #0
   281fa:	e7fc      	b.n	281f6 <rpmsg_virtio_shm_pool_get_buffer+0x18>

000281fc <rpmsg_virtio_get_tx_payload_buffer>:
{
   281fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   28200:	4605      	mov	r5, r0
   28202:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   28206:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   28208:	6a03      	ldr	r3, [r0, #32]
   2820a:	4617      	mov	r7, r2
   2820c:	681b      	ldr	r3, [r3, #0]
   2820e:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   28210:	0743      	lsls	r3, r0, #29
   28212:	d403      	bmi.n	2821c <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   28214:	2000      	movs	r0, #0
}
   28216:	b002      	add	sp, #8
   28218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2821c:	f643 2398 	movw	r3, #15000	; 0x3a98
   28220:	2f00      	cmp	r7, #0
   28222:	bf18      	it	ne
   28224:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   28226:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   2822a:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   2822e:	4640      	mov	r0, r8
   28230:	f7ff ff0f 	bl	28052 <__metal_mutex_acquire>
	return list->next == list;
   28234:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   28238:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   2823c:	4554      	cmp	r4, sl
   2823e:	f8d3 9018 	ldr.w	r9, [r3, #24]
   28242:	d025      	beq.n	28290 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   28244:	b324      	cbz	r4, 28290 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   28246:	e9d4 2300 	ldrd	r2, r3, [r4]
   2824a:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   2824c:	6822      	ldr	r2, [r4, #0]
   2824e:	601a      	str	r2, [r3, #0]
	node->next = node;
   28250:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   28254:	f1b9 0f00 	cmp.w	r9, #0
   28258:	d10e      	bne.n	28278 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   2825a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2825e:	6033      	str	r3, [r6, #0]
   28260:	4640      	mov	r0, r8
   28262:	f7ff fef4 	bl	2804e <k_sem_give>
	rp_hdr->reserved = idx;
   28266:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2826a:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   2826e:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   28270:	6833      	ldr	r3, [r6, #0]
   28272:	3b10      	subs	r3, #16
   28274:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   28276:	e7ce      	b.n	28216 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   28278:	f1b9 0f01 	cmp.w	r9, #1
   2827c:	d1f0      	bne.n	28260 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   2827e:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   28280:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   28284:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   28288:	f7ff fd7e 	bl	27d88 <virtqueue_get_buffer_length>
   2828c:	6030      	str	r0, [r6, #0]
   2828e:	e7e7      	b.n	28260 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   28290:	f1b9 0f00 	cmp.w	r9, #0
   28294:	d12a      	bne.n	282ec <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   28296:	4631      	mov	r1, r6
   28298:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2829c:	f10d 0206 	add.w	r2, sp, #6
   282a0:	f7ff fd38 	bl	27d14 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   282a4:	4604      	mov	r4, r0
   282a6:	2800      	cmp	r0, #0
   282a8:	d1da      	bne.n	28260 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   282aa:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   282ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   282b0:	b953      	cbnz	r3, 282c8 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   282b2:	4640      	mov	r0, r8
   282b4:	f7ff fecb 	bl	2804e <k_sem_give>
		if (rp_hdr || !tick_count)
   282b8:	2f00      	cmp	r7, #0
   282ba:	d0ab      	beq.n	28214 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   282bc:	2021      	movs	r0, #33	; 0x21
   282be:	2100      	movs	r1, #0
   282c0:	f7f8 fe40 	bl	20f44 <z_impl_k_sleep>
		tick_count--;
   282c4:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   282c6:	e7b2      	b.n	2822e <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   282c8:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   282cc:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   282d0:	f7ff ff85 	bl	281de <rpmsg_virtio_shm_pool_get_buffer>
   282d4:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   282d6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   282da:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   282de:	6033      	str	r3, [r6, #0]
   282e0:	4640      	mov	r0, r8
   282e2:	f7ff feb4 	bl	2804e <k_sem_give>
		if (rp_hdr || !tick_count)
   282e6:	2c00      	cmp	r4, #0
   282e8:	d0e6      	beq.n	282b8 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   282ea:	e7bc      	b.n	28266 <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   282ec:	f1b9 0f01 	cmp.w	r9, #1
   282f0:	d1df      	bne.n	282b2 <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   282f2:	4632      	mov	r2, r6
   282f4:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   282f8:	f10d 0106 	add.w	r1, sp, #6
   282fc:	f7ff fd49 	bl	27d92 <virtqueue_get_available_buffer>
   28300:	4604      	mov	r4, r0
   28302:	e7ed      	b.n	282e0 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

00028304 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   28304:	b120      	cbz	r0, 28310 <rpmsg_virtio_init_shm_pool+0xc>
   28306:	b119      	cbz	r1, 28310 <rpmsg_virtio_init_shm_pool+0xc>
   28308:	b112      	cbz	r2, 28310 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   2830a:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   2830e:	6001      	str	r1, [r0, #0]
}
   28310:	4770      	bx	lr

00028312 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   28312:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   28314:	4604      	mov	r4, r0
   28316:	b918      	cbnz	r0, 28320 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   28318:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   2831a:	3834      	subs	r0, #52	; 0x34
   2831c:	f7ff fe78 	bl	28010 <rpmsg_destroy_ept>
	return list->next == list;
   28320:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   28322:	4284      	cmp	r4, r0
   28324:	d1f9      	bne.n	2831a <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   28326:	2300      	movs	r3, #0
		rvdev->svq = 0;
   28328:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   2832c:	e7f4      	b.n	28318 <rpmsg_deinit_vdev+0x6>

0002832e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2832e:	f7f5 bf17 	b.w	1e160 <_DoInit>

00028332 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   28332:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   28334:	f7ff fffb 	bl	2832e <SEGGER_RTT_Init>

	return 0;
}
   28338:	2000      	movs	r0, #0
   2833a:	bd08      	pop	{r3, pc}

0002833c <z_device_state_init>:
}
   2833c:	4770      	bx	lr

0002833e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2833e:	b140      	cbz	r0, 28352 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   28340:	68c3      	ldr	r3, [r0, #12]
   28342:	7858      	ldrb	r0, [r3, #1]
   28344:	f010 0001 	ands.w	r0, r0, #1
   28348:	bf1e      	ittt	ne
   2834a:	7818      	ldrbne	r0, [r3, #0]
   2834c:	fab0 f080 	clzne	r0, r0
   28350:	0940      	lsrne	r0, r0, #5
}
   28352:	4770      	bx	lr

00028354 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28356:	ab0b      	add	r3, sp, #44	; 0x2c
   28358:	9305      	str	r3, [sp, #20]
   2835a:	9303      	str	r3, [sp, #12]
   2835c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2835e:	2201      	movs	r2, #1
   28360:	9302      	str	r3, [sp, #8]
   28362:	2300      	movs	r3, #0
   28364:	4618      	mov	r0, r3
   28366:	e9cd 3300 	strd	r3, r3, [sp]
   2836a:	f7e5 fe1f 	bl	dfac <z_impl_z_log_msg_runtime_vcreate>
}
   2836e:	b007      	add	sp, #28
   28370:	f85d fb04 	ldr.w	pc, [sp], #4

00028374 <z_early_memset>:
   28374:	f000 ba4c 	b.w	28810 <memset>

00028378 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28378:	f000 ba23 	b.w	287c2 <memcpy>

0002837c <k_heap_init>:
{
   2837c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2837e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   28382:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   28386:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   28388:	f7e4 bb8e 	b.w	caa8 <sys_heap_init>

0002838c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2838c:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   28390:	4313      	orrs	r3, r2
   28392:	f013 0303 	ands.w	r3, r3, #3
   28396:	d10c      	bne.n	283b2 <create_free_list+0x26>
	slab->free_list = NULL;
   28398:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2839a:	68c1      	ldr	r1, [r0, #12]
   2839c:	4299      	cmp	r1, r3
   2839e:	d801      	bhi.n	283a4 <create_free_list+0x18>
	return 0;
   283a0:	2000      	movs	r0, #0
   283a2:	4770      	bx	lr
		*(char **)p = slab->free_list;
   283a4:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   283a6:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   283a8:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   283aa:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   283ac:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   283ae:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   283b0:	e7f3      	b.n	2839a <create_free_list+0xe>
		return -EINVAL;
   283b2:	f06f 0015 	mvn.w	r0, #21
}
   283b6:	4770      	bx	lr

000283b8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   283b8:	f3ef 8005 	mrs	r0, IPSR
}
   283bc:	3800      	subs	r0, #0
   283be:	bf18      	it	ne
   283c0:	2001      	movne	r0, #1
   283c2:	4770      	bx	lr

000283c4 <z_impl_k_thread_name_set>:
}
   283c4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   283c8:	4770      	bx	lr

000283ca <k_thread_name_get>:
}
   283ca:	2000      	movs	r0, #0
   283cc:	4770      	bx	lr

000283ce <z_impl_k_thread_start>:
	z_sched_start(thread);
   283ce:	f7f7 bf19 	b.w	20204 <z_sched_start>

000283d2 <z_pm_save_idle_exit>:
{
   283d2:	b508      	push	{r3, lr}
	pm_system_resume();
   283d4:	f7e6 fcb6 	bl	ed44 <pm_system_resume>
}
   283d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   283dc:	f7ff b89e 	b.w	2751c <sys_clock_idle_exit>

000283e0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   283e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   283e4:	428b      	cmp	r3, r1
   283e6:	d001      	beq.n	283ec <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   283e8:	f7f8 ba0e 	b.w	20808 <z_set_prio>
}
   283ec:	2000      	movs	r0, #0
   283ee:	4770      	bx	lr

000283f0 <z_impl_k_mutex_init>:
{
   283f0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   283f2:	2000      	movs	r0, #0
   283f4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   283f8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   283fc:	4770      	bx	lr

000283fe <z_queue_node_peek>:
{
   283fe:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   28400:	4604      	mov	r4, r0
   28402:	b130      	cbz	r0, 28412 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28404:	6802      	ldr	r2, [r0, #0]
   28406:	0793      	lsls	r3, r2, #30
   28408:	d003      	beq.n	28412 <z_queue_node_peek+0x14>
		ret = anode->data;
   2840a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2840c:	b109      	cbz	r1, 28412 <z_queue_node_peek+0x14>
			k_free(anode);
   2840e:	f000 f9bc 	bl	2878a <k_free>
}
   28412:	4620      	mov	r0, r4
   28414:	bd10      	pop	{r4, pc}

00028416 <z_impl_k_queue_init>:
	list->head = NULL;
   28416:	2300      	movs	r3, #0
	list->tail = NULL;
   28418:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2841c:	6083      	str	r3, [r0, #8]
   2841e:	f100 030c 	add.w	r3, r0, #12
   28422:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   28426:	f100 0314 	add.w	r3, r0, #20
   2842a:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2842e:	4770      	bx	lr

00028430 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   28430:	2301      	movs	r3, #1
{
   28432:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   28434:	9300      	str	r3, [sp, #0]
   28436:	2300      	movs	r3, #0
{
   28438:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2843a:	4619      	mov	r1, r3
   2843c:	f7f6 fd8a 	bl	1ef54 <queue_insert>
}
   28440:	b003      	add	sp, #12
   28442:	f85d fb04 	ldr.w	pc, [sp], #4

00028446 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   28446:	2300      	movs	r3, #0
{
   28448:	b507      	push	{r0, r1, r2, lr}
   2844a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2844c:	9300      	str	r3, [sp, #0]
   2844e:	4619      	mov	r1, r3
   28450:	f7f6 fd80 	bl	1ef54 <queue_insert>
}
   28454:	b003      	add	sp, #12
   28456:	f85d fb04 	ldr.w	pc, [sp], #4

0002845a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2845a:	b15a      	cbz	r2, 28474 <z_impl_k_sem_init+0x1a>
   2845c:	428a      	cmp	r2, r1
   2845e:	d309      	bcc.n	28474 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   28460:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   28464:	e9c0 1202 	strd	r1, r2, [r0, #8]
   28468:	e9c0 0000 	strd	r0, r0, [r0]
   2846c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   28470:	2000      	movs	r0, #0
   28472:	4770      	bx	lr
		return -EINVAL;
   28474:	f06f 0015 	mvn.w	r0, #21
}
   28478:	4770      	bx	lr

0002847a <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2847a:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2847c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2847e:	408b      	lsls	r3, r1
   28480:	ea22 0303 	bic.w	r3, r2, r3
   28484:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   28486:	fa22 f001 	lsr.w	r0, r2, r1
}
   2848a:	f000 0001 	and.w	r0, r0, #1
   2848e:	4770      	bx	lr

00028490 <unschedule_locked>:
{
   28490:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   28492:	2103      	movs	r1, #3
{
   28494:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   28496:	300c      	adds	r0, #12
   28498:	f7ff ffef 	bl	2847a <flag_test_and_clear>
   2849c:	4604      	mov	r4, r0
   2849e:	b118      	cbz	r0, 284a8 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   284a0:	f105 0010 	add.w	r0, r5, #16
   284a4:	f7f8 ffee 	bl	21484 <z_abort_timeout>
}
   284a8:	4620      	mov	r0, r4
   284aa:	bd38      	pop	{r3, r4, r5, pc}

000284ac <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   284ac:	b120      	cbz	r0, 284b8 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   284ae:	2200      	movs	r2, #0
   284b0:	3090      	adds	r0, #144	; 0x90
   284b2:	4611      	mov	r1, r2
   284b4:	f7f8 be48 	b.w	21148 <z_sched_wake>
}
   284b8:	4770      	bx	lr

000284ba <cancel_async_locked>:
{
   284ba:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   284bc:	68c3      	ldr	r3, [r0, #12]
{
   284be:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   284c0:	f3c3 0640 	ubfx	r6, r3, #1, #1
   284c4:	079b      	lsls	r3, r3, #30
   284c6:	d416      	bmi.n	284f6 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   284c8:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   284ca:	2102      	movs	r1, #2
   284cc:	300c      	adds	r0, #12
   284ce:	f7ff ffd4 	bl	2847a <flag_test_and_clear>
   284d2:	b180      	cbz	r0, 284f6 <cancel_async_locked+0x3c>
	return list->head;
   284d4:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   284d8:	b16a      	cbz	r2, 284f6 <cancel_async_locked+0x3c>
   284da:	4294      	cmp	r4, r2
   284dc:	d11d      	bne.n	2851a <cancel_async_locked+0x60>
	return node->next;
   284de:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   284e0:	b99e      	cbnz	r6, 2850a <cancel_async_locked+0x50>
   284e2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   284e6:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   284ea:	429c      	cmp	r4, r3
   284ec:	d101      	bne.n	284f2 <cancel_async_locked+0x38>
	list->tail = node;
   284ee:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   284f2:	2300      	movs	r3, #0
   284f4:	6023      	str	r3, [r4, #0]
	return *flagp;
   284f6:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   284f8:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   284fc:	bf1e      	ittt	ne
   284fe:	f043 0302 	orrne.w	r3, r3, #2
   28502:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   28504:	f040 0002 	orrne.w	r0, r0, #2
}
   28508:	bd70      	pop	{r4, r5, r6, pc}
   2850a:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2850c:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   28510:	4294      	cmp	r4, r2
	list->tail = node;
   28512:	bf08      	it	eq
   28514:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   28518:	e7eb      	b.n	284f2 <cancel_async_locked+0x38>
	return node->next;
   2851a:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2851c:	6812      	ldr	r2, [r2, #0]
   2851e:	e7db      	b.n	284d8 <cancel_async_locked+0x1e>

00028520 <k_work_submit_to_queue>:
{
   28520:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   28522:	f7f7 f92f 	bl	1f784 <z_work_submit_to_queue>
	if (ret > 0) {
   28526:	1e04      	subs	r4, r0, #0
   28528:	dd09      	ble.n	2853e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2852a:	f04f 0320 	mov.w	r3, #32
   2852e:	f3ef 8011 	mrs	r0, BASEPRI
   28532:	f383 8812 	msr	BASEPRI_MAX, r3
   28536:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2853a:	f000 f80d 	bl	28558 <z_reschedule_irqlock>
}
   2853e:	4620      	mov	r0, r4
   28540:	bd10      	pop	{r4, pc}

00028542 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   28542:	f7f7 b8d9 	b.w	1f6f8 <k_work_busy_get>

00028546 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   28546:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2854a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2854e:	4283      	cmp	r3, r0
		return b2 - b1;
   28550:	bf14      	ite	ne
   28552:	1ac0      	subne	r0, r0, r3
	return 0;
   28554:	2000      	moveq	r0, #0
}
   28556:	4770      	bx	lr

00028558 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28558:	4603      	mov	r3, r0
   2855a:	b920      	cbnz	r0, 28566 <z_reschedule_irqlock+0xe>
   2855c:	f3ef 8205 	mrs	r2, IPSR
   28560:	b90a      	cbnz	r2, 28566 <z_reschedule_irqlock+0xe>
   28562:	f7e6 bfd9 	b.w	f518 <arch_swap>
	__asm__ volatile(
   28566:	f383 8811 	msr	BASEPRI, r3
   2856a:	f3bf 8f6f 	isb	sy
}
   2856e:	4770      	bx	lr

00028570 <z_reschedule_unlocked>:
	__asm__ volatile(
   28570:	f04f 0320 	mov.w	r3, #32
   28574:	f3ef 8011 	mrs	r0, BASEPRI
   28578:	f383 8812 	msr	BASEPRI_MAX, r3
   2857c:	f3bf 8f6f 	isb	sy
   28580:	f7ff bfea 	b.w	28558 <z_reschedule_irqlock>

00028584 <z_unpend_all>:
{
   28584:	b538      	push	{r3, r4, r5, lr}
   28586:	4605      	mov	r5, r0
	int need_sched = 0;
   28588:	2000      	movs	r0, #0
	return list->head == list;
   2858a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2858c:	42a5      	cmp	r5, r4
   2858e:	d000      	beq.n	28592 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28590:	b904      	cbnz	r4, 28594 <z_unpend_all+0x10>
}
   28592:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   28594:	4620      	mov	r0, r4
   28596:	f7f8 fa51 	bl	20a3c <z_unpend_thread>
		z_ready_thread(thread);
   2859a:	4620      	mov	r0, r4
   2859c:	f7f7 fd64 	bl	20068 <z_ready_thread>
		need_sched = 1;
   285a0:	2001      	movs	r0, #1
   285a2:	e7f2      	b.n	2858a <z_unpend_all+0x6>

000285a4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   285a4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   285a6:	f7f9 f8ef 	bl	21788 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   285aa:	bd08      	pop	{r3, pc}

000285ac <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   285ac:	f7f9 b8ec 	b.w	21788 <sys_clock_tick_get>

000285b0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   285b0:	b108      	cbz	r0, 285b6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   285b2:	f7e5 b9d3 	b.w	d95c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   285b6:	4770      	bx	lr

000285b8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   285b8:	f1b1 3fff 	cmp.w	r1, #4294967295
   285bc:	bf08      	it	eq
   285be:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   285c2:	b538      	push	{r3, r4, r5, lr}
   285c4:	460c      	mov	r4, r1
   285c6:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   285c8:	d014      	beq.n	285f4 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   285ca:	4308      	orrs	r0, r1
   285cc:	d103      	bne.n	285d6 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   285ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   285d2:	f7f9 b8d9 	b.w	21788 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   285d6:	f06f 0001 	mvn.w	r0, #1
   285da:	f04f 33ff 	mov.w	r3, #4294967295
   285de:	1b40      	subs	r0, r0, r5
   285e0:	eb63 0101 	sbc.w	r1, r3, r1
   285e4:	2900      	cmp	r1, #0
   285e6:	da04      	bge.n	285f2 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   285e8:	f7f9 f8ce 	bl	21788 <sys_clock_tick_get>
   285ec:	1940      	adds	r0, r0, r5
   285ee:	eb41 0104 	adc.w	r1, r1, r4
}
   285f2:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   285f4:	f04f 30ff 	mov.w	r0, #4294967295
   285f8:	4601      	mov	r1, r0
   285fa:	e7fa      	b.n	285f2 <sys_clock_timeout_end_calc+0x3a>

000285fc <k_timer_init>:
	timer->status = 0U;
   285fc:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   285fe:	e9c0 1208 	strd	r1, r2, [r0, #32]
   28602:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   28606:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2860a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2860e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   28610:	6343      	str	r3, [r0, #52]	; 0x34
}
   28612:	4770      	bx	lr

00028614 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   28614:	b510      	push	{r4, lr}
   28616:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   28618:	f7f8 ff34 	bl	21484 <z_abort_timeout>

	if (inactive) {
   2861c:	b9b0      	cbnz	r0, 2864c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2861e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28620:	b10b      	cbz	r3, 28626 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   28622:	4620      	mov	r0, r4
   28624:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   28626:	f104 0018 	add.w	r0, r4, #24
   2862a:	f7f8 faa9 	bl	20b80 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2862e:	b168      	cbz	r0, 2864c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   28630:	f7f7 fd1a 	bl	20068 <z_ready_thread>
   28634:	f04f 0320 	mov.w	r3, #32
   28638:	f3ef 8011 	mrs	r0, BASEPRI
   2863c:	f383 8812 	msr	BASEPRI_MAX, r3
   28640:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   28644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28648:	f7ff bf86 	b.w	28558 <z_reschedule_irqlock>
   2864c:	bd10      	pop	{r4, pc}

0002864e <add_event>:
{
   2864e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28650:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28652:	e9d0 1300 	ldrd	r1, r3, [r0]
   28656:	4288      	cmp	r0, r1
   28658:	4604      	mov	r4, r0
   2865a:	d105      	bne.n	28668 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2865c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2865e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   28662:	601d      	str	r5, [r3, #0]
	list->tail = node;
   28664:	6065      	str	r5, [r4, #4]
   28666:	e01d      	b.n	286a4 <add_event+0x56>
	if ((pending == NULL) ||
   28668:	2b00      	cmp	r3, #0
   2866a:	d0f7      	beq.n	2865c <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2866c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2866e:	b100      	cbz	r0, 28672 <add_event+0x24>
   28670:	3860      	subs	r0, #96	; 0x60
   28672:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   28676:	4639      	mov	r1, r7
   28678:	f7ff ff65 	bl	28546 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2867c:	2800      	cmp	r0, #0
   2867e:	dced      	bgt.n	2865c <add_event+0xe>
	return list->head == list;
   28680:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28682:	42b4      	cmp	r4, r6
   28684:	d0ea      	beq.n	2865c <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28686:	2e00      	cmp	r6, #0
   28688:	d0e8      	beq.n	2865c <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2868a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2868c:	b101      	cbz	r1, 28690 <add_event+0x42>
   2868e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   28690:	4638      	mov	r0, r7
   28692:	f7ff ff58 	bl	28546 <z_sched_prio_cmp>
   28696:	2800      	cmp	r0, #0
   28698:	dd05      	ble.n	286a6 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2869a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2869c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   286a0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   286a2:	6075      	str	r5, [r6, #4]
}
   286a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   286a6:	6863      	ldr	r3, [r4, #4]
   286a8:	429e      	cmp	r6, r3
   286aa:	d0d7      	beq.n	2865c <add_event+0xe>
   286ac:	6836      	ldr	r6, [r6, #0]
   286ae:	e7ea      	b.n	28686 <add_event+0x38>

000286b0 <signal_poll_event>:
{
   286b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   286b4:	6884      	ldr	r4, [r0, #8]
{
   286b6:	4605      	mov	r5, r0
   286b8:	460e      	mov	r6, r1
	if (poller != NULL) {
   286ba:	b144      	cbz	r4, 286ce <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   286bc:	7863      	ldrb	r3, [r4, #1]
   286be:	2b01      	cmp	r3, #1
   286c0:	d12e      	bne.n	28720 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   286c2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   286c6:	f013 0302 	ands.w	r3, r3, #2
   286ca:	d10a      	bne.n	286e2 <signal_poll_event+0x32>
		poller->is_polling = false;
   286cc:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   286ce:	2000      	movs	r0, #0
	event->state |= state;
   286d0:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   286d2:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   286d4:	f3c3 3286 	ubfx	r2, r3, #14, #7
   286d8:	4316      	orrs	r6, r2
   286da:	f366 3394 	bfi	r3, r6, #14, #7
   286de:	60eb      	str	r3, [r5, #12]
	return retcode;
   286e0:	e03e      	b.n	28760 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   286e2:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   286e6:	f1b3 3fff 	cmp.w	r3, #4294967295
   286ea:	bf08      	it	eq
   286ec:	f112 0f02 	cmneq.w	r2, #2
   286f0:	d032      	beq.n	28758 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   286f2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   286f6:	4640      	mov	r0, r8
   286f8:	f7f8 f9a0 	bl	20a3c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   286fc:	2e08      	cmp	r6, #8
   286fe:	bf0c      	ite	eq
   28700:	f06f 0303 	mvneq.w	r3, #3
   28704:	2300      	movne	r3, #0
   28706:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   28708:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2870c:	06db      	lsls	r3, r3, #27
   2870e:	d109      	bne.n	28724 <signal_poll_event+0x74>
   28710:	f854 7c48 	ldr.w	r7, [r4, #-72]
   28714:	b937      	cbnz	r7, 28724 <signal_poll_event+0x74>
	z_ready_thread(thread);
   28716:	4640      	mov	r0, r8
   28718:	f7f7 fca6 	bl	20068 <z_ready_thread>
		poller->is_polling = false;
   2871c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2871e:	e7d6      	b.n	286ce <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   28720:	2b02      	cmp	r3, #2
   28722:	d001      	beq.n	28728 <signal_poll_event+0x78>
		poller->is_polling = false;
   28724:	2300      	movs	r3, #0
   28726:	e7d1      	b.n	286cc <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   28728:	7823      	ldrb	r3, [r4, #0]
   2872a:	2b00      	cmp	r3, #0
   2872c:	d0cf      	beq.n	286ce <signal_poll_event+0x1e>
   2872e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   28732:	2f00      	cmp	r7, #0
   28734:	d0f2      	beq.n	2871c <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   28736:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2873a:	f1a4 0914 	sub.w	r9, r4, #20
   2873e:	f104 0014 	add.w	r0, r4, #20
   28742:	f7f8 fe9f 	bl	21484 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   28746:	4649      	mov	r1, r9
   28748:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2874a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2874e:	f7f7 f819 	bl	1f784 <z_work_submit_to_queue>
		poller->is_polling = false;
   28752:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   28756:	e7ba      	b.n	286ce <signal_poll_event+0x1e>
		poller->is_polling = false;
   28758:	2300      	movs	r3, #0
		return -EAGAIN;
   2875a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2875e:	7023      	strb	r3, [r4, #0]
}
   28760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00028764 <z_handle_obj_poll_events>:
{
   28764:	4603      	mov	r3, r0
	return list->head == list;
   28766:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   28768:	4283      	cmp	r3, r0
   2876a:	d008      	beq.n	2877e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2876c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   28770:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28772:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28774:	2300      	movs	r3, #0
	node->prev = NULL;
   28776:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2877a:	f7ff bf99 	b.w	286b0 <signal_poll_event>
}
   2877e:	4770      	bx	lr

00028780 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   28780:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   28782:	e9c0 0000 	strd	r0, r0, [r0]
   28786:	6083      	str	r3, [r0, #8]
}
   28788:	4770      	bx	lr

0002878a <k_free>:
	if (ptr != NULL) {
   2878a:	b120      	cbz	r0, 28796 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2878c:	1f01      	subs	r1, r0, #4
   2878e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   28792:	f7f5 bfc7 	b.w	1e724 <k_heap_free>
}
   28796:	4770      	bx	lr

00028798 <k_malloc>:
{
   28798:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2879a:	2004      	movs	r0, #4
   2879c:	f7f9 bcba 	b.w	22114 <k_aligned_alloc>

000287a0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   287a0:	4770      	bx	lr

000287a2 <memcmp>:
   287a2:	3901      	subs	r1, #1
   287a4:	4402      	add	r2, r0
   287a6:	b510      	push	{r4, lr}
   287a8:	4290      	cmp	r0, r2
   287aa:	d101      	bne.n	287b0 <memcmp+0xe>
   287ac:	2000      	movs	r0, #0
   287ae:	e005      	b.n	287bc <memcmp+0x1a>
   287b0:	7803      	ldrb	r3, [r0, #0]
   287b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   287b6:	42a3      	cmp	r3, r4
   287b8:	d001      	beq.n	287be <memcmp+0x1c>
   287ba:	1b18      	subs	r0, r3, r4
   287bc:	bd10      	pop	{r4, pc}
   287be:	3001      	adds	r0, #1
   287c0:	e7f2      	b.n	287a8 <memcmp+0x6>

000287c2 <memcpy>:
   287c2:	440a      	add	r2, r1
   287c4:	1e43      	subs	r3, r0, #1
   287c6:	4291      	cmp	r1, r2
   287c8:	d100      	bne.n	287cc <memcpy+0xa>
   287ca:	4770      	bx	lr
   287cc:	b510      	push	{r4, lr}
   287ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   287d2:	4291      	cmp	r1, r2
   287d4:	f803 4f01 	strb.w	r4, [r3, #1]!
   287d8:	d1f9      	bne.n	287ce <memcpy+0xc>
   287da:	bd10      	pop	{r4, pc}

000287dc <memmove>:
   287dc:	4288      	cmp	r0, r1
   287de:	b510      	push	{r4, lr}
   287e0:	eb01 0402 	add.w	r4, r1, r2
   287e4:	d902      	bls.n	287ec <memmove+0x10>
   287e6:	4284      	cmp	r4, r0
   287e8:	4623      	mov	r3, r4
   287ea:	d807      	bhi.n	287fc <memmove+0x20>
   287ec:	1e43      	subs	r3, r0, #1
   287ee:	42a1      	cmp	r1, r4
   287f0:	d008      	beq.n	28804 <memmove+0x28>
   287f2:	f811 2b01 	ldrb.w	r2, [r1], #1
   287f6:	f803 2f01 	strb.w	r2, [r3, #1]!
   287fa:	e7f8      	b.n	287ee <memmove+0x12>
   287fc:	4402      	add	r2, r0
   287fe:	4601      	mov	r1, r0
   28800:	428a      	cmp	r2, r1
   28802:	d100      	bne.n	28806 <memmove+0x2a>
   28804:	bd10      	pop	{r4, pc}
   28806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2880a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2880e:	e7f7      	b.n	28800 <memmove+0x24>

00028810 <memset>:
   28810:	4402      	add	r2, r0
   28812:	4603      	mov	r3, r0
   28814:	4293      	cmp	r3, r2
   28816:	d100      	bne.n	2881a <memset+0xa>
   28818:	4770      	bx	lr
   2881a:	f803 1b01 	strb.w	r1, [r3], #1
   2881e:	e7f9      	b.n	28814 <memset+0x4>

00028820 <_calloc_r>:
   28820:	b538      	push	{r3, r4, r5, lr}
   28822:	fb02 f501 	mul.w	r5, r2, r1
   28826:	4629      	mov	r1, r5
   28828:	f7f9 fd60 	bl	222ec <_malloc_r>
   2882c:	4604      	mov	r4, r0
   2882e:	b118      	cbz	r0, 28838 <_calloc_r+0x18>
   28830:	462a      	mov	r2, r5
   28832:	2100      	movs	r1, #0
   28834:	f7ff ffec 	bl	28810 <memset>
   28838:	4620      	mov	r0, r4
   2883a:	bd38      	pop	{r3, r4, r5, pc}

0002883c <__cvt>:
   2883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28840:	b089      	sub	sp, #36	; 0x24
   28842:	2b00      	cmp	r3, #0
   28844:	461d      	mov	r5, r3
   28846:	4614      	mov	r4, r2
   28848:	bfba      	itte	lt
   2884a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2884e:	4614      	movlt	r4, r2
   28850:	2300      	movge	r3, #0
   28852:	9a14      	ldr	r2, [sp, #80]	; 0x50
   28854:	bfbc      	itt	lt
   28856:	461d      	movlt	r5, r3
   28858:	232d      	movlt	r3, #45	; 0x2d
   2885a:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   2885e:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   28862:	f028 0a20 	bic.w	sl, r8, #32
   28866:	7013      	strb	r3, [r2, #0]
   28868:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2886c:	d005      	beq.n	2887a <__cvt+0x3e>
   2886e:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   28872:	d100      	bne.n	28876 <__cvt+0x3a>
   28874:	3601      	adds	r6, #1
   28876:	2302      	movs	r3, #2
   28878:	e000      	b.n	2887c <__cvt+0x40>
   2887a:	2303      	movs	r3, #3
   2887c:	aa07      	add	r2, sp, #28
   2887e:	9204      	str	r2, [sp, #16]
   28880:	aa06      	add	r2, sp, #24
   28882:	e9cd 3600 	strd	r3, r6, [sp]
   28886:	e9cd 9202 	strd	r9, r2, [sp, #8]
   2888a:	462b      	mov	r3, r5
   2888c:	4622      	mov	r2, r4
   2888e:	f7e1 f9f3 	bl	9c78 <_dtoa_r>
   28892:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   28896:	4607      	mov	r7, r0
   28898:	d119      	bne.n	288ce <__cvt+0x92>
   2889a:	f01b 0f01 	tst.w	fp, #1
   2889e:	d00e      	beq.n	288be <__cvt+0x82>
   288a0:	eb07 0806 	add.w	r8, r7, r6
   288a4:	2200      	movs	r2, #0
   288a6:	2300      	movs	r3, #0
   288a8:	4620      	mov	r0, r4
   288aa:	4629      	mov	r1, r5
   288ac:	f7e0 fb90 	bl	8fd0 <__aeabi_dcmpeq>
   288b0:	b108      	cbz	r0, 288b6 <__cvt+0x7a>
   288b2:	f8cd 801c 	str.w	r8, [sp, #28]
   288b6:	2230      	movs	r2, #48	; 0x30
   288b8:	9b07      	ldr	r3, [sp, #28]
   288ba:	4543      	cmp	r3, r8
   288bc:	d321      	bcc.n	28902 <__cvt+0xc6>
   288be:	9b07      	ldr	r3, [sp, #28]
   288c0:	4638      	mov	r0, r7
   288c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   288c4:	1bdb      	subs	r3, r3, r7
   288c6:	6013      	str	r3, [r2, #0]
   288c8:	b009      	add	sp, #36	; 0x24
   288ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   288d2:	d0e2      	beq.n	2889a <__cvt+0x5e>
   288d4:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   288d8:	eb00 0806 	add.w	r8, r0, r6
   288dc:	d1e2      	bne.n	288a4 <__cvt+0x68>
   288de:	7803      	ldrb	r3, [r0, #0]
   288e0:	2b30      	cmp	r3, #48	; 0x30
   288e2:	d10a      	bne.n	288fa <__cvt+0xbe>
   288e4:	2200      	movs	r2, #0
   288e6:	2300      	movs	r3, #0
   288e8:	4620      	mov	r0, r4
   288ea:	4629      	mov	r1, r5
   288ec:	f7e0 fb70 	bl	8fd0 <__aeabi_dcmpeq>
   288f0:	b918      	cbnz	r0, 288fa <__cvt+0xbe>
   288f2:	f1c6 0601 	rsb	r6, r6, #1
   288f6:	f8c9 6000 	str.w	r6, [r9]
   288fa:	f8d9 3000 	ldr.w	r3, [r9]
   288fe:	4498      	add	r8, r3
   28900:	e7d0      	b.n	288a4 <__cvt+0x68>
   28902:	1c59      	adds	r1, r3, #1
   28904:	9107      	str	r1, [sp, #28]
   28906:	701a      	strb	r2, [r3, #0]
   28908:	e7d6      	b.n	288b8 <__cvt+0x7c>

0002890a <__exponent>:
   2890a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2890c:	2900      	cmp	r1, #0
   2890e:	7002      	strb	r2, [r0, #0]
   28910:	bfba      	itte	lt
   28912:	4249      	neglt	r1, r1
   28914:	232d      	movlt	r3, #45	; 0x2d
   28916:	232b      	movge	r3, #43	; 0x2b
   28918:	2909      	cmp	r1, #9
   2891a:	7043      	strb	r3, [r0, #1]
   2891c:	dd28      	ble.n	28970 <__exponent+0x66>
   2891e:	f10d 0307 	add.w	r3, sp, #7
   28922:	270a      	movs	r7, #10
   28924:	461d      	mov	r5, r3
   28926:	461a      	mov	r2, r3
   28928:	3b01      	subs	r3, #1
   2892a:	fbb1 f6f7 	udiv	r6, r1, r7
   2892e:	fb07 1416 	mls	r4, r7, r6, r1
   28932:	3430      	adds	r4, #48	; 0x30
   28934:	f802 4c01 	strb.w	r4, [r2, #-1]
   28938:	460c      	mov	r4, r1
   2893a:	4631      	mov	r1, r6
   2893c:	2c63      	cmp	r4, #99	; 0x63
   2893e:	dcf2      	bgt.n	28926 <__exponent+0x1c>
   28940:	3130      	adds	r1, #48	; 0x30
   28942:	1e94      	subs	r4, r2, #2
   28944:	f803 1c01 	strb.w	r1, [r3, #-1]
   28948:	1c41      	adds	r1, r0, #1
   2894a:	4623      	mov	r3, r4
   2894c:	42ab      	cmp	r3, r5
   2894e:	d30a      	bcc.n	28966 <__exponent+0x5c>
   28950:	f10d 0309 	add.w	r3, sp, #9
   28954:	1a9b      	subs	r3, r3, r2
   28956:	42ac      	cmp	r4, r5
   28958:	bf88      	it	hi
   2895a:	2300      	movhi	r3, #0
   2895c:	3302      	adds	r3, #2
   2895e:	4403      	add	r3, r0
   28960:	1a18      	subs	r0, r3, r0
   28962:	b003      	add	sp, #12
   28964:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28966:	f813 6b01 	ldrb.w	r6, [r3], #1
   2896a:	f801 6f01 	strb.w	r6, [r1, #1]!
   2896e:	e7ed      	b.n	2894c <__exponent+0x42>
   28970:	2330      	movs	r3, #48	; 0x30
   28972:	3130      	adds	r1, #48	; 0x30
   28974:	7083      	strb	r3, [r0, #2]
   28976:	1d03      	adds	r3, r0, #4
   28978:	70c1      	strb	r1, [r0, #3]
   2897a:	e7f1      	b.n	28960 <__exponent+0x56>

0002897c <_printf_common>:
   2897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28980:	4616      	mov	r6, r2
   28982:	4698      	mov	r8, r3
   28984:	688a      	ldr	r2, [r1, #8]
   28986:	4607      	mov	r7, r0
   28988:	690b      	ldr	r3, [r1, #16]
   2898a:	460c      	mov	r4, r1
   2898c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   28990:	4293      	cmp	r3, r2
   28992:	bfb8      	it	lt
   28994:	4613      	movlt	r3, r2
   28996:	6033      	str	r3, [r6, #0]
   28998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2899c:	b10a      	cbz	r2, 289a2 <_printf_common+0x26>
   2899e:	3301      	adds	r3, #1
   289a0:	6033      	str	r3, [r6, #0]
   289a2:	6823      	ldr	r3, [r4, #0]
   289a4:	0699      	lsls	r1, r3, #26
   289a6:	bf42      	ittt	mi
   289a8:	6833      	ldrmi	r3, [r6, #0]
   289aa:	3302      	addmi	r3, #2
   289ac:	6033      	strmi	r3, [r6, #0]
   289ae:	6825      	ldr	r5, [r4, #0]
   289b0:	f015 0506 	ands.w	r5, r5, #6
   289b4:	d106      	bne.n	289c4 <_printf_common+0x48>
   289b6:	f104 0a19 	add.w	sl, r4, #25
   289ba:	68e3      	ldr	r3, [r4, #12]
   289bc:	6832      	ldr	r2, [r6, #0]
   289be:	1a9b      	subs	r3, r3, r2
   289c0:	42ab      	cmp	r3, r5
   289c2:	dc2b      	bgt.n	28a1c <_printf_common+0xa0>
   289c4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   289c8:	6822      	ldr	r2, [r4, #0]
   289ca:	3b00      	subs	r3, #0
   289cc:	bf18      	it	ne
   289ce:	2301      	movne	r3, #1
   289d0:	0692      	lsls	r2, r2, #26
   289d2:	d430      	bmi.n	28a36 <_printf_common+0xba>
   289d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   289d8:	4641      	mov	r1, r8
   289da:	4638      	mov	r0, r7
   289dc:	47c8      	blx	r9
   289de:	3001      	adds	r0, #1
   289e0:	d023      	beq.n	28a2a <_printf_common+0xae>
   289e2:	6823      	ldr	r3, [r4, #0]
   289e4:	341a      	adds	r4, #26
   289e6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   289ea:	f003 0306 	and.w	r3, r3, #6
   289ee:	2b04      	cmp	r3, #4
   289f0:	bf0a      	itet	eq
   289f2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   289f6:	2500      	movne	r5, #0
   289f8:	6833      	ldreq	r3, [r6, #0]
   289fa:	f04f 0600 	mov.w	r6, #0
   289fe:	bf08      	it	eq
   28a00:	1aed      	subeq	r5, r5, r3
   28a02:	f854 3c12 	ldr.w	r3, [r4, #-18]
   28a06:	bf08      	it	eq
   28a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   28a0c:	4293      	cmp	r3, r2
   28a0e:	bfc4      	itt	gt
   28a10:	1a9b      	subgt	r3, r3, r2
   28a12:	18ed      	addgt	r5, r5, r3
   28a14:	42b5      	cmp	r5, r6
   28a16:	d11a      	bne.n	28a4e <_printf_common+0xd2>
   28a18:	2000      	movs	r0, #0
   28a1a:	e008      	b.n	28a2e <_printf_common+0xb2>
   28a1c:	2301      	movs	r3, #1
   28a1e:	4652      	mov	r2, sl
   28a20:	4641      	mov	r1, r8
   28a22:	4638      	mov	r0, r7
   28a24:	47c8      	blx	r9
   28a26:	3001      	adds	r0, #1
   28a28:	d103      	bne.n	28a32 <_printf_common+0xb6>
   28a2a:	f04f 30ff 	mov.w	r0, #4294967295
   28a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28a32:	3501      	adds	r5, #1
   28a34:	e7c1      	b.n	289ba <_printf_common+0x3e>
   28a36:	18e1      	adds	r1, r4, r3
   28a38:	1c5a      	adds	r2, r3, #1
   28a3a:	2030      	movs	r0, #48	; 0x30
   28a3c:	3302      	adds	r3, #2
   28a3e:	4422      	add	r2, r4
   28a40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   28a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   28a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   28a4c:	e7c2      	b.n	289d4 <_printf_common+0x58>
   28a4e:	2301      	movs	r3, #1
   28a50:	4622      	mov	r2, r4
   28a52:	4641      	mov	r1, r8
   28a54:	4638      	mov	r0, r7
   28a56:	47c8      	blx	r9
   28a58:	3001      	adds	r0, #1
   28a5a:	d0e6      	beq.n	28a2a <_printf_common+0xae>
   28a5c:	3601      	adds	r6, #1
   28a5e:	e7d9      	b.n	28a14 <_printf_common+0x98>

00028a60 <strcpy>:
   28a60:	4603      	mov	r3, r0
   28a62:	f811 2b01 	ldrb.w	r2, [r1], #1
   28a66:	f803 2b01 	strb.w	r2, [r3], #1
   28a6a:	2a00      	cmp	r2, #0
   28a6c:	d1f9      	bne.n	28a62 <strcpy+0x2>
   28a6e:	4770      	bx	lr

00028a70 <strncmp>:
   28a70:	b510      	push	{r4, lr}
   28a72:	b16a      	cbz	r2, 28a90 <strncmp+0x20>
   28a74:	3901      	subs	r1, #1
   28a76:	1884      	adds	r4, r0, r2
   28a78:	f810 2b01 	ldrb.w	r2, [r0], #1
   28a7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   28a80:	429a      	cmp	r2, r3
   28a82:	d103      	bne.n	28a8c <strncmp+0x1c>
   28a84:	42a0      	cmp	r0, r4
   28a86:	d001      	beq.n	28a8c <strncmp+0x1c>
   28a88:	2a00      	cmp	r2, #0
   28a8a:	d1f5      	bne.n	28a78 <strncmp+0x8>
   28a8c:	1ad0      	subs	r0, r2, r3
   28a8e:	bd10      	pop	{r4, pc}
   28a90:	4610      	mov	r0, r2
   28a92:	e7fc      	b.n	28a8e <strncmp+0x1e>

00028a94 <strncpy>:
   28a94:	3901      	subs	r1, #1
   28a96:	4603      	mov	r3, r0
   28a98:	b510      	push	{r4, lr}
   28a9a:	b132      	cbz	r2, 28aaa <strncpy+0x16>
   28a9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   28aa0:	3a01      	subs	r2, #1
   28aa2:	f803 4b01 	strb.w	r4, [r3], #1
   28aa6:	2c00      	cmp	r4, #0
   28aa8:	d1f7      	bne.n	28a9a <strncpy+0x6>
   28aaa:	441a      	add	r2, r3
   28aac:	2100      	movs	r1, #0
   28aae:	4293      	cmp	r3, r2
   28ab0:	d100      	bne.n	28ab4 <strncpy+0x20>
   28ab2:	bd10      	pop	{r4, pc}
   28ab4:	f803 1b01 	strb.w	r1, [r3], #1
   28ab8:	e7f9      	b.n	28aae <strncpy+0x1a>

00028aba <strnlen>:
   28aba:	4602      	mov	r2, r0
   28abc:	4401      	add	r1, r0
   28abe:	b510      	push	{r4, lr}
   28ac0:	428a      	cmp	r2, r1
   28ac2:	4613      	mov	r3, r2
   28ac4:	d003      	beq.n	28ace <strnlen+0x14>
   28ac6:	781c      	ldrb	r4, [r3, #0]
   28ac8:	3201      	adds	r2, #1
   28aca:	2c00      	cmp	r4, #0
   28acc:	d1f8      	bne.n	28ac0 <strnlen+0x6>
   28ace:	1a18      	subs	r0, r3, r0
   28ad0:	bd10      	pop	{r4, pc}

00028ad2 <quorem>:
   28ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ad6:	6903      	ldr	r3, [r0, #16]
   28ad8:	4607      	mov	r7, r0
   28ada:	690c      	ldr	r4, [r1, #16]
   28adc:	42a3      	cmp	r3, r4
   28ade:	f2c0 8083 	blt.w	28be8 <_flash_used+0xc>
   28ae2:	3c01      	subs	r4, #1
   28ae4:	f100 0514 	add.w	r5, r0, #20
   28ae8:	f101 0814 	add.w	r8, r1, #20
   28aec:	00a3      	lsls	r3, r4, #2
   28aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   28af2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   28af6:	9300      	str	r3, [sp, #0]
   28af8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   28afc:	9301      	str	r3, [sp, #4]
   28afe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   28b02:	3301      	adds	r3, #1
   28b04:	429a      	cmp	r2, r3
   28b06:	fbb2 f6f3 	udiv	r6, r2, r3
   28b0a:	d331      	bcc.n	28b70 <quorem+0x9e>
   28b0c:	f04f 0a00 	mov.w	sl, #0
   28b10:	46c4      	mov	ip, r8
   28b12:	46ae      	mov	lr, r5
   28b14:	46d3      	mov	fp, sl
   28b16:	f85c 3b04 	ldr.w	r3, [ip], #4
   28b1a:	b298      	uxth	r0, r3
   28b1c:	45e1      	cmp	r9, ip
   28b1e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   28b22:	fb06 a000 	mla	r0, r6, r0, sl
   28b26:	ea4f 4210 	mov.w	r2, r0, lsr #16
   28b2a:	b280      	uxth	r0, r0
   28b2c:	fb06 2303 	mla	r3, r6, r3, r2
   28b30:	f8de 2000 	ldr.w	r2, [lr]
   28b34:	b292      	uxth	r2, r2
   28b36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   28b3a:	eba2 0200 	sub.w	r2, r2, r0
   28b3e:	b29b      	uxth	r3, r3
   28b40:	f8de 0000 	ldr.w	r0, [lr]
   28b44:	445a      	add	r2, fp
   28b46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   28b4a:	b292      	uxth	r2, r2
   28b4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   28b50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   28b54:	ea4f 4b23 	mov.w	fp, r3, asr #16
   28b58:	f84e 2b04 	str.w	r2, [lr], #4
   28b5c:	d2db      	bcs.n	28b16 <quorem+0x44>
   28b5e:	9b00      	ldr	r3, [sp, #0]
   28b60:	58eb      	ldr	r3, [r5, r3]
   28b62:	b92b      	cbnz	r3, 28b70 <quorem+0x9e>
   28b64:	9b01      	ldr	r3, [sp, #4]
   28b66:	3b04      	subs	r3, #4
   28b68:	429d      	cmp	r5, r3
   28b6a:	461a      	mov	r2, r3
   28b6c:	d330      	bcc.n	28bd0 <quorem+0xfe>
   28b6e:	613c      	str	r4, [r7, #16]
   28b70:	4638      	mov	r0, r7
   28b72:	f000 f8cd 	bl	28d10 <__mcmp>
   28b76:	2800      	cmp	r0, #0
   28b78:	db26      	blt.n	28bc8 <quorem+0xf6>
   28b7a:	4629      	mov	r1, r5
   28b7c:	2000      	movs	r0, #0
   28b7e:	f858 2b04 	ldr.w	r2, [r8], #4
   28b82:	f8d1 c000 	ldr.w	ip, [r1]
   28b86:	fa1f fe82 	uxth.w	lr, r2
   28b8a:	45c1      	cmp	r9, r8
   28b8c:	fa1f f38c 	uxth.w	r3, ip
   28b90:	ea4f 4212 	mov.w	r2, r2, lsr #16
   28b94:	eba3 030e 	sub.w	r3, r3, lr
   28b98:	4403      	add	r3, r0
   28b9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   28b9e:	b29b      	uxth	r3, r3
   28ba0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   28ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   28ba8:	ea4f 4022 	mov.w	r0, r2, asr #16
   28bac:	f841 3b04 	str.w	r3, [r1], #4
   28bb0:	d2e5      	bcs.n	28b7e <quorem+0xac>
   28bb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   28bb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   28bba:	b922      	cbnz	r2, 28bc6 <quorem+0xf4>
   28bbc:	3b04      	subs	r3, #4
   28bbe:	429d      	cmp	r5, r3
   28bc0:	461a      	mov	r2, r3
   28bc2:	d30b      	bcc.n	28bdc <_flash_used>
   28bc4:	613c      	str	r4, [r7, #16]
   28bc6:	3601      	adds	r6, #1
   28bc8:	4630      	mov	r0, r6
   28bca:	b003      	add	sp, #12
   28bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28bd0:	6812      	ldr	r2, [r2, #0]
   28bd2:	3b04      	subs	r3, #4
   28bd4:	2a00      	cmp	r2, #0
   28bd6:	d1ca      	bne.n	28b6e <quorem+0x9c>
   28bd8:	3c01      	subs	r4, #1
   28bda:	e7c5      	b.n	28b68 <quorem+0x96>
   28bdc:	6812      	ldr	r2, [r2, #0]
   28bde:	3b04      	subs	r3, #4
   28be0:	2a00      	cmp	r2, #0
   28be2:	d1ef      	bne.n	28bc4 <quorem+0xf2>
   28be4:	3c01      	subs	r4, #1
   28be6:	e7ea      	b.n	28bbe <quorem+0xec>
   28be8:	2000      	movs	r0, #0
   28bea:	e7ee      	b.n	28bca <quorem+0xf8>

00028bec <__sfmoreglue>:
   28bec:	b570      	push	{r4, r5, r6, lr}
   28bee:	2368      	movs	r3, #104	; 0x68
   28bf0:	1e4d      	subs	r5, r1, #1
   28bf2:	460e      	mov	r6, r1
   28bf4:	435d      	muls	r5, r3
   28bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
   28bfa:	f7f9 fb77 	bl	222ec <_malloc_r>
   28bfe:	4604      	mov	r4, r0
   28c00:	b140      	cbz	r0, 28c14 <__sfmoreglue+0x28>
   28c02:	2100      	movs	r1, #0
   28c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
   28c08:	e9c0 1600 	strd	r1, r6, [r0]
   28c0c:	300c      	adds	r0, #12
   28c0e:	60a0      	str	r0, [r4, #8]
   28c10:	f7ff fdfe 	bl	28810 <memset>
   28c14:	4620      	mov	r0, r4
   28c16:	bd70      	pop	{r4, r5, r6, pc}

00028c18 <_fwalk_reent>:
   28c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28c1c:	4606      	mov	r6, r0
   28c1e:	4688      	mov	r8, r1
   28c20:	f100 0448 	add.w	r4, r0, #72	; 0x48
   28c24:	2700      	movs	r7, #0
   28c26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   28c2a:	f1b9 0901 	subs.w	r9, r9, #1
   28c2e:	d505      	bpl.n	28c3c <_fwalk_reent+0x24>
   28c30:	6824      	ldr	r4, [r4, #0]
   28c32:	2c00      	cmp	r4, #0
   28c34:	d1f7      	bne.n	28c26 <_fwalk_reent+0xe>
   28c36:	4638      	mov	r0, r7
   28c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28c3c:	89ab      	ldrh	r3, [r5, #12]
   28c3e:	2b01      	cmp	r3, #1
   28c40:	d907      	bls.n	28c52 <_fwalk_reent+0x3a>
   28c42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   28c46:	3301      	adds	r3, #1
   28c48:	d003      	beq.n	28c52 <_fwalk_reent+0x3a>
   28c4a:	4629      	mov	r1, r5
   28c4c:	4630      	mov	r0, r6
   28c4e:	47c0      	blx	r8
   28c50:	4307      	orrs	r7, r0
   28c52:	3568      	adds	r5, #104	; 0x68
   28c54:	e7e9      	b.n	28c2a <_fwalk_reent+0x12>

00028c56 <memchr>:
   28c56:	b2c9      	uxtb	r1, r1
   28c58:	4603      	mov	r3, r0
   28c5a:	4402      	add	r2, r0
   28c5c:	b510      	push	{r4, lr}
   28c5e:	4293      	cmp	r3, r2
   28c60:	4618      	mov	r0, r3
   28c62:	d101      	bne.n	28c68 <memchr+0x12>
   28c64:	2000      	movs	r0, #0
   28c66:	e003      	b.n	28c70 <memchr+0x1a>
   28c68:	7804      	ldrb	r4, [r0, #0]
   28c6a:	3301      	adds	r3, #1
   28c6c:	428c      	cmp	r4, r1
   28c6e:	d1f6      	bne.n	28c5e <memchr+0x8>
   28c70:	bd10      	pop	{r4, pc}

00028c72 <__hi0bits>:
   28c72:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   28c76:	4603      	mov	r3, r0
   28c78:	bf36      	itet	cc
   28c7a:	0403      	lslcc	r3, r0, #16
   28c7c:	2000      	movcs	r0, #0
   28c7e:	2010      	movcc	r0, #16
   28c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   28c84:	bf3c      	itt	cc
   28c86:	021b      	lslcc	r3, r3, #8
   28c88:	3008      	addcc	r0, #8
   28c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   28c8e:	bf3c      	itt	cc
   28c90:	011b      	lslcc	r3, r3, #4
   28c92:	3004      	addcc	r0, #4
   28c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   28c98:	d303      	bcc.n	28ca2 <__hi0bits+0x30>
   28c9a:	2b00      	cmp	r3, #0
   28c9c:	db0a      	blt.n	28cb4 <__hi0bits+0x42>
   28c9e:	3001      	adds	r0, #1
   28ca0:	4770      	bx	lr
   28ca2:	009b      	lsls	r3, r3, #2
   28ca4:	d501      	bpl.n	28caa <__hi0bits+0x38>
   28ca6:	3002      	adds	r0, #2
   28ca8:	4770      	bx	lr
   28caa:	005b      	lsls	r3, r3, #1
   28cac:	d501      	bpl.n	28cb2 <__hi0bits+0x40>
   28cae:	3003      	adds	r0, #3
   28cb0:	4770      	bx	lr
   28cb2:	2020      	movs	r0, #32
   28cb4:	4770      	bx	lr

00028cb6 <__lo0bits>:
   28cb6:	6803      	ldr	r3, [r0, #0]
   28cb8:	4602      	mov	r2, r0
   28cba:	f013 0007 	ands.w	r0, r3, #7
   28cbe:	d00b      	beq.n	28cd8 <__lo0bits+0x22>
   28cc0:	07d9      	lsls	r1, r3, #31
   28cc2:	d421      	bmi.n	28d08 <__lo0bits+0x52>
   28cc4:	0798      	lsls	r0, r3, #30
   28cc6:	bf47      	ittee	mi
   28cc8:	085b      	lsrmi	r3, r3, #1
   28cca:	2001      	movmi	r0, #1
   28ccc:	089b      	lsrpl	r3, r3, #2
   28cce:	2002      	movpl	r0, #2
   28cd0:	bf4c      	ite	mi
   28cd2:	6013      	strmi	r3, [r2, #0]
   28cd4:	6013      	strpl	r3, [r2, #0]
   28cd6:	4770      	bx	lr
   28cd8:	b299      	uxth	r1, r3
   28cda:	b909      	cbnz	r1, 28ce0 <__lo0bits+0x2a>
   28cdc:	0c1b      	lsrs	r3, r3, #16
   28cde:	2010      	movs	r0, #16
   28ce0:	b2d9      	uxtb	r1, r3
   28ce2:	b909      	cbnz	r1, 28ce8 <__lo0bits+0x32>
   28ce4:	3008      	adds	r0, #8
   28ce6:	0a1b      	lsrs	r3, r3, #8
   28ce8:	0719      	lsls	r1, r3, #28
   28cea:	bf04      	itt	eq
   28cec:	091b      	lsreq	r3, r3, #4
   28cee:	3004      	addeq	r0, #4
   28cf0:	0799      	lsls	r1, r3, #30
   28cf2:	bf04      	itt	eq
   28cf4:	089b      	lsreq	r3, r3, #2
   28cf6:	3002      	addeq	r0, #2
   28cf8:	07d9      	lsls	r1, r3, #31
   28cfa:	d403      	bmi.n	28d04 <__lo0bits+0x4e>
   28cfc:	085b      	lsrs	r3, r3, #1
   28cfe:	f100 0001 	add.w	r0, r0, #1
   28d02:	d003      	beq.n	28d0c <__lo0bits+0x56>
   28d04:	6013      	str	r3, [r2, #0]
   28d06:	4770      	bx	lr
   28d08:	2000      	movs	r0, #0
   28d0a:	4770      	bx	lr
   28d0c:	2020      	movs	r0, #32
   28d0e:	4770      	bx	lr

00028d10 <__mcmp>:
   28d10:	4603      	mov	r3, r0
   28d12:	690a      	ldr	r2, [r1, #16]
   28d14:	6900      	ldr	r0, [r0, #16]
   28d16:	1a80      	subs	r0, r0, r2
   28d18:	b530      	push	{r4, r5, lr}
   28d1a:	d10e      	bne.n	28d3a <__mcmp+0x2a>
   28d1c:	3314      	adds	r3, #20
   28d1e:	3114      	adds	r1, #20
   28d20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   28d24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   28d28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   28d2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   28d30:	4295      	cmp	r5, r2
   28d32:	d003      	beq.n	28d3c <__mcmp+0x2c>
   28d34:	d205      	bcs.n	28d42 <__mcmp+0x32>
   28d36:	f04f 30ff 	mov.w	r0, #4294967295
   28d3a:	bd30      	pop	{r4, r5, pc}
   28d3c:	42a3      	cmp	r3, r4
   28d3e:	d3f3      	bcc.n	28d28 <__mcmp+0x18>
   28d40:	e7fb      	b.n	28d3a <__mcmp+0x2a>
   28d42:	2001      	movs	r0, #1
   28d44:	e7f9      	b.n	28d3a <__mcmp+0x2a>

00028d46 <__sfputc_r>:
   28d46:	6893      	ldr	r3, [r2, #8]
   28d48:	3b01      	subs	r3, #1
   28d4a:	2b00      	cmp	r3, #0
   28d4c:	6093      	str	r3, [r2, #8]
   28d4e:	b410      	push	{r4}
   28d50:	da07      	bge.n	28d62 <__sfputc_r+0x1c>
   28d52:	6994      	ldr	r4, [r2, #24]
   28d54:	42a3      	cmp	r3, r4
   28d56:	db01      	blt.n	28d5c <__sfputc_r+0x16>
   28d58:	290a      	cmp	r1, #10
   28d5a:	d102      	bne.n	28d62 <__sfputc_r+0x1c>
   28d5c:	bc10      	pop	{r4}
   28d5e:	f7fa bbf5 	b.w	2354c <__swbuf_r>
   28d62:	6813      	ldr	r3, [r2, #0]
   28d64:	1c58      	adds	r0, r3, #1
   28d66:	6010      	str	r0, [r2, #0]
   28d68:	4608      	mov	r0, r1
   28d6a:	7019      	strb	r1, [r3, #0]
   28d6c:	bc10      	pop	{r4}
   28d6e:	4770      	bx	lr

00028d70 <__sfputs_r>:
   28d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28d72:	4606      	mov	r6, r0
   28d74:	460f      	mov	r7, r1
   28d76:	4614      	mov	r4, r2
   28d78:	18d5      	adds	r5, r2, r3
   28d7a:	42ac      	cmp	r4, r5
   28d7c:	d101      	bne.n	28d82 <__sfputs_r+0x12>
   28d7e:	2000      	movs	r0, #0
   28d80:	e007      	b.n	28d92 <__sfputs_r+0x22>
   28d82:	463a      	mov	r2, r7
   28d84:	f814 1b01 	ldrb.w	r1, [r4], #1
   28d88:	4630      	mov	r0, r6
   28d8a:	f7ff ffdc 	bl	28d46 <__sfputc_r>
   28d8e:	1c43      	adds	r3, r0, #1
   28d90:	d1f3      	bne.n	28d7a <__sfputs_r+0xa>
   28d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028d94 <__sread>:
   28d94:	b510      	push	{r4, lr}
   28d96:	460c      	mov	r4, r1
   28d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   28d9c:	f7fa fd44 	bl	23828 <_read_r>
   28da0:	2800      	cmp	r0, #0
   28da2:	bfab      	itete	ge
   28da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   28da6:	89a3      	ldrhlt	r3, [r4, #12]
   28da8:	181b      	addge	r3, r3, r0
   28daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   28dae:	bfac      	ite	ge
   28db0:	6563      	strge	r3, [r4, #84]	; 0x54
   28db2:	81a3      	strhlt	r3, [r4, #12]
   28db4:	bd10      	pop	{r4, pc}

00028db6 <__swrite>:
   28db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28dba:	461f      	mov	r7, r3
   28dbc:	898b      	ldrh	r3, [r1, #12]
   28dbe:	4605      	mov	r5, r0
   28dc0:	460c      	mov	r4, r1
   28dc2:	05db      	lsls	r3, r3, #23
   28dc4:	4616      	mov	r6, r2
   28dc6:	d505      	bpl.n	28dd4 <__swrite+0x1e>
   28dc8:	2302      	movs	r3, #2
   28dca:	2200      	movs	r2, #0
   28dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   28dd0:	f7fa fcd8 	bl	23784 <_lseek_r>
   28dd4:	89a3      	ldrh	r3, [r4, #12]
   28dd6:	4632      	mov	r2, r6
   28dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   28ddc:	4628      	mov	r0, r5
   28dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   28de2:	81a3      	strh	r3, [r4, #12]
   28de4:	463b      	mov	r3, r7
   28de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   28dea:	f7fa bc01 	b.w	235f0 <_write_r>

00028dee <__sseek>:
   28dee:	b510      	push	{r4, lr}
   28df0:	460c      	mov	r4, r1
   28df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   28df6:	f7fa fcc5 	bl	23784 <_lseek_r>
   28dfa:	1c43      	adds	r3, r0, #1
   28dfc:	89a3      	ldrh	r3, [r4, #12]
   28dfe:	bf15      	itete	ne
   28e00:	6560      	strne	r0, [r4, #84]	; 0x54
   28e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   28e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   28e0a:	81a3      	strheq	r3, [r4, #12]
   28e0c:	bf18      	it	ne
   28e0e:	81a3      	strhne	r3, [r4, #12]
   28e10:	bd10      	pop	{r4, pc}

00028e12 <__sclose>:
   28e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   28e16:	f7fa bc69 	b.w	236ec <_close_r>

00028e1a <abort>:
   28e1a:	2006      	movs	r0, #6
   28e1c:	b508      	push	{r3, lr}
   28e1e:	f7fa fd15 	bl	2384c <raise>
   28e22:	2001      	movs	r0, #1
   28e24:	f7e7 fa56 	bl	102d4 <_exit>

00028e28 <__sflush_r>:
   28e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   28e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e2e:	0717      	lsls	r7, r2, #28
   28e30:	4605      	mov	r5, r0
   28e32:	460c      	mov	r4, r1
   28e34:	d456      	bmi.n	28ee4 <__sflush_r+0xbc>
   28e36:	684b      	ldr	r3, [r1, #4]
   28e38:	2b00      	cmp	r3, #0
   28e3a:	dc02      	bgt.n	28e42 <__sflush_r+0x1a>
   28e3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   28e3e:	2b00      	cmp	r3, #0
   28e40:	dd3d      	ble.n	28ebe <__sflush_r+0x96>
   28e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   28e44:	2e00      	cmp	r6, #0
   28e46:	d03a      	beq.n	28ebe <__sflush_r+0x96>
   28e48:	2300      	movs	r3, #0
   28e4a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   28e4e:	682f      	ldr	r7, [r5, #0]
   28e50:	6a21      	ldr	r1, [r4, #32]
   28e52:	602b      	str	r3, [r5, #0]
   28e54:	d025      	beq.n	28ea2 <__sflush_r+0x7a>
   28e56:	6d62      	ldr	r2, [r4, #84]	; 0x54
   28e58:	89a3      	ldrh	r3, [r4, #12]
   28e5a:	0758      	lsls	r0, r3, #29
   28e5c:	d505      	bpl.n	28e6a <__sflush_r+0x42>
   28e5e:	6863      	ldr	r3, [r4, #4]
   28e60:	1ad2      	subs	r2, r2, r3
   28e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
   28e64:	b10b      	cbz	r3, 28e6a <__sflush_r+0x42>
   28e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
   28e68:	1ad2      	subs	r2, r2, r3
   28e6a:	6a21      	ldr	r1, [r4, #32]
   28e6c:	2300      	movs	r3, #0
   28e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   28e70:	4628      	mov	r0, r5
   28e72:	47b0      	blx	r6
   28e74:	1c41      	adds	r1, r0, #1
   28e76:	d024      	beq.n	28ec2 <__sflush_r+0x9a>
   28e78:	2300      	movs	r3, #0
   28e7a:	6063      	str	r3, [r4, #4]
   28e7c:	6923      	ldr	r3, [r4, #16]
   28e7e:	6023      	str	r3, [r4, #0]
   28e80:	89a3      	ldrh	r3, [r4, #12]
   28e82:	04da      	lsls	r2, r3, #19
   28e84:	d500      	bpl.n	28e88 <__sflush_r+0x60>
   28e86:	6560      	str	r0, [r4, #84]	; 0x54
   28e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
   28e8a:	602f      	str	r7, [r5, #0]
   28e8c:	b1b9      	cbz	r1, 28ebe <__sflush_r+0x96>
   28e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   28e92:	4299      	cmp	r1, r3
   28e94:	d002      	beq.n	28e9c <__sflush_r+0x74>
   28e96:	4628      	mov	r0, r5
   28e98:	f7f9 f9de 	bl	22258 <_free_r>
   28e9c:	2300      	movs	r3, #0
   28e9e:	6363      	str	r3, [r4, #52]	; 0x34
   28ea0:	e00d      	b.n	28ebe <__sflush_r+0x96>
   28ea2:	2301      	movs	r3, #1
   28ea4:	4628      	mov	r0, r5
   28ea6:	47b0      	blx	r6
   28ea8:	1c46      	adds	r6, r0, #1
   28eaa:	4602      	mov	r2, r0
   28eac:	d1d4      	bne.n	28e58 <__sflush_r+0x30>
   28eae:	682b      	ldr	r3, [r5, #0]
   28eb0:	2b00      	cmp	r3, #0
   28eb2:	d0d1      	beq.n	28e58 <__sflush_r+0x30>
   28eb4:	2b1d      	cmp	r3, #29
   28eb6:	d001      	beq.n	28ebc <__sflush_r+0x94>
   28eb8:	2b16      	cmp	r3, #22
   28eba:	d129      	bne.n	28f10 <__sflush_r+0xe8>
   28ebc:	602f      	str	r7, [r5, #0]
   28ebe:	2000      	movs	r0, #0
   28ec0:	e02d      	b.n	28f1e <__sflush_r+0xf6>
   28ec2:	682a      	ldr	r2, [r5, #0]
   28ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28ec8:	b142      	cbz	r2, 28edc <__sflush_r+0xb4>
   28eca:	2a1d      	cmp	r2, #29
   28ecc:	d001      	beq.n	28ed2 <__sflush_r+0xaa>
   28ece:	2a16      	cmp	r2, #22
   28ed0:	d120      	bne.n	28f14 <__sflush_r+0xec>
   28ed2:	2300      	movs	r3, #0
   28ed4:	6063      	str	r3, [r4, #4]
   28ed6:	6923      	ldr	r3, [r4, #16]
   28ed8:	6023      	str	r3, [r4, #0]
   28eda:	e7d5      	b.n	28e88 <__sflush_r+0x60>
   28edc:	6062      	str	r2, [r4, #4]
   28ede:	6922      	ldr	r2, [r4, #16]
   28ee0:	6022      	str	r2, [r4, #0]
   28ee2:	e7ce      	b.n	28e82 <__sflush_r+0x5a>
   28ee4:	690f      	ldr	r7, [r1, #16]
   28ee6:	2f00      	cmp	r7, #0
   28ee8:	d0e9      	beq.n	28ebe <__sflush_r+0x96>
   28eea:	0793      	lsls	r3, r2, #30
   28eec:	680e      	ldr	r6, [r1, #0]
   28eee:	600f      	str	r7, [r1, #0]
   28ef0:	bf0c      	ite	eq
   28ef2:	694b      	ldreq	r3, [r1, #20]
   28ef4:	2300      	movne	r3, #0
   28ef6:	1bf6      	subs	r6, r6, r7
   28ef8:	608b      	str	r3, [r1, #8]
   28efa:	2e00      	cmp	r6, #0
   28efc:	dddf      	ble.n	28ebe <__sflush_r+0x96>
   28efe:	4633      	mov	r3, r6
   28f00:	463a      	mov	r2, r7
   28f02:	6a21      	ldr	r1, [r4, #32]
   28f04:	4628      	mov	r0, r5
   28f06:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   28f0a:	47e0      	blx	ip
   28f0c:	2800      	cmp	r0, #0
   28f0e:	dc07      	bgt.n	28f20 <__sflush_r+0xf8>
   28f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28f18:	f04f 30ff 	mov.w	r0, #4294967295
   28f1c:	81a3      	strh	r3, [r4, #12]
   28f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28f20:	4407      	add	r7, r0
   28f22:	1a36      	subs	r6, r6, r0
   28f24:	e7e9      	b.n	28efa <__sflush_r+0xd2>

00028f26 <__swhatbuf_r>:
   28f26:	b570      	push	{r4, r5, r6, lr}
   28f28:	460c      	mov	r4, r1
   28f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   28f2e:	b096      	sub	sp, #88	; 0x58
   28f30:	4615      	mov	r5, r2
   28f32:	2900      	cmp	r1, #0
   28f34:	461e      	mov	r6, r3
   28f36:	da0c      	bge.n	28f52 <__swhatbuf_r+0x2c>
   28f38:	89a3      	ldrh	r3, [r4, #12]
   28f3a:	2100      	movs	r1, #0
   28f3c:	f013 0f80 	tst.w	r3, #128	; 0x80
   28f40:	bf14      	ite	ne
   28f42:	2340      	movne	r3, #64	; 0x40
   28f44:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   28f48:	2000      	movs	r0, #0
   28f4a:	6031      	str	r1, [r6, #0]
   28f4c:	602b      	str	r3, [r5, #0]
   28f4e:	b016      	add	sp, #88	; 0x58
   28f50:	bd70      	pop	{r4, r5, r6, pc}
   28f52:	466a      	mov	r2, sp
   28f54:	f7fa fc94 	bl	23880 <_fstat_r>
   28f58:	2800      	cmp	r0, #0
   28f5a:	dbed      	blt.n	28f38 <__swhatbuf_r+0x12>
   28f5c:	9901      	ldr	r1, [sp, #4]
   28f5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   28f62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   28f66:	4259      	negs	r1, r3
   28f68:	4159      	adcs	r1, r3
   28f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   28f6e:	e7eb      	b.n	28f48 <__swhatbuf_r+0x22>

00028f70 <__ascii_mbtowc>:
   28f70:	b082      	sub	sp, #8
   28f72:	b901      	cbnz	r1, 28f76 <__ascii_mbtowc+0x6>
   28f74:	a901      	add	r1, sp, #4
   28f76:	b142      	cbz	r2, 28f8a <__ascii_mbtowc+0x1a>
   28f78:	b14b      	cbz	r3, 28f8e <__ascii_mbtowc+0x1e>
   28f7a:	7813      	ldrb	r3, [r2, #0]
   28f7c:	600b      	str	r3, [r1, #0]
   28f7e:	7812      	ldrb	r2, [r2, #0]
   28f80:	1e10      	subs	r0, r2, #0
   28f82:	bf18      	it	ne
   28f84:	2001      	movne	r0, #1
   28f86:	b002      	add	sp, #8
   28f88:	4770      	bx	lr
   28f8a:	4610      	mov	r0, r2
   28f8c:	e7fb      	b.n	28f86 <__ascii_mbtowc+0x16>
   28f8e:	f06f 0001 	mvn.w	r0, #1
   28f92:	e7f8      	b.n	28f86 <__ascii_mbtowc+0x16>

00028f94 <_raise_r>:
   28f94:	291f      	cmp	r1, #31
   28f96:	b538      	push	{r3, r4, r5, lr}
   28f98:	4605      	mov	r5, r0
   28f9a:	460c      	mov	r4, r1
   28f9c:	d904      	bls.n	28fa8 <_raise_r+0x14>
   28f9e:	2316      	movs	r3, #22
   28fa0:	6003      	str	r3, [r0, #0]
   28fa2:	f04f 30ff 	mov.w	r0, #4294967295
   28fa6:	bd38      	pop	{r3, r4, r5, pc}
   28fa8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   28faa:	b112      	cbz	r2, 28fb2 <_raise_r+0x1e>
   28fac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   28fb0:	b94b      	cbnz	r3, 28fc6 <_raise_r+0x32>
   28fb2:	4628      	mov	r0, r5
   28fb4:	f000 f816 	bl	28fe4 <_getpid_r>
   28fb8:	4622      	mov	r2, r4
   28fba:	4601      	mov	r1, r0
   28fbc:	4628      	mov	r0, r5
   28fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28fc2:	f7fa bc4b 	b.w	2385c <_kill_r>
   28fc6:	2b01      	cmp	r3, #1
   28fc8:	d00a      	beq.n	28fe0 <_raise_r+0x4c>
   28fca:	1c59      	adds	r1, r3, #1
   28fcc:	d103      	bne.n	28fd6 <_raise_r+0x42>
   28fce:	2316      	movs	r3, #22
   28fd0:	6003      	str	r3, [r0, #0]
   28fd2:	2001      	movs	r0, #1
   28fd4:	e7e7      	b.n	28fa6 <_raise_r+0x12>
   28fd6:	2100      	movs	r1, #0
   28fd8:	4620      	mov	r0, r4
   28fda:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   28fde:	4798      	blx	r3
   28fe0:	2000      	movs	r0, #0
   28fe2:	e7e0      	b.n	28fa6 <_raise_r+0x12>

00028fe4 <_getpid_r>:
   28fe4:	f7fb bf6a 	b.w	24ebc <_getpid>

00028fe8 <__ascii_wctomb>:
   28fe8:	4603      	mov	r3, r0
   28fea:	4608      	mov	r0, r1
   28fec:	b141      	cbz	r1, 29000 <__ascii_wctomb+0x18>
   28fee:	2aff      	cmp	r2, #255	; 0xff
   28ff0:	d904      	bls.n	28ffc <__ascii_wctomb+0x14>
   28ff2:	228a      	movs	r2, #138	; 0x8a
   28ff4:	f04f 30ff 	mov.w	r0, #4294967295
   28ff8:	601a      	str	r2, [r3, #0]
   28ffa:	4770      	bx	lr
   28ffc:	2001      	movs	r0, #1
   28ffe:	700a      	strb	r2, [r1, #0]
   29000:	4770      	bx	lr
	...
