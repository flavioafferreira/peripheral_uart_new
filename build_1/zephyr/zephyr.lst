
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	18 19 04 20 d1 19 01 00 7f 86 02 00 a5 19 01 00     ... ............
    8010:	a5 19 01 00 a5 19 01 00 a5 19 01 00 a5 19 01 00     ................
	...
    802c:	89 12 01 00 a5 19 01 00 00 00 00 00 29 12 01 00     ............)...
    803c:	a5 19 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8050:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8060:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8070:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8080:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8090:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    80a0:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    80b0:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    80c0:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    80d0:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    80e0:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    80f0:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8100:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8110:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8120:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8130:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8140:	11 13 01 00 11 13 01 00 11 13 01 00 11 13 01 00     ................
    8150:	11 13 01 00                                         ....

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2f>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88fc:	bf24      	itt	cs
    88fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8906:	d90d      	bls.n	8924 <__aeabi_d2f+0x30>
    8908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    890c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    891c:	bf08      	it	eq
    891e:	f020 0001 	biceq.w	r0, r0, #1
    8922:	4770      	bx	lr
    8924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8928:	d121      	bne.n	896e <__aeabi_d2f+0x7a>
    892a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    892e:	bfbc      	itt	lt
    8930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8934:	4770      	bxlt	lr
    8936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    893a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    893e:	f1c2 0218 	rsb	r2, r2, #24
    8942:	f1c2 0c20 	rsb	ip, r2, #32
    8946:	fa10 f30c 	lsls.w	r3, r0, ip
    894a:	fa20 f002 	lsr.w	r0, r0, r2
    894e:	bf18      	it	ne
    8950:	f040 0001 	orrne.w	r0, r0, #1
    8954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    895c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8960:	ea40 000c 	orr.w	r0, r0, ip
    8964:	fa23 f302 	lsr.w	r3, r3, r2
    8968:	ea4f 0343 	mov.w	r3, r3, lsl #1
    896c:	e7cc      	b.n	8908 <__aeabi_d2f+0x14>
    896e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8972:	d107      	bne.n	8984 <__aeabi_d2f+0x90>
    8974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8978:	bf1e      	ittt	ne
    897a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    897e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8982:	4770      	bxne	lr
    8984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    898c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8990:	4770      	bx	lr
    8992:	bf00      	nop

00008994 <__aeabi_frsub>:
    8994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8998:	e002      	b.n	89a0 <__addsf3>
    899a:	bf00      	nop

0000899c <__aeabi_fsub>:
    899c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089a0 <__addsf3>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	bf1f      	itttt	ne
    89a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89a8:	ea92 0f03 	teqne	r2, r3
    89ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    89b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b4:	d06a      	beq.n	8a8c <__addsf3+0xec>
    89b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    89ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    89be:	bfc1      	itttt	gt
    89c0:	18d2      	addgt	r2, r2, r3
    89c2:	4041      	eorgt	r1, r0
    89c4:	4048      	eorgt	r0, r1
    89c6:	4041      	eorgt	r1, r0
    89c8:	bfb8      	it	lt
    89ca:	425b      	neglt	r3, r3
    89cc:	2b19      	cmp	r3, #25
    89ce:	bf88      	it	hi
    89d0:	4770      	bxhi	lr
    89d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    89d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89de:	bf18      	it	ne
    89e0:	4240      	negne	r0, r0
    89e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    89e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    89ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    89ee:	bf18      	it	ne
    89f0:	4249      	negne	r1, r1
    89f2:	ea92 0f03 	teq	r2, r3
    89f6:	d03f      	beq.n	8a78 <__addsf3+0xd8>
    89f8:	f1a2 0201 	sub.w	r2, r2, #1
    89fc:	fa41 fc03 	asr.w	ip, r1, r3
    8a00:	eb10 000c 	adds.w	r0, r0, ip
    8a04:	f1c3 0320 	rsb	r3, r3, #32
    8a08:	fa01 f103 	lsl.w	r1, r1, r3
    8a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a10:	d502      	bpl.n	8a18 <__addsf3+0x78>
    8a12:	4249      	negs	r1, r1
    8a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a1c:	d313      	bcc.n	8a46 <__addsf3+0xa6>
    8a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a22:	d306      	bcc.n	8a32 <__addsf3+0x92>
    8a24:	0840      	lsrs	r0, r0, #1
    8a26:	ea4f 0131 	mov.w	r1, r1, rrx
    8a2a:	f102 0201 	add.w	r2, r2, #1
    8a2e:	2afe      	cmp	r2, #254	; 0xfe
    8a30:	d251      	bcs.n	8ad6 <__addsf3+0x136>
    8a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a3a:	bf08      	it	eq
    8a3c:	f020 0001 	biceq.w	r0, r0, #1
    8a40:	ea40 0003 	orr.w	r0, r0, r3
    8a44:	4770      	bx	lr
    8a46:	0049      	lsls	r1, r1, #1
    8a48:	eb40 0000 	adc.w	r0, r0, r0
    8a4c:	3a01      	subs	r2, #1
    8a4e:	bf28      	it	cs
    8a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8a54:	d2ed      	bcs.n	8a32 <__addsf3+0x92>
    8a56:	fab0 fc80 	clz	ip, r0
    8a5a:	f1ac 0c08 	sub.w	ip, ip, #8
    8a5e:	ebb2 020c 	subs.w	r2, r2, ip
    8a62:	fa00 f00c 	lsl.w	r0, r0, ip
    8a66:	bfaa      	itet	ge
    8a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8a6c:	4252      	neglt	r2, r2
    8a6e:	4318      	orrge	r0, r3
    8a70:	bfbc      	itt	lt
    8a72:	40d0      	lsrlt	r0, r2
    8a74:	4318      	orrlt	r0, r3
    8a76:	4770      	bx	lr
    8a78:	f092 0f00 	teq	r2, #0
    8a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8a80:	bf06      	itte	eq
    8a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8a86:	3201      	addeq	r2, #1
    8a88:	3b01      	subne	r3, #1
    8a8a:	e7b5      	b.n	89f8 <__addsf3+0x58>
    8a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8a94:	bf18      	it	ne
    8a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a9a:	d021      	beq.n	8ae0 <__addsf3+0x140>
    8a9c:	ea92 0f03 	teq	r2, r3
    8aa0:	d004      	beq.n	8aac <__addsf3+0x10c>
    8aa2:	f092 0f00 	teq	r2, #0
    8aa6:	bf08      	it	eq
    8aa8:	4608      	moveq	r0, r1
    8aaa:	4770      	bx	lr
    8aac:	ea90 0f01 	teq	r0, r1
    8ab0:	bf1c      	itt	ne
    8ab2:	2000      	movne	r0, #0
    8ab4:	4770      	bxne	lr
    8ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8aba:	d104      	bne.n	8ac6 <__addsf3+0x126>
    8abc:	0040      	lsls	r0, r0, #1
    8abe:	bf28      	it	cs
    8ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ac4:	4770      	bx	lr
    8ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8aca:	bf3c      	itt	cc
    8acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8ad0:	4770      	bxcc	lr
    8ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ade:	4770      	bx	lr
    8ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8ae4:	bf16      	itet	ne
    8ae6:	4608      	movne	r0, r1
    8ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8aec:	4601      	movne	r1, r0
    8aee:	0242      	lsls	r2, r0, #9
    8af0:	bf06      	itte	eq
    8af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8af6:	ea90 0f01 	teqeq	r0, r1
    8afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8afe:	4770      	bx	lr

00008b00 <__aeabi_ui2f>:
    8b00:	f04f 0300 	mov.w	r3, #0
    8b04:	e004      	b.n	8b10 <__aeabi_i2f+0x8>
    8b06:	bf00      	nop

00008b08 <__aeabi_i2f>:
    8b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b0c:	bf48      	it	mi
    8b0e:	4240      	negmi	r0, r0
    8b10:	ea5f 0c00 	movs.w	ip, r0
    8b14:	bf08      	it	eq
    8b16:	4770      	bxeq	lr
    8b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b1c:	4601      	mov	r1, r0
    8b1e:	f04f 0000 	mov.w	r0, #0
    8b22:	e01c      	b.n	8b5e <__aeabi_l2f+0x2a>

00008b24 <__aeabi_ul2f>:
    8b24:	ea50 0201 	orrs.w	r2, r0, r1
    8b28:	bf08      	it	eq
    8b2a:	4770      	bxeq	lr
    8b2c:	f04f 0300 	mov.w	r3, #0
    8b30:	e00a      	b.n	8b48 <__aeabi_l2f+0x14>
    8b32:	bf00      	nop

00008b34 <__aeabi_l2f>:
    8b34:	ea50 0201 	orrs.w	r2, r0, r1
    8b38:	bf08      	it	eq
    8b3a:	4770      	bxeq	lr
    8b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b40:	d502      	bpl.n	8b48 <__aeabi_l2f+0x14>
    8b42:	4240      	negs	r0, r0
    8b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b48:	ea5f 0c01 	movs.w	ip, r1
    8b4c:	bf02      	ittt	eq
    8b4e:	4684      	moveq	ip, r0
    8b50:	4601      	moveq	r1, r0
    8b52:	2000      	moveq	r0, #0
    8b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8b58:	bf08      	it	eq
    8b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8b62:	fabc f28c 	clz	r2, ip
    8b66:	3a08      	subs	r2, #8
    8b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8b6c:	db10      	blt.n	8b90 <__aeabi_l2f+0x5c>
    8b6e:	fa01 fc02 	lsl.w	ip, r1, r2
    8b72:	4463      	add	r3, ip
    8b74:	fa00 fc02 	lsl.w	ip, r0, r2
    8b78:	f1c2 0220 	rsb	r2, r2, #32
    8b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8b80:	fa20 f202 	lsr.w	r2, r0, r2
    8b84:	eb43 0002 	adc.w	r0, r3, r2
    8b88:	bf08      	it	eq
    8b8a:	f020 0001 	biceq.w	r0, r0, #1
    8b8e:	4770      	bx	lr
    8b90:	f102 0220 	add.w	r2, r2, #32
    8b94:	fa01 fc02 	lsl.w	ip, r1, r2
    8b98:	f1c2 0220 	rsb	r2, r2, #32
    8b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8ba0:	fa21 f202 	lsr.w	r2, r1, r2
    8ba4:	eb43 0002 	adc.w	r0, r3, r2
    8ba8:	bf08      	it	eq
    8baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bae:	4770      	bx	lr

00008bb0 <__aeabi_fmul>:
    8bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8bb8:	bf1e      	ittt	ne
    8bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8bbe:	ea92 0f0c 	teqne	r2, ip
    8bc2:	ea93 0f0c 	teqne	r3, ip
    8bc6:	d06f      	beq.n	8ca8 <__aeabi_fmul+0xf8>
    8bc8:	441a      	add	r2, r3
    8bca:	ea80 0c01 	eor.w	ip, r0, r1
    8bce:	0240      	lsls	r0, r0, #9
    8bd0:	bf18      	it	ne
    8bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8bd6:	d01e      	beq.n	8c16 <__aeabi_fmul+0x66>
    8bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8be4:	fba0 3101 	umull	r3, r1, r0, r1
    8be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8bf0:	bf3e      	ittt	cc
    8bf2:	0049      	lslcc	r1, r1, #1
    8bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8bf8:	005b      	lslcc	r3, r3, #1
    8bfa:	ea40 0001 	orr.w	r0, r0, r1
    8bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c02:	2afd      	cmp	r2, #253	; 0xfd
    8c04:	d81d      	bhi.n	8c42 <__aeabi_fmul+0x92>
    8c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c0e:	bf08      	it	eq
    8c10:	f020 0001 	biceq.w	r0, r0, #1
    8c14:	4770      	bx	lr
    8c16:	f090 0f00 	teq	r0, #0
    8c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c1e:	bf08      	it	eq
    8c20:	0249      	lsleq	r1, r1, #9
    8c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c2a:	3a7f      	subs	r2, #127	; 0x7f
    8c2c:	bfc2      	ittt	gt
    8c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c36:	4770      	bxgt	lr
    8c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	3a01      	subs	r2, #1
    8c42:	dc5d      	bgt.n	8d00 <__aeabi_fmul+0x150>
    8c44:	f112 0f19 	cmn.w	r2, #25
    8c48:	bfdc      	itt	le
    8c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c4e:	4770      	bxle	lr
    8c50:	f1c2 0200 	rsb	r2, r2, #0
    8c54:	0041      	lsls	r1, r0, #1
    8c56:	fa21 f102 	lsr.w	r1, r1, r2
    8c5a:	f1c2 0220 	rsb	r2, r2, #32
    8c5e:	fa00 fc02 	lsl.w	ip, r0, r2
    8c62:	ea5f 0031 	movs.w	r0, r1, rrx
    8c66:	f140 0000 	adc.w	r0, r0, #0
    8c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8c6e:	bf08      	it	eq
    8c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8c74:	4770      	bx	lr
    8c76:	f092 0f00 	teq	r2, #0
    8c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8c7e:	bf02      	ittt	eq
    8c80:	0040      	lsleq	r0, r0, #1
    8c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8c86:	3a01      	subeq	r2, #1
    8c88:	d0f9      	beq.n	8c7e <__aeabi_fmul+0xce>
    8c8a:	ea40 000c 	orr.w	r0, r0, ip
    8c8e:	f093 0f00 	teq	r3, #0
    8c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8c96:	bf02      	ittt	eq
    8c98:	0049      	lsleq	r1, r1, #1
    8c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8c9e:	3b01      	subeq	r3, #1
    8ca0:	d0f9      	beq.n	8c96 <__aeabi_fmul+0xe6>
    8ca2:	ea41 010c 	orr.w	r1, r1, ip
    8ca6:	e78f      	b.n	8bc8 <__aeabi_fmul+0x18>
    8ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cac:	ea92 0f0c 	teq	r2, ip
    8cb0:	bf18      	it	ne
    8cb2:	ea93 0f0c 	teqne	r3, ip
    8cb6:	d00a      	beq.n	8cce <__aeabi_fmul+0x11e>
    8cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8cbc:	bf18      	it	ne
    8cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8cc2:	d1d8      	bne.n	8c76 <__aeabi_fmul+0xc6>
    8cc4:	ea80 0001 	eor.w	r0, r0, r1
    8cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ccc:	4770      	bx	lr
    8cce:	f090 0f00 	teq	r0, #0
    8cd2:	bf17      	itett	ne
    8cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8cd8:	4608      	moveq	r0, r1
    8cda:	f091 0f00 	teqne	r1, #0
    8cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8ce2:	d014      	beq.n	8d0e <__aeabi_fmul+0x15e>
    8ce4:	ea92 0f0c 	teq	r2, ip
    8ce8:	d101      	bne.n	8cee <__aeabi_fmul+0x13e>
    8cea:	0242      	lsls	r2, r0, #9
    8cec:	d10f      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cee:	ea93 0f0c 	teq	r3, ip
    8cf2:	d103      	bne.n	8cfc <__aeabi_fmul+0x14c>
    8cf4:	024b      	lsls	r3, r1, #9
    8cf6:	bf18      	it	ne
    8cf8:	4608      	movne	r0, r1
    8cfa:	d108      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cfc:	ea80 0001 	eor.w	r0, r0, r1
    8d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d0c:	4770      	bx	lr
    8d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d16:	4770      	bx	lr

00008d18 <__aeabi_fdiv>:
    8d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d20:	bf1e      	ittt	ne
    8d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d26:	ea92 0f0c 	teqne	r2, ip
    8d2a:	ea93 0f0c 	teqne	r3, ip
    8d2e:	d069      	beq.n	8e04 <__aeabi_fdiv+0xec>
    8d30:	eba2 0203 	sub.w	r2, r2, r3
    8d34:	ea80 0c01 	eor.w	ip, r0, r1
    8d38:	0249      	lsls	r1, r1, #9
    8d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d3e:	d037      	beq.n	8db0 <__aeabi_fdiv+0x98>
    8d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8d50:	428b      	cmp	r3, r1
    8d52:	bf38      	it	cc
    8d54:	005b      	lslcc	r3, r3, #1
    8d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8d5e:	428b      	cmp	r3, r1
    8d60:	bf24      	itt	cs
    8d62:	1a5b      	subcs	r3, r3, r1
    8d64:	ea40 000c 	orrcs.w	r0, r0, ip
    8d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8d6c:	bf24      	itt	cs
    8d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8d7a:	bf24      	itt	cs
    8d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8d88:	bf24      	itt	cs
    8d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	bf18      	it	ne
    8d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8d9a:	d1e0      	bne.n	8d5e <__aeabi_fdiv+0x46>
    8d9c:	2afd      	cmp	r2, #253	; 0xfd
    8d9e:	f63f af50 	bhi.w	8c42 <__aeabi_fmul+0x92>
    8da2:	428b      	cmp	r3, r1
    8da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8da8:	bf08      	it	eq
    8daa:	f020 0001 	biceq.w	r0, r0, #1
    8dae:	4770      	bx	lr
    8db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	bfc2      	ittt	gt
    8dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8dc4:	4770      	bxgt	lr
    8dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dca:	f04f 0300 	mov.w	r3, #0
    8dce:	3a01      	subs	r2, #1
    8dd0:	e737      	b.n	8c42 <__aeabi_fmul+0x92>
    8dd2:	f092 0f00 	teq	r2, #0
    8dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8dda:	bf02      	ittt	eq
    8ddc:	0040      	lsleq	r0, r0, #1
    8dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8de2:	3a01      	subeq	r2, #1
    8de4:	d0f9      	beq.n	8dda <__aeabi_fdiv+0xc2>
    8de6:	ea40 000c 	orr.w	r0, r0, ip
    8dea:	f093 0f00 	teq	r3, #0
    8dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8df2:	bf02      	ittt	eq
    8df4:	0049      	lsleq	r1, r1, #1
    8df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dfa:	3b01      	subeq	r3, #1
    8dfc:	d0f9      	beq.n	8df2 <__aeabi_fdiv+0xda>
    8dfe:	ea41 010c 	orr.w	r1, r1, ip
    8e02:	e795      	b.n	8d30 <__aeabi_fdiv+0x18>
    8e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e08:	ea92 0f0c 	teq	r2, ip
    8e0c:	d108      	bne.n	8e20 <__aeabi_fdiv+0x108>
    8e0e:	0242      	lsls	r2, r0, #9
    8e10:	f47f af7d 	bne.w	8d0e <__aeabi_fmul+0x15e>
    8e14:	ea93 0f0c 	teq	r3, ip
    8e18:	f47f af70 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e1c:	4608      	mov	r0, r1
    8e1e:	e776      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e20:	ea93 0f0c 	teq	r3, ip
    8e24:	d104      	bne.n	8e30 <__aeabi_fdiv+0x118>
    8e26:	024b      	lsls	r3, r1, #9
    8e28:	f43f af4c 	beq.w	8cc4 <__aeabi_fmul+0x114>
    8e2c:	4608      	mov	r0, r1
    8e2e:	e76e      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e34:	bf18      	it	ne
    8e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e3a:	d1ca      	bne.n	8dd2 <__aeabi_fdiv+0xba>
    8e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e40:	f47f af5c 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e48:	f47f af3c 	bne.w	8cc4 <__aeabi_fmul+0x114>
    8e4c:	e75f      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e4e:	bf00      	nop

00008e50 <__aeabi_ldivmod>:
    8e50:	b97b      	cbnz	r3, 8e72 <__aeabi_ldivmod+0x22>
    8e52:	b972      	cbnz	r2, 8e72 <__aeabi_ldivmod+0x22>
    8e54:	2900      	cmp	r1, #0
    8e56:	bfbe      	ittt	lt
    8e58:	2000      	movlt	r0, #0
    8e5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8e5e:	e006      	blt.n	8e6e <__aeabi_ldivmod+0x1e>
    8e60:	bf08      	it	eq
    8e62:	2800      	cmpeq	r0, #0
    8e64:	bf1c      	itt	ne
    8e66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8e6a:	f04f 30ff 	movne.w	r0, #4294967295
    8e6e:	f000 b875 	b.w	8f5c <__aeabi_idiv0>
    8e72:	f1ad 0c08 	sub.w	ip, sp, #8
    8e76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8e7a:	2900      	cmp	r1, #0
    8e7c:	db09      	blt.n	8e92 <__aeabi_ldivmod+0x42>
    8e7e:	2b00      	cmp	r3, #0
    8e80:	db1a      	blt.n	8eb8 <__aeabi_ldivmod+0x68>
    8e82:	f000 f96a 	bl	915a <__udivmoddi4>
    8e86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8e8e:	b004      	add	sp, #16
    8e90:	4770      	bx	lr
    8e92:	4240      	negs	r0, r0
    8e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e98:	2b00      	cmp	r3, #0
    8e9a:	db1b      	blt.n	8ed4 <__aeabi_ldivmod+0x84>
    8e9c:	f000 f95d 	bl	915a <__udivmoddi4>
    8ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ea8:	b004      	add	sp, #16
    8eaa:	4240      	negs	r0, r0
    8eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8eb0:	4252      	negs	r2, r2
    8eb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eb6:	4770      	bx	lr
    8eb8:	4252      	negs	r2, r2
    8eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ebe:	f000 f94c 	bl	915a <__udivmoddi4>
    8ec2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8eca:	b004      	add	sp, #16
    8ecc:	4240      	negs	r0, r0
    8ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ed2:	4770      	bx	lr
    8ed4:	4252      	negs	r2, r2
    8ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eda:	f000 f93e 	bl	915a <__udivmoddi4>
    8ede:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ee6:	b004      	add	sp, #16
    8ee8:	4252      	negs	r2, r2
    8eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eee:	4770      	bx	lr

00008ef0 <__aeabi_uldivmod>:
    8ef0:	b953      	cbnz	r3, 8f08 <__aeabi_uldivmod+0x18>
    8ef2:	b94a      	cbnz	r2, 8f08 <__aeabi_uldivmod+0x18>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	bf08      	it	eq
    8ef8:	2800      	cmpeq	r0, #0
    8efa:	bf1c      	itt	ne
    8efc:	f04f 31ff 	movne.w	r1, #4294967295
    8f00:	f04f 30ff 	movne.w	r0, #4294967295
    8f04:	f000 b82a 	b.w	8f5c <__aeabi_idiv0>
    8f08:	f1ad 0c08 	sub.w	ip, sp, #8
    8f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f10:	f000 f923 	bl	915a <__udivmoddi4>
    8f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1c:	b004      	add	sp, #16
    8f1e:	4770      	bx	lr

00008f20 <__aeabi_d2ulz>:
    8f20:	b5d0      	push	{r4, r6, r7, lr}
    8f22:	2200      	movs	r2, #0
    8f24:	4b0b      	ldr	r3, [pc, #44]	; (8f54 <__aeabi_d2ulz+0x34>)
    8f26:	4606      	mov	r6, r0
    8f28:	460f      	mov	r7, r1
    8f2a:	f7ff fad1 	bl	84d0 <__aeabi_dmul>
    8f2e:	f000 f89f 	bl	9070 <__aeabi_d2uiz>
    8f32:	4604      	mov	r4, r0
    8f34:	f7ff fa52 	bl	83dc <__aeabi_ui2d>
    8f38:	2200      	movs	r2, #0
    8f3a:	4b07      	ldr	r3, [pc, #28]	; (8f58 <__aeabi_d2ulz+0x38>)
    8f3c:	f7ff fac8 	bl	84d0 <__aeabi_dmul>
    8f40:	4602      	mov	r2, r0
    8f42:	460b      	mov	r3, r1
    8f44:	4630      	mov	r0, r6
    8f46:	4639      	mov	r1, r7
    8f48:	f7ff f90a 	bl	8160 <__aeabi_dsub>
    8f4c:	f000 f890 	bl	9070 <__aeabi_d2uiz>
    8f50:	4621      	mov	r1, r4
    8f52:	bdd0      	pop	{r4, r6, r7, pc}
    8f54:	3df00000 	.word	0x3df00000
    8f58:	41f00000 	.word	0x41f00000

00008f5c <__aeabi_idiv0>:
    8f5c:	4770      	bx	lr
    8f5e:	bf00      	nop

00008f60 <__gedf2>:
    8f60:	f04f 3cff 	mov.w	ip, #4294967295
    8f64:	e006      	b.n	8f74 <__cmpdf2+0x4>
    8f66:	bf00      	nop

00008f68 <__ledf2>:
    8f68:	f04f 0c01 	mov.w	ip, #1
    8f6c:	e002      	b.n	8f74 <__cmpdf2+0x4>
    8f6e:	bf00      	nop

00008f70 <__cmpdf2>:
    8f70:	f04f 0c01 	mov.w	ip, #1
    8f74:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f84:	bf18      	it	ne
    8f86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f8a:	d01b      	beq.n	8fc4 <__cmpdf2+0x54>
    8f8c:	b001      	add	sp, #4
    8f8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f92:	bf0c      	ite	eq
    8f94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f98:	ea91 0f03 	teqne	r1, r3
    8f9c:	bf02      	ittt	eq
    8f9e:	ea90 0f02 	teqeq	r0, r2
    8fa2:	2000      	moveq	r0, #0
    8fa4:	4770      	bxeq	lr
    8fa6:	f110 0f00 	cmn.w	r0, #0
    8faa:	ea91 0f03 	teq	r1, r3
    8fae:	bf58      	it	pl
    8fb0:	4299      	cmppl	r1, r3
    8fb2:	bf08      	it	eq
    8fb4:	4290      	cmpeq	r0, r2
    8fb6:	bf2c      	ite	cs
    8fb8:	17d8      	asrcs	r0, r3, #31
    8fba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8fbe:	f040 0001 	orr.w	r0, r0, #1
    8fc2:	4770      	bx	lr
    8fc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8fc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fcc:	d102      	bne.n	8fd4 <__cmpdf2+0x64>
    8fce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8fd2:	d107      	bne.n	8fe4 <__cmpdf2+0x74>
    8fd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fdc:	d1d6      	bne.n	8f8c <__cmpdf2+0x1c>
    8fde:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8fe2:	d0d3      	beq.n	8f8c <__cmpdf2+0x1c>
    8fe4:	f85d 0b04 	ldr.w	r0, [sp], #4
    8fe8:	4770      	bx	lr
    8fea:	bf00      	nop

00008fec <__aeabi_cdrcmple>:
    8fec:	4684      	mov	ip, r0
    8fee:	4610      	mov	r0, r2
    8ff0:	4662      	mov	r2, ip
    8ff2:	468c      	mov	ip, r1
    8ff4:	4619      	mov	r1, r3
    8ff6:	4663      	mov	r3, ip
    8ff8:	e000      	b.n	8ffc <__aeabi_cdcmpeq>
    8ffa:	bf00      	nop

00008ffc <__aeabi_cdcmpeq>:
    8ffc:	b501      	push	{r0, lr}
    8ffe:	f7ff ffb7 	bl	8f70 <__cmpdf2>
    9002:	2800      	cmp	r0, #0
    9004:	bf48      	it	mi
    9006:	f110 0f00 	cmnmi.w	r0, #0
    900a:	bd01      	pop	{r0, pc}

0000900c <__aeabi_dcmpeq>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff fff4 	bl	8ffc <__aeabi_cdcmpeq>
    9014:	bf0c      	ite	eq
    9016:	2001      	moveq	r0, #1
    9018:	2000      	movne	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmplt>:
    9020:	f84d ed08 	str.w	lr, [sp, #-8]!
    9024:	f7ff ffea 	bl	8ffc <__aeabi_cdcmpeq>
    9028:	bf34      	ite	cc
    902a:	2001      	movcc	r0, #1
    902c:	2000      	movcs	r0, #0
    902e:	f85d fb08 	ldr.w	pc, [sp], #8
    9032:	bf00      	nop

00009034 <__aeabi_dcmple>:
    9034:	f84d ed08 	str.w	lr, [sp, #-8]!
    9038:	f7ff ffe0 	bl	8ffc <__aeabi_cdcmpeq>
    903c:	bf94      	ite	ls
    903e:	2001      	movls	r0, #1
    9040:	2000      	movhi	r0, #0
    9042:	f85d fb08 	ldr.w	pc, [sp], #8
    9046:	bf00      	nop

00009048 <__aeabi_dcmpge>:
    9048:	f84d ed08 	str.w	lr, [sp, #-8]!
    904c:	f7ff ffce 	bl	8fec <__aeabi_cdrcmple>
    9050:	bf94      	ite	ls
    9052:	2001      	movls	r0, #1
    9054:	2000      	movhi	r0, #0
    9056:	f85d fb08 	ldr.w	pc, [sp], #8
    905a:	bf00      	nop

0000905c <__aeabi_dcmpgt>:
    905c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9060:	f7ff ffc4 	bl	8fec <__aeabi_cdrcmple>
    9064:	bf34      	ite	cc
    9066:	2001      	movcc	r0, #1
    9068:	2000      	movcs	r0, #0
    906a:	f85d fb08 	ldr.w	pc, [sp], #8
    906e:	bf00      	nop

00009070 <__aeabi_d2uiz>:
    9070:	004a      	lsls	r2, r1, #1
    9072:	d211      	bcs.n	9098 <__aeabi_d2uiz+0x28>
    9074:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9078:	d211      	bcs.n	909e <__aeabi_d2uiz+0x2e>
    907a:	d50d      	bpl.n	9098 <__aeabi_d2uiz+0x28>
    907c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9080:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9084:	d40e      	bmi.n	90a4 <__aeabi_d2uiz+0x34>
    9086:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    908a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    908e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9092:	fa23 f002 	lsr.w	r0, r3, r2
    9096:	4770      	bx	lr
    9098:	f04f 0000 	mov.w	r0, #0
    909c:	4770      	bx	lr
    909e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    90a2:	d102      	bne.n	90aa <__aeabi_d2uiz+0x3a>
    90a4:	f04f 30ff 	mov.w	r0, #4294967295
    90a8:	4770      	bx	lr
    90aa:	f04f 0000 	mov.w	r0, #0
    90ae:	4770      	bx	lr

000090b0 <__aeabi_dcmpun>:
    90b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    90b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    90b8:	d102      	bne.n	90c0 <__aeabi_dcmpun+0x10>
    90ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    90be:	d10a      	bne.n	90d6 <__aeabi_dcmpun+0x26>
    90c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    90c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    90c8:	d102      	bne.n	90d0 <__aeabi_dcmpun+0x20>
    90ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    90ce:	d102      	bne.n	90d6 <__aeabi_dcmpun+0x26>
    90d0:	f04f 0000 	mov.w	r0, #0
    90d4:	4770      	bx	lr
    90d6:	f04f 0001 	mov.w	r0, #1
    90da:	4770      	bx	lr

000090dc <__aeabi_d2iz>:
    90dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
    90e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    90e4:	d215      	bcs.n	9112 <__aeabi_d2iz+0x36>
    90e6:	d511      	bpl.n	910c <__aeabi_d2iz+0x30>
    90e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    90ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    90f0:	d912      	bls.n	9118 <__aeabi_d2iz+0x3c>
    90f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    90f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    90fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    90fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9102:	fa23 f002 	lsr.w	r0, r3, r2
    9106:	bf18      	it	ne
    9108:	4240      	negne	r0, r0
    910a:	4770      	bx	lr
    910c:	f04f 0000 	mov.w	r0, #0
    9110:	4770      	bx	lr
    9112:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    9116:	d105      	bne.n	9124 <__aeabi_d2iz+0x48>
    9118:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    911c:	bf08      	it	eq
    911e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    9122:	4770      	bx	lr
    9124:	f04f 0000 	mov.w	r0, #0
    9128:	4770      	bx	lr
    912a:	bf00      	nop

0000912c <__aeabi_d2lz>:
    912c:	b538      	push	{r3, r4, r5, lr}
    912e:	2200      	movs	r2, #0
    9130:	2300      	movs	r3, #0
    9132:	4604      	mov	r4, r0
    9134:	460d      	mov	r5, r1
    9136:	f7ff ff73 	bl	9020 <__aeabi_dcmplt>
    913a:	b928      	cbnz	r0, 9148 <__aeabi_d2lz+0x1c>
    913c:	4620      	mov	r0, r4
    913e:	4629      	mov	r1, r5
    9140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9144:	f7ff beec 	b.w	8f20 <__aeabi_d2ulz>
    9148:	4620      	mov	r0, r4
    914a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    914e:	f7ff fee7 	bl	8f20 <__aeabi_d2ulz>
    9152:	4240      	negs	r0, r0
    9154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9158:	bd38      	pop	{r3, r4, r5, pc}

0000915a <__udivmoddi4>:
    915a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    915e:	4686      	mov	lr, r0
    9160:	468c      	mov	ip, r1
    9162:	4608      	mov	r0, r1
    9164:	9e08      	ldr	r6, [sp, #32]
    9166:	4615      	mov	r5, r2
    9168:	4674      	mov	r4, lr
    916a:	4619      	mov	r1, r3
    916c:	2b00      	cmp	r3, #0
    916e:	f040 80c1 	bne.w	92f4 <__udivmoddi4+0x19a>
    9172:	4285      	cmp	r5, r0
    9174:	fab2 f282 	clz	r2, r2
    9178:	d945      	bls.n	9206 <__udivmoddi4+0xac>
    917a:	b14a      	cbz	r2, 9190 <__udivmoddi4+0x36>
    917c:	f1c2 0320 	rsb	r3, r2, #32
    9180:	fa00 fc02 	lsl.w	ip, r0, r2
    9184:	4095      	lsls	r5, r2
    9186:	4094      	lsls	r4, r2
    9188:	fa2e f303 	lsr.w	r3, lr, r3
    918c:	ea43 0c0c 	orr.w	ip, r3, ip
    9190:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9194:	b2a8      	uxth	r0, r5
    9196:	0c23      	lsrs	r3, r4, #16
    9198:	fbbc f8fe 	udiv	r8, ip, lr
    919c:	fb0e cc18 	mls	ip, lr, r8, ip
    91a0:	fb08 f900 	mul.w	r9, r8, r0
    91a4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    91a8:	4599      	cmp	r9, r3
    91aa:	d928      	bls.n	91fe <__udivmoddi4+0xa4>
    91ac:	18eb      	adds	r3, r5, r3
    91ae:	f108 37ff 	add.w	r7, r8, #4294967295
    91b2:	d204      	bcs.n	91be <__udivmoddi4+0x64>
    91b4:	4599      	cmp	r9, r3
    91b6:	d902      	bls.n	91be <__udivmoddi4+0x64>
    91b8:	f1a8 0702 	sub.w	r7, r8, #2
    91bc:	442b      	add	r3, r5
    91be:	eba3 0309 	sub.w	r3, r3, r9
    91c2:	b2a4      	uxth	r4, r4
    91c4:	fbb3 fcfe 	udiv	ip, r3, lr
    91c8:	fb0e 331c 	mls	r3, lr, ip, r3
    91cc:	fb0c f000 	mul.w	r0, ip, r0
    91d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91d4:	42a0      	cmp	r0, r4
    91d6:	d914      	bls.n	9202 <__udivmoddi4+0xa8>
    91d8:	192c      	adds	r4, r5, r4
    91da:	f10c 33ff 	add.w	r3, ip, #4294967295
    91de:	d204      	bcs.n	91ea <__udivmoddi4+0x90>
    91e0:	42a0      	cmp	r0, r4
    91e2:	d902      	bls.n	91ea <__udivmoddi4+0x90>
    91e4:	f1ac 0302 	sub.w	r3, ip, #2
    91e8:	442c      	add	r4, r5
    91ea:	1a24      	subs	r4, r4, r0
    91ec:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    91f0:	b11e      	cbz	r6, 91fa <__udivmoddi4+0xa0>
    91f2:	40d4      	lsrs	r4, r2
    91f4:	2300      	movs	r3, #0
    91f6:	6034      	str	r4, [r6, #0]
    91f8:	6073      	str	r3, [r6, #4]
    91fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91fe:	4647      	mov	r7, r8
    9200:	e7dd      	b.n	91be <__udivmoddi4+0x64>
    9202:	4663      	mov	r3, ip
    9204:	e7f1      	b.n	91ea <__udivmoddi4+0x90>
    9206:	bb92      	cbnz	r2, 926e <__udivmoddi4+0x114>
    9208:	1b43      	subs	r3, r0, r5
    920a:	2101      	movs	r1, #1
    920c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9210:	b2af      	uxth	r7, r5
    9212:	0c20      	lsrs	r0, r4, #16
    9214:	fbb3 fcfe 	udiv	ip, r3, lr
    9218:	fb0e 331c 	mls	r3, lr, ip, r3
    921c:	fb0c f807 	mul.w	r8, ip, r7
    9220:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    9224:	4598      	cmp	r8, r3
    9226:	d961      	bls.n	92ec <__udivmoddi4+0x192>
    9228:	18eb      	adds	r3, r5, r3
    922a:	f10c 30ff 	add.w	r0, ip, #4294967295
    922e:	d204      	bcs.n	923a <__udivmoddi4+0xe0>
    9230:	4598      	cmp	r8, r3
    9232:	d902      	bls.n	923a <__udivmoddi4+0xe0>
    9234:	f1ac 0002 	sub.w	r0, ip, #2
    9238:	442b      	add	r3, r5
    923a:	eba3 0308 	sub.w	r3, r3, r8
    923e:	b2a4      	uxth	r4, r4
    9240:	fbb3 fcfe 	udiv	ip, r3, lr
    9244:	fb0e 331c 	mls	r3, lr, ip, r3
    9248:	fb0c f707 	mul.w	r7, ip, r7
    924c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9250:	42a7      	cmp	r7, r4
    9252:	d94d      	bls.n	92f0 <__udivmoddi4+0x196>
    9254:	192c      	adds	r4, r5, r4
    9256:	f10c 33ff 	add.w	r3, ip, #4294967295
    925a:	d204      	bcs.n	9266 <__udivmoddi4+0x10c>
    925c:	42a7      	cmp	r7, r4
    925e:	d902      	bls.n	9266 <__udivmoddi4+0x10c>
    9260:	f1ac 0302 	sub.w	r3, ip, #2
    9264:	442c      	add	r4, r5
    9266:	1be4      	subs	r4, r4, r7
    9268:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    926c:	e7c0      	b.n	91f0 <__udivmoddi4+0x96>
    926e:	f1c2 0320 	rsb	r3, r2, #32
    9272:	4095      	lsls	r5, r2
    9274:	4094      	lsls	r4, r2
    9276:	fa20 f103 	lsr.w	r1, r0, r3
    927a:	fa2e f303 	lsr.w	r3, lr, r3
    927e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9282:	4090      	lsls	r0, r2
    9284:	b2af      	uxth	r7, r5
    9286:	4303      	orrs	r3, r0
    9288:	fbb1 fcfe 	udiv	ip, r1, lr
    928c:	fb0e 101c 	mls	r0, lr, ip, r1
    9290:	0c19      	lsrs	r1, r3, #16
    9292:	fb0c f807 	mul.w	r8, ip, r7
    9296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    929a:	4588      	cmp	r8, r1
    929c:	d922      	bls.n	92e4 <__udivmoddi4+0x18a>
    929e:	1869      	adds	r1, r5, r1
    92a0:	f10c 30ff 	add.w	r0, ip, #4294967295
    92a4:	d204      	bcs.n	92b0 <__udivmoddi4+0x156>
    92a6:	4588      	cmp	r8, r1
    92a8:	d902      	bls.n	92b0 <__udivmoddi4+0x156>
    92aa:	f1ac 0002 	sub.w	r0, ip, #2
    92ae:	4429      	add	r1, r5
    92b0:	eba1 0108 	sub.w	r1, r1, r8
    92b4:	b29b      	uxth	r3, r3
    92b6:	fbb1 fcfe 	udiv	ip, r1, lr
    92ba:	fb0e 111c 	mls	r1, lr, ip, r1
    92be:	fb0c f707 	mul.w	r7, ip, r7
    92c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    92c6:	429f      	cmp	r7, r3
    92c8:	d90e      	bls.n	92e8 <__udivmoddi4+0x18e>
    92ca:	18eb      	adds	r3, r5, r3
    92cc:	f10c 31ff 	add.w	r1, ip, #4294967295
    92d0:	d204      	bcs.n	92dc <__udivmoddi4+0x182>
    92d2:	429f      	cmp	r7, r3
    92d4:	d902      	bls.n	92dc <__udivmoddi4+0x182>
    92d6:	f1ac 0102 	sub.w	r1, ip, #2
    92da:	442b      	add	r3, r5
    92dc:	1bdb      	subs	r3, r3, r7
    92de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    92e2:	e793      	b.n	920c <__udivmoddi4+0xb2>
    92e4:	4660      	mov	r0, ip
    92e6:	e7e3      	b.n	92b0 <__udivmoddi4+0x156>
    92e8:	4661      	mov	r1, ip
    92ea:	e7f7      	b.n	92dc <__udivmoddi4+0x182>
    92ec:	4660      	mov	r0, ip
    92ee:	e7a4      	b.n	923a <__udivmoddi4+0xe0>
    92f0:	4663      	mov	r3, ip
    92f2:	e7b8      	b.n	9266 <__udivmoddi4+0x10c>
    92f4:	4283      	cmp	r3, r0
    92f6:	d906      	bls.n	9306 <__udivmoddi4+0x1ac>
    92f8:	b916      	cbnz	r6, 9300 <__udivmoddi4+0x1a6>
    92fa:	2100      	movs	r1, #0
    92fc:	4608      	mov	r0, r1
    92fe:	e77c      	b.n	91fa <__udivmoddi4+0xa0>
    9300:	e9c6 e000 	strd	lr, r0, [r6]
    9304:	e7f9      	b.n	92fa <__udivmoddi4+0x1a0>
    9306:	fab3 f783 	clz	r7, r3
    930a:	b98f      	cbnz	r7, 9330 <__udivmoddi4+0x1d6>
    930c:	4283      	cmp	r3, r0
    930e:	d301      	bcc.n	9314 <__udivmoddi4+0x1ba>
    9310:	4572      	cmp	r2, lr
    9312:	d808      	bhi.n	9326 <__udivmoddi4+0x1cc>
    9314:	ebbe 0402 	subs.w	r4, lr, r2
    9318:	eb60 0303 	sbc.w	r3, r0, r3
    931c:	2001      	movs	r0, #1
    931e:	469c      	mov	ip, r3
    9320:	b91e      	cbnz	r6, 932a <__udivmoddi4+0x1d0>
    9322:	2100      	movs	r1, #0
    9324:	e769      	b.n	91fa <__udivmoddi4+0xa0>
    9326:	4638      	mov	r0, r7
    9328:	e7fa      	b.n	9320 <__udivmoddi4+0x1c6>
    932a:	e9c6 4c00 	strd	r4, ip, [r6]
    932e:	e7f8      	b.n	9322 <__udivmoddi4+0x1c8>
    9330:	f1c7 0c20 	rsb	ip, r7, #32
    9334:	40bb      	lsls	r3, r7
    9336:	fa0e f507 	lsl.w	r5, lr, r7
    933a:	fa22 f40c 	lsr.w	r4, r2, ip
    933e:	fa2e f10c 	lsr.w	r1, lr, ip
    9342:	40ba      	lsls	r2, r7
    9344:	431c      	orrs	r4, r3
    9346:	fa20 f30c 	lsr.w	r3, r0, ip
    934a:	40b8      	lsls	r0, r7
    934c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    9350:	4301      	orrs	r1, r0
    9352:	fa1f fe84 	uxth.w	lr, r4
    9356:	fbb3 f8f9 	udiv	r8, r3, r9
    935a:	fb09 3018 	mls	r0, r9, r8, r3
    935e:	0c0b      	lsrs	r3, r1, #16
    9360:	fb08 fa0e 	mul.w	sl, r8, lr
    9364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9368:	459a      	cmp	sl, r3
    936a:	d940      	bls.n	93ee <__udivmoddi4+0x294>
    936c:	18e3      	adds	r3, r4, r3
    936e:	f108 30ff 	add.w	r0, r8, #4294967295
    9372:	d204      	bcs.n	937e <__udivmoddi4+0x224>
    9374:	459a      	cmp	sl, r3
    9376:	d902      	bls.n	937e <__udivmoddi4+0x224>
    9378:	f1a8 0002 	sub.w	r0, r8, #2
    937c:	4423      	add	r3, r4
    937e:	eba3 030a 	sub.w	r3, r3, sl
    9382:	b289      	uxth	r1, r1
    9384:	fbb3 f8f9 	udiv	r8, r3, r9
    9388:	fb09 3318 	mls	r3, r9, r8, r3
    938c:	fb08 fe0e 	mul.w	lr, r8, lr
    9390:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    9394:	458e      	cmp	lr, r1
    9396:	d92c      	bls.n	93f2 <__udivmoddi4+0x298>
    9398:	1861      	adds	r1, r4, r1
    939a:	f108 33ff 	add.w	r3, r8, #4294967295
    939e:	d204      	bcs.n	93aa <__udivmoddi4+0x250>
    93a0:	458e      	cmp	lr, r1
    93a2:	d902      	bls.n	93aa <__udivmoddi4+0x250>
    93a4:	f1a8 0302 	sub.w	r3, r8, #2
    93a8:	4421      	add	r1, r4
    93aa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    93ae:	eba1 010e 	sub.w	r1, r1, lr
    93b2:	fba0 9802 	umull	r9, r8, r0, r2
    93b6:	4541      	cmp	r1, r8
    93b8:	46ce      	mov	lr, r9
    93ba:	4643      	mov	r3, r8
    93bc:	d302      	bcc.n	93c4 <__udivmoddi4+0x26a>
    93be:	d106      	bne.n	93ce <__udivmoddi4+0x274>
    93c0:	454d      	cmp	r5, r9
    93c2:	d204      	bcs.n	93ce <__udivmoddi4+0x274>
    93c4:	3801      	subs	r0, #1
    93c6:	ebb9 0e02 	subs.w	lr, r9, r2
    93ca:	eb68 0304 	sbc.w	r3, r8, r4
    93ce:	2e00      	cmp	r6, #0
    93d0:	d0a7      	beq.n	9322 <__udivmoddi4+0x1c8>
    93d2:	ebb5 020e 	subs.w	r2, r5, lr
    93d6:	eb61 0103 	sbc.w	r1, r1, r3
    93da:	fa01 fc0c 	lsl.w	ip, r1, ip
    93de:	fa22 f307 	lsr.w	r3, r2, r7
    93e2:	40f9      	lsrs	r1, r7
    93e4:	ea4c 0303 	orr.w	r3, ip, r3
    93e8:	e9c6 3100 	strd	r3, r1, [r6]
    93ec:	e799      	b.n	9322 <__udivmoddi4+0x1c8>
    93ee:	4640      	mov	r0, r8
    93f0:	e7c5      	b.n	937e <__udivmoddi4+0x224>
    93f2:	4643      	mov	r3, r8
    93f4:	e7d9      	b.n	93aa <__udivmoddi4+0x250>

000093f6 <strcmp>:
    93f6:	f810 2b01 	ldrb.w	r2, [r0], #1
    93fa:	f811 3b01 	ldrb.w	r3, [r1], #1
    93fe:	2a01      	cmp	r2, #1
    9400:	bf28      	it	cs
    9402:	429a      	cmpcs	r2, r3
    9404:	d0f7      	beq.n	93f6 <strcmp>
    9406:	1ad0      	subs	r0, r2, r3
    9408:	4770      	bx	lr

0000940a <strlen>:
    940a:	4603      	mov	r3, r0
    940c:	f813 2b01 	ldrb.w	r2, [r3], #1
    9410:	2a00      	cmp	r2, #0
    9412:	d1fb      	bne.n	940c <strlen+0x2>
    9414:	1a18      	subs	r0, r3, r0
    9416:	3801      	subs	r0, #1
    9418:	4770      	bx	lr
    941a:	0000      	movs	r0, r0
    941c:	0000      	movs	r0, r0
	...

00009420 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9422:	460c      	mov	r4, r1
  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9424:	f7fe ffea 	bl	83fc <__aeabi_i2d>
    9428:	a325      	add	r3, pc, #148	; (adr r3, 94c0 <ntc_temperature+0xa0>)
    942a:	e9d3 2300 	ldrd	r2, r3, [r3]
    942e:	f7ff f84f 	bl	84d0 <__aeabi_dmul>
    9432:	f7ff fa5f 	bl	88f4 <__aeabi_d2f>
    9436:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    9438:	1e63      	subs	r3, r4, #1
    943a:	b2db      	uxtb	r3, r3
    943c:	2b02      	cmp	r3, #2
    943e:	bf96      	itet	ls
    9440:	4a27      	ldrls	r2, [pc, #156]	; (94e0 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9442:	2000      	movhi	r0, #0
    9444:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    9448:	4629      	mov	r1, r5
    944a:	f7ff fbb1 	bl	8bb0 <__aeabi_fmul>
    944e:	f7fe ffe7 	bl	8420 <__aeabi_f2d>
    9452:	4606      	mov	r6, r0
    9454:	4628      	mov	r0, r5
    9456:	460f      	mov	r7, r1
    9458:	f7fe ffe2 	bl	8420 <__aeabi_f2d>
    945c:	4602      	mov	r2, r0
    945e:	460b      	mov	r3, r1
    9460:	2000      	movs	r0, #0
    9462:	4920      	ldr	r1, [pc, #128]	; (94e4 <ntc_temperature+0xc4>)
    9464:	f7fe fe7c 	bl	8160 <__aeabi_dsub>
    9468:	4602      	mov	r2, r0
    946a:	460b      	mov	r3, r1
    946c:	4630      	mov	r0, r6
    946e:	4639      	mov	r1, r7
    9470:	f7ff f958 	bl	8724 <__aeabi_ddiv>
    9474:	f7ff fa3e 	bl	88f4 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    9478:	491b      	ldr	r1, [pc, #108]	; (94e8 <ntc_temperature+0xc8>)
    947a:	f7ff fc4d 	bl	8d18 <__aeabi_fdiv>
    947e:	f7fe ffcf 	bl	8420 <__aeabi_f2d>
    9482:	f01a fd27 	bl	23ed4 <log>
    9486:	a310      	add	r3, pc, #64	; (adr r3, 94c8 <ntc_temperature+0xa8>)
    9488:	e9d3 2300 	ldrd	r2, r3, [r3]
    948c:	f7ff f94a 	bl	8724 <__aeabi_ddiv>
    9490:	a30f      	add	r3, pc, #60	; (adr r3, 94d0 <ntc_temperature+0xb0>)
    9492:	e9d3 2300 	ldrd	r2, r3, [r3]
    9496:	f7fe fe65 	bl	8164 <__adddf3>
    949a:	4602      	mov	r2, r0
    949c:	460b      	mov	r3, r1
    949e:	2000      	movs	r0, #0
    94a0:	4912      	ldr	r1, [pc, #72]	; (94ec <ntc_temperature+0xcc>)
    94a2:	f7ff f93f 	bl	8724 <__aeabi_ddiv>
    94a6:	f7ff fa25 	bl	88f4 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    94aa:	f7fe ffb9 	bl	8420 <__aeabi_f2d>
    94ae:	a30a      	add	r3, pc, #40	; (adr r3, 94d8 <ntc_temperature+0xb8>)
    94b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    94b4:	f7fe fe54 	bl	8160 <__aeabi_dsub>
    94b8:	f7ff fa1c 	bl	88f4 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    94bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94be:	bf00      	nop
    94c0:	3a66a002 	.word	0x3a66a002
    94c4:	3f2ccdb3 	.word	0x3f2ccdb3
    94c8:	00000000 	.word	0x00000000
    94cc:	40af0200 	.word	0x40af0200
    94d0:	dcb5db83 	.word	0xdcb5db83
    94d4:	3f6b79e1 	.word	0x3f6b79e1
    94d8:	66666666 	.word	0x66666666
    94dc:	40711266 	.word	0x40711266
    94e0:	0002da28 	.word	0x0002da28
    94e4:	40080000 	.word	0x40080000
    94e8:	461c4000 	.word	0x461c4000
    94ec:	3ff00000 	.word	0x3ff00000

000094f0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    94f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94f2:	4d64      	ldr	r5, [pc, #400]	; (9684 <bt_init+0x194>)
{
    94f4:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94f6:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    94fa:	6899      	ldr	r1, [r3, #8]
    94fc:	f011 0101 	ands.w	r1, r1, #1
    9500:	d11a      	bne.n	9538 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9502:	f640 4003 	movw	r0, #3075	; 0xc03
    9506:	aa05      	add	r2, sp, #20
    9508:	f009 fb82 	bl	12c10 <bt_hci_cmd_send_sync>
		if (err) {
    950c:	4604      	mov	r4, r0
    950e:	2800      	cmp	r0, #0
    9510:	f040 80b5 	bne.w	967e <bt_init+0x18e>
		hci_reset_complete(rsp);
    9514:	9805      	ldr	r0, [sp, #20]
	uint8_t status = buf->data[0];
    9516:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	b95b      	cbnz	r3, 9534 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    951c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9520:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9524:	f002 0209 	and.w	r2, r2, #9
    9528:	e8d3 1fef 	ldaex	r1, [r3]
    952c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    9530:	2c00      	cmp	r4, #0
    9532:	d1f9      	bne.n	9528 <bt_init+0x38>
		net_buf_unref(rsp);
    9534:	f010 ff3a 	bl	1a3ac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9538:	2100      	movs	r1, #0
    953a:	f241 0003 	movw	r0, #4099	; 0x1003
    953e:	aa05      	add	r2, sp, #20
    9540:	f009 fb66 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    9544:	4604      	mov	r4, r0
    9546:	2800      	cmp	r0, #0
    9548:	f040 8099 	bne.w	967e <bt_init+0x18e>
	read_local_features_complete(rsp);
    954c:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    954e:	4e4e      	ldr	r6, [pc, #312]	; (9688 <bt_init+0x198>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    9550:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    9552:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9556:	f8d2 1005 	ldr.w	r1, [r2, #5]
    955a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    955c:	4618      	mov	r0, r3
    955e:	f010 ff25 	bl	1a3ac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9562:	4621      	mov	r1, r4
    9564:	f241 0001 	movw	r0, #4097	; 0x1001
    9568:	aa05      	add	r2, sp, #20
    956a:	f009 fb51 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    956e:	4604      	mov	r4, r0
    9570:	2800      	cmp	r0, #0
    9572:	f040 8084 	bne.w	967e <bt_init+0x18e>
	read_local_ver_complete(rsp);
    9576:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    9578:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    957a:	785a      	ldrb	r2, [r3, #1]
    957c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    9580:	885a      	ldrh	r2, [r3, #2]
    9582:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    9586:	791a      	ldrb	r2, [r3, #4]
    9588:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    958c:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    9590:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9594:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    9598:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    959c:	f010 ff06 	bl	1a3ac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    95a0:	4621      	mov	r1, r4
    95a2:	f241 0002 	movw	r0, #4098	; 0x1002
    95a6:	aa05      	add	r2, sp, #20
    95a8:	f009 fb32 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    95ac:	4604      	mov	r4, r0
    95ae:	2800      	cmp	r0, #0
    95b0:	d165      	bne.n	967e <bt_init+0x18e>
	read_supported_commands_complete(rsp);
    95b2:	9f05      	ldr	r7, [sp, #20]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    95b4:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    95b6:	1c53      	adds	r3, r2, #1
    95b8:	3241      	adds	r2, #65	; 0x41
    95ba:	4634      	mov	r4, r6
    95bc:	6818      	ldr	r0, [r3, #0]
    95be:	6859      	ldr	r1, [r3, #4]
    95c0:	3308      	adds	r3, #8
    95c2:	c403      	stmia	r4!, {r0, r1}
    95c4:	4293      	cmp	r3, r2
    95c6:	4626      	mov	r6, r4
    95c8:	d1f7      	bne.n	95ba <bt_init+0xca>
	net_buf_unref(rsp);
    95ca:	4638      	mov	r0, r7
    95cc:	f010 feee 	bl	1a3ac <net_buf_unref>
		err = prng_init();
    95d0:	f00b f942 	bl	14858 <prng_init>
		if (err) {
    95d4:	4604      	mov	r4, r0
    95d6:	2800      	cmp	r0, #0
    95d8:	d151      	bne.n	967e <bt_init+0x18e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    95da:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    95de:	f013 0320 	ands.w	r3, r3, #32
    95e2:	d118      	bne.n	9616 <bt_init+0x126>
		LOG_WRN("Controller to host flow control not supported");
    95e4:	4a29      	ldr	r2, [pc, #164]	; (968c <bt_init+0x19c>)
    95e6:	492a      	ldr	r1, [pc, #168]	; (9690 <bt_init+0x1a0>)
    95e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    95ec:	9300      	str	r3, [sp, #0]
    95ee:	2202      	movs	r2, #2
    95f0:	f01f f97d 	bl	288ee <z_log_msg_runtime_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    95f4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    95f8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    95fc:	d14c      	bne.n	9698 <bt_init+0x1a8>
		LOG_ERR("Non-LE capable controller detected!");
    95fe:	4a25      	ldr	r2, [pc, #148]	; (9694 <bt_init+0x1a4>)
    9600:	4618      	mov	r0, r3
    9602:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9606:	4922      	ldr	r1, [pc, #136]	; (9690 <bt_init+0x1a0>)
    9608:	2201      	movs	r2, #1
    960a:	9300      	str	r3, [sp, #0]
    960c:	f01f f96f 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    9610:	f06f 0412 	mvn.w	r4, #18
    9614:	e033      	b.n	967e <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9616:	2107      	movs	r1, #7
    9618:	f640 4033 	movw	r0, #3123	; 0xc33
    961c:	f009 faaa 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
    9620:	4606      	mov	r6, r0
    9622:	2800      	cmp	r0, #0
    9624:	f000 8140 	beq.w	98a8 <bt_init+0x3b8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9628:	2107      	movs	r1, #7
    962a:	300c      	adds	r0, #12
    962c:	f010 ffe0 	bl	1a5f0 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    9630:	2345      	movs	r3, #69	; 0x45
    9632:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9634:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9636:	f8c0 4002 	str.w	r4, [r0, #2]
    963a:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    963c:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    963e:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9640:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9642:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9644:	4631      	mov	r1, r6
    9646:	f640 4033 	movw	r0, #3123	; 0xc33
    964a:	f009 fae1 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    964e:	4604      	mov	r4, r0
    9650:	b9a8      	cbnz	r0, 967e <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    9652:	2101      	movs	r1, #1
    9654:	f640 4031 	movw	r0, #3121	; 0xc31
    9658:	f009 fa8c 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
    965c:	4606      	mov	r6, r0
    965e:	2800      	cmp	r0, #0
    9660:	f000 8122 	beq.w	98a8 <bt_init+0x3b8>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    9664:	2101      	movs	r1, #1
    9666:	300c      	adds	r0, #12
    9668:	f020 ffbd 	bl	2a5e6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    966c:	4622      	mov	r2, r4
    966e:	4631      	mov	r1, r6
    9670:	f640 4031 	movw	r0, #3121	; 0xc31
    9674:	f009 facc 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    9678:	4604      	mov	r4, r0
    967a:	2800      	cmp	r0, #0
    967c:	d0ba      	beq.n	95f4 <bt_init+0x104>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    967e:	4620      	mov	r0, r4
    9680:	b007      	add	sp, #28
    9682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9684:	20008000 	.word	0x20008000
    9688:	20008070 	.word	0x20008070
    968c:	00030c78 	.word	0x00030c78
    9690:	0002d644 	.word	0x0002d644
    9694:	00030ca6 	.word	0x00030ca6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9698:	2100      	movs	r1, #0
    969a:	f242 0003 	movw	r0, #8195	; 0x2003
    969e:	aa05      	add	r2, sp, #20
    96a0:	f009 fab6 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    96a4:	4604      	mov	r4, r0
    96a6:	2800      	cmp	r0, #0
    96a8:	d1e9      	bne.n	967e <bt_init+0x18e>
	read_le_features_complete(rsp);
    96aa:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    96ac:	4ebe      	ldr	r6, [pc, #760]	; (99a8 <bt_init+0x4b8>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    96ae:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    96b0:	f8d2 0001 	ldr.w	r0, [r2, #1]
    96b4:	f8d2 1005 	ldr.w	r1, [r2, #5]
    96b8:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    96ba:	4618      	mov	r0, r3
    96bc:	f010 fe76 	bl	1a3ac <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    96c0:	4621      	mov	r1, r4
    96c2:	f242 0002 	movw	r0, #8194	; 0x2002
    96c6:	aa05      	add	r2, sp, #20
    96c8:	f009 faa2 	bl	12c10 <bt_hci_cmd_send_sync>
		if (err) {
    96cc:	4604      	mov	r4, r0
    96ce:	2800      	cmp	r0, #0
    96d0:	d1d5      	bne.n	967e <bt_init+0x18e>
		le_read_buffer_size_complete(rsp);
    96d2:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    96d4:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    96d6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    96da:	b291      	uxth	r1, r2
    96dc:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    96e0:	b129      	cbz	r1, 96ee <bt_init+0x1fe>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    96e2:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    96e4:	4611      	mov	r1, r2
    96e6:	f106 0028 	add.w	r0, r6, #40	; 0x28
    96ea:	f022 fb34 	bl	2bd56 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    96ee:	4620      	mov	r0, r4
    96f0:	f010 fe5c 	bl	1a3ac <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    96f4:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    96f8:	f016 0620 	ands.w	r6, r6, #32
    96fc:	d118      	bne.n	9730 <bt_init+0x240>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    96fe:	2102      	movs	r1, #2
    9700:	f640 406d 	movw	r0, #3181	; 0xc6d
    9704:	f009 fa36 	bl	12b74 <bt_hci_cmd_create>
		if (!buf) {
    9708:	4604      	mov	r4, r0
    970a:	2800      	cmp	r0, #0
    970c:	f000 80cc 	beq.w	98a8 <bt_init+0x3b8>
	return net_buf_simple_add(&buf->b, len);
    9710:	2102      	movs	r1, #2
    9712:	300c      	adds	r0, #12
    9714:	f010 ff6c 	bl	1a5f0 <net_buf_simple_add>
		cp_le->le = 0x01;
    9718:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    971a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    971c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    971e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9720:	4632      	mov	r2, r6
    9722:	f640 406d 	movw	r0, #3181	; 0xc6d
    9726:	f009 fa73 	bl	12c10 <bt_hci_cmd_send_sync>
		if (err) {
    972a:	4604      	mov	r4, r0
    972c:	2800      	cmp	r0, #0
    972e:	d1a6      	bne.n	967e <bt_init+0x18e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9730:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    9734:	071f      	lsls	r7, r3, #28
    9736:	d512      	bpl.n	975e <bt_init+0x26e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9738:	2100      	movs	r1, #0
    973a:	f242 001c 	movw	r0, #8220	; 0x201c
    973e:	aa05      	add	r2, sp, #20
    9740:	f009 fa66 	bl	12c10 <bt_hci_cmd_send_sync>
		if (err) {
    9744:	4604      	mov	r4, r0
    9746:	2800      	cmp	r0, #0
    9748:	d199      	bne.n	967e <bt_init+0x18e>
		le_read_supp_states_complete(rsp);
    974a:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    974c:	68c3      	ldr	r3, [r0, #12]
    974e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    9752:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    9756:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    975a:	f010 fe27 	bl	1a3ac <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    975e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9762:	069e      	lsls	r6, r3, #26
    9764:	d524      	bpl.n	97b0 <bt_init+0x2c0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9766:	f10d 0112 	add.w	r1, sp, #18
    976a:	a804      	add	r0, sp, #16
    976c:	f009 fac6 	bl	12cfc <hci_le_read_max_data_len>
		if (err) {
    9770:	4604      	mov	r4, r0
    9772:	2800      	cmp	r0, #0
    9774:	d183      	bne.n	967e <bt_init+0x18e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9776:	2104      	movs	r1, #4
    9778:	f242 0024 	movw	r0, #8228	; 0x2024
    977c:	f009 f9fa 	bl	12b74 <bt_hci_cmd_create>
		if (!buf) {
    9780:	4606      	mov	r6, r0
    9782:	2800      	cmp	r0, #0
    9784:	f000 8090 	beq.w	98a8 <bt_init+0x3b8>
    9788:	2104      	movs	r1, #4
    978a:	300c      	adds	r0, #12
    978c:	f010 ff30 	bl	1a5f0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9790:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9794:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9796:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9798:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    979c:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    979e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    97a0:	f242 0024 	movw	r0, #8228	; 0x2024
    97a4:	f009 fa34 	bl	12c10 <bt_hci_cmd_send_sync>
		if (err) {
    97a8:	4604      	mov	r4, r0
    97aa:	2800      	cmp	r0, #0
    97ac:	f47f af67 	bne.w	967e <bt_init+0x18e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    97b0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    97b4:	065c      	lsls	r4, r3, #25
    97b6:	d510      	bpl.n	97da <bt_init+0x2ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    97b8:	2100      	movs	r1, #0
    97ba:	f242 002a 	movw	r0, #8234	; 0x202a
    97be:	aa05      	add	r2, sp, #20
    97c0:	f009 fa26 	bl	12c10 <bt_hci_cmd_send_sync>
		if (err) {
    97c4:	4604      	mov	r4, r0
    97c6:	2800      	cmp	r0, #0
    97c8:	f47f af59 	bne.w	967e <bt_init+0x18e>
		le_read_resolving_list_size_complete(rsp);
    97cc:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
    97ce:	68c3      	ldr	r3, [r0, #12]
    97d0:	785b      	ldrb	r3, [r3, #1]
    97d2:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    97d6:	f010 fde9 	bl	1a3ac <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    97da:	2108      	movs	r1, #8
    97dc:	f242 0001 	movw	r0, #8193	; 0x2001
    97e0:	f009 f9c8 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
    97e4:	4604      	mov	r4, r0
    97e6:	2800      	cmp	r0, #0
    97e8:	d05e      	beq.n	98a8 <bt_init+0x3b8>
    97ea:	2108      	movs	r1, #8
    97ec:	300c      	adds	r0, #12
    97ee:	f010 feff 	bl	1a5f0 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    97f2:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    97f6:	f240 2302 	movw	r3, #514	; 0x202
    97fa:	f011 0f40 	tst.w	r1, #64	; 0x40
    97fe:	bf08      	it	eq
    9800:	2303      	moveq	r3, #3
    9802:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9804:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9806:	bf4c      	ite	mi
    9808:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    980c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9810:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9812:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9816:	bf48      	it	mi
    9818:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    981c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9820:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9824:	bf18      	it	ne
    9826:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    982a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    982e:	07cf      	lsls	r7, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9830:	bf48      	it	mi
    9832:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9836:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    9838:	bf08      	it	eq
    983a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    983e:	2100      	movs	r1, #0
    9840:	f01f f86c 	bl	2891c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9844:	4621      	mov	r1, r4
    9846:	2200      	movs	r2, #0
    9848:	f242 0001 	movw	r0, #8193	; 0x2001
    984c:	f009 f9e0 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    9850:	4604      	mov	r4, r0
    9852:	2800      	cmp	r0, #0
    9854:	f47f af13 	bne.w	967e <bt_init+0x18e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9858:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    985c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9860:	069e      	lsls	r6, r3, #26
    9862:	d424      	bmi.n	98ae <bt_init+0x3be>
	if (bt_dev.le.acl_mtu) {
    9864:	b9c9      	cbnz	r1, 989a <bt_init+0x3aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    9866:	f241 0005 	movw	r0, #4101	; 0x1005
    986a:	aa05      	add	r2, sp, #20
    986c:	f009 f9d0 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    9870:	4604      	mov	r4, r0
    9872:	2800      	cmp	r0, #0
    9874:	f47f af03 	bne.w	967e <bt_init+0x18e>
	if (bt_dev.le.acl_mtu) {
    9878:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    987c:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
    987e:	b94b      	cbnz	r3, 9894 <bt_init+0x3a4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    9880:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    9882:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9886:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    988a:	889a      	ldrh	r2, [r3, #4]
    988c:	4847      	ldr	r0, [pc, #284]	; (99ac <bt_init+0x4bc>)
    988e:	4611      	mov	r1, r2
    9890:	f022 fa61 	bl	2bd56 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9894:	4620      	mov	r0, r4
    9896:	f010 fd89 	bl	1a3ac <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    989a:	2108      	movs	r1, #8
    989c:	f640 4001 	movw	r0, #3073	; 0xc01
    98a0:	f009 f968 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
    98a4:	4604      	mov	r4, r0
    98a6:	b980      	cbnz	r0, 98ca <bt_init+0x3da>
		return -ENOBUFS;
    98a8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    98ac:	e6e7      	b.n	967e <bt_init+0x18e>
	else if (!bt_dev.le.acl_mtu) {
    98ae:	2900      	cmp	r1, #0
    98b0:	d1f3      	bne.n	989a <bt_init+0x3aa>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    98b2:	4b3f      	ldr	r3, [pc, #252]	; (99b0 <bt_init+0x4c0>)
    98b4:	2201      	movs	r2, #1
    98b6:	e9cd 0301 	strd	r0, r3, [sp, #4]
    98ba:	493e      	ldr	r1, [pc, #248]	; (99b4 <bt_init+0x4c4>)
    98bc:	4603      	mov	r3, r0
    98be:	9000      	str	r0, [sp, #0]
    98c0:	f01f f815 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    98c4:	f06f 0404 	mvn.w	r4, #4
    98c8:	e6d9      	b.n	967e <bt_init+0x18e>
    98ca:	2108      	movs	r1, #8
    98cc:	300c      	adds	r0, #12
    98ce:	f010 fe8f 	bl	1a5f0 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    98d2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    98d6:	4602      	mov	r2, r0
    98d8:	07d9      	lsls	r1, r3, #31
    98da:	d41c      	bmi.n	9916 <bt_init+0x426>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    98dc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    98e0:	4835      	ldr	r0, [pc, #212]	; (99b8 <bt_init+0x4c8>)
	sys_put_le64(mask, ev->events);
    98e2:	f01f f81b 	bl	2891c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    98e6:	4621      	mov	r1, r4
    98e8:	2200      	movs	r2, #0
    98ea:	f640 4001 	movw	r0, #3073	; 0xc01
    98ee:	f009 f98f 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    98f2:	4604      	mov	r4, r0
    98f4:	2800      	cmp	r0, #0
    98f6:	f47f aec2 	bne.w	967e <bt_init+0x18e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    98fa:	4601      	mov	r1, r0
    98fc:	aa05      	add	r2, sp, #20
    98fe:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9902:	f009 f985 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    9906:	4606      	mov	r6, r0
    9908:	b148      	cbz	r0, 991e <bt_init+0x42e>
		LOG_WRN("Vendor HCI extensions not available");
    990a:	4b2c      	ldr	r3, [pc, #176]	; (99bc <bt_init+0x4cc>)
			LOG_WRN("Failed to read supported vendor features");
    990c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9910:	9400      	str	r4, [sp, #0]
    9912:	4623      	mov	r3, r4
    9914:	e013      	b.n	993e <bt_init+0x44e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9916:	a122      	add	r1, pc, #136	; (adr r1, 99a0 <bt_init+0x4b0>)
    9918:	e9d1 0100 	ldrd	r0, r1, [r1]
    991c:	e7e1      	b.n	98e2 <bt_init+0x3f2>
	net_buf_unref(rsp);
    991e:	9805      	ldr	r0, [sp, #20]
    9920:	f010 fd44 	bl	1a3ac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9924:	4631      	mov	r1, r6
    9926:	f64f 4002 	movw	r0, #64514	; 0xfc02
    992a:	aa05      	add	r2, sp, #20
    992c:	f009 f970 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
    9930:	4604      	mov	r4, r0
    9932:	b1c0      	cbz	r0, 9966 <bt_init+0x476>
		LOG_WRN("Failed to read supported vendor commands");
    9934:	4b22      	ldr	r3, [pc, #136]	; (99c0 <bt_init+0x4d0>)
    9936:	9600      	str	r6, [sp, #0]
    9938:	e9cd 6301 	strd	r6, r3, [sp, #4]
    993c:	4633      	mov	r3, r6
			LOG_WRN("Failed to read supported vendor features");
    993e:	2202      	movs	r2, #2
    9940:	4618      	mov	r0, r3
    9942:	491c      	ldr	r1, [pc, #112]	; (99b4 <bt_init+0x4c4>)
    9944:	f01e ffd3 	bl	288ee <z_log_msg_runtime_create.constprop.0>
	err = bt_id_init();
    9948:	f00a fc06 	bl	14158 <bt_id_init>
	if (err) {
    994c:	4604      	mov	r4, r0
    994e:	2800      	cmp	r0, #0
    9950:	f47f ae95 	bne.w	967e <bt_init+0x18e>
		err = bt_conn_init();
    9954:	f00c f8e6 	bl	15b24 <bt_conn_init>
		if (err) {
    9958:	4604      	mov	r4, r0
    995a:	2800      	cmp	r0, #0
    995c:	f47f ae8f 	bne.w	967e <bt_init+0x18e>
	bt_finalize_init();
    9960:	f009 ff4a 	bl	137f8 <bt_finalize_init>
	return 0;
    9964:	e68b      	b.n	967e <bt_init+0x18e>
	rp.cmds = (void *)rsp->data;
    9966:	9805      	ldr	r0, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    9968:	68c3      	ldr	r3, [r0, #12]
    996a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    996e:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    9972:	f010 fd1b 	bl	1a3ac <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9976:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    997a:	075b      	lsls	r3, r3, #29
    997c:	d5e4      	bpl.n	9948 <bt_init+0x458>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    997e:	4621      	mov	r1, r4
    9980:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9984:	aa05      	add	r2, sp, #20
    9986:	f009 f943 	bl	12c10 <bt_hci_cmd_send_sync>
		if (err) {
    998a:	b108      	cbz	r0, 9990 <bt_init+0x4a0>
			LOG_WRN("Failed to read supported vendor features");
    998c:	4b0d      	ldr	r3, [pc, #52]	; (99c4 <bt_init+0x4d4>)
    998e:	e7bd      	b.n	990c <bt_init+0x41c>
		rp.feat = (void *)rsp->data;
    9990:	9805      	ldr	r0, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9992:	68c3      	ldr	r3, [r0, #12]
    9994:	785b      	ldrb	r3, [r3, #1]
    9996:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    999a:	f010 fd07 	bl	1a3ac <net_buf_unref>
    999e:	e7d3      	b.n	9948 <bt_init+0x458>
    99a0:	02008890 	.word	0x02008890
    99a4:	20008000 	.word	0x20008000
    99a8:	200080d0 	.word	0x200080d0
    99ac:	20008100 	.word	0x20008100
    99b0:	00030cca 	.word	0x00030cca
    99b4:	0002d644 	.word	0x0002d644
    99b8:	02008810 	.word	0x02008810
    99bc:	00030ced 	.word	0x00030ced
    99c0:	00030d11 	.word	0x00030d11
    99c4:	00030d3a 	.word	0x00030d3a

000099c8 <__ieee754_log>:
    99c8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    99cc:	4602      	mov	r2, r0
    99ce:	460b      	mov	r3, r1
    99d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99d4:	460d      	mov	r5, r1
    99d6:	b087      	sub	sp, #28
    99d8:	da24      	bge.n	9a24 <__ieee754_log+0x5c>
    99da:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    99de:	4304      	orrs	r4, r0
    99e0:	d108      	bne.n	99f4 <__ieee754_log+0x2c>
    99e2:	2200      	movs	r2, #0
    99e4:	2300      	movs	r3, #0
    99e6:	2000      	movs	r0, #0
    99e8:	49c9      	ldr	r1, [pc, #804]	; (9d10 <__ieee754_log+0x348>)
    99ea:	f7fe fe9b 	bl	8724 <__aeabi_ddiv>
    99ee:	b007      	add	sp, #28
    99f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99f4:	2900      	cmp	r1, #0
    99f6:	da04      	bge.n	9a02 <__ieee754_log+0x3a>
    99f8:	f7fe fbb2 	bl	8160 <__aeabi_dsub>
    99fc:	2200      	movs	r2, #0
    99fe:	2300      	movs	r3, #0
    9a00:	e7f3      	b.n	99ea <__ieee754_log+0x22>
    9a02:	2200      	movs	r2, #0
    9a04:	4bc3      	ldr	r3, [pc, #780]	; (9d14 <__ieee754_log+0x34c>)
    9a06:	f7fe fd63 	bl	84d0 <__aeabi_dmul>
    9a0a:	460b      	mov	r3, r1
    9a0c:	460d      	mov	r5, r1
    9a0e:	4602      	mov	r2, r0
    9a10:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9a14:	48c0      	ldr	r0, [pc, #768]	; (9d18 <__ieee754_log+0x350>)
    9a16:	4285      	cmp	r5, r0
    9a18:	dd06      	ble.n	9a28 <__ieee754_log+0x60>
    9a1a:	4610      	mov	r0, r2
    9a1c:	4619      	mov	r1, r3
    9a1e:	f7fe fba1 	bl	8164 <__adddf3>
    9a22:	e7e4      	b.n	99ee <__ieee754_log+0x26>
    9a24:	2100      	movs	r1, #0
    9a26:	e7f5      	b.n	9a14 <__ieee754_log+0x4c>
    9a28:	152c      	asrs	r4, r5, #20
    9a2a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    9a2e:	4610      	mov	r0, r2
    9a30:	2200      	movs	r2, #0
    9a32:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    9a36:	440c      	add	r4, r1
    9a38:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    9a3c:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    9a40:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    9a44:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    9a48:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    9a4c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    9a50:	ea41 0305 	orr.w	r3, r1, r5
    9a54:	4619      	mov	r1, r3
    9a56:	4bb1      	ldr	r3, [pc, #708]	; (9d1c <__ieee754_log+0x354>)
    9a58:	f7fe fb82 	bl	8160 <__aeabi_dsub>
    9a5c:	1cab      	adds	r3, r5, #2
    9a5e:	4682      	mov	sl, r0
    9a60:	468b      	mov	fp, r1
    9a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9a66:	2200      	movs	r2, #0
    9a68:	2b02      	cmp	r3, #2
    9a6a:	dc53      	bgt.n	9b14 <__ieee754_log+0x14c>
    9a6c:	2300      	movs	r3, #0
    9a6e:	f7ff facd 	bl	900c <__aeabi_dcmpeq>
    9a72:	b1d0      	cbz	r0, 9aaa <__ieee754_log+0xe2>
    9a74:	2c00      	cmp	r4, #0
    9a76:	f000 8120 	beq.w	9cba <__ieee754_log+0x2f2>
    9a7a:	4620      	mov	r0, r4
    9a7c:	f7fe fcbe 	bl	83fc <__aeabi_i2d>
    9a80:	4606      	mov	r6, r0
    9a82:	460f      	mov	r7, r1
    9a84:	a38e      	add	r3, pc, #568	; (adr r3, 9cc0 <__ieee754_log+0x2f8>)
    9a86:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a8a:	f7fe fd21 	bl	84d0 <__aeabi_dmul>
    9a8e:	4604      	mov	r4, r0
    9a90:	460d      	mov	r5, r1
    9a92:	4630      	mov	r0, r6
    9a94:	4639      	mov	r1, r7
    9a96:	a38c      	add	r3, pc, #560	; (adr r3, 9cc8 <__ieee754_log+0x300>)
    9a98:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a9c:	f7fe fd18 	bl	84d0 <__aeabi_dmul>
    9aa0:	4602      	mov	r2, r0
    9aa2:	460b      	mov	r3, r1
    9aa4:	4620      	mov	r0, r4
    9aa6:	4629      	mov	r1, r5
    9aa8:	e7b9      	b.n	9a1e <__ieee754_log+0x56>
    9aaa:	a389      	add	r3, pc, #548	; (adr r3, 9cd0 <__ieee754_log+0x308>)
    9aac:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ab0:	4650      	mov	r0, sl
    9ab2:	4659      	mov	r1, fp
    9ab4:	f7fe fd0c 	bl	84d0 <__aeabi_dmul>
    9ab8:	4602      	mov	r2, r0
    9aba:	460b      	mov	r3, r1
    9abc:	2000      	movs	r0, #0
    9abe:	4998      	ldr	r1, [pc, #608]	; (9d20 <__ieee754_log+0x358>)
    9ac0:	f7fe fb4e 	bl	8160 <__aeabi_dsub>
    9ac4:	4606      	mov	r6, r0
    9ac6:	460f      	mov	r7, r1
    9ac8:	4652      	mov	r2, sl
    9aca:	465b      	mov	r3, fp
    9acc:	4650      	mov	r0, sl
    9ace:	4659      	mov	r1, fp
    9ad0:	f7fe fcfe 	bl	84d0 <__aeabi_dmul>
    9ad4:	4602      	mov	r2, r0
    9ad6:	460b      	mov	r3, r1
    9ad8:	4630      	mov	r0, r6
    9ada:	4639      	mov	r1, r7
    9adc:	f7fe fcf8 	bl	84d0 <__aeabi_dmul>
    9ae0:	4606      	mov	r6, r0
    9ae2:	460f      	mov	r7, r1
    9ae4:	b914      	cbnz	r4, 9aec <__ieee754_log+0x124>
    9ae6:	4632      	mov	r2, r6
    9ae8:	463b      	mov	r3, r7
    9aea:	e0a0      	b.n	9c2e <__ieee754_log+0x266>
    9aec:	4620      	mov	r0, r4
    9aee:	f7fe fc85 	bl	83fc <__aeabi_i2d>
    9af2:	4680      	mov	r8, r0
    9af4:	4689      	mov	r9, r1
    9af6:	a372      	add	r3, pc, #456	; (adr r3, 9cc0 <__ieee754_log+0x2f8>)
    9af8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9afc:	f7fe fce8 	bl	84d0 <__aeabi_dmul>
    9b00:	4604      	mov	r4, r0
    9b02:	460d      	mov	r5, r1
    9b04:	4640      	mov	r0, r8
    9b06:	4649      	mov	r1, r9
    9b08:	a36f      	add	r3, pc, #444	; (adr r3, 9cc8 <__ieee754_log+0x300>)
    9b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b0e:	f7fe fcdf 	bl	84d0 <__aeabi_dmul>
    9b12:	e0a5      	b.n	9c60 <__ieee754_log+0x298>
    9b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9b18:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9b1c:	f7fe fb22 	bl	8164 <__adddf3>
    9b20:	4602      	mov	r2, r0
    9b22:	460b      	mov	r3, r1
    9b24:	4650      	mov	r0, sl
    9b26:	4659      	mov	r1, fp
    9b28:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9b2c:	f7fe fdfa 	bl	8724 <__aeabi_ddiv>
    9b30:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9b34:	3551      	adds	r5, #81	; 0x51
    9b36:	e9cd 0100 	strd	r0, r1, [sp]
    9b3a:	4620      	mov	r0, r4
    9b3c:	4335      	orrs	r5, r6
    9b3e:	f7fe fc5d 	bl	83fc <__aeabi_i2d>
    9b42:	e9dd 2300 	ldrd	r2, r3, [sp]
    9b46:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9b4a:	4610      	mov	r0, r2
    9b4c:	4619      	mov	r1, r3
    9b4e:	f7fe fcbf 	bl	84d0 <__aeabi_dmul>
    9b52:	4602      	mov	r2, r0
    9b54:	460b      	mov	r3, r1
    9b56:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9b5a:	f7fe fcb9 	bl	84d0 <__aeabi_dmul>
    9b5e:	4680      	mov	r8, r0
    9b60:	4689      	mov	r9, r1
    9b62:	a35d      	add	r3, pc, #372	; (adr r3, 9cd8 <__ieee754_log+0x310>)
    9b64:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b68:	f7fe fcb2 	bl	84d0 <__aeabi_dmul>
    9b6c:	a35c      	add	r3, pc, #368	; (adr r3, 9ce0 <__ieee754_log+0x318>)
    9b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b72:	f7fe faf7 	bl	8164 <__adddf3>
    9b76:	4642      	mov	r2, r8
    9b78:	464b      	mov	r3, r9
    9b7a:	f7fe fca9 	bl	84d0 <__aeabi_dmul>
    9b7e:	a35a      	add	r3, pc, #360	; (adr r3, 9ce8 <__ieee754_log+0x320>)
    9b80:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b84:	f7fe faee 	bl	8164 <__adddf3>
    9b88:	4642      	mov	r2, r8
    9b8a:	464b      	mov	r3, r9
    9b8c:	f7fe fca0 	bl	84d0 <__aeabi_dmul>
    9b90:	a357      	add	r3, pc, #348	; (adr r3, 9cf0 <__ieee754_log+0x328>)
    9b92:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b96:	f7fe fae5 	bl	8164 <__adddf3>
    9b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9b9e:	f7fe fc97 	bl	84d0 <__aeabi_dmul>
    9ba2:	a355      	add	r3, pc, #340	; (adr r3, 9cf8 <__ieee754_log+0x330>)
    9ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9bac:	4640      	mov	r0, r8
    9bae:	4649      	mov	r1, r9
    9bb0:	f7fe fc8e 	bl	84d0 <__aeabi_dmul>
    9bb4:	a352      	add	r3, pc, #328	; (adr r3, 9d00 <__ieee754_log+0x338>)
    9bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bba:	f7fe fad3 	bl	8164 <__adddf3>
    9bbe:	4642      	mov	r2, r8
    9bc0:	464b      	mov	r3, r9
    9bc2:	f7fe fc85 	bl	84d0 <__aeabi_dmul>
    9bc6:	a350      	add	r3, pc, #320	; (adr r3, 9d08 <__ieee754_log+0x340>)
    9bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bcc:	f7fe faca 	bl	8164 <__adddf3>
    9bd0:	4642      	mov	r2, r8
    9bd2:	464b      	mov	r3, r9
    9bd4:	f7fe fc7c 	bl	84d0 <__aeabi_dmul>
    9bd8:	4602      	mov	r2, r0
    9bda:	460b      	mov	r3, r1
    9bdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9be0:	f7fe fac0 	bl	8164 <__adddf3>
    9be4:	2d00      	cmp	r5, #0
    9be6:	4680      	mov	r8, r0
    9be8:	4689      	mov	r9, r1
    9bea:	dd48      	ble.n	9c7e <__ieee754_log+0x2b6>
    9bec:	2200      	movs	r2, #0
    9bee:	4b4c      	ldr	r3, [pc, #304]	; (9d20 <__ieee754_log+0x358>)
    9bf0:	4650      	mov	r0, sl
    9bf2:	4659      	mov	r1, fp
    9bf4:	f7fe fc6c 	bl	84d0 <__aeabi_dmul>
    9bf8:	4652      	mov	r2, sl
    9bfa:	465b      	mov	r3, fp
    9bfc:	f7fe fc68 	bl	84d0 <__aeabi_dmul>
    9c00:	4602      	mov	r2, r0
    9c02:	460b      	mov	r3, r1
    9c04:	4606      	mov	r6, r0
    9c06:	460f      	mov	r7, r1
    9c08:	4640      	mov	r0, r8
    9c0a:	4649      	mov	r1, r9
    9c0c:	f7fe faaa 	bl	8164 <__adddf3>
    9c10:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c14:	f7fe fc5c 	bl	84d0 <__aeabi_dmul>
    9c18:	4680      	mov	r8, r0
    9c1a:	4689      	mov	r9, r1
    9c1c:	b964      	cbnz	r4, 9c38 <__ieee754_log+0x270>
    9c1e:	4602      	mov	r2, r0
    9c20:	460b      	mov	r3, r1
    9c22:	4630      	mov	r0, r6
    9c24:	4639      	mov	r1, r7
    9c26:	f7fe fa9b 	bl	8160 <__aeabi_dsub>
    9c2a:	4602      	mov	r2, r0
    9c2c:	460b      	mov	r3, r1
    9c2e:	4650      	mov	r0, sl
    9c30:	4659      	mov	r1, fp
    9c32:	f7fe fa95 	bl	8160 <__aeabi_dsub>
    9c36:	e6da      	b.n	99ee <__ieee754_log+0x26>
    9c38:	a321      	add	r3, pc, #132	; (adr r3, 9cc0 <__ieee754_log+0x2f8>)
    9c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c42:	f7fe fc45 	bl	84d0 <__aeabi_dmul>
    9c46:	4604      	mov	r4, r0
    9c48:	460d      	mov	r5, r1
    9c4a:	a31f      	add	r3, pc, #124	; (adr r3, 9cc8 <__ieee754_log+0x300>)
    9c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c54:	f7fe fc3c 	bl	84d0 <__aeabi_dmul>
    9c58:	4642      	mov	r2, r8
    9c5a:	464b      	mov	r3, r9
    9c5c:	f7fe fa82 	bl	8164 <__adddf3>
    9c60:	4602      	mov	r2, r0
    9c62:	460b      	mov	r3, r1
    9c64:	4630      	mov	r0, r6
    9c66:	4639      	mov	r1, r7
    9c68:	f7fe fa7a 	bl	8160 <__aeabi_dsub>
    9c6c:	4652      	mov	r2, sl
    9c6e:	465b      	mov	r3, fp
    9c70:	f7fe fa76 	bl	8160 <__aeabi_dsub>
    9c74:	4602      	mov	r2, r0
    9c76:	460b      	mov	r3, r1
    9c78:	4620      	mov	r0, r4
    9c7a:	4629      	mov	r1, r5
    9c7c:	e7d9      	b.n	9c32 <__ieee754_log+0x26a>
    9c7e:	4602      	mov	r2, r0
    9c80:	460b      	mov	r3, r1
    9c82:	4650      	mov	r0, sl
    9c84:	4659      	mov	r1, fp
    9c86:	f7fe fa6b 	bl	8160 <__aeabi_dsub>
    9c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c8e:	f7fe fc1f 	bl	84d0 <__aeabi_dmul>
    9c92:	4606      	mov	r6, r0
    9c94:	460f      	mov	r7, r1
    9c96:	2c00      	cmp	r4, #0
    9c98:	f43f af25 	beq.w	9ae6 <__ieee754_log+0x11e>
    9c9c:	a308      	add	r3, pc, #32	; (adr r3, 9cc0 <__ieee754_log+0x2f8>)
    9c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9ca6:	f7fe fc13 	bl	84d0 <__aeabi_dmul>
    9caa:	4604      	mov	r4, r0
    9cac:	460d      	mov	r5, r1
    9cae:	a306      	add	r3, pc, #24	; (adr r3, 9cc8 <__ieee754_log+0x300>)
    9cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9cb8:	e729      	b.n	9b0e <__ieee754_log+0x146>
    9cba:	2000      	movs	r0, #0
    9cbc:	2100      	movs	r1, #0
    9cbe:	e696      	b.n	99ee <__ieee754_log+0x26>
    9cc0:	fee00000 	.word	0xfee00000
    9cc4:	3fe62e42 	.word	0x3fe62e42
    9cc8:	35793c76 	.word	0x35793c76
    9ccc:	3dea39ef 	.word	0x3dea39ef
    9cd0:	55555555 	.word	0x55555555
    9cd4:	3fd55555 	.word	0x3fd55555
    9cd8:	df3e5244 	.word	0xdf3e5244
    9cdc:	3fc2f112 	.word	0x3fc2f112
    9ce0:	96cb03de 	.word	0x96cb03de
    9ce4:	3fc74664 	.word	0x3fc74664
    9ce8:	94229359 	.word	0x94229359
    9cec:	3fd24924 	.word	0x3fd24924
    9cf0:	55555593 	.word	0x55555593
    9cf4:	3fe55555 	.word	0x3fe55555
    9cf8:	d078c69f 	.word	0xd078c69f
    9cfc:	3fc39a09 	.word	0x3fc39a09
    9d00:	1d8e78af 	.word	0x1d8e78af
    9d04:	3fcc71c5 	.word	0x3fcc71c5
    9d08:	9997fa04 	.word	0x9997fa04
    9d0c:	3fd99999 	.word	0x3fd99999
    9d10:	c3500000 	.word	0xc3500000
    9d14:	43500000 	.word	0x43500000
    9d18:	7fefffff 	.word	0x7fefffff
    9d1c:	3ff00000 	.word	0x3ff00000
    9d20:	3fe00000 	.word	0x3fe00000
    9d24:	00000000 	.word	0x00000000

00009d28 <_strtod_l>:
    9d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d2c:	461f      	mov	r7, r3
    9d2e:	b09d      	sub	sp, #116	; 0x74
    9d30:	2300      	movs	r3, #0
    9d32:	460c      	mov	r4, r1
    9d34:	4682      	mov	sl, r0
    9d36:	920e      	str	r2, [sp, #56]	; 0x38
    9d38:	9318      	str	r3, [sp, #96]	; 0x60
    9d3a:	f04f 0800 	mov.w	r8, #0
    9d3e:	4b97      	ldr	r3, [pc, #604]	; (9f9c <_strtod_l+0x274>)
    9d40:	f04f 0900 	mov.w	r9, #0
    9d44:	681d      	ldr	r5, [r3, #0]
    9d46:	4628      	mov	r0, r5
    9d48:	f7ff fb5f 	bl	940a <strlen>
    9d4c:	4622      	mov	r2, r4
    9d4e:	4683      	mov	fp, r0
    9d50:	9217      	str	r2, [sp, #92]	; 0x5c
    9d52:	7813      	ldrb	r3, [r2, #0]
    9d54:	2b2b      	cmp	r3, #43	; 0x2b
    9d56:	d03b      	beq.n	9dd0 <_strtod_l+0xa8>
    9d58:	d82c      	bhi.n	9db4 <_strtod_l+0x8c>
    9d5a:	2b0d      	cmp	r3, #13
    9d5c:	d826      	bhi.n	9dac <_strtod_l+0x84>
    9d5e:	2b08      	cmp	r3, #8
    9d60:	d826      	bhi.n	9db0 <_strtod_l+0x88>
    9d62:	2b00      	cmp	r3, #0
    9d64:	d02f      	beq.n	9dc6 <_strtod_l+0x9e>
    9d66:	2300      	movs	r3, #0
    9d68:	930c      	str	r3, [sp, #48]	; 0x30
    9d6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    9d6c:	7833      	ldrb	r3, [r6, #0]
    9d6e:	2b30      	cmp	r3, #48	; 0x30
    9d70:	d172      	bne.n	9e58 <_strtod_l+0x130>
    9d72:	7873      	ldrb	r3, [r6, #1]
    9d74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9d78:	2b58      	cmp	r3, #88	; 0x58
    9d7a:	d163      	bne.n	9e44 <_strtod_l+0x11c>
    9d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d7e:	a917      	add	r1, sp, #92	; 0x5c
    9d80:	4a87      	ldr	r2, [pc, #540]	; (9fa0 <_strtod_l+0x278>)
    9d82:	4650      	mov	r0, sl
    9d84:	9301      	str	r3, [sp, #4]
    9d86:	ab18      	add	r3, sp, #96	; 0x60
    9d88:	9702      	str	r7, [sp, #8]
    9d8a:	9300      	str	r3, [sp, #0]
    9d8c:	ab19      	add	r3, sp, #100	; 0x64
    9d8e:	f01b fc0d 	bl	255ac <__gethex>
    9d92:	f010 0507 	ands.w	r5, r0, #7
    9d96:	4604      	mov	r4, r0
    9d98:	d035      	beq.n	9e06 <_strtod_l+0xde>
    9d9a:	2d06      	cmp	r5, #6
    9d9c:	d11a      	bne.n	9dd4 <_strtod_l+0xac>
    9d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9da0:	b10b      	cbz	r3, 9da6 <_strtod_l+0x7e>
    9da2:	3601      	adds	r6, #1
    9da4:	601e      	str	r6, [r3, #0]
    9da6:	4640      	mov	r0, r8
    9da8:	4649      	mov	r1, r9
    9daa:	e037      	b.n	9e1c <_strtod_l+0xf4>
    9dac:	2b20      	cmp	r3, #32
    9dae:	d1da      	bne.n	9d66 <_strtod_l+0x3e>
    9db0:	3201      	adds	r2, #1
    9db2:	e7cd      	b.n	9d50 <_strtod_l+0x28>
    9db4:	2b2d      	cmp	r3, #45	; 0x2d
    9db6:	d1d6      	bne.n	9d66 <_strtod_l+0x3e>
    9db8:	2301      	movs	r3, #1
    9dba:	930c      	str	r3, [sp, #48]	; 0x30
    9dbc:	1c53      	adds	r3, r2, #1
    9dbe:	9317      	str	r3, [sp, #92]	; 0x5c
    9dc0:	7853      	ldrb	r3, [r2, #1]
    9dc2:	2b00      	cmp	r3, #0
    9dc4:	d1d1      	bne.n	9d6a <_strtod_l+0x42>
    9dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9dc8:	2b00      	cmp	r3, #0
    9dca:	d0ec      	beq.n	9da6 <_strtod_l+0x7e>
    9dcc:	601c      	str	r4, [r3, #0]
    9dce:	e7ea      	b.n	9da6 <_strtod_l+0x7e>
    9dd0:	2300      	movs	r3, #0
    9dd2:	e7f2      	b.n	9dba <_strtod_l+0x92>
    9dd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9dd6:	b13a      	cbz	r2, 9de8 <_strtod_l+0xc0>
    9dd8:	2135      	movs	r1, #53	; 0x35
    9dda:	a81a      	add	r0, sp, #104	; 0x68
    9ddc:	f022 fe33 	bl	2ca46 <__copybits>
    9de0:	9918      	ldr	r1, [sp, #96]	; 0x60
    9de2:	4650      	mov	r0, sl
    9de4:	f01b fea2 	bl	25b2c <_Bfree>
    9de8:	3d01      	subs	r5, #1
    9dea:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9dec:	2d04      	cmp	r5, #4
    9dee:	d806      	bhi.n	9dfe <_strtod_l+0xd6>
    9df0:	e8df f005 	tbb	[pc, r5]
    9df4:	23200317 	.word	0x23200317
    9df8:	17          	.byte	0x17
    9df9:	00          	.byte	0x00
    9dfa:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    9dfe:	0721      	lsls	r1, r4, #28
    9e00:	d501      	bpl.n	9e06 <_strtod_l+0xde>
    9e02:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    9e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9e08:	b113      	cbz	r3, 9e10 <_strtod_l+0xe8>
    9e0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9e0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9e0e:	6013      	str	r3, [r2, #0]
    9e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e12:	2b00      	cmp	r3, #0
    9e14:	d0c7      	beq.n	9da6 <_strtod_l+0x7e>
    9e16:	4640      	mov	r0, r8
    9e18:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
    9e1c:	b01d      	add	sp, #116	; 0x74
    9e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e22:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
    9e26:	f202 4233 	addw	r2, r2, #1075	; 0x433
    9e2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    9e2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    9e32:	e7e4      	b.n	9dfe <_strtod_l+0xd6>
    9e34:	f8df 916c 	ldr.w	r9, [pc, #364]	; 9fa4 <_strtod_l+0x27c>
    9e38:	e7e1      	b.n	9dfe <_strtod_l+0xd6>
    9e3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    9e3e:	f04f 38ff 	mov.w	r8, #4294967295
    9e42:	e7dc      	b.n	9dfe <_strtod_l+0xd6>
    9e44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9e46:	1c5a      	adds	r2, r3, #1
    9e48:	9217      	str	r2, [sp, #92]	; 0x5c
    9e4a:	785b      	ldrb	r3, [r3, #1]
    9e4c:	2b30      	cmp	r3, #48	; 0x30
    9e4e:	d0f9      	beq.n	9e44 <_strtod_l+0x11c>
    9e50:	2b00      	cmp	r3, #0
    9e52:	d0d8      	beq.n	9e06 <_strtod_l+0xde>
    9e54:	2301      	movs	r3, #1
    9e56:	e000      	b.n	9e5a <_strtod_l+0x132>
    9e58:	2300      	movs	r3, #0
    9e5a:	2700      	movs	r7, #0
    9e5c:	9304      	str	r3, [sp, #16]
    9e5e:	220a      	movs	r2, #10
    9e60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9e62:	e9cd 7705 	strd	r7, r7, [sp, #20]
    9e66:	930a      	str	r3, [sp, #40]	; 0x28
    9e68:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9e6a:	7806      	ldrb	r6, [r0, #0]
    9e6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    9e70:	b2d9      	uxtb	r1, r3
    9e72:	2909      	cmp	r1, #9
    9e74:	d924      	bls.n	9ec0 <_strtod_l+0x198>
    9e76:	465a      	mov	r2, fp
    9e78:	4629      	mov	r1, r5
    9e7a:	f022 fa9e 	bl	2c3ba <strncmp>
    9e7e:	2800      	cmp	r0, #0
    9e80:	d02d      	beq.n	9ede <_strtod_l+0x1b6>
    9e82:	2000      	movs	r0, #0
    9e84:	4632      	mov	r2, r6
    9e86:	9d05      	ldr	r5, [sp, #20]
    9e88:	4683      	mov	fp, r0
    9e8a:	4603      	mov	r3, r0
    9e8c:	2a65      	cmp	r2, #101	; 0x65
    9e8e:	d001      	beq.n	9e94 <_strtod_l+0x16c>
    9e90:	2a45      	cmp	r2, #69	; 0x45
    9e92:	d113      	bne.n	9ebc <_strtod_l+0x194>
    9e94:	b91d      	cbnz	r5, 9e9e <_strtod_l+0x176>
    9e96:	9a04      	ldr	r2, [sp, #16]
    9e98:	4302      	orrs	r2, r0
    9e9a:	d094      	beq.n	9dc6 <_strtod_l+0x9e>
    9e9c:	2500      	movs	r5, #0
    9e9e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    9ea0:	1c62      	adds	r2, r4, #1
    9ea2:	9217      	str	r2, [sp, #92]	; 0x5c
    9ea4:	7862      	ldrb	r2, [r4, #1]
    9ea6:	2a2b      	cmp	r2, #43	; 0x2b
    9ea8:	d06e      	beq.n	9f88 <_strtod_l+0x260>
    9eaa:	2a2d      	cmp	r2, #45	; 0x2d
    9eac:	d072      	beq.n	9f94 <_strtod_l+0x26c>
    9eae:	f04f 0c00 	mov.w	ip, #0
    9eb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    9eb6:	2909      	cmp	r1, #9
    9eb8:	d97a      	bls.n	9fb0 <_strtod_l+0x288>
    9eba:	9417      	str	r4, [sp, #92]	; 0x5c
    9ebc:	2600      	movs	r6, #0
    9ebe:	e099      	b.n	9ff4 <_strtod_l+0x2cc>
    9ec0:	9905      	ldr	r1, [sp, #20]
    9ec2:	3001      	adds	r0, #1
    9ec4:	2908      	cmp	r1, #8
    9ec6:	9017      	str	r0, [sp, #92]	; 0x5c
    9ec8:	bfd7      	itett	le
    9eca:	9906      	ldrle	r1, [sp, #24]
    9ecc:	fb02 3707 	mlagt	r7, r2, r7, r3
    9ed0:	fb02 3301 	mlale	r3, r2, r1, r3
    9ed4:	9306      	strle	r3, [sp, #24]
    9ed6:	9b05      	ldr	r3, [sp, #20]
    9ed8:	3301      	adds	r3, #1
    9eda:	9305      	str	r3, [sp, #20]
    9edc:	e7c4      	b.n	9e68 <_strtod_l+0x140>
    9ede:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9ee0:	eb03 020b 	add.w	r2, r3, fp
    9ee4:	9217      	str	r2, [sp, #92]	; 0x5c
    9ee6:	f813 200b 	ldrb.w	r2, [r3, fp]
    9eea:	9b05      	ldr	r3, [sp, #20]
    9eec:	b3a3      	cbz	r3, 9f58 <_strtod_l+0x230>
    9eee:	4683      	mov	fp, r0
    9ef0:	461d      	mov	r5, r3
    9ef2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    9ef6:	2b09      	cmp	r3, #9
    9ef8:	d912      	bls.n	9f20 <_strtod_l+0x1f8>
    9efa:	2301      	movs	r3, #1
    9efc:	e7c6      	b.n	9e8c <_strtod_l+0x164>
    9efe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f00:	3001      	adds	r0, #1
    9f02:	1c5a      	adds	r2, r3, #1
    9f04:	9217      	str	r2, [sp, #92]	; 0x5c
    9f06:	785a      	ldrb	r2, [r3, #1]
    9f08:	2a30      	cmp	r2, #48	; 0x30
    9f0a:	d0f8      	beq.n	9efe <_strtod_l+0x1d6>
    9f0c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    9f10:	2b08      	cmp	r3, #8
    9f12:	f200 84ea 	bhi.w	a8ea <_strtod_l+0xbc2>
    9f16:	4683      	mov	fp, r0
    9f18:	2000      	movs	r0, #0
    9f1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f1c:	4605      	mov	r5, r0
    9f1e:	930a      	str	r3, [sp, #40]	; 0x28
    9f20:	3a30      	subs	r2, #48	; 0x30
    9f22:	f100 0301 	add.w	r3, r0, #1
    9f26:	d011      	beq.n	9f4c <_strtod_l+0x224>
    9f28:	449b      	add	fp, r3
    9f2a:	eb00 0c05 	add.w	ip, r0, r5
    9f2e:	462b      	mov	r3, r5
    9f30:	210a      	movs	r1, #10
    9f32:	4563      	cmp	r3, ip
    9f34:	d112      	bne.n	9f5c <_strtod_l+0x234>
    9f36:	182b      	adds	r3, r5, r0
    9f38:	3501      	adds	r5, #1
    9f3a:	2b08      	cmp	r3, #8
    9f3c:	4405      	add	r5, r0
    9f3e:	dc19      	bgt.n	9f74 <_strtod_l+0x24c>
    9f40:	9906      	ldr	r1, [sp, #24]
    9f42:	230a      	movs	r3, #10
    9f44:	fb03 2301 	mla	r3, r3, r1, r2
    9f48:	9306      	str	r3, [sp, #24]
    9f4a:	2300      	movs	r3, #0
    9f4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9f4e:	4618      	mov	r0, r3
    9f50:	1c51      	adds	r1, r2, #1
    9f52:	9117      	str	r1, [sp, #92]	; 0x5c
    9f54:	7852      	ldrb	r2, [r2, #1]
    9f56:	e7cc      	b.n	9ef2 <_strtod_l+0x1ca>
    9f58:	9805      	ldr	r0, [sp, #20]
    9f5a:	e7d5      	b.n	9f08 <_strtod_l+0x1e0>
    9f5c:	2b08      	cmp	r3, #8
    9f5e:	f103 0301 	add.w	r3, r3, #1
    9f62:	dc03      	bgt.n	9f6c <_strtod_l+0x244>
    9f64:	9e06      	ldr	r6, [sp, #24]
    9f66:	434e      	muls	r6, r1
    9f68:	9606      	str	r6, [sp, #24]
    9f6a:	e7e2      	b.n	9f32 <_strtod_l+0x20a>
    9f6c:	2b10      	cmp	r3, #16
    9f6e:	bfd8      	it	le
    9f70:	434f      	mulle	r7, r1
    9f72:	e7de      	b.n	9f32 <_strtod_l+0x20a>
    9f74:	2b0f      	cmp	r3, #15
    9f76:	bfdc      	itt	le
    9f78:	230a      	movle	r3, #10
    9f7a:	fb03 2707 	mlale	r7, r3, r7, r2
    9f7e:	e7e4      	b.n	9f4a <_strtod_l+0x222>
    9f80:	f04f 0b00 	mov.w	fp, #0
    9f84:	2301      	movs	r3, #1
    9f86:	e786      	b.n	9e96 <_strtod_l+0x16e>
    9f88:	f04f 0c00 	mov.w	ip, #0
    9f8c:	1ca2      	adds	r2, r4, #2
    9f8e:	9217      	str	r2, [sp, #92]	; 0x5c
    9f90:	78a2      	ldrb	r2, [r4, #2]
    9f92:	e78e      	b.n	9eb2 <_strtod_l+0x18a>
    9f94:	f04f 0c01 	mov.w	ip, #1
    9f98:	e7f8      	b.n	9f8c <_strtod_l+0x264>
    9f9a:	bf00      	nop
    9f9c:	0002e618 	.word	0x0002e618
    9fa0:	0002e5a4 	.word	0x0002e5a4
    9fa4:	7ff00000 	.word	0x7ff00000
    9fa8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9faa:	1c51      	adds	r1, r2, #1
    9fac:	9117      	str	r1, [sp, #92]	; 0x5c
    9fae:	7852      	ldrb	r2, [r2, #1]
    9fb0:	2a30      	cmp	r2, #48	; 0x30
    9fb2:	d0f9      	beq.n	9fa8 <_strtod_l+0x280>
    9fb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    9fb8:	2908      	cmp	r1, #8
    9fba:	f63f af7f 	bhi.w	9ebc <_strtod_l+0x194>
    9fbe:	3a30      	subs	r2, #48	; 0x30
    9fc0:	9207      	str	r2, [sp, #28]
    9fc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9fc4:	920d      	str	r2, [sp, #52]	; 0x34
    9fc6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9fc8:	1c56      	adds	r6, r2, #1
    9fca:	9617      	str	r6, [sp, #92]	; 0x5c
    9fcc:	7852      	ldrb	r2, [r2, #1]
    9fce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    9fd2:	f1be 0f09 	cmp.w	lr, #9
    9fd6:	d938      	bls.n	a04a <_strtod_l+0x322>
    9fd8:	990d      	ldr	r1, [sp, #52]	; 0x34
    9fda:	1a76      	subs	r6, r6, r1
    9fdc:	2e08      	cmp	r6, #8
    9fde:	f644 661f 	movw	r6, #19999	; 0x4e1f
    9fe2:	dc03      	bgt.n	9fec <_strtod_l+0x2c4>
    9fe4:	9907      	ldr	r1, [sp, #28]
    9fe6:	428e      	cmp	r6, r1
    9fe8:	bfa8      	it	ge
    9fea:	460e      	movge	r6, r1
    9fec:	f1bc 0f00 	cmp.w	ip, #0
    9ff0:	d000      	beq.n	9ff4 <_strtod_l+0x2cc>
    9ff2:	4276      	negs	r6, r6
    9ff4:	2d00      	cmp	r5, #0
    9ff6:	d14f      	bne.n	a098 <_strtod_l+0x370>
    9ff8:	9904      	ldr	r1, [sp, #16]
    9ffa:	4308      	orrs	r0, r1
    9ffc:	f47f af03 	bne.w	9e06 <_strtod_l+0xde>
    a000:	2b00      	cmp	r3, #0
    a002:	f47f aee0 	bne.w	9dc6 <_strtod_l+0x9e>
    a006:	2a69      	cmp	r2, #105	; 0x69
    a008:	d029      	beq.n	a05e <_strtod_l+0x336>
    a00a:	dc26      	bgt.n	a05a <_strtod_l+0x332>
    a00c:	2a49      	cmp	r2, #73	; 0x49
    a00e:	d026      	beq.n	a05e <_strtod_l+0x336>
    a010:	2a4e      	cmp	r2, #78	; 0x4e
    a012:	f47f aed8 	bne.w	9dc6 <_strtod_l+0x9e>
    a016:	499d      	ldr	r1, [pc, #628]	; (a28c <_strtod_l+0x564>)
    a018:	a817      	add	r0, sp, #92	; 0x5c
    a01a:	f022 fba4 	bl	2c766 <__match>
    a01e:	2800      	cmp	r0, #0
    a020:	f43f aed1 	beq.w	9dc6 <_strtod_l+0x9e>
    a024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a026:	781b      	ldrb	r3, [r3, #0]
    a028:	2b28      	cmp	r3, #40	; 0x28
    a02a:	d12f      	bne.n	a08c <_strtod_l+0x364>
    a02c:	aa1a      	add	r2, sp, #104	; 0x68
    a02e:	4998      	ldr	r1, [pc, #608]	; (a290 <_strtod_l+0x568>)
    a030:	a817      	add	r0, sp, #92	; 0x5c
    a032:	f022 fbac 	bl	2c78e <__hexnan>
    a036:	2805      	cmp	r0, #5
    a038:	d128      	bne.n	a08c <_strtod_l+0x364>
    a03a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a03c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    a040:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    a044:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    a048:	e6dd      	b.n	9e06 <_strtod_l+0xde>
    a04a:	9e07      	ldr	r6, [sp, #28]
    a04c:	210a      	movs	r1, #10
    a04e:	fb01 2106 	mla	r1, r1, r6, r2
    a052:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    a056:	9207      	str	r2, [sp, #28]
    a058:	e7b5      	b.n	9fc6 <_strtod_l+0x29e>
    a05a:	2a6e      	cmp	r2, #110	; 0x6e
    a05c:	e7d9      	b.n	a012 <_strtod_l+0x2ea>
    a05e:	498d      	ldr	r1, [pc, #564]	; (a294 <_strtod_l+0x56c>)
    a060:	a817      	add	r0, sp, #92	; 0x5c
    a062:	f022 fb80 	bl	2c766 <__match>
    a066:	2800      	cmp	r0, #0
    a068:	f43f aead 	beq.w	9dc6 <_strtod_l+0x9e>
    a06c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a06e:	a817      	add	r0, sp, #92	; 0x5c
    a070:	4989      	ldr	r1, [pc, #548]	; (a298 <_strtod_l+0x570>)
    a072:	3b01      	subs	r3, #1
    a074:	9317      	str	r3, [sp, #92]	; 0x5c
    a076:	f022 fb76 	bl	2c766 <__match>
    a07a:	b910      	cbnz	r0, a082 <_strtod_l+0x35a>
    a07c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a07e:	3301      	adds	r3, #1
    a080:	9317      	str	r3, [sp, #92]	; 0x5c
    a082:	f8df 9218 	ldr.w	r9, [pc, #536]	; a29c <_strtod_l+0x574>
    a086:	f04f 0800 	mov.w	r8, #0
    a08a:	e6bc      	b.n	9e06 <_strtod_l+0xde>
    a08c:	4884      	ldr	r0, [pc, #528]	; (a2a0 <_strtod_l+0x578>)
    a08e:	f019 ff5b 	bl	23f48 <nan>
    a092:	4680      	mov	r8, r0
    a094:	4689      	mov	r9, r1
    a096:	e6b6      	b.n	9e06 <_strtod_l+0xde>
    a098:	eba6 030b 	sub.w	r3, r6, fp
    a09c:	9806      	ldr	r0, [sp, #24]
    a09e:	462c      	mov	r4, r5
    a0a0:	930f      	str	r3, [sp, #60]	; 0x3c
    a0a2:	9b05      	ldr	r3, [sp, #20]
    a0a4:	2b00      	cmp	r3, #0
    a0a6:	bf08      	it	eq
    a0a8:	462b      	moveq	r3, r5
    a0aa:	2d10      	cmp	r5, #16
    a0ac:	9305      	str	r3, [sp, #20]
    a0ae:	bfa8      	it	ge
    a0b0:	2410      	movge	r4, #16
    a0b2:	f7fe f993 	bl	83dc <__aeabi_ui2d>
    a0b6:	2d09      	cmp	r5, #9
    a0b8:	4680      	mov	r8, r0
    a0ba:	4689      	mov	r9, r1
    a0bc:	dc14      	bgt.n	a0e8 <_strtod_l+0x3c0>
    a0be:	eba6 030b 	sub.w	r3, r6, fp
    a0c2:	2b00      	cmp	r3, #0
    a0c4:	f43f ae9f 	beq.w	9e06 <_strtod_l+0xde>
    a0c8:	eba6 030b 	sub.w	r3, r6, fp
    a0cc:	dd79      	ble.n	a1c2 <_strtod_l+0x49a>
    a0ce:	2b16      	cmp	r3, #22
    a0d0:	dc45      	bgt.n	a15e <_strtod_l+0x436>
    a0d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0d4:	4642      	mov	r2, r8
    a0d6:	4973      	ldr	r1, [pc, #460]	; (a2a4 <_strtod_l+0x57c>)
    a0d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a0dc:	464b      	mov	r3, r9
    a0de:	e9d1 0100 	ldrd	r0, r1, [r1]
    a0e2:	f7fe f9f5 	bl	84d0 <__aeabi_dmul>
    a0e6:	e7d4      	b.n	a092 <_strtod_l+0x36a>
    a0e8:	4b6e      	ldr	r3, [pc, #440]	; (a2a4 <_strtod_l+0x57c>)
    a0ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a0ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    a0f2:	f7fe f9ed 	bl	84d0 <__aeabi_dmul>
    a0f6:	4680      	mov	r8, r0
    a0f8:	4689      	mov	r9, r1
    a0fa:	4638      	mov	r0, r7
    a0fc:	f7fe f96e 	bl	83dc <__aeabi_ui2d>
    a100:	4602      	mov	r2, r0
    a102:	460b      	mov	r3, r1
    a104:	4640      	mov	r0, r8
    a106:	4649      	mov	r1, r9
    a108:	f7fe f82c 	bl	8164 <__adddf3>
    a10c:	2d0f      	cmp	r5, #15
    a10e:	4680      	mov	r8, r0
    a110:	4689      	mov	r9, r1
    a112:	ddd4      	ble.n	a0be <_strtod_l+0x396>
    a114:	1b2c      	subs	r4, r5, r4
    a116:	eba6 030b 	sub.w	r3, r6, fp
    a11a:	441c      	add	r4, r3
    a11c:	2c00      	cmp	r4, #0
    a11e:	dc26      	bgt.n	a16e <_strtod_l+0x446>
    a120:	f000 80a3 	beq.w	a26a <_strtod_l+0x542>
    a124:	4264      	negs	r4, r4
    a126:	f014 020f 	ands.w	r2, r4, #15
    a12a:	d00a      	beq.n	a142 <_strtod_l+0x41a>
    a12c:	4b5d      	ldr	r3, [pc, #372]	; (a2a4 <_strtod_l+0x57c>)
    a12e:	4640      	mov	r0, r8
    a130:	4649      	mov	r1, r9
    a132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a136:	e9d3 2300 	ldrd	r2, r3, [r3]
    a13a:	f7fe faf3 	bl	8724 <__aeabi_ddiv>
    a13e:	4680      	mov	r8, r0
    a140:	4689      	mov	r9, r1
    a142:	1124      	asrs	r4, r4, #4
    a144:	f000 8091 	beq.w	a26a <_strtod_l+0x542>
    a148:	2c1f      	cmp	r4, #31
    a14a:	f340 80b3 	ble.w	a2b4 <_strtod_l+0x58c>
    a14e:	2322      	movs	r3, #34	; 0x22
    a150:	f04f 0800 	mov.w	r8, #0
    a154:	f04f 0900 	mov.w	r9, #0
    a158:	f8ca 3000 	str.w	r3, [sl]
    a15c:	e653      	b.n	9e06 <_strtod_l+0xde>
    a15e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    a162:	eba6 020b 	sub.w	r2, r6, fp
    a166:	4293      	cmp	r3, r2
    a168:	da19      	bge.n	a19e <_strtod_l+0x476>
    a16a:	1b2c      	subs	r4, r5, r4
    a16c:	4414      	add	r4, r2
    a16e:	f014 030f 	ands.w	r3, r4, #15
    a172:	d00a      	beq.n	a18a <_strtod_l+0x462>
    a174:	494b      	ldr	r1, [pc, #300]	; (a2a4 <_strtod_l+0x57c>)
    a176:	4642      	mov	r2, r8
    a178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a17c:	464b      	mov	r3, r9
    a17e:	e9d1 0100 	ldrd	r0, r1, [r1]
    a182:	f7fe f9a5 	bl	84d0 <__aeabi_dmul>
    a186:	4680      	mov	r8, r0
    a188:	4689      	mov	r9, r1
    a18a:	f034 040f 	bics.w	r4, r4, #15
    a18e:	d06c      	beq.n	a26a <_strtod_l+0x542>
    a190:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    a194:	dd41      	ble.n	a21a <_strtod_l+0x4f2>
    a196:	2322      	movs	r3, #34	; 0x22
    a198:	f8ca 3000 	str.w	r3, [sl]
    a19c:	e771      	b.n	a082 <_strtod_l+0x35a>
    a19e:	f1c5 050f 	rsb	r5, r5, #15
    a1a2:	4c40      	ldr	r4, [pc, #256]	; (a2a4 <_strtod_l+0x57c>)
    a1a4:	4642      	mov	r2, r8
    a1a6:	464b      	mov	r3, r9
    a1a8:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    a1ac:	e9d1 0100 	ldrd	r0, r1, [r1]
    a1b0:	f7fe f98e 	bl	84d0 <__aeabi_dmul>
    a1b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1b6:	1b5d      	subs	r5, r3, r5
    a1b8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    a1bc:	e9d4 2300 	ldrd	r2, r3, [r4]
    a1c0:	e78f      	b.n	a0e2 <_strtod_l+0x3ba>
    a1c2:	3316      	adds	r3, #22
    a1c4:	dba6      	blt.n	a114 <_strtod_l+0x3ec>
    a1c6:	ebab 0206 	sub.w	r2, fp, r6
    a1ca:	4b36      	ldr	r3, [pc, #216]	; (a2a4 <_strtod_l+0x57c>)
    a1cc:	4640      	mov	r0, r8
    a1ce:	4649      	mov	r1, r9
    a1d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a1d8:	f7fe faa4 	bl	8724 <__aeabi_ddiv>
    a1dc:	e759      	b.n	a092 <_strtod_l+0x36a>
    a1de:	2300      	movs	r3, #0
    a1e0:	9306      	str	r3, [sp, #24]
    a1e2:	2322      	movs	r3, #34	; 0x22
    a1e4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a29c <_strtod_l+0x574>
    a1e8:	f04f 0800 	mov.w	r8, #0
    a1ec:	f8ca 3000 	str.w	r3, [sl]
    a1f0:	9918      	ldr	r1, [sp, #96]	; 0x60
    a1f2:	4650      	mov	r0, sl
    a1f4:	f01b fc9a 	bl	25b2c <_Bfree>
    a1f8:	9906      	ldr	r1, [sp, #24]
    a1fa:	4650      	mov	r0, sl
    a1fc:	f01b fc96 	bl	25b2c <_Bfree>
    a200:	9905      	ldr	r1, [sp, #20]
    a202:	4650      	mov	r0, sl
    a204:	f01b fc92 	bl	25b2c <_Bfree>
    a208:	9910      	ldr	r1, [sp, #64]	; 0x40
    a20a:	4650      	mov	r0, sl
    a20c:	f01b fc8e 	bl	25b2c <_Bfree>
    a210:	9907      	ldr	r1, [sp, #28]
    a212:	4650      	mov	r0, sl
    a214:	f01b fc8a 	bl	25b2c <_Bfree>
    a218:	e5f5      	b.n	9e06 <_strtod_l+0xde>
    a21a:	2300      	movs	r3, #0
    a21c:	1124      	asrs	r4, r4, #4
    a21e:	4640      	mov	r0, r8
    a220:	4649      	mov	r1, r9
    a222:	4f21      	ldr	r7, [pc, #132]	; (a2a8 <_strtod_l+0x580>)
    a224:	9304      	str	r3, [sp, #16]
    a226:	2c01      	cmp	r4, #1
    a228:	dc22      	bgt.n	a270 <_strtod_l+0x548>
    a22a:	b10b      	cbz	r3, a230 <_strtod_l+0x508>
    a22c:	4680      	mov	r8, r0
    a22e:	4689      	mov	r9, r1
    a230:	9b04      	ldr	r3, [sp, #16]
    a232:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    a236:	491c      	ldr	r1, [pc, #112]	; (a2a8 <_strtod_l+0x580>)
    a238:	4642      	mov	r2, r8
    a23a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a23e:	464b      	mov	r3, r9
    a240:	e9d1 0100 	ldrd	r0, r1, [r1]
    a244:	f7fe f944 	bl	84d0 <__aeabi_dmul>
    a248:	4b14      	ldr	r3, [pc, #80]	; (a29c <_strtod_l+0x574>)
    a24a:	460a      	mov	r2, r1
    a24c:	4680      	mov	r8, r0
    a24e:	400b      	ands	r3, r1
    a250:	4916      	ldr	r1, [pc, #88]	; (a2ac <_strtod_l+0x584>)
    a252:	428b      	cmp	r3, r1
    a254:	d89f      	bhi.n	a196 <_strtod_l+0x46e>
    a256:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    a25a:	428b      	cmp	r3, r1
    a25c:	bf86      	itte	hi
    a25e:	f8df 9050 	ldrhi.w	r9, [pc, #80]	; a2b0 <_strtod_l+0x588>
    a262:	f04f 38ff 	movhi.w	r8, #4294967295
    a266:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    a26a:	2300      	movs	r3, #0
    a26c:	9304      	str	r3, [sp, #16]
    a26e:	e04c      	b.n	a30a <_strtod_l+0x5e2>
    a270:	07e2      	lsls	r2, r4, #31
    a272:	d504      	bpl.n	a27e <_strtod_l+0x556>
    a274:	e9d7 2300 	ldrd	r2, r3, [r7]
    a278:	f7fe f92a 	bl	84d0 <__aeabi_dmul>
    a27c:	2301      	movs	r3, #1
    a27e:	9a04      	ldr	r2, [sp, #16]
    a280:	1064      	asrs	r4, r4, #1
    a282:	3708      	adds	r7, #8
    a284:	3201      	adds	r2, #1
    a286:	9204      	str	r2, [sp, #16]
    a288:	e7cd      	b.n	a226 <_strtod_l+0x4fe>
    a28a:	bf00      	nop
    a28c:	000316e7 	.word	0x000316e7
    a290:	0002e590 	.word	0x0002e590
    a294:	0002f9c0 	.word	0x0002f9c0
    a298:	00034258 	.word	0x00034258
    a29c:	7ff00000 	.word	0x7ff00000
    a2a0:	00032365 	.word	0x00032365
    a2a4:	0002d878 	.word	0x0002d878
    a2a8:	0002d850 	.word	0x0002d850
    a2ac:	7ca00000 	.word	0x7ca00000
    a2b0:	7fefffff 	.word	0x7fefffff
    a2b4:	f014 0310 	ands.w	r3, r4, #16
    a2b8:	4640      	mov	r0, r8
    a2ba:	4649      	mov	r1, r9
    a2bc:	4fab      	ldr	r7, [pc, #684]	; (a56c <_strtod_l+0x844>)
    a2be:	bf18      	it	ne
    a2c0:	236a      	movne	r3, #106	; 0x6a
    a2c2:	9304      	str	r3, [sp, #16]
    a2c4:	2300      	movs	r3, #0
    a2c6:	07e2      	lsls	r2, r4, #31
    a2c8:	d504      	bpl.n	a2d4 <_strtod_l+0x5ac>
    a2ca:	e9d7 2300 	ldrd	r2, r3, [r7]
    a2ce:	f7fe f8ff 	bl	84d0 <__aeabi_dmul>
    a2d2:	2301      	movs	r3, #1
    a2d4:	1064      	asrs	r4, r4, #1
    a2d6:	f107 0708 	add.w	r7, r7, #8
    a2da:	d1f4      	bne.n	a2c6 <_strtod_l+0x59e>
    a2dc:	b10b      	cbz	r3, a2e2 <_strtod_l+0x5ba>
    a2de:	4680      	mov	r8, r0
    a2e0:	4689      	mov	r9, r1
    a2e2:	9b04      	ldr	r3, [sp, #16]
    a2e4:	b143      	cbz	r3, a2f8 <_strtod_l+0x5d0>
    a2e6:	f3c9 520a 	ubfx	r2, r9, #20, #11
    a2ea:	4649      	mov	r1, r9
    a2ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    a2f0:	2b00      	cmp	r3, #0
    a2f2:	dc50      	bgt.n	a396 <_strtod_l+0x66e>
    a2f4:	236a      	movs	r3, #106	; 0x6a
    a2f6:	9304      	str	r3, [sp, #16]
    a2f8:	2200      	movs	r2, #0
    a2fa:	2300      	movs	r3, #0
    a2fc:	4640      	mov	r0, r8
    a2fe:	4649      	mov	r1, r9
    a300:	f7fe fe84 	bl	900c <__aeabi_dcmpeq>
    a304:	2800      	cmp	r0, #0
    a306:	f47f af22 	bne.w	a14e <_strtod_l+0x426>
    a30a:	9b06      	ldr	r3, [sp, #24]
    a30c:	4650      	mov	r0, sl
    a30e:	9a05      	ldr	r2, [sp, #20]
    a310:	9300      	str	r3, [sp, #0]
    a312:	462b      	mov	r3, r5
    a314:	990a      	ldr	r1, [sp, #40]	; 0x28
    a316:	f01b fc73 	bl	25c00 <__s2b>
    a31a:	9010      	str	r0, [sp, #64]	; 0x40
    a31c:	2800      	cmp	r0, #0
    a31e:	f43f af3a 	beq.w	a196 <_strtod_l+0x46e>
    a322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a324:	ebab 0b06 	sub.w	fp, fp, r6
    a328:	2b00      	cmp	r3, #0
    a32a:	bfb4      	ite	lt
    a32c:	465b      	movlt	r3, fp
    a32e:	2300      	movge	r3, #0
    a330:	9311      	str	r3, [sp, #68]	; 0x44
    a332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a334:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a338:	9314      	str	r3, [sp, #80]	; 0x50
    a33a:	2300      	movs	r3, #0
    a33c:	9307      	str	r3, [sp, #28]
    a33e:	9305      	str	r3, [sp, #20]
    a340:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a342:	4650      	mov	r0, sl
    a344:	6859      	ldr	r1, [r3, #4]
    a346:	f01b fbb1 	bl	25aac <_Balloc>
    a34a:	9006      	str	r0, [sp, #24]
    a34c:	2800      	cmp	r0, #0
    a34e:	f43f af48 	beq.w	a1e2 <_strtod_l+0x4ba>
    a352:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a354:	300c      	adds	r0, #12
    a356:	691a      	ldr	r2, [r3, #16]
    a358:	f103 010c 	add.w	r1, r3, #12
    a35c:	3202      	adds	r2, #2
    a35e:	0092      	lsls	r2, r2, #2
    a360:	f021 feb4 	bl	2c0cc <memcpy>
    a364:	ab1a      	add	r3, sp, #104	; 0x68
    a366:	4642      	mov	r2, r8
    a368:	4650      	mov	r0, sl
    a36a:	9301      	str	r3, [sp, #4]
    a36c:	ab19      	add	r3, sp, #100	; 0x64
    a36e:	9300      	str	r3, [sp, #0]
    a370:	464b      	mov	r3, r9
    a372:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    a376:	f01b ff13 	bl	261a0 <__d2b>
    a37a:	9018      	str	r0, [sp, #96]	; 0x60
    a37c:	2800      	cmp	r0, #0
    a37e:	f43f af30 	beq.w	a1e2 <_strtod_l+0x4ba>
    a382:	2101      	movs	r1, #1
    a384:	4650      	mov	r0, sl
    a386:	f01b fc85 	bl	25c94 <__i2b>
    a38a:	4603      	mov	r3, r0
    a38c:	9005      	str	r0, [sp, #20]
    a38e:	b9d0      	cbnz	r0, a3c6 <_strtod_l+0x69e>
    a390:	2300      	movs	r3, #0
    a392:	9305      	str	r3, [sp, #20]
    a394:	e725      	b.n	a1e2 <_strtod_l+0x4ba>
    a396:	2b1f      	cmp	r3, #31
    a398:	dd0e      	ble.n	a3b8 <_strtod_l+0x690>
    a39a:	2b34      	cmp	r3, #52	; 0x34
    a39c:	f04f 0800 	mov.w	r8, #0
    a3a0:	bfdb      	ittet	le
    a3a2:	f04f 33ff 	movle.w	r3, #4294967295
    a3a6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    a3aa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    a3ae:	4093      	lslle	r3, r2
    a3b0:	bfd8      	it	le
    a3b2:	ea03 0901 	andle.w	r9, r3, r1
    a3b6:	e79d      	b.n	a2f4 <_strtod_l+0x5cc>
    a3b8:	f04f 32ff 	mov.w	r2, #4294967295
    a3bc:	fa02 f303 	lsl.w	r3, r2, r3
    a3c0:	ea03 0808 	and.w	r8, r3, r8
    a3c4:	e796      	b.n	a2f4 <_strtod_l+0x5cc>
    a3c6:	9c19      	ldr	r4, [sp, #100]	; 0x64
    a3c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a3ca:	2c00      	cmp	r4, #0
    a3cc:	bfa9      	itett	ge
    a3ce:	9b11      	ldrge	r3, [sp, #68]	; 0x44
    a3d0:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
    a3d2:	18e7      	addge	r7, r4, r3
    a3d4:	9e14      	ldrge	r6, [sp, #80]	; 0x50
    a3d6:	bfb8      	it	lt
    a3d8:	1b1e      	sublt	r6, r3, r4
    a3da:	9b04      	ldr	r3, [sp, #16]
    a3dc:	bfb8      	it	lt
    a3de:	9f11      	ldrlt	r7, [sp, #68]	; 0x44
    a3e0:	1ae4      	subs	r4, r4, r3
    a3e2:	4b63      	ldr	r3, [pc, #396]	; (a570 <_strtod_l+0x848>)
    a3e4:	4414      	add	r4, r2
    a3e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    a3ea:	3c01      	subs	r4, #1
    a3ec:	429c      	cmp	r4, r3
    a3ee:	f280 80b0 	bge.w	a552 <_strtod_l+0x82a>
    a3f2:	1b1b      	subs	r3, r3, r4
    a3f4:	2501      	movs	r5, #1
    a3f6:	2b1f      	cmp	r3, #31
    a3f8:	eba2 0203 	sub.w	r2, r2, r3
    a3fc:	bfcd      	iteet	gt
    a3fe:	f1c4 447f 	rsbgt	r4, r4, #4278190080	; 0xff000000
    a402:	409d      	lslle	r5, r3
    a404:	2400      	movle	r4, #0
    a406:	f504 047f 	addgt.w	r4, r4, #16711680	; 0xff0000
    a40a:	bfc2      	ittt	gt
    a40c:	f504 447b 	addgt.w	r4, r4, #64256	; 0xfb00
    a410:	34e2      	addgt	r4, #226	; 0xe2
    a412:	fa05 f404 	lslgt.w	r4, r5, r4
    a416:	eb07 0b02 	add.w	fp, r7, r2
    a41a:	9b04      	ldr	r3, [sp, #16]
    a41c:	4416      	add	r6, r2
    a41e:	455f      	cmp	r7, fp
    a420:	441e      	add	r6, r3
    a422:	463b      	mov	r3, r7
    a424:	bfa8      	it	ge
    a426:	465b      	movge	r3, fp
    a428:	42b3      	cmp	r3, r6
    a42a:	bfa8      	it	ge
    a42c:	4633      	movge	r3, r6
    a42e:	2b00      	cmp	r3, #0
    a430:	bfc2      	ittt	gt
    a432:	ebab 0b03 	subgt.w	fp, fp, r3
    a436:	1af6      	subgt	r6, r6, r3
    a438:	1aff      	subgt	r7, r7, r3
    a43a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a43c:	2b00      	cmp	r3, #0
    a43e:	dd16      	ble.n	a46e <_strtod_l+0x746>
    a440:	461a      	mov	r2, r3
    a442:	9905      	ldr	r1, [sp, #20]
    a444:	4650      	mov	r0, sl
    a446:	f01b fce5 	bl	25e14 <__pow5mult>
    a44a:	9005      	str	r0, [sp, #20]
    a44c:	2800      	cmp	r0, #0
    a44e:	d09f      	beq.n	a390 <_strtod_l+0x668>
    a450:	4601      	mov	r1, r0
    a452:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a454:	4650      	mov	r0, sl
    a456:	f01b fc33 	bl	25cc0 <__multiply>
    a45a:	900d      	str	r0, [sp, #52]	; 0x34
    a45c:	2800      	cmp	r0, #0
    a45e:	f43f aec0 	beq.w	a1e2 <_strtod_l+0x4ba>
    a462:	9918      	ldr	r1, [sp, #96]	; 0x60
    a464:	4650      	mov	r0, sl
    a466:	f01b fb61 	bl	25b2c <_Bfree>
    a46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a46c:	9318      	str	r3, [sp, #96]	; 0x60
    a46e:	f1bb 0f00 	cmp.w	fp, #0
    a472:	dc71      	bgt.n	a558 <_strtod_l+0x830>
    a474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a476:	2b00      	cmp	r3, #0
    a478:	dd08      	ble.n	a48c <_strtod_l+0x764>
    a47a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a47c:	4650      	mov	r0, sl
    a47e:	9906      	ldr	r1, [sp, #24]
    a480:	f01b fcc8 	bl	25e14 <__pow5mult>
    a484:	9006      	str	r0, [sp, #24]
    a486:	2800      	cmp	r0, #0
    a488:	f43f aea9 	beq.w	a1de <_strtod_l+0x4b6>
    a48c:	2e00      	cmp	r6, #0
    a48e:	dd08      	ble.n	a4a2 <_strtod_l+0x77a>
    a490:	4632      	mov	r2, r6
    a492:	9906      	ldr	r1, [sp, #24]
    a494:	4650      	mov	r0, sl
    a496:	f01b fd17 	bl	25ec8 <__lshift>
    a49a:	9006      	str	r0, [sp, #24]
    a49c:	2800      	cmp	r0, #0
    a49e:	f43f ae9e 	beq.w	a1de <_strtod_l+0x4b6>
    a4a2:	2f00      	cmp	r7, #0
    a4a4:	dd08      	ble.n	a4b8 <_strtod_l+0x790>
    a4a6:	463a      	mov	r2, r7
    a4a8:	9905      	ldr	r1, [sp, #20]
    a4aa:	4650      	mov	r0, sl
    a4ac:	f01b fd0c 	bl	25ec8 <__lshift>
    a4b0:	9005      	str	r0, [sp, #20]
    a4b2:	2800      	cmp	r0, #0
    a4b4:	f43f ae95 	beq.w	a1e2 <_strtod_l+0x4ba>
    a4b8:	9a06      	ldr	r2, [sp, #24]
    a4ba:	4650      	mov	r0, sl
    a4bc:	9918      	ldr	r1, [sp, #96]	; 0x60
    a4be:	f01b fd6f 	bl	25fa0 <__mdiff>
    a4c2:	9007      	str	r0, [sp, #28]
    a4c4:	2800      	cmp	r0, #0
    a4c6:	f43f ae8c 	beq.w	a1e2 <_strtod_l+0x4ba>
    a4ca:	68c3      	ldr	r3, [r0, #12]
    a4cc:	9905      	ldr	r1, [sp, #20]
    a4ce:	930d      	str	r3, [sp, #52]	; 0x34
    a4d0:	2300      	movs	r3, #0
    a4d2:	60c3      	str	r3, [r0, #12]
    a4d4:	f022 fa6c 	bl	2c9b0 <__mcmp>
    a4d8:	2800      	cmp	r0, #0
    a4da:	da4b      	bge.n	a574 <_strtod_l+0x84c>
    a4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a4de:	ea53 0308 	orrs.w	r3, r3, r8
    a4e2:	f040 80bc 	bne.w	a65e <_strtod_l+0x936>
    a4e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	f040 80b7 	bne.w	a65e <_strtod_l+0x936>
    a4f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a4f4:	0d1b      	lsrs	r3, r3, #20
    a4f6:	051b      	lsls	r3, r3, #20
    a4f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a4fc:	f240 80af 	bls.w	a65e <_strtod_l+0x936>
    a500:	9b07      	ldr	r3, [sp, #28]
    a502:	695b      	ldr	r3, [r3, #20]
    a504:	b923      	cbnz	r3, a510 <_strtod_l+0x7e8>
    a506:	9b07      	ldr	r3, [sp, #28]
    a508:	691b      	ldr	r3, [r3, #16]
    a50a:	2b01      	cmp	r3, #1
    a50c:	f340 80a7 	ble.w	a65e <_strtod_l+0x936>
    a510:	2201      	movs	r2, #1
    a512:	9907      	ldr	r1, [sp, #28]
    a514:	4650      	mov	r0, sl
    a516:	f01b fcd7 	bl	25ec8 <__lshift>
    a51a:	9905      	ldr	r1, [sp, #20]
    a51c:	9007      	str	r0, [sp, #28]
    a51e:	f022 fa47 	bl	2c9b0 <__mcmp>
    a522:	2800      	cmp	r0, #0
    a524:	f340 809b 	ble.w	a65e <_strtod_l+0x936>
    a528:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a52c:	9a04      	ldr	r2, [sp, #16]
    a52e:	0d1b      	lsrs	r3, r3, #20
    a530:	051b      	lsls	r3, r3, #20
    a532:	2a00      	cmp	r2, #0
    a534:	d079      	beq.n	a62a <_strtod_l+0x902>
    a536:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a53a:	d86d      	bhi.n	a618 <_strtod_l+0x8f0>
    a53c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    a540:	d846      	bhi.n	a5d0 <_strtod_l+0x8a8>
    a542:	f04f 0800 	mov.w	r8, #0
    a546:	f04f 0900 	mov.w	r9, #0
    a54a:	2322      	movs	r3, #34	; 0x22
    a54c:	f8ca 3000 	str.w	r3, [sl]
    a550:	e64e      	b.n	a1f0 <_strtod_l+0x4c8>
    a552:	2400      	movs	r4, #0
    a554:	2501      	movs	r5, #1
    a556:	e75e      	b.n	a416 <_strtod_l+0x6ee>
    a558:	465a      	mov	r2, fp
    a55a:	9918      	ldr	r1, [sp, #96]	; 0x60
    a55c:	4650      	mov	r0, sl
    a55e:	f01b fcb3 	bl	25ec8 <__lshift>
    a562:	9018      	str	r0, [sp, #96]	; 0x60
    a564:	2800      	cmp	r0, #0
    a566:	d185      	bne.n	a474 <_strtod_l+0x74c>
    a568:	e63b      	b.n	a1e2 <_strtod_l+0x4ba>
    a56a:	bf00      	nop
    a56c:	0002d828 	.word	0x0002d828
    a570:	fffffc02 	.word	0xfffffc02
    a574:	46cb      	mov	fp, r9
    a576:	f040 80a3 	bne.w	a6c0 <_strtod_l+0x998>
    a57a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a57c:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a580:	2a00      	cmp	r2, #0
    a582:	d040      	beq.n	a606 <_strtod_l+0x8de>
    a584:	4a96      	ldr	r2, [pc, #600]	; (a7e0 <_strtod_l+0xab8>)
    a586:	4293      	cmp	r3, r2
    a588:	d158      	bne.n	a63c <_strtod_l+0x914>
    a58a:	9b04      	ldr	r3, [sp, #16]
    a58c:	4642      	mov	r2, r8
    a58e:	b97b      	cbnz	r3, a5b0 <_strtod_l+0x888>
    a590:	f1b8 3fff 	cmp.w	r8, #4294967295
    a594:	f040 8089 	bne.w	a6aa <_strtod_l+0x982>
    a598:	4b92      	ldr	r3, [pc, #584]	; (a7e4 <_strtod_l+0xabc>)
    a59a:	4599      	cmp	r9, r3
    a59c:	f43f ae21 	beq.w	a1e2 <_strtod_l+0x4ba>
    a5a0:	4b91      	ldr	r3, [pc, #580]	; (a7e8 <_strtod_l+0xac0>)
    a5a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    a5a6:	ea09 0303 	and.w	r3, r9, r3
    a5aa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a5ae:	e61f      	b.n	a1f0 <_strtod_l+0x4c8>
    a5b0:	4b8d      	ldr	r3, [pc, #564]	; (a7e8 <_strtod_l+0xac0>)
    a5b2:	ea09 0303 	and.w	r3, r9, r3
    a5b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a5ba:	d916      	bls.n	a5ea <_strtod_l+0x8c2>
    a5bc:	f118 0101 	adds.w	r1, r8, #1
    a5c0:	d11b      	bne.n	a5fa <_strtod_l+0x8d2>
    a5c2:	4a88      	ldr	r2, [pc, #544]	; (a7e4 <_strtod_l+0xabc>)
    a5c4:	4591      	cmp	r9, r2
    a5c6:	f43f ae0c 	beq.w	a1e2 <_strtod_l+0x4ba>
    a5ca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a5ce:	4680      	mov	r8, r0
    a5d0:	4b86      	ldr	r3, [pc, #536]	; (a7ec <_strtod_l+0xac4>)
    a5d2:	4640      	mov	r0, r8
    a5d4:	4649      	mov	r1, r9
    a5d6:	2200      	movs	r2, #0
    a5d8:	f7fd ff7a 	bl	84d0 <__aeabi_dmul>
    a5dc:	460b      	mov	r3, r1
    a5de:	4680      	mov	r8, r0
    a5e0:	4689      	mov	r9, r1
    a5e2:	4303      	orrs	r3, r0
    a5e4:	f47f ae04 	bne.w	a1f0 <_strtod_l+0x4c8>
    a5e8:	e7af      	b.n	a54a <_strtod_l+0x822>
    a5ea:	0d1e      	lsrs	r6, r3, #20
    a5ec:	f04f 31ff 	mov.w	r1, #4294967295
    a5f0:	f1c6 066b 	rsb	r6, r6, #107	; 0x6b
    a5f4:	40b1      	lsls	r1, r6
    a5f6:	4588      	cmp	r8, r1
    a5f8:	d0e7      	beq.n	a5ca <_strtod_l+0x8a2>
    a5fa:	2c00      	cmp	r4, #0
    a5fc:	d05e      	beq.n	a6bc <_strtod_l+0x994>
    a5fe:	ea14 0f0b 	tst.w	r4, fp
    a602:	d0e5      	beq.n	a5d0 <_strtod_l+0x8a8>
    a604:	e01e      	b.n	a644 <_strtod_l+0x91c>
    a606:	2b00      	cmp	r3, #0
    a608:	d14a      	bne.n	a6a0 <_strtod_l+0x978>
    a60a:	f1b8 0f00 	cmp.w	r8, #0
    a60e:	d08b      	beq.n	a528 <_strtod_l+0x800>
    a610:	b364      	cbz	r4, a66c <_strtod_l+0x944>
    a612:	ea14 0f0b 	tst.w	r4, fp
    a616:	e02b      	b.n	a670 <_strtod_l+0x948>
    a618:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a61c:	f04f 38ff 	mov.w	r8, #4294967295
    a620:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a624:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a628:	e7d2      	b.n	a5d0 <_strtod_l+0x8a8>
    a62a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a62e:	f04f 38ff 	mov.w	r8, #4294967295
    a632:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a636:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a63a:	e5d9      	b.n	a1f0 <_strtod_l+0x4c8>
    a63c:	b19c      	cbz	r4, a666 <_strtod_l+0x93e>
    a63e:	ea14 0f09 	tst.w	r4, r9
    a642:	d00c      	beq.n	a65e <_strtod_l+0x936>
    a644:	9a04      	ldr	r2, [sp, #16]
    a646:	4640      	mov	r0, r8
    a648:	4649      	mov	r1, r9
    a64a:	f021 fefd 	bl	2c448 <sulp>
    a64e:	4602      	mov	r2, r0
    a650:	460b      	mov	r3, r1
    a652:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a656:	f7fd fd85 	bl	8164 <__adddf3>
    a65a:	4680      	mov	r8, r0
    a65c:	4689      	mov	r9, r1
    a65e:	9b04      	ldr	r3, [sp, #16]
    a660:	2b00      	cmp	r3, #0
    a662:	d1b5      	bne.n	a5d0 <_strtod_l+0x8a8>
    a664:	e5c4      	b.n	a1f0 <_strtod_l+0x4c8>
    a666:	ea15 0f08 	tst.w	r5, r8
    a66a:	e7ea      	b.n	a642 <_strtod_l+0x91a>
    a66c:	ea18 0f05 	tst.w	r8, r5
    a670:	d0f5      	beq.n	a65e <_strtod_l+0x936>
    a672:	9a04      	ldr	r2, [sp, #16]
    a674:	4640      	mov	r0, r8
    a676:	4649      	mov	r1, r9
    a678:	f021 fee6 	bl	2c448 <sulp>
    a67c:	4602      	mov	r2, r0
    a67e:	460b      	mov	r3, r1
    a680:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a684:	f7fd fd6c 	bl	8160 <__aeabi_dsub>
    a688:	2200      	movs	r2, #0
    a68a:	2300      	movs	r3, #0
    a68c:	4604      	mov	r4, r0
    a68e:	460d      	mov	r5, r1
    a690:	f7fe fcbc 	bl	900c <__aeabi_dcmpeq>
    a694:	2800      	cmp	r0, #0
    a696:	f47f af54 	bne.w	a542 <_strtod_l+0x81a>
    a69a:	46a0      	mov	r8, r4
    a69c:	46a9      	mov	r9, r5
    a69e:	e7de      	b.n	a65e <_strtod_l+0x936>
    a6a0:	2c00      	cmp	r4, #0
    a6a2:	d1b6      	bne.n	a612 <_strtod_l+0x8ea>
    a6a4:	ea15 0f08 	tst.w	r5, r8
    a6a8:	e7e2      	b.n	a670 <_strtod_l+0x948>
    a6aa:	b124      	cbz	r4, a6b6 <_strtod_l+0x98e>
    a6ac:	ea14 0f09 	tst.w	r4, r9
    a6b0:	f43f ad9e 	beq.w	a1f0 <_strtod_l+0x4c8>
    a6b4:	e7c6      	b.n	a644 <_strtod_l+0x91c>
    a6b6:	ea18 0f05 	tst.w	r8, r5
    a6ba:	e7f9      	b.n	a6b0 <_strtod_l+0x988>
    a6bc:	422a      	tst	r2, r5
    a6be:	e7a0      	b.n	a602 <_strtod_l+0x8da>
    a6c0:	9905      	ldr	r1, [sp, #20]
    a6c2:	9807      	ldr	r0, [sp, #28]
    a6c4:	f022 f98f 	bl	2c9e6 <__ratio>
    a6c8:	2200      	movs	r2, #0
    a6ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a6ce:	4604      	mov	r4, r0
    a6d0:	460d      	mov	r5, r1
    a6d2:	f7fe fcaf 	bl	9034 <__aeabi_dcmple>
    a6d6:	2800      	cmp	r0, #0
    a6d8:	d06d      	beq.n	a7b6 <_strtod_l+0xa8e>
    a6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a6dc:	2b00      	cmp	r3, #0
    a6de:	d178      	bne.n	a7d2 <_strtod_l+0xaaa>
    a6e0:	f1b8 0f00 	cmp.w	r8, #0
    a6e4:	d156      	bne.n	a794 <_strtod_l+0xa6c>
    a6e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a6ea:	2b00      	cmp	r3, #0
    a6ec:	d159      	bne.n	a7a2 <_strtod_l+0xa7a>
    a6ee:	2200      	movs	r2, #0
    a6f0:	4b3f      	ldr	r3, [pc, #252]	; (a7f0 <_strtod_l+0xac8>)
    a6f2:	4620      	mov	r0, r4
    a6f4:	4629      	mov	r1, r5
    a6f6:	f7fe fc93 	bl	9020 <__aeabi_dcmplt>
    a6fa:	2800      	cmp	r0, #0
    a6fc:	d158      	bne.n	a7b0 <_strtod_l+0xa88>
    a6fe:	4620      	mov	r0, r4
    a700:	4629      	mov	r1, r5
    a702:	2200      	movs	r2, #0
    a704:	4b3b      	ldr	r3, [pc, #236]	; (a7f4 <_strtod_l+0xacc>)
    a706:	f7fd fee3 	bl	84d0 <__aeabi_dmul>
    a70a:	4604      	mov	r4, r0
    a70c:	460d      	mov	r5, r1
    a70e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    a712:	9408      	str	r4, [sp, #32]
    a714:	9309      	str	r3, [sp, #36]	; 0x24
    a716:	4b34      	ldr	r3, [pc, #208]	; (a7e8 <_strtod_l+0xac0>)
    a718:	4a33      	ldr	r2, [pc, #204]	; (a7e8 <_strtod_l+0xac0>)
    a71a:	ea0b 0303 	and.w	r3, fp, r3
    a71e:	ea0b 0202 	and.w	r2, fp, r2
    a722:	9315      	str	r3, [sp, #84]	; 0x54
    a724:	4b34      	ldr	r3, [pc, #208]	; (a7f8 <_strtod_l+0xad0>)
    a726:	429a      	cmp	r2, r3
    a728:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    a72c:	f040 809e 	bne.w	a86c <_strtod_l+0xb44>
    a730:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
    a734:	4640      	mov	r0, r8
    a736:	4649      	mov	r1, r9
    a738:	f01b fcc8 	bl	260cc <__ulp>
    a73c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a740:	f7fd fec6 	bl	84d0 <__aeabi_dmul>
    a744:	4642      	mov	r2, r8
    a746:	464b      	mov	r3, r9
    a748:	f7fd fd0c 	bl	8164 <__adddf3>
    a74c:	460b      	mov	r3, r1
    a74e:	4926      	ldr	r1, [pc, #152]	; (a7e8 <_strtod_l+0xac0>)
    a750:	4680      	mov	r8, r0
    a752:	4a2a      	ldr	r2, [pc, #168]	; (a7fc <_strtod_l+0xad4>)
    a754:	4019      	ands	r1, r3
    a756:	4291      	cmp	r1, r2
    a758:	d954      	bls.n	a804 <_strtod_l+0xadc>
    a75a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a75c:	4b21      	ldr	r3, [pc, #132]	; (a7e4 <_strtod_l+0xabc>)
    a75e:	429a      	cmp	r2, r3
    a760:	d103      	bne.n	a76a <_strtod_l+0xa42>
    a762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a764:	3301      	adds	r3, #1
    a766:	f43f ad3c 	beq.w	a1e2 <_strtod_l+0x4ba>
    a76a:	f8df 9078 	ldr.w	r9, [pc, #120]	; a7e4 <_strtod_l+0xabc>
    a76e:	f04f 38ff 	mov.w	r8, #4294967295
    a772:	9918      	ldr	r1, [sp, #96]	; 0x60
    a774:	4650      	mov	r0, sl
    a776:	f01b f9d9 	bl	25b2c <_Bfree>
    a77a:	9906      	ldr	r1, [sp, #24]
    a77c:	4650      	mov	r0, sl
    a77e:	f01b f9d5 	bl	25b2c <_Bfree>
    a782:	9905      	ldr	r1, [sp, #20]
    a784:	4650      	mov	r0, sl
    a786:	f01b f9d1 	bl	25b2c <_Bfree>
    a78a:	9907      	ldr	r1, [sp, #28]
    a78c:	4650      	mov	r0, sl
    a78e:	f01b f9cd 	bl	25b2c <_Bfree>
    a792:	e5d5      	b.n	a340 <_strtod_l+0x618>
    a794:	f1b8 0f01 	cmp.w	r8, #1
    a798:	d103      	bne.n	a7a2 <_strtod_l+0xa7a>
    a79a:	f1b9 0f00 	cmp.w	r9, #0
    a79e:	f43f aed0 	beq.w	a542 <_strtod_l+0x81a>
    a7a2:	4c17      	ldr	r4, [pc, #92]	; (a800 <_strtod_l+0xad8>)
    a7a4:	2300      	movs	r3, #0
    a7a6:	4d12      	ldr	r5, [pc, #72]	; (a7f0 <_strtod_l+0xac8>)
    a7a8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a7ac:	2400      	movs	r4, #0
    a7ae:	e7b2      	b.n	a716 <_strtod_l+0x9ee>
    a7b0:	2400      	movs	r4, #0
    a7b2:	4d10      	ldr	r5, [pc, #64]	; (a7f4 <_strtod_l+0xacc>)
    a7b4:	e7ab      	b.n	a70e <_strtod_l+0x9e6>
    a7b6:	4b0f      	ldr	r3, [pc, #60]	; (a7f4 <_strtod_l+0xacc>)
    a7b8:	4620      	mov	r0, r4
    a7ba:	4629      	mov	r1, r5
    a7bc:	2200      	movs	r2, #0
    a7be:	f7fd fe87 	bl	84d0 <__aeabi_dmul>
    a7c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a7c4:	4604      	mov	r4, r0
    a7c6:	460d      	mov	r5, r1
    a7c8:	2b00      	cmp	r3, #0
    a7ca:	d0a0      	beq.n	a70e <_strtod_l+0x9e6>
    a7cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
    a7d0:	e7a1      	b.n	a716 <_strtod_l+0x9ee>
    a7d2:	4c07      	ldr	r4, [pc, #28]	; (a7f0 <_strtod_l+0xac8>)
    a7d4:	2300      	movs	r3, #0
    a7d6:	4625      	mov	r5, r4
    a7d8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a7dc:	461c      	mov	r4, r3
    a7de:	e79a      	b.n	a716 <_strtod_l+0x9ee>
    a7e0:	000fffff 	.word	0x000fffff
    a7e4:	7fefffff 	.word	0x7fefffff
    a7e8:	7ff00000 	.word	0x7ff00000
    a7ec:	39500000 	.word	0x39500000
    a7f0:	3ff00000 	.word	0x3ff00000
    a7f4:	3fe00000 	.word	0x3fe00000
    a7f8:	7fe00000 	.word	0x7fe00000
    a7fc:	7c9fffff 	.word	0x7c9fffff
    a800:	bff00000 	.word	0xbff00000
    a804:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    a808:	9b04      	ldr	r3, [sp, #16]
    a80a:	464e      	mov	r6, r9
    a80c:	2b00      	cmp	r3, #0
    a80e:	d1b0      	bne.n	a772 <_strtod_l+0xa4a>
    a810:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a814:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a816:	0d1b      	lsrs	r3, r3, #20
    a818:	051b      	lsls	r3, r3, #20
    a81a:	429a      	cmp	r2, r3
    a81c:	d1a9      	bne.n	a772 <_strtod_l+0xa4a>
    a81e:	4620      	mov	r0, r4
    a820:	4629      	mov	r1, r5
    a822:	f7fe fc83 	bl	912c <__aeabi_d2lz>
    a826:	f3c9 0613 	ubfx	r6, r9, #0, #20
    a82a:	f7fd fe23 	bl	8474 <__aeabi_l2d>
    a82e:	460b      	mov	r3, r1
    a830:	4602      	mov	r2, r0
    a832:	4629      	mov	r1, r5
    a834:	4620      	mov	r0, r4
    a836:	ea46 0608 	orr.w	r6, r6, r8
    a83a:	f7fd fc91 	bl	8160 <__aeabi_dsub>
    a83e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a840:	4604      	mov	r4, r0
    a842:	460d      	mov	r5, r1
    a844:	431e      	orrs	r6, r3
    a846:	d04a      	beq.n	a8de <_strtod_l+0xbb6>
    a848:	a32d      	add	r3, pc, #180	; (adr r3, a900 <_strtod_l+0xbd8>)
    a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a84e:	f7fe fbe7 	bl	9020 <__aeabi_dcmplt>
    a852:	2800      	cmp	r0, #0
    a854:	f47f accc 	bne.w	a1f0 <_strtod_l+0x4c8>
    a858:	4620      	mov	r0, r4
    a85a:	4629      	mov	r1, r5
    a85c:	a32a      	add	r3, pc, #168	; (adr r3, a908 <_strtod_l+0xbe0>)
    a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a862:	f7fe fbfb 	bl	905c <__aeabi_dcmpgt>
    a866:	2800      	cmp	r0, #0
    a868:	d083      	beq.n	a772 <_strtod_l+0xa4a>
    a86a:	e4c1      	b.n	a1f0 <_strtod_l+0x4c8>
    a86c:	9b04      	ldr	r3, [sp, #16]
    a86e:	b313      	cbz	r3, a8b6 <_strtod_l+0xb8e>
    a870:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a872:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a876:	d81e      	bhi.n	a8b6 <_strtod_l+0xb8e>
    a878:	4620      	mov	r0, r4
    a87a:	4629      	mov	r1, r5
    a87c:	a324      	add	r3, pc, #144	; (adr r3, a910 <_strtod_l+0xbe8>)
    a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a882:	f7fe fbd7 	bl	9034 <__aeabi_dcmple>
    a886:	b190      	cbz	r0, a8ae <_strtod_l+0xb86>
    a888:	4629      	mov	r1, r5
    a88a:	4620      	mov	r0, r4
    a88c:	f7fe fbf0 	bl	9070 <__aeabi_d2uiz>
    a890:	2801      	cmp	r0, #1
    a892:	bf38      	it	cc
    a894:	2001      	movcc	r0, #1
    a896:	f7fd fda1 	bl	83dc <__aeabi_ui2d>
    a89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a89c:	4604      	mov	r4, r0
    a89e:	460d      	mov	r5, r1
    a8a0:	b9d3      	cbnz	r3, a8d8 <_strtod_l+0xbb0>
    a8a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a8a6:	9012      	str	r0, [sp, #72]	; 0x48
    a8a8:	9313      	str	r3, [sp, #76]	; 0x4c
    a8aa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    a8ae:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    a8b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a8b4:	1a9f      	subs	r7, r3, r2
    a8b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a8ba:	f01b fc07 	bl	260cc <__ulp>
    a8be:	4602      	mov	r2, r0
    a8c0:	460b      	mov	r3, r1
    a8c2:	4630      	mov	r0, r6
    a8c4:	4639      	mov	r1, r7
    a8c6:	f7fd fe03 	bl	84d0 <__aeabi_dmul>
    a8ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a8ce:	f7fd fc49 	bl	8164 <__adddf3>
    a8d2:	4680      	mov	r8, r0
    a8d4:	4689      	mov	r9, r1
    a8d6:	e797      	b.n	a808 <_strtod_l+0xae0>
    a8d8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    a8dc:	e7e5      	b.n	a8aa <_strtod_l+0xb82>
    a8de:	a30e      	add	r3, pc, #56	; (adr r3, a918 <_strtod_l+0xbf0>)
    a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8e4:	f7fe fb9c 	bl	9020 <__aeabi_dcmplt>
    a8e8:	e7bd      	b.n	a866 <_strtod_l+0xb3e>
    a8ea:	2a65      	cmp	r2, #101	; 0x65
    a8ec:	f43f ab48 	beq.w	9f80 <_strtod_l+0x258>
    a8f0:	2a45      	cmp	r2, #69	; 0x45
    a8f2:	f43f ab45 	beq.w	9f80 <_strtod_l+0x258>
    a8f6:	2301      	movs	r3, #1
    a8f8:	f7ff bb7e 	b.w	9ff8 <_strtod_l+0x2d0>
    a8fc:	f3af 8000 	nop.w
    a900:	94a03595 	.word	0x94a03595
    a904:	3fdfffff 	.word	0x3fdfffff
    a908:	35afe535 	.word	0x35afe535
    a90c:	3fe00000 	.word	0x3fe00000
    a910:	ffc00000 	.word	0xffc00000
    a914:	41dfffff 	.word	0x41dfffff
    a918:	94a03595 	.word	0x94a03595
    a91c:	3fcfffff 	.word	0x3fcfffff

0000a920 <_dtoa_r>:
    a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a924:	4614      	mov	r4, r2
    a926:	b097      	sub	sp, #92	; 0x5c
    a928:	461d      	mov	r5, r3
    a92a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    a92c:	4683      	mov	fp, r0
    a92e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    a930:	e9cd 4504 	strd	r4, r5, [sp, #16]
    a934:	b97f      	cbnz	r7, a956 <_dtoa_r+0x36>
    a936:	2010      	movs	r0, #16
    a938:	f019 fb0c 	bl	23f54 <malloc>
    a93c:	4602      	mov	r2, r0
    a93e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    a942:	b920      	cbnz	r0, a94e <_dtoa_r+0x2e>
    a944:	4ba2      	ldr	r3, [pc, #648]	; (abd0 <_dtoa_r+0x2b0>)
    a946:	21ea      	movs	r1, #234	; 0xea
    a948:	48a2      	ldr	r0, [pc, #648]	; (abd4 <_dtoa_r+0x2b4>)
    a94a:	f01a fd3f 	bl	253cc <__assert_func>
    a94e:	e9c0 7701 	strd	r7, r7, [r0, #4]
    a952:	6007      	str	r7, [r0, #0]
    a954:	60c7      	str	r7, [r0, #12]
    a956:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a95a:	6819      	ldr	r1, [r3, #0]
    a95c:	b159      	cbz	r1, a976 <_dtoa_r+0x56>
    a95e:	685a      	ldr	r2, [r3, #4]
    a960:	2301      	movs	r3, #1
    a962:	4658      	mov	r0, fp
    a964:	4093      	lsls	r3, r2
    a966:	604a      	str	r2, [r1, #4]
    a968:	608b      	str	r3, [r1, #8]
    a96a:	f01b f8df 	bl	25b2c <_Bfree>
    a96e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a972:	2200      	movs	r2, #0
    a974:	601a      	str	r2, [r3, #0]
    a976:	1e2b      	subs	r3, r5, #0
    a978:	bfb7      	itett	lt
    a97a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    a97e:	2300      	movge	r3, #0
    a980:	2201      	movlt	r2, #1
    a982:	9305      	strlt	r3, [sp, #20]
    a984:	bfa8      	it	ge
    a986:	6033      	strge	r3, [r6, #0]
    a988:	9f05      	ldr	r7, [sp, #20]
    a98a:	4b93      	ldr	r3, [pc, #588]	; (abd8 <_dtoa_r+0x2b8>)
    a98c:	bfb8      	it	lt
    a98e:	6032      	strlt	r2, [r6, #0]
    a990:	43bb      	bics	r3, r7
    a992:	d119      	bne.n	a9c8 <_dtoa_r+0xa8>
    a994:	f242 730f 	movw	r3, #9999	; 0x270f
    a998:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a99a:	6013      	str	r3, [r2, #0]
    a99c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    a9a0:	4323      	orrs	r3, r4
    a9a2:	f000 85e0 	beq.w	b566 <_dtoa_r+0xc46>
    a9a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a9a8:	b953      	cbnz	r3, a9c0 <_dtoa_r+0xa0>
    a9aa:	4b8c      	ldr	r3, [pc, #560]	; (abdc <_dtoa_r+0x2bc>)
    a9ac:	e021      	b.n	a9f2 <_dtoa_r+0xd2>
    a9ae:	4b8c      	ldr	r3, [pc, #560]	; (abe0 <_dtoa_r+0x2c0>)
    a9b0:	9308      	str	r3, [sp, #32]
    a9b2:	3308      	adds	r3, #8
    a9b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a9b6:	6013      	str	r3, [r2, #0]
    a9b8:	9808      	ldr	r0, [sp, #32]
    a9ba:	b017      	add	sp, #92	; 0x5c
    a9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9c0:	4b86      	ldr	r3, [pc, #536]	; (abdc <_dtoa_r+0x2bc>)
    a9c2:	9308      	str	r3, [sp, #32]
    a9c4:	3303      	adds	r3, #3
    a9c6:	e7f5      	b.n	a9b4 <_dtoa_r+0x94>
    a9c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a9cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    a9d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a9d4:	2200      	movs	r2, #0
    a9d6:	2300      	movs	r3, #0
    a9d8:	f7fe fb18 	bl	900c <__aeabi_dcmpeq>
    a9dc:	4680      	mov	r8, r0
    a9de:	b150      	cbz	r0, a9f6 <_dtoa_r+0xd6>
    a9e0:	2301      	movs	r3, #1
    a9e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a9e4:	6013      	str	r3, [r2, #0]
    a9e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a9e8:	b113      	cbz	r3, a9f0 <_dtoa_r+0xd0>
    a9ea:	4b7e      	ldr	r3, [pc, #504]	; (abe4 <_dtoa_r+0x2c4>)
    a9ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a9ee:	6013      	str	r3, [r2, #0]
    a9f0:	4b7d      	ldr	r3, [pc, #500]	; (abe8 <_dtoa_r+0x2c8>)
    a9f2:	9308      	str	r3, [sp, #32]
    a9f4:	e7e0      	b.n	a9b8 <_dtoa_r+0x98>
    a9f6:	ab14      	add	r3, sp, #80	; 0x50
    a9f8:	f3c7 560a 	ubfx	r6, r7, #20, #11
    a9fc:	4658      	mov	r0, fp
    a9fe:	9301      	str	r3, [sp, #4]
    aa00:	ab15      	add	r3, sp, #84	; 0x54
    aa02:	9300      	str	r3, [sp, #0]
    aa04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    aa08:	f01b fbca 	bl	261a0 <__d2b>
    aa0c:	9003      	str	r0, [sp, #12]
    aa0e:	2e00      	cmp	r6, #0
    aa10:	d078      	beq.n	ab04 <_dtoa_r+0x1e4>
    aa12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aa14:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    aa18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    aa1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    aa20:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    aa24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aa28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    aa2c:	4619      	mov	r1, r3
    aa2e:	2200      	movs	r2, #0
    aa30:	4b6e      	ldr	r3, [pc, #440]	; (abec <_dtoa_r+0x2cc>)
    aa32:	f7fd fb95 	bl	8160 <__aeabi_dsub>
    aa36:	a360      	add	r3, pc, #384	; (adr r3, abb8 <_dtoa_r+0x298>)
    aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa3c:	f7fd fd48 	bl	84d0 <__aeabi_dmul>
    aa40:	a35f      	add	r3, pc, #380	; (adr r3, abc0 <_dtoa_r+0x2a0>)
    aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa46:	f7fd fb8d 	bl	8164 <__adddf3>
    aa4a:	4604      	mov	r4, r0
    aa4c:	460d      	mov	r5, r1
    aa4e:	4630      	mov	r0, r6
    aa50:	f7fd fcd4 	bl	83fc <__aeabi_i2d>
    aa54:	a35c      	add	r3, pc, #368	; (adr r3, abc8 <_dtoa_r+0x2a8>)
    aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa5a:	f7fd fd39 	bl	84d0 <__aeabi_dmul>
    aa5e:	4602      	mov	r2, r0
    aa60:	460b      	mov	r3, r1
    aa62:	4620      	mov	r0, r4
    aa64:	4629      	mov	r1, r5
    aa66:	f7fd fb7d 	bl	8164 <__adddf3>
    aa6a:	4604      	mov	r4, r0
    aa6c:	460d      	mov	r5, r1
    aa6e:	f7fe fb35 	bl	90dc <__aeabi_d2iz>
    aa72:	2200      	movs	r2, #0
    aa74:	4607      	mov	r7, r0
    aa76:	2300      	movs	r3, #0
    aa78:	4620      	mov	r0, r4
    aa7a:	4629      	mov	r1, r5
    aa7c:	f7fe fad0 	bl	9020 <__aeabi_dcmplt>
    aa80:	b140      	cbz	r0, aa94 <_dtoa_r+0x174>
    aa82:	4638      	mov	r0, r7
    aa84:	f7fd fcba 	bl	83fc <__aeabi_i2d>
    aa88:	4622      	mov	r2, r4
    aa8a:	462b      	mov	r3, r5
    aa8c:	f7fe fabe 	bl	900c <__aeabi_dcmpeq>
    aa90:	b900      	cbnz	r0, aa94 <_dtoa_r+0x174>
    aa92:	3f01      	subs	r7, #1
    aa94:	2f16      	cmp	r7, #22
    aa96:	d854      	bhi.n	ab42 <_dtoa_r+0x222>
    aa98:	4b55      	ldr	r3, [pc, #340]	; (abf0 <_dtoa_r+0x2d0>)
    aa9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    aa9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
    aaa6:	f7fe fabb 	bl	9020 <__aeabi_dcmplt>
    aaaa:	2800      	cmp	r0, #0
    aaac:	d04b      	beq.n	ab46 <_dtoa_r+0x226>
    aaae:	3f01      	subs	r7, #1
    aab0:	2300      	movs	r3, #0
    aab2:	9312      	str	r3, [sp, #72]	; 0x48
    aab4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    aab6:	1b9b      	subs	r3, r3, r6
    aab8:	1e5a      	subs	r2, r3, #1
    aaba:	bf4c      	ite	mi
    aabc:	f1c3 0301 	rsbmi	r3, r3, #1
    aac0:	2300      	movpl	r3, #0
    aac2:	920a      	str	r2, [sp, #40]	; 0x28
    aac4:	bf45      	ittet	mi
    aac6:	9306      	strmi	r3, [sp, #24]
    aac8:	2300      	movmi	r3, #0
    aaca:	9306      	strpl	r3, [sp, #24]
    aacc:	930a      	strmi	r3, [sp, #40]	; 0x28
    aace:	2f00      	cmp	r7, #0
    aad0:	db3b      	blt.n	ab4a <_dtoa_r+0x22a>
    aad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aad4:	970f      	str	r7, [sp, #60]	; 0x3c
    aad6:	443b      	add	r3, r7
    aad8:	930a      	str	r3, [sp, #40]	; 0x28
    aada:	2300      	movs	r3, #0
    aadc:	930b      	str	r3, [sp, #44]	; 0x2c
    aade:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aae0:	2b09      	cmp	r3, #9
    aae2:	f200 8089 	bhi.w	abf8 <_dtoa_r+0x2d8>
    aae6:	2b05      	cmp	r3, #5
    aae8:	bfc5      	ittet	gt
    aaea:	3b04      	subgt	r3, #4
    aaec:	2400      	movgt	r4, #0
    aaee:	2401      	movle	r4, #1
    aaf0:	9320      	strgt	r3, [sp, #128]	; 0x80
    aaf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aaf4:	3b02      	subs	r3, #2
    aaf6:	2b03      	cmp	r3, #3
    aaf8:	f200 8089 	bhi.w	ac0e <_dtoa_r+0x2ee>
    aafc:	e8df f003 	tbb	[pc, r3]
    ab00:	59383a2d 	.word	0x59383a2d
    ab04:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    ab08:	441e      	add	r6, r3
    ab0a:	f206 4332 	addw	r3, r6, #1074	; 0x432
    ab0e:	2b20      	cmp	r3, #32
    ab10:	bfc9      	itett	gt
    ab12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    ab16:	f1c3 0320 	rsble	r3, r3, #32
    ab1a:	409f      	lslgt	r7, r3
    ab1c:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    ab20:	bfd8      	it	le
    ab22:	fa04 f003 	lslle.w	r0, r4, r3
    ab26:	f106 36ff 	add.w	r6, r6, #4294967295
    ab2a:	bfc4      	itt	gt
    ab2c:	fa24 f303 	lsrgt.w	r3, r4, r3
    ab30:	ea47 0003 	orrgt.w	r0, r7, r3
    ab34:	f7fd fc52 	bl	83dc <__aeabi_ui2d>
    ab38:	2201      	movs	r2, #1
    ab3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    ab3e:	9213      	str	r2, [sp, #76]	; 0x4c
    ab40:	e774      	b.n	aa2c <_dtoa_r+0x10c>
    ab42:	2301      	movs	r3, #1
    ab44:	e7b5      	b.n	aab2 <_dtoa_r+0x192>
    ab46:	9012      	str	r0, [sp, #72]	; 0x48
    ab48:	e7b4      	b.n	aab4 <_dtoa_r+0x194>
    ab4a:	9b06      	ldr	r3, [sp, #24]
    ab4c:	1bdb      	subs	r3, r3, r7
    ab4e:	9306      	str	r3, [sp, #24]
    ab50:	427b      	negs	r3, r7
    ab52:	930b      	str	r3, [sp, #44]	; 0x2c
    ab54:	2300      	movs	r3, #0
    ab56:	930f      	str	r3, [sp, #60]	; 0x3c
    ab58:	e7c1      	b.n	aade <_dtoa_r+0x1be>
    ab5a:	2300      	movs	r3, #0
    ab5c:	930e      	str	r3, [sp, #56]	; 0x38
    ab5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ab60:	2b00      	cmp	r3, #0
    ab62:	dc57      	bgt.n	ac14 <_dtoa_r+0x2f4>
    ab64:	2301      	movs	r3, #1
    ab66:	4699      	mov	r9, r3
    ab68:	461a      	mov	r2, r3
    ab6a:	9309      	str	r3, [sp, #36]	; 0x24
    ab6c:	9221      	str	r2, [sp, #132]	; 0x84
    ab6e:	e00c      	b.n	ab8a <_dtoa_r+0x26a>
    ab70:	2301      	movs	r3, #1
    ab72:	e7f3      	b.n	ab5c <_dtoa_r+0x23c>
    ab74:	2300      	movs	r3, #0
    ab76:	930e      	str	r3, [sp, #56]	; 0x38
    ab78:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ab7a:	18fb      	adds	r3, r7, r3
    ab7c:	f103 0901 	add.w	r9, r3, #1
    ab80:	9309      	str	r3, [sp, #36]	; 0x24
    ab82:	464b      	mov	r3, r9
    ab84:	2b01      	cmp	r3, #1
    ab86:	bfb8      	it	lt
    ab88:	2301      	movlt	r3, #1
    ab8a:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    ab8e:	2100      	movs	r1, #0
    ab90:	2204      	movs	r2, #4
    ab92:	f102 0514 	add.w	r5, r2, #20
    ab96:	429d      	cmp	r5, r3
    ab98:	d940      	bls.n	ac1c <_dtoa_r+0x2fc>
    ab9a:	6041      	str	r1, [r0, #4]
    ab9c:	4658      	mov	r0, fp
    ab9e:	f01a ff85 	bl	25aac <_Balloc>
    aba2:	9008      	str	r0, [sp, #32]
    aba4:	2800      	cmp	r0, #0
    aba6:	d13c      	bne.n	ac22 <_dtoa_r+0x302>
    aba8:	4b12      	ldr	r3, [pc, #72]	; (abf4 <_dtoa_r+0x2d4>)
    abaa:	4602      	mov	r2, r0
    abac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    abb0:	e6ca      	b.n	a948 <_dtoa_r+0x28>
    abb2:	2301      	movs	r3, #1
    abb4:	e7df      	b.n	ab76 <_dtoa_r+0x256>
    abb6:	bf00      	nop
    abb8:	636f4361 	.word	0x636f4361
    abbc:	3fd287a7 	.word	0x3fd287a7
    abc0:	8b60c8b3 	.word	0x8b60c8b3
    abc4:	3fc68a28 	.word	0x3fc68a28
    abc8:	509f79fb 	.word	0x509f79fb
    abcc:	3fd34413 	.word	0x3fd34413
    abd0:	00034150 	.word	0x00034150
    abd4:	00034262 	.word	0x00034262
    abd8:	7ff00000 	.word	0x7ff00000
    abdc:	0003425e 	.word	0x0003425e
    abe0:	00034255 	.word	0x00034255
    abe4:	00033fc1 	.word	0x00033fc1
    abe8:	00033fc0 	.word	0x00033fc0
    abec:	3ff80000 	.word	0x3ff80000
    abf0:	0002d878 	.word	0x0002d878
    abf4:	000342d6 	.word	0x000342d6
    abf8:	2401      	movs	r4, #1
    abfa:	2300      	movs	r3, #0
    abfc:	940e      	str	r4, [sp, #56]	; 0x38
    abfe:	9320      	str	r3, [sp, #128]	; 0x80
    ac00:	f04f 33ff 	mov.w	r3, #4294967295
    ac04:	2200      	movs	r2, #0
    ac06:	4699      	mov	r9, r3
    ac08:	9309      	str	r3, [sp, #36]	; 0x24
    ac0a:	2312      	movs	r3, #18
    ac0c:	e7ae      	b.n	ab6c <_dtoa_r+0x24c>
    ac0e:	2301      	movs	r3, #1
    ac10:	930e      	str	r3, [sp, #56]	; 0x38
    ac12:	e7f5      	b.n	ac00 <_dtoa_r+0x2e0>
    ac14:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac16:	4699      	mov	r9, r3
    ac18:	9309      	str	r3, [sp, #36]	; 0x24
    ac1a:	e7b6      	b.n	ab8a <_dtoa_r+0x26a>
    ac1c:	3101      	adds	r1, #1
    ac1e:	0052      	lsls	r2, r2, #1
    ac20:	e7b7      	b.n	ab92 <_dtoa_r+0x272>
    ac22:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    ac26:	f1b9 0f0e 	cmp.w	r9, #14
    ac2a:	9a08      	ldr	r2, [sp, #32]
    ac2c:	601a      	str	r2, [r3, #0]
    ac2e:	d86f      	bhi.n	ad10 <_dtoa_r+0x3f0>
    ac30:	2c00      	cmp	r4, #0
    ac32:	d06d      	beq.n	ad10 <_dtoa_r+0x3f0>
    ac34:	2f00      	cmp	r7, #0
    ac36:	dd36      	ble.n	aca6 <_dtoa_r+0x386>
    ac38:	f007 020f 	and.w	r2, r7, #15
    ac3c:	4ba0      	ldr	r3, [pc, #640]	; (aec0 <_dtoa_r+0x5a0>)
    ac3e:	05f8      	lsls	r0, r7, #23
    ac40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ac44:	e9d3 3400 	ldrd	r3, r4, [r3]
    ac48:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    ac4c:	ea4f 1427 	mov.w	r4, r7, asr #4
    ac50:	d517      	bpl.n	ac82 <_dtoa_r+0x362>
    ac52:	4b9c      	ldr	r3, [pc, #624]	; (aec4 <_dtoa_r+0x5a4>)
    ac54:	f004 040f 	and.w	r4, r4, #15
    ac58:	f04f 0803 	mov.w	r8, #3
    ac5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    ac60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ac64:	f7fd fd5e 	bl	8724 <__aeabi_ddiv>
    ac68:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ac6c:	4d95      	ldr	r5, [pc, #596]	; (aec4 <_dtoa_r+0x5a4>)
    ac6e:	b95c      	cbnz	r4, ac88 <_dtoa_r+0x368>
    ac70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ac74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ac78:	f7fd fd54 	bl	8724 <__aeabi_ddiv>
    ac7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ac80:	e02b      	b.n	acda <_dtoa_r+0x3ba>
    ac82:	f04f 0802 	mov.w	r8, #2
    ac86:	e7f1      	b.n	ac6c <_dtoa_r+0x34c>
    ac88:	07e1      	lsls	r1, r4, #31
    ac8a:	d509      	bpl.n	aca0 <_dtoa_r+0x380>
    ac8c:	f108 0801 	add.w	r8, r8, #1
    ac90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    ac94:	e9d5 2300 	ldrd	r2, r3, [r5]
    ac98:	f7fd fc1a 	bl	84d0 <__aeabi_dmul>
    ac9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    aca0:	1064      	asrs	r4, r4, #1
    aca2:	3508      	adds	r5, #8
    aca4:	e7e3      	b.n	ac6e <_dtoa_r+0x34e>
    aca6:	f000 8107 	beq.w	aeb8 <_dtoa_r+0x598>
    acaa:	427c      	negs	r4, r7
    acac:	4b84      	ldr	r3, [pc, #528]	; (aec0 <_dtoa_r+0x5a0>)
    acae:	4d85      	ldr	r5, [pc, #532]	; (aec4 <_dtoa_r+0x5a4>)
    acb0:	f04f 0802 	mov.w	r8, #2
    acb4:	f004 020f 	and.w	r2, r4, #15
    acb8:	1124      	asrs	r4, r4, #4
    acba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    acbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
    acc6:	f7fd fc03 	bl	84d0 <__aeabi_dmul>
    acca:	2300      	movs	r3, #0
    accc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    acd0:	2c00      	cmp	r4, #0
    acd2:	f040 80e5 	bne.w	aea0 <_dtoa_r+0x580>
    acd6:	2b00      	cmp	r3, #0
    acd8:	d1d0      	bne.n	ac7c <_dtoa_r+0x35c>
    acda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    acdc:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    ace0:	2b00      	cmp	r3, #0
    ace2:	f000 814c 	beq.w	af7e <_dtoa_r+0x65e>
    ace6:	2200      	movs	r2, #0
    ace8:	4b77      	ldr	r3, [pc, #476]	; (aec8 <_dtoa_r+0x5a8>)
    acea:	4620      	mov	r0, r4
    acec:	4629      	mov	r1, r5
    acee:	f7fe f997 	bl	9020 <__aeabi_dcmplt>
    acf2:	2800      	cmp	r0, #0
    acf4:	f000 8143 	beq.w	af7e <_dtoa_r+0x65e>
    acf8:	f1b9 0f00 	cmp.w	r9, #0
    acfc:	f000 813f 	beq.w	af7e <_dtoa_r+0x65e>
    ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad02:	2b00      	cmp	r3, #0
    ad04:	f300 80e4 	bgt.w	aed0 <_dtoa_r+0x5b0>
    ad08:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ad0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ad10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ad12:	2b00      	cmp	r3, #0
    ad14:	db02      	blt.n	ad1c <_dtoa_r+0x3fc>
    ad16:	2f0e      	cmp	r7, #14
    ad18:	f340 8242 	ble.w	b1a0 <_dtoa_r+0x880>
    ad1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ad1e:	2a00      	cmp	r2, #0
    ad20:	f040 8267 	bne.w	b1f2 <_dtoa_r+0x8d2>
    ad24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ad26:	2500      	movs	r5, #0
    ad28:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ad2c:	f1b8 0f00 	cmp.w	r8, #0
    ad30:	d00d      	beq.n	ad4e <_dtoa_r+0x42e>
    ad32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad34:	2b00      	cmp	r3, #0
    ad36:	dd0a      	ble.n	ad4e <_dtoa_r+0x42e>
    ad38:	4543      	cmp	r3, r8
    ad3a:	9a06      	ldr	r2, [sp, #24]
    ad3c:	bfa8      	it	ge
    ad3e:	4643      	movge	r3, r8
    ad40:	1ad2      	subs	r2, r2, r3
    ad42:	eba8 0803 	sub.w	r8, r8, r3
    ad46:	9206      	str	r2, [sp, #24]
    ad48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ad4a:	1ad3      	subs	r3, r2, r3
    ad4c:	930a      	str	r3, [sp, #40]	; 0x28
    ad4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad50:	b30b      	cbz	r3, ad96 <_dtoa_r+0x476>
    ad52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ad54:	2b00      	cmp	r3, #0
    ad56:	f000 82a6 	beq.w	b2a6 <_dtoa_r+0x986>
    ad5a:	2c00      	cmp	r4, #0
    ad5c:	f000 82a1 	beq.w	b2a2 <_dtoa_r+0x982>
    ad60:	4629      	mov	r1, r5
    ad62:	4622      	mov	r2, r4
    ad64:	4658      	mov	r0, fp
    ad66:	f01b f855 	bl	25e14 <__pow5mult>
    ad6a:	9a03      	ldr	r2, [sp, #12]
    ad6c:	4601      	mov	r1, r0
    ad6e:	4605      	mov	r5, r0
    ad70:	4658      	mov	r0, fp
    ad72:	f01a ffa5 	bl	25cc0 <__multiply>
    ad76:	9903      	ldr	r1, [sp, #12]
    ad78:	4606      	mov	r6, r0
    ad7a:	4658      	mov	r0, fp
    ad7c:	f01a fed6 	bl	25b2c <_Bfree>
    ad80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad82:	1b1b      	subs	r3, r3, r4
    ad84:	930b      	str	r3, [sp, #44]	; 0x2c
    ad86:	f000 8291 	beq.w	b2ac <_dtoa_r+0x98c>
    ad8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ad8c:	4631      	mov	r1, r6
    ad8e:	4658      	mov	r0, fp
    ad90:	f01b f840 	bl	25e14 <__pow5mult>
    ad94:	9003      	str	r0, [sp, #12]
    ad96:	2101      	movs	r1, #1
    ad98:	4658      	mov	r0, fp
    ad9a:	f01a ff7b 	bl	25c94 <__i2b>
    ad9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ada0:	4604      	mov	r4, r0
    ada2:	2b00      	cmp	r3, #0
    ada4:	f000 8284 	beq.w	b2b0 <_dtoa_r+0x990>
    ada8:	461a      	mov	r2, r3
    adaa:	4601      	mov	r1, r0
    adac:	4658      	mov	r0, fp
    adae:	f01b f831 	bl	25e14 <__pow5mult>
    adb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    adb4:	4604      	mov	r4, r0
    adb6:	2b01      	cmp	r3, #1
    adb8:	dc03      	bgt.n	adc2 <_dtoa_r+0x4a2>
    adba:	9b04      	ldr	r3, [sp, #16]
    adbc:	2b00      	cmp	r3, #0
    adbe:	f000 827c 	beq.w	b2ba <_dtoa_r+0x99a>
    adc2:	2600      	movs	r6, #0
    adc4:	6923      	ldr	r3, [r4, #16]
    adc6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    adca:	6918      	ldr	r0, [r3, #16]
    adcc:	f021 fda1 	bl	2c912 <__hi0bits>
    add0:	f1c0 0020 	rsb	r0, r0, #32
    add4:	960f      	str	r6, [sp, #60]	; 0x3c
    add6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    add8:	4418      	add	r0, r3
    adda:	f010 001f 	ands.w	r0, r0, #31
    adde:	f000 8291 	beq.w	b304 <_dtoa_r+0x9e4>
    ade2:	f1c0 0320 	rsb	r3, r0, #32
    ade6:	2b04      	cmp	r3, #4
    ade8:	f340 8281 	ble.w	b2ee <_dtoa_r+0x9ce>
    adec:	f1c0 001c 	rsb	r0, r0, #28
    adf0:	9b06      	ldr	r3, [sp, #24]
    adf2:	4403      	add	r3, r0
    adf4:	4480      	add	r8, r0
    adf6:	9306      	str	r3, [sp, #24]
    adf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    adfa:	4403      	add	r3, r0
    adfc:	930a      	str	r3, [sp, #40]	; 0x28
    adfe:	9b06      	ldr	r3, [sp, #24]
    ae00:	2b00      	cmp	r3, #0
    ae02:	dd05      	ble.n	ae10 <_dtoa_r+0x4f0>
    ae04:	461a      	mov	r2, r3
    ae06:	9903      	ldr	r1, [sp, #12]
    ae08:	4658      	mov	r0, fp
    ae0a:	f01b f85d 	bl	25ec8 <__lshift>
    ae0e:	9003      	str	r0, [sp, #12]
    ae10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae12:	2b00      	cmp	r3, #0
    ae14:	dd05      	ble.n	ae22 <_dtoa_r+0x502>
    ae16:	4621      	mov	r1, r4
    ae18:	461a      	mov	r2, r3
    ae1a:	4658      	mov	r0, fp
    ae1c:	f01b f854 	bl	25ec8 <__lshift>
    ae20:	4604      	mov	r4, r0
    ae22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ae24:	2b00      	cmp	r3, #0
    ae26:	f000 8276 	beq.w	b316 <_dtoa_r+0x9f6>
    ae2a:	4621      	mov	r1, r4
    ae2c:	9803      	ldr	r0, [sp, #12]
    ae2e:	f021 fdbf 	bl	2c9b0 <__mcmp>
    ae32:	2800      	cmp	r0, #0
    ae34:	f280 826f 	bge.w	b316 <_dtoa_r+0x9f6>
    ae38:	2300      	movs	r3, #0
    ae3a:	220a      	movs	r2, #10
    ae3c:	9903      	ldr	r1, [sp, #12]
    ae3e:	4658      	mov	r0, fp
    ae40:	f01a fe96 	bl	25b70 <__multadd>
    ae44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae46:	1e7e      	subs	r6, r7, #1
    ae48:	9003      	str	r0, [sp, #12]
    ae4a:	2b00      	cmp	r3, #0
    ae4c:	f000 825c 	beq.w	b308 <_dtoa_r+0x9e8>
    ae50:	2300      	movs	r3, #0
    ae52:	4629      	mov	r1, r5
    ae54:	220a      	movs	r2, #10
    ae56:	4658      	mov	r0, fp
    ae58:	f01a fe8a 	bl	25b70 <__multadd>
    ae5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae5e:	4605      	mov	r5, r0
    ae60:	2b00      	cmp	r3, #0
    ae62:	dc03      	bgt.n	ae6c <_dtoa_r+0x54c>
    ae64:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ae66:	2b02      	cmp	r3, #2
    ae68:	f300 825e 	bgt.w	b328 <_dtoa_r+0xa08>
    ae6c:	f1b8 0f00 	cmp.w	r8, #0
    ae70:	dd05      	ble.n	ae7e <_dtoa_r+0x55e>
    ae72:	4629      	mov	r1, r5
    ae74:	4642      	mov	r2, r8
    ae76:	4658      	mov	r0, fp
    ae78:	f01b f826 	bl	25ec8 <__lshift>
    ae7c:	4605      	mov	r5, r0
    ae7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ae80:	2b00      	cmp	r3, #0
    ae82:	f000 82d0 	beq.w	b426 <_dtoa_r+0xb06>
    ae86:	6869      	ldr	r1, [r5, #4]
    ae88:	4658      	mov	r0, fp
    ae8a:	f01a fe0f 	bl	25aac <_Balloc>
    ae8e:	4607      	mov	r7, r0
    ae90:	2800      	cmp	r0, #0
    ae92:	f040 827f 	bne.w	b394 <_dtoa_r+0xa74>
    ae96:	4b0d      	ldr	r3, [pc, #52]	; (aecc <_dtoa_r+0x5ac>)
    ae98:	4602      	mov	r2, r0
    ae9a:	f240 21ea 	movw	r1, #746	; 0x2ea
    ae9e:	e553      	b.n	a948 <_dtoa_r+0x28>
    aea0:	07e2      	lsls	r2, r4, #31
    aea2:	d506      	bpl.n	aeb2 <_dtoa_r+0x592>
    aea4:	f108 0801 	add.w	r8, r8, #1
    aea8:	e9d5 2300 	ldrd	r2, r3, [r5]
    aeac:	f7fd fb10 	bl	84d0 <__aeabi_dmul>
    aeb0:	2301      	movs	r3, #1
    aeb2:	1064      	asrs	r4, r4, #1
    aeb4:	3508      	adds	r5, #8
    aeb6:	e70b      	b.n	acd0 <_dtoa_r+0x3b0>
    aeb8:	f04f 0802 	mov.w	r8, #2
    aebc:	e70d      	b.n	acda <_dtoa_r+0x3ba>
    aebe:	bf00      	nop
    aec0:	0002d878 	.word	0x0002d878
    aec4:	0002d850 	.word	0x0002d850
    aec8:	3ff00000 	.word	0x3ff00000
    aecc:	000342d6 	.word	0x000342d6
    aed0:	4620      	mov	r0, r4
    aed2:	2200      	movs	r2, #0
    aed4:	4bac      	ldr	r3, [pc, #688]	; (b188 <_dtoa_r+0x868>)
    aed6:	4629      	mov	r1, r5
    aed8:	f7fd fafa 	bl	84d0 <__aeabi_dmul>
    aedc:	1e7e      	subs	r6, r7, #1
    aede:	f108 0801 	add.w	r8, r8, #1
    aee2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    aee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    aee8:	4640      	mov	r0, r8
    aeea:	f7fd fa87 	bl	83fc <__aeabi_i2d>
    aeee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aef2:	f7fd faed 	bl	84d0 <__aeabi_dmul>
    aef6:	4ba5      	ldr	r3, [pc, #660]	; (b18c <_dtoa_r+0x86c>)
    aef8:	2200      	movs	r2, #0
    aefa:	f7fd f933 	bl	8164 <__adddf3>
    aefe:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    af02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    af06:	9311      	str	r3, [sp, #68]	; 0x44
    af08:	2c00      	cmp	r4, #0
    af0a:	d13b      	bne.n	af84 <_dtoa_r+0x664>
    af0c:	2200      	movs	r2, #0
    af0e:	4ba0      	ldr	r3, [pc, #640]	; (b190 <_dtoa_r+0x870>)
    af10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    af14:	f7fd f924 	bl	8160 <__aeabi_dsub>
    af18:	4602      	mov	r2, r0
    af1a:	460b      	mov	r3, r1
    af1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    af20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    af24:	f7fe f89a 	bl	905c <__aeabi_dcmpgt>
    af28:	2800      	cmp	r0, #0
    af2a:	f040 8157 	bne.w	b1dc <_dtoa_r+0x8bc>
    af2e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    af32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    af36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    af3a:	f7fe f871 	bl	9020 <__aeabi_dcmplt>
    af3e:	2800      	cmp	r0, #0
    af40:	f43f aee2 	beq.w	ad08 <_dtoa_r+0x3e8>
    af44:	2400      	movs	r4, #0
    af46:	4625      	mov	r5, r4
    af48:	9b21      	ldr	r3, [sp, #132]	; 0x84
    af4a:	f8dd a020 	ldr.w	sl, [sp, #32]
    af4e:	43de      	mvns	r6, r3
    af50:	f04f 0800 	mov.w	r8, #0
    af54:	4621      	mov	r1, r4
    af56:	4658      	mov	r0, fp
    af58:	f01a fde8 	bl	25b2c <_Bfree>
    af5c:	2d00      	cmp	r5, #0
    af5e:	f000 80a9 	beq.w	b0b4 <_dtoa_r+0x794>
    af62:	f1b8 0f00 	cmp.w	r8, #0
    af66:	d005      	beq.n	af74 <_dtoa_r+0x654>
    af68:	45a8      	cmp	r8, r5
    af6a:	d003      	beq.n	af74 <_dtoa_r+0x654>
    af6c:	4641      	mov	r1, r8
    af6e:	4658      	mov	r0, fp
    af70:	f01a fddc 	bl	25b2c <_Bfree>
    af74:	4629      	mov	r1, r5
    af76:	4658      	mov	r0, fp
    af78:	f01a fdd8 	bl	25b2c <_Bfree>
    af7c:	e09a      	b.n	b0b4 <_dtoa_r+0x794>
    af7e:	463e      	mov	r6, r7
    af80:	464c      	mov	r4, r9
    af82:	e7b1      	b.n	aee8 <_dtoa_r+0x5c8>
    af84:	4b83      	ldr	r3, [pc, #524]	; (b194 <_dtoa_r+0x874>)
    af86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    af8a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    af8e:	9b08      	ldr	r3, [sp, #32]
    af90:	441c      	add	r4, r3
    af92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af94:	2b00      	cmp	r3, #0
    af96:	d04a      	beq.n	b02e <_dtoa_r+0x70e>
    af98:	4602      	mov	r2, r0
    af9a:	460b      	mov	r3, r1
    af9c:	2000      	movs	r0, #0
    af9e:	497e      	ldr	r1, [pc, #504]	; (b198 <_dtoa_r+0x878>)
    afa0:	f7fd fbc0 	bl	8724 <__aeabi_ddiv>
    afa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    afa8:	f7fd f8da 	bl	8160 <__aeabi_dsub>
    afac:	f8dd a020 	ldr.w	sl, [sp, #32]
    afb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    afb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    afb8:	f7fe f890 	bl	90dc <__aeabi_d2iz>
    afbc:	4605      	mov	r5, r0
    afbe:	f7fd fa1d 	bl	83fc <__aeabi_i2d>
    afc2:	4602      	mov	r2, r0
    afc4:	3530      	adds	r5, #48	; 0x30
    afc6:	460b      	mov	r3, r1
    afc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    afcc:	f7fd f8c8 	bl	8160 <__aeabi_dsub>
    afd0:	f80a 5b01 	strb.w	r5, [sl], #1
    afd4:	4602      	mov	r2, r0
    afd6:	460b      	mov	r3, r1
    afd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    afdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    afe0:	f7fe f83c 	bl	905c <__aeabi_dcmpgt>
    afe4:	2800      	cmp	r0, #0
    afe6:	d165      	bne.n	b0b4 <_dtoa_r+0x794>
    afe8:	2000      	movs	r0, #0
    afea:	496c      	ldr	r1, [pc, #432]	; (b19c <_dtoa_r+0x87c>)
    afec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aff0:	f7fd f8b6 	bl	8160 <__aeabi_dsub>
    aff4:	4602      	mov	r2, r0
    aff6:	460b      	mov	r3, r1
    aff8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    affc:	f7fe f82e 	bl	905c <__aeabi_dcmpgt>
    b000:	2800      	cmp	r0, #0
    b002:	f040 810d 	bne.w	b220 <_dtoa_r+0x900>
    b006:	45a2      	cmp	sl, r4
    b008:	f000 80ea 	beq.w	b1e0 <_dtoa_r+0x8c0>
    b00c:	2200      	movs	r2, #0
    b00e:	4b5e      	ldr	r3, [pc, #376]	; (b188 <_dtoa_r+0x868>)
    b010:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b014:	f7fd fa5c 	bl	84d0 <__aeabi_dmul>
    b018:	2200      	movs	r2, #0
    b01a:	4b5b      	ldr	r3, [pc, #364]	; (b188 <_dtoa_r+0x868>)
    b01c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b020:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b024:	f7fd fa54 	bl	84d0 <__aeabi_dmul>
    b028:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b02c:	e7c2      	b.n	afb4 <_dtoa_r+0x694>
    b02e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b032:	f7fd fa4d 	bl	84d0 <__aeabi_dmul>
    b036:	46a0      	mov	r8, r4
    b038:	f8dd a020 	ldr.w	sl, [sp, #32]
    b03c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b040:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b044:	f7fe f84a 	bl	90dc <__aeabi_d2iz>
    b048:	4605      	mov	r5, r0
    b04a:	f7fd f9d7 	bl	83fc <__aeabi_i2d>
    b04e:	4602      	mov	r2, r0
    b050:	3530      	adds	r5, #48	; 0x30
    b052:	460b      	mov	r3, r1
    b054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b058:	f7fd f882 	bl	8160 <__aeabi_dsub>
    b05c:	f80a 5b01 	strb.w	r5, [sl], #1
    b060:	4602      	mov	r2, r0
    b062:	460b      	mov	r3, r1
    b064:	45a2      	cmp	sl, r4
    b066:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b06a:	f04f 0200 	mov.w	r2, #0
    b06e:	d123      	bne.n	b0b8 <_dtoa_r+0x798>
    b070:	4b49      	ldr	r3, [pc, #292]	; (b198 <_dtoa_r+0x878>)
    b072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b076:	f7fd f875 	bl	8164 <__adddf3>
    b07a:	4602      	mov	r2, r0
    b07c:	460b      	mov	r3, r1
    b07e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b082:	f7fd ffeb 	bl	905c <__aeabi_dcmpgt>
    b086:	2800      	cmp	r0, #0
    b088:	f040 80ca 	bne.w	b220 <_dtoa_r+0x900>
    b08c:	2000      	movs	r0, #0
    b08e:	4942      	ldr	r1, [pc, #264]	; (b198 <_dtoa_r+0x878>)
    b090:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b094:	f7fd f864 	bl	8160 <__aeabi_dsub>
    b098:	4602      	mov	r2, r0
    b09a:	460b      	mov	r3, r1
    b09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b0a0:	f7fd ffbe 	bl	9020 <__aeabi_dcmplt>
    b0a4:	b170      	cbz	r0, b0c4 <_dtoa_r+0x7a4>
    b0a6:	46c2      	mov	sl, r8
    b0a8:	f108 38ff 	add.w	r8, r8, #4294967295
    b0ac:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b0b0:	2b30      	cmp	r3, #48	; 0x30
    b0b2:	d0f8      	beq.n	b0a6 <_dtoa_r+0x786>
    b0b4:	4637      	mov	r7, r6
    b0b6:	e055      	b.n	b164 <_dtoa_r+0x844>
    b0b8:	4b33      	ldr	r3, [pc, #204]	; (b188 <_dtoa_r+0x868>)
    b0ba:	f7fd fa09 	bl	84d0 <__aeabi_dmul>
    b0be:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b0c2:	e7bd      	b.n	b040 <_dtoa_r+0x720>
    b0c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b0c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	f6ff ae28 	blt.w	ad24 <_dtoa_r+0x404>
    b0d4:	2f0e      	cmp	r7, #14
    b0d6:	f73f ae25 	bgt.w	ad24 <_dtoa_r+0x404>
    b0da:	4b2e      	ldr	r3, [pc, #184]	; (b194 <_dtoa_r+0x874>)
    b0dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b0e0:	e9d3 3400 	ldrd	r3, r4, [r3]
    b0e4:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b0e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	da02      	bge.n	b0f4 <_dtoa_r+0x7d4>
    b0ee:	f1b9 0f00 	cmp.w	r9, #0
    b0f2:	d064      	beq.n	b1be <_dtoa_r+0x89e>
    b0f4:	f8dd a020 	ldr.w	sl, [sp, #32]
    b0f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    b0fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b100:	4620      	mov	r0, r4
    b102:	4629      	mov	r1, r5
    b104:	f7fd fb0e 	bl	8724 <__aeabi_ddiv>
    b108:	f7fd ffe8 	bl	90dc <__aeabi_d2iz>
    b10c:	4606      	mov	r6, r0
    b10e:	f7fd f975 	bl	83fc <__aeabi_i2d>
    b112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b116:	f7fd f9db 	bl	84d0 <__aeabi_dmul>
    b11a:	4602      	mov	r2, r0
    b11c:	4620      	mov	r0, r4
    b11e:	f106 0430 	add.w	r4, r6, #48	; 0x30
    b122:	460b      	mov	r3, r1
    b124:	4629      	mov	r1, r5
    b126:	f7fd f81b 	bl	8160 <__aeabi_dsub>
    b12a:	f80a 4b01 	strb.w	r4, [sl], #1
    b12e:	9c08      	ldr	r4, [sp, #32]
    b130:	4602      	mov	r2, r0
    b132:	460b      	mov	r3, r1
    b134:	ebaa 0404 	sub.w	r4, sl, r4
    b138:	45a1      	cmp	r9, r4
    b13a:	f040 8082 	bne.w	b242 <_dtoa_r+0x922>
    b13e:	f7fd f811 	bl	8164 <__adddf3>
    b142:	4604      	mov	r4, r0
    b144:	460d      	mov	r5, r1
    b146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b14a:	f7fd ff87 	bl	905c <__aeabi_dcmpgt>
    b14e:	2800      	cmp	r0, #0
    b150:	d165      	bne.n	b21e <_dtoa_r+0x8fe>
    b152:	4620      	mov	r0, r4
    b154:	4629      	mov	r1, r5
    b156:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b15a:	f7fd ff57 	bl	900c <__aeabi_dcmpeq>
    b15e:	b108      	cbz	r0, b164 <_dtoa_r+0x844>
    b160:	07f3      	lsls	r3, r6, #31
    b162:	d45c      	bmi.n	b21e <_dtoa_r+0x8fe>
    b164:	9903      	ldr	r1, [sp, #12]
    b166:	4658      	mov	r0, fp
    b168:	f01a fce0 	bl	25b2c <_Bfree>
    b16c:	2300      	movs	r3, #0
    b16e:	3701      	adds	r7, #1
    b170:	f88a 3000 	strb.w	r3, [sl]
    b174:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b176:	601f      	str	r7, [r3, #0]
    b178:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b17a:	2b00      	cmp	r3, #0
    b17c:	f43f ac1c 	beq.w	a9b8 <_dtoa_r+0x98>
    b180:	f8c3 a000 	str.w	sl, [r3]
    b184:	e418      	b.n	a9b8 <_dtoa_r+0x98>
    b186:	bf00      	nop
    b188:	40240000 	.word	0x40240000
    b18c:	401c0000 	.word	0x401c0000
    b190:	40140000 	.word	0x40140000
    b194:	0002d878 	.word	0x0002d878
    b198:	3fe00000 	.word	0x3fe00000
    b19c:	3ff00000 	.word	0x3ff00000
    b1a0:	4ba2      	ldr	r3, [pc, #648]	; (b42c <_dtoa_r+0xb0c>)
    b1a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b1a6:	e9d3 3400 	ldrd	r3, r4, [r3]
    b1aa:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b1ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b1b0:	2b00      	cmp	r3, #0
    b1b2:	da9f      	bge.n	b0f4 <_dtoa_r+0x7d4>
    b1b4:	f1b9 0f00 	cmp.w	r9, #0
    b1b8:	dc9c      	bgt.n	b0f4 <_dtoa_r+0x7d4>
    b1ba:	f47f aec3 	bne.w	af44 <_dtoa_r+0x624>
    b1be:	2200      	movs	r2, #0
    b1c0:	4b9b      	ldr	r3, [pc, #620]	; (b430 <_dtoa_r+0xb10>)
    b1c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b1c6:	f7fd f983 	bl	84d0 <__aeabi_dmul>
    b1ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b1ce:	f7fd ff3b 	bl	9048 <__aeabi_dcmpge>
    b1d2:	4604      	mov	r4, r0
    b1d4:	2800      	cmp	r0, #0
    b1d6:	f47f aeb5 	bne.w	af44 <_dtoa_r+0x624>
    b1da:	463e      	mov	r6, r7
    b1dc:	4625      	mov	r5, r4
    b1de:	e0b4      	b.n	b34a <_dtoa_r+0xa2a>
    b1e0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b1e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b1e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	db01      	blt.n	b1f2 <_dtoa_r+0x8d2>
    b1ee:	2f0e      	cmp	r7, #14
    b1f0:	ddd6      	ble.n	b1a0 <_dtoa_r+0x880>
    b1f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b1f4:	2a01      	cmp	r2, #1
    b1f6:	dc36      	bgt.n	b266 <_dtoa_r+0x946>
    b1f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b1fa:	b382      	cbz	r2, b25e <_dtoa_r+0x93e>
    b1fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
    b200:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b202:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b206:	9a06      	ldr	r2, [sp, #24]
    b208:	2101      	movs	r1, #1
    b20a:	4658      	mov	r0, fp
    b20c:	441a      	add	r2, r3
    b20e:	9206      	str	r2, [sp, #24]
    b210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b212:	441a      	add	r2, r3
    b214:	920a      	str	r2, [sp, #40]	; 0x28
    b216:	f01a fd3d 	bl	25c94 <__i2b>
    b21a:	4605      	mov	r5, r0
    b21c:	e586      	b.n	ad2c <_dtoa_r+0x40c>
    b21e:	463e      	mov	r6, r7
    b220:	4653      	mov	r3, sl
    b222:	469a      	mov	sl, r3
    b224:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    b228:	2a39      	cmp	r2, #57	; 0x39
    b22a:	d106      	bne.n	b23a <_dtoa_r+0x91a>
    b22c:	9a08      	ldr	r2, [sp, #32]
    b22e:	429a      	cmp	r2, r3
    b230:	d1f7      	bne.n	b222 <_dtoa_r+0x902>
    b232:	2230      	movs	r2, #48	; 0x30
    b234:	9908      	ldr	r1, [sp, #32]
    b236:	3601      	adds	r6, #1
    b238:	700a      	strb	r2, [r1, #0]
    b23a:	781a      	ldrb	r2, [r3, #0]
    b23c:	3201      	adds	r2, #1
    b23e:	701a      	strb	r2, [r3, #0]
    b240:	e738      	b.n	b0b4 <_dtoa_r+0x794>
    b242:	2200      	movs	r2, #0
    b244:	4b7b      	ldr	r3, [pc, #492]	; (b434 <_dtoa_r+0xb14>)
    b246:	f7fd f943 	bl	84d0 <__aeabi_dmul>
    b24a:	2200      	movs	r2, #0
    b24c:	2300      	movs	r3, #0
    b24e:	4604      	mov	r4, r0
    b250:	460d      	mov	r5, r1
    b252:	f7fd fedb 	bl	900c <__aeabi_dcmpeq>
    b256:	2800      	cmp	r0, #0
    b258:	f43f af50 	beq.w	b0fc <_dtoa_r+0x7dc>
    b25c:	e782      	b.n	b164 <_dtoa_r+0x844>
    b25e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b260:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    b264:	e7cc      	b.n	b200 <_dtoa_r+0x8e0>
    b266:	f109 34ff 	add.w	r4, r9, #4294967295
    b26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b26c:	42a3      	cmp	r3, r4
    b26e:	db08      	blt.n	b282 <_dtoa_r+0x962>
    b270:	f1b9 0f00 	cmp.w	r9, #0
    b274:	eba3 0404 	sub.w	r4, r3, r4
    b278:	db0e      	blt.n	b298 <_dtoa_r+0x978>
    b27a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b27e:	464b      	mov	r3, r9
    b280:	e7c1      	b.n	b206 <_dtoa_r+0x8e6>
    b282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b284:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b286:	1ae3      	subs	r3, r4, r3
    b288:	940b      	str	r4, [sp, #44]	; 0x2c
    b28a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b28e:	2400      	movs	r4, #0
    b290:	441a      	add	r2, r3
    b292:	464b      	mov	r3, r9
    b294:	920f      	str	r2, [sp, #60]	; 0x3c
    b296:	e7b6      	b.n	b206 <_dtoa_r+0x8e6>
    b298:	9b06      	ldr	r3, [sp, #24]
    b29a:	eba3 0809 	sub.w	r8, r3, r9
    b29e:	2300      	movs	r3, #0
    b2a0:	e7b1      	b.n	b206 <_dtoa_r+0x8e6>
    b2a2:	9e03      	ldr	r6, [sp, #12]
    b2a4:	e571      	b.n	ad8a <_dtoa_r+0x46a>
    b2a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b2a8:	9903      	ldr	r1, [sp, #12]
    b2aa:	e570      	b.n	ad8e <_dtoa_r+0x46e>
    b2ac:	9603      	str	r6, [sp, #12]
    b2ae:	e572      	b.n	ad96 <_dtoa_r+0x476>
    b2b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b2b2:	2b01      	cmp	r3, #1
    b2b4:	dc17      	bgt.n	b2e6 <_dtoa_r+0x9c6>
    b2b6:	9b04      	ldr	r3, [sp, #16]
    b2b8:	b9ab      	cbnz	r3, b2e6 <_dtoa_r+0x9c6>
    b2ba:	9b05      	ldr	r3, [sp, #20]
    b2bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    b2c0:	b99b      	cbnz	r3, b2ea <_dtoa_r+0x9ca>
    b2c2:	9b05      	ldr	r3, [sp, #20]
    b2c4:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    b2c8:	0d36      	lsrs	r6, r6, #20
    b2ca:	0536      	lsls	r6, r6, #20
    b2cc:	b136      	cbz	r6, b2dc <_dtoa_r+0x9bc>
    b2ce:	9b06      	ldr	r3, [sp, #24]
    b2d0:	2601      	movs	r6, #1
    b2d2:	3301      	adds	r3, #1
    b2d4:	9306      	str	r3, [sp, #24]
    b2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b2d8:	3301      	adds	r3, #1
    b2da:	930a      	str	r3, [sp, #40]	; 0x28
    b2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b2de:	2b00      	cmp	r3, #0
    b2e0:	f47f ad70 	bne.w	adc4 <_dtoa_r+0x4a4>
    b2e4:	960f      	str	r6, [sp, #60]	; 0x3c
    b2e6:	2001      	movs	r0, #1
    b2e8:	e575      	b.n	add6 <_dtoa_r+0x4b6>
    b2ea:	2600      	movs	r6, #0
    b2ec:	e7f6      	b.n	b2dc <_dtoa_r+0x9bc>
    b2ee:	f43f ad86 	beq.w	adfe <_dtoa_r+0x4de>
    b2f2:	331c      	adds	r3, #28
    b2f4:	9a06      	ldr	r2, [sp, #24]
    b2f6:	441a      	add	r2, r3
    b2f8:	4498      	add	r8, r3
    b2fa:	9206      	str	r2, [sp, #24]
    b2fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b2fe:	441a      	add	r2, r3
    b300:	920a      	str	r2, [sp, #40]	; 0x28
    b302:	e57c      	b.n	adfe <_dtoa_r+0x4de>
    b304:	4603      	mov	r3, r0
    b306:	e7f4      	b.n	b2f2 <_dtoa_r+0x9d2>
    b308:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b30a:	2b00      	cmp	r3, #0
    b30c:	dc2b      	bgt.n	b366 <_dtoa_r+0xa46>
    b30e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b310:	2b02      	cmp	r3, #2
    b312:	dc09      	bgt.n	b328 <_dtoa_r+0xa08>
    b314:	e027      	b.n	b366 <_dtoa_r+0xa46>
    b316:	f1b9 0f00 	cmp.w	r9, #0
    b31a:	dc1d      	bgt.n	b358 <_dtoa_r+0xa38>
    b31c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b31e:	2b02      	cmp	r3, #2
    b320:	dd1a      	ble.n	b358 <_dtoa_r+0xa38>
    b322:	463e      	mov	r6, r7
    b324:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b328:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b32a:	2b00      	cmp	r3, #0
    b32c:	f47f ae0c 	bne.w	af48 <_dtoa_r+0x628>
    b330:	4621      	mov	r1, r4
    b332:	2205      	movs	r2, #5
    b334:	4658      	mov	r0, fp
    b336:	f01a fc1b 	bl	25b70 <__multadd>
    b33a:	4601      	mov	r1, r0
    b33c:	4604      	mov	r4, r0
    b33e:	9803      	ldr	r0, [sp, #12]
    b340:	f021 fb36 	bl	2c9b0 <__mcmp>
    b344:	2800      	cmp	r0, #0
    b346:	f77f adff 	ble.w	af48 <_dtoa_r+0x628>
    b34a:	f8dd a020 	ldr.w	sl, [sp, #32]
    b34e:	2331      	movs	r3, #49	; 0x31
    b350:	3601      	adds	r6, #1
    b352:	f80a 3b01 	strb.w	r3, [sl], #1
    b356:	e5fb      	b.n	af50 <_dtoa_r+0x630>
    b358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b35a:	463e      	mov	r6, r7
    b35c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b360:	2b00      	cmp	r3, #0
    b362:	f47f ad83 	bne.w	ae6c <_dtoa_r+0x54c>
    b366:	9f08      	ldr	r7, [sp, #32]
    b368:	4621      	mov	r1, r4
    b36a:	9803      	ldr	r0, [sp, #12]
    b36c:	f021 f8c1 	bl	2c4f2 <quorem>
    b370:	9b08      	ldr	r3, [sp, #32]
    b372:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b376:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b378:	f807 9b01 	strb.w	r9, [r7], #1
    b37c:	1afb      	subs	r3, r7, r3
    b37e:	429a      	cmp	r2, r3
    b380:	f340 80cb 	ble.w	b51a <_dtoa_r+0xbfa>
    b384:	2300      	movs	r3, #0
    b386:	220a      	movs	r2, #10
    b388:	9903      	ldr	r1, [sp, #12]
    b38a:	4658      	mov	r0, fp
    b38c:	f01a fbf0 	bl	25b70 <__multadd>
    b390:	9003      	str	r0, [sp, #12]
    b392:	e7e9      	b.n	b368 <_dtoa_r+0xa48>
    b394:	692a      	ldr	r2, [r5, #16]
    b396:	f105 010c 	add.w	r1, r5, #12
    b39a:	300c      	adds	r0, #12
    b39c:	3202      	adds	r2, #2
    b39e:	0092      	lsls	r2, r2, #2
    b3a0:	f020 fe94 	bl	2c0cc <memcpy>
    b3a4:	2201      	movs	r2, #1
    b3a6:	4639      	mov	r1, r7
    b3a8:	4658      	mov	r0, fp
    b3aa:	f01a fd8d 	bl	25ec8 <__lshift>
    b3ae:	9b08      	ldr	r3, [sp, #32]
    b3b0:	46a8      	mov	r8, r5
    b3b2:	4605      	mov	r5, r0
    b3b4:	f103 0a01 	add.w	sl, r3, #1
    b3b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    b3bc:	4413      	add	r3, r2
    b3be:	930a      	str	r3, [sp, #40]	; 0x28
    b3c0:	9b04      	ldr	r3, [sp, #16]
    b3c2:	f003 0301 	and.w	r3, r3, #1
    b3c6:	930b      	str	r3, [sp, #44]	; 0x2c
    b3c8:	f10a 33ff 	add.w	r3, sl, #4294967295
    b3cc:	4621      	mov	r1, r4
    b3ce:	9803      	ldr	r0, [sp, #12]
    b3d0:	9306      	str	r3, [sp, #24]
    b3d2:	f021 f88e 	bl	2c4f2 <quorem>
    b3d6:	4641      	mov	r1, r8
    b3d8:	9009      	str	r0, [sp, #36]	; 0x24
    b3da:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b3de:	9803      	ldr	r0, [sp, #12]
    b3e0:	f021 fae6 	bl	2c9b0 <__mcmp>
    b3e4:	462a      	mov	r2, r5
    b3e6:	4621      	mov	r1, r4
    b3e8:	4607      	mov	r7, r0
    b3ea:	4658      	mov	r0, fp
    b3ec:	f01a fdd8 	bl	25fa0 <__mdiff>
    b3f0:	68c2      	ldr	r2, [r0, #12]
    b3f2:	4601      	mov	r1, r0
    b3f4:	b302      	cbz	r2, b438 <_dtoa_r+0xb18>
    b3f6:	4658      	mov	r0, fp
    b3f8:	f01a fb98 	bl	25b2c <_Bfree>
    b3fc:	2f00      	cmp	r7, #0
    b3fe:	da3a      	bge.n	b476 <_dtoa_r+0xb56>
    b400:	2201      	movs	r2, #1
    b402:	9903      	ldr	r1, [sp, #12]
    b404:	4658      	mov	r0, fp
    b406:	f01a fd5f 	bl	25ec8 <__lshift>
    b40a:	4621      	mov	r1, r4
    b40c:	9003      	str	r0, [sp, #12]
    b40e:	f021 facf 	bl	2c9b0 <__mcmp>
    b412:	2800      	cmp	r0, #0
    b414:	dc03      	bgt.n	b41e <_dtoa_r+0xafe>
    b416:	d129      	bne.n	b46c <_dtoa_r+0xb4c>
    b418:	f019 0f01 	tst.w	r9, #1
    b41c:	d026      	beq.n	b46c <_dtoa_r+0xb4c>
    b41e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b422:	d11d      	bne.n	b460 <_dtoa_r+0xb40>
    b424:	e032      	b.n	b48c <_dtoa_r+0xb6c>
    b426:	4628      	mov	r0, r5
    b428:	e7c1      	b.n	b3ae <_dtoa_r+0xa8e>
    b42a:	bf00      	nop
    b42c:	0002d878 	.word	0x0002d878
    b430:	40140000 	.word	0x40140000
    b434:	40240000 	.word	0x40240000
    b438:	900e      	str	r0, [sp, #56]	; 0x38
    b43a:	9803      	ldr	r0, [sp, #12]
    b43c:	f021 fab8 	bl	2c9b0 <__mcmp>
    b440:	990e      	ldr	r1, [sp, #56]	; 0x38
    b442:	900c      	str	r0, [sp, #48]	; 0x30
    b444:	4658      	mov	r0, fp
    b446:	f01a fb71 	bl	25b2c <_Bfree>
    b44a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b44c:	bb5a      	cbnz	r2, b4a6 <_dtoa_r+0xb86>
    b44e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b450:	b953      	cbnz	r3, b468 <_dtoa_r+0xb48>
    b452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b454:	b943      	cbnz	r3, b468 <_dtoa_r+0xb48>
    b456:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b45a:	d017      	beq.n	b48c <_dtoa_r+0xb6c>
    b45c:	2f00      	cmp	r7, #0
    b45e:	dd05      	ble.n	b46c <_dtoa_r+0xb4c>
    b460:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b462:	f103 0931 	add.w	r9, r3, #49	; 0x31
    b466:	e001      	b.n	b46c <_dtoa_r+0xb4c>
    b468:	2f00      	cmp	r7, #0
    b46a:	da2a      	bge.n	b4c2 <_dtoa_r+0xba2>
    b46c:	f8dd a018 	ldr.w	sl, [sp, #24]
    b470:	f80a 9b01 	strb.w	r9, [sl], #1
    b474:	e56e      	b.n	af54 <_dtoa_r+0x634>
    b476:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b478:	433b      	orrs	r3, r7
    b47a:	d104      	bne.n	b486 <_dtoa_r+0xb66>
    b47c:	9b04      	ldr	r3, [sp, #16]
    b47e:	f003 0301 	and.w	r3, r3, #1
    b482:	2b00      	cmp	r3, #0
    b484:	d0bc      	beq.n	b400 <_dtoa_r+0xae0>
    b486:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b48a:	d136      	bne.n	b4fa <_dtoa_r+0xbda>
    b48c:	9f06      	ldr	r7, [sp, #24]
    b48e:	2339      	movs	r3, #57	; 0x39
    b490:	f807 3b01 	strb.w	r3, [r7], #1
    b494:	46ba      	mov	sl, r7
    b496:	3f01      	subs	r7, #1
    b498:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b49c:	2b39      	cmp	r3, #57	; 0x39
    b49e:	d05a      	beq.n	b556 <_dtoa_r+0xc36>
    b4a0:	3301      	adds	r3, #1
    b4a2:	703b      	strb	r3, [r7, #0]
    b4a4:	e556      	b.n	af54 <_dtoa_r+0x634>
    b4a6:	2f00      	cmp	r7, #0
    b4a8:	db06      	blt.n	b4b8 <_dtoa_r+0xb98>
    b4aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b4ac:	433b      	orrs	r3, r7
    b4ae:	d106      	bne.n	b4be <_dtoa_r+0xb9e>
    b4b0:	9b04      	ldr	r3, [sp, #16]
    b4b2:	f003 0301 	and.w	r3, r3, #1
    b4b6:	b913      	cbnz	r3, b4be <_dtoa_r+0xb9e>
    b4b8:	2a00      	cmp	r2, #0
    b4ba:	dca1      	bgt.n	b400 <_dtoa_r+0xae0>
    b4bc:	e7d6      	b.n	b46c <_dtoa_r+0xb4c>
    b4be:	2a00      	cmp	r2, #0
    b4c0:	dce1      	bgt.n	b486 <_dtoa_r+0xb66>
    b4c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b4c4:	4657      	mov	r7, sl
    b4c6:	f80a 9c01 	strb.w	r9, [sl, #-1]
    b4ca:	4553      	cmp	r3, sl
    b4cc:	d02e      	beq.n	b52c <_dtoa_r+0xc0c>
    b4ce:	2300      	movs	r3, #0
    b4d0:	220a      	movs	r2, #10
    b4d2:	9903      	ldr	r1, [sp, #12]
    b4d4:	4658      	mov	r0, fp
    b4d6:	f01a fb4b 	bl	25b70 <__multadd>
    b4da:	45a8      	cmp	r8, r5
    b4dc:	9003      	str	r0, [sp, #12]
    b4de:	f04f 0300 	mov.w	r3, #0
    b4e2:	f04f 020a 	mov.w	r2, #10
    b4e6:	4641      	mov	r1, r8
    b4e8:	4658      	mov	r0, fp
    b4ea:	d10b      	bne.n	b504 <_dtoa_r+0xbe4>
    b4ec:	f01a fb40 	bl	25b70 <__multadd>
    b4f0:	4680      	mov	r8, r0
    b4f2:	4605      	mov	r5, r0
    b4f4:	f10a 0a01 	add.w	sl, sl, #1
    b4f8:	e766      	b.n	b3c8 <_dtoa_r+0xaa8>
    b4fa:	f8dd a018 	ldr.w	sl, [sp, #24]
    b4fe:	f109 0901 	add.w	r9, r9, #1
    b502:	e7b5      	b.n	b470 <_dtoa_r+0xb50>
    b504:	f01a fb34 	bl	25b70 <__multadd>
    b508:	4629      	mov	r1, r5
    b50a:	4680      	mov	r8, r0
    b50c:	2300      	movs	r3, #0
    b50e:	220a      	movs	r2, #10
    b510:	4658      	mov	r0, fp
    b512:	f01a fb2d 	bl	25b70 <__multadd>
    b516:	4605      	mov	r5, r0
    b518:	e7ec      	b.n	b4f4 <_dtoa_r+0xbd4>
    b51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b51c:	f04f 0800 	mov.w	r8, #0
    b520:	2b00      	cmp	r3, #0
    b522:	bfcc      	ite	gt
    b524:	461f      	movgt	r7, r3
    b526:	2701      	movle	r7, #1
    b528:	9b08      	ldr	r3, [sp, #32]
    b52a:	441f      	add	r7, r3
    b52c:	2201      	movs	r2, #1
    b52e:	9903      	ldr	r1, [sp, #12]
    b530:	4658      	mov	r0, fp
    b532:	f01a fcc9 	bl	25ec8 <__lshift>
    b536:	4621      	mov	r1, r4
    b538:	9003      	str	r0, [sp, #12]
    b53a:	f021 fa39 	bl	2c9b0 <__mcmp>
    b53e:	2800      	cmp	r0, #0
    b540:	dca8      	bgt.n	b494 <_dtoa_r+0xb74>
    b542:	d102      	bne.n	b54a <_dtoa_r+0xc2a>
    b544:	f019 0f01 	tst.w	r9, #1
    b548:	d1a4      	bne.n	b494 <_dtoa_r+0xb74>
    b54a:	46ba      	mov	sl, r7
    b54c:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    b550:	2b30      	cmp	r3, #48	; 0x30
    b552:	d0fa      	beq.n	b54a <_dtoa_r+0xc2a>
    b554:	e4fe      	b.n	af54 <_dtoa_r+0x634>
    b556:	9b08      	ldr	r3, [sp, #32]
    b558:	42bb      	cmp	r3, r7
    b55a:	d19b      	bne.n	b494 <_dtoa_r+0xb74>
    b55c:	2331      	movs	r3, #49	; 0x31
    b55e:	9a08      	ldr	r2, [sp, #32]
    b560:	3601      	adds	r6, #1
    b562:	7013      	strb	r3, [r2, #0]
    b564:	e4f6      	b.n	af54 <_dtoa_r+0x634>
    b566:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b568:	2b00      	cmp	r3, #0
    b56a:	f47f aa20 	bne.w	a9ae <_dtoa_r+0x8e>
    b56e:	4b01      	ldr	r3, [pc, #4]	; (b574 <_dtoa_r+0xc54>)
    b570:	f7ff ba3f 	b.w	a9f2 <_dtoa_r+0xd2>
    b574:	00034255 	.word	0x00034255

0000b578 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    b578:	4603      	mov	r3, r0
    b57a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b57c:	2401      	movs	r4, #1
    b57e:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    b580:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b582:	409c      	lsls	r4, r3
    b584:	6843      	ldr	r3, [r0, #4]
    b586:	681b      	ldr	r3, [r3, #0]
    b588:	421c      	tst	r4, r3
    b58a:	d10e      	bne.n	b5aa <gpio_pin_get_dt+0x32>
    b58c:	490e      	ldr	r1, [pc, #56]	; (b5c8 <gpio_pin_get_dt+0x50>)
    b58e:	f240 43e4 	movw	r3, #1252	; 0x4e4
    b592:	4a0e      	ldr	r2, [pc, #56]	; (b5cc <gpio_pin_get_dt+0x54>)
    b594:	480e      	ldr	r0, [pc, #56]	; (b5d0 <gpio_pin_get_dt+0x58>)
    b596:	f01c f82c 	bl	275f2 <assert_print>
    b59a:	480e      	ldr	r0, [pc, #56]	; (b5d4 <gpio_pin_get_dt+0x5c>)
    b59c:	f01c f829 	bl	275f2 <assert_print>
    b5a0:	f240 41e4 	movw	r1, #1252	; 0x4e4
    b5a4:	4809      	ldr	r0, [pc, #36]	; (b5cc <gpio_pin_get_dt+0x54>)
    b5a6:	f01c f81d 	bl	275e4 <assert_post_action>
	const struct gpio_driver_data *const data =
    b5aa:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    b5ac:	6883      	ldr	r3, [r0, #8]
    b5ae:	a901      	add	r1, sp, #4
    b5b0:	685b      	ldr	r3, [r3, #4]
    b5b2:	4798      	blx	r3
	if (ret == 0) {
    b5b4:	b930      	cbnz	r0, b5c4 <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    b5b6:	682a      	ldr	r2, [r5, #0]
    b5b8:	9b01      	ldr	r3, [sp, #4]
    b5ba:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    b5bc:	4223      	tst	r3, r4
    b5be:	bf14      	ite	ne
    b5c0:	2001      	movne	r0, #1
    b5c2:	2000      	moveq	r0, #0
}
    b5c4:	b003      	add	sp, #12
    b5c6:	bd30      	pop	{r4, r5, pc}
    b5c8:	0002e6d7 	.word	0x0002e6d7
    b5cc:	0002e6a6 	.word	0x0002e6a6
    b5d0:	0002e715 	.word	0x0002e715
    b5d4:	0002e732 	.word	0x0002e732

0000b5d8 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
}

// DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    b5d8:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    b5da:	f01f fc1e 	bl	2ae1a <sys_clock_cycle_get_32>
    b5de:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    b5e0:	4804      	ldr	r0, [pc, #16]	; (b5f4 <digital_0_call_back+0x1c>)
    b5e2:	f01b fe44 	bl	2726e <printk>
	if (digital_value[0] <= DIGITAL_0_LIMIT)
    b5e6:	4a04      	ldr	r2, [pc, #16]	; (b5f8 <digital_0_call_back+0x20>)
    b5e8:	8813      	ldrh	r3, [r2, #0]
		digital_value[0]++;
    b5ea:	8813      	ldrh	r3, [r2, #0]
    b5ec:	3301      	adds	r3, #1
    b5ee:	b21b      	sxth	r3, r3
    b5f0:	8013      	strh	r3, [r2, #0]
}
    b5f2:	bd08      	pop	{r3, pc}
    b5f4:	0002e744 	.word	0x0002e744
    b5f8:	2002f798 	.word	0x2002f798

0000b5fc <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    b5fc:	b508      	push	{r3, lr}
    b5fe:	f01f fc0c 	bl	2ae1a <sys_clock_cycle_get_32>
    b602:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    b604:	4804      	ldr	r0, [pc, #16]	; (b618 <digital_1_call_back+0x1c>)
    b606:	f01b fe32 	bl	2726e <printk>
	if (digital_value[1] <= DIGITAL_0_LIMIT)
    b60a:	4a04      	ldr	r2, [pc, #16]	; (b61c <digital_1_call_back+0x20>)
    b60c:	8853      	ldrh	r3, [r2, #2]
		digital_value[1]++;
    b60e:	8853      	ldrh	r3, [r2, #2]
    b610:	3301      	adds	r3, #1
    b612:	b21b      	sxth	r3, r3
    b614:	8053      	strh	r3, [r2, #2]
}
    b616:	bd08      	pop	{r3, pc}
    b618:	0002e75f 	.word	0x0002e75f
    b61c:	2002f798 	.word	0x2002f798

0000b620 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    b620:	b508      	push	{r3, lr}
    b622:	f01f fbfa 	bl	2ae1a <sys_clock_cycle_get_32>
    b626:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    b628:	4804      	ldr	r0, [pc, #16]	; (b63c <digital_2_call_back+0x1c>)
    b62a:	f01b fe20 	bl	2726e <printk>
	if (digital_value[2] <= DIGITAL_0_LIMIT)
    b62e:	4a04      	ldr	r2, [pc, #16]	; (b640 <digital_2_call_back+0x20>)
    b630:	8893      	ldrh	r3, [r2, #4]
		digital_value[2]++;
    b632:	8893      	ldrh	r3, [r2, #4]
    b634:	3301      	adds	r3, #1
    b636:	b21b      	sxth	r3, r3
    b638:	8093      	strh	r3, [r2, #4]
}
    b63a:	bd08      	pop	{r3, pc}
    b63c:	0002e77a 	.word	0x0002e77a
    b640:	2002f798 	.word	0x2002f798

0000b644 <shoot_minute_save_thread>:
}

// THREADS

void shoot_minute_save_thread(void)
{
    b644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// each one minute this thread will shot.
	uint64_t actual_time = k_uptime_get() / 1000;
    b648:	f01b fbf7 	bl	26e3a <k_uptime_get>
    b64c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b650:	2300      	movs	r3, #0
    b652:	f7fd fbfd 	bl	8e50 <__aeabi_ldivmod>
	signed int h, m, s, last_minute;
	h = (actual_time / 3600);
    b656:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b65a:	2300      	movs	r3, #0
	uint64_t actual_time = k_uptime_get() / 1000;
    b65c:	460d      	mov	r5, r1
    b65e:	4606      	mov	r6, r0
	h = (actual_time / 3600);
    b660:	f7fd fc46 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time - (3600 * h)) / 60;
    b664:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b668:	fb03 f100 	mul.w	r1, r3, r0
    b66c:	1a70      	subs	r0, r6, r1
    b66e:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b672:	f04f 0300 	mov.w	r3, #0
    b676:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    b67a:	f7fd fc39 	bl	8ef0 <__aeabi_uldivmod>
    b67e:	4607      	mov	r7, r0
			if (h == 24)
			{
				h = 0;
			} // only up to 23:59:59h
			  // START RUN THE MINUTE ROUTINE
			printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n", h, m, s);
    b680:	f8df 9070 	ldr.w	r9, [pc, #112]	; b6f4 <shoot_minute_save_thread+0xb0>
		m = (actual_time - (3600 * h)) / 60;
    b684:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
		actual_time = k_uptime_get() / 1000;
    b688:	f01b fbd7 	bl	26e3a <k_uptime_get>
    b68c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b690:	2300      	movs	r3, #0
    b692:	f7fd fbdd 	bl	8e50 <__aeabi_ldivmod>
		h = (actual_time / 3600);
    b696:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b69a:	2300      	movs	r3, #0
		actual_time = k_uptime_get() / 1000;
    b69c:	4604      	mov	r4, r0
    b69e:	4688      	mov	r8, r1
		h = (actual_time / 3600);
    b6a0:	f7fd fc26 	bl	8ef0 <__aeabi_uldivmod>
		m = (actual_time - (3600 * h)) / 60;
    b6a4:	fb0a f600 	mul.w	r6, sl, r0
		h = (actual_time / 3600);
    b6a8:	4605      	mov	r5, r0
		m = (actual_time - (3600 * h)) / 60;
    b6aa:	1ba0      	subs	r0, r4, r6
    b6ac:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b6b0:	eb68 71e6 	sbc.w	r1, r8, r6, asr #31
    b6b4:	2300      	movs	r3, #0
    b6b6:	f7fd fc1b 	bl	8ef0 <__aeabi_uldivmod>
		if (m == (last_minute + 1))
    b6ba:	1c7a      	adds	r2, r7, #1
    b6bc:	4282      	cmp	r2, r0
    b6be:	d1e3      	bne.n	b688 <shoot_minute_save_thread+0x44>
			printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n", h, m, s);
    b6c0:	233c      	movs	r3, #60	; 0x3c
				last_minute = -1;
    b6c2:	2a3b      	cmp	r2, #59	; 0x3b
    b6c4:	bf14      	ite	ne
    b6c6:	4617      	movne	r7, r2
    b6c8:	f04f 37ff 	moveq.w	r7, #4294967295
		s = (actual_time - (3600 * h) - (m * 60));
    b6cc:	1ba4      	subs	r4, r4, r6
				h = 0;
    b6ce:	2d18      	cmp	r5, #24
			printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n", h, m, s);
    b6d0:	fb03 4312 	mls	r3, r3, r2, r4
    b6d4:	bf14      	ite	ne
    b6d6:	4629      	movne	r1, r5
    b6d8:	2100      	moveq	r1, #0
    b6da:	4648      	mov	r0, r9
    b6dc:	f01b fdc7 	bl	2726e <printk>

			feed_circular_buffer();
    b6e0:	f001 fb32 	bl	cd48 <feed_circular_buffer>
			print_current_position_cb(C_Buffer_Current_Position);
    b6e4:	4b04      	ldr	r3, [pc, #16]	; (b6f8 <shoot_minute_save_thread+0xb4>)
    b6e6:	6818      	ldr	r0, [r3, #0]
    b6e8:	f001 fc86 	bl	cff8 <print_current_position_cb>
			printk(" \n");
    b6ec:	4803      	ldr	r0, [pc, #12]	; (b6fc <shoot_minute_save_thread+0xb8>)
    b6ee:	f01b fdbe 	bl	2726e <printk>
    b6f2:	e7c7      	b.n	b684 <shoot_minute_save_thread+0x40>
    b6f4:	0002e795 	.word	0x0002e795
    b6f8:	2002f170 	.word	0x2002f170
    b6fc:	0002f0e5 	.word	0x0002f0e5

0000b700 <uart_2_work_handler>:
{
    b700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf2 = k_malloc(sizeof(*buf2)); // SIZE IS 92 BYTES
    b702:	206c      	movs	r0, #108	; 0x6c
    b704:	f020 fcc6 	bl	2c094 <k_malloc>
    b708:	4603      	mov	r3, r0
	if (buf2)
    b70a:	b148      	cbz	r0, b720 <uart_2_work_handler+0x20>
		buf2->len = 0;
    b70c:	2200      	movs	r2, #0
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b70e:	1d01      	adds	r1, r0, #4
		buf2->len = 0;
    b710:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b714:	480b      	ldr	r0, [pc, #44]	; (b744 <uart_2_work_handler+0x44>)
}
    b716:	b005      	add	sp, #20
    b718:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b71c:	f01b bbaa 	b.w	26e74 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    b720:	4a09      	ldr	r2, [pc, #36]	; (b748 <uart_2_work_handler+0x48>)
    b722:	9000      	str	r0, [sp, #0]
    b724:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b728:	4908      	ldr	r1, [pc, #32]	; (b74c <uart_2_work_handler+0x4c>)
    b72a:	2202      	movs	r2, #2
    b72c:	f01b fb93 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b730:	f240 6267 	movw	r2, #1639	; 0x667
    b734:	2300      	movs	r3, #0
    b736:	4806      	ldr	r0, [pc, #24]	; (b750 <uart_2_work_handler+0x50>)
}
    b738:	b005      	add	sp, #20
    b73a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b73e:	f016 b933 	b.w	219a8 <k_work_reschedule>
    b742:	bf00      	nop
    b744:	0002d0cc 	.word	0x0002d0cc
    b748:	0002e7c5 	.word	0x0002e7c5
    b74c:	0002d704 	.word	0x0002d704
    b750:	20009240 	.word	0x20009240

0000b754 <uart_work_handler>:
{
    b754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    b756:	206c      	movs	r0, #108	; 0x6c
    b758:	f020 fc9c 	bl	2c094 <k_malloc>
    b75c:	4603      	mov	r3, r0
	if (buf)
    b75e:	b148      	cbz	r0, b774 <uart_work_handler+0x20>
		buf->len = 0;
    b760:	2200      	movs	r2, #0
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b762:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    b764:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b768:	480b      	ldr	r0, [pc, #44]	; (b798 <uart_work_handler+0x44>)
}
    b76a:	b005      	add	sp, #20
    b76c:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b770:	f01b bb80 	b.w	26e74 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_1 receive buffer");
    b774:	4a09      	ldr	r2, [pc, #36]	; (b79c <uart_work_handler+0x48>)
    b776:	9000      	str	r0, [sp, #0]
    b778:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b77c:	4908      	ldr	r1, [pc, #32]	; (b7a0 <uart_work_handler+0x4c>)
    b77e:	2202      	movs	r2, #2
    b780:	f01b fb69 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b784:	f240 6267 	movw	r2, #1639	; 0x667
    b788:	2300      	movs	r3, #0
    b78a:	4806      	ldr	r0, [pc, #24]	; (b7a4 <uart_work_handler+0x50>)
}
    b78c:	b005      	add	sp, #20
    b78e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b792:	f016 b909 	b.w	219a8 <k_work_reschedule>
    b796:	bf00      	nop
    b798:	0002d0e4 	.word	0x0002d0e4
    b79c:	0002e7f0 	.word	0x0002e7f0
    b7a0:	0002d704 	.word	0x0002d704
    b7a4:	20009270 	.word	0x20009270

0000b7a8 <button3_thread>:
		print_current_position_cb_new(0);
	}
}

void button3_thread(void)
{
    b7a8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	while (1)
	{
		i = 0;
		k_sem_take(&button_3, K_FOREVER);
    b7aa:	4e09      	ldr	r6, [pc, #36]	; (b7d0 <button3_thread+0x28>)
		while (i <= C_Buffer_Current_Position)
    b7ac:	4d09      	ldr	r5, [pc, #36]	; (b7d4 <button3_thread+0x2c>)
		k_sem_take(&button_3, K_FOREVER);
    b7ae:	f04f 32ff 	mov.w	r2, #4294967295
    b7b2:	f04f 33ff 	mov.w	r3, #4294967295
    b7b6:	4630      	mov	r0, r6
    b7b8:	f01b fb6c 	bl	26e94 <k_sem_take.constprop.0.isra.0>
		i = 0;
    b7bc:	2400      	movs	r4, #0
		{
			print_current_position_cb(i);
    b7be:	4620      	mov	r0, r4
    b7c0:	f001 fc1a 	bl	cff8 <print_current_position_cb>
		while (i <= C_Buffer_Current_Position)
    b7c4:	682b      	ldr	r3, [r5, #0]
			i++;
    b7c6:	3401      	adds	r4, #1
		while (i <= C_Buffer_Current_Position)
    b7c8:	42a3      	cmp	r3, r4
    b7ca:	d3f0      	bcc.n	b7ae <button3_thread+0x6>
    b7cc:	e7f7      	b.n	b7be <button3_thread+0x16>
    b7ce:	bf00      	nop
    b7d0:	20008b78 	.word	0x20008b78
    b7d4:	2002f170 	.word	0x2002f170

0000b7d8 <button4_thread>:
		}
	}
}

void button4_thread(void)
{
    b7d8:	b570      	push	{r4, r5, r6, lr}
    b7da:	b086      	sub	sp, #24
	// print ISADORA PENATI FERREIRA
	char Name[] = "ISADORA PENATI FERREIRA";
    b7dc:	466a      	mov	r2, sp
    b7de:	4615      	mov	r5, r2
    b7e0:	4b0c      	ldr	r3, [pc, #48]	; (b814 <button4_thread+0x3c>)
    b7e2:	f103 0618 	add.w	r6, r3, #24
    b7e6:	4614      	mov	r4, r2
    b7e8:	6818      	ldr	r0, [r3, #0]
    b7ea:	6859      	ldr	r1, [r3, #4]
    b7ec:	3308      	adds	r3, #8
    b7ee:	c403      	stmia	r4!, {r0, r1}
    b7f0:	42b3      	cmp	r3, r6
    b7f2:	4622      	mov	r2, r4
    b7f4:	d1f7      	bne.n	b7e6 <button4_thread+0xe>
	*(packet_data+7) = 0x20;//SPACE
	*/

	while (1)
	{
		k_sem_take(&button_test, K_FOREVER);
    b7f6:	4c08      	ldr	r4, [pc, #32]	; (b818 <button4_thread+0x40>)
    b7f8:	4620      	mov	r0, r4
    b7fa:	f04f 32ff 	mov.w	r2, #4294967295
    b7fe:	f04f 33ff 	mov.w	r3, #4294967295
    b802:	f01b fb47 	bl	26e94 <k_sem_take.constprop.0.isra.0>
		bt_nus_send(NULL, Name, size);
    b806:	2218      	movs	r2, #24
    b808:	4629      	mov	r1, r5
    b80a:	2000      	movs	r0, #0
    b80c:	f005 fa66 	bl	10cdc <bt_nus_send>
	while (1)
    b810:	e7f2      	b.n	b7f8 <button4_thread+0x20>
    b812:	bf00      	nop
    b814:	0002e81b 	.word	0x0002e81b
    b818:	20008b90 	.word	0x20008b90

0000b81c <write_memory_thread>:
{
    b81c:	b510      	push	{r4, lr}
		k_sem_take(&save_memory, K_FOREVER);
    b81e:	4c07      	ldr	r4, [pc, #28]	; (b83c <write_memory_thread+0x20>)
    b820:	4620      	mov	r0, r4
    b822:	f04f 32ff 	mov.w	r2, #4294967295
    b826:	f04f 33ff 	mov.w	r3, #4294967295
    b82a:	f01b fb33 	bl	26e94 <k_sem_take.constprop.0.isra.0>
		flash_button2_counter();
    b82e:	f001 f951 	bl	cad4 <flash_button2_counter>
		print_current_position_cb_new(0);
    b832:	2000      	movs	r0, #0
    b834:	f001 fc44 	bl	d0c0 <print_current_position_cb_new>
	while (1)
    b838:	e7f2      	b.n	b820 <write_memory_thread+0x4>
    b83a:	bf00      	nop
    b83c:	20008bc0 	.word	0x20008bc0

0000b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    b840:	4603      	mov	r3, r0
    b842:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    b844:	6800      	ldr	r0, [r0, #0]
    b846:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b848:	2301      	movs	r3, #1
    b84a:	6845      	ldr	r5, [r0, #4]
    b84c:	408b      	lsls	r3, r1
    b84e:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    b850:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b852:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    b854:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b856:	d10e      	bne.n	b876 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    b858:	490e      	ldr	r1, [pc, #56]	; (b894 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    b85a:	f44f 731d 	mov.w	r3, #628	; 0x274
    b85e:	4a0e      	ldr	r2, [pc, #56]	; (b898 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    b860:	480e      	ldr	r0, [pc, #56]	; (b89c <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    b862:	f01b fec6 	bl	275f2 <assert_print>
    b866:	480e      	ldr	r0, [pc, #56]	; (b8a0 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    b868:	f01b fec3 	bl	275f2 <assert_print>
    b86c:	f44f 711d 	mov.w	r1, #628	; 0x274
    b870:	4809      	ldr	r0, [pc, #36]	; (b898 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    b872:	f01b feb7 	bl	275e4 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    b876:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    b878:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    b87a:	6994      	ldr	r4, [r2, #24]
    b87c:	bf18      	it	ne
    b87e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    b882:	46a4      	mov	ip, r4
}
    b884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    b888:	bf08      	it	eq
    b88a:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    b88e:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    b892:	4760      	bx	ip
    b894:	0002e6d7 	.word	0x0002e6d7
    b898:	0002e6a6 	.word	0x0002e6a6
    b89c:	0002e715 	.word	0x0002e715
    b8a0:	0002e732 	.word	0x0002e732

0000b8a4 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    b8a4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    b8a6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    b8a8:	b08a      	sub	sp, #40	; 0x28
    b8aa:	4604      	mov	r4, r0
    b8ac:	460e      	mov	r6, r1
    b8ae:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    b8b0:	2b03      	cmp	r3, #3
    b8b2:	d820      	bhi.n	b8f6 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    b8b4:	e8df f003 	tbb	[pc, r3]
    b8b8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    b8bc:	4911      	ldr	r1, [pc, #68]	; (b904 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    b8be:	4628      	mov	r0, r5
    b8c0:	f020 fd73 	bl	2c3aa <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    b8c4:	9505      	str	r5, [sp, #20]
    b8c6:	7863      	ldrb	r3, [r4, #1]
    b8c8:	211e      	movs	r1, #30
    b8ca:	9304      	str	r3, [sp, #16]
    b8cc:	78a3      	ldrb	r3, [r4, #2]
    b8ce:	4630      	mov	r0, r6
    b8d0:	9303      	str	r3, [sp, #12]
    b8d2:	78e3      	ldrb	r3, [r4, #3]
    b8d4:	4a0c      	ldr	r2, [pc, #48]	; (b908 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    b8d6:	9302      	str	r3, [sp, #8]
    b8d8:	7923      	ldrb	r3, [r4, #4]
    b8da:	9301      	str	r3, [sp, #4]
    b8dc:	7963      	ldrb	r3, [r4, #5]
    b8de:	9300      	str	r3, [sp, #0]
    b8e0:	79a3      	ldrb	r3, [r4, #6]
    b8e2:	f01b fcd1 	bl	27288 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    b8e6:	b00a      	add	sp, #40	; 0x28
    b8e8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    b8ea:	4908      	ldr	r1, [pc, #32]	; (b90c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    b8ec:	e7e7      	b.n	b8be <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    b8ee:	4908      	ldr	r1, [pc, #32]	; (b910 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    b8f0:	e7e5      	b.n	b8be <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    b8f2:	4908      	ldr	r1, [pc, #32]	; (b914 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    b8f4:	e7e3      	b.n	b8be <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    b8f6:	210a      	movs	r1, #10
    b8f8:	4628      	mov	r0, r5
    b8fa:	4a07      	ldr	r2, [pc, #28]	; (b918 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    b8fc:	f01b fcc4 	bl	27288 <snprintk>
		break;
    b900:	e7e0      	b.n	b8c4 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    b902:	bf00      	nop
    b904:	0002e833 	.word	0x0002e833
    b908:	0002e855 	.word	0x0002e855
    b90c:	0002e83a 	.word	0x0002e83a
    b910:	0002e841 	.word	0x0002e841
    b914:	0002e84b 	.word	0x0002e84b
    b918:	0003205d 	.word	0x0003205d

0000b91c <security_changed>:
{
    b91c:	b570      	push	{r4, r5, r6, lr}
    b91e:	4614      	mov	r4, r2
    b920:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b922:	ae06      	add	r6, sp, #24
{
    b924:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b926:	f01d fb8c 	bl	29042 <bt_conn_get_dst>
    b92a:	4631      	mov	r1, r6
    b92c:	f7ff ffba 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err)
    b930:	b96c      	cbnz	r4, b94e <security_changed+0x32>
		LOG_INF("Security changed: %s level %u", addr, level);
    b932:	4b0e      	ldr	r3, [pc, #56]	; (b96c <security_changed+0x50>)
    b934:	2203      	movs	r2, #3
    b936:	e9cd 4301 	strd	r4, r3, [sp, #4]
    b93a:	4620      	mov	r0, r4
    b93c:	4623      	mov	r3, r4
    b93e:	e9cd 6503 	strd	r6, r5, [sp, #12]
    b942:	490b      	ldr	r1, [pc, #44]	; (b970 <security_changed+0x54>)
    b944:	9400      	str	r4, [sp, #0]
    b946:	f01b fa86 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
}
    b94a:	b00e      	add	sp, #56	; 0x38
    b94c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    b94e:	4b09      	ldr	r3, [pc, #36]	; (b974 <security_changed+0x58>)
    b950:	2202      	movs	r2, #2
    b952:	9302      	str	r3, [sp, #8]
    b954:	2300      	movs	r3, #0
    b956:	e9cd 5404 	strd	r5, r4, [sp, #16]
    b95a:	4618      	mov	r0, r3
    b95c:	e9cd 3300 	strd	r3, r3, [sp]
    b960:	4903      	ldr	r1, [pc, #12]	; (b970 <security_changed+0x54>)
    b962:	9603      	str	r6, [sp, #12]
    b964:	f01b fa77 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
}
    b968:	e7ef      	b.n	b94a <security_changed+0x2e>
    b96a:	bf00      	nop
    b96c:	0002e878 	.word	0x0002e878
    b970:	0002d704 	.word	0x0002d704
    b974:	0002e896 	.word	0x0002e896

0000b978 <pairing_failed>:
{
    b978:	b530      	push	{r4, r5, lr}
    b97a:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b97c:	ad06      	add	r5, sp, #24
{
    b97e:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b980:	f01d fb5f 	bl	29042 <bt_conn_get_dst>
    b984:	4629      	mov	r1, r5
    b986:	f7ff ff8d 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    b98a:	4b07      	ldr	r3, [pc, #28]	; (b9a8 <pairing_failed+0x30>)
    b98c:	2203      	movs	r2, #3
    b98e:	9302      	str	r3, [sp, #8]
    b990:	2300      	movs	r3, #0
    b992:	e9cd 5403 	strd	r5, r4, [sp, #12]
    b996:	4618      	mov	r0, r3
    b998:	e9cd 3300 	strd	r3, r3, [sp]
    b99c:	4903      	ldr	r1, [pc, #12]	; (b9ac <pairing_failed+0x34>)
    b99e:	f01b fa5a 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
}
    b9a2:	b00f      	add	sp, #60	; 0x3c
    b9a4:	bd30      	pop	{r4, r5, pc}
    b9a6:	bf00      	nop
    b9a8:	0002e8ba 	.word	0x0002e8ba
    b9ac:	0002d704 	.word	0x0002d704

0000b9b0 <pairing_complete>:
{
    b9b0:	b530      	push	{r4, r5, lr}
    b9b2:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b9b4:	ad06      	add	r5, sp, #24
{
    b9b6:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b9b8:	f01d fb43 	bl	29042 <bt_conn_get_dst>
    b9bc:	4629      	mov	r1, r5
    b9be:	f7ff ff71 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    b9c2:	4b07      	ldr	r3, [pc, #28]	; (b9e0 <pairing_complete+0x30>)
    b9c4:	2203      	movs	r2, #3
    b9c6:	9302      	str	r3, [sp, #8]
    b9c8:	2300      	movs	r3, #0
    b9ca:	e9cd 5403 	strd	r5, r4, [sp, #12]
    b9ce:	4618      	mov	r0, r3
    b9d0:	e9cd 3300 	strd	r3, r3, [sp]
    b9d4:	4903      	ldr	r1, [pc, #12]	; (b9e4 <pairing_complete+0x34>)
    b9d6:	f01b fa3e 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
}
    b9da:	b00f      	add	sp, #60	; 0x3c
    b9dc:	bd30      	pop	{r4, r5, pc}
    b9de:	bf00      	nop
    b9e0:	0002e8dd 	.word	0x0002e8dd
    b9e4:	0002d704 	.word	0x0002d704

0000b9e8 <auth_cancel>:
{
    b9e8:	b510      	push	{r4, lr}
    b9ea:	b08c      	sub	sp, #48	; 0x30
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    b9ec:	ac04      	add	r4, sp, #16
    b9ee:	f01d fb28 	bl	29042 <bt_conn_get_dst>
    b9f2:	4621      	mov	r1, r4
    b9f4:	f7ff ff56 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    b9f8:	4b06      	ldr	r3, [pc, #24]	; (ba14 <auth_cancel+0x2c>)
    b9fa:	2203      	movs	r2, #3
    b9fc:	9302      	str	r3, [sp, #8]
    b9fe:	2300      	movs	r3, #0
    ba00:	4905      	ldr	r1, [pc, #20]	; (ba18 <auth_cancel+0x30>)
    ba02:	4618      	mov	r0, r3
    ba04:	e9cd 3300 	strd	r3, r3, [sp]
    ba08:	9403      	str	r4, [sp, #12]
    ba0a:	f01b fa24 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
}
    ba0e:	b00c      	add	sp, #48	; 0x30
    ba10:	bd10      	pop	{r4, pc}
    ba12:	bf00      	nop
    ba14:	0002e8ff 	.word	0x0002e8ff
    ba18:	0002d704 	.word	0x0002d704

0000ba1c <auth_passkey_display>:
{
    ba1c:	b530      	push	{r4, r5, lr}
    ba1e:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ba20:	ad06      	add	r5, sp, #24
{
    ba22:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ba24:	f01d fb0d 	bl	29042 <bt_conn_get_dst>
    ba28:	4629      	mov	r1, r5
    ba2a:	f7ff ff3b 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ba2e:	4b07      	ldr	r3, [pc, #28]	; (ba4c <auth_passkey_display+0x30>)
    ba30:	2203      	movs	r2, #3
    ba32:	9302      	str	r3, [sp, #8]
    ba34:	2300      	movs	r3, #0
    ba36:	e9cd 5403 	strd	r5, r4, [sp, #12]
    ba3a:	4618      	mov	r0, r3
    ba3c:	e9cd 3300 	strd	r3, r3, [sp]
    ba40:	4903      	ldr	r1, [pc, #12]	; (ba50 <auth_passkey_display+0x34>)
    ba42:	f01b fa08 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
}
    ba46:	b00f      	add	sp, #60	; 0x3c
    ba48:	bd30      	pop	{r4, r5, pc}
    ba4a:	bf00      	nop
    ba4c:	0002e915 	.word	0x0002e915
    ba50:	0002d704 	.word	0x0002d704

0000ba54 <auth_passkey_confirm>:
{
    ba54:	b570      	push	{r4, r5, r6, lr}
    ba56:	b08e      	sub	sp, #56	; 0x38
    ba58:	460c      	mov	r4, r1
    ba5a:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    ba5c:	f009 fb64 	bl	15128 <bt_conn_ref>
    ba60:	4b11      	ldr	r3, [pc, #68]	; (baa8 <auth_passkey_confirm+0x54>)
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ba62:	ae06      	add	r6, sp, #24
	auth_conn = bt_conn_ref(conn);
    ba64:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ba66:	4628      	mov	r0, r5
    ba68:	f01d faeb 	bl	29042 <bt_conn_get_dst>
    ba6c:	4631      	mov	r1, r6
    ba6e:	f7ff ff19 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ba72:	e9cd 6403 	strd	r6, r4, [sp, #12]
    ba76:	2400      	movs	r4, #0
    ba78:	4d0c      	ldr	r5, [pc, #48]	; (baac <auth_passkey_confirm+0x58>)
    ba7a:	4b0d      	ldr	r3, [pc, #52]	; (bab0 <auth_passkey_confirm+0x5c>)
    ba7c:	4629      	mov	r1, r5
    ba7e:	4620      	mov	r0, r4
    ba80:	9302      	str	r3, [sp, #8]
    ba82:	2203      	movs	r2, #3
    ba84:	4623      	mov	r3, r4
    ba86:	e9cd 4400 	strd	r4, r4, [sp]
    ba8a:	f01b f9e4 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    ba8e:	4b09      	ldr	r3, [pc, #36]	; (bab4 <auth_passkey_confirm+0x60>)
    ba90:	2203      	movs	r2, #3
    ba92:	e9cd 4301 	strd	r4, r3, [sp, #4]
    ba96:	4629      	mov	r1, r5
    ba98:	4623      	mov	r3, r4
    ba9a:	4620      	mov	r0, r4
    ba9c:	9400      	str	r4, [sp, #0]
    ba9e:	f01b f9da 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
}
    baa2:	b00e      	add	sp, #56	; 0x38
    baa4:	bd70      	pop	{r4, r5, r6, pc}
    baa6:	bf00      	nop
    baa8:	20009ebc 	.word	0x20009ebc
    baac:	0002d704 	.word	0x0002d704
    bab0:	0002e915 	.word	0x0002e915
    bab4:	0002e92a 	.word	0x0002e92a

0000bab8 <bt_receive_cb>:
{
    bab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    babc:	2400      	movs	r4, #0
{
    babe:	4605      	mov	r5, r0
    bac0:	b088      	sub	sp, #32
    bac2:	460f      	mov	r7, r1
    bac4:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    bac6:	4621      	mov	r1, r4
    bac8:	221a      	movs	r2, #26
    baca:	a801      	add	r0, sp, #4
    bacc:	9400      	str	r4, [sp, #0]
    bace:	f020 fb37 	bl	2c140 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    bad2:	4628      	mov	r0, r5
    bad4:	f01d fab5 	bl	29042 <bt_conn_get_dst>
    bad8:	4669      	mov	r1, sp
    bada:	f7ff fee3 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    bade:	4669      	mov	r1, sp
    bae0:	481f      	ldr	r0, [pc, #124]	; (bb60 <bt_receive_cb+0xa8>)
    bae2:	f019 f8bf 	bl	24c64 <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bae6:	f8df 807c 	ldr.w	r8, [pc, #124]	; bb64 <bt_receive_cb+0xac>
			k_fifo_put(&fifo_uart_tx_data, tx);
    baea:	f8df 907c 	ldr.w	r9, [pc, #124]	; bb68 <bt_receive_cb+0xb0>
	for (uint16_t pos = 0; pos != len;)
    baee:	42b4      	cmp	r4, r6
    baf0:	d007      	beq.n	bb02 <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    baf2:	206c      	movs	r0, #108	; 0x6c
    baf4:	f020 face 	bl	2c094 <k_malloc>
		if (!tx)
    baf8:	4605      	mov	r5, r0
    bafa:	b928      	cbnz	r0, bb08 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    bafc:	481b      	ldr	r0, [pc, #108]	; (bb6c <bt_receive_cb+0xb4>)
    bafe:	f019 f8b1 	bl	24c64 <iprintf>
}
    bb02:	b008      	add	sp, #32
    bb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size)
    bb08:	1b32      	subs	r2, r6, r4
    bb0a:	2a63      	cmp	r2, #99	; 0x63
			tx->len = tx_data_size;
    bb0c:	bf8c      	ite	hi
    bb0e:	2263      	movhi	r2, #99	; 0x63
			tx->len = (len - pos);
    bb10:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    bb12:	f100 0a04 	add.w	sl, r0, #4
    bb16:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bb1a:	1939      	adds	r1, r7, r4
    bb1c:	4650      	mov	r0, sl
    bb1e:	f020 fad5 	bl	2c0cc <memcpy>
		pos += tx->len;
    bb22:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    bb26:	441c      	add	r4, r3
    bb28:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r'))
    bb2a:	42a6      	cmp	r6, r4
    bb2c:	d10a      	bne.n	bb44 <bt_receive_cb+0x8c>
    bb2e:	19ba      	adds	r2, r7, r6
    bb30:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    bb34:	2a0d      	cmp	r2, #13
    bb36:	d105      	bne.n	bb44 <bt_receive_cb+0x8c>
			tx->data[tx->len] = '\n';
    bb38:	210a      	movs	r1, #10
    bb3a:	18ea      	adds	r2, r5, r3
			tx->len++;
    bb3c:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    bb3e:	7111      	strb	r1, [r2, #4]
			tx->len++;
    bb40:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bb44:	4651      	mov	r1, sl
    bb46:	4640      	mov	r0, r8
    bb48:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
    bb4c:	f01b f99a 	bl	26e84 <uart_tx.constprop.0>
		if (err)
    bb50:	2800      	cmp	r0, #0
    bb52:	d0cc      	beq.n	baee <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    bb54:	4629      	mov	r1, r5
    bb56:	4648      	mov	r0, r9
    bb58:	f020 f8e8 	bl	2bd2c <k_queue_append>
    bb5c:	e7c7      	b.n	baee <bt_receive_cb+0x36>
    bb5e:	bf00      	nop
    bb60:	0002e959 	.word	0x0002e959
    bb64:	0002d0e4 	.word	0x0002d0e4
    bb68:	20008c40 	.word	0x20008c40
    bb6c:	0002e970 	.word	0x0002e970

0000bb70 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    bb70:	4603      	mov	r3, r0
    bb72:	b510      	push	{r4, lr}
    bb74:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    bb76:	7919      	ldrb	r1, [r3, #4]
    bb78:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    bb7a:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    bb7c:	fa03 f101 	lsl.w	r1, r3, r1
    bb80:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    bb82:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    bb84:	681b      	ldr	r3, [r3, #0]
    bb86:	4219      	tst	r1, r3
    bb88:	d10e      	bne.n	bba8 <gpio_pin_set_dt.isra.0+0x38>
    bb8a:	490e      	ldr	r1, [pc, #56]	; (bbc4 <gpio_pin_set_dt.isra.0+0x54>)
    bb8c:	f240 533d 	movw	r3, #1341	; 0x53d
    bb90:	4a0d      	ldr	r2, [pc, #52]	; (bbc8 <gpio_pin_set_dt.isra.0+0x58>)
    bb92:	480e      	ldr	r0, [pc, #56]	; (bbcc <gpio_pin_set_dt.isra.0+0x5c>)
    bb94:	f01b fd2d 	bl	275f2 <assert_print>
    bb98:	480d      	ldr	r0, [pc, #52]	; (bbd0 <gpio_pin_set_dt.isra.0+0x60>)
    bb9a:	f01b fd2a 	bl	275f2 <assert_print>
    bb9e:	f240 513d 	movw	r1, #1341	; 0x53d
    bba2:	4809      	ldr	r0, [pc, #36]	; (bbc8 <gpio_pin_set_dt.isra.0+0x58>)
    bba4:	f01b fd1e 	bl	275e4 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    bba8:	6823      	ldr	r3, [r4, #0]
    bbaa:	4219      	tst	r1, r3
    bbac:	d003      	beq.n	bbb6 <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    bbae:	b122      	cbz	r2, bbba <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    bbb0:	6883      	ldr	r3, [r0, #8]
    bbb2:	691b      	ldr	r3, [r3, #16]
    bbb4:	e003      	b.n	bbbe <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    bbb6:	2a00      	cmp	r2, #0
    bbb8:	d0fa      	beq.n	bbb0 <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    bbba:	6883      	ldr	r3, [r0, #8]
    bbbc:	68db      	ldr	r3, [r3, #12]
}
    bbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    bbc2:	4718      	bx	r3
    bbc4:	0002e6d7 	.word	0x0002e6d7
    bbc8:	0002e6a6 	.word	0x0002e6a6
    bbcc:	0002e715 	.word	0x0002e715
    bbd0:	0002e732 	.word	0x0002e732

0000bbd4 <button_pressed_1>:
{
    bbd4:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    bbd6:	4807      	ldr	r0, [pc, #28]	; (bbf4 <button_pressed_1+0x20>)
    bbd8:	f015 f946 	bl	20e68 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    bbdc:	2101      	movs	r1, #1
    bbde:	4806      	ldr	r0, [pc, #24]	; (bbf8 <button_pressed_1+0x24>)
    bbe0:	f7ff ffc6 	bl	bb70 <gpio_pin_set_dt.isra.0>
    bbe4:	f01f f919 	bl	2ae1a <sys_clock_cycle_get_32>
}
    bbe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bbec:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    bbee:	4803      	ldr	r0, [pc, #12]	; (bbfc <button_pressed_1+0x28>)
    bbf0:	f01b bb3d 	b.w	2726e <printk>
    bbf4:	20008bf0 	.word	0x20008bf0
    bbf8:	0002d9d0 	.word	0x0002d9d0
    bbfc:	0002e99b 	.word	0x0002e99b

0000bc00 <connected>:
{
    bc00:	b570      	push	{r4, r5, r6, lr}
    bc02:	4605      	mov	r5, r0
	if (err)
    bc04:	460c      	mov	r4, r1
{
    bc06:	b08c      	sub	sp, #48	; 0x30
	if (err)
    bc08:	b161      	cbz	r1, bc24 <connected+0x24>
		LOG_ERR("Connection failed (err %u)", err);
    bc0a:	4b14      	ldr	r3, [pc, #80]	; (bc5c <connected+0x5c>)
    bc0c:	9103      	str	r1, [sp, #12]
    bc0e:	9302      	str	r3, [sp, #8]
    bc10:	2300      	movs	r3, #0
    bc12:	2201      	movs	r2, #1
    bc14:	4618      	mov	r0, r3
    bc16:	e9cd 3300 	strd	r3, r3, [sp]
    bc1a:	4911      	ldr	r1, [pc, #68]	; (bc60 <connected+0x60>)
    bc1c:	f01b f91b 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
}
    bc20:	b00c      	add	sp, #48	; 0x30
    bc22:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bc24:	ae04      	add	r6, sp, #16
    bc26:	f01d fa0c 	bl	29042 <bt_conn_get_dst>
    bc2a:	4631      	mov	r1, r6
    bc2c:	f7ff fe3a 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    bc30:	4b0c      	ldr	r3, [pc, #48]	; (bc64 <connected+0x64>)
    bc32:	2203      	movs	r2, #3
    bc34:	4620      	mov	r0, r4
    bc36:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bc3a:	4909      	ldr	r1, [pc, #36]	; (bc60 <connected+0x60>)
    bc3c:	4623      	mov	r3, r4
    bc3e:	9603      	str	r6, [sp, #12]
    bc40:	9400      	str	r4, [sp, #0]
    bc42:	f01b f908 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    bc46:	4628      	mov	r0, r5
    bc48:	f009 fa6e 	bl	15128 <bt_conn_ref>
    bc4c:	4b06      	ldr	r3, [pc, #24]	; (bc68 <connected+0x68>)
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    bc4e:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    bc50:	6018      	str	r0, [r3, #0]
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    bc52:	4806      	ldr	r0, [pc, #24]	; (bc6c <connected+0x6c>)
    bc54:	f7ff ff8c 	bl	bb70 <gpio_pin_set_dt.isra.0>
    bc58:	e7e2      	b.n	bc20 <connected+0x20>
    bc5a:	bf00      	nop
    bc5c:	0002e9b3 	.word	0x0002e9b3
    bc60:	0002d704 	.word	0x0002d704
    bc64:	0002e9ce 	.word	0x0002e9ce
    bc68:	20009ec0 	.word	0x20009ec0
    bc6c:	0002d9e8 	.word	0x0002d9e8

0000bc70 <disconnected>:
{
    bc70:	b530      	push	{r4, r5, lr}
    bc72:	460c      	mov	r4, r1
    bc74:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bc76:	ad06      	add	r5, sp, #24
    bc78:	f01d f9e3 	bl	29042 <bt_conn_get_dst>
    bc7c:	4629      	mov	r1, r5
    bc7e:	f7ff fe11 	bl	b8a4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    bc82:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bc86:	2400      	movs	r4, #0
    bc88:	4b0d      	ldr	r3, [pc, #52]	; (bcc0 <disconnected+0x50>)
	if (auth_conn)
    bc8a:	4d0e      	ldr	r5, [pc, #56]	; (bcc4 <disconnected+0x54>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    bc8c:	4620      	mov	r0, r4
    bc8e:	9302      	str	r3, [sp, #8]
    bc90:	2203      	movs	r2, #3
    bc92:	4623      	mov	r3, r4
    bc94:	e9cd 4400 	strd	r4, r4, [sp]
    bc98:	490b      	ldr	r1, [pc, #44]	; (bcc8 <disconnected+0x58>)
    bc9a:	f01b f8dc 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
	if (auth_conn)
    bc9e:	6828      	ldr	r0, [r5, #0]
    bca0:	b110      	cbz	r0, bca8 <disconnected+0x38>
		bt_conn_unref(auth_conn);
    bca2:	f009 fa69 	bl	15178 <bt_conn_unref>
		auth_conn = NULL;
    bca6:	602c      	str	r4, [r5, #0]
	if (current_conn)
    bca8:	4c08      	ldr	r4, [pc, #32]	; (bccc <disconnected+0x5c>)
    bcaa:	6820      	ldr	r0, [r4, #0]
    bcac:	b130      	cbz	r0, bcbc <disconnected+0x4c>
		bt_conn_unref(current_conn);
    bcae:	f009 fa63 	bl	15178 <bt_conn_unref>
		current_conn = NULL;
    bcb2:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    bcb4:	4806      	ldr	r0, [pc, #24]	; (bcd0 <disconnected+0x60>)
		current_conn = NULL;
    bcb6:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    bcb8:	f7ff ff5a 	bl	bb70 <gpio_pin_set_dt.isra.0>
}
    bcbc:	b00f      	add	sp, #60	; 0x3c
    bcbe:	bd30      	pop	{r4, r5, pc}
    bcc0:	0002e9db 	.word	0x0002e9db
    bcc4:	20009ebc 	.word	0x20009ebc
    bcc8:	0002d704 	.word	0x0002d704
    bccc:	20009ec0 	.word	0x20009ec0
    bcd0:	0002d9e8 	.word	0x0002d9e8

0000bcd4 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    bcd4:	4603      	mov	r3, r0
    bcd6:	b570      	push	{r4, r5, r6, lr}
    bcd8:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    bcda:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    bcdc:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    bcde:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    bce0:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    bce2:	f002 0430 	and.w	r4, r2, #48	; 0x30
    bce6:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    bce8:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    bcea:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    bcee:	d10e      	bne.n	bd0e <gpio_pin_configure_dt.isra.0+0x3a>
    bcf0:	4925      	ldr	r1, [pc, #148]	; (bd88 <gpio_pin_configure_dt.isra.0+0xb4>)
    bcf2:	f240 23b7 	movw	r3, #695	; 0x2b7
    bcf6:	4a25      	ldr	r2, [pc, #148]	; (bd8c <gpio_pin_configure_dt.isra.0+0xb8>)
    bcf8:	4825      	ldr	r0, [pc, #148]	; (bd90 <gpio_pin_configure_dt.isra.0+0xbc>)
    bcfa:	f01b fc7a 	bl	275f2 <assert_print>
    bcfe:	4825      	ldr	r0, [pc, #148]	; (bd94 <gpio_pin_configure_dt.isra.0+0xc0>)
    bd00:	f01b fc77 	bl	275f2 <assert_print>
    bd04:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    bd08:	4820      	ldr	r0, [pc, #128]	; (bd8c <gpio_pin_configure_dt.isra.0+0xb8>)
    bd0a:	f01b fc6b 	bl	275e4 <assert_post_action>
    bd0e:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    bd12:	2c02      	cmp	r4, #2
    bd14:	d10c      	bne.n	bd30 <gpio_pin_configure_dt.isra.0+0x5c>
    bd16:	4920      	ldr	r1, [pc, #128]	; (bd98 <gpio_pin_configure_dt.isra.0+0xc4>)
    bd18:	f240 23bb 	movw	r3, #699	; 0x2bb
    bd1c:	4a1b      	ldr	r2, [pc, #108]	; (bd8c <gpio_pin_configure_dt.isra.0+0xb8>)
    bd1e:	481c      	ldr	r0, [pc, #112]	; (bd90 <gpio_pin_configure_dt.isra.0+0xbc>)
    bd20:	f01b fc67 	bl	275f2 <assert_print>
    bd24:	481d      	ldr	r0, [pc, #116]	; (bd9c <gpio_pin_configure_dt.isra.0+0xc8>)
    bd26:	f01b fc64 	bl	275f2 <assert_print>
    bd2a:	f240 21bb 	movw	r1, #699	; 0x2bb
    bd2e:	e7eb      	b.n	bd08 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    bd30:	f002 0406 	and.w	r4, r2, #6
    bd34:	2c04      	cmp	r4, #4
    bd36:	d109      	bne.n	bd4c <gpio_pin_configure_dt.isra.0+0x78>
    bd38:	4919      	ldr	r1, [pc, #100]	; (bda0 <gpio_pin_configure_dt.isra.0+0xcc>)
    bd3a:	f240 23bf 	movw	r3, #703	; 0x2bf
    bd3e:	4a13      	ldr	r2, [pc, #76]	; (bd8c <gpio_pin_configure_dt.isra.0+0xb8>)
    bd40:	4813      	ldr	r0, [pc, #76]	; (bd90 <gpio_pin_configure_dt.isra.0+0xbc>)
    bd42:	f01b fc56 	bl	275f2 <assert_print>
    bd46:	f240 21bf 	movw	r1, #703	; 0x2bf
    bd4a:	e7dd      	b.n	bd08 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    bd4c:	2401      	movs	r4, #1
    bd4e:	681b      	ldr	r3, [r3, #0]
    bd50:	408c      	lsls	r4, r1
    bd52:	421c      	tst	r4, r3
    bd54:	d10c      	bne.n	bd70 <gpio_pin_configure_dt.isra.0+0x9c>
    bd56:	4913      	ldr	r1, [pc, #76]	; (bda4 <gpio_pin_configure_dt.isra.0+0xd0>)
    bd58:	f240 23d2 	movw	r3, #722	; 0x2d2
    bd5c:	4a0b      	ldr	r2, [pc, #44]	; (bd8c <gpio_pin_configure_dt.isra.0+0xb8>)
    bd5e:	480c      	ldr	r0, [pc, #48]	; (bd90 <gpio_pin_configure_dt.isra.0+0xbc>)
    bd60:	f01b fc47 	bl	275f2 <assert_print>
    bd64:	4810      	ldr	r0, [pc, #64]	; (bda8 <gpio_pin_configure_dt.isra.0+0xd4>)
    bd66:	f01b fc44 	bl	275f2 <assert_print>
    bd6a:	f240 21d2 	movw	r1, #722	; 0x2d2
    bd6e:	e7cb      	b.n	bd08 <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bd70:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    bd72:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    bd76:	bf14      	ite	ne
    bd78:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    bd7a:	43a3      	biceq	r3, r4
    bd7c:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    bd7e:	6833      	ldr	r3, [r6, #0]
}
    bd80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    bd84:	4718      	bx	r3
    bd86:	bf00      	nop
    bd88:	0002e9f8 	.word	0x0002e9f8
    bd8c:	0002e6a6 	.word	0x0002e6a6
    bd90:	0002e715 	.word	0x0002e715
    bd94:	0002ea31 	.word	0x0002ea31
    bd98:	0002ea6e 	.word	0x0002ea6e
    bd9c:	0002eaa3 	.word	0x0002eaa3
    bda0:	0002eaf5 	.word	0x0002eaf5
    bda4:	0002e6d7 	.word	0x0002e6d7
    bda8:	0002e732 	.word	0x0002e732

0000bdac <adc_thread>:
	}
	// k_free(packet_data);
}

void adc_thread(void)
{
    bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    bdb0:	4e36      	ldr	r6, [pc, #216]	; (be8c <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    bdb2:	f8df a0dc 	ldr.w	sl, [pc, #220]	; be90 <adc_thread+0xe4>
    bdb6:	b085      	sub	sp, #20
	int err;

	while (1)
	{
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    bdb8:	4c36      	ldr	r4, [pc, #216]	; (be94 <adc_thread+0xe8>)
    bdba:	2700      	movs	r7, #0
    bdbc:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
			k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id] = buf_adc;
    bdbe:	f8df 80d8 	ldr.w	r8, [pc, #216]	; be98 <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    bdc2:	7963      	ldrb	r3, [r4, #5]
    bdc4:	b13b      	cbz	r3, bdd6 <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    bdc6:	2301      	movs	r3, #1
    bdc8:	7922      	ldrb	r2, [r4, #4]
    bdca:	4093      	lsls	r3, r2
    bdcc:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    bdce:	7c23      	ldrb	r3, [r4, #16]
    bdd0:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    bdd2:	7c63      	ldrb	r3, [r4, #17]
    bdd4:	7473      	strb	r3, [r6, #17]
    bdd6:	f04f 32ff 	mov.w	r2, #4294967295
    bdda:	f04f 33ff 	mov.w	r3, #4294967295
    bdde:	4650      	mov	r0, sl
    bde0:	f014 fde0 	bl	209a4 <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    bde4:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    bde6:	68ab      	ldr	r3, [r5, #8]
    bde8:	4631      	mov	r1, r6
    bdea:	4628      	mov	r0, r5
    bdec:	685b      	ldr	r3, [r3, #4]
    bdee:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id] = buf_adc;
    bdf0:	7922      	ldrb	r2, [r4, #4]
    bdf2:	f9b8 1000 	ldrsh.w	r1, [r8]
    bdf6:	4b29      	ldr	r3, [pc, #164]	; (be9c <adc_thread+0xf0>)
    bdf8:	9201      	str	r2, [sp, #4]
    bdfa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

			if (flag == 1)
    bdfe:	f8df 90a0 	ldr.w	r9, [pc, #160]	; bea0 <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    be02:	4650      	mov	r0, sl
    be04:	f014 fe9e 	bl	20b44 <z_impl_k_mutex_unlock>
    be08:	f8d9 3000 	ldr.w	r3, [r9]
    be0c:	9a01      	ldr	r2, [sp, #4]
    be0e:	2b01      	cmp	r3, #1
    be10:	d12d      	bne.n	be6e <adc_thread+0xc2>
			{
				printk("- %s, channel %d: ", adc_channels[i].dev->name, adc_channels[i].channel_id);
    be12:	6829      	ldr	r1, [r5, #0]
    be14:	4823      	ldr	r0, [pc, #140]	; (bea4 <adc_thread+0xf8>)
    be16:	f01b fa2a 	bl	2726e <printk>
				printk("%" PRId16, buf_adc);
    be1a:	f9b8 1000 	ldrsh.w	r1, [r8]
    be1e:	4822      	ldr	r0, [pc, #136]	; (bea8 <adc_thread+0xfc>)
    be20:	f01b fa25 	bl	2726e <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    be24:	7963      	ldrb	r3, [r4, #5]
				val_mv = buf_adc;
    be26:	f9b8 5000 	ldrsh.w	r5, [r8]
    be2a:	b1e3      	cbz	r3, be66 <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    be2c:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    be2e:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    be30:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    be34:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    be36:	bf0a      	itet	eq
    be38:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    be3a:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    be3c:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    be3e:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    be40:	bf08      	it	eq
    be42:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    be44:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    be46:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    be48:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    be4a:	bf44      	itt	mi
    be4c:	f103 33ff 	addmi.w	r3, r3, #4294967295
    be50:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    be52:	79a0      	ldrb	r0, [r4, #6]
    be54:	a903      	add	r1, sp, #12
    be56:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    be58:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    be5a:	f00e fbf5 	bl	1a648 <adc_gain_invert>
	if (ret == 0) {
    be5e:	b910      	cbnz	r0, be66 <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    be60:	9d03      	ldr	r5, [sp, #12]
    be62:	9b01      	ldr	r3, [sp, #4]
    be64:	411d      	asrs	r5, r3
				adc_raw_to_millivolts_dt(&adc_channels[i], &val_mv);
				printk(" = %" PRId32 " mV\n", val_mv);
    be66:	4629      	mov	r1, r5
    be68:	4810      	ldr	r0, [pc, #64]	; (beac <adc_thread+0x100>)
    be6a:	f01b fa00 	bl	2726e <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    be6e:	3701      	adds	r7, #1
    be70:	2f06      	cmp	r7, #6
    be72:	f104 0414 	add.w	r4, r4, #20
    be76:	d1a4      	bne.n	bdc2 <adc_thread+0x16>
			}
		}
		flag = 0;
    be78:	2300      	movs	r3, #0
		k_sleep(K_MSEC(100));
    be7a:	f640 40cd 	movw	r0, #3277	; 0xccd
    be7e:	2100      	movs	r1, #0
		flag = 0;
    be80:	f8c9 3000 	str.w	r3, [r9]
		k_sleep(K_MSEC(100));
    be84:	f01b f80e 	bl	26ea4 <k_sleep.isra.0>
	{
    be88:	e796      	b.n	bdb8 <adc_thread+0xc>
    be8a:	bf00      	nop
    be8c:	2000843c 	.word	0x2000843c
    be90:	20009f3c 	.word	0x20009f3c
    be94:	0002d958 	.word	0x0002d958
    be98:	2002f7b8 	.word	0x2002f7b8
    be9c:	2002f7a8 	.word	0x2002f7a8
    bea0:	20009f38 	.word	0x20009f38
    bea4:	0002eb28 	.word	0x0002eb28
    bea8:	0002eb3b 	.word	0x0002eb3b
    beac:	0002eb3f 	.word	0x0002eb3f

0000beb0 <uart_cb>:
{
    beb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	switch (evt->type)
    beb2:	780b      	ldrb	r3, [r1, #0]
    beb4:	2b05      	cmp	r3, #5
    beb6:	d829      	bhi.n	bf0c <uart_cb+0x5c>
    beb8:	e8df f003 	tbb	[pc, r3]
    bebc:	6b2c9503 	.word	0x6b2c9503
    bec0:	4984      	.short	0x4984
		if ((evt->data.tx.len == 0) ||
    bec2:	688b      	ldr	r3, [r1, #8]
    bec4:	b313      	cbz	r3, bf0c <uart_cb+0x5c>
			(!evt->data.tx.buf))
    bec6:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    bec8:	b300      	cbz	r0, bf0c <uart_cb+0x5c>
		if (aborted_buf){
    beca:	4a51      	ldr	r2, [pc, #324]	; (c010 <uart_cb+0x160>)
    becc:	6813      	ldr	r3, [r2, #0]
    bece:	b1fb      	cbz	r3, bf10 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    bed0:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    bed2:	2300      	movs	r3, #0
    bed4:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    bed6:	4a4f      	ldr	r2, [pc, #316]	; (c014 <uart_cb+0x164>)
    bed8:	6013      	str	r3, [r2, #0]
		k_free(buf);
    beda:	f020 f8d4 	bl	2c086 <k_free>
	return z_impl_k_queue_get(queue, timeout);
    bede:	2200      	movs	r2, #0
    bee0:	2300      	movs	r3, #0
    bee2:	484d      	ldr	r0, [pc, #308]	; (c018 <uart_cb+0x168>)
    bee4:	f014 ff56 	bl	20d94 <z_impl_k_queue_get>
		if (!buf)
    bee8:	b180      	cbz	r0, bf0c <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS))
    beea:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
    beee:	1d01      	adds	r1, r0, #4
    bef0:	484a      	ldr	r0, [pc, #296]	; (c01c <uart_cb+0x16c>)
    bef2:	f01a ffc7 	bl	26e84 <uart_tx.constprop.0>
    bef6:	b148      	cbz	r0, bf0c <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    bef8:	4b49      	ldr	r3, [pc, #292]	; (c020 <uart_cb+0x170>)
    befa:	2202      	movs	r2, #2
    befc:	9302      	str	r3, [sp, #8]
    befe:	2300      	movs	r3, #0
    bf00:	4618      	mov	r0, r3
    bf02:	e9cd 3300 	strd	r3, r3, [sp]
    bf06:	4947      	ldr	r1, [pc, #284]	; (c024 <uart_cb+0x174>)
			LOG_WRN("Not able to allocate UART receive buffer");
    bf08:	f01a ffa5 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
}
    bf0c:	b004      	add	sp, #16
    bf0e:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data);
    bf10:	3804      	subs	r0, #4
    bf12:	e7e2      	b.n	beda <uart_cb+0x2a>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    bf14:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    bf16:	68cb      	ldr	r3, [r1, #12]
    bf18:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
    bf1c:	4403      	add	r3, r0
		if (disable_req)
    bf1e:	4842      	ldr	r0, [pc, #264]	; (c028 <uart_cb+0x178>)
		buf->len += evt->data.rx.len;
    bf20:	b29b      	uxth	r3, r3
    bf22:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		if (disable_req)
    bf26:	7802      	ldrb	r2, [r0, #0]
    bf28:	2a00      	cmp	r2, #0
    bf2a:	d1ef      	bne.n	bf0c <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    bf2c:	684a      	ldr	r2, [r1, #4]
    bf2e:	4413      	add	r3, r2
    bf30:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    bf34:	2b0a      	cmp	r3, #10
    bf36:	d001      	beq.n	bf3c <uart_cb+0x8c>
    bf38:	2b0d      	cmp	r3, #13
    bf3a:	d1e7      	bne.n	bf0c <uart_cb+0x5c>
			disable_req = true;
    bf3c:	2301      	movs	r3, #1
    bf3e:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    bf40:	4836      	ldr	r0, [pc, #216]	; (c01c <uart_cb+0x16c>)
    bf42:	6883      	ldr	r3, [r0, #8]
    bf44:	695b      	ldr	r3, [r3, #20]
}
    bf46:	b004      	add	sp, #16
    bf48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bf4c:	4718      	bx	r3
		disable_req = false;
    bf4e:	2400      	movs	r4, #0
    bf50:	4b35      	ldr	r3, [pc, #212]	; (c028 <uart_cb+0x178>)
		buf = k_malloc(sizeof(*buf));
    bf52:	206c      	movs	r0, #108	; 0x6c
		disable_req = false;
    bf54:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    bf56:	f020 f89d 	bl	2c094 <k_malloc>
    bf5a:	4603      	mov	r3, r0
		if (buf)
    bf5c:	b140      	cbz	r0, bf70 <uart_cb+0xc0>
			buf->len = 0;
    bf5e:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    bf62:	1d01      	adds	r1, r0, #4
    bf64:	482d      	ldr	r0, [pc, #180]	; (c01c <uart_cb+0x16c>)
}
    bf66:	b004      	add	sp, #16
    bf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    bf6c:	f01a bf82 	b.w	26e74 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    bf70:	4a2e      	ldr	r2, [pc, #184]	; (c02c <uart_cb+0x17c>)
    bf72:	9000      	str	r0, [sp, #0]
    bf74:	e9cd 0201 	strd	r0, r2, [sp, #4]
    bf78:	492a      	ldr	r1, [pc, #168]	; (c024 <uart_cb+0x174>)
    bf7a:	2202      	movs	r2, #2
    bf7c:	f01a ff6b 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    bf80:	f240 6267 	movw	r2, #1639	; 0x667
    bf84:	2300      	movs	r3, #0
    bf86:	482a      	ldr	r0, [pc, #168]	; (c030 <uart_cb+0x180>)
}
    bf88:	b004      	add	sp, #16
    bf8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    bf8e:	f015 bd0b 	b.w	219a8 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    bf92:	206c      	movs	r0, #108	; 0x6c
    bf94:	f020 f87e 	bl	2c094 <k_malloc>
    bf98:	4603      	mov	r3, r0
		if (buf)
    bf9a:	b160      	cbz	r0, bfb6 <uart_cb+0x106>
			buf->len = 0;
    bf9c:	2200      	movs	r2, #0
    bf9e:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	return api->rx_buf_rsp(dev, buf, len);
    bfa2:	481e      	ldr	r0, [pc, #120]	; (c01c <uart_cb+0x16c>)
    bfa4:	1d19      	adds	r1, r3, #4
    bfa6:	6882      	ldr	r2, [r0, #8]
    bfa8:	6914      	ldr	r4, [r2, #16]
    bfaa:	2264      	movs	r2, #100	; 0x64
    bfac:	4623      	mov	r3, r4
}
    bfae:	b004      	add	sp, #16
    bfb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bfb4:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    bfb6:	4a1d      	ldr	r2, [pc, #116]	; (c02c <uart_cb+0x17c>)
    bfb8:	491a      	ldr	r1, [pc, #104]	; (c024 <uart_cb+0x174>)
    bfba:	e9cd 0201 	strd	r0, r2, [sp, #4]
    bfbe:	9000      	str	r0, [sp, #0]
    bfc0:	2202      	movs	r2, #2
    bfc2:	e7a1      	b.n	bf08 <uart_cb+0x58>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    bfc4:	684b      	ldr	r3, [r1, #4]
    bfc6:	1f19      	subs	r1, r3, #4
		if (buf->len > 0)
    bfc8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
    bfcc:	b12b      	cbz	r3, bfda <uart_cb+0x12a>
			k_fifo_put(&fifo_uart_rx_data, buf);
    bfce:	4819      	ldr	r0, [pc, #100]	; (c034 <uart_cb+0x184>)
}
    bfd0:	b004      	add	sp, #16
    bfd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    bfd6:	f01f bea9 	b.w	2bd2c <k_queue_append>
			k_free(buf);
    bfda:	4608      	mov	r0, r1
}
    bfdc:	b004      	add	sp, #16
    bfde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    bfe2:	f020 b850 	b.w	2c086 <k_free>
		if (!aborted_buf)
    bfe6:	4a0a      	ldr	r2, [pc, #40]	; (c010 <uart_cb+0x160>)
    bfe8:	6813      	ldr	r3, [r2, #0]
    bfea:	b90b      	cbnz	r3, bff0 <uart_cb+0x140>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    bfec:	684b      	ldr	r3, [r1, #4]
    bfee:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    bff0:	4808      	ldr	r0, [pc, #32]	; (c014 <uart_cb+0x164>)
    bff2:	688b      	ldr	r3, [r1, #8]
    bff4:	6801      	ldr	r1, [r0, #0]
    bff6:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    bff8:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    bffa:	6003      	str	r3, [r0, #0]
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    bffc:	f8b1 2064 	ldrh.w	r2, [r1, #100]	; 0x64
    c000:	4806      	ldr	r0, [pc, #24]	; (c01c <uart_cb+0x16c>)
    c002:	1ad2      	subs	r2, r2, r3
    c004:	4419      	add	r1, r3
}
    c006:	b004      	add	sp, #16
    c008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    c00c:	f01a bf3a 	b.w	26e84 <uart_tx.constprop.0>
    c010:	20009eac 	.word	0x20009eac
    c014:	20009ea8 	.word	0x20009ea8
    c018:	20008c40 	.word	0x20008c40
    c01c:	0002d0e4 	.word	0x0002d0e4
    c020:	0002eb49 	.word	0x0002eb49
    c024:	0002d704 	.word	0x0002d704
    c028:	2002f9b6 	.word	0x2002f9b6
    c02c:	0002eb67 	.word	0x0002eb67
    c030:	20009270 	.word	0x20009270
    c034:	20008c24 	.word	0x20008c24

0000c038 <button_pressed_4>:
{
    c038:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    c03a:	4805      	ldr	r0, [pc, #20]	; (c050 <button_pressed_4+0x18>)
    c03c:	f014 ff14 	bl	20e68 <z_impl_k_sem_give>
    c040:	f01e feeb 	bl	2ae1a <sys_clock_cycle_get_32>
}
    c044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c048:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    c04a:	4802      	ldr	r0, [pc, #8]	; (c054 <button_pressed_4+0x1c>)
    c04c:	f01b b90f 	b.w	2726e <printk>
    c050:	20008b90 	.word	0x20008b90
    c054:	0002eb90 	.word	0x0002eb90

0000c058 <button_pressed_3>:
{
    c058:	b508      	push	{r3, lr}
    c05a:	4805      	ldr	r0, [pc, #20]	; (c070 <button_pressed_3+0x18>)
    c05c:	f014 ff04 	bl	20e68 <z_impl_k_sem_give>
    c060:	f01e fedb 	bl	2ae1a <sys_clock_cycle_get_32>
}
    c064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c068:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    c06a:	4802      	ldr	r0, [pc, #8]	; (c074 <button_pressed_3+0x1c>)
    c06c:	f01b b8ff 	b.w	2726e <printk>
    c070:	20008b78 	.word	0x20008b78
    c074:	0002eba8 	.word	0x0002eba8

0000c078 <button_pressed_2>:
{
    c078:	b508      	push	{r3, lr}
    c07a:	4807      	ldr	r0, [pc, #28]	; (c098 <button_pressed_2+0x20>)
    c07c:	f014 fef4 	bl	20e68 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    c080:	2101      	movs	r1, #1
    c082:	4806      	ldr	r0, [pc, #24]	; (c09c <button_pressed_2+0x24>)
    c084:	f7ff fd74 	bl	bb70 <gpio_pin_set_dt.isra.0>
    c088:	f01e fec7 	bl	2ae1a <sys_clock_cycle_get_32>
}
    c08c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c090:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    c092:	4803      	ldr	r0, [pc, #12]	; (c0a0 <button_pressed_2+0x28>)
    c094:	f01b b8eb 	b.w	2726e <printk>
    c098:	20008bc0 	.word	0x20008bc0
    c09c:	0002d9d8 	.word	0x0002d9d8
    c0a0:	0002ebc0 	.word	0x0002ebc0

0000c0a4 <ble_write_thread>:
{
    c0a4:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    c0a6:	f04f 32ff 	mov.w	r2, #4294967295
    c0aa:	f04f 33ff 	mov.w	r3, #4294967295
    c0ae:	480d      	ldr	r0, [pc, #52]	; (c0e4 <ble_write_thread+0x40>)
    c0b0:	f01a fef0 	bl	26e94 <k_sem_take.constprop.0.isra.0>
	return z_impl_k_queue_get(queue, timeout);
    c0b4:	4d0c      	ldr	r5, [pc, #48]	; (c0e8 <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    c0b6:	4e0d      	ldr	r6, [pc, #52]	; (c0ec <ble_write_thread+0x48>)
    c0b8:	f04f 32ff 	mov.w	r2, #4294967295
    c0bc:	f04f 33ff 	mov.w	r3, #4294967295
    c0c0:	4628      	mov	r0, r5
    c0c2:	f014 fe67 	bl	20d94 <z_impl_k_queue_get>
    c0c6:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len))
    c0c8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
    c0cc:	1d01      	adds	r1, r0, #4
    c0ce:	2000      	movs	r0, #0
    c0d0:	f004 fe04 	bl	10cdc <bt_nus_send>
    c0d4:	b110      	cbz	r0, c0dc <ble_write_thread+0x38>
			printk("Falha aqui- Failed to send data over BLE connection");
    c0d6:	4630      	mov	r0, r6
    c0d8:	f01b f8c9 	bl	2726e <printk>
		k_free(buf);
    c0dc:	4620      	mov	r0, r4
    c0de:	f01f ffd2 	bl	2c086 <k_free>
	{
    c0e2:	e7e9      	b.n	c0b8 <ble_write_thread+0x14>
    c0e4:	20008b60 	.word	0x20008b60
    c0e8:	20008c24 	.word	0x20008c24
    c0ec:	0002ebd8 	.word	0x0002ebd8

0000c0f0 <uart_cb_2>:
{
    c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (evt->type)
    c0f4:	780b      	ldrb	r3, [r1, #0]
    c0f6:	3b02      	subs	r3, #2
    c0f8:	2b03      	cmp	r3, #3
    c0fa:	d87b      	bhi.n	c1f4 <uart_cb_2+0x104>
    c0fc:	e8df f003 	tbb	[pc, r3]
    c100:	4d716202 	.word	0x4d716202
		buf2 = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    c104:	684c      	ldr	r4, [r1, #4]
		buf2->len += evt->data.rx.len;
    c106:	68cb      	ldr	r3, [r1, #12]
    c108:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    c10c:	4d3a      	ldr	r5, [pc, #232]	; (c1f8 <uart_cb_2+0x108>)
    c10e:	4413      	add	r3, r2
    c110:	b29b      	uxth	r3, r3
    c112:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        if(buf2->data[buf2->len - 1]==0x24  && buff_marker==0){
    c116:	4423      	add	r3, r4
    c118:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c11c:	2b24      	cmp	r3, #36	; 0x24
    c11e:	d10e      	bne.n	c13e <uart_cb_2+0x4e>
    c120:	682e      	ldr	r6, [r5, #0]
    c122:	b966      	cbnz	r6, c13e <uart_cb_2+0x4e>
			buf_extra = k_malloc(sizeof(*buf_extra));
    c124:	206c      	movs	r0, #108	; 0x6c
    c126:	f01f ffb5 	bl	2c094 <k_malloc>
    c12a:	4b34      	ldr	r3, [pc, #208]	; (c1fc <uart_cb_2+0x10c>)
			blink(LED3,2);
    c12c:	2102      	movs	r1, #2
			buf_extra = k_malloc(sizeof(*buf_extra));
    c12e:	6018      	str	r0, [r3, #0]
			buff_extra_index=0;
    c130:	4b33      	ldr	r3, [pc, #204]	; (c200 <uart_cb_2+0x110>)
			blink(LED3,2);
    c132:	4834      	ldr	r0, [pc, #208]	; (c204 <uart_cb_2+0x114>)
			buff_extra_index=0;
    c134:	601e      	str	r6, [r3, #0]
			buff_marker=1;
    c136:	2301      	movs	r3, #1
    c138:	602b      	str	r3, [r5, #0]
			blink(LED3,2);
    c13a:	f01a feb5 	bl	26ea8 <blink>
        if(buff_marker==1 && (buff_extra_index<(sizeof(*buf2)-1)) ){
    c13e:	682b      	ldr	r3, [r5, #0]
    c140:	2b01      	cmp	r3, #1
    c142:	d157      	bne.n	c1f4 <uart_cb_2+0x104>
    c144:	482e      	ldr	r0, [pc, #184]	; (c200 <uart_cb_2+0x110>)
    c146:	6803      	ldr	r3, [r0, #0]
    c148:	2b6a      	cmp	r3, #106	; 0x6a
    c14a:	d853      	bhi.n	c1f4 <uart_cb_2+0x104>
		    buf_extra->data[buff_extra_index++]=buf2->data[buf2->len - 1];
    c14c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    c150:	4e2a      	ldr	r6, [pc, #168]	; (c1fc <uart_cb_2+0x10c>)
    c152:	1c5a      	adds	r2, r3, #1
    c154:	3f01      	subs	r7, #1
    c156:	6002      	str	r2, [r0, #0]
    c158:	6831      	ldr	r1, [r6, #0]
    c15a:	f814 c007 	ldrb.w	ip, [r4, r7]
    c15e:	18cf      	adds	r7, r1, r3
    c160:	f887 c004 	strb.w	ip, [r7, #4]
			if(buf2->data[buf2->len - 1]==0x0A){
    c164:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    c168:	443c      	add	r4, r7
    c16a:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    c16e:	2c0a      	cmp	r4, #10
    c170:	d140      	bne.n	c1f4 <uart_cb_2+0x104>
			   buf_extra->data[buff_extra_index++] = 0x00;
    c172:	2400      	movs	r4, #0
    c174:	3302      	adds	r3, #2
    c176:	440a      	add	r2, r1
    c178:	7114      	strb	r4, [r2, #4]
    c17a:	6003      	str	r3, [r0, #0]
			   buf_extra->len = buff_extra_index;
    c17c:	f8a1 3068 	strh.w	r3, [r1, #104]	; 0x68
				 k_fifo_put(&fifo_uart2_rx_data, buf_extra); // TRANSFER TO FIFO
    c180:	4821      	ldr	r0, [pc, #132]	; (c208 <uart_cb_2+0x118>)
    c182:	f01f fdd3 	bl	2bd2c <k_queue_append>
				 k_free(buf_extra);
    c186:	6830      	ldr	r0, [r6, #0]
    c188:	f01f ff7d 	bl	2c086 <k_free>
			   buff_marker=0;
    c18c:	602c      	str	r4, [r5, #0]
			   blink(LED4,2);
    c18e:	2102      	movs	r1, #2
}
    c190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			   blink(LED4,2);
    c194:	481d      	ldr	r0, [pc, #116]	; (c20c <uart_cb_2+0x11c>)
    c196:	f01a be87 	b.w	26ea8 <blink>
		buf2 = k_malloc(sizeof(*buf2)); // THE SIZE IS 92 BYTES
    c19a:	206c      	movs	r0, #108	; 0x6c
    c19c:	f01f ff7a 	bl	2c094 <k_malloc>
		if (buf2)
    c1a0:	b140      	cbz	r0, c1b4 <uart_cb_2+0xc4>
			buf2->len = 0;
    c1a2:	2300      	movs	r3, #0
    c1a4:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    c1a8:	1d01      	adds	r1, r0, #4
}
    c1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    c1ae:	4818      	ldr	r0, [pc, #96]	; (c210 <uart_cb_2+0x120>)
    c1b0:	f01a be60 	b.w	26e74 <uart_rx_enable.constprop.0>
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    c1b4:	f240 6267 	movw	r2, #1639	; 0x667
}
    c1b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    c1bc:	2300      	movs	r3, #0
    c1be:	4815      	ldr	r0, [pc, #84]	; (c214 <uart_cb_2+0x124>)
    c1c0:	f015 bbf2 	b.w	219a8 <k_work_reschedule>
		buf2 = k_malloc(sizeof(*buf2));
    c1c4:	206c      	movs	r0, #108	; 0x6c
    c1c6:	f01f ff65 	bl	2c094 <k_malloc>
		buf2->len = 0;
    c1ca:	2300      	movs	r3, #0
		buf2 = k_malloc(sizeof(*buf2));
    c1cc:	4601      	mov	r1, r0
		buf2->len = 0;
    c1ce:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    c1d2:	480f      	ldr	r0, [pc, #60]	; (c210 <uart_cb_2+0x120>)
    c1d4:	2264      	movs	r2, #100	; 0x64
}
    c1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c1da:	6883      	ldr	r3, [r0, #8]
    c1dc:	3104      	adds	r1, #4
    c1de:	691b      	ldr	r3, [r3, #16]
    c1e0:	4718      	bx	r3
		buf2 = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data);
    c1e2:	6848      	ldr	r0, [r1, #4]
		if (buf2->len > 0)
    c1e4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    c1e8:	b123      	cbz	r3, c1f4 <uart_cb_2+0x104>
}
    c1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_free(buf2);
    c1ee:	3804      	subs	r0, #4
    c1f0:	f01f bf49 	b.w	2c086 <k_free>
}
    c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1f8:	20009eb0 	.word	0x20009eb0
    c1fc:	20009eb8 	.word	0x20009eb8
    c200:	20009eb4 	.word	0x20009eb4
    c204:	0002d9d8 	.word	0x0002d9d8
    c208:	20008c08 	.word	0x20008c08
    c20c:	0002d9d0 	.word	0x0002d9d0
    c210:	0002d0cc 	.word	0x0002d0cc
    c214:	20009240 	.word	0x20009240

0000c218 <gnss_write_thread>:
	}
}

void gnss_write_thread(void)
{
    c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c21c:	b085      	sub	sp, #20
    uint8_t debug = ON;
	uint8_t value;
	uint32_t i = 0, j = 1, k = 0, h = 0, g = 0, index = 0, bfcnt = 0;
	uint64_t time = k_uptime_get();
    c21e:	f01a fe0c 	bl	26e3a <k_uptime_get>
	uint8_t state = 0, pkt_init = 0;
	static uint8_t buffer[BUFF_SIZE];

    //http://aprs.gids.nl/nmea/     sentences descriptions
    //const char nmea_id[10] = "$GPGGA"; //capture this sentence
    const char nmea_id[10] = "$GPRMC"; //capture this sentence
    c222:	4b78      	ldr	r3, [pc, #480]	; (c404 <gnss_write_thread+0x1ec>)
    c224:	4f78      	ldr	r7, [pc, #480]	; (c408 <gnss_write_thread+0x1f0>)
    c226:	889a      	ldrh	r2, [r3, #4]
    c228:	6818      	ldr	r0, [r3, #0]
    c22a:	799b      	ldrb	r3, [r3, #6]
    c22c:	f8ad 2008 	strh.w	r2, [sp, #8]
    c230:	f88d 300a 	strb.w	r3, [sp, #10]
    c234:	2300      	movs	r3, #0
    c236:	f8ad 300b 	strh.w	r3, [sp, #11]
    c23a:	f88d 300d 	strb.w	r3, [sp, #13]
	

    static char *field[20];
    char *ret;
    char *token;
    char marker[2]="\n";
    c23e:	230a      	movs	r3, #10
    c240:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    c244:	f8ad 3000 	strh.w	r3, [sp]
    //marker[0]=0x0d;

	uint8_t part[2];

	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    c248:	2220      	movs	r2, #32
    char marker[2]="\n";
    c24a:	463b      	mov	r3, r7
    const char nmea_id[10] = "$GPRMC"; //capture this sentence
    c24c:	9001      	str	r0, [sp, #4]
	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    c24e:	3c01      	subs	r4, #1
    c250:	f803 2b01 	strb.w	r2, [r3], #1
    c254:	d1fb      	bne.n	c24e <gnss_write_thread+0x36>
	i = 0;

	struct uart_data_t *buf2a;
	buf2a = k_malloc(sizeof(*buf2a));
    c256:	206c      	movs	r0, #108	; 0x6c
    c258:	f01f ff1c 	bl	2c094 <k_malloc>
	uint32_t i = 0, j = 1, k = 0, h = 0, g = 0, index = 0, bfcnt = 0;
    c25c:	46a1      	mov	r9, r4
	uint8_t state = 0, pkt_init = 0;
    c25e:	4626      	mov	r6, r4
    c260:	4625      	mov	r5, r4
    c262:	f8df 81a8 	ldr.w	r8, [pc, #424]	; c40c <gnss_write_thread+0x1f4>
    c266:	f04f 32ff 	mov.w	r2, #4294967295
    c26a:	f04f 33ff 	mov.w	r3, #4294967295
    c26e:	4640      	mov	r0, r8
    c270:	f014 fd90 	bl	20d94 <z_impl_k_queue_get>
    c274:	4683      	mov	fp, r0
	z_impl_k_queue_init(queue);
    c276:	4640      	mov	r0, r8
    c278:	f01f fd4b 	bl	2bd12 <z_impl_k_queue_init>
	for (;;)
	{
		buf2a = k_fifo_get(&fifo_uart2_rx_data, K_FOREVER);
		k_fifo_init(&fifo_uart2_rx_data);

		if (buf2a->len > 0)
    c27c:	f8bb a068 	ldrh.w	sl, [fp, #104]	; 0x68
    c280:	f1ba 0f00 	cmp.w	sl, #0
    c284:	d01f      	beq.n	c2c6 <gnss_write_thread+0xae>
		{
			k = (buf2a->len);

			i = 0;
			index = 0;
			blink(LED4,2);
    c286:	2102      	movs	r1, #2
    c288:	4861      	ldr	r0, [pc, #388]	; (c410 <gnss_write_thread+0x1f8>)
			k = (buf2a->len);
    c28a:	46d1      	mov	r9, sl
			blink(LED4,2);
    c28c:	f01a fe0c 	bl	26ea8 <blink>
           
			while (i < k && pkt_init == 0)
    c290:	b9ce      	cbnz	r6, c2c6 <gnss_write_thread+0xae>
			index = 0;
    c292:	4631      	mov	r1, r6
			i = 0;
    c294:	4630      	mov	r0, r6
    c296:	f10b 0c03 	add.w	ip, fp, #3
			{
				// printf("%02X ",buf2a->data[i]);
				switch (buf2a->data[i])
    c29a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    c29e:	2b52      	cmp	r3, #82	; 0x52
    c2a0:	d806      	bhi.n	c2b0 <gnss_write_thread+0x98>
    c2a2:	2b46      	cmp	r3, #70	; 0x46
    c2a4:	d860      	bhi.n	c368 <gnss_write_thread+0x150>
    c2a6:	2b24      	cmp	r3, #36	; 0x24
    c2a8:	d07e      	beq.n	c3a8 <gnss_write_thread+0x190>
    c2aa:	2b43      	cmp	r3, #67	; 0x43
    c2ac:	f000 8091 	beq.w	c3d2 <gnss_write_thread+0x1ba>
						state = 6;
					    index = i - 5;
					}
					break;
				}
				i++;
    c2b0:	3001      	adds	r0, #1
			while (i < k && pkt_init == 0)
    c2b2:	4550      	cmp	r0, sl
    c2b4:	d3f1      	bcc.n	c29a <gnss_write_thread+0x82>
			}

			if (state == 6 && pkt_init == 0)
    c2b6:	2d06      	cmp	r5, #6
    c2b8:	d105      	bne.n	c2c6 <gnss_write_thread+0xae>
			{
				//printf("BEGIN:\n");
				while (index < k)
				{
					//printf("%c", buf2a->data[index]);
					if (buf2a->data[index]!=0x0D) {
    c2ba:	f10b 0b04 	add.w	fp, fp, #4
				while (index < k)
    c2be:	4551      	cmp	r1, sl
    c2c0:	f0c0 808c 	bcc.w	c3dc <gnss_write_thread+0x1c4>
						buffer[bfcnt] = buf2a->data[index];
						bfcnt++;
					}
					index++;
				}
				pkt_init=1;
    c2c4:	2601      	movs	r6, #1
	return z_impl_k_queue_get(queue, timeout);
    c2c6:	f04f 33ff 	mov.w	r3, #4294967295
    c2ca:	f04f 32ff 	mov.w	r2, #4294967295
    c2ce:	4640      	mov	r0, r8
    c2d0:	f014 fd60 	bl	20d94 <z_impl_k_queue_get>
			}
		}

		buf2a = k_fifo_get(&fifo_uart2_rx_data, K_FOREVER);
		if (buf2a->len > 0)
    c2d4:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d0c4      	beq.n	c266 <gnss_write_thread+0x4e>
		{
			if ((pkt_init >= 1) && (bfcnt < BUFF_SIZE)  )
    c2dc:	b16e      	cbz	r6, c2fa <gnss_write_thread+0xe2>
    c2de:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    c2e2:	d20d      	bcs.n	c300 <gnss_write_thread+0xe8>
    c2e4:	f109 0203 	add.w	r2, r9, #3
    c2e8:	1cc3      	adds	r3, r0, #3
    c2ea:	4410      	add	r0, r2
			{
				index = 0;
				while ((index < k)  && (bfcnt < BUFF_SIZE))
    c2ec:	4283      	cmp	r3, r0
    c2ee:	d002      	beq.n	c2f6 <gnss_write_thread+0xde>
    c2f0:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    c2f4:	d17a      	bne.n	c3ec <gnss_write_thread+0x1d4>
						buffer[bfcnt] = buf2a->data[index];
						bfcnt++;
					}
					index++;
				}
				pkt_init++;
    c2f6:	3601      	adds	r6, #1
    c2f8:	b2f6      	uxtb	r6, r6
			}

			if (bfcnt >= BUFF_SIZE - 1)
    c2fa:	f5b4 7fef 	cmp.w	r4, #478	; 0x1de
    c2fe:	d9b2      	bls.n	c266 <gnss_write_thread+0x4e>
                index = 0;
                while(index < bfcnt ){
					//printf("%c",buffer[index]);
				   	index++;
				}
   				ret = strstr(buffer, nmea_id);
    c300:	a901      	add	r1, sp, #4
    c302:	4841      	ldr	r0, [pc, #260]	; (c408 <gnss_write_thread+0x1f0>)
   				//printf("The substring is: %s\n", ret);
   				token = strtok(ret, marker);
   				//printf("%s\n", token );
   				i=parse_comma_delimited_str(token, field, 20);
    c304:	4c43      	ldr	r4, [pc, #268]	; (c414 <gnss_write_thread+0x1fc>)
   				ret = strstr(buffer, nmea_id);
    c306:	f020 f889 	bl	2c41c <strstr>
   				token = strtok(ret, marker);
    c30a:	4669      	mov	r1, sp
    c30c:	f018 fcde 	bl	24ccc <strtok>
   				i=parse_comma_delimited_str(token, field, 20);
    c310:	2214      	movs	r2, #20
    c312:	4621      	mov	r1, r4
    c314:	f01a fdf8 	bl	26f08 <parse_comma_delimited_str>
                //debug_print_fields(i,field);
				
				if (i==12){
    c318:	280c      	cmp	r0, #12
    c31a:	d11a      	bne.n	c352 <gnss_write_thread+0x13a>
				  //printf("\nGPS Fixed  :%s\r\n",field[2]); //(0=invalid; 1=GPS fix; 2=Diff. GPS fix)
				  
				  position.gps_fixed=*field[2]-0x40; //char A=0x41 - 0x40 = 1
    c31c:	68a3      	ldr	r3, [r4, #8]
    c31e:	4d3e      	ldr	r5, [pc, #248]	; (c418 <gnss_write_thread+0x200>)
    c320:	781b      	ldrb	r3, [r3, #0]
    c322:	3b40      	subs	r3, #64	; 0x40
    c324:	b2db      	uxtb	r3, r3
				  //printf("inteiro %d\n",position.gps_fixed);
				  if (position.gps_fixed==1){  
    c326:	2b01      	cmp	r3, #1
				  position.gps_fixed=*field[2]-0x40; //char A=0x41 - 0x40 = 1
    c328:	732b      	strb	r3, [r5, #12]
				  if (position.gps_fixed==1){  
    c32a:	d166      	bne.n	c3fa <gnss_write_thread+0x1e2>
                   printf("GPS Fixed  :Yes\n");
    c32c:	483b      	ldr	r0, [pc, #236]	; (c41c <gnss_write_thread+0x204>)
    c32e:	f018 fc99 	bl	24c64 <iprintf>
				   //printf("Time       :%s\r\n",field[1]);
				   //printf("Date       :%s\r\n",field[9]);
                   //printf("Latitude  N:%s\r\n",field[3]);
                   //printf("Longitude E:%s\r\n",field[5]);
				   position.latitude=atof(field[3]);
    c332:	68e0      	ldr	r0, [r4, #12]
    c334:	f01f feb3 	bl	2c09e <atof>
    c338:	f7fc fadc 	bl	88f4 <__aeabi_d2f>
    c33c:	6068      	str	r0, [r5, #4]
				   position.longitude=atof(field[5]);
    c33e:	6960      	ldr	r0, [r4, #20]
    c340:	f01f fead 	bl	2c09e <atof>
    c344:	f7fc fad6 	bl	88f4 <__aeabi_d2f>
				   fill_date(field[1],field[9]);
    c348:	6a61      	ldr	r1, [r4, #36]	; 0x24
				   position.longitude=atof(field[5]);
    c34a:	60a8      	str	r0, [r5, #8]
				   fill_date(field[1],field[9]);
    c34c:	6860      	ldr	r0, [r4, #4]
    c34e:	f000 fbe3 	bl	cb18 <fill_date>
				pkt_init=1;
    c352:	463b      	mov	r3, r7
    c354:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
			    }
				index = 0;
				pkt_init = 0;
				bfcnt = 0;
				state = 0;
				while (index < BUFF_SIZE)buffer[index++] = 0x20;//space
    c358:	2220      	movs	r2, #32
    c35a:	3c01      	subs	r4, #1
    c35c:	f803 2b01 	strb.w	r2, [r3], #1
    c360:	d1fb      	bne.n	c35a <gnss_write_thread+0x142>
				pkt_init = 0;
    c362:	4626      	mov	r6, r4
				state = 0;
    c364:	4625      	mov	r5, r4
    c366:	e77e      	b.n	c266 <gnss_write_thread+0x4e>
				switch (buf2a->data[i])
    c368:	3b47      	subs	r3, #71	; 0x47
    c36a:	2b0b      	cmp	r3, #11
    c36c:	d8a0      	bhi.n	c2b0 <gnss_write_thread+0x98>
    c36e:	f20f 0e08 	addw	lr, pc, #8
    c372:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    c376:	bf00      	nop
    c378:	0000c3b3 	.word	0x0000c3b3
    c37c:	0000c2b1 	.word	0x0000c2b1
    c380:	0000c2b1 	.word	0x0000c2b1
    c384:	0000c2b1 	.word	0x0000c2b1
    c388:	0000c2b1 	.word	0x0000c2b1
    c38c:	0000c2b1 	.word	0x0000c2b1
    c390:	0000c3cb 	.word	0x0000c3cb
    c394:	0000c2b1 	.word	0x0000c2b1
    c398:	0000c2b1 	.word	0x0000c2b1
    c39c:	0000c3bb 	.word	0x0000c3bb
    c3a0:	0000c2b1 	.word	0x0000c2b1
    c3a4:	0000c3c3 	.word	0x0000c3c3
					if (state == 0)state = 1;
    c3a8:	2d01      	cmp	r5, #1
    c3aa:	bf38      	it	cc
    c3ac:	2501      	movcc	r5, #1
    c3ae:	b2ed      	uxtb	r5, r5
    c3b0:	e77e      	b.n	c2b0 <gnss_write_thread+0x98>
					if (state == 1)state = 2;
    c3b2:	2d01      	cmp	r5, #1
    c3b4:	bf08      	it	eq
    c3b6:	2502      	moveq	r5, #2
    c3b8:	e77a      	b.n	c2b0 <gnss_write_thread+0x98>
					if (state == 2)state = 3;
    c3ba:	2d02      	cmp	r5, #2
    c3bc:	bf08      	it	eq
    c3be:	2503      	moveq	r5, #3
    c3c0:	e776      	b.n	c2b0 <gnss_write_thread+0x98>
					if (state == 3)state = 4;
    c3c2:	2d03      	cmp	r5, #3
    c3c4:	bf08      	it	eq
    c3c6:	2504      	moveq	r5, #4
    c3c8:	e772      	b.n	c2b0 <gnss_write_thread+0x98>
					if (state == 4)state = 5;
    c3ca:	2d04      	cmp	r5, #4
    c3cc:	bf08      	it	eq
    c3ce:	2505      	moveq	r5, #5
    c3d0:	e76e      	b.n	c2b0 <gnss_write_thread+0x98>
					if (state == 5){
    c3d2:	2d05      	cmp	r5, #5
						state = 6;
    c3d4:	bf04      	itt	eq
    c3d6:	2506      	moveq	r5, #6
					    index = i - 5;
    c3d8:	1f41      	subeq	r1, r0, #5
    c3da:	e769      	b.n	c2b0 <gnss_write_thread+0x98>
					if (buf2a->data[index]!=0x0D) {
    c3dc:	f81b 3001 	ldrb.w	r3, [fp, r1]
					index++;
    c3e0:	3101      	adds	r1, #1
					if (buf2a->data[index]!=0x0D) {
    c3e2:	2b0d      	cmp	r3, #13
						buffer[bfcnt] = buf2a->data[index];
    c3e4:	bf1c      	itt	ne
    c3e6:	553b      	strbne	r3, [r7, r4]
						bfcnt++;
    c3e8:	3401      	addne	r4, #1
					index++;
    c3ea:	e768      	b.n	c2be <gnss_write_thread+0xa6>
					if (buf2a->data[index]!=0x0D) {
    c3ec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c3f0:	2a0d      	cmp	r2, #13
						buffer[bfcnt] = buf2a->data[index];
    c3f2:	bf1c      	itt	ne
    c3f4:	553a      	strbne	r2, [r7, r4]
						bfcnt++;
    c3f6:	3401      	addne	r4, #1
					index++;
    c3f8:	e778      	b.n	c2ec <gnss_write_thread+0xd4>
				  }else printf("GPS Fixed  :No\n");
    c3fa:	4809      	ldr	r0, [pc, #36]	; (c420 <gnss_write_thread+0x208>)
    c3fc:	f018 fc32 	bl	24c64 <iprintf>
				while (index < BUFF_SIZE)buffer[index++] = 0x20;//space
    c400:	e7a7      	b.n	c352 <gnss_write_thread+0x13a>
    c402:	bf00      	nop
    c404:	0002d750 	.word	0x0002d750
    c408:	2002f7d6 	.word	0x2002f7d6
    c40c:	20008c08 	.word	0x20008c08
    c410:	0002d9d0 	.word	0x0002d9d0
    c414:	20009e58 	.word	0x20009e58
    c418:	20009ec4 	.word	0x20009ec4
    c41c:	0002ec0c 	.word	0x0002ec0c
    c420:	0002ec1d 	.word	0x0002ec1d

0000c424 <flash_init>:
{
    c424:	b570      	push	{r4, r5, r6, lr}
	fs.flash_device = NVS_PARTITION_DEVICE;
    c426:	4833      	ldr	r0, [pc, #204]	; (c4f4 <flash_init+0xd0>)
    c428:	4c33      	ldr	r4, [pc, #204]	; (c4f8 <flash_init+0xd4>)
    c42a:	62a0      	str	r0, [r4, #40]	; 0x28
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    c42c:	f01f fc05 	bl	2bc3a <z_device_is_ready>
	if (!device_is_ready(fs.flash_device))
    c430:	b930      	cbnz	r0, c440 <flash_init+0x1c>
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    c432:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c434:	4831      	ldr	r0, [pc, #196]	; (c4fc <flash_init+0xd8>)
    c436:	6819      	ldr	r1, [r3, #0]
}
    c438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    c43c:	f01a bf17 	b.w	2726e <printk>
	fs.offset = NVS_PARTITION_OFFSET;
    c440:	2100      	movs	r1, #0
	rc = flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info);
    c442:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	fs.offset = NVS_PARTITION_OFFSET;
    c444:	6021      	str	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    c446:	4d2e      	ldr	r5, [pc, #184]	; (c500 <flash_init+0xdc>)
    c448:	462a      	mov	r2, r5
    c44a:	f01e fa94 	bl	2a976 <z_impl_flash_get_page_info_by_offs>
	if (rc)
    c44e:	b120      	cbz	r0, c45a <flash_init+0x36>
		printk("Unable to get page info\n");
    c450:	482c      	ldr	r0, [pc, #176]	; (c504 <flash_init+0xe0>)
}
    c452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Flash Init failed\n");
    c456:	f01a bf0a 	b.w	2726e <printk>
	fs.sector_size = info.size;
    c45a:	686b      	ldr	r3, [r5, #4]
	rc = nvs_mount(&fs);
    c45c:	4620      	mov	r0, r4
	fs.sector_size = info.size;
    c45e:	81a3      	strh	r3, [r4, #12]
	fs.sector_count = 2048U; // NUMBER OF SECTORS total 0X800000 BYTES
    c460:	f44f 6300 	mov.w	r3, #2048	; 0x800
    c464:	81e3      	strh	r3, [r4, #14]
	rc = nvs_mount(&fs);
    c466:	f003 fb8b 	bl	fb80 <nvs_mount>
	if (rc)
    c46a:	b108      	cbz	r0, c470 <flash_init+0x4c>
		printk("Flash Init failed\n");
    c46c:	4826      	ldr	r0, [pc, #152]	; (c508 <flash_init+0xe4>)
    c46e:	e7f0      	b.n	c452 <flash_init+0x2e>
	rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    c470:	4d26      	ldr	r5, [pc, #152]	; (c50c <flash_init+0xe8>)
    c472:	2304      	movs	r3, #4
    c474:	462a      	mov	r2, r5
    c476:	2101      	movs	r1, #1
    c478:	4620      	mov	r0, r4
    c47a:	f01b fae7 	bl	27a4c <nvs_read>
	if (rc > 0)
    c47e:	2800      	cmp	r0, #0
    c480:	dd21      	ble.n	c4c6 <flash_init+0xa2>
		printk("Id: %d, button2_counter: %d\n",
    c482:	2101      	movs	r1, #1
    c484:	682a      	ldr	r2, [r5, #0]
    c486:	4822      	ldr	r0, [pc, #136]	; (c510 <flash_init+0xec>)
    c488:	f01a fef1 	bl	2726e <printk>
	rc = nvs_read(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c48c:	4c21      	ldr	r4, [pc, #132]	; (c514 <flash_init+0xf0>)
    c48e:	2304      	movs	r3, #4
    c490:	4622      	mov	r2, r4
    c492:	2102      	movs	r1, #2
    c494:	4818      	ldr	r0, [pc, #96]	; (c4f8 <flash_init+0xd4>)
    c496:	f01b fad9 	bl	27a4c <nvs_read>
	if (rc > 0)
    c49a:	2800      	cmp	r0, #0
    c49c:	dd1e      	ble.n	c4dc <flash_init+0xb8>
		printk("Id: %d, Current Position: %d\n",
    c49e:	6822      	ldr	r2, [r4, #0]
    c4a0:	2102      	movs	r1, #2
    c4a2:	481d      	ldr	r0, [pc, #116]	; (c518 <flash_init+0xf4>)
    c4a4:	f01a fee3 	bl	2726e <printk>
		if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS)
    c4a8:	4b1c      	ldr	r3, [pc, #112]	; (c51c <flash_init+0xf8>)
    c4aa:	681a      	ldr	r2, [r3, #0]
    c4ac:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
			C_Buffer_Free_Position = C_Buffer_Current_Position + 1;
    c4b0:	bf3e      	ittt	cc
    c4b2:	6822      	ldrcc	r2, [r4, #0]
    c4b4:	3201      	addcc	r2, #1
    c4b6:	601a      	strcc	r2, [r3, #0]
		if (C_Buffer_Free_Position == CIRCULAR_BUFFER_ELEMENTS)
    c4b8:	681a      	ldr	r2, [r3, #0]
    c4ba:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
    c4be:	d101      	bne.n	c4c4 <flash_init+0xa0>
			C_Buffer_Free_Position = 0;
    c4c0:	2200      	movs	r2, #0
    c4c2:	601a      	str	r2, [r3, #0]
}
    c4c4:	bd70      	pop	{r4, r5, r6, pc}
		printk("No Reboot counter found, adding it at id %d\n",
    c4c6:	2101      	movs	r1, #1
    c4c8:	4815      	ldr	r0, [pc, #84]	; (c520 <flash_init+0xfc>)
    c4ca:	f01a fed0 	bl	2726e <printk>
		(void)nvs_write(&fs, BOOT_POSITION, &button2_counter,
    c4ce:	2304      	movs	r3, #4
    c4d0:	462a      	mov	r2, r5
    c4d2:	2101      	movs	r1, #1
    c4d4:	4620      	mov	r0, r4
    c4d6:	f003 fd25 	bl	ff24 <nvs_write>
    c4da:	e7d7      	b.n	c48c <flash_init+0x68>
		printk("Current Position counter found, adding it at id %d\n",
    c4dc:	2102      	movs	r1, #2
    c4de:	4811      	ldr	r0, [pc, #68]	; (c524 <flash_init+0x100>)
    c4e0:	f01a fec5 	bl	2726e <printk>
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c4e4:	4622      	mov	r2, r4
}
    c4e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c4ea:	2304      	movs	r3, #4
    c4ec:	2102      	movs	r1, #2
    c4ee:	4802      	ldr	r0, [pc, #8]	; (c4f8 <flash_init+0xd4>)
    c4f0:	f003 bd18 	b.w	ff24 <nvs_write>
    c4f4:	0002d174 	.word	0x0002d174
    c4f8:	20009f08 	.word	0x20009f08
    c4fc:	0002ec2d 	.word	0x0002ec2d
    c500:	20009efc 	.word	0x20009efc
    c504:	0002ec4b 	.word	0x0002ec4b
    c508:	0002ec64 	.word	0x0002ec64
    c50c:	20009ef8 	.word	0x20009ef8
    c510:	0002ec77 	.word	0x0002ec77
    c514:	2002f170 	.word	0x2002f170
    c518:	0002ecc1 	.word	0x0002ecc1
    c51c:	2002f174 	.word	0x2002f174
    c520:	0002ec94 	.word	0x0002ec94
    c524:	0002ecdf 	.word	0x0002ecdf

0000c528 <send_bluetooth>:
{
    c528:	b084      	sub	sp, #16
    c52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c52e:	ac06      	add	r4, sp, #24
    c530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c534:	203d      	movs	r0, #61	; 0x3d
	uint32_t comprimento = buf.len;
    c536:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c53a:	f01f fdab 	bl	2c094 <k_malloc>
	int k = 0;
    c53e:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c540:	4605      	mov	r5, r0
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    c542:	f8df 8054 	ldr.w	r8, [pc, #84]	; c598 <send_bluetooth+0x70>
	while (k < comprimento - 1)
    c546:	1e77      	subs	r7, r6, #1
    c548:	42a7      	cmp	r7, r4
    c54a:	d91d      	bls.n	c588 <send_bluetooth+0x60>
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c54c:	42b4      	cmp	r4, r6
    c54e:	d301      	bcc.n	c554 <send_bluetooth+0x2c>
    c550:	2200      	movs	r2, #0
    c552:	e00f      	b.n	c574 <send_bluetooth+0x4c>
    c554:	2200      	movs	r2, #0
    c556:	1e6b      	subs	r3, r5, #1
			data[small_pkt] = buf.data[k];
    c558:	f104 0118 	add.w	r1, r4, #24
    c55c:	4469      	add	r1, sp
			small_pkt++;
    c55e:	3201      	adds	r2, #1
			*(packet_data + small_pkt) = buf.data[k];
    c560:	7909      	ldrb	r1, [r1, #4]
			small_pkt++;
    c562:	b292      	uxth	r2, r2
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c564:	2a3d      	cmp	r2, #61	; 0x3d
			*(packet_data + small_pkt) = buf.data[k];
    c566:	f803 1f01 	strb.w	r1, [r3, #1]!
			k++;
    c56a:	f104 0401 	add.w	r4, r4, #1
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c56e:	d001      	beq.n	c574 <send_bluetooth+0x4c>
    c570:	42a6      	cmp	r6, r4
    c572:	d8f1      	bhi.n	c558 <send_bluetooth+0x30>
		if (bt_nus_send(NULL, packet_data, small_pkt))
    c574:	4629      	mov	r1, r5
    c576:	2000      	movs	r0, #0
    c578:	f004 fbb0 	bl	10cdc <bt_nus_send>
    c57c:	2800      	cmp	r0, #0
    c57e:	d0e3      	beq.n	c548 <send_bluetooth+0x20>
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    c580:	4640      	mov	r0, r8
    c582:	f01a fe74 	bl	2726e <printk>
    c586:	e7df      	b.n	c548 <send_bluetooth+0x20>
	k_free(packet_data);
    c588:	4628      	mov	r0, r5
    c58a:	f01f fd7c 	bl	2c086 <k_free>
}
    c58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c592:	2000      	movs	r0, #0
    c594:	b004      	add	sp, #16
    c596:	4770      	bx	lr
    c598:	0002ed13 	.word	0x0002ed13

0000c59c <send_protobuf_thread>:
{
    c59c:	b510      	push	{r4, lr}
		k_sem_take(&send_proto, K_FOREVER);
    c59e:	4c05      	ldr	r4, [pc, #20]	; (c5b4 <send_protobuf_thread+0x18>)
    c5a0:	f04f 32ff 	mov.w	r2, #4294967295
    c5a4:	f04f 33ff 	mov.w	r3, #4294967295
    c5a8:	4620      	mov	r0, r4
    c5aa:	f01a fc73 	bl	26e94 <k_sem_take.constprop.0.isra.0>
		send_protobuf();
    c5ae:	f01a fc8c 	bl	26eca <send_protobuf>
	while (1)
    c5b2:	e7f5      	b.n	c5a0 <send_protobuf_thread+0x4>
    c5b4:	20008bf0 	.word	0x20008bf0

0000c5b8 <configure_all_buttons>:
{
    c5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    c5ba:	4c30      	ldr	r4, [pc, #192]	; (c67c <configure_all_buttons+0xc4>)
    c5bc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c5c0:	4620      	mov	r0, r4
    c5c2:	f7ff fb87 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c5c6:	4620      	mov	r0, r4
    c5c8:	f7ff f93a 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    c5cc:	492c      	ldr	r1, [pc, #176]	; (c680 <configure_all_buttons+0xc8>)
    c5ce:	4b2d      	ldr	r3, [pc, #180]	; (c684 <configure_all_buttons+0xcc>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    c5d0:	4c2d      	ldr	r4, [pc, #180]	; (c688 <configure_all_buttons+0xd0>)
    c5d2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c5d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    c5d8:	4620      	mov	r0, r4
    c5da:	608b      	str	r3, [r1, #8]
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c5dc:	4d2b      	ldr	r5, [pc, #172]	; (c68c <configure_all_buttons+0xd4>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    c5de:	f01a fc5b 	bl	26e98 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c5e2:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    c5e4:	4f2a      	ldr	r7, [pc, #168]	; (c690 <configure_all_buttons+0xd8>)
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c5e6:	2217      	movs	r2, #23
    c5e8:	4631      	mov	r1, r6
    c5ea:	4628      	mov	r0, r5
    c5ec:	f01a fe3f 	bl	2726e <printk>
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    c5f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c5f4:	4638      	mov	r0, r7
    c5f6:	f7ff fb6d 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c5fa:	4638      	mov	r0, r7
    c5fc:	f7ff f920 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c600:	4924      	ldr	r1, [pc, #144]	; (c694 <configure_all_buttons+0xdc>)
    c602:	4b25      	ldr	r3, [pc, #148]	; (c698 <configure_all_buttons+0xe0>)
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    c604:	4620      	mov	r0, r4
    c606:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    c60c:	4f23      	ldr	r7, [pc, #140]	; (c69c <configure_all_buttons+0xe4>)
    c60e:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    c610:	f01a fc42 	bl	26e98 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    c614:	2218      	movs	r2, #24
    c616:	4631      	mov	r1, r6
    c618:	4628      	mov	r0, r5
    c61a:	f01a fe28 	bl	2726e <printk>
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    c61e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c622:	4638      	mov	r0, r7
    c624:	f7ff fb56 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON3_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c628:	4638      	mov	r0, r7
    c62a:	f7ff f909 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c62e:	491c      	ldr	r1, [pc, #112]	; (c6a0 <configure_all_buttons+0xe8>)
    c630:	4b1c      	ldr	r3, [pc, #112]	; (c6a4 <configure_all_buttons+0xec>)
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    c632:	4620      	mov	r0, r4
    c634:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c636:	f44f 7380 	mov.w	r3, #256	; 0x100
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    c63a:	4f1b      	ldr	r7, [pc, #108]	; (c6a8 <configure_all_buttons+0xf0>)
    c63c:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    c63e:	f01a fc2b 	bl	26e98 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    c642:	2208      	movs	r2, #8
    c644:	4631      	mov	r1, r6
    c646:	4628      	mov	r0, r5
    c648:	f01a fe11 	bl	2726e <printk>
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    c64c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c650:	4638      	mov	r0, r7
    c652:	f7ff fb3f 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON4_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c656:	4638      	mov	r0, r7
    c658:	f7ff f8f2 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c65c:	4913      	ldr	r1, [pc, #76]	; (c6ac <configure_all_buttons+0xf4>)
    c65e:	4b14      	ldr	r3, [pc, #80]	; (c6b0 <configure_all_buttons+0xf8>)
	gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    c660:	4620      	mov	r0, r4
    c662:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c664:	f44f 7300 	mov.w	r3, #512	; 0x200
    c668:	608b      	str	r3, [r1, #8]
    c66a:	f01a fc15 	bl	26e98 <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    c66e:	4631      	mov	r1, r6
    c670:	4628      	mov	r0, r5
}
    c672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    c676:	2209      	movs	r2, #9
    c678:	f01a bdf9 	b.w	2726e <printk>
    c67c:	0002da20 	.word	0x0002da20
    c680:	20009f98 	.word	0x20009f98
    c684:	0000bbd5 	.word	0x0000bbd5
    c688:	0002d084 	.word	0x0002d084
    c68c:	0002ed37 	.word	0x0002ed37
    c690:	0002da18 	.word	0x0002da18
    c694:	20009f8c 	.word	0x20009f8c
    c698:	0000c079 	.word	0x0000c079
    c69c:	0002da10 	.word	0x0002da10
    c6a0:	20009f80 	.word	0x20009f80
    c6a4:	0000c059 	.word	0x0000c059
    c6a8:	0002da08 	.word	0x0002da08
    c6ac:	20009f74 	.word	0x20009f74
    c6b0:	0000c039 	.word	0x0000c039

0000c6b4 <configure_digital_inputs>:
{
    c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT);
    c6b6:	4c2e      	ldr	r4, [pc, #184]	; (c770 <configure_digital_inputs+0xbc>)
    c6b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c6bc:	4620      	mov	r0, r4
    c6be:	f7ff fb09 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 4 Value:%d \n", gpio_pin_get_dt(DIG_0_ADR));
    c6c2:	4620      	mov	r0, r4
    c6c4:	f7fe ff58 	bl	b578 <gpio_pin_get_dt>
    c6c8:	4601      	mov	r1, r0
    c6ca:	482a      	ldr	r0, [pc, #168]	; (c774 <configure_digital_inputs+0xc0>)
    c6cc:	f01a fdcf 	bl	2726e <printk>
	gpio_pin_interrupt_configure_dt(DIG_0_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c6d0:	4620      	mov	r0, r4
    c6d2:	f7ff f8b5 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c6d6:	4928      	ldr	r1, [pc, #160]	; (c778 <configure_digital_inputs+0xc4>)
    c6d8:	4b28      	ldr	r3, [pc, #160]	; (c77c <configure_digital_inputs+0xc8>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    c6da:	4c29      	ldr	r4, [pc, #164]	; (c780 <configure_digital_inputs+0xcc>)
    c6dc:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c6de:	2310      	movs	r3, #16
    c6e0:	4620      	mov	r0, r4
    c6e2:	608b      	str	r3, [r1, #8]
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    c6e4:	4d27      	ldr	r5, [pc, #156]	; (c784 <configure_digital_inputs+0xd0>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    c6e6:	f01a fbd7 	bl	26e98 <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    c6ea:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    c6ec:	4f26      	ldr	r7, [pc, #152]	; (c788 <configure_digital_inputs+0xd4>)
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    c6ee:	2204      	movs	r2, #4
    c6f0:	4631      	mov	r1, r6
    c6f2:	4628      	mov	r0, r5
    c6f4:	f01a fdbb 	bl	2726e <printk>
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    c6f8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c6fc:	4638      	mov	r0, r7
    c6fe:	f7ff fae9 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 5 Value:%d \n", gpio_pin_get_dt(DIG_1_ADR));
    c702:	4638      	mov	r0, r7
    c704:	f7fe ff38 	bl	b578 <gpio_pin_get_dt>
    c708:	4601      	mov	r1, r0
    c70a:	4820      	ldr	r0, [pc, #128]	; (c78c <configure_digital_inputs+0xd8>)
    c70c:	f01a fdaf 	bl	2726e <printk>
	gpio_pin_interrupt_configure_dt(DIG_1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c710:	4638      	mov	r0, r7
    c712:	f7ff f895 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c716:	491e      	ldr	r1, [pc, #120]	; (c790 <configure_digital_inputs+0xdc>)
    c718:	4b1e      	ldr	r3, [pc, #120]	; (c794 <configure_digital_inputs+0xe0>)
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    c71a:	4f1f      	ldr	r7, [pc, #124]	; (c798 <configure_digital_inputs+0xe4>)
    c71c:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c71e:	2320      	movs	r3, #32
	gpio_add_callback(DIG_1.port, DIG_1_CB);
    c720:	4620      	mov	r0, r4
    c722:	608b      	str	r3, [r1, #8]
    c724:	f01a fbb8 	bl	26e98 <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    c728:	2205      	movs	r2, #5
    c72a:	4631      	mov	r1, r6
    c72c:	4628      	mov	r0, r5
    c72e:	f01a fd9e 	bl	2726e <printk>
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    c732:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c736:	4638      	mov	r0, r7
    c738:	f7ff facc 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 6 Value:%d \n", gpio_pin_get_dt(DIG_2_ADR));
    c73c:	4638      	mov	r0, r7
    c73e:	f7fe ff1b 	bl	b578 <gpio_pin_get_dt>
    c742:	4601      	mov	r1, r0
    c744:	4815      	ldr	r0, [pc, #84]	; (c79c <configure_digital_inputs+0xe8>)
    c746:	f01a fd92 	bl	2726e <printk>
	gpio_pin_interrupt_configure_dt(DIG_2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c74a:	4638      	mov	r0, r7
    c74c:	f7ff f878 	bl	b840 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    c750:	4913      	ldr	r1, [pc, #76]	; (c7a0 <configure_digital_inputs+0xec>)
    c752:	4b14      	ldr	r3, [pc, #80]	; (c7a4 <configure_digital_inputs+0xf0>)
	gpio_add_callback(DIG_2.port, DIG_2_CB);
    c754:	4620      	mov	r0, r4
    c756:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c758:	2340      	movs	r3, #64	; 0x40
    c75a:	608b      	str	r3, [r1, #8]
    c75c:	f01a fb9c 	bl	26e98 <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    c760:	4631      	mov	r1, r6
    c762:	4628      	mov	r0, r5
}
    c764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    c768:	2206      	movs	r2, #6
    c76a:	f01a bd80 	b.w	2726e <printk>
    c76e:	bf00      	nop
    c770:	0002da00 	.word	0x0002da00
    c774:	0002ed53 	.word	0x0002ed53
    c778:	20009f68 	.word	0x20009f68
    c77c:	0000b5d9 	.word	0x0000b5d9
    c780:	0002d06c 	.word	0x0002d06c
    c784:	0002ed6b 	.word	0x0002ed6b
    c788:	0002d9f8 	.word	0x0002d9f8
    c78c:	0002ed8e 	.word	0x0002ed8e
    c790:	20009f5c 	.word	0x20009f5c
    c794:	0000b5fd 	.word	0x0000b5fd
    c798:	0002d9f0 	.word	0x0002d9f0
    c79c:	0002eda6 	.word	0x0002eda6
    c7a0:	20009f50 	.word	0x20009f50
    c7a4:	0000b621 	.word	0x0000b621

0000c7a8 <configure_led>:
{
    c7a8:	b508      	push	{r3, lr}
	gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    c7aa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c7ae:	480a      	ldr	r0, [pc, #40]	; (c7d8 <configure_led+0x30>)
    c7b0:	f7ff fa90 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    c7b4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c7b8:	4808      	ldr	r0, [pc, #32]	; (c7dc <configure_led+0x34>)
    c7ba:	f7ff fa8b 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    c7be:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c7c2:	4807      	ldr	r0, [pc, #28]	; (c7e0 <configure_led+0x38>)
    c7c4:	f7ff fa86 	bl	bcd4 <gpio_pin_configure_dt.isra.0>
}
    c7c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    c7cc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    c7d0:	4804      	ldr	r0, [pc, #16]	; (c7e4 <configure_led+0x3c>)
    c7d2:	f7ff ba7f 	b.w	bcd4 <gpio_pin_configure_dt.isra.0>
    c7d6:	bf00      	nop
    c7d8:	0002d9e8 	.word	0x0002d9e8
    c7dc:	0002d9e0 	.word	0x0002d9e0
    c7e0:	0002d9d8 	.word	0x0002d9d8
    c7e4:	0002d9d0 	.word	0x0002d9d0

0000c7e8 <turn_off_all_leds>:
{
    c7e8:	b508      	push	{r3, lr}
	gpio_pin_set_dt(LED1, OFF);
    c7ea:	2100      	movs	r1, #0
    c7ec:	4808      	ldr	r0, [pc, #32]	; (c810 <turn_off_all_leds+0x28>)
    c7ee:	f7ff f9bf 	bl	bb70 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED2, OFF);
    c7f2:	2100      	movs	r1, #0
    c7f4:	4807      	ldr	r0, [pc, #28]	; (c814 <turn_off_all_leds+0x2c>)
    c7f6:	f7ff f9bb 	bl	bb70 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED3, OFF);
    c7fa:	2100      	movs	r1, #0
    c7fc:	4806      	ldr	r0, [pc, #24]	; (c818 <turn_off_all_leds+0x30>)
    c7fe:	f7ff f9b7 	bl	bb70 <gpio_pin_set_dt.isra.0>
}
    c802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_set_dt(LED4, OFF);
    c806:	2100      	movs	r1, #0
    c808:	4804      	ldr	r0, [pc, #16]	; (c81c <turn_off_all_leds+0x34>)
    c80a:	f7ff b9b1 	b.w	bb70 <gpio_pin_set_dt.isra.0>
    c80e:	bf00      	nop
    c810:	0002d9e8 	.word	0x0002d9e8
    c814:	0002d9e0 	.word	0x0002d9e0
    c818:	0002d9d8 	.word	0x0002d9d8
    c81c:	0002d9d0 	.word	0x0002d9d0

0000c820 <configure_adc>:
{
    c820:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    c822:	2500      	movs	r5, #0
    c824:	4c12      	ldr	r4, [pc, #72]	; (c870 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev))
    c826:	f854 0c06 	ldr.w	r0, [r4, #-6]
    c82a:	f01f fa06 	bl	2bc3a <z_device_is_ready>
    c82e:	b920      	cbnz	r0, c83a <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    c830:	4810      	ldr	r0, [pc, #64]	; (c874 <configure_adc+0x54>)
}
    c832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    c836:	f01a bd1a 	b.w	2726e <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    c83a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    c83e:	b16b      	cbz	r3, c85c <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    c840:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    c844:	6883      	ldr	r3, [r0, #8]
    c846:	4621      	mov	r1, r4
    c848:	681b      	ldr	r3, [r3, #0]
    c84a:	4798      	blx	r3
		if (err < 0)
    c84c:	1e02      	subs	r2, r0, #0
    c84e:	da08      	bge.n	c862 <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    c850:	4629      	mov	r1, r5
}
    c852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    c856:	4808      	ldr	r0, [pc, #32]	; (c878 <configure_adc+0x58>)
    c858:	f01a bd09 	b.w	2726e <printk>
		return -ENOTSUP;
    c85c:	f06f 0285 	mvn.w	r2, #133	; 0x85
    c860:	e7f6      	b.n	c850 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    c862:	3501      	adds	r5, #1
    c864:	2d06      	cmp	r5, #6
    c866:	f104 0414 	add.w	r4, r4, #20
    c86a:	d1dc      	bne.n	c826 <configure_adc+0x6>
}
    c86c:	bd38      	pop	{r3, r4, r5, pc}
    c86e:	bf00      	nop
    c870:	0002d95e 	.word	0x0002d95e
    c874:	0002edbe 	.word	0x0002edbe
    c878:	0002eddf 	.word	0x0002eddf

0000c87c <main>:
{
    c87c:	b570      	push	{r4, r5, r6, lr}
    c87e:	b08c      	sub	sp, #48	; 0x30
	return z_impl_k_mutex_init(mutex);
    c880:	4865      	ldr	r0, [pc, #404]	; (ca18 <main+0x19c>)
    c882:	f01f fa33 	bl	2bcec <z_impl_k_mutex_init>
	configure_led();
    c886:	f7ff ff8f 	bl	c7a8 <configure_led>
	turn_off_all_leds();
    c88a:	f7ff ffad 	bl	c7e8 <turn_off_all_leds>
	configure_all_buttons();
    c88e:	f7ff fe93 	bl	c5b8 <configure_all_buttons>
	configure_digital_inputs();
    c892:	f7ff ff0f 	bl	c6b4 <configure_digital_inputs>
	configure_adc();
    c896:	f7ff ffc3 	bl	c820 <configure_adc>
    c89a:	4d60      	ldr	r5, [pc, #384]	; (ca1c <main+0x1a0>)
    c89c:	4628      	mov	r0, r5
    c89e:	f01f f9cc 	bl	2bc3a <z_device_is_ready>
	if (!device_is_ready(uart))
    c8a2:	b1d8      	cbz	r0, c8dc <main+0x60>
	rx = k_malloc(sizeof(*rx));
    c8a4:	206c      	movs	r0, #108	; 0x6c
    c8a6:	f01f fbf5 	bl	2c094 <k_malloc>
	if (rx)
    c8aa:	4604      	mov	r4, r0
    c8ac:	b1b0      	cbz	r0, c8dc <main+0x60>
		rx->len = 0;
    c8ae:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    c8b0:	495b      	ldr	r1, [pc, #364]	; (ca20 <main+0x1a4>)
		rx->len = 0;
    c8b2:	f8a0 6068 	strh.w	r6, [r0, #104]	; 0x68
	k_work_init_delayable(&uart_work, uart_work_handler);
    c8b6:	485b      	ldr	r0, [pc, #364]	; (ca24 <main+0x1a8>)
    c8b8:	f014 ff5a 	bl	21770 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    c8bc:	68ab      	ldr	r3, [r5, #8]
    c8be:	681b      	ldr	r3, [r3, #0]
    c8c0:	b973      	cbnz	r3, c8e0 <main+0x64>
		k_free(rx);
    c8c2:	4620      	mov	r0, r4
    c8c4:	f01f fbdf 	bl	2c086 <k_free>
		LOG_ERR("Cannot initialize UART callback");
    c8c8:	4b57      	ldr	r3, [pc, #348]	; (ca28 <main+0x1ac>)
    c8ca:	2201      	movs	r2, #1
    c8cc:	9302      	str	r3, [sp, #8]
    c8ce:	2300      	movs	r3, #0
    c8d0:	4956      	ldr	r1, [pc, #344]	; (ca2c <main+0x1b0>)
    c8d2:	4618      	mov	r0, r3
    c8d4:	e9cd 3300 	strd	r3, r3, [sp]
    c8d8:	f01a fabd 	bl	26e56 <z_log_msg_runtime_create.constprop.0>
		error();
    c8dc:	f01a fb0b 	bl	26ef6 <error>
	return api->callback_set(dev, callback, user_data);
    c8e0:	4632      	mov	r2, r6
    c8e2:	4628      	mov	r0, r5
    c8e4:	4952      	ldr	r1, [pc, #328]	; (ca30 <main+0x1b4>)
    c8e6:	4798      	blx	r3
	if (err)
    c8e8:	2800      	cmp	r0, #0
    c8ea:	d1ea      	bne.n	c8c2 <main+0x46>
	tx = k_malloc(sizeof(*tx));
    c8ec:	206c      	movs	r0, #108	; 0x6c
    c8ee:	f01f fbd1 	bl	2c094 <k_malloc>
	if (tx)
    c8f2:	4606      	mov	r6, r0
    c8f4:	2800      	cmp	r0, #0
    c8f6:	d0f1      	beq.n	c8dc <main+0x60>
		pos = snprintf(tx->data, sizeof(tx->data),
    c8f8:	1d03      	adds	r3, r0, #4
    c8fa:	4618      	mov	r0, r3
    c8fc:	494d      	ldr	r1, [pc, #308]	; (ca34 <main+0x1b8>)
    c8fe:	f01f fd54 	bl	2c3aa <strcpy>
		tx->len = pos;
    c902:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    c904:	4601      	mov	r1, r0
		tx->len = pos;
    c906:	f8a6 2068 	strh.w	r2, [r6, #104]	; 0x68
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    c90a:	4628      	mov	r0, r5
    c90c:	f01a faba 	bl	26e84 <uart_tx.constprop.0>
	if (err)
    c910:	4601      	mov	r1, r0
    c912:	b118      	cbz	r0, c91c <main+0xa0>
		printf("Cannot display welcome message (err: %d)", err);
    c914:	4848      	ldr	r0, [pc, #288]	; (ca38 <main+0x1bc>)
    c916:	f018 f9a5 	bl	24c64 <iprintf>
	if (err)
    c91a:	e7df      	b.n	c8dc <main+0x60>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_WAIT_FOR_RX);
    c91c:	4628      	mov	r0, r5
    c91e:	1d21      	adds	r1, r4, #4
    c920:	f01a faa8 	bl	26e74 <uart_rx_enable.constprop.0>
	if (err)
    c924:	2800      	cmp	r0, #0
    c926:	d1d9      	bne.n	c8dc <main+0x60>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    c928:	4844      	ldr	r0, [pc, #272]	; (ca3c <main+0x1c0>)
    c92a:	f009 f8c5 	bl	15ab8 <bt_conn_auth_cb_register>
		if (err)
    c92e:	b128      	cbz	r0, c93c <main+0xc0>
			printk("Failed to register authorization callbacks.\n");
    c930:	4843      	ldr	r0, [pc, #268]	; (ca40 <main+0x1c4>)
}
    c932:	b00c      	add	sp, #48	; 0x30
    c934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    c938:	f01a bc99 	b.w	2726e <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    c93c:	4841      	ldr	r0, [pc, #260]	; (ca44 <main+0x1c8>)
    c93e:	f009 f8d5 	bl	15aec <bt_conn_auth_info_cb_register>
		if (err)
    c942:	b108      	cbz	r0, c948 <main+0xcc>
			printk("Failed to register authorization info callbacks.\n");
    c944:	4840      	ldr	r0, [pc, #256]	; (ca48 <main+0x1cc>)
    c946:	e7f4      	b.n	c932 <main+0xb6>
	err = bt_enable(NULL);
    c948:	f006 ff68 	bl	1381c <bt_enable>
	if (err)
    c94c:	2800      	cmp	r0, #0
    c94e:	d1c5      	bne.n	c8dc <main+0x60>
	printf("Bluetooth initialized \n\r");
    c950:	483e      	ldr	r0, [pc, #248]	; (ca4c <main+0x1d0>)
    c952:	f018 f987 	bl	24c64 <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    c956:	483e      	ldr	r0, [pc, #248]	; (ca50 <main+0x1d4>)
    c958:	f018 f984 	bl	24c64 <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    c95c:	483d      	ldr	r0, [pc, #244]	; (ca54 <main+0x1d8>)
    c95e:	f018 f981 	bl	24c64 <iprintf>
	z_impl_k_sem_give(sem);
    c962:	483d      	ldr	r0, [pc, #244]	; (ca58 <main+0x1dc>)
    c964:	f014 fa80 	bl	20e68 <z_impl_k_sem_give>
	err = bt_nus_init(&nus_cb);
    c968:	483c      	ldr	r0, [pc, #240]	; (ca5c <main+0x1e0>)
    c96a:	f004 f9ab 	bl	10cc4 <bt_nus_init>
	if (err)
    c96e:	4601      	mov	r1, r0
    c970:	b128      	cbz	r0, c97e <main+0x102>
		printf("Failed to initialize UART service (err: %d)", err);
    c972:	483b      	ldr	r0, [pc, #236]	; (ca60 <main+0x1e4>)
}
    c974:	b00c      	add	sp, #48	; 0x30
    c976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    c97a:	f018 b973 	b.w	24c64 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    c97e:	4d39      	ldr	r5, [pc, #228]	; (ca64 <main+0x1e8>)
    c980:	ac07      	add	r4, sp, #28
    c982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c986:	682b      	ldr	r3, [r5, #0]
    c988:	2501      	movs	r5, #1
    c98a:	6023      	str	r3, [r4, #0]
    c98c:	2202      	movs	r2, #2
    c98e:	4b36      	ldr	r3, [pc, #216]	; (ca68 <main+0x1ec>)
    c990:	4936      	ldr	r1, [pc, #216]	; (ca6c <main+0x1f0>)
    c992:	9500      	str	r5, [sp, #0]
    c994:	a807      	add	r0, sp, #28
    c996:	f007 fe35 	bl	14604 <bt_le_adv_start>
	if (err)
    c99a:	4604      	mov	r4, r0
    c99c:	b128      	cbz	r0, c9aa <main+0x12e>
		printf("Advertising failed to start (err %d)", err);
    c99e:	4601      	mov	r1, r0
    c9a0:	4833      	ldr	r0, [pc, #204]	; (ca70 <main+0x1f4>)
    c9a2:	f018 f95f 	bl	24c64 <iprintf>
}
    c9a6:	b00c      	add	sp, #48	; 0x30
    c9a8:	bd70      	pop	{r4, r5, r6, pc}
	flag = 1; // print ad values once
    c9aa:	4b32      	ldr	r3, [pc, #200]	; (ca74 <main+0x1f8>)
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    c9ac:	f242 6067 	movw	r0, #9831	; 0x2667
    c9b0:	2100      	movs	r1, #0
    c9b2:	601d      	str	r5, [r3, #0]
    c9b4:	f01a fa76 	bl	26ea4 <k_sleep.isra.0>
	flash_init();
    c9b8:	f7ff fd34 	bl	c424 <flash_init>
    c9bc:	4e2e      	ldr	r6, [pc, #184]	; (ca78 <main+0x1fc>)
    c9be:	4630      	mov	r0, r6
    c9c0:	f01f f93b 	bl	2bc3a <z_device_is_ready>
	if (!device_is_ready(uart_2))
    c9c4:	2800      	cmp	r0, #0
    c9c6:	d089      	beq.n	c8dc <main+0x60>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    c9c8:	206c      	movs	r0, #108	; 0x6c
    c9ca:	f01f fb63 	bl	2c094 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    c9ce:	492b      	ldr	r1, [pc, #172]	; (ca7c <main+0x200>)
	rx_uart2->len = 0;
    c9d0:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    c9d4:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    c9d6:	482a      	ldr	r0, [pc, #168]	; (ca80 <main+0x204>)
    c9d8:	f014 feca 	bl	21770 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    c9dc:	68b3      	ldr	r3, [r6, #8]
    c9de:	681b      	ldr	r3, [r3, #0]
    c9e0:	b11b      	cbz	r3, c9ea <main+0x16e>
	return api->callback_set(dev, callback, user_data);
    c9e2:	4622      	mov	r2, r4
    c9e4:	4630      	mov	r0, r6
    c9e6:	4927      	ldr	r1, [pc, #156]	; (ca84 <main+0x208>)
    c9e8:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), UART_WAIT_FOR_RX);
    c9ea:	1d29      	adds	r1, r5, #4
    c9ec:	4822      	ldr	r0, [pc, #136]	; (ca78 <main+0x1fc>)
    c9ee:	f01a fa41 	bl	26e74 <uart_rx_enable.constprop.0>
	if (err)
    c9f2:	4e25      	ldr	r6, [pc, #148]	; (ca88 <main+0x20c>)
    c9f4:	ad05      	add	r5, sp, #20
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    c9f6:	3401      	adds	r4, #1
    c9f8:	e896 0003 	ldmia.w	r6, {r0, r1}
    c9fc:	e885 0003 	stmia.w	r5, {r0, r1}
	gpio_pin_set_dt(&led, value);
    ca00:	4628      	mov	r0, r5
    ca02:	f004 0101 	and.w	r1, r4, #1
    ca06:	f7ff f8b3 	bl	bb70 <gpio_pin_set_dt.isra.0>
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
    ca0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ca0e:	2100      	movs	r1, #0
    ca10:	f01a fa48 	bl	26ea4 <k_sleep.isra.0>
	for (;;)
    ca14:	e7ef      	b.n	c9f6 <main+0x17a>
    ca16:	bf00      	nop
    ca18:	20009f3c 	.word	0x20009f3c
    ca1c:	0002d0e4 	.word	0x0002d0e4
    ca20:	0000b755 	.word	0x0000b755
    ca24:	20009270 	.word	0x20009270
    ca28:	0002ee01 	.word	0x0002ee01
    ca2c:	0002d704 	.word	0x0002d704
    ca30:	0000beb1 	.word	0x0000beb1
    ca34:	0002ee21 	.word	0x0002ee21
    ca38:	0002ee48 	.word	0x0002ee48
    ca3c:	20008424 	.word	0x20008424
    ca40:	0002ee71 	.word	0x0002ee71
    ca44:	20008414 	.word	0x20008414
    ca48:	0002ee9e 	.word	0x0002ee9e
    ca4c:	0002eed0 	.word	0x0002eed0
    ca50:	0002eee9 	.word	0x0002eee9
    ca54:	0002ef0a 	.word	0x0002ef0a
    ca58:	20008b60 	.word	0x20008b60
    ca5c:	20008408 	.word	0x20008408
    ca60:	0002ef33 	.word	0x0002ef33
    ca64:	0002d75c 	.word	0x0002d75c
    ca68:	0002d940 	.word	0x0002d940
    ca6c:	0002d948 	.word	0x0002d948
    ca70:	0002ef5f 	.word	0x0002ef5f
    ca74:	20009f38 	.word	0x20009f38
    ca78:	0002d0cc 	.word	0x0002d0cc
    ca7c:	0000b701 	.word	0x0000b701
    ca80:	20009240 	.word	0x20009240
    ca84:	0000c0f1 	.word	0x0000c0f1
    ca88:	0002d9e0 	.word	0x0002d9e0

0000ca8c <adc_raw_to_millivolts_dt.constprop.0.isra.0>:
	if (!spec->channel_cfg_dt_node_exists) {
    ca8c:	4b10      	ldr	r3, [pc, #64]	; (cad0 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x44>)
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    ca8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!spec->channel_cfg_dt_node_exists) {
    ca90:	795a      	ldrb	r2, [r3, #5]
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    ca92:	4605      	mov	r5, r0
	if (!spec->channel_cfg_dt_node_exists) {
    ca94:	b1d2      	cbz	r2, cacc <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    ca96:	79da      	ldrb	r2, [r3, #7]
	resolution = spec->resolution;
    ca98:	7c1c      	ldrb	r4, [r3, #16]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    ca9a:	2a04      	cmp	r2, #4
	const struct adc_driver_api *api =
    ca9c:	bf09      	itett	eq
    ca9e:	681a      	ldreq	r2, [r3, #0]
		vref_mv = spec->vref_mv;
    caa0:	89d9      	ldrhne	r1, [r3, #14]
	return api->ref_internal;
    caa2:	6892      	ldreq	r2, [r2, #8]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    caa4:	8911      	ldrheq	r1, [r2, #8]
	if (spec->channel_cfg.differential) {
    caa6:	7a9a      	ldrb	r2, [r3, #10]
    caa8:	0692      	lsls	r2, r2, #26
	int32_t adc_mv = *valp * ref_mv;
    caaa:	6802      	ldr	r2, [r0, #0]
		resolution -= 1U;
    caac:	bf48      	it	mi
    caae:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int32_t adc_mv = *valp * ref_mv;
    cab2:	fb01 f202 	mul.w	r2, r1, r2
	int ret = adc_gain_invert(gain, &adc_mv);
    cab6:	7998      	ldrb	r0, [r3, #6]
    cab8:	a901      	add	r1, sp, #4
		resolution -= 1U;
    caba:	bf48      	it	mi
    cabc:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    cabe:	9201      	str	r2, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    cac0:	f00d fdc2 	bl	1a648 <adc_gain_invert>
	if (ret == 0) {
    cac4:	b910      	cbnz	r0, cacc <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
		*valp = (adc_mv >> resolution);
    cac6:	9b01      	ldr	r3, [sp, #4]
    cac8:	4123      	asrs	r3, r4
    caca:	602b      	str	r3, [r5, #0]
}
    cacc:	b003      	add	sp, #12
    cace:	bd30      	pop	{r4, r5, pc}
    cad0:	0002d958 	.word	0x0002d958

0000cad4 <flash_button2_counter>:
void flash_button2_counter(void){
    cad4:	b510      	push	{r4, lr}
    button2_counter++;
    cad6:	4c0d      	ldr	r4, [pc, #52]	; (cb0c <flash_button2_counter+0x38>)
	(void)nvs_write(
    cad8:	2101      	movs	r1, #1
    button2_counter++;
    cada:	6823      	ldr	r3, [r4, #0]
	(void)nvs_write(
    cadc:	4622      	mov	r2, r4
    button2_counter++;
    cade:	3301      	adds	r3, #1
    cae0:	6023      	str	r3, [r4, #0]
	(void)nvs_write(
    cae2:	480b      	ldr	r0, [pc, #44]	; (cb10 <flash_button2_counter+0x3c>)
    cae4:	2304      	movs	r3, #4
    cae6:	f003 fa1d 	bl	ff24 <nvs_write>
    rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    caea:	2304      	movs	r3, #4
    caec:	4622      	mov	r2, r4
    caee:	2101      	movs	r1, #1
    caf0:	4807      	ldr	r0, [pc, #28]	; (cb10 <flash_button2_counter+0x3c>)
    caf2:	f01a ffab 	bl	27a4c <nvs_read>
	if (rc > 0) { /* item was found, show it */
    caf6:	2800      	cmp	r0, #0
    caf8:	dd06      	ble.n	cb08 <flash_button2_counter+0x34>
		printk("Id: %d, button2_counter: %d\n",
    cafa:	6822      	ldr	r2, [r4, #0]
    cafc:	2101      	movs	r1, #1
}
    cafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Id: %d, button2_counter: %d\n",
    cb02:	4804      	ldr	r0, [pc, #16]	; (cb14 <flash_button2_counter+0x40>)
    cb04:	f01a bbb3 	b.w	2726e <printk>
}
    cb08:	bd10      	pop	{r4, pc}
    cb0a:	bf00      	nop
    cb0c:	20009ef8 	.word	0x20009ef8
    cb10:	20009f08 	.word	0x20009f08
    cb14:	0002ec77 	.word	0x0002ec77

0000cb18 <fill_date>:
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    cb18:	b573      	push	{r0, r1, r4, r5, r6, lr}
				   part[0]=field_date[0];
    cb1a:	780b      	ldrb	r3, [r1, #0]
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    cb1c:	4604      	mov	r4, r0
				   part[0]=field_date[0];
    cb1e:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[1];
    cb22:	784b      	ldrb	r3, [r1, #1]
           position.t.tm_mday=atoi(part);
    cb24:	a801      	add	r0, sp, #4
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    cb26:	460d      	mov	r5, r1
           part[1]=field_date[1];
    cb28:	f88d 3005 	strb.w	r3, [sp, #5]
           position.t.tm_mday=atoi(part);
    cb2c:	f01f faba 	bl	2c0a4 <atoi>
    cb30:	4e1b      	ldr	r6, [pc, #108]	; (cba0 <fill_date+0x88>)
    cb32:	61f0      	str	r0, [r6, #28]
				   part[0]=field_date[2];
    cb34:	78ab      	ldrb	r3, [r5, #2]
				   position.t.tm_mon=(atoi(part)-1); 	// Month, where 0 = jan
    cb36:	a801      	add	r0, sp, #4
				   part[0]=field_date[2];
    cb38:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[3];
    cb3c:	78eb      	ldrb	r3, [r5, #3]
    cb3e:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_mon=(atoi(part)-1); 	// Month, where 0 = jan
    cb42:	f01f faaf 	bl	2c0a4 <atoi>
    cb46:	3801      	subs	r0, #1
    cb48:	6230      	str	r0, [r6, #32]
				   part[0]=field_date[4];
    cb4a:	792b      	ldrb	r3, [r5, #4]
				   position.t.tm_year=atoi(part);	
    cb4c:	a801      	add	r0, sp, #4
				   part[0]=field_date[4];
    cb4e:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[5];
    cb52:	796b      	ldrb	r3, [r5, #5]
    cb54:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_year=atoi(part);	
    cb58:	f01f faa4 	bl	2c0a4 <atoi>
    cb5c:	6270      	str	r0, [r6, #36]	; 0x24
				   part[0]=field_time[0];
    cb5e:	7823      	ldrb	r3, [r4, #0]
				   position.t.tm_hour=atoi(part);	
    cb60:	a801      	add	r0, sp, #4
				   part[0]=field_time[0];
    cb62:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[1];
    cb66:	7863      	ldrb	r3, [r4, #1]
    cb68:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_hour=atoi(part);	
    cb6c:	f01f fa9a 	bl	2c0a4 <atoi>
    cb70:	61b0      	str	r0, [r6, #24]
				   part[0]=field_time[2];
    cb72:	78a3      	ldrb	r3, [r4, #2]
				   position.t.tm_min=atoi(part);	
    cb74:	a801      	add	r0, sp, #4
				   part[0]=field_time[2];
    cb76:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[3];
    cb7a:	78e3      	ldrb	r3, [r4, #3]
    cb7c:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_min=atoi(part);	
    cb80:	f01f fa90 	bl	2c0a4 <atoi>
    cb84:	6170      	str	r0, [r6, #20]
				   part[0]=field_time[4];
    cb86:	7923      	ldrb	r3, [r4, #4]
				   position.t.tm_sec=atoi(part);	
    cb88:	a801      	add	r0, sp, #4
				   part[0]=field_time[4];
    cb8a:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[5];
    cb8e:	7963      	ldrb	r3, [r4, #5]
    cb90:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_sec=atoi(part);	
    cb94:	f01f fa86 	bl	2c0a4 <atoi>
    cb98:	6130      	str	r0, [r6, #16]
}
    cb9a:	b002      	add	sp, #8
    cb9c:	bd70      	pop	{r4, r5, r6, pc}
    cb9e:	bf00      	nop
    cba0:	20009ec4 	.word	0x20009ec4

0000cba4 <time_stamp_function>:
uint64_t time_stamp_function(void) {
    cba4:	b510      	push	{r4, lr}
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    cba6:	4c15      	ldr	r4, [pc, #84]	; (cbfc <time_stamp_function+0x58>)
uint64_t time_stamp_function(void) {
    cba8:	b08a      	sub	sp, #40	; 0x28
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    cbaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    t_of_day = mktime(&t);
    cbac:	a801      	add	r0, sp, #4
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    cbae:	3364      	adds	r3, #100	; 0x64
    cbb0:	9306      	str	r3, [sp, #24]
    t.tm_mon = position.t.tm_mon;         // Month, where 0 = jan
    cbb2:	6a23      	ldr	r3, [r4, #32]
    cbb4:	9305      	str	r3, [sp, #20]
    t.tm_mday = position.t.tm_mday;       // Day of the month
    cbb6:	69e3      	ldr	r3, [r4, #28]
    cbb8:	9304      	str	r3, [sp, #16]
    t.tm_hour = position.t.tm_hour;
    cbba:	69a3      	ldr	r3, [r4, #24]
    cbbc:	9303      	str	r3, [sp, #12]
    t.tm_min = position.t.tm_min;
    cbbe:	6963      	ldr	r3, [r4, #20]
    cbc0:	9302      	str	r3, [sp, #8]
    t.tm_sec = position.t.tm_sec;
    cbc2:	6923      	ldr	r3, [r4, #16]
    cbc4:	9301      	str	r3, [sp, #4]
    t.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
    cbc6:	f04f 33ff 	mov.w	r3, #4294967295
    cbca:	9309      	str	r3, [sp, #36]	; 0x24
    t_of_day = mktime(&t);
    cbcc:	f017 faac 	bl	24128 <mktime>
    if (position.gps_fixed==0){t_of_day=k_uptime_get()/1000;}
    cbd0:	7b23      	ldrb	r3, [r4, #12]
    cbd2:	b983      	cbnz	r3, cbf6 <time_stamp_function+0x52>
	return z_impl_k_uptime_ticks();
    cbd4:	f01f f968 	bl	2bea8 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    cbd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cbdc:	fba0 0302 	umull	r0, r3, r0, r2
    cbe0:	fb02 3101 	mla	r1, r2, r1, r3
    cbe4:	0bc0      	lsrs	r0, r0, #15
    cbe6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    cbea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cbee:	2300      	movs	r3, #0
    cbf0:	0bc9      	lsrs	r1, r1, #15
    cbf2:	f7fc f92d 	bl	8e50 <__aeabi_ldivmod>
}
    cbf6:	b00a      	add	sp, #40	; 0x28
    cbf8:	bd10      	pop	{r4, pc}
    cbfa:	bf00      	nop
    cbfc:	20009ec4 	.word	0x20009ec4

0000cc00 <values_of_gnss_module>:
Gnss values_of_gnss_module(void){
    cc00:	b570      	push	{r4, r5, r6, lr}
  gnss_return_value.latitude=position.latitude;
    cc02:	4b05      	ldr	r3, [pc, #20]	; (cc18 <values_of_gnss_module+0x18>)
Gnss values_of_gnss_module(void){
    cc04:	4604      	mov	r4, r0
  gnss_return_value.latitude=position.latitude;
    cc06:	685e      	ldr	r6, [r3, #4]
  gnss_return_value.longitude=position.longitude;
    cc08:	689d      	ldr	r5, [r3, #8]
  gnss_return_value.timestamp=time_stamp_function();
    cc0a:	f7ff ffcb 	bl	cba4 <time_stamp_function>
  return gnss_return_value;
    cc0e:	6066      	str	r6, [r4, #4]
  gnss_return_value.timestamp=time_stamp_function();
    cc10:	6020      	str	r0, [r4, #0]
  return gnss_return_value;
    cc12:	60a5      	str	r5, [r4, #8]
}
    cc14:	4620      	mov	r0, r4
    cc16:	bd70      	pop	{r4, r5, r6, pc}
    cc18:	20009ec4 	.word	0x20009ec4

0000cc1c <values_of_analog_sensor>:
Analog values_of_analog_sensor(uint8_t channel){
    cc1c:	b538      	push	{r3, r4, r5, lr}
    cc1e:	460d      	mov	r5, r1
    cc20:	4604      	mov	r4, r0
  analog_return_value.timestamp=time_stamp_function();
    cc22:	f7ff ffbf 	bl	cba4 <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    cc26:	4b03      	ldr	r3, [pc, #12]	; (cc34 <values_of_analog_sensor+0x18>)
    cc28:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
  return analog_return_value;
    cc2c:	e9c4 0300 	strd	r0, r3, [r4]
}
    cc30:	4620      	mov	r0, r4
    cc32:	bd38      	pop	{r3, r4, r5, pc}
    cc34:	2002f7a8 	.word	0x2002f7a8

0000cc38 <values_of_ntc_sensor>:
Ntc values_of_ntc_sensor(uint8_t sensor_number){
    cc38:	b570      	push	{r4, r5, r6, lr}
    cc3a:	460d      	mov	r5, r1
    cc3c:	4604      	mov	r4, r0
  ntc_return.timestamp=time_stamp_function();
    cc3e:	f7ff ffb1 	bl	cba4 <time_stamp_function>
  switch (sensor_number){
    cc42:	2d02      	cmp	r5, #2
Ntc values_of_ntc_sensor(uint8_t sensor_number){
    cc44:	f04f 0600 	mov.w	r6, #0
  switch (sensor_number){
    cc48:	d00a      	beq.n	cc60 <values_of_ntc_sensor+0x28>
    cc4a:	2d03      	cmp	r5, #3
    cc4c:	d00c      	beq.n	cc68 <values_of_ntc_sensor+0x30>
    cc4e:	2d01      	cmp	r5, #1
    cc50:	d102      	bne.n	cc58 <values_of_ntc_sensor+0x20>
    case NTC_1:ntc_return.value=adc_value[NTC_1_CH];
    cc52:	4b07      	ldr	r3, [pc, #28]	; (cc70 <values_of_ntc_sensor+0x38>)
    cc54:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
  return ntc_return;
    cc58:	6020      	str	r0, [r4, #0]
    cc5a:	80a6      	strh	r6, [r4, #4]
}
    cc5c:	4620      	mov	r0, r4
    cc5e:	bd70      	pop	{r4, r5, r6, pc}
    case NTC_2:ntc_return.value=adc_value[NTC_2_CH];
    cc60:	4b03      	ldr	r3, [pc, #12]	; (cc70 <values_of_ntc_sensor+0x38>)
    cc62:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
              break;
    cc66:	e7f7      	b.n	cc58 <values_of_ntc_sensor+0x20>
    case NTC_3:ntc_return.value=adc_value[NTC_3_CH];
    cc68:	4b01      	ldr	r3, [pc, #4]	; (cc70 <values_of_ntc_sensor+0x38>)
    cc6a:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
              break;
    cc6e:	e7f3      	b.n	cc58 <values_of_ntc_sensor+0x20>
    cc70:	2002f7a8 	.word	0x2002f7a8

0000cc74 <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    cc74:	b538      	push	{r3, r4, r5, lr}
    cc76:	460d      	mov	r5, r1
    cc78:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    cc7a:	f7ff ff93 	bl	cba4 <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    cc7e:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    cc80:	4b04      	ldr	r3, [pc, #16]	; (cc94 <values_of_digital_sensor+0x20>)
    cc82:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    cc86:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    cc8a:	e9c4 0200 	strd	r0, r2, [r4]
}
    cc8e:	4620      	mov	r0, r4
    cc90:	bd38      	pop	{r3, r4, r5, pc}
    cc92:	bf00      	nop
    cc94:	2002f798 	.word	0x2002f798

0000cc98 <read_memory>:
_Circular_Buffer read_memory(uint32_t Pos){
    cc98:	b570      	push	{r4, r5, r6, lr}
    cc9a:	4605      	mov	r5, r0
    cc9c:	460c      	mov	r4, r1
    buf = k_malloc(size);
    cc9e:	2068      	movs	r0, #104	; 0x68
    cca0:	f01f f9f8 	bl	2c094 <k_malloc>
    uint16_t Id= Pos + BASE_DATA_BUFFER;
    cca4:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
    err=nvs_read(&fs, Id, buf, size);
    cca8:	2368      	movs	r3, #104	; 0x68
    ccaa:	4602      	mov	r2, r0
    buf = k_malloc(size);
    ccac:	4606      	mov	r6, r0
    err=nvs_read(&fs, Id, buf, size);
    ccae:	b289      	uxth	r1, r1
    ccb0:	4806      	ldr	r0, [pc, #24]	; (cccc <read_memory+0x34>)
    ccb2:	f01a fecb 	bl	27a4c <nvs_read>
    printf("Result read=%d bytes\n",err);
    ccb6:	b281      	uxth	r1, r0
    ccb8:	4805      	ldr	r0, [pc, #20]	; (ccd0 <read_memory+0x38>)
    ccba:	f017 ffd3 	bl	24c64 <iprintf>
    return *buf;
    ccbe:	2268      	movs	r2, #104	; 0x68
    ccc0:	4631      	mov	r1, r6
    ccc2:	4628      	mov	r0, r5
    ccc4:	f01f fa02 	bl	2c0cc <memcpy>
}
    ccc8:	4628      	mov	r0, r5
    ccca:	bd70      	pop	{r4, r5, r6, pc}
    cccc:	20009f08 	.word	0x20009f08
    ccd0:	0002f027 	.word	0x0002f027

0000ccd4 <save_memory>:
void save_memory(uint32_t Pos){
    ccd4:	b570      	push	{r4, r5, r6, lr}
    printf("Size of structure=%d bytes\n",size);
    ccd6:	2168      	movs	r1, #104	; 0x68
void save_memory(uint32_t Pos){
    ccd8:	4604      	mov	r4, r0
    printf("Size of structure=%d bytes\n",size);
    ccda:	4815      	ldr	r0, [pc, #84]	; (cd30 <save_memory+0x5c>)
    ccdc:	f017 ffc2 	bl	24c64 <iprintf>
    buf = k_malloc(size);
    cce0:	2068      	movs	r0, #104	; 0x68
    cce2:	f01f f9d7 	bl	2c094 <k_malloc>
    *buf=C_Buffer[Pos];
    cce6:	2668      	movs	r6, #104	; 0x68
    buf = k_malloc(size);
    cce8:	4605      	mov	r5, r0
    *buf=C_Buffer[Pos];
    ccea:	4912      	ldr	r1, [pc, #72]	; (cd34 <save_memory+0x60>)
    ccec:	4632      	mov	r2, r6
    ccee:	fb06 1104 	mla	r1, r6, r4, r1
    ccf2:	f01f f9eb 	bl	2c0cc <memcpy>
    printf("Position %d\n",Pos); 
    ccf6:	4621      	mov	r1, r4
    ccf8:	480f      	ldr	r0, [pc, #60]	; (cd38 <save_memory+0x64>)
    ccfa:	f017 ffb3 	bl	24c64 <iprintf>
    uint16_t id= Pos + BASE_DATA_BUFFER;
    ccfe:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
    err=nvs_write(&fs, id, buf,size);
    cd02:	4c0e      	ldr	r4, [pc, #56]	; (cd3c <save_memory+0x68>)
    cd04:	4633      	mov	r3, r6
    cd06:	462a      	mov	r2, r5
    cd08:	4620      	mov	r0, r4
    cd0a:	b289      	uxth	r1, r1
    cd0c:	f003 f90a 	bl	ff24 <nvs_write>
    printf("Result=%d bytes saved\n",err);
    cd10:	b281      	uxth	r1, r0
    cd12:	480b      	ldr	r0, [pc, #44]	; (cd40 <save_memory+0x6c>)
    cd14:	f017 ffa6 	bl	24c64 <iprintf>
    (void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position,sizeof(C_Buffer_Current_Position));
    cd18:	4620      	mov	r0, r4
    cd1a:	2304      	movs	r3, #4
    cd1c:	2102      	movs	r1, #2
    cd1e:	4a09      	ldr	r2, [pc, #36]	; (cd44 <save_memory+0x70>)
    cd20:	f003 f900 	bl	ff24 <nvs_write>
    k_free(buf);
    cd24:	4628      	mov	r0, r5
}
    cd26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_free(buf);
    cd2a:	f01f b9ac 	b.w	2c086 <k_free>
    cd2e:	bf00      	nop
    cd30:	0002f03d 	.word	0x0002f03d
    cd34:	2000a870 	.word	0x2000a870
    cd38:	0002f059 	.word	0x0002f059
    cd3c:	20009f08 	.word	0x20009f08
    cd40:	0002f066 	.word	0x0002f066
    cd44:	2002f170 	.word	0x2002f170

0000cd48 <feed_circular_buffer>:
void feed_circular_buffer(void){
    cd48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    cd4c:	4f41      	ldr	r7, [pc, #260]	; (ce54 <feed_circular_buffer+0x10c>)
    cd4e:	4b42      	ldr	r3, [pc, #264]	; (ce58 <feed_circular_buffer+0x110>)
    cd50:	683c      	ldr	r4, [r7, #0]
void feed_circular_buffer(void){
    cd52:	b09b      	sub	sp, #108	; 0x6c
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    cd54:	f5b4 6fb4 	cmp.w	r4, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    cd58:	601c      	str	r4, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    cd5a:	d278      	bcs.n	ce4e <feed_circular_buffer+0x106>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    cd5c:	46e8      	mov	r8, sp
    cd5e:	f04f 0968 	mov.w	r9, #104	; 0x68
    cd62:	4645      	mov	r5, r8
    cd64:	4e3d      	ldr	r6, [pc, #244]	; (ce5c <feed_circular_buffer+0x114>)
    cd66:	4640      	mov	r0, r8
    cd68:	fb09 6404 	mla	r4, r9, r4, r6
    cd6c:	3404      	adds	r4, #4
    cd6e:	f7ff ff47 	bl	cc00 <values_of_gnss_module>
    cd72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cd74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cd76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cd78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cd7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cd7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cd7e:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    cd80:	2100      	movs	r1, #0
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    cd82:	6023      	str	r3, [r4, #0]
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    cd84:	683c      	ldr	r4, [r7, #0]
    cd86:	4640      	mov	r0, r8
    cd88:	fb09 6404 	mla	r4, r9, r4, r6
    cd8c:	3438      	adds	r4, #56	; 0x38
    cd8e:	f7ff ff45 	bl	cc1c <values_of_analog_sensor>
    cd92:	e898 0003 	ldmia.w	r8, {r0, r1}
    cd96:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    cd9a:	2101      	movs	r1, #1
    cd9c:	a80e      	add	r0, sp, #56	; 0x38
    cd9e:	f7ff ff4b 	bl	cc38 <values_of_ntc_sensor>
    cda2:	683b      	ldr	r3, [r7, #0]
    cda4:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    cda8:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    cdac:	2102      	movs	r1, #2
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    cdae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    cdb2:	a810      	add	r0, sp, #64	; 0x40
    cdb4:	f7ff ff40 	bl	cc38 <values_of_ntc_sensor>
    cdb8:	683b      	ldr	r3, [r7, #0]
    cdba:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    cdbe:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    cdc2:	2103      	movs	r1, #3
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    cdc4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    cdc8:	a812      	add	r0, sp, #72	; 0x48
    cdca:	f7ff ff35 	bl	cc38 <values_of_ntc_sensor>
    cdce:	683b      	ldr	r3, [r7, #0]
    cdd0:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    cdd4:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    cdd8:	2101      	movs	r1, #1
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    cdda:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    cdde:	a814      	add	r0, sp, #80	; 0x50
    cde0:	f7ff ff2a 	bl	cc38 <values_of_ntc_sensor>
    cde4:	683b      	ldr	r3, [r7, #0]
    cde6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cde8:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    cdec:	2102      	movs	r1, #2
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    cdee:	641a      	str	r2, [r3, #64]	; 0x40
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    cdf0:	a816      	add	r0, sp, #88	; 0x58
    cdf2:	f7ff ff21 	bl	cc38 <values_of_ntc_sensor>
    cdf6:	683b      	ldr	r3, [r7, #0]
    cdf8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cdfa:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    cdfe:	2103      	movs	r1, #3
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    ce00:	649a      	str	r2, [r3, #72]	; 0x48
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    ce02:	a818      	add	r0, sp, #96	; 0x60
    ce04:	f7ff ff18 	bl	cc38 <values_of_ntc_sensor>
    ce08:	683c      	ldr	r4, [r7, #0]
    ce0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ce0c:	fb09 6404 	mla	r4, r9, r4, r6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    ce10:	2100      	movs	r1, #0
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    ce12:	6523      	str	r3, [r4, #80]	; 0x50
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    ce14:	4640      	mov	r0, r8
    ce16:	f7ff ff2d 	bl	cc74 <values_of_digital_sensor>
    ce1a:	e898 0003 	ldmia.w	r8, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    ce1e:	683b      	ldr	r3, [r7, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    ce20:	3458      	adds	r4, #88	; 0x58
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    ce22:	fb09 6603 	mla	r6, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    ce26:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    ce2a:	3660      	adds	r6, #96	; 0x60
    ce2c:	2101      	movs	r1, #1
    ce2e:	4640      	mov	r0, r8
    ce30:	f7ff ff20 	bl	cc74 <values_of_digital_sensor>
    ce34:	e898 0003 	ldmia.w	r8, {r0, r1}
    ce38:	e886 0003 	stmia.w	r6, {r0, r1}
     save_memory(C_Buffer_Free_Position);
    ce3c:	6838      	ldr	r0, [r7, #0]
    ce3e:	f7ff ff49 	bl	ccd4 <save_memory>
     C_Buffer_Free_Position++;
    ce42:	683b      	ldr	r3, [r7, #0]
    ce44:	3301      	adds	r3, #1
    ce46:	603b      	str	r3, [r7, #0]
}
    ce48:	b01b      	add	sp, #108	; 0x6c
    ce4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ce4e:	2300      	movs	r3, #0
    ce50:	e7f9      	b.n	ce46 <feed_circular_buffer+0xfe>
    ce52:	bf00      	nop
    ce54:	2002f174 	.word	0x2002f174
    ce58:	2002f170 	.word	0x2002f170
    ce5c:	2000a870 	.word	0x2000a870

0000ce60 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    ce60:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    ce62:	4b1c      	ldr	r3, [pc, #112]	; (ced4 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    ce64:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    ce66:	6818      	ldr	r0, [r3, #0]
    ce68:	889b      	ldrh	r3, [r3, #4]
    ce6a:	9000      	str	r0, [sp, #0]
    ce6c:	2218      	movs	r2, #24
    ce6e:	2100      	movs	r1, #0
    ce70:	f10d 0006 	add.w	r0, sp, #6
    ce74:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    ce78:	2601      	movs	r6, #1
   char tag[30]="10203";
    ce7a:	f01f f961 	bl	2c140 <memset>
     msg.positions.timestamp=1;
    ce7e:	2300      	movs	r3, #0
    msg.timestamp=0;
    ce80:	4c15      	ldr	r4, [pc, #84]	; (ced8 <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    ce82:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    ce84:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    ce88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ce8c:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    ce8e:	4b13      	ldr	r3, [pc, #76]	; (cedc <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    ce90:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    ce92:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    ce94:	230b      	movs	r3, #11
    ce96:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    ce98:	4b11      	ldr	r3, [pc, #68]	; (cee0 <fill_fields_to_test+0x80>)
    ce9a:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    ce9c:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    ce9e:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    cea0:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    cea2:	7766      	strb	r6, [r4, #29]
    cea4:	f104 001e 	add.w	r0, r4, #30
    cea8:	f01f fa7f 	bl	2c3aa <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    ceac:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    ceb0:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    ceb4:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    ceb8:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    ceba:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    cebe:	f7fb fe23 	bl	8b08 <__aeabi_i2f>
   while (sensor_id<6){
    cec2:	3501      	adds	r5, #1
    cec4:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    cec6:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    cec8:	f104 0424 	add.w	r4, r4, #36	; 0x24
    cecc:	d1e6      	bne.n	ce9c <fill_fields_to_test+0x3c>
}
    cece:	4802      	ldr	r0, [pc, #8]	; (ced8 <fill_fields_to_test+0x78>)
    ced0:	b009      	add	sp, #36	; 0x24
    ced2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ced4:	0002d7c4 	.word	0x0002d7c4
    ced8:	2000a780 	.word	0x2000a780
    cedc:	40400000 	.word	0x40400000
    cee0:	41400000 	.word	0x41400000

0000cee4 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cee6:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    ceea:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    ceec:	f7ff ffb8 	bl	ce60 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    cef0:	2202      	movs	r2, #2
    cef2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    cef6:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    cefa:	4a3a      	ldr	r2, [pc, #232]	; (cfe4 <send_array_dd_v0+0x100>)
    cefc:	ae0c      	add	r6, sp, #48	; 0x30
    cefe:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    cf00:	4631      	mov	r1, r6
    cf02:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    cf04:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    cf06:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    cf08:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    cf0a:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    cf0c:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    cf0e:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    cf10:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    cf12:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    cf14:	f101 010c 	add.w	r1, r1, #12
    cf18:	d1f8      	bne.n	cf0c <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    cf1a:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    cf1c:	6958      	ldr	r0, [r3, #20]
    cf1e:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    cf20:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    cf22:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    cf24:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    cf28:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    cf2c:	f101 0108 	add.w	r1, r1, #8
    cf30:	d1f6      	bne.n	cf20 <send_array_dd_v0+0x3c>
    cf32:	f103 051e 	add.w	r5, r3, #30
    cf36:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    cf3a:	f855 3c06 	ldr.w	r3, [r5, #-6]
    cf3e:	4629      	mov	r1, r5
    cf40:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    cf44:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    cf48:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    cf4c:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    cf50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    cf54:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    cf58:	f01f fa27 	bl	2c3aa <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    cf5c:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    cf5e:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    cf60:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    cf64:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    cf66:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    cf6a:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    cf6e:	4633      	mov	r3, r6
    cf70:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    cf74:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    cf76:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    cf78:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    cf7c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    cf80:	f103 0308 	add.w	r3, r3, #8
    cf84:	d1f6      	bne.n	cf74 <send_array_dd_v0+0x90>
   while (sensor_id<6){
    cf86:	3524      	adds	r5, #36	; 0x24
    cf88:	42a5      	cmp	r5, r4
    cf8a:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    cf8e:	d1d4      	bne.n	cf3a <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    cf90:	466c      	mov	r4, sp
    cf92:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    cf96:	4668      	mov	r0, sp
    cf98:	4913      	ldr	r1, [pc, #76]	; (cfe8 <send_array_dd_v0+0x104>)
    cf9a:	ad07      	add	r5, sp, #28
    cf9c:	f000 f962 	bl	d264 <pb_ostream_from_buffer>
    cfa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cfa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cfa4:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    cfa6:	4911      	ldr	r1, [pc, #68]	; (cfec <send_array_dd_v0+0x108>)
    cfa8:	aa0c      	add	r2, sp, #48	; 0x30
    cfaa:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    cfac:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    cfae:	f000 fbd9 	bl	d764 <pb_encode>
   int j=0;
    cfb2:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    cfb4:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    cfb6:	490c      	ldr	r1, [pc, #48]	; (cfe8 <send_array_dd_v0+0x104>)
    cfb8:	4a0d      	ldr	r2, [pc, #52]	; (cff0 <send_array_dd_v0+0x10c>)
    cfba:	4283      	cmp	r3, r0
    cfbc:	d10b      	bne.n	cfd6 <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    cfbe:	490d      	ldr	r1, [pc, #52]	; (cff4 <send_array_dd_v0+0x110>)
    return function_return;
    cfc0:	f240 72dc 	movw	r2, #2012	; 0x7dc
    cfc4:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    cfc6:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    cfca:	f01f f87f 	bl	2c0cc <memcpy>
}
    cfce:	4638      	mov	r0, r7
    cfd0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    cfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    cfd6:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    cfda:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    cfdc:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    cfe0:	e7eb      	b.n	cfba <send_array_dd_v0+0xd6>
    cfe2:	bf00      	nop
    cfe4:	0012d687 	.word	0x0012d687
    cfe8:	2002f9b7 	.word	0x2002f9b7
    cfec:	0002da34 	.word	0x0002da34
    cff0:	20009fa7 	.word	0x20009fa7
    cff4:	20009fa4 	.word	0x20009fa4

0000cff8 <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cffc:	4606      	mov	r6, r0
      C_Buffer[pos].gnss_module.latitude,
    cffe:	2468      	movs	r4, #104	; 0x68
    d000:	4d29      	ldr	r5, [pc, #164]	; (d0a8 <print_current_position_cb+0xb0>)
void print_current_position_cb(uint32_t pos){
    d002:	b087      	sub	sp, #28
      C_Buffer[pos].gnss_module.latitude,
    d004:	fb04 5406 	mla	r4, r4, r6, r5
    printf("\n\n####Position %d #####\n",pos);
    d008:	4601      	mov	r1, r0
    d00a:	4828      	ldr	r0, [pc, #160]	; (d0ac <print_current_position_cb+0xb4>)
    d00c:	f017 fe2a 	bl	24c64 <iprintf>
    printf("GNSS Position Lat=%f Long=%f TimeStamp=%d \n",
    d010:	68a0      	ldr	r0, [r4, #8]
    d012:	f7fb fa05 	bl	8420 <__aeabi_f2d>
    d016:	6863      	ldr	r3, [r4, #4]
    d018:	4680      	mov	r8, r0
    d01a:	9302      	str	r3, [sp, #8]
    d01c:	68e0      	ldr	r0, [r4, #12]
    d01e:	4689      	mov	r9, r1
    d020:	f7fb f9fe 	bl	8420 <__aeabi_f2d>
    d024:	4642      	mov	r2, r8
    d026:	e9cd 0100 	strd	r0, r1, [sp]
    d02a:	464b      	mov	r3, r9
    d02c:	4820      	ldr	r0, [pc, #128]	; (d0b0 <print_current_position_cb+0xb8>)
    d02e:	f017 fe19 	bl	24c64 <iprintf>
    val_mv = C_Buffer[pos].analog.value;
    d032:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d034:	a805      	add	r0, sp, #20
    val_mv = C_Buffer[pos].analog.value;
    d036:	9305      	str	r3, [sp, #20]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d038:	f7ff fd28 	bl	ca8c <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    d03c:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    d040:	9b05      	ldr	r3, [sp, #20]
    d042:	481c      	ldr	r0, [pc, #112]	; (d0b4 <print_current_position_cb+0xbc>)
    d044:	f017 fe0e 	bl	24c64 <iprintf>
    int i=0;
    d048:	2700      	movs	r7, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d04a:	f8df 906c 	ldr.w	r9, [pc, #108]	; d0b8 <print_current_position_cb+0xc0>
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    d04e:	f107 0801 	add.w	r8, r7, #1
    d052:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    d056:	fa5f f188 	uxtb.w	r1, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d05a:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
      C_Buffer[pos].ntc[i].value,
    d05e:	f9b4 b044 	ldrsh.w	fp, [r4, #68]	; 0x44
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    d062:	f7fc f9dd 	bl	9420 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d066:	f7fb f9db 	bl	8420 <__aeabi_f2d>
    d06a:	e9cd 0100 	strd	r0, r1, [sp]
    d06e:	4639      	mov	r1, r7
      i++;
    d070:	4647      	mov	r7, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d072:	465b      	mov	r3, fp
    d074:	4652      	mov	r2, sl
    d076:	4648      	mov	r0, r9
    d078:	f017 fdf4 	bl	24c64 <iprintf>
    while (i<3){
    d07c:	2f03      	cmp	r7, #3
    d07e:	f104 0408 	add.w	r4, r4, #8
    d082:	d1e4      	bne.n	d04e <print_current_position_cb+0x56>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    d084:	2368      	movs	r3, #104	; 0x68
    d086:	fb03 5506 	mla	r5, r3, r6, r5
    d08a:	2100      	movs	r1, #0
    d08c:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    d090:	480a      	ldr	r0, [pc, #40]	; (d0bc <print_current_position_cb+0xc4>)
    d092:	f017 fde7 	bl	24c64 <iprintf>
    d096:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
    d09a:	2101      	movs	r1, #1
    d09c:	4807      	ldr	r0, [pc, #28]	; (d0bc <print_current_position_cb+0xc4>)
}
    d09e:	b007      	add	sp, #28
    d0a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    d0a4:	f017 bdde 	b.w	24c64 <iprintf>
    d0a8:	2000a870 	.word	0x2000a870
    d0ac:	0002f07d 	.word	0x0002f07d
    d0b0:	0002f096 	.word	0x0002f096
    d0b4:	0002f0c2 	.word	0x0002f0c2
    d0b8:	0002f0e8 	.word	0x0002f0e8
    d0bc:	0002f10e 	.word	0x0002f10e

0000d0c0 <print_current_position_cb_new>:
void print_current_position_cb_new(uint32_t pos){
    d0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d0c4:	4605      	mov	r5, r0
    d0c6:	b0a0      	sub	sp, #128	; 0x80
   C_Buffer = k_malloc(size);
    d0c8:	2068      	movs	r0, #104	; 0x68
    d0ca:	f01e ffe3 	bl	2c094 <k_malloc>
    d0ce:	4604      	mov	r4, r0
   *C_Buffer=read_memory(pos);
    d0d0:	4629      	mov	r1, r5
    d0d2:	a804      	add	r0, sp, #16
    d0d4:	f7ff fde0 	bl	cc98 <read_memory>
    d0d8:	2268      	movs	r2, #104	; 0x68
    d0da:	a904      	add	r1, sp, #16
    d0dc:	4620      	mov	r0, r4
    d0de:	f01e fff5 	bl	2c0cc <memcpy>
    printf("\n\n####Position %d #####\n",pos);
    d0e2:	4629      	mov	r1, r5
    d0e4:	4826      	ldr	r0, [pc, #152]	; (d180 <print_current_position_cb_new+0xc0>)
    d0e6:	f017 fdbd 	bl	24c64 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    d0ea:	68a0      	ldr	r0, [r4, #8]
    d0ec:	f7fb f998 	bl	8420 <__aeabi_f2d>
    d0f0:	6863      	ldr	r3, [r4, #4]
    d0f2:	4606      	mov	r6, r0
    d0f4:	9302      	str	r3, [sp, #8]
    d0f6:	68e0      	ldr	r0, [r4, #12]
    d0f8:	460f      	mov	r7, r1
    d0fa:	f7fb f991 	bl	8420 <__aeabi_f2d>
    d0fe:	4632      	mov	r2, r6
    d100:	e9cd 0100 	strd	r0, r1, [sp]
    d104:	463b      	mov	r3, r7
    d106:	481f      	ldr	r0, [pc, #124]	; (d184 <print_current_position_cb_new+0xc4>)
    d108:	f017 fdac 	bl	24c64 <iprintf>
    val_mv = C_Buffer->analog.value;
    d10c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d10e:	a81f      	add	r0, sp, #124	; 0x7c
    val_mv = C_Buffer->analog.value;
    d110:	931f      	str	r3, [sp, #124]	; 0x7c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d112:	f7ff fcbb 	bl	ca8c <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    d116:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    d11a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d11c:	481a      	ldr	r0, [pc, #104]	; (d188 <print_current_position_cb_new+0xc8>)
    d11e:	f017 fda1 	bl	24c64 <iprintf>
    while (i<3){
    d122:	4625      	mov	r5, r4
    int i=0;
    d124:	2600      	movs	r6, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d126:	f8df 8064 	ldr.w	r8, [pc, #100]	; d18c <print_current_position_cb_new+0xcc>
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    d12a:	1c77      	adds	r7, r6, #1
    d12c:	f8b5 0044 	ldrh.w	r0, [r5, #68]	; 0x44
    d130:	b2f9      	uxtb	r1, r7
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d132:	f8d5 9040 	ldr.w	r9, [r5, #64]	; 0x40
      C_Buffer->ntc[i].value,
    d136:	f9b5 a044 	ldrsh.w	sl, [r5, #68]	; 0x44
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    d13a:	f7fc f971 	bl	9420 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d13e:	f7fb f96f 	bl	8420 <__aeabi_f2d>
    d142:	4653      	mov	r3, sl
    d144:	e9cd 0100 	strd	r0, r1, [sp]
    d148:	464a      	mov	r2, r9
    d14a:	4631      	mov	r1, r6
    d14c:	4640      	mov	r0, r8
    d14e:	f017 fd89 	bl	24c64 <iprintf>
    while (i<3){
    d152:	2f03      	cmp	r7, #3
      i++;
    d154:	463e      	mov	r6, r7
    while (i<3){
    d156:	f105 0508 	add.w	r5, r5, #8
    d15a:	d1e6      	bne.n	d12a <print_current_position_cb_new+0x6a>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    d15c:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    d160:	2100      	movs	r1, #0
    d162:	480b      	ldr	r0, [pc, #44]	; (d190 <print_current_position_cb_new+0xd0>)
    d164:	f017 fd7e 	bl	24c64 <iprintf>
    d168:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    d16c:	2101      	movs	r1, #1
    d16e:	4808      	ldr	r0, [pc, #32]	; (d190 <print_current_position_cb_new+0xd0>)
    d170:	f017 fd78 	bl	24c64 <iprintf>
 k_free(C_Buffer);
    d174:	4620      	mov	r0, r4
}
    d176:	b020      	add	sp, #128	; 0x80
    d178:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 k_free(C_Buffer);
    d17c:	f01e bf83 	b.w	2c086 <k_free>
    d180:	0002f07d 	.word	0x0002f07d
    d184:	0002f130 	.word	0x0002f130
    d188:	0002f0c2 	.word	0x0002f0c2
    d18c:	0002f0e8 	.word	0x0002f0e8
    d190:	0002f10e 	.word	0x0002f10e

0000d194 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    d194:	b500      	push	{lr}
    pb_type_t type = field->type;
    d196:	7d83      	ldrb	r3, [r0, #22]
{
    d198:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    d19a:	2b3f      	cmp	r3, #63	; 0x3f
{
    d19c:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    d19e:	d849      	bhi.n	d234 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    d1a0:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    d1a4:	d01c      	beq.n	d1e0 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    d1a6:	2820      	cmp	r0, #32
    d1a8:	d102      	bne.n	d1b0 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    d1aa:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    d1ac:	8818      	ldrh	r0, [r3, #0]
    d1ae:	e006      	b.n	d1be <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    d1b0:	2830      	cmp	r0, #48	; 0x30
    d1b2:	d0fa      	beq.n	d1aa <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    d1b4:	2810      	cmp	r0, #16
    d1b6:	d106      	bne.n	d1c6 <pb_check_proto3_default_value+0x32>
    d1b8:	6a0a      	ldr	r2, [r1, #32]
    d1ba:	b122      	cbz	r2, d1c6 <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    d1bc:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    d1be:	fab0 f080 	clz	r0, r0
    d1c2:	0940      	lsrs	r0, r0, #5
    d1c4:	e00c      	b.n	d1e0 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    d1c6:	680a      	ldr	r2, [r1, #0]
    d1c8:	6890      	ldr	r0, [r2, #8]
    d1ca:	b980      	cbnz	r0, d1ee <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    d1cc:	f003 020f 	and.w	r2, r3, #15
    d1d0:	2a05      	cmp	r2, #5
    d1d2:	d80e      	bhi.n	d1f2 <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    d1d4:	69cb      	ldr	r3, [r1, #28]
    d1d6:	8a4a      	ldrh	r2, [r1, #18]
    d1d8:	441a      	add	r2, r3
    d1da:	4293      	cmp	r3, r2
    d1dc:	d103      	bne.n	d1e6 <pb_check_proto3_default_value+0x52>
            return true;
    d1de:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    d1e0:	b00b      	add	sp, #44	; 0x2c
    d1e2:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    d1e6:	f813 1b01 	ldrb.w	r1, [r3], #1
    d1ea:	2900      	cmp	r1, #0
    d1ec:	d0f5      	beq.n	d1da <pb_check_proto3_default_value+0x46>
            return false;
    d1ee:	2000      	movs	r0, #0
    d1f0:	e7f6      	b.n	d1e0 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    d1f2:	2a06      	cmp	r2, #6
    d1f4:	d101      	bne.n	d1fa <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    d1f6:	69cb      	ldr	r3, [r1, #28]
    d1f8:	e7d8      	b.n	d1ac <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    d1fa:	2a07      	cmp	r2, #7
    d1fc:	d102      	bne.n	d204 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    d1fe:	69cb      	ldr	r3, [r1, #28]
    d200:	7818      	ldrb	r0, [r3, #0]
    d202:	e7dc      	b.n	d1be <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    d204:	2a0b      	cmp	r2, #11
    d206:	d101      	bne.n	d20c <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    d208:	8a48      	ldrh	r0, [r1, #18]
    d20a:	e7d8      	b.n	d1be <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    d20c:	f003 030e 	and.w	r3, r3, #14
    d210:	2b08      	cmp	r3, #8
    d212:	d1e5      	bne.n	d1e0 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    d214:	69ca      	ldr	r2, [r1, #28]
    d216:	4668      	mov	r0, sp
    d218:	6a49      	ldr	r1, [r1, #36]	; 0x24
    d21a:	f019 ff2b 	bl	27074 <pb_field_iter_begin>
    d21e:	2800      	cmp	r0, #0
    d220:	d0dd      	beq.n	d1de <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    d222:	4668      	mov	r0, sp
    d224:	f7ff ffb6 	bl	d194 <pb_check_proto3_default_value>
    d228:	2800      	cmp	r0, #0
    d22a:	d0d9      	beq.n	d1e0 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    d22c:	4668      	mov	r0, sp
    d22e:	f019 ff44 	bl	270ba <pb_field_iter_next>
    d232:	e7f4      	b.n	d21e <pb_check_proto3_default_value+0x8a>
    d234:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    d238:	2a80      	cmp	r2, #128	; 0x80
    d23a:	d101      	bne.n	d240 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    d23c:	69c0      	ldr	r0, [r0, #28]
    d23e:	e7be      	b.n	d1be <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    d240:	2a40      	cmp	r2, #64	; 0x40
    d242:	d1d4      	bne.n	d1ee <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    d244:	f003 030f 	and.w	r3, r3, #15
    d248:	2b0a      	cmp	r3, #10
    d24a:	d102      	bne.n	d252 <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    d24c:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    d24e:	6818      	ldr	r0, [r3, #0]
    d250:	e7b5      	b.n	d1be <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    d252:	6803      	ldr	r3, [r0, #0]
    d254:	4a02      	ldr	r2, [pc, #8]	; (d260 <pb_check_proto3_default_value+0xcc>)
    d256:	68d8      	ldr	r0, [r3, #12]
    d258:	4290      	cmp	r0, r2
    d25a:	d1b0      	bne.n	d1be <pb_check_proto3_default_value+0x2a>
    d25c:	e7f6      	b.n	d24c <pb_check_proto3_default_value+0xb8>
    d25e:	bf00      	nop
    d260:	000270d9 	.word	0x000270d9

0000d264 <pb_ostream_from_buffer>:
    return stream;
    d264:	6082      	str	r2, [r0, #8]
    d266:	2200      	movs	r2, #0
{
    d268:	b510      	push	{r4, lr}
    return stream;
    d26a:	4c03      	ldr	r4, [pc, #12]	; (d278 <pb_ostream_from_buffer+0x14>)
    d26c:	e9c0 2203 	strd	r2, r2, [r0, #12]
    d270:	e9c0 4100 	strd	r4, r1, [r0]
}
    d274:	bd10      	pop	{r4, pc}
    d276:	bf00      	nop
    d278:	00027109 	.word	0x00027109

0000d27c <pb_write>:
{
    d27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d27e:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    d280:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    d282:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    d284:	b19a      	cbz	r2, d2ae <pb_write+0x32>
    d286:	6806      	ldr	r6, [r0, #0]
    d288:	b18e      	cbz	r6, d2ae <pb_write+0x32>
    d28a:	18d3      	adds	r3, r2, r3
    d28c:	d202      	bcs.n	d294 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    d28e:	6887      	ldr	r7, [r0, #8]
    d290:	429f      	cmp	r7, r3
    d292:	d207      	bcs.n	d2a4 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    d294:	6923      	ldr	r3, [r4, #16]
    d296:	4a08      	ldr	r2, [pc, #32]	; (d2b8 <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    d298:	2b00      	cmp	r3, #0
    d29a:	bf08      	it	eq
    d29c:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    d29e:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    d2a0:	6123      	str	r3, [r4, #16]
}
    d2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    d2a4:	47b0      	blx	r6
    d2a6:	b910      	cbnz	r0, d2ae <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    d2a8:	6923      	ldr	r3, [r4, #16]
    d2aa:	4a04      	ldr	r2, [pc, #16]	; (d2bc <pb_write+0x40>)
    d2ac:	e7f4      	b.n	d298 <pb_write+0x1c>
    stream->bytes_written += count;
    d2ae:	68e3      	ldr	r3, [r4, #12]
    return true;
    d2b0:	2001      	movs	r0, #1
    stream->bytes_written += count;
    d2b2:	442b      	add	r3, r5
    d2b4:	60e3      	str	r3, [r4, #12]
    return true;
    d2b6:	e7f4      	b.n	d2a2 <pb_write+0x26>
    d2b8:	0002f15c 	.word	0x0002f15c
    d2bc:	0002f168 	.word	0x0002f168

0000d2c0 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    d2c0:	b410      	push	{r4}
    d2c2:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    d2c4:	8a4b      	ldrh	r3, [r1, #18]
    d2c6:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    d2ca:	2c02      	cmp	r4, #2
    d2cc:	d117      	bne.n	d2fe <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    d2ce:	2b01      	cmp	r3, #1
    d2d0:	d105      	bne.n	d2de <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    d2d2:	69cb      	ldr	r3, [r1, #28]
    d2d4:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    d2d6:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    d2d8:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    d2da:	f019 bf1e 	b.w	2711a <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    d2de:	2b02      	cmp	r3, #2
    d2e0:	d102      	bne.n	d2e8 <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    d2e2:	69cb      	ldr	r3, [r1, #28]
    d2e4:	881a      	ldrh	r2, [r3, #0]
    d2e6:	e7f6      	b.n	d2d6 <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    d2e8:	2b04      	cmp	r3, #4
    d2ea:	d102      	bne.n	d2f2 <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    d2ec:	69cb      	ldr	r3, [r1, #28]
    d2ee:	681a      	ldr	r2, [r3, #0]
    d2f0:	e7f1      	b.n	d2d6 <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    d2f2:	2b08      	cmp	r3, #8
    d2f4:	d11f      	bne.n	d336 <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    d2f6:	69cb      	ldr	r3, [r1, #28]
    d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    d2fc:	e7ec      	b.n	d2d8 <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    d2fe:	2b01      	cmp	r3, #1
    d300:	d108      	bne.n	d314 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    d302:	69cb      	ldr	r3, [r1, #28]
    d304:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    d308:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    d30a:	2c03      	cmp	r4, #3
    d30c:	d1e4      	bne.n	d2d8 <pb_enc_varint+0x18>
}
    d30e:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    d310:	f019 bf42 	b.w	27198 <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    d314:	2b02      	cmp	r3, #2
    d316:	d103      	bne.n	d320 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    d318:	69cb      	ldr	r3, [r1, #28]
    d31a:	f9b3 2000 	ldrsh.w	r2, [r3]
    d31e:	e7f3      	b.n	d308 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    d320:	2b04      	cmp	r3, #4
    d322:	d102      	bne.n	d32a <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    d324:	69cb      	ldr	r3, [r1, #28]
    d326:	681a      	ldr	r2, [r3, #0]
    d328:	e7ee      	b.n	d308 <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    d32a:	2b08      	cmp	r3, #8
    d32c:	d103      	bne.n	d336 <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    d32e:	69cb      	ldr	r3, [r1, #28]
    d330:	e9d3 2300 	ldrd	r2, r3, [r3]
    d334:	e7e9      	b.n	d30a <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    d336:	6903      	ldr	r3, [r0, #16]
    d338:	4a03      	ldr	r2, [pc, #12]	; (d348 <pb_enc_varint+0x88>)
    d33a:	2b00      	cmp	r3, #0
    d33c:	bf08      	it	eq
    d33e:	4613      	moveq	r3, r2
    d340:	6103      	str	r3, [r0, #16]
}
    d342:	bc10      	pop	{r4}
    d344:	2000      	movs	r0, #0
    d346:	4770      	bx	lr
    d348:	0002f171 	.word	0x0002f171

0000d34c <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    d34c:	8a4a      	ldrh	r2, [r1, #18]
    d34e:	2a04      	cmp	r2, #4
    d350:	d102      	bne.n	d358 <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    d352:	69c9      	ldr	r1, [r1, #28]
    d354:	f019 bf29 	b.w	271aa <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    d358:	2a08      	cmp	r2, #8
    d35a:	d102      	bne.n	d362 <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    d35c:	69c9      	ldr	r1, [r1, #28]
    d35e:	f019 bf27 	b.w	271b0 <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    d362:	6902      	ldr	r2, [r0, #16]
    d364:	4903      	ldr	r1, [pc, #12]	; (d374 <pb_enc_fixed+0x28>)
    d366:	2a00      	cmp	r2, #0
    d368:	bf08      	it	eq
    d36a:	460a      	moveq	r2, r1
    d36c:	6102      	str	r2, [r0, #16]
    }
}
    d36e:	2000      	movs	r0, #0
    d370:	4770      	bx	lr
    d372:	bf00      	nop
    d374:	0002f171 	.word	0x0002f171

0000d378 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    d378:	7d8a      	ldrb	r2, [r1, #22]
{
    d37a:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    d37c:	f002 020f 	and.w	r2, r2, #15
    d380:	2a0b      	cmp	r2, #11
    d382:	d811      	bhi.n	d3a8 <pb_encode_tag_for_field+0x30>
    d384:	e8df f002 	tbb	[pc, r2]
    d388:	0c0c0c0c 	.word	0x0c0c0c0c
    d38c:	0a0a060e 	.word	0x0a0a060e
    d390:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    d394:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    d396:	8a1a      	ldrh	r2, [r3, #16]
    d398:	f019 bf0d 	b.w	271b6 <pb_encode_tag>
            wiretype = PB_WT_STRING;
    d39c:	2102      	movs	r1, #2
            break;
    d39e:	e7fa      	b.n	d396 <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    d3a0:	2100      	movs	r1, #0
    d3a2:	e7f8      	b.n	d396 <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    d3a4:	2105      	movs	r1, #5
    d3a6:	e7f6      	b.n	d396 <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    d3a8:	6903      	ldr	r3, [r0, #16]
    d3aa:	4a03      	ldr	r2, [pc, #12]	; (d3b8 <pb_encode_tag_for_field+0x40>)
    d3ac:	2b00      	cmp	r3, #0
    d3ae:	bf08      	it	eq
    d3b0:	4613      	moveq	r3, r2
    d3b2:	6103      	str	r3, [r0, #16]
}
    d3b4:	2000      	movs	r0, #0
    d3b6:	4770      	bx	lr
    d3b8:	0002f183 	.word	0x0002f183

0000d3bc <pb_encode_submessage>:
{
    d3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3c0:	460e      	mov	r6, r1
    d3c2:	4617      	mov	r7, r2
    d3c4:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    d3c6:	2214      	movs	r2, #20
    d3c8:	2100      	movs	r1, #0
{
    d3ca:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    d3cc:	a801      	add	r0, sp, #4
    d3ce:	f01e feb7 	bl	2c140 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    d3d2:	463a      	mov	r2, r7
    d3d4:	4631      	mov	r1, r6
    d3d6:	a801      	add	r0, sp, #4
    d3d8:	f000 f9c4 	bl	d764 <pb_encode>
    d3dc:	b910      	cbnz	r0, d3e4 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    d3de:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    d3e0:	6123      	str	r3, [r4, #16]
    d3e2:	e008      	b.n	d3f6 <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    d3e4:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    d3e8:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    d3ea:	4643      	mov	r3, r8
    d3ec:	462a      	mov	r2, r5
    d3ee:	4620      	mov	r0, r4
    d3f0:	f019 fe93 	bl	2711a <pb_encode_varint>
    d3f4:	b918      	cbnz	r0, d3fe <pb_encode_submessage+0x42>
        return false;
    d3f6:	2000      	movs	r0, #0
}
    d3f8:	b006      	add	sp, #24
    d3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    d3fe:	6821      	ldr	r1, [r4, #0]
    d400:	b921      	cbnz	r1, d40c <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    d402:	462a      	mov	r2, r5
    d404:	4620      	mov	r0, r4
    d406:	f7ff ff39 	bl	d27c <pb_write>
    d40a:	e7f5      	b.n	d3f8 <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    d40c:	68e3      	ldr	r3, [r4, #12]
    d40e:	68a2      	ldr	r2, [r4, #8]
    d410:	442b      	add	r3, r5
    d412:	4293      	cmp	r3, r2
    d414:	d905      	bls.n	d422 <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    d416:	6923      	ldr	r3, [r4, #16]
    d418:	4a0e      	ldr	r2, [pc, #56]	; (d454 <pb_encode_submessage+0x98>)
    d41a:	2b00      	cmp	r3, #0
    d41c:	bf08      	it	eq
    d41e:	4613      	moveq	r3, r2
    d420:	e7de      	b.n	d3e0 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    d422:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    d424:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    d426:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    d428:	a801      	add	r0, sp, #4
    d42a:	4631      	mov	r1, r6
    substream.max_size = size;
    d42c:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    d430:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    d434:	f000 f996 	bl	d764 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    d438:	9a04      	ldr	r2, [sp, #16]
    d43a:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    d43c:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    d43e:	4413      	add	r3, r2
    d440:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    d442:	9b02      	ldr	r3, [sp, #8]
    d444:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    d446:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    d448:	d101      	bne.n	d44e <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    d44a:	6123      	str	r3, [r4, #16]
    d44c:	e7d4      	b.n	d3f8 <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    d44e:	4a02      	ldr	r2, [pc, #8]	; (d458 <pb_encode_submessage+0x9c>)
    d450:	e7e3      	b.n	d41a <pb_encode_submessage+0x5e>
    d452:	bf00      	nop
    d454:	0002f15c 	.word	0x0002f15c
    d458:	0002f196 	.word	0x0002f196

0000d45c <encode_basic_field>:
{
    d45c:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    d45e:	69cb      	ldr	r3, [r1, #28]
{
    d460:	4604      	mov	r4, r0
    d462:	460d      	mov	r5, r1
    if (!field->pData)
    d464:	2b00      	cmp	r3, #0
    d466:	d07f      	beq.n	d568 <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    d468:	f7ff ff86 	bl	d378 <pb_encode_tag_for_field>
    d46c:	2800      	cmp	r0, #0
    d46e:	d073      	beq.n	d558 <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    d470:	7da8      	ldrb	r0, [r5, #22]
    d472:	f000 030f 	and.w	r3, r0, #15
    d476:	2b0b      	cmp	r3, #11
    d478:	d873      	bhi.n	d562 <encode_basic_field+0x106>
    d47a:	e8df f003 	tbb	[pc, r3]
    d47e:	1106      	.short	0x1106
    d480:	17171111 	.word	0x17171111
    d484:	5252351d 	.word	0x5252351d
    d488:	6f72      	.short	0x6f72
        if (p[i] != 0)
    d48a:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    d48c:	4620      	mov	r0, r4
}
    d48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    d492:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    d494:	2300      	movs	r3, #0
    d496:	3a00      	subs	r2, #0
    d498:	bf18      	it	ne
    d49a:	2201      	movne	r2, #1
    d49c:	f019 be3d 	b.w	2711a <pb_encode_varint>
            return pb_enc_varint(stream, field);
    d4a0:	4629      	mov	r1, r5
    d4a2:	4620      	mov	r0, r4
}
    d4a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    d4a8:	f7ff bf0a 	b.w	d2c0 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    d4ac:	4629      	mov	r1, r5
    d4ae:	4620      	mov	r0, r4
}
    d4b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    d4b4:	f7ff bf4a 	b.w	d34c <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    d4b8:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    d4ba:	b909      	cbnz	r1, d4c0 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    d4bc:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    d4be:	e00e      	b.n	d4de <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    d4c0:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    d4c2:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    d4c4:	d80a      	bhi.n	d4dc <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    d4c6:	8a6b      	ldrh	r3, [r5, #18]
    d4c8:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    d4ca:	4293      	cmp	r3, r2
    d4cc:	d206      	bcs.n	d4dc <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    d4ce:	6923      	ldr	r3, [r4, #16]
    d4d0:	4a26      	ldr	r2, [pc, #152]	; (d56c <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    d4d2:	2b00      	cmp	r3, #0
    d4d4:	bf08      	it	eq
    d4d6:	4613      	moveq	r3, r2
    d4d8:	6123      	str	r3, [r4, #16]
    d4da:	e03d      	b.n	d558 <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    d4dc:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    d4de:	4620      	mov	r0, r4
}
    d4e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    d4e4:	f019 be6d 	b.w	271c2 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    d4e8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    d4ec:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    d4ee:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    d4f0:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    d4f2:	d00e      	beq.n	d512 <encode_basic_field+0xb6>
        if (max_size == 0)
    d4f4:	b913      	cbnz	r3, d4fc <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    d4f6:	6923      	ldr	r3, [r4, #16]
    d4f8:	4a1d      	ldr	r2, [pc, #116]	; (d570 <encode_basic_field+0x114>)
    d4fa:	e7ea      	b.n	d4d2 <encode_basic_field+0x76>
        max_size -= 1;
    d4fc:	3b01      	subs	r3, #1
    if (str == NULL)
    d4fe:	2900      	cmp	r1, #0
    d500:	d0dc      	beq.n	d4bc <encode_basic_field+0x60>
    size_t size = 0;
    d502:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    d504:	429a      	cmp	r2, r3
    d506:	5c88      	ldrb	r0, [r1, r2]
    d508:	d006      	beq.n	d518 <encode_basic_field+0xbc>
    d50a:	2800      	cmp	r0, #0
    d50c:	d0e7      	beq.n	d4de <encode_basic_field+0x82>
            size++;
    d50e:	3201      	adds	r2, #1
            p++;
    d510:	e7f8      	b.n	d504 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    d512:	f04f 33ff 	mov.w	r3, #4294967295
    d516:	e7f2      	b.n	d4fe <encode_basic_field+0xa2>
        if (*p != '\0')
    d518:	2800      	cmp	r0, #0
    d51a:	d0e0      	beq.n	d4de <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    d51c:	6923      	ldr	r3, [r4, #16]
    d51e:	4a15      	ldr	r2, [pc, #84]	; (d574 <encode_basic_field+0x118>)
    d520:	e7d7      	b.n	d4d2 <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    d522:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    d524:	b912      	cbnz	r2, d52c <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    d526:	6923      	ldr	r3, [r4, #16]
    d528:	4a13      	ldr	r2, [pc, #76]	; (d578 <encode_basic_field+0x11c>)
    d52a:	e7d2      	b.n	d4d2 <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    d52c:	2b09      	cmp	r3, #9
    d52e:	d006      	beq.n	d53e <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    d530:	4620      	mov	r0, r4
    d532:	69ea      	ldr	r2, [r5, #28]
    d534:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    d536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    d53a:	f7ff bf3f 	b.w	d3bc <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    d53e:	6a2a      	ldr	r2, [r5, #32]
    d540:	2a00      	cmp	r2, #0
    d542:	d0f5      	beq.n	d530 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    d544:	f852 3c08 	ldr.w	r3, [r2, #-8]
    d548:	2b00      	cmp	r3, #0
    d54a:	d0f1      	beq.n	d530 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    d54c:	4629      	mov	r1, r5
    d54e:	4620      	mov	r0, r4
    d550:	3a04      	subs	r2, #4
    d552:	4798      	blx	r3
    d554:	2800      	cmp	r0, #0
    d556:	d1eb      	bne.n	d530 <encode_basic_field+0xd4>
        return false;
    d558:	2000      	movs	r0, #0
}
    d55a:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    d55c:	8a6a      	ldrh	r2, [r5, #18]
    d55e:	69e9      	ldr	r1, [r5, #28]
    d560:	e7bd      	b.n	d4de <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    d562:	6923      	ldr	r3, [r4, #16]
    d564:	4a05      	ldr	r2, [pc, #20]	; (d57c <encode_basic_field+0x120>)
    d566:	e7b4      	b.n	d4d2 <encode_basic_field+0x76>
        return true;
    d568:	2001      	movs	r0, #1
    d56a:	e7f6      	b.n	d55a <encode_basic_field+0xfe>
    d56c:	0002f1aa 	.word	0x0002f1aa
    d570:	0002f1be 	.word	0x0002f1be
    d574:	0002f1d1 	.word	0x0002f1d1
    d578:	0002f1e5 	.word	0x0002f1e5
    d57c:	0002f183 	.word	0x0002f183

0000d580 <encode_field>:
{
    d580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    d584:	7d8b      	ldrb	r3, [r1, #22]
{
    d586:	4605      	mov	r5, r0
    d588:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    d58c:	2a30      	cmp	r2, #48	; 0x30
{
    d58e:	460c      	mov	r4, r1
    d590:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    d592:	d112      	bne.n	d5ba <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    d594:	6a0b      	ldr	r3, [r1, #32]
    d596:	881a      	ldrh	r2, [r3, #0]
    d598:	8a0b      	ldrh	r3, [r1, #16]
    d59a:	429a      	cmp	r2, r3
    d59c:	d114      	bne.n	d5c8 <encode_field+0x48>
    if (!field->pData)
    d59e:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    d5a0:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    d5a2:	b9ea      	cbnz	r2, d5e0 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    d5a4:	f013 0f30 	tst.w	r3, #48	; 0x30
    d5a8:	d10e      	bne.n	d5c8 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    d5aa:	692b      	ldr	r3, [r5, #16]
    d5ac:	4a69      	ldr	r2, [pc, #420]	; (d754 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    d5ae:	2b00      	cmp	r3, #0
    d5b0:	bf08      	it	eq
    d5b2:	4613      	moveq	r3, r2
    d5b4:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    d5b6:	2000      	movs	r0, #0
    d5b8:	e007      	b.n	d5ca <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    d5ba:	2a10      	cmp	r2, #16
    d5bc:	d1ef      	bne.n	d59e <encode_field+0x1e>
        if (field->pSize)
    d5be:	6a0a      	ldr	r2, [r1, #32]
    d5c0:	b132      	cbz	r2, d5d0 <encode_field+0x50>
        if (p[i] != 0)
    d5c2:	7813      	ldrb	r3, [r2, #0]
    d5c4:	2b00      	cmp	r3, #0
    d5c6:	d1ea      	bne.n	d59e <encode_field+0x1e>
            return true;
    d5c8:	2001      	movs	r0, #1
}
    d5ca:	b007      	add	sp, #28
    d5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    d5d0:	2b3f      	cmp	r3, #63	; 0x3f
    d5d2:	d8e4      	bhi.n	d59e <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    d5d4:	4608      	mov	r0, r1
    d5d6:	f7ff fddd 	bl	d194 <pb_check_proto3_default_value>
    d5da:	2800      	cmp	r0, #0
    d5dc:	d0df      	beq.n	d59e <encode_field+0x1e>
    d5de:	e7f3      	b.n	d5c8 <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    d5e0:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    d5e4:	2a40      	cmp	r2, #64	; 0x40
    d5e6:	d10c      	bne.n	d602 <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    d5e8:	6823      	ldr	r3, [r4, #0]
    d5ea:	68db      	ldr	r3, [r3, #12]
    d5ec:	2b00      	cmp	r3, #0
    d5ee:	d0eb      	beq.n	d5c8 <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    d5f0:	4622      	mov	r2, r4
    d5f2:	4629      	mov	r1, r5
    d5f4:	2000      	movs	r0, #0
    d5f6:	4798      	blx	r3
    d5f8:	2800      	cmp	r0, #0
    d5fa:	d1e5      	bne.n	d5c8 <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    d5fc:	692b      	ldr	r3, [r5, #16]
    d5fe:	4a56      	ldr	r2, [pc, #344]	; (d758 <encode_field+0x1d8>)
    d600:	e7d5      	b.n	d5ae <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    d602:	f003 0130 	and.w	r1, r3, #48	; 0x30
    d606:	2920      	cmp	r1, #32
    d608:	f040 809d 	bne.w	d746 <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    d60c:	6a21      	ldr	r1, [r4, #32]
    d60e:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    d610:	2e00      	cmp	r6, #0
    d612:	d0d9      	beq.n	d5c8 <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    d614:	2a80      	cmp	r2, #128	; 0x80
    d616:	d120      	bne.n	d65a <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    d618:	f003 030f 	and.w	r3, r3, #15
    d61c:	2b05      	cmp	r3, #5
    d61e:	d85e      	bhi.n	d6de <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    d620:	2102      	movs	r1, #2
    d622:	4628      	mov	r0, r5
    d624:	8a22      	ldrh	r2, [r4, #16]
    d626:	f019 fdc6 	bl	271b6 <pb_encode_tag>
    d62a:	2800      	cmp	r0, #0
    d62c:	d0c3      	beq.n	d5b6 <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    d62e:	7da3      	ldrb	r3, [r4, #22]
    d630:	f003 030f 	and.w	r3, r3, #15
    d634:	2b04      	cmp	r3, #4
    d636:	d116      	bne.n	d666 <encode_field+0xe6>
            size = 4 * (size_t)count;
    d638:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    d63a:	463a      	mov	r2, r7
    d63c:	2300      	movs	r3, #0
    d63e:	4628      	mov	r0, r5
    d640:	f019 fd6b 	bl	2711a <pb_encode_varint>
    d644:	2800      	cmp	r0, #0
    d646:	d0b6      	beq.n	d5b6 <encode_field+0x36>
        if (stream->callback == NULL)
    d648:	6829      	ldr	r1, [r5, #0]
    d64a:	bb79      	cbnz	r1, d6ac <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    d64c:	463a      	mov	r2, r7
    d64e:	4628      	mov	r0, r5
}
    d650:	b007      	add	sp, #28
    d652:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    d656:	f7ff be11 	b.w	d27c <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    d65a:	8aa2      	ldrh	r2, [r4, #20]
    d65c:	42b2      	cmp	r2, r6
    d65e:	d2db      	bcs.n	d618 <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    d660:	692b      	ldr	r3, [r5, #16]
    d662:	4a3e      	ldr	r2, [pc, #248]	; (d75c <encode_field+0x1dc>)
    d664:	e7a3      	b.n	d5ae <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    d666:	2b05      	cmp	r3, #5
    d668:	d101      	bne.n	d66e <encode_field+0xee>
            size = 8 * (size_t)count;
    d66a:	00f7      	lsls	r7, r6, #3
    d66c:	e7e5      	b.n	d63a <encode_field+0xba>
            void *pData_orig = field->pData;
    d66e:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    d670:	2214      	movs	r2, #20
    d672:	2100      	movs	r1, #0
    d674:	a801      	add	r0, sp, #4
    d676:	f01e fd63 	bl	2c140 <memset>
            void *pData_orig = field->pData;
    d67a:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    d67e:	4621      	mov	r1, r4
    d680:	a801      	add	r0, sp, #4
    d682:	f7ff fe1d 	bl	d2c0 <pb_enc_varint>
    d686:	b928      	cbnz	r0, d694 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    d688:	692b      	ldr	r3, [r5, #16]
    d68a:	2b00      	cmp	r3, #0
    d68c:	d192      	bne.n	d5b4 <encode_field+0x34>
    d68e:	9b05      	ldr	r3, [sp, #20]
    d690:	4a33      	ldr	r2, [pc, #204]	; (d760 <encode_field+0x1e0>)
    d692:	e78c      	b.n	d5ae <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    d694:	69e3      	ldr	r3, [r4, #28]
    d696:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    d698:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    d69a:	4413      	add	r3, r2
    d69c:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    d69e:	b2bb      	uxth	r3, r7
    d6a0:	429e      	cmp	r6, r3
    d6a2:	d8ec      	bhi.n	d67e <encode_field+0xfe>
            size = sizestream.bytes_written;
    d6a4:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    d6a6:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    d6aa:	e7c6      	b.n	d63a <encode_field+0xba>
    d6ac:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    d6ae:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    d6b0:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    d6b2:	f003 030e 	and.w	r3, r3, #14
    d6b6:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    d6b8:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    d6ba:	d10d      	bne.n	d6d8 <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    d6bc:	f7ff fe46 	bl	d34c <pb_enc_fixed>
    d6c0:	2800      	cmp	r0, #0
    d6c2:	f43f af78 	beq.w	d5b6 <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    d6c6:	69e3      	ldr	r3, [r4, #28]
    d6c8:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    d6ca:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    d6cc:	4413      	add	r3, r2
    d6ce:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    d6d0:	b2bb      	uxth	r3, r7
    d6d2:	429e      	cmp	r6, r3
    d6d4:	d8eb      	bhi.n	d6ae <encode_field+0x12e>
    d6d6:	e777      	b.n	d5c8 <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    d6d8:	f7ff fdf2 	bl	d2c0 <pb_enc_varint>
    d6dc:	e7f0      	b.n	d6c0 <encode_field+0x140>
    d6de:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    d6e2:	7da3      	ldrb	r3, [r4, #22]
    d6e4:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    d6e8:	2b86      	cmp	r3, #134	; 0x86
    d6ea:	d127      	bne.n	d73c <encode_field+0x1bc>
                void *pData_orig = field->pData;
    d6ec:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    d6ee:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    d6f0:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    d6f4:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    d6f6:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    d6fa:	f1b9 0f00 	cmp.w	r9, #0
    d6fe:	d11a      	bne.n	d736 <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    d700:	f7ff fe3a 	bl	d378 <pb_encode_tag_for_field>
    d704:	b908      	cbnz	r0, d70a <encode_field+0x18a>
                field->pData = pData_orig;
    d706:	61e7      	str	r7, [r4, #28]
                if (!status)
    d708:	e755      	b.n	d5b6 <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    d70a:	2201      	movs	r2, #1
    d70c:	4628      	mov	r0, r5
    d70e:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    d710:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    d714:	f7ff fdb2 	bl	d27c <pb_write>
                field->pData = pData_orig;
    d718:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    d71a:	2800      	cmp	r0, #0
    d71c:	f43f af4b 	beq.w	d5b6 <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    d720:	69e3      	ldr	r3, [r4, #28]
    d722:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    d724:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    d728:	4413      	add	r3, r2
    d72a:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    d72c:	fa1f f388 	uxth.w	r3, r8
    d730:	429e      	cmp	r6, r3
    d732:	d8d6      	bhi.n	d6e2 <encode_field+0x162>
    d734:	e748      	b.n	d5c8 <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    d736:	f7ff fe91 	bl	d45c <encode_basic_field>
    d73a:	e7ed      	b.n	d718 <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    d73c:	4621      	mov	r1, r4
    d73e:	4628      	mov	r0, r5
    d740:	f7ff fe8c 	bl	d45c <encode_basic_field>
    d744:	e7e9      	b.n	d71a <encode_field+0x19a>
        return encode_basic_field(stream, field);
    d746:	4621      	mov	r1, r4
    d748:	4628      	mov	r0, r5
}
    d74a:	b007      	add	sp, #28
    d74c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    d750:	f7ff be84 	b.w	d45c <encode_basic_field>
    d754:	0002f1fe 	.word	0x0002f1fe
    d758:	0002f215 	.word	0x0002f215
    d75c:	0002f224 	.word	0x0002f224
    d760:	0002f23c 	.word	0x0002f23c

0000d764 <pb_encode>:
{
    d764:	b530      	push	{r4, r5, lr}
    d766:	b095      	sub	sp, #84	; 0x54
    d768:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    d76a:	4668      	mov	r0, sp
    d76c:	f019 fcb0 	bl	270d0 <pb_field_iter_begin_const>
    d770:	b370      	cbz	r0, d7d0 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    d772:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d776:	f003 030f 	and.w	r3, r3, #15
    d77a:	2b0a      	cmp	r3, #10
    d77c:	d121      	bne.n	d7c2 <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    d77e:	9b07      	ldr	r3, [sp, #28]
    d780:	681d      	ldr	r5, [r3, #0]
    while (extension)
    d782:	b91d      	cbnz	r5, d78c <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    d784:	4668      	mov	r0, sp
    d786:	f019 fc98 	bl	270ba <pb_field_iter_next>
    d78a:	e7f1      	b.n	d770 <pb_encode+0xc>
        if (extension->type->encode)
    d78c:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    d78e:	4629      	mov	r1, r5
        if (extension->type->encode)
    d790:	685b      	ldr	r3, [r3, #4]
    d792:	b123      	cbz	r3, d79e <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    d794:	4620      	mov	r0, r4
    d796:	4798      	blx	r3
        if (!status)
    d798:	b158      	cbz	r0, d7b2 <pb_encode+0x4e>
        extension = extension->next;
    d79a:	68ad      	ldr	r5, [r5, #8]
    d79c:	e7f1      	b.n	d782 <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    d79e:	a80a      	add	r0, sp, #40	; 0x28
    d7a0:	f019 fc98 	bl	270d4 <pb_field_iter_begin_extension_const>
    d7a4:	b940      	cbnz	r0, d7b8 <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    d7a6:	6923      	ldr	r3, [r4, #16]
    d7a8:	4a0a      	ldr	r2, [pc, #40]	; (d7d4 <pb_encode+0x70>)
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	bf08      	it	eq
    d7ae:	4613      	moveq	r3, r2
    d7b0:	6123      	str	r3, [r4, #16]
                return false;
    d7b2:	2000      	movs	r0, #0
}
    d7b4:	b015      	add	sp, #84	; 0x54
    d7b6:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    d7b8:	4620      	mov	r0, r4
    d7ba:	a90a      	add	r1, sp, #40	; 0x28
    d7bc:	f7ff fee0 	bl	d580 <encode_field>
    d7c0:	e7ea      	b.n	d798 <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    d7c2:	4669      	mov	r1, sp
    d7c4:	4620      	mov	r0, r4
    d7c6:	f7ff fedb 	bl	d580 <encode_field>
    d7ca:	2800      	cmp	r0, #0
    d7cc:	d1da      	bne.n	d784 <pb_encode+0x20>
    d7ce:	e7f0      	b.n	d7b2 <pb_encode+0x4e>
        return true; /* Empty message type */
    d7d0:	2001      	movs	r0, #1
    d7d2:	e7ef      	b.n	d7b4 <pb_encode+0x50>
    d7d4:	0002f243 	.word	0x0002f243

0000d7d8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7dc:	b091      	sub	sp, #68	; 0x44
    d7de:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    d7e0:	f002 0304 	and.w	r3, r2, #4
    d7e4:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    d7e6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    d7ea:	3301      	adds	r3, #1
    d7ec:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    d7ee:	0783      	lsls	r3, r0, #30
{
    d7f0:	4605      	mov	r5, r0
    d7f2:	460e      	mov	r6, r1
    d7f4:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    d7f8:	9202      	str	r2, [sp, #8]
	if ((uintptr_t)packaged % sizeof(void *)) {
    d7fa:	f040 81fe 	bne.w	dbfa <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    d7fe:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    d800:	b130      	cbz	r0, d810 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    d802:	2907      	cmp	r1, #7
    d804:	d809      	bhi.n	d81a <cbvprintf_package+0x42>
		return -ENOSPC;
    d806:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    d80a:	b011      	add	sp, #68	; 0x44
    d80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    d810:	f001 0607 	and.w	r6, r1, #7
    d814:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    d816:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    d81a:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
    d81e:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
    d822:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    d824:	4647      	mov	r7, r8
	s = fmt--;
    d826:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    d828:	f04f 32ff 	mov.w	r2, #4294967295
	bool parsing = false;
    d82c:	4643      	mov	r3, r8
	size = sizeof(char *);
    d82e:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    d830:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
    d834:	b10d      	cbz	r5, d83a <cbvprintf_package+0x62>
				*(const char **)buf = s;
    d836:	9800      	ldr	r0, [sp, #0]
    d838:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d83a:	9804      	ldr	r0, [sp, #16]
    d83c:	2800      	cmp	r0, #0
    d83e:	f300 80e1 	bgt.w	da04 <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    d842:	489c      	ldr	r0, [pc, #624]	; (dab4 <cbvprintf_package+0x2dc>)
    d844:	f8dd c000 	ldr.w	ip, [sp]
    d848:	4584      	cmp	ip, r0
    d84a:	d303      	bcc.n	d854 <cbvprintf_package+0x7c>
    d84c:	489a      	ldr	r0, [pc, #616]	; (dab8 <cbvprintf_package+0x2e0>)
    d84e:	4584      	cmp	ip, r0
    d850:	f0c0 80d8 	bcc.w	da04 <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d854:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d858:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d85c:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d860:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d864:	f000 80e9 	beq.w	da3a <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d868:	f04f 0c00 	mov.w	ip, #0
    d86c:	e0d3      	b.n	da16 <cbvprintf_package+0x23e>
			switch (*fmt) {
    d86e:	287a      	cmp	r0, #122	; 0x7a
    d870:	d864      	bhi.n	d93c <cbvprintf_package+0x164>
    d872:	284b      	cmp	r0, #75	; 0x4b
    d874:	d80f      	bhi.n	d896 <cbvprintf_package+0xbe>
    d876:	2847      	cmp	r0, #71	; 0x47
    d878:	d860      	bhi.n	d93c <cbvprintf_package+0x164>
    d87a:	2829      	cmp	r0, #41	; 0x29
    d87c:	d82f      	bhi.n	d8de <cbvprintf_package+0x106>
    d87e:	2825      	cmp	r0, #37	; 0x25
    d880:	d05b      	beq.n	d93a <cbvprintf_package+0x162>
    d882:	d85b      	bhi.n	d93c <cbvprintf_package+0x164>
    d884:	2820      	cmp	r0, #32
    d886:	d07f      	beq.n	d988 <cbvprintf_package+0x1b0>
    d888:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
    d88c:	f1d9 0300 	rsbs	r3, r9, #0
    d890:	eb43 0309 	adc.w	r3, r3, r9
    d894:	e078      	b.n	d988 <cbvprintf_package+0x1b0>
    d896:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
    d89a:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
    d89e:	d84d      	bhi.n	d93c <cbvprintf_package+0x164>
    d8a0:	e8df f00e 	tbb	[pc, lr]
    d8a4:	4c4c4c72 	.word	0x4c4c4c72
    d8a8:	4c4c4c4c 	.word	0x4c4c4c4c
    d8ac:	4c4c4c4c 	.word	0x4c4c4c4c
    d8b0:	4c4c4c4e 	.word	0x4c4c4c4e
    d8b4:	4c4c4c4c 	.word	0x4c4c4c4c
    d8b8:	4e4c5c4c 	.word	0x4e4c5c4c
    d8bc:	5c5c5c4e 	.word	0x5c5c5c4e
    d8c0:	4c6f4e72 	.word	0x4c6f4e72
    d8c4:	4e184c72 	.word	0x4e184c72
    d8c8:	814c4c18 	.word	0x814c4c18
    d8cc:	4c4c4e7e 	.word	0x4c4c4e7e
    d8d0:	4c4e      	.short	0x4c4e
    d8d2:	7e          	.byte	0x7e
    d8d3:	00          	.byte	0x00
    d8d4:	2000      	movs	r0, #0
    d8d6:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
    d8d8:	f04f 0b04 	mov.w	fp, #4
    d8dc:	e03c      	b.n	d958 <cbvprintf_package+0x180>
			switch (*fmt) {
    d8de:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
    d8e2:	2001      	movs	r0, #1
    d8e4:	fa5f fe8e 	uxtb.w	lr, lr
    d8e8:	fa00 fe0e 	lsl.w	lr, r0, lr
    d8ec:	f64f 70da 	movw	r0, #65498	; 0xffda
    d8f0:	ea1e 0f00 	tst.w	lr, r0
    d8f4:	d148      	bne.n	d988 <cbvprintf_package+0x1b0>
    d8f6:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
    d8fa:	d12f      	bne.n	d95c <cbvprintf_package+0x184>
    d8fc:	f01e 0301 	ands.w	r3, lr, #1
    d900:	d042      	beq.n	d988 <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
    d902:	3c01      	subs	r4, #1
    d904:	445c      	add	r4, fp
    d906:	f1cb 0e00 	rsb	lr, fp, #0
    d90a:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    d90e:	2d00      	cmp	r5, #0
    d910:	d05e      	beq.n	d9d0 <cbvprintf_package+0x1f8>
    d912:	ebaa 0e05 	sub.w	lr, sl, r5
    d916:	44a6      	add	lr, r4
    d918:	4576      	cmp	r6, lr
    d91a:	f4ff af74 	bcc.w	d806 <cbvprintf_package+0x2e>
		if (is_str_arg) {
    d91e:	2800      	cmp	r0, #0
    d920:	d168      	bne.n	d9f4 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    d922:	f1ba 0f04 	cmp.w	sl, #4
    d926:	d143      	bne.n	d9b0 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    d928:	46e1      	mov	r9, ip
    d92a:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
    d92e:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    d930:	46cc      	mov	ip, r9
    d932:	f04f 0a04 	mov.w	sl, #4
    d936:	3404      	adds	r4, #4
    d938:	e026      	b.n	d988 <cbvprintf_package+0x1b0>
				arg_idx--;
    d93a:	3a01      	subs	r2, #1
				parsing = false;
    d93c:	2300      	movs	r3, #0
				continue;
    d93e:	e023      	b.n	d988 <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
    d940:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    d944:	2b6c      	cmp	r3, #108	; 0x6c
    d946:	d130      	bne.n	d9aa <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    d948:	2000      	movs	r0, #0
    d94a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    d94e:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    d950:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
    d952:	d1c1      	bne.n	d8d8 <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
    d954:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
    d958:	46da      	mov	sl, fp
    d95a:	e7d2      	b.n	d902 <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
    d95c:	f10c 0907 	add.w	r9, ip, #7
    d960:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
    d964:	3407      	adds	r4, #7
    d966:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    d96a:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
    d96e:	b135      	cbz	r5, d97e <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
    d970:	9805      	ldr	r0, [sp, #20]
    d972:	4420      	add	r0, r4
    d974:	42b0      	cmp	r0, r6
    d976:	f63f af46 	bhi.w	d806 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    d97a:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    d97e:	2300      	movs	r3, #0
				buf += size;
    d980:	3408      	adds	r4, #8
			switch (*fmt) {
    d982:	f04f 0b08 	mov.w	fp, #8
    d986:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
    d988:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    d98c:	2800      	cmp	r0, #0
    d98e:	f000 80bc 	beq.w	db0a <cbvprintf_package+0x332>
			if (!parsing) {
    d992:	2b00      	cmp	r3, #0
    d994:	f47f af6b 	bne.w	d86e <cbvprintf_package+0x96>
				if (*fmt == '%') {
    d998:	2825      	cmp	r0, #37	; 0x25
    d99a:	d1f5      	bne.n	d988 <cbvprintf_package+0x1b0>
					parsing = true;
    d99c:	2301      	movs	r3, #1
					arg_idx++;
    d99e:	3201      	adds	r2, #1
				align = VA_STACK_ALIGN(size_t);
    d9a0:	f04f 0b04 	mov.w	fp, #4
    d9a4:	e7ef      	b.n	d986 <cbvprintf_package+0x1ae>
			switch (*fmt) {
    d9a6:	4618      	mov	r0, r3
    d9a8:	e795      	b.n	d8d6 <cbvprintf_package+0xfe>
    d9aa:	2000      	movs	r0, #0
				parsing = false;
    d9ac:	4603      	mov	r3, r0
    d9ae:	e7a8      	b.n	d902 <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
    d9b0:	f1ba 0f08 	cmp.w	sl, #8
    d9b4:	f040 809b 	bne.w	daee <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    d9b8:	f10c 0907 	add.w	r9, ip, #7
    d9bc:	f029 0c07 	bic.w	ip, r9, #7
    d9c0:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
    d9c4:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
    d9c8:	f04f 0a08 	mov.w	sl, #8
    d9cc:	3408      	adds	r4, #8
    d9ce:	e7db      	b.n	d988 <cbvprintf_package+0x1b0>
		if (is_str_arg) {
    d9d0:	b980      	cbnz	r0, d9f4 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    d9d2:	f1ba 0f04 	cmp.w	sl, #4
    d9d6:	d102      	bne.n	d9de <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
    d9d8:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
    d9dc:	e7a8      	b.n	d930 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
    d9de:	f1ba 0f08 	cmp.w	sl, #8
    d9e2:	f040 8084 	bne.w	daee <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    d9e6:	f10c 0907 	add.w	r9, ip, #7
    d9ea:	f029 0907 	bic.w	r9, r9, #7
    d9ee:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
    d9f2:	e7e9      	b.n	d9c8 <cbvprintf_package+0x1f0>
			s = va_arg(ap, char *);
    d9f4:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d9f6:	9804      	ldr	r0, [sp, #16]
    d9f8:	3801      	subs	r0, #1
    d9fa:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    d9fc:	f859 0b04 	ldr.w	r0, [r9], #4
    da00:	9000      	str	r0, [sp, #0]
    da02:	e717      	b.n	d834 <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
    da04:	9802      	ldr	r0, [sp, #8]
    da06:	0780      	lsls	r0, r0, #30
    da08:	d548      	bpl.n	da9c <cbvprintf_package+0x2c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    da0a:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    da0e:	eba4 0e05 	sub.w	lr, r4, r5
    da12:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    da16:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    da1a:	d31d      	bcc.n	da58 <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
    da1c:	4927      	ldr	r1, [pc, #156]	; (dabc <cbvprintf_package+0x2e4>)
    da1e:	f240 237b 	movw	r3, #635	; 0x27b
    da22:	4a27      	ldr	r2, [pc, #156]	; (dac0 <cbvprintf_package+0x2e8>)
    da24:	4827      	ldr	r0, [pc, #156]	; (dac4 <cbvprintf_package+0x2ec>)
    da26:	f019 fde4 	bl	275f2 <assert_print>
    da2a:	4827      	ldr	r0, [pc, #156]	; (dac8 <cbvprintf_package+0x2f0>)
    da2c:	f019 fde1 	bl	275f2 <assert_print>
    da30:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    da34:	4822      	ldr	r0, [pc, #136]	; (dac0 <cbvprintf_package+0x2e8>)
    da36:	f019 fdd5 	bl	275e4 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    da3a:	2f0f      	cmp	r7, #15
    da3c:	d80e      	bhi.n	da5c <cbvprintf_package+0x284>
				if (buf0 != NULL) {
    da3e:	2d00      	cmp	r5, #0
    da40:	d046      	beq.n	dad0 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    da42:	f107 0c40 	add.w	ip, r7, #64	; 0x40
    da46:	44ec      	add	ip, sp
    da48:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    da4c:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    da50:	9803      	ldr	r0, [sp, #12]
    da52:	3001      	adds	r0, #1
    da54:	9003      	str	r0, [sp, #12]
    da56:	e020      	b.n	da9a <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    da58:	2f0f      	cmp	r7, #15
    da5a:	d90c      	bls.n	da76 <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
    da5c:	4917      	ldr	r1, [pc, #92]	; (dabc <cbvprintf_package+0x2e4>)
    da5e:	f44f 7320 	mov.w	r3, #640	; 0x280
    da62:	4a17      	ldr	r2, [pc, #92]	; (dac0 <cbvprintf_package+0x2e8>)
    da64:	4817      	ldr	r0, [pc, #92]	; (dac4 <cbvprintf_package+0x2ec>)
    da66:	f019 fdc4 	bl	275f2 <assert_print>
    da6a:	4818      	ldr	r0, [pc, #96]	; (dacc <cbvprintf_package+0x2f4>)
    da6c:	f019 fdc1 	bl	275f2 <assert_print>
    da70:	f44f 7120 	mov.w	r1, #640	; 0x280
    da74:	e7de      	b.n	da34 <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
    da76:	b1bd      	cbz	r5, daa8 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    da78:	f107 0e40 	add.w	lr, r7, #64	; 0x40
    da7c:	44ee      	add	lr, sp
    da7e:	b2c0      	uxtb	r0, r0
    da80:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    da84:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    da88:	f1bc 0f00 	cmp.w	ip, #0
    da8c:	d0e0      	beq.n	da50 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    da8e:	f060 007f 	orn	r0, r0, #127	; 0x7f
    da92:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    da96:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
    da9a:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    da9c:	f1c5 0008 	rsb	r0, r5, #8
    daa0:	46cc      	mov	ip, r9
			buf += sizeof(char *);
    daa2:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    daa4:	9005      	str	r0, [sp, #20]
    daa6:	e76f      	b.n	d988 <cbvprintf_package+0x1b0>
				} else if (is_ro) {
    daa8:	f1bc 0f00 	cmp.w	ip, #0
    daac:	d010      	beq.n	dad0 <cbvprintf_package+0x2f8>
					len += 1;
    daae:	3601      	adds	r6, #1
    dab0:	e7f3      	b.n	da9a <cbvprintf_package+0x2c2>
    dab2:	bf00      	nop
    dab4:	0002cf5c 	.word	0x0002cf5c
    dab8:	00034408 	.word	0x00034408
    dabc:	00033fc0 	.word	0x00033fc0
    dac0:	0002f255 	.word	0x0002f255
    dac4:	0002e715 	.word	0x0002e715
    dac8:	0002f283 	.word	0x0002f283
    dacc:	0002f2a4 	.word	0x0002f2a4
				} else if (rws_pos_en) {
    dad0:	9801      	ldr	r0, [sp, #4]
					len += 2;
    dad2:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    dad4:	2800      	cmp	r0, #0
    dad6:	d1e0      	bne.n	da9a <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
    dad8:	9800      	ldr	r0, [sp, #0]
    dada:	e9cd 3106 	strd	r3, r1, [sp, #24]
    dade:	9205      	str	r2, [sp, #20]
    dae0:	f7fb fc93 	bl	940a <strlen>
    dae4:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    dae8:	9a05      	ldr	r2, [sp, #20]
    daea:	4406      	add	r6, r0
    daec:	e7d5      	b.n	da9a <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
    daee:	f240 23c5 	movw	r3, #709	; 0x2c5
    daf2:	4a43      	ldr	r2, [pc, #268]	; (dc00 <cbvprintf_package+0x428>)
    daf4:	4943      	ldr	r1, [pc, #268]	; (dc04 <cbvprintf_package+0x42c>)
    daf6:	4844      	ldr	r0, [pc, #272]	; (dc08 <cbvprintf_package+0x430>)
    daf8:	f019 fd7b 	bl	275f2 <assert_print>
    dafc:	4651      	mov	r1, sl
    dafe:	4843      	ldr	r0, [pc, #268]	; (dc0c <cbvprintf_package+0x434>)
    db00:	f019 fd77 	bl	275f2 <assert_print>
    db04:	f240 21c5 	movw	r1, #709	; 0x2c5
    db08:	e794      	b.n	da34 <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
    db0a:	1b63      	subs	r3, r4, r5
    db0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    db10:	d30c      	bcc.n	db2c <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
    db12:	493c      	ldr	r1, [pc, #240]	; (dc04 <cbvprintf_package+0x42c>)
    db14:	f240 23d1 	movw	r3, #721	; 0x2d1
    db18:	4a39      	ldr	r2, [pc, #228]	; (dc00 <cbvprintf_package+0x428>)
    db1a:	483b      	ldr	r0, [pc, #236]	; (dc08 <cbvprintf_package+0x430>)
    db1c:	f019 fd69 	bl	275f2 <assert_print>
    db20:	483b      	ldr	r0, [pc, #236]	; (dc10 <cbvprintf_package+0x438>)
    db22:	f019 fd66 	bl	275f2 <assert_print>
    db26:	f240 21d1 	movw	r1, #721	; 0x2d1
    db2a:	e783      	b.n	da34 <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
    db2c:	b91d      	cbnz	r5, db36 <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    db2e:	f1a6 0408 	sub.w	r4, r6, #8
    db32:	18e0      	adds	r0, r4, r3
    db34:	e669      	b.n	d80a <cbvprintf_package+0x32>
	if (rws_pos_en) {
    db36:	9a01      	ldr	r2, [sp, #4]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    db38:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    db3a:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    db3c:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    db3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
    db42:	b1c2      	cbz	r2, db76 <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    db44:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    db46:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
    db4a:	f1b8 0f00 	cmp.w	r8, #0
    db4e:	d005      	beq.n	db5c <cbvprintf_package+0x384>
		for (i = 0; i < s_idx; i++) {
    db50:	2200      	movs	r2, #0
    db52:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    db54:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    db58:	4297      	cmp	r7, r2
    db5a:	d10e      	bne.n	db7a <cbvprintf_package+0x3a2>
			*buf++ = str_ptr_arg[i];
    db5c:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    db60:	f1c5 0301 	rsb	r3, r5, #1
    db64:	f10d 0920 	add.w	r9, sp, #32
    db68:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
    db6a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    db6e:	4557      	cmp	r7, sl
    db70:	d112      	bne.n	db98 <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
    db72:	1b60      	subs	r0, r4, r5
    db74:	e649      	b.n	d80a <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    db76:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    db78:	e7e5      	b.n	db46 <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    db7a:	f810 3b01 	ldrb.w	r3, [r0], #1
    db7e:	0619      	lsls	r1, r3, #24
    db80:	d508      	bpl.n	db94 <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
    db82:	eb04 0e0c 	add.w	lr, r4, ip
    db86:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    db88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    db8c:	f4ff ae3b 	bcc.w	d806 <cbvprintf_package+0x2e>
			*buf++ = pos;
    db90:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    db94:	3201      	adds	r2, #1
    db96:	e7df      	b.n	db58 <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    db98:	f1b8 0f00 	cmp.w	r8, #0
    db9c:	d003      	beq.n	dba6 <cbvprintf_package+0x3ce>
    db9e:	f999 2000 	ldrsb.w	r2, [r9]
    dba2:	2a00      	cmp	r2, #0
    dba4:	db17      	blt.n	dbd6 <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
    dba6:	9b01      	ldr	r3, [sp, #4]
    dba8:	b1d3      	cbz	r3, dbe0 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
    dbaa:	f81a 200b 	ldrb.w	r2, [sl, fp]
    dbae:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    dbb2:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    dbb4:	9b02      	ldr	r3, [sp, #8]
    dbb6:	1898      	adds	r0, r3, r2
    dbb8:	4420      	add	r0, r4
    dbba:	4286      	cmp	r6, r0
    dbbc:	f4ff ae23 	bcc.w	d806 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    dbc0:	f899 0000 	ldrb.w	r0, [r9]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    dbc4:	9900      	ldr	r1, [sp, #0]
    dbc6:	f804 0b01 	strb.w	r0, [r4], #1
    dbca:	4620      	mov	r0, r4
    dbcc:	9203      	str	r2, [sp, #12]
    dbce:	f01e fa7d 	bl	2c0cc <memcpy>
		buf += size;
    dbd2:	9a03      	ldr	r2, [sp, #12]
    dbd4:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    dbd6:	f10a 0a01 	add.w	sl, sl, #1
    dbda:	f109 0901 	add.w	r9, r9, #1
    dbde:	e7c6      	b.n	db6e <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    dbe0:	f899 2000 	ldrb.w	r2, [r9]
    dbe4:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    dbe8:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    dbea:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
    dbec:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    dbee:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    dbf2:	f7fb fc0a 	bl	940a <strlen>
    dbf6:	1c42      	adds	r2, r0, #1
    dbf8:	e7dc      	b.n	dbb4 <cbvprintf_package+0x3dc>
		return -EFAULT;
    dbfa:	f06f 000d 	mvn.w	r0, #13
    dbfe:	e604      	b.n	d80a <cbvprintf_package+0x32>
    dc00:	0002f255 	.word	0x0002f255
    dc04:	00033fc0 	.word	0x00033fc0
    dc08:	0002e715 	.word	0x0002e715
    dc0c:	0002f2be 	.word	0x0002f2be
    dc10:	0002f2d3 	.word	0x0002f2d3

0000dc14 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    dc14:	4b01      	ldr	r3, [pc, #4]	; (dc1c <char_out+0x8>)
    dc16:	681b      	ldr	r3, [r3, #0]
    dc18:	4718      	bx	r3
    dc1a:	bf00      	nop
    dc1c:	20008450 	.word	0x20008450

0000dc20 <__printk_hook_install>:
	_char_out = fn;
    dc20:	4b01      	ldr	r3, [pc, #4]	; (dc28 <__printk_hook_install+0x8>)
    dc22:	6018      	str	r0, [r3, #0]
}
    dc24:	4770      	bx	lr
    dc26:	bf00      	nop
    dc28:	20008450 	.word	0x20008450

0000dc2c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    dc2c:	b507      	push	{r0, r1, r2, lr}
    dc2e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    dc30:	2100      	movs	r1, #0
    dc32:	4602      	mov	r2, r0
    dc34:	9100      	str	r1, [sp, #0]
    dc36:	4803      	ldr	r0, [pc, #12]	; (dc44 <vprintk+0x18>)
    dc38:	f000 fcb0 	bl	e59c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    dc3c:	b003      	add	sp, #12
    dc3e:	f85d fb04 	ldr.w	pc, [sp], #4
    dc42:	bf00      	nop
    dc44:	0000dc15 	.word	0x0000dc15

0000dc48 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    dc48:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    dc4a:	2500      	movs	r5, #0
{
    dc4c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    dc4e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    dc52:	4604      	mov	r4, r0
    dc54:	9500      	str	r5, [sp, #0]
    dc56:	a903      	add	r1, sp, #12
    dc58:	4805      	ldr	r0, [pc, #20]	; (dc70 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    dc5a:	9505      	str	r5, [sp, #20]
    dc5c:	f000 fc9e 	bl	e59c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    dc60:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    dc64:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    dc66:	bfb8      	it	lt
    dc68:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    dc6a:	b007      	add	sp, #28
    dc6c:	bd30      	pop	{r4, r5, pc}
    dc6e:	bf00      	nop
    dc70:	00027249 	.word	0x00027249

0000dc74 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    dc74:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    dc76:	460c      	mov	r4, r1
    dc78:	2900      	cmp	r1, #0
    dc7a:	d034      	beq.n	dce6 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    dc7c:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    dc7e:	1f0b      	subs	r3, r1, #4
    dc80:	1a9b      	subs	r3, r3, r2
    dc82:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    dc84:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    dc88:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    dc8a:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    dc8c:	07e8      	lsls	r0, r5, #31
    dc8e:	d40d      	bmi.n	dcac <sys_heap_free+0x38>
    dc90:	23af      	movs	r3, #175	; 0xaf
    dc92:	4a15      	ldr	r2, [pc, #84]	; (dce8 <sys_heap_free+0x74>)
    dc94:	4915      	ldr	r1, [pc, #84]	; (dcec <sys_heap_free+0x78>)
    dc96:	4816      	ldr	r0, [pc, #88]	; (dcf0 <sys_heap_free+0x7c>)
    dc98:	f019 fcab 	bl	275f2 <assert_print>
    dc9c:	4621      	mov	r1, r4
    dc9e:	4815      	ldr	r0, [pc, #84]	; (dcf4 <sys_heap_free+0x80>)
    dca0:	f019 fca7 	bl	275f2 <assert_print>
    dca4:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    dca6:	4810      	ldr	r0, [pc, #64]	; (dce8 <sys_heap_free+0x74>)
    dca8:	f019 fc9c 	bl	275e4 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    dcac:	4610      	mov	r0, r2
    dcae:	f019 fb02 	bl	272b6 <chunk_size>
    dcb2:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    dcb4:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    dcb8:	1b80      	subs	r0, r0, r6
    dcba:	4281      	cmp	r1, r0
    dcbc:	d00b      	beq.n	dcd6 <sys_heap_free+0x62>
    dcbe:	23b7      	movs	r3, #183	; 0xb7
    dcc0:	4a09      	ldr	r2, [pc, #36]	; (dce8 <sys_heap_free+0x74>)
    dcc2:	490d      	ldr	r1, [pc, #52]	; (dcf8 <sys_heap_free+0x84>)
    dcc4:	480a      	ldr	r0, [pc, #40]	; (dcf0 <sys_heap_free+0x7c>)
    dcc6:	f019 fc94 	bl	275f2 <assert_print>
    dcca:	4621      	mov	r1, r4
    dccc:	480b      	ldr	r0, [pc, #44]	; (dcfc <sys_heap_free+0x88>)
    dcce:	f019 fc90 	bl	275f2 <assert_print>
    dcd2:	21b7      	movs	r1, #183	; 0xb7
    dcd4:	e7e7      	b.n	dca6 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    dcd6:	f025 0501 	bic.w	r5, r5, #1
    dcda:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    dcdc:	4610      	mov	r0, r2
}
    dcde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    dce2:	f019 bba5 	b.w	27430 <free_chunk>
}
    dce6:	bd70      	pop	{r4, r5, r6, pc}
    dce8:	0002f2fb 	.word	0x0002f2fb
    dcec:	0002f31c 	.word	0x0002f31c
    dcf0:	0002e715 	.word	0x0002e715
    dcf4:	0002f32d 	.word	0x0002f32d
    dcf8:	0002f365 	.word	0x0002f365
    dcfc:	0002f38b 	.word	0x0002f38b

0000dd00 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    dd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd04:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    dd06:	400b      	ands	r3, r1
{
    dd08:	460f      	mov	r7, r1
    dd0a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    dd0c:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    dd0e:	d010      	beq.n	dd32 <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    dd10:	f1c1 0900 	rsb	r9, r1, #0
    dd14:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    dd18:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    dd1a:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    dd1c:	2a04      	cmp	r2, #4
    dd1e:	bf28      	it	cs
    dd20:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    dd22:	4219      	tst	r1, r3
    dd24:	d10c      	bne.n	dd40 <sys_heap_aligned_alloc+0x40>
    dd26:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    dd28:	b9e4      	cbnz	r4, dd64 <sys_heap_aligned_alloc+0x64>
		return NULL;
    dd2a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    dd2c:	4628      	mov	r0, r5
    dd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    dd32:	2904      	cmp	r1, #4
    dd34:	d813      	bhi.n	dd5e <sys_heap_aligned_alloc+0x5e>
}
    dd36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    dd3a:	4611      	mov	r1, r2
    dd3c:	f019 bba9 	b.w	27492 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    dd40:	492c      	ldr	r1, [pc, #176]	; (ddf4 <sys_heap_aligned_alloc+0xf4>)
    dd42:	f44f 73a2 	mov.w	r3, #324	; 0x144
    dd46:	4a2c      	ldr	r2, [pc, #176]	; (ddf8 <sys_heap_aligned_alloc+0xf8>)
    dd48:	482c      	ldr	r0, [pc, #176]	; (ddfc <sys_heap_aligned_alloc+0xfc>)
    dd4a:	f019 fc52 	bl	275f2 <assert_print>
    dd4e:	482c      	ldr	r0, [pc, #176]	; (de00 <sys_heap_aligned_alloc+0x100>)
    dd50:	f019 fc4f 	bl	275f2 <assert_print>
    dd54:	f44f 71a2 	mov.w	r1, #324	; 0x144
    dd58:	4827      	ldr	r0, [pc, #156]	; (ddf8 <sys_heap_aligned_alloc+0xf8>)
    dd5a:	f019 fc43 	bl	275e4 <assert_post_action>
		rew = 0;
    dd5e:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    dd60:	2204      	movs	r2, #4
    dd62:	e7e1      	b.n	dd28 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    dd64:	68b3      	ldr	r3, [r6, #8]
    dd66:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    dd6a:	d9de      	bls.n	dd2a <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    dd6c:	f104 010b 	add.w	r1, r4, #11
    dd70:	4439      	add	r1, r7
    dd72:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    dd74:	4630      	mov	r0, r6
    dd76:	08c9      	lsrs	r1, r1, #3
    dd78:	f019 faf3 	bl	27362 <alloc_chunk>
	if (c0 == 0) {
    dd7c:	4680      	mov	r8, r0
    dd7e:	2800      	cmp	r0, #0
    dd80:	d0d3      	beq.n	dd2a <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    dd82:	f109 0504 	add.w	r5, r9, #4
    dd86:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    dd8a:	1e7b      	subs	r3, r7, #1
    dd8c:	4435      	add	r5, r6
    dd8e:	441d      	add	r5, r3
    dd90:	427f      	negs	r7, r7
    dd92:	403d      	ands	r5, r7
    dd94:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    dd98:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    dd9a:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    dd9c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    dd9e:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    dda0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    dda4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    dda6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ddaa:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ddae:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ddb2:	d208      	bcs.n	ddc6 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    ddb4:	4601      	mov	r1, r0
    ddb6:	463a      	mov	r2, r7
    ddb8:	4630      	mov	r0, r6
    ddba:	f019 fb1f 	bl	273fc <split_chunks>
		free_list_add(h, c0);
    ddbe:	4641      	mov	r1, r8
    ddc0:	4630      	mov	r0, r6
    ddc2:	f019 fa7d 	bl	272c0 <free_list_add>
	return c + chunk_size(h, c);
    ddc6:	4639      	mov	r1, r7
    ddc8:	4630      	mov	r0, r6
    ddca:	f019 fa74 	bl	272b6 <chunk_size>
    ddce:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ddd0:	4284      	cmp	r4, r0
    ddd2:	d207      	bcs.n	dde4 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    ddd4:	4630      	mov	r0, r6
    ddd6:	4622      	mov	r2, r4
    ddd8:	f019 fb10 	bl	273fc <split_chunks>
		free_list_add(h, c_end);
    dddc:	4621      	mov	r1, r4
    ddde:	4630      	mov	r0, r6
    dde0:	f019 fa6e 	bl	272c0 <free_list_add>
	void *cmem = &buf[c];
    dde4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    dde8:	8873      	ldrh	r3, [r6, #2]
    ddea:	f043 0301 	orr.w	r3, r3, #1
    ddee:	8073      	strh	r3, [r6, #2]
    ddf0:	e79c      	b.n	dd2c <sys_heap_aligned_alloc+0x2c>
    ddf2:	bf00      	nop
    ddf4:	0002f3c7 	.word	0x0002f3c7
    ddf8:	0002f2fb 	.word	0x0002f2fb
    ddfc:	0002e715 	.word	0x0002e715
    de00:	0002f3e2 	.word	0x0002f3e2

0000de04 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    de04:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    de08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de0a:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    de0c:	d30e      	bcc.n	de2c <sys_heap_init+0x28>
    de0e:	493a      	ldr	r1, [pc, #232]	; (def8 <sys_heap_init+0xf4>)
    de10:	f240 13eb 	movw	r3, #491	; 0x1eb
    de14:	4a39      	ldr	r2, [pc, #228]	; (defc <sys_heap_init+0xf8>)
    de16:	483a      	ldr	r0, [pc, #232]	; (df00 <sys_heap_init+0xfc>)
    de18:	f019 fbeb 	bl	275f2 <assert_print>
    de1c:	4839      	ldr	r0, [pc, #228]	; (df04 <sys_heap_init+0x100>)
    de1e:	f019 fbe8 	bl	275f2 <assert_print>
    de22:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    de26:	4835      	ldr	r0, [pc, #212]	; (defc <sys_heap_init+0xf8>)
    de28:	f019 fbdc 	bl	275e4 <assert_post_action>
    de2c:	2a04      	cmp	r2, #4
    de2e:	d80c      	bhi.n	de4a <sys_heap_init+0x46>
    de30:	4935      	ldr	r1, [pc, #212]	; (df08 <sys_heap_init+0x104>)
    de32:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    de36:	4a31      	ldr	r2, [pc, #196]	; (defc <sys_heap_init+0xf8>)
    de38:	4831      	ldr	r0, [pc, #196]	; (df00 <sys_heap_init+0xfc>)
    de3a:	f019 fbda 	bl	275f2 <assert_print>
    de3e:	4833      	ldr	r0, [pc, #204]	; (df0c <sys_heap_init+0x108>)
    de40:	f019 fbd7 	bl	275f2 <assert_print>
    de44:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    de48:	e7ed      	b.n	de26 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    de4a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    de4c:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    de4e:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    de50:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    de54:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    de58:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    de5a:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    de5c:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    de60:	d80c      	bhi.n	de7c <sys_heap_init+0x78>
    de62:	492b      	ldr	r1, [pc, #172]	; (df10 <sys_heap_init+0x10c>)
    de64:	f240 13fb 	movw	r3, #507	; 0x1fb
    de68:	4a24      	ldr	r2, [pc, #144]	; (defc <sys_heap_init+0xf8>)
    de6a:	4825      	ldr	r0, [pc, #148]	; (df00 <sys_heap_init+0xfc>)
    de6c:	f019 fbc1 	bl	275f2 <assert_print>
    de70:	4826      	ldr	r0, [pc, #152]	; (df0c <sys_heap_init+0x108>)
    de72:	f019 fbbe 	bl	275f2 <assert_print>
    de76:	f240 11fb 	movw	r1, #507	; 0x1fb
    de7a:	e7d4      	b.n	de26 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    de7c:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    de80:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    de82:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    de84:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    de88:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    de8c:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    de8e:	3107      	adds	r1, #7
    de90:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    de92:	1c4d      	adds	r5, r1, #1
    de94:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    de96:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    de98:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    de9a:	d90c      	bls.n	deb6 <sys_heap_init+0xb2>
    de9c:	491d      	ldr	r1, [pc, #116]	; (df14 <sys_heap_init+0x110>)
    de9e:	f44f 7303 	mov.w	r3, #524	; 0x20c
    dea2:	4a16      	ldr	r2, [pc, #88]	; (defc <sys_heap_init+0xf8>)
    dea4:	4816      	ldr	r0, [pc, #88]	; (df00 <sys_heap_init+0xfc>)
    dea6:	f019 fba4 	bl	275f2 <assert_print>
    deaa:	4818      	ldr	r0, [pc, #96]	; (df0c <sys_heap_init+0x108>)
    deac:	f019 fba1 	bl	275f2 <assert_print>
    deb0:	f44f 7103 	mov.w	r1, #524	; 0x20c
    deb4:	e7b7      	b.n	de26 <sys_heap_init+0x22>
    deb6:	f100 050c 	add.w	r5, r0, #12
    deba:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    debe:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    dec2:	42b5      	cmp	r5, r6
    dec4:	d1fb      	bne.n	debe <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    dec6:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    dec8:	f045 0501 	orr.w	r5, r5, #1
    decc:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    dece:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    ded0:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ded4:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    ded6:	8004      	strh	r4, [r0, #0]
    ded8:	8077      	strh	r7, [r6, #2]
    deda:	1886      	adds	r6, r0, r2
    dedc:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    dee0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    dee4:	8074      	strh	r4, [r6, #2]
    dee6:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    dee8:	885a      	ldrh	r2, [r3, #2]
    deea:	f042 0201 	orr.w	r2, r2, #1
    deee:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    def0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    def4:	f019 b9e4 	b.w	272c0 <free_list_add>
    def8:	0002f3ff 	.word	0x0002f3ff
    defc:	0002f2fb 	.word	0x0002f2fb
    df00:	0002e715 	.word	0x0002e715
    df04:	0002f415 	.word	0x0002f415
    df08:	0002f42c 	.word	0x0002f42c
    df0c:	0002f44d 	.word	0x0002f44d
    df10:	0002f466 	.word	0x0002f466
    df14:	0002f48f 	.word	0x0002f48f

0000df18 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    df18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df1c:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    df1e:	8ba3      	ldrh	r3, [r4, #28]
{
    df20:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    df22:	0719      	lsls	r1, r3, #28
{
    df24:	4615      	mov	r5, r2
	if (processing) {
    df26:	d412      	bmi.n	df4e <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    df28:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    df2a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    df2e:	d164      	bne.n	dffa <process_event+0xe2>
			evt = process_recheck(mgr);
    df30:	4620      	mov	r0, r4
    df32:	f019 fad7 	bl	274e4 <process_recheck>
		}

		if (evt == EVT_NOP) {
    df36:	b188      	cbz	r0, df5c <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    df38:	3801      	subs	r0, #1
    df3a:	2804      	cmp	r0, #4
    df3c:	f200 8134 	bhi.w	e1a8 <process_event+0x290>
    df40:	e8df f010 	tbh	[pc, r0, lsl #1]
    df44:	0132005b 	.word	0x0132005b
    df48:	00d10081 	.word	0x00d10081
    df4c:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    df4e:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    df50:	bf0c      	ite	eq
    df52:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    df56:	f043 0120 	orrne.w	r1, r3, #32
    df5a:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    df5c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    df5e:	4620      	mov	r0, r4
    df60:	f012 fcd8 	bl	20914 <z_spin_unlock_valid>
    df64:	2800      	cmp	r0, #0
    df66:	f040 819b 	bne.w	e2a0 <process_event+0x388>
    df6a:	4998      	ldr	r1, [pc, #608]	; (e1cc <process_event+0x2b4>)
    df6c:	23c2      	movs	r3, #194	; 0xc2
    df6e:	4a98      	ldr	r2, [pc, #608]	; (e1d0 <process_event+0x2b8>)
    df70:	4898      	ldr	r0, [pc, #608]	; (e1d4 <process_event+0x2bc>)
    df72:	f019 fb3e 	bl	275f2 <assert_print>
    df76:	4621      	mov	r1, r4
    df78:	e0b0      	b.n	e0dc <process_event+0x1c4>
    df7a:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    df7e:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    df80:	2801      	cmp	r0, #1
    df82:	d81e      	bhi.n	dfc2 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    df84:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    df86:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    df88:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    df8a:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    df8e:	d114      	bne.n	dfba <process_event+0xa2>
		*clients = mgr->clients;
    df90:	463a      	mov	r2, r7
    df92:	e003      	b.n	df9c <process_event+0x84>
				mgr->refs += 1U;
    df94:	8be0      	ldrh	r0, [r4, #30]
    df96:	3001      	adds	r0, #1
    df98:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    df9a:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    df9c:	2a00      	cmp	r2, #0
    df9e:	d1f9      	bne.n	df94 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dfa0:	f023 0307 	bic.w	r3, r3, #7
    dfa4:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    dfa8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    dfaa:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    dfac:	f019 fa9a 	bl	274e4 <process_recheck>
    dfb0:	b390      	cbz	r0, e018 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dfb2:	f042 0220 	orr.w	r2, r2, #32
    dfb6:	83a2      	strh	r2, [r4, #28]
    dfb8:	e02e      	b.n	e018 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dfba:	f023 0307 	bic.w	r3, r3, #7
    dfbe:	b29a      	uxth	r2, r3
}
    dfc0:	e7f2      	b.n	dfa8 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    dfc2:	2a04      	cmp	r2, #4
    dfc4:	d133      	bne.n	e02e <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dfc6:	f023 0307 	bic.w	r3, r3, #7
    dfca:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    dfcc:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    dfce:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    dfd0:	f019 fa88 	bl	274e4 <process_recheck>
    dfd4:	b110      	cbz	r0, dfdc <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dfd6:	f042 0220 	orr.w	r2, r2, #32
    dfda:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    dfdc:	8ba3      	ldrh	r3, [r4, #28]
    dfde:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    dfe2:	4589      	cmp	r9, r1
    dfe4:	f040 80ea 	bne.w	e1bc <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    dfe8:	8ba1      	ldrh	r1, [r4, #28]
    dfea:	06ca      	lsls	r2, r1, #27
    dfec:	f140 814f 	bpl.w	e28e <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    dff0:	f021 0310 	bic.w	r3, r1, #16
    dff4:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    dff6:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    dffa:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dffe:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    e000:	f1b8 0f00 	cmp.w	r8, #0
    e004:	dab9      	bge.n	df7a <process_event+0x62>
	list->head = NULL;
    e006:	2200      	movs	r2, #0
		*clients = mgr->clients;
    e008:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e00a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    e00e:	e9c4 2200 	strd	r2, r2, [r4]
    e012:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    e016:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e018:	8ba3      	ldrh	r3, [r4, #28]
    e01a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e01e:	4589      	cmp	r9, r1
    e020:	f040 80cd 	bne.w	e1be <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    e024:	2f00      	cmp	r7, #0
    e026:	d0df      	beq.n	dfe8 <process_event+0xd0>
    e028:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e02a:	46b2      	mov	sl, r6
    e02c:	e044      	b.n	e0b8 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    e02e:	496a      	ldr	r1, [pc, #424]	; (e1d8 <process_event+0x2c0>)
    e030:	f240 131b 	movw	r3, #283	; 0x11b
    e034:	4a69      	ldr	r2, [pc, #420]	; (e1dc <process_event+0x2c4>)
    e036:	4867      	ldr	r0, [pc, #412]	; (e1d4 <process_event+0x2bc>)
    e038:	f019 fadb 	bl	275f2 <assert_print>
    e03c:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    e040:	4866      	ldr	r0, [pc, #408]	; (e1dc <process_event+0x2c4>)
    e042:	f019 facf 	bl	275e4 <assert_post_action>
    e046:	b149      	cbz	r1, e05c <process_event+0x144>
    e048:	4965      	ldr	r1, [pc, #404]	; (e1e0 <process_event+0x2c8>)
    e04a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    e04e:	4a63      	ldr	r2, [pc, #396]	; (e1dc <process_event+0x2c4>)
    e050:	4860      	ldr	r0, [pc, #384]	; (e1d4 <process_event+0x2bc>)
    e052:	f019 face 	bl	275f2 <assert_print>
    e056:	f44f 71ab 	mov.w	r1, #342	; 0x156
    e05a:	e7f1      	b.n	e040 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    e05c:	6823      	ldr	r3, [r4, #0]
    e05e:	b94b      	cbnz	r3, e074 <process_event+0x15c>
    e060:	4960      	ldr	r1, [pc, #384]	; (e1e4 <process_event+0x2cc>)
    e062:	f240 1357 	movw	r3, #343	; 0x157
    e066:	4a5d      	ldr	r2, [pc, #372]	; (e1dc <process_event+0x2c4>)
    e068:	485a      	ldr	r0, [pc, #360]	; (e1d4 <process_event+0x2bc>)
    e06a:	f019 fac2 	bl	275f2 <assert_print>
    e06e:	f240 1157 	movw	r1, #343	; 0x157
    e072:	e7e5      	b.n	e040 <process_event+0x128>
			transit = mgr->transitions->start;
    e074:	6923      	ldr	r3, [r4, #16]
    e076:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    e078:	b94e      	cbnz	r6, e08e <process_event+0x176>
    e07a:	495b      	ldr	r1, [pc, #364]	; (e1e8 <process_event+0x2d0>)
    e07c:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    e080:	4a56      	ldr	r2, [pc, #344]	; (e1dc <process_event+0x2c4>)
    e082:	4854      	ldr	r0, [pc, #336]	; (e1d4 <process_event+0x2bc>)
    e084:	f019 fab5 	bl	275f2 <assert_print>
    e088:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    e08c:	e7d8      	b.n	e040 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    e08e:	460f      	mov	r7, r1
		res = 0;
    e090:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e092:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e096:	8ba3      	ldrh	r3, [r4, #28]
    e098:	f023 0307 	bic.w	r3, r3, #7
    e09c:	f043 0306 	orr.w	r3, r3, #6
    e0a0:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    e0a2:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    e0a4:	68a2      	ldr	r2, [r4, #8]
    e0a6:	2a00      	cmp	r2, #0
    e0a8:	f040 808b 	bne.w	e1c2 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    e0ac:	2f00      	cmp	r7, #0
    e0ae:	f040 808b 	bne.w	e1c8 <process_event+0x2b0>
		    || (transit != NULL)) {
    e0b2:	2e00      	cmp	r6, #0
    e0b4:	d098      	beq.n	dfe8 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e0b6:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e0b8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    e0bc:	f104 0b14 	add.w	fp, r4, #20
    e0c0:	4658      	mov	r0, fp
			mgr->flags = flags;
    e0c2:	83a3      	strh	r3, [r4, #28]
    e0c4:	f012 fc26 	bl	20914 <z_spin_unlock_valid>
    e0c8:	2800      	cmp	r0, #0
    e0ca:	f040 8097 	bne.w	e1fc <process_event+0x2e4>
    e0ce:	493f      	ldr	r1, [pc, #252]	; (e1cc <process_event+0x2b4>)
    e0d0:	23c2      	movs	r3, #194	; 0xc2
    e0d2:	4a3f      	ldr	r2, [pc, #252]	; (e1d0 <process_event+0x2b8>)
    e0d4:	483f      	ldr	r0, [pc, #252]	; (e1d4 <process_event+0x2bc>)
    e0d6:	f019 fa8c 	bl	275f2 <assert_print>
    e0da:	4659      	mov	r1, fp
    e0dc:	4843      	ldr	r0, [pc, #268]	; (e1ec <process_event+0x2d4>)
    e0de:	f019 fa88 	bl	275f2 <assert_print>
    e0e2:	21c2      	movs	r1, #194	; 0xc2
    e0e4:	e0ae      	b.n	e244 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    e0e6:	2902      	cmp	r1, #2
    e0e8:	d009      	beq.n	e0fe <process_event+0x1e6>
    e0ea:	4941      	ldr	r1, [pc, #260]	; (e1f0 <process_event+0x2d8>)
    e0ec:	f240 135d 	movw	r3, #349	; 0x15d
    e0f0:	4a3a      	ldr	r2, [pc, #232]	; (e1dc <process_event+0x2c4>)
    e0f2:	4838      	ldr	r0, [pc, #224]	; (e1d4 <process_event+0x2bc>)
    e0f4:	f019 fa7d 	bl	275f2 <assert_print>
    e0f8:	f240 115d 	movw	r1, #349	; 0x15d
    e0fc:	e7a0      	b.n	e040 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    e0fe:	8be7      	ldrh	r7, [r4, #30]
    e100:	b14f      	cbz	r7, e116 <process_event+0x1fe>
    e102:	493c      	ldr	r1, [pc, #240]	; (e1f4 <process_event+0x2dc>)
    e104:	f44f 73af 	mov.w	r3, #350	; 0x15e
    e108:	4a34      	ldr	r2, [pc, #208]	; (e1dc <process_event+0x2c4>)
    e10a:	4832      	ldr	r0, [pc, #200]	; (e1d4 <process_event+0x2bc>)
    e10c:	f019 fa71 	bl	275f2 <assert_print>
    e110:	f44f 71af 	mov.w	r1, #350	; 0x15e
    e114:	e794      	b.n	e040 <process_event+0x128>
			transit = mgr->transitions->stop;
    e116:	6923      	ldr	r3, [r4, #16]
    e118:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    e11a:	b94e      	cbnz	r6, e130 <process_event+0x218>
    e11c:	4932      	ldr	r1, [pc, #200]	; (e1e8 <process_event+0x2d0>)
    e11e:	f240 1361 	movw	r3, #353	; 0x161
    e122:	4a2e      	ldr	r2, [pc, #184]	; (e1dc <process_event+0x2c4>)
    e124:	482b      	ldr	r0, [pc, #172]	; (e1d4 <process_event+0x2bc>)
    e126:	f019 fa64 	bl	275f2 <assert_print>
    e12a:	f240 1161 	movw	r1, #353	; 0x161
    e12e:	e787      	b.n	e040 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e130:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    e132:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e134:	f023 0307 	bic.w	r3, r3, #7
    e138:	f043 0304 	orr.w	r3, r3, #4
    e13c:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e13e:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e142:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e144:	e7ae      	b.n	e0a4 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    e146:	2901      	cmp	r1, #1
    e148:	d009      	beq.n	e15e <process_event+0x246>
    e14a:	492b      	ldr	r1, [pc, #172]	; (e1f8 <process_event+0x2e0>)
    e14c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    e150:	4a22      	ldr	r2, [pc, #136]	; (e1dc <process_event+0x2c4>)
    e152:	4820      	ldr	r0, [pc, #128]	; (e1d4 <process_event+0x2bc>)
    e154:	f019 fa4d 	bl	275f2 <assert_print>
    e158:	f44f 71b2 	mov.w	r1, #356	; 0x164
    e15c:	e770      	b.n	e040 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    e15e:	6823      	ldr	r3, [r4, #0]
    e160:	b94b      	cbnz	r3, e176 <process_event+0x25e>
    e162:	4920      	ldr	r1, [pc, #128]	; (e1e4 <process_event+0x2cc>)
    e164:	f240 1365 	movw	r3, #357	; 0x165
    e168:	4a1c      	ldr	r2, [pc, #112]	; (e1dc <process_event+0x2c4>)
    e16a:	481a      	ldr	r0, [pc, #104]	; (e1d4 <process_event+0x2bc>)
    e16c:	f019 fa41 	bl	275f2 <assert_print>
    e170:	f240 1165 	movw	r1, #357	; 0x165
    e174:	e764      	b.n	e040 <process_event+0x128>
			transit = mgr->transitions->reset;
    e176:	6923      	ldr	r3, [r4, #16]
    e178:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    e17a:	b94e      	cbnz	r6, e190 <process_event+0x278>
    e17c:	491a      	ldr	r1, [pc, #104]	; (e1e8 <process_event+0x2d0>)
    e17e:	f44f 73b4 	mov.w	r3, #360	; 0x168
    e182:	4a16      	ldr	r2, [pc, #88]	; (e1dc <process_event+0x2c4>)
    e184:	4813      	ldr	r0, [pc, #76]	; (e1d4 <process_event+0x2bc>)
    e186:	f019 fa34 	bl	275f2 <assert_print>
    e18a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    e18e:	e757      	b.n	e040 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    e190:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e192:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    e194:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e196:	f023 0307 	bic.w	r3, r3, #7
    e19a:	f043 0305 	orr.w	r3, r3, #5
    e19e:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e1a0:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    e1a4:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e1a6:	e77d      	b.n	e0a4 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    e1a8:	490b      	ldr	r1, [pc, #44]	; (e1d8 <process_event+0x2c0>)
    e1aa:	f240 136b 	movw	r3, #363	; 0x16b
    e1ae:	4a0b      	ldr	r2, [pc, #44]	; (e1dc <process_event+0x2c4>)
    e1b0:	4808      	ldr	r0, [pc, #32]	; (e1d4 <process_event+0x2bc>)
    e1b2:	f019 fa1e 	bl	275f2 <assert_print>
    e1b6:	f240 116b 	movw	r1, #363	; 0x16b
    e1ba:	e741      	b.n	e040 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    e1bc:	2700      	movs	r7, #0
    e1be:	2600      	movs	r6, #0
    e1c0:	e770      	b.n	e0a4 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e1c2:	f04f 0a01 	mov.w	sl, #1
    e1c6:	e777      	b.n	e0b8 <process_event+0x1a0>
    e1c8:	4692      	mov	sl, r2
    e1ca:	e775      	b.n	e0b8 <process_event+0x1a0>
    e1cc:	0002f58a 	.word	0x0002f58a
    e1d0:	0002f55d 	.word	0x0002f55d
    e1d4:	0002e715 	.word	0x0002e715
    e1d8:	00033fc0 	.word	0x00033fc0
    e1dc:	0002f4ba 	.word	0x0002f4ba
    e1e0:	0002f4dc 	.word	0x0002f4dc
    e1e4:	0002f4e8 	.word	0x0002f4e8
    e1e8:	0002f50b 	.word	0x0002f50b
    e1ec:	0002f5a1 	.word	0x0002f5a1
    e1f0:	0002f522 	.word	0x0002f522
    e1f4:	0002f538 	.word	0x0002f538
    e1f8:	0002f547 	.word	0x0002f547
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e1fc:	f385 8811 	msr	BASEPRI, r5
    e200:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    e204:	f1ba 0f00 	cmp.w	sl, #0
    e208:	d11e      	bne.n	e248 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    e20a:	2f00      	cmp	r7, #0
    e20c:	d12f      	bne.n	e26e <process_event+0x356>
			if (transit != NULL) {
    e20e:	b116      	cbz	r6, e216 <process_event+0x2fe>
				transit(mgr, transition_complete);
    e210:	4620      	mov	r0, r4
    e212:	4926      	ldr	r1, [pc, #152]	; (e2ac <process_event+0x394>)
    e214:	47b0      	blx	r6
	__asm__ volatile(
    e216:	f04f 0320 	mov.w	r3, #32
    e21a:	f3ef 8511 	mrs	r5, BASEPRI
    e21e:	f383 8812 	msr	BASEPRI_MAX, r3
    e222:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e226:	4658      	mov	r0, fp
    e228:	f012 fb66 	bl	208f8 <z_spin_lock_valid>
    e22c:	bb38      	cbnz	r0, e27e <process_event+0x366>
    e22e:	2394      	movs	r3, #148	; 0x94
    e230:	4a1f      	ldr	r2, [pc, #124]	; (e2b0 <process_event+0x398>)
    e232:	4920      	ldr	r1, [pc, #128]	; (e2b4 <process_event+0x39c>)
    e234:	4820      	ldr	r0, [pc, #128]	; (e2b8 <process_event+0x3a0>)
    e236:	f019 f9dc 	bl	275f2 <assert_print>
    e23a:	4659      	mov	r1, fp
    e23c:	481f      	ldr	r0, [pc, #124]	; (e2bc <process_event+0x3a4>)
    e23e:	f019 f9d8 	bl	275f2 <assert_print>
    e242:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e244:	481a      	ldr	r0, [pc, #104]	; (e2b0 <process_event+0x398>)
    e246:	e6fc      	b.n	e042 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    e248:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e24a:	2900      	cmp	r1, #0
    e24c:	d0dd      	beq.n	e20a <process_event+0x2f2>
	return node->next;
    e24e:	680d      	ldr	r5, [r1, #0]
    e250:	2900      	cmp	r1, #0
    e252:	d0da      	beq.n	e20a <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    e254:	4643      	mov	r3, r8
    e256:	464a      	mov	r2, r9
    e258:	4620      	mov	r0, r4
    e25a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e25e:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e260:	b11d      	cbz	r5, e26a <process_event+0x352>
    e262:	682b      	ldr	r3, [r5, #0]
    e264:	4629      	mov	r1, r5
    e266:	461d      	mov	r5, r3
    e268:	e7f2      	b.n	e250 <process_event+0x338>
    e26a:	462b      	mov	r3, r5
    e26c:	e7fa      	b.n	e264 <process_event+0x34c>
    e26e:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    e270:	4643      	mov	r3, r8
    e272:	464a      	mov	r2, r9
    e274:	4620      	mov	r0, r4
    e276:	683f      	ldr	r7, [r7, #0]
    e278:	f019 f960 	bl	2753c <notify_one>
    e27c:	e7c5      	b.n	e20a <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    e27e:	4658      	mov	r0, fp
    e280:	f012 fb56 	bl	20930 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    e284:	8ba3      	ldrh	r3, [r4, #28]
    e286:	f023 0308 	bic.w	r3, r3, #8
    e28a:	83a3      	strh	r3, [r4, #28]
    e28c:	e6ac      	b.n	dfe8 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    e28e:	068b      	lsls	r3, r1, #26
    e290:	f57f ae64 	bpl.w	df5c <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    e294:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e298:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    e29a:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    e29e:	e647      	b.n	df30 <process_event+0x18>
	__asm__ volatile(
    e2a0:	f385 8811 	msr	BASEPRI, r5
    e2a4:	f3bf 8f6f 	isb	sy
}
    e2a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2ac:	0000e2c1 	.word	0x0000e2c1
    e2b0:	0002f55d 	.word	0x0002f55d
    e2b4:	0002f5b6 	.word	0x0002f5b6
    e2b8:	0002e715 	.word	0x0002e715
    e2bc:	0002f5cb 	.word	0x0002f5cb

0000e2c0 <transition_complete>:
{
    e2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2c2:	4604      	mov	r4, r0
    e2c4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e2c6:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    e2ca:	f04f 0320 	mov.w	r3, #32
    e2ce:	f3ef 8711 	mrs	r7, BASEPRI
    e2d2:	f383 8812 	msr	BASEPRI_MAX, r3
    e2d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e2da:	4630      	mov	r0, r6
    e2dc:	f012 fb0c 	bl	208f8 <z_spin_lock_valid>
    e2e0:	b968      	cbnz	r0, e2fe <transition_complete+0x3e>
    e2e2:	2394      	movs	r3, #148	; 0x94
    e2e4:	4a0b      	ldr	r2, [pc, #44]	; (e314 <transition_complete+0x54>)
    e2e6:	490c      	ldr	r1, [pc, #48]	; (e318 <transition_complete+0x58>)
    e2e8:	480c      	ldr	r0, [pc, #48]	; (e31c <transition_complete+0x5c>)
    e2ea:	f019 f982 	bl	275f2 <assert_print>
    e2ee:	4631      	mov	r1, r6
    e2f0:	480b      	ldr	r0, [pc, #44]	; (e320 <transition_complete+0x60>)
    e2f2:	f019 f97e 	bl	275f2 <assert_print>
    e2f6:	2194      	movs	r1, #148	; 0x94
    e2f8:	4806      	ldr	r0, [pc, #24]	; (e314 <transition_complete+0x54>)
    e2fa:	f019 f973 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
    e2fe:	4630      	mov	r0, r6
    e300:	f012 fb16 	bl	20930 <z_spin_lock_set_owner>
	mgr->last_res = res;
    e304:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    e306:	463a      	mov	r2, r7
    e308:	4620      	mov	r0, r4
}
    e30a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    e30e:	2101      	movs	r1, #1
    e310:	f7ff be02 	b.w	df18 <process_event>
    e314:	0002f55d 	.word	0x0002f55d
    e318:	0002f5b6 	.word	0x0002f5b6
    e31c:	0002e715 	.word	0x0002e715
    e320:	0002f5cb 	.word	0x0002f5cb

0000e324 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    e324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e328:	4604      	mov	r4, r0
    e32a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    e32c:	f019 f8f6 	bl	2751c <validate_args>

	if (rv < 0) {
    e330:	1e05      	subs	r5, r0, #0
    e332:	db67      	blt.n	e404 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e334:	f104 0914 	add.w	r9, r4, #20
    e338:	f04f 0320 	mov.w	r3, #32
    e33c:	f3ef 8a11 	mrs	sl, BASEPRI
    e340:	f383 8812 	msr	BASEPRI_MAX, r3
    e344:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e348:	4648      	mov	r0, r9
    e34a:	f012 fad5 	bl	208f8 <z_spin_lock_valid>
    e34e:	4680      	mov	r8, r0
    e350:	b960      	cbnz	r0, e36c <onoff_request+0x48>
    e352:	2394      	movs	r3, #148	; 0x94
    e354:	4a37      	ldr	r2, [pc, #220]	; (e434 <onoff_request+0x110>)
    e356:	4938      	ldr	r1, [pc, #224]	; (e438 <onoff_request+0x114>)
    e358:	4838      	ldr	r0, [pc, #224]	; (e43c <onoff_request+0x118>)
    e35a:	f019 f94a 	bl	275f2 <assert_print>
    e35e:	4649      	mov	r1, r9
    e360:	4837      	ldr	r0, [pc, #220]	; (e440 <onoff_request+0x11c>)
    e362:	f019 f946 	bl	275f2 <assert_print>
    e366:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e368:	4832      	ldr	r0, [pc, #200]	; (e434 <onoff_request+0x110>)
    e36a:	e040      	b.n	e3ee <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    e36c:	4648      	mov	r0, r9
    e36e:	f012 fadf 	bl	20930 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    e372:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e376:	8be3      	ldrh	r3, [r4, #30]
    e378:	8ba6      	ldrh	r6, [r4, #28]
    e37a:	4293      	cmp	r3, r2
    e37c:	f006 0607 	and.w	r6, r6, #7
    e380:	d043      	beq.n	e40a <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    e382:	2e02      	cmp	r6, #2
    e384:	d113      	bne.n	e3ae <onoff_request+0x8a>
	rv = state;
    e386:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    e388:	3301      	adds	r3, #1
    e38a:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e38c:	4648      	mov	r0, r9
    e38e:	f012 fac1 	bl	20914 <z_spin_unlock_valid>
    e392:	2800      	cmp	r0, #0
    e394:	d13f      	bne.n	e416 <onoff_request+0xf2>
    e396:	23c2      	movs	r3, #194	; 0xc2
    e398:	4a26      	ldr	r2, [pc, #152]	; (e434 <onoff_request+0x110>)
    e39a:	492a      	ldr	r1, [pc, #168]	; (e444 <onoff_request+0x120>)
    e39c:	4827      	ldr	r0, [pc, #156]	; (e43c <onoff_request+0x118>)
    e39e:	f019 f928 	bl	275f2 <assert_print>
    e3a2:	4649      	mov	r1, r9
    e3a4:	4828      	ldr	r0, [pc, #160]	; (e448 <onoff_request+0x124>)
    e3a6:	f019 f924 	bl	275f2 <assert_print>
    e3aa:	21c2      	movs	r1, #194	; 0xc2
    e3ac:	e7dc      	b.n	e368 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    e3ae:	2e06      	cmp	r6, #6
    e3b0:	d813      	bhi.n	e3da <onoff_request+0xb6>
    e3b2:	e8df f006 	tbb	[pc, r6]
    e3b6:	2d09      	.short	0x2d09
    e3b8:	04091212 	.word	0x04091212
    e3bc:	09          	.byte	0x09
    e3bd:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    e3be:	f06f 0585 	mvn.w	r5, #133	; 0x85
    e3c2:	f04f 0800 	mov.w	r8, #0
    e3c6:	e7e1      	b.n	e38c <onoff_request+0x68>
	parent->next = child;
    e3c8:	2300      	movs	r3, #0
    e3ca:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    e3cc:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    e3ce:	b983      	cbnz	r3, e3f2 <onoff_request+0xce>
	list->head = node;
    e3d0:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    e3d4:	b186      	cbz	r6, e3f8 <onoff_request+0xd4>
	rv = state;
    e3d6:	4635      	mov	r5, r6
    e3d8:	e7f3      	b.n	e3c2 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    e3da:	491c      	ldr	r1, [pc, #112]	; (e44c <onoff_request+0x128>)
    e3dc:	4817      	ldr	r0, [pc, #92]	; (e43c <onoff_request+0x118>)
    e3de:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    e3e2:	4a1b      	ldr	r2, [pc, #108]	; (e450 <onoff_request+0x12c>)
    e3e4:	f019 f905 	bl	275f2 <assert_print>
    e3e8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e3ec:	4818      	ldr	r0, [pc, #96]	; (e450 <onoff_request+0x12c>)
    e3ee:	f019 f8f9 	bl	275e4 <assert_post_action>
	parent->next = child;
    e3f2:	601f      	str	r7, [r3, #0]
	list->tail = node;
    e3f4:	6067      	str	r7, [r4, #4]
}
    e3f6:	e7ed      	b.n	e3d4 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    e3f8:	4652      	mov	r2, sl
    e3fa:	2102      	movs	r1, #2
    e3fc:	4620      	mov	r0, r4
    e3fe:	f7ff fd8b 	bl	df18 <process_event>
    e402:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    e404:	4628      	mov	r0, r5
    e406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    e40a:	f06f 050a 	mvn.w	r5, #10
    e40e:	e7d8      	b.n	e3c2 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    e410:	f06f 0504 	mvn.w	r5, #4
    e414:	e7d5      	b.n	e3c2 <onoff_request+0x9e>
	__asm__ volatile(
    e416:	f38a 8811 	msr	BASEPRI, sl
    e41a:	f3bf 8f6f 	isb	sy
		if (notify) {
    e41e:	f1b8 0f00 	cmp.w	r8, #0
    e422:	d0ef      	beq.n	e404 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    e424:	2300      	movs	r3, #0
    e426:	4632      	mov	r2, r6
    e428:	4639      	mov	r1, r7
    e42a:	4620      	mov	r0, r4
    e42c:	f019 f886 	bl	2753c <notify_one>
    e430:	e7e8      	b.n	e404 <onoff_request+0xe0>
    e432:	bf00      	nop
    e434:	0002f55d 	.word	0x0002f55d
    e438:	0002f5b6 	.word	0x0002f5b6
    e43c:	0002e715 	.word	0x0002e715
    e440:	0002f5cb 	.word	0x0002f5cb
    e444:	0002f58a 	.word	0x0002f58a
    e448:	0002f5a1 	.word	0x0002f5a1
    e44c:	0002f547 	.word	0x0002f547
    e450:	0002f4ba 	.word	0x0002f4ba

0000e454 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    e454:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e456:	6842      	ldr	r2, [r0, #4]
    e458:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    e45a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    e45e:	2a02      	cmp	r2, #2
	notify->result = res;
    e460:	6081      	str	r1, [r0, #8]
	switch (method) {
    e462:	d00a      	beq.n	e47a <sys_notify_finalize+0x26>
    e464:	2a03      	cmp	r2, #3
    e466:	f04f 0100 	mov.w	r1, #0
    e46a:	d003      	beq.n	e474 <sys_notify_finalize+0x20>
    e46c:	2a01      	cmp	r2, #1
    e46e:	d10a      	bne.n	e486 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e470:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    e472:	e006      	b.n	e482 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    e474:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e476:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    e478:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    e47a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e47c:	2200      	movs	r2, #0
    e47e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    e480:	b958      	cbnz	r0, e49a <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    e482:	2000      	movs	r0, #0
    e484:	e7f8      	b.n	e478 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    e486:	4906      	ldr	r1, [pc, #24]	; (e4a0 <sys_notify_finalize+0x4c>)
    e488:	4806      	ldr	r0, [pc, #24]	; (e4a4 <sys_notify_finalize+0x50>)
    e48a:	2345      	movs	r3, #69	; 0x45
    e48c:	4a06      	ldr	r2, [pc, #24]	; (e4a8 <sys_notify_finalize+0x54>)
    e48e:	f019 f8b0 	bl	275f2 <assert_print>
    e492:	2145      	movs	r1, #69	; 0x45
    e494:	4804      	ldr	r0, [pc, #16]	; (e4a8 <sys_notify_finalize+0x54>)
    e496:	f019 f8a5 	bl	275e4 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    e49a:	f015 fc33 	bl	23d04 <z_impl_k_poll_signal_raise>
    e49e:	e7f0      	b.n	e482 <sys_notify_finalize+0x2e>
    e4a0:	00033fc0 	.word	0x00033fc0
    e4a4:	0002e715 	.word	0x0002e715
    e4a8:	0002f5e3 	.word	0x0002f5e3

0000e4ac <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    e4ac:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e4ae:	4c09      	ldr	r4, [pc, #36]	; (e4d4 <crc8_ccitt+0x28>)
    e4b0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    e4b2:	4291      	cmp	r1, r2
    e4b4:	d100      	bne.n	e4b8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    e4b6:	bd10      	pop	{r4, pc}
		val ^= p[i];
    e4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
    e4bc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e4be:	0903      	lsrs	r3, r0, #4
    e4c0:	5ce3      	ldrb	r3, [r4, r3]
    e4c2:	0100      	lsls	r0, r0, #4
    e4c4:	b2c0      	uxtb	r0, r0
    e4c6:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e4c8:	0918      	lsrs	r0, r3, #4
    e4ca:	5c20      	ldrb	r0, [r4, r0]
    e4cc:	011b      	lsls	r3, r3, #4
    e4ce:	b2db      	uxtb	r3, r3
    e4d0:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    e4d2:	e7ee      	b.n	e4b2 <crc8_ccitt+0x6>
    e4d4:	0002f606 	.word	0x0002f606

0000e4d8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    e4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4da:	4602      	mov	r2, r0
    e4dc:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    e4de:	270a      	movs	r7, #10
	size_t val = 0;
    e4e0:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    e4e2:	4e07      	ldr	r6, [pc, #28]	; (e500 <extract_decimal+0x28>)
    e4e4:	460b      	mov	r3, r1
    e4e6:	781c      	ldrb	r4, [r3, #0]
    e4e8:	3101      	adds	r1, #1
    e4ea:	5d35      	ldrb	r5, [r6, r4]
    e4ec:	076d      	lsls	r5, r5, #29
    e4ee:	d401      	bmi.n	e4f4 <extract_decimal+0x1c>
	}
	*str = sp;
    e4f0:	6013      	str	r3, [r2, #0]
	return val;
}
    e4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    e4f4:	fb07 4300 	mla	r3, r7, r0, r4
    e4f8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e4fc:	e7f2      	b.n	e4e4 <extract_decimal+0xc>
    e4fe:	bf00      	nop
    e500:	00034022 	.word	0x00034022

0000e504 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    e504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e508:	4615      	mov	r5, r2
    e50a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    e50c:	78d3      	ldrb	r3, [r2, #3]
    e50e:	4a22      	ldr	r2, [pc, #136]	; (e598 <encode_uint+0x94>)
	switch (specifier) {
    e510:	2b6f      	cmp	r3, #111	; 0x6f
    e512:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    e516:	4680      	mov	r8, r0
    e518:	460f      	mov	r7, r1
    e51a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    e51e:	d029      	beq.n	e574 <encode_uint+0x70>
    e520:	d824      	bhi.n	e56c <encode_uint+0x68>
		return 10;
    e522:	2b58      	cmp	r3, #88	; 0x58
    e524:	bf0c      	ite	eq
    e526:	2610      	moveq	r6, #16
    e528:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    e52a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    e52e:	4632      	mov	r2, r6
    e530:	2300      	movs	r3, #0
    e532:	4640      	mov	r0, r8
    e534:	4639      	mov	r1, r7
    e536:	f7fa fcdb 	bl	8ef0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    e53a:	2a09      	cmp	r2, #9
    e53c:	b2d4      	uxtb	r4, r2
    e53e:	d81e      	bhi.n	e57e <encode_uint+0x7a>
    e540:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    e542:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e544:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    e546:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e54a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    e54e:	d301      	bcc.n	e554 <encode_uint+0x50>
    e550:	45d1      	cmp	r9, sl
    e552:	d811      	bhi.n	e578 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    e554:	782b      	ldrb	r3, [r5, #0]
    e556:	069b      	lsls	r3, r3, #26
    e558:	d505      	bpl.n	e566 <encode_uint+0x62>
		if (radix == 8) {
    e55a:	2e08      	cmp	r6, #8
    e55c:	d115      	bne.n	e58a <encode_uint+0x86>
			conv->altform_0 = true;
    e55e:	78ab      	ldrb	r3, [r5, #2]
    e560:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    e564:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    e566:	4648      	mov	r0, r9
    e568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    e56c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    e570:	2b70      	cmp	r3, #112	; 0x70
    e572:	e7d7      	b.n	e524 <encode_uint+0x20>
	switch (specifier) {
    e574:	2608      	movs	r6, #8
    e576:	e7d8      	b.n	e52a <encode_uint+0x26>
		value /= radix;
    e578:	4680      	mov	r8, r0
    e57a:	460f      	mov	r7, r1
    e57c:	e7d7      	b.n	e52e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e57e:	f1bb 0f01 	cmp.w	fp, #1
    e582:	bf0c      	ite	eq
    e584:	3437      	addeq	r4, #55	; 0x37
    e586:	3457      	addne	r4, #87	; 0x57
    e588:	e7db      	b.n	e542 <encode_uint+0x3e>
		} else if (radix == 16) {
    e58a:	2e10      	cmp	r6, #16
    e58c:	d1eb      	bne.n	e566 <encode_uint+0x62>
			conv->altform_0c = true;
    e58e:	78ab      	ldrb	r3, [r5, #2]
    e590:	f043 0310 	orr.w	r3, r3, #16
    e594:	e7e6      	b.n	e564 <encode_uint+0x60>
    e596:	bf00      	nop
    e598:	00034022 	.word	0x00034022

0000e59c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    e59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5a0:	4682      	mov	sl, r0
    e5a2:	4617      	mov	r7, r2
    e5a4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    e5a6:	2500      	movs	r5, #0
{
    e5a8:	b097      	sub	sp, #92	; 0x5c
    e5aa:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    e5ac:	7838      	ldrb	r0, [r7, #0]
    e5ae:	b908      	cbnz	r0, e5b4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    e5b0:	4628      	mov	r0, r5
    e5b2:	e349      	b.n	ec48 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    e5b4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    e5b6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    e5b8:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    e5ba:	d006      	beq.n	e5ca <z_cbvprintf_impl+0x2e>
			OUTC('%');
    e5bc:	9903      	ldr	r1, [sp, #12]
    e5be:	47d0      	blx	sl
    e5c0:	2800      	cmp	r0, #0
    e5c2:	f2c0 8341 	blt.w	ec48 <z_cbvprintf_impl+0x6ac>
    e5c6:	3501      	adds	r5, #1
		if (bps == NULL) {
    e5c8:	e1f0      	b.n	e9ac <z_cbvprintf_impl+0x410>
		} state = {
    e5ca:	2218      	movs	r2, #24
    e5cc:	2100      	movs	r1, #0
    e5ce:	a810      	add	r0, sp, #64	; 0x40
    e5d0:	f01d fdb6 	bl	2c140 <memset>
	if (*sp == '%') {
    e5d4:	787b      	ldrb	r3, [r7, #1]
    e5d6:	2b25      	cmp	r3, #37	; 0x25
    e5d8:	f000 80a3 	beq.w	e722 <z_cbvprintf_impl+0x186>
    e5dc:	2300      	movs	r3, #0
    e5de:	4698      	mov	r8, r3
    e5e0:	469e      	mov	lr, r3
    e5e2:	469c      	mov	ip, r3
    e5e4:	4618      	mov	r0, r3
    e5e6:	1c79      	adds	r1, r7, #1
    e5e8:	460e      	mov	r6, r1
		switch (*sp) {
    e5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
    e5ee:	2a2b      	cmp	r2, #43	; 0x2b
    e5f0:	f000 80c6 	beq.w	e780 <z_cbvprintf_impl+0x1e4>
    e5f4:	f200 80bd 	bhi.w	e772 <z_cbvprintf_impl+0x1d6>
    e5f8:	2a20      	cmp	r2, #32
    e5fa:	f000 80c4 	beq.w	e786 <z_cbvprintf_impl+0x1ea>
    e5fe:	2a23      	cmp	r2, #35	; 0x23
    e600:	f000 80c4 	beq.w	e78c <z_cbvprintf_impl+0x1f0>
    e604:	b12b      	cbz	r3, e612 <z_cbvprintf_impl+0x76>
    e606:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e60e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e612:	f1b8 0f00 	cmp.w	r8, #0
    e616:	d005      	beq.n	e624 <z_cbvprintf_impl+0x88>
    e618:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e61c:	f043 0320 	orr.w	r3, r3, #32
    e620:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e624:	f1be 0f00 	cmp.w	lr, #0
    e628:	d005      	beq.n	e636 <z_cbvprintf_impl+0x9a>
    e62a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e62e:	f043 0310 	orr.w	r3, r3, #16
    e632:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e636:	f1bc 0f00 	cmp.w	ip, #0
    e63a:	d005      	beq.n	e648 <z_cbvprintf_impl+0xac>
    e63c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e640:	f043 0308 	orr.w	r3, r3, #8
    e644:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e648:	b128      	cbz	r0, e656 <z_cbvprintf_impl+0xba>
    e64a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e64e:	f043 0304 	orr.w	r3, r3, #4
    e652:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    e656:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e65a:	f003 0144 	and.w	r1, r3, #68	; 0x44
    e65e:	2944      	cmp	r1, #68	; 0x44
    e660:	d103      	bne.n	e66a <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    e662:	f36f 1386 	bfc	r3, #6, #1
    e666:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    e66a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    e66e:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    e670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e674:	9609      	str	r6, [sp, #36]	; 0x24
    e676:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    e67a:	f040 808c 	bne.w	e796 <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    e67e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    e682:	f043 0301 	orr.w	r3, r3, #1
    e686:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    e68a:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    e68c:	781a      	ldrb	r2, [r3, #0]
    e68e:	2a2e      	cmp	r2, #46	; 0x2e
    e690:	bf0c      	ite	eq
    e692:	2101      	moveq	r1, #1
    e694:	2100      	movne	r1, #0
    e696:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e69a:	f361 0241 	bfi	r2, r1, #1, #1
    e69e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    e6a2:	d10c      	bne.n	e6be <z_cbvprintf_impl+0x122>
	++sp;
    e6a4:	1c5a      	adds	r2, r3, #1
    e6a6:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    e6a8:	785a      	ldrb	r2, [r3, #1]
    e6aa:	2a2a      	cmp	r2, #42	; 0x2a
    e6ac:	f040 8083 	bne.w	e7b6 <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    e6b0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    e6b4:	3302      	adds	r3, #2
		conv->prec_star = true;
    e6b6:	f042 0204 	orr.w	r2, r2, #4
    e6ba:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    e6be:	781a      	ldrb	r2, [r3, #0]
    e6c0:	2a6c      	cmp	r2, #108	; 0x6c
    e6c2:	f000 80a4 	beq.w	e80e <z_cbvprintf_impl+0x272>
    e6c6:	f200 8086 	bhi.w	e7d6 <z_cbvprintf_impl+0x23a>
    e6ca:	2a68      	cmp	r2, #104	; 0x68
    e6cc:	f000 808c 	beq.w	e7e8 <z_cbvprintf_impl+0x24c>
    e6d0:	2a6a      	cmp	r2, #106	; 0x6a
    e6d2:	f000 80a5 	beq.w	e820 <z_cbvprintf_impl+0x284>
    e6d6:	2a4c      	cmp	r2, #76	; 0x4c
    e6d8:	f000 80aa 	beq.w	e830 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    e6dc:	461a      	mov	r2, r3
    e6de:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    e6e2:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    e6e4:	9204      	str	r2, [sp, #16]
    e6e6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    e6ea:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    e6ee:	f200 8117 	bhi.w	e920 <z_cbvprintf_impl+0x384>
    e6f2:	2b6d      	cmp	r3, #109	; 0x6d
    e6f4:	f200 80a9 	bhi.w	e84a <z_cbvprintf_impl+0x2ae>
    e6f8:	2b69      	cmp	r3, #105	; 0x69
    e6fa:	f200 8111 	bhi.w	e920 <z_cbvprintf_impl+0x384>
    e6fe:	2b57      	cmp	r3, #87	; 0x57
    e700:	f200 80be 	bhi.w	e880 <z_cbvprintf_impl+0x2e4>
    e704:	2b41      	cmp	r3, #65	; 0x41
    e706:	d003      	beq.n	e710 <z_cbvprintf_impl+0x174>
    e708:	3b45      	subs	r3, #69	; 0x45
    e70a:	2b02      	cmp	r3, #2
    e70c:	f200 8108 	bhi.w	e920 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    e710:	2204      	movs	r2, #4
    e712:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e716:	f362 0302 	bfi	r3, r2, #0, #3
    e71a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    e71e:	2301      	movs	r3, #1
			break;
    e720:	e0ca      	b.n	e8b8 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    e722:	1cba      	adds	r2, r7, #2
    e724:	9204      	str	r2, [sp, #16]
    e726:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    e72a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    e72e:	07da      	lsls	r2, r3, #31
    e730:	f140 80fd 	bpl.w	e92e <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    e734:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    e738:	f1b9 0f00 	cmp.w	r9, #0
    e73c:	da07      	bge.n	e74e <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    e73e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    e742:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    e746:	f042 0204 	orr.w	r2, r2, #4
    e74a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    e74e:	075e      	lsls	r6, r3, #29
    e750:	f140 80f6 	bpl.w	e940 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    e754:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    e758:	f1bb 0f00 	cmp.w	fp, #0
    e75c:	f280 80f5 	bge.w	e94a <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    e760:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    e764:	f36f 0341 	bfc	r3, #1, #1
    e768:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    e76c:	f04f 3bff 	mov.w	fp, #4294967295
    e770:	e0eb      	b.n	e94a <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    e772:	2a2d      	cmp	r2, #45	; 0x2d
    e774:	d00d      	beq.n	e792 <z_cbvprintf_impl+0x1f6>
    e776:	2a30      	cmp	r2, #48	; 0x30
    e778:	f47f af44 	bne.w	e604 <z_cbvprintf_impl+0x68>
    e77c:	2301      	movs	r3, #1
	} while (loop);
    e77e:	e733      	b.n	e5e8 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    e780:	f04f 0c01 	mov.w	ip, #1
    e784:	e730      	b.n	e5e8 <z_cbvprintf_impl+0x4c>
    e786:	f04f 0e01 	mov.w	lr, #1
    e78a:	e72d      	b.n	e5e8 <z_cbvprintf_impl+0x4c>
    e78c:	f04f 0801 	mov.w	r8, #1
    e790:	e72a      	b.n	e5e8 <z_cbvprintf_impl+0x4c>
    e792:	2001      	movs	r0, #1
    e794:	e728      	b.n	e5e8 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    e796:	a809      	add	r0, sp, #36	; 0x24
    e798:	f7ff fe9e 	bl	e4d8 <extract_decimal>
	if (sp != wp) {
    e79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e79e:	42b3      	cmp	r3, r6
    e7a0:	f43f af74 	beq.w	e68c <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    e7a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    e7a8:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    e7aa:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    e7ac:	f360 0241 	bfi	r2, r0, #1, #1
    e7b0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    e7b4:	e76a      	b.n	e68c <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    e7b6:	a809      	add	r0, sp, #36	; 0x24
    e7b8:	f7ff fe8e 	bl	e4d8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    e7bc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    e7c0:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    e7c2:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e7c6:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    e7ca:	f362 0341 	bfi	r3, r2, #1, #1
    e7ce:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    e7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e7d4:	e773      	b.n	e6be <z_cbvprintf_impl+0x122>
	switch (*sp) {
    e7d6:	2a74      	cmp	r2, #116	; 0x74
    e7d8:	d026      	beq.n	e828 <z_cbvprintf_impl+0x28c>
    e7da:	2a7a      	cmp	r2, #122	; 0x7a
    e7dc:	f47f af7e 	bne.w	e6dc <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    e7e0:	2106      	movs	r1, #6
    e7e2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e7e6:	e00c      	b.n	e802 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    e7e8:	785a      	ldrb	r2, [r3, #1]
    e7ea:	2a68      	cmp	r2, #104	; 0x68
    e7ec:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e7f0:	d106      	bne.n	e800 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    e7f2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    e7f4:	f361 02c6 	bfi	r2, r1, #3, #4
    e7f8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    e7fc:	3302      	adds	r3, #2
    e7fe:	e76d      	b.n	e6dc <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    e800:	2102      	movs	r1, #2
    e802:	f361 02c6 	bfi	r2, r1, #3, #4
    e806:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    e80a:	3301      	adds	r3, #1
    e80c:	e766      	b.n	e6dc <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    e80e:	785a      	ldrb	r2, [r3, #1]
    e810:	2a6c      	cmp	r2, #108	; 0x6c
    e812:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e816:	d101      	bne.n	e81c <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    e818:	2104      	movs	r1, #4
    e81a:	e7eb      	b.n	e7f4 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    e81c:	2103      	movs	r1, #3
    e81e:	e7f0      	b.n	e802 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    e820:	2105      	movs	r1, #5
    e822:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e826:	e7ec      	b.n	e802 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    e828:	2107      	movs	r1, #7
    e82a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e82e:	e7e8      	b.n	e802 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    e830:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    e834:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    e838:	f022 0202 	bic.w	r2, r2, #2
    e83c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    e840:	f042 0202 	orr.w	r2, r2, #2
    e844:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    e848:	e7df      	b.n	e80a <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    e84a:	3b6e      	subs	r3, #110	; 0x6e
    e84c:	b2d9      	uxtb	r1, r3
    e84e:	2301      	movs	r3, #1
    e850:	408b      	lsls	r3, r1
    e852:	f240 4182 	movw	r1, #1154	; 0x482
    e856:	420b      	tst	r3, r1
    e858:	d138      	bne.n	e8cc <z_cbvprintf_impl+0x330>
    e85a:	f013 0f24 	tst.w	r3, #36	; 0x24
    e85e:	d152      	bne.n	e906 <z_cbvprintf_impl+0x36a>
    e860:	07d8      	lsls	r0, r3, #31
    e862:	d55d      	bpl.n	e920 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    e864:	2103      	movs	r1, #3
    e866:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e86a:	f361 0302 	bfi	r3, r1, #0, #3
    e86e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e872:	f002 0378 	and.w	r3, r2, #120	; 0x78
    e876:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    e87a:	424b      	negs	r3, r1
    e87c:	414b      	adcs	r3, r1
    e87e:	e01b      	b.n	e8b8 <z_cbvprintf_impl+0x31c>
    e880:	2001      	movs	r0, #1
	switch (conv->specifier) {
    e882:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    e886:	b2c9      	uxtb	r1, r1
    e888:	fa00 f101 	lsl.w	r1, r0, r1
    e88c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    e890:	f47f af3e 	bne.w	e710 <z_cbvprintf_impl+0x174>
    e894:	f640 0601 	movw	r6, #2049	; 0x801
    e898:	4231      	tst	r1, r6
    e89a:	d11d      	bne.n	e8d8 <z_cbvprintf_impl+0x33c>
    e89c:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    e8a0:	d03e      	beq.n	e920 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    e8a2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e8a6:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    e8aa:	f002 0278 	and.w	r2, r2, #120	; 0x78
    e8ae:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    e8b0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e8b4:	d034      	beq.n	e920 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    e8b6:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    e8b8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    e8bc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    e8c0:	430b      	orrs	r3, r1
    e8c2:	f363 0241 	bfi	r2, r3, #1, #1
    e8c6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    e8ca:	e72e      	b.n	e72a <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    e8cc:	2102      	movs	r1, #2
    e8ce:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e8d2:	f361 0302 	bfi	r3, r1, #0, #3
    e8d6:	e7e8      	b.n	e8aa <z_cbvprintf_impl+0x30e>
    e8d8:	2002      	movs	r0, #2
    e8da:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    e8de:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    e8e2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    e8e6:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    e8e8:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    e8ec:	bf02      	ittt	eq
    e8ee:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    e8f2:	f041 0101 	orreq.w	r1, r1, #1
    e8f6:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    e8fa:	2b63      	cmp	r3, #99	; 0x63
    e8fc:	d1db      	bne.n	e8b6 <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    e8fe:	1e13      	subs	r3, r2, #0
    e900:	bf18      	it	ne
    e902:	2301      	movne	r3, #1
    e904:	e7d8      	b.n	e8b8 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    e906:	2103      	movs	r1, #3
    e908:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    e90c:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    e910:	f361 0302 	bfi	r3, r1, #0, #3
    e914:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    e918:	bf14      	ite	ne
    e91a:	2301      	movne	r3, #1
    e91c:	2300      	moveq	r3, #0
    e91e:	e7cb      	b.n	e8b8 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    e920:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e924:	f043 0301 	orr.w	r3, r3, #1
    e928:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    e92c:	e7c3      	b.n	e8b6 <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    e92e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    e932:	2a00      	cmp	r2, #0
		int width = -1;
    e934:	bfac      	ite	ge
    e936:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    e93a:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    e93e:	e706      	b.n	e74e <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    e940:	0798      	lsls	r0, r3, #30
    e942:	f57f af13 	bpl.w	e76c <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    e946:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    e94a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    e94c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    e950:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    e954:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    e958:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    e95c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    e95e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    e962:	d133      	bne.n	e9cc <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    e964:	1ecb      	subs	r3, r1, #3
    e966:	2b04      	cmp	r3, #4
    e968:	d804      	bhi.n	e974 <z_cbvprintf_impl+0x3d8>
    e96a:	e8df f003 	tbb	[pc, r3]
    e96e:	4621      	.short	0x4621
    e970:	2146      	.short	0x2146
    e972:	21          	.byte	0x21
    e973:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    e974:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    e976:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    e978:	ea4f 72e3 	mov.w	r2, r3, asr #31
    e97c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    e980:	d11c      	bne.n	e9bc <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    e982:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    e986:	17da      	asrs	r2, r3, #31
    e988:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    e98c:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    e98e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e992:	f013 0603 	ands.w	r6, r3, #3
    e996:	d050      	beq.n	ea3a <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    e998:	463a      	mov	r2, r7
    e99a:	4650      	mov	r0, sl
    e99c:	9b04      	ldr	r3, [sp, #16]
    e99e:	9903      	ldr	r1, [sp, #12]
    e9a0:	f018 fe09 	bl	275b6 <outs>
    e9a4:	2800      	cmp	r0, #0
    e9a6:	f2c0 814f 	blt.w	ec48 <z_cbvprintf_impl+0x6ac>
    e9aa:	4405      	add	r5, r0
			continue;
    e9ac:	9f04      	ldr	r7, [sp, #16]
    e9ae:	e5fd      	b.n	e5ac <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e9b0:	f854 3b04 	ldr.w	r3, [r4], #4
    e9b4:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    e9b6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    e9ba:	e7e8      	b.n	e98e <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    e9bc:	2902      	cmp	r1, #2
    e9be:	d1e5      	bne.n	e98c <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    e9c0:	b21a      	sxth	r2, r3
    e9c2:	f343 33c0 	sbfx	r3, r3, #15, #1
    e9c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    e9ca:	e7df      	b.n	e98c <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    e9cc:	2b02      	cmp	r3, #2
    e9ce:	d124      	bne.n	ea1a <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    e9d0:	1ecb      	subs	r3, r1, #3
    e9d2:	2b04      	cmp	r3, #4
    e9d4:	d804      	bhi.n	e9e0 <z_cbvprintf_impl+0x444>
    e9d6:	e8df f003 	tbb	[pc, r3]
    e9da:	1018      	.short	0x1018
    e9dc:	1810      	.short	0x1810
    e9de:	18          	.byte	0x18
    e9df:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    e9e0:	2901      	cmp	r1, #1
    e9e2:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    e9e6:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    e9ea:	d014      	beq.n	ea16 <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    e9ec:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    e9ee:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    e9f2:	d1cc      	bne.n	e98e <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    e9f4:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    e9f6:	9310      	str	r3, [sp, #64]	; 0x40
    e9f8:	e7c9      	b.n	e98e <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    e9fa:	3407      	adds	r4, #7
    e9fc:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    ea00:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    ea04:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    ea08:	e7c1      	b.n	e98e <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    ea0a:	f854 3b04 	ldr.w	r3, [r4], #4
    ea0e:	9310      	str	r3, [sp, #64]	; 0x40
    ea10:	2300      	movs	r3, #0
    ea12:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    ea14:	e7bb      	b.n	e98e <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    ea16:	b2db      	uxtb	r3, r3
    ea18:	e7cd      	b.n	e9b6 <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    ea1a:	2b04      	cmp	r3, #4
    ea1c:	d108      	bne.n	ea30 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    ea1e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    ea20:	f024 0407 	bic.w	r4, r4, #7
    ea24:	e9d4 2300 	ldrd	r2, r3, [r4]
    ea28:	3408      	adds	r4, #8
    ea2a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    ea2e:	e7ae      	b.n	e98e <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    ea30:	2b03      	cmp	r3, #3
    ea32:	d1ac      	bne.n	e98e <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    ea34:	f854 3b04 	ldr.w	r3, [r4], #4
    ea38:	e7dd      	b.n	e9f6 <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    ea3a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    ea3e:	2878      	cmp	r0, #120	; 0x78
    ea40:	d8b4      	bhi.n	e9ac <z_cbvprintf_impl+0x410>
    ea42:	2862      	cmp	r0, #98	; 0x62
    ea44:	d81c      	bhi.n	ea80 <z_cbvprintf_impl+0x4e4>
    ea46:	2825      	cmp	r0, #37	; 0x25
    ea48:	f43f adb8 	beq.w	e5bc <z_cbvprintf_impl+0x20>
    ea4c:	2858      	cmp	r0, #88	; 0x58
    ea4e:	d1ad      	bne.n	e9ac <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    ea50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    ea54:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    ea58:	9300      	str	r3, [sp, #0]
    ea5a:	aa12      	add	r2, sp, #72	; 0x48
    ea5c:	ab0a      	add	r3, sp, #40	; 0x28
    ea5e:	f7ff fd51 	bl	e504 <encode_uint>
			if (precision >= 0) {
    ea62:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    ea66:	4607      	mov	r7, r0
			if (precision >= 0) {
    ea68:	f280 8097 	bge.w	eb9a <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    ea6c:	2f00      	cmp	r7, #0
    ea6e:	d09d      	beq.n	e9ac <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    ea70:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    ea74:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    ea78:	2e00      	cmp	r6, #0
    ea7a:	d04e      	beq.n	eb1a <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    ea7c:	3001      	adds	r0, #1
    ea7e:	e04c      	b.n	eb1a <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    ea80:	3863      	subs	r0, #99	; 0x63
    ea82:	2815      	cmp	r0, #21
    ea84:	d892      	bhi.n	e9ac <z_cbvprintf_impl+0x410>
    ea86:	a201      	add	r2, pc, #4	; (adr r2, ea8c <z_cbvprintf_impl+0x4f0>)
    ea88:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    ea8c:	0000eb0b 	.word	0x0000eb0b
    ea90:	0000eb71 	.word	0x0000eb71
    ea94:	0000e9ad 	.word	0x0000e9ad
    ea98:	0000e9ad 	.word	0x0000e9ad
    ea9c:	0000e9ad 	.word	0x0000e9ad
    eaa0:	0000e9ad 	.word	0x0000e9ad
    eaa4:	0000eb71 	.word	0x0000eb71
    eaa8:	0000e9ad 	.word	0x0000e9ad
    eaac:	0000e9ad 	.word	0x0000e9ad
    eab0:	0000e9ad 	.word	0x0000e9ad
    eab4:	0000e9ad 	.word	0x0000e9ad
    eab8:	0000ebf9 	.word	0x0000ebf9
    eabc:	0000eb95 	.word	0x0000eb95
    eac0:	0000ebbb 	.word	0x0000ebbb
    eac4:	0000e9ad 	.word	0x0000e9ad
    eac8:	0000e9ad 	.word	0x0000e9ad
    eacc:	0000eae5 	.word	0x0000eae5
    ead0:	0000e9ad 	.word	0x0000e9ad
    ead4:	0000eb95 	.word	0x0000eb95
    ead8:	0000e9ad 	.word	0x0000e9ad
    eadc:	0000e9ad 	.word	0x0000e9ad
    eae0:	0000eb95 	.word	0x0000eb95
			if (precision >= 0) {
    eae4:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    eae8:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    eaea:	db0a      	blt.n	eb02 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    eaec:	4659      	mov	r1, fp
    eaee:	4638      	mov	r0, r7
    eaf0:	f01d fc88 	bl	2c404 <strnlen>
			bpe = bps + len;
    eaf4:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    eaf8:	2f00      	cmp	r7, #0
    eafa:	f43f af57 	beq.w	e9ac <z_cbvprintf_impl+0x410>
		char sign = 0;
    eafe:	2600      	movs	r6, #0
    eb00:	e00b      	b.n	eb1a <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    eb02:	4638      	mov	r0, r7
    eb04:	f7fa fc81 	bl	940a <strlen>
    eb08:	e7f4      	b.n	eaf4 <z_cbvprintf_impl+0x558>
		char sign = 0;
    eb0a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    eb0c:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    eb0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    eb10:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    eb14:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    eb18:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    eb1a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    eb1e:	f013 0210 	ands.w	r2, r3, #16
    eb22:	9205      	str	r2, [sp, #20]
    eb24:	f000 8083 	beq.w	ec2e <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    eb28:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    eb2a:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    eb2c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    eb30:	bf48      	it	mi
    eb32:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    eb34:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    eb36:	bf48      	it	mi
    eb38:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    eb3a:	f1b9 0f00 	cmp.w	r9, #0
    eb3e:	f340 8090 	ble.w	ec62 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    eb42:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    eb46:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    eb4a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    eb4e:	0750      	lsls	r0, r2, #29
    eb50:	9306      	str	r3, [sp, #24]
    eb52:	f100 8086 	bmi.w	ec62 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    eb56:	0651      	lsls	r1, r2, #25
    eb58:	d579      	bpl.n	ec4e <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    eb5a:	b13e      	cbz	r6, eb6c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    eb5c:	4630      	mov	r0, r6
    eb5e:	9903      	ldr	r1, [sp, #12]
    eb60:	47d0      	blx	sl
    eb62:	2800      	cmp	r0, #0
    eb64:	db70      	blt.n	ec48 <z_cbvprintf_impl+0x6ac>
    eb66:	9b06      	ldr	r3, [sp, #24]
    eb68:	3501      	adds	r5, #1
    eb6a:	461e      	mov	r6, r3
					pad = '0';
    eb6c:	2230      	movs	r2, #48	; 0x30
    eb6e:	e06f      	b.n	ec50 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    eb70:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    eb72:	bf5a      	itte	pl
    eb74:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    eb78:	015e      	lslpl	r6, r3, #5
				sign = '+';
    eb7a:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    eb7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    eb80:	2b00      	cmp	r3, #0
    eb82:	f6bf af65 	bge.w	ea50 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    eb86:	4252      	negs	r2, r2
    eb88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    eb8c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    eb8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    eb92:	e75d      	b.n	ea50 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    eb94:	2600      	movs	r6, #0
    eb96:	e75b      	b.n	ea50 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    eb98:	2600      	movs	r6, #0
				conv->flag_zero = false;
    eb9a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    eb9e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    eba2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    eba4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    eba8:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    ebaa:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    ebae:	f67f af5d 	bls.w	ea6c <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    ebb2:	ebab 0303 	sub.w	r3, fp, r3
    ebb6:	9313      	str	r3, [sp, #76]	; 0x4c
    ebb8:	e758      	b.n	ea6c <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    ebba:	9810      	ldr	r0, [sp, #64]	; 0x40
    ebbc:	b380      	cbz	r0, ec20 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ebbe:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    ebc2:	ab0a      	add	r3, sp, #40	; 0x28
    ebc4:	2100      	movs	r1, #0
    ebc6:	f8cd 8000 	str.w	r8, [sp]
    ebca:	aa12      	add	r2, sp, #72	; 0x48
    ebcc:	f7ff fc9a 	bl	e504 <encode_uint>
				conv->altform_0c = true;
    ebd0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    ebd4:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    ebd8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ebdc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ebe0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ebe4:	4607      	mov	r7, r0
				conv->altform_0c = true;
    ebe6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    ebea:	dad5      	bge.n	eb98 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    ebec:	2800      	cmp	r0, #0
    ebee:	f43f aedd 	beq.w	e9ac <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    ebf2:	eba8 0000 	sub.w	r0, r8, r0
    ebf6:	e782      	b.n	eafe <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    ebf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    ebfa:	2907      	cmp	r1, #7
    ebfc:	f63f aed6 	bhi.w	e9ac <z_cbvprintf_impl+0x410>
    ec00:	e8df f001 	tbb	[pc, r1]
    ec04:	0c06040c 	.word	0x0c06040c
    ec08:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    ec0c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    ec0e:	e6cd      	b.n	e9ac <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    ec10:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    ec12:	e6cb      	b.n	e9ac <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    ec14:	17ea      	asrs	r2, r5, #31
    ec16:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    ec1a:	e6c7      	b.n	e9ac <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ec1c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    ec1e:	e6c5      	b.n	e9ac <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    ec20:	f8df 80bc 	ldr.w	r8, [pc, #188]	; ece0 <z_cbvprintf_impl+0x744>
		char sign = 0;
    ec24:	4606      	mov	r6, r0
    ec26:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    ec2a:	2005      	movs	r0, #5
    ec2c:	e775      	b.n	eb1a <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    ec2e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    ec30:	bf48      	it	mi
    ec32:	3001      	addmi	r0, #1
    ec34:	e779      	b.n	eb2a <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    ec36:	4610      	mov	r0, r2
    ec38:	9307      	str	r3, [sp, #28]
    ec3a:	9206      	str	r2, [sp, #24]
    ec3c:	9903      	ldr	r1, [sp, #12]
    ec3e:	47d0      	blx	sl
    ec40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    ec44:	2800      	cmp	r0, #0
    ec46:	da04      	bge.n	ec52 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    ec48:	b017      	add	sp, #92	; 0x5c
    ec4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    ec4e:	2220      	movs	r2, #32
					pad = '0';
    ec50:	464b      	mov	r3, r9
				while (width-- > 0) {
    ec52:	4619      	mov	r1, r3
    ec54:	2900      	cmp	r1, #0
    ec56:	f103 33ff 	add.w	r3, r3, #4294967295
    ec5a:	dcec      	bgt.n	ec36 <z_cbvprintf_impl+0x69a>
    ec5c:	444d      	add	r5, r9
    ec5e:	4699      	mov	r9, r3
    ec60:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    ec62:	b12e      	cbz	r6, ec70 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    ec64:	4630      	mov	r0, r6
    ec66:	9903      	ldr	r1, [sp, #12]
    ec68:	47d0      	blx	sl
    ec6a:	2800      	cmp	r0, #0
    ec6c:	dbec      	blt.n	ec48 <z_cbvprintf_impl+0x6ac>
    ec6e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    ec70:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ec74:	06da      	lsls	r2, r3, #27
    ec76:	d401      	bmi.n	ec7c <z_cbvprintf_impl+0x6e0>
    ec78:	071b      	lsls	r3, r3, #28
    ec7a:	d505      	bpl.n	ec88 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    ec7c:	2030      	movs	r0, #48	; 0x30
    ec7e:	9903      	ldr	r1, [sp, #12]
    ec80:	47d0      	blx	sl
    ec82:	2800      	cmp	r0, #0
    ec84:	dbe0      	blt.n	ec48 <z_cbvprintf_impl+0x6ac>
    ec86:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    ec88:	9b05      	ldr	r3, [sp, #20]
    ec8a:	b133      	cbz	r3, ec9a <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    ec8c:	9903      	ldr	r1, [sp, #12]
    ec8e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    ec92:	47d0      	blx	sl
    ec94:	2800      	cmp	r0, #0
    ec96:	dbd7      	blt.n	ec48 <z_cbvprintf_impl+0x6ac>
    ec98:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ec9a:	44ab      	add	fp, r5
    ec9c:	e005      	b.n	ecaa <z_cbvprintf_impl+0x70e>
				OUTC('0');
    ec9e:	2030      	movs	r0, #48	; 0x30
    eca0:	9903      	ldr	r1, [sp, #12]
    eca2:	47d0      	blx	sl
    eca4:	2800      	cmp	r0, #0
    eca6:	dbcf      	blt.n	ec48 <z_cbvprintf_impl+0x6ac>
    eca8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ecaa:	ebab 0305 	sub.w	r3, fp, r5
    ecae:	2b00      	cmp	r3, #0
    ecb0:	dcf5      	bgt.n	ec9e <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    ecb2:	4643      	mov	r3, r8
    ecb4:	463a      	mov	r2, r7
    ecb6:	4650      	mov	r0, sl
    ecb8:	9903      	ldr	r1, [sp, #12]
    ecba:	f018 fc7c 	bl	275b6 <outs>
    ecbe:	2800      	cmp	r0, #0
    ecc0:	dbc2      	blt.n	ec48 <z_cbvprintf_impl+0x6ac>
    ecc2:	4405      	add	r5, r0
		while (width > 0) {
    ecc4:	44a9      	add	r9, r5
    ecc6:	eba9 0305 	sub.w	r3, r9, r5
    ecca:	2b00      	cmp	r3, #0
    eccc:	f77f ae6e 	ble.w	e9ac <z_cbvprintf_impl+0x410>
			OUTC(' ');
    ecd0:	2020      	movs	r0, #32
    ecd2:	9903      	ldr	r1, [sp, #12]
    ecd4:	47d0      	blx	sl
    ecd6:	2800      	cmp	r0, #0
    ecd8:	dbb6      	blt.n	ec48 <z_cbvprintf_impl+0x6ac>
    ecda:	3501      	adds	r5, #1
			--width;
    ecdc:	e7f3      	b.n	ecc6 <z_cbvprintf_impl+0x72a>
    ecde:	bf00      	nop
    ece0:	0002f61b 	.word	0x0002f61b

0000ece4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    ece4:	b148      	cbz	r0, ecfa <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    ece6:	4b05      	ldr	r3, [pc, #20]	; (ecfc <arch_busy_wait+0x18>)
    ece8:	4a05      	ldr	r2, [pc, #20]	; (ed00 <arch_busy_wait+0x1c>)
    ecea:	681b      	ldr	r3, [r3, #0]
    ecec:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    ecf0:	4358      	muls	r0, r3
    ecf2:	4b04      	ldr	r3, [pc, #16]	; (ed04 <arch_busy_wait+0x20>)
    ecf4:	f043 0301 	orr.w	r3, r3, #1
    ecf8:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    ecfa:	4770      	bx	lr
    ecfc:	200086dc 	.word	0x200086dc
    ed00:	000f4240 	.word	0x000f4240
    ed04:	0002d820 	.word	0x0002d820

0000ed08 <z_log_msg_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    ed08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
    ed0a:	ab0b      	add	r3, sp, #44	; 0x2c
    ed0c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    ed0e:	9303      	str	r3, [sp, #12]
    ed10:	4b05      	ldr	r3, [pc, #20]	; (ed28 <z_log_msg_runtime_create.constprop.0+0x20>)
    ed12:	2201      	movs	r2, #1
    ed14:	9302      	str	r3, [sp, #8]
    ed16:	2300      	movs	r3, #0
    ed18:	4618      	mov	r0, r3
    ed1a:	e9cd 3300 	strd	r3, r3, [sp]
    ed1e:	f000 fb09 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
	z_log_msg_runtime_vcreate(domain_id, source, level,
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    ed22:	b007      	add	sp, #28
    ed24:	f85d fb04 	ldr.w	pc, [sp], #4
    ed28:	0002f620 	.word	0x0002f620

0000ed2c <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    ed2c:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    ed2e:	b570      	push	{r4, r5, r6, lr}
    ed30:	4605      	mov	r5, r0
    ed32:	461e      	mov	r6, r3
    ed34:	4608      	mov	r0, r1
    ed36:	d90b      	bls.n	ed50 <ppi_ipc_to_rtc.isra.0+0x24>
    ed38:	491d      	ldr	r1, [pc, #116]	; (edb0 <ppi_ipc_to_rtc.isra.0+0x84>)
    ed3a:	481e      	ldr	r0, [pc, #120]	; (edb4 <ppi_ipc_to_rtc.isra.0+0x88>)
    ed3c:	f240 13e7 	movw	r3, #487	; 0x1e7
    ed40:	4a1d      	ldr	r2, [pc, #116]	; (edb8 <ppi_ipc_to_rtc.isra.0+0x8c>)
    ed42:	f018 fc56 	bl	275f2 <assert_print>
    ed46:	f240 11e7 	movw	r1, #487	; 0x1e7
    ed4a:	481b      	ldr	r0, [pc, #108]	; (edb8 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    ed4c:	f018 fc4a 	bl	275e4 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    ed50:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    ed52:	f00e f94b 	bl	1cfec <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    ed56:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    ed5a:	b1ae      	cbz	r6, ed88 <ppi_ipc_to_rtc.isra.0+0x5c>
    ed5c:	b950      	cbnz	r0, ed74 <ppi_ipc_to_rtc.isra.0+0x48>
    ed5e:	4917      	ldr	r1, [pc, #92]	; (edbc <ppi_ipc_to_rtc.isra.0+0x90>)
    ed60:	f240 234e 	movw	r3, #590	; 0x24e
    ed64:	4a16      	ldr	r2, [pc, #88]	; (edc0 <ppi_ipc_to_rtc.isra.0+0x94>)
    ed66:	4813      	ldr	r0, [pc, #76]	; (edb4 <ppi_ipc_to_rtc.isra.0+0x88>)
    ed68:	f018 fc43 	bl	275f2 <assert_print>
    ed6c:	f240 214e 	movw	r1, #590	; 0x24e
    ed70:	4813      	ldr	r0, [pc, #76]	; (edc0 <ppi_ipc_to_rtc.isra.0+0x94>)
    ed72:	e7eb      	b.n	ed4c <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    ed74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    ed78:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    ed7c:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    ed80:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    ed84:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    ed86:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    ed88:	b948      	cbnz	r0, ed9e <ppi_ipc_to_rtc.isra.0+0x72>
    ed8a:	490c      	ldr	r1, [pc, #48]	; (edbc <ppi_ipc_to_rtc.isra.0+0x90>)
    ed8c:	f240 2363 	movw	r3, #611	; 0x263
    ed90:	4a0b      	ldr	r2, [pc, #44]	; (edc0 <ppi_ipc_to_rtc.isra.0+0x94>)
    ed92:	4808      	ldr	r0, [pc, #32]	; (edb4 <ppi_ipc_to_rtc.isra.0+0x88>)
    ed94:	f018 fc2d 	bl	275f2 <assert_print>
    ed98:	f240 2163 	movw	r1, #611	; 0x263
    ed9c:	e7e8      	b.n	ed70 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    ed9e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    eda2:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    eda6:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    edaa:	6016      	str	r6, [r2, #0]
    edac:	e7eb      	b.n	ed86 <ppi_ipc_to_rtc.isra.0+0x5a>
    edae:	bf00      	nop
    edb0:	0002f67a 	.word	0x0002f67a
    edb4:	0002e715 	.word	0x0002e715
    edb8:	0002f648 	.word	0x0002f648
    edbc:	0002f6bd 	.word	0x0002f6bd
    edc0:	0002f685 	.word	0x0002f685

0000edc4 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    edc4:	b570      	push	{r4, r5, r6, lr}
    edc6:	b086      	sub	sp, #24
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    edc8:	a805      	add	r0, sp, #20
    edca:	f00e ffc3 	bl	1dd54 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    edce:	4b25      	ldr	r3, [pc, #148]	; (ee64 <sync_rtc_setup+0xa0>)
    edd0:	4298      	cmp	r0, r3
    edd2:	d143      	bne.n	ee5c <sync_rtc_setup+0x98>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    edd4:	f00e fafe 	bl	1d3d4 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    edd8:	1e04      	subs	r4, r0, #0
    edda:	da0f      	bge.n	edfc <sync_rtc_setup+0x38>
		nrfx_dppi_channel_free(channels.ch.ppi);
    eddc:	f89d 0014 	ldrb.w	r0, [sp, #20]
    ede0:	f00e ffbe 	bl	1dd60 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    ede4:	4b20      	ldr	r3, [pc, #128]	; (ee68 <sync_rtc_setup+0xa4>)
    ede6:	2201      	movs	r2, #1
    ede8:	9302      	str	r3, [sp, #8]
    edea:	2300      	movs	r3, #0
    edec:	491f      	ldr	r1, [pc, #124]	; (ee6c <sync_rtc_setup+0xa8>)
    edee:	4618      	mov	r0, r3
    edf0:	e9cd 3300 	strd	r3, r3, [sp]
    edf4:	9403      	str	r4, [sp, #12]
    edf6:	f7ff ff87 	bl	ed08 <z_log_msg_runtime_create.constprop.0>
	}

	return rv;
    edfa:	e02c      	b.n	ee56 <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    edfc:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    ee00:	4d1b      	ldr	r5, [pc, #108]	; (ee70 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    ee02:	f88d 4015 	strb.w	r4, [sp, #21]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    ee06:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    ee08:	f8ad 3016 	strh.w	r3, [sp, #22]
    ee0c:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    ee0e:	9b05      	ldr	r3, [sp, #20]
    ee10:	b914      	cbnz	r4, ee18 <sync_rtc_setup+0x54>
		return -ENOSYS;
    ee12:	f06f 0457 	mvn.w	r4, #87	; 0x57
    ee16:	e7e5      	b.n	ede4 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    ee18:	2108      	movs	r1, #8
    ee1a:	4628      	mov	r0, r5
    ee1c:	4a15      	ldr	r2, [pc, #84]	; (ee74 <sync_rtc_setup+0xb0>)
    ee1e:	47a0      	blx	r4
	if (err < 0) {
    ee20:	1e04      	subs	r4, r0, #0
    ee22:	dbdf      	blt.n	ede4 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    ee24:	6933      	ldr	r3, [r6, #16]
    ee26:	2b00      	cmp	r3, #0
    ee28:	d0f3      	beq.n	ee12 <sync_rtc_setup+0x4e>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    ee2a:	2201      	movs	r2, #1
    ee2c:	2108      	movs	r1, #8
    ee2e:	4628      	mov	r0, r5
    ee30:	4798      	blx	r3
	if (rv < 0) {
    ee32:	1e04      	subs	r4, r0, #0
    ee34:	dbd6      	blt.n	ede4 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    ee36:	2301      	movs	r3, #1
    ee38:	f89d 0014 	ldrb.w	r0, [sp, #20]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    ee3c:	4a0e      	ldr	r2, [pc, #56]	; (ee78 <sync_rtc_setup+0xb4>)
    ee3e:	fa03 f100 	lsl.w	r1, r3, r0
    ee42:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    ee46:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ee4a:	f89d 1015 	ldrb.w	r1, [sp, #21]
    ee4e:	f7ff ff6d 	bl	ed2c <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    ee52:	2c00      	cmp	r4, #0
    ee54:	d1c6      	bne.n	ede4 <sync_rtc_setup+0x20>
}
    ee56:	4620      	mov	r0, r4
    ee58:	b006      	add	sp, #24
    ee5a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -ENODEV;
    ee5c:	f06f 0412 	mvn.w	r4, #18
    ee60:	e7c0      	b.n	ede4 <sync_rtc_setup+0x20>
    ee62:	bf00      	nop
    ee64:	0bad0000 	.word	0x0bad0000
    ee68:	0002f620 	.word	0x0002f620
    ee6c:	0002d72c 	.word	0x0002d72c
    ee70:	0002d144 	.word	0x0002d144
    ee74:	0000ef2d 	.word	0x0000ef2d
    ee78:	40017000 	.word	0x40017000

0000ee7c <rtc_cb>:
{
    ee7c:	b570      	push	{r4, r5, r6, lr}
    ee7e:	9e04      	ldr	r6, [sp, #16]
    ee80:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    ee84:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    ee86:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ee8a:	4630      	mov	r0, r6
    ee8c:	f00e f894 	bl	1cfb8 <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    ee90:	2c0f      	cmp	r4, #15
    ee92:	d90b      	bls.n	eeac <rtc_cb+0x30>
    ee94:	491b      	ldr	r1, [pc, #108]	; (ef04 <rtc_cb+0x88>)
    ee96:	481c      	ldr	r0, [pc, #112]	; (ef08 <rtc_cb+0x8c>)
    ee98:	f240 13e1 	movw	r3, #481	; 0x1e1
    ee9c:	4a1b      	ldr	r2, [pc, #108]	; (ef0c <rtc_cb+0x90>)
    ee9e:	f018 fba8 	bl	275f2 <assert_print>
    eea2:	f240 11e1 	movw	r1, #481	; 0x1e1
    eea6:	4819      	ldr	r0, [pc, #100]	; (ef0c <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    eea8:	f018 fb9c 	bl	275e4 <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    eeac:	00a4      	lsls	r4, r4, #2
    eeae:	b2e4      	uxtb	r4, r4
    eeb0:	b950      	cbnz	r0, eec8 <rtc_cb+0x4c>
    eeb2:	4917      	ldr	r1, [pc, #92]	; (ef10 <rtc_cb+0x94>)
    eeb4:	4814      	ldr	r0, [pc, #80]	; (ef08 <rtc_cb+0x8c>)
    eeb6:	f44f 7317 	mov.w	r3, #604	; 0x25c
    eeba:	4a16      	ldr	r2, [pc, #88]	; (ef14 <rtc_cb+0x98>)
    eebc:	f018 fb99 	bl	275f2 <assert_print>
    eec0:	f44f 7117 	mov.w	r1, #604	; 0x25c
    eec4:	4813      	ldr	r0, [pc, #76]	; (ef14 <rtc_cb+0x98>)
    eec6:	e7ef      	b.n	eea8 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    eec8:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    eeca:	4b13      	ldr	r3, [pc, #76]	; (ef18 <rtc_cb+0x9c>)
    eecc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    eed0:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    eed2:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    eed4:	4a11      	ldr	r2, [pc, #68]	; (ef1c <rtc_cb+0xa0>)
    eed6:	40ab      	lsls	r3, r5
    eed8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    eedc:	4630      	mov	r0, r6
    eede:	f00e fa97 	bl	1d410 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    eee2:	4628      	mov	r0, r5
    eee4:	f00e ff3c 	bl	1dd60 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    eee8:	4b0d      	ldr	r3, [pc, #52]	; (ef20 <rtc_cb+0xa4>)
    eeea:	4298      	cmp	r0, r3
    eeec:	d008      	beq.n	ef00 <rtc_cb+0x84>
    eeee:	490d      	ldr	r1, [pc, #52]	; (ef24 <rtc_cb+0xa8>)
    eef0:	4805      	ldr	r0, [pc, #20]	; (ef08 <rtc_cb+0x8c>)
    eef2:	2374      	movs	r3, #116	; 0x74
    eef4:	4a0c      	ldr	r2, [pc, #48]	; (ef28 <rtc_cb+0xac>)
    eef6:	f018 fb7c 	bl	275f2 <assert_print>
    eefa:	2174      	movs	r1, #116	; 0x74
    eefc:	480a      	ldr	r0, [pc, #40]	; (ef28 <rtc_cb+0xac>)
    eefe:	e7d3      	b.n	eea8 <rtc_cb+0x2c>
}
    ef00:	bd70      	pop	{r4, r5, r6, pc}
    ef02:	bf00      	nop
    ef04:	0002f67a 	.word	0x0002f67a
    ef08:	0002e715 	.word	0x0002e715
    ef0c:	0002f648 	.word	0x0002f648
    ef10:	0002f6c1 	.word	0x0002f6c1
    ef14:	0002f685 	.word	0x0002f685
    ef18:	4002a080 	.word	0x4002a080
    ef1c:	40017000 	.word	0x40017000
    ef20:	0bad0000 	.word	0x0bad0000
    ef24:	0002f6fc 	.word	0x0002f6fc
    ef28:	0002f6c5 	.word	0x0002f6c5

0000ef2c <mbox_callback>:
{
    ef2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ef30:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    ef32:	6883      	ldr	r3, [r0, #8]
    ef34:	691b      	ldr	r3, [r3, #16]
    ef36:	b94b      	cbnz	r3, ef4c <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    ef38:	4927      	ldr	r1, [pc, #156]	; (efd8 <mbox_callback+0xac>)
    ef3a:	4828      	ldr	r0, [pc, #160]	; (efdc <mbox_callback+0xb0>)
    ef3c:	23ca      	movs	r3, #202	; 0xca
    ef3e:	4a28      	ldr	r2, [pc, #160]	; (efe0 <mbox_callback+0xb4>)
    ef40:	f018 fb57 	bl	275f2 <assert_print>
    ef44:	21ca      	movs	r1, #202	; 0xca
    ef46:	4826      	ldr	r0, [pc, #152]	; (efe0 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    ef48:	f018 fb4c 	bl	275e4 <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    ef4c:	2200      	movs	r2, #0
    ef4e:	4798      	blx	r3
    ef50:	4606      	mov	r6, r0
    ef52:	2800      	cmp	r0, #0
    ef54:	d1f0      	bne.n	ef38 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    ef56:	f3c4 2907 	ubfx	r9, r4, #8, #8
    ef5a:	4648      	mov	r0, r9
    ef5c:	f00e f860 	bl	1d020 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    ef60:	fa5f f884 	uxtb.w	r8, r4
    ef64:	4633      	mov	r3, r6
    ef66:	4649      	mov	r1, r9
    ef68:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    ef6a:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    ef6c:	4640      	mov	r0, r8
    ef6e:	f7ff fedd 	bl	ed2c <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    ef72:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    ef76:	4648      	mov	r0, r9
    ef78:	f00e f81e 	bl	1cfb8 <z_nrf_rtc_timer_compare_evt_address_get>
    ef7c:	2d0f      	cmp	r5, #15
    ef7e:	d90a      	bls.n	ef96 <mbox_callback+0x6a>
    ef80:	4918      	ldr	r1, [pc, #96]	; (efe4 <mbox_callback+0xb8>)
    ef82:	4816      	ldr	r0, [pc, #88]	; (efdc <mbox_callback+0xb0>)
    ef84:	f240 13e1 	movw	r3, #481	; 0x1e1
    ef88:	4a17      	ldr	r2, [pc, #92]	; (efe8 <mbox_callback+0xbc>)
    ef8a:	f018 fb32 	bl	275f2 <assert_print>
    ef8e:	f240 11e1 	movw	r1, #481	; 0x1e1
    ef92:	4815      	ldr	r0, [pc, #84]	; (efe8 <mbox_callback+0xbc>)
    ef94:	e7d8      	b.n	ef48 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    ef96:	4a15      	ldr	r2, [pc, #84]	; (efec <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    ef98:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    ef9a:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    ef9c:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    efa0:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    efa2:	b950      	cbnz	r0, efba <mbox_callback+0x8e>
    efa4:	4912      	ldr	r1, [pc, #72]	; (eff0 <mbox_callback+0xc4>)
    efa6:	480d      	ldr	r0, [pc, #52]	; (efdc <mbox_callback+0xb0>)
    efa8:	f44f 7312 	mov.w	r3, #584	; 0x248
    efac:	4a11      	ldr	r2, [pc, #68]	; (eff4 <mbox_callback+0xc8>)
    efae:	f018 fb20 	bl	275f2 <assert_print>
    efb2:	f44f 7112 	mov.w	r1, #584	; 0x248
    efb6:	480f      	ldr	r0, [pc, #60]	; (eff4 <mbox_callback+0xc8>)
    efb8:	e7c6      	b.n	ef48 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    efba:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    efbe:	4b0e      	ldr	r3, [pc, #56]	; (eff8 <mbox_callback+0xcc>)
    efc0:	f107 0232 	add.w	r2, r7, #50	; 0x32
    efc4:	9300      	str	r3, [sp, #0]
    efc6:	4648      	mov	r0, r9
    efc8:	4633      	mov	r3, r6
    efca:	9401      	str	r4, [sp, #4]
    efcc:	0052      	lsls	r2, r2, #1
    efce:	f00e f911 	bl	1d1f4 <z_nrf_rtc_timer_set>
}
    efd2:	b003      	add	sp, #12
    efd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    efd8:	0002f710 	.word	0x0002f710
    efdc:	0002e715 	.word	0x0002e715
    efe0:	0002f6c5 	.word	0x0002f6c5
    efe4:	0002f67a 	.word	0x0002f67a
    efe8:	0002f648 	.word	0x0002f648
    efec:	4002a080 	.word	0x4002a080
    eff0:	0002f6c1 	.word	0x0002f6c1
    eff4:	0002f685 	.word	0x0002f685
    eff8:	0000ee7d 	.word	0x0000ee7d

0000effc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    effc:	f01c b85b 	b.w	2b0b6 <SystemInit>

0000f000 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    f000:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    f002:	aa01      	add	r2, sp, #4
    f004:	f01c f83e 	bl	2b084 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    f008:	4604      	mov	r4, r0
    f00a:	b168      	cbz	r0, f028 <soc_secure_gpio_pin_mcu_select+0x28>
    f00c:	2316      	movs	r3, #22
    f00e:	4a0e      	ldr	r2, [pc, #56]	; (f048 <soc_secure_gpio_pin_mcu_select+0x48>)
    f010:	490e      	ldr	r1, [pc, #56]	; (f04c <soc_secure_gpio_pin_mcu_select+0x4c>)
    f012:	480f      	ldr	r0, [pc, #60]	; (f050 <soc_secure_gpio_pin_mcu_select+0x50>)
    f014:	f018 faed 	bl	275f2 <assert_print>
    f018:	4621      	mov	r1, r4
    f01a:	480e      	ldr	r0, [pc, #56]	; (f054 <soc_secure_gpio_pin_mcu_select+0x54>)
    f01c:	f018 fae9 	bl	275f2 <assert_print>
    f020:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    f022:	4809      	ldr	r0, [pc, #36]	; (f048 <soc_secure_gpio_pin_mcu_select+0x48>)
    f024:	f018 fade 	bl	275e4 <assert_post_action>
    f028:	9b01      	ldr	r3, [sp, #4]
    f02a:	b15b      	cbz	r3, f044 <soc_secure_gpio_pin_mcu_select+0x44>
    f02c:	2317      	movs	r3, #23
    f02e:	4a06      	ldr	r2, [pc, #24]	; (f048 <soc_secure_gpio_pin_mcu_select+0x48>)
    f030:	4909      	ldr	r1, [pc, #36]	; (f058 <soc_secure_gpio_pin_mcu_select+0x58>)
    f032:	4807      	ldr	r0, [pc, #28]	; (f050 <soc_secure_gpio_pin_mcu_select+0x50>)
    f034:	f018 fadd 	bl	275f2 <assert_print>
    f038:	9901      	ldr	r1, [sp, #4]
    f03a:	4808      	ldr	r0, [pc, #32]	; (f05c <soc_secure_gpio_pin_mcu_select+0x5c>)
    f03c:	f018 fad9 	bl	275f2 <assert_print>
    f040:	2117      	movs	r1, #23
    f042:	e7ee      	b.n	f022 <soc_secure_gpio_pin_mcu_select+0x22>
}
    f044:	b002      	add	sp, #8
    f046:	bd10      	pop	{r4, pc}
    f048:	0002f722 	.word	0x0002f722
    f04c:	0002f75c 	.word	0x0002f75c
    f050:	0002e715 	.word	0x0002e715
    f054:	0002f77c 	.word	0x0002f77c
    f058:	0002f796 	.word	0x0002f796
    f05c:	0002f7a2 	.word	0x0002f7a2

0000f060 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    f060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    f064:	f8df a0fc 	ldr.w	sl, [pc, #252]	; f164 <z_log_init.isra.0+0x104>
    f068:	4f3f      	ldr	r7, [pc, #252]	; (f168 <z_log_init.isra.0+0x108>)
    f06a:	4681      	mov	r9, r0
    f06c:	ebaa 0307 	sub.w	r3, sl, r7

	if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    f070:	2b9f      	cmp	r3, #159	; 0x9f
static uint32_t z_log_init(bool blocking, bool can_sleep)
    f072:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    f074:	d90b      	bls.n	f08e <z_log_init.isra.0+0x2e>
    f076:	493d      	ldr	r1, [pc, #244]	; (f16c <z_log_init.isra.0+0x10c>)
    f078:	f240 1315 	movw	r3, #277	; 0x115
    f07c:	4a3c      	ldr	r2, [pc, #240]	; (f170 <z_log_init.isra.0+0x110>)
    f07e:	483d      	ldr	r0, [pc, #244]	; (f174 <z_log_init.isra.0+0x114>)
    f080:	f018 fab7 	bl	275f2 <assert_print>
    f084:	f240 1115 	movw	r1, #277	; 0x115
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f088:	4839      	ldr	r0, [pc, #228]	; (f170 <z_log_init.isra.0+0x110>)
    f08a:	f018 faab 	bl	275e4 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    f08e:	483a      	ldr	r0, [pc, #232]	; (f178 <z_log_init.isra.0+0x118>)
    f090:	f018 fb18 	bl	276c4 <atomic_inc>
    f094:	4606      	mov	r6, r0
    f096:	2800      	cmp	r0, #0
    f098:	d134      	bne.n	f104 <z_log_init.isra.0+0xa4>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f09a:	463c      	mov	r4, r7
	uint32_t mask = 0;
    f09c:	4605      	mov	r5, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    f09e:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f0a2:	4554      	cmp	r4, sl
    f0a4:	d927      	bls.n	f0f6 <z_log_init.isra.0+0x96>
    f0a6:	4935      	ldr	r1, [pc, #212]	; (f17c <z_log_init.isra.0+0x11c>)
    f0a8:	f44f 7391 	mov.w	r3, #290	; 0x122
    f0ac:	4a30      	ldr	r2, [pc, #192]	; (f170 <z_log_init.isra.0+0x110>)
    f0ae:	4831      	ldr	r0, [pc, #196]	; (f174 <z_log_init.isra.0+0x114>)
    f0b0:	f018 fa9f 	bl	275f2 <assert_print>
    f0b4:	4832      	ldr	r0, [pc, #200]	; (f180 <z_log_init.isra.0+0x120>)
    f0b6:	f018 fa9c 	bl	275f2 <assert_print>
    f0ba:	f44f 7191 	mov.w	r1, #290	; 0x122
    f0be:	e7e3      	b.n	f088 <z_log_init.isra.0+0x28>
		if (backend->autostart) {
    f0c0:	7b23      	ldrb	r3, [r4, #12]
    f0c2:	b173      	cbz	r3, f0e2 <z_log_init.isra.0+0x82>
	if (backend->api->init) {
    f0c4:	6823      	ldr	r3, [r4, #0]
    f0c6:	68db      	ldr	r3, [r3, #12]
    f0c8:	b10b      	cbz	r3, f0ce <z_log_init.isra.0+0x6e>
		backend->api->init(backend);
    f0ca:	4620      	mov	r0, r4
    f0cc:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    f0ce:	6823      	ldr	r3, [r4, #0]
    f0d0:	691b      	ldr	r3, [r3, #16]
    f0d2:	b943      	cbnz	r3, f0e6 <z_log_init.isra.0+0x86>
				log_backend_enable(backend,
    f0d4:	6863      	ldr	r3, [r4, #4]
    f0d6:	2204      	movs	r2, #4
    f0d8:	4620      	mov	r0, r4
    f0da:	6819      	ldr	r1, [r3, #0]
    f0dc:	f000 f904 	bl	f2e8 <log_backend_enable>
			}

			i++;
    f0e0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f0e2:	3410      	adds	r4, #16
    f0e4:	e7dd      	b.n	f0a2 <z_log_init.isra.0+0x42>
		return backend->api->is_ready(backend);
    f0e6:	4620      	mov	r0, r4
    f0e8:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    f0ea:	2800      	cmp	r0, #0
    f0ec:	d0f2      	beq.n	f0d4 <z_log_init.isra.0+0x74>
				mask |= BIT(i);
    f0ee:	fa0b f306 	lsl.w	r3, fp, r6
    f0f2:	431d      	orrs	r5, r3
    f0f4:	e7f4      	b.n	f0e0 <z_log_init.isra.0+0x80>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f0f6:	d3e3      	bcc.n	f0c0 <z_log_init.isra.0+0x60>
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    f0f8:	f1b9 0f00 	cmp.w	r9, #0
    f0fc:	d002      	beq.n	f104 <z_log_init.isra.0+0xa4>
		mask_cpy &= ~BIT(i);
    f0fe:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    f102:	b90d      	cbnz	r5, f108 <z_log_init.isra.0+0xa8>
			}
		}
	}

	return mask;
}
    f104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f108:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    f10a:	fa95 f4a5 	rbit	r4, r5
    f10e:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    f112:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f116:	0126      	lsls	r6, r4, #4
    f118:	eb07 1404 	add.w	r4, r7, r4, lsl #4
		mask_cpy &= ~BIT(i);
    f11c:	ea6f 0b03 	mvn.w	fp, r3
    f120:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f124:	7b23      	ldrb	r3, [r4, #12]
    f126:	b15b      	cbz	r3, f140 <z_log_init.isra.0+0xe0>
	if (backend->api->is_ready != NULL) {
    f128:	59bb      	ldr	r3, [r7, r6]
    f12a:	691b      	ldr	r3, [r3, #16]
    f12c:	b9a3      	cbnz	r3, f158 <z_log_init.isra.0+0xf8>
					   backend->cb->ctx,
    f12e:	443e      	add	r6, r7
			log_backend_enable(backend,
    f130:	6873      	ldr	r3, [r6, #4]
    f132:	2204      	movs	r2, #4
    f134:	4620      	mov	r0, r4
    f136:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    f138:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    f13c:	f000 f8d4 	bl	f2e8 <log_backend_enable>
	while (mask_cpy) {
    f140:	2d00      	cmp	r5, #0
    f142:	d1e2      	bne.n	f10a <z_log_init.isra.0+0xaa>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    f144:	f1b8 0f00 	cmp.w	r8, #0
    f148:	d004      	beq.n	f154 <z_log_init.isra.0+0xf4>
	return z_impl_k_sleep(timeout);
    f14a:	f44f 70a4 	mov.w	r0, #328	; 0x148
    f14e:	2100      	movs	r1, #0
    f150:	f013 fd7e 	bl	22c50 <z_impl_k_sleep>
    f154:	464d      	mov	r5, r9
    f156:	e7d4      	b.n	f102 <z_log_init.isra.0+0xa2>
		return backend->api->is_ready(backend);
    f158:	4620      	mov	r0, r4
    f15a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f15c:	2800      	cmp	r0, #0
    f15e:	d1ef      	bne.n	f140 <z_log_init.isra.0+0xe0>
    f160:	e7e5      	b.n	f12e <z_log_init.isra.0+0xce>
    f162:	bf00      	nop
    f164:	0002d74c 	.word	0x0002d74c
    f168:	0002d73c 	.word	0x0002d73c
    f16c:	0002f7e9 	.word	0x0002f7e9
    f170:	0002f7bc 	.word	0x0002f7bc
    f174:	0002e715 	.word	0x0002e715
    f178:	2002f180 	.word	0x2002f180
    f17c:	0002f80d 	.word	0x0002f80d
    f180:	0002f82e 	.word	0x0002f82e

0000f184 <log_format_func_t_get>:
}
    f184:	4b01      	ldr	r3, [pc, #4]	; (f18c <log_format_func_t_get+0x8>)
    f186:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f18a:	4770      	bx	lr
    f18c:	0002dc4c 	.word	0x0002dc4c

0000f190 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    f190:	b508      	push	{r3, lr}
    f192:	4603      	mov	r3, r0
    f194:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    f196:	b12b      	cbz	r3, f1a4 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    f198:	4a04      	ldr	r2, [pc, #16]	; (f1ac <log_set_timestamp_func+0x1c>)
    f19a:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    f19c:	f000 faec 	bl	f778 <log_output_timestamp_freq_set>
	}

	return 0;
    f1a0:	2000      	movs	r0, #0
}
    f1a2:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f1a4:	f06f 0015 	mvn.w	r0, #21
    f1a8:	e7fb      	b.n	f1a2 <log_set_timestamp_func+0x12>
    f1aa:	bf00      	nop
    f1ac:	20008454 	.word	0x20008454

0000f1b0 <log_core_init>:
	panic_mode = false;
    f1b0:	2300      	movs	r3, #0
    f1b2:	4a04      	ldr	r2, [pc, #16]	; (f1c4 <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    f1b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    f1b8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    f1ba:	4a03      	ldr	r2, [pc, #12]	; (f1c8 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    f1bc:	4803      	ldr	r0, [pc, #12]	; (f1cc <log_core_init+0x1c>)
	dropped_cnt = 0;
    f1be:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    f1c0:	f7ff bfe6 	b.w	f190 <log_set_timestamp_func>
    f1c4:	2003018a 	.word	0x2003018a
    f1c8:	2002f178 	.word	0x2002f178
    f1cc:	000276c1 	.word	0x000276c1

0000f1d0 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    f1d0:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    f1d2:	4d13      	ldr	r5, [pc, #76]	; (f220 <z_impl_log_panic+0x50>)
    f1d4:	7829      	ldrb	r1, [r5, #0]
    f1d6:	bb09      	cbnz	r1, f21c <z_impl_log_panic+0x4c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    f1d8:	2001      	movs	r0, #1
    f1da:	f7ff ff41 	bl	f060 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f1de:	4c11      	ldr	r4, [pc, #68]	; (f224 <z_impl_log_panic+0x54>)
    f1e0:	4e11      	ldr	r6, [pc, #68]	; (f228 <z_impl_log_panic+0x58>)
    f1e2:	42b4      	cmp	r4, r6
    f1e4:	d917      	bls.n	f216 <z_impl_log_panic+0x46>
    f1e6:	4911      	ldr	r1, [pc, #68]	; (f22c <z_impl_log_panic+0x5c>)
    f1e8:	f44f 73c2 	mov.w	r3, #388	; 0x184
    f1ec:	4a10      	ldr	r2, [pc, #64]	; (f230 <z_impl_log_panic+0x60>)
    f1ee:	4811      	ldr	r0, [pc, #68]	; (f234 <z_impl_log_panic+0x64>)
    f1f0:	f018 f9ff 	bl	275f2 <assert_print>
    f1f4:	4810      	ldr	r0, [pc, #64]	; (f238 <z_impl_log_panic+0x68>)
    f1f6:	f018 f9fc 	bl	275f2 <assert_print>
    f1fa:	f44f 71c2 	mov.w	r1, #388	; 0x184
    f1fe:	480c      	ldr	r0, [pc, #48]	; (f230 <z_impl_log_panic+0x60>)
    f200:	f018 f9f0 	bl	275e4 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    f204:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f206:	795b      	ldrb	r3, [r3, #5]
    f208:	b11b      	cbz	r3, f212 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    f20a:	6823      	ldr	r3, [r4, #0]
    f20c:	4620      	mov	r0, r4
    f20e:	689b      	ldr	r3, [r3, #8]
    f210:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f212:	3410      	adds	r4, #16
    f214:	e7e5      	b.n	f1e2 <z_impl_log_panic+0x12>
    f216:	d3f5      	bcc.n	f204 <z_impl_log_panic+0x34>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    f218:	2301      	movs	r3, #1
    f21a:	702b      	strb	r3, [r5, #0]
}
    f21c:	bd70      	pop	{r4, r5, r6, pc}
    f21e:	bf00      	nop
    f220:	2003018a 	.word	0x2003018a
    f224:	0002d73c 	.word	0x0002d73c
    f228:	0002d74c 	.word	0x0002d74c
    f22c:	0002f80d 	.word	0x0002f80d
    f230:	0002f7bc 	.word	0x0002f7bc
    f234:	0002e715 	.word	0x0002e715
    f238:	0002f82e 	.word	0x0002f82e

0000f23c <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    f23c:	b510      	push	{r4, lr}
    f23e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    f240:	4806      	ldr	r0, [pc, #24]	; (f25c <z_log_dropped+0x20>)
    f242:	f018 fa3f 	bl	276c4 <atomic_inc>
	if (buffered) {
    f246:	b13c      	cbz	r4, f258 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f248:	4b05      	ldr	r3, [pc, #20]	; (f260 <z_log_dropped+0x24>)
    f24a:	e8d3 1fef 	ldaex	r1, [r3]
    f24e:	3901      	subs	r1, #1
    f250:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f254:	2a00      	cmp	r2, #0
    f256:	d1f8      	bne.n	f24a <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    f258:	bd10      	pop	{r4, pc}
    f25a:	bf00      	nop
    f25c:	2002f178 	.word	0x2002f178
    f260:	2002f17c 	.word	0x2002f17c

0000f264 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    f264:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    f266:	4b12      	ldr	r3, [pc, #72]	; (f2b0 <z_log_msg_commit+0x4c>)
{
    f268:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    f26a:	681b      	ldr	r3, [r3, #0]
    f26c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f26e:	4c11      	ldr	r4, [pc, #68]	; (f2b4 <z_log_msg_commit+0x50>)
    f270:	4e11      	ldr	r6, [pc, #68]	; (f2b8 <z_log_msg_commit+0x54>)
	msg->hdr.timestamp = timestamp_func();
    f272:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f274:	42b4      	cmp	r4, r6
    f276:	d918      	bls.n	f2aa <z_log_msg_commit+0x46>
    f278:	4910      	ldr	r1, [pc, #64]	; (f2bc <z_log_msg_commit+0x58>)
    f27a:	f240 13c1 	movw	r3, #449	; 0x1c1
    f27e:	4a10      	ldr	r2, [pc, #64]	; (f2c0 <z_log_msg_commit+0x5c>)
    f280:	4810      	ldr	r0, [pc, #64]	; (f2c4 <z_log_msg_commit+0x60>)
    f282:	f018 f9b6 	bl	275f2 <assert_print>
    f286:	4810      	ldr	r0, [pc, #64]	; (f2c8 <z_log_msg_commit+0x64>)
    f288:	f018 f9b3 	bl	275f2 <assert_print>
    f28c:	f240 11c1 	movw	r1, #449	; 0x1c1
    f290:	480b      	ldr	r0, [pc, #44]	; (f2c0 <z_log_msg_commit+0x5c>)
    f292:	f018 f9a7 	bl	275e4 <assert_post_action>
	return backend->cb->active;
    f296:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    f298:	795b      	ldrb	r3, [r3, #5]
    f29a:	b123      	cbz	r3, f2a6 <z_log_msg_commit+0x42>
	backend->api->process(backend, msg);
    f29c:	6823      	ldr	r3, [r4, #0]
    f29e:	4629      	mov	r1, r5
    f2a0:	4620      	mov	r0, r4
    f2a2:	681b      	ldr	r3, [r3, #0]
    f2a4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f2a6:	3410      	adds	r4, #16
    f2a8:	e7e4      	b.n	f274 <z_log_msg_commit+0x10>
    f2aa:	d3f4      	bcc.n	f296 <z_log_msg_commit+0x32>
	msg_commit(&log_buffer, msg);
}
    f2ac:	bd70      	pop	{r4, r5, r6, pc}
    f2ae:	bf00      	nop
    f2b0:	20008454 	.word	0x20008454
    f2b4:	0002d73c 	.word	0x0002d73c
    f2b8:	0002d74c 	.word	0x0002d74c
    f2bc:	0002f80d 	.word	0x0002f80d
    f2c0:	0002f7bc 	.word	0x0002f7bc
    f2c4:	0002e715 	.word	0x0002e715
    f2c8:	0002f82e 	.word	0x0002f82e

0000f2cc <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    f2cc:	4a04      	ldr	r2, [pc, #16]	; (f2e0 <log_source_name_get+0x14>)
    f2ce:	4b05      	ldr	r3, [pc, #20]	; (f2e4 <log_source_name_get+0x18>)
    f2d0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    f2d2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    f2d6:	bf34      	ite	cc
    f2d8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    f2dc:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    f2de:	4770      	bx	lr
    f2e0:	0002d5e4 	.word	0x0002d5e4
    f2e4:	0002d73c 	.word	0x0002d73c

0000f2e8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    f2e8:	4b0e      	ldr	r3, [pc, #56]	; (f324 <log_backend_enable+0x3c>)
{
    f2ea:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    f2ec:	1ac3      	subs	r3, r0, r3
    f2ee:	111b      	asrs	r3, r3, #4
    f2f0:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    f2f2:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    f2f4:	b948      	cbnz	r0, f30a <log_backend_enable+0x22>
    f2f6:	490c      	ldr	r1, [pc, #48]	; (f328 <log_backend_enable+0x40>)
    f2f8:	480c      	ldr	r0, [pc, #48]	; (f32c <log_backend_enable+0x44>)
    f2fa:	23de      	movs	r3, #222	; 0xde
    f2fc:	4a0c      	ldr	r2, [pc, #48]	; (f330 <log_backend_enable+0x48>)
    f2fe:	f018 f978 	bl	275f2 <assert_print>
    f302:	21de      	movs	r1, #222	; 0xde
    f304:	480a      	ldr	r0, [pc, #40]	; (f330 <log_backend_enable+0x48>)
    f306:	f018 f96d 	bl	275e4 <assert_post_action>
	backend->cb->id = id;
    f30a:	6844      	ldr	r4, [r0, #4]
    f30c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    f30e:	6843      	ldr	r3, [r0, #4]
    f310:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    f312:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    f314:	6843      	ldr	r3, [r0, #4]
    f316:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    f318:	6843      	ldr	r3, [r0, #4]
    f31a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    f31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    f320:	f018 b9e0 	b.w	276e4 <z_log_notify_backend_enabled>
    f324:	0002d73c 	.word	0x0002d73c
    f328:	0002f8d1 	.word	0x0002f8d1
    f32c:	0002e715 	.word	0x0002e715
    f330:	0002f899 	.word	0x0002f899

0000f334 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    f334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f338:	b085      	sub	sp, #20
    f33a:	af02      	add	r7, sp, #8
    f33c:	4604      	mov	r4, r0
    f33e:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    f342:	460e      	mov	r6, r1
    f344:	4693      	mov	fp, r2
    f346:	4698      	mov	r8, r3
    f348:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    f34a:	f1ba 0f00 	cmp.w	sl, #0
    f34e:	d015      	beq.n	f37c <z_impl_z_log_msg_runtime_vcreate+0x48>
		va_list ap2;

		va_copy(ap2, ap);
    f350:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    f354:	f8cd 9000 	str.w	r9, [sp]
    f358:	2110      	movs	r1, #16
    f35a:	4653      	mov	r3, sl
    f35c:	2000      	movs	r0, #0
    f35e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f360:	f7fe fa3a 	bl	d7d8 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    f364:	1e01      	subs	r1, r0, #0
    f366:	da0a      	bge.n	f37e <z_impl_z_log_msg_runtime_vcreate+0x4a>
    f368:	491f      	ldr	r1, [pc, #124]	; (f3e8 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    f36a:	2368      	movs	r3, #104	; 0x68
    f36c:	4a1f      	ldr	r2, [pc, #124]	; (f3ec <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    f36e:	4820      	ldr	r0, [pc, #128]	; (f3f0 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    f370:	f018 f93f 	bl	275f2 <assert_print>
    f374:	2168      	movs	r1, #104	; 0x68
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
    f376:	481d      	ldr	r0, [pc, #116]	; (f3ec <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    f378:	f018 f934 	bl	275e4 <assert_post_action>
		plen = 0;
    f37c:	4651      	mov	r1, sl
	struct log_msg_desc desc =
    f37e:	4a1d      	ldr	r2, [pc, #116]	; (f3f4 <z_impl_z_log_msg_runtime_vcreate+0xc0>)
    f380:	f004 0407 	and.w	r4, r4, #7
    f384:	f00b 0b07 	and.w	fp, fp, #7
    f388:	00e4      	lsls	r4, r4, #3
    f38a:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    f38e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    f392:	4314      	orrs	r4, r2
    f394:	4a18      	ldr	r2, [pc, #96]	; (f3f8 <z_impl_z_log_msg_runtime_vcreate+0xc4>)
    f396:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    f39a:	3517      	adds	r5, #23
    f39c:	440d      	add	r5, r1
		msg = alloca(msg_wlen * sizeof(int));
    f39e:	f025 0507 	bic.w	r5, r5, #7
    f3a2:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    f3a6:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    f3a8:	ad02      	add	r5, sp, #8
	if (pkg && fmt) {
    f3aa:	f1ba 0f00 	cmp.w	sl, #0
    f3ae:	d011      	beq.n	f3d4 <z_impl_z_log_msg_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    f3b0:	f8cd 9000 	str.w	r9, [sp]
    f3b4:	4653      	mov	r3, sl
    f3b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f3b8:	f105 0010 	add.w	r0, r5, #16
    f3bc:	f7fe fa0c 	bl	d7d8 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    f3c0:	2800      	cmp	r0, #0
    f3c2:	da07      	bge.n	f3d4 <z_impl_z_log_msg_runtime_vcreate+0xa0>
    f3c4:	4908      	ldr	r1, [pc, #32]	; (f3e8 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
    f3c6:	2382      	movs	r3, #130	; 0x82
    f3c8:	4a08      	ldr	r2, [pc, #32]	; (f3ec <z_impl_z_log_msg_runtime_vcreate+0xb8>)
    f3ca:	4809      	ldr	r0, [pc, #36]	; (f3f0 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
    f3cc:	f018 f911 	bl	275f2 <assert_print>
    f3d0:	2182      	movs	r1, #130	; 0x82
    f3d2:	e7d0      	b.n	f376 <z_impl_z_log_msg_runtime_vcreate+0x42>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    f3d4:	4643      	mov	r3, r8
    f3d6:	4622      	mov	r2, r4
    f3d8:	4631      	mov	r1, r6
    f3da:	4628      	mov	r0, r5
    f3dc:	f018 f985 	bl	276ea <z_log_msg_finalize>
	}
}
    f3e0:	370c      	adds	r7, #12
    f3e2:	46bd      	mov	sp, r7
    f3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3e8:	0002f91d 	.word	0x0002f91d
    f3ec:	0002f8f1 	.word	0x0002f8f1
    f3f0:	0002e715 	.word	0x0002e715
    f3f4:	0007fe00 	.word	0x0007fe00
    f3f8:	7ff80000 	.word	0x7ff80000

0000f3fc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    f3fc:	b40e      	push	{r1, r2, r3}
    f3fe:	b503      	push	{r0, r1, lr}
    f400:	ab03      	add	r3, sp, #12
    f402:	f853 2b04 	ldr.w	r2, [r3], #4
    f406:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f408:	4804      	ldr	r0, [pc, #16]	; (f41c <print_formatted+0x20>)
	va_start(args, fmt);
    f40a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f40c:	f018 f9b0 	bl	27770 <cbvprintf>
	va_end(args);

	return length;
}
    f410:	b002      	add	sp, #8
    f412:	f85d eb04 	ldr.w	lr, [sp], #4
    f416:	b003      	add	sp, #12
    f418:	4770      	bx	lr
    f41a:	bf00      	nop
    f41c:	0002771f 	.word	0x0002771f

0000f420 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f420:	06ca      	lsls	r2, r1, #27
    f422:	d405      	bmi.n	f430 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f424:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    f426:	bf4c      	ite	mi
    f428:	4902      	ldrmi	r1, [pc, #8]	; (f434 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    f42a:	4903      	ldrpl	r1, [pc, #12]	; (f438 <newline_print+0x18>)
    f42c:	f7ff bfe6 	b.w	f3fc <print_formatted>
	}
}
    f430:	4770      	bx	lr
    f432:	bf00      	nop
    f434:	00032364 	.word	0x00032364
    f438:	0002ee45 	.word	0x0002ee45

0000f43c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    f43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f440:	b089      	sub	sp, #36	; 0x24
    f442:	469a      	mov	sl, r3
    f444:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    f448:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    f44c:	9305      	str	r3, [sp, #20]
    f44e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f450:	4604      	mov	r4, r0
    f452:	460d      	mov	r5, r1
    f454:	9e16      	ldr	r6, [sp, #88]	; 0x58
    f456:	9206      	str	r2, [sp, #24]
    f458:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    f45a:	f1bb 0f00 	cmp.w	fp, #0
    f45e:	f000 8085 	beq.w	f56c <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f462:	f006 0308 	and.w	r3, r6, #8
    f466:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    f468:	f018 f93d 	bl	276e6 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    f46c:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    f470:	4602      	mov	r2, r0
    f472:	2800      	cmp	r0, #0
    f474:	d049      	beq.n	f50a <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    f476:	4620      	mov	r0, r4
    f478:	498c      	ldr	r1, [pc, #560]	; (f6ac <log_output_process+0x270>)
    f47a:	f7ff ffbf 	bl	f3fc <print_formatted>
    f47e:	4680      	mov	r8, r0
	if (stamp) {
    f480:	f1b9 0f00 	cmp.w	r9, #0
    f484:	d008      	beq.n	f498 <log_output_process+0x5c>
	if (!format) {
    f486:	f016 0f44 	tst.w	r6, #68	; 0x44
    f48a:	d140      	bne.n	f50e <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    f48c:	462a      	mov	r2, r5
    f48e:	4620      	mov	r0, r4
    f490:	4987      	ldr	r1, [pc, #540]	; (f6b0 <log_output_process+0x274>)
    f492:	f7ff ffb3 	bl	f3fc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    f496:	4480      	add	r8, r0
	if (color) {
    f498:	f006 0301 	and.w	r3, r6, #1
    f49c:	b153      	cbz	r3, f4b4 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    f49e:	4b85      	ldr	r3, [pc, #532]	; (f6b4 <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    f4a0:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    f4a2:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    f4a6:	4b84      	ldr	r3, [pc, #528]	; (f6b8 <log_output_process+0x27c>)
    f4a8:	4984      	ldr	r1, [pc, #528]	; (f6bc <log_output_process+0x280>)
    f4aa:	2a00      	cmp	r2, #0
    f4ac:	bf08      	it	eq
    f4ae:	461a      	moveq	r2, r3
    f4b0:	f7ff ffa4 	bl	f3fc <print_formatted>
	if (level_on) {
    f4b4:	f006 0308 	and.w	r3, r6, #8
    f4b8:	2b00      	cmp	r3, #0
    f4ba:	d054      	beq.n	f566 <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    f4bc:	4b80      	ldr	r3, [pc, #512]	; (f6c0 <log_output_process+0x284>)
    f4be:	4620      	mov	r0, r4
    f4c0:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    f4c4:	497f      	ldr	r1, [pc, #508]	; (f6c4 <log_output_process+0x288>)
    f4c6:	f7ff ff99 	bl	f3fc <print_formatted>
    f4ca:	4605      	mov	r5, r0
	if (domain) {
    f4cc:	9b06      	ldr	r3, [sp, #24]
    f4ce:	b12b      	cbz	r3, f4dc <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    f4d0:	461a      	mov	r2, r3
    f4d2:	4620      	mov	r0, r4
    f4d4:	497c      	ldr	r1, [pc, #496]	; (f6c8 <log_output_process+0x28c>)
    f4d6:	f7ff ff91 	bl	f3fc <print_formatted>
    f4da:	4405      	add	r5, r0
	if (source) {
    f4dc:	f1ba 0f00 	cmp.w	sl, #0
    f4e0:	d005      	beq.n	f4ee <log_output_process+0xb2>
		total += print_formatted(output,
    f4e2:	4652      	mov	r2, sl
    f4e4:	4620      	mov	r0, r4
    f4e6:	4979      	ldr	r1, [pc, #484]	; (f6cc <log_output_process+0x290>)
    f4e8:	f7ff ff88 	bl	f3fc <print_formatted>
    f4ec:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    f4ee:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    f4f0:	2f00      	cmp	r7, #0
    f4f2:	d149      	bne.n	f588 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    f4f4:	9b04      	ldr	r3, [sp, #16]
    f4f6:	2b00      	cmp	r3, #0
    f4f8:	d160      	bne.n	f5bc <log_output_process+0x180>
	if (color) {
    f4fa:	07f3      	lsls	r3, r6, #31
    f4fc:	f100 80cf 	bmi.w	f69e <log_output_process+0x262>
	newline_print(output, flags);
    f500:	4631      	mov	r1, r6
    f502:	4620      	mov	r0, r4
    f504:	f7ff ff8c 	bl	f420 <newline_print>
}
    f508:	e0c3      	b.n	f692 <log_output_process+0x256>
	uint32_t length = 0U;
    f50a:	4680      	mov	r8, r0
    f50c:	e7b8      	b.n	f480 <log_output_process+0x44>
	} else if (freq != 0U) {
    f50e:	4b70      	ldr	r3, [pc, #448]	; (f6d0 <log_output_process+0x294>)
    f510:	6818      	ldr	r0, [r3, #0]
    f512:	2800      	cmp	r0, #0
    f514:	d0bf      	beq.n	f496 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    f516:	4b6f      	ldr	r3, [pc, #444]	; (f6d4 <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    f518:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f51c:	681b      	ldr	r3, [r3, #0]
    f51e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    f522:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    f526:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    f52a:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    f52e:	fb09 f505 	mul.w	r5, r9, r5
    f532:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f536:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    f53a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    f53e:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f542:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    f546:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f54a:	fb09 f505 	mul.w	r5, r9, r5
    f54e:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    f552:	fb0c 1113 	mls	r1, ip, r3, r1
    f556:	4620      	mov	r0, r4
    f558:	9100      	str	r1, [sp, #0]
    f55a:	e9cd e501 	strd	lr, r5, [sp, #4]
    f55e:	495e      	ldr	r1, [pc, #376]	; (f6d8 <log_output_process+0x29c>)
    f560:	f7ff ff4c 	bl	f3fc <print_formatted>
    f564:	e797      	b.n	f496 <log_output_process+0x5a>
	int total = 0;
    f566:	f006 0508 	and.w	r5, r6, #8
    f56a:	e7af      	b.n	f4cc <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f56c:	f1ba 0f01 	cmp.w	sl, #1
    f570:	d106      	bne.n	f580 <log_output_process+0x144>
	if (package) {
    f572:	b9ef      	cbnz	r7, f5b0 <log_output_process+0x174>
	if (data_len) {
    f574:	9b04      	ldr	r3, [sp, #16]
    f576:	2b00      	cmp	r3, #0
    f578:	f000 808b 	beq.w	f692 <log_output_process+0x256>
		prefix_offset = 0;
    f57c:	2500      	movs	r5, #0
    f57e:	e01d      	b.n	f5bc <log_output_process+0x180>
	if (package) {
    f580:	2f00      	cmp	r7, #0
    f582:	d0f7      	beq.n	f574 <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f584:	4855      	ldr	r0, [pc, #340]	; (f6dc <log_output_process+0x2a0>)
    f586:	e014      	b.n	f5b2 <log_output_process+0x176>
		cb = out_func;
    f588:	4855      	ldr	r0, [pc, #340]	; (f6e0 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    f58a:	463b      	mov	r3, r7
    f58c:	4622      	mov	r2, r4
    f58e:	4955      	ldr	r1, [pc, #340]	; (f6e4 <log_output_process+0x2a8>)
    f590:	f017 fe27 	bl	271e2 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    f594:	2800      	cmp	r0, #0
    f596:	da0e      	bge.n	f5b6 <log_output_process+0x17a>
    f598:	4953      	ldr	r1, [pc, #332]	; (f6e8 <log_output_process+0x2ac>)
    f59a:	4854      	ldr	r0, [pc, #336]	; (f6ec <log_output_process+0x2b0>)
    f59c:	f44f 7300 	mov.w	r3, #512	; 0x200
    f5a0:	4a53      	ldr	r2, [pc, #332]	; (f6f0 <log_output_process+0x2b4>)
    f5a2:	f018 f826 	bl	275f2 <assert_print>
    f5a6:	f44f 7100 	mov.w	r1, #512	; 0x200
    f5aa:	4851      	ldr	r0, [pc, #324]	; (f6f0 <log_output_process+0x2b4>)
    f5ac:	f018 f81a 	bl	275e4 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f5b0:	484b      	ldr	r0, [pc, #300]	; (f6e0 <log_output_process+0x2a4>)
		prefix_offset = 0;
    f5b2:	465d      	mov	r5, fp
    f5b4:	e7e9      	b.n	f58a <log_output_process+0x14e>
	if (data_len) {
    f5b6:	9b04      	ldr	r3, [sp, #16]
    f5b8:	2b00      	cmp	r3, #0
    f5ba:	d066      	beq.n	f68a <log_output_process+0x24e>
		print_formatted(output, " ");
    f5bc:	f8df 8134 	ldr.w	r8, [pc, #308]	; f6f4 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    f5c0:	f8df 9134 	ldr.w	r9, [pc, #308]	; f6f8 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f5c4:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    f5c6:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f5c8:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    f5ca:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f5cc:	bf28      	it	cs
    f5ce:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    f5d0:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    f5d4:	f7ff ff24 	bl	f420 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    f5d8:	4555      	cmp	r5, sl
    f5da:	dc43      	bgt.n	f664 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    f5dc:	9b05      	ldr	r3, [sp, #20]
    f5de:	4649      	mov	r1, r9
    f5e0:	4620      	mov	r0, r4
    f5e2:	781a      	ldrb	r2, [r3, #0]
    f5e4:	f7ff ff0a 	bl	f3fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f5e8:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    f5ec:	f01a 0f07 	tst.w	sl, #7
    f5f0:	d103      	bne.n	f5fa <log_output_process+0x1be>
			print_formatted(output, " ");
    f5f2:	4641      	mov	r1, r8
    f5f4:	4620      	mov	r0, r4
    f5f6:	f7ff ff01 	bl	f3fc <print_formatted>
		if (i < length) {
    f5fa:	4557      	cmp	r7, sl
    f5fc:	d939      	bls.n	f672 <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    f5fe:	9b05      	ldr	r3, [sp, #20]
    f600:	4649      	mov	r1, r9
    f602:	4620      	mov	r0, r4
    f604:	f813 200a 	ldrb.w	r2, [r3, sl]
    f608:	f7ff fef8 	bl	f3fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f60c:	f10a 0a01 	add.w	sl, sl, #1
    f610:	f1ba 0f10 	cmp.w	sl, #16
    f614:	d1ea      	bne.n	f5ec <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f616:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    f61a:	4620      	mov	r0, r4
    f61c:	4937      	ldr	r1, [pc, #220]	; (f6fc <log_output_process+0x2c0>)
    f61e:	f7ff feed 	bl	f3fc <print_formatted>
		if (i < length) {
    f622:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    f624:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    f626:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    f628:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    f62a:	4b35      	ldr	r3, [pc, #212]	; (f700 <log_output_process+0x2c4>)
    f62c:	5c99      	ldrb	r1, [r3, r2]
    f62e:	f011 0f97 	tst.w	r1, #151	; 0x97
    f632:	bf08      	it	eq
    f634:	222e      	moveq	r2, #46	; 0x2e
    f636:	4933      	ldr	r1, [pc, #204]	; (f704 <log_output_process+0x2c8>)
    f638:	f7ff fee0 	bl	f3fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f63c:	f10a 0a01 	add.w	sl, sl, #1
    f640:	f1ba 0f10 	cmp.w	sl, #16
    f644:	d01a      	beq.n	f67c <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    f646:	f01a 0f07 	tst.w	sl, #7
    f64a:	d103      	bne.n	f654 <log_output_process+0x218>
			print_formatted(output, " ");
    f64c:	4641      	mov	r1, r8
    f64e:	4620      	mov	r0, r4
    f650:	f7ff fed4 	bl	f3fc <print_formatted>
		if (i < length) {
    f654:	4557      	cmp	r7, sl
    f656:	4652      	mov	r2, sl
    f658:	d8e4      	bhi.n	f624 <log_output_process+0x1e8>
			print_formatted(output, " ");
    f65a:	4641      	mov	r1, r8
    f65c:	4620      	mov	r0, r4
    f65e:	f7ff fecd 	bl	f3fc <print_formatted>
    f662:	e7eb      	b.n	f63c <log_output_process+0x200>
		print_formatted(output, " ");
    f664:	4641      	mov	r1, r8
    f666:	4620      	mov	r0, r4
    f668:	f7ff fec8 	bl	f3fc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f66c:	f10a 0a01 	add.w	sl, sl, #1
    f670:	e7b2      	b.n	f5d8 <log_output_process+0x19c>
			print_formatted(output, "   ");
    f672:	4620      	mov	r0, r4
    f674:	4924      	ldr	r1, [pc, #144]	; (f708 <log_output_process+0x2cc>)
    f676:	f7ff fec1 	bl	f3fc <print_formatted>
    f67a:	e7c7      	b.n	f60c <log_output_process+0x1d0>
		data += length;
    f67c:	9b05      	ldr	r3, [sp, #20]
    f67e:	443b      	add	r3, r7
    f680:	9305      	str	r3, [sp, #20]
	} while (len);
    f682:	9b04      	ldr	r3, [sp, #16]
    f684:	1bdb      	subs	r3, r3, r7
    f686:	9304      	str	r3, [sp, #16]
    f688:	d19c      	bne.n	f5c4 <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    f68a:	f1bb 0f00 	cmp.w	fp, #0
    f68e:	f47f af34 	bne.w	f4fa <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    f692:	4620      	mov	r0, r4
}
    f694:	b009      	add	sp, #36	; 0x24
    f696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    f69a:	f018 b870 	b.w	2777e <log_output_flush>
		print_formatted(output, "%s", log_color);
    f69e:	4620      	mov	r0, r4
    f6a0:	4a05      	ldr	r2, [pc, #20]	; (f6b8 <log_output_process+0x27c>)
    f6a2:	4906      	ldr	r1, [pc, #24]	; (f6bc <log_output_process+0x280>)
    f6a4:	f7ff feaa 	bl	f3fc <print_formatted>
}
    f6a8:	e72a      	b.n	f500 <log_output_process+0xc4>
    f6aa:	bf00      	nop
    f6ac:	0002f92c 	.word	0x0002f92c
    f6b0:	0002f930 	.word	0x0002f930
    f6b4:	0002dc5c 	.word	0x0002dc5c
    f6b8:	0002f927 	.word	0x0002f927
    f6bc:	0002e912 	.word	0x0002e912
    f6c0:	0002dc70 	.word	0x0002dc70
    f6c4:	0002f955 	.word	0x0002f955
    f6c8:	0002f95b 	.word	0x0002f95b
    f6cc:	0002f95f 	.word	0x0002f95f
    f6d0:	2002f188 	.word	0x2002f188
    f6d4:	2002f184 	.word	0x2002f184
    f6d8:	0002f939 	.word	0x0002f939
    f6dc:	0002773b 	.word	0x0002773b
    f6e0:	0002771f 	.word	0x0002771f
    f6e4:	00027771 	.word	0x00027771
    f6e8:	0002f993 	.word	0x0002f993
    f6ec:	0002e715 	.word	0x0002e715
    f6f0:	0002f964 	.word	0x0002f964
    f6f4:	000334e2 	.word	0x000334e2
    f6f8:	0002f99c 	.word	0x0002f99c
    f6fc:	0002f9a2 	.word	0x0002f9a2
    f700:	00034022 	.word	0x00034022
    f704:	0002f9a4 	.word	0x0002f9a4
    f708:	000334e0 	.word	0x000334e0

0000f70c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    f70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    f710:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    f712:	684b      	ldr	r3, [r1, #4]
    f714:	4605      	mov	r5, r0
    f716:	460c      	mov	r4, r1
    f718:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    f71a:	688e      	ldr	r6, [r1, #8]
    f71c:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    f71e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    f722:	b15b      	cbz	r3, f73c <log_output_msg_process+0x30>
    f724:	4a13      	ldr	r2, [pc, #76]	; (f774 <log_output_msg_process+0x68>)
    f726:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    f728:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    f72c:	2900      	cmp	r1, #0
    f72e:	db1f      	blt.n	f770 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    f730:	7820      	ldrb	r0, [r4, #0]
    f732:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f736:	f7ff fdc9 	bl	f2cc <log_source_name_get>
    f73a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    f73c:	4621      	mov	r1, r4
    f73e:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    f742:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    f744:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    f748:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    f74a:	eb01 0402 	add.w	r4, r1, r2
    f74e:	bf08      	it	eq
    f750:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    f752:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    f756:	e9cd 0803 	strd	r0, r8, [sp, #12]
    f75a:	e9cd 1401 	strd	r1, r4, [sp, #4]
    f75e:	2200      	movs	r2, #0
    f760:	4631      	mov	r1, r6
    f762:	4628      	mov	r0, r5
    f764:	9700      	str	r7, [sp, #0]
    f766:	f7ff fe69 	bl	f43c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    f76a:	b006      	add	sp, #24
    f76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    f770:	2300      	movs	r3, #0
    f772:	e7e3      	b.n	f73c <log_output_msg_process+0x30>
    f774:	0002d5e4 	.word	0x0002d5e4

0000f778 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f778:	2100      	movs	r1, #0
    f77a:	2301      	movs	r3, #1
    f77c:	4a06      	ldr	r2, [pc, #24]	; (f798 <log_output_timestamp_freq_set+0x20>)
    f77e:	4290      	cmp	r0, r2
    f780:	d806      	bhi.n	f790 <log_output_timestamp_freq_set+0x18>
    f782:	4a06      	ldr	r2, [pc, #24]	; (f79c <log_output_timestamp_freq_set+0x24>)
    f784:	b901      	cbnz	r1, f788 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    f786:	2301      	movs	r3, #1
    f788:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f78a:	4b05      	ldr	r3, [pc, #20]	; (f7a0 <log_output_timestamp_freq_set+0x28>)
    f78c:	6018      	str	r0, [r3, #0]
}
    f78e:	4770      	bx	lr
		timestamp_div *= 2U;
    f790:	2101      	movs	r1, #1
		frequency /= 2U;
    f792:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f794:	005b      	lsls	r3, r3, #1
    f796:	e7f2      	b.n	f77e <log_output_timestamp_freq_set+0x6>
    f798:	000f4240 	.word	0x000f4240
    f79c:	2002f184 	.word	0x2002f184
    f7a0:	2002f188 	.word	0x2002f188

0000f7a4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    f7a4:	2201      	movs	r2, #1
    f7a6:	4b01      	ldr	r3, [pc, #4]	; (f7ac <log_backend_rtt_init+0x8>)
    f7a8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    f7aa:	4770      	bx	lr
    f7ac:	2003018b 	.word	0x2003018b

0000f7b0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    f7b0:	4b01      	ldr	r3, [pc, #4]	; (f7b8 <format_set+0x8>)
	return 0;
}
    f7b2:	2000      	movs	r0, #0
	log_format_current = log_type;
    f7b4:	6019      	str	r1, [r3, #0]
}
    f7b6:	4770      	bx	lr
    f7b8:	2002f1a0 	.word	0x2002f1a0

0000f7bc <panic>:
	panic_mode = true;
    f7bc:	2201      	movs	r2, #1
    f7be:	4b02      	ldr	r3, [pc, #8]	; (f7c8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    f7c0:	4802      	ldr	r0, [pc, #8]	; (f7cc <panic+0x10>)
    f7c2:	701a      	strb	r2, [r3, #0]
    f7c4:	f017 bfdb 	b.w	2777e <log_output_flush>
    f7c8:	2003018c 	.word	0x2003018c
    f7cc:	0002dca0 	.word	0x0002dca0

0000f7d0 <process>:
{
    f7d0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f7d2:	4b06      	ldr	r3, [pc, #24]	; (f7ec <process+0x1c>)
{
    f7d4:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f7d6:	6818      	ldr	r0, [r3, #0]
    f7d8:	f7ff fcd4 	bl	f184 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    f7dc:	4621      	mov	r1, r4
}
    f7de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    f7e2:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    f7e4:	220f      	movs	r2, #15
    f7e6:	4802      	ldr	r0, [pc, #8]	; (f7f0 <process+0x20>)
    f7e8:	4718      	bx	r3
    f7ea:	bf00      	nop
    f7ec:	2002f1a0 	.word	0x2002f1a0
    f7f0:	0002dca0 	.word	0x0002dca0

0000f7f4 <data_out_block_mode>:
{
    f7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f7f6:	4607      	mov	r7, r0
    f7f8:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    f7fa:	2404      	movs	r4, #4
    f7fc:	4d17      	ldr	r5, [pc, #92]	; (f85c <data_out_block_mode+0x68>)
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    f7fe:	4632      	mov	r2, r6
    f800:	4639      	mov	r1, r7
    f802:	2000      	movs	r0, #0
    f804:	f010 fb8c 	bl	1ff20 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    f808:	b1c8      	cbz	r0, f83e <data_out_block_mode+0x4a>
	host_present = true;
    f80a:	2301      	movs	r3, #1
    f80c:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    f80e:	4b14      	ldr	r3, [pc, #80]	; (f860 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    f810:	781b      	ldrb	r3, [r3, #0]
    f812:	b92b      	cbnz	r3, f820 <data_out_block_mode+0x2c>
}
    f814:	4630      	mov	r0, r6
    f816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    f818:	b95c      	cbnz	r4, f832 <data_out_block_mode+0x3e>
		host_present = false;
    f81a:	702c      	strb	r4, [r5, #0]
    f81c:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    f820:	2000      	movs	r0, #0
    f822:	f010 fbc5 	bl	1ffb0 <SEGGER_RTT_HasDataUp>
    f826:	2800      	cmp	r0, #0
    f828:	d0f4      	beq.n	f814 <data_out_block_mode+0x20>
    f82a:	782b      	ldrb	r3, [r5, #0]
    f82c:	2b00      	cmp	r3, #0
    f82e:	d1f3      	bne.n	f818 <data_out_block_mode+0x24>
    f830:	e7f0      	b.n	f814 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    f832:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    f834:	f241 3088 	movw	r0, #5000	; 0x1388
    f838:	f01c fb38 	bl	2beac <z_impl_k_busy_wait>
}
    f83c:	e7f0      	b.n	f820 <data_out_block_mode+0x2c>
		} else if (host_present) {
    f83e:	782b      	ldrb	r3, [r5, #0]
    f840:	b113      	cbz	r3, f848 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    f842:	3c01      	subs	r4, #1
    f844:	d104      	bne.n	f850 <data_out_block_mode+0x5c>
		host_present = false;
    f846:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    f848:	782b      	ldrb	r3, [r5, #0]
    f84a:	2b00      	cmp	r3, #0
    f84c:	d1d7      	bne.n	f7fe <data_out_block_mode+0xa>
    f84e:	e7e1      	b.n	f814 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    f850:	f241 3088 	movw	r0, #5000	; 0x1388
    f854:	f01c fb2a 	bl	2beac <z_impl_k_busy_wait>
    f858:	e7f6      	b.n	f848 <data_out_block_mode+0x54>
    f85a:	bf00      	nop
    f85c:	2003018b 	.word	0x2003018b
    f860:	2003018c 	.word	0x2003018c

0000f864 <nvs_flash_erase_sector>:

/* erase a sector and verify erase was OK.
 * return 0 if OK, errorcode on error.
 */
static int nvs_flash_erase_sector(struct nvs_fs *fs, uint32_t addr)
{
    f864:	b570      	push	{r4, r5, r6, lr}
	off_t offset;

	addr &= ADDR_SECT_MASK;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    f866:	8983      	ldrh	r3, [r0, #12]
    f868:	6805      	ldr	r5, [r0, #0]
	addr &= ADDR_SECT_MASK;
    f86a:	0c0e      	lsrs	r6, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    f86c:	0c09      	lsrs	r1, r1, #16
    f86e:	fb03 5501 	mla	r5, r3, r1, r5
{
    f872:	b086      	sub	sp, #24

	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    f874:	e9cd 5304 	strd	r5, r3, [sp, #16]
    f878:	4b11      	ldr	r3, [pc, #68]	; (f8c0 <nvs_flash_erase_sector+0x5c>)
    f87a:	2208      	movs	r2, #8
    f87c:	9303      	str	r3, [sp, #12]
    f87e:	4b11      	ldr	r3, [pc, #68]	; (f8c4 <nvs_flash_erase_sector+0x60>)
{
    f880:	4604      	mov	r4, r0
	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    f882:	9302      	str	r3, [sp, #8]
    f884:	2300      	movs	r3, #0
    f886:	4910      	ldr	r1, [pc, #64]	; (f8c8 <nvs_flash_erase_sector+0x64>)
    f888:	4618      	mov	r0, r3
    f88a:	e9cd 3200 	strd	r3, r2, [sp]
    f88e:	2204      	movs	r2, #4
    f890:	f017 fff5 	bl	2787e <z_log_msg_runtime_create.constprop.0>
	addr &= ADDR_SECT_MASK;
    f894:	0436      	lsls	r6, r6, #16
		fs->sector_size);

#ifdef CONFIG_NVS_LOOKUP_CACHE
	nvs_lookup_cache_invalidate(fs, addr >> ADDR_SECT_SHIFT);
#endif
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    f896:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f898:	89a2      	ldrh	r2, [r4, #12]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    f89a:	6883      	ldr	r3, [r0, #8]
    f89c:	4629      	mov	r1, r5
    f89e:	689b      	ldr	r3, [r3, #8]
    f8a0:	4798      	blx	r3

	if (rc) {
    f8a2:	b950      	cbnz	r0, f8ba <nvs_flash_erase_sector+0x56>
		return rc;
	}

	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    f8a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f8a6:	4631      	mov	r1, r6
    f8a8:	4620      	mov	r0, r4
    f8aa:	89a3      	ldrh	r3, [r4, #12]
    f8ac:	7912      	ldrb	r2, [r2, #4]
    f8ae:	f017 ffc1 	bl	27834 <nvs_flash_cmp_const>
			fs->sector_size)) {
		rc = -ENXIO;
    f8b2:	2800      	cmp	r0, #0
    f8b4:	bf18      	it	ne
    f8b6:	f06f 0005 	mvnne.w	r0, #5
	}

	return rc;
}
    f8ba:	b006      	add	sp, #24
    f8bc:	bd70      	pop	{r4, r5, r6, pc}
    f8be:	bf00      	nop
    f8c0:	0002fb9a 	.word	0x0002fb9a
    f8c4:	0002f9d7 	.word	0x0002f9d7
    f8c8:	0002d6bc 	.word	0x0002d6bc

0000f8cc <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    f8cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t data_end_addr, ate_end_addr;
	struct nvs_ate end_ate;
	size_t ate_size;
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
    f8d0:	884b      	ldrh	r3, [r1, #2]
{
    f8d2:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Recovering last ate from sector %d",
    f8d4:	9304      	str	r3, [sp, #16]
    f8d6:	4b1d      	ldr	r3, [pc, #116]	; (f94c <nvs_recover_last_ate+0x80>)
    f8d8:	2408      	movs	r4, #8
    f8da:	9303      	str	r3, [sp, #12]
    f8dc:	4b1c      	ldr	r3, [pc, #112]	; (f950 <nvs_recover_last_ate+0x84>)
{
    f8de:	4607      	mov	r7, r0
	LOG_DBG("Recovering last ate from sector %d",
    f8e0:	9302      	str	r3, [sp, #8]
    f8e2:	2300      	movs	r3, #0
{
    f8e4:	460d      	mov	r5, r1
	LOG_DBG("Recovering last ate from sector %d",
    f8e6:	4618      	mov	r0, r3
    f8e8:	e9cd 3400 	strd	r3, r4, [sp]
    f8ec:	4919      	ldr	r1, [pc, #100]	; (f954 <nvs_recover_last_ate+0x88>)
    f8ee:	2204      	movs	r2, #4
    f8f0:	f017 ffc5 	bl	2787e <z_log_msg_runtime_create.constprop.0>
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f8f4:	4621      	mov	r1, r4
    f8f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    f8f8:	f017 ffd1 	bl	2789e <nvs_al_size.isra.0>
    f8fc:	4680      	mov	r8, r0

	*addr -= ate_size;
    f8fe:	682c      	ldr	r4, [r5, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    f900:	f8df 9054 	ldr.w	r9, [pc, #84]	; f958 <nvs_recover_last_ate+0x8c>
	*addr -= ate_size;
    f904:	1a24      	subs	r4, r4, r0
    f906:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    f908:	ea04 0609 	and.w	r6, r4, r9
	while (ate_end_addr > data_end_addr) {
    f90c:	42b4      	cmp	r4, r6
    f90e:	d803      	bhi.n	f918 <nvs_recover_last_ate+0x4c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    f910:	2000      	movs	r0, #0
}
    f912:	b009      	add	sp, #36	; 0x24
    f914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f918:	2308      	movs	r3, #8
    f91a:	4621      	mov	r1, r4
    f91c:	4638      	mov	r0, r7
    f91e:	aa06      	add	r2, sp, #24
    f920:	f017 ff3a 	bl	27798 <nvs_flash_rd>
		if (rc) {
    f924:	2800      	cmp	r0, #0
    f926:	d1f4      	bne.n	f912 <nvs_recover_last_ate+0x46>
		if (nvs_ate_valid(fs, &end_ate)) {
    f928:	4638      	mov	r0, r7
    f92a:	a906      	add	r1, sp, #24
    f92c:	f017 ffc1 	bl	278b2 <nvs_ate_valid>
    f930:	b140      	cbz	r0, f944 <nvs_recover_last_ate+0x78>
			data_end_addr += end_ate.offset + end_ate.len;
    f932:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    f936:	f8bd 201c 	ldrh.w	r2, [sp, #28]
			data_end_addr &= ADDR_SECT_MASK;
    f93a:	ea06 0609 	and.w	r6, r6, r9
			data_end_addr += end_ate.offset + end_ate.len;
    f93e:	4413      	add	r3, r2
    f940:	441e      	add	r6, r3
			*addr = ate_end_addr;
    f942:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    f944:	eba4 0408 	sub.w	r4, r4, r8
    f948:	e7e0      	b.n	f90c <nvs_recover_last_ate+0x40>
    f94a:	bf00      	nop
    f94c:	0002fb85 	.word	0x0002fb85
    f950:	0002f9f8 	.word	0x0002f9f8
    f954:	0002d6bc 	.word	0x0002d6bc
    f958:	ffff0000 	.word	0xffff0000

0000f95c <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
    f95c:	b530      	push	{r4, r5, lr}
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    f95e:	8883      	ldrh	r3, [r0, #4]
{
    f960:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    f962:	9304      	str	r3, [sp, #16]
    f964:	4b10      	ldr	r3, [pc, #64]	; (f9a8 <nvs_add_gc_done_ate+0x4c>)
    f966:	2500      	movs	r5, #0
    f968:	9303      	str	r3, [sp, #12]
    f96a:	4b10      	ldr	r3, [pc, #64]	; (f9ac <nvs_add_gc_done_ate+0x50>)
{
    f96c:	4604      	mov	r4, r0
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    f96e:	9302      	str	r3, [sp, #8]
    f970:	2308      	movs	r3, #8
    f972:	2204      	movs	r2, #4
    f974:	4628      	mov	r0, r5
    f976:	e9cd 5300 	strd	r5, r3, [sp]
    f97a:	490d      	ldr	r1, [pc, #52]	; (f9b0 <nvs_add_gc_done_ate+0x54>)
    f97c:	462b      	mov	r3, r5
    f97e:	f017 ff7e 	bl	2787e <z_log_msg_runtime_create.constprop.0>
	gc_done_ate.id = 0xffff;
    f982:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f986:	f8ad 3018 	strh.w	r3, [sp, #24]
	gc_done_ate.len = 0U;
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f98a:	68a3      	ldr	r3, [r4, #8]
	nvs_ate_crc8_update(&gc_done_ate);
    f98c:	a806      	add	r0, sp, #24
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f98e:	f8ad 301a 	strh.w	r3, [sp, #26]
	gc_done_ate.len = 0U;
    f992:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&gc_done_ate);
    f996:	f017 ff44 	bl	27822 <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    f99a:	4620      	mov	r0, r4
    f99c:	a906      	add	r1, sp, #24
    f99e:	f018 f844 	bl	27a2a <nvs_flash_ate_wrt>
}
    f9a2:	b009      	add	sp, #36	; 0x24
    f9a4:	bd30      	pop	{r4, r5, pc}
    f9a6:	bf00      	nop
    f9a8:	0002fb6a 	.word	0x0002fb6a
    f9ac:	0002fa1f 	.word	0x0002fa1f
    f9b0:	0002d6bc 	.word	0x0002d6bc

0000f9b4 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    f9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f9b8:	2108      	movs	r1, #8
{
    f9ba:	b09b      	sub	sp, #108	; 0x6c
    f9bc:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f9be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f9c0:	f017 ff6d 	bl	2789e <nvs_al_size.isra.0>
    f9c4:	4605      	mov	r5, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    f9c6:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    f9c8:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    f9ca:	0c1b      	lsrs	r3, r3, #16
    f9cc:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    f9ce:	a909      	add	r1, sp, #36	; 0x24
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    f9d0:	9309      	str	r3, [sp, #36]	; 0x24
	nvs_sector_advance(fs, &sec_addr);
    f9d2:	f017 feef 	bl	277b4 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    f9d6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    f9da:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f9dc:	aa0c      	add	r2, sp, #48	; 0x30
	gc_addr = sec_addr + fs->sector_size - ate_size;
    f9de:	445e      	add	r6, fp
    f9e0:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f9e2:	2308      	movs	r3, #8
    f9e4:	4631      	mov	r1, r6
    f9e6:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    f9e8:	960a      	str	r6, [sp, #40]	; 0x28
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f9ea:	f017 fed5 	bl	27798 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    f9ee:	1e02      	subs	r2, r0, #0
    f9f0:	f2c0 80bb 	blt.w	fb6a <nvs_gc+0x1b6>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    f9f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f9f6:	aa0c      	add	r2, sp, #48	; 0x30
    f9f8:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    f9fa:	2300      	movs	r3, #0
		if (data8[i] != value) {
    f9fc:	f812 0b01 	ldrb.w	r0, [r2], #1
    fa00:	4281      	cmp	r1, r0
    fa02:	f040 80a1 	bne.w	fb48 <nvs_gc+0x194>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fa06:	3301      	adds	r3, #1
    fa08:	2b08      	cmp	r3, #8
    fa0a:	d1f7      	bne.n	f9fc <nvs_gc+0x48>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    fa0c:	68a3      	ldr	r3, [r4, #8]
    fa0e:	6862      	ldr	r2, [r4, #4]
    fa10:	442b      	add	r3, r5
    fa12:	429a      	cmp	r2, r3
    fa14:	f080 8090 	bcs.w	fb38 <nvs_gc+0x184>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
    fa18:	4659      	mov	r1, fp
    fa1a:	4620      	mov	r0, r4
    fa1c:	f7ff ff22 	bl	f864 <nvs_flash_erase_sector>
    fa20:	4602      	mov	r2, r0
	if (rc) {
    fa22:	e0a2      	b.n	fb6a <nvs_gc+0x1b6>
		gc_addr += close_ate.offset;
    fa24:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
		gc_addr &= ADDR_SECT_MASK;
    fa28:	0c36      	lsrs	r6, r6, #16
    fa2a:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
    fa2c:	441e      	add	r6, r3
    fa2e:	960a      	str	r6, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    fa30:	aa0e      	add	r2, sp, #56	; 0x38
    fa32:	4620      	mov	r0, r4
    fa34:	a90a      	add	r1, sp, #40	; 0x28
		gc_prev_addr = gc_addr;
    fa36:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    fa3a:	f017 ff72 	bl	27922 <nvs_prev_ate>
		if (rc) {
    fa3e:	4602      	mov	r2, r0
    fa40:	2800      	cmp	r0, #0
    fa42:	f040 8092 	bne.w	fb6a <nvs_gc+0x1b6>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    fa46:	4620      	mov	r0, r4
    fa48:	a90e      	add	r1, sp, #56	; 0x38
    fa4a:	f017 ff32 	bl	278b2 <nvs_ate_valid>
    fa4e:	b918      	cbnz	r0, fa58 <nvs_gc+0xa4>
	} while (gc_prev_addr != stop_addr);
    fa50:	9b07      	ldr	r3, [sp, #28]
    fa52:	4553      	cmp	r3, sl
    fa54:	d1ec      	bne.n	fa30 <nvs_gc+0x7c>
    fa56:	e7d9      	b.n	fa0c <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
    fa58:	6863      	ldr	r3, [r4, #4]
    fa5a:	930b      	str	r3, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fa5c:	aa10      	add	r2, sp, #64	; 0x40
    fa5e:	4620      	mov	r0, r4
    fa60:	a90b      	add	r1, sp, #44	; 0x2c
			wlk_prev_addr = wlk_addr;
    fa62:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fa64:	f017 ff5d 	bl	27922 <nvs_prev_ate>
			if (rc) {
    fa68:	4602      	mov	r2, r0
    fa6a:	2800      	cmp	r0, #0
    fa6c:	d17d      	bne.n	fb6a <nvs_gc+0x1b6>
			if ((wlk_ate.id == gc_ate.id) &&
    fa6e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    fa72:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    fa76:	429a      	cmp	r2, r3
    fa78:	d038      	beq.n	faec <nvs_gc+0x138>
		} while (wlk_addr != fs->ate_wra);
    fa7a:	6862      	ldr	r2, [r4, #4]
    fa7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa7e:	429a      	cmp	r2, r3
    fa80:	d1ec      	bne.n	fa5c <nvs_gc+0xa8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    fa82:	45b2      	cmp	sl, r6
    fa84:	d1e4      	bne.n	fa50 <nvs_gc+0x9c>
    fa86:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    fa8a:	2b00      	cmp	r3, #0
    fa8c:	d0e0      	beq.n	fa50 <nvs_gc+0x9c>
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    fa8e:	9305      	str	r3, [sp, #20]
    fa90:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    fa94:	2208      	movs	r2, #8
    fa96:	9304      	str	r3, [sp, #16]
    fa98:	4b36      	ldr	r3, [pc, #216]	; (fb74 <nvs_gc+0x1c0>)
    fa9a:	4937      	ldr	r1, [pc, #220]	; (fb78 <nvs_gc+0x1c4>)
    fa9c:	9303      	str	r3, [sp, #12]
    fa9e:	4b37      	ldr	r3, [pc, #220]	; (fb7c <nvs_gc+0x1c8>)
    faa0:	9302      	str	r3, [sp, #8]
    faa2:	2300      	movs	r3, #0
    faa4:	4618      	mov	r0, r3
    faa6:	e9cd 3200 	strd	r3, r2, [sp]
    faaa:	2204      	movs	r2, #4
    faac:	f017 fee7 	bl	2787e <z_log_msg_runtime_create.constprop.0>
			data_addr += gc_ate.offset;
    fab0:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    fab4:	ea4f 431a 	mov.w	r3, sl, lsr #16
    fab8:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    faba:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fabc:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    fabe:	a80e      	add	r0, sp, #56	; 0x38
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fac0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			nvs_ate_crc8_update(&gc_ate);
    fac4:	f017 fead 	bl	27822 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    fac8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    faca:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    face:	681e      	ldr	r6, [r3, #0]
    fad0:	4276      	negs	r6, r6
	block_size =
    fad2:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    fad6:	f1b9 0f00 	cmp.w	r9, #0
    fada:	d10e      	bne.n	fafa <nvs_gc+0x146>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    fadc:	4620      	mov	r0, r4
    fade:	a90e      	add	r1, sp, #56	; 0x38
    fae0:	f017 ffa3 	bl	27a2a <nvs_flash_ate_wrt>
			if (rc) {
    fae4:	4602      	mov	r2, r0
    fae6:	2800      	cmp	r0, #0
    fae8:	d0b2      	beq.n	fa50 <nvs_gc+0x9c>
    faea:	e03e      	b.n	fb6a <nvs_gc+0x1b6>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    faec:	4620      	mov	r0, r4
    faee:	a910      	add	r1, sp, #64	; 0x40
    faf0:	f017 fedf 	bl	278b2 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    faf4:	2800      	cmp	r0, #0
    faf6:	d0c0      	beq.n	fa7a <nvs_gc+0xc6>
    faf8:	e7c3      	b.n	fa82 <nvs_gc+0xce>
		bytes_to_copy = MIN(block_size, len);
    fafa:	454e      	cmp	r6, r9
    fafc:	46b0      	mov	r8, r6
    fafe:	bf28      	it	cs
    fb00:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    fb02:	aa12      	add	r2, sp, #72	; 0x48
    fb04:	4643      	mov	r3, r8
    fb06:	4639      	mov	r1, r7
    fb08:	4620      	mov	r0, r4
    fb0a:	f017 fe45 	bl	27798 <nvs_flash_rd>
		if (rc) {
    fb0e:	4602      	mov	r2, r0
    fb10:	bb58      	cbnz	r0, fb6a <nvs_gc+0x1b6>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    fb12:	4643      	mov	r3, r8
    fb14:	68a1      	ldr	r1, [r4, #8]
    fb16:	aa12      	add	r2, sp, #72	; 0x48
    fb18:	4620      	mov	r0, r4
    fb1a:	f017 ff4c 	bl	279b6 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    fb1e:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    fb20:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    fb22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fb24:	f017 febb 	bl	2789e <nvs_al_size.isra.0>
    fb28:	68a3      	ldr	r3, [r4, #8]
    fb2a:	4403      	add	r3, r0
    fb2c:	60a3      	str	r3, [r4, #8]
		if (rc) {
    fb2e:	b9e2      	cbnz	r2, fb6a <nvs_gc+0x1b6>
		len -= bytes_to_copy;
    fb30:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
    fb34:	4447      	add	r7, r8
    fb36:	e7ce      	b.n	fad6 <nvs_gc+0x122>
		rc = nvs_add_gc_done_ate(fs);
    fb38:	4620      	mov	r0, r4
    fb3a:	f7ff ff0f 	bl	f95c <nvs_add_gc_done_ate>
		if (rc) {
    fb3e:	4602      	mov	r2, r0
    fb40:	2800      	cmp	r0, #0
    fb42:	f43f af69 	beq.w	fa18 <nvs_gc+0x64>
    fb46:	e010      	b.n	fb6a <nvs_gc+0x1b6>
	stop_addr = gc_addr - ate_size;
    fb48:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fb4a:	4620      	mov	r0, r4
    fb4c:	a90c      	add	r1, sp, #48	; 0x30
	stop_addr = gc_addr - ate_size;
    fb4e:	9307      	str	r3, [sp, #28]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fb50:	f017 fec9 	bl	278e6 <nvs_close_ate_valid>
    fb54:	2800      	cmp	r0, #0
    fb56:	f47f af65 	bne.w	fa24 <nvs_gc+0x70>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    fb5a:	4620      	mov	r0, r4
    fb5c:	a90a      	add	r1, sp, #40	; 0x28
    fb5e:	f7ff feb5 	bl	f8cc <nvs_recover_last_ate>
		if (rc) {
    fb62:	4602      	mov	r2, r0
    fb64:	2800      	cmp	r0, #0
    fb66:	f43f af63 	beq.w	fa30 <nvs_gc+0x7c>
		return rc;
	}
	return 0;
}
    fb6a:	4610      	mov	r0, r2
    fb6c:	b01b      	add	sp, #108	; 0x6c
    fb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb72:	bf00      	nop
    fb74:	0002fb7e 	.word	0x0002fb7e
    fb78:	0002d6bc 	.word	0x0002d6bc
    fb7c:	0002fa3c 	.word	0x0002fa3c

0000fb80 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    fb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb84:	4604      	mov	r4, r0
    fb86:	b08e      	sub	sp, #56	; 0x38

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    fb88:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    fb8c:	4638      	mov	r0, r7
    fb8e:	f01c f8ad 	bl	2bcec <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    fb92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    fb94:	6883      	ldr	r3, [r0, #8]
    fb96:	68db      	ldr	r3, [r3, #12]
    fb98:	4798      	blx	r3
    fb9a:	4603      	mov	r3, r0
    fb9c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    fb9e:	b930      	cbnz	r0, fbae <nvs_mount+0x2e>
		LOG_ERR("Could not obtain flash parameters");
    fba0:	4a90      	ldr	r2, [pc, #576]	; (fde4 <nvs_mount+0x264>)
    fba2:	9000      	str	r0, [sp, #0]
    fba4:	e9cd 0201 	strd	r0, r2, [sp, #4]
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
    fba8:	2201      	movs	r2, #1
    fbaa:	498f      	ldr	r1, [pc, #572]	; (fde8 <nvs_mount+0x268>)
    fbac:	e00f      	b.n	fbce <nvs_mount+0x4e>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    fbae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    fbb0:	6883      	ldr	r3, [r0, #8]
    fbb2:	68db      	ldr	r3, [r3, #12]
    fbb4:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    fbb6:	6803      	ldr	r3, [r0, #0]
    fbb8:	3b01      	subs	r3, #1
    fbba:	2b1f      	cmp	r3, #31
    fbbc:	d90f      	bls.n	fbde <nvs_mount+0x5e>
		LOG_ERR("Unsupported write block size");
    fbbe:	4b8b      	ldr	r3, [pc, #556]	; (fdec <nvs_mount+0x26c>)
    fbc0:	9302      	str	r3, [sp, #8]
    fbc2:	2300      	movs	r3, #0
    fbc4:	2201      	movs	r2, #1
    fbc6:	4618      	mov	r0, r3
    fbc8:	e9cd 3300 	strd	r3, r3, [sp]
    fbcc:	4986      	ldr	r1, [pc, #536]	; (fde8 <nvs_mount+0x268>)
    fbce:	f017 fe56 	bl	2787e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    fbd2:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    fbd6:	4628      	mov	r0, r5
    fbd8:	b00e      	add	sp, #56	; 0x38
    fbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    fbde:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fbe0:	6821      	ldr	r1, [r4, #0]
    fbe2:	aa0b      	add	r2, sp, #44	; 0x2c
    fbe4:	f01a fec7 	bl	2a976 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    fbe8:	b108      	cbz	r0, fbee <nvs_mount+0x6e>
		LOG_ERR("Unable to get page info");
    fbea:	4b81      	ldr	r3, [pc, #516]	; (fdf0 <nvs_mount+0x270>)
    fbec:	e7e8      	b.n	fbc0 <nvs_mount+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    fbee:	89a5      	ldrh	r5, [r4, #12]
    fbf0:	b12d      	cbz	r5, fbfe <nvs_mount+0x7e>
    fbf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fbf4:	fbb5 f2f3 	udiv	r2, r5, r3
    fbf8:	fb03 5512 	mls	r5, r3, r2, r5
    fbfc:	b10d      	cbz	r5, fc02 <nvs_mount+0x82>
		LOG_ERR("Invalid sector size");
    fbfe:	4b7d      	ldr	r3, [pc, #500]	; (fdf4 <nvs_mount+0x274>)
    fc00:	e7de      	b.n	fbc0 <nvs_mount+0x40>
	if (fs->sector_count < 2) {
    fc02:	89e3      	ldrh	r3, [r4, #14]
    fc04:	2b01      	cmp	r3, #1
    fc06:	d805      	bhi.n	fc14 <nvs_mount+0x94>
		LOG_ERR("Configuration error - sector count");
    fc08:	4b7b      	ldr	r3, [pc, #492]	; (fdf8 <nvs_mount+0x278>)
    fc0a:	9500      	str	r5, [sp, #0]
    fc0c:	e9cd 5301 	strd	r5, r3, [sp, #4]
    fc10:	462b      	mov	r3, r5
    fc12:	e7c9      	b.n	fba8 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    fc14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    fc16:	9506      	str	r5, [sp, #24]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    fc18:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    fc1c:	f04f 33ff 	mov.w	r3, #4294967295
    fc20:	f04f 32ff 	mov.w	r2, #4294967295
    fc24:	4638      	mov	r0, r7
    fc26:	f010 febd 	bl	209a4 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fc2a:	2108      	movs	r1, #8
    fc2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fc2e:	f017 fe36 	bl	2789e <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    fc32:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fc34:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    fc36:	89e3      	ldrh	r3, [r4, #14]
    fc38:	fa1f fa85 	uxth.w	sl, r5
    fc3c:	4553      	cmp	r3, sl
    fc3e:	d808      	bhi.n	fc52 <nvs_mount+0xd2>
	if (closed_sectors == fs->sector_count) {
    fc40:	89e3      	ldrh	r3, [r4, #14]
    fc42:	4543      	cmp	r3, r8
    fc44:	d123      	bne.n	fc8e <nvs_mount+0x10e>
	return z_impl_k_mutex_unlock(mutex);
    fc46:	4638      	mov	r0, r7
    fc48:	f010 ff7c 	bl	20b44 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    fc4c:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    fc50:	e7c1      	b.n	fbd6 <nvs_mount+0x56>
		       (uint16_t)(fs->sector_size - ate_size);
    fc52:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    fc54:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    fc56:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    fc58:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fc5c:	464a      	mov	r2, r9
    fc5e:	2308      	movs	r3, #8
    fc60:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    fc62:	9106      	str	r1, [sp, #24]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fc64:	f017 fde6 	bl	27834 <nvs_flash_cmp_const>
		if (rc) {
    fc68:	b178      	cbz	r0, fc8a <nvs_mount+0x10a>
			nvs_sector_advance(fs, &addr);
    fc6a:	4620      	mov	r0, r4
    fc6c:	a906      	add	r1, sp, #24
    fc6e:	f017 fda1 	bl	277b4 <nvs_sector_advance>
			closed_sectors++;
    fc72:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fc76:	2308      	movs	r3, #8
    fc78:	464a      	mov	r2, r9
    fc7a:	4620      	mov	r0, r4
    fc7c:	9906      	ldr	r1, [sp, #24]
			closed_sectors++;
    fc7e:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fc82:	f017 fdd7 	bl	27834 <nvs_flash_cmp_const>
			if (!rc) {
    fc86:	2800      	cmp	r0, #0
    fc88:	d0da      	beq.n	fc40 <nvs_mount+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
    fc8a:	3501      	adds	r5, #1
    fc8c:	e7d3      	b.n	fc36 <nvs_mount+0xb6>
	if (i == fs->sector_count) {
    fc8e:	4553      	cmp	r3, sl
    fc90:	d10b      	bne.n	fcaa <nvs_mount+0x12a>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    fc92:	9906      	ldr	r1, [sp, #24]
    fc94:	2308      	movs	r3, #8
    fc96:	464a      	mov	r2, r9
    fc98:	4620      	mov	r0, r4
    fc9a:	1b89      	subs	r1, r1, r6
    fc9c:	f017 fdca 	bl	27834 <nvs_flash_cmp_const>
		if (!rc) {
    fca0:	b918      	cbnz	r0, fcaa <nvs_mount+0x12a>
			nvs_sector_advance(fs, &addr);
    fca2:	4620      	mov	r0, r4
    fca4:	a906      	add	r1, sp, #24
    fca6:	f017 fd85 	bl	277b4 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    fcaa:	4620      	mov	r0, r4
    fcac:	a906      	add	r1, sp, #24
    fcae:	f7ff fe0d 	bl	f8cc <nvs_recover_last_ate>
	if (rc) {
    fcb2:	4605      	mov	r5, r0
    fcb4:	b118      	cbz	r0, fcbe <nvs_mount+0x13e>
    fcb6:	4638      	mov	r0, r7
    fcb8:	f010 ff44 	bl	20b44 <z_impl_k_mutex_unlock>
	if (rc) {
    fcbc:	e78b      	b.n	fbd6 <nvs_mount+0x56>
	fs->ate_wra = addr;
    fcbe:	9b06      	ldr	r3, [sp, #24]
	fs->data_wra = addr & ADDR_SECT_MASK;
    fcc0:	ea4f 4813 	mov.w	r8, r3, lsr #16
    fcc4:	ea4f 4808 	mov.w	r8, r8, lsl #16
	fs->ate_wra = addr;
    fcc8:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    fcca:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    fcce:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    fcd2:	4299      	cmp	r1, r3
    fcd4:	d30f      	bcc.n	fcf6 <nvs_mount+0x176>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fcd6:	2308      	movs	r3, #8
    fcd8:	4620      	mov	r0, r4
    fcda:	aa07      	add	r2, sp, #28
    fcdc:	f017 fd5c 	bl	27798 <nvs_flash_rd>
		if (rc) {
    fce0:	4605      	mov	r5, r0
    fce2:	2800      	cmp	r0, #0
    fce4:	d1e7      	bne.n	fcb6 <nvs_mount+0x136>
    fce6:	ab07      	add	r3, sp, #28
		if (data8[i] != value) {
    fce8:	f813 2b01 	ldrb.w	r2, [r3], #1
    fcec:	4591      	cmp	r9, r2
    fcee:	d143      	bne.n	fd78 <nvs_mount+0x1f8>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fcf0:	3501      	adds	r5, #1
    fcf2:	2d08      	cmp	r5, #8
    fcf4:	d1f8      	bne.n	fce8 <nvs_mount+0x168>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fcf6:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    fcf8:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fcfa:	0c1b      	lsrs	r3, r3, #16
    fcfc:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    fcfe:	a906      	add	r1, sp, #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
    fd00:	9306      	str	r3, [sp, #24]
	nvs_sector_advance(fs, &addr);
    fd02:	f017 fd57 	bl	277b4 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    fd06:	464a      	mov	r2, r9
    fd08:	4620      	mov	r0, r4
    fd0a:	89a3      	ldrh	r3, [r4, #12]
    fd0c:	9906      	ldr	r1, [sp, #24]
    fd0e:	f017 fd91 	bl	27834 <nvs_flash_cmp_const>
	if (rc < 0) {
    fd12:	1e05      	subs	r5, r0, #0
    fd14:	dbcf      	blt.n	fcb6 <nvs_mount+0x136>
		addr = fs->ate_wra + ate_size;
    fd16:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    fd18:	f000 8082 	beq.w	fe20 <nvs_mount+0x2a0>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    fd1c:	f64f 79ff 	movw	r9, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    fd20:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    fd24:	89a3      	ldrh	r3, [r4, #12]
    fd26:	fa1f f288 	uxth.w	r2, r8
    fd2a:	1b9b      	subs	r3, r3, r6
    fd2c:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    fd2e:	f8cd 8018 	str.w	r8, [sp, #24]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    fd32:	d33d      	bcc.n	fdb0 <nvs_mount+0x230>
		LOG_INF("No GC Done marker found: restarting gc");
    fd34:	4b31      	ldr	r3, [pc, #196]	; (fdfc <nvs_mount+0x27c>)
    fd36:	2203      	movs	r2, #3
    fd38:	9302      	str	r3, [sp, #8]
    fd3a:	2300      	movs	r3, #0
    fd3c:	492a      	ldr	r1, [pc, #168]	; (fde8 <nvs_mount+0x268>)
    fd3e:	4618      	mov	r0, r3
    fd40:	e9cd 3300 	strd	r3, r3, [sp]
    fd44:	f017 fd9b 	bl	2787e <z_log_msg_runtime_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    fd48:	4620      	mov	r0, r4
    fd4a:	6861      	ldr	r1, [r4, #4]
    fd4c:	f7ff fd8a 	bl	f864 <nvs_flash_erase_sector>
		if (rc) {
    fd50:	4605      	mov	r5, r0
    fd52:	2800      	cmp	r0, #0
    fd54:	d1af      	bne.n	fcb6 <nvs_mount+0x136>
		fs->ate_wra &= ADDR_SECT_MASK;
    fd56:	6863      	ldr	r3, [r4, #4]
    fd58:	4a29      	ldr	r2, [pc, #164]	; (fe00 <nvs_mount+0x280>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    fd5a:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    fd5c:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    fd5e:	440b      	add	r3, r1
    fd60:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    fd64:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    fd66:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    fd68:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    fd6a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    fd6c:	f7ff fe22 	bl	f9b4 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    fd70:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fd72:	2d00      	cmp	r5, #0
    fd74:	d070      	beq.n	fe58 <nvs_mount+0x2d8>
    fd76:	e79e      	b.n	fcb6 <nvs_mount+0x136>
		if (nvs_ate_valid(fs, &last_ate)) {
    fd78:	4620      	mov	r0, r4
    fd7a:	a907      	add	r1, sp, #28
    fd7c:	f017 fd99 	bl	278b2 <nvs_ate_valid>
    fd80:	6862      	ldr	r2, [r4, #4]
    fd82:	b910      	cbnz	r0, fd8a <nvs_mount+0x20a>
		fs->ate_wra -= ate_size;
    fd84:	1b92      	subs	r2, r2, r6
    fd86:	6062      	str	r2, [r4, #4]
    fd88:	e7a1      	b.n	fcce <nvs_mount+0x14e>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fd8a:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    fd8e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    fd92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    fd94:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fd98:	4429      	add	r1, r5
    fd9a:	f017 fd80 	bl	2789e <nvs_al_size.isra.0>
    fd9e:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    fda0:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    fda2:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    fda4:	d1ee      	bne.n	fd84 <nvs_mount+0x204>
    fda6:	2d00      	cmp	r5, #0
    fda8:	d0ec      	beq.n	fd84 <nvs_mount+0x204>
				rc = -ESPIPE;
    fdaa:	f06f 051c 	mvn.w	r5, #28
    fdae:	e090      	b.n	fed2 <nvs_mount+0x352>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fdb0:	2308      	movs	r3, #8
    fdb2:	4641      	mov	r1, r8
    fdb4:	4620      	mov	r0, r4
    fdb6:	aa09      	add	r2, sp, #36	; 0x24
    fdb8:	f017 fcee 	bl	27798 <nvs_flash_rd>
			if (rc) {
    fdbc:	4605      	mov	r5, r0
    fdbe:	2800      	cmp	r0, #0
    fdc0:	f47f af79 	bne.w	fcb6 <nvs_mount+0x136>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    fdc4:	4620      	mov	r0, r4
    fdc6:	a909      	add	r1, sp, #36	; 0x24
    fdc8:	f017 fd73 	bl	278b2 <nvs_ate_valid>
    fdcc:	b138      	cbz	r0, fdde <nvs_mount+0x25e>
    fdce:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    fdd2:	454b      	cmp	r3, r9
    fdd4:	d103      	bne.n	fdde <nvs_mount+0x25e>
			    (gc_done_ate.id == 0xffff) &&
    fdd6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fdda:	2b00      	cmp	r3, #0
    fddc:	d07f      	beq.n	fede <nvs_mount+0x35e>
			addr += ate_size;
    fdde:	44b0      	add	r8, r6
    fde0:	e7a0      	b.n	fd24 <nvs_mount+0x1a4>
    fde2:	bf00      	nop
    fde4:	0002fa66 	.word	0x0002fa66
    fde8:	0002d6bc 	.word	0x0002d6bc
    fdec:	0002fa88 	.word	0x0002fa88
    fdf0:	0002faa5 	.word	0x0002faa5
    fdf4:	0002fabd 	.word	0x0002fabd
    fdf8:	0002fad1 	.word	0x0002fad1
    fdfc:	0002fb2e 	.word	0x0002fb2e
    fe00:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    fe04:	464a      	mov	r2, r9
    fe06:	4620      	mov	r0, r4
    fe08:	1a5b      	subs	r3, r3, r1
    fe0a:	f017 fd13 	bl	27834 <nvs_flash_cmp_const>
		if (rc < 0) {
    fe0e:	1e05      	subs	r5, r0, #0
    fe10:	f6ff af51 	blt.w	fcb6 <nvs_mount+0x136>
		if (!rc) {
    fe14:	d008      	beq.n	fe28 <nvs_mount+0x2a8>
		fs->data_wra += fs->flash_parameters->write_block_size;
    fe16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    fe18:	68a3      	ldr	r3, [r4, #8]
    fe1a:	6812      	ldr	r2, [r2, #0]
    fe1c:	4413      	add	r3, r2
    fe1e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    fe20:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    fe24:	428b      	cmp	r3, r1
    fe26:	d8ed      	bhi.n	fe04 <nvs_mount+0x284>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    fe28:	6861      	ldr	r1, [r4, #4]
    fe2a:	89a3      	ldrh	r3, [r4, #12]
    fe2c:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    fe30:	429a      	cmp	r2, r3
    fe32:	d19e      	bne.n	fd72 <nvs_mount+0x1f2>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    fe34:	f8df 80d4 	ldr.w	r8, [pc, #212]	; ff0c <nvs_mount+0x38c>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    fe38:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    fe3a:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    fe3e:	429a      	cmp	r2, r3
    fe40:	d097      	beq.n	fd72 <nvs_mount+0x1f2>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    fe42:	4620      	mov	r0, r4
    fe44:	f7ff fd0e 	bl	f864 <nvs_flash_erase_sector>
		if (rc) {
    fe48:	4605      	mov	r5, r0
    fe4a:	2800      	cmp	r0, #0
    fe4c:	f47f af33 	bne.w	fcb6 <nvs_mount+0x136>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    fe50:	6863      	ldr	r3, [r4, #4]
    fe52:	ea03 0308 	and.w	r3, r3, r8
    fe56:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    fe58:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fe5a:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    fe5c:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    fe60:	429a      	cmp	r2, r3
    fe62:	d032      	beq.n	feca <nvs_mount+0x34a>
    fe64:	4638      	mov	r0, r7
    fe66:	f010 fe6d 	bl	20b44 <z_impl_k_mutex_unlock>
	fs->ready = true;
    fe6a:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    fe6c:	2500      	movs	r5, #0
	fs->ready = true;
    fe6e:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    fe70:	89a3      	ldrh	r3, [r4, #12]
    fe72:	4628      	mov	r0, r5
    fe74:	9304      	str	r3, [sp, #16]
    fe76:	89e3      	ldrh	r3, [r4, #14]
    fe78:	2203      	movs	r2, #3
    fe7a:	9303      	str	r3, [sp, #12]
    fe7c:	4b24      	ldr	r3, [pc, #144]	; (ff10 <nvs_mount+0x390>)
    fe7e:	e9cd 5500 	strd	r5, r5, [sp]
    fe82:	9302      	str	r3, [sp, #8]
    fe84:	4923      	ldr	r1, [pc, #140]	; (ff14 <nvs_mount+0x394>)
    fe86:	462b      	mov	r3, r5
    fe88:	f017 fcf9 	bl	2787e <z_log_msg_runtime_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
    fe8c:	6863      	ldr	r3, [r4, #4]
    fe8e:	4628      	mov	r0, r5
    fe90:	b29a      	uxth	r2, r3
    fe92:	0c1b      	lsrs	r3, r3, #16
    fe94:	9303      	str	r3, [sp, #12]
    fe96:	4b20      	ldr	r3, [pc, #128]	; (ff18 <nvs_mount+0x398>)
    fe98:	9204      	str	r2, [sp, #16]
    fe9a:	e9cd 5301 	strd	r5, r3, [sp, #4]
    fe9e:	2203      	movs	r2, #3
    fea0:	462b      	mov	r3, r5
    fea2:	491c      	ldr	r1, [pc, #112]	; (ff14 <nvs_mount+0x394>)
    fea4:	9500      	str	r5, [sp, #0]
    fea6:	f017 fcea 	bl	2787e <z_log_msg_runtime_create.constprop.0>
	LOG_INF("data wra: %d, %x",
    feaa:	68a3      	ldr	r3, [r4, #8]
    feac:	4628      	mov	r0, r5
    feae:	b29a      	uxth	r2, r3
    feb0:	0c1b      	lsrs	r3, r3, #16
    feb2:	9303      	str	r3, [sp, #12]
    feb4:	4b19      	ldr	r3, [pc, #100]	; (ff1c <nvs_mount+0x39c>)
    feb6:	9204      	str	r2, [sp, #16]
    feb8:	e9cd 5301 	strd	r5, r3, [sp, #4]
    febc:	2203      	movs	r2, #3
    febe:	462b      	mov	r3, r5
    fec0:	4914      	ldr	r1, [pc, #80]	; (ff14 <nvs_mount+0x394>)
    fec2:	9500      	str	r5, [sp, #0]
    fec4:	f017 fcdb 	bl	2787e <z_log_msg_runtime_create.constprop.0>
	return 0;
    fec8:	e685      	b.n	fbd6 <nvs_mount+0x56>
		rc = nvs_add_gc_done_ate(fs);
    feca:	4620      	mov	r0, r4
    fecc:	f7ff fd46 	bl	f95c <nvs_add_gc_done_ate>
    fed0:	4605      	mov	r5, r0
    fed2:	4638      	mov	r0, r7
    fed4:	f010 fe36 	bl	20b44 <z_impl_k_mutex_unlock>
	if (rc) {
    fed8:	2d00      	cmp	r5, #0
    feda:	d0c6      	beq.n	fe6a <nvs_mount+0x2ea>
    fedc:	e67b      	b.n	fbd6 <nvs_mount+0x56>
			LOG_INF("GC Done marker found");
    fede:	4b10      	ldr	r3, [pc, #64]	; (ff20 <nvs_mount+0x3a0>)
    fee0:	2203      	movs	r2, #3
    fee2:	4628      	mov	r0, r5
    fee4:	e9cd 5301 	strd	r5, r3, [sp, #4]
    fee8:	490a      	ldr	r1, [pc, #40]	; (ff14 <nvs_mount+0x394>)
    feea:	462b      	mov	r3, r5
    feec:	9500      	str	r5, [sp, #0]
    feee:	f017 fcc6 	bl	2787e <z_log_msg_runtime_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    fef2:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    fef4:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    fef6:	0c1b      	lsrs	r3, r3, #16
    fef8:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    fefa:	a906      	add	r1, sp, #24
			addr = fs->ate_wra & ADDR_SECT_MASK;
    fefc:	9306      	str	r3, [sp, #24]
			nvs_sector_advance(fs, &addr);
    fefe:	f017 fc59 	bl	277b4 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    ff02:	4620      	mov	r0, r4
    ff04:	9906      	ldr	r1, [sp, #24]
    ff06:	f7ff fcad 	bl	f864 <nvs_flash_erase_sector>
    ff0a:	e731      	b.n	fd70 <nvs_mount+0x1f0>
    ff0c:	ffff0000 	.word	0xffff0000
    ff10:	0002faf4 	.word	0x0002faf4
    ff14:	0002d6bc 	.word	0x0002d6bc
    ff18:	0002fb0b 	.word	0x0002fb0b
    ff1c:	0002fb1d 	.word	0x0002fb1d
    ff20:	0002fb55 	.word	0x0002fb55

0000ff24 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    ff24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff28:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    ff2a:	7c03      	ldrb	r3, [r0, #16]
{
    ff2c:	4604      	mov	r4, r0
    ff2e:	4689      	mov	r9, r1
    ff30:	4690      	mov	r8, r2
    ff32:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    ff34:	b973      	cbnz	r3, ff54 <nvs_write+0x30>
		LOG_ERR("NVS not initialized");
    ff36:	4a66      	ldr	r2, [pc, #408]	; (100d0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd0>)
    ff38:	4618      	mov	r0, r3
    ff3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
    ff3e:	4965      	ldr	r1, [pc, #404]	; (100d4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd4>)
    ff40:	2201      	movs	r2, #1
    ff42:	9300      	str	r3, [sp, #0]
    ff44:	f017 fc9b 	bl	2787e <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
    ff48:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    ff4c:	4630      	mov	r0, r6
    ff4e:	b00d      	add	sp, #52	; 0x34
    ff50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ff54:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    ff56:	2108      	movs	r1, #8
    ff58:	4610      	mov	r0, r2
    ff5a:	f017 fca0 	bl	2789e <nvs_al_size.isra.0>
    ff5e:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    ff60:	4629      	mov	r1, r5
    ff62:	4610      	mov	r0, r2
    ff64:	f017 fc9b 	bl	2789e <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    ff68:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    ff6a:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    ff6c:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    ff70:	42ab      	cmp	r3, r5
    ff72:	f0c0 80a9 	bcc.w	100c8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc8>
    ff76:	b11d      	cbz	r5, ff80 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
    ff78:	f1b8 0f00 	cmp.w	r8, #0
    ff7c:	f000 80a4 	beq.w	100c8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc8>
	wlk_addr = fs->ate_wra;
    ff80:	6863      	ldr	r3, [r4, #4]
    ff82:	9307      	str	r3, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    ff84:	4620      	mov	r0, r4
    ff86:	aa08      	add	r2, sp, #32
    ff88:	a907      	add	r1, sp, #28
		rd_addr = wlk_addr;
    ff8a:	f8dd b01c 	ldr.w	fp, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    ff8e:	f017 fcc8 	bl	27922 <nvs_prev_ate>
		if (rc) {
    ff92:	4606      	mov	r6, r0
    ff94:	2800      	cmp	r0, #0
    ff96:	d1d9      	bne.n	ff4c <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    ff98:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    ff9c:	454b      	cmp	r3, r9
    ff9e:	d005      	beq.n	ffac <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
    ffa0:	6862      	ldr	r2, [r4, #4]
    ffa2:	9b07      	ldr	r3, [sp, #28]
    ffa4:	429a      	cmp	r2, r3
    ffa6:	d1ed      	bne.n	ff84 <nvs_write+0x60>
		if (len == 0) {
    ffa8:	b9e5      	cbnz	r5, ffe4 <nvs_write+0xc0>
    ffaa:	e7cf      	b.n	ff4c <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    ffac:	4620      	mov	r0, r4
    ffae:	a908      	add	r1, sp, #32
    ffb0:	f017 fc7f 	bl	278b2 <nvs_ate_valid>
    ffb4:	2800      	cmp	r0, #0
    ffb6:	d0f3      	beq.n	ffa0 <nvs_write+0x7c>
		rd_addr += wlk_ate.offset;
    ffb8:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
			if (wlk_ate.len == 0U) {
    ffbc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
		if (len == 0) {
    ffc0:	b175      	cbz	r5, ffe0 <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
    ffc2:	42ab      	cmp	r3, r5
    ffc4:	d10e      	bne.n	ffe4 <nvs_write+0xc0>
		rd_addr &= ADDR_SECT_MASK;
    ffc6:	ea4f 411b 	mov.w	r1, fp, lsr #16
    ffca:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    ffcc:	4401      	add	r1, r0
    ffce:	462b      	mov	r3, r5
    ffd0:	4642      	mov	r2, r8
    ffd2:	4620      	mov	r0, r4
    ffd4:	f017 fbfb 	bl	277ce <nvs_flash_block_cmp>
			if (rc <= 0) {
    ffd8:	2800      	cmp	r0, #0
    ffda:	dc03      	bgt.n	ffe4 <nvs_write+0xc0>
    ffdc:	4606      	mov	r6, r0
    ffde:	e7b5      	b.n	ff4c <nvs_write+0x28>
			if (wlk_ate.len == 0U) {
    ffe0:	2b00      	cmp	r3, #0
    ffe2:	d0b3      	beq.n	ff4c <nvs_write+0x28>
	if (data_size) {
    ffe4:	2f00      	cmp	r7, #0
    ffe6:	d13e      	bne.n	10066 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x66>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    ffe8:	f104 0314 	add.w	r3, r4, #20
    ffec:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
    ffee:	f04f 32ff 	mov.w	r2, #4294967295
    fff2:	f04f 33ff 	mov.w	r3, #4294967295
    fff6:	f104 0014 	add.w	r0, r4, #20
    fffa:	f010 fcd3 	bl	209a4 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    fffe:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 100d8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd8>
		if (gc_count == fs->sector_count) {
   10002:	89e3      	ldrh	r3, [r4, #14]
   10004:	429e      	cmp	r6, r3
   10006:	d05c      	beq.n	100c2 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc2>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   10008:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1000c:	18f9      	adds	r1, r7, r3
   1000e:	428a      	cmp	r2, r1
   10010:	d32c      	bcc.n	1006c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6c>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   10012:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	entry.part = 0xff;
   10016:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   10018:	a80a      	add	r0, sp, #40	; 0x28
	entry.part = 0xff;
   1001a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	entry.id = id;
   1001e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
	entry.len = (uint16_t)len;
   10022:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	nvs_ate_crc8_update(&entry);
   10026:	f017 fbfc 	bl	27822 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1002a:	462b      	mov	r3, r5
   1002c:	4642      	mov	r2, r8
   1002e:	68a1      	ldr	r1, [r4, #8]
   10030:	4620      	mov	r0, r4
   10032:	f017 fcc0 	bl	279b6 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   10036:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   10038:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   1003a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1003c:	f017 fc2f 	bl	2789e <nvs_al_size.isra.0>
   10040:	68a2      	ldr	r2, [r4, #8]
   10042:	4402      	add	r2, r0
   10044:	60a2      	str	r2, [r4, #8]
	if (rc) {
   10046:	f1ba 0f00 	cmp.w	sl, #0
   1004a:	d107      	bne.n	1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>
	rc = nvs_flash_ate_wrt(fs, &entry);
   1004c:	4620      	mov	r0, r4
   1004e:	a90a      	add	r1, sp, #40	; 0x28
   10050:	f017 fceb 	bl	27a2a <nvs_flash_ate_wrt>
	rc = len;
   10054:	2800      	cmp	r0, #0
   10056:	bf14      	ite	ne
   10058:	4682      	movne	sl, r0
   1005a:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   1005c:	9805      	ldr	r0, [sp, #20]
   1005e:	f010 fd71 	bl	20b44 <z_impl_k_mutex_unlock>
	return rc;
   10062:	4656      	mov	r6, sl
   10064:	e772      	b.n	ff4c <nvs_write+0x28>
		required_space = data_size + ate_size;
   10066:	4457      	add	r7, sl
   10068:	b2bf      	uxth	r7, r7
   1006a:	e7bd      	b.n	ffe8 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1006c:	2108      	movs	r1, #8
   1006e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10070:	f017 fc15 	bl	2789e <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   10074:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10078:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	close_ate.len = 0U;
   1007c:	2300      	movs	r3, #0
   1007e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   10082:	1813      	adds	r3, r2, r0
   10084:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	fs->ate_wra += (fs->sector_size - ate_size);
   10088:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   1008a:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   1008e:	441a      	add	r2, r3
   10090:	1a10      	subs	r0, r2, r0
   10092:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   10094:	a80a      	add	r0, sp, #40	; 0x28
   10096:	f017 fbc4 	bl	27822 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   1009a:	a90a      	add	r1, sp, #40	; 0x28
   1009c:	4620      	mov	r0, r4
   1009e:	f017 fcc4 	bl	27a2a <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   100a2:	4620      	mov	r0, r4
   100a4:	1d21      	adds	r1, r4, #4
   100a6:	f017 fb85 	bl	277b4 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   100aa:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
   100ac:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   100ae:	ea03 030b 	and.w	r3, r3, fp
   100b2:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   100b4:	f7ff fc7e 	bl	f9b4 <nvs_gc>
		if (rc) {
   100b8:	4682      	mov	sl, r0
   100ba:	2800      	cmp	r0, #0
   100bc:	d1ce      	bne.n	1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>
		gc_count++;
   100be:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   100c0:	e79f      	b.n	10002 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2>
			rc = -ENOSPC;
   100c2:	f06f 0a1b 	mvn.w	sl, #27
   100c6:	e7c9      	b.n	1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>
		return -EINVAL;
   100c8:	f06f 0615 	mvn.w	r6, #21
   100cc:	e73e      	b.n	ff4c <nvs_write+0x28>
   100ce:	bf00      	nop
   100d0:	0002fa52 	.word	0x0002fa52
   100d4:	0002d6bc 	.word	0x0002d6bc
   100d8:	ffff0000 	.word	0xffff0000

000100dc <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   100dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100e0:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   100e2:	7c03      	ldrb	r3, [r0, #16]
{
   100e4:	b088      	sub	sp, #32
   100e6:	4604      	mov	r4, r0
   100e8:	460f      	mov	r7, r1
   100ea:	4690      	mov	r8, r2
   100ec:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
   100f0:	b96b      	cbnz	r3, 1010e <nvs_read_hist+0x32>
		LOG_ERR("NVS not initialized");
   100f2:	4a2f      	ldr	r2, [pc, #188]	; (101b0 <nvs_read_hist+0xd4>)
   100f4:	4618      	mov	r0, r3
   100f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   100fa:	492e      	ldr	r1, [pc, #184]	; (101b4 <nvs_read_hist+0xd8>)
   100fc:	2201      	movs	r2, #1
   100fe:	9300      	str	r3, [sp, #0]
   10100:	f017 fbbd 	bl	2787e <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
   10104:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   10108:	b008      	add	sp, #32
   1010a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1010e:	2108      	movs	r1, #8
   10110:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   10112:	f017 fbc4 	bl	2789e <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   10116:	89a3      	ldrh	r3, [r4, #12]
   10118:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   1011c:	42b3      	cmp	r3, r6
   1011e:	d343      	bcc.n	101a8 <nvs_read_hist+0xcc>
	cnt_his = 0U;
   10120:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
   10122:	f8d4 a004 	ldr.w	sl, [r4, #4]
   10126:	f8cd a014 	str.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
   1012a:	454d      	cmp	r5, r9
   1012c:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   1012e:	f8dd a014 	ldr.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
   10132:	d909      	bls.n	10148 <nvs_read_hist+0x6c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   10134:	6863      	ldr	r3, [r4, #4]
   10136:	4553      	cmp	r3, sl
   10138:	d11e      	bne.n	10178 <nvs_read_hist+0x9c>
   1013a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1013e:	42bb      	cmp	r3, r7
   10140:	d01a      	beq.n	10178 <nvs_read_hist+0x9c>
		return -ENOENT;
   10142:	f06f 0001 	mvn.w	r0, #1
   10146:	e7df      	b.n	10108 <nvs_read_hist+0x2c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   10148:	4620      	mov	r0, r4
   1014a:	aa06      	add	r2, sp, #24
   1014c:	a905      	add	r1, sp, #20
   1014e:	f017 fbe8 	bl	27922 <nvs_prev_ate>
		if (rc) {
   10152:	2800      	cmp	r0, #0
   10154:	d1d8      	bne.n	10108 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   10156:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1015a:	42bb      	cmp	r3, r7
   1015c:	d106      	bne.n	1016c <nvs_read_hist+0x90>
   1015e:	4620      	mov	r0, r4
   10160:	a906      	add	r1, sp, #24
   10162:	f017 fba6 	bl	278b2 <nvs_ate_valid>
   10166:	b108      	cbz	r0, 1016c <nvs_read_hist+0x90>
			cnt_his++;
   10168:	3501      	adds	r5, #1
   1016a:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   1016c:	6862      	ldr	r2, [r4, #4]
   1016e:	9b05      	ldr	r3, [sp, #20]
   10170:	429a      	cmp	r2, r3
   10172:	d1da      	bne.n	1012a <nvs_read_hist+0x4e>
		rd_addr = wlk_addr;
   10174:	4651      	mov	r1, sl
   10176:	e7e0      	b.n	1013a <nvs_read_hist+0x5e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   10178:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1017c:	2b00      	cmp	r3, #0
   1017e:	d0e0      	beq.n	10142 <nvs_read_hist+0x66>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   10180:	45a9      	cmp	r9, r5
   10182:	d8de      	bhi.n	10142 <nvs_read_hist+0x66>
	rd_addr += wlk_ate.offset;
   10184:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	rd_addr &= ADDR_SECT_MASK;
   10188:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1018a:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   1018c:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   10190:	bf28      	it	cs
   10192:	4633      	movcs	r3, r6
   10194:	4401      	add	r1, r0
   10196:	4642      	mov	r2, r8
   10198:	4620      	mov	r0, r4
   1019a:	f017 fafd 	bl	27798 <nvs_flash_rd>
	if (rc) {
   1019e:	2800      	cmp	r0, #0
   101a0:	d1b2      	bne.n	10108 <nvs_read_hist+0x2c>
	return wlk_ate.len;
   101a2:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   101a6:	e7af      	b.n	10108 <nvs_read_hist+0x2c>
		return -EINVAL;
   101a8:	f06f 0015 	mvn.w	r0, #21
   101ac:	e7ac      	b.n	10108 <nvs_read_hist+0x2c>
   101ae:	bf00      	nop
   101b0:	0002fa52 	.word	0x0002fa52
   101b4:	0002d6bc 	.word	0x0002d6bc

000101b8 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
   101b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   101ba:	4603      	mov	r3, r0
	const struct ipc_service_backend *backend;

	if (!instance) {
   101bc:	b960      	cbnz	r0, 101d8 <ipc_service_open_instance+0x20>
		LOG_ERR("Invalid instance");
   101be:	4a11      	ldr	r2, [pc, #68]	; (10204 <ipc_service_open_instance+0x4c>)
   101c0:	9000      	str	r0, [sp, #0]
   101c2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   101c6:	4910      	ldr	r1, [pc, #64]	; (10208 <ipc_service_open_instance+0x50>)
   101c8:	2201      	movs	r2, #1
   101ca:	f017 fc46 	bl	27a5a <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   101ce:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
   101d2:	b005      	add	sp, #20
   101d4:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
   101d8:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
   101da:	b95b      	cbnz	r3, 101f4 <ipc_service_open_instance+0x3c>
		LOG_ERR("Invalid backend configuration");
   101dc:	4a0b      	ldr	r2, [pc, #44]	; (1020c <ipc_service_open_instance+0x54>)
   101de:	4618      	mov	r0, r3
   101e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   101e4:	4908      	ldr	r1, [pc, #32]	; (10208 <ipc_service_open_instance+0x50>)
   101e6:	2201      	movs	r2, #1
   101e8:	9300      	str	r3, [sp, #0]
   101ea:	f017 fc36 	bl	27a5a <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   101ee:	f06f 0004 	mvn.w	r0, #4
   101f2:	e7ee      	b.n	101d2 <ipc_service_open_instance+0x1a>
	if (!backend->open_instance) {
   101f4:	681b      	ldr	r3, [r3, #0]
   101f6:	b11b      	cbz	r3, 10200 <ipc_service_open_instance+0x48>
}
   101f8:	b005      	add	sp, #20
   101fa:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
   101fe:	4718      	bx	r3
		return 0;
   10200:	4618      	mov	r0, r3
   10202:	e7e6      	b.n	101d2 <ipc_service_open_instance+0x1a>
   10204:	0002fbb8 	.word	0x0002fbb8
   10208:	0002d6c4 	.word	0x0002d6c4
   1020c:	0002fbc9 	.word	0x0002fbc9

00010210 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
   10210:	b530      	push	{r4, r5, lr}
   10212:	b085      	sub	sp, #20
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
   10214:	b108      	cbz	r0, 1021a <ipc_service_register_endpoint+0xa>
   10216:	b101      	cbz	r1, 1021a <ipc_service_register_endpoint+0xa>
   10218:	b96a      	cbnz	r2, 10236 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
   1021a:	4b13      	ldr	r3, [pc, #76]	; (10268 <ipc_service_register_endpoint+0x58>)
   1021c:	2201      	movs	r2, #1
   1021e:	9302      	str	r3, [sp, #8]
   10220:	2300      	movs	r3, #0
   10222:	4912      	ldr	r1, [pc, #72]	; (1026c <ipc_service_register_endpoint+0x5c>)
   10224:	4618      	mov	r0, r3
   10226:	e9cd 3300 	strd	r3, r3, [sp]
   1022a:	f017 fc16 	bl	27a5a <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1022e:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
   10232:	b005      	add	sp, #20
   10234:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
   10236:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
   10238:	b10c      	cbz	r4, 1023e <ipc_service_register_endpoint+0x2e>
   1023a:	68e5      	ldr	r5, [r4, #12]
   1023c:	b965      	cbnz	r5, 10258 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
   1023e:	4b0c      	ldr	r3, [pc, #48]	; (10270 <ipc_service_register_endpoint+0x60>)
   10240:	2201      	movs	r2, #1
   10242:	9302      	str	r3, [sp, #8]
   10244:	2300      	movs	r3, #0
   10246:	4909      	ldr	r1, [pc, #36]	; (1026c <ipc_service_register_endpoint+0x5c>)
   10248:	4618      	mov	r0, r3
   1024a:	e9cd 3300 	strd	r3, r3, [sp]
   1024e:	f017 fc04 	bl	27a5a <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   10252:	f06f 0004 	mvn.w	r0, #4
   10256:	e7ec      	b.n	10232 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
   10258:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
   1025c:	68e3      	ldr	r3, [r4, #12]
}
   1025e:	b005      	add	sp, #20
   10260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
   10264:	4718      	bx	r3
   10266:	bf00      	nop
   10268:	0002fbe7 	.word	0x0002fbe7
   1026c:	0002d6c4 	.word	0x0002d6c4
   10270:	0002fbc9 	.word	0x0002fbc9

00010274 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
   10274:	b530      	push	{r4, r5, lr}
   10276:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
   10278:	4604      	mov	r4, r0
{
   1027a:	b085      	sub	sp, #20
	if (!ept) {
   1027c:	b960      	cbnz	r0, 10298 <ipc_service_send+0x24>
		LOG_ERR("Invalid endpoint");
   1027e:	4b19      	ldr	r3, [pc, #100]	; (102e4 <ipc_service_send+0x70>)
   10280:	9000      	str	r0, [sp, #0]
   10282:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10286:	2201      	movs	r2, #1
   10288:	4603      	mov	r3, r0
   1028a:	4917      	ldr	r1, [pc, #92]	; (102e8 <ipc_service_send+0x74>)
   1028c:	f017 fbe5 	bl	27a5a <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   10290:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
   10294:	b005      	add	sp, #20
   10296:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
   10298:	6800      	ldr	r0, [r0, #0]
   1029a:	b958      	cbnz	r0, 102b4 <ipc_service_send+0x40>
		LOG_ERR("Endpoint not registered\n");
   1029c:	4b13      	ldr	r3, [pc, #76]	; (102ec <ipc_service_send+0x78>)
   1029e:	9000      	str	r0, [sp, #0]
   102a0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   102a4:	2201      	movs	r2, #1
   102a6:	4603      	mov	r3, r0
   102a8:	490f      	ldr	r1, [pc, #60]	; (102e8 <ipc_service_send+0x74>)
   102aa:	f017 fbd6 	bl	27a5a <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
   102ae:	f06f 0001 	mvn.w	r0, #1
   102b2:	e7ef      	b.n	10294 <ipc_service_send+0x20>
	backend = ept->instance->api;
   102b4:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
   102b6:	b10a      	cbz	r2, 102bc <ipc_service_send+0x48>
   102b8:	6895      	ldr	r5, [r2, #8]
   102ba:	b965      	cbnz	r5, 102d6 <ipc_service_send+0x62>
		LOG_ERR("Invalid backend configuration");
   102bc:	4b0c      	ldr	r3, [pc, #48]	; (102f0 <ipc_service_send+0x7c>)
   102be:	2201      	movs	r2, #1
   102c0:	9302      	str	r3, [sp, #8]
   102c2:	2300      	movs	r3, #0
   102c4:	4908      	ldr	r1, [pc, #32]	; (102e8 <ipc_service_send+0x74>)
   102c6:	4618      	mov	r0, r3
   102c8:	e9cd 3300 	strd	r3, r3, [sp]
   102cc:	f017 fbc5 	bl	27a5a <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   102d0:	f06f 0004 	mvn.w	r0, #4
   102d4:	e7de      	b.n	10294 <ipc_service_send+0x20>
	return backend->send(ept->instance, ept->token, data, len);
   102d6:	460a      	mov	r2, r1
   102d8:	46ac      	mov	ip, r5
   102da:	6861      	ldr	r1, [r4, #4]
}
   102dc:	b005      	add	sp, #20
   102de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
   102e2:	4760      	bx	ip
   102e4:	0002fc13 	.word	0x0002fc13
   102e8:	0002d6c4 	.word	0x0002d6c4
   102ec:	0002fc24 	.word	0x0002fc24
   102f0:	0002fbc9 	.word	0x0002fbc9

000102f4 <shared_memory_prepare>:
__ssp_bos_icheck3(memset, void *, int)
   102f4:	2000      	movs	r0, #0
   102f6:	4b01      	ldr	r3, [pc, #4]	; (102fc <shared_memory_prepare+0x8>)
   102f8:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
   102fa:	4770      	bx	lr
   102fc:	20070000 	.word	0x20070000

00010300 <advertise_ept>:
{
   10300:	b530      	push	{r4, r5, lr}
   10302:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10304:	490e      	ldr	r1, [pc, #56]	; (10340 <advertise_ept+0x40>)
{
   10306:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10308:	9102      	str	r1, [sp, #8]
   1030a:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
   1030e:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10310:	e9cd 3100 	strd	r3, r1, [sp]
   10314:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   10318:	f04f 33ff 	mov.w	r3, #4294967295
   1031c:	4620      	mov	r0, r4
   1031e:	f00f fac5 	bl	1f8ac <rpmsg_create_ept>
	if (err != 0) {
   10322:	b950      	cbnz	r0, 1033a <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
   10324:	2301      	movs	r3, #1
   10326:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
   1032a:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
   1032e:	b123      	cbz	r3, 1033a <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
   10330:	4620      	mov	r0, r4
}
   10332:	b005      	add	sp, #20
   10334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
   10338:	4718      	bx	r3
}
   1033a:	b005      	add	sp, #20
   1033c:	bd30      	pop	{r4, r5, pc}
   1033e:	bf00      	nop
   10340:	00027b6b 	.word	0x00027b6b

00010344 <get_ept>:
{
   10344:	b538      	push	{r3, r4, r5, lr}
   10346:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   10348:	4611      	mov	r1, r2
{
   1034a:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   1034c:	f017 fc0f 	bl	27b6e <get_ept_slot_with_name>
	if (ept != NULL) {
   10350:	4603      	mov	r3, r0
   10352:	b938      	cbnz	r0, 10364 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
   10354:	4628      	mov	r0, r5
   10356:	4904      	ldr	r1, [pc, #16]	; (10368 <get_ept+0x24>)
   10358:	f017 fc09 	bl	27b6e <get_ept_slot_with_name>
   1035c:	4603      	mov	r3, r0
	if (ept != NULL) {
   1035e:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
   10360:	6023      	str	r3, [r4, #0]
}
   10362:	bd38      	pop	{r3, r4, r5, pc}
		return true;
   10364:	2001      	movs	r0, #1
   10366:	e7fb      	b.n	10360 <get_ept+0x1c>
   10368:	00032365 	.word	0x00032365

0001036c <open>:
{
   1036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   10370:	2301      	movs	r3, #1
   10372:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
   10374:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
   10376:	6846      	ldr	r6, [r0, #4]
{
   10378:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
   1037a:	f505 775b 	add.w	r7, r5, #876	; 0x36c
   1037e:	e8d7 2fef 	ldaex	r2, [r7]
   10382:	2a00      	cmp	r2, #0
   10384:	d103      	bne.n	1038e <open+0x22>
   10386:	e8c7 3fe1 	stlex	r1, r3, [r7]
   1038a:	2900      	cmp	r1, #0
   1038c:	d1f7      	bne.n	1037e <open+0x12>
   1038e:	f040 80b8 	bne.w	10502 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
   10392:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   10394:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
   10396:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   10398:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
   1039a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   1039e:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
   103a2:	bf26      	itte	cs
   103a4:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
   103a8:	fab3 f383 	clzcs	r3, r3
		return 0;
   103ac:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
   103ae:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
   103b2:	bf28      	it	cs
   103b4:	f1c3 0320 	rsbcs	r3, r3, #32
   103b8:	3b01      	subs	r3, #1
	if (num_desc == 0) {
   103ba:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
   103bc:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
   103c0:	f000 8099 	beq.w	104f6 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
   103c4:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   103c6:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
   103c8:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
   103ca:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   103cc:	eb02 0244 	add.w	r2, r2, r4, lsl #1
   103d0:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   103d2:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
   103d4:	3209      	adds	r2, #9
   103d6:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
   103da:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
   103dc:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
   103e0:	440a      	add	r2, r1
	return (buf_size * num);
   103e2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   103e4:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
   103e8:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
   103ea:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   103ee:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
   103f2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   103f4:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
   103f6:	eb00 0341 	add.w	r3, r0, r1, lsl #1
   103fa:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
   103fe:	3303      	adds	r3, #3
   10400:	4413      	add	r3, r2
   10402:	f023 0303 	bic.w	r3, r3, #3
   10406:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
   1040a:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
   1040c:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
   10410:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
   10414:	4b3c      	ldr	r3, [pc, #240]	; (10508 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
   10416:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
   10418:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
   1041c:	6831      	ldr	r1, [r6, #0]
   1041e:	f000 fa1d 	bl	1085c <ipc_static_vrings_init>
	if (err != 0) {
   10422:	4604      	mov	r4, r0
   10424:	bb30      	cbnz	r0, 10474 <open+0x108>
	const struct backend_config_t *conf = instance->config;
   10426:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
   1042a:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   1042e:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
   10432:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   10436:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
   10438:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   1043a:	bf08      	it	eq
   1043c:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
   1043e:	f011 f887 	bl	21550 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
   10442:	2300      	movs	r3, #0
   10444:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   10448:	4930      	ldr	r1, [pc, #192]	; (1050c <open+0x1a0>)
   1044a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1044e:	eb01 2180 	add.w	r1, r1, r0, lsl #10
   10452:	9300      	str	r3, [sp, #0]
   10454:	4658      	mov	r0, fp
   10456:	4623      	mov	r3, r4
   10458:	f011 f894 	bl	21584 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
   1045c:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
   10460:	492b      	ldr	r1, [pc, #172]	; (10510 <open+0x1a4>)
   10462:	f010 ffa9 	bl	213b8 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
   10466:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
   1046a:	6883      	ldr	r3, [r0, #8]
   1046c:	685c      	ldr	r4, [r3, #4]
   1046e:	b91c      	cbnz	r4, 10478 <open+0x10c>
		return -ENOSYS;
   10470:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
   10474:	2100      	movs	r1, #0
   10476:	e037      	b.n	104e8 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
   10478:	464b      	mov	r3, r9
   1047a:	4a26      	ldr	r2, [pc, #152]	; (10514 <open+0x1a8>)
   1047c:	f8da 1018 	ldr.w	r1, [sl, #24]
   10480:	47a0      	blx	r4
	if (err != 0) {
   10482:	4604      	mov	r4, r0
   10484:	2800      	cmp	r0, #0
   10486:	d1f5      	bne.n	10474 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
   10488:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
   1048c:	6883      	ldr	r3, [r0, #8]
   1048e:	691b      	ldr	r3, [r3, #16]
   10490:	2b00      	cmp	r3, #0
   10492:	d0ed      	beq.n	10470 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
   10494:	2201      	movs	r2, #1
   10496:	f8da 1018 	ldr.w	r1, [sl, #24]
   1049a:	4798      	blx	r3
	if (err != 0) {
   1049c:	4604      	mov	r4, r0
   1049e:	2800      	cmp	r0, #0
   104a0:	d1e8      	bne.n	10474 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
   104a2:	4b1d      	ldr	r3, [pc, #116]	; (10518 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   104a4:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
   104a6:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
   104aa:	4b1c      	ldr	r3, [pc, #112]	; (1051c <open+0x1b0>)
   104ac:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   104b0:	4b1b      	ldr	r3, [pc, #108]	; (10520 <open+0x1b4>)
   104b2:	9303      	str	r3, [sp, #12]
   104b4:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
   104b8:	9302      	str	r3, [sp, #8]
   104ba:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
   104be:	e9cd 8300 	strd	r8, r3, [sp]
   104c2:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
   104c6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   104c8:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
   104cc:	f000 f98e 	bl	107ec <ipc_rpmsg_init>
	if (err != 0) {
   104d0:	4604      	mov	r4, r0
   104d2:	2800      	cmp	r0, #0
   104d4:	d1ce      	bne.n	10474 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   104d6:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   104da:	f00f fb8b 	bl	1fbf4 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
   104de:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   104e0:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
   104e4:	db0a      	blt.n	104fc <open+0x190>
	atomic_set(&data->state, STATE_INITED);
   104e6:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
   104e8:	4638      	mov	r0, r7
   104ea:	f017 fb75 	bl	27bd8 <atomic_set.isra.0>
}
   104ee:	4620      	mov	r0, r4
   104f0:	b005      	add	sp, #20
   104f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   104f6:	f06f 040b 	mvn.w	r4, #11
   104fa:	e7bb      	b.n	10474 <open+0x108>
		err = -EINVAL;
   104fc:	f06f 0415 	mvn.w	r4, #21
   10500:	e7b8      	b.n	10474 <open+0x108>
		return -EALREADY;
   10502:	f06f 0477 	mvn.w	r4, #119	; 0x77
   10506:	e7f2      	b.n	104ee <open+0x182>
   10508:	00027bc1 	.word	0x00027bc1
   1050c:	2003f918 	.word	0x2003f918
   10510:	00027ba7 	.word	0x00027ba7
   10514:	00027b9b 	.word	0x00027b9b
   10518:	000105e9 	.word	0x000105e9
   1051c:	00027c79 	.word	0x00027c79
   10520:	00027c09 	.word	0x00027c09

00010524 <close>:
{
   10524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10528:	4606      	mov	r6, r0
   1052a:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
   1052e:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
   10530:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
   10534:	f505 775b 	add.w	r7, r5, #876	; 0x36c
   10538:	e8d7 3fef 	ldaex	r3, [r7]
   1053c:	2b02      	cmp	r3, #2
   1053e:	d103      	bne.n	10548 <close+0x24>
   10540:	e8c7 9fe2 	stlex	r2, r9, [r7]
   10544:	2a00      	cmp	r2, #0
   10546:	d1f7      	bne.n	10538 <close+0x14>
   10548:	d149      	bne.n	105de <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
   1054a:	4826      	ldr	r0, [pc, #152]	; (105e4 <close+0xc0>)
   1054c:	f105 0140 	add.w	r1, r5, #64	; 0x40
   10550:	f7f8 ff51 	bl	93f6 <strcmp>
   10554:	b120      	cbz	r0, 10560 <close+0x3c>
		return -EBUSY;
   10556:	f06f 040f 	mvn.w	r4, #15
}
   1055a:	4620      	mov	r0, r4
   1055c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
   10560:	4820      	ldr	r0, [pc, #128]	; (105e4 <close+0xc0>)
   10562:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
   10566:	f7f8 ff46 	bl	93f6 <strcmp>
   1056a:	2800      	cmp	r0, #0
   1056c:	d1f3      	bne.n	10556 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
   1056e:	4628      	mov	r0, r5
   10570:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
   10574:	f017 fbb3 	bl	27cde <ipc_rpmsg_deinit>
	if (err != 0) {
   10578:	4604      	mov	r4, r0
   1057a:	bb70      	cbnz	r0, 105da <close+0xb6>
	const struct backend_config_t *conf = instance->config;
   1057c:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
   1057e:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
   10580:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
   10582:	6883      	ldr	r3, [r0, #8]
   10584:	691b      	ldr	r3, [r3, #16]
   10586:	b333      	cbz	r3, 105d6 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
   10588:	4622      	mov	r2, r4
   1058a:	6989      	ldr	r1, [r1, #24]
   1058c:	4798      	blx	r3
	if (err != 0) {
   1058e:	4604      	mov	r4, r0
   10590:	bb18      	cbnz	r0, 105da <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
   10592:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
   10596:	4649      	mov	r1, r9
   10598:	4630      	mov	r0, r6
   1059a:	f011 f85b 	bl	21654 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
   1059e:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
   105a0:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
   105a4:	f001 fa8e 	bl	11ac4 <z_impl_k_thread_abort>
   105a8:	4630      	mov	r0, r6
   105aa:	f8d8 1000 	ldr.w	r1, [r8]
   105ae:	f017 fbd3 	bl	27d58 <ipc_static_vrings_deinit>
	if (err != 0) {
   105b2:	4604      	mov	r4, r0
   105b4:	b988      	cbnz	r0, 105da <close+0xb6>
   105b6:	4601      	mov	r1, r0
   105b8:	22e8      	movs	r2, #232	; 0xe8
   105ba:	4630      	mov	r0, r6
   105bc:	f01b fdc0 	bl	2c140 <memset>
   105c0:	4621      	mov	r1, r4
   105c2:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   105c6:	4628      	mov	r0, r5
   105c8:	f01b fdba 	bl	2c140 <memset>
	atomic_set(&data->state, STATE_READY);
   105cc:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
   105ce:	4638      	mov	r0, r7
   105d0:	f017 fb02 	bl	27bd8 <atomic_set.isra.0>
	return err;
   105d4:	e7c1      	b.n	1055a <close+0x36>
		return -ENOSYS;
   105d6:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
   105da:	2102      	movs	r1, #2
   105dc:	e7f7      	b.n	105ce <close+0xaa>
		return -EALREADY;
   105de:	f06f 0477 	mvn.w	r4, #119	; 0x77
   105e2:	e7ba      	b.n	1055a <close+0x36>
   105e4:	00032365 	.word	0x00032365

000105e8 <bound_cb>:
{
   105e8:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
   105ea:	4604      	mov	r4, r0
   105ec:	b140      	cbz	r0, 10600 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
   105ee:	2300      	movs	r3, #0
   105f0:	2201      	movs	r2, #1
   105f2:	e9cd 3200 	strd	r3, r2, [sp]
   105f6:	4b07      	ldr	r3, [pc, #28]	; (10614 <bound_cb+0x2c>)
   105f8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   105fc:	f00f f90a 	bl	1f814 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
   10600:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   10602:	681b      	ldr	r3, [r3, #0]
   10604:	b123      	cbz	r3, 10610 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
   10606:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
   10608:	b002      	add	sp, #8
   1060a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
   1060e:	4718      	bx	r3
}
   10610:	b002      	add	sp, #8
   10612:	bd10      	pop	{r4, pc}
   10614:	00032365 	.word	0x00032365

00010618 <send>:
{
   10618:	b513      	push	{r0, r1, r4, lr}
   1061a:	4604      	mov	r4, r0
   1061c:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1061e:	6921      	ldr	r1, [r4, #16]
   10620:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   10624:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   10628:	2902      	cmp	r1, #2
   1062a:	d110      	bne.n	1064e <send+0x36>
	if (len == 0) {
   1062c:	b193      	cbz	r3, 10654 <send+0x3c>
	if (!rpmsg_ept) {
   1062e:	b1a0      	cbz	r0, 1065a <send+0x42>
   10630:	2101      	movs	r1, #1
   10632:	e9cd 3100 	strd	r3, r1, [sp]
   10636:	4613      	mov	r3, r2
   10638:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1063c:	f00f f8ea 	bl	1f814 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
   10640:	4b07      	ldr	r3, [pc, #28]	; (10660 <send+0x48>)
		return -ENOMEM;
   10642:	4298      	cmp	r0, r3
   10644:	bf08      	it	eq
   10646:	f06f 000b 	mvneq.w	r0, #11
}
   1064a:	b002      	add	sp, #8
   1064c:	bd10      	pop	{r4, pc}
		return -EBUSY;
   1064e:	f06f 000f 	mvn.w	r0, #15
   10652:	e7fa      	b.n	1064a <send+0x32>
		return -EBADMSG;
   10654:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   10658:	e7f7      	b.n	1064a <send+0x32>
		return -ENOENT;
   1065a:	f06f 0001 	mvn.w	r0, #1
   1065e:	e7f4      	b.n	1064a <send+0x32>
   10660:	fffff82e 	.word	0xfffff82e

00010664 <register_ept>:
{
   10664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10668:	4688      	mov	r8, r1
   1066a:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
   1066c:	6906      	ldr	r6, [r0, #16]
   1066e:	f506 735b 	add.w	r3, r6, #876	; 0x36c
   10672:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   10676:	2b02      	cmp	r3, #2
   10678:	d15f      	bne.n	1073a <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   1067a:	6813      	ldr	r3, [r2, #0]
   1067c:	b923      	cbnz	r3, 10688 <register_ept+0x24>
		return -EINVAL;
   1067e:	f06f 0015 	mvn.w	r0, #21
}
   10682:	b003      	add	sp, #12
   10684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   10688:	781b      	ldrb	r3, [r3, #0]
   1068a:	2b00      	cmp	r3, #0
   1068c:	d0f7      	beq.n	1067e <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
   1068e:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
   10692:	f1b9 0f00 	cmp.w	r9, #0
   10696:	d133      	bne.n	10700 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   10698:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
   1069c:	f04f 32ff 	mov.w	r2, #4294967295
   106a0:	f04f 33ff 	mov.w	r3, #4294967295
   106a4:	4638      	mov	r0, r7
   106a6:	f010 f97d 	bl	209a4 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
   106aa:	4630      	mov	r0, r6
   106ac:	682a      	ldr	r2, [r5, #0]
   106ae:	a901      	add	r1, sp, #4
   106b0:	f7ff fe48 	bl	10344 <get_ept>
	if (rpmsg_ept == NULL) {
   106b4:	9c01      	ldr	r4, [sp, #4]
   106b6:	b91c      	cbnz	r4, 106c0 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
   106b8:	4638      	mov	r0, r7
   106ba:	f017 fa8b 	bl	27bd4 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
   106be:	e7de      	b.n	1067e <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
   106c0:	f105 0308 	add.w	r3, r5, #8
   106c4:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   106c6:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
   106c8:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
   106cc:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
   106ce:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
   106d0:	b160      	cbz	r0, 106ec <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
   106d2:	4638      	mov	r0, r7
   106d4:	f017 fa7e 	bl	27bd4 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
   106d8:	4621      	mov	r1, r4
   106da:	4630      	mov	r0, r6
   106dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   106de:	682a      	ldr	r2, [r5, #0]
   106e0:	f7ff fe0e 	bl	10300 <advertise_ept>
	return 0;
   106e4:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
   106e6:	f8c8 4000 	str.w	r4, [r8]
	return 0;
   106ea:	e7ca      	b.n	10682 <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   106ec:	2220      	movs	r2, #32
   106ee:	6829      	ldr	r1, [r5, #0]
   106f0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   106f4:	f01b fe73 	bl	2c3de <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
   106f8:	4638      	mov	r0, r7
   106fa:	f017 fa6b 	bl	27bd4 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
   106fe:	e7f1      	b.n	106e4 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
   10700:	4630      	mov	r0, r6
   10702:	490f      	ldr	r1, [pc, #60]	; (10740 <register_ept+0xdc>)
   10704:	f017 fa33 	bl	27b6e <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
   10708:	4604      	mov	r4, r0
   1070a:	2800      	cmp	r0, #0
   1070c:	d0b7      	beq.n	1067e <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
   1070e:	f105 0308 	add.w	r3, r5, #8
   10712:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   10714:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
   10716:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
   10718:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
   1071a:	2300      	movs	r3, #0
   1071c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
   10720:	2220      	movs	r2, #32
   10722:	6829      	ldr	r1, [r5, #0]
   10724:	3040      	adds	r0, #64	; 0x40
   10726:	f01b fe5a 	bl	2c3de <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
   1072a:	4622      	mov	r2, r4
   1072c:	2101      	movs	r1, #1
   1072e:	4630      	mov	r0, r6
   10730:	f000 f83e 	bl	107b0 <ipc_rpmsg_register_ept>
	if (err != 0) {
   10734:	2800      	cmp	r0, #0
   10736:	d0d5      	beq.n	106e4 <register_ept+0x80>
   10738:	e7a1      	b.n	1067e <register_ept+0x1a>
		return -EBUSY;
   1073a:	f06f 000f 	mvn.w	r0, #15
   1073e:	e7a0      	b.n	10682 <register_ept+0x1e>
   10740:	00032365 	.word	0x00032365

00010744 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
   10744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10748:	4605      	mov	r5, r0
   1074a:	460e      	mov	r6, r1
   1074c:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1074e:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   10750:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
   10754:	b085      	sub	sp, #20
   10756:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
   1075a:	4621      	mov	r1, r4
   1075c:	4630      	mov	r0, r6
   1075e:	f7f8 fe4a 	bl	93f6 <strcmp>
   10762:	b9e0      	cbnz	r0, 1079e <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10764:	4b11      	ldr	r3, [pc, #68]	; (107ac <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
   10766:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   1076a:	9302      	str	r3, [sp, #8]
   1076c:	f8da 3010 	ldr.w	r3, [sl, #16]
   10770:	4632      	mov	r2, r6
   10772:	e9cd 8300 	strd	r8, r3, [sp]
   10776:	4629      	mov	r1, r5
   10778:	f04f 33ff 	mov.w	r3, #4294967295
   1077c:	4658      	mov	r0, fp
   1077e:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
   10782:	f00f f893 	bl	1f8ac <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
   10786:	b960      	cbnz	r0, 107a2 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
   10788:	2370      	movs	r3, #112	; 0x70
   1078a:	2201      	movs	r2, #1
   1078c:	fb03 9307 	mla	r3, r3, r7, r9
   10790:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
   10794:	f8da 300c 	ldr.w	r3, [sl, #12]
   10798:	b10b      	cbz	r3, 1079e <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
   1079a:	4658      	mov	r0, fp
   1079c:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1079e:	3470      	adds	r4, #112	; 0x70
   107a0:	b117      	cbz	r7, 107a8 <ns_bind_cb+0x64>
			}
		}
	}
}
   107a2:	b005      	add	sp, #20
   107a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   107a8:	2701      	movs	r7, #1
   107aa:	e7d6      	b.n	1075a <ns_bind_cb+0x16>
   107ac:	00027cdb 	.word	0x00027cdb

000107b0 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
   107b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   107b2:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
   107b4:	b190      	cbz	r0, 107dc <ipc_rpmsg_register_ept+0x2c>
   107b6:	b18a      	cbz	r2, 107dc <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
   107b8:	2901      	cmp	r1, #1
   107ba:	d112      	bne.n	107e2 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
   107bc:	4b0a      	ldr	r3, [pc, #40]	; (107e8 <ipc_rpmsg_register_ept+0x38>)
   107be:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   107c2:	9302      	str	r3, [sp, #8]
   107c4:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
   107c8:	3240      	adds	r2, #64	; 0x40
   107ca:	9301      	str	r3, [sp, #4]
   107cc:	f04f 33ff 	mov.w	r3, #4294967295
   107d0:	4620      	mov	r0, r4
   107d2:	9300      	str	r3, [sp, #0]
   107d4:	f00f f86a 	bl	1f8ac <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
   107d8:	b004      	add	sp, #16
   107da:	bd10      	pop	{r4, pc}
		return -EINVAL;
   107dc:	f06f 0015 	mvn.w	r0, #21
   107e0:	e7fa      	b.n	107d8 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
   107e2:	2000      	movs	r0, #0
   107e4:	e7f8      	b.n	107d8 <ipc_rpmsg_register_ept+0x28>
   107e6:	bf00      	nop
   107e8:	00027cdb 	.word	0x00027cdb

000107ec <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
   107ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   107f0:	b087      	sub	sp, #28
   107f2:	460e      	mov	r6, r1
   107f4:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
   107f8:	4614      	mov	r4, r2
   107fa:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
   107fe:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
   10800:	b330      	cbz	r0, 10850 <ipc_rpmsg_init+0x64>
   10802:	b329      	cbz	r1, 10850 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
   10804:	f8df c050 	ldr.w	ip, [pc, #80]	; 10858 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   10808:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
   1080c:	2d00      	cmp	r5, #0
   1080e:	bf08      	it	eq
   10810:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
   10812:	b99e      	cbnz	r6, 1083c <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
   10814:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   10818:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
   1081c:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
   1081e:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   10820:	f01b f9ee 	bl	2bc00 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   10824:	ab03      	add	r3, sp, #12
   10826:	e9cd 4300 	strd	r4, r3, [sp]
   1082a:	462a      	mov	r2, r5
   1082c:	463b      	mov	r3, r7
   1082e:	4641      	mov	r1, r8
   10830:	4648      	mov	r0, r9
   10832:	f00f fa05 	bl	1fc40 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
   10836:	b007      	add	sp, #28
   10838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   1083c:	2200      	movs	r2, #0
   1083e:	4641      	mov	r1, r8
   10840:	920e      	str	r2, [sp, #56]	; 0x38
   10842:	4648      	mov	r0, r9
   10844:	462a      	mov	r2, r5
}
   10846:	b007      	add	sp, #28
   10848:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   1084c:	f00f bb22 	b.w	1fe94 <rpmsg_init_vdev>
		return -EINVAL;
   10850:	f06f 0015 	mvn.w	r0, #21
   10854:	e7ef      	b.n	10836 <ipc_rpmsg_init+0x4a>
   10856:	bf00      	nop
   10858:	00010745 	.word	0x00010745

0001085c <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
   1085c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1085e:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
   10860:	4604      	mov	r4, r0
{
   10862:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
   10864:	2800      	cmp	r0, #0
   10866:	d06f      	beq.n	10948 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
   10868:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
   1086a:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
   1086c:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   1086e:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
   10870:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
   10874:	4f36      	ldr	r7, [pc, #216]	; (10950 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10876:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
   10878:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
   1087c:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10880:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10884:	f04f 33ff 	mov.w	r3, #4294967295
   10888:	9300      	str	r3, [sp, #0]
   1088a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1088c:	f01a fd21 	bl	2b2d2 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
   10890:	4a30      	ldr	r2, [pc, #192]	; (10954 <ipc_static_vrings_init+0xf8>)
   10892:	ab06      	add	r3, sp, #24
   10894:	e892 0003 	ldmia.w	r2, {r0, r1}
   10898:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
   1089c:	4618      	mov	r0, r3
   1089e:	f00e fed9 	bl	1f654 <metal_init>
	if (err != 0) {
   108a2:	4605      	mov	r5, r0
   108a4:	b9d8      	cbnz	r0, 108de <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
   108a6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   108aa:	f00e feb3 	bl	1f614 <metal_register_generic_device>
	if (err != 0) {
   108ae:	4605      	mov	r5, r0
   108b0:	b9a8      	cbnz	r0, 108de <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
   108b2:	4639      	mov	r1, r7
   108b4:	4828      	ldr	r0, [pc, #160]	; (10958 <ipc_static_vrings_init+0xfc>)
   108b6:	aa05      	add	r2, sp, #20
   108b8:	f01a fce3 	bl	2b282 <metal_device_open>
	if (err != 0) {
   108bc:	4605      	mov	r5, r0
   108be:	b970      	cbnz	r0, 108de <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
   108c0:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
   108c2:	689a      	ldr	r2, [r3, #8]
   108c4:	b172      	cbz	r2, 108e4 <ipc_static_vrings_init+0x88>
   108c6:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   108c8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
   108cc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   108d0:	f017 fa34 	bl	27d3c <virtqueue_allocate>
   108d4:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
   108d8:	b930      	cbnz	r0, 108e8 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
   108da:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
   108de:	4628      	mov	r0, r5
   108e0:	b009      	add	sp, #36	; 0x24
   108e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108e4:	4603      	mov	r3, r0
   108e6:	e7ef      	b.n	108c8 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
   108e8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   108ec:	f017 fa26 	bl	27d3c <virtqueue_allocate>
   108f0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
   108f4:	2800      	cmp	r0, #0
   108f6:	d0f0      	beq.n	108da <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   108f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   108fc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   10900:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
   10904:	2304      	movs	r3, #4
   10906:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
   1090a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
   1090e:	2302      	movs	r3, #2
   10910:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
   10912:	4b12      	ldr	r3, [pc, #72]	; (1095c <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   10914:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   10918:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   1091c:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
   10920:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   10924:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
   10928:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
   1092a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   1092e:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   10932:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   10936:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
   1093a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
   1093e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
   10942:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
   10944:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
   10946:	e7ca      	b.n	108de <ipc_static_vrings_init+0x82>
		return -EINVAL;
   10948:	f06f 0515 	mvn.w	r5, #21
   1094c:	e7c7      	b.n	108de <ipc_static_vrings_init+0x82>
   1094e:	bf00      	nop
   10950:	0002fc4e 	.word	0x0002fc4e
   10954:	0002d770 	.word	0x0002d770
   10958:	0002fc58 	.word	0x0002fc58
   1095c:	0002dcdc 	.word	0x0002dcdc

00010960 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10964:	4605      	mov	r5, r0
	__asm__ volatile(
   10966:	f04f 0320 	mov.w	r3, #32
   1096a:	f3ef 8611 	mrs	r6, BASEPRI
   1096e:	f383 8812 	msr	BASEPRI_MAX, r3
   10972:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10976:	4820      	ldr	r0, [pc, #128]	; (109f8 <pm_state_notify+0x98>)
   10978:	f00f ffbe 	bl	208f8 <z_spin_lock_valid>
   1097c:	b968      	cbnz	r0, 1099a <pm_state_notify+0x3a>
   1097e:	2394      	movs	r3, #148	; 0x94
   10980:	4a1e      	ldr	r2, [pc, #120]	; (109fc <pm_state_notify+0x9c>)
   10982:	491f      	ldr	r1, [pc, #124]	; (10a00 <pm_state_notify+0xa0>)
   10984:	481f      	ldr	r0, [pc, #124]	; (10a04 <pm_state_notify+0xa4>)
   10986:	f016 fe34 	bl	275f2 <assert_print>
   1098a:	491b      	ldr	r1, [pc, #108]	; (109f8 <pm_state_notify+0x98>)
   1098c:	481e      	ldr	r0, [pc, #120]	; (10a08 <pm_state_notify+0xa8>)
   1098e:	f016 fe30 	bl	275f2 <assert_print>
   10992:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10994:	4819      	ldr	r0, [pc, #100]	; (109fc <pm_state_notify+0x9c>)
   10996:	f016 fe25 	bl	275e4 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1099a:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
   1099e:	4816      	ldr	r0, [pc, #88]	; (109f8 <pm_state_notify+0x98>)
   109a0:	f00f ffc6 	bl	20930 <z_spin_lock_set_owner>
	return list->head;
   109a4:	4b19      	ldr	r3, [pc, #100]	; (10a0c <pm_state_notify+0xac>)
   109a6:	4f1a      	ldr	r7, [pc, #104]	; (10a10 <pm_state_notify+0xb0>)
   109a8:	681c      	ldr	r4, [r3, #0]
   109aa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 10a14 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   109ae:	b97c      	cbnz	r4, 109d0 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   109b0:	4811      	ldr	r0, [pc, #68]	; (109f8 <pm_state_notify+0x98>)
   109b2:	f00f ffaf 	bl	20914 <z_spin_unlock_valid>
   109b6:	b9c8      	cbnz	r0, 109ec <pm_state_notify+0x8c>
   109b8:	23c2      	movs	r3, #194	; 0xc2
   109ba:	4a10      	ldr	r2, [pc, #64]	; (109fc <pm_state_notify+0x9c>)
   109bc:	4916      	ldr	r1, [pc, #88]	; (10a18 <pm_state_notify+0xb8>)
   109be:	4811      	ldr	r0, [pc, #68]	; (10a04 <pm_state_notify+0xa4>)
   109c0:	f016 fe17 	bl	275f2 <assert_print>
   109c4:	490c      	ldr	r1, [pc, #48]	; (109f8 <pm_state_notify+0x98>)
   109c6:	4815      	ldr	r0, [pc, #84]	; (10a1c <pm_state_notify+0xbc>)
   109c8:	f016 fe13 	bl	275f2 <assert_print>
   109cc:	21c2      	movs	r1, #194	; 0xc2
   109ce:	e7e1      	b.n	10994 <pm_state_notify+0x34>
			callback = notifier->state_exit;
   109d0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   109d4:	2d00      	cmp	r5, #0
   109d6:	bf18      	it	ne
   109d8:	4613      	movne	r3, r2
		if (callback) {
   109da:	b12b      	cbz	r3, 109e8 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   109dc:	f898 2014 	ldrb.w	r2, [r8, #20]
   109e0:	fb09 f202 	mul.w	r2, r9, r2
   109e4:	5cb8      	ldrb	r0, [r7, r2]
   109e6:	4798      	blx	r3
	return node->next;
   109e8:	6824      	ldr	r4, [r4, #0]
   109ea:	e7e0      	b.n	109ae <pm_state_notify+0x4e>
	__asm__ volatile(
   109ec:	f386 8811 	msr	BASEPRI, r6
   109f0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   109f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   109f8:	2002f1a4 	.word	0x2002f1a4
   109fc:	0002f55d 	.word	0x0002f55d
   10a00:	0002f5b6 	.word	0x0002f5b6
   10a04:	0002e715 	.word	0x0002e715
   10a08:	0002f5cb 	.word	0x0002f5cb
   10a0c:	2002f1c4 	.word	0x2002f1c4
   10a10:	2002f1b8 	.word	0x2002f1b8
   10a14:	2002f720 	.word	0x2002f720
   10a18:	0002f58a 	.word	0x0002f58a
   10a1c:	0002f5a1 	.word	0x0002f5a1

00010a20 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10a20:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   10a22:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10a24:	4b16      	ldr	r3, [pc, #88]	; (10a80 <pm_system_resume+0x60>)
   10a26:	7d1c      	ldrb	r4, [r3, #20]
   10a28:	f004 031f 	and.w	r3, r4, #31
   10a2c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10a2e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10a30:	4b14      	ldr	r3, [pc, #80]	; (10a84 <pm_system_resume+0x64>)
   10a32:	0961      	lsrs	r1, r4, #5
   10a34:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10a38:	e8d3 1fef 	ldaex	r1, [r3]
   10a3c:	ea01 0500 	and.w	r5, r1, r0
   10a40:	e8c3 5fe6 	stlex	r6, r5, [r3]
   10a44:	2e00      	cmp	r6, #0
   10a46:	d1f7      	bne.n	10a38 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10a48:	420a      	tst	r2, r1
   10a4a:	d013      	beq.n	10a74 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   10a4c:	4b0e      	ldr	r3, [pc, #56]	; (10a88 <pm_system_resume+0x68>)
   10a4e:	4d0f      	ldr	r5, [pc, #60]	; (10a8c <pm_system_resume+0x6c>)
   10a50:	b18b      	cbz	r3, 10a76 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10a52:	230c      	movs	r3, #12
   10a54:	4363      	muls	r3, r4
   10a56:	18ea      	adds	r2, r5, r3
   10a58:	7851      	ldrb	r1, [r2, #1]
   10a5a:	5ce8      	ldrb	r0, [r5, r3]
   10a5c:	f016 fe0e 	bl	2767c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10a60:	2000      	movs	r0, #0
   10a62:	f7ff ff7d 	bl	10960 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10a66:	230c      	movs	r3, #12
   10a68:	435c      	muls	r4, r3
   10a6a:	2300      	movs	r3, #0
   10a6c:	192a      	adds	r2, r5, r4
   10a6e:	512b      	str	r3, [r5, r4]
   10a70:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10a74:	bd70      	pop	{r4, r5, r6, pc}
   10a76:	f383 8811 	msr	BASEPRI, r3
   10a7a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10a7e:	e7ef      	b.n	10a60 <pm_system_resume+0x40>
   10a80:	2002f720 	.word	0x2002f720
   10a84:	2002f1cc 	.word	0x2002f1cc
   10a88:	0002767d 	.word	0x0002767d
   10a8c:	2002f1b8 	.word	0x2002f1b8

00010a90 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10a94:	4b45      	ldr	r3, [pc, #276]	; (10bac <pm_system_suspend+0x11c>)
{
   10a96:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10a98:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   10a9a:	f04f 0320 	mov.w	r3, #32
   10a9e:	f3ef 8811 	mrs	r8, BASEPRI
   10aa2:	f383 8812 	msr	BASEPRI_MAX, r3
   10aa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10aaa:	4841      	ldr	r0, [pc, #260]	; (10bb0 <pm_system_suspend+0x120>)
   10aac:	f00f ff24 	bl	208f8 <z_spin_lock_valid>
   10ab0:	b968      	cbnz	r0, 10ace <pm_system_suspend+0x3e>
   10ab2:	2394      	movs	r3, #148	; 0x94
   10ab4:	4a3f      	ldr	r2, [pc, #252]	; (10bb4 <pm_system_suspend+0x124>)
   10ab6:	4940      	ldr	r1, [pc, #256]	; (10bb8 <pm_system_suspend+0x128>)
   10ab8:	4840      	ldr	r0, [pc, #256]	; (10bbc <pm_system_suspend+0x12c>)
   10aba:	f016 fd9a 	bl	275f2 <assert_print>
   10abe:	493c      	ldr	r1, [pc, #240]	; (10bb0 <pm_system_suspend+0x120>)
   10ac0:	483f      	ldr	r0, [pc, #252]	; (10bc0 <pm_system_suspend+0x130>)
   10ac2:	f016 fd96 	bl	275f2 <assert_print>
   10ac6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10ac8:	483a      	ldr	r0, [pc, #232]	; (10bb4 <pm_system_suspend+0x124>)
   10aca:	f016 fd8b 	bl	275e4 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   10ace:	240c      	movs	r4, #12
   10ad0:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
   10ad2:	4837      	ldr	r0, [pc, #220]	; (10bb0 <pm_system_suspend+0x120>)
   10ad4:	f00f ff2c 	bl	20930 <z_spin_lock_set_owner>
   10ad8:	4b3a      	ldr	r3, [pc, #232]	; (10bc4 <pm_system_suspend+0x134>)
   10ada:	4e3b      	ldr	r6, [pc, #236]	; (10bc8 <pm_system_suspend+0x138>)
   10adc:	5d19      	ldrb	r1, [r3, r4]
   10ade:	191a      	adds	r2, r3, r4
   10ae0:	b1b9      	cbz	r1, 10b12 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   10ae2:	ca07      	ldmia	r2, {r0, r1, r2}
   10ae4:	eb06 0c04 	add.w	ip, r6, r4
   10ae8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   10aec:	2200      	movs	r2, #0
   10aee:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10af0:	482f      	ldr	r0, [pc, #188]	; (10bb0 <pm_system_suspend+0x120>)
   10af2:	f00f ff0f 	bl	20914 <z_spin_unlock_valid>
   10af6:	4604      	mov	r4, r0
   10af8:	b9b0      	cbnz	r0, 10b28 <pm_system_suspend+0x98>
   10afa:	23c2      	movs	r3, #194	; 0xc2
   10afc:	4a2d      	ldr	r2, [pc, #180]	; (10bb4 <pm_system_suspend+0x124>)
   10afe:	4933      	ldr	r1, [pc, #204]	; (10bcc <pm_system_suspend+0x13c>)
   10b00:	482e      	ldr	r0, [pc, #184]	; (10bbc <pm_system_suspend+0x12c>)
   10b02:	f016 fd76 	bl	275f2 <assert_print>
   10b06:	492a      	ldr	r1, [pc, #168]	; (10bb0 <pm_system_suspend+0x120>)
   10b08:	4831      	ldr	r0, [pc, #196]	; (10bd0 <pm_system_suspend+0x140>)
   10b0a:	f016 fd72 	bl	275f2 <assert_print>
   10b0e:	21c2      	movs	r1, #194	; 0xc2
   10b10:	e7da      	b.n	10ac8 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   10b12:	4639      	mov	r1, r7
   10b14:	4628      	mov	r0, r5
   10b16:	f000 f865 	bl	10be4 <pm_policy_next_state>
		if (info != NULL) {
   10b1a:	2800      	cmp	r0, #0
   10b1c:	d0e8      	beq.n	10af0 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   10b1e:	c807      	ldmia	r0, {r0, r1, r2}
   10b20:	4434      	add	r4, r6
   10b22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10b26:	e7e3      	b.n	10af0 <pm_system_suspend+0x60>
	__asm__ volatile(
   10b28:	f388 8811 	msr	BASEPRI, r8
   10b2c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10b30:	230c      	movs	r3, #12
   10b32:	436b      	muls	r3, r5
   10b34:	18f2      	adds	r2, r6, r3
   10b36:	5cf3      	ldrb	r3, [r6, r3]
   10b38:	b3ab      	cbz	r3, 10ba6 <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10b3a:	1c7b      	adds	r3, r7, #1
   10b3c:	d00f      	beq.n	10b5e <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10b3e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10b42:	2100      	movs	r1, #0
   10b44:	f8d2 e008 	ldr.w	lr, [r2, #8]
   10b48:	4822      	ldr	r0, [pc, #136]	; (10bd4 <pm_system_suspend+0x144>)
   10b4a:	2300      	movs	r3, #0
   10b4c:	fbee 010c 	umlal	r0, r1, lr, ip
   10b50:	4a21      	ldr	r2, [pc, #132]	; (10bd8 <pm_system_suspend+0x148>)
   10b52:	f7f8 f9cd 	bl	8ef0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10b56:	2101      	movs	r1, #1
   10b58:	1a38      	subs	r0, r7, r0
   10b5a:	f012 fbab 	bl	232b4 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10b5e:	f011 fa29 	bl	21fb4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10b62:	2001      	movs	r0, #1
   10b64:	f7ff fefc 	bl	10960 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10b68:	4b1c      	ldr	r3, [pc, #112]	; (10bdc <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10b6a:	096a      	lsrs	r2, r5, #5
   10b6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10b70:	2201      	movs	r2, #1
   10b72:	f005 011f 	and.w	r1, r5, #31
   10b76:	408a      	lsls	r2, r1
   10b78:	e8d3 0fef 	ldaex	r0, [r3]
   10b7c:	4310      	orrs	r0, r2
   10b7e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   10b82:	2900      	cmp	r1, #0
   10b84:	d1f8      	bne.n	10b78 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
   10b86:	4b16      	ldr	r3, [pc, #88]	; (10be0 <pm_system_suspend+0x150>)
   10b88:	b133      	cbz	r3, 10b98 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
   10b8a:	230c      	movs	r3, #12
   10b8c:	436b      	muls	r3, r5
   10b8e:	18f2      	adds	r2, r6, r3
   10b90:	7851      	ldrb	r1, [r2, #1]
   10b92:	5cf0      	ldrb	r0, [r6, r3]
   10b94:	f016 fd66 	bl	27664 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10b98:	f7ff ff42 	bl	10a20 <pm_system_resume>
	k_sched_unlock();
   10b9c:	f011 fa76 	bl	2208c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   10ba0:	4620      	mov	r0, r4
   10ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   10ba6:	461c      	mov	r4, r3
   10ba8:	e7fa      	b.n	10ba0 <pm_system_suspend+0x110>
   10baa:	bf00      	nop
   10bac:	2002f720 	.word	0x2002f720
   10bb0:	2002f1a8 	.word	0x2002f1a8
   10bb4:	0002f55d 	.word	0x0002f55d
   10bb8:	0002f5b6 	.word	0x0002f5b6
   10bbc:	0002e715 	.word	0x0002e715
   10bc0:	0002f5cb 	.word	0x0002f5cb
   10bc4:	2002f1ac 	.word	0x2002f1ac
   10bc8:	2002f1b8 	.word	0x2002f1b8
   10bcc:	0002f58a 	.word	0x0002f58a
   10bd0:	0002f5a1 	.word	0x0002f5a1
   10bd4:	000f423f 	.word	0x000f423f
   10bd8:	000f4240 	.word	0x000f4240
   10bdc:	2002f1cc 	.word	0x2002f1cc
   10be0:	00027665 	.word	0x00027665

00010be4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10be8:	b085      	sub	sp, #20
   10bea:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10bec:	a903      	add	r1, sp, #12
   10bee:	f000 f843 	bl	10c78 <pm_state_cpu_get_all>
   10bf2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10bf6:	4604      	mov	r4, r0
   10bf8:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10bfc:	4b1b      	ldr	r3, [pc, #108]	; (10c6c <pm_policy_next_state+0x88>)
   10bfe:	9d03      	ldr	r5, [sp, #12]
   10c00:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10c04:	1e43      	subs	r3, r0, #1
   10c06:	b21b      	sxth	r3, r3
   10c08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10c0c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10c70 <pm_policy_next_state+0x8c>
   10c10:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10c14:	b924      	cbnz	r4, 10c20 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10c16:	46a1      	mov	r9, r4
}
   10c18:	4648      	mov	r0, r9
   10c1a:	b005      	add	sp, #20
   10c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c20:	46c4      	mov	ip, r8
   10c22:	4659      	mov	r1, fp
   10c24:	6868      	ldr	r0, [r5, #4]
   10c26:	2300      	movs	r3, #0
   10c28:	fbe0 c107 	umlal	ip, r1, r0, r7
   10c2c:	4a11      	ldr	r2, [pc, #68]	; (10c74 <pm_policy_next_state+0x90>)
   10c2e:	4660      	mov	r0, ip
   10c30:	f7f8 f95e 	bl	8ef0 <__aeabi_uldivmod>
   10c34:	46c4      	mov	ip, r8
   10c36:	4659      	mov	r1, fp
   10c38:	9001      	str	r0, [sp, #4]
   10c3a:	68a8      	ldr	r0, [r5, #8]
   10c3c:	2300      	movs	r3, #0
   10c3e:	fbe0 c107 	umlal	ip, r1, r0, r7
   10c42:	4a0c      	ldr	r2, [pc, #48]	; (10c74 <pm_policy_next_state+0x90>)
   10c44:	4660      	mov	r0, ip
   10c46:	f7f8 f953 	bl	8ef0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10c4a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   10c4e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10c50:	d001      	beq.n	10c56 <pm_policy_next_state+0x72>
   10c52:	4582      	cmp	sl, r0
   10c54:	d905      	bls.n	10c62 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   10c56:	1c73      	adds	r3, r6, #1
   10c58:	d0de      	beq.n	10c18 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   10c5a:	9b01      	ldr	r3, [sp, #4]
   10c5c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   10c5e:	42b0      	cmp	r0, r6
   10c60:	d9da      	bls.n	10c18 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10c62:	3c01      	subs	r4, #1
   10c64:	b2a4      	uxth	r4, r4
   10c66:	3d0c      	subs	r5, #12
   10c68:	e7d4      	b.n	10c14 <pm_policy_next_state+0x30>
   10c6a:	bf00      	nop
   10c6c:	20008484 	.word	0x20008484
   10c70:	000f423f 	.word	0x000f423f
   10c74:	000f4240 	.word	0x000f4240

00010c78 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10c78:	b908      	cbnz	r0, 10c7e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   10c7a:	4b02      	ldr	r3, [pc, #8]	; (10c84 <pm_state_cpu_get_all+0xc>)
   10c7c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   10c7e:	2000      	movs	r0, #0
   10c80:	4770      	bx	lr
   10c82:	bf00      	nop
   10c84:	0002dd00 	.word	0x0002dd00

00010c88 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   10c88:	4b03      	ldr	r3, [pc, #12]	; (10c98 <nus_ccc_cfg_changed+0x10>)
   10c8a:	689b      	ldr	r3, [r3, #8]
   10c8c:	b11b      	cbz	r3, 10c96 <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   10c8e:	1e48      	subs	r0, r1, #1
   10c90:	bf18      	it	ne
   10c92:	2001      	movne	r0, #1
   10c94:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   10c96:	4770      	bx	lr
   10c98:	2002f1d0 	.word	0x2002f1d0

00010c9c <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   10c9c:	b510      	push	{r4, lr}
   10c9e:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   10ca0:	4b03      	ldr	r3, [pc, #12]	; (10cb0 <on_receive+0x14>)
{
   10ca2:	4611      	mov	r1, r2
	if (nus_cb.received) {
   10ca4:	681b      	ldr	r3, [r3, #0]
   10ca6:	b10b      	cbz	r3, 10cac <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   10ca8:	4622      	mov	r2, r4
   10caa:	4798      	blx	r3
}
	return len;
}
   10cac:	4620      	mov	r0, r4
   10cae:	bd10      	pop	{r4, pc}
   10cb0:	2002f1d0 	.word	0x2002f1d0

00010cb4 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   10cb4:	4b02      	ldr	r3, [pc, #8]	; (10cc0 <on_sent+0xc>)
   10cb6:	685b      	ldr	r3, [r3, #4]
   10cb8:	b103      	cbz	r3, 10cbc <on_sent+0x8>
		nus_cb.sent(conn);
   10cba:	4718      	bx	r3
	}
}
   10cbc:	4770      	bx	lr
   10cbe:	bf00      	nop
   10cc0:	2002f1d0 	.word	0x2002f1d0

00010cc4 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   10cc4:	b130      	cbz	r0, 10cd4 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   10cc6:	4b04      	ldr	r3, [pc, #16]	; (10cd8 <bt_nus_init+0x14>)
   10cc8:	6802      	ldr	r2, [r0, #0]
   10cca:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   10ccc:	6842      	ldr	r2, [r0, #4]
   10cce:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   10cd0:	6882      	ldr	r2, [r0, #8]
   10cd2:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   10cd4:	2000      	movs	r0, #0
   10cd6:	4770      	bx	lr
   10cd8:	2002f1d0 	.word	0x2002f1d0

00010cdc <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   10cdc:	b570      	push	{r4, r5, r6, lr}
   10cde:	460e      	mov	r6, r1
   10ce0:	4615      	mov	r5, r2
   10ce2:	4604      	mov	r4, r0
   10ce4:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   10ce6:	2100      	movs	r1, #0
   10ce8:	2218      	movs	r2, #24
   10cea:	4668      	mov	r0, sp
   10cec:	f01b fa28 	bl	2c140 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   10cf0:	490b      	ldr	r1, [pc, #44]	; (10d20 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   10cf2:	4b0c      	ldr	r3, [pc, #48]	; (10d24 <bt_nus_send+0x48>)
	params.data = data;
   10cf4:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
   10cf8:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
   10cfc:	9304      	str	r3, [sp, #16]

	if (!conn) {
   10cfe:	b92c      	cbnz	r4, 10d0c <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   10d00:	4669      	mov	r1, sp
   10d02:	4620      	mov	r0, r4
   10d04:	f007 f89a 	bl	17e3c <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   10d08:	b006      	add	sp, #24
   10d0a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   10d0c:	2201      	movs	r2, #1
   10d0e:	4620      	mov	r0, r4
   10d10:	f006 fd5a 	bl	177c8 <bt_gatt_is_subscribed>
   10d14:	2800      	cmp	r0, #0
   10d16:	d1f3      	bne.n	10d00 <bt_nus_send+0x24>
		return -EINVAL;
   10d18:	f06f 0015 	mvn.w	r0, #21
   10d1c:	e7f4      	b.n	10d08 <bt_nus_send+0x2c>
   10d1e:	bf00      	nop
   10d20:	0002dd28 	.word	0x0002dd28
   10d24:	00010cb5 	.word	0x00010cb5

00010d28 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10d28:	4904      	ldr	r1, [pc, #16]	; (10d3c <sub_bytes+0x14>)
   10d2a:	1e43      	subs	r3, r0, #1
   10d2c:	300f      	adds	r0, #15
   10d2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10d32:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   10d34:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   10d36:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10d38:	d1f9      	bne.n	10d2e <sub_bytes+0x6>
	}
}
   10d3a:	4770      	bx	lr
   10d3c:	0002fc6a 	.word	0x0002fc6a

00010d40 <tc_aes128_set_encrypt_key>:
{
   10d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d42:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   10d44:	4e26      	ldr	r6, [pc, #152]	; (10de0 <tc_aes128_set_encrypt_key+0xa0>)
{
   10d46:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10d48:	ad01      	add	r5, sp, #4
{
   10d4a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10d4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10d50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10d54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10d58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   10d5c:	4638      	mov	r0, r7
   10d5e:	2f00      	cmp	r7, #0
   10d60:	d039      	beq.n	10dd6 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   10d62:	2c00      	cmp	r4, #0
   10d64:	d039      	beq.n	10dda <tc_aes128_set_encrypt_key+0x9a>
   10d66:	1f38      	subs	r0, r7, #4
   10d68:	4602      	mov	r2, r0
   10d6a:	4621      	mov	r1, r4
   10d6c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10d6e:	784b      	ldrb	r3, [r1, #1]
   10d70:	780d      	ldrb	r5, [r1, #0]
   10d72:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10d74:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10d78:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   10d7a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10d7c:	432b      	orrs	r3, r5
   10d7e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   10d82:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10d84:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10d88:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   10d8c:	d1ef      	bne.n	10d6e <tc_aes128_set_encrypt_key+0x2e>
   10d8e:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10d90:	4c14      	ldr	r4, [pc, #80]	; (10de4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   10d92:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10d94:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   10d96:	d116      	bne.n	10dc6 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10d98:	f3c3 4207 	ubfx	r2, r3, #16, #8
   10d9c:	5ca5      	ldrb	r5, [r4, r2]
   10d9e:	0e1a      	lsrs	r2, r3, #24
   10da0:	5ca2      	ldrb	r2, [r4, r2]
   10da2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   10da6:	f3c3 2507 	ubfx	r5, r3, #8, #8
   10daa:	5d65      	ldrb	r5, [r4, r5]
   10dac:	b2db      	uxtb	r3, r3
   10dae:	5ce3      	ldrb	r3, [r4, r3]
   10db0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   10db4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   10db8:	f021 0303 	bic.w	r3, r1, #3
   10dbc:	3330      	adds	r3, #48	; 0x30
   10dbe:	446b      	add	r3, sp
   10dc0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   10dc4:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   10dc6:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   10dca:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   10dcc:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   10dce:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   10dd0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   10dd2:	d1de      	bne.n	10d92 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   10dd4:	2001      	movs	r0, #1
}
   10dd6:	b00d      	add	sp, #52	; 0x34
   10dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   10dda:	4620      	mov	r0, r4
   10ddc:	e7fb      	b.n	10dd6 <tc_aes128_set_encrypt_key+0x96>
   10dde:	bf00      	nop
   10de0:	0002d778 	.word	0x0002d778
   10de4:	0002fc6a 	.word	0x0002fc6a

00010de8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   10de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10dec:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10dee:	6803      	ldr	r3, [r0, #0]
{
   10df0:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10df2:	9302      	str	r3, [sp, #8]
   10df4:	6843      	ldr	r3, [r0, #4]
   10df6:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 10fb4 <compress+0x1cc>
   10dfa:	9303      	str	r3, [sp, #12]
   10dfc:	6883      	ldr	r3, [r0, #8]
   10dfe:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   10e02:	9304      	str	r3, [sp, #16]
   10e04:	68c3      	ldr	r3, [r0, #12]
   10e06:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10e08:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10e0a:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10e0e:	9306      	str	r3, [sp, #24]
   10e10:	6943      	ldr	r3, [r0, #20]
   10e12:	9307      	str	r3, [sp, #28]
   10e14:	6983      	ldr	r3, [r0, #24]
   10e16:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   10e1a:	9308      	str	r3, [sp, #32]
   10e1c:	69c3      	ldr	r3, [r0, #28]
   10e1e:	4698      	mov	r8, r3
   10e20:	9309      	str	r3, [sp, #36]	; 0x24
   10e22:	9b08      	ldr	r3, [sp, #32]
   10e24:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   10e26:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   10e28:	ab0c      	add	r3, sp, #48	; 0x30
   10e2a:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10e2c:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   10e30:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   10e32:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10e36:	44a9      	add	r9, r5
   10e38:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   10e3c:	9d00      	ldr	r5, [sp, #0]
   10e3e:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   10e42:	444b      	add	r3, r9
   10e44:	ea25 0502 	bic.w	r5, r5, r2
   10e48:	ea02 090c 	and.w	r9, r2, ip
   10e4c:	ea85 0509 	eor.w	r5, r5, r9
   10e50:	442b      	add	r3, r5
   10e52:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   10e54:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   10e58:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   10e5c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   10e60:	4025      	ands	r5, r4
   10e62:	ea06 090b 	and.w	r9, r6, fp
   10e66:	ea85 0509 	eor.w	r5, r5, r9
   10e6a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   10e6e:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   10e70:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   10e72:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   10e74:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   10e78:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   10e7a:	46de      	mov	lr, fp
   10e7c:	f8dd 8000 	ldr.w	r8, [sp]
   10e80:	f040 8088 	bne.w	10f94 <compress+0x1ac>
   10e84:	f04f 0a10 	mov.w	sl, #16
   10e88:	494b      	ldr	r1, [pc, #300]	; (10fb8 <compress+0x1d0>)
   10e8a:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   10e8c:	4651      	mov	r1, sl
   10e8e:	f10a 0a01 	add.w	sl, sl, #1
   10e92:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10e96:	f00a 070f 	and.w	r7, sl, #15
   10e9a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10e9e:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10ea2:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   10ea6:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   10eaa:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   10eac:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   10eb0:	f101 070e 	add.w	r7, r1, #14
   10eb4:	f007 070f 	and.w	r7, r7, #15
   10eb8:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10ebc:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10ec0:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   10ec2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   10ec6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   10eca:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10ece:	f001 010f 	and.w	r1, r1, #15
   10ed2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   10ed6:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   10eda:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   10ede:	f859 ec40 	ldr.w	lr, [r9, #-64]
   10ee2:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   10ee6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10eea:	4471      	add	r1, lr
		s0 = sigma0(s0);
   10eec:	f8dd e004 	ldr.w	lr, [sp, #4]
   10ef0:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   10ef4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10ef8:	4441      	add	r1, r8
		s1 = sigma1(s1);
   10efa:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10efe:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10f00:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   10f04:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10f08:	ea2c 0705 	bic.w	r7, ip, r5
   10f0c:	ea87 0708 	eor.w	r7, r7, r8
   10f10:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   10f14:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10f18:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   10f1c:	4477      	add	r7, lr
   10f1e:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10f22:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10f26:	4477      	add	r7, lr
   10f28:	440f      	add	r7, r1
   10f2a:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   10f2c:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10f30:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   10f32:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10f36:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   10f3a:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   10f3e:	ea07 0703 	and.w	r7, r7, r3
   10f42:	ea04 0806 	and.w	r8, r4, r6
   10f46:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   10f4a:	ea87 0708 	eor.w	r7, r7, r8
   10f4e:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   10f50:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   10f52:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   10f56:	f8cd c000 	str.w	ip, [sp]
   10f5a:	46b3      	mov	fp, r6
   10f5c:	d122      	bne.n	10fa4 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   10f5e:	9902      	ldr	r1, [sp, #8]
   10f60:	4439      	add	r1, r7
   10f62:	6001      	str	r1, [r0, #0]
   10f64:	9903      	ldr	r1, [sp, #12]
   10f66:	4419      	add	r1, r3
   10f68:	9b04      	ldr	r3, [sp, #16]
   10f6a:	6041      	str	r1, [r0, #4]
   10f6c:	4423      	add	r3, r4
   10f6e:	6083      	str	r3, [r0, #8]
   10f70:	9b05      	ldr	r3, [sp, #20]
   10f72:	4433      	add	r3, r6
   10f74:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   10f76:	9b06      	ldr	r3, [sp, #24]
   10f78:	4473      	add	r3, lr
   10f7a:	6103      	str	r3, [r0, #16]
   10f7c:	9b07      	ldr	r3, [sp, #28]
   10f7e:	442b      	add	r3, r5
   10f80:	6143      	str	r3, [r0, #20]
   10f82:	9b08      	ldr	r3, [sp, #32]
   10f84:	4413      	add	r3, r2
   10f86:	6183      	str	r3, [r0, #24]
   10f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f8a:	4463      	add	r3, ip
   10f8c:	61c3      	str	r3, [r0, #28]
}
   10f8e:	b01d      	add	sp, #116	; 0x74
   10f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f94:	46b3      	mov	fp, r6
   10f96:	f8cd c000 	str.w	ip, [sp]
   10f9a:	4626      	mov	r6, r4
   10f9c:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   10f9e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10fa0:	462a      	mov	r2, r5
   10fa2:	e740      	b.n	10e26 <compress+0x3e>
   10fa4:	4694      	mov	ip, r2
   10fa6:	4626      	mov	r6, r4
   10fa8:	462a      	mov	r2, r5
   10faa:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   10fac:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   10fae:	463b      	mov	r3, r7
   10fb0:	e76c      	b.n	10e8c <compress+0xa4>
   10fb2:	bf00      	nop
   10fb4:	0002dd78 	.word	0x0002dd78
   10fb8:	0002ddb4 	.word	0x0002ddb4

00010fbc <tc_sha256_init>:
{
   10fbc:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   10fbe:	4604      	mov	r4, r0
   10fc0:	b1c8      	cbz	r0, 10ff6 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   10fc2:	2270      	movs	r2, #112	; 0x70
   10fc4:	2100      	movs	r1, #0
   10fc6:	f016 ff04 	bl	27dd2 <_set>
	s->iv[1] = 0xbb67ae85;
   10fca:	4b0b      	ldr	r3, [pc, #44]	; (10ff8 <tc_sha256_init+0x3c>)
   10fcc:	4a0b      	ldr	r2, [pc, #44]	; (10ffc <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   10fce:	490c      	ldr	r1, [pc, #48]	; (11000 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   10fd0:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   10fd4:	4b0b      	ldr	r3, [pc, #44]	; (11004 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   10fd6:	480c      	ldr	r0, [pc, #48]	; (11008 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   10fd8:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   10fdc:	4b0b      	ldr	r3, [pc, #44]	; (1100c <tc_sha256_init+0x50>)
   10fde:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   10fe2:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   10fe4:	4b0a      	ldr	r3, [pc, #40]	; (11010 <tc_sha256_init+0x54>)
   10fe6:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   10fe8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   10fec:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   10ff0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   10ff4:	61e3      	str	r3, [r4, #28]
}
   10ff6:	bd10      	pop	{r4, pc}
   10ff8:	bb67ae85 	.word	0xbb67ae85
   10ffc:	6a09e667 	.word	0x6a09e667
   11000:	3c6ef372 	.word	0x3c6ef372
   11004:	a54ff53a 	.word	0xa54ff53a
   11008:	510e527f 	.word	0x510e527f
   1100c:	9b05688c 	.word	0x9b05688c
   11010:	1f83d9ab 	.word	0x1f83d9ab

00011014 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   11014:	4901      	ldr	r1, [pc, #4]	; (1101c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   11016:	2210      	movs	r2, #16
	str	r2, [r1]
   11018:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1101a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1101c:	e000ed10 	.word	0xe000ed10

00011020 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11020:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   11022:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   11024:	f380 8811 	msr	BASEPRI, r0
	isb
   11028:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1102c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   11030:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   11032:	b662      	cpsie	i
	isb
   11034:	f3bf 8f6f 	isb	sy

	bx	lr
   11038:	4770      	bx	lr
   1103a:	bf00      	nop

0001103c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1103c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1103e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   11040:	f381 8811 	msr	BASEPRI, r1

	wfe
   11044:	bf20      	wfe

	msr	BASEPRI, r0
   11046:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1104a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1104c:	4770      	bx	lr
   1104e:	bf00      	nop

00011050 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   11050:	b570      	push	{r4, r5, r6, lr}
   11052:	4606      	mov	r6, r0

	if (esf != NULL) {
   11054:	460d      	mov	r5, r1
{
   11056:	b086      	sub	sp, #24
	if (esf != NULL) {
   11058:	2900      	cmp	r1, #0
   1105a:	d038      	beq.n	110ce <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1105c:	2400      	movs	r4, #0
   1105e:	688b      	ldr	r3, [r1, #8]
   11060:	2201      	movs	r2, #1
   11062:	9305      	str	r3, [sp, #20]
   11064:	684b      	ldr	r3, [r1, #4]
   11066:	4620      	mov	r0, r4
   11068:	9304      	str	r3, [sp, #16]
   1106a:	680b      	ldr	r3, [r1, #0]
   1106c:	491b      	ldr	r1, [pc, #108]	; (110dc <z_arm_fatal_error+0x8c>)
   1106e:	9303      	str	r3, [sp, #12]
   11070:	4b1b      	ldr	r3, [pc, #108]	; (110e0 <z_arm_fatal_error+0x90>)
   11072:	e9cd 4400 	strd	r4, r4, [sp]
   11076:	9302      	str	r3, [sp, #8]
   11078:	4623      	mov	r3, r4
   1107a:	f017 fae8 	bl	2864e <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1107e:	696b      	ldr	r3, [r5, #20]
   11080:	2201      	movs	r2, #1
   11082:	9305      	str	r3, [sp, #20]
   11084:	692b      	ldr	r3, [r5, #16]
   11086:	4620      	mov	r0, r4
   11088:	9304      	str	r3, [sp, #16]
   1108a:	68eb      	ldr	r3, [r5, #12]
   1108c:	4913      	ldr	r1, [pc, #76]	; (110dc <z_arm_fatal_error+0x8c>)
   1108e:	9303      	str	r3, [sp, #12]
   11090:	4b14      	ldr	r3, [pc, #80]	; (110e4 <z_arm_fatal_error+0x94>)
   11092:	9400      	str	r4, [sp, #0]
   11094:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11098:	4623      	mov	r3, r4
   1109a:	f017 fad8 	bl	2864e <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1109e:	69eb      	ldr	r3, [r5, #28]
   110a0:	2201      	movs	r2, #1
   110a2:	9303      	str	r3, [sp, #12]
   110a4:	4b10      	ldr	r3, [pc, #64]	; (110e8 <z_arm_fatal_error+0x98>)
   110a6:	4620      	mov	r0, r4
   110a8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   110ac:	490b      	ldr	r1, [pc, #44]	; (110dc <z_arm_fatal_error+0x8c>)
   110ae:	4623      	mov	r3, r4
   110b0:	9400      	str	r4, [sp, #0]
   110b2:	f017 facc 	bl	2864e <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   110b6:	69ab      	ldr	r3, [r5, #24]
   110b8:	2201      	movs	r2, #1
   110ba:	9303      	str	r3, [sp, #12]
   110bc:	4b0b      	ldr	r3, [pc, #44]	; (110ec <z_arm_fatal_error+0x9c>)
   110be:	4620      	mov	r0, r4
   110c0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   110c4:	4905      	ldr	r1, [pc, #20]	; (110dc <z_arm_fatal_error+0x8c>)
   110c6:	4623      	mov	r3, r4
   110c8:	9400      	str	r4, [sp, #0]
   110ca:	f017 fac0 	bl	2864e <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   110ce:	4629      	mov	r1, r5
   110d0:	4630      	mov	r0, r6
}
   110d2:	b006      	add	sp, #24
   110d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   110d8:	f00e bf7a 	b.w	1ffd0 <z_fatal_error>
   110dc:	0002d6fc 	.word	0x0002d6fc
   110e0:	0002fd6a 	.word	0x0002fd6a
   110e4:	0002fd99 	.word	0x0002fd99
   110e8:	0002fdc8 	.word	0x0002fdc8
   110ec:	0002fdd7 	.word	0x0002fdd7

000110f0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   110f0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   110f2:	2800      	cmp	r0, #0
   110f4:	db07      	blt.n	11106 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   110f6:	2301      	movs	r3, #1
   110f8:	0941      	lsrs	r1, r0, #5
   110fa:	4a03      	ldr	r2, [pc, #12]	; (11108 <arch_irq_enable+0x18>)
   110fc:	f000 001f 	and.w	r0, r0, #31
   11100:	4083      	lsls	r3, r0
   11102:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   11106:	4770      	bx	lr
   11108:	e000e100 	.word	0xe000e100

0001110c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1110c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1110e:	2800      	cmp	r0, #0
   11110:	db0c      	blt.n	1112c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11112:	2201      	movs	r2, #1
   11114:	4906      	ldr	r1, [pc, #24]	; (11130 <arch_irq_disable+0x24>)
   11116:	0943      	lsrs	r3, r0, #5
   11118:	f000 001f 	and.w	r0, r0, #31
   1111c:	4082      	lsls	r2, r0
   1111e:	3320      	adds	r3, #32
   11120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   11124:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11128:	f3bf 8f6f 	isb	sy
}
   1112c:	4770      	bx	lr
   1112e:	bf00      	nop
   11130:	e000e100 	.word	0xe000e100

00011134 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11134:	4b05      	ldr	r3, [pc, #20]	; (1114c <arch_irq_is_enabled+0x18>)
   11136:	0942      	lsrs	r2, r0, #5
   11138:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1113c:	2301      	movs	r3, #1
   1113e:	f000 001f 	and.w	r0, r0, #31
   11142:	fa03 f000 	lsl.w	r0, r3, r0
}
   11146:	4010      	ands	r0, r2
   11148:	4770      	bx	lr
   1114a:	bf00      	nop
   1114c:	e000e100 	.word	0xe000e100

00011150 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   11150:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   11152:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   11154:	2b07      	cmp	r3, #7
{
   11156:	4604      	mov	r4, r0
   11158:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1115a:	d90f      	bls.n	1117c <z_arm_irq_priority_set+0x2c>
   1115c:	235b      	movs	r3, #91	; 0x5b
   1115e:	4a10      	ldr	r2, [pc, #64]	; (111a0 <z_arm_irq_priority_set+0x50>)
   11160:	4910      	ldr	r1, [pc, #64]	; (111a4 <z_arm_irq_priority_set+0x54>)
   11162:	4811      	ldr	r0, [pc, #68]	; (111a8 <z_arm_irq_priority_set+0x58>)
   11164:	f016 fa45 	bl	275f2 <assert_print>
   11168:	4629      	mov	r1, r5
   1116a:	4810      	ldr	r0, [pc, #64]	; (111ac <z_arm_irq_priority_set+0x5c>)
   1116c:	2307      	movs	r3, #7
   1116e:	4622      	mov	r2, r4
   11170:	f016 fa3f 	bl	275f2 <assert_print>
   11174:	215b      	movs	r1, #91	; 0x5b
   11176:	480a      	ldr	r0, [pc, #40]	; (111a0 <z_arm_irq_priority_set+0x50>)
   11178:	f016 fa34 	bl	275e4 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1117c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1117e:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11180:	bfac      	ite	ge
   11182:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11186:	4a0a      	ldrlt	r2, [pc, #40]	; (111b0 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11188:	ea4f 1343 	mov.w	r3, r3, lsl #5
   1118c:	b2db      	uxtb	r3, r3
   1118e:	bfab      	itete	ge
   11190:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11194:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11198:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1119c:	5413      	strblt	r3, [r2, r0]
}
   1119e:	bd38      	pop	{r3, r4, r5, pc}
   111a0:	0002fe05 	.word	0x0002fe05
   111a4:	0002fe3b 	.word	0x0002fe3b
   111a8:	0002e715 	.word	0x0002e715
   111ac:	0002fe56 	.word	0x0002fe56
   111b0:	e000ed14 	.word	0xe000ed14

000111b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   111b4:	bf30      	wfi
    b z_SysNmiOnReset
   111b6:	f7ff bffd 	b.w	111b4 <z_SysNmiOnReset>
   111ba:	bf00      	nop

000111bc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   111bc:	4a0b      	ldr	r2, [pc, #44]	; (111ec <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   111be:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   111c0:	4b0b      	ldr	r3, [pc, #44]	; (111f0 <z_arm_prep_c+0x34>)
   111c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   111c6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   111c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   111cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   111d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   111d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   111d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   111dc:	f00e ffae 	bl	2013c <z_bss_zero>
	z_data_copy();
   111e0:	f011 fea8 	bl	22f34 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   111e4:	f000 fbe8 	bl	119b8 <z_arm_interrupt_init>
	z_cstart();
   111e8:	f00e ffe8 	bl	201bc <z_cstart>
   111ec:	00008000 	.word	0x00008000
   111f0:	e000ed00 	.word	0xe000ed00

000111f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   111f4:	4a09      	ldr	r2, [pc, #36]	; (1121c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   111f6:	490a      	ldr	r1, [pc, #40]	; (11220 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   111f8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   111fa:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   111fc:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   111fe:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11200:	4908      	ldr	r1, [pc, #32]	; (11224 <arch_swap+0x30>)
   11202:	684b      	ldr	r3, [r1, #4]
   11204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11208:	604b      	str	r3, [r1, #4]
   1120a:	2300      	movs	r3, #0
   1120c:	f383 8811 	msr	BASEPRI, r3
   11210:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11214:	6893      	ldr	r3, [r2, #8]
}
   11216:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   11218:	4770      	bx	lr
   1121a:	bf00      	nop
   1121c:	2002f720 	.word	0x2002f720
   11220:	0002e4fc 	.word	0x0002e4fc
   11224:	e000ed00 	.word	0xe000ed00

00011228 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11228:	4915      	ldr	r1, [pc, #84]	; (11280 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1122a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   1122c:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11230:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   11234:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   11236:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1123a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1123e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   11240:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11244:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11248:	4f0e      	ldr	r7, [pc, #56]	; (11284 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1124a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1124e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   11250:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   11252:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   11254:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11258:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1125a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1125c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1125e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11262:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11266:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1126a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1126e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   11272:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   11274:	f017 fa0a 	bl	2868c <configure_builtin_stack_guard>
    pop {r2, lr}
   11278:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1127c:	4770      	bx	lr
   1127e:	0000      	.short	0x0000
    ldr r1, =_kernel
   11280:	2002f720 	.word	0x2002f720
    ldr v4, =_SCS_ICSR
   11284:	e000ed04 	.word	0xe000ed04

00011288 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11288:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1128c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1128e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11292:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11296:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11298:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1129c:	2902      	cmp	r1, #2
    beq _oops
   1129e:	d0ff      	beq.n	112a0 <_oops>

000112a0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   112a0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   112a2:	f017 f9e4 	bl	2866e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   112a6:	bd01      	pop	{r0, pc}

000112a8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   112a8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   112ac:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   112ae:	490d      	ldr	r1, [pc, #52]	; (112e4 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   112b0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   112b4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   112b6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   112ba:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   112be:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   112c0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   112c4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   112c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   112cc:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   112d0:	2300      	movs	r3, #0
   112d2:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   112d4:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   112d8:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   112da:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   112dc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   112e0:	4770      	bx	lr
   112e2:	bf00      	nop
   112e4:	000272a3 	.word	0x000272a3

000112e8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   112e8:	4b08      	ldr	r3, [pc, #32]	; (1130c <arch_switch_to_main_thread+0x24>)
   112ea:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   112ec:	6e83      	ldr	r3, [r0, #104]	; 0x68
   112ee:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   112f2:	4610      	mov	r0, r2
   112f4:	f381 8809 	msr	PSP, r1
   112f8:	2100      	movs	r1, #0
   112fa:	b663      	cpsie	if
   112fc:	f381 8811 	msr	BASEPRI, r1
   11300:	f3bf 8f6f 	isb	sy
   11304:	2200      	movs	r2, #0
   11306:	2300      	movs	r3, #0
   11308:	f015 ffcb 	bl	272a2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1130c:	2002f720 	.word	0x2002f720

00011310 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11310:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11312:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11314:	4a0b      	ldr	r2, [pc, #44]	; (11344 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   11316:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   11318:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1131a:	bf1e      	ittt	ne
	movne	r1, #0
   1131c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1131e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   11320:	f01a fcd5 	blne	2bcce <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11324:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11326:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1132a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1132e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11332:	4905      	ldr	r1, [pc, #20]	; (11348 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11334:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11336:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   11338:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1133a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1133e:	4903      	ldr	r1, [pc, #12]	; (1134c <_isr_wrapper+0x3c>)
	bx r1
   11340:	4708      	bx	r1
   11342:	0000      	.short	0x0000
	ldr r2, =_kernel
   11344:	2002f720 	.word	0x2002f720
	ldr r1, =_sw_isr_table
   11348:	0002d18c 	.word	0x0002d18c
	ldr r1, =z_arm_int_exit
   1134c:	00011351 	.word	0x00011351

00011350 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11350:	4b04      	ldr	r3, [pc, #16]	; (11364 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11352:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11354:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   11356:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11358:	d003      	beq.n	11362 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1135a:	4903      	ldr	r1, [pc, #12]	; (11368 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1135c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11360:	600a      	str	r2, [r1, #0]

00011362 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11362:	4770      	bx	lr
	ldr r3, =_kernel
   11364:	2002f720 	.word	0x2002f720
	ldr r1, =_SCS_ICSR
   11368:	e000ed04 	.word	0xe000ed04

0001136c <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1136c:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1136e:	2400      	movs	r4, #0
   11370:	4b48      	ldr	r3, [pc, #288]	; (11494 <mem_manage_fault.constprop.0+0x128>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11372:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   11374:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11376:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   11378:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1137a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1137c:	2201      	movs	r2, #1
   1137e:	4620      	mov	r0, r4
   11380:	e9cd 4400 	strd	r4, r4, [sp]
   11384:	4944      	ldr	r1, [pc, #272]	; (11498 <mem_manage_fault.constprop.0+0x12c>)
   11386:	f017 f985 	bl	28694 <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1138a:	4b44      	ldr	r3, [pc, #272]	; (1149c <mem_manage_fault.constprop.0+0x130>)
   1138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1138e:	06dd      	lsls	r5, r3, #27
   11390:	d509      	bpl.n	113a6 <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   11392:	4b43      	ldr	r3, [pc, #268]	; (114a0 <mem_manage_fault.constprop.0+0x134>)
   11394:	2201      	movs	r2, #1
   11396:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1139a:	4620      	mov	r0, r4
   1139c:	4623      	mov	r3, r4
   1139e:	493e      	ldr	r1, [pc, #248]	; (11498 <mem_manage_fault.constprop.0+0x12c>)
   113a0:	9400      	str	r4, [sp, #0]
   113a2:	f017 f977 	bl	28694 <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   113a6:	4b3d      	ldr	r3, [pc, #244]	; (1149c <mem_manage_fault.constprop.0+0x130>)
   113a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   113aa:	0718      	lsls	r0, r3, #28
   113ac:	d509      	bpl.n	113c2 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   113ae:	4b3d      	ldr	r3, [pc, #244]	; (114a4 <mem_manage_fault.constprop.0+0x138>)
   113b0:	2201      	movs	r2, #1
   113b2:	9302      	str	r3, [sp, #8]
   113b4:	2300      	movs	r3, #0
   113b6:	4938      	ldr	r1, [pc, #224]	; (11498 <mem_manage_fault.constprop.0+0x12c>)
   113b8:	4618      	mov	r0, r3
   113ba:	e9cd 3300 	strd	r3, r3, [sp]
   113be:	f017 f969 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   113c2:	4d36      	ldr	r5, [pc, #216]	; (1149c <mem_manage_fault.constprop.0+0x130>)
   113c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   113c6:	0799      	lsls	r1, r3, #30
   113c8:	d51e      	bpl.n	11408 <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   113ca:	2400      	movs	r4, #0
   113cc:	4b36      	ldr	r3, [pc, #216]	; (114a8 <mem_manage_fault.constprop.0+0x13c>)
   113ce:	2201      	movs	r2, #1
   113d0:	9302      	str	r3, [sp, #8]
   113d2:	4620      	mov	r0, r4
   113d4:	4623      	mov	r3, r4
   113d6:	e9cd 4400 	strd	r4, r4, [sp]
   113da:	492f      	ldr	r1, [pc, #188]	; (11498 <mem_manage_fault.constprop.0+0x12c>)
   113dc:	f017 f95a 	bl	28694 <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   113e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   113e2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   113e4:	0612      	lsls	r2, r2, #24
   113e6:	d50f      	bpl.n	11408 <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   113e8:	9303      	str	r3, [sp, #12]
   113ea:	4b30      	ldr	r3, [pc, #192]	; (114ac <mem_manage_fault.constprop.0+0x140>)
   113ec:	2201      	movs	r2, #1
   113ee:	e9cd 4301 	strd	r4, r3, [sp, #4]
   113f2:	4620      	mov	r0, r4
   113f4:	4623      	mov	r3, r4
   113f6:	4928      	ldr	r1, [pc, #160]	; (11498 <mem_manage_fault.constprop.0+0x12c>)
   113f8:	9400      	str	r4, [sp, #0]
   113fa:	f017 f94b 	bl	28694 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   113fe:	b11f      	cbz	r7, 11408 <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11400:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   11406:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11408:	4b24      	ldr	r3, [pc, #144]	; (1149c <mem_manage_fault.constprop.0+0x130>)
   1140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1140c:	07df      	lsls	r7, r3, #31
   1140e:	d509      	bpl.n	11424 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   11410:	4b27      	ldr	r3, [pc, #156]	; (114b0 <mem_manage_fault.constprop.0+0x144>)
   11412:	2201      	movs	r2, #1
   11414:	9302      	str	r3, [sp, #8]
   11416:	2300      	movs	r3, #0
   11418:	491f      	ldr	r1, [pc, #124]	; (11498 <mem_manage_fault.constprop.0+0x12c>)
   1141a:	4618      	mov	r0, r3
   1141c:	e9cd 3300 	strd	r3, r3, [sp]
   11420:	f017 f938 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11424:	4b1d      	ldr	r3, [pc, #116]	; (1149c <mem_manage_fault.constprop.0+0x130>)
   11426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11428:	069d      	lsls	r5, r3, #26
   1142a:	d509      	bpl.n	11440 <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   1142c:	4b21      	ldr	r3, [pc, #132]	; (114b4 <mem_manage_fault.constprop.0+0x148>)
   1142e:	2201      	movs	r2, #1
   11430:	9302      	str	r3, [sp, #8]
   11432:	2300      	movs	r3, #0
   11434:	4918      	ldr	r1, [pc, #96]	; (11498 <mem_manage_fault.constprop.0+0x12c>)
   11436:	4618      	mov	r0, r3
   11438:	e9cd 3300 	strd	r3, r3, [sp]
   1143c:	f017 f92a 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11440:	4b16      	ldr	r3, [pc, #88]	; (1149c <mem_manage_fault.constprop.0+0x130>)
   11442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11444:	06d4      	lsls	r4, r2, #27
   11446:	d402      	bmi.n	1144e <mem_manage_fault.constprop.0+0xe2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   11448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1144a:	0790      	lsls	r0, r2, #30
   1144c:	d511      	bpl.n	11472 <mem_manage_fault.constprop.0+0x106>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11450:	06d9      	lsls	r1, r3, #27
   11452:	d50e      	bpl.n	11472 <mem_manage_fault.constprop.0+0x106>
   11454:	4918      	ldr	r1, [pc, #96]	; (114b8 <mem_manage_fault.constprop.0+0x14c>)
   11456:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   1145a:	4a18      	ldr	r2, [pc, #96]	; (114bc <mem_manage_fault.constprop.0+0x150>)
   1145c:	4818      	ldr	r0, [pc, #96]	; (114c0 <mem_manage_fault.constprop.0+0x154>)
   1145e:	f016 f8c8 	bl	275f2 <assert_print>
   11462:	4818      	ldr	r0, [pc, #96]	; (114c4 <mem_manage_fault.constprop.0+0x158>)
   11464:	f016 f8c5 	bl	275f2 <assert_print>
   11468:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   1146c:	4813      	ldr	r0, [pc, #76]	; (114bc <mem_manage_fault.constprop.0+0x150>)
   1146e:	f016 f8b9 	bl	275e4 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   11472:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11474:	4b09      	ldr	r3, [pc, #36]	; (1149c <mem_manage_fault.constprop.0+0x130>)
   11476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11478:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1147a:	bf42      	ittt	mi
   1147c:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1147e:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   11482:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11486:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1148a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1148c:	7030      	strb	r0, [r6, #0]

	return reason;
}
   1148e:	b005      	add	sp, #20
   11490:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11492:	bf00      	nop
   11494:	0002fe96 	.word	0x0002fe96
   11498:	0002d6fc 	.word	0x0002d6fc
   1149c:	e000ed00 	.word	0xe000ed00
   114a0:	0002feac 	.word	0x0002feac
   114a4:	0002fedf 	.word	0x0002fedf
   114a8:	0002fef2 	.word	0x0002fef2
   114ac:	0002ff0a 	.word	0x0002ff0a
   114b0:	0002ff20 	.word	0x0002ff20
   114b4:	0002ff3f 	.word	0x0002ff3f
   114b8:	0002ffa8 	.word	0x0002ffa8
   114bc:	0002ff6e 	.word	0x0002ff6e
   114c0:	0002e715 	.word	0x0002e715
   114c4:	0002fff2 	.word	0x0002fff2

000114c8 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   114c8:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   114ca:	2400      	movs	r4, #0
   114cc:	4b3b      	ldr	r3, [pc, #236]	; (115bc <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   114ce:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   114d0:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   114d2:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   114d4:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   114d6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   114d8:	2201      	movs	r2, #1
   114da:	4620      	mov	r0, r4
   114dc:	e9cd 4400 	strd	r4, r4, [sp]
   114e0:	4937      	ldr	r1, [pc, #220]	; (115c0 <bus_fault.constprop.0+0xf8>)
   114e2:	f017 f8d7 	bl	28694 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   114e6:	4b37      	ldr	r3, [pc, #220]	; (115c4 <bus_fault.constprop.0+0xfc>)
   114e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   114ea:	04db      	lsls	r3, r3, #19
   114ec:	d509      	bpl.n	11502 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   114ee:	4b36      	ldr	r3, [pc, #216]	; (115c8 <bus_fault.constprop.0+0x100>)
   114f0:	2201      	movs	r2, #1
   114f2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   114f6:	4620      	mov	r0, r4
   114f8:	4623      	mov	r3, r4
   114fa:	4931      	ldr	r1, [pc, #196]	; (115c0 <bus_fault.constprop.0+0xf8>)
   114fc:	9400      	str	r4, [sp, #0]
   114fe:	f017 f8c9 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11502:	4b30      	ldr	r3, [pc, #192]	; (115c4 <bus_fault.constprop.0+0xfc>)
   11504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11506:	051d      	lsls	r5, r3, #20
   11508:	d509      	bpl.n	1151e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   1150a:	4b30      	ldr	r3, [pc, #192]	; (115cc <bus_fault.constprop.0+0x104>)
   1150c:	2201      	movs	r2, #1
   1150e:	9302      	str	r3, [sp, #8]
   11510:	2300      	movs	r3, #0
   11512:	492b      	ldr	r1, [pc, #172]	; (115c0 <bus_fault.constprop.0+0xf8>)
   11514:	4618      	mov	r0, r3
   11516:	e9cd 3300 	strd	r3, r3, [sp]
   1151a:	f017 f8bb 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1151e:	4d29      	ldr	r5, [pc, #164]	; (115c4 <bus_fault.constprop.0+0xfc>)
   11520:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11522:	059c      	lsls	r4, r3, #22
   11524:	d51e      	bpl.n	11564 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   11526:	2400      	movs	r4, #0
   11528:	4b29      	ldr	r3, [pc, #164]	; (115d0 <bus_fault.constprop.0+0x108>)
   1152a:	2201      	movs	r2, #1
   1152c:	4620      	mov	r0, r4
   1152e:	9302      	str	r3, [sp, #8]
   11530:	e9cd 4400 	strd	r4, r4, [sp]
   11534:	4623      	mov	r3, r4
   11536:	4922      	ldr	r1, [pc, #136]	; (115c0 <bus_fault.constprop.0+0xf8>)
   11538:	f017 f8ac 	bl	28694 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1153c:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1153e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11540:	0410      	lsls	r0, r2, #16
   11542:	d50f      	bpl.n	11564 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   11544:	9303      	str	r3, [sp, #12]
   11546:	4b23      	ldr	r3, [pc, #140]	; (115d4 <bus_fault.constprop.0+0x10c>)
   11548:	2201      	movs	r2, #1
   1154a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1154e:	4620      	mov	r0, r4
   11550:	4623      	mov	r3, r4
   11552:	491b      	ldr	r1, [pc, #108]	; (115c0 <bus_fault.constprop.0+0xf8>)
   11554:	9400      	str	r4, [sp, #0]
   11556:	f017 f89d 	bl	28694 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   1155a:	b11f      	cbz	r7, 11564 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1155c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1155e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   11562:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11564:	4b17      	ldr	r3, [pc, #92]	; (115c4 <bus_fault.constprop.0+0xfc>)
   11566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11568:	0559      	lsls	r1, r3, #21
   1156a:	d509      	bpl.n	11580 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   1156c:	4b1a      	ldr	r3, [pc, #104]	; (115d8 <bus_fault.constprop.0+0x110>)
   1156e:	2201      	movs	r2, #1
   11570:	9302      	str	r3, [sp, #8]
   11572:	2300      	movs	r3, #0
   11574:	4912      	ldr	r1, [pc, #72]	; (115c0 <bus_fault.constprop.0+0xf8>)
   11576:	4618      	mov	r0, r3
   11578:	e9cd 3300 	strd	r3, r3, [sp]
   1157c:	f017 f88a 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11580:	4a10      	ldr	r2, [pc, #64]	; (115c4 <bus_fault.constprop.0+0xfc>)
   11582:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11584:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   11588:	d012      	beq.n	115b0 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   1158a:	4b14      	ldr	r3, [pc, #80]	; (115dc <bus_fault.constprop.0+0x114>)
   1158c:	9302      	str	r3, [sp, #8]
   1158e:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   11590:	2201      	movs	r2, #1
   11592:	4618      	mov	r0, r3
   11594:	e9cd 3300 	strd	r3, r3, [sp]
   11598:	4909      	ldr	r1, [pc, #36]	; (115c0 <bus_fault.constprop.0+0xf8>)
   1159a:	f017 f87b 	bl	28694 <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   1159e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   115a0:	4a08      	ldr	r2, [pc, #32]	; (115c4 <bus_fault.constprop.0+0xfc>)
   115a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   115a4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   115a8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   115aa:	7030      	strb	r0, [r6, #0]

	return reason;
}
   115ac:	b005      	add	sp, #20
   115ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   115b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
   115b2:	0492      	lsls	r2, r2, #18
   115b4:	d5f3      	bpl.n	1159e <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   115b6:	4a0a      	ldr	r2, [pc, #40]	; (115e0 <bus_fault.constprop.0+0x118>)
   115b8:	9202      	str	r2, [sp, #8]
   115ba:	e7e9      	b.n	11590 <bus_fault.constprop.0+0xc8>
   115bc:	00030056 	.word	0x00030056
   115c0:	0002d6fc 	.word	0x0002d6fc
   115c4:	e000ed00 	.word	0xe000ed00
   115c8:	0003006c 	.word	0x0003006c
   115cc:	0002fedf 	.word	0x0002fedf
   115d0:	0003007d 	.word	0x0003007d
   115d4:	00030096 	.word	0x00030096
   115d8:	000300ab 	.word	0x000300ab
   115dc:	000300c6 	.word	0x000300c6
   115e0:	0002ff3f 	.word	0x0002ff3f

000115e4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   115e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   115e6:	2400      	movs	r4, #0
   115e8:	4b3b      	ldr	r3, [pc, #236]	; (116d8 <usage_fault.constprop.0+0xf4>)
   115ea:	2201      	movs	r2, #1
   115ec:	9302      	str	r3, [sp, #8]
   115ee:	4620      	mov	r0, r4
   115f0:	4623      	mov	r3, r4
   115f2:	e9cd 4400 	strd	r4, r4, [sp]
   115f6:	4939      	ldr	r1, [pc, #228]	; (116dc <usage_fault.constprop.0+0xf8>)
   115f8:	f017 f84c 	bl	28694 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   115fc:	4b38      	ldr	r3, [pc, #224]	; (116e0 <usage_fault.constprop.0+0xfc>)
   115fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11600:	019b      	lsls	r3, r3, #6
   11602:	d509      	bpl.n	11618 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   11604:	4b37      	ldr	r3, [pc, #220]	; (116e4 <usage_fault.constprop.0+0x100>)
   11606:	2201      	movs	r2, #1
   11608:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1160c:	4620      	mov	r0, r4
   1160e:	4623      	mov	r3, r4
   11610:	4932      	ldr	r1, [pc, #200]	; (116dc <usage_fault.constprop.0+0xf8>)
   11612:	9400      	str	r4, [sp, #0]
   11614:	f017 f83e 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11618:	4b31      	ldr	r3, [pc, #196]	; (116e0 <usage_fault.constprop.0+0xfc>)
   1161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1161c:	01dc      	lsls	r4, r3, #7
   1161e:	d509      	bpl.n	11634 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   11620:	4b31      	ldr	r3, [pc, #196]	; (116e8 <usage_fault.constprop.0+0x104>)
   11622:	2201      	movs	r2, #1
   11624:	9302      	str	r3, [sp, #8]
   11626:	2300      	movs	r3, #0
   11628:	492c      	ldr	r1, [pc, #176]	; (116dc <usage_fault.constprop.0+0xf8>)
   1162a:	4618      	mov	r0, r3
   1162c:	e9cd 3300 	strd	r3, r3, [sp]
   11630:	f017 f830 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   11634:	4b2a      	ldr	r3, [pc, #168]	; (116e0 <usage_fault.constprop.0+0xfc>)
   11636:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   11638:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1163c:	d00a      	beq.n	11654 <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1163e:	4b2b      	ldr	r3, [pc, #172]	; (116ec <usage_fault.constprop.0+0x108>)
   11640:	2201      	movs	r2, #1
   11642:	9302      	str	r3, [sp, #8]
   11644:	2300      	movs	r3, #0
   11646:	4925      	ldr	r1, [pc, #148]	; (116dc <usage_fault.constprop.0+0xf8>)
   11648:	4618      	mov	r0, r3
   1164a:	e9cd 3300 	strd	r3, r3, [sp]
   1164e:	f017 f821 	bl	28694 <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   11652:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11654:	4b22      	ldr	r3, [pc, #136]	; (116e0 <usage_fault.constprop.0+0xfc>)
   11656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11658:	0318      	lsls	r0, r3, #12
   1165a:	d509      	bpl.n	11670 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   1165c:	4b24      	ldr	r3, [pc, #144]	; (116f0 <usage_fault.constprop.0+0x10c>)
   1165e:	2201      	movs	r2, #1
   11660:	9302      	str	r3, [sp, #8]
   11662:	2300      	movs	r3, #0
   11664:	491d      	ldr	r1, [pc, #116]	; (116dc <usage_fault.constprop.0+0xf8>)
   11666:	4618      	mov	r0, r3
   11668:	e9cd 3300 	strd	r3, r3, [sp]
   1166c:	f017 f812 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11670:	4b1b      	ldr	r3, [pc, #108]	; (116e0 <usage_fault.constprop.0+0xfc>)
   11672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11674:	0359      	lsls	r1, r3, #13
   11676:	d509      	bpl.n	1168c <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   11678:	4b1e      	ldr	r3, [pc, #120]	; (116f4 <usage_fault.constprop.0+0x110>)
   1167a:	2201      	movs	r2, #1
   1167c:	9302      	str	r3, [sp, #8]
   1167e:	2300      	movs	r3, #0
   11680:	4916      	ldr	r1, [pc, #88]	; (116dc <usage_fault.constprop.0+0xf8>)
   11682:	4618      	mov	r0, r3
   11684:	e9cd 3300 	strd	r3, r3, [sp]
   11688:	f017 f804 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1168c:	4b14      	ldr	r3, [pc, #80]	; (116e0 <usage_fault.constprop.0+0xfc>)
   1168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11690:	039a      	lsls	r2, r3, #14
   11692:	d509      	bpl.n	116a8 <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   11694:	4b18      	ldr	r3, [pc, #96]	; (116f8 <usage_fault.constprop.0+0x114>)
   11696:	2201      	movs	r2, #1
   11698:	9302      	str	r3, [sp, #8]
   1169a:	2300      	movs	r3, #0
   1169c:	490f      	ldr	r1, [pc, #60]	; (116dc <usage_fault.constprop.0+0xf8>)
   1169e:	4618      	mov	r0, r3
   116a0:	e9cd 3300 	strd	r3, r3, [sp]
   116a4:	f016 fff6 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   116a8:	4b0d      	ldr	r3, [pc, #52]	; (116e0 <usage_fault.constprop.0+0xfc>)
   116aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   116ac:	03db      	lsls	r3, r3, #15
   116ae:	d509      	bpl.n	116c4 <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   116b0:	4b12      	ldr	r3, [pc, #72]	; (116fc <usage_fault.constprop.0+0x118>)
   116b2:	2201      	movs	r2, #1
   116b4:	9302      	str	r3, [sp, #8]
   116b6:	2300      	movs	r3, #0
   116b8:	4908      	ldr	r1, [pc, #32]	; (116dc <usage_fault.constprop.0+0xf8>)
   116ba:	4618      	mov	r0, r3
   116bc:	e9cd 3300 	strd	r3, r3, [sp]
   116c0:	f016 ffe8 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   116c4:	4a06      	ldr	r2, [pc, #24]	; (116e0 <usage_fault.constprop.0+0xfc>)

	return reason;
}
   116c6:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   116c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   116ca:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   116ce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   116d2:	6293      	str	r3, [r2, #40]	; 0x28
}
   116d4:	b004      	add	sp, #16
   116d6:	bd10      	pop	{r4, pc}
   116d8:	000300de 	.word	0x000300de
   116dc:	0002d6fc 	.word	0x0002d6fc
   116e0:	e000ed00 	.word	0xe000ed00
   116e4:	000300f6 	.word	0x000300f6
   116e8:	00030109 	.word	0x00030109
   116ec:	00030123 	.word	0x00030123
   116f0:	0003014d 	.word	0x0003014d
   116f4:	0003016b 	.word	0x0003016b
   116f8:	00030190 	.word	0x00030190
   116fc:	000301aa 	.word	0x000301aa

00011700 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11704:	4b8e      	ldr	r3, [pc, #568]	; (11940 <z_arm_fault+0x240>)
{
   11706:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11708:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   1170c:	4688      	mov	r8, r1
   1170e:	4616      	mov	r6, r2
   11710:	2300      	movs	r3, #0
   11712:	b090      	sub	sp, #64	; 0x40
   11714:	f3ca 0708 	ubfx	r7, sl, #0, #9
   11718:	f383 8811 	msr	BASEPRI, r3
   1171c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11720:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11724:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11728:	d00e      	beq.n	11748 <z_arm_fault+0x48>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1172a:	4986      	ldr	r1, [pc, #536]	; (11944 <z_arm_fault+0x244>)
   1172c:	f44f 6384 	mov.w	r3, #1056	; 0x420
   11730:	4a85      	ldr	r2, [pc, #532]	; (11948 <z_arm_fault+0x248>)
   11732:	4886      	ldr	r0, [pc, #536]	; (1194c <z_arm_fault+0x24c>)
   11734:	f015 ff5d 	bl	275f2 <assert_print>
   11738:	4885      	ldr	r0, [pc, #532]	; (11950 <z_arm_fault+0x250>)
   1173a:	f015 ff5a 	bl	275f2 <assert_print>
   1173e:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   11742:	4881      	ldr	r0, [pc, #516]	; (11948 <z_arm_fault+0x248>)
   11744:	f015 ff4e 	bl	275e4 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   11748:	f012 0401 	ands.w	r4, r2, #1
   1174c:	d1ed      	bne.n	1172a <z_arm_fault+0x2a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1174e:	0650      	lsls	r0, r2, #25
   11750:	d404      	bmi.n	1175c <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11752:	0711      	lsls	r1, r2, #28
   11754:	d40e      	bmi.n	11774 <z_arm_fault+0x74>
			*nested_exc = true;
   11756:	f04f 0901 	mov.w	r9, #1
   1175a:	e00e      	b.n	1177a <z_arm_fault+0x7a>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1175c:	4b7d      	ldr	r3, [pc, #500]	; (11954 <z_arm_fault+0x254>)
   1175e:	2201      	movs	r2, #1
   11760:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11764:	4620      	mov	r0, r4
   11766:	4623      	mov	r3, r4
   11768:	497b      	ldr	r1, [pc, #492]	; (11958 <z_arm_fault+0x258>)
   1176a:	9400      	str	r4, [sp, #0]
   1176c:	f016 ff92 	bl	28694 <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   11770:	0772      	lsls	r2, r6, #29
   11772:	d500      	bpl.n	11776 <z_arm_fault+0x76>
			ptr_esf = (z_arch_esf_t *)psp;
   11774:	4645      	mov	r5, r8
	*nested_exc = false;
   11776:	f04f 0900 	mov.w	r9, #0
	__ASSERT(esf != NULL,
   1177a:	2d00      	cmp	r5, #0
   1177c:	d0d5      	beq.n	1172a <z_arm_fault+0x2a>
	*recoverable = false;
   1177e:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
   11782:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   11784:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
   11788:	2b09      	cmp	r3, #9
   1178a:	f200 80bf 	bhi.w	1190c <z_arm_fault+0x20c>
   1178e:	e8df f003 	tbb	[pc, r3]
   11792:	b305      	.short	0xb305
   11794:	bdbd96b7 	.word	0xbdbd96b7
   11798:	bbbdbdbd 	.word	0xbbbdbdbd
	PR_FAULT_INFO("***** HARD FAULT *****");
   1179c:	4b6f      	ldr	r3, [pc, #444]	; (1195c <z_arm_fault+0x25c>)
   1179e:	2201      	movs	r2, #1
   117a0:	e9cd 8301 	strd	r8, r3, [sp, #4]
   117a4:	2300      	movs	r3, #0
   117a6:	496c      	ldr	r1, [pc, #432]	; (11958 <z_arm_fault+0x258>)
   117a8:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   117aa:	4f65      	ldr	r7, [pc, #404]	; (11940 <z_arm_fault+0x240>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   117ac:	f8cd 8000 	str.w	r8, [sp]
   117b0:	f016 ff70 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   117b4:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   117b8:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   117ba:	f016 0602 	ands.w	r6, r6, #2
   117be:	d005      	beq.n	117cc <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   117c0:	4b67      	ldr	r3, [pc, #412]	; (11960 <z_arm_fault+0x260>)
	PR_FAULT_INFO(
   117c2:	e9cd 8301 	strd	r8, r3, [sp, #4]
   117c6:	f8cd 8000 	str.w	r8, [sp]
   117ca:	e006      	b.n	117da <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   117cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   117ce:	2b00      	cmp	r3, #0
   117d0:	da0a      	bge.n	117e8 <z_arm_fault+0xe8>
		PR_EXC("  Debug event");
   117d2:	4b64      	ldr	r3, [pc, #400]	; (11964 <z_arm_fault+0x264>)
   117d4:	9600      	str	r6, [sp, #0]
   117d6:	e9cd 6301 	strd	r6, r3, [sp, #4]
	PR_FAULT_INFO(
   117da:	2300      	movs	r3, #0
   117dc:	2201      	movs	r2, #1
   117de:	4618      	mov	r0, r3
   117e0:	495d      	ldr	r1, [pc, #372]	; (11958 <z_arm_fault+0x258>)
   117e2:	f016 ff57 	bl	28694 <z_log_msg_runtime_create.constprop.0>
}
   117e6:	e03b      	b.n	11860 <z_arm_fault+0x160>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   117e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   117ea:	005b      	lsls	r3, r3, #1
   117ec:	d577      	bpl.n	118de <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
   117ee:	4b5e      	ldr	r3, [pc, #376]	; (11968 <z_arm_fault+0x268>)
   117f0:	2201      	movs	r2, #1
   117f2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   117f6:	4630      	mov	r0, r6
   117f8:	4633      	mov	r3, r6
   117fa:	4957      	ldr	r1, [pc, #348]	; (11958 <z_arm_fault+0x258>)
   117fc:	9600      	str	r6, [sp, #0]
   117fe:	f016 ff49 	bl	28694 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11802:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   11804:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1180a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1180c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11810:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11814:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   11816:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1181a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1181e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11820:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11824:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11828:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1182c:	429a      	cmp	r2, r3
   1182e:	d00a      	beq.n	11846 <z_arm_fault+0x146>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   11830:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11832:	b2db      	uxtb	r3, r3
   11834:	2b00      	cmp	r3, #0
   11836:	d034      	beq.n	118a2 <z_arm_fault+0x1a2>
			reason = mem_manage_fault(esf, 1, recoverable);
   11838:	2001      	movs	r0, #1
   1183a:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   1183e:	f7ff fd95 	bl	1136c <mem_manage_fault.constprop.0>
   11842:	4604      	mov	r4, r0
		break;
   11844:	e00c      	b.n	11860 <z_arm_fault+0x160>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   11846:	682b      	ldr	r3, [r5, #0]
   11848:	2201      	movs	r2, #1
   1184a:	9303      	str	r3, [sp, #12]
   1184c:	4b47      	ldr	r3, [pc, #284]	; (1196c <z_arm_fault+0x26c>)
   1184e:	4630      	mov	r0, r6
   11850:	e9cd 6301 	strd	r6, r3, [sp, #4]
   11854:	4940      	ldr	r1, [pc, #256]	; (11958 <z_arm_fault+0x258>)
   11856:	4633      	mov	r3, r6
   11858:	9600      	str	r6, [sp, #0]
   1185a:	f016 ff1b 	bl	28694 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   1185e:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11860:	f89d 301f 	ldrb.w	r3, [sp, #31]
   11864:	b9d3      	cbnz	r3, 1189c <z_arm_fault+0x19c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11866:	aa08      	add	r2, sp, #32
   11868:	f105 0620 	add.w	r6, r5, #32
   1186c:	4613      	mov	r3, r2
   1186e:	6828      	ldr	r0, [r5, #0]
   11870:	6869      	ldr	r1, [r5, #4]
   11872:	3508      	adds	r5, #8
   11874:	c303      	stmia	r3!, {r0, r1}
   11876:	42b5      	cmp	r5, r6
   11878:	461a      	mov	r2, r3
   1187a:	d1f7      	bne.n	1186c <z_arm_fault+0x16c>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1187c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1187e:	f1b9 0f00 	cmp.w	r9, #0
   11882:	d057      	beq.n	11934 <z_arm_fault+0x234>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11884:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11888:	b922      	cbnz	r2, 11894 <z_arm_fault+0x194>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1188a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1188e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11892:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   11894:	4620      	mov	r0, r4
   11896:	a908      	add	r1, sp, #32
   11898:	f7ff fbda 	bl	11050 <z_arm_fatal_error>
}
   1189c:	b010      	add	sp, #64	; 0x40
   1189e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   118a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   118a4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   118a8:	d005      	beq.n	118b6 <z_arm_fault+0x1b6>
			reason = bus_fault(esf, 1, recoverable);
   118aa:	2001      	movs	r0, #1
   118ac:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   118b0:	f7ff fe0a 	bl	114c8 <bus_fault.constprop.0>
   118b4:	e7c5      	b.n	11842 <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   118b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   118b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   118bc:	d302      	bcc.n	118c4 <z_arm_fault+0x1c4>
		reason = usage_fault(esf);
   118be:	f7ff fe91 	bl	115e4 <usage_fault.constprop.0>
   118c2:	e7be      	b.n	11842 <z_arm_fault+0x142>
			__ASSERT(0,
   118c4:	492a      	ldr	r1, [pc, #168]	; (11970 <z_arm_fault+0x270>)
   118c6:	f240 23f2 	movw	r3, #754	; 0x2f2
   118ca:	4a1f      	ldr	r2, [pc, #124]	; (11948 <z_arm_fault+0x248>)
   118cc:	481f      	ldr	r0, [pc, #124]	; (1194c <z_arm_fault+0x24c>)
   118ce:	f015 fe90 	bl	275f2 <assert_print>
   118d2:	4828      	ldr	r0, [pc, #160]	; (11974 <z_arm_fault+0x274>)
   118d4:	f015 fe8d 	bl	275f2 <assert_print>
   118d8:	f240 21f2 	movw	r1, #754	; 0x2f2
   118dc:	e731      	b.n	11742 <z_arm_fault+0x42>
		__ASSERT(0,
   118de:	4924      	ldr	r1, [pc, #144]	; (11970 <z_arm_fault+0x270>)
   118e0:	f240 23f6 	movw	r3, #758	; 0x2f6
   118e4:	4a18      	ldr	r2, [pc, #96]	; (11948 <z_arm_fault+0x248>)
   118e6:	4819      	ldr	r0, [pc, #100]	; (1194c <z_arm_fault+0x24c>)
   118e8:	f015 fe83 	bl	275f2 <assert_print>
   118ec:	4822      	ldr	r0, [pc, #136]	; (11978 <z_arm_fault+0x278>)
   118ee:	f015 fe80 	bl	275f2 <assert_print>
   118f2:	f240 21f6 	movw	r1, #758	; 0x2f6
   118f6:	e724      	b.n	11742 <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   118f8:	2000      	movs	r0, #0
   118fa:	f10d 011f 	add.w	r1, sp, #31
   118fe:	e79e      	b.n	1183e <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
   11900:	2000      	movs	r0, #0
   11902:	f10d 011f 	add.w	r1, sp, #31
   11906:	e7d3      	b.n	118b0 <z_arm_fault+0x1b0>
	PR_FAULT_INFO(
   11908:	4b1c      	ldr	r3, [pc, #112]	; (1197c <z_arm_fault+0x27c>)
   1190a:	e75a      	b.n	117c2 <z_arm_fault+0xc2>
	PR_FAULT_INFO("***** %s %d) *****",
   1190c:	4a1c      	ldr	r2, [pc, #112]	; (11980 <z_arm_fault+0x280>)
   1190e:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   11912:	4b1c      	ldr	r3, [pc, #112]	; (11984 <z_arm_fault+0x284>)
   11914:	bf18      	it	ne
   11916:	4613      	movne	r3, r2
   11918:	3f10      	subs	r7, #16
   1191a:	e9cd 3703 	strd	r3, r7, [sp, #12]
   1191e:	4b1a      	ldr	r3, [pc, #104]	; (11988 <z_arm_fault+0x288>)
   11920:	2201      	movs	r2, #1
   11922:	9302      	str	r3, [sp, #8]
   11924:	2300      	movs	r3, #0
   11926:	490c      	ldr	r1, [pc, #48]	; (11958 <z_arm_fault+0x258>)
   11928:	4618      	mov	r0, r3
   1192a:	e9cd 3300 	strd	r3, r3, [sp]
   1192e:	f016 feb1 	bl	28694 <z_log_msg_runtime_create.constprop.0>
}
   11932:	e795      	b.n	11860 <z_arm_fault+0x160>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11934:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11938:	f023 0301 	bic.w	r3, r3, #1
   1193c:	e7a9      	b.n	11892 <z_arm_fault+0x192>
   1193e:	bf00      	nop
   11940:	e000ed00 	.word	0xe000ed00
   11944:	00030203 	.word	0x00030203
   11948:	0002ff6e 	.word	0x0002ff6e
   1194c:	0002e715 	.word	0x0002e715
   11950:	00030216 	.word	0x00030216
   11954:	00030254 	.word	0x00030254
   11958:	0002d6fc 	.word	0x0002d6fc
   1195c:	00030277 	.word	0x00030277
   11960:	0003028e 	.word	0x0003028e
   11964:	000302af 	.word	0x000302af
   11968:	000302bd 	.word	0x000302bd
   1196c:	000302dc 	.word	0x000302dc
   11970:	00033fc0 	.word	0x00033fc0
   11974:	000302f8 	.word	0x000302f8
   11978:	0003031c 	.word	0x0003031c
   1197c:	0003034c 	.word	0x0003034c
   11980:	000301ea 	.word	0x000301ea
   11984:	000301d5 	.word	0x000301d5
   11988:	00030370 	.word	0x00030370

0001198c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1198c:	4b04      	ldr	r3, [pc, #16]	; (119a0 <z_arm_fault_init+0x14>)
   1198e:	695a      	ldr	r2, [r3, #20]
   11990:	f042 0210 	orr.w	r2, r2, #16
   11994:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   11996:	695a      	ldr	r2, [r3, #20]
   11998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1199c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1199e:	4770      	bx	lr
   119a0:	e000ed00 	.word	0xe000ed00

000119a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   119a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   119a8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   119ac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   119ae:	4672      	mov	r2, lr
	bl z_arm_fault
   119b0:	f7ff fea6 	bl	11700 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   119b4:	bd01      	pop	{r0, pc}
   119b6:	bf00      	nop

000119b8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   119b8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   119ba:	2120      	movs	r1, #32
   119bc:	4803      	ldr	r0, [pc, #12]	; (119cc <z_arm_interrupt_init+0x14>)
   119be:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   119c0:	3301      	adds	r3, #1
   119c2:	2b45      	cmp	r3, #69	; 0x45
   119c4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   119c8:	d1f9      	bne.n	119be <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   119ca:	4770      	bx	lr
   119cc:	e000e100 	.word	0xe000e100

000119d0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   119d0:	2000      	movs	r0, #0
    msr CONTROL, r0
   119d2:	f380 8814 	msr	CONTROL, r0
    isb
   119d6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   119da:	2000      	movs	r0, #0
    msr MSPLIM, r0
   119dc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   119e0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   119e4:	f7fd fb0a 	bl	effc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   119e8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   119ea:	490e      	ldr	r1, [pc, #56]	; (11a24 <__start+0x54>)
    str r0, [r1]
   119ec:	6008      	str	r0, [r1, #0]
    dsb
   119ee:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   119f2:	480d      	ldr	r0, [pc, #52]	; (11a28 <__start+0x58>)
    msr msp, r0
   119f4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   119f8:	f000 f83e 	bl	11a78 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   119fc:	2020      	movs	r0, #32
    msr BASEPRI, r0
   119fe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11a02:	480a      	ldr	r0, [pc, #40]	; (11a2c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11a08:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11a0a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11a0e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11a12:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11a14:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11a16:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11a1a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11a1e:	f7ff fbcd 	bl	111bc <z_arm_prep_c>
   11a22:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   11a24:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11a28:	20041918 	.word	0x20041918
    ldr r0, =z_interrupt_stacks
   11a2c:	20040bd8 	.word	0x20040bd8

00011a30 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11a30:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11a34:	4905      	ldr	r1, [pc, #20]	; (11a4c <sys_arch_reboot+0x1c>)
   11a36:	4b06      	ldr	r3, [pc, #24]	; (11a50 <sys_arch_reboot+0x20>)
   11a38:	68ca      	ldr	r2, [r1, #12]
   11a3a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11a3e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11a40:	60cb      	str	r3, [r1, #12]
   11a42:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11a46:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11a48:	e7fd      	b.n	11a46 <sys_arch_reboot+0x16>
   11a4a:	bf00      	nop
   11a4c:	e000ed00 	.word	0xe000ed00
   11a50:	05fa0004 	.word	0x05fa0004

00011a54 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   11a54:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   11a56:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11a58:	4906      	ldr	r1, [pc, #24]	; (11a74 <z_arm_clear_arm_mpu_config+0x20>)
   11a5a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   11a5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   11a62:	4293      	cmp	r3, r2
   11a64:	db00      	blt.n	11a68 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   11a66:	4770      	bx	lr
  mpu->RNR = rnr;
   11a68:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   11a6c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   11a70:	3301      	adds	r3, #1
   11a72:	e7f6      	b.n	11a62 <z_arm_clear_arm_mpu_config+0xe>
   11a74:	e000ed00 	.word	0xe000ed00

00011a78 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11a78:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11a7a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11a7c:	2400      	movs	r4, #0
   11a7e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   11a82:	f7ff ffe7 	bl	11a54 <z_arm_clear_arm_mpu_config>
   11a86:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   11a88:	f04f 30ff 	mov.w	r0, #4294967295
   11a8c:	4a0c      	ldr	r2, [pc, #48]	; (11ac0 <z_arm_init_arch_hw_at_boot+0x48>)
   11a8e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11a92:	3301      	adds	r3, #1
   11a94:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   11a96:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11a9a:	d1f8      	bne.n	11a8e <z_arm_init_arch_hw_at_boot+0x16>
   11a9c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11a9e:	f04f 30ff 	mov.w	r0, #4294967295
   11aa2:	4a07      	ldr	r2, [pc, #28]	; (11ac0 <z_arm_init_arch_hw_at_boot+0x48>)
   11aa4:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11aa8:	3301      	adds	r3, #1
   11aaa:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11aac:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11ab0:	d1f8      	bne.n	11aa4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   11ab2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   11ab4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11ab8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11abc:	bd10      	pop	{r4, pc}
   11abe:	bf00      	nop
   11ac0:	e000e100 	.word	0xe000e100

00011ac4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11ac4:	4b08      	ldr	r3, [pc, #32]	; (11ae8 <z_impl_k_thread_abort+0x24>)
   11ac6:	689b      	ldr	r3, [r3, #8]
   11ac8:	4283      	cmp	r3, r0
   11aca:	d10b      	bne.n	11ae4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11acc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11ad0:	b143      	cbz	r3, 11ae4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11ad2:	4b06      	ldr	r3, [pc, #24]	; (11aec <z_impl_k_thread_abort+0x28>)
   11ad4:	685a      	ldr	r2, [r3, #4]
   11ad6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11ada:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   11adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11ae2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   11ae4:	f011 b8ee 	b.w	22cc4 <z_thread_abort>
   11ae8:	2002f720 	.word	0x2002f720
   11aec:	e000ed00 	.word	0xe000ed00

00011af0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11af2:	4c09      	ldr	r4, [pc, #36]	; (11b18 <z_arm_configure_static_mpu_regions+0x28>)
   11af4:	4a09      	ldr	r2, [pc, #36]	; (11b1c <z_arm_configure_static_mpu_regions+0x2c>)
   11af6:	4623      	mov	r3, r4
   11af8:	2101      	movs	r1, #1
   11afa:	4809      	ldr	r0, [pc, #36]	; (11b20 <z_arm_configure_static_mpu_regions+0x30>)
   11afc:	f000 f918 	bl	11d30 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11b00:	2300      	movs	r3, #0
   11b02:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11b04:	4b07      	ldr	r3, [pc, #28]	; (11b24 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11b06:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11b08:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11b0a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11b0c:	9301      	str	r3, [sp, #4]
   11b0e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11b10:	f000 f932 	bl	11d78 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11b14:	b004      	add	sp, #16
   11b16:	bd10      	pop	{r4, pc}
   11b18:	20070000 	.word	0x20070000
   11b1c:	20008000 	.word	0x20008000
   11b20:	0002de78 	.word	0x0002de78
   11b24:	20008e00 	.word	0x20008e00

00011b28 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11b28:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   11b2a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11b2c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11b2e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11b32:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   11b36:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11b38:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11b3a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11b3c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   11b40:	4905      	ldr	r1, [pc, #20]	; (11b58 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11b42:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11b46:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   11b4a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   11b4e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   11b52:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11b56:	bd10      	pop	{r4, pc}
   11b58:	e000ed00 	.word	0xe000ed00

00011b5c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   11b5c:	2807      	cmp	r0, #7
{
   11b5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11b60:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   11b62:	d90f      	bls.n	11b84 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11b64:	4b09      	ldr	r3, [pc, #36]	; (11b8c <region_allocate_and_init+0x30>)
   11b66:	9003      	str	r0, [sp, #12]
   11b68:	9302      	str	r3, [sp, #8]
   11b6a:	2300      	movs	r3, #0
   11b6c:	2201      	movs	r2, #1
   11b6e:	4618      	mov	r0, r3
   11b70:	e9cd 3300 	strd	r3, r3, [sp]
   11b74:	4906      	ldr	r1, [pc, #24]	; (11b90 <region_allocate_and_init+0x34>)
   11b76:	f016 fda8 	bl	286ca <z_log_msg_runtime_create.constprop.0>
   11b7a:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   11b7e:	4620      	mov	r0, r4
   11b80:	b004      	add	sp, #16
   11b82:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   11b84:	f7ff ffd0 	bl	11b28 <region_init>
	return index;
   11b88:	e7f9      	b.n	11b7e <region_allocate_and_init+0x22>
   11b8a:	bf00      	nop
   11b8c:	00030387 	.word	0x00030387
   11b90:	0002d6e4 	.word	0x0002d6e4

00011b94 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b98:	4689      	mov	r9, r1
   11b9a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11b9c:	4606      	mov	r6, r0
   11b9e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   11ba2:	4d54      	ldr	r5, [pc, #336]	; (11cf4 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11ba4:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   11ba6:	45c8      	cmp	r8, r9
   11ba8:	da2d      	bge.n	11c06 <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   11baa:	f8d6 a004 	ldr.w	sl, [r6, #4]
   11bae:	f1ba 0f00 	cmp.w	sl, #0
   11bb2:	d04a      	beq.n	11c4a <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   11bb4:	f1ba 0f1f 	cmp.w	sl, #31
   11bb8:	d917      	bls.n	11bea <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   11bba:	f01a 0f1f 	tst.w	sl, #31
   11bbe:	d114      	bne.n	11bea <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   11bc0:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   11bc4:	f01b 0f1f 	tst.w	fp, #31
   11bc8:	d10f      	bne.n	11bea <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11bca:	4658      	mov	r0, fp
   11bcc:	f016 fd74 	bl	286b8 <arm_cmse_mpu_region_get>
   11bd0:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11bd2:	eb0a 000b 	add.w	r0, sl, fp
   11bd6:	3801      	subs	r0, #1
   11bd8:	f016 fd6e 	bl	286b8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11bdc:	4287      	cmp	r7, r0
   11bde:	d016      	beq.n	11c0e <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   11be0:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   11be4:	4b44      	ldr	r3, [pc, #272]	; (11cf8 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   11be6:	9703      	str	r7, [sp, #12]
   11be8:	e002      	b.n	11bf0 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   11bea:	4b44      	ldr	r3, [pc, #272]	; (11cfc <mpu_configure_regions_and_partition.constprop.0+0x168>)
   11bec:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   11bf0:	9302      	str	r3, [sp, #8]
   11bf2:	2300      	movs	r3, #0
   11bf4:	2201      	movs	r2, #1
   11bf6:	4618      	mov	r0, r3
   11bf8:	e9cd 3300 	strd	r3, r3, [sp]
   11bfc:	4940      	ldr	r1, [pc, #256]	; (11d00 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   11bfe:	f016 fd64 	bl	286ca <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   11c02:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   11c06:	4620      	mov	r0, r4
   11c08:	b009      	add	sp, #36	; 0x24
   11c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   11c0e:	f117 0f16 	cmn.w	r7, #22
   11c12:	d0e7      	beq.n	11be4 <mpu_configure_regions_and_partition.constprop.0+0x50>
   11c14:	42bc      	cmp	r4, r7
   11c16:	dde5      	ble.n	11be4 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   11c18:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11c1c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   11c20:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   11c24:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11c28:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11c2c:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11c30:	e9d6 3200 	ldrd	r3, r2, [r6]
   11c34:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   11c36:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11c38:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   11c3c:	d11d      	bne.n	11c7a <mpu_configure_regions_and_partition.constprop.0+0xe6>
   11c3e:	45d3      	cmp	fp, sl
   11c40:	d107      	bne.n	11c52 <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   11c42:	4631      	mov	r1, r6
   11c44:	b2f8      	uxtb	r0, r7
   11c46:	f016 fd50 	bl	286ea <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   11c4a:	f108 0801 	add.w	r8, r8, #1
   11c4e:	360c      	adds	r6, #12
   11c50:	e7a9      	b.n	11ba6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   11c52:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   11c54:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11c58:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   11c5c:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   11c60:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   11c64:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   11c66:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   11c6a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   11c6c:	f016 fd3d 	bl	286ea <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11c70:	f110 0f16 	cmn.w	r0, #22
   11c74:	d0c5      	beq.n	11c02 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   11c76:	1c44      	adds	r4, r0, #1
   11c78:	e7e7      	b.n	11c4a <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
   11c7a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   11c7e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   11c82:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11c84:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11c88:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11c8c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   11c8e:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   11c90:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   11c92:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   11c94:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   11c98:	d0e8      	beq.n	11c6c <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
   11c9a:	f016 fd26 	bl	286ea <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11c9e:	f110 0f16 	cmn.w	r0, #22
   11ca2:	d0ae      	beq.n	11c02 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   11ca4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11ca8:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11cac:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   11cb0:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
   11cb4:	f362 0304 	bfi	r3, r2, #0, #5
   11cb8:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   11cbc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11cc0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   11cc4:	085b      	lsrs	r3, r3, #1
   11cc6:	f363 1247 	bfi	r2, r3, #5, #3
   11cca:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   11cce:	e9d6 3200 	ldrd	r3, r2, [r6]
   11cd2:	4413      	add	r3, r2
   11cd4:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   11cd6:	f023 031f 	bic.w	r3, r3, #31
   11cda:	445b      	add	r3, fp
   11cdc:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   11ce0:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   11ce2:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   11ce6:	a904      	add	r1, sp, #16
   11ce8:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   11cea:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   11cec:	f7ff ff36 	bl	11b5c <region_allocate_and_init>
   11cf0:	e7be      	b.n	11c70 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   11cf2:	bf00      	nop
   11cf4:	e000ed00 	.word	0xe000ed00
   11cf8:	000303d0 	.word	0x000303d0
   11cfc:	000303ad 	.word	0x000303ad
   11d00:	0002d6e4 	.word	0x0002d6e4

00011d04 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11d04:	2205      	movs	r2, #5
   11d06:	4b04      	ldr	r3, [pc, #16]	; (11d18 <arm_core_mpu_enable+0x14>)
   11d08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11d0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11d10:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11d14:	4770      	bx	lr
   11d16:	bf00      	nop
   11d18:	e000ed00 	.word	0xe000ed00

00011d1c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11d1c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11d20:	2200      	movs	r2, #0
   11d22:	4b02      	ldr	r3, [pc, #8]	; (11d2c <arm_core_mpu_disable+0x10>)
   11d24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11d28:	4770      	bx	lr
   11d2a:	bf00      	nop
   11d2c:	e000ed00 	.word	0xe000ed00

00011d30 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11d30:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11d32:	4d0c      	ldr	r5, [pc, #48]	; (11d64 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   11d34:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   11d36:	782a      	ldrb	r2, [r5, #0]
   11d38:	f7ff ff2c 	bl	11b94 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11d3c:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   11d3e:	3016      	adds	r0, #22
   11d40:	d10f      	bne.n	11d62 <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11d42:	f44f 738d 	mov.w	r3, #282	; 0x11a
   11d46:	4a08      	ldr	r2, [pc, #32]	; (11d68 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   11d48:	4908      	ldr	r1, [pc, #32]	; (11d6c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   11d4a:	4809      	ldr	r0, [pc, #36]	; (11d70 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   11d4c:	f015 fc51 	bl	275f2 <assert_print>
   11d50:	4621      	mov	r1, r4
   11d52:	4808      	ldr	r0, [pc, #32]	; (11d74 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   11d54:	f015 fc4d 	bl	275f2 <assert_print>
   11d58:	f44f 718d 	mov.w	r1, #282	; 0x11a
   11d5c:	4802      	ldr	r0, [pc, #8]	; (11d68 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   11d5e:	f015 fc41 	bl	275e4 <assert_post_action>
			regions_num);
	}
}
   11d62:	bd38      	pop	{r3, r4, r5, pc}
   11d64:	2003018e 	.word	0x2003018e
   11d68:	000303f3 	.word	0x000303f3
   11d6c:	00033fc0 	.word	0x00033fc0
   11d70:	0002e715 	.word	0x0002e715
   11d74:	0003042a 	.word	0x0003042a

00011d78 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   11d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d7c:	4e31      	ldr	r6, [pc, #196]	; (11e44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   11d7e:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11d80:	4605      	mov	r5, r0
   11d82:	f04f 0800 	mov.w	r8, #0
   11d86:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   11d88:	4f2f      	ldr	r7, [pc, #188]	; (11e48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11d8a:	45c8      	cmp	r8, r9
   11d8c:	db02      	blt.n	11d94 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   11d8e:	b003      	add	sp, #12
   11d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   11d94:	f8d5 a004 	ldr.w	sl, [r5, #4]
   11d98:	f1ba 0f00 	cmp.w	sl, #0
   11d9c:	d04c      	beq.n	11e38 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11d9e:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11da0:	4608      	mov	r0, r1
   11da2:	9101      	str	r1, [sp, #4]
   11da4:	f016 fc88 	bl	286b8 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11da8:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11daa:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11dac:	eb0a 0001 	add.w	r0, sl, r1
   11db0:	3801      	subs	r0, #1
   11db2:	f016 fc81 	bl	286b8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11db6:	4284      	cmp	r4, r0
   11db8:	f04f 0214 	mov.w	r2, #20
   11dbc:	4b23      	ldr	r3, [pc, #140]	; (11e4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   11dbe:	d015      	beq.n	11dec <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   11dc0:	fb02 f308 	mul.w	r3, r2, r8
   11dc4:	f06f 0215 	mvn.w	r2, #21
   11dc8:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   11dcc:	f44f 7395 	mov.w	r3, #298	; 0x12a
   11dd0:	4a1f      	ldr	r2, [pc, #124]	; (11e50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11dd2:	4920      	ldr	r1, [pc, #128]	; (11e54 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   11dd4:	4820      	ldr	r0, [pc, #128]	; (11e58 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   11dd6:	f015 fc0c 	bl	275f2 <assert_print>
   11dda:	4649      	mov	r1, r9
   11ddc:	481f      	ldr	r0, [pc, #124]	; (11e5c <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   11dde:	f015 fc08 	bl	275f2 <assert_print>
   11de2:	f44f 7195 	mov.w	r1, #298	; 0x12a
   11de6:	481a      	ldr	r0, [pc, #104]	; (11e50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11de8:	f015 fbfc 	bl	275e4 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11dec:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11df0:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   11df2:	d0eb      	beq.n	11dcc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11df4:	7819      	ldrb	r1, [r3, #0]
   11df6:	42a1      	cmp	r1, r4
   11df8:	dde8      	ble.n	11dcc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   11dfa:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   11dfe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   11e02:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   11e06:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11e0a:	f100 0108 	add.w	r1, r0, #8
   11e0e:	7b00      	ldrb	r0, [r0, #12]
   11e10:	f364 0004 	bfi	r0, r4, #0, #5
   11e14:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   11e16:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11e1a:	790c      	ldrb	r4, [r1, #4]
   11e1c:	0840      	lsrs	r0, r0, #1
   11e1e:	f360 1447 	bfi	r4, r0, #5, #3
   11e22:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   11e24:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11e28:	f021 011f 	bic.w	r1, r1, #31
   11e2c:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   11e2e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   11e32:	f021 011f 	bic.w	r1, r1, #31
   11e36:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11e38:	f108 0801 	add.w	r8, r8, #1
   11e3c:	3614      	adds	r6, #20
   11e3e:	350c      	adds	r5, #12
   11e40:	e7a3      	b.n	11d8a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   11e42:	bf00      	nop
   11e44:	2002f1dc 	.word	0x2002f1dc
   11e48:	e000ed00 	.word	0xe000ed00
   11e4c:	2003018e 	.word	0x2003018e
   11e50:	000303f3 	.word	0x000303f3
   11e54:	00033fc0 	.word	0x00033fc0
   11e58:	0002e715 	.word	0x0002e715
   11e5c:	00030456 	.word	0x00030456

00011e60 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   11e60:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11e62:	4d1f      	ldr	r5, [pc, #124]	; (11ee0 <z_arm_mpu_init+0x80>)
   11e64:	682c      	ldr	r4, [r5, #0]
   11e66:	2c08      	cmp	r4, #8
   11e68:	d910      	bls.n	11e8c <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   11e6a:	f240 1351 	movw	r3, #337	; 0x151
   11e6e:	4a1d      	ldr	r2, [pc, #116]	; (11ee4 <z_arm_mpu_init+0x84>)
   11e70:	491d      	ldr	r1, [pc, #116]	; (11ee8 <z_arm_mpu_init+0x88>)
   11e72:	481e      	ldr	r0, [pc, #120]	; (11eec <z_arm_mpu_init+0x8c>)
   11e74:	f015 fbbd 	bl	275f2 <assert_print>
   11e78:	4621      	mov	r1, r4
   11e7a:	2208      	movs	r2, #8
   11e7c:	481c      	ldr	r0, [pc, #112]	; (11ef0 <z_arm_mpu_init+0x90>)
   11e7e:	f015 fbb8 	bl	275f2 <assert_print>
   11e82:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   11e86:	4817      	ldr	r0, [pc, #92]	; (11ee4 <z_arm_mpu_init+0x84>)
   11e88:	f015 fbac 	bl	275e4 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11e8c:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   11e8e:	f7ff ff45 	bl	11d1c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   11e92:	4b18      	ldr	r3, [pc, #96]	; (11ef4 <z_arm_mpu_init+0x94>)
   11e94:	4a18      	ldr	r2, [pc, #96]	; (11ef8 <z_arm_mpu_init+0x98>)
   11e96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11e9a:	4284      	cmp	r4, r0
   11e9c:	d117      	bne.n	11ece <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   11e9e:	4b17      	ldr	r3, [pc, #92]	; (11efc <z_arm_mpu_init+0x9c>)
   11ea0:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   11ea2:	f7ff ff2f 	bl	11d04 <arm_core_mpu_enable>
	__ASSERT(
   11ea6:	4b13      	ldr	r3, [pc, #76]	; (11ef4 <z_arm_mpu_init+0x94>)
   11ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   11eac:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11eb0:	2b08      	cmp	r3, #8
   11eb2:	d013      	beq.n	11edc <z_arm_mpu_init+0x7c>
   11eb4:	4912      	ldr	r1, [pc, #72]	; (11f00 <z_arm_mpu_init+0xa0>)
   11eb6:	f240 13bb 	movw	r3, #443	; 0x1bb
   11eba:	4a0a      	ldr	r2, [pc, #40]	; (11ee4 <z_arm_mpu_init+0x84>)
   11ebc:	480b      	ldr	r0, [pc, #44]	; (11eec <z_arm_mpu_init+0x8c>)
   11ebe:	f015 fb98 	bl	275f2 <assert_print>
   11ec2:	4810      	ldr	r0, [pc, #64]	; (11f04 <z_arm_mpu_init+0xa4>)
   11ec4:	f015 fb95 	bl	275f2 <assert_print>
   11ec8:	f240 11bb 	movw	r1, #443	; 0x1bb
   11ecc:	e7db      	b.n	11e86 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11ece:	6869      	ldr	r1, [r5, #4]
   11ed0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11ed4:	f7ff fe28 	bl	11b28 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11ed8:	3001      	adds	r0, #1
   11eda:	e7de      	b.n	11e9a <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11edc:	2000      	movs	r0, #0
   11ede:	bd38      	pop	{r3, r4, r5, pc}
   11ee0:	0002de84 	.word	0x0002de84
   11ee4:	000303f3 	.word	0x000303f3
   11ee8:	00033fc0 	.word	0x00033fc0
   11eec:	0002e715 	.word	0x0002e715
   11ef0:	00030485 	.word	0x00030485
   11ef4:	e000ed00 	.word	0xe000ed00
   11ef8:	0044ffaa 	.word	0x0044ffaa
   11efc:	2003018e 	.word	0x2003018e
   11f00:	000304b9 	.word	0x000304b9
   11f04:	00030509 	.word	0x00030509

00011f08 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   11f08:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   11f0a:	4b0b      	ldr	r3, [pc, #44]	; (11f38 <malloc_prepare+0x30>)
   11f0c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11f10:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   11f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11f18:	d20c      	bcs.n	11f34 <malloc_prepare+0x2c>
   11f1a:	4908      	ldr	r1, [pc, #32]	; (11f3c <malloc_prepare+0x34>)
   11f1c:	2381      	movs	r3, #129	; 0x81
   11f1e:	4a08      	ldr	r2, [pc, #32]	; (11f40 <malloc_prepare+0x38>)
   11f20:	4808      	ldr	r0, [pc, #32]	; (11f44 <malloc_prepare+0x3c>)
   11f22:	f015 fb66 	bl	275f2 <assert_print>
   11f26:	4808      	ldr	r0, [pc, #32]	; (11f48 <malloc_prepare+0x40>)
   11f28:	f015 fb63 	bl	275f2 <assert_print>
   11f2c:	2181      	movs	r1, #129	; 0x81
   11f2e:	4804      	ldr	r0, [pc, #16]	; (11f40 <malloc_prepare+0x38>)
   11f30:	f015 fb58 	bl	275e4 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   11f34:	2000      	movs	r0, #0
   11f36:	bd08      	pop	{r3, pc}
   11f38:	20047858 	.word	0x20047858
   11f3c:	0003055a 	.word	0x0003055a
   11f40:	0003052a 	.word	0x0003052a
   11f44:	0002e715 	.word	0x0002e715
   11f48:	000305a1 	.word	0x000305a1

00011f4c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11f4c:	4b01      	ldr	r3, [pc, #4]	; (11f54 <__stdout_hook_install+0x8>)
   11f4e:	6018      	str	r0, [r3, #0]
}
   11f50:	4770      	bx	lr
   11f52:	bf00      	nop
   11f54:	200084c0 	.word	0x200084c0

00011f58 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   11f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f5a:	4606      	mov	r6, r0
   11f5c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   11f5e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   11f60:	4f06      	ldr	r7, [pc, #24]	; (11f7c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   11f62:	42ac      	cmp	r4, r5
   11f64:	da08      	bge.n	11f78 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   11f66:	683b      	ldr	r3, [r7, #0]
   11f68:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11f6a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   11f6c:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   11f6e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11f72:	d001      	beq.n	11f78 <z_impl_zephyr_read_stdin+0x20>
   11f74:	280d      	cmp	r0, #13
   11f76:	d1f4      	bne.n	11f62 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   11f78:	4620      	mov	r0, r4
   11f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f7c:	200084bc 	.word	0x200084bc

00011f80 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   11f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f82:	460d      	mov	r5, r1
   11f84:	4f09      	ldr	r7, [pc, #36]	; (11fac <z_impl_zephyr_write_stdout+0x2c>)
   11f86:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11f88:	f1c0 0401 	rsb	r4, r0, #1
   11f8c:	19a3      	adds	r3, r4, r6
   11f8e:	429d      	cmp	r5, r3
   11f90:	dc01      	bgt.n	11f96 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   11f92:	4628      	mov	r0, r5
   11f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11f96:	7873      	ldrb	r3, [r6, #1]
   11f98:	2b0a      	cmp	r3, #10
   11f9a:	d102      	bne.n	11fa2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11f9c:	200d      	movs	r0, #13
   11f9e:	683b      	ldr	r3, [r7, #0]
   11fa0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   11fa2:	683b      	ldr	r3, [r7, #0]
   11fa4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11fa8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11faa:	e7ef      	b.n	11f8c <z_impl_zephyr_write_stdout+0xc>
   11fac:	200084c0 	.word	0x200084c0

00011fb0 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   11fb0:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11fb2:	2105      	movs	r1, #5
   11fb4:	4801      	ldr	r0, [pc, #4]	; (11fbc <_exit+0xc>)
   11fb6:	f7ff ffe3 	bl	11f80 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   11fba:	e7fe      	b.n	11fba <_exit+0xa>
   11fbc:	00030628 	.word	0x00030628

00011fc0 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   11fc0:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   11fc2:	4c07      	ldr	r4, [pc, #28]	; (11fe0 <_sbrk+0x20>)
   11fc4:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11fc6:	18c2      	adds	r2, r0, r3
   11fc8:	4806      	ldr	r0, [pc, #24]	; (11fe4 <_sbrk+0x24>)
   11fca:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   11fce:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   11fd2:	428a      	cmp	r2, r1
		heap_sz += count;
   11fd4:	bf36      	itet	cc
   11fd6:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11fd8:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11fdc:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   11fde:	bd10      	pop	{r4, pc}
   11fe0:	2002f1f0 	.word	0x2002f1f0
   11fe4:	20047858 	.word	0x20047858

00011fe8 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   11fe8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11fea:	4604      	mov	r4, r0
   11fec:	b958      	cbnz	r0, 12006 <__retarget_lock_init_recursive+0x1e>
   11fee:	4911      	ldr	r1, [pc, #68]	; (12034 <__retarget_lock_init_recursive+0x4c>)
   11ff0:	f240 137b 	movw	r3, #379	; 0x17b
   11ff4:	4a10      	ldr	r2, [pc, #64]	; (12038 <__retarget_lock_init_recursive+0x50>)
   11ff6:	4811      	ldr	r0, [pc, #68]	; (1203c <__retarget_lock_init_recursive+0x54>)
   11ff8:	f015 fafb 	bl	275f2 <assert_print>
   11ffc:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   12000:	480d      	ldr	r0, [pc, #52]	; (12038 <__retarget_lock_init_recursive+0x50>)
   12002:	f015 faef 	bl	275e4 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   12006:	2014      	movs	r0, #20
   12008:	f011 ffa4 	bl	23f54 <malloc>
   1200c:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   1200e:	b960      	cbnz	r0, 1202a <__retarget_lock_init_recursive+0x42>
   12010:	490b      	ldr	r1, [pc, #44]	; (12040 <__retarget_lock_init_recursive+0x58>)
   12012:	f240 1383 	movw	r3, #387	; 0x183
   12016:	4a08      	ldr	r2, [pc, #32]	; (12038 <__retarget_lock_init_recursive+0x50>)
   12018:	4808      	ldr	r0, [pc, #32]	; (1203c <__retarget_lock_init_recursive+0x54>)
   1201a:	f015 faea 	bl	275f2 <assert_print>
   1201e:	4809      	ldr	r0, [pc, #36]	; (12044 <__retarget_lock_init_recursive+0x5c>)
   12020:	f015 fae7 	bl	275f2 <assert_print>
   12024:	f240 1183 	movw	r1, #387	; 0x183
   12028:	e7ea      	b.n	12000 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   1202a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   1202e:	f019 be5d 	b.w	2bcec <z_impl_k_mutex_init>
   12032:	bf00      	nop
   12034:	0003062f 	.word	0x0003062f
   12038:	0003052a 	.word	0x0003052a
   1203c:	0002e715 	.word	0x0002e715
   12040:	0003062e 	.word	0x0003062e
   12044:	0003066a 	.word	0x0003066a

00012048 <__retarget_lock_acquire>:
#endif /* !CONFIG_USERSPACE */
}

/* Acquiure non-recursive lock */
void __retarget_lock_acquire(_LOCK_T lock)
{
   12048:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1204a:	b958      	cbnz	r0, 12064 <__retarget_lock_acquire+0x1c>
   1204c:	4909      	ldr	r1, [pc, #36]	; (12074 <__retarget_lock_acquire+0x2c>)
   1204e:	480a      	ldr	r0, [pc, #40]	; (12078 <__retarget_lock_acquire+0x30>)
   12050:	f240 13a1 	movw	r3, #417	; 0x1a1
   12054:	4a09      	ldr	r2, [pc, #36]	; (1207c <__retarget_lock_acquire+0x34>)
   12056:	f015 facc 	bl	275f2 <assert_print>
   1205a:	f240 11a1 	movw	r1, #417	; 0x1a1
   1205e:	4807      	ldr	r0, [pc, #28]	; (1207c <__retarget_lock_acquire+0x34>)
   12060:	f015 fac0 	bl	275e4 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   12064:	f04f 32ff 	mov.w	r2, #4294967295
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}
   12068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1206c:	f04f 33ff 	mov.w	r3, #4294967295
   12070:	f00e bf3e 	b.w	20ef0 <z_impl_k_sem_take>
   12074:	0003062f 	.word	0x0003062f
   12078:	0002e715 	.word	0x0002e715
   1207c:	0003052a 	.word	0x0003052a

00012080 <__retarget_lock_acquire_recursive>:

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   12080:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   12082:	b958      	cbnz	r0, 1209c <__retarget_lock_acquire_recursive+0x1c>
   12084:	4909      	ldr	r1, [pc, #36]	; (120ac <__retarget_lock_acquire_recursive+0x2c>)
   12086:	480a      	ldr	r0, [pc, #40]	; (120b0 <__retarget_lock_acquire_recursive+0x30>)
   12088:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   1208c:	4a09      	ldr	r2, [pc, #36]	; (120b4 <__retarget_lock_acquire_recursive+0x34>)
   1208e:	f015 fab0 	bl	275f2 <assert_print>
   12092:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   12096:	4807      	ldr	r0, [pc, #28]	; (120b4 <__retarget_lock_acquire_recursive+0x34>)
   12098:	f015 faa4 	bl	275e4 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   1209c:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   120a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   120a4:	f04f 33ff 	mov.w	r3, #4294967295
   120a8:	f00e bc7c 	b.w	209a4 <z_impl_k_mutex_lock>
   120ac:	0003062f 	.word	0x0003062f
   120b0:	0002e715 	.word	0x0002e715
   120b4:	0003052a 	.word	0x0003052a

000120b8 <__retarget_lock_release>:
	return !k_mutex_lock((struct k_mutex *)lock, K_NO_WAIT);
}

/* Release non-recursive lock */
void __retarget_lock_release(_LOCK_T lock)
{
   120b8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   120ba:	b958      	cbnz	r0, 120d4 <__retarget_lock_release+0x1c>
   120bc:	4907      	ldr	r1, [pc, #28]	; (120dc <__retarget_lock_release+0x24>)
   120be:	4808      	ldr	r0, [pc, #32]	; (120e0 <__retarget_lock_release+0x28>)
   120c0:	f240 13bd 	movw	r3, #445	; 0x1bd
   120c4:	4a07      	ldr	r2, [pc, #28]	; (120e4 <__retarget_lock_release+0x2c>)
   120c6:	f015 fa94 	bl	275f2 <assert_print>
   120ca:	f240 11bd 	movw	r1, #445	; 0x1bd
   120ce:	4805      	ldr	r0, [pc, #20]	; (120e4 <__retarget_lock_release+0x2c>)
   120d0:	f015 fa88 	bl	275e4 <assert_post_action>
	k_sem_give((struct k_sem *)lock);
}
   120d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   120d8:	f00e bec6 	b.w	20e68 <z_impl_k_sem_give>
   120dc:	0003062f 	.word	0x0003062f
   120e0:	0002e715 	.word	0x0002e715
   120e4:	0003052a 	.word	0x0003052a

000120e8 <__retarget_lock_release_recursive>:

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   120e8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   120ea:	b958      	cbnz	r0, 12104 <__retarget_lock_release_recursive+0x1c>
   120ec:	4907      	ldr	r1, [pc, #28]	; (1210c <__retarget_lock_release_recursive+0x24>)
   120ee:	4808      	ldr	r0, [pc, #32]	; (12110 <__retarget_lock_release_recursive+0x28>)
   120f0:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   120f4:	4a07      	ldr	r2, [pc, #28]	; (12114 <__retarget_lock_release_recursive+0x2c>)
   120f6:	f015 fa7c 	bl	275f2 <assert_print>
   120fa:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   120fe:	4805      	ldr	r0, [pc, #20]	; (12114 <__retarget_lock_release_recursive+0x2c>)
   12100:	f015 fa70 	bl	275e4 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   12104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   12108:	f00e bd1c 	b.w	20b44 <z_impl_k_mutex_unlock>
   1210c:	0003062f 	.word	0x0003062f
   12110:	0002e715 	.word	0x0002e715
   12114:	0003052a 	.word	0x0003052a

00012118 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   12118:	b508      	push	{r3, lr}
   1211a:	211d      	movs	r1, #29
   1211c:	4804      	ldr	r0, [pc, #16]	; (12130 <__chk_fail+0x18>)
   1211e:	f7ff ff2f 	bl	11f80 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   12122:	4040      	eors	r0, r0
   12124:	f380 8811 	msr	BASEPRI, r0
   12128:	f04f 0003 	mov.w	r0, #3
   1212c:	df02      	svc	2
	CODE_UNREACHABLE;
   1212e:	bf00      	nop
   12130:	0003068d 	.word	0x0003068d

00012134 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   12134:	2000      	movs	r0, #0
   12136:	4b02      	ldr	r3, [pc, #8]	; (12140 <remoteproc_mgr_boot+0xc>)
   12138:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   1213c:	4770      	bx	lr
   1213e:	bf00      	nop
   12140:	40005000 	.word	0x40005000

00012144 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   12144:	4b0e      	ldr	r3, [pc, #56]	; (12180 <bt_hex+0x3c>)
   12146:	2940      	cmp	r1, #64	; 0x40
   12148:	bf28      	it	cs
   1214a:	2140      	movcs	r1, #64	; 0x40
{
   1214c:	b570      	push	{r4, r5, r6, lr}
   1214e:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   12150:	4c0c      	ldr	r4, [pc, #48]	; (12184 <bt_hex+0x40>)
   12152:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   12154:	42b0      	cmp	r0, r6
   12156:	f103 0302 	add.w	r3, r3, #2
   1215a:	d104      	bne.n	12166 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   1215c:	2300      	movs	r3, #0
   1215e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   12162:	4807      	ldr	r0, [pc, #28]	; (12180 <bt_hex+0x3c>)
   12164:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   12166:	7802      	ldrb	r2, [r0, #0]
   12168:	0912      	lsrs	r2, r2, #4
   1216a:	5ca2      	ldrb	r2, [r4, r2]
   1216c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   12170:	f810 2b01 	ldrb.w	r2, [r0], #1
   12174:	f002 020f 	and.w	r2, r2, #15
   12178:	5ca2      	ldrb	r2, [r4, r2]
   1217a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1217e:	e7e9      	b.n	12154 <bt_hex+0x10>
   12180:	200301ad 	.word	0x200301ad
   12184:	000306ed 	.word	0x000306ed

00012188 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   12188:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1218a:	7803      	ldrb	r3, [r0, #0]
   1218c:	b08b      	sub	sp, #44	; 0x2c
   1218e:	4604      	mov	r4, r0
   12190:	ad07      	add	r5, sp, #28
   12192:	2b03      	cmp	r3, #3
   12194:	d821      	bhi.n	121da <bt_addr_le_str+0x52>
   12196:	e8df f003 	tbb	[pc, r3]
   1219a:	1a02      	.short	0x1a02
   1219c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1219e:	4912      	ldr	r1, [pc, #72]	; (121e8 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   121a0:	4628      	mov	r0, r5
   121a2:	f01a f902 	bl	2c3aa <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   121a6:	9505      	str	r5, [sp, #20]
   121a8:	7863      	ldrb	r3, [r4, #1]
   121aa:	211e      	movs	r1, #30
   121ac:	9304      	str	r3, [sp, #16]
   121ae:	78a3      	ldrb	r3, [r4, #2]
   121b0:	4a0e      	ldr	r2, [pc, #56]	; (121ec <bt_addr_le_str+0x64>)
   121b2:	9303      	str	r3, [sp, #12]
   121b4:	78e3      	ldrb	r3, [r4, #3]
   121b6:	480e      	ldr	r0, [pc, #56]	; (121f0 <bt_addr_le_str+0x68>)
   121b8:	9302      	str	r3, [sp, #8]
   121ba:	7923      	ldrb	r3, [r4, #4]
   121bc:	9301      	str	r3, [sp, #4]
   121be:	7963      	ldrb	r3, [r4, #5]
   121c0:	9300      	str	r3, [sp, #0]
   121c2:	79a3      	ldrb	r3, [r4, #6]
   121c4:	f015 f860 	bl	27288 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   121c8:	4809      	ldr	r0, [pc, #36]	; (121f0 <bt_addr_le_str+0x68>)
   121ca:	b00b      	add	sp, #44	; 0x2c
   121cc:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   121ce:	4909      	ldr	r1, [pc, #36]	; (121f4 <bt_addr_le_str+0x6c>)
   121d0:	e7e6      	b.n	121a0 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   121d2:	4909      	ldr	r1, [pc, #36]	; (121f8 <bt_addr_le_str+0x70>)
   121d4:	e7e4      	b.n	121a0 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   121d6:	4909      	ldr	r1, [pc, #36]	; (121fc <bt_addr_le_str+0x74>)
   121d8:	e7e2      	b.n	121a0 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   121da:	210a      	movs	r1, #10
   121dc:	4628      	mov	r0, r5
   121de:	4a08      	ldr	r2, [pc, #32]	; (12200 <bt_addr_le_str+0x78>)
   121e0:	f015 f852 	bl	27288 <snprintk>
		break;
   121e4:	e7df      	b.n	121a6 <bt_addr_le_str+0x1e>
   121e6:	bf00      	nop
   121e8:	0002e833 	.word	0x0002e833
   121ec:	0002e855 	.word	0x0002e855
   121f0:	2003018f 	.word	0x2003018f
   121f4:	0002e83a 	.word	0x0002e83a
   121f8:	0002e841 	.word	0x0002e841
   121fc:	0002e84b 	.word	0x0002e84b
   12200:	0003205d 	.word	0x0003205d

00012204 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   12204:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   12206:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   12208:	4d09      	ldr	r5, [pc, #36]	; (12230 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1220a:	4b0a      	ldr	r3, [pc, #40]	; (12234 <long_wq_init+0x30>)
{
   1220c:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   1220e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   12210:	9302      	str	r3, [sp, #8]
   12212:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   12214:	f00f f99c 	bl	21550 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   12218:	ab02      	add	r3, sp, #8
   1221a:	4628      	mov	r0, r5
   1221c:	9300      	str	r3, [sp, #0]
   1221e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   12222:	230a      	movs	r3, #10
   12224:	4904      	ldr	r1, [pc, #16]	; (12238 <long_wq_init+0x34>)
   12226:	f00f f9ad 	bl	21584 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   1222a:	4620      	mov	r0, r4
   1222c:	b005      	add	sp, #20
   1222e:	bd30      	pop	{r4, r5, pc}
   12230:	20009618 	.word	0x20009618
   12234:	00030705 	.word	0x00030705
   12238:	2003fd18 	.word	0x2003fd18

0001223c <bt_long_wq_schedule>:
{
   1223c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   1223e:	4801      	ldr	r0, [pc, #4]	; (12244 <bt_long_wq_schedule+0x8>)
   12240:	f00f bac2 	b.w	217c8 <k_work_schedule_for_queue>
   12244:	20009618 	.word	0x20009618

00012248 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   12248:	7803      	ldrb	r3, [r0, #0]
{
   1224a:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   1224c:	2b01      	cmp	r3, #1
   1224e:	d013      	beq.n	12278 <uuid_to_uuid128+0x30>
   12250:	2b02      	cmp	r3, #2
   12252:	d027      	beq.n	122a4 <uuid_to_uuid128+0x5c>
   12254:	b97b      	cbnz	r3, 12276 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   12256:	460a      	mov	r2, r1
   12258:	4b18      	ldr	r3, [pc, #96]	; (122bc <uuid_to_uuid128+0x74>)
   1225a:	f103 0410 	add.w	r4, r3, #16
   1225e:	f853 5b04 	ldr.w	r5, [r3], #4
   12262:	42a3      	cmp	r3, r4
   12264:	f842 5b04 	str.w	r5, [r2], #4
   12268:	d1f9      	bne.n	1225e <uuid_to_uuid128+0x16>
   1226a:	781b      	ldrb	r3, [r3, #0]
   1226c:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1226e:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   12270:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   12272:	0a1b      	lsrs	r3, r3, #8
   12274:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   12276:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   12278:	460a      	mov	r2, r1
   1227a:	4b10      	ldr	r3, [pc, #64]	; (122bc <uuid_to_uuid128+0x74>)
   1227c:	f103 0410 	add.w	r4, r3, #16
   12280:	f853 5b04 	ldr.w	r5, [r3], #4
   12284:	42a3      	cmp	r3, r4
   12286:	f842 5b04 	str.w	r5, [r2], #4
   1228a:	d1f9      	bne.n	12280 <uuid_to_uuid128+0x38>
   1228c:	781b      	ldrb	r3, [r3, #0]
   1228e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   12290:	6843      	ldr	r3, [r0, #4]
   12292:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   12296:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   12298:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1229a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   1229c:	0a1b      	lsrs	r3, r3, #8
   1229e:	738a      	strb	r2, [r1, #14]
   122a0:	740b      	strb	r3, [r1, #16]
}
   122a2:	e7e8      	b.n	12276 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   122a4:	f100 0310 	add.w	r3, r0, #16
   122a8:	f850 2b04 	ldr.w	r2, [r0], #4
   122ac:	4298      	cmp	r0, r3
   122ae:	f841 2b04 	str.w	r2, [r1], #4
   122b2:	d1f9      	bne.n	122a8 <uuid_to_uuid128+0x60>
   122b4:	7803      	ldrb	r3, [r0, #0]
   122b6:	700b      	strb	r3, [r1, #0]
   122b8:	e7dd      	b.n	12276 <uuid_to_uuid128+0x2e>
   122ba:	bf00      	nop
   122bc:	0003070e 	.word	0x0003070e

000122c0 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   122c0:	b538      	push	{r3, r4, r5, lr}
   122c2:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   122c4:	2d01      	cmp	r5, #1
{
   122c6:	4610      	mov	r0, r2
   122c8:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   122ca:	d010      	beq.n	122ee <bt_buf_get_rx+0x2e>
   122cc:	2d03      	cmp	r5, #3
   122ce:	d01a      	beq.n	12306 <bt_buf_get_rx+0x46>
   122d0:	2d05      	cmp	r5, #5
   122d2:	d018      	beq.n	12306 <bt_buf_get_rx+0x46>
   122d4:	490e      	ldr	r1, [pc, #56]	; (12310 <bt_buf_get_rx+0x50>)
   122d6:	233d      	movs	r3, #61	; 0x3d
   122d8:	4a0e      	ldr	r2, [pc, #56]	; (12314 <bt_buf_get_rx+0x54>)
   122da:	480f      	ldr	r0, [pc, #60]	; (12318 <bt_buf_get_rx+0x58>)
   122dc:	f015 f989 	bl	275f2 <assert_print>
   122e0:	480e      	ldr	r0, [pc, #56]	; (1231c <bt_buf_get_rx+0x5c>)
   122e2:	f015 f986 	bl	275f2 <assert_print>
   122e6:	213d      	movs	r1, #61	; 0x3d
   122e8:	480a      	ldr	r0, [pc, #40]	; (12314 <bt_buf_get_rx+0x54>)
   122ea:	f015 f97b 	bl	275e4 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   122ee:	480c      	ldr	r0, [pc, #48]	; (12320 <bt_buf_get_rx+0x60>)
   122f0:	f018 f94b 	bl	2a58a <net_buf_alloc_fixed>
   122f4:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   122f6:	b120      	cbz	r0, 12302 <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   122f8:	2101      	movs	r1, #1
   122fa:	300c      	adds	r0, #12
   122fc:	f007 ff44 	bl	1a188 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12300:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   12302:	4620      	mov	r0, r4
   12304:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   12306:	4602      	mov	r2, r0
   12308:	460b      	mov	r3, r1
   1230a:	4806      	ldr	r0, [pc, #24]	; (12324 <bt_buf_get_rx+0x64>)
   1230c:	e7f0      	b.n	122f0 <bt_buf_get_rx+0x30>
   1230e:	bf00      	nop
   12310:	0003074e 	.word	0x0003074e
   12314:	0003071f 	.word	0x0003071f
   12318:	0002e715 	.word	0x0002e715
   1231c:	00030793 	.word	0x00030793
   12320:	20008d30 	.word	0x20008d30
   12324:	20008c94 	.word	0x20008c94

00012328 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   12328:	b510      	push	{r4, lr}
   1232a:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   1232c:	490a      	ldr	r1, [pc, #40]	; (12358 <bt_buf_get_cmd_complete+0x30>)
{
   1232e:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   12330:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   12334:	b920      	cbnz	r0, 12340 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   12336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1233a:	2001      	movs	r0, #1
   1233c:	f7ff bfc0 	b.w	122c0 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   12340:	f008 f878 	bl	1a434 <net_buf_ref>
   12344:	2101      	movs	r1, #1
		buf->len = 0U;
   12346:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   12348:	4604      	mov	r4, r0
   1234a:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   1234c:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   1234e:	300c      	adds	r0, #12
   12350:	f007 ff1a 	bl	1a188 <net_buf_simple_reserve>
}
   12354:	4620      	mov	r0, r4
   12356:	bd10      	pop	{r4, pc}
   12358:	20008000 	.word	0x20008000

0001235c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   1235c:	b570      	push	{r4, r5, r6, lr}
   1235e:	4604      	mov	r4, r0
	switch (evt) {
   12360:	2c0f      	cmp	r4, #15
{
   12362:	460d      	mov	r5, r1
   12364:	4610      	mov	r0, r2
   12366:	4619      	mov	r1, r3
	switch (evt) {
   12368:	d805      	bhi.n	12376 <bt_buf_get_evt+0x1a>
   1236a:	2c0d      	cmp	r4, #13
   1236c:	d90d      	bls.n	1238a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1236e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   12372:	f7ff bfd9 	b.w	12328 <bt_buf_get_cmd_complete>
	switch (evt) {
   12376:	2c13      	cmp	r4, #19
   12378:	d107      	bne.n	1238a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   1237a:	480c      	ldr	r0, [pc, #48]	; (123ac <bt_buf_get_evt+0x50>)
   1237c:	f018 f905 	bl	2a58a <net_buf_alloc_fixed>
			if (buf) {
   12380:	4604      	mov	r4, r0
   12382:	b938      	cbnz	r0, 12394 <bt_buf_get_evt+0x38>
{
   12384:	2400      	movs	r4, #0
}
   12386:	4620      	mov	r0, r4
   12388:	bd70      	pop	{r4, r5, r6, pc}
   1238a:	4602      	mov	r2, r0
   1238c:	460b      	mov	r3, r1
		if (discardable) {
   1238e:	b145      	cbz	r5, 123a2 <bt_buf_get_evt+0x46>
   12390:	4807      	ldr	r0, [pc, #28]	; (123b0 <bt_buf_get_evt+0x54>)
   12392:	e7f3      	b.n	1237c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   12394:	2101      	movs	r1, #1
   12396:	300c      	adds	r0, #12
   12398:	f007 fef6 	bl	1a188 <net_buf_simple_reserve>
   1239c:	2301      	movs	r3, #1
   1239e:	7623      	strb	r3, [r4, #24]
}
   123a0:	e7f1      	b.n	12386 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   123a2:	2001      	movs	r0, #1
}
   123a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   123a8:	f7ff bf8a 	b.w	122c0 <bt_buf_get_rx>
   123ac:	20008dcc 	.word	0x20008dcc
   123b0:	20008cfc 	.word	0x20008cfc

000123b4 <hci_disconn_complete_prio>:
{
   123b4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   123b6:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   123b8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   123bc:	781b      	ldrb	r3, [r3, #0]
   123be:	b963      	cbnz	r3, 123da <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   123c0:	4620      	mov	r0, r4
   123c2:	f002 ff09 	bl	151d8 <bt_conn_lookup_handle>
	if (!conn) {
   123c6:	4605      	mov	r5, r0
   123c8:	b940      	cbnz	r0, 123dc <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   123ca:	4b08      	ldr	r3, [pc, #32]	; (123ec <hci_disconn_complete_prio+0x38>)
   123cc:	881a      	ldrh	r2, [r3, #0]
   123ce:	b922      	cbnz	r2, 123da <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   123d0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   123d4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   123d8:	8018      	strh	r0, [r3, #0]
}
   123da:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   123dc:	2101      	movs	r1, #1
   123de:	f002 ff03 	bl	151e8 <bt_conn_set_state>
	bt_conn_unref(conn);
   123e2:	4628      	mov	r0, r5
}
   123e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   123e8:	f002 bec6 	b.w	15178 <bt_conn_unref>
   123ec:	2002f7ba 	.word	0x2002f7ba

000123f0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   123f0:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   123f2:	4c08      	ldr	r4, [pc, #32]	; (12414 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   123f4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   123f6:	2205      	movs	r2, #5
   123f8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   123fc:	f003 f9c8 	bl	15790 <bt_conn_lookup_state_le>
		if (!conn) {
   12400:	b938      	cbnz	r0, 12412 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   12402:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   12406:	2204      	movs	r2, #4
}
   12408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1240c:	4902      	ldr	r1, [pc, #8]	; (12418 <find_pending_connect.part.0+0x28>)
   1240e:	f003 b9bf 	b.w	15790 <bt_conn_lookup_state_le>
}
   12412:	bd10      	pop	{r4, pc}
   12414:	20008000 	.word	0x20008000
   12418:	000306d3 	.word	0x000306d3

0001241c <hci_data_buf_overflow>:
{
   1241c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1241e:	68c3      	ldr	r3, [r0, #12]
   12420:	2202      	movs	r2, #2
   12422:	781b      	ldrb	r3, [r3, #0]
   12424:	4906      	ldr	r1, [pc, #24]	; (12440 <hci_data_buf_overflow+0x24>)
   12426:	9303      	str	r3, [sp, #12]
   12428:	4b06      	ldr	r3, [pc, #24]	; (12444 <hci_data_buf_overflow+0x28>)
   1242a:	9302      	str	r3, [sp, #8]
   1242c:	2300      	movs	r3, #0
   1242e:	4618      	mov	r0, r3
   12430:	e9cd 3300 	strd	r3, r3, [sp]
   12434:	f016 fa5b 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   12438:	b005      	add	sp, #20
   1243a:	f85d fb04 	ldr.w	pc, [sp], #4
   1243e:	bf00      	nop
   12440:	0002d644 	.word	0x0002d644
   12444:	000307b3 	.word	0x000307b3

00012448 <rx_queue_put>:
{
   12448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1244a:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   1244c:	480b      	ldr	r0, [pc, #44]	; (1247c <rx_queue_put+0x34>)
   1244e:	f007 fec1 	bl	1a1d4 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   12452:	490b      	ldr	r1, [pc, #44]	; (12480 <rx_queue_put+0x38>)
   12454:	480b      	ldr	r0, [pc, #44]	; (12484 <rx_queue_put+0x3c>)
   12456:	f019 fce1 	bl	2be1c <k_work_submit_to_queue>
	if (err < 0) {
   1245a:	2800      	cmp	r0, #0
   1245c:	da0a      	bge.n	12474 <rx_queue_put+0x2c>
		LOG_ERR("Could not submit rx_work: %d", err);
   1245e:	4b0a      	ldr	r3, [pc, #40]	; (12488 <rx_queue_put+0x40>)
   12460:	9003      	str	r0, [sp, #12]
   12462:	9302      	str	r3, [sp, #8]
   12464:	2300      	movs	r3, #0
   12466:	2201      	movs	r2, #1
   12468:	4618      	mov	r0, r3
   1246a:	e9cd 3300 	strd	r3, r3, [sp]
   1246e:	4907      	ldr	r1, [pc, #28]	; (1248c <rx_queue_put+0x44>)
   12470:	f016 fa3d 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   12474:	b005      	add	sp, #20
   12476:	f85d fb04 	ldr.w	pc, [sp], #4
   1247a:	bf00      	nop
   1247c:	2000813c 	.word	0x2000813c
   12480:	20008500 	.word	0x20008500
   12484:	20009748 	.word	0x20009748
   12488:	000307db 	.word	0x000307db
   1248c:	0002d644 	.word	0x0002d644

00012490 <hci_hardware_error>:
{
   12490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   12492:	2101      	movs	r1, #1
   12494:	300c      	adds	r0, #12
   12496:	f008 f88d 	bl	1a5b4 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1249a:	7803      	ldrb	r3, [r0, #0]
   1249c:	2201      	movs	r2, #1
   1249e:	9303      	str	r3, [sp, #12]
   124a0:	4b05      	ldr	r3, [pc, #20]	; (124b8 <hci_hardware_error+0x28>)
   124a2:	4906      	ldr	r1, [pc, #24]	; (124bc <hci_hardware_error+0x2c>)
   124a4:	9302      	str	r3, [sp, #8]
   124a6:	2300      	movs	r3, #0
   124a8:	4618      	mov	r0, r3
   124aa:	e9cd 3300 	strd	r3, r3, [sp]
   124ae:	f016 fa1e 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   124b2:	b005      	add	sp, #20
   124b4:	f85d fb04 	ldr.w	pc, [sp], #4
   124b8:	000307f8 	.word	0x000307f8
   124bc:	0002d644 	.word	0x0002d644

000124c0 <le_data_len_change>:
{
   124c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   124c2:	68c3      	ldr	r3, [r0, #12]
   124c4:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   124c6:	4620      	mov	r0, r4
   124c8:	f002 fe86 	bl	151d8 <bt_conn_lookup_handle>
   124cc:	4603      	mov	r3, r0
	if (!conn) {
   124ce:	b950      	cbnz	r0, 124e6 <le_data_len_change+0x26>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   124d0:	4a07      	ldr	r2, [pc, #28]	; (124f0 <le_data_len_change+0x30>)
   124d2:	4908      	ldr	r1, [pc, #32]	; (124f4 <le_data_len_change+0x34>)
   124d4:	e9cd 0201 	strd	r0, r2, [sp, #4]
   124d8:	9403      	str	r4, [sp, #12]
   124da:	2201      	movs	r2, #1
   124dc:	9000      	str	r0, [sp, #0]
   124de:	f016 fa06 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   124e2:	b004      	add	sp, #16
   124e4:	bd10      	pop	{r4, pc}
   124e6:	b004      	add	sp, #16
   124e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   124ec:	f002 be44 	b.w	15178 <bt_conn_unref>
   124f0:	0003081a 	.word	0x0003081a
   124f4:	0002d644 	.word	0x0002d644

000124f8 <le_phy_update_complete>:
{
   124f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   124fa:	68c3      	ldr	r3, [r0, #12]
   124fc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   12500:	4620      	mov	r0, r4
   12502:	f002 fe69 	bl	151d8 <bt_conn_lookup_handle>
   12506:	4603      	mov	r3, r0
	if (!conn) {
   12508:	b950      	cbnz	r0, 12520 <le_phy_update_complete+0x28>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1250a:	4a08      	ldr	r2, [pc, #32]	; (1252c <le_phy_update_complete+0x34>)
   1250c:	4908      	ldr	r1, [pc, #32]	; (12530 <le_phy_update_complete+0x38>)
   1250e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   12512:	9403      	str	r4, [sp, #12]
   12514:	2201      	movs	r2, #1
   12516:	9000      	str	r0, [sp, #0]
   12518:	f016 f9e9 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   1251c:	b004      	add	sp, #16
   1251e:	bd10      	pop	{r4, pc}
   12520:	b004      	add	sp, #16
   12522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   12526:	f002 be27 	b.w	15178 <bt_conn_unref>
   1252a:	bf00      	nop
   1252c:	0003081a 	.word	0x0003081a
   12530:	0002d644 	.word	0x0002d644

00012534 <hci_disconn_complete>:
{
   12534:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12536:	68c5      	ldr	r5, [r0, #12]
{
   12538:	b085      	sub	sp, #20
	if (evt->status) {
   1253a:	782e      	ldrb	r6, [r5, #0]
   1253c:	b986      	cbnz	r6, 12560 <hci_disconn_complete+0x2c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1253e:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12542:	4638      	mov	r0, r7
   12544:	f002 fe48 	bl	151d8 <bt_conn_lookup_handle>
	if (!conn) {
   12548:	4604      	mov	r4, r0
   1254a:	b958      	cbnz	r0, 12564 <hci_disconn_complete+0x30>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1254c:	4b0b      	ldr	r3, [pc, #44]	; (1257c <hci_disconn_complete+0x48>)
   1254e:	2201      	movs	r2, #1
   12550:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12554:	490a      	ldr	r1, [pc, #40]	; (12580 <hci_disconn_complete+0x4c>)
   12556:	4603      	mov	r3, r0
   12558:	9703      	str	r7, [sp, #12]
   1255a:	9000      	str	r0, [sp, #0]
   1255c:	f016 f9c7 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   12560:	b005      	add	sp, #20
   12562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   12564:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12566:	4631      	mov	r1, r6
	conn->err = evt->reason;
   12568:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1256a:	f002 fe3d 	bl	151e8 <bt_conn_set_state>
		bt_conn_unref(conn);
   1256e:	4620      	mov	r0, r4
}
   12570:	b005      	add	sp, #20
   12572:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   12576:	f002 bdff 	b.w	15178 <bt_conn_unref>
   1257a:	bf00      	nop
   1257c:	0003083e 	.word	0x0003083e
   12580:	0002d644 	.word	0x0002d644

00012584 <handle_event>:
{
   12584:	b530      	push	{r4, r5, lr}
   12586:	4604      	mov	r4, r0
   12588:	4608      	mov	r0, r1
   1258a:	b087      	sub	sp, #28
   1258c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   12590:	4293      	cmp	r3, r2
   12592:	d112      	bne.n	125ba <handle_event+0x36>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   12594:	8a05      	ldrh	r5, [r0, #16]
   12596:	68c0      	ldr	r0, [r0, #12]
   12598:	4629      	mov	r1, r5
   1259a:	f7ff fdd3 	bl	12144 <bt_hex>
   1259e:	4b16      	ldr	r3, [pc, #88]	; (125f8 <handle_event+0x74>)
   125a0:	e9cd 5004 	strd	r5, r0, [sp, #16]
   125a4:	9302      	str	r3, [sp, #8]
   125a6:	2300      	movs	r3, #0
   125a8:	2202      	movs	r2, #2
   125aa:	4618      	mov	r0, r3
   125ac:	e9cd 3300 	strd	r3, r3, [sp]
   125b0:	4912      	ldr	r1, [pc, #72]	; (125fc <handle_event+0x78>)
   125b2:	9403      	str	r4, [sp, #12]
   125b4:	f016 f99b 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   125b8:	e014      	b.n	125e4 <handle_event+0x60>
		if (handler->event != event) {
   125ba:	4611      	mov	r1, r2
   125bc:	f811 5b08 	ldrb.w	r5, [r1], #8
   125c0:	42a5      	cmp	r5, r4
   125c2:	d116      	bne.n	125f2 <handle_event+0x6e>
		if (buf->len < handler->min_len) {
   125c4:	8a03      	ldrh	r3, [r0, #16]
   125c6:	7851      	ldrb	r1, [r2, #1]
   125c8:	4299      	cmp	r1, r3
   125ca:	d90d      	bls.n	125e8 <handle_event+0x64>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   125cc:	e9cd 3403 	strd	r3, r4, [sp, #12]
   125d0:	4b0b      	ldr	r3, [pc, #44]	; (12600 <handle_event+0x7c>)
   125d2:	2201      	movs	r2, #1
   125d4:	9302      	str	r3, [sp, #8]
   125d6:	2300      	movs	r3, #0
   125d8:	4908      	ldr	r1, [pc, #32]	; (125fc <handle_event+0x78>)
   125da:	4618      	mov	r0, r3
   125dc:	e9cd 3300 	strd	r3, r3, [sp]
   125e0:	f016 f985 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   125e4:	b007      	add	sp, #28
   125e6:	bd30      	pop	{r4, r5, pc}
		handler->handler(buf);
   125e8:	6853      	ldr	r3, [r2, #4]
}
   125ea:	b007      	add	sp, #28
   125ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   125f0:	4718      	bx	r3
   125f2:	460a      	mov	r2, r1
   125f4:	e7cc      	b.n	12590 <handle_event+0xc>
   125f6:	bf00      	nop
   125f8:	00030886 	.word	0x00030886
   125fc:	0002d644 	.word	0x0002d644
   12600:	00030864 	.word	0x00030864

00012604 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   12604:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   12606:	4853      	ldr	r0, [pc, #332]	; (12754 <rx_work_handler+0x150>)
{
   12608:	b086      	sub	sp, #24
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1260a:	f007 fe4d 	bl	1a2a8 <net_buf_slist_get>
	if (!buf) {
   1260e:	4604      	mov	r4, r0
   12610:	2800      	cmp	r0, #0
   12612:	d064      	beq.n	126de <rx_work_handler+0xda>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12614:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   12616:	2b01      	cmp	r3, #1
   12618:	d063      	beq.n	126e2 <rx_work_handler+0xde>
   1261a:	2b03      	cmp	r3, #3
   1261c:	f040 8090 	bne.w	12740 <rx_work_handler+0x13c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12620:	8a03      	ldrh	r3, [r0, #16]
   12622:	2b03      	cmp	r3, #3
   12624:	d80c      	bhi.n	12640 <rx_work_handler+0x3c>
   12626:	f240 13ed 	movw	r3, #493	; 0x1ed
   1262a:	4a4b      	ldr	r2, [pc, #300]	; (12758 <rx_work_handler+0x154>)
   1262c:	494b      	ldr	r1, [pc, #300]	; (1275c <rx_work_handler+0x158>)
   1262e:	484c      	ldr	r0, [pc, #304]	; (12760 <rx_work_handler+0x15c>)
   12630:	f014 ffdf 	bl	275f2 <assert_print>
   12634:	4040      	eors	r0, r0
   12636:	f380 8811 	msr	BASEPRI, r0
   1263a:	f04f 0003 	mov.w	r0, #3
   1263e:	df02      	svc	2
   12640:	2104      	movs	r1, #4
   12642:	f104 000c 	add.w	r0, r4, #12
   12646:	f007 ffb5 	bl	1a5b4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1264a:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   1264c:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1264e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12650:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   12652:	8a23      	ldrh	r3, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   12654:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   12658:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   1265a:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   1265c:	d00f      	beq.n	1267e <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1265e:	e9cd 3203 	strd	r3, r2, [sp, #12]
   12662:	4b40      	ldr	r3, [pc, #256]	; (12764 <rx_work_handler+0x160>)
   12664:	2201      	movs	r2, #1
   12666:	9302      	str	r3, [sp, #8]
   12668:	2300      	movs	r3, #0
   1266a:	493f      	ldr	r1, [pc, #252]	; (12768 <rx_work_handler+0x164>)
   1266c:	4618      	mov	r0, r3
   1266e:	e9cd 3300 	strd	r3, r3, [sp]
   12672:	f016 f93c 	bl	288ee <z_log_msg_runtime_create.constprop.0>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   12676:	4620      	mov	r0, r4
   12678:	f007 fe98 	bl	1a3ac <net_buf_unref>
		break;
   1267c:	e01a      	b.n	126b4 <rx_work_handler+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1267e:	f002 fdab 	bl	151d8 <bt_conn_lookup_handle>
	if (!conn) {
   12682:	4605      	mov	r5, r0
   12684:	b958      	cbnz	r0, 1269e <rx_work_handler+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   12686:	8b63      	ldrh	r3, [r4, #26]
   12688:	2201      	movs	r2, #1
   1268a:	9303      	str	r3, [sp, #12]
   1268c:	4b37      	ldr	r3, [pc, #220]	; (1276c <rx_work_handler+0x168>)
   1268e:	4936      	ldr	r1, [pc, #216]	; (12768 <rx_work_handler+0x164>)
   12690:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12694:	4603      	mov	r3, r0
   12696:	9000      	str	r0, [sp, #0]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12698:	f016 f929 	bl	288ee <z_log_msg_runtime_create.constprop.0>
   1269c:	e7eb      	b.n	12676 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   1269e:	f002 fe87 	bl	153b0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   126a2:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   126a4:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   126a6:	0b32      	lsrs	r2, r6, #12
   126a8:	4628      	mov	r0, r5
   126aa:	f002 fc09 	bl	14ec0 <bt_conn_recv>
	bt_conn_unref(conn);
   126ae:	4628      	mov	r0, r5
   126b0:	f002 fd62 	bl	15178 <bt_conn_unref>
	return list->head;
   126b4:	4b2e      	ldr	r3, [pc, #184]	; (12770 <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   126b6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   126ba:	b183      	cbz	r3, 126de <rx_work_handler+0xda>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   126bc:	492d      	ldr	r1, [pc, #180]	; (12774 <rx_work_handler+0x170>)
   126be:	482e      	ldr	r0, [pc, #184]	; (12778 <rx_work_handler+0x174>)
   126c0:	f019 fbac 	bl	2be1c <k_work_submit_to_queue>
#endif
		if (err < 0) {
   126c4:	2800      	cmp	r0, #0
   126c6:	da0a      	bge.n	126de <rx_work_handler+0xda>
			LOG_ERR("Could not submit rx_work: %d", err);
   126c8:	4b2c      	ldr	r3, [pc, #176]	; (1277c <rx_work_handler+0x178>)
   126ca:	9003      	str	r0, [sp, #12]
   126cc:	9302      	str	r3, [sp, #8]
   126ce:	2300      	movs	r3, #0
   126d0:	2201      	movs	r2, #1
   126d2:	4618      	mov	r0, r3
   126d4:	e9cd 3300 	strd	r3, r3, [sp]
   126d8:	4923      	ldr	r1, [pc, #140]	; (12768 <rx_work_handler+0x164>)
   126da:	f016 f908 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   126de:	b006      	add	sp, #24
   126e0:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   126e2:	8a03      	ldrh	r3, [r0, #16]
   126e4:	2b01      	cmp	r3, #1
   126e6:	d80c      	bhi.n	12702 <rx_work_handler+0xfe>
   126e8:	f640 136d 	movw	r3, #2413	; 0x96d
   126ec:	4a1a      	ldr	r2, [pc, #104]	; (12758 <rx_work_handler+0x154>)
   126ee:	491b      	ldr	r1, [pc, #108]	; (1275c <rx_work_handler+0x158>)
   126f0:	481b      	ldr	r0, [pc, #108]	; (12760 <rx_work_handler+0x15c>)
   126f2:	f014 ff7e 	bl	275f2 <assert_print>
   126f6:	4040      	eors	r0, r0
   126f8:	f380 8811 	msr	BASEPRI, r0
   126fc:	f04f 0003 	mov.w	r0, #3
   12700:	df02      	svc	2
   12702:	2102      	movs	r1, #2
   12704:	f104 000c 	add.w	r0, r4, #12
   12708:	f007 ff54 	bl	1a5b4 <net_buf_simple_pull_mem>
   1270c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1270e:	7800      	ldrb	r0, [r0, #0]
   12710:	f016 f8ab 	bl	2886a <bt_hci_evt_get_flags>
   12714:	0783      	lsls	r3, r0, #30
   12716:	d40c      	bmi.n	12732 <rx_work_handler+0x12e>
   12718:	f640 1371 	movw	r3, #2417	; 0x971
   1271c:	4a0e      	ldr	r2, [pc, #56]	; (12758 <rx_work_handler+0x154>)
   1271e:	4918      	ldr	r1, [pc, #96]	; (12780 <rx_work_handler+0x17c>)
   12720:	480f      	ldr	r0, [pc, #60]	; (12760 <rx_work_handler+0x15c>)
   12722:	f014 ff66 	bl	275f2 <assert_print>
   12726:	4040      	eors	r0, r0
   12728:	f380 8811 	msr	BASEPRI, r0
   1272c:	f04f 0003 	mov.w	r0, #3
   12730:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12732:	2306      	movs	r3, #6
   12734:	4621      	mov	r1, r4
   12736:	4a13      	ldr	r2, [pc, #76]	; (12784 <rx_work_handler+0x180>)
   12738:	7828      	ldrb	r0, [r5, #0]
   1273a:	f7ff ff23 	bl	12584 <handle_event>
	net_buf_unref(buf);
   1273e:	e79a      	b.n	12676 <rx_work_handler+0x72>
	switch (bt_buf_get_type(buf)) {
   12740:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12742:	4b11      	ldr	r3, [pc, #68]	; (12788 <rx_work_handler+0x184>)
   12744:	2201      	movs	r2, #1
   12746:	9302      	str	r3, [sp, #8]
   12748:	2300      	movs	r3, #0
   1274a:	4907      	ldr	r1, [pc, #28]	; (12768 <rx_work_handler+0x164>)
   1274c:	4618      	mov	r0, r3
   1274e:	e9cd 3300 	strd	r3, r3, [sp]
   12752:	e7a1      	b.n	12698 <rx_work_handler+0x94>
   12754:	2000813c 	.word	0x2000813c
   12758:	000308a8 	.word	0x000308a8
   1275c:	000308dc 	.word	0x000308dc
   12760:	0002e715 	.word	0x0002e715
   12764:	000308f5 	.word	0x000308f5
   12768:	0002d644 	.word	0x0002d644
   1276c:	00030919 	.word	0x00030919
   12770:	20008000 	.word	0x20008000
   12774:	20008500 	.word	0x20008500
   12778:	20009748 	.word	0x20009748
   1277c:	000307db 	.word	0x000307db
   12780:	0003093b 	.word	0x0003093b
   12784:	0002df14 	.word	0x0002df14
   12788:	00030969 	.word	0x00030969

0001278c <hci_le_meta_event>:
{
   1278c:	b510      	push	{r4, lr}
   1278e:	2101      	movs	r1, #1
   12790:	4604      	mov	r4, r0
   12792:	300c      	adds	r0, #12
   12794:	f007 ff0e 	bl	1a5b4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   12798:	4621      	mov	r1, r4
}
   1279a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1279e:	230a      	movs	r3, #10
   127a0:	4a01      	ldr	r2, [pc, #4]	; (127a8 <hci_le_meta_event+0x1c>)
   127a2:	7800      	ldrb	r0, [r0, #0]
   127a4:	f7ff beee 	b.w	12584 <handle_event>
   127a8:	0002df44 	.word	0x0002df44

000127ac <le_remote_feat_complete>:
{
   127ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   127ae:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   127b0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   127b4:	4630      	mov	r0, r6
   127b6:	f002 fd0f 	bl	151d8 <bt_conn_lookup_handle>
	if (!conn) {
   127ba:	4604      	mov	r4, r0
   127bc:	b958      	cbnz	r0, 127d6 <le_remote_feat_complete+0x2a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   127be:	4b10      	ldr	r3, [pc, #64]	; (12800 <le_remote_feat_complete+0x54>)
   127c0:	2201      	movs	r2, #1
   127c2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   127c6:	490f      	ldr	r1, [pc, #60]	; (12804 <le_remote_feat_complete+0x58>)
   127c8:	4603      	mov	r3, r0
   127ca:	9603      	str	r6, [sp, #12]
   127cc:	9000      	str	r0, [sp, #0]
   127ce:	f016 f88e 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   127d2:	b004      	add	sp, #16
   127d4:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   127d6:	782b      	ldrb	r3, [r5, #0]
   127d8:	b93b      	cbnz	r3, 127ea <le_remote_feat_complete+0x3e>
   127da:	f8d5 3003 	ldr.w	r3, [r5, #3]
   127de:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   127e2:	f8d5 3007 	ldr.w	r3, [r5, #7]
   127e6:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   127ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   127ee:	1d20      	adds	r0, r4, #4
   127f0:	f016 f866 	bl	288c0 <atomic_or>
	bt_conn_unref(conn);
   127f4:	4620      	mov	r0, r4
}
   127f6:	b004      	add	sp, #16
   127f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   127fc:	f002 bcbc 	b.w	15178 <bt_conn_unref>
   12800:	0003081a 	.word	0x0003081a
   12804:	0002d644 	.word	0x0002d644

00012808 <hci_cmd_done>:
{
   12808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1280c:	4606      	mov	r6, r0
   1280e:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12810:	7a90      	ldrb	r0, [r2, #10]
{
   12812:	460f      	mov	r7, r1
   12814:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12816:	f007 fb8f 	bl	19f38 <net_buf_pool_get>
   1281a:	4d3d      	ldr	r5, [pc, #244]	; (12910 <hci_cmd_done+0x108>)
   1281c:	4285      	cmp	r5, r0
   1281e:	d014      	beq.n	1284a <hci_cmd_done+0x42>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   12820:	7aa4      	ldrb	r4, [r4, #10]
   12822:	4620      	mov	r0, r4
   12824:	f007 fb88 	bl	19f38 <net_buf_pool_get>
   12828:	4b3a      	ldr	r3, [pc, #232]	; (12914 <hci_cmd_done+0x10c>)
   1282a:	e9cd 0505 	strd	r0, r5, [sp, #20]
   1282e:	9302      	str	r3, [sp, #8]
   12830:	2300      	movs	r3, #0
   12832:	2202      	movs	r2, #2
   12834:	4618      	mov	r0, r3
   12836:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1283a:	e9cd 3300 	strd	r3, r3, [sp]
   1283e:	4936      	ldr	r1, [pc, #216]	; (12918 <hci_cmd_done+0x110>)
   12840:	f016 f855 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   12844:	b008      	add	sp, #32
   12846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   1284a:	4620      	mov	r0, r4
   1284c:	f007 fb7c 	bl	19f48 <net_buf_id>
   12850:	f04f 080c 	mov.w	r8, #12
   12854:	4d31      	ldr	r5, [pc, #196]	; (1291c <hci_cmd_done+0x114>)
   12856:	fb08 5000 	mla	r0, r8, r0, r5
   1285a:	8843      	ldrh	r3, [r0, #2]
   1285c:	42b3      	cmp	r3, r6
   1285e:	d012      	beq.n	12886 <hci_cmd_done+0x7e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   12860:	4620      	mov	r0, r4
   12862:	f007 fb71 	bl	19f48 <net_buf_id>
   12866:	fb08 5000 	mla	r0, r8, r0, r5
   1286a:	8843      	ldrh	r3, [r0, #2]
   1286c:	2202      	movs	r2, #2
   1286e:	e9cd 6303 	strd	r6, r3, [sp, #12]
   12872:	4b2b      	ldr	r3, [pc, #172]	; (12920 <hci_cmd_done+0x118>)
   12874:	4928      	ldr	r1, [pc, #160]	; (12918 <hci_cmd_done+0x110>)
   12876:	9302      	str	r3, [sp, #8]
   12878:	2300      	movs	r3, #0
   1287a:	4618      	mov	r0, r3
   1287c:	e9cd 3300 	strd	r3, r3, [sp]
   12880:	f016 f835 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		return;
   12884:	e7de      	b.n	12844 <hci_cmd_done+0x3c>
	if (bt_dev.sent_cmd) {
   12886:	4e27      	ldr	r6, [pc, #156]	; (12924 <hci_cmd_done+0x11c>)
   12888:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   1288c:	b120      	cbz	r0, 12898 <hci_cmd_done+0x90>
		net_buf_unref(bt_dev.sent_cmd);
   1288e:	f007 fd8d 	bl	1a3ac <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12892:	2300      	movs	r3, #0
   12894:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   12898:	4620      	mov	r0, r4
   1289a:	f007 fb55 	bl	19f48 <net_buf_id>
   1289e:	260c      	movs	r6, #12
   128a0:	fb06 5000 	mla	r0, r6, r0, r5
   128a4:	6843      	ldr	r3, [r0, #4]
   128a6:	b19b      	cbz	r3, 128d0 <hci_cmd_done+0xc8>
   128a8:	b997      	cbnz	r7, 128d0 <hci_cmd_done+0xc8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   128aa:	4620      	mov	r0, r4
   128ac:	f007 fb4c 	bl	19f48 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   128b0:	2101      	movs	r1, #1
   128b2:	fb06 5000 	mla	r0, r6, r0, r5
   128b6:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   128b8:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   128bc:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   128be:	f003 061f 	and.w	r6, r3, #31
   128c2:	40b1      	lsls	r1, r6
	if (val) {
   128c4:	095b      	lsrs	r3, r3, #5
   128c6:	b1e2      	cbz	r2, 12902 <hci_cmd_done+0xfa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   128c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   128cc:	f015 fff8 	bl	288c0 <atomic_or>
	if (cmd(buf)->sync) {
   128d0:	4620      	mov	r0, r4
   128d2:	f007 fb39 	bl	19f48 <net_buf_id>
   128d6:	260c      	movs	r6, #12
   128d8:	fb06 5000 	mla	r0, r6, r0, r5
   128dc:	6883      	ldr	r3, [r0, #8]
   128de:	2b00      	cmp	r3, #0
   128e0:	d0b0      	beq.n	12844 <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
   128e2:	4620      	mov	r0, r4
   128e4:	f007 fb30 	bl	19f48 <net_buf_id>
   128e8:	4370      	muls	r0, r6
   128ea:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   128ec:	4620      	mov	r0, r4
   128ee:	f007 fb2b 	bl	19f48 <net_buf_id>
   128f2:	fb06 5500 	mla	r5, r6, r0, r5
   128f6:	68a8      	ldr	r0, [r5, #8]
}
   128f8:	b008      	add	sp, #32
   128fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   128fe:	f00e bab3 	b.w	20e68 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12902:	43c9      	mvns	r1, r1
   12904:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12908:	f016 f800 	bl	2890c <atomic_and.isra.0>
   1290c:	e7e0      	b.n	128d0 <hci_cmd_done+0xc8>
   1290e:	bf00      	nop
   12910:	20008d98 	.word	0x20008d98
   12914:	0003097d 	.word	0x0003097d
   12918:	0002d644 	.word	0x0002d644
   1291c:	2002f1f4 	.word	0x2002f1f4
   12920:	000309b2 	.word	0x000309b2
   12924:	20008000 	.word	0x20008000

00012928 <hci_cmd_status>:
{
   12928:	b538      	push	{r3, r4, r5, lr}
   1292a:	2104      	movs	r1, #4
   1292c:	4604      	mov	r4, r0
   1292e:	300c      	adds	r0, #12
   12930:	f007 fe40 	bl	1a5b4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   12934:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   12936:	7801      	ldrb	r1, [r0, #0]
   12938:	4622      	mov	r2, r4
   1293a:	8840      	ldrh	r0, [r0, #2]
   1293c:	f7ff ff64 	bl	12808 <hci_cmd_done>
	if (ncmd) {
   12940:	b125      	cbz	r5, 1294c <hci_cmd_status+0x24>
}
   12942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12946:	4802      	ldr	r0, [pc, #8]	; (12950 <hci_cmd_status+0x28>)
   12948:	f00e ba8e 	b.w	20e68 <z_impl_k_sem_give>
   1294c:	bd38      	pop	{r3, r4, r5, pc}
   1294e:	bf00      	nop
   12950:	20008120 	.word	0x20008120

00012954 <hci_cmd_complete>:
{
   12954:	b538      	push	{r3, r4, r5, lr}
   12956:	2103      	movs	r1, #3
   12958:	4604      	mov	r4, r0
   1295a:	300c      	adds	r0, #12
   1295c:	f007 fe2a 	bl	1a5b4 <net_buf_simple_pull_mem>
	status = buf->data[0];
   12960:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   12962:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   12964:	4622      	mov	r2, r4
   12966:	7819      	ldrb	r1, [r3, #0]
   12968:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1296c:	f7ff ff4c 	bl	12808 <hci_cmd_done>
	if (ncmd) {
   12970:	b125      	cbz	r5, 1297c <hci_cmd_complete+0x28>
}
   12972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12976:	4802      	ldr	r0, [pc, #8]	; (12980 <hci_cmd_complete+0x2c>)
   12978:	f00e ba76 	b.w	20e68 <z_impl_k_sem_give>
   1297c:	bd38      	pop	{r3, r4, r5, pc}
   1297e:	bf00      	nop
   12980:	20008120 	.word	0x20008120

00012984 <hci_num_completed_packets>:
{
   12984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   12988:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   1298a:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1298c:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   1298e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 12a78 <hci_num_completed_packets+0xf4>
	for (i = 0; i < evt->num_handles; i++) {
   12992:	783b      	ldrb	r3, [r7, #0]
   12994:	429d      	cmp	r5, r3
   12996:	db02      	blt.n	1299e <hci_num_completed_packets+0x1a>
}
   12998:	b004      	add	sp, #16
   1299a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1299e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   129a2:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   129a6:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   129aa:	4650      	mov	r0, sl
   129ac:	f002 fc14 	bl	151d8 <bt_conn_lookup_handle>
		if (!conn) {
   129b0:	4604      	mov	r4, r0
   129b2:	b1d8      	cbz	r0, 129ec <hci_num_completed_packets+0x68>
			k_work_submit(&conn->tx_complete_work);
   129b4:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   129b8:	2e00      	cmp	r6, #0
   129ba:	d032      	beq.n	12a22 <hci_num_completed_packets+0x9e>
	__asm__ volatile(
   129bc:	f04f 0320 	mov.w	r3, #32
   129c0:	f3ef 8211 	mrs	r2, BASEPRI
   129c4:	f383 8812 	msr	BASEPRI_MAX, r3
   129c8:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   129cc:	69e3      	ldr	r3, [r4, #28]
   129ce:	b1d3      	cbz	r3, 12a06 <hci_num_completed_packets+0x82>
				conn->pending_no_cb--;
   129d0:	3b01      	subs	r3, #1
   129d2:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   129d4:	f382 8811 	msr	BASEPRI, r2
   129d8:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   129dc:	4620      	mov	r0, r4
   129de:	f002 f9f3 	bl	14dc8 <bt_conn_get_pkts>
   129e2:	3e01      	subs	r6, #1
   129e4:	f00e fa40 	bl	20e68 <z_impl_k_sem_give>
   129e8:	b2b6      	uxth	r6, r6
   129ea:	e7e5      	b.n	129b8 <hci_num_completed_packets+0x34>
			LOG_ERR("No connection for handle %u", handle);
   129ec:	4b23      	ldr	r3, [pc, #140]	; (12a7c <hci_num_completed_packets+0xf8>)
   129ee:	2201      	movs	r2, #1
   129f0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   129f4:	4922      	ldr	r1, [pc, #136]	; (12a80 <hci_num_completed_packets+0xfc>)
   129f6:	4603      	mov	r3, r0
   129f8:	f8cd a00c 	str.w	sl, [sp, #12]
   129fc:	9000      	str	r0, [sp, #0]
   129fe:	f015 ff76 	bl	288ee <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   12a02:	3501      	adds	r5, #1
   12a04:	e7c5      	b.n	12992 <hci_num_completed_packets+0xe>
   12a06:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   12a08:	b97b      	cbnz	r3, 12a2a <hci_num_completed_packets+0xa6>
   12a0a:	f382 8811 	msr	BASEPRI, r2
   12a0e:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   12a12:	2201      	movs	r2, #1
   12a14:	4618      	mov	r0, r3
   12a16:	e9cd 3901 	strd	r3, r9, [sp, #4]
   12a1a:	4919      	ldr	r1, [pc, #100]	; (12a80 <hci_num_completed_packets+0xfc>)
   12a1c:	9300      	str	r3, [sp, #0]
   12a1e:	f015 ff66 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   12a22:	4620      	mov	r0, r4
   12a24:	f002 fba8 	bl	15178 <bt_conn_unref>
   12a28:	e7eb      	b.n	12a02 <hci_num_completed_packets+0x7e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12a2a:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   12a2c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12a2e:	4283      	cmp	r3, r0
	list->head = node;
   12a30:	6161      	str	r1, [r4, #20]
	list->tail = node;
   12a32:	bf08      	it	eq
   12a34:	61a1      	streq	r1, [r4, #24]
   12a36:	f382 8811 	msr	BASEPRI, r2
   12a3a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   12a3e:	f04f 0220 	mov.w	r2, #32
   12a42:	f3ef 8111 	mrs	r1, BASEPRI
   12a46:	f382 8812 	msr	BASEPRI_MAX, r2
   12a4a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   12a4e:	68da      	ldr	r2, [r3, #12]
   12a50:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   12a52:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   12a56:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   12a5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   12a5c:	b94a      	cbnz	r2, 12a72 <hci_num_completed_packets+0xee>
	list->head = node;
   12a5e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   12a62:	f381 8811 	msr	BASEPRI, r1
   12a66:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   12a6a:	4650      	mov	r0, sl
   12a6c:	f00e fd6a 	bl	21544 <k_work_submit>
   12a70:	e7b4      	b.n	129dc <hci_num_completed_packets+0x58>
	parent->next = child;
   12a72:	6013      	str	r3, [r2, #0]
	list->tail = node;
   12a74:	6263      	str	r3, [r4, #36]	; 0x24
}
   12a76:	e7f4      	b.n	12a62 <hci_num_completed_packets+0xde>
   12a78:	00030a01 	.word	0x00030a01
   12a7c:	000309e5 	.word	0x000309e5
   12a80:	0002d644 	.word	0x0002d644

00012a84 <le_conn_update_complete>:
{
   12a84:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   12a86:	68c5      	ldr	r5, [r0, #12]
{
   12a88:	b086      	sub	sp, #24
	handle = sys_le16_to_cpu(evt->handle);
   12a8a:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12a8e:	4630      	mov	r0, r6
   12a90:	f002 fba2 	bl	151d8 <bt_conn_lookup_handle>
	if (!conn) {
   12a94:	4604      	mov	r4, r0
   12a96:	b958      	cbnz	r0, 12ab0 <le_conn_update_complete+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   12a98:	4b2b      	ldr	r3, [pc, #172]	; (12b48 <le_conn_update_complete+0xc4>)
   12a9a:	2201      	movs	r2, #1
   12a9c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12aa0:	492a      	ldr	r1, [pc, #168]	; (12b4c <le_conn_update_complete+0xc8>)
   12aa2:	4603      	mov	r3, r0
   12aa4:	9603      	str	r6, [sp, #12]
   12aa6:	9000      	str	r0, [sp, #0]
   12aa8:	f015 ff21 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   12aac:	b006      	add	sp, #24
   12aae:	bd70      	pop	{r4, r5, r6, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   12ab0:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   12ab2:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   12ab4:	2b1a      	cmp	r3, #26
   12ab6:	d119      	bne.n	12aec <le_conn_update_complete+0x68>
   12ab8:	78c3      	ldrb	r3, [r0, #3]
   12aba:	2b01      	cmp	r3, #1
   12abc:	d12a      	bne.n	12b14 <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
   12ac2:	4630      	mov	r0, r6
   12ac4:	f015 fefc 	bl	288c0 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   12ac8:	0542      	lsls	r2, r0, #21
   12aca:	d40f      	bmi.n	12aec <le_conn_update_complete+0x68>
		param.interval_min = conn->le.interval_min;
   12acc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   12ad0:	4620      	mov	r0, r4
		param.interval_min = conn->le.interval_min;
   12ad2:	9304      	str	r3, [sp, #16]
		param.latency = conn->le.pending_latency;
   12ad4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   12ad8:	a904      	add	r1, sp, #16
		param.latency = conn->le.pending_latency;
   12ada:	9305      	str	r3, [sp, #20]
		bt_l2cap_update_conn_param(conn, &param);
   12adc:	f003 f98a 	bl	15df4 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   12ae0:	4620      	mov	r0, r4
}
   12ae2:	b006      	add	sp, #24
   12ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   12ae8:	f002 bb46 	b.w	15178 <bt_conn_unref>
		if (!evt->status) {
   12aec:	782b      	ldrb	r3, [r5, #0]
   12aee:	b98b      	cbnz	r3, 12b14 <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   12af0:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   12af4:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   12af8:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   12afc:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12b00:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   12b04:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12b08:	f46f 7180 	mvn.w	r1, #256	; 0x100
   12b0c:	4630      	mov	r0, r6
   12b0e:	f015 fefd 	bl	2890c <atomic_and.isra.0>
}
   12b12:	e014      	b.n	12b3e <le_conn_update_complete+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12b14:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   12b18:	05db      	lsls	r3, r3, #23
   12b1a:	d5f5      	bpl.n	12b08 <le_conn_update_complete+0x84>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   12b1c:	782b      	ldrb	r3, [r5, #0]
   12b1e:	2b20      	cmp	r3, #32
   12b20:	d1f2      	bne.n	12b08 <le_conn_update_complete+0x84>
			   conn->le.conn_param_retry_countdown) {
   12b22:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   12b26:	2b00      	cmp	r3, #0
   12b28:	d0ee      	beq.n	12b08 <le_conn_update_complete+0x84>
			conn->le.conn_param_retry_countdown--;
   12b2a:	3b01      	subs	r3, #1
   12b2c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   12b30:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   12b34:	2300      	movs	r3, #0
   12b36:	f104 0060 	add.w	r0, r4, #96	; 0x60
   12b3a:	f00e febb 	bl	218b4 <k_work_schedule>
		notify_le_param_updated(conn);
   12b3e:	4620      	mov	r0, r4
   12b40:	f002 fc9a 	bl	15478 <notify_le_param_updated>
   12b44:	e7cc      	b.n	12ae0 <le_conn_update_complete+0x5c>
   12b46:	bf00      	nop
   12b48:	0003081a 	.word	0x0003081a
   12b4c:	0002d644 	.word	0x0002d644

00012b50 <bt_hci_cmd_state_set_init>:
{
   12b50:	b510      	push	{r4, lr}
	state->bit = bit;
   12b52:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   12b56:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   12b5a:	460c      	mov	r4, r1
	state->val = val;
   12b5c:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   12b5e:	f007 f9f3 	bl	19f48 <net_buf_id>
   12b62:	220c      	movs	r2, #12
   12b64:	4b02      	ldr	r3, [pc, #8]	; (12b70 <bt_hci_cmd_state_set_init+0x20>)
   12b66:	fb02 3300 	mla	r3, r2, r0, r3
   12b6a:	605c      	str	r4, [r3, #4]
}
   12b6c:	bd10      	pop	{r4, pc}
   12b6e:	bf00      	nop
   12b70:	2002f1f4 	.word	0x2002f1f4

00012b74 <bt_hci_cmd_create>:
{
   12b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   12b78:	f04f 32ff 	mov.w	r2, #4294967295
   12b7c:	4606      	mov	r6, r0
   12b7e:	f04f 33ff 	mov.w	r3, #4294967295
   12b82:	481e      	ldr	r0, [pc, #120]	; (12bfc <bt_hci_cmd_create+0x88>)
   12b84:	460f      	mov	r7, r1
   12b86:	f017 fd00 	bl	2a58a <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   12b8a:	4604      	mov	r4, r0
   12b8c:	b958      	cbnz	r0, 12ba6 <bt_hci_cmd_create+0x32>
   12b8e:	491c      	ldr	r1, [pc, #112]	; (12c00 <bt_hci_cmd_create+0x8c>)
   12b90:	481c      	ldr	r0, [pc, #112]	; (12c04 <bt_hci_cmd_create+0x90>)
   12b92:	f240 1301 	movw	r3, #257	; 0x101
   12b96:	4a1c      	ldr	r2, [pc, #112]	; (12c08 <bt_hci_cmd_create+0x94>)
   12b98:	f014 fd2b 	bl	275f2 <assert_print>
   12b9c:	f240 1101 	movw	r1, #257	; 0x101
   12ba0:	4819      	ldr	r0, [pc, #100]	; (12c08 <bt_hci_cmd_create+0x94>)
   12ba2:	f014 fd1f 	bl	275e4 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12ba6:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   12baa:	f100 0a0c 	add.w	sl, r0, #12
   12bae:	2101      	movs	r1, #1
   12bb0:	4650      	mov	r0, sl
   12bb2:	f007 fae9 	bl	1a188 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   12bb6:	4620      	mov	r0, r4
   12bb8:	f884 8018 	strb.w	r8, [r4, #24]
   12bbc:	f007 f9c4 	bl	19f48 <net_buf_id>
   12bc0:	f04f 090c 	mov.w	r9, #12
   12bc4:	4d11      	ldr	r5, [pc, #68]	; (12c0c <bt_hci_cmd_create+0x98>)
   12bc6:	fb09 5000 	mla	r0, r9, r0, r5
   12bca:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   12bcc:	4620      	mov	r0, r4
   12bce:	f007 f9bb 	bl	19f48 <net_buf_id>
   12bd2:	fb09 5000 	mla	r0, r9, r0, r5
   12bd6:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   12bda:	4620      	mov	r0, r4
   12bdc:	f007 f9b4 	bl	19f48 <net_buf_id>
   12be0:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   12be4:	2103      	movs	r1, #3
   12be6:	4650      	mov	r0, sl
   12be8:	f8c5 8004 	str.w	r8, [r5, #4]
   12bec:	f007 fd00 	bl	1a5f0 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   12bf0:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   12bf2:	7087      	strb	r7, [r0, #2]
}
   12bf4:	4620      	mov	r0, r4
   12bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12bfa:	bf00      	nop
   12bfc:	20008d98 	.word	0x20008d98
   12c00:	000323e2 	.word	0x000323e2
   12c04:	0002e715 	.word	0x0002e715
   12c08:	000308a8 	.word	0x000308a8
   12c0c:	2002f1f4 	.word	0x2002f1f4

00012c10 <bt_hci_cmd_send_sync>:
{
   12c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c14:	4607      	mov	r7, r0
   12c16:	4615      	mov	r5, r2
	if (!buf) {
   12c18:	460c      	mov	r4, r1
{
   12c1a:	b08c      	sub	sp, #48	; 0x30
	if (!buf) {
   12c1c:	b921      	cbnz	r1, 12c28 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   12c1e:	f7ff ffa9 	bl	12b74 <bt_hci_cmd_create>
		if (!buf) {
   12c22:	4604      	mov	r4, r0
   12c24:	2800      	cmp	r0, #0
   12c26:	d056      	beq.n	12cd6 <bt_hci_cmd_send_sync+0xc6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   12c28:	ae06      	add	r6, sp, #24
   12c2a:	2201      	movs	r2, #1
   12c2c:	2100      	movs	r1, #0
   12c2e:	4630      	mov	r0, r6
   12c30:	f019 f891 	bl	2bd56 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   12c34:	4620      	mov	r0, r4
   12c36:	f007 f987 	bl	19f48 <net_buf_id>
   12c3a:	230c      	movs	r3, #12
   12c3c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 12cdc <bt_hci_cmd_send_sync+0xcc>
   12c40:	fb03 8000 	mla	r0, r3, r0, r8
   12c44:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   12c46:	4620      	mov	r0, r4
   12c48:	f007 fbf4 	bl	1a434 <net_buf_ref>
   12c4c:	4601      	mov	r1, r0
   12c4e:	4824      	ldr	r0, [pc, #144]	; (12ce0 <bt_hci_cmd_send_sync+0xd0>)
   12c50:	f007 fb86 	bl	1a360 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   12c54:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   12c58:	4630      	mov	r0, r6
   12c5a:	2300      	movs	r3, #0
   12c5c:	f00e f948 	bl	20ef0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   12c60:	4606      	mov	r6, r0
   12c62:	b180      	cbz	r0, 12c86 <bt_hci_cmd_send_sync+0x76>
   12c64:	f240 1349 	movw	r3, #329	; 0x149
   12c68:	4a1e      	ldr	r2, [pc, #120]	; (12ce4 <bt_hci_cmd_send_sync+0xd4>)
   12c6a:	491f      	ldr	r1, [pc, #124]	; (12ce8 <bt_hci_cmd_send_sync+0xd8>)
   12c6c:	481f      	ldr	r0, [pc, #124]	; (12cec <bt_hci_cmd_send_sync+0xdc>)
   12c6e:	f014 fcc0 	bl	275f2 <assert_print>
   12c72:	4631      	mov	r1, r6
   12c74:	481e      	ldr	r0, [pc, #120]	; (12cf0 <bt_hci_cmd_send_sync+0xe0>)
   12c76:	f014 fcbc 	bl	275f2 <assert_print>
   12c7a:	4040      	eors	r0, r0
   12c7c:	f380 8811 	msr	BASEPRI, r0
   12c80:	f04f 0003 	mov.w	r0, #3
   12c84:	df02      	svc	2
	status = cmd(buf)->status;
   12c86:	4620      	mov	r0, r4
   12c88:	f007 f95e 	bl	19f48 <net_buf_id>
   12c8c:	230c      	movs	r3, #12
   12c8e:	4358      	muls	r0, r3
   12c90:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   12c94:	b1be      	cbz	r6, 12cc6 <bt_hci_cmd_send_sync+0xb6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   12c96:	4b17      	ldr	r3, [pc, #92]	; (12cf4 <bt_hci_cmd_send_sync+0xe4>)
   12c98:	2202      	movs	r2, #2
   12c9a:	9302      	str	r3, [sp, #8]
   12c9c:	2300      	movs	r3, #0
   12c9e:	4916      	ldr	r1, [pc, #88]	; (12cf8 <bt_hci_cmd_send_sync+0xe8>)
   12ca0:	4618      	mov	r0, r3
   12ca2:	e9cd 3300 	strd	r3, r3, [sp]
   12ca6:	e9cd 7603 	strd	r7, r6, [sp, #12]
   12caa:	f015 fe20 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   12cae:	4620      	mov	r0, r4
   12cb0:	f007 fb7c 	bl	1a3ac <net_buf_unref>
			return -ECONNREFUSED;
   12cb4:	2e09      	cmp	r6, #9
   12cb6:	bf14      	ite	ne
   12cb8:	f06f 0004 	mvnne.w	r0, #4
   12cbc:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   12cc0:	b00c      	add	sp, #48	; 0x30
   12cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   12cc6:	b115      	cbz	r5, 12cce <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   12cc8:	602c      	str	r4, [r5, #0]
	return 0;
   12cca:	2000      	movs	r0, #0
   12ccc:	e7f8      	b.n	12cc0 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   12cce:	4620      	mov	r0, r4
   12cd0:	f007 fb6c 	bl	1a3ac <net_buf_unref>
   12cd4:	e7f9      	b.n	12cca <bt_hci_cmd_send_sync+0xba>
			return -ENOBUFS;
   12cd6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12cda:	e7f1      	b.n	12cc0 <bt_hci_cmd_send_sync+0xb0>
   12cdc:	2002f1f4 	.word	0x2002f1f4
   12ce0:	20008144 	.word	0x20008144
   12ce4:	000308a8 	.word	0x000308a8
   12ce8:	0002f710 	.word	0x0002f710
   12cec:	0002e715 	.word	0x0002e715
   12cf0:	00030a18 	.word	0x00030a18
   12cf4:	00030a38 	.word	0x00030a38
   12cf8:	0002d644 	.word	0x0002d644

00012cfc <hci_le_read_max_data_len>:
{
   12cfc:	b570      	push	{r4, r5, r6, lr}
   12cfe:	b086      	sub	sp, #24
   12d00:	4606      	mov	r6, r0
   12d02:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   12d04:	f242 002f 	movw	r0, #8239	; 0x202f
   12d08:	2100      	movs	r1, #0
   12d0a:	aa05      	add	r2, sp, #20
   12d0c:	f7ff ff80 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
   12d10:	4604      	mov	r4, r0
   12d12:	b160      	cbz	r0, 12d2e <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   12d14:	4b0b      	ldr	r3, [pc, #44]	; (12d44 <hci_le_read_max_data_len+0x48>)
   12d16:	2201      	movs	r2, #1
   12d18:	9302      	str	r3, [sp, #8]
   12d1a:	2300      	movs	r3, #0
   12d1c:	490a      	ldr	r1, [pc, #40]	; (12d48 <hci_le_read_max_data_len+0x4c>)
   12d1e:	4618      	mov	r0, r3
   12d20:	e9cd 3300 	strd	r3, r3, [sp]
   12d24:	f015 fde3 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   12d28:	4620      	mov	r0, r4
   12d2a:	b006      	add	sp, #24
   12d2c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   12d2e:	9805      	ldr	r0, [sp, #20]
   12d30:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   12d32:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   12d36:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   12d38:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   12d3c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   12d3e:	f007 fb35 	bl	1a3ac <net_buf_unref>
	return 0;
   12d42:	e7f1      	b.n	12d28 <hci_le_read_max_data_len+0x2c>
   12d44:	00030a54 	.word	0x00030a54
   12d48:	0002d644 	.word	0x0002d644

00012d4c <bt_hci_le_rand>:
{
   12d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12d4e:	4b14      	ldr	r3, [pc, #80]	; (12da0 <bt_hci_le_rand+0x54>)
{
   12d50:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12d52:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   12d56:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   12d58:	2b00      	cmp	r3, #0
   12d5a:	da1d      	bge.n	12d98 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   12d5c:	b914      	cbnz	r4, 12d64 <bt_hci_le_rand+0x18>
	return 0;
   12d5e:	4620      	mov	r0, r4
}
   12d60:	b003      	add	sp, #12
   12d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   12d64:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   12d66:	f04f 0100 	mov.w	r1, #0
   12d6a:	f242 0018 	movw	r0, #8216	; 0x2018
   12d6e:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   12d70:	4626      	mov	r6, r4
   12d72:	bf28      	it	cs
   12d74:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   12d76:	f7ff ff4b 	bl	12c10 <bt_hci_cmd_send_sync>
		if (err) {
   12d7a:	2800      	cmp	r0, #0
   12d7c:	d1f0      	bne.n	12d60 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   12d7e:	9f01      	ldr	r7, [sp, #4]
   12d80:	4632      	mov	r2, r6
   12d82:	68f9      	ldr	r1, [r7, #12]
   12d84:	4628      	mov	r0, r5
   12d86:	3101      	adds	r1, #1
   12d88:	f019 f9a0 	bl	2c0cc <memcpy>
		net_buf_unref(rsp);
   12d8c:	4638      	mov	r0, r7
   12d8e:	f007 fb0d 	bl	1a3ac <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   12d92:	4435      	add	r5, r6
		len -= count;
   12d94:	1ba4      	subs	r4, r4, r6
   12d96:	e7e1      	b.n	12d5c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   12d98:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12d9c:	e7e0      	b.n	12d60 <bt_hci_le_rand+0x14>
   12d9e:	bf00      	nop
   12da0:	20008000 	.word	0x20008000

00012da4 <bt_hci_le_enh_conn_complete>:
{
   12da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12da8:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   12dac:	2700      	movs	r7, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   12dae:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   12db2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   12db6:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   12db8:	4a9f      	ldr	r2, [pc, #636]	; (13038 <bt_hci_le_enh_conn_complete+0x294>)
   12dba:	b29b      	uxth	r3, r3
   12dbc:	8811      	ldrh	r1, [r2, #0]
{
   12dbe:	b08a      	sub	sp, #40	; 0x28
		if (disconnected_handles[i] == handle) {
   12dc0:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   12dc2:	bf04      	itt	eq
   12dc4:	8017      	strheq	r7, [r2, #0]
			return true;
   12dc6:	2701      	moveq	r7, #1
	bt_id_pending_keys_update();
   12dc8:	f000 fe96 	bl	13af8 <bt_id_pending_keys_update>
	if (evt->status) {
   12dcc:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12dce:	fa1f f988 	uxth.w	r9, r8
	if (evt->status) {
   12dd2:	b37e      	cbz	r6, 12e34 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12dd4:	2e3c      	cmp	r6, #60	; 0x3c
   12dd6:	d121      	bne.n	12e1c <bt_hci_le_enh_conn_complete+0x78>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12dd8:	f001 fada 	bl	14390 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12ddc:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12de0:	3010      	adds	r0, #16
   12de2:	f015 fd93 	bl	2890c <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12de6:	2000      	movs	r0, #0
   12de8:	f7ff fb02 	bl	123f0 <find_pending_connect.part.0>
		if (!conn) {
   12dec:	4604      	mov	r4, r0
   12dee:	b958      	cbnz	r0, 12e08 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   12df0:	4b92      	ldr	r3, [pc, #584]	; (1303c <bt_hci_le_enh_conn_complete+0x298>)
   12df2:	2201      	movs	r2, #1
   12df4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   12df8:	4991      	ldr	r1, [pc, #580]	; (13040 <bt_hci_le_enh_conn_complete+0x29c>)
   12dfa:	4603      	mov	r3, r0
   12dfc:	9000      	str	r0, [sp, #0]
   12dfe:	f015 fd76 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   12e02:	b00a      	add	sp, #40	; 0x28
   12e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12e08:	7306      	strb	r6, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12e0a:	2100      	movs	r1, #0
   12e0c:	f002 f9ec 	bl	151e8 <bt_conn_set_state>
		bt_conn_unref(conn);
   12e10:	4620      	mov	r0, r4
}
   12e12:	b00a      	add	sp, #40	; 0x28
   12e14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   12e18:	f002 b9ae 	b.w	15178 <bt_conn_unref>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   12e1c:	4b89      	ldr	r3, [pc, #548]	; (13044 <bt_hci_le_enh_conn_complete+0x2a0>)
   12e1e:	2202      	movs	r2, #2
   12e20:	9302      	str	r3, [sp, #8]
   12e22:	2300      	movs	r3, #0
   12e24:	4986      	ldr	r1, [pc, #536]	; (13040 <bt_hci_le_enh_conn_complete+0x29c>)
   12e26:	4618      	mov	r0, r3
   12e28:	e9cd 3300 	strd	r3, r3, [sp]
   12e2c:	9603      	str	r6, [sp, #12]
   12e2e:	f015 fd5e 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		return;
   12e32:	e7e6      	b.n	12e02 <bt_hci_le_enh_conn_complete+0x5e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12e34:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12e36:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12e3a:	3b02      	subs	r3, #2
   12e3c:	2b01      	cmp	r3, #1
   12e3e:	d827      	bhi.n	12e90 <bt_hci_le_enh_conn_complete+0xec>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12e40:	4651      	mov	r1, sl
   12e42:	a808      	add	r0, sp, #32
   12e44:	f015 fd4c 	bl	288e0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12e48:	f89d 3020 	ldrb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12e4c:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12e50:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12e52:	f10d 0019 	add.w	r0, sp, #25
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12e56:	f88d 3020 	strb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12e5a:	f015 fd3c 	bl	288d6 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12e5e:	2301      	movs	r3, #1
   12e60:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12e64:	78eb      	ldrb	r3, [r5, #3]
   12e66:	2b01      	cmp	r3, #1
   12e68:	d025      	beq.n	12eb6 <bt_hci_le_enh_conn_complete+0x112>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   12e6a:	4650      	mov	r0, sl
   12e6c:	f7ff f98c 	bl	12188 <bt_addr_le_str>
   12e70:	4b75      	ldr	r3, [pc, #468]	; (13048 <bt_hci_le_enh_conn_complete+0x2a4>)
   12e72:	9003      	str	r0, [sp, #12]
   12e74:	9302      	str	r3, [sp, #8]
   12e76:	2300      	movs	r3, #0
   12e78:	2201      	movs	r2, #1
   12e7a:	4618      	mov	r0, r3
   12e7c:	e9cd 3300 	strd	r3, r3, [sp]
   12e80:	496f      	ldr	r1, [pc, #444]	; (13040 <bt_hci_le_enh_conn_complete+0x29c>)
   12e82:	f015 fd34 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   12e86:	211f      	movs	r1, #31
   12e88:	4648      	mov	r0, r9
   12e8a:	f015 fd57 	bl	2893c <bt_hci_disconnect>
		return;
   12e8e:	e7b8      	b.n	12e02 <bt_hci_le_enh_conn_complete+0x5e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12e90:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   12e92:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12e94:	2b01      	cmp	r3, #1
   12e96:	bf04      	itt	eq
   12e98:	4b6c      	ldreq	r3, [pc, #432]	; (1304c <bt_hci_le_enh_conn_complete+0x2a8>)
   12e9a:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   12e9e:	4630      	mov	r0, r6
   12ea0:	f015 fe79 	bl	28b96 <bt_lookup_id_addr>
   12ea4:	4601      	mov	r1, r0
   12ea6:	a808      	add	r0, sp, #32
   12ea8:	f015 fd1a 	bl	288e0 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   12eac:	4651      	mov	r1, sl
   12eae:	a806      	add	r0, sp, #24
   12eb0:	f015 fd16 	bl	288e0 <bt_addr_le_copy>
   12eb4:	e7d6      	b.n	12e64 <bt_hci_le_enh_conn_complete+0xc0>
   12eb6:	a808      	add	r0, sp, #32
   12eb8:	f7ff fa9a 	bl	123f0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12ebc:	78eb      	ldrb	r3, [r5, #3]
   12ebe:	4604      	mov	r4, r0
   12ec0:	2b01      	cmp	r3, #1
   12ec2:	d10a      	bne.n	12eda <bt_hci_le_enh_conn_complete+0x136>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12ec4:	f001 fa64 	bl	14390 <bt_le_adv_lookup_legacy>
   12ec8:	4606      	mov	r6, r0
   12eca:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12ece:	3010      	adds	r0, #16
   12ed0:	f015 fd1c 	bl	2890c <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   12ed4:	4630      	mov	r0, r6
   12ed6:	f015 ff8c 	bl	28df2 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   12eda:	2c00      	cmp	r4, #0
   12edc:	d0c5      	beq.n	12e6a <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   12ede:	4620      	mov	r0, r4
	conn->err = 0U;
   12ee0:	2200      	movs	r2, #0
	conn->handle = handle;
   12ee2:	f820 8b90 	strh.w	r8, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12ee6:	a908      	add	r1, sp, #32
   12ee8:	f015 fcfa 	bl	288e0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12eec:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   12ef0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12ef4:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   12ef8:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12efc:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   12f00:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12f04:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   12f06:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12f08:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   12f0a:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12f0c:	d115      	bne.n	12f3a <bt_hci_le_enh_conn_complete+0x196>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   12f0e:	a906      	add	r1, sp, #24
   12f10:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12f14:	f015 fce4 	bl	288e0 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12f18:	f001 fa3a 	bl	14390 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   12f1c:	7a21      	ldrb	r1, [r4, #8]
   12f1e:	4a4b      	ldr	r2, [pc, #300]	; (1304c <bt_hci_le_enh_conn_complete+0x2a8>)
   12f20:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   12f24:	4411      	add	r1, r2
   12f26:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12f2a:	f015 fcd9 	bl	288e0 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   12f2e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   12f32:	065d      	lsls	r5, r3, #25
   12f34:	d501      	bpl.n	12f3a <bt_hci_le_enh_conn_complete+0x196>
			bt_le_adv_resume();
   12f36:	f001 fbef 	bl	14718 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12f3a:	2107      	movs	r1, #7
   12f3c:	4620      	mov	r0, r4
   12f3e:	f002 f953 	bl	151e8 <bt_conn_set_state>
	if (is_disconnected) {
   12f42:	b11f      	cbz	r7, 12f4c <bt_hci_le_enh_conn_complete+0x1a8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12f44:	2101      	movs	r1, #1
   12f46:	4620      	mov	r0, r4
   12f48:	f002 f94e 	bl	151e8 <bt_conn_set_state>
	bt_conn_connected(conn);
   12f4c:	4620      	mov	r0, r4
   12f4e:	f016 f801 	bl	28f54 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   12f52:	7b63      	ldrb	r3, [r4, #13]
   12f54:	2b07      	cmp	r3, #7
   12f56:	d167      	bne.n	13028 <bt_hci_le_enh_conn_complete+0x284>
   12f58:	1d23      	adds	r3, r4, #4
   12f5a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12f5e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12f62:	4e3a      	ldr	r6, [pc, #232]	; (1304c <bt_hci_le_enh_conn_complete+0x2a8>)
   12f64:	d125      	bne.n	12fb2 <bt_hci_le_enh_conn_complete+0x20e>
   12f66:	78e3      	ldrb	r3, [r4, #3]
   12f68:	b11b      	cbz	r3, 12f72 <bt_hci_le_enh_conn_complete+0x1ce>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   12f6a:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   12f6e:	0718      	lsls	r0, r3, #28
   12f70:	d51f      	bpl.n	12fb2 <bt_hci_le_enh_conn_complete+0x20e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12f72:	2102      	movs	r1, #2
   12f74:	f242 0016 	movw	r0, #8214	; 0x2016
   12f78:	f7ff fdfc 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   12f7c:	4605      	mov	r5, r0
   12f7e:	2800      	cmp	r0, #0
   12f80:	d056      	beq.n	13030 <bt_hci_le_enh_conn_complete+0x28c>
   12f82:	2102      	movs	r1, #2
   12f84:	300c      	adds	r0, #12
   12f86:	f007 fb33 	bl	1a5f0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12f8a:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12f8c:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   12f8e:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12f90:	4629      	mov	r1, r5
   12f92:	f242 0016 	movw	r0, #8214	; 0x2016
   12f96:	f7ff fe3b 	bl	12c10 <bt_hci_cmd_send_sync>
		if (err) {
   12f9a:	b150      	cbz	r0, 12fb2 <bt_hci_le_enh_conn_complete+0x20e>
			LOG_ERR("Failed read remote features (%d)", err);
   12f9c:	4b2c      	ldr	r3, [pc, #176]	; (13050 <bt_hci_le_enh_conn_complete+0x2ac>)
   12f9e:	9003      	str	r0, [sp, #12]
   12fa0:	9302      	str	r3, [sp, #8]
   12fa2:	2300      	movs	r3, #0
   12fa4:	2201      	movs	r2, #1
   12fa6:	4618      	mov	r0, r3
   12fa8:	e9cd 3300 	strd	r3, r3, [sp]
   12fac:	4924      	ldr	r1, [pc, #144]	; (13040 <bt_hci_le_enh_conn_complete+0x29c>)
   12fae:	f015 fc9e 	bl	288ee <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12fb2:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   12fb6:	07d9      	lsls	r1, r3, #31
   12fb8:	d513      	bpl.n	12fe2 <bt_hci_le_enh_conn_complete+0x23e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12fba:	2500      	movs	r5, #0
   12fbc:	2302      	movs	r3, #2
   12fbe:	4629      	mov	r1, r5
   12fc0:	461a      	mov	r2, r3
   12fc2:	4620      	mov	r0, r4
   12fc4:	9500      	str	r5, [sp, #0]
   12fc6:	f015 fcf2 	bl	289ae <bt_le_set_phy>
		if (err) {
   12fca:	b150      	cbz	r0, 12fe2 <bt_hci_le_enh_conn_complete+0x23e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   12fcc:	4b21      	ldr	r3, [pc, #132]	; (13054 <bt_hci_le_enh_conn_complete+0x2b0>)
   12fce:	9003      	str	r0, [sp, #12]
   12fd0:	e9cd 5301 	strd	r5, r3, [sp, #4]
   12fd4:	2201      	movs	r2, #1
   12fd6:	462b      	mov	r3, r5
   12fd8:	4628      	mov	r0, r5
   12fda:	4919      	ldr	r1, [pc, #100]	; (13040 <bt_hci_le_enh_conn_complete+0x29c>)
   12fdc:	9500      	str	r5, [sp, #0]
   12fde:	f015 fc86 	bl	288ee <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12fe2:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   12fe6:	069a      	lsls	r2, r3, #26
   12fe8:	d51e      	bpl.n	13028 <bt_hci_le_enh_conn_complete+0x284>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12fea:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   12fee:	689b      	ldr	r3, [r3, #8]
   12ff0:	079b      	lsls	r3, r3, #30
   12ff2:	d519      	bpl.n	13028 <bt_hci_le_enh_conn_complete+0x284>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12ff4:	f10d 0116 	add.w	r1, sp, #22
   12ff8:	a805      	add	r0, sp, #20
   12ffa:	f7ff fe7f 	bl	12cfc <hci_le_read_max_data_len>
			if (!err) {
   12ffe:	4605      	mov	r5, r0
   13000:	b990      	cbnz	r0, 13028 <bt_hci_le_enh_conn_complete+0x284>
				err = bt_le_set_data_len(conn,
   13002:	4620      	mov	r0, r4
   13004:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   13008:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1300c:	f015 fcb1 	bl	28972 <bt_le_set_data_len>
				if (err) {
   13010:	b150      	cbz	r0, 13028 <bt_hci_le_enh_conn_complete+0x284>
					LOG_ERR("Failed to set data len (%d)", err);
   13012:	4b11      	ldr	r3, [pc, #68]	; (13058 <bt_hci_le_enh_conn_complete+0x2b4>)
   13014:	9003      	str	r0, [sp, #12]
   13016:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1301a:	2201      	movs	r2, #1
   1301c:	462b      	mov	r3, r5
   1301e:	4628      	mov	r0, r5
   13020:	4907      	ldr	r1, [pc, #28]	; (13040 <bt_hci_le_enh_conn_complete+0x29c>)
   13022:	9500      	str	r5, [sp, #0]
   13024:	f015 fc63 	bl	288ee <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   13028:	4620      	mov	r0, r4
   1302a:	f002 f8a5 	bl	15178 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1302e:	e6e8      	b.n	12e02 <bt_hci_le_enh_conn_complete+0x5e>
		return -ENOBUFS;
   13030:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13034:	e7b2      	b.n	12f9c <bt_hci_le_enh_conn_complete+0x1f8>
   13036:	bf00      	nop
   13038:	2002f7ba 	.word	0x2002f7ba
   1303c:	00030a74 	.word	0x00030a74
   13040:	0002d644 	.word	0x0002d644
   13044:	00030a95 	.word	0x00030a95
   13048:	00030aae 	.word	0x00030aae
   1304c:	20008000 	.word	0x20008000
   13050:	00030aca 	.word	0x00030aca
   13054:	00030aeb 	.word	0x00030aeb
   13058:	00030b02 	.word	0x00030b02

0001305c <le_legacy_conn_complete>:
{
   1305c:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1305e:	68c1      	ldr	r1, [r0, #12]
{
   13060:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   13062:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13064:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   13066:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   1306a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1306e:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   13070:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   13074:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   13078:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1307c:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   13080:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   13084:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   13088:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1308c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   13090:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   13094:	7b4b      	ldrb	r3, [r1, #13]
   13096:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1309a:	f015 fc21 	bl	288e0 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1309e:	4907      	ldr	r1, [pc, #28]	; (130bc <le_legacy_conn_complete+0x60>)
   130a0:	f10d 000b 	add.w	r0, sp, #11
   130a4:	f015 fc17 	bl	288d6 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   130a8:	f10d 0011 	add.w	r0, sp, #17
   130ac:	f015 fc13 	bl	288d6 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   130b0:	4668      	mov	r0, sp
   130b2:	f7ff fe77 	bl	12da4 <bt_hci_le_enh_conn_complete>
}
   130b6:	b009      	add	sp, #36	; 0x24
   130b8:	f85d fb04 	ldr.w	pc, [sp], #4
   130bc:	000306e7 	.word	0x000306e7

000130c0 <bt_security_err_get>:
	switch (hci_err) {
   130c0:	2829      	cmp	r0, #41	; 0x29
   130c2:	bf9a      	itte	ls
   130c4:	4b01      	ldrls	r3, [pc, #4]	; (130cc <bt_security_err_get+0xc>)
   130c6:	5c18      	ldrbls	r0, [r3, r0]
{
   130c8:	2009      	movhi	r0, #9
}
   130ca:	4770      	bx	lr
   130cc:	00030da4 	.word	0x00030da4

000130d0 <hci_encrypt_key_refresh_complete>:
{
   130d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   130d2:	68c3      	ldr	r3, [r0, #12]
{
   130d4:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(evt->handle);
   130d6:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   130da:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   130dc:	4630      	mov	r0, r6
   130de:	f002 f87b 	bl	151d8 <bt_conn_lookup_handle>
	if (!conn) {
   130e2:	4604      	mov	r4, r0
   130e4:	b958      	cbnz	r0, 130fe <hci_encrypt_key_refresh_complete+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   130e6:	4b1e      	ldr	r3, [pc, #120]	; (13160 <hci_encrypt_key_refresh_complete+0x90>)
   130e8:	2201      	movs	r2, #1
   130ea:	e9cd 0301 	strd	r0, r3, [sp, #4]
   130ee:	491d      	ldr	r1, [pc, #116]	; (13164 <hci_encrypt_key_refresh_complete+0x94>)
   130f0:	4603      	mov	r3, r0
   130f2:	9603      	str	r6, [sp, #12]
   130f4:	9000      	str	r0, [sp, #0]
   130f6:	f015 fbfa 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   130fa:	b005      	add	sp, #20
   130fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   130fe:	b16d      	cbz	r5, 1311c <hci_encrypt_key_refresh_complete+0x4c>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   13100:	4628      	mov	r0, r5
   13102:	f7ff ffdd 	bl	130c0 <bt_security_err_get>
   13106:	4629      	mov	r1, r5
   13108:	4602      	mov	r2, r0
   1310a:	4620      	mov	r0, r4
   1310c:	f002 faa4 	bl	15658 <bt_conn_security_changed>
	bt_conn_unref(conn);
   13110:	4620      	mov	r0, r4
}
   13112:	b005      	add	sp, #20
   13114:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   13118:	f002 b82e 	b.w	15178 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1311c:	7887      	ldrb	r7, [r0, #2]
   1311e:	2f01      	cmp	r7, #1
   13120:	d1ee      	bne.n	13100 <hci_encrypt_key_refresh_complete+0x30>
		bt_smp_update_keys(conn);
   13122:	f006 fc2b 	bl	1997c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   13126:	4620      	mov	r0, r4
   13128:	f015 fbb1 	bl	2888e <update_sec_level>
   1312c:	4606      	mov	r6, r0
   1312e:	2800      	cmp	r0, #0
   13130:	d1e6      	bne.n	13100 <hci_encrypt_key_refresh_complete+0x30>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   13132:	2005      	movs	r0, #5
   13134:	f7ff ffc4 	bl	130c0 <bt_security_err_get>
   13138:	2105      	movs	r1, #5
   1313a:	4602      	mov	r2, r0
   1313c:	4620      	mov	r0, r4
   1313e:	f002 fa8b 	bl	15658 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   13142:	4b09      	ldr	r3, [pc, #36]	; (13168 <hci_encrypt_key_refresh_complete+0x98>)
   13144:	4630      	mov	r0, r6
   13146:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1314a:	463a      	mov	r2, r7
   1314c:	4633      	mov	r3, r6
   1314e:	4905      	ldr	r1, [pc, #20]	; (13164 <hci_encrypt_key_refresh_complete+0x94>)
   13150:	9600      	str	r6, [sp, #0]
   13152:	f015 fbcc 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   13156:	2105      	movs	r1, #5
   13158:	4620      	mov	r0, r4
   1315a:	f015 ff04 	bl	28f66 <bt_conn_disconnect>
   1315e:	e7d7      	b.n	13110 <hci_encrypt_key_refresh_complete+0x40>
   13160:	0003083e 	.word	0x0003083e
   13164:	0002d644 	.word	0x0002d644
   13168:	00030b1e 	.word	0x00030b1e

0001316c <hci_encrypt_change>:
{
   1316c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1316e:	68c6      	ldr	r6, [r0, #12]
{
   13170:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13172:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   13176:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   13178:	4638      	mov	r0, r7
   1317a:	f002 f82d 	bl	151d8 <bt_conn_lookup_handle>
	if (!conn) {
   1317e:	4604      	mov	r4, r0
   13180:	b958      	cbnz	r0, 1319a <hci_encrypt_change+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   13182:	4b23      	ldr	r3, [pc, #140]	; (13210 <hci_encrypt_change+0xa4>)
   13184:	2201      	movs	r2, #1
   13186:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1318a:	4922      	ldr	r1, [pc, #136]	; (13214 <hci_encrypt_change+0xa8>)
   1318c:	4603      	mov	r3, r0
   1318e:	9703      	str	r7, [sp, #12]
   13190:	9000      	str	r0, [sp, #0]
   13192:	f015 fbac 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   13196:	b005      	add	sp, #20
   13198:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   1319a:	b16d      	cbz	r5, 131b8 <hci_encrypt_change+0x4c>
		bt_conn_security_changed(conn, status,
   1319c:	4628      	mov	r0, r5
   1319e:	f7ff ff8f 	bl	130c0 <bt_security_err_get>
   131a2:	4629      	mov	r1, r5
   131a4:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   131a6:	4620      	mov	r0, r4
   131a8:	f002 fa56 	bl	15658 <bt_conn_security_changed>
	bt_conn_unref(conn);
   131ac:	4620      	mov	r0, r4
}
   131ae:	b005      	add	sp, #20
   131b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   131b4:	f001 bfe0 	b.w	15178 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   131b8:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   131ba:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   131bc:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   131be:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   131c0:	d005      	beq.n	131ce <hci_encrypt_change+0x62>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   131c2:	2000      	movs	r0, #0
   131c4:	f7ff ff7c 	bl	130c0 <bt_security_err_get>
   131c8:	2100      	movs	r1, #0
   131ca:	4602      	mov	r2, r0
   131cc:	e7eb      	b.n	131a6 <hci_encrypt_change+0x3a>
		if (conn->encrypt) {
   131ce:	b10b      	cbz	r3, 131d4 <hci_encrypt_change+0x68>
			bt_smp_update_keys(conn);
   131d0:	f006 fbd4 	bl	1997c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   131d4:	4620      	mov	r0, r4
   131d6:	f015 fb5a 	bl	2888e <update_sec_level>
   131da:	4605      	mov	r5, r0
   131dc:	2800      	cmp	r0, #0
   131de:	d1f0      	bne.n	131c2 <hci_encrypt_change+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   131e0:	2005      	movs	r0, #5
   131e2:	f7ff ff6d 	bl	130c0 <bt_security_err_get>
   131e6:	2105      	movs	r1, #5
   131e8:	4602      	mov	r2, r0
   131ea:	4620      	mov	r0, r4
   131ec:	f002 fa34 	bl	15658 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   131f0:	4b09      	ldr	r3, [pc, #36]	; (13218 <hci_encrypt_change+0xac>)
   131f2:	4628      	mov	r0, r5
   131f4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   131f8:	2201      	movs	r2, #1
   131fa:	462b      	mov	r3, r5
   131fc:	4905      	ldr	r1, [pc, #20]	; (13214 <hci_encrypt_change+0xa8>)
   131fe:	9500      	str	r5, [sp, #0]
   13200:	f015 fb75 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   13204:	2105      	movs	r1, #5
   13206:	4620      	mov	r0, r4
   13208:	f015 fead 	bl	28f66 <bt_conn_disconnect>
   1320c:	e7ce      	b.n	131ac <hci_encrypt_change+0x40>
   1320e:	bf00      	nop
   13210:	0003083e 	.word	0x0003083e
   13214:	0002d644 	.word	0x0002d644
   13218:	00030b1e 	.word	0x00030b1e

0001321c <bt_send>:
	return bt_dev.drv->send(buf);
   1321c:	4b02      	ldr	r3, [pc, #8]	; (13228 <bt_send+0xc>)
   1321e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   13222:	695b      	ldr	r3, [r3, #20]
   13224:	4718      	bx	r3
   13226:	bf00      	nop
   13228:	20008000 	.word	0x20008000

0001322c <bt_hci_cmd_send>:
{
   1322c:	b530      	push	{r4, r5, lr}
   1322e:	4605      	mov	r5, r0
	if (!buf) {
   13230:	460c      	mov	r4, r1
{
   13232:	b085      	sub	sp, #20
	if (!buf) {
   13234:	b919      	cbnz	r1, 1323e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   13236:	f7ff fc9d 	bl	12b74 <bt_hci_cmd_create>
		if (!buf) {
   1323a:	4604      	mov	r4, r0
   1323c:	b1f8      	cbz	r0, 1327e <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1323e:	f640 4335 	movw	r3, #3125	; 0xc35
   13242:	429d      	cmp	r5, r3
   13244:	d115      	bne.n	13272 <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
   13246:	4620      	mov	r0, r4
   13248:	f7ff ffe8 	bl	1321c <bt_send>
		if (err) {
   1324c:	4605      	mov	r5, r0
   1324e:	b1a0      	cbz	r0, 1327a <bt_hci_cmd_send+0x4e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   13250:	4b0c      	ldr	r3, [pc, #48]	; (13284 <bt_hci_cmd_send+0x58>)
   13252:	9003      	str	r0, [sp, #12]
   13254:	9302      	str	r3, [sp, #8]
   13256:	2300      	movs	r3, #0
   13258:	2201      	movs	r2, #1
   1325a:	4618      	mov	r0, r3
   1325c:	e9cd 3300 	strd	r3, r3, [sp]
   13260:	4909      	ldr	r1, [pc, #36]	; (13288 <bt_hci_cmd_send+0x5c>)
   13262:	f015 fb44 	bl	288ee <z_log_msg_runtime_create.constprop.0>
			net_buf_unref(buf);
   13266:	4620      	mov	r0, r4
   13268:	f007 f8a0 	bl	1a3ac <net_buf_unref>
}
   1326c:	4628      	mov	r0, r5
   1326e:	b005      	add	sp, #20
   13270:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   13272:	4621      	mov	r1, r4
   13274:	4805      	ldr	r0, [pc, #20]	; (1328c <bt_hci_cmd_send+0x60>)
   13276:	f007 f873 	bl	1a360 <net_buf_put>
	return 0;
   1327a:	2500      	movs	r5, #0
   1327c:	e7f6      	b.n	1326c <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   1327e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   13282:	e7f3      	b.n	1326c <bt_hci_cmd_send+0x40>
   13284:	00030b44 	.word	0x00030b44
   13288:	0002d644 	.word	0x0002d644
   1328c:	20008144 	.word	0x20008144

00013290 <bt_hci_host_num_completed_packets>:
{
   13290:	b5f0      	push	{r4, r5, r6, r7, lr}
   13292:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   13294:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   13296:	7e46      	ldrb	r6, [r0, #25]
{
   13298:	b085      	sub	sp, #20
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1329a:	7a80      	ldrb	r0, [r0, #10]
   1329c:	f006 fe4c 	bl	19f38 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   132a0:	4621      	mov	r1, r4
   132a2:	f018 fd4e 	bl	2bd42 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   132a6:	4b2a      	ldr	r3, [pc, #168]	; (13350 <bt_hci_host_num_completed_packets+0xc0>)
   132a8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   132ac:	069b      	lsls	r3, r3, #26
   132ae:	d50e      	bpl.n	132ce <bt_hci_host_num_completed_packets+0x3e>
	conn = bt_conn_lookup_index(index);
   132b0:	4630      	mov	r0, r6
   132b2:	f002 fc2f 	bl	15b14 <bt_conn_lookup_index>
	if (!conn) {
   132b6:	4604      	mov	r4, r0
   132b8:	b958      	cbnz	r0, 132d2 <bt_hci_host_num_completed_packets+0x42>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   132ba:	4b26      	ldr	r3, [pc, #152]	; (13354 <bt_hci_host_num_completed_packets+0xc4>)
   132bc:	2202      	movs	r2, #2
   132be:	e9cd 0301 	strd	r0, r3, [sp, #4]
   132c2:	4925      	ldr	r1, [pc, #148]	; (13358 <bt_hci_host_num_completed_packets+0xc8>)
   132c4:	4603      	mov	r3, r0
   132c6:	9603      	str	r6, [sp, #12]
   132c8:	9000      	str	r0, [sp, #0]
   132ca:	f015 fb10 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   132ce:	b005      	add	sp, #20
   132d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   132d2:	7b43      	ldrb	r3, [r0, #13]
   132d4:	3b07      	subs	r3, #7
   132d6:	2b01      	cmp	r3, #1
   132d8:	d90f      	bls.n	132fa <bt_hci_host_num_completed_packets+0x6a>
		LOG_WRN("Not reporting packet for non-connected conn");
   132da:	4b20      	ldr	r3, [pc, #128]	; (1335c <bt_hci_host_num_completed_packets+0xcc>)
   132dc:	2202      	movs	r2, #2
   132de:	9302      	str	r3, [sp, #8]
   132e0:	2300      	movs	r3, #0
   132e2:	491d      	ldr	r1, [pc, #116]	; (13358 <bt_hci_host_num_completed_packets+0xc8>)
   132e4:	4618      	mov	r0, r3
   132e6:	e9cd 3300 	strd	r3, r3, [sp]
   132ea:	f015 fb00 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   132ee:	4620      	mov	r0, r4
}
   132f0:	b005      	add	sp, #20
   132f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   132f6:	f001 bf3f 	b.w	15178 <bt_conn_unref>
	bt_conn_unref(conn);
   132fa:	f001 ff3d 	bl	15178 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   132fe:	2105      	movs	r1, #5
   13300:	f640 4035 	movw	r0, #3125	; 0xc35
   13304:	f7ff fc36 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   13308:	4604      	mov	r4, r0
   1330a:	b948      	cbnz	r0, 13320 <bt_hci_host_num_completed_packets+0x90>
		LOG_ERR("Unable to allocate new HCI command");
   1330c:	4b14      	ldr	r3, [pc, #80]	; (13360 <bt_hci_host_num_completed_packets+0xd0>)
   1330e:	2201      	movs	r2, #1
   13310:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13314:	4910      	ldr	r1, [pc, #64]	; (13358 <bt_hci_host_num_completed_packets+0xc8>)
   13316:	4603      	mov	r3, r0
   13318:	9000      	str	r0, [sp, #0]
   1331a:	f015 fae8 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		return;
   1331e:	e7d6      	b.n	132ce <bt_hci_host_num_completed_packets+0x3e>
	return net_buf_simple_add(&buf->b, len);
   13320:	f100 070c 	add.w	r7, r0, #12
   13324:	2101      	movs	r1, #1
   13326:	4638      	mov	r0, r7
   13328:	f007 f962 	bl	1a5f0 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   1332c:	2601      	movs	r6, #1
   1332e:	2104      	movs	r1, #4
   13330:	7006      	strb	r6, [r0, #0]
   13332:	4638      	mov	r0, r7
   13334:	f007 f95c 	bl	1a5f0 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   13338:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   1333a:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   1333c:	7086      	strb	r6, [r0, #2]
   1333e:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   13340:	4621      	mov	r1, r4
   13342:	f640 4035 	movw	r0, #3125	; 0xc35
}
   13346:	b005      	add	sp, #20
   13348:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   1334c:	f7ff bf6e 	b.w	1322c <bt_hci_cmd_send>
   13350:	20008000 	.word	0x20008000
   13354:	00030b66 	.word	0x00030b66
   13358:	0002d644 	.word	0x0002d644
   1335c:	00030b8f 	.word	0x00030b8f
   13360:	00030bbb 	.word	0x00030bbb

00013364 <le_ltk_request>:
{
   13364:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   13366:	68c6      	ldr	r6, [r0, #12]
{
   13368:	b089      	sub	sp, #36	; 0x24
	handle = sys_le16_to_cpu(evt->handle);
   1336a:	8837      	ldrh	r7, [r6, #0]
   1336c:	b2bd      	uxth	r5, r7
	conn = bt_conn_lookup_handle(handle);
   1336e:	4628      	mov	r0, r5
   13370:	f001 ff32 	bl	151d8 <bt_conn_lookup_handle>
	if (!conn) {
   13374:	4604      	mov	r4, r0
   13376:	b958      	cbnz	r0, 13390 <le_ltk_request+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   13378:	4b2a      	ldr	r3, [pc, #168]	; (13424 <le_ltk_request+0xc0>)
   1337a:	2201      	movs	r2, #1
   1337c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13380:	4929      	ldr	r1, [pc, #164]	; (13428 <le_ltk_request+0xc4>)
   13382:	4603      	mov	r3, r0
   13384:	9503      	str	r5, [sp, #12]
   13386:	9000      	str	r0, [sp, #0]
   13388:	f015 fab1 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   1338c:	b009      	add	sp, #36	; 0x24
   1338e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   13390:	ad04      	add	r5, sp, #16
   13392:	f8d6 2002 	ldr.w	r2, [r6, #2]
   13396:	f8d6 3006 	ldr.w	r3, [r6, #6]
   1339a:	9501      	str	r5, [sp, #4]
   1339c:	8971      	ldrh	r1, [r6, #10]
   1339e:	9100      	str	r1, [sp, #0]
   133a0:	f016 ff4a 	bl	2a238 <bt_smp_request_ltk>
   133a4:	b360      	cbz	r0, 13400 <le_ltk_request+0x9c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   133a6:	2112      	movs	r1, #18
   133a8:	f242 001a 	movw	r0, #8218	; 0x201a
   133ac:	f7ff fbe2 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   133b0:	4606      	mov	r6, r0
   133b2:	b968      	cbnz	r0, 133d0 <le_ltk_request+0x6c>
		LOG_ERR("Out of command buffers");
   133b4:	4b1d      	ldr	r3, [pc, #116]	; (1342c <le_ltk_request+0xc8>)
   133b6:	2201      	movs	r2, #1
   133b8:	9302      	str	r3, [sp, #8]
   133ba:	2300      	movs	r3, #0
   133bc:	491a      	ldr	r1, [pc, #104]	; (13428 <le_ltk_request+0xc4>)
   133be:	4618      	mov	r0, r3
   133c0:	e9cd 3300 	strd	r3, r3, [sp]
   133c4:	f015 fa93 	bl	288ee <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   133c8:	4620      	mov	r0, r4
   133ca:	f001 fed5 	bl	15178 <bt_conn_unref>
   133ce:	e7dd      	b.n	1338c <le_ltk_request+0x28>
   133d0:	2112      	movs	r1, #18
   133d2:	300c      	adds	r0, #12
   133d4:	f007 f90c 	bl	1a5f0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   133d8:	4602      	mov	r2, r0
   133da:	462b      	mov	r3, r5
   133dc:	f822 7b02 	strh.w	r7, [r2], #2
   133e0:	af08      	add	r7, sp, #32
   133e2:	461d      	mov	r5, r3
   133e4:	cd03      	ldmia	r5!, {r0, r1}
   133e6:	42bd      	cmp	r5, r7
   133e8:	6010      	str	r0, [r2, #0]
   133ea:	6051      	str	r1, [r2, #4]
   133ec:	462b      	mov	r3, r5
   133ee:	f102 0208 	add.w	r2, r2, #8
   133f2:	d1f6      	bne.n	133e2 <le_ltk_request+0x7e>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   133f4:	4631      	mov	r1, r6
   133f6:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   133fa:	f7ff ff17 	bl	1322c <bt_hci_cmd_send>
   133fe:	e7e3      	b.n	133c8 <le_ltk_request+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   13400:	2102      	movs	r1, #2
   13402:	f242 001b 	movw	r0, #8219	; 0x201b
   13406:	f7ff fbb5 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   1340a:	4605      	mov	r5, r0
   1340c:	2800      	cmp	r0, #0
   1340e:	d0d1      	beq.n	133b4 <le_ltk_request+0x50>
   13410:	2102      	movs	r1, #2
   13412:	300c      	adds	r0, #12
   13414:	f007 f8ec 	bl	1a5f0 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   13418:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   1341a:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1341c:	f242 001b 	movw	r0, #8219	; 0x201b
   13420:	e7eb      	b.n	133fa <le_ltk_request+0x96>
   13422:	bf00      	nop
   13424:	0003081a 	.word	0x0003081a
   13428:	0002d644 	.word	0x0002d644
   1342c:	00030bde 	.word	0x00030bde

00013430 <le_conn_param_neg_reply>:
{
   13430:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13432:	4606      	mov	r6, r0
   13434:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   13436:	f242 0021 	movw	r0, #8225	; 0x2021
   1343a:	2103      	movs	r1, #3
   1343c:	f7ff fb9a 	bl	12b74 <bt_hci_cmd_create>
   13440:	4604      	mov	r4, r0
	if (!buf) {
   13442:	b950      	cbnz	r0, 1345a <le_conn_param_neg_reply+0x2a>
		LOG_ERR("Unable to allocate buffer");
   13444:	4b0c      	ldr	r3, [pc, #48]	; (13478 <le_conn_param_neg_reply+0x48>)
   13446:	2201      	movs	r2, #1
   13448:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1344c:	490b      	ldr	r1, [pc, #44]	; (1347c <le_conn_param_neg_reply+0x4c>)
   1344e:	4603      	mov	r3, r0
   13450:	9000      	str	r0, [sp, #0]
   13452:	f015 fa4c 	bl	288ee <z_log_msg_runtime_create.constprop.0>
}
   13456:	b004      	add	sp, #16
   13458:	bd70      	pop	{r4, r5, r6, pc}
   1345a:	2103      	movs	r1, #3
   1345c:	300c      	adds	r0, #12
   1345e:	f007 f8c7 	bl	1a5f0 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   13462:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   13464:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   13466:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   13468:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1346c:	b004      	add	sp, #16
   1346e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   13472:	f7ff bedb 	b.w	1322c <bt_hci_cmd_send>
   13476:	bf00      	nop
   13478:	00030bf5 	.word	0x00030bf5
   1347c:	0002d644 	.word	0x0002d644

00013480 <le_conn_param_req>:
{
   13480:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   13482:	68c3      	ldr	r3, [r0, #12]
{
   13484:	b086      	sub	sp, #24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   13486:	78d9      	ldrb	r1, [r3, #3]
   13488:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1348a:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1348c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13490:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   13494:	7959      	ldrb	r1, [r3, #5]
   13496:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   13498:	b2b5      	uxth	r5, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1349a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1349e:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(evt->latency);
   134a2:	799a      	ldrb	r2, [r3, #6]
   134a4:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   134a6:	4628      	mov	r0, r5
	param.latency = sys_le16_to_cpu(evt->latency);
   134a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   134ac:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   134b0:	7a1a      	ldrb	r2, [r3, #8]
   134b2:	7a5b      	ldrb	r3, [r3, #9]
   134b4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   134b8:	f8ad 3016 	strh.w	r3, [sp, #22]
	conn = bt_conn_lookup_handle(handle);
   134bc:	f001 fe8c 	bl	151d8 <bt_conn_lookup_handle>
	if (!conn) {
   134c0:	4604      	mov	r4, r0
   134c2:	b978      	cbnz	r0, 134e4 <le_conn_param_req+0x64>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   134c4:	4b1e      	ldr	r3, [pc, #120]	; (13540 <le_conn_param_req+0xc0>)
   134c6:	491f      	ldr	r1, [pc, #124]	; (13544 <le_conn_param_req+0xc4>)
   134c8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   134cc:	9000      	str	r0, [sp, #0]
   134ce:	4603      	mov	r3, r0
   134d0:	2201      	movs	r2, #1
   134d2:	9503      	str	r5, [sp, #12]
   134d4:	f015 fa0b 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   134d8:	2102      	movs	r1, #2
   134da:	4628      	mov	r0, r5
   134dc:	f7ff ffa8 	bl	13430 <le_conn_param_neg_reply>
}
   134e0:	b006      	add	sp, #24
   134e2:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
   134e4:	a904      	add	r1, sp, #16
   134e6:	f002 f81f 	bl	15528 <le_param_req>
   134ea:	b938      	cbnz	r0, 134fc <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   134ec:	211e      	movs	r1, #30
   134ee:	4628      	mov	r0, r5
   134f0:	f7ff ff9e 	bl	13430 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   134f4:	4620      	mov	r0, r4
   134f6:	f001 fe3f 	bl	15178 <bt_conn_unref>
   134fa:	e7f1      	b.n	134e0 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   134fc:	210e      	movs	r1, #14
   134fe:	f242 0020 	movw	r0, #8224	; 0x2020
   13502:	f7ff fb37 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   13506:	4605      	mov	r5, r0
   13508:	2800      	cmp	r0, #0
   1350a:	d0f3      	beq.n	134f4 <le_conn_param_req+0x74>
   1350c:	210e      	movs	r1, #14
   1350e:	300c      	adds	r0, #12
   13510:	f007 f86e 	bl	1a5f0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13514:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   13516:	8006      	strh	r6, [r0, #0]
   13518:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1351c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   13520:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   13522:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   13524:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   13528:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1352a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1352e:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   13530:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   13534:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   13536:	f242 0020 	movw	r0, #8224	; 0x2020
   1353a:	f7ff fe77 	bl	1322c <bt_hci_cmd_send>
   1353e:	e7d9      	b.n	134f4 <le_conn_param_req+0x74>
   13540:	0003081a 	.word	0x0003081a
   13544:	0002d644 	.word	0x0002d644

00013548 <hci_tx_thread>:
{
   13548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1354c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 13698 <hci_tx_thread+0x150>
		BT_ASSERT(err == 0);
   13550:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1369c <hci_tx_thread+0x154>
{
   13554:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
   13556:	f108 0b14 	add.w	fp, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   1355a:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1355e:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
   13560:	f36f 3394 	bfc	r3, #14, #7
   13564:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   13568:	f001 fda6 	bl	150b8 <bt_conn_prepare_events>
   1356c:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1356e:	f04f 32ff 	mov.w	r2, #4294967295
   13572:	f04f 33ff 	mov.w	r3, #4294967295
   13576:	4629      	mov	r1, r5
   13578:	4847      	ldr	r0, [pc, #284]	; (13698 <hci_tx_thread+0x150>)
   1357a:	f010 fae7 	bl	23b4c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1357e:	b160      	cbz	r0, 1359a <hci_tx_thread+0x52>
   13580:	f640 13e6 	movw	r3, #2534	; 0x9e6
   13584:	464a      	mov	r2, r9
   13586:	4946      	ldr	r1, [pc, #280]	; (136a0 <hci_tx_thread+0x158>)
   13588:	4846      	ldr	r0, [pc, #280]	; (136a4 <hci_tx_thread+0x15c>)
   1358a:	f014 f832 	bl	275f2 <assert_print>
   1358e:	4040      	eors	r0, r0
   13590:	f380 8811 	msr	BASEPRI, r0
   13594:	f04f 0003 	mov.w	r0, #3
   13598:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1359a:	f04f 0a00 	mov.w	sl, #0
{
   1359e:	4e3e      	ldr	r6, [pc, #248]	; (13698 <hci_tx_thread+0x150>)
	for (; count; ev++, count--) {
   135a0:	b915      	cbnz	r5, 135a8 <hci_tx_thread+0x60>
	z_impl_k_yield();
   135a2:	f00f fa1b 	bl	229dc <z_impl_k_yield>
	while (1) {
   135a6:	e7d8      	b.n	1355a <hci_tx_thread+0x12>
		switch (ev->state) {
   135a8:	68f3      	ldr	r3, [r6, #12]
   135aa:	f3c3 3386 	ubfx	r3, r3, #14, #7
   135ae:	2b01      	cmp	r3, #1
   135b0:	d95a      	bls.n	13668 <hci_tx_thread+0x120>
   135b2:	2b04      	cmp	r3, #4
   135b4:	d162      	bne.n	1367c <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
   135b6:	7b33      	ldrb	r3, [r6, #12]
   135b8:	2b00      	cmp	r3, #0
   135ba:	d158      	bne.n	1366e <hci_tx_thread+0x126>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   135bc:	2200      	movs	r2, #0
   135be:	2300      	movs	r3, #0
   135c0:	4839      	ldr	r0, [pc, #228]	; (136a8 <hci_tx_thread+0x160>)
   135c2:	f016 ffe7 	bl	2a594 <net_buf_get>
	BT_ASSERT(buf);
   135c6:	4604      	mov	r4, r0
   135c8:	b960      	cbnz	r0, 135e4 <hci_tx_thread+0x9c>
   135ca:	f44f 6318 	mov.w	r3, #2432	; 0x980
   135ce:	464a      	mov	r2, r9
   135d0:	4936      	ldr	r1, [pc, #216]	; (136ac <hci_tx_thread+0x164>)
   135d2:	4834      	ldr	r0, [pc, #208]	; (136a4 <hci_tx_thread+0x15c>)
   135d4:	f014 f80d 	bl	275f2 <assert_print>
   135d8:	4040      	eors	r0, r0
   135da:	f380 8811 	msr	BASEPRI, r0
   135de:	f04f 0003 	mov.w	r0, #3
   135e2:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   135e4:	4f32      	ldr	r7, [pc, #200]	; (136b0 <hci_tx_thread+0x168>)
	return z_impl_k_sem_take(sem, timeout);
   135e6:	f04f 33ff 	mov.w	r3, #4294967295
   135ea:	f04f 32ff 	mov.w	r2, #4294967295
   135ee:	4831      	ldr	r0, [pc, #196]	; (136b4 <hci_tx_thread+0x16c>)
   135f0:	f00d fc7e 	bl	20ef0 <z_impl_k_sem_take>
   135f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   135f8:	b183      	cbz	r3, 1361c <hci_tx_thread+0xd4>
		LOG_ERR("Uncleared pending sent_cmd");
   135fa:	4b2f      	ldr	r3, [pc, #188]	; (136b8 <hci_tx_thread+0x170>)
   135fc:	2201      	movs	r2, #1
   135fe:	9302      	str	r3, [sp, #8]
   13600:	2300      	movs	r3, #0
   13602:	492e      	ldr	r1, [pc, #184]	; (136bc <hci_tx_thread+0x174>)
   13604:	4618      	mov	r0, r3
   13606:	e9cd 3300 	strd	r3, r3, [sp]
   1360a:	f015 f970 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   1360e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   13612:	f006 fecb 	bl	1a3ac <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13616:	2300      	movs	r3, #0
   13618:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   1361c:	4620      	mov	r0, r4
   1361e:	f006 ff09 	bl	1a434 <net_buf_ref>
   13622:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   13626:	4620      	mov	r0, r4
   13628:	f7ff fdf8 	bl	1321c <bt_send>
	if (err) {
   1362c:	b1e0      	cbz	r0, 13668 <hci_tx_thread+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1362e:	4b24      	ldr	r3, [pc, #144]	; (136c0 <hci_tx_thread+0x178>)
   13630:	9003      	str	r0, [sp, #12]
   13632:	9302      	str	r3, [sp, #8]
   13634:	2300      	movs	r3, #0
   13636:	2201      	movs	r2, #1
   13638:	4618      	mov	r0, r3
   1363a:	e9cd 3300 	strd	r3, r3, [sp]
   1363e:	491f      	ldr	r1, [pc, #124]	; (136bc <hci_tx_thread+0x174>)
   13640:	f015 f955 	bl	288ee <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   13644:	481b      	ldr	r0, [pc, #108]	; (136b4 <hci_tx_thread+0x16c>)
   13646:	f00d fc0f 	bl	20e68 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1364a:	4620      	mov	r0, r4
   1364c:	f006 fc7c 	bl	19f48 <net_buf_id>
   13650:	220c      	movs	r2, #12
   13652:	4b1c      	ldr	r3, [pc, #112]	; (136c4 <hci_tx_thread+0x17c>)
   13654:	211f      	movs	r1, #31
   13656:	fb02 3000 	mla	r0, r2, r0, r3
   1365a:	4622      	mov	r2, r4
   1365c:	8840      	ldrh	r0, [r0, #2]
   1365e:	f7ff f8d3 	bl	12808 <hci_cmd_done>
		net_buf_unref(buf);
   13662:	4620      	mov	r0, r4
   13664:	f006 fea2 	bl	1a3ac <net_buf_unref>
	for (; count; ev++, count--) {
   13668:	3614      	adds	r6, #20
   1366a:	3d01      	subs	r5, #1
   1366c:	e798      	b.n	135a0 <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1366e:	2b01      	cmp	r3, #1
   13670:	d1fa      	bne.n	13668 <hci_tx_thread+0x120>
					conn = CONTAINER_OF(ev->fifo,
   13672:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   13674:	3838      	subs	r0, #56	; 0x38
   13676:	f002 f9b7 	bl	159e8 <bt_conn_process_tx>
   1367a:	e7f5      	b.n	13668 <hci_tx_thread+0x120>
		switch (ev->state) {
   1367c:	9303      	str	r3, [sp, #12]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1367e:	4b12      	ldr	r3, [pc, #72]	; (136c8 <hci_tx_thread+0x180>)
   13680:	2202      	movs	r2, #2
   13682:	e9cd a301 	strd	sl, r3, [sp, #4]
   13686:	2300      	movs	r3, #0
   13688:	490c      	ldr	r1, [pc, #48]	; (136bc <hci_tx_thread+0x174>)
   1368a:	4618      	mov	r0, r3
   1368c:	f8cd a000 	str.w	sl, [sp]
   13690:	f015 f92d 	bl	288ee <z_log_msg_runtime_create.constprop.0>
   13694:	e7e8      	b.n	13668 <hci_tx_thread+0x120>
   13696:	bf00      	nop
   13698:	200084c4 	.word	0x200084c4
   1369c:	000308a8 	.word	0x000308a8
   136a0:	0002f710 	.word	0x0002f710
   136a4:	0002e715 	.word	0x0002e715
   136a8:	20008144 	.word	0x20008144
   136ac:	000323e2 	.word	0x000323e2
   136b0:	20008000 	.word	0x20008000
   136b4:	20008120 	.word	0x20008120
   136b8:	00030c0f 	.word	0x00030c0f
   136bc:	0002d644 	.word	0x0002d644
   136c0:	00030b44 	.word	0x00030b44
   136c4:	2002f1f4 	.word	0x2002f1f4
   136c8:	00030c2a 	.word	0x00030c2a

000136cc <hci_event_prio>:
{
   136cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136d0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   136d2:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   136d6:	4630      	mov	r0, r6
   136d8:	f016 ff6d 	bl	2a5b6 <net_buf_simple_headroom>
	state->len = buf->len;
   136dc:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   136e0:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   136e2:	f1b8 0f01 	cmp.w	r8, #1
   136e6:	d80c      	bhi.n	13702 <hci_event_prio+0x36>
   136e8:	f640 537b 	movw	r3, #3451	; 0xd7b
   136ec:	4a1b      	ldr	r2, [pc, #108]	; (1375c <hci_event_prio+0x90>)
   136ee:	491c      	ldr	r1, [pc, #112]	; (13760 <hci_event_prio+0x94>)
   136f0:	481c      	ldr	r0, [pc, #112]	; (13764 <hci_event_prio+0x98>)
   136f2:	f013 ff7e 	bl	275f2 <assert_print>
   136f6:	4040      	eors	r0, r0
   136f8:	f380 8811 	msr	BASEPRI, r0
   136fc:	f04f 0003 	mov.w	r0, #3
   13700:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   13702:	4630      	mov	r0, r6
   13704:	2102      	movs	r1, #2
   13706:	f006 ff55 	bl	1a5b4 <net_buf_simple_pull_mem>
   1370a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1370c:	7800      	ldrb	r0, [r0, #0]
   1370e:	f015 f8ac 	bl	2886a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13712:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13714:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   13716:	d40c      	bmi.n	13732 <hci_event_prio+0x66>
   13718:	f640 537f 	movw	r3, #3455	; 0xd7f
   1371c:	4a0f      	ldr	r2, [pc, #60]	; (1375c <hci_event_prio+0x90>)
   1371e:	4912      	ldr	r1, [pc, #72]	; (13768 <hci_event_prio+0x9c>)
   13720:	4810      	ldr	r0, [pc, #64]	; (13764 <hci_event_prio+0x98>)
   13722:	f013 ff66 	bl	275f2 <assert_print>
   13726:	4040      	eors	r0, r0
   13728:	f380 8811 	msr	BASEPRI, r0
   1372c:	f04f 0003 	mov.w	r0, #3
   13730:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   13732:	2305      	movs	r3, #5
   13734:	4621      	mov	r1, r4
   13736:	4a0d      	ldr	r2, [pc, #52]	; (1376c <hci_event_prio+0xa0>)
   13738:	7838      	ldrb	r0, [r7, #0]
   1373a:	f7fe ff23 	bl	12584 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1373e:	07b3      	lsls	r3, r6, #30
   13740:	d507      	bpl.n	13752 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   13742:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   13744:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   13748:	fa13 f585 	uxtah	r5, r3, r5
   1374c:	60e5      	str	r5, [r4, #12]
}
   1374e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   13752:	4620      	mov	r0, r4
}
   13754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   13758:	f006 be28 	b.w	1a3ac <net_buf_unref>
   1375c:	000308a8 	.word	0x000308a8
   13760:	000308dc 	.word	0x000308dc
   13764:	0002e715 	.word	0x0002e715
   13768:	00030c4b 	.word	0x00030c4b
   1376c:	0002deec 	.word	0x0002deec

00013770 <bt_recv>:
{
   13770:	b530      	push	{r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13772:	7e03      	ldrb	r3, [r0, #24]
   13774:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   13776:	2b01      	cmp	r3, #1
{
   13778:	b085      	sub	sp, #20
	switch (bt_buf_get_type(buf)) {
   1377a:	d006      	beq.n	1378a <bt_recv+0x1a>
   1377c:	2b03      	cmp	r3, #3
   1377e:	d112      	bne.n	137a6 <bt_recv+0x36>
			rx_queue_put(buf);
   13780:	f7fe fe62 	bl	12448 <rx_queue_put>
		return 0;
   13784:	2000      	movs	r0, #0
}
   13786:	b005      	add	sp, #20
   13788:	bd30      	pop	{r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1378a:	68c3      	ldr	r3, [r0, #12]
   1378c:	7818      	ldrb	r0, [r3, #0]
   1378e:	f015 f86c 	bl	2886a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13792:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13794:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13796:	d502      	bpl.n	1379e <bt_recv+0x2e>
			hci_event_prio(buf);
   13798:	4620      	mov	r0, r4
   1379a:	f7ff ff97 	bl	136cc <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1379e:	07ab      	lsls	r3, r5, #30
   137a0:	d5f0      	bpl.n	13784 <bt_recv+0x14>
			rx_queue_put(buf);
   137a2:	4620      	mov	r0, r4
   137a4:	e7ec      	b.n	13780 <bt_recv+0x10>
	switch (bt_buf_get_type(buf)) {
   137a6:	9303      	str	r3, [sp, #12]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   137a8:	4b07      	ldr	r3, [pc, #28]	; (137c8 <bt_recv+0x58>)
   137aa:	2201      	movs	r2, #1
   137ac:	9302      	str	r3, [sp, #8]
   137ae:	2300      	movs	r3, #0
   137b0:	4906      	ldr	r1, [pc, #24]	; (137cc <bt_recv+0x5c>)
   137b2:	4618      	mov	r0, r3
   137b4:	e9cd 3300 	strd	r3, r3, [sp]
   137b8:	f015 f899 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   137bc:	4620      	mov	r0, r4
   137be:	f006 fdf5 	bl	1a3ac <net_buf_unref>
		return -EINVAL;
   137c2:	f06f 0015 	mvn.w	r0, #21
   137c6:	e7de      	b.n	13786 <bt_recv+0x16>
   137c8:	00030c64 	.word	0x00030c64
   137cc:	0002d644 	.word	0x0002d644

000137d0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   137d0:	4a08      	ldr	r2, [pc, #32]	; (137f4 <bt_hci_driver_register+0x24>)
{
   137d2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   137d4:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   137d8:	b930      	cbnz	r0, 137e8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   137da:	68d9      	ldr	r1, [r3, #12]
   137dc:	b139      	cbz	r1, 137ee <bt_hci_driver_register+0x1e>
   137de:	6959      	ldr	r1, [r3, #20]
   137e0:	b129      	cbz	r1, 137ee <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   137e2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   137e6:	4770      	bx	lr
		return -EALREADY;
   137e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   137ec:	4770      	bx	lr
		return -EINVAL;
   137ee:	f06f 0015 	mvn.w	r0, #21
}
   137f2:	4770      	bx	lr
   137f4:	20008000 	.word	0x20008000

000137f8 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   137f8:	2104      	movs	r1, #4
   137fa:	4801      	ldr	r0, [pc, #4]	; (13800 <bt_finalize_init+0x8>)
   137fc:	f015 b860 	b.w	288c0 <atomic_or>
   13800:	200080cc 	.word	0x200080cc

00013804 <init_work>:
{
   13804:	b510      	push	{r4, lr}
	err = bt_init();
   13806:	f7f5 fe73 	bl	94f0 <bt_init>
	if (ready_cb) {
   1380a:	4b03      	ldr	r3, [pc, #12]	; (13818 <init_work+0x14>)
   1380c:	681b      	ldr	r3, [r3, #0]
   1380e:	b113      	cbz	r3, 13816 <init_work+0x12>
}
   13810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   13814:	4718      	bx	r3
}
   13816:	bd10      	pop	{r4, pc}
   13818:	2002f26c 	.word	0x2002f26c

0001381c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1381c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   1381e:	4e38      	ldr	r6, [pc, #224]	; (13900 <bt_enable+0xe4>)
{
   13820:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
   13822:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
{
   13826:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   13828:	b96b      	cbnz	r3, 13846 <bt_enable+0x2a>
		LOG_ERR("No HCI driver registered");
   1382a:	4a36      	ldr	r2, [pc, #216]	; (13904 <bt_enable+0xe8>)
   1382c:	4618      	mov	r0, r3
   1382e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   13832:	4935      	ldr	r1, [pc, #212]	; (13908 <bt_enable+0xec>)
   13834:	2201      	movs	r2, #1
   13836:	9300      	str	r3, [sp, #0]
   13838:	f015 f859 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1383c:	f06f 0512 	mvn.w	r5, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   13840:	4628      	mov	r0, r5
   13842:	b009      	add	sp, #36	; 0x24
   13844:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13846:	f06f 0102 	mvn.w	r1, #2
   1384a:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   1384e:	f015 f85d 	bl	2890c <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13852:	2101      	movs	r1, #1
   13854:	f015 f834 	bl	288c0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13858:	ea10 0401 	ands.w	r4, r0, r1
   1385c:	d14d      	bne.n	138fa <bt_enable+0xde>
	ready_cb = cb;
   1385e:	4b2b      	ldr	r3, [pc, #172]	; (1390c <bt_enable+0xf0>)
   13860:	601f      	str	r7, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   13862:	460a      	mov	r2, r1
   13864:	f506 7090 	add.w	r0, r6, #288	; 0x120
   13868:	f018 fa75 	bl	2bd56 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1386c:	f506 70a2 	add.w	r0, r6, #324	; 0x144
   13870:	f018 fa4f 	bl	2bd12 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13874:	2200      	movs	r2, #0
   13876:	2300      	movs	r3, #0
   13878:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1387c:	f06f 0308 	mvn.w	r3, #8
   13880:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13884:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13888:	e9cd 4400 	strd	r4, r4, [sp]
   1388c:	4b20      	ldr	r3, [pc, #128]	; (13910 <bt_enable+0xf4>)
   1388e:	4921      	ldr	r1, [pc, #132]	; (13914 <bt_enable+0xf8>)
   13890:	9404      	str	r4, [sp, #16]
   13892:	4821      	ldr	r0, [pc, #132]	; (13918 <bt_enable+0xfc>)
   13894:	f00c ff66 	bl	20764 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13898:	4920      	ldr	r1, [pc, #128]	; (1391c <bt_enable+0x100>)
   1389a:	481f      	ldr	r0, [pc, #124]	; (13918 <bt_enable+0xfc>)
   1389c:	f018 fa10 	bl	2bcc0 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   138a0:	481f      	ldr	r0, [pc, #124]	; (13920 <bt_enable+0x104>)
   138a2:	f00d fe55 	bl	21550 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   138a6:	f06f 0307 	mvn.w	r3, #7
   138aa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   138ae:	491d      	ldr	r1, [pc, #116]	; (13924 <bt_enable+0x108>)
   138b0:	481b      	ldr	r0, [pc, #108]	; (13920 <bt_enable+0x104>)
   138b2:	9400      	str	r4, [sp, #0]
   138b4:	f00d fe66 	bl	21584 <k_work_queue_start>
   138b8:	491b      	ldr	r1, [pc, #108]	; (13928 <bt_enable+0x10c>)
   138ba:	4819      	ldr	r0, [pc, #100]	; (13920 <bt_enable+0x104>)
   138bc:	f018 fa00 	bl	2bcc0 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   138c0:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   138c4:	68db      	ldr	r3, [r3, #12]
   138c6:	4798      	blx	r3
	if (err) {
   138c8:	4605      	mov	r5, r0
   138ca:	b158      	cbz	r0, 138e4 <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   138cc:	4b17      	ldr	r3, [pc, #92]	; (1392c <bt_enable+0x110>)
   138ce:	9003      	str	r0, [sp, #12]
   138d0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   138d4:	2201      	movs	r2, #1
   138d6:	4623      	mov	r3, r4
   138d8:	4620      	mov	r0, r4
   138da:	490b      	ldr	r1, [pc, #44]	; (13908 <bt_enable+0xec>)
   138dc:	9400      	str	r4, [sp, #0]
   138de:	f015 f806 	bl	288ee <z_log_msg_runtime_create.constprop.0>
		return err;
   138e2:	e7ad      	b.n	13840 <bt_enable+0x24>
	if (!cb) {
   138e4:	b927      	cbnz	r7, 138f0 <bt_enable+0xd4>
}
   138e6:	b009      	add	sp, #36	; 0x24
   138e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
   138ec:	f7f5 be00 	b.w	94f0 <bt_init>
	k_work_submit(&bt_dev.init);
   138f0:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   138f4:	f00d fe26 	bl	21544 <k_work_submit>
	return 0;
   138f8:	e7a2      	b.n	13840 <bt_enable+0x24>
		return -EALREADY;
   138fa:	f06f 0577 	mvn.w	r5, #119	; 0x77
   138fe:	e79f      	b.n	13840 <bt_enable+0x24>
   13900:	20008000 	.word	0x20008000
   13904:	00030d63 	.word	0x00030d63
   13908:	0002d644 	.word	0x0002d644
   1390c:	2002f26c 	.word	0x2002f26c
   13910:	00013549 	.word	0x00013549
   13914:	20040230 	.word	0x20040230
   13918:	200096c0 	.word	0x200096c0
   1391c:	00030d7c 	.word	0x00030d7c
   13920:	20009748 	.word	0x20009748
   13924:	20040630 	.word	0x20040630
   13928:	00030d82 	.word	0x00030d82
   1392c:	00030d88 	.word	0x00030d88

00013930 <bt_is_ready>:
   13930:	4b02      	ldr	r3, [pc, #8]	; (1393c <bt_is_ready+0xc>)
   13932:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   13936:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1393a:	4770      	bx	lr
   1393c:	200080cc 	.word	0x200080cc

00013940 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13940:	4800      	ldr	r0, [pc, #0]	; (13944 <bt_get_name+0x4>)
   13942:	4770      	bx	lr
   13944:	0002f008 	.word	0x0002f008

00013948 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1394a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1394c:	2500      	movs	r5, #0
   1394e:	4f09      	ldr	r7, [pc, #36]	; (13974 <id_find+0x2c>)
   13950:	79fb      	ldrb	r3, [r7, #7]
   13952:	b2ec      	uxtb	r4, r5
   13954:	42a3      	cmp	r3, r4
   13956:	d802      	bhi.n	1395e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13958:	f06f 0001 	mvn.w	r0, #1
   1395c:	e009      	b.n	13972 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1395e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   13962:	4630      	mov	r0, r6
   13964:	4439      	add	r1, r7
   13966:	f015 f87a 	bl	28a5e <bt_addr_le_eq>
   1396a:	3501      	adds	r5, #1
   1396c:	2800      	cmp	r0, #0
   1396e:	d0ef      	beq.n	13950 <id_find+0x8>
   13970:	4620      	mov	r0, r4
}
   13972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13974:	20008000 	.word	0x20008000

00013978 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   13978:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1397a:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1397c:	460d      	mov	r5, r1
   1397e:	b171      	cbz	r1, 1399e <id_create.constprop.0+0x26>
   13980:	4628      	mov	r0, r5
   13982:	4912      	ldr	r1, [pc, #72]	; (139cc <id_create.constprop.0+0x54>)
   13984:	f015 f86b 	bl	28a5e <bt_addr_le_eq>
   13988:	b948      	cbnz	r0, 1399e <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1398a:	4629      	mov	r1, r5
   1398c:	4810      	ldr	r0, [pc, #64]	; (139d0 <id_create.constprop.0+0x58>)
   1398e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13992:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13994:	f015 f870 	bl	28a78 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   13998:	2000      	movs	r0, #0
}
   1399a:	b003      	add	sp, #12
   1399c:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1399e:	4668      	mov	r0, sp
   139a0:	f014 ff55 	bl	2884e <bt_addr_le_create_static>
			if (err) {
   139a4:	2800      	cmp	r0, #0
   139a6:	d1f8      	bne.n	1399a <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   139a8:	4668      	mov	r0, sp
   139aa:	f7ff ffcd 	bl	13948 <id_find>
   139ae:	2800      	cmp	r0, #0
   139b0:	daf5      	bge.n	1399e <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   139b2:	4b07      	ldr	r3, [pc, #28]	; (139d0 <id_create.constprop.0+0x58>)
   139b4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   139b8:	4669      	mov	r1, sp
   139ba:	4418      	add	r0, r3
   139bc:	f015 f85c 	bl	28a78 <bt_addr_le_copy>
		if (addr) {
   139c0:	2d00      	cmp	r5, #0
   139c2:	d0e9      	beq.n	13998 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   139c4:	4601      	mov	r1, r0
   139c6:	4628      	mov	r0, r5
   139c8:	e7e4      	b.n	13994 <id_create.constprop.0+0x1c>
   139ca:	bf00      	nop
   139cc:	000306da 	.word	0x000306da
   139d0:	20008000 	.word	0x20008000

000139d4 <set_random_address>:
{
   139d4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   139d6:	2206      	movs	r2, #6
   139d8:	4911      	ldr	r1, [pc, #68]	; (13a20 <set_random_address+0x4c>)
   139da:	4605      	mov	r5, r0
   139dc:	f018 fb66 	bl	2c0ac <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   139e0:	b1c8      	cbz	r0, 13a16 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   139e2:	2106      	movs	r1, #6
   139e4:	f242 0005 	movw	r0, #8197	; 0x2005
   139e8:	f7ff f8c4 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   139ec:	4604      	mov	r4, r0
   139ee:	b1a0      	cbz	r0, 13a1a <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   139f0:	2206      	movs	r2, #6
   139f2:	4629      	mov	r1, r5
   139f4:	300c      	adds	r0, #12
   139f6:	f016 fdea 	bl	2a5ce <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   139fa:	2200      	movs	r2, #0
   139fc:	4621      	mov	r1, r4
   139fe:	f242 0005 	movw	r0, #8197	; 0x2005
   13a02:	f7ff f905 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
   13a06:	b938      	cbnz	r0, 13a18 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   13a08:	4805      	ldr	r0, [pc, #20]	; (13a20 <set_random_address+0x4c>)
   13a0a:	4629      	mov	r1, r5
   13a0c:	f015 f82f 	bl	28a6e <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   13a10:	2301      	movs	r3, #1
   13a12:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   13a16:	2000      	movs	r0, #0
}
   13a18:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   13a1a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13a1e:	e7fb      	b.n	13a18 <set_random_address+0x44>
   13a20:	20008061 	.word	0x20008061

00013a24 <find_rl_conflict>:
{
   13a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a28:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   13a2a:	460c      	mov	r4, r1
{
   13a2c:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   13a2e:	b959      	cbnz	r1, 13a48 <find_rl_conflict+0x24>
   13a30:	492b      	ldr	r1, [pc, #172]	; (13ae0 <find_rl_conflict+0xbc>)
   13a32:	f44f 7357 	mov.w	r3, #860	; 0x35c
   13a36:	4a2b      	ldr	r2, [pc, #172]	; (13ae4 <find_rl_conflict+0xc0>)
   13a38:	482b      	ldr	r0, [pc, #172]	; (13ae8 <find_rl_conflict+0xc4>)
   13a3a:	f013 fdda 	bl	275f2 <assert_print>
   13a3e:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   13a42:	4828      	ldr	r0, [pc, #160]	; (13ae4 <find_rl_conflict+0xc0>)
   13a44:	f013 fdce 	bl	275e4 <assert_post_action>
   13a48:	6808      	ldr	r0, [r1, #0]
   13a4a:	b948      	cbnz	r0, 13a60 <find_rl_conflict+0x3c>
   13a4c:	4927      	ldr	r1, [pc, #156]	; (13aec <find_rl_conflict+0xc8>)
   13a4e:	f240 335d 	movw	r3, #861	; 0x35d
   13a52:	4a24      	ldr	r2, [pc, #144]	; (13ae4 <find_rl_conflict+0xc0>)
   13a54:	4824      	ldr	r0, [pc, #144]	; (13ae8 <find_rl_conflict+0xc4>)
   13a56:	f013 fdcc 	bl	275f2 <assert_print>
   13a5a:	f240 315d 	movw	r1, #861	; 0x35d
   13a5e:	e7f0      	b.n	13a42 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   13a60:	b94d      	cbnz	r5, 13a76 <find_rl_conflict+0x52>
   13a62:	4923      	ldr	r1, [pc, #140]	; (13af0 <find_rl_conflict+0xcc>)
   13a64:	f240 335e 	movw	r3, #862	; 0x35e
   13a68:	4a1e      	ldr	r2, [pc, #120]	; (13ae4 <find_rl_conflict+0xc0>)
   13a6a:	481f      	ldr	r0, [pc, #124]	; (13ae8 <find_rl_conflict+0xc4>)
   13a6c:	f013 fdc1 	bl	275f2 <assert_print>
   13a70:	f240 315e 	movw	r1, #862	; 0x35e
   13a74:	e7e5      	b.n	13a42 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   13a76:	7a03      	ldrb	r3, [r0, #8]
   13a78:	075a      	lsls	r2, r3, #29
   13a7a:	d509      	bpl.n	13a90 <find_rl_conflict+0x6c>
   13a7c:	491d      	ldr	r1, [pc, #116]	; (13af4 <find_rl_conflict+0xd0>)
   13a7e:	f44f 7358 	mov.w	r3, #864	; 0x360
   13a82:	4a18      	ldr	r2, [pc, #96]	; (13ae4 <find_rl_conflict+0xc0>)
   13a84:	4818      	ldr	r0, [pc, #96]	; (13ae8 <find_rl_conflict+0xc4>)
   13a86:	f013 fdb4 	bl	275f2 <assert_print>
   13a8a:	f44f 7158 	mov.w	r1, #864	; 0x360
   13a8e:	e7d8      	b.n	13a42 <find_rl_conflict+0x1e>
	if (conflict->found) {
   13a90:	684f      	ldr	r7, [r1, #4]
   13a92:	b9f7      	cbnz	r7, 13ad2 <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   13a94:	7a2b      	ldrb	r3, [r5, #8]
   13a96:	075b      	lsls	r3, r3, #29
   13a98:	d51b      	bpl.n	13ad2 <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   13a9a:	1c69      	adds	r1, r5, #1
   13a9c:	3001      	adds	r0, #1
   13a9e:	f014 ffde 	bl	28a5e <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   13aa2:	f8d4 8000 	ldr.w	r8, [r4]
   13aa6:	2216      	movs	r2, #22
   13aa8:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   13aaa:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   13aac:	4668      	mov	r0, sp
   13aae:	f018 fb47 	bl	2c140 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   13ab2:	2210      	movs	r2, #16
   13ab4:	4669      	mov	r1, sp
   13ab6:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   13aba:	f018 faf7 	bl	2c0ac <memcmp>
   13abe:	b158      	cbz	r0, 13ad8 <find_rl_conflict+0xb4>
   13ac0:	6820      	ldr	r0, [r4, #0]
   13ac2:	2210      	movs	r2, #16
   13ac4:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   13ac8:	302a      	adds	r0, #42	; 0x2a
   13aca:	f018 faef 	bl	2c0ac <memcmp>
   13ace:	b918      	cbnz	r0, 13ad8 <find_rl_conflict+0xb4>
		conflict->found = resident;
   13ad0:	6065      	str	r5, [r4, #4]
}
   13ad2:	b006      	add	sp, #24
   13ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   13ad8:	2e00      	cmp	r6, #0
   13ada:	d1f9      	bne.n	13ad0 <find_rl_conflict+0xac>
   13adc:	e7f9      	b.n	13ad2 <find_rl_conflict+0xae>
   13ade:	bf00      	nop
   13ae0:	00030e08 	.word	0x00030e08
   13ae4:	00030dda 	.word	0x00030dda
   13ae8:	0002e715 	.word	0x0002e715
   13aec:	00030e20 	.word	0x00030e20
   13af0:	00030e43 	.word	0x00030e43
   13af4:	00030e5b 	.word	0x00030e5b

00013af8 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13af8:	4b08      	ldr	r3, [pc, #32]	; (13b1c <bt_id_pending_keys_update+0x24>)
   13afa:	e8d3 2fef 	ldaex	r2, [r3]
   13afe:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   13b02:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13b06:	2800      	cmp	r0, #0
   13b08:	d1f7      	bne.n	13afa <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   13b0a:	0413      	lsls	r3, r2, #16
   13b0c:	d504      	bpl.n	13b18 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   13b0e:	2200      	movs	r2, #0
   13b10:	2002      	movs	r0, #2
   13b12:	4903      	ldr	r1, [pc, #12]	; (13b20 <bt_id_pending_keys_update+0x28>)
   13b14:	f006 b818 	b.w	19b48 <bt_keys_foreach_type>
}
   13b18:	4770      	bx	lr
   13b1a:	bf00      	nop
   13b1c:	200080cc 	.word	0x200080cc
   13b20:	00028bf5 	.word	0x00028bf5

00013b24 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   13b24:	2300      	movs	r3, #0
{
   13b26:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   13b28:	4905      	ldr	r1, [pc, #20]	; (13b40 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   13b2a:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   13b2e:	466a      	mov	r2, sp
   13b30:	2002      	movs	r0, #2
   13b32:	f006 f809 	bl	19b48 <bt_keys_foreach_type>
}
   13b36:	9801      	ldr	r0, [sp, #4]
   13b38:	b003      	add	sp, #12
   13b3a:	f85d fb04 	ldr.w	pc, [sp], #4
   13b3e:	bf00      	nop
   13b40:	00013a25 	.word	0x00013a25

00013b44 <bt_id_add>:
{
   13b44:	b5f0      	push	{r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   13b46:	4605      	mov	r5, r0
{
   13b48:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   13b4a:	b170      	cbz	r0, 13b6a <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13b4c:	4c59      	ldr	r4, [pc, #356]	; (13cb4 <bt_id_add+0x170>)
   13b4e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   13b52:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13b56:	b10a      	cbz	r2, 13b5c <bt_id_add+0x18>
   13b58:	429a      	cmp	r2, r3
   13b5a:	d208      	bcs.n	13b6e <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   13b5c:	3301      	adds	r3, #1
   13b5e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   13b62:	7a2b      	ldrb	r3, [r5, #8]
   13b64:	f043 0304 	orr.w	r3, r3, #4
   13b68:	722b      	strb	r3, [r5, #8]
}
   13b6a:	b007      	add	sp, #28
   13b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   13b6e:	2100      	movs	r1, #0
   13b70:	2206      	movs	r2, #6
   13b72:	4608      	mov	r0, r1
   13b74:	f001 fe0c 	bl	15790 <bt_conn_lookup_state_le>
	if (conn) {
   13b78:	4606      	mov	r6, r0
   13b7a:	b188      	cbz	r0, 13ba0 <bt_id_add+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13b7c:	34cc      	adds	r4, #204	; 0xcc
   13b7e:	e8d4 3fef 	ldaex	r3, [r4]
   13b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13b86:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13b8a:	2a00      	cmp	r2, #0
   13b8c:	d1f7      	bne.n	13b7e <bt_id_add+0x3a>
	keys->state |= flag;
   13b8e:	7a2b      	ldrb	r3, [r5, #8]
   13b90:	f043 0301 	orr.w	r3, r3, #1
   13b94:	722b      	strb	r3, [r5, #8]
}
   13b96:	b007      	add	sp, #28
   13b98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   13b9c:	f001 baec 	b.w	15178 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13ba0:	4601      	mov	r1, r0
   13ba2:	4845      	ldr	r0, [pc, #276]	; (13cb8 <bt_id_add+0x174>)
   13ba4:	f000 fbee 	bl	14384 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   13ba8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13bac:	b163      	cbz	r3, 13bc8 <bt_id_add+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13bae:	4630      	mov	r0, r6
   13bb0:	f014 ffb4 	bl	28b1c <addr_res_enable>
		if (err) {
   13bb4:	b140      	cbz	r0, 13bc8 <bt_id_add+0x84>
			LOG_WRN("Failed to disable address resolution");
   13bb6:	4b41      	ldr	r3, [pc, #260]	; (13cbc <bt_id_add+0x178>)
   13bb8:	2202      	movs	r2, #2
   13bba:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13bbe:	4633      	mov	r3, r6
   13bc0:	9600      	str	r6, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   13bc2:	4618      	mov	r0, r3
   13bc4:	493e      	ldr	r1, [pc, #248]	; (13cc0 <bt_id_add+0x17c>)
   13bc6:	e054      	b.n	13c72 <bt_id_add+0x12e>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   13bc8:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   13bcc:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   13bd0:	429a      	cmp	r2, r3
   13bd2:	d12b      	bne.n	13c2c <bt_id_add+0xe8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   13bd4:	2600      	movs	r6, #0
   13bd6:	4b3b      	ldr	r3, [pc, #236]	; (13cc4 <bt_id_add+0x180>)
   13bd8:	2202      	movs	r2, #2
   13bda:	4630      	mov	r0, r6
   13bdc:	4938      	ldr	r1, [pc, #224]	; (13cc0 <bt_id_add+0x17c>)
   13bde:	9302      	str	r3, [sp, #8]
   13be0:	e9cd 6600 	strd	r6, r6, [sp]
   13be4:	4633      	mov	r3, r6
   13be6:	f014 ff8a 	bl	28afe <z_log_msg_runtime_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   13bea:	4632      	mov	r2, r6
   13bec:	4631      	mov	r1, r6
   13bee:	f242 0029 	movw	r0, #8233	; 0x2029
   13bf2:	f7ff f80d 	bl	12c10 <bt_hci_cmd_send_sync>
		if (err) {
   13bf6:	b130      	cbz	r0, 13c06 <bt_id_add+0xc2>
			LOG_ERR("Failed to clear resolution list");
   13bf8:	4b33      	ldr	r3, [pc, #204]	; (13cc8 <bt_id_add+0x184>)
   13bfa:	9600      	str	r6, [sp, #0]
   13bfc:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13c00:	4633      	mov	r3, r6
		LOG_ERR("Failed to set privacy mode");
   13c02:	2201      	movs	r2, #1
   13c04:	e7dd      	b.n	13bc2 <bt_id_add+0x7e>
		bt_dev.le.rl_entries++;
   13c06:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13c0a:	3301      	adds	r3, #1
   13c0c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   13c10:	7a2b      	ldrb	r3, [r5, #8]
   13c12:	f043 0304 	orr.w	r3, r3, #4
   13c16:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13c18:	2001      	movs	r0, #1
   13c1a:	f014 ff7f 	bl	28b1c <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13c1e:	2100      	movs	r1, #0
   13c20:	482a      	ldr	r0, [pc, #168]	; (13ccc <bt_id_add+0x188>)
}
   13c22:	b007      	add	sp, #28
   13c24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13c28:	f000 bbac 	b.w	14384 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   13c2c:	462a      	mov	r2, r5
   13c2e:	1c6f      	adds	r7, r5, #1
   13c30:	4639      	mov	r1, r7
   13c32:	f812 0b2a 	ldrb.w	r0, [r2], #42
   13c36:	f014 ff26 	bl	28a86 <hci_id_add>
	if (err) {
   13c3a:	4606      	mov	r6, r0
   13c3c:	b128      	cbz	r0, 13c4a <bt_id_add+0x106>
		LOG_ERR("Failed to add IRK to controller");
   13c3e:	4b24      	ldr	r3, [pc, #144]	; (13cd0 <bt_id_add+0x18c>)
		LOG_ERR("Failed to set privacy mode");
   13c40:	9302      	str	r3, [sp, #8]
   13c42:	2300      	movs	r3, #0
   13c44:	e9cd 3300 	strd	r3, r3, [sp]
   13c48:	e7db      	b.n	13c02 <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   13c4a:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13c4e:	3301      	adds	r3, #1
   13c50:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   13c54:	7a2b      	ldrb	r3, [r5, #8]
   13c56:	f043 0304 	orr.w	r3, r3, #4
   13c5a:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   13c5c:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   13c60:	f013 0304 	ands.w	r3, r3, #4
   13c64:	d108      	bne.n	13c78 <bt_id_add+0x134>
		LOG_WRN("Set privacy mode command is not supported");
   13c66:	4a1b      	ldr	r2, [pc, #108]	; (13cd4 <bt_id_add+0x190>)
   13c68:	4915      	ldr	r1, [pc, #84]	; (13cc0 <bt_id_add+0x17c>)
   13c6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   13c6e:	2202      	movs	r2, #2
   13c70:	9300      	str	r3, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   13c72:	f014 ff44 	bl	28afe <z_log_msg_runtime_create.constprop.0>
		goto done;
   13c76:	e7cf      	b.n	13c18 <bt_id_add+0xd4>
	bt_addr_le_copy(&cp.id_addr, addr);
   13c78:	4639      	mov	r1, r7
   13c7a:	a804      	add	r0, sp, #16
   13c7c:	f014 fefc 	bl	28a78 <bt_addr_le_copy>
	cp.mode = mode;
   13c80:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   13c82:	2108      	movs	r1, #8
   13c84:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   13c88:	f88d 3017 	strb.w	r3, [sp, #23]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   13c8c:	f7fe ff72 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   13c90:	4604      	mov	r4, r0
   13c92:	b160      	cbz	r0, 13cae <bt_id_add+0x16a>
   13c94:	2208      	movs	r2, #8
   13c96:	a904      	add	r1, sp, #16
   13c98:	300c      	adds	r0, #12
   13c9a:	f016 fc98 	bl	2a5ce <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   13c9e:	4632      	mov	r2, r6
   13ca0:	4621      	mov	r1, r4
   13ca2:	f242 004e 	movw	r0, #8270	; 0x204e
   13ca6:	f7fe ffb3 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
   13caa:	2800      	cmp	r0, #0
   13cac:	d0b4      	beq.n	13c18 <bt_id_add+0xd4>
		LOG_ERR("Failed to set privacy mode");
   13cae:	4b0a      	ldr	r3, [pc, #40]	; (13cd8 <bt_id_add+0x194>)
   13cb0:	e7c6      	b.n	13c40 <bt_id_add+0xfc>
   13cb2:	bf00      	nop
   13cb4:	20008000 	.word	0x20008000
   13cb8:	00028b73 	.word	0x00028b73
   13cbc:	00030e90 	.word	0x00030e90
   13cc0:	0002d65c 	.word	0x0002d65c
   13cc4:	00030eb5 	.word	0x00030eb5
   13cc8:	00030ee6 	.word	0x00030ee6
   13ccc:	00028b4d 	.word	0x00028b4d
   13cd0:	00030f06 	.word	0x00030f06
   13cd4:	00030f26 	.word	0x00030f26
   13cd8:	00030f50 	.word	0x00030f50

00013cdc <bt_id_del>:
{
   13cdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   13ce0:	4605      	mov	r5, r0
   13ce2:	b3a8      	cbz	r0, 13d50 <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   13ce4:	4c4c      	ldr	r4, [pc, #304]	; (13e18 <bt_id_del+0x13c>)
   13ce6:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13cea:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   13cee:	b1da      	cbz	r2, 13d28 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13cf0:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   13cf2:	4293      	cmp	r3, r2
   13cf4:	dc25      	bgt.n	13d42 <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   13cf6:	2100      	movs	r1, #0
   13cf8:	2206      	movs	r2, #6
   13cfa:	4608      	mov	r0, r1
   13cfc:	f001 fd48 	bl	15790 <bt_conn_lookup_state_le>
	if (conn) {
   13d00:	4606      	mov	r6, r0
   13d02:	b340      	cbz	r0, 13d56 <bt_id_del+0x7a>
   13d04:	34cc      	adds	r4, #204	; 0xcc
   13d06:	e8d4 3fef 	ldaex	r3, [r4]
   13d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13d0e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13d12:	2a00      	cmp	r2, #0
   13d14:	d1f7      	bne.n	13d06 <bt_id_del+0x2a>
	keys->state |= flag;
   13d16:	7a2b      	ldrb	r3, [r5, #8]
   13d18:	f043 0302 	orr.w	r3, r3, #2
   13d1c:	722b      	strb	r3, [r5, #8]
}
   13d1e:	b004      	add	sp, #16
   13d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   13d24:	f001 ba28 	b.w	15178 <bt_conn_unref>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   13d28:	b95b      	cbnz	r3, 13d42 <bt_id_del+0x66>
   13d2a:	493c      	ldr	r1, [pc, #240]	; (13e1c <bt_id_del+0x140>)
   13d2c:	483c      	ldr	r0, [pc, #240]	; (13e20 <bt_id_del+0x144>)
   13d2e:	f240 4323 	movw	r3, #1059	; 0x423
   13d32:	4a3c      	ldr	r2, [pc, #240]	; (13e24 <bt_id_del+0x148>)
   13d34:	f013 fc5d 	bl	275f2 <assert_print>
   13d38:	f240 4123 	movw	r1, #1059	; 0x423
   13d3c:	4839      	ldr	r0, [pc, #228]	; (13e24 <bt_id_del+0x148>)
   13d3e:	f013 fc51 	bl	275e4 <assert_post_action>
			bt_dev.le.rl_entries--;
   13d42:	3b01      	subs	r3, #1
   13d44:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13d48:	7a2b      	ldrb	r3, [r5, #8]
   13d4a:	f023 0304 	bic.w	r3, r3, #4
   13d4e:	722b      	strb	r3, [r5, #8]
}
   13d50:	b004      	add	sp, #16
   13d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13d56:	4601      	mov	r1, r0
   13d58:	4833      	ldr	r0, [pc, #204]	; (13e28 <bt_id_del+0x14c>)
   13d5a:	f000 fb13 	bl	14384 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13d5e:	4630      	mov	r0, r6
   13d60:	f014 fedc 	bl	28b1c <addr_res_enable>
	if (err) {
   13d64:	4607      	mov	r7, r0
   13d66:	b1b8      	cbz	r0, 13d98 <bt_id_del+0xbc>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   13d68:	4b30      	ldr	r3, [pc, #192]	; (13e2c <bt_id_del+0x150>)
   13d6a:	9003      	str	r0, [sp, #12]
   13d6c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   13d70:	2201      	movs	r2, #1
   13d72:	4633      	mov	r3, r6
   13d74:	4630      	mov	r0, r6
   13d76:	492e      	ldr	r1, [pc, #184]	; (13e30 <bt_id_del+0x154>)
   13d78:	9600      	str	r6, [sp, #0]
   13d7a:	f014 fec0 	bl	28afe <z_log_msg_runtime_create.constprop.0>
	if (bt_dev.le.rl_entries) {
   13d7e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13d82:	b113      	cbz	r3, 13d8a <bt_id_del+0xae>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13d84:	2001      	movs	r0, #1
   13d86:	f014 fec9 	bl	28b1c <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13d8a:	2100      	movs	r1, #0
   13d8c:	4829      	ldr	r0, [pc, #164]	; (13e34 <bt_id_del+0x158>)
}
   13d8e:	b004      	add	sp, #16
   13d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13d94:	f000 baf6 	b.w	14384 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13d98:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13d9c:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   13da0:	429a      	cmp	r2, r3
   13da2:	d20c      	bcs.n	13dbe <bt_id_del+0xe2>
		bt_dev.le.rl_entries--;
   13da4:	3b01      	subs	r3, #1
   13da6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13daa:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13dac:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   13dae:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13db2:	2002      	movs	r0, #2
   13db4:	4920      	ldr	r1, [pc, #128]	; (13e38 <bt_id_del+0x15c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   13db6:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13db8:	f005 fec6 	bl	19b48 <bt_keys_foreach_type>
		goto done;
   13dbc:	e7df      	b.n	13d7e <bt_id_del+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   13dbe:	2107      	movs	r1, #7
   13dc0:	f242 0028 	movw	r0, #8232	; 0x2028
   13dc4:	f7fe fed6 	bl	12b74 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   13dc8:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   13dcc:	4606      	mov	r6, r0
   13dce:	b950      	cbnz	r0, 13de6 <bt_id_del+0x10a>
		LOG_ERR("Failed to remove IRK from controller");
   13dd0:	4b1a      	ldr	r3, [pc, #104]	; (13e3c <bt_id_del+0x160>)
   13dd2:	2201      	movs	r2, #1
   13dd4:	9302      	str	r3, [sp, #8]
   13dd6:	2300      	movs	r3, #0
   13dd8:	4915      	ldr	r1, [pc, #84]	; (13e30 <bt_id_del+0x154>)
   13dda:	4618      	mov	r0, r3
   13ddc:	e9cd 3300 	strd	r3, r3, [sp]
   13de0:	f014 fe8d 	bl	28afe <z_log_msg_runtime_create.constprop.0>
		goto done;
   13de4:	e7cb      	b.n	13d7e <bt_id_del+0xa2>
	return net_buf_simple_add(&buf->b, len);
   13de6:	2107      	movs	r1, #7
   13de8:	300c      	adds	r0, #12
   13dea:	f006 fc01 	bl	1a5f0 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13dee:	4641      	mov	r1, r8
   13df0:	f014 fe42 	bl	28a78 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   13df4:	463a      	mov	r2, r7
   13df6:	4631      	mov	r1, r6
   13df8:	f242 0028 	movw	r0, #8232	; 0x2028
   13dfc:	f7fe ff08 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
   13e00:	2800      	cmp	r0, #0
   13e02:	d1e5      	bne.n	13dd0 <bt_id_del+0xf4>
	bt_dev.le.rl_entries--;
   13e04:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13e08:	3b01      	subs	r3, #1
   13e0a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   13e0e:	7a2b      	ldrb	r3, [r5, #8]
   13e10:	f023 0304 	bic.w	r3, r3, #4
   13e14:	722b      	strb	r3, [r5, #8]
   13e16:	e7b2      	b.n	13d7e <bt_id_del+0xa2>
   13e18:	20008000 	.word	0x20008000
   13e1c:	00030f6b 	.word	0x00030f6b
   13e20:	0002e715 	.word	0x0002e715
   13e24:	00030dda 	.word	0x00030dda
   13e28:	00028b73 	.word	0x00028b73
   13e2c:	00030f84 	.word	0x00030f84
   13e30:	0002d65c 	.word	0x0002d65c
   13e34:	00028b4d 	.word	0x00028b4d
   13e38:	00028ae9 	.word	0x00028ae9
   13e3c:	00030fb1 	.word	0x00030fb1

00013e40 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13e40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13e42:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13e44:	4604      	mov	r4, r0
   13e46:	b920      	cbnz	r0, 13e52 <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13e48:	b31d      	cbz	r5, 13e92 <bt_id_create+0x52>
			return -EINVAL;
   13e4a:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   13e4e:	b004      	add	sp, #16
   13e50:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13e52:	4921      	ldr	r1, [pc, #132]	; (13ed8 <bt_id_create+0x98>)
   13e54:	f014 fe03 	bl	28a5e <bt_addr_le_eq>
   13e58:	2800      	cmp	r0, #0
   13e5a:	d1f5      	bne.n	13e48 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13e5c:	7823      	ldrb	r3, [r4, #0]
   13e5e:	2b01      	cmp	r3, #1
   13e60:	d104      	bne.n	13e6c <bt_id_create+0x2c>
   13e62:	79a3      	ldrb	r3, [r4, #6]
   13e64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13e68:	2bc0      	cmp	r3, #192	; 0xc0
   13e6a:	d00a      	beq.n	13e82 <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   13e6c:	4b1b      	ldr	r3, [pc, #108]	; (13edc <bt_id_create+0x9c>)
   13e6e:	2201      	movs	r2, #1
   13e70:	9302      	str	r3, [sp, #8]
   13e72:	2300      	movs	r3, #0
   13e74:	491a      	ldr	r1, [pc, #104]	; (13ee0 <bt_id_create+0xa0>)
   13e76:	4618      	mov	r0, r3
   13e78:	e9cd 3300 	strd	r3, r3, [sp]
   13e7c:	f014 fe3f 	bl	28afe <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   13e80:	e7e3      	b.n	13e4a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   13e82:	4620      	mov	r0, r4
   13e84:	f7ff fd60 	bl	13948 <id_find>
   13e88:	2800      	cmp	r0, #0
   13e8a:	dbdd      	blt.n	13e48 <bt_id_create+0x8>
			return -EALREADY;
   13e8c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13e90:	e7dd      	b.n	13e4e <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13e92:	4d14      	ldr	r5, [pc, #80]	; (13ee4 <bt_id_create+0xa4>)
   13e94:	79eb      	ldrb	r3, [r5, #7]
   13e96:	2b01      	cmp	r3, #1
   13e98:	d01a      	beq.n	13ed0 <bt_id_create+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13e9a:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   13e9e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13ea2:	07db      	lsls	r3, r3, #31
   13ea4:	d50b      	bpl.n	13ebe <bt_id_create+0x7e>
	new_id = bt_dev.id_count;
   13ea6:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   13ea8:	4621      	mov	r1, r4
   13eaa:	4630      	mov	r0, r6
   13eac:	f7ff fd64 	bl	13978 <id_create.constprop.0>
	if (err) {
   13eb0:	2800      	cmp	r0, #0
   13eb2:	d1cc      	bne.n	13e4e <bt_id_create+0xe>
		bt_dev.id_count++;
   13eb4:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   13eb6:	4630      	mov	r0, r6
		bt_dev.id_count++;
   13eb8:	3301      	adds	r3, #1
   13eba:	71eb      	strb	r3, [r5, #7]
	return new_id;
   13ebc:	e7c7      	b.n	13e4e <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   13ebe:	2c00      	cmp	r4, #0
   13ec0:	d0c3      	beq.n	13e4a <bt_id_create+0xa>
   13ec2:	4620      	mov	r0, r4
   13ec4:	4904      	ldr	r1, [pc, #16]	; (13ed8 <bt_id_create+0x98>)
   13ec6:	f014 fdca 	bl	28a5e <bt_addr_le_eq>
   13eca:	2800      	cmp	r0, #0
   13ecc:	d0eb      	beq.n	13ea6 <bt_id_create+0x66>
   13ece:	e7bc      	b.n	13e4a <bt_id_create+0xa>
		return -ENOMEM;
   13ed0:	f06f 000b 	mvn.w	r0, #11
   13ed4:	e7bb      	b.n	13e4e <bt_id_create+0xe>
   13ed6:	bf00      	nop
   13ed8:	000306da 	.word	0x000306da
   13edc:	00030fd6 	.word	0x00030fd6
   13ee0:	0002d65c 	.word	0x0002d65c
   13ee4:	20008000 	.word	0x20008000

00013ee8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13ee8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   13eea:	4604      	mov	r4, r0
{
   13eec:	b086      	sub	sp, #24
	CHECKIF(addr == NULL) {
   13eee:	b958      	cbnz	r0, 13f08 <bt_id_read_public_addr+0x20>
		LOG_WRN("Invalid input parameters");
   13ef0:	4b1d      	ldr	r3, [pc, #116]	; (13f68 <bt_id_read_public_addr+0x80>)
   13ef2:	2202      	movs	r2, #2
   13ef4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13ef8:	4603      	mov	r3, r0
   13efa:	491c      	ldr	r1, [pc, #112]	; (13f6c <bt_id_read_public_addr+0x84>)
   13efc:	9000      	str	r0, [sp, #0]
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   13efe:	f014 fdfe 	bl	28afe <z_log_msg_runtime_create.constprop.0>
		return 0U;
   13f02:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   13f04:	b006      	add	sp, #24
   13f06:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13f08:	2100      	movs	r1, #0
   13f0a:	f241 0009 	movw	r0, #4105	; 0x1009
   13f0e:	aa05      	add	r2, sp, #20
   13f10:	f7fe fe7e 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
   13f14:	4606      	mov	r6, r0
   13f16:	b140      	cbz	r0, 13f2a <bt_id_read_public_addr+0x42>
		LOG_WRN("Failed to read public address");
   13f18:	4b15      	ldr	r3, [pc, #84]	; (13f70 <bt_id_read_public_addr+0x88>)
   13f1a:	2202      	movs	r2, #2
   13f1c:	9302      	str	r3, [sp, #8]
   13f1e:	2300      	movs	r3, #0
   13f20:	4912      	ldr	r1, [pc, #72]	; (13f6c <bt_id_read_public_addr+0x84>)
   13f22:	4618      	mov	r0, r3
   13f24:	e9cd 3300 	strd	r3, r3, [sp]
   13f28:	e7e9      	b.n	13efe <bt_id_read_public_addr+0x16>
	rp = (void *)rsp->data;
   13f2a:	9b05      	ldr	r3, [sp, #20]
   13f2c:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13f2e:	68dd      	ldr	r5, [r3, #12]
   13f30:	4910      	ldr	r1, [pc, #64]	; (13f74 <bt_id_read_public_addr+0x8c>)
   13f32:	3501      	adds	r5, #1
   13f34:	4628      	mov	r0, r5
   13f36:	f018 f8b9 	bl	2c0ac <memcmp>
   13f3a:	b918      	cbnz	r0, 13f44 <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   13f3c:	9805      	ldr	r0, [sp, #20]
   13f3e:	f006 fa35 	bl	1a3ac <net_buf_unref>
		return 0U;
   13f42:	e7de      	b.n	13f02 <bt_id_read_public_addr+0x1a>
   13f44:	2206      	movs	r2, #6
   13f46:	4628      	mov	r0, r5
   13f48:	490b      	ldr	r1, [pc, #44]	; (13f78 <bt_id_read_public_addr+0x90>)
   13f4a:	f018 f8af 	bl	2c0ac <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13f4e:	2800      	cmp	r0, #0
   13f50:	d0f4      	beq.n	13f3c <bt_id_read_public_addr+0x54>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   13f52:	4629      	mov	r1, r5
   13f54:	1c60      	adds	r0, r4, #1
   13f56:	f014 fd8a 	bl	28a6e <bt_addr_copy>
	net_buf_unref(rsp);
   13f5a:	9805      	ldr	r0, [sp, #20]
	addr->type = BT_ADDR_LE_PUBLIC;
   13f5c:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   13f5e:	f006 fa25 	bl	1a3ac <net_buf_unref>
	return 1U;
   13f62:	2001      	movs	r0, #1
   13f64:	e7ce      	b.n	13f04 <bt_id_read_public_addr+0x1c>
   13f66:	bf00      	nop
   13f68:	00031004 	.word	0x00031004
   13f6c:	0002d65c 	.word	0x0002d65c
   13f70:	0003101d 	.word	0x0003101d
   13f74:	000306e7 	.word	0x000306e7
   13f78:	000306e1 	.word	0x000306e1

00013f7c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13f7c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13f7e:	4668      	mov	r0, sp
   13f80:	f7ff ffb2 	bl	13ee8 <bt_id_read_public_addr>
   13f84:	4b04      	ldr	r3, [pc, #16]	; (13f98 <bt_setup_public_id_addr+0x1c>)
   13f86:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13f88:	b118      	cbz	r0, 13f92 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13f8a:	4669      	mov	r1, sp
   13f8c:	2000      	movs	r0, #0
   13f8e:	f7ff fcf3 	bl	13978 <id_create.constprop.0>
}
   13f92:	b003      	add	sp, #12
   13f94:	f85d fb04 	ldr.w	pc, [sp], #4
   13f98:	20008000 	.word	0x20008000

00013f9c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13f9e:	4b25      	ldr	r3, [pc, #148]	; (14034 <bt_read_static_addr+0x98>)
{
   13fa0:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13fa2:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   13fa6:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13fa8:	f013 0301 	ands.w	r3, r3, #1
{
   13fac:	b087      	sub	sp, #28
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13fae:	d10c      	bne.n	13fca <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   13fb0:	4a21      	ldr	r2, [pc, #132]	; (14038 <bt_read_static_addr+0x9c>)
   13fb2:	9202      	str	r2, [sp, #8]
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   13fb4:	2202      	movs	r2, #2
   13fb6:	4618      	mov	r0, r3
   13fb8:	e9cd 3300 	strd	r3, r3, [sp]
   13fbc:	491f      	ldr	r1, [pc, #124]	; (1403c <bt_read_static_addr+0xa0>)
   13fbe:	f014 fd9e 	bl	28afe <z_log_msg_runtime_create.constprop.0>
		return 0;
   13fc2:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   13fc4:	4620      	mov	r0, r4
   13fc6:	b007      	add	sp, #28
   13fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13fca:	2100      	movs	r1, #0
   13fcc:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13fd0:	aa05      	add	r2, sp, #20
   13fd2:	f7fe fe1d 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
   13fd6:	4603      	mov	r3, r0
   13fd8:	b118      	cbz	r0, 13fe2 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   13fda:	4b19      	ldr	r3, [pc, #100]	; (14040 <bt_read_static_addr+0xa4>)
   13fdc:	9302      	str	r3, [sp, #8]
   13fde:	2300      	movs	r3, #0
   13fe0:	e7e8      	b.n	13fb4 <bt_read_static_addr+0x18>
	rp = (void *)rsp->data;
   13fe2:	9805      	ldr	r0, [sp, #20]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   13fe4:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   13fe6:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   13fe8:	7854      	ldrb	r4, [r2, #1]
   13fea:	3202      	adds	r2, #2
   13fec:	42b4      	cmp	r4, r6
   13fee:	bf28      	it	cs
   13ff0:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   13ff2:	429c      	cmp	r4, r3
   13ff4:	dc0e      	bgt.n	14014 <bt_read_static_addr+0x78>
	net_buf_unref(rsp);
   13ff6:	f006 f9d9 	bl	1a3ac <net_buf_unref>
	if (!cnt) {
   13ffa:	2c00      	cmp	r4, #0
   13ffc:	d1e2      	bne.n	13fc4 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   13ffe:	4b11      	ldr	r3, [pc, #68]	; (14044 <bt_read_static_addr+0xa8>)
   14000:	2202      	movs	r2, #2
   14002:	e9cd 4301 	strd	r4, r3, [sp, #4]
   14006:	4620      	mov	r0, r4
   14008:	4623      	mov	r3, r4
   1400a:	490c      	ldr	r1, [pc, #48]	; (1403c <bt_read_static_addr+0xa0>)
   1400c:	9400      	str	r4, [sp, #0]
   1400e:	f014 fd76 	bl	28afe <z_log_msg_runtime_create.constprop.0>
   14012:	e7d7      	b.n	13fc4 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14014:	4611      	mov	r1, r2
   14016:	fb07 5603 	mla	r6, r7, r3, r5
   1401a:	f102 0c14 	add.w	ip, r2, #20
   1401e:	f851 eb04 	ldr.w	lr, [r1], #4
   14022:	4561      	cmp	r1, ip
   14024:	f846 eb04 	str.w	lr, [r6], #4
   14028:	d1f9      	bne.n	1401e <bt_read_static_addr+0x82>
   1402a:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   1402c:	3301      	adds	r3, #1
   1402e:	8031      	strh	r1, [r6, #0]
   14030:	3216      	adds	r2, #22
   14032:	e7de      	b.n	13ff2 <bt_read_static_addr+0x56>
   14034:	20008000 	.word	0x20008000
   14038:	0003103b 	.word	0x0003103b
   1403c:	0002d65c 	.word	0x0002d65c
   14040:	00031067 	.word	0x00031067
   14044:	00031087 	.word	0x00031087

00014048 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14048:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1404a:	4d15      	ldr	r5, [pc, #84]	; (140a0 <bt_setup_random_id_addr+0x58>)
{
   1404c:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   1404e:	79ec      	ldrb	r4, [r5, #7]
   14050:	b92c      	cbnz	r4, 1405e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   14052:	2101      	movs	r1, #1
   14054:	a802      	add	r0, sp, #8
   14056:	f7ff ffa1 	bl	13f9c <bt_read_static_addr>
   1405a:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   1405c:	b9c0      	cbnz	r0, 14090 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1405e:	2100      	movs	r1, #0
   14060:	4608      	mov	r0, r1
}
   14062:	b008      	add	sp, #32
   14064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   14068:	f7ff beea 	b.w	13e40 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1406c:	ab02      	add	r3, sp, #8
   1406e:	fb06 3102 	mla	r1, r6, r2, r3
   14072:	f10d 0001 	add.w	r0, sp, #1
   14076:	f014 fcfa 	bl	28a6e <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   1407a:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1407c:	4669      	mov	r1, sp
   1407e:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   14080:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   14084:	f7ff fc78 	bl	13978 <id_create.constprop.0>
				if (err) {
   14088:	3401      	adds	r4, #1
   1408a:	b110      	cbz	r0, 14092 <bt_setup_random_id_addr+0x4a>
}
   1408c:	b008      	add	sp, #32
   1408e:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   14090:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   14092:	79eb      	ldrb	r3, [r5, #7]
   14094:	b2e2      	uxtb	r2, r4
   14096:	4293      	cmp	r3, r2
   14098:	d8e8      	bhi.n	1406c <bt_setup_random_id_addr+0x24>
			return 0;
   1409a:	2000      	movs	r0, #0
   1409c:	e7f6      	b.n	1408c <bt_setup_random_id_addr+0x44>
   1409e:	bf00      	nop
   140a0:	20008000 	.word	0x20008000

000140a4 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   140a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   140a8:	4690      	mov	r8, r2
   140aa:	460e      	mov	r6, r1
   140ac:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   140ae:	4602      	mov	r2, r0
   140b0:	2800      	cmp	r0, #0
   140b2:	d04b      	beq.n	1414c <bt_id_set_adv_own_addr+0xa8>
   140b4:	2b00      	cmp	r3, #0
   140b6:	d049      	beq.n	1414c <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   140b8:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   140ba:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   140bc:	d531      	bpl.n	14122 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   140be:	4f25      	ldr	r7, [pc, #148]	; (14154 <bt_id_set_adv_own_addr+0xb0>)
   140c0:	f1b8 0f00 	cmp.w	r8, #0
   140c4:	d013      	beq.n	140ee <bt_id_set_adv_own_addr+0x4a>
   140c6:	0688      	lsls	r0, r1, #26
   140c8:	d40a      	bmi.n	140e0 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   140ca:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   140ce:	5cfb      	ldrb	r3, [r7, r3]
   140d0:	2b01      	cmp	r3, #1
   140d2:	d015      	beq.n	14100 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   140d4:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   140d6:	06b2      	lsls	r2, r6, #26
   140d8:	d50f      	bpl.n	140fa <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   140da:	f043 0302 	orr.w	r3, r3, #2
   140de:	e00b      	b.n	140f8 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   140e0:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   140e4:	0659      	lsls	r1, r3, #25
   140e6:	d4f0      	bmi.n	140ca <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   140e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   140ec:	e006      	b.n	140fc <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   140ee:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   140f2:	5cfb      	ldrb	r3, [r7, r3]
   140f4:	2b01      	cmp	r3, #1
   140f6:	d003      	beq.n	14100 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   140f8:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   140fa:	2000      	movs	r0, #0
}
   140fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14100:	2107      	movs	r1, #7
   14102:	fb01 7104 	mla	r1, r1, r4, r7
   14106:	4610      	mov	r0, r2
   14108:	3101      	adds	r1, #1
   1410a:	f014 fd50 	bl	28bae <bt_id_set_adv_random_addr>
				if (err) {
   1410e:	2800      	cmp	r0, #0
   14110:	d1f4      	bne.n	140fc <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   14112:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14116:	5d3b      	ldrb	r3, [r7, r4]
   14118:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1411a:	f1b8 0f00 	cmp.w	r8, #0
   1411e:	d0ec      	beq.n	140fa <bt_id_set_adv_own_addr+0x56>
   14120:	e7d9      	b.n	140d6 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14122:	074b      	lsls	r3, r1, #29
   14124:	d50e      	bpl.n	14144 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14126:	4e0b      	ldr	r6, [pc, #44]	; (14154 <bt_id_set_adv_own_addr+0xb0>)
   14128:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   1412c:	5df3      	ldrb	r3, [r6, r7]
   1412e:	2b01      	cmp	r3, #1
   14130:	d1e2      	bne.n	140f8 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14132:	2107      	movs	r1, #7
   14134:	fb11 3104 	smlabb	r1, r1, r4, r3
   14138:	4431      	add	r1, r6
   1413a:	f014 fd38 	bl	28bae <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   1413e:	5df3      	ldrb	r3, [r6, r7]
   14140:	702b      	strb	r3, [r5, #0]
		if (err) {
   14142:	e7db      	b.n	140fc <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   14144:	f014 fd3b 	bl	28bbe <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14148:	2301      	movs	r3, #1
   1414a:	e7f9      	b.n	14140 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   1414c:	f06f 0015 	mvn.w	r0, #21
   14150:	e7d4      	b.n	140fc <bt_id_set_adv_own_addr+0x58>
   14152:	bf00      	nop
   14154:	20008000 	.word	0x20008000

00014158 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14158:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1415a:	4e13      	ldr	r6, [pc, #76]	; (141a8 <bt_id_init+0x50>)
   1415c:	79f5      	ldrb	r5, [r6, #7]
   1415e:	b11d      	cbz	r5, 14168 <bt_id_init+0x10>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   14160:	2400      	movs	r4, #0
}
   14162:	4620      	mov	r0, r4
   14164:	b004      	add	sp, #16
   14166:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_setup_public_id_addr();
   14168:	f7ff ff08 	bl	13f7c <bt_setup_public_id_addr>
		if (err) {
   1416c:	4604      	mov	r4, r0
   1416e:	b150      	cbz	r0, 14186 <bt_id_init+0x2e>
			LOG_ERR("Unable to set identity address");
   14170:	4b0e      	ldr	r3, [pc, #56]	; (141ac <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   14172:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14176:	2201      	movs	r2, #1
   14178:	462b      	mov	r3, r5
   1417a:	4628      	mov	r0, r5
   1417c:	490c      	ldr	r1, [pc, #48]	; (141b0 <bt_id_init+0x58>)
   1417e:	9500      	str	r5, [sp, #0]
   14180:	f014 fcbd 	bl	28afe <z_log_msg_runtime_create.constprop.0>
			return err;
   14184:	e7ed      	b.n	14162 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14186:	79f5      	ldrb	r5, [r6, #7]
   14188:	2d00      	cmp	r5, #0
   1418a:	d1e9      	bne.n	14160 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1418c:	f7ff ff5c 	bl	14048 <bt_setup_random_id_addr>
		if (err) {
   14190:	4604      	mov	r4, r0
   14192:	2800      	cmp	r0, #0
   14194:	d1ec      	bne.n	14170 <bt_id_init+0x18>
		err = set_random_address(&bt_dev.id_addr[0].a);
   14196:	1c70      	adds	r0, r6, #1
   14198:	f7ff fc1c 	bl	139d4 <set_random_address>
		if (err) {
   1419c:	4604      	mov	r4, r0
   1419e:	2800      	cmp	r0, #0
   141a0:	d0de      	beq.n	14160 <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   141a2:	4b04      	ldr	r3, [pc, #16]	; (141b4 <bt_id_init+0x5c>)
   141a4:	e7e5      	b.n	14172 <bt_id_init+0x1a>
   141a6:	bf00      	nop
   141a8:	20008000 	.word	0x20008000
   141ac:	000310b0 	.word	0x000310b0
   141b0:	0002d65c 	.word	0x0002d65c
   141b4:	000310cf 	.word	0x000310cf

000141b8 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   141b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141bc:	460c      	mov	r4, r1
   141be:	b087      	sub	sp, #28
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   141c0:	2120      	movs	r1, #32
{
   141c2:	4692      	mov	sl, r2
   141c4:	9004      	str	r0, [sp, #16]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   141c6:	f7fe fcd5 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   141ca:	4605      	mov	r5, r0
   141cc:	2800      	cmp	r0, #0
   141ce:	d05a      	beq.n	14286 <hci_set_ad+0xce>
   141d0:	2120      	movs	r1, #32
   141d2:	300c      	adds	r0, #12
   141d4:	f006 fa0c 	bl	1a5f0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   141d8:	2220      	movs	r2, #32
   141da:	4681      	mov	r9, r0
   141dc:	2100      	movs	r1, #0
   141de:	f017 ffaf 	bl	2c140 <memset>
	uint8_t set_data_len = 0;
   141e2:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   141e4:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   141e8:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   141ec:	2300      	movs	r3, #0
   141ee:	f8d4 8000 	ldr.w	r8, [r4]
   141f2:	6862      	ldr	r2, [r4, #4]
   141f4:	4293      	cmp	r3, r2
   141f6:	d30c      	bcc.n	14212 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   141f8:	3408      	adds	r4, #8
   141fa:	45a2      	cmp	sl, r4
   141fc:	d1f6      	bne.n	141ec <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   141fe:	2200      	movs	r2, #0
   14200:	4629      	mov	r1, r5
   14202:	9804      	ldr	r0, [sp, #16]
	*data_len = set_data_len;
   14204:	f889 6000 	strb.w	r6, [r9]
}
   14208:	b007      	add	sp, #28
   1420a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1420e:	f7fe bcff 	b.w	12c10 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   14212:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   14216:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   14218:	1811      	adds	r1, r2, r0
   1421a:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   1421c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   14220:	d91a      	bls.n	14258 <hci_set_ad+0xa0>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   14222:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   14226:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1422a:	d101      	bne.n	14230 <hci_set_ad+0x78>
   1422c:	2a00      	cmp	r2, #0
   1422e:	dc11      	bgt.n	14254 <hci_set_ad+0x9c>
					LOG_ERR("Too big advertising data");
   14230:	4b16      	ldr	r3, [pc, #88]	; (1428c <hci_set_ad+0xd4>)
   14232:	2201      	movs	r2, #1
   14234:	9302      	str	r3, [sp, #8]
   14236:	2300      	movs	r3, #0
   14238:	4915      	ldr	r1, [pc, #84]	; (14290 <hci_set_ad+0xd8>)
   1423a:	4618      	mov	r0, r3
   1423c:	e9cd 3300 	strd	r3, r3, [sp]
   14240:	f014 fd0c 	bl	28c5c <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   14244:	4628      	mov	r0, r5
   14246:	f006 f8b1 	bl	1a3ac <net_buf_unref>
					return -EINVAL;
   1424a:	f06f 0015 	mvn.w	r0, #21
}
   1424e:	b007      	add	sp, #28
   14250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   14254:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   14258:	b2d7      	uxtb	r7, r2
   1425a:	1c79      	adds	r1, r7, #1
   1425c:	f80b 1006 	strb.w	r1, [fp, r6]
   14260:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   14262:	b2c9      	uxtb	r1, r1
   14264:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14268:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1426c:	fa5b f080 	uxtab	r0, fp, r0
   14270:	9305      	str	r3, [sp, #20]
			set_data_len += len;
   14272:	3702      	adds	r7, #2
   14274:	f017 ff2a 	bl	2c0cc <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   14278:	9b05      	ldr	r3, [sp, #20]
			set_data_len += len;
   1427a:	4437      	add	r7, r6
   1427c:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   1427e:	3301      	adds	r3, #1
   14280:	f108 0808 	add.w	r8, r8, #8
   14284:	e7b5      	b.n	141f2 <hci_set_ad+0x3a>
		return -ENOBUFS;
   14286:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1428a:	e7e0      	b.n	1424e <hci_set_ad+0x96>
   1428c:	000310f2 	.word	0x000310f2
   14290:	0002d614 	.word	0x0002d614

00014294 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   14294:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   14296:	4605      	mov	r5, r0
   14298:	4b16      	ldr	r3, [pc, #88]	; (142f4 <le_adv_start_add_conn+0x60>)
   1429a:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   1429e:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   142a0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   142a4:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   142a6:	2207      	movs	r2, #7
   142a8:	4628      	mov	r0, r5
   142aa:	4913      	ldr	r1, [pc, #76]	; (142f8 <le_adv_start_add_conn+0x64>)
   142ac:	f017 fefe 	bl	2c0ac <memcmp>
   142b0:	4603      	mov	r3, r0
   142b2:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   142b4:	b96b      	cbnz	r3, 142d2 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   142b6:	4911      	ldr	r1, [pc, #68]	; (142fc <le_adv_start_add_conn+0x68>)
   142b8:	f001 fa0c 	bl	156d4 <bt_conn_add_le>
		if (!conn) {
   142bc:	4604      	mov	r4, r0
   142be:	b910      	cbnz	r0, 142c6 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   142c0:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   142c4:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   142c6:	2104      	movs	r1, #4
   142c8:	f000 ff8e 	bl	151e8 <bt_conn_set_state>
		return 0;
   142cc:	2000      	movs	r0, #0
		*out_conn = conn;
   142ce:	6034      	str	r4, [r6, #0]
   142d0:	e7f8      	b.n	142c4 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   142d2:	4629      	mov	r1, r5
   142d4:	f001 fa36 	bl	15744 <bt_conn_exists_le>
   142d8:	b940      	cbnz	r0, 142ec <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   142da:	7820      	ldrb	r0, [r4, #0]
   142dc:	4629      	mov	r1, r5
   142de:	f001 f9f9 	bl	156d4 <bt_conn_add_le>
	if (!conn) {
   142e2:	4604      	mov	r4, r0
   142e4:	2800      	cmp	r0, #0
   142e6:	d0eb      	beq.n	142c0 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   142e8:	2105      	movs	r1, #5
   142ea:	e7ed      	b.n	142c8 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   142ec:	f06f 0015 	mvn.w	r0, #21
   142f0:	e7e8      	b.n	142c4 <le_adv_start_add_conn+0x30>
   142f2:	bf00      	nop
   142f4:	20008000 	.word	0x20008000
   142f8:	000306da 	.word	0x000306da
   142fc:	000306d3 	.word	0x000306d3

00014300 <valid_adv_param>:
{
   14300:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14302:	6843      	ldr	r3, [r0, #4]
{
   14304:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14306:	0558      	lsls	r0, r3, #21
   14308:	d501      	bpl.n	1430e <valid_adv_param+0xe>
		return false;
   1430a:	2000      	movs	r0, #0
}
   1430c:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1430e:	6922      	ldr	r2, [r4, #16]
   14310:	b10a      	cbz	r2, 14316 <valid_adv_param+0x16>
   14312:	07d9      	lsls	r1, r3, #31
   14314:	d5f9      	bpl.n	1430a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   14316:	4d19      	ldr	r5, [pc, #100]	; (1437c <valid_adv_param+0x7c>)
   14318:	7820      	ldrb	r0, [r4, #0]
   1431a:	79eb      	ldrb	r3, [r5, #7]
   1431c:	4283      	cmp	r3, r0
   1431e:	d9f4      	bls.n	1430a <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   14320:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14324:	2207      	movs	r2, #7
   14326:	4916      	ldr	r1, [pc, #88]	; (14380 <valid_adv_param+0x80>)
   14328:	4428      	add	r0, r5
   1432a:	f017 febf 	bl	2c0ac <memcmp>
	if (param->id >= bt_dev.id_count ||
   1432e:	2800      	cmp	r0, #0
   14330:	d0eb      	beq.n	1430a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14332:	6860      	ldr	r0, [r4, #4]
   14334:	07c2      	lsls	r2, r0, #31
   14336:	d406      	bmi.n	14346 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   14338:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1433c:	2b08      	cmp	r3, #8
   1433e:	d802      	bhi.n	14346 <valid_adv_param+0x46>
   14340:	68a3      	ldr	r3, [r4, #8]
   14342:	2b9f      	cmp	r3, #159	; 0x9f
   14344:	d9e1      	bls.n	1430a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   14346:	f010 0f30 	tst.w	r0, #48	; 0x30
   1434a:	d002      	beq.n	14352 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1434c:	6923      	ldr	r3, [r4, #16]
   1434e:	2b00      	cmp	r3, #0
   14350:	d0db      	beq.n	1430a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   14352:	06c3      	lsls	r3, r0, #27
   14354:	d401      	bmi.n	1435a <valid_adv_param+0x5a>
   14356:	6923      	ldr	r3, [r4, #16]
   14358:	b943      	cbnz	r3, 1436c <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   1435a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1435e:	429a      	cmp	r2, r3
   14360:	d8d3      	bhi.n	1430a <valid_adv_param+0xa>
   14362:	2a1f      	cmp	r2, #31
   14364:	d9d1      	bls.n	1430a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   14366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1436a:	d8ce      	bhi.n	1430a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1436c:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   14370:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   14374:	bf18      	it	ne
   14376:	2001      	movne	r0, #1
   14378:	e7c8      	b.n	1430c <valid_adv_param+0xc>
   1437a:	bf00      	nop
   1437c:	20008000 	.word	0x20008000
   14380:	000306da 	.word	0x000306da

00014384 <bt_le_ext_adv_foreach>:
{
   14384:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   14386:	4801      	ldr	r0, [pc, #4]	; (1438c <bt_le_ext_adv_foreach+0x8>)
   14388:	4718      	bx	r3
   1438a:	bf00      	nop
   1438c:	20008018 	.word	0x20008018

00014390 <bt_le_adv_lookup_legacy>:
}
   14390:	4800      	ldr	r0, [pc, #0]	; (14394 <bt_le_adv_lookup_legacy+0x4>)
   14392:	4770      	bx	lr
   14394:	20008018 	.word	0x20008018

00014398 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   14398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1439c:	b08d      	sub	sp, #52	; 0x34
   1439e:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   143a0:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   143a2:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   143a6:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   143a8:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   143ac:	4890      	ldr	r0, [pc, #576]	; (145f0 <bt_le_adv_start_legacy+0x258>)
   143ae:	bf18      	it	ne
   143b0:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   143b2:	9307      	str	r3, [sp, #28]
   143b4:	f014 fc3d 	bl	28c32 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   143b8:	0747      	lsls	r7, r0, #29
{
   143ba:	460d      	mov	r5, r1
   143bc:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   143be:	f140 810d 	bpl.w	145dc <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   143c2:	4608      	mov	r0, r1
   143c4:	f7ff ff9c 	bl	14300 <valid_adv_param>
   143c8:	b928      	cbnz	r0, 143d6 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   143ca:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   143ce:	4620      	mov	r0, r4
   143d0:	b00d      	add	sp, #52	; 0x34
   143d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   143d6:	4628      	mov	r0, r5
   143d8:	f014 fc08 	bl	28bec <bt_id_adv_random_addr_check>
   143dc:	4681      	mov	r9, r0
   143de:	2800      	cmp	r0, #0
   143e0:	d0f3      	beq.n	143ca <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   143e2:	f106 0810 	add.w	r8, r6, #16
   143e6:	4640      	mov	r0, r8
   143e8:	f014 fc23 	bl	28c32 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   143ec:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   143f0:	0600      	lsls	r0, r0, #24
   143f2:	f100 80f6 	bmi.w	145e2 <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   143f6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   143fa:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   143fe:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14400:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14402:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14406:	68eb      	ldr	r3, [r5, #12]
   14408:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1440c:	f014 fc02 	bl	28c14 <get_adv_channel_map>
	if (adv->id != param->id) {
   14410:	7832      	ldrb	r2, [r6, #0]
   14412:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14414:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   14418:	429a      	cmp	r2, r3
   1441a:	d004      	beq.n	14426 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1441c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   14420:	4873      	ldr	r0, [pc, #460]	; (145f0 <bt_le_adv_start_legacy+0x258>)
   14422:	f014 fc09 	bl	28c38 <atomic_and>
	adv->id = param->id;
   14426:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14428:	4a72      	ldr	r2, [pc, #456]	; (145f4 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   1442a:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1442c:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   14430:	4630      	mov	r0, r6
   14432:	4622      	mov	r2, r4
   14434:	6869      	ldr	r1, [r5, #4]
   14436:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1443a:	f7ff fe33 	bl	140a4 <bt_id_set_adv_own_addr>
	if (err) {
   1443e:	4604      	mov	r4, r0
   14440:	2800      	cmp	r0, #0
   14442:	d1c4      	bne.n	143ce <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   14444:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   14448:	f1ba 0f00 	cmp.w	sl, #0
   1444c:	d013      	beq.n	14476 <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1444e:	6929      	ldr	r1, [r5, #16]
   14450:	f014 fbfd 	bl	28c4e <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   14454:	4628      	mov	r0, r5
   14456:	f014 fc95 	bl	28d84 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1445a:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   1445c:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1445e:	07d9      	lsls	r1, r3, #31
   14460:	d416      	bmi.n	14490 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   14462:	059b      	lsls	r3, r3, #22
   14464:	d403      	bmi.n	1446e <bt_le_adv_start_legacy+0xd6>
   14466:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14468:	b90b      	cbnz	r3, 1446e <bt_le_adv_start_legacy+0xd6>
   1446a:	2f02      	cmp	r7, #2
   1446c:	d159      	bne.n	14522 <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1446e:	2302      	movs	r3, #2
   14470:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14474:	e019      	b.n	144aa <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   14476:	4960      	ldr	r1, [pc, #384]	; (145f8 <bt_le_adv_start_legacy+0x260>)
   14478:	f014 fbe9 	bl	28c4e <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   1447c:	4628      	mov	r0, r5
   1447e:	f014 fc81 	bl	28d84 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14482:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   14484:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14486:	07da      	lsls	r2, r3, #31
   14488:	d5eb      	bpl.n	14462 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   1448a:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1448e:	e00c      	b.n	144aa <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   14490:	f013 0f10 	tst.w	r3, #16
   14494:	bf0c      	ite	eq
   14496:	2301      	moveq	r3, #1
   14498:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1449a:	6929      	ldr	r1, [r5, #16]
   1449c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   144a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   144a4:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   144a6:	f014 fbd2 	bl	28c4e <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   144aa:	210f      	movs	r1, #15
   144ac:	f242 0006 	movw	r0, #8198	; 0x2006
   144b0:	f7fe fb60 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   144b4:	4604      	mov	r4, r0
   144b6:	2800      	cmp	r0, #0
   144b8:	f000 8096 	beq.w	145e8 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   144bc:	220f      	movs	r2, #15
   144be:	a908      	add	r1, sp, #32
   144c0:	300c      	adds	r0, #12
   144c2:	f016 f884 	bl	2a5ce <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   144c6:	4621      	mov	r1, r4
   144c8:	2200      	movs	r2, #0
   144ca:	f242 0006 	movw	r0, #8198	; 0x2006
   144ce:	f7fe fb9f 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
   144d2:	4604      	mov	r4, r0
   144d4:	2800      	cmp	r0, #0
   144d6:	f47f af7a 	bne.w	143ce <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   144da:	f1ba 0f00 	cmp.w	sl, #0
   144de:	d026      	beq.n	1452e <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   144e0:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   144e2:	07dc      	lsls	r4, r3, #31
   144e4:	d431      	bmi.n	1454a <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   144e6:	4630      	mov	r0, r6
   144e8:	2101      	movs	r1, #1
   144ea:	f014 fc5b 	bl	28da4 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   144ee:	9e07      	ldr	r6, [sp, #28]
	if (err) {
   144f0:	4604      	mov	r4, r0
   144f2:	2800      	cmp	r0, #0
   144f4:	d06a      	beq.n	145cc <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   144f6:	2500      	movs	r5, #0
   144f8:	4b40      	ldr	r3, [pc, #256]	; (145fc <bt_le_adv_start_legacy+0x264>)
   144fa:	2201      	movs	r2, #1
   144fc:	9302      	str	r3, [sp, #8]
   144fe:	4628      	mov	r0, r5
   14500:	462b      	mov	r3, r5
   14502:	e9cd 5500 	strd	r5, r5, [sp]
   14506:	493e      	ldr	r1, [pc, #248]	; (14600 <bt_le_adv_start_legacy+0x268>)
   14508:	f014 fba8 	bl	28c5c <z_log_msg_runtime_create.constprop.0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1450c:	2e00      	cmp	r6, #0
   1450e:	f43f af5e 	beq.w	143ce <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14512:	4630      	mov	r0, r6
   14514:	4629      	mov	r1, r5
   14516:	f000 fe67 	bl	151e8 <bt_conn_set_state>
			bt_conn_unref(conn);
   1451a:	4630      	mov	r0, r6
   1451c:	f000 fe2c 	bl	15178 <bt_conn_unref>
   14520:	e755      	b.n	143ce <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14522:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   14524:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14528:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1452c:	e7bd      	b.n	144aa <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1452e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14530:	4659      	mov	r1, fp
   14532:	9300      	str	r3, [sp, #0]
   14534:	4630      	mov	r0, r6
   14536:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1453a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1453c:	9a05      	ldr	r2, [sp, #20]
   1453e:	f014 fbaf 	bl	28ca0 <le_adv_update.constprop.0>
		if (err) {
   14542:	4604      	mov	r4, r0
   14544:	2800      	cmp	r0, #0
   14546:	d0cb      	beq.n	144e0 <bt_le_adv_start_legacy+0x148>
   14548:	e741      	b.n	143ce <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1454a:	4630      	mov	r0, r6
   1454c:	a907      	add	r1, sp, #28
   1454e:	f7ff fea1 	bl	14294 <le_adv_start_add_conn>
		if (err) {
   14552:	4604      	mov	r4, r0
   14554:	2800      	cmp	r0, #0
   14556:	d0c6      	beq.n	144e6 <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   14558:	f110 0f0c 	cmn.w	r0, #12
   1455c:	f47f af37 	bne.w	143ce <bt_le_adv_start_legacy+0x36>
   14560:	f1ba 0f00 	cmp.w	sl, #0
   14564:	f47f af33 	bne.w	143ce <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   14568:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   1456a:	0798      	lsls	r0, r3, #30
   1456c:	f53f af2f 	bmi.w	143ce <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14570:	686c      	ldr	r4, [r5, #4]
   14572:	f084 0402 	eor.w	r4, r4, #2
   14576:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1457a:	f004 0201 	and.w	r2, r4, #1
   1457e:	210e      	movs	r1, #14
   14580:	4640      	mov	r0, r8
   14582:	f014 fb7a 	bl	28c7a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   14586:	1e7b      	subs	r3, r7, #1
   14588:	425a      	negs	r2, r3
   1458a:	415a      	adcs	r2, r3
   1458c:	2108      	movs	r1, #8
   1458e:	4640      	mov	r0, r8
   14590:	f014 fb73 	bl	28c7a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   14594:	1eb9      	subs	r1, r7, #2
   14596:	424a      	negs	r2, r1
   14598:	414a      	adcs	r2, r1
   1459a:	4640      	mov	r0, r8
   1459c:	2109      	movs	r1, #9
   1459e:	f014 fb6c 	bl	28c7a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   145a2:	686a      	ldr	r2, [r5, #4]
   145a4:	210a      	movs	r1, #10
   145a6:	4640      	mov	r0, r8
   145a8:	f002 0201 	and.w	r2, r2, #1
   145ac:	f014 fb65 	bl	28c7a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   145b0:	464a      	mov	r2, r9
   145b2:	210b      	movs	r1, #11
   145b4:	4640      	mov	r0, r8
   145b6:	f014 fb60 	bl	28c7a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   145ba:	686a      	ldr	r2, [r5, #4]
   145bc:	210d      	movs	r1, #13
   145be:	4640      	mov	r0, r8
   145c0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   145c4:	f014 fb59 	bl	28c7a <atomic_set_bit_to>
	return 0;
   145c8:	2400      	movs	r4, #0
   145ca:	e700      	b.n	143ce <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   145cc:	b116      	cbz	r6, 145d4 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   145ce:	4630      	mov	r0, r6
   145d0:	f000 fdd2 	bl	15178 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   145d4:	f1ba 0f00 	cmp.w	sl, #0
   145d8:	d1cf      	bne.n	1457a <bt_le_adv_start_legacy+0x1e2>
   145da:	e7c9      	b.n	14570 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   145dc:	f06f 040a 	mvn.w	r4, #10
   145e0:	e6f5      	b.n	143ce <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   145e2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   145e6:	e6f2      	b.n	143ce <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   145e8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   145ec:	e6ef      	b.n	143ce <bt_le_adv_start_legacy+0x36>
   145ee:	bf00      	nop
   145f0:	200080cc 	.word	0x200080cc
   145f4:	20008000 	.word	0x20008000
   145f8:	000306da 	.word	0x000306da
   145fc:	0003110b 	.word	0x0003110b
   14600:	0002d614 	.word	0x0002d614

00014604 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   14604:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14606:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   14608:	9a06      	ldr	r2, [sp, #24]
{
   1460a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1460c:	e9cd 3200 	strd	r3, r2, [sp]
   14610:	462b      	mov	r3, r5
   14612:	460a      	mov	r2, r1
   14614:	4601      	mov	r1, r0
   14616:	4811      	ldr	r0, [pc, #68]	; (1465c <bt_le_adv_start+0x58>)
   14618:	f7ff febe 	bl	14398 <bt_le_adv_start_legacy>
   1461c:	4621      	mov	r1, r4
   1461e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   14620:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   14622:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   14626:	429d      	cmp	r5, r3
   14628:	d102      	bne.n	14630 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1462a:	4630      	mov	r0, r6
   1462c:	b002      	add	sp, #8
   1462e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   14630:	880a      	ldrh	r2, [r1, #0]
   14632:	4282      	cmp	r2, r0
   14634:	d104      	bne.n	14640 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   14636:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   14638:	b112      	cbz	r2, 14640 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1463a:	7812      	ldrb	r2, [r2, #0]
   1463c:	07d2      	lsls	r2, r2, #31
   1463e:	d402      	bmi.n	14646 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   14640:	3301      	adds	r3, #1
   14642:	3108      	adds	r1, #8
   14644:	e7ef      	b.n	14626 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   14646:	4906      	ldr	r1, [pc, #24]	; (14660 <bt_le_adv_start+0x5c>)
   14648:	4806      	ldr	r0, [pc, #24]	; (14664 <bt_le_adv_start+0x60>)
   1464a:	f00d f891 	bl	21770 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1464e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   14652:	2300      	movs	r3, #0
   14654:	4803      	ldr	r0, [pc, #12]	; (14664 <bt_le_adv_start+0x60>)
   14656:	f00d f9a7 	bl	219a8 <k_work_reschedule>
   1465a:	e7e6      	b.n	1462a <bt_le_adv_start+0x26>
   1465c:	20008018 	.word	0x20008018
   14660:	000146ed 	.word	0x000146ed
   14664:	20008030 	.word	0x20008030

00014668 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   14668:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1466a:	481a      	ldr	r0, [pc, #104]	; (146d4 <bt_le_adv_stop+0x6c>)
   1466c:	f014 fbc1 	bl	28df2 <bt_le_lim_adv_cancel_timeout>
   14670:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   14674:	4818      	ldr	r0, [pc, #96]	; (146d8 <bt_le_adv_stop+0x70>)
   14676:	f014 fadf 	bl	28c38 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1467a:	4817      	ldr	r0, [pc, #92]	; (146d8 <bt_le_adv_stop+0x70>)
   1467c:	f014 fad9 	bl	28c32 <atomic_get>
   14680:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14682:	061a      	lsls	r2, r3, #24
   14684:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   14688:	d523      	bpl.n	146d2 <bt_le_adv_stop+0x6a>
   1468a:	4813      	ldr	r0, [pc, #76]	; (146d8 <bt_le_adv_stop+0x70>)
   1468c:	f014 fad1 	bl	28c32 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14690:	0543      	lsls	r3, r0, #21
   14692:	d514      	bpl.n	146be <bt_le_adv_stop+0x56>
   14694:	2207      	movs	r2, #7
   14696:	4911      	ldr	r1, [pc, #68]	; (146dc <bt_le_adv_stop+0x74>)
   14698:	4811      	ldr	r0, [pc, #68]	; (146e0 <bt_le_adv_stop+0x78>)
   1469a:	f017 fd07 	bl	2c0ac <memcmp>
   1469e:	4b11      	ldr	r3, [pc, #68]	; (146e4 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   146a0:	b998      	cbnz	r0, 146ca <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   146a2:	2204      	movs	r2, #4
   146a4:	4910      	ldr	r1, [pc, #64]	; (146e8 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   146a6:	7e18      	ldrb	r0, [r3, #24]
   146a8:	f001 f872 	bl	15790 <bt_conn_lookup_state_le>
   146ac:	4604      	mov	r4, r0
	if (conn) {
   146ae:	b130      	cbz	r0, 146be <bt_le_adv_stop+0x56>
		conn->err = status;
   146b0:	2100      	movs	r1, #0
   146b2:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   146b4:	f000 fd98 	bl	151e8 <bt_conn_set_state>
		bt_conn_unref(conn);
   146b8:	4620      	mov	r0, r4
   146ba:	f000 fd5d 	bl	15178 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   146be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   146c2:	2100      	movs	r1, #0
   146c4:	4803      	ldr	r0, [pc, #12]	; (146d4 <bt_le_adv_stop+0x6c>)
   146c6:	f014 bb6d 	b.w	28da4 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   146ca:	2205      	movs	r2, #5
   146cc:	f103 0121 	add.w	r1, r3, #33	; 0x21
   146d0:	e7e9      	b.n	146a6 <bt_le_adv_stop+0x3e>
}
   146d2:	bd10      	pop	{r4, pc}
   146d4:	20008018 	.word	0x20008018
   146d8:	20008028 	.word	0x20008028
   146dc:	000306da 	.word	0x000306da
   146e0:	20008021 	.word	0x20008021
   146e4:	20008000 	.word	0x20008000
   146e8:	000306d3 	.word	0x000306d3

000146ec <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   146ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   146ee:	f7ff ffbb 	bl	14668 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   146f2:	4b07      	ldr	r3, [pc, #28]	; (14710 <adv_timeout+0x24>)
   146f4:	9003      	str	r0, [sp, #12]
   146f6:	9302      	str	r3, [sp, #8]
   146f8:	2300      	movs	r3, #0
   146fa:	2202      	movs	r2, #2
   146fc:	4618      	mov	r0, r3
   146fe:	e9cd 3300 	strd	r3, r3, [sp]
   14702:	4904      	ldr	r1, [pc, #16]	; (14714 <adv_timeout+0x28>)
   14704:	f014 faaa 	bl	28c5c <z_log_msg_runtime_create.constprop.0>
}
   14708:	b005      	add	sp, #20
   1470a:	f85d fb04 	ldr.w	pc, [sp], #4
   1470e:	bf00      	nop
   14710:	00031126 	.word	0x00031126
   14714:	0002d614 	.word	0x0002d614

00014718 <bt_le_adv_resume>:
{
   14718:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1471a:	4c1e      	ldr	r4, [pc, #120]	; (14794 <bt_le_adv_resume+0x7c>)
   1471c:	4620      	mov	r0, r4
   1471e:	f014 fa88 	bl	28c32 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   14722:	0440      	lsls	r0, r0, #17
   14724:	d534      	bpl.n	14790 <bt_le_adv_resume+0x78>
   14726:	4620      	mov	r0, r4
   14728:	f014 fa83 	bl	28c32 <atomic_get>
   1472c:	0601      	lsls	r1, r0, #24
   1472e:	d42f      	bmi.n	14790 <bt_le_adv_resume+0x78>
   14730:	4620      	mov	r0, r4
   14732:	f014 fa7e 	bl	28c32 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   14736:	0542      	lsls	r2, r0, #21
   14738:	d52a      	bpl.n	14790 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   1473a:	a901      	add	r1, sp, #4
   1473c:	f1a4 0010 	sub.w	r0, r4, #16
   14740:	f7ff fda8 	bl	14294 <le_adv_start_add_conn>
	if (err) {
   14744:	4605      	mov	r5, r0
   14746:	bb18      	cbnz	r0, 14790 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14748:	2101      	movs	r1, #1
   1474a:	f1a4 0010 	sub.w	r0, r4, #16
   1474e:	f014 fb29 	bl	28da4 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   14752:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   14754:	b928      	cbnz	r0, 14762 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   14756:	4630      	mov	r0, r6
}
   14758:	b002      	add	sp, #8
   1475a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1475e:	f000 bd0b 	b.w	15178 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14762:	4629      	mov	r1, r5
   14764:	4630      	mov	r0, r6
   14766:	f000 fd3f 	bl	151e8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1476a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1476e:	4620      	mov	r0, r4
   14770:	f014 fa62 	bl	28c38 <atomic_and>
   14774:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   14776:	4630      	mov	r0, r6
   14778:	f000 fcfe 	bl	15178 <bt_conn_unref>
	if (persist_paused) {
   1477c:	046b      	lsls	r3, r5, #17
   1477e:	d507      	bpl.n	14790 <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14780:	e8d4 3fef 	ldaex	r3, [r4]
   14784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   14788:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1478c:	2a00      	cmp	r2, #0
   1478e:	d1f7      	bne.n	14780 <bt_le_adv_resume+0x68>
}
   14790:	b002      	add	sp, #8
   14792:	bd70      	pop	{r4, r5, r6, pc}
   14794:	20008028 	.word	0x20008028

00014798 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   14798:	b530      	push	{r4, r5, lr}
   1479a:	b08f      	sub	sp, #60	; 0x3c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1479c:	2120      	movs	r1, #32
   1479e:	a806      	add	r0, sp, #24
   147a0:	f7fe fad4 	bl	12d4c <bt_hci_le_rand>
	if (ret) {
   147a4:	4604      	mov	r4, r0
   147a6:	bb08      	cbnz	r0, 147ec <prng_reseed.constprop.0+0x54>
	return z_impl_k_uptime_ticks();
   147a8:	f017 fb7e 	bl	2bea8 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   147ac:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   147b0:	fba0 2305 	umull	r2, r3, r0, r5
   147b4:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   147b8:	2308      	movs	r3, #8
   147ba:	0bd2      	lsrs	r2, r2, #15
   147bc:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   147c0:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   147c2:	e9cd 2104 	strd	r2, r1, [sp, #16]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   147c6:	9300      	str	r3, [sp, #0]
   147c8:	2220      	movs	r2, #32
   147ca:	480a      	ldr	r0, [pc, #40]	; (147f4 <prng_reseed.constprop.0+0x5c>)
   147cc:	ab04      	add	r3, sp, #16
   147ce:	a906      	add	r1, sp, #24
   147d0:	f013 fedd 	bl	2858e <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   147d4:	b950      	cbnz	r0, 147ec <prng_reseed.constprop.0+0x54>
		LOG_ERR("Failed to re-seed PRNG");
   147d6:	4b08      	ldr	r3, [pc, #32]	; (147f8 <prng_reseed.constprop.0+0x60>)
   147d8:	9400      	str	r4, [sp, #0]
   147da:	e9cd 4301 	strd	r4, r3, [sp, #4]
   147de:	2201      	movs	r2, #1
   147e0:	4623      	mov	r3, r4
   147e2:	4906      	ldr	r1, [pc, #24]	; (147fc <prng_reseed.constprop.0+0x64>)
   147e4:	f014 fb08 	bl	28df8 <z_log_msg_runtime_create.constprop.0>
   147e8:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
   147ec:	4620      	mov	r0, r4
   147ee:	b00f      	add	sp, #60	; 0x3c
   147f0:	bd30      	pop	{r4, r5, pc}
   147f2:	bf00      	nop
   147f4:	200097f0 	.word	0x200097f0
   147f8:	0003114c 	.word	0x0003114c
   147fc:	0002d654 	.word	0x0002d654

00014800 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14800:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   14802:	b508      	push	{r3, lr}
   14804:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14808:	d910      	bls.n	1482c <sys_memcpy_swap.constprop.0+0x2c>
   1480a:	4298      	cmp	r0, r3
   1480c:	d213      	bcs.n	14836 <sys_memcpy_swap.constprop.0+0x36>
   1480e:	490e      	ldr	r1, [pc, #56]	; (14848 <sys_memcpy_swap.constprop.0+0x48>)
   14810:	f240 2315 	movw	r3, #533	; 0x215
   14814:	4a0d      	ldr	r2, [pc, #52]	; (1484c <sys_memcpy_swap.constprop.0+0x4c>)
   14816:	480e      	ldr	r0, [pc, #56]	; (14850 <sys_memcpy_swap.constprop.0+0x50>)
   14818:	f012 feeb 	bl	275f2 <assert_print>
   1481c:	480d      	ldr	r0, [pc, #52]	; (14854 <sys_memcpy_swap.constprop.0+0x54>)
   1481e:	f012 fee8 	bl	275f2 <assert_print>
   14822:	f240 2115 	movw	r1, #533	; 0x215
   14826:	4809      	ldr	r0, [pc, #36]	; (1484c <sys_memcpy_swap.constprop.0+0x4c>)
   14828:	f012 fedc 	bl	275e4 <assert_post_action>
   1482c:	d0ef      	beq.n	1480e <sys_memcpy_swap.constprop.0+0xe>
   1482e:	f100 0210 	add.w	r2, r0, #16
   14832:	4291      	cmp	r1, r2
   14834:	e7ea      	b.n	1480c <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   14836:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   14838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   1483c:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   1483e:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   14842:	d1f9      	bne.n	14838 <sys_memcpy_swap.constprop.0+0x38>
	}
}
   14844:	bd08      	pop	{r3, pc}
   14846:	bf00      	nop
   14848:	00031195 	.word	0x00031195
   1484c:	00031163 	.word	0x00031163
   14850:	0002e715 	.word	0x0002e715
   14854:	000311ec 	.word	0x000311ec

00014858 <prng_init>:

int prng_init(void)
{
   14858:	b510      	push	{r4, lr}
   1485a:	b086      	sub	sp, #24
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   1485c:	2108      	movs	r1, #8
   1485e:	a804      	add	r0, sp, #16
   14860:	f7fe fa74 	bl	12d4c <bt_hci_le_rand>
	if (ret) {
   14864:	4604      	mov	r4, r0
   14866:	b980      	cbnz	r0, 1488a <prng_init+0x32>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   14868:	2208      	movs	r2, #8
   1486a:	480b      	ldr	r0, [pc, #44]	; (14898 <prng_init+0x40>)
   1486c:	a904      	add	r1, sp, #16
   1486e:	f013 fe6e 	bl	2854e <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   14872:	b968      	cbnz	r0, 14890 <prng_init+0x38>
		LOG_ERR("Failed to initialize PRNG");
   14874:	4b09      	ldr	r3, [pc, #36]	; (1489c <prng_init+0x44>)
   14876:	9400      	str	r4, [sp, #0]
   14878:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1487c:	2201      	movs	r2, #1
   1487e:	4623      	mov	r3, r4
   14880:	4907      	ldr	r1, [pc, #28]	; (148a0 <prng_init+0x48>)
   14882:	f014 fab9 	bl	28df8 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   14886:	f06f 0404 	mvn.w	r4, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1488a:	4620      	mov	r0, r4
   1488c:	b006      	add	sp, #24
   1488e:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   14890:	f7ff ff82 	bl	14798 <prng_reseed.constprop.0>
   14894:	4604      	mov	r4, r0
   14896:	e7f8      	b.n	1488a <prng_init+0x32>
   14898:	200097f0 	.word	0x200097f0
   1489c:	0003121e 	.word	0x0003121e
   148a0:	0002d654 	.word	0x0002d654

000148a4 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   148a4:	b538      	push	{r3, r4, r5, lr}
   148a6:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   148a8:	4604      	mov	r4, r0
   148aa:	b198      	cbz	r0, 148d4 <bt_rand+0x30>
   148ac:	b191      	cbz	r1, 148d4 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   148ae:	4a0b      	ldr	r2, [pc, #44]	; (148dc <bt_rand+0x38>)
   148b0:	f013 fe86 	bl	285c0 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   148b4:	1c43      	adds	r3, r0, #1
   148b6:	d107      	bne.n	148c8 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   148b8:	f7ff ff6e 	bl	14798 <prng_reseed.constprop.0>
		if (ret) {
   148bc:	b948      	cbnz	r0, 148d2 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   148be:	4629      	mov	r1, r5
   148c0:	4620      	mov	r0, r4
   148c2:	4a06      	ldr	r2, [pc, #24]	; (148dc <bt_rand+0x38>)
   148c4:	f013 fe7c 	bl	285c0 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   148c8:	2801      	cmp	r0, #1
   148ca:	bf0c      	ite	eq
   148cc:	2000      	moveq	r0, #0
   148ce:	f06f 0004 	mvnne.w	r0, #4
}
   148d2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   148d4:	f06f 0015 	mvn.w	r0, #21
   148d8:	e7fb      	b.n	148d2 <bt_rand+0x2e>
   148da:	bf00      	nop
   148dc:	200097f0 	.word	0x200097f0

000148e0 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   148e0:	2240      	movs	r2, #64	; 0x40
{
   148e2:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   148e4:	4903      	ldr	r1, [pc, #12]	; (148f4 <bt_pub_key_is_debug+0x14>)
   148e6:	f017 fbe1 	bl	2c0ac <memcmp>
}
   148ea:	fab0 f080 	clz	r0, r0
   148ee:	0940      	lsrs	r0, r0, #5
   148f0:	bd08      	pop	{r3, pc}
   148f2:	bf00      	nop
   148f4:	000312ce 	.word	0x000312ce

000148f8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   148f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   148fa:	4b3c      	ldr	r3, [pc, #240]	; (149ec <bt_pub_key_gen+0xf4>)
{
   148fc:	b085      	sub	sp, #20
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   148fe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   14902:	f003 0306 	and.w	r3, r3, #6
   14906:	2b06      	cmp	r3, #6
   14908:	d00e      	beq.n	14928 <bt_pub_key_gen+0x30>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   1490a:	4b39      	ldr	r3, [pc, #228]	; (149f0 <bt_pub_key_gen+0xf8>)
   1490c:	2202      	movs	r2, #2
   1490e:	9302      	str	r3, [sp, #8]
   14910:	2300      	movs	r3, #0
   14912:	4938      	ldr	r1, [pc, #224]	; (149f4 <bt_pub_key_gen+0xfc>)
   14914:	4618      	mov	r0, r3
   14916:	e9cd 3300 	strd	r3, r3, [sp]
   1491a:	f014 faa9 	bl	28e70 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1491e:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   14922:	4628      	mov	r0, r5
   14924:	b005      	add	sp, #20
   14926:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   14928:	2800      	cmp	r0, #0
   1492a:	d05b      	beq.n	149e4 <bt_pub_key_gen+0xec>
	return list->head;
   1492c:	4e32      	ldr	r6, [pc, #200]	; (149f8 <bt_pub_key_gen+0x100>)
   1492e:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14930:	b19a      	cbz	r2, 1495a <bt_pub_key_gen+0x62>
   14932:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   14934:	4283      	cmp	r3, r0
   14936:	d10c      	bne.n	14952 <bt_pub_key_gen+0x5a>
			LOG_WRN("Callback already registered");
   14938:	4b30      	ldr	r3, [pc, #192]	; (149fc <bt_pub_key_gen+0x104>)
   1493a:	2202      	movs	r2, #2
   1493c:	9302      	str	r3, [sp, #8]
   1493e:	2300      	movs	r3, #0
   14940:	492c      	ldr	r1, [pc, #176]	; (149f4 <bt_pub_key_gen+0xfc>)
   14942:	4618      	mov	r0, r3
   14944:	e9cd 3300 	strd	r3, r3, [sp]
   14948:	f014 fa92 	bl	28e70 <z_log_msg_runtime_create.constprop.0>
			return -EALREADY;
   1494c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   14950:	e7e7      	b.n	14922 <bt_pub_key_gen+0x2a>
	return node->next;
   14952:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14954:	b10b      	cbz	r3, 1495a <bt_pub_key_gen+0x62>
   14956:	3b04      	subs	r3, #4
   14958:	e7ec      	b.n	14934 <bt_pub_key_gen+0x3c>
	parent->next = child;
   1495a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   1495c:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1495e:	1d03      	adds	r3, r0, #4
	list->head = node;
   14960:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   14962:	b902      	cbnz	r2, 14966 <bt_pub_key_gen+0x6e>
	list->tail = node;
   14964:	6073      	str	r3, [r6, #4]
   14966:	4f26      	ldr	r7, [pc, #152]	; (14a00 <bt_pub_key_gen+0x108>)
   14968:	e8d7 4fef 	ldaex	r4, [r7]
   1496c:	f044 0320 	orr.w	r3, r4, #32
   14970:	e8c7 3fe2 	stlex	r2, r3, [r7]
   14974:	2a00      	cmp	r2, #0
   14976:	d1f7      	bne.n	14968 <bt_pub_key_gen+0x70>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   14978:	f014 0420 	ands.w	r4, r4, #32
   1497c:	d001      	beq.n	14982 <bt_pub_key_gen+0x8a>
	return 0;
   1497e:	2500      	movs	r5, #0
   14980:	e7cf      	b.n	14922 <bt_pub_key_gen+0x2a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14982:	e8d7 3fef 	ldaex	r3, [r7]
   14986:	f023 0310 	bic.w	r3, r3, #16
   1498a:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1498e:	2a00      	cmp	r2, #0
   14990:	d1f7      	bne.n	14982 <bt_pub_key_gen+0x8a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   14992:	4622      	mov	r2, r4
   14994:	4621      	mov	r1, r4
   14996:	f242 0025 	movw	r0, #8229	; 0x2025
   1499a:	f7fe f939 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
   1499e:	4605      	mov	r5, r0
   149a0:	2800      	cmp	r0, #0
   149a2:	d0ec      	beq.n	1497e <bt_pub_key_gen+0x86>
		LOG_ERR("Sending LE P256 Public Key command failed");
   149a4:	4b17      	ldr	r3, [pc, #92]	; (14a04 <bt_pub_key_gen+0x10c>)
   149a6:	2201      	movs	r2, #1
   149a8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   149ac:	4620      	mov	r0, r4
   149ae:	4623      	mov	r3, r4
   149b0:	4910      	ldr	r1, [pc, #64]	; (149f4 <bt_pub_key_gen+0xfc>)
   149b2:	9400      	str	r4, [sp, #0]
   149b4:	f014 fa5c 	bl	28e70 <z_log_msg_runtime_create.constprop.0>
   149b8:	e8d7 3fef 	ldaex	r3, [r7]
   149bc:	f023 0320 	bic.w	r3, r3, #32
   149c0:	e8c7 3fe2 	stlex	r2, r3, [r7]
   149c4:	2a00      	cmp	r2, #0
   149c6:	d1f7      	bne.n	149b8 <bt_pub_key_gen+0xc0>
	return list->head;
   149c8:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   149ca:	b13c      	cbz	r4, 149dc <bt_pub_key_gen+0xe4>
			if (cb->func) {
   149cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   149d0:	3c04      	subs	r4, #4
			if (cb->func) {
   149d2:	b10b      	cbz	r3, 149d8 <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   149d4:	2000      	movs	r0, #0
   149d6:	4798      	blx	r3
	return node->next;
   149d8:	6864      	ldr	r4, [r4, #4]
   149da:	e7f6      	b.n	149ca <bt_pub_key_gen+0xd2>
	list->head = NULL;
   149dc:	2300      	movs	r3, #0
	list->tail = NULL;
   149de:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   149e2:	e79e      	b.n	14922 <bt_pub_key_gen+0x2a>
		return -EINVAL;
   149e4:	f06f 0515 	mvn.w	r5, #21
   149e8:	e79b      	b.n	14922 <bt_pub_key_gen+0x2a>
   149ea:	bf00      	nop
   149ec:	20008000 	.word	0x20008000
   149f0:	00031247 	.word	0x00031247
   149f4:	0002d634 	.word	0x0002d634
   149f8:	2002f274 	.word	0x2002f274
   149fc:	00031266 	.word	0x00031266
   14a00:	200080cc 	.word	0x200080cc
   14a04:	00031282 	.word	0x00031282

00014a08 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a08:	4b04      	ldr	r3, [pc, #16]	; (14a1c <bt_pub_key_get+0x14>)
   14a0a:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   14a0e:	f013 0f10 	tst.w	r3, #16
}
   14a12:	4803      	ldr	r0, [pc, #12]	; (14a20 <bt_pub_key_get+0x18>)
   14a14:	bf08      	it	eq
   14a16:	2000      	moveq	r0, #0
   14a18:	4770      	bx	lr
   14a1a:	bf00      	nop
   14a1c:	200080cc 	.word	0x200080cc
   14a20:	2003022e 	.word	0x2003022e

00014a24 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   14a24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   14a26:	4e24      	ldr	r6, [pc, #144]	; (14ab8 <bt_dh_key_gen+0x94>)
{
   14a28:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   14a2a:	6833      	ldr	r3, [r6, #0]
   14a2c:	428b      	cmp	r3, r1
   14a2e:	d03c      	beq.n	14aaa <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   14a30:	b123      	cbz	r3, 14a3c <bt_dh_key_gen+0x18>
		return -EBUSY;
   14a32:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   14a36:	4620      	mov	r0, r4
   14a38:	b004      	add	sp, #16
   14a3a:	bd70      	pop	{r4, r5, r6, pc}
   14a3c:	4b1f      	ldr	r3, [pc, #124]	; (14abc <bt_dh_key_gen+0x98>)
   14a3e:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   14a42:	0692      	lsls	r2, r2, #26
   14a44:	d4f5      	bmi.n	14a32 <bt_dh_key_gen+0xe>
   14a46:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   14a4a:	06db      	lsls	r3, r3, #27
   14a4c:	d530      	bpl.n	14ab0 <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   14a4e:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   14a50:	f242 0026 	movw	r0, #8230	; 0x2026
   14a54:	2140      	movs	r1, #64	; 0x40
   14a56:	f7fe f88d 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   14a5a:	4605      	mov	r5, r0
   14a5c:	b310      	cbz	r0, 14aa4 <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   14a5e:	2140      	movs	r1, #64	; 0x40
   14a60:	300c      	adds	r0, #12
   14a62:	f005 fdc5 	bl	1a5f0 <net_buf_simple_add>
   14a66:	4623      	mov	r3, r4
   14a68:	f104 0240 	add.w	r2, r4, #64	; 0x40
   14a6c:	f853 1b04 	ldr.w	r1, [r3], #4
   14a70:	4293      	cmp	r3, r2
   14a72:	f840 1b04 	str.w	r1, [r0], #4
   14a76:	d1f9      	bne.n	14a6c <bt_dh_key_gen+0x48>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   14a78:	2200      	movs	r2, #0
   14a7a:	4629      	mov	r1, r5
   14a7c:	f242 0026 	movw	r0, #8230	; 0x2026
   14a80:	f7fe f8c6 	bl	12c10 <bt_hci_cmd_send_sync>
	if (err) {
   14a84:	4604      	mov	r4, r0
   14a86:	2800      	cmp	r0, #0
   14a88:	d0d5      	beq.n	14a36 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   14a8a:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   14a8c:	4a0c      	ldr	r2, [pc, #48]	; (14ac0 <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   14a8e:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   14a90:	4618      	mov	r0, r3
   14a92:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14a96:	490b      	ldr	r1, [pc, #44]	; (14ac4 <bt_dh_key_gen+0xa0>)
   14a98:	2202      	movs	r2, #2
   14a9a:	9403      	str	r4, [sp, #12]
   14a9c:	9300      	str	r3, [sp, #0]
   14a9e:	f014 f9e7 	bl	28e70 <z_log_msg_runtime_create.constprop.0>
		return err;
   14aa2:	e7c8      	b.n	14a36 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   14aa4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14aa8:	e7ef      	b.n	14a8a <bt_dh_key_gen+0x66>
		return -EALREADY;
   14aaa:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14aae:	e7c2      	b.n	14a36 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   14ab0:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   14ab4:	e7bf      	b.n	14a36 <bt_dh_key_gen+0x12>
   14ab6:	bf00      	nop
   14ab8:	2002f270 	.word	0x2002f270
   14abc:	200080cc 	.word	0x200080cc
   14ac0:	000312ac 	.word	0x000312ac
   14ac4:	0002d634 	.word	0x0002d634

00014ac8 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   14ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14aca:	4b19      	ldr	r3, [pc, #100]	; (14b30 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   14acc:	68c5      	ldr	r5, [r0, #12]
   14ace:	e8d3 2fef 	ldaex	r2, [r3]
   14ad2:	f022 0220 	bic.w	r2, r2, #32
   14ad6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14ada:	2900      	cmp	r1, #0
   14adc:	d1f7      	bne.n	14ace <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   14ade:	782a      	ldrb	r2, [r5, #0]
   14ae0:	b98a      	cbnz	r2, 14b06 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   14ae2:	4914      	ldr	r1, [pc, #80]	; (14b34 <bt_hci_evt_le_pkey_complete+0x6c>)
   14ae4:	1c6a      	adds	r2, r5, #1
   14ae6:	f105 0041 	add.w	r0, r5, #65	; 0x41
   14aea:	f852 4b04 	ldr.w	r4, [r2], #4
   14aee:	4282      	cmp	r2, r0
   14af0:	f841 4b04 	str.w	r4, [r1], #4
   14af4:	d1f9      	bne.n	14aea <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14af6:	e8d3 1fef 	ldaex	r1, [r3]
   14afa:	f041 0110 	orr.w	r1, r1, #16
   14afe:	e8c3 1fe2 	stlex	r2, r1, [r3]
   14b02:	2a00      	cmp	r2, #0
   14b04:	d1f7      	bne.n	14af6 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   14b06:	4e0c      	ldr	r6, [pc, #48]	; (14b38 <bt_hci_evt_le_pkey_complete+0x70>)
   14b08:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14b0a:	b16c      	cbz	r4, 14b28 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   14b0c:	4f09      	ldr	r7, [pc, #36]	; (14b34 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14b0e:	3c04      	subs	r4, #4
		if (cb->func) {
   14b10:	6823      	ldr	r3, [r4, #0]
   14b12:	b12b      	cbz	r3, 14b20 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   14b14:	782a      	ldrb	r2, [r5, #0]
   14b16:	2a00      	cmp	r2, #0
   14b18:	bf0c      	ite	eq
   14b1a:	4638      	moveq	r0, r7
   14b1c:	2000      	movne	r0, #0
   14b1e:	4798      	blx	r3
	return node->next;
   14b20:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14b22:	b10c      	cbz	r4, 14b28 <bt_hci_evt_le_pkey_complete+0x60>
   14b24:	3c04      	subs	r4, #4
   14b26:	e7f3      	b.n	14b10 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   14b28:	2300      	movs	r3, #0
	list->tail = NULL;
   14b2a:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   14b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14b30:	200080cc 	.word	0x200080cc
   14b34:	2003022e 	.word	0x2003022e
   14b38:	2002f274 	.word	0x2002f274

00014b3c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   14b3c:	4905      	ldr	r1, [pc, #20]	; (14b54 <bt_hci_evt_le_dhkey_complete+0x18>)
   14b3e:	680b      	ldr	r3, [r1, #0]
   14b40:	b133      	cbz	r3, 14b50 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   14b42:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   14b44:	2000      	movs	r0, #0
   14b46:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   14b48:	7811      	ldrb	r1, [r2, #0]
   14b4a:	b901      	cbnz	r1, 14b4e <bt_hci_evt_le_dhkey_complete+0x12>
   14b4c:	1c50      	adds	r0, r2, #1
   14b4e:	4718      	bx	r3
	}
}
   14b50:	4770      	bx	lr
   14b52:	bf00      	nop
   14b54:	2002f270 	.word	0x2002f270

00014b58 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   14b58:	b570      	push	{r4, r5, r6, lr}
   14b5a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   14b5c:	4b12      	ldr	r3, [pc, #72]	; (14ba8 <notify_connected+0x50>)
   14b5e:	681d      	ldr	r5, [r3, #0]
   14b60:	b995      	cbnz	r5, 14b88 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14b62:	4d12      	ldr	r5, [pc, #72]	; (14bac <notify_connected+0x54>)
   14b64:	4e12      	ldr	r6, [pc, #72]	; (14bb0 <notify_connected+0x58>)
   14b66:	42b5      	cmp	r5, r6
   14b68:	d91c      	bls.n	14ba4 <notify_connected+0x4c>
   14b6a:	4912      	ldr	r1, [pc, #72]	; (14bb4 <notify_connected+0x5c>)
   14b6c:	f240 535b 	movw	r3, #1371	; 0x55b
   14b70:	4a11      	ldr	r2, [pc, #68]	; (14bb8 <notify_connected+0x60>)
   14b72:	4812      	ldr	r0, [pc, #72]	; (14bbc <notify_connected+0x64>)
   14b74:	f012 fd3d 	bl	275f2 <assert_print>
   14b78:	4811      	ldr	r0, [pc, #68]	; (14bc0 <notify_connected+0x68>)
   14b7a:	f012 fd3a 	bl	275f2 <assert_print>
   14b7e:	f240 515b 	movw	r1, #1371	; 0x55b
   14b82:	480d      	ldr	r0, [pc, #52]	; (14bb8 <notify_connected+0x60>)
   14b84:	f012 fd2e 	bl	275e4 <assert_post_action>
		if (cb->connected) {
   14b88:	682b      	ldr	r3, [r5, #0]
   14b8a:	b113      	cbz	r3, 14b92 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   14b8c:	4620      	mov	r0, r4
   14b8e:	7b21      	ldrb	r1, [r4, #12]
   14b90:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14b92:	69ad      	ldr	r5, [r5, #24]
   14b94:	e7e4      	b.n	14b60 <notify_connected+0x8>
		if (cb->connected) {
   14b96:	682b      	ldr	r3, [r5, #0]
   14b98:	b113      	cbz	r3, 14ba0 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   14b9a:	4620      	mov	r0, r4
   14b9c:	7b21      	ldrb	r1, [r4, #12]
   14b9e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14ba0:	351c      	adds	r5, #28
   14ba2:	e7e0      	b.n	14b66 <notify_connected+0xe>
   14ba4:	d3f7      	bcc.n	14b96 <notify_connected+0x3e>
		}
	}
}
   14ba6:	bd70      	pop	{r4, r5, r6, pc}
   14ba8:	2002f29c 	.word	0x2002f29c
   14bac:	0002d5b0 	.word	0x0002d5b0
   14bb0:	0002d5cc 	.word	0x0002d5cc
   14bb4:	00031345 	.word	0x00031345
   14bb8:	00031315 	.word	0x00031315
   14bbc:	0002e715 	.word	0x0002e715
   14bc0:	0002f82e 	.word	0x0002f82e

00014bc4 <tx_notify>:
{
   14bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bc8:	4604      	mov	r4, r0
	tx->cb = NULL;
   14bca:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   14bce:	4f14      	ldr	r7, [pc, #80]	; (14c20 <tx_notify+0x5c>)
	__asm__ volatile(
   14bd0:	f04f 0220 	mov.w	r2, #32
   14bd4:	f3ef 8311 	mrs	r3, BASEPRI
   14bd8:	f382 8812 	msr	BASEPRI_MAX, r2
   14bdc:	f3bf 8f6f 	isb	sy
	return list->head;
   14be0:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   14be2:	b929      	cbnz	r1, 14bf0 <tx_notify+0x2c>
	__asm__ volatile(
   14be4:	f383 8811 	msr	BASEPRI, r3
   14be8:	f3bf 8f6f 	isb	sy
}
   14bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14bf0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   14bf2:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14bf4:	4281      	cmp	r1, r0
	list->tail = node;
   14bf6:	bf08      	it	eq
   14bf8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   14bfa:	6222      	str	r2, [r4, #32]
   14bfc:	f383 8811 	msr	BASEPRI, r3
   14c00:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   14c04:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   14c08:	4638      	mov	r0, r7
	tx->user_data = NULL;
   14c0a:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   14c0e:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   14c12:	f017 f88b 	bl	2bd2c <k_queue_append>
		cb(conn, user_data, 0);
   14c16:	2200      	movs	r2, #0
   14c18:	4631      	mov	r1, r6
   14c1a:	4620      	mov	r0, r4
   14c1c:	47a8      	blx	r5
	while (1) {
   14c1e:	e7d7      	b.n	14bd0 <tx_notify+0xc>
   14c20:	20008c78 	.word	0x20008c78

00014c24 <conn_tx_destroy>:
{
   14c24:	b570      	push	{r4, r5, r6, lr}
   14c26:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   14c28:	b949      	cbnz	r1, 14c3e <conn_tx_destroy+0x1a>
   14c2a:	490d      	ldr	r1, [pc, #52]	; (14c60 <conn_tx_destroy+0x3c>)
   14c2c:	480d      	ldr	r0, [pc, #52]	; (14c64 <conn_tx_destroy+0x40>)
   14c2e:	2339      	movs	r3, #57	; 0x39
   14c30:	4a0d      	ldr	r2, [pc, #52]	; (14c68 <conn_tx_destroy+0x44>)
   14c32:	f012 fcde 	bl	275f2 <assert_print>
   14c36:	2139      	movs	r1, #57	; 0x39
   14c38:	480b      	ldr	r0, [pc, #44]	; (14c68 <conn_tx_destroy+0x44>)
   14c3a:	f012 fcd3 	bl	275e4 <assert_post_action>
	tx->cb = NULL;
   14c3e:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   14c40:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   14c44:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   14c46:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   14c4a:	4808      	ldr	r0, [pc, #32]	; (14c6c <conn_tx_destroy+0x48>)
   14c4c:	f017 f86e 	bl	2bd2c <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   14c50:	4631      	mov	r1, r6
   14c52:	4620      	mov	r0, r4
   14c54:	462b      	mov	r3, r5
}
   14c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   14c5a:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   14c5e:	4718      	bx	r3
   14c60:	00031360 	.word	0x00031360
   14c64:	0002e715 	.word	0x0002e715
   14c68:	00031315 	.word	0x00031315
   14c6c:	20008c78 	.word	0x20008c78

00014c70 <send_frag>:
{
   14c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14c74:	4604      	mov	r4, r0
   14c76:	460e      	mov	r6, r1
   14c78:	4617      	mov	r7, r2
   14c7a:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   14c7c:	698d      	ldr	r5, [r1, #24]
{
   14c7e:	b085      	sub	sp, #20
	return z_impl_k_sem_take(sem, timeout);
   14c80:	f04f 33ff 	mov.w	r3, #4294967295
   14c84:	f04f 32ff 	mov.w	r2, #4294967295
   14c88:	4849      	ldr	r0, [pc, #292]	; (14db0 <send_frag+0x140>)
   14c8a:	f00c f931 	bl	20ef0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   14c8e:	7b63      	ldrb	r3, [r4, #13]
   14c90:	2b07      	cmp	r3, #7
   14c92:	f040 8081 	bne.w	14d98 <send_frag+0x128>
	__asm__ volatile(
   14c96:	f04f 0320 	mov.w	r3, #32
   14c9a:	f3ef 8211 	mrs	r2, BASEPRI
   14c9e:	f383 8812 	msr	BASEPRI_MAX, r3
   14ca2:	f3bf 8f6f 	isb	sy
	if (tx) {
   14ca6:	2d00      	cmp	r5, #0
   14ca8:	d049      	beq.n	14d3e <send_frag+0xce>
	parent->next = child;
   14caa:	2300      	movs	r3, #0
   14cac:	602b      	str	r3, [r5, #0]
	return list->tail;
   14cae:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   14cb0:	2b00      	cmp	r3, #0
   14cb2:	d141      	bne.n	14d38 <send_frag+0xc8>
	list->head = node;
   14cb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14cb8:	f382 8811 	msr	BASEPRI, r2
   14cbc:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14cc0:	2104      	movs	r1, #4
   14cc2:	f106 000c 	add.w	r0, r6, #12
   14cc6:	f005 fc37 	bl	1a538 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14cca:	8823      	ldrh	r3, [r4, #0]
   14ccc:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   14cd0:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   14cd4:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14cd6:	8a33      	ldrh	r3, [r6, #16]
   14cd8:	3b04      	subs	r3, #4
   14cda:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14cdc:	2302      	movs	r3, #2
	return bt_send(buf);
   14cde:	4630      	mov	r0, r6
   14ce0:	7633      	strb	r3, [r6, #24]
   14ce2:	f7fe fa9b 	bl	1321c <bt_send>
	if (err) {
   14ce6:	2800      	cmp	r0, #0
   14ce8:	d060      	beq.n	14dac <send_frag+0x13c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   14cea:	4b32      	ldr	r3, [pc, #200]	; (14db4 <send_frag+0x144>)
   14cec:	9003      	str	r0, [sp, #12]
   14cee:	9302      	str	r3, [sp, #8]
   14cf0:	2300      	movs	r3, #0
   14cf2:	2201      	movs	r2, #1
   14cf4:	4618      	mov	r0, r3
   14cf6:	e9cd 3300 	strd	r3, r3, [sp]
   14cfa:	492f      	ldr	r1, [pc, #188]	; (14db8 <send_frag+0x148>)
   14cfc:	f014 f8ed 	bl	28eda <z_log_msg_runtime_create.constprop.0>
	__asm__ volatile(
   14d00:	f04f 0320 	mov.w	r3, #32
   14d04:	f3ef 8711 	mrs	r7, BASEPRI
   14d08:	f383 8812 	msr	BASEPRI_MAX, r3
   14d0c:	f3bf 8f6f 	isb	sy
		if (tx) {
   14d10:	b315      	cbz	r5, 14d58 <send_frag+0xe8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   14d12:	4629      	mov	r1, r5
   14d14:	f104 0014 	add.w	r0, r4, #20
   14d18:	f014 f8b9 	bl	28e8e <sys_slist_find_and_remove>
	__asm__ volatile(
   14d1c:	f387 8811 	msr	BASEPRI, r7
   14d20:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   14d24:	4822      	ldr	r0, [pc, #136]	; (14db0 <send_frag+0x140>)
   14d26:	f00c f89f 	bl	20e68 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   14d2a:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   14d2c:	4629      	mov	r1, r5
   14d2e:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   14d30:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   14d32:	f7ff ff77 	bl	14c24 <conn_tx_destroy>
   14d36:	e028      	b.n	14d8a <send_frag+0x11a>
	parent->next = child;
   14d38:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14d3a:	61a5      	str	r5, [r4, #24]
}
   14d3c:	e7bc      	b.n	14cb8 <send_frag+0x48>
	return list->tail;
   14d3e:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   14d40:	b133      	cbz	r3, 14d50 <send_frag+0xe0>
			pending_no_cb = &tail_tx->pending_no_cb;
   14d42:	f103 080c 	add.w	r8, r3, #12
   14d46:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14d48:	3301      	adds	r3, #1
   14d4a:	f8c8 3000 	str.w	r3, [r8]
   14d4e:	e7b3      	b.n	14cb8 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   14d50:	69e3      	ldr	r3, [r4, #28]
   14d52:	f104 081c 	add.w	r8, r4, #28
   14d56:	e7f7      	b.n	14d48 <send_frag+0xd8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   14d58:	f8d8 2000 	ldr.w	r2, [r8]
   14d5c:	b95a      	cbnz	r2, 14d76 <send_frag+0x106>
   14d5e:	4917      	ldr	r1, [pc, #92]	; (14dbc <send_frag+0x14c>)
   14d60:	4817      	ldr	r0, [pc, #92]	; (14dc0 <send_frag+0x150>)
   14d62:	f240 2327 	movw	r3, #551	; 0x227
   14d66:	4a17      	ldr	r2, [pc, #92]	; (14dc4 <send_frag+0x154>)
   14d68:	f012 fc43 	bl	275f2 <assert_print>
   14d6c:	f240 2127 	movw	r1, #551	; 0x227
   14d70:	4814      	ldr	r0, [pc, #80]	; (14dc4 <send_frag+0x154>)
   14d72:	f012 fc37 	bl	275e4 <assert_post_action>
			(*pending_no_cb)--;
   14d76:	3a01      	subs	r2, #1
   14d78:	f8c8 2000 	str.w	r2, [r8]
   14d7c:	f387 8811 	msr	BASEPRI, r7
   14d80:	f3bf 8f6f 	isb	sy
   14d84:	480a      	ldr	r0, [pc, #40]	; (14db0 <send_frag+0x140>)
   14d86:	f00c f86f 	bl	20e68 <z_impl_k_sem_give>
	if (always_consume) {
   14d8a:	f1b9 0f00 	cmp.w	r9, #0
   14d8e:	d109      	bne.n	14da4 <send_frag+0x134>
	return false;
   14d90:	2000      	movs	r0, #0
}
   14d92:	b005      	add	sp, #20
   14d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14d98:	4805      	ldr	r0, [pc, #20]	; (14db0 <send_frag+0x140>)
   14d9a:	f00c f865 	bl	20e68 <z_impl_k_sem_give>
	if (tx) {
   14d9e:	2d00      	cmp	r5, #0
   14da0:	d1c3      	bne.n	14d2a <send_frag+0xba>
   14da2:	e7f2      	b.n	14d8a <send_frag+0x11a>
		net_buf_unref(buf);
   14da4:	4630      	mov	r0, r6
   14da6:	f005 fb01 	bl	1a3ac <net_buf_unref>
   14daa:	e7f1      	b.n	14d90 <send_frag+0x120>
	return true;
   14dac:	2001      	movs	r0, #1
   14dae:	e7f0      	b.n	14d92 <send_frag+0x122>
   14db0:	20008100 	.word	0x20008100
   14db4:	00030b44 	.word	0x00030b44
   14db8:	0002d624 	.word	0x0002d624
   14dbc:	00031363 	.word	0x00031363
   14dc0:	0002e715 	.word	0x0002e715
   14dc4:	00031315 	.word	0x00031315

00014dc8 <bt_conn_get_pkts>:
}
   14dc8:	4800      	ldr	r0, [pc, #0]	; (14dcc <bt_conn_get_pkts+0x4>)
   14dca:	4770      	bx	lr
   14dcc:	20008100 	.word	0x20008100

00014dd0 <bt_conn_new>:
{
   14dd0:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   14dd2:	2200      	movs	r2, #0
   14dd4:	4604      	mov	r4, r0
   14dd6:	428a      	cmp	r2, r1
   14dd8:	d102      	bne.n	14de0 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14dda:	2400      	movs	r4, #0
}
   14ddc:	4620      	mov	r0, r4
   14dde:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14de0:	2001      	movs	r0, #1
   14de2:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   14de6:	e8d3 5fef 	ldaex	r5, [r3]
   14dea:	2d00      	cmp	r5, #0
   14dec:	d104      	bne.n	14df8 <bt_conn_new+0x28>
   14dee:	e8c3 0fec 	stlex	ip, r0, [r3]
   14df2:	f1bc 0f00 	cmp.w	ip, #0
   14df6:	d1f6      	bne.n	14de6 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14df8:	d002      	beq.n	14e00 <bt_conn_new+0x30>
   14dfa:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   14dfc:	4402      	add	r2, r0
   14dfe:	e7ea      	b.n	14dd6 <bt_conn_new+0x6>
	if (!conn) {
   14e00:	2c00      	cmp	r4, #0
   14e02:	d0ea      	beq.n	14dda <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   14e04:	22c4      	movs	r2, #196	; 0xc4
   14e06:	2100      	movs	r1, #0
   14e08:	4620      	mov	r0, r4
   14e0a:	f017 f999 	bl	2c140 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14e0e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14e12:	4904      	ldr	r1, [pc, #16]	; (14e24 <bt_conn_new+0x54>)
   14e14:	f00c fcac 	bl	21770 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14e18:	4903      	ldr	r1, [pc, #12]	; (14e28 <bt_conn_new+0x58>)
   14e1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14e1e:	f00c facb 	bl	213b8 <k_work_init>
	return conn;
   14e22:	e7db      	b.n	14ddc <bt_conn_new+0xc>
   14e24:	0001583d 	.word	0x0001583d
   14e28:	00028ef9 	.word	0x00028ef9

00014e2c <conn_cleanup>:
{
   14e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e30:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   14e32:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   14e34:	f104 0638 	add.w	r6, r4, #56	; 0x38
   14e38:	2300      	movs	r3, #0
   14e3a:	2200      	movs	r2, #0
   14e3c:	4630      	mov	r0, r6
   14e3e:	f015 fba9 	bl	2a594 <net_buf_get>
   14e42:	4603      	mov	r3, r0
   14e44:	b980      	cbnz	r0, 14e68 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   14e46:	6963      	ldr	r3, [r4, #20]
   14e48:	b1cb      	cbz	r3, 14e7e <conn_cleanup+0x52>
   14e4a:	4918      	ldr	r1, [pc, #96]	; (14eac <conn_cleanup+0x80>)
   14e4c:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   14e50:	4a17      	ldr	r2, [pc, #92]	; (14eb0 <conn_cleanup+0x84>)
   14e52:	4818      	ldr	r0, [pc, #96]	; (14eb4 <conn_cleanup+0x88>)
   14e54:	f012 fbcd 	bl	275f2 <assert_print>
   14e58:	4817      	ldr	r0, [pc, #92]	; (14eb8 <conn_cleanup+0x8c>)
   14e5a:	f012 fbca 	bl	275f2 <assert_print>
   14e5e:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14e62:	4813      	ldr	r0, [pc, #76]	; (14eb0 <conn_cleanup+0x84>)
   14e64:	f012 fbbe 	bl	275e4 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14e68:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   14e6a:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   14e6c:	f005 fa9e 	bl	1a3ac <net_buf_unref>
		if (tx) {
   14e70:	2d00      	cmp	r5, #0
   14e72:	d0e1      	beq.n	14e38 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   14e74:	4629      	mov	r1, r5
   14e76:	4620      	mov	r0, r4
   14e78:	f7ff fed4 	bl	14c24 <conn_tx_destroy>
   14e7c:	e7da      	b.n	14e34 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14e7e:	69e3      	ldr	r3, [r4, #28]
   14e80:	b14b      	cbz	r3, 14e96 <conn_cleanup+0x6a>
   14e82:	490e      	ldr	r1, [pc, #56]	; (14ebc <conn_cleanup+0x90>)
   14e84:	f240 23b5 	movw	r3, #693	; 0x2b5
   14e88:	4a09      	ldr	r2, [pc, #36]	; (14eb0 <conn_cleanup+0x84>)
   14e8a:	480a      	ldr	r0, [pc, #40]	; (14eb4 <conn_cleanup+0x88>)
   14e8c:	f012 fbb1 	bl	275f2 <assert_print>
   14e90:	f240 21b5 	movw	r1, #693	; 0x2b5
   14e94:	e7e5      	b.n	14e62 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   14e96:	4620      	mov	r0, r4
   14e98:	f014 f831 	bl	28efe <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14e9c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14ea0:	2200      	movs	r2, #0
}
   14ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14ea6:	2300      	movs	r3, #0
   14ea8:	f00c bd7e 	b.w	219a8 <k_work_reschedule>
   14eac:	00031376 	.word	0x00031376
   14eb0:	00031315 	.word	0x00031315
   14eb4:	0002e715 	.word	0x0002e715
   14eb8:	0003139c 	.word	0x0003139c
   14ebc:	000313b1 	.word	0x000313b1

00014ec0 <bt_conn_recv>:
{
   14ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ec2:	4616      	mov	r6, r2
   14ec4:	b087      	sub	sp, #28
   14ec6:	4604      	mov	r4, r0
   14ec8:	460d      	mov	r5, r1
	tx_notify(conn);
   14eca:	f7ff fe7b 	bl	14bc4 <tx_notify>
	switch (flags) {
   14ece:	2e01      	cmp	r6, #1
   14ed0:	d02e      	beq.n	14f30 <bt_conn_recv+0x70>
   14ed2:	2e02      	cmp	r6, #2
   14ed4:	d165      	bne.n	14fa2 <bt_conn_recv+0xe2>
		if (conn->rx) {
   14ed6:	6923      	ldr	r3, [r4, #16]
   14ed8:	b163      	cbz	r3, 14ef4 <bt_conn_recv+0x34>
			LOG_ERR("Unexpected first L2CAP frame");
   14eda:	4b3d      	ldr	r3, [pc, #244]	; (14fd0 <bt_conn_recv+0x110>)
   14edc:	2201      	movs	r2, #1
   14ede:	9302      	str	r3, [sp, #8]
   14ee0:	2300      	movs	r3, #0
   14ee2:	493c      	ldr	r1, [pc, #240]	; (14fd4 <bt_conn_recv+0x114>)
   14ee4:	4618      	mov	r0, r3
   14ee6:	e9cd 3300 	strd	r3, r3, [sp]
   14eea:	f013 fff6 	bl	28eda <z_log_msg_runtime_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   14eee:	4620      	mov	r0, r4
   14ef0:	f014 f805 	bl	28efe <bt_conn_reset_rx_state>
		conn->rx = buf;
   14ef4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   14ef6:	6921      	ldr	r1, [r4, #16]
   14ef8:	8a0a      	ldrh	r2, [r1, #16]
   14efa:	2a01      	cmp	r2, #1
   14efc:	d966      	bls.n	14fcc <bt_conn_recv+0x10c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   14efe:	68cb      	ldr	r3, [r1, #12]
   14f00:	881b      	ldrh	r3, [r3, #0]
   14f02:	3304      	adds	r3, #4
   14f04:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   14f06:	429a      	cmp	r2, r3
   14f08:	d360      	bcc.n	14fcc <bt_conn_recv+0x10c>
	if (conn->rx->len > acl_total_len) {
   14f0a:	d956      	bls.n	14fba <bt_conn_recv+0xfa>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   14f0c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   14f10:	4b31      	ldr	r3, [pc, #196]	; (14fd8 <bt_conn_recv+0x118>)
   14f12:	2201      	movs	r2, #1
   14f14:	9302      	str	r3, [sp, #8]
   14f16:	2300      	movs	r3, #0
   14f18:	492e      	ldr	r1, [pc, #184]	; (14fd4 <bt_conn_recv+0x114>)
   14f1a:	4618      	mov	r0, r3
   14f1c:	e9cd 3300 	strd	r3, r3, [sp]
   14f20:	f013 ffdb 	bl	28eda <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14f24:	4620      	mov	r0, r4
}
   14f26:	b007      	add	sp, #28
   14f28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_reset_rx_state(conn);
   14f2c:	f013 bfe7 	b.w	28efe <bt_conn_reset_rx_state>
		if (!conn->rx) {
   14f30:	6923      	ldr	r3, [r4, #16]
   14f32:	b963      	cbnz	r3, 14f4e <bt_conn_recv+0x8e>
			LOG_ERR("Unexpected L2CAP continuation");
   14f34:	4a29      	ldr	r2, [pc, #164]	; (14fdc <bt_conn_recv+0x11c>)
   14f36:	4618      	mov	r0, r3
   14f38:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14f3c:	4925      	ldr	r1, [pc, #148]	; (14fd4 <bt_conn_recv+0x114>)
   14f3e:	4632      	mov	r2, r6
   14f40:	9300      	str	r3, [sp, #0]
   14f42:	f013 ffca 	bl	28eda <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14f46:	4620      	mov	r0, r4
   14f48:	f013 ffd9 	bl	28efe <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   14f4c:	e001      	b.n	14f52 <bt_conn_recv+0x92>
		if (!buf->len) {
   14f4e:	8a2f      	ldrh	r7, [r5, #16]
   14f50:	b92f      	cbnz	r7, 14f5e <bt_conn_recv+0x9e>
			net_buf_unref(buf);
   14f52:	4628      	mov	r0, r5
}
   14f54:	b007      	add	sp, #28
   14f56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			net_buf_unref(buf);
   14f5a:	f005 ba27 	b.w	1a3ac <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14f5e:	f103 000c 	add.w	r0, r3, #12
   14f62:	f015 fb2c 	bl	2a5be <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   14f66:	4287      	cmp	r7, r0
   14f68:	d911      	bls.n	14f8e <bt_conn_recv+0xce>
			LOG_ERR("Not enough buffer space for L2CAP data");
   14f6a:	2700      	movs	r7, #0
   14f6c:	4b1c      	ldr	r3, [pc, #112]	; (14fe0 <bt_conn_recv+0x120>)
   14f6e:	4632      	mov	r2, r6
   14f70:	4638      	mov	r0, r7
   14f72:	4918      	ldr	r1, [pc, #96]	; (14fd4 <bt_conn_recv+0x114>)
   14f74:	9302      	str	r3, [sp, #8]
   14f76:	e9cd 7700 	strd	r7, r7, [sp]
   14f7a:	463b      	mov	r3, r7
   14f7c:	f013 ffad 	bl	28eda <z_log_msg_runtime_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   14f80:	463a      	mov	r2, r7
   14f82:	4620      	mov	r0, r4
   14f84:	6921      	ldr	r1, [r4, #16]
   14f86:	f000 fefd 	bl	15d84 <bt_l2cap_recv>
			conn->rx = NULL;
   14f8a:	6127      	str	r7, [r4, #16]
   14f8c:	e7e1      	b.n	14f52 <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14f8e:	6920      	ldr	r0, [r4, #16]
   14f90:	8a2a      	ldrh	r2, [r5, #16]
   14f92:	68e9      	ldr	r1, [r5, #12]
   14f94:	300c      	adds	r0, #12
   14f96:	f015 fb1a 	bl	2a5ce <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14f9a:	4628      	mov	r0, r5
   14f9c:	f005 fa06 	bl	1a3ac <net_buf_unref>
		break;
   14fa0:	e7a9      	b.n	14ef6 <bt_conn_recv+0x36>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14fa2:	4b10      	ldr	r3, [pc, #64]	; (14fe4 <bt_conn_recv+0x124>)
   14fa4:	2201      	movs	r2, #1
   14fa6:	9302      	str	r3, [sp, #8]
   14fa8:	2300      	movs	r3, #0
   14faa:	490a      	ldr	r1, [pc, #40]	; (14fd4 <bt_conn_recv+0x114>)
   14fac:	4618      	mov	r0, r3
   14fae:	e9cd 3300 	strd	r3, r3, [sp]
	switch (flags) {
   14fb2:	9603      	str	r6, [sp, #12]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14fb4:	f013 ff91 	bl	28eda <z_log_msg_runtime_create.constprop.0>
   14fb8:	e7c5      	b.n	14f46 <bt_conn_recv+0x86>
	conn->rx = NULL;
   14fba:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   14fbc:	2201      	movs	r2, #1
   14fbe:	4620      	mov	r0, r4
	conn->rx = NULL;
   14fc0:	6123      	str	r3, [r4, #16]
}
   14fc2:	b007      	add	sp, #28
   14fc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf, true);
   14fc8:	f000 bedc 	b.w	15d84 <bt_l2cap_recv>
}
   14fcc:	b007      	add	sp, #28
   14fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14fd0:	000313ca 	.word	0x000313ca
   14fd4:	0002d624 	.word	0x0002d624
   14fd8:	0003144a 	.word	0x0003144a
   14fdc:	000313e7 	.word	0x000313e7
   14fe0:	00031405 	.word	0x00031405
   14fe4:	0003142c 	.word	0x0003142c

00014fe8 <bt_conn_send_cb>:
{
   14fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14fec:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14fee:	7b43      	ldrb	r3, [r0, #13]
{
   14ff0:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14ff2:	2b07      	cmp	r3, #7
{
   14ff4:	4688      	mov	r8, r1
   14ff6:	4617      	mov	r7, r2
   14ff8:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
   14ffa:	d00c      	beq.n	15016 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   14ffc:	4b28      	ldr	r3, [pc, #160]	; (150a0 <bt_conn_send_cb+0xb8>)
   14ffe:	2201      	movs	r2, #1
   15000:	9302      	str	r3, [sp, #8]
   15002:	2300      	movs	r3, #0
   15004:	4927      	ldr	r1, [pc, #156]	; (150a4 <bt_conn_send_cb+0xbc>)
   15006:	4618      	mov	r0, r3
   15008:	e9cd 3300 	strd	r3, r3, [sp]
   1500c:	f013 ff65 	bl	28eda <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   15010:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15014:	e01c      	b.n	15050 <bt_conn_send_cb+0x68>
	if (cb) {
   15016:	2a00      	cmp	r2, #0
   15018:	d03f      	beq.n	1509a <bt_conn_send_cb+0xb2>
	return z_impl_z_current_get();
   1501a:	f00d fe4d 	bl	22cb8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1501e:	4b22      	ldr	r3, [pc, #136]	; (150a8 <bt_conn_send_cb+0xc0>)
   15020:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   15022:	4822      	ldr	r0, [pc, #136]	; (150ac <bt_conn_send_cb+0xc4>)
   15024:	bf07      	ittee	eq
   15026:	2200      	moveq	r2, #0
   15028:	2300      	moveq	r3, #0
   1502a:	f04f 32ff 	movne.w	r2, #4294967295
   1502e:	f04f 33ff 	movne.w	r3, #4294967295
   15032:	f00b feaf 	bl	20d94 <z_impl_k_queue_get>
   15036:	4604      	mov	r4, r0
		if (!tx) {
   15038:	b968      	cbnz	r0, 15056 <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   1503a:	4b1d      	ldr	r3, [pc, #116]	; (150b0 <bt_conn_send_cb+0xc8>)
   1503c:	9000      	str	r0, [sp, #0]
   1503e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15042:	2201      	movs	r2, #1
   15044:	4603      	mov	r3, r0
   15046:	4917      	ldr	r1, [pc, #92]	; (150a4 <bt_conn_send_cb+0xbc>)
   15048:	f013 ff47 	bl	28eda <z_log_msg_runtime_create.constprop.0>
			return -ENOBUFS;
   1504c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   15050:	b005      	add	sp, #20
   15052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   15056:	7b73      	ldrb	r3, [r6, #13]
   15058:	2500      	movs	r5, #0
   1505a:	2b07      	cmp	r3, #7
   1505c:	d011      	beq.n	15082 <bt_conn_send_cb+0x9a>
			LOG_WRN("Disconnected while allocating context");
   1505e:	4b15      	ldr	r3, [pc, #84]	; (150b4 <bt_conn_send_cb+0xcc>)
   15060:	4628      	mov	r0, r5
   15062:	e9cd 5301 	strd	r5, r3, [sp, #4]
   15066:	2202      	movs	r2, #2
   15068:	462b      	mov	r3, r5
   1506a:	490e      	ldr	r1, [pc, #56]	; (150a4 <bt_conn_send_cb+0xbc>)
   1506c:	9500      	str	r5, [sp, #0]
   1506e:	f013 ff34 	bl	28eda <z_log_msg_runtime_create.constprop.0>
	k_fifo_put(&free_tx, tx);
   15072:	4621      	mov	r1, r4
	tx->user_data = NULL;
   15074:	e9c4 5501 	strd	r5, r5, [r4, #4]
	k_fifo_put(&free_tx, tx);
   15078:	480c      	ldr	r0, [pc, #48]	; (150ac <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   1507a:	60e5      	str	r5, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1507c:	f016 fe56 	bl	2bd2c <k_queue_append>
}
   15080:	e7c6      	b.n	15010 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   15082:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   15086:	60c5      	str	r5, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   15088:	f106 0038 	add.w	r0, r6, #56	; 0x38
   1508c:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   1508e:	f8c8 4018 	str.w	r4, [r8, #24]
	net_buf_put(&conn->tx_queue, buf);
   15092:	f005 f965 	bl	1a360 <net_buf_put>
	return 0;
   15096:	2000      	movs	r0, #0
   15098:	e7da      	b.n	15050 <bt_conn_send_cb+0x68>
   1509a:	4614      	mov	r4, r2
   1509c:	e7f4      	b.n	15088 <bt_conn_send_cb+0xa0>
   1509e:	bf00      	nop
   150a0:	00031465 	.word	0x00031465
   150a4:	0002d624 	.word	0x0002d624
   150a8:	20009da8 	.word	0x20009da8
   150ac:	20008c78 	.word	0x20008c78
   150b0:	00031474 	.word	0x00031474
   150b4:	00031492 	.word	0x00031492

000150b8 <bt_conn_prepare_events>:
{
   150b8:	b570      	push	{r4, r5, r6, lr}
   150ba:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   150bc:	4817      	ldr	r0, [pc, #92]	; (1511c <bt_conn_prepare_events+0x64>)
   150be:	f016 ffdd 	bl	2c07c <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   150c2:	2200      	movs	r2, #0
   150c4:	2101      	movs	r1, #1
   150c6:	4620      	mov	r0, r4
   150c8:	4b14      	ldr	r3, [pc, #80]	; (1511c <bt_conn_prepare_events+0x64>)
   150ca:	f00e fcfd 	bl	23ac8 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   150ce:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   150d2:	4b13      	ldr	r3, [pc, #76]	; (15120 <bt_conn_prepare_events+0x68>)
   150d4:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   150d8:	b90a      	cbnz	r2, 150de <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   150da:	2001      	movs	r0, #1
}
   150dc:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   150de:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   150e2:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   150e6:	b953      	cbnz	r3, 150fe <bt_conn_prepare_events+0x46>
   150e8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   150ec:	1d28      	adds	r0, r5, #4
   150ee:	f013 fee9 	bl	28ec4 <atomic_and>
   150f2:	0643      	lsls	r3, r0, #25
   150f4:	d503      	bpl.n	150fe <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   150f6:	4628      	mov	r0, r5
   150f8:	f7ff fe98 	bl	14e2c <conn_cleanup>
		return -ENOTCONN;
   150fc:	e7ed      	b.n	150da <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   150fe:	7b6b      	ldrb	r3, [r5, #13]
   15100:	2b07      	cmp	r3, #7
   15102:	d1ea      	bne.n	150da <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   15104:	4630      	mov	r0, r6
   15106:	4b07      	ldr	r3, [pc, #28]	; (15124 <bt_conn_prepare_events+0x6c>)
   15108:	2200      	movs	r2, #0
   1510a:	2104      	movs	r1, #4
   1510c:	f00e fcdc 	bl	23ac8 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   15110:	2301      	movs	r3, #1
			ev_count++;
   15112:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   15114:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   15118:	e7e0      	b.n	150dc <bt_conn_prepare_events+0x24>
   1511a:	bf00      	nop
   1511c:	20008510 	.word	0x20008510
   15120:	200099ec 	.word	0x200099ec
   15124:	20009960 	.word	0x20009960

00015128 <bt_conn_ref>:
{
   15128:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   1512a:	b180      	cbz	r0, 1514e <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   1512c:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   15130:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   15134:	b1bb      	cbz	r3, 15166 <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   15136:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15138:	e8d2 4fef 	ldaex	r4, [r2]
   1513c:	429c      	cmp	r4, r3
   1513e:	d104      	bne.n	1514a <bt_conn_ref+0x22>
   15140:	e8c2 1fec 	stlex	ip, r1, [r2]
   15144:	f1bc 0f00 	cmp.w	ip, #0
   15148:	d1f6      	bne.n	15138 <bt_conn_ref+0x10>
   1514a:	d1f1      	bne.n	15130 <bt_conn_ref+0x8>
}
   1514c:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   1514e:	4907      	ldr	r1, [pc, #28]	; (1516c <bt_conn_ref+0x44>)
   15150:	4807      	ldr	r0, [pc, #28]	; (15170 <bt_conn_ref+0x48>)
   15152:	f240 437c 	movw	r3, #1148	; 0x47c
   15156:	4a07      	ldr	r2, [pc, #28]	; (15174 <bt_conn_ref+0x4c>)
   15158:	f012 fa4b 	bl	275f2 <assert_print>
   1515c:	f240 417c 	movw	r1, #1148	; 0x47c
   15160:	4804      	ldr	r0, [pc, #16]	; (15174 <bt_conn_ref+0x4c>)
   15162:	f012 fa3f 	bl	275e4 <assert_post_action>
			return NULL;
   15166:	4618      	mov	r0, r3
   15168:	e7f0      	b.n	1514c <bt_conn_ref+0x24>
   1516a:	bf00      	nop
   1516c:	00030bb6 	.word	0x00030bb6
   15170:	0002e715 	.word	0x0002e715
   15174:	00031315 	.word	0x00031315

00015178 <bt_conn_unref>:
{
   15178:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   1517a:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1517e:	e8d3 2fef 	ldaex	r2, [r3]
   15182:	1e51      	subs	r1, r2, #1
   15184:	e8c3 1fe4 	stlex	r4, r1, [r3]
   15188:	2c00      	cmp	r4, #0
   1518a:	d1f8      	bne.n	1517e <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   1518c:	2a00      	cmp	r2, #0
   1518e:	dc0e      	bgt.n	151ae <bt_conn_unref+0x36>
   15190:	490d      	ldr	r1, [pc, #52]	; (151c8 <bt_conn_unref+0x50>)
   15192:	f44f 6393 	mov.w	r3, #1176	; 0x498
   15196:	4a0d      	ldr	r2, [pc, #52]	; (151cc <bt_conn_unref+0x54>)
   15198:	480d      	ldr	r0, [pc, #52]	; (151d0 <bt_conn_unref+0x58>)
   1519a:	f012 fa2a 	bl	275f2 <assert_print>
   1519e:	480d      	ldr	r0, [pc, #52]	; (151d4 <bt_conn_unref+0x5c>)
   151a0:	f012 fa27 	bl	275f2 <assert_print>
   151a4:	f44f 6193 	mov.w	r1, #1176	; 0x498
   151a8:	4808      	ldr	r0, [pc, #32]	; (151cc <bt_conn_unref+0x54>)
   151aa:	f012 fa1b 	bl	275e4 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   151ae:	f240 1201 	movw	r2, #257	; 0x101
   151b2:	8841      	ldrh	r1, [r0, #2]
   151b4:	4291      	cmp	r1, r2
   151b6:	d106      	bne.n	151c6 <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   151b8:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   151bc:	b91b      	cbnz	r3, 151c6 <bt_conn_unref+0x4e>
}
   151be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   151c2:	f7ff baa9 	b.w	14718 <bt_le_adv_resume>
}
   151c6:	bd10      	pop	{r4, pc}
   151c8:	000314b8 	.word	0x000314b8
   151cc:	00031315 	.word	0x00031315
   151d0:	0002e715 	.word	0x0002e715
   151d4:	000314c0 	.word	0x000314c0

000151d8 <bt_conn_lookup_handle>:
{
   151d8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   151da:	2101      	movs	r1, #1
   151dc:	4801      	ldr	r0, [pc, #4]	; (151e4 <bt_conn_lookup_handle+0xc>)
   151de:	f013 be97 	b.w	28f10 <conn_lookup_handle>
   151e2:	bf00      	nop
   151e4:	20009928 	.word	0x20009928

000151e8 <bt_conn_set_state>:
{
   151e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == state) {
   151ea:	7b46      	ldrb	r6, [r0, #13]
{
   151ec:	4604      	mov	r4, r0
	if (conn->state == state) {
   151ee:	428e      	cmp	r6, r1
{
   151f0:	460d      	mov	r5, r1
	if (conn->state == state) {
   151f2:	d111      	bne.n	15218 <bt_conn_set_state+0x30>
	switch (state) {
   151f4:	2e08      	cmp	r6, #8
   151f6:	bf96      	itet	ls
   151f8:	4b65      	ldrls	r3, [pc, #404]	; (15390 <bt_conn_set_state+0x1a8>)
	if (conn->state == state) {
   151fa:	4b66      	ldrhi	r3, [pc, #408]	; (15394 <bt_conn_set_state+0x1ac>)
   151fc:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   15200:	9303      	str	r3, [sp, #12]
   15202:	4b65      	ldr	r3, [pc, #404]	; (15398 <bt_conn_set_state+0x1b0>)
		LOG_WRN("no valid (%u) state was set", state);
   15204:	9302      	str	r3, [sp, #8]
   15206:	2300      	movs	r3, #0
   15208:	2202      	movs	r2, #2
   1520a:	4618      	mov	r0, r3
   1520c:	e9cd 3300 	strd	r3, r3, [sp]
   15210:	4962      	ldr	r1, [pc, #392]	; (1539c <bt_conn_set_state+0x1b4>)
   15212:	f013 fe62 	bl	28eda <z_log_msg_runtime_create.constprop.0>
   15216:	e098      	b.n	1534a <bt_conn_set_state+0x162>
	conn->state = state;
   15218:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1521a:	b926      	cbnz	r6, 15226 <bt_conn_set_state+0x3e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1521c:	7883      	ldrb	r3, [r0, #2]
   1521e:	2b08      	cmp	r3, #8
   15220:	d001      	beq.n	15226 <bt_conn_set_state+0x3e>
			bt_conn_ref(conn);
   15222:	f7ff ff81 	bl	15128 <bt_conn_ref>
	switch (conn->state) {
   15226:	7b63      	ldrb	r3, [r4, #13]
   15228:	2b08      	cmp	r3, #8
   1522a:	f200 80ad 	bhi.w	15388 <bt_conn_set_state+0x1a0>
   1522e:	e8df f003 	tbb	[pc, r3]
   15232:	053a      	.short	0x053a
   15234:	8c8c8c8c 	.word	0x8c8c8c8c
   15238:	1c8c      	.short	0x1c8c
   1523a:	8c          	.byte	0x8c
   1523b:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   1523c:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   1523e:	4d58      	ldr	r5, [pc, #352]	; (153a0 <bt_conn_set_state+0x1b8>)
	__asm__ volatile(
   15240:	f04f 0220 	mov.w	r2, #32
   15244:	f3ef 8311 	mrs	r3, BASEPRI
   15248:	f382 8812 	msr	BASEPRI_MAX, r2
   1524c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   15250:	69e2      	ldr	r2, [r4, #28]
   15252:	2a00      	cmp	r2, #0
   15254:	d073      	beq.n	1533e <bt_conn_set_state+0x156>
			conn->pending_no_cb--;
   15256:	3a01      	subs	r2, #1
   15258:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   1525a:	f383 8811 	msr	BASEPRI, r3
   1525e:	f3bf 8f6f 	isb	sy
   15262:	4628      	mov	r0, r5
   15264:	f00b fe00 	bl	20e68 <z_impl_k_sem_give>
}
   15268:	e7ea      	b.n	15240 <bt_conn_set_state+0x58>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1526a:	78a3      	ldrb	r3, [r4, #2]
   1526c:	2b04      	cmp	r3, #4
   1526e:	d06c      	beq.n	1534a <bt_conn_set_state+0x162>
	z_impl_k_queue_init(queue);
   15270:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15274:	f016 fd4d 	bl	2bd12 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   15278:	2100      	movs	r1, #0
   1527a:	484a      	ldr	r0, [pc, #296]	; (153a4 <bt_conn_set_state+0x1bc>)
   1527c:	f00e fd42 	bl	23d04 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15280:	2300      	movs	r3, #0
	list->tail = NULL;
   15282:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15286:	78e3      	ldrb	r3, [r4, #3]
   15288:	2b01      	cmp	r3, #1
   1528a:	d15e      	bne.n	1534a <bt_conn_set_state+0x162>
			conn->le.conn_param_retry_countdown =
   1528c:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   1528e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   15292:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   15296:	2300      	movs	r3, #0
   15298:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   1529c:	b004      	add	sp, #16
   1529e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   152a2:	f00c bb07 	b.w	218b4 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   152a6:	78a3      	ldrb	r3, [r4, #2]
   152a8:	2b04      	cmp	r3, #4
   152aa:	d105      	bne.n	152b8 <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   152ac:	4620      	mov	r0, r4
}
   152ae:	b004      	add	sp, #16
   152b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   152b4:	f7ff bf60 	b.w	15178 <bt_conn_unref>
		switch (old_state) {
   152b8:	2e08      	cmp	r6, #8
   152ba:	d846      	bhi.n	1534a <bt_conn_set_state+0x162>
   152bc:	a301      	add	r3, pc, #4	; (adr r3, 152c4 <bt_conn_set_state+0xdc>)
   152be:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   152c2:	bf00      	nop
   152c4:	00015339 	.word	0x00015339
   152c8:	000152e9 	.word	0x000152e9
   152cc:	0001532b 	.word	0x0001532b
   152d0:	000152ad 	.word	0x000152ad
   152d4:	000152ad 	.word	0x000152ad
   152d8:	0001532b 	.word	0x0001532b
   152dc:	0001532b 	.word	0x0001532b
   152e0:	0001534b 	.word	0x0001534b
   152e4:	00015339 	.word	0x00015339
			tx_notify(conn);
   152e8:	4620      	mov	r0, r4
   152ea:	f7ff fc6b 	bl	14bc4 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   152ee:	78a3      	ldrb	r3, [r4, #2]
   152f0:	2b01      	cmp	r3, #1
   152f2:	d10a      	bne.n	1530a <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   152f4:	f104 0560 	add.w	r5, r4, #96	; 0x60
   152f8:	4628      	mov	r0, r5
   152fa:	f016 fda0 	bl	2be3e <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   152fe:	f010 0f0c 	tst.w	r0, #12
   15302:	d002      	beq.n	1530a <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   15304:	4628      	mov	r0, r5
   15306:	f00c fb55 	bl	219b4 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1530a:	3404      	adds	r4, #4
   1530c:	e8d4 3fef 	ldaex	r3, [r4]
   15310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15314:	e8c4 3fe2 	stlex	r2, r3, [r4]
   15318:	2a00      	cmp	r2, #0
   1531a:	d1f7      	bne.n	1530c <bt_conn_set_state+0x124>
   1531c:	2100      	movs	r1, #0
   1531e:	4821      	ldr	r0, [pc, #132]	; (153a4 <bt_conn_set_state+0x1bc>)
}
   15320:	b004      	add	sp, #16
   15322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15326:	f00e bced 	b.w	23d04 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1532a:	7b23      	ldrb	r3, [r4, #12]
   1532c:	2b00      	cmp	r3, #0
   1532e:	d0bd      	beq.n	152ac <bt_conn_set_state+0xc4>
				notify_connected(conn);
   15330:	4620      	mov	r0, r4
   15332:	f7ff fc11 	bl	14b58 <notify_connected>
   15336:	e7b9      	b.n	152ac <bt_conn_set_state+0xc4>
			LOG_WRN("Invalid (%u) old state", state);
   15338:	4b1b      	ldr	r3, [pc, #108]	; (153a8 <bt_conn_set_state+0x1c0>)
   1533a:	9503      	str	r5, [sp, #12]
   1533c:	e762      	b.n	15204 <bt_conn_set_state+0x1c>
	return list->head;
   1533e:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   15340:	b929      	cbnz	r1, 1534e <bt_conn_set_state+0x166>
   15342:	f383 8811 	msr	BASEPRI, r3
   15346:	f3bf 8f6f 	isb	sy
}
   1534a:	b004      	add	sp, #16
   1534c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1534e:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   15350:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15352:	4281      	cmp	r1, r0
	list->tail = node;
   15354:	bf08      	it	eq
   15356:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   15358:	6162      	str	r2, [r4, #20]
   1535a:	f383 8811 	msr	BASEPRI, r3
   1535e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15362:	f04f 0220 	mov.w	r2, #32
   15366:	f3ef 8311 	mrs	r3, BASEPRI
   1536a:	f382 8812 	msr	BASEPRI_MAX, r2
   1536e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   15372:	68ca      	ldr	r2, [r1, #12]
   15374:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   15376:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   15378:	f383 8811 	msr	BASEPRI, r3
   1537c:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   15380:	4620      	mov	r0, r4
   15382:	f7ff fc4f 	bl	14c24 <conn_tx_destroy>
   15386:	e76c      	b.n	15262 <bt_conn_set_state+0x7a>
		LOG_WRN("no valid (%u) state was set", state);
   15388:	4b08      	ldr	r3, [pc, #32]	; (153ac <bt_conn_set_state+0x1c4>)
   1538a:	9503      	str	r5, [sp, #12]
   1538c:	e73a      	b.n	15204 <bt_conn_set_state+0x1c>
   1538e:	bf00      	nop
   15390:	0002dfa4 	.word	0x0002dfa4
   15394:	000314de 	.word	0x000314de
   15398:	000314e8 	.word	0x000314e8
   1539c:	0002d624 	.word	0x0002d624
   153a0:	20008100 	.word	0x20008100
   153a4:	20008510 	.word	0x20008510
   153a8:	000314f9 	.word	0x000314f9
   153ac:	00031510 	.word	0x00031510

000153b0 <bt_conn_index>:
		index = conn - acl_conns;
   153b0:	4a0c      	ldr	r2, [pc, #48]	; (153e4 <bt_conn_index+0x34>)
{
   153b2:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   153b4:	490c      	ldr	r1, [pc, #48]	; (153e8 <bt_conn_index+0x38>)
   153b6:	1a83      	subs	r3, r0, r2
   153b8:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   153ba:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   153bc:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   153c0:	d00e      	beq.n	153e0 <bt_conn_index+0x30>
   153c2:	490a      	ldr	r1, [pc, #40]	; (153ec <bt_conn_index+0x3c>)
   153c4:	f240 43b6 	movw	r3, #1206	; 0x4b6
   153c8:	4a09      	ldr	r2, [pc, #36]	; (153f0 <bt_conn_index+0x40>)
   153ca:	480a      	ldr	r0, [pc, #40]	; (153f4 <bt_conn_index+0x44>)
   153cc:	f012 f911 	bl	275f2 <assert_print>
   153d0:	4809      	ldr	r0, [pc, #36]	; (153f8 <bt_conn_index+0x48>)
   153d2:	f012 f90e 	bl	275f2 <assert_print>
   153d6:	f240 41b6 	movw	r1, #1206	; 0x4b6
   153da:	4805      	ldr	r0, [pc, #20]	; (153f0 <bt_conn_index+0x40>)
   153dc:	f012 f902 	bl	275e4 <assert_post_action>
}
   153e0:	b2d8      	uxtb	r0, r3
   153e2:	bd08      	pop	{r3, pc}
   153e4:	20009928 	.word	0x20009928
   153e8:	c28f5c29 	.word	0xc28f5c29
   153ec:	0003152c 	.word	0x0003152c
   153f0:	00031315 	.word	0x00031315
   153f4:	0002e715 	.word	0x0002e715
   153f8:	000315f5 	.word	0x000315f5

000153fc <bt_conn_create_pdu_timeout>:
{
   153fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   153fe:	b085      	sub	sp, #20
   15400:	4604      	mov	r4, r0
   15402:	460d      	mov	r5, r1
   15404:	4617      	mov	r7, r2
   15406:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   15408:	f016 fc54 	bl	2bcb4 <k_is_in_isr>
   1540c:	b158      	cbz	r0, 15426 <bt_conn_create_pdu_timeout+0x2a>
   1540e:	4914      	ldr	r1, [pc, #80]	; (15460 <bt_conn_create_pdu_timeout+0x64>)
   15410:	4814      	ldr	r0, [pc, #80]	; (15464 <bt_conn_create_pdu_timeout+0x68>)
   15412:	f240 43d2 	movw	r3, #1234	; 0x4d2
   15416:	4a14      	ldr	r2, [pc, #80]	; (15468 <bt_conn_create_pdu_timeout+0x6c>)
   15418:	f012 f8eb 	bl	275f2 <assert_print>
   1541c:	f240 41d2 	movw	r1, #1234	; 0x4d2
   15420:	4811      	ldr	r0, [pc, #68]	; (15468 <bt_conn_create_pdu_timeout+0x6c>)
   15422:	f012 f8df 	bl	275e4 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   15426:	4911      	ldr	r1, [pc, #68]	; (1546c <bt_conn_create_pdu_timeout+0x70>)
   15428:	463a      	mov	r2, r7
   1542a:	2c00      	cmp	r4, #0
   1542c:	bf14      	ite	ne
   1542e:	4620      	movne	r0, r4
   15430:	4608      	moveq	r0, r1
   15432:	4633      	mov	r3, r6
   15434:	f015 f8a9 	bl	2a58a <net_buf_alloc_fixed>
	if (!buf) {
   15438:	4604      	mov	r4, r0
   1543a:	b958      	cbnz	r0, 15454 <bt_conn_create_pdu_timeout+0x58>
		LOG_WRN("Unable to allocate buffer within timeout");
   1543c:	4b0c      	ldr	r3, [pc, #48]	; (15470 <bt_conn_create_pdu_timeout+0x74>)
   1543e:	2202      	movs	r2, #2
   15440:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15444:	490b      	ldr	r1, [pc, #44]	; (15474 <bt_conn_create_pdu_timeout+0x78>)
   15446:	4603      	mov	r3, r0
   15448:	9000      	str	r0, [sp, #0]
   1544a:	f013 fd46 	bl	28eda <z_log_msg_runtime_create.constprop.0>
}
   1544e:	4620      	mov	r0, r4
   15450:	b005      	add	sp, #20
   15452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   15454:	1d69      	adds	r1, r5, #5
   15456:	300c      	adds	r0, #12
   15458:	f004 fe96 	bl	1a188 <net_buf_simple_reserve>
	return buf;
   1545c:	e7f7      	b.n	1544e <bt_conn_create_pdu_timeout+0x52>
   1545e:	bf00      	nop
   15460:	0003160f 	.word	0x0003160f
   15464:	0002e715 	.word	0x0002e715
   15468:	00031315 	.word	0x00031315
   1546c:	20008cc8 	.word	0x20008cc8
   15470:	0003161e 	.word	0x0003161e
   15474:	0002d624 	.word	0x0002d624

00015478 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   15478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1547a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1547c:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1547e:	e8d0 3faf 	lda	r3, [r0]
   15482:	059b      	lsls	r3, r3, #22
   15484:	d511      	bpl.n	154aa <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   15486:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1548a:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   1548e:	429a      	cmp	r2, r3
   15490:	d80b      	bhi.n	154aa <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   15492:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   15496:	429a      	cmp	r2, r3
   15498:	d307      	bcc.n	154aa <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1549a:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   1549e:	429a      	cmp	r2, r3
   154a0:	d103      	bne.n	154aa <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   154a2:	f46f 7100 	mvn.w	r1, #512	; 0x200
   154a6:	f013 fd0d 	bl	28ec4 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   154aa:	4b18      	ldr	r3, [pc, #96]	; (1550c <notify_le_param_updated+0x94>)
   154ac:	681d      	ldr	r5, [r3, #0]
   154ae:	b995      	cbnz	r5, 154d6 <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   154b0:	4d17      	ldr	r5, [pc, #92]	; (15510 <notify_le_param_updated+0x98>)
   154b2:	4f18      	ldr	r7, [pc, #96]	; (15514 <notify_le_param_updated+0x9c>)
   154b4:	42bd      	cmp	r5, r7
   154b6:	d926      	bls.n	15506 <notify_le_param_updated+0x8e>
   154b8:	4917      	ldr	r1, [pc, #92]	; (15518 <notify_le_param_updated+0xa0>)
   154ba:	f240 53a5 	movw	r3, #1445	; 0x5a5
   154be:	4a17      	ldr	r2, [pc, #92]	; (1551c <notify_le_param_updated+0xa4>)
   154c0:	4817      	ldr	r0, [pc, #92]	; (15520 <notify_le_param_updated+0xa8>)
   154c2:	f012 f896 	bl	275f2 <assert_print>
   154c6:	4817      	ldr	r0, [pc, #92]	; (15524 <notify_le_param_updated+0xac>)
   154c8:	f012 f893 	bl	275f2 <assert_print>
   154cc:	f240 51a5 	movw	r1, #1445	; 0x5a5
   154d0:	4812      	ldr	r0, [pc, #72]	; (1551c <notify_le_param_updated+0xa4>)
   154d2:	f012 f887 	bl	275e4 <assert_post_action>
		if (cb->le_param_updated) {
   154d6:	68ee      	ldr	r6, [r5, #12]
   154d8:	b13e      	cbz	r6, 154ea <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   154da:	4620      	mov	r0, r4
   154dc:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   154e0:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   154e4:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   154e8:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   154ea:	69ad      	ldr	r5, [r5, #24]
   154ec:	e7df      	b.n	154ae <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   154ee:	68ee      	ldr	r6, [r5, #12]
   154f0:	b13e      	cbz	r6, 15502 <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   154f2:	4620      	mov	r0, r4
   154f4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   154f8:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   154fc:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   15500:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15502:	351c      	adds	r5, #28
   15504:	e7d6      	b.n	154b4 <notify_le_param_updated+0x3c>
   15506:	d3f2      	bcc.n	154ee <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   15508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1550a:	bf00      	nop
   1550c:	2002f29c 	.word	0x2002f29c
   15510:	0002d5b0 	.word	0x0002d5b0
   15514:	0002d5cc 	.word	0x0002d5cc
   15518:	00031345 	.word	0x00031345
   1551c:	00031315 	.word	0x00031315
   15520:	0002e715 	.word	0x0002e715
   15524:	0002f82e 	.word	0x0002f82e

00015528 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   15528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1552c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1552e:	4608      	mov	r0, r1
{
   15530:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   15532:	f013 fa67 	bl	28a04 <bt_le_conn_params_valid>
   15536:	4605      	mov	r5, r0
   15538:	b918      	cbnz	r0, 15542 <le_param_req+0x1a>
		return false;
   1553a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1553c:	4628      	mov	r0, r5
   1553e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   15542:	4b1b      	ldr	r3, [pc, #108]	; (155b0 <le_param_req+0x88>)
   15544:	681e      	ldr	r6, [r3, #0]
   15546:	b99e      	cbnz	r6, 15570 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15548:	4e1a      	ldr	r6, [pc, #104]	; (155b4 <le_param_req+0x8c>)
   1554a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 155b8 <le_param_req+0x90>
   1554e:	4546      	cmp	r6, r8
   15550:	d927      	bls.n	155a2 <le_param_req+0x7a>
   15552:	491a      	ldr	r1, [pc, #104]	; (155bc <le_param_req+0x94>)
   15554:	f240 53ed 	movw	r3, #1517	; 0x5ed
   15558:	4a19      	ldr	r2, [pc, #100]	; (155c0 <le_param_req+0x98>)
   1555a:	481a      	ldr	r0, [pc, #104]	; (155c4 <le_param_req+0x9c>)
   1555c:	f012 f849 	bl	275f2 <assert_print>
   15560:	4819      	ldr	r0, [pc, #100]	; (155c8 <le_param_req+0xa0>)
   15562:	f012 f846 	bl	275f2 <assert_print>
   15566:	f240 51ed 	movw	r1, #1517	; 0x5ed
   1556a:	4815      	ldr	r0, [pc, #84]	; (155c0 <le_param_req+0x98>)
   1556c:	f012 f83a 	bl	275e4 <assert_post_action>
		if (!cb->le_param_req) {
   15570:	68b3      	ldr	r3, [r6, #8]
   15572:	b90b      	cbnz	r3, 15578 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   15574:	69b6      	ldr	r6, [r6, #24]
   15576:	e7e6      	b.n	15546 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   15578:	4621      	mov	r1, r4
   1557a:	4638      	mov	r0, r7
   1557c:	4798      	blx	r3
   1557e:	2800      	cmp	r0, #0
   15580:	d0db      	beq.n	1553a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15582:	4620      	mov	r0, r4
   15584:	f013 fa3e 	bl	28a04 <bt_le_conn_params_valid>
   15588:	2800      	cmp	r0, #0
   1558a:	d1f3      	bne.n	15574 <le_param_req+0x4c>
   1558c:	e7d5      	b.n	1553a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1558e:	4621      	mov	r1, r4
   15590:	4638      	mov	r0, r7
   15592:	4798      	blx	r3
   15594:	2800      	cmp	r0, #0
   15596:	d0d0      	beq.n	1553a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15598:	4620      	mov	r0, r4
   1559a:	f013 fa33 	bl	28a04 <bt_le_conn_params_valid>
   1559e:	b920      	cbnz	r0, 155aa <le_param_req+0x82>
   155a0:	e7cb      	b.n	1553a <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   155a2:	d2cb      	bcs.n	1553c <le_param_req+0x14>
		if (!cb->le_param_req) {
   155a4:	68b3      	ldr	r3, [r6, #8]
   155a6:	2b00      	cmp	r3, #0
   155a8:	d1f1      	bne.n	1558e <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   155aa:	361c      	adds	r6, #28
   155ac:	e7cf      	b.n	1554e <le_param_req+0x26>
   155ae:	bf00      	nop
   155b0:	2002f29c 	.word	0x2002f29c
   155b4:	0002d5b0 	.word	0x0002d5b0
   155b8:	0002d5cc 	.word	0x0002d5cc
   155bc:	00031345 	.word	0x00031345
   155c0:	00031315 	.word	0x00031315
   155c4:	0002e715 	.word	0x0002e715
   155c8:	0002f82e 	.word	0x0002f82e

000155cc <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   155cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   155d0:	78c3      	ldrb	r3, [r0, #3]
{
   155d2:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   155d4:	b9db      	cbnz	r3, 1560e <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   155d6:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   155da:	4b18      	ldr	r3, [pc, #96]	; (1563c <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   155dc:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   155e0:	681d      	ldr	r5, [r3, #0]
   155e2:	b9bd      	cbnz	r5, 15614 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   155e4:	4d16      	ldr	r5, [pc, #88]	; (15640 <bt_conn_identity_resolved+0x74>)
   155e6:	4f17      	ldr	r7, [pc, #92]	; (15644 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   155e8:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   155ec:	42bd      	cmp	r5, r7
   155ee:	d921      	bls.n	15634 <bt_conn_identity_resolved+0x68>
   155f0:	4915      	ldr	r1, [pc, #84]	; (15648 <bt_conn_identity_resolved+0x7c>)
   155f2:	f240 73bc 	movw	r3, #1980	; 0x7bc
   155f6:	4a15      	ldr	r2, [pc, #84]	; (1564c <bt_conn_identity_resolved+0x80>)
   155f8:	4815      	ldr	r0, [pc, #84]	; (15650 <bt_conn_identity_resolved+0x84>)
   155fa:	f011 fffa 	bl	275f2 <assert_print>
   155fe:	4815      	ldr	r0, [pc, #84]	; (15654 <bt_conn_identity_resolved+0x88>)
   15600:	f011 fff7 	bl	275f2 <assert_print>
   15604:	f240 71bc 	movw	r1, #1980	; 0x7bc
   15608:	4810      	ldr	r0, [pc, #64]	; (1564c <bt_conn_identity_resolved+0x80>)
   1560a:	f011 ffeb 	bl	275e4 <assert_post_action>
		rpa = &conn->le.init_addr;
   1560e:	f100 0697 	add.w	r6, r0, #151	; 0x97
   15612:	e7e2      	b.n	155da <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   15614:	692b      	ldr	r3, [r5, #16]
   15616:	b11b      	cbz	r3, 15620 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15618:	463a      	mov	r2, r7
   1561a:	4631      	mov	r1, r6
   1561c:	4620      	mov	r0, r4
   1561e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15620:	69ad      	ldr	r5, [r5, #24]
   15622:	e7de      	b.n	155e2 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   15624:	692b      	ldr	r3, [r5, #16]
   15626:	b11b      	cbz	r3, 15630 <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15628:	4642      	mov	r2, r8
   1562a:	4631      	mov	r1, r6
   1562c:	4620      	mov	r0, r4
   1562e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15630:	351c      	adds	r5, #28
   15632:	e7db      	b.n	155ec <bt_conn_identity_resolved+0x20>
   15634:	d3f6      	bcc.n	15624 <bt_conn_identity_resolved+0x58>
		}
	}
}
   15636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1563a:	bf00      	nop
   1563c:	2002f29c 	.word	0x2002f29c
   15640:	0002d5b0 	.word	0x0002d5b0
   15644:	0002d5cc 	.word	0x0002d5cc
   15648:	00031345 	.word	0x00031345
   1564c:	00031315 	.word	0x00031315
   15650:	0002e715 	.word	0x0002e715
   15654:	0002f82e 	.word	0x0002f82e

00015658 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   15658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1565a:	7a43      	ldrb	r3, [r0, #9]
{
   1565c:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   1565e:	7283      	strb	r3, [r0, #10]
{
   15660:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   15662:	f013 fd56 	bl	29112 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   15666:	4b14      	ldr	r3, [pc, #80]	; (156b8 <bt_conn_security_changed+0x60>)
   15668:	681d      	ldr	r5, [r3, #0]
   1566a:	b995      	cbnz	r5, 15692 <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1566c:	4d13      	ldr	r5, [pc, #76]	; (156bc <bt_conn_security_changed+0x64>)
   1566e:	4f14      	ldr	r7, [pc, #80]	; (156c0 <bt_conn_security_changed+0x68>)
   15670:	42bd      	cmp	r5, r7
   15672:	d91e      	bls.n	156b2 <bt_conn_security_changed+0x5a>
   15674:	4913      	ldr	r1, [pc, #76]	; (156c4 <bt_conn_security_changed+0x6c>)
   15676:	f640 0328 	movw	r3, #2088	; 0x828
   1567a:	4a13      	ldr	r2, [pc, #76]	; (156c8 <bt_conn_security_changed+0x70>)
   1567c:	4813      	ldr	r0, [pc, #76]	; (156cc <bt_conn_security_changed+0x74>)
   1567e:	f011 ffb8 	bl	275f2 <assert_print>
   15682:	4813      	ldr	r0, [pc, #76]	; (156d0 <bt_conn_security_changed+0x78>)
   15684:	f011 ffb5 	bl	275f2 <assert_print>
   15688:	f640 0128 	movw	r1, #2088	; 0x828
   1568c:	480e      	ldr	r0, [pc, #56]	; (156c8 <bt_conn_security_changed+0x70>)
   1568e:	f011 ffa9 	bl	275e4 <assert_post_action>
		if (cb->security_changed) {
   15692:	696b      	ldr	r3, [r5, #20]
   15694:	b11b      	cbz	r3, 1569e <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   15696:	4632      	mov	r2, r6
   15698:	4620      	mov	r0, r4
   1569a:	7a61      	ldrb	r1, [r4, #9]
   1569c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1569e:	69ad      	ldr	r5, [r5, #24]
   156a0:	e7e3      	b.n	1566a <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   156a2:	696b      	ldr	r3, [r5, #20]
   156a4:	b11b      	cbz	r3, 156ae <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   156a6:	4632      	mov	r2, r6
   156a8:	4620      	mov	r0, r4
   156aa:	7a61      	ldrb	r1, [r4, #9]
   156ac:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   156ae:	351c      	adds	r5, #28
   156b0:	e7de      	b.n	15670 <bt_conn_security_changed+0x18>
   156b2:	d3f6      	bcc.n	156a2 <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   156b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   156b6:	bf00      	nop
   156b8:	2002f29c 	.word	0x2002f29c
   156bc:	0002d5b0 	.word	0x0002d5b0
   156c0:	0002d5cc 	.word	0x0002d5cc
   156c4:	00031345 	.word	0x00031345
   156c8:	00031315 	.word	0x00031315
   156cc:	0002e715 	.word	0x0002e715
   156d0:	0002f82e 	.word	0x0002f82e

000156d4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   156d4:	b538      	push	{r3, r4, r5, lr}
   156d6:	4605      	mov	r5, r0
   156d8:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   156da:	480b      	ldr	r0, [pc, #44]	; (15708 <bt_conn_add_le+0x34>)
   156dc:	2101      	movs	r1, #1
   156de:	f7ff fb77 	bl	14dd0 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   156e2:	b180      	cbz	r0, 15706 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   156e4:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   156e6:	6823      	ldr	r3, [r4, #0]
   156e8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   156ec:	88a3      	ldrh	r3, [r4, #4]
   156ee:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   156f2:	79a3      	ldrb	r3, [r4, #6]
   156f4:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   156f8:	2301      	movs	r3, #1
   156fa:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   156fc:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   156fe:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   15700:	4b02      	ldr	r3, [pc, #8]	; (1570c <bt_conn_add_le+0x38>)
   15702:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   15706:	bd38      	pop	{r3, r4, r5, pc}
   15708:	20009928 	.word	0x20009928
   1570c:	00280018 	.word	0x00280018

00015710 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   15710:	b570      	push	{r4, r5, r6, lr}
   15712:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15714:	480a      	ldr	r0, [pc, #40]	; (15740 <bt_conn_lookup_addr_le+0x30>)
{
   15716:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15718:	f7ff fd06 	bl	15128 <bt_conn_ref>
   1571c:	4604      	mov	r4, r0

		if (!conn) {
   1571e:	b120      	cbz	r0, 1572a <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15720:	7883      	ldrb	r3, [r0, #2]
   15722:	2b01      	cmp	r3, #1
   15724:	d004      	beq.n	15730 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   15726:	f7ff fd27 	bl	15178 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1572a:	2400      	movs	r4, #0
}
   1572c:	4620      	mov	r0, r4
   1572e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   15730:	4632      	mov	r2, r6
   15732:	4629      	mov	r1, r5
   15734:	f013 fc65 	bl	29002 <bt_conn_is_peer_addr_le>
   15738:	2800      	cmp	r0, #0
   1573a:	d1f7      	bne.n	1572c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1573c:	4620      	mov	r0, r4
   1573e:	e7f2      	b.n	15726 <bt_conn_lookup_addr_le+0x16>
   15740:	20009928 	.word	0x20009928

00015744 <bt_conn_exists_le>:
{
   15744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   15746:	f7ff ffe3 	bl	15710 <bt_conn_lookup_addr_le>
	if (conn) {
   1574a:	4604      	mov	r4, r0
   1574c:	b1a8      	cbz	r0, 1577a <bt_conn_exists_le+0x36>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1574e:	7b43      	ldrb	r3, [r0, #13]
   15750:	490b      	ldr	r1, [pc, #44]	; (15780 <bt_conn_exists_le+0x3c>)
   15752:	2b08      	cmp	r3, #8
   15754:	bf96      	itet	ls
   15756:	4a0b      	ldrls	r2, [pc, #44]	; (15784 <bt_conn_exists_le+0x40>)
   15758:	4b0b      	ldrhi	r3, [pc, #44]	; (15788 <bt_conn_exists_le+0x44>)
   1575a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1575e:	2202      	movs	r2, #2
   15760:	9303      	str	r3, [sp, #12]
   15762:	4b0a      	ldr	r3, [pc, #40]	; (1578c <bt_conn_exists_le+0x48>)
   15764:	9302      	str	r3, [sp, #8]
   15766:	2300      	movs	r3, #0
   15768:	4618      	mov	r0, r3
   1576a:	e9cd 3300 	strd	r3, r3, [sp]
   1576e:	f013 fbb4 	bl	28eda <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   15772:	4620      	mov	r0, r4
   15774:	f7ff fd00 	bl	15178 <bt_conn_unref>
		return true;
   15778:	2001      	movs	r0, #1
}
   1577a:	b004      	add	sp, #16
   1577c:	bd10      	pop	{r4, pc}
   1577e:	bf00      	nop
   15780:	0002d624 	.word	0x0002d624
   15784:	0002dfa4 	.word	0x0002dfa4
   15788:	000314de 	.word	0x000314de
   1578c:	00031647 	.word	0x00031647

00015790 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15792:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15794:	480e      	ldr	r0, [pc, #56]	; (157d0 <bt_conn_lookup_state_le+0x40>)
{
   15796:	460e      	mov	r6, r1
   15798:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1579a:	f7ff fcc5 	bl	15128 <bt_conn_ref>

		if (!conn) {
   1579e:	4604      	mov	r4, r0
   157a0:	b120      	cbz	r0, 157ac <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   157a2:	7883      	ldrb	r3, [r0, #2]
   157a4:	2b01      	cmp	r3, #1
   157a6:	d003      	beq.n	157b0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   157a8:	f7ff fce6 	bl	15178 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   157ac:	2400      	movs	r4, #0
   157ae:	e00d      	b.n	157cc <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   157b0:	b136      	cbz	r6, 157c0 <bt_conn_lookup_state_le+0x30>
   157b2:	4632      	mov	r2, r6
   157b4:	4629      	mov	r1, r5
   157b6:	f013 fc24 	bl	29002 <bt_conn_is_peer_addr_le>
   157ba:	b908      	cbnz	r0, 157c0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   157bc:	4620      	mov	r0, r4
   157be:	e7f3      	b.n	157a8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   157c0:	7b63      	ldrb	r3, [r4, #13]
   157c2:	42bb      	cmp	r3, r7
   157c4:	d1fa      	bne.n	157bc <bt_conn_lookup_state_le+0x2c>
   157c6:	7a23      	ldrb	r3, [r4, #8]
   157c8:	42ab      	cmp	r3, r5
   157ca:	d1f7      	bne.n	157bc <bt_conn_lookup_state_le+0x2c>
}
   157cc:	4620      	mov	r0, r4
   157ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157d0:	20009928 	.word	0x20009928

000157d4 <send_conn_le_param_update>:
{
   157d4:	b538      	push	{r3, r4, r5, lr}
   157d6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   157d8:	4608      	mov	r0, r1
{
   157da:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   157dc:	f013 f912 	bl	28a04 <bt_le_conn_params_valid>
   157e0:	b338      	cbz	r0, 15832 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   157e2:	4b15      	ldr	r3, [pc, #84]	; (15838 <send_conn_le_param_update+0x64>)
   157e4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   157e8:	0799      	lsls	r1, r3, #30
   157ea:	d407      	bmi.n	157fc <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   157ec:	78e3      	ldrb	r3, [r4, #3]
   157ee:	b173      	cbz	r3, 1580e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   157f0:	4629      	mov	r1, r5
   157f2:	4620      	mov	r0, r4
}
   157f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   157f8:	f000 bafc 	b.w	15df4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   157fc:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   15800:	079a      	lsls	r2, r3, #30
   15802:	d5f3      	bpl.n	157ec <send_conn_le_param_update+0x18>
   15804:	1d23      	adds	r3, r4, #4
   15806:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1580a:	055b      	lsls	r3, r3, #21
   1580c:	d4ee      	bmi.n	157ec <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1580e:	4629      	mov	r1, r5
   15810:	4620      	mov	r0, r4
   15812:	f013 fc18 	bl	29046 <bt_conn_le_conn_update>
		if (rc == 0) {
   15816:	b958      	cbnz	r0, 15830 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   15818:	882b      	ldrh	r3, [r5, #0]
   1581a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1581e:	886b      	ldrh	r3, [r5, #2]
   15820:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   15824:	88ab      	ldrh	r3, [r5, #4]
   15826:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1582a:	88eb      	ldrh	r3, [r5, #6]
   1582c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   15830:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15832:	f06f 0015 	mvn.w	r0, #21
   15836:	e7fb      	b.n	15830 <send_conn_le_param_update+0x5c>
   15838:	20008000 	.word	0x20008000

0001583c <deferred_work>:
{
   1583c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1583e:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   15842:	4604      	mov	r4, r0
   15844:	b087      	sub	sp, #28
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   15846:	f1a0 0760 	sub.w	r7, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1584a:	bb7b      	cbnz	r3, 158ac <deferred_work+0x70>
		bt_l2cap_disconnected(conn);
   1584c:	4638      	mov	r0, r7
   1584e:	f013 fc48 	bl	290e2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15852:	4b3c      	ldr	r3, [pc, #240]	; (15944 <deferred_work+0x108>)
   15854:	681d      	ldr	r5, [r3, #0]
   15856:	b995      	cbnz	r5, 1587e <deferred_work+0x42>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15858:	4d3b      	ldr	r5, [pc, #236]	; (15948 <deferred_work+0x10c>)
   1585a:	4e3c      	ldr	r6, [pc, #240]	; (1594c <deferred_work+0x110>)
   1585c:	42b5      	cmp	r5, r6
   1585e:	d91e      	bls.n	1589e <deferred_work+0x62>
   15860:	493b      	ldr	r1, [pc, #236]	; (15950 <deferred_work+0x114>)
   15862:	f240 536c 	movw	r3, #1388	; 0x56c
   15866:	4a3b      	ldr	r2, [pc, #236]	; (15954 <deferred_work+0x118>)
   15868:	483b      	ldr	r0, [pc, #236]	; (15958 <deferred_work+0x11c>)
   1586a:	f011 fec2 	bl	275f2 <assert_print>
   1586e:	483b      	ldr	r0, [pc, #236]	; (1595c <deferred_work+0x120>)
   15870:	f011 febf 	bl	275f2 <assert_print>
   15874:	f240 516c 	movw	r1, #1388	; 0x56c
   15878:	4836      	ldr	r0, [pc, #216]	; (15954 <deferred_work+0x118>)
   1587a:	f011 feb3 	bl	275e4 <assert_post_action>
		if (cb->disconnected) {
   1587e:	686b      	ldr	r3, [r5, #4]
   15880:	b11b      	cbz	r3, 1588a <deferred_work+0x4e>
			cb->disconnected(conn, conn->err);
   15882:	4638      	mov	r0, r7
   15884:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   15888:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1588a:	69ad      	ldr	r5, [r5, #24]
   1588c:	e7e3      	b.n	15856 <deferred_work+0x1a>
		if (cb->disconnected) {
   1588e:	686b      	ldr	r3, [r5, #4]
   15890:	b11b      	cbz	r3, 1589a <deferred_work+0x5e>
			cb->disconnected(conn, conn->err);
   15892:	4638      	mov	r0, r7
   15894:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   15898:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1589a:	351c      	adds	r5, #28
   1589c:	e7de      	b.n	1585c <deferred_work+0x20>
   1589e:	d3f6      	bcc.n	1588e <deferred_work+0x52>
		bt_conn_unref(conn);
   158a0:	4638      	mov	r0, r7
}
   158a2:	b007      	add	sp, #28
   158a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   158a8:	f7ff bc66 	b.w	15178 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   158ac:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   158b0:	2b01      	cmp	r3, #1
   158b2:	d11f      	bne.n	158f4 <deferred_work+0xb8>
	if (atomic_test_and_clear_bit(conn->flags,
   158b4:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   158b8:	f46f 7100 	mvn.w	r1, #512	; 0x200
   158bc:	4628      	mov	r0, r5
   158be:	f013 fb01 	bl	28ec4 <atomic_and>
   158c2:	f410 7600 	ands.w	r6, r0, #512	; 0x200
   158c6:	d023      	beq.n	15910 <deferred_work+0xd4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   158c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   158ca:	4638      	mov	r0, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   158cc:	9304      	str	r3, [sp, #16]
   158ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   158d0:	a904      	add	r1, sp, #16
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   158d2:	9305      	str	r3, [sp, #20]
		err = send_conn_le_param_update(conn, param);
   158d4:	f7ff ff7e 	bl	157d4 <send_conn_le_param_update>
		if (!err) {
   158d8:	b970      	cbnz	r0, 158f8 <deferred_work+0xbc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   158da:	f46f 7180 	mvn.w	r1, #256	; 0x100
   158de:	4628      	mov	r0, r5
   158e0:	f013 faf0 	bl	28ec4 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   158e4:	e8d5 3fef 	ldaex	r3, [r5]
   158e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   158ec:	e8c5 3fe2 	stlex	r2, r3, [r5]
   158f0:	2a00      	cmp	r2, #0
   158f2:	d1f7      	bne.n	158e4 <deferred_work+0xa8>
}
   158f4:	b007      	add	sp, #28
   158f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   158f8:	4b19      	ldr	r3, [pc, #100]	; (15960 <deferred_work+0x124>)
   158fa:	9003      	str	r0, [sp, #12]
   158fc:	9302      	str	r3, [sp, #8]
   158fe:	2300      	movs	r3, #0
   15900:	e9cd 3300 	strd	r3, r3, [sp]
			LOG_WRN("Send auto LE param update failed (err %d)",
   15904:	2202      	movs	r2, #2
   15906:	4618      	mov	r0, r3
   15908:	4916      	ldr	r1, [pc, #88]	; (15964 <deferred_work+0x128>)
   1590a:	f013 fae6 	bl	28eda <z_log_msg_runtime_create.constprop.0>
   1590e:	e7e9      	b.n	158e4 <deferred_work+0xa8>
		param = BT_LE_CONN_PARAM(
   15910:	4a15      	ldr	r2, [pc, #84]	; (15968 <deferred_work+0x12c>)
   15912:	ab04      	add	r3, sp, #16
   15914:	6810      	ldr	r0, [r2, #0]
   15916:	6851      	ldr	r1, [r2, #4]
   15918:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   1591a:	4638      	mov	r0, r7
   1591c:	a904      	add	r1, sp, #16
   1591e:	f7ff ff59 	bl	157d4 <send_conn_le_param_update>
		if (!err) {
   15922:	b940      	cbnz	r0, 15936 <deferred_work+0xfa>
   15924:	e8d5 3fef 	ldaex	r3, [r5]
   15928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1592c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   15930:	2a00      	cmp	r2, #0
   15932:	d0d7      	beq.n	158e4 <deferred_work+0xa8>
   15934:	e7f6      	b.n	15924 <deferred_work+0xe8>
			LOG_WRN("Send auto LE param update failed (err %d)",
   15936:	4b0d      	ldr	r3, [pc, #52]	; (1596c <deferred_work+0x130>)
   15938:	9003      	str	r0, [sp, #12]
   1593a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1593e:	9600      	str	r6, [sp, #0]
   15940:	4633      	mov	r3, r6
   15942:	e7df      	b.n	15904 <deferred_work+0xc8>
   15944:	2002f29c 	.word	0x2002f29c
   15948:	0002d5b0 	.word	0x0002d5b0
   1594c:	0002d5cc 	.word	0x0002d5cc
   15950:	00031345 	.word	0x00031345
   15954:	00031315 	.word	0x00031315
   15958:	0002e715 	.word	0x0002e715
   1595c:	0002f82e 	.word	0x0002f82e
   15960:	0003166a 	.word	0x0003166a
   15964:	0002d624 	.word	0x0002d624
   15968:	0002d7bc 	.word	0x0002d7bc
   1596c:	0003168f 	.word	0x0003168f

00015970 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15970:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   15972:	4801      	ldr	r0, [pc, #4]	; (15978 <bt_conn_create_frag_timeout+0x8>)
   15974:	f7ff bd42 	b.w	153fc <bt_conn_create_pdu_timeout>
   15978:	20008d64 	.word	0x20008d64

0001597c <create_frag>:
{
   1597c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15980:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   15982:	f04f 33ff 	mov.w	r3, #4294967295
   15986:	f04f 32ff 	mov.w	r2, #4294967295
   1598a:	2000      	movs	r0, #0
{
   1598c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1598e:	f7ff ffef 	bl	15970 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   15992:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   15994:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15996:	2b07      	cmp	r3, #7
   15998:	f04f 0600 	mov.w	r6, #0
   1599c:	d005      	beq.n	159aa <create_frag+0x2e>
		net_buf_unref(frag);
   1599e:	f004 fd05 	bl	1a3ac <net_buf_unref>
		return NULL;
   159a2:	4635      	mov	r5, r6
}
   159a4:	4628      	mov	r0, r5
   159a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   159aa:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   159ac:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   159b0:	4e0c      	ldr	r6, [pc, #48]	; (159e4 <create_frag+0x68>)
   159b2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   159b4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   159b8:	f014 fe01 	bl	2a5be <net_buf_simple_tailroom>
   159bc:	4580      	cmp	r8, r0
   159be:	d20c      	bcs.n	159da <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   159c0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   159c4:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   159c8:	4632      	mov	r2, r6
   159ca:	4638      	mov	r0, r7
   159cc:	f014 fdff 	bl	2a5ce <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   159d0:	4631      	mov	r1, r6
   159d2:	4620      	mov	r0, r4
   159d4:	f004 fdd0 	bl	1a578 <net_buf_simple_pull>
   159d8:	e7e4      	b.n	159a4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   159da:	4638      	mov	r0, r7
   159dc:	f014 fdef 	bl	2a5be <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   159e0:	b286      	uxth	r6, r0
   159e2:	e7ef      	b.n	159c4 <create_frag+0x48>
   159e4:	20008000 	.word	0x20008000

000159e8 <bt_conn_process_tx>:
{
   159e8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   159ea:	7b43      	ldrb	r3, [r0, #13]
{
   159ec:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   159ee:	b95b      	cbnz	r3, 15a08 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   159f0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   159f4:	3004      	adds	r0, #4
   159f6:	f013 fa65 	bl	28ec4 <atomic_and>
   159fa:	0643      	lsls	r3, r0, #25
   159fc:	d504      	bpl.n	15a08 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   159fe:	4620      	mov	r0, r4
}
   15a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   15a04:	f7ff ba12 	b.w	14e2c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15a08:	2200      	movs	r2, #0
   15a0a:	2300      	movs	r3, #0
   15a0c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15a10:	f014 fdc0 	bl	2a594 <net_buf_get>
	BT_ASSERT(buf);
   15a14:	4605      	mov	r5, r0
   15a16:	b960      	cbnz	r0, 15a32 <bt_conn_process_tx+0x4a>
   15a18:	f240 331a 	movw	r3, #794	; 0x31a
   15a1c:	4a22      	ldr	r2, [pc, #136]	; (15aa8 <bt_conn_process_tx+0xc0>)
   15a1e:	4923      	ldr	r1, [pc, #140]	; (15aac <bt_conn_process_tx+0xc4>)
   15a20:	4823      	ldr	r0, [pc, #140]	; (15ab0 <bt_conn_process_tx+0xc8>)
   15a22:	f011 fde6 	bl	275f2 <assert_print>
   15a26:	4040      	eors	r0, r0
   15a28:	f380 8811 	msr	BASEPRI, r0
   15a2c:	f04f 0003 	mov.w	r0, #3
   15a30:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   15a32:	4e20      	ldr	r6, [pc, #128]	; (15ab4 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   15a34:	8a2a      	ldrh	r2, [r5, #16]
   15a36:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15a3a:	429a      	cmp	r2, r3
   15a3c:	d807      	bhi.n	15a4e <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15a3e:	2300      	movs	r3, #0
   15a40:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   15a42:	4629      	mov	r1, r5
   15a44:	4620      	mov	r0, r4
   15a46:	f7ff f913 	bl	14c70 <send_frag>
	if (!send_buf(conn, buf)) {
   15a4a:	b968      	cbnz	r0, 15a68 <bt_conn_process_tx+0x80>
   15a4c:	e005      	b.n	15a5a <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   15a4e:	4629      	mov	r1, r5
   15a50:	4620      	mov	r0, r4
   15a52:	f7ff ff93 	bl	1597c <create_frag>
	if (!frag) {
   15a56:	4601      	mov	r1, r0
   15a58:	b938      	cbnz	r0, 15a6a <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   15a5a:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   15a5c:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   15a5e:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   15a60:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   15a62:	f004 fca3 	bl	1a3ac <net_buf_unref>
		if (tx) {
   15a66:	b9ce      	cbnz	r6, 15a9c <bt_conn_process_tx+0xb4>
}
   15a68:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15a6a:	2301      	movs	r3, #1
   15a6c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15a6e:	4620      	mov	r0, r4
   15a70:	f7ff f8fe 	bl	14c70 <send_frag>
   15a74:	2800      	cmp	r0, #0
   15a76:	d0f0      	beq.n	15a5a <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   15a78:	8a2a      	ldrh	r2, [r5, #16]
   15a7a:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15a7e:	429a      	cmp	r2, r3
   15a80:	d802      	bhi.n	15a88 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   15a82:	2300      	movs	r3, #0
   15a84:	2203      	movs	r2, #3
   15a86:	e7dc      	b.n	15a42 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   15a88:	4629      	mov	r1, r5
   15a8a:	4620      	mov	r0, r4
   15a8c:	f7ff ff76 	bl	1597c <create_frag>
		if (!frag) {
   15a90:	4601      	mov	r1, r0
   15a92:	2800      	cmp	r0, #0
   15a94:	d0e1      	beq.n	15a5a <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15a96:	2301      	movs	r3, #1
   15a98:	461a      	mov	r2, r3
   15a9a:	e7e8      	b.n	15a6e <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   15a9c:	4631      	mov	r1, r6
   15a9e:	4620      	mov	r0, r4
}
   15aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   15aa4:	f7ff b8be 	b.w	14c24 <conn_tx_destroy>
   15aa8:	00031315 	.word	0x00031315
   15aac:	000323e2 	.word	0x000323e2
   15ab0:	0002e715 	.word	0x0002e715
   15ab4:	20008000 	.word	0x20008000

00015ab8 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   15ab8:	4b0b      	ldr	r3, [pc, #44]	; (15ae8 <bt_conn_auth_cb_register+0x30>)
   15aba:	b158      	cbz	r0, 15ad4 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   15abc:	681a      	ldr	r2, [r3, #0]
   15abe:	b962      	cbnz	r2, 15ada <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   15ac0:	6902      	ldr	r2, [r0, #16]
   15ac2:	b93a      	cbnz	r2, 15ad4 <bt_conn_auth_cb_register+0x1c>
   15ac4:	6802      	ldr	r2, [r0, #0]
   15ac6:	b95a      	cbnz	r2, 15ae0 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   15ac8:	6842      	ldr	r2, [r0, #4]
   15aca:	b94a      	cbnz	r2, 15ae0 <bt_conn_auth_cb_register+0x28>
   15acc:	6882      	ldr	r2, [r0, #8]
   15ace:	b93a      	cbnz	r2, 15ae0 <bt_conn_auth_cb_register+0x28>
   15ad0:	6942      	ldr	r2, [r0, #20]
   15ad2:	b92a      	cbnz	r2, 15ae0 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   15ad4:	6018      	str	r0, [r3, #0]
		return 0;
   15ad6:	2000      	movs	r0, #0
   15ad8:	4770      	bx	lr
		return -EALREADY;
   15ada:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15ade:	4770      	bx	lr
		return -EINVAL;
   15ae0:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   15ae4:	4770      	bx	lr
   15ae6:	bf00      	nop
   15ae8:	2002f2a8 	.word	0x2002f2a8

00015aec <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   15aec:	b168      	cbz	r0, 15b0a <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   15aee:	2300      	movs	r3, #0
   15af0:	60c3      	str	r3, [r0, #12]
	return list->tail;
   15af2:	4b07      	ldr	r3, [pc, #28]	; (15b10 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   15af4:	f100 020c 	add.w	r2, r0, #12
   15af8:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   15afa:	b919      	cbnz	r1, 15b04 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   15afc:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   15b00:	2000      	movs	r0, #0
   15b02:	4770      	bx	lr
	parent->next = child;
   15b04:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15b06:	605a      	str	r2, [r3, #4]
}
   15b08:	e7fa      	b.n	15b00 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   15b0a:	f06f 0015 	mvn.w	r0, #21
}
   15b0e:	4770      	bx	lr
   15b10:	2002f2a0 	.word	0x2002f2a0

00015b14 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   15b14:	b910      	cbnz	r0, 15b1c <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   15b16:	4802      	ldr	r0, [pc, #8]	; (15b20 <bt_conn_lookup_index+0xc>)
   15b18:	f7ff bb06 	b.w	15128 <bt_conn_ref>
}
   15b1c:	2000      	movs	r0, #0
   15b1e:	4770      	bx	lr
   15b20:	20009928 	.word	0x20009928

00015b24 <bt_conn_init>:

int bt_conn_init(void)
{
   15b24:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   15b26:	480a      	ldr	r0, [pc, #40]	; (15b50 <bt_conn_init+0x2c>)
   15b28:	f016 f8f3 	bl	2bd12 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15b2c:	4909      	ldr	r1, [pc, #36]	; (15b54 <bt_conn_init+0x30>)
   15b2e:	4808      	ldr	r0, [pc, #32]	; (15b50 <bt_conn_init+0x2c>)
   15b30:	f016 f8fc 	bl	2bd2c <k_queue_append>
   15b34:	4908      	ldr	r1, [pc, #32]	; (15b58 <bt_conn_init+0x34>)
   15b36:	4806      	ldr	r0, [pc, #24]	; (15b50 <bt_conn_init+0x2c>)
   15b38:	f016 f8f8 	bl	2bd2c <k_queue_append>
	}

	bt_att_init();
   15b3c:	f001 f8e4 	bl	16d08 <bt_att_init>

	err = bt_smp_init();
   15b40:	f003 ffb4 	bl	19aac <bt_smp_init>
	if (err) {
   15b44:	4604      	mov	r4, r0
   15b46:	b908      	cbnz	r0, 15b4c <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   15b48:	f013 fb2e 	bl	291a8 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15b4c:	4620      	mov	r0, r4
   15b4e:	bd10      	pop	{r4, pc}
   15b50:	20008c78 	.word	0x20008c78
   15b54:	2002f27c 	.word	0x2002f27c
   15b58:	2002f28c 	.word	0x2002f28c

00015b5c <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   15b5c:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   15b5e:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   15b60:	4605      	mov	r5, r0
   15b62:	460f      	mov	r7, r1
   15b64:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   15b66:	2104      	movs	r1, #4
   15b68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15b6c:	2000      	movs	r0, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   15b6e:	b085      	sub	sp, #20
	return bt_conn_create_pdu_timeout(pool,
   15b70:	f7ff fc44 	bl	153fc <bt_conn_create_pdu_timeout>
	if (!buf) {
   15b74:	4604      	mov	r4, r0
   15b76:	b960      	cbnz	r0, 15b92 <l2cap_create_le_sig_pdu.constprop.0+0x36>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   15b78:	4b0a      	ldr	r3, [pc, #40]	; (15ba4 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
   15b7a:	2201      	movs	r2, #1
   15b7c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15b80:	4909      	ldr	r1, [pc, #36]	; (15ba8 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   15b82:	4603      	mov	r3, r0
   15b84:	9503      	str	r5, [sp, #12]
   15b86:	9000      	str	r0, [sp, #0]
   15b88:	f013 fa86 	bl	29098 <z_log_msg_runtime_create.constprop.0>
}
   15b8c:	4620      	mov	r0, r4
   15b8e:	b005      	add	sp, #20
   15b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   15b92:	2104      	movs	r1, #4
   15b94:	300c      	adds	r0, #12
   15b96:	f004 fd2b 	bl	1a5f0 <net_buf_simple_add>
	hdr->code = code;
   15b9a:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   15b9c:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   15b9e:	8046      	strh	r6, [r0, #2]
	return buf;
   15ba0:	e7f4      	b.n	15b8c <l2cap_create_le_sig_pdu.constprop.0+0x30>
   15ba2:	bf00      	nop
   15ba4:	00031732 	.word	0x00031732
   15ba8:	0002d66c 	.word	0x0002d66c

00015bac <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   15bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   15bae:	4c0b      	ldr	r4, [pc, #44]	; (15bdc <l2cap_accept+0x30>)
   15bb0:	2300      	movs	r3, #0
   15bb2:	6822      	ldr	r2, [r4, #0]
   15bb4:	b92a      	cbnz	r2, 15bc2 <l2cap_accept+0x16>
		}

		l2cap->chan.chan.ops = &ops;
		*chan = &l2cap->chan.chan;

		return 0;
   15bb6:	4610      	mov	r0, r2
		l2cap->chan.chan.ops = &ops;
   15bb8:	4b09      	ldr	r3, [pc, #36]	; (15be0 <l2cap_accept+0x34>)
   15bba:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;
   15bbc:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   15bbe:	b004      	add	sp, #16
   15bc0:	bd10      	pop	{r4, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   15bc2:	4a08      	ldr	r2, [pc, #32]	; (15be4 <l2cap_accept+0x38>)
   15bc4:	9003      	str	r0, [sp, #12]
   15bc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   15bca:	4618      	mov	r0, r3
   15bcc:	2201      	movs	r2, #1
   15bce:	4906      	ldr	r1, [pc, #24]	; (15be8 <l2cap_accept+0x3c>)
   15bd0:	9300      	str	r3, [sp, #0]
   15bd2:	f013 fa61 	bl	29098 <z_log_msg_runtime_create.constprop.0>
   15bd6:	f06f 000b 	mvn.w	r0, #11
   15bda:	e7f0      	b.n	15bbe <l2cap_accept+0x12>
   15bdc:	2002f2ac 	.word	0x2002f2ac
   15be0:	0002dfe8 	.word	0x0002dfe8
   15be4:	0003175a 	.word	0x0003175a
   15be8:	0002d66c 	.word	0x0002d66c

00015bec <bt_l2cap_connected>:
{
   15bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15bee:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15bf0:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15bf2:	4d27      	ldr	r5, [pc, #156]	; (15c90 <bt_l2cap_connected+0xa4>)
   15bf4:	4f27      	ldr	r7, [pc, #156]	; (15c94 <bt_l2cap_connected+0xa8>)
   15bf6:	42bd      	cmp	r5, r7
   15bf8:	d946      	bls.n	15c88 <bt_l2cap_connected+0x9c>
   15bfa:	4927      	ldr	r1, [pc, #156]	; (15c98 <bt_l2cap_connected+0xac>)
   15bfc:	f240 1381 	movw	r3, #385	; 0x181
   15c00:	4a26      	ldr	r2, [pc, #152]	; (15c9c <bt_l2cap_connected+0xb0>)
   15c02:	4827      	ldr	r0, [pc, #156]	; (15ca0 <bt_l2cap_connected+0xb4>)
   15c04:	f011 fcf5 	bl	275f2 <assert_print>
   15c08:	4826      	ldr	r0, [pc, #152]	; (15ca4 <bt_l2cap_connected+0xb8>)
   15c0a:	f011 fcf2 	bl	275f2 <assert_print>
   15c0e:	f240 1181 	movw	r1, #385	; 0x181
   15c12:	4822      	ldr	r0, [pc, #136]	; (15c9c <bt_l2cap_connected+0xb0>)
   15c14:	f011 fce6 	bl	275e4 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   15c18:	4620      	mov	r0, r4
   15c1a:	686b      	ldr	r3, [r5, #4]
   15c1c:	a901      	add	r1, sp, #4
   15c1e:	4798      	blx	r3
   15c20:	2800      	cmp	r0, #0
   15c22:	db2c      	blt.n	15c7e <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   15c24:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   15c26:	882a      	ldrh	r2, [r5, #0]
   15c28:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   15c2a:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   15c2c:	68a8      	ldr	r0, [r5, #8]
   15c2e:	f103 0210 	add.w	r2, r3, #16
   15c32:	e8d2 1fef 	ldaex	r1, [r2]
   15c36:	e8c2 6fec 	stlex	ip, r6, [r2]
   15c3a:	f1bc 0f00 	cmp.w	ip, #0
   15c3e:	d1f8      	bne.n	15c32 <bt_l2cap_connected+0x46>
	parent->next = child;
   15c40:	609e      	str	r6, [r3, #8]
	return list->tail;
   15c42:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   15c44:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   15c48:	b9d9      	cbnz	r1, 15c82 <bt_l2cap_connected+0x96>
	list->head = node;
   15c4a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   15c4e:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   15c50:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   15c52:	9801      	ldr	r0, [sp, #4]
   15c54:	6843      	ldr	r3, [r0, #4]
   15c56:	681b      	ldr	r3, [r3, #0]
   15c58:	b103      	cbz	r3, 15c5c <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   15c5a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15c5c:	9b01      	ldr	r3, [sp, #4]
   15c5e:	3310      	adds	r3, #16
   15c60:	e8d3 1fef 	ldaex	r1, [r3]
   15c64:	f041 0101 	orr.w	r1, r1, #1
   15c68:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15c6c:	2a00      	cmp	r2, #0
   15c6e:	d1f7      	bne.n	15c60 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   15c70:	9801      	ldr	r0, [sp, #4]
   15c72:	6843      	ldr	r3, [r0, #4]
   15c74:	69db      	ldr	r3, [r3, #28]
   15c76:	b113      	cbz	r3, 15c7e <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   15c78:	f100 0110 	add.w	r1, r0, #16
   15c7c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15c7e:	350c      	adds	r5, #12
   15c80:	e7b9      	b.n	15bf6 <bt_l2cap_connected+0xa>
	parent->next = child;
   15c82:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15c84:	65a2      	str	r2, [r4, #88]	; 0x58
}
   15c86:	e7e2      	b.n	15c4e <bt_l2cap_connected+0x62>
   15c88:	d3c6      	bcc.n	15c18 <bt_l2cap_connected+0x2c>
}
   15c8a:	b003      	add	sp, #12
   15c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c8e:	bf00      	nop
   15c90:	0002d58c 	.word	0x0002d58c
   15c94:	0002d5b0 	.word	0x0002d5b0
   15c98:	000317b2 	.word	0x000317b2
   15c9c:	00031781 	.word	0x00031781
   15ca0:	0002e715 	.word	0x0002e715
   15ca4:	0002f82e 	.word	0x0002f82e

00015ca8 <l2cap_recv>:
{
   15ca8:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   15caa:	8a0b      	ldrh	r3, [r1, #16]
{
   15cac:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   15cae:	2b03      	cmp	r3, #3
{
   15cb0:	460c      	mov	r4, r1
   15cb2:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   15cb4:	d803      	bhi.n	15cbe <l2cap_recv+0x16>
		LOG_ERR("Too small L2CAP signaling PDU");
   15cb6:	4b2d      	ldr	r3, [pc, #180]	; (15d6c <l2cap_recv+0xc4>)
		LOG_ERR("Too small LE conn param rsp");
   15cb8:	9302      	str	r3, [sp, #8]
   15cba:	2300      	movs	r3, #0
   15cbc:	e01c      	b.n	15cf8 <l2cap_recv+0x50>
	return net_buf_simple_pull_mem(&buf->b, len);
   15cbe:	2104      	movs	r1, #4
   15cc0:	f104 000c 	add.w	r0, r4, #12
   15cc4:	f004 fc76 	bl	1a5b4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   15cc8:	8a23      	ldrh	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   15cca:	8842      	ldrh	r2, [r0, #2]
   15ccc:	4605      	mov	r5, r0
	if (buf->len != len) {
   15cce:	429a      	cmp	r2, r3
   15cd0:	d00e      	beq.n	15cf0 <l2cap_recv+0x48>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   15cd2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   15cd6:	4b26      	ldr	r3, [pc, #152]	; (15d70 <l2cap_recv+0xc8>)
   15cd8:	2201      	movs	r2, #1
   15cda:	9302      	str	r3, [sp, #8]
   15cdc:	2300      	movs	r3, #0
   15cde:	4925      	ldr	r1, [pc, #148]	; (15d74 <l2cap_recv+0xcc>)
   15ce0:	4618      	mov	r0, r3
   15ce2:	e9cd 3300 	strd	r3, r3, [sp]
   15ce6:	f013 f9d7 	bl	29098 <z_log_msg_runtime_create.constprop.0>
}
   15cea:	2000      	movs	r0, #0
   15cec:	b006      	add	sp, #24
   15cee:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   15cf0:	7843      	ldrb	r3, [r0, #1]
   15cf2:	b94b      	cbnz	r3, 15d08 <l2cap_recv+0x60>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   15cf4:	4a20      	ldr	r2, [pc, #128]	; (15d78 <l2cap_recv+0xd0>)
   15cf6:	9202      	str	r2, [sp, #8]
   15cf8:	2201      	movs	r2, #1
   15cfa:	4618      	mov	r0, r3
   15cfc:	e9cd 3300 	strd	r3, r3, [sp]
   15d00:	491c      	ldr	r1, [pc, #112]	; (15d74 <l2cap_recv+0xcc>)
   15d02:	f013 f9c9 	bl	29098 <z_log_msg_runtime_create.constprop.0>
		return 0;
   15d06:	e7f0      	b.n	15cea <l2cap_recv+0x42>
	switch (hdr->code) {
   15d08:	7803      	ldrb	r3, [r0, #0]
   15d0a:	2b01      	cmp	r3, #1
   15d0c:	d0ed      	beq.n	15cea <l2cap_recv+0x42>
   15d0e:	2b13      	cmp	r3, #19
   15d10:	d103      	bne.n	15d1a <l2cap_recv+0x72>
	if (buf->len < sizeof(*rsp)) {
   15d12:	2a01      	cmp	r2, #1
   15d14:	d8e9      	bhi.n	15cea <l2cap_recv+0x42>
		LOG_ERR("Too small LE conn param rsp");
   15d16:	4b19      	ldr	r3, [pc, #100]	; (15d7c <l2cap_recv+0xd4>)
   15d18:	e7ce      	b.n	15cb8 <l2cap_recv+0x10>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15d1a:	2400      	movs	r4, #0
	switch (hdr->code) {
   15d1c:	9303      	str	r3, [sp, #12]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15d1e:	4b18      	ldr	r3, [pc, #96]	; (15d80 <l2cap_recv+0xd8>)
   15d20:	2202      	movs	r2, #2
   15d22:	4620      	mov	r0, r4
   15d24:	4913      	ldr	r1, [pc, #76]	; (15d74 <l2cap_recv+0xcc>)
   15d26:	9302      	str	r3, [sp, #8]
   15d28:	e9cd 4400 	strd	r4, r4, [sp]
   15d2c:	4623      	mov	r3, r4
   15d2e:	f013 f9b3 	bl	29098 <z_log_msg_runtime_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15d32:	7869      	ldrb	r1, [r5, #1]
   15d34:	2202      	movs	r2, #2
   15d36:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   15d38:	6836      	ldr	r6, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15d3a:	f7ff ff0f 	bl	15b5c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15d3e:	4605      	mov	r5, r0
   15d40:	2800      	cmp	r0, #0
   15d42:	d0d2      	beq.n	15cea <l2cap_recv+0x42>
	return net_buf_simple_add(&buf->b, len);
   15d44:	2102      	movs	r1, #2
   15d46:	300c      	adds	r0, #12
   15d48:	f004 fc52 	bl	1a5f0 <net_buf_simple_add>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15d4c:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   15d4e:	7004      	strb	r4, [r0, #0]
   15d50:	7044      	strb	r4, [r0, #1]
   15d52:	462a      	mov	r2, r5
   15d54:	2105      	movs	r1, #5
   15d56:	4630      	mov	r0, r6
   15d58:	9400      	str	r4, [sp, #0]
   15d5a:	f013 f9fa 	bl	29152 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   15d5e:	2800      	cmp	r0, #0
   15d60:	d0c3      	beq.n	15cea <l2cap_recv+0x42>
		net_buf_unref(buf);
   15d62:	4628      	mov	r0, r5
   15d64:	f004 fb22 	bl	1a3ac <net_buf_unref>
   15d68:	e7bf      	b.n	15cea <l2cap_recv+0x42>
   15d6a:	bf00      	nop
   15d6c:	000317d9 	.word	0x000317d9
   15d70:	000317f7 	.word	0x000317f7
   15d74:	0002d66c 	.word	0x0002d66c
   15d78:	00031818 	.word	0x00031818
   15d7c:	00031839 	.word	0x00031839
   15d80:	00031855 	.word	0x00031855

00015d84 <bt_l2cap_recv>:
{
   15d84:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   15d86:	8a0b      	ldrh	r3, [r1, #16]
{
   15d88:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   15d8a:	2b03      	cmp	r3, #3
{
   15d8c:	460c      	mov	r4, r1
   15d8e:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   15d90:	d80f      	bhi.n	15db2 <bt_l2cap_recv+0x2e>
		LOG_ERR("Too small L2CAP PDU received");
   15d92:	4b15      	ldr	r3, [pc, #84]	; (15de8 <bt_l2cap_recv+0x64>)
   15d94:	2201      	movs	r2, #1
   15d96:	9302      	str	r3, [sp, #8]
   15d98:	2300      	movs	r3, #0
   15d9a:	4914      	ldr	r1, [pc, #80]	; (15dec <bt_l2cap_recv+0x68>)
   15d9c:	4618      	mov	r0, r3
   15d9e:	e9cd 3300 	strd	r3, r3, [sp]
   15da2:	f013 f979 	bl	29098 <z_log_msg_runtime_create.constprop.0>
	net_buf_unref(buf);
   15da6:	4620      	mov	r0, r4
}
   15da8:	b005      	add	sp, #20
   15daa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   15dae:	f004 bafd 	b.w	1a3ac <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   15db2:	2104      	movs	r1, #4
   15db4:	f104 000c 	add.w	r0, r4, #12
   15db8:	f004 fbfc 	bl	1a5b4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   15dbc:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   15dbe:	4628      	mov	r0, r5
   15dc0:	f013 f9e9 	bl	29196 <bt_l2cap_le_lookup_rx_cid>
   15dc4:	4603      	mov	r3, r0
	if (!chan) {
   15dc6:	b948      	cbnz	r0, 15ddc <bt_l2cap_recv+0x58>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   15dc8:	4a09      	ldr	r2, [pc, #36]	; (15df0 <bt_l2cap_recv+0x6c>)
   15dca:	9103      	str	r1, [sp, #12]
   15dcc:	e9cd 0201 	strd	r0, r2, [sp, #4]
   15dd0:	4906      	ldr	r1, [pc, #24]	; (15dec <bt_l2cap_recv+0x68>)
   15dd2:	2202      	movs	r2, #2
   15dd4:	9000      	str	r0, [sp, #0]
   15dd6:	f013 f95f 	bl	29098 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   15dda:	e7e4      	b.n	15da6 <bt_l2cap_recv+0x22>
	chan->ops->recv(chan, buf);
   15ddc:	6843      	ldr	r3, [r0, #4]
   15dde:	4621      	mov	r1, r4
   15de0:	695b      	ldr	r3, [r3, #20]
   15de2:	4798      	blx	r3
   15de4:	e7df      	b.n	15da6 <bt_l2cap_recv+0x22>
   15de6:	bf00      	nop
   15de8:	0003187d 	.word	0x0003187d
   15dec:	0002d66c 	.word	0x0002d66c
   15df0:	0003189a 	.word	0x0003189a

00015df4 <bt_l2cap_update_conn_param>:
{
   15df4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   15df6:	4b17      	ldr	r3, [pc, #92]	; (15e54 <bt_l2cap_update_conn_param+0x60>)
{
   15df8:	460e      	mov	r6, r1
	ident++;
   15dfa:	7819      	ldrb	r1, [r3, #0]
{
   15dfc:	4605      	mov	r5, r0
	ident++;
   15dfe:	3101      	adds	r1, #1
   15e00:	b2c9      	uxtb	r1, r1
   15e02:	2901      	cmp	r1, #1
   15e04:	bf38      	it	cc
   15e06:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15e08:	2208      	movs	r2, #8
   15e0a:	2012      	movs	r0, #18
	ident++;
   15e0c:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15e0e:	f7ff fea5 	bl	15b5c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15e12:	4604      	mov	r4, r0
   15e14:	b1d0      	cbz	r0, 15e4c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   15e16:	2108      	movs	r1, #8
   15e18:	300c      	adds	r0, #12
   15e1a:	f004 fbe9 	bl	1a5f0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15e1e:	8833      	ldrh	r3, [r6, #0]
   15e20:	4622      	mov	r2, r4
   15e22:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15e24:	8873      	ldrh	r3, [r6, #2]
   15e26:	2105      	movs	r1, #5
   15e28:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15e2a:	88b3      	ldrh	r3, [r6, #4]
   15e2c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15e2e:	88f3      	ldrh	r3, [r6, #6]
   15e30:	80c3      	strh	r3, [r0, #6]
   15e32:	2300      	movs	r3, #0
   15e34:	4628      	mov	r0, r5
   15e36:	9300      	str	r3, [sp, #0]
   15e38:	f013 f98b 	bl	29152 <bt_l2cap_send_cb>
	if (err) {
   15e3c:	4605      	mov	r5, r0
   15e3e:	b110      	cbz	r0, 15e46 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   15e40:	4620      	mov	r0, r4
   15e42:	f004 fab3 	bl	1a3ac <net_buf_unref>
}
   15e46:	4628      	mov	r0, r5
   15e48:	b002      	add	sp, #8
   15e4a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15e4c:	f06f 050b 	mvn.w	r5, #11
   15e50:	e7f9      	b.n	15e46 <bt_l2cap_update_conn_param+0x52>
   15e52:	bf00      	nop
   15e54:	2003026e 	.word	0x2003026e

00015e58 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   15e58:	2823      	cmp	r0, #35	; 0x23
   15e5a:	d81f      	bhi.n	15e9c <att_op_get_type+0x44>
   15e5c:	281a      	cmp	r0, #26
   15e5e:	d804      	bhi.n	15e6a <att_op_get_type+0x12>
   15e60:	1e43      	subs	r3, r0, #1
   15e62:	2b18      	cmp	r3, #24
   15e64:	d90e      	bls.n	15e84 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   15e66:	2006      	movs	r0, #6
   15e68:	4770      	bx	lr
	switch (op) {
   15e6a:	f1a0 031b 	sub.w	r3, r0, #27
   15e6e:	2b08      	cmp	r3, #8
   15e70:	d81e      	bhi.n	15eb0 <att_op_get_type+0x58>
   15e72:	e8df f003 	tbb	[pc, r3]
   15e76:	1d05      	.short	0x1d05
   15e78:	191d231b 	.word	0x191d231b
   15e7c:	1d25      	.short	0x1d25
   15e7e:	05          	.byte	0x05
   15e7f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   15e80:	2003      	movs	r0, #3
   15e82:	4770      	bx	lr
   15e84:	2301      	movs	r3, #1
	switch (op) {
   15e86:	4a0f      	ldr	r2, [pc, #60]	; (15ec4 <att_op_get_type+0x6c>)
   15e88:	4083      	lsls	r3, r0
   15e8a:	401a      	ands	r2, r3
   15e8c:	b9c2      	cbnz	r2, 15ec0 <att_op_get_type+0x68>
   15e8e:	4a0e      	ldr	r2, [pc, #56]	; (15ec8 <att_op_get_type+0x70>)
   15e90:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   15e92:	2a00      	cmp	r2, #0
   15e94:	bf14      	ite	ne
   15e96:	2001      	movne	r0, #1
   15e98:	2006      	moveq	r0, #6
   15e9a:	4770      	bx	lr
	switch (op) {
   15e9c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   15ea0:	2b52      	cmp	r3, #82	; 0x52
   15ea2:	d105      	bne.n	15eb0 <att_op_get_type+0x58>
		return ATT_COMMAND;
   15ea4:	2000      	movs	r0, #0
}
   15ea6:	4770      	bx	lr
		return ATT_REQUEST;
   15ea8:	2001      	movs	r0, #1
   15eaa:	4770      	bx	lr
		return ATT_INDICATION;
   15eac:	2005      	movs	r0, #5
   15eae:	4770      	bx	lr
		return ATT_COMMAND;
   15eb0:	f010 0f40 	tst.w	r0, #64	; 0x40
   15eb4:	bf0c      	ite	eq
   15eb6:	2006      	moveq	r0, #6
   15eb8:	2000      	movne	r0, #0
   15eba:	4770      	bx	lr
	switch (op) {
   15ebc:	2004      	movs	r0, #4
   15ebe:	4770      	bx	lr
		return ATT_RESPONSE;
   15ec0:	2002      	movs	r0, #2
   15ec2:	4770      	bx	lr
   15ec4:	028aaaaa 	.word	0x028aaaaa
   15ec8:	01455554 	.word	0x01455554

00015ecc <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15ecc:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15ece:	3804      	subs	r0, #4
   15ed0:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   15ed2:	a901      	add	r1, sp, #4
   15ed4:	4802      	ldr	r0, [pc, #8]	; (15ee0 <bt_att_released+0x14>)
   15ed6:	f00a fb8f 	bl	205f8 <k_mem_slab_free>
}
   15eda:	b003      	add	sp, #12
   15edc:	f85d fb04 	ldr.w	pc, [sp], #4
   15ee0:	20008a8c 	.word	0x20008a8c

00015ee4 <tx_meta_data_free>:
{
   15ee4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   15ee6:	4604      	mov	r4, r0
   15ee8:	b948      	cbnz	r0, 15efe <tx_meta_data_free+0x1a>
   15eea:	490a      	ldr	r1, [pc, #40]	; (15f14 <tx_meta_data_free+0x30>)
   15eec:	480a      	ldr	r0, [pc, #40]	; (15f18 <tx_meta_data_free+0x34>)
   15eee:	23a6      	movs	r3, #166	; 0xa6
   15ef0:	4a0a      	ldr	r2, [pc, #40]	; (15f1c <tx_meta_data_free+0x38>)
   15ef2:	f011 fb7e 	bl	275f2 <assert_print>
   15ef6:	21a6      	movs	r1, #166	; 0xa6
   15ef8:	4808      	ldr	r0, [pc, #32]	; (15f1c <tx_meta_data_free+0x38>)
   15efa:	f011 fb73 	bl	275e4 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   15efe:	2100      	movs	r1, #0
   15f00:	2214      	movs	r2, #20
   15f02:	f016 f91d 	bl	2c140 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   15f06:	4621      	mov	r1, r4
}
   15f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   15f0c:	4804      	ldr	r0, [pc, #16]	; (15f20 <tx_meta_data_free+0x3c>)
   15f0e:	f015 bf0d 	b.w	2bd2c <k_queue_append>
   15f12:	bf00      	nop
   15f14:	00031427 	.word	0x00031427
   15f18:	0002e715 	.word	0x0002e715
   15f1c:	000318cf 	.word	0x000318cf
   15f20:	20008c5c 	.word	0x20008c5c

00015f24 <find_type_cb>:
{
   15f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15f28:	f642 0301 	movw	r3, #10241	; 0x2801
   15f2c:	2500      	movs	r5, #0
{
   15f2e:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   15f30:	f8d2 9000 	ldr.w	r9, [r2]
{
   15f34:	4607      	mov	r7, r0
   15f36:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15f38:	6800      	ldr	r0, [r0, #0]
   15f3a:	a90d      	add	r1, sp, #52	; 0x34
	struct bt_conn *conn = chan->chan.chan.conn;
   15f3c:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
   15f40:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15f42:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   15f46:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   15f4a:	f012 fc32 	bl	287b2 <bt_uuid_cmp>
   15f4e:	2800      	cmp	r0, #0
   15f50:	d067      	beq.n	16022 <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   15f52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15f56:	6838      	ldr	r0, [r7, #0]
   15f58:	a90d      	add	r1, sp, #52	; 0x34
   15f5a:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   15f5e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   15f62:	f012 fc26 	bl	287b2 <bt_uuid_cmp>
   15f66:	b138      	cbz	r0, 15f78 <find_type_cb+0x54>
		if (data->group &&
   15f68:	68a3      	ldr	r3, [r4, #8]
   15f6a:	b11b      	cbz	r3, 15f74 <find_type_cb+0x50>
   15f6c:	885a      	ldrh	r2, [r3, #2]
   15f6e:	42b2      	cmp	r2, r6
   15f70:	d200      	bcs.n	15f74 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   15f72:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15f74:	2001      	movs	r0, #1
   15f76:	e009      	b.n	15f8c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   15f78:	6861      	ldr	r1, [r4, #4]
   15f7a:	4608      	mov	r0, r1
   15f7c:	f013 f91f 	bl	291be <net_buf_frags_len>
   15f80:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   15f84:	1a1b      	subs	r3, r3, r0
   15f86:	2b03      	cmp	r3, #3
   15f88:	d803      	bhi.n	15f92 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   15f8a:	2000      	movs	r0, #0
}
   15f8c:	b013      	add	sp, #76	; 0x4c
   15f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   15f92:	4608      	mov	r0, r1
   15f94:	f004 fa66 	bl	1a464 <net_buf_frag_last>
   15f98:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   15f9a:	6860      	ldr	r0, [r4, #4]
   15f9c:	f013 f90f 	bl	291be <net_buf_frags_len>
   15fa0:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   15fa4:	f105 0b0c 	add.w	fp, r5, #12
   15fa8:	ebaa 0a00 	sub.w	sl, sl, r0
   15fac:	4658      	mov	r0, fp
   15fae:	f014 fb06 	bl	2a5be <net_buf_simple_tailroom>
   15fb2:	4582      	cmp	sl, r0
   15fb4:	d238      	bcs.n	16028 <find_type_cb+0x104>
   15fb6:	6860      	ldr	r0, [r4, #4]
   15fb8:	f013 f901 	bl	291be <net_buf_frags_len>
   15fbc:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   15fc0:	1a18      	subs	r0, r3, r0
	if (!len) {
   15fc2:	b970      	cbnz	r0, 15fe2 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   15fc4:	6863      	ldr	r3, [r4, #4]
   15fc6:	7a98      	ldrb	r0, [r3, #10]
   15fc8:	f003 ffb6 	bl	19f38 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   15fcc:	2200      	movs	r2, #0
   15fce:	2300      	movs	r3, #0
   15fd0:	f014 fadb 	bl	2a58a <net_buf_alloc_fixed>
		if (!frag) {
   15fd4:	4605      	mov	r5, r0
   15fd6:	2800      	cmp	r0, #0
   15fd8:	d0d7      	beq.n	15f8a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   15fda:	4601      	mov	r1, r0
   15fdc:	6860      	ldr	r0, [r4, #4]
   15fde:	f004 fa87 	bl	1a4f0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   15fe2:	2300      	movs	r3, #0
   15fe4:	9300      	str	r3, [sp, #0]
   15fe6:	2310      	movs	r3, #16
   15fe8:	4639      	mov	r1, r7
   15fea:	f8d7 9004 	ldr.w	r9, [r7, #4]
   15fee:	4640      	mov	r0, r8
   15ff0:	eb0d 0203 	add.w	r2, sp, r3
   15ff4:	47c8      	blx	r9
	if (read < 0) {
   15ff6:	1e07      	subs	r7, r0, #0
   15ff8:	db13      	blt.n	16022 <find_type_cb+0xfe>
	if (read != data->value_len) {
   15ffa:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15ffc:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   15ffe:	42ba      	cmp	r2, r7
   16000:	d031      	beq.n	16066 <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   16002:	4601      	mov	r1, r0
   16004:	a80d      	add	r0, sp, #52	; 0x34
   16006:	f012 fc02 	bl	2880e <bt_uuid_create>
   1600a:	4603      	mov	r3, r0
   1600c:	b980      	cbnz	r0, 16030 <find_type_cb+0x10c>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1600e:	7c22      	ldrb	r2, [r4, #16]
   16010:	9203      	str	r2, [sp, #12]
   16012:	4a17      	ldr	r2, [pc, #92]	; (16070 <find_type_cb+0x14c>)
			LOG_WRN("Unable to create UUID: size %d", read);
   16014:	e9cd 3201 	strd	r3, r2, [sp, #4]
   16018:	4916      	ldr	r1, [pc, #88]	; (16074 <find_type_cb+0x150>)
   1601a:	2202      	movs	r2, #2
   1601c:	9300      	str	r3, [sp, #0]
   1601e:	f013 f9bd 	bl	2939c <z_log_msg_runtime_create.constprop.0>
	data->group = NULL;
   16022:	2300      	movs	r3, #0
   16024:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   16026:	e7a5      	b.n	15f74 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   16028:	4658      	mov	r0, fp
   1602a:	f014 fac8 	bl	2a5be <net_buf_simple_tailroom>
   1602e:	e7c8      	b.n	15fc2 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   16030:	b2fa      	uxtb	r2, r7
   16032:	a904      	add	r1, sp, #16
   16034:	a808      	add	r0, sp, #32
   16036:	f012 fbea 	bl	2880e <bt_uuid_create>
   1603a:	4603      	mov	r3, r0
   1603c:	b910      	cbnz	r0, 16044 <find_type_cb+0x120>
			LOG_WRN("Unable to create UUID: size %d", read);
   1603e:	4a0e      	ldr	r2, [pc, #56]	; (16078 <find_type_cb+0x154>)
   16040:	9703      	str	r7, [sp, #12]
   16042:	e7e7      	b.n	16014 <find_type_cb+0xf0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   16044:	a908      	add	r1, sp, #32
   16046:	a80d      	add	r0, sp, #52	; 0x34
   16048:	f012 fbb3 	bl	287b2 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1604c:	2800      	cmp	r0, #0
   1604e:	d1e8      	bne.n	16022 <find_type_cb+0xfe>
	data->err = 0x00;
   16050:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   16052:	2104      	movs	r1, #4
   16054:	7463      	strb	r3, [r4, #17]
   16056:	f105 000c 	add.w	r0, r5, #12
   1605a:	f004 fac9 	bl	1a5f0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1605e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16060:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16062:	68a3      	ldr	r3, [r4, #8]
   16064:	e785      	b.n	15f72 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   16066:	a904      	add	r1, sp, #16
   16068:	f016 f820 	bl	2c0ac <memcmp>
   1606c:	e7ee      	b.n	1604c <find_type_cb+0x128>
   1606e:	bf00      	nop
   16070:	000318fe 	.word	0x000318fe
   16074:	0002d61c 	.word	0x0002d61c
   16078:	0003191d 	.word	0x0003191d

0001607c <chan_send>:
{
   1607c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16080:	4606      	mov	r6, r0
   16082:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   16084:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   16088:	68cb      	ldr	r3, [r1, #12]
{
   1608a:	b085      	sub	sp, #20
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1608c:	2102      	movs	r1, #2
   1608e:	3098      	adds	r0, #152	; 0x98
   16090:	f013 f8af 	bl	291f2 <atomic_test_bit>
   16094:	2800      	cmp	r0, #0
   16096:	d053      	beq.n	16140 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16098:	781b      	ldrb	r3, [r3, #0]
   1609a:	2bd2      	cmp	r3, #210	; 0xd2
   1609c:	d11a      	bne.n	160d4 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   1609e:	6833      	ldr	r3, [r6, #0]
   160a0:	4621      	mov	r1, r4
   160a2:	6818      	ldr	r0, [r3, #0]
   160a4:	f014 f952 	bl	2a34c <bt_smp_sign>
		if (err) {
   160a8:	4605      	mov	r5, r0
   160aa:	b198      	cbz	r0, 160d4 <chan_send+0x58>
			LOG_ERR("Error signing data");
   160ac:	4b26      	ldr	r3, [pc, #152]	; (16148 <chan_send+0xcc>)
   160ae:	2201      	movs	r2, #1
   160b0:	9302      	str	r3, [sp, #8]
   160b2:	2300      	movs	r3, #0
   160b4:	4925      	ldr	r1, [pc, #148]	; (1614c <chan_send+0xd0>)
   160b6:	4618      	mov	r0, r3
   160b8:	e9cd 3300 	strd	r3, r3, [sp]
   160bc:	f013 f96e 	bl	2939c <z_log_msg_runtime_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   160c0:	69a0      	ldr	r0, [r4, #24]
   160c2:	f7ff ff0f 	bl	15ee4 <tx_meta_data_free>
			net_buf_unref(buf);
   160c6:	4620      	mov	r0, r4
   160c8:	f004 f970 	bl	1a3ac <net_buf_unref>
}
   160cc:	4628      	mov	r0, r5
   160ce:	b005      	add	sp, #20
   160d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   160d4:	f104 000c 	add.w	r0, r4, #12
   160d8:	f014 fa6d 	bl	2a5b6 <net_buf_simple_headroom>
	state->len = buf->len;
   160dc:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   160e0:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   160e4:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   160e6:	4607      	mov	r7, r0
   160e8:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   160ea:	68e3      	ldr	r3, [r4, #12]
   160ec:	7818      	ldrb	r0, [r3, #0]
   160ee:	f7ff feb3 	bl	15e58 <att_op_get_type>
   160f2:	2805      	cmp	r0, #5
   160f4:	4605      	mov	r5, r0
	switch (op_type) {
   160f6:	d813      	bhi.n	16120 <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   160f8:	4b15      	ldr	r3, [pc, #84]	; (16150 <chan_send+0xd4>)
   160fa:	4622      	mov	r2, r4
   160fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   16100:	2104      	movs	r1, #4
   16102:	4630      	mov	r0, r6
   16104:	f8cd 9000 	str.w	r9, [sp]
   16108:	f013 f823 	bl	29152 <bt_l2cap_send_cb>
	if (err) {
   1610c:	4605      	mov	r5, r0
   1610e:	2800      	cmp	r0, #0
   16110:	d0dc      	beq.n	160cc <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   16112:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   16114:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   16118:	fa13 f787 	uxtah	r7, r3, r7
   1611c:	60e7      	str	r7, [r4, #12]
}
   1611e:	e7d5      	b.n	160cc <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   16120:	f240 2357 	movw	r3, #599	; 0x257
   16124:	4a0b      	ldr	r2, [pc, #44]	; (16154 <chan_send+0xd8>)
   16126:	490c      	ldr	r1, [pc, #48]	; (16158 <chan_send+0xdc>)
   16128:	480c      	ldr	r0, [pc, #48]	; (1615c <chan_send+0xe0>)
   1612a:	f011 fa62 	bl	275f2 <assert_print>
   1612e:	4629      	mov	r1, r5
   16130:	480b      	ldr	r0, [pc, #44]	; (16160 <chan_send+0xe4>)
   16132:	f011 fa5e 	bl	275f2 <assert_print>
   16136:	f240 2157 	movw	r1, #599	; 0x257
   1613a:	4806      	ldr	r0, [pc, #24]	; (16154 <chan_send+0xd8>)
   1613c:	f011 fa52 	bl	275e4 <assert_post_action>
		return -EINVAL;
   16140:	f06f 0515 	mvn.w	r5, #21
   16144:	e7c2      	b.n	160cc <chan_send+0x50>
   16146:	bf00      	nop
   16148:	0003193c 	.word	0x0003193c
   1614c:	0002d61c 	.word	0x0002d61c
   16150:	0002e010 	.word	0x0002e010
   16154:	000318cf 	.word	0x000318cf
   16158:	00033fc0 	.word	0x00033fc0
   1615c:	0002e715 	.word	0x0002e715
   16160:	0003194f 	.word	0x0003194f

00016164 <bt_att_chan_req_send>:
{
   16164:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   16166:	b958      	cbnz	r0, 16180 <bt_att_chan_req_send+0x1c>
   16168:	4919      	ldr	r1, [pc, #100]	; (161d0 <bt_att_chan_req_send+0x6c>)
   1616a:	f44f 7346 	mov.w	r3, #792	; 0x318
   1616e:	4a19      	ldr	r2, [pc, #100]	; (161d4 <bt_att_chan_req_send+0x70>)
   16170:	4819      	ldr	r0, [pc, #100]	; (161d8 <bt_att_chan_req_send+0x74>)
   16172:	f011 fa3e 	bl	275f2 <assert_print>
   16176:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   1617a:	4816      	ldr	r0, [pc, #88]	; (161d4 <bt_att_chan_req_send+0x70>)
   1617c:	f011 fa32 	bl	275e4 <assert_post_action>
   16180:	b949      	cbnz	r1, 16196 <bt_att_chan_req_send+0x32>
   16182:	4916      	ldr	r1, [pc, #88]	; (161dc <bt_att_chan_req_send+0x78>)
   16184:	f240 3319 	movw	r3, #793	; 0x319
   16188:	4a12      	ldr	r2, [pc, #72]	; (161d4 <bt_att_chan_req_send+0x70>)
   1618a:	4813      	ldr	r0, [pc, #76]	; (161d8 <bt_att_chan_req_send+0x74>)
   1618c:	f011 fa31 	bl	275f2 <assert_print>
   16190:	f240 3119 	movw	r1, #793	; 0x319
   16194:	e7f1      	b.n	1617a <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   16196:	684a      	ldr	r2, [r1, #4]
   16198:	b94a      	cbnz	r2, 161ae <bt_att_chan_req_send+0x4a>
   1619a:	4911      	ldr	r1, [pc, #68]	; (161e0 <bt_att_chan_req_send+0x7c>)
   1619c:	f240 331a 	movw	r3, #794	; 0x31a
   161a0:	4a0c      	ldr	r2, [pc, #48]	; (161d4 <bt_att_chan_req_send+0x70>)
   161a2:	480d      	ldr	r0, [pc, #52]	; (161d8 <bt_att_chan_req_send+0x74>)
   161a4:	f011 fa25 	bl	275f2 <assert_print>
   161a8:	f240 311a 	movw	r1, #794	; 0x31a
   161ac:	e7e5      	b.n	1617a <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   161ae:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   161b2:	b14b      	cbz	r3, 161c8 <bt_att_chan_req_send+0x64>
   161b4:	490b      	ldr	r1, [pc, #44]	; (161e4 <bt_att_chan_req_send+0x80>)
   161b6:	f240 331b 	movw	r3, #795	; 0x31b
   161ba:	4a06      	ldr	r2, [pc, #24]	; (161d4 <bt_att_chan_req_send+0x70>)
   161bc:	4806      	ldr	r0, [pc, #24]	; (161d8 <bt_att_chan_req_send+0x74>)
   161be:	f011 fa18 	bl	275f2 <assert_print>
   161c2:	f240 311b 	movw	r1, #795	; 0x31b
   161c6:	e7d8      	b.n	1617a <bt_att_chan_req_send+0x16>
}
   161c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   161cc:	f013 b8f5 	b.w	293ba <chan_req_send>
   161d0:	00031968 	.word	0x00031968
   161d4:	000318cf 	.word	0x000318cf
   161d8:	0002e715 	.word	0x0002e715
   161dc:	0003197e 	.word	0x0003197e
   161e0:	0003196d 	.word	0x0003196d
   161e4:	00031977 	.word	0x00031977

000161e8 <att_get>:
{
   161e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   161ea:	7b43      	ldrb	r3, [r0, #13]
   161ec:	2b07      	cmp	r3, #7
   161ee:	d00d      	beq.n	1620c <att_get+0x24>
		LOG_WRN("Not connected");
   161f0:	4b18      	ldr	r3, [pc, #96]	; (16254 <att_get+0x6c>)
   161f2:	2202      	movs	r2, #2
   161f4:	9302      	str	r3, [sp, #8]
   161f6:	2300      	movs	r3, #0
   161f8:	4618      	mov	r0, r3
   161fa:	e9cd 3300 	strd	r3, r3, [sp]
   161fe:	4916      	ldr	r1, [pc, #88]	; (16258 <att_get+0x70>)
		LOG_ERR("Unable to find ATT channel");
   16200:	f013 f8cc 	bl	2939c <z_log_msg_runtime_create.constprop.0>
		return NULL;
   16204:	2000      	movs	r0, #0
}
   16206:	b005      	add	sp, #20
   16208:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1620c:	2104      	movs	r1, #4
   1620e:	f012 ffc2 	bl	29196 <bt_l2cap_le_lookup_rx_cid>
   16212:	4603      	mov	r3, r0
	if (!chan) {
   16214:	b930      	cbnz	r0, 16224 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   16216:	4a11      	ldr	r2, [pc, #68]	; (1625c <att_get+0x74>)
   16218:	490f      	ldr	r1, [pc, #60]	; (16258 <att_get+0x70>)
   1621a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1621e:	9000      	str	r0, [sp, #0]
   16220:	2201      	movs	r2, #1
   16222:	e7ed      	b.n	16200 <att_get+0x18>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   16224:	2102      	movs	r1, #2
   16226:	3094      	adds	r0, #148	; 0x94
   16228:	f012 ffe3 	bl	291f2 <atomic_test_bit>
   1622c:	b970      	cbnz	r0, 1624c <att_get+0x64>
   1622e:	490c      	ldr	r1, [pc, #48]	; (16260 <att_get+0x78>)
   16230:	f640 332a 	movw	r3, #2858	; 0xb2a
   16234:	4a0b      	ldr	r2, [pc, #44]	; (16264 <att_get+0x7c>)
   16236:	480c      	ldr	r0, [pc, #48]	; (16268 <att_get+0x80>)
   16238:	f011 f9db 	bl	275f2 <assert_print>
   1623c:	480b      	ldr	r0, [pc, #44]	; (1626c <att_get+0x84>)
   1623e:	f011 f9d8 	bl	275f2 <assert_print>
   16242:	f640 312a 	movw	r1, #2858	; 0xb2a
   16246:	4807      	ldr	r0, [pc, #28]	; (16264 <att_get+0x7c>)
   16248:	f011 f9cc 	bl	275e4 <assert_post_action>
	return att_chan->att;
   1624c:	f853 0c04 	ldr.w	r0, [r3, #-4]
   16250:	e7d9      	b.n	16206 <att_get+0x1e>
   16252:	bf00      	nop
   16254:	00031982 	.word	0x00031982
   16258:	0002d61c 	.word	0x0002d61c
   1625c:	00031990 	.word	0x00031990
   16260:	000319ab 	.word	0x000319ab
   16264:	000318cf 	.word	0x000318cf
   16268:	0002e715 	.word	0x0002e715
   1626c:	000319db 	.word	0x000319db

00016270 <bt_att_connected>:
{
   16270:	b510      	push	{r4, lr}
   16272:	4604      	mov	r4, r0
   16274:	f100 0394 	add.w	r3, r0, #148	; 0x94
   16278:	e8d3 1fef 	ldaex	r1, [r3]
   1627c:	f041 0104 	orr.w	r1, r1, #4
   16280:	e8c3 1fe2 	stlex	r2, r1, [r3]
   16284:	2a00      	cmp	r2, #0
   16286:	d1f7      	bne.n	16278 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16288:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   1628a:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1628c:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1628e:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   16290:	f012 fff1 	bl	29276 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16294:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   16298:	4903      	ldr	r1, [pc, #12]	; (162a8 <bt_att_connected+0x38>)
   1629a:	f00b fa69 	bl	21770 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1629e:	6820      	ldr	r0, [r4, #0]
}
   162a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   162a4:	f001 bf04 	b.w	180b0 <bt_gatt_connected>
   162a8:	00016f05 	.word	0x00016f05

000162ac <read_group_cb>:
{
   162ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   162b0:	f04f 0800 	mov.w	r8, #0
   162b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   162b8:	4605      	mov	r5, r0
   162ba:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   162bc:	6800      	ldr	r0, [r0, #0]
   162be:	a902      	add	r1, sp, #8
{
   162c0:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   162c2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   162c4:	f88d 8008 	strb.w	r8, [sp, #8]
   162c8:	f8ad 300a 	strh.w	r3, [sp, #10]
   162cc:	f012 fa71 	bl	287b2 <bt_uuid_cmp>
   162d0:	b1a0      	cbz	r0, 162fc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   162d2:	f642 0301 	movw	r3, #10241	; 0x2801
   162d6:	6828      	ldr	r0, [r5, #0]
   162d8:	a903      	add	r1, sp, #12
   162da:	f88d 800c 	strb.w	r8, [sp, #12]
   162de:	f8ad 300e 	strh.w	r3, [sp, #14]
   162e2:	f012 fa66 	bl	287b2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   162e6:	b148      	cbz	r0, 162fc <read_group_cb+0x50>
		if (data->group &&
   162e8:	6923      	ldr	r3, [r4, #16]
   162ea:	b11b      	cbz	r3, 162f4 <read_group_cb+0x48>
   162ec:	885a      	ldrh	r2, [r3, #2]
   162ee:	42b2      	cmp	r2, r6
   162f0:	d200      	bcs.n	162f4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   162f2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   162f4:	2001      	movs	r0, #1
}
   162f6:	b004      	add	sp, #16
   162f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   162fc:	6861      	ldr	r1, [r4, #4]
   162fe:	6828      	ldr	r0, [r5, #0]
   16300:	f012 fa57 	bl	287b2 <bt_uuid_cmp>
   16304:	b110      	cbz	r0, 1630c <read_group_cb+0x60>
		data->group = NULL;
   16306:	2300      	movs	r3, #0
   16308:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1630a:	e7f3      	b.n	162f4 <read_group_cb+0x48>
	if (data->rsp->len &&
   1630c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1630e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   16310:	781a      	ldrb	r2, [r3, #0]
   16312:	b132      	cbz	r2, 16322 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16314:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   16316:	8a01      	ldrh	r1, [r0, #16]
   16318:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1631a:	4293      	cmp	r3, r2
   1631c:	da01      	bge.n	16322 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1631e:	2000      	movs	r0, #0
   16320:	e7e9      	b.n	162f6 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   16322:	2104      	movs	r1, #4
   16324:	300c      	adds	r0, #12
   16326:	f004 f963 	bl	1a5f0 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1632a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1632c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1632e:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16330:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   16332:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16334:	4b07      	ldr	r3, [pc, #28]	; (16354 <read_group_cb+0xa8>)
   16336:	9401      	str	r4, [sp, #4]
   16338:	9300      	str	r3, [sp, #0]
   1633a:	4638      	mov	r0, r7
   1633c:	2300      	movs	r3, #0
   1633e:	68a2      	ldr	r2, [r4, #8]
   16340:	f013 f87c 	bl	2943c <att_chan_read>
	if (read < 0) {
   16344:	2800      	cmp	r0, #0
   16346:	dbea      	blt.n	1631e <read_group_cb+0x72>
	if (!data->group) {
   16348:	6920      	ldr	r0, [r4, #16]
   1634a:	3800      	subs	r0, #0
   1634c:	bf18      	it	ne
   1634e:	2001      	movne	r0, #1
   16350:	e7d1      	b.n	162f6 <read_group_cb+0x4a>
   16352:	bf00      	nop
   16354:	000292dd 	.word	0x000292dd

00016358 <read_type_cb>:
{
   16358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1635c:	6817      	ldr	r7, [r2, #0]
{
   1635e:	4605      	mov	r5, r0
   16360:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16362:	6800      	ldr	r0, [r0, #0]
   16364:	6851      	ldr	r1, [r2, #4]
{
   16366:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   16368:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1636a:	f012 fa22 	bl	287b2 <bt_uuid_cmp>
   1636e:	4681      	mov	r9, r0
   16370:	2800      	cmp	r0, #0
   16372:	d13c      	bne.n	163ee <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16374:	4630      	mov	r0, r6
   16376:	2295      	movs	r2, #149	; 0x95
   16378:	4629      	mov	r1, r5
   1637a:	f013 fd25 	bl	29dc8 <bt_gatt_check_perm>
   1637e:	4606      	mov	r6, r0
   16380:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16382:	b140      	cbz	r0, 16396 <read_type_cb+0x3e>
		if (data->rsp->len) {
   16384:	68e3      	ldr	r3, [r4, #12]
   16386:	781b      	ldrb	r3, [r3, #0]
   16388:	b10b      	cbz	r3, 1638e <read_type_cb+0x36>
			data->err = 0x00;
   1638a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1638e:	2000      	movs	r0, #0
}
   16390:	b003      	add	sp, #12
   16392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16396:	68a0      	ldr	r0, [r4, #8]
   16398:	f004 f864 	bl	1a464 <net_buf_frag_last>
   1639c:	2102      	movs	r1, #2
   1639e:	300c      	adds	r0, #12
   163a0:	f004 f926 	bl	1a5f0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   163a4:	4b13      	ldr	r3, [pc, #76]	; (163f4 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   163a6:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   163a8:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   163ac:	9300      	str	r3, [sp, #0]
   163ae:	9401      	str	r4, [sp, #4]
   163b0:	4633      	mov	r3, r6
   163b2:	4629      	mov	r1, r5
   163b4:	4638      	mov	r0, r7
   163b6:	68a2      	ldr	r2, [r4, #8]
   163b8:	f013 f840 	bl	2943c <att_chan_read>
	if (read < 0) {
   163bc:	2800      	cmp	r0, #0
   163be:	da07      	bge.n	163d0 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   163c0:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   163c4:	bf32      	itee	cc
   163c6:	200e      	movcc	r0, #14
		return -err;
   163c8:	4240      	negcs	r0, r0
   163ca:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   163cc:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   163ce:	e7de      	b.n	1638e <read_type_cb+0x36>
	if (!data->item) {
   163d0:	6923      	ldr	r3, [r4, #16]
   163d2:	2b00      	cmp	r3, #0
   163d4:	d0db      	beq.n	1638e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   163d6:	68a0      	ldr	r0, [r4, #8]
   163d8:	f012 fef1 	bl	291be <net_buf_frags_len>
   163dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   163de:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   163e0:	68e3      	ldr	r3, [r4, #12]
   163e2:	781b      	ldrb	r3, [r3, #0]
   163e4:	4298      	cmp	r0, r3
   163e6:	bf94      	ite	ls
   163e8:	2000      	movls	r0, #0
   163ea:	2001      	movhi	r0, #1
   163ec:	e7d0      	b.n	16390 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   163ee:	2001      	movs	r0, #1
   163f0:	e7ce      	b.n	16390 <read_type_cb+0x38>
   163f2:	bf00      	nop
   163f4:	000291cf 	.word	0x000291cf

000163f8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   163f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   163fa:	b087      	sub	sp, #28
   163fc:	4604      	mov	r4, r0
   163fe:	460f      	mov	r7, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16400:	2200      	movs	r2, #0
   16402:	2300      	movs	r3, #0
   16404:	4831      	ldr	r0, [pc, #196]	; (164cc <bt_att_accept+0xd4>)
   16406:	a904      	add	r1, sp, #16
   16408:	f00a f88c 	bl	20524 <k_mem_slab_alloc>
   1640c:	4605      	mov	r5, r0
   1640e:	b178      	cbz	r0, 16430 <bt_att_accept+0x38>
		LOG_ERR("No available ATT context for conn %p", conn);
   16410:	4b2f      	ldr	r3, [pc, #188]	; (164d0 <bt_att_accept+0xd8>)
   16412:	2201      	movs	r2, #1
   16414:	9302      	str	r3, [sp, #8]
   16416:	2300      	movs	r3, #0
   16418:	e9cd 3300 	strd	r3, r3, [sp]
   1641c:	9403      	str	r4, [sp, #12]
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1641e:	4618      	mov	r0, r3
   16420:	492c      	ldr	r1, [pc, #176]	; (164d4 <bt_att_accept+0xdc>)
   16422:	f012 ffbb 	bl	2939c <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   16426:	f06f 060b 	mvn.w	r6, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1642a:	4630      	mov	r0, r6
   1642c:	b007      	add	sp, #28
   1642e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   16430:	f00c fc42 	bl	22cb8 <z_impl_z_current_get>
	(void)memset(att, 0, sizeof(*att));
   16434:	9e04      	ldr	r6, [sp, #16]
	att_handle_rsp_thread = k_current_get();
   16436:	4b28      	ldr	r3, [pc, #160]	; (164d8 <bt_att_accept+0xe0>)
   16438:	222c      	movs	r2, #44	; 0x2c
   1643a:	6018      	str	r0, [r3, #0]
   1643c:	4629      	mov	r1, r5
   1643e:	1d30      	adds	r0, r6, #4
   16440:	f015 fe7e 	bl	2c140 <memset>
	att->conn = conn;
   16444:	6034      	str	r4, [r6, #0]
	sys_slist_init(&att->reqs);
   16446:	9c04      	ldr	r4, [sp, #16]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16448:	2200      	movs	r2, #0
   1644a:	2300      	movs	r3, #0
	list->tail = NULL;
   1644c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   16450:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   16454:	4821      	ldr	r0, [pc, #132]	; (164dc <bt_att_accept+0xe4>)
   16456:	a905      	add	r1, sp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16458:	9505      	str	r5, [sp, #20]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1645a:	f00a f863 	bl	20524 <k_mem_slab_alloc>
   1645e:	4606      	mov	r6, r0
   16460:	b140      	cbz	r0, 16474 <bt_att_accept+0x7c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   16462:	6823      	ldr	r3, [r4, #0]
   16464:	2202      	movs	r2, #2
   16466:	9303      	str	r3, [sp, #12]
   16468:	4b1d      	ldr	r3, [pc, #116]	; (164e0 <bt_att_accept+0xe8>)
   1646a:	9500      	str	r5, [sp, #0]
   1646c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   16470:	462b      	mov	r3, r5
   16472:	e7d4      	b.n	1641e <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   16474:	9b05      	ldr	r3, [sp, #20]
   16476:	4601      	mov	r1, r0
   16478:	22f8      	movs	r2, #248	; 0xf8
   1647a:	4618      	mov	r0, r3
   1647c:	f015 fe60 	bl	2c140 <memset>
	chan->chan.chan.ops = &ops;
   16480:	4a18      	ldr	r2, [pc, #96]	; (164e4 <bt_att_accept+0xec>)
   16482:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   16484:	30a0      	adds	r0, #160	; 0xa0
   16486:	f015 fc44 	bl	2bd12 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1648a:	9b05      	ldr	r3, [sp, #20]
   1648c:	3398      	adds	r3, #152	; 0x98
   1648e:	e8d3 2fef 	ldaex	r2, [r3]
   16492:	e8c3 6fe1 	stlex	r1, r6, [r3]
   16496:	2900      	cmp	r1, #0
   16498:	d1f9      	bne.n	1648e <bt_att_accept+0x96>
	chan->att = att;
   1649a:	9b05      	ldr	r3, [sp, #20]
   1649c:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1649e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   164a0:	9d05      	ldr	r5, [sp, #20]
	if (sys_slist_is_empty(&att->chans)) {
   164a2:	b91b      	cbnz	r3, 164ac <bt_att_accept+0xb4>
   164a4:	f104 000c 	add.w	r0, r4, #12
   164a8:	f015 fc33 	bl	2bd12 <z_impl_k_queue_init>
	return list->head;
   164ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   164ae:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
	parent->next = child;
   164b2:	f8c5 20f0 	str.w	r2, [r5, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   164b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   164b8:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   164ba:	b902      	cbnz	r2, 164be <bt_att_accept+0xc6>
	list->tail = node;
   164bc:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   164be:	9b05      	ldr	r3, [sp, #20]
	if (!chan) {
   164c0:	2b00      	cmp	r3, #0
   164c2:	d0b0      	beq.n	16426 <bt_att_accept+0x2e>
	*ch = &chan->chan.chan;
   164c4:	3304      	adds	r3, #4
   164c6:	603b      	str	r3, [r7, #0]
	return 0;
   164c8:	e7af      	b.n	1642a <bt_att_accept+0x32>
   164ca:	bf00      	nop
   164cc:	20008a6c 	.word	0x20008a6c
   164d0:	000319f7 	.word	0x000319f7
   164d4:	0002d61c 	.word	0x0002d61c
   164d8:	2002f368 	.word	0x2002f368
   164dc:	20008a8c 	.word	0x20008a8c
   164e0:	00031a1c 	.word	0x00031a1c
   164e4:	20008520 	.word	0x20008520

000164e8 <bt_att_chan_create_pdu>:
{
   164e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   164ea:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   164ec:	3201      	adds	r2, #1
   164ee:	429a      	cmp	r2, r3
{
   164f0:	460d      	mov	r5, r1
   164f2:	b087      	sub	sp, #28
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   164f4:	d90f      	bls.n	16516 <bt_att_chan_create_pdu+0x2e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   164f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
   164fa:	4b25      	ldr	r3, [pc, #148]	; (16590 <bt_att_chan_create_pdu+0xa8>)
   164fc:	2202      	movs	r2, #2
   164fe:	9302      	str	r3, [sp, #8]
   16500:	2300      	movs	r3, #0
   16502:	4924      	ldr	r1, [pc, #144]	; (16594 <bt_att_chan_create_pdu+0xac>)
   16504:	4618      	mov	r0, r3
   16506:	e9cd 3300 	strd	r3, r3, [sp]
   1650a:	f012 ff47 	bl	2939c <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1650e:	2400      	movs	r4, #0
}
   16510:	4620      	mov	r0, r4
   16512:	b007      	add	sp, #28
   16514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   16516:	4608      	mov	r0, r1
   16518:	f7ff fc9e 	bl	15e58 <att_op_get_type>
   1651c:	2802      	cmp	r0, #2
   1651e:	d018      	beq.n	16552 <bt_att_chan_create_pdu+0x6a>
   16520:	2804      	cmp	r0, #4
   16522:	d016      	beq.n	16552 <bt_att_chan_create_pdu+0x6a>
		timeout = K_FOREVER;
   16524:	f04f 36ff 	mov.w	r6, #4294967295
   16528:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1652c:	2100      	movs	r1, #0
   1652e:	4632      	mov	r2, r6
   16530:	463b      	mov	r3, r7
   16532:	4608      	mov	r0, r1
   16534:	f012 fe0a 	bl	2914c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   16538:	4604      	mov	r4, r0
   1653a:	b970      	cbnz	r0, 1655a <bt_att_chan_create_pdu+0x72>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1653c:	4b16      	ldr	r3, [pc, #88]	; (16598 <bt_att_chan_create_pdu+0xb0>)
   1653e:	2201      	movs	r2, #1
   16540:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16544:	4913      	ldr	r1, [pc, #76]	; (16594 <bt_att_chan_create_pdu+0xac>)
   16546:	4603      	mov	r3, r0
   16548:	9503      	str	r5, [sp, #12]
   1654a:	9000      	str	r0, [sp, #0]
   1654c:	f012 ff26 	bl	2939c <z_log_msg_runtime_create.constprop.0>
		return NULL;
   16550:	e7dd      	b.n	1650e <bt_att_chan_create_pdu+0x26>
	switch (att_op_get_type(op)) {
   16552:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   16556:	2700      	movs	r7, #0
   16558:	e7e8      	b.n	1652c <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   1655a:	4810      	ldr	r0, [pc, #64]	; (1659c <bt_att_chan_create_pdu+0xb4>)
   1655c:	463b      	mov	r3, r7
   1655e:	4632      	mov	r2, r6
   16560:	f00a fc18 	bl	20d94 <z_impl_k_queue_get>
   16564:	4603      	mov	r3, r0
	if (!data) {
   16566:	b958      	cbnz	r0, 16580 <bt_att_chan_create_pdu+0x98>
		LOG_WRN("Unable to allocate ATT TX meta");
   16568:	4a0d      	ldr	r2, [pc, #52]	; (165a0 <bt_att_chan_create_pdu+0xb8>)
   1656a:	9000      	str	r0, [sp, #0]
   1656c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   16570:	4908      	ldr	r1, [pc, #32]	; (16594 <bt_att_chan_create_pdu+0xac>)
   16572:	2202      	movs	r2, #2
   16574:	f012 ff12 	bl	2939c <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   16578:	4620      	mov	r0, r4
   1657a:	f003 ff17 	bl	1a3ac <net_buf_unref>
		return NULL;
   1657e:	e7c6      	b.n	1650e <bt_att_chan_create_pdu+0x26>
	bt_att_tx_meta_data(buf) = data;
   16580:	61a0      	str	r0, [r4, #24]
   16582:	2101      	movs	r1, #1
   16584:	f104 000c 	add.w	r0, r4, #12
   16588:	f004 f832 	bl	1a5f0 <net_buf_simple_add>
	hdr->code = op;
   1658c:	7005      	strb	r5, [r0, #0]
	return buf;
   1658e:	e7bf      	b.n	16510 <bt_att_chan_create_pdu+0x28>
   16590:	00031a41 	.word	0x00031a41
   16594:	0002d61c 	.word	0x0002d61c
   16598:	00031732 	.word	0x00031732
   1659c:	20008c5c 	.word	0x20008c5c
   165a0:	00031a66 	.word	0x00031a66

000165a4 <bt_att_recv>:
{
   165a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   165a8:	8a0b      	ldrh	r3, [r1, #16]
{
   165aa:	4607      	mov	r7, r0
   165ac:	460d      	mov	r5, r1
   165ae:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   165b0:	b963      	cbnz	r3, 165cc <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   165b2:	4a42      	ldr	r2, [pc, #264]	; (166bc <bt_att_recv+0x118>)
   165b4:	9300      	str	r3, [sp, #0]
   165b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   165ba:	2201      	movs	r2, #1
			LOG_WRN("Ignoring unexpected request");
   165bc:	4618      	mov	r0, r3
   165be:	4940      	ldr	r1, [pc, #256]	; (166c0 <bt_att_recv+0x11c>)
   165c0:	f012 feec 	bl	2939c <z_log_msg_runtime_create.constprop.0>
}
   165c4:	2000      	movs	r0, #0
   165c6:	b006      	add	sp, #24
   165c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   165cc:	2101      	movs	r1, #1
   165ce:	f105 000c 	add.w	r0, r5, #12
   165d2:	f003 ffef 	bl	1a5b4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   165d6:	f857 3c04 	ldr.w	r3, [r7, #-4]
   165da:	4604      	mov	r4, r0
   165dc:	2b00      	cmp	r3, #0
   165de:	d0f1      	beq.n	165c4 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   165e0:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   165e2:	7802      	ldrb	r2, [r0, #0]
   165e4:	4e37      	ldr	r6, [pc, #220]	; (166c4 <bt_att_recv+0x120>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   165e6:	f1a7 0804 	sub.w	r8, r7, #4
		if (hdr->code == handlers[i].op) {
   165ea:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   165ee:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   165f2:	4290      	cmp	r0, r2
   165f4:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   165f8:	d111      	bne.n	1661e <bt_att_recv+0x7a>
		if (handler->type == ATT_REQUEST &&
   165fa:	f891 9002 	ldrb.w	r9, [r1, #2]
   165fe:	f1b9 0f01 	cmp.w	r9, #1
   16602:	d12b      	bne.n	1665c <bt_att_recv+0xb8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   16604:	2100      	movs	r1, #0
   16606:	f107 0094 	add.w	r0, r7, #148	; 0x94
   1660a:	f012 ffbd 	bl	29588 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1660e:	b380      	cbz	r0, 16672 <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected request");
   16610:	4b2d      	ldr	r3, [pc, #180]	; (166c8 <bt_att_recv+0x124>)
   16612:	9302      	str	r3, [sp, #8]
   16614:	2300      	movs	r3, #0
   16616:	2202      	movs	r2, #2
   16618:	e9cd 3300 	strd	r3, r3, [sp]
   1661c:	e7ce      	b.n	165bc <bt_att_recv+0x18>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1661e:	3301      	adds	r3, #1
   16620:	2b0e      	cmp	r3, #14
   16622:	d1e2      	bne.n	165ea <bt_att_recv+0x46>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   16624:	2500      	movs	r5, #0
   16626:	4b29      	ldr	r3, [pc, #164]	; (166cc <bt_att_recv+0x128>)
   16628:	4628      	mov	r0, r5
   1662a:	4925      	ldr	r1, [pc, #148]	; (166c0 <bt_att_recv+0x11c>)
   1662c:	9203      	str	r2, [sp, #12]
   1662e:	9302      	str	r3, [sp, #8]
   16630:	2202      	movs	r2, #2
   16632:	462b      	mov	r3, r5
   16634:	e9cd 5500 	strd	r5, r5, [sp]
   16638:	f012 feb0 	bl	2939c <z_log_msg_runtime_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1663c:	7821      	ldrb	r1, [r4, #0]
   1663e:	4608      	mov	r0, r1
   16640:	f7ff fc0a 	bl	15e58 <att_op_get_type>
   16644:	2800      	cmp	r0, #0
   16646:	d0bd      	beq.n	165c4 <bt_att_recv+0x20>
   16648:	2805      	cmp	r0, #5
   1664a:	d0bb      	beq.n	165c4 <bt_att_recv+0x20>
	if (!req) {
   1664c:	2900      	cmp	r1, #0
   1664e:	d0b9      	beq.n	165c4 <bt_att_recv+0x20>
   16650:	2306      	movs	r3, #6
   16652:	2200      	movs	r2, #0
   16654:	4640      	mov	r0, r8
   16656:	f013 f8fb 	bl	29850 <send_err_rsp.part.0>
   1665a:	e7b3      	b.n	165c4 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   1665c:	f1b9 0f05 	cmp.w	r9, #5
   16660:	d107      	bne.n	16672 <bt_att_recv+0xce>
			   atomic_test_and_set_bit(att_chan->flags,
   16662:	2101      	movs	r1, #1
   16664:	f107 0094 	add.w	r0, r7, #148	; 0x94
   16668:	f012 ff8e 	bl	29588 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1666c:	b108      	cbz	r0, 16672 <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected indication");
   1666e:	4b18      	ldr	r3, [pc, #96]	; (166d0 <bt_att_recv+0x12c>)
   16670:	e7cf      	b.n	16612 <bt_att_recv+0x6e>
	if (buf->len < handler->expect_len) {
   16672:	4456      	add	r6, sl
   16674:	8a2b      	ldrh	r3, [r5, #16]
   16676:	7872      	ldrb	r2, [r6, #1]
   16678:	429a      	cmp	r2, r3
   1667a:	d911      	bls.n	166a0 <bt_att_recv+0xfc>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1667c:	7822      	ldrb	r2, [r4, #0]
   1667e:	4910      	ldr	r1, [pc, #64]	; (166c0 <bt_att_recv+0x11c>)
   16680:	e9cd 3203 	strd	r3, r2, [sp, #12]
   16684:	4b13      	ldr	r3, [pc, #76]	; (166d4 <bt_att_recv+0x130>)
   16686:	2201      	movs	r2, #1
   16688:	9302      	str	r3, [sp, #8]
   1668a:	2300      	movs	r3, #0
   1668c:	4618      	mov	r0, r3
   1668e:	e9cd 3300 	strd	r3, r3, [sp]
   16692:	f012 fe83 	bl	2939c <z_log_msg_runtime_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   16696:	f1b9 0f01 	cmp.w	r9, #1
   1669a:	d193      	bne.n	165c4 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   1669c:	2304      	movs	r3, #4
   1669e:	e009      	b.n	166b4 <bt_att_recv+0x110>
		err = handler->func(att_chan, buf);
   166a0:	6873      	ldr	r3, [r6, #4]
   166a2:	4629      	mov	r1, r5
   166a4:	4640      	mov	r0, r8
   166a6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   166a8:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   166ac:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   166ae:	d189      	bne.n	165c4 <bt_att_recv+0x20>
   166b0:	2800      	cmp	r0, #0
   166b2:	d087      	beq.n	165c4 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   166b4:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   166b6:	2900      	cmp	r1, #0
   166b8:	d084      	beq.n	165c4 <bt_att_recv+0x20>
   166ba:	e7ca      	b.n	16652 <bt_att_recv+0xae>
   166bc:	00031a85 	.word	0x00031a85
   166c0:	0002d61c 	.word	0x0002d61c
   166c4:	0002e028 	.word	0x0002e028
   166c8:	00031aba 	.word	0x00031aba
   166cc:	00031aa0 	.word	0x00031aa0
   166d0:	00031ad6 	.word	0x00031ad6
   166d4:	00031af5 	.word	0x00031af5

000166d8 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   166d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   166da:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   166dc:	6803      	ldr	r3, [r0, #0]
   166de:	460d      	mov	r5, r1
   166e0:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   166e2:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   166e4:	bf18      	it	ne
   166e6:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   166e8:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   166ea:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   166ec:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   166ee:	f013 fb9f 	bl	29e30 <bt_gatt_change_aware>
   166f2:	b948      	cbnz	r0, 16708 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   166f4:	2105      	movs	r1, #5
   166f6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   166fa:	f012 ff45 	bl	29588 <atomic_test_and_set_bit>
   166fe:	2800      	cmp	r0, #0
   16700:	d048      	beq.n	16794 <att_write_rsp.constprop.0+0xbc>
			return 0;
   16702:	2000      	movs	r0, #0
}
   16704:	b007      	add	sp, #28
   16706:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   16708:	2e00      	cmp	r6, #0
   1670a:	d045      	beq.n	16798 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1670c:	2218      	movs	r2, #24
   1670e:	2100      	movs	r1, #0
   16710:	4668      	mov	r0, sp
   16712:	f015 fd15 	bl	2c140 <memset>
	if (rsp) {
   16716:	bb67      	cbnz	r7, 16772 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   16718:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1671a:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   1671c:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1671e:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   16720:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   16722:	2300      	movs	r3, #0
   16724:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   16728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1672a:	4a1c      	ldr	r2, [pc, #112]	; (1679c <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   1672c:	9303      	str	r3, [sp, #12]
	data.len = len;
   1672e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   16732:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   16736:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1673a:	2301      	movs	r3, #1
   1673c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16740:	466b      	mov	r3, sp
   16742:	f012 fd8d 	bl	29260 <bt_gatt_foreach_attr>
	if (data.err) {
   16746:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1674a:	b1e3      	cbz	r3, 16786 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1674c:	2f00      	cmp	r7, #0
   1674e:	d0d8      	beq.n	16702 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16750:	9b01      	ldr	r3, [sp, #4]
   16752:	6998      	ldr	r0, [r3, #24]
   16754:	f7ff fbc6 	bl	15ee4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16758:	9801      	ldr	r0, [sp, #4]
   1675a:	f003 fe27 	bl	1a3ac <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1675e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   16762:	2d00      	cmp	r5, #0
   16764:	d0cd      	beq.n	16702 <att_write_rsp.constprop.0+0x2a>
   16766:	4632      	mov	r2, r6
   16768:	4629      	mov	r1, r5
   1676a:	4620      	mov	r0, r4
   1676c:	f013 f870 	bl	29850 <send_err_rsp.part.0>
   16770:	e7c7      	b.n	16702 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16772:	2200      	movs	r2, #0
   16774:	4639      	mov	r1, r7
   16776:	4620      	mov	r0, r4
   16778:	f7ff feb6 	bl	164e8 <bt_att_chan_create_pdu>
   1677c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1677e:	2800      	cmp	r0, #0
   16780:	d1ca      	bne.n	16718 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   16782:	200e      	movs	r0, #14
   16784:	e7be      	b.n	16704 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   16786:	9901      	ldr	r1, [sp, #4]
   16788:	2900      	cmp	r1, #0
   1678a:	d0ba      	beq.n	16702 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1678c:	4620      	mov	r0, r4
   1678e:	f012 fe47 	bl	29420 <bt_att_chan_send_rsp>
   16792:	e7b6      	b.n	16702 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16794:	2012      	movs	r0, #18
   16796:	e7b5      	b.n	16704 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16798:	2001      	movs	r0, #1
   1679a:	e7b3      	b.n	16704 <att_write_rsp.constprop.0+0x2c>
   1679c:	000291ff 	.word	0x000291ff

000167a0 <bt_att_create_pdu>:
{
   167a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   167a2:	460e      	mov	r6, r1
   167a4:	4615      	mov	r5, r2
	att = att_get(conn);
   167a6:	f7ff fd1f 	bl	161e8 <att_get>
	if (!att) {
   167aa:	b1c0      	cbz	r0, 167de <bt_att_create_pdu+0x3e>
	return list->head;
   167ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   167ae:	4618      	mov	r0, r3
   167b0:	b11b      	cbz	r3, 167ba <bt_att_create_pdu+0x1a>
	return node->next;
   167b2:	f850 39f0 	ldr.w	r3, [r0], #-240
   167b6:	b103      	cbz	r3, 167ba <bt_att_create_pdu+0x1a>
   167b8:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   167ba:	1c6c      	adds	r4, r5, #1
   167bc:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   167be:	b118      	cbz	r0, 167c8 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   167c0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   167c2:	42a1      	cmp	r1, r4
   167c4:	d216      	bcs.n	167f4 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   167c6:	b96b      	cbnz	r3, 167e4 <bt_att_create_pdu+0x44>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   167c8:	4b0f      	ldr	r3, [pc, #60]	; (16808 <bt_att_create_pdu+0x68>)
   167ca:	2202      	movs	r2, #2
   167cc:	9302      	str	r3, [sp, #8]
   167ce:	2300      	movs	r3, #0
   167d0:	490e      	ldr	r1, [pc, #56]	; (1680c <bt_att_create_pdu+0x6c>)
   167d2:	4618      	mov	r0, r3
   167d4:	e9cd 3300 	strd	r3, r3, [sp]
   167d8:	9403      	str	r4, [sp, #12]
   167da:	f012 fddf 	bl	2939c <z_log_msg_runtime_create.constprop.0>
}
   167de:	2000      	movs	r0, #0
   167e0:	b004      	add	sp, #16
   167e2:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   167e4:	4618      	mov	r0, r3
   167e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   167ea:	b153      	cbz	r3, 16802 <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   167ec:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   167ee:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   167f0:	428a      	cmp	r2, r1
   167f2:	d8f7      	bhi.n	167e4 <bt_att_create_pdu+0x44>
		return bt_att_chan_create_pdu(chan, op, len);
   167f4:	462a      	mov	r2, r5
   167f6:	4631      	mov	r1, r6
}
   167f8:	b004      	add	sp, #16
   167fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   167fe:	f7ff be73 	b.w	164e8 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16802:	4614      	mov	r4, r2
   16804:	e7dc      	b.n	167c0 <bt_att_create_pdu+0x20>
   16806:	bf00      	nop
   16808:	00031b14 	.word	0x00031b14
   1680c:	0002d61c 	.word	0x0002d61c

00016810 <att_read_group_req>:
{
   16810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16814:	8a0e      	ldrh	r6, [r1, #16]
{
   16816:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   16818:	3e04      	subs	r6, #4
   1681a:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1681c:	2e02      	cmp	r6, #2
{
   1681e:	4608      	mov	r0, r1
   16820:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   16822:	d001      	beq.n	16828 <att_read_group_req+0x18>
   16824:	2e10      	cmp	r6, #16
   16826:	d16a      	bne.n	168fe <att_read_group_req+0xee>
   16828:	2104      	movs	r1, #4
   1682a:	300c      	adds	r0, #12
   1682c:	f003 fec2 	bl	1a5b4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16830:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   16834:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16836:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16838:	1d01      	adds	r1, r0, #4
   1683a:	4632      	mov	r2, r6
   1683c:	4640      	mov	r0, r8
   1683e:	f011 ffe6 	bl	2880e <bt_uuid_create>
   16842:	2800      	cmp	r0, #0
   16844:	d05d      	beq.n	16902 <att_read_group_req+0xf2>
	if (!start || !end) {
   16846:	2d00      	cmp	r5, #0
   16848:	d03a      	beq.n	168c0 <att_read_group_req+0xb0>
   1684a:	2600      	movs	r6, #0
   1684c:	2f00      	cmp	r7, #0
   1684e:	d036      	beq.n	168be <att_read_group_req+0xae>
	if (start > end) {
   16850:	42bd      	cmp	r5, r7
   16852:	d835      	bhi.n	168c0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16854:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16858:	4640      	mov	r0, r8
   1685a:	a901      	add	r1, sp, #4
   1685c:	f88d 6004 	strb.w	r6, [sp, #4]
   16860:	f8ad 3006 	strh.w	r3, [sp, #6]
   16864:	f011 ffa5 	bl	287b2 <bt_uuid_cmp>
   16868:	bb70      	cbnz	r0, 168c8 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1686a:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1686c:	2214      	movs	r2, #20
   1686e:	2100      	movs	r1, #0
   16870:	a807      	add	r0, sp, #28
   16872:	f015 fc65 	bl	2c140 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   16876:	2201      	movs	r2, #1
   16878:	2111      	movs	r1, #17
   1687a:	4630      	mov	r0, r6
   1687c:	f7ff ff90 	bl	167a0 <bt_att_create_pdu>
   16880:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16882:	2800      	cmp	r0, #0
   16884:	d03d      	beq.n	16902 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   16886:	2101      	movs	r1, #1
   16888:	300c      	adds	r0, #12
	data.uuid = uuid;
   1688a:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1688e:	f003 feaf 	bl	1a5f0 <net_buf_simple_add>
	data.rsp->len = 0U;
   16892:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16894:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16896:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   16898:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1689a:	4a1b      	ldr	r2, [pc, #108]	; (16908 <att_read_group_req+0xf8>)
	data.group = NULL;
   1689c:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1689e:	4628      	mov	r0, r5
   168a0:	ab07      	add	r3, sp, #28
   168a2:	f012 fcdd 	bl	29260 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   168a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   168a8:	781b      	ldrb	r3, [r3, #0]
   168aa:	bb1b      	cbnz	r3, 168f4 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   168ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   168ae:	6998      	ldr	r0, [r3, #24]
   168b0:	f7ff fb18 	bl	15ee4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   168b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   168b6:	f003 fd79 	bl	1a3ac <net_buf_unref>
	if (!req) {
   168ba:	230a      	movs	r3, #10
   168bc:	e001      	b.n	168c2 <att_read_group_req+0xb2>
			*err = 0U;
   168be:	463d      	mov	r5, r7
	if (!req) {
   168c0:	2301      	movs	r3, #1
   168c2:	462a      	mov	r2, r5
   168c4:	2110      	movs	r1, #16
   168c6:	e00e      	b.n	168e6 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   168c8:	f642 0301 	movw	r3, #10241	; 0x2801
   168cc:	4640      	mov	r0, r8
   168ce:	a907      	add	r1, sp, #28
   168d0:	f88d 601c 	strb.w	r6, [sp, #28]
   168d4:	f8ad 301e 	strh.w	r3, [sp, #30]
   168d8:	f011 ff6b 	bl	287b2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   168dc:	2800      	cmp	r0, #0
   168de:	d0c4      	beq.n	1686a <att_read_group_req+0x5a>
	if (!req) {
   168e0:	2310      	movs	r3, #16
   168e2:	462a      	mov	r2, r5
   168e4:	4619      	mov	r1, r3
   168e6:	4620      	mov	r0, r4
   168e8:	f012 ffb2 	bl	29850 <send_err_rsp.part.0>
		return 0;
   168ec:	2000      	movs	r0, #0
}
   168ee:	b00c      	add	sp, #48	; 0x30
   168f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   168f4:	4620      	mov	r0, r4
   168f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   168f8:	f012 fd92 	bl	29420 <bt_att_chan_send_rsp>
	return 0;
   168fc:	e7f6      	b.n	168ec <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   168fe:	2004      	movs	r0, #4
   16900:	e7f5      	b.n	168ee <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   16902:	200e      	movs	r0, #14
   16904:	e7f3      	b.n	168ee <att_read_group_req+0xde>
   16906:	bf00      	nop
   16908:	000162ad 	.word	0x000162ad

0001690c <att_read_mult_vl_req>:
{
   1690c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16910:	6846      	ldr	r6, [r0, #4]
{
   16912:	4604      	mov	r4, r0
   16914:	460d      	mov	r5, r1
   16916:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   16918:	2101      	movs	r1, #1
   1691a:	4630      	mov	r0, r6
   1691c:	f013 fa88 	bl	29e30 <bt_gatt_change_aware>
   16920:	b950      	cbnz	r0, 16938 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16922:	2105      	movs	r1, #5
   16924:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16928:	f012 fe2e 	bl	29588 <atomic_test_and_set_bit>
   1692c:	2800      	cmp	r0, #0
   1692e:	d13b      	bne.n	169a8 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16930:	2012      	movs	r0, #18
}
   16932:	b005      	add	sp, #20
   16934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   16938:	2210      	movs	r2, #16
   1693a:	2100      	movs	r1, #0
   1693c:	4668      	mov	r0, sp
   1693e:	f015 fbff 	bl	2c140 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   16942:	2200      	movs	r2, #0
   16944:	2121      	movs	r1, #33	; 0x21
   16946:	4630      	mov	r0, r6
   16948:	f7ff ff2a 	bl	167a0 <bt_att_create_pdu>
   1694c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1694e:	b368      	cbz	r0, 169ac <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16950:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16954:	f8df 9058 	ldr.w	r9, [pc, #88]	; 169b0 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   16958:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1695a:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1695e:	8a2b      	ldrh	r3, [r5, #16]
   16960:	2b01      	cmp	r3, #1
   16962:	d804      	bhi.n	1696e <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   16964:	4620      	mov	r0, r4
   16966:	9902      	ldr	r1, [sp, #8]
   16968:	f012 fd5a 	bl	29420 <bt_att_chan_send_rsp>
	return 0;
   1696c:	e01c      	b.n	169a8 <att_read_mult_vl_req+0x9c>
   1696e:	4638      	mov	r0, r7
   16970:	f013 fe19 	bl	2a5a6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16974:	466b      	mov	r3, sp
   16976:	464a      	mov	r2, r9
   16978:	4601      	mov	r1, r0
   1697a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1697c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16980:	f012 fc6e 	bl	29260 <bt_gatt_foreach_attr>
		if (data.err) {
   16984:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16988:	2b00      	cmp	r3, #0
   1698a:	d0e8      	beq.n	1695e <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1698c:	9b02      	ldr	r3, [sp, #8]
   1698e:	6998      	ldr	r0, [r3, #24]
   16990:	f7ff faa8 	bl	15ee4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16994:	9802      	ldr	r0, [sp, #8]
   16996:	f003 fd09 	bl	1a3ac <net_buf_unref>
	if (!req) {
   1699a:	4632      	mov	r2, r6
   1699c:	2120      	movs	r1, #32
   1699e:	4620      	mov	r0, r4
   169a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   169a4:	f012 ff54 	bl	29850 <send_err_rsp.part.0>
			return 0;
   169a8:	2000      	movs	r0, #0
   169aa:	e7c2      	b.n	16932 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   169ac:	200e      	movs	r0, #14
   169ae:	e7c0      	b.n	16932 <att_read_mult_vl_req+0x26>
   169b0:	000295f1 	.word	0x000295f1

000169b4 <att_read_mult_req>:
{
   169b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   169b8:	6846      	ldr	r6, [r0, #4]
{
   169ba:	4604      	mov	r4, r0
   169bc:	460d      	mov	r5, r1
   169be:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   169c0:	2101      	movs	r1, #1
   169c2:	4630      	mov	r0, r6
   169c4:	f013 fa34 	bl	29e30 <bt_gatt_change_aware>
   169c8:	b950      	cbnz	r0, 169e0 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   169ca:	2105      	movs	r1, #5
   169cc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   169d0:	f012 fdda 	bl	29588 <atomic_test_and_set_bit>
   169d4:	2800      	cmp	r0, #0
   169d6:	d13b      	bne.n	16a50 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   169d8:	2012      	movs	r0, #18
}
   169da:	b005      	add	sp, #20
   169dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   169e0:	2210      	movs	r2, #16
   169e2:	2100      	movs	r1, #0
   169e4:	4668      	mov	r0, sp
   169e6:	f015 fbab 	bl	2c140 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   169ea:	2200      	movs	r2, #0
   169ec:	210f      	movs	r1, #15
   169ee:	4630      	mov	r0, r6
   169f0:	f7ff fed6 	bl	167a0 <bt_att_create_pdu>
   169f4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   169f6:	b368      	cbz	r0, 16a54 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   169f8:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   169fc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16a58 <att_read_mult_req+0xa4>
	data.chan = chan;
   16a00:	9400      	str	r4, [sp, #0]
   16a02:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   16a06:	8a2b      	ldrh	r3, [r5, #16]
   16a08:	2b01      	cmp	r3, #1
   16a0a:	d804      	bhi.n	16a16 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   16a0c:	4620      	mov	r0, r4
   16a0e:	9902      	ldr	r1, [sp, #8]
   16a10:	f012 fd06 	bl	29420 <bt_att_chan_send_rsp>
	return 0;
   16a14:	e01c      	b.n	16a50 <att_read_mult_req+0x9c>
   16a16:	4638      	mov	r0, r7
   16a18:	f013 fdc5 	bl	2a5a6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16a1c:	466b      	mov	r3, sp
   16a1e:	464a      	mov	r2, r9
   16a20:	4601      	mov	r1, r0
   16a22:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16a24:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16a28:	f012 fc1a 	bl	29260 <bt_gatt_foreach_attr>
		if (data.err) {
   16a2c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16a30:	2b00      	cmp	r3, #0
   16a32:	d0e8      	beq.n	16a06 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16a34:	9b02      	ldr	r3, [sp, #8]
   16a36:	6998      	ldr	r0, [r3, #24]
   16a38:	f7ff fa54 	bl	15ee4 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16a3c:	9802      	ldr	r0, [sp, #8]
   16a3e:	f003 fcb5 	bl	1a3ac <net_buf_unref>
	if (!req) {
   16a42:	4632      	mov	r2, r6
   16a44:	210e      	movs	r1, #14
   16a46:	4620      	mov	r0, r4
   16a48:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16a4c:	f012 ff00 	bl	29850 <send_err_rsp.part.0>
			return 0;
   16a50:	2000      	movs	r0, #0
   16a52:	e7c2      	b.n	169da <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   16a54:	200e      	movs	r0, #14
   16a56:	e7c0      	b.n	169da <att_read_mult_req+0x26>
   16a58:	000295ab 	.word	0x000295ab

00016a5c <att_read_rsp>:
{
   16a5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16a60:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   16a64:	4604      	mov	r4, r0
   16a66:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16a68:	4640      	mov	r0, r8
   16a6a:	2101      	movs	r1, #1
{
   16a6c:	4617      	mov	r7, r2
   16a6e:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   16a70:	f013 f9de 	bl	29e30 <bt_gatt_change_aware>
   16a74:	b948      	cbnz	r0, 16a8a <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16a76:	2105      	movs	r1, #5
   16a78:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16a7c:	f012 fd84 	bl	29588 <atomic_test_and_set_bit>
   16a80:	bb78      	cbnz	r0, 16ae2 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16a82:	2012      	movs	r0, #18
}
   16a84:	b004      	add	sp, #16
   16a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   16a8a:	b38d      	cbz	r5, 16af0 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   16a8c:	2210      	movs	r2, #16
   16a8e:	2100      	movs	r1, #0
   16a90:	4668      	mov	r0, sp
   16a92:	f015 fb55 	bl	2c140 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   16a96:	2200      	movs	r2, #0
   16a98:	4639      	mov	r1, r7
   16a9a:	4640      	mov	r0, r8
   16a9c:	f7ff fe80 	bl	167a0 <bt_att_create_pdu>
   16aa0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16aa2:	b338      	cbz	r0, 16af4 <att_read_rsp+0x98>
	data.offset = offset;
   16aa4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16aa8:	4629      	mov	r1, r5
	data.offset = offset;
   16aaa:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16aae:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16ab0:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16ab2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16ab6:	4a10      	ldr	r2, [pc, #64]	; (16af8 <att_read_rsp+0x9c>)
   16ab8:	466b      	mov	r3, sp
	data.chan = chan;
   16aba:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16abc:	f012 fbd0 	bl	29260 <bt_gatt_foreach_attr>
	if (data.err) {
   16ac0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16ac4:	b17b      	cbz	r3, 16ae6 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16ac6:	9b02      	ldr	r3, [sp, #8]
   16ac8:	6998      	ldr	r0, [r3, #24]
   16aca:	f7ff fa0b 	bl	15ee4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16ace:	9802      	ldr	r0, [sp, #8]
   16ad0:	f003 fc6c 	bl	1a3ac <net_buf_unref>
	if (!req) {
   16ad4:	462a      	mov	r2, r5
   16ad6:	4631      	mov	r1, r6
   16ad8:	4620      	mov	r0, r4
   16ada:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16ade:	f012 feb7 	bl	29850 <send_err_rsp.part.0>
			return 0;
   16ae2:	2000      	movs	r0, #0
   16ae4:	e7ce      	b.n	16a84 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   16ae6:	4620      	mov	r0, r4
   16ae8:	9902      	ldr	r1, [sp, #8]
   16aea:	f012 fc99 	bl	29420 <bt_att_chan_send_rsp>
	return 0;
   16aee:	e7f8      	b.n	16ae2 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   16af0:	2001      	movs	r0, #1
   16af2:	e7c7      	b.n	16a84 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   16af4:	200e      	movs	r0, #14
   16af6:	e7c5      	b.n	16a84 <att_read_rsp+0x28>
   16af8:	000295ab 	.word	0x000295ab

00016afc <att_read_type_req>:
{
   16afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16b00:	8a0d      	ldrh	r5, [r1, #16]
{
   16b02:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   16b04:	3d04      	subs	r5, #4
   16b06:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   16b08:	2d02      	cmp	r5, #2
{
   16b0a:	4608      	mov	r0, r1
   16b0c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   16b0e:	d001      	beq.n	16b14 <att_read_type_req+0x18>
   16b10:	2d10      	cmp	r5, #16
   16b12:	d150      	bne.n	16bb6 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   16b14:	2104      	movs	r1, #4
   16b16:	300c      	adds	r0, #12
   16b18:	f003 fd4c 	bl	1a5b4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16b1c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   16b20:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16b22:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16b24:	1d01      	adds	r1, r0, #4
   16b26:	462a      	mov	r2, r5
   16b28:	4640      	mov	r0, r8
   16b2a:	f011 fe70 	bl	2880e <bt_uuid_create>
   16b2e:	b188      	cbz	r0, 16b54 <att_read_type_req+0x58>
	if (!start || !end) {
   16b30:	b19e      	cbz	r6, 16b5a <att_read_type_req+0x5e>
   16b32:	b18f      	cbz	r7, 16b58 <att_read_type_req+0x5c>
	if (start > end) {
   16b34:	42be      	cmp	r6, r7
   16b36:	d810      	bhi.n	16b5a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   16b38:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   16b3a:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16b3c:	2100      	movs	r1, #0
   16b3e:	eb0d 0002 	add.w	r0, sp, r2
   16b42:	f015 fafd 	bl	2c140 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   16b46:	2201      	movs	r2, #1
   16b48:	2109      	movs	r1, #9
   16b4a:	4628      	mov	r0, r5
   16b4c:	f7ff fe28 	bl	167a0 <bt_att_create_pdu>
   16b50:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   16b52:	b960      	cbnz	r0, 16b6e <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   16b54:	200e      	movs	r0, #14
   16b56:	e007      	b.n	16b68 <att_read_type_req+0x6c>
			*err = 0U;
   16b58:	463e      	mov	r6, r7
	if (!req) {
   16b5a:	2301      	movs	r3, #1
   16b5c:	4632      	mov	r2, r6
   16b5e:	2108      	movs	r1, #8
   16b60:	4620      	mov	r0, r4
   16b62:	f012 fe75 	bl	29850 <send_err_rsp.part.0>
		return 0;
   16b66:	2000      	movs	r0, #0
}
   16b68:	b00c      	add	sp, #48	; 0x30
   16b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   16b6e:	2101      	movs	r1, #1
   16b70:	300c      	adds	r0, #12
	data.uuid = uuid;
   16b72:	e9cd 4806 	strd	r4, r8, [sp, #24]
   16b76:	f003 fd3b 	bl	1a5f0 <net_buf_simple_add>
	data.rsp->len = 0U;
   16b7a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16b7c:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   16b7e:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16b80:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16b82:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16b84:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16b88:	4630      	mov	r0, r6
   16b8a:	ab06      	add	r3, sp, #24
   16b8c:	4a0b      	ldr	r2, [pc, #44]	; (16bbc <att_read_type_req+0xc0>)
   16b8e:	f012 fb67 	bl	29260 <bt_gatt_foreach_attr>
	if (data.err) {
   16b92:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16b96:	b14b      	cbz	r3, 16bac <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16b98:	9b08      	ldr	r3, [sp, #32]
   16b9a:	6998      	ldr	r0, [r3, #24]
   16b9c:	f7ff f9a2 	bl	15ee4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16ba0:	9808      	ldr	r0, [sp, #32]
   16ba2:	f003 fc03 	bl	1a3ac <net_buf_unref>
	if (!req) {
   16ba6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16baa:	e7d7      	b.n	16b5c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   16bac:	4620      	mov	r0, r4
   16bae:	9908      	ldr	r1, [sp, #32]
   16bb0:	f012 fc36 	bl	29420 <bt_att_chan_send_rsp>
	return 0;
   16bb4:	e7d7      	b.n	16b66 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   16bb6:	2004      	movs	r0, #4
   16bb8:	e7d6      	b.n	16b68 <att_read_type_req+0x6c>
   16bba:	bf00      	nop
   16bbc:	00016359 	.word	0x00016359

00016bc0 <att_find_type_req>:
{
   16bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bc4:	460f      	mov	r7, r1
   16bc6:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   16bc8:	2106      	movs	r1, #6
   16bca:	b086      	sub	sp, #24
   16bcc:	f107 000c 	add.w	r0, r7, #12
   16bd0:	f003 fcf0 	bl	1a5b4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16bd4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16bd6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   16bda:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   16bdc:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   16be0:	b1c5      	cbz	r5, 16c14 <att_find_type_req+0x54>
   16be2:	2300      	movs	r3, #0
   16be4:	f1b8 0f00 	cmp.w	r8, #0
   16be8:	d013      	beq.n	16c12 <att_find_type_req+0x52>
	if (start > end) {
   16bea:	4545      	cmp	r5, r8
   16bec:	d812      	bhi.n	16c14 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16bee:	f88d 3000 	strb.w	r3, [sp]
   16bf2:	f88d 3004 	strb.w	r3, [sp, #4]
   16bf6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16bfa:	4668      	mov	r0, sp
   16bfc:	a901      	add	r1, sp, #4
   16bfe:	f8ad 2002 	strh.w	r2, [sp, #2]
   16c02:	f8ad 3006 	strh.w	r3, [sp, #6]
   16c06:	f011 fdd4 	bl	287b2 <bt_uuid_cmp>
   16c0a:	4606      	mov	r6, r0
   16c0c:	b160      	cbz	r0, 16c28 <att_find_type_req+0x68>
	if (!req) {
   16c0e:	230a      	movs	r3, #10
   16c10:	e001      	b.n	16c16 <att_find_type_req+0x56>
			*err = 0U;
   16c12:	4645      	mov	r5, r8
	if (!req) {
   16c14:	2301      	movs	r3, #1
   16c16:	462a      	mov	r2, r5
   16c18:	2106      	movs	r1, #6
   16c1a:	4620      	mov	r0, r4
   16c1c:	f012 fe18 	bl	29850 <send_err_rsp.part.0>
		return 0;
   16c20:	2000      	movs	r0, #0
}
   16c22:	b006      	add	sp, #24
   16c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   16c28:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16c2c:	4601      	mov	r1, r0
   16c2e:	2214      	movs	r2, #20
   16c30:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16c32:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   16c34:	f015 fa84 	bl	2c140 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   16c38:	4632      	mov	r2, r6
   16c3a:	2107      	movs	r1, #7
   16c3c:	4650      	mov	r0, sl
   16c3e:	f7ff fdaf 	bl	167a0 <bt_att_create_pdu>
   16c42:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16c44:	b1f8      	cbz	r0, 16c86 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16c46:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16c48:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16c4a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16c4e:	4628      	mov	r0, r5
   16c50:	ab01      	add	r3, sp, #4
   16c52:	4a0e      	ldr	r2, [pc, #56]	; (16c8c <att_find_type_req+0xcc>)
	data.value = value;
   16c54:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   16c58:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   16c5a:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16c5e:	f012 faff 	bl	29260 <bt_gatt_foreach_attr>
	if (data.err) {
   16c62:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16c66:	b14b      	cbz	r3, 16c7c <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16c68:	9b02      	ldr	r3, [sp, #8]
   16c6a:	6998      	ldr	r0, [r3, #24]
   16c6c:	f7ff f93a 	bl	15ee4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16c70:	9802      	ldr	r0, [sp, #8]
   16c72:	f003 fb9b 	bl	1a3ac <net_buf_unref>
	if (!req) {
   16c76:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16c7a:	e7cc      	b.n	16c16 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   16c7c:	4620      	mov	r0, r4
   16c7e:	9902      	ldr	r1, [sp, #8]
   16c80:	f012 fbce 	bl	29420 <bt_att_chan_send_rsp>
	return 0;
   16c84:	e7cc      	b.n	16c20 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   16c86:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16c88:	e7cb      	b.n	16c22 <att_find_type_req+0x62>
   16c8a:	bf00      	nop
   16c8c:	00015f25 	.word	0x00015f25

00016c90 <att_find_info_req>:
{
   16c90:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16c92:	68cb      	ldr	r3, [r1, #12]
{
   16c94:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   16c96:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16c98:	885e      	ldrh	r6, [r3, #2]
{
   16c9a:	b085      	sub	sp, #20
	if (!start || !end) {
   16c9c:	b195      	cbz	r5, 16cc4 <att_find_info_req+0x34>
   16c9e:	b186      	cbz	r6, 16cc2 <att_find_info_req+0x32>
	if (start > end) {
   16ca0:	42ae      	cmp	r6, r5
   16ca2:	d30f      	bcc.n	16cc4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16ca4:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   16ca6:	2210      	movs	r2, #16
   16ca8:	2100      	movs	r1, #0
   16caa:	4668      	mov	r0, sp
   16cac:	f015 fa48 	bl	2c140 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16cb0:	2200      	movs	r2, #0
   16cb2:	2105      	movs	r1, #5
   16cb4:	4638      	mov	r0, r7
   16cb6:	f7ff fd73 	bl	167a0 <bt_att_create_pdu>
   16cba:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16cbc:	b958      	cbnz	r0, 16cd6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16cbe:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16cc0:	e007      	b.n	16cd2 <att_find_info_req+0x42>
			*err = 0U;
   16cc2:	4635      	mov	r5, r6
	if (!req) {
   16cc4:	2301      	movs	r3, #1
   16cc6:	462a      	mov	r2, r5
   16cc8:	2104      	movs	r1, #4
   16cca:	4620      	mov	r0, r4
   16ccc:	f012 fdc0 	bl	29850 <send_err_rsp.part.0>
		return 0;
   16cd0:	2000      	movs	r0, #0
}
   16cd2:	b005      	add	sp, #20
   16cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16cd6:	466b      	mov	r3, sp
   16cd8:	4631      	mov	r1, r6
   16cda:	4628      	mov	r0, r5
   16cdc:	4a09      	ldr	r2, [pc, #36]	; (16d04 <att_find_info_req+0x74>)
	data.chan = chan;
   16cde:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16ce0:	f012 fabe 	bl	29260 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16ce4:	9b02      	ldr	r3, [sp, #8]
   16ce6:	b943      	cbnz	r3, 16cfa <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16ce8:	9b01      	ldr	r3, [sp, #4]
   16cea:	6998      	ldr	r0, [r3, #24]
   16cec:	f7ff f8fa 	bl	15ee4 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16cf0:	9801      	ldr	r0, [sp, #4]
   16cf2:	f003 fb5b 	bl	1a3ac <net_buf_unref>
	if (!req) {
   16cf6:	230a      	movs	r3, #10
   16cf8:	e7e5      	b.n	16cc6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   16cfa:	4620      	mov	r0, r4
   16cfc:	9901      	ldr	r1, [sp, #4]
   16cfe:	f012 fb8f 	bl	29420 <bt_att_chan_send_rsp>
	return 0;
   16d02:	e7e5      	b.n	16cd0 <att_find_info_req+0x40>
   16d04:	000292fd 	.word	0x000292fd

00016d08 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   16d08:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   16d0a:	4c09      	ldr	r4, [pc, #36]	; (16d30 <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   16d0c:	4d09      	ldr	r5, [pc, #36]	; (16d34 <bt_att_init+0x2c>)
   16d0e:	4620      	mov	r0, r4
   16d10:	f014 ffff 	bl	2bd12 <z_impl_k_queue_init>
   16d14:	4629      	mov	r1, r5
   16d16:	4620      	mov	r0, r4
   16d18:	f015 f808 	bl	2bd2c <k_queue_append>
   16d1c:	4620      	mov	r0, r4
   16d1e:	f105 0114 	add.w	r1, r5, #20
   16d22:	f015 f803 	bl	2bd2c <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   16d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   16d2a:	f000 bb9f 	b.w	1746c <bt_gatt_init>
   16d2e:	bf00      	nop
   16d30:	20008c5c 	.word	0x20008c5c
   16d34:	2002f340 	.word	0x2002f340

00016d38 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   16d38:	2300      	movs	r3, #0
{
   16d3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16d3c:	4605      	mov	r5, r0
   16d3e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   16d40:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   16d42:	f00b ffb9 	bl	22cb8 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   16d46:	4b0c      	ldr	r3, [pc, #48]	; (16d78 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16d48:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   16d4a:	681b      	ldr	r3, [r3, #0]
   16d4c:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   16d4e:	bf04      	itt	eq
   16d50:	2500      	moveq	r5, #0
   16d52:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16d54:	462a      	mov	r2, r5
   16d56:	4623      	mov	r3, r4
   16d58:	4808      	ldr	r0, [pc, #32]	; (16d7c <bt_att_req_alloc+0x44>)
   16d5a:	f009 fbe3 	bl	20524 <k_mem_slab_alloc>
   16d5e:	4601      	mov	r1, r0
   16d60:	b940      	cbnz	r0, 16d74 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16d62:	9b01      	ldr	r3, [sp, #4]
   16d64:	221c      	movs	r2, #28
   16d66:	4618      	mov	r0, r3
   16d68:	f015 f9ea 	bl	2c140 <memset>
   16d6c:	4603      	mov	r3, r0

	return req;
}
   16d6e:	4618      	mov	r0, r3
   16d70:	b003      	add	sp, #12
   16d72:	bd30      	pop	{r4, r5, pc}
		return NULL;
   16d74:	2300      	movs	r3, #0
   16d76:	e7fa      	b.n	16d6e <bt_att_req_alloc+0x36>
   16d78:	2002f368 	.word	0x2002f368
   16d7c:	20008aac 	.word	0x20008aac

00016d80 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16d80:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   16d82:	6883      	ldr	r3, [r0, #8]
{
   16d84:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   16d86:	b14b      	cbz	r3, 16d9c <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   16d88:	6998      	ldr	r0, [r3, #24]
   16d8a:	f7ff f8ab 	bl	15ee4 <tx_meta_data_free>
		net_buf_unref(req->buf);
   16d8e:	9b01      	ldr	r3, [sp, #4]
   16d90:	6898      	ldr	r0, [r3, #8]
   16d92:	f003 fb0b 	bl	1a3ac <net_buf_unref>
		req->buf = NULL;
   16d96:	2200      	movs	r2, #0
   16d98:	9b01      	ldr	r3, [sp, #4]
   16d9a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16d9c:	4803      	ldr	r0, [pc, #12]	; (16dac <bt_att_req_free+0x2c>)
   16d9e:	a901      	add	r1, sp, #4
   16da0:	f009 fc2a 	bl	205f8 <k_mem_slab_free>
}
   16da4:	b003      	add	sp, #12
   16da6:	f85d fb04 	ldr.w	pc, [sp], #4
   16daa:	bf00      	nop
   16dac:	20008aac 	.word	0x20008aac

00016db0 <att_handle_rsp>:
{
   16db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   16db4:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   16db6:	30c0      	adds	r0, #192	; 0xc0
{
   16db8:	461d      	mov	r5, r3
   16dba:	460e      	mov	r6, r1
   16dbc:	4617      	mov	r7, r2
	k_work_cancel_delayable(&chan->timeout_work);
   16dbe:	f00a fdf9 	bl	219b4 <k_work_cancel_delayable>
	if (!chan->req) {
   16dc2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   16dc6:	b97b      	cbnz	r3, 16de8 <att_handle_rsp+0x38>
		LOG_WRN("No pending ATT request");
   16dc8:	4a19      	ldr	r2, [pc, #100]	; (16e30 <att_handle_rsp+0x80>)
   16dca:	4618      	mov	r0, r3
   16dcc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   16dd0:	4918      	ldr	r1, [pc, #96]	; (16e34 <att_handle_rsp+0x84>)
   16dd2:	2202      	movs	r2, #2
   16dd4:	9300      	str	r3, [sp, #0]
   16dd6:	f012 fae1 	bl	2939c <z_log_msg_runtime_create.constprop.0>
	att_req_send_process(chan->att);
   16dda:	6820      	ldr	r0, [r4, #0]
   16ddc:	f012 fc70 	bl	296c0 <att_req_send_process>
}
   16de0:	2000      	movs	r0, #0
   16de2:	b004      	add	sp, #16
   16de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   16de8:	4a13      	ldr	r2, [pc, #76]	; (16e38 <att_handle_rsp+0x88>)
   16dea:	f04f 0800 	mov.w	r8, #0
   16dee:	4293      	cmp	r3, r2
   16df0:	d102      	bne.n	16df8 <att_handle_rsp+0x48>
		chan->req = NULL;
   16df2:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   16df6:	e7f0      	b.n	16dda <att_handle_rsp+0x2a>
	func = chan->req->func;
   16df8:	f8d3 9004 	ldr.w	r9, [r3, #4]
	chan->req->func = NULL;
   16dfc:	f8c3 8004 	str.w	r8, [r3, #4]
	params = chan->req->user_data;
   16e00:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16e04:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   16e08:	f7ff ffba 	bl	16d80 <bt_att_req_free>
	att_req_send_process(chan->att);
   16e0c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   16e0e:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   16e12:	f012 fc55 	bl	296c0 <att_req_send_process>
	if (func) {
   16e16:	f1b9 0f00 	cmp.w	r9, #0
   16e1a:	d0e1      	beq.n	16de0 <att_handle_rsp+0x30>
		func(chan->att->conn, err, pdu, len, params);
   16e1c:	6820      	ldr	r0, [r4, #0]
   16e1e:	f8cd a000 	str.w	sl, [sp]
   16e22:	463b      	mov	r3, r7
   16e24:	4632      	mov	r2, r6
   16e26:	4629      	mov	r1, r5
   16e28:	6800      	ldr	r0, [r0, #0]
   16e2a:	47c8      	blx	r9
   16e2c:	e7d8      	b.n	16de0 <att_handle_rsp+0x30>
   16e2e:	bf00      	nop
   16e30:	00031b2f 	.word	0x00031b2f
   16e34:	0002d61c 	.word	0x0002d61c
   16e38:	2002f36c 	.word	0x2002f36c

00016e3c <bt_att_disconnected>:
{
   16e3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   16e40:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   16e44:	4604      	mov	r4, r0
	if (!att_chan->att) {
   16e46:	2e00      	cmp	r6, #0
   16e48:	d056      	beq.n	16ef8 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   16e4a:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   16e4e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   16e52:	f012 fb7e 	bl	29552 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   16e56:	1f27      	subs	r7, r4, #4
   16e58:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   16e5c:	2200      	movs	r2, #0
   16e5e:	2300      	movs	r3, #0
   16e60:	4640      	mov	r0, r8
   16e62:	f013 fb97 	bl	2a594 <net_buf_get>
   16e66:	4605      	mov	r5, r0
   16e68:	bb28      	cbnz	r0, 16eb6 <bt_att_disconnected+0x7a>
	if (chan->req) {
   16e6a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16e6e:	b12b      	cbz	r3, 16e7c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   16e70:	4602      	mov	r2, r0
   16e72:	4601      	mov	r1, r0
   16e74:	230e      	movs	r3, #14
   16e76:	4638      	mov	r0, r7
   16e78:	f7ff ff9a 	bl	16db0 <att_handle_rsp>
	chan->att = NULL;
   16e7c:	2300      	movs	r3, #0
   16e7e:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   16e82:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   16e84:	2b00      	cmp	r3, #0
   16e86:	d137      	bne.n	16ef8 <bt_att_disconnected+0xbc>
	att_reset(att);
   16e88:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16e8a:	9803      	ldr	r0, [sp, #12]
   16e8c:	2200      	movs	r2, #0
   16e8e:	2300      	movs	r3, #0
   16e90:	300c      	adds	r0, #12
   16e92:	f013 fb7f 	bl	2a594 <net_buf_get>
   16e96:	4605      	mov	r5, r0
   16e98:	b9a0      	cbnz	r0, 16ec4 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   16e9a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   16e9c:	6845      	ldr	r5, [r0, #4]
   16e9e:	b9c5      	cbnz	r5, 16ed2 <bt_att_disconnected+0x96>
	att->conn = NULL;
   16ea0:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   16ea2:	a903      	add	r1, sp, #12
   16ea4:	4816      	ldr	r0, [pc, #88]	; (16f00 <bt_att_disconnected+0xc4>)
   16ea6:	f009 fba7 	bl	205f8 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   16eaa:	6820      	ldr	r0, [r4, #0]
}
   16eac:	b004      	add	sp, #16
   16eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   16eb2:	f001 b94d 	b.w	18150 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16eb6:	69a8      	ldr	r0, [r5, #24]
   16eb8:	f7ff f814 	bl	15ee4 <tx_meta_data_free>
		net_buf_unref(buf);
   16ebc:	4628      	mov	r0, r5
   16ebe:	f003 fa75 	bl	1a3ac <net_buf_unref>
   16ec2:	e7cb      	b.n	16e5c <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16ec4:	69a8      	ldr	r0, [r5, #24]
   16ec6:	f7ff f80d 	bl	15ee4 <tx_meta_data_free>
		net_buf_unref(buf);
   16eca:	4628      	mov	r0, r5
   16ecc:	f003 fa6e 	bl	1a3ac <net_buf_unref>
   16ed0:	e7db      	b.n	16e8a <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16ed2:	6882      	ldr	r2, [r0, #8]
	return node->next;
   16ed4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16ed6:	4295      	cmp	r5, r2
	list->head = node;
   16ed8:	6043      	str	r3, [r0, #4]
	list->tail = node;
   16eda:	bf08      	it	eq
   16edc:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   16ede:	686e      	ldr	r6, [r5, #4]
   16ee0:	b136      	cbz	r6, 16ef0 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   16ee2:	69ab      	ldr	r3, [r5, #24]
   16ee4:	210e      	movs	r1, #14
   16ee6:	9300      	str	r3, [sp, #0]
   16ee8:	2300      	movs	r3, #0
   16eea:	6800      	ldr	r0, [r0, #0]
   16eec:	461a      	mov	r2, r3
   16eee:	47b0      	blx	r6
		bt_att_req_free(req);
   16ef0:	4628      	mov	r0, r5
   16ef2:	f7ff ff45 	bl	16d80 <bt_att_req_free>
   16ef6:	e7d0      	b.n	16e9a <bt_att_disconnected+0x5e>
}
   16ef8:	b004      	add	sp, #16
   16efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16efe:	bf00      	nop
   16f00:	20008a6c 	.word	0x20008a6c

00016f04 <att_timeout>:
{
   16f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("ATT Timeout");
   16f06:	4b09      	ldr	r3, [pc, #36]	; (16f2c <att_timeout+0x28>)
{
   16f08:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   16f0a:	9302      	str	r3, [sp, #8]
   16f0c:	2300      	movs	r3, #0
   16f0e:	2201      	movs	r2, #1
   16f10:	4618      	mov	r0, r3
   16f12:	e9cd 3300 	strd	r3, r3, [sp]
   16f16:	4906      	ldr	r1, [pc, #24]	; (16f30 <att_timeout+0x2c>)
   16f18:	f012 fa40 	bl	2939c <z_log_msg_runtime_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   16f1c:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   16f20:	b004      	add	sp, #16
   16f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   16f26:	f7ff bf89 	b.w	16e3c <bt_att_disconnected>
   16f2a:	bf00      	nop
   16f2c:	00031b46 	.word	0x00031b46
   16f30:	0002d61c 	.word	0x0002d61c

00016f34 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   16f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f36:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   16f38:	b958      	cbnz	r0, 16f52 <bt_att_send+0x1e>
   16f3a:	4929      	ldr	r1, [pc, #164]	; (16fe0 <bt_att_send+0xac>)
   16f3c:	f640 63a4 	movw	r3, #3748	; 0xea4
   16f40:	4a28      	ldr	r2, [pc, #160]	; (16fe4 <bt_att_send+0xb0>)
   16f42:	4829      	ldr	r0, [pc, #164]	; (16fe8 <bt_att_send+0xb4>)
   16f44:	f010 fb55 	bl	275f2 <assert_print>
   16f48:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   16f4c:	4825      	ldr	r0, [pc, #148]	; (16fe4 <bt_att_send+0xb0>)
   16f4e:	f010 fb49 	bl	275e4 <assert_post_action>
   16f52:	b949      	cbnz	r1, 16f68 <bt_att_send+0x34>
   16f54:	4925      	ldr	r1, [pc, #148]	; (16fec <bt_att_send+0xb8>)
   16f56:	f640 63a5 	movw	r3, #3749	; 0xea5
   16f5a:	4a22      	ldr	r2, [pc, #136]	; (16fe4 <bt_att_send+0xb0>)
   16f5c:	4822      	ldr	r0, [pc, #136]	; (16fe8 <bt_att_send+0xb4>)
   16f5e:	f010 fb48 	bl	275f2 <assert_print>
   16f62:	f640 61a5 	movw	r1, #3749	; 0xea5
   16f66:	e7f1      	b.n	16f4c <bt_att_send+0x18>

	att = att_get(conn);
   16f68:	f7ff f93e 	bl	161e8 <att_get>
	if (!att) {
   16f6c:	4605      	mov	r5, r0
   16f6e:	b940      	cbnz	r0, 16f82 <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16f70:	69a0      	ldr	r0, [r4, #24]
   16f72:	f7fe ffb7 	bl	15ee4 <tx_meta_data_free>
		net_buf_unref(buf);
   16f76:	4620      	mov	r0, r4
   16f78:	f003 fa18 	bl	1a3ac <net_buf_unref>
		return -ENOTCONN;
   16f7c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   16f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   16f82:	f100 060c 	add.w	r6, r0, #12
   16f86:	4621      	mov	r1, r4
   16f88:	4630      	mov	r0, r6
   16f8a:	f003 f9e9 	bl	1a360 <net_buf_put>
	return list->head;
   16f8e:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16f90:	b14d      	cbz	r5, 16fa6 <bt_att_send+0x72>
	return node->next;
   16f92:	f855 49f0 	ldr.w	r4, [r5], #-240
   16f96:	b104      	cbz	r4, 16f9a <bt_att_send+0x66>
   16f98:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   16f9a:	4631      	mov	r1, r6
   16f9c:	4628      	mov	r0, r5
   16f9e:	f012 fa26 	bl	293ee <process_queue>
		if (!err) {
   16fa2:	4603      	mov	r3, r0
   16fa4:	b980      	cbnz	r0, 16fc8 <bt_att_send+0x94>
	return 0;
   16fa6:	2000      	movs	r0, #0
   16fa8:	e7ea      	b.n	16f80 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   16faa:	2103      	movs	r1, #3
   16fac:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16fb0:	f012 f91f 	bl	291f2 <atomic_test_bit>
   16fb4:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   16fb6:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16fba:	f012 f91a 	bl	291f2 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   16fbe:	4287      	cmp	r7, r0
   16fc0:	f06f 0301 	mvn.w	r3, #1
   16fc4:	d107      	bne.n	16fd6 <bt_att_send+0xa2>
   16fc6:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16fc8:	2c00      	cmp	r4, #0
   16fca:	d0ec      	beq.n	16fa6 <bt_att_send+0x72>
   16fcc:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   16fd0:	b922      	cbnz	r2, 16fdc <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   16fd2:	3302      	adds	r3, #2
   16fd4:	d0e9      	beq.n	16faa <bt_att_send+0x76>
{
   16fd6:	4625      	mov	r5, r4
   16fd8:	4614      	mov	r4, r2
   16fda:	e7de      	b.n	16f9a <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16fdc:	3af0      	subs	r2, #240	; 0xf0
   16fde:	e7f8      	b.n	16fd2 <bt_att_send+0x9e>
   16fe0:	00030bb6 	.word	0x00030bb6
   16fe4:	000318cf 	.word	0x000318cf
   16fe8:	0002e715 	.word	0x0002e715
   16fec:	000323e2 	.word	0x000323e2

00016ff0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   16ff0:	b510      	push	{r4, lr}
   16ff2:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   16ff4:	b958      	cbnz	r0, 1700e <bt_att_req_send+0x1e>
   16ff6:	4915      	ldr	r1, [pc, #84]	; (1704c <bt_att_req_send+0x5c>)
   16ff8:	f640 63ba 	movw	r3, #3770	; 0xeba
   16ffc:	4a14      	ldr	r2, [pc, #80]	; (17050 <bt_att_req_send+0x60>)
   16ffe:	4815      	ldr	r0, [pc, #84]	; (17054 <bt_att_req_send+0x64>)
   17000:	f010 faf7 	bl	275f2 <assert_print>
   17004:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   17008:	4811      	ldr	r0, [pc, #68]	; (17050 <bt_att_req_send+0x60>)
   1700a:	f010 faeb 	bl	275e4 <assert_post_action>
   1700e:	b949      	cbnz	r1, 17024 <bt_att_req_send+0x34>
   17010:	4911      	ldr	r1, [pc, #68]	; (17058 <bt_att_req_send+0x68>)
   17012:	f640 63bb 	movw	r3, #3771	; 0xebb
   17016:	4a0e      	ldr	r2, [pc, #56]	; (17050 <bt_att_req_send+0x60>)
   17018:	480e      	ldr	r0, [pc, #56]	; (17054 <bt_att_req_send+0x64>)
   1701a:	f010 faea 	bl	275f2 <assert_print>
   1701e:	f640 61bb 	movw	r1, #3771	; 0xebb
   17022:	e7f1      	b.n	17008 <bt_att_req_send+0x18>

	att = att_get(conn);
   17024:	f7ff f8e0 	bl	161e8 <att_get>
	if (!att) {
   17028:	b160      	cbz	r0, 17044 <bt_att_req_send+0x54>
	parent->next = child;
   1702a:	2300      	movs	r3, #0
   1702c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1702e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   17030:	b92b      	cbnz	r3, 1703e <bt_att_req_send+0x4e>
	list->head = node;
   17032:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   17036:	f012 fb43 	bl	296c0 <att_req_send_process>

	return 0;
   1703a:	2000      	movs	r0, #0
}
   1703c:	bd10      	pop	{r4, pc}
	parent->next = child;
   1703e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17040:	6084      	str	r4, [r0, #8]
}
   17042:	e7f8      	b.n	17036 <bt_att_req_send+0x46>
		return -ENOTCONN;
   17044:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17048:	e7f8      	b.n	1703c <bt_att_req_send+0x4c>
   1704a:	bf00      	nop
   1704c:	00030bb6 	.word	0x00030bb6
   17050:	000318cf 	.word	0x000318cf
   17054:	0002e715 	.word	0x0002e715
   17058:	0003197e 	.word	0x0003197e

0001705c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1705c:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1705e:	4606      	mov	r6, r0
   17060:	4d13      	ldr	r5, [pc, #76]	; (170b0 <find_cf_cfg+0x54>)
   17062:	b140      	cbz	r0, 17076 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17064:	462a      	mov	r2, r5
   17066:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1706a:	1e6c      	subs	r4, r5, #1
   1706c:	f011 ffc9 	bl	29002 <bt_conn_is_peer_addr_le>
   17070:	b198      	cbz	r0, 1709a <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17072:	4620      	mov	r0, r4
   17074:	e00c      	b.n	17090 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   17076:	4628      	mov	r0, r5
   17078:	490e      	ldr	r1, [pc, #56]	; (170b4 <find_cf_cfg+0x58>)
   1707a:	f012 fd61 	bl	29b40 <bt_addr_le_eq>
   1707e:	b940      	cbnz	r0, 17092 <find_cf_cfg+0x36>
   17080:	490c      	ldr	r1, [pc, #48]	; (170b4 <find_cf_cfg+0x58>)
   17082:	f105 0010 	add.w	r0, r5, #16
   17086:	f012 fd5b 	bl	29b40 <bt_addr_le_eq>
   1708a:	b120      	cbz	r0, 17096 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1708c:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   17090:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17092:	1e68      	subs	r0, r5, #1
   17094:	e7fc      	b.n	17090 <find_cf_cfg+0x34>
	return NULL;
   17096:	2000      	movs	r0, #0
   17098:	e7fa      	b.n	17090 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1709a:	4630      	mov	r0, r6
   1709c:	7c21      	ldrb	r1, [r4, #16]
   1709e:	f104 0211 	add.w	r2, r4, #17
   170a2:	f011 ffae 	bl	29002 <bt_conn_is_peer_addr_le>
   170a6:	2800      	cmp	r0, #0
   170a8:	d0f5      	beq.n	17096 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   170aa:	f104 0010 	add.w	r0, r4, #16
   170ae:	e7ef      	b.n	17090 <find_cf_cfg+0x34>
   170b0:	2002f3a1 	.word	0x2002f3a1
   170b4:	000306da 	.word	0x000306da

000170b8 <find_sc_cfg>:
{
   170b8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   170ba:	4c0e      	ldr	r4, [pc, #56]	; (170f4 <find_sc_cfg+0x3c>)
{
   170bc:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   170be:	7823      	ldrb	r3, [r4, #0]
{
   170c0:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   170c2:	4283      	cmp	r3, r0
   170c4:	d00c      	beq.n	170e0 <find_sc_cfg+0x28>
   170c6:	7b23      	ldrb	r3, [r4, #12]
   170c8:	42ab      	cmp	r3, r5
   170ca:	d110      	bne.n	170ee <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   170cc:	4631      	mov	r1, r6
   170ce:	480a      	ldr	r0, [pc, #40]	; (170f8 <find_sc_cfg+0x40>)
   170d0:	f012 fd36 	bl	29b40 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   170d4:	b158      	cbz	r0, 170ee <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   170d6:	2301      	movs	r3, #1
			return &sc_cfg[i];
   170d8:	220c      	movs	r2, #12
   170da:	fb02 4003 	mla	r0, r2, r3, r4
   170de:	e007      	b.n	170f0 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   170e0:	1c60      	adds	r0, r4, #1
   170e2:	f012 fd2d 	bl	29b40 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   170e6:	2800      	cmp	r0, #0
   170e8:	d0ed      	beq.n	170c6 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   170ea:	2300      	movs	r3, #0
   170ec:	e7f4      	b.n	170d8 <find_sc_cfg+0x20>
	return NULL;
   170ee:	2000      	movs	r0, #0
}
   170f0:	bd70      	pop	{r4, r5, r6, pc}
   170f2:	bf00      	nop
   170f4:	2002f7bc 	.word	0x2002f7bc
   170f8:	2002f7c9 	.word	0x2002f7c9

000170fc <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   170fc:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   170fe:	1c4a      	adds	r2, r1, #1
{
   17100:	460c      	mov	r4, r1
		if (conn) {
   17102:	4605      	mov	r5, r0
   17104:	b968      	cbnz	r0, 17122 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   17106:	4610      	mov	r0, r2
   17108:	490d      	ldr	r1, [pc, #52]	; (17140 <find_ccc_cfg+0x44>)
   1710a:	f012 fd19 	bl	29b40 <bt_addr_le_eq>
   1710e:	b930      	cbnz	r0, 1711e <find_ccc_cfg+0x22>
   17110:	490b      	ldr	r1, [pc, #44]	; (17140 <find_ccc_cfg+0x44>)
   17112:	f104 000b 	add.w	r0, r4, #11
   17116:	f012 fd13 	bl	29b40 <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1711a:	b170      	cbz	r0, 1713a <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1711c:	340a      	adds	r4, #10
   1711e:	4620      	mov	r0, r4
   17120:	e00c      	b.n	1713c <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   17122:	7809      	ldrb	r1, [r1, #0]
   17124:	f011 ff6d 	bl	29002 <bt_conn_is_peer_addr_le>
   17128:	2800      	cmp	r0, #0
   1712a:	d1f8      	bne.n	1711e <find_ccc_cfg+0x22>
   1712c:	4628      	mov	r0, r5
   1712e:	7aa1      	ldrb	r1, [r4, #10]
   17130:	f104 020b 	add.w	r2, r4, #11
   17134:	f011 ff65 	bl	29002 <bt_conn_is_peer_addr_le>
   17138:	e7ef      	b.n	1711a <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   1713a:	2000      	movs	r0, #0
}
   1713c:	bd38      	pop	{r3, r4, r5, pc}
   1713e:	bf00      	nop
   17140:	000306da 	.word	0x000306da

00017144 <read_ppcp>:
{
   17144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   17146:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   17148:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   1714c:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1714e:	4a06      	ldr	r2, [pc, #24]	; (17168 <read_ppcp+0x24>)
   17150:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   17154:	2308      	movs	r3, #8
   17156:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1715a:	9300      	str	r3, [sp, #0]
   1715c:	446b      	add	r3, sp
   1715e:	f012 fd03 	bl	29b68 <bt_gatt_attr_read.constprop.0>
}
   17162:	b005      	add	sp, #20
   17164:	f85d fb04 	ldr.w	pc, [sp], #4
   17168:	00280018 	.word	0x00280018

0001716c <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1716c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17170:	b085      	sub	sp, #20
   17172:	461e      	mov	r6, r3
   17174:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   17178:	4681      	mov	r9, r0
   1717a:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1717c:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   17180:	2b00      	cmp	r3, #0
   17182:	d14a      	bne.n	1721a <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   17184:	1e73      	subs	r3, r6, #1
   17186:	2b01      	cmp	r3, #1
   17188:	d84a      	bhi.n	17220 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1718a:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1718c:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1718e:	7815      	ldrb	r5, [r2, #0]
   17190:	bf18      	it	ne
   17192:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   17194:	f7ff ffb2 	bl	170fc <find_ccc_cfg>
	if (!cfg) {
   17198:	4604      	mov	r4, r0
   1719a:	b9e8      	cbnz	r0, 171d8 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1719c:	b91d      	cbnz	r5, 171a6 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1719e:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   171a0:	b005      	add	sp, #20
   171a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   171a6:	4641      	mov	r1, r8
   171a8:	f7ff ffa8 	bl	170fc <find_ccc_cfg>
		if (!cfg) {
   171ac:	4604      	mov	r4, r0
   171ae:	b958      	cbnz	r0, 171c8 <bt_gatt_attr_write_ccc+0x5c>
			LOG_WRN("No space to store CCC cfg");
   171b0:	4b1d      	ldr	r3, [pc, #116]	; (17228 <bt_gatt_attr_write_ccc+0xbc>)
   171b2:	9000      	str	r0, [sp, #0]
   171b4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   171b8:	2202      	movs	r2, #2
   171ba:	4603      	mov	r3, r0
   171bc:	491b      	ldr	r1, [pc, #108]	; (1722c <bt_gatt_attr_write_ccc+0xc0>)
   171be:	f012 fd5b 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   171c2:	f06f 0010 	mvn.w	r0, #16
   171c6:	e7eb      	b.n	171a0 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   171c8:	f109 0190 	add.w	r1, r9, #144	; 0x90
   171cc:	3001      	adds	r0, #1
   171ce:	f012 fcbf 	bl	29b50 <bt_addr_le_copy>
		cfg->id = conn->id;
   171d2:	f899 3008 	ldrb.w	r3, [r9, #8]
   171d6:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   171d8:	f8d8 301c 	ldr.w	r3, [r8, #28]
   171dc:	b98b      	cbnz	r3, 17202 <bt_gatt_attr_write_ccc+0x96>
	cfg->value = value;
   171de:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   171e0:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   171e4:	42ab      	cmp	r3, r5
   171e6:	d003      	beq.n	171f0 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   171e8:	4641      	mov	r1, r8
   171ea:	4638      	mov	r0, r7
   171ec:	f012 fc30 	bl	29a50 <gatt_ccc_changed>
	if (!value) {
   171f0:	2d00      	cmp	r5, #0
   171f2:	d1d4      	bne.n	1719e <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   171f4:	490e      	ldr	r1, [pc, #56]	; (17230 <bt_gatt_attr_write_ccc+0xc4>)
   171f6:	1c60      	adds	r0, r4, #1
   171f8:	f012 fcaa 	bl	29b50 <bt_addr_le_copy>
	cfg->id = 0U;
   171fc:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   171fe:	8125      	strh	r5, [r4, #8]
}
   17200:	e7cd      	b.n	1719e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   17202:	462a      	mov	r2, r5
   17204:	4639      	mov	r1, r7
   17206:	4648      	mov	r0, r9
   17208:	4798      	blx	r3
		if (write < 0) {
   1720a:	2800      	cmp	r0, #0
   1720c:	dbc8      	blt.n	171a0 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1720e:	3801      	subs	r0, #1
   17210:	2801      	cmp	r0, #1
   17212:	d9e4      	bls.n	171de <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   17214:	f06f 000d 	mvn.w	r0, #13
   17218:	e7c2      	b.n	171a0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1721a:	f06f 0006 	mvn.w	r0, #6
   1721e:	e7bf      	b.n	171a0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17220:	f06f 000c 	mvn.w	r0, #12
   17224:	e7bc      	b.n	171a0 <bt_gatt_attr_write_ccc+0x34>
   17226:	bf00      	nop
   17228:	00031b59 	.word	0x00031b59
   1722c:	0002d63c 	.word	0x0002d63c
   17230:	000306da 	.word	0x000306da

00017234 <clear_cf_cfg>:
{
   17234:	4602      	mov	r2, r0
   17236:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17238:	4907      	ldr	r1, [pc, #28]	; (17258 <clear_cf_cfg+0x24>)
   1723a:	3001      	adds	r0, #1
   1723c:	f012 fc88 	bl	29b50 <bt_addr_le_copy>
   17240:	2300      	movs	r3, #0
   17242:	320c      	adds	r2, #12
   17244:	f802 3c04 	strb.w	r3, [r2, #-4]
   17248:	e8d2 1fef 	ldaex	r1, [r2]
   1724c:	e8c2 3fe0 	stlex	r0, r3, [r2]
   17250:	2800      	cmp	r0, #0
   17252:	d1f9      	bne.n	17248 <clear_cf_cfg+0x14>
}
   17254:	bd08      	pop	{r3, pc}
   17256:	bf00      	nop
   17258:	000306da 	.word	0x000306da

0001725c <sc_save>:
{
   1725c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17260:	4680      	mov	r8, r0
   17262:	460f      	mov	r7, r1
   17264:	4616      	mov	r6, r2
   17266:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   17268:	f7ff ff26 	bl	170b8 <find_sc_cfg>
	if (!cfg) {
   1726c:	4604      	mov	r4, r0
   1726e:	b9a8      	cbnz	r0, 1729c <sc_save+0x40>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17270:	4911      	ldr	r1, [pc, #68]	; (172b8 <sc_save+0x5c>)
   17272:	f7ff ff21 	bl	170b8 <find_sc_cfg>
		if (!cfg) {
   17276:	4604      	mov	r4, r0
   17278:	b958      	cbnz	r0, 17292 <sc_save+0x36>
			LOG_ERR("unable to save SC: no cfg left");
   1727a:	4b10      	ldr	r3, [pc, #64]	; (172bc <sc_save+0x60>)
   1727c:	2201      	movs	r2, #1
   1727e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17282:	490f      	ldr	r1, [pc, #60]	; (172c0 <sc_save+0x64>)
   17284:	4603      	mov	r3, r0
   17286:	9000      	str	r0, [sp, #0]
   17288:	f012 fcf6 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
}
   1728c:	b004      	add	sp, #16
   1728e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   17292:	4639      	mov	r1, r7
		cfg->id = id;
   17294:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   17298:	f012 fc5a 	bl	29b50 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1729c:	8922      	ldrh	r2, [r4, #8]
   1729e:	8963      	ldrh	r3, [r4, #10]
   172a0:	b91a      	cbnz	r2, 172aa <sc_save+0x4e>
   172a2:	b92b      	cbnz	r3, 172b0 <sc_save+0x54>
		cfg->data.start = start;
   172a4:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   172a6:	8165      	strh	r5, [r4, #10]
   172a8:	e7f0      	b.n	1728c <sc_save+0x30>
	if (new_start >= *start && new_end <= *end) {
   172aa:	42b2      	cmp	r2, r6
		*start = new_start;
   172ac:	bf88      	it	hi
   172ae:	8126      	strhhi	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   172b0:	42ab      	cmp	r3, r5
   172b2:	d2eb      	bcs.n	1728c <sc_save+0x30>
   172b4:	e7f7      	b.n	172a6 <sc_save+0x4a>
   172b6:	bf00      	nop
   172b8:	000306da 	.word	0x000306da
   172bc:	00031b73 	.word	0x00031b73
   172c0:	0002d63c 	.word	0x0002d63c

000172c4 <cf_write>:
{
   172c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   172c8:	461f      	mov	r7, r3
   172ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   172ce:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   172d0:	2b01      	cmp	r3, #1
{
   172d2:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   172d4:	d83b      	bhi.n	1734e <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   172d6:	443b      	add	r3, r7
   172d8:	2b01      	cmp	r3, #1
   172da:	463d      	mov	r5, r7
   172dc:	dc3a      	bgt.n	17354 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   172de:	f7ff febd 	bl	1705c <find_cf_cfg>
	if (!cfg) {
   172e2:	4604      	mov	r4, r0
   172e4:	b990      	cbnz	r0, 1730c <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   172e6:	f7ff feb9 	bl	1705c <find_cf_cfg>
	if (!cfg) {
   172ea:	4604      	mov	r4, r0
   172ec:	b970      	cbnz	r0, 1730c <cf_write+0x48>
		LOG_WRN("No space to store Client Supported Features");
   172ee:	4b1c      	ldr	r3, [pc, #112]	; (17360 <cf_write+0x9c>)
   172f0:	2202      	movs	r2, #2
   172f2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   172f6:	491b      	ldr	r1, [pc, #108]	; (17364 <cf_write+0xa0>)
   172f8:	4603      	mov	r3, r0
   172fa:	9000      	str	r0, [sp, #0]
   172fc:	f012 fcbc 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17300:	f06f 0510 	mvn.w	r5, #16
}
   17304:	4628      	mov	r0, r5
   17306:	b004      	add	sp, #16
   17308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1730c:	b197      	cbz	r7, 17334 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   1730e:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17310:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   17312:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17316:	fa21 f003 	lsr.w	r0, r1, r3
   1731a:	07c7      	lsls	r7, r0, #31
   1731c:	d503      	bpl.n	17326 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1731e:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17322:	07c0      	lsls	r0, r0, #31
   17324:	d519      	bpl.n	1735a <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17326:	3301      	adds	r3, #1
   17328:	2b03      	cmp	r3, #3
   1732a:	d1f4      	bne.n	17316 <cf_write+0x52>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1732c:	f002 0207 	and.w	r2, r2, #7
   17330:	4311      	orrs	r1, r2
   17332:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17334:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17338:	1c60      	adds	r0, r4, #1
   1733a:	f012 fc09 	bl	29b50 <bt_addr_le_copy>
	cfg->id = conn->id;
   1733e:	4620      	mov	r0, r4
   17340:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   17342:	2100      	movs	r1, #0
	cfg->id = conn->id;
   17344:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   17348:	f012 fcc6 	bl	29cd8 <atomic_set_bit>
	return len;
   1734c:	e7da      	b.n	17304 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1734e:	f06f 0506 	mvn.w	r5, #6
   17352:	e7d7      	b.n	17304 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17354:	f06f 050c 	mvn.w	r5, #12
   17358:	e7d4      	b.n	17304 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1735a:	f06f 0512 	mvn.w	r5, #18
   1735e:	e7d1      	b.n	17304 <cf_write+0x40>
   17360:	00031b92 	.word	0x00031b92
   17364:	0002d63c 	.word	0x0002d63c

00017368 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   17368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1736c:	4b28      	ldr	r3, [pc, #160]	; (17410 <disconnected_cb+0xa8>)
{
   1736e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17370:	6882      	ldr	r2, [r0, #8]
{
   17372:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17374:	429a      	cmp	r2, r3
   17376:	d12b      	bne.n	173d0 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   17378:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1737a:	8aab      	ldrh	r3, [r5, #20]
   1737c:	b343      	cbz	r3, 173d0 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   1737e:	f04f 0800 	mov.w	r8, #0
   17382:	1c6c      	adds	r4, r5, #1
   17384:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   17388:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1738c:	b19b      	cbz	r3, 173b6 <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1738e:	4622      	mov	r2, r4
   17390:	4630      	mov	r0, r6
   17392:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   17396:	f011 fe34 	bl	29002 <bt_conn_is_peer_addr_le>
   1739a:	b9e0      	cbnz	r0, 173d6 <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1739c:	4621      	mov	r1, r4
   1739e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   173a2:	f7fe f9b5 	bl	15710 <bt_conn_lookup_addr_le>
			if (tmp) {
   173a6:	b130      	cbz	r0, 173b6 <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   173a8:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   173aa:	2b07      	cmp	r3, #7
   173ac:	bf08      	it	eq
   173ae:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   173b2:	f7fd fee1 	bl	15178 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   173b6:	340a      	adds	r4, #10
   173b8:	454c      	cmp	r4, r9
   173ba:	d1e5      	bne.n	17388 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   173bc:	f1b8 0f00 	cmp.w	r8, #0
   173c0:	d106      	bne.n	173d0 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   173c2:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   173c4:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   173c8:	b113      	cbz	r3, 173d0 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   173ca:	4641      	mov	r1, r8
   173cc:	4638      	mov	r0, r7
   173ce:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   173d0:	2001      	movs	r0, #1
   173d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   173d6:	f106 0a90 	add.w	sl, r6, #144	; 0x90
   173da:	4651      	mov	r1, sl
   173dc:	7a30      	ldrb	r0, [r6, #8]
   173de:	f011 fb35 	bl	28a4c <bt_addr_le_is_bonded>
   173e2:	b978      	cbnz	r0, 17404 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   173e4:	4b0b      	ldr	r3, [pc, #44]	; (17414 <disconnected_cb+0xac>)
   173e6:	429d      	cmp	r5, r3
   173e8:	d102      	bne.n	173f0 <disconnected_cb+0x88>
					sc_clear(conn);
   173ea:	4630      	mov	r0, r6
   173ec:	f012 fc53 	bl	29c96 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   173f0:	4620      	mov	r0, r4
   173f2:	4909      	ldr	r1, [pc, #36]	; (17418 <disconnected_cb+0xb0>)
   173f4:	f012 fbac 	bl	29b50 <bt_addr_le_copy>
	cfg->id = 0U;
   173f8:	2300      	movs	r3, #0
   173fa:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   173fe:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   17402:	e7d8      	b.n	173b6 <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17404:	4651      	mov	r1, sl
   17406:	4620      	mov	r0, r4
   17408:	f012 fba2 	bl	29b50 <bt_addr_le_copy>
   1740c:	e7d3      	b.n	173b6 <disconnected_cb+0x4e>
   1740e:	bf00      	nop
   17410:	0001716d 	.word	0x0001716d
   17414:	20008560 	.word	0x20008560
   17418:	000306da 	.word	0x000306da

0001741c <sc_indicate_rsp>:
{
   1741c:	b510      	push	{r4, lr}
   1741e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17420:	4811      	ldr	r0, [pc, #68]	; (17468 <sc_indicate_rsp+0x4c>)
   17422:	e8d0 3fef 	ldaex	r3, [r0]
   17426:	f023 0302 	bic.w	r3, r3, #2
   1742a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1742e:	2a00      	cmp	r2, #0
   17430:	d1f7      	bne.n	17422 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17432:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17436:	07da      	lsls	r2, r3, #31
   17438:	d504      	bpl.n	17444 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   1743a:	2200      	movs	r2, #0
   1743c:	2300      	movs	r3, #0
   1743e:	3830      	subs	r0, #48	; 0x30
   17440:	f00a fab2 	bl	219a8 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   17444:	4620      	mov	r0, r4
   17446:	f012 fad6 	bl	299f6 <bt_att_fixed_chan_only>
   1744a:	b160      	cbz	r0, 17466 <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   1744c:	4620      	mov	r0, r4
   1744e:	f7ff fe05 	bl	1705c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   17452:	b140      	cbz	r0, 17466 <sc_indicate_rsp+0x4a>
   17454:	7a03      	ldrb	r3, [r0, #8]
   17456:	07db      	lsls	r3, r3, #31
   17458:	d505      	bpl.n	17466 <sc_indicate_rsp+0x4a>
}
   1745a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1745e:	2100      	movs	r1, #0
   17460:	300c      	adds	r0, #12
   17462:	f012 bc39 	b.w	29cd8 <atomic_set_bit>
}
   17466:	bd10      	pop	{r4, pc}
   17468:	20009aa8 	.word	0x20009aa8

0001746c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1746c:	2201      	movs	r2, #1
{
   1746e:	b510      	push	{r4, lr}
   17470:	4b24      	ldr	r3, [pc, #144]	; (17504 <bt_gatt_init+0x98>)
   17472:	e8d3 1fef 	ldaex	r1, [r3]
   17476:	2900      	cmp	r1, #0
   17478:	d103      	bne.n	17482 <bt_gatt_init+0x16>
   1747a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1747e:	2800      	cmp	r0, #0
   17480:	d1f7      	bne.n	17472 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   17482:	d13e      	bne.n	17502 <bt_gatt_init+0x96>
   17484:	4b20      	ldr	r3, [pc, #128]	; (17508 <bt_gatt_init+0x9c>)
   17486:	e8d3 1fef 	ldaex	r1, [r3]
   1748a:	2900      	cmp	r1, #0
   1748c:	d103      	bne.n	17496 <bt_gatt_init+0x2a>
   1748e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   17492:	2800      	cmp	r0, #0
   17494:	d1f7      	bne.n	17486 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   17496:	d120      	bne.n	174da <bt_gatt_init+0x6e>
   17498:	2000      	movs	r0, #0
   1749a:	491c      	ldr	r1, [pc, #112]	; (1750c <bt_gatt_init+0xa0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1749c:	4a1c      	ldr	r2, [pc, #112]	; (17510 <bt_gatt_init+0xa4>)
   1749e:	880b      	ldrh	r3, [r1, #0]
   174a0:	4c1c      	ldr	r4, [pc, #112]	; (17514 <bt_gatt_init+0xa8>)
   174a2:	42a2      	cmp	r2, r4
   174a4:	d916      	bls.n	174d4 <bt_gatt_init+0x68>
   174a6:	b100      	cbz	r0, 174aa <bt_gatt_init+0x3e>
   174a8:	800b      	strh	r3, [r1, #0]
   174aa:	491b      	ldr	r1, [pc, #108]	; (17518 <bt_gatt_init+0xac>)
   174ac:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   174b0:	4a1a      	ldr	r2, [pc, #104]	; (1751c <bt_gatt_init+0xb0>)
   174b2:	481b      	ldr	r0, [pc, #108]	; (17520 <bt_gatt_init+0xb4>)
   174b4:	f010 f89d 	bl	275f2 <assert_print>
   174b8:	481a      	ldr	r0, [pc, #104]	; (17524 <bt_gatt_init+0xb8>)
   174ba:	f010 f89a 	bl	275f2 <assert_print>
   174be:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   174c2:	4816      	ldr	r0, [pc, #88]	; (1751c <bt_gatt_init+0xb0>)
   174c4:	f010 f88e 	bl	275e4 <assert_post_action>
		last_static_handle += svc->attr_count;
   174c8:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   174ca:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   174cc:	4403      	add	r3, r0
   174ce:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   174d0:	2001      	movs	r0, #1
   174d2:	e7e6      	b.n	174a2 <bt_gatt_init+0x36>
   174d4:	d3f8      	bcc.n	174c8 <bt_gatt_init+0x5c>
   174d6:	b100      	cbz	r0, 174da <bt_gatt_init+0x6e>
   174d8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   174da:	2200      	movs	r2, #0
   174dc:	4b12      	ldr	r3, [pc, #72]	; (17528 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   174de:	4913      	ldr	r1, [pc, #76]	; (1752c <bt_gatt_init+0xc0>)
   174e0:	4813      	ldr	r0, [pc, #76]	; (17530 <bt_gatt_init+0xc4>)
	list->tail = NULL;
   174e2:	e9c3 2200 	strd	r2, r2, [r3]
   174e6:	f00a f943 	bl	21770 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   174ea:	f44f 72a4 	mov.w	r2, #328	; 0x148
   174ee:	2300      	movs	r3, #0
   174f0:	480f      	ldr	r0, [pc, #60]	; (17530 <bt_gatt_init+0xc4>)
   174f2:	f7fa fea3 	bl	1223c <bt_long_wq_schedule>
}
   174f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   174fa:	490e      	ldr	r1, [pc, #56]	; (17534 <bt_gatt_init+0xc8>)
   174fc:	480e      	ldr	r0, [pc, #56]	; (17538 <bt_gatt_init+0xcc>)
   174fe:	f00a b937 	b.w	21770 <k_work_init_delayable>
}
   17502:	bd10      	pop	{r4, pc}
   17504:	2002f3c4 	.word	0x2002f3c4
   17508:	2002f3c0 	.word	0x2002f3c0
   1750c:	2002f7d4 	.word	0x2002f7d4
   17510:	0002d5cc 	.word	0x0002d5cc
   17514:	0002d5e4 	.word	0x0002d5e4
   17518:	00031bf5 	.word	0x00031bf5
   1751c:	00031bbe 	.word	0x00031bbe
   17520:	0002e715 	.word	0x0002e715
   17524:	0002f82e 	.word	0x0002f82e
   17528:	2002f3c8 	.word	0x2002f3c8
   1752c:	00029dc5 	.word	0x00029dc5
   17530:	20009a00 	.word	0x20009a00
   17534:	00017bb5 	.word	0x00017bb5
   17538:	20009a78 	.word	0x20009a78

0001753c <bt_gatt_attr_get_handle>:
	if (!attr) {
   1753c:	4603      	mov	r3, r0
{
   1753e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   17542:	b398      	cbz	r0, 175ac <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   17544:	8a00      	ldrh	r0, [r0, #16]
   17546:	bb88      	cbnz	r0, 175ac <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   17548:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1754a:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1754e:	4919      	ldr	r1, [pc, #100]	; (175b4 <bt_gatt_attr_get_handle+0x78>)
   17550:	f8df e064 	ldr.w	lr, [pc, #100]	; 175b8 <bt_gatt_attr_get_handle+0x7c>
   17554:	4571      	cmp	r1, lr
   17556:	d928      	bls.n	175aa <bt_gatt_attr_get_handle+0x6e>
   17558:	4918      	ldr	r1, [pc, #96]	; (175bc <bt_gatt_attr_get_handle+0x80>)
   1755a:	f240 635d 	movw	r3, #1629	; 0x65d
   1755e:	4a18      	ldr	r2, [pc, #96]	; (175c0 <bt_gatt_attr_get_handle+0x84>)
   17560:	4818      	ldr	r0, [pc, #96]	; (175c4 <bt_gatt_attr_get_handle+0x88>)
   17562:	f010 f846 	bl	275f2 <assert_print>
   17566:	4818      	ldr	r0, [pc, #96]	; (175c8 <bt_gatt_attr_get_handle+0x8c>)
   17568:	f010 f843 	bl	275f2 <assert_print>
   1756c:	f240 615d 	movw	r1, #1629	; 0x65d
   17570:	4813      	ldr	r0, [pc, #76]	; (175c0 <bt_gatt_attr_get_handle+0x84>)
   17572:	f010 f837 	bl	275e4 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17576:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1757a:	42bb      	cmp	r3, r7
   1757c:	d304      	bcc.n	17588 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1757e:	fb0c 7206 	mla	r2, ip, r6, r7
   17582:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   17584:	4293      	cmp	r3, r2
   17586:	d90e      	bls.n	175a6 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   17588:	4434      	add	r4, r6
   1758a:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1758c:	4614      	mov	r4, r2
   1758e:	3108      	adds	r1, #8
   17590:	e7e0      	b.n	17554 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   17592:	fb0c 7805 	mla	r8, ip, r5, r7
   17596:	4543      	cmp	r3, r8
   17598:	d00a      	beq.n	175b0 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1759a:	3501      	adds	r5, #1
   1759c:	1962      	adds	r2, r4, r5
   1759e:	42b5      	cmp	r5, r6
   175a0:	b292      	uxth	r2, r2
   175a2:	d1f6      	bne.n	17592 <bt_gatt_attr_get_handle+0x56>
   175a4:	e7f2      	b.n	1758c <bt_gatt_attr_get_handle+0x50>
   175a6:	2500      	movs	r5, #0
   175a8:	e7f8      	b.n	1759c <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   175aa:	d3e4      	bcc.n	17576 <bt_gatt_attr_get_handle+0x3a>
}
   175ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   175b0:	4610      	mov	r0, r2
   175b2:	e7fb      	b.n	175ac <bt_gatt_attr_get_handle+0x70>
   175b4:	0002d5cc 	.word	0x0002d5cc
   175b8:	0002d5e4 	.word	0x0002d5e4
   175bc:	00031bee 	.word	0x00031bee
   175c0:	00031bbe 	.word	0x00031bbe
   175c4:	0002e715 	.word	0x0002e715
   175c8:	0002f82e 	.word	0x0002f82e

000175cc <bt_gatt_foreach_attr_type>:
{
   175cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175d0:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   175d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   175d6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   175da:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   175dc:	2d00      	cmp	r5, #0
   175de:	bf08      	it	eq
   175e0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   175e2:	4b2b      	ldr	r3, [pc, #172]	; (17690 <bt_gatt_foreach_attr_type+0xc4>)
{
   175e4:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   175e6:	881b      	ldrh	r3, [r3, #0]
{
   175e8:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   175ea:	4283      	cmp	r3, r0
   175ec:	d232      	bcs.n	17654 <bt_gatt_foreach_attr_type+0x88>
}
   175ee:	b003      	add	sp, #12
   175f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   175f4:	4640      	mov	r0, r8
   175f6:	5889      	ldr	r1, [r1, r2]
   175f8:	9301      	str	r3, [sp, #4]
   175fa:	f011 f8da 	bl	287b2 <bt_uuid_cmp>
   175fe:	9b01      	ldr	r3, [sp, #4]
   17600:	b190      	cbz	r0, 17628 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17602:	3401      	adds	r4, #1
   17604:	f10a 0a01 	add.w	sl, sl, #1
   17608:	b2a4      	uxth	r4, r4
   1760a:	6873      	ldr	r3, [r6, #4]
   1760c:	4553      	cmp	r3, sl
   1760e:	d92c      	bls.n	1766a <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   17610:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17612:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   17614:	429c      	cmp	r4, r3
   17616:	d8ea      	bhi.n	175ee <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   17618:	42bc      	cmp	r4, r7
   1761a:	d3f2      	bcc.n	17602 <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1761c:	fb0b f20a 	mul.w	r2, fp, sl
   17620:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17622:	f1b8 0f00 	cmp.w	r8, #0
   17626:	d1e5      	bne.n	175f4 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   17628:	f1b9 0f00 	cmp.w	r9, #0
   1762c:	d10b      	bne.n	17646 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   1762e:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   17630:	4618      	mov	r0, r3
	*num_matches -= 1;
   17632:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17634:	4621      	mov	r1, r4
   17636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1763a:	4798      	blx	r3
	if (!*num_matches) {
   1763c:	2d00      	cmp	r5, #0
   1763e:	d0d6      	beq.n	175ee <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17640:	2800      	cmp	r0, #0
   17642:	d1de      	bne.n	17602 <bt_gatt_foreach_attr_type+0x36>
   17644:	e7d3      	b.n	175ee <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17646:	68da      	ldr	r2, [r3, #12]
   17648:	4591      	cmp	r9, r2
   1764a:	d1da      	bne.n	17602 <bt_gatt_foreach_attr_type+0x36>
   1764c:	e7ef      	b.n	1762e <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1764e:	f04f 0a00 	mov.w	sl, #0
   17652:	e7da      	b.n	1760a <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   17654:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17656:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1765a:	4e0e      	ldr	r6, [pc, #56]	; (17694 <bt_gatt_foreach_attr_type+0xc8>)
   1765c:	e006      	b.n	1766c <bt_gatt_foreach_attr_type+0xa0>
   1765e:	d2c6      	bcs.n	175ee <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   17660:	6873      	ldr	r3, [r6, #4]
   17662:	4423      	add	r3, r4
   17664:	42bb      	cmp	r3, r7
   17666:	d2f2      	bcs.n	1764e <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   17668:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1766a:	3608      	adds	r6, #8
   1766c:	4b0a      	ldr	r3, [pc, #40]	; (17698 <bt_gatt_foreach_attr_type+0xcc>)
   1766e:	429e      	cmp	r6, r3
   17670:	d9f5      	bls.n	1765e <bt_gatt_foreach_attr_type+0x92>
   17672:	490a      	ldr	r1, [pc, #40]	; (1769c <bt_gatt_foreach_attr_type+0xd0>)
   17674:	f240 7321 	movw	r3, #1825	; 0x721
   17678:	4a09      	ldr	r2, [pc, #36]	; (176a0 <bt_gatt_foreach_attr_type+0xd4>)
   1767a:	480a      	ldr	r0, [pc, #40]	; (176a4 <bt_gatt_foreach_attr_type+0xd8>)
   1767c:	f00f ffb9 	bl	275f2 <assert_print>
   17680:	4809      	ldr	r0, [pc, #36]	; (176a8 <bt_gatt_foreach_attr_type+0xdc>)
   17682:	f00f ffb6 	bl	275f2 <assert_print>
   17686:	f240 7121 	movw	r1, #1825	; 0x721
   1768a:	4805      	ldr	r0, [pc, #20]	; (176a0 <bt_gatt_foreach_attr_type+0xd4>)
   1768c:	f00f ffaa 	bl	275e4 <assert_post_action>
   17690:	2002f7d4 	.word	0x2002f7d4
   17694:	0002d5cc 	.word	0x0002d5cc
   17698:	0002d5e4 	.word	0x0002d5e4
   1769c:	00031bee 	.word	0x00031bee
   176a0:	00031bbe 	.word	0x00031bbe
   176a4:	0002e715 	.word	0x0002e715
   176a8:	0002f82e 	.word	0x0002f82e

000176ac <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   176ac:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   176ae:	b510      	push	{r4, lr}
   176b0:	b0cc      	sub	sp, #304	; 0x130
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   176b2:	aa20      	add	r2, sp, #128	; 0x80
   176b4:	a904      	add	r1, sp, #16
   176b6:	a808      	add	r0, sp, #32
	uint8_t key[16] = {};
   176b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
   176bc:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   176c0:	f010 fcda 	bl	28078 <tc_cmac_setup>
   176c4:	4603      	mov	r3, r0
   176c6:	b948      	cbnz	r0, 176dc <db_hash_gen.constprop.0+0x30>
		LOG_ERR("Unable to setup AES CMAC");
   176c8:	4a17      	ldr	r2, [pc, #92]	; (17728 <db_hash_gen.constprop.0+0x7c>)
		LOG_ERR("Unable to calculate hash");
   176ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
   176ce:	4917      	ldr	r1, [pc, #92]	; (1772c <db_hash_gen.constprop.0+0x80>)
   176d0:	2201      	movs	r2, #1
   176d2:	9300      	str	r3, [sp, #0]
   176d4:	f012 fad0 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
}
   176d8:	b04c      	add	sp, #304	; 0x130
   176da:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   176dc:	ab08      	add	r3, sp, #32
   176de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   176e2:	2001      	movs	r0, #1
   176e4:	4a12      	ldr	r2, [pc, #72]	; (17730 <db_hash_gen.constprop.0+0x84>)
   176e6:	f012 fb62 	bl	29dae <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   176ea:	4812      	ldr	r0, [pc, #72]	; (17734 <db_hash_gen.constprop.0+0x88>)
   176ec:	a908      	add	r1, sp, #32
   176ee:	f010 fd58 	bl	281a2 <tc_cmac_final>
   176f2:	4603      	mov	r3, r0
   176f4:	b908      	cbnz	r0, 176fa <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   176f6:	4a10      	ldr	r2, [pc, #64]	; (17738 <db_hash_gen.constprop.0+0x8c>)
   176f8:	e7e7      	b.n	176ca <db_hash_gen.constprop.0+0x1e>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   176fa:	2208      	movs	r2, #8
   176fc:	4b0d      	ldr	r3, [pc, #52]	; (17734 <db_hash_gen.constprop.0+0x88>)
   176fe:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   17702:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17704:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   17708:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1770a:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1770e:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   17710:	d1f7      	bne.n	17702 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17712:	4b0a      	ldr	r3, [pc, #40]	; (1773c <db_hash_gen.constprop.0+0x90>)
   17714:	e8d3 1fef 	ldaex	r1, [r3]
   17718:	f041 0104 	orr.w	r1, r1, #4
   1771c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   17720:	2a00      	cmp	r2, #0
   17722:	d0d9      	beq.n	176d8 <db_hash_gen.constprop.0+0x2c>
   17724:	e7f6      	b.n	17714 <db_hash_gen.constprop.0+0x68>
   17726:	bf00      	nop
   17728:	00031c1d 	.word	0x00031c1d
   1772c:	0002d63c 	.word	0x0002d63c
   17730:	00029a9b 	.word	0x00029a9b
   17734:	200099f0 	.word	0x200099f0
   17738:	00031c36 	.word	0x00031c36
   1773c:	20009aa8 	.word	0x20009aa8

00017740 <db_hash_read>:
{
   17740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17744:	4914      	ldr	r1, [pc, #80]	; (17798 <db_hash_read+0x58>)
{
   17746:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17748:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1774c:	4614      	mov	r4, r2
   1774e:	461d      	mov	r5, r3
   17750:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17754:	f00a f988 	bl	21a68 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17758:	4b10      	ldr	r3, [pc, #64]	; (1779c <db_hash_read+0x5c>)
   1775a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1775e:	0759      	lsls	r1, r3, #29
   17760:	d401      	bmi.n	17766 <db_hash_read+0x26>
		db_hash_gen(true);
   17762:	f7ff ffa3 	bl	176ac <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   17766:	4630      	mov	r0, r6
   17768:	f7ff fc78 	bl	1705c <find_cf_cfg>
	if (cfg &&
   1776c:	b150      	cbz	r0, 17784 <db_hash_read+0x44>
   1776e:	7a03      	ldrb	r3, [r0, #8]
   17770:	07da      	lsls	r2, r3, #31
   17772:	d507      	bpl.n	17784 <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   17774:	300c      	adds	r0, #12
   17776:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   1777a:	07db      	lsls	r3, r3, #31
   1777c:	d402      	bmi.n	17784 <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   1777e:	2101      	movs	r1, #1
   17780:	f012 faaa 	bl	29cd8 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17784:	2310      	movs	r3, #16
   17786:	463a      	mov	r2, r7
   17788:	9306      	str	r3, [sp, #24]
   1778a:	4629      	mov	r1, r5
   1778c:	4620      	mov	r0, r4
}
   1778e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17792:	4b03      	ldr	r3, [pc, #12]	; (177a0 <db_hash_read+0x60>)
   17794:	f012 b9e8 	b.w	29b68 <bt_gatt_attr_read.constprop.0>
   17798:	20009a30 	.word	0x20009a30
   1779c:	20009aa8 	.word	0x20009aa8
   177a0:	200099f0 	.word	0x200099f0

000177a4 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   177a4:	2300      	movs	r3, #0
{
   177a6:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   177a8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   177aa:	f7ff fec7 	bl	1753c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   177ae:	1c41      	adds	r1, r0, #1
   177b0:	b289      	uxth	r1, r1
   177b2:	4608      	mov	r0, r1
   177b4:	4a03      	ldr	r2, [pc, #12]	; (177c4 <bt_gatt_attr_next+0x20>)
   177b6:	ab01      	add	r3, sp, #4
   177b8:	f012 faf9 	bl	29dae <bt_gatt_foreach_attr>
}
   177bc:	9801      	ldr	r0, [sp, #4]
   177be:	b003      	add	sp, #12
   177c0:	f85d fb04 	ldr.w	pc, [sp], #4
   177c4:	00029a4b 	.word	0x00029a4b

000177c8 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   177c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   177cc:	460c      	mov	r4, r1
   177ce:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   177d0:	4605      	mov	r5, r0
   177d2:	b970      	cbnz	r0, 177f2 <bt_gatt_is_subscribed+0x2a>
   177d4:	4960      	ldr	r1, [pc, #384]	; (17958 <bt_gatt_is_subscribed+0x190>)
   177d6:	f640 434d 	movw	r3, #3149	; 0xc4d
   177da:	4a60      	ldr	r2, [pc, #384]	; (1795c <bt_gatt_is_subscribed+0x194>)
   177dc:	4860      	ldr	r0, [pc, #384]	; (17960 <bt_gatt_is_subscribed+0x198>)
   177de:	f00f ff08 	bl	275f2 <assert_print>
   177e2:	4860      	ldr	r0, [pc, #384]	; (17964 <bt_gatt_is_subscribed+0x19c>)
   177e4:	f00f ff05 	bl	275f2 <assert_print>
   177e8:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   177ec:	485b      	ldr	r0, [pc, #364]	; (1795c <bt_gatt_is_subscribed+0x194>)
   177ee:	f00f fef9 	bl	275e4 <assert_post_action>
   177f2:	b961      	cbnz	r1, 1780e <bt_gatt_is_subscribed+0x46>
   177f4:	495c      	ldr	r1, [pc, #368]	; (17968 <bt_gatt_is_subscribed+0x1a0>)
   177f6:	f640 434e 	movw	r3, #3150	; 0xc4e
   177fa:	4a58      	ldr	r2, [pc, #352]	; (1795c <bt_gatt_is_subscribed+0x194>)
   177fc:	4858      	ldr	r0, [pc, #352]	; (17960 <bt_gatt_is_subscribed+0x198>)
   177fe:	f00f fef8 	bl	275f2 <assert_print>
   17802:	4858      	ldr	r0, [pc, #352]	; (17964 <bt_gatt_is_subscribed+0x19c>)
   17804:	f00f fef5 	bl	275f2 <assert_print>
   17808:	f640 414e 	movw	r1, #3150	; 0xc4e
   1780c:	e7ee      	b.n	177ec <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   1780e:	7b43      	ldrb	r3, [r0, #13]
   17810:	2b07      	cmp	r3, #7
   17812:	d110      	bne.n	17836 <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   17814:	2300      	movs	r3, #0
   17816:	f88d 300c 	strb.w	r3, [sp, #12]
   1781a:	f642 0303 	movw	r3, #10243	; 0x2803
   1781e:	6820      	ldr	r0, [r4, #0]
   17820:	a903      	add	r1, sp, #12
   17822:	f8ad 300e 	strh.w	r3, [sp, #14]
   17826:	f010 ffc4 	bl	287b2 <bt_uuid_cmp>
   1782a:	b9d0      	cbnz	r0, 17862 <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   1782c:	68e3      	ldr	r3, [r4, #12]
   1782e:	799b      	ldrb	r3, [r3, #6]
   17830:	f013 0f30 	tst.w	r3, #48	; 0x30
   17834:	d103      	bne.n	1783e <bt_gatt_is_subscribed+0x76>
		return false;
   17836:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   17838:	b004      	add	sp, #16
   1783a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1783e:	4620      	mov	r0, r4
   17840:	f7ff ffb0 	bl	177a4 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17844:	4604      	mov	r4, r0
   17846:	b960      	cbnz	r0, 17862 <bt_gatt_is_subscribed+0x9a>
   17848:	4947      	ldr	r1, [pc, #284]	; (17968 <bt_gatt_is_subscribed+0x1a0>)
   1784a:	f640 435f 	movw	r3, #3167	; 0xc5f
   1784e:	4a43      	ldr	r2, [pc, #268]	; (1795c <bt_gatt_is_subscribed+0x194>)
   17850:	4843      	ldr	r0, [pc, #268]	; (17960 <bt_gatt_is_subscribed+0x198>)
   17852:	f00f fece 	bl	275f2 <assert_print>
   17856:	4845      	ldr	r0, [pc, #276]	; (1796c <bt_gatt_is_subscribed+0x1a4>)
   17858:	f00f fecb 	bl	275f2 <assert_print>
   1785c:	f640 415f 	movw	r1, #3167	; 0xc5f
   17860:	e7c4      	b.n	177ec <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17862:	2300      	movs	r3, #0
   17864:	6820      	ldr	r0, [r4, #0]
   17866:	f88d 300c 	strb.w	r3, [sp, #12]
   1786a:	f642 1302 	movw	r3, #10498	; 0x2902
   1786e:	a903      	add	r1, sp, #12
   17870:	f8ad 300e 	strh.w	r3, [sp, #14]
   17874:	f010 ff9d 	bl	287b2 <bt_uuid_cmp>
   17878:	b188      	cbz	r0, 1789e <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   1787a:	4620      	mov	r0, r4
   1787c:	f7ff ff92 	bl	177a4 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17880:	4604      	mov	r4, r0
   17882:	b960      	cbnz	r0, 1789e <bt_gatt_is_subscribed+0xd6>
   17884:	4938      	ldr	r1, [pc, #224]	; (17968 <bt_gatt_is_subscribed+0x1a0>)
   17886:	f640 4365 	movw	r3, #3173	; 0xc65
   1788a:	4a34      	ldr	r2, [pc, #208]	; (1795c <bt_gatt_is_subscribed+0x194>)
   1788c:	4834      	ldr	r0, [pc, #208]	; (17960 <bt_gatt_is_subscribed+0x198>)
   1788e:	f00f feb0 	bl	275f2 <assert_print>
   17892:	4836      	ldr	r0, [pc, #216]	; (1796c <bt_gatt_is_subscribed+0x1a4>)
   17894:	f00f fead 	bl	275f2 <assert_print>
   17898:	f640 4165 	movw	r1, #3173	; 0xc65
   1789c:	e7a6      	b.n	177ec <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1789e:	2700      	movs	r7, #0
   178a0:	f642 1802 	movw	r8, #10498	; 0x2902
   178a4:	6820      	ldr	r0, [r4, #0]
   178a6:	4669      	mov	r1, sp
   178a8:	f88d 7000 	strb.w	r7, [sp]
   178ac:	f8ad 8002 	strh.w	r8, [sp, #2]
   178b0:	f010 ff7f 	bl	287b2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   178b4:	bb20      	cbnz	r0, 17900 <bt_gatt_is_subscribed+0x138>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   178b6:	2300      	movs	r3, #0
   178b8:	6820      	ldr	r0, [r4, #0]
   178ba:	f88d 300c 	strb.w	r3, [sp, #12]
   178be:	f642 1302 	movw	r3, #10498	; 0x2902
   178c2:	a903      	add	r1, sp, #12
   178c4:	f8ad 300e 	strh.w	r3, [sp, #14]
   178c8:	f010 ff73 	bl	287b2 <bt_uuid_cmp>
   178cc:	2800      	cmp	r0, #0
   178ce:	d1b2      	bne.n	17836 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   178d0:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   178d2:	4628      	mov	r0, r5
   178d4:	4622      	mov	r2, r4
   178d6:	f812 1b01 	ldrb.w	r1, [r2], #1
   178da:	f011 fb92 	bl	29002 <bt_conn_is_peer_addr_le>
   178de:	b110      	cbz	r0, 178e6 <bt_gatt_is_subscribed+0x11e>
   178e0:	8923      	ldrh	r3, [r4, #8]
   178e2:	421e      	tst	r6, r3
   178e4:	d10a      	bne.n	178fc <bt_gatt_is_subscribed+0x134>
   178e6:	4628      	mov	r0, r5
   178e8:	7aa1      	ldrb	r1, [r4, #10]
   178ea:	f104 020b 	add.w	r2, r4, #11
   178ee:	f011 fb88 	bl	29002 <bt_conn_is_peer_addr_le>
   178f2:	2800      	cmp	r0, #0
   178f4:	d09f      	beq.n	17836 <bt_gatt_is_subscribed+0x6e>
   178f6:	8a63      	ldrh	r3, [r4, #18]
   178f8:	421e      	tst	r6, r3
   178fa:	d09c      	beq.n	17836 <bt_gatt_is_subscribed+0x6e>
			return true;
   178fc:	2001      	movs	r0, #1
   178fe:	e79b      	b.n	17838 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17900:	f642 0303 	movw	r3, #10243	; 0x2803
   17904:	6820      	ldr	r0, [r4, #0]
   17906:	a901      	add	r1, sp, #4
   17908:	f88d 7004 	strb.w	r7, [sp, #4]
   1790c:	f8ad 3006 	strh.w	r3, [sp, #6]
   17910:	f010 ff4f 	bl	287b2 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17914:	2800      	cmp	r0, #0
   17916:	d0ce      	beq.n	178b6 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17918:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1791c:	6820      	ldr	r0, [r4, #0]
   1791e:	a902      	add	r1, sp, #8
   17920:	f88d 7008 	strb.w	r7, [sp, #8]
   17924:	f8ad 300a 	strh.w	r3, [sp, #10]
   17928:	f010 ff43 	bl	287b2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1792c:	2800      	cmp	r0, #0
   1792e:	d0c2      	beq.n	178b6 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17930:	f642 0301 	movw	r3, #10241	; 0x2801
   17934:	6820      	ldr	r0, [r4, #0]
   17936:	a903      	add	r1, sp, #12
   17938:	f88d 700c 	strb.w	r7, [sp, #12]
   1793c:	f8ad 300e 	strh.w	r3, [sp, #14]
   17940:	f010 ff37 	bl	287b2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17944:	2800      	cmp	r0, #0
   17946:	d0b6      	beq.n	178b6 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   17948:	4620      	mov	r0, r4
   1794a:	f7ff ff2b 	bl	177a4 <bt_gatt_attr_next>
		if (!attr) {
   1794e:	4604      	mov	r4, r0
   17950:	2800      	cmp	r0, #0
   17952:	d1a7      	bne.n	178a4 <bt_gatt_is_subscribed+0xdc>
   17954:	e76f      	b.n	17836 <bt_gatt_is_subscribed+0x6e>
   17956:	bf00      	nop
   17958:	00030bb6 	.word	0x00030bb6
   1795c:	00031bbe 	.word	0x00031bbe
   17960:	0002e715 	.word	0x0002e715
   17964:	00031c4f 	.word	0x00031c4f
   17968:	00031c64 	.word	0x00031c64
   1796c:	00031c69 	.word	0x00031c69

00017970 <gatt_indicate>:
{
   17970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   17974:	4615      	mov	r5, r2
   17976:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17978:	2294      	movs	r2, #148	; 0x94
   1797a:	6869      	ldr	r1, [r5, #4]
{
   1797c:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1797e:	f012 fa23 	bl	29dc8 <bt_gatt_check_perm>
   17982:	4680      	mov	r8, r0
   17984:	b178      	cbz	r0, 179a6 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   17986:	4b35      	ldr	r3, [pc, #212]	; (17a5c <gatt_indicate+0xec>)
   17988:	2202      	movs	r2, #2
   1798a:	9302      	str	r3, [sp, #8]
   1798c:	2300      	movs	r3, #0
   1798e:	4934      	ldr	r1, [pc, #208]	; (17a60 <gatt_indicate+0xf0>)
   17990:	4618      	mov	r0, r3
   17992:	e9cd 3300 	strd	r3, r3, [sp]
   17996:	f012 f96f 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   1799a:	f04f 35ff 	mov.w	r5, #4294967295
}
   1799e:	4628      	mov	r0, r5
   179a0:	b004      	add	sp, #16
   179a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   179a6:	2202      	movs	r2, #2
   179a8:	4638      	mov	r0, r7
   179aa:	6869      	ldr	r1, [r5, #4]
   179ac:	f7ff ff0c 	bl	177c8 <bt_gatt_is_subscribed>
   179b0:	4603      	mov	r3, r0
   179b2:	b950      	cbnz	r0, 179ca <gatt_indicate+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   179b4:	4a2b      	ldr	r2, [pc, #172]	; (17a64 <gatt_indicate+0xf4>)
   179b6:	492a      	ldr	r1, [pc, #168]	; (17a60 <gatt_indicate+0xf0>)
   179b8:	e9cd 0201 	strd	r0, r2, [sp, #4]
   179bc:	9000      	str	r0, [sp, #0]
   179be:	2202      	movs	r2, #2
   179c0:	f012 f95a 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   179c4:	f06f 0515 	mvn.w	r5, #21
   179c8:	e7e9      	b.n	1799e <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   179ca:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   179ce:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   179d0:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   179d2:	f7ff f9b1 	bl	16d38 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   179d6:	3602      	adds	r6, #2
	if (!req) {
   179d8:	4604      	mov	r4, r0
   179da:	b1c8      	cbz	r0, 17a10 <gatt_indicate+0xa0>
	req->att_op = op;
   179dc:	211d      	movs	r1, #29
	req->func = func;
   179de:	4b22      	ldr	r3, [pc, #136]	; (17a68 <gatt_indicate+0xf8>)
	req->len = len;
   179e0:	6146      	str	r6, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   179e2:	4632      	mov	r2, r6
	req->att_op = op;
   179e4:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   179e6:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   179ea:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   179ec:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   179ee:	4638      	mov	r0, r7
   179f0:	f7fe fed6 	bl	167a0 <bt_att_create_pdu>
	if (!buf) {
   179f4:	4606      	mov	r6, r0
   179f6:	b970      	cbnz	r0, 17a16 <gatt_indicate+0xa6>
		LOG_WRN("No buffer available to send indication");
   179f8:	4b1c      	ldr	r3, [pc, #112]	; (17a6c <gatt_indicate+0xfc>)
   179fa:	9000      	str	r0, [sp, #0]
   179fc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17a00:	2202      	movs	r2, #2
   17a02:	4603      	mov	r3, r0
   17a04:	4916      	ldr	r1, [pc, #88]	; (17a60 <gatt_indicate+0xf0>)
   17a06:	f012 f937 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
		bt_att_req_free(req);
   17a0a:	4620      	mov	r0, r4
   17a0c:	f7ff f9b8 	bl	16d80 <bt_att_req_free>
		return -ENOMEM;
   17a10:	f06f 050b 	mvn.w	r5, #11
   17a14:	e7c3      	b.n	1799e <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   17a16:	2301      	movs	r3, #1
   17a18:	4642      	mov	r2, r8
   17a1a:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   17a1c:	f106 0a0c 	add.w	sl, r6, #12
   17a20:	f012 f80c 	bl	29a3c <bt_att_set_tx_meta_data>
   17a24:	2102      	movs	r1, #2
   17a26:	4650      	mov	r0, sl
   17a28:	f002 fde2 	bl	1a5f0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   17a2c:	4680      	mov	r8, r0
   17a2e:	f828 9b02 	strh.w	r9, [r8], #2
   17a32:	8aa9      	ldrh	r1, [r5, #20]
   17a34:	4650      	mov	r0, sl
   17a36:	f002 fddb 	bl	1a5f0 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17a3a:	8aaa      	ldrh	r2, [r5, #20]
   17a3c:	6929      	ldr	r1, [r5, #16]
   17a3e:	4640      	mov	r0, r8
   17a40:	f014 fb44 	bl	2c0cc <memcpy>
	err = bt_att_req_send(conn, req);
   17a44:	4621      	mov	r1, r4
   17a46:	4638      	mov	r0, r7
	req->buf = buf;
   17a48:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   17a4a:	f7ff fad1 	bl	16ff0 <bt_att_req_send>
	if (err) {
   17a4e:	4605      	mov	r5, r0
   17a50:	2800      	cmp	r0, #0
   17a52:	d0a4      	beq.n	1799e <gatt_indicate+0x2e>
		bt_att_req_free(req);
   17a54:	4620      	mov	r0, r4
   17a56:	f7ff f993 	bl	16d80 <bt_att_req_free>
   17a5a:	e7a0      	b.n	1799e <gatt_indicate+0x2e>
   17a5c:	00031c7f 	.word	0x00031c7f
   17a60:	0002d63c 	.word	0x0002d63c
   17a64:	00031c95 	.word	0x00031c95
   17a68:	00029a6d 	.word	0x00029a6d
   17a6c:	00031cc0 	.word	0x00031cc0

00017a70 <bt_gatt_indicate>:
{
   17a70:	b530      	push	{r4, r5, lr}
   17a72:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   17a74:	460c      	mov	r4, r1
{
   17a76:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   17a78:	b971      	cbnz	r1, 17a98 <bt_gatt_indicate+0x28>
   17a7a:	4946      	ldr	r1, [pc, #280]	; (17b94 <bt_gatt_indicate+0x124>)
   17a7c:	f640 330d 	movw	r3, #2829	; 0xb0d
   17a80:	4a45      	ldr	r2, [pc, #276]	; (17b98 <bt_gatt_indicate+0x128>)
   17a82:	4846      	ldr	r0, [pc, #280]	; (17b9c <bt_gatt_indicate+0x12c>)
   17a84:	f00f fdb5 	bl	275f2 <assert_print>
   17a88:	4845      	ldr	r0, [pc, #276]	; (17ba0 <bt_gatt_indicate+0x130>)
   17a8a:	f00f fdb2 	bl	275f2 <assert_print>
   17a8e:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   17a92:	4841      	ldr	r0, [pc, #260]	; (17b98 <bt_gatt_indicate+0x128>)
   17a94:	f00f fda6 	bl	275e4 <assert_post_action>
   17a98:	684b      	ldr	r3, [r1, #4]
   17a9a:	b973      	cbnz	r3, 17aba <bt_gatt_indicate+0x4a>
   17a9c:	680b      	ldr	r3, [r1, #0]
   17a9e:	b963      	cbnz	r3, 17aba <bt_gatt_indicate+0x4a>
   17aa0:	4940      	ldr	r1, [pc, #256]	; (17ba4 <bt_gatt_indicate+0x134>)
   17aa2:	f640 330e 	movw	r3, #2830	; 0xb0e
   17aa6:	4a3c      	ldr	r2, [pc, #240]	; (17b98 <bt_gatt_indicate+0x128>)
   17aa8:	483c      	ldr	r0, [pc, #240]	; (17b9c <bt_gatt_indicate+0x12c>)
   17aaa:	f00f fda2 	bl	275f2 <assert_print>
   17aae:	483c      	ldr	r0, [pc, #240]	; (17ba0 <bt_gatt_indicate+0x130>)
   17ab0:	f00f fd9f 	bl	275f2 <assert_print>
   17ab4:	f640 310e 	movw	r1, #2830	; 0xb0e
   17ab8:	e7eb      	b.n	17a92 <bt_gatt_indicate+0x22>
   17aba:	4b3b      	ldr	r3, [pc, #236]	; (17ba8 <bt_gatt_indicate+0x138>)
   17abc:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17ac0:	075a      	lsls	r2, r3, #29
   17ac2:	d561      	bpl.n	17b88 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17ac4:	b115      	cbz	r5, 17acc <bt_gatt_indicate+0x5c>
   17ac6:	7b6b      	ldrb	r3, [r5, #13]
   17ac8:	2b07      	cmp	r3, #7
   17aca:	d160      	bne.n	17b8e <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   17acc:	6860      	ldr	r0, [r4, #4]
   17ace:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17ad0:	f7ff fd34 	bl	1753c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17ad4:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17ad6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17ada:	b33a      	cbz	r2, 17b2c <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17adc:	a905      	add	r1, sp, #20
   17ade:	9102      	str	r1, [sp, #8]
   17ae0:	4932      	ldr	r1, [pc, #200]	; (17bac <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   17ae2:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17ae4:	9101      	str	r1, [sp, #4]
   17ae6:	2101      	movs	r1, #1
   17ae8:	9100      	str	r1, [sp, #0]
   17aea:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17aee:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17af0:	f7ff fd6c 	bl	175cc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17af4:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17af6:	b91b      	cbnz	r3, 17b00 <bt_gatt_indicate+0x90>
			return -ENOENT;
   17af8:	f06f 0001 	mvn.w	r0, #1
}
   17afc:	b00b      	add	sp, #44	; 0x2c
   17afe:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17b00:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17b02:	9b05      	ldr	r3, [sp, #20]
   17b04:	a904      	add	r1, sp, #16
   17b06:	6818      	ldr	r0, [r3, #0]
   17b08:	2300      	movs	r3, #0
   17b0a:	f88d 3010 	strb.w	r3, [sp, #16]
   17b0e:	f642 0303 	movw	r3, #10243	; 0x2803
   17b12:	f8ad 3012 	strh.w	r3, [sp, #18]
   17b16:	f010 fe4c 	bl	287b2 <bt_uuid_cmp>
   17b1a:	b970      	cbnz	r0, 17b3a <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17b1c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17b1e:	68c3      	ldr	r3, [r0, #12]
   17b20:	799b      	ldrb	r3, [r3, #6]
   17b22:	069b      	lsls	r3, r3, #26
   17b24:	d405      	bmi.n	17b32 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   17b26:	f06f 0015 	mvn.w	r0, #21
   17b2a:	e7e7      	b.n	17afc <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   17b2c:	2800      	cmp	r0, #0
   17b2e:	d1e8      	bne.n	17b02 <bt_gatt_indicate+0x92>
   17b30:	e7e2      	b.n	17af8 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17b32:	f012 f8f5 	bl	29d20 <bt_gatt_attr_value_handle>
   17b36:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   17b3a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   17b3e:	b13d      	cbz	r5, 17b50 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   17b40:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   17b42:	4601      	mov	r1, r0
   17b44:	4622      	mov	r2, r4
   17b46:	4628      	mov	r0, r5
		params->_ref = 1;
   17b48:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   17b4a:	f7ff ff11 	bl	17970 <gatt_indicate>
   17b4e:	e7d5      	b.n	17afc <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   17b50:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   17b54:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17b56:	2302      	movs	r3, #2
   17b58:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17b5c:	f642 1302 	movw	r3, #10498	; 0x2902
   17b60:	f8ad 3012 	strh.w	r3, [sp, #18]
   17b64:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   17b66:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17b68:	9302      	str	r3, [sp, #8]
   17b6a:	4b11      	ldr	r3, [pc, #68]	; (17bb0 <bt_gatt_indicate+0x140>)
   17b6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17b70:	9301      	str	r3, [sp, #4]
   17b72:	2301      	movs	r3, #1
   17b74:	aa04      	add	r2, sp, #16
   17b76:	9300      	str	r3, [sp, #0]
   17b78:	462b      	mov	r3, r5
	data.ind_params = params;
   17b7a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17b7c:	f88d 5010 	strb.w	r5, [sp, #16]
   17b80:	f7ff fd24 	bl	175cc <bt_gatt_foreach_attr_type>
	return data.err;
   17b84:	9807      	ldr	r0, [sp, #28]
   17b86:	e7b9      	b.n	17afc <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   17b88:	f06f 000a 	mvn.w	r0, #10
   17b8c:	e7b6      	b.n	17afc <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   17b8e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17b92:	e7b3      	b.n	17afc <bt_gatt_indicate+0x8c>
   17b94:	00031ce7 	.word	0x00031ce7
   17b98:	00031bbe 	.word	0x00031bbe
   17b9c:	0002e715 	.word	0x0002e715
   17ba0:	00031cee 	.word	0x00031cee
   17ba4:	00031d04 	.word	0x00031d04
   17ba8:	200080cc 	.word	0x200080cc
   17bac:	00029a93 	.word	0x00029a93
   17bb0:	00017f79 	.word	0x00017f79

00017bb4 <sc_process>:
{
   17bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17bb6:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   17bb8:	f1a0 0120 	sub.w	r1, r0, #32
   17bbc:	f100 0430 	add.w	r4, r0, #48	; 0x30
   17bc0:	e8d4 2faf 	lda	r2, [r4]
   17bc4:	f3c2 0040 	ubfx	r0, r2, #1, #1
   17bc8:	0792      	lsls	r2, r2, #30
   17bca:	d50e      	bpl.n	17bea <sc_process+0x36>
   17bcc:	4919      	ldr	r1, [pc, #100]	; (17c34 <sc_process+0x80>)
   17bce:	f240 439a 	movw	r3, #1178	; 0x49a
   17bd2:	4a19      	ldr	r2, [pc, #100]	; (17c38 <sc_process+0x84>)
   17bd4:	4819      	ldr	r0, [pc, #100]	; (17c3c <sc_process+0x88>)
   17bd6:	f00f fd0c 	bl	275f2 <assert_print>
   17bda:	4819      	ldr	r0, [pc, #100]	; (17c40 <sc_process+0x8c>)
   17bdc:	f00f fd09 	bl	275f2 <assert_print>
   17be0:	f240 419a 	movw	r1, #1178	; 0x49a
   17be4:	4814      	ldr	r0, [pc, #80]	; (17c38 <sc_process+0x84>)
   17be6:	f00f fcfd 	bl	275e4 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   17bea:	f853 2c08 	ldr.w	r2, [r3, #-8]
   17bee:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17bf0:	e8d4 2fef 	ldaex	r2, [r4]
   17bf4:	f022 0201 	bic.w	r2, r2, #1
   17bf8:	e8c4 2fe5 	stlex	r5, r2, [r4]
   17bfc:	2d00      	cmp	r5, #0
   17bfe:	d1f7      	bne.n	17bf0 <sc_process+0x3c>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17c00:	4a10      	ldr	r2, [pc, #64]	; (17c44 <sc_process+0x90>)
	sc->start = 0U;
   17c02:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17c06:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   17c0a:	4a0f      	ldr	r2, [pc, #60]	; (17c48 <sc_process+0x94>)
	sc->end = 0U;
   17c0c:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.func = sc_indicate_rsp;
   17c10:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   17c14:	aa01      	add	r2, sp, #4
   17c16:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   17c1a:	2204      	movs	r2, #4
   17c1c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17c20:	f7ff ff26 	bl	17a70 <bt_gatt_indicate>
   17c24:	b918      	cbnz	r0, 17c2e <sc_process+0x7a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   17c26:	2101      	movs	r1, #1
   17c28:	4620      	mov	r0, r4
   17c2a:	f012 f855 	bl	29cd8 <atomic_set_bit>
}
   17c2e:	b003      	add	sp, #12
   17c30:	bd30      	pop	{r4, r5, pc}
   17c32:	bf00      	nop
   17c34:	00031d21 	.word	0x00031d21
   17c38:	00031bbe 	.word	0x00031bbe
   17c3c:	0002e715 	.word	0x0002e715
   17c40:	00031d52 	.word	0x00031d52
   17c44:	0002e0c0 	.word	0x0002e0c0
   17c48:	0001741d 	.word	0x0001741d

00017c4c <update_ccc>:
{
   17c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17c50:	4b3e      	ldr	r3, [pc, #248]	; (17d4c <update_ccc+0x100>)
{
   17c52:	4617      	mov	r7, r2
	struct bt_conn *conn = data->conn;
   17c54:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   17c56:	6882      	ldr	r2, [r0, #8]
{
   17c58:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17c5a:	429a      	cmp	r2, r3
{
   17c5c:	b086      	sub	sp, #24
	if (attr->write != bt_gatt_attr_write_ccc) {
   17c5e:	d170      	bne.n	17d42 <update_ccc+0xf6>
	ccc = attr->user_data;
   17c60:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17c64:	f108 0601 	add.w	r6, r8, #1
   17c68:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   17c6c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   17c70:	b1d3      	cbz	r3, 17ca8 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17c72:	4632      	mov	r2, r6
   17c74:	4620      	mov	r0, r4
   17c76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   17c7a:	f011 f9c2 	bl	29002 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17c7e:	b198      	cbz	r0, 17ca8 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17c80:	f44f 7295 	mov.w	r2, #298	; 0x12a
   17c84:	4629      	mov	r1, r5
   17c86:	4620      	mov	r0, r4
   17c88:	f012 f89e 	bl	29dc8 <bt_gatt_check_perm>
		if (err) {
   17c8c:	b308      	cbz	r0, 17cd2 <update_ccc+0x86>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17c8e:	2803      	cmp	r0, #3
   17c90:	d10e      	bne.n	17cb0 <update_ccc+0x64>
				LOG_WRN("CCC %p not writable", attr);
   17c92:	4b2f      	ldr	r3, [pc, #188]	; (17d50 <update_ccc+0x104>)
   17c94:	2202      	movs	r2, #2
   17c96:	9302      	str	r3, [sp, #8]
   17c98:	2300      	movs	r3, #0
   17c9a:	492e      	ldr	r1, [pc, #184]	; (17d54 <update_ccc+0x108>)
   17c9c:	4618      	mov	r0, r3
   17c9e:	e9cd 3300 	strd	r3, r3, [sp]
   17ca2:	9503      	str	r5, [sp, #12]
   17ca4:	f011 ffe8 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17ca8:	360a      	adds	r6, #10
   17caa:	454e      	cmp	r6, r9
   17cac:	d1de      	bne.n	17c6c <update_ccc+0x20>
   17cae:	e048      	b.n	17d42 <update_ccc+0xf6>
			sec = BT_SECURITY_L2;
   17cb0:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   17cb2:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   17cb4:	bf0c      	ite	eq
   17cb6:	f04f 0a03 	moveq.w	sl, #3
   17cba:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   17cbe:	f011 f99e 	bl	28ffe <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   17cc2:	4582      	cmp	sl, r0
   17cc4:	d905      	bls.n	17cd2 <update_ccc+0x86>
				if (data->sec < sec) {
   17cc6:	793b      	ldrb	r3, [r7, #4]
   17cc8:	4553      	cmp	r3, sl
   17cca:	d2ed      	bcs.n	17ca8 <update_ccc+0x5c>
					data->sec = sec;
   17ccc:	f887 a004 	strb.w	sl, [r7, #4]
   17cd0:	e7ea      	b.n	17ca8 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   17cd2:	4641      	mov	r1, r8
   17cd4:	4628      	mov	r0, r5
   17cd6:	f011 febb 	bl	29a50 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17cda:	4b1f      	ldr	r3, [pc, #124]	; (17d58 <update_ccc+0x10c>)
   17cdc:	4598      	cmp	r8, r3
   17cde:	d130      	bne.n	17d42 <update_ccc+0xf6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17ce0:	7a20      	ldrb	r0, [r4, #8]
   17ce2:	f104 0190 	add.w	r1, r4, #144	; 0x90
   17ce6:	f7ff f9e7 	bl	170b8 <find_sc_cfg>
	if (!cfg) {
   17cea:	b350      	cbz	r0, 17d42 <update_ccc+0xf6>
	if (!(cfg->data.start || cfg->data.end)) {
   17cec:	8902      	ldrh	r2, [r0, #8]
   17cee:	8943      	ldrh	r3, [r0, #10]
   17cf0:	ea52 0103 	orrs.w	r1, r2, r3
   17cf4:	d025      	beq.n	17d42 <update_ccc+0xf6>
	index = bt_conn_index(conn);
   17cf6:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17cf8:	f8ad 2014 	strh.w	r2, [sp, #20]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   17cfc:	f8ad 3016 	strh.w	r3, [sp, #22]
	index = bt_conn_index(conn);
   17d00:	f7fd fb56 	bl	153b0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17d04:	2318      	movs	r3, #24
   17d06:	4915      	ldr	r1, [pc, #84]	; (17d5c <update_ccc+0x110>)
   17d08:	4a15      	ldr	r2, [pc, #84]	; (17d60 <update_ccc+0x114>)
   17d0a:	fb03 1300 	mla	r3, r3, r0, r1
   17d0e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17d10:	4a14      	ldr	r2, [pc, #80]	; (17d64 <update_ccc+0x118>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17d12:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   17d14:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17d16:	aa05      	add	r2, sp, #20
   17d18:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17d1a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17d1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17d20:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   17d24:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17d26:	4620      	mov	r0, r4
   17d28:	f7ff fea2 	bl	17a70 <bt_gatt_indicate>
   17d2c:	b148      	cbz	r0, 17d42 <update_ccc+0xf6>
		LOG_ERR("SC restore indication failed");
   17d2e:	4b0e      	ldr	r3, [pc, #56]	; (17d68 <update_ccc+0x11c>)
   17d30:	2201      	movs	r2, #1
   17d32:	9302      	str	r3, [sp, #8]
   17d34:	2300      	movs	r3, #0
   17d36:	4907      	ldr	r1, [pc, #28]	; (17d54 <update_ccc+0x108>)
   17d38:	4618      	mov	r0, r3
   17d3a:	e9cd 3300 	strd	r3, r3, [sp]
   17d3e:	f011 ff9b 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
}
   17d42:	2001      	movs	r0, #1
   17d44:	b006      	add	sp, #24
   17d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17d4a:	bf00      	nop
   17d4c:	0001716d 	.word	0x0001716d
   17d50:	00031d6d 	.word	0x00031d6d
   17d54:	0002d63c 	.word	0x0002d63c
   17d58:	20008560 	.word	0x20008560
   17d5c:	2002f388 	.word	0x2002f388
   17d60:	0002e0c0 	.word	0x0002e0c0
   17d64:	00029ced 	.word	0x00029ced
   17d68:	00031d81 	.word	0x00031d81

00017d6c <gatt_notify>:
{
   17d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17d70:	4614      	mov	r4, r2
   17d72:	4688      	mov	r8, r1
   17d74:	b085      	sub	sp, #20
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17d76:	2294      	movs	r2, #148	; 0x94
   17d78:	6861      	ldr	r1, [r4, #4]
{
   17d7a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17d7c:	f012 f824 	bl	29dc8 <bt_gatt_check_perm>
   17d80:	b170      	cbz	r0, 17da0 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   17d82:	4b2a      	ldr	r3, [pc, #168]	; (17e2c <gatt_notify+0xc0>)
   17d84:	2202      	movs	r2, #2
   17d86:	9302      	str	r3, [sp, #8]
   17d88:	2300      	movs	r3, #0
   17d8a:	4929      	ldr	r1, [pc, #164]	; (17e30 <gatt_notify+0xc4>)
   17d8c:	4618      	mov	r0, r3
   17d8e:	e9cd 3300 	strd	r3, r3, [sp]
   17d92:	f011 ff71 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   17d96:	f04f 30ff 	mov.w	r0, #4294967295
}
   17d9a:	b005      	add	sp, #20
   17d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   17da0:	2201      	movs	r2, #1
   17da2:	4630      	mov	r0, r6
   17da4:	6861      	ldr	r1, [r4, #4]
   17da6:	f7ff fd0f 	bl	177c8 <bt_gatt_is_subscribed>
   17daa:	4603      	mov	r3, r0
   17dac:	b950      	cbnz	r0, 17dc4 <gatt_notify+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   17dae:	4a21      	ldr	r2, [pc, #132]	; (17e34 <gatt_notify+0xc8>)
   17db0:	9000      	str	r0, [sp, #0]
   17db2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   17db6:	491e      	ldr	r1, [pc, #120]	; (17e30 <gatt_notify+0xc4>)
   17db8:	2202      	movs	r2, #2
   17dba:	f011 ff5d 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   17dbe:	f06f 0015 	mvn.w	r0, #21
   17dc2:	e7ea      	b.n	17d9a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   17dc4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   17dc6:	211b      	movs	r1, #27
   17dc8:	4630      	mov	r0, r6
   17dca:	3202      	adds	r2, #2
   17dcc:	f7fe fce8 	bl	167a0 <bt_att_create_pdu>
	if (!buf) {
   17dd0:	4605      	mov	r5, r0
   17dd2:	b958      	cbnz	r0, 17dec <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   17dd4:	4b18      	ldr	r3, [pc, #96]	; (17e38 <gatt_notify+0xcc>)
   17dd6:	9000      	str	r0, [sp, #0]
   17dd8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17ddc:	2202      	movs	r2, #2
   17dde:	4603      	mov	r3, r0
   17de0:	4913      	ldr	r1, [pc, #76]	; (17e30 <gatt_notify+0xc4>)
   17de2:	f011 ff49 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   17de6:	f06f 000b 	mvn.w	r0, #11
   17dea:	e7d6      	b.n	17d9a <gatt_notify+0x2e>
   17dec:	f100 090c 	add.w	r9, r0, #12
   17df0:	2102      	movs	r1, #2
   17df2:	4648      	mov	r0, r9
   17df4:	f002 fbfc 	bl	1a5f0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   17df8:	4607      	mov	r7, r0
   17dfa:	f827 8b02 	strh.w	r8, [r7], #2
   17dfe:	89a1      	ldrh	r1, [r4, #12]
   17e00:	4648      	mov	r0, r9
   17e02:	f002 fbf5 	bl	1a5f0 <net_buf_simple_add>
   17e06:	89a2      	ldrh	r2, [r4, #12]
   17e08:	68a1      	ldr	r1, [r4, #8]
   17e0a:	4638      	mov	r0, r7
   17e0c:	f014 f95e 	bl	2c0cc <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   17e10:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   17e14:	4628      	mov	r0, r5
   17e16:	2301      	movs	r3, #1
   17e18:	f011 fe10 	bl	29a3c <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   17e1c:	4629      	mov	r1, r5
   17e1e:	4630      	mov	r0, r6
}
   17e20:	b005      	add	sp, #20
   17e22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   17e26:	f7ff b885 	b.w	16f34 <bt_att_send>
   17e2a:	bf00      	nop
   17e2c:	00031c7f 	.word	0x00031c7f
   17e30:	0002d63c 	.word	0x0002d63c
   17e34:	00031c95 	.word	0x00031c95
   17e38:	00031d9e 	.word	0x00031d9e

00017e3c <bt_gatt_notify_cb>:
{
   17e3c:	b530      	push	{r4, r5, lr}
   17e3e:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   17e40:	460c      	mov	r4, r1
{
   17e42:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   17e44:	b971      	cbnz	r1, 17e64 <bt_gatt_notify_cb+0x28>
   17e46:	4944      	ldr	r1, [pc, #272]	; (17f58 <bt_gatt_notify_cb+0x11c>)
   17e48:	f640 232d 	movw	r3, #2605	; 0xa2d
   17e4c:	4a43      	ldr	r2, [pc, #268]	; (17f5c <bt_gatt_notify_cb+0x120>)
   17e4e:	4844      	ldr	r0, [pc, #272]	; (17f60 <bt_gatt_notify_cb+0x124>)
   17e50:	f00f fbcf 	bl	275f2 <assert_print>
   17e54:	4843      	ldr	r0, [pc, #268]	; (17f64 <bt_gatt_notify_cb+0x128>)
   17e56:	f00f fbcc 	bl	275f2 <assert_print>
   17e5a:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   17e5e:	483f      	ldr	r0, [pc, #252]	; (17f5c <bt_gatt_notify_cb+0x120>)
   17e60:	f00f fbc0 	bl	275e4 <assert_post_action>
   17e64:	684b      	ldr	r3, [r1, #4]
   17e66:	b973      	cbnz	r3, 17e86 <bt_gatt_notify_cb+0x4a>
   17e68:	680b      	ldr	r3, [r1, #0]
   17e6a:	b963      	cbnz	r3, 17e86 <bt_gatt_notify_cb+0x4a>
   17e6c:	493e      	ldr	r1, [pc, #248]	; (17f68 <bt_gatt_notify_cb+0x12c>)
   17e6e:	f640 232e 	movw	r3, #2606	; 0xa2e
   17e72:	4a3a      	ldr	r2, [pc, #232]	; (17f5c <bt_gatt_notify_cb+0x120>)
   17e74:	483a      	ldr	r0, [pc, #232]	; (17f60 <bt_gatt_notify_cb+0x124>)
   17e76:	f00f fbbc 	bl	275f2 <assert_print>
   17e7a:	483a      	ldr	r0, [pc, #232]	; (17f64 <bt_gatt_notify_cb+0x128>)
   17e7c:	f00f fbb9 	bl	275f2 <assert_print>
   17e80:	f640 212e 	movw	r1, #2606	; 0xa2e
   17e84:	e7eb      	b.n	17e5e <bt_gatt_notify_cb+0x22>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17e86:	4b39      	ldr	r3, [pc, #228]	; (17f6c <bt_gatt_notify_cb+0x130>)
   17e88:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17e8c:	075a      	lsls	r2, r3, #29
   17e8e:	d55d      	bpl.n	17f4c <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17e90:	b115      	cbz	r5, 17e98 <bt_gatt_notify_cb+0x5c>
   17e92:	7b6b      	ldrb	r3, [r5, #13]
   17e94:	2b07      	cmp	r3, #7
   17e96:	d15c      	bne.n	17f52 <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   17e98:	6860      	ldr	r0, [r4, #4]
   17e9a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17e9c:	f7ff fb4e 	bl	1753c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17ea0:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17ea2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17ea6:	b33a      	cbz	r2, 17ef8 <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17ea8:	a905      	add	r1, sp, #20
   17eaa:	9102      	str	r1, [sp, #8]
   17eac:	4930      	ldr	r1, [pc, #192]	; (17f70 <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   17eae:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17eb0:	9101      	str	r1, [sp, #4]
   17eb2:	2101      	movs	r1, #1
   17eb4:	9100      	str	r1, [sp, #0]
   17eb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17eba:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17ebc:	f7ff fb86 	bl	175cc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17ec0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17ec2:	b91b      	cbnz	r3, 17ecc <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   17ec4:	f06f 0001 	mvn.w	r0, #1
}
   17ec8:	b00b      	add	sp, #44	; 0x2c
   17eca:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17ecc:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17ece:	9b05      	ldr	r3, [sp, #20]
   17ed0:	a904      	add	r1, sp, #16
   17ed2:	6818      	ldr	r0, [r3, #0]
   17ed4:	2300      	movs	r3, #0
   17ed6:	f88d 3010 	strb.w	r3, [sp, #16]
   17eda:	f642 0303 	movw	r3, #10243	; 0x2803
   17ede:	f8ad 3012 	strh.w	r3, [sp, #18]
   17ee2:	f010 fc66 	bl	287b2 <bt_uuid_cmp>
   17ee6:	b970      	cbnz	r0, 17f06 <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17ee8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   17eea:	68c3      	ldr	r3, [r0, #12]
   17eec:	799b      	ldrb	r3, [r3, #6]
   17eee:	06db      	lsls	r3, r3, #27
   17ef0:	d405      	bmi.n	17efe <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   17ef2:	f06f 0015 	mvn.w	r0, #21
   17ef6:	e7e7      	b.n	17ec8 <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   17ef8:	2800      	cmp	r0, #0
   17efa:	d1e8      	bne.n	17ece <bt_gatt_notify_cb+0x92>
   17efc:	e7e2      	b.n	17ec4 <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17efe:	f011 ff0f 	bl	29d20 <bt_gatt_attr_value_handle>
   17f02:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   17f06:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   17f0a:	b12d      	cbz	r5, 17f18 <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   17f0c:	4601      	mov	r1, r0
   17f0e:	4622      	mov	r2, r4
   17f10:	4628      	mov	r0, r5
   17f12:	f7ff ff2b 	bl	17d6c <gatt_notify>
   17f16:	e7d7      	b.n	17ec8 <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   17f18:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17f1c:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   17f20:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   17f22:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17f24:	f8ad 2012 	strh.w	r2, [sp, #18]
   17f28:	aa05      	add	r2, sp, #20
   17f2a:	9202      	str	r2, [sp, #8]
   17f2c:	4a11      	ldr	r2, [pc, #68]	; (17f74 <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   17f2e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17f32:	e9cd 3200 	strd	r3, r2, [sp]
   17f36:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17f3a:	462b      	mov	r3, r5
   17f3c:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   17f3e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17f40:	f88d 5010 	strb.w	r5, [sp, #16]
   17f44:	f7ff fb42 	bl	175cc <bt_gatt_foreach_attr_type>
	return data.err;
   17f48:	9807      	ldr	r0, [sp, #28]
   17f4a:	e7bd      	b.n	17ec8 <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   17f4c:	f06f 000a 	mvn.w	r0, #10
   17f50:	e7ba      	b.n	17ec8 <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   17f52:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17f56:	e7b7      	b.n	17ec8 <bt_gatt_notify_cb+0x8c>
   17f58:	00031ce7 	.word	0x00031ce7
   17f5c:	00031bbe 	.word	0x00031bbe
   17f60:	0002e715 	.word	0x0002e715
   17f64:	00031cee 	.word	0x00031cee
   17f68:	00031d04 	.word	0x00031d04
   17f6c:	200080cc 	.word	0x200080cc
   17f70:	00029a93 	.word	0x00029a93
   17f74:	00017f79 	.word	0x00017f79

00017f78 <notify_cb>:
{
   17f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f7c:	4b46      	ldr	r3, [pc, #280]	; (18098 <notify_cb+0x120>)
{
   17f7e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f80:	6882      	ldr	r2, [r0, #8]
{
   17f82:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f84:	429a      	cmp	r2, r3
{
   17f86:	b085      	sub	sp, #20
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f88:	d136      	bne.n	17ff8 <notify_cb+0x80>
	ccc = attr->user_data;
   17f8a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17f8e:	4b43      	ldr	r3, [pc, #268]	; (1809c <notify_cb+0x124>)
   17f90:	459a      	cmp	sl, r3
   17f92:	d119      	bne.n	17fc8 <notify_cb+0x50>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17f94:	2600      	movs	r6, #0
   17f96:	4c42      	ldr	r4, [pc, #264]	; (180a0 <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   17f98:	4f42      	ldr	r7, [pc, #264]	; (180a4 <notify_cb+0x12c>)
   17f9a:	4639      	mov	r1, r7
   17f9c:	4620      	mov	r0, r4
   17f9e:	f011 fdcf 	bl	29b40 <bt_addr_le_eq>
   17fa2:	b978      	cbnz	r0, 17fc4 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   17fa4:	2207      	movs	r2, #7
   17fa6:	4621      	mov	r1, r4
   17fa8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   17fac:	f7fd fbf0 	bl	15790 <bt_conn_lookup_state_le>
			if (!conn) {
   17fb0:	bb38      	cbnz	r0, 18002 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   17fb2:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   17fb4:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   17fb6:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   17fb8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   17fbc:	8853      	ldrh	r3, [r2, #2]
   17fbe:	8812      	ldrh	r2, [r2, #0]
   17fc0:	f7ff f94c 	bl	1725c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17fc4:	340c      	adds	r4, #12
   17fc6:	b1d6      	cbz	r6, 17ffe <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17fc8:	f10a 0601 	add.w	r6, sl, #1
   17fcc:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   17fd0:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   17fd4:	89ab      	ldrh	r3, [r5, #12]
   17fd6:	429a      	cmp	r2, r3
   17fd8:	d10b      	bne.n	17ff2 <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17fda:	4631      	mov	r1, r6
   17fdc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   17fe0:	f7fd fb96 	bl	15710 <bt_conn_lookup_addr_le>
		if (!conn) {
   17fe4:	4604      	mov	r4, r0
   17fe6:	b120      	cbz	r0, 17ff2 <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   17fe8:	7b43      	ldrb	r3, [r0, #13]
   17fea:	2b07      	cmp	r3, #7
   17fec:	d00c      	beq.n	18008 <notify_cb+0x90>
			bt_conn_unref(conn);
   17fee:	f7fd f8c3 	bl	15178 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17ff2:	360a      	adds	r6, #10
   17ff4:	45b3      	cmp	fp, r6
   17ff6:	d1eb      	bne.n	17fd0 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   17ff8:	f04f 0901 	mov.w	r9, #1
   17ffc:	e048      	b.n	18090 <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17ffe:	2601      	movs	r6, #1
   18000:	e7cb      	b.n	17f9a <notify_cb+0x22>
			bt_conn_unref(conn);
   18002:	f7fd f8b9 	bl	15178 <bt_conn_unref>
   18006:	e7dd      	b.n	17fc4 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   18008:	f8da 3020 	ldr.w	r3, [sl, #32]
   1800c:	b123      	cbz	r3, 18018 <notify_cb+0xa0>
   1800e:	4641      	mov	r1, r8
   18010:	4798      	blx	r3
   18012:	b908      	cbnz	r0, 18018 <notify_cb+0xa0>
			bt_conn_unref(conn);
   18014:	4620      	mov	r0, r4
   18016:	e7ea      	b.n	17fee <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18018:	2294      	movs	r2, #148	; 0x94
   1801a:	4641      	mov	r1, r8
   1801c:	4620      	mov	r0, r4
   1801e:	f011 fed3 	bl	29dc8 <bt_gatt_check_perm>
   18022:	4681      	mov	r9, r0
   18024:	b150      	cbz	r0, 1803c <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   18026:	4b20      	ldr	r3, [pc, #128]	; (180a8 <notify_cb+0x130>)
   18028:	2202      	movs	r2, #2
   1802a:	9302      	str	r3, [sp, #8]
   1802c:	2300      	movs	r3, #0
   1802e:	491f      	ldr	r1, [pc, #124]	; (180ac <notify_cb+0x134>)
   18030:	4618      	mov	r0, r3
   18032:	e9cd 3300 	strd	r3, r3, [sp]
   18036:	f011 fe1f 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
			bt_conn_unref(conn);
   1803a:	e7eb      	b.n	18014 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1803c:	89ab      	ldrh	r3, [r5, #12]
   1803e:	2b02      	cmp	r3, #2
   18040:	d115      	bne.n	1806e <notify_cb+0xf6>
   18042:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   18046:	079a      	lsls	r2, r3, #30
   18048:	d405      	bmi.n	18056 <notify_cb+0xde>
		bt_conn_unref(conn);
   1804a:	4620      	mov	r0, r4
   1804c:	f7fd f894 	bl	15178 <bt_conn_unref>
		data->err = 0;
   18050:	2300      	movs	r3, #0
   18052:	60ab      	str	r3, [r5, #8]
   18054:	e7cd      	b.n	17ff2 <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   18056:	4620      	mov	r0, r4
   18058:	692a      	ldr	r2, [r5, #16]
   1805a:	88a9      	ldrh	r1, [r5, #4]
   1805c:	f7ff fc88 	bl	17970 <gatt_indicate>
			if (err == 0) {
   18060:	4607      	mov	r7, r0
   18062:	b980      	cbnz	r0, 18086 <notify_cb+0x10e>
				data->ind_params->_ref++;
   18064:	692a      	ldr	r2, [r5, #16]
   18066:	7d93      	ldrb	r3, [r2, #22]
   18068:	3301      	adds	r3, #1
   1806a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1806c:	e7ed      	b.n	1804a <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1806e:	2b01      	cmp	r3, #1
   18070:	d1eb      	bne.n	1804a <notify_cb+0xd2>
   18072:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   18076:	07db      	lsls	r3, r3, #31
   18078:	d5e7      	bpl.n	1804a <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1807a:	4620      	mov	r0, r4
   1807c:	692a      	ldr	r2, [r5, #16]
   1807e:	88a9      	ldrh	r1, [r5, #4]
   18080:	f7ff fe74 	bl	17d6c <gatt_notify>
   18084:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   18086:	4620      	mov	r0, r4
   18088:	f7fd f876 	bl	15178 <bt_conn_unref>
		if (err < 0) {
   1808c:	2f00      	cmp	r7, #0
   1808e:	dadf      	bge.n	18050 <notify_cb+0xd8>
}
   18090:	4648      	mov	r0, r9
   18092:	b005      	add	sp, #20
   18094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18098:	0001716d 	.word	0x0001716d
   1809c:	20008560 	.word	0x20008560
   180a0:	2002f7bd 	.word	0x2002f7bd
   180a4:	000306da 	.word	0x000306da
   180a8:	00031c7f 	.word	0x00031c7f
   180ac:	0002d63c 	.word	0x0002d63c

000180b0 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   180b0:	b510      	push	{r4, lr}
   180b2:	b086      	sub	sp, #24
   180b4:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   180b6:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   180b8:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   180ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   180be:	4a0f      	ldr	r2, [pc, #60]	; (180fc <bt_gatt_connected+0x4c>)
   180c0:	ab04      	add	r3, sp, #16
	data.sec = BT_SECURITY_L1;
   180c2:	f88d 0014 	strb.w	r0, [sp, #20]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   180c6:	f011 fe72 	bl	29dae <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   180ca:	4620      	mov	r0, r4
   180cc:	f010 ff97 	bl	28ffe <bt_conn_get_security>
   180d0:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   180d4:	4288      	cmp	r0, r1
   180d6:	d20e      	bcs.n	180f6 <bt_gatt_connected+0x46>
		int err = bt_conn_set_security(conn, data.sec);
   180d8:	4620      	mov	r0, r4
   180da:	f010 ff64 	bl	28fa6 <bt_conn_set_security>

		if (err) {
   180de:	b150      	cbz	r0, 180f6 <bt_gatt_connected+0x46>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   180e0:	4b07      	ldr	r3, [pc, #28]	; (18100 <bt_gatt_connected+0x50>)
   180e2:	9003      	str	r0, [sp, #12]
   180e4:	9302      	str	r3, [sp, #8]
   180e6:	2300      	movs	r3, #0
   180e8:	2202      	movs	r2, #2
   180ea:	4618      	mov	r0, r3
   180ec:	e9cd 3300 	strd	r3, r3, [sp]
   180f0:	4904      	ldr	r1, [pc, #16]	; (18104 <bt_gatt_connected+0x54>)
   180f2:	f011 fdc1 	bl	29c78 <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   180f6:	b006      	add	sp, #24
   180f8:	bd10      	pop	{r4, pc}
   180fa:	bf00      	nop
   180fc:	00017c4d 	.word	0x00017c4d
   18100:	00031dc7 	.word	0x00031dc7
   18104:	0002d63c 	.word	0x0002d63c

00018108 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   18108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1810a:	4605      	mov	r5, r0
   1810c:	460e      	mov	r6, r1
   1810e:	4617      	mov	r7, r2
	return list->head;
   18110:	4b06      	ldr	r3, [pc, #24]	; (1812c <bt_gatt_att_max_mtu_changed+0x24>)
   18112:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18114:	b14c      	cbz	r4, 1812a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   18116:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1811a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1811c:	b11b      	cbz	r3, 18126 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1811e:	463a      	mov	r2, r7
   18120:	4631      	mov	r1, r6
   18122:	4628      	mov	r0, r5
   18124:	4798      	blx	r3
	return node->next;
   18126:	6864      	ldr	r4, [r4, #4]
   18128:	e7f4      	b.n	18114 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1812a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1812c:	2002f3c8 	.word	0x2002f3c8

00018130 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   18130:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   18132:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   18134:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18136:	466b      	mov	r3, sp
   18138:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1813c:	4a03      	ldr	r2, [pc, #12]	; (1814c <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1813e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18142:	f011 fe34 	bl	29dae <bt_gatt_foreach_attr>
}
   18146:	b003      	add	sp, #12
   18148:	f85d fb04 	ldr.w	pc, [sp], #4
   1814c:	00017c4d 	.word	0x00017c4d

00018150 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   18150:	b570      	push	{r4, r5, r6, lr}
   18152:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18154:	4603      	mov	r3, r0
   18156:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1815a:	2001      	movs	r0, #1
   1815c:	4a0d      	ldr	r2, [pc, #52]	; (18194 <bt_gatt_disconnected+0x44>)
   1815e:	f011 fe26 	bl	29dae <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   18162:	4620      	mov	r0, r4
   18164:	f7fe ff7a 	bl	1705c <find_cf_cfg>
	if (!cfg) {
   18168:	4605      	mov	r5, r0
   1816a:	b188      	cbz	r0, 18190 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1816c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   18170:	4631      	mov	r1, r6
   18172:	7a20      	ldrb	r0, [r4, #8]
   18174:	f010 fc6a 	bl	28a4c <bt_addr_le_is_bonded>
   18178:	b920      	cbnz	r0, 18184 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1817a:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1817c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   18180:	f7ff b858 	b.w	17234 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18184:	4631      	mov	r1, r6
   18186:	1c68      	adds	r0, r5, #1
}
   18188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1818c:	f011 bce0 	b.w	29b50 <bt_addr_le_copy>
}
   18190:	bd70      	pop	{r4, r5, r6, pc}
   18192:	bf00      	nop
   18194:	00017369 	.word	0x00017369

00018198 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   18198:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1819a:	4b05      	ldr	r3, [pc, #20]	; (181b0 <smp_find+0x18>)
{
   1819c:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1819e:	4618      	mov	r0, r3
   181a0:	f011 fe84 	bl	29eac <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   181a4:	3b04      	subs	r3, #4
   181a6:	2800      	cmp	r0, #0
}
   181a8:	bf14      	ite	ne
   181aa:	4618      	movne	r0, r3
   181ac:	2000      	moveq	r0, #0
   181ae:	bd08      	pop	{r3, pc}
   181b0:	20009ab4 	.word	0x20009ab4

000181b4 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   181b4:	4b08      	ldr	r3, [pc, #32]	; (181d8 <latch_auth_cb+0x24>)
   181b6:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   181ba:	681a      	ldr	r2, [r3, #0]
   181bc:	4b07      	ldr	r3, [pc, #28]	; (181dc <latch_auth_cb+0x28>)
   181be:	e8d0 1fef 	ldaex	r1, [r0]
   181c2:	4299      	cmp	r1, r3
   181c4:	d104      	bne.n	181d0 <latch_auth_cb+0x1c>
   181c6:	e8c0 2fec 	stlex	ip, r2, [r0]
   181ca:	f1bc 0f00 	cmp.w	ip, #0
   181ce:	d1f6      	bne.n	181be <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   181d0:	e8d0 0faf 	lda	r0, [r0]
}
   181d4:	4770      	bx	lr
   181d6:	bf00      	nop
   181d8:	2002f2a8 	.word	0x2002f2a8
   181dc:	20009ab0 	.word	0x20009ab0

000181e0 <get_io_capa>:
{
   181e0:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   181e2:	f7ff ffe7 	bl	181b4 <latch_auth_cb>
	if (!smp_auth_cb) {
   181e6:	4603      	mov	r3, r0
   181e8:	b1c8      	cbz	r0, 1821e <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   181ea:	e9d0 1200 	ldrd	r1, r2, [r0]
   181ee:	b921      	cbnz	r1, 181fa <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   181f0:	2a00      	cmp	r2, #0
   181f2:	bf0c      	ite	eq
   181f4:	2003      	moveq	r0, #3
   181f6:	2002      	movne	r0, #2
   181f8:	e010      	b.n	1821c <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   181fa:	b132      	cbz	r2, 1820a <get_io_capa+0x2a>
   181fc:	6883      	ldr	r3, [r0, #8]
   181fe:	b913      	cbnz	r3, 18206 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   18200:	4b09      	ldr	r3, [pc, #36]	; (18228 <get_io_capa+0x48>)
   18202:	781b      	ldrb	r3, [r3, #0]
   18204:	b933      	cbnz	r3, 18214 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   18206:	2004      	movs	r0, #4
   18208:	e008      	b.n	1821c <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1820a:	4907      	ldr	r1, [pc, #28]	; (18228 <get_io_capa+0x48>)
   1820c:	7808      	ldrb	r0, [r1, #0]
   1820e:	b128      	cbz	r0, 1821c <get_io_capa+0x3c>
   18210:	689b      	ldr	r3, [r3, #8]
   18212:	b933      	cbnz	r3, 18222 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   18214:	3a00      	subs	r2, #0
   18216:	bf18      	it	ne
   18218:	2201      	movne	r2, #1
   1821a:	0050      	lsls	r0, r2, #1
}
   1821c:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1821e:	2003      	movs	r0, #3
   18220:	e7fc      	b.n	1821c <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   18222:	2001      	movs	r0, #1
   18224:	e7fa      	b.n	1821c <get_io_capa+0x3c>
   18226:	bf00      	nop
   18228:	2003026f 	.word	0x2003026f

0001822c <get_auth>:
{
   1822c:	b510      	push	{r4, lr}
	if (sc_supported) {
   1822e:	4b0c      	ldr	r3, [pc, #48]	; (18260 <get_auth+0x34>)
   18230:	781b      	ldrb	r3, [r3, #0]
   18232:	b17b      	cbz	r3, 18254 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   18234:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   18238:	f7ff ffd2 	bl	181e0 <get_io_capa>
	if (bondable) {
   1823c:	4b09      	ldr	r3, [pc, #36]	; (18264 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1823e:	2803      	cmp	r0, #3
	if (bondable) {
   18240:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   18242:	bf0c      	ite	eq
   18244:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   18248:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1824c:	b12b      	cbz	r3, 1825a <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1824e:	f044 0001 	orr.w	r0, r4, #1
}
   18252:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   18254:	f001 0407 	and.w	r4, r1, #7
   18258:	e7ee      	b.n	18238 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1825a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1825e:	e7f8      	b.n	18252 <get_auth+0x26>
   18260:	2003026f 	.word	0x2003026f
   18264:	20008a4a 	.word	0x20008a4a

00018268 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   18268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1826a:	4b0d      	ldr	r3, [pc, #52]	; (182a0 <bt_smp_accept+0x38>)
{
   1826c:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1826e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   18272:	b930      	cbnz	r0, 18282 <bt_smp_accept+0x1a>
			continue;
		}

		smp->chan.chan.ops = &ops;
   18274:	4a0b      	ldr	r2, [pc, #44]	; (182a4 <bt_smp_accept+0x3c>)

		*chan = &smp->chan.chan;
   18276:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   18278:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   1827a:	600b      	str	r3, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1827c:	b005      	add	sp, #20
   1827e:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_ERR("No available SMP context for conn %p", conn);
   18282:	4b09      	ldr	r3, [pc, #36]	; (182a8 <bt_smp_accept+0x40>)
   18284:	9203      	str	r2, [sp, #12]
   18286:	9302      	str	r3, [sp, #8]
   18288:	2300      	movs	r3, #0
   1828a:	2201      	movs	r2, #1
   1828c:	4618      	mov	r0, r3
   1828e:	e9cd 3300 	strd	r3, r3, [sp]
   18292:	4906      	ldr	r1, [pc, #24]	; (182ac <bt_smp_accept+0x44>)
   18294:	f011 fe62 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
   18298:	f06f 000b 	mvn.w	r0, #11
   1829c:	e7ee      	b.n	1827c <bt_smp_accept+0x14>
   1829e:	bf00      	nop
   182a0:	20009ab0 	.word	0x20009ab0
   182a4:	0002e1c4 	.word	0x0002e1c4
   182a8:	00031e02 	.word	0x00031e02
   182ac:	0002d684 	.word	0x0002d684

000182b0 <smp_chan_get>:
{
   182b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   182b2:	2106      	movs	r1, #6
   182b4:	f010 ff6f 	bl	29196 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   182b8:	4604      	mov	r4, r0
   182ba:	b958      	cbnz	r0, 182d4 <smp_chan_get+0x24>
		LOG_ERR("Unable to find SMP channel");
   182bc:	4b07      	ldr	r3, [pc, #28]	; (182dc <smp_chan_get+0x2c>)
   182be:	2201      	movs	r2, #1
   182c0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   182c4:	4906      	ldr	r1, [pc, #24]	; (182e0 <smp_chan_get+0x30>)
   182c6:	4603      	mov	r3, r0
   182c8:	9000      	str	r0, [sp, #0]
   182ca:	f011 fe47 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
}
   182ce:	4620      	mov	r0, r4
   182d0:	b004      	add	sp, #16
   182d2:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   182d4:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   182d8:	e7f9      	b.n	182ce <smp_chan_get+0x1e>
   182da:	bf00      	nop
   182dc:	00031e27 	.word	0x00031e27
   182e0:	0002d684 	.word	0x0002d684

000182e4 <smp_init>:
{
   182e4:	b538      	push	{r3, r4, r5, lr}
   182e6:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   182e8:	22ec      	movs	r2, #236	; 0xec
   182ea:	2100      	movs	r1, #0
   182ec:	f013 ff28 	bl	2c140 <memset>
	if (bt_rand(smp->prnd, 16)) {
   182f0:	2110      	movs	r1, #16
   182f2:	f105 0027 	add.w	r0, r5, #39	; 0x27
   182f6:	f7fc fad5 	bl	148a4 <bt_rand>
   182fa:	4604      	mov	r4, r0
   182fc:	b948      	cbnz	r0, 18312 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   182fe:	2105      	movs	r1, #5
   18300:	4628      	mov	r0, r5
   18302:	f011 fe3a 	bl	29f7a <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   18306:	f7fc fb7f 	bl	14a08 <bt_pub_key_get>
   1830a:	4b03      	ldr	r3, [pc, #12]	; (18318 <smp_init+0x34>)
   1830c:	6018      	str	r0, [r3, #0]
}
   1830e:	4620      	mov	r0, r4
   18310:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   18312:	2408      	movs	r4, #8
   18314:	e7fb      	b.n	1830e <smp_init+0x2a>
   18316:	bf00      	nop
   18318:	2002f3d0 	.word	0x2002f3d0

0001831c <smp_dhkey_generate>:
{
   1831c:	b530      	push	{r4, r5, lr}
   1831e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18320:	1d05      	adds	r5, r0, #4
   18322:	2108      	movs	r1, #8
   18324:	4628      	mov	r0, r5
{
   18326:	b085      	sub	sp, #20
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18328:	f011 fe27 	bl	29f7a <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1832c:	490b      	ldr	r1, [pc, #44]	; (1835c <smp_dhkey_generate+0x40>)
   1832e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18332:	f7fc fb77 	bl	14a24 <bt_dh_key_gen>
	if (err) {
   18336:	b170      	cbz	r0, 18356 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18338:	2108      	movs	r1, #8
   1833a:	4628      	mov	r0, r5
   1833c:	f011 fddd 	bl	29efa <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   18340:	4b07      	ldr	r3, [pc, #28]	; (18360 <smp_dhkey_generate+0x44>)
   18342:	2201      	movs	r2, #1
   18344:	9302      	str	r3, [sp, #8]
   18346:	2300      	movs	r3, #0
   18348:	4906      	ldr	r1, [pc, #24]	; (18364 <smp_dhkey_generate+0x48>)
   1834a:	4618      	mov	r0, r3
   1834c:	e9cd 3300 	strd	r3, r3, [sp]
   18350:	f011 fe04 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18354:	2008      	movs	r0, #8
}
   18356:	b005      	add	sp, #20
   18358:	bd30      	pop	{r4, r5, pc}
   1835a:	bf00      	nop
   1835c:	0002a353 	.word	0x0002a353
   18360:	00031e42 	.word	0x00031e42
   18364:	0002d684 	.word	0x0002d684

00018368 <smp_ident_info>:
{
   18368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1836a:	460b      	mov	r3, r1
   1836c:	4606      	mov	r6, r0
   1836e:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18370:	210d      	movs	r1, #13
   18372:	3004      	adds	r0, #4
   18374:	f011 fd9a 	bl	29eac <atomic_test_bit>
   18378:	b330      	cbz	r0, 183c8 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1837a:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1837c:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   18380:	2002      	movs	r0, #2
   18382:	f103 0790 	add.w	r7, r3, #144	; 0x90
   18386:	463a      	mov	r2, r7
   18388:	7a19      	ldrb	r1, [r3, #8]
   1838a:	f001 fcbf 	bl	19d0c <bt_keys_get_type>
		if (!keys) {
   1838e:	4604      	mov	r4, r0
   18390:	b980      	cbnz	r0, 183b4 <smp_ident_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18392:	4638      	mov	r0, r7
   18394:	f7f9 fef8 	bl	12188 <bt_addr_le_str>
   18398:	4b0e      	ldr	r3, [pc, #56]	; (183d4 <smp_ident_info+0x6c>)
   1839a:	9003      	str	r0, [sp, #12]
   1839c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   183a0:	4620      	mov	r0, r4
   183a2:	4623      	mov	r3, r4
   183a4:	2201      	movs	r2, #1
   183a6:	490c      	ldr	r1, [pc, #48]	; (183d8 <smp_ident_info+0x70>)
   183a8:	9400      	str	r4, [sp, #0]
   183aa:	f011 fdd7 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   183ae:	2008      	movs	r0, #8
}
   183b0:	b005      	add	sp, #20
   183b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   183b4:	462b      	mov	r3, r5
   183b6:	342a      	adds	r4, #42	; 0x2a
   183b8:	f105 0210 	add.w	r2, r5, #16
   183bc:	f853 1b04 	ldr.w	r1, [r3], #4
   183c0:	4293      	cmp	r3, r2
   183c2:	f844 1b04 	str.w	r1, [r4], #4
   183c6:	d1f9      	bne.n	183bc <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   183c8:	4630      	mov	r0, r6
   183ca:	2109      	movs	r1, #9
   183cc:	f011 fdd5 	bl	29f7a <atomic_set_bit>
	return 0;
   183d0:	2000      	movs	r0, #0
   183d2:	e7ed      	b.n	183b0 <smp_ident_info+0x48>
   183d4:	00031e5b 	.word	0x00031e5b
   183d8:	0002d684 	.word	0x0002d684

000183dc <smp_encrypt_info>:
{
   183dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   183de:	460b      	mov	r3, r1
   183e0:	4606      	mov	r6, r0
   183e2:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   183e4:	210d      	movs	r1, #13
   183e6:	3004      	adds	r0, #4
   183e8:	f011 fd60 	bl	29eac <atomic_test_bit>
   183ec:	b330      	cbz	r0, 1843c <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   183ee:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   183f0:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   183f4:	2004      	movs	r0, #4
   183f6:	f103 0790 	add.w	r7, r3, #144	; 0x90
   183fa:	463a      	mov	r2, r7
   183fc:	7a19      	ldrb	r1, [r3, #8]
   183fe:	f001 fc85 	bl	19d0c <bt_keys_get_type>
		if (!keys) {
   18402:	4604      	mov	r4, r0
   18404:	b980      	cbnz	r0, 18428 <smp_encrypt_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18406:	4638      	mov	r0, r7
   18408:	f7f9 febe 	bl	12188 <bt_addr_le_str>
   1840c:	4b0e      	ldr	r3, [pc, #56]	; (18448 <smp_encrypt_info+0x6c>)
   1840e:	9003      	str	r0, [sp, #12]
   18410:	e9cd 4301 	strd	r4, r3, [sp, #4]
   18414:	4620      	mov	r0, r4
   18416:	4623      	mov	r3, r4
   18418:	2201      	movs	r2, #1
   1841a:	490c      	ldr	r1, [pc, #48]	; (1844c <smp_encrypt_info+0x70>)
   1841c:	9400      	str	r4, [sp, #0]
   1841e:	f011 fd9d 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18422:	2008      	movs	r0, #8
}
   18424:	b005      	add	sp, #20
   18426:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18428:	462b      	mov	r3, r5
   1842a:	341a      	adds	r4, #26
   1842c:	f105 0210 	add.w	r2, r5, #16
   18430:	f853 1b04 	ldr.w	r1, [r3], #4
   18434:	4293      	cmp	r3, r2
   18436:	f844 1b04 	str.w	r1, [r4], #4
   1843a:	d1f9      	bne.n	18430 <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1843c:	4630      	mov	r0, r6
   1843e:	2107      	movs	r1, #7
   18440:	f011 fd9b 	bl	29f7a <atomic_set_bit>
	return 0;
   18444:	2000      	movs	r0, #0
   18446:	e7ed      	b.n	18424 <smp_encrypt_info+0x48>
   18448:	00031e5b 	.word	0x00031e5b
   1844c:	0002d684 	.word	0x0002d684

00018450 <smp_send_pairing_confirm>:
{
   18450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (smp->method) {
   18452:	7a04      	ldrb	r4, [r0, #8]
{
   18454:	4605      	mov	r5, r0
	switch (smp->method) {
   18456:	2c02      	cmp	r4, #2
   18458:	d823      	bhi.n	184a2 <smp_send_pairing_confirm+0x52>
   1845a:	b144      	cbz	r4, 1846e <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1845c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   18460:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   18464:	40dc      	lsrs	r4, r3
   18466:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1846a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1846e:	2103      	movs	r1, #3
   18470:	4628      	mov	r0, r5
   18472:	f011 fd92 	bl	29f9a <smp_create_pdu.constprop.0>
	if (!buf) {
   18476:	4606      	mov	r6, r0
   18478:	b308      	cbz	r0, 184be <smp_send_pairing_confirm+0x6e>
   1847a:	2110      	movs	r1, #16
   1847c:	300c      	adds	r0, #12
   1847e:	f002 f8b7 	bl	1a5f0 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   18482:	9000      	str	r0, [sp, #0]
   18484:	4816      	ldr	r0, [pc, #88]	; (184e0 <smp_send_pairing_confirm+0x90>)
   18486:	4623      	mov	r3, r4
   18488:	6800      	ldr	r0, [r0, #0]
   1848a:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1848e:	f105 0157 	add.w	r1, r5, #87	; 0x57
   18492:	f012 f804 	bl	2a49e <bt_crypto_f4>
   18496:	4604      	mov	r4, r0
   18498:	b1b0      	cbz	r0, 184c8 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
   1849a:	4630      	mov	r0, r6
   1849c:	f001 ff86 	bl	1a3ac <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   184a0:	e00d      	b.n	184be <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   184a2:	2c03      	cmp	r4, #3
   184a4:	f04f 0300 	mov.w	r3, #0
   184a8:	d00c      	beq.n	184c4 <smp_send_pairing_confirm+0x74>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   184aa:	4a0e      	ldr	r2, [pc, #56]	; (184e4 <smp_send_pairing_confirm+0x94>)
   184ac:	4618      	mov	r0, r3
   184ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
   184b2:	490d      	ldr	r1, [pc, #52]	; (184e8 <smp_send_pairing_confirm+0x98>)
   184b4:	2201      	movs	r2, #1
	switch (smp->method) {
   184b6:	9403      	str	r4, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   184b8:	9300      	str	r3, [sp, #0]
   184ba:	f011 fd4f 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   184be:	2008      	movs	r0, #8
}
   184c0:	b004      	add	sp, #16
   184c2:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   184c4:	461c      	mov	r4, r3
   184c6:	e7d2      	b.n	1846e <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   184c8:	4602      	mov	r2, r0
   184ca:	4631      	mov	r1, r6
   184cc:	4628      	mov	r0, r5
   184ce:	f011 fd28 	bl	29f22 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   184d2:	1d28      	adds	r0, r5, #4
   184d4:	4621      	mov	r1, r4
   184d6:	f011 fd10 	bl	29efa <atomic_clear_bit>
	return 0;
   184da:	4620      	mov	r0, r4
   184dc:	e7f0      	b.n	184c0 <smp_send_pairing_confirm+0x70>
   184de:	bf00      	nop
   184e0:	2002f3d0 	.word	0x2002f3d0
   184e4:	00031e75 	.word	0x00031e75
   184e8:	0002d684 	.word	0x0002d684

000184ec <smp_public_key_periph>:
{
   184ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   184ee:	4604      	mov	r4, r0
   184f0:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   184f2:	f7ff fe5f 	bl	181b4 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   184f6:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   184f8:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   184fa:	210e      	movs	r1, #14
   184fc:	4628      	mov	r0, r5
   184fe:	f011 fcd5 	bl	29eac <atomic_test_bit>
   18502:	b990      	cbnz	r0, 1852a <smp_public_key_periph+0x3e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   18504:	4b51      	ldr	r3, [pc, #324]	; (1864c <smp_public_key_periph+0x160>)
   18506:	2220      	movs	r2, #32
   18508:	6819      	ldr	r1, [r3, #0]
   1850a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1850e:	f013 fdcd 	bl	2c0ac <memcmp>
   18512:	4603      	mov	r3, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18514:	b948      	cbnz	r0, 1852a <smp_public_key_periph+0x3e>
		LOG_WRN("Remote public key rejected");
   18516:	4a4e      	ldr	r2, [pc, #312]	; (18650 <smp_public_key_periph+0x164>)
   18518:	494e      	ldr	r1, [pc, #312]	; (18654 <smp_public_key_periph+0x168>)
   1851a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1851e:	9000      	str	r0, [sp, #0]
   18520:	2202      	movs	r2, #2
   18522:	f011 fd1b 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18526:	2008      	movs	r0, #8
   18528:	e034      	b.n	18594 <smp_public_key_periph+0xa8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1852a:	210c      	movs	r1, #12
   1852c:	4620      	mov	r0, r4
   1852e:	f011 fd34 	bl	29f9a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   18532:	4607      	mov	r7, r0
   18534:	2800      	cmp	r0, #0
   18536:	d0f6      	beq.n	18526 <smp_public_key_periph+0x3a>
   18538:	2140      	movs	r1, #64	; 0x40
   1853a:	300c      	adds	r0, #12
   1853c:	f002 f858 	bl	1a5f0 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   18540:	4b42      	ldr	r3, [pc, #264]	; (1864c <smp_public_key_periph+0x160>)
   18542:	4602      	mov	r2, r0
   18544:	681b      	ldr	r3, [r3, #0]
   18546:	4601      	mov	r1, r0
   18548:	f103 0020 	add.w	r0, r3, #32
   1854c:	f853 cb04 	ldr.w	ip, [r3], #4
   18550:	4283      	cmp	r3, r0
   18552:	f841 cb04 	str.w	ip, [r1], #4
   18556:	d1f9      	bne.n	1854c <smp_public_key_periph+0x60>
   18558:	3220      	adds	r2, #32
   1855a:	f103 0120 	add.w	r1, r3, #32
   1855e:	f853 0b04 	ldr.w	r0, [r3], #4
   18562:	428b      	cmp	r3, r1
   18564:	f842 0b04 	str.w	r0, [r2], #4
   18568:	d1f9      	bne.n	1855e <smp_public_key_periph+0x72>
	smp_send(smp, req_buf, NULL, NULL);
   1856a:	2200      	movs	r2, #0
   1856c:	4639      	mov	r1, r7
   1856e:	4620      	mov	r0, r4
   18570:	f011 fcd7 	bl	29f22 <smp_send.constprop.0>
	switch (smp->method) {
   18574:	7a23      	ldrb	r3, [r4, #8]
   18576:	2b05      	cmp	r3, #5
   18578:	d85a      	bhi.n	18630 <smp_public_key_periph+0x144>
   1857a:	e8df f003 	tbb	[pc, r3]
   1857e:	3903      	.short	0x3903
   18580:	5659030d 	.word	0x5659030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18584:	2104      	movs	r1, #4
   18586:	4620      	mov	r0, r4
   18588:	f011 fcf7 	bl	29f7a <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1858c:	f7ff ff60 	bl	18450 <smp_send_pairing_confirm>
		if (err) {
   18590:	2800      	cmp	r0, #0
   18592:	d03c      	beq.n	1860e <smp_public_key_periph+0x122>
}
   18594:	b005      	add	sp, #20
   18596:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18598:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1859a:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1859e:	f7ff fe09 	bl	181b4 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   185a2:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   185a4:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   185a6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   185aa:	f7fc f97b 	bl	148a4 <bt_rand>
   185ae:	2800      	cmp	r0, #0
   185b0:	d1b9      	bne.n	18526 <smp_public_key_periph+0x3a>
		smp->passkey %= 1000000;
   185b2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   185b6:	4a28      	ldr	r2, [pc, #160]	; (18658 <smp_public_key_periph+0x16c>)
	smp->passkey_round = 0U;
   185b8:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   185bc:	fbb3 f1f2 	udiv	r1, r3, r2
   185c0:	fb02 3311 	mls	r3, r2, r1, r3
   185c4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   185c8:	b156      	cbz	r6, 185e0 <smp_public_key_periph+0xf4>
   185ca:	6833      	ldr	r3, [r6, #0]
   185cc:	b143      	cbz	r3, 185e0 <smp_public_key_periph+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   185ce:	210b      	movs	r1, #11
   185d0:	4628      	mov	r0, r5
   185d2:	f011 fcd2 	bl	29f7a <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   185d6:	4638      	mov	r0, r7
   185d8:	6833      	ldr	r3, [r6, #0]
   185da:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   185de:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   185e0:	2103      	movs	r1, #3
   185e2:	4620      	mov	r0, r4
   185e4:	f011 fcc9 	bl	29f7a <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   185e8:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   185ea:	f011 fcc6 	bl	29f7a <atomic_set_bit>
		break;
   185ee:	e00e      	b.n	1860e <smp_public_key_periph+0x122>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   185f0:	4620      	mov	r0, r4
   185f2:	2103      	movs	r1, #3
   185f4:	f011 fcc1 	bl	29f7a <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   185f8:	210e      	movs	r1, #14
   185fa:	f011 fcbe 	bl	29f7a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   185fe:	4628      	mov	r0, r5
   18600:	210a      	movs	r1, #10
   18602:	f011 fcba 	bl	29f7a <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   18606:	6873      	ldr	r3, [r6, #4]
   18608:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1860c:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1860e:	4628      	mov	r0, r5
   18610:	2107      	movs	r1, #7
   18612:	f011 fcb2 	bl	29f7a <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   18616:	2008      	movs	r0, #8
   18618:	f7ff fdbe 	bl	18198 <smp_find>
   1861c:	b9a0      	cbnz	r0, 18648 <smp_public_key_periph+0x15c>
		return smp_dhkey_generate(smp);
   1861e:	4620      	mov	r0, r4
}
   18620:	b005      	add	sp, #20
   18622:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   18626:	f7ff be79 	b.w	1831c <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1862a:	2104      	movs	r1, #4
   1862c:	4620      	mov	r0, r4
   1862e:	e7dc      	b.n	185ea <smp_public_key_periph+0xfe>
	switch (smp->method) {
   18630:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18632:	4b0a      	ldr	r3, [pc, #40]	; (1865c <smp_public_key_periph+0x170>)
   18634:	2201      	movs	r2, #1
   18636:	9302      	str	r3, [sp, #8]
   18638:	2300      	movs	r3, #0
   1863a:	4906      	ldr	r1, [pc, #24]	; (18654 <smp_public_key_periph+0x168>)
   1863c:	4618      	mov	r0, r3
   1863e:	e9cd 3300 	strd	r3, r3, [sp]
   18642:	f011 fc8b 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18646:	e76e      	b.n	18526 <smp_public_key_periph+0x3a>
	return 0;
   18648:	2000      	movs	r0, #0
   1864a:	e7a3      	b.n	18594 <smp_public_key_periph+0xa8>
   1864c:	2002f3d0 	.word	0x2002f3d0
   18650:	00031e91 	.word	0x00031e91
   18654:	0002d684 	.word	0x0002d684
   18658:	000f4240 	.word	0x000f4240
   1865c:	00031e75 	.word	0x00031e75

00018660 <smp_public_key>:
{
   18660:	b530      	push	{r4, r5, lr}
   18662:	4604      	mov	r4, r0
   18664:	460d      	mov	r5, r1
   18666:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18668:	f7ff fda4 	bl	181b4 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1866c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18670:	4602      	mov	r2, r0
   18672:	68eb      	ldr	r3, [r5, #12]
   18674:	f103 0120 	add.w	r1, r3, #32
   18678:	f853 5b04 	ldr.w	r5, [r3], #4
   1867c:	428b      	cmp	r3, r1
   1867e:	f842 5b04 	str.w	r5, [r2], #4
   18682:	d1f9      	bne.n	18678 <smp_public_key+0x18>
   18684:	f104 0277 	add.w	r2, r4, #119	; 0x77
   18688:	f103 0120 	add.w	r1, r3, #32
   1868c:	f853 5b04 	ldr.w	r5, [r3], #4
   18690:	428b      	cmp	r3, r1
   18692:	f842 5b04 	str.w	r5, [r2], #4
   18696:	d1f9      	bne.n	1868c <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   18698:	f7fc f922 	bl	148e0 <bt_pub_key_is_debug>
   1869c:	b940      	cbnz	r0, 186b0 <smp_public_key+0x50>
	if (!sc_public_key) {
   1869e:	4b1c      	ldr	r3, [pc, #112]	; (18710 <smp_public_key+0xb0>)
   186a0:	681d      	ldr	r5, [r3, #0]
   186a2:	bb75      	cbnz	r5, 18702 <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   186a4:	1d20      	adds	r0, r4, #4
   186a6:	2106      	movs	r1, #6
   186a8:	f011 fc67 	bl	29f7a <atomic_set_bit>
	return 0;
   186ac:	4628      	mov	r0, r5
		return 0;
   186ae:	e026      	b.n	186fe <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   186b0:	4b18      	ldr	r3, [pc, #96]	; (18714 <smp_public_key+0xb4>)
   186b2:	2203      	movs	r2, #3
   186b4:	9302      	str	r3, [sp, #8]
   186b6:	2300      	movs	r3, #0
   186b8:	4917      	ldr	r1, [pc, #92]	; (18718 <smp_public_key+0xb8>)
   186ba:	4618      	mov	r0, r3
   186bc:	e9cd 3300 	strd	r3, r3, [sp]
   186c0:	f011 fc4c 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   186c4:	210e      	movs	r1, #14
   186c6:	1d20      	adds	r0, r4, #4
   186c8:	f011 fc57 	bl	29f7a <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   186cc:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   186d0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   186d4:	b933      	cbnz	r3, 186e4 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   186d6:	7a28      	ldrb	r0, [r5, #8]
   186d8:	f105 0190 	add.w	r1, r5, #144	; 0x90
   186dc:	f001 f9fc 	bl	19ad8 <bt_keys_get_addr>
   186e0:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   186e4:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   186e8:	2b00      	cmp	r3, #0
   186ea:	d0d8      	beq.n	1869e <smp_public_key+0x3e>
   186ec:	89da      	ldrh	r2, [r3, #14]
   186ee:	f002 0224 	and.w	r2, r2, #36	; 0x24
   186f2:	2a00      	cmp	r2, #0
   186f4:	d0d3      	beq.n	1869e <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   186f6:	7b5b      	ldrb	r3, [r3, #13]
   186f8:	079b      	lsls	r3, r3, #30
   186fa:	d4d0      	bmi.n	1869e <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   186fc:	2003      	movs	r0, #3
}
   186fe:	b005      	add	sp, #20
   18700:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   18702:	4620      	mov	r0, r4
}
   18704:	b005      	add	sp, #20
   18706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   1870a:	f7ff beef 	b.w	184ec <smp_public_key_periph>
   1870e:	bf00      	nop
   18710:	2002f3d0 	.word	0x2002f3d0
   18714:	00031eac 	.word	0x00031eac
   18718:	0002d684 	.word	0x0002d684

0001871c <smp_pairing_req>:
{
   1871c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18720:	460d      	mov	r5, r1
   18722:	b086      	sub	sp, #24
   18724:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18726:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1872a:	f7ff fd43 	bl	181b4 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1872e:	f8d5 800c 	ldr.w	r8, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18732:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   18734:	f898 3003 	ldrb.w	r3, [r8, #3]
   18738:	3b07      	subs	r3, #7
   1873a:	2b09      	cmp	r3, #9
   1873c:	d903      	bls.n	18746 <smp_pairing_req+0x2a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1873e:	2006      	movs	r0, #6
}
   18740:	b006      	add	sp, #24
   18742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   18746:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   1874a:	b15b      	cbz	r3, 18764 <smp_pairing_req+0x48>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1874c:	1d25      	adds	r5, r4, #4
   1874e:	210f      	movs	r1, #15
   18750:	4628      	mov	r0, r5
   18752:	f011 fbab 	bl	29eac <atomic_test_bit>
   18756:	b980      	cbnz	r0, 1877a <smp_pairing_req+0x5e>
		int ret = smp_init(smp);
   18758:	4620      	mov	r0, r4
   1875a:	f7ff fdc3 	bl	182e4 <smp_init>
		if (ret) {
   1875e:	b160      	cbz	r0, 1877a <smp_pairing_req+0x5e>
			return ret;
   18760:	b2c0      	uxtb	r0, r0
   18762:	e7ed      	b.n	18740 <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18764:	7a30      	ldrb	r0, [r6, #8]
   18766:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1876a:	f001 f9b5 	bl	19ad8 <bt_keys_get_addr>
   1876e:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   18772:	2800      	cmp	r0, #0
   18774:	d1ea      	bne.n	1874c <smp_pairing_req+0x30>
			return BT_SMP_ERR_UNSPECIFIED;
   18776:	2008      	movs	r0, #8
   18778:	e7e2      	b.n	18740 <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1877a:	2301      	movs	r3, #1
   1877c:	7263      	strb	r3, [r4, #9]
   1877e:	f8d8 3000 	ldr.w	r3, [r8]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18782:	4620      	mov	r0, r4
   18784:	f8c4 300a 	str.w	r3, [r4, #10]
   18788:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   1878c:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1878e:	2302      	movs	r3, #2
   18790:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18792:	f898 1002 	ldrb.w	r1, [r8, #2]
   18796:	f7ff fd49 	bl	1822c <get_auth>
   1879a:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1879c:	4620      	mov	r0, r4
   1879e:	f7ff fd1f 	bl	181e0 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   187a2:	4ba9      	ldr	r3, [pc, #676]	; (18a48 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   187a4:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   187a6:	781b      	ldrb	r3, [r3, #0]
   187a8:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   187aa:	2310      	movs	r3, #16
   187ac:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   187ae:	f898 3004 	ldrb.w	r3, [r8, #4]
   187b2:	f003 0303 	and.w	r3, r3, #3
   187b6:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   187b8:	f898 3005 	ldrb.w	r3, [r8, #5]
   187bc:	f003 0301 	and.w	r3, r3, #1
   187c0:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   187c2:	7ce3      	ldrb	r3, [r4, #19]
   187c4:	071b      	lsls	r3, r3, #28
   187c6:	d50d      	bpl.n	187e4 <smp_pairing_req+0xc8>
   187c8:	f898 3002 	ldrb.w	r3, [r8, #2]
   187cc:	0718      	lsls	r0, r3, #28
   187ce:	d509      	bpl.n	187e4 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   187d0:	2105      	movs	r1, #5
   187d2:	4628      	mov	r0, r5
   187d4:	f011 fbd1 	bl	29f7a <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   187d8:	7d63      	ldrb	r3, [r4, #21]
   187da:	f003 0302 	and.w	r3, r3, #2
   187de:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   187e0:	2300      	movs	r3, #0
   187e2:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   187e4:	7ce3      	ldrb	r3, [r4, #19]
   187e6:	0699      	lsls	r1, r3, #26
   187e8:	d507      	bpl.n	187fa <smp_pairing_req+0xde>
   187ea:	f898 3002 	ldrb.w	r3, [r8, #2]
   187ee:	069a      	lsls	r2, r3, #26
   187f0:	d503      	bpl.n	187fa <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   187f2:	2114      	movs	r1, #20
   187f4:	4628      	mov	r0, r5
   187f6:	f011 fbc0 	bl	29f7a <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   187fa:	7da3      	ldrb	r3, [r4, #22]
   187fc:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   18800:	7d63      	ldrb	r3, [r4, #21]
   18802:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   18806:	7ce3      	ldrb	r3, [r4, #19]
   18808:	07db      	lsls	r3, r3, #31
   1880a:	d507      	bpl.n	1881c <smp_pairing_req+0x100>
   1880c:	f898 3002 	ldrb.w	r3, [r8, #2]
   18810:	07d8      	lsls	r0, r3, #31
   18812:	d503      	bpl.n	1881c <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   18814:	210d      	movs	r1, #13
   18816:	4628      	mov	r0, r5
   18818:	f011 fbaf 	bl	29f7a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1881c:	2103      	movs	r1, #3
   1881e:	4628      	mov	r0, r5
   18820:	f011 fbab 	bl	29f7a <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18824:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   18826:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1882a:	f011 fb3f 	bl	29eac <atomic_test_bit>
   1882e:	bb40      	cbnz	r0, 18882 <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   18830:	f1b8 0f04 	cmp.w	r8, #4
   18834:	d845      	bhi.n	188c2 <smp_pairing_req+0x1a6>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   18836:	7ae3      	ldrb	r3, [r4, #11]
   18838:	7ca2      	ldrb	r2, [r4, #18]
   1883a:	4013      	ands	r3, r2
   1883c:	07d9      	lsls	r1, r3, #31
   1883e:	d43e      	bmi.n	188be <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   18840:	7b21      	ldrb	r1, [r4, #12]
   18842:	7ce3      	ldrb	r3, [r4, #19]
   18844:	4319      	orrs	r1, r3
   18846:	f011 0104 	ands.w	r1, r1, #4
   1884a:	d011      	beq.n	18870 <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1884c:	4620      	mov	r0, r4
   1884e:	f7ff fcc7 	bl	181e0 <get_io_capa>
   18852:	4b7e      	ldr	r3, [pc, #504]	; (18a4c <smp_pairing_req+0x330>)
   18854:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   18858:	4498      	add	r8, r3
   1885a:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1885e:	2904      	cmp	r1, #4
   18860:	d106      	bne.n	18870 <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   18862:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   18866:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   18868:	2b00      	cmp	r3, #0
   1886a:	bf14      	ite	ne
   1886c:	2101      	movne	r1, #1
   1886e:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   18870:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   18872:	4620      	mov	r0, r4
   18874:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   18878:	f011 fb1e 	bl	29eb8 <update_keys_check>
   1887c:	bb18      	cbnz	r0, 188c6 <smp_pairing_req+0x1aa>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1887e:	2003      	movs	r0, #3
   18880:	e75e      	b.n	18740 <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   18882:	7b23      	ldrb	r3, [r4, #12]
   18884:	7ce0      	ldrb	r0, [r4, #19]
   18886:	ea03 0200 	and.w	r2, r3, r0
   1888a:	0712      	lsls	r2, r2, #28
   1888c:	d506      	bpl.n	1889c <smp_pairing_req+0x180>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1888e:	7ae2      	ldrb	r2, [r4, #11]
   18890:	f894 c012 	ldrb.w	ip, [r4, #18]
   18894:	ea42 020c 	orr.w	r2, r2, ip
   18898:	07d2      	lsls	r2, r2, #31
   1889a:	d4e9      	bmi.n	18870 <smp_pairing_req+0x154>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1889c:	f1b8 0f04 	cmp.w	r8, #4
   188a0:	d80f      	bhi.n	188c2 <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   188a2:	ea43 0100 	orr.w	r1, r3, r0
   188a6:	f011 0104 	ands.w	r1, r1, #4
   188aa:	d0e1      	beq.n	18870 <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   188ac:	4620      	mov	r0, r4
   188ae:	f7ff fc97 	bl	181e0 <get_io_capa>
   188b2:	4b67      	ldr	r3, [pc, #412]	; (18a50 <smp_pairing_req+0x334>)
   188b4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   188b8:	4443      	add	r3, r8
   188ba:	5c19      	ldrb	r1, [r3, r0]
   188bc:	e7d8      	b.n	18870 <smp_pairing_req+0x154>
		return LEGACY_OOB;
   188be:	2106      	movs	r1, #6
   188c0:	e7d6      	b.n	18870 <smp_pairing_req+0x154>
		return JUST_WORKS;
   188c2:	2100      	movs	r1, #0
   188c4:	e7d4      	b.n	18870 <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   188c6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   188ca:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   188cc:	2b03      	cmp	r3, #3
   188ce:	d03c      	beq.n	1894a <smp_pairing_req+0x22e>
   188d0:	d82a      	bhi.n	18928 <smp_pairing_req+0x20c>
   188d2:	3b01      	subs	r3, #1
   188d4:	2b01      	cmp	r3, #1
   188d6:	f63f af4e 	bhi.w	18776 <smp_pairing_req+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   188da:	2105      	movs	r1, #5
   188dc:	4628      	mov	r0, r5
   188de:	f011 fae5 	bl	29eac <atomic_test_bit>
   188e2:	2800      	cmp	r0, #0
   188e4:	f040 80be 	bne.w	18a64 <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   188e8:	4620      	mov	r0, r4
   188ea:	f7ff fc63 	bl	181b4 <latch_auth_cb>
   188ee:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   188f0:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   188f2:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   188f6:	f7ff fc5d 	bl	181b4 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   188fa:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   188fe:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   18900:	f898 0008 	ldrb.w	r0, [r8, #8]
   18904:	f001 f9c6 	bl	19c94 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   18908:	7a23      	ldrb	r3, [r4, #8]
   1890a:	b310      	cbz	r0, 18952 <smp_pairing_req+0x236>
   1890c:	7b42      	ldrb	r2, [r0, #13]
   1890e:	07d2      	lsls	r2, r2, #31
   18910:	d51f      	bpl.n	18952 <smp_pairing_req+0x236>
   18912:	b9f3      	cbnz	r3, 18952 <smp_pairing_req+0x236>
		LOG_ERR("JustWorks failed, authenticated keys present");
   18914:	4a4f      	ldr	r2, [pc, #316]	; (18a54 <smp_pairing_req+0x338>)
   18916:	4618      	mov	r0, r3
   18918:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1891c:	494e      	ldr	r1, [pc, #312]	; (18a58 <smp_pairing_req+0x33c>)
   1891e:	2201      	movs	r2, #1
   18920:	9300      	str	r3, [sp, #0]
   18922:	f011 fb1b 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   18926:	e726      	b.n	18776 <smp_pairing_req+0x5a>
	switch (sec) {
   18928:	2b04      	cmp	r3, #4
   1892a:	f47f af24 	bne.w	18776 <smp_pairing_req+0x5a>
	return MIN(req->max_key_size, rsp->max_key_size);
   1892e:	7d23      	ldrb	r3, [r4, #20]
   18930:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   18932:	4293      	cmp	r3, r2
   18934:	bf28      	it	cs
   18936:	4613      	movcs	r3, r2
   18938:	2b10      	cmp	r3, #16
   1893a:	f47f af00 	bne.w	1873e <smp_pairing_req+0x22>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1893e:	2105      	movs	r1, #5
   18940:	4628      	mov	r0, r5
   18942:	f011 fab3 	bl	29eac <atomic_test_bit>
   18946:	2800      	cmp	r0, #0
   18948:	d099      	beq.n	1887e <smp_pairing_req+0x162>
		if (smp->method == JUST_WORKS) {
   1894a:	7a23      	ldrb	r3, [r4, #8]
   1894c:	2b00      	cmp	r3, #0
   1894e:	d1c4      	bne.n	188da <smp_pairing_req+0x1be>
   18950:	e795      	b.n	1887e <smp_pairing_req+0x162>
	switch (smp->method) {
   18952:	2b06      	cmp	r3, #6
   18954:	d85d      	bhi.n	18a12 <smp_pairing_req+0x2f6>
   18956:	e8df f003 	tbb	[pc, r3]
   1895a:	5418      	.short	0x5418
   1895c:	5c5c5c2d 	.word	0x5c5c5c2d
   18960:	04          	.byte	0x04
   18961:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   18962:	2e00      	cmp	r6, #0
   18964:	d061      	beq.n	18a2a <smp_pairing_req+0x30e>
   18966:	68f3      	ldr	r3, [r6, #12]
   18968:	2b00      	cmp	r3, #0
   1896a:	d05e      	beq.n	18a2a <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   1896c:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1896e:	210a      	movs	r1, #10
   18970:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   18972:	f8ad 3014 	strh.w	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18976:	f011 fb00 	bl	29f7a <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1897a:	68f3      	ldr	r3, [r6, #12]
   1897c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18980:	a905      	add	r1, sp, #20
   18982:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   18984:	7a23      	ldrb	r3, [r4, #8]
   18986:	2b00      	cmp	r3, #0
   18988:	d151      	bne.n	18a2e <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1898a:	210f      	movs	r1, #15
   1898c:	4628      	mov	r0, r5
   1898e:	f011 fa8d 	bl	29eac <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   18992:	2800      	cmp	r0, #0
   18994:	d14b      	bne.n	18a2e <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   18996:	2f00      	cmp	r7, #0
   18998:	d049      	beq.n	18a2e <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1899a:	697b      	ldr	r3, [r7, #20]
   1899c:	2b00      	cmp	r3, #0
   1899e:	d046      	beq.n	18a2e <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   189a0:	4628      	mov	r0, r5
   189a2:	210a      	movs	r1, #10
   189a4:	f011 fae9 	bl	29f7a <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   189a8:	697b      	ldr	r3, [r7, #20]
   189aa:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   189ae:	4798      	blx	r3
		return 0;
   189b0:	2000      	movs	r0, #0
   189b2:	e6c5      	b.n	18740 <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   189b4:	2104      	movs	r1, #4
   189b6:	a805      	add	r0, sp, #20
   189b8:	f7fb ff74 	bl	148a4 <bt_rand>
   189bc:	2800      	cmp	r0, #0
   189be:	f47f aeda 	bne.w	18776 <smp_pairing_req+0x5a>
			passkey %= 1000000;
   189c2:	9b05      	ldr	r3, [sp, #20]
   189c4:	4a25      	ldr	r2, [pc, #148]	; (18a5c <smp_pairing_req+0x340>)
   189c6:	fbb3 f1f2 	udiv	r1, r3, r2
   189ca:	fb02 3311 	mls	r3, r2, r1, r3
   189ce:	9305      	str	r3, [sp, #20]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   189d0:	b14e      	cbz	r6, 189e6 <smp_pairing_req+0x2ca>
   189d2:	6833      	ldr	r3, [r6, #0]
   189d4:	b13b      	cbz	r3, 189e6 <smp_pairing_req+0x2ca>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   189d6:	210b      	movs	r1, #11
   189d8:	4628      	mov	r0, r5
   189da:	f011 face 	bl	29f7a <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   189de:	4640      	mov	r0, r8
   189e0:	6833      	ldr	r3, [r6, #0]
   189e2:	9905      	ldr	r1, [sp, #20]
   189e4:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   189e6:	9b05      	ldr	r3, [sp, #20]
	dst[1] = val >> 8;
   189e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   189ec:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   189f0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   189f2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   189f6:	0a1b      	lsrs	r3, r3, #8
   189f8:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   189fc:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   18a00:	e7c0      	b.n	18984 <smp_pairing_req+0x268>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18a02:	4628      	mov	r0, r5
   18a04:	210a      	movs	r1, #10
   18a06:	f011 fab8 	bl	29f7a <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   18a0a:	4640      	mov	r0, r8
   18a0c:	6873      	ldr	r3, [r6, #4]
   18a0e:	4798      	blx	r3
	if (ret) {
   18a10:	e7b8      	b.n	18984 <smp_pairing_req+0x268>
	switch (smp->method) {
   18a12:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18a14:	4b12      	ldr	r3, [pc, #72]	; (18a60 <smp_pairing_req+0x344>)
   18a16:	2201      	movs	r2, #1
   18a18:	9302      	str	r3, [sp, #8]
   18a1a:	2300      	movs	r3, #0
   18a1c:	490e      	ldr	r1, [pc, #56]	; (18a58 <smp_pairing_req+0x33c>)
   18a1e:	4618      	mov	r0, r3
   18a20:	e9cd 3300 	strd	r3, r3, [sp]
   18a24:	f011 fa9a 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   18a28:	e6a5      	b.n	18776 <smp_pairing_req+0x5a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   18a2a:	2002      	movs	r0, #2
   18a2c:	e688      	b.n	18740 <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18a2e:	2103      	movs	r1, #3
   18a30:	4620      	mov	r0, r4
   18a32:	f011 faa2 	bl	29f7a <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18a36:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   18a38:	f011 fa9f 	bl	29f7a <atomic_set_bit>
}
   18a3c:	b006      	add	sp, #24
   18a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   18a42:	f011 bac9 	b.w	29fd8 <send_pairing_rsp>
   18a46:	bf00      	nop
   18a48:	20030270 	.word	0x20030270
   18a4c:	0003224d 	.word	0x0003224d
   18a50:	00032234 	.word	0x00032234
   18a54:	00031ecd 	.word	0x00031ecd
   18a58:	0002d684 	.word	0x0002d684
   18a5c:	000f4240 	.word	0x000f4240
   18a60:	00031e75 	.word	0x00031e75
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   18a64:	7a23      	ldrb	r3, [r4, #8]
   18a66:	b973      	cbnz	r3, 18a86 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   18a68:	210f      	movs	r1, #15
   18a6a:	4628      	mov	r0, r5
   18a6c:	f011 fa1e 	bl	29eac <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   18a70:	b948      	cbnz	r0, 18a86 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   18a72:	b147      	cbz	r7, 18a86 <smp_pairing_req+0x36a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   18a74:	697b      	ldr	r3, [r7, #20]
   18a76:	b133      	cbz	r3, 18a86 <smp_pairing_req+0x36a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18a78:	4628      	mov	r0, r5
   18a7a:	210a      	movs	r1, #10
   18a7c:	f011 fa7d 	bl	29f7a <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   18a80:	4630      	mov	r0, r6
   18a82:	697b      	ldr	r3, [r7, #20]
   18a84:	e793      	b.n	189ae <smp_pairing_req+0x292>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   18a86:	210c      	movs	r1, #12
   18a88:	4620      	mov	r0, r4
   18a8a:	e7d5      	b.n	18a38 <smp_pairing_req+0x31c>

00018a8c <compute_and_check_and_send_periph_dhcheck>:
{
   18a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a90:	4604      	mov	r4, r0
   18a92:	b090      	sub	sp, #64	; 0x40
	(void)memset(r, 0, sizeof(r));
   18a94:	ad0c      	add	r5, sp, #48	; 0x30
   18a96:	2210      	movs	r2, #16
   18a98:	2100      	movs	r1, #0
   18a9a:	4628      	mov	r0, r5
   18a9c:	f013 fb50 	bl	2c140 <memset>
	switch (smp->method) {
   18aa0:	7a23      	ldrb	r3, [r4, #8]
   18aa2:	2b05      	cmp	r3, #5
   18aa4:	d83a      	bhi.n	18b1c <compute_and_check_and_send_periph_dhcheck+0x90>
   18aa6:	e8df f003 	tbb	[pc, r3]
   18aaa:	0306      	.short	0x0306
   18aac:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   18ab0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   18ab4:	930c      	str	r3, [sp, #48]	; 0x30
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   18ab6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   18aba:	f104 0247 	add.w	r2, r4, #71	; 0x47
   18abe:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   18ac2:	e9cd 7201 	strd	r7, r2, [sp, #4]
   18ac6:	f104 0837 	add.w	r8, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   18aca:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   18ace:	f104 0927 	add.w	r9, r4, #39	; 0x27
   18ad2:	9200      	str	r2, [sp, #0]
   18ad4:	4641      	mov	r1, r8
   18ad6:	464a      	mov	r2, r9
   18ad8:	3397      	adds	r3, #151	; 0x97
   18ada:	f104 0097 	add.w	r0, r4, #151	; 0x97
   18ade:	f001 f987 	bl	19df0 <bt_crypto_f5>
   18ae2:	4682      	mov	sl, r0
   18ae4:	b348      	cbz	r0, 18b3a <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   18ae6:	4b4e      	ldr	r3, [pc, #312]	; (18c20 <compute_and_check_and_send_periph_dhcheck+0x194>)
   18ae8:	9302      	str	r3, [sp, #8]
   18aea:	2300      	movs	r3, #0
   18aec:	e9cd 3300 	strd	r3, r3, [sp]
   18af0:	2201      	movs	r2, #1
   18af2:	4618      	mov	r0, r3
   18af4:	494b      	ldr	r1, [pc, #300]	; (18c24 <compute_and_check_and_send_periph_dhcheck+0x198>)
   18af6:	f011 fa31 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18afa:	e01a      	b.n	18b32 <compute_and_check_and_send_periph_dhcheck+0xa6>
		if (smp->oobd_remote) {
   18afc:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   18b00:	2b00      	cmp	r3, #0
   18b02:	d0d8      	beq.n	18ab6 <compute_and_check_and_send_periph_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   18b04:	462e      	mov	r6, r5
   18b06:	f103 0710 	add.w	r7, r3, #16
   18b0a:	4632      	mov	r2, r6
   18b0c:	6818      	ldr	r0, [r3, #0]
   18b0e:	6859      	ldr	r1, [r3, #4]
   18b10:	3308      	adds	r3, #8
   18b12:	c203      	stmia	r2!, {r0, r1}
   18b14:	42bb      	cmp	r3, r7
   18b16:	4616      	mov	r6, r2
   18b18:	d1f7      	bne.n	18b0a <compute_and_check_and_send_periph_dhcheck+0x7e>
   18b1a:	e7cc      	b.n	18ab6 <compute_and_check_and_send_periph_dhcheck+0x2a>
	switch (smp->method) {
   18b1c:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18b1e:	4b42      	ldr	r3, [pc, #264]	; (18c28 <compute_and_check_and_send_periph_dhcheck+0x19c>)
   18b20:	2201      	movs	r2, #1
   18b22:	9302      	str	r3, [sp, #8]
   18b24:	2300      	movs	r3, #0
   18b26:	493f      	ldr	r1, [pc, #252]	; (18c24 <compute_and_check_and_send_periph_dhcheck+0x198>)
   18b28:	4618      	mov	r0, r3
   18b2a:	e9cd 3300 	strd	r3, r3, [sp]
   18b2e:	f011 fa15 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18b32:	2008      	movs	r0, #8
}
   18b34:	b010      	add	sp, #64	; 0x40
   18b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   18b3a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   18b3e:	ae08      	add	r6, sp, #32
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   18b40:	f103 0297 	add.w	r2, r3, #151	; 0x97
   18b44:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   18b46:	9301      	str	r3, [sp, #4]
   18b48:	f104 0311 	add.w	r3, r4, #17
   18b4c:	9202      	str	r2, [sp, #8]
   18b4e:	9300      	str	r3, [sp, #0]
   18b50:	4642      	mov	r2, r8
   18b52:	462b      	mov	r3, r5
   18b54:	4649      	mov	r1, r9
   18b56:	4638      	mov	r0, r7
   18b58:	9603      	str	r6, [sp, #12]
   18b5a:	f011 fcc5 	bl	2a4e8 <bt_crypto_f6>
   18b5e:	b130      	cbz	r0, 18b6e <compute_and_check_and_send_periph_dhcheck+0xe2>
		LOG_ERR("Calculate local DHKey check failed");
   18b60:	4b32      	ldr	r3, [pc, #200]	; (18c2c <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   18b62:	f8cd a000 	str.w	sl, [sp]
   18b66:	e9cd a301 	strd	sl, r3, [sp, #4]
   18b6a:	4653      	mov	r3, sl
   18b6c:	e7c0      	b.n	18af0 <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   18b6e:	7a23      	ldrb	r3, [r4, #8]
   18b70:	2b05      	cmp	r3, #5
   18b72:	d10e      	bne.n	18b92 <compute_and_check_and_send_periph_dhcheck+0x106>
		if (smp->oobd_local) {
   18b74:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   18b78:	b311      	cbz	r1, 18bc0 <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   18b7a:	460b      	mov	r3, r1
   18b7c:	46ac      	mov	ip, r5
   18b7e:	f101 0e10 	add.w	lr, r1, #16
   18b82:	4662      	mov	r2, ip
   18b84:	6818      	ldr	r0, [r3, #0]
   18b86:	6859      	ldr	r1, [r3, #4]
   18b88:	3308      	adds	r3, #8
   18b8a:	c203      	stmia	r2!, {r0, r1}
   18b8c:	4573      	cmp	r3, lr
   18b8e:	4694      	mov	ip, r2
   18b90:	d1f7      	bne.n	18b82 <compute_and_check_and_send_periph_dhcheck+0xf6>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   18b92:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   18b96:	f10d 0a10 	add.w	sl, sp, #16
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   18b9a:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   18b9e:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   18ba0:	9301      	str	r3, [sp, #4]
   18ba2:	f104 030a 	add.w	r3, r4, #10
   18ba6:	9202      	str	r2, [sp, #8]
   18ba8:	9300      	str	r3, [sp, #0]
   18baa:	464a      	mov	r2, r9
   18bac:	462b      	mov	r3, r5
   18bae:	4641      	mov	r1, r8
   18bb0:	4638      	mov	r0, r7
   18bb2:	f8cd a00c 	str.w	sl, [sp, #12]
   18bb6:	f011 fc97 	bl	2a4e8 <bt_crypto_f6>
   18bba:	b130      	cbz	r0, 18bca <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   18bbc:	4b1c      	ldr	r3, [pc, #112]	; (18c30 <compute_and_check_and_send_periph_dhcheck+0x1a4>)
   18bbe:	e793      	b.n	18ae8 <compute_and_check_and_send_periph_dhcheck+0x5c>
			memset(r, 0, sizeof(r));
   18bc0:	2210      	movs	r2, #16
   18bc2:	4628      	mov	r0, r5
   18bc4:	f013 fabc 	bl	2c140 <memset>
   18bc8:	e7e3      	b.n	18b92 <compute_and_check_and_send_periph_dhcheck+0x106>
	if (memcmp(smp->e, re, 16)) {
   18bca:	2210      	movs	r2, #16
   18bcc:	4651      	mov	r1, sl
   18bce:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   18bd2:	f013 fa6b 	bl	2c0ac <memcmp>
   18bd6:	bb00      	cbnz	r0, 18c1a <compute_and_check_and_send_periph_dhcheck+0x18e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   18bd8:	210d      	movs	r1, #13
   18bda:	4620      	mov	r0, r4
   18bdc:	f011 f9dd 	bl	29f9a <smp_create_pdu.constprop.0>
	if (!buf) {
   18be0:	4607      	mov	r7, r0
   18be2:	2800      	cmp	r0, #0
   18be4:	d0a5      	beq.n	18b32 <compute_and_check_and_send_periph_dhcheck+0xa6>
   18be6:	2110      	movs	r1, #16
   18be8:	300c      	adds	r0, #12
   18bea:	f001 fd01 	bl	1a5f0 <net_buf_simple_add>
   18bee:	4632      	mov	r2, r6
   18bf0:	4603      	mov	r3, r0
   18bf2:	4616      	mov	r6, r2
   18bf4:	ce03      	ldmia	r6!, {r0, r1}
   18bf6:	42ae      	cmp	r6, r5
   18bf8:	6018      	str	r0, [r3, #0]
   18bfa:	6059      	str	r1, [r3, #4]
   18bfc:	4632      	mov	r2, r6
   18bfe:	f103 0308 	add.w	r3, r3, #8
   18c02:	d1f6      	bne.n	18bf2 <compute_and_check_and_send_periph_dhcheck+0x166>
	smp_send(smp, buf, NULL, NULL);
   18c04:	2200      	movs	r2, #0
   18c06:	4639      	mov	r1, r7
   18c08:	4620      	mov	r0, r4
   18c0a:	f011 f98a 	bl	29f22 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   18c0e:	1d20      	adds	r0, r4, #4
   18c10:	2101      	movs	r1, #1
   18c12:	f011 f9b2 	bl	29f7a <atomic_set_bit>
	return 0;
   18c16:	2000      	movs	r0, #0
   18c18:	e78c      	b.n	18b34 <compute_and_check_and_send_periph_dhcheck+0xa8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   18c1a:	200b      	movs	r0, #11
   18c1c:	e78a      	b.n	18b34 <compute_and_check_and_send_periph_dhcheck+0xa8>
   18c1e:	bf00      	nop
   18c20:	00031efa 	.word	0x00031efa
   18c24:	0002d684 	.word	0x0002d684
   18c28:	00031e75 	.word	0x00031e75
   18c2c:	00031f0f 	.word	0x00031f0f
   18c30:	00031f32 	.word	0x00031f32

00018c34 <bt_smp_connected>:
{
   18c34:	b538      	push	{r3, r4, r5, lr}
   18c36:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   18c38:	4908      	ldr	r1, [pc, #32]	; (18c5c <bt_smp_connected+0x28>)
   18c3a:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   18c3e:	3094      	adds	r0, #148	; 0x94
   18c40:	f008 fd96 	bl	21770 <k_work_init_delayable>
	smp_reset(smp);
   18c44:	4628      	mov	r0, r5
   18c46:	f011 fa41 	bl	2a0cc <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18c4a:	4b05      	ldr	r3, [pc, #20]	; (18c60 <bt_smp_connected+0x2c>)
   18c4c:	34c4      	adds	r4, #196	; 0xc4
   18c4e:	e8d4 2fef 	ldaex	r2, [r4]
   18c52:	e8c4 3fe1 	stlex	r1, r3, [r4]
   18c56:	2900      	cmp	r1, #0
   18c58:	d1f9      	bne.n	18c4e <bt_smp_connected+0x1a>
}
   18c5a:	bd38      	pop	{r3, r4, r5, pc}
   18c5c:	000198e1 	.word	0x000198e1
   18c60:	20009ab0 	.word	0x20009ab0

00018c64 <smp_pairing_confirm>:
{
   18c64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   18c66:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   18c68:	68cd      	ldr	r5, [r1, #12]
{
   18c6a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   18c6c:	210b      	movs	r1, #11
   18c6e:	4630      	mov	r0, r6
   18c70:	f011 f943 	bl	29efa <atomic_clear_bit>
   18c74:	462b      	mov	r3, r5
   18c76:	f104 0217 	add.w	r2, r4, #23
   18c7a:	f105 0110 	add.w	r1, r5, #16
   18c7e:	f853 0b04 	ldr.w	r0, [r3], #4
   18c82:	428b      	cmp	r3, r1
   18c84:	f842 0b04 	str.w	r0, [r2], #4
   18c88:	d1f9      	bne.n	18c7e <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18c8a:	2105      	movs	r1, #5
   18c8c:	4630      	mov	r0, r6
   18c8e:	f011 f90d 	bl	29eac <atomic_test_bit>
   18c92:	b928      	cbnz	r0, 18ca0 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   18c94:	4620      	mov	r0, r4
}
   18c96:	b004      	add	sp, #16
   18c98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   18c9c:	f011 ba8c 	b.w	2a1b8 <legacy_pairing_confirm>
	switch (smp->method) {
   18ca0:	7a23      	ldrb	r3, [r4, #8]
   18ca2:	2b01      	cmp	r3, #1
   18ca4:	d00a      	beq.n	18cbc <smp_pairing_confirm+0x58>
   18ca6:	2b02      	cmp	r3, #2
   18ca8:	d115      	bne.n	18cd6 <smp_pairing_confirm+0x72>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18caa:	2104      	movs	r1, #4
   18cac:	4620      	mov	r0, r4
   18cae:	f011 f964 	bl	29f7a <atomic_set_bit>
}
   18cb2:	b004      	add	sp, #16
   18cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   18cb8:	f7ff bbca 	b.w	18450 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   18cbc:	210a      	movs	r1, #10
   18cbe:	4630      	mov	r0, r6
   18cc0:	f011 f8f4 	bl	29eac <atomic_test_bit>
   18cc4:	2800      	cmp	r0, #0
   18cc6:	d0f0      	beq.n	18caa <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   18cc8:	4630      	mov	r0, r6
   18cca:	2100      	movs	r1, #0
   18ccc:	f011 f955 	bl	29f7a <atomic_set_bit>
			return 0;
   18cd0:	2000      	movs	r0, #0
}
   18cd2:	b004      	add	sp, #16
   18cd4:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   18cd6:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18cd8:	4b05      	ldr	r3, [pc, #20]	; (18cf0 <smp_pairing_confirm+0x8c>)
   18cda:	2201      	movs	r2, #1
   18cdc:	9302      	str	r3, [sp, #8]
   18cde:	2300      	movs	r3, #0
   18ce0:	4904      	ldr	r1, [pc, #16]	; (18cf4 <smp_pairing_confirm+0x90>)
   18ce2:	4618      	mov	r0, r3
   18ce4:	e9cd 3300 	strd	r3, r3, [sp]
   18ce8:	f011 f938 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18cec:	2008      	movs	r0, #8
   18cee:	e7f0      	b.n	18cd2 <smp_pairing_confirm+0x6e>
   18cf0:	00031e75 	.word	0x00031e75
   18cf4:	0002d684 	.word	0x0002d684

00018cf8 <smp_pairing_random>:
{
   18cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18cfc:	4604      	mov	r4, r0
   18cfe:	b089      	sub	sp, #36	; 0x24
   18d00:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18d02:	f7ff fa57 	bl	181b4 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   18d06:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18d0a:	4605      	mov	r5, r0
   18d0c:	464a      	mov	r2, r9
   18d0e:	68f3      	ldr	r3, [r6, #12]
   18d10:	f103 0110 	add.w	r1, r3, #16
   18d14:	f853 0b04 	ldr.w	r0, [r3], #4
   18d18:	428b      	cmp	r3, r1
   18d1a:	f842 0b04 	str.w	r0, [r2], #4
   18d1e:	d1f9      	bne.n	18d14 <smp_pairing_random+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   18d20:	1d27      	adds	r7, r4, #4
   18d22:	2105      	movs	r1, #5
   18d24:	4638      	mov	r0, r7
   18d26:	f011 f8c1 	bl	29eac <atomic_test_bit>
   18d2a:	2800      	cmp	r0, #0
   18d2c:	d14f      	bne.n	18dce <smp_pairing_random+0xd6>
	struct bt_conn *conn = smp->chan.chan.conn;
   18d2e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18d32:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   18d36:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18d3a:	ad04      	add	r5, sp, #16
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   18d3c:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   18d3e:	9201      	str	r2, [sp, #4]
   18d40:	9300      	str	r3, [sp, #0]
   18d42:	4649      	mov	r1, r9
   18d44:	4630      	mov	r0, r6
   18d46:	9502      	str	r5, [sp, #8]
   18d48:	f104 0310 	add.w	r3, r4, #16
   18d4c:	f104 0209 	add.w	r2, r4, #9
   18d50:	f011 f9d7 	bl	2a102 <smp_c1>
	if (err) {
   18d54:	bb20      	cbnz	r0, 18da0 <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   18d56:	2210      	movs	r2, #16
   18d58:	4629      	mov	r1, r5
   18d5a:	f104 0017 	add.w	r0, r4, #23
   18d5e:	f013 f9a5 	bl	2c0ac <memcmp>
   18d62:	4680      	mov	r8, r0
   18d64:	2800      	cmp	r0, #0
   18d66:	d177      	bne.n	18e58 <smp_pairing_random+0x160>
	memcpy(out, r2, 8);
   18d68:	462b      	mov	r3, r5
   18d6a:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   18d6e:	f8d9 1004 	ldr.w	r1, [r9, #4]
	return bt_encrypt_le(k, out, out);
   18d72:	462a      	mov	r2, r5
	memcpy(out, r2, 8);
   18d74:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   18d76:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   18d7a:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   18d7e:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   18d80:	4629      	mov	r1, r5
   18d82:	4630      	mov	r0, r6
   18d84:	f010 f848 	bl	28e18 <bt_encrypt_le>
		if (err) {
   18d88:	b170      	cbz	r0, 18da8 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   18d8a:	4b62      	ldr	r3, [pc, #392]	; (18f14 <smp_pairing_random+0x21c>)
   18d8c:	f8cd 8000 	str.w	r8, [sp]
   18d90:	e9cd 8301 	strd	r8, r3, [sp, #4]
   18d94:	4643      	mov	r3, r8
		LOG_ERR("Calculate confirm failed");
   18d96:	2201      	movs	r2, #1
   18d98:	4618      	mov	r0, r3
   18d9a:	495f      	ldr	r1, [pc, #380]	; (18f18 <smp_pairing_random+0x220>)
   18d9c:	f011 f8de 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18da0:	2008      	movs	r0, #8
}
   18da2:	b009      	add	sp, #36	; 0x24
   18da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18da8:	4633      	mov	r3, r6
   18daa:	ae08      	add	r6, sp, #32
   18dac:	462a      	mov	r2, r5
   18dae:	ca03      	ldmia	r2!, {r0, r1}
   18db0:	42b2      	cmp	r2, r6
   18db2:	6018      	str	r0, [r3, #0]
   18db4:	6059      	str	r1, [r3, #4]
   18db6:	4615      	mov	r5, r2
   18db8:	f103 0308 	add.w	r3, r3, #8
   18dbc:	d1f6      	bne.n	18dac <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   18dbe:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18dc0:	4638      	mov	r0, r7
   18dc2:	f011 f8da 	bl	29f7a <atomic_set_bit>
	return smp_send_pairing_random(smp);
   18dc6:	4620      	mov	r0, r4
   18dc8:	f011 f920 	bl	2a00c <smp_send_pairing_random>
   18dcc:	e7e9      	b.n	18da2 <smp_pairing_random+0xaa>
	switch (smp->method) {
   18dce:	7a23      	ldrb	r3, [r4, #8]
   18dd0:	2b05      	cmp	r3, #5
   18dd2:	f200 8091 	bhi.w	18ef8 <smp_pairing_random+0x200>
   18dd6:	e8df f003 	tbb	[pc, r3]
   18dda:	1f19      	.short	0x1f19
   18ddc:	658f031f 	.word	0x658f031f
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   18de0:	ab04      	add	r3, sp, #16
   18de2:	494e      	ldr	r1, [pc, #312]	; (18f1c <smp_pairing_random+0x224>)
   18de4:	9300      	str	r3, [sp, #0]
   18de6:	464a      	mov	r2, r9
   18de8:	6809      	ldr	r1, [r1, #0]
   18dea:	f104 0327 	add.w	r3, r4, #39	; 0x27
   18dee:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18df2:	f001 f865 	bl	19ec0 <bt_crypto_g2>
   18df6:	2800      	cmp	r0, #0
   18df8:	d1d2      	bne.n	18da0 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18dfa:	210a      	movs	r1, #10
   18dfc:	4638      	mov	r0, r7
   18dfe:	f011 f8bc 	bl	29f7a <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   18e02:	68ab      	ldr	r3, [r5, #8]
   18e04:	9904      	ldr	r1, [sp, #16]
   18e06:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18e0a:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   18e0c:	210d      	movs	r1, #13
   18e0e:	4620      	mov	r0, r4
   18e10:	f011 f8b3 	bl	29f7a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18e14:	2110      	movs	r1, #16
   18e16:	e7d3      	b.n	18dc0 <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18e18:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   18e1c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18e20:	493e      	ldr	r1, [pc, #248]	; (18f1c <smp_pairing_random+0x224>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18e22:	40d3      	lsrs	r3, r2
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18e24:	ad04      	add	r5, sp, #16
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18e26:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   18e2a:	9500      	str	r5, [sp, #0]
   18e2c:	464a      	mov	r2, r9
   18e2e:	6809      	ldr	r1, [r1, #0]
   18e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18e34:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18e38:	f011 fb31 	bl	2a49e <bt_crypto_f4>
   18e3c:	b128      	cbz	r0, 18e4a <smp_pairing_random+0x152>
		LOG_ERR("Calculate confirm failed");
   18e3e:	4b38      	ldr	r3, [pc, #224]	; (18f20 <smp_pairing_random+0x228>)
   18e40:	9302      	str	r3, [sp, #8]
   18e42:	2300      	movs	r3, #0
   18e44:	e9cd 3300 	strd	r3, r3, [sp]
   18e48:	e7a5      	b.n	18d96 <smp_pairing_random+0x9e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   18e4a:	2210      	movs	r2, #16
   18e4c:	4629      	mov	r1, r5
   18e4e:	f104 0017 	add.w	r0, r4, #23
   18e52:	f013 f92b 	bl	2c0ac <memcmp>
   18e56:	b108      	cbz	r0, 18e5c <smp_pairing_random+0x164>
		return BT_SMP_ERR_CONFIRM_FAILED;
   18e58:	2004      	movs	r0, #4
   18e5a:	e7a2      	b.n	18da2 <smp_pairing_random+0xaa>
		atomic_set_bit(smp->allowed_cmds,
   18e5c:	2103      	movs	r1, #3
   18e5e:	4620      	mov	r0, r4
   18e60:	f011 f88b 	bl	29f7a <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   18e64:	f011 f8d2 	bl	2a00c <smp_send_pairing_random>
		if (err) {
   18e68:	2800      	cmp	r0, #0
   18e6a:	d19a      	bne.n	18da2 <smp_pairing_random+0xaa>
		smp->passkey_round++;
   18e6c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   18e70:	3301      	adds	r3, #1
   18e72:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   18e74:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   18e76:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   18e7a:	d109      	bne.n	18e90 <smp_pairing_random+0x198>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   18e7c:	210d      	movs	r1, #13
   18e7e:	4620      	mov	r0, r4
   18e80:	f011 f87b 	bl	29f7a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   18e84:	2110      	movs	r1, #16
   18e86:	4638      	mov	r0, r7
   18e88:	f011 f877 	bl	29f7a <atomic_set_bit>
			return 0;
   18e8c:	2000      	movs	r0, #0
   18e8e:	e788      	b.n	18da2 <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   18e90:	2110      	movs	r1, #16
   18e92:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18e96:	f7fb fd05 	bl	148a4 <bt_rand>
   18e9a:	3800      	subs	r0, #0
   18e9c:	bf18      	it	ne
   18e9e:	2001      	movne	r0, #1
   18ea0:	00c0      	lsls	r0, r0, #3
   18ea2:	e77e      	b.n	18da2 <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   18ea4:	2110      	movs	r1, #16
   18ea6:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18eaa:	f7fb fcfb 	bl	148a4 <bt_rand>
   18eae:	2800      	cmp	r0, #0
   18eb0:	f47f af76 	bne.w	18da0 <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   18eb4:	b365      	cbz	r5, 18f10 <smp_pairing_random+0x218>
   18eb6:	68eb      	ldr	r3, [r5, #12]
   18eb8:	b353      	cbz	r3, 18f10 <smp_pairing_random+0x218>
			struct bt_conn_oob_info info = {
   18eba:	4b1a      	ldr	r3, [pc, #104]	; (18f24 <smp_pairing_random+0x22c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18ebc:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   18ebe:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   18ec0:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   18ec2:	f8ad 3010 	strh.w	r3, [sp, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   18ec6:	7ca3      	ldrb	r3, [r4, #18]
   18ec8:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   18ecc:	d412      	bmi.n	18ef4 <smp_pairing_random+0x1fc>
   18ece:	2b00      	cmp	r3, #0
   18ed0:	bf14      	ite	ne
   18ed2:	2301      	movne	r3, #1
   18ed4:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   18ed6:	f88d 3011 	strb.w	r3, [sp, #17]
			smp->oobd_local = NULL;
   18eda:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   18edc:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   18ede:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   18ee2:	210c      	movs	r1, #12
   18ee4:	f011 f849 	bl	29f7a <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   18ee8:	68eb      	ldr	r3, [r5, #12]
   18eea:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18eee:	a904      	add	r1, sp, #16
   18ef0:	4798      	blx	r3
			return 0;
   18ef2:	e7cb      	b.n	18e8c <smp_pairing_random+0x194>
		if (rsp_oob_present) {
   18ef4:	005b      	lsls	r3, r3, #1
   18ef6:	e7ee      	b.n	18ed6 <smp_pairing_random+0x1de>
	switch (smp->method) {
   18ef8:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18efa:	4b0b      	ldr	r3, [pc, #44]	; (18f28 <smp_pairing_random+0x230>)
   18efc:	2201      	movs	r2, #1
   18efe:	9302      	str	r3, [sp, #8]
   18f00:	2300      	movs	r3, #0
   18f02:	4905      	ldr	r1, [pc, #20]	; (18f18 <smp_pairing_random+0x220>)
   18f04:	4618      	mov	r0, r3
   18f06:	e9cd 3300 	strd	r3, r3, [sp]
   18f0a:	f011 f827 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18f0e:	e747      	b.n	18da0 <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   18f10:	2002      	movs	r0, #2
   18f12:	e746      	b.n	18da2 <smp_pairing_random+0xaa>
   18f14:	00031f56 	.word	0x00031f56
   18f18:	0002d684 	.word	0x0002d684
   18f1c:	2002f3d0 	.word	0x2002f3d0
   18f20:	00031f6b 	.word	0x00031f6b
   18f24:	0002d7e2 	.word	0x0002d7e2
   18f28:	00031e75 	.word	0x00031e75

00018f2c <bt_smp_start_security>:
{
   18f2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   18f30:	78c6      	ldrb	r6, [r0, #3]
{
   18f32:	4604      	mov	r4, r0
	switch (conn->role) {
   18f34:	2e01      	cmp	r6, #1
   18f36:	d005      	beq.n	18f44 <bt_smp_start_security+0x18>
		return -EINVAL;
   18f38:	f06f 0415 	mvn.w	r4, #21
}
   18f3c:	4620      	mov	r0, r4
   18f3e:	b003      	add	sp, #12
   18f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   18f44:	f7ff f9b4 	bl	182b0 <smp_chan_get>
	if (!smp) {
   18f48:	4605      	mov	r5, r0
   18f4a:	2800      	cmp	r0, #0
   18f4c:	f000 80ac 	beq.w	190a8 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   18f50:	1d07      	adds	r7, r0, #4
   18f52:	2104      	movs	r1, #4
   18f54:	4638      	mov	r0, r7
   18f56:	f010 ffa9 	bl	29eac <atomic_test_bit>
   18f5a:	2800      	cmp	r0, #0
   18f5c:	f040 80a7 	bne.w	190ae <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   18f60:	2103      	movs	r1, #3
   18f62:	4638      	mov	r0, r7
   18f64:	f010 ffa2 	bl	29eac <atomic_test_bit>
   18f68:	b110      	cbz	r0, 18f70 <bt_smp_start_security+0x44>
		return -EBUSY;
   18f6a:	f06f 040f 	mvn.w	r4, #15
   18f6e:	e7e5      	b.n	18f3c <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   18f70:	4631      	mov	r1, r6
   18f72:	4638      	mov	r0, r7
   18f74:	f010 ff9a 	bl	29eac <atomic_test_bit>
   18f78:	2800      	cmp	r0, #0
   18f7a:	d1f6      	bne.n	18f6a <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18f7c:	4628      	mov	r0, r5
   18f7e:	f7ff f919 	bl	181b4 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   18f82:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18f86:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   18f88:	7a9b      	ldrb	r3, [r3, #10]
   18f8a:	2b03      	cmp	r3, #3
   18f8c:	d042      	beq.n	19014 <bt_smp_start_security+0xe8>
   18f8e:	d832      	bhi.n	18ff6 <bt_smp_start_security+0xca>
   18f90:	3b01      	subs	r3, #1
   18f92:	2b01      	cmp	r3, #1
   18f94:	d948      	bls.n	19028 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   18f96:	210b      	movs	r1, #11
   18f98:	1d20      	adds	r0, r4, #4
   18f9a:	f010 ff87 	bl	29eac <atomic_test_bit>
   18f9e:	2800      	cmp	r0, #0
   18fa0:	d1ca      	bne.n	18f38 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   18fa2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   18fa6:	b983      	cbnz	r3, 18fca <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   18fa8:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   18fac:	4632      	mov	r2, r6
   18fae:	2020      	movs	r0, #32
   18fb0:	7a21      	ldrb	r1, [r4, #8]
   18fb2:	f000 fde9 	bl	19b88 <bt_keys_find>
   18fb6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   18fba:	b930      	cbnz	r0, 18fca <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   18fbc:	4632      	mov	r2, r6
   18fbe:	2004      	movs	r0, #4
   18fc0:	7a21      	ldrb	r1, [r4, #8]
   18fc2:	f000 fde1 	bl	19b88 <bt_keys_find>
   18fc6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   18fca:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   18fce:	2b00      	cmp	r3, #0
   18fd0:	d0b2      	beq.n	18f38 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   18fd2:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   18fd4:	f012 0f24 	tst.w	r2, #36	; 0x24
   18fd8:	d0ae      	beq.n	18f38 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   18fda:	7aa1      	ldrb	r1, [r4, #10]
   18fdc:	2902      	cmp	r1, #2
   18fde:	d923      	bls.n	19028 <bt_smp_start_security+0xfc>
   18fe0:	7b58      	ldrb	r0, [r3, #13]
   18fe2:	07c0      	lsls	r0, r0, #31
   18fe4:	d5a8      	bpl.n	18f38 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   18fe6:	2903      	cmp	r1, #3
   18fe8:	d01e      	beq.n	19028 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   18fea:	0692      	lsls	r2, r2, #26
   18fec:	d5a4      	bpl.n	18f38 <bt_smp_start_security+0xc>
   18fee:	7b1b      	ldrb	r3, [r3, #12]
   18ff0:	2b10      	cmp	r3, #16
   18ff2:	d1a1      	bne.n	18f38 <bt_smp_start_security+0xc>
   18ff4:	e018      	b.n	19028 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   18ff6:	2b04      	cmp	r3, #4
   18ff8:	d1cd      	bne.n	18f96 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   18ffa:	4628      	mov	r0, r5
   18ffc:	f7ff f8f0 	bl	181e0 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19000:	2803      	cmp	r0, #3
   19002:	d104      	bne.n	1900e <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19004:	2e00      	cmp	r6, #0
   19006:	d0c6      	beq.n	18f96 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19008:	68f3      	ldr	r3, [r6, #12]
   1900a:	2b00      	cmp	r3, #0
   1900c:	d0c3      	beq.n	18f96 <bt_smp_start_security+0x6a>
   1900e:	4b29      	ldr	r3, [pc, #164]	; (190b4 <bt_smp_start_security+0x188>)
   19010:	781b      	ldrb	r3, [r3, #0]
   19012:	e007      	b.n	19024 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19014:	4628      	mov	r0, r5
   19016:	f7ff f8e3 	bl	181e0 <get_io_capa>
   1901a:	2803      	cmp	r0, #3
   1901c:	d104      	bne.n	19028 <bt_smp_start_security+0xfc>
   1901e:	2e00      	cmp	r6, #0
   19020:	d0b9      	beq.n	18f96 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   19022:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19024:	2b00      	cmp	r3, #0
   19026:	d0b6      	beq.n	18f96 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   19028:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1902c:	b13b      	cbz	r3, 1903e <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1902e:	4628      	mov	r0, r5
   19030:	f7ff f958 	bl	182e4 <smp_init>
   19034:	4680      	mov	r8, r0
   19036:	b170      	cbz	r0, 19056 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   19038:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1903c:	e77e      	b.n	18f3c <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1903e:	7a20      	ldrb	r0, [r4, #8]
   19040:	f104 0190 	add.w	r1, r4, #144	; 0x90
   19044:	f000 fd48 	bl	19ad8 <bt_keys_get_addr>
   19048:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   1904c:	2800      	cmp	r0, #0
   1904e:	d1ee      	bne.n	1902e <bt_smp_start_security+0x102>
			return -ENOMEM;
   19050:	f06f 040b 	mvn.w	r4, #11
   19054:	e772      	b.n	18f3c <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   19056:	210b      	movs	r1, #11
   19058:	4628      	mov	r0, r5
   1905a:	f010 ff9e 	bl	29f9a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1905e:	4606      	mov	r6, r0
   19060:	2800      	cmp	r0, #0
   19062:	d0e9      	beq.n	19038 <bt_smp_start_security+0x10c>
   19064:	2101      	movs	r1, #1
   19066:	300c      	adds	r0, #12
   19068:	f001 fac2 	bl	1a5f0 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1906c:	2109      	movs	r1, #9
   1906e:	4681      	mov	r9, r0
   19070:	4628      	mov	r0, r5
   19072:	f7ff f8db 	bl	1822c <get_auth>
   19076:	4643      	mov	r3, r8
   19078:	f889 0000 	strb.w	r0, [r9]
   1907c:	4632      	mov	r2, r6
   1907e:	4620      	mov	r0, r4
   19080:	2106      	movs	r1, #6
   19082:	f8cd 8000 	str.w	r8, [sp]
   19086:	f010 f864 	bl	29152 <bt_l2cap_send_cb>
	if (err) {
   1908a:	4604      	mov	r4, r0
   1908c:	b118      	cbz	r0, 19096 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1908e:	4630      	mov	r0, r6
   19090:	f001 f98c 	bl	1a3ac <net_buf_unref>
		return err;
   19094:	e752      	b.n	18f3c <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   19096:	4638      	mov	r0, r7
   19098:	210f      	movs	r1, #15
   1909a:	f010 ff6e 	bl	29f7a <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1909e:	2101      	movs	r1, #1
   190a0:	4628      	mov	r0, r5
   190a2:	f010 ff6a 	bl	29f7a <atomic_set_bit>
	return 0;
   190a6:	e749      	b.n	18f3c <bt_smp_start_security+0x10>
		return -ENOTCONN;
   190a8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   190ac:	e746      	b.n	18f3c <bt_smp_start_security+0x10>
		return -EIO;
   190ae:	f06f 0404 	mvn.w	r4, #4
   190b2:	e743      	b.n	18f3c <bt_smp_start_security+0x10>
   190b4:	2003026f 	.word	0x2003026f

000190b8 <smp_pairing_complete>:
{
   190b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190ba:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   190bc:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   190c0:	1d04      	adds	r4, r0, #4
	if (!status) {
   190c2:	bb39      	cbnz	r1, 19114 <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   190c4:	210d      	movs	r1, #13
   190c6:	4620      	mov	r0, r4
   190c8:	f010 fef0 	bl	29eac <atomic_test_bit>
	return list->head;
   190cc:	4b36      	ldr	r3, [pc, #216]	; (191a8 <smp_pairing_complete+0xf0>)
   190ce:	4607      	mov	r7, r0
   190d0:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   190d2:	b19b      	cbz	r3, 190fc <smp_pairing_complete+0x44>
	return node->next;
   190d4:	681c      	ldr	r4, [r3, #0]
   190d6:	b104      	cbz	r4, 190da <smp_pairing_complete+0x22>
   190d8:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   190da:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   190de:	b113      	cbz	r3, 190e6 <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   190e0:	4639      	mov	r1, r7
   190e2:	4628      	mov	r0, r5
   190e4:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   190e6:	b14c      	cbz	r4, 190fc <smp_pairing_complete+0x44>
   190e8:	4623      	mov	r3, r4
   190ea:	68e4      	ldr	r4, [r4, #12]
   190ec:	681b      	ldr	r3, [r3, #0]
   190ee:	b11c      	cbz	r4, 190f8 <smp_pairing_complete+0x40>
   190f0:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   190f2:	2b00      	cmp	r3, #0
   190f4:	d1f4      	bne.n	190e0 <smp_pairing_complete+0x28>
   190f6:	e7f7      	b.n	190e8 <smp_pairing_complete+0x30>
   190f8:	2b00      	cmp	r3, #0
   190fa:	d1f1      	bne.n	190e0 <smp_pairing_complete+0x28>
	smp_reset(smp);
   190fc:	4630      	mov	r0, r6
   190fe:	f010 ffe5 	bl	2a0cc <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   19102:	7a6a      	ldrb	r2, [r5, #9]
   19104:	7aab      	ldrb	r3, [r5, #10]
   19106:	429a      	cmp	r2, r3
   19108:	d04d      	beq.n	191a6 <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   1910a:	4628      	mov	r0, r5
}
   1910c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   19110:	f7ff bf0c 	b.w	18f2c <bt_smp_start_security>
	switch (smp_err) {
   19114:	3901      	subs	r1, #1
   19116:	b2c9      	uxtb	r1, r1
   19118:	290e      	cmp	r1, #14
   1911a:	bf96      	itet	ls
   1911c:	4b23      	ldrls	r3, [pc, #140]	; (191ac <smp_pairing_complete+0xf4>)
	if (!status) {
   1911e:	2709      	movhi	r7, #9
   19120:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   19122:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   19126:	b143      	cbz	r3, 1913a <smp_pairing_complete+0x82>
   19128:	7b1b      	ldrb	r3, [r3, #12]
   1912a:	bb33      	cbnz	r3, 1917a <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   1912c:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   19130:	f000 fe10 	bl	19d54 <bt_keys_clear>
			conn->le.keys = NULL;
   19134:	2300      	movs	r3, #0
   19136:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1913a:	2102      	movs	r1, #2
   1913c:	4620      	mov	r0, r4
   1913e:	f010 feb5 	bl	29eac <atomic_test_bit>
   19142:	b948      	cbnz	r0, 19158 <smp_pairing_complete+0xa0>
	switch (err) {
   19144:	2f07      	cmp	r7, #7
   19146:	bf94      	ite	ls
   19148:	4b19      	ldrls	r3, [pc, #100]	; (191b0 <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1914a:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   1914c:	463a      	mov	r2, r7
   1914e:	4628      	mov	r0, r5
   19150:	bf98      	it	ls
   19152:	5dd9      	ldrbls	r1, [r3, r7]
   19154:	f7fc fa80 	bl	15658 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19158:	2103      	movs	r1, #3
   1915a:	4620      	mov	r0, r4
   1915c:	f010 fea6 	bl	29eac <atomic_test_bit>
   19160:	2800      	cmp	r0, #0
   19162:	d0cb      	beq.n	190fc <smp_pairing_complete+0x44>
	return list->head;
   19164:	4b10      	ldr	r3, [pc, #64]	; (191a8 <smp_pairing_complete+0xf0>)
   19166:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   19168:	2b00      	cmp	r3, #0
   1916a:	d0c7      	beq.n	190fc <smp_pairing_complete+0x44>
	return node->next;
   1916c:	681c      	ldr	r4, [r3, #0]
   1916e:	b104      	cbz	r4, 19172 <smp_pairing_complete+0xba>
   19170:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   19172:	f853 3c08 	ldr.w	r3, [r3, #-8]
   19176:	b94b      	cbnz	r3, 1918c <smp_pairing_complete+0xd4>
   19178:	e00b      	b.n	19192 <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1917a:	2102      	movs	r1, #2
   1917c:	4620      	mov	r0, r4
   1917e:	f010 fe95 	bl	29eac <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   19182:	2800      	cmp	r0, #0
   19184:	d1d2      	bne.n	1912c <smp_pairing_complete+0x74>
   19186:	e7d8      	b.n	1913a <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   19188:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1918a:	b123      	cbz	r3, 19196 <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   1918c:	4639      	mov	r1, r7
   1918e:	4628      	mov	r0, r5
   19190:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   19192:	2c00      	cmp	r4, #0
   19194:	d0b2      	beq.n	190fc <smp_pairing_complete+0x44>
   19196:	4623      	mov	r3, r4
   19198:	68e4      	ldr	r4, [r4, #12]
   1919a:	685b      	ldr	r3, [r3, #4]
   1919c:	2c00      	cmp	r4, #0
   1919e:	d1f3      	bne.n	19188 <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   191a0:	2b00      	cmp	r3, #0
   191a2:	d1f3      	bne.n	1918c <smp_pairing_complete+0xd4>
   191a4:	e7aa      	b.n	190fc <smp_pairing_complete+0x44>
}
   191a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191a8:	2002f2a0 	.word	0x2002f2a0
   191ac:	00032225 	.word	0x00032225
   191b0:	00032214 	.word	0x00032214

000191b4 <smp_error>:
{
   191b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   191b6:	1d03      	adds	r3, r0, #4
{
   191b8:	4606      	mov	r6, r0
   191ba:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   191bc:	4618      	mov	r0, r3
   191be:	2102      	movs	r1, #2
{
   191c0:	b085      	sub	sp, #20
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   191c2:	f010 fe73 	bl	29eac <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   191c6:	4604      	mov	r4, r0
   191c8:	b120      	cbz	r0, 191d4 <smp_error+0x20>
   191ca:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   191ce:	fab4 f484 	clz	r4, r4
   191d2:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   191d4:	2103      	movs	r1, #3
   191d6:	4618      	mov	r0, r3
   191d8:	f010 fe68 	bl	29eac <atomic_test_bit>
   191dc:	b1b0      	cbz	r0, 1920c <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   191de:	4639      	mov	r1, r7
   191e0:	4630      	mov	r0, r6
   191e2:	f7ff ff69 	bl	190b8 <smp_pairing_complete>
	if (remote_already_completed) {
   191e6:	b1f4      	cbz	r4, 19226 <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   191e8:	4b1d      	ldr	r3, [pc, #116]	; (19260 <smp_error+0xac>)
   191ea:	491e      	ldr	r1, [pc, #120]	; (19264 <smp_error+0xb0>)
   191ec:	9302      	str	r3, [sp, #8]
   191ee:	2300      	movs	r3, #0
   191f0:	2202      	movs	r2, #2
   191f2:	4618      	mov	r0, r3
   191f4:	e9cd 3300 	strd	r3, r3, [sp]
   191f8:	f010 feb0 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   191fc:	2105      	movs	r1, #5
   191fe:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19202:	f00f feb0 	bl	28f66 <bt_conn_disconnect>
		return 0;
   19206:	2000      	movs	r0, #0
}
   19208:	b005      	add	sp, #20
   1920a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1920c:	2101      	movs	r1, #1
   1920e:	4618      	mov	r0, r3
   19210:	f010 fe4c 	bl	29eac <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   19214:	2800      	cmp	r0, #0
   19216:	d1e2      	bne.n	191de <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19218:	210f      	movs	r1, #15
   1921a:	4618      	mov	r0, r3
   1921c:	f010 fe46 	bl	29eac <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19220:	2800      	cmp	r0, #0
   19222:	d1dc      	bne.n	191de <smp_error+0x2a>
   19224:	e7df      	b.n	191e6 <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   19226:	2105      	movs	r1, #5
   19228:	4630      	mov	r0, r6
   1922a:	f010 feb6 	bl	29f9a <smp_create_pdu.constprop.0>
	if (!buf) {
   1922e:	4605      	mov	r5, r0
   19230:	b190      	cbz	r0, 19258 <smp_error+0xa4>
   19232:	2101      	movs	r1, #1
   19234:	300c      	adds	r0, #12
   19236:	f001 f9db 	bl	1a5f0 <net_buf_simple_add>
	rsp->reason = reason;
   1923a:	7007      	strb	r7, [r0, #0]
   1923c:	9400      	str	r4, [sp, #0]
   1923e:	4623      	mov	r3, r4
   19240:	462a      	mov	r2, r5
   19242:	2106      	movs	r1, #6
   19244:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19248:	f00f ff83 	bl	29152 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1924c:	2800      	cmp	r0, #0
   1924e:	d0da      	beq.n	19206 <smp_error+0x52>
		net_buf_unref(buf);
   19250:	4628      	mov	r0, r5
   19252:	f001 f8ab 	bl	1a3ac <net_buf_unref>
   19256:	e7d6      	b.n	19206 <smp_error+0x52>
		return -ENOBUFS;
   19258:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1925c:	e7d4      	b.n	19208 <smp_error+0x54>
   1925e:	bf00      	nop
   19260:	00031f84 	.word	0x00031f84
   19264:	0002d684 	.word	0x0002d684

00019268 <bt_smp_recv>:
{
   19268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1926c:	8a0b      	ldrh	r3, [r1, #16]
{
   1926e:	4604      	mov	r4, r0
   19270:	460e      	mov	r6, r1
   19272:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   19274:	b963      	cbnz	r3, 19290 <bt_smp_recv+0x28>
		LOG_ERR("Too small SMP PDU received");
   19276:	4a3c      	ldr	r2, [pc, #240]	; (19368 <bt_smp_recv+0x100>)
   19278:	4618      	mov	r0, r3
   1927a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1927e:	493b      	ldr	r1, [pc, #236]	; (1936c <bt_smp_recv+0x104>)
   19280:	2201      	movs	r2, #1
   19282:	9300      	str	r3, [sp, #0]
   19284:	f010 fe6a 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
}
   19288:	2000      	movs	r0, #0
   1928a:	b006      	add	sp, #24
   1928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19290:	2101      	movs	r1, #1
   19292:	f106 000c 	add.w	r0, r6, #12
   19296:	f001 f98d 	bl	1a5b4 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1929a:	2104      	movs	r1, #4
   1929c:	4607      	mov	r7, r0
   1929e:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
   192a2:	f010 fe03 	bl	29eac <atomic_test_bit>
   192a6:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   192aa:	7839      	ldrb	r1, [r7, #0]
   192ac:	4604      	mov	r4, r0
   192ae:	b158      	cbz	r0, 192c8 <bt_smp_recv+0x60>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   192b0:	4b2f      	ldr	r3, [pc, #188]	; (19370 <bt_smp_recv+0x108>)
   192b2:	2202      	movs	r2, #2
   192b4:	9302      	str	r3, [sp, #8]
   192b6:	2300      	movs	r3, #0
   192b8:	4618      	mov	r0, r3
   192ba:	e9cd 3300 	strd	r3, r3, [sp]
   192be:	9103      	str	r1, [sp, #12]
   192c0:	492a      	ldr	r1, [pc, #168]	; (1936c <bt_smp_recv+0x104>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   192c2:	f010 fe4b 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return 0;
   192c6:	e7df      	b.n	19288 <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   192c8:	290e      	cmp	r1, #14
   192ca:	d908      	bls.n	192de <bt_smp_recv+0x76>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   192cc:	4b29      	ldr	r3, [pc, #164]	; (19374 <bt_smp_recv+0x10c>)
   192ce:	9103      	str	r1, [sp, #12]
   192d0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   192d4:	2202      	movs	r2, #2
   192d6:	4603      	mov	r3, r0
   192d8:	4924      	ldr	r1, [pc, #144]	; (1936c <bt_smp_recv+0x104>)
   192da:	9000      	str	r0, [sp, #0]
   192dc:	e7f1      	b.n	192c2 <bt_smp_recv+0x5a>
	if (!handlers[hdr->code].func) {
   192de:	f8df 8098 	ldr.w	r8, [pc, #152]	; 19378 <bt_smp_recv+0x110>
   192e2:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   192e6:	b96b      	cbnz	r3, 19304 <bt_smp_recv+0x9c>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   192e8:	4a24      	ldr	r2, [pc, #144]	; (1937c <bt_smp_recv+0x114>)
   192ea:	9103      	str	r1, [sp, #12]
   192ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
   192f0:	491e      	ldr	r1, [pc, #120]	; (1936c <bt_smp_recv+0x104>)
   192f2:	2202      	movs	r2, #2
   192f4:	9300      	str	r3, [sp, #0]
   192f6:	f010 fe31 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   192fa:	2107      	movs	r1, #7
		smp_error(smp, err);
   192fc:	4628      	mov	r0, r5
   192fe:	f7ff ff59 	bl	191b4 <smp_error>
   19302:	e7c1      	b.n	19288 <bt_smp_recv+0x20>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   19304:	4628      	mov	r0, r5
   19306:	f010 fecf 	bl	2a0a8 <atomic_test_and_clear_bit>
   1930a:	783a      	ldrb	r2, [r7, #0]
   1930c:	4603      	mov	r3, r0
   1930e:	b968      	cbnz	r0, 1932c <bt_smp_recv+0xc4>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   19310:	9203      	str	r2, [sp, #12]
   19312:	4a1b      	ldr	r2, [pc, #108]	; (19380 <bt_smp_recv+0x118>)
   19314:	4915      	ldr	r1, [pc, #84]	; (1936c <bt_smp_recv+0x104>)
   19316:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1931a:	9000      	str	r0, [sp, #0]
   1931c:	2202      	movs	r2, #2
   1931e:	f010 fe1d 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   19322:	783b      	ldrb	r3, [r7, #0]
   19324:	2b05      	cmp	r3, #5
   19326:	d0af      	beq.n	19288 <bt_smp_recv+0x20>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   19328:	2108      	movs	r1, #8
   1932a:	e7e7      	b.n	192fc <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   1932c:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   19330:	8a33      	ldrh	r3, [r6, #16]
   19332:	7909      	ldrb	r1, [r1, #4]
   19334:	4299      	cmp	r1, r3
   19336:	d00d      	beq.n	19354 <bt_smp_recv+0xec>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19338:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1933c:	4b11      	ldr	r3, [pc, #68]	; (19384 <bt_smp_recv+0x11c>)
   1933e:	490b      	ldr	r1, [pc, #44]	; (1936c <bt_smp_recv+0x104>)
   19340:	e9cd 4301 	strd	r4, r3, [sp, #4]
   19344:	2201      	movs	r2, #1
   19346:	4623      	mov	r3, r4
   19348:	4620      	mov	r0, r4
   1934a:	9400      	str	r4, [sp, #0]
   1934c:	f010 fe06 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   19350:	210a      	movs	r1, #10
   19352:	e7d3      	b.n	192fc <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   19354:	4631      	mov	r1, r6
   19356:	4628      	mov	r0, r5
   19358:	f858 3032 	ldr.w	r3, [r8, r2, lsl #3]
   1935c:	4798      	blx	r3
	if (err) {
   1935e:	4601      	mov	r1, r0
   19360:	2800      	cmp	r0, #0
   19362:	d091      	beq.n	19288 <bt_smp_recv+0x20>
   19364:	e7ca      	b.n	192fc <bt_smp_recv+0x94>
   19366:	bf00      	nop
   19368:	00031fdc 	.word	0x00031fdc
   1936c:	0002d684 	.word	0x0002d684
   19370:	00031ff7 	.word	0x00031ff7
   19374:	00032028 	.word	0x00032028
   19378:	0002e1ec 	.word	0x0002e1ec
   1937c:	0003204a 	.word	0x0003204a
   19380:	00032064 	.word	0x00032064
   19384:	00031af5 	.word	0x00031af5

00019388 <bt_smp_pkey_ready>:
{
   19388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sc_public_key = pkey;
   1938a:	4a10      	ldr	r2, [pc, #64]	; (193cc <bt_smp_pkey_ready+0x44>)
{
   1938c:	4603      	mov	r3, r0
	sc_public_key = pkey;
   1938e:	6010      	str	r0, [r2, #0]
	if (!pkey) {
   19390:	b948      	cbnz	r0, 193a6 <bt_smp_pkey_ready+0x1e>
		LOG_WRN("Public key not available");
   19392:	4a0f      	ldr	r2, [pc, #60]	; (193d0 <bt_smp_pkey_ready+0x48>)
   19394:	490f      	ldr	r1, [pc, #60]	; (193d4 <bt_smp_pkey_ready+0x4c>)
   19396:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1939a:	9000      	str	r0, [sp, #0]
   1939c:	2202      	movs	r2, #2
   1939e:	f010 fddd 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
}
   193a2:	b004      	add	sp, #16
   193a4:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   193a6:	480c      	ldr	r0, [pc, #48]	; (193d8 <bt_smp_pkey_ready+0x50>)
   193a8:	f007 fd5e 	bl	20e68 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   193ac:	4b0b      	ldr	r3, [pc, #44]	; (193dc <bt_smp_pkey_ready+0x54>)
		err = smp_public_key_periph(smp);
   193ae:	1f1c      	subs	r4, r3, #4
   193b0:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   193b4:	065b      	lsls	r3, r3, #25
   193b6:	d5f4      	bpl.n	193a2 <bt_smp_pkey_ready+0x1a>
		err = smp_public_key_periph(smp);
   193b8:	4620      	mov	r0, r4
   193ba:	f7ff f897 	bl	184ec <smp_public_key_periph>
		if (err) {
   193be:	4601      	mov	r1, r0
   193c0:	2800      	cmp	r0, #0
   193c2:	d0ee      	beq.n	193a2 <bt_smp_pkey_ready+0x1a>
			smp_error(smp, err);
   193c4:	4620      	mov	r0, r4
   193c6:	f7ff fef5 	bl	191b4 <smp_error>
   193ca:	e7ea      	b.n	193a2 <bt_smp_pkey_ready+0x1a>
   193cc:	2002f3d0 	.word	0x2002f3d0
   193d0:	0003207f 	.word	0x0003207f
   193d4:	0002d684 	.word	0x0002d684
   193d8:	20008bd8 	.word	0x20008bd8
   193dc:	20009ab4 	.word	0x20009ab4

000193e0 <smp_ident_addr_info>:
{
   193e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   193e4:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   193e8:	68cf      	ldr	r7, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   193ea:	f023 0302 	bic.w	r3, r3, #2
   193ee:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   193f2:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   193f6:	783b      	ldrb	r3, [r7, #0]
{
   193f8:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   193fa:	f106 0890 	add.w	r8, r6, #144	; 0x90
   193fe:	b32b      	cbz	r3, 1944c <smp_ident_addr_info+0x6c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   19400:	79bb      	ldrb	r3, [r7, #6]
   19402:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19406:	2bc0      	cmp	r3, #192	; 0xc0
   19408:	d020      	beq.n	1944c <smp_ident_addr_info+0x6c>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1940a:	4638      	mov	r0, r7
   1940c:	f7f8 febc 	bl	12188 <bt_addr_le_str>
   19410:	2400      	movs	r4, #0
   19412:	4b5d      	ldr	r3, [pc, #372]	; (19588 <smp_ident_addr_info+0x1a8>)
   19414:	2201      	movs	r2, #1
   19416:	495d      	ldr	r1, [pc, #372]	; (1958c <smp_ident_addr_info+0x1ac>)
   19418:	9003      	str	r0, [sp, #12]
   1941a:	9302      	str	r3, [sp, #8]
   1941c:	4620      	mov	r0, r4
   1941e:	4623      	mov	r3, r4
   19420:	e9cd 4400 	strd	r4, r4, [sp]
   19424:	f010 fd9a 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19428:	4640      	mov	r0, r8
   1942a:	f7f8 fead 	bl	12188 <bt_addr_le_str>
   1942e:	4b58      	ldr	r3, [pc, #352]	; (19590 <smp_ident_addr_info+0x1b0>)
   19430:	9003      	str	r0, [sp, #12]
   19432:	e9cd 4301 	strd	r4, r3, [sp, #4]
   19436:	4620      	mov	r0, r4
   19438:	4623      	mov	r3, r4
   1943a:	2201      	movs	r2, #1
   1943c:	4953      	ldr	r1, [pc, #332]	; (1958c <smp_ident_addr_info+0x1ac>)
   1943e:	9400      	str	r4, [sp, #0]
   19440:	f010 fd8c 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   19444:	200a      	movs	r0, #10
}
   19446:	b004      	add	sp, #16
   19448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1944c:	2207      	movs	r2, #7
   1944e:	4639      	mov	r1, r7
   19450:	4640      	mov	r0, r8
   19452:	f012 fe2b 	bl	2c0ac <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   19456:	b168      	cbz	r0, 19474 <smp_ident_addr_info+0x94>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   19458:	4639      	mov	r1, r7
   1945a:	7a30      	ldrb	r0, [r6, #8]
   1945c:	f000 fc1a 	bl	19c94 <bt_keys_find_addr>
		if (keys) {
   19460:	4605      	mov	r5, r0
   19462:	b138      	cbz	r0, 19474 <smp_ident_addr_info+0x94>
			if (!update_keys_check(smp, keys)) {
   19464:	4601      	mov	r1, r0
   19466:	4620      	mov	r0, r4
   19468:	f010 fd26 	bl	29eb8 <update_keys_check>
   1946c:	b1e8      	cbz	r0, 194aa <smp_ident_addr_info+0xca>
			bt_keys_clear(keys);
   1946e:	4628      	mov	r0, r5
   19470:	f000 fc70 	bl	19d54 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19474:	210d      	movs	r1, #13
   19476:	1d20      	adds	r0, r4, #4
   19478:	f010 fd18 	bl	29eac <atomic_test_bit>
   1947c:	2800      	cmp	r0, #0
   1947e:	d071      	beq.n	19564 <smp_ident_addr_info+0x184>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   19480:	4642      	mov	r2, r8
   19482:	2002      	movs	r0, #2
   19484:	7a31      	ldrb	r1, [r6, #8]
   19486:	f000 fc41 	bl	19d0c <bt_keys_get_type>
		if (!keys) {
   1948a:	4605      	mov	r5, r0
   1948c:	b978      	cbnz	r0, 194ae <smp_ident_addr_info+0xce>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1948e:	4640      	mov	r0, r8
   19490:	f7f8 fe7a 	bl	12188 <bt_addr_le_str>
   19494:	4b3f      	ldr	r3, [pc, #252]	; (19594 <smp_ident_addr_info+0x1b4>)
   19496:	9003      	str	r0, [sp, #12]
   19498:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1949c:	2201      	movs	r2, #1
   1949e:	462b      	mov	r3, r5
   194a0:	4628      	mov	r0, r5
   194a2:	493a      	ldr	r1, [pc, #232]	; (1958c <smp_ident_addr_info+0x1ac>)
   194a4:	9500      	str	r5, [sp, #0]
   194a6:	f010 fd59 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   194aa:	2008      	movs	r0, #8
   194ac:	e7cb      	b.n	19446 <smp_ident_addr_info+0x66>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   194ae:	78f3      	ldrb	r3, [r6, #3]
   194b0:	bba3      	cbnz	r3, 1951c <smp_ident_addr_info+0x13c>
			dst = &conn->le.resp_addr;
   194b2:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   194b6:	781a      	ldrb	r2, [r3, #0]
   194b8:	2a01      	cmp	r2, #1
   194ba:	d11e      	bne.n	194fa <smp_ident_addr_info+0x11a>
		if (bt_addr_le_is_rpa(dst)) {
   194bc:	799a      	ldrb	r2, [r3, #6]
   194be:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   194c2:	2a40      	cmp	r2, #64	; 0x40
   194c4:	d119      	bne.n	194fa <smp_ident_addr_info+0x11a>
   194c6:	f8d3 2001 	ldr.w	r2, [r3, #1]
   194ca:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   194ce:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   194d2:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   194d4:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   194d8:	b17b      	cbz	r3, 194fa <smp_ident_addr_info+0x11a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   194da:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   194de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   194e2:	2bc0      	cmp	r3, #192	; 0xc0
   194e4:	d009      	beq.n	194fa <smp_ident_addr_info+0x11a>
				bt_addr_le_copy(&keys->addr, &req->addr);
   194e6:	4639      	mov	r1, r7
   194e8:	1c68      	adds	r0, r5, #1
   194ea:	f010 fd11 	bl	29f10 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   194ee:	4640      	mov	r0, r8
   194f0:	f010 fd0e 	bl	29f10 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   194f4:	4630      	mov	r0, r6
   194f6:	f7fc f869 	bl	155cc <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   194fa:	f894 60e9 	ldrb.w	r6, [r4, #233]	; 0xe9
   194fe:	f016 0602 	ands.w	r6, r6, #2
   19502:	d00e      	beq.n	19522 <smp_ident_addr_info+0x142>
   19504:	4924      	ldr	r1, [pc, #144]	; (19598 <smp_ident_addr_info+0x1b8>)
   19506:	f640 6363 	movw	r3, #3683	; 0xe63
   1950a:	4a24      	ldr	r2, [pc, #144]	; (1959c <smp_ident_addr_info+0x1bc>)
   1950c:	4824      	ldr	r0, [pc, #144]	; (195a0 <smp_ident_addr_info+0x1c0>)
   1950e:	f00e f870 	bl	275f2 <assert_print>
   19512:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19516:	4821      	ldr	r0, [pc, #132]	; (1959c <smp_ident_addr_info+0x1bc>)
   19518:	f00e f864 	bl	275e4 <assert_post_action>
			dst = &conn->le.init_addr;
   1951c:	f106 0397 	add.w	r3, r6, #151	; 0x97
   19520:	e7c9      	b.n	194b6 <smp_ident_addr_info+0xd6>
	conflict = bt_id_find_conflict(new_bond);
   19522:	4628      	mov	r0, r5
   19524:	f7fa fafe 	bl	13b24 <bt_id_find_conflict>
	if (conflict) {
   19528:	b158      	cbz	r0, 19542 <smp_ident_addr_info+0x162>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1952a:	4b1e      	ldr	r3, [pc, #120]	; (195a4 <smp_ident_addr_info+0x1c4>)
   1952c:	4630      	mov	r0, r6
   1952e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   19532:	2202      	movs	r2, #2
   19534:	4633      	mov	r3, r6
   19536:	4915      	ldr	r1, [pc, #84]	; (1958c <smp_ident_addr_info+0x1ac>)
   19538:	9600      	str	r6, [sp, #0]
   1953a:	f010 fd0f 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1953e:	2003      	movs	r0, #3
   19540:	e781      	b.n	19446 <smp_ident_addr_info+0x66>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19542:	4628      	mov	r0, r5
   19544:	f7fa faee 	bl	13b24 <bt_id_find_conflict>
   19548:	b148      	cbz	r0, 1955e <smp_ident_addr_info+0x17e>
   1954a:	4917      	ldr	r1, [pc, #92]	; (195a8 <smp_ident_addr_info+0x1c8>)
   1954c:	f640 637f 	movw	r3, #3711	; 0xe7f
   19550:	4a12      	ldr	r2, [pc, #72]	; (1959c <smp_ident_addr_info+0x1bc>)
   19552:	4813      	ldr	r0, [pc, #76]	; (195a0 <smp_ident_addr_info+0x1c0>)
   19554:	f00e f84d 	bl	275f2 <assert_print>
   19558:	f640 617f 	movw	r1, #3711	; 0xe7f
   1955c:	e7db      	b.n	19516 <smp_ident_addr_info+0x136>
	bt_id_add(new_bond);
   1955e:	4628      	mov	r0, r5
   19560:	f7fa faf0 	bl	13b44 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19564:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19568:	075b      	lsls	r3, r3, #29
   1956a:	d503      	bpl.n	19574 <smp_ident_addr_info+0x194>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1956c:	210a      	movs	r1, #10
   1956e:	4620      	mov	r0, r4
   19570:	f010 fd03 	bl	29f7a <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19574:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19578:	b109      	cbz	r1, 1957e <smp_ident_addr_info+0x19e>
	return 0;
   1957a:	2000      	movs	r0, #0
   1957c:	e763      	b.n	19446 <smp_ident_addr_info+0x66>
		smp_pairing_complete(smp, 0);
   1957e:	4620      	mov	r0, r4
   19580:	f7ff fd9a 	bl	190b8 <smp_pairing_complete>
   19584:	e7f9      	b.n	1957a <smp_ident_addr_info+0x19a>
   19586:	bf00      	nop
   19588:	00032098 	.word	0x00032098
   1958c:	0002d684 	.word	0x0002d684
   19590:	0003217f 	.word	0x0003217f
   19594:	00031e5b 	.word	0x00031e5b
   19598:	000320db 	.word	0x000320db
   1959c:	000320ac 	.word	0x000320ac
   195a0:	0002e715 	.word	0x0002e715
   195a4:	000320f6 	.word	0x000320f6
   195a8:	00032131 	.word	0x00032131

000195ac <smp_central_ident>:
{
   195ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   195ae:	460b      	mov	r3, r1
   195b0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   195b2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   195b6:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   195b8:	210d      	movs	r1, #13
   195ba:	3004      	adds	r0, #4
   195bc:	f010 fc76 	bl	29eac <atomic_test_bit>
   195c0:	b318      	cbz	r0, 1960a <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   195c2:	f105 0790 	add.w	r7, r5, #144	; 0x90
   195c6:	7a29      	ldrb	r1, [r5, #8]
   195c8:	463a      	mov	r2, r7
   195ca:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   195cc:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   195ce:	f000 fb9d 	bl	19d0c <bt_keys_get_type>
		if (!keys) {
   195d2:	4605      	mov	r5, r0
   195d4:	b980      	cbnz	r0, 195f8 <smp_central_ident+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   195d6:	4638      	mov	r0, r7
   195d8:	f7f8 fdd6 	bl	12188 <bt_addr_le_str>
   195dc:	4b17      	ldr	r3, [pc, #92]	; (1963c <smp_central_ident+0x90>)
   195de:	9003      	str	r0, [sp, #12]
   195e0:	e9cd 5301 	strd	r5, r3, [sp, #4]
   195e4:	4628      	mov	r0, r5
   195e6:	462b      	mov	r3, r5
   195e8:	2201      	movs	r2, #1
   195ea:	4915      	ldr	r1, [pc, #84]	; (19640 <smp_central_ident+0x94>)
   195ec:	9500      	str	r5, [sp, #0]
   195ee:	f010 fcb5 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   195f2:	2008      	movs	r0, #8
}
   195f4:	b005      	add	sp, #20
   195f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   195f8:	4632      	mov	r2, r6
   195fa:	f832 3b02 	ldrh.w	r3, [r2], #2
   195fe:	8303      	strh	r3, [r0, #24]
   19600:	f8d6 3002 	ldr.w	r3, [r6, #2]
   19604:	6103      	str	r3, [r0, #16]
   19606:	6853      	ldr	r3, [r2, #4]
   19608:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1960a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1960e:	f023 0201 	bic.w	r2, r3, #1
   19612:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19616:	079a      	lsls	r2, r3, #30
   19618:	d508      	bpl.n	1962c <smp_central_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1961a:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1961c:	4620      	mov	r0, r4
   1961e:	f010 fcac 	bl	29f7a <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19622:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19626:	b129      	cbz	r1, 19634 <smp_central_ident+0x88>
	return 0;
   19628:	2000      	movs	r0, #0
   1962a:	e7e3      	b.n	195f4 <smp_central_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1962c:	075b      	lsls	r3, r3, #29
   1962e:	d5f8      	bpl.n	19622 <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19630:	210a      	movs	r1, #10
   19632:	e7f3      	b.n	1961c <smp_central_ident+0x70>
		smp_pairing_complete(smp, 0);
   19634:	4620      	mov	r0, r4
   19636:	f7ff fd3f 	bl	190b8 <smp_pairing_complete>
   1963a:	e7f5      	b.n	19628 <smp_central_ident+0x7c>
   1963c:	00031e5b 	.word	0x00031e5b
   19640:	0002d684 	.word	0x0002d684

00019644 <smp_pairing_failed>:
{
   19644:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19648:	460e      	mov	r6, r1
   1964a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1964c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19650:	f7fe fdb0 	bl	181b4 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   19654:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19656:	4914      	ldr	r1, [pc, #80]	; (196a8 <smp_pairing_failed+0x64>)
   19658:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1965a:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1965c:	9303      	str	r3, [sp, #12]
   1965e:	4b13      	ldr	r3, [pc, #76]	; (196ac <smp_pairing_failed+0x68>)
   19660:	2201      	movs	r2, #1
   19662:	9302      	str	r3, [sp, #8]
   19664:	2300      	movs	r3, #0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19666:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19668:	4618      	mov	r0, r3
   1966a:	e9cd 3300 	strd	r3, r3, [sp]
   1966e:	f010 fc75 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19672:	210a      	movs	r1, #10
   19674:	4638      	mov	r0, r7
   19676:	f010 fd17 	bl	2a0a8 <atomic_test_and_clear_bit>
   1967a:	b140      	cbz	r0, 1968e <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1967c:	b975      	cbnz	r5, 1969c <smp_pairing_failed+0x58>
	smp_pairing_complete(smp, req->reason);
   1967e:	4620      	mov	r0, r4
   19680:	7831      	ldrb	r1, [r6, #0]
   19682:	f7ff fd19 	bl	190b8 <smp_pairing_complete>
}
   19686:	2000      	movs	r0, #0
   19688:	b004      	add	sp, #16
   1968a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1968e:	210b      	movs	r1, #11
   19690:	4638      	mov	r0, r7
   19692:	f010 fd09 	bl	2a0a8 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19696:	2800      	cmp	r0, #0
   19698:	d1f0      	bne.n	1967c <smp_pairing_failed+0x38>
   1969a:	e7f0      	b.n	1967e <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1969c:	692b      	ldr	r3, [r5, #16]
   1969e:	2b00      	cmp	r3, #0
   196a0:	d0ed      	beq.n	1967e <smp_pairing_failed+0x3a>
			smp_auth_cb->cancel(conn);
   196a2:	4640      	mov	r0, r8
   196a4:	4798      	blx	r3
   196a6:	e7ea      	b.n	1967e <smp_pairing_failed+0x3a>
   196a8:	0002d684 	.word	0x0002d684
   196ac:	00032150 	.word	0x00032150

000196b0 <bt_smp_encrypt_change>:
{
   196b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   196b4:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   196b6:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   196ba:	4604      	mov	r4, r0
   196bc:	460f      	mov	r7, r1
   196be:	b08c      	sub	sp, #48	; 0x30
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   196c0:	2101      	movs	r1, #1
   196c2:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   196c4:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   196c8:	f010 fcee 	bl	2a0a8 <atomic_test_and_clear_bit>
   196cc:	2800      	cmp	r0, #0
   196ce:	d068      	beq.n	197a2 <bt_smp_encrypt_change+0xf2>
	if (hci_status) {
   196d0:	b1e7      	cbz	r7, 1970c <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   196d2:	2103      	movs	r1, #3
   196d4:	4630      	mov	r0, r6
   196d6:	f010 fbe9 	bl	29eac <atomic_test_bit>
   196da:	2800      	cmp	r0, #0
   196dc:	d061      	beq.n	197a2 <bt_smp_encrypt_change+0xf2>
			uint8_t smp_err = smp_err_get(
   196de:	4638      	mov	r0, r7
   196e0:	f7f9 fcee 	bl	130c0 <bt_security_err_get>
	switch (auth_err) {
   196e4:	3801      	subs	r0, #1
   196e6:	b2c0      	uxtb	r0, r0
   196e8:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   196ea:	bf8c      	ite	hi
   196ec:	2400      	movhi	r4, #0
   196ee:	4b75      	ldrls	r3, [pc, #468]	; (198c4 <bt_smp_encrypt_change+0x214>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   196f0:	f04f 0102 	mov.w	r1, #2
   196f4:	bf98      	it	ls
   196f6:	5c1c      	ldrbls	r4, [r3, r0]
   196f8:	4630      	mov	r0, r6
   196fa:	f010 fc3e 	bl	29f7a <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   196fe:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   19700:	4628      	mov	r0, r5
}
   19702:	b00c      	add	sp, #48	; 0x30
   19704:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   19708:	f7ff bcd6 	b.w	190b8 <smp_pairing_complete>
	if (!conn->encrypt) {
   1970c:	f898 300b 	ldrb.w	r3, [r8, #11]
   19710:	2b00      	cmp	r3, #0
   19712:	d046      	beq.n	197a2 <bt_smp_encrypt_change+0xf2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19714:	2103      	movs	r1, #3
   19716:	4630      	mov	r0, r6
   19718:	f010 fbc8 	bl	29eac <atomic_test_bit>
   1971c:	b928      	cbnz	r0, 1972a <bt_smp_encrypt_change+0x7a>
		smp_reset(smp);
   1971e:	4628      	mov	r0, r5
}
   19720:	b00c      	add	sp, #48	; 0x30
   19722:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   19726:	f010 bcd1 	b.w	2a0cc <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1972a:	2105      	movs	r1, #5
   1972c:	4630      	mov	r0, r6
   1972e:	f010 fbbd 	bl	29eac <atomic_test_bit>
   19732:	b1b8      	cbz	r0, 19764 <bt_smp_encrypt_change+0xb4>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   19734:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19738:	071b      	lsls	r3, r3, #28
   1973a:	d507      	bpl.n	1974c <bt_smp_encrypt_change+0x9c>
   1973c:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19740:	071f      	lsls	r7, r3, #28
   19742:	d503      	bpl.n	1974c <bt_smp_encrypt_change+0x9c>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   19744:	2111      	movs	r1, #17
   19746:	4630      	mov	r0, r6
   19748:	f010 fc17 	bl	29f7a <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1974c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19750:	f023 0308 	bic.w	r3, r3, #8
   19754:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   19758:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1975c:	f023 0308 	bic.w	r3, r3, #8
   19760:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   19764:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19768:	07d8      	lsls	r0, r3, #31
   1976a:	d51d      	bpl.n	197a8 <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1976c:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1976e:	4628      	mov	r0, r5
   19770:	f010 fc03 	bl	29f7a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19774:	2102      	movs	r1, #2
   19776:	4630      	mov	r0, r6
   19778:	f010 fbff 	bl	29f7a <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1977c:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1977e:	f8d3 70c0 	ldr.w	r7, [r3, #192]	; 0xc0
   19782:	b9cf      	cbnz	r7, 197b8 <bt_smp_encrypt_change+0x108>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   19784:	f103 0090 	add.w	r0, r3, #144	; 0x90
   19788:	f7f8 fcfe 	bl	12188 <bt_addr_le_str>
   1978c:	4b4e      	ldr	r3, [pc, #312]	; (198c8 <bt_smp_encrypt_change+0x218>)
   1978e:	9003      	str	r0, [sp, #12]
   19790:	e9cd 7301 	strd	r7, r3, [sp, #4]
   19794:	2201      	movs	r2, #1
   19796:	463b      	mov	r3, r7
   19798:	4638      	mov	r0, r7
   1979a:	494c      	ldr	r1, [pc, #304]	; (198cc <bt_smp_encrypt_change+0x21c>)
   1979c:	9700      	str	r7, [sp, #0]
   1979e:	f010 fbdd 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
}
   197a2:	b00c      	add	sp, #48	; 0x30
   197a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   197a8:	0799      	lsls	r1, r3, #30
   197aa:	d501      	bpl.n	197b0 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   197ac:	2108      	movs	r1, #8
   197ae:	e7de      	b.n	1976e <bt_smp_encrypt_change+0xbe>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   197b0:	075a      	lsls	r2, r3, #29
   197b2:	d5df      	bpl.n	19774 <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   197b4:	210a      	movs	r1, #10
   197b6:	e7da      	b.n	1976e <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   197b8:	2105      	movs	r1, #5
   197ba:	f010 fb77 	bl	29eac <atomic_test_bit>
   197be:	4607      	mov	r7, r0
   197c0:	b9b0      	cbnz	r0, 197f0 <bt_smp_encrypt_change+0x140>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   197c2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   197c6:	07db      	lsls	r3, r3, #31
   197c8:	d512      	bpl.n	197f0 <bt_smp_encrypt_change+0x140>
	struct bt_keys *keys = conn->le.keys;
   197ca:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   197cc:	211a      	movs	r1, #26
   197ce:	a805      	add	r0, sp, #20
	struct bt_keys *keys = conn->le.keys;
   197d0:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   197d4:	f7fb f866 	bl	148a4 <bt_rand>
   197d8:	4681      	mov	r9, r0
   197da:	b170      	cbz	r0, 197fa <bt_smp_encrypt_change+0x14a>
			LOG_ERR("Unable to get random bytes");
   197dc:	4b3c      	ldr	r3, [pc, #240]	; (198d0 <bt_smp_encrypt_change+0x220>)
   197de:	2201      	movs	r2, #1
   197e0:	e9cd 7301 	strd	r7, r3, [sp, #4]
   197e4:	4638      	mov	r0, r7
   197e6:	463b      	mov	r3, r7
   197e8:	4938      	ldr	r1, [pc, #224]	; (198cc <bt_smp_encrypt_change+0x21c>)
   197ea:	9700      	str	r7, [sp, #0]
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   197ec:	f010 fbb6 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   197f0:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   197f4:	2900      	cmp	r1, #0
   197f6:	d1d4      	bne.n	197a2 <bt_smp_encrypt_change+0xf2>
   197f8:	e782      	b.n	19700 <bt_smp_encrypt_change+0x50>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   197fa:	2106      	movs	r1, #6
   197fc:	4628      	mov	r0, r5
   197fe:	f010 fbcc 	bl	29f9a <smp_create_pdu.constprop.0>
		if (!buf) {
   19802:	4607      	mov	r7, r0
   19804:	b938      	cbnz	r0, 19816 <bt_smp_encrypt_change+0x166>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   19806:	4b33      	ldr	r3, [pc, #204]	; (198d4 <bt_smp_encrypt_change+0x224>)
   19808:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1980c:	2201      	movs	r2, #1
   1980e:	463b      	mov	r3, r7
   19810:	492e      	ldr	r1, [pc, #184]	; (198cc <bt_smp_encrypt_change+0x21c>)
   19812:	9700      	str	r7, [sp, #0]
   19814:	e7ea      	b.n	197ec <bt_smp_encrypt_change+0x13c>
	return net_buf_simple_add(&buf->b, len);
   19816:	2110      	movs	r1, #16
   19818:	300c      	adds	r0, #12
   1981a:	f000 fee9 	bl	1a5f0 <net_buf_simple_add>
   1981e:	f898 200c 	ldrb.w	r2, [r8, #12]
   19822:	a905      	add	r1, sp, #20
   19824:	4682      	mov	sl, r0
   19826:	f012 fc51 	bl	2c0cc <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1982a:	f898 000c 	ldrb.w	r0, [r8, #12]
   1982e:	280f      	cmp	r0, #15
   19830:	d805      	bhi.n	1983e <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   19832:	f1c0 0210 	rsb	r2, r0, #16
   19836:	4649      	mov	r1, r9
   19838:	4450      	add	r0, sl
   1983a:	f012 fc81 	bl	2c140 <memset>
		smp_send(smp, buf, NULL, NULL);
   1983e:	4639      	mov	r1, r7
   19840:	2200      	movs	r2, #0
   19842:	4628      	mov	r0, r5
   19844:	f010 fb6d 	bl	29f22 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   19848:	2107      	movs	r1, #7
   1984a:	4628      	mov	r0, r5
   1984c:	f010 fba5 	bl	29f9a <smp_create_pdu.constprop.0>
		if (!buf) {
   19850:	4607      	mov	r7, r0
   19852:	b908      	cbnz	r0, 19858 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   19854:	4b20      	ldr	r3, [pc, #128]	; (198d8 <bt_smp_encrypt_change+0x228>)
   19856:	e7d7      	b.n	19808 <bt_smp_encrypt_change+0x158>
   19858:	210a      	movs	r1, #10
   1985a:	300c      	adds	r0, #12
   1985c:	f000 fec8 	bl	1a5f0 <net_buf_simple_add>
   19860:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19862:	aa09      	add	r2, sp, #36	; 0x24
   19864:	ca03      	ldmia	r2!, {r0, r1}
   19866:	f8c3 0002 	str.w	r0, [r3, #2]
   1986a:	f8c3 1006 	str.w	r1, [r3, #6]
   1986e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		smp_send(smp, buf, smp_ident_sent, NULL);
   19872:	4639      	mov	r1, r7
   19874:	4628      	mov	r0, r5
   19876:	801a      	strh	r2, [r3, #0]
   19878:	4a18      	ldr	r2, [pc, #96]	; (198dc <bt_smp_encrypt_change+0x22c>)
   1987a:	f010 fb52 	bl	29f22 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1987e:	4630      	mov	r0, r6
   19880:	210d      	movs	r1, #13
   19882:	f010 fb13 	bl	29eac <atomic_test_bit>
   19886:	ae09      	add	r6, sp, #36	; 0x24
   19888:	2800      	cmp	r0, #0
   1988a:	d0b1      	beq.n	197f0 <bt_smp_encrypt_change+0x140>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1988c:	2101      	movs	r1, #1
   1988e:	4640      	mov	r0, r8
   19890:	f000 fa24 	bl	19cdc <bt_keys_add_type>
   19894:	f108 074a 	add.w	r7, r8, #74	; 0x4a
   19898:	ab05      	add	r3, sp, #20
   1989a:	461a      	mov	r2, r3
   1989c:	ca03      	ldmia	r2!, {r0, r1}
   1989e:	42b2      	cmp	r2, r6
   198a0:	6038      	str	r0, [r7, #0]
   198a2:	6079      	str	r1, [r7, #4]
   198a4:	4613      	mov	r3, r2
   198a6:	f107 0708 	add.w	r7, r7, #8
   198aa:	d1f6      	bne.n	1989a <bt_smp_encrypt_change+0x1ea>
   198ac:	4633      	mov	r3, r6
   198ae:	cb03      	ldmia	r3!, {r0, r1}
   198b0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   198b4:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   198b8:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   198bc:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   198c0:	e796      	b.n	197f0 <bt_smp_encrypt_change+0x140>
   198c2:	bf00      	nop
   198c4:	0003221c 	.word	0x0003221c
   198c8:	00032172 	.word	0x00032172
   198cc:	0002d684 	.word	0x0002d684
   198d0:	00032187 	.word	0x00032187
   198d4:	000321a2 	.word	0x000321a2
   198d8:	000321c9 	.word	0x000321c9
   198dc:	0001991d 	.word	0x0001991d

000198e0 <smp_timeout>:
{
   198e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("SMP Timeout");
   198e2:	4b0c      	ldr	r3, [pc, #48]	; (19914 <smp_timeout+0x34>)
{
   198e4:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   198e6:	9302      	str	r3, [sp, #8]
   198e8:	2300      	movs	r3, #0
   198ea:	2201      	movs	r2, #1
   198ec:	4618      	mov	r0, r3
   198ee:	e9cd 3300 	strd	r3, r3, [sp]
   198f2:	4909      	ldr	r1, [pc, #36]	; (19918 <smp_timeout+0x38>)
   198f4:	f010 fb32 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   198f8:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   198fc:	2108      	movs	r1, #8
   198fe:	f7ff fbdb 	bl	190b8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   19902:	2104      	movs	r1, #4
   19904:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   19908:	b004      	add	sp, #16
   1990a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1990e:	f010 bb34 	b.w	29f7a <atomic_set_bit>
   19912:	bf00      	nop
   19914:	000321f1 	.word	0x000321f1
   19918:	0002d684 	.word	0x0002d684

0001991c <smp_ident_sent>:
{
   1991c:	b508      	push	{r3, lr}
	if (!err) {
   1991e:	bb1a      	cbnz	r2, 19968 <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   19920:	7883      	ldrb	r3, [r0, #2]
   19922:	2b01      	cmp	r3, #1
   19924:	d120      	bne.n	19968 <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   19926:	2106      	movs	r1, #6
   19928:	f00f fc2c 	bl	29184 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1992c:	b970      	cbnz	r0, 1994c <smp_ident_sent+0x30>
   1992e:	490f      	ldr	r1, [pc, #60]	; (1996c <smp_ident_sent+0x50>)
   19930:	f240 2365 	movw	r3, #613	; 0x265
   19934:	4a0e      	ldr	r2, [pc, #56]	; (19970 <smp_ident_sent+0x54>)
   19936:	480f      	ldr	r0, [pc, #60]	; (19974 <smp_ident_sent+0x58>)
   19938:	f00d fe5b 	bl	275f2 <assert_print>
   1993c:	480e      	ldr	r0, [pc, #56]	; (19978 <smp_ident_sent+0x5c>)
   1993e:	f00d fe58 	bl	275f2 <assert_print>
   19942:	f240 2165 	movw	r1, #613	; 0x265
   19946:	480a      	ldr	r0, [pc, #40]	; (19970 <smp_ident_sent+0x54>)
   19948:	f00d fe4c 	bl	275e4 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1994c:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   19950:	f023 0301 	bic.w	r3, r3, #1
   19954:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   19958:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1995c:	b921      	cbnz	r1, 19968 <smp_ident_sent+0x4c>
}
   1995e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   19962:	38ec      	subs	r0, #236	; 0xec
   19964:	f7ff bba8 	b.w	190b8 <smp_pairing_complete>
}
   19968:	bd08      	pop	{r3, pc}
   1996a:	bf00      	nop
   1996c:	00031968 	.word	0x00031968
   19970:	000320ac 	.word	0x000320ac
   19974:	0002e715 	.word	0x0002e715
   19978:	000321fd 	.word	0x000321fd

0001997c <bt_smp_update_keys>:
{
   1997c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19980:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   19982:	f7fe fc95 	bl	182b0 <smp_chan_get>
	if (!smp) {
   19986:	4605      	mov	r5, r0
   19988:	2800      	cmp	r0, #0
   1998a:	d074      	beq.n	19a76 <bt_smp_update_keys+0xfa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1998c:	1d07      	adds	r7, r0, #4
   1998e:	2103      	movs	r1, #3
   19990:	4638      	mov	r0, r7
   19992:	f010 fa8b 	bl	29eac <atomic_test_bit>
   19996:	2800      	cmp	r0, #0
   19998:	d06d      	beq.n	19a76 <bt_smp_update_keys+0xfa>
	if (conn->le.keys) {
   1999a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1999e:	b108      	cbz	r0, 199a4 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   199a0:	f000 f9d8 	bl	19d54 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   199a4:	f104 0890 	add.w	r8, r4, #144	; 0x90
   199a8:	4641      	mov	r1, r8
   199aa:	7a20      	ldrb	r0, [r4, #8]
   199ac:	f000 f894 	bl	19ad8 <bt_keys_get_addr>
   199b0:	4606      	mov	r6, r0
   199b2:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   199b6:	b9a0      	cbnz	r0, 199e2 <bt_smp_update_keys+0x66>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   199b8:	4640      	mov	r0, r8
   199ba:	f7f8 fbe5 	bl	12188 <bt_addr_le_str>
   199be:	4b39      	ldr	r3, [pc, #228]	; (19aa4 <bt_smp_update_keys+0x128>)
   199c0:	9003      	str	r0, [sp, #12]
   199c2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   199c6:	4630      	mov	r0, r6
   199c8:	4633      	mov	r3, r6
   199ca:	2201      	movs	r2, #1
   199cc:	4936      	ldr	r1, [pc, #216]	; (19aa8 <bt_smp_update_keys+0x12c>)
   199ce:	9600      	str	r6, [sp, #0]
   199d0:	f010 fac4 	bl	29f5c <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   199d4:	2108      	movs	r1, #8
   199d6:	4628      	mov	r0, r5
}
   199d8:	b004      	add	sp, #16
   199da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   199de:	f7ff bbe9 	b.w	191b4 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   199e2:	210e      	movs	r1, #14
   199e4:	4638      	mov	r0, r7
   199e6:	f010 fa61 	bl	29eac <atomic_test_bit>
   199ea:	b128      	cbz	r0, 199f8 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   199ec:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   199f0:	7b53      	ldrb	r3, [r2, #13]
   199f2:	f043 0302 	orr.w	r3, r3, #2
   199f6:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   199f8:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   199fa:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   199fe:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   19a00:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   19a02:	d83b      	bhi.n	19a7c <bt_smp_update_keys+0x100>
   19a04:	2a00      	cmp	r2, #0
   19a06:	d040      	beq.n	19a8a <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   19a08:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   19a0c:	7b53      	ldrb	r3, [r2, #13]
   19a0e:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   19a12:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   19a14:	7d2b      	ldrb	r3, [r5, #20]
   19a16:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   19a18:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   19a1c:	428b      	cmp	r3, r1
   19a1e:	bf28      	it	cs
   19a20:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19a22:	4638      	mov	r0, r7
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   19a24:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19a26:	2105      	movs	r1, #5
   19a28:	f010 fa40 	bl	29eac <atomic_test_bit>
   19a2c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   19a30:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19a32:	b398      	cbz	r0, 19a9c <bt_smp_update_keys+0x120>
		conn->le.keys->flags |= BT_KEYS_SC;
   19a34:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19a38:	210d      	movs	r1, #13
   19a3a:	4638      	mov	r0, r7
		conn->le.keys->flags |= BT_KEYS_SC;
   19a3c:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19a3e:	f010 fa35 	bl	29eac <atomic_test_bit>
   19a42:	b1c0      	cbz	r0, 19a76 <bt_smp_update_keys+0xfa>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   19a44:	2120      	movs	r1, #32
   19a46:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   19a4a:	f000 f947 	bl	19cdc <bt_keys_add_type>
   19a4e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19a52:	f105 0247 	add.w	r2, r5, #71	; 0x47
   19a56:	331a      	adds	r3, #26
   19a58:	3557      	adds	r5, #87	; 0x57
   19a5a:	f852 1b04 	ldr.w	r1, [r2], #4
   19a5e:	42aa      	cmp	r2, r5
   19a60:	f843 1b04 	str.w	r1, [r3], #4
   19a64:	d1f9      	bne.n	19a5a <bt_smp_update_keys+0xde>
__ssp_bos_icheck3(memset, void *, int)
   19a66:	2300      	movs	r3, #0
   19a68:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   19a6c:	6113      	str	r3, [r2, #16]
   19a6e:	6153      	str	r3, [r2, #20]
   19a70:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   19a74:	8313      	strh	r3, [r2, #24]
}
   19a76:	b004      	add	sp, #16
   19a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   19a7c:	3a05      	subs	r2, #5
   19a7e:	2a01      	cmp	r2, #1
   19a80:	d803      	bhi.n	19a8a <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   19a82:	f043 0320 	orr.w	r3, r3, #32
   19a86:	734b      	strb	r3, [r1, #13]
   19a88:	e7be      	b.n	19a08 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   19a8a:	f023 0320 	bic.w	r3, r3, #32
   19a8e:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   19a90:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   19a94:	7b53      	ldrb	r3, [r2, #13]
   19a96:	f023 0301 	bic.w	r3, r3, #1
   19a9a:	e7ba      	b.n	19a12 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   19a9c:	f022 0210 	bic.w	r2, r2, #16
   19aa0:	735a      	strb	r2, [r3, #13]
   19aa2:	e7e8      	b.n	19a76 <bt_smp_update_keys+0xfa>
   19aa4:	00031e5b 	.word	0x00031e5b
   19aa8:	0002d684 	.word	0x0002d684

00019aac <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   19aac:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   19aae:	4b07      	ldr	r3, [pc, #28]	; (19acc <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   19ab0:	4807      	ldr	r0, [pc, #28]	; (19ad0 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   19ab2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   19ab6:	f003 0306 	and.w	r3, r3, #6
   19aba:	1f9a      	subs	r2, r3, #6
   19abc:	4253      	negs	r3, r2
   19abe:	4153      	adcs	r3, r2
   19ac0:	4a04      	ldr	r2, [pc, #16]	; (19ad4 <bt_smp_init+0x28>)
   19ac2:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   19ac4:	f7fa ff18 	bl	148f8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   19ac8:	2000      	movs	r0, #0
   19aca:	bd08      	pop	{r3, pc}
   19acc:	20008000 	.word	0x20008000
   19ad0:	2000859c 	.word	0x2000859c
   19ad4:	2003026f 	.word	0x2003026f

00019ad8 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   19ad8:	b570      	push	{r4, r5, r6, lr}
   19ada:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	__ASSERT_NO_MSG(addr != NULL);
   19adc:	460d      	mov	r5, r1
   19ade:	b959      	cbnz	r1, 19af8 <bt_keys_get_addr+0x20>
   19ae0:	4913      	ldr	r1, [pc, #76]	; (19b30 <bt_keys_get_addr+0x58>)
   19ae2:	4814      	ldr	r0, [pc, #80]	; (19b34 <bt_keys_get_addr+0x5c>)
   19ae4:	2359      	movs	r3, #89	; 0x59
   19ae6:	4a14      	ldr	r2, [pc, #80]	; (19b38 <bt_keys_get_addr+0x60>)
   19ae8:	f00d fd83 	bl	275f2 <assert_print>
   19aec:	2159      	movs	r1, #89	; 0x59
   19aee:	4812      	ldr	r0, [pc, #72]	; (19b38 <bt_keys_get_addr+0x60>)
   19af0:	f00d fd78 	bl	275e4 <assert_post_action>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   19af4:	2000      	movs	r0, #0
   19af6:	e019      	b.n	19b2c <bt_keys_get_addr+0x54>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   19af8:	4c10      	ldr	r4, [pc, #64]	; (19b3c <bt_keys_get_addr+0x64>)
   19afa:	f814 3b01 	ldrb.w	r3, [r4], #1
   19afe:	4283      	cmp	r3, r0
   19b00:	d104      	bne.n	19b0c <bt_keys_get_addr+0x34>
	return memcmp(a, b, sizeof(*a));
   19b02:	2207      	movs	r2, #7
   19b04:	4620      	mov	r0, r4
   19b06:	f012 fad1 	bl	2c0ac <memcmp>
   19b0a:	b170      	cbz	r0, 19b2a <bt_keys_get_addr+0x52>
   19b0c:	2207      	movs	r2, #7
   19b0e:	490c      	ldr	r1, [pc, #48]	; (19b40 <bt_keys_get_addr+0x68>)
   19b10:	480c      	ldr	r0, [pc, #48]	; (19b44 <bt_keys_get_addr+0x6c>)
   19b12:	f012 facb 	bl	2c0ac <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   19b16:	2800      	cmp	r0, #0
   19b18:	d1ec      	bne.n	19af4 <bt_keys_get_addr+0x1c>
		keys->id = id;
   19b1a:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   19b1e:	682b      	ldr	r3, [r5, #0]
   19b20:	6023      	str	r3, [r4, #0]
   19b22:	88ab      	ldrh	r3, [r5, #4]
   19b24:	80a3      	strh	r3, [r4, #4]
   19b26:	79ab      	ldrb	r3, [r5, #6]
   19b28:	71a3      	strb	r3, [r4, #6]
		keys = &key_pool[i];
   19b2a:	4804      	ldr	r0, [pc, #16]	; (19b3c <bt_keys_get_addr+0x64>)
}
   19b2c:	bd70      	pop	{r4, r5, r6, pc}
   19b2e:	bf00      	nop
   19b30:	0003229d 	.word	0x0003229d
   19b34:	0002e715 	.word	0x0002e715
   19b38:	0003226d 	.word	0x0003226d
   19b3c:	2002f3d4 	.word	0x2002f3d4
   19b40:	000306da 	.word	0x000306da
   19b44:	2002f3d5 	.word	0x2002f3d5

00019b48 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   19b48:	460b      	mov	r3, r1
   19b4a:	b510      	push	{r4, lr}
   19b4c:	4611      	mov	r1, r2
   19b4e:	4604      	mov	r4, r0
	int i;

	__ASSERT_NO_MSG(func != NULL);
   19b50:	b963      	cbnz	r3, 19b6c <bt_keys_foreach_type+0x24>
   19b52:	4909      	ldr	r1, [pc, #36]	; (19b78 <bt_keys_foreach_type+0x30>)
   19b54:	4809      	ldr	r0, [pc, #36]	; (19b7c <bt_keys_foreach_type+0x34>)
   19b56:	23b3      	movs	r3, #179	; 0xb3
   19b58:	4a09      	ldr	r2, [pc, #36]	; (19b80 <bt_keys_foreach_type+0x38>)
   19b5a:	f00d fd4a 	bl	275f2 <assert_print>
   19b5e:	21b3      	movs	r1, #179	; 0xb3
   19b60:	4807      	ldr	r0, [pc, #28]	; (19b80 <bt_keys_foreach_type+0x38>)
   19b62:	f00d fd3f 	bl	275e4 <assert_post_action>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
			func(&key_pool[i], data);
		}
	}
}
   19b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   19b6a:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   19b6c:	4805      	ldr	r0, [pc, #20]	; (19b84 <bt_keys_foreach_type+0x3c>)
   19b6e:	89c2      	ldrh	r2, [r0, #14]
   19b70:	4222      	tst	r2, r4
   19b72:	d1f8      	bne.n	19b66 <bt_keys_foreach_type+0x1e>
}
   19b74:	bd10      	pop	{r4, pc}
   19b76:	bf00      	nop
   19b78:	000322b1 	.word	0x000322b1
   19b7c:	0002e715 	.word	0x0002e715
   19b80:	0003226d 	.word	0x0003226d
   19b84:	2002f3d4 	.word	0x2002f3d4

00019b88 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   19b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19b8a:	4605      	mov	r5, r0
   19b8c:	460e      	mov	r6, r1
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   19b8e:	4614      	mov	r4, r2
   19b90:	b9aa      	cbnz	r2, 19bbe <bt_keys_find+0x36>
   19b92:	490f      	ldr	r1, [pc, #60]	; (19bd0 <bt_keys_find+0x48>)
   19b94:	480f      	ldr	r0, [pc, #60]	; (19bd4 <bt_keys_find+0x4c>)
   19b96:	23c0      	movs	r3, #192	; 0xc0
   19b98:	4a0f      	ldr	r2, [pc, #60]	; (19bd8 <bt_keys_find+0x50>)
   19b9a:	f00d fd2a 	bl	275f2 <assert_print>
   19b9e:	21c0      	movs	r1, #192	; 0xc0
   19ba0:	480d      	ldr	r0, [pc, #52]	; (19bd8 <bt_keys_find+0x50>)
   19ba2:	f00d fd1f 	bl	275e4 <assert_post_action>

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   19ba6:	b18a      	cbz	r2, 19bcc <bt_keys_find+0x44>
   19ba8:	42b1      	cmp	r1, r6
   19baa:	d10f      	bne.n	19bcc <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   19bac:	2207      	movs	r2, #7
   19bae:	4621      	mov	r1, r4
   19bb0:	480a      	ldr	r0, [pc, #40]	; (19bdc <bt_keys_find+0x54>)
   19bb2:	f012 fa7b 	bl	2c0ac <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19bb6:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   19bb8:	b918      	cbnz	r0, 19bc2 <bt_keys_find+0x3a>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
   19bba:	4809      	ldr	r0, [pc, #36]	; (19be0 <bt_keys_find+0x58>)
   19bbc:	e007      	b.n	19bce <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19bbe:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   19bc0:	4f07      	ldr	r7, [pc, #28]	; (19be0 <bt_keys_find+0x58>)
   19bc2:	89fa      	ldrh	r2, [r7, #14]
   19bc4:	7839      	ldrb	r1, [r7, #0]
   19bc6:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19bc8:	2b00      	cmp	r3, #0
   19bca:	d0ec      	beq.n	19ba6 <bt_keys_find+0x1e>
		}
	}

	return NULL;
   19bcc:	2000      	movs	r0, #0
}
   19bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19bd0:	0003229d 	.word	0x0003229d
   19bd4:	0002e715 	.word	0x0002e715
   19bd8:	0003226d 	.word	0x0003226d
   19bdc:	2002f3d5 	.word	0x2002f3d5
   19be0:	2002f3d4 	.word	0x2002f3d4

00019be4 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   19be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19be6:	4606      	mov	r6, r0
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   19be8:	460c      	mov	r4, r1
   19bea:	b949      	cbnz	r1, 19c00 <bt_keys_find_irk+0x1c>
   19bec:	4923      	ldr	r1, [pc, #140]	; (19c7c <bt_keys_find_irk+0x98>)
   19bee:	4824      	ldr	r0, [pc, #144]	; (19c80 <bt_keys_find_irk+0x9c>)
   19bf0:	23e9      	movs	r3, #233	; 0xe9
   19bf2:	4a24      	ldr	r2, [pc, #144]	; (19c84 <bt_keys_find_irk+0xa0>)
   19bf4:	f00d fcfd 	bl	275f2 <assert_print>
   19bf8:	21e9      	movs	r1, #233	; 0xe9
   19bfa:	4822      	ldr	r0, [pc, #136]	; (19c84 <bt_keys_find_irk+0xa0>)
   19bfc:	f00d fcf2 	bl	275e4 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   19c00:	780b      	ldrb	r3, [r1, #0]
   19c02:	2b01      	cmp	r3, #1
   19c04:	d001      	beq.n	19c0a <bt_keys_find_irk+0x26>

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   19c06:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   19c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   19c0a:	798b      	ldrb	r3, [r1, #6]
   19c0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19c10:	2b40      	cmp	r3, #64	; 0x40
   19c12:	d1f8      	bne.n	19c06 <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19c14:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   19c16:	4d1c      	ldr	r5, [pc, #112]	; (19c88 <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   19c18:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   19c1c:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   19c1e:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19c20:	f002 0202 	and.w	r2, r2, #2
   19c24:	b1db      	cbz	r3, 19c5e <bt_keys_find_irk+0x7a>
   19c26:	2300      	movs	r3, #0
   19c28:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   19c2a:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   19c2c:	f002 0202 	and.w	r2, r2, #2
   19c30:	2b00      	cmp	r3, #0
   19c32:	d1e8      	bne.n	19c06 <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   19c34:	2a00      	cmp	r2, #0
   19c36:	d0e6      	beq.n	19c06 <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   19c38:	42b1      	cmp	r1, r6
   19c3a:	d1e4      	bne.n	19c06 <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   19c3c:	1c67      	adds	r7, r4, #1
   19c3e:	4639      	mov	r1, r7
   19c40:	4812      	ldr	r0, [pc, #72]	; (19c8c <bt_keys_find_irk+0xa8>)
   19c42:	f00e fd8d 	bl	28760 <bt_rpa_irk_matches>
   19c46:	2301      	movs	r3, #1
   19c48:	2800      	cmp	r0, #0
   19c4a:	d0ed      	beq.n	19c28 <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   19c4c:	f8d4 3001 	ldr.w	r3, [r4, #1]
   19c50:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   19c54:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   19c58:	4b0d      	ldr	r3, [pc, #52]	; (19c90 <bt_keys_find_irk+0xac>)
   19c5a:	809a      	strh	r2, [r3, #4]
}
   19c5c:	e00b      	b.n	19c76 <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   19c5e:	2a00      	cmp	r2, #0
   19c60:	d0e2      	beq.n	19c28 <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   19c62:	42b0      	cmp	r0, r6
   19c64:	d1e0      	bne.n	19c28 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   19c66:	2206      	movs	r2, #6
   19c68:	4639      	mov	r1, r7
   19c6a:	1c60      	adds	r0, r4, #1
   19c6c:	f012 fa1e 	bl	2c0ac <memcmp>
   19c70:	2301      	movs	r3, #1
   19c72:	2800      	cmp	r0, #0
   19c74:	d1d2      	bne.n	19c1c <bt_keys_find_irk+0x38>
			return &key_pool[i];
   19c76:	4804      	ldr	r0, [pc, #16]	; (19c88 <bt_keys_find_irk+0xa4>)
   19c78:	e7c6      	b.n	19c08 <bt_keys_find_irk+0x24>
   19c7a:	bf00      	nop
   19c7c:	0003229d 	.word	0x0003229d
   19c80:	0002e715 	.word	0x0002e715
   19c84:	0003226d 	.word	0x0003226d
   19c88:	2002f3d4 	.word	0x2002f3d4
   19c8c:	2002f3fe 	.word	0x2002f3fe
   19c90:	2002f40e 	.word	0x2002f40e

00019c94 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   19c94:	b510      	push	{r4, lr}
	int i;

	__ASSERT_NO_MSG(addr != NULL);
   19c96:	b959      	cbnz	r1, 19cb0 <bt_keys_find_addr+0x1c>
   19c98:	490c      	ldr	r1, [pc, #48]	; (19ccc <bt_keys_find_addr+0x38>)
   19c9a:	480d      	ldr	r0, [pc, #52]	; (19cd0 <bt_keys_find_addr+0x3c>)
   19c9c:	f44f 738d 	mov.w	r3, #282	; 0x11a
   19ca0:	4a0c      	ldr	r2, [pc, #48]	; (19cd4 <bt_keys_find_addr+0x40>)
   19ca2:	f00d fca6 	bl	275f2 <assert_print>
   19ca6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   19caa:	480a      	ldr	r0, [pc, #40]	; (19cd4 <bt_keys_find_addr+0x40>)
   19cac:	f00d fc9a 	bl	275e4 <assert_post_action>

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   19cb0:	4c09      	ldr	r4, [pc, #36]	; (19cd8 <bt_keys_find_addr+0x44>)
   19cb2:	7823      	ldrb	r3, [r4, #0]
   19cb4:	4283      	cmp	r3, r0
   19cb6:	d104      	bne.n	19cc2 <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   19cb8:	2207      	movs	r2, #7
   19cba:	1c60      	adds	r0, r4, #1
   19cbc:	f012 f9f6 	bl	2c0ac <memcmp>
   19cc0:	b108      	cbz	r0, 19cc6 <bt_keys_find_addr+0x32>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   19cc2:	2000      	movs	r0, #0
}
   19cc4:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   19cc6:	4620      	mov	r0, r4
   19cc8:	e7fc      	b.n	19cc4 <bt_keys_find_addr+0x30>
   19cca:	bf00      	nop
   19ccc:	0003229d 	.word	0x0003229d
   19cd0:	0002e715 	.word	0x0002e715
   19cd4:	0003226d 	.word	0x0003226d
   19cd8:	2002f3d4 	.word	0x2002f3d4

00019cdc <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
   19cdc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   19cde:	b958      	cbnz	r0, 19cf8 <bt_keys_add_type+0x1c>
   19ce0:	4907      	ldr	r1, [pc, #28]	; (19d00 <bt_keys_add_type+0x24>)
   19ce2:	4808      	ldr	r0, [pc, #32]	; (19d04 <bt_keys_add_type+0x28>)
   19ce4:	f44f 7395 	mov.w	r3, #298	; 0x12a
   19ce8:	4a07      	ldr	r2, [pc, #28]	; (19d08 <bt_keys_add_type+0x2c>)
   19cea:	f00d fc82 	bl	275f2 <assert_print>
   19cee:	f44f 7195 	mov.w	r1, #298	; 0x12a
   19cf2:	4805      	ldr	r0, [pc, #20]	; (19d08 <bt_keys_add_type+0x2c>)
   19cf4:	f00d fc76 	bl	275e4 <assert_post_action>

	keys->keys |= type;
   19cf8:	89c3      	ldrh	r3, [r0, #14]
   19cfa:	4319      	orrs	r1, r3
   19cfc:	81c1      	strh	r1, [r0, #14]
}
   19cfe:	bd08      	pop	{r3, pc}
   19d00:	000322c5 	.word	0x000322c5
   19d04:	0002e715 	.word	0x0002e715
   19d08:	0003226d 	.word	0x0003226d

00019d0c <bt_keys_get_type>:
{
   19d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d0e:	4606      	mov	r6, r0
   19d10:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   19d12:	4615      	mov	r5, r2
   19d14:	b94a      	cbnz	r2, 19d2a <bt_keys_get_type+0x1e>
   19d16:	490c      	ldr	r1, [pc, #48]	; (19d48 <bt_keys_get_type+0x3c>)
   19d18:	480c      	ldr	r0, [pc, #48]	; (19d4c <bt_keys_get_type+0x40>)
   19d1a:	23d2      	movs	r3, #210	; 0xd2
   19d1c:	4a0c      	ldr	r2, [pc, #48]	; (19d50 <bt_keys_get_type+0x44>)
   19d1e:	f00d fc68 	bl	275f2 <assert_print>
   19d22:	21d2      	movs	r1, #210	; 0xd2
   19d24:	480a      	ldr	r0, [pc, #40]	; (19d50 <bt_keys_get_type+0x44>)
   19d26:	f00d fc5d 	bl	275e4 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   19d2a:	f7ff ff2d 	bl	19b88 <bt_keys_find>
	if (keys) {
   19d2e:	4604      	mov	r4, r0
   19d30:	b940      	cbnz	r0, 19d44 <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   19d32:	4629      	mov	r1, r5
   19d34:	4638      	mov	r0, r7
   19d36:	f7ff fecf 	bl	19ad8 <bt_keys_get_addr>
	if (!keys) {
   19d3a:	4604      	mov	r4, r0
   19d3c:	b110      	cbz	r0, 19d44 <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   19d3e:	4631      	mov	r1, r6
   19d40:	f7ff ffcc 	bl	19cdc <bt_keys_add_type>
}
   19d44:	4620      	mov	r0, r4
   19d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d48:	0003229d 	.word	0x0003229d
   19d4c:	0002e715 	.word	0x0002e715
   19d50:	0003226d 	.word	0x0003226d

00019d54 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   19d54:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);
   19d56:	4604      	mov	r4, r0
   19d58:	b958      	cbnz	r0, 19d72 <bt_keys_clear+0x1e>
   19d5a:	490c      	ldr	r1, [pc, #48]	; (19d8c <bt_keys_clear+0x38>)
   19d5c:	480c      	ldr	r0, [pc, #48]	; (19d90 <bt_keys_clear+0x3c>)
   19d5e:	f240 1331 	movw	r3, #305	; 0x131
   19d62:	4a0c      	ldr	r2, [pc, #48]	; (19d94 <bt_keys_clear+0x40>)
   19d64:	f00d fc45 	bl	275f2 <assert_print>
   19d68:	f240 1131 	movw	r1, #305	; 0x131
   19d6c:	4809      	ldr	r0, [pc, #36]	; (19d94 <bt_keys_clear+0x40>)
   19d6e:	f00d fc39 	bl	275e4 <assert_post_action>

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   19d72:	7a03      	ldrb	r3, [r0, #8]
   19d74:	075b      	lsls	r3, r3, #29
   19d76:	d501      	bpl.n	19d7c <bt_keys_clear+0x28>
		bt_id_del(keys);
   19d78:	f7f9 ffb0 	bl	13cdc <bt_id_del>
   19d7c:	4620      	mov	r0, r4
		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   19d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19d82:	225c      	movs	r2, #92	; 0x5c
   19d84:	2100      	movs	r1, #0
   19d86:	f012 b9db 	b.w	2c140 <memset>
   19d8a:	bf00      	nop
   19d8c:	000322c5 	.word	0x000322c5
   19d90:	0002e715 	.word	0x0002e715
   19d94:	0003226d 	.word	0x0003226d

00019d98 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19d98:	4288      	cmp	r0, r1
{
   19d9a:	b510      	push	{r4, lr}
   19d9c:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19da0:	d911      	bls.n	19dc6 <sys_memcpy_swap+0x2e>
   19da2:	188c      	adds	r4, r1, r2
   19da4:	42a0      	cmp	r0, r4
   19da6:	d211      	bcs.n	19dcc <sys_memcpy_swap+0x34>
   19da8:	490d      	ldr	r1, [pc, #52]	; (19de0 <sys_memcpy_swap+0x48>)
   19daa:	f240 2315 	movw	r3, #533	; 0x215
   19dae:	4a0d      	ldr	r2, [pc, #52]	; (19de4 <sys_memcpy_swap+0x4c>)
   19db0:	480d      	ldr	r0, [pc, #52]	; (19de8 <sys_memcpy_swap+0x50>)
   19db2:	f00d fc1e 	bl	275f2 <assert_print>
   19db6:	480d      	ldr	r0, [pc, #52]	; (19dec <sys_memcpy_swap+0x54>)
   19db8:	f00d fc1b 	bl	275f2 <assert_print>
   19dbc:	f240 2115 	movw	r1, #533	; 0x215
   19dc0:	4808      	ldr	r0, [pc, #32]	; (19de4 <sys_memcpy_swap+0x4c>)
   19dc2:	f00d fc0f 	bl	275e4 <assert_post_action>
   19dc6:	d0ef      	beq.n	19da8 <sys_memcpy_swap+0x10>
   19dc8:	4299      	cmp	r1, r3
   19dca:	e7ec      	b.n	19da6 <sys_memcpy_swap+0xe>
	psrc += length - 1;
   19dcc:	3a01      	subs	r2, #1
   19dce:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   19dd0:	f811 2901 	ldrb.w	r2, [r1], #-1
   19dd4:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   19dd8:	4283      	cmp	r3, r0
   19dda:	d1f9      	bne.n	19dd0 <sys_memcpy_swap+0x38>
}
   19ddc:	bd10      	pop	{r4, pc}
   19dde:	bf00      	nop
   19de0:	00031195 	.word	0x00031195
   19de4:	00031163 	.word	0x00031163
   19de8:	0002e715 	.word	0x0002e715
   19dec:	000311ec 	.word	0x000311ec

00019df0 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   19df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19df4:	b09a      	sub	sp, #104	; 0x68
   19df6:	4616      	mov	r6, r2
   19df8:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   19dfc:	aa0c      	add	r2, sp, #48	; 0x30
{
   19dfe:	4684      	mov	ip, r0
   19e00:	468a      	mov	sl, r1
   19e02:	4690      	mov	r8, r2
   19e04:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   19e06:	4b2c      	ldr	r3, [pc, #176]	; (19eb8 <bt_crypto_f5+0xc8>)
   19e08:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   19e0c:	4614      	mov	r4, r2
   19e0e:	6818      	ldr	r0, [r3, #0]
   19e10:	6859      	ldr	r1, [r3, #4]
   19e12:	3308      	adds	r3, #8
   19e14:	c403      	stmia	r4!, {r0, r1}
   19e16:	4573      	cmp	r3, lr
   19e18:	4622      	mov	r2, r4
   19e1a:	d1f7      	bne.n	19e0c <bt_crypto_f5+0x1c>
   19e1c:	6818      	ldr	r0, [r3, #0]
   19e1e:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   19e20:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   19e22:	6020      	str	r0, [r4, #0]
   19e24:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   19e26:	2220      	movs	r2, #32
   19e28:	a804      	add	r0, sp, #16
   19e2a:	f7ff ffb5 	bl	19d98 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   19e2e:	466b      	mov	r3, sp
   19e30:	2220      	movs	r2, #32
   19e32:	4822      	ldr	r0, [pc, #136]	; (19ebc <bt_crypto_f5+0xcc>)
   19e34:	a904      	add	r1, sp, #16
   19e36:	f010 fb14 	bl	2a462 <bt_crypto_aes_cmac>
	if (err) {
   19e3a:	4604      	mov	r4, r0
   19e3c:	bbc0      	cbnz	r0, 19eb0 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   19e3e:	2210      	movs	r2, #16
   19e40:	4651      	mov	r1, sl
   19e42:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   19e46:	f7ff ffa7 	bl	19d98 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   19e4a:	2210      	movs	r2, #16
   19e4c:	4631      	mov	r1, r6
   19e4e:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   19e52:	f7ff ffa1 	bl	19d98 <sys_memcpy_swap>
	m[37] = a1->type;
   19e56:	4629      	mov	r1, r5
   19e58:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   19e5c:	2206      	movs	r2, #6
   19e5e:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   19e62:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   19e66:	f7ff ff97 	bl	19d98 <sys_memcpy_swap>
	m[44] = a2->type;
   19e6a:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   19e6c:	2206      	movs	r2, #6
	m[44] = a2->type;
   19e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   19e72:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   19e76:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   19e7a:	f7ff ff8d 	bl	19d98 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   19e7e:	464b      	mov	r3, r9
   19e80:	2235      	movs	r2, #53	; 0x35
   19e82:	4641      	mov	r1, r8
   19e84:	4668      	mov	r0, sp
   19e86:	f010 faec 	bl	2a462 <bt_crypto_aes_cmac>
	if (err) {
   19e8a:	4604      	mov	r4, r0
   19e8c:	b980      	cbnz	r0, 19eb0 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   19e8e:	4648      	mov	r0, r9
   19e90:	f010 fad9 	bl	2a446 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   19e94:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   19e96:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   19e98:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   19e9c:	4641      	mov	r1, r8
   19e9e:	463b      	mov	r3, r7
   19ea0:	4668      	mov	r0, sp
   19ea2:	f010 fade 	bl	2a462 <bt_crypto_aes_cmac>
	if (err) {
   19ea6:	4604      	mov	r4, r0
   19ea8:	b910      	cbnz	r0, 19eb0 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   19eaa:	4638      	mov	r0, r7
   19eac:	f010 facb 	bl	2a446 <sys_mem_swap.constprop.0>

	return 0;
}
   19eb0:	4620      	mov	r0, r4
   19eb2:	b01a      	add	sp, #104	; 0x68
   19eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19eb8:	0002d7e4 	.word	0x0002d7e4
   19ebc:	000322e1 	.word	0x000322e1

00019ec0 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   19ec0:	b570      	push	{r4, r5, r6, lr}
   19ec2:	460e      	mov	r6, r1
   19ec4:	461d      	mov	r5, r3
   19ec6:	4614      	mov	r4, r2
   19ec8:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   19eca:	4601      	mov	r1, r0
   19ecc:	2220      	movs	r2, #32
   19ece:	a804      	add	r0, sp, #16
   19ed0:	f7ff ff62 	bl	19d98 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   19ed4:	2220      	movs	r2, #32
   19ed6:	4631      	mov	r1, r6
   19ed8:	a80c      	add	r0, sp, #48	; 0x30
   19eda:	f7ff ff5d 	bl	19d98 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   19ede:	2210      	movs	r2, #16
   19ee0:	4629      	mov	r1, r5
   19ee2:	a814      	add	r0, sp, #80	; 0x50
   19ee4:	f7ff ff58 	bl	19d98 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   19ee8:	2210      	movs	r2, #16
   19eea:	4621      	mov	r1, r4
   19eec:	4668      	mov	r0, sp
   19eee:	f7ff ff53 	bl	19d98 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   19ef2:	466b      	mov	r3, sp
   19ef4:	2250      	movs	r2, #80	; 0x50
   19ef6:	4618      	mov	r0, r3
   19ef8:	a904      	add	r1, sp, #16
   19efa:	f010 fab2 	bl	2a462 <bt_crypto_aes_cmac>
	if (err) {
   19efe:	b940      	cbnz	r0, 19f12 <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   19f00:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   19f02:	4a05      	ldr	r2, [pc, #20]	; (19f18 <bt_crypto_g2+0x58>)
   19f04:	ba1b      	rev	r3, r3
   19f06:	fbb3 f1f2 	udiv	r1, r3, r2
   19f0a:	fb02 3311 	mls	r3, r2, r1, r3
   19f0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   19f10:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   19f12:	b018      	add	sp, #96	; 0x60
   19f14:	bd70      	pop	{r4, r5, r6, pc}
   19f16:	bf00      	nop
   19f18:	000f4240 	.word	0x000f4240

00019f1c <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   19f1c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   19f1e:	4804      	ldr	r0, [pc, #16]	; (19f30 <fs_init+0x14>)
   19f20:	f011 fee4 	bl	2bcec <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   19f24:	4b03      	ldr	r3, [pc, #12]	; (19f34 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   19f26:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   19f28:	e9c3 3300 	strd	r3, r3, [r3]
   19f2c:	bd08      	pop	{r3, pc}
   19f2e:	bf00      	nop
   19f30:	2002f430 	.word	0x2002f430
   19f34:	2002f444 	.word	0x2002f444

00019f38 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19f38:	2234      	movs	r2, #52	; 0x34
   19f3a:	4b02      	ldr	r3, [pc, #8]	; (19f44 <net_buf_pool_get+0xc>)
   19f3c:	fb02 3000 	mla	r0, r2, r0, r3
   19f40:	4770      	bx	lr
   19f42:	bf00      	nop
   19f44:	20008c94 	.word	0x20008c94

00019f48 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19f48:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19f4a:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19f4c:	4b06      	ldr	r3, [pc, #24]	; (19f68 <net_buf_id+0x20>)
   19f4e:	fb01 3302 	mla	r3, r1, r2, r3
   19f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19f58:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19f5a:	331b      	adds	r3, #27
   19f5c:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   19f60:	fbb0 f0f3 	udiv	r0, r0, r3
   19f64:	4770      	bx	lr
   19f66:	bf00      	nop
   19f68:	20008c94 	.word	0x20008c94

00019f6c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19f6c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19f6e:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19f70:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19f72:	4b09      	ldr	r3, [pc, #36]	; (19f98 <fixed_data_alloc+0x2c>)
   19f74:	fb04 3302 	mla	r3, r4, r2, r3
   19f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   19f7a:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19f7c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19f7e:	681a      	ldr	r2, [r3, #0]
   19f80:	4294      	cmp	r4, r2
   19f82:	bf94      	ite	ls
   19f84:	600c      	strls	r4, [r1, #0]
   19f86:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19f88:	e9d3 5400 	ldrd	r5, r4, [r3]
   19f8c:	f7ff ffdc 	bl	19f48 <net_buf_id>
}
   19f90:	fb05 4000 	mla	r0, r5, r0, r4
   19f94:	bd38      	pop	{r3, r4, r5, pc}
   19f96:	bf00      	nop
   19f98:	20008c94 	.word	0x20008c94

00019f9c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   19f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fa0:	b085      	sub	sp, #20
   19fa2:	9103      	str	r1, [sp, #12]
   19fa4:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19fa6:	4619      	mov	r1, r3
   19fa8:	4610      	mov	r0, r2
{
   19faa:	4692      	mov	sl, r2
   19fac:	4699      	mov	r9, r3
   19fae:	4690      	mov	r8, r2
   19fb0:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19fb2:	f011 ff7f 	bl	2beb4 <sys_clock_timeout_end_calc>
   19fb6:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   19fba:	b945      	cbnz	r5, 19fce <net_buf_alloc_len+0x32>
   19fbc:	4966      	ldr	r1, [pc, #408]	; (1a158 <net_buf_alloc_len+0x1bc>)
   19fbe:	23f4      	movs	r3, #244	; 0xf4
   19fc0:	4a66      	ldr	r2, [pc, #408]	; (1a15c <net_buf_alloc_len+0x1c0>)
   19fc2:	4867      	ldr	r0, [pc, #412]	; (1a160 <net_buf_alloc_len+0x1c4>)
   19fc4:	f00d fb15 	bl	275f2 <assert_print>
   19fc8:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   19fca:	4864      	ldr	r0, [pc, #400]	; (1a15c <net_buf_alloc_len+0x1c0>)
   19fcc:	e019      	b.n	1a002 <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   19fce:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   19fd2:	f04f 0320 	mov.w	r3, #32
   19fd6:	f3ef 8b11 	mrs	fp, BASEPRI
   19fda:	f383 8812 	msr	BASEPRI_MAX, r3
   19fde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19fe2:	4630      	mov	r0, r6
   19fe4:	f006 fc88 	bl	208f8 <z_spin_lock_valid>
   19fe8:	b968      	cbnz	r0, 1a006 <net_buf_alloc_len+0x6a>
   19fea:	2394      	movs	r3, #148	; 0x94
   19fec:	4a5d      	ldr	r2, [pc, #372]	; (1a164 <net_buf_alloc_len+0x1c8>)
   19fee:	495e      	ldr	r1, [pc, #376]	; (1a168 <net_buf_alloc_len+0x1cc>)
   19ff0:	485b      	ldr	r0, [pc, #364]	; (1a160 <net_buf_alloc_len+0x1c4>)
   19ff2:	f00d fafe 	bl	275f2 <assert_print>
   19ff6:	4631      	mov	r1, r6
   19ff8:	485c      	ldr	r0, [pc, #368]	; (1a16c <net_buf_alloc_len+0x1d0>)
   19ffa:	f00d fafa 	bl	275f2 <assert_print>
   19ffe:	2194      	movs	r1, #148	; 0x94
   1a000:	4858      	ldr	r0, [pc, #352]	; (1a164 <net_buf_alloc_len+0x1c8>)
   1a002:	f00d faef 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a006:	4630      	mov	r0, r6
   1a008:	f006 fc92 	bl	20930 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1a00c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1a00e:	2b00      	cmp	r3, #0
   1a010:	d070      	beq.n	1a0f4 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1a012:	8c2a      	ldrh	r2, [r5, #32]
   1a014:	429a      	cmp	r2, r3
   1a016:	d94d      	bls.n	1a0b4 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1a018:	2200      	movs	r2, #0
   1a01a:	2300      	movs	r3, #0
   1a01c:	4628      	mov	r0, r5
   1a01e:	f006 feb9 	bl	20d94 <z_impl_k_queue_get>
			if (buf) {
   1a022:	4604      	mov	r4, r0
   1a024:	2800      	cmp	r0, #0
   1a026:	d045      	beq.n	1a0b4 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a028:	4630      	mov	r0, r6
   1a02a:	f006 fc73 	bl	20914 <z_spin_unlock_valid>
   1a02e:	b958      	cbnz	r0, 1a048 <net_buf_alloc_len+0xac>
   1a030:	23c2      	movs	r3, #194	; 0xc2
   1a032:	4a4c      	ldr	r2, [pc, #304]	; (1a164 <net_buf_alloc_len+0x1c8>)
   1a034:	494e      	ldr	r1, [pc, #312]	; (1a170 <net_buf_alloc_len+0x1d4>)
   1a036:	484a      	ldr	r0, [pc, #296]	; (1a160 <net_buf_alloc_len+0x1c4>)
   1a038:	f00d fadb 	bl	275f2 <assert_print>
   1a03c:	4631      	mov	r1, r6
   1a03e:	484d      	ldr	r0, [pc, #308]	; (1a174 <net_buf_alloc_len+0x1d8>)
   1a040:	f00d fad7 	bl	275f2 <assert_print>
   1a044:	21c2      	movs	r1, #194	; 0xc2
   1a046:	e7db      	b.n	1a000 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1a048:	f38b 8811 	msr	BASEPRI, fp
   1a04c:	f3bf 8f6f 	isb	sy
	if (size) {
   1a050:	9d03      	ldr	r5, [sp, #12]
   1a052:	2d00      	cmp	r5, #0
   1a054:	d074      	beq.n	1a140 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1a056:	ea59 030a 	orrs.w	r3, r9, sl
   1a05a:	d012      	beq.n	1a082 <net_buf_alloc_len+0xe6>
   1a05c:	f1b9 3fff 	cmp.w	r9, #4294967295
   1a060:	bf08      	it	eq
   1a062:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1a066:	d00c      	beq.n	1a082 <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1a068:	f009 fa14 	bl	23494 <sys_clock_tick_get>
   1a06c:	9b01      	ldr	r3, [sp, #4]
   1a06e:	ebb3 0800 	subs.w	r8, r3, r0
   1a072:	9b02      	ldr	r3, [sp, #8]
   1a074:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1a078:	2f00      	cmp	r7, #0
   1a07a:	bfbc      	itt	lt
   1a07c:	f04f 0800 	movlt.w	r8, #0
   1a080:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1a082:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a086:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1a088:	4e3b      	ldr	r6, [pc, #236]	; (1a178 <net_buf_alloc_len+0x1dc>)
   1a08a:	4642      	mov	r2, r8
   1a08c:	fb09 6303 	mla	r3, r9, r3, r6
   1a090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a092:	4620      	mov	r0, r4
   1a094:	681b      	ldr	r3, [r3, #0]
   1a096:	a903      	add	r1, sp, #12
   1a098:	f8d3 a000 	ldr.w	sl, [r3]
   1a09c:	463b      	mov	r3, r7
   1a09e:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1a0a0:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1a0a2:	2800      	cmp	r0, #0
   1a0a4:	d13c      	bne.n	1a120 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1a0a6:	7aa0      	ldrb	r0, [r4, #10]
   1a0a8:	4621      	mov	r1, r4
   1a0aa:	fb00 6009 	mla	r0, r0, r9, r6
   1a0ae:	f011 fe48 	bl	2bd42 <k_queue_prepend>
}
   1a0b2:	e030      	b.n	1a116 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1a0b4:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1a0b6:	4630      	mov	r0, r6
   1a0b8:	1e63      	subs	r3, r4, #1
   1a0ba:	846b      	strh	r3, [r5, #34]	; 0x22
   1a0bc:	f006 fc2a 	bl	20914 <z_spin_unlock_valid>
   1a0c0:	2800      	cmp	r0, #0
   1a0c2:	d0b5      	beq.n	1a030 <net_buf_alloc_len+0x94>
   1a0c4:	f38b 8811 	msr	BASEPRI, fp
   1a0c8:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1a0cc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1a0d0:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1a0d2:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1a0d4:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1a0d6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1a0d8:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1a0dc:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1a0e0:	4b25      	ldr	r3, [pc, #148]	; (1a178 <net_buf_alloc_len+0x1dc>)
   1a0e2:	4a26      	ldr	r2, [pc, #152]	; (1a17c <net_buf_alloc_len+0x1e0>)
   1a0e4:	1aeb      	subs	r3, r5, r3
   1a0e6:	109b      	asrs	r3, r3, #2
   1a0e8:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1a0ea:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1a0ec:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1a0f0:	72e3      	strb	r3, [r4, #11]
		goto success;
   1a0f2:	e7ad      	b.n	1a050 <net_buf_alloc_len+0xb4>
   1a0f4:	4630      	mov	r0, r6
   1a0f6:	f006 fc0d 	bl	20914 <z_spin_unlock_valid>
   1a0fa:	2800      	cmp	r0, #0
   1a0fc:	d098      	beq.n	1a030 <net_buf_alloc_len+0x94>
   1a0fe:	f38b 8811 	msr	BASEPRI, fp
   1a102:	f3bf 8f6f 	isb	sy
   1a106:	4652      	mov	r2, sl
   1a108:	464b      	mov	r3, r9
   1a10a:	4628      	mov	r0, r5
   1a10c:	f006 fe42 	bl	20d94 <z_impl_k_queue_get>
	if (!buf) {
   1a110:	4604      	mov	r4, r0
   1a112:	2800      	cmp	r0, #0
   1a114:	d19c      	bne.n	1a050 <net_buf_alloc_len+0xb4>
		return NULL;
   1a116:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1a118:	4620      	mov	r0, r4
   1a11a:	b005      	add	sp, #20
   1a11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1a120:	9b03      	ldr	r3, [sp, #12]
   1a122:	429d      	cmp	r5, r3
   1a124:	d90d      	bls.n	1a142 <net_buf_alloc_len+0x1a6>
   1a126:	4916      	ldr	r1, [pc, #88]	; (1a180 <net_buf_alloc_len+0x1e4>)
   1a128:	f240 1355 	movw	r3, #341	; 0x155
   1a12c:	4a0b      	ldr	r2, [pc, #44]	; (1a15c <net_buf_alloc_len+0x1c0>)
   1a12e:	480c      	ldr	r0, [pc, #48]	; (1a160 <net_buf_alloc_len+0x1c4>)
   1a130:	f00d fa5f 	bl	275f2 <assert_print>
   1a134:	4813      	ldr	r0, [pc, #76]	; (1a184 <net_buf_alloc_len+0x1e8>)
   1a136:	f00d fa5c 	bl	275f2 <assert_print>
   1a13a:	f240 1155 	movw	r1, #341	; 0x155
   1a13e:	e744      	b.n	19fca <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1a140:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1a142:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1a144:	2201      	movs	r2, #1
	buf->frags = NULL;
   1a146:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1a148:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1a14a:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1a14c:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1a14e:	6963      	ldr	r3, [r4, #20]
   1a150:	8262      	strh	r2, [r4, #18]
   1a152:	60e3      	str	r3, [r4, #12]
}
   1a154:	e7e0      	b.n	1a118 <net_buf_alloc_len+0x17c>
   1a156:	bf00      	nop
   1a158:	0003234d 	.word	0x0003234d
   1a15c:	000322fe 	.word	0x000322fe
   1a160:	0002e715 	.word	0x0002e715
   1a164:	0002f55d 	.word	0x0002f55d
   1a168:	0002f5b6 	.word	0x0002f5b6
   1a16c:	0002f5cb 	.word	0x0002f5cb
   1a170:	0002f58a 	.word	0x0002f58a
   1a174:	0002f5a1 	.word	0x0002f5a1
   1a178:	20008c94 	.word	0x20008c94
   1a17c:	c4ec4ec5 	.word	0xc4ec4ec5
   1a180:	00032352 	.word	0x00032352
   1a184:	00032363 	.word	0x00032363

0001a188 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1a188:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1a18a:	b958      	cbnz	r0, 1a1a4 <net_buf_simple_reserve+0x1c>
   1a18c:	490d      	ldr	r1, [pc, #52]	; (1a1c4 <net_buf_simple_reserve+0x3c>)
   1a18e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1a192:	4a0d      	ldr	r2, [pc, #52]	; (1a1c8 <net_buf_simple_reserve+0x40>)
   1a194:	480d      	ldr	r0, [pc, #52]	; (1a1cc <net_buf_simple_reserve+0x44>)
   1a196:	f00d fa2c 	bl	275f2 <assert_print>
   1a19a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1a19e:	480a      	ldr	r0, [pc, #40]	; (1a1c8 <net_buf_simple_reserve+0x40>)
   1a1a0:	f00d fa20 	bl	275e4 <assert_post_action>
   1a1a4:	8883      	ldrh	r3, [r0, #4]
   1a1a6:	b14b      	cbz	r3, 1a1bc <net_buf_simple_reserve+0x34>
   1a1a8:	4909      	ldr	r1, [pc, #36]	; (1a1d0 <net_buf_simple_reserve+0x48>)
   1a1aa:	f240 13b9 	movw	r3, #441	; 0x1b9
   1a1ae:	4a06      	ldr	r2, [pc, #24]	; (1a1c8 <net_buf_simple_reserve+0x40>)
   1a1b0:	4806      	ldr	r0, [pc, #24]	; (1a1cc <net_buf_simple_reserve+0x44>)
   1a1b2:	f00d fa1e 	bl	275f2 <assert_print>
   1a1b6:	f240 11b9 	movw	r1, #441	; 0x1b9
   1a1ba:	e7f0      	b.n	1a19e <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1a1bc:	6883      	ldr	r3, [r0, #8]
   1a1be:	440b      	add	r3, r1
   1a1c0:	6003      	str	r3, [r0, #0]
}
   1a1c2:	bd08      	pop	{r3, pc}
   1a1c4:	000323e2 	.word	0x000323e2
   1a1c8:	000322fe 	.word	0x000322fe
   1a1cc:	0002e715 	.word	0x0002e715
   1a1d0:	00032366 	.word	0x00032366

0001a1d4 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1a1d4:	b570      	push	{r4, r5, r6, lr}
   1a1d6:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1a1d8:	4605      	mov	r5, r0
   1a1da:	b958      	cbnz	r0, 1a1f4 <net_buf_slist_put+0x20>
   1a1dc:	4928      	ldr	r1, [pc, #160]	; (1a280 <net_buf_slist_put+0xac>)
   1a1de:	f240 13c5 	movw	r3, #453	; 0x1c5
   1a1e2:	4a28      	ldr	r2, [pc, #160]	; (1a284 <net_buf_slist_put+0xb0>)
   1a1e4:	4828      	ldr	r0, [pc, #160]	; (1a288 <net_buf_slist_put+0xb4>)
   1a1e6:	f00d fa04 	bl	275f2 <assert_print>
   1a1ea:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1a1ee:	4825      	ldr	r0, [pc, #148]	; (1a284 <net_buf_slist_put+0xb0>)
   1a1f0:	f00d f9f8 	bl	275e4 <assert_post_action>
   1a1f4:	b949      	cbnz	r1, 1a20a <net_buf_slist_put+0x36>
   1a1f6:	4925      	ldr	r1, [pc, #148]	; (1a28c <net_buf_slist_put+0xb8>)
   1a1f8:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   1a1fc:	4a21      	ldr	r2, [pc, #132]	; (1a284 <net_buf_slist_put+0xb0>)
   1a1fe:	4822      	ldr	r0, [pc, #136]	; (1a288 <net_buf_slist_put+0xb4>)
   1a200:	f00d f9f7 	bl	275f2 <assert_print>
   1a204:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1a208:	e7f1      	b.n	1a1ee <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1a20a:	f04f 0320 	mov.w	r3, #32
   1a20e:	f3ef 8611 	mrs	r6, BASEPRI
   1a212:	f383 8812 	msr	BASEPRI_MAX, r3
   1a216:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a21a:	481d      	ldr	r0, [pc, #116]	; (1a290 <net_buf_slist_put+0xbc>)
   1a21c:	f006 fb6c 	bl	208f8 <z_spin_lock_valid>
   1a220:	b960      	cbnz	r0, 1a23c <net_buf_slist_put+0x68>
   1a222:	2394      	movs	r3, #148	; 0x94
   1a224:	4a1b      	ldr	r2, [pc, #108]	; (1a294 <net_buf_slist_put+0xc0>)
   1a226:	491c      	ldr	r1, [pc, #112]	; (1a298 <net_buf_slist_put+0xc4>)
   1a228:	4817      	ldr	r0, [pc, #92]	; (1a288 <net_buf_slist_put+0xb4>)
   1a22a:	f00d f9e2 	bl	275f2 <assert_print>
   1a22e:	4918      	ldr	r1, [pc, #96]	; (1a290 <net_buf_slist_put+0xbc>)
   1a230:	481a      	ldr	r0, [pc, #104]	; (1a29c <net_buf_slist_put+0xc8>)
   1a232:	f00d f9de 	bl	275f2 <assert_print>
   1a236:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a238:	4816      	ldr	r0, [pc, #88]	; (1a294 <net_buf_slist_put+0xc0>)
   1a23a:	e7d9      	b.n	1a1f0 <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1a23c:	4814      	ldr	r0, [pc, #80]	; (1a290 <net_buf_slist_put+0xbc>)
   1a23e:	f006 fb77 	bl	20930 <z_spin_lock_set_owner>
	parent->next = child;
   1a242:	2300      	movs	r3, #0
   1a244:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a246:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1a248:	b98b      	cbnz	r3, 1a26e <net_buf_slist_put+0x9a>
	list->head = node;
   1a24a:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a24e:	4810      	ldr	r0, [pc, #64]	; (1a290 <net_buf_slist_put+0xbc>)
   1a250:	f006 fb60 	bl	20914 <z_spin_unlock_valid>
   1a254:	b970      	cbnz	r0, 1a274 <net_buf_slist_put+0xa0>
   1a256:	23c2      	movs	r3, #194	; 0xc2
   1a258:	4a0e      	ldr	r2, [pc, #56]	; (1a294 <net_buf_slist_put+0xc0>)
   1a25a:	4911      	ldr	r1, [pc, #68]	; (1a2a0 <net_buf_slist_put+0xcc>)
   1a25c:	480a      	ldr	r0, [pc, #40]	; (1a288 <net_buf_slist_put+0xb4>)
   1a25e:	f00d f9c8 	bl	275f2 <assert_print>
   1a262:	490b      	ldr	r1, [pc, #44]	; (1a290 <net_buf_slist_put+0xbc>)
   1a264:	480f      	ldr	r0, [pc, #60]	; (1a2a4 <net_buf_slist_put+0xd0>)
   1a266:	f00d f9c4 	bl	275f2 <assert_print>
   1a26a:	21c2      	movs	r1, #194	; 0xc2
   1a26c:	e7e4      	b.n	1a238 <net_buf_slist_put+0x64>
	parent->next = child;
   1a26e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a270:	606c      	str	r4, [r5, #4]
}
   1a272:	e7ec      	b.n	1a24e <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1a274:	f386 8811 	msr	BASEPRI, r6
   1a278:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1a27c:	bd70      	pop	{r4, r5, r6, pc}
   1a27e:	bf00      	nop
   1a280:	00030f01 	.word	0x00030f01
   1a284:	000322fe 	.word	0x000322fe
   1a288:	0002e715 	.word	0x0002e715
   1a28c:	000323e2 	.word	0x000323e2
   1a290:	2002f44c 	.word	0x2002f44c
   1a294:	0002f55d 	.word	0x0002f55d
   1a298:	0002f5b6 	.word	0x0002f5b6
   1a29c:	0002f5cb 	.word	0x0002f5cb
   1a2a0:	0002f58a 	.word	0x0002f58a
   1a2a4:	0002f5a1 	.word	0x0002f5a1

0001a2a8 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1a2a8:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1a2aa:	4604      	mov	r4, r0
   1a2ac:	b958      	cbnz	r0, 1a2c6 <net_buf_slist_get+0x1e>
   1a2ae:	4923      	ldr	r1, [pc, #140]	; (1a33c <net_buf_slist_get+0x94>)
   1a2b0:	4823      	ldr	r0, [pc, #140]	; (1a340 <net_buf_slist_get+0x98>)
   1a2b2:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1a2b6:	4a23      	ldr	r2, [pc, #140]	; (1a344 <net_buf_slist_get+0x9c>)
   1a2b8:	f00d f99b 	bl	275f2 <assert_print>
   1a2bc:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1a2c0:	4820      	ldr	r0, [pc, #128]	; (1a344 <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a2c2:	f00d f98f 	bl	275e4 <assert_post_action>
	__asm__ volatile(
   1a2c6:	f04f 0320 	mov.w	r3, #32
   1a2ca:	f3ef 8611 	mrs	r6, BASEPRI
   1a2ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2d2:	f3bf 8f6f 	isb	sy
   1a2d6:	481c      	ldr	r0, [pc, #112]	; (1a348 <net_buf_slist_get+0xa0>)
   1a2d8:	f006 fb0e 	bl	208f8 <z_spin_lock_valid>
   1a2dc:	b960      	cbnz	r0, 1a2f8 <net_buf_slist_get+0x50>
   1a2de:	2394      	movs	r3, #148	; 0x94
   1a2e0:	4a1a      	ldr	r2, [pc, #104]	; (1a34c <net_buf_slist_get+0xa4>)
   1a2e2:	491b      	ldr	r1, [pc, #108]	; (1a350 <net_buf_slist_get+0xa8>)
   1a2e4:	4816      	ldr	r0, [pc, #88]	; (1a340 <net_buf_slist_get+0x98>)
   1a2e6:	f00d f984 	bl	275f2 <assert_print>
   1a2ea:	4917      	ldr	r1, [pc, #92]	; (1a348 <net_buf_slist_get+0xa0>)
   1a2ec:	4819      	ldr	r0, [pc, #100]	; (1a354 <net_buf_slist_get+0xac>)
   1a2ee:	f00d f980 	bl	275f2 <assert_print>
   1a2f2:	2194      	movs	r1, #148	; 0x94
   1a2f4:	4815      	ldr	r0, [pc, #84]	; (1a34c <net_buf_slist_get+0xa4>)
   1a2f6:	e7e4      	b.n	1a2c2 <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1a2f8:	4813      	ldr	r0, [pc, #76]	; (1a348 <net_buf_slist_get+0xa0>)
   1a2fa:	f006 fb19 	bl	20930 <z_spin_lock_set_owner>
	return list->head;
   1a2fe:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1a300:	b12d      	cbz	r5, 1a30e <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a302:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1a304:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a306:	4295      	cmp	r5, r2
	list->head = node;
   1a308:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1a30a:	bf08      	it	eq
   1a30c:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a30e:	480e      	ldr	r0, [pc, #56]	; (1a348 <net_buf_slist_get+0xa0>)
   1a310:	f006 fb00 	bl	20914 <z_spin_unlock_valid>
   1a314:	b958      	cbnz	r0, 1a32e <net_buf_slist_get+0x86>
   1a316:	23c2      	movs	r3, #194	; 0xc2
   1a318:	4a0c      	ldr	r2, [pc, #48]	; (1a34c <net_buf_slist_get+0xa4>)
   1a31a:	490f      	ldr	r1, [pc, #60]	; (1a358 <net_buf_slist_get+0xb0>)
   1a31c:	4808      	ldr	r0, [pc, #32]	; (1a340 <net_buf_slist_get+0x98>)
   1a31e:	f00d f968 	bl	275f2 <assert_print>
   1a322:	4909      	ldr	r1, [pc, #36]	; (1a348 <net_buf_slist_get+0xa0>)
   1a324:	480d      	ldr	r0, [pc, #52]	; (1a35c <net_buf_slist_get+0xb4>)
   1a326:	f00d f964 	bl	275f2 <assert_print>
   1a32a:	21c2      	movs	r1, #194	; 0xc2
   1a32c:	e7e2      	b.n	1a2f4 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1a32e:	f386 8811 	msr	BASEPRI, r6
   1a332:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1a336:	4628      	mov	r0, r5
   1a338:	bd70      	pop	{r4, r5, r6, pc}
   1a33a:	bf00      	nop
   1a33c:	00030f01 	.word	0x00030f01
   1a340:	0002e715 	.word	0x0002e715
   1a344:	000322fe 	.word	0x000322fe
   1a348:	2002f44c 	.word	0x2002f44c
   1a34c:	0002f55d 	.word	0x0002f55d
   1a350:	0002f5b6 	.word	0x0002f5b6
   1a354:	0002f5cb 	.word	0x0002f5cb
   1a358:	0002f58a 	.word	0x0002f58a
   1a35c:	0002f5a1 	.word	0x0002f5a1

0001a360 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1a360:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1a362:	b958      	cbnz	r0, 1a37c <net_buf_put+0x1c>
   1a364:	490d      	ldr	r1, [pc, #52]	; (1a39c <net_buf_put+0x3c>)
   1a366:	f240 13df 	movw	r3, #479	; 0x1df
   1a36a:	4a0d      	ldr	r2, [pc, #52]	; (1a3a0 <net_buf_put+0x40>)
   1a36c:	480d      	ldr	r0, [pc, #52]	; (1a3a4 <net_buf_put+0x44>)
   1a36e:	f00d f940 	bl	275f2 <assert_print>
   1a372:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   1a376:	480a      	ldr	r0, [pc, #40]	; (1a3a0 <net_buf_put+0x40>)
   1a378:	f00d f934 	bl	275e4 <assert_post_action>
   1a37c:	b949      	cbnz	r1, 1a392 <net_buf_put+0x32>
   1a37e:	490a      	ldr	r1, [pc, #40]	; (1a3a8 <net_buf_put+0x48>)
   1a380:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   1a384:	4a06      	ldr	r2, [pc, #24]	; (1a3a0 <net_buf_put+0x40>)
   1a386:	4807      	ldr	r0, [pc, #28]	; (1a3a4 <net_buf_put+0x44>)
   1a388:	f00d f933 	bl	275f2 <assert_print>
   1a38c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1a390:	e7f1      	b.n	1a376 <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1a392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1a396:	f011 bcc9 	b.w	2bd2c <k_queue_append>
   1a39a:	bf00      	nop
   1a39c:	00032375 	.word	0x00032375
   1a3a0:	000322fe 	.word	0x000322fe
   1a3a4:	0002e715 	.word	0x0002e715
   1a3a8:	000323e2 	.word	0x000323e2

0001a3ac <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1a3b0:	4605      	mov	r5, r0
   1a3b2:	b328      	cbz	r0, 1a400 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1a3b4:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1a3b6:	f04f 0834 	mov.w	r8, #52	; 0x34
   1a3ba:	4e1a      	ldr	r6, [pc, #104]	; (1a424 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   1a3bc:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1a3be:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1a3c0:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1a3c2:	3b01      	subs	r3, #1
   1a3c4:	b2db      	uxtb	r3, r3
   1a3c6:	7223      	strb	r3, [r4, #8]
   1a3c8:	b9c3      	cbnz	r3, 1a3fc <net_buf_unref+0x50>
		if (buf->__buf) {
   1a3ca:	6961      	ldr	r1, [r4, #20]
   1a3cc:	b159      	cbz	r1, 1a3e6 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1a3ce:	7a63      	ldrb	r3, [r4, #9]
   1a3d0:	07db      	lsls	r3, r3, #31
   1a3d2:	d407      	bmi.n	1a3e4 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a3d4:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1a3d6:	4620      	mov	r0, r4
   1a3d8:	fb08 6303 	mla	r3, r8, r3, r6
   1a3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a3de:	681b      	ldr	r3, [r3, #0]
   1a3e0:	689b      	ldr	r3, [r3, #8]
   1a3e2:	4798      	blx	r3
			buf->__buf = NULL;
   1a3e4:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1a3e6:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1a3e8:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1a3ea:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1a3ee:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1a3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a3f2:	b18b      	cbz	r3, 1a418 <net_buf_unref+0x6c>
			pool->destroy(buf);
   1a3f4:	4620      	mov	r0, r4
   1a3f6:	4798      	blx	r3
	while (buf) {
   1a3f8:	2d00      	cmp	r5, #0
   1a3fa:	d1df      	bne.n	1a3bc <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1a3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1a400:	4909      	ldr	r1, [pc, #36]	; (1a428 <net_buf_unref+0x7c>)
   1a402:	480a      	ldr	r0, [pc, #40]	; (1a42c <net_buf_unref+0x80>)
   1a404:	f240 13eb 	movw	r3, #491	; 0x1eb
   1a408:	4a09      	ldr	r2, [pc, #36]	; (1a430 <net_buf_unref+0x84>)
   1a40a:	f00d f8f2 	bl	275f2 <assert_print>
   1a40e:	f240 11eb 	movw	r1, #491	; 0x1eb
   1a412:	4807      	ldr	r0, [pc, #28]	; (1a430 <net_buf_unref+0x84>)
   1a414:	f00d f8e6 	bl	275e4 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1a418:	4621      	mov	r1, r4
   1a41a:	fb00 6008 	mla	r0, r0, r8, r6
   1a41e:	f011 fc90 	bl	2bd42 <k_queue_prepend>
}
   1a422:	e7e9      	b.n	1a3f8 <net_buf_unref+0x4c>
   1a424:	20008c94 	.word	0x20008c94
   1a428:	000323e2 	.word	0x000323e2
   1a42c:	0002e715 	.word	0x0002e715
   1a430:	000322fe 	.word	0x000322fe

0001a434 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1a434:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1a436:	b958      	cbnz	r0, 1a450 <net_buf_ref+0x1c>
   1a438:	4907      	ldr	r1, [pc, #28]	; (1a458 <net_buf_ref+0x24>)
   1a43a:	4808      	ldr	r0, [pc, #32]	; (1a45c <net_buf_ref+0x28>)
   1a43c:	f240 231a 	movw	r3, #538	; 0x21a
   1a440:	4a07      	ldr	r2, [pc, #28]	; (1a460 <net_buf_ref+0x2c>)
   1a442:	f00d f8d6 	bl	275f2 <assert_print>
   1a446:	f240 211a 	movw	r1, #538	; 0x21a
   1a44a:	4805      	ldr	r0, [pc, #20]	; (1a460 <net_buf_ref+0x2c>)
   1a44c:	f00d f8ca 	bl	275e4 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1a450:	7a02      	ldrb	r2, [r0, #8]
   1a452:	3201      	adds	r2, #1
   1a454:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1a456:	bd08      	pop	{r3, pc}
   1a458:	000323e2 	.word	0x000323e2
   1a45c:	0002e715 	.word	0x0002e715
   1a460:	000322fe 	.word	0x000322fe

0001a464 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1a464:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1a466:	4603      	mov	r3, r0
   1a468:	b958      	cbnz	r0, 1a482 <net_buf_frag_last+0x1e>
   1a46a:	4908      	ldr	r1, [pc, #32]	; (1a48c <net_buf_frag_last+0x28>)
   1a46c:	4808      	ldr	r0, [pc, #32]	; (1a490 <net_buf_frag_last+0x2c>)
   1a46e:	f240 2357 	movw	r3, #599	; 0x257
   1a472:	4a08      	ldr	r2, [pc, #32]	; (1a494 <net_buf_frag_last+0x30>)
   1a474:	f00d f8bd 	bl	275f2 <assert_print>
   1a478:	f240 2157 	movw	r1, #599	; 0x257
   1a47c:	4805      	ldr	r0, [pc, #20]	; (1a494 <net_buf_frag_last+0x30>)
   1a47e:	f00d f8b1 	bl	275e4 <assert_post_action>

	while (buf->frags) {
   1a482:	4618      	mov	r0, r3
   1a484:	685b      	ldr	r3, [r3, #4]
   1a486:	2b00      	cmp	r3, #0
   1a488:	d1fb      	bne.n	1a482 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1a48a:	bd08      	pop	{r3, pc}
   1a48c:	000323e2 	.word	0x000323e2
   1a490:	0002e715 	.word	0x0002e715
   1a494:	000322fe 	.word	0x000322fe

0001a498 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1a498:	b570      	push	{r4, r5, r6, lr}
   1a49a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1a49c:	4604      	mov	r4, r0
   1a49e:	b958      	cbnz	r0, 1a4b8 <net_buf_frag_insert+0x20>
   1a4a0:	490f      	ldr	r1, [pc, #60]	; (1a4e0 <net_buf_frag_insert+0x48>)
   1a4a2:	f240 2362 	movw	r3, #610	; 0x262
   1a4a6:	4a0f      	ldr	r2, [pc, #60]	; (1a4e4 <net_buf_frag_insert+0x4c>)
   1a4a8:	480f      	ldr	r0, [pc, #60]	; (1a4e8 <net_buf_frag_insert+0x50>)
   1a4aa:	f00d f8a2 	bl	275f2 <assert_print>
   1a4ae:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1a4b2:	480c      	ldr	r0, [pc, #48]	; (1a4e4 <net_buf_frag_insert+0x4c>)
   1a4b4:	f00d f896 	bl	275e4 <assert_post_action>
   1a4b8:	b949      	cbnz	r1, 1a4ce <net_buf_frag_insert+0x36>
   1a4ba:	490c      	ldr	r1, [pc, #48]	; (1a4ec <net_buf_frag_insert+0x54>)
   1a4bc:	f240 2363 	movw	r3, #611	; 0x263
   1a4c0:	4a08      	ldr	r2, [pc, #32]	; (1a4e4 <net_buf_frag_insert+0x4c>)
   1a4c2:	4809      	ldr	r0, [pc, #36]	; (1a4e8 <net_buf_frag_insert+0x50>)
   1a4c4:	f00d f895 	bl	275f2 <assert_print>
   1a4c8:	f240 2163 	movw	r1, #611	; 0x263
   1a4cc:	e7f1      	b.n	1a4b2 <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1a4ce:	6846      	ldr	r6, [r0, #4]
   1a4d0:	b11e      	cbz	r6, 1a4da <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1a4d2:	4608      	mov	r0, r1
   1a4d4:	f7ff ffc6 	bl	1a464 <net_buf_frag_last>
   1a4d8:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1a4da:	6065      	str	r5, [r4, #4]
}
   1a4dc:	bd70      	pop	{r4, r5, r6, pc}
   1a4de:	bf00      	nop
   1a4e0:	0003237a 	.word	0x0003237a
   1a4e4:	000322fe 	.word	0x000322fe
   1a4e8:	0002e715 	.word	0x0002e715
   1a4ec:	00032381 	.word	0x00032381

0001a4f0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1a4f0:	b538      	push	{r3, r4, r5, lr}
   1a4f2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1a4f4:	460c      	mov	r4, r1
   1a4f6:	b959      	cbnz	r1, 1a510 <net_buf_frag_add+0x20>
   1a4f8:	490c      	ldr	r1, [pc, #48]	; (1a52c <net_buf_frag_add+0x3c>)
   1a4fa:	480d      	ldr	r0, [pc, #52]	; (1a530 <net_buf_frag_add+0x40>)
   1a4fc:	f240 236e 	movw	r3, #622	; 0x26e
   1a500:	4a0c      	ldr	r2, [pc, #48]	; (1a534 <net_buf_frag_add+0x44>)
   1a502:	f00d f876 	bl	275f2 <assert_print>
   1a506:	f240 216e 	movw	r1, #622	; 0x26e
   1a50a:	480a      	ldr	r0, [pc, #40]	; (1a534 <net_buf_frag_add+0x44>)
   1a50c:	f00d f86a 	bl	275e4 <assert_post_action>

	if (!head) {
   1a510:	b920      	cbnz	r0, 1a51c <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1a512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1a516:	4608      	mov	r0, r1
   1a518:	f7ff bf8c 	b.w	1a434 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1a51c:	f7ff ffa2 	bl	1a464 <net_buf_frag_last>
   1a520:	4621      	mov	r1, r4
   1a522:	f7ff ffb9 	bl	1a498 <net_buf_frag_insert>
}
   1a526:	4628      	mov	r0, r5
   1a528:	bd38      	pop	{r3, r4, r5, pc}
   1a52a:	bf00      	nop
   1a52c:	00032381 	.word	0x00032381
   1a530:	0002e715 	.word	0x0002e715
   1a534:	000322fe 	.word	0x000322fe

0001a538 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1a538:	b508      	push	{r3, lr}
   1a53a:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1a53c:	6800      	ldr	r0, [r0, #0]
   1a53e:	689a      	ldr	r2, [r3, #8]
   1a540:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1a542:	4291      	cmp	r1, r2
   1a544:	d90b      	bls.n	1a55e <net_buf_simple_push+0x26>
   1a546:	4909      	ldr	r1, [pc, #36]	; (1a56c <net_buf_simple_push+0x34>)
   1a548:	4809      	ldr	r0, [pc, #36]	; (1a570 <net_buf_simple_push+0x38>)
   1a54a:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1a54e:	4a09      	ldr	r2, [pc, #36]	; (1a574 <net_buf_simple_push+0x3c>)
   1a550:	f00d f84f 	bl	275f2 <assert_print>
   1a554:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1a558:	4806      	ldr	r0, [pc, #24]	; (1a574 <net_buf_simple_push+0x3c>)
   1a55a:	f00d f843 	bl	275e4 <assert_post_action>
	buf->len += len;
   1a55e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1a560:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1a562:	4411      	add	r1, r2
	buf->data -= len;
   1a564:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1a566:	8099      	strh	r1, [r3, #4]
}
   1a568:	bd08      	pop	{r3, pc}
   1a56a:	bf00      	nop
   1a56c:	00032396 	.word	0x00032396
   1a570:	0002e715 	.word	0x0002e715
   1a574:	000322fe 	.word	0x000322fe

0001a578 <net_buf_simple_pull>:
{
   1a578:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1a57a:	8882      	ldrh	r2, [r0, #4]
{
   1a57c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1a57e:	428a      	cmp	r2, r1
   1a580:	d20b      	bcs.n	1a59a <net_buf_simple_pull+0x22>
   1a582:	4909      	ldr	r1, [pc, #36]	; (1a5a8 <net_buf_simple_pull+0x30>)
   1a584:	4809      	ldr	r0, [pc, #36]	; (1a5ac <net_buf_simple_pull+0x34>)
   1a586:	f240 4352 	movw	r3, #1106	; 0x452
   1a58a:	4a09      	ldr	r2, [pc, #36]	; (1a5b0 <net_buf_simple_pull+0x38>)
   1a58c:	f00d f831 	bl	275f2 <assert_print>
   1a590:	f240 4152 	movw	r1, #1106	; 0x452
   1a594:	4806      	ldr	r0, [pc, #24]	; (1a5b0 <net_buf_simple_pull+0x38>)
   1a596:	f00d f825 	bl	275e4 <assert_post_action>
	buf->len -= len;
   1a59a:	1a52      	subs	r2, r2, r1
   1a59c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1a59e:	6800      	ldr	r0, [r0, #0]
   1a5a0:	4408      	add	r0, r1
   1a5a2:	6018      	str	r0, [r3, #0]
}
   1a5a4:	bd08      	pop	{r3, pc}
   1a5a6:	bf00      	nop
   1a5a8:	00032386 	.word	0x00032386
   1a5ac:	0002e715 	.word	0x0002e715
   1a5b0:	000322fe 	.word	0x000322fe

0001a5b4 <net_buf_simple_pull_mem>:
{
   1a5b4:	b508      	push	{r3, lr}
   1a5b6:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1a5b8:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1a5ba:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1a5bc:	428a      	cmp	r2, r1
   1a5be:	d20b      	bcs.n	1a5d8 <net_buf_simple_pull_mem+0x24>
   1a5c0:	4908      	ldr	r1, [pc, #32]	; (1a5e4 <net_buf_simple_pull_mem+0x30>)
   1a5c2:	4809      	ldr	r0, [pc, #36]	; (1a5e8 <net_buf_simple_pull_mem+0x34>)
   1a5c4:	f240 435e 	movw	r3, #1118	; 0x45e
   1a5c8:	4a08      	ldr	r2, [pc, #32]	; (1a5ec <net_buf_simple_pull_mem+0x38>)
   1a5ca:	f00d f812 	bl	275f2 <assert_print>
   1a5ce:	f240 415e 	movw	r1, #1118	; 0x45e
   1a5d2:	4806      	ldr	r0, [pc, #24]	; (1a5ec <net_buf_simple_pull_mem+0x38>)
   1a5d4:	f00d f806 	bl	275e4 <assert_post_action>
	buf->len -= len;
   1a5d8:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1a5da:	4401      	add	r1, r0
	buf->len -= len;
   1a5dc:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1a5de:	6019      	str	r1, [r3, #0]
}
   1a5e0:	bd08      	pop	{r3, pc}
   1a5e2:	bf00      	nop
   1a5e4:	00032386 	.word	0x00032386
   1a5e8:	0002e715 	.word	0x0002e715
   1a5ec:	000322fe 	.word	0x000322fe

0001a5f0 <net_buf_simple_add>:
{
   1a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1a5f2:	8885      	ldrh	r5, [r0, #4]
   1a5f4:	6803      	ldr	r3, [r0, #0]
   1a5f6:	460e      	mov	r6, r1
   1a5f8:	4604      	mov	r4, r0
   1a5fa:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1a5fc:	f00f ffdf 	bl	2a5be <net_buf_simple_tailroom>
   1a600:	42b0      	cmp	r0, r6
   1a602:	d20b      	bcs.n	1a61c <net_buf_simple_add+0x2c>
   1a604:	4907      	ldr	r1, [pc, #28]	; (1a624 <net_buf_simple_add+0x34>)
   1a606:	4808      	ldr	r0, [pc, #32]	; (1a628 <net_buf_simple_add+0x38>)
   1a608:	f240 3303 	movw	r3, #771	; 0x303
   1a60c:	4a07      	ldr	r2, [pc, #28]	; (1a62c <net_buf_simple_add+0x3c>)
   1a60e:	f00c fff0 	bl	275f2 <assert_print>
   1a612:	f240 3103 	movw	r1, #771	; 0x303
   1a616:	4805      	ldr	r0, [pc, #20]	; (1a62c <net_buf_simple_add+0x3c>)
   1a618:	f00c ffe4 	bl	275e4 <assert_post_action>
	buf->len += len;
   1a61c:	4435      	add	r5, r6
   1a61e:	80a5      	strh	r5, [r4, #4]
}
   1a620:	4638      	mov	r0, r7
   1a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a624:	000323ba 	.word	0x000323ba
   1a628:	0002e715 	.word	0x0002e715
   1a62c:	000322fe 	.word	0x000322fe

0001a630 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1a630:	b508      	push	{r3, lr}
   1a632:	4804      	ldr	r0, [pc, #16]	; (1a644 <xoshiro128_initialize+0x14>)
   1a634:	f011 fb01 	bl	2bc3a <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1a638:	2800      	cmp	r0, #0
}
   1a63a:	bf0c      	ite	eq
   1a63c:	f06f 0012 	mvneq.w	r0, #18
   1a640:	2000      	movne	r0, #0
   1a642:	bd08      	pop	{r3, pc}
   1a644:	0002d0b4 	.word	0x0002d0b4

0001a648 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   1a648:	2813      	cmp	r0, #19
   1a64a:	d80e      	bhi.n	1a66a <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   1a64c:	4a08      	ldr	r2, [pc, #32]	; (1a670 <adc_gain_invert+0x28>)
   1a64e:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   1a652:	b153      	cbz	r3, 1a66a <adc_gain_invert+0x22>
   1a654:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   1a658:	7852      	ldrb	r2, [r2, #1]
   1a65a:	b132      	cbz	r2, 1a66a <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   1a65c:	6808      	ldr	r0, [r1, #0]
   1a65e:	4343      	muls	r3, r0
   1a660:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   1a664:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   1a666:	600b      	str	r3, [r1, #0]
			rv = 0;
   1a668:	4770      	bx	lr
	int rv = -EINVAL;
   1a66a:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   1a66e:	4770      	bx	lr
   1a670:	000323e6 	.word	0x000323e6

0001a674 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1a674:	2201      	movs	r2, #1
   1a676:	4b05      	ldr	r3, [pc, #20]	; (1a68c <adc_context_start_sampling+0x18>)
   1a678:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1a67c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1a680:	b109      	cbz	r1, 1a686 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a682:	60da      	str	r2, [r3, #12]
}
   1a684:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a686:	601a      	str	r2, [r3, #0]
   1a688:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1a68a:	4770      	bx	lr
   1a68c:	4000e000 	.word	0x4000e000

0001a690 <adc_nrfx_channel_setup>:
{
   1a690:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1a692:	790d      	ldrb	r5, [r1, #4]
   1a694:	f005 041f 	and.w	r4, r5, #31
	if (channel_id >= SAADC_CH_NUM) {
   1a698:	2c07      	cmp	r4, #7
   1a69a:	d825      	bhi.n	1a6e8 <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->gain) {
   1a69c:	780a      	ldrb	r2, [r1, #0]
   1a69e:	2a0b      	cmp	r2, #11
   1a6a0:	d818      	bhi.n	1a6d4 <adc_nrfx_channel_setup+0x44>
   1a6a2:	e8df f002 	tbb	[pc, r2]
   1a6a6:	0707      	.short	0x0707
   1a6a8:	06170707 	.word	0x06170707
   1a6ac:	13111717 	.word	0x13111717
   1a6b0:	1517      	.short	0x1517
		config.gain = NRF_SAADC_GAIN1_2;
   1a6b2:	2204      	movs	r2, #4
	switch (channel_cfg->reference) {
   1a6b4:	784b      	ldrb	r3, [r1, #1]
   1a6b6:	2b03      	cmp	r3, #3
   1a6b8:	d01a      	beq.n	1a6f0 <adc_nrfx_channel_setup+0x60>
   1a6ba:	2b04      	cmp	r3, #4
   1a6bc:	f04f 0300 	mov.w	r3, #0
   1a6c0:	d017      	beq.n	1a6f2 <adc_nrfx_channel_setup+0x62>
		LOG_ERR("Selected ADC reference is not valid");
   1a6c2:	4a30      	ldr	r2, [pc, #192]	; (1a784 <adc_nrfx_channel_setup+0xf4>)
   1a6c4:	9202      	str	r2, [sp, #8]
   1a6c6:	e008      	b.n	1a6da <adc_nrfx_channel_setup+0x4a>
		config.gain = NRF_SAADC_GAIN1;
   1a6c8:	2205      	movs	r2, #5
		break;
   1a6ca:	e7f3      	b.n	1a6b4 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   1a6cc:	2206      	movs	r2, #6
		break;
   1a6ce:	e7f1      	b.n	1a6b4 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   1a6d0:	2207      	movs	r2, #7
		break;
   1a6d2:	e7ef      	b.n	1a6b4 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   1a6d4:	4b2c      	ldr	r3, [pc, #176]	; (1a788 <adc_nrfx_channel_setup+0xf8>)
   1a6d6:	9302      	str	r3, [sp, #8]
   1a6d8:	2300      	movs	r3, #0
   1a6da:	2201      	movs	r2, #1
   1a6dc:	4618      	mov	r0, r3
   1a6de:	e9cd 3300 	strd	r3, r3, [sp]
   1a6e2:	492a      	ldr	r1, [pc, #168]	; (1a78c <adc_nrfx_channel_setup+0xfc>)
   1a6e4:	f00f ff86 	bl	2a5f4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a6e8:	f06f 0015 	mvn.w	r0, #21
}
   1a6ec:	b004      	add	sp, #16
   1a6ee:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   1a6f0:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
   1a6f2:	f244 060a 	movw	r6, #16394	; 0x400a
   1a6f6:	8848      	ldrh	r0, [r1, #2]
   1a6f8:	42b0      	cmp	r0, r6
   1a6fa:	d03d      	beq.n	1a778 <adc_nrfx_channel_setup+0xe8>
   1a6fc:	d80a      	bhi.n	1a714 <adc_nrfx_channel_setup+0x84>
   1a6fe:	f244 0603 	movw	r6, #16387	; 0x4003
   1a702:	42b0      	cmp	r0, r6
   1a704:	d014      	beq.n	1a730 <adc_nrfx_channel_setup+0xa0>
   1a706:	f244 0605 	movw	r6, #16389	; 0x4005
   1a70a:	42b0      	cmp	r0, r6
   1a70c:	d032      	beq.n	1a774 <adc_nrfx_channel_setup+0xe4>
   1a70e:	b398      	cbz	r0, 1a778 <adc_nrfx_channel_setup+0xe8>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1a710:	4b1f      	ldr	r3, [pc, #124]	; (1a790 <adc_nrfx_channel_setup+0x100>)
   1a712:	e7e0      	b.n	1a6d6 <adc_nrfx_channel_setup+0x46>
	switch (channel_cfg->acquisition_time) {
   1a714:	f244 0614 	movw	r6, #16404	; 0x4014
   1a718:	42b0      	cmp	r0, r6
   1a71a:	d02f      	beq.n	1a77c <adc_nrfx_channel_setup+0xec>
   1a71c:	f244 0628 	movw	r6, #16424	; 0x4028
   1a720:	42b0      	cmp	r0, r6
   1a722:	d02d      	beq.n	1a780 <adc_nrfx_channel_setup+0xf0>
   1a724:	f244 060f 	movw	r6, #16399	; 0x400f
   1a728:	42b0      	cmp	r0, r6
   1a72a:	d1f1      	bne.n	1a710 <adc_nrfx_channel_setup+0x80>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1a72c:	2003      	movs	r0, #3
   1a72e:	e000      	b.n	1a732 <adc_nrfx_channel_setup+0xa2>
	nrf_saadc_channel_config_t config = {
   1a730:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1a732:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1a736:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1a738:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
   1a73c:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1a740:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].PSELP = pselp;
   1a744:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   1a746:	0123      	lsls	r3, r4, #4
   1a748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a74c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1a750:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1a754:	0123      	lsls	r3, r4, #4
   1a756:	798a      	ldrb	r2, [r1, #6]
   1a758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a75c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1a760:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1a764:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1a768:	4b0a      	ldr	r3, [pc, #40]	; (1a794 <adc_nrfx_channel_setup+0x104>)
   1a76a:	794a      	ldrb	r2, [r1, #5]
   1a76c:	4423      	add	r3, r4
   1a76e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   1a772:	e7bb      	b.n	1a6ec <adc_nrfx_channel_setup+0x5c>
	switch (channel_cfg->acquisition_time) {
   1a774:	2001      	movs	r0, #1
   1a776:	e7dc      	b.n	1a732 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1a778:	2002      	movs	r0, #2
   1a77a:	e7da      	b.n	1a732 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1a77c:	2004      	movs	r0, #4
   1a77e:	e7d8      	b.n	1a732 <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1a780:	2005      	movs	r0, #5
   1a782:	e7d6      	b.n	1a732 <adc_nrfx_channel_setup+0xa2>
   1a784:	0003242d 	.word	0x0003242d
   1a788:	0003240e 	.word	0x0003240e
   1a78c:	0002d60c 	.word	0x0002d60c
   1a790:	00032451 	.word	0x00032451
   1a794:	20008168 	.word	0x20008168

0001a798 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   1a798:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a79a:	460c      	mov	r4, r1
   1a79c:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
   1a79e:	f04f 33ff 	mov.w	r3, #4294967295
   1a7a2:	f04f 32ff 	mov.w	r2, #4294967295
   1a7a6:	486d      	ldr	r0, [pc, #436]	; (1a95c <adc_nrfx_read+0x1c4>)
   1a7a8:	f006 fba2 	bl	20ef0 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   1a7ac:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   1a7ae:	1e73      	subs	r3, r6, #1
   1a7b0:	2bfe      	cmp	r3, #254	; 0xfe
   1a7b2:	f04f 0300 	mov.w	r3, #0
   1a7b6:	d909      	bls.n	1a7cc <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
   1a7b8:	4a69      	ldr	r2, [pc, #420]	; (1a960 <adc_nrfx_read+0x1c8>)
   1a7ba:	9202      	str	r2, [sp, #8]
		LOG_ERR(
   1a7bc:	2201      	movs	r2, #1
   1a7be:	4618      	mov	r0, r3
   1a7c0:	e9cd 3300 	strd	r3, r3, [sp]
   1a7c4:	4967      	ldr	r1, [pc, #412]	; (1a964 <adc_nrfx_read+0x1cc>)
   1a7c6:	f00f ff15 	bl	2a5f4 <z_log_msg_runtime_create.constprop.0>
	if (error) {
   1a7ca:	e014      	b.n	1a7f6 <adc_nrfx_read+0x5e>
   1a7cc:	461a      	mov	r2, r3
	active_channels = 0U;
   1a7ce:	4618      	mov	r0, r3
    p_reg->CH[channel].PSELP = pselp;
   1a7d0:	4d65      	ldr	r5, [pc, #404]	; (1a968 <adc_nrfx_read+0x1d0>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1a7d2:	4f66      	ldr	r7, [pc, #408]	; (1a96c <adc_nrfx_read+0x1d4>)
		if (selected_channels & BIT(channel_id)) {
   1a7d4:	fa26 f302 	lsr.w	r3, r6, r2
   1a7d8:	f013 0301 	ands.w	r3, r3, #1
   1a7dc:	d039      	beq.n	1a852 <adc_nrfx_read+0xba>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1a7de:	5cbb      	ldrb	r3, [r7, r2]
   1a7e0:	b98b      	cbnz	r3, 1a806 <adc_nrfx_read+0x6e>
				LOG_ERR("Channel %u not configured",
   1a7e2:	9203      	str	r2, [sp, #12]
   1a7e4:	4a62      	ldr	r2, [pc, #392]	; (1a970 <adc_nrfx_read+0x1d8>)
   1a7e6:	9202      	str	r2, [sp, #8]
   1a7e8:	e9cd 3300 	strd	r3, r3, [sp]
   1a7ec:	2201      	movs	r2, #1
   1a7ee:	4618      	mov	r0, r3
   1a7f0:	495c      	ldr	r1, [pc, #368]	; (1a964 <adc_nrfx_read+0x1cc>)
   1a7f2:	f00f feff 	bl	2a5f4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a7f6:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   1a7fa:	4858      	ldr	r0, [pc, #352]	; (1a95c <adc_nrfx_read+0x1c4>)
   1a7fc:	f006 fb34 	bl	20e68 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1a800:	4620      	mov	r0, r4
   1a802:	b007      	add	sp, #28
   1a804:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1a806:	f894 c011 	ldrb.w	ip, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1a80a:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
   1a80e:	f1bc 0c00 	subs.w	ip, ip, #0
   1a812:	bf18      	it	ne
   1a814:	f04f 0c01 	movne.w	ip, #1
   1a818:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
			++active_channels;
   1a81c:	3001      	adds	r0, #1
   1a81e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   1a822:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   1a826:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1a82a:	f102 0151 	add.w	r1, r2, #81	; 0x51
   1a82e:	0109      	lsls	r1, r1, #4
   1a830:	506b      	str	r3, [r5, r1]
   1a832:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
   1a834:	3201      	adds	r2, #1
   1a836:	2a08      	cmp	r2, #8
   1a838:	d1cc      	bne.n	1a7d4 <adc_nrfx_read+0x3c>
	error = set_resolution(sequence);
   1a83a:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
   1a83c:	2300      	movs	r3, #0
   1a83e:	f1a2 0108 	sub.w	r1, r2, #8
   1a842:	2906      	cmp	r1, #6
   1a844:	d818      	bhi.n	1a878 <adc_nrfx_read+0xe0>
   1a846:	e8df f001 	tbb	[pc, r1]
   1a84a:	171e      	.short	0x171e
   1a84c:	17091720 	.word	0x17091720
   1a850:	15          	.byte	0x15
   1a851:	00          	.byte	0x00
   1a852:	f102 0151 	add.w	r1, r2, #81	; 0x51
   1a856:	0109      	lsls	r1, r1, #4
   1a858:	506b      	str	r3, [r5, r1]
}
   1a85a:	e7eb      	b.n	1a834 <adc_nrfx_read+0x9c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1a85c:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   1a85e:	4a42      	ldr	r2, [pc, #264]	; (1a968 <adc_nrfx_read+0x1d0>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1a860:	2801      	cmp	r0, #1
   1a862:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1a866:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1a868:	d911      	bls.n	1a88e <adc_nrfx_read+0xf6>
   1a86a:	b193      	cbz	r3, 1a892 <adc_nrfx_read+0xfa>
		LOG_ERR(
   1a86c:	4b41      	ldr	r3, [pc, #260]	; (1a974 <adc_nrfx_read+0x1dc>)
   1a86e:	9302      	str	r3, [sp, #8]
   1a870:	2300      	movs	r3, #0
   1a872:	e7a3      	b.n	1a7bc <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1a874:	2303      	movs	r3, #3
		break;
   1a876:	e7f2      	b.n	1a85e <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   1a878:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
   1a87a:	4a3f      	ldr	r2, [pc, #252]	; (1a978 <adc_nrfx_read+0x1e0>)
   1a87c:	9300      	str	r3, [sp, #0]
   1a87e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1a882:	2300      	movs	r3, #0
   1a884:	e7b2      	b.n	1a7ec <adc_nrfx_read+0x54>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1a886:	2300      	movs	r3, #0
   1a888:	e7e9      	b.n	1a85e <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   1a88a:	2301      	movs	r3, #1
   1a88c:	e7e7      	b.n	1a85e <adc_nrfx_read+0xc6>
	switch (sequence->oversampling) {
   1a88e:	2b08      	cmp	r3, #8
   1a890:	d816      	bhi.n	1a8c0 <adc_nrfx_read+0x128>
    p_reg->OVERSAMPLE = oversample;
   1a892:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
   1a896:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1a898:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
   1a89a:	b9b2      	cbnz	r2, 1a8ca <adc_nrfx_read+0x132>
	if (sequence->buffer_size < needed_buffer_size) {
   1a89c:	68e2      	ldr	r2, [r4, #12]
   1a89e:	429a      	cmp	r2, r3
   1a8a0:	d217      	bcs.n	1a8d2 <adc_nrfx_read+0x13a>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1a8a2:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1a8a6:	4b35      	ldr	r3, [pc, #212]	; (1a97c <adc_nrfx_read+0x1e4>)
   1a8a8:	2201      	movs	r2, #1
   1a8aa:	9302      	str	r3, [sp, #8]
   1a8ac:	2300      	movs	r3, #0
   1a8ae:	492d      	ldr	r1, [pc, #180]	; (1a964 <adc_nrfx_read+0x1cc>)
   1a8b0:	4618      	mov	r0, r3
   1a8b2:	e9cd 3300 	strd	r3, r3, [sp]
   1a8b6:	f00f fe9d 	bl	2a5f4 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   1a8ba:	f06f 040b 	mvn.w	r4, #11
   1a8be:	e79c      	b.n	1a7fa <adc_nrfx_read+0x62>
	switch (sequence->oversampling) {
   1a8c0:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
   1a8c2:	4b2f      	ldr	r3, [pc, #188]	; (1a980 <adc_nrfx_read+0x1e8>)
   1a8c4:	9302      	str	r3, [sp, #8]
   1a8c6:	2300      	movs	r3, #0
   1a8c8:	e78e      	b.n	1a7e8 <adc_nrfx_read+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1a8ca:	8992      	ldrh	r2, [r2, #12]
   1a8cc:	fb02 3303 	mla	r3, r2, r3, r3
   1a8d0:	e7e4      	b.n	1a89c <adc_nrfx_read+0x104>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1a8d2:	4626      	mov	r6, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1a8d4:	68a2      	ldr	r2, [r4, #8]
   1a8d6:	4b24      	ldr	r3, [pc, #144]	; (1a968 <adc_nrfx_read+0x1d0>)
   1a8d8:	4f2a      	ldr	r7, [pc, #168]	; (1a984 <adc_nrfx_read+0x1ec>)
   1a8da:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
   1a8de:	f107 0574 	add.w	r5, r7, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   1a8e2:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   1a8e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1a8e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1a8ea:	6833      	ldr	r3, [r6, #0]
   1a8ec:	463e      	mov	r6, r7
   1a8ee:	602b      	str	r3, [r5, #0]
	ctx->status = 0;
   1a8f0:	2500      	movs	r5, #0
   1a8f2:	673d      	str	r5, [r7, #112]	; 0x70

	if (sequence->options) {
   1a8f4:	6823      	ldr	r3, [r4, #0]
   1a8f6:	b36b      	cbz	r3, 1a954 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
   1a8f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1a8fa:	f107 0488 	add.w	r4, r7, #136	; 0x88
   1a8fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1a902:	677c      	str	r4, [r7, #116]	; 0x74
		ctx->sampling_index = 0U;
   1a904:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   1a908:	b320      	cbz	r0, 1a954 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a90a:	e8d6 3fef 	ldaex	r3, [r6]
   1a90e:	e8c6 5fe2 	stlex	r2, r5, [r6]
   1a912:	2a00      	cmp	r2, #0
   1a914:	d1f9      	bne.n	1a90a <adc_nrfx_read+0x172>
   1a916:	491c      	ldr	r1, [pc, #112]	; (1a988 <adc_nrfx_read+0x1f0>)
   1a918:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1a91c:	460e      	mov	r6, r1
   1a91e:	4629      	mov	r1, r5
   1a920:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
   1a924:	2300      	movs	r3, #0
   1a926:	fbe4 6100 	umlal	r6, r1, r4, r0
   1a92a:	4a18      	ldr	r2, [pc, #96]	; (1a98c <adc_nrfx_read+0x1f4>)
   1a92c:	4630      	mov	r0, r6
   1a92e:	f7ee fadf 	bl	8ef0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1a932:	2200      	movs	r2, #0
   1a934:	e9cd 0100 	strd	r0, r1, [sp]
   1a938:	2300      	movs	r3, #0
   1a93a:	f107 0008 	add.w	r0, r7, #8
   1a93e:	f008 fea5 	bl	2368c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   1a942:	f04f 32ff 	mov.w	r2, #4294967295
   1a946:	f04f 33ff 	mov.w	r3, #4294967295
   1a94a:	4811      	ldr	r0, [pc, #68]	; (1a990 <adc_nrfx_read+0x1f8>)
   1a94c:	f006 fad0 	bl	20ef0 <z_impl_k_sem_take>
	return ctx->status;
   1a950:	6f3c      	ldr	r4, [r7, #112]	; 0x70
	return error;
   1a952:	e752      	b.n	1a7fa <adc_nrfx_read+0x62>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1a954:	480b      	ldr	r0, [pc, #44]	; (1a984 <adc_nrfx_read+0x1ec>)
   1a956:	f7ff fe8d 	bl	1a674 <adc_context_start_sampling>
   1a95a:	e7f2      	b.n	1a942 <adc_nrfx_read+0x1aa>
   1a95c:	200081a8 	.word	0x200081a8
   1a960:	0003247c 	.word	0x0003247c
   1a964:	0002d60c 	.word	0x0002d60c
   1a968:	4000e000 	.word	0x4000e000
   1a96c:	20008208 	.word	0x20008208
   1a970:	0003249a 	.word	0x0003249a
   1a974:	000324d9 	.word	0x000324d9
   1a978:	000324b4 	.word	0x000324b4
   1a97c:	0003252e 	.word	0x0003252e
   1a980:	0003250b 	.word	0x0003250b
   1a984:	20008168 	.word	0x20008168
   1a988:	000f423f 	.word	0x000f423f
   1a98c:	000f4240 	.word	0x000f4240
   1a990:	200081c0 	.word	0x200081c0

0001a994 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1a994:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a996:	2400      	movs	r4, #0
   1a998:	4b0d      	ldr	r3, [pc, #52]	; (1a9d0 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1a99a:	200e      	movs	r0, #14
   1a99c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1a9a0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1a9a4:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1a9a8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1a9ac:	2212      	movs	r2, #18
   1a9ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1a9b2:	f7f6 fb9d 	bl	110f0 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1a9b6:	4622      	mov	r2, r4
   1a9b8:	2101      	movs	r1, #1
   1a9ba:	200e      	movs	r0, #14
   1a9bc:	f7f6 fbc8 	bl	11150 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1a9c0:	4804      	ldr	r0, [pc, #16]	; (1a9d4 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1a9c2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a9c4:	b913      	cbnz	r3, 1a9cc <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   1a9c6:	3040      	adds	r0, #64	; 0x40
   1a9c8:	f006 fa4e 	bl	20e68 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1a9cc:	2000      	movs	r0, #0
   1a9ce:	bd10      	pop	{r4, pc}
   1a9d0:	4000e000 	.word	0x4000e000
   1a9d4:	20008168 	.word	0x20008168

0001a9d8 <saadc_irq_handler>:
{
   1a9d8:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a9da:	4b2d      	ldr	r3, [pc, #180]	; (1aa90 <saadc_irq_handler+0xb8>)
   1a9dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1a9e0:	2a00      	cmp	r2, #0
   1a9e2:	d048      	beq.n	1aa76 <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a9e4:	2200      	movs	r2, #0
   1a9e6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1a9ea:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a9ee:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1a9f0:	4c28      	ldr	r4, [pc, #160]	; (1aa94 <saadc_irq_handler+0xbc>)
   1a9f2:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1a9f4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a9f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1a9fa:	4625      	mov	r5, r4
   1a9fc:	b3b3      	cbz	r3, 1aa6c <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   1a9fe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   1aa02:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   1aa06:	b133      	cbz	r3, 1aa16 <saadc_irq_handler+0x3e>
			action = callback(dev,
   1aa08:	f104 0174 	add.w	r1, r4, #116	; 0x74
   1aa0c:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1aa0e:	2801      	cmp	r0, #1
   1aa10:	d014      	beq.n	1aa3c <saadc_irq_handler+0x64>
   1aa12:	2802      	cmp	r0, #2
   1aa14:	d024      	beq.n	1aa60 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1aa16:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   1aa1a:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   1aa1e:	429a      	cmp	r2, r3
   1aa20:	d91e      	bls.n	1aa60 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1aa22:	3301      	adds	r3, #1
   1aa24:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1aa28:	4b19      	ldr	r3, [pc, #100]	; (1aa90 <saadc_irq_handler+0xb8>)
   1aa2a:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1aa2e:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1aa32:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1aa34:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1aa38:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1aa3c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1aa40:	b923      	cbnz	r3, 1aa4c <saadc_irq_handler+0x74>
}
   1aa42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   1aa46:	4813      	ldr	r0, [pc, #76]	; (1aa94 <saadc_irq_handler+0xbc>)
   1aa48:	f7ff be14 	b.w	1a674 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1aa4c:	e8d5 3fef 	ldaex	r3, [r5]
   1aa50:	1e5a      	subs	r2, r3, #1
   1aa52:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1aa56:	2900      	cmp	r1, #0
   1aa58:	d1f8      	bne.n	1aa4c <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1aa5a:	2b01      	cmp	r3, #1
   1aa5c:	dcf1      	bgt.n	1aa42 <saadc_irq_handler+0x6a>
   1aa5e:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1aa60:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1aa64:	b113      	cbz	r3, 1aa6c <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   1aa66:	480c      	ldr	r0, [pc, #48]	; (1aa98 <saadc_irq_handler+0xc0>)
   1aa68:	f011 fa52 	bl	2bf10 <z_impl_k_timer_stop>
   1aa6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1aa70:	480a      	ldr	r0, [pc, #40]	; (1aa9c <saadc_irq_handler+0xc4>)
   1aa72:	f006 b9f9 	b.w	20e68 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aa76:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1aa7a:	2900      	cmp	r1, #0
   1aa7c:	d0ef      	beq.n	1aa5e <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aa7e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1aa82:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa86:	2201      	movs	r2, #1
   1aa88:	609a      	str	r2, [r3, #8]
   1aa8a:	601a      	str	r2, [r3, #0]
   1aa8c:	605a      	str	r2, [r3, #4]
}
   1aa8e:	e7e6      	b.n	1aa5e <saadc_irq_handler+0x86>
   1aa90:	4000e000 	.word	0x4000e000
   1aa94:	20008168 	.word	0x20008168
   1aa98:	20008170 	.word	0x20008170
   1aa9c:	200081c0 	.word	0x200081c0

0001aaa0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1aaa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1aaa2:	2340      	movs	r3, #64	; 0x40
{
   1aaa4:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1aaa6:	490a      	ldr	r1, [pc, #40]	; (1aad0 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1aaa8:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1aaaa:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1aaac:	1149      	asrs	r1, r1, #5
{
   1aaae:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1aab0:	4623      	mov	r3, r4
   1aab2:	4a08      	ldr	r2, [pc, #32]	; (1aad4 <onoff_start+0x34>)
   1aab4:	4808      	ldr	r0, [pc, #32]	; (1aad8 <onoff_start+0x38>)
   1aab6:	f00f fdd3 	bl	2a660 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1aaba:	1e01      	subs	r1, r0, #0
   1aabc:	da05      	bge.n	1aaca <onoff_start+0x2a>
		notify(mgr, err);
   1aabe:	4628      	mov	r0, r5
   1aac0:	4623      	mov	r3, r4
	}
}
   1aac2:	b003      	add	sp, #12
   1aac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1aac8:	4718      	bx	r3
}
   1aaca:	b003      	add	sp, #12
   1aacc:	bd30      	pop	{r4, r5, pc}
   1aace:	bf00      	nop
   1aad0:	2002f464 	.word	0x2002f464
   1aad4:	0002a6cf 	.word	0x0002a6cf
   1aad8:	0002d054 	.word	0x0002d054

0001aadc <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1aadc:	b2c9      	uxtb	r1, r1
   1aade:	2903      	cmp	r1, #3
{
   1aae0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1aae2:	d909      	bls.n	1aaf8 <get_status+0x1c>
   1aae4:	4909      	ldr	r1, [pc, #36]	; (1ab0c <get_status+0x30>)
   1aae6:	480a      	ldr	r0, [pc, #40]	; (1ab10 <get_status+0x34>)
   1aae8:	237a      	movs	r3, #122	; 0x7a
   1aaea:	4a0a      	ldr	r2, [pc, #40]	; (1ab14 <get_status+0x38>)
   1aaec:	f00c fd81 	bl	275f2 <assert_print>
   1aaf0:	217a      	movs	r1, #122	; 0x7a
   1aaf2:	4808      	ldr	r0, [pc, #32]	; (1ab14 <get_status+0x38>)
   1aaf4:	f00c fd76 	bl	275e4 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1aaf8:	220c      	movs	r2, #12
   1aafa:	6903      	ldr	r3, [r0, #16]
   1aafc:	fb01 3302 	mla	r3, r1, r2, r3
   1ab00:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   1ab04:	f000 0007 	and.w	r0, r0, #7
   1ab08:	bd08      	pop	{r3, pc}
   1ab0a:	bf00      	nop
   1ab0c:	000325a8 	.word	0x000325a8
   1ab10:	0002e715 	.word	0x0002e715
   1ab14:	0003256b 	.word	0x0003256b

0001ab18 <stop>:
{
   1ab18:	b570      	push	{r4, r5, r6, lr}
   1ab1a:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1ab1c:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   1ab1e:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1ab20:	d90b      	bls.n	1ab3a <stop+0x22>
   1ab22:	491a      	ldr	r1, [pc, #104]	; (1ab8c <stop+0x74>)
   1ab24:	481a      	ldr	r0, [pc, #104]	; (1ab90 <stop+0x78>)
   1ab26:	f240 135d 	movw	r3, #349	; 0x15d
   1ab2a:	4a1a      	ldr	r2, [pc, #104]	; (1ab94 <stop+0x7c>)
   1ab2c:	f00c fd61 	bl	275f2 <assert_print>
   1ab30:	f240 115d 	movw	r1, #349	; 0x15d
   1ab34:	4817      	ldr	r0, [pc, #92]	; (1ab94 <stop+0x7c>)
   1ab36:	f00c fd55 	bl	275e4 <assert_post_action>
	__asm__ volatile(
   1ab3a:	f04f 0420 	mov.w	r4, #32
   1ab3e:	f3ef 8511 	mrs	r5, BASEPRI
   1ab42:	f384 8812 	msr	BASEPRI_MAX, r4
   1ab46:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ab4a:	260c      	movs	r6, #12
   1ab4c:	fb06 3401 	mla	r4, r6, r1, r3
   1ab50:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1ab54:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1ab58:	d008      	beq.n	1ab6c <stop+0x54>
   1ab5a:	42a2      	cmp	r2, r4
   1ab5c:	d006      	beq.n	1ab6c <stop+0x54>
	__asm__ volatile(
   1ab5e:	f385 8811 	msr	BASEPRI, r5
   1ab62:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1ab66:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ab6a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1ab6c:	2201      	movs	r2, #1
   1ab6e:	4371      	muls	r1, r6
   1ab70:	440b      	add	r3, r1
   1ab72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1ab76:	f385 8811 	msr	BASEPRI, r5
   1ab7a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1ab7e:	6843      	ldr	r3, [r0, #4]
   1ab80:	440b      	add	r3, r1
   1ab82:	685b      	ldr	r3, [r3, #4]
   1ab84:	4798      	blx	r3
	return 0;
   1ab86:	2000      	movs	r0, #0
   1ab88:	e7ef      	b.n	1ab6a <stop+0x52>
   1ab8a:	bf00      	nop
   1ab8c:	000325a8 	.word	0x000325a8
   1ab90:	0002e715 	.word	0x0002e715
   1ab94:	0003256b 	.word	0x0003256b

0001ab98 <onoff_stop>:
{
   1ab98:	b570      	push	{r4, r5, r6, lr}
   1ab9a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1ab9c:	4906      	ldr	r1, [pc, #24]	; (1abb8 <onoff_stop+0x20>)
{
   1ab9e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1aba0:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1aba2:	1149      	asrs	r1, r1, #5
   1aba4:	2240      	movs	r2, #64	; 0x40
   1aba6:	4805      	ldr	r0, [pc, #20]	; (1abbc <onoff_stop+0x24>)
   1aba8:	f7ff ffb6 	bl	1ab18 <stop>
	notify(mgr, res);
   1abac:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1abae:	4601      	mov	r1, r0
	notify(mgr, res);
   1abb0:	4620      	mov	r0, r4
}
   1abb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1abb6:	4718      	bx	r3
   1abb8:	2002f464 	.word	0x2002f464
   1abbc:	0002d054 	.word	0x0002d054

0001abc0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1abc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1abc4:	2200      	movs	r2, #0
   1abc6:	2101      	movs	r1, #1
{
   1abc8:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1abca:	2005      	movs	r0, #5
   1abcc:	f7f6 fac0 	bl	11150 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1abd0:	4811      	ldr	r0, [pc, #68]	; (1ac18 <clk_init+0x58>)
   1abd2:	f002 ff81 	bl	1dad8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1abd6:	4b11      	ldr	r3, [pc, #68]	; (1ac1c <clk_init+0x5c>)
   1abd8:	4298      	cmp	r0, r3
   1abda:	d119      	bne.n	1ac10 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1abdc:	f002 ffa0 	bl	1db20 <nrfx_clock_enable>
   1abe0:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1abe2:	f04f 080c 	mov.w	r8, #12
   1abe6:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1abe8:	f8df 9034 	ldr.w	r9, [pc, #52]	; 1ac20 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   1abec:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1abee:	4649      	mov	r1, r9
   1abf0:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   1abf4:	f00c fcb8 	bl	27568 <onoff_manager_init>
		if (err < 0) {
   1abf8:	2800      	cmp	r0, #0
   1abfa:	db07      	blt.n	1ac0c <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1abfc:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1ac00:	3401      	adds	r4, #1
   1ac02:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1ac04:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1ac08:	d1f0      	bne.n	1abec <clk_init+0x2c>
	}

	return 0;
   1ac0a:	2000      	movs	r0, #0
}
   1ac0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1ac10:	f06f 0004 	mvn.w	r0, #4
   1ac14:	e7fa      	b.n	1ac0c <clk_init+0x4c>
   1ac16:	bf00      	nop
   1ac18:	0001ac5d 	.word	0x0001ac5d
   1ac1c:	0bad0000 	.word	0x0bad0000
   1ac20:	0002e27c 	.word	0x0002e27c

0001ac24 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1ac24:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1ac26:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1ac28:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1ac2a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1ac2c:	434b      	muls	r3, r1
   1ac2e:	4809      	ldr	r0, [pc, #36]	; (1ac54 <clkstarted_handle.constprop.0+0x30>)
   1ac30:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1ac32:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   1ac34:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1ac38:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1ac3a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1ac3e:	f00f fcfc 	bl	2a63a <set_on_state>
	if (callback) {
   1ac42:	b12d      	cbz	r5, 1ac50 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ac44:	4632      	mov	r2, r6
   1ac46:	462b      	mov	r3, r5
}
   1ac48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ac4c:	4802      	ldr	r0, [pc, #8]	; (1ac58 <clkstarted_handle.constprop.0+0x34>)
   1ac4e:	4718      	bx	r3
}
   1ac50:	bd70      	pop	{r4, r5, r6, pc}
   1ac52:	bf00      	nop
   1ac54:	2002f464 	.word	0x2002f464
   1ac58:	0002d054 	.word	0x0002d054

0001ac5c <clock_event_handler>:
{
   1ac5c:	b508      	push	{r3, lr}
	switch (event) {
   1ac5e:	2805      	cmp	r0, #5
   1ac60:	d820      	bhi.n	1aca4 <clock_event_handler+0x48>
   1ac62:	e8df f000 	tbb	[pc, r0]
   1ac66:	1103      	.short	0x1103
   1ac68:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1ac6c:	4b13      	ldr	r3, [pc, #76]	; (1acbc <clock_event_handler+0x60>)
   1ac6e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   1ac72:	f010 0007 	ands.w	r0, r0, #7
   1ac76:	d11f      	bne.n	1acb8 <clock_event_handler+0x5c>
}
   1ac78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ac7c:	f7ff bfd2 	b.w	1ac24 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1ac80:	2002      	movs	r0, #2
   1ac82:	e7f9      	b.n	1ac78 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   1ac84:	2003      	movs	r0, #3
   1ac86:	e7f7      	b.n	1ac78 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ac88:	2001      	movs	r0, #1
   1ac8a:	e7f5      	b.n	1ac78 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   1ac8c:	490c      	ldr	r1, [pc, #48]	; (1acc0 <clock_event_handler+0x64>)
   1ac8e:	f240 236e 	movw	r3, #622	; 0x26e
   1ac92:	4a0c      	ldr	r2, [pc, #48]	; (1acc4 <clock_event_handler+0x68>)
   1ac94:	480c      	ldr	r0, [pc, #48]	; (1acc8 <clock_event_handler+0x6c>)
   1ac96:	f00c fcac 	bl	275f2 <assert_print>
   1ac9a:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1ac9e:	4809      	ldr	r0, [pc, #36]	; (1acc4 <clock_event_handler+0x68>)
   1aca0:	f00c fca0 	bl	275e4 <assert_post_action>
   1aca4:	4906      	ldr	r1, [pc, #24]	; (1acc0 <clock_event_handler+0x64>)
   1aca6:	f240 2372 	movw	r3, #626	; 0x272
   1acaa:	4a06      	ldr	r2, [pc, #24]	; (1acc4 <clock_event_handler+0x68>)
   1acac:	4806      	ldr	r0, [pc, #24]	; (1acc8 <clock_event_handler+0x6c>)
   1acae:	f00c fca0 	bl	275f2 <assert_print>
   1acb2:	f240 2172 	movw	r1, #626	; 0x272
   1acb6:	e7f2      	b.n	1ac9e <clock_event_handler+0x42>
}
   1acb8:	bd08      	pop	{r3, pc}
   1acba:	bf00      	nop
   1acbc:	2002f464 	.word	0x2002f464
   1acc0:	00033fc0 	.word	0x00033fc0
   1acc4:	0003256b 	.word	0x0003256b
   1acc8:	0002e715 	.word	0x0002e715

0001accc <generic_hfclk_start>:
{
   1accc:	b508      	push	{r3, lr}
	__asm__ volatile(
   1acce:	f04f 0320 	mov.w	r3, #32
   1acd2:	f3ef 8111 	mrs	r1, BASEPRI
   1acd6:	f383 8812 	msr	BASEPRI_MAX, r3
   1acda:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1acde:	4a11      	ldr	r2, [pc, #68]	; (1ad24 <generic_hfclk_start+0x58>)
   1ace0:	6813      	ldr	r3, [r2, #0]
   1ace2:	f043 0002 	orr.w	r0, r3, #2
   1ace6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1ace8:	07da      	lsls	r2, r3, #31
   1acea:	d408      	bmi.n	1acfe <generic_hfclk_start+0x32>
	__asm__ volatile(
   1acec:	f381 8811 	msr	BASEPRI, r1
   1acf0:	f3bf 8f6f 	isb	sy
}
   1acf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1acf8:	2001      	movs	r0, #1
   1acfa:	f002 bf3b 	b.w	1db74 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1acfe:	4b0a      	ldr	r3, [pc, #40]	; (1ad28 <generic_hfclk_start+0x5c>)
   1ad00:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ad04:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1ad08:	07d3      	lsls	r3, r2, #31
   1ad0a:	d5ef      	bpl.n	1acec <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1ad0c:	4807      	ldr	r0, [pc, #28]	; (1ad2c <generic_hfclk_start+0x60>)
   1ad0e:	f00f fc94 	bl	2a63a <set_on_state>
   1ad12:	f381 8811 	msr	BASEPRI, r1
   1ad16:	f3bf 8f6f 	isb	sy
}
   1ad1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1ad1e:	2000      	movs	r0, #0
   1ad20:	f7ff bf80 	b.w	1ac24 <clkstarted_handle.constprop.0>
   1ad24:	2002f514 	.word	0x2002f514
   1ad28:	40005000 	.word	0x40005000
   1ad2c:	2002f4ec 	.word	0x2002f4ec

0001ad30 <api_blocking_start>:
{
   1ad30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ad32:	2200      	movs	r2, #0
   1ad34:	2301      	movs	r3, #1
   1ad36:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ad3a:	ab04      	add	r3, sp, #16
   1ad3c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ad40:	4a09      	ldr	r2, [pc, #36]	; (1ad68 <api_blocking_start+0x38>)
   1ad42:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ad44:	f8cd d000 	str.w	sp, [sp]
   1ad48:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ad4c:	f00f fcb8 	bl	2a6c0 <api_start>
	if (err < 0) {
   1ad50:	2800      	cmp	r0, #0
   1ad52:	db05      	blt.n	1ad60 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1ad54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1ad58:	2300      	movs	r3, #0
   1ad5a:	4668      	mov	r0, sp
   1ad5c:	f006 f8c8 	bl	20ef0 <z_impl_k_sem_take>
}
   1ad60:	b007      	add	sp, #28
   1ad62:	f85d fb04 	ldr.w	pc, [sp], #4
   1ad66:	bf00      	nop
   1ad68:	0002a6ff 	.word	0x0002a6ff

0001ad6c <generic_hfclk_stop>:
{
   1ad6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ad6e:	f04f 0320 	mov.w	r3, #32
   1ad72:	f3ef 8411 	mrs	r4, BASEPRI
   1ad76:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad7a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1ad7e:	4a07      	ldr	r2, [pc, #28]	; (1ad9c <generic_hfclk_stop+0x30>)
   1ad80:	6813      	ldr	r3, [r2, #0]
   1ad82:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1ad86:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1ad88:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1ad8a:	d402      	bmi.n	1ad92 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1ad8c:	2001      	movs	r0, #1
   1ad8e:	f002 ff6f 	bl	1dc70 <nrfx_clock_stop>
	__asm__ volatile(
   1ad92:	f384 8811 	msr	BASEPRI, r4
   1ad96:	f3bf 8f6f 	isb	sy
}
   1ad9a:	bd10      	pop	{r4, pc}
   1ad9c:	2002f514 	.word	0x2002f514

0001ada0 <z_nrf_clock_control_lf_on>:
{
   1ada0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ada4:	2201      	movs	r2, #1
   1ada6:	4606      	mov	r6, r0
   1ada8:	4941      	ldr	r1, [pc, #260]	; (1aeb0 <z_nrf_clock_control_lf_on+0x110>)
   1adaa:	e8d1 3fef 	ldaex	r3, [r1]
   1adae:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1adb2:	2800      	cmp	r0, #0
   1adb4:	d1f9      	bne.n	1adaa <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1adb6:	b9a3      	cbnz	r3, 1ade2 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1adb8:	493e      	ldr	r1, [pc, #248]	; (1aeb4 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1adba:	483f      	ldr	r0, [pc, #252]	; (1aeb8 <z_nrf_clock_control_lf_on+0x118>)
   1adbc:	604b      	str	r3, [r1, #4]
   1adbe:	60cb      	str	r3, [r1, #12]
   1adc0:	608a      	str	r2, [r1, #8]
   1adc2:	f7f3 faaf 	bl	e324 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1adc6:	2800      	cmp	r0, #0
   1adc8:	da0b      	bge.n	1ade2 <z_nrf_clock_control_lf_on+0x42>
   1adca:	493c      	ldr	r1, [pc, #240]	; (1aebc <z_nrf_clock_control_lf_on+0x11c>)
   1adcc:	f44f 730c 	mov.w	r3, #560	; 0x230
   1add0:	4a3b      	ldr	r2, [pc, #236]	; (1aec0 <z_nrf_clock_control_lf_on+0x120>)
   1add2:	483c      	ldr	r0, [pc, #240]	; (1aec4 <z_nrf_clock_control_lf_on+0x124>)
   1add4:	f00c fc0d 	bl	275f2 <assert_print>
   1add8:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1addc:	4838      	ldr	r0, [pc, #224]	; (1aec0 <z_nrf_clock_control_lf_on+0x120>)
   1adde:	f00c fc01 	bl	275e4 <assert_post_action>
	switch (start_mode) {
   1ade2:	b35e      	cbz	r6, 1ae3c <z_nrf_clock_control_lf_on+0x9c>
   1ade4:	1e73      	subs	r3, r6, #1
   1ade6:	2b01      	cmp	r3, #1
   1ade8:	d858      	bhi.n	1ae9c <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1adea:	2e01      	cmp	r6, #1
   1adec:	d106      	bne.n	1adfc <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1adee:	4b36      	ldr	r3, [pc, #216]	; (1aec8 <z_nrf_clock_control_lf_on+0x128>)
   1adf0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1adf4:	f003 0303 	and.w	r3, r3, #3
   1adf8:	2b02      	cmp	r3, #2
   1adfa:	d01f      	beq.n	1ae3c <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1adfc:	f010 ff5a 	bl	2bcb4 <k_is_in_isr>
   1ae00:	4605      	mov	r5, r0
   1ae02:	b9e8      	cbnz	r0, 1ae40 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   1ae04:	4b31      	ldr	r3, [pc, #196]	; (1aecc <z_nrf_clock_control_lf_on+0x12c>)
   1ae06:	781b      	ldrb	r3, [r3, #0]
   1ae08:	b1d3      	cbz	r3, 1ae40 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1ae0a:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1ae0c:	4607      	mov	r7, r0
   1ae0e:	4b2e      	ldr	r3, [pc, #184]	; (1aec8 <z_nrf_clock_control_lf_on+0x128>)
   1ae10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ae14:	4c2c      	ldr	r4, [pc, #176]	; (1aec8 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ae16:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1aed0 <z_nrf_clock_control_lf_on+0x130>
   1ae1a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ae1e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1ae22:	03d2      	lsls	r2, r2, #15
   1ae24:	d516      	bpl.n	1ae54 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1ae26:	f003 0303 	and.w	r3, r3, #3
   1ae2a:	2b02      	cmp	r3, #2
   1ae2c:	d001      	beq.n	1ae32 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1ae2e:	2e01      	cmp	r6, #1
   1ae30:	d110      	bne.n	1ae54 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1ae32:	b375      	cbz	r5, 1ae92 <z_nrf_clock_control_lf_on+0xf2>
   1ae34:	f387 8811 	msr	BASEPRI, r7
   1ae38:	f3bf 8f6f 	isb	sy
}
   1ae3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1ae40:	f04f 0320 	mov.w	r3, #32
   1ae44:	f3ef 8711 	mrs	r7, BASEPRI
   1ae48:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae4c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ae50:	2501      	movs	r5, #1
   1ae52:	e7df      	b.n	1ae14 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1ae54:	b1c5      	cbz	r5, 1ae88 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1ae56:	4638      	mov	r0, r7
   1ae58:	f7f6 f8f0 	bl	1103c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1ae5c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1ae60:	b2db      	uxtb	r3, r3
   1ae62:	2b01      	cmp	r3, #1
   1ae64:	d1d9      	bne.n	1ae1a <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ae66:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1ae6a:	2a00      	cmp	r2, #0
   1ae6c:	d0d5      	beq.n	1ae1a <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ae6e:	2200      	movs	r2, #0
   1ae70:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1ae74:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ae78:	2202      	movs	r2, #2
   1ae7a:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1ae7e:	2220      	movs	r2, #32
   1ae80:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ae84:	60a3      	str	r3, [r4, #8]
}
   1ae86:	e7c8      	b.n	1ae1a <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   1ae88:	2100      	movs	r1, #0
   1ae8a:	2021      	movs	r0, #33	; 0x21
   1ae8c:	f007 fee0 	bl	22c50 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ae90:	e7e4      	b.n	1ae5c <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1ae92:	2202      	movs	r2, #2
   1ae94:	4b0c      	ldr	r3, [pc, #48]	; (1aec8 <z_nrf_clock_control_lf_on+0x128>)
   1ae96:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1ae9a:	e7cf      	b.n	1ae3c <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   1ae9c:	490d      	ldr	r1, [pc, #52]	; (1aed4 <z_nrf_clock_control_lf_on+0x134>)
   1ae9e:	f240 2342 	movw	r3, #578	; 0x242
   1aea2:	4a07      	ldr	r2, [pc, #28]	; (1aec0 <z_nrf_clock_control_lf_on+0x120>)
   1aea4:	4807      	ldr	r0, [pc, #28]	; (1aec4 <z_nrf_clock_control_lf_on+0x124>)
   1aea6:	f00c fba4 	bl	275f2 <assert_print>
   1aeaa:	f240 2142 	movw	r1, #578	; 0x242
   1aeae:	e795      	b.n	1addc <z_nrf_clock_control_lf_on+0x3c>
   1aeb0:	2002f460 	.word	0x2002f460
   1aeb4:	2002f450 	.word	0x2002f450
   1aeb8:	2002f484 	.word	0x2002f484
   1aebc:	0002f993 	.word	0x0002f993
   1aec0:	0003256b 	.word	0x0003256b
   1aec4:	0002e715 	.word	0x0002e715
   1aec8:	40005000 	.word	0x40005000
   1aecc:	2003069e 	.word	0x2003069e
   1aed0:	e000e100 	.word	0xe000e100
   1aed4:	00033fc0 	.word	0x00033fc0

0001aed8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1aed8:	b508      	push	{r3, lr}
   1aeda:	4807      	ldr	r0, [pc, #28]	; (1aef8 <uart_console_init+0x20>)
   1aedc:	f010 fead 	bl	2bc3a <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1aee0:	b138      	cbz	r0, 1aef2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1aee2:	4806      	ldr	r0, [pc, #24]	; (1aefc <uart_console_init+0x24>)
   1aee4:	f7f7 f832 	bl	11f4c <__stdout_hook_install>
	__printk_hook_install(console_out);
   1aee8:	4804      	ldr	r0, [pc, #16]	; (1aefc <uart_console_init+0x24>)
   1aeea:	f7f2 fe99 	bl	dc20 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1aeee:	2000      	movs	r0, #0
}
   1aef0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1aef2:	f06f 0012 	mvn.w	r0, #18
   1aef6:	e7fb      	b.n	1aef0 <uart_console_init+0x18>
   1aef8:	0002d0e4 	.word	0x0002d0e4
   1aefc:	0001af01 	.word	0x0001af01

0001af00 <console_out>:
	if ('\n' == c) {
   1af00:	280a      	cmp	r0, #10
{
   1af02:	b538      	push	{r3, r4, r5, lr}
   1af04:	4604      	mov	r4, r0
   1af06:	4d07      	ldr	r5, [pc, #28]	; (1af24 <console_out+0x24>)
	if ('\n' == c) {
   1af08:	d104      	bne.n	1af14 <console_out+0x14>
	api->poll_out(dev, out_char);
   1af0a:	68ab      	ldr	r3, [r5, #8]
   1af0c:	210d      	movs	r1, #13
   1af0e:	4628      	mov	r0, r5
   1af10:	69db      	ldr	r3, [r3, #28]
   1af12:	4798      	blx	r3
   1af14:	68ab      	ldr	r3, [r5, #8]
   1af16:	4803      	ldr	r0, [pc, #12]	; (1af24 <console_out+0x24>)
   1af18:	69db      	ldr	r3, [r3, #28]
   1af1a:	b2e1      	uxtb	r1, r4
   1af1c:	4798      	blx	r3
}
   1af1e:	4620      	mov	r0, r4
   1af20:	bd38      	pop	{r3, r4, r5, pc}
   1af22:	bf00      	nop
   1af24:	0002d0e4 	.word	0x0002d0e4

0001af28 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1af28:	b510      	push	{r4, lr}
	return port->data;
   1af2a:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1af2c:	b961      	cbnz	r1, 1af48 <gpio_nrfx_manage_callback+0x20>
   1af2e:	4920      	ldr	r1, [pc, #128]	; (1afb0 <gpio_nrfx_manage_callback+0x88>)
   1af30:	232a      	movs	r3, #42	; 0x2a
   1af32:	4a20      	ldr	r2, [pc, #128]	; (1afb4 <gpio_nrfx_manage_callback+0x8c>)
   1af34:	4820      	ldr	r0, [pc, #128]	; (1afb8 <gpio_nrfx_manage_callback+0x90>)
   1af36:	f00c fb5c 	bl	275f2 <assert_print>
   1af3a:	4820      	ldr	r0, [pc, #128]	; (1afbc <gpio_nrfx_manage_callback+0x94>)
   1af3c:	f00c fb59 	bl	275f2 <assert_print>
   1af40:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1af42:	481c      	ldr	r0, [pc, #112]	; (1afb4 <gpio_nrfx_manage_callback+0x8c>)
   1af44:	f00c fb4e 	bl	275e4 <assert_post_action>
   1af48:	6848      	ldr	r0, [r1, #4]
   1af4a:	b950      	cbnz	r0, 1af62 <gpio_nrfx_manage_callback+0x3a>
   1af4c:	491c      	ldr	r1, [pc, #112]	; (1afc0 <gpio_nrfx_manage_callback+0x98>)
   1af4e:	232b      	movs	r3, #43	; 0x2b
   1af50:	4a18      	ldr	r2, [pc, #96]	; (1afb4 <gpio_nrfx_manage_callback+0x8c>)
   1af52:	4819      	ldr	r0, [pc, #100]	; (1afb8 <gpio_nrfx_manage_callback+0x90>)
   1af54:	f00c fb4d 	bl	275f2 <assert_print>
   1af58:	481a      	ldr	r0, [pc, #104]	; (1afc4 <gpio_nrfx_manage_callback+0x9c>)
   1af5a:	f00c fb4a 	bl	275f2 <assert_print>
   1af5e:	212b      	movs	r1, #43	; 0x2b
   1af60:	e7ef      	b.n	1af42 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1af62:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1af64:	b1f8      	cbz	r0, 1afa6 <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1af66:	4288      	cmp	r0, r1
   1af68:	d119      	bne.n	1af9e <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1af6a:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1af6c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1af6e:	42a1      	cmp	r1, r4
	list->head = node;
   1af70:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1af72:	d100      	bne.n	1af76 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1af74:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1af76:	2000      	movs	r0, #0
   1af78:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1af7a:	b12a      	cbz	r2, 1af88 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1af7c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1af7e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1af80:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1af82:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1af84:	b902      	cbnz	r2, 1af88 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1af86:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1af88:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1af8a:	e010      	b.n	1afae <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1af8c:	4281      	cmp	r1, r0
   1af8e:	d106      	bne.n	1af9e <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1af90:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1af92:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1af94:	6898      	ldr	r0, [r3, #8]
   1af96:	4281      	cmp	r1, r0
   1af98:	d1ed      	bne.n	1af76 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1af9a:	609c      	str	r4, [r3, #8]
}
   1af9c:	e7eb      	b.n	1af76 <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1af9e:	4604      	mov	r4, r0
   1afa0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1afa2:	2800      	cmp	r0, #0
   1afa4:	d1f2      	bne.n	1af8c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1afa6:	2a00      	cmp	r2, #0
   1afa8:	d1e8      	bne.n	1af7c <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1afaa:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1afae:	bd10      	pop	{r4, pc}
   1afb0:	0002ee18 	.word	0x0002ee18
   1afb4:	00032606 	.word	0x00032606
   1afb8:	0002e715 	.word	0x0002e715
   1afbc:	00032642 	.word	0x00032642
   1afc0:	00032651 	.word	0x00032651
   1afc4:	00032663 	.word	0x00032663

0001afc8 <gpio_nrfx_pin_interrupt_configure>:
{
   1afc8:	b530      	push	{r4, r5, lr}
	return port->config;
   1afca:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1afcc:	f001 041f 	and.w	r4, r1, #31
   1afd0:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1afd2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1afd6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1afd8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1afdc:	d105      	bne.n	1afea <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1afde:	4620      	mov	r0, r4
   1afe0:	f003 f990 	bl	1e304 <nrfx_gpiote_trigger_disable>
		return 0;
   1afe4:	2000      	movs	r0, #0
}
   1afe6:	b005      	add	sp, #20
   1afe8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1afea:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1afec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1aff0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1aff4:	d114      	bne.n	1b020 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1aff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1affa:	bf0c      	ite	eq
   1affc:	2304      	moveq	r3, #4
   1affe:	2305      	movne	r3, #5
   1b000:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b004:	2300      	movs	r3, #0
   1b006:	4620      	mov	r0, r4
   1b008:	4619      	mov	r1, r3
   1b00a:	aa02      	add	r2, sp, #8
   1b00c:	f002 ff84 	bl	1df18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b010:	4b2a      	ldr	r3, [pc, #168]	; (1b0bc <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1b012:	4298      	cmp	r0, r3
   1b014:	d14f      	bne.n	1b0b6 <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1b016:	2101      	movs	r1, #1
   1b018:	4620      	mov	r0, r4
   1b01a:	f003 f909 	bl	1e230 <nrfx_gpiote_trigger_enable>
	return 0;
   1b01e:	e7e1      	b.n	1afe4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b020:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1b024:	d024      	beq.n	1b070 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1b026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1b02a:	bf14      	ite	ne
   1b02c:	2301      	movne	r3, #1
   1b02e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b030:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1b034:	6883      	ldr	r3, [r0, #8]
   1b036:	40cb      	lsrs	r3, r1
   1b038:	07d8      	lsls	r0, r3, #31
   1b03a:	d4e3      	bmi.n	1b004 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1b03c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1b040:	d1e0      	bne.n	1b004 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1b042:	0962      	lsrs	r2, r4, #5
   1b044:	f004 031f 	and.w	r3, r4, #31
   1b048:	d014      	beq.n	1b074 <gpio_nrfx_pin_interrupt_configure+0xac>
   1b04a:	2a01      	cmp	r2, #1
   1b04c:	d104      	bne.n	1b058 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1b04e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b052:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b054:	07d1      	lsls	r1, r2, #31
   1b056:	d414      	bmi.n	1b082 <gpio_nrfx_pin_interrupt_configure+0xba>
   1b058:	4919      	ldr	r1, [pc, #100]	; (1b0c0 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1b05a:	481a      	ldr	r0, [pc, #104]	; (1b0c4 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1b05c:	f240 2347 	movw	r3, #583	; 0x247
   1b060:	4a19      	ldr	r2, [pc, #100]	; (1b0c8 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1b062:	f00c fac6 	bl	275f2 <assert_print>
   1b066:	f240 2147 	movw	r1, #583	; 0x247
   1b06a:	4817      	ldr	r0, [pc, #92]	; (1b0c8 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1b06c:	f00c faba 	bl	275e4 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b070:	2303      	movs	r3, #3
   1b072:	e7dd      	b.n	1b030 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1b074:	f04f 32ff 	mov.w	r2, #4294967295
   1b078:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b07a:	07d2      	lsls	r2, r2, #31
   1b07c:	d5ec      	bpl.n	1b058 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1b07e:	4a13      	ldr	r2, [pc, #76]	; (1b0cc <gpio_nrfx_pin_interrupt_configure+0x104>)
   1b080:	e000      	b.n	1b084 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1b082:	4a13      	ldr	r2, [pc, #76]	; (1b0d0 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1b084:	3380      	adds	r3, #128	; 0x80
   1b086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1b08a:	07db      	lsls	r3, r3, #31
   1b08c:	d4ba      	bmi.n	1b004 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b08e:	f10d 0507 	add.w	r5, sp, #7
   1b092:	4629      	mov	r1, r5
   1b094:	4620      	mov	r0, r4
   1b096:	f003 f865 	bl	1e164 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1b09a:	4b0e      	ldr	r3, [pc, #56]	; (1b0d4 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1b09c:	4298      	cmp	r0, r3
   1b09e:	d001      	beq.n	1b0a4 <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   1b0a0:	9503      	str	r5, [sp, #12]
   1b0a2:	e7af      	b.n	1b004 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1b0a4:	4628      	mov	r0, r5
   1b0a6:	f003 f8bd 	bl	1e224 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1b0aa:	4b04      	ldr	r3, [pc, #16]	; (1b0bc <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1b0ac:	4298      	cmp	r0, r3
   1b0ae:	d0f7      	beq.n	1b0a0 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   1b0b0:	f06f 000b 	mvn.w	r0, #11
   1b0b4:	e797      	b.n	1afe6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1b0b6:	f06f 0015 	mvn.w	r0, #21
   1b0ba:	e794      	b.n	1afe6 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1b0bc:	0bad0000 	.word	0x0bad0000
   1b0c0:	000326ad 	.word	0x000326ad
   1b0c4:	0002e715 	.word	0x0002e715
   1b0c8:	0003267a 	.word	0x0003267a
   1b0cc:	40842500 	.word	0x40842500
   1b0d0:	40842800 	.word	0x40842800
   1b0d4:	0bad0004 	.word	0x0bad0004

0001b0d8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1b0d8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1b0da:	f003 f893 	bl	1e204 <nrfx_gpiote_is_init>
   1b0de:	4604      	mov	r4, r0
   1b0e0:	b968      	cbnz	r0, 1b0fe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1b0e2:	f003 f867 	bl	1e1b4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1b0e6:	4b08      	ldr	r3, [pc, #32]	; (1b108 <gpio_nrfx_init+0x30>)
   1b0e8:	4298      	cmp	r0, r3
   1b0ea:	d10a      	bne.n	1b102 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1b0ec:	4621      	mov	r1, r4
   1b0ee:	4807      	ldr	r0, [pc, #28]	; (1b10c <gpio_nrfx_init+0x34>)
   1b0f0:	f003 f832 	bl	1e158 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1b0f4:	4622      	mov	r2, r4
   1b0f6:	2105      	movs	r1, #5
   1b0f8:	202f      	movs	r0, #47	; 0x2f
   1b0fa:	f7f6 f829 	bl	11150 <z_arm_irq_priority_set>
		return 0;
   1b0fe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1b100:	bd10      	pop	{r4, pc}
		return -EIO;
   1b102:	f06f 0004 	mvn.w	r0, #4
   1b106:	e7fb      	b.n	1b100 <gpio_nrfx_init+0x28>
   1b108:	0bad0000 	.word	0x0bad0000
   1b10c:	0001b111 	.word	0x0001b111

0001b110 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b110:	0942      	lsrs	r2, r0, #5
{
   1b112:	4603      	mov	r3, r0
   1b114:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b116:	d002      	beq.n	1b11e <nrfx_gpio_handler+0xe>
   1b118:	2a01      	cmp	r2, #1
   1b11a:	d01e      	beq.n	1b15a <nrfx_gpio_handler+0x4a>
}
   1b11c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b11e:	4e14      	ldr	r6, [pc, #80]	; (1b170 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1b120:	6932      	ldr	r2, [r6, #16]
   1b122:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b124:	2900      	cmp	r1, #0
   1b126:	d0f9      	beq.n	1b11c <nrfx_gpio_handler+0xc>
   1b128:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1b12a:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   1b12e:	680c      	ldr	r4, [r1, #0]
   1b130:	409d      	lsls	r5, r3
   1b132:	2900      	cmp	r1, #0
   1b134:	d0f2      	beq.n	1b11c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1b136:	688a      	ldr	r2, [r1, #8]
   1b138:	402a      	ands	r2, r5
   1b13a:	d012      	beq.n	1b162 <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   1b13c:	684b      	ldr	r3, [r1, #4]
   1b13e:	b973      	cbnz	r3, 1b15e <nrfx_gpio_handler+0x4e>
   1b140:	490c      	ldr	r1, [pc, #48]	; (1b174 <nrfx_gpio_handler+0x64>)
   1b142:	234d      	movs	r3, #77	; 0x4d
   1b144:	4a0c      	ldr	r2, [pc, #48]	; (1b178 <nrfx_gpio_handler+0x68>)
   1b146:	480d      	ldr	r0, [pc, #52]	; (1b17c <nrfx_gpio_handler+0x6c>)
   1b148:	f00c fa53 	bl	275f2 <assert_print>
   1b14c:	480c      	ldr	r0, [pc, #48]	; (1b180 <nrfx_gpio_handler+0x70>)
   1b14e:	f00c fa50 	bl	275f2 <assert_print>
   1b152:	214d      	movs	r1, #77	; 0x4d
   1b154:	4808      	ldr	r0, [pc, #32]	; (1b178 <nrfx_gpio_handler+0x68>)
   1b156:	f00c fa45 	bl	275e4 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1b15a:	4e0a      	ldr	r6, [pc, #40]	; (1b184 <nrfx_gpio_handler+0x74>)
   1b15c:	e7e0      	b.n	1b120 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1b15e:	4630      	mov	r0, r6
   1b160:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b162:	b11c      	cbz	r4, 1b16c <nrfx_gpio_handler+0x5c>
   1b164:	6823      	ldr	r3, [r4, #0]
   1b166:	4621      	mov	r1, r4
   1b168:	461c      	mov	r4, r3
   1b16a:	e7e2      	b.n	1b132 <nrfx_gpio_handler+0x22>
   1b16c:	4623      	mov	r3, r4
   1b16e:	e7fa      	b.n	1b166 <nrfx_gpio_handler+0x56>
   1b170:	0002d084 	.word	0x0002d084
   1b174:	000333dc 	.word	0x000333dc
   1b178:	00032606 	.word	0x00032606
   1b17c:	0002e715 	.word	0x0002e715
   1b180:	00032663 	.word	0x00032663
   1b184:	0002d06c 	.word	0x0002d06c

0001b188 <gpio_nrfx_pin_configure>:
{
   1b188:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1b18c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b190:	f001 051f 	and.w	r5, r1, #31
   1b194:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1b198:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1b19a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1b19e:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b1a0:	4628      	mov	r0, r5
   1b1a2:	f10d 0103 	add.w	r1, sp, #3
   1b1a6:	f002 ffdd 	bl	1e164 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1b1aa:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1b1ae:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1b1b0:	d115      	bne.n	1b1de <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1b1b2:	4628      	mov	r0, r5
   1b1b4:	f003 f8d0 	bl	1e358 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1b1b8:	4b48      	ldr	r3, [pc, #288]	; (1b2dc <gpio_nrfx_pin_configure+0x154>)
   1b1ba:	429e      	cmp	r6, r3
   1b1bc:	d170      	bne.n	1b2a0 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1b1be:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b1c2:	f003 f829 	bl	1e218 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1b1c6:	42b0      	cmp	r0, r6
   1b1c8:	d06a      	beq.n	1b2a0 <gpio_nrfx_pin_configure+0x118>
   1b1ca:	4945      	ldr	r1, [pc, #276]	; (1b2e0 <gpio_nrfx_pin_configure+0x158>)
   1b1cc:	236a      	movs	r3, #106	; 0x6a
   1b1ce:	4a45      	ldr	r2, [pc, #276]	; (1b2e4 <gpio_nrfx_pin_configure+0x15c>)
   1b1d0:	4845      	ldr	r0, [pc, #276]	; (1b2e8 <gpio_nrfx_pin_configure+0x160>)
   1b1d2:	f00c fa0e 	bl	275f2 <assert_print>
   1b1d6:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1b1d8:	4842      	ldr	r0, [pc, #264]	; (1b2e4 <gpio_nrfx_pin_configure+0x15c>)
   1b1da:	f00c fa03 	bl	275e4 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b1de:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b1e0:	4628      	mov	r0, r5
   1b1e2:	4619      	mov	r1, r3
   1b1e4:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1b1e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1b1ea:	f002 fe95 	bl	1df18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1b1ee:	4b3b      	ldr	r3, [pc, #236]	; (1b2dc <gpio_nrfx_pin_configure+0x154>)
   1b1f0:	4298      	cmp	r0, r3
   1b1f2:	d004      	beq.n	1b1fe <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1b1f4:	f06f 0015 	mvn.w	r0, #21
}
   1b1f8:	b004      	add	sp, #16
   1b1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1b1fe:	4286      	cmp	r6, r0
   1b200:	d10d      	bne.n	1b21e <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1b202:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1b206:	f003 f807 	bl	1e218 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1b20a:	42b0      	cmp	r0, r6
   1b20c:	d007      	beq.n	1b21e <gpio_nrfx_pin_configure+0x96>
   1b20e:	4934      	ldr	r1, [pc, #208]	; (1b2e0 <gpio_nrfx_pin_configure+0x158>)
   1b210:	237c      	movs	r3, #124	; 0x7c
   1b212:	4a34      	ldr	r2, [pc, #208]	; (1b2e4 <gpio_nrfx_pin_configure+0x15c>)
   1b214:	4834      	ldr	r0, [pc, #208]	; (1b2e8 <gpio_nrfx_pin_configure+0x160>)
   1b216:	f00c f9ec 	bl	275f2 <assert_print>
   1b21a:	217c      	movs	r1, #124	; 0x7c
   1b21c:	e7dc      	b.n	1b1d8 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1b21e:	03a6      	lsls	r6, r4, #14
   1b220:	d54c      	bpl.n	1b2bc <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b222:	f240 3306 	movw	r3, #774	; 0x306
   1b226:	4023      	ands	r3, r4
   1b228:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1b22c:	d019      	beq.n	1b262 <gpio_nrfx_pin_configure+0xda>
   1b22e:	d80c      	bhi.n	1b24a <gpio_nrfx_pin_configure+0xc2>
   1b230:	2b06      	cmp	r3, #6
   1b232:	d017      	beq.n	1b264 <gpio_nrfx_pin_configure+0xdc>
   1b234:	d804      	bhi.n	1b240 <gpio_nrfx_pin_configure+0xb8>
   1b236:	b1ab      	cbz	r3, 1b264 <gpio_nrfx_pin_configure+0xdc>
   1b238:	2b02      	cmp	r3, #2
   1b23a:	d1db      	bne.n	1b1f4 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1b23c:	2304      	movs	r3, #4
   1b23e:	e011      	b.n	1b264 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1b244:	d1d6      	bne.n	1b1f4 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1b246:	2301      	movs	r3, #1
   1b248:	e00c      	b.n	1b264 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b24a:	f240 2202 	movw	r2, #514	; 0x202
   1b24e:	4293      	cmp	r3, r2
   1b250:	d028      	beq.n	1b2a4 <gpio_nrfx_pin_configure+0x11c>
   1b252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1b256:	d027      	beq.n	1b2a8 <gpio_nrfx_pin_configure+0x120>
   1b258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1b25c:	d1ca      	bne.n	1b1f4 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1b25e:	2302      	movs	r3, #2
   1b260:	e000      	b.n	1b264 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1b262:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1b264:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1b268:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1b26c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1b270:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1b272:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1b276:	bf4c      	ite	mi
   1b278:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1b27a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b27e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1b280:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1b284:	d512      	bpl.n	1b2ac <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1b286:	2301      	movs	r3, #1
   1b288:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1b28c:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1b28e:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1b290:	2200      	movs	r2, #0
   1b292:	4628      	mov	r0, r5
   1b294:	a901      	add	r1, sp, #4
   1b296:	f002 fee7 	bl	1e068 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1b29a:	4b10      	ldr	r3, [pc, #64]	; (1b2dc <gpio_nrfx_pin_configure+0x154>)
   1b29c:	4298      	cmp	r0, r3
   1b29e:	d1a9      	bne.n	1b1f4 <gpio_nrfx_pin_configure+0x6c>
   1b2a0:	2000      	movs	r0, #0
   1b2a2:	e7a9      	b.n	1b1f8 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1b2a4:	2305      	movs	r3, #5
   1b2a6:	e7dd      	b.n	1b264 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1b2a8:	2303      	movs	r3, #3
   1b2aa:	e7db      	b.n	1b264 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1b2ac:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1b2ae:	bf41      	itttt	mi
   1b2b0:	2301      	movmi	r3, #1
   1b2b2:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1b2b6:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1b2b8:	60d3      	strmi	r3, [r2, #12]
}
   1b2ba:	e7e9      	b.n	1b290 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1b2bc:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b2be:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1b2c2:	bf4c      	ite	mi
   1b2c4:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1b2c6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b2ca:	461a      	mov	r2, r3
   1b2cc:	4628      	mov	r0, r5
   1b2ce:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1b2d0:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1b2d4:	f002 fe20 	bl	1df18 <nrfx_gpiote_input_configure>
   1b2d8:	e7df      	b.n	1b29a <gpio_nrfx_pin_configure+0x112>
   1b2da:	bf00      	nop
   1b2dc:	0bad0000 	.word	0x0bad0000
   1b2e0:	0002f6fc 	.word	0x0002f6fc
   1b2e4:	000326d0 	.word	0x000326d0
   1b2e8:	0002e715 	.word	0x0002e715

0001b2ec <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1b2ec:	4603      	mov	r3, r0
   1b2ee:	b510      	push	{r4, lr}
   1b2f0:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b2f2:	7919      	ldrb	r1, [r3, #4]
   1b2f4:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1b2f6:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b2f8:	fa03 f101 	lsl.w	r1, r3, r1
   1b2fc:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1b2fe:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b300:	681b      	ldr	r3, [r3, #0]
   1b302:	4219      	tst	r1, r3
   1b304:	d10e      	bne.n	1b324 <gpio_pin_set_dt.isra.0+0x38>
   1b306:	490e      	ldr	r1, [pc, #56]	; (1b340 <gpio_pin_set_dt.isra.0+0x54>)
   1b308:	f240 533d 	movw	r3, #1341	; 0x53d
   1b30c:	4a0d      	ldr	r2, [pc, #52]	; (1b344 <gpio_pin_set_dt.isra.0+0x58>)
   1b30e:	480e      	ldr	r0, [pc, #56]	; (1b348 <gpio_pin_set_dt.isra.0+0x5c>)
   1b310:	f00c f96f 	bl	275f2 <assert_print>
   1b314:	480d      	ldr	r0, [pc, #52]	; (1b34c <gpio_pin_set_dt.isra.0+0x60>)
   1b316:	f00c f96c 	bl	275f2 <assert_print>
   1b31a:	f240 513d 	movw	r1, #1341	; 0x53d
   1b31e:	4809      	ldr	r0, [pc, #36]	; (1b344 <gpio_pin_set_dt.isra.0+0x58>)
   1b320:	f00c f960 	bl	275e4 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1b324:	6823      	ldr	r3, [r4, #0]
   1b326:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1b328:	bf18      	it	ne
   1b32a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1b32e:	b122      	cbz	r2, 1b33a <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   1b330:	6883      	ldr	r3, [r0, #8]
   1b332:	68db      	ldr	r3, [r3, #12]
}
   1b334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1b338:	4718      	bx	r3
   1b33a:	6883      	ldr	r3, [r0, #8]
   1b33c:	691b      	ldr	r3, [r3, #16]
   1b33e:	e7f9      	b.n	1b334 <gpio_pin_set_dt.isra.0+0x48>
   1b340:	0002e6d7 	.word	0x0002e6d7
   1b344:	0002e6a6 	.word	0x0002e6a6
   1b348:	0002e715 	.word	0x0002e715
   1b34c:	0002e732 	.word	0x0002e732

0001b350 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1b350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   1b354:	6844      	ldr	r4, [r0, #4]
{
   1b356:	b088      	sub	sp, #32
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1b358:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   1b35a:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1b35c:	2100      	movs	r1, #0
   1b35e:	4630      	mov	r0, r6
   1b360:	aa07      	add	r2, sp, #28
   1b362:	f00f fd5e 	bl	2ae22 <pinctrl_lookup_state>
	if (ret < 0) {
   1b366:	2800      	cmp	r0, #0
   1b368:	db2a      	blt.n	1b3c0 <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1b36a:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1b36c:	6832      	ldr	r2, [r6, #0]
   1b36e:	7919      	ldrb	r1, [r3, #4]
   1b370:	6818      	ldr	r0, [r3, #0]
   1b372:	f00f fd69 	bl	2ae48 <pinctrl_configure_pins>
	if (err < 0) {
   1b376:	2800      	cmp	r0, #0
   1b378:	db22      	blt.n	1b3c0 <spi_nrfx_init+0x70>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b37a:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1b37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b37e:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1b380:	68ac      	ldr	r4, [r5, #8]
   1b382:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1b386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1b38a:	429c      	cmp	r4, r3
   1b38c:	d304      	bcc.n	1b398 <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1b38e:	4628      	mov	r0, r5
   1b390:	f00f fa29 	bl	2a7e6 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1b394:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1b396:	e013      	b.n	1b3c0 <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
   1b398:	6820      	ldr	r0, [r4, #0]
   1b39a:	f010 fc4e 	bl	2bc3a <z_device_is_ready>
   1b39e:	4603      	mov	r3, r0
   1b3a0:	b988      	cbnz	r0, 1b3c6 <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1b3a2:	7922      	ldrb	r2, [r4, #4]
   1b3a4:	4932      	ldr	r1, [pc, #200]	; (1b470 <spi_nrfx_init+0x120>)
   1b3a6:	9204      	str	r2, [sp, #16]
   1b3a8:	6822      	ldr	r2, [r4, #0]
   1b3aa:	6812      	ldr	r2, [r2, #0]
   1b3ac:	9000      	str	r0, [sp, #0]
   1b3ae:	9203      	str	r2, [sp, #12]
   1b3b0:	4a30      	ldr	r2, [pc, #192]	; (1b474 <spi_nrfx_init+0x124>)
   1b3b2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1b3b6:	2201      	movs	r2, #1
   1b3b8:	f00f f9e3 	bl	2a782 <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   1b3bc:	f06f 0012 	mvn.w	r0, #18
#endif
}
   1b3c0:	b008      	add	sp, #32
   1b3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
   1b3c6:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1b3c8:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1b3ca:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1b3cc:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1b3d0:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   1b3d2:	f8d0 e010 	ldr.w	lr, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1b3d6:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1b3da:	d10e      	bne.n	1b3fa <spi_nrfx_init+0xaa>
   1b3dc:	4926      	ldr	r1, [pc, #152]	; (1b478 <spi_nrfx_init+0x128>)
   1b3de:	f240 23b7 	movw	r3, #695	; 0x2b7
   1b3e2:	4a26      	ldr	r2, [pc, #152]	; (1b47c <spi_nrfx_init+0x12c>)
   1b3e4:	4826      	ldr	r0, [pc, #152]	; (1b480 <spi_nrfx_init+0x130>)
   1b3e6:	f00c f904 	bl	275f2 <assert_print>
   1b3ea:	4826      	ldr	r0, [pc, #152]	; (1b484 <spi_nrfx_init+0x134>)
   1b3ec:	f00c f901 	bl	275f2 <assert_print>
   1b3f0:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1b3f4:	4821      	ldr	r0, [pc, #132]	; (1b47c <spi_nrfx_init+0x12c>)
   1b3f6:	f00c f8f5 	bl	275e4 <assert_post_action>
   1b3fa:	f003 0206 	and.w	r2, r3, #6
   1b3fe:	2a04      	cmp	r2, #4
   1b400:	d109      	bne.n	1b416 <spi_nrfx_init+0xc6>
   1b402:	4921      	ldr	r1, [pc, #132]	; (1b488 <spi_nrfx_init+0x138>)
   1b404:	f240 23bf 	movw	r3, #703	; 0x2bf
   1b408:	4a1c      	ldr	r2, [pc, #112]	; (1b47c <spi_nrfx_init+0x12c>)
   1b40a:	481d      	ldr	r0, [pc, #116]	; (1b480 <spi_nrfx_init+0x130>)
   1b40c:	f00c f8f1 	bl	275f2 <assert_print>
   1b410:	f240 21bf 	movw	r1, #703	; 0x2bf
   1b414:	e7ee      	b.n	1b3f4 <spi_nrfx_init+0xa4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b416:	683f      	ldr	r7, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1b418:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b41a:	fa06 fc01 	lsl.w	ip, r6, r1
	return gpio_pin_configure(spec->port,
   1b41e:	bf54      	ite	pl
   1b420:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1b424:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b428:	ea1c 0f07 	tst.w	ip, r7
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1b42c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1b430:	d10c      	bne.n	1b44c <spi_nrfx_init+0xfc>
   1b432:	4916      	ldr	r1, [pc, #88]	; (1b48c <spi_nrfx_init+0x13c>)
   1b434:	f240 23d2 	movw	r3, #722	; 0x2d2
   1b438:	4a10      	ldr	r2, [pc, #64]	; (1b47c <spi_nrfx_init+0x12c>)
   1b43a:	4811      	ldr	r0, [pc, #68]	; (1b480 <spi_nrfx_init+0x130>)
   1b43c:	f00c f8d9 	bl	275f2 <assert_print>
   1b440:	4813      	ldr	r0, [pc, #76]	; (1b490 <spi_nrfx_init+0x140>)
   1b442:	f00c f8d6 	bl	275f2 <assert_print>
   1b446:	f240 21d2 	movw	r1, #722	; 0x2d2
   1b44a:	e7d3      	b.n	1b3f4 <spi_nrfx_init+0xa4>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1b44c:	f8de 7000 	ldr.w	r7, [lr]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1b450:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1b452:	bf4c      	ite	mi
   1b454:	ea4c 0707 	orrmi.w	r7, ip, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1b458:	ea27 070c 	bicpl.w	r7, r7, ip
   1b45c:	f8ce 7000 	str.w	r7, [lr]
	return api->pin_configure(port, pin, flags);
   1b460:	f8d8 3000 	ldr.w	r3, [r8]
   1b464:	4798      	blx	r3
		if (ret < 0) {
   1b466:	2800      	cmp	r0, #0
   1b468:	dbaa      	blt.n	1b3c0 <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1b46a:	3408      	adds	r4, #8
   1b46c:	e789      	b.n	1b382 <spi_nrfx_init+0x32>
   1b46e:	bf00      	nop
   1b470:	0002d724 	.word	0x0002d724
   1b474:	00032714 	.word	0x00032714
   1b478:	0002e9f8 	.word	0x0002e9f8
   1b47c:	0002e6a6 	.word	0x0002e6a6
   1b480:	0002e715 	.word	0x0002e715
   1b484:	0002ea31 	.word	0x0002ea31
   1b488:	0002eaf5 	.word	0x0002eaf5
   1b48c:	0002e6d7 	.word	0x0002e6d7
   1b490:	0002e732 	.word	0x0002e732

0001b494 <transfer_next_chunk>:
{
   1b494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1b496:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1b498:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1b49a:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1b49c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1b49e:	b98d      	cbnz	r5, 1b4c4 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1b4a0:	2b00      	cmp	r3, #0
   1b4a2:	d137      	bne.n	1b514 <transfer_next_chunk+0x80>
	int error = 0;
   1b4a4:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1b4a6:	2200      	movs	r2, #0
   1b4a8:	4620      	mov	r0, r4
   1b4aa:	4611      	mov	r1, r2
   1b4ac:	f00f f979 	bl	2a7a2 <_spi_context_cs_control>
	ctx->sync_status = status;
   1b4b0:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1b4b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b4b6:	f005 fcd7 	bl	20e68 <z_impl_k_sem_give>
	dev_data->busy = false;
   1b4ba:	2300      	movs	r3, #0
   1b4bc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1b4c0:	b004      	add	sp, #16
   1b4c2:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1b4c4:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1b4c6:	bb0b      	cbnz	r3, 1b50c <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1b4c8:	bb39      	cbnz	r1, 1b51a <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1b4ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b4ce:	42aa      	cmp	r2, r5
   1b4d0:	bf28      	it	cs
   1b4d2:	462a      	movcs	r2, r5
   1b4d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1b4d6:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1b4d8:	9100      	str	r1, [sp, #0]
   1b4da:	b11b      	cbz	r3, 1b4e4 <transfer_next_chunk+0x50>
   1b4dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1b4de:	2b00      	cmp	r3, #0
   1b4e0:	bf18      	it	ne
   1b4e2:	4613      	movne	r3, r2
   1b4e4:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1b4e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1b4e8:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1b4ea:	b11b      	cbz	r3, 1b4f4 <transfer_next_chunk+0x60>
   1b4ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1b4ee:	2b00      	cmp	r3, #0
   1b4f0:	bf18      	it	ne
   1b4f2:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1b4f4:	2200      	movs	r2, #0
   1b4f6:	4669      	mov	r1, sp
   1b4f8:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1b4fa:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1b4fc:	f003 fed0 	bl	1f2a0 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1b500:	4b0d      	ldr	r3, [pc, #52]	; (1b538 <transfer_next_chunk+0xa4>)
   1b502:	4298      	cmp	r0, r3
   1b504:	d0dc      	beq.n	1b4c0 <transfer_next_chunk+0x2c>
			error = -EIO;
   1b506:	f06f 0504 	mvn.w	r5, #4
   1b50a:	e7cc      	b.n	1b4a6 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1b50c:	429d      	cmp	r5, r3
   1b50e:	bf28      	it	cs
   1b510:	461d      	movcs	r5, r3
   1b512:	e7d9      	b.n	1b4c8 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1b514:	461d      	mov	r5, r3
   1b516:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1b518:	e7d7      	b.n	1b4ca <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1b51a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1b51e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1b522:	d0d2      	beq.n	1b4ca <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1b524:	2d08      	cmp	r5, #8
   1b526:	bf28      	it	cs
   1b528:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b52a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1b52c:	462a      	mov	r2, r5
   1b52e:	f010 fdcd 	bl	2c0cc <memcpy>
			tx_buf = dev_data->buffer;
   1b532:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1b534:	e7c9      	b.n	1b4ca <transfer_next_chunk+0x36>
   1b536:	bf00      	nop
   1b538:	0bad0000 	.word	0x0bad0000

0001b53c <event_handler>:
{
   1b53c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1b53e:	7803      	ldrb	r3, [r0, #0]
{
   1b540:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1b542:	2b00      	cmp	r3, #0
   1b544:	d154      	bne.n	1b5f0 <event_handler+0xb4>
	if (!ctx->tx_len) {
   1b546:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1b548:	6e89      	ldr	r1, [r1, #104]	; 0x68
   1b54a:	b152      	cbz	r2, 1b562 <event_handler+0x26>
	if (len > ctx->tx_len) {
   1b54c:	4291      	cmp	r1, r2
   1b54e:	d91d      	bls.n	1b58c <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   1b550:	4a28      	ldr	r2, [pc, #160]	; (1b5f4 <event_handler+0xb8>)
   1b552:	4618      	mov	r0, r3
   1b554:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1b558:	4927      	ldr	r1, [pc, #156]	; (1b5f8 <event_handler+0xbc>)
   1b55a:	2201      	movs	r2, #1
   1b55c:	9300      	str	r3, [sp, #0]
   1b55e:	f00f f910 	bl	2a782 <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   1b562:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1b564:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1b566:	b15b      	cbz	r3, 1b580 <event_handler+0x44>
	if (len > ctx->rx_len) {
   1b568:	429a      	cmp	r2, r3
   1b56a:	d928      	bls.n	1b5be <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   1b56c:	4b21      	ldr	r3, [pc, #132]	; (1b5f4 <event_handler+0xb8>)
   1b56e:	2201      	movs	r2, #1
   1b570:	9302      	str	r3, [sp, #8]
   1b572:	2300      	movs	r3, #0
   1b574:	4920      	ldr	r1, [pc, #128]	; (1b5f8 <event_handler+0xbc>)
   1b576:	4618      	mov	r0, r3
   1b578:	e9cd 3300 	strd	r3, r3, [sp]
   1b57c:	f00f f901 	bl	2a782 <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1b580:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1b582:	b004      	add	sp, #16
   1b584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1b588:	f7ff bf84 	b.w	1b494 <transfer_next_chunk>
	ctx->tx_len -= len;
   1b58c:	1a52      	subs	r2, r2, r1
   1b58e:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   1b590:	b97a      	cbnz	r2, 1b5b2 <event_handler+0x76>
		++ctx->current_tx;
   1b592:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1b594:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   1b598:	3308      	adds	r3, #8
   1b59a:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   1b59c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1b59e:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   1b5a2:	3b01      	subs	r3, #1
   1b5a4:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1b5a6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1b5aa:	f00f f8d7 	bl	2a75c <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1b5ae:	6560      	str	r0, [r4, #84]	; 0x54
   1b5b0:	e7d7      	b.n	1b562 <event_handler+0x26>
	} else if (ctx->tx_buf) {
   1b5b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1b5b4:	2b00      	cmp	r3, #0
   1b5b6:	d0d4      	beq.n	1b562 <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   1b5b8:	440b      	add	r3, r1
   1b5ba:	6563      	str	r3, [r4, #84]	; 0x54
   1b5bc:	e7d1      	b.n	1b562 <event_handler+0x26>
	ctx->rx_len -= len;
   1b5be:	1a9b      	subs	r3, r3, r2
   1b5c0:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1b5c2:	b97b      	cbnz	r3, 1b5e4 <event_handler+0xa8>
		++ctx->current_rx;
   1b5c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1b5c6:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1b5ca:	3308      	adds	r3, #8
   1b5cc:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1b5ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1b5d0:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1b5d4:	3b01      	subs	r3, #1
   1b5d6:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1b5d8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1b5dc:	f00f f8be 	bl	2a75c <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1b5e0:	65e0      	str	r0, [r4, #92]	; 0x5c
   1b5e2:	e7cd      	b.n	1b580 <event_handler+0x44>
	} else if (ctx->rx_buf) {
   1b5e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1b5e6:	2b00      	cmp	r3, #0
   1b5e8:	d0ca      	beq.n	1b580 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   1b5ea:	4413      	add	r3, r2
   1b5ec:	65e3      	str	r3, [r4, #92]	; 0x5c
   1b5ee:	e7c7      	b.n	1b580 <event_handler+0x44>
}
   1b5f0:	b004      	add	sp, #16
   1b5f2:	bd10      	pop	{r4, pc}
   1b5f4:	00032738 	.word	0x00032738
   1b5f8:	0002d724 	.word	0x0002d724

0001b5fc <spi_nrfx_transceive>:
{
   1b5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b600:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1b602:	888b      	ldrh	r3, [r1, #4]
   1b604:	460f      	mov	r7, r1
   1b606:	0499      	lsls	r1, r3, #18
   1b608:	4680      	mov	r8, r0
   1b60a:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   1b60c:	6904      	ldr	r4, [r0, #16]
{
   1b60e:	b08f      	sub	sp, #60	; 0x3c
   1b610:	d435      	bmi.n	1b67e <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   1b612:	f04f 32ff 	mov.w	r2, #4294967295
   1b616:	f04f 33ff 	mov.w	r3, #4294967295
   1b61a:	f104 0010 	add.w	r0, r4, #16
   1b61e:	f005 fc67 	bl	20ef0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1b622:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1b624:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1b628:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1b62c:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   1b62e:	9305      	str	r3, [sp, #20]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1b630:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   1b634:	9306      	str	r3, [sp, #24]
   1b636:	b123      	cbz	r3, 1b642 <spi_nrfx_transceive+0x46>
   1b638:	f8da 3000 	ldr.w	r3, [sl]
   1b63c:	429f      	cmp	r7, r3
   1b63e:	f000 80da 	beq.w	1b7f6 <spi_nrfx_transceive+0x1fa>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1b642:	88be      	ldrh	r6, [r7, #4]
   1b644:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   1b648:	d020      	beq.n	1b68c <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   1b64a:	4ba1      	ldr	r3, [pc, #644]	; (1b8d0 <spi_nrfx_transceive+0x2d4>)
   1b64c:	2201      	movs	r2, #1
   1b64e:	9302      	str	r3, [sp, #8]
   1b650:	2300      	movs	r3, #0
   1b652:	49a0      	ldr	r1, [pc, #640]	; (1b8d4 <spi_nrfx_transceive+0x2d8>)
   1b654:	4618      	mov	r0, r3
   1b656:	e9cd 3300 	strd	r3, r3, [sp]
   1b65a:	f00f f892 	bl	2a782 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1b65e:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1b662:	6823      	ldr	r3, [r4, #0]
   1b664:	889b      	ldrh	r3, [r3, #4]
   1b666:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1b66a:	d104      	bne.n	1b676 <spi_nrfx_transceive+0x7a>
		ctx->owner = NULL;
   1b66c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1b66e:	f104 0010 	add.w	r0, r4, #16
   1b672:	f005 fbf9 	bl	20e68 <z_impl_k_sem_give>
}
   1b676:	4628      	mov	r0, r5
   1b678:	b00f      	add	sp, #60	; 0x3c
   1b67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1b67e:	69a3      	ldr	r3, [r4, #24]
   1b680:	2b00      	cmp	r3, #0
   1b682:	d1c6      	bne.n	1b612 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1b684:	6863      	ldr	r3, [r4, #4]
   1b686:	429f      	cmp	r7, r3
   1b688:	d1c3      	bne.n	1b612 <spi_nrfx_transceive+0x16>
   1b68a:	e7cb      	b.n	1b624 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1b68c:	f016 0201 	ands.w	r2, r6, #1
   1b690:	d00e      	beq.n	1b6b0 <spi_nrfx_transceive+0xb4>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1b692:	f8d8 2000 	ldr.w	r2, [r8]
   1b696:	4618      	mov	r0, r3
   1b698:	9203      	str	r2, [sp, #12]
   1b69a:	4a8f      	ldr	r2, [pc, #572]	; (1b8d8 <spi_nrfx_transceive+0x2dc>)
   1b69c:	498d      	ldr	r1, [pc, #564]	; (1b8d4 <spi_nrfx_transceive+0x2d8>)
   1b69e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1b6a2:	9300      	str	r3, [sp, #0]
   1b6a4:	2201      	movs	r2, #1
   1b6a6:	f00f f86c 	bl	2a782 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1b6aa:	f06f 0515 	mvn.w	r5, #21
   1b6ae:	e7d8      	b.n	1b662 <spi_nrfx_transceive+0x66>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1b6b0:	f016 0308 	ands.w	r3, r6, #8
   1b6b4:	d00a      	beq.n	1b6cc <spi_nrfx_transceive+0xd0>
		LOG_ERR("Loopback mode is not supported");
   1b6b6:	4b89      	ldr	r3, [pc, #548]	; (1b8dc <spi_nrfx_transceive+0x2e0>)
   1b6b8:	9200      	str	r2, [sp, #0]
   1b6ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b6be:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1b6c0:	2201      	movs	r2, #1
   1b6c2:	4618      	mov	r0, r3
   1b6c4:	4983      	ldr	r1, [pc, #524]	; (1b8d4 <spi_nrfx_transceive+0x2d8>)
   1b6c6:	f00f f85c 	bl	2a782 <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   1b6ca:	e7ee      	b.n	1b6aa <spi_nrfx_transceive+0xae>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1b6cc:	f3c6 1245 	ubfx	r2, r6, #5, #6
   1b6d0:	2a08      	cmp	r2, #8
   1b6d2:	d004      	beq.n	1b6de <spi_nrfx_transceive+0xe2>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1b6d4:	4a82      	ldr	r2, [pc, #520]	; (1b8e0 <spi_nrfx_transceive+0x2e4>)
   1b6d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1b6da:	9300      	str	r3, [sp, #0]
   1b6dc:	e7f0      	b.n	1b6c0 <spi_nrfx_transceive+0xc4>
	if (spi_cfg->frequency < 125000) {
   1b6de:	683a      	ldr	r2, [r7, #0]
   1b6e0:	9207      	str	r2, [sp, #28]
   1b6e2:	9907      	ldr	r1, [sp, #28]
   1b6e4:	4a7f      	ldr	r2, [pc, #508]	; (1b8e4 <spi_nrfx_transceive+0x2e8>)
   1b6e6:	4291      	cmp	r1, r2
   1b6e8:	d801      	bhi.n	1b6ee <spi_nrfx_transceive+0xf2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1b6ea:	4a7f      	ldr	r2, [pc, #508]	; (1b8e8 <spi_nrfx_transceive+0x2ec>)
   1b6ec:	e7f3      	b.n	1b6d6 <spi_nrfx_transceive+0xda>
	if (max_freq > 16000000 &&
   1b6ee:	4b7f      	ldr	r3, [pc, #508]	; (1b8ec <spi_nrfx_transceive+0x2f0>)
   1b6f0:	429d      	cmp	r5, r3
   1b6f2:	d906      	bls.n	1b702 <spi_nrfx_transceive+0x106>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   1b6f4:	4a7e      	ldr	r2, [pc, #504]	; (1b8f0 <spi_nrfx_transceive+0x2f4>)
   1b6f6:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1b6fa:	f012 0f03 	tst.w	r2, #3
   1b6fe:	bf18      	it	ne
   1b700:	461d      	movne	r5, r3
	config = dev_config->def_config;
   1b702:	9b05      	ldr	r3, [sp, #20]
   1b704:	f10d 0c20 	add.w	ip, sp, #32
   1b708:	f103 0e0c 	add.w	lr, r3, #12
   1b70c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1b710:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1b714:	9b07      	ldr	r3, [sp, #28]
	config = dev_config->def_config;
   1b716:	e89e 0003 	ldmia.w	lr, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1b71a:	42ab      	cmp	r3, r5
   1b71c:	bf28      	it	cs
   1b71e:	462b      	movcs	r3, r5
   1b720:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1b722:	4b74      	ldr	r3, [pc, #464]	; (1b8f4 <spi_nrfx_transceive+0x2f8>)
	config = dev_config->def_config;
   1b724:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   1b728:	429d      	cmp	r5, r3
   1b72a:	d946      	bls.n	1b7ba <spi_nrfx_transceive+0x1be>
	} else if (frequency < 500000) {
   1b72c:	4b72      	ldr	r3, [pc, #456]	; (1b8f8 <spi_nrfx_transceive+0x2fc>)
   1b72e:	429d      	cmp	r5, r3
   1b730:	d946      	bls.n	1b7c0 <spi_nrfx_transceive+0x1c4>
	} else if (frequency < 1000000) {
   1b732:	4b72      	ldr	r3, [pc, #456]	; (1b8fc <spi_nrfx_transceive+0x300>)
   1b734:	429d      	cmp	r5, r3
   1b736:	d946      	bls.n	1b7c6 <spi_nrfx_transceive+0x1ca>
	} else if (frequency < 2000000) {
   1b738:	4b71      	ldr	r3, [pc, #452]	; (1b900 <spi_nrfx_transceive+0x304>)
   1b73a:	429d      	cmp	r5, r3
   1b73c:	d946      	bls.n	1b7cc <spi_nrfx_transceive+0x1d0>
	} else if (frequency < 4000000) {
   1b73e:	4b71      	ldr	r3, [pc, #452]	; (1b904 <spi_nrfx_transceive+0x308>)
   1b740:	429d      	cmp	r5, r3
   1b742:	d946      	bls.n	1b7d2 <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 8000000) {
   1b744:	4b70      	ldr	r3, [pc, #448]	; (1b908 <spi_nrfx_transceive+0x30c>)
   1b746:	429d      	cmp	r5, r3
   1b748:	d346      	bcc.n	1b7d8 <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 16000000) {
   1b74a:	4b68      	ldr	r3, [pc, #416]	; (1b8ec <spi_nrfx_transceive+0x2f0>)
   1b74c:	429d      	cmp	r5, r3
   1b74e:	d346      	bcc.n	1b7de <spi_nrfx_transceive+0x1e2>
		return NRF_SPIM_FREQ_16M;
   1b750:	4b6e      	ldr	r3, [pc, #440]	; (1b90c <spi_nrfx_transceive+0x310>)
   1b752:	429d      	cmp	r5, r3
   1b754:	bf2c      	ite	cs
   1b756:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   1b75a:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1b75e:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1b760:	950a      	str	r5, [sp, #40]	; 0x28
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1b762:	f006 0304 	and.w	r3, r6, #4
   1b766:	d53d      	bpl.n	1b7e4 <spi_nrfx_transceive+0x1e8>
			return NRF_SPIM_MODE_2;
   1b768:	2b00      	cmp	r3, #0
   1b76a:	bf14      	ite	ne
   1b76c:	2303      	movne	r3, #3
   1b76e:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1b770:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (dev_data->initialized) {
   1b774:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   1b776:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1b77a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
	if (dev_data->initialized) {
   1b77e:	b12b      	cbz	r3, 1b78c <spi_nrfx_transceive+0x190>
		nrfx_spim_uninit(&dev_config->spim);
   1b780:	9805      	ldr	r0, [sp, #20]
   1b782:	f003 fd23 	bl	1f1cc <nrfx_spim_uninit>
		dev_data->initialized = false;
   1b786:	2300      	movs	r3, #0
   1b788:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1b78c:	4653      	mov	r3, sl
   1b78e:	4a60      	ldr	r2, [pc, #384]	; (1b910 <spi_nrfx_transceive+0x314>)
   1b790:	9805      	ldr	r0, [sp, #20]
   1b792:	a908      	add	r1, sp, #32
   1b794:	f003 fbe8 	bl	1ef68 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1b798:	4b5e      	ldr	r3, [pc, #376]	; (1b914 <spi_nrfx_transceive+0x318>)
   1b79a:	4298      	cmp	r0, r3
   1b79c:	d026      	beq.n	1b7ec <spi_nrfx_transceive+0x1f0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1b79e:	4b5e      	ldr	r3, [pc, #376]	; (1b918 <spi_nrfx_transceive+0x31c>)
   1b7a0:	9003      	str	r0, [sp, #12]
   1b7a2:	9302      	str	r3, [sp, #8]
   1b7a4:	2300      	movs	r3, #0
   1b7a6:	2201      	movs	r2, #1
   1b7a8:	4618      	mov	r0, r3
   1b7aa:	e9cd 3300 	strd	r3, r3, [sp]
   1b7ae:	4949      	ldr	r1, [pc, #292]	; (1b8d4 <spi_nrfx_transceive+0x2d8>)
   1b7b0:	f00e ffe7 	bl	2a782 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1b7b4:	f06f 0504 	mvn.w	r5, #4
   1b7b8:	e753      	b.n	1b662 <spi_nrfx_transceive+0x66>
		return NRF_SPIM_FREQ_125K;
   1b7ba:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1b7be:	e7ce      	b.n	1b75e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_250K;
   1b7c0:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1b7c4:	e7cb      	b.n	1b75e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_500K;
   1b7c6:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1b7ca:	e7c8      	b.n	1b75e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_1M;
   1b7cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1b7d0:	e7c5      	b.n	1b75e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_2M;
   1b7d2:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1b7d6:	e7c2      	b.n	1b75e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_4M;
   1b7d8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1b7dc:	e7bf      	b.n	1b75e <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_8M;
   1b7de:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1b7e2:	e7bc      	b.n	1b75e <spi_nrfx_transceive+0x162>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1b7e4:	3b00      	subs	r3, #0
   1b7e6:	bf18      	it	ne
   1b7e8:	2301      	movne	r3, #1
   1b7ea:	e7c1      	b.n	1b770 <spi_nrfx_transceive+0x174>
	dev_data->initialized = true;
   1b7ec:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1b7ee:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   1b7f2:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   1b7f6:	2301      	movs	r3, #1
   1b7f8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1b7fc:	f1b9 0f00 	cmp.w	r9, #0
   1b800:	d154      	bne.n	1b8ac <spi_nrfx_transceive+0x2b0>
   1b802:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1b806:	2300      	movs	r3, #0
   1b808:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1b80a:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1b80e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1b812:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1b816:	f00e ffa1 	bl	2a75c <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1b81a:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1b81c:	f1bb 0f00 	cmp.w	fp, #0
   1b820:	d14c      	bne.n	1b8bc <spi_nrfx_transceive+0x2c0>
   1b822:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1b826:	2300      	movs	r3, #0
   1b828:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1b82a:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1b82e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1b832:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1b836:	f00e ff91 	bl	2a75c <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1b83a:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1b83c:	2101      	movs	r1, #1
   1b83e:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1b840:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1b842:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1b844:	4620      	mov	r0, r4
   1b846:	f00e ffac 	bl	2a7a2 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1b84a:	4640      	mov	r0, r8
   1b84c:	f7ff fe22 	bl	1b494 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1b850:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1b852:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1b854:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1b856:	429d      	cmp	r5, r3
   1b858:	bf38      	it	cc
   1b85a:	461d      	movcc	r5, r3
   1b85c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1b860:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1b862:	f857 3b28 	ldr.w	r3, [r7], #40
   1b866:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1b86a:	681b      	ldr	r3, [r3, #0]
   1b86c:	4631      	mov	r1, r6
   1b86e:	fbb5 f5f3 	udiv	r5, r5, r3
   1b872:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1b876:	35c8      	adds	r5, #200	; 0xc8
   1b878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b87c:	2300      	movs	r3, #0
   1b87e:	fbe5 010c 	umlal	r0, r1, r5, ip
   1b882:	f7ed fb35 	bl	8ef0 <__aeabi_uldivmod>
   1b886:	4602      	mov	r2, r0
   1b888:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1b88a:	4638      	mov	r0, r7
   1b88c:	f005 fb30 	bl	20ef0 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1b890:	b1e0      	cbz	r0, 1b8cc <spi_nrfx_transceive+0x2d0>
		LOG_ERR("Timeout waiting for transfer complete");
   1b892:	4b22      	ldr	r3, [pc, #136]	; (1b91c <spi_nrfx_transceive+0x320>)
   1b894:	2201      	movs	r2, #1
   1b896:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1b89a:	4630      	mov	r0, r6
   1b89c:	4633      	mov	r3, r6
   1b89e:	490d      	ldr	r1, [pc, #52]	; (1b8d4 <spi_nrfx_transceive+0x2d8>)
   1b8a0:	9600      	str	r6, [sp, #0]
   1b8a2:	f00e ff6e 	bl	2a782 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   1b8a6:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1b8aa:	e6da      	b.n	1b662 <spi_nrfx_transceive+0x66>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1b8ac:	f8d9 3000 	ldr.w	r3, [r9]
   1b8b0:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1b8b2:	2b00      	cmp	r3, #0
   1b8b4:	d0a7      	beq.n	1b806 <spi_nrfx_transceive+0x20a>
   1b8b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b8ba:	e7a5      	b.n	1b808 <spi_nrfx_transceive+0x20c>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1b8bc:	f8db 3000 	ldr.w	r3, [fp]
   1b8c0:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1b8c2:	2b00      	cmp	r3, #0
   1b8c4:	d0af      	beq.n	1b826 <spi_nrfx_transceive+0x22a>
   1b8c6:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b8ca:	e7ad      	b.n	1b828 <spi_nrfx_transceive+0x22c>
	status = ctx->sync_status;
   1b8cc:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1b8ce:	e6c8      	b.n	1b662 <spi_nrfx_transceive+0x66>
   1b8d0:	00032756 	.word	0x00032756
   1b8d4:	0002d724 	.word	0x0002d724
   1b8d8:	00032770 	.word	0x00032770
   1b8dc:	00032792 	.word	0x00032792
   1b8e0:	000327b1 	.word	0x000327b1
   1b8e4:	0001e847 	.word	0x0001e847
   1b8e8:	000327e0 	.word	0x000327e0
   1b8ec:	00f42400 	.word	0x00f42400
   1b8f0:	40005000 	.word	0x40005000
   1b8f4:	0003d08f 	.word	0x0003d08f
   1b8f8:	0007a11f 	.word	0x0007a11f
   1b8fc:	000f423f 	.word	0x000f423f
   1b900:	001e847f 	.word	0x001e847f
   1b904:	003d08ff 	.word	0x003d08ff
   1b908:	007a1200 	.word	0x007a1200
   1b90c:	01e84800 	.word	0x01e84800
   1b910:	0001b53d 	.word	0x0001b53d
   1b914:	0bad0000 	.word	0x0bad0000
   1b918:	00032811 	.word	0x00032811
   1b91c:	00032838 	.word	0x00032838

0001b920 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1b920:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1b924:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1b928:	280a      	cmp	r0, #10
   1b92a:	bf9a      	itte	ls
   1b92c:	4b02      	ldrls	r3, [pc, #8]	; (1b938 <qspi_get_zephyr_ret_code+0x18>)
   1b92e:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1b932:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1b936:	4770      	bx	lr
   1b938:	0002e690 	.word	0x0002e690

0001b93c <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1b93c:	4b02      	ldr	r3, [pc, #8]	; (1b948 <qspi_nor_pages_layout+0xc>)
   1b93e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1b940:	2301      	movs	r3, #1
   1b942:	6013      	str	r3, [r2, #0]
}
   1b944:	4770      	bx	lr
   1b946:	bf00      	nop
   1b948:	0002e3e0 	.word	0x0002e3e0

0001b94c <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1b94c:	4800      	ldr	r0, [pc, #0]	; (1b950 <qspi_flash_get_parameters+0x4>)
   1b94e:	4770      	bx	lr
   1b950:	0002e374 	.word	0x0002e374

0001b954 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1b954:	4b05      	ldr	r3, [pc, #20]	; (1b96c <qspi_wait_for_completion.isra.0+0x18>)
   1b956:	4299      	cmp	r1, r3
   1b958:	d106      	bne.n	1b968 <qspi_wait_for_completion.isra.0+0x14>
   1b95a:	f04f 32ff 	mov.w	r2, #4294967295
   1b95e:	f04f 33ff 	mov.w	r3, #4294967295
   1b962:	3030      	adds	r0, #48	; 0x30
   1b964:	f005 bac4 	b.w	20ef0 <z_impl_k_sem_take>
}
   1b968:	4770      	bx	lr
   1b96a:	bf00      	nop
   1b96c:	0bad0000 	.word	0x0bad0000

0001b970 <qspi_device_init>:
{
   1b970:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1b972:	6905      	ldr	r5, [r0, #16]
{
   1b974:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   1b976:	4e0f      	ldr	r6, [pc, #60]	; (1b9b4 <qspi_device_init+0x44>)
	qspi_lock(dev);
   1b978:	4628      	mov	r0, r5
   1b97a:	f00e ff6d 	bl	2a858 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1b97e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1b982:	f00e ff52 	bl	2a82a <k_sem_give>
	if (!qspi_initialized) {
   1b986:	7833      	ldrb	r3, [r6, #0]
   1b988:	b98b      	cbnz	r3, 1b9ae <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1b98a:	462a      	mov	r2, r5
   1b98c:	490a      	ldr	r1, [pc, #40]	; (1b9b8 <qspi_device_init+0x48>)
   1b98e:	6860      	ldr	r0, [r4, #4]
   1b990:	f003 f86a 	bl	1ea68 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1b994:	f7ff ffc4 	bl	1b920 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1b998:	fab0 f380 	clz	r3, r0
   1b99c:	4605      	mov	r5, r0
   1b99e:	095b      	lsrs	r3, r3, #5
   1b9a0:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1b9a2:	6920      	ldr	r0, [r4, #16]
   1b9a4:	3018      	adds	r0, #24
   1b9a6:	f00e ff40 	bl	2a82a <k_sem_give>
}
   1b9aa:	4628      	mov	r0, r5
   1b9ac:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1b9ae:	2500      	movs	r5, #0
   1b9b0:	e7f7      	b.n	1b9a2 <qspi_device_init+0x32>
   1b9b2:	bf00      	nop
   1b9b4:	20030279 	.word	0x20030279
   1b9b8:	0002a82f 	.word	0x0002a82f

0001b9bc <qspi_send_cmd>:
{
   1b9bc:	b570      	push	{r4, r5, r6, lr}
	if (cmd->tx_buf) {
   1b9be:	684c      	ldr	r4, [r1, #4]
{
   1b9c0:	4605      	mov	r5, r0
   1b9c2:	b088      	sub	sp, #32
	if (cmd->tx_buf) {
   1b9c4:	b1ec      	cbz	r4, 1ba02 <qspi_send_cmd+0x46>
		tx_buf = cmd->tx_buf->buf;
   1b9c6:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1b9ca:	6888      	ldr	r0, [r1, #8]
   1b9cc:	b1d8      	cbz	r0, 1ba06 <qspi_send_cmd+0x4a>
		rx_len = cmd->rx_buf->len;
   1b9ce:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1b9d2:	b1c8      	cbz	r0, 1ba08 <qspi_send_cmd+0x4c>
   1b9d4:	b1c3      	cbz	r3, 1ba08 <qspi_send_cmd+0x4c>
		if (rx_len != tx_len) {
   1b9d6:	4283      	cmp	r3, r0
   1b9d8:	d10f      	bne.n	1b9fa <qspi_send_cmd+0x3e>
		xfer_len += tx_len;
   1b9da:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1b9dc:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1b9de:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1b9e0:	d915      	bls.n	1ba0e <qspi_send_cmd+0x52>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1b9e2:	e9cd 1303 	strd	r1, r3, [sp, #12]
   1b9e6:	4b1a      	ldr	r3, [pc, #104]	; (1ba50 <qspi_send_cmd+0x94>)
   1b9e8:	2202      	movs	r2, #2
   1b9ea:	9302      	str	r3, [sp, #8]
   1b9ec:	2300      	movs	r3, #0
   1b9ee:	4919      	ldr	r1, [pc, #100]	; (1ba54 <qspi_send_cmd+0x98>)
   1b9f0:	4618      	mov	r0, r3
   1b9f2:	e9cd 3300 	strd	r3, r3, [sp]
   1b9f6:	f00e ff20 	bl	2a83a <z_log_msg_runtime_create.constprop.0>
}
   1b9fa:	f06f 0015 	mvn.w	r0, #21
   1b9fe:	b008      	add	sp, #32
   1ba00:	bd70      	pop	{r4, r5, r6, pc}
	size_t tx_len = 0;
   1ba02:	4623      	mov	r3, r4
   1ba04:	e7e1      	b.n	1b9ca <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   1ba06:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1ba08:	3301      	adds	r3, #1
   1ba0a:	4403      	add	r3, r0
   1ba0c:	e7e6      	b.n	1b9dc <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1ba0e:	f88d 3019 	strb.w	r3, [sp, #25]
   1ba12:	f240 1301 	movw	r3, #257	; 0x101
   1ba16:	f8ad 301a 	strh.w	r3, [sp, #26]
   1ba1a:	2300      	movs	r3, #0
	qspi_lock(dev);
   1ba1c:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1ba1e:	f88d 301c 	strb.w	r3, [sp, #28]
   1ba22:	f88d 1018 	strb.w	r1, [sp, #24]
   1ba26:	f88d 201d 	strb.w	r2, [sp, #29]
	qspi_lock(dev);
   1ba2a:	f00e ff15 	bl	2a858 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1ba2e:	4621      	mov	r1, r4
   1ba30:	4632      	mov	r2, r6
   1ba32:	a806      	add	r0, sp, #24
   1ba34:	f003 f90a 	bl	1ec4c <nrfx_qspi_cinstr_xfer>
   1ba38:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1ba3a:	6928      	ldr	r0, [r5, #16]
   1ba3c:	3018      	adds	r0, #24
   1ba3e:	f00e fef4 	bl	2a82a <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1ba42:	4620      	mov	r0, r4
}
   1ba44:	b008      	add	sp, #32
   1ba46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
   1ba4a:	f7ff bf69 	b.w	1b920 <qspi_get_zephyr_ret_code>
   1ba4e:	bf00      	nop
   1ba50:	00032875 	.word	0x00032875
   1ba54:	0002d714 	.word	0x0002d714

0001ba58 <qspi_device_uninit>:
{
   1ba58:	b538      	push	{r3, r4, r5, lr}
   1ba5a:	4604      	mov	r4, r0
	qspi_lock(dev);
   1ba5c:	6900      	ldr	r0, [r0, #16]
   1ba5e:	f00e fefb 	bl	2a858 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1ba62:	6925      	ldr	r5, [r4, #16]
   1ba64:	2200      	movs	r2, #0
   1ba66:	2300      	movs	r3, #0
   1ba68:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1ba6c:	f005 fa40 	bl	20ef0 <z_impl_k_sem_take>
	if (last) {
   1ba70:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1ba72:	b94b      	cbnz	r3, 1ba88 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1ba74:	4d0a      	ldr	r5, [pc, #40]	; (1baa0 <qspi_device_uninit+0x48>)
   1ba76:	f003 f94b 	bl	1ed10 <nrfx_qspi_mem_busy_check>
   1ba7a:	42a8      	cmp	r0, r5
   1ba7c:	d10a      	bne.n	1ba94 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1ba7e:	f003 f969 	bl	1ed54 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1ba82:	2200      	movs	r2, #0
   1ba84:	4b07      	ldr	r3, [pc, #28]	; (1baa4 <qspi_device_uninit+0x4c>)
   1ba86:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1ba88:	6920      	ldr	r0, [r4, #16]
}
   1ba8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1ba8e:	3018      	adds	r0, #24
   1ba90:	f00e becb 	b.w	2a82a <k_sem_give>
	return z_impl_k_sleep(timeout);
   1ba94:	2100      	movs	r1, #0
   1ba96:	f240 6067 	movw	r0, #1639	; 0x667
   1ba9a:	f007 f8d9 	bl	22c50 <z_impl_k_sleep>
   1ba9e:	e7ea      	b.n	1ba76 <qspi_device_uninit+0x1e>
   1baa0:	0bad0000 	.word	0x0bad0000
   1baa4:	20030279 	.word	0x20030279

0001baa8 <qspi_nor_read>:
{
   1baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1baac:	4681      	mov	r9, r0
   1baae:	460e      	mov	r6, r1
   1bab0:	461c      	mov	r4, r3
	if (!dest) {
   1bab2:	4690      	mov	r8, r2
{
   1bab4:	b08b      	sub	sp, #44	; 0x2c
	if (!dest) {
   1bab6:	b1aa      	cbz	r2, 1bae4 <qspi_nor_read+0x3c>
	if (!size) {
   1bab8:	2b00      	cmp	r3, #0
   1baba:	f000 809f 	beq.w	1bbfc <qspi_nor_read+0x154>
	if (addr < 0 ||
   1babe:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1bac0:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1bac2:	db03      	blt.n	1bacc <qspi_nor_read+0x24>
   1bac4:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1bac6:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1bac8:	4293      	cmp	r3, r2
   1baca:	d911      	bls.n	1baf0 <qspi_nor_read+0x48>
		LOG_ERR("read error: address or size "
   1bacc:	4b4c      	ldr	r3, [pc, #304]	; (1bc00 <qspi_nor_read+0x158>)
   1bace:	2201      	movs	r2, #1
   1bad0:	9302      	str	r3, [sp, #8]
   1bad2:	2300      	movs	r3, #0
   1bad4:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1bad8:	4618      	mov	r0, r3
   1bada:	e9cd 3300 	strd	r3, r3, [sp]
   1bade:	4949      	ldr	r1, [pc, #292]	; (1bc04 <qspi_nor_read+0x15c>)
   1bae0:	f00e feab 	bl	2a83a <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1bae4:	f06f 0515 	mvn.w	r5, #21
}
   1bae8:	4628      	mov	r0, r5
   1baea:	b00b      	add	sp, #44	; 0x2c
   1baec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1baf0:	f7ff ff3e 	bl	1b970 <qspi_device_init>
	if (rc != 0) {
   1baf4:	4605      	mov	r5, r0
   1baf6:	2800      	cmp	r0, #0
   1baf8:	d17c      	bne.n	1bbf4 <qspi_nor_read+0x14c>
	qspi_lock(dev);
   1bafa:	4275      	negs	r5, r6
   1bafc:	f005 0503 	and.w	r5, r5, #3
   1bb00:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1bb04:	f00e fea8 	bl	2a858 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1bb08:	42a5      	cmp	r5, r4
   1bb0a:	bf28      	it	cs
   1bb0c:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1bb0e:	f1d8 0300 	rsbs	r3, r8, #0
   1bb12:	f003 0303 	and.w	r3, r3, #3
   1bb16:	f008 0703 	and.w	r7, r8, #3
   1bb1a:	bf58      	it	pl
   1bb1c:	425f      	negpl	r7, r3
   1bb1e:	427f      	negs	r7, r7
   1bb20:	f007 0703 	and.w	r7, r7, #3
   1bb24:	42a7      	cmp	r7, r4
   1bb26:	bf28      	it	cs
   1bb28:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1bb2a:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1bb2c:	1be4      	subs	r4, r4, r7
   1bb2e:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1bb32:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   1bb36:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1bb38:	bfc8      	it	gt
   1bb3a:	46a2      	movgt	sl, r4
   1bb3c:	f003 0b03 	and.w	fp, r3, #3
   1bb40:	bfc8      	it	gt
   1bb42:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   1bb46:	f1ba 0f00 	cmp.w	sl, #0
   1bb4a:	d019      	beq.n	1bb80 <qspi_nor_read+0xd8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1bb4c:	eb08 0307 	add.w	r3, r8, r7
   1bb50:	1972      	adds	r2, r6, r5
   1bb52:	4651      	mov	r1, sl
   1bb54:	4618      	mov	r0, r3
   1bb56:	9307      	str	r3, [sp, #28]
   1bb58:	f00f fb39 	bl	2b1ce <nrfx_qspi_read>
   1bb5c:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1bb5e:	4601      	mov	r1, r0
   1bb60:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1bb64:	f7ff fef6 	bl	1b954 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1bb68:	4a27      	ldr	r2, [pc, #156]	; (1bc08 <qspi_nor_read+0x160>)
   1bb6a:	4294      	cmp	r4, r2
   1bb6c:	d139      	bne.n	1bbe2 <qspi_nor_read+0x13a>
		if (flash_prefix != dest_prefix) {
   1bb6e:	42bd      	cmp	r5, r7
   1bb70:	d006      	beq.n	1bb80 <qspi_nor_read+0xd8>
__ssp_bos_icheck3(memmove, void *, const void *)
   1bb72:	9b07      	ldr	r3, [sp, #28]
   1bb74:	4652      	mov	r2, sl
   1bb76:	4619      	mov	r1, r3
   1bb78:	eb08 0005 	add.w	r0, r8, r5
   1bb7c:	f010 fac6 	bl	2c10c <memmove>
	if (flash_prefix != 0) {
   1bb80:	b1ad      	cbz	r5, 1bbae <qspi_nor_read+0x106>
				     (WORD_SIZE - flash_prefix));
   1bb82:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1bb86:	2104      	movs	r1, #4
   1bb88:	1bf2      	subs	r2, r6, r7
   1bb8a:	a808      	add	r0, sp, #32
   1bb8c:	f00f fb1f 	bl	2b1ce <nrfx_qspi_read>
   1bb90:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1bb92:	4601      	mov	r1, r0
   1bb94:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1bb98:	f7ff fedc 	bl	1b954 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1bb9c:	4b1a      	ldr	r3, [pc, #104]	; (1bc08 <qspi_nor_read+0x160>)
   1bb9e:	429c      	cmp	r4, r3
   1bba0:	d11f      	bne.n	1bbe2 <qspi_nor_read+0x13a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1bba2:	ab08      	add	r3, sp, #32
   1bba4:	462a      	mov	r2, r5
   1bba6:	4640      	mov	r0, r8
   1bba8:	19d9      	adds	r1, r3, r7
   1bbaa:	f010 fa8f 	bl	2c0cc <memcpy>
	if (flash_suffix != 0) {
   1bbae:	f1bb 0f00 	cmp.w	fp, #0
   1bbb2:	d015      	beq.n	1bbe0 <qspi_nor_read+0x138>
				     addr + flash_prefix + flash_middle);
   1bbb4:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1bbb6:	2108      	movs	r1, #8
   1bbb8:	4452      	add	r2, sl
   1bbba:	a808      	add	r0, sp, #32
   1bbbc:	f00f fb07 	bl	2b1ce <nrfx_qspi_read>
   1bbc0:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1bbc2:	4601      	mov	r1, r0
   1bbc4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1bbc8:	f7ff fec4 	bl	1b954 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1bbcc:	4b0e      	ldr	r3, [pc, #56]	; (1bc08 <qspi_nor_read+0x160>)
   1bbce:	429c      	cmp	r4, r3
   1bbd0:	d107      	bne.n	1bbe2 <qspi_nor_read+0x13a>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1bbd2:	eb0a 0005 	add.w	r0, sl, r5
   1bbd6:	465a      	mov	r2, fp
   1bbd8:	a908      	add	r1, sp, #32
   1bbda:	4440      	add	r0, r8
   1bbdc:	f010 fa76 	bl	2c0cc <memcpy>
	return res;
   1bbe0:	4c09      	ldr	r4, [pc, #36]	; (1bc08 <qspi_nor_read+0x160>)
	k_sem_give(&dev_data->sem);
   1bbe2:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1bbe6:	3018      	adds	r0, #24
   1bbe8:	f00e fe1f 	bl	2a82a <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1bbec:	4620      	mov	r0, r4
   1bbee:	f7ff fe97 	bl	1b920 <qspi_get_zephyr_ret_code>
   1bbf2:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1bbf4:	4648      	mov	r0, r9
   1bbf6:	f7ff ff2f 	bl	1ba58 <qspi_device_uninit>
	return rc;
   1bbfa:	e775      	b.n	1bae8 <qspi_nor_read+0x40>
		return 0;
   1bbfc:	461d      	mov	r5, r3
   1bbfe:	e773      	b.n	1bae8 <qspi_nor_read+0x40>
   1bc00:	00032898 	.word	0x00032898
   1bc04:	0002d714 	.word	0x0002d714
   1bc08:	0bad0000 	.word	0x0bad0000

0001bc0c <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   1bc0c:	2202      	movs	r2, #2
{
   1bc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc12:	4b64      	ldr	r3, [pc, #400]	; (1bda4 <qspi_nor_init+0x198>)
   1bc14:	b090      	sub	sp, #64	; 0x40
   1bc16:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1bc1a:	6843      	ldr	r3, [r0, #4]
{
   1bc1c:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1bc1e:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1bc20:	2100      	movs	r1, #0
   1bc22:	4630      	mov	r0, r6
   1bc24:	aa0d      	add	r2, sp, #52	; 0x34
   1bc26:	f00f f8fc 	bl	2ae22 <pinctrl_lookup_state>
	if (ret < 0) {
   1bc2a:	1e04      	subs	r4, r0, #0
   1bc2c:	db35      	blt.n	1bc9a <qspi_nor_init+0x8e>
	return pinctrl_apply_state_direct(config, state);
   1bc2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1bc30:	6832      	ldr	r2, [r6, #0]
   1bc32:	7919      	ldrb	r1, [r3, #4]
   1bc34:	6818      	ldr	r0, [r3, #0]
   1bc36:	f00f f907 	bl	2ae48 <pinctrl_configure_pins>
	if (ret < 0) {
   1bc3a:	1e04      	subs	r4, r0, #0
   1bc3c:	db2d      	blt.n	1bc9a <qspi_nor_init+0x8e>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1bc3e:	2200      	movs	r2, #0
   1bc40:	2101      	movs	r1, #1
   1bc42:	202b      	movs	r0, #43	; 0x2b
   1bc44:	f7f5 fa84 	bl	11150 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1bc48:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1bc4a:	692a      	ldr	r2, [r5, #16]
   1bc4c:	4630      	mov	r0, r6
   1bc4e:	4956      	ldr	r1, [pc, #344]	; (1bda8 <qspi_nor_init+0x19c>)
   1bc50:	f002 ff0a 	bl	1ea68 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1bc54:	f7ff fe64 	bl	1b920 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1bc58:	1e04      	subs	r4, r0, #0
   1bc5a:	db1e      	blt.n	1bc9a <qspi_nor_init+0x8e>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1bc5c:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1bc5e:	3b02      	subs	r3, #2
   1bc60:	2b01      	cmp	r3, #1
   1bc62:	d91e      	bls.n	1bca2 <qspi_nor_init+0x96>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1bc64:	f896 800a 	ldrb.w	r8, [r6, #10]
   1bc68:	f1a8 0803 	sub.w	r8, r8, #3
   1bc6c:	f1b8 0f01 	cmp.w	r8, #1
   1bc70:	bf8c      	ite	hi
   1bc72:	f04f 0800 	movhi.w	r8, #0
   1bc76:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1bc7a:	4628      	mov	r0, r5
   1bc7c:	f00e fe0e 	bl	2a89c <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1bc80:	1e04      	subs	r4, r0, #0
   1bc82:	da11      	bge.n	1bca8 <qspi_nor_init+0x9c>
			LOG_ERR("RDSR failed: %d", ret);
   1bc84:	4b49      	ldr	r3, [pc, #292]	; (1bdac <qspi_nor_init+0x1a0>)
   1bc86:	2201      	movs	r2, #1
   1bc88:	9302      	str	r3, [sp, #8]
   1bc8a:	2300      	movs	r3, #0
   1bc8c:	4948      	ldr	r1, [pc, #288]	; (1bdb0 <qspi_nor_init+0x1a4>)
   1bc8e:	4618      	mov	r0, r3
   1bc90:	e9cd 3300 	strd	r3, r3, [sp]
   1bc94:	9403      	str	r4, [sp, #12]
   1bc96:	f00e fdd0 	bl	2a83a <z_log_msg_runtime_create.constprop.0>
}
   1bc9a:	4620      	mov	r0, r4
   1bc9c:	b010      	add	sp, #64	; 0x40
   1bc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1bca2:	f04f 0801 	mov.w	r8, #1
   1bca6:	e7e8      	b.n	1bc7a <qspi_nor_init+0x6e>
		uint8_t sr = (uint8_t)ret;
   1bca8:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1bcaa:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1bcae:	45a0      	cmp	r8, r4
   1bcb0:	ae0a      	add	r6, sp, #40	; 0x28
   1bcb2:	af0b      	add	r7, sp, #44	; 0x2c
   1bcb4:	d02f      	beq.n	1bd16 <qspi_nor_init+0x10a>
	uint8_t sr_array[2] = {0};
   1bcb6:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1bcb8:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1bcbc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		sr_array[0] = sr_val;
   1bcc0:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	const struct qspi_buf sr_buf = {
   1bcc4:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   1bcc6:	4628      	mov	r0, r5
   1bcc8:	a90d      	add	r1, sp, #52	; 0x34
	struct qspi_cmd cmd = {
   1bcca:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct qspi_buf sr_buf = {
   1bcce:	960b      	str	r6, [sp, #44]	; 0x2c
	struct qspi_cmd cmd = {
   1bcd0:	930f      	str	r3, [sp, #60]	; 0x3c
   1bcd2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   1bcd6:	970e      	str	r7, [sp, #56]	; 0x38
	ret = qspi_send_cmd(dev, &cmd, true);
   1bcd8:	f7ff fe70 	bl	1b9bc <qspi_send_cmd>
	if (ret == 0) {
   1bcdc:	1e04      	subs	r4, r0, #0
   1bcde:	d013      	beq.n	1bd08 <qspi_nor_init+0xfc>
		if (ret < 0) {
   1bce0:	dadb      	bge.n	1bc9a <qspi_nor_init+0x8e>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1bce2:	4a34      	ldr	r2, [pc, #208]	; (1bdb4 <qspi_nor_init+0x1a8>)
   1bce4:	4b34      	ldr	r3, [pc, #208]	; (1bdb8 <qspi_nor_init+0x1ac>)
   1bce6:	4932      	ldr	r1, [pc, #200]	; (1bdb0 <qspi_nor_init+0x1a4>)
   1bce8:	f1b8 0f00 	cmp.w	r8, #0
   1bcec:	bf18      	it	ne
   1bcee:	4613      	movne	r3, r2
   1bcf0:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1bcf4:	4b31      	ldr	r3, [pc, #196]	; (1bdbc <qspi_nor_init+0x1b0>)
   1bcf6:	2201      	movs	r2, #1
   1bcf8:	9302      	str	r3, [sp, #8]
   1bcfa:	2300      	movs	r3, #0
   1bcfc:	4618      	mov	r0, r3
   1bcfe:	e9cd 3300 	strd	r3, r3, [sp]
   1bd02:	f00e fd9a 	bl	2a83a <z_log_msg_runtime_create.constprop.0>
	if (ret != 0) {
   1bd06:	e7c8      	b.n	1bc9a <qspi_nor_init+0x8e>
		ret = qspi_rdsr(dev, 1);
   1bd08:	4628      	mov	r0, r5
   1bd0a:	f00e fdc7 	bl	2a89c <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1bd0e:	1e04      	subs	r4, r0, #0
   1bd10:	dbe7      	blt.n	1bce2 <qspi_nor_init+0xd6>
   1bd12:	07e3      	lsls	r3, r4, #31
   1bd14:	d4f8      	bmi.n	1bd08 <qspi_nor_init+0xfc>
	qspi_device_uninit(dev);
   1bd16:	4628      	mov	r0, r5
   1bd18:	f7ff fe9e 	bl	1ba58 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1bd1c:	2403      	movs	r4, #3
   1bd1e:	2300      	movs	r3, #0
   1bd20:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   1bd24:	930e      	str	r3, [sp, #56]	; 0x38
   1bd26:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   1bd28:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   1bd2a:	960b      	str	r6, [sp, #44]	; 0x2c
	const struct qspi_cmd cmd = {
   1bd2c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1bd30:	970f      	str	r7, [sp, #60]	; 0x3c
	int ret = qspi_device_init(dev);
   1bd32:	f7ff fe1d 	bl	1b970 <qspi_device_init>
	if (ret == 0) {
   1bd36:	4602      	mov	r2, r0
   1bd38:	b128      	cbz	r0, 1bd46 <qspi_nor_init+0x13a>
	qspi_device_uninit(dev);
   1bd3a:	4628      	mov	r0, r5
   1bd3c:	f7ff fe8c 	bl	1ba58 <qspi_device_uninit>
		return -ENODEV;
   1bd40:	f06f 0412 	mvn.w	r4, #18
   1bd44:	e7a9      	b.n	1bc9a <qspi_nor_init+0x8e>
		ret = qspi_send_cmd(dev, &cmd, false);
   1bd46:	4628      	mov	r0, r5
   1bd48:	a90d      	add	r1, sp, #52	; 0x34
   1bd4a:	f7ff fe37 	bl	1b9bc <qspi_send_cmd>
   1bd4e:	4607      	mov	r7, r0
	qspi_device_uninit(dev);
   1bd50:	4628      	mov	r0, r5
   1bd52:	f7ff fe81 	bl	1ba58 <qspi_device_uninit>
	if (ret != 0) {
   1bd56:	2f00      	cmp	r7, #0
   1bd58:	d1f2      	bne.n	1bd40 <qspi_nor_init+0x134>
	const struct qspi_nor_config *qnc = dev->config;
   1bd5a:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1bd5c:	4622      	mov	r2, r4
   1bd5e:	4631      	mov	r1, r6
   1bd60:	f105 001c 	add.w	r0, r5, #28
   1bd64:	f010 f9a2 	bl	2c0ac <memcmp>
   1bd68:	4604      	mov	r4, r0
   1bd6a:	2800      	cmp	r0, #0
   1bd6c:	d095      	beq.n	1bc9a <qspi_nor_init+0x8e>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1bd6e:	7fab      	ldrb	r3, [r5, #30]
   1bd70:	2201      	movs	r2, #1
   1bd72:	9308      	str	r3, [sp, #32]
   1bd74:	7f6b      	ldrb	r3, [r5, #29]
   1bd76:	4638      	mov	r0, r7
   1bd78:	9307      	str	r3, [sp, #28]
   1bd7a:	7f2b      	ldrb	r3, [r5, #28]
   1bd7c:	490c      	ldr	r1, [pc, #48]	; (1bdb0 <qspi_nor_init+0x1a4>)
   1bd7e:	9306      	str	r3, [sp, #24]
   1bd80:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1bd84:	9700      	str	r7, [sp, #0]
   1bd86:	9305      	str	r3, [sp, #20]
   1bd88:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   1bd8c:	9304      	str	r3, [sp, #16]
   1bd8e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1bd92:	9303      	str	r3, [sp, #12]
   1bd94:	4b0a      	ldr	r3, [pc, #40]	; (1bdc0 <qspi_nor_init+0x1b4>)
   1bd96:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1bd9a:	463b      	mov	r3, r7
   1bd9c:	f00e fd4d 	bl	2a83a <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1bda0:	e7ce      	b.n	1bd40 <qspi_nor_init+0x134>
   1bda2:	bf00      	nop
   1bda4:	40005000 	.word	0x40005000
   1bda8:	0002a82f 	.word	0x0002a82f
   1bdac:	000328e7 	.word	0x000328e7
   1bdb0:	0002d714 	.word	0x0002d714
   1bdb4:	00031528 	.word	0x00031528
   1bdb8:	000328e1 	.word	0x000328e1
   1bdbc:	000328f7 	.word	0x000328f7
   1bdc0:	00032908 	.word	0x00032908

0001bdc4 <qspi_nor_erase>:
{
   1bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1bdc8:	2900      	cmp	r1, #0
{
   1bdca:	4606      	mov	r6, r0
   1bdcc:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1bdce:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1bdd2:	b087      	sub	sp, #28
	if (addr < 0 ||
   1bdd4:	db05      	blt.n	1bde2 <qspi_nor_erase+0x1e>
   1bdd6:	f8da 3018 	ldr.w	r3, [sl, #24]
	    (addr + size) > params->size) {
   1bdda:	188a      	adds	r2, r1, r2
	if (addr < 0 ||
   1bddc:	429a      	cmp	r2, r3
	    (addr + size) > params->size) {
   1bdde:	4688      	mov	r8, r1
	if (addr < 0 ||
   1bde0:	d911      	bls.n	1be06 <qspi_nor_erase+0x42>
		LOG_ERR("erase error: address or size "
   1bde2:	4b46      	ldr	r3, [pc, #280]	; (1befc <qspi_nor_erase+0x138>)
   1bde4:	e9cd 1503 	strd	r1, r5, [sp, #12]
   1bde8:	9302      	str	r3, [sp, #8]
   1bdea:	2300      	movs	r3, #0
   1bdec:	2201      	movs	r2, #1
   1bdee:	4618      	mov	r0, r3
   1bdf0:	e9cd 3300 	strd	r3, r3, [sp]
   1bdf4:	4942      	ldr	r1, [pc, #264]	; (1bf00 <qspi_nor_erase+0x13c>)
   1bdf6:	f00e fd20 	bl	2a83a <z_log_msg_runtime_create.constprop.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1bdfa:	f06f 0415 	mvn.w	r4, #21
}
   1bdfe:	4620      	mov	r0, r4
   1be00:	b007      	add	sp, #28
   1be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1be06:	f3c1 020b 	ubfx	r2, r1, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1be0a:	2d00      	cmp	r5, #0
   1be0c:	d0f5      	beq.n	1bdfa <qspi_nor_erase+0x36>
   1be0e:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1be12:	4313      	orrs	r3, r2
   1be14:	d1f1      	bne.n	1bdfa <qspi_nor_erase+0x36>
	rv = qspi_device_init(dev);
   1be16:	f7ff fdab 	bl	1b970 <qspi_device_init>
	if (rv != 0) {
   1be1a:	4604      	mov	r4, r0
   1be1c:	bb68      	cbnz	r0, 1be7a <qspi_nor_erase+0xb6>
	qspi_trans_lock(dev);
   1be1e:	6930      	ldr	r0, [r6, #16]
   1be20:	f00e fd21 	bl	2a866 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1be24:	4621      	mov	r1, r4
   1be26:	4630      	mov	r0, r6
   1be28:	f00e fd23 	bl	2a872 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1be2c:	4604      	mov	r4, r0
   1be2e:	bb08      	cbnz	r0, 1be74 <qspi_nor_erase+0xb0>
	qspi_lock(dev);
   1be30:	6930      	ldr	r0, [r6, #16]
   1be32:	f00e fd11 	bl	2a858 <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
   1be36:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1bf04 <qspi_nor_erase+0x140>
		if (size == params->size) {
   1be3a:	f8da 3018 	ldr.w	r3, [sl, #24]
   1be3e:	42ab      	cmp	r3, r5
   1be40:	d11f      	bne.n	1be82 <qspi_nor_erase+0xbe>
			res = nrfx_qspi_chip_erase();
   1be42:	f00f f9c7 	bl	2b1d4 <nrfx_qspi_chip_erase>
   1be46:	46a9      	mov	r9, r5
   1be48:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   1be4a:	4639      	mov	r1, r7
   1be4c:	6930      	ldr	r0, [r6, #16]
   1be4e:	f7ff fd81 	bl	1b954 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1be52:	455f      	cmp	r7, fp
   1be54:	d141      	bne.n	1beda <qspi_nor_erase+0x116>
	while (size > 0) {
   1be56:	ebb5 0509 	subs.w	r5, r5, r9
			addr += adj;
   1be5a:	44c8      	add	r8, r9
	while (size > 0) {
   1be5c:	d1ed      	bne.n	1be3a <qspi_nor_erase+0x76>
	k_sem_give(&dev_data->sem);
   1be5e:	6930      	ldr	r0, [r6, #16]
   1be60:	3018      	adds	r0, #24
   1be62:	f00e fce2 	bl	2a82a <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1be66:	2101      	movs	r1, #1
   1be68:	4630      	mov	r0, r6
   1be6a:	f00e fd02 	bl	2a872 <qspi_nor_write_protection_set>
   1be6e:	2c00      	cmp	r4, #0
   1be70:	bf08      	it	eq
   1be72:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1be74:	6930      	ldr	r0, [r6, #16]
   1be76:	f00e fcd8 	bl	2a82a <k_sem_give>
	qspi_device_uninit(dev);
   1be7a:	4630      	mov	r0, r6
   1be7c:	f7ff fdec 	bl	1ba58 <qspi_device_uninit>
	return rv;
   1be80:	e7bd      	b.n	1bdfe <qspi_nor_erase+0x3a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1be82:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1be86:	d30a      	bcc.n	1be9e <qspi_nor_erase+0xda>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1be88:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1be8c:	b953      	cbnz	r3, 1bea4 <qspi_nor_erase+0xe0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1be8e:	4641      	mov	r1, r8
   1be90:	2001      	movs	r0, #1
   1be92:	f002 ffc1 	bl	1ee18 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1be96:	f44f 3980 	mov.w	r9, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1be9a:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   1be9c:	e7d5      	b.n	1be4a <qspi_nor_erase+0x86>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1be9e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1bea2:	d309      	bcc.n	1beb8 <qspi_nor_erase+0xf4>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1bea4:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1bea8:	b930      	cbnz	r0, 1beb8 <qspi_nor_erase+0xf4>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1beaa:	4641      	mov	r1, r8
   1beac:	f002 ffb4 	bl	1ee18 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1beb0:	f44f 5980 	mov.w	r9, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1beb4:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   1beb6:	e7c8      	b.n	1be4a <qspi_nor_erase+0x86>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1beb8:	4b13      	ldr	r3, [pc, #76]	; (1bf08 <qspi_nor_erase+0x144>)
   1beba:	2201      	movs	r2, #1
   1bebc:	9302      	str	r3, [sp, #8]
   1bebe:	2300      	movs	r3, #0
   1bec0:	490f      	ldr	r1, [pc, #60]	; (1bf00 <qspi_nor_erase+0x13c>)
   1bec2:	4618      	mov	r0, r3
   1bec4:	e9cd 3300 	strd	r3, r3, [sp]
   1bec8:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1becc:	f00e fcb5 	bl	2a83a <z_log_msg_runtime_create.constprop.0>
		qspi_wait_for_completion(dev, res);
   1bed0:	490e      	ldr	r1, [pc, #56]	; (1bf0c <qspi_nor_erase+0x148>)
   1bed2:	6930      	ldr	r0, [r6, #16]
   1bed4:	f7ff fd3e 	bl	1b954 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1bed8:	4f0c      	ldr	r7, [pc, #48]	; (1bf0c <qspi_nor_erase+0x148>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1beda:	4b0d      	ldr	r3, [pc, #52]	; (1bf10 <qspi_nor_erase+0x14c>)
   1bedc:	2201      	movs	r2, #1
   1bede:	9302      	str	r3, [sp, #8]
   1bee0:	2300      	movs	r3, #0
   1bee2:	e9cd 8503 	strd	r8, r5, [sp, #12]
   1bee6:	4618      	mov	r0, r3
   1bee8:	e9cd 3300 	strd	r3, r3, [sp]
   1beec:	4904      	ldr	r1, [pc, #16]	; (1bf00 <qspi_nor_erase+0x13c>)
   1beee:	f00e fca4 	bl	2a83a <z_log_msg_runtime_create.constprop.0>
			rv = qspi_get_zephyr_ret_code(res);
   1bef2:	4638      	mov	r0, r7
   1bef4:	f7ff fd14 	bl	1b920 <qspi_get_zephyr_ret_code>
   1bef8:	4604      	mov	r4, r0
			break;
   1befa:	e7b0      	b.n	1be5e <qspi_nor_erase+0x9a>
   1befc:	0003293a 	.word	0x0003293a
   1bf00:	0002d714 	.word	0x0002d714
   1bf04:	0bad0000 	.word	0x0bad0000
   1bf08:	00032984 	.word	0x00032984
   1bf0c:	0bad0004 	.word	0x0bad0004
   1bf10:	000329a2 	.word	0x000329a2

0001bf14 <qspi_nor_write>:
{
   1bf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bf18:	4605      	mov	r5, r0
   1bf1a:	460f      	mov	r7, r1
   1bf1c:	461e      	mov	r6, r3
	if (!src) {
   1bf1e:	4690      	mov	r8, r2
{
   1bf20:	b088      	sub	sp, #32
	if (!src) {
   1bf22:	b1ca      	cbz	r2, 1bf58 <qspi_nor_write+0x44>
	if ((size == 0)
   1bf24:	b1c3      	cbz	r3, 1bf58 <qspi_nor_write+0x44>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1bf26:	2b04      	cmp	r3, #4
   1bf28:	d901      	bls.n	1bf2e <qspi_nor_write+0x1a>
   1bf2a:	079a      	lsls	r2, r3, #30
   1bf2c:	d114      	bne.n	1bf58 <qspi_nor_write+0x44>
	if ((addr % 4U) != 0) {
   1bf2e:	07bb      	lsls	r3, r7, #30
   1bf30:	d112      	bne.n	1bf58 <qspi_nor_write+0x44>
	if (addr < 0 ||
   1bf32:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   1bf34:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1bf36:	db03      	blt.n	1bf40 <qspi_nor_write+0x2c>
   1bf38:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1bf3a:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   1bf3c:	4293      	cmp	r3, r2
   1bf3e:	d911      	bls.n	1bf64 <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
   1bf40:	4b40      	ldr	r3, [pc, #256]	; (1c044 <qspi_nor_write+0x130>)
   1bf42:	2201      	movs	r2, #1
   1bf44:	9302      	str	r3, [sp, #8]
   1bf46:	2300      	movs	r3, #0
   1bf48:	e9cd 7603 	strd	r7, r6, [sp, #12]
   1bf4c:	4618      	mov	r0, r3
   1bf4e:	e9cd 3300 	strd	r3, r3, [sp]
   1bf52:	493d      	ldr	r1, [pc, #244]	; (1c048 <qspi_nor_write+0x134>)
   1bf54:	f00e fc71 	bl	2a83a <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1bf58:	f06f 0415 	mvn.w	r4, #21
}
   1bf5c:	4620      	mov	r0, r4
   1bf5e:	b008      	add	sp, #32
   1bf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   1bf64:	4628      	mov	r0, r5
   1bf66:	f7ff fd03 	bl	1b970 <qspi_device_init>
	if (rc != 0) {
   1bf6a:	4604      	mov	r4, r0
   1bf6c:	2800      	cmp	r0, #0
   1bf6e:	d160      	bne.n	1c032 <qspi_nor_write+0x11e>
	qspi_trans_lock(dev);
   1bf70:	6928      	ldr	r0, [r5, #16]
   1bf72:	f00e fc78 	bl	2a866 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1bf76:	4621      	mov	r1, r4
   1bf78:	4628      	mov	r0, r5
   1bf7a:	f00e fc7a 	bl	2a872 <qspi_nor_write_protection_set>
   1bf7e:	4604      	mov	r4, r0
	qspi_lock(dev);
   1bf80:	6928      	ldr	r0, [r5, #16]
   1bf82:	f00e fc69 	bl	2a858 <qspi_lock.isra.0>
	if (!res) {
   1bf86:	2c00      	cmp	r4, #0
   1bf88:	d140      	bne.n	1c00c <qspi_nor_write+0xf8>
		if (size < 4U) {
   1bf8a:	2e03      	cmp	r6, #3
   1bf8c:	d81c      	bhi.n	1bfc8 <qspi_nor_write+0xb4>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1bf8e:	463a      	mov	r2, r7
   1bf90:	2104      	movs	r1, #4
   1bf92:	a807      	add	r0, sp, #28
   1bf94:	f00f f91b 	bl	2b1ce <nrfx_qspi_read>
   1bf98:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1bf9a:	4601      	mov	r1, r0
   1bf9c:	6928      	ldr	r0, [r5, #16]
   1bf9e:	f7ff fcd9 	bl	1b954 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1bfa2:	4b2a      	ldr	r3, [pc, #168]	; (1c04c <qspi_nor_write+0x138>)
   1bfa4:	429c      	cmp	r4, r3
   1bfa6:	d131      	bne.n	1c00c <qspi_nor_write+0xf8>
		memcpy(buf, sptr, slen);
   1bfa8:	4632      	mov	r2, r6
   1bfaa:	4641      	mov	r1, r8
   1bfac:	a807      	add	r0, sp, #28
   1bfae:	f010 f88d 	bl	2c0cc <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1bfb2:	463a      	mov	r2, r7
   1bfb4:	2104      	movs	r1, #4
   1bfb6:	a807      	add	r0, sp, #28
			res = nrfx_qspi_write(src, size, addr);
   1bfb8:	f00f f906 	bl	2b1c8 <nrfx_qspi_write>
   1bfbc:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1bfbe:	4601      	mov	r1, r0
   1bfc0:	6928      	ldr	r0, [r5, #16]
   1bfc2:	f7ff fcc7 	bl	1b954 <qspi_wait_for_completion.isra.0>
   1bfc6:	e021      	b.n	1c00c <qspi_nor_write+0xf8>
   1bfc8:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1bfcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1bfd0:	d033      	beq.n	1c03a <qspi_nor_write+0x126>
			if (res == NRFX_SUCCESS) {
   1bfd2:	f8df a078 	ldr.w	sl, [pc, #120]	; 1c04c <qspi_nor_write+0x138>
			size_t len = MIN(slen, sizeof(buf));
   1bfd6:	2e04      	cmp	r6, #4
   1bfd8:	46b1      	mov	r9, r6
   1bfda:	bf28      	it	cs
   1bfdc:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   1bfe0:	4641      	mov	r1, r8
   1bfe2:	464a      	mov	r2, r9
   1bfe4:	a807      	add	r0, sp, #28
   1bfe6:	f010 f871 	bl	2c0cc <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1bfea:	463a      	mov	r2, r7
   1bfec:	2104      	movs	r1, #4
   1bfee:	a807      	add	r0, sp, #28
   1bff0:	f00f f8ea 	bl	2b1c8 <nrfx_qspi_write>
   1bff4:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1bff6:	4601      	mov	r1, r0
   1bff8:	6928      	ldr	r0, [r5, #16]
   1bffa:	f7ff fcab 	bl	1b954 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1bffe:	4554      	cmp	r4, sl
   1c000:	d104      	bne.n	1c00c <qspi_nor_write+0xf8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1c002:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   1c006:	44c8      	add	r8, r9
				addr += len;
   1c008:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1c00a:	d1e4      	bne.n	1bfd6 <qspi_nor_write+0xc2>
	k_sem_give(&dev_data->sem);
   1c00c:	6928      	ldr	r0, [r5, #16]
   1c00e:	3018      	adds	r0, #24
   1c010:	f00e fc0b 	bl	2a82a <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1c014:	2101      	movs	r1, #1
   1c016:	4628      	mov	r0, r5
   1c018:	f00e fc2b 	bl	2a872 <qspi_nor_write_protection_set>
   1c01c:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1c01e:	6928      	ldr	r0, [r5, #16]
   1c020:	f00e fc03 	bl	2a82a <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1c024:	2c00      	cmp	r4, #0
   1c026:	bf14      	ite	ne
   1c028:	4620      	movne	r0, r4
   1c02a:	4630      	moveq	r0, r6
   1c02c:	f7ff fc78 	bl	1b920 <qspi_get_zephyr_ret_code>
   1c030:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1c032:	4628      	mov	r0, r5
   1c034:	f7ff fd10 	bl	1ba58 <qspi_device_uninit>
	return rc;
   1c038:	e790      	b.n	1bf5c <qspi_nor_write+0x48>
			res = nrfx_qspi_write(src, size, addr);
   1c03a:	463a      	mov	r2, r7
   1c03c:	4631      	mov	r1, r6
   1c03e:	4640      	mov	r0, r8
   1c040:	e7ba      	b.n	1bfb8 <qspi_nor_write+0xa4>
   1c042:	bf00      	nop
   1c044:	000329c0 	.word	0x000329c0
   1c048:	0002d714 	.word	0x0002d714
   1c04c:	0bad0000 	.word	0x0bad0000

0001c050 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1c050:	4b02      	ldr	r3, [pc, #8]	; (1c05c <flash_nrf_pages_layout+0xc>)
   1c052:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1c054:	2301      	movs	r3, #1
   1c056:	6013      	str	r3, [r2, #0]
}
   1c058:	4770      	bx	lr
   1c05a:	bf00      	nop
   1c05c:	2002f530 	.word	0x2002f530

0001c060 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1c060:	4800      	ldr	r0, [pc, #0]	; (1c064 <flash_nrf_get_parameters+0x4>)
   1c062:	4770      	bx	lr
   1c064:	0002e3fc 	.word	0x0002e3fc

0001c068 <flash_nrf_read>:
{
   1c068:	b570      	push	{r4, r5, r6, lr}
   1c06a:	460c      	mov	r4, r1
   1c06c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1c06e:	4619      	mov	r1, r3
   1c070:	4620      	mov	r0, r4
{
   1c072:	461d      	mov	r5, r3
   1c074:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   1c076:	f00e fc2c 	bl	2a8d2 <is_regular_addr_valid>
   1c07a:	4603      	mov	r3, r0
   1c07c:	b968      	cbnz	r0, 1c09a <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c07e:	4a0f      	ldr	r2, [pc, #60]	; (1c0bc <flash_nrf_read+0x54>)
   1c080:	9000      	str	r0, [sp, #0]
   1c082:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1c086:	e9cd 4503 	strd	r4, r5, [sp, #12]
   1c08a:	2201      	movs	r2, #1
   1c08c:	490c      	ldr	r1, [pc, #48]	; (1c0c0 <flash_nrf_read+0x58>)
   1c08e:	f00e fc31 	bl	2a8f4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1c092:	f06f 0015 	mvn.w	r0, #21
}
   1c096:	b006      	add	sp, #24
   1c098:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1c09a:	b165      	cbz	r5, 1c0b6 <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
   1c09c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1c0a0:	462a      	mov	r2, r5
   1c0a2:	4621      	mov	r1, r4
   1c0a4:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   1c0a6:	da04      	bge.n	1c0b2 <flash_nrf_read+0x4a>
}
   1c0a8:	b006      	add	sp, #24
   1c0aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   1c0ae:	f00b baeb 	b.w	27688 <soc_secure_mem_read>
   1c0b2:	f010 f80b 	bl	2c0cc <memcpy>
		return 0;
   1c0b6:	2000      	movs	r0, #0
   1c0b8:	e7ed      	b.n	1c096 <flash_nrf_read+0x2e>
   1c0ba:	bf00      	nop
   1c0bc:	00032a20 	.word	0x00032a20
   1c0c0:	0002d6ac 	.word	0x0002d6ac

0001c0c4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1c0c4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c0c6:	2201      	movs	r2, #1
   1c0c8:	4806      	ldr	r0, [pc, #24]	; (1c0e4 <nrf_flash_init+0x20>)
   1c0ca:	4611      	mov	r1, r2
   1c0cc:	f00f fe43 	bl	2bd56 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1c0d0:	f00f f874 	bl	2b1bc <nrfx_nvmc_flash_page_count_get>
   1c0d4:	4c04      	ldr	r4, [pc, #16]	; (1c0e8 <nrf_flash_init+0x24>)
   1c0d6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1c0d8:	f00f f86d 	bl	2b1b6 <nrfx_nvmc_flash_page_size_get>
   1c0dc:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1c0de:	2000      	movs	r0, #0
   1c0e0:	bd10      	pop	{r4, pc}
   1c0e2:	bf00      	nop
   1c0e4:	2002f538 	.word	0x2002f538
   1c0e8:	2002f530 	.word	0x2002f530

0001c0ec <flash_nrf_erase>:
{
   1c0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c0ee:	b087      	sub	sp, #28
   1c0f0:	460e      	mov	r6, r1
   1c0f2:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c0f4:	f00f f85f 	bl	2b1b6 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1c0f8:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c0fa:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1c0fc:	4630      	mov	r0, r6
   1c0fe:	f00e fbe8 	bl	2a8d2 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1c102:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   1c104:	4603      	mov	r3, r0
   1c106:	b388      	cbz	r0, 1c16c <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1c108:	fbb6 f3f5 	udiv	r3, r6, r5
   1c10c:	fb05 6313 	mls	r3, r5, r3, r6
   1c110:	b923      	cbnz	r3, 1c11c <flash_nrf_erase+0x30>
   1c112:	fbb4 f3f5 	udiv	r3, r4, r5
   1c116:	fb05 4313 	mls	r3, r5, r3, r4
   1c11a:	b173      	cbz	r3, 1c13a <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1c11c:	4b18      	ldr	r3, [pc, #96]	; (1c180 <flash_nrf_erase+0x94>)
   1c11e:	2201      	movs	r2, #1
   1c120:	9302      	str	r3, [sp, #8]
   1c122:	2300      	movs	r3, #0
   1c124:	4618      	mov	r0, r3
   1c126:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1c12a:	e9cd 3300 	strd	r3, r3, [sp]
   1c12e:	4915      	ldr	r1, [pc, #84]	; (1c184 <flash_nrf_erase+0x98>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c130:	f00e fbe0 	bl	2a8f4 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1c134:	f06f 0015 	mvn.w	r0, #21
   1c138:	e002      	b.n	1c140 <flash_nrf_erase+0x54>
		if (!n_pages) {
   1c13a:	42a5      	cmp	r5, r4
   1c13c:	d902      	bls.n	1c144 <flash_nrf_erase+0x58>
			return 0;
   1c13e:	2000      	movs	r0, #0
}
   1c140:	b007      	add	sp, #28
   1c142:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   1c144:	f04f 32ff 	mov.w	r2, #4294967295
   1c148:	f04f 33ff 	mov.w	r3, #4294967295
   1c14c:	480e      	ldr	r0, [pc, #56]	; (1c188 <flash_nrf_erase+0x9c>)
   1c14e:	f004 fecf 	bl	20ef0 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1c152:	f00f f830 	bl	2b1b6 <nrfx_nvmc_flash_page_size_get>
   1c156:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1c158:	4638      	mov	r0, r7
   1c15a:	f002 fad5 	bl	1e708 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1c15e:	1b64      	subs	r4, r4, r5
   1c160:	442f      	add	r7, r5
   1c162:	d1f9      	bne.n	1c158 <flash_nrf_erase+0x6c>
	z_impl_k_sem_give(sem);
   1c164:	4808      	ldr	r0, [pc, #32]	; (1c188 <flash_nrf_erase+0x9c>)
   1c166:	f004 fe7f 	bl	20e68 <z_impl_k_sem_give>
}
   1c16a:	e7e8      	b.n	1c13e <flash_nrf_erase+0x52>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c16c:	4a07      	ldr	r2, [pc, #28]	; (1c18c <flash_nrf_erase+0xa0>)
   1c16e:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1c172:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1c176:	4903      	ldr	r1, [pc, #12]	; (1c184 <flash_nrf_erase+0x98>)
   1c178:	2201      	movs	r2, #1
   1c17a:	9000      	str	r0, [sp, #0]
   1c17c:	e7d8      	b.n	1c130 <flash_nrf_erase+0x44>
   1c17e:	bf00      	nop
   1c180:	00032a3d 	.word	0x00032a3d
   1c184:	0002d6ac 	.word	0x0002d6ac
   1c188:	2002f538 	.word	0x2002f538
   1c18c:	00032a20 	.word	0x00032a20

0001c190 <flash_nrf_write>:
{
   1c190:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c192:	460e      	mov	r6, r1
   1c194:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   1c196:	4619      	mov	r1, r3
   1c198:	4630      	mov	r0, r6
{
   1c19a:	461c      	mov	r4, r3
   1c19c:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
   1c19e:	f00e fb98 	bl	2a8d2 <is_regular_addr_valid>
   1c1a2:	4603      	mov	r3, r0
   1c1a4:	b968      	cbnz	r0, 1c1c2 <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1c1a6:	4a1d      	ldr	r2, [pc, #116]	; (1c21c <flash_nrf_write+0x8c>)
   1c1a8:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1c1ac:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1c1b0:	2201      	movs	r2, #1
   1c1b2:	491b      	ldr	r1, [pc, #108]	; (1c220 <flash_nrf_write+0x90>)
   1c1b4:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1c1b6:	f00e fb9d 	bl	2a8f4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1c1ba:	f06f 0015 	mvn.w	r0, #21
}
   1c1be:	b007      	add	sp, #28
   1c1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1c1c2:	ea46 0504 	orr.w	r5, r6, r4
   1c1c6:	f015 0503 	ands.w	r5, r5, #3
   1c1ca:	d00a      	beq.n	1c1e2 <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1c1cc:	4b15      	ldr	r3, [pc, #84]	; (1c224 <flash_nrf_write+0x94>)
   1c1ce:	2201      	movs	r2, #1
   1c1d0:	9302      	str	r3, [sp, #8]
   1c1d2:	2300      	movs	r3, #0
   1c1d4:	e9cd 6403 	strd	r6, r4, [sp, #12]
   1c1d8:	4618      	mov	r0, r3
   1c1da:	e9cd 3300 	strd	r3, r3, [sp]
   1c1de:	4910      	ldr	r1, [pc, #64]	; (1c220 <flash_nrf_write+0x90>)
   1c1e0:	e7e9      	b.n	1c1b6 <flash_nrf_write+0x26>
	if (!len) {
   1c1e2:	b1a4      	cbz	r4, 1c20e <flash_nrf_write+0x7e>
	return z_impl_k_sem_take(sem, timeout);
   1c1e4:	f04f 32ff 	mov.w	r2, #4294967295
   1c1e8:	f04f 33ff 	mov.w	r3, #4294967295
   1c1ec:	480e      	ldr	r0, [pc, #56]	; (1c228 <flash_nrf_write+0x98>)
   1c1ee:	f004 fe7f 	bl	20ef0 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1c1f2:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1c1f6:	42a5      	cmp	r5, r4
   1c1f8:	eb05 0006 	add.w	r0, r5, r6
   1c1fc:	d109      	bne.n	1c212 <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c1fe:	4a0b      	ldr	r2, [pc, #44]	; (1c22c <flash_nrf_write+0x9c>)
   1c200:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1c204:	07db      	lsls	r3, r3, #31
   1c206:	d5fb      	bpl.n	1c200 <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
   1c208:	4807      	ldr	r0, [pc, #28]	; (1c228 <flash_nrf_write+0x98>)
   1c20a:	f004 fe2d 	bl	20e68 <z_impl_k_sem_give>
	return ret;
   1c20e:	2000      	movs	r0, #0
   1c210:	e7d5      	b.n	1c1be <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1c212:	5979      	ldr	r1, [r7, r5]
   1c214:	f002 faaa 	bl	1e76c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1c218:	3504      	adds	r5, #4
}
   1c21a:	e7ec      	b.n	1c1f6 <flash_nrf_write+0x66>
   1c21c:	00032a20 	.word	0x00032a20
   1c220:	0002d6ac 	.word	0x0002d6ac
   1c224:	00032a5c 	.word	0x00032a5c
   1c228:	2002f538 	.word	0x2002f538
   1c22c:	40039000 	.word	0x40039000

0001c230 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1c230:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1c232:	ab0b      	add	r3, sp, #44	; 0x2c
   1c234:	9305      	str	r3, [sp, #20]
   1c236:	9303      	str	r3, [sp, #12]
   1c238:	4b05      	ldr	r3, [pc, #20]	; (1c250 <z_log_msg_runtime_create.constprop.0+0x20>)
   1c23a:	2201      	movs	r2, #1
   1c23c:	9302      	str	r3, [sp, #8]
   1c23e:	2300      	movs	r3, #0
   1c240:	4618      	mov	r0, r3
   1c242:	e9cd 3300 	strd	r3, r3, [sp]
   1c246:	f7f3 f875 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   1c24a:	b007      	add	sp, #28
   1c24c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c250:	00032a9b 	.word	0x00032a9b

0001c254 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1c254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c256:	461d      	mov	r5, r3
	return config->uarte_regs;
   1c258:	6843      	ldr	r3, [r0, #4]
{
   1c25a:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1c25c:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1c25e:	f8d3 c000 	ldr.w	ip, [r3]
   1c262:	f04f 0320 	mov.w	r3, #32
   1c266:	f3ef 8711 	mrs	r7, BASEPRI
   1c26a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c26e:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1c272:	68e3      	ldr	r3, [r4, #12]
   1c274:	68d8      	ldr	r0, [r3, #12]
   1c276:	b138      	cbz	r0, 1c288 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1c278:	f387 8811 	msr	BASEPRI, r7
   1c27c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1c280:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1c284:	b003      	add	sp, #12
   1c286:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1c288:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1c28a:	68e3      	ldr	r3, [r4, #12]
   1c28c:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c28e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1c292:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1c296:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1c29a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1c29e:	68e3      	ldr	r3, [r4, #12]
   1c2a0:	d111      	bne.n	1c2c6 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1c2a2:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1c2a4:	68e3      	ldr	r3, [r4, #12]
   1c2a6:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1c2a8:	4621      	mov	r1, r4
   1c2aa:	4630      	mov	r0, r6
   1c2ac:	f00e fcdd 	bl	2ac6a <start_tx_locked>
   1c2b0:	f387 8811 	msr	BASEPRI, r7
   1c2b4:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1c2b8:	7ae3      	ldrb	r3, [r4, #11]
   1c2ba:	2b01      	cmp	r3, #1
   1c2bc:	d101      	bne.n	1c2c2 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1c2be:	1c6b      	adds	r3, r5, #1
   1c2c0:	d106      	bne.n	1c2d0 <uarte_nrfx_tx+0x7c>
	return 0;
   1c2c2:	2000      	movs	r0, #0
   1c2c4:	e7de      	b.n	1c284 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1c2c6:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1c2c8:	4620      	mov	r0, r4
   1c2ca:	f00e fc47 	bl	2ab5c <setup_tx_cache>
   1c2ce:	e7eb      	b.n	1c2a8 <uarte_nrfx_tx+0x54>
   1c2d0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1c2d4:	2100      	movs	r1, #0
   1c2d6:	480a      	ldr	r0, [pc, #40]	; (1c300 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1c2d8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1c2dc:	2300      	movs	r3, #0
   1c2de:	fbc5 0106 	smlal	r0, r1, r5, r6
   1c2e2:	4a08      	ldr	r2, [pc, #32]	; (1c304 <uarte_nrfx_tx+0xb0>)
   1c2e4:	f7ec fe04 	bl	8ef0 <__aeabi_uldivmod>
   1c2e8:	68e4      	ldr	r4, [r4, #12]
   1c2ea:	4602      	mov	r2, r0
   1c2ec:	460b      	mov	r3, r1
   1c2ee:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1c2f0:	2000      	movs	r0, #0
   1c2f2:	2100      	movs	r1, #0
   1c2f4:	e9cd 0100 	strd	r0, r1, [sp]
   1c2f8:	4620      	mov	r0, r4
   1c2fa:	f007 f9c7 	bl	2368c <z_impl_k_timer_start>
   1c2fe:	e7e0      	b.n	1c2c2 <uarte_nrfx_tx+0x6e>
   1c300:	000f423f 	.word	0x000f423f
   1c304:	000f4240 	.word	0x000f4240

0001c308 <uarte_nrfx_configure>:
{
   1c308:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1c30a:	794b      	ldrb	r3, [r1, #5]
   1c30c:	2b01      	cmp	r3, #1
   1c30e:	d029      	beq.n	1c364 <uarte_nrfx_configure+0x5c>
   1c310:	2b03      	cmp	r3, #3
   1c312:	d124      	bne.n	1c35e <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1c314:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c316:	798b      	ldrb	r3, [r1, #6]
   1c318:	2b03      	cmp	r3, #3
   1c31a:	d120      	bne.n	1c35e <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1c31c:	79ce      	ldrb	r6, [r1, #7]
   1c31e:	b10e      	cbz	r6, 1c324 <uarte_nrfx_configure+0x1c>
   1c320:	2e01      	cmp	r6, #1
   1c322:	d11c      	bne.n	1c35e <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1c324:	790a      	ldrb	r2, [r1, #4]
   1c326:	2a01      	cmp	r2, #1
   1c328:	d01e      	beq.n	1c368 <uarte_nrfx_configure+0x60>
   1c32a:	2a02      	cmp	r2, #2
   1c32c:	d020      	beq.n	1c370 <uarte_nrfx_configure+0x68>
   1c32e:	b9b2      	cbnz	r2, 1c35e <uarte_nrfx_configure+0x56>
   1c330:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c332:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1c334:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1c336:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1c33a:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1c33e:	d06e      	beq.n	1c41e <uarte_nrfx_configure+0x116>
   1c340:	d833      	bhi.n	1c3aa <uarte_nrfx_configure+0xa2>
   1c342:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1c346:	d06d      	beq.n	1c424 <uarte_nrfx_configure+0x11c>
   1c348:	d81c      	bhi.n	1c384 <uarte_nrfx_configure+0x7c>
   1c34a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1c34e:	d06b      	beq.n	1c428 <uarte_nrfx_configure+0x120>
   1c350:	d810      	bhi.n	1c374 <uarte_nrfx_configure+0x6c>
   1c352:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1c356:	d06a      	beq.n	1c42e <uarte_nrfx_configure+0x126>
   1c358:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1c35c:	d06a      	beq.n	1c434 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1c35e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c362:	e05b      	b.n	1c41c <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1c364:	2700      	movs	r7, #0
   1c366:	e7d6      	b.n	1c316 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1c368:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1c36c:	220e      	movs	r2, #14
   1c36e:	e7e0      	b.n	1c332 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1c370:	2400      	movs	r4, #0
   1c372:	e7fb      	b.n	1c36c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1c374:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1c378:	d05f      	beq.n	1c43a <uarte_nrfx_configure+0x132>
   1c37a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1c37e:	d1ee      	bne.n	1c35e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1c380:	4b38      	ldr	r3, [pc, #224]	; (1c464 <uarte_nrfx_configure+0x15c>)
   1c382:	e03c      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c384:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1c388:	d05a      	beq.n	1c440 <uarte_nrfx_configure+0x138>
   1c38a:	d807      	bhi.n	1c39c <uarte_nrfx_configure+0x94>
   1c38c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1c390:	d058      	beq.n	1c444 <uarte_nrfx_configure+0x13c>
   1c392:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1c396:	d1e2      	bne.n	1c35e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1c398:	4b33      	ldr	r3, [pc, #204]	; (1c468 <uarte_nrfx_configure+0x160>)
   1c39a:	e030      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c39c:	f647 2512 	movw	r5, #31250	; 0x7a12
   1c3a0:	42ab      	cmp	r3, r5
   1c3a2:	d1dc      	bne.n	1c35e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1c3a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1c3a8:	e029      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c3aa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1c3ae:	d04b      	beq.n	1c448 <uarte_nrfx_configure+0x140>
   1c3b0:	d813      	bhi.n	1c3da <uarte_nrfx_configure+0xd2>
   1c3b2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1c3b6:	d04a      	beq.n	1c44e <uarte_nrfx_configure+0x146>
   1c3b8:	d809      	bhi.n	1c3ce <uarte_nrfx_configure+0xc6>
   1c3ba:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1c3be:	42ab      	cmp	r3, r5
   1c3c0:	d047      	beq.n	1c452 <uarte_nrfx_configure+0x14a>
   1c3c2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1c3c6:	d1ca      	bne.n	1c35e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1c3c8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1c3cc:	e017      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c3ce:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1c3d2:	d1c4      	bne.n	1c35e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1c3d4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1c3d8:	e011      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c3da:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1c3de:	d03b      	beq.n	1c458 <uarte_nrfx_configure+0x150>
   1c3e0:	d808      	bhi.n	1c3f4 <uarte_nrfx_configure+0xec>
   1c3e2:	4d22      	ldr	r5, [pc, #136]	; (1c46c <uarte_nrfx_configure+0x164>)
   1c3e4:	42ab      	cmp	r3, r5
   1c3e6:	d03a      	beq.n	1c45e <uarte_nrfx_configure+0x156>
   1c3e8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1c3ec:	d1b7      	bne.n	1c35e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1c3ee:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1c3f2:	e004      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c3f4:	4d1e      	ldr	r5, [pc, #120]	; (1c470 <uarte_nrfx_configure+0x168>)
   1c3f6:	42ab      	cmp	r3, r5
   1c3f8:	d1b1      	bne.n	1c35e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1c3fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1c3fe:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1c400:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1c404:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1c406:	433a      	orrs	r2, r7
   1c408:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1c40a:	4334      	orrs	r4, r6
   1c40c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1c40e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1c412:	1d2b      	adds	r3, r5, #4
   1c414:	c903      	ldmia	r1, {r0, r1}
   1c416:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1c41a:	2000      	movs	r0, #0
}
   1c41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1c41e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1c422:	e7ec      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1c424:	4b13      	ldr	r3, [pc, #76]	; (1c474 <uarte_nrfx_configure+0x16c>)
   1c426:	e7ea      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1c428:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1c42c:	e7e7      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1c42e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1c432:	e7e4      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1c434:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1c438:	e7e1      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1c43a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1c43e:	e7de      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1c440:	4b0d      	ldr	r3, [pc, #52]	; (1c478 <uarte_nrfx_configure+0x170>)
   1c442:	e7dc      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1c444:	4b0d      	ldr	r3, [pc, #52]	; (1c47c <uarte_nrfx_configure+0x174>)
   1c446:	e7da      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1c448:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1c44c:	e7d7      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1c44e:	4b0c      	ldr	r3, [pc, #48]	; (1c480 <uarte_nrfx_configure+0x178>)
   1c450:	e7d5      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1c452:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1c456:	e7d2      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1c458:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c45c:	e7cf      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1c45e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c462:	e7cc      	b.n	1c3fe <uarte_nrfx_configure+0xf6>
   1c464:	0013b000 	.word	0x0013b000
   1c468:	004ea000 	.word	0x004ea000
   1c46c:	0003d090 	.word	0x0003d090
   1c470:	000f4240 	.word	0x000f4240
   1c474:	00275000 	.word	0x00275000
   1c478:	0075c000 	.word	0x0075c000
   1c47c:	003af000 	.word	0x003af000
   1c480:	013a9000 	.word	0x013a9000

0001c484 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1c484:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1c486:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1c48a:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1c48e:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1c490:	f8d9 5000 	ldr.w	r5, [r9]
static int uarte_instance_init(const struct device *dev,
   1c494:	b087      	sub	sp, #28
   1c496:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1c49a:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1c49c:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1c4a0:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1c4a2:	aa05      	add	r2, sp, #20
   1c4a4:	4640      	mov	r0, r8
   1c4a6:	f00e fcbc 	bl	2ae22 <pinctrl_lookup_state>
	if (ret < 0) {
   1c4aa:	1e04      	subs	r4, r0, #0
   1c4ac:	db25      	blt.n	1c4fa <uarte_instance_init.constprop.0+0x76>
	return pinctrl_apply_state_direct(config, state);
   1c4ae:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c4b0:	f8d8 2000 	ldr.w	r2, [r8]
   1c4b4:	7919      	ldrb	r1, [r3, #4]
   1c4b6:	6818      	ldr	r0, [r3, #0]
   1c4b8:	f00e fcc6 	bl	2ae48 <pinctrl_configure_pins>
	if (err < 0) {
   1c4bc:	1e04      	subs	r4, r0, #0
   1c4be:	db1c      	blt.n	1c4fa <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1c4c0:	4638      	mov	r0, r7
   1c4c2:	1d31      	adds	r1, r6, #4
   1c4c4:	f7ff ff20 	bl	1c308 <uarte_nrfx_configure>
	if (err) {
   1c4c8:	4604      	mov	r4, r0
   1c4ca:	b9b0      	cbnz	r0, 1c4fa <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1c4cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1c4d0:	0799      	lsls	r1, r3, #30
   1c4d2:	d532      	bpl.n	1c53a <uarte_instance_init.constprop.0+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1c4d4:	f106 001c 	add.w	r0, r6, #28
   1c4d8:	f001 fc3c 	bl	1dd54 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1c4dc:	4b4f      	ldr	r3, [pc, #316]	; (1c61c <uarte_instance_init.constprop.0+0x198>)
   1c4de:	4298      	cmp	r0, r3
   1c4e0:	d00f      	beq.n	1c502 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
   1c4e2:	4b4f      	ldr	r3, [pc, #316]	; (1c620 <uarte_instance_init.constprop.0+0x19c>)
   1c4e4:	4620      	mov	r0, r4
   1c4e6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1c4ea:	9400      	str	r4, [sp, #0]
   1c4ec:	4623      	mov	r3, r4
   1c4ee:	2201      	movs	r2, #1
   1c4f0:	494c      	ldr	r1, [pc, #304]	; (1c624 <uarte_instance_init.constprop.0+0x1a0>)
   1c4f2:	f7ff fe9d 	bl	1c230 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1c4f6:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1c4fa:	4620      	mov	r0, r4
   1c4fc:	b007      	add	sp, #28
   1c4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c502:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1c504:	f115 0f0c 	cmn.w	r5, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1c508:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c50c:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1c510:	d10b      	bne.n	1c52a <uarte_instance_init.constprop.0+0xa6>
   1c512:	4945      	ldr	r1, [pc, #276]	; (1c628 <uarte_instance_init.constprop.0+0x1a4>)
   1c514:	4845      	ldr	r0, [pc, #276]	; (1c62c <uarte_instance_init.constprop.0+0x1a8>)
   1c516:	f240 234e 	movw	r3, #590	; 0x24e
   1c51a:	4a45      	ldr	r2, [pc, #276]	; (1c630 <uarte_instance_init.constprop.0+0x1ac>)
   1c51c:	f00b f869 	bl	275f2 <assert_print>
   1c520:	f240 214e 	movw	r1, #590	; 0x24e
   1c524:	4842      	ldr	r0, [pc, #264]	; (1c630 <uarte_instance_init.constprop.0+0x1ac>)
   1c526:	f00b f85d 	bl	275e4 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1c52a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1c52e:	2301      	movs	r3, #1
   1c530:	7f32      	ldrb	r2, [r6, #28]
   1c532:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1c534:	4a3f      	ldr	r2, [pc, #252]	; (1c634 <uarte_instance_init.constprop.0+0x1b0>)
   1c536:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1c53a:	68f3      	ldr	r3, [r6, #12]
   1c53c:	2b00      	cmp	r3, #0
   1c53e:	d059      	beq.n	1c5f4 <uarte_instance_init.constprop.0+0x170>
    p_reg->INTENSET = mask;
   1c540:	2204      	movs	r2, #4
	return config->uarte_regs;
   1c542:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1c544:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1c548:	681b      	ldr	r3, [r3, #0]
   1c54a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1c54e:	2201      	movs	r2, #1
   1c550:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1c554:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1c558:	4937      	ldr	r1, [pc, #220]	; (1c638 <uarte_instance_init.constprop.0+0x1b4>)
   1c55a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c55e:	2108      	movs	r1, #8
   1c560:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c564:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1c568:	b1a1      	cbz	r1, 1c594 <uarte_instance_init.constprop.0+0x110>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c56a:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c56c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1c570:	b91a      	cbnz	r2, 1c57a <uarte_instance_init.constprop.0+0xf6>
   1c572:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1c576:	2a00      	cmp	r2, #0
   1c578:	d0f8      	beq.n	1c56c <uarte_instance_init.constprop.0+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c57a:	2200      	movs	r2, #0
   1c57c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1c580:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1c584:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1c588:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1c58c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1c590:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1c594:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1c598:	2200      	movs	r2, #0
   1c59a:	4928      	ldr	r1, [pc, #160]	; (1c63c <uarte_instance_init.constprop.0+0x1b8>)
   1c59c:	3080      	adds	r0, #128	; 0x80
   1c59e:	f00f fcab 	bl	2bef8 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1c5a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1c5a6:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1c5aa:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1c5ae:	2200      	movs	r2, #0
   1c5b0:	4923      	ldr	r1, [pc, #140]	; (1c640 <uarte_instance_init.constprop.0+0x1bc>)
   1c5b2:	3020      	adds	r0, #32
   1c5b4:	f00f fca0 	bl	2bef8 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1c5b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1c5bc:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1c5c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c5c4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1c5c6:	bf5c      	itt	pl
   1c5c8:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1c5cc:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c5d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c5d4:	06db      	lsls	r3, r3, #27
   1c5d6:	bf44      	itt	mi
   1c5d8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1c5dc:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c5e0:	6973      	ldr	r3, [r6, #20]
   1c5e2:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1c5e6:	2300      	movs	r3, #0
   1c5e8:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5ec:	2301      	movs	r3, #1
   1c5ee:	60ab      	str	r3, [r5, #8]
   1c5f0:	60eb      	str	r3, [r5, #12]
	return 0;
   1c5f2:	e782      	b.n	1c4fa <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c5f4:	2308      	movs	r3, #8
   1c5f6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1c5fa:	f899 3008 	ldrb.w	r3, [r9, #8]
   1c5fe:	2b00      	cmp	r3, #0
   1c600:	d1de      	bne.n	1c5c0 <uarte_instance_init.constprop.0+0x13c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c602:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1c606:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1c60a:	69b3      	ldr	r3, [r6, #24]
   1c60c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1c610:	2301      	movs	r3, #1
   1c612:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c616:	602b      	str	r3, [r5, #0]
}
   1c618:	e7d2      	b.n	1c5c0 <uarte_instance_init.constprop.0+0x13c>
   1c61a:	bf00      	nop
   1c61c:	0bad0000 	.word	0x0bad0000
   1c620:	00032a9b 	.word	0x00032a9b
   1c624:	0002d734 	.word	0x0002d734
   1c628:	0002f6bd 	.word	0x0002f6bd
   1c62c:	0002e715 	.word	0x0002e715
   1c630:	0002f685 	.word	0x0002f685
   1c634:	40017000 	.word	0x40017000
   1c638:	000a0210 	.word	0x000a0210
   1c63c:	0002acdd 	.word	0x0002acdd
   1c640:	0002adad 	.word	0x0002adad

0001c644 <uarte_nrfx_poll_out>:
{
   1c644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c648:	4604      	mov	r4, r0
   1c64a:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1c64c:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c64e:	f00f fb31 	bl	2bcb4 <k_is_in_isr>
   1c652:	b9b0      	cbnz	r0, 1c682 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1c654:	4b2a      	ldr	r3, [pc, #168]	; (1c700 <uarte_nrfx_poll_out+0xbc>)
   1c656:	781b      	ldrb	r3, [r3, #0]
   1c658:	b19b      	cbz	r3, 1c682 <uarte_nrfx_poll_out+0x3e>
{
   1c65a:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1c65c:	6860      	ldr	r0, [r4, #4]
   1c65e:	f00e faf4 	bl	2ac4a <is_tx_ready.isra.0>
   1c662:	2800      	cmp	r0, #0
   1c664:	d138      	bne.n	1c6d8 <uarte_nrfx_poll_out+0x94>
   1c666:	2001      	movs	r0, #1
   1c668:	f00e fd28 	bl	2b0bc <nrfx_busy_wait>
   1c66c:	3f01      	subs	r7, #1
   1c66e:	d1f5      	bne.n	1c65c <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1c670:	2100      	movs	r1, #0
   1c672:	2021      	movs	r0, #33	; 0x21
   1c674:	f006 faec 	bl	22c50 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c678:	e7ef      	b.n	1c65a <uarte_nrfx_poll_out+0x16>
   1c67a:	f381 8811 	msr	BASEPRI, r1
   1c67e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c682:	f04f 0320 	mov.w	r3, #32
   1c686:	f3ef 8111 	mrs	r1, BASEPRI
   1c68a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c68e:	f3bf 8f6f 	isb	sy
   1c692:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1c696:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1c698:	4640      	mov	r0, r8
   1c69a:	f00e fad6 	bl	2ac4a <is_tx_ready.isra.0>
   1c69e:	2800      	cmp	r0, #0
   1c6a0:	d0eb      	beq.n	1c67a <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1c6a2:	68eb      	ldr	r3, [r5, #12]
   1c6a4:	b15b      	cbz	r3, 1c6be <uarte_nrfx_poll_out+0x7a>
   1c6a6:	68da      	ldr	r2, [r3, #12]
   1c6a8:	b14a      	cbz	r2, 1c6be <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1c6aa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1c6ae:	2a00      	cmp	r2, #0
   1c6b0:	da05      	bge.n	1c6be <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1c6b2:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1c6b6:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1c6ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1c6be:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1c6c0:	2201      	movs	r2, #1
	*data->char_out = c;
   1c6c2:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1c6c4:	4620      	mov	r0, r4
   1c6c6:	6969      	ldr	r1, [r5, #20]
   1c6c8:	f00e f968 	bl	2a99c <tx_start>
	__asm__ volatile(
   1c6cc:	f387 8811 	msr	BASEPRI, r7
   1c6d0:	f3bf 8f6f 	isb	sy
}
   1c6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c6d8:	f04f 0320 	mov.w	r3, #32
   1c6dc:	f3ef 8111 	mrs	r1, BASEPRI
   1c6e0:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6e4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1c6e8:	6860      	ldr	r0, [r4, #4]
   1c6ea:	460f      	mov	r7, r1
   1c6ec:	f00e faad 	bl	2ac4a <is_tx_ready.isra.0>
   1c6f0:	2800      	cmp	r0, #0
   1c6f2:	d1e4      	bne.n	1c6be <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1c6f4:	f381 8811 	msr	BASEPRI, r1
   1c6f8:	f3bf 8f6f 	isb	sy
}
   1c6fc:	e7b8      	b.n	1c670 <uarte_nrfx_poll_out+0x2c>
   1c6fe:	bf00      	nop
   1c700:	2003069e 	.word	0x2003069e

0001c704 <uarte_nrfx_rx_enable>:
{
   1c704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1c708:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1c70c:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1c70e:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1c712:	4605      	mov	r5, r0
   1c714:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1c716:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1c718:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1c71c:	b172      	cbz	r2, 1c73c <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1c71e:	4944      	ldr	r1, [pc, #272]	; (1c830 <uarte_nrfx_rx_enable+0x12c>)
   1c720:	f240 337d 	movw	r3, #893	; 0x37d
   1c724:	4a43      	ldr	r2, [pc, #268]	; (1c834 <uarte_nrfx_rx_enable+0x130>)
   1c726:	4844      	ldr	r0, [pc, #272]	; (1c838 <uarte_nrfx_rx_enable+0x134>)
   1c728:	f00a ff63 	bl	275f2 <assert_print>
   1c72c:	4843      	ldr	r0, [pc, #268]	; (1c83c <uarte_nrfx_rx_enable+0x138>)
   1c72e:	f00a ff60 	bl	275f2 <assert_print>
   1c732:	f240 317d 	movw	r1, #893	; 0x37d
   1c736:	483f      	ldr	r0, [pc, #252]	; (1c834 <uarte_nrfx_rx_enable+0x130>)
   1c738:	f00a ff54 	bl	275e4 <assert_post_action>
	if (data->async->rx_enabled) {
   1c73c:	68e2      	ldr	r2, [r4, #12]
   1c73e:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1c742:	2900      	cmp	r1, #0
   1c744:	d170      	bne.n	1c828 <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1c746:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1c74a:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1c74c:	bfca      	itet	gt
   1c74e:	2205      	movgt	r2, #5
   1c750:	235c      	movle	r3, #92	; 0x5c
   1c752:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1c756:	68e2      	ldr	r2, [r4, #12]
   1c758:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1c75a:	68e3      	ldr	r3, [r4, #12]
   1c75c:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1c760:	68e3      	ldr	r3, [r4, #12]
   1c762:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1c764:	2300      	movs	r3, #0
   1c766:	68e2      	ldr	r2, [r4, #12]
   1c768:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1c76a:	68e2      	ldr	r2, [r4, #12]
   1c76c:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1c76e:	68e2      	ldr	r2, [r4, #12]
   1c770:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c772:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c776:	06da      	lsls	r2, r3, #27
   1c778:	d523      	bpl.n	1c7c2 <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1c77a:	68e1      	ldr	r1, [r4, #12]
   1c77c:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1c780:	b1fe      	cbz	r6, 1c7c2 <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1c782:	42be      	cmp	r6, r7
   1c784:	bf28      	it	cs
   1c786:	463e      	movcs	r6, r7
   1c788:	4640      	mov	r0, r8
   1c78a:	4632      	mov	r2, r6
   1c78c:	31c4      	adds	r1, #196	; 0xc4
   1c78e:	f00f fc9d 	bl	2c0cc <memcpy>
			if (!len) {
   1c792:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1c794:	44b0      	add	r8, r6
			if (!len) {
   1c796:	d114      	bne.n	1c7c2 <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1c798:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1c79a:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1c79c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1c7a0:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1c7a2:	1b9b      	subs	r3, r3, r6
   1c7a4:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1c7a8:	f00e f927 	bl	2a9fa <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1c7ac:	68e1      	ldr	r1, [r4, #12]
   1c7ae:	4628      	mov	r0, r5
   1c7b0:	3158      	adds	r1, #88	; 0x58
   1c7b2:	f00e f93b 	bl	2aa2c <rx_buf_release>
				notify_rx_disable(dev);
   1c7b6:	4628      	mov	r0, r5
   1c7b8:	f00e f950 	bl	2aa5c <notify_rx_disable>
	return 0;
   1c7bc:	2000      	movs	r0, #0
}
   1c7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c7c2:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1c7c4:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1c7c8:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c7cc:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1c7d0:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1c7d4:	2201      	movs	r2, #1
   1c7d6:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1c7da:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1c7de:	68e3      	ldr	r3, [r4, #12]
   1c7e0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c7e4:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c7e8:	06db      	lsls	r3, r3, #27
   1c7ea:	d519      	bpl.n	1c820 <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1c7ec:	f04f 0320 	mov.w	r3, #32
   1c7f0:	f3ef 8111 	mrs	r1, BASEPRI
   1c7f4:	f383 8812 	msr	BASEPRI_MAX, r3
   1c7f8:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1c7fc:	692b      	ldr	r3, [r5, #16]
   1c7fe:	68db      	ldr	r3, [r3, #12]
   1c800:	b12b      	cbz	r3, 1c80e <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1c802:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1c806:	f042 0202 	orr.w	r2, r2, #2
   1c80a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c80e:	2208      	movs	r2, #8
	return config->uarte_regs;
   1c810:	686b      	ldr	r3, [r5, #4]
   1c812:	681b      	ldr	r3, [r3, #0]
   1c814:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1c818:	f381 8811 	msr	BASEPRI, r1
   1c81c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c820:	2301      	movs	r3, #1
   1c822:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1c826:	e7c9      	b.n	1c7bc <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1c828:	f06f 000f 	mvn.w	r0, #15
   1c82c:	e7c7      	b.n	1c7be <uarte_nrfx_rx_enable+0xba>
   1c82e:	bf00      	nop
   1c830:	00033fc0 	.word	0x00033fc0
   1c834:	00032aba 	.word	0x00032aba
   1c838:	0002e715 	.word	0x0002e715
   1c83c:	00032aee 	.word	0x00032aee

0001c840 <uarte_nrfx_isr_async>:
{
   1c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1c844:	6843      	ldr	r3, [r0, #4]
{
   1c846:	4604      	mov	r4, r0
	return config->uarte_regs;
   1c848:	681d      	ldr	r5, [r3, #0]
{
   1c84a:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c84c:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1c850:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1c852:	b169      	cbz	r1, 1c870 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c854:	2200      	movs	r2, #0
   1c856:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1c85a:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1c85e:	68da      	ldr	r2, [r3, #12]
   1c860:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1c864:	3301      	adds	r3, #1
   1c866:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1c86a:	b008      	add	sp, #32
   1c86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c870:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1c874:	b323      	cbz	r3, 1c8c0 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c876:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1c87a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1c87e:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1c880:	2214      	movs	r2, #20
	return config->uarte_regs;
   1c882:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1c884:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c886:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c88a:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1c88e:	f00f fc57 	bl	2c140 <memset>
   1c892:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1c894:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1c896:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1c89a:	f100 8103 	bmi.w	1caa4 <uarte_nrfx_isr_async+0x264>
   1c89e:	07b3      	lsls	r3, r6, #30
   1c8a0:	f100 8102 	bmi.w	1caa8 <uarte_nrfx_isr_async+0x268>
   1c8a4:	0777      	lsls	r7, r6, #29
   1c8a6:	f100 8101 	bmi.w	1caac <uarte_nrfx_isr_async+0x26c>
   1c8aa:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1c8ae:	4620      	mov	r0, r4
   1c8b0:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1c8b2:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1c8b6:	f00e f899 	bl	2a9ec <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1c8ba:	4620      	mov	r0, r4
   1c8bc:	f00e f92c 	bl	2ab18 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c8c0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1c8c4:	b38b      	cbz	r3, 1c92a <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1c8c6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1c8ca:	06d8      	lsls	r0, r3, #27
   1c8cc:	d52d      	bpl.n	1c92a <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c8ce:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1c8d2:	2201      	movs	r2, #1
   1c8d4:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1c8d8:	6926      	ldr	r6, [r4, #16]
   1c8da:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1c8de:	6863      	ldr	r3, [r4, #4]
   1c8e0:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1c8e2:	68f3      	ldr	r3, [r6, #12]
   1c8e4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1c8e8:	68f0      	ldr	r0, [r6, #12]
   1c8ea:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1c8ec:	f00f fb10 	bl	2bf10 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1c8f0:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1c8f2:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1c8f6:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1c8fa:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1c8fe:	68f2      	ldr	r2, [r6, #12]
   1c900:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1c902:	1a1b      	subs	r3, r3, r0
   1c904:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1c906:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1c908:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1c90c:	4408      	add	r0, r1
	if (rx_len > 0) {
   1c90e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1c910:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1c912:	dd02      	ble.n	1c91a <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1c914:	4620      	mov	r0, r4
   1c916:	f00e f870 	bl	2a9fa <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1c91a:	68f1      	ldr	r1, [r6, #12]
   1c91c:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1c920:	2b00      	cmp	r3, #0
   1c922:	f040 80c5 	bne.w	1cab0 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1c926:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c92a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1c92e:	b383      	cbz	r3, 1c992 <uarte_nrfx_isr_async+0x152>
   1c930:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1c934:	bb6e      	cbnz	r6, 1c992 <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1c936:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c938:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1c93c:	4631      	mov	r1, r6
   1c93e:	a803      	add	r0, sp, #12
   1c940:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1c944:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1c946:	f00f fbfb 	bl	2c140 <memset>
   1c94a:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1c94c:	a903      	add	r1, sp, #12
   1c94e:	4620      	mov	r0, r4
	struct uart_event evt = {
   1c950:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1c954:	f00e f84a 	bl	2a9ec <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1c958:	68fb      	ldr	r3, [r7, #12]
   1c95a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1c95c:	1c51      	adds	r1, r2, #1
   1c95e:	d018      	beq.n	1c992 <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1c960:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1c962:	68ff      	ldr	r7, [r7, #12]
   1c964:	498e      	ldr	r1, [pc, #568]	; (1cba0 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1c966:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1c968:	468e      	mov	lr, r1
   1c96a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1c96e:	4631      	mov	r1, r6
   1c970:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1c974:	fbcc e100 	smlal	lr, r1, ip, r0
   1c978:	2300      	movs	r3, #0
   1c97a:	4670      	mov	r0, lr
   1c97c:	4a89      	ldr	r2, [pc, #548]	; (1cba4 <uarte_nrfx_isr_async+0x364>)
   1c97e:	f7ec fab7 	bl	8ef0 <__aeabi_uldivmod>
   1c982:	4602      	mov	r2, r0
   1c984:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1c986:	e9cd 0100 	strd	r0, r1, [sp]
   1c98a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1c98e:	f006 fe7d 	bl	2368c <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c992:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1c996:	b333      	cbz	r3, 1c9e6 <uarte_nrfx_isr_async+0x1a6>
   1c998:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1c99c:	bb1e      	cbnz	r6, 1c9e6 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c99e:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1c9a2:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1c9a4:	4620      	mov	r0, r4
   1c9a6:	68f9      	ldr	r1, [r7, #12]
   1c9a8:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1c9ac:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1c9ae:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1c9b2:	f00e f83b 	bl	2aa2c <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1c9b6:	68f9      	ldr	r1, [r7, #12]
   1c9b8:	4620      	mov	r0, r4
   1c9ba:	3164      	adds	r1, #100	; 0x64
   1c9bc:	f00e f836 	bl	2aa2c <rx_buf_release>
	if (data->async->rx_enabled) {
   1c9c0:	68fb      	ldr	r3, [r7, #12]
   1c9c2:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1c9c6:	2a00      	cmp	r2, #0
   1c9c8:	f000 80a3 	beq.w	1cb12 <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1c9cc:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c9d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c9d4:	06d8      	lsls	r0, r3, #27
   1c9d6:	d503      	bpl.n	1c9e0 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1c9d8:	2102      	movs	r1, #2
   1c9da:	4620      	mov	r0, r4
   1c9dc:	f00e f90b 	bl	2abf6 <async_uart_release>
	notify_rx_disable(dev);
   1c9e0:	4620      	mov	r0, r4
   1c9e2:	f00e f83b 	bl	2aa5c <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c9e6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1c9ea:	b1db      	cbz	r3, 1ca24 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1c9ec:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1c9f0:	05d9      	lsls	r1, r3, #23
   1c9f2:	d517      	bpl.n	1ca24 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1c9f4:	6863      	ldr	r3, [r4, #4]
   1c9f6:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1c9f8:	f04f 0120 	mov.w	r1, #32
   1c9fc:	f3ef 8211 	mrs	r2, BASEPRI
   1ca00:	f381 8812 	msr	BASEPRI_MAX, r1
   1ca04:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ca08:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1ca0c:	b131      	cbz	r1, 1ca1c <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca0e:	2100      	movs	r1, #0
   1ca10:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1ca14:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca18:	2101      	movs	r1, #1
   1ca1a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1ca1c:	f382 8811 	msr	BASEPRI, r2
   1ca20:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ca24:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1ca28:	2b00      	cmp	r3, #0
   1ca2a:	f43f af1e 	beq.w	1c86a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1ca2e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1ca32:	025a      	lsls	r2, r3, #9
   1ca34:	f57f af19 	bpl.w	1c86a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1ca38:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1ca3a:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ca3c:	e9d3 7300 	ldrd	r7, r3, [r3]
   1ca40:	06db      	lsls	r3, r3, #27
   1ca42:	d46b      	bmi.n	1cb1c <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1ca44:	68eb      	ldr	r3, [r5, #12]
   1ca46:	689b      	ldr	r3, [r3, #8]
   1ca48:	2b00      	cmp	r3, #0
   1ca4a:	f43f af0e 	beq.w	1c86a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1ca4e:	f04f 0320 	mov.w	r3, #32
   1ca52:	f3ef 8211 	mrs	r2, BASEPRI
   1ca56:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca5a:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1ca5e:	68eb      	ldr	r3, [r5, #12]
   1ca60:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1ca64:	2900      	cmp	r1, #0
   1ca66:	bfac      	ite	ge
   1ca68:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1ca6c:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1ca70:	f382 8811 	msr	BASEPRI, r2
   1ca74:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1ca78:	68eb      	ldr	r3, [r5, #12]
   1ca7a:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1ca7e:	2a00      	cmp	r2, #0
   1ca80:	d059      	beq.n	1cb36 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1ca82:	f04f 0320 	mov.w	r3, #32
   1ca86:	f3ef 8611 	mrs	r6, BASEPRI
   1ca8a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca8e:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1ca92:	4629      	mov	r1, r5
   1ca94:	4620      	mov	r0, r4
   1ca96:	f00e f8e8 	bl	2ac6a <start_tx_locked>
	__asm__ volatile(
   1ca9a:	f386 8811 	msr	BASEPRI, r6
   1ca9e:	f3bf 8f6f 	isb	sy
				return;
   1caa2:	e6e2      	b.n	1c86a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1caa4:	2601      	movs	r6, #1
   1caa6:	e702      	b.n	1c8ae <uarte_nrfx_isr_async+0x6e>
   1caa8:	2602      	movs	r6, #2
   1caaa:	e700      	b.n	1c8ae <uarte_nrfx_isr_async+0x6e>
   1caac:	2604      	movs	r6, #4
   1caae:	e6fe      	b.n	1c8ae <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1cab0:	4620      	mov	r0, r4
   1cab2:	3158      	adds	r1, #88	; 0x58
   1cab4:	f00d ffba 	bl	2aa2c <rx_buf_release>
	__asm__ volatile(
   1cab8:	f04f 0320 	mov.w	r3, #32
   1cabc:	f3ef 8111 	mrs	r1, BASEPRI
   1cac0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cac4:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1cac8:	68f3      	ldr	r3, [r6, #12]
   1caca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1cacc:	b1f2      	cbz	r2, 1cb0c <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1cace:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1cad0:	68f3      	ldr	r3, [r6, #12]
   1cad2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1cad4:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1cad6:	2300      	movs	r3, #0
   1cad8:	68f2      	ldr	r2, [r6, #12]
   1cada:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1cadc:	68f2      	ldr	r2, [r6, #12]
   1cade:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1cae0:	68f2      	ldr	r2, [r6, #12]
   1cae2:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1cae8:	b90b      	cbnz	r3, 1caee <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1caea:	2301      	movs	r3, #1
   1caec:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1caee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1caf2:	f023 0320 	bic.w	r3, r3, #32
   1caf6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1cafa:	f381 8811 	msr	BASEPRI, r1
   1cafe:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1cb02:	2200      	movs	r2, #0
   1cb04:	68f3      	ldr	r3, [r6, #12]
   1cb06:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1cb0a:	e70e      	b.n	1c92a <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cb0c:	2301      	movs	r3, #1
   1cb0e:	607b      	str	r3, [r7, #4]
}
   1cb10:	e7f3      	b.n	1cafa <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1cb12:	4611      	mov	r1, r2
   1cb14:	6860      	ldr	r0, [r4, #4]
   1cb16:	f00e f839 	bl	2ab8c <rx_flush.isra.0>
   1cb1a:	e759      	b.n	1c9d0 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1cb1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1cb20:	2101      	movs	r1, #1
   1cb22:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1cb26:	4620      	mov	r0, r4
   1cb28:	f00e f865 	bl	2abf6 <async_uart_release>
		if (!data->async->tx_size) {
   1cb2c:	68eb      	ldr	r3, [r5, #12]
   1cb2e:	68db      	ldr	r3, [r3, #12]
   1cb30:	2b00      	cmp	r3, #0
   1cb32:	d187      	bne.n	1ca44 <uarte_nrfx_isr_async+0x204>
   1cb34:	e699      	b.n	1c86a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1cb36:	6899      	ldr	r1, [r3, #8]
   1cb38:	691a      	ldr	r2, [r3, #16]
   1cb3a:	4291      	cmp	r1, r2
   1cb3c:	d00c      	beq.n	1cb58 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1cb3e:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1cb40:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1cb42:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1cb44:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1cb46:	d128      	bne.n	1cb9a <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1cb48:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1cb4a:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1cb4c:	f00e f806 	bl	2ab5c <setup_tx_cache>
   1cb50:	2800      	cmp	r0, #0
   1cb52:	d196      	bne.n	1ca82 <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1cb54:	68eb      	ldr	r3, [r5, #12]
   1cb56:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1cb58:	68e8      	ldr	r0, [r5, #12]
   1cb5a:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1cb5c:	f00f f9d8 	bl	2bf10 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1cb60:	2214      	movs	r2, #20
   1cb62:	2100      	movs	r1, #0
   1cb64:	a803      	add	r0, sp, #12
   1cb66:	f00f faeb 	bl	2c140 <memset>
		.data.tx.buf = data->async->tx_buf,
   1cb6a:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1cb6c:	4620      	mov	r0, r4
	struct uart_event evt = {
   1cb6e:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1cb70:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1cb72:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1cb76:	68db      	ldr	r3, [r3, #12]
   1cb78:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1cb7a:	bf1c      	itt	ne
   1cb7c:	2301      	movne	r3, #1
   1cb7e:	f88d 300c 	strbne.w	r3, [sp, #12]
   1cb82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1cb86:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1cb8a:	2300      	movs	r3, #0
   1cb8c:	68ea      	ldr	r2, [r5, #12]
   1cb8e:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1cb90:	68ea      	ldr	r2, [r5, #12]
   1cb92:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1cb94:	f00d ff2a 	bl	2a9ec <user_callback>
   1cb98:	e667      	b.n	1c86a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1cb9a:	4616      	mov	r6, r2
   1cb9c:	e7dc      	b.n	1cb58 <uarte_nrfx_isr_async+0x318>
   1cb9e:	bf00      	nop
   1cba0:	000f423f 	.word	0x000f423f
   1cba4:	000f4240 	.word	0x000f4240

0001cba8 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1cba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1cbaa:	7e01      	ldrb	r1, [r0, #24]
   1cbac:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1cbae:	2902      	cmp	r1, #2
   1cbb0:	d014      	beq.n	1cbdc <bt_rpmsg_send+0x34>
   1cbb2:	2904      	cmp	r1, #4
   1cbb4:	d011      	beq.n	1cbda <bt_rpmsg_send+0x32>
   1cbb6:	b1f9      	cbz	r1, 1cbf8 <bt_rpmsg_send+0x50>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1cbb8:	4b10      	ldr	r3, [pc, #64]	; (1cbfc <bt_rpmsg_send+0x54>)
	switch (bt_buf_get_type(buf)) {
   1cbba:	9103      	str	r1, [sp, #12]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1cbbc:	9302      	str	r3, [sp, #8]
   1cbbe:	2300      	movs	r3, #0
   1cbc0:	2201      	movs	r2, #1
   1cbc2:	4618      	mov	r0, r3
   1cbc4:	e9cd 3300 	strd	r3, r3, [sp]
   1cbc8:	490d      	ldr	r1, [pc, #52]	; (1cc00 <bt_rpmsg_send+0x58>)
   1cbca:	f00e f8f3 	bl	2adb4 <z_log_msg_runtime_create.constprop.0>
	}

done:
	net_buf_unref(buf);
   1cbce:	4620      	mov	r0, r4
   1cbd0:	f7fd fbec 	bl	1a3ac <net_buf_unref>
	return 0;
}
   1cbd4:	2000      	movs	r0, #0
   1cbd6:	b004      	add	sp, #16
   1cbd8:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   1cbda:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1cbdc:	f104 000c 	add.w	r0, r4, #12
   1cbe0:	f00d fcda 	bl	2a598 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1cbe4:	8a22      	ldrh	r2, [r4, #16]
   1cbe6:	68e1      	ldr	r1, [r4, #12]
   1cbe8:	4806      	ldr	r0, [pc, #24]	; (1cc04 <bt_rpmsg_send+0x5c>)
   1cbea:	f7f3 fb43 	bl	10274 <ipc_service_send>
	if (err < 0) {
   1cbee:	2800      	cmp	r0, #0
   1cbf0:	daed      	bge.n	1cbce <bt_rpmsg_send+0x26>
		LOG_ERR("Failed to send (err %d)", err);
   1cbf2:	4b05      	ldr	r3, [pc, #20]	; (1cc08 <bt_rpmsg_send+0x60>)
   1cbf4:	9003      	str	r0, [sp, #12]
   1cbf6:	e7e1      	b.n	1cbbc <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
   1cbf8:	2101      	movs	r1, #1
   1cbfa:	e7ef      	b.n	1cbdc <bt_rpmsg_send+0x34>
   1cbfc:	00032b2a 	.word	0x00032b2a
   1cc00:	0002d64c 	.word	0x0002d64c
   1cc04:	2002f550 	.word	0x2002f550
   1cc08:	00032b3a 	.word	0x00032b3a

0001cc0c <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1cc0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1cc0e:	4809      	ldr	r0, [pc, #36]	; (1cc34 <bt_rpmsg_init+0x28>)
   1cc10:	f7f6 fdde 	bl	137d0 <bt_hci_driver_register>
	if (err < 0) {
   1cc14:	1e04      	subs	r4, r0, #0
   1cc16:	da0a      	bge.n	1cc2e <bt_rpmsg_init+0x22>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1cc18:	4b07      	ldr	r3, [pc, #28]	; (1cc38 <bt_rpmsg_init+0x2c>)
   1cc1a:	2201      	movs	r2, #1
   1cc1c:	9302      	str	r3, [sp, #8]
   1cc1e:	2300      	movs	r3, #0
   1cc20:	4906      	ldr	r1, [pc, #24]	; (1cc3c <bt_rpmsg_init+0x30>)
   1cc22:	4618      	mov	r0, r3
   1cc24:	e9cd 3300 	strd	r3, r3, [sp]
   1cc28:	9403      	str	r4, [sp, #12]
   1cc2a:	f00e f8c3 	bl	2adb4 <z_log_msg_runtime_create.constprop.0>
	}

	return err;
}
   1cc2e:	4620      	mov	r0, r4
   1cc30:	b004      	add	sp, #16
   1cc32:	bd10      	pop	{r4, pc}
   1cc34:	0002e4a0 	.word	0x0002e4a0
   1cc38:	00032b52 	.word	0x00032b52
   1cc3c:	0002d64c 	.word	0x0002d64c

0001cc40 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1cc40:	4801      	ldr	r0, [pc, #4]	; (1cc48 <hci_ept_bound+0x8>)
   1cc42:	f004 b911 	b.w	20e68 <z_impl_k_sem_give>
   1cc46:	bf00      	nop
   1cc48:	20008ba8 	.word	0x20008ba8

0001cc4c <bt_rpmsg_open>:
{
   1cc4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1cc4e:	4816      	ldr	r0, [pc, #88]	; (1cca8 <bt_rpmsg_open+0x5c>)
   1cc50:	f7f3 fab2 	bl	101b8 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1cc54:	4604      	mov	r4, r0
   1cc56:	b180      	cbz	r0, 1cc7a <bt_rpmsg_open+0x2e>
   1cc58:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1cc5c:	d00d      	beq.n	1cc7a <bt_rpmsg_open+0x2e>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1cc5e:	4b13      	ldr	r3, [pc, #76]	; (1ccac <bt_rpmsg_open+0x60>)
   1cc60:	9003      	str	r0, [sp, #12]
		LOG_ERR("Endpoint binding failed with %d", err);
   1cc62:	9302      	str	r3, [sp, #8]
   1cc64:	2300      	movs	r3, #0
   1cc66:	2201      	movs	r2, #1
   1cc68:	4618      	mov	r0, r3
   1cc6a:	e9cd 3300 	strd	r3, r3, [sp]
   1cc6e:	4910      	ldr	r1, [pc, #64]	; (1ccb0 <bt_rpmsg_open+0x64>)
   1cc70:	f00e f8a0 	bl	2adb4 <z_log_msg_runtime_create.constprop.0>
}
   1cc74:	4620      	mov	r0, r4
   1cc76:	b004      	add	sp, #16
   1cc78:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1cc7a:	4a0e      	ldr	r2, [pc, #56]	; (1ccb4 <bt_rpmsg_open+0x68>)
   1cc7c:	490e      	ldr	r1, [pc, #56]	; (1ccb8 <bt_rpmsg_open+0x6c>)
   1cc7e:	480a      	ldr	r0, [pc, #40]	; (1cca8 <bt_rpmsg_open+0x5c>)
   1cc80:	f7f3 fac6 	bl	10210 <ipc_service_register_endpoint>
	if (err) {
   1cc84:	4604      	mov	r4, r0
   1cc86:	b110      	cbz	r0, 1cc8e <bt_rpmsg_open+0x42>
		LOG_ERR("Registering endpoint failed with %d", err);
   1cc88:	4b0c      	ldr	r3, [pc, #48]	; (1ccbc <bt_rpmsg_open+0x70>)
   1cc8a:	9003      	str	r0, [sp, #12]
   1cc8c:	e7e9      	b.n	1cc62 <bt_rpmsg_open+0x16>
	return z_impl_k_sem_take(sem, timeout);
   1cc8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1cc92:	2300      	movs	r3, #0
   1cc94:	480a      	ldr	r0, [pc, #40]	; (1ccc0 <bt_rpmsg_open+0x74>)
   1cc96:	f004 f92b 	bl	20ef0 <z_impl_k_sem_take>
	if (err) {
   1cc9a:	4604      	mov	r4, r0
   1cc9c:	2800      	cmp	r0, #0
   1cc9e:	d0e9      	beq.n	1cc74 <bt_rpmsg_open+0x28>
		LOG_ERR("Endpoint binding failed with %d", err);
   1cca0:	4b08      	ldr	r3, [pc, #32]	; (1ccc4 <bt_rpmsg_open+0x78>)
   1cca2:	9003      	str	r0, [sp, #12]
   1cca4:	e7dd      	b.n	1cc62 <bt_rpmsg_open+0x16>
   1cca6:	bf00      	nop
   1cca8:	0002d0fc 	.word	0x0002d0fc
   1ccac:	00032b7c 	.word	0x00032b7c
   1ccb0:	0002d64c 	.word	0x0002d64c
   1ccb4:	200086bc 	.word	0x200086bc
   1ccb8:	2002f550 	.word	0x2002f550
   1ccbc:	00032bac 	.word	0x00032bac
   1ccc0:	20008ba8 	.word	0x20008ba8
   1ccc4:	00032bd0 	.word	0x00032bd0

0001ccc8 <hci_ept_recv>:
{
   1ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cccc:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   1ccce:	7800      	ldrb	r0, [r0, #0]
{
   1ccd0:	460d      	mov	r5, r1
	switch (pkt_indicator) {
   1ccd2:	2804      	cmp	r0, #4
{
   1ccd4:	b089      	sub	sp, #36	; 0x24
	remaining -= sizeof(pkt_indicator);
   1ccd6:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1ccda:	d009      	beq.n	1ccf0 <hci_ept_recv+0x28>
   1ccdc:	2805      	cmp	r0, #5
   1ccde:	f000 8099 	beq.w	1ce14 <hci_ept_recv+0x14c>
   1cce2:	2802      	cmp	r0, #2
   1cce4:	f040 80bd 	bne.w	1ce62 <hci_ept_recv+0x19a>
	if (remaining < sizeof(hdr)) {
   1cce8:	2b03      	cmp	r3, #3
   1ccea:	d867      	bhi.n	1cdbc <hci_ept_recv+0xf4>
		LOG_ERR("Not enough data for ACL header");
   1ccec:	4b63      	ldr	r3, [pc, #396]	; (1ce7c <hci_ept_recv+0x1b4>)
   1ccee:	e002      	b.n	1ccf6 <hci_ept_recv+0x2e>
	if (remaining < sizeof(hdr)) {
   1ccf0:	2b01      	cmp	r3, #1
   1ccf2:	d80c      	bhi.n	1cd0e <hci_ept_recv+0x46>
		LOG_ERR("Not enough data for event header");
   1ccf4:	4b62      	ldr	r3, [pc, #392]	; (1ce80 <hci_ept_recv+0x1b8>)
		LOG_ERR("Event payload length is not correct");
   1ccf6:	9302      	str	r3, [sp, #8]
   1ccf8:	2300      	movs	r3, #0
   1ccfa:	2201      	movs	r2, #1
   1ccfc:	4618      	mov	r0, r3
   1ccfe:	e9cd 3300 	strd	r3, r3, [sp]
   1cd02:	4960      	ldr	r1, [pc, #384]	; (1ce84 <hci_ept_recv+0x1bc>)
   1cd04:	f00e f856 	bl	2adb4 <z_log_msg_runtime_create.constprop.0>
}
   1cd08:	b009      	add	sp, #36	; 0x24
   1cd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1cd0e:	7873      	ldrb	r3, [r6, #1]
   1cd10:	2b3e      	cmp	r3, #62	; 0x3e
   1cd12:	d136      	bne.n	1cd82 <hci_ept_recv+0xba>
		switch (subevt_type) {
   1cd14:	78f7      	ldrb	r7, [r6, #3]
   1cd16:	1ebb      	subs	r3, r7, #2
   1cd18:	425f      	negs	r7, r3
   1cd1a:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1cd1c:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1cd20:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
   1cd22:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1cd26:	f8ad 301c 	strh.w	r3, [sp, #28]
	if (remaining != hdr.len) {
   1cd2a:	d12f      	bne.n	1cd8c <hci_ept_recv+0xc4>
   1cd2c:	b35f      	cbz	r7, 1cd86 <hci_ept_recv+0xbe>
   1cd2e:	f04f 0800 	mov.w	r8, #0
   1cd32:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1cd36:	f8df b150 	ldr.w	fp, [pc, #336]	; 1ce88 <hci_ept_recv+0x1c0>
   1cd3a:	f8df a148 	ldr.w	sl, [pc, #328]	; 1ce84 <hci_ept_recv+0x1bc>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1cd3e:	4642      	mov	r2, r8
   1cd40:	464b      	mov	r3, r9
   1cd42:	4639      	mov	r1, r7
   1cd44:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1cd48:	f7f5 fb08 	bl	1235c <bt_buf_get_evt>
		if (!buf) {
   1cd4c:	4604      	mov	r4, r0
   1cd4e:	b1f8      	cbz	r0, 1cd90 <hci_ept_recv+0xc8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1cd50:	f100 070c 	add.w	r7, r0, #12
   1cd54:	2202      	movs	r2, #2
   1cd56:	a907      	add	r1, sp, #28
   1cd58:	4638      	mov	r0, r7
   1cd5a:	f00d fc38 	bl	2a5ce <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1cd5e:	4638      	mov	r0, r7
   1cd60:	f00d fc2d 	bl	2a5be <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1cd64:	4285      	cmp	r5, r0
   1cd66:	d91e      	bls.n	1cda6 <hci_ept_recv+0xde>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1cd68:	4b48      	ldr	r3, [pc, #288]	; (1ce8c <hci_ept_recv+0x1c4>)
   1cd6a:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1cd6e:	9302      	str	r3, [sp, #8]
   1cd70:	2300      	movs	r3, #0
   1cd72:	2201      	movs	r2, #1
   1cd74:	4618      	mov	r0, r3
   1cd76:	e9cd 3300 	strd	r3, r3, [sp]
   1cd7a:	4942      	ldr	r1, [pc, #264]	; (1ce84 <hci_ept_recv+0x1bc>)
   1cd7c:	f00e f81a 	bl	2adb4 <z_log_msg_runtime_create.constprop.0>
   1cd80:	e03c      	b.n	1cdfc <hci_ept_recv+0x134>
			return false;
   1cd82:	2700      	movs	r7, #0
   1cd84:	e7ca      	b.n	1cd1c <hci_ept_recv+0x54>
   1cd86:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1cd8a:	e7d2      	b.n	1cd32 <hci_ept_recv+0x6a>
		LOG_ERR("Event payload length is not correct");
   1cd8c:	4b40      	ldr	r3, [pc, #256]	; (1ce90 <hci_ept_recv+0x1c8>)
   1cd8e:	e7b2      	b.n	1ccf6 <hci_ept_recv+0x2e>
			if (discardable) {
   1cd90:	2f00      	cmp	r7, #0
   1cd92:	d1b9      	bne.n	1cd08 <hci_ept_recv+0x40>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1cd94:	463b      	mov	r3, r7
   1cd96:	2202      	movs	r2, #2
   1cd98:	4651      	mov	r1, sl
   1cd9a:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1cd9e:	9700      	str	r7, [sp, #0]
   1cda0:	f00e f808 	bl	2adb4 <z_log_msg_runtime_create.constprop.0>
	} while (!buf);
   1cda4:	e7cb      	b.n	1cd3e <hci_ept_recv+0x76>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1cda6:	462a      	mov	r2, r5
   1cda8:	1cf1      	adds	r1, r6, #3
   1cdaa:	4638      	mov	r0, r7
   1cdac:	f00d fc0f 	bl	2a5ce <net_buf_simple_add_mem>
		bt_recv(buf);
   1cdb0:	4620      	mov	r0, r4
}
   1cdb2:	b009      	add	sp, #36	; 0x24
   1cdb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_recv(buf);
   1cdb8:	f7f6 bcda 	b.w	13770 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1cdbc:	2200      	movs	r2, #0
   1cdbe:	2300      	movs	r3, #0
   1cdc0:	2003      	movs	r0, #3
   1cdc2:	f7f5 fa7d 	bl	122c0 <bt_buf_get_rx>
	if (buf) {
   1cdc6:	4604      	mov	r4, r0
   1cdc8:	b1e0      	cbz	r0, 1ce04 <hci_ept_recv+0x13c>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1cdca:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1cdce:	f100 070c 	add.w	r7, r0, #12
   1cdd2:	2204      	movs	r2, #4
   1cdd4:	4638      	mov	r0, r7
   1cdd6:	a907      	add	r1, sp, #28
   1cdd8:	9307      	str	r3, [sp, #28]
   1cdda:	f00d fbf8 	bl	2a5ce <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1cdde:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1cde2:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1cde4:	429d      	cmp	r5, r3
   1cde6:	d034      	beq.n	1ce52 <hci_ept_recv+0x18a>
		LOG_ERR("ACL payload length is not correct");
   1cde8:	4b2a      	ldr	r3, [pc, #168]	; (1ce94 <hci_ept_recv+0x1cc>)
		LOG_ERR("ISO payload length is not correct");
   1cdea:	9302      	str	r3, [sp, #8]
   1cdec:	2300      	movs	r3, #0
   1cdee:	2201      	movs	r2, #1
   1cdf0:	4618      	mov	r0, r3
   1cdf2:	e9cd 3300 	strd	r3, r3, [sp]
   1cdf6:	4923      	ldr	r1, [pc, #140]	; (1ce84 <hci_ept_recv+0x1bc>)
   1cdf8:	f00d ffdc 	bl	2adb4 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1cdfc:	4620      	mov	r0, r4
   1cdfe:	f7fd fad5 	bl	1a3ac <net_buf_unref>
	if (buf) {
   1ce02:	e781      	b.n	1cd08 <hci_ept_recv+0x40>
		LOG_ERR("No available ACL buffers!");
   1ce04:	4b24      	ldr	r3, [pc, #144]	; (1ce98 <hci_ept_recv+0x1d0>)
		LOG_ERR("No available ISO buffers!");
   1ce06:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1ce0a:	2201      	movs	r2, #1
   1ce0c:	4623      	mov	r3, r4
   1ce0e:	491d      	ldr	r1, [pc, #116]	; (1ce84 <hci_ept_recv+0x1bc>)
   1ce10:	9400      	str	r4, [sp, #0]
   1ce12:	e777      	b.n	1cd04 <hci_ept_recv+0x3c>
	if (remaining < sizeof(hdr)) {
   1ce14:	2b03      	cmp	r3, #3
   1ce16:	d801      	bhi.n	1ce1c <hci_ept_recv+0x154>
		LOG_ERR("Not enough data for ISO header");
   1ce18:	4b20      	ldr	r3, [pc, #128]	; (1ce9c <hci_ept_recv+0x1d4>)
   1ce1a:	e76c      	b.n	1ccf6 <hci_ept_recv+0x2e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1ce1c:	2200      	movs	r2, #0
   1ce1e:	2300      	movs	r3, #0
   1ce20:	f7f5 fa4e 	bl	122c0 <bt_buf_get_rx>
	if (buf) {
   1ce24:	4604      	mov	r4, r0
   1ce26:	b190      	cbz	r0, 1ce4e <hci_ept_recv+0x186>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1ce28:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1ce2c:	f100 070c 	add.w	r7, r0, #12
   1ce30:	2204      	movs	r2, #4
   1ce32:	4638      	mov	r0, r7
   1ce34:	a907      	add	r1, sp, #28
   1ce36:	9307      	str	r3, [sp, #28]
   1ce38:	f00d fbc9 	bl	2a5ce <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1ce3c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   1ce40:	3d05      	subs	r5, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1ce42:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1ce46:	429d      	cmp	r5, r3
   1ce48:	d003      	beq.n	1ce52 <hci_ept_recv+0x18a>
		LOG_ERR("ISO payload length is not correct");
   1ce4a:	4b15      	ldr	r3, [pc, #84]	; (1cea0 <hci_ept_recv+0x1d8>)
   1ce4c:	e7cd      	b.n	1cdea <hci_ept_recv+0x122>
		LOG_ERR("No available ISO buffers!");
   1ce4e:	4b15      	ldr	r3, [pc, #84]	; (1cea4 <hci_ept_recv+0x1dc>)
   1ce50:	e7d9      	b.n	1ce06 <hci_ept_recv+0x13e>
	return net_buf_simple_tailroom(&buf->b);
   1ce52:	4638      	mov	r0, r7
   1ce54:	f00d fbb3 	bl	2a5be <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1ce58:	4285      	cmp	r5, r0
   1ce5a:	d885      	bhi.n	1cd68 <hci_ept_recv+0xa0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ce5c:	462a      	mov	r2, r5
   1ce5e:	1d71      	adds	r1, r6, #5
   1ce60:	e7a3      	b.n	1cdaa <hci_ept_recv+0xe2>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1ce62:	4b11      	ldr	r3, [pc, #68]	; (1cea8 <hci_ept_recv+0x1e0>)
	switch (pkt_indicator) {
   1ce64:	9003      	str	r0, [sp, #12]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1ce66:	9302      	str	r3, [sp, #8]
   1ce68:	2300      	movs	r3, #0
   1ce6a:	2201      	movs	r2, #1
   1ce6c:	4618      	mov	r0, r3
   1ce6e:	e9cd 3300 	strd	r3, r3, [sp]
   1ce72:	4904      	ldr	r1, [pc, #16]	; (1ce84 <hci_ept_recv+0x1bc>)
   1ce74:	f00d ff9e 	bl	2adb4 <z_log_msg_runtime_create.constprop.0>
   1ce78:	e746      	b.n	1cd08 <hci_ept_recv+0x40>
   1ce7a:	bf00      	nop
   1ce7c:	00032c8d 	.word	0x00032c8d
   1ce80:	00032bf0 	.word	0x00032bf0
   1ce84:	0002d64c 	.word	0x0002d64c
   1ce88:	00032c35 	.word	0x00032c35
   1ce8c:	00032c6a 	.word	0x00032c6a
   1ce90:	00032c11 	.word	0x00032c11
   1ce94:	00032cc6 	.word	0x00032cc6
   1ce98:	00032cac 	.word	0x00032cac
   1ce9c:	00032ce8 	.word	0x00032ce8
   1cea0:	00032d21 	.word	0x00032d21
   1cea4:	00032d07 	.word	0x00032d07
   1cea8:	00032d43 	.word	0x00032d43

0001ceac <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1ceac:	2301      	movs	r3, #1
   1ceae:	4083      	lsls	r3, r0
{
   1ceb0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1ceb2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ceb4:	4a0b      	ldr	r2, [pc, #44]	; (1cee4 <compare_int_lock+0x38>)
   1ceb6:	e8d2 1fef 	ldaex	r1, [r2]
   1ceba:	ea01 0504 	and.w	r5, r1, r4
   1cebe:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1cec2:	2e00      	cmp	r6, #0
   1cec4:	d1f7      	bne.n	1ceb6 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ceca:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1cecc:	4806      	ldr	r0, [pc, #24]	; (1cee8 <compare_int_lock+0x3c>)
   1cece:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1ced2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ced6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1ceda:	420b      	tst	r3, r1
}
   1cedc:	bf14      	ite	ne
   1cede:	2001      	movne	r0, #1
   1cee0:	2000      	moveq	r0, #0
   1cee2:	bd70      	pop	{r4, r5, r6, pc}
   1cee4:	2002f560 	.word	0x2002f560
   1cee8:	40015000 	.word	0x40015000

0001ceec <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ceee:	491b      	ldr	r1, [pc, #108]	; (1cf5c <sys_clock_timeout_handler+0x70>)
{
   1cef0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1cef2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1cef6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1cef8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1cefc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1cf00:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1cf02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1cf06:	d30f      	bcc.n	1cf28 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1cf08:	f006 fa24 	bl	23354 <sys_clock_announce>
    return p_reg->CC[ch];
   1cf0c:	00a3      	lsls	r3, r4, #2
   1cf0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cf12:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1cf16:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1cf1a:	4295      	cmp	r5, r2
   1cf1c:	d11d      	bne.n	1cf5a <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1cf1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1cf22:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1cf26:	e012      	b.n	1cf4e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1cf28:	4b0d      	ldr	r3, [pc, #52]	; (1cf60 <sys_clock_timeout_handler+0x74>)
   1cf2a:	681b      	ldr	r3, [r3, #0]
   1cf2c:	0a1a      	lsrs	r2, r3, #8
   1cf2e:	061b      	lsls	r3, r3, #24
   1cf30:	195e      	adds	r6, r3, r5
   1cf32:	4b0c      	ldr	r3, [pc, #48]	; (1cf64 <sys_clock_timeout_handler+0x78>)
   1cf34:	f142 0700 	adc.w	r7, r2, #0
   1cf38:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1cf3c:	f006 fa0a 	bl	23354 <sys_clock_announce>
    return p_reg->CC[ch];
   1cf40:	4a09      	ldr	r2, [pc, #36]	; (1cf68 <sys_clock_timeout_handler+0x7c>)
   1cf42:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1cf46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1cf4a:	429d      	cmp	r5, r3
   1cf4c:	d105      	bne.n	1cf5a <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cf4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1cf52:	4a05      	ldr	r2, [pc, #20]	; (1cf68 <sys_clock_timeout_handler+0x7c>)
   1cf54:	40a3      	lsls	r3, r4
   1cf56:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1cf5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cf5c:	20009c88 	.word	0x20009c88
   1cf60:	2002f564 	.word	0x2002f564
   1cf64:	20009c90 	.word	0x20009c90
   1cf68:	40015000 	.word	0x40015000

0001cf6c <compare_int_unlock>:
	if (key) {
   1cf6c:	b1d9      	cbz	r1, 1cfa6 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1cf6e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cf70:	4a0d      	ldr	r2, [pc, #52]	; (1cfa8 <compare_int_unlock+0x3c>)
   1cf72:	4083      	lsls	r3, r0
   1cf74:	e8d2 cfef 	ldaex	ip, [r2]
   1cf78:	ea4c 0c03 	orr.w	ip, ip, r3
   1cf7c:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1cf80:	2900      	cmp	r1, #0
   1cf82:	d1f7      	bne.n	1cf74 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cf84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1cf88:	4a08      	ldr	r2, [pc, #32]	; (1cfac <compare_int_unlock+0x40>)
   1cf8a:	4083      	lsls	r3, r0
   1cf8c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cf90:	4b07      	ldr	r3, [pc, #28]	; (1cfb0 <compare_int_unlock+0x44>)
   1cf92:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1cf96:	40c3      	lsrs	r3, r0
   1cf98:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cf9a:	bf42      	ittt	mi
   1cf9c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1cfa0:	4b04      	ldrmi	r3, [pc, #16]	; (1cfb4 <compare_int_unlock+0x48>)
   1cfa2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1cfa6:	4770      	bx	lr
   1cfa8:	2002f560 	.word	0x2002f560
   1cfac:	40015000 	.word	0x40015000
   1cfb0:	2002f558 	.word	0x2002f558
   1cfb4:	e000e100 	.word	0xe000e100

0001cfb8 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1cfb8:	2801      	cmp	r0, #1
{
   1cfba:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1cfbc:	d909      	bls.n	1cfd2 <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1cfbe:	4907      	ldr	r1, [pc, #28]	; (1cfdc <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1cfc0:	4807      	ldr	r0, [pc, #28]	; (1cfe0 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1cfc2:	237c      	movs	r3, #124	; 0x7c
   1cfc4:	4a07      	ldr	r2, [pc, #28]	; (1cfe4 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1cfc6:	f00a fb14 	bl	275f2 <assert_print>
   1cfca:	217c      	movs	r1, #124	; 0x7c
   1cfcc:	4805      	ldr	r0, [pc, #20]	; (1cfe4 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1cfce:	f00a fb09 	bl	275e4 <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1cfd2:	0083      	lsls	r3, r0, #2
}
   1cfd4:	4804      	ldr	r0, [pc, #16]	; (1cfe8 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1cfd6:	4418      	add	r0, r3
   1cfd8:	bd08      	pop	{r3, pc}
   1cfda:	bf00      	nop
   1cfdc:	00032dbe 	.word	0x00032dbe
   1cfe0:	0002e715 	.word	0x0002e715
   1cfe4:	00032d8d 	.word	0x00032d8d
   1cfe8:	40015140 	.word	0x40015140

0001cfec <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1cfec:	2801      	cmp	r0, #1
{
   1cfee:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1cff0:	d909      	bls.n	1d006 <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1cff2:	4907      	ldr	r1, [pc, #28]	; (1d010 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1cff4:	4807      	ldr	r0, [pc, #28]	; (1d014 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1cff6:	2383      	movs	r3, #131	; 0x83
   1cff8:	4a07      	ldr	r2, [pc, #28]	; (1d018 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1cffa:	f00a fafa 	bl	275f2 <assert_print>
   1cffe:	2183      	movs	r1, #131	; 0x83
   1d000:	4805      	ldr	r0, [pc, #20]	; (1d018 <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1d002:	f00a faef 	bl	275e4 <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1d006:	2800      	cmp	r0, #0
}
   1d008:	4804      	ldr	r0, [pc, #16]	; (1d01c <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1d00a:	bf08      	it	eq
   1d00c:	2000      	moveq	r0, #0
   1d00e:	bd08      	pop	{r3, pc}
   1d010:	00032dbe 	.word	0x00032dbe
   1d014:	0002e715 	.word	0x0002e715
   1d018:	00032d8d 	.word	0x00032d8d
   1d01c:	40015044 	.word	0x40015044

0001d020 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1d020:	2801      	cmp	r0, #1
{
   1d022:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1d024:	d909      	bls.n	1d03a <z_nrf_rtc_timer_compare_read+0x1a>
   1d026:	4908      	ldr	r1, [pc, #32]	; (1d048 <z_nrf_rtc_timer_compare_read+0x28>)
   1d028:	4808      	ldr	r0, [pc, #32]	; (1d04c <z_nrf_rtc_timer_compare_read+0x2c>)
   1d02a:	23b9      	movs	r3, #185	; 0xb9
   1d02c:	4a08      	ldr	r2, [pc, #32]	; (1d050 <z_nrf_rtc_timer_compare_read+0x30>)
   1d02e:	f00a fae0 	bl	275f2 <assert_print>
   1d032:	21b9      	movs	r1, #185	; 0xb9
   1d034:	4806      	ldr	r0, [pc, #24]	; (1d050 <z_nrf_rtc_timer_compare_read+0x30>)
   1d036:	f00a fad5 	bl	275e4 <assert_post_action>
    return p_reg->CC[ch];
   1d03a:	4b06      	ldr	r3, [pc, #24]	; (1d054 <z_nrf_rtc_timer_compare_read+0x34>)
   1d03c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1d040:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1d044:	bd08      	pop	{r3, pc}
   1d046:	bf00      	nop
   1d048:	00032dbe 	.word	0x00032dbe
   1d04c:	0002e715 	.word	0x0002e715
   1d050:	00032d8d 	.word	0x00032d8d
   1d054:	40015000 	.word	0x40015000

0001d058 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1d058:	4b0d      	ldr	r3, [pc, #52]	; (1d090 <z_nrf_rtc_timer_read+0x38>)
   1d05a:	6818      	ldr	r0, [r3, #0]
   1d05c:	0a01      	lsrs	r1, r0, #8
   1d05e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1d060:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1d064:	4b0b      	ldr	r3, [pc, #44]	; (1d094 <z_nrf_rtc_timer_read+0x3c>)
   1d066:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1d06a:	1818      	adds	r0, r3, r0
   1d06c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1d070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d074:	d20a      	bcs.n	1d08c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1d076:	4b08      	ldr	r3, [pc, #32]	; (1d098 <z_nrf_rtc_timer_read+0x40>)
   1d078:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d07c:	4290      	cmp	r0, r2
   1d07e:	eb71 0303 	sbcs.w	r3, r1, r3
   1d082:	d203      	bcs.n	1d08c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1d084:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1d088:	f141 0100 	adc.w	r1, r1, #0
}
   1d08c:	4770      	bx	lr
   1d08e:	bf00      	nop
   1d090:	2002f564 	.word	0x2002f564
   1d094:	40015000 	.word	0x40015000
   1d098:	20009c90 	.word	0x20009c90

0001d09c <compare_set>:
{
   1d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0a0:	b085      	sub	sp, #20
   1d0a2:	4614      	mov	r4, r2
   1d0a4:	461d      	mov	r5, r3
   1d0a6:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1d0a8:	f7ff ff00 	bl	1ceac <compare_int_lock>
   1d0ac:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1d0ae:	f7ff ffd3 	bl	1d058 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1d0b2:	42a0      	cmp	r0, r4
   1d0b4:	eb71 0305 	sbcs.w	r3, r1, r5
   1d0b8:	f080 8086 	bcs.w	1d1c8 <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1d0bc:	4b49      	ldr	r3, [pc, #292]	; (1d1e4 <compare_set+0x148>)
   1d0be:	1a20      	subs	r0, r4, r0
   1d0c0:	eb65 0101 	sbc.w	r1, r5, r1
   1d0c4:	4298      	cmp	r0, r3
   1d0c6:	f171 0100 	sbcs.w	r1, r1, #0
   1d0ca:	f080 8088 	bcs.w	1d1de <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1d0ce:	4b46      	ldr	r3, [pc, #280]	; (1d1e8 <compare_set+0x14c>)
   1d0d0:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1d0d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1d0d8:	429d      	cmp	r5, r3
   1d0da:	bf08      	it	eq
   1d0dc:	4294      	cmpeq	r4, r2
   1d0de:	d05e      	beq.n	1d19e <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d0e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1d0e4:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1d0e8:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1d0ea:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1d0ee:	f06f 0101 	mvn.w	r1, #1
   1d0f2:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1d0f6:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1d0fa:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1d0fe:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1d102:	40bb      	lsls	r3, r7
   1d104:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d108:	fa1f f888 	uxth.w	r8, r8
   1d10c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1d110:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1d112:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1d116:	4b35      	ldr	r3, [pc, #212]	; (1d1ec <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d118:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1d11c:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d120:	eba0 000a 	sub.w	r0, r0, sl
   1d124:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d128:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1d12c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1d12e:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1d132:	d107      	bne.n	1d144 <compare_set+0xa8>
   1d134:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1d136:	2013      	movs	r0, #19
   1d138:	f00e feb8 	bl	2beac <z_impl_k_busy_wait>
   1d13c:	f06f 0101 	mvn.w	r1, #1
   1d140:	4b2a      	ldr	r3, [pc, #168]	; (1d1ec <compare_set+0x150>)
   1d142:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1d144:	eba1 000a 	sub.w	r0, r1, sl
   1d148:	4430      	add	r0, r6
   1d14a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1d14e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d152:	f04f 0000 	mov.w	r0, #0
   1d156:	f8c8 0000 	str.w	r0, [r8]
   1d15a:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1d15e:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1d160:	bf88      	it	hi
   1d162:	eb0a 060b 	addhi.w	r6, sl, fp
   1d166:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d16a:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1d16e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1d172:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1d176:	bf88      	it	hi
   1d178:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1d17c:	4582      	cmp	sl, r0
   1d17e:	d006      	beq.n	1d18e <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1d180:	1a08      	subs	r0, r1, r0
   1d182:	4430      	add	r0, r6
   1d184:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1d188:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d18c:	d81a      	bhi.n	1d1c4 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1d18e:	1ab6      	subs	r6, r6, r2
   1d190:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1d194:	1936      	adds	r6, r6, r4
   1d196:	f145 0300 	adc.w	r3, r5, #0
   1d19a:	4634      	mov	r4, r6
   1d19c:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1d19e:	4912      	ldr	r1, [pc, #72]	; (1d1e8 <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1d1a0:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1d1a2:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1d1a6:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1d1aa:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1d1ac:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1d1ae:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1d1b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d1b2:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1d1b4:	4638      	mov	r0, r7
   1d1b6:	9901      	ldr	r1, [sp, #4]
   1d1b8:	f7ff fed8 	bl	1cf6c <compare_int_unlock>
}
   1d1bc:	4620      	mov	r0, r4
   1d1be:	b005      	add	sp, #20
   1d1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1c4:	4630      	mov	r0, r6
   1d1c6:	e7a9      	b.n	1d11c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1d1c8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d1ca:	4a09      	ldr	r2, [pc, #36]	; (1d1f0 <compare_set+0x154>)
   1d1cc:	40bb      	lsls	r3, r7
   1d1ce:	e8d2 0fef 	ldaex	r0, [r2]
   1d1d2:	4318      	orrs	r0, r3
   1d1d4:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1d1d8:	2900      	cmp	r1, #0
   1d1da:	d0e0      	beq.n	1d19e <compare_set+0x102>
   1d1dc:	e7f7      	b.n	1d1ce <compare_set+0x132>
			return -EINVAL;
   1d1de:	f06f 0415 	mvn.w	r4, #21
   1d1e2:	e7e7      	b.n	1d1b4 <compare_set+0x118>
   1d1e4:	01000001 	.word	0x01000001
   1d1e8:	20009c68 	.word	0x20009c68
   1d1ec:	40015000 	.word	0x40015000
   1d1f0:	2002f558 	.word	0x2002f558

0001d1f4 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1d1f4:	2801      	cmp	r0, #1
{
   1d1f6:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1d1f8:	d00b      	beq.n	1d212 <z_nrf_rtc_timer_set+0x1e>
   1d1fa:	4908      	ldr	r1, [pc, #32]	; (1d21c <z_nrf_rtc_timer_set+0x28>)
   1d1fc:	4808      	ldr	r0, [pc, #32]	; (1d220 <z_nrf_rtc_timer_set+0x2c>)
   1d1fe:	f240 1353 	movw	r3, #339	; 0x153
   1d202:	4a08      	ldr	r2, [pc, #32]	; (1d224 <z_nrf_rtc_timer_set+0x30>)
   1d204:	f00a f9f5 	bl	275f2 <assert_print>
   1d208:	f240 1153 	movw	r1, #339	; 0x153
   1d20c:	4805      	ldr	r0, [pc, #20]	; (1d224 <z_nrf_rtc_timer_set+0x30>)
   1d20e:	f00a f9e9 	bl	275e4 <assert_post_action>
}
   1d212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1d216:	f7ff bf41 	b.w	1d09c <compare_set>
   1d21a:	bf00      	nop
   1d21c:	00032dda 	.word	0x00032dda
   1d220:	0002e715 	.word	0x0002e715
   1d224:	00032d8d 	.word	0x00032d8d

0001d228 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1d228:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1d22a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1d22e:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d230:	f04f 30ff 	mov.w	r0, #4294967295
   1d234:	f04f 31ff 	mov.w	r1, #4294967295
   1d238:	4c19      	ldr	r4, [pc, #100]	; (1d2a0 <sys_clock_driver_init+0x78>)
   1d23a:	4b1a      	ldr	r3, [pc, #104]	; (1d2a4 <sys_clock_driver_init+0x7c>)
   1d23c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1d240:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1d244:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1d248:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1d24c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1d250:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d252:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d256:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1d25a:	4b13      	ldr	r3, [pc, #76]	; (1d2a8 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1d25c:	2101      	movs	r1, #1
   1d25e:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1d262:	2015      	movs	r0, #21
   1d264:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1d268:	462a      	mov	r2, r5
   1d26a:	f7f3 ff71 	bl	11150 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1d26e:	2015      	movs	r0, #21
   1d270:	f7f3 ff3e 	bl	110f0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d274:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1d276:	2203      	movs	r2, #3
   1d278:	60a3      	str	r3, [r4, #8]
   1d27a:	6023      	str	r3, [r4, #0]
   1d27c:	4b0b      	ldr	r3, [pc, #44]	; (1d2ac <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d27e:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1d280:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1d282:	4b0b      	ldr	r3, [pc, #44]	; (1d2b0 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d284:	4a0b      	ldr	r2, [pc, #44]	; (1d2b4 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1d286:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d288:	4b0b      	ldr	r3, [pc, #44]	; (1d2b8 <sys_clock_driver_init+0x90>)
   1d28a:	9501      	str	r5, [sp, #4]
   1d28c:	9300      	str	r3, [sp, #0]
   1d28e:	2300      	movs	r3, #0
   1d290:	f7ff ff04 	bl	1d09c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1d294:	4630      	mov	r0, r6
   1d296:	f7fd fd83 	bl	1ada0 <z_nrf_clock_control_lf_on>

	return 0;
}
   1d29a:	4628      	mov	r0, r5
   1d29c:	b002      	add	sp, #8
   1d29e:	bd70      	pop	{r4, r5, r6, pc}
   1d2a0:	40015000 	.word	0x40015000
   1d2a4:	20009c68 	.word	0x20009c68
   1d2a8:	e000e100 	.word	0xe000e100
   1d2ac:	2002f560 	.word	0x2002f560
   1d2b0:	2002f55c 	.word	0x2002f55c
   1d2b4:	007fffff 	.word	0x007fffff
   1d2b8:	0001ceed 	.word	0x0001ceed

0001d2bc <rtc_nrf_isr>:
{
   1d2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1d2c0:	4b3f      	ldr	r3, [pc, #252]	; (1d3c0 <rtc_nrf_isr+0x104>)
   1d2c2:	b085      	sub	sp, #20
   1d2c4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1d2c8:	0792      	lsls	r2, r2, #30
   1d2ca:	d50b      	bpl.n	1d2e4 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d2cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1d2d0:	b142      	cbz	r2, 1d2e4 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d2d2:	2200      	movs	r2, #0
   1d2d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1d2d8:	4a3a      	ldr	r2, [pc, #232]	; (1d3c4 <rtc_nrf_isr+0x108>)
   1d2da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1d2de:	6813      	ldr	r3, [r2, #0]
   1d2e0:	3301      	adds	r3, #1
   1d2e2:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1d2e4:	4d38      	ldr	r5, [pc, #224]	; (1d3c8 <rtc_nrf_isr+0x10c>)
   1d2e6:	2400      	movs	r4, #0
   1d2e8:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1d2ea:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1d2ee:	4e34      	ldr	r6, [pc, #208]	; (1d3c0 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1d2f0:	f04f 0320 	mov.w	r3, #32
   1d2f4:	f3ef 8211 	mrs	r2, BASEPRI
   1d2f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2fc:	f3bf 8f6f 	isb	sy
   1d300:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1d304:	fa0b f904 	lsl.w	r9, fp, r4
   1d308:	ea19 0f03 	tst.w	r9, r3
   1d30c:	d10a      	bne.n	1d324 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1d30e:	f382 8811 	msr	BASEPRI, r2
   1d312:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1d316:	3510      	adds	r5, #16
   1d318:	b114      	cbz	r4, 1d320 <rtc_nrf_isr+0x64>
}
   1d31a:	b005      	add	sp, #20
   1d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1d320:	2401      	movs	r4, #1
   1d322:	e7e5      	b.n	1d2f0 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1d324:	2301      	movs	r3, #1
   1d326:	40a3      	lsls	r3, r4
   1d328:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d32a:	4928      	ldr	r1, [pc, #160]	; (1d3cc <rtc_nrf_isr+0x110>)
   1d32c:	e8d1 0fef 	ldaex	r0, [r1]
   1d330:	ea00 0c03 	and.w	ip, r0, r3
   1d334:	e8c1 cfee 	stlex	lr, ip, [r1]
   1d338:	f1be 0f00 	cmp.w	lr, #0
   1d33c:	d1f6      	bne.n	1d32c <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d33e:	4b24      	ldr	r3, [pc, #144]	; (1d3d0 <rtc_nrf_isr+0x114>)
   1d340:	00a1      	lsls	r1, r4, #2
   1d342:	b918      	cbnz	r0, 1d34c <rtc_nrf_isr+0x90>
   1d344:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1d348:	2800      	cmp	r0, #0
   1d34a:	d0e0      	beq.n	1d30e <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d34c:	f04f 0a00 	mov.w	sl, #0
   1d350:	f841 a003 	str.w	sl, [r1, r3]
   1d354:	58cb      	ldr	r3, [r1, r3]
   1d356:	f382 8811 	msr	BASEPRI, r2
   1d35a:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1d35e:	f7ff fe7b 	bl	1d058 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1d362:	f04f 0320 	mov.w	r3, #32
   1d366:	f3ef 8c11 	mrs	ip, BASEPRI
   1d36a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d36e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1d372:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1d376:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1d37a:	4290      	cmp	r0, r2
   1d37c:	4199      	sbcs	r1, r3
   1d37e:	d204      	bcs.n	1d38a <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1d380:	f38c 8811 	msr	BASEPRI, ip
   1d384:	f3bf 8f6f 	isb	sy
		if (handler) {
   1d388:	e7c5      	b.n	1d316 <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1d38a:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d38e:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1d392:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d394:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1d398:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d39c:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1d3a0:	4907      	ldr	r1, [pc, #28]	; (1d3c0 <rtc_nrf_isr+0x104>)
   1d3a2:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1d3a6:	f38c 8811 	msr	BASEPRI, ip
   1d3aa:	f3bf 8f6f 	isb	sy
		if (handler) {
   1d3ae:	f1b8 0f00 	cmp.w	r8, #0
   1d3b2:	d0b0      	beq.n	1d316 <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1d3b4:	9903      	ldr	r1, [sp, #12]
   1d3b6:	4620      	mov	r0, r4
   1d3b8:	9100      	str	r1, [sp, #0]
   1d3ba:	47c0      	blx	r8
   1d3bc:	e7ab      	b.n	1d316 <rtc_nrf_isr+0x5a>
   1d3be:	bf00      	nop
   1d3c0:	40015000 	.word	0x40015000
   1d3c4:	2002f564 	.word	0x2002f564
   1d3c8:	20009c68 	.word	0x20009c68
   1d3cc:	2002f558 	.word	0x2002f558
   1d3d0:	40015140 	.word	0x40015140

0001d3d4 <z_nrf_rtc_timer_chan_alloc>:
{
   1d3d4:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1d3d6:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1d3d8:	4b0c      	ldr	r3, [pc, #48]	; (1d40c <z_nrf_rtc_timer_chan_alloc+0x38>)
   1d3da:	6818      	ldr	r0, [r3, #0]
   1d3dc:	b190      	cbz	r0, 1d404 <z_nrf_rtc_timer_chan_alloc+0x30>
   1d3de:	fab0 f080 	clz	r0, r0
   1d3e2:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1d3e6:	fa04 f100 	lsl.w	r1, r4, r0
   1d3ea:	43c9      	mvns	r1, r1
   1d3ec:	e8d3 2fef 	ldaex	r2, [r3]
   1d3f0:	ea02 0501 	and.w	r5, r2, r1
   1d3f4:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1d3f8:	2e00      	cmp	r6, #0
   1d3fa:	d1f7      	bne.n	1d3ec <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1d3fc:	40c2      	lsrs	r2, r0
   1d3fe:	07d2      	lsls	r2, r2, #31
   1d400:	d5eb      	bpl.n	1d3da <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1d402:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1d404:	f06f 000b 	mvn.w	r0, #11
   1d408:	e7fb      	b.n	1d402 <z_nrf_rtc_timer_chan_alloc+0x2e>
   1d40a:	bf00      	nop
   1d40c:	2002f55c 	.word	0x2002f55c

0001d410 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1d410:	2801      	cmp	r0, #1
{
   1d412:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1d414:	d00b      	beq.n	1d42e <z_nrf_rtc_timer_chan_free+0x1e>
   1d416:	490b      	ldr	r1, [pc, #44]	; (1d444 <z_nrf_rtc_timer_chan_free+0x34>)
   1d418:	480b      	ldr	r0, [pc, #44]	; (1d448 <z_nrf_rtc_timer_chan_free+0x38>)
   1d41a:	f240 2321 	movw	r3, #545	; 0x221
   1d41e:	4a0b      	ldr	r2, [pc, #44]	; (1d44c <z_nrf_rtc_timer_chan_free+0x3c>)
   1d420:	f00a f8e7 	bl	275f2 <assert_print>
   1d424:	f240 2121 	movw	r1, #545	; 0x221
   1d428:	4808      	ldr	r0, [pc, #32]	; (1d44c <z_nrf_rtc_timer_chan_free+0x3c>)
   1d42a:	f00a f8db 	bl	275e4 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d42e:	4b08      	ldr	r3, [pc, #32]	; (1d450 <z_nrf_rtc_timer_chan_free+0x40>)
   1d430:	e8d3 1fef 	ldaex	r1, [r3]
   1d434:	f041 0102 	orr.w	r1, r1, #2
   1d438:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1d43c:	2a00      	cmp	r2, #0
   1d43e:	d1f7      	bne.n	1d430 <z_nrf_rtc_timer_chan_free+0x20>
}
   1d440:	bd08      	pop	{r3, pc}
   1d442:	bf00      	nop
   1d444:	00032dda 	.word	0x00032dda
   1d448:	0002e715 	.word	0x0002e715
   1d44c:	00032d8d 	.word	0x00032d8d
   1d450:	2002f55c 	.word	0x2002f55c

0001d454 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d454:	1c43      	adds	r3, r0, #1
{
   1d456:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d458:	d020      	beq.n	1d49c <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1d45a:	2801      	cmp	r0, #1
   1d45c:	dd20      	ble.n	1d4a0 <sys_clock_set_timeout+0x4c>
   1d45e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d462:	da1f      	bge.n	1d4a4 <sys_clock_set_timeout+0x50>
   1d464:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1d466:	f7ff fdf7 	bl	1d058 <z_nrf_rtc_timer_read>
   1d46a:	4b0f      	ldr	r3, [pc, #60]	; (1d4a8 <sys_clock_set_timeout+0x54>)
   1d46c:	e9d3 1300 	ldrd	r1, r3, [r3]
   1d470:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1d472:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1d476:	bf28      	it	cs
   1d478:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1d47a:	480c      	ldr	r0, [pc, #48]	; (1d4ac <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1d47c:	3201      	adds	r2, #1
   1d47e:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1d480:	4282      	cmp	r2, r0
   1d482:	bf28      	it	cs
   1d484:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1d486:	2000      	movs	r0, #0
   1d488:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1d48a:	4909      	ldr	r1, [pc, #36]	; (1d4b0 <sys_clock_set_timeout+0x5c>)
   1d48c:	9001      	str	r0, [sp, #4]
   1d48e:	9100      	str	r1, [sp, #0]
   1d490:	f143 0300 	adc.w	r3, r3, #0
   1d494:	f7ff fe02 	bl	1d09c <compare_set>
}
   1d498:	b002      	add	sp, #8
   1d49a:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d49c:	4803      	ldr	r0, [pc, #12]	; (1d4ac <sys_clock_set_timeout+0x58>)
   1d49e:	e7e1      	b.n	1d464 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1d4a0:	2400      	movs	r4, #0
   1d4a2:	e7e0      	b.n	1d466 <sys_clock_set_timeout+0x12>
   1d4a4:	4c01      	ldr	r4, [pc, #4]	; (1d4ac <sys_clock_set_timeout+0x58>)
   1d4a6:	e7de      	b.n	1d466 <sys_clock_set_timeout+0x12>
   1d4a8:	20009c88 	.word	0x20009c88
   1d4ac:	007fffff 	.word	0x007fffff
   1d4b0:	0001ceed 	.word	0x0001ceed

0001d4b4 <sys_clock_elapsed>:
{
   1d4b4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1d4b6:	f7ff fdcf 	bl	1d058 <z_nrf_rtc_timer_read>
   1d4ba:	4b02      	ldr	r3, [pc, #8]	; (1d4c4 <sys_clock_elapsed+0x10>)
   1d4bc:	681b      	ldr	r3, [r3, #0]
}
   1d4be:	1ac0      	subs	r0, r0, r3
   1d4c0:	bd08      	pop	{r3, pc}
   1d4c2:	bf00      	nop
   1d4c4:	20009c88 	.word	0x20009c88

0001d4c8 <nrf_gpio_pin_port_decode>:
{
   1d4c8:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d4ca:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1d4cc:	095a      	lsrs	r2, r3, #5
   1d4ce:	d00d      	beq.n	1d4ec <nrf_gpio_pin_port_decode+0x24>
   1d4d0:	2a01      	cmp	r2, #1
   1d4d2:	d013      	beq.n	1d4fc <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d4d4:	490e      	ldr	r1, [pc, #56]	; (1d510 <nrf_gpio_pin_port_decode+0x48>)
   1d4d6:	480f      	ldr	r0, [pc, #60]	; (1d514 <nrf_gpio_pin_port_decode+0x4c>)
   1d4d8:	f240 2347 	movw	r3, #583	; 0x247
   1d4dc:	4a0e      	ldr	r2, [pc, #56]	; (1d518 <nrf_gpio_pin_port_decode+0x50>)
   1d4de:	f00a f888 	bl	275f2 <assert_print>
   1d4e2:	f240 2147 	movw	r1, #583	; 0x247
   1d4e6:	480c      	ldr	r0, [pc, #48]	; (1d518 <nrf_gpio_pin_port_decode+0x50>)
   1d4e8:	f00a f87c 	bl	275e4 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1d4ec:	f04f 32ff 	mov.w	r2, #4294967295
   1d4f0:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d4f4:	07d9      	lsls	r1, r3, #31
   1d4f6:	d5ed      	bpl.n	1d4d4 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1d4f8:	4808      	ldr	r0, [pc, #32]	; (1d51c <nrf_gpio_pin_port_decode+0x54>)
   1d4fa:	e008      	b.n	1d50e <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1d4fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1d500:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d504:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d506:	07d2      	lsls	r2, r2, #31
   1d508:	d5e4      	bpl.n	1d4d4 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1d50a:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1d50c:	4804      	ldr	r0, [pc, #16]	; (1d520 <nrf_gpio_pin_port_decode+0x58>)
}
   1d50e:	bd08      	pop	{r3, pc}
   1d510:	000326ad 	.word	0x000326ad
   1d514:	0002e715 	.word	0x0002e715
   1d518:	0003267a 	.word	0x0003267a
   1d51c:	40842500 	.word	0x40842500
   1d520:	40842800 	.word	0x40842800

0001d524 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1d524:	b510      	push	{r4, lr}
   1d526:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1d528:	6902      	ldr	r2, [r0, #16]
{
   1d52a:	b0a6      	sub	sp, #152	; 0x98

	data->dev = dev;
   1d52c:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1d530:	4924      	ldr	r1, [pc, #144]	; (1d5c4 <mbox_nrf_init+0xa0>)
   1d532:	2000      	movs	r0, #0
   1d534:	f001 f812 	bl	1e55c <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d538:	2200      	movs	r2, #0
   1d53a:	2101      	movs	r1, #1
   1d53c:	202a      	movs	r0, #42	; 0x2a
   1d53e:	f7f3 fe07 	bl	11150 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1d542:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1d544:	2284      	movs	r2, #132	; 0x84
   1d546:	2100      	movs	r1, #0
   1d548:	a805      	add	r0, sp, #20
   1d54a:	f00e fdf9 	bl	2c140 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1d54e:	6863      	ldr	r3, [r4, #4]
   1d550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1d554:	d309      	bcc.n	1d56a <mbox_nrf_init+0x46>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1d556:	4b1c      	ldr	r3, [pc, #112]	; (1d5c8 <mbox_nrf_init+0xa4>)
   1d558:	2202      	movs	r2, #2
   1d55a:	9302      	str	r3, [sp, #8]
   1d55c:	2300      	movs	r3, #0
   1d55e:	491b      	ldr	r1, [pc, #108]	; (1d5cc <mbox_nrf_init+0xa8>)
   1d560:	4618      	mov	r0, r3
   1d562:	e9cd 3300 	strd	r3, r3, [sp]
   1d566:	f00d fd33 	bl	2afd0 <z_log_msg_runtime_create.constprop.0>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1d56a:	6823      	ldr	r3, [r4, #0]
   1d56c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1d570:	d309      	bcc.n	1d586 <mbox_nrf_init+0x62>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1d572:	4b17      	ldr	r3, [pc, #92]	; (1d5d0 <mbox_nrf_init+0xac>)
   1d574:	2202      	movs	r2, #2
   1d576:	9302      	str	r3, [sp, #8]
   1d578:	2300      	movs	r3, #0
   1d57a:	4914      	ldr	r1, [pc, #80]	; (1d5cc <mbox_nrf_init+0xa8>)
   1d57c:	4618      	mov	r0, r3
   1d57e:	e9cd 3300 	strd	r3, r3, [sp]
   1d582:	f00d fd25 	bl	2afd0 <z_log_msg_runtime_create.constprop.0>
	ch_config.receive_events_enabled = 0;
   1d586:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1d588:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1d58a:	9325      	str	r3, [sp, #148]	; 0x94
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1d58c:	aa05      	add	r2, sp, #20
		if (conf->tx_mask & BIT(ch)) {
   1d58e:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1d590:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1d592:	40d9      	lsrs	r1, r3
   1d594:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1d596:	bf44      	itt	mi
   1d598:	fa00 f103 	lslmi.w	r1, r0, r3
   1d59c:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1d5a0:	6821      	ldr	r1, [r4, #0]
   1d5a2:	40d9      	lsrs	r1, r3
   1d5a4:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1d5a6:	bf48      	it	mi
   1d5a8:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1d5ac:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1d5b0:	bf48      	it	mi
   1d5b2:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1d5b4:	2b10      	cmp	r3, #16
   1d5b6:	d1ea      	bne.n	1d58e <mbox_nrf_init+0x6a>
	nrfx_ipc_config_load(&ch_config);
   1d5b8:	a805      	add	r0, sp, #20
   1d5ba:	f000 ffe7 	bl	1e58c <nrfx_ipc_config_load>

	return 0;
}
   1d5be:	2000      	movs	r0, #0
   1d5c0:	b026      	add	sp, #152	; 0x98
   1d5c2:	bd10      	pop	{r4, pc}
   1d5c4:	0001d625 	.word	0x0001d625
   1d5c8:	00032df5 	.word	0x00032df5
   1d5cc:	0002d6dc 	.word	0x0002d6dc
   1d5d0:	00032e21 	.word	0x00032e21

0001d5d4 <mbox_nrf_send>:
{
   1d5d4:	b530      	push	{r4, r5, lr}
   1d5d6:	4605      	mov	r5, r0
   1d5d8:	460c      	mov	r4, r1
   1d5da:	b085      	sub	sp, #20
	if (msg) {
   1d5dc:	b14a      	cbz	r2, 1d5f2 <mbox_nrf_send+0x1e>
		LOG_WRN("Sending data not supported");
   1d5de:	4b0f      	ldr	r3, [pc, #60]	; (1d61c <mbox_nrf_send+0x48>)
   1d5e0:	2202      	movs	r2, #2
   1d5e2:	9302      	str	r3, [sp, #8]
   1d5e4:	2300      	movs	r3, #0
   1d5e6:	490e      	ldr	r1, [pc, #56]	; (1d620 <mbox_nrf_send+0x4c>)
   1d5e8:	4618      	mov	r0, r3
   1d5ea:	e9cd 3300 	strd	r3, r3, [sp]
   1d5ee:	f00d fcef 	bl	2afd0 <z_log_msg_runtime_create.constprop.0>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1d5f2:	2c0f      	cmp	r4, #15
   1d5f4:	d80f      	bhi.n	1d616 <mbox_nrf_send+0x42>
   1d5f6:	686b      	ldr	r3, [r5, #4]
   1d5f8:	685b      	ldr	r3, [r3, #4]
   1d5fa:	40e3      	lsrs	r3, r4
   1d5fc:	07db      	lsls	r3, r3, #31
   1d5fe:	d50a      	bpl.n	1d616 <mbox_nrf_send+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d600:	2301      	movs	r3, #1
	return 0;
   1d602:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1d604:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d606:	b2e4      	uxtb	r4, r4
   1d608:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1d60c:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1d610:	6023      	str	r3, [r4, #0]
}
   1d612:	b005      	add	sp, #20
   1d614:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1d616:	f06f 0015 	mvn.w	r0, #21
   1d61a:	e7fa      	b.n	1d612 <mbox_nrf_send+0x3e>
   1d61c:	00032e4d 	.word	0x00032e4d
   1d620:	0002d6dc 	.word	0x0002d6dc

0001d624 <mbox_dispatcher>:
{
   1d624:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1d626:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1d62a:	280f      	cmp	r0, #15
{
   1d62c:	4604      	mov	r4, r0
   1d62e:	460d      	mov	r5, r1
   1d630:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1d632:	d803      	bhi.n	1d63c <mbox_dispatcher+0x18>
   1d634:	681b      	ldr	r3, [r3, #0]
   1d636:	40c3      	lsrs	r3, r0
   1d638:	07db      	lsls	r3, r3, #31
   1d63a:	d409      	bmi.n	1d650 <mbox_dispatcher+0x2c>
		LOG_WRN("RX event on illegal channel");
   1d63c:	4b14      	ldr	r3, [pc, #80]	; (1d690 <mbox_dispatcher+0x6c>)
   1d63e:	2202      	movs	r2, #2
   1d640:	9302      	str	r3, [sp, #8]
   1d642:	2300      	movs	r3, #0
   1d644:	4913      	ldr	r1, [pc, #76]	; (1d694 <mbox_dispatcher+0x70>)
   1d646:	4618      	mov	r0, r3
   1d648:	e9cd 3300 	strd	r3, r3, [sp]
   1d64c:	f00d fcc0 	bl	2afd0 <z_log_msg_runtime_create.constprop.0>
	if (!(data->enabled_mask & BIT(channel))) {
   1d650:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d654:	40e3      	lsrs	r3, r4
   1d656:	f013 0301 	ands.w	r3, r3, #1
   1d65a:	d108      	bne.n	1d66e <mbox_dispatcher+0x4a>
		LOG_WRN("RX event on disabled channel");
   1d65c:	4a0e      	ldr	r2, [pc, #56]	; (1d698 <mbox_dispatcher+0x74>)
   1d65e:	4618      	mov	r0, r3
   1d660:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d664:	490b      	ldr	r1, [pc, #44]	; (1d694 <mbox_dispatcher+0x70>)
   1d666:	2202      	movs	r2, #2
   1d668:	9300      	str	r3, [sp, #0]
   1d66a:	f00d fcb1 	bl	2afd0 <z_log_msg_runtime_create.constprop.0>
	if (data->cb[channel] != NULL) {
   1d66e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1d672:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1d676:	b145      	cbz	r5, 1d68a <mbox_dispatcher+0x66>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1d678:	2300      	movs	r3, #0
   1d67a:	4621      	mov	r1, r4
   1d67c:	4630      	mov	r0, r6
   1d67e:	46ac      	mov	ip, r5
   1d680:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1d682:	b004      	add	sp, #16
   1d684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1d688:	4760      	bx	ip
}
   1d68a:	b004      	add	sp, #16
   1d68c:	bd70      	pop	{r4, r5, r6, pc}
   1d68e:	bf00      	nop
   1d690:	00032e68 	.word	0x00032e68
   1d694:	0002d6dc 	.word	0x0002d6dc
   1d698:	00032e84 	.word	0x00032e84

0001d69c <mbox_nrf_set_enabled>:
{
   1d69c:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1d69e:	290f      	cmp	r1, #15
{
   1d6a0:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1d6a2:	6905      	ldr	r5, [r0, #16]
{
   1d6a4:	b085      	sub	sp, #20
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1d6a6:	d841      	bhi.n	1d72c <mbox_nrf_set_enabled+0x90>
   1d6a8:	6843      	ldr	r3, [r0, #4]
   1d6aa:	681b      	ldr	r3, [r3, #0]
   1d6ac:	40cb      	lsrs	r3, r1
   1d6ae:	07db      	lsls	r3, r3, #31
   1d6b0:	d53c      	bpl.n	1d72c <mbox_nrf_set_enabled+0x90>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1d6b2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d6b6:	40cb      	lsrs	r3, r1
   1d6b8:	f003 0301 	and.w	r3, r3, #1
   1d6bc:	b91a      	cbnz	r2, 1d6c6 <mbox_nrf_set_enabled+0x2a>
   1d6be:	bb0b      	cbnz	r3, 1d704 <mbox_nrf_set_enabled+0x68>
		return -EALREADY;
   1d6c0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1d6c4:	e030      	b.n	1d728 <mbox_nrf_set_enabled+0x8c>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1d6c6:	2b00      	cmp	r3, #0
   1d6c8:	d1fa      	bne.n	1d6c0 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1d6ca:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1d6ce:	b943      	cbnz	r3, 1d6e2 <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   1d6d0:	4a18      	ldr	r2, [pc, #96]	; (1d734 <mbox_nrf_set_enabled+0x98>)
   1d6d2:	4618      	mov	r0, r3
   1d6d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d6d8:	4917      	ldr	r1, [pc, #92]	; (1d738 <mbox_nrf_set_enabled+0x9c>)
   1d6da:	2202      	movs	r2, #2
   1d6dc:	9300      	str	r3, [sp, #0]
   1d6de:	f00d fc77 	bl	2afd0 <z_log_msg_runtime_create.constprop.0>
	if (enable && data->enabled_mask == 0) {
   1d6e2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d6e6:	b913      	cbnz	r3, 1d6ee <mbox_nrf_set_enabled+0x52>
		irq_enable(DT_INST_IRQN(0));
   1d6e8:	202a      	movs	r0, #42	; 0x2a
   1d6ea:	f7f3 fd01 	bl	110f0 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1d6ee:	2201      	movs	r2, #1
   1d6f0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d6f4:	40a2      	lsls	r2, r4
   1d6f6:	4313      	orrs	r3, r2
   1d6f8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1d6fc:	b2e0      	uxtb	r0, r4
   1d6fe:	f000 ff87 	bl	1e610 <nrfx_ipc_receive_event_enable>
   1d702:	e00a      	b.n	1d71a <mbox_nrf_set_enabled+0x7e>
		nrfx_ipc_receive_event_disable(channel);
   1d704:	b2c8      	uxtb	r0, r1
   1d706:	f000 ffa1 	bl	1e64c <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1d70a:	2201      	movs	r2, #1
   1d70c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d710:	40a2      	lsls	r2, r4
   1d712:	ea23 0302 	bic.w	r3, r3, r2
   1d716:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1d71a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1d71e:	b913      	cbnz	r3, 1d726 <mbox_nrf_set_enabled+0x8a>
		irq_disable(DT_INST_IRQN(0));
   1d720:	202a      	movs	r0, #42	; 0x2a
   1d722:	f7f3 fcf3 	bl	1110c <arch_irq_disable>
	return 0;
   1d726:	2000      	movs	r0, #0
}
   1d728:	b005      	add	sp, #20
   1d72a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1d72c:	f06f 0015 	mvn.w	r0, #21
   1d730:	e7fa      	b.n	1d728 <mbox_nrf_set_enabled+0x8c>
   1d732:	bf00      	nop
   1d734:	00032ea1 	.word	0x00032ea1
   1d738:	0002d6dc 	.word	0x0002d6dc

0001d73c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1d73c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1d73e:	ab0b      	add	r3, sp, #44	; 0x2c
   1d740:	9305      	str	r3, [sp, #20]
   1d742:	9303      	str	r3, [sp, #12]
   1d744:	4b05      	ldr	r3, [pc, #20]	; (1d75c <z_log_msg_runtime_create.constprop.0+0x20>)
   1d746:	2201      	movs	r2, #1
   1d748:	9302      	str	r3, [sp, #8]
   1d74a:	2300      	movs	r3, #0
   1d74c:	4618      	mov	r0, r3
   1d74e:	e9cd 3300 	strd	r3, r3, [sp]
   1d752:	f7f1 fdef 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   1d756:	b007      	add	sp, #28
   1d758:	f85d fb04 	ldr.w	pc, [sp], #4
   1d75c:	00032efe 	.word	0x00032efe

0001d760 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1d760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1d762:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1d764:	f7f1 fd34 	bl	f1d0 <z_impl_log_panic>
   1d768:	4b06      	ldr	r3, [pc, #24]	; (1d784 <k_sys_fatal_error_handler+0x24>)
   1d76a:	4620      	mov	r0, r4
   1d76c:	9302      	str	r3, [sp, #8]
   1d76e:	2201      	movs	r2, #1
   1d770:	4623      	mov	r3, r4
   1d772:	e9cd 4400 	strd	r4, r4, [sp]
   1d776:	4904      	ldr	r1, [pc, #16]	; (1d788 <k_sys_fatal_error_handler+0x28>)
   1d778:	f7ff ffe0 	bl	1d73c <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   1d77c:	4620      	mov	r0, r4
   1d77e:	f7f4 f957 	bl	11a30 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1d782:	bf00      	nop
   1d784:	00032efe 	.word	0x00032efe
   1d788:	0002d6a4 	.word	0x0002d6a4

0001d78c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1d78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d790:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1d792:	4b15      	ldr	r3, [pc, #84]	; (1d7e8 <tfm_ns_interface_dispatch+0x5c>)
   1d794:	4604      	mov	r4, r0
   1d796:	f893 8000 	ldrb.w	r8, [r3]
   1d79a:	460d      	mov	r5, r1
   1d79c:	4616      	mov	r6, r2
   1d79e:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1d7a0:	f1b8 0f00 	cmp.w	r8, #0
   1d7a4:	d115      	bne.n	1d7d2 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1d7a6:	4668      	mov	r0, sp
   1d7a8:	f00a ff84 	bl	286b4 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1d7ac:	463a      	mov	r2, r7
   1d7ae:	4631      	mov	r1, r6
   1d7b0:	4628      	mov	r0, r5
   1d7b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1d7b4:	47a0      	blx	r4
   1d7b6:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1d7b8:	4668      	mov	r0, sp
   1d7ba:	f00a ff7c 	bl	286b6 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1d7be:	f1b8 0f00 	cmp.w	r8, #0
   1d7c2:	d002      	beq.n	1d7ca <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1d7c4:	4809      	ldr	r0, [pc, #36]	; (1d7ec <tfm_ns_interface_dispatch+0x60>)
   1d7c6:	f003 f9bd 	bl	20b44 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1d7ca:	4620      	mov	r0, r4
   1d7cc:	b022      	add	sp, #136	; 0x88
   1d7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1d7d2:	f04f 32ff 	mov.w	r2, #4294967295
   1d7d6:	f04f 33ff 	mov.w	r3, #4294967295
   1d7da:	4804      	ldr	r0, [pc, #16]	; (1d7ec <tfm_ns_interface_dispatch+0x60>)
   1d7dc:	f003 f8e2 	bl	209a4 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1d7e0:	2800      	cmp	r0, #0
   1d7e2:	d0e0      	beq.n	1d7a6 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1d7e4:	241f      	movs	r4, #31
   1d7e6:	e7f0      	b.n	1d7ca <tfm_ns_interface_dispatch+0x3e>
   1d7e8:	2003069e 	.word	0x2003069e
   1d7ec:	20008b34 	.word	0x20008b34

0001d7f0 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1d7f0:	b530      	push	{r4, r5, lr}
   1d7f2:	b095      	sub	sp, #84	; 0x54
   1d7f4:	4605      	mov	r5, r0
   1d7f6:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1d7f8:	2230      	movs	r2, #48	; 0x30
   1d7fa:	2100      	movs	r1, #0
   1d7fc:	a808      	add	r0, sp, #32
   1d7fe:	f00e fc9f 	bl	2c140 <memset>
   1d802:	233f      	movs	r3, #63	; 0x3f
   1d804:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1d806:	ab07      	add	r3, sp, #28
   1d808:	9303      	str	r3, [sp, #12]
   1d80a:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1d80c:	9406      	str	r4, [sp, #24]
   1d80e:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1d812:	b154      	cbz	r4, 1d82a <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1d814:	2301      	movs	r3, #1
   1d816:	aa05      	add	r2, sp, #20
   1d818:	9200      	str	r2, [sp, #0]
   1d81a:	2100      	movs	r1, #0
   1d81c:	4804      	ldr	r0, [pc, #16]	; (1d830 <psa_generate_random+0x40>)
   1d81e:	9301      	str	r3, [sp, #4]
   1d820:	aa03      	add	r2, sp, #12
   1d822:	f000 f807 	bl	1d834 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1d826:	b015      	add	sp, #84	; 0x54
   1d828:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1d82a:	4620      	mov	r0, r4
   1d82c:	e7fb      	b.n	1d826 <psa_generate_random+0x36>
   1d82e:	bf00      	nop
   1d830:	40000100 	.word	0x40000100

0001d834 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1d834:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1d836:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1d83a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1d83e:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1d840:	d20d      	bcs.n	1d85e <psa_call+0x2a>
        (type < INT16_MIN) ||
   1d842:	ea43 0504 	orr.w	r5, r3, r4
   1d846:	2dff      	cmp	r5, #255	; 0xff
   1d848:	d809      	bhi.n	1d85e <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1d84a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1d84e:	4613      	mov	r3, r2
   1d850:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1d854:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1d856:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1d858:	4803      	ldr	r0, [pc, #12]	; (1d868 <psa_call+0x34>)
   1d85a:	f7ff bf97 	b.w	1d78c <tfm_ns_interface_dispatch>
}
   1d85e:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1d862:	bc30      	pop	{r4, r5}
   1d864:	4770      	bx	lr
   1d866:	bf00      	nop
   1d868:	00007c21 	.word	0x00007c21

0001d86c <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1d86c:	2300      	movs	r3, #0
{
   1d86e:	b507      	push	{r0, r1, r2, lr}
   1d870:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1d872:	9300      	str	r3, [sp, #0]
   1d874:	4601      	mov	r1, r0
   1d876:	4803      	ldr	r0, [pc, #12]	; (1d884 <psa_connect+0x18>)
   1d878:	f7ff ff88 	bl	1d78c <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1d87c:	b003      	add	sp, #12
   1d87e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d882:	bf00      	nop
   1d884:	00007c19 	.word	0x00007c19

0001d888 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1d888:	2300      	movs	r3, #0
{
   1d88a:	b507      	push	{r0, r1, r2, lr}
   1d88c:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1d88e:	461a      	mov	r2, r3
   1d890:	9300      	str	r3, [sp, #0]
   1d892:	4803      	ldr	r0, [pc, #12]	; (1d8a0 <psa_close+0x18>)
   1d894:	f7ff ff7a 	bl	1d78c <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1d898:	b003      	add	sp, #12
   1d89a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d89e:	bf00      	nop
   1d8a0:	00007c11 	.word	0x00007c11

0001d8a4 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1d8a4:	4b04      	ldr	r3, [pc, #16]	; (1d8b8 <SystemCoreClockUpdate+0x14>)
   1d8a6:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1d8aa:	4b04      	ldr	r3, [pc, #16]	; (1d8bc <SystemCoreClockUpdate+0x18>)
   1d8ac:	f002 0203 	and.w	r2, r2, #3
   1d8b0:	40d3      	lsrs	r3, r2
   1d8b2:	4a03      	ldr	r2, [pc, #12]	; (1d8c0 <SystemCoreClockUpdate+0x1c>)
   1d8b4:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1d8b6:	4770      	bx	lr
   1d8b8:	40005000 	.word	0x40005000
   1d8bc:	07a12000 	.word	0x07a12000
   1d8c0:	200086dc 	.word	0x200086dc

0001d8c4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1d8c4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1d8c6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1d8c8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1d8ca:	fab2 f382 	clz	r3, r2
   1d8ce:	f1c3 031f 	rsb	r3, r3, #31
   1d8d2:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1d8d4:	fa05 f403 	lsl.w	r4, r5, r3
   1d8d8:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d8dc:	e8d0 6fef 	ldaex	r6, [r0]
   1d8e0:	4296      	cmp	r6, r2
   1d8e2:	d104      	bne.n	1d8ee <nrfx_flag32_alloc+0x2a>
   1d8e4:	e8c0 4fec 	stlex	ip, r4, [r0]
   1d8e8:	f1bc 0f00 	cmp.w	ip, #0
   1d8ec:	d1f6      	bne.n	1d8dc <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1d8ee:	d1eb      	bne.n	1d8c8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1d8f0:	4801      	ldr	r0, [pc, #4]	; (1d8f8 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1d8f2:	700b      	strb	r3, [r1, #0]
}
   1d8f4:	bd70      	pop	{r4, r5, r6, pc}
   1d8f6:	bf00      	nop
   1d8f8:	0bad0000 	.word	0x0bad0000

0001d8fc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1d8fc:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1d8fe:	6803      	ldr	r3, [r0, #0]
   1d900:	40cb      	lsrs	r3, r1
   1d902:	07db      	lsls	r3, r3, #31
   1d904:	d410      	bmi.n	1d928 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1d906:	2301      	movs	r3, #1
   1d908:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1d90a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1d90c:	ea43 0102 	orr.w	r1, r3, r2
   1d910:	e8d0 4fef 	ldaex	r4, [r0]
   1d914:	4294      	cmp	r4, r2
   1d916:	d104      	bne.n	1d922 <nrfx_flag32_free+0x26>
   1d918:	e8c0 1fec 	stlex	ip, r1, [r0]
   1d91c:	f1bc 0f00 	cmp.w	ip, #0
   1d920:	d1f6      	bne.n	1d910 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1d922:	d1f2      	bne.n	1d90a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1d924:	4801      	ldr	r0, [pc, #4]	; (1d92c <nrfx_flag32_free+0x30>)
}
   1d926:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1d928:	4801      	ldr	r0, [pc, #4]	; (1d930 <nrfx_flag32_free+0x34>)
   1d92a:	e7fc      	b.n	1d926 <nrfx_flag32_free+0x2a>
   1d92c:	0bad0000 	.word	0x0bad0000
   1d930:	0bad0004 	.word	0x0bad0004

0001d934 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1d934:	2200      	movs	r2, #0
{
   1d936:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d938:	4b62      	ldr	r3, [pc, #392]	; (1dac4 <clock_stop+0x190>)
    switch (domain)
   1d93a:	2803      	cmp	r0, #3
   1d93c:	d838      	bhi.n	1d9b0 <clock_stop+0x7c>
   1d93e:	e8df f000 	tbb	[pc, r0]
   1d942:	0d02      	.short	0x0d02
   1d944:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1d946:	2102      	movs	r1, #2
   1d948:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d94c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1d950:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d954:	2201      	movs	r2, #1
   1d956:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1d958:	2400      	movs	r4, #0
   1d95a:	e009      	b.n	1d970 <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1d95c:	2101      	movs	r1, #1
   1d95e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d962:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d966:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1d96a:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d96e:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1d970:	2301      	movs	r3, #1
   1d972:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1d976:	2803      	cmp	r0, #3
   1d978:	f200 8093 	bhi.w	1daa2 <clock_stop+0x16e>
   1d97c:	e8df f000 	tbb	[pc, r0]
   1d980:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1d984:	f44f 7100 	mov.w	r1, #512	; 0x200
   1d988:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d98c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1d990:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d994:	2201      	movs	r2, #1
   1d996:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1d998:	e7de      	b.n	1d958 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1d99a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d99e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d9a2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1d9a6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d9aa:	2201      	movs	r2, #1
   1d9ac:	61da      	str	r2, [r3, #28]
   1d9ae:	e7d3      	b.n	1d958 <clock_stop+0x24>
            NRFX_ASSERT(0);
   1d9b0:	4945      	ldr	r1, [pc, #276]	; (1dac8 <clock_stop+0x194>)
   1d9b2:	4846      	ldr	r0, [pc, #280]	; (1dacc <clock_stop+0x198>)
   1d9b4:	23d8      	movs	r3, #216	; 0xd8
   1d9b6:	4a46      	ldr	r2, [pc, #280]	; (1dad0 <clock_stop+0x19c>)
   1d9b8:	f009 fe1b 	bl	275f2 <assert_print>
   1d9bc:	21d8      	movs	r1, #216	; 0xd8
   1d9be:	4844      	ldr	r0, [pc, #272]	; (1dad0 <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1d9c0:	f009 fe10 	bl	275e4 <assert_post_action>
    switch (domain)
   1d9c4:	f242 7510 	movw	r5, #10000	; 0x2710
   1d9c8:	4e3e      	ldr	r6, [pc, #248]	; (1dac4 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1d9ca:	b194      	cbz	r4, 1d9f2 <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d9cc:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1d9d0:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1d9d4:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d9d6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1d9da:	03d9      	lsls	r1, r3, #15
   1d9dc:	d507      	bpl.n	1d9ee <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1d9de:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d9e2:	2801      	cmp	r0, #1
   1d9e4:	d103      	bne.n	1d9ee <clock_stop+0xba>
   1d9e6:	f00d fb69 	bl	2b0bc <nrfx_busy_wait>
   1d9ea:	3d01      	subs	r5, #1
   1d9ec:	d1ed      	bne.n	1d9ca <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1d9ee:	b002      	add	sp, #8
   1d9f0:	bd70      	pop	{r4, r5, r6, pc}
   1d9f2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1d9f6:	03da      	lsls	r2, r3, #15
   1d9f8:	d5f9      	bpl.n	1d9ee <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1d9fa:	2001      	movs	r0, #1
   1d9fc:	f00d fb5e 	bl	2b0bc <nrfx_busy_wait>
   1da00:	3d01      	subs	r5, #1
   1da02:	d1f6      	bne.n	1d9f2 <clock_stop+0xbe>
   1da04:	e7f3      	b.n	1d9ee <clock_stop+0xba>
    switch (domain)
   1da06:	f242 7510 	movw	r5, #10000	; 0x2710
   1da0a:	4e2e      	ldr	r6, [pc, #184]	; (1dac4 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1da0c:	b18c      	cbz	r4, 1da32 <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1da0e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1da12:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1da16:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1da18:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1da1c:	03db      	lsls	r3, r3, #15
   1da1e:	d5e6      	bpl.n	1d9ee <clock_stop+0xba>
   1da20:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1da24:	2801      	cmp	r0, #1
   1da26:	d1e2      	bne.n	1d9ee <clock_stop+0xba>
   1da28:	f00d fb48 	bl	2b0bc <nrfx_busy_wait>
   1da2c:	3d01      	subs	r5, #1
   1da2e:	d1ed      	bne.n	1da0c <clock_stop+0xd8>
   1da30:	e7dd      	b.n	1d9ee <clock_stop+0xba>
   1da32:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1da36:	03d8      	lsls	r0, r3, #15
   1da38:	d5d9      	bpl.n	1d9ee <clock_stop+0xba>
   1da3a:	2001      	movs	r0, #1
   1da3c:	f00d fb3e 	bl	2b0bc <nrfx_busy_wait>
   1da40:	3d01      	subs	r5, #1
   1da42:	d1f6      	bne.n	1da32 <clock_stop+0xfe>
   1da44:	e7d3      	b.n	1d9ee <clock_stop+0xba>
    switch (domain)
   1da46:	f242 7510 	movw	r5, #10000	; 0x2710
   1da4a:	4e1e      	ldr	r6, [pc, #120]	; (1dac4 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1da4c:	b18c      	cbz	r4, 1da72 <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1da4e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1da52:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1da56:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1da58:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1da5c:	03d9      	lsls	r1, r3, #15
   1da5e:	d5c6      	bpl.n	1d9ee <clock_stop+0xba>
   1da60:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1da64:	2801      	cmp	r0, #1
   1da66:	d1c2      	bne.n	1d9ee <clock_stop+0xba>
   1da68:	f00d fb28 	bl	2b0bc <nrfx_busy_wait>
   1da6c:	3d01      	subs	r5, #1
   1da6e:	d1ed      	bne.n	1da4c <clock_stop+0x118>
   1da70:	e7bd      	b.n	1d9ee <clock_stop+0xba>
   1da72:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1da76:	03da      	lsls	r2, r3, #15
   1da78:	d5b9      	bpl.n	1d9ee <clock_stop+0xba>
   1da7a:	2001      	movs	r0, #1
   1da7c:	f00d fb1e 	bl	2b0bc <nrfx_busy_wait>
   1da80:	3d01      	subs	r5, #1
   1da82:	d1f6      	bne.n	1da72 <clock_stop+0x13e>
   1da84:	e7b3      	b.n	1d9ee <clock_stop+0xba>
    switch (domain)
   1da86:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1da8a:	4e0e      	ldr	r6, [pc, #56]	; (1dac4 <clock_stop+0x190>)
   1da8c:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1da90:	03db      	lsls	r3, r3, #15
   1da92:	d5ac      	bpl.n	1d9ee <clock_stop+0xba>
   1da94:	b984      	cbnz	r4, 1dab8 <clock_stop+0x184>
   1da96:	2001      	movs	r0, #1
   1da98:	f00d fb10 	bl	2b0bc <nrfx_busy_wait>
   1da9c:	3d01      	subs	r5, #1
   1da9e:	d1f5      	bne.n	1da8c <clock_stop+0x158>
   1daa0:	e7a5      	b.n	1d9ee <clock_stop+0xba>
            NRFX_ASSERT(0);
   1daa2:	4909      	ldr	r1, [pc, #36]	; (1dac8 <clock_stop+0x194>)
   1daa4:	4809      	ldr	r0, [pc, #36]	; (1dacc <clock_stop+0x198>)
   1daa6:	f240 3347 	movw	r3, #839	; 0x347
   1daaa:	4a0a      	ldr	r2, [pc, #40]	; (1dad4 <clock_stop+0x1a0>)
   1daac:	f009 fda1 	bl	275f2 <assert_print>
   1dab0:	f240 3147 	movw	r1, #839	; 0x347
   1dab4:	4807      	ldr	r0, [pc, #28]	; (1dad4 <clock_stop+0x1a0>)
   1dab6:	e783      	b.n	1d9c0 <clock_stop+0x8c>
   1dab8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1dabc:	2801      	cmp	r0, #1
   1dabe:	d0eb      	beq.n	1da98 <clock_stop+0x164>
   1dac0:	e795      	b.n	1d9ee <clock_stop+0xba>
   1dac2:	bf00      	nop
   1dac4:	40005000 	.word	0x40005000
   1dac8:	00033fc0 	.word	0x00033fc0
   1dacc:	0002e715 	.word	0x0002e715
   1dad0:	00032f1b 	.word	0x00032f1b
   1dad4:	00032f58 	.word	0x00032f58

0001dad8 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1dad8:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1dada:	b958      	cbnz	r0, 1daf4 <nrfx_clock_init+0x1c>
   1dadc:	490a      	ldr	r1, [pc, #40]	; (1db08 <nrfx_clock_init+0x30>)
   1dade:	480b      	ldr	r0, [pc, #44]	; (1db0c <nrfx_clock_init+0x34>)
   1dae0:	f240 1315 	movw	r3, #277	; 0x115
   1dae4:	4a0a      	ldr	r2, [pc, #40]	; (1db10 <nrfx_clock_init+0x38>)
   1dae6:	f009 fd84 	bl	275f2 <assert_print>
   1daea:	f240 1115 	movw	r1, #277	; 0x115
   1daee:	4808      	ldr	r0, [pc, #32]	; (1db10 <nrfx_clock_init+0x38>)
   1daf0:	f009 fd78 	bl	275e4 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1daf4:	4b07      	ldr	r3, [pc, #28]	; (1db14 <nrfx_clock_init+0x3c>)
   1daf6:	791a      	ldrb	r2, [r3, #4]
   1daf8:	b922      	cbnz	r2, 1db04 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1dafa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1dafc:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1dafe:	4806      	ldr	r0, [pc, #24]	; (1db18 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1db00:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1db02:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1db04:	4805      	ldr	r0, [pc, #20]	; (1db1c <nrfx_clock_init+0x44>)
    return err_code;
   1db06:	e7fc      	b.n	1db02 <nrfx_clock_init+0x2a>
   1db08:	00032f8c 	.word	0x00032f8c
   1db0c:	0002e715 	.word	0x0002e715
   1db10:	00032f1b 	.word	0x00032f1b
   1db14:	2002f5f0 	.word	0x2002f5f0
   1db18:	0bad0000 	.word	0x0bad0000
   1db1c:	0bad000c 	.word	0x0bad000c

0001db20 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1db20:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1db22:	4b0f      	ldr	r3, [pc, #60]	; (1db60 <nrfx_clock_enable+0x40>)
   1db24:	791b      	ldrb	r3, [r3, #4]
   1db26:	b95b      	cbnz	r3, 1db40 <nrfx_clock_enable+0x20>
   1db28:	490e      	ldr	r1, [pc, #56]	; (1db64 <nrfx_clock_enable+0x44>)
   1db2a:	480f      	ldr	r0, [pc, #60]	; (1db68 <nrfx_clock_enable+0x48>)
   1db2c:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1db30:	4a0e      	ldr	r2, [pc, #56]	; (1db6c <nrfx_clock_enable+0x4c>)
   1db32:	f009 fd5e 	bl	275f2 <assert_print>
   1db36:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1db3a:	480c      	ldr	r0, [pc, #48]	; (1db6c <nrfx_clock_enable+0x4c>)
   1db3c:	f009 fd52 	bl	275e4 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1db40:	2005      	movs	r0, #5
   1db42:	f7f3 faf7 	bl	11134 <arch_irq_is_enabled>
   1db46:	b910      	cbnz	r0, 1db4e <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1db48:	2005      	movs	r0, #5
   1db4a:	f7f3 fad1 	bl	110f0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1db4e:	2201      	movs	r2, #1
   1db50:	4b07      	ldr	r3, [pc, #28]	; (1db70 <nrfx_clock_enable+0x50>)
   1db52:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1db56:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1db5a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1db5e:	bd08      	pop	{r3, pc}
   1db60:	2002f5f0 	.word	0x2002f5f0
   1db64:	00032f9a 	.word	0x00032f9a
   1db68:	0002e715 	.word	0x0002e715
   1db6c:	00032f1b 	.word	0x00032f1b
   1db70:	40005000 	.word	0x40005000

0001db74 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1db74:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1db76:	4b38      	ldr	r3, [pc, #224]	; (1dc58 <nrfx_clock_start+0xe4>)
   1db78:	791b      	ldrb	r3, [r3, #4]
   1db7a:	b95b      	cbnz	r3, 1db94 <nrfx_clock_start+0x20>
   1db7c:	4937      	ldr	r1, [pc, #220]	; (1dc5c <nrfx_clock_start+0xe8>)
   1db7e:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1db82:	4a37      	ldr	r2, [pc, #220]	; (1dc60 <nrfx_clock_start+0xec>)
   1db84:	4837      	ldr	r0, [pc, #220]	; (1dc64 <nrfx_clock_start+0xf0>)
   1db86:	f009 fd34 	bl	275f2 <assert_print>
   1db8a:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1db8e:	4834      	ldr	r0, [pc, #208]	; (1dc60 <nrfx_clock_start+0xec>)
   1db90:	f009 fd28 	bl	275e4 <assert_post_action>
    switch (domain)
   1db94:	4b34      	ldr	r3, [pc, #208]	; (1dc68 <nrfx_clock_start+0xf4>)
   1db96:	2803      	cmp	r0, #3
   1db98:	d853      	bhi.n	1dc42 <nrfx_clock_start+0xce>
   1db9a:	e8df f000 	tbb	[pc, r0]
   1db9e:	3002      	.short	0x3002
   1dba0:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1dba2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1dba6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1dbaa:	03c9      	lsls	r1, r1, #15
   1dbac:	d511      	bpl.n	1dbd2 <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1dbae:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1dbb2:	2b02      	cmp	r3, #2
   1dbb4:	d11c      	bne.n	1dbf0 <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1dbb6:	4a2c      	ldr	r2, [pc, #176]	; (1dc68 <nrfx_clock_start+0xf4>)
   1dbb8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbbc:	2300      	movs	r3, #0
   1dbbe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1dbc2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1dbc6:	2302      	movs	r3, #2
   1dbc8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbcc:	2301      	movs	r3, #1
   1dbce:	6093      	str	r3, [r2, #8]
}
   1dbd0:	e00d      	b.n	1dbee <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1dbd2:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1dbd6:	07d2      	lsls	r2, r2, #31
   1dbd8:	d50f      	bpl.n	1dbfa <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1dbda:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1dbde:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1dbe2:	3a01      	subs	r2, #1
   1dbe4:	2a01      	cmp	r2, #1
   1dbe6:	d805      	bhi.n	1dbf4 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1dbe8:	2202      	movs	r2, #2
   1dbea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1dbee:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1dbf0:	2b01      	cmp	r3, #1
   1dbf2:	d002      	beq.n	1dbfa <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1dbf4:	2000      	movs	r0, #0
   1dbf6:	f7ff fe9d 	bl	1d934 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1dbfa:	2301      	movs	r3, #1
   1dbfc:	e7db      	b.n	1dbb6 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbfe:	2200      	movs	r2, #0
   1dc00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1dc04:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1dc08:	2201      	movs	r2, #1
   1dc0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc0e:	601a      	str	r2, [r3, #0]
}
   1dc10:	e7ed      	b.n	1dbee <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc12:	2200      	movs	r2, #0
   1dc14:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1dc18:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1dc1c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1dc20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc24:	2201      	movs	r2, #1
   1dc26:	621a      	str	r2, [r3, #32]
}
   1dc28:	e7e1      	b.n	1dbee <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc2a:	2200      	movs	r2, #0
   1dc2c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1dc30:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1dc34:	f44f 7280 	mov.w	r2, #256	; 0x100
   1dc38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc3c:	2201      	movs	r2, #1
   1dc3e:	619a      	str	r2, [r3, #24]
}
   1dc40:	e7d5      	b.n	1dbee <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1dc42:	490a      	ldr	r1, [pc, #40]	; (1dc6c <nrfx_clock_start+0xf8>)
   1dc44:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1dc48:	4a05      	ldr	r2, [pc, #20]	; (1dc60 <nrfx_clock_start+0xec>)
   1dc4a:	4806      	ldr	r0, [pc, #24]	; (1dc64 <nrfx_clock_start+0xf0>)
   1dc4c:	f009 fcd1 	bl	275f2 <assert_print>
   1dc50:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1dc54:	e79b      	b.n	1db8e <nrfx_clock_start+0x1a>
   1dc56:	bf00      	nop
   1dc58:	2002f5f0 	.word	0x2002f5f0
   1dc5c:	00032f9a 	.word	0x00032f9a
   1dc60:	00032f1b 	.word	0x00032f1b
   1dc64:	0002e715 	.word	0x0002e715
   1dc68:	40005000 	.word	0x40005000
   1dc6c:	00033fc0 	.word	0x00033fc0

0001dc70 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1dc70:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1dc72:	4b09      	ldr	r3, [pc, #36]	; (1dc98 <nrfx_clock_stop+0x28>)
   1dc74:	791b      	ldrb	r3, [r3, #4]
   1dc76:	b95b      	cbnz	r3, 1dc90 <nrfx_clock_stop+0x20>
   1dc78:	4908      	ldr	r1, [pc, #32]	; (1dc9c <nrfx_clock_stop+0x2c>)
   1dc7a:	4809      	ldr	r0, [pc, #36]	; (1dca0 <nrfx_clock_stop+0x30>)
   1dc7c:	f240 13ad 	movw	r3, #429	; 0x1ad
   1dc80:	4a08      	ldr	r2, [pc, #32]	; (1dca4 <nrfx_clock_stop+0x34>)
   1dc82:	f009 fcb6 	bl	275f2 <assert_print>
   1dc86:	f240 11ad 	movw	r1, #429	; 0x1ad
   1dc8a:	4806      	ldr	r0, [pc, #24]	; (1dca4 <nrfx_clock_stop+0x34>)
   1dc8c:	f009 fcaa 	bl	275e4 <assert_post_action>
    clock_stop(domain);
}
   1dc90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1dc94:	f7ff be4e 	b.w	1d934 <clock_stop>
   1dc98:	2002f5f0 	.word	0x2002f5f0
   1dc9c:	00032f9a 	.word	0x00032f9a
   1dca0:	0002e715 	.word	0x0002e715
   1dca4:	00032f1b 	.word	0x00032f1b

0001dca8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1dca8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1dcaa:	4b28      	ldr	r3, [pc, #160]	; (1dd4c <nrfx_power_clock_irq_handler+0xa4>)
   1dcac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1dcb0:	b152      	cbz	r2, 1dcc8 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dcb2:	2000      	movs	r0, #0
   1dcb4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1dcb8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1dcbc:	2201      	movs	r2, #1
   1dcbe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1dcc2:	4b23      	ldr	r3, [pc, #140]	; (1dd50 <nrfx_power_clock_irq_handler+0xa8>)
   1dcc4:	681b      	ldr	r3, [r3, #0]
   1dcc6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1dcc8:	4b20      	ldr	r3, [pc, #128]	; (1dd4c <nrfx_power_clock_irq_handler+0xa4>)
   1dcca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1dcce:	b18a      	cbz	r2, 1dcf4 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dcd0:	2200      	movs	r2, #0
   1dcd2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1dcd6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1dcda:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1dcde:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1dce2:	f002 0203 	and.w	r2, r2, #3
   1dce6:	2a01      	cmp	r2, #1
   1dce8:	f04f 0102 	mov.w	r1, #2
   1dcec:	d126      	bne.n	1dd3c <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1dcee:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dcf2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1dcf4:	4b15      	ldr	r3, [pc, #84]	; (1dd4c <nrfx_power_clock_irq_handler+0xa4>)
   1dcf6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1dcfa:	b162      	cbz	r2, 1dd16 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dcfc:	2200      	movs	r2, #0
   1dcfe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1dd02:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1dd06:	f44f 7280 	mov.w	r2, #256	; 0x100
   1dd0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1dd0e:	4b10      	ldr	r3, [pc, #64]	; (1dd50 <nrfx_power_clock_irq_handler+0xa8>)
   1dd10:	2004      	movs	r0, #4
   1dd12:	681b      	ldr	r3, [r3, #0]
   1dd14:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1dd16:	4b0d      	ldr	r3, [pc, #52]	; (1dd4c <nrfx_power_clock_irq_handler+0xa4>)
   1dd18:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1dd1c:	b1aa      	cbz	r2, 1dd4a <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dd1e:	2200      	movs	r2, #0
   1dd20:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1dd24:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1dd28:	f44f 7200 	mov.w	r2, #512	; 0x200
   1dd2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1dd30:	4b07      	ldr	r3, [pc, #28]	; (1dd50 <nrfx_power_clock_irq_handler+0xa8>)
   1dd32:	2005      	movs	r0, #5
    }
#endif
}
   1dd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1dd38:	681b      	ldr	r3, [r3, #0]
   1dd3a:	4718      	bx	r3
   1dd3c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1dd40:	4b03      	ldr	r3, [pc, #12]	; (1dd50 <nrfx_power_clock_irq_handler+0xa8>)
   1dd42:	2001      	movs	r0, #1
   1dd44:	681b      	ldr	r3, [r3, #0]
   1dd46:	4798      	blx	r3
   1dd48:	e7d4      	b.n	1dcf4 <nrfx_power_clock_irq_handler+0x4c>
}
   1dd4a:	bd10      	pop	{r4, pc}
   1dd4c:	40005000 	.word	0x40005000
   1dd50:	2002f5f0 	.word	0x2002f5f0

0001dd54 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1dd54:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1dd56:	4801      	ldr	r0, [pc, #4]	; (1dd5c <nrfx_dppi_channel_alloc+0x8>)
   1dd58:	f7ff bdb4 	b.w	1d8c4 <nrfx_flag32_alloc>
   1dd5c:	200086e0 	.word	0x200086e0

0001dd60 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1dd60:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1dd62:	4a04      	ldr	r2, [pc, #16]	; (1dd74 <nrfx_dppi_channel_free+0x14>)
   1dd64:	4083      	lsls	r3, r0
{
   1dd66:	4601      	mov	r1, r0
   1dd68:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1dd6c:	4802      	ldr	r0, [pc, #8]	; (1dd78 <nrfx_dppi_channel_free+0x18>)
   1dd6e:	f7ff bdc5 	b.w	1d8fc <nrfx_flag32_free>
   1dd72:	bf00      	nop
   1dd74:	40017000 	.word	0x40017000
   1dd78:	200086e0 	.word	0x200086e0

0001dd7c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1dd7c:	4b03      	ldr	r3, [pc, #12]	; (1dd8c <pin_in_use_by_te+0x10>)
   1dd7e:	3008      	adds	r0, #8
   1dd80:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1dd84:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1dd88:	4770      	bx	lr
   1dd8a:	bf00      	nop
   1dd8c:	200086e4 	.word	0x200086e4

0001dd90 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1dd90:	4b04      	ldr	r3, [pc, #16]	; (1dda4 <pin_has_trigger+0x14>)
   1dd92:	3008      	adds	r0, #8
   1dd94:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1dd98:	f010 001c 	ands.w	r0, r0, #28
   1dd9c:	bf18      	it	ne
   1dd9e:	2001      	movne	r0, #1
   1dda0:	4770      	bx	lr
   1dda2:	bf00      	nop
   1dda4:	200086e4 	.word	0x200086e4

0001dda8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1dda8:	4b03      	ldr	r3, [pc, #12]	; (1ddb8 <pin_is_output+0x10>)
   1ddaa:	3008      	adds	r0, #8
   1ddac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ddb0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1ddb4:	4770      	bx	lr
   1ddb6:	bf00      	nop
   1ddb8:	200086e4 	.word	0x200086e4

0001ddbc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1ddbc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ddbe:	4c0d      	ldr	r4, [pc, #52]	; (1ddf4 <call_handler+0x38>)
   1ddc0:	f100 0308 	add.w	r3, r0, #8
   1ddc4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1ddc8:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ddca:	05da      	lsls	r2, r3, #23
{
   1ddcc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ddce:	d507      	bpl.n	1dde0 <call_handler+0x24>
   1ddd0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1ddd4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1ddd8:	6852      	ldr	r2, [r2, #4]
   1ddda:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1ddde:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1dde0:	68a3      	ldr	r3, [r4, #8]
   1dde2:	b12b      	cbz	r3, 1ddf0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1dde4:	4631      	mov	r1, r6
   1dde6:	4628      	mov	r0, r5
   1dde8:	68e2      	ldr	r2, [r4, #12]
    }
}
   1ddea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1ddee:	4718      	bx	r3
}
   1ddf0:	bd70      	pop	{r4, r5, r6, pc}
   1ddf2:	bf00      	nop
   1ddf4:	200086e4 	.word	0x200086e4

0001ddf8 <release_handler>:
{
   1ddf8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ddfa:	4a18      	ldr	r2, [pc, #96]	; (1de5c <release_handler+0x64>)
   1ddfc:	3008      	adds	r0, #8
   1ddfe:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1de02:	05d9      	lsls	r1, r3, #23
   1de04:	d51d      	bpl.n	1de42 <release_handler+0x4a>
   1de06:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1de0a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1de0e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1de12:	2000      	movs	r0, #0
   1de14:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1de18:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1de1c:	f413 7f80 	tst.w	r3, #256	; 0x100
   1de20:	d003      	beq.n	1de2a <release_handler+0x32>
   1de22:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1de26:	4299      	cmp	r1, r3
   1de28:	d00b      	beq.n	1de42 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1de2a:	3001      	adds	r0, #1
   1de2c:	2830      	cmp	r0, #48	; 0x30
   1de2e:	d1f3      	bne.n	1de18 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1de30:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1de32:	480b      	ldr	r0, [pc, #44]	; (1de60 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1de34:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1de38:	f7ff fd60 	bl	1d8fc <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1de3c:	4b09      	ldr	r3, [pc, #36]	; (1de64 <release_handler+0x6c>)
   1de3e:	4298      	cmp	r0, r3
   1de40:	d100      	bne.n	1de44 <release_handler+0x4c>
}
   1de42:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1de44:	4908      	ldr	r1, [pc, #32]	; (1de68 <release_handler+0x70>)
   1de46:	4809      	ldr	r0, [pc, #36]	; (1de6c <release_handler+0x74>)
   1de48:	f44f 7399 	mov.w	r3, #306	; 0x132
   1de4c:	4a08      	ldr	r2, [pc, #32]	; (1de70 <release_handler+0x78>)
   1de4e:	f009 fbd0 	bl	275f2 <assert_print>
   1de52:	f44f 7199 	mov.w	r1, #306	; 0x132
   1de56:	4806      	ldr	r0, [pc, #24]	; (1de70 <release_handler+0x78>)
   1de58:	f009 fbc4 	bl	275e4 <assert_post_action>
   1de5c:	200086e4 	.word	0x200086e4
   1de60:	20008758 	.word	0x20008758
   1de64:	0bad0000 	.word	0x0bad0000
   1de68:	0002f6fc 	.word	0x0002f6fc
   1de6c:	0002e715 	.word	0x0002e715
   1de70:	00032fcd 	.word	0x00032fcd

0001de74 <pin_handler_trigger_uninit>:
{
   1de74:	b538      	push	{r3, r4, r5, lr}
   1de76:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1de78:	f7ff ff80 	bl	1dd7c <pin_in_use_by_te>
   1de7c:	4c0b      	ldr	r4, [pc, #44]	; (1deac <pin_handler_trigger_uninit+0x38>)
   1de7e:	f102 0508 	add.w	r5, r2, #8
   1de82:	b160      	cbz	r0, 1de9e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1de84:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1de86:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1de8a:	0b5b      	lsrs	r3, r3, #13
   1de8c:	009b      	lsls	r3, r3, #2
   1de8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1de92:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1de96:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1de9a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1de9e:	4610      	mov	r0, r2
   1dea0:	f7ff ffaa 	bl	1ddf8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1dea4:	2300      	movs	r3, #0
   1dea6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1deaa:	bd38      	pop	{r3, r4, r5, pc}
   1deac:	200086e4 	.word	0x200086e4

0001deb0 <nrf_gpio_pin_port_decode>:
{
   1deb0:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1deb2:	6802      	ldr	r2, [r0, #0]
{
   1deb4:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1deb6:	4610      	mov	r0, r2
   1deb8:	f00d f902 	bl	2b0c0 <nrf_gpio_pin_present_check>
   1debc:	b958      	cbnz	r0, 1ded6 <nrf_gpio_pin_port_decode+0x26>
   1debe:	4910      	ldr	r1, [pc, #64]	; (1df00 <nrf_gpio_pin_port_decode+0x50>)
   1dec0:	f240 2347 	movw	r3, #583	; 0x247
   1dec4:	4a0f      	ldr	r2, [pc, #60]	; (1df04 <nrf_gpio_pin_port_decode+0x54>)
   1dec6:	4810      	ldr	r0, [pc, #64]	; (1df08 <nrf_gpio_pin_port_decode+0x58>)
   1dec8:	f009 fb93 	bl	275f2 <assert_print>
   1decc:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1ded0:	480c      	ldr	r0, [pc, #48]	; (1df04 <nrf_gpio_pin_port_decode+0x54>)
   1ded2:	f009 fb87 	bl	275e4 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1ded6:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1deda:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1dedc:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dede:	d00b      	beq.n	1def8 <nrf_gpio_pin_port_decode+0x48>
   1dee0:	2a01      	cmp	r2, #1
   1dee2:	d00b      	beq.n	1defc <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1dee4:	4909      	ldr	r1, [pc, #36]	; (1df0c <nrf_gpio_pin_port_decode+0x5c>)
   1dee6:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1deea:	4a06      	ldr	r2, [pc, #24]	; (1df04 <nrf_gpio_pin_port_decode+0x54>)
   1deec:	4806      	ldr	r0, [pc, #24]	; (1df08 <nrf_gpio_pin_port_decode+0x58>)
   1deee:	f009 fb80 	bl	275f2 <assert_print>
   1def2:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1def6:	e7eb      	b.n	1ded0 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1def8:	4805      	ldr	r0, [pc, #20]	; (1df10 <nrf_gpio_pin_port_decode+0x60>)
}
   1defa:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1defc:	4805      	ldr	r0, [pc, #20]	; (1df14 <nrf_gpio_pin_port_decode+0x64>)
   1defe:	e7fc      	b.n	1defa <nrf_gpio_pin_port_decode+0x4a>
   1df00:	000326ad 	.word	0x000326ad
   1df04:	0003267a 	.word	0x0003267a
   1df08:	0002e715 	.word	0x0002e715
   1df0c:	00033fc0 	.word	0x00033fc0
   1df10:	40842500 	.word	0x40842500
   1df14:	40842800 	.word	0x40842800

0001df18 <nrfx_gpiote_input_configure>:
{
   1df18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df1a:	4604      	mov	r4, r0
   1df1c:	4617      	mov	r7, r2
   1df1e:	461d      	mov	r5, r3
   1df20:	b085      	sub	sp, #20
    if (p_input_config)
   1df22:	b1d9      	cbz	r1, 1df5c <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1df24:	f00d f8dd 	bl	2b0e2 <pin_is_task_output>
   1df28:	bb00      	cbnz	r0, 1df6c <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1df2a:	460b      	mov	r3, r1
   1df2c:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1df30:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1df34:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1df38:	f10d 020f 	add.w	r2, sp, #15
   1df3c:	f10d 010e 	add.w	r1, sp, #14
   1df40:	4620      	mov	r0, r4
   1df42:	f00d f8d9 	bl	2b0f8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1df46:	4a44      	ldr	r2, [pc, #272]	; (1e058 <nrfx_gpiote_input_configure+0x140>)
   1df48:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1df4c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1df50:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1df54:	f043 0301 	orr.w	r3, r3, #1
   1df58:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1df5c:	b36f      	cbz	r7, 1dfba <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1df5e:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1df60:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1df62:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1df64:	f7ff ff20 	bl	1dda8 <pin_is_output>
   1df68:	b110      	cbz	r0, 1df70 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1df6a:	b1da      	cbz	r2, 1dfa4 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1df6c:	483b      	ldr	r0, [pc, #236]	; (1e05c <nrfx_gpiote_input_configure+0x144>)
   1df6e:	e026      	b.n	1dfbe <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1df70:	4839      	ldr	r0, [pc, #228]	; (1e058 <nrfx_gpiote_input_configure+0x140>)
   1df72:	f104 0c08 	add.w	ip, r4, #8
   1df76:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1df7a:	f021 0120 	bic.w	r1, r1, #32
   1df7e:	04c9      	lsls	r1, r1, #19
   1df80:	0cc9      	lsrs	r1, r1, #19
   1df82:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1df86:	b16a      	cbz	r2, 1dfa4 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1df88:	2e03      	cmp	r6, #3
   1df8a:	d8ef      	bhi.n	1df6c <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1df8c:	687b      	ldr	r3, [r7, #4]
   1df8e:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1df90:	00ba      	lsls	r2, r7, #2
   1df92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1df96:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1df9a:	b996      	cbnz	r6, 1dfc2 <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1df9c:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1dfa0:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1dfa4:	4a2c      	ldr	r2, [pc, #176]	; (1e058 <nrfx_gpiote_input_configure+0x140>)
   1dfa6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1dfaa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1dfae:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1dfb2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1dfb6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1dfba:	bb15      	cbnz	r5, 1e002 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1dfbc:	4828      	ldr	r0, [pc, #160]	; (1e060 <nrfx_gpiote_input_configure+0x148>)
}
   1dfbe:	b005      	add	sp, #20
   1dfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1dfc2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1dfc6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1dfca:	f023 0303 	bic.w	r3, r3, #3
   1dfce:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1dfd2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1dfd6:	f041 0120 	orr.w	r1, r1, #32
   1dfda:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1dfde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1dfe2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1dfe6:	0223      	lsls	r3, r4, #8
   1dfe8:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1dfec:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1dff0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1dff4:	ea43 030e 	orr.w	r3, r3, lr
   1dff8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1dffc:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1e000:	e7d0      	b.n	1dfa4 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1e002:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1e004:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1e008:	f7ff fef6 	bl	1ddf8 <release_handler>
    if (!handler)
   1e00c:	2e00      	cmp	r6, #0
   1e00e:	d0d5      	beq.n	1dfbc <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1e010:	4d11      	ldr	r5, [pc, #68]	; (1e058 <nrfx_gpiote_input_configure+0x140>)
   1e012:	e9d5 2300 	ldrd	r2, r3, [r5]
   1e016:	4296      	cmp	r6, r2
   1e018:	d101      	bne.n	1e01e <nrfx_gpiote_input_configure+0x106>
   1e01a:	429f      	cmp	r7, r3
   1e01c:	d019      	beq.n	1e052 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1e01e:	4811      	ldr	r0, [pc, #68]	; (1e064 <nrfx_gpiote_input_configure+0x14c>)
   1e020:	f10d 010f 	add.w	r1, sp, #15
   1e024:	f7ff fc4e 	bl	1d8c4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1e028:	4b0d      	ldr	r3, [pc, #52]	; (1e060 <nrfx_gpiote_input_configure+0x148>)
   1e02a:	4298      	cmp	r0, r3
   1e02c:	d1c7      	bne.n	1dfbe <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1e02e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1e032:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1e036:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1e03a:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1e03c:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1e040:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1e044:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1e048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1e04c:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1e050:	e7b4      	b.n	1dfbc <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1e052:	2200      	movs	r2, #0
   1e054:	e7ed      	b.n	1e032 <nrfx_gpiote_input_configure+0x11a>
   1e056:	bf00      	nop
   1e058:	200086e4 	.word	0x200086e4
   1e05c:	0bad0004 	.word	0x0bad0004
   1e060:	0bad0000 	.word	0x0bad0000
   1e064:	20008758 	.word	0x20008758

0001e068 <nrfx_gpiote_output_configure>:
{
   1e068:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e06a:	4604      	mov	r4, r0
   1e06c:	4615      	mov	r5, r2
   1e06e:	b085      	sub	sp, #20
    if (p_config)
   1e070:	b321      	cbz	r1, 1e0bc <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1e072:	f7ff fe99 	bl	1dda8 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1e076:	b920      	cbnz	r0, 1e082 <nrfx_gpiote_output_configure+0x1a>
   1e078:	4620      	mov	r0, r4
   1e07a:	f7ff fe7f 	bl	1dd7c <pin_in_use_by_te>
   1e07e:	2800      	cmp	r0, #0
   1e080:	d161      	bne.n	1e146 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1e082:	4620      	mov	r0, r4
   1e084:	f7ff fe84 	bl	1dd90 <pin_has_trigger>
   1e088:	b110      	cbz	r0, 1e090 <nrfx_gpiote_output_configure+0x28>
   1e08a:	784b      	ldrb	r3, [r1, #1]
   1e08c:	2b01      	cmp	r3, #1
   1e08e:	d05a      	beq.n	1e146 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1e090:	2301      	movs	r3, #1
   1e092:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1e096:	2300      	movs	r3, #0
   1e098:	1c4a      	adds	r2, r1, #1
   1e09a:	e9cd 1300 	strd	r1, r3, [sp]
   1e09e:	4620      	mov	r0, r4
   1e0a0:	1c8b      	adds	r3, r1, #2
   1e0a2:	f10d 010f 	add.w	r1, sp, #15
   1e0a6:	f00d f827 	bl	2b0f8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1e0aa:	4a28      	ldr	r2, [pc, #160]	; (1e14c <nrfx_gpiote_output_configure+0xe4>)
   1e0ac:	f104 0108 	add.w	r1, r4, #8
   1e0b0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1e0b4:	f043 0303 	orr.w	r3, r3, #3
   1e0b8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1e0bc:	b915      	cbnz	r5, 1e0c4 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1e0be:	4824      	ldr	r0, [pc, #144]	; (1e150 <nrfx_gpiote_output_configure+0xe8>)
}
   1e0c0:	b005      	add	sp, #20
   1e0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1e0c4:	4620      	mov	r0, r4
   1e0c6:	f7ff fe6f 	bl	1dda8 <pin_is_output>
        if (pin_is_input(pin))
   1e0ca:	2800      	cmp	r0, #0
   1e0cc:	d03b      	beq.n	1e146 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1e0ce:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1e0d2:	2300      	movs	r3, #0
   1e0d4:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1e0d6:	4e1d      	ldr	r6, [pc, #116]	; (1e14c <nrfx_gpiote_output_configure+0xe4>)
   1e0d8:	f104 0708 	add.w	r7, r4, #8
   1e0dc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1e0e0:	0089      	lsls	r1, r1, #2
   1e0e2:	f020 0020 	bic.w	r0, r0, #32
   1e0e6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1e0ea:	04c0      	lsls	r0, r0, #19
   1e0ec:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1e0f0:	0cc0      	lsrs	r0, r0, #19
   1e0f2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1e0f6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1e0fa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1e0fe:	786a      	ldrb	r2, [r5, #1]
   1e100:	2a00      	cmp	r2, #0
   1e102:	d0dc      	beq.n	1e0be <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1e104:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1e108:	78ad      	ldrb	r5, [r5, #2]
   1e10a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1e10e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1e112:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e116:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1e11a:	0223      	lsls	r3, r4, #8
   1e11c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1e120:	0412      	lsls	r2, r2, #16
   1e122:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e126:	ea43 030e 	orr.w	r3, r3, lr
   1e12a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1e12c:	052a      	lsls	r2, r5, #20
   1e12e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1e132:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e136:	4313      	orrs	r3, r2
   1e138:	f040 0020 	orr.w	r0, r0, #32
   1e13c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1e140:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1e144:	e7bb      	b.n	1e0be <nrfx_gpiote_output_configure+0x56>
{
   1e146:	4803      	ldr	r0, [pc, #12]	; (1e154 <nrfx_gpiote_output_configure+0xec>)
   1e148:	e7ba      	b.n	1e0c0 <nrfx_gpiote_output_configure+0x58>
   1e14a:	bf00      	nop
   1e14c:	200086e4 	.word	0x200086e4
   1e150:	0bad0000 	.word	0x0bad0000
   1e154:	0bad0004 	.word	0x0bad0004

0001e158 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1e158:	4b01      	ldr	r3, [pc, #4]	; (1e160 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1e15a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1e15e:	4770      	bx	lr
   1e160:	200086e4 	.word	0x200086e4

0001e164 <nrfx_gpiote_channel_get>:
{
   1e164:	4602      	mov	r2, r0
   1e166:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1e168:	b959      	cbnz	r1, 1e182 <nrfx_gpiote_channel_get+0x1e>
   1e16a:	490c      	ldr	r1, [pc, #48]	; (1e19c <nrfx_gpiote_channel_get+0x38>)
   1e16c:	480c      	ldr	r0, [pc, #48]	; (1e1a0 <nrfx_gpiote_channel_get+0x3c>)
   1e16e:	f240 2335 	movw	r3, #565	; 0x235
   1e172:	4a0c      	ldr	r2, [pc, #48]	; (1e1a4 <nrfx_gpiote_channel_get+0x40>)
   1e174:	f009 fa3d 	bl	275f2 <assert_print>
   1e178:	f240 2135 	movw	r1, #565	; 0x235
   1e17c:	4809      	ldr	r0, [pc, #36]	; (1e1a4 <nrfx_gpiote_channel_get+0x40>)
   1e17e:	f009 fa31 	bl	275e4 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1e182:	f7ff fdfb 	bl	1dd7c <pin_in_use_by_te>
   1e186:	b138      	cbz	r0, 1e198 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e188:	4b07      	ldr	r3, [pc, #28]	; (1e1a8 <nrfx_gpiote_channel_get+0x44>)
   1e18a:	3208      	adds	r2, #8
   1e18c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1e190:	4806      	ldr	r0, [pc, #24]	; (1e1ac <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e192:	0b5b      	lsrs	r3, r3, #13
   1e194:	700b      	strb	r3, [r1, #0]
}
   1e196:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e198:	4805      	ldr	r0, [pc, #20]	; (1e1b0 <nrfx_gpiote_channel_get+0x4c>)
   1e19a:	e7fc      	b.n	1e196 <nrfx_gpiote_channel_get+0x32>
   1e19c:	0003300b 	.word	0x0003300b
   1e1a0:	0002e715 	.word	0x0002e715
   1e1a4:	00032fcd 	.word	0x00032fcd
   1e1a8:	200086e4 	.word	0x200086e4
   1e1ac:	0bad0000 	.word	0x0bad0000
   1e1b0:	0bad0004 	.word	0x0bad0004

0001e1b4 <nrfx_gpiote_init>:
{
   1e1b4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e1b6:	4c0f      	ldr	r4, [pc, #60]	; (1e1f4 <nrfx_gpiote_init+0x40>)
   1e1b8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1e1bc:	b9bd      	cbnz	r5, 1e1ee <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1e1be:	2260      	movs	r2, #96	; 0x60
   1e1c0:	4629      	mov	r1, r5
   1e1c2:	f104 0010 	add.w	r0, r4, #16
   1e1c6:	f00d ffbb 	bl	2c140 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1e1ca:	202f      	movs	r0, #47	; 0x2f
   1e1cc:	f7f2 ff90 	bl	110f0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e1d0:	4b09      	ldr	r3, [pc, #36]	; (1e1f8 <nrfx_gpiote_init+0x44>)
    return err_code;
   1e1d2:	480a      	ldr	r0, [pc, #40]	; (1e1fc <nrfx_gpiote_init+0x48>)
   1e1d4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1e1d8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1e1dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1e1e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1e1e4:	2301      	movs	r3, #1
   1e1e6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1e1ea:	6763      	str	r3, [r4, #116]	; 0x74
}
   1e1ec:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1e1ee:	4804      	ldr	r0, [pc, #16]	; (1e200 <nrfx_gpiote_init+0x4c>)
   1e1f0:	e7fc      	b.n	1e1ec <nrfx_gpiote_init+0x38>
   1e1f2:	bf00      	nop
   1e1f4:	200086e4 	.word	0x200086e4
   1e1f8:	4002f000 	.word	0x4002f000
   1e1fc:	0bad0000 	.word	0x0bad0000
   1e200:	0bad0005 	.word	0x0bad0005

0001e204 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1e204:	4b03      	ldr	r3, [pc, #12]	; (1e214 <nrfx_gpiote_is_init+0x10>)
   1e206:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1e20a:	3800      	subs	r0, #0
   1e20c:	bf18      	it	ne
   1e20e:	2001      	movne	r0, #1
   1e210:	4770      	bx	lr
   1e212:	bf00      	nop
   1e214:	200086e4 	.word	0x200086e4

0001e218 <nrfx_gpiote_channel_free>:
{
   1e218:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1e21a:	4801      	ldr	r0, [pc, #4]	; (1e220 <nrfx_gpiote_channel_free+0x8>)
   1e21c:	f7ff bb6e 	b.w	1d8fc <nrfx_flag32_free>
   1e220:	20008754 	.word	0x20008754

0001e224 <nrfx_gpiote_channel_alloc>:
{
   1e224:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1e226:	4801      	ldr	r0, [pc, #4]	; (1e22c <nrfx_gpiote_channel_alloc+0x8>)
   1e228:	f7ff bb4c 	b.w	1d8c4 <nrfx_flag32_alloc>
   1e22c:	20008754 	.word	0x20008754

0001e230 <nrfx_gpiote_trigger_enable>:
{
   1e230:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e232:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1e234:	f7ff fdac 	bl	1dd90 <pin_has_trigger>
   1e238:	b958      	cbnz	r0, 1e252 <nrfx_gpiote_trigger_enable+0x22>
   1e23a:	492b      	ldr	r1, [pc, #172]	; (1e2e8 <nrfx_gpiote_trigger_enable+0xb8>)
   1e23c:	f240 33df 	movw	r3, #991	; 0x3df
   1e240:	4a2a      	ldr	r2, [pc, #168]	; (1e2ec <nrfx_gpiote_trigger_enable+0xbc>)
   1e242:	482b      	ldr	r0, [pc, #172]	; (1e2f0 <nrfx_gpiote_trigger_enable+0xc0>)
   1e244:	f009 f9d5 	bl	275f2 <assert_print>
   1e248:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1e24c:	4827      	ldr	r0, [pc, #156]	; (1e2ec <nrfx_gpiote_trigger_enable+0xbc>)
   1e24e:	f009 f9c9 	bl	275e4 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e252:	4620      	mov	r0, r4
   1e254:	f7ff fd92 	bl	1dd7c <pin_in_use_by_te>
   1e258:	4a26      	ldr	r2, [pc, #152]	; (1e2f4 <nrfx_gpiote_trigger_enable+0xc4>)
   1e25a:	f104 0508 	add.w	r5, r4, #8
   1e25e:	b1e0      	cbz	r0, 1e29a <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1e260:	4620      	mov	r0, r4
   1e262:	f7ff fda1 	bl	1dda8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e266:	b9c0      	cbnz	r0, 1e29a <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e268:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1e26c:	4c22      	ldr	r4, [pc, #136]	; (1e2f8 <nrfx_gpiote_trigger_enable+0xc8>)
   1e26e:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1e270:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e272:	50e0      	str	r0, [r4, r3]
   1e274:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1e276:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e27a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1e27e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1e282:	f040 0001 	orr.w	r0, r0, #1
   1e286:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1e28a:	b121      	cbz	r1, 1e296 <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1e28c:	2301      	movs	r3, #1
   1e28e:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1e290:	4a1a      	ldr	r2, [pc, #104]	; (1e2fc <nrfx_gpiote_trigger_enable+0xcc>)
   1e292:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1e296:	b003      	add	sp, #12
   1e298:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1e29a:	b949      	cbnz	r1, 1e2b0 <nrfx_gpiote_trigger_enable+0x80>
   1e29c:	4918      	ldr	r1, [pc, #96]	; (1e300 <nrfx_gpiote_trigger_enable+0xd0>)
   1e29e:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1e2a2:	4a12      	ldr	r2, [pc, #72]	; (1e2ec <nrfx_gpiote_trigger_enable+0xbc>)
   1e2a4:	4812      	ldr	r0, [pc, #72]	; (1e2f0 <nrfx_gpiote_trigger_enable+0xc0>)
   1e2a6:	f009 f9a4 	bl	275f2 <assert_print>
   1e2aa:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1e2ae:	e7cd      	b.n	1e24c <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e2b0:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1e2b4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1e2b8:	2b04      	cmp	r3, #4
   1e2ba:	d011      	beq.n	1e2e0 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1e2bc:	2b05      	cmp	r3, #5
   1e2be:	d011      	beq.n	1e2e4 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e2c0:	a801      	add	r0, sp, #4
   1e2c2:	9401      	str	r4, [sp, #4]
   1e2c4:	f7ff fdf4 	bl	1deb0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1e2c8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1e2ca:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1e2cc:	40d9      	lsrs	r1, r3
   1e2ce:	f001 0101 	and.w	r1, r1, #1
   1e2d2:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1e2d4:	4620      	mov	r0, r4
}
   1e2d6:	b003      	add	sp, #12
   1e2d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1e2dc:	f00c bf59 	b.w	2b192 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1e2e0:	2103      	movs	r1, #3
   1e2e2:	e7f7      	b.n	1e2d4 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1e2e4:	2102      	movs	r1, #2
   1e2e6:	e7f5      	b.n	1e2d4 <nrfx_gpiote_trigger_enable+0xa4>
   1e2e8:	00033015 	.word	0x00033015
   1e2ec:	00032fcd 	.word	0x00032fcd
   1e2f0:	0002e715 	.word	0x0002e715
   1e2f4:	200086e4 	.word	0x200086e4
   1e2f8:	4002f100 	.word	0x4002f100
   1e2fc:	4002f000 	.word	0x4002f000
   1e300:	0003302a 	.word	0x0003302a

0001e304 <nrfx_gpiote_trigger_disable>:
{
   1e304:	b508      	push	{r3, lr}
   1e306:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e308:	f7ff fd38 	bl	1dd7c <pin_in_use_by_te>
   1e30c:	b1c8      	cbz	r0, 1e342 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1e30e:	4610      	mov	r0, r2
   1e310:	f7ff fd4a 	bl	1dda8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e314:	b9a8      	cbnz	r0, 1e342 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e316:	4b0e      	ldr	r3, [pc, #56]	; (1e350 <nrfx_gpiote_trigger_disable+0x4c>)
   1e318:	3208      	adds	r2, #8
   1e31a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1e31e:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e320:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1e322:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1e324:	490b      	ldr	r1, [pc, #44]	; (1e354 <nrfx_gpiote_trigger_disable+0x50>)
   1e326:	009b      	lsls	r3, r3, #2
   1e328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e32c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1e330:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1e334:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1e338:	f022 0203 	bic.w	r2, r2, #3
   1e33c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1e340:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1e342:	2100      	movs	r1, #0
}
   1e344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1e348:	4610      	mov	r0, r2
   1e34a:	f00c bf22 	b.w	2b192 <nrf_gpio_cfg_sense_set>
   1e34e:	bf00      	nop
   1e350:	200086e4 	.word	0x200086e4
   1e354:	4002f000 	.word	0x4002f000

0001e358 <nrfx_gpiote_pin_uninit>:
{
   1e358:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1e35a:	4b10      	ldr	r3, [pc, #64]	; (1e39c <nrfx_gpiote_pin_uninit+0x44>)
   1e35c:	f100 0208 	add.w	r2, r0, #8
   1e360:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1e364:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1e366:	07db      	lsls	r3, r3, #31
   1e368:	d516      	bpl.n	1e398 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1e36a:	f7ff ffcb 	bl	1e304 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1e36e:	4620      	mov	r0, r4
   1e370:	f7ff fd80 	bl	1de74 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e374:	a801      	add	r0, sp, #4
   1e376:	9401      	str	r4, [sp, #4]
   1e378:	f7ff fd9a 	bl	1deb0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1e37c:	9b01      	ldr	r3, [sp, #4]
   1e37e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1e382:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1e386:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1e38a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1e38e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1e392:	4803      	ldr	r0, [pc, #12]	; (1e3a0 <nrfx_gpiote_pin_uninit+0x48>)
}
   1e394:	b002      	add	sp, #8
   1e396:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e398:	4802      	ldr	r0, [pc, #8]	; (1e3a4 <nrfx_gpiote_pin_uninit+0x4c>)
   1e39a:	e7fb      	b.n	1e394 <nrfx_gpiote_pin_uninit+0x3c>
   1e39c:	200086e4 	.word	0x200086e4
   1e3a0:	0bad0000 	.word	0x0bad0000
   1e3a4:	0bad0004 	.word	0x0bad0004

0001e3a8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1e3ac:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1e3ae:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e3b0:	4634      	mov	r4, r6
{
   1e3b2:	4b64      	ldr	r3, [pc, #400]	; (1e544 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1e3b4:	4864      	ldr	r0, [pc, #400]	; (1e548 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1e3b6:	4965      	ldr	r1, [pc, #404]	; (1e54c <nrfx_gpiote_irq_handler+0x1a4>)
{
   1e3b8:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e3ba:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1e3bc:	b135      	cbz	r5, 1e3cc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1e3be:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1e3c2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e3c4:	bf1e      	ittt	ne
   1e3c6:	601c      	strne	r4, [r3, #0]
   1e3c8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1e3ca:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1e3cc:	3304      	adds	r3, #4
   1e3ce:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1e3d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1e3d4:	d1f1      	bne.n	1e3ba <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e3d6:	f8df a170 	ldr.w	sl, [pc, #368]	; 1e548 <nrfx_gpiote_irq_handler+0x1a0>
   1e3da:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1e3de:	2b00      	cmp	r3, #0
   1e3e0:	f000 8093 	beq.w	1e50a <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1e3e4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1e550 <nrfx_gpiote_irq_handler+0x1a8>
   1e3e8:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1e3ec:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1e3ee:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1e3f2:	4b58      	ldr	r3, [pc, #352]	; (1e554 <nrfx_gpiote_irq_handler+0x1ac>)
   1e3f4:	6a1a      	ldr	r2, [r3, #32]
   1e3f6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1e3f8:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1e3fa:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1e3fe:	f10d 0b10 	add.w	fp, sp, #16
   1e402:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1e406:	9300      	str	r3, [sp, #0]
   1e408:	e04a      	b.n	1e4a0 <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1e40a:	fa94 f4a4 	rbit	r4, r4
   1e40e:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1e412:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e414:	4a50      	ldr	r2, [pc, #320]	; (1e558 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1e416:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e418:	f104 0308 	add.w	r3, r4, #8
   1e41c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1e420:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1e422:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1e424:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1e428:	fa03 f101 	lsl.w	r1, r3, r1
   1e42c:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1e430:	08ba      	lsrs	r2, r7, #2
   1e432:	ea23 0301 	bic.w	r3, r3, r1
   1e436:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e43a:	a803      	add	r0, sp, #12
   1e43c:	9201      	str	r2, [sp, #4]
   1e43e:	9403      	str	r4, [sp, #12]
   1e440:	f7ff fd36 	bl	1deb0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1e444:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1e446:	9a01      	ldr	r2, [sp, #4]
   1e448:	3380      	adds	r3, #128	; 0x80
   1e44a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e44e:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1e452:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e454:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1e456:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1e45a:	d52b      	bpl.n	1e4b4 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1e45c:	4639      	mov	r1, r7
   1e45e:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1e460:	b2dd      	uxtb	r5, r3
   1e462:	f7ff fcab 	bl	1ddbc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e466:	a803      	add	r0, sp, #12
   1e468:	9403      	str	r4, [sp, #12]
   1e46a:	f7ff fd21 	bl	1deb0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1e46e:	9b03      	ldr	r3, [sp, #12]
   1e470:	3380      	adds	r3, #128	; 0x80
   1e472:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1e476:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1e47a:	429d      	cmp	r5, r3
   1e47c:	d107      	bne.n	1e48e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1e47e:	2100      	movs	r1, #0
   1e480:	4620      	mov	r0, r4
   1e482:	f00c fe86 	bl	2b192 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1e486:	4629      	mov	r1, r5
   1e488:	4620      	mov	r0, r4
   1e48a:	f00c fe82 	bl	2b192 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e48e:	a803      	add	r0, sp, #12
   1e490:	9403      	str	r4, [sp, #12]
   1e492:	f7ff fd0d 	bl	1deb0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1e496:	2201      	movs	r2, #1
   1e498:	9b03      	ldr	r3, [sp, #12]
   1e49a:	fa02 f303 	lsl.w	r3, r2, r3
   1e49e:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1e4a0:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1e4a4:	2c00      	cmp	r4, #0
   1e4a6:	d1b0      	bne.n	1e40a <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1e4a8:	f1b9 0f00 	cmp.w	r9, #0
   1e4ac:	d11d      	bne.n	1e4ea <nrfx_gpiote_irq_handler+0x142>
   1e4ae:	f04f 0901 	mov.w	r9, #1
   1e4b2:	e7a6      	b.n	1e402 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1e4b4:	2b02      	cmp	r3, #2
   1e4b6:	d10c      	bne.n	1e4d2 <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1e4b8:	2103      	movs	r1, #3
   1e4ba:	4620      	mov	r0, r4
   1e4bc:	f00c fe69 	bl	2b192 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1e4c0:	f005 0305 	and.w	r3, r5, #5
   1e4c4:	2b01      	cmp	r3, #1
   1e4c6:	d1e2      	bne.n	1e48e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1e4c8:	4639      	mov	r1, r7
   1e4ca:	4620      	mov	r0, r4
   1e4cc:	f7ff fc76 	bl	1ddbc <call_handler>
   1e4d0:	e7dd      	b.n	1e48e <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1e4d2:	2102      	movs	r1, #2
   1e4d4:	4620      	mov	r0, r4
   1e4d6:	9301      	str	r3, [sp, #4]
   1e4d8:	f00c fe5b 	bl	2b192 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1e4dc:	2d03      	cmp	r5, #3
   1e4de:	d0f3      	beq.n	1e4c8 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1e4e0:	9b01      	ldr	r3, [sp, #4]
   1e4e2:	2b03      	cmp	r3, #3
   1e4e4:	d1d3      	bne.n	1e48e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1e4e6:	2d02      	cmp	r5, #2
   1e4e8:	e7ed      	b.n	1e4c6 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e4ea:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1e4ee:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1e4f2:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1e4f6:	4917      	ldr	r1, [pc, #92]	; (1e554 <nrfx_gpiote_irq_handler+0x1ac>)
   1e4f8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1e4fa:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1e4fe:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1e500:	4313      	orrs	r3, r2
   1e502:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1e504:	620a      	str	r2, [r1, #32]
   1e506:	f47f af78 	bne.w	1e3fa <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1e50a:	2401      	movs	r4, #1
    while (mask)
   1e50c:	b916      	cbnz	r6, 1e514 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1e50e:	b007      	add	sp, #28
   1e510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1e514:	fa96 f3a6 	rbit	r3, r6
   1e518:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1e51c:	fa04 f203 	lsl.w	r2, r4, r3
   1e520:	009b      	lsls	r3, r3, #2
   1e522:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e526:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e52a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1e52e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1e532:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1e536:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1e53a:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1e53e:	f7ff fc3d 	bl	1ddbc <call_handler>
   1e542:	e7e3      	b.n	1e50c <nrfx_gpiote_irq_handler+0x164>
   1e544:	4002f100 	.word	0x4002f100
   1e548:	4002f000 	.word	0x4002f000
   1e54c:	4002f120 	.word	0x4002f120
   1e550:	40842500 	.word	0x40842500
   1e554:	40842800 	.word	0x40842800
   1e558:	200086e4 	.word	0x200086e4

0001e55c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1e55c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e55e:	4c08      	ldr	r4, [pc, #32]	; (1e580 <nrfx_ipc_init+0x24>)
{
   1e560:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e562:	7923      	ldrb	r3, [r4, #4]
{
   1e564:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e566:	b943      	cbnz	r3, 1e57a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1e568:	202a      	movs	r0, #42	; 0x2a
   1e56a:	f7f2 fdc1 	bl	110f0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1e56e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1e570:	4804      	ldr	r0, [pc, #16]	; (1e584 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1e572:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1e574:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1e576:	60a5      	str	r5, [r4, #8]
}
   1e578:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1e57a:	4803      	ldr	r0, [pc, #12]	; (1e588 <nrfx_ipc_init+0x2c>)
   1e57c:	e7fc      	b.n	1e578 <nrfx_ipc_init+0x1c>
   1e57e:	bf00      	nop
   1e580:	2002f5f8 	.word	0x2002f5f8
   1e584:	0bad0000 	.word	0x0bad0000
   1e588:	0bad000c 	.word	0x0bad000c

0001e58c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1e58c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1e58e:	b948      	cbnz	r0, 1e5a4 <nrfx_ipc_config_load+0x18>
   1e590:	4919      	ldr	r1, [pc, #100]	; (1e5f8 <nrfx_ipc_config_load+0x6c>)
   1e592:	2345      	movs	r3, #69	; 0x45
   1e594:	4a19      	ldr	r2, [pc, #100]	; (1e5fc <nrfx_ipc_config_load+0x70>)
   1e596:	481a      	ldr	r0, [pc, #104]	; (1e600 <nrfx_ipc_config_load+0x74>)
   1e598:	f009 f82b 	bl	275f2 <assert_print>
   1e59c:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1e59e:	4817      	ldr	r0, [pc, #92]	; (1e5fc <nrfx_ipc_config_load+0x70>)
   1e5a0:	f009 f820 	bl	275e4 <assert_post_action>
   1e5a4:	4b17      	ldr	r3, [pc, #92]	; (1e604 <nrfx_ipc_config_load+0x78>)
   1e5a6:	791b      	ldrb	r3, [r3, #4]
   1e5a8:	2b01      	cmp	r3, #1
   1e5aa:	d007      	beq.n	1e5bc <nrfx_ipc_config_load+0x30>
   1e5ac:	4916      	ldr	r1, [pc, #88]	; (1e608 <nrfx_ipc_config_load+0x7c>)
   1e5ae:	2346      	movs	r3, #70	; 0x46
   1e5b0:	4a12      	ldr	r2, [pc, #72]	; (1e5fc <nrfx_ipc_config_load+0x70>)
   1e5b2:	4813      	ldr	r0, [pc, #76]	; (1e600 <nrfx_ipc_config_load+0x74>)
   1e5b4:	f009 f81d 	bl	275f2 <assert_print>
   1e5b8:	2146      	movs	r1, #70	; 0x46
   1e5ba:	e7f0      	b.n	1e59e <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1e5bc:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1e5be:	4a13      	ldr	r2, [pc, #76]	; (1e60c <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1e5c0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1e5c4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1e5c8:	3301      	adds	r3, #1
   1e5ca:	2b10      	cmp	r3, #16
   1e5cc:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1e5d0:	d1f6      	bne.n	1e5c0 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1e5d2:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1e5d4:	4a0d      	ldr	r2, [pc, #52]	; (1e60c <nrfx_ipc_config_load+0x80>)
   1e5d6:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1e5da:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1e5de:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1e5e2:	3301      	adds	r3, #1
   1e5e4:	2b10      	cmp	r3, #16
   1e5e6:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1e5ea:	d1f6      	bne.n	1e5da <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1e5ec:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1e5f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1e5f4:	bd38      	pop	{r3, r4, r5, pc}
   1e5f6:	bf00      	nop
   1e5f8:	0003307c 	.word	0x0003307c
   1e5fc:	00033041 	.word	0x00033041
   1e600:	0002e715 	.word	0x0002e715
   1e604:	2002f5f8 	.word	0x2002f5f8
   1e608:	00033085 	.word	0x00033085
   1e60c:	4002a000 	.word	0x4002a000

0001e610 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1e610:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1e612:	4b09      	ldr	r3, [pc, #36]	; (1e638 <nrfx_ipc_receive_event_enable+0x28>)
   1e614:	791b      	ldrb	r3, [r3, #4]
   1e616:	2b01      	cmp	r3, #1
   1e618:	d009      	beq.n	1e62e <nrfx_ipc_receive_event_enable+0x1e>
   1e61a:	4908      	ldr	r1, [pc, #32]	; (1e63c <nrfx_ipc_receive_event_enable+0x2c>)
   1e61c:	4808      	ldr	r0, [pc, #32]	; (1e640 <nrfx_ipc_receive_event_enable+0x30>)
   1e61e:	236b      	movs	r3, #107	; 0x6b
   1e620:	4a08      	ldr	r2, [pc, #32]	; (1e644 <nrfx_ipc_receive_event_enable+0x34>)
   1e622:	f008 ffe6 	bl	275f2 <assert_print>
   1e626:	216b      	movs	r1, #107	; 0x6b
   1e628:	4806      	ldr	r0, [pc, #24]	; (1e644 <nrfx_ipc_receive_event_enable+0x34>)
   1e62a:	f008 ffdb 	bl	275e4 <assert_post_action>
   1e62e:	4a06      	ldr	r2, [pc, #24]	; (1e648 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1e630:	4083      	lsls	r3, r0
   1e632:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1e636:	bd08      	pop	{r3, pc}
   1e638:	2002f5f8 	.word	0x2002f5f8
   1e63c:	00033085 	.word	0x00033085
   1e640:	0002e715 	.word	0x0002e715
   1e644:	00033041 	.word	0x00033041
   1e648:	4002a000 	.word	0x4002a000

0001e64c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1e64c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1e64e:	4b09      	ldr	r3, [pc, #36]	; (1e674 <nrfx_ipc_receive_event_disable+0x28>)
   1e650:	791b      	ldrb	r3, [r3, #4]
   1e652:	2b01      	cmp	r3, #1
   1e654:	d009      	beq.n	1e66a <nrfx_ipc_receive_event_disable+0x1e>
   1e656:	4908      	ldr	r1, [pc, #32]	; (1e678 <nrfx_ipc_receive_event_disable+0x2c>)
   1e658:	4808      	ldr	r0, [pc, #32]	; (1e67c <nrfx_ipc_receive_event_disable+0x30>)
   1e65a:	2371      	movs	r3, #113	; 0x71
   1e65c:	4a08      	ldr	r2, [pc, #32]	; (1e680 <nrfx_ipc_receive_event_disable+0x34>)
   1e65e:	f008 ffc8 	bl	275f2 <assert_print>
   1e662:	2171      	movs	r1, #113	; 0x71
   1e664:	4806      	ldr	r0, [pc, #24]	; (1e680 <nrfx_ipc_receive_event_disable+0x34>)
   1e666:	f008 ffbd 	bl	275e4 <assert_post_action>
    p_reg->INTENCLR = mask;
   1e66a:	4a06      	ldr	r2, [pc, #24]	; (1e684 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1e66c:	4083      	lsls	r3, r0
   1e66e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1e672:	bd08      	pop	{r3, pc}
   1e674:	2002f5f8 	.word	0x2002f5f8
   1e678:	00033085 	.word	0x00033085
   1e67c:	0002e715 	.word	0x0002e715
   1e680:	00033041 	.word	0x00033041
   1e684:	4002a000 	.word	0x4002a000

0001e688 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1e688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1e68a:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e68c:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1e68e:	4b12      	ldr	r3, [pc, #72]	; (1e6d8 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1e690:	4d12      	ldr	r5, [pc, #72]	; (1e6dc <nrfx_ipc_irq_handler+0x54>)
   1e692:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1e696:	b904      	cbnz	r4, 1e69a <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1e698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1e69a:	fa94 f0a4 	rbit	r0, r4
   1e69e:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1e6a2:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1e6a6:	280f      	cmp	r0, #15
   1e6a8:	ea24 0403 	bic.w	r4, r4, r3
   1e6ac:	dd0b      	ble.n	1e6c6 <nrfx_ipc_irq_handler+0x3e>
   1e6ae:	490c      	ldr	r1, [pc, #48]	; (1e6e0 <nrfx_ipc_irq_handler+0x58>)
   1e6b0:	480c      	ldr	r0, [pc, #48]	; (1e6e4 <nrfx_ipc_irq_handler+0x5c>)
   1e6b2:	f240 13e7 	movw	r3, #487	; 0x1e7
   1e6b6:	4a0c      	ldr	r2, [pc, #48]	; (1e6e8 <nrfx_ipc_irq_handler+0x60>)
   1e6b8:	f008 ff9b 	bl	275f2 <assert_print>
   1e6bc:	f240 11e7 	movw	r1, #487	; 0x1e7
   1e6c0:	4809      	ldr	r0, [pc, #36]	; (1e6e8 <nrfx_ipc_irq_handler+0x60>)
   1e6c2:	f008 ff8f 	bl	275e4 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6c6:	4b09      	ldr	r3, [pc, #36]	; (1e6ec <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1e6c8:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e6ca:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1e6cc:	682b      	ldr	r3, [r5, #0]
   1e6ce:	2b00      	cmp	r3, #0
   1e6d0:	d0e1      	beq.n	1e696 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1e6d2:	68a9      	ldr	r1, [r5, #8]
   1e6d4:	4798      	blx	r3
   1e6d6:	e7de      	b.n	1e696 <nrfx_ipc_irq_handler+0xe>
   1e6d8:	4002a000 	.word	0x4002a000
   1e6dc:	2002f5f8 	.word	0x2002f5f8
   1e6e0:	0002f67a 	.word	0x0002f67a
   1e6e4:	0002e715 	.word	0x0002e715
   1e6e8:	0002f648 	.word	0x0002f648
   1e6ec:	4002a100 	.word	0x4002a100

0001e6f0 <nvmc_word_write>:
   1e6f0:	4a04      	ldr	r2, [pc, #16]	; (1e704 <nvmc_word_write+0x14>)
   1e6f2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1e6f6:	07db      	lsls	r3, r3, #31
   1e6f8:	d5fb      	bpl.n	1e6f2 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1e6fa:	6001      	str	r1, [r0, #0]
   1e6fc:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1e700:	4770      	bx	lr
   1e702:	bf00      	nop
   1e704:	40039000 	.word	0x40039000

0001e708 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1e708:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1e70c:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1e70e:	d30b      	bcc.n	1e728 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1e710:	4910      	ldr	r1, [pc, #64]	; (1e754 <nrfx_nvmc_page_erase+0x4c>)
   1e712:	4811      	ldr	r0, [pc, #68]	; (1e758 <nrfx_nvmc_page_erase+0x50>)
   1e714:	f44f 7383 	mov.w	r3, #262	; 0x106
   1e718:	4a10      	ldr	r2, [pc, #64]	; (1e75c <nrfx_nvmc_page_erase+0x54>)
   1e71a:	f008 ff6a 	bl	275f2 <assert_print>
   1e71e:	f44f 7183 	mov.w	r1, #262	; 0x106
   1e722:	480e      	ldr	r0, [pc, #56]	; (1e75c <nrfx_nvmc_page_erase+0x54>)
   1e724:	f008 ff5e 	bl	275e4 <assert_post_action>
    return !(addr % flash_page_size_get());
   1e728:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1e72c:	b97b      	cbnz	r3, 1e74e <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1e72e:	2202      	movs	r2, #2
   1e730:	4b0b      	ldr	r3, [pc, #44]	; (1e760 <nrfx_nvmc_page_erase+0x58>)
   1e732:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1e736:	f04f 32ff 	mov.w	r2, #4294967295
   1e73a:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e73c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1e740:	07d2      	lsls	r2, r2, #31
   1e742:	d5fb      	bpl.n	1e73c <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1e744:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1e746:	4807      	ldr	r0, [pc, #28]	; (1e764 <nrfx_nvmc_page_erase+0x5c>)
   1e748:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1e74c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1e74e:	4806      	ldr	r0, [pc, #24]	; (1e768 <nrfx_nvmc_page_erase+0x60>)
   1e750:	e7fc      	b.n	1e74c <nrfx_nvmc_page_erase+0x44>
   1e752:	bf00      	nop
   1e754:	0003310e 	.word	0x0003310e
   1e758:	0002e715 	.word	0x0002e715
   1e75c:	000330b2 	.word	0x000330b2
   1e760:	40039000 	.word	0x40039000
   1e764:	0bad0000 	.word	0x0bad0000
   1e768:	0bad000a 	.word	0x0bad000a

0001e76c <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1e76c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1e770:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1e772:	d30b      	bcc.n	1e78c <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1e774:	4910      	ldr	r1, [pc, #64]	; (1e7b8 <nrfx_nvmc_word_write+0x4c>)
   1e776:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1e77a:	4a10      	ldr	r2, [pc, #64]	; (1e7bc <nrfx_nvmc_word_write+0x50>)
   1e77c:	4810      	ldr	r0, [pc, #64]	; (1e7c0 <nrfx_nvmc_word_write+0x54>)
   1e77e:	f008 ff38 	bl	275f2 <assert_print>
   1e782:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1e786:	480d      	ldr	r0, [pc, #52]	; (1e7bc <nrfx_nvmc_word_write+0x50>)
   1e788:	f008 ff2c 	bl	275e4 <assert_post_action>
   1e78c:	f010 0403 	ands.w	r4, r0, #3
   1e790:	d009      	beq.n	1e7a6 <nrfx_nvmc_word_write+0x3a>
   1e792:	490c      	ldr	r1, [pc, #48]	; (1e7c4 <nrfx_nvmc_word_write+0x58>)
   1e794:	f240 1395 	movw	r3, #405	; 0x195
   1e798:	4a08      	ldr	r2, [pc, #32]	; (1e7bc <nrfx_nvmc_word_write+0x50>)
   1e79a:	4809      	ldr	r0, [pc, #36]	; (1e7c0 <nrfx_nvmc_word_write+0x54>)
   1e79c:	f008 ff29 	bl	275f2 <assert_print>
   1e7a0:	f240 1195 	movw	r1, #405	; 0x195
   1e7a4:	e7ef      	b.n	1e786 <nrfx_nvmc_word_write+0x1a>
   1e7a6:	2301      	movs	r3, #1
   1e7a8:	4d07      	ldr	r5, [pc, #28]	; (1e7c8 <nrfx_nvmc_word_write+0x5c>)
   1e7aa:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1e7ae:	f7ff ff9f 	bl	1e6f0 <nvmc_word_write>
   1e7b2:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1e7b6:	bd38      	pop	{r3, r4, r5, pc}
   1e7b8:	00033128 	.word	0x00033128
   1e7bc:	000330b2 	.word	0x000330b2
   1e7c0:	0002e715 	.word	0x0002e715
   1e7c4:	00033142 	.word	0x00033142
   1e7c8:	40039000 	.word	0x40039000

0001e7cc <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1e7cc:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1e7ce:	4d43      	ldr	r5, [pc, #268]	; (1e8dc <qspi_xfer+0x110>)
   1e7d0:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1e7d4:	b94c      	cbnz	r4, 1e7ea <qspi_xfer+0x1e>
   1e7d6:	4942      	ldr	r1, [pc, #264]	; (1e8e0 <qspi_xfer+0x114>)
   1e7d8:	2368      	movs	r3, #104	; 0x68
   1e7da:	4a42      	ldr	r2, [pc, #264]	; (1e8e4 <qspi_xfer+0x118>)
   1e7dc:	4842      	ldr	r0, [pc, #264]	; (1e8e8 <qspi_xfer+0x11c>)
   1e7de:	f008 ff08 	bl	275f2 <assert_print>
   1e7e2:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1e7e4:	483f      	ldr	r0, [pc, #252]	; (1e8e4 <qspi_xfer+0x118>)
   1e7e6:	f008 fefd 	bl	275e4 <assert_post_action>
   1e7ea:	b938      	cbnz	r0, 1e7fc <qspi_xfer+0x30>
   1e7ec:	493f      	ldr	r1, [pc, #252]	; (1e8ec <qspi_xfer+0x120>)
   1e7ee:	2369      	movs	r3, #105	; 0x69
   1e7f0:	4a3c      	ldr	r2, [pc, #240]	; (1e8e4 <qspi_xfer+0x118>)
   1e7f2:	483d      	ldr	r0, [pc, #244]	; (1e8e8 <qspi_xfer+0x11c>)
   1e7f4:	f008 fefd 	bl	275f2 <assert_print>
   1e7f8:	2169      	movs	r1, #105	; 0x69
   1e7fa:	e7f3      	b.n	1e7e4 <qspi_xfer+0x18>
   1e7fc:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1e800:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1e804:	d165      	bne.n	1e8d2 <qspi_xfer+0x106>
   1e806:	0786      	lsls	r6, r0, #30
   1e808:	d163      	bne.n	1e8d2 <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1e80a:	2c01      	cmp	r4, #1
   1e80c:	d001      	beq.n	1e812 <qspi_xfer+0x46>
   1e80e:	429c      	cmp	r4, r3
   1e810:	d161      	bne.n	1e8d6 <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1e812:	682c      	ldr	r4, [r5, #0]
   1e814:	bb04      	cbnz	r4, 1e858 <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1e816:	2b02      	cmp	r3, #2
   1e818:	4b35      	ldr	r3, [pc, #212]	; (1e8f0 <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1e81a:	bf0b      	itete	eq
   1e81c:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1e820:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1e824:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1e828:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1e82c:	bf0b      	itete	eq
   1e82e:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1e832:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1e836:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1e838:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e83a:	2100      	movs	r1, #0
   1e83c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e840:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1e844:	2201      	movs	r2, #1
   1e846:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1e84a:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e84c:	4a28      	ldr	r2, [pc, #160]	; (1e8f0 <qspi_xfer+0x124>)
   1e84e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1e852:	2b00      	cmp	r3, #0
   1e854:	d0fb      	beq.n	1e84e <qspi_xfer+0x82>
   1e856:	e00d      	b.n	1e874 <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1e858:	68ae      	ldr	r6, [r5, #8]
   1e85a:	4c25      	ldr	r4, [pc, #148]	; (1e8f0 <qspi_xfer+0x124>)
   1e85c:	b166      	cbz	r6, 1e878 <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1e85e:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1e860:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1e862:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1e864:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1e866:	d12d      	bne.n	1e8c4 <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1e868:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1e86c:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1e870:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1e874:	481f      	ldr	r0, [pc, #124]	; (1e8f4 <qspi_xfer+0x128>)
}
   1e876:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1e878:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1e87a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1e87e:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1e880:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1e882:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1e884:	bf0c      	ite	eq
   1e886:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1e88a:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e88e:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1e892:	bf0b      	itete	eq
   1e894:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1e898:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1e89c:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1e8a0:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1e8a4:	bf08      	it	eq
   1e8a6:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e8a8:	4911      	ldr	r1, [pc, #68]	; (1e8f0 <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1e8aa:	bf18      	it	ne
   1e8ac:	2304      	movne	r3, #4
   1e8ae:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e8b2:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e8b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e8b8:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1e8bc:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e8c0:	601a      	str	r2, [r3, #0]
}
   1e8c2:	e7d7      	b.n	1e874 <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1e8c4:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1e8c8:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1e8cc:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1e8d0:	e7d0      	b.n	1e874 <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1e8d2:	4809      	ldr	r0, [pc, #36]	; (1e8f8 <qspi_xfer+0x12c>)
   1e8d4:	e7cf      	b.n	1e876 <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1e8d6:	4809      	ldr	r0, [pc, #36]	; (1e8fc <qspi_xfer+0x130>)
   1e8d8:	e7cd      	b.n	1e876 <qspi_xfer+0xaa>
   1e8da:	bf00      	nop
   1e8dc:	2002f604 	.word	0x2002f604
   1e8e0:	000331a7 	.word	0x000331a7
   1e8e4:	0003316b 	.word	0x0003316b
   1e8e8:	0002e715 	.word	0x0002e715
   1e8ec:	000331d3 	.word	0x000331d3
   1e8f0:	4002b000 	.word	0x4002b000
   1e8f4:	0bad0000 	.word	0x0bad0000
   1e8f8:	0bad000a 	.word	0x0bad000a
   1e8fc:	0bad000b 	.word	0x0bad000b

0001e900 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1e900:	b538      	push	{r3, r4, r5, lr}
   1e902:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e904:	4d06      	ldr	r5, [pc, #24]	; (1e920 <qspi_ready_wait+0x20>)
   1e906:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1e90a:	b933      	cbnz	r3, 1e91a <qspi_ready_wait+0x1a>
   1e90c:	200a      	movs	r0, #10
   1e90e:	f00c fbd5 	bl	2b0bc <nrfx_busy_wait>
   1e912:	3c01      	subs	r4, #1
   1e914:	d1f7      	bne.n	1e906 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1e916:	4803      	ldr	r0, [pc, #12]	; (1e924 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1e918:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1e91a:	4803      	ldr	r0, [pc, #12]	; (1e928 <qspi_ready_wait+0x28>)
   1e91c:	e7fc      	b.n	1e918 <qspi_ready_wait+0x18>
   1e91e:	bf00      	nop
   1e920:	4002b000 	.word	0x4002b000
   1e924:	0bad0007 	.word	0x0bad0007
   1e928:	0bad0000 	.word	0x0bad0000

0001e92c <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1e92c:	4b08      	ldr	r3, [pc, #32]	; (1e950 <qspi_event_xfer_handle.constprop.0+0x24>)
   1e92e:	689a      	ldr	r2, [r3, #8]
   1e930:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1e932:	691a      	ldr	r2, [r3, #16]
   1e934:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1e936:	699a      	ldr	r2, [r3, #24]
   1e938:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1e93a:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1e93c:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1e93e:	b132      	cbz	r2, 1e94e <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1e940:	695a      	ldr	r2, [r3, #20]
   1e942:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1e944:	69da      	ldr	r2, [r3, #28]
   1e946:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1e948:	2200      	movs	r2, #0
   1e94a:	60da      	str	r2, [r3, #12]
   1e94c:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1e94e:	4770      	bx	lr
   1e950:	2002f604 	.word	0x2002f604

0001e954 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1e954:	b508      	push	{r3, lr}
    switch (port)
   1e956:	0943      	lsrs	r3, r0, #5
   1e958:	d00d      	beq.n	1e976 <nrf_gpio_cfg.constprop.0+0x22>
   1e95a:	2b01      	cmp	r3, #1
   1e95c:	d01e      	beq.n	1e99c <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e95e:	4914      	ldr	r1, [pc, #80]	; (1e9b0 <nrf_gpio_cfg.constprop.0+0x5c>)
   1e960:	4814      	ldr	r0, [pc, #80]	; (1e9b4 <nrf_gpio_cfg.constprop.0+0x60>)
   1e962:	f240 2347 	movw	r3, #583	; 0x247
   1e966:	4a14      	ldr	r2, [pc, #80]	; (1e9b8 <nrf_gpio_cfg.constprop.0+0x64>)
   1e968:	f008 fe43 	bl	275f2 <assert_print>
   1e96c:	f240 2147 	movw	r1, #583	; 0x247
   1e970:	4811      	ldr	r0, [pc, #68]	; (1e9b8 <nrf_gpio_cfg.constprop.0+0x64>)
   1e972:	f008 fe37 	bl	275e4 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1e976:	f04f 33ff 	mov.w	r3, #4294967295
   1e97a:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e97c:	07da      	lsls	r2, r3, #31
   1e97e:	d5ee      	bpl.n	1e95e <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1e980:	4a0e      	ldr	r2, [pc, #56]	; (1e9bc <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1e982:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1e986:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1e98a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1e98e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1e992:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1e996:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1e99a:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1e99c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1e9a0:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e9a4:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e9a6:	07db      	lsls	r3, r3, #31
   1e9a8:	d5d9      	bpl.n	1e95e <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1e9aa:	4a05      	ldr	r2, [pc, #20]	; (1e9c0 <nrf_gpio_cfg.constprop.0+0x6c>)
   1e9ac:	e7e9      	b.n	1e982 <nrf_gpio_cfg.constprop.0+0x2e>
   1e9ae:	bf00      	nop
   1e9b0:	000326ad 	.word	0x000326ad
   1e9b4:	0002e715 	.word	0x0002e715
   1e9b8:	0003267a 	.word	0x0003267a
   1e9bc:	40842500 	.word	0x40842500
   1e9c0:	40842800 	.word	0x40842800

0001e9c4 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1e9c4:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1e9c6:	4b0e      	ldr	r3, [pc, #56]	; (1ea00 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1e9c8:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1e9ca:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1e9ce:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1e9d2:	2807      	cmp	r0, #7
   1e9d4:	d813      	bhi.n	1e9fe <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1e9d6:	e8df f000 	tbb	[pc, r0]
   1e9da:	0f11      	.short	0x0f11
   1e9dc:	080a0b0d 	.word	0x080a0b0d
   1e9e0:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1e9e2:	0e10      	lsrs	r0, r2, #24
   1e9e4:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1e9e6:	0c10      	lsrs	r0, r2, #16
   1e9e8:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1e9ea:	0a10      	lsrs	r0, r2, #8
   1e9ec:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1e9ee:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1e9f0:	0e1a      	lsrs	r2, r3, #24
   1e9f2:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1e9f4:	0c1a      	lsrs	r2, r3, #16
   1e9f6:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1e9f8:	0a1a      	lsrs	r2, r3, #8
   1e9fa:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1e9fc:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1e9fe:	bd10      	pop	{r4, pc}
   1ea00:	4002b000 	.word	0x4002b000

0001ea04 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1ea04:	3802      	subs	r0, #2
   1ea06:	2807      	cmp	r0, #7
   1ea08:	d81f      	bhi.n	1ea4a <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1ea0a:	e8df f000 	tbb	[pc, r0]
   1ea0e:	2729      	.short	0x2729
   1ea10:	21231125 	.word	0x21231125
   1ea14:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1ea16:	79cb      	ldrb	r3, [r1, #7]
   1ea18:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1ea1a:	798a      	ldrb	r2, [r1, #6]
   1ea1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1ea20:	794a      	ldrb	r2, [r1, #5]
   1ea22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1ea26:	790a      	ldrb	r2, [r1, #4]
   1ea28:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1ea2a:	4a0e      	ldr	r2, [pc, #56]	; (1ea64 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1ea2c:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1ea30:	78cb      	ldrb	r3, [r1, #3]
   1ea32:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1ea34:	788a      	ldrb	r2, [r1, #2]
   1ea36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1ea3a:	784a      	ldrb	r2, [r1, #1]
   1ea3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1ea40:	780a      	ldrb	r2, [r1, #0]
   1ea42:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1ea44:	4a07      	ldr	r2, [pc, #28]	; (1ea64 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1ea46:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1ea4a:	4770      	bx	lr
    switch (length)
   1ea4c:	2300      	movs	r3, #0
   1ea4e:	e7e4      	b.n	1ea1a <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1ea50:	2300      	movs	r3, #0
   1ea52:	e7e5      	b.n	1ea20 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1ea54:	2300      	movs	r3, #0
   1ea56:	e7e6      	b.n	1ea26 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1ea58:	2300      	movs	r3, #0
   1ea5a:	e7eb      	b.n	1ea34 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1ea5c:	2300      	movs	r3, #0
   1ea5e:	e7ec      	b.n	1ea3a <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1ea60:	2300      	movs	r3, #0
   1ea62:	e7ed      	b.n	1ea40 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1ea64:	4002b000 	.word	0x4002b000

0001ea68 <nrfx_qspi_init>:
{
   1ea68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea6a:	460d      	mov	r5, r1
   1ea6c:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1ea6e:	4604      	mov	r4, r0
   1ea70:	b958      	cbnz	r0, 1ea8a <nrfx_qspi_init+0x22>
   1ea72:	496e      	ldr	r1, [pc, #440]	; (1ec2c <nrfx_qspi_init+0x1c4>)
   1ea74:	486e      	ldr	r0, [pc, #440]	; (1ec30 <nrfx_qspi_init+0x1c8>)
   1ea76:	f44f 7388 	mov.w	r3, #272	; 0x110
   1ea7a:	4a6e      	ldr	r2, [pc, #440]	; (1ec34 <nrfx_qspi_init+0x1cc>)
   1ea7c:	f008 fdb9 	bl	275f2 <assert_print>
   1ea80:	f44f 7188 	mov.w	r1, #272	; 0x110
   1ea84:	486b      	ldr	r0, [pc, #428]	; (1ec34 <nrfx_qspi_init+0x1cc>)
   1ea86:	f008 fdad 	bl	275e4 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1ea8a:	4f6b      	ldr	r7, [pc, #428]	; (1ec38 <nrfx_qspi_init+0x1d0>)
   1ea8c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1ea90:	2b00      	cmp	r3, #0
   1ea92:	f040 80c6 	bne.w	1ec22 <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1ea96:	7cc2      	ldrb	r2, [r0, #19]
   1ea98:	b112      	cbz	r2, 1eaa0 <nrfx_qspi_init+0x38>
   1ea9a:	7d03      	ldrb	r3, [r0, #20]
   1ea9c:	2b00      	cmp	r3, #0
   1ea9e:	d170      	bne.n	1eb82 <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1eaa0:	7920      	ldrb	r0, [r4, #4]
   1eaa2:	28ff      	cmp	r0, #255	; 0xff
   1eaa4:	f000 80bf 	beq.w	1ec26 <nrfx_qspi_init+0x1be>
   1eaa8:	7963      	ldrb	r3, [r4, #5]
   1eaaa:	2bff      	cmp	r3, #255	; 0xff
   1eaac:	f000 80bb 	beq.w	1ec26 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1eab0:	79a3      	ldrb	r3, [r4, #6]
   1eab2:	2bff      	cmp	r3, #255	; 0xff
   1eab4:	f000 80b7 	beq.w	1ec26 <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1eab8:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1eaba:	29ff      	cmp	r1, #255	; 0xff
   1eabc:	f000 80b3 	beq.w	1ec26 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1eac0:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1eac2:	f8df c178 	ldr.w	ip, [pc, #376]	; 1ec3c <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1eac6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1eaca:	4563      	cmp	r3, ip
   1eacc:	f040 80ab 	bne.w	1ec26 <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1ead0:	290e      	cmp	r1, #14
   1ead2:	f040 80a8 	bne.w	1ec26 <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1ead6:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1ead8:	2bff      	cmp	r3, #255	; 0xff
   1eada:	d002      	beq.n	1eae2 <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1eadc:	2b0f      	cmp	r3, #15
   1eade:	f040 80a2 	bne.w	1ec26 <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1eae2:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1eae4:	2bff      	cmp	r3, #255	; 0xff
   1eae6:	d002      	beq.n	1eaee <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1eae8:	2b10      	cmp	r3, #16
   1eaea:	f040 809c 	bne.w	1ec26 <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1eaee:	b9d2      	cbnz	r2, 1eb26 <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1eaf0:	2103      	movs	r1, #3
   1eaf2:	f7ff ff2f 	bl	1e954 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1eaf6:	2103      	movs	r1, #3
   1eaf8:	7960      	ldrb	r0, [r4, #5]
   1eafa:	f7ff ff2b 	bl	1e954 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1eafe:	2103      	movs	r1, #3
   1eb00:	79a0      	ldrb	r0, [r4, #6]
   1eb02:	f7ff ff27 	bl	1e954 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1eb06:	79e0      	ldrb	r0, [r4, #7]
   1eb08:	2103      	movs	r1, #3
   1eb0a:	f7ff ff23 	bl	1e954 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1eb0e:	7a20      	ldrb	r0, [r4, #8]
   1eb10:	28ff      	cmp	r0, #255	; 0xff
   1eb12:	d002      	beq.n	1eb1a <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1eb14:	2103      	movs	r1, #3
   1eb16:	f7ff ff1d 	bl	1e954 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1eb1a:	7a60      	ldrb	r0, [r4, #9]
   1eb1c:	28ff      	cmp	r0, #255	; 0xff
   1eb1e:	d002      	beq.n	1eb26 <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1eb20:	2103      	movs	r1, #3
   1eb22:	f7ff ff17 	bl	1e954 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1eb26:	7d23      	ldrb	r3, [r4, #20]
   1eb28:	bb5b      	cbnz	r3, 1eb82 <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1eb2a:	7923      	ldrb	r3, [r4, #4]
   1eb2c:	2bff      	cmp	r3, #255	; 0xff
   1eb2e:	bf14      	ite	ne
   1eb30:	461a      	movne	r2, r3
   1eb32:	f04f 32ff 	moveq.w	r2, #4294967295
   1eb36:	4b42      	ldr	r3, [pc, #264]	; (1ec40 <nrfx_qspi_init+0x1d8>)
   1eb38:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1eb3c:	7962      	ldrb	r2, [r4, #5]
   1eb3e:	2aff      	cmp	r2, #255	; 0xff
   1eb40:	bf08      	it	eq
   1eb42:	f04f 32ff 	moveq.w	r2, #4294967295
   1eb46:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1eb4a:	79a2      	ldrb	r2, [r4, #6]
   1eb4c:	2aff      	cmp	r2, #255	; 0xff
   1eb4e:	bf08      	it	eq
   1eb50:	f04f 32ff 	moveq.w	r2, #4294967295
   1eb54:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1eb58:	79e2      	ldrb	r2, [r4, #7]
   1eb5a:	2aff      	cmp	r2, #255	; 0xff
   1eb5c:	bf08      	it	eq
   1eb5e:	f04f 32ff 	moveq.w	r2, #4294967295
   1eb62:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1eb66:	7a22      	ldrb	r2, [r4, #8]
   1eb68:	2aff      	cmp	r2, #255	; 0xff
   1eb6a:	bf08      	it	eq
   1eb6c:	f04f 32ff 	moveq.w	r2, #4294967295
   1eb70:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1eb74:	7a62      	ldrb	r2, [r4, #9]
   1eb76:	2aff      	cmp	r2, #255	; 0xff
   1eb78:	bf08      	it	eq
   1eb7a:	f04f 32ff 	moveq.w	r2, #4294967295
   1eb7e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1eb82:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1eb84:	4a2e      	ldr	r2, [pc, #184]	; (1ec40 <nrfx_qspi_init+0x1d8>)
   1eb86:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1eb8a:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1eb8c:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1eb8e:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1eb90:	019b      	lsls	r3, r3, #6
   1eb92:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1eb96:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1eb98:	7b61      	ldrb	r1, [r4, #13]
   1eb9a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1eb9e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1eba2:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1eba4:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1eba8:	bbb1      	cbnz	r1, 1ec18 <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1ebaa:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1ebae:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1ebb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1ebb6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1ebba:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1ebbe:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1ebc0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1ebc4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1ebc8:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1ebca:	7be1      	ldrb	r1, [r4, #15]
   1ebcc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1ebd0:	7c21      	ldrb	r1, [r4, #16]
   1ebd2:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1ebd6:	7c61      	ldrb	r1, [r4, #17]
   1ebd8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1ebdc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ebe0:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1ebe2:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ebe6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1ebea:	2301      	movs	r3, #1
   1ebec:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1ebf0:	b115      	cbz	r5, 1ebf8 <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1ebf2:	202b      	movs	r0, #43	; 0x2b
   1ebf4:	f7f2 fa7c 	bl	110f0 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1ebf8:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ebfa:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1ebfc:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1ec00:	4b0f      	ldr	r3, [pc, #60]	; (1ec40 <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ec02:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1ec06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec0a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec0e:	601a      	str	r2, [r3, #0]
}
   1ec10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1ec14:	f7ff be74 	b.w	1e900 <qspi_ready_wait>
        regval &= ~(1 << 17);
   1ec18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1ec1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ec20:	e7c5      	b.n	1ebae <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1ec22:	4808      	ldr	r0, [pc, #32]	; (1ec44 <nrfx_qspi_init+0x1dc>)
}
   1ec24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ec26:	4808      	ldr	r0, [pc, #32]	; (1ec48 <nrfx_qspi_init+0x1e0>)
   1ec28:	e7fc      	b.n	1ec24 <nrfx_qspi_init+0x1bc>
   1ec2a:	bf00      	nop
   1ec2c:	0003307c 	.word	0x0003307c
   1ec30:	0002e715 	.word	0x0002e715
   1ec34:	0003316b 	.word	0x0003316b
   1ec38:	2002f604 	.word	0x2002f604
   1ec3c:	000d1211 	.word	0x000d1211
   1ec40:	4002b000 	.word	0x4002b000
   1ec44:	0bad0005 	.word	0x0bad0005
   1ec48:	0bad0004 	.word	0x0bad0004

0001ec4c <nrfx_qspi_cinstr_xfer>:
{
   1ec4c:	b570      	push	{r4, r5, r6, lr}
   1ec4e:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ec50:	4a26      	ldr	r2, [pc, #152]	; (1ecec <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1ec52:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ec54:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1ec58:	b95a      	cbnz	r2, 1ec72 <nrfx_qspi_cinstr_xfer+0x26>
   1ec5a:	4925      	ldr	r1, [pc, #148]	; (1ecf0 <nrfx_qspi_cinstr_xfer+0xa4>)
   1ec5c:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1ec60:	4a24      	ldr	r2, [pc, #144]	; (1ecf4 <nrfx_qspi_cinstr_xfer+0xa8>)
   1ec62:	4825      	ldr	r0, [pc, #148]	; (1ecf8 <nrfx_qspi_cinstr_xfer+0xac>)
   1ec64:	f008 fcc5 	bl	275f2 <assert_print>
   1ec68:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1ec6c:	4821      	ldr	r0, [pc, #132]	; (1ecf4 <nrfx_qspi_cinstr_xfer+0xa8>)
   1ec6e:	f008 fcb9 	bl	275e4 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1ec72:	2a01      	cmp	r2, #1
   1ec74:	d137      	bne.n	1ece6 <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec76:	2200      	movs	r2, #0
   1ec78:	4e20      	ldr	r6, [pc, #128]	; (1ecfc <nrfx_qspi_cinstr_xfer+0xb0>)
   1ec7a:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1ec7e:	b111      	cbz	r1, 1ec86 <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1ec80:	7840      	ldrb	r0, [r0, #1]
   1ec82:	f7ff febf 	bl	1ea04 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1ec86:	2301      	movs	r3, #1
   1ec88:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ec8c:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ec8e:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ec90:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ec92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1ec96:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ec98:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1ec9a:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ec9c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1eca0:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1eca2:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1eca6:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1eca8:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1ecac:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1ecb0:	f7ff fe26 	bl	1e900 <qspi_ready_wait>
   1ecb4:	4b12      	ldr	r3, [pc, #72]	; (1ed00 <nrfx_qspi_cinstr_xfer+0xb4>)
   1ecb6:	4298      	cmp	r0, r3
   1ecb8:	d10b      	bne.n	1ecd2 <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   1ecba:	792b      	ldrb	r3, [r5, #4]
   1ecbc:	b993      	cbnz	r3, 1ece4 <nrfx_qspi_cinstr_xfer+0x98>
   1ecbe:	4911      	ldr	r1, [pc, #68]	; (1ed04 <nrfx_qspi_cinstr_xfer+0xb8>)
   1ecc0:	f240 136b 	movw	r3, #363	; 0x16b
   1ecc4:	4a0b      	ldr	r2, [pc, #44]	; (1ecf4 <nrfx_qspi_cinstr_xfer+0xa8>)
   1ecc6:	480c      	ldr	r0, [pc, #48]	; (1ecf8 <nrfx_qspi_cinstr_xfer+0xac>)
   1ecc8:	f008 fc93 	bl	275f2 <assert_print>
   1eccc:	f240 116b 	movw	r1, #363	; 0x16b
   1ecd0:	e7cc      	b.n	1ec6c <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ecd2:	2300      	movs	r3, #0
   1ecd4:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   1ecd8:	b11c      	cbz	r4, 1ece2 <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   1ecda:	4621      	mov	r1, r4
   1ecdc:	7868      	ldrb	r0, [r5, #1]
   1ecde:	f7ff fe71 	bl	1e9c4 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   1ece2:	4809      	ldr	r0, [pc, #36]	; (1ed08 <nrfx_qspi_cinstr_xfer+0xbc>)
}
   1ece4:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   1ece6:	4809      	ldr	r0, [pc, #36]	; (1ed0c <nrfx_qspi_cinstr_xfer+0xc0>)
   1ece8:	e7fc      	b.n	1ece4 <nrfx_qspi_cinstr_xfer+0x98>
   1ecea:	bf00      	nop
   1ecec:	2002f604 	.word	0x2002f604
   1ecf0:	000331a7 	.word	0x000331a7
   1ecf4:	0003316b 	.word	0x0003316b
   1ecf8:	0002e715 	.word	0x0002e715
   1ecfc:	4002b000 	.word	0x4002b000
   1ed00:	0bad0007 	.word	0x0bad0007
   1ed04:	000331eb 	.word	0x000331eb
   1ed08:	0bad0000 	.word	0x0bad0000
   1ed0c:	0bad000b 	.word	0x0bad000b

0001ed10 <nrfx_qspi_mem_busy_check>:
{
   1ed10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   1ed12:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   1ed14:	4a0c      	ldr	r2, [pc, #48]	; (1ed48 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1ed16:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   1ed18:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1ed1a:	f10d 0207 	add.w	r2, sp, #7
   1ed1e:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   1ed20:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   1ed24:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   1ed28:	f7ff ff90 	bl	1ec4c <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   1ed2c:	4b07      	ldr	r3, [pc, #28]	; (1ed4c <nrfx_qspi_mem_busy_check+0x3c>)
   1ed2e:	4298      	cmp	r0, r3
   1ed30:	d106      	bne.n	1ed40 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   1ed32:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   1ed36:	f013 0f01 	tst.w	r3, #1
   1ed3a:	4b05      	ldr	r3, [pc, #20]	; (1ed50 <nrfx_qspi_mem_busy_check+0x40>)
   1ed3c:	bf18      	it	ne
   1ed3e:	4618      	movne	r0, r3
}
   1ed40:	b005      	add	sp, #20
   1ed42:	f85d fb04 	ldr.w	pc, [sp], #4
   1ed46:	bf00      	nop
   1ed48:	01000205 	.word	0x01000205
   1ed4c:	0bad0000 	.word	0x0bad0000
   1ed50:	0bad000b 	.word	0x0bad000b

0001ed54 <nrfx_qspi_uninit>:
{
   1ed54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ed58:	4e29      	ldr	r6, [pc, #164]	; (1ee00 <nrfx_qspi_uninit+0xac>)
   1ed5a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1ed5e:	b95b      	cbnz	r3, 1ed78 <nrfx_qspi_uninit+0x24>
   1ed60:	4928      	ldr	r1, [pc, #160]	; (1ee04 <nrfx_qspi_uninit+0xb0>)
   1ed62:	4829      	ldr	r0, [pc, #164]	; (1ee08 <nrfx_qspi_uninit+0xb4>)
   1ed64:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   1ed68:	4a28      	ldr	r2, [pc, #160]	; (1ee0c <nrfx_qspi_uninit+0xb8>)
   1ed6a:	f008 fc42 	bl	275f2 <assert_print>
   1ed6e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1ed72:	4826      	ldr	r0, [pc, #152]	; (1ee0c <nrfx_qspi_uninit+0xb8>)
   1ed74:	f008 fc36 	bl	275e4 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   1ed78:	202b      	movs	r0, #43	; 0x2b
   1ed7a:	f7f2 f9c7 	bl	1110c <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   1ed7e:	4b24      	ldr	r3, [pc, #144]	; (1ee10 <nrfx_qspi_uninit+0xbc>)
   1ed80:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   1ed84:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   1ed88:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   1ed8c:	bf04      	itt	eq
   1ed8e:	4a21      	ldreq	r2, [pc, #132]	; (1ee14 <nrfx_qspi_uninit+0xc0>)
   1ed90:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   1ed94:	2201      	movs	r2, #1
   1ed96:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ed9a:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   1ed9c:	2200      	movs	r2, #0
   1ed9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eda2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   1eda6:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   1edaa:	bb22      	cbnz	r2, 1edf6 <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   1edac:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   1edb0:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   1edb4:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   1edb6:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   1edba:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   1edbe:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   1edc2:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   1edc6:	f00c f9fc 	bl	2b1c2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   1edca:	fa5f f089 	uxtb.w	r0, r9
   1edce:	f00c f9f8 	bl	2b1c2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   1edd2:	fa5f f088 	uxtb.w	r0, r8
   1edd6:	f00c f9f4 	bl	2b1c2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   1edda:	b2f8      	uxtb	r0, r7
   1eddc:	f00c f9f1 	bl	2b1c2 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1ede0:	b2e8      	uxtb	r0, r5
   1ede2:	28ff      	cmp	r0, #255	; 0xff
   1ede4:	b2e4      	uxtb	r4, r4
   1ede6:	d001      	beq.n	1edec <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   1ede8:	f00c f9eb 	bl	2b1c2 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1edec:	2cff      	cmp	r4, #255	; 0xff
   1edee:	d002      	beq.n	1edf6 <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   1edf0:	4620      	mov	r0, r4
   1edf2:	f00c f9e6 	bl	2b1c2 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   1edf6:	2300      	movs	r3, #0
   1edf8:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   1edfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ee00:	2002f604 	.word	0x2002f604
   1ee04:	000331a7 	.word	0x000331a7
   1ee08:	0002e715 	.word	0x0002e715
   1ee0c:	0003316b 	.word	0x0003316b
   1ee10:	4002b000 	.word	0x4002b000
   1ee14:	00030100 	.word	0x00030100

0001ee18 <nrfx_qspi_erase>:
{
   1ee18:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ee1a:	4a1a      	ldr	r2, [pc, #104]	; (1ee84 <nrfx_qspi_erase+0x6c>)
   1ee1c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1ee20:	b95b      	cbnz	r3, 1ee3a <nrfx_qspi_erase+0x22>
   1ee22:	4919      	ldr	r1, [pc, #100]	; (1ee88 <nrfx_qspi_erase+0x70>)
   1ee24:	4819      	ldr	r0, [pc, #100]	; (1ee8c <nrfx_qspi_erase+0x74>)
   1ee26:	f44f 730a 	mov.w	r3, #552	; 0x228
   1ee2a:	4a19      	ldr	r2, [pc, #100]	; (1ee90 <nrfx_qspi_erase+0x78>)
   1ee2c:	f008 fbe1 	bl	275f2 <assert_print>
   1ee30:	f44f 710a 	mov.w	r1, #552	; 0x228
   1ee34:	4816      	ldr	r0, [pc, #88]	; (1ee90 <nrfx_qspi_erase+0x78>)
   1ee36:	f008 fbd5 	bl	275e4 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   1ee3a:	078c      	lsls	r4, r1, #30
   1ee3c:	d11e      	bne.n	1ee7c <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   1ee3e:	6814      	ldr	r4, [r2, #0]
   1ee40:	b10c      	cbz	r4, 1ee46 <nrfx_qspi_erase+0x2e>
   1ee42:	2b01      	cmp	r3, #1
   1ee44:	d11c      	bne.n	1ee80 <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   1ee46:	2304      	movs	r3, #4
   1ee48:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   1ee4c:	4b11      	ldr	r3, [pc, #68]	; (1ee94 <nrfx_qspi_erase+0x7c>)
   1ee4e:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ee52:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   1ee54:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ee58:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ee5c:	2101      	movs	r1, #1
   1ee5e:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   1ee60:	6810      	ldr	r0, [r2, #0]
   1ee62:	b940      	cbnz	r0, 1ee76 <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ee64:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1ee68:	2900      	cmp	r1, #0
   1ee6a:	d0fb      	beq.n	1ee64 <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ee6c:	2301      	movs	r3, #1
   1ee6e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   1ee72:	4809      	ldr	r0, [pc, #36]	; (1ee98 <nrfx_qspi_erase+0x80>)
}
   1ee74:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   1ee76:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   1ee7a:	e7fa      	b.n	1ee72 <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   1ee7c:	4807      	ldr	r0, [pc, #28]	; (1ee9c <nrfx_qspi_erase+0x84>)
   1ee7e:	e7f9      	b.n	1ee74 <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   1ee80:	4807      	ldr	r0, [pc, #28]	; (1eea0 <nrfx_qspi_erase+0x88>)
   1ee82:	e7f7      	b.n	1ee74 <nrfx_qspi_erase+0x5c>
   1ee84:	2002f604 	.word	0x2002f604
   1ee88:	000331a7 	.word	0x000331a7
   1ee8c:	0002e715 	.word	0x0002e715
   1ee90:	0003316b 	.word	0x0003316b
   1ee94:	4002b000 	.word	0x4002b000
   1ee98:	0bad0000 	.word	0x0bad0000
   1ee9c:	0bad000a 	.word	0x0bad000a
   1eea0:	0bad000b 	.word	0x0bad000b

0001eea4 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   1eea4:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1eea6:	4b17      	ldr	r3, [pc, #92]	; (1ef04 <nrfx_qspi_irq_handler+0x60>)
   1eea8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1eeac:	b1e2      	cbz	r2, 1eee8 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eeae:	2200      	movs	r2, #0
    switch (m_cb.state)
   1eeb0:	4c15      	ldr	r4, [pc, #84]	; (1ef08 <nrfx_qspi_irq_handler+0x64>)
   1eeb2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1eeb6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   1eeba:	2a03      	cmp	r2, #3
   1eebc:	d015      	beq.n	1eeea <nrfx_qspi_irq_handler+0x46>
   1eebe:	2a04      	cmp	r2, #4
   1eec0:	d015      	beq.n	1eeee <nrfx_qspi_irq_handler+0x4a>
   1eec2:	2a02      	cmp	r2, #2
   1eec4:	d104      	bne.n	1eed0 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   1eec6:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1eec8:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   1eecc:	f7ff fd2e 	bl	1e92c <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   1eed0:	68a3      	ldr	r3, [r4, #8]
   1eed2:	b913      	cbnz	r3, 1eeda <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   1eed4:	2301      	movs	r3, #1
   1eed6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   1eeda:	e9d4 3100 	ldrd	r3, r1, [r4]
   1eede:	2000      	movs	r0, #0
   1eee0:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   1eee2:	2300      	movs	r3, #0
   1eee4:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   1eee8:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   1eeea:	2302      	movs	r3, #2
   1eeec:	e7ec      	b.n	1eec8 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   1eeee:	2203      	movs	r2, #3
   1eef0:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   1eef4:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   1eef8:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   1eefa:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1eefe:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1ef02:	e7e5      	b.n	1eed0 <nrfx_qspi_irq_handler+0x2c>
   1ef04:	4002b000 	.word	0x4002b000
   1ef08:	2002f604 	.word	0x2002f604

0001ef0c <nrf_gpio_pin_port_decode>:
{
   1ef0c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ef0e:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1ef10:	095a      	lsrs	r2, r3, #5
   1ef12:	d00d      	beq.n	1ef30 <nrf_gpio_pin_port_decode+0x24>
   1ef14:	2a01      	cmp	r2, #1
   1ef16:	d013      	beq.n	1ef40 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ef18:	490e      	ldr	r1, [pc, #56]	; (1ef54 <nrf_gpio_pin_port_decode+0x48>)
   1ef1a:	480f      	ldr	r0, [pc, #60]	; (1ef58 <nrf_gpio_pin_port_decode+0x4c>)
   1ef1c:	f240 2347 	movw	r3, #583	; 0x247
   1ef20:	4a0e      	ldr	r2, [pc, #56]	; (1ef5c <nrf_gpio_pin_port_decode+0x50>)
   1ef22:	f008 fb66 	bl	275f2 <assert_print>
   1ef26:	f240 2147 	movw	r1, #583	; 0x247
   1ef2a:	480c      	ldr	r0, [pc, #48]	; (1ef5c <nrf_gpio_pin_port_decode+0x50>)
   1ef2c:	f008 fb5a 	bl	275e4 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1ef30:	f04f 32ff 	mov.w	r2, #4294967295
   1ef34:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ef38:	07d9      	lsls	r1, r3, #31
   1ef3a:	d5ed      	bpl.n	1ef18 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1ef3c:	4808      	ldr	r0, [pc, #32]	; (1ef60 <nrf_gpio_pin_port_decode+0x54>)
   1ef3e:	e008      	b.n	1ef52 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1ef40:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1ef44:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1ef48:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ef4a:	07d2      	lsls	r2, r2, #31
   1ef4c:	d5e4      	bpl.n	1ef18 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1ef4e:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1ef50:	4804      	ldr	r0, [pc, #16]	; (1ef64 <nrf_gpio_pin_port_decode+0x58>)
}
   1ef52:	bd08      	pop	{r3, pc}
   1ef54:	000326ad 	.word	0x000326ad
   1ef58:	0002e715 	.word	0x0002e715
   1ef5c:	0003267a 	.word	0x0003267a
   1ef60:	40842500 	.word	0x40842500
   1ef64:	40842800 	.word	0x40842800

0001ef68 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   1ef68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ef6c:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   1ef6e:	460c      	mov	r4, r1
   1ef70:	b959      	cbnz	r1, 1ef8a <nrfx_spim_init+0x22>
   1ef72:	498d      	ldr	r1, [pc, #564]	; (1f1a8 <nrfx_spim_init+0x240>)
   1ef74:	488d      	ldr	r0, [pc, #564]	; (1f1ac <nrfx_spim_init+0x244>)
   1ef76:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   1ef7a:	4a8d      	ldr	r2, [pc, #564]	; (1f1b0 <nrfx_spim_init+0x248>)
   1ef7c:	f008 fb39 	bl	275f2 <assert_print>
   1ef80:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   1ef84:	488a      	ldr	r0, [pc, #552]	; (1f1b0 <nrfx_spim_init+0x248>)
   1ef86:	f008 fb2d 	bl	275e4 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ef8a:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ef8c:	4d89      	ldr	r5, [pc, #548]	; (1f1b4 <nrfx_spim_init+0x24c>)
   1ef8e:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   1ef92:	7f09      	ldrb	r1, [r1, #28]
   1ef94:	2900      	cmp	r1, #0
   1ef96:	f040 8100 	bne.w	1f19a <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   1ef9a:	2f00      	cmp	r7, #0
   1ef9c:	f040 80ff 	bne.w	1f19e <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1efa0:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1efa4:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   1efa6:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1efa8:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1efac:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1efae:	d027      	beq.n	1f000 <nrfx_spim_init+0x98>
   1efb0:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   1efb4:	d124      	bne.n	1f000 <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1efb6:	b119      	cbz	r1, 1efc0 <nrfx_spim_init+0x58>
   1efb8:	7d20      	ldrb	r0, [r4, #20]
   1efba:	2800      	cmp	r0, #0
   1efbc:	f040 80d5 	bne.w	1f16a <nrfx_spim_init+0x202>
   1efc0:	487d      	ldr	r0, [pc, #500]	; (1f1b8 <nrfx_spim_init+0x250>)
   1efc2:	4581      	cmp	r9, r0
   1efc4:	d11c      	bne.n	1f000 <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1efc6:	7820      	ldrb	r0, [r4, #0]
   1efc8:	28ff      	cmp	r0, #255	; 0xff
   1efca:	d002      	beq.n	1efd2 <nrfx_spim_init+0x6a>
   1efcc:	2808      	cmp	r0, #8
   1efce:	f040 80e8 	bne.w	1f1a2 <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1efd2:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   1efd4:	28ff      	cmp	r0, #255	; 0xff
   1efd6:	d002      	beq.n	1efde <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   1efd8:	280b      	cmp	r0, #11
   1efda:	f040 80e2 	bne.w	1f1a2 <nrfx_spim_init+0x23a>
   1efde:	2eff      	cmp	r6, #255	; 0xff
   1efe0:	d002      	beq.n	1efe8 <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1efe2:	2e0c      	cmp	r6, #12
   1efe4:	f040 80dd 	bne.w	1f1a2 <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1efe8:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   1efea:	28ff      	cmp	r0, #255	; 0xff
   1efec:	d002      	beq.n	1eff4 <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1efee:	2809      	cmp	r0, #9
   1eff0:	f040 80d7 	bne.w	1f1a2 <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1eff4:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   1eff6:	28ff      	cmp	r0, #255	; 0xff
   1eff8:	d002      	beq.n	1f000 <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   1effa:	280a      	cmp	r0, #10
   1effc:	f040 80d1 	bne.w	1f1a2 <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1f000:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1f004:	7fab      	ldrb	r3, [r5, #30]
   1f006:	f361 0300 	bfi	r3, r1, #0, #1
   1f00a:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   1f00c:	7922      	ldrb	r2, [r4, #4]
   1f00e:	b2db      	uxtb	r3, r3
   1f010:	f362 0341 	bfi	r3, r2, #1, #1
   1f014:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   1f016:	7c62      	ldrb	r2, [r4, #17]
   1f018:	b2db      	uxtb	r3, r3
   1f01a:	f362 0382 	bfi	r3, r2, #2, #1
   1f01e:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   1f020:	78e3      	ldrb	r3, [r4, #3]
   1f022:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   1f024:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1f026:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   1f02a:	2b00      	cmp	r3, #0
   1f02c:	d142      	bne.n	1f0b4 <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   1f02e:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   1f030:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   1f032:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   1f036:	7b23      	ldrb	r3, [r4, #12]
   1f038:	bf08      	it	eq
   1f03a:	2703      	moveq	r7, #3
   1f03c:	2b01      	cmp	r3, #1
   1f03e:	f200 8096 	bhi.w	1f16e <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   1f042:	f00c f8cb 	bl	2b1dc <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1f046:	2300      	movs	r3, #0
   1f048:	9700      	str	r7, [sp, #0]
   1f04a:	7820      	ldrb	r0, [r4, #0]
   1f04c:	461a      	mov	r2, r3
   1f04e:	2101      	movs	r1, #1
   1f050:	f00c f8ec 	bl	2b22c <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1f054:	7860      	ldrb	r0, [r4, #1]
   1f056:	28ff      	cmp	r0, #255	; 0xff
   1f058:	d008      	beq.n	1f06c <nrfx_spim_init+0x104>
   1f05a:	f00c f8bf 	bl	2b1dc <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   1f05e:	2201      	movs	r2, #1
   1f060:	9700      	str	r7, [sp, #0]
   1f062:	2300      	movs	r3, #0
   1f064:	4611      	mov	r1, r2
   1f066:	7860      	ldrb	r0, [r4, #1]
   1f068:	f00c f8e0 	bl	2b22c <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1f06c:	78a0      	ldrb	r0, [r4, #2]
   1f06e:	28ff      	cmp	r0, #255	; 0xff
   1f070:	d005      	beq.n	1f07e <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   1f072:	2200      	movs	r2, #0
   1f074:	9700      	str	r7, [sp, #0]
   1f076:	4611      	mov	r1, r2
   1f078:	7ba3      	ldrb	r3, [r4, #14]
   1f07a:	f00c f8d7 	bl	2b22c <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1f07e:	78e0      	ldrb	r0, [r4, #3]
   1f080:	28ff      	cmp	r0, #255	; 0xff
   1f082:	d00b      	beq.n	1f09c <nrfx_spim_init+0x134>
    if (value == 0)
   1f084:	7923      	ldrb	r3, [r4, #4]
   1f086:	2b00      	cmp	r3, #0
   1f088:	d074      	beq.n	1f174 <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   1f08a:	f00c f8a7 	bl	2b1dc <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   1f08e:	2201      	movs	r2, #1
   1f090:	9700      	str	r7, [sp, #0]
   1f092:	2300      	movs	r3, #0
   1f094:	4611      	mov	r1, r2
   1f096:	78e0      	ldrb	r0, [r4, #3]
   1f098:	f00c f8c8 	bl	2b22c <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1f09c:	7be0      	ldrb	r0, [r4, #15]
   1f09e:	28ff      	cmp	r0, #255	; 0xff
   1f0a0:	d008      	beq.n	1f0b4 <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   1f0a2:	f00c f8a7 	bl	2b1f4 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   1f0a6:	2201      	movs	r2, #1
   1f0a8:	9700      	str	r7, [sp, #0]
   1f0aa:	2300      	movs	r3, #0
   1f0ac:	4611      	mov	r1, r2
   1f0ae:	7be0      	ldrb	r0, [r4, #15]
   1f0b0:	f00c f8bc 	bl	2b22c <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1f0b4:	7d23      	ldrb	r3, [r4, #20]
   1f0b6:	bb6b      	cbnz	r3, 1f114 <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1f0b8:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1f0ba:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1f0bc:	2bff      	cmp	r3, #255	; 0xff
   1f0be:	bf18      	it	ne
   1f0c0:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1f0c2:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1f0c4:	bf08      	it	eq
   1f0c6:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1f0ca:	2bff      	cmp	r3, #255	; 0xff
   1f0cc:	bf08      	it	eq
   1f0ce:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   1f0d2:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1f0d6:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1f0da:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1f0de:	f898 3004 	ldrb.w	r3, [r8, #4]
   1f0e2:	b9bb      	cbnz	r3, 1f114 <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   1f0e4:	78e3      	ldrb	r3, [r4, #3]
   1f0e6:	2bff      	cmp	r3, #255	; 0xff
   1f0e8:	d047      	beq.n	1f17a <nrfx_spim_init+0x212>
   1f0ea:	7c62      	ldrb	r2, [r4, #17]
   1f0ec:	2a00      	cmp	r2, #0
   1f0ee:	d044      	beq.n	1f17a <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   1f0f0:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   1f0f2:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   1f0f4:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1f0f8:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1f0fc:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1f100:	f898 3004 	ldrb.w	r3, [r8, #4]
   1f104:	b933      	cbnz	r3, 1f114 <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1f106:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   1f108:	2bff      	cmp	r3, #255	; 0xff
   1f10a:	bf08      	it	eq
   1f10c:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   1f110:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   1f114:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   1f116:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1f11a:	68a3      	ldr	r3, [r4, #8]
   1f11c:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1f120:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1f122:	7b22      	ldrb	r2, [r4, #12]
   1f124:	3b00      	subs	r3, #0
   1f126:	bf18      	it	ne
   1f128:	2301      	movne	r3, #1
    switch (spi_mode)
   1f12a:	2a02      	cmp	r2, #2
   1f12c:	d02f      	beq.n	1f18e <nrfx_spim_init+0x226>
   1f12e:	2a03      	cmp	r2, #3
   1f130:	d030      	beq.n	1f194 <nrfx_spim_init+0x22c>
   1f132:	2a01      	cmp	r2, #1
   1f134:	d101      	bne.n	1f13a <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1f136:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1f13a:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1f13e:	79a3      	ldrb	r3, [r4, #6]
   1f140:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1f144:	2307      	movs	r3, #7
   1f146:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   1f14a:	682b      	ldr	r3, [r5, #0]
   1f14c:	b12b      	cbz	r3, 1f15a <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1f14e:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1f152:	f340 3007 	sbfx	r0, r0, #12, #8
   1f156:	f7f1 ffcb 	bl	110f0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1f15a:	2300      	movs	r3, #0
   1f15c:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f15e:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1f160:	4816      	ldr	r0, [pc, #88]	; (1f1bc <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f162:	772b      	strb	r3, [r5, #28]
}
   1f164:	b003      	add	sp, #12
   1f166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   1f16a:	4601      	mov	r1, r0
   1f16c:	e748      	b.n	1f000 <nrfx_spim_init+0x98>
   1f16e:	f00c f841 	bl	2b1f4 <nrf_gpio_pin_set>
   1f172:	e768      	b.n	1f046 <nrfx_spim_init+0xde>
   1f174:	f00c f83e 	bl	2b1f4 <nrf_gpio_pin_set>
   1f178:	e789      	b.n	1f08e <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   1f17a:	f04f 33ff 	mov.w	r3, #4294967295
   1f17e:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1f182:	2300      	movs	r3, #0
   1f184:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1f188:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   1f18c:	e7b8      	b.n	1f100 <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1f18e:	f043 0304 	orr.w	r3, r3, #4
        break;
   1f192:	e7d2      	b.n	1f13a <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1f194:	f043 0306 	orr.w	r3, r3, #6
        break;
   1f198:	e7cf      	b.n	1f13a <nrfx_spim_init+0x1d2>
        return err_code;
   1f19a:	4809      	ldr	r0, [pc, #36]	; (1f1c0 <nrfx_spim_init+0x258>)
   1f19c:	e7e2      	b.n	1f164 <nrfx_spim_init+0x1fc>
        return err_code;
   1f19e:	4809      	ldr	r0, [pc, #36]	; (1f1c4 <nrfx_spim_init+0x25c>)
   1f1a0:	e7e0      	b.n	1f164 <nrfx_spim_init+0x1fc>
            return err_code;
   1f1a2:	4809      	ldr	r0, [pc, #36]	; (1f1c8 <nrfx_spim_init+0x260>)
   1f1a4:	e7de      	b.n	1f164 <nrfx_spim_init+0x1fc>
   1f1a6:	bf00      	nop
   1f1a8:	0003307c 	.word	0x0003307c
   1f1ac:	0002e715 	.word	0x0002e715
   1f1b0:	000331fd 	.word	0x000331fd
   1f1b4:	2002f638 	.word	0x2002f638
   1f1b8:	4000a000 	.word	0x4000a000
   1f1bc:	0bad0000 	.word	0x0bad0000
   1f1c0:	0bad0005 	.word	0x0bad0005
   1f1c4:	0bad0003 	.word	0x0bad0003
   1f1c8:	0bad0004 	.word	0x0bad0004

0001f1cc <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   1f1cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f1d0:	4d2e      	ldr	r5, [pc, #184]	; (1f28c <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f1d2:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   1f1d6:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f1d8:	ea4f 1648 	mov.w	r6, r8, lsl #5
   1f1dc:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   1f1e0:	f898 301c 	ldrb.w	r3, [r8, #28]
   1f1e4:	b95b      	cbnz	r3, 1f1fe <nrfx_spim_uninit+0x32>
   1f1e6:	492a      	ldr	r1, [pc, #168]	; (1f290 <nrfx_spim_uninit+0xc4>)
   1f1e8:	482a      	ldr	r0, [pc, #168]	; (1f294 <nrfx_spim_uninit+0xc8>)
   1f1ea:	f240 230f 	movw	r3, #527	; 0x20f
   1f1ee:	4a2a      	ldr	r2, [pc, #168]	; (1f298 <nrfx_spim_uninit+0xcc>)
   1f1f0:	f008 f9ff 	bl	275f2 <assert_print>
   1f1f4:	f240 210f 	movw	r1, #527	; 0x20f
   1f1f8:	4827      	ldr	r0, [pc, #156]	; (1f298 <nrfx_spim_uninit+0xcc>)
   1f1fa:	f008 f9f3 	bl	275e4 <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1f1fe:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1f200:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   1f202:	b1cb      	cbz	r3, 1f238 <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1f204:	f344 3007 	sbfx	r0, r4, #12, #8
   1f208:	f7f1 ff80 	bl	1110c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1f20c:	4b23      	ldr	r3, [pc, #140]	; (1f29c <nrfx_spim_uninit+0xd0>)
   1f20e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   1f212:	f898 301d 	ldrb.w	r3, [r8, #29]
   1f216:	b17b      	cbz	r3, 1f238 <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f218:	2301      	movs	r3, #1
   1f21a:	f04f 0864 	mov.w	r8, #100	; 0x64
   1f21e:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f220:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1f224:	b92b      	cbnz	r3, 1f232 <nrfx_spim_uninit+0x66>
   1f226:	2001      	movs	r0, #1
   1f228:	f00b ff48 	bl	2b0bc <nrfx_busy_wait>
   1f22c:	f1b8 0801 	subs.w	r8, r8, #1
   1f230:	d1f6      	bne.n	1f220 <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   1f232:	2200      	movs	r2, #0
   1f234:	19ab      	adds	r3, r5, r6
   1f236:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1f238:	2300      	movs	r3, #0
   1f23a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1f23e:	19ab      	adds	r3, r5, r6
   1f240:	7f9b      	ldrb	r3, [r3, #30]
   1f242:	07db      	lsls	r3, r3, #31
   1f244:	d41b      	bmi.n	1f27e <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   1f246:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1f24a:	f00c f80e 	bl	2b26a <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1f24e:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1f252:	f00c f80a 	bl	2b26a <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   1f256:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1f25a:	f00c f806 	bl	2b26a <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1f25e:	793b      	ldrb	r3, [r7, #4]
   1f260:	b91b      	cbnz	r3, 1f26a <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   1f262:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   1f266:	f00c f800 	bl	2b26a <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1f26a:	19ab      	adds	r3, r5, r6
   1f26c:	7fd8      	ldrb	r0, [r3, #31]
   1f26e:	28ff      	cmp	r0, #255	; 0xff
   1f270:	d005      	beq.n	1f27e <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   1f272:	2300      	movs	r3, #0
   1f274:	2201      	movs	r2, #1
   1f276:	4619      	mov	r1, r3
   1f278:	9300      	str	r3, [sp, #0]
   1f27a:	f00b ffd7 	bl	2b22c <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1f27e:	2300      	movs	r3, #0
   1f280:	4435      	add	r5, r6
   1f282:	772b      	strb	r3, [r5, #28]
}
   1f284:	b002      	add	sp, #8
   1f286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f28a:	bf00      	nop
   1f28c:	2002f638 	.word	0x2002f638
   1f290:	00033239 	.word	0x00033239
   1f294:	0002e715 	.word	0x0002e715
   1f298:	000331fd 	.word	0x000331fd
   1f29c:	00080152 	.word	0x00080152

0001f2a0 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1f2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f2a4:	4e60      	ldr	r6, [pc, #384]	; (1f428 <nrfx_spim_xfer+0x188>)
   1f2a6:	7903      	ldrb	r3, [r0, #4]
{
   1f2a8:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f2aa:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f2ae:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   1f2b2:	4607      	mov	r7, r0
   1f2b4:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1f2b6:	b95a      	cbnz	r2, 1f2d0 <nrfx_spim_xfer+0x30>
   1f2b8:	495c      	ldr	r1, [pc, #368]	; (1f42c <nrfx_spim_xfer+0x18c>)
   1f2ba:	f240 23de 	movw	r3, #734	; 0x2de
   1f2be:	4a5c      	ldr	r2, [pc, #368]	; (1f430 <nrfx_spim_xfer+0x190>)
   1f2c0:	485c      	ldr	r0, [pc, #368]	; (1f434 <nrfx_spim_xfer+0x194>)
   1f2c2:	f008 f996 	bl	275f2 <assert_print>
   1f2c6:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   1f2ca:	4859      	ldr	r0, [pc, #356]	; (1f430 <nrfx_spim_xfer+0x190>)
   1f2cc:	f008 f98a 	bl	275e4 <assert_post_action>
   1f2d0:	680a      	ldr	r2, [r1, #0]
   1f2d2:	b95a      	cbnz	r2, 1f2ec <nrfx_spim_xfer+0x4c>
   1f2d4:	684a      	ldr	r2, [r1, #4]
   1f2d6:	b14a      	cbz	r2, 1f2ec <nrfx_spim_xfer+0x4c>
   1f2d8:	4957      	ldr	r1, [pc, #348]	; (1f438 <nrfx_spim_xfer+0x198>)
   1f2da:	f240 23df 	movw	r3, #735	; 0x2df
   1f2de:	4a54      	ldr	r2, [pc, #336]	; (1f430 <nrfx_spim_xfer+0x190>)
   1f2e0:	4854      	ldr	r0, [pc, #336]	; (1f434 <nrfx_spim_xfer+0x194>)
   1f2e2:	f008 f986 	bl	275f2 <assert_print>
   1f2e6:	f240 21df 	movw	r1, #735	; 0x2df
   1f2ea:	e7ee      	b.n	1f2ca <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   1f2ec:	68a2      	ldr	r2, [r4, #8]
   1f2ee:	b96a      	cbnz	r2, 1f30c <nrfx_spim_xfer+0x6c>
   1f2f0:	68e2      	ldr	r2, [r4, #12]
   1f2f2:	2a00      	cmp	r2, #0
   1f2f4:	f000 8094 	beq.w	1f420 <nrfx_spim_xfer+0x180>
   1f2f8:	4950      	ldr	r1, [pc, #320]	; (1f43c <nrfx_spim_xfer+0x19c>)
   1f2fa:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   1f2fe:	4a4c      	ldr	r2, [pc, #304]	; (1f430 <nrfx_spim_xfer+0x190>)
   1f300:	484c      	ldr	r0, [pc, #304]	; (1f434 <nrfx_spim_xfer+0x194>)
   1f302:	f008 f976 	bl	275f2 <assert_print>
   1f306:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   1f30a:	e7de      	b.n	1f2ca <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1f30c:	b93b      	cbnz	r3, 1f31e <nrfx_spim_xfer+0x7e>
   1f30e:	68e3      	ldr	r3, [r4, #12]
   1f310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1f314:	d203      	bcs.n	1f31e <nrfx_spim_xfer+0x7e>
   1f316:	6863      	ldr	r3, [r4, #4]
   1f318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1f31c:	d309      	bcc.n	1f332 <nrfx_spim_xfer+0x92>
   1f31e:	4948      	ldr	r1, [pc, #288]	; (1f440 <nrfx_spim_xfer+0x1a0>)
   1f320:	f240 23e1 	movw	r3, #737	; 0x2e1
   1f324:	4a42      	ldr	r2, [pc, #264]	; (1f430 <nrfx_spim_xfer+0x190>)
   1f326:	4843      	ldr	r0, [pc, #268]	; (1f434 <nrfx_spim_xfer+0x194>)
   1f328:	f008 f963 	bl	275f2 <assert_print>
   1f32c:	f240 21e1 	movw	r1, #737	; 0x2e1
   1f330:	e7cb      	b.n	1f2ca <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   1f332:	f015 0908 	ands.w	r9, r5, #8
   1f336:	d00f      	beq.n	1f358 <nrfx_spim_xfer+0xb8>
   1f338:	7fb3      	ldrb	r3, [r6, #30]
   1f33a:	075b      	lsls	r3, r3, #29
   1f33c:	d40c      	bmi.n	1f358 <nrfx_spim_xfer+0xb8>
   1f33e:	7ff3      	ldrb	r3, [r6, #31]
   1f340:	2bff      	cmp	r3, #255	; 0xff
   1f342:	d009      	beq.n	1f358 <nrfx_spim_xfer+0xb8>
   1f344:	493f      	ldr	r1, [pc, #252]	; (1f444 <nrfx_spim_xfer+0x1a4>)
   1f346:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   1f34a:	4a39      	ldr	r2, [pc, #228]	; (1f430 <nrfx_spim_xfer+0x190>)
   1f34c:	4839      	ldr	r0, [pc, #228]	; (1f434 <nrfx_spim_xfer+0x194>)
   1f34e:	f008 f950 	bl	275f2 <assert_print>
   1f352:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   1f356:	e7b8      	b.n	1f2ca <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1f358:	7f73      	ldrb	r3, [r6, #29]
   1f35a:	2b00      	cmp	r3, #0
   1f35c:	d15e      	bne.n	1f41c <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   1f35e:	6833      	ldr	r3, [r6, #0]
   1f360:	b123      	cbz	r3, 1f36c <nrfx_spim_xfer+0xcc>
   1f362:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   1f366:	bf04      	itt	eq
   1f368:	2301      	moveq	r3, #1
   1f36a:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1f36c:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1f448 <nrfx_spim_xfer+0x1a8>
   1f370:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1f374:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   1f378:	2101      	movs	r1, #1
   1f37a:	4640      	mov	r0, r8
   1f37c:	f00b ff46 	bl	2b20c <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1f380:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   1f382:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1f384:	b121      	cbz	r1, 1f390 <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1f386:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   1f38a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1f38e:	d106      	bne.n	1f39e <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1f390:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1f392:	b14a      	cbz	r2, 1f3a8 <nrfx_spim_xfer+0x108>
   1f394:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1f398:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1f39c:	d004      	beq.n	1f3a8 <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   1f39e:	2300      	movs	r3, #0
        return err_code;
   1f3a0:	482a      	ldr	r0, [pc, #168]	; (1f44c <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   1f3a2:	7773      	strb	r3, [r6, #29]
}
   1f3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1f3a8:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f3aa:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f3ae:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1f3b2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   1f3b6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1f3ba:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f3be:	2200      	movs	r2, #0
   1f3c0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1f3c4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1f3c8:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1f3cc:	bf18      	it	ne
   1f3ce:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1f3d0:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1f3d4:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1f3d8:	bf18      	it	ne
   1f3da:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1f3dc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   1f3e0:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1f3e2:	f1b9 0f00 	cmp.w	r9, #0
   1f3e6:	d006      	beq.n	1f3f6 <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   1f3e8:	b96a      	cbnz	r2, 1f406 <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   1f3ea:	2100      	movs	r1, #0
   1f3ec:	4640      	mov	r0, r8
   1f3ee:	f00b ff0d 	bl	2b20c <set_ss_pin_state>
    return err_code;
   1f3f2:	4817      	ldr	r0, [pc, #92]	; (1f450 <nrfx_spim_xfer+0x1b0>)
   1f3f4:	e7d6      	b.n	1f3a4 <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f3f6:	2101      	movs	r1, #1
   1f3f8:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   1f3fa:	b922      	cbnz	r2, 1f406 <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f3fc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1f400:	2a00      	cmp	r2, #0
   1f402:	d0fb      	beq.n	1f3fc <nrfx_spim_xfer+0x15c>
   1f404:	e7f1      	b.n	1f3ea <nrfx_spim_xfer+0x14a>
    if (!enable)
   1f406:	f015 0f04 	tst.w	r5, #4
   1f40a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f40e:	d002      	beq.n	1f416 <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   1f410:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f414:	e7ed      	b.n	1f3f2 <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   1f416:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f41a:	e7ea      	b.n	1f3f2 <nrfx_spim_xfer+0x152>
        return err_code;
   1f41c:	480d      	ldr	r0, [pc, #52]	; (1f454 <nrfx_spim_xfer+0x1b4>)
   1f41e:	e7c1      	b.n	1f3a4 <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   1f420:	2b00      	cmp	r3, #0
   1f422:	f43f af78 	beq.w	1f316 <nrfx_spim_xfer+0x76>
   1f426:	e77a      	b.n	1f31e <nrfx_spim_xfer+0x7e>
   1f428:	2002f638 	.word	0x2002f638
   1f42c:	00033239 	.word	0x00033239
   1f430:	000331fd 	.word	0x000331fd
   1f434:	0002e715 	.word	0x0002e715
   1f438:	00033265 	.word	0x00033265
   1f43c:	000332ac 	.word	0x000332ac
   1f440:	000332f3 	.word	0x000332f3
   1f444:	00033397 	.word	0x00033397
   1f448:	2002f644 	.word	0x2002f644
   1f44c:	0bad000a 	.word	0x0bad000a
   1f450:	0bad0000 	.word	0x0bad0000
   1f454:	0bad000b 	.word	0x0bad000b

0001f458 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   1f458:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f45a:	4b13      	ldr	r3, [pc, #76]	; (1f4a8 <nrfx_spim_4_irq_handler+0x50>)
   1f45c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1f460:	b302      	cbz	r2, 1f4a4 <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f462:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   1f464:	4c11      	ldr	r4, [pc, #68]	; (1f4ac <nrfx_spim_4_irq_handler+0x54>)
   1f466:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   1f46a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   1f46e:	6823      	ldr	r3, [r4, #0]
   1f470:	b95b      	cbnz	r3, 1f48a <nrfx_spim_4_irq_handler+0x32>
   1f472:	490f      	ldr	r1, [pc, #60]	; (1f4b0 <nrfx_spim_4_irq_handler+0x58>)
   1f474:	480f      	ldr	r0, [pc, #60]	; (1f4b4 <nrfx_spim_4_irq_handler+0x5c>)
   1f476:	f240 333b 	movw	r3, #827	; 0x33b
   1f47a:	4a0f      	ldr	r2, [pc, #60]	; (1f4b8 <nrfx_spim_4_irq_handler+0x60>)
   1f47c:	f008 f8b9 	bl	275f2 <assert_print>
   1f480:	f240 313b 	movw	r1, #827	; 0x33b
   1f484:	480c      	ldr	r0, [pc, #48]	; (1f4b8 <nrfx_spim_4_irq_handler+0x60>)
   1f486:	f008 f8ad 	bl	275e4 <assert_post_action>
    set_ss_pin_state(p_cb, false);
   1f48a:	4629      	mov	r1, r5
   1f48c:	4620      	mov	r0, r4
   1f48e:	f00b febd 	bl	2b20c <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f492:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   1f496:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1f498:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f49a:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   1f49e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f4a2:	4718      	bx	r3
}
   1f4a4:	bd70      	pop	{r4, r5, r6, pc}
   1f4a6:	bf00      	nop
   1f4a8:	4000a000 	.word	0x4000a000
   1f4ac:	2002f638 	.word	0x2002f638
   1f4b0:	000333da 	.word	0x000333da
   1f4b4:	0002e715 	.word	0x0002e715
   1f4b8:	000331fd 	.word	0x000331fd

0001f4bc <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   1f4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f4c0:	460e      	mov	r6, r1
   1f4c2:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1f4c4:	4d0c      	ldr	r5, [pc, #48]	; (1f4f8 <metal_generic_dev_open+0x3c>)
   1f4c6:	f855 4f18 	ldr.w	r4, [r5, #24]!
   1f4ca:	42ac      	cmp	r4, r5
   1f4cc:	d103      	bne.n	1f4d6 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   1f4ce:	f06f 0012 	mvn.w	r0, #18
   1f4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1f4d6:	4631      	mov	r1, r6
   1f4d8:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   1f4dc:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   1f4e0:	f7e9 ff89 	bl	93f6 <strcmp>
   1f4e4:	b930      	cbnz	r0, 1f4f4 <metal_generic_dev_open+0x38>
			*device = dev;
   1f4e6:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   1f4ea:	4640      	mov	r0, r8
}
   1f4ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   1f4f0:	f00b bfc0 	b.w	2b474 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1f4f4:	6824      	ldr	r4, [r4, #0]
   1f4f6:	e7e8      	b.n	1f4ca <metal_generic_dev_open+0xe>
   1f4f8:	2002f658 	.word	0x2002f658

0001f4fc <metal_bus_unregister>:
{
   1f4fc:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1f4fe:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1f502:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1f504:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   1f506:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1f50a:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1f50c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   1f510:	6843      	ldr	r3, [r0, #4]
{
   1f512:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   1f514:	b103      	cbz	r3, 1f518 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   1f516:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   1f518:	4b05      	ldr	r3, [pc, #20]	; (1f530 <metal_bus_unregister+0x34>)
   1f51a:	781a      	ldrb	r2, [r3, #0]
   1f51c:	2a06      	cmp	r2, #6
   1f51e:	d905      	bls.n	1f52c <metal_bus_unregister+0x30>
   1f520:	685b      	ldr	r3, [r3, #4]
   1f522:	b11b      	cbz	r3, 1f52c <metal_bus_unregister+0x30>
   1f524:	2007      	movs	r0, #7
   1f526:	6822      	ldr	r2, [r4, #0]
   1f528:	4902      	ldr	r1, [pc, #8]	; (1f534 <metal_bus_unregister+0x38>)
   1f52a:	4798      	blx	r3
}
   1f52c:	2000      	movs	r0, #0
   1f52e:	bd10      	pop	{r4, pc}
   1f530:	2002f658 	.word	0x2002f658
   1f534:	000333fd 	.word	0x000333fd

0001f538 <metal_bus_find>:
{
   1f538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f53c:	4607      	mov	r7, r0
   1f53e:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   1f540:	4e0b      	ldr	r6, [pc, #44]	; (1f570 <metal_bus_find+0x38>)
   1f542:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1f546:	42b4      	cmp	r4, r6
   1f548:	d102      	bne.n	1f550 <metal_bus_find+0x18>
	return -ENOENT;
   1f54a:	f06f 0001 	mvn.w	r0, #1
   1f54e:	e00a      	b.n	1f566 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   1f550:	4639      	mov	r1, r7
   1f552:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1f556:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1f55a:	f7e9 ff4c 	bl	93f6 <strcmp>
   1f55e:	b920      	cbnz	r0, 1f56a <metal_bus_find+0x32>
   1f560:	b11d      	cbz	r5, 1f56a <metal_bus_find+0x32>
			*result = bus;
   1f562:	f8c5 8000 	str.w	r8, [r5]
}
   1f566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1f56a:	6824      	ldr	r4, [r4, #0]
   1f56c:	e7eb      	b.n	1f546 <metal_bus_find+0xe>
   1f56e:	bf00      	nop
   1f570:	2002f658 	.word	0x2002f658

0001f574 <metal_bus_register>:
{
   1f574:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1f576:	4604      	mov	r4, r0
   1f578:	b910      	cbnz	r0, 1f580 <metal_bus_register+0xc>
		return -EINVAL;
   1f57a:	f06f 0015 	mvn.w	r0, #21
}
   1f57e:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   1f580:	6800      	ldr	r0, [r0, #0]
   1f582:	2800      	cmp	r0, #0
   1f584:	d0f9      	beq.n	1f57a <metal_bus_register+0x6>
   1f586:	f7e9 ff40 	bl	940a <strlen>
   1f58a:	2800      	cmp	r0, #0
   1f58c:	d0f5      	beq.n	1f57a <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1f58e:	2100      	movs	r1, #0
   1f590:	6820      	ldr	r0, [r4, #0]
   1f592:	f7ff ffd1 	bl	1f538 <metal_bus_find>
   1f596:	b1c8      	cbz	r0, 1f5cc <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   1f598:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   1f59c:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   1f5a0:	4b0c      	ldr	r3, [pc, #48]	; (1f5d4 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1f5a2:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1f5a6:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   1f5a8:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   1f5ac:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1f5ae:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   1f5b0:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1f5b2:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1f5b4:	781a      	ldrb	r2, [r3, #0]
   1f5b6:	2a06      	cmp	r2, #6
   1f5b8:	d901      	bls.n	1f5be <metal_bus_register+0x4a>
   1f5ba:	685b      	ldr	r3, [r3, #4]
   1f5bc:	b90b      	cbnz	r3, 1f5c2 <metal_bus_register+0x4e>
	return 0;
   1f5be:	2000      	movs	r0, #0
   1f5c0:	e7dd      	b.n	1f57e <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1f5c2:	2007      	movs	r0, #7
   1f5c4:	6822      	ldr	r2, [r4, #0]
   1f5c6:	4904      	ldr	r1, [pc, #16]	; (1f5d8 <metal_bus_register+0x64>)
   1f5c8:	4798      	blx	r3
   1f5ca:	e7f8      	b.n	1f5be <metal_bus_register+0x4a>
		return -EEXIST;
   1f5cc:	f06f 0010 	mvn.w	r0, #16
   1f5d0:	e7d5      	b.n	1f57e <metal_bus_register+0xa>
   1f5d2:	bf00      	nop
   1f5d4:	2002f658 	.word	0x2002f658
   1f5d8:	000333ff 	.word	0x000333ff

0001f5dc <metal_device_close>:
	metal_assert(device && device->bus);
   1f5dc:	4601      	mov	r1, r0
{
   1f5de:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   1f5e0:	b108      	cbz	r0, 1f5e6 <metal_device_close+0xa>
   1f5e2:	6840      	ldr	r0, [r0, #4]
   1f5e4:	b948      	cbnz	r0, 1f5fa <metal_device_close+0x1e>
   1f5e6:	4908      	ldr	r1, [pc, #32]	; (1f608 <metal_device_close+0x2c>)
   1f5e8:	4808      	ldr	r0, [pc, #32]	; (1f60c <metal_device_close+0x30>)
   1f5ea:	2351      	movs	r3, #81	; 0x51
   1f5ec:	4a08      	ldr	r2, [pc, #32]	; (1f610 <metal_device_close+0x34>)
   1f5ee:	f008 f800 	bl	275f2 <assert_print>
   1f5f2:	2151      	movs	r1, #81	; 0x51
   1f5f4:	4806      	ldr	r0, [pc, #24]	; (1f610 <metal_device_close+0x34>)
   1f5f6:	f007 fff5 	bl	275e4 <assert_post_action>
	if (device->bus->ops.dev_close)
   1f5fa:	68c3      	ldr	r3, [r0, #12]
   1f5fc:	b113      	cbz	r3, 1f604 <metal_device_close+0x28>
}
   1f5fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   1f602:	4718      	bx	r3
}
   1f604:	bd10      	pop	{r4, pc}
   1f606:	bf00      	nop
   1f608:	00033449 	.word	0x00033449
   1f60c:	0002e715 	.word	0x0002e715
   1f610:	00033412 	.word	0x00033412

0001f614 <metal_register_generic_device>:
{
   1f614:	b510      	push	{r4, lr}
   1f616:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   1f618:	6800      	ldr	r0, [r0, #0]
   1f61a:	b910      	cbnz	r0, 1f622 <metal_register_generic_device+0xe>
		return -EINVAL;
   1f61c:	f06f 0015 	mvn.w	r0, #21
}
   1f620:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   1f622:	f7e9 fef2 	bl	940a <strlen>
   1f626:	2800      	cmp	r0, #0
   1f628:	d0f8      	beq.n	1f61c <metal_register_generic_device+0x8>
   1f62a:	68a3      	ldr	r3, [r4, #8]
   1f62c:	2b01      	cmp	r3, #1
   1f62e:	d8f5      	bhi.n	1f61c <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   1f630:	4b06      	ldr	r3, [pc, #24]	; (1f64c <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1f632:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1f636:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   1f638:	4b05      	ldr	r3, [pc, #20]	; (1f650 <metal_register_generic_device+0x3c>)
   1f63a:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   1f63c:	f103 0018 	add.w	r0, r3, #24
   1f640:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   1f642:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   1f644:	61d9      	str	r1, [r3, #28]
	return 0;
   1f646:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   1f648:	6011      	str	r1, [r2, #0]
}
   1f64a:	e7e9      	b.n	1f620 <metal_register_generic_device+0xc>
   1f64c:	20008760 	.word	0x20008760
   1f650:	2002f658 	.word	0x2002f658

0001f654 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   1f654:	4b0e      	ldr	r3, [pc, #56]	; (1f690 <metal_init+0x3c>)
{
   1f656:	b510      	push	{r4, lr}
   1f658:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   1f65a:	2220      	movs	r2, #32
   1f65c:	2100      	movs	r1, #0
   1f65e:	4618      	mov	r0, r3
   1f660:	f00c fd6e 	bl	2c140 <memset>

	_metal.common.log_handler   = params->log_handler;
   1f664:	6822      	ldr	r2, [r4, #0]
   1f666:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   1f668:	4602      	mov	r2, r0
   1f66a:	7921      	ldrb	r1, [r4, #4]
   1f66c:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   1f670:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   1f674:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   1f678:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   1f67c:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   1f680:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1f684:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   1f686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   1f68a:	f000 b80f 	b.w	1f6ac <metal_sys_init>
   1f68e:	bf00      	nop
   1f690:	2002f658 	.word	0x2002f658

0001f694 <metal_finish>:

void metal_finish(void)
{
   1f694:	b508      	push	{r3, lr}
	metal_sys_finish();
   1f696:	f000 f811 	bl	1f6bc <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   1f69a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   1f69e:	2220      	movs	r2, #32
   1f6a0:	2100      	movs	r1, #0
   1f6a2:	4801      	ldr	r0, [pc, #4]	; (1f6a8 <metal_finish+0x14>)
   1f6a4:	f00c bd4c 	b.w	2c140 <memset>
   1f6a8:	2002f658 	.word	0x2002f658

0001f6ac <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   1f6ac:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   1f6ae:	4802      	ldr	r0, [pc, #8]	; (1f6b8 <metal_sys_init+0xc>)
   1f6b0:	f7ff ff60 	bl	1f574 <metal_bus_register>
	return 0;
}
   1f6b4:	2000      	movs	r0, #0
   1f6b6:	bd08      	pop	{r3, pc}
   1f6b8:	20008760 	.word	0x20008760

0001f6bc <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   1f6bc:	4801      	ldr	r0, [pc, #4]	; (1f6c4 <metal_sys_finish+0x8>)
   1f6be:	f7ff bf1d 	b.w	1f4fc <metal_bus_unregister>
   1f6c2:	bf00      	nop
   1f6c4:	20008760 	.word	0x20008760

0001f6c8 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   1f6c8:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1f6ca:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   1f6cc:	2b06      	cmp	r3, #6
{
   1f6ce:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   1f6d0:	bf88      	it	hi
   1f6d2:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   1f6d4:	4b09      	ldr	r3, [pc, #36]	; (1f6fc <metal_zephyr_log_handler+0x34>)
{
   1f6d6:	ac05      	add	r4, sp, #20
   1f6d8:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   1f6dc:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1f6e0:	4807      	ldr	r0, [pc, #28]	; (1f700 <metal_zephyr_log_handler+0x38>)
   1f6e2:	f007 fdc4 	bl	2726e <printk>

	va_start(args, format);
	vprintk(format, args);
   1f6e6:	4621      	mov	r1, r4
   1f6e8:	4628      	mov	r0, r5
	va_start(args, format);
   1f6ea:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   1f6ec:	f7ee fa9e 	bl	dc2c <vprintk>
	va_end(args);
}
   1f6f0:	b002      	add	sp, #8
   1f6f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1f6f6:	b003      	add	sp, #12
   1f6f8:	4770      	bx	lr
   1f6fa:	bf00      	nop
   1f6fc:	0002e4dc 	.word	0x0002e4dc
   1f700:	0002e912 	.word	0x0002e912

0001f704 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   1f704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f708:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   1f70a:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1f70c:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   1f70e:	4293      	cmp	r3, r2
{
   1f710:	4617      	mov	r7, r2
   1f712:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   1f714:	d341      	bcc.n	1f79a <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1f716:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   1f718:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   1f71c:	42bd      	cmp	r5, r7
   1f71e:	d103      	bne.n	1f728 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   1f720:	2000      	movs	r0, #0
}
   1f722:	b007      	add	sp, #28
   1f724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   1f728:	fb0b f805 	mul.w	r8, fp, r5
   1f72c:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1f730:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   1f732:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1f736:	1d23      	adds	r3, r4, #4
   1f738:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1f73a:	b9ca      	cbnz	r2, 1f770 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   1f73c:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1f73e:	6861      	ldr	r1, [r4, #4]
   1f740:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   1f742:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1f746:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   1f748:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1f74a:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   1f74e:	1e5c      	subs	r4, r3, #1
   1f750:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   1f754:	425b      	negs	r3, r3
   1f756:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   1f75a:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   1f75c:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   1f760:	6884      	ldr	r4, [r0, #8]
   1f762:	3306      	adds	r3, #6
   1f764:	42a1      	cmp	r1, r4
   1f766:	bf28      	it	cs
   1f768:	f04f 31ff 	movcs.w	r1, #4294967295
   1f76c:	f00b fe4e 	bl	2b40c <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1f770:	f859 3008 	ldr.w	r3, [r9, r8]
   1f774:	4630      	mov	r0, r6
   1f776:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   1f778:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1f77a:	b2a9      	uxth	r1, r5
   1f77c:	6a1b      	ldr	r3, [r3, #32]
   1f77e:	9301      	str	r3, [sp, #4]
   1f780:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f782:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1f786:	9300      	str	r3, [sp, #0]
   1f788:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   1f78c:	9b05      	ldr	r3, [sp, #20]
   1f78e:	f00b feb6 	bl	2b4fe <virtqueue_create>
		if (ret)
   1f792:	2800      	cmp	r0, #0
   1f794:	d1c5      	bne.n	1f722 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1f796:	3501      	adds	r5, #1
   1f798:	e7c0      	b.n	1f71c <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1f79a:	4801      	ldr	r0, [pc, #4]	; (1f7a0 <virtio_create_virtqueues+0x9c>)
   1f79c:	e7c1      	b.n	1f722 <virtio_create_virtqueues+0x1e>
   1f79e:	bf00      	nop
   1f7a0:	fffff440 	.word	0xfffff440

0001f7a4 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   1f7a4:	b510      	push	{r4, lr}
	if (vq) {
   1f7a6:	4604      	mov	r4, r0
   1f7a8:	b190      	cbz	r0, 1f7d0 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   1f7aa:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1f7ac:	8943      	ldrh	r3, [r0, #10]
   1f7ae:	429a      	cmp	r2, r3
   1f7b0:	d009      	beq.n	1f7c6 <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   1f7b2:	4b08      	ldr	r3, [pc, #32]	; (1f7d4 <virtqueue_free+0x30>)
   1f7b4:	781a      	ldrb	r2, [r3, #0]
   1f7b6:	2a03      	cmp	r2, #3
   1f7b8:	d905      	bls.n	1f7c6 <virtqueue_free+0x22>
   1f7ba:	685b      	ldr	r3, [r3, #4]
   1f7bc:	b11b      	cbz	r3, 1f7c6 <virtqueue_free+0x22>
   1f7be:	6842      	ldr	r2, [r0, #4]
   1f7c0:	4905      	ldr	r1, [pc, #20]	; (1f7d8 <virtqueue_free+0x34>)
   1f7c2:	2004      	movs	r0, #4
   1f7c4:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   1f7c6:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   1f7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f7cc:	f00c bc5b 	b.w	2c086 <k_free>
   1f7d0:	bd10      	pop	{r4, pc}
   1f7d2:	bf00      	nop
   1f7d4:	2002f658 	.word	0x2002f658
   1f7d8:	000334f7 	.word	0x000334f7

0001f7dc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   1f7dc:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   1f7de:	8944      	ldrh	r4, [r0, #10]
   1f7e0:	428c      	cmp	r4, r1
   1f7e2:	d912      	bls.n	1f80a <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   1f7e4:	6a03      	ldr	r3, [r0, #32]
   1f7e6:	3c01      	subs	r4, #1
   1f7e8:	885d      	ldrh	r5, [r3, #2]
   1f7ea:	402c      	ands	r4, r5
   1f7ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   1f7f0:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   1f7f2:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1f7f4:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1f7f8:	6a02      	ldr	r2, [r0, #32]
   1f7fa:	8853      	ldrh	r3, [r2, #2]
   1f7fc:	3301      	adds	r3, #1
   1f7fe:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1f800:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1f802:	3301      	adds	r3, #1
   1f804:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1f806:	2000      	movs	r0, #0
}
   1f808:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1f80a:	4801      	ldr	r0, [pc, #4]	; (1f810 <virtqueue_add_consumed_buffer+0x34>)
   1f80c:	e7fc      	b.n	1f808 <virtqueue_add_consumed_buffer+0x2c>
   1f80e:	bf00      	nop
   1f810:	fffff441 	.word	0xfffff441

0001f814 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   1f814:	b470      	push	{r4, r5, r6}
   1f816:	9e03      	ldr	r6, [sp, #12]
   1f818:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1f81a:	b158      	cbz	r0, 1f834 <rpmsg_send_offchannel_raw+0x20>
   1f81c:	6a00      	ldr	r0, [r0, #32]
   1f81e:	b148      	cbz	r0, 1f834 <rpmsg_send_offchannel_raw+0x20>
   1f820:	b143      	cbz	r3, 1f834 <rpmsg_send_offchannel_raw+0x20>
   1f822:	3401      	adds	r4, #1
   1f824:	d006      	beq.n	1f834 <rpmsg_send_offchannel_raw+0x20>
   1f826:	2e00      	cmp	r6, #0
   1f828:	db04      	blt.n	1f834 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   1f82a:	6f84      	ldr	r4, [r0, #120]	; 0x78
   1f82c:	b114      	cbz	r4, 1f834 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1f82e:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   1f830:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1f832:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1f834:	4801      	ldr	r0, [pc, #4]	; (1f83c <rpmsg_send_offchannel_raw+0x28>)
}
   1f836:	bc70      	pop	{r4, r5, r6}
   1f838:	4770      	bx	lr
   1f83a:	bf00      	nop
   1f83c:	fffff82d 	.word	0xfffff82d

0001f840 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   1f840:	b470      	push	{r4, r5, r6}
   1f842:	9e03      	ldr	r6, [sp, #12]
   1f844:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1f846:	b160      	cbz	r0, 1f862 <rpmsg_send_offchannel_nocopy+0x22>
   1f848:	6a00      	ldr	r0, [r0, #32]
   1f84a:	b150      	cbz	r0, 1f862 <rpmsg_send_offchannel_nocopy+0x22>
   1f84c:	b14b      	cbz	r3, 1f862 <rpmsg_send_offchannel_nocopy+0x22>
   1f84e:	3401      	adds	r4, #1
   1f850:	d007      	beq.n	1f862 <rpmsg_send_offchannel_nocopy+0x22>
   1f852:	2e00      	cmp	r6, #0
   1f854:	db05      	blt.n	1f862 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   1f856:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   1f85a:	b114      	cbz	r4, 1f862 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1f85c:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   1f85e:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   1f860:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1f862:	4801      	ldr	r0, [pc, #4]	; (1f868 <rpmsg_send_offchannel_nocopy+0x28>)
}
   1f864:	bc70      	pop	{r4, r5, r6}
   1f866:	4770      	bx	lr
   1f868:	fffff82d 	.word	0xfffff82d

0001f86c <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   1f86c:	b570      	push	{r4, r5, r6, lr}
   1f86e:	460c      	mov	r4, r1
   1f870:	4611      	mov	r1, r2
   1f872:	4605      	mov	r5, r0
   1f874:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1f876:	4b0c      	ldr	r3, [pc, #48]	; (1f8a8 <rpmsg_register_endpoint+0x3c>)
   1f878:	2220      	movs	r2, #32
   1f87a:	2900      	cmp	r1, #0
   1f87c:	bf08      	it	eq
   1f87e:	4619      	moveq	r1, r3
   1f880:	4620      	mov	r0, r4
   1f882:	f00c fdac 	bl	2c3de <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   1f886:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   1f888:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   1f88a:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   1f88c:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   1f88e:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   1f890:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1f892:	9b06      	ldr	r3, [sp, #24]
   1f894:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   1f896:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1f898:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   1f89c:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   1f8a0:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   1f8a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1f8a4:	6013      	str	r3, [r2, #0]
}
   1f8a6:	bd70      	pop	{r4, r5, r6, pc}
   1f8a8:	00032365 	.word	0x00032365

0001f8ac <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   1f8ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1f8b0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   1f8b4:	460d      	mov	r5, r1
   1f8b6:	4692      	mov	sl, r2
   1f8b8:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   1f8ba:	4606      	mov	r6, r0
   1f8bc:	2800      	cmp	r0, #0
   1f8be:	d06c      	beq.n	1f99a <rpmsg_create_ept+0xee>
   1f8c0:	2900      	cmp	r1, #0
   1f8c2:	d06a      	beq.n	1f99a <rpmsg_create_ept+0xee>
   1f8c4:	f1b9 0f00 	cmp.w	r9, #0
   1f8c8:	d067      	beq.n	1f99a <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1f8ca:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1f8ce:	4640      	mov	r0, r8
   1f8d0:	f00b ff7e 	bl	2b7d0 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   1f8d4:	1c78      	adds	r0, r7, #1
   1f8d6:	d140      	bne.n	1f95a <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1f8d8:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1f8da:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1f8de:	f014 0401 	ands.w	r4, r4, #1
   1f8e2:	d00b      	beq.n	1f8fc <rpmsg_create_ept+0x50>
	for (bit = start;
   1f8e4:	2400      	movs	r4, #0
	     bit++)
   1f8e6:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1f8e8:	2c80      	cmp	r4, #128	; 0x80
   1f8ea:	d054      	beq.n	1f996 <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1f8ec:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1f8ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1f8f2:	f004 011f 	and.w	r1, r4, #31
   1f8f6:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1f8f8:	07d1      	lsls	r1, r2, #31
   1f8fa:	d4f4      	bmi.n	1f8e6 <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1f8fc:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1f8fe:	0960      	lsrs	r0, r4, #5
   1f900:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   1f904:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1f908:	f004 041f 	and.w	r4, r4, #31
   1f90c:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1f90e:	430a      	orrs	r2, r1
   1f910:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   1f914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f916:	4652      	mov	r2, sl
   1f918:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1f91c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f91e:	4631      	mov	r1, r6
   1f920:	9300      	str	r3, [sp, #0]
   1f922:	4628      	mov	r0, r5
   1f924:	463b      	mov	r3, r7
   1f926:	f7ff ffa1 	bl	1f86c <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1f92a:	4640      	mov	r0, r8
   1f92c:	f001 fa9c 	bl	20e68 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   1f930:	7834      	ldrb	r4, [r6, #0]
   1f932:	b174      	cbz	r4, 1f952 <rpmsg_create_ept+0xa6>
   1f934:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   1f938:	b15c      	cbz	r4, 1f952 <rpmsg_create_ept+0xa6>
   1f93a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1f93c:	3301      	adds	r3, #1
   1f93e:	d12e      	bne.n	1f99e <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1f940:	2100      	movs	r1, #0
   1f942:	4630      	mov	r0, r6
   1f944:	f00b ff73 	bl	2b82e <rpmsg_send_ns_message>

	if (status)
   1f948:	4604      	mov	r4, r0
   1f94a:	b110      	cbz	r0, 1f952 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   1f94c:	4630      	mov	r0, r6
   1f94e:	f00b ff45 	bl	2b7dc <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1f952:	4620      	mov	r0, r4
   1f954:	b004      	add	sp, #16
   1f956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   1f95a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   1f95e:	d3d9      	bcc.n	1f914 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1f960:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1f964:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   1f966:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   1f96a:	d80f      	bhi.n	1f98c <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1f96c:	0958      	lsrs	r0, r3, #5
   1f96e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1f972:	f003 031f 	and.w	r3, r3, #31
   1f976:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   1f97a:	07d2      	lsls	r2, r2, #31
   1f97c:	d40b      	bmi.n	1f996 <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1f97e:	2201      	movs	r2, #1
   1f980:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1f984:	4323      	orrs	r3, r4
   1f986:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   1f98a:	e7c3      	b.n	1f914 <rpmsg_create_ept+0x68>
   1f98c:	4c05      	ldr	r4, [pc, #20]	; (1f9a4 <rpmsg_create_ept+0xf8>)
   1f98e:	4640      	mov	r0, r8
   1f990:	f001 fa6a 	bl	20e68 <z_impl_k_sem_give>
}
   1f994:	e7dd      	b.n	1f952 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   1f996:	4c04      	ldr	r4, [pc, #16]	; (1f9a8 <rpmsg_create_ept+0xfc>)
   1f998:	e7f9      	b.n	1f98e <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   1f99a:	4c02      	ldr	r4, [pc, #8]	; (1f9a4 <rpmsg_create_ept+0xf8>)
   1f99c:	e7d9      	b.n	1f952 <rpmsg_create_ept+0xa6>
   1f99e:	2400      	movs	r4, #0
   1f9a0:	e7d7      	b.n	1f952 <rpmsg_create_ept+0xa6>
   1f9a2:	bf00      	nop
   1f9a4:	fffff82d 	.word	0xfffff82d
   1f9a8:	fffff829 	.word	0xfffff829

0001f9ac <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   1f9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   1f9b0:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   1f9b4:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   1f9b8:	2300      	movs	r3, #0
{
   1f9ba:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1f9bc:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1f9be:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1f9c2:	2310      	movs	r3, #16
	rp_hdr.src = src;
   1f9c4:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   1f9c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1f9ca:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   1f9cc:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   1f9d0:	f8ad 501c 	strh.w	r5, [sp, #28]
   1f9d4:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1f9d6:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1f9d8:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1f9dc:	42b1      	cmp	r1, r6
   1f9de:	bf28      	it	cs
   1f9e0:	f04f 31ff 	movcs.w	r1, #4294967295
   1f9e4:	eb0d 0203 	add.w	r2, sp, r3
   1f9e8:	f00b fcd6 	bl	2b398 <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1f9ec:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   1f9ee:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   1f9f0:	d00b      	beq.n	1fa0a <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   1f9f2:	4924      	ldr	r1, [pc, #144]	; (1fa84 <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   1f9f4:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1f9f8:	4a23      	ldr	r2, [pc, #140]	; (1fa88 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1f9fa:	4824      	ldr	r0, [pc, #144]	; (1fa8c <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1f9fc:	f007 fdf9 	bl	275f2 <assert_print>
   1fa00:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1fa04:	4820      	ldr	r0, [pc, #128]	; (1fa88 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1fa06:	f007 fded 	bl	275e4 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   1fa0a:	f104 0658 	add.w	r6, r4, #88	; 0x58
   1fa0e:	4630      	mov	r0, r6
   1fa10:	f00b ff9d 	bl	2b94e <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   1fa14:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1fa18:	699b      	ldr	r3, [r3, #24]
   1fa1a:	b9d3      	cbnz	r3, 1fa52 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   1fa1c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1fa20:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1fa24:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1fa28:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1fa2a:	b9cb      	cbnz	r3, 1fa60 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   1fa2c:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1fa30:	f8cd 8000 	str.w	r8, [sp]
   1fa34:	2201      	movs	r2, #1
   1fa36:	a902      	add	r1, sp, #8
   1fa38:	f00b fd8e 	bl	2b558 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1fa3c:	b1b0      	cbz	r0, 1fa6c <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   1fa3e:	4914      	ldr	r1, [pc, #80]	; (1fa90 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   1fa40:	f240 13b9 	movw	r3, #441	; 0x1b9
   1fa44:	4a10      	ldr	r2, [pc, #64]	; (1fa88 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   1fa46:	4811      	ldr	r0, [pc, #68]	; (1fa8c <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   1fa48:	f007 fdd3 	bl	275f2 <assert_print>
   1fa4c:	f240 11b9 	movw	r1, #441	; 0x1b9
   1fa50:	e7d8      	b.n	1fa04 <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1fa52:	4639      	mov	r1, r7
   1fa54:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1fa58:	f00b fe14 	bl	2b684 <virtqueue_get_buffer_length>
   1fa5c:	4602      	mov	r2, r0
   1fa5e:	e7df      	b.n	1fa20 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   1fa60:	2b01      	cmp	r3, #1
   1fa62:	d103      	bne.n	1fa6c <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1fa64:	4639      	mov	r1, r7
   1fa66:	f7ff feb9 	bl	1f7dc <virtqueue_add_consumed_buffer>
   1fa6a:	e7e7      	b.n	1fa3c <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   1fa6c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1fa70:	f00b fe5f 	bl	2b732 <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   1fa74:	4630      	mov	r0, r6
   1fa76:	f00b ff68 	bl	2b94a <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   1fa7a:	4628      	mov	r0, r5
   1fa7c:	b008      	add	sp, #32
   1fa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fa82:	bf00      	nop
   1fa84:	0003355c 	.word	0x0003355c
   1fa88:	00033519 	.word	0x00033519
   1fa8c:	0002e715 	.word	0x0002e715
   1fa90:	00033575 	.word	0x00033575

0001fa94 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   1fa94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1fa98:	6803      	ldr	r3, [r0, #0]
   1fa9a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   1fa9c:	f107 0658 	add.w	r6, r7, #88	; 0x58
   1faa0:	4630      	mov	r0, r6
   1faa2:	f00b ff54 	bl	2b94e <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1faa6:	4638      	mov	r0, r7
   1faa8:	f10d 020a 	add.w	r2, sp, #10
   1faac:	a903      	add	r1, sp, #12
   1faae:	f00b ffc1 	bl	2ba34 <rpmsg_virtio_get_rx_buffer>
   1fab2:	4604      	mov	r4, r0
   1fab4:	4630      	mov	r0, r6
   1fab6:	f00b ff48 	bl	2b94a <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   1faba:	2c00      	cmp	r4, #0
   1fabc:	d04f      	beq.n	1fb5e <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   1fabe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1fac2:	4630      	mov	r0, r6
   1fac4:	60a3      	str	r3, [r4, #8]
   1fac6:	f00b ff42 	bl	2b94e <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1faca:	f04f 33ff 	mov.w	r3, #4294967295
   1face:	2100      	movs	r1, #0
   1fad0:	4638      	mov	r0, r7
   1fad2:	6862      	ldr	r2, [r4, #4]
   1fad4:	f00b fedf 	bl	2b896 <rpmsg_get_endpoint>
   1fad8:	4605      	mov	r5, r0
   1fada:	4630      	mov	r0, r6
   1fadc:	f00b ff35 	bl	2b94a <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   1fae0:	b1ed      	cbz	r5, 1fb1e <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1fae2:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1fae4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1fae6:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   1fae8:	bf08      	it	eq
   1faea:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1faec:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   1faee:	bf08      	it	eq
   1faf0:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1faf2:	6823      	ldr	r3, [r4, #0]
   1faf4:	89a2      	ldrh	r2, [r4, #12]
   1faf6:	9100      	str	r1, [sp, #0]
   1faf8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1fafc:	f104 0110 	add.w	r1, r4, #16
   1fb00:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   1fb02:	2800      	cmp	r0, #0
   1fb04:	da0b      	bge.n	1fb1e <rpmsg_virtio_rx_callback+0x8a>
   1fb06:	4917      	ldr	r1, [pc, #92]	; (1fb64 <rpmsg_virtio_rx_callback+0xd0>)
   1fb08:	4817      	ldr	r0, [pc, #92]	; (1fb68 <rpmsg_virtio_rx_callback+0xd4>)
   1fb0a:	f240 2343 	movw	r3, #579	; 0x243
   1fb0e:	4a17      	ldr	r2, [pc, #92]	; (1fb6c <rpmsg_virtio_rx_callback+0xd8>)
   1fb10:	f007 fd6f 	bl	275f2 <assert_print>
   1fb14:	f240 2143 	movw	r1, #579	; 0x243
   1fb18:	4814      	ldr	r0, [pc, #80]	; (1fb6c <rpmsg_virtio_rx_callback+0xd8>)
   1fb1a:	f007 fd63 	bl	275e4 <assert_post_action>
   1fb1e:	4630      	mov	r0, r6
   1fb20:	f00b ff15 	bl	2b94e <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   1fb24:	68a3      	ldr	r3, [r4, #8]
   1fb26:	2b00      	cmp	r3, #0
   1fb28:	db06      	blt.n	1fb38 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1fb2a:	4621      	mov	r1, r4
   1fb2c:	4638      	mov	r0, r7
   1fb2e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1fb32:	9a03      	ldr	r2, [sp, #12]
   1fb34:	f00b ff95 	bl	2ba62 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1fb38:	4638      	mov	r0, r7
   1fb3a:	f10d 020a 	add.w	r2, sp, #10
   1fb3e:	a903      	add	r1, sp, #12
   1fb40:	f00b ff78 	bl	2ba34 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1fb44:	4604      	mov	r4, r0
   1fb46:	b118      	cbz	r0, 1fb50 <rpmsg_virtio_rx_callback+0xbc>
   1fb48:	4630      	mov	r0, r6
   1fb4a:	f00b fefe 	bl	2b94a <k_sem_give>
	while (rp_hdr) {
   1fb4e:	e7b6      	b.n	1fabe <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   1fb50:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1fb54:	f00b fded 	bl	2b732 <virtqueue_kick>
   1fb58:	4630      	mov	r0, r6
   1fb5a:	f00b fef6 	bl	2b94a <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   1fb5e:	b004      	add	sp, #16
   1fb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb64:	00033581 	.word	0x00033581
   1fb68:	0002e715 	.word	0x0002e715
   1fb6c:	00033519 	.word	0x00033519

0001fb70 <rpmsg_virtio_send_offchannel_raw>:
{
   1fb70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fb74:	b085      	sub	sp, #20
   1fb76:	460f      	mov	r7, r1
   1fb78:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1fb7a:	a903      	add	r1, sp, #12
   1fb7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   1fb7e:	4606      	mov	r6, r0
   1fb80:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1fb82:	f00b ffb9 	bl	2baf8 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   1fb86:	4604      	mov	r4, r0
   1fb88:	b350      	cbz	r0, 1fbe0 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   1fb8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1fb8c:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   1fb8e:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   1fb92:	429d      	cmp	r5, r3
   1fb94:	bfa8      	it	ge
   1fb96:	461d      	movge	r5, r3
   1fb98:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1fb9a:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1fb9e:	1a61      	subs	r1, r4, r1
   1fba0:	4561      	cmp	r1, ip
   1fba2:	bf28      	it	cs
   1fba4:	f04f 31ff 	movcs.w	r1, #4294967295
   1fba8:	462b      	mov	r3, r5
   1fbaa:	464a      	mov	r2, r9
   1fbac:	f00b fbf4 	bl	2b398 <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   1fbb0:	4285      	cmp	r5, r0
   1fbb2:	d00b      	beq.n	1fbcc <rpmsg_virtio_send_offchannel_raw+0x5c>
   1fbb4:	490b      	ldr	r1, [pc, #44]	; (1fbe4 <rpmsg_virtio_send_offchannel_raw+0x74>)
   1fbb6:	480c      	ldr	r0, [pc, #48]	; (1fbe8 <rpmsg_virtio_send_offchannel_raw+0x78>)
   1fbb8:	f240 2303 	movw	r3, #515	; 0x203
   1fbbc:	4a0b      	ldr	r2, [pc, #44]	; (1fbec <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1fbbe:	f007 fd18 	bl	275f2 <assert_print>
   1fbc2:	f240 2103 	movw	r1, #515	; 0x203
   1fbc6:	4809      	ldr	r0, [pc, #36]	; (1fbec <rpmsg_virtio_send_offchannel_raw+0x7c>)
   1fbc8:	f007 fd0c 	bl	275e4 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   1fbcc:	4623      	mov	r3, r4
   1fbce:	4642      	mov	r2, r8
   1fbd0:	4639      	mov	r1, r7
   1fbd2:	4630      	mov	r0, r6
   1fbd4:	9500      	str	r5, [sp, #0]
   1fbd6:	f7ff fee9 	bl	1f9ac <rpmsg_virtio_send_offchannel_nocopy>
}
   1fbda:	b005      	add	sp, #20
   1fbdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   1fbe0:	4803      	ldr	r0, [pc, #12]	; (1fbf0 <rpmsg_virtio_send_offchannel_raw+0x80>)
   1fbe2:	e7fa      	b.n	1fbda <rpmsg_virtio_send_offchannel_raw+0x6a>
   1fbe4:	0003358d 	.word	0x0003358d
   1fbe8:	0002e715 	.word	0x0002e715
   1fbec:	00033519 	.word	0x00033519
   1fbf0:	fffff82e 	.word	0xfffff82e

0001fbf4 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   1fbf4:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   1fbf6:	4604      	mov	r4, r0
   1fbf8:	b1e0      	cbz	r0, 1fc34 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   1fbfa:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1fbfe:	4628      	mov	r0, r5
   1fc00:	f00b fea5 	bl	2b94e <__metal_mutex_acquire>
   1fc04:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1fc08:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1fc0a:	b953      	cbnz	r3, 1fc22 <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   1fc0c:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   1fc10:	3c10      	subs	r4, #16
	if (length <= 0) {
   1fc12:	2c00      	cmp	r4, #0
   1fc14:	dc00      	bgt.n	1fc18 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   1fc16:	4c08      	ldr	r4, [pc, #32]	; (1fc38 <rpmsg_virtio_get_buffer_size+0x44>)
   1fc18:	4628      	mov	r0, r5
   1fc1a:	f00b fe96 	bl	2b94a <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   1fc1e:	4620      	mov	r0, r4
   1fc20:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   1fc22:	2b01      	cmp	r3, #1
   1fc24:	d1f7      	bne.n	1fc16 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1fc26:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1fc2a:	f00b fdb9 	bl	2b7a0 <virtqueue_get_desc_size>
   1fc2e:	f1a0 0410 	sub.w	r4, r0, #16
   1fc32:	e7ee      	b.n	1fc12 <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   1fc34:	4c01      	ldr	r4, [pc, #4]	; (1fc3c <rpmsg_virtio_get_buffer_size+0x48>)
   1fc36:	e7f2      	b.n	1fc1e <rpmsg_virtio_get_buffer_size+0x2a>
   1fc38:	fffff82e 	.word	0xfffff82e
   1fc3c:	fffff82d 	.word	0xfffff82d

0001fc40 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   1fc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc44:	b08a      	sub	sp, #40	; 0x28
   1fc46:	460d      	mov	r5, r1
   1fc48:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   1fc4c:	4690      	mov	r8, r2
   1fc4e:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   1fc50:	4604      	mov	r4, r0
   1fc52:	b920      	cbnz	r0, 1fc5e <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   1fc54:	4f81      	ldr	r7, [pc, #516]	; (1fe5c <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   1fc56:	4638      	mov	r0, r7
   1fc58:	b00a      	add	sp, #40	; 0x28
   1fc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   1fc5e:	2900      	cmp	r1, #0
   1fc60:	d0f8      	beq.n	1fc54 <rpmsg_init_vdev_with_config+0x14>
   1fc62:	2b00      	cmp	r3, #0
   1fc64:	d0f6      	beq.n	1fc54 <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   1fc66:	2294      	movs	r2, #148	; 0x94
   1fc68:	2100      	movs	r1, #0
   1fc6a:	f00c fa69 	bl	2c140 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1fc6e:	2201      	movs	r2, #1
   1fc70:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1fc74:	4611      	mov	r1, r2
   1fc76:	f00c f86e 	bl	2bd56 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1fc7a:	4b79      	ldr	r3, [pc, #484]	; (1fe60 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   1fc7c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   1fc80:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   1fc84:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1fc86:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   1fc88:	4b76      	ldr	r3, [pc, #472]	; (1fe64 <rpmsg_init_vdev_with_config+0x224>)
   1fc8a:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   1fc8c:	4b76      	ldr	r3, [pc, #472]	; (1fe68 <rpmsg_init_vdev_with_config+0x228>)
   1fc8e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   1fc92:	4b76      	ldr	r3, [pc, #472]	; (1fe6c <rpmsg_init_vdev_with_config+0x22c>)
   1fc94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   1fc98:	4b75      	ldr	r3, [pc, #468]	; (1fe70 <rpmsg_init_vdev_with_config+0x230>)
   1fc9a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   1fc9e:	4b75      	ldr	r3, [pc, #468]	; (1fe74 <rpmsg_init_vdev_with_config+0x234>)
   1fca0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1fca4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1fca8:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   1fcac:	f1b8 0f00 	cmp.w	r8, #0
   1fcb0:	d16e      	bne.n	1fd90 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   1fcb2:	2f00      	cmp	r7, #0
   1fcb4:	d0ce      	beq.n	1fc54 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   1fcb6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   1fcba:	f104 0394 	add.w	r3, r4, #148	; 0x94
   1fcbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1fcc2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1fcc6:	6a03      	ldr	r3, [r0, #32]
   1fcc8:	689b      	ldr	r3, [r3, #8]
   1fcca:	4798      	blx	r3
   1fccc:	2300      	movs	r3, #0
   1fcce:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1fcd0:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1fcd4:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1fcd6:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   1fcda:	f1b8 0f00 	cmp.w	r8, #0
   1fcde:	d16d      	bne.n	1fdbc <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   1fce0:	7a3b      	ldrb	r3, [r7, #8]
   1fce2:	2b00      	cmp	r3, #0
   1fce4:	d068      	beq.n	1fdb8 <rpmsg_init_vdev_with_config+0x178>
   1fce6:	f109 030c 	add.w	r3, r9, #12
   1fcea:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   1fcee:	f1b9 0f00 	cmp.w	r9, #0
   1fcf2:	d0af      	beq.n	1fc54 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   1fcf4:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1fcf8:	2a00      	cmp	r2, #0
   1fcfa:	f000 80ad 	beq.w	1fe58 <rpmsg_init_vdev_with_config+0x218>
   1fcfe:	689b      	ldr	r3, [r3, #8]
   1fd00:	2b00      	cmp	r3, #0
   1fd02:	f000 80a9 	beq.w	1fe58 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   1fd06:	4b5c      	ldr	r3, [pc, #368]	; (1fe78 <rpmsg_init_vdev_with_config+0x238>)
   1fd08:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   1fd0a:	4b5c      	ldr	r3, [pc, #368]	; (1fe7c <rpmsg_init_vdev_with_config+0x23c>)
   1fd0c:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   1fd0e:	4b5c      	ldr	r3, [pc, #368]	; (1fe80 <rpmsg_init_vdev_with_config+0x240>)
   1fd10:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   1fd12:	4b5c      	ldr	r3, [pc, #368]	; (1fe84 <rpmsg_init_vdev_with_config+0x244>)
   1fd14:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1fd16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fd18:	681b      	ldr	r3, [r3, #0]
   1fd1a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   1fd1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fd20:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   1fd22:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   1fd26:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   1fd2a:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   1fd2e:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   1fd30:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   1fd34:	9300      	str	r3, [sp, #0]
   1fd36:	2202      	movs	r2, #2
   1fd38:	2100      	movs	r1, #0
   1fd3a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1fd3e:	ab04      	add	r3, sp, #16
   1fd40:	f7ff fce0 	bl	1f704 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   1fd44:	4607      	mov	r7, r0
   1fd46:	2800      	cmp	r0, #0
   1fd48:	d185      	bne.n	1fc56 <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   1fd4a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1fd4e:	f00b fcc2 	bl	2b6d6 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   1fd52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fd54:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   1fd56:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   1fd58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fd5a:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   1fd5c:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   1fd5e:	f1b8 0f00 	cmp.w	r8, #0
   1fd62:	d161      	bne.n	1fe28 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1fd64:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   1fd66:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1fd6a:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1fd6c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   1fd70:	895b      	ldrh	r3, [r3, #10]
   1fd72:	4553      	cmp	r3, sl
   1fd74:	d834      	bhi.n	1fde0 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   1fd76:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1fd7a:	e9c4 4400 	strd	r4, r4, [r4]
   1fd7e:	2b00      	cmp	r3, #0
   1fd80:	d159      	bne.n	1fe36 <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   1fd82:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1fd86:	2104      	movs	r1, #4
   1fd88:	6a03      	ldr	r3, [r0, #32]
   1fd8a:	685b      	ldr	r3, [r3, #4]
   1fd8c:	4798      	blx	r3
}
   1fd8e:	e762      	b.n	1fc56 <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   1fd90:	f1b8 0f01 	cmp.w	r8, #1
   1fd94:	d195      	bne.n	1fcc2 <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   1fd96:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1fd9a:	6a03      	ldr	r3, [r0, #32]
   1fd9c:	681b      	ldr	r3, [r3, #0]
   1fd9e:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1fda0:	0642      	lsls	r2, r0, #25
   1fda2:	d506      	bpl.n	1fdb2 <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   1fda4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1fda8:	2100      	movs	r1, #0
   1fdaa:	6a03      	ldr	r3, [r0, #32]
   1fdac:	685b      	ldr	r3, [r3, #4]
   1fdae:	4798      	blx	r3
}
   1fdb0:	e7f1      	b.n	1fd96 <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1fdb2:	0743      	lsls	r3, r0, #29
   1fdb4:	d5ef      	bpl.n	1fd96 <rpmsg_init_vdev_with_config+0x156>
   1fdb6:	e784      	b.n	1fcc2 <rpmsg_init_vdev_with_config+0x82>
   1fdb8:	464b      	mov	r3, r9
   1fdba:	e796      	b.n	1fcea <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   1fdbc:	f1b8 0f01 	cmp.w	r8, #1
   1fdc0:	d1b1      	bne.n	1fd26 <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   1fdc2:	4b2e      	ldr	r3, [pc, #184]	; (1fe7c <rpmsg_init_vdev_with_config+0x23c>)
   1fdc4:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   1fdc6:	4b2c      	ldr	r3, [pc, #176]	; (1fe78 <rpmsg_init_vdev_with_config+0x238>)
   1fdc8:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   1fdca:	4b2e      	ldr	r3, [pc, #184]	; (1fe84 <rpmsg_init_vdev_with_config+0x244>)
   1fdcc:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   1fdce:	4b2c      	ldr	r3, [pc, #176]	; (1fe80 <rpmsg_init_vdev_with_config+0x240>)
   1fdd0:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1fdd2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fdd4:	699b      	ldr	r3, [r3, #24]
   1fdd6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   1fdda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fddc:	681b      	ldr	r3, [r3, #0]
   1fdde:	e7a0      	b.n	1fd22 <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1fde0:	4648      	mov	r0, r9
   1fde2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   1fde6:	f00b fe78 	bl	2bada <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   1fdea:	4605      	mov	r5, r0
   1fdec:	b1c8      	cbz	r0, 1fe22 <rpmsg_init_vdev_with_config+0x1e2>
   1fdee:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   1fdf0:	9008      	str	r0, [sp, #32]
   1fdf2:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1fdf4:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   1fdf6:	2200      	movs	r2, #0
   1fdf8:	4281      	cmp	r1, r0
   1fdfa:	bf28      	it	cs
   1fdfc:	f04f 31ff 	movcs.w	r1, #4294967295
   1fe00:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1fe04:	4630      	mov	r0, r6
   1fe06:	f00b fb01 	bl	2b40c <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   1fe0a:	9500      	str	r5, [sp, #0]
   1fe0c:	2301      	movs	r3, #1
   1fe0e:	2200      	movs	r2, #0
   1fe10:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1fe14:	a908      	add	r1, sp, #32
   1fe16:	f00b fb9f 	bl	2b558 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   1fe1a:	b918      	cbnz	r0, 1fe24 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1fe1c:	f10a 0a01 	add.w	sl, sl, #1
   1fe20:	e7a4      	b.n	1fd6c <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   1fe22:	4819      	ldr	r0, [pc, #100]	; (1fe88 <rpmsg_init_vdev_with_config+0x248>)
   1fe24:	4607      	mov	r7, r0
   1fe26:	e716      	b.n	1fc56 <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   1fe28:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1fe2c:	e9c4 4400 	strd	r4, r4, [r4]
   1fe30:	2b00      	cmp	r3, #0
   1fe32:	f43f af10 	beq.w	1fc56 <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   1fe36:	2300      	movs	r3, #0
   1fe38:	9302      	str	r3, [sp, #8]
   1fe3a:	4b14      	ldr	r3, [pc, #80]	; (1fe8c <rpmsg_init_vdev_with_config+0x24c>)
   1fe3c:	4620      	mov	r0, r4
   1fe3e:	9301      	str	r3, [sp, #4]
   1fe40:	2335      	movs	r3, #53	; 0x35
   1fe42:	4a13      	ldr	r2, [pc, #76]	; (1fe90 <rpmsg_init_vdev_with_config+0x250>)
   1fe44:	9300      	str	r3, [sp, #0]
   1fe46:	f104 0108 	add.w	r1, r4, #8
   1fe4a:	f7ff fd0f 	bl	1f86c <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   1fe4e:	f1b8 0f00 	cmp.w	r8, #0
   1fe52:	f47f af00 	bne.w	1fc56 <rpmsg_init_vdev_with_config+0x16>
   1fe56:	e794      	b.n	1fd82 <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   1fe58:	4f0b      	ldr	r7, [pc, #44]	; (1fe88 <rpmsg_init_vdev_with_config+0x248>)
   1fe5a:	e6fc      	b.n	1fc56 <rpmsg_init_vdev_with_config+0x16>
   1fe5c:	fffff82d 	.word	0xfffff82d
   1fe60:	0001fb71 	.word	0x0001fb71
   1fe64:	0002b93b 	.word	0x0002b93b
   1fe68:	0002ba9b 	.word	0x0002ba9b
   1fe6c:	0002baf9 	.word	0x0002baf9
   1fe70:	0001f9ad 	.word	0x0001f9ad
   1fe74:	0002b95b 	.word	0x0002b95b
   1fe78:	0003359b 	.word	0x0003359b
   1fe7c:	000335a1 	.word	0x000335a1
   1fe80:	0001fa95 	.word	0x0001fa95
   1fe84:	0002b949 	.word	0x0002b949
   1fe88:	fffff82e 	.word	0xfffff82e
   1fe8c:	0002b99d 	.word	0x0002b99d
   1fe90:	000335a7 	.word	0x000335a7

0001fe94 <rpmsg_init_vdev>:
{
   1fe94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe96:	4605      	mov	r5, r0
   1fe98:	460e      	mov	r6, r1
   1fe9a:	4617      	mov	r7, r2
   1fe9c:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   1fe9e:	4a07      	ldr	r2, [pc, #28]	; (1febc <rpmsg_init_vdev+0x28>)
   1fea0:	ac03      	add	r4, sp, #12
   1fea2:	ca07      	ldmia	r2, {r0, r1, r2}
   1fea4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   1fea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1feaa:	4631      	mov	r1, r6
   1feac:	9200      	str	r2, [sp, #0]
   1feae:	4628      	mov	r0, r5
   1feb0:	463a      	mov	r2, r7
   1feb2:	9401      	str	r4, [sp, #4]
   1feb4:	f7ff fec4 	bl	1fc40 <rpmsg_init_vdev_with_config>
}
   1feb8:	b007      	add	sp, #28
   1feba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1febc:	0002d7a4 	.word	0x0002d7a4

0001fec0 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1fec0:	2203      	movs	r2, #3
   1fec2:	4b11      	ldr	r3, [pc, #68]	; (1ff08 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1fec4:	4911      	ldr	r1, [pc, #68]	; (1ff0c <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1fec6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1fec8:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1feca:	4a11      	ldr	r2, [pc, #68]	; (1ff10 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   1fecc:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1fece:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1fed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1fed4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   1fed6:	2200      	movs	r2, #0
   1fed8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1feda:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1fedc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1fede:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1fee0:	490c      	ldr	r1, [pc, #48]	; (1ff14 <_DoInit+0x54>)
   1fee2:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1fee4:	2110      	movs	r1, #16
   1fee6:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1fee8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1feea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1feec:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1feee:	4a0a      	ldr	r2, [pc, #40]	; (1ff18 <_DoInit+0x58>)
   1fef0:	6812      	ldr	r2, [r2, #0]
   1fef2:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1fef6:	4a09      	ldr	r2, [pc, #36]	; (1ff1c <_DoInit+0x5c>)
   1fef8:	6810      	ldr	r0, [r2, #0]
   1fefa:	8892      	ldrh	r2, [r2, #4]
   1fefc:	6018      	str	r0, [r3, #0]
   1fefe:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1ff00:	2220      	movs	r2, #32
   1ff02:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1ff04:	4770      	bx	lr
   1ff06:	bf00      	nop
   1ff08:	2002f678 	.word	0x2002f678
   1ff0c:	000335aa 	.word	0x000335aa
   1ff10:	2003029e 	.word	0x2003029e
   1ff14:	2003028e 	.word	0x2003028e
   1ff18:	000335b3 	.word	0x000335b3
   1ff1c:	000335b7 	.word	0x000335b7

0001ff20 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ff20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1ff24:	f04f 0b18 	mov.w	fp, #24
   1ff28:	4f20      	ldr	r7, [pc, #128]	; (1ffac <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ff2a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1ff2c:	fb0b 7200 	mla	r2, fp, r0, r7
   1ff30:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1ff32:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ff34:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ff36:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ff38:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ff3a:	d831      	bhi.n	1ffa0 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1ff3c:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1ff40:	ebaa 0905 	sub.w	r9, sl, r5
   1ff44:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1ff48:	4294      	cmp	r4, r2
   1ff4a:	d811      	bhi.n	1ff70 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ff4c:	2318      	movs	r3, #24
   1ff4e:	fb06 3303 	mla	r3, r6, r3, r3
   1ff52:	443b      	add	r3, r7
   1ff54:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ff56:	4622      	mov	r2, r4
   1ff58:	4641      	mov	r1, r8
   1ff5a:	4428      	add	r0, r5
   1ff5c:	f00c f8b6 	bl	2c0cc <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1ff60:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1ff62:	2318      	movs	r3, #24
      return 1;
   1ff64:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1ff66:	fb03 7306 	mla	r3, r3, r6, r7
   1ff6a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1ff6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1ff70:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1ff72:	429c      	cmp	r4, r3
   1ff74:	d818      	bhi.n	1ffa8 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ff76:	fb00 bb0b 	mla	fp, r0, fp, fp
   1ff7a:	44bb      	add	fp, r7
   1ff7c:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ff80:	464a      	mov	r2, r9
   1ff82:	4428      	add	r0, r5
   1ff84:	442c      	add	r4, r5
   1ff86:	f00c f8a1 	bl	2c0cc <memcpy>
      if (NumBytes) {
   1ff8a:	ebb4 040a 	subs.w	r4, r4, sl
   1ff8e:	d0e8      	beq.n	1ff62 <SEGGER_RTT_WriteSkipNoLock+0x42>
   1ff90:	4622      	mov	r2, r4
   1ff92:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ff96:	eb08 0109 	add.w	r1, r8, r9
   1ff9a:	f00c f897 	bl	2c0cc <memcpy>
      return 1;
   1ff9e:	e7e0      	b.n	1ff62 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1ffa0:	3b01      	subs	r3, #1
   1ffa2:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1ffa4:	42a3      	cmp	r3, r4
   1ffa6:	d2d1      	bcs.n	1ff4c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1ffa8:	2000      	movs	r0, #0
   1ffaa:	e7df      	b.n	1ff6c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1ffac:	2002f678 	.word	0x2002f678

0001ffb0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1ffb0:	2218      	movs	r2, #24
   1ffb2:	4b03      	ldr	r3, [pc, #12]	; (1ffc0 <SEGGER_RTT_HasDataUp+0x10>)
   1ffb4:	fb02 3300 	mla	r3, r2, r0, r3
   1ffb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1ffba:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1ffbc:	1a80      	subs	r0, r0, r2
   1ffbe:	4770      	bx	lr
   1ffc0:	2002f678 	.word	0x2002f678

0001ffc4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1ffc4:	4b01      	ldr	r3, [pc, #4]	; (1ffcc <z_impl_z_errno+0x8>)
   1ffc6:	6898      	ldr	r0, [r3, #8]
}
   1ffc8:	3064      	adds	r0, #100	; 0x64
   1ffca:	4770      	bx	lr
   1ffcc:	2002f720 	.word	0x2002f720

0001ffd0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ffd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffd4:	4605      	mov	r5, r0
   1ffd6:	b086      	sub	sp, #24
   1ffd8:	460f      	mov	r7, r1
	__asm__ volatile(
   1ffda:	f04f 0320 	mov.w	r3, #32
   1ffde:	f3ef 8811 	mrs	r8, BASEPRI
   1ffe2:	f383 8812 	msr	BASEPRI_MAX, r3
   1ffe6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1ffea:	f002 fe65 	bl	22cb8 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1ffee:	2400      	movs	r4, #0
   1fff0:	2d04      	cmp	r5, #4
   1fff2:	bf96      	itet	ls
   1fff4:	4b28      	ldrls	r3, [pc, #160]	; (20098 <z_fatal_error+0xc8>)
   1fff6:	4b29      	ldrhi	r3, [pc, #164]	; (2009c <z_fatal_error+0xcc>)
   1fff8:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   1fffc:	4606      	mov	r6, r0
   1fffe:	e9cd 3404 	strd	r3, r4, [sp, #16]
   20002:	4b27      	ldr	r3, [pc, #156]	; (200a0 <z_fatal_error+0xd0>)
   20004:	2201      	movs	r2, #1
   20006:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2000a:	4620      	mov	r0, r4
   2000c:	4623      	mov	r3, r4
   2000e:	4925      	ldr	r1, [pc, #148]	; (200a4 <z_fatal_error+0xd4>)
   20010:	9503      	str	r5, [sp, #12]
   20012:	9400      	str	r4, [sp, #0]
   20014:	f00b fe1c 	bl	2bc50 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   20018:	b16f      	cbz	r7, 20036 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2001a:	69fb      	ldr	r3, [r7, #28]
   2001c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   20020:	b14b      	cbz	r3, 20036 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   20022:	4b21      	ldr	r3, [pc, #132]	; (200a8 <z_fatal_error+0xd8>)
   20024:	2201      	movs	r2, #1
   20026:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2002a:	4620      	mov	r0, r4
   2002c:	4623      	mov	r3, r4
   2002e:	491d      	ldr	r1, [pc, #116]	; (200a4 <z_fatal_error+0xd4>)
   20030:	9400      	str	r4, [sp, #0]
   20032:	f00b fe0d 	bl	2bc50 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   20036:	b12e      	cbz	r6, 20044 <z_fatal_error+0x74>
   20038:	4630      	mov	r0, r6
   2003a:	f00b fe44 	bl	2bcc6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2003e:	b108      	cbz	r0, 20044 <z_fatal_error+0x74>
   20040:	7803      	ldrb	r3, [r0, #0]
   20042:	b903      	cbnz	r3, 20046 <z_fatal_error+0x76>
		thread_name = "unknown";
   20044:	4819      	ldr	r0, [pc, #100]	; (200ac <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   20046:	4b1a      	ldr	r3, [pc, #104]	; (200b0 <z_fatal_error+0xe0>)
   20048:	2201      	movs	r2, #1
   2004a:	9302      	str	r3, [sp, #8]
   2004c:	2300      	movs	r3, #0
   2004e:	e9cd 6003 	strd	r6, r0, [sp, #12]
   20052:	e9cd 3300 	strd	r3, r3, [sp]
   20056:	4618      	mov	r0, r3
   20058:	4912      	ldr	r1, [pc, #72]	; (200a4 <z_fatal_error+0xd4>)
   2005a:	f00b fdf9 	bl	2bc50 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   2005e:	4639      	mov	r1, r7
   20060:	4628      	mov	r0, r5
   20062:	f7fd fb7d 	bl	1d760 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   20066:	2d04      	cmp	r5, #4
   20068:	d10c      	bne.n	20084 <z_fatal_error+0xb4>
   2006a:	4912      	ldr	r1, [pc, #72]	; (200b4 <z_fatal_error+0xe4>)
   2006c:	2393      	movs	r3, #147	; 0x93
   2006e:	4a12      	ldr	r2, [pc, #72]	; (200b8 <z_fatal_error+0xe8>)
   20070:	4812      	ldr	r0, [pc, #72]	; (200bc <z_fatal_error+0xec>)
   20072:	f007 fabe 	bl	275f2 <assert_print>
   20076:	4812      	ldr	r0, [pc, #72]	; (200c0 <z_fatal_error+0xf0>)
   20078:	f007 fabb 	bl	275f2 <assert_print>
   2007c:	2193      	movs	r1, #147	; 0x93
   2007e:	480e      	ldr	r0, [pc, #56]	; (200b8 <z_fatal_error+0xe8>)
   20080:	f007 fab0 	bl	275e4 <assert_post_action>
	__asm__ volatile(
   20084:	f388 8811 	msr	BASEPRI, r8
   20088:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2008c:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2008e:	b006      	add	sp, #24
   20090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20094:	f7f1 bd16 	b.w	11ac4 <z_impl_k_thread_abort>
   20098:	0002e500 	.word	0x0002e500
   2009c:	000335be 	.word	0x000335be
   200a0:	000335d4 	.word	0x000335d4
   200a4:	0002d6fc 	.word	0x0002d6fc
   200a8:	000335fc 	.word	0x000335fc
   200ac:	000335cc 	.word	0x000335cc
   200b0:	0003361d 	.word	0x0003361d
   200b4:	00033657 	.word	0x00033657
   200b8:	00033635 	.word	0x00033635
   200bc:	0002e715 	.word	0x0002e715
   200c0:	00033674 	.word	0x00033674

000200c4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   200c4:	4b0f      	ldr	r3, [pc, #60]	; (20104 <z_sys_init_run_level+0x40>)
{
   200c6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   200c8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   200cc:	3001      	adds	r0, #1
   200ce:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   200d2:	42a6      	cmp	r6, r4
   200d4:	d800      	bhi.n	200d8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   200d6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   200d8:	e9d4 3500 	ldrd	r3, r5, [r4]
   200dc:	4628      	mov	r0, r5
   200de:	4798      	blx	r3
		if (dev != NULL) {
   200e0:	b16d      	cbz	r5, 200fe <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   200e2:	b138      	cbz	r0, 200f4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   200e4:	2800      	cmp	r0, #0
   200e6:	bfb8      	it	lt
   200e8:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   200ea:	28ff      	cmp	r0, #255	; 0xff
   200ec:	bfa8      	it	ge
   200ee:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   200f0:	68eb      	ldr	r3, [r5, #12]
   200f2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   200f4:	68ea      	ldr	r2, [r5, #12]
   200f6:	7853      	ldrb	r3, [r2, #1]
   200f8:	f043 0301 	orr.w	r3, r3, #1
   200fc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   200fe:	3408      	adds	r4, #8
   20100:	e7e7      	b.n	200d2 <z_sys_init_run_level+0xe>
   20102:	bf00      	nop
   20104:	0002e514 	.word	0x0002e514

00020108 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   20108:	2201      	movs	r2, #1
{
   2010a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2010c:	4b09      	ldr	r3, [pc, #36]	; (20134 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2010e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   20110:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   20112:	f7ff ffd7 	bl	200c4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   20116:	f003 fed7 	bl	23ec8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   2011a:	2004      	movs	r0, #4
   2011c:	f7ff ffd2 	bl	200c4 <z_sys_init_run_level>

	z_init_static_threads();
   20120:	f000 fb66 	bl	207f0 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   20124:	f7ec fbaa 	bl	c87c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20128:	4a03      	ldr	r2, [pc, #12]	; (20138 <bg_thread_main+0x30>)
   2012a:	7b13      	ldrb	r3, [r2, #12]
   2012c:	f023 0301 	bic.w	r3, r3, #1
   20130:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20132:	bd08      	pop	{r3, pc}
   20134:	2003069e 	.word	0x2003069e
   20138:	20009d20 	.word	0x20009d20

0002013c <z_bss_zero>:
{
   2013c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2013e:	4803      	ldr	r0, [pc, #12]	; (2014c <z_bss_zero+0x10>)
   20140:	4a03      	ldr	r2, [pc, #12]	; (20150 <z_bss_zero+0x14>)
   20142:	2100      	movs	r1, #0
   20144:	1a12      	subs	r2, r2, r0
   20146:	f00b fd93 	bl	2bc70 <z_early_memset>
}
   2014a:	bd08      	pop	{r3, pc}
   2014c:	20008e00 	.word	0x20008e00
   20150:	200306b8 	.word	0x200306b8

00020154 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   20154:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   20156:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   20158:	4e13      	ldr	r6, [pc, #76]	; (201a8 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   2015a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   2015c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   20160:	2300      	movs	r3, #0
{
   20162:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   20164:	e9cd 2304 	strd	r2, r3, [sp, #16]
   20168:	220f      	movs	r2, #15
   2016a:	9301      	str	r3, [sp, #4]
   2016c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20170:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   20172:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20176:	4d0d      	ldr	r5, [pc, #52]	; (201ac <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   20178:	490d      	ldr	r1, [pc, #52]	; (201b0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2017a:	fb03 5500 	mla	r5, r3, r0, r5
{
   2017e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   20180:	fb02 1100 	mla	r1, r2, r0, r1
   20184:	4b0b      	ldr	r3, [pc, #44]	; (201b4 <z_init_cpu+0x60>)
   20186:	4630      	mov	r0, r6
   20188:	9500      	str	r5, [sp, #0]
   2018a:	f000 fa97 	bl	206bc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2018e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   20190:	752c      	strb	r4, [r5, #20]
   20192:	f023 0304 	bic.w	r3, r3, #4
   20196:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   20198:	4b07      	ldr	r3, [pc, #28]	; (201b8 <z_init_cpu+0x64>)
   2019a:	3401      	adds	r4, #1
   2019c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   201a0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   201a2:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   201a4:	b006      	add	sp, #24
   201a6:	bd70      	pop	{r4, r5, r6, pc}
   201a8:	20009c98 	.word	0x20009c98
   201ac:	2002f720 	.word	0x2002f720
   201b0:	200413d8 	.word	0x200413d8
   201b4:	00020941 	.word	0x00020941
   201b8:	20040bd8 	.word	0x20040bd8

000201bc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   201bc:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   201be:	2000      	movs	r0, #0
{
   201c0:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   201c2:	f7ff ff7f 	bl	200c4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   201c6:	4b2f      	ldr	r3, [pc, #188]	; (20284 <z_cstart+0xc8>)
	uint32_t msp =
   201c8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   201cc:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   201d0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   201d4:	2400      	movs	r4, #0
   201d6:	23e0      	movs	r3, #224	; 0xe0
   201d8:	4d2b      	ldr	r5, [pc, #172]	; (20288 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   201da:	4e2c      	ldr	r6, [pc, #176]	; (2028c <z_cstart+0xd0>)
   201dc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   201e0:	77ec      	strb	r4, [r5, #31]
   201e2:	762c      	strb	r4, [r5, #24]
   201e4:	766c      	strb	r4, [r5, #25]
   201e6:	76ac      	strb	r4, [r5, #26]
   201e8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   201ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   201ee:	4f28      	ldr	r7, [pc, #160]	; (20290 <z_cstart+0xd4>)
   201f0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   201f4:	626b      	str	r3, [r5, #36]	; 0x24
   201f6:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   201fa:	f7f1 fbc7 	bl	1198c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   201fe:	f7f0 ff09 	bl	11014 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20202:	f04f 33ff 	mov.w	r3, #4294967295
   20206:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20208:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2020a:	f7f1 fe29 	bl	11e60 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2020e:	f7f1 fc6f 	bl	11af0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   20212:	f7ee ffcd 	bl	f1b0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   20216:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   2021a:	ad06      	add	r5, sp, #24
   2021c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   2021e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   20222:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   20226:	f003 fe31 	bl	23e8c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2022a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2022c:	f00b fd04 	bl	2bc38 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   20230:	2001      	movs	r0, #1
   20232:	f7ff ff47 	bl	200c4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   20236:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   20238:	4d16      	ldr	r5, [pc, #88]	; (20294 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2023a:	f7ff ff43 	bl	200c4 <z_sys_init_run_level>
	z_sched_init();
   2023e:	f002 fbc1 	bl	229c4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20242:	4b15      	ldr	r3, [pc, #84]	; (20298 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   20244:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20246:	9305      	str	r3, [sp, #20]
   20248:	2301      	movs	r3, #1
   2024a:	4914      	ldr	r1, [pc, #80]	; (2029c <z_cstart+0xe0>)
   2024c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20250:	e9cd 4303 	strd	r4, r3, [sp, #12]
   20254:	4628      	mov	r0, r5
   20256:	463b      	mov	r3, r7
   20258:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2025c:	9400      	str	r4, [sp, #0]
   2025e:	f000 fa2d 	bl	206bc <z_setup_new_thread>
   20262:	4606      	mov	r6, r0
   20264:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   20266:	4628      	mov	r0, r5
   20268:	f022 0204 	bic.w	r2, r2, #4
   2026c:	736a      	strb	r2, [r5, #13]
   2026e:	f001 fd81 	bl	21d74 <z_ready_thread>
	z_init_cpu(0);
   20272:	4620      	mov	r0, r4
   20274:	f7ff ff6e 	bl	20154 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20278:	463a      	mov	r2, r7
   2027a:	4631      	mov	r1, r6
   2027c:	4628      	mov	r0, r5
   2027e:	f7f1 f833 	bl	112e8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20282:	bf00      	nop
   20284:	20040bd8 	.word	0x20040bd8
   20288:	e000ed00 	.word	0xe000ed00
   2028c:	2002f720 	.word	0x2002f720
   20290:	00020109 	.word	0x00020109
   20294:	20009d20 	.word	0x20009d20
   20298:	000336f3 	.word	0x000336f3
   2029c:	20041518 	.word	0x20041518

000202a0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   202a0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   202a2:	4c0d      	ldr	r4, [pc, #52]	; (202d8 <statics_init+0x38>)
   202a4:	4d0d      	ldr	r5, [pc, #52]	; (202dc <statics_init+0x3c>)
   202a6:	42ac      	cmp	r4, r5
   202a8:	d913      	bls.n	202d2 <statics_init+0x32>
   202aa:	490d      	ldr	r1, [pc, #52]	; (202e0 <statics_init+0x40>)
   202ac:	2318      	movs	r3, #24
   202ae:	4a0d      	ldr	r2, [pc, #52]	; (202e4 <statics_init+0x44>)
   202b0:	480d      	ldr	r0, [pc, #52]	; (202e8 <statics_init+0x48>)
   202b2:	f007 f99e 	bl	275f2 <assert_print>
   202b6:	480d      	ldr	r0, [pc, #52]	; (202ec <statics_init+0x4c>)
   202b8:	f007 f99b 	bl	275f2 <assert_print>
   202bc:	2118      	movs	r1, #24
   202be:	4809      	ldr	r0, [pc, #36]	; (202e4 <statics_init+0x44>)
   202c0:	f007 f990 	bl	275e4 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   202c4:	4620      	mov	r0, r4
   202c6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   202ca:	f00b fcd5 	bl	2bc78 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   202ce:	3418      	adds	r4, #24
   202d0:	e7e9      	b.n	202a6 <statics_init+0x6>
   202d2:	d3f7      	bcc.n	202c4 <statics_init+0x24>
		}
	}
	return 0;
}
   202d4:	2000      	movs	r0, #0
   202d6:	bd38      	pop	{r3, r4, r5, pc}
   202d8:	20008acc 	.word	0x20008acc
   202dc:	20008ae4 	.word	0x20008ae4
   202e0:	0003371d 	.word	0x0003371d
   202e4:	000336fb 	.word	0x000336fb
   202e8:	0002e715 	.word	0x0002e715
   202ec:	0002f82e 	.word	0x0002f82e

000202f0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   202f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202f4:	b085      	sub	sp, #20
   202f6:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   202fa:	4680      	mov	r8, r0
   202fc:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   202fe:	4648      	mov	r0, r9
   20300:	4659      	mov	r1, fp
{
   20302:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20304:	f00b fdd6 	bl	2beb4 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   20308:	f1bb 3fff 	cmp.w	fp, #4294967295
   2030c:	bf08      	it	eq
   2030e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20312:	4606      	mov	r6, r0
   20314:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   20316:	bf04      	itt	eq
   20318:	f04f 36ff 	moveq.w	r6, #4294967295
   2031c:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20320:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   20324:	f04f 0320 	mov.w	r3, #32
   20328:	f3ef 8511 	mrs	r5, BASEPRI
   2032c:	f383 8812 	msr	BASEPRI_MAX, r3
   20330:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20334:	4620      	mov	r0, r4
   20336:	f000 fadf 	bl	208f8 <z_spin_lock_valid>
   2033a:	b960      	cbnz	r0, 20356 <k_heap_aligned_alloc+0x66>
   2033c:	2394      	movs	r3, #148	; 0x94
   2033e:	4a33      	ldr	r2, [pc, #204]	; (2040c <k_heap_aligned_alloc+0x11c>)
   20340:	4933      	ldr	r1, [pc, #204]	; (20410 <k_heap_aligned_alloc+0x120>)
   20342:	4834      	ldr	r0, [pc, #208]	; (20414 <k_heap_aligned_alloc+0x124>)
   20344:	f007 f955 	bl	275f2 <assert_print>
   20348:	4621      	mov	r1, r4
   2034a:	4833      	ldr	r0, [pc, #204]	; (20418 <k_heap_aligned_alloc+0x128>)
   2034c:	f007 f951 	bl	275f2 <assert_print>
   20350:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20352:	482e      	ldr	r0, [pc, #184]	; (2040c <k_heap_aligned_alloc+0x11c>)
   20354:	e031      	b.n	203ba <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   20356:	4620      	mov	r0, r4
   20358:	f000 faea 	bl	20930 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2035c:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20360:	b113      	cbz	r3, 20368 <k_heap_aligned_alloc+0x78>
   20362:	ea5b 0909 	orrs.w	r9, fp, r9
   20366:	d11d      	bne.n	203a4 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20368:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2036c:	4652      	mov	r2, sl
   2036e:	4640      	mov	r0, r8
   20370:	9903      	ldr	r1, [sp, #12]
   20372:	f7ed fcc5 	bl	dd00 <sys_heap_aligned_alloc>
   20376:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   20378:	f003 f88c 	bl	23494 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2037c:	f1b9 0f00 	cmp.w	r9, #0
   20380:	d01d      	beq.n	203be <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20382:	4620      	mov	r0, r4
   20384:	f000 fac6 	bl	20914 <z_spin_unlock_valid>
   20388:	2800      	cmp	r0, #0
   2038a:	d137      	bne.n	203fc <k_heap_aligned_alloc+0x10c>
   2038c:	23c2      	movs	r3, #194	; 0xc2
   2038e:	4a1f      	ldr	r2, [pc, #124]	; (2040c <k_heap_aligned_alloc+0x11c>)
   20390:	4922      	ldr	r1, [pc, #136]	; (2041c <k_heap_aligned_alloc+0x12c>)
   20392:	4820      	ldr	r0, [pc, #128]	; (20414 <k_heap_aligned_alloc+0x124>)
   20394:	f007 f92d 	bl	275f2 <assert_print>
   20398:	4621      	mov	r1, r4
   2039a:	4821      	ldr	r0, [pc, #132]	; (20420 <k_heap_aligned_alloc+0x130>)
   2039c:	f007 f929 	bl	275f2 <assert_print>
   203a0:	21c2      	movs	r1, #194	; 0xc2
   203a2:	e7d6      	b.n	20352 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   203a4:	491f      	ldr	r1, [pc, #124]	; (20424 <k_heap_aligned_alloc+0x134>)
   203a6:	234c      	movs	r3, #76	; 0x4c
   203a8:	4a1f      	ldr	r2, [pc, #124]	; (20428 <k_heap_aligned_alloc+0x138>)
   203aa:	481a      	ldr	r0, [pc, #104]	; (20414 <k_heap_aligned_alloc+0x124>)
   203ac:	f007 f921 	bl	275f2 <assert_print>
   203b0:	481e      	ldr	r0, [pc, #120]	; (2042c <k_heap_aligned_alloc+0x13c>)
   203b2:	f007 f91e 	bl	275f2 <assert_print>
   203b6:	214c      	movs	r1, #76	; 0x4c
   203b8:	481b      	ldr	r0, [pc, #108]	; (20428 <k_heap_aligned_alloc+0x138>)
   203ba:	f007 f913 	bl	275e4 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   203be:	1a30      	subs	r0, r6, r0
   203c0:	eb67 0101 	sbc.w	r1, r7, r1
   203c4:	2801      	cmp	r0, #1
   203c6:	f171 0300 	sbcs.w	r3, r1, #0
   203ca:	dbda      	blt.n	20382 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   203cc:	e9cd 0100 	strd	r0, r1, [sp]
   203d0:	465a      	mov	r2, fp
   203d2:	4629      	mov	r1, r5
   203d4:	4620      	mov	r0, r4
   203d6:	f002 f827 	bl	22428 <z_pend_curr>
   203da:	f04f 0320 	mov.w	r3, #32
   203de:	f3ef 8511 	mrs	r5, BASEPRI
   203e2:	f383 8812 	msr	BASEPRI_MAX, r3
   203e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   203ea:	4620      	mov	r0, r4
   203ec:	f000 fa84 	bl	208f8 <z_spin_lock_valid>
   203f0:	2800      	cmp	r0, #0
   203f2:	d0a3      	beq.n	2033c <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   203f4:	4620      	mov	r0, r4
   203f6:	f000 fa9b 	bl	20930 <z_spin_lock_set_owner>
	return k;
   203fa:	e7b7      	b.n	2036c <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   203fc:	f385 8811 	msr	BASEPRI, r5
   20400:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   20404:	4648      	mov	r0, r9
   20406:	b005      	add	sp, #20
   20408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2040c:	0002f55d 	.word	0x0002f55d
   20410:	0002f5b6 	.word	0x0002f5b6
   20414:	0002e715 	.word	0x0002e715
   20418:	0002f5cb 	.word	0x0002f5cb
   2041c:	0002f58a 	.word	0x0002f58a
   20420:	0002f5a1 	.word	0x0002f5a1
   20424:	00033733 	.word	0x00033733
   20428:	000336fb 	.word	0x000336fb
   2042c:	00032363 	.word	0x00032363

00020430 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   20430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20432:	4605      	mov	r5, r0
   20434:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20436:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   2043a:	f04f 0320 	mov.w	r3, #32
   2043e:	f3ef 8711 	mrs	r7, BASEPRI
   20442:	f383 8812 	msr	BASEPRI_MAX, r3
   20446:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2044a:	4620      	mov	r0, r4
   2044c:	f000 fa54 	bl	208f8 <z_spin_lock_valid>
   20450:	b968      	cbnz	r0, 2046e <k_heap_free+0x3e>
   20452:	2394      	movs	r3, #148	; 0x94
   20454:	4a19      	ldr	r2, [pc, #100]	; (204bc <k_heap_free+0x8c>)
   20456:	491a      	ldr	r1, [pc, #104]	; (204c0 <k_heap_free+0x90>)
   20458:	481a      	ldr	r0, [pc, #104]	; (204c4 <k_heap_free+0x94>)
   2045a:	f007 f8ca 	bl	275f2 <assert_print>
   2045e:	4621      	mov	r1, r4
   20460:	4819      	ldr	r0, [pc, #100]	; (204c8 <k_heap_free+0x98>)
   20462:	f007 f8c6 	bl	275f2 <assert_print>
   20466:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20468:	4814      	ldr	r0, [pc, #80]	; (204bc <k_heap_free+0x8c>)
   2046a:	f007 f8bb 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2046e:	4620      	mov	r0, r4
   20470:	f000 fa5e 	bl	20930 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   20474:	4628      	mov	r0, r5
   20476:	4631      	mov	r1, r6
   20478:	f7ed fbfc 	bl	dc74 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2047c:	f105 000c 	add.w	r0, r5, #12
   20480:	f00b fcfe 	bl	2be80 <z_unpend_all>
   20484:	b128      	cbz	r0, 20492 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   20486:	4639      	mov	r1, r7
   20488:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2048a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   2048e:	f001 bcfd 	b.w	21e8c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20492:	4620      	mov	r0, r4
   20494:	f000 fa3e 	bl	20914 <z_spin_unlock_valid>
   20498:	b958      	cbnz	r0, 204b2 <k_heap_free+0x82>
   2049a:	23c2      	movs	r3, #194	; 0xc2
   2049c:	4a07      	ldr	r2, [pc, #28]	; (204bc <k_heap_free+0x8c>)
   2049e:	490b      	ldr	r1, [pc, #44]	; (204cc <k_heap_free+0x9c>)
   204a0:	4808      	ldr	r0, [pc, #32]	; (204c4 <k_heap_free+0x94>)
   204a2:	f007 f8a6 	bl	275f2 <assert_print>
   204a6:	4621      	mov	r1, r4
   204a8:	4809      	ldr	r0, [pc, #36]	; (204d0 <k_heap_free+0xa0>)
   204aa:	f007 f8a2 	bl	275f2 <assert_print>
   204ae:	21c2      	movs	r1, #194	; 0xc2
   204b0:	e7da      	b.n	20468 <k_heap_free+0x38>
	__asm__ volatile(
   204b2:	f387 8811 	msr	BASEPRI, r7
   204b6:	f3bf 8f6f 	isb	sy
}
   204ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   204bc:	0002f55d 	.word	0x0002f55d
   204c0:	0002f5b6 	.word	0x0002f5b6
   204c4:	0002e715 	.word	0x0002e715
   204c8:	0002f5cb 	.word	0x0002f5cb
   204cc:	0002f58a 	.word	0x0002f58a
   204d0:	0002f5a1 	.word	0x0002f5a1

000204d4 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   204d4:	2000      	movs	r0, #0
{
   204d6:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   204d8:	4c0c      	ldr	r4, [pc, #48]	; (2050c <init_mem_slab_module+0x38>)
   204da:	4d0d      	ldr	r5, [pc, #52]	; (20510 <init_mem_slab_module+0x3c>)
   204dc:	42ac      	cmp	r4, r5
   204de:	d913      	bls.n	20508 <init_mem_slab_module+0x34>
   204e0:	490c      	ldr	r1, [pc, #48]	; (20514 <init_mem_slab_module+0x40>)
   204e2:	233d      	movs	r3, #61	; 0x3d
   204e4:	4a0c      	ldr	r2, [pc, #48]	; (20518 <init_mem_slab_module+0x44>)
   204e6:	480d      	ldr	r0, [pc, #52]	; (2051c <init_mem_slab_module+0x48>)
   204e8:	f007 f883 	bl	275f2 <assert_print>
   204ec:	480c      	ldr	r0, [pc, #48]	; (20520 <init_mem_slab_module+0x4c>)
   204ee:	f007 f880 	bl	275f2 <assert_print>
   204f2:	213d      	movs	r1, #61	; 0x3d
   204f4:	4808      	ldr	r0, [pc, #32]	; (20518 <init_mem_slab_module+0x44>)
   204f6:	f007 f875 	bl	275e4 <assert_post_action>
		rc = create_free_list(slab);
   204fa:	4620      	mov	r0, r4
   204fc:	f00b fbc4 	bl	2bc88 <create_free_list>
		if (rc < 0) {
   20500:	2800      	cmp	r0, #0
   20502:	db02      	blt.n	2050a <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20504:	3420      	adds	r4, #32
   20506:	e7e9      	b.n	204dc <init_mem_slab_module+0x8>
   20508:	d3f7      	bcc.n	204fa <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   2050a:	bd38      	pop	{r3, r4, r5, pc}
   2050c:	20008a6c 	.word	0x20008a6c
   20510:	20008acc 	.word	0x20008acc
   20514:	0003379e 	.word	0x0003379e
   20518:	00033779 	.word	0x00033779
   2051c:	0002e715 	.word	0x0002e715
   20520:	0002f82e 	.word	0x0002f82e

00020524 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   20524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20528:	4604      	mov	r4, r0
   2052a:	460e      	mov	r6, r1
   2052c:	4690      	mov	r8, r2
   2052e:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20530:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20534:	f04f 0320 	mov.w	r3, #32
   20538:	f3ef 8911 	mrs	r9, BASEPRI
   2053c:	f383 8812 	msr	BASEPRI_MAX, r3
   20540:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20544:	4628      	mov	r0, r5
   20546:	f000 f9d7 	bl	208f8 <z_spin_lock_valid>
   2054a:	b968      	cbnz	r0, 20568 <k_mem_slab_alloc+0x44>
   2054c:	2394      	movs	r3, #148	; 0x94
   2054e:	4a23      	ldr	r2, [pc, #140]	; (205dc <k_mem_slab_alloc+0xb8>)
   20550:	4923      	ldr	r1, [pc, #140]	; (205e0 <k_mem_slab_alloc+0xbc>)
   20552:	4824      	ldr	r0, [pc, #144]	; (205e4 <k_mem_slab_alloc+0xc0>)
   20554:	f007 f84d 	bl	275f2 <assert_print>
   20558:	4629      	mov	r1, r5
   2055a:	4823      	ldr	r0, [pc, #140]	; (205e8 <k_mem_slab_alloc+0xc4>)
   2055c:	f007 f849 	bl	275f2 <assert_print>
   20560:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20562:	481e      	ldr	r0, [pc, #120]	; (205dc <k_mem_slab_alloc+0xb8>)
   20564:	f007 f83e 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   20568:	4628      	mov	r0, r5
   2056a:	f000 f9e1 	bl	20930 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2056e:	69a3      	ldr	r3, [r4, #24]
   20570:	b1b3      	cbz	r3, 205a0 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   20572:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   20574:	681b      	ldr	r3, [r3, #0]
   20576:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   20578:	69e3      	ldr	r3, [r4, #28]
   2057a:	3301      	adds	r3, #1
   2057c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2057e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20580:	4628      	mov	r0, r5
   20582:	f000 f9c7 	bl	20914 <z_spin_unlock_valid>
   20586:	bb18      	cbnz	r0, 205d0 <k_mem_slab_alloc+0xac>
   20588:	23c2      	movs	r3, #194	; 0xc2
   2058a:	4a14      	ldr	r2, [pc, #80]	; (205dc <k_mem_slab_alloc+0xb8>)
   2058c:	4917      	ldr	r1, [pc, #92]	; (205ec <k_mem_slab_alloc+0xc8>)
   2058e:	4815      	ldr	r0, [pc, #84]	; (205e4 <k_mem_slab_alloc+0xc0>)
   20590:	f007 f82f 	bl	275f2 <assert_print>
   20594:	4629      	mov	r1, r5
   20596:	4816      	ldr	r0, [pc, #88]	; (205f0 <k_mem_slab_alloc+0xcc>)
   20598:	f007 f82b 	bl	275f2 <assert_print>
   2059c:	21c2      	movs	r1, #194	; 0xc2
   2059e:	e7e0      	b.n	20562 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   205a0:	ea58 0207 	orrs.w	r2, r8, r7
   205a4:	d103      	bne.n	205ae <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   205a6:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   205aa:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   205ac:	e7e8      	b.n	20580 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   205ae:	4622      	mov	r2, r4
   205b0:	4649      	mov	r1, r9
   205b2:	4628      	mov	r0, r5
   205b4:	e9cd 8700 	strd	r8, r7, [sp]
   205b8:	f001 ff36 	bl	22428 <z_pend_curr>
		if (result == 0) {
   205bc:	4604      	mov	r4, r0
   205be:	b918      	cbnz	r0, 205c8 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   205c0:	4b0c      	ldr	r3, [pc, #48]	; (205f4 <k_mem_slab_alloc+0xd0>)
   205c2:	689b      	ldr	r3, [r3, #8]
   205c4:	695b      	ldr	r3, [r3, #20]
   205c6:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   205c8:	4620      	mov	r0, r4
   205ca:	b003      	add	sp, #12
   205cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   205d0:	f389 8811 	msr	BASEPRI, r9
   205d4:	f3bf 8f6f 	isb	sy
	return result;
   205d8:	e7f6      	b.n	205c8 <k_mem_slab_alloc+0xa4>
   205da:	bf00      	nop
   205dc:	0002f55d 	.word	0x0002f55d
   205e0:	0002f5b6 	.word	0x0002f5b6
   205e4:	0002e715 	.word	0x0002e715
   205e8:	0002f5cb 	.word	0x0002f5cb
   205ec:	0002f58a 	.word	0x0002f58a
   205f0:	0002f5a1 	.word	0x0002f5a1
   205f4:	2002f720 	.word	0x2002f720

000205f8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   205f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   205fc:	4604      	mov	r4, r0
   205fe:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20600:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20604:	f04f 0320 	mov.w	r3, #32
   20608:	f3ef 8711 	mrs	r7, BASEPRI
   2060c:	f383 8812 	msr	BASEPRI_MAX, r3
   20610:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20614:	4628      	mov	r0, r5
   20616:	f000 f96f 	bl	208f8 <z_spin_lock_valid>
   2061a:	b968      	cbnz	r0, 20638 <k_mem_slab_free+0x40>
   2061c:	2394      	movs	r3, #148	; 0x94
   2061e:	4a21      	ldr	r2, [pc, #132]	; (206a4 <k_mem_slab_free+0xac>)
   20620:	4921      	ldr	r1, [pc, #132]	; (206a8 <k_mem_slab_free+0xb0>)
   20622:	4822      	ldr	r0, [pc, #136]	; (206ac <k_mem_slab_free+0xb4>)
   20624:	f006 ffe5 	bl	275f2 <assert_print>
   20628:	4629      	mov	r1, r5
   2062a:	4821      	ldr	r0, [pc, #132]	; (206b0 <k_mem_slab_free+0xb8>)
   2062c:	f006 ffe1 	bl	275f2 <assert_print>
   20630:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20632:	481c      	ldr	r0, [pc, #112]	; (206a4 <k_mem_slab_free+0xac>)
   20634:	f006 ffd6 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   20638:	4628      	mov	r0, r5
   2063a:	f000 f979 	bl	20930 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2063e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   20642:	f1b8 0f00 	cmp.w	r8, #0
   20646:	d10f      	bne.n	20668 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20648:	4620      	mov	r0, r4
   2064a:	f002 f96b 	bl	22924 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2064e:	b158      	cbz	r0, 20668 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20650:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20652:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20656:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   20658:	f001 fb8c 	bl	21d74 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2065c:	4639      	mov	r1, r7
   2065e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   20664:	f001 bc12 	b.w	21e8c <z_reschedule>
	**(char ***) mem = slab->free_list;
   20668:	6833      	ldr	r3, [r6, #0]
   2066a:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2066c:	4628      	mov	r0, r5
   2066e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20670:	6833      	ldr	r3, [r6, #0]
   20672:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   20674:	69e3      	ldr	r3, [r4, #28]
   20676:	3b01      	subs	r3, #1
   20678:	61e3      	str	r3, [r4, #28]
   2067a:	f000 f94b 	bl	20914 <z_spin_unlock_valid>
   2067e:	b958      	cbnz	r0, 20698 <k_mem_slab_free+0xa0>
   20680:	23c2      	movs	r3, #194	; 0xc2
   20682:	4a08      	ldr	r2, [pc, #32]	; (206a4 <k_mem_slab_free+0xac>)
   20684:	490b      	ldr	r1, [pc, #44]	; (206b4 <k_mem_slab_free+0xbc>)
   20686:	4809      	ldr	r0, [pc, #36]	; (206ac <k_mem_slab_free+0xb4>)
   20688:	f006 ffb3 	bl	275f2 <assert_print>
   2068c:	4629      	mov	r1, r5
   2068e:	480a      	ldr	r0, [pc, #40]	; (206b8 <k_mem_slab_free+0xc0>)
   20690:	f006 ffaf 	bl	275f2 <assert_print>
   20694:	21c2      	movs	r1, #194	; 0xc2
   20696:	e7cc      	b.n	20632 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   20698:	f387 8811 	msr	BASEPRI, r7
   2069c:	f3bf 8f6f 	isb	sy
}
   206a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   206a4:	0002f55d 	.word	0x0002f55d
   206a8:	0002f5b6 	.word	0x0002f5b6
   206ac:	0002e715 	.word	0x0002e715
   206b0:	0002f5cb 	.word	0x0002f5cb
   206b4:	0002f58a 	.word	0x0002f58a
   206b8:	0002f5a1 	.word	0x0002f5a1

000206bc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   206bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   206be:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   206c0:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   206c2:	2e0f      	cmp	r6, #15
   206c4:	d12a      	bne.n	2071c <z_setup_new_thread+0x60>
   206c6:	4821      	ldr	r0, [pc, #132]	; (2074c <z_setup_new_thread+0x90>)
   206c8:	4283      	cmp	r3, r0
   206ca:	d12b      	bne.n	20724 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   206cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   206d0:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   206d4:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   206d6:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   206d8:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   206da:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   206dc:	3207      	adds	r2, #7
   206de:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   206e2:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   206e6:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   206e8:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   206ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   206ec:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   206ee:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   206f2:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   206f4:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   206f6:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   206f8:	9202      	str	r2, [sp, #8]
   206fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   206fc:	4620      	mov	r0, r4
   206fe:	9201      	str	r2, [sp, #4]
   20700:	9a08      	ldr	r2, [sp, #32]
   20702:	9200      	str	r2, [sp, #0]
   20704:	4632      	mov	r2, r6
   20706:	f7f0 fdcf 	bl	112a8 <arch_new_thread>
	if (!_current) {
   2070a:	4b11      	ldr	r3, [pc, #68]	; (20750 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   2070c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   2070e:	689b      	ldr	r3, [r3, #8]
   20710:	b103      	cbz	r3, 20714 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   20712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   20714:	4630      	mov	r0, r6
   20716:	6763      	str	r3, [r4, #116]	; 0x74
   20718:	b004      	add	sp, #16
   2071a:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2071c:	f106 0010 	add.w	r0, r6, #16
   20720:	281e      	cmp	r0, #30
   20722:	d9d3      	bls.n	206cc <z_setup_new_thread+0x10>
   20724:	f44f 7306 	mov.w	r3, #536	; 0x218
   20728:	4a0a      	ldr	r2, [pc, #40]	; (20754 <z_setup_new_thread+0x98>)
   2072a:	490b      	ldr	r1, [pc, #44]	; (20758 <z_setup_new_thread+0x9c>)
   2072c:	480b      	ldr	r0, [pc, #44]	; (2075c <z_setup_new_thread+0xa0>)
   2072e:	f006 ff60 	bl	275f2 <assert_print>
   20732:	4631      	mov	r1, r6
   20734:	480a      	ldr	r0, [pc, #40]	; (20760 <z_setup_new_thread+0xa4>)
   20736:	f06f 030f 	mvn.w	r3, #15
   2073a:	220e      	movs	r2, #14
   2073c:	f006 ff59 	bl	275f2 <assert_print>
   20740:	f44f 7106 	mov.w	r1, #536	; 0x218
   20744:	4803      	ldr	r0, [pc, #12]	; (20754 <z_setup_new_thread+0x98>)
   20746:	f006 ff4d 	bl	275e4 <assert_post_action>
   2074a:	bf00      	nop
   2074c:	00020941 	.word	0x00020941
   20750:	2002f720 	.word	0x2002f720
   20754:	000337bb 	.word	0x000337bb
   20758:	000337de 	.word	0x000337de
   2075c:	0002e715 	.word	0x0002e715
   20760:	0003385e 	.word	0x0003385e

00020764 <z_impl_k_thread_create>:
{
   20764:	b5f0      	push	{r4, r5, r6, r7, lr}
   20766:	b087      	sub	sp, #28
   20768:	4604      	mov	r4, r0
   2076a:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   2076e:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   20772:	b175      	cbz	r5, 20792 <z_impl_k_thread_create+0x2e>
   20774:	4919      	ldr	r1, [pc, #100]	; (207dc <z_impl_k_thread_create+0x78>)
   20776:	f240 2387 	movw	r3, #647	; 0x287
   2077a:	4a19      	ldr	r2, [pc, #100]	; (207e0 <z_impl_k_thread_create+0x7c>)
   2077c:	4819      	ldr	r0, [pc, #100]	; (207e4 <z_impl_k_thread_create+0x80>)
   2077e:	f006 ff38 	bl	275f2 <assert_print>
   20782:	4819      	ldr	r0, [pc, #100]	; (207e8 <z_impl_k_thread_create+0x84>)
   20784:	f006 ff35 	bl	275f2 <assert_print>
   20788:	f240 2187 	movw	r1, #647	; 0x287
   2078c:	4814      	ldr	r0, [pc, #80]	; (207e0 <z_impl_k_thread_create+0x7c>)
   2078e:	f006 ff29 	bl	275e4 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20792:	9505      	str	r5, [sp, #20]
   20794:	9d10      	ldr	r5, [sp, #64]	; 0x40
   20796:	9504      	str	r5, [sp, #16]
   20798:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2079a:	9503      	str	r5, [sp, #12]
   2079c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2079e:	9502      	str	r5, [sp, #8]
   207a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   207a2:	9501      	str	r5, [sp, #4]
   207a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   207a6:	9500      	str	r5, [sp, #0]
   207a8:	f7ff ff88 	bl	206bc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   207ac:	f1b6 3fff 	cmp.w	r6, #4294967295
   207b0:	bf08      	it	eq
   207b2:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   207b6:	d005      	beq.n	207c4 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   207b8:	ea56 0307 	orrs.w	r3, r6, r7
   207bc:	d105      	bne.n	207ca <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   207be:	4620      	mov	r0, r4
   207c0:	f001 fba6 	bl	21f10 <z_sched_start>
}
   207c4:	4620      	mov	r0, r4
   207c6:	b007      	add	sp, #28
   207c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   207ca:	463a      	mov	r2, r7
   207cc:	4633      	mov	r3, r6
   207ce:	4907      	ldr	r1, [pc, #28]	; (207ec <z_impl_k_thread_create+0x88>)
   207d0:	f104 0018 	add.w	r0, r4, #24
   207d4:	f002 fc16 	bl	23004 <z_add_timeout>
   207d8:	e7f4      	b.n	207c4 <z_impl_k_thread_create+0x60>
   207da:	bf00      	nop
   207dc:	0003388f 	.word	0x0003388f
   207e0:	000337bb 	.word	0x000337bb
   207e4:	0002e715 	.word	0x0002e715
   207e8:	000338a1 	.word	0x000338a1
   207ec:	000227dd 	.word	0x000227dd

000207f0 <z_init_static_threads>:
{
   207f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   207f4:	4c39      	ldr	r4, [pc, #228]	; (208dc <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   207f6:	4d3a      	ldr	r5, [pc, #232]	; (208e0 <z_init_static_threads+0xf0>)
{
   207f8:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   207fa:	42ac      	cmp	r4, r5
   207fc:	4626      	mov	r6, r4
   207fe:	d92a      	bls.n	20856 <z_init_static_threads+0x66>
   20800:	4938      	ldr	r1, [pc, #224]	; (208e4 <z_init_static_threads+0xf4>)
   20802:	f240 23ee 	movw	r3, #750	; 0x2ee
   20806:	4a38      	ldr	r2, [pc, #224]	; (208e8 <z_init_static_threads+0xf8>)
   20808:	4838      	ldr	r0, [pc, #224]	; (208ec <z_init_static_threads+0xfc>)
   2080a:	f006 fef2 	bl	275f2 <assert_print>
   2080e:	4838      	ldr	r0, [pc, #224]	; (208f0 <z_init_static_threads+0x100>)
   20810:	f006 feef 	bl	275f2 <assert_print>
   20814:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   20818:	4833      	ldr	r0, [pc, #204]	; (208e8 <z_init_static_threads+0xf8>)
   2081a:	f006 fee3 	bl	275e4 <assert_post_action>
		z_setup_new_thread(
   2081e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20822:	9305      	str	r3, [sp, #20]
   20824:	f854 3c10 	ldr.w	r3, [r4, #-16]
   20828:	9304      	str	r3, [sp, #16]
   2082a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2082e:	9303      	str	r3, [sp, #12]
   20830:	f854 3c18 	ldr.w	r3, [r4, #-24]
   20834:	9302      	str	r3, [sp, #8]
   20836:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2083a:	9301      	str	r3, [sp, #4]
   2083c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   20840:	9300      	str	r3, [sp, #0]
   20842:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   20846:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2084a:	f7ff ff37 	bl	206bc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2084e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   20852:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   20854:	e7d1      	b.n	207fa <z_init_static_threads+0xa>
   20856:	42ae      	cmp	r6, r5
   20858:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2085c:	d3df      	bcc.n	2081e <z_init_static_threads+0x2e>
	k_sched_lock();
   2085e:	f001 fba9 	bl	21fb4 <k_sched_lock>
   20862:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   20866:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   2086a:	4c1c      	ldr	r4, [pc, #112]	; (208dc <z_init_static_threads+0xec>)
   2086c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 208f4 <z_init_static_threads+0x104>
   20870:	42ac      	cmp	r4, r5
   20872:	d92c      	bls.n	208ce <z_init_static_threads+0xde>
   20874:	491b      	ldr	r1, [pc, #108]	; (208e4 <z_init_static_threads+0xf4>)
   20876:	f240 330d 	movw	r3, #781	; 0x30d
   2087a:	4a1b      	ldr	r2, [pc, #108]	; (208e8 <z_init_static_threads+0xf8>)
   2087c:	481b      	ldr	r0, [pc, #108]	; (208ec <z_init_static_threads+0xfc>)
   2087e:	f006 feb8 	bl	275f2 <assert_print>
   20882:	481b      	ldr	r0, [pc, #108]	; (208f0 <z_init_static_threads+0x100>)
   20884:	f006 feb5 	bl	275f2 <assert_print>
   20888:	f240 310d 	movw	r1, #781	; 0x30d
   2088c:	e7c4      	b.n	20818 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2088e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20890:	1c5a      	adds	r2, r3, #1
   20892:	d00d      	beq.n	208b0 <z_init_static_threads+0xc0>
   20894:	2100      	movs	r1, #0
   20896:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   20898:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2089c:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   208a0:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   208a4:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   208a8:	d104      	bne.n	208b4 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   208aa:	4640      	mov	r0, r8
   208ac:	f001 fb30 	bl	21f10 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   208b0:	3430      	adds	r4, #48	; 0x30
   208b2:	e7dd      	b.n	20870 <z_init_static_threads+0x80>
   208b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   208b8:	2300      	movs	r3, #0
   208ba:	f7e8 fb19 	bl	8ef0 <__aeabi_uldivmod>
   208be:	4602      	mov	r2, r0
   208c0:	460b      	mov	r3, r1
   208c2:	f108 0018 	add.w	r0, r8, #24
   208c6:	4649      	mov	r1, r9
   208c8:	f002 fb9c 	bl	23004 <z_add_timeout>
   208cc:	e7f0      	b.n	208b0 <z_init_static_threads+0xc0>
   208ce:	d3de      	bcc.n	2088e <z_init_static_threads+0x9e>
}
   208d0:	b007      	add	sp, #28
   208d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   208d6:	f001 bbd9 	b.w	2208c <k_sched_unlock>
   208da:	bf00      	nop
   208dc:	0002d3b4 	.word	0x0002d3b4
   208e0:	0002d534 	.word	0x0002d534
   208e4:	000338c6 	.word	0x000338c6
   208e8:	000337bb 	.word	0x000337bb
   208ec:	0002e715 	.word	0x0002e715
   208f0:	0002f82e 	.word	0x0002f82e
   208f4:	000227dd 	.word	0x000227dd

000208f8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   208f8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   208fa:	b138      	cbz	r0, 2090c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   208fc:	4b04      	ldr	r3, [pc, #16]	; (20910 <z_spin_lock_valid+0x18>)
   208fe:	f000 0003 	and.w	r0, r0, #3
   20902:	7d1b      	ldrb	r3, [r3, #20]
   20904:	1ac0      	subs	r0, r0, r3
   20906:	bf18      	it	ne
   20908:	2001      	movne	r0, #1
   2090a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2090c:	2001      	movs	r0, #1
}
   2090e:	4770      	bx	lr
   20910:	2002f720 	.word	0x2002f720

00020914 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   20914:	4a05      	ldr	r2, [pc, #20]	; (2092c <z_spin_unlock_valid+0x18>)
{
   20916:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   20918:	7d11      	ldrb	r1, [r2, #20]
   2091a:	6892      	ldr	r2, [r2, #8]
   2091c:	430a      	orrs	r2, r1
   2091e:	6801      	ldr	r1, [r0, #0]
   20920:	2000      	movs	r0, #0
   20922:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   20924:	bf04      	itt	eq
   20926:	6018      	streq	r0, [r3, #0]
	return true;
   20928:	2001      	moveq	r0, #1
}
   2092a:	4770      	bx	lr
   2092c:	2002f720 	.word	0x2002f720

00020930 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   20930:	4b02      	ldr	r3, [pc, #8]	; (2093c <z_spin_lock_set_owner+0xc>)
   20932:	7d1a      	ldrb	r2, [r3, #20]
   20934:	689b      	ldr	r3, [r3, #8]
   20936:	4313      	orrs	r3, r2
   20938:	6003      	str	r3, [r0, #0]
}
   2093a:	4770      	bx	lr
   2093c:	2002f720 	.word	0x2002f720

00020940 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   20940:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20942:	4c13      	ldr	r4, [pc, #76]	; (20990 <idle+0x50>)
   20944:	68a3      	ldr	r3, [r4, #8]
   20946:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2094a:	2b00      	cmp	r3, #0
   2094c:	db10      	blt.n	20970 <idle+0x30>
   2094e:	4d11      	ldr	r5, [pc, #68]	; (20994 <idle+0x54>)
	__asm__ volatile(
   20950:	f04f 0220 	mov.w	r2, #32
   20954:	f3ef 8311 	mrs	r3, BASEPRI
   20958:	f382 8812 	msr	BASEPRI_MAX, r2
   2095c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   20960:	f002 fc62 	bl	23228 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20964:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   20966:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20968:	b963      	cbnz	r3, 20984 <idle+0x44>
	arch_cpu_idle();
   2096a:	f7f0 fb59 	bl	11020 <arch_cpu_idle>
}
   2096e:	e7ef      	b.n	20950 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20970:	4909      	ldr	r1, [pc, #36]	; (20998 <idle+0x58>)
   20972:	480a      	ldr	r0, [pc, #40]	; (2099c <idle+0x5c>)
   20974:	2327      	movs	r3, #39	; 0x27
   20976:	4a0a      	ldr	r2, [pc, #40]	; (209a0 <idle+0x60>)
   20978:	f006 fe3b 	bl	275f2 <assert_print>
   2097c:	2127      	movs	r1, #39	; 0x27
   2097e:	4808      	ldr	r0, [pc, #32]	; (209a0 <idle+0x60>)
   20980:	f006 fe30 	bl	275e4 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20984:	f7f0 f884 	bl	10a90 <pm_system_suspend>
   20988:	2800      	cmp	r0, #0
   2098a:	d1e1      	bne.n	20950 <idle+0x10>
   2098c:	e7ed      	b.n	2096a <idle+0x2a>
   2098e:	bf00      	nop
   20990:	2002f720 	.word	0x2002f720
   20994:	2003069e 	.word	0x2003069e
   20998:	00033914 	.word	0x00033914
   2099c:	0002e715 	.word	0x0002e715
   209a0:	000338f3 	.word	0x000338f3

000209a4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   209a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   209a8:	4604      	mov	r4, r0
   209aa:	4617      	mov	r7, r2
   209ac:	461e      	mov	r6, r3
   209ae:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   209b2:	b165      	cbz	r5, 209ce <z_impl_k_mutex_lock+0x2a>
   209b4:	4958      	ldr	r1, [pc, #352]	; (20b18 <z_impl_k_mutex_lock+0x174>)
   209b6:	2365      	movs	r3, #101	; 0x65
   209b8:	4a58      	ldr	r2, [pc, #352]	; (20b1c <z_impl_k_mutex_lock+0x178>)
   209ba:	4859      	ldr	r0, [pc, #356]	; (20b20 <z_impl_k_mutex_lock+0x17c>)
   209bc:	f006 fe19 	bl	275f2 <assert_print>
   209c0:	4858      	ldr	r0, [pc, #352]	; (20b24 <z_impl_k_mutex_lock+0x180>)
   209c2:	f006 fe16 	bl	275f2 <assert_print>
   209c6:	2165      	movs	r1, #101	; 0x65
   209c8:	4854      	ldr	r0, [pc, #336]	; (20b1c <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   209ca:	f006 fe0b 	bl	275e4 <assert_post_action>
   209ce:	f04f 0320 	mov.w	r3, #32
   209d2:	f3ef 8811 	mrs	r8, BASEPRI
   209d6:	f383 8812 	msr	BASEPRI_MAX, r3
   209da:	f3bf 8f6f 	isb	sy
   209de:	4852      	ldr	r0, [pc, #328]	; (20b28 <z_impl_k_mutex_lock+0x184>)
   209e0:	f7ff ff8a 	bl	208f8 <z_spin_lock_valid>
   209e4:	b960      	cbnz	r0, 20a00 <z_impl_k_mutex_lock+0x5c>
   209e6:	2394      	movs	r3, #148	; 0x94
   209e8:	4a50      	ldr	r2, [pc, #320]	; (20b2c <z_impl_k_mutex_lock+0x188>)
   209ea:	4951      	ldr	r1, [pc, #324]	; (20b30 <z_impl_k_mutex_lock+0x18c>)
   209ec:	484c      	ldr	r0, [pc, #304]	; (20b20 <z_impl_k_mutex_lock+0x17c>)
   209ee:	f006 fe00 	bl	275f2 <assert_print>
   209f2:	494d      	ldr	r1, [pc, #308]	; (20b28 <z_impl_k_mutex_lock+0x184>)
   209f4:	484f      	ldr	r0, [pc, #316]	; (20b34 <z_impl_k_mutex_lock+0x190>)
   209f6:	f006 fdfc 	bl	275f2 <assert_print>
   209fa:	2194      	movs	r1, #148	; 0x94
   209fc:	484b      	ldr	r0, [pc, #300]	; (20b2c <z_impl_k_mutex_lock+0x188>)
   209fe:	e7e4      	b.n	209ca <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   20a00:	4849      	ldr	r0, [pc, #292]	; (20b28 <z_impl_k_mutex_lock+0x184>)
   20a02:	f7ff ff95 	bl	20930 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20a06:	68e3      	ldr	r3, [r4, #12]
   20a08:	4a4b      	ldr	r2, [pc, #300]	; (20b38 <z_impl_k_mutex_lock+0x194>)
   20a0a:	b19b      	cbz	r3, 20a34 <z_impl_k_mutex_lock+0x90>
   20a0c:	68a0      	ldr	r0, [r4, #8]
   20a0e:	6891      	ldr	r1, [r2, #8]
   20a10:	4288      	cmp	r0, r1
   20a12:	d027      	beq.n	20a64 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   20a14:	ea57 0306 	orrs.w	r3, r7, r6
   20a18:	d12c      	bne.n	20a74 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a1a:	4843      	ldr	r0, [pc, #268]	; (20b28 <z_impl_k_mutex_lock+0x184>)
   20a1c:	f7ff ff7a 	bl	20914 <z_spin_unlock_valid>
   20a20:	b1a0      	cbz	r0, 20a4c <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   20a22:	f388 8811 	msr	BASEPRI, r8
   20a26:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   20a2a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   20a2e:	b002      	add	sp, #8
   20a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20a34:	6891      	ldr	r1, [r2, #8]
   20a36:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   20a3a:	3301      	adds	r3, #1
   20a3c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   20a3e:	6893      	ldr	r3, [r2, #8]
   20a40:	4839      	ldr	r0, [pc, #228]	; (20b28 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   20a42:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   20a44:	60a3      	str	r3, [r4, #8]
   20a46:	f7ff ff65 	bl	20914 <z_spin_unlock_valid>
   20a4a:	b968      	cbnz	r0, 20a68 <z_impl_k_mutex_lock+0xc4>
   20a4c:	23c2      	movs	r3, #194	; 0xc2
   20a4e:	4a37      	ldr	r2, [pc, #220]	; (20b2c <z_impl_k_mutex_lock+0x188>)
   20a50:	493a      	ldr	r1, [pc, #232]	; (20b3c <z_impl_k_mutex_lock+0x198>)
   20a52:	4833      	ldr	r0, [pc, #204]	; (20b20 <z_impl_k_mutex_lock+0x17c>)
   20a54:	f006 fdcd 	bl	275f2 <assert_print>
   20a58:	4933      	ldr	r1, [pc, #204]	; (20b28 <z_impl_k_mutex_lock+0x184>)
   20a5a:	4839      	ldr	r0, [pc, #228]	; (20b40 <z_impl_k_mutex_lock+0x19c>)
   20a5c:	f006 fdc9 	bl	275f2 <assert_print>
   20a60:	21c2      	movs	r1, #194	; 0xc2
   20a62:	e7cb      	b.n	209fc <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   20a64:	6921      	ldr	r1, [r4, #16]
   20a66:	e7e8      	b.n	20a3a <z_impl_k_mutex_lock+0x96>
   20a68:	f388 8811 	msr	BASEPRI, r8
   20a6c:	f3bf 8f6f 	isb	sy
		return 0;
   20a70:	2000      	movs	r0, #0
   20a72:	e7dc      	b.n	20a2e <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20a74:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20a78:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   20a7c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   20a80:	4299      	cmp	r1, r3
   20a82:	bfa8      	it	ge
   20a84:	4619      	movge	r1, r3
   20a86:	4291      	cmp	r1, r2
   20a88:	bfb8      	it	lt
   20a8a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20a8c:	428b      	cmp	r3, r1
   20a8e:	dd02      	ble.n	20a96 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   20a90:	f00b f924 	bl	2bcdc <adjust_owner_prio.isra.0>
   20a94:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20a96:	4622      	mov	r2, r4
   20a98:	4641      	mov	r1, r8
   20a9a:	e9cd 7600 	strd	r7, r6, [sp]
   20a9e:	4822      	ldr	r0, [pc, #136]	; (20b28 <z_impl_k_mutex_lock+0x184>)
   20aa0:	f001 fcc2 	bl	22428 <z_pend_curr>
	if (got_mutex == 0) {
   20aa4:	2800      	cmp	r0, #0
   20aa6:	d0e3      	beq.n	20a70 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   20aa8:	f04f 0320 	mov.w	r3, #32
   20aac:	f3ef 8611 	mrs	r6, BASEPRI
   20ab0:	f383 8812 	msr	BASEPRI_MAX, r3
   20ab4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ab8:	481b      	ldr	r0, [pc, #108]	; (20b28 <z_impl_k_mutex_lock+0x184>)
   20aba:	f7ff ff1d 	bl	208f8 <z_spin_lock_valid>
   20abe:	2800      	cmp	r0, #0
   20ac0:	d091      	beq.n	209e6 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   20ac2:	4819      	ldr	r0, [pc, #100]	; (20b28 <z_impl_k_mutex_lock+0x184>)
   20ac4:	f7ff ff34 	bl	20930 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   20ac8:	68a0      	ldr	r0, [r4, #8]
   20aca:	b1c0      	cbz	r0, 20afe <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20acc:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   20ace:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20ad0:	429c      	cmp	r4, r3
   20ad2:	d00a      	beq.n	20aea <z_impl_k_mutex_lock+0x146>
   20ad4:	b14b      	cbz	r3, 20aea <z_impl_k_mutex_lock+0x146>
   20ad6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20ada:	4299      	cmp	r1, r3
   20adc:	bfa8      	it	ge
   20ade:	4619      	movge	r1, r3
   20ae0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   20ae4:	4299      	cmp	r1, r3
   20ae6:	bfb8      	it	lt
   20ae8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   20aea:	f00b f8f7 	bl	2bcdc <adjust_owner_prio.isra.0>
   20aee:	b130      	cbz	r0, 20afe <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   20af0:	4631      	mov	r1, r6
   20af2:	480d      	ldr	r0, [pc, #52]	; (20b28 <z_impl_k_mutex_lock+0x184>)
   20af4:	f001 f9ca 	bl	21e8c <z_reschedule>
	return -EAGAIN;
   20af8:	f06f 000a 	mvn.w	r0, #10
   20afc:	e797      	b.n	20a2e <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   20afe:	2d00      	cmp	r5, #0
   20b00:	d1f6      	bne.n	20af0 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b02:	4809      	ldr	r0, [pc, #36]	; (20b28 <z_impl_k_mutex_lock+0x184>)
   20b04:	f7ff ff06 	bl	20914 <z_spin_unlock_valid>
   20b08:	2800      	cmp	r0, #0
   20b0a:	d09f      	beq.n	20a4c <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   20b0c:	f386 8811 	msr	BASEPRI, r6
   20b10:	f3bf 8f6f 	isb	sy
   20b14:	e7f0      	b.n	20af8 <z_impl_k_mutex_lock+0x154>
   20b16:	bf00      	nop
   20b18:	0003388f 	.word	0x0003388f
   20b1c:	0003393c 	.word	0x0003393c
   20b20:	0002e715 	.word	0x0002e715
   20b24:	0003395e 	.word	0x0003395e
   20b28:	2002f748 	.word	0x2002f748
   20b2c:	0002f55d 	.word	0x0002f55d
   20b30:	0002f5b6 	.word	0x0002f5b6
   20b34:	0002f5cb 	.word	0x0002f5cb
   20b38:	2002f720 	.word	0x2002f720
   20b3c:	0002f58a 	.word	0x0002f58a
   20b40:	0002f5a1 	.word	0x0002f5a1

00020b44 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20b44:	b570      	push	{r4, r5, r6, lr}
   20b46:	4604      	mov	r4, r0
   20b48:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20b4c:	b166      	cbz	r6, 20b68 <z_impl_k_mutex_unlock+0x24>
   20b4e:	4938      	ldr	r1, [pc, #224]	; (20c30 <z_impl_k_mutex_unlock+0xec>)
   20b50:	23cd      	movs	r3, #205	; 0xcd
   20b52:	4a38      	ldr	r2, [pc, #224]	; (20c34 <z_impl_k_mutex_unlock+0xf0>)
   20b54:	4838      	ldr	r0, [pc, #224]	; (20c38 <z_impl_k_mutex_unlock+0xf4>)
   20b56:	f006 fd4c 	bl	275f2 <assert_print>
   20b5a:	4838      	ldr	r0, [pc, #224]	; (20c3c <z_impl_k_mutex_unlock+0xf8>)
   20b5c:	f006 fd49 	bl	275f2 <assert_print>
   20b60:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20b62:	4834      	ldr	r0, [pc, #208]	; (20c34 <z_impl_k_mutex_unlock+0xf0>)
   20b64:	f006 fd3e 	bl	275e4 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   20b68:	6883      	ldr	r3, [r0, #8]
   20b6a:	2b00      	cmp	r3, #0
   20b6c:	d059      	beq.n	20c22 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   20b6e:	4a34      	ldr	r2, [pc, #208]	; (20c40 <z_impl_k_mutex_unlock+0xfc>)
   20b70:	6892      	ldr	r2, [r2, #8]
   20b72:	4293      	cmp	r3, r2
   20b74:	d158      	bne.n	20c28 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20b76:	68c3      	ldr	r3, [r0, #12]
   20b78:	b93b      	cbnz	r3, 20b8a <z_impl_k_mutex_unlock+0x46>
   20b7a:	4932      	ldr	r1, [pc, #200]	; (20c44 <z_impl_k_mutex_unlock+0x100>)
   20b7c:	23e5      	movs	r3, #229	; 0xe5
   20b7e:	4a2d      	ldr	r2, [pc, #180]	; (20c34 <z_impl_k_mutex_unlock+0xf0>)
   20b80:	482d      	ldr	r0, [pc, #180]	; (20c38 <z_impl_k_mutex_unlock+0xf4>)
   20b82:	f006 fd36 	bl	275f2 <assert_print>
   20b86:	21e5      	movs	r1, #229	; 0xe5
   20b88:	e7eb      	b.n	20b62 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   20b8a:	2b01      	cmp	r3, #1
   20b8c:	d003      	beq.n	20b96 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   20b8e:	3b01      	subs	r3, #1
   20b90:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   20b92:	2000      	movs	r0, #0
}
   20b94:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   20b96:	f04f 0320 	mov.w	r3, #32
   20b9a:	f3ef 8511 	mrs	r5, BASEPRI
   20b9e:	f383 8812 	msr	BASEPRI_MAX, r3
   20ba2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ba6:	4828      	ldr	r0, [pc, #160]	; (20c48 <z_impl_k_mutex_unlock+0x104>)
   20ba8:	f7ff fea6 	bl	208f8 <z_spin_lock_valid>
   20bac:	b960      	cbnz	r0, 20bc8 <z_impl_k_mutex_unlock+0x84>
   20bae:	2394      	movs	r3, #148	; 0x94
   20bb0:	4a26      	ldr	r2, [pc, #152]	; (20c4c <z_impl_k_mutex_unlock+0x108>)
   20bb2:	4927      	ldr	r1, [pc, #156]	; (20c50 <z_impl_k_mutex_unlock+0x10c>)
   20bb4:	4820      	ldr	r0, [pc, #128]	; (20c38 <z_impl_k_mutex_unlock+0xf4>)
   20bb6:	f006 fd1c 	bl	275f2 <assert_print>
   20bba:	4923      	ldr	r1, [pc, #140]	; (20c48 <z_impl_k_mutex_unlock+0x104>)
   20bbc:	4825      	ldr	r0, [pc, #148]	; (20c54 <z_impl_k_mutex_unlock+0x110>)
   20bbe:	f006 fd18 	bl	275f2 <assert_print>
   20bc2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bc4:	4821      	ldr	r0, [pc, #132]	; (20c4c <z_impl_k_mutex_unlock+0x108>)
   20bc6:	e7cd      	b.n	20b64 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   20bc8:	481f      	ldr	r0, [pc, #124]	; (20c48 <z_impl_k_mutex_unlock+0x104>)
   20bca:	f7ff feb1 	bl	20930 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20bce:	6921      	ldr	r1, [r4, #16]
   20bd0:	68a0      	ldr	r0, [r4, #8]
   20bd2:	f00b f883 	bl	2bcdc <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20bd6:	4620      	mov	r0, r4
   20bd8:	f001 fea4 	bl	22924 <z_unpend_first_thread>
	mutex->owner = new_owner;
   20bdc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20bde:	b150      	cbz	r0, 20bf6 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   20be0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20be4:	6122      	str	r2, [r4, #16]
   20be6:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   20be8:	f001 f8c4 	bl	21d74 <z_ready_thread>
		z_reschedule(&lock, key);
   20bec:	4629      	mov	r1, r5
   20bee:	4816      	ldr	r0, [pc, #88]	; (20c48 <z_impl_k_mutex_unlock+0x104>)
   20bf0:	f001 f94c 	bl	21e8c <z_reschedule>
   20bf4:	e7cd      	b.n	20b92 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   20bf6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bf8:	4813      	ldr	r0, [pc, #76]	; (20c48 <z_impl_k_mutex_unlock+0x104>)
   20bfa:	f7ff fe8b 	bl	20914 <z_spin_unlock_valid>
   20bfe:	b958      	cbnz	r0, 20c18 <z_impl_k_mutex_unlock+0xd4>
   20c00:	23c2      	movs	r3, #194	; 0xc2
   20c02:	4a12      	ldr	r2, [pc, #72]	; (20c4c <z_impl_k_mutex_unlock+0x108>)
   20c04:	4914      	ldr	r1, [pc, #80]	; (20c58 <z_impl_k_mutex_unlock+0x114>)
   20c06:	480c      	ldr	r0, [pc, #48]	; (20c38 <z_impl_k_mutex_unlock+0xf4>)
   20c08:	f006 fcf3 	bl	275f2 <assert_print>
   20c0c:	490e      	ldr	r1, [pc, #56]	; (20c48 <z_impl_k_mutex_unlock+0x104>)
   20c0e:	4813      	ldr	r0, [pc, #76]	; (20c5c <z_impl_k_mutex_unlock+0x118>)
   20c10:	f006 fcef 	bl	275f2 <assert_print>
   20c14:	21c2      	movs	r1, #194	; 0xc2
   20c16:	e7d5      	b.n	20bc4 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   20c18:	f385 8811 	msr	BASEPRI, r5
   20c1c:	f3bf 8f6f 	isb	sy
   20c20:	e7b7      	b.n	20b92 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   20c22:	f06f 0015 	mvn.w	r0, #21
   20c26:	e7b5      	b.n	20b94 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   20c28:	f04f 30ff 	mov.w	r0, #4294967295
   20c2c:	e7b2      	b.n	20b94 <z_impl_k_mutex_unlock+0x50>
   20c2e:	bf00      	nop
   20c30:	0003388f 	.word	0x0003388f
   20c34:	0003393c 	.word	0x0003393c
   20c38:	0002e715 	.word	0x0002e715
   20c3c:	0003395e 	.word	0x0003395e
   20c40:	2002f720 	.word	0x2002f720
   20c44:	00033983 	.word	0x00033983
   20c48:	2002f748 	.word	0x2002f748
   20c4c:	0002f55d 	.word	0x0002f55d
   20c50:	0002f5b6 	.word	0x0002f5b6
   20c54:	0002f5cb 	.word	0x0002f5cb
   20c58:	0002f58a 	.word	0x0002f58a
   20c5c:	0002f5a1 	.word	0x0002f5a1

00020c60 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   20c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20c64:	4604      	mov	r4, r0
   20c66:	460e      	mov	r6, r1
   20c68:	4690      	mov	r8, r2
   20c6a:	4699      	mov	r9, r3
   20c6c:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20c70:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20c74:	f04f 0320 	mov.w	r3, #32
   20c78:	f3ef 8711 	mrs	r7, BASEPRI
   20c7c:	f383 8812 	msr	BASEPRI_MAX, r3
   20c80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c84:	4628      	mov	r0, r5
   20c86:	f7ff fe37 	bl	208f8 <z_spin_lock_valid>
   20c8a:	b968      	cbnz	r0, 20ca8 <queue_insert+0x48>
   20c8c:	2394      	movs	r3, #148	; 0x94
   20c8e:	4a3b      	ldr	r2, [pc, #236]	; (20d7c <queue_insert+0x11c>)
   20c90:	493b      	ldr	r1, [pc, #236]	; (20d80 <queue_insert+0x120>)
   20c92:	483c      	ldr	r0, [pc, #240]	; (20d84 <queue_insert+0x124>)
   20c94:	f006 fcad 	bl	275f2 <assert_print>
   20c98:	4629      	mov	r1, r5
   20c9a:	483b      	ldr	r0, [pc, #236]	; (20d88 <queue_insert+0x128>)
   20c9c:	f006 fca9 	bl	275f2 <assert_print>
   20ca0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ca2:	4836      	ldr	r0, [pc, #216]	; (20d7c <queue_insert+0x11c>)
   20ca4:	f006 fc9e 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ca8:	4628      	mov	r0, r5
   20caa:	f7ff fe41 	bl	20930 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   20cae:	f1ba 0f00 	cmp.w	sl, #0
   20cb2:	d000      	beq.n	20cb6 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   20cb4:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20cb6:	f104 000c 	add.w	r0, r4, #12
   20cba:	f001 fe33 	bl	22924 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   20cbe:	b158      	cbz	r0, 20cd8 <queue_insert+0x78>
   20cc0:	2300      	movs	r3, #0
   20cc2:	f8c0 8014 	str.w	r8, [r0, #20]
   20cc6:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   20cc8:	f001 f854 	bl	21d74 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20ccc:	4628      	mov	r0, r5
   20cce:	4639      	mov	r1, r7
   20cd0:	f001 f8dc 	bl	21e8c <z_reschedule>
		return 0;
   20cd4:	2000      	movs	r0, #0
   20cd6:	e01c      	b.n	20d12 <queue_insert+0xb2>
	if (alloc) {
   20cd8:	f1b9 0f00 	cmp.w	r9, #0
   20cdc:	d02b      	beq.n	20d36 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   20cde:	2108      	movs	r1, #8
   20ce0:	f003 f8da 	bl	23e98 <z_thread_aligned_alloc>
		if (anode == NULL) {
   20ce4:	b9b8      	cbnz	r0, 20d16 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ce6:	4628      	mov	r0, r5
   20ce8:	f7ff fe14 	bl	20914 <z_spin_unlock_valid>
   20cec:	b958      	cbnz	r0, 20d06 <queue_insert+0xa6>
   20cee:	23c2      	movs	r3, #194	; 0xc2
   20cf0:	4a22      	ldr	r2, [pc, #136]	; (20d7c <queue_insert+0x11c>)
   20cf2:	4926      	ldr	r1, [pc, #152]	; (20d8c <queue_insert+0x12c>)
   20cf4:	4823      	ldr	r0, [pc, #140]	; (20d84 <queue_insert+0x124>)
   20cf6:	f006 fc7c 	bl	275f2 <assert_print>
   20cfa:	4629      	mov	r1, r5
   20cfc:	4824      	ldr	r0, [pc, #144]	; (20d90 <queue_insert+0x130>)
   20cfe:	f006 fc78 	bl	275f2 <assert_print>
   20d02:	21c2      	movs	r1, #194	; 0xc2
   20d04:	e7cd      	b.n	20ca2 <queue_insert+0x42>
	__asm__ volatile(
   20d06:	f387 8811 	msr	BASEPRI, r7
   20d0a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20d0e:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   20d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   20d16:	2201      	movs	r2, #1
		anode->data = data;
   20d18:	f8c0 8004 	str.w	r8, [r0, #4]
   20d1c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20d1e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d20:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   20d24:	b95e      	cbnz	r6, 20d3e <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d26:	6822      	ldr	r2, [r4, #0]
   20d28:	430a      	orrs	r2, r1
   20d2a:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20d2c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   20d2e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20d30:	b96a      	cbnz	r2, 20d4e <queue_insert+0xee>
	list->tail = node;
   20d32:	6060      	str	r0, [r4, #4]
}
   20d34:	e00b      	b.n	20d4e <queue_insert+0xee>
}
   20d36:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   20d38:	f8c8 9000 	str.w	r9, [r8]
}
   20d3c:	e7ef      	b.n	20d1e <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20d3e:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20d40:	2a03      	cmp	r2, #3
   20d42:	d810      	bhi.n	20d66 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d44:	6001      	str	r1, [r0, #0]
	return list->tail;
   20d46:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   20d48:	b939      	cbnz	r1, 20d5a <queue_insert+0xfa>
	list->head = node;
   20d4a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20d4e:	2104      	movs	r1, #4
   20d50:	f104 0014 	add.w	r0, r4, #20
   20d54:	f00b f984 	bl	2c060 <z_handle_obj_poll_events>
   20d58:	e7b8      	b.n	20ccc <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20d5a:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d5c:	f002 0203 	and.w	r2, r2, #3
   20d60:	4302      	orrs	r2, r0
   20d62:	600a      	str	r2, [r1, #0]
   20d64:	e7e5      	b.n	20d32 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20d66:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d6a:	430a      	orrs	r2, r1
   20d6c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20d6e:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d70:	f002 0203 	and.w	r2, r2, #3
   20d74:	ea40 0302 	orr.w	r3, r0, r2
   20d78:	6033      	str	r3, [r6, #0]
}
   20d7a:	e7e8      	b.n	20d4e <queue_insert+0xee>
   20d7c:	0002f55d 	.word	0x0002f55d
   20d80:	0002f5b6 	.word	0x0002f5b6
   20d84:	0002e715 	.word	0x0002e715
   20d88:	0002f5cb 	.word	0x0002f5cb
   20d8c:	0002f58a 	.word	0x0002f58a
   20d90:	0002f5a1 	.word	0x0002f5a1

00020d94 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20d98:	4606      	mov	r6, r0
   20d9a:	4691      	mov	r9, r2
   20d9c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20d9e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20da2:	f04f 0320 	mov.w	r3, #32
   20da6:	f3ef 8811 	mrs	r8, BASEPRI
   20daa:	f383 8812 	msr	BASEPRI_MAX, r3
   20dae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20db2:	4628      	mov	r0, r5
   20db4:	f7ff fda0 	bl	208f8 <z_spin_lock_valid>
   20db8:	b968      	cbnz	r0, 20dd6 <z_impl_k_queue_get+0x42>
   20dba:	2394      	movs	r3, #148	; 0x94
   20dbc:	4a23      	ldr	r2, [pc, #140]	; (20e4c <z_impl_k_queue_get+0xb8>)
   20dbe:	4924      	ldr	r1, [pc, #144]	; (20e50 <z_impl_k_queue_get+0xbc>)
   20dc0:	4824      	ldr	r0, [pc, #144]	; (20e54 <z_impl_k_queue_get+0xc0>)
   20dc2:	f006 fc16 	bl	275f2 <assert_print>
   20dc6:	4629      	mov	r1, r5
   20dc8:	4823      	ldr	r0, [pc, #140]	; (20e58 <z_impl_k_queue_get+0xc4>)
   20dca:	f006 fc12 	bl	275f2 <assert_print>
   20dce:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20dd0:	481e      	ldr	r0, [pc, #120]	; (20e4c <z_impl_k_queue_get+0xb8>)
   20dd2:	f006 fc07 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   20dd6:	4628      	mov	r0, r5
   20dd8:	f7ff fdaa 	bl	20930 <z_spin_lock_set_owner>
	return list->head;
   20ddc:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20dde:	b1ec      	cbz	r4, 20e1c <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20de0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20de2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20de4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20de8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20dea:	4620      	mov	r0, r4
   20dec:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   20df0:	6033      	str	r3, [r6, #0]
	list->tail = node;
   20df2:	bf08      	it	eq
   20df4:	6073      	streq	r3, [r6, #4]
   20df6:	f00a ff80 	bl	2bcfa <z_queue_node_peek>
   20dfa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20dfc:	4628      	mov	r0, r5
   20dfe:	f7ff fd89 	bl	20914 <z_spin_unlock_valid>
   20e02:	b9d8      	cbnz	r0, 20e3c <z_impl_k_queue_get+0xa8>
   20e04:	23c2      	movs	r3, #194	; 0xc2
   20e06:	4a11      	ldr	r2, [pc, #68]	; (20e4c <z_impl_k_queue_get+0xb8>)
   20e08:	4914      	ldr	r1, [pc, #80]	; (20e5c <z_impl_k_queue_get+0xc8>)
   20e0a:	4812      	ldr	r0, [pc, #72]	; (20e54 <z_impl_k_queue_get+0xc0>)
   20e0c:	f006 fbf1 	bl	275f2 <assert_print>
   20e10:	4629      	mov	r1, r5
   20e12:	4813      	ldr	r0, [pc, #76]	; (20e60 <z_impl_k_queue_get+0xcc>)
   20e14:	f006 fbed 	bl	275f2 <assert_print>
   20e18:	21c2      	movs	r1, #194	; 0xc2
   20e1a:	e7d9      	b.n	20dd0 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20e1c:	ea59 0307 	orrs.w	r3, r9, r7
   20e20:	d0ec      	beq.n	20dfc <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   20e22:	4641      	mov	r1, r8
   20e24:	4628      	mov	r0, r5
   20e26:	e9cd 9700 	strd	r9, r7, [sp]
   20e2a:	f106 020c 	add.w	r2, r6, #12
   20e2e:	f001 fafb 	bl	22428 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   20e32:	b938      	cbnz	r0, 20e44 <z_impl_k_queue_get+0xb0>
   20e34:	4b0b      	ldr	r3, [pc, #44]	; (20e64 <z_impl_k_queue_get+0xd0>)
   20e36:	689b      	ldr	r3, [r3, #8]
   20e38:	695c      	ldr	r4, [r3, #20]
   20e3a:	e003      	b.n	20e44 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   20e3c:	f388 8811 	msr	BASEPRI, r8
   20e40:	f3bf 8f6f 	isb	sy
}
   20e44:	4620      	mov	r0, r4
   20e46:	b003      	add	sp, #12
   20e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20e4c:	0002f55d 	.word	0x0002f55d
   20e50:	0002f5b6 	.word	0x0002f5b6
   20e54:	0002e715 	.word	0x0002e715
   20e58:	0002f5cb 	.word	0x0002f5cb
   20e5c:	0002f58a 	.word	0x0002f58a
   20e60:	0002f5a1 	.word	0x0002f5a1
   20e64:	2002f720 	.word	0x2002f720

00020e68 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20e68:	b538      	push	{r3, r4, r5, lr}
   20e6a:	4604      	mov	r4, r0
	__asm__ volatile(
   20e6c:	f04f 0320 	mov.w	r3, #32
   20e70:	f3ef 8511 	mrs	r5, BASEPRI
   20e74:	f383 8812 	msr	BASEPRI_MAX, r3
   20e78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e7c:	4817      	ldr	r0, [pc, #92]	; (20edc <z_impl_k_sem_give+0x74>)
   20e7e:	f7ff fd3b 	bl	208f8 <z_spin_lock_valid>
   20e82:	b968      	cbnz	r0, 20ea0 <z_impl_k_sem_give+0x38>
   20e84:	2394      	movs	r3, #148	; 0x94
   20e86:	4a16      	ldr	r2, [pc, #88]	; (20ee0 <z_impl_k_sem_give+0x78>)
   20e88:	4916      	ldr	r1, [pc, #88]	; (20ee4 <z_impl_k_sem_give+0x7c>)
   20e8a:	4817      	ldr	r0, [pc, #92]	; (20ee8 <z_impl_k_sem_give+0x80>)
   20e8c:	f006 fbb1 	bl	275f2 <assert_print>
   20e90:	4912      	ldr	r1, [pc, #72]	; (20edc <z_impl_k_sem_give+0x74>)
   20e92:	4816      	ldr	r0, [pc, #88]	; (20eec <z_impl_k_sem_give+0x84>)
   20e94:	f006 fbad 	bl	275f2 <assert_print>
   20e98:	2194      	movs	r1, #148	; 0x94
   20e9a:	4811      	ldr	r0, [pc, #68]	; (20ee0 <z_impl_k_sem_give+0x78>)
   20e9c:	f006 fba2 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ea0:	480e      	ldr	r0, [pc, #56]	; (20edc <z_impl_k_sem_give+0x74>)
   20ea2:	f7ff fd45 	bl	20930 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   20ea6:	4620      	mov	r0, r4
   20ea8:	f001 fd3c 	bl	22924 <z_unpend_first_thread>

	if (thread != NULL) {
   20eac:	b148      	cbz	r0, 20ec2 <z_impl_k_sem_give+0x5a>
   20eae:	2200      	movs	r2, #0
   20eb0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20eb2:	f000 ff5f 	bl	21d74 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20eb6:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   20eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20ebc:	4807      	ldr	r0, [pc, #28]	; (20edc <z_impl_k_sem_give+0x74>)
   20ebe:	f000 bfe5 	b.w	21e8c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20ec2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20ec6:	429a      	cmp	r2, r3
   20ec8:	bf18      	it	ne
   20eca:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20ecc:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20ece:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20ed0:	f104 0010 	add.w	r0, r4, #16
   20ed4:	f00b f8c4 	bl	2c060 <z_handle_obj_poll_events>
}
   20ed8:	e7ed      	b.n	20eb6 <z_impl_k_sem_give+0x4e>
   20eda:	bf00      	nop
   20edc:	2002f74c 	.word	0x2002f74c
   20ee0:	0002f55d 	.word	0x0002f55d
   20ee4:	0002f5b6 	.word	0x0002f5b6
   20ee8:	0002e715 	.word	0x0002e715
   20eec:	0002f5cb 	.word	0x0002f5cb

00020ef0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   20ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20ef2:	4604      	mov	r4, r0
   20ef4:	4616      	mov	r6, r2
   20ef6:	461d      	mov	r5, r3
   20ef8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   20efc:	b17b      	cbz	r3, 20f1e <z_impl_k_sem_take+0x2e>
   20efe:	ea52 0305 	orrs.w	r3, r2, r5
   20f02:	d00c      	beq.n	20f1e <z_impl_k_sem_take+0x2e>
   20f04:	492d      	ldr	r1, [pc, #180]	; (20fbc <z_impl_k_sem_take+0xcc>)
   20f06:	2379      	movs	r3, #121	; 0x79
   20f08:	4a2d      	ldr	r2, [pc, #180]	; (20fc0 <z_impl_k_sem_take+0xd0>)
   20f0a:	482e      	ldr	r0, [pc, #184]	; (20fc4 <z_impl_k_sem_take+0xd4>)
   20f0c:	f006 fb71 	bl	275f2 <assert_print>
   20f10:	482d      	ldr	r0, [pc, #180]	; (20fc8 <z_impl_k_sem_take+0xd8>)
   20f12:	f006 fb6e 	bl	275f2 <assert_print>
   20f16:	2179      	movs	r1, #121	; 0x79
   20f18:	4829      	ldr	r0, [pc, #164]	; (20fc0 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f1a:	f006 fb63 	bl	275e4 <assert_post_action>
   20f1e:	f04f 0320 	mov.w	r3, #32
   20f22:	f3ef 8711 	mrs	r7, BASEPRI
   20f26:	f383 8812 	msr	BASEPRI_MAX, r3
   20f2a:	f3bf 8f6f 	isb	sy
   20f2e:	4827      	ldr	r0, [pc, #156]	; (20fcc <z_impl_k_sem_take+0xdc>)
   20f30:	f7ff fce2 	bl	208f8 <z_spin_lock_valid>
   20f34:	b960      	cbnz	r0, 20f50 <z_impl_k_sem_take+0x60>
   20f36:	2394      	movs	r3, #148	; 0x94
   20f38:	4a25      	ldr	r2, [pc, #148]	; (20fd0 <z_impl_k_sem_take+0xe0>)
   20f3a:	4926      	ldr	r1, [pc, #152]	; (20fd4 <z_impl_k_sem_take+0xe4>)
   20f3c:	4821      	ldr	r0, [pc, #132]	; (20fc4 <z_impl_k_sem_take+0xd4>)
   20f3e:	f006 fb58 	bl	275f2 <assert_print>
   20f42:	4922      	ldr	r1, [pc, #136]	; (20fcc <z_impl_k_sem_take+0xdc>)
   20f44:	4824      	ldr	r0, [pc, #144]	; (20fd8 <z_impl_k_sem_take+0xe8>)
   20f46:	f006 fb54 	bl	275f2 <assert_print>
   20f4a:	2194      	movs	r1, #148	; 0x94
   20f4c:	4820      	ldr	r0, [pc, #128]	; (20fd0 <z_impl_k_sem_take+0xe0>)
   20f4e:	e7e4      	b.n	20f1a <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   20f50:	481e      	ldr	r0, [pc, #120]	; (20fcc <z_impl_k_sem_take+0xdc>)
   20f52:	f7ff fced 	bl	20930 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   20f56:	68a3      	ldr	r3, [r4, #8]
   20f58:	b1c3      	cbz	r3, 20f8c <z_impl_k_sem_take+0x9c>
		sem->count--;
   20f5a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f5c:	481b      	ldr	r0, [pc, #108]	; (20fcc <z_impl_k_sem_take+0xdc>)
   20f5e:	60a3      	str	r3, [r4, #8]
   20f60:	f7ff fcd8 	bl	20914 <z_spin_unlock_valid>
   20f64:	b958      	cbnz	r0, 20f7e <z_impl_k_sem_take+0x8e>
   20f66:	23c2      	movs	r3, #194	; 0xc2
   20f68:	4a19      	ldr	r2, [pc, #100]	; (20fd0 <z_impl_k_sem_take+0xe0>)
   20f6a:	491c      	ldr	r1, [pc, #112]	; (20fdc <z_impl_k_sem_take+0xec>)
   20f6c:	4815      	ldr	r0, [pc, #84]	; (20fc4 <z_impl_k_sem_take+0xd4>)
   20f6e:	f006 fb40 	bl	275f2 <assert_print>
   20f72:	4916      	ldr	r1, [pc, #88]	; (20fcc <z_impl_k_sem_take+0xdc>)
   20f74:	481a      	ldr	r0, [pc, #104]	; (20fe0 <z_impl_k_sem_take+0xf0>)
   20f76:	f006 fb3c 	bl	275f2 <assert_print>
   20f7a:	21c2      	movs	r1, #194	; 0xc2
   20f7c:	e7e6      	b.n	20f4c <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   20f7e:	f387 8811 	msr	BASEPRI, r7
   20f82:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   20f86:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   20f88:	b003      	add	sp, #12
   20f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20f8c:	ea56 0305 	orrs.w	r3, r6, r5
   20f90:	d10b      	bne.n	20faa <z_impl_k_sem_take+0xba>
   20f92:	480e      	ldr	r0, [pc, #56]	; (20fcc <z_impl_k_sem_take+0xdc>)
   20f94:	f7ff fcbe 	bl	20914 <z_spin_unlock_valid>
   20f98:	2800      	cmp	r0, #0
   20f9a:	d0e4      	beq.n	20f66 <z_impl_k_sem_take+0x76>
   20f9c:	f387 8811 	msr	BASEPRI, r7
   20fa0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20fa4:	f06f 000f 	mvn.w	r0, #15
   20fa8:	e7ee      	b.n	20f88 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20faa:	4622      	mov	r2, r4
   20fac:	4639      	mov	r1, r7
   20fae:	e9cd 6500 	strd	r6, r5, [sp]
   20fb2:	4806      	ldr	r0, [pc, #24]	; (20fcc <z_impl_k_sem_take+0xdc>)
   20fb4:	f001 fa38 	bl	22428 <z_pend_curr>
	return ret;
   20fb8:	e7e6      	b.n	20f88 <z_impl_k_sem_take+0x98>
   20fba:	bf00      	nop
   20fbc:	000339ba 	.word	0x000339ba
   20fc0:	0003399a 	.word	0x0003399a
   20fc4:	0002e715 	.word	0x0002e715
   20fc8:	00032363 	.word	0x00032363
   20fcc:	2002f74c 	.word	0x2002f74c
   20fd0:	0002f55d 	.word	0x0002f55d
   20fd4:	0002f5b6 	.word	0x0002f5b6
   20fd8:	0002f5cb 	.word	0x0002f5cb
   20fdc:	0002f58a 	.word	0x0002f58a
   20fe0:	0002f5a1 	.word	0x0002f5a1

00020fe4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   20fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   20fe6:	2400      	movs	r4, #0
   20fe8:	4b08      	ldr	r3, [pc, #32]	; (2100c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   20fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	struct k_work_queue_config cfg = {
   20fee:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   20ff0:	ab02      	add	r3, sp, #8
   20ff2:	9300      	str	r3, [sp, #0]
   20ff4:	4906      	ldr	r1, [pc, #24]	; (21010 <k_sys_work_q_init+0x2c>)
   20ff6:	f04f 33ff 	mov.w	r3, #4294967295
   20ffa:	4806      	ldr	r0, [pc, #24]	; (21014 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   20ffc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   21000:	f000 fac0 	bl	21584 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21004:	4620      	mov	r0, r4
   21006:	b004      	add	sp, #16
   21008:	bd10      	pop	{r4, pc}
   2100a:	bf00      	nop
   2100c:	00033a08 	.word	0x00033a08
   21010:	20041918 	.word	0x20041918
   21014:	20009da8 	.word	0x20009da8

00021018 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   21018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2101c:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2101e:	4e6e      	ldr	r6, [pc, #440]	; (211d8 <work_queue_main+0x1c0>)
	return list->head;
   21020:	4f6e      	ldr	r7, [pc, #440]	; (211dc <work_queue_main+0x1c4>)
   21022:	b085      	sub	sp, #20
	__asm__ volatile(
   21024:	f04f 0320 	mov.w	r3, #32
   21028:	f3ef 8811 	mrs	r8, BASEPRI
   2102c:	f383 8812 	msr	BASEPRI_MAX, r3
   21030:	f3bf 8f6f 	isb	sy
   21034:	4630      	mov	r0, r6
   21036:	f7ff fc5f 	bl	208f8 <z_spin_lock_valid>
   2103a:	b968      	cbnz	r0, 21058 <work_queue_main+0x40>
   2103c:	2394      	movs	r3, #148	; 0x94
   2103e:	4a68      	ldr	r2, [pc, #416]	; (211e0 <work_queue_main+0x1c8>)
   21040:	4968      	ldr	r1, [pc, #416]	; (211e4 <work_queue_main+0x1cc>)
   21042:	4869      	ldr	r0, [pc, #420]	; (211e8 <work_queue_main+0x1d0>)
   21044:	f006 fad5 	bl	275f2 <assert_print>
   21048:	4963      	ldr	r1, [pc, #396]	; (211d8 <work_queue_main+0x1c0>)
   2104a:	4868      	ldr	r0, [pc, #416]	; (211ec <work_queue_main+0x1d4>)
   2104c:	f006 fad1 	bl	275f2 <assert_print>
   21050:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21052:	4863      	ldr	r0, [pc, #396]	; (211e0 <work_queue_main+0x1c8>)
   21054:	f006 fac6 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   21058:	4630      	mov	r0, r6
   2105a:	f7ff fc69 	bl	20930 <z_spin_lock_set_owner>
   2105e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   21062:	b9ad      	cbnz	r5, 21090 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   21064:	2102      	movs	r1, #2
   21066:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   2106a:	f00a fe84 	bl	2bd76 <flag_test_and_clear>
   2106e:	2800      	cmp	r0, #0
   21070:	d135      	bne.n	210de <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21072:	2300      	movs	r3, #0
   21074:	f04f 32ff 	mov.w	r2, #4294967295
   21078:	9302      	str	r3, [sp, #8]
   2107a:	f04f 33ff 	mov.w	r3, #4294967295
   2107e:	4641      	mov	r1, r8
   21080:	e9cd 2300 	strd	r2, r3, [sp]
   21084:	4630      	mov	r0, r6
   21086:	f104 0290 	add.w	r2, r4, #144	; 0x90
   2108a:	f001 ff41 	bl	22f10 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   2108e:	e7c9      	b.n	21024 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21090:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   21094:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21096:	4295      	cmp	r5, r2
	list->tail = node;
   21098:	bf08      	it	eq
   2109a:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   2109e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   210a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210a6:	4630      	mov	r0, r6
   210a8:	f043 0302 	orr.w	r3, r3, #2
   210ac:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   210b0:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   210b2:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   210b6:	f023 0304 	bic.w	r3, r3, #4
   210ba:	f043 0301 	orr.w	r3, r3, #1
   210be:	60eb      	str	r3, [r5, #12]
   210c0:	f7ff fc28 	bl	20914 <z_spin_unlock_valid>
   210c4:	b9a8      	cbnz	r0, 210f2 <work_queue_main+0xda>
   210c6:	23c2      	movs	r3, #194	; 0xc2
   210c8:	4a45      	ldr	r2, [pc, #276]	; (211e0 <work_queue_main+0x1c8>)
   210ca:	4949      	ldr	r1, [pc, #292]	; (211f0 <work_queue_main+0x1d8>)
   210cc:	4846      	ldr	r0, [pc, #280]	; (211e8 <work_queue_main+0x1d0>)
   210ce:	f006 fa90 	bl	275f2 <assert_print>
   210d2:	4941      	ldr	r1, [pc, #260]	; (211d8 <work_queue_main+0x1c0>)
   210d4:	4847      	ldr	r0, [pc, #284]	; (211f4 <work_queue_main+0x1dc>)
   210d6:	f006 fa8c 	bl	275f2 <assert_print>
   210da:	21c2      	movs	r1, #194	; 0xc2
   210dc:	e7b9      	b.n	21052 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   210de:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   210e2:	2200      	movs	r2, #0
   210e4:	2101      	movs	r1, #1
   210e6:	4628      	mov	r0, r5
   210e8:	f001 feb4 	bl	22e54 <z_sched_wake>
   210ec:	2800      	cmp	r0, #0
   210ee:	d1f8      	bne.n	210e2 <work_queue_main+0xca>
   210f0:	e7bf      	b.n	21072 <work_queue_main+0x5a>
	__asm__ volatile(
   210f2:	f388 8811 	msr	BASEPRI, r8
   210f6:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   210fa:	f1b9 0f00 	cmp.w	r9, #0
   210fe:	d10a      	bne.n	21116 <work_queue_main+0xfe>
   21100:	493d      	ldr	r1, [pc, #244]	; (211f8 <work_queue_main+0x1e0>)
   21102:	4839      	ldr	r0, [pc, #228]	; (211e8 <work_queue_main+0x1d0>)
   21104:	f240 239b 	movw	r3, #667	; 0x29b
   21108:	4a3c      	ldr	r2, [pc, #240]	; (211fc <work_queue_main+0x1e4>)
   2110a:	f006 fa72 	bl	275f2 <assert_print>
   2110e:	f240 219b 	movw	r1, #667	; 0x29b
   21112:	483a      	ldr	r0, [pc, #232]	; (211fc <work_queue_main+0x1e4>)
   21114:	e79e      	b.n	21054 <work_queue_main+0x3c>
		handler(work);
   21116:	4628      	mov	r0, r5
   21118:	47c8      	blx	r9
	__asm__ volatile(
   2111a:	f04f 0320 	mov.w	r3, #32
   2111e:	f3ef 8a11 	mrs	sl, BASEPRI
   21122:	f383 8812 	msr	BASEPRI_MAX, r3
   21126:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2112a:	4630      	mov	r0, r6
   2112c:	f7ff fbe4 	bl	208f8 <z_spin_lock_valid>
   21130:	2800      	cmp	r0, #0
   21132:	d083      	beq.n	2103c <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   21134:	4630      	mov	r0, r6
   21136:	f7ff fbfb 	bl	20930 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   2113a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2113c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2113e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21142:	d417      	bmi.n	21174 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   21144:	60ea      	str	r2, [r5, #12]
   21146:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2114a:	4630      	mov	r0, r6
   2114c:	f023 0302 	bic.w	r3, r3, #2
   21150:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   21154:	f3c3 2500 	ubfx	r5, r3, #8, #1
   21158:	f7ff fbdc 	bl	20914 <z_spin_unlock_valid>
   2115c:	2800      	cmp	r0, #0
   2115e:	d0b2      	beq.n	210c6 <work_queue_main+0xae>
	__asm__ volatile(
   21160:	f38a 8811 	msr	BASEPRI, sl
   21164:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   21168:	2d00      	cmp	r5, #0
   2116a:	f47f af5b 	bne.w	21024 <work_queue_main+0xc>
	z_impl_k_yield();
   2116e:	f001 fc35 	bl	229dc <z_impl_k_yield>
}
   21172:	e757      	b.n	21024 <work_queue_main+0xc>
	return list->head;
   21174:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   21176:	f023 0303 	bic.w	r3, r3, #3
   2117a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2117c:	2800      	cmp	r0, #0
   2117e:	d0e2      	beq.n	21146 <work_queue_main+0x12e>
	return node->next;
   21180:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   21184:	46c3      	mov	fp, r8
	return node->next;
   21186:	f8d0 9000 	ldr.w	r9, [r0]
   2118a:	2800      	cmp	r0, #0
   2118c:	d0db      	beq.n	21146 <work_queue_main+0x12e>
		if (wc->work == work) {
   2118e:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   21190:	4602      	mov	r2, r0
		if (wc->work == work) {
   21192:	429d      	cmp	r5, r3
   21194:	d10d      	bne.n	211b2 <work_queue_main+0x19a>
   21196:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21198:	f1b8 0f00 	cmp.w	r8, #0
   2119c:	d112      	bne.n	211c4 <work_queue_main+0x1ac>
   2119e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   211a0:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   211a2:	4283      	cmp	r3, r0
   211a4:	d100      	bne.n	211a8 <work_queue_main+0x190>
	list->tail = node;
   211a6:	607a      	str	r2, [r7, #4]
	parent->next = child;
   211a8:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   211ac:	f7ff fe5c 	bl	20e68 <z_impl_k_sem_give>
}
   211b0:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   211b2:	f1b9 0f00 	cmp.w	r9, #0
   211b6:	d00d      	beq.n	211d4 <work_queue_main+0x1bc>
	return node->next;
   211b8:	f8d9 3000 	ldr.w	r3, [r9]
   211bc:	4648      	mov	r0, r9
   211be:	4690      	mov	r8, r2
   211c0:	4699      	mov	r9, r3
   211c2:	e7e2      	b.n	2118a <work_queue_main+0x172>
	parent->next = child;
   211c4:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   211c8:	687b      	ldr	r3, [r7, #4]
   211ca:	4283      	cmp	r3, r0
	list->tail = node;
   211cc:	bf08      	it	eq
   211ce:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   211d2:	e7e9      	b.n	211a8 <work_queue_main+0x190>
   211d4:	464b      	mov	r3, r9
   211d6:	e7f1      	b.n	211bc <work_queue_main+0x1a4>
   211d8:	2002f758 	.word	0x2002f758
   211dc:	2002f750 	.word	0x2002f750
   211e0:	0002f55d 	.word	0x0002f55d
   211e4:	0002f5b6 	.word	0x0002f5b6
   211e8:	0002e715 	.word	0x0002e715
   211ec:	0002f5cb 	.word	0x0002f5cb
   211f0:	0002f58a 	.word	0x0002f58a
   211f4:	0002f5a1 	.word	0x0002f5a1
   211f8:	00033a32 	.word	0x00033a32
   211fc:	00033a11 	.word	0x00033a11

00021200 <cancel_sync_locked>:
{
   21200:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21202:	68c3      	ldr	r3, [r0, #12]
{
   21204:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   21206:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2120a:	079b      	lsls	r3, r3, #30
{
   2120c:	460c      	mov	r4, r1
	if (ret) {
   2120e:	d50d      	bpl.n	2122c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21210:	2201      	movs	r2, #1
   21212:	2100      	movs	r1, #0
   21214:	f104 0008 	add.w	r0, r4, #8
   21218:	f00a fd9d 	bl	2bd56 <z_impl_k_sem_init>
	parent->next = child;
   2121c:	2300      	movs	r3, #0
   2121e:	6023      	str	r3, [r4, #0]
	return list->tail;
   21220:	4b05      	ldr	r3, [pc, #20]	; (21238 <cancel_sync_locked+0x38>)
	canceler->work = work;
   21222:	6065      	str	r5, [r4, #4]
   21224:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   21226:	b91a      	cbnz	r2, 21230 <cancel_sync_locked+0x30>
	list->head = node;
   21228:	e9c3 4400 	strd	r4, r4, [r3]
}
   2122c:	4630      	mov	r0, r6
   2122e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   21230:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21232:	605c      	str	r4, [r3, #4]
}
   21234:	e7fa      	b.n	2122c <cancel_sync_locked+0x2c>
   21236:	bf00      	nop
   21238:	2002f750 	.word	0x2002f750

0002123c <submit_to_queue_locked>:
{
   2123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2123e:	68c3      	ldr	r3, [r0, #12]
{
   21240:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21242:	079a      	lsls	r2, r3, #30
{
   21244:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21246:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2124a:	d439      	bmi.n	212c0 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2124c:	075b      	lsls	r3, r3, #29
   2124e:	d425      	bmi.n	2129c <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   21250:	680b      	ldr	r3, [r1, #0]
   21252:	b90b      	cbnz	r3, 21258 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   21254:	6883      	ldr	r3, [r0, #8]
   21256:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   21258:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2125a:	07dd      	lsls	r5, r3, #31
   2125c:	d521      	bpl.n	212a2 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   2125e:	68a3      	ldr	r3, [r4, #8]
   21260:	b95b      	cbnz	r3, 2127a <submit_to_queue_locked+0x3e>
   21262:	4928      	ldr	r1, [pc, #160]	; (21304 <submit_to_queue_locked+0xc8>)
   21264:	4828      	ldr	r0, [pc, #160]	; (21308 <submit_to_queue_locked+0xcc>)
   21266:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   2126a:	4a28      	ldr	r2, [pc, #160]	; (2130c <submit_to_queue_locked+0xd0>)
   2126c:	f006 f9c1 	bl	275f2 <assert_print>
   21270:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   21274:	4825      	ldr	r0, [pc, #148]	; (2130c <submit_to_queue_locked+0xd0>)
   21276:	f006 f9b5 	bl	275e4 <assert_post_action>
			ret = 2;
   2127a:	2602      	movs	r6, #2
			*queuep = work->queue;
   2127c:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   2127e:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   21280:	2d00      	cmp	r5, #0
   21282:	d03c      	beq.n	212fe <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21284:	4b22      	ldr	r3, [pc, #136]	; (21310 <submit_to_queue_locked+0xd4>)
   21286:	689b      	ldr	r3, [r3, #8]
   21288:	42ab      	cmp	r3, r5
   2128a:	d00c      	beq.n	212a6 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   2128c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21290:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21292:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21296:	d416      	bmi.n	212c6 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   21298:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2129c:	2300      	movs	r3, #0
   2129e:	603b      	str	r3, [r7, #0]
	return ret;
   212a0:	e027      	b.n	212f2 <submit_to_queue_locked+0xb6>
		ret = 1;
   212a2:	2601      	movs	r6, #1
   212a4:	e7eb      	b.n	2127e <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   212a6:	f00a fd05 	bl	2bcb4 <k_is_in_isr>
   212aa:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   212ae:	2800      	cmp	r0, #0
   212b0:	d1ee      	bne.n	21290 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   212b2:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   212b4:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   212b8:	d5ee      	bpl.n	21298 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   212ba:	b152      	cbz	r2, 212d2 <submit_to_queue_locked+0x96>
   212bc:	075b      	lsls	r3, r3, #29
   212be:	d408      	bmi.n	212d2 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   212c0:	f06f 060f 	mvn.w	r6, #15
   212c4:	e7ea      	b.n	2129c <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   212c6:	2a00      	cmp	r2, #0
   212c8:	d1fa      	bne.n	212c0 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   212ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   212ce:	2b00      	cmp	r3, #0
   212d0:	d1f6      	bne.n	212c0 <submit_to_queue_locked+0x84>
	parent->next = child;
   212d2:	2300      	movs	r3, #0
   212d4:	6023      	str	r3, [r4, #0]
	return list->tail;
   212d6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   212da:	b963      	cbnz	r3, 212f6 <submit_to_queue_locked+0xba>
	list->head = node;
   212dc:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   212e0:	4628      	mov	r0, r5
   212e2:	f00a fd61 	bl	2bda8 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   212e6:	68e3      	ldr	r3, [r4, #12]
   212e8:	f043 0304 	orr.w	r3, r3, #4
   212ec:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   212ee:	683b      	ldr	r3, [r7, #0]
   212f0:	60a3      	str	r3, [r4, #8]
}
   212f2:	4630      	mov	r0, r6
   212f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   212f6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   212f8:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   212fc:	e7f0      	b.n	212e0 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   212fe:	f06f 0615 	mvn.w	r6, #21
   21302:	e7cb      	b.n	2129c <submit_to_queue_locked+0x60>
   21304:	00033a49 	.word	0x00033a49
   21308:	0002e715 	.word	0x0002e715
   2130c:	00033a11 	.word	0x00033a11
   21310:	2002f720 	.word	0x2002f720

00021314 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   21314:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21316:	4604      	mov	r4, r0
	__asm__ volatile(
   21318:	f04f 0320 	mov.w	r3, #32
   2131c:	f3ef 8511 	mrs	r5, BASEPRI
   21320:	f383 8812 	msr	BASEPRI_MAX, r3
   21324:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21328:	481c      	ldr	r0, [pc, #112]	; (2139c <work_timeout+0x88>)
   2132a:	f7ff fae5 	bl	208f8 <z_spin_lock_valid>
   2132e:	b968      	cbnz	r0, 2134c <work_timeout+0x38>
   21330:	2394      	movs	r3, #148	; 0x94
   21332:	4a1b      	ldr	r2, [pc, #108]	; (213a0 <work_timeout+0x8c>)
   21334:	491b      	ldr	r1, [pc, #108]	; (213a4 <work_timeout+0x90>)
   21336:	481c      	ldr	r0, [pc, #112]	; (213a8 <work_timeout+0x94>)
   21338:	f006 f95b 	bl	275f2 <assert_print>
   2133c:	4917      	ldr	r1, [pc, #92]	; (2139c <work_timeout+0x88>)
   2133e:	481b      	ldr	r0, [pc, #108]	; (213ac <work_timeout+0x98>)
   21340:	f006 f957 	bl	275f2 <assert_print>
   21344:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21346:	4816      	ldr	r0, [pc, #88]	; (213a0 <work_timeout+0x8c>)
   21348:	f006 f94c 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2134c:	4813      	ldr	r0, [pc, #76]	; (2139c <work_timeout+0x88>)
   2134e:	f7ff faef 	bl	20930 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   21352:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21354:	2103      	movs	r1, #3
   21356:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   21358:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2135a:	f1a4 0610 	sub.w	r6, r4, #16
   2135e:	f00a fd0a 	bl	2bd76 <flag_test_and_clear>
   21362:	b128      	cbz	r0, 21370 <work_timeout+0x5c>
		queue = dw->queue;
   21364:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   21366:	4630      	mov	r0, r6
   21368:	a901      	add	r1, sp, #4
		queue = dw->queue;
   2136a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2136c:	f7ff ff66 	bl	2123c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21370:	480a      	ldr	r0, [pc, #40]	; (2139c <work_timeout+0x88>)
   21372:	f7ff facf 	bl	20914 <z_spin_unlock_valid>
   21376:	b958      	cbnz	r0, 21390 <work_timeout+0x7c>
   21378:	23c2      	movs	r3, #194	; 0xc2
   2137a:	4a09      	ldr	r2, [pc, #36]	; (213a0 <work_timeout+0x8c>)
   2137c:	490c      	ldr	r1, [pc, #48]	; (213b0 <work_timeout+0x9c>)
   2137e:	480a      	ldr	r0, [pc, #40]	; (213a8 <work_timeout+0x94>)
   21380:	f006 f937 	bl	275f2 <assert_print>
   21384:	4905      	ldr	r1, [pc, #20]	; (2139c <work_timeout+0x88>)
   21386:	480b      	ldr	r0, [pc, #44]	; (213b4 <work_timeout+0xa0>)
   21388:	f006 f933 	bl	275f2 <assert_print>
   2138c:	21c2      	movs	r1, #194	; 0xc2
   2138e:	e7da      	b.n	21346 <work_timeout+0x32>
	__asm__ volatile(
   21390:	f385 8811 	msr	BASEPRI, r5
   21394:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   21398:	b002      	add	sp, #8
   2139a:	bd70      	pop	{r4, r5, r6, pc}
   2139c:	2002f758 	.word	0x2002f758
   213a0:	0002f55d 	.word	0x0002f55d
   213a4:	0002f5b6 	.word	0x0002f5b6
   213a8:	0002e715 	.word	0x0002e715
   213ac:	0002f5cb 	.word	0x0002f5cb
   213b0:	0002f58a 	.word	0x0002f58a
   213b4:	0002f5a1 	.word	0x0002f5a1

000213b8 <k_work_init>:
{
   213b8:	b538      	push	{r3, r4, r5, lr}
   213ba:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   213bc:	4604      	mov	r4, r0
   213be:	b948      	cbnz	r0, 213d4 <k_work_init+0x1c>
   213c0:	490c      	ldr	r1, [pc, #48]	; (213f4 <k_work_init+0x3c>)
   213c2:	2389      	movs	r3, #137	; 0x89
   213c4:	4a0c      	ldr	r2, [pc, #48]	; (213f8 <k_work_init+0x40>)
   213c6:	480d      	ldr	r0, [pc, #52]	; (213fc <k_work_init+0x44>)
   213c8:	f006 f913 	bl	275f2 <assert_print>
   213cc:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   213ce:	480a      	ldr	r0, [pc, #40]	; (213f8 <k_work_init+0x40>)
   213d0:	f006 f908 	bl	275e4 <assert_post_action>
   213d4:	b939      	cbnz	r1, 213e6 <k_work_init+0x2e>
   213d6:	490a      	ldr	r1, [pc, #40]	; (21400 <k_work_init+0x48>)
   213d8:	238a      	movs	r3, #138	; 0x8a
   213da:	4a07      	ldr	r2, [pc, #28]	; (213f8 <k_work_init+0x40>)
   213dc:	4807      	ldr	r0, [pc, #28]	; (213fc <k_work_init+0x44>)
   213de:	f006 f908 	bl	275f2 <assert_print>
   213e2:	218a      	movs	r1, #138	; 0x8a
   213e4:	e7f3      	b.n	213ce <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   213e6:	2210      	movs	r2, #16
   213e8:	2100      	movs	r1, #0
   213ea:	f00a fea9 	bl	2c140 <memset>
   213ee:	6065      	str	r5, [r4, #4]
}
   213f0:	bd38      	pop	{r3, r4, r5, pc}
   213f2:	bf00      	nop
   213f4:	00033ae8 	.word	0x00033ae8
   213f8:	00033a11 	.word	0x00033a11
   213fc:	0002e715 	.word	0x0002e715
   21400:	00033a32 	.word	0x00033a32

00021404 <k_work_busy_get>:
{
   21404:	b538      	push	{r3, r4, r5, lr}
   21406:	4604      	mov	r4, r0
	__asm__ volatile(
   21408:	f04f 0320 	mov.w	r3, #32
   2140c:	f3ef 8511 	mrs	r5, BASEPRI
   21410:	f383 8812 	msr	BASEPRI_MAX, r3
   21414:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21418:	4816      	ldr	r0, [pc, #88]	; (21474 <k_work_busy_get+0x70>)
   2141a:	f7ff fa6d 	bl	208f8 <z_spin_lock_valid>
   2141e:	b968      	cbnz	r0, 2143c <k_work_busy_get+0x38>
   21420:	2394      	movs	r3, #148	; 0x94
   21422:	4a15      	ldr	r2, [pc, #84]	; (21478 <k_work_busy_get+0x74>)
   21424:	4915      	ldr	r1, [pc, #84]	; (2147c <k_work_busy_get+0x78>)
   21426:	4816      	ldr	r0, [pc, #88]	; (21480 <k_work_busy_get+0x7c>)
   21428:	f006 f8e3 	bl	275f2 <assert_print>
   2142c:	4911      	ldr	r1, [pc, #68]	; (21474 <k_work_busy_get+0x70>)
   2142e:	4815      	ldr	r0, [pc, #84]	; (21484 <k_work_busy_get+0x80>)
   21430:	f006 f8df 	bl	275f2 <assert_print>
   21434:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21436:	4810      	ldr	r0, [pc, #64]	; (21478 <k_work_busy_get+0x74>)
   21438:	f006 f8d4 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2143c:	480d      	ldr	r0, [pc, #52]	; (21474 <k_work_busy_get+0x70>)
   2143e:	f7ff fa77 	bl	20930 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   21442:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21444:	480b      	ldr	r0, [pc, #44]	; (21474 <k_work_busy_get+0x70>)
   21446:	f004 040f 	and.w	r4, r4, #15
   2144a:	f7ff fa63 	bl	20914 <z_spin_unlock_valid>
   2144e:	b958      	cbnz	r0, 21468 <k_work_busy_get+0x64>
   21450:	23c2      	movs	r3, #194	; 0xc2
   21452:	4a09      	ldr	r2, [pc, #36]	; (21478 <k_work_busy_get+0x74>)
   21454:	490c      	ldr	r1, [pc, #48]	; (21488 <k_work_busy_get+0x84>)
   21456:	480a      	ldr	r0, [pc, #40]	; (21480 <k_work_busy_get+0x7c>)
   21458:	f006 f8cb 	bl	275f2 <assert_print>
   2145c:	4905      	ldr	r1, [pc, #20]	; (21474 <k_work_busy_get+0x70>)
   2145e:	480b      	ldr	r0, [pc, #44]	; (2148c <k_work_busy_get+0x88>)
   21460:	f006 f8c7 	bl	275f2 <assert_print>
   21464:	21c2      	movs	r1, #194	; 0xc2
   21466:	e7e6      	b.n	21436 <k_work_busy_get+0x32>
	__asm__ volatile(
   21468:	f385 8811 	msr	BASEPRI, r5
   2146c:	f3bf 8f6f 	isb	sy
}
   21470:	4620      	mov	r0, r4
   21472:	bd38      	pop	{r3, r4, r5, pc}
   21474:	2002f758 	.word	0x2002f758
   21478:	0002f55d 	.word	0x0002f55d
   2147c:	0002f5b6 	.word	0x0002f5b6
   21480:	0002e715 	.word	0x0002e715
   21484:	0002f5cb 	.word	0x0002f5cb
   21488:	0002f58a 	.word	0x0002f58a
   2148c:	0002f5a1 	.word	0x0002f5a1

00021490 <z_work_submit_to_queue>:
{
   21490:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   21492:	460c      	mov	r4, r1
{
   21494:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   21496:	b959      	cbnz	r1, 214b0 <z_work_submit_to_queue+0x20>
   21498:	4921      	ldr	r1, [pc, #132]	; (21520 <z_work_submit_to_queue+0x90>)
   2149a:	4822      	ldr	r0, [pc, #136]	; (21524 <z_work_submit_to_queue+0x94>)
   2149c:	f44f 73ba 	mov.w	r3, #372	; 0x174
   214a0:	4a21      	ldr	r2, [pc, #132]	; (21528 <z_work_submit_to_queue+0x98>)
   214a2:	f006 f8a6 	bl	275f2 <assert_print>
   214a6:	f44f 71ba 	mov.w	r1, #372	; 0x174
   214aa:	481f      	ldr	r0, [pc, #124]	; (21528 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214ac:	f006 f89a 	bl	275e4 <assert_post_action>
	__asm__ volatile(
   214b0:	f04f 0320 	mov.w	r3, #32
   214b4:	f3ef 8511 	mrs	r5, BASEPRI
   214b8:	f383 8812 	msr	BASEPRI_MAX, r3
   214bc:	f3bf 8f6f 	isb	sy
   214c0:	481a      	ldr	r0, [pc, #104]	; (2152c <z_work_submit_to_queue+0x9c>)
   214c2:	f7ff fa19 	bl	208f8 <z_spin_lock_valid>
   214c6:	b960      	cbnz	r0, 214e2 <z_work_submit_to_queue+0x52>
   214c8:	2394      	movs	r3, #148	; 0x94
   214ca:	4a19      	ldr	r2, [pc, #100]	; (21530 <z_work_submit_to_queue+0xa0>)
   214cc:	4919      	ldr	r1, [pc, #100]	; (21534 <z_work_submit_to_queue+0xa4>)
   214ce:	4815      	ldr	r0, [pc, #84]	; (21524 <z_work_submit_to_queue+0x94>)
   214d0:	f006 f88f 	bl	275f2 <assert_print>
   214d4:	4915      	ldr	r1, [pc, #84]	; (2152c <z_work_submit_to_queue+0x9c>)
   214d6:	4818      	ldr	r0, [pc, #96]	; (21538 <z_work_submit_to_queue+0xa8>)
   214d8:	f006 f88b 	bl	275f2 <assert_print>
   214dc:	2194      	movs	r1, #148	; 0x94
   214de:	4814      	ldr	r0, [pc, #80]	; (21530 <z_work_submit_to_queue+0xa0>)
   214e0:	e7e4      	b.n	214ac <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   214e2:	4812      	ldr	r0, [pc, #72]	; (2152c <z_work_submit_to_queue+0x9c>)
   214e4:	f7ff fa24 	bl	20930 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   214e8:	4620      	mov	r0, r4
   214ea:	a901      	add	r1, sp, #4
   214ec:	f7ff fea6 	bl	2123c <submit_to_queue_locked>
   214f0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214f2:	480e      	ldr	r0, [pc, #56]	; (2152c <z_work_submit_to_queue+0x9c>)
   214f4:	f7ff fa0e 	bl	20914 <z_spin_unlock_valid>
   214f8:	b958      	cbnz	r0, 21512 <z_work_submit_to_queue+0x82>
   214fa:	23c2      	movs	r3, #194	; 0xc2
   214fc:	4a0c      	ldr	r2, [pc, #48]	; (21530 <z_work_submit_to_queue+0xa0>)
   214fe:	490f      	ldr	r1, [pc, #60]	; (2153c <z_work_submit_to_queue+0xac>)
   21500:	4808      	ldr	r0, [pc, #32]	; (21524 <z_work_submit_to_queue+0x94>)
   21502:	f006 f876 	bl	275f2 <assert_print>
   21506:	4909      	ldr	r1, [pc, #36]	; (2152c <z_work_submit_to_queue+0x9c>)
   21508:	480d      	ldr	r0, [pc, #52]	; (21540 <z_work_submit_to_queue+0xb0>)
   2150a:	f006 f872 	bl	275f2 <assert_print>
   2150e:	21c2      	movs	r1, #194	; 0xc2
   21510:	e7e5      	b.n	214de <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   21512:	f385 8811 	msr	BASEPRI, r5
   21516:	f3bf 8f6f 	isb	sy
}
   2151a:	4620      	mov	r0, r4
   2151c:	b003      	add	sp, #12
   2151e:	bd30      	pop	{r4, r5, pc}
   21520:	00033ae8 	.word	0x00033ae8
   21524:	0002e715 	.word	0x0002e715
   21528:	00033a11 	.word	0x00033a11
   2152c:	2002f758 	.word	0x2002f758
   21530:	0002f55d 	.word	0x0002f55d
   21534:	0002f5b6 	.word	0x0002f5b6
   21538:	0002f5cb 	.word	0x0002f5cb
   2153c:	0002f58a 	.word	0x0002f58a
   21540:	0002f5a1 	.word	0x0002f5a1

00021544 <k_work_submit>:
{
   21544:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   21546:	4801      	ldr	r0, [pc, #4]	; (2154c <k_work_submit+0x8>)
   21548:	f00a bc68 	b.w	2be1c <k_work_submit_to_queue>
   2154c:	20009da8 	.word	0x20009da8

00021550 <k_work_queue_init>:
{
   21550:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   21552:	b958      	cbnz	r0, 2156c <k_work_queue_init+0x1c>
   21554:	4908      	ldr	r1, [pc, #32]	; (21578 <k_work_queue_init+0x28>)
   21556:	4809      	ldr	r0, [pc, #36]	; (2157c <k_work_queue_init+0x2c>)
   21558:	f240 23b9 	movw	r3, #697	; 0x2b9
   2155c:	4a08      	ldr	r2, [pc, #32]	; (21580 <k_work_queue_init+0x30>)
   2155e:	f006 f848 	bl	275f2 <assert_print>
   21562:	f240 21b9 	movw	r1, #697	; 0x2b9
   21566:	4806      	ldr	r0, [pc, #24]	; (21580 <k_work_queue_init+0x30>)
   21568:	f006 f83c 	bl	275e4 <assert_post_action>
	*queue = (struct k_work_q) {
   2156c:	22a8      	movs	r2, #168	; 0xa8
   2156e:	2100      	movs	r1, #0
   21570:	f00a fde6 	bl	2c140 <memset>
}
   21574:	bd08      	pop	{r3, pc}
   21576:	bf00      	nop
   21578:	00033a4f 	.word	0x00033a4f
   2157c:	0002e715 	.word	0x0002e715
   21580:	00033a11 	.word	0x00033a11

00021584 <k_work_queue_start>:
{
   21584:	b5f0      	push	{r4, r5, r6, r7, lr}
   21586:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   21588:	4604      	mov	r4, r0
{
   2158a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   2158c:	b958      	cbnz	r0, 215a6 <k_work_queue_start+0x22>
   2158e:	492b      	ldr	r1, [pc, #172]	; (2163c <k_work_queue_start+0xb8>)
   21590:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   21594:	4a2a      	ldr	r2, [pc, #168]	; (21640 <k_work_queue_start+0xbc>)
   21596:	482b      	ldr	r0, [pc, #172]	; (21644 <k_work_queue_start+0xc0>)
   21598:	f006 f82b 	bl	275f2 <assert_print>
   2159c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   215a0:	4827      	ldr	r0, [pc, #156]	; (21640 <k_work_queue_start+0xbc>)
   215a2:	f006 f81f 	bl	275e4 <assert_post_action>
   215a6:	b949      	cbnz	r1, 215bc <k_work_queue_start+0x38>
   215a8:	4927      	ldr	r1, [pc, #156]	; (21648 <k_work_queue_start+0xc4>)
   215aa:	f240 23c9 	movw	r3, #713	; 0x2c9
   215ae:	4a24      	ldr	r2, [pc, #144]	; (21640 <k_work_queue_start+0xbc>)
   215b0:	4824      	ldr	r0, [pc, #144]	; (21644 <k_work_queue_start+0xc0>)
   215b2:	f006 f81e 	bl	275f2 <assert_print>
   215b6:	f240 21c9 	movw	r1, #713	; 0x2c9
   215ba:	e7f1      	b.n	215a0 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   215bc:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   215c0:	f010 0001 	ands.w	r0, r0, #1
   215c4:	d009      	beq.n	215da <k_work_queue_start+0x56>
   215c6:	4921      	ldr	r1, [pc, #132]	; (2164c <k_work_queue_start+0xc8>)
   215c8:	f240 23ca 	movw	r3, #714	; 0x2ca
   215cc:	4a1c      	ldr	r2, [pc, #112]	; (21640 <k_work_queue_start+0xbc>)
   215ce:	481d      	ldr	r0, [pc, #116]	; (21644 <k_work_queue_start+0xc0>)
   215d0:	f006 f80f 	bl	275f2 <assert_print>
   215d4:	f240 21ca 	movw	r1, #714	; 0x2ca
   215d8:	e7e2      	b.n	215a0 <k_work_queue_start+0x1c>
	list->tail = NULL;
   215da:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   215de:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   215e2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   215e6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   215ea:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   215ee:	b31d      	cbz	r5, 21638 <k_work_queue_start+0xb4>
   215f0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   215f2:	2800      	cmp	r0, #0
   215f4:	f240 1001 	movw	r0, #257	; 0x101
   215f8:	bf08      	it	eq
   215fa:	2001      	moveq	r0, #1
	*flagp = flags;
   215fc:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21600:	2000      	movs	r0, #0
   21602:	f04f 36ff 	mov.w	r6, #4294967295
   21606:	f04f 37ff 	mov.w	r7, #4294967295
   2160a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2160e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   21612:	e9cd 6706 	strd	r6, r7, [sp, #24]
   21616:	4620      	mov	r0, r4
   21618:	4b0d      	ldr	r3, [pc, #52]	; (21650 <k_work_queue_start+0xcc>)
   2161a:	9400      	str	r4, [sp, #0]
   2161c:	f7ff f8a2 	bl	20764 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   21620:	b125      	cbz	r5, 2162c <k_work_queue_start+0xa8>
   21622:	6829      	ldr	r1, [r5, #0]
   21624:	b111      	cbz	r1, 2162c <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   21626:	4620      	mov	r0, r4
   21628:	f00a fb4a 	bl	2bcc0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2162c:	4620      	mov	r0, r4
}
   2162e:	b009      	add	sp, #36	; 0x24
   21630:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21634:	f00a bb49 	b.w	2bcca <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   21638:	2001      	movs	r0, #1
   2163a:	e7df      	b.n	215fc <k_work_queue_start+0x78>
   2163c:	00033aa7 	.word	0x00033aa7
   21640:	00033a11 	.word	0x00033a11
   21644:	0002e715 	.word	0x0002e715
   21648:	00033aad 	.word	0x00033aad
   2164c:	00033ab3 	.word	0x00033ab3
   21650:	00021019 	.word	0x00021019

00021654 <k_work_queue_drain>:
{
   21654:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   21656:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   21658:	4604      	mov	r4, r0
   2165a:	b958      	cbnz	r0, 21674 <k_work_queue_drain+0x20>
   2165c:	493a      	ldr	r1, [pc, #232]	; (21748 <k_work_queue_drain+0xf4>)
   2165e:	f240 23ed 	movw	r3, #749	; 0x2ed
   21662:	4a3a      	ldr	r2, [pc, #232]	; (2174c <k_work_queue_drain+0xf8>)
   21664:	483a      	ldr	r0, [pc, #232]	; (21750 <k_work_queue_drain+0xfc>)
   21666:	f005 ffc4 	bl	275f2 <assert_print>
   2166a:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   2166e:	4837      	ldr	r0, [pc, #220]	; (2174c <k_work_queue_drain+0xf8>)
   21670:	f005 ffb8 	bl	275e4 <assert_post_action>
   21674:	f00a fb1e 	bl	2bcb4 <k_is_in_isr>
   21678:	b148      	cbz	r0, 2168e <k_work_queue_drain+0x3a>
   2167a:	4936      	ldr	r1, [pc, #216]	; (21754 <k_work_queue_drain+0x100>)
   2167c:	f240 23ee 	movw	r3, #750	; 0x2ee
   21680:	4a32      	ldr	r2, [pc, #200]	; (2174c <k_work_queue_drain+0xf8>)
   21682:	4833      	ldr	r0, [pc, #204]	; (21750 <k_work_queue_drain+0xfc>)
   21684:	f005 ffb5 	bl	275f2 <assert_print>
   21688:	f240 21ee 	movw	r1, #750	; 0x2ee
   2168c:	e7ef      	b.n	2166e <k_work_queue_drain+0x1a>
	__asm__ volatile(
   2168e:	f04f 0320 	mov.w	r3, #32
   21692:	f3ef 8611 	mrs	r6, BASEPRI
   21696:	f383 8812 	msr	BASEPRI_MAX, r3
   2169a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2169e:	482e      	ldr	r0, [pc, #184]	; (21758 <k_work_queue_drain+0x104>)
   216a0:	f7ff f92a 	bl	208f8 <z_spin_lock_valid>
   216a4:	b960      	cbnz	r0, 216c0 <k_work_queue_drain+0x6c>
   216a6:	2394      	movs	r3, #148	; 0x94
   216a8:	4a2c      	ldr	r2, [pc, #176]	; (2175c <k_work_queue_drain+0x108>)
   216aa:	492d      	ldr	r1, [pc, #180]	; (21760 <k_work_queue_drain+0x10c>)
   216ac:	4828      	ldr	r0, [pc, #160]	; (21750 <k_work_queue_drain+0xfc>)
   216ae:	f005 ffa0 	bl	275f2 <assert_print>
   216b2:	4929      	ldr	r1, [pc, #164]	; (21758 <k_work_queue_drain+0x104>)
   216b4:	482b      	ldr	r0, [pc, #172]	; (21764 <k_work_queue_drain+0x110>)
   216b6:	f005 ff9c 	bl	275f2 <assert_print>
   216ba:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216bc:	4827      	ldr	r0, [pc, #156]	; (2175c <k_work_queue_drain+0x108>)
   216be:	e7d7      	b.n	21670 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   216c0:	4825      	ldr	r0, [pc, #148]	; (21758 <k_work_queue_drain+0x104>)
   216c2:	f7ff f935 	bl	20930 <z_spin_lock_set_owner>
	return *flagp;
   216c6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   216ca:	f013 0f06 	tst.w	r3, #6
   216ce:	d11d      	bne.n	2170c <k_work_queue_drain+0xb8>
	    || plug
   216d0:	b1b5      	cbz	r5, 21700 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   216d2:	f043 030c 	orr.w	r3, r3, #12
   216d6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   216da:	4620      	mov	r0, r4
   216dc:	f00a fb64 	bl	2bda8 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   216e0:	2300      	movs	r3, #0
   216e2:	f04f 32ff 	mov.w	r2, #4294967295
   216e6:	9302      	str	r3, [sp, #8]
   216e8:	f04f 33ff 	mov.w	r3, #4294967295
   216ec:	4631      	mov	r1, r6
   216ee:	e9cd 2300 	strd	r2, r3, [sp]
   216f2:	4819      	ldr	r0, [pc, #100]	; (21758 <k_work_queue_drain+0x104>)
   216f4:	f104 0298 	add.w	r2, r4, #152	; 0x98
   216f8:	f001 fc0a 	bl	22f10 <z_sched_wait>
}
   216fc:	b004      	add	sp, #16
   216fe:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   21700:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   21704:	b14d      	cbz	r5, 2171a <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   21706:	f043 0304 	orr.w	r3, r3, #4
   2170a:	e7e4      	b.n	216d6 <k_work_queue_drain+0x82>
   2170c:	f043 0204 	orr.w	r2, r3, #4
   21710:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   21714:	2d00      	cmp	r5, #0
   21716:	d0e0      	beq.n	216da <k_work_queue_drain+0x86>
   21718:	e7db      	b.n	216d2 <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2171a:	480f      	ldr	r0, [pc, #60]	; (21758 <k_work_queue_drain+0x104>)
   2171c:	f7ff f8fa 	bl	20914 <z_spin_unlock_valid>
   21720:	b958      	cbnz	r0, 2173a <k_work_queue_drain+0xe6>
   21722:	23c2      	movs	r3, #194	; 0xc2
   21724:	4a0d      	ldr	r2, [pc, #52]	; (2175c <k_work_queue_drain+0x108>)
   21726:	4910      	ldr	r1, [pc, #64]	; (21768 <k_work_queue_drain+0x114>)
   21728:	4809      	ldr	r0, [pc, #36]	; (21750 <k_work_queue_drain+0xfc>)
   2172a:	f005 ff62 	bl	275f2 <assert_print>
   2172e:	490a      	ldr	r1, [pc, #40]	; (21758 <k_work_queue_drain+0x104>)
   21730:	480e      	ldr	r0, [pc, #56]	; (2176c <k_work_queue_drain+0x118>)
   21732:	f005 ff5e 	bl	275f2 <assert_print>
   21736:	21c2      	movs	r1, #194	; 0xc2
   21738:	e7c0      	b.n	216bc <k_work_queue_drain+0x68>
	__asm__ volatile(
   2173a:	f386 8811 	msr	BASEPRI, r6
   2173e:	f3bf 8f6f 	isb	sy
	int ret = 0;
   21742:	4628      	mov	r0, r5
	return ret;
   21744:	e7da      	b.n	216fc <k_work_queue_drain+0xa8>
   21746:	bf00      	nop
   21748:	00033aa7 	.word	0x00033aa7
   2174c:	00033a11 	.word	0x00033a11
   21750:	0002e715 	.word	0x0002e715
   21754:	0003160f 	.word	0x0003160f
   21758:	2002f758 	.word	0x2002f758
   2175c:	0002f55d 	.word	0x0002f55d
   21760:	0002f5b6 	.word	0x0002f5b6
   21764:	0002f5cb 	.word	0x0002f5cb
   21768:	0002f58a 	.word	0x0002f58a
   2176c:	0002f5a1 	.word	0x0002f5a1

00021770 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   21770:	b538      	push	{r3, r4, r5, lr}
   21772:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   21774:	4604      	mov	r4, r0
   21776:	b958      	cbnz	r0, 21790 <k_work_init_delayable+0x20>
   21778:	490f      	ldr	r1, [pc, #60]	; (217b8 <k_work_init_delayable+0x48>)
   2177a:	f44f 7350 	mov.w	r3, #832	; 0x340
   2177e:	4a0f      	ldr	r2, [pc, #60]	; (217bc <k_work_init_delayable+0x4c>)
   21780:	480f      	ldr	r0, [pc, #60]	; (217c0 <k_work_init_delayable+0x50>)
   21782:	f005 ff36 	bl	275f2 <assert_print>
   21786:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   2178a:	480c      	ldr	r0, [pc, #48]	; (217bc <k_work_init_delayable+0x4c>)
   2178c:	f005 ff2a 	bl	275e4 <assert_post_action>
   21790:	b949      	cbnz	r1, 217a6 <k_work_init_delayable+0x36>
   21792:	490c      	ldr	r1, [pc, #48]	; (217c4 <k_work_init_delayable+0x54>)
   21794:	f240 3341 	movw	r3, #833	; 0x341
   21798:	4a08      	ldr	r2, [pc, #32]	; (217bc <k_work_init_delayable+0x4c>)
   2179a:	4809      	ldr	r0, [pc, #36]	; (217c0 <k_work_init_delayable+0x50>)
   2179c:	f005 ff29 	bl	275f2 <assert_print>
   217a0:	f240 3141 	movw	r1, #833	; 0x341
   217a4:	e7f1      	b.n	2178a <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   217a6:	2230      	movs	r2, #48	; 0x30
   217a8:	2100      	movs	r1, #0
   217aa:	f00a fcc9 	bl	2c140 <memset>
   217ae:	f44f 7380 	mov.w	r3, #256	; 0x100
   217b2:	6065      	str	r5, [r4, #4]
   217b4:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   217b6:	bd38      	pop	{r3, r4, r5, pc}
   217b8:	00033ae7 	.word	0x00033ae7
   217bc:	00033a11 	.word	0x00033a11
   217c0:	0002e715 	.word	0x0002e715
   217c4:	00033a32 	.word	0x00033a32

000217c8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   217c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   217ca:	4616      	mov	r6, r2
   217cc:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   217ce:	460c      	mov	r4, r1
{
   217d0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   217d2:	b959      	cbnz	r1, 217ec <k_work_schedule_for_queue+0x24>
   217d4:	492d      	ldr	r1, [pc, #180]	; (2188c <k_work_schedule_for_queue+0xc4>)
   217d6:	482e      	ldr	r0, [pc, #184]	; (21890 <k_work_schedule_for_queue+0xc8>)
   217d8:	f240 33b7 	movw	r3, #951	; 0x3b7
   217dc:	4a2d      	ldr	r2, [pc, #180]	; (21894 <k_work_schedule_for_queue+0xcc>)
   217de:	f005 ff08 	bl	275f2 <assert_print>
   217e2:	f240 31b7 	movw	r1, #951	; 0x3b7
   217e6:	482b      	ldr	r0, [pc, #172]	; (21894 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   217e8:	f005 fefc 	bl	275e4 <assert_post_action>
	__asm__ volatile(
   217ec:	f04f 0320 	mov.w	r3, #32
   217f0:	f3ef 8711 	mrs	r7, BASEPRI
   217f4:	f383 8812 	msr	BASEPRI_MAX, r3
   217f8:	f3bf 8f6f 	isb	sy
   217fc:	4826      	ldr	r0, [pc, #152]	; (21898 <k_work_schedule_for_queue+0xd0>)
   217fe:	f7ff f87b 	bl	208f8 <z_spin_lock_valid>
   21802:	b960      	cbnz	r0, 2181e <k_work_schedule_for_queue+0x56>
   21804:	2394      	movs	r3, #148	; 0x94
   21806:	4a25      	ldr	r2, [pc, #148]	; (2189c <k_work_schedule_for_queue+0xd4>)
   21808:	4925      	ldr	r1, [pc, #148]	; (218a0 <k_work_schedule_for_queue+0xd8>)
   2180a:	4821      	ldr	r0, [pc, #132]	; (21890 <k_work_schedule_for_queue+0xc8>)
   2180c:	f005 fef1 	bl	275f2 <assert_print>
   21810:	4921      	ldr	r1, [pc, #132]	; (21898 <k_work_schedule_for_queue+0xd0>)
   21812:	4824      	ldr	r0, [pc, #144]	; (218a4 <k_work_schedule_for_queue+0xdc>)
   21814:	f005 feed 	bl	275f2 <assert_print>
   21818:	2194      	movs	r1, #148	; 0x94
   2181a:	4820      	ldr	r0, [pc, #128]	; (2189c <k_work_schedule_for_queue+0xd4>)
   2181c:	e7e4      	b.n	217e8 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   2181e:	481e      	ldr	r0, [pc, #120]	; (21898 <k_work_schedule_for_queue+0xd0>)
   21820:	f7ff f886 	bl	20930 <z_spin_lock_set_owner>
	return *flagp;
   21824:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   21826:	f013 0f0e 	tst.w	r3, #14
   2182a:	d125      	bne.n	21878 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2182c:	ea55 0206 	orrs.w	r2, r5, r6
   21830:	d114      	bne.n	2185c <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   21832:	4620      	mov	r0, r4
   21834:	a901      	add	r1, sp, #4
   21836:	f7ff fd01 	bl	2123c <submit_to_queue_locked>
   2183a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2183c:	4816      	ldr	r0, [pc, #88]	; (21898 <k_work_schedule_for_queue+0xd0>)
   2183e:	f7ff f869 	bl	20914 <z_spin_unlock_valid>
   21842:	b9d8      	cbnz	r0, 2187c <k_work_schedule_for_queue+0xb4>
   21844:	23c2      	movs	r3, #194	; 0xc2
   21846:	4a15      	ldr	r2, [pc, #84]	; (2189c <k_work_schedule_for_queue+0xd4>)
   21848:	4917      	ldr	r1, [pc, #92]	; (218a8 <k_work_schedule_for_queue+0xe0>)
   2184a:	4811      	ldr	r0, [pc, #68]	; (21890 <k_work_schedule_for_queue+0xc8>)
   2184c:	f005 fed1 	bl	275f2 <assert_print>
   21850:	4911      	ldr	r1, [pc, #68]	; (21898 <k_work_schedule_for_queue+0xd0>)
   21852:	4816      	ldr	r0, [pc, #88]	; (218ac <k_work_schedule_for_queue+0xe4>)
   21854:	f005 fecd 	bl	275f2 <assert_print>
   21858:	21c2      	movs	r1, #194	; 0xc2
   2185a:	e7de      	b.n	2181a <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   2185c:	f043 0308 	orr.w	r3, r3, #8
   21860:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   21862:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21864:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   21868:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2186a:	4632      	mov	r2, r6
   2186c:	462b      	mov	r3, r5
   2186e:	4910      	ldr	r1, [pc, #64]	; (218b0 <k_work_schedule_for_queue+0xe8>)
   21870:	f001 fbc8 	bl	23004 <z_add_timeout>
	return ret;
   21874:	2401      	movs	r4, #1
   21876:	e7e1      	b.n	2183c <k_work_schedule_for_queue+0x74>
	int ret = 0;
   21878:	2400      	movs	r4, #0
   2187a:	e7df      	b.n	2183c <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   2187c:	f387 8811 	msr	BASEPRI, r7
   21880:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21884:	4620      	mov	r0, r4
   21886:	b003      	add	sp, #12
   21888:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2188a:	bf00      	nop
   2188c:	00033ae7 	.word	0x00033ae7
   21890:	0002e715 	.word	0x0002e715
   21894:	00033a11 	.word	0x00033a11
   21898:	2002f758 	.word	0x2002f758
   2189c:	0002f55d 	.word	0x0002f55d
   218a0:	0002f5b6 	.word	0x0002f5b6
   218a4:	0002f5cb 	.word	0x0002f5cb
   218a8:	0002f58a 	.word	0x0002f58a
   218ac:	0002f5a1 	.word	0x0002f5a1
   218b0:	00021315 	.word	0x00021315

000218b4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   218b4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   218b6:	4801      	ldr	r0, [pc, #4]	; (218bc <k_work_schedule+0x8>)
   218b8:	f7ff bf86 	b.w	217c8 <k_work_schedule_for_queue>
   218bc:	20009da8 	.word	0x20009da8

000218c0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   218c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   218c2:	4616      	mov	r6, r2
   218c4:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   218c6:	460c      	mov	r4, r1
{
   218c8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   218ca:	b959      	cbnz	r1, 218e4 <k_work_reschedule_for_queue+0x24>
   218cc:	492c      	ldr	r1, [pc, #176]	; (21980 <k_work_reschedule_for_queue+0xc0>)
   218ce:	482d      	ldr	r0, [pc, #180]	; (21984 <k_work_reschedule_for_queue+0xc4>)
   218d0:	f240 33db 	movw	r3, #987	; 0x3db
   218d4:	4a2c      	ldr	r2, [pc, #176]	; (21988 <k_work_reschedule_for_queue+0xc8>)
   218d6:	f005 fe8c 	bl	275f2 <assert_print>
   218da:	f240 31db 	movw	r1, #987	; 0x3db
   218de:	482a      	ldr	r0, [pc, #168]	; (21988 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   218e0:	f005 fe80 	bl	275e4 <assert_post_action>
	__asm__ volatile(
   218e4:	f04f 0320 	mov.w	r3, #32
   218e8:	f3ef 8711 	mrs	r7, BASEPRI
   218ec:	f383 8812 	msr	BASEPRI_MAX, r3
   218f0:	f3bf 8f6f 	isb	sy
   218f4:	4825      	ldr	r0, [pc, #148]	; (2198c <k_work_reschedule_for_queue+0xcc>)
   218f6:	f7fe ffff 	bl	208f8 <z_spin_lock_valid>
   218fa:	b960      	cbnz	r0, 21916 <k_work_reschedule_for_queue+0x56>
   218fc:	2394      	movs	r3, #148	; 0x94
   218fe:	4a24      	ldr	r2, [pc, #144]	; (21990 <k_work_reschedule_for_queue+0xd0>)
   21900:	4924      	ldr	r1, [pc, #144]	; (21994 <k_work_reschedule_for_queue+0xd4>)
   21902:	4820      	ldr	r0, [pc, #128]	; (21984 <k_work_reschedule_for_queue+0xc4>)
   21904:	f005 fe75 	bl	275f2 <assert_print>
   21908:	4920      	ldr	r1, [pc, #128]	; (2198c <k_work_reschedule_for_queue+0xcc>)
   2190a:	4823      	ldr	r0, [pc, #140]	; (21998 <k_work_reschedule_for_queue+0xd8>)
   2190c:	f005 fe71 	bl	275f2 <assert_print>
   21910:	2194      	movs	r1, #148	; 0x94
   21912:	481f      	ldr	r0, [pc, #124]	; (21990 <k_work_reschedule_for_queue+0xd0>)
   21914:	e7e4      	b.n	218e0 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   21916:	481d      	ldr	r0, [pc, #116]	; (2198c <k_work_reschedule_for_queue+0xcc>)
   21918:	f7ff f80a 	bl	20930 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2191c:	4620      	mov	r0, r4
   2191e:	f00a fa35 	bl	2bd8c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21922:	ea55 0306 	orrs.w	r3, r5, r6
   21926:	d114      	bne.n	21952 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   21928:	4620      	mov	r0, r4
   2192a:	a901      	add	r1, sp, #4
   2192c:	f7ff fc86 	bl	2123c <submit_to_queue_locked>
   21930:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21932:	4816      	ldr	r0, [pc, #88]	; (2198c <k_work_reschedule_for_queue+0xcc>)
   21934:	f7fe ffee 	bl	20914 <z_spin_unlock_valid>
   21938:	b9d0      	cbnz	r0, 21970 <k_work_reschedule_for_queue+0xb0>
   2193a:	23c2      	movs	r3, #194	; 0xc2
   2193c:	4a14      	ldr	r2, [pc, #80]	; (21990 <k_work_reschedule_for_queue+0xd0>)
   2193e:	4917      	ldr	r1, [pc, #92]	; (2199c <k_work_reschedule_for_queue+0xdc>)
   21940:	4810      	ldr	r0, [pc, #64]	; (21984 <k_work_reschedule_for_queue+0xc4>)
   21942:	f005 fe56 	bl	275f2 <assert_print>
   21946:	4911      	ldr	r1, [pc, #68]	; (2198c <k_work_reschedule_for_queue+0xcc>)
   21948:	4815      	ldr	r0, [pc, #84]	; (219a0 <k_work_reschedule_for_queue+0xe0>)
   2194a:	f005 fe52 	bl	275f2 <assert_print>
   2194e:	21c2      	movs	r1, #194	; 0xc2
   21950:	e7df      	b.n	21912 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   21952:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21954:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   21958:	f043 0308 	orr.w	r3, r3, #8
   2195c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2195e:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21960:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   21962:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21964:	490f      	ldr	r1, [pc, #60]	; (219a4 <k_work_reschedule_for_queue+0xe4>)
   21966:	462b      	mov	r3, r5
   21968:	f001 fb4c 	bl	23004 <z_add_timeout>
	return ret;
   2196c:	2401      	movs	r4, #1
   2196e:	e7e0      	b.n	21932 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   21970:	f387 8811 	msr	BASEPRI, r7
   21974:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21978:	4620      	mov	r0, r4
   2197a:	b003      	add	sp, #12
   2197c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2197e:	bf00      	nop
   21980:	00033ae7 	.word	0x00033ae7
   21984:	0002e715 	.word	0x0002e715
   21988:	00033a11 	.word	0x00033a11
   2198c:	2002f758 	.word	0x2002f758
   21990:	0002f55d 	.word	0x0002f55d
   21994:	0002f5b6 	.word	0x0002f5b6
   21998:	0002f5cb 	.word	0x0002f5cb
   2199c:	0002f58a 	.word	0x0002f58a
   219a0:	0002f5a1 	.word	0x0002f5a1
   219a4:	00021315 	.word	0x00021315

000219a8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   219a8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   219aa:	4801      	ldr	r0, [pc, #4]	; (219b0 <k_work_reschedule+0x8>)
   219ac:	f7ff bf88 	b.w	218c0 <k_work_reschedule_for_queue>
   219b0:	20009da8 	.word	0x20009da8

000219b4 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   219b4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   219b6:	4604      	mov	r4, r0
   219b8:	b958      	cbnz	r0, 219d2 <k_work_cancel_delayable+0x1e>
   219ba:	4922      	ldr	r1, [pc, #136]	; (21a44 <k_work_cancel_delayable+0x90>)
   219bc:	4822      	ldr	r0, [pc, #136]	; (21a48 <k_work_cancel_delayable+0x94>)
   219be:	f240 33fd 	movw	r3, #1021	; 0x3fd
   219c2:	4a22      	ldr	r2, [pc, #136]	; (21a4c <k_work_cancel_delayable+0x98>)
   219c4:	f005 fe15 	bl	275f2 <assert_print>
   219c8:	f240 31fd 	movw	r1, #1021	; 0x3fd
   219cc:	481f      	ldr	r0, [pc, #124]	; (21a4c <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   219ce:	f005 fe09 	bl	275e4 <assert_post_action>
	__asm__ volatile(
   219d2:	f04f 0320 	mov.w	r3, #32
   219d6:	f3ef 8511 	mrs	r5, BASEPRI
   219da:	f383 8812 	msr	BASEPRI_MAX, r3
   219de:	f3bf 8f6f 	isb	sy
   219e2:	481b      	ldr	r0, [pc, #108]	; (21a50 <k_work_cancel_delayable+0x9c>)
   219e4:	f7fe ff88 	bl	208f8 <z_spin_lock_valid>
   219e8:	b960      	cbnz	r0, 21a04 <k_work_cancel_delayable+0x50>
   219ea:	2394      	movs	r3, #148	; 0x94
   219ec:	4a19      	ldr	r2, [pc, #100]	; (21a54 <k_work_cancel_delayable+0xa0>)
   219ee:	491a      	ldr	r1, [pc, #104]	; (21a58 <k_work_cancel_delayable+0xa4>)
   219f0:	4815      	ldr	r0, [pc, #84]	; (21a48 <k_work_cancel_delayable+0x94>)
   219f2:	f005 fdfe 	bl	275f2 <assert_print>
   219f6:	4916      	ldr	r1, [pc, #88]	; (21a50 <k_work_cancel_delayable+0x9c>)
   219f8:	4818      	ldr	r0, [pc, #96]	; (21a5c <k_work_cancel_delayable+0xa8>)
   219fa:	f005 fdfa 	bl	275f2 <assert_print>
   219fe:	2194      	movs	r1, #148	; 0x94
   21a00:	4814      	ldr	r0, [pc, #80]	; (21a54 <k_work_cancel_delayable+0xa0>)
   21a02:	e7e4      	b.n	219ce <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   21a04:	4812      	ldr	r0, [pc, #72]	; (21a50 <k_work_cancel_delayable+0x9c>)
   21a06:	f7fe ff93 	bl	20930 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   21a0a:	4620      	mov	r0, r4
   21a0c:	f00a f9be 	bl	2bd8c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21a10:	4620      	mov	r0, r4
   21a12:	f00a f9d0 	bl	2bdb6 <cancel_async_locked>
   21a16:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a18:	480d      	ldr	r0, [pc, #52]	; (21a50 <k_work_cancel_delayable+0x9c>)
   21a1a:	f7fe ff7b 	bl	20914 <z_spin_unlock_valid>
   21a1e:	b958      	cbnz	r0, 21a38 <k_work_cancel_delayable+0x84>
   21a20:	23c2      	movs	r3, #194	; 0xc2
   21a22:	4a0c      	ldr	r2, [pc, #48]	; (21a54 <k_work_cancel_delayable+0xa0>)
   21a24:	490e      	ldr	r1, [pc, #56]	; (21a60 <k_work_cancel_delayable+0xac>)
   21a26:	4808      	ldr	r0, [pc, #32]	; (21a48 <k_work_cancel_delayable+0x94>)
   21a28:	f005 fde3 	bl	275f2 <assert_print>
   21a2c:	4908      	ldr	r1, [pc, #32]	; (21a50 <k_work_cancel_delayable+0x9c>)
   21a2e:	480d      	ldr	r0, [pc, #52]	; (21a64 <k_work_cancel_delayable+0xb0>)
   21a30:	f005 fddf 	bl	275f2 <assert_print>
   21a34:	21c2      	movs	r1, #194	; 0xc2
   21a36:	e7e3      	b.n	21a00 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   21a38:	f385 8811 	msr	BASEPRI, r5
   21a3c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   21a40:	4620      	mov	r0, r4
   21a42:	bd38      	pop	{r3, r4, r5, pc}
   21a44:	00033ae7 	.word	0x00033ae7
   21a48:	0002e715 	.word	0x0002e715
   21a4c:	00033a11 	.word	0x00033a11
   21a50:	2002f758 	.word	0x2002f758
   21a54:	0002f55d 	.word	0x0002f55d
   21a58:	0002f5b6 	.word	0x0002f5b6
   21a5c:	0002f5cb 	.word	0x0002f5cb
   21a60:	0002f58a 	.word	0x0002f58a
   21a64:	0002f5a1 	.word	0x0002f5a1

00021a68 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   21a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a6c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   21a6e:	4605      	mov	r5, r0
   21a70:	b958      	cbnz	r0, 21a8a <k_work_cancel_delayable_sync+0x22>
   21a72:	493a      	ldr	r1, [pc, #232]	; (21b5c <k_work_cancel_delayable_sync+0xf4>)
   21a74:	f240 430e 	movw	r3, #1038	; 0x40e
   21a78:	4a39      	ldr	r2, [pc, #228]	; (21b60 <k_work_cancel_delayable_sync+0xf8>)
   21a7a:	483a      	ldr	r0, [pc, #232]	; (21b64 <k_work_cancel_delayable_sync+0xfc>)
   21a7c:	f005 fdb9 	bl	275f2 <assert_print>
   21a80:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   21a84:	4836      	ldr	r0, [pc, #216]	; (21b60 <k_work_cancel_delayable_sync+0xf8>)
   21a86:	f005 fdad 	bl	275e4 <assert_post_action>
   21a8a:	b949      	cbnz	r1, 21aa0 <k_work_cancel_delayable_sync+0x38>
   21a8c:	4936      	ldr	r1, [pc, #216]	; (21b68 <k_work_cancel_delayable_sync+0x100>)
   21a8e:	f240 430f 	movw	r3, #1039	; 0x40f
   21a92:	4a33      	ldr	r2, [pc, #204]	; (21b60 <k_work_cancel_delayable_sync+0xf8>)
   21a94:	4833      	ldr	r0, [pc, #204]	; (21b64 <k_work_cancel_delayable_sync+0xfc>)
   21a96:	f005 fdac 	bl	275f2 <assert_print>
   21a9a:	f240 410f 	movw	r1, #1039	; 0x40f
   21a9e:	e7f1      	b.n	21a84 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   21aa0:	f00a f908 	bl	2bcb4 <k_is_in_isr>
   21aa4:	4604      	mov	r4, r0
   21aa6:	b148      	cbz	r0, 21abc <k_work_cancel_delayable_sync+0x54>
   21aa8:	4930      	ldr	r1, [pc, #192]	; (21b6c <k_work_cancel_delayable_sync+0x104>)
   21aaa:	f44f 6382 	mov.w	r3, #1040	; 0x410
   21aae:	4a2c      	ldr	r2, [pc, #176]	; (21b60 <k_work_cancel_delayable_sync+0xf8>)
   21ab0:	482c      	ldr	r0, [pc, #176]	; (21b64 <k_work_cancel_delayable_sync+0xfc>)
   21ab2:	f005 fd9e 	bl	275f2 <assert_print>
   21ab6:	f44f 6182 	mov.w	r1, #1040	; 0x410
   21aba:	e7e3      	b.n	21a84 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   21abc:	f04f 0320 	mov.w	r3, #32
   21ac0:	f3ef 8811 	mrs	r8, BASEPRI
   21ac4:	f383 8812 	msr	BASEPRI_MAX, r3
   21ac8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21acc:	4828      	ldr	r0, [pc, #160]	; (21b70 <k_work_cancel_delayable_sync+0x108>)
   21ace:	f7fe ff13 	bl	208f8 <z_spin_lock_valid>
   21ad2:	b960      	cbnz	r0, 21aee <k_work_cancel_delayable_sync+0x86>
   21ad4:	2394      	movs	r3, #148	; 0x94
   21ad6:	4a27      	ldr	r2, [pc, #156]	; (21b74 <k_work_cancel_delayable_sync+0x10c>)
   21ad8:	4927      	ldr	r1, [pc, #156]	; (21b78 <k_work_cancel_delayable_sync+0x110>)
   21ada:	4822      	ldr	r0, [pc, #136]	; (21b64 <k_work_cancel_delayable_sync+0xfc>)
   21adc:	f005 fd89 	bl	275f2 <assert_print>
   21ae0:	4923      	ldr	r1, [pc, #140]	; (21b70 <k_work_cancel_delayable_sync+0x108>)
   21ae2:	4826      	ldr	r0, [pc, #152]	; (21b7c <k_work_cancel_delayable_sync+0x114>)
   21ae4:	f005 fd85 	bl	275f2 <assert_print>
   21ae8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21aea:	4822      	ldr	r0, [pc, #136]	; (21b74 <k_work_cancel_delayable_sync+0x10c>)
   21aec:	e7cb      	b.n	21a86 <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   21aee:	4820      	ldr	r0, [pc, #128]	; (21b70 <k_work_cancel_delayable_sync+0x108>)
   21af0:	f7fe ff1e 	bl	20930 <z_spin_lock_set_owner>
	return *flagp;
   21af4:	68eb      	ldr	r3, [r5, #12]
   21af6:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   21afa:	2b00      	cmp	r3, #0
   21afc:	bf14      	ite	ne
   21afe:	2701      	movne	r7, #1
   21b00:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   21b02:	d00a      	beq.n	21b1a <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   21b04:	4628      	mov	r0, r5
   21b06:	f00a f941 	bl	2bd8c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21b0a:	4628      	mov	r0, r5
   21b0c:	f00a f953 	bl	2bdb6 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   21b10:	4631      	mov	r1, r6
   21b12:	4628      	mov	r0, r5
   21b14:	f7ff fb74 	bl	21200 <cancel_sync_locked>
   21b18:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b1a:	4815      	ldr	r0, [pc, #84]	; (21b70 <k_work_cancel_delayable_sync+0x108>)
   21b1c:	f7fe fefa 	bl	20914 <z_spin_unlock_valid>
   21b20:	b958      	cbnz	r0, 21b3a <k_work_cancel_delayable_sync+0xd2>
   21b22:	23c2      	movs	r3, #194	; 0xc2
   21b24:	4a13      	ldr	r2, [pc, #76]	; (21b74 <k_work_cancel_delayable_sync+0x10c>)
   21b26:	4916      	ldr	r1, [pc, #88]	; (21b80 <k_work_cancel_delayable_sync+0x118>)
   21b28:	480e      	ldr	r0, [pc, #56]	; (21b64 <k_work_cancel_delayable_sync+0xfc>)
   21b2a:	f005 fd62 	bl	275f2 <assert_print>
   21b2e:	4910      	ldr	r1, [pc, #64]	; (21b70 <k_work_cancel_delayable_sync+0x108>)
   21b30:	4814      	ldr	r0, [pc, #80]	; (21b84 <k_work_cancel_delayable_sync+0x11c>)
   21b32:	f005 fd5e 	bl	275f2 <assert_print>
   21b36:	21c2      	movs	r1, #194	; 0xc2
   21b38:	e7d7      	b.n	21aea <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   21b3a:	f388 8811 	msr	BASEPRI, r8
   21b3e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   21b42:	b13c      	cbz	r4, 21b54 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   21b44:	f04f 32ff 	mov.w	r2, #4294967295
   21b48:	f04f 33ff 	mov.w	r3, #4294967295
   21b4c:	f106 0008 	add.w	r0, r6, #8
   21b50:	f7ff f9ce 	bl	20ef0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   21b54:	4638      	mov	r0, r7
   21b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b5a:	bf00      	nop
   21b5c:	00033ae7 	.word	0x00033ae7
   21b60:	00033a11 	.word	0x00033a11
   21b64:	0002e715 	.word	0x0002e715
   21b68:	00033a93 	.word	0x00033a93
   21b6c:	0003160f 	.word	0x0003160f
   21b70:	2002f758 	.word	0x2002f758
   21b74:	0002f55d 	.word	0x0002f55d
   21b78:	0002f5b6 	.word	0x0002f5b6
   21b7c:	0002f5cb 	.word	0x0002f5cb
   21b80:	0002f58a 	.word	0x0002f58a
   21b84:	0002f5a1 	.word	0x0002f5a1

00021b88 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   21b88:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   21b8a:	4d07      	ldr	r5, [pc, #28]	; (21ba8 <z_reset_time_slice+0x20>)
   21b8c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   21b8e:	b154      	cbz	r4, 21ba6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   21b90:	f7fb fc90 	bl	1d4b4 <sys_clock_elapsed>
   21b94:	4b05      	ldr	r3, [pc, #20]	; (21bac <z_reset_time_slice+0x24>)
   21b96:	4404      	add	r4, r0
   21b98:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   21b9a:	6828      	ldr	r0, [r5, #0]
   21b9c:	2100      	movs	r1, #0
	}
}
   21b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   21ba2:	f001 bb87 	b.w	232b4 <z_set_timeout_expiry>
}
   21ba6:	bd38      	pop	{r3, r4, r5, pc}
   21ba8:	2002f764 	.word	0x2002f764
   21bac:	2002f720 	.word	0x2002f720

00021bb0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   21bb0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   21bb2:	4d14      	ldr	r5, [pc, #80]	; (21c04 <update_cache+0x54>)
   21bb4:	462b      	mov	r3, r5
   21bb6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21bba:	429c      	cmp	r4, r3
   21bbc:	d000      	beq.n	21bc0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21bbe:	b904      	cbnz	r4, 21bc2 <update_cache+0x12>
   21bc0:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   21bc2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   21bc4:	b9a8      	cbnz	r0, 21bf2 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   21bc6:	b963      	cbnz	r3, 21be2 <update_cache+0x32>
   21bc8:	490f      	ldr	r1, [pc, #60]	; (21c08 <update_cache+0x58>)
   21bca:	2389      	movs	r3, #137	; 0x89
   21bcc:	4a0f      	ldr	r2, [pc, #60]	; (21c0c <update_cache+0x5c>)
   21bce:	4810      	ldr	r0, [pc, #64]	; (21c10 <update_cache+0x60>)
   21bd0:	f005 fd0f 	bl	275f2 <assert_print>
   21bd4:	480f      	ldr	r0, [pc, #60]	; (21c14 <update_cache+0x64>)
   21bd6:	f005 fd0c 	bl	275f2 <assert_print>
   21bda:	2189      	movs	r1, #137	; 0x89
   21bdc:	480b      	ldr	r0, [pc, #44]	; (21c0c <update_cache+0x5c>)
   21bde:	f005 fd01 	bl	275e4 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   21be2:	7b5a      	ldrb	r2, [r3, #13]
   21be4:	06d2      	lsls	r2, r2, #27
   21be6:	d104      	bne.n	21bf2 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21be8:	69a2      	ldr	r2, [r4, #24]
   21bea:	b912      	cbnz	r2, 21bf2 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   21bec:	89da      	ldrh	r2, [r3, #14]
   21bee:	2a7f      	cmp	r2, #127	; 0x7f
   21bf0:	d805      	bhi.n	21bfe <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   21bf2:	429c      	cmp	r4, r3
   21bf4:	d002      	beq.n	21bfc <update_cache+0x4c>
			z_reset_time_slice(thread);
   21bf6:	4620      	mov	r0, r4
   21bf8:	f7ff ffc6 	bl	21b88 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   21bfc:	4623      	mov	r3, r4
   21bfe:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   21c00:	bd38      	pop	{r3, r4, r5, pc}
   21c02:	bf00      	nop
   21c04:	2002f720 	.word	0x2002f720
   21c08:	00033b1e 	.word	0x00033b1e
   21c0c:	00033afc 	.word	0x00033afc
   21c10:	0002e715 	.word	0x0002e715
   21c14:	00032363 	.word	0x00032363

00021c18 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   21c18:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21c1a:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21c1e:	7b42      	ldrb	r2, [r0, #13]
   21c20:	2b00      	cmp	r3, #0
   21c22:	db38      	blt.n	21c96 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21c24:	06d3      	lsls	r3, r2, #27
   21c26:	d136      	bne.n	21c96 <ready_thread+0x7e>
	return node->next != NULL;
   21c28:	6983      	ldr	r3, [r0, #24]
   21c2a:	2b00      	cmp	r3, #0
   21c2c:	d133      	bne.n	21c96 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   21c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21c32:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21c34:	4a18      	ldr	r2, [pc, #96]	; (21c98 <ready_thread+0x80>)
   21c36:	4290      	cmp	r0, r2
   21c38:	d109      	bne.n	21c4e <ready_thread+0x36>
   21c3a:	4918      	ldr	r1, [pc, #96]	; (21c9c <ready_thread+0x84>)
   21c3c:	4818      	ldr	r0, [pc, #96]	; (21ca0 <ready_thread+0x88>)
   21c3e:	23ba      	movs	r3, #186	; 0xba
   21c40:	4a18      	ldr	r2, [pc, #96]	; (21ca4 <ready_thread+0x8c>)
   21c42:	f005 fcd6 	bl	275f2 <assert_print>
   21c46:	21ba      	movs	r1, #186	; 0xba
   21c48:	4816      	ldr	r0, [pc, #88]	; (21ca4 <ready_thread+0x8c>)
   21c4a:	f005 fccb 	bl	275e4 <assert_post_action>
	return list->head == list;
   21c4e:	4916      	ldr	r1, [pc, #88]	; (21ca8 <ready_thread+0x90>)
   21c50:	460a      	mov	r2, r1
   21c52:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21c56:	4294      	cmp	r4, r2
   21c58:	bf18      	it	ne
   21c5a:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   21c5c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21c5e:	b923      	cbnz	r3, 21c6a <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   21c60:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   21c64:	6020      	str	r0, [r4, #0]
	list->tail = node;
   21c66:	6248      	str	r0, [r1, #36]	; 0x24
}
   21c68:	e00c      	b.n	21c84 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   21c6a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   21c6e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   21c72:	42b5      	cmp	r5, r6
   21c74:	d00b      	beq.n	21c8e <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21c76:	42ae      	cmp	r6, r5
   21c78:	dd09      	ble.n	21c8e <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   21c7a:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   21c7c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   21c80:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   21c82:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   21c84:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   21c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   21c8a:	f7ff bf91 	b.w	21bb0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21c8e:	42a3      	cmp	r3, r4
   21c90:	d0e6      	beq.n	21c60 <ready_thread+0x48>
   21c92:	681b      	ldr	r3, [r3, #0]
   21c94:	e7e3      	b.n	21c5e <ready_thread+0x46>
}
   21c96:	bd70      	pop	{r4, r5, r6, pc}
   21c98:	20009c98 	.word	0x20009c98
   21c9c:	00033b45 	.word	0x00033b45
   21ca0:	0002e715 	.word	0x0002e715
   21ca4:	00033afc 	.word	0x00033afc
   21ca8:	2002f720 	.word	0x2002f720

00021cac <k_sched_time_slice_set>:
{
   21cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21cae:	4604      	mov	r4, r0
   21cb0:	460d      	mov	r5, r1
	__asm__ volatile(
   21cb2:	f04f 0320 	mov.w	r3, #32
   21cb6:	f3ef 8711 	mrs	r7, BASEPRI
   21cba:	f383 8812 	msr	BASEPRI_MAX, r3
   21cbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21cc2:	4822      	ldr	r0, [pc, #136]	; (21d4c <k_sched_time_slice_set+0xa0>)
   21cc4:	f7fe fe18 	bl	208f8 <z_spin_lock_valid>
   21cc8:	b968      	cbnz	r0, 21ce6 <k_sched_time_slice_set+0x3a>
   21cca:	2394      	movs	r3, #148	; 0x94
   21ccc:	4a20      	ldr	r2, [pc, #128]	; (21d50 <k_sched_time_slice_set+0xa4>)
   21cce:	4921      	ldr	r1, [pc, #132]	; (21d54 <k_sched_time_slice_set+0xa8>)
   21cd0:	4821      	ldr	r0, [pc, #132]	; (21d58 <k_sched_time_slice_set+0xac>)
   21cd2:	f005 fc8e 	bl	275f2 <assert_print>
   21cd6:	491d      	ldr	r1, [pc, #116]	; (21d4c <k_sched_time_slice_set+0xa0>)
   21cd8:	4820      	ldr	r0, [pc, #128]	; (21d5c <k_sched_time_slice_set+0xb0>)
   21cda:	f005 fc8a 	bl	275f2 <assert_print>
   21cde:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ce0:	481b      	ldr	r0, [pc, #108]	; (21d50 <k_sched_time_slice_set+0xa4>)
   21ce2:	f005 fc7f 	bl	275e4 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   21ce6:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   21ce8:	4818      	ldr	r0, [pc, #96]	; (21d4c <k_sched_time_slice_set+0xa0>)
   21cea:	f7fe fe21 	bl	20930 <z_spin_lock_set_owner>
   21cee:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   21cf2:	f240 30e7 	movw	r0, #999	; 0x3e7
   21cf6:	4631      	mov	r1, r6
   21cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21cfc:	2300      	movs	r3, #0
   21cfe:	fbe4 010c 	umlal	r0, r1, r4, ip
   21d02:	f7e7 f8f5 	bl	8ef0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   21d06:	42b4      	cmp	r4, r6
   21d08:	dd02      	ble.n	21d10 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   21d0a:	2802      	cmp	r0, #2
   21d0c:	bfb8      	it	lt
   21d0e:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   21d10:	4a13      	ldr	r2, [pc, #76]	; (21d60 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   21d12:	4b14      	ldr	r3, [pc, #80]	; (21d64 <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   21d14:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   21d16:	4a14      	ldr	r2, [pc, #80]	; (21d68 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   21d18:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   21d1a:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   21d1c:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   21d1e:	f7ff ff33 	bl	21b88 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d22:	480a      	ldr	r0, [pc, #40]	; (21d4c <k_sched_time_slice_set+0xa0>)
   21d24:	f7fe fdf6 	bl	20914 <z_spin_unlock_valid>
   21d28:	b958      	cbnz	r0, 21d42 <k_sched_time_slice_set+0x96>
   21d2a:	23c2      	movs	r3, #194	; 0xc2
   21d2c:	4a08      	ldr	r2, [pc, #32]	; (21d50 <k_sched_time_slice_set+0xa4>)
   21d2e:	490f      	ldr	r1, [pc, #60]	; (21d6c <k_sched_time_slice_set+0xc0>)
   21d30:	4809      	ldr	r0, [pc, #36]	; (21d58 <k_sched_time_slice_set+0xac>)
   21d32:	f005 fc5e 	bl	275f2 <assert_print>
   21d36:	4905      	ldr	r1, [pc, #20]	; (21d4c <k_sched_time_slice_set+0xa0>)
   21d38:	480d      	ldr	r0, [pc, #52]	; (21d70 <k_sched_time_slice_set+0xc4>)
   21d3a:	f005 fc5a 	bl	275f2 <assert_print>
   21d3e:	21c2      	movs	r1, #194	; 0xc2
   21d40:	e7ce      	b.n	21ce0 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   21d42:	f387 8811 	msr	BASEPRI, r7
   21d46:	f3bf 8f6f 	isb	sy
}
   21d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d4c:	2002f768 	.word	0x2002f768
   21d50:	0002f55d 	.word	0x0002f55d
   21d54:	0002f5b6 	.word	0x0002f5b6
   21d58:	0002e715 	.word	0x0002e715
   21d5c:	0002f5cb 	.word	0x0002f5cb
   21d60:	2002f764 	.word	0x2002f764
   21d64:	2002f720 	.word	0x2002f720
   21d68:	2002f760 	.word	0x2002f760
   21d6c:	0002f58a 	.word	0x0002f58a
   21d70:	0002f5a1 	.word	0x0002f5a1

00021d74 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   21d74:	b538      	push	{r3, r4, r5, lr}
   21d76:	4604      	mov	r4, r0
	__asm__ volatile(
   21d78:	f04f 0320 	mov.w	r3, #32
   21d7c:	f3ef 8511 	mrs	r5, BASEPRI
   21d80:	f383 8812 	msr	BASEPRI_MAX, r3
   21d84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d88:	4816      	ldr	r0, [pc, #88]	; (21de4 <z_ready_thread+0x70>)
   21d8a:	f7fe fdb5 	bl	208f8 <z_spin_lock_valid>
   21d8e:	b968      	cbnz	r0, 21dac <z_ready_thread+0x38>
   21d90:	2394      	movs	r3, #148	; 0x94
   21d92:	4a15      	ldr	r2, [pc, #84]	; (21de8 <z_ready_thread+0x74>)
   21d94:	4915      	ldr	r1, [pc, #84]	; (21dec <z_ready_thread+0x78>)
   21d96:	4816      	ldr	r0, [pc, #88]	; (21df0 <z_ready_thread+0x7c>)
   21d98:	f005 fc2b 	bl	275f2 <assert_print>
   21d9c:	4911      	ldr	r1, [pc, #68]	; (21de4 <z_ready_thread+0x70>)
   21d9e:	4815      	ldr	r0, [pc, #84]	; (21df4 <z_ready_thread+0x80>)
   21da0:	f005 fc27 	bl	275f2 <assert_print>
   21da4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21da6:	4810      	ldr	r0, [pc, #64]	; (21de8 <z_ready_thread+0x74>)
   21da8:	f005 fc1c 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   21dac:	480d      	ldr	r0, [pc, #52]	; (21de4 <z_ready_thread+0x70>)
   21dae:	f7fe fdbf 	bl	20930 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   21db2:	4620      	mov	r0, r4
   21db4:	f7ff ff30 	bl	21c18 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21db8:	480a      	ldr	r0, [pc, #40]	; (21de4 <z_ready_thread+0x70>)
   21dba:	f7fe fdab 	bl	20914 <z_spin_unlock_valid>
   21dbe:	b958      	cbnz	r0, 21dd8 <z_ready_thread+0x64>
   21dc0:	23c2      	movs	r3, #194	; 0xc2
   21dc2:	4a09      	ldr	r2, [pc, #36]	; (21de8 <z_ready_thread+0x74>)
   21dc4:	490c      	ldr	r1, [pc, #48]	; (21df8 <z_ready_thread+0x84>)
   21dc6:	480a      	ldr	r0, [pc, #40]	; (21df0 <z_ready_thread+0x7c>)
   21dc8:	f005 fc13 	bl	275f2 <assert_print>
   21dcc:	4905      	ldr	r1, [pc, #20]	; (21de4 <z_ready_thread+0x70>)
   21dce:	480b      	ldr	r0, [pc, #44]	; (21dfc <z_ready_thread+0x88>)
   21dd0:	f005 fc0f 	bl	275f2 <assert_print>
   21dd4:	21c2      	movs	r1, #194	; 0xc2
   21dd6:	e7e6      	b.n	21da6 <z_ready_thread+0x32>
	__asm__ volatile(
   21dd8:	f385 8811 	msr	BASEPRI, r5
   21ddc:	f3bf 8f6f 	isb	sy
		}
	}
}
   21de0:	bd38      	pop	{r3, r4, r5, pc}
   21de2:	bf00      	nop
   21de4:	2002f768 	.word	0x2002f768
   21de8:	0002f55d 	.word	0x0002f55d
   21dec:	0002f5b6 	.word	0x0002f5b6
   21df0:	0002e715 	.word	0x0002e715
   21df4:	0002f5cb 	.word	0x0002f5cb
   21df8:	0002f58a 	.word	0x0002f58a
   21dfc:	0002f5a1 	.word	0x0002f5a1

00021e00 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   21e00:	b538      	push	{r3, r4, r5, lr}
   21e02:	4604      	mov	r4, r0
	__asm__ volatile(
   21e04:	f04f 0320 	mov.w	r3, #32
   21e08:	f3ef 8511 	mrs	r5, BASEPRI
   21e0c:	f383 8812 	msr	BASEPRI_MAX, r3
   21e10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e14:	4816      	ldr	r0, [pc, #88]	; (21e70 <z_unpend_thread_no_timeout+0x70>)
   21e16:	f7fe fd6f 	bl	208f8 <z_spin_lock_valid>
   21e1a:	b968      	cbnz	r0, 21e38 <z_unpend_thread_no_timeout+0x38>
   21e1c:	2394      	movs	r3, #148	; 0x94
   21e1e:	4a15      	ldr	r2, [pc, #84]	; (21e74 <z_unpend_thread_no_timeout+0x74>)
   21e20:	4915      	ldr	r1, [pc, #84]	; (21e78 <z_unpend_thread_no_timeout+0x78>)
   21e22:	4816      	ldr	r0, [pc, #88]	; (21e7c <z_unpend_thread_no_timeout+0x7c>)
   21e24:	f005 fbe5 	bl	275f2 <assert_print>
   21e28:	4911      	ldr	r1, [pc, #68]	; (21e70 <z_unpend_thread_no_timeout+0x70>)
   21e2a:	4815      	ldr	r0, [pc, #84]	; (21e80 <z_unpend_thread_no_timeout+0x80>)
   21e2c:	f005 fbe1 	bl	275f2 <assert_print>
   21e30:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e32:	4810      	ldr	r0, [pc, #64]	; (21e74 <z_unpend_thread_no_timeout+0x74>)
   21e34:	f005 fbd6 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   21e38:	480d      	ldr	r0, [pc, #52]	; (21e70 <z_unpend_thread_no_timeout+0x70>)
   21e3a:	f7fe fd79 	bl	20930 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   21e3e:	4620      	mov	r0, r4
   21e40:	f000 fc62 	bl	22708 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e44:	480a      	ldr	r0, [pc, #40]	; (21e70 <z_unpend_thread_no_timeout+0x70>)
   21e46:	f7fe fd65 	bl	20914 <z_spin_unlock_valid>
   21e4a:	b958      	cbnz	r0, 21e64 <z_unpend_thread_no_timeout+0x64>
   21e4c:	23c2      	movs	r3, #194	; 0xc2
   21e4e:	4a09      	ldr	r2, [pc, #36]	; (21e74 <z_unpend_thread_no_timeout+0x74>)
   21e50:	490c      	ldr	r1, [pc, #48]	; (21e84 <z_unpend_thread_no_timeout+0x84>)
   21e52:	480a      	ldr	r0, [pc, #40]	; (21e7c <z_unpend_thread_no_timeout+0x7c>)
   21e54:	f005 fbcd 	bl	275f2 <assert_print>
   21e58:	4905      	ldr	r1, [pc, #20]	; (21e70 <z_unpend_thread_no_timeout+0x70>)
   21e5a:	480b      	ldr	r0, [pc, #44]	; (21e88 <z_unpend_thread_no_timeout+0x88>)
   21e5c:	f005 fbc9 	bl	275f2 <assert_print>
   21e60:	21c2      	movs	r1, #194	; 0xc2
   21e62:	e7e6      	b.n	21e32 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   21e64:	f385 8811 	msr	BASEPRI, r5
   21e68:	f3bf 8f6f 	isb	sy
	}
}
   21e6c:	bd38      	pop	{r3, r4, r5, pc}
   21e6e:	bf00      	nop
   21e70:	2002f768 	.word	0x2002f768
   21e74:	0002f55d 	.word	0x0002f55d
   21e78:	0002f5b6 	.word	0x0002f5b6
   21e7c:	0002e715 	.word	0x0002e715
   21e80:	0002f5cb 	.word	0x0002f5cb
   21e84:	0002f58a 	.word	0x0002f58a
   21e88:	0002f5a1 	.word	0x0002f5a1

00021e8c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   21e8c:	b570      	push	{r4, r5, r6, lr}
   21e8e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21e90:	460d      	mov	r5, r1
   21e92:	b9e9      	cbnz	r1, 21ed0 <z_reschedule+0x44>
   21e94:	f3ef 8605 	mrs	r6, IPSR
   21e98:	b9d6      	cbnz	r6, 21ed0 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   21e9a:	4b18      	ldr	r3, [pc, #96]	; (21efc <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   21e9c:	69da      	ldr	r2, [r3, #28]
   21e9e:	689b      	ldr	r3, [r3, #8]
   21ea0:	429a      	cmp	r2, r3
   21ea2:	d015      	beq.n	21ed0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ea4:	f7fe fd36 	bl	20914 <z_spin_unlock_valid>
   21ea8:	b968      	cbnz	r0, 21ec6 <z_reschedule+0x3a>
   21eaa:	23e1      	movs	r3, #225	; 0xe1
   21eac:	4a14      	ldr	r2, [pc, #80]	; (21f00 <z_reschedule+0x74>)
   21eae:	4915      	ldr	r1, [pc, #84]	; (21f04 <z_reschedule+0x78>)
   21eb0:	4815      	ldr	r0, [pc, #84]	; (21f08 <z_reschedule+0x7c>)
   21eb2:	f005 fb9e 	bl	275f2 <assert_print>
   21eb6:	4621      	mov	r1, r4
   21eb8:	4814      	ldr	r0, [pc, #80]	; (21f0c <z_reschedule+0x80>)
   21eba:	f005 fb9a 	bl	275f2 <assert_print>
   21ebe:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ec0:	480f      	ldr	r0, [pc, #60]	; (21f00 <z_reschedule+0x74>)
   21ec2:	f005 fb8f 	bl	275e4 <assert_post_action>
	ret = arch_swap(key);
   21ec6:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21ecc:	f7ef b992 	b.w	111f4 <arch_swap>
   21ed0:	4620      	mov	r0, r4
   21ed2:	f7fe fd1f 	bl	20914 <z_spin_unlock_valid>
   21ed6:	b958      	cbnz	r0, 21ef0 <z_reschedule+0x64>
   21ed8:	23c2      	movs	r3, #194	; 0xc2
   21eda:	4a09      	ldr	r2, [pc, #36]	; (21f00 <z_reschedule+0x74>)
   21edc:	4909      	ldr	r1, [pc, #36]	; (21f04 <z_reschedule+0x78>)
   21ede:	480a      	ldr	r0, [pc, #40]	; (21f08 <z_reschedule+0x7c>)
   21ee0:	f005 fb87 	bl	275f2 <assert_print>
   21ee4:	4621      	mov	r1, r4
   21ee6:	4809      	ldr	r0, [pc, #36]	; (21f0c <z_reschedule+0x80>)
   21ee8:	f005 fb83 	bl	275f2 <assert_print>
   21eec:	21c2      	movs	r1, #194	; 0xc2
   21eee:	e7e7      	b.n	21ec0 <z_reschedule+0x34>
   21ef0:	f385 8811 	msr	BASEPRI, r5
   21ef4:	f3bf 8f6f 	isb	sy
   21ef8:	bd70      	pop	{r4, r5, r6, pc}
   21efa:	bf00      	nop
   21efc:	2002f720 	.word	0x2002f720
   21f00:	0002f55d 	.word	0x0002f55d
   21f04:	0002f58a 	.word	0x0002f58a
   21f08:	0002e715 	.word	0x0002e715
   21f0c:	0002f5a1 	.word	0x0002f5a1

00021f10 <z_sched_start>:
{
   21f10:	b538      	push	{r3, r4, r5, lr}
   21f12:	4604      	mov	r4, r0
	__asm__ volatile(
   21f14:	f04f 0320 	mov.w	r3, #32
   21f18:	f3ef 8511 	mrs	r5, BASEPRI
   21f1c:	f383 8812 	msr	BASEPRI_MAX, r3
   21f20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f24:	481c      	ldr	r0, [pc, #112]	; (21f98 <z_sched_start+0x88>)
   21f26:	f7fe fce7 	bl	208f8 <z_spin_lock_valid>
   21f2a:	b968      	cbnz	r0, 21f48 <z_sched_start+0x38>
   21f2c:	2394      	movs	r3, #148	; 0x94
   21f2e:	4a1b      	ldr	r2, [pc, #108]	; (21f9c <z_sched_start+0x8c>)
   21f30:	491b      	ldr	r1, [pc, #108]	; (21fa0 <z_sched_start+0x90>)
   21f32:	481c      	ldr	r0, [pc, #112]	; (21fa4 <z_sched_start+0x94>)
   21f34:	f005 fb5d 	bl	275f2 <assert_print>
   21f38:	4917      	ldr	r1, [pc, #92]	; (21f98 <z_sched_start+0x88>)
   21f3a:	481b      	ldr	r0, [pc, #108]	; (21fa8 <z_sched_start+0x98>)
   21f3c:	f005 fb59 	bl	275f2 <assert_print>
   21f40:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f42:	4816      	ldr	r0, [pc, #88]	; (21f9c <z_sched_start+0x8c>)
   21f44:	f005 fb4e 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f48:	4813      	ldr	r0, [pc, #76]	; (21f98 <z_sched_start+0x88>)
   21f4a:	f7fe fcf1 	bl	20930 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21f4e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   21f50:	075a      	lsls	r2, r3, #29
   21f52:	d414      	bmi.n	21f7e <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f54:	4810      	ldr	r0, [pc, #64]	; (21f98 <z_sched_start+0x88>)
   21f56:	f7fe fcdd 	bl	20914 <z_spin_unlock_valid>
   21f5a:	b958      	cbnz	r0, 21f74 <z_sched_start+0x64>
   21f5c:	23c2      	movs	r3, #194	; 0xc2
   21f5e:	4a0f      	ldr	r2, [pc, #60]	; (21f9c <z_sched_start+0x8c>)
   21f60:	4912      	ldr	r1, [pc, #72]	; (21fac <z_sched_start+0x9c>)
   21f62:	4810      	ldr	r0, [pc, #64]	; (21fa4 <z_sched_start+0x94>)
   21f64:	f005 fb45 	bl	275f2 <assert_print>
   21f68:	490b      	ldr	r1, [pc, #44]	; (21f98 <z_sched_start+0x88>)
   21f6a:	4811      	ldr	r0, [pc, #68]	; (21fb0 <z_sched_start+0xa0>)
   21f6c:	f005 fb41 	bl	275f2 <assert_print>
   21f70:	21c2      	movs	r1, #194	; 0xc2
   21f72:	e7e6      	b.n	21f42 <z_sched_start+0x32>
	__asm__ volatile(
   21f74:	f385 8811 	msr	BASEPRI, r5
   21f78:	f3bf 8f6f 	isb	sy
}
   21f7c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21f7e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   21f82:	4620      	mov	r0, r4
   21f84:	7363      	strb	r3, [r4, #13]
   21f86:	f7ff fe47 	bl	21c18 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21f8a:	4629      	mov	r1, r5
}
   21f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   21f90:	4801      	ldr	r0, [pc, #4]	; (21f98 <z_sched_start+0x88>)
   21f92:	f7ff bf7b 	b.w	21e8c <z_reschedule>
   21f96:	bf00      	nop
   21f98:	2002f768 	.word	0x2002f768
   21f9c:	0002f55d 	.word	0x0002f55d
   21fa0:	0002f5b6 	.word	0x0002f5b6
   21fa4:	0002e715 	.word	0x0002e715
   21fa8:	0002f5cb 	.word	0x0002f5cb
   21fac:	0002f58a 	.word	0x0002f58a
   21fb0:	0002f5a1 	.word	0x0002f5a1

00021fb4 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   21fb4:	b510      	push	{r4, lr}
	__asm__ volatile(
   21fb6:	f04f 0320 	mov.w	r3, #32
   21fba:	f3ef 8411 	mrs	r4, BASEPRI
   21fbe:	f383 8812 	msr	BASEPRI_MAX, r3
   21fc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21fc6:	4825      	ldr	r0, [pc, #148]	; (2205c <k_sched_lock+0xa8>)
   21fc8:	f7fe fc96 	bl	208f8 <z_spin_lock_valid>
   21fcc:	b960      	cbnz	r0, 21fe8 <k_sched_lock+0x34>
   21fce:	2394      	movs	r3, #148	; 0x94
   21fd0:	4a23      	ldr	r2, [pc, #140]	; (22060 <k_sched_lock+0xac>)
   21fd2:	4924      	ldr	r1, [pc, #144]	; (22064 <k_sched_lock+0xb0>)
   21fd4:	4824      	ldr	r0, [pc, #144]	; (22068 <k_sched_lock+0xb4>)
   21fd6:	f005 fb0c 	bl	275f2 <assert_print>
   21fda:	4920      	ldr	r1, [pc, #128]	; (2205c <k_sched_lock+0xa8>)
   21fdc:	4823      	ldr	r0, [pc, #140]	; (2206c <k_sched_lock+0xb8>)
   21fde:	f005 fb08 	bl	275f2 <assert_print>
   21fe2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fe4:	481e      	ldr	r0, [pc, #120]	; (22060 <k_sched_lock+0xac>)
   21fe6:	e010      	b.n	2200a <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   21fe8:	481c      	ldr	r0, [pc, #112]	; (2205c <k_sched_lock+0xa8>)
   21fea:	f7fe fca1 	bl	20930 <z_spin_lock_set_owner>
   21fee:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21ff2:	b163      	cbz	r3, 2200e <k_sched_lock+0x5a>
   21ff4:	491e      	ldr	r1, [pc, #120]	; (22070 <k_sched_lock+0xbc>)
   21ff6:	23fd      	movs	r3, #253	; 0xfd
   21ff8:	4a1e      	ldr	r2, [pc, #120]	; (22074 <k_sched_lock+0xc0>)
   21ffa:	481b      	ldr	r0, [pc, #108]	; (22068 <k_sched_lock+0xb4>)
   21ffc:	f005 faf9 	bl	275f2 <assert_print>
   22000:	481d      	ldr	r0, [pc, #116]	; (22078 <k_sched_lock+0xc4>)
   22002:	f005 faf6 	bl	275f2 <assert_print>
   22006:	21fd      	movs	r1, #253	; 0xfd
   22008:	481a      	ldr	r0, [pc, #104]	; (22074 <k_sched_lock+0xc0>)
   2200a:	f005 faeb 	bl	275e4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2200e:	4b1b      	ldr	r3, [pc, #108]	; (2207c <k_sched_lock+0xc8>)
   22010:	689a      	ldr	r2, [r3, #8]
   22012:	7bd3      	ldrb	r3, [r2, #15]
   22014:	2b01      	cmp	r3, #1
   22016:	d10a      	bne.n	2202e <k_sched_lock+0x7a>
   22018:	4919      	ldr	r1, [pc, #100]	; (22080 <k_sched_lock+0xcc>)
   2201a:	23fe      	movs	r3, #254	; 0xfe
   2201c:	4a15      	ldr	r2, [pc, #84]	; (22074 <k_sched_lock+0xc0>)
   2201e:	4812      	ldr	r0, [pc, #72]	; (22068 <k_sched_lock+0xb4>)
   22020:	f005 fae7 	bl	275f2 <assert_print>
   22024:	4814      	ldr	r0, [pc, #80]	; (22078 <k_sched_lock+0xc4>)
   22026:	f005 fae4 	bl	275f2 <assert_print>
   2202a:	21fe      	movs	r1, #254	; 0xfe
   2202c:	e7ec      	b.n	22008 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   2202e:	3b01      	subs	r3, #1
   22030:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22032:	480a      	ldr	r0, [pc, #40]	; (2205c <k_sched_lock+0xa8>)
   22034:	f7fe fc6e 	bl	20914 <z_spin_unlock_valid>
   22038:	b958      	cbnz	r0, 22052 <k_sched_lock+0x9e>
   2203a:	23c2      	movs	r3, #194	; 0xc2
   2203c:	4a08      	ldr	r2, [pc, #32]	; (22060 <k_sched_lock+0xac>)
   2203e:	4911      	ldr	r1, [pc, #68]	; (22084 <k_sched_lock+0xd0>)
   22040:	4809      	ldr	r0, [pc, #36]	; (22068 <k_sched_lock+0xb4>)
   22042:	f005 fad6 	bl	275f2 <assert_print>
   22046:	4905      	ldr	r1, [pc, #20]	; (2205c <k_sched_lock+0xa8>)
   22048:	480f      	ldr	r0, [pc, #60]	; (22088 <k_sched_lock+0xd4>)
   2204a:	f005 fad2 	bl	275f2 <assert_print>
   2204e:	21c2      	movs	r1, #194	; 0xc2
   22050:	e7c8      	b.n	21fe4 <k_sched_lock+0x30>
	__asm__ volatile(
   22052:	f384 8811 	msr	BASEPRI, r4
   22056:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2205a:	bd10      	pop	{r4, pc}
   2205c:	2002f768 	.word	0x2002f768
   22060:	0002f55d 	.word	0x0002f55d
   22064:	0002f5b6 	.word	0x0002f5b6
   22068:	0002e715 	.word	0x0002e715
   2206c:	0002f5cb 	.word	0x0002f5cb
   22070:	0003388f 	.word	0x0003388f
   22074:	00033b66 	.word	0x00033b66
   22078:	00032363 	.word	0x00032363
   2207c:	2002f720 	.word	0x2002f720
   22080:	00033b91 	.word	0x00033b91
   22084:	0002f58a 	.word	0x0002f58a
   22088:	0002f5a1 	.word	0x0002f5a1

0002208c <k_sched_unlock>:

void k_sched_unlock(void)
{
   2208c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2208e:	f04f 0320 	mov.w	r3, #32
   22092:	f3ef 8411 	mrs	r4, BASEPRI
   22096:	f383 8812 	msr	BASEPRI_MAX, r3
   2209a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2209e:	4829      	ldr	r0, [pc, #164]	; (22144 <k_sched_unlock+0xb8>)
   220a0:	f7fe fc2a 	bl	208f8 <z_spin_lock_valid>
   220a4:	b960      	cbnz	r0, 220c0 <k_sched_unlock+0x34>
   220a6:	2394      	movs	r3, #148	; 0x94
   220a8:	4a27      	ldr	r2, [pc, #156]	; (22148 <k_sched_unlock+0xbc>)
   220aa:	4928      	ldr	r1, [pc, #160]	; (2214c <k_sched_unlock+0xc0>)
   220ac:	4828      	ldr	r0, [pc, #160]	; (22150 <k_sched_unlock+0xc4>)
   220ae:	f005 faa0 	bl	275f2 <assert_print>
   220b2:	4924      	ldr	r1, [pc, #144]	; (22144 <k_sched_unlock+0xb8>)
   220b4:	4827      	ldr	r0, [pc, #156]	; (22154 <k_sched_unlock+0xc8>)
   220b6:	f005 fa9c 	bl	275f2 <assert_print>
   220ba:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   220bc:	4822      	ldr	r0, [pc, #136]	; (22148 <k_sched_unlock+0xbc>)
   220be:	e013      	b.n	220e8 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   220c0:	4820      	ldr	r0, [pc, #128]	; (22144 <k_sched_unlock+0xb8>)
   220c2:	f7fe fc35 	bl	20930 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   220c6:	4b24      	ldr	r3, [pc, #144]	; (22158 <k_sched_unlock+0xcc>)
   220c8:	689a      	ldr	r2, [r3, #8]
   220ca:	7bd3      	ldrb	r3, [r2, #15]
   220cc:	b973      	cbnz	r3, 220ec <k_sched_unlock+0x60>
   220ce:	4923      	ldr	r1, [pc, #140]	; (2215c <k_sched_unlock+0xd0>)
   220d0:	f240 33e7 	movw	r3, #999	; 0x3e7
   220d4:	4a22      	ldr	r2, [pc, #136]	; (22160 <k_sched_unlock+0xd4>)
   220d6:	481e      	ldr	r0, [pc, #120]	; (22150 <k_sched_unlock+0xc4>)
   220d8:	f005 fa8b 	bl	275f2 <assert_print>
   220dc:	4821      	ldr	r0, [pc, #132]	; (22164 <k_sched_unlock+0xd8>)
   220de:	f005 fa88 	bl	275f2 <assert_print>
   220e2:	f240 31e7 	movw	r1, #999	; 0x3e7
   220e6:	481e      	ldr	r0, [pc, #120]	; (22160 <k_sched_unlock+0xd4>)
   220e8:	f005 fa7c 	bl	275e4 <assert_post_action>
   220ec:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   220f0:	b160      	cbz	r0, 2210c <k_sched_unlock+0x80>
   220f2:	491d      	ldr	r1, [pc, #116]	; (22168 <k_sched_unlock+0xdc>)
   220f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   220f8:	4a19      	ldr	r2, [pc, #100]	; (22160 <k_sched_unlock+0xd4>)
   220fa:	4815      	ldr	r0, [pc, #84]	; (22150 <k_sched_unlock+0xc4>)
   220fc:	f005 fa79 	bl	275f2 <assert_print>
   22100:	4818      	ldr	r0, [pc, #96]	; (22164 <k_sched_unlock+0xd8>)
   22102:	f005 fa76 	bl	275f2 <assert_print>
   22106:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2210a:	e7ec      	b.n	220e6 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   2210c:	3301      	adds	r3, #1
   2210e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22110:	f7ff fd4e 	bl	21bb0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22114:	480b      	ldr	r0, [pc, #44]	; (22144 <k_sched_unlock+0xb8>)
   22116:	f7fe fbfd 	bl	20914 <z_spin_unlock_valid>
   2211a:	b958      	cbnz	r0, 22134 <k_sched_unlock+0xa8>
   2211c:	23c2      	movs	r3, #194	; 0xc2
   2211e:	4a0a      	ldr	r2, [pc, #40]	; (22148 <k_sched_unlock+0xbc>)
   22120:	4912      	ldr	r1, [pc, #72]	; (2216c <k_sched_unlock+0xe0>)
   22122:	480b      	ldr	r0, [pc, #44]	; (22150 <k_sched_unlock+0xc4>)
   22124:	f005 fa65 	bl	275f2 <assert_print>
   22128:	4906      	ldr	r1, [pc, #24]	; (22144 <k_sched_unlock+0xb8>)
   2212a:	4811      	ldr	r0, [pc, #68]	; (22170 <k_sched_unlock+0xe4>)
   2212c:	f005 fa61 	bl	275f2 <assert_print>
   22130:	21c2      	movs	r1, #194	; 0xc2
   22132:	e7c3      	b.n	220bc <k_sched_unlock+0x30>
	__asm__ volatile(
   22134:	f384 8811 	msr	BASEPRI, r4
   22138:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   2213c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   22140:	f009 be94 	b.w	2be6c <z_reschedule_unlocked>
   22144:	2002f768 	.word	0x2002f768
   22148:	0002f55d 	.word	0x0002f55d
   2214c:	0002f5b6 	.word	0x0002f5b6
   22150:	0002e715 	.word	0x0002e715
   22154:	0002f5cb 	.word	0x0002f5cb
   22158:	2002f720 	.word	0x2002f720
   2215c:	00033bc2 	.word	0x00033bc2
   22160:	00033afc 	.word	0x00033afc
   22164:	00032363 	.word	0x00032363
   22168:	0003388f 	.word	0x0003388f
   2216c:	0002f58a 	.word	0x0002f58a
   22170:	0002f5a1 	.word	0x0002f5a1

00022174 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   22174:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22176:	4b0b      	ldr	r3, [pc, #44]	; (221a4 <z_priq_dumb_remove+0x30>)
   22178:	4299      	cmp	r1, r3
   2217a:	d10b      	bne.n	22194 <z_priq_dumb_remove+0x20>
   2217c:	490a      	ldr	r1, [pc, #40]	; (221a8 <z_priq_dumb_remove+0x34>)
   2217e:	480b      	ldr	r0, [pc, #44]	; (221ac <z_priq_dumb_remove+0x38>)
   22180:	f240 4373 	movw	r3, #1139	; 0x473
   22184:	4a0a      	ldr	r2, [pc, #40]	; (221b0 <z_priq_dumb_remove+0x3c>)
   22186:	f005 fa34 	bl	275f2 <assert_print>
   2218a:	f240 4173 	movw	r1, #1139	; 0x473
   2218e:	4808      	ldr	r0, [pc, #32]	; (221b0 <z_priq_dumb_remove+0x3c>)
   22190:	f005 fa28 	bl	275e4 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   22194:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   22198:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2219a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2219c:	2300      	movs	r3, #0
	node->prev = NULL;
   2219e:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   221a2:	bd08      	pop	{r3, pc}
   221a4:	20009c98 	.word	0x20009c98
   221a8:	00033b45 	.word	0x00033b45
   221ac:	0002e715 	.word	0x0002e715
   221b0:	00033afc 	.word	0x00033afc

000221b4 <move_thread_to_end_of_prio_q>:
{
   221b4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   221b6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   221ba:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   221bc:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   221be:	7b43      	ldrb	r3, [r0, #13]
   221c0:	da06      	bge.n	221d0 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   221c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   221c6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   221c8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   221ca:	481d      	ldr	r0, [pc, #116]	; (22240 <move_thread_to_end_of_prio_q+0x8c>)
   221cc:	f7ff ffd2 	bl	22174 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   221d0:	7b63      	ldrb	r3, [r4, #13]
   221d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   221d6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   221d8:	4b1a      	ldr	r3, [pc, #104]	; (22244 <move_thread_to_end_of_prio_q+0x90>)
   221da:	429c      	cmp	r4, r3
   221dc:	d109      	bne.n	221f2 <move_thread_to_end_of_prio_q+0x3e>
   221de:	491a      	ldr	r1, [pc, #104]	; (22248 <move_thread_to_end_of_prio_q+0x94>)
   221e0:	481a      	ldr	r0, [pc, #104]	; (2224c <move_thread_to_end_of_prio_q+0x98>)
   221e2:	23ba      	movs	r3, #186	; 0xba
   221e4:	4a1a      	ldr	r2, [pc, #104]	; (22250 <move_thread_to_end_of_prio_q+0x9c>)
   221e6:	f005 fa04 	bl	275f2 <assert_print>
   221ea:	21ba      	movs	r1, #186	; 0xba
   221ec:	4818      	ldr	r0, [pc, #96]	; (22250 <move_thread_to_end_of_prio_q+0x9c>)
   221ee:	f005 f9f9 	bl	275e4 <assert_post_action>
	return list->head == list;
   221f2:	4a18      	ldr	r2, [pc, #96]	; (22254 <move_thread_to_end_of_prio_q+0xa0>)
   221f4:	4611      	mov	r1, r2
   221f6:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   221fa:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   221fc:	428b      	cmp	r3, r1
   221fe:	bf08      	it	eq
   22200:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22202:	b923      	cbnz	r3, 2220e <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   22204:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   22208:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2220a:	6254      	str	r4, [r2, #36]	; 0x24
}
   2220c:	e00c      	b.n	22228 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   2220e:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22212:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   22216:	42b5      	cmp	r5, r6
   22218:	d00e      	beq.n	22238 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2221a:	42ae      	cmp	r6, r5
   2221c:	dd0c      	ble.n	22238 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   2221e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   22220:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   22224:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22226:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   22228:	6890      	ldr	r0, [r2, #8]
   2222a:	1b03      	subs	r3, r0, r4
   2222c:	4258      	negs	r0, r3
   2222e:	4158      	adcs	r0, r3
}
   22230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   22234:	f7ff bcbc 	b.w	21bb0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22238:	4298      	cmp	r0, r3
   2223a:	d0e3      	beq.n	22204 <move_thread_to_end_of_prio_q+0x50>
   2223c:	681b      	ldr	r3, [r3, #0]
   2223e:	e7e0      	b.n	22202 <move_thread_to_end_of_prio_q+0x4e>
   22240:	2002f740 	.word	0x2002f740
   22244:	20009c98 	.word	0x20009c98
   22248:	00033b45 	.word	0x00033b45
   2224c:	0002e715 	.word	0x0002e715
   22250:	00033afc 	.word	0x00033afc
   22254:	2002f720 	.word	0x2002f720

00022258 <z_time_slice>:
{
   22258:	b570      	push	{r4, r5, r6, lr}
   2225a:	4605      	mov	r5, r0
	__asm__ volatile(
   2225c:	f04f 0320 	mov.w	r3, #32
   22260:	f3ef 8611 	mrs	r6, BASEPRI
   22264:	f383 8812 	msr	BASEPRI_MAX, r3
   22268:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2226c:	4829      	ldr	r0, [pc, #164]	; (22314 <z_time_slice+0xbc>)
   2226e:	f7fe fb43 	bl	208f8 <z_spin_lock_valid>
   22272:	b968      	cbnz	r0, 22290 <z_time_slice+0x38>
   22274:	2394      	movs	r3, #148	; 0x94
   22276:	4a28      	ldr	r2, [pc, #160]	; (22318 <z_time_slice+0xc0>)
   22278:	4928      	ldr	r1, [pc, #160]	; (2231c <z_time_slice+0xc4>)
   2227a:	4829      	ldr	r0, [pc, #164]	; (22320 <z_time_slice+0xc8>)
   2227c:	f005 f9b9 	bl	275f2 <assert_print>
   22280:	4924      	ldr	r1, [pc, #144]	; (22314 <z_time_slice+0xbc>)
   22282:	4828      	ldr	r0, [pc, #160]	; (22324 <z_time_slice+0xcc>)
   22284:	f005 f9b5 	bl	275f2 <assert_print>
   22288:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2228a:	4823      	ldr	r0, [pc, #140]	; (22318 <z_time_slice+0xc0>)
   2228c:	f005 f9aa 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   22290:	4820      	ldr	r0, [pc, #128]	; (22314 <z_time_slice+0xbc>)
   22292:	f7fe fb4d 	bl	20930 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   22296:	4b24      	ldr	r3, [pc, #144]	; (22328 <z_time_slice+0xd0>)
   22298:	4a24      	ldr	r2, [pc, #144]	; (2232c <z_time_slice+0xd4>)
   2229a:	689c      	ldr	r4, [r3, #8]
   2229c:	6811      	ldr	r1, [r2, #0]
   2229e:	428c      	cmp	r4, r1
   222a0:	d112      	bne.n	222c8 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   222a2:	4620      	mov	r0, r4
   222a4:	f7ff fc70 	bl	21b88 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222a8:	481a      	ldr	r0, [pc, #104]	; (22314 <z_time_slice+0xbc>)
   222aa:	f7fe fb33 	bl	20914 <z_spin_unlock_valid>
   222ae:	bb58      	cbnz	r0, 22308 <z_time_slice+0xb0>
   222b0:	23c2      	movs	r3, #194	; 0xc2
   222b2:	4a19      	ldr	r2, [pc, #100]	; (22318 <z_time_slice+0xc0>)
   222b4:	491e      	ldr	r1, [pc, #120]	; (22330 <z_time_slice+0xd8>)
   222b6:	481a      	ldr	r0, [pc, #104]	; (22320 <z_time_slice+0xc8>)
   222b8:	f005 f99b 	bl	275f2 <assert_print>
   222bc:	4915      	ldr	r1, [pc, #84]	; (22314 <z_time_slice+0xbc>)
   222be:	481d      	ldr	r0, [pc, #116]	; (22334 <z_time_slice+0xdc>)
   222c0:	f005 f997 	bl	275f2 <assert_print>
   222c4:	21c2      	movs	r1, #194	; 0xc2
   222c6:	e7e0      	b.n	2228a <z_time_slice+0x32>
	pending_current = NULL;
   222c8:	2100      	movs	r1, #0
   222ca:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   222cc:	4a1a      	ldr	r2, [pc, #104]	; (22338 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   222ce:	6812      	ldr	r2, [r2, #0]
   222d0:	b1c2      	cbz	r2, 22304 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   222d2:	89e2      	ldrh	r2, [r4, #14]
   222d4:	2a7f      	cmp	r2, #127	; 0x7f
   222d6:	d815      	bhi.n	22304 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   222d8:	7b62      	ldrb	r2, [r4, #13]
   222da:	06d2      	lsls	r2, r2, #27
   222dc:	d112      	bne.n	22304 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   222de:	4a17      	ldr	r2, [pc, #92]	; (2233c <z_time_slice+0xe4>)
   222e0:	f994 100e 	ldrsb.w	r1, [r4, #14]
   222e4:	6812      	ldr	r2, [r2, #0]
   222e6:	4291      	cmp	r1, r2
   222e8:	db0c      	blt.n	22304 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   222ea:	4a15      	ldr	r2, [pc, #84]	; (22340 <z_time_slice+0xe8>)
   222ec:	4294      	cmp	r4, r2
   222ee:	d009      	beq.n	22304 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   222f0:	691a      	ldr	r2, [r3, #16]
   222f2:	42aa      	cmp	r2, r5
   222f4:	dc03      	bgt.n	222fe <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   222f6:	4620      	mov	r0, r4
   222f8:	f7ff ff5c 	bl	221b4 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   222fc:	e7d1      	b.n	222a2 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   222fe:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   22300:	611a      	str	r2, [r3, #16]
   22302:	e7d1      	b.n	222a8 <z_time_slice+0x50>
   22304:	2200      	movs	r2, #0
   22306:	e7fb      	b.n	22300 <z_time_slice+0xa8>
	__asm__ volatile(
   22308:	f386 8811 	msr	BASEPRI, r6
   2230c:	f3bf 8f6f 	isb	sy
}
   22310:	bd70      	pop	{r4, r5, r6, pc}
   22312:	bf00      	nop
   22314:	2002f768 	.word	0x2002f768
   22318:	0002f55d 	.word	0x0002f55d
   2231c:	0002f5b6 	.word	0x0002f5b6
   22320:	0002e715 	.word	0x0002e715
   22324:	0002f5cb 	.word	0x0002f5cb
   22328:	2002f720 	.word	0x2002f720
   2232c:	2002f75c 	.word	0x2002f75c
   22330:	0002f58a 	.word	0x0002f58a
   22334:	0002f5a1 	.word	0x0002f5a1
   22338:	2002f764 	.word	0x2002f764
   2233c:	2002f760 	.word	0x2002f760
   22340:	20009c98 	.word	0x20009c98

00022344 <unready_thread>:
{
   22344:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   22346:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2234a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2234c:	2a00      	cmp	r2, #0
   2234e:	7b43      	ldrb	r3, [r0, #13]
   22350:	da06      	bge.n	22360 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   22356:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22358:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2235a:	4806      	ldr	r0, [pc, #24]	; (22374 <unready_thread+0x30>)
   2235c:	f7ff ff0a 	bl	22174 <z_priq_dumb_remove>
	update_cache(thread == _current);
   22360:	4b05      	ldr	r3, [pc, #20]	; (22378 <unready_thread+0x34>)
   22362:	6898      	ldr	r0, [r3, #8]
   22364:	1b03      	subs	r3, r0, r4
   22366:	4258      	negs	r0, r3
   22368:	4158      	adcs	r0, r3
}
   2236a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2236e:	f7ff bc1f 	b.w	21bb0 <update_cache>
   22372:	bf00      	nop
   22374:	2002f740 	.word	0x2002f740
   22378:	2002f720 	.word	0x2002f720

0002237c <add_to_waitq_locked>:
{
   2237c:	b538      	push	{r3, r4, r5, lr}
   2237e:	4604      	mov	r4, r0
   22380:	460d      	mov	r5, r1
	unready_thread(thread);
   22382:	f7ff ffdf 	bl	22344 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22386:	7b63      	ldrb	r3, [r4, #13]
   22388:	f043 0302 	orr.w	r3, r3, #2
   2238c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2238e:	b34d      	cbz	r5, 223e4 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22390:	4b15      	ldr	r3, [pc, #84]	; (223e8 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   22392:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22394:	429c      	cmp	r4, r3
   22396:	d109      	bne.n	223ac <add_to_waitq_locked+0x30>
   22398:	4914      	ldr	r1, [pc, #80]	; (223ec <add_to_waitq_locked+0x70>)
   2239a:	4815      	ldr	r0, [pc, #84]	; (223f0 <add_to_waitq_locked+0x74>)
   2239c:	23ba      	movs	r3, #186	; 0xba
   2239e:	4a15      	ldr	r2, [pc, #84]	; (223f4 <add_to_waitq_locked+0x78>)
   223a0:	f005 f927 	bl	275f2 <assert_print>
   223a4:	21ba      	movs	r1, #186	; 0xba
   223a6:	4813      	ldr	r0, [pc, #76]	; (223f4 <add_to_waitq_locked+0x78>)
   223a8:	f005 f91c 	bl	275e4 <assert_post_action>
	return list->head == list;
   223ac:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   223ae:	429d      	cmp	r5, r3
   223b0:	d109      	bne.n	223c6 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   223b2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   223b4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   223b8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   223ba:	606c      	str	r4, [r5, #4]
}
   223bc:	e012      	b.n	223e4 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   223be:	686a      	ldr	r2, [r5, #4]
   223c0:	4293      	cmp	r3, r2
   223c2:	d0f6      	beq.n	223b2 <add_to_waitq_locked+0x36>
   223c4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   223c6:	2b00      	cmp	r3, #0
   223c8:	d0f3      	beq.n	223b2 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   223ca:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   223ce:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   223d2:	428a      	cmp	r2, r1
   223d4:	d0f3      	beq.n	223be <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   223d6:	4291      	cmp	r1, r2
   223d8:	ddf1      	ble.n	223be <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   223da:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   223dc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   223e0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   223e2:	605c      	str	r4, [r3, #4]
}
   223e4:	bd38      	pop	{r3, r4, r5, pc}
   223e6:	bf00      	nop
   223e8:	20009c98 	.word	0x20009c98
   223ec:	00033b45 	.word	0x00033b45
   223f0:	0002e715 	.word	0x0002e715
   223f4:	00033afc 	.word	0x00033afc

000223f8 <pend_locked>:
{
   223f8:	b570      	push	{r4, r5, r6, lr}
   223fa:	4615      	mov	r5, r2
   223fc:	461c      	mov	r4, r3
   223fe:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   22400:	f7ff ffbc 	bl	2237c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22404:	f1b4 3fff 	cmp.w	r4, #4294967295
   22408:	bf08      	it	eq
   2240a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2240e:	d008      	beq.n	22422 <pend_locked+0x2a>
   22410:	462a      	mov	r2, r5
   22412:	4623      	mov	r3, r4
   22414:	f106 0018 	add.w	r0, r6, #24
   22418:	4902      	ldr	r1, [pc, #8]	; (22424 <pend_locked+0x2c>)
}
   2241a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2241e:	f000 bdf1 	b.w	23004 <z_add_timeout>
   22422:	bd70      	pop	{r4, r5, r6, pc}
   22424:	000227dd 	.word	0x000227dd

00022428 <z_pend_curr>:
{
   22428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2242c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   22430:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 224e8 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   22434:	4c2d      	ldr	r4, [pc, #180]	; (224ec <z_pend_curr+0xc4>)
{
   22436:	4617      	mov	r7, r2
	pending_current = _current;
   22438:	4b2d      	ldr	r3, [pc, #180]	; (224f0 <z_pend_curr+0xc8>)
   2243a:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2243e:	42a0      	cmp	r0, r4
{
   22440:	4605      	mov	r5, r0
   22442:	460e      	mov	r6, r1
	pending_current = _current;
   22444:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   22446:	d10b      	bne.n	22460 <z_pend_curr+0x38>
   22448:	492a      	ldr	r1, [pc, #168]	; (224f4 <z_pend_curr+0xcc>)
   2244a:	482b      	ldr	r0, [pc, #172]	; (224f8 <z_pend_curr+0xd0>)
   2244c:	f240 334e 	movw	r3, #846	; 0x34e
   22450:	4a2a      	ldr	r2, [pc, #168]	; (224fc <z_pend_curr+0xd4>)
   22452:	f005 f8ce 	bl	275f2 <assert_print>
   22456:	f240 314e 	movw	r1, #846	; 0x34e
   2245a:	4828      	ldr	r0, [pc, #160]	; (224fc <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2245c:	f005 f8c2 	bl	275e4 <assert_post_action>
	__asm__ volatile(
   22460:	f04f 0220 	mov.w	r2, #32
   22464:	f3ef 8311 	mrs	r3, BASEPRI
   22468:	f382 8812 	msr	BASEPRI_MAX, r2
   2246c:	f3bf 8f6f 	isb	sy
   22470:	4620      	mov	r0, r4
   22472:	f7fe fa41 	bl	208f8 <z_spin_lock_valid>
   22476:	b960      	cbnz	r0, 22492 <z_pend_curr+0x6a>
   22478:	2394      	movs	r3, #148	; 0x94
   2247a:	4a21      	ldr	r2, [pc, #132]	; (22500 <z_pend_curr+0xd8>)
   2247c:	4921      	ldr	r1, [pc, #132]	; (22504 <z_pend_curr+0xdc>)
   2247e:	481e      	ldr	r0, [pc, #120]	; (224f8 <z_pend_curr+0xd0>)
   22480:	f005 f8b7 	bl	275f2 <assert_print>
   22484:	4621      	mov	r1, r4
   22486:	4820      	ldr	r0, [pc, #128]	; (22508 <z_pend_curr+0xe0>)
   22488:	f005 f8b3 	bl	275f2 <assert_print>
   2248c:	2194      	movs	r1, #148	; 0x94
   2248e:	481c      	ldr	r0, [pc, #112]	; (22500 <z_pend_curr+0xd8>)
   22490:	e7e4      	b.n	2245c <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   22492:	4620      	mov	r0, r4
   22494:	f7fe fa4c 	bl	20930 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   22498:	f8da 0008 	ldr.w	r0, [sl, #8]
   2249c:	4642      	mov	r2, r8
   2249e:	464b      	mov	r3, r9
   224a0:	4639      	mov	r1, r7
   224a2:	f7ff ffa9 	bl	223f8 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   224a6:	4628      	mov	r0, r5
   224a8:	f7fe fa34 	bl	20914 <z_spin_unlock_valid>
   224ac:	b958      	cbnz	r0, 224c6 <z_pend_curr+0x9e>
   224ae:	4917      	ldr	r1, [pc, #92]	; (2250c <z_pend_curr+0xe4>)
   224b0:	23e1      	movs	r3, #225	; 0xe1
   224b2:	4a13      	ldr	r2, [pc, #76]	; (22500 <z_pend_curr+0xd8>)
   224b4:	4810      	ldr	r0, [pc, #64]	; (224f8 <z_pend_curr+0xd0>)
   224b6:	f005 f89c 	bl	275f2 <assert_print>
   224ba:	4629      	mov	r1, r5
   224bc:	4814      	ldr	r0, [pc, #80]	; (22510 <z_pend_curr+0xe8>)
   224be:	f005 f898 	bl	275f2 <assert_print>
   224c2:	21e1      	movs	r1, #225	; 0xe1
   224c4:	e7e3      	b.n	2248e <z_pend_curr+0x66>
   224c6:	4620      	mov	r0, r4
   224c8:	f7fe fa24 	bl	20914 <z_spin_unlock_valid>
   224cc:	b938      	cbnz	r0, 224de <z_pend_curr+0xb6>
   224ce:	490f      	ldr	r1, [pc, #60]	; (2250c <z_pend_curr+0xe4>)
   224d0:	23e1      	movs	r3, #225	; 0xe1
   224d2:	4a0b      	ldr	r2, [pc, #44]	; (22500 <z_pend_curr+0xd8>)
   224d4:	4808      	ldr	r0, [pc, #32]	; (224f8 <z_pend_curr+0xd0>)
   224d6:	f005 f88c 	bl	275f2 <assert_print>
   224da:	4621      	mov	r1, r4
   224dc:	e7ee      	b.n	224bc <z_pend_curr+0x94>
   224de:	4630      	mov	r0, r6
}
   224e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   224e4:	f7ee be86 	b.w	111f4 <arch_swap>
   224e8:	2002f720 	.word	0x2002f720
   224ec:	2002f768 	.word	0x2002f768
   224f0:	2002f75c 	.word	0x2002f75c
   224f4:	00033bf3 	.word	0x00033bf3
   224f8:	0002e715 	.word	0x0002e715
   224fc:	00033afc 	.word	0x00033afc
   22500:	0002f55d 	.word	0x0002f55d
   22504:	0002f5b6 	.word	0x0002f5b6
   22508:	0002f5cb 	.word	0x0002f5cb
   2250c:	0002f58a 	.word	0x0002f58a
   22510:	0002f5a1 	.word	0x0002f5a1

00022514 <z_set_prio>:
{
   22514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22518:	4604      	mov	r4, r0
   2251a:	460e      	mov	r6, r1
   2251c:	f04f 0320 	mov.w	r3, #32
   22520:	f3ef 8911 	mrs	r9, BASEPRI
   22524:	f383 8812 	msr	BASEPRI_MAX, r3
   22528:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2252c:	4837      	ldr	r0, [pc, #220]	; (2260c <z_set_prio+0xf8>)
   2252e:	f7fe f9e3 	bl	208f8 <z_spin_lock_valid>
   22532:	4607      	mov	r7, r0
   22534:	b960      	cbnz	r0, 22550 <z_set_prio+0x3c>
   22536:	2394      	movs	r3, #148	; 0x94
   22538:	4a35      	ldr	r2, [pc, #212]	; (22610 <z_set_prio+0xfc>)
   2253a:	4936      	ldr	r1, [pc, #216]	; (22614 <z_set_prio+0x100>)
   2253c:	4836      	ldr	r0, [pc, #216]	; (22618 <z_set_prio+0x104>)
   2253e:	f005 f858 	bl	275f2 <assert_print>
   22542:	4932      	ldr	r1, [pc, #200]	; (2260c <z_set_prio+0xf8>)
   22544:	4835      	ldr	r0, [pc, #212]	; (2261c <z_set_prio+0x108>)
   22546:	f005 f854 	bl	275f2 <assert_print>
   2254a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2254c:	4830      	ldr	r0, [pc, #192]	; (22610 <z_set_prio+0xfc>)
   2254e:	e021      	b.n	22594 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   22550:	482e      	ldr	r0, [pc, #184]	; (2260c <z_set_prio+0xf8>)
   22552:	f7fe f9ed 	bl	20930 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   22556:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   22558:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2255a:	06da      	lsls	r2, r3, #27
   2255c:	d11c      	bne.n	22598 <z_set_prio+0x84>
	return node->next != NULL;
   2255e:	69a5      	ldr	r5, [r4, #24]
   22560:	b9d5      	cbnz	r5, 22598 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   22562:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 22620 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2256a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2256c:	4621      	mov	r1, r4
   2256e:	4640      	mov	r0, r8
   22570:	f7ff fe00 	bl	22174 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22574:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   22576:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   22578:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2257c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2257e:	4b29      	ldr	r3, [pc, #164]	; (22624 <z_set_prio+0x110>)
   22580:	429c      	cmp	r4, r3
   22582:	d11b      	bne.n	225bc <z_set_prio+0xa8>
   22584:	4928      	ldr	r1, [pc, #160]	; (22628 <z_set_prio+0x114>)
   22586:	4824      	ldr	r0, [pc, #144]	; (22618 <z_set_prio+0x104>)
   22588:	23ba      	movs	r3, #186	; 0xba
   2258a:	4a28      	ldr	r2, [pc, #160]	; (2262c <z_set_prio+0x118>)
   2258c:	f005 f831 	bl	275f2 <assert_print>
   22590:	21ba      	movs	r1, #186	; 0xba
   22592:	4826      	ldr	r0, [pc, #152]	; (2262c <z_set_prio+0x118>)
   22594:	f005 f826 	bl	275e4 <assert_post_action>
   22598:	2700      	movs	r7, #0
			thread->base.prio = prio;
   2259a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2259c:	481b      	ldr	r0, [pc, #108]	; (2260c <z_set_prio+0xf8>)
   2259e:	f7fe f9b9 	bl	20914 <z_spin_unlock_valid>
   225a2:	bb58      	cbnz	r0, 225fc <z_set_prio+0xe8>
   225a4:	23c2      	movs	r3, #194	; 0xc2
   225a6:	4a1a      	ldr	r2, [pc, #104]	; (22610 <z_set_prio+0xfc>)
   225a8:	4921      	ldr	r1, [pc, #132]	; (22630 <z_set_prio+0x11c>)
   225aa:	481b      	ldr	r0, [pc, #108]	; (22618 <z_set_prio+0x104>)
   225ac:	f005 f821 	bl	275f2 <assert_print>
   225b0:	4916      	ldr	r1, [pc, #88]	; (2260c <z_set_prio+0xf8>)
   225b2:	4820      	ldr	r0, [pc, #128]	; (22634 <z_set_prio+0x120>)
   225b4:	f005 f81d 	bl	275f2 <assert_print>
   225b8:	21c2      	movs	r1, #194	; 0xc2
   225ba:	e7c7      	b.n	2254c <z_set_prio+0x38>
	return list->head == list;
   225bc:	4643      	mov	r3, r8
   225be:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225c2:	4542      	cmp	r2, r8
   225c4:	bf18      	it	ne
   225c6:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   225c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   225ca:	b925      	cbnz	r5, 225d6 <z_set_prio+0xc2>
	node->prev = tail;
   225cc:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   225d0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   225d2:	625c      	str	r4, [r3, #36]	; 0x24
}
   225d4:	e00a      	b.n	225ec <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   225d6:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   225da:	428e      	cmp	r6, r1
   225dc:	d00a      	beq.n	225f4 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   225de:	42b1      	cmp	r1, r6
   225e0:	dd08      	ble.n	225f4 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   225e2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   225e4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   225e8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   225ea:	606c      	str	r4, [r5, #4]
			update_cache(1);
   225ec:	2001      	movs	r0, #1
   225ee:	f7ff fadf 	bl	21bb0 <update_cache>
   225f2:	e7d3      	b.n	2259c <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   225f4:	42aa      	cmp	r2, r5
   225f6:	d0e9      	beq.n	225cc <z_set_prio+0xb8>
   225f8:	682d      	ldr	r5, [r5, #0]
   225fa:	e7e6      	b.n	225ca <z_set_prio+0xb6>
	__asm__ volatile(
   225fc:	f389 8811 	msr	BASEPRI, r9
   22600:	f3bf 8f6f 	isb	sy
}
   22604:	4638      	mov	r0, r7
   22606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2260a:	bf00      	nop
   2260c:	2002f768 	.word	0x2002f768
   22610:	0002f55d 	.word	0x0002f55d
   22614:	0002f5b6 	.word	0x0002f5b6
   22618:	0002e715 	.word	0x0002e715
   2261c:	0002f5cb 	.word	0x0002f5cb
   22620:	2002f740 	.word	0x2002f740
   22624:	20009c98 	.word	0x20009c98
   22628:	00033b45 	.word	0x00033b45
   2262c:	00033afc 	.word	0x00033afc
   22630:	0002f58a 	.word	0x0002f58a
   22634:	0002f5a1 	.word	0x0002f5a1

00022638 <z_impl_k_thread_suspend>:
{
   22638:	b570      	push	{r4, r5, r6, lr}
   2263a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2263c:	3018      	adds	r0, #24
   2263e:	f000 fda7 	bl	23190 <z_abort_timeout>
	__asm__ volatile(
   22642:	f04f 0320 	mov.w	r3, #32
   22646:	f3ef 8611 	mrs	r6, BASEPRI
   2264a:	f383 8812 	msr	BASEPRI_MAX, r3
   2264e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22652:	4824      	ldr	r0, [pc, #144]	; (226e4 <z_impl_k_thread_suspend+0xac>)
   22654:	f7fe f950 	bl	208f8 <z_spin_lock_valid>
   22658:	b968      	cbnz	r0, 22676 <z_impl_k_thread_suspend+0x3e>
   2265a:	2394      	movs	r3, #148	; 0x94
   2265c:	4a22      	ldr	r2, [pc, #136]	; (226e8 <z_impl_k_thread_suspend+0xb0>)
   2265e:	4923      	ldr	r1, [pc, #140]	; (226ec <z_impl_k_thread_suspend+0xb4>)
   22660:	4823      	ldr	r0, [pc, #140]	; (226f0 <z_impl_k_thread_suspend+0xb8>)
   22662:	f004 ffc6 	bl	275f2 <assert_print>
   22666:	491f      	ldr	r1, [pc, #124]	; (226e4 <z_impl_k_thread_suspend+0xac>)
   22668:	4822      	ldr	r0, [pc, #136]	; (226f4 <z_impl_k_thread_suspend+0xbc>)
   2266a:	f004 ffc2 	bl	275f2 <assert_print>
   2266e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22670:	481d      	ldr	r0, [pc, #116]	; (226e8 <z_impl_k_thread_suspend+0xb0>)
   22672:	f004 ffb7 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   22676:	481b      	ldr	r0, [pc, #108]	; (226e4 <z_impl_k_thread_suspend+0xac>)
   22678:	f7fe f95a 	bl	20930 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2267c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   22680:	7b63      	ldrb	r3, [r4, #13]
   22682:	2a00      	cmp	r2, #0
   22684:	da06      	bge.n	22694 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2268a:	4621      	mov	r1, r4
   2268c:	481a      	ldr	r0, [pc, #104]	; (226f8 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2268e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22690:	f7ff fd70 	bl	22174 <z_priq_dumb_remove>
		update_cache(thread == _current);
   22694:	4d19      	ldr	r5, [pc, #100]	; (226fc <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22696:	7b63      	ldrb	r3, [r4, #13]
   22698:	68a8      	ldr	r0, [r5, #8]
   2269a:	f043 0310 	orr.w	r3, r3, #16
   2269e:	7363      	strb	r3, [r4, #13]
   226a0:	1b03      	subs	r3, r0, r4
   226a2:	4258      	negs	r0, r3
   226a4:	4158      	adcs	r0, r3
   226a6:	f7ff fa83 	bl	21bb0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226aa:	480e      	ldr	r0, [pc, #56]	; (226e4 <z_impl_k_thread_suspend+0xac>)
   226ac:	f7fe f932 	bl	20914 <z_spin_unlock_valid>
   226b0:	b958      	cbnz	r0, 226ca <z_impl_k_thread_suspend+0x92>
   226b2:	23c2      	movs	r3, #194	; 0xc2
   226b4:	4a0c      	ldr	r2, [pc, #48]	; (226e8 <z_impl_k_thread_suspend+0xb0>)
   226b6:	4912      	ldr	r1, [pc, #72]	; (22700 <z_impl_k_thread_suspend+0xc8>)
   226b8:	480d      	ldr	r0, [pc, #52]	; (226f0 <z_impl_k_thread_suspend+0xb8>)
   226ba:	f004 ff9a 	bl	275f2 <assert_print>
   226be:	4909      	ldr	r1, [pc, #36]	; (226e4 <z_impl_k_thread_suspend+0xac>)
   226c0:	4810      	ldr	r0, [pc, #64]	; (22704 <z_impl_k_thread_suspend+0xcc>)
   226c2:	f004 ff96 	bl	275f2 <assert_print>
   226c6:	21c2      	movs	r1, #194	; 0xc2
   226c8:	e7d2      	b.n	22670 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   226ca:	f386 8811 	msr	BASEPRI, r6
   226ce:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   226d2:	68ab      	ldr	r3, [r5, #8]
   226d4:	42a3      	cmp	r3, r4
   226d6:	d103      	bne.n	226e0 <z_impl_k_thread_suspend+0xa8>
}
   226d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   226dc:	f009 bbc6 	b.w	2be6c <z_reschedule_unlocked>
}
   226e0:	bd70      	pop	{r4, r5, r6, pc}
   226e2:	bf00      	nop
   226e4:	2002f768 	.word	0x2002f768
   226e8:	0002f55d 	.word	0x0002f55d
   226ec:	0002f5b6 	.word	0x0002f5b6
   226f0:	0002e715 	.word	0x0002e715
   226f4:	0002f5cb 	.word	0x0002f5cb
   226f8:	2002f740 	.word	0x2002f740
   226fc:	2002f720 	.word	0x2002f720
   22700:	0002f58a 	.word	0x0002f58a
   22704:	0002f5a1 	.word	0x0002f5a1

00022708 <unpend_thread_no_timeout>:
{
   22708:	b510      	push	{r4, lr}
   2270a:	4604      	mov	r4, r0
   2270c:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   2270e:	b958      	cbnz	r0, 22728 <unpend_thread_no_timeout+0x20>
   22710:	490a      	ldr	r1, [pc, #40]	; (2273c <unpend_thread_no_timeout+0x34>)
   22712:	480b      	ldr	r0, [pc, #44]	; (22740 <unpend_thread_no_timeout+0x38>)
   22714:	f240 23d6 	movw	r3, #726	; 0x2d6
   22718:	4a0a      	ldr	r2, [pc, #40]	; (22744 <unpend_thread_no_timeout+0x3c>)
   2271a:	f004 ff6a 	bl	275f2 <assert_print>
   2271e:	f240 21d6 	movw	r1, #726	; 0x2d6
   22722:	4808      	ldr	r0, [pc, #32]	; (22744 <unpend_thread_no_timeout+0x3c>)
   22724:	f004 ff5e 	bl	275e4 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   22728:	4621      	mov	r1, r4
   2272a:	f7ff fd23 	bl	22174 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2272e:	7b63      	ldrb	r3, [r4, #13]
   22730:	f023 0302 	bic.w	r3, r3, #2
   22734:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   22736:	2300      	movs	r3, #0
   22738:	60a3      	str	r3, [r4, #8]
}
   2273a:	bd10      	pop	{r4, pc}
   2273c:	00033c2a 	.word	0x00033c2a
   22740:	0002e715 	.word	0x0002e715
   22744:	00033afc 	.word	0x00033afc

00022748 <z_unpend_thread>:
{
   22748:	b538      	push	{r3, r4, r5, lr}
   2274a:	4604      	mov	r4, r0
	__asm__ volatile(
   2274c:	f04f 0320 	mov.w	r3, #32
   22750:	f3ef 8511 	mrs	r5, BASEPRI
   22754:	f383 8812 	msr	BASEPRI_MAX, r3
   22758:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2275c:	4818      	ldr	r0, [pc, #96]	; (227c0 <z_unpend_thread+0x78>)
   2275e:	f7fe f8cb 	bl	208f8 <z_spin_lock_valid>
   22762:	b968      	cbnz	r0, 22780 <z_unpend_thread+0x38>
   22764:	2394      	movs	r3, #148	; 0x94
   22766:	4a17      	ldr	r2, [pc, #92]	; (227c4 <z_unpend_thread+0x7c>)
   22768:	4917      	ldr	r1, [pc, #92]	; (227c8 <z_unpend_thread+0x80>)
   2276a:	4818      	ldr	r0, [pc, #96]	; (227cc <z_unpend_thread+0x84>)
   2276c:	f004 ff41 	bl	275f2 <assert_print>
   22770:	4913      	ldr	r1, [pc, #76]	; (227c0 <z_unpend_thread+0x78>)
   22772:	4817      	ldr	r0, [pc, #92]	; (227d0 <z_unpend_thread+0x88>)
   22774:	f004 ff3d 	bl	275f2 <assert_print>
   22778:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2277a:	4812      	ldr	r0, [pc, #72]	; (227c4 <z_unpend_thread+0x7c>)
   2277c:	f004 ff32 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   22780:	480f      	ldr	r0, [pc, #60]	; (227c0 <z_unpend_thread+0x78>)
   22782:	f7fe f8d5 	bl	20930 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   22786:	4620      	mov	r0, r4
   22788:	f7ff ffbe 	bl	22708 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2278c:	480c      	ldr	r0, [pc, #48]	; (227c0 <z_unpend_thread+0x78>)
   2278e:	f7fe f8c1 	bl	20914 <z_spin_unlock_valid>
   22792:	b958      	cbnz	r0, 227ac <z_unpend_thread+0x64>
   22794:	23c2      	movs	r3, #194	; 0xc2
   22796:	4a0b      	ldr	r2, [pc, #44]	; (227c4 <z_unpend_thread+0x7c>)
   22798:	490e      	ldr	r1, [pc, #56]	; (227d4 <z_unpend_thread+0x8c>)
   2279a:	480c      	ldr	r0, [pc, #48]	; (227cc <z_unpend_thread+0x84>)
   2279c:	f004 ff29 	bl	275f2 <assert_print>
   227a0:	4907      	ldr	r1, [pc, #28]	; (227c0 <z_unpend_thread+0x78>)
   227a2:	480d      	ldr	r0, [pc, #52]	; (227d8 <z_unpend_thread+0x90>)
   227a4:	f004 ff25 	bl	275f2 <assert_print>
   227a8:	21c2      	movs	r1, #194	; 0xc2
   227aa:	e7e6      	b.n	2277a <z_unpend_thread+0x32>
	__asm__ volatile(
   227ac:	f385 8811 	msr	BASEPRI, r5
   227b0:	f3bf 8f6f 	isb	sy
   227b4:	f104 0018 	add.w	r0, r4, #24
}
   227b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   227bc:	f000 bce8 	b.w	23190 <z_abort_timeout>
   227c0:	2002f768 	.word	0x2002f768
   227c4:	0002f55d 	.word	0x0002f55d
   227c8:	0002f5b6 	.word	0x0002f5b6
   227cc:	0002e715 	.word	0x0002e715
   227d0:	0002f5cb 	.word	0x0002f5cb
   227d4:	0002f58a 	.word	0x0002f58a
   227d8:	0002f5a1 	.word	0x0002f5a1

000227dc <z_thread_timeout>:
{
   227dc:	b570      	push	{r4, r5, r6, lr}
   227de:	4604      	mov	r4, r0
	__asm__ volatile(
   227e0:	f04f 0320 	mov.w	r3, #32
   227e4:	f3ef 8611 	mrs	r6, BASEPRI
   227e8:	f383 8812 	msr	BASEPRI_MAX, r3
   227ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227f0:	481f      	ldr	r0, [pc, #124]	; (22870 <z_thread_timeout+0x94>)
   227f2:	f7fe f881 	bl	208f8 <z_spin_lock_valid>
   227f6:	b968      	cbnz	r0, 22814 <z_thread_timeout+0x38>
   227f8:	2394      	movs	r3, #148	; 0x94
   227fa:	4a1e      	ldr	r2, [pc, #120]	; (22874 <z_thread_timeout+0x98>)
   227fc:	491e      	ldr	r1, [pc, #120]	; (22878 <z_thread_timeout+0x9c>)
   227fe:	481f      	ldr	r0, [pc, #124]	; (2287c <z_thread_timeout+0xa0>)
   22800:	f004 fef7 	bl	275f2 <assert_print>
   22804:	491a      	ldr	r1, [pc, #104]	; (22870 <z_thread_timeout+0x94>)
   22806:	481e      	ldr	r0, [pc, #120]	; (22880 <z_thread_timeout+0xa4>)
   22808:	f004 fef3 	bl	275f2 <assert_print>
   2280c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2280e:	4819      	ldr	r0, [pc, #100]	; (22874 <z_thread_timeout+0x98>)
   22810:	f004 fee8 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   22814:	4816      	ldr	r0, [pc, #88]	; (22870 <z_thread_timeout+0x94>)
   22816:	f7fe f88b 	bl	20930 <z_spin_lock_set_owner>
		if (!killed) {
   2281a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2281e:	f013 0f28 	tst.w	r3, #40	; 0x28
   22822:	d110      	bne.n	22846 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   22824:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   22828:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   2282c:	b113      	cbz	r3, 22834 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   2282e:	4628      	mov	r0, r5
   22830:	f7ff ff6a 	bl	22708 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22834:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   22838:	4628      	mov	r0, r5
   2283a:	f023 0314 	bic.w	r3, r3, #20
   2283e:	f804 3c0b 	strb.w	r3, [r4, #-11]
   22842:	f7ff f9e9 	bl	21c18 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22846:	480a      	ldr	r0, [pc, #40]	; (22870 <z_thread_timeout+0x94>)
   22848:	f7fe f864 	bl	20914 <z_spin_unlock_valid>
   2284c:	b958      	cbnz	r0, 22866 <z_thread_timeout+0x8a>
   2284e:	23c2      	movs	r3, #194	; 0xc2
   22850:	4a08      	ldr	r2, [pc, #32]	; (22874 <z_thread_timeout+0x98>)
   22852:	490c      	ldr	r1, [pc, #48]	; (22884 <z_thread_timeout+0xa8>)
   22854:	4809      	ldr	r0, [pc, #36]	; (2287c <z_thread_timeout+0xa0>)
   22856:	f004 fecc 	bl	275f2 <assert_print>
   2285a:	4905      	ldr	r1, [pc, #20]	; (22870 <z_thread_timeout+0x94>)
   2285c:	480a      	ldr	r0, [pc, #40]	; (22888 <z_thread_timeout+0xac>)
   2285e:	f004 fec8 	bl	275f2 <assert_print>
   22862:	21c2      	movs	r1, #194	; 0xc2
   22864:	e7d3      	b.n	2280e <z_thread_timeout+0x32>
	__asm__ volatile(
   22866:	f386 8811 	msr	BASEPRI, r6
   2286a:	f3bf 8f6f 	isb	sy
}
   2286e:	bd70      	pop	{r4, r5, r6, pc}
   22870:	2002f768 	.word	0x2002f768
   22874:	0002f55d 	.word	0x0002f55d
   22878:	0002f5b6 	.word	0x0002f5b6
   2287c:	0002e715 	.word	0x0002e715
   22880:	0002f5cb 	.word	0x0002f5cb
   22884:	0002f58a 	.word	0x0002f58a
   22888:	0002f5a1 	.word	0x0002f5a1

0002288c <z_unpend1_no_timeout>:
{
   2288c:	b570      	push	{r4, r5, r6, lr}
   2288e:	4605      	mov	r5, r0
	__asm__ volatile(
   22890:	f04f 0320 	mov.w	r3, #32
   22894:	f3ef 8611 	mrs	r6, BASEPRI
   22898:	f383 8812 	msr	BASEPRI_MAX, r3
   2289c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228a0:	4819      	ldr	r0, [pc, #100]	; (22908 <z_unpend1_no_timeout+0x7c>)
   228a2:	f7fe f829 	bl	208f8 <z_spin_lock_valid>
   228a6:	b968      	cbnz	r0, 228c4 <z_unpend1_no_timeout+0x38>
   228a8:	2394      	movs	r3, #148	; 0x94
   228aa:	4a18      	ldr	r2, [pc, #96]	; (2290c <z_unpend1_no_timeout+0x80>)
   228ac:	4918      	ldr	r1, [pc, #96]	; (22910 <z_unpend1_no_timeout+0x84>)
   228ae:	4819      	ldr	r0, [pc, #100]	; (22914 <z_unpend1_no_timeout+0x88>)
   228b0:	f004 fe9f 	bl	275f2 <assert_print>
   228b4:	4914      	ldr	r1, [pc, #80]	; (22908 <z_unpend1_no_timeout+0x7c>)
   228b6:	4818      	ldr	r0, [pc, #96]	; (22918 <z_unpend1_no_timeout+0x8c>)
   228b8:	f004 fe9b 	bl	275f2 <assert_print>
   228bc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228be:	4813      	ldr	r0, [pc, #76]	; (2290c <z_unpend1_no_timeout+0x80>)
   228c0:	f004 fe90 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   228c4:	4810      	ldr	r0, [pc, #64]	; (22908 <z_unpend1_no_timeout+0x7c>)
   228c6:	f7fe f833 	bl	20930 <z_spin_lock_set_owner>
	return list->head == list;
   228ca:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   228cc:	42a5      	cmp	r5, r4
   228ce:	d013      	beq.n	228f8 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   228d0:	b114      	cbz	r4, 228d8 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   228d2:	4620      	mov	r0, r4
   228d4:	f7ff ff18 	bl	22708 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228d8:	480b      	ldr	r0, [pc, #44]	; (22908 <z_unpend1_no_timeout+0x7c>)
   228da:	f7fe f81b 	bl	20914 <z_spin_unlock_valid>
   228de:	b968      	cbnz	r0, 228fc <z_unpend1_no_timeout+0x70>
   228e0:	23c2      	movs	r3, #194	; 0xc2
   228e2:	4a0a      	ldr	r2, [pc, #40]	; (2290c <z_unpend1_no_timeout+0x80>)
   228e4:	490d      	ldr	r1, [pc, #52]	; (2291c <z_unpend1_no_timeout+0x90>)
   228e6:	480b      	ldr	r0, [pc, #44]	; (22914 <z_unpend1_no_timeout+0x88>)
   228e8:	f004 fe83 	bl	275f2 <assert_print>
   228ec:	4906      	ldr	r1, [pc, #24]	; (22908 <z_unpend1_no_timeout+0x7c>)
   228ee:	480c      	ldr	r0, [pc, #48]	; (22920 <z_unpend1_no_timeout+0x94>)
   228f0:	f004 fe7f 	bl	275f2 <assert_print>
   228f4:	21c2      	movs	r1, #194	; 0xc2
   228f6:	e7e2      	b.n	228be <z_unpend1_no_timeout+0x32>
   228f8:	2400      	movs	r4, #0
   228fa:	e7ed      	b.n	228d8 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   228fc:	f386 8811 	msr	BASEPRI, r6
   22900:	f3bf 8f6f 	isb	sy
}
   22904:	4620      	mov	r0, r4
   22906:	bd70      	pop	{r4, r5, r6, pc}
   22908:	2002f768 	.word	0x2002f768
   2290c:	0002f55d 	.word	0x0002f55d
   22910:	0002f5b6 	.word	0x0002f5b6
   22914:	0002e715 	.word	0x0002e715
   22918:	0002f5cb 	.word	0x0002f5cb
   2291c:	0002f58a 	.word	0x0002f58a
   22920:	0002f5a1 	.word	0x0002f5a1

00022924 <z_unpend_first_thread>:
{
   22924:	b570      	push	{r4, r5, r6, lr}
   22926:	4605      	mov	r5, r0
	__asm__ volatile(
   22928:	f04f 0320 	mov.w	r3, #32
   2292c:	f3ef 8611 	mrs	r6, BASEPRI
   22930:	f383 8812 	msr	BASEPRI_MAX, r3
   22934:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22938:	481b      	ldr	r0, [pc, #108]	; (229a8 <z_unpend_first_thread+0x84>)
   2293a:	f7fd ffdd 	bl	208f8 <z_spin_lock_valid>
   2293e:	b968      	cbnz	r0, 2295c <z_unpend_first_thread+0x38>
   22940:	2394      	movs	r3, #148	; 0x94
   22942:	4a1a      	ldr	r2, [pc, #104]	; (229ac <z_unpend_first_thread+0x88>)
   22944:	491a      	ldr	r1, [pc, #104]	; (229b0 <z_unpend_first_thread+0x8c>)
   22946:	481b      	ldr	r0, [pc, #108]	; (229b4 <z_unpend_first_thread+0x90>)
   22948:	f004 fe53 	bl	275f2 <assert_print>
   2294c:	4916      	ldr	r1, [pc, #88]	; (229a8 <z_unpend_first_thread+0x84>)
   2294e:	481a      	ldr	r0, [pc, #104]	; (229b8 <z_unpend_first_thread+0x94>)
   22950:	f004 fe4f 	bl	275f2 <assert_print>
   22954:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22956:	4815      	ldr	r0, [pc, #84]	; (229ac <z_unpend_first_thread+0x88>)
   22958:	f004 fe44 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2295c:	4812      	ldr	r0, [pc, #72]	; (229a8 <z_unpend_first_thread+0x84>)
   2295e:	f7fd ffe7 	bl	20930 <z_spin_lock_set_owner>
	return list->head == list;
   22962:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22964:	42a5      	cmp	r5, r4
   22966:	d017      	beq.n	22998 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   22968:	b134      	cbz	r4, 22978 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   2296a:	4620      	mov	r0, r4
   2296c:	f7ff fecc 	bl	22708 <unpend_thread_no_timeout>
   22970:	f104 0018 	add.w	r0, r4, #24
   22974:	f000 fc0c 	bl	23190 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22978:	480b      	ldr	r0, [pc, #44]	; (229a8 <z_unpend_first_thread+0x84>)
   2297a:	f7fd ffcb 	bl	20914 <z_spin_unlock_valid>
   2297e:	b968      	cbnz	r0, 2299c <z_unpend_first_thread+0x78>
   22980:	23c2      	movs	r3, #194	; 0xc2
   22982:	4a0a      	ldr	r2, [pc, #40]	; (229ac <z_unpend_first_thread+0x88>)
   22984:	490d      	ldr	r1, [pc, #52]	; (229bc <z_unpend_first_thread+0x98>)
   22986:	480b      	ldr	r0, [pc, #44]	; (229b4 <z_unpend_first_thread+0x90>)
   22988:	f004 fe33 	bl	275f2 <assert_print>
   2298c:	4906      	ldr	r1, [pc, #24]	; (229a8 <z_unpend_first_thread+0x84>)
   2298e:	480c      	ldr	r0, [pc, #48]	; (229c0 <z_unpend_first_thread+0x9c>)
   22990:	f004 fe2f 	bl	275f2 <assert_print>
   22994:	21c2      	movs	r1, #194	; 0xc2
   22996:	e7de      	b.n	22956 <z_unpend_first_thread+0x32>
   22998:	2400      	movs	r4, #0
   2299a:	e7ed      	b.n	22978 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   2299c:	f386 8811 	msr	BASEPRI, r6
   229a0:	f3bf 8f6f 	isb	sy
}
   229a4:	4620      	mov	r0, r4
   229a6:	bd70      	pop	{r4, r5, r6, pc}
   229a8:	2002f768 	.word	0x2002f768
   229ac:	0002f55d 	.word	0x0002f55d
   229b0:	0002f5b6 	.word	0x0002f5b6
   229b4:	0002e715 	.word	0x0002e715
   229b8:	0002f5cb 	.word	0x0002f5cb
   229bc:	0002f58a 	.word	0x0002f58a
   229c0:	0002f5a1 	.word	0x0002f5a1

000229c4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   229c4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   229c6:	4b04      	ldr	r3, [pc, #16]	; (229d8 <z_sched_init+0x14>)
   229c8:	4608      	mov	r0, r1
   229ca:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   229ce:	e9c3 2208 	strd	r2, r2, [r3, #32]
   229d2:	f7ff b96b 	b.w	21cac <k_sched_time_slice_set>
   229d6:	bf00      	nop
   229d8:	2002f720 	.word	0x2002f720

000229dc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   229dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229de:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   229e2:	b16b      	cbz	r3, 22a00 <z_impl_k_yield+0x24>
   229e4:	493c      	ldr	r1, [pc, #240]	; (22ad8 <z_impl_k_yield+0xfc>)
   229e6:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   229ea:	4a3c      	ldr	r2, [pc, #240]	; (22adc <z_impl_k_yield+0x100>)
   229ec:	483c      	ldr	r0, [pc, #240]	; (22ae0 <z_impl_k_yield+0x104>)
   229ee:	f004 fe00 	bl	275f2 <assert_print>
   229f2:	483c      	ldr	r0, [pc, #240]	; (22ae4 <z_impl_k_yield+0x108>)
   229f4:	f004 fdfd 	bl	275f2 <assert_print>
   229f8:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   229fc:	4837      	ldr	r0, [pc, #220]	; (22adc <z_impl_k_yield+0x100>)
   229fe:	e017      	b.n	22a30 <z_impl_k_yield+0x54>
	__asm__ volatile(
   22a00:	f04f 0320 	mov.w	r3, #32
   22a04:	f3ef 8611 	mrs	r6, BASEPRI
   22a08:	f383 8812 	msr	BASEPRI_MAX, r3
   22a0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a10:	4835      	ldr	r0, [pc, #212]	; (22ae8 <z_impl_k_yield+0x10c>)
   22a12:	f7fd ff71 	bl	208f8 <z_spin_lock_valid>
   22a16:	b968      	cbnz	r0, 22a34 <z_impl_k_yield+0x58>
   22a18:	2394      	movs	r3, #148	; 0x94
   22a1a:	4a34      	ldr	r2, [pc, #208]	; (22aec <z_impl_k_yield+0x110>)
   22a1c:	4934      	ldr	r1, [pc, #208]	; (22af0 <z_impl_k_yield+0x114>)
   22a1e:	4830      	ldr	r0, [pc, #192]	; (22ae0 <z_impl_k_yield+0x104>)
   22a20:	f004 fde7 	bl	275f2 <assert_print>
   22a24:	4930      	ldr	r1, [pc, #192]	; (22ae8 <z_impl_k_yield+0x10c>)
   22a26:	4833      	ldr	r0, [pc, #204]	; (22af4 <z_impl_k_yield+0x118>)
   22a28:	f004 fde3 	bl	275f2 <assert_print>
   22a2c:	2194      	movs	r1, #148	; 0x94
   22a2e:	482f      	ldr	r0, [pc, #188]	; (22aec <z_impl_k_yield+0x110>)
   22a30:	f004 fdd8 	bl	275e4 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   22a34:	4c30      	ldr	r4, [pc, #192]	; (22af8 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   22a36:	482c      	ldr	r0, [pc, #176]	; (22ae8 <z_impl_k_yield+0x10c>)
   22a38:	f7fd ff7a 	bl	20930 <z_spin_lock_set_owner>
   22a3c:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   22a3e:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22a42:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22a44:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22a4a:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22a4c:	f7ff fb92 	bl	22174 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   22a50:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   22a52:	7b5a      	ldrb	r2, [r3, #13]
   22a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
   22a58:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22a5a:	4a28      	ldr	r2, [pc, #160]	; (22afc <z_impl_k_yield+0x120>)
   22a5c:	4293      	cmp	r3, r2
   22a5e:	d107      	bne.n	22a70 <z_impl_k_yield+0x94>
   22a60:	4927      	ldr	r1, [pc, #156]	; (22b00 <z_impl_k_yield+0x124>)
   22a62:	23ba      	movs	r3, #186	; 0xba
   22a64:	4a1d      	ldr	r2, [pc, #116]	; (22adc <z_impl_k_yield+0x100>)
   22a66:	481e      	ldr	r0, [pc, #120]	; (22ae0 <z_impl_k_yield+0x104>)
   22a68:	f004 fdc3 	bl	275f2 <assert_print>
   22a6c:	21ba      	movs	r1, #186	; 0xba
   22a6e:	e7c5      	b.n	229fc <z_impl_k_yield+0x20>
	return list->head == list;
   22a70:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   22a72:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22a74:	42aa      	cmp	r2, r5
   22a76:	bf08      	it	eq
   22a78:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22a7a:	b922      	cbnz	r2, 22a86 <z_impl_k_yield+0xaa>
	node->prev = tail;
   22a7c:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   22a80:	600b      	str	r3, [r1, #0]
	list->tail = node;
   22a82:	6263      	str	r3, [r4, #36]	; 0x24
}
   22a84:	e00c      	b.n	22aa0 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   22a86:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   22a8a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   22a8e:	42b8      	cmp	r0, r7
   22a90:	d019      	beq.n	22ac6 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22a92:	4287      	cmp	r7, r0
   22a94:	dd17      	ble.n	22ac6 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   22a96:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22a98:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   22a9c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   22a9e:	6053      	str	r3, [r2, #4]
	update_cache(1);
   22aa0:	2001      	movs	r0, #1
   22aa2:	f7ff f885 	bl	21bb0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22aa6:	4810      	ldr	r0, [pc, #64]	; (22ae8 <z_impl_k_yield+0x10c>)
   22aa8:	f7fd ff34 	bl	20914 <z_spin_unlock_valid>
   22aac:	b978      	cbnz	r0, 22ace <z_impl_k_yield+0xf2>
   22aae:	23e1      	movs	r3, #225	; 0xe1
   22ab0:	4a0e      	ldr	r2, [pc, #56]	; (22aec <z_impl_k_yield+0x110>)
   22ab2:	4914      	ldr	r1, [pc, #80]	; (22b04 <z_impl_k_yield+0x128>)
   22ab4:	480a      	ldr	r0, [pc, #40]	; (22ae0 <z_impl_k_yield+0x104>)
   22ab6:	f004 fd9c 	bl	275f2 <assert_print>
   22aba:	490b      	ldr	r1, [pc, #44]	; (22ae8 <z_impl_k_yield+0x10c>)
   22abc:	4812      	ldr	r0, [pc, #72]	; (22b08 <z_impl_k_yield+0x12c>)
   22abe:	f004 fd98 	bl	275f2 <assert_print>
   22ac2:	21e1      	movs	r1, #225	; 0xe1
   22ac4:	e7b3      	b.n	22a2e <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   22ac6:	428a      	cmp	r2, r1
   22ac8:	d0d8      	beq.n	22a7c <z_impl_k_yield+0xa0>
   22aca:	6812      	ldr	r2, [r2, #0]
   22acc:	e7d5      	b.n	22a7a <z_impl_k_yield+0x9e>
   22ace:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   22ad0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22ad4:	f7ee bb8e 	b.w	111f4 <arch_swap>
   22ad8:	0003388f 	.word	0x0003388f
   22adc:	00033afc 	.word	0x00033afc
   22ae0:	0002e715 	.word	0x0002e715
   22ae4:	00032363 	.word	0x00032363
   22ae8:	2002f768 	.word	0x2002f768
   22aec:	0002f55d 	.word	0x0002f55d
   22af0:	0002f5b6 	.word	0x0002f5b6
   22af4:	0002f5cb 	.word	0x0002f5cb
   22af8:	2002f720 	.word	0x2002f720
   22afc:	20009c98 	.word	0x20009c98
   22b00:	00033b45 	.word	0x00033b45
   22b04:	0002f58a 	.word	0x0002f58a
   22b08:	0002f5a1 	.word	0x0002f5a1

00022b0c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   22b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b10:	4605      	mov	r5, r0
   22b12:	460e      	mov	r6, r1
   22b14:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   22b18:	b16b      	cbz	r3, 22b36 <z_tick_sleep+0x2a>
   22b1a:	493f      	ldr	r1, [pc, #252]	; (22c18 <z_tick_sleep+0x10c>)
   22b1c:	f240 538c 	movw	r3, #1420	; 0x58c
   22b20:	4a3e      	ldr	r2, [pc, #248]	; (22c1c <z_tick_sleep+0x110>)
   22b22:	483f      	ldr	r0, [pc, #252]	; (22c20 <z_tick_sleep+0x114>)
   22b24:	f004 fd65 	bl	275f2 <assert_print>
   22b28:	483e      	ldr	r0, [pc, #248]	; (22c24 <z_tick_sleep+0x118>)
   22b2a:	f004 fd62 	bl	275f2 <assert_print>
   22b2e:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   22b32:	483a      	ldr	r0, [pc, #232]	; (22c1c <z_tick_sleep+0x110>)
   22b34:	e025      	b.n	22b82 <z_tick_sleep+0x76>
	if (ticks == 0) {
   22b36:	ea50 0301 	orrs.w	r3, r0, r1
   22b3a:	d103      	bne.n	22b44 <z_tick_sleep+0x38>
	z_impl_k_yield();
   22b3c:	f7ff ff4e 	bl	229dc <z_impl_k_yield>
		return 0;
   22b40:	2000      	movs	r0, #0
   22b42:	e066      	b.n	22c12 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   22b44:	1c82      	adds	r2, r0, #2
   22b46:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   22b4a:	db1c      	blt.n	22b86 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   22b4c:	f009 f9a8 	bl	2bea0 <sys_clock_tick_get_32>
   22b50:	1944      	adds	r4, r0, r5
   22b52:	f04f 0320 	mov.w	r3, #32
   22b56:	f3ef 8811 	mrs	r8, BASEPRI
   22b5a:	f383 8812 	msr	BASEPRI_MAX, r3
   22b5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b62:	4831      	ldr	r0, [pc, #196]	; (22c28 <z_tick_sleep+0x11c>)
   22b64:	f7fd fec8 	bl	208f8 <z_spin_lock_valid>
   22b68:	b988      	cbnz	r0, 22b8e <z_tick_sleep+0x82>
   22b6a:	2394      	movs	r3, #148	; 0x94
   22b6c:	4a2f      	ldr	r2, [pc, #188]	; (22c2c <z_tick_sleep+0x120>)
   22b6e:	4930      	ldr	r1, [pc, #192]	; (22c30 <z_tick_sleep+0x124>)
   22b70:	482b      	ldr	r0, [pc, #172]	; (22c20 <z_tick_sleep+0x114>)
   22b72:	f004 fd3e 	bl	275f2 <assert_print>
   22b76:	492c      	ldr	r1, [pc, #176]	; (22c28 <z_tick_sleep+0x11c>)
   22b78:	482e      	ldr	r0, [pc, #184]	; (22c34 <z_tick_sleep+0x128>)
   22b7a:	f004 fd3a 	bl	275f2 <assert_print>
   22b7e:	2194      	movs	r1, #148	; 0x94
   22b80:	482a      	ldr	r0, [pc, #168]	; (22c2c <z_tick_sleep+0x120>)
   22b82:	f004 fd2f 	bl	275e4 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   22b86:	f06f 0401 	mvn.w	r4, #1
   22b8a:	1a24      	subs	r4, r4, r0
   22b8c:	e7e1      	b.n	22b52 <z_tick_sleep+0x46>
	pending_current = _current;
   22b8e:	4f2a      	ldr	r7, [pc, #168]	; (22c38 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   22b90:	4825      	ldr	r0, [pc, #148]	; (22c28 <z_tick_sleep+0x11c>)
   22b92:	f7fd fecd 	bl	20930 <z_spin_lock_set_owner>
   22b96:	68b8      	ldr	r0, [r7, #8]
   22b98:	4b28      	ldr	r3, [pc, #160]	; (22c3c <z_tick_sleep+0x130>)
   22b9a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   22b9c:	f7ff fbd2 	bl	22344 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   22ba0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22ba2:	462a      	mov	r2, r5
   22ba4:	4633      	mov	r3, r6
   22ba6:	3018      	adds	r0, #24
   22ba8:	4925      	ldr	r1, [pc, #148]	; (22c40 <z_tick_sleep+0x134>)
   22baa:	f000 fa2b 	bl	23004 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   22bae:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bb0:	481d      	ldr	r0, [pc, #116]	; (22c28 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22bb2:	7b53      	ldrb	r3, [r2, #13]
   22bb4:	f043 0310 	orr.w	r3, r3, #16
   22bb8:	7353      	strb	r3, [r2, #13]
   22bba:	f7fd feab 	bl	20914 <z_spin_unlock_valid>
   22bbe:	b958      	cbnz	r0, 22bd8 <z_tick_sleep+0xcc>
   22bc0:	23e1      	movs	r3, #225	; 0xe1
   22bc2:	4a1a      	ldr	r2, [pc, #104]	; (22c2c <z_tick_sleep+0x120>)
   22bc4:	491f      	ldr	r1, [pc, #124]	; (22c44 <z_tick_sleep+0x138>)
   22bc6:	4816      	ldr	r0, [pc, #88]	; (22c20 <z_tick_sleep+0x114>)
   22bc8:	f004 fd13 	bl	275f2 <assert_print>
   22bcc:	4916      	ldr	r1, [pc, #88]	; (22c28 <z_tick_sleep+0x11c>)
   22bce:	481e      	ldr	r0, [pc, #120]	; (22c48 <z_tick_sleep+0x13c>)
   22bd0:	f004 fd0f 	bl	275f2 <assert_print>
   22bd4:	21e1      	movs	r1, #225	; 0xe1
   22bd6:	e7d3      	b.n	22b80 <z_tick_sleep+0x74>
   22bd8:	4640      	mov	r0, r8
   22bda:	f7ee fb0b 	bl	111f4 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   22bde:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   22be0:	7b5b      	ldrb	r3, [r3, #13]
   22be2:	06db      	lsls	r3, r3, #27
   22be4:	d50c      	bpl.n	22c00 <z_tick_sleep+0xf4>
   22be6:	4919      	ldr	r1, [pc, #100]	; (22c4c <z_tick_sleep+0x140>)
   22be8:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   22bec:	4a0b      	ldr	r2, [pc, #44]	; (22c1c <z_tick_sleep+0x110>)
   22bee:	480c      	ldr	r0, [pc, #48]	; (22c20 <z_tick_sleep+0x114>)
   22bf0:	f004 fcff 	bl	275f2 <assert_print>
   22bf4:	480b      	ldr	r0, [pc, #44]	; (22c24 <z_tick_sleep+0x118>)
   22bf6:	f004 fcfc 	bl	275f2 <assert_print>
   22bfa:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   22bfe:	e798      	b.n	22b32 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   22c00:	f009 f94e 	bl	2bea0 <sys_clock_tick_get_32>
   22c04:	1a20      	subs	r0, r4, r0
   22c06:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   22c0a:	2801      	cmp	r0, #1
   22c0c:	f173 0300 	sbcs.w	r3, r3, #0
   22c10:	db96      	blt.n	22b40 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   22c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22c16:	bf00      	nop
   22c18:	0003388f 	.word	0x0003388f
   22c1c:	00033afc 	.word	0x00033afc
   22c20:	0002e715 	.word	0x0002e715
   22c24:	00032363 	.word	0x00032363
   22c28:	2002f768 	.word	0x2002f768
   22c2c:	0002f55d 	.word	0x0002f55d
   22c30:	0002f5b6 	.word	0x0002f5b6
   22c34:	0002f5cb 	.word	0x0002f5cb
   22c38:	2002f720 	.word	0x2002f720
   22c3c:	2002f75c 	.word	0x2002f75c
   22c40:	000227dd 	.word	0x000227dd
   22c44:	0002f58a 	.word	0x0002f58a
   22c48:	0002f5a1 	.word	0x0002f5a1
   22c4c:	00033c41 	.word	0x00033c41

00022c50 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   22c50:	b508      	push	{r3, lr}
   22c52:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   22c56:	b173      	cbz	r3, 22c76 <z_impl_k_sleep+0x26>
   22c58:	4912      	ldr	r1, [pc, #72]	; (22ca4 <z_impl_k_sleep+0x54>)
   22c5a:	f240 53b7 	movw	r3, #1463	; 0x5b7
   22c5e:	4a12      	ldr	r2, [pc, #72]	; (22ca8 <z_impl_k_sleep+0x58>)
   22c60:	4812      	ldr	r0, [pc, #72]	; (22cac <z_impl_k_sleep+0x5c>)
   22c62:	f004 fcc6 	bl	275f2 <assert_print>
   22c66:	4812      	ldr	r0, [pc, #72]	; (22cb0 <z_impl_k_sleep+0x60>)
   22c68:	f004 fcc3 	bl	275f2 <assert_print>
   22c6c:	f240 51b7 	movw	r1, #1463	; 0x5b7
   22c70:	480d      	ldr	r0, [pc, #52]	; (22ca8 <z_impl_k_sleep+0x58>)
   22c72:	f004 fcb7 	bl	275e4 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22c76:	f1b1 3fff 	cmp.w	r1, #4294967295
   22c7a:	bf08      	it	eq
   22c7c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   22c80:	d106      	bne.n	22c90 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   22c82:	4b0c      	ldr	r3, [pc, #48]	; (22cb4 <z_impl_k_sleep+0x64>)
   22c84:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   22c86:	f7ff fcd7 	bl	22638 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   22c8a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   22c8e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   22c90:	f7ff ff3c 	bl	22b0c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   22c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22c98:	fb80 0303 	smull	r0, r3, r0, r3
   22c9c:	0bc0      	lsrs	r0, r0, #15
   22c9e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   22ca2:	e7f4      	b.n	22c8e <z_impl_k_sleep+0x3e>
   22ca4:	0003388f 	.word	0x0003388f
   22ca8:	00033afc 	.word	0x00033afc
   22cac:	0002e715 	.word	0x0002e715
   22cb0:	00032363 	.word	0x00032363
   22cb4:	2002f720 	.word	0x2002f720

00022cb8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   22cb8:	4b01      	ldr	r3, [pc, #4]	; (22cc0 <z_impl_z_current_get+0x8>)
   22cba:	6898      	ldr	r0, [r3, #8]
   22cbc:	4770      	bx	lr
   22cbe:	bf00      	nop
   22cc0:	2002f720 	.word	0x2002f720

00022cc4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22cc8:	4604      	mov	r4, r0
   22cca:	f04f 0320 	mov.w	r3, #32
   22cce:	f3ef 8611 	mrs	r6, BASEPRI
   22cd2:	f383 8812 	msr	BASEPRI_MAX, r3
   22cd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cda:	4851      	ldr	r0, [pc, #324]	; (22e20 <z_thread_abort+0x15c>)
   22cdc:	f7fd fe0c 	bl	208f8 <z_spin_lock_valid>
   22ce0:	b968      	cbnz	r0, 22cfe <z_thread_abort+0x3a>
   22ce2:	2394      	movs	r3, #148	; 0x94
   22ce4:	4a4f      	ldr	r2, [pc, #316]	; (22e24 <z_thread_abort+0x160>)
   22ce6:	4950      	ldr	r1, [pc, #320]	; (22e28 <z_thread_abort+0x164>)
   22ce8:	4850      	ldr	r0, [pc, #320]	; (22e2c <z_thread_abort+0x168>)
   22cea:	f004 fc82 	bl	275f2 <assert_print>
   22cee:	494c      	ldr	r1, [pc, #304]	; (22e20 <z_thread_abort+0x15c>)
   22cf0:	484f      	ldr	r0, [pc, #316]	; (22e30 <z_thread_abort+0x16c>)
   22cf2:	f004 fc7e 	bl	275f2 <assert_print>
   22cf6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cf8:	484a      	ldr	r0, [pc, #296]	; (22e24 <z_thread_abort+0x160>)
   22cfa:	f004 fc73 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   22cfe:	4848      	ldr	r0, [pc, #288]	; (22e20 <z_thread_abort+0x15c>)
   22d00:	f7fd fe16 	bl	20930 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   22d04:	7b23      	ldrb	r3, [r4, #12]
   22d06:	07d9      	lsls	r1, r3, #31
   22d08:	d522      	bpl.n	22d50 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d0a:	4845      	ldr	r0, [pc, #276]	; (22e20 <z_thread_abort+0x15c>)
   22d0c:	f7fd fe02 	bl	20914 <z_spin_unlock_valid>
   22d10:	b958      	cbnz	r0, 22d2a <z_thread_abort+0x66>
   22d12:	23c2      	movs	r3, #194	; 0xc2
   22d14:	4a43      	ldr	r2, [pc, #268]	; (22e24 <z_thread_abort+0x160>)
   22d16:	4947      	ldr	r1, [pc, #284]	; (22e34 <z_thread_abort+0x170>)
   22d18:	4844      	ldr	r0, [pc, #272]	; (22e2c <z_thread_abort+0x168>)
   22d1a:	f004 fc6a 	bl	275f2 <assert_print>
   22d1e:	4940      	ldr	r1, [pc, #256]	; (22e20 <z_thread_abort+0x15c>)
   22d20:	4845      	ldr	r0, [pc, #276]	; (22e38 <z_thread_abort+0x174>)
   22d22:	f004 fc66 	bl	275f2 <assert_print>
   22d26:	21c2      	movs	r1, #194	; 0xc2
   22d28:	e7e6      	b.n	22cf8 <z_thread_abort+0x34>
	__asm__ volatile(
   22d2a:	f386 8811 	msr	BASEPRI, r6
   22d2e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   22d32:	f240 63c3 	movw	r3, #1731	; 0x6c3
   22d36:	4a41      	ldr	r2, [pc, #260]	; (22e3c <z_thread_abort+0x178>)
   22d38:	4941      	ldr	r1, [pc, #260]	; (22e40 <z_thread_abort+0x17c>)
   22d3a:	483c      	ldr	r0, [pc, #240]	; (22e2c <z_thread_abort+0x168>)
   22d3c:	f004 fc59 	bl	275f2 <assert_print>
   22d40:	4621      	mov	r1, r4
   22d42:	4840      	ldr	r0, [pc, #256]	; (22e44 <z_thread_abort+0x180>)
   22d44:	f004 fc55 	bl	275f2 <assert_print>
   22d48:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   22d4c:	483b      	ldr	r0, [pc, #236]	; (22e3c <z_thread_abort+0x178>)
   22d4e:	e7d4      	b.n	22cfa <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22d50:	7b63      	ldrb	r3, [r4, #13]
   22d52:	071a      	lsls	r2, r3, #28
   22d54:	d50a      	bpl.n	22d6c <z_thread_abort+0xa8>
   22d56:	4832      	ldr	r0, [pc, #200]	; (22e20 <z_thread_abort+0x15c>)
   22d58:	f7fd fddc 	bl	20914 <z_spin_unlock_valid>
   22d5c:	2800      	cmp	r0, #0
   22d5e:	d0d8      	beq.n	22d12 <z_thread_abort+0x4e>
   22d60:	f386 8811 	msr	BASEPRI, r6
   22d64:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   22d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22d6c:	f023 0220 	bic.w	r2, r3, #32
   22d70:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   22d74:	09d2      	lsrs	r2, r2, #7
   22d76:	d12c      	bne.n	22dd2 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22d78:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   22d7a:	68a3      	ldr	r3, [r4, #8]
   22d7c:	b113      	cbz	r3, 22d84 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   22d7e:	4620      	mov	r0, r4
   22d80:	f7ff fcc2 	bl	22708 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   22d84:	f104 0018 	add.w	r0, r4, #24
   22d88:	f000 fa02 	bl	23190 <z_abort_timeout>
   22d8c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   22d90:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   22d94:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d96:	42bd      	cmp	r5, r7
   22d98:	d000      	beq.n	22d9c <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22d9a:	bb25      	cbnz	r5, 22de6 <z_thread_abort+0x122>
		update_cache(1);
   22d9c:	2001      	movs	r0, #1
   22d9e:	f7fe ff07 	bl	21bb0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   22da2:	4b29      	ldr	r3, [pc, #164]	; (22e48 <z_thread_abort+0x184>)
   22da4:	689b      	ldr	r3, [r3, #8]
   22da6:	42a3      	cmp	r3, r4
   22da8:	d1d5      	bne.n	22d56 <z_thread_abort+0x92>
   22daa:	f3ef 8305 	mrs	r3, IPSR
   22dae:	2b00      	cmp	r3, #0
   22db0:	d1d1      	bne.n	22d56 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22db2:	481b      	ldr	r0, [pc, #108]	; (22e20 <z_thread_abort+0x15c>)
   22db4:	f7fd fdae 	bl	20914 <z_spin_unlock_valid>
   22db8:	bb10      	cbnz	r0, 22e00 <z_thread_abort+0x13c>
   22dba:	23e1      	movs	r3, #225	; 0xe1
   22dbc:	4a19      	ldr	r2, [pc, #100]	; (22e24 <z_thread_abort+0x160>)
   22dbe:	491d      	ldr	r1, [pc, #116]	; (22e34 <z_thread_abort+0x170>)
   22dc0:	481a      	ldr	r0, [pc, #104]	; (22e2c <z_thread_abort+0x168>)
   22dc2:	f004 fc16 	bl	275f2 <assert_print>
   22dc6:	4916      	ldr	r1, [pc, #88]	; (22e20 <z_thread_abort+0x15c>)
   22dc8:	481b      	ldr	r0, [pc, #108]	; (22e38 <z_thread_abort+0x174>)
   22dca:	f004 fc12 	bl	275f2 <assert_print>
   22dce:	21e1      	movs	r1, #225	; 0xe1
   22dd0:	e792      	b.n	22cf8 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22dd2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22dd6:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   22dda:	4621      	mov	r1, r4
   22ddc:	481b      	ldr	r0, [pc, #108]	; (22e4c <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22dde:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22de0:	f7ff f9c8 	bl	22174 <z_priq_dumb_remove>
}
   22de4:	e7c9      	b.n	22d7a <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   22de6:	4628      	mov	r0, r5
   22de8:	f7ff fc8e 	bl	22708 <unpend_thread_no_timeout>
   22dec:	f105 0018 	add.w	r0, r5, #24
   22df0:	f000 f9ce 	bl	23190 <z_abort_timeout>
		ready_thread(thread);
   22df4:	4628      	mov	r0, r5
   22df6:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   22dfa:	f7fe ff0d 	bl	21c18 <ready_thread>
   22dfe:	e7c9      	b.n	22d94 <z_thread_abort+0xd0>
   22e00:	4630      	mov	r0, r6
   22e02:	f7ee f9f7 	bl	111f4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   22e06:	490e      	ldr	r1, [pc, #56]	; (22e40 <z_thread_abort+0x17c>)
   22e08:	f240 63f2 	movw	r3, #1778	; 0x6f2
   22e0c:	4a0b      	ldr	r2, [pc, #44]	; (22e3c <z_thread_abort+0x178>)
   22e0e:	4807      	ldr	r0, [pc, #28]	; (22e2c <z_thread_abort+0x168>)
   22e10:	f004 fbef 	bl	275f2 <assert_print>
   22e14:	480e      	ldr	r0, [pc, #56]	; (22e50 <z_thread_abort+0x18c>)
   22e16:	f004 fbec 	bl	275f2 <assert_print>
   22e1a:	f240 61f2 	movw	r1, #1778	; 0x6f2
   22e1e:	e795      	b.n	22d4c <z_thread_abort+0x88>
   22e20:	2002f768 	.word	0x2002f768
   22e24:	0002f55d 	.word	0x0002f55d
   22e28:	0002f5b6 	.word	0x0002f5b6
   22e2c:	0002e715 	.word	0x0002e715
   22e30:	0002f5cb 	.word	0x0002f5cb
   22e34:	0002f58a 	.word	0x0002f58a
   22e38:	0002f5a1 	.word	0x0002f5a1
   22e3c:	00033afc 	.word	0x00033afc
   22e40:	00033fc0 	.word	0x00033fc0
   22e44:	00033c81 	.word	0x00033c81
   22e48:	2002f720 	.word	0x2002f720
   22e4c:	2002f740 	.word	0x2002f740
   22e50:	00033ca0 	.word	0x00033ca0

00022e54 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   22e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22e58:	4606      	mov	r6, r0
   22e5a:	4688      	mov	r8, r1
   22e5c:	4617      	mov	r7, r2
	__asm__ volatile(
   22e5e:	f04f 0320 	mov.w	r3, #32
   22e62:	f3ef 8911 	mrs	r9, BASEPRI
   22e66:	f383 8812 	msr	BASEPRI_MAX, r3
   22e6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e6e:	4821      	ldr	r0, [pc, #132]	; (22ef4 <z_sched_wake+0xa0>)
   22e70:	f7fd fd42 	bl	208f8 <z_spin_lock_valid>
   22e74:	4605      	mov	r5, r0
   22e76:	b968      	cbnz	r0, 22e94 <z_sched_wake+0x40>
   22e78:	2394      	movs	r3, #148	; 0x94
   22e7a:	4a1f      	ldr	r2, [pc, #124]	; (22ef8 <z_sched_wake+0xa4>)
   22e7c:	491f      	ldr	r1, [pc, #124]	; (22efc <z_sched_wake+0xa8>)
   22e7e:	4820      	ldr	r0, [pc, #128]	; (22f00 <z_sched_wake+0xac>)
   22e80:	f004 fbb7 	bl	275f2 <assert_print>
   22e84:	491b      	ldr	r1, [pc, #108]	; (22ef4 <z_sched_wake+0xa0>)
   22e86:	481f      	ldr	r0, [pc, #124]	; (22f04 <z_sched_wake+0xb0>)
   22e88:	f004 fbb3 	bl	275f2 <assert_print>
   22e8c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e8e:	481a      	ldr	r0, [pc, #104]	; (22ef8 <z_sched_wake+0xa4>)
   22e90:	f004 fba8 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e94:	4817      	ldr	r0, [pc, #92]	; (22ef4 <z_sched_wake+0xa0>)
   22e96:	f7fd fd4b 	bl	20930 <z_spin_lock_set_owner>
	return list->head == list;
   22e9a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e9c:	42a6      	cmp	r6, r4
   22e9e:	d01d      	beq.n	22edc <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   22ea0:	b1f4      	cbz	r4, 22ee0 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   22ea2:	4620      	mov	r0, r4
   22ea4:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   22ea8:	6167      	str	r7, [r4, #20]
   22eaa:	f7ff fc2d 	bl	22708 <unpend_thread_no_timeout>
   22eae:	f104 0018 	add.w	r0, r4, #24
   22eb2:	f000 f96d 	bl	23190 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   22eb6:	4620      	mov	r0, r4
   22eb8:	f7fe feae 	bl	21c18 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ebc:	480d      	ldr	r0, [pc, #52]	; (22ef4 <z_sched_wake+0xa0>)
   22ebe:	f7fd fd29 	bl	20914 <z_spin_unlock_valid>
   22ec2:	b978      	cbnz	r0, 22ee4 <z_sched_wake+0x90>
   22ec4:	23c2      	movs	r3, #194	; 0xc2
   22ec6:	4a0c      	ldr	r2, [pc, #48]	; (22ef8 <z_sched_wake+0xa4>)
   22ec8:	490f      	ldr	r1, [pc, #60]	; (22f08 <z_sched_wake+0xb4>)
   22eca:	480d      	ldr	r0, [pc, #52]	; (22f00 <z_sched_wake+0xac>)
   22ecc:	f004 fb91 	bl	275f2 <assert_print>
   22ed0:	4908      	ldr	r1, [pc, #32]	; (22ef4 <z_sched_wake+0xa0>)
   22ed2:	480e      	ldr	r0, [pc, #56]	; (22f0c <z_sched_wake+0xb8>)
   22ed4:	f004 fb8d 	bl	275f2 <assert_print>
   22ed8:	21c2      	movs	r1, #194	; 0xc2
   22eda:	e7d8      	b.n	22e8e <z_sched_wake+0x3a>
	bool ret = false;
   22edc:	2500      	movs	r5, #0
   22ede:	e7ed      	b.n	22ebc <z_sched_wake+0x68>
   22ee0:	4625      	mov	r5, r4
   22ee2:	e7eb      	b.n	22ebc <z_sched_wake+0x68>
	__asm__ volatile(
   22ee4:	f389 8811 	msr	BASEPRI, r9
   22ee8:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   22eec:	4628      	mov	r0, r5
   22eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22ef2:	bf00      	nop
   22ef4:	2002f768 	.word	0x2002f768
   22ef8:	0002f55d 	.word	0x0002f55d
   22efc:	0002f5b6 	.word	0x0002f5b6
   22f00:	0002e715 	.word	0x0002e715
   22f04:	0002f5cb 	.word	0x0002f5cb
   22f08:	0002f58a 	.word	0x0002f58a
   22f0c:	0002f5a1 	.word	0x0002f5a1

00022f10 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22f10:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22f12:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22f16:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22f18:	e9cd 6700 	strd	r6, r7, [sp]
   22f1c:	f7ff fa84 	bl	22428 <z_pend_curr>

	if (data != NULL) {
   22f20:	b11c      	cbz	r4, 22f2a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   22f22:	4b03      	ldr	r3, [pc, #12]	; (22f30 <z_sched_wait+0x20>)
   22f24:	689b      	ldr	r3, [r3, #8]
   22f26:	695b      	ldr	r3, [r3, #20]
   22f28:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   22f2a:	b002      	add	sp, #8
   22f2c:	bdd0      	pop	{r4, r6, r7, pc}
   22f2e:	bf00      	nop
   22f30:	2002f720 	.word	0x2002f720

00022f34 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   22f34:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   22f36:	4806      	ldr	r0, [pc, #24]	; (22f50 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22f38:	4a06      	ldr	r2, [pc, #24]	; (22f54 <z_data_copy+0x20>)
   22f3a:	4907      	ldr	r1, [pc, #28]	; (22f58 <z_data_copy+0x24>)
   22f3c:	1a12      	subs	r2, r2, r0
   22f3e:	f008 fe99 	bl	2bc74 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   22f46:	4a05      	ldr	r2, [pc, #20]	; (22f5c <z_data_copy+0x28>)
   22f48:	4905      	ldr	r1, [pc, #20]	; (22f60 <z_data_copy+0x2c>)
   22f4a:	4806      	ldr	r0, [pc, #24]	; (22f64 <z_data_copy+0x30>)
   22f4c:	f008 be92 	b.w	2bc74 <z_early_memcpy>
   22f50:	20008000 	.word	0x20008000
   22f54:	20008e00 	.word	0x20008e00
   22f58:	00034408 	.word	0x00034408
   22f5c:	00000000 	.word	0x00000000
   22f60:	00034408 	.word	0x00034408
   22f64:	20008000 	.word	0x20008000

00022f68 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22f68:	4b03      	ldr	r3, [pc, #12]	; (22f78 <elapsed+0x10>)
   22f6a:	681b      	ldr	r3, [r3, #0]
   22f6c:	b90b      	cbnz	r3, 22f72 <elapsed+0xa>
   22f6e:	f7fa baa1 	b.w	1d4b4 <sys_clock_elapsed>
}
   22f72:	2000      	movs	r0, #0
   22f74:	4770      	bx	lr
   22f76:	bf00      	nop
   22f78:	2002f76c 	.word	0x2002f76c

00022f7c <next_timeout>:

static int32_t next_timeout(void)
{
   22f7c:	b510      	push	{r4, lr}
	return list->head == list;
   22f7e:	4b11      	ldr	r3, [pc, #68]	; (22fc4 <next_timeout+0x48>)
   22f80:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f82:	429c      	cmp	r4, r3
   22f84:	d10a      	bne.n	22f9c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22f86:	f7ff ffef 	bl	22f68 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   22f8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22f8e:	4b0e      	ldr	r3, [pc, #56]	; (22fc8 <next_timeout+0x4c>)
   22f90:	691b      	ldr	r3, [r3, #16]
   22f92:	b113      	cbz	r3, 22f9a <next_timeout+0x1e>
   22f94:	4298      	cmp	r0, r3
   22f96:	bfa8      	it	ge
   22f98:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   22f9a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   22f9c:	f7ff ffe4 	bl	22f68 <elapsed>
	if ((to == NULL) ||
   22fa0:	2c00      	cmp	r4, #0
   22fa2:	d0f2      	beq.n	22f8a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22fa4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22fa8:	1a1b      	subs	r3, r3, r0
   22faa:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   22fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22fb2:	f172 0100 	sbcs.w	r1, r2, #0
   22fb6:	dae8      	bge.n	22f8a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   22fb8:	2a00      	cmp	r2, #0
   22fba:	bfac      	ite	ge
   22fbc:	4618      	movge	r0, r3
   22fbe:	2000      	movlt	r0, #0
   22fc0:	e7e5      	b.n	22f8e <next_timeout+0x12>
   22fc2:	bf00      	nop
   22fc4:	2000878c 	.word	0x2000878c
   22fc8:	2002f720 	.word	0x2002f720

00022fcc <remove_timeout>:
{
   22fcc:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22fce:	b170      	cbz	r0, 22fee <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   22fd0:	4b0b      	ldr	r3, [pc, #44]	; (23000 <remove_timeout+0x34>)
   22fd2:	685b      	ldr	r3, [r3, #4]
   22fd4:	4298      	cmp	r0, r3
   22fd6:	d00a      	beq.n	22fee <remove_timeout+0x22>
   22fd8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   22fda:	b143      	cbz	r3, 22fee <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   22fdc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   22fe0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22fe4:	1912      	adds	r2, r2, r4
   22fe6:	eb41 0105 	adc.w	r1, r1, r5
   22fea:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   22fee:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22ff2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22ff4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22ff6:	2300      	movs	r3, #0
	node->prev = NULL;
   22ff8:	e9c0 3300 	strd	r3, r3, [r0]
}
   22ffc:	bd30      	pop	{r4, r5, pc}
   22ffe:	bf00      	nop
   23000:	2000878c 	.word	0x2000878c

00023004 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23004:	f1b3 3fff 	cmp.w	r3, #4294967295
   23008:	bf08      	it	eq
   2300a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2300e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23012:	4604      	mov	r4, r0
   23014:	4692      	mov	sl, r2
   23016:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23018:	f000 809e 	beq.w	23158 <z_add_timeout+0x154>
	return node->next != NULL;
   2301c:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2301e:	b166      	cbz	r6, 2303a <z_add_timeout+0x36>
   23020:	494e      	ldr	r1, [pc, #312]	; (2315c <z_add_timeout+0x158>)
   23022:	2363      	movs	r3, #99	; 0x63
   23024:	4a4e      	ldr	r2, [pc, #312]	; (23160 <z_add_timeout+0x15c>)
   23026:	484f      	ldr	r0, [pc, #316]	; (23164 <z_add_timeout+0x160>)
   23028:	f004 fae3 	bl	275f2 <assert_print>
   2302c:	484e      	ldr	r0, [pc, #312]	; (23168 <z_add_timeout+0x164>)
   2302e:	f004 fae0 	bl	275f2 <assert_print>
   23032:	2163      	movs	r1, #99	; 0x63
   23034:	484a      	ldr	r0, [pc, #296]	; (23160 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23036:	f004 fad5 	bl	275e4 <assert_post_action>
	to->fn = fn;
   2303a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2303c:	f04f 0320 	mov.w	r3, #32
   23040:	f3ef 8711 	mrs	r7, BASEPRI
   23044:	f383 8812 	msr	BASEPRI_MAX, r3
   23048:	f3bf 8f6f 	isb	sy
   2304c:	4847      	ldr	r0, [pc, #284]	; (2316c <z_add_timeout+0x168>)
   2304e:	f7fd fc53 	bl	208f8 <z_spin_lock_valid>
   23052:	b960      	cbnz	r0, 2306e <z_add_timeout+0x6a>
   23054:	2394      	movs	r3, #148	; 0x94
   23056:	4a46      	ldr	r2, [pc, #280]	; (23170 <z_add_timeout+0x16c>)
   23058:	4946      	ldr	r1, [pc, #280]	; (23174 <z_add_timeout+0x170>)
   2305a:	4842      	ldr	r0, [pc, #264]	; (23164 <z_add_timeout+0x160>)
   2305c:	f004 fac9 	bl	275f2 <assert_print>
   23060:	4942      	ldr	r1, [pc, #264]	; (2316c <z_add_timeout+0x168>)
   23062:	4845      	ldr	r0, [pc, #276]	; (23178 <z_add_timeout+0x174>)
   23064:	f004 fac5 	bl	275f2 <assert_print>
   23068:	2194      	movs	r1, #148	; 0x94
   2306a:	4841      	ldr	r0, [pc, #260]	; (23170 <z_add_timeout+0x16c>)
   2306c:	e7e3      	b.n	23036 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   2306e:	483f      	ldr	r0, [pc, #252]	; (2316c <z_add_timeout+0x168>)
   23070:	f7fd fc5e 	bl	20930 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   23074:	f1ba 3fff 	cmp.w	sl, #4294967295
   23078:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   2307c:	da23      	bge.n	230c6 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2307e:	f06f 0301 	mvn.w	r3, #1
   23082:	493e      	ldr	r1, [pc, #248]	; (2317c <z_add_timeout+0x178>)
   23084:	e9d1 2000 	ldrd	r2, r0, [r1]
   23088:	1a9b      	subs	r3, r3, r2
   2308a:	f04f 32ff 	mov.w	r2, #4294967295
   2308e:	eb62 0000 	sbc.w	r0, r2, r0
   23092:	ebb3 030a 	subs.w	r3, r3, sl
   23096:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2309a:	2b01      	cmp	r3, #1
   2309c:	f170 0200 	sbcs.w	r2, r0, #0
   230a0:	da01      	bge.n	230a6 <z_add_timeout+0xa2>
   230a2:	2301      	movs	r3, #1
   230a4:	4630      	mov	r0, r6
   230a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   230aa:	4b35      	ldr	r3, [pc, #212]	; (23180 <z_add_timeout+0x17c>)
   230ac:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   230ae:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   230b2:	429a      	cmp	r2, r3
   230b4:	bf18      	it	ne
   230b6:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   230b8:	b986      	cbnz	r6, 230dc <z_add_timeout+0xd8>
	node->prev = tail;
   230ba:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   230be:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   230c2:	605c      	str	r4, [r3, #4]
}
   230c4:	e01c      	b.n	23100 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   230c6:	f7ff ff4f 	bl	22f68 <elapsed>
   230ca:	f11a 0801 	adds.w	r8, sl, #1
   230ce:	f145 0500 	adc.w	r5, r5, #0
   230d2:	eb18 0300 	adds.w	r3, r8, r0
   230d6:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   230da:	e7e4      	b.n	230a6 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   230dc:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   230e0:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   230e4:	428a      	cmp	r2, r1
   230e6:	eb70 0e05 	sbcs.w	lr, r0, r5
   230ea:	da28      	bge.n	2313e <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   230ec:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   230ee:	6872      	ldr	r2, [r6, #4]
   230f0:	eb65 0500 	sbc.w	r5, r5, r0
   230f4:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   230f8:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   230fc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   230fe:	6074      	str	r4, [r6, #4]
	return list->head == list;
   23100:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23102:	429a      	cmp	r2, r3
   23104:	d00b      	beq.n	2311e <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   23106:	4294      	cmp	r4, r2
   23108:	d109      	bne.n	2311e <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2310a:	f7ff ff37 	bl	22f7c <next_timeout>

			if (next_time == 0 ||
   2310e:	b118      	cbz	r0, 23118 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   23110:	4b1c      	ldr	r3, [pc, #112]	; (23184 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   23112:	691b      	ldr	r3, [r3, #16]
   23114:	4283      	cmp	r3, r0
   23116:	d002      	beq.n	2311e <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   23118:	2100      	movs	r1, #0
   2311a:	f7fa f99b 	bl	1d454 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2311e:	4813      	ldr	r0, [pc, #76]	; (2316c <z_add_timeout+0x168>)
   23120:	f7fd fbf8 	bl	20914 <z_spin_unlock_valid>
   23124:	b9a0      	cbnz	r0, 23150 <z_add_timeout+0x14c>
   23126:	23c2      	movs	r3, #194	; 0xc2
   23128:	4a11      	ldr	r2, [pc, #68]	; (23170 <z_add_timeout+0x16c>)
   2312a:	4917      	ldr	r1, [pc, #92]	; (23188 <z_add_timeout+0x184>)
   2312c:	480d      	ldr	r0, [pc, #52]	; (23164 <z_add_timeout+0x160>)
   2312e:	f004 fa60 	bl	275f2 <assert_print>
   23132:	490e      	ldr	r1, [pc, #56]	; (2316c <z_add_timeout+0x168>)
   23134:	4815      	ldr	r0, [pc, #84]	; (2318c <z_add_timeout+0x188>)
   23136:	f004 fa5c 	bl	275f2 <assert_print>
   2313a:	21c2      	movs	r1, #194	; 0xc2
   2313c:	e795      	b.n	2306a <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   2313e:	1a52      	subs	r2, r2, r1
   23140:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   23144:	4566      	cmp	r6, ip
   23146:	e9c4 2004 	strd	r2, r0, [r4, #16]
   2314a:	d0b6      	beq.n	230ba <z_add_timeout+0xb6>
   2314c:	6836      	ldr	r6, [r6, #0]
   2314e:	e7b3      	b.n	230b8 <z_add_timeout+0xb4>
	__asm__ volatile(
   23150:	f387 8811 	msr	BASEPRI, r7
   23154:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   23158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2315c:	00033ce6 	.word	0x00033ce6
   23160:	00033cc2 	.word	0x00033cc2
   23164:	0002e715 	.word	0x0002e715
   23168:	00032363 	.word	0x00032363
   2316c:	2002f770 	.word	0x2002f770
   23170:	0002f55d 	.word	0x0002f55d
   23174:	0002f5b6 	.word	0x0002f5b6
   23178:	0002f5cb 	.word	0x0002f5cb
   2317c:	20009e50 	.word	0x20009e50
   23180:	2000878c 	.word	0x2000878c
   23184:	2002f720 	.word	0x2002f720
   23188:	0002f58a 	.word	0x0002f58a
   2318c:	0002f5a1 	.word	0x0002f5a1

00023190 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   23190:	b538      	push	{r3, r4, r5, lr}
   23192:	4604      	mov	r4, r0
	__asm__ volatile(
   23194:	f04f 0320 	mov.w	r3, #32
   23198:	f3ef 8511 	mrs	r5, BASEPRI
   2319c:	f383 8812 	msr	BASEPRI_MAX, r3
   231a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   231a4:	4819      	ldr	r0, [pc, #100]	; (2320c <z_abort_timeout+0x7c>)
   231a6:	f7fd fba7 	bl	208f8 <z_spin_lock_valid>
   231aa:	b968      	cbnz	r0, 231c8 <z_abort_timeout+0x38>
   231ac:	2394      	movs	r3, #148	; 0x94
   231ae:	4a18      	ldr	r2, [pc, #96]	; (23210 <z_abort_timeout+0x80>)
   231b0:	4918      	ldr	r1, [pc, #96]	; (23214 <z_abort_timeout+0x84>)
   231b2:	4819      	ldr	r0, [pc, #100]	; (23218 <z_abort_timeout+0x88>)
   231b4:	f004 fa1d 	bl	275f2 <assert_print>
   231b8:	4914      	ldr	r1, [pc, #80]	; (2320c <z_abort_timeout+0x7c>)
   231ba:	4818      	ldr	r0, [pc, #96]	; (2321c <z_abort_timeout+0x8c>)
   231bc:	f004 fa19 	bl	275f2 <assert_print>
   231c0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231c2:	4813      	ldr	r0, [pc, #76]	; (23210 <z_abort_timeout+0x80>)
   231c4:	f004 fa0e 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   231c8:	4810      	ldr	r0, [pc, #64]	; (2320c <z_abort_timeout+0x7c>)
   231ca:	f7fd fbb1 	bl	20930 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   231ce:	6823      	ldr	r3, [r4, #0]
   231d0:	b19b      	cbz	r3, 231fa <z_abort_timeout+0x6a>
			remove_timeout(to);
   231d2:	4620      	mov	r0, r4
   231d4:	f7ff fefa 	bl	22fcc <remove_timeout>
			ret = 0;
   231d8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231da:	480c      	ldr	r0, [pc, #48]	; (2320c <z_abort_timeout+0x7c>)
   231dc:	f7fd fb9a 	bl	20914 <z_spin_unlock_valid>
   231e0:	b970      	cbnz	r0, 23200 <z_abort_timeout+0x70>
   231e2:	23c2      	movs	r3, #194	; 0xc2
   231e4:	4a0a      	ldr	r2, [pc, #40]	; (23210 <z_abort_timeout+0x80>)
   231e6:	490e      	ldr	r1, [pc, #56]	; (23220 <z_abort_timeout+0x90>)
   231e8:	480b      	ldr	r0, [pc, #44]	; (23218 <z_abort_timeout+0x88>)
   231ea:	f004 fa02 	bl	275f2 <assert_print>
   231ee:	4907      	ldr	r1, [pc, #28]	; (2320c <z_abort_timeout+0x7c>)
   231f0:	480c      	ldr	r0, [pc, #48]	; (23224 <z_abort_timeout+0x94>)
   231f2:	f004 f9fe 	bl	275f2 <assert_print>
   231f6:	21c2      	movs	r1, #194	; 0xc2
   231f8:	e7e3      	b.n	231c2 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   231fa:	f06f 0415 	mvn.w	r4, #21
   231fe:	e7ec      	b.n	231da <z_abort_timeout+0x4a>
	__asm__ volatile(
   23200:	f385 8811 	msr	BASEPRI, r5
   23204:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   23208:	4620      	mov	r0, r4
   2320a:	bd38      	pop	{r3, r4, r5, pc}
   2320c:	2002f770 	.word	0x2002f770
   23210:	0002f55d 	.word	0x0002f55d
   23214:	0002f5b6 	.word	0x0002f5b6
   23218:	0002e715 	.word	0x0002e715
   2321c:	0002f5cb 	.word	0x0002f5cb
   23220:	0002f58a 	.word	0x0002f58a
   23224:	0002f5a1 	.word	0x0002f5a1

00023228 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   23228:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2322a:	f04f 0320 	mov.w	r3, #32
   2322e:	f3ef 8511 	mrs	r5, BASEPRI
   23232:	f383 8812 	msr	BASEPRI_MAX, r3
   23236:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2323a:	4817      	ldr	r0, [pc, #92]	; (23298 <z_get_next_timeout_expiry+0x70>)
   2323c:	f7fd fb5c 	bl	208f8 <z_spin_lock_valid>
   23240:	b968      	cbnz	r0, 2325e <z_get_next_timeout_expiry+0x36>
   23242:	2394      	movs	r3, #148	; 0x94
   23244:	4a15      	ldr	r2, [pc, #84]	; (2329c <z_get_next_timeout_expiry+0x74>)
   23246:	4916      	ldr	r1, [pc, #88]	; (232a0 <z_get_next_timeout_expiry+0x78>)
   23248:	4816      	ldr	r0, [pc, #88]	; (232a4 <z_get_next_timeout_expiry+0x7c>)
   2324a:	f004 f9d2 	bl	275f2 <assert_print>
   2324e:	4912      	ldr	r1, [pc, #72]	; (23298 <z_get_next_timeout_expiry+0x70>)
   23250:	4815      	ldr	r0, [pc, #84]	; (232a8 <z_get_next_timeout_expiry+0x80>)
   23252:	f004 f9ce 	bl	275f2 <assert_print>
   23256:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23258:	4810      	ldr	r0, [pc, #64]	; (2329c <z_get_next_timeout_expiry+0x74>)
   2325a:	f004 f9c3 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2325e:	480e      	ldr	r0, [pc, #56]	; (23298 <z_get_next_timeout_expiry+0x70>)
   23260:	f7fd fb66 	bl	20930 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   23264:	f7ff fe8a 	bl	22f7c <next_timeout>
   23268:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2326a:	480b      	ldr	r0, [pc, #44]	; (23298 <z_get_next_timeout_expiry+0x70>)
   2326c:	f7fd fb52 	bl	20914 <z_spin_unlock_valid>
   23270:	b958      	cbnz	r0, 2328a <z_get_next_timeout_expiry+0x62>
   23272:	23c2      	movs	r3, #194	; 0xc2
   23274:	4a09      	ldr	r2, [pc, #36]	; (2329c <z_get_next_timeout_expiry+0x74>)
   23276:	490d      	ldr	r1, [pc, #52]	; (232ac <z_get_next_timeout_expiry+0x84>)
   23278:	480a      	ldr	r0, [pc, #40]	; (232a4 <z_get_next_timeout_expiry+0x7c>)
   2327a:	f004 f9ba 	bl	275f2 <assert_print>
   2327e:	4906      	ldr	r1, [pc, #24]	; (23298 <z_get_next_timeout_expiry+0x70>)
   23280:	480b      	ldr	r0, [pc, #44]	; (232b0 <z_get_next_timeout_expiry+0x88>)
   23282:	f004 f9b6 	bl	275f2 <assert_print>
   23286:	21c2      	movs	r1, #194	; 0xc2
   23288:	e7e6      	b.n	23258 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   2328a:	f385 8811 	msr	BASEPRI, r5
   2328e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   23292:	4620      	mov	r0, r4
   23294:	bd38      	pop	{r3, r4, r5, pc}
   23296:	bf00      	nop
   23298:	2002f770 	.word	0x2002f770
   2329c:	0002f55d 	.word	0x0002f55d
   232a0:	0002f5b6 	.word	0x0002f5b6
   232a4:	0002e715 	.word	0x0002e715
   232a8:	0002f5cb 	.word	0x0002f5cb
   232ac:	0002f58a 	.word	0x0002f58a
   232b0:	0002f5a1 	.word	0x0002f5a1

000232b4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   232b4:	b570      	push	{r4, r5, r6, lr}
   232b6:	4604      	mov	r4, r0
   232b8:	460d      	mov	r5, r1
	__asm__ volatile(
   232ba:	f04f 0320 	mov.w	r3, #32
   232be:	f3ef 8611 	mrs	r6, BASEPRI
   232c2:	f383 8812 	msr	BASEPRI_MAX, r3
   232c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   232ca:	481b      	ldr	r0, [pc, #108]	; (23338 <z_set_timeout_expiry+0x84>)
   232cc:	f7fd fb14 	bl	208f8 <z_spin_lock_valid>
   232d0:	b968      	cbnz	r0, 232ee <z_set_timeout_expiry+0x3a>
   232d2:	2394      	movs	r3, #148	; 0x94
   232d4:	4a19      	ldr	r2, [pc, #100]	; (2333c <z_set_timeout_expiry+0x88>)
   232d6:	491a      	ldr	r1, [pc, #104]	; (23340 <z_set_timeout_expiry+0x8c>)
   232d8:	481a      	ldr	r0, [pc, #104]	; (23344 <z_set_timeout_expiry+0x90>)
   232da:	f004 f98a 	bl	275f2 <assert_print>
   232de:	4916      	ldr	r1, [pc, #88]	; (23338 <z_set_timeout_expiry+0x84>)
   232e0:	4819      	ldr	r0, [pc, #100]	; (23348 <z_set_timeout_expiry+0x94>)
   232e2:	f004 f986 	bl	275f2 <assert_print>
   232e6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232e8:	4814      	ldr	r0, [pc, #80]	; (2333c <z_set_timeout_expiry+0x88>)
   232ea:	f004 f97b 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   232ee:	4812      	ldr	r0, [pc, #72]	; (23338 <z_set_timeout_expiry+0x84>)
   232f0:	f7fd fb1e 	bl	20930 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   232f4:	f7ff fe42 	bl	22f7c <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   232f8:	2801      	cmp	r0, #1
   232fa:	dd07      	ble.n	2330c <z_set_timeout_expiry+0x58>
   232fc:	42a0      	cmp	r0, r4
   232fe:	db05      	blt.n	2330c <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   23300:	42a0      	cmp	r0, r4
   23302:	4629      	mov	r1, r5
   23304:	bfa8      	it	ge
   23306:	4620      	movge	r0, r4
   23308:	f7fa f8a4 	bl	1d454 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2330c:	480a      	ldr	r0, [pc, #40]	; (23338 <z_set_timeout_expiry+0x84>)
   2330e:	f7fd fb01 	bl	20914 <z_spin_unlock_valid>
   23312:	b958      	cbnz	r0, 2332c <z_set_timeout_expiry+0x78>
   23314:	23c2      	movs	r3, #194	; 0xc2
   23316:	4a09      	ldr	r2, [pc, #36]	; (2333c <z_set_timeout_expiry+0x88>)
   23318:	490c      	ldr	r1, [pc, #48]	; (2334c <z_set_timeout_expiry+0x98>)
   2331a:	480a      	ldr	r0, [pc, #40]	; (23344 <z_set_timeout_expiry+0x90>)
   2331c:	f004 f969 	bl	275f2 <assert_print>
   23320:	4905      	ldr	r1, [pc, #20]	; (23338 <z_set_timeout_expiry+0x84>)
   23322:	480b      	ldr	r0, [pc, #44]	; (23350 <z_set_timeout_expiry+0x9c>)
   23324:	f004 f965 	bl	275f2 <assert_print>
   23328:	21c2      	movs	r1, #194	; 0xc2
   2332a:	e7dd      	b.n	232e8 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   2332c:	f386 8811 	msr	BASEPRI, r6
   23330:	f3bf 8f6f 	isb	sy
		}
	}
}
   23334:	bd70      	pop	{r4, r5, r6, pc}
   23336:	bf00      	nop
   23338:	2002f770 	.word	0x2002f770
   2333c:	0002f55d 	.word	0x0002f55d
   23340:	0002f5b6 	.word	0x0002f5b6
   23344:	0002e715 	.word	0x0002e715
   23348:	0002f5cb 	.word	0x0002f5cb
   2334c:	0002f58a 	.word	0x0002f58a
   23350:	0002f5a1 	.word	0x0002f5a1

00023354 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   23354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23358:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2335a:	f7fe ff7d 	bl	22258 <z_time_slice>
	__asm__ volatile(
   2335e:	f04f 0320 	mov.w	r3, #32
   23362:	f3ef 8711 	mrs	r7, BASEPRI
   23366:	f383 8812 	msr	BASEPRI_MAX, r3
   2336a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2336e:	483f      	ldr	r0, [pc, #252]	; (2346c <sys_clock_announce+0x118>)
   23370:	f7fd fac2 	bl	208f8 <z_spin_lock_valid>
   23374:	b968      	cbnz	r0, 23392 <sys_clock_announce+0x3e>
   23376:	2394      	movs	r3, #148	; 0x94
   23378:	4a3d      	ldr	r2, [pc, #244]	; (23470 <sys_clock_announce+0x11c>)
   2337a:	493e      	ldr	r1, [pc, #248]	; (23474 <sys_clock_announce+0x120>)
   2337c:	483e      	ldr	r0, [pc, #248]	; (23478 <sys_clock_announce+0x124>)
   2337e:	f004 f938 	bl	275f2 <assert_print>
   23382:	493a      	ldr	r1, [pc, #232]	; (2346c <sys_clock_announce+0x118>)
   23384:	483d      	ldr	r0, [pc, #244]	; (2347c <sys_clock_announce+0x128>)
   23386:	f004 f934 	bl	275f2 <assert_print>
   2338a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2338c:	4838      	ldr	r0, [pc, #224]	; (23470 <sys_clock_announce+0x11c>)
   2338e:	f004 f929 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23392:	4836      	ldr	r0, [pc, #216]	; (2346c <sys_clock_announce+0x118>)
   23394:	f7fd facc 	bl	20930 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   23398:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 23480 <sys_clock_announce+0x12c>
	return list->head == list;
   2339c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 23484 <sys_clock_announce+0x130>
   233a0:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   233a4:	4a38      	ldr	r2, [pc, #224]	; (23488 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   233a6:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   233a8:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   233ac:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   233b0:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   233b4:	d00b      	beq.n	233ce <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   233b6:	b155      	cbz	r5, 233ce <sys_clock_announce+0x7a>
   233b8:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   233bc:	42b4      	cmp	r4, r6
   233be:	eb71 0e00 	sbcs.w	lr, r1, r0
   233c2:	da1c      	bge.n	233fe <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   233c4:	1b36      	subs	r6, r6, r4
   233c6:	eb60 0001 	sbc.w	r0, r0, r1
   233ca:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   233ce:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   233d0:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   233d4:	eb4c 0101 	adc.w	r1, ip, r1
   233d8:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   233dc:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   233e0:	f7ff fdcc 	bl	22f7c <next_timeout>
   233e4:	4621      	mov	r1, r4
   233e6:	f7fa f835 	bl	1d454 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233ea:	4820      	ldr	r0, [pc, #128]	; (2346c <sys_clock_announce+0x118>)
   233ec:	f7fd fa92 	bl	20914 <z_spin_unlock_valid>
   233f0:	b1a8      	cbz	r0, 2341e <sys_clock_announce+0xca>
	__asm__ volatile(
   233f2:	f387 8811 	msr	BASEPRI, r7
   233f6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   233fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   233fe:	18f3      	adds	r3, r6, r3
   23400:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   23404:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   23408:	2200      	movs	r2, #0
   2340a:	2300      	movs	r3, #0
		remove_timeout(t);
   2340c:	4628      	mov	r0, r5
		t->dticks = 0;
   2340e:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   23412:	f7ff fddb 	bl	22fcc <remove_timeout>
   23416:	4815      	ldr	r0, [pc, #84]	; (2346c <sys_clock_announce+0x118>)
   23418:	f7fd fa7c 	bl	20914 <z_spin_unlock_valid>
   2341c:	b958      	cbnz	r0, 23436 <sys_clock_announce+0xe2>
   2341e:	23c2      	movs	r3, #194	; 0xc2
   23420:	4a13      	ldr	r2, [pc, #76]	; (23470 <sys_clock_announce+0x11c>)
   23422:	491a      	ldr	r1, [pc, #104]	; (2348c <sys_clock_announce+0x138>)
   23424:	4814      	ldr	r0, [pc, #80]	; (23478 <sys_clock_announce+0x124>)
   23426:	f004 f8e4 	bl	275f2 <assert_print>
   2342a:	4910      	ldr	r1, [pc, #64]	; (2346c <sys_clock_announce+0x118>)
   2342c:	4818      	ldr	r0, [pc, #96]	; (23490 <sys_clock_announce+0x13c>)
   2342e:	f004 f8e0 	bl	275f2 <assert_print>
   23432:	21c2      	movs	r1, #194	; 0xc2
   23434:	e7aa      	b.n	2338c <sys_clock_announce+0x38>
   23436:	f387 8811 	msr	BASEPRI, r7
   2343a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2343e:	4628      	mov	r0, r5
   23440:	68ab      	ldr	r3, [r5, #8]
   23442:	4798      	blx	r3
	__asm__ volatile(
   23444:	f04f 0320 	mov.w	r3, #32
   23448:	f3ef 8711 	mrs	r7, BASEPRI
   2344c:	f383 8812 	msr	BASEPRI_MAX, r3
   23450:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23454:	4805      	ldr	r0, [pc, #20]	; (2346c <sys_clock_announce+0x118>)
   23456:	f7fd fa4f 	bl	208f8 <z_spin_lock_valid>
   2345a:	2800      	cmp	r0, #0
   2345c:	d08b      	beq.n	23376 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   2345e:	4803      	ldr	r0, [pc, #12]	; (2346c <sys_clock_announce+0x118>)
   23460:	f7fd fa66 	bl	20930 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   23464:	f8d8 4000 	ldr.w	r4, [r8]
   23468:	1ba4      	subs	r4, r4, r6
   2346a:	e799      	b.n	233a0 <sys_clock_announce+0x4c>
   2346c:	2002f770 	.word	0x2002f770
   23470:	0002f55d 	.word	0x0002f55d
   23474:	0002f5b6 	.word	0x0002f5b6
   23478:	0002e715 	.word	0x0002e715
   2347c:	0002f5cb 	.word	0x0002f5cb
   23480:	2002f76c 	.word	0x2002f76c
   23484:	2000878c 	.word	0x2000878c
   23488:	20009e50 	.word	0x20009e50
   2348c:	0002f58a 	.word	0x0002f58a
   23490:	0002f5a1 	.word	0x0002f5a1

00023494 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   23494:	b570      	push	{r4, r5, r6, lr}
   23496:	f04f 0320 	mov.w	r3, #32
   2349a:	f3ef 8611 	mrs	r6, BASEPRI
   2349e:	f383 8812 	msr	BASEPRI_MAX, r3
   234a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   234a6:	481a      	ldr	r0, [pc, #104]	; (23510 <sys_clock_tick_get+0x7c>)
   234a8:	f7fd fa26 	bl	208f8 <z_spin_lock_valid>
   234ac:	b968      	cbnz	r0, 234ca <sys_clock_tick_get+0x36>
   234ae:	2394      	movs	r3, #148	; 0x94
   234b0:	4a18      	ldr	r2, [pc, #96]	; (23514 <sys_clock_tick_get+0x80>)
   234b2:	4919      	ldr	r1, [pc, #100]	; (23518 <sys_clock_tick_get+0x84>)
   234b4:	4819      	ldr	r0, [pc, #100]	; (2351c <sys_clock_tick_get+0x88>)
   234b6:	f004 f89c 	bl	275f2 <assert_print>
   234ba:	4915      	ldr	r1, [pc, #84]	; (23510 <sys_clock_tick_get+0x7c>)
   234bc:	4818      	ldr	r0, [pc, #96]	; (23520 <sys_clock_tick_get+0x8c>)
   234be:	f004 f898 	bl	275f2 <assert_print>
   234c2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   234c4:	4813      	ldr	r0, [pc, #76]	; (23514 <sys_clock_tick_get+0x80>)
   234c6:	f004 f88d 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   234ca:	4811      	ldr	r0, [pc, #68]	; (23510 <sys_clock_tick_get+0x7c>)
   234cc:	f7fd fa30 	bl	20930 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   234d0:	f7ff fd4a 	bl	22f68 <elapsed>
   234d4:	4a13      	ldr	r2, [pc, #76]	; (23524 <sys_clock_tick_get+0x90>)
   234d6:	e9d2 4500 	ldrd	r4, r5, [r2]
   234da:	1904      	adds	r4, r0, r4
   234dc:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   234e0:	480b      	ldr	r0, [pc, #44]	; (23510 <sys_clock_tick_get+0x7c>)
   234e2:	f7fd fa17 	bl	20914 <z_spin_unlock_valid>
   234e6:	b958      	cbnz	r0, 23500 <sys_clock_tick_get+0x6c>
   234e8:	23c2      	movs	r3, #194	; 0xc2
   234ea:	4a0a      	ldr	r2, [pc, #40]	; (23514 <sys_clock_tick_get+0x80>)
   234ec:	490e      	ldr	r1, [pc, #56]	; (23528 <sys_clock_tick_get+0x94>)
   234ee:	480b      	ldr	r0, [pc, #44]	; (2351c <sys_clock_tick_get+0x88>)
   234f0:	f004 f87f 	bl	275f2 <assert_print>
   234f4:	4906      	ldr	r1, [pc, #24]	; (23510 <sys_clock_tick_get+0x7c>)
   234f6:	480d      	ldr	r0, [pc, #52]	; (2352c <sys_clock_tick_get+0x98>)
   234f8:	f004 f87b 	bl	275f2 <assert_print>
   234fc:	21c2      	movs	r1, #194	; 0xc2
   234fe:	e7e1      	b.n	234c4 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   23500:	f386 8811 	msr	BASEPRI, r6
   23504:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   23508:	4620      	mov	r0, r4
   2350a:	4629      	mov	r1, r5
   2350c:	bd70      	pop	{r4, r5, r6, pc}
   2350e:	bf00      	nop
   23510:	2002f770 	.word	0x2002f770
   23514:	0002f55d 	.word	0x0002f55d
   23518:	0002f5b6 	.word	0x0002f5b6
   2351c:	0002e715 	.word	0x0002e715
   23520:	0002f5cb 	.word	0x0002f5cb
   23524:	20009e50 	.word	0x20009e50
   23528:	0002f58a 	.word	0x0002f58a
   2352c:	0002f5a1 	.word	0x0002f5a1

00023530 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   23530:	b570      	push	{r4, r5, r6, lr}
   23532:	4604      	mov	r4, r0
	__asm__ volatile(
   23534:	f04f 0320 	mov.w	r3, #32
   23538:	f3ef 8511 	mrs	r5, BASEPRI
   2353c:	f383 8812 	msr	BASEPRI_MAX, r3
   23540:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23544:	4849      	ldr	r0, [pc, #292]	; (2366c <z_timer_expiration_handler+0x13c>)
   23546:	f7fd f9d7 	bl	208f8 <z_spin_lock_valid>
   2354a:	b968      	cbnz	r0, 23568 <z_timer_expiration_handler+0x38>
   2354c:	2394      	movs	r3, #148	; 0x94
   2354e:	4a48      	ldr	r2, [pc, #288]	; (23670 <z_timer_expiration_handler+0x140>)
   23550:	4948      	ldr	r1, [pc, #288]	; (23674 <z_timer_expiration_handler+0x144>)
   23552:	4849      	ldr	r0, [pc, #292]	; (23678 <z_timer_expiration_handler+0x148>)
   23554:	f004 f84d 	bl	275f2 <assert_print>
   23558:	4944      	ldr	r1, [pc, #272]	; (2366c <z_timer_expiration_handler+0x13c>)
   2355a:	4848      	ldr	r0, [pc, #288]	; (2367c <z_timer_expiration_handler+0x14c>)
   2355c:	f004 f849 	bl	275f2 <assert_print>
   23560:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23562:	4843      	ldr	r0, [pc, #268]	; (23670 <z_timer_expiration_handler+0x140>)
   23564:	f004 f83e 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23568:	4840      	ldr	r0, [pc, #256]	; (2366c <z_timer_expiration_handler+0x13c>)
   2356a:	f7fd f9e1 	bl	20930 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2356e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   23572:	3301      	adds	r3, #1
   23574:	f142 0200 	adc.w	r2, r2, #0
   23578:	2b02      	cmp	r3, #2
   2357a:	f172 0200 	sbcs.w	r2, r2, #0
   2357e:	d322      	bcc.n	235c6 <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   23580:	f008 fc92 	bl	2bea8 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   23584:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   23588:	3001      	adds	r0, #1
   2358a:	f141 0100 	adc.w	r1, r1, #0
   2358e:	18c0      	adds	r0, r0, r3
   23590:	eb41 0102 	adc.w	r1, r1, r2
   23594:	2801      	cmp	r0, #1
   23596:	f171 0100 	sbcs.w	r1, r1, #0
   2359a:	db29      	blt.n	235f0 <z_timer_expiration_handler+0xc0>
   2359c:	f008 fc84 	bl	2bea8 <z_impl_k_uptime_ticks>
   235a0:	3001      	adds	r0, #1
   235a2:	f141 0300 	adc.w	r3, r1, #0
   235a6:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   235aa:	1880      	adds	r0, r0, r2
   235ac:	f06f 0201 	mvn.w	r2, #1
   235b0:	eb43 0301 	adc.w	r3, r3, r1
   235b4:	f04f 31ff 	mov.w	r1, #4294967295
   235b8:	1a12      	subs	r2, r2, r0
   235ba:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   235be:	4620      	mov	r0, r4
   235c0:	492f      	ldr	r1, [pc, #188]	; (23680 <z_timer_expiration_handler+0x150>)
   235c2:	f7ff fd1f 	bl	23004 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   235c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   235c8:	3301      	adds	r3, #1
   235ca:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   235cc:	6a23      	ldr	r3, [r4, #32]
   235ce:	b35b      	cbz	r3, 23628 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   235d0:	4826      	ldr	r0, [pc, #152]	; (2366c <z_timer_expiration_handler+0x13c>)
   235d2:	f7fd f99f 	bl	20914 <z_spin_unlock_valid>
   235d6:	b980      	cbnz	r0, 235fa <z_timer_expiration_handler+0xca>
   235d8:	23c2      	movs	r3, #194	; 0xc2
   235da:	4a25      	ldr	r2, [pc, #148]	; (23670 <z_timer_expiration_handler+0x140>)
   235dc:	4929      	ldr	r1, [pc, #164]	; (23684 <z_timer_expiration_handler+0x154>)
   235de:	4826      	ldr	r0, [pc, #152]	; (23678 <z_timer_expiration_handler+0x148>)
   235e0:	f004 f807 	bl	275f2 <assert_print>
   235e4:	4921      	ldr	r1, [pc, #132]	; (2366c <z_timer_expiration_handler+0x13c>)
   235e6:	4828      	ldr	r0, [pc, #160]	; (23688 <z_timer_expiration_handler+0x158>)
   235e8:	f004 f803 	bl	275f2 <assert_print>
   235ec:	21c2      	movs	r1, #194	; 0xc2
   235ee:	e7b8      	b.n	23562 <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   235f0:	f06f 0201 	mvn.w	r2, #1
   235f4:	f04f 33ff 	mov.w	r3, #4294967295
   235f8:	e7e1      	b.n	235be <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   235fa:	f385 8811 	msr	BASEPRI, r5
   235fe:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   23602:	4620      	mov	r0, r4
   23604:	6a23      	ldr	r3, [r4, #32]
   23606:	4798      	blx	r3
	__asm__ volatile(
   23608:	f04f 0320 	mov.w	r3, #32
   2360c:	f3ef 8511 	mrs	r5, BASEPRI
   23610:	f383 8812 	msr	BASEPRI_MAX, r3
   23614:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23618:	4814      	ldr	r0, [pc, #80]	; (2366c <z_timer_expiration_handler+0x13c>)
   2361a:	f7fd f96d 	bl	208f8 <z_spin_lock_valid>
   2361e:	2800      	cmp	r0, #0
   23620:	d094      	beq.n	2354c <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   23622:	4812      	ldr	r0, [pc, #72]	; (2366c <z_timer_expiration_handler+0x13c>)
   23624:	f7fd f984 	bl	20930 <z_spin_lock_set_owner>
	return list->head == list;
   23628:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2362c:	42a6      	cmp	r6, r4
   2362e:	d000      	beq.n	23632 <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   23630:	b94e      	cbnz	r6, 23646 <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23632:	480e      	ldr	r0, [pc, #56]	; (2366c <z_timer_expiration_handler+0x13c>)
   23634:	f7fd f96e 	bl	20914 <z_spin_unlock_valid>
   23638:	2800      	cmp	r0, #0
   2363a:	d0cd      	beq.n	235d8 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   2363c:	f385 8811 	msr	BASEPRI, r5
   23640:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   23644:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   23646:	4630      	mov	r0, r6
   23648:	f7fe fbda 	bl	21e00 <z_unpend_thread_no_timeout>
   2364c:	2300      	movs	r3, #0
   2364e:	4807      	ldr	r0, [pc, #28]	; (2366c <z_timer_expiration_handler+0x13c>)
   23650:	67f3      	str	r3, [r6, #124]	; 0x7c
   23652:	f7fd f95f 	bl	20914 <z_spin_unlock_valid>
   23656:	2800      	cmp	r0, #0
   23658:	d0be      	beq.n	235d8 <z_timer_expiration_handler+0xa8>
   2365a:	f385 8811 	msr	BASEPRI, r5
   2365e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   23662:	4630      	mov	r0, r6
}
   23664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   23668:	f7fe bb84 	b.w	21d74 <z_ready_thread>
   2366c:	2002f774 	.word	0x2002f774
   23670:	0002f55d 	.word	0x0002f55d
   23674:	0002f5b6 	.word	0x0002f5b6
   23678:	0002e715 	.word	0x0002e715
   2367c:	0002f5cb 	.word	0x0002f5cb
   23680:	00023531 	.word	0x00023531
   23684:	0002f58a 	.word	0x0002f58a
   23688:	0002f5a1 	.word	0x0002f5a1

0002368c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2368c:	f1b3 3fff 	cmp.w	r3, #4294967295
   23690:	bf08      	it	eq
   23692:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   23696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2369a:	4619      	mov	r1, r3
   2369c:	4605      	mov	r5, r0
   2369e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   236a2:	4614      	mov	r4, r2
   236a4:	4691      	mov	r9, r2
   236a6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   236a8:	d037      	beq.n	2371a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   236aa:	f1b0 3fff 	cmp.w	r0, #4294967295
   236ae:	bf08      	it	eq
   236b0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   236b4:	4637      	mov	r7, r6
   236b6:	4682      	mov	sl, r0
   236b8:	d011      	beq.n	236de <z_impl_k_timer_start+0x52>
   236ba:	ea50 0306 	orrs.w	r3, r0, r6
   236be:	d00e      	beq.n	236de <z_impl_k_timer_start+0x52>
   236c0:	1c72      	adds	r2, r6, #1
   236c2:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   236c6:	db0a      	blt.n	236de <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   236c8:	2e02      	cmp	r6, #2
   236ca:	4684      	mov	ip, r0
   236cc:	f170 0000 	sbcs.w	r0, r0, #0
   236d0:	bfbc      	itt	lt
   236d2:	2702      	movlt	r7, #2
   236d4:	f04f 0c00 	movlt.w	ip, #0
   236d8:	3f01      	subs	r7, #1
   236da:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   236de:	1c63      	adds	r3, r4, #1
   236e0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   236e4:	db0a      	blt.n	236fc <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   236e6:	2c01      	cmp	r4, #1
   236e8:	f171 0300 	sbcs.w	r3, r1, #0
   236ec:	4622      	mov	r2, r4
   236ee:	bfbc      	itt	lt
   236f0:	2201      	movlt	r2, #1
   236f2:	2100      	movlt	r1, #0
   236f4:	f112 39ff 	adds.w	r9, r2, #4294967295
   236f8:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   236fc:	4628      	mov	r0, r5
   236fe:	f7ff fd47 	bl	23190 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   23702:	2300      	movs	r3, #0
	timer->period = period;
   23704:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   23708:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2370a:	464a      	mov	r2, r9
   2370c:	4643      	mov	r3, r8
   2370e:	4628      	mov	r0, r5
		     duration);
}
   23710:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23714:	4902      	ldr	r1, [pc, #8]	; (23720 <z_impl_k_timer_start+0x94>)
   23716:	f7ff bc75 	b.w	23004 <z_add_timeout>
}
   2371a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2371e:	bf00      	nop
   23720:	00023531 	.word	0x00023531

00023724 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   23724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   23728:	2600      	movs	r6, #0
{
   2372a:	4688      	mov	r8, r1
   2372c:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   2372e:	4604      	mov	r4, r0
	int events_registered = 0;
   23730:	4637      	mov	r7, r6
	event->poller = NULL;
   23732:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23734:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 238f4 <register_events+0x1d0>
{
   23738:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2373a:	4546      	cmp	r6, r8
   2373c:	db03      	blt.n	23746 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2373e:	4638      	mov	r0, r7
   23740:	b003      	add	sp, #12
   23742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   23746:	f04f 0320 	mov.w	r3, #32
   2374a:	f3ef 8b11 	mrs	fp, BASEPRI
   2374e:	f383 8812 	msr	BASEPRI_MAX, r3
   23752:	f3bf 8f6f 	isb	sy
   23756:	4648      	mov	r0, r9
   23758:	f7fd f8ce 	bl	208f8 <z_spin_lock_valid>
   2375c:	b960      	cbnz	r0, 23778 <register_events+0x54>
   2375e:	2394      	movs	r3, #148	; 0x94
   23760:	4a65      	ldr	r2, [pc, #404]	; (238f8 <register_events+0x1d4>)
   23762:	4966      	ldr	r1, [pc, #408]	; (238fc <register_events+0x1d8>)
   23764:	4866      	ldr	r0, [pc, #408]	; (23900 <register_events+0x1dc>)
   23766:	f003 ff44 	bl	275f2 <assert_print>
   2376a:	4962      	ldr	r1, [pc, #392]	; (238f4 <register_events+0x1d0>)
   2376c:	4865      	ldr	r0, [pc, #404]	; (23904 <register_events+0x1e0>)
   2376e:	f003 ff40 	bl	275f2 <assert_print>
   23772:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23774:	4860      	ldr	r0, [pc, #384]	; (238f8 <register_events+0x1d4>)
   23776:	e060      	b.n	2383a <register_events+0x116>
	z_spin_lock_set_owner(l);
   23778:	4648      	mov	r0, r9
   2377a:	f7fd f8d9 	bl	20930 <z_spin_lock_set_owner>
	switch (event->type) {
   2377e:	7b63      	ldrb	r3, [r4, #13]
   23780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23784:	2b08      	cmp	r3, #8
   23786:	d84a      	bhi.n	2381e <register_events+0xfa>
   23788:	e8df f003 	tbb	[pc, r3]
   2378c:	49053d2b 	.word	0x49053d2b
   23790:	49494927 	.word	0x49494927
   23794:	43          	.byte	0x43
   23795:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   23796:	6923      	ldr	r3, [r4, #16]
   23798:	689b      	ldr	r3, [r3, #8]
   2379a:	b313      	cbz	r3, 237e2 <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2379c:	2302      	movs	r3, #2
	event->state |= state;
   2379e:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   237a0:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   237a4:	f3c2 3186 	ubfx	r1, r2, #14, #7
   237a8:	430b      	orrs	r3, r1
   237aa:	f363 3294 	bfi	r2, r3, #14, #7
   237ae:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   237b0:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237b4:	4648      	mov	r0, r9
   237b6:	f7fd f8ad 	bl	20914 <z_spin_unlock_valid>
   237ba:	3414      	adds	r4, #20
   237bc:	2800      	cmp	r0, #0
   237be:	f040 8092 	bne.w	238e6 <register_events+0x1c2>
   237c2:	23c2      	movs	r3, #194	; 0xc2
   237c4:	4a4c      	ldr	r2, [pc, #304]	; (238f8 <register_events+0x1d4>)
   237c6:	4950      	ldr	r1, [pc, #320]	; (23908 <register_events+0x1e4>)
   237c8:	484d      	ldr	r0, [pc, #308]	; (23900 <register_events+0x1dc>)
   237ca:	f003 ff12 	bl	275f2 <assert_print>
   237ce:	4949      	ldr	r1, [pc, #292]	; (238f4 <register_events+0x1d0>)
   237d0:	484e      	ldr	r0, [pc, #312]	; (2390c <register_events+0x1e8>)
   237d2:	f003 ff0e 	bl	275f2 <assert_print>
   237d6:	21c2      	movs	r1, #194	; 0xc2
   237d8:	e7cc      	b.n	23774 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   237da:	6923      	ldr	r3, [r4, #16]
   237dc:	681b      	ldr	r3, [r3, #0]
   237de:	2b00      	cmp	r3, #0
   237e0:	d12d      	bne.n	2383e <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   237e2:	9b01      	ldr	r3, [sp, #4]
   237e4:	2b00      	cmp	r3, #0
   237e6:	d1e5      	bne.n	237b4 <register_events+0x90>
   237e8:	782b      	ldrb	r3, [r5, #0]
   237ea:	2b00      	cmp	r3, #0
   237ec:	d0e2      	beq.n	237b4 <register_events+0x90>
	switch (event->type) {
   237ee:	7b63      	ldrb	r3, [r4, #13]
   237f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   237f4:	2b08      	cmp	r3, #8
   237f6:	d86b      	bhi.n	238d0 <register_events+0x1ac>
   237f8:	e8df f003 	tbb	[pc, r3]
   237fc:	6a234935 	.word	0x6a234935
   23800:	6a6a6a38 	.word	0x6a6a6a38
   23804:	59          	.byte	0x59
   23805:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   23806:	6923      	ldr	r3, [r4, #16]
   23808:	689b      	ldr	r3, [r3, #8]
   2380a:	2b00      	cmp	r3, #0
   2380c:	d0e9      	beq.n	237e2 <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   2380e:	2301      	movs	r3, #1
   23810:	e7c5      	b.n	2379e <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   23812:	6923      	ldr	r3, [r4, #16]
   23814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23816:	2b00      	cmp	r3, #0
   23818:	d0e3      	beq.n	237e2 <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2381a:	2310      	movs	r3, #16
   2381c:	e7bf      	b.n	2379e <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2381e:	2363      	movs	r3, #99	; 0x63
   23820:	4a3b      	ldr	r2, [pc, #236]	; (23910 <register_events+0x1ec>)
   23822:	493c      	ldr	r1, [pc, #240]	; (23914 <register_events+0x1f0>)
   23824:	4836      	ldr	r0, [pc, #216]	; (23900 <register_events+0x1dc>)
   23826:	f003 fee4 	bl	275f2 <assert_print>
   2382a:	7b61      	ldrb	r1, [r4, #13]
   2382c:	483a      	ldr	r0, [pc, #232]	; (23918 <register_events+0x1f4>)
   2382e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   23832:	f003 fede 	bl	275f2 <assert_print>
   23836:	2163      	movs	r1, #99	; 0x63
   23838:	4835      	ldr	r0, [pc, #212]	; (23910 <register_events+0x1ec>)
   2383a:	f003 fed3 	bl	275e4 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2383e:	2304      	movs	r3, #4
   23840:	e7ad      	b.n	2379e <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   23842:	6920      	ldr	r0, [r4, #16]
   23844:	b950      	cbnz	r0, 2385c <register_events+0x138>
   23846:	4935      	ldr	r1, [pc, #212]	; (2391c <register_events+0x1f8>)
   23848:	238d      	movs	r3, #141	; 0x8d
   2384a:	4a31      	ldr	r2, [pc, #196]	; (23910 <register_events+0x1ec>)
   2384c:	482c      	ldr	r0, [pc, #176]	; (23900 <register_events+0x1dc>)
   2384e:	f003 fed0 	bl	275f2 <assert_print>
   23852:	4833      	ldr	r0, [pc, #204]	; (23920 <register_events+0x1fc>)
   23854:	f003 fecd 	bl	275f2 <assert_print>
   23858:	218d      	movs	r1, #141	; 0x8d
   2385a:	e7ed      	b.n	23838 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   2385c:	462a      	mov	r2, r5
   2385e:	4621      	mov	r1, r4
   23860:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   23862:	f008 fb72 	bl	2bf4a <add_event>
	event->poller = poller;
   23866:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   23868:	3701      	adds	r7, #1
   2386a:	e7a3      	b.n	237b4 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2386c:	6920      	ldr	r0, [r4, #16]
   2386e:	b950      	cbnz	r0, 23886 <register_events+0x162>
   23870:	492c      	ldr	r1, [pc, #176]	; (23924 <register_events+0x200>)
   23872:	2391      	movs	r3, #145	; 0x91
   23874:	4a26      	ldr	r2, [pc, #152]	; (23910 <register_events+0x1ec>)
   23876:	4822      	ldr	r0, [pc, #136]	; (23900 <register_events+0x1dc>)
   23878:	f003 febb 	bl	275f2 <assert_print>
   2387c:	482a      	ldr	r0, [pc, #168]	; (23928 <register_events+0x204>)
   2387e:	f003 feb8 	bl	275f2 <assert_print>
   23882:	2191      	movs	r1, #145	; 0x91
   23884:	e7d8      	b.n	23838 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   23886:	462a      	mov	r2, r5
   23888:	4621      	mov	r1, r4
   2388a:	3014      	adds	r0, #20
   2388c:	e7e9      	b.n	23862 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2388e:	6920      	ldr	r0, [r4, #16]
   23890:	b950      	cbnz	r0, 238a8 <register_events+0x184>
   23892:	4926      	ldr	r1, [pc, #152]	; (2392c <register_events+0x208>)
   23894:	2395      	movs	r3, #149	; 0x95
   23896:	4a1e      	ldr	r2, [pc, #120]	; (23910 <register_events+0x1ec>)
   23898:	4819      	ldr	r0, [pc, #100]	; (23900 <register_events+0x1dc>)
   2389a:	f003 feaa 	bl	275f2 <assert_print>
   2389e:	4824      	ldr	r0, [pc, #144]	; (23930 <register_events+0x20c>)
   238a0:	f003 fea7 	bl	275f2 <assert_print>
   238a4:	2195      	movs	r1, #149	; 0x95
   238a6:	e7c7      	b.n	23838 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   238a8:	462a      	mov	r2, r5
   238aa:	4621      	mov	r1, r4
   238ac:	e7d9      	b.n	23862 <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   238ae:	6920      	ldr	r0, [r4, #16]
   238b0:	b950      	cbnz	r0, 238c8 <register_events+0x1a4>
   238b2:	4920      	ldr	r1, [pc, #128]	; (23934 <register_events+0x210>)
   238b4:	2399      	movs	r3, #153	; 0x99
   238b6:	4a16      	ldr	r2, [pc, #88]	; (23910 <register_events+0x1ec>)
   238b8:	4811      	ldr	r0, [pc, #68]	; (23900 <register_events+0x1dc>)
   238ba:	f003 fe9a 	bl	275f2 <assert_print>
   238be:	481e      	ldr	r0, [pc, #120]	; (23938 <register_events+0x214>)
   238c0:	f003 fe97 	bl	275f2 <assert_print>
   238c4:	2199      	movs	r1, #153	; 0x99
   238c6:	e7b7      	b.n	23838 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   238c8:	462a      	mov	r2, r5
   238ca:	4621      	mov	r1, r4
   238cc:	3028      	adds	r0, #40	; 0x28
   238ce:	e7c8      	b.n	23862 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   238d0:	4910      	ldr	r1, [pc, #64]	; (23914 <register_events+0x1f0>)
   238d2:	23a6      	movs	r3, #166	; 0xa6
   238d4:	4a0e      	ldr	r2, [pc, #56]	; (23910 <register_events+0x1ec>)
   238d6:	480a      	ldr	r0, [pc, #40]	; (23900 <register_events+0x1dc>)
   238d8:	f003 fe8b 	bl	275f2 <assert_print>
   238dc:	4817      	ldr	r0, [pc, #92]	; (2393c <register_events+0x218>)
   238de:	f003 fe88 	bl	275f2 <assert_print>
   238e2:	21a6      	movs	r1, #166	; 0xa6
   238e4:	e7a8      	b.n	23838 <register_events+0x114>
	__asm__ volatile(
   238e6:	f38b 8811 	msr	BASEPRI, fp
   238ea:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   238ee:	3601      	adds	r6, #1
   238f0:	e723      	b.n	2373a <register_events+0x16>
   238f2:	bf00      	nop
   238f4:	2002f778 	.word	0x2002f778
   238f8:	0002f55d 	.word	0x0002f55d
   238fc:	0002f5b6 	.word	0x0002f5b6
   23900:	0002e715 	.word	0x0002e715
   23904:	0002f5cb 	.word	0x0002f5cb
   23908:	0002f58a 	.word	0x0002f58a
   2390c:	0002f5a1 	.word	0x0002f5a1
   23910:	00033d06 	.word	0x00033d06
   23914:	00033fc0 	.word	0x00033fc0
   23918:	00033d27 	.word	0x00033d27
   2391c:	00033d44 	.word	0x00033d44
   23920:	00033d5e 	.word	0x00033d5e
   23924:	00033d73 	.word	0x00033d73
   23928:	00033d8f 	.word	0x00033d8f
   2392c:	00033da0 	.word	0x00033da0
   23930:	00033dbd 	.word	0x00033dbd
   23934:	00033dd4 	.word	0x00033dd4
   23938:	00033def 	.word	0x00033def
   2393c:	00033e08 	.word	0x00033e08

00023940 <clear_event_registrations>:
{
   23940:	2314      	movs	r3, #20
   23942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23946:	4615      	mov	r5, r2
	while (num_events--) {
   23948:	460c      	mov	r4, r1
	event->poller = NULL;
   2394a:	2600      	movs	r6, #0
   2394c:	fb03 0001 	mla	r0, r3, r1, r0
   23950:	4f4b      	ldr	r7, [pc, #300]	; (23a80 <clear_event_registrations+0x140>)
	while (num_events--) {
   23952:	b90c      	cbnz	r4, 23958 <clear_event_registrations+0x18>
}
   23954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   23958:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   2395c:	f1a0 0814 	sub.w	r8, r0, #20
   23960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   23964:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   23968:	2b08      	cmp	r3, #8
   2396a:	d842      	bhi.n	239f2 <clear_event_registrations+0xb2>
   2396c:	e8df f003 	tbb	[pc, r3]
   23970:	41052555 	.word	0x41052555
   23974:	41414116 	.word	0x41414116
   23978:	33          	.byte	0x33
   23979:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2397a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2397e:	2b00      	cmp	r3, #0
   23980:	d142      	bne.n	23a08 <clear_event_registrations+0xc8>
   23982:	4940      	ldr	r1, [pc, #256]	; (23a84 <clear_event_registrations+0x144>)
   23984:	23b6      	movs	r3, #182	; 0xb6
   23986:	4a40      	ldr	r2, [pc, #256]	; (23a88 <clear_event_registrations+0x148>)
   23988:	4840      	ldr	r0, [pc, #256]	; (23a8c <clear_event_registrations+0x14c>)
   2398a:	f003 fe32 	bl	275f2 <assert_print>
   2398e:	4840      	ldr	r0, [pc, #256]	; (23a90 <clear_event_registrations+0x150>)
   23990:	f003 fe2f 	bl	275f2 <assert_print>
   23994:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   23996:	483c      	ldr	r0, [pc, #240]	; (23a88 <clear_event_registrations+0x148>)
   23998:	f003 fe24 	bl	275e4 <assert_post_action>
   2399c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   239a0:	2b00      	cmp	r3, #0
   239a2:	d131      	bne.n	23a08 <clear_event_registrations+0xc8>
   239a4:	493b      	ldr	r1, [pc, #236]	; (23a94 <clear_event_registrations+0x154>)
   239a6:	23ba      	movs	r3, #186	; 0xba
   239a8:	4a37      	ldr	r2, [pc, #220]	; (23a88 <clear_event_registrations+0x148>)
   239aa:	4838      	ldr	r0, [pc, #224]	; (23a8c <clear_event_registrations+0x14c>)
   239ac:	f003 fe21 	bl	275f2 <assert_print>
   239b0:	4839      	ldr	r0, [pc, #228]	; (23a98 <clear_event_registrations+0x158>)
   239b2:	f003 fe1e 	bl	275f2 <assert_print>
   239b6:	21ba      	movs	r1, #186	; 0xba
   239b8:	e7ed      	b.n	23996 <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   239ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
   239be:	bb1b      	cbnz	r3, 23a08 <clear_event_registrations+0xc8>
   239c0:	4936      	ldr	r1, [pc, #216]	; (23a9c <clear_event_registrations+0x15c>)
   239c2:	23be      	movs	r3, #190	; 0xbe
   239c4:	4a30      	ldr	r2, [pc, #192]	; (23a88 <clear_event_registrations+0x148>)
   239c6:	4831      	ldr	r0, [pc, #196]	; (23a8c <clear_event_registrations+0x14c>)
   239c8:	f003 fe13 	bl	275f2 <assert_print>
   239cc:	4834      	ldr	r0, [pc, #208]	; (23aa0 <clear_event_registrations+0x160>)
   239ce:	f003 fe10 	bl	275f2 <assert_print>
   239d2:	21be      	movs	r1, #190	; 0xbe
   239d4:	e7df      	b.n	23996 <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   239d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   239da:	b9ab      	cbnz	r3, 23a08 <clear_event_registrations+0xc8>
   239dc:	4931      	ldr	r1, [pc, #196]	; (23aa4 <clear_event_registrations+0x164>)
   239de:	23c2      	movs	r3, #194	; 0xc2
   239e0:	4a29      	ldr	r2, [pc, #164]	; (23a88 <clear_event_registrations+0x148>)
   239e2:	482a      	ldr	r0, [pc, #168]	; (23a8c <clear_event_registrations+0x14c>)
   239e4:	f003 fe05 	bl	275f2 <assert_print>
   239e8:	482f      	ldr	r0, [pc, #188]	; (23aa8 <clear_event_registrations+0x168>)
   239ea:	f003 fe02 	bl	275f2 <assert_print>
   239ee:	21c2      	movs	r1, #194	; 0xc2
   239f0:	e7d1      	b.n	23996 <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   239f2:	492e      	ldr	r1, [pc, #184]	; (23aac <clear_event_registrations+0x16c>)
   239f4:	23cf      	movs	r3, #207	; 0xcf
   239f6:	4a24      	ldr	r2, [pc, #144]	; (23a88 <clear_event_registrations+0x148>)
   239f8:	4824      	ldr	r0, [pc, #144]	; (23a8c <clear_event_registrations+0x14c>)
   239fa:	f003 fdfa 	bl	275f2 <assert_print>
   239fe:	482c      	ldr	r0, [pc, #176]	; (23ab0 <clear_event_registrations+0x170>)
   23a00:	f003 fdf7 	bl	275f2 <assert_print>
   23a04:	21cf      	movs	r1, #207	; 0xcf
   23a06:	e7c6      	b.n	23996 <clear_event_registrations+0x56>
	return node->next != NULL;
   23a08:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   23a0c:	b12b      	cbz	r3, 23a1a <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   23a0e:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   23a12:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23a14:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   23a16:	e940 6605 	strd	r6, r6, [r0, #-20]
   23a1a:	4638      	mov	r0, r7
   23a1c:	f7fc ff7a 	bl	20914 <z_spin_unlock_valid>
   23a20:	b960      	cbnz	r0, 23a3c <clear_event_registrations+0xfc>
   23a22:	23c2      	movs	r3, #194	; 0xc2
   23a24:	4a23      	ldr	r2, [pc, #140]	; (23ab4 <clear_event_registrations+0x174>)
   23a26:	4924      	ldr	r1, [pc, #144]	; (23ab8 <clear_event_registrations+0x178>)
   23a28:	4818      	ldr	r0, [pc, #96]	; (23a8c <clear_event_registrations+0x14c>)
   23a2a:	f003 fde2 	bl	275f2 <assert_print>
   23a2e:	4914      	ldr	r1, [pc, #80]	; (23a80 <clear_event_registrations+0x140>)
   23a30:	4822      	ldr	r0, [pc, #136]	; (23abc <clear_event_registrations+0x17c>)
   23a32:	f003 fdde 	bl	275f2 <assert_print>
   23a36:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a38:	481e      	ldr	r0, [pc, #120]	; (23ab4 <clear_event_registrations+0x174>)
   23a3a:	e7ad      	b.n	23998 <clear_event_registrations+0x58>
   23a3c:	f385 8811 	msr	BASEPRI, r5
   23a40:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23a44:	f04f 0320 	mov.w	r3, #32
   23a48:	f3ef 8511 	mrs	r5, BASEPRI
   23a4c:	f383 8812 	msr	BASEPRI_MAX, r3
   23a50:	f3bf 8f6f 	isb	sy
   23a54:	4638      	mov	r0, r7
   23a56:	f7fc ff4f 	bl	208f8 <z_spin_lock_valid>
   23a5a:	3c01      	subs	r4, #1
   23a5c:	b958      	cbnz	r0, 23a76 <clear_event_registrations+0x136>
   23a5e:	2394      	movs	r3, #148	; 0x94
   23a60:	4a14      	ldr	r2, [pc, #80]	; (23ab4 <clear_event_registrations+0x174>)
   23a62:	4917      	ldr	r1, [pc, #92]	; (23ac0 <clear_event_registrations+0x180>)
   23a64:	4809      	ldr	r0, [pc, #36]	; (23a8c <clear_event_registrations+0x14c>)
   23a66:	f003 fdc4 	bl	275f2 <assert_print>
   23a6a:	4905      	ldr	r1, [pc, #20]	; (23a80 <clear_event_registrations+0x140>)
   23a6c:	4815      	ldr	r0, [pc, #84]	; (23ac4 <clear_event_registrations+0x184>)
   23a6e:	f003 fdc0 	bl	275f2 <assert_print>
   23a72:	2194      	movs	r1, #148	; 0x94
   23a74:	e7e0      	b.n	23a38 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   23a76:	4638      	mov	r0, r7
   23a78:	f7fc ff5a 	bl	20930 <z_spin_lock_set_owner>
	return k;
   23a7c:	4640      	mov	r0, r8
   23a7e:	e768      	b.n	23952 <clear_event_registrations+0x12>
   23a80:	2002f778 	.word	0x2002f778
   23a84:	00033d44 	.word	0x00033d44
   23a88:	00033d06 	.word	0x00033d06
   23a8c:	0002e715 	.word	0x0002e715
   23a90:	00033d5e 	.word	0x00033d5e
   23a94:	00033d73 	.word	0x00033d73
   23a98:	00033d8f 	.word	0x00033d8f
   23a9c:	00033da0 	.word	0x00033da0
   23aa0:	00033dbd 	.word	0x00033dbd
   23aa4:	00033dd4 	.word	0x00033dd4
   23aa8:	00033def 	.word	0x00033def
   23aac:	00033fc0 	.word	0x00033fc0
   23ab0:	00033e08 	.word	0x00033e08
   23ab4:	0002f55d 	.word	0x0002f55d
   23ab8:	0002f58a 	.word	0x0002f58a
   23abc:	0002f5a1 	.word	0x0002f5a1
   23ac0:	0002f5b6 	.word	0x0002f5b6
   23ac4:	0002f5cb 	.word	0x0002f5cb

00023ac8 <k_poll_event_init>:
{
   23ac8:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   23aca:	b162      	cbz	r2, 23ae6 <k_poll_event_init+0x1e>
   23acc:	4917      	ldr	r1, [pc, #92]	; (23b2c <k_poll_event_init+0x64>)
   23ace:	232d      	movs	r3, #45	; 0x2d
   23ad0:	4a17      	ldr	r2, [pc, #92]	; (23b30 <k_poll_event_init+0x68>)
   23ad2:	4818      	ldr	r0, [pc, #96]	; (23b34 <k_poll_event_init+0x6c>)
   23ad4:	f003 fd8d 	bl	275f2 <assert_print>
   23ad8:	4817      	ldr	r0, [pc, #92]	; (23b38 <k_poll_event_init+0x70>)
   23ada:	f003 fd8a 	bl	275f2 <assert_print>
   23ade:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   23ae0:	4813      	ldr	r0, [pc, #76]	; (23b30 <k_poll_event_init+0x68>)
   23ae2:	f003 fd7f 	bl	275e4 <assert_post_action>
   23ae6:	293f      	cmp	r1, #63	; 0x3f
   23ae8:	d90a      	bls.n	23b00 <k_poll_event_init+0x38>
   23aea:	4914      	ldr	r1, [pc, #80]	; (23b3c <k_poll_event_init+0x74>)
   23aec:	232f      	movs	r3, #47	; 0x2f
   23aee:	4a10      	ldr	r2, [pc, #64]	; (23b30 <k_poll_event_init+0x68>)
   23af0:	4810      	ldr	r0, [pc, #64]	; (23b34 <k_poll_event_init+0x6c>)
   23af2:	f003 fd7e 	bl	275f2 <assert_print>
   23af6:	4812      	ldr	r0, [pc, #72]	; (23b40 <k_poll_event_init+0x78>)
   23af8:	f003 fd7b 	bl	275f2 <assert_print>
   23afc:	212f      	movs	r1, #47	; 0x2f
   23afe:	e7ef      	b.n	23ae0 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   23b00:	b953      	cbnz	r3, 23b18 <k_poll_event_init+0x50>
   23b02:	4910      	ldr	r1, [pc, #64]	; (23b44 <k_poll_event_init+0x7c>)
   23b04:	2330      	movs	r3, #48	; 0x30
   23b06:	4a0a      	ldr	r2, [pc, #40]	; (23b30 <k_poll_event_init+0x68>)
   23b08:	480a      	ldr	r0, [pc, #40]	; (23b34 <k_poll_event_init+0x6c>)
   23b0a:	f003 fd72 	bl	275f2 <assert_print>
   23b0e:	480e      	ldr	r0, [pc, #56]	; (23b48 <k_poll_event_init+0x80>)
   23b10:	f003 fd6f 	bl	275f2 <assert_print>
   23b14:	2130      	movs	r1, #48	; 0x30
   23b16:	e7e3      	b.n	23ae0 <k_poll_event_init+0x18>
	event->poller = NULL;
   23b18:	6082      	str	r2, [r0, #8]
	event->type = type;
   23b1a:	0209      	lsls	r1, r1, #8
   23b1c:	7b02      	ldrb	r2, [r0, #12]
   23b1e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   23b22:	4311      	orrs	r1, r2
	event->obj = obj;
   23b24:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   23b28:	bd08      	pop	{r3, pc}
   23b2a:	bf00      	nop
   23b2c:	00033e1e 	.word	0x00033e1e
   23b30:	00033d06 	.word	0x00033d06
   23b34:	0002e715 	.word	0x0002e715
   23b38:	00033e3e 	.word	0x00033e3e
   23b3c:	00033e64 	.word	0x00033e64
   23b40:	00033e88 	.word	0x00033e88
   23b44:	00033e98 	.word	0x00033e98
   23b48:	00033eab 	.word	0x00033eab

00023b4c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   23b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b50:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   23b52:	4b5c      	ldr	r3, [pc, #368]	; (23cc4 <z_impl_k_poll+0x178>)
{
   23b54:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   23b56:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   23b5a:	2301      	movs	r3, #1
{
   23b5c:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   23b5e:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   23b62:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   23b66:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   23b6a:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   23b6e:	f1bb 0f00 	cmp.w	fp, #0
   23b72:	d00e      	beq.n	23b92 <z_impl_k_poll+0x46>
   23b74:	4954      	ldr	r1, [pc, #336]	; (23cc8 <z_impl_k_poll+0x17c>)
   23b76:	f240 132d 	movw	r3, #301	; 0x12d
   23b7a:	4a54      	ldr	r2, [pc, #336]	; (23ccc <z_impl_k_poll+0x180>)
   23b7c:	4854      	ldr	r0, [pc, #336]	; (23cd0 <z_impl_k_poll+0x184>)
   23b7e:	f003 fd38 	bl	275f2 <assert_print>
   23b82:	4854      	ldr	r0, [pc, #336]	; (23cd4 <z_impl_k_poll+0x188>)
   23b84:	f003 fd35 	bl	275f2 <assert_print>
   23b88:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   23b8c:	484f      	ldr	r0, [pc, #316]	; (23ccc <z_impl_k_poll+0x180>)
   23b8e:	f003 fd29 	bl	275e4 <assert_post_action>
   23b92:	b960      	cbnz	r0, 23bae <z_impl_k_poll+0x62>
   23b94:	4950      	ldr	r1, [pc, #320]	; (23cd8 <z_impl_k_poll+0x18c>)
   23b96:	f44f 7397 	mov.w	r3, #302	; 0x12e
   23b9a:	4a4c      	ldr	r2, [pc, #304]	; (23ccc <z_impl_k_poll+0x180>)
   23b9c:	484c      	ldr	r0, [pc, #304]	; (23cd0 <z_impl_k_poll+0x184>)
   23b9e:	f003 fd28 	bl	275f2 <assert_print>
   23ba2:	484e      	ldr	r0, [pc, #312]	; (23cdc <z_impl_k_poll+0x190>)
   23ba4:	f003 fd25 	bl	275f2 <assert_print>
   23ba8:	f44f 7197 	mov.w	r1, #302	; 0x12e
   23bac:	e7ee      	b.n	23b8c <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   23bae:	2900      	cmp	r1, #0
   23bb0:	da0c      	bge.n	23bcc <z_impl_k_poll+0x80>
   23bb2:	494b      	ldr	r1, [pc, #300]	; (23ce0 <z_impl_k_poll+0x194>)
   23bb4:	f240 132f 	movw	r3, #303	; 0x12f
   23bb8:	4a44      	ldr	r2, [pc, #272]	; (23ccc <z_impl_k_poll+0x180>)
   23bba:	4845      	ldr	r0, [pc, #276]	; (23cd0 <z_impl_k_poll+0x184>)
   23bbc:	f003 fd19 	bl	275f2 <assert_print>
   23bc0:	4848      	ldr	r0, [pc, #288]	; (23ce4 <z_impl_k_poll+0x198>)
   23bc2:	f003 fd16 	bl	275f2 <assert_print>
   23bc6:	f240 112f 	movw	r1, #303	; 0x12f
   23bca:	e7df      	b.n	23b8c <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   23bcc:	ea57 0306 	orrs.w	r3, r7, r6
   23bd0:	bf0c      	ite	eq
   23bd2:	2301      	moveq	r3, #1
   23bd4:	2300      	movne	r3, #0
   23bd6:	f7ff fda5 	bl	23724 <register_events>
   23bda:	4681      	mov	r9, r0
   23bdc:	f04f 0320 	mov.w	r3, #32
   23be0:	f3ef 8a11 	mrs	sl, BASEPRI
   23be4:	f383 8812 	msr	BASEPRI_MAX, r3
   23be8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bec:	483e      	ldr	r0, [pc, #248]	; (23ce8 <z_impl_k_poll+0x19c>)
   23bee:	f7fc fe83 	bl	208f8 <z_spin_lock_valid>
   23bf2:	b960      	cbnz	r0, 23c0e <z_impl_k_poll+0xc2>
   23bf4:	2394      	movs	r3, #148	; 0x94
   23bf6:	4a3d      	ldr	r2, [pc, #244]	; (23cec <z_impl_k_poll+0x1a0>)
   23bf8:	493d      	ldr	r1, [pc, #244]	; (23cf0 <z_impl_k_poll+0x1a4>)
   23bfa:	4835      	ldr	r0, [pc, #212]	; (23cd0 <z_impl_k_poll+0x184>)
   23bfc:	f003 fcf9 	bl	275f2 <assert_print>
   23c00:	4939      	ldr	r1, [pc, #228]	; (23ce8 <z_impl_k_poll+0x19c>)
   23c02:	483c      	ldr	r0, [pc, #240]	; (23cf4 <z_impl_k_poll+0x1a8>)
   23c04:	f003 fcf5 	bl	275f2 <assert_print>
   23c08:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c0a:	4838      	ldr	r0, [pc, #224]	; (23cec <z_impl_k_poll+0x1a0>)
   23c0c:	e7bf      	b.n	23b8e <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   23c0e:	4836      	ldr	r0, [pc, #216]	; (23ce8 <z_impl_k_poll+0x19c>)
   23c10:	f7fc fe8e 	bl	20930 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   23c14:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   23c18:	b9e4      	cbnz	r4, 23c54 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   23c1a:	4628      	mov	r0, r5
   23c1c:	4652      	mov	r2, sl
   23c1e:	4649      	mov	r1, r9
   23c20:	f7ff fe8e 	bl	23940 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c24:	4830      	ldr	r0, [pc, #192]	; (23ce8 <z_impl_k_poll+0x19c>)
   23c26:	f7fc fe75 	bl	20914 <z_spin_unlock_valid>
   23c2a:	b958      	cbnz	r0, 23c44 <z_impl_k_poll+0xf8>
   23c2c:	23c2      	movs	r3, #194	; 0xc2
   23c2e:	4a2f      	ldr	r2, [pc, #188]	; (23cec <z_impl_k_poll+0x1a0>)
   23c30:	4931      	ldr	r1, [pc, #196]	; (23cf8 <z_impl_k_poll+0x1ac>)
   23c32:	4827      	ldr	r0, [pc, #156]	; (23cd0 <z_impl_k_poll+0x184>)
   23c34:	f003 fcdd 	bl	275f2 <assert_print>
   23c38:	492b      	ldr	r1, [pc, #172]	; (23ce8 <z_impl_k_poll+0x19c>)
   23c3a:	4830      	ldr	r0, [pc, #192]	; (23cfc <z_impl_k_poll+0x1b0>)
   23c3c:	f003 fcd9 	bl	275f2 <assert_print>
   23c40:	21c2      	movs	r1, #194	; 0xc2
   23c42:	e7e2      	b.n	23c0a <z_impl_k_poll+0xbe>
	__asm__ volatile(
   23c44:	f38a 8811 	msr	BASEPRI, sl
   23c48:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   23c4c:	4620      	mov	r0, r4
   23c4e:	b003      	add	sp, #12
   23c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23c54:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   23c58:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23c5c:	d10b      	bne.n	23c76 <z_impl_k_poll+0x12a>
   23c5e:	4822      	ldr	r0, [pc, #136]	; (23ce8 <z_impl_k_poll+0x19c>)
   23c60:	f7fc fe58 	bl	20914 <z_spin_unlock_valid>
   23c64:	2800      	cmp	r0, #0
   23c66:	d0e1      	beq.n	23c2c <z_impl_k_poll+0xe0>
   23c68:	f38a 8811 	msr	BASEPRI, sl
   23c6c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   23c70:	f06f 040a 	mvn.w	r4, #10
   23c74:	e7ea      	b.n	23c4c <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23c76:	4651      	mov	r1, sl
   23c78:	e9cd 7600 	strd	r7, r6, [sp]
   23c7c:	4a20      	ldr	r2, [pc, #128]	; (23d00 <z_impl_k_poll+0x1b4>)
   23c7e:	481a      	ldr	r0, [pc, #104]	; (23ce8 <z_impl_k_poll+0x19c>)
   23c80:	f7fe fbd2 	bl	22428 <z_pend_curr>
   23c84:	4604      	mov	r4, r0
	__asm__ volatile(
   23c86:	f04f 0320 	mov.w	r3, #32
   23c8a:	f3ef 8611 	mrs	r6, BASEPRI
   23c8e:	f383 8812 	msr	BASEPRI_MAX, r3
   23c92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c96:	4814      	ldr	r0, [pc, #80]	; (23ce8 <z_impl_k_poll+0x19c>)
   23c98:	f7fc fe2e 	bl	208f8 <z_spin_lock_valid>
   23c9c:	2800      	cmp	r0, #0
   23c9e:	d0a9      	beq.n	23bf4 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   23ca0:	4811      	ldr	r0, [pc, #68]	; (23ce8 <z_impl_k_poll+0x19c>)
   23ca2:	f7fc fe45 	bl	20930 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   23ca6:	4628      	mov	r0, r5
   23ca8:	4632      	mov	r2, r6
   23caa:	4649      	mov	r1, r9
   23cac:	f7ff fe48 	bl	23940 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cb0:	480d      	ldr	r0, [pc, #52]	; (23ce8 <z_impl_k_poll+0x19c>)
   23cb2:	f7fc fe2f 	bl	20914 <z_spin_unlock_valid>
   23cb6:	2800      	cmp	r0, #0
   23cb8:	d0b8      	beq.n	23c2c <z_impl_k_poll+0xe0>
	__asm__ volatile(
   23cba:	f386 8811 	msr	BASEPRI, r6
   23cbe:	f3bf 8f6f 	isb	sy
	return swap_rc;
   23cc2:	e7c3      	b.n	23c4c <z_impl_k_poll+0x100>
   23cc4:	2002f720 	.word	0x2002f720
   23cc8:	0003388f 	.word	0x0003388f
   23ccc:	00033d06 	.word	0x00033d06
   23cd0:	0002e715 	.word	0x0002e715
   23cd4:	00032363 	.word	0x00032363
   23cd8:	00033ec5 	.word	0x00033ec5
   23cdc:	00033edb 	.word	0x00033edb
   23ce0:	00033eea 	.word	0x00033eea
   23ce4:	00033efa 	.word	0x00033efa
   23ce8:	2002f778 	.word	0x2002f778
   23cec:	0002f55d 	.word	0x0002f55d
   23cf0:	0002f5b6 	.word	0x0002f5b6
   23cf4:	0002f5cb 	.word	0x0002f5cb
   23cf8:	0002f58a 	.word	0x0002f58a
   23cfc:	0002f5a1 	.word	0x0002f5a1
   23d00:	20008794 	.word	0x20008794

00023d04 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   23d04:	b570      	push	{r4, r5, r6, lr}
   23d06:	4604      	mov	r4, r0
   23d08:	460d      	mov	r5, r1
	__asm__ volatile(
   23d0a:	f04f 0320 	mov.w	r3, #32
   23d0e:	f3ef 8611 	mrs	r6, BASEPRI
   23d12:	f383 8812 	msr	BASEPRI_MAX, r3
   23d16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d1a:	4820      	ldr	r0, [pc, #128]	; (23d9c <z_impl_k_poll_signal_raise+0x98>)
   23d1c:	f7fc fdec 	bl	208f8 <z_spin_lock_valid>
   23d20:	b968      	cbnz	r0, 23d3e <z_impl_k_poll_signal_raise+0x3a>
   23d22:	2394      	movs	r3, #148	; 0x94
   23d24:	4a1e      	ldr	r2, [pc, #120]	; (23da0 <z_impl_k_poll_signal_raise+0x9c>)
   23d26:	491f      	ldr	r1, [pc, #124]	; (23da4 <z_impl_k_poll_signal_raise+0xa0>)
   23d28:	481f      	ldr	r0, [pc, #124]	; (23da8 <z_impl_k_poll_signal_raise+0xa4>)
   23d2a:	f003 fc62 	bl	275f2 <assert_print>
   23d2e:	491b      	ldr	r1, [pc, #108]	; (23d9c <z_impl_k_poll_signal_raise+0x98>)
   23d30:	481e      	ldr	r0, [pc, #120]	; (23dac <z_impl_k_poll_signal_raise+0xa8>)
   23d32:	f003 fc5e 	bl	275f2 <assert_print>
   23d36:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d38:	4819      	ldr	r0, [pc, #100]	; (23da0 <z_impl_k_poll_signal_raise+0x9c>)
   23d3a:	f003 fc53 	bl	275e4 <assert_post_action>
	z_spin_lock_set_owner(l);
   23d3e:	4817      	ldr	r0, [pc, #92]	; (23d9c <z_impl_k_poll_signal_raise+0x98>)
   23d40:	f7fc fdf6 	bl	20930 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   23d44:	2101      	movs	r1, #1
	return list->head == list;
   23d46:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   23d48:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23d4a:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   23d4c:	60a1      	str	r1, [r4, #8]
   23d4e:	d10f      	bne.n	23d70 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d50:	4812      	ldr	r0, [pc, #72]	; (23d9c <z_impl_k_poll_signal_raise+0x98>)
   23d52:	f7fc fddf 	bl	20914 <z_spin_unlock_valid>
   23d56:	b9d8      	cbnz	r0, 23d90 <z_impl_k_poll_signal_raise+0x8c>
   23d58:	23c2      	movs	r3, #194	; 0xc2
   23d5a:	4a11      	ldr	r2, [pc, #68]	; (23da0 <z_impl_k_poll_signal_raise+0x9c>)
   23d5c:	4914      	ldr	r1, [pc, #80]	; (23db0 <z_impl_k_poll_signal_raise+0xac>)
   23d5e:	4812      	ldr	r0, [pc, #72]	; (23da8 <z_impl_k_poll_signal_raise+0xa4>)
   23d60:	f003 fc47 	bl	275f2 <assert_print>
   23d64:	490d      	ldr	r1, [pc, #52]	; (23d9c <z_impl_k_poll_signal_raise+0x98>)
   23d66:	4813      	ldr	r0, [pc, #76]	; (23db4 <z_impl_k_poll_signal_raise+0xb0>)
   23d68:	f003 fc43 	bl	275f2 <assert_print>
   23d6c:	21c2      	movs	r1, #194	; 0xc2
   23d6e:	e7e3      	b.n	23d38 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   23d70:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23d74:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23d76:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23d78:	2300      	movs	r3, #0
	node->prev = NULL;
   23d7a:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23d7e:	f008 f915 	bl	2bfac <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   23d82:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23d84:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   23d86:	4805      	ldr	r0, [pc, #20]	; (23d9c <z_impl_k_poll_signal_raise+0x98>)
   23d88:	f7fe f880 	bl	21e8c <z_reschedule>
	return rc;
}
   23d8c:	4620      	mov	r0, r4
   23d8e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   23d90:	f386 8811 	msr	BASEPRI, r6
   23d94:	f3bf 8f6f 	isb	sy
		return 0;
   23d98:	2400      	movs	r4, #0
   23d9a:	e7f7      	b.n	23d8c <z_impl_k_poll_signal_raise+0x88>
   23d9c:	2002f778 	.word	0x2002f778
   23da0:	0002f55d 	.word	0x0002f55d
   23da4:	0002f5b6 	.word	0x0002f5b6
   23da8:	0002e715 	.word	0x0002e715
   23dac:	0002f5cb 	.word	0x0002f5cb
   23db0:	0002f58a 	.word	0x0002f58a
   23db4:	0002f5a1 	.word	0x0002f5a1

00023db8 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   23db8:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   23dba:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   23dbe:	4606      	mov	r6, r0
   23dc0:	460d      	mov	r5, r1
   23dc2:	d220      	bcs.n	23e06 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   23dc4:	f04f 0800 	mov.w	r8, #0
   23dc8:	f04f 0900 	mov.w	r9, #0
   23dcc:	f041 0104 	orr.w	r1, r1, #4
   23dd0:	e9cd 8900 	strd	r8, r9, [sp]
   23dd4:	f7fc fa8c 	bl	202f0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   23dd8:	4604      	mov	r4, r0
   23dda:	b1a0      	cbz	r0, 23e06 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   23ddc:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   23de0:	b195      	cbz	r5, 23e08 <z_heap_aligned_alloc+0x50>
   23de2:	1e6b      	subs	r3, r5, #1
   23de4:	421c      	tst	r4, r3
   23de6:	d00f      	beq.n	23e08 <z_heap_aligned_alloc+0x50>
   23de8:	2325      	movs	r3, #37	; 0x25
   23dea:	4a09      	ldr	r2, [pc, #36]	; (23e10 <z_heap_aligned_alloc+0x58>)
   23dec:	4909      	ldr	r1, [pc, #36]	; (23e14 <z_heap_aligned_alloc+0x5c>)
   23dee:	480a      	ldr	r0, [pc, #40]	; (23e18 <z_heap_aligned_alloc+0x60>)
   23df0:	f003 fbff 	bl	275f2 <assert_print>
   23df4:	4621      	mov	r1, r4
   23df6:	4809      	ldr	r0, [pc, #36]	; (23e1c <z_heap_aligned_alloc+0x64>)
   23df8:	462a      	mov	r2, r5
   23dfa:	f003 fbfa 	bl	275f2 <assert_print>
   23dfe:	2125      	movs	r1, #37	; 0x25
   23e00:	4803      	ldr	r0, [pc, #12]	; (23e10 <z_heap_aligned_alloc+0x58>)
   23e02:	f003 fbef 	bl	275e4 <assert_post_action>
		return NULL;
   23e06:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   23e08:	4620      	mov	r0, r4
   23e0a:	b002      	add	sp, #8
   23e0c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   23e10:	00033f07 	.word	0x00033f07
   23e14:	00033f2b 	.word	0x00033f2b
   23e18:	0002e715 	.word	0x0002e715
   23e1c:	00033f5d 	.word	0x00033f5d

00023e20 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   23e20:	2803      	cmp	r0, #3
{
   23e22:	460a      	mov	r2, r1
   23e24:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   23e26:	d901      	bls.n	23e2c <k_aligned_alloc+0xc>
   23e28:	0783      	lsls	r3, r0, #30
   23e2a:	d00c      	beq.n	23e46 <k_aligned_alloc+0x26>
   23e2c:	4910      	ldr	r1, [pc, #64]	; (23e70 <k_aligned_alloc+0x50>)
   23e2e:	2342      	movs	r3, #66	; 0x42
   23e30:	4a10      	ldr	r2, [pc, #64]	; (23e74 <k_aligned_alloc+0x54>)
   23e32:	4811      	ldr	r0, [pc, #68]	; (23e78 <k_aligned_alloc+0x58>)
   23e34:	f003 fbdd 	bl	275f2 <assert_print>
   23e38:	4810      	ldr	r0, [pc, #64]	; (23e7c <k_aligned_alloc+0x5c>)
   23e3a:	f003 fbda 	bl	275f2 <assert_print>
   23e3e:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   23e40:	480c      	ldr	r0, [pc, #48]	; (23e74 <k_aligned_alloc+0x54>)
   23e42:	f003 fbcf 	bl	275e4 <assert_post_action>
   23e46:	1e43      	subs	r3, r0, #1
   23e48:	4203      	tst	r3, r0
   23e4a:	d00a      	beq.n	23e62 <k_aligned_alloc+0x42>
   23e4c:	490c      	ldr	r1, [pc, #48]	; (23e80 <k_aligned_alloc+0x60>)
   23e4e:	2346      	movs	r3, #70	; 0x46
   23e50:	4a08      	ldr	r2, [pc, #32]	; (23e74 <k_aligned_alloc+0x54>)
   23e52:	4809      	ldr	r0, [pc, #36]	; (23e78 <k_aligned_alloc+0x58>)
   23e54:	f003 fbcd 	bl	275f2 <assert_print>
   23e58:	480a      	ldr	r0, [pc, #40]	; (23e84 <k_aligned_alloc+0x64>)
   23e5a:	f003 fbca 	bl	275f2 <assert_print>
   23e5e:	2146      	movs	r1, #70	; 0x46
   23e60:	e7ee      	b.n	23e40 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   23e62:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   23e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   23e68:	4807      	ldr	r0, [pc, #28]	; (23e88 <k_aligned_alloc+0x68>)
   23e6a:	f7ff bfa5 	b.w	23db8 <z_heap_aligned_alloc>
   23e6e:	bf00      	nop
   23e70:	00033f85 	.word	0x00033f85
   23e74:	00033f07 	.word	0x00033f07
   23e78:	0002e715 	.word	0x0002e715
   23e7c:	00033fc2 	.word	0x00033fc2
   23e80:	0002f3c7 	.word	0x0002f3c7
   23e84:	0002f3e2 	.word	0x0002f3e2
   23e88:	20008acc 	.word	0x20008acc

00023e8c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   23e8c:	4b01      	ldr	r3, [pc, #4]	; (23e94 <k_thread_system_pool_assign+0x8>)
   23e8e:	6743      	str	r3, [r0, #116]	; 0x74
}
   23e90:	4770      	bx	lr
   23e92:	bf00      	nop
   23e94:	20008acc 	.word	0x20008acc

00023e98 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   23e98:	b538      	push	{r3, r4, r5, lr}
   23e9a:	4604      	mov	r4, r0
   23e9c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   23e9e:	f007 ff09 	bl	2bcb4 <k_is_in_isr>
   23ea2:	b920      	cbnz	r0, 23eae <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   23ea4:	4b06      	ldr	r3, [pc, #24]	; (23ec0 <z_thread_aligned_alloc+0x28>)
   23ea6:	689b      	ldr	r3, [r3, #8]
   23ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   23eaa:	b90b      	cbnz	r3, 23eb0 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   23eac:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   23eae:	4b05      	ldr	r3, [pc, #20]	; (23ec4 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   23eb0:	462a      	mov	r2, r5
   23eb2:	4621      	mov	r1, r4
   23eb4:	4618      	mov	r0, r3
}
   23eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   23eba:	f7ff bf7d 	b.w	23db8 <z_heap_aligned_alloc>
   23ebe:	bf00      	nop
   23ec0:	2002f720 	.word	0x2002f720
   23ec4:	20008acc 	.word	0x20008acc

00023ec8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   23ec8:	4801      	ldr	r0, [pc, #4]	; (23ed0 <boot_banner+0x8>)
   23eca:	f003 b9d0 	b.w	2726e <printk>
   23ece:	bf00      	nop
   23ed0:	00033fef 	.word	0x00033fef

00023ed4 <log>:
   23ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23ed6:	4604      	mov	r4, r0
   23ed8:	460d      	mov	r5, r1
   23eda:	f7e5 fd75 	bl	99c8 <__ieee754_log>
   23ede:	4b17      	ldr	r3, [pc, #92]	; (23f3c <log+0x68>)
   23ee0:	4606      	mov	r6, r0
   23ee2:	460f      	mov	r7, r1
   23ee4:	f993 3000 	ldrsb.w	r3, [r3]
   23ee8:	3301      	adds	r3, #1
   23eea:	d01a      	beq.n	23f22 <log+0x4e>
   23eec:	4622      	mov	r2, r4
   23eee:	462b      	mov	r3, r5
   23ef0:	4620      	mov	r0, r4
   23ef2:	4629      	mov	r1, r5
   23ef4:	f7e5 f8dc 	bl	90b0 <__aeabi_dcmpun>
   23ef8:	b998      	cbnz	r0, 23f22 <log+0x4e>
   23efa:	2200      	movs	r2, #0
   23efc:	2300      	movs	r3, #0
   23efe:	4620      	mov	r0, r4
   23f00:	4629      	mov	r1, r5
   23f02:	f7e5 f8ab 	bl	905c <__aeabi_dcmpgt>
   23f06:	b960      	cbnz	r0, 23f22 <log+0x4e>
   23f08:	2200      	movs	r2, #0
   23f0a:	2300      	movs	r3, #0
   23f0c:	4620      	mov	r0, r4
   23f0e:	4629      	mov	r1, r5
   23f10:	f7e5 f87c 	bl	900c <__aeabi_dcmpeq>
   23f14:	b140      	cbz	r0, 23f28 <log+0x54>
   23f16:	f004 fc21 	bl	2875c <__errno>
   23f1a:	2600      	movs	r6, #0
   23f1c:	2322      	movs	r3, #34	; 0x22
   23f1e:	4f08      	ldr	r7, [pc, #32]	; (23f40 <log+0x6c>)
   23f20:	6003      	str	r3, [r0, #0]
   23f22:	4630      	mov	r0, r6
   23f24:	4639      	mov	r1, r7
   23f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23f28:	f004 fc18 	bl	2875c <__errno>
   23f2c:	2321      	movs	r3, #33	; 0x21
   23f2e:	6003      	str	r3, [r0, #0]
   23f30:	4804      	ldr	r0, [pc, #16]	; (23f44 <log+0x70>)
   23f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23f36:	f000 b807 	b.w	23f48 <nan>
   23f3a:	bf00      	nop
   23f3c:	20008a4b 	.word	0x20008a4b
   23f40:	fff00000 	.word	0xfff00000
   23f44:	00032365 	.word	0x00032365

00023f48 <nan>:
   23f48:	2000      	movs	r0, #0
   23f4a:	4901      	ldr	r1, [pc, #4]	; (23f50 <nan+0x8>)
   23f4c:	4770      	bx	lr
   23f4e:	bf00      	nop
   23f50:	7ff80000 	.word	0x7ff80000

00023f54 <malloc>:
   23f54:	4b02      	ldr	r3, [pc, #8]	; (23f60 <malloc+0xc>)
   23f56:	4601      	mov	r1, r0
   23f58:	6818      	ldr	r0, [r3, #0]
   23f5a:	f000 bac5 	b.w	244e8 <_malloc_r>
   23f5e:	bf00      	nop
   23f60:	2000879c 	.word	0x2000879c

00023f64 <free>:
   23f64:	4b02      	ldr	r3, [pc, #8]	; (23f70 <free+0xc>)
   23f66:	4601      	mov	r1, r0
   23f68:	6818      	ldr	r0, [r3, #0]
   23f6a:	f000 ba73 	b.w	24454 <_free_r>
   23f6e:	bf00      	nop
   23f70:	2000879c 	.word	0x2000879c

00023f74 <validate_structure>:
   23f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23f76:	6801      	ldr	r1, [r0, #0]
   23f78:	4604      	mov	r4, r0
   23f7a:	293b      	cmp	r1, #59	; 0x3b
   23f7c:	d911      	bls.n	23fa2 <validate_structure+0x2e>
   23f7e:	223c      	movs	r2, #60	; 0x3c
   23f80:	4668      	mov	r0, sp
   23f82:	f008 faae 	bl	2c4e2 <div>
   23f86:	9a01      	ldr	r2, [sp, #4]
   23f88:	6863      	ldr	r3, [r4, #4]
   23f8a:	9900      	ldr	r1, [sp, #0]
   23f8c:	2a00      	cmp	r2, #0
   23f8e:	440b      	add	r3, r1
   23f90:	bfb4      	ite	lt
   23f92:	323c      	addlt	r2, #60	; 0x3c
   23f94:	6022      	strge	r2, [r4, #0]
   23f96:	6063      	str	r3, [r4, #4]
   23f98:	bfbe      	ittt	lt
   23f9a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   23f9e:	6022      	strlt	r2, [r4, #0]
   23fa0:	6063      	strlt	r3, [r4, #4]
   23fa2:	6861      	ldr	r1, [r4, #4]
   23fa4:	293b      	cmp	r1, #59	; 0x3b
   23fa6:	d911      	bls.n	23fcc <validate_structure+0x58>
   23fa8:	223c      	movs	r2, #60	; 0x3c
   23faa:	4668      	mov	r0, sp
   23fac:	f008 fa99 	bl	2c4e2 <div>
   23fb0:	9a01      	ldr	r2, [sp, #4]
   23fb2:	68a3      	ldr	r3, [r4, #8]
   23fb4:	9900      	ldr	r1, [sp, #0]
   23fb6:	2a00      	cmp	r2, #0
   23fb8:	440b      	add	r3, r1
   23fba:	bfb4      	ite	lt
   23fbc:	323c      	addlt	r2, #60	; 0x3c
   23fbe:	6062      	strge	r2, [r4, #4]
   23fc0:	60a3      	str	r3, [r4, #8]
   23fc2:	bfbe      	ittt	lt
   23fc4:	f103 33ff 	addlt.w	r3, r3, #4294967295
   23fc8:	6062      	strlt	r2, [r4, #4]
   23fca:	60a3      	strlt	r3, [r4, #8]
   23fcc:	68a1      	ldr	r1, [r4, #8]
   23fce:	2917      	cmp	r1, #23
   23fd0:	d911      	bls.n	23ff6 <validate_structure+0x82>
   23fd2:	2218      	movs	r2, #24
   23fd4:	4668      	mov	r0, sp
   23fd6:	f008 fa84 	bl	2c4e2 <div>
   23fda:	9a01      	ldr	r2, [sp, #4]
   23fdc:	68e3      	ldr	r3, [r4, #12]
   23fde:	9900      	ldr	r1, [sp, #0]
   23fe0:	2a00      	cmp	r2, #0
   23fe2:	440b      	add	r3, r1
   23fe4:	bfb4      	ite	lt
   23fe6:	3218      	addlt	r2, #24
   23fe8:	60a2      	strge	r2, [r4, #8]
   23fea:	60e3      	str	r3, [r4, #12]
   23fec:	bfbe      	ittt	lt
   23fee:	f103 33ff 	addlt.w	r3, r3, #4294967295
   23ff2:	60a2      	strlt	r2, [r4, #8]
   23ff4:	60e3      	strlt	r3, [r4, #12]
   23ff6:	6921      	ldr	r1, [r4, #16]
   23ff8:	290b      	cmp	r1, #11
   23ffa:	d911      	bls.n	24020 <validate_structure+0xac>
   23ffc:	220c      	movs	r2, #12
   23ffe:	4668      	mov	r0, sp
   24000:	f008 fa6f 	bl	2c4e2 <div>
   24004:	9a01      	ldr	r2, [sp, #4]
   24006:	6963      	ldr	r3, [r4, #20]
   24008:	9900      	ldr	r1, [sp, #0]
   2400a:	2a00      	cmp	r2, #0
   2400c:	440b      	add	r3, r1
   2400e:	bfb4      	ite	lt
   24010:	320c      	addlt	r2, #12
   24012:	6122      	strge	r2, [r4, #16]
   24014:	6163      	str	r3, [r4, #20]
   24016:	bfbe      	ittt	lt
   24018:	f103 33ff 	addlt.w	r3, r3, #4294967295
   2401c:	6122      	strlt	r2, [r4, #16]
   2401e:	6163      	strlt	r3, [r4, #20]
   24020:	6963      	ldr	r3, [r4, #20]
   24022:	079a      	lsls	r2, r3, #30
   24024:	d11c      	bne.n	24060 <validate_structure+0xec>
   24026:	2164      	movs	r1, #100	; 0x64
   24028:	fb93 f2f1 	sdiv	r2, r3, r1
   2402c:	fb01 3212 	mls	r2, r1, r2, r3
   24030:	b9c2      	cbnz	r2, 24064 <validate_structure+0xf0>
   24032:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   24036:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2403a:	fb93 f1f2 	sdiv	r1, r3, r2
   2403e:	fb02 3311 	mls	r3, r2, r1, r3
   24042:	2b00      	cmp	r3, #0
   24044:	bf14      	ite	ne
   24046:	231c      	movne	r3, #28
   24048:	231d      	moveq	r3, #29
   2404a:	68e2      	ldr	r2, [r4, #12]
   2404c:	2a00      	cmp	r2, #0
   2404e:	dc0b      	bgt.n	24068 <validate_structure+0xf4>
   24050:	200b      	movs	r0, #11
   24052:	2164      	movs	r1, #100	; 0x64
   24054:	4d33      	ldr	r5, [pc, #204]	; (24124 <validate_structure+0x1b0>)
   24056:	68e6      	ldr	r6, [r4, #12]
   24058:	2e00      	cmp	r6, #0
   2405a:	dd11      	ble.n	24080 <validate_structure+0x10c>
   2405c:	b003      	add	sp, #12
   2405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24060:	231c      	movs	r3, #28
   24062:	e7f2      	b.n	2404a <validate_structure+0xd6>
   24064:	231d      	movs	r3, #29
   24066:	e7f0      	b.n	2404a <validate_structure+0xd6>
   24068:	482e      	ldr	r0, [pc, #184]	; (24124 <validate_structure+0x1b0>)
   2406a:	2502      	movs	r5, #2
   2406c:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   24070:	2901      	cmp	r1, #1
   24072:	d132      	bne.n	240da <validate_structure+0x166>
   24074:	4293      	cmp	r3, r2
   24076:	daf1      	bge.n	2405c <validate_structure+0xe8>
   24078:	1ad2      	subs	r2, r2, r3
   2407a:	e9c4 2503 	strd	r2, r5, [r4, #12]
   2407e:	e7f5      	b.n	2406c <validate_structure+0xf8>
   24080:	6922      	ldr	r2, [r4, #16]
   24082:	3a01      	subs	r2, #1
   24084:	6122      	str	r2, [r4, #16]
   24086:	3201      	adds	r2, #1
   24088:	d116      	bne.n	240b8 <validate_structure+0x144>
   2408a:	6963      	ldr	r3, [r4, #20]
   2408c:	1e5a      	subs	r2, r3, #1
   2408e:	0797      	lsls	r7, r2, #30
   24090:	e9c4 0204 	strd	r0, r2, [r4, #16]
   24094:	d119      	bne.n	240ca <validate_structure+0x156>
   24096:	fb92 f7f1 	sdiv	r7, r2, r1
   2409a:	fb01 2217 	mls	r2, r1, r7, r2
   2409e:	b9b2      	cbnz	r2, 240ce <validate_structure+0x15a>
   240a0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   240a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   240a8:	fb93 f7f2 	sdiv	r7, r3, r2
   240ac:	fb02 3317 	mls	r3, r2, r7, r3
   240b0:	2b00      	cmp	r3, #0
   240b2:	bf14      	ite	ne
   240b4:	231c      	movne	r3, #28
   240b6:	231d      	moveq	r3, #29
   240b8:	6922      	ldr	r2, [r4, #16]
   240ba:	2a01      	cmp	r2, #1
   240bc:	bf14      	ite	ne
   240be:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
   240c2:	461a      	moveq	r2, r3
   240c4:	4432      	add	r2, r6
   240c6:	60e2      	str	r2, [r4, #12]
   240c8:	e7c5      	b.n	24056 <validate_structure+0xe2>
   240ca:	231c      	movs	r3, #28
   240cc:	e7f4      	b.n	240b8 <validate_structure+0x144>
   240ce:	231d      	movs	r3, #29
   240d0:	e7f2      	b.n	240b8 <validate_structure+0x144>
   240d2:	231c      	movs	r3, #28
   240d4:	e7ca      	b.n	2406c <validate_structure+0xf8>
   240d6:	231d      	movs	r3, #29
   240d8:	e7c8      	b.n	2406c <validate_structure+0xf8>
   240da:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
   240de:	42b2      	cmp	r2, r6
   240e0:	ddbc      	ble.n	2405c <validate_structure+0xe8>
   240e2:	3101      	adds	r1, #1
   240e4:	1b92      	subs	r2, r2, r6
   240e6:	290c      	cmp	r1, #12
   240e8:	60e2      	str	r2, [r4, #12]
   240ea:	6121      	str	r1, [r4, #16]
   240ec:	d1be      	bne.n	2406c <validate_structure+0xf8>
   240ee:	6963      	ldr	r3, [r4, #20]
   240f0:	2100      	movs	r1, #0
   240f2:	1c5a      	adds	r2, r3, #1
   240f4:	6121      	str	r1, [r4, #16]
   240f6:	0791      	lsls	r1, r2, #30
   240f8:	6162      	str	r2, [r4, #20]
   240fa:	d1ea      	bne.n	240d2 <validate_structure+0x15e>
   240fc:	2164      	movs	r1, #100	; 0x64
   240fe:	fb92 f6f1 	sdiv	r6, r2, r1
   24102:	fb01 2216 	mls	r2, r1, r6, r2
   24106:	2a00      	cmp	r2, #0
   24108:	d1e5      	bne.n	240d6 <validate_structure+0x162>
   2410a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   2410e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   24112:	fb93 f1f2 	sdiv	r1, r3, r2
   24116:	fb02 3311 	mls	r3, r2, r1, r3
   2411a:	2b00      	cmp	r3, #0
   2411c:	bf14      	ite	ne
   2411e:	231c      	movne	r3, #28
   24120:	231d      	moveq	r3, #29
   24122:	e7a3      	b.n	2406c <validate_structure+0xf8>
   24124:	0002e560 	.word	0x0002e560

00024128 <mktime>:
   24128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2412c:	4607      	mov	r7, r0
   2412e:	f001 fca9 	bl	25a84 <__gettzinfo>
   24132:	4682      	mov	sl, r0
   24134:	4638      	mov	r0, r7
   24136:	f7ff ff1d 	bl	23f74 <validate_structure>
   2413a:	223c      	movs	r2, #60	; 0x3c
   2413c:	697d      	ldr	r5, [r7, #20]
   2413e:	e9d7 4300 	ldrd	r4, r3, [r7]
   24142:	fb02 4403 	mla	r4, r2, r3, r4
   24146:	68bb      	ldr	r3, [r7, #8]
   24148:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   2414c:	fb02 4403 	mla	r4, r2, r3, r4
   24150:	4abd      	ldr	r2, [pc, #756]	; (24448 <mktime+0x320>)
   24152:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
   24156:	3e01      	subs	r6, #1
   24158:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   2415c:	2b01      	cmp	r3, #1
   2415e:	4416      	add	r6, r2
   24160:	dd11      	ble.n	24186 <mktime+0x5e>
   24162:	07a9      	lsls	r1, r5, #30
   24164:	d10f      	bne.n	24186 <mktime+0x5e>
   24166:	2264      	movs	r2, #100	; 0x64
   24168:	fb95 f3f2 	sdiv	r3, r5, r2
   2416c:	fb02 5313 	mls	r3, r2, r3, r5
   24170:	b943      	cbnz	r3, 24184 <mktime+0x5c>
   24172:	f205 736c 	addw	r3, r5, #1900	; 0x76c
   24176:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2417a:	fb93 f1f2 	sdiv	r1, r3, r2
   2417e:	fb02 3311 	mls	r3, r2, r1, r3
   24182:	b903      	cbnz	r3, 24186 <mktime+0x5e>
   24184:	3601      	adds	r6, #1
   24186:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
   2418a:	f644 6220 	movw	r2, #20000	; 0x4e20
   2418e:	61fe      	str	r6, [r7, #28]
   24190:	3310      	adds	r3, #16
   24192:	4293      	cmp	r3, r2
   24194:	f200 8154 	bhi.w	24440 <mktime+0x318>
   24198:	2d46      	cmp	r5, #70	; 0x46
   2419a:	f340 809f 	ble.w	242dc <mktime+0x1b4>
   2419e:	2346      	movs	r3, #70	; 0x46
   241a0:	f240 1c6d 	movw	ip, #365	; 0x16d
   241a4:	2164      	movs	r1, #100	; 0x64
   241a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
   241aa:	079a      	lsls	r2, r3, #30
   241ac:	f040 8090 	bne.w	242d0 <mktime+0x1a8>
   241b0:	fb93 f2f1 	sdiv	r2, r3, r1
   241b4:	fb01 3212 	mls	r2, r1, r2, r3
   241b8:	2a00      	cmp	r2, #0
   241ba:	f040 808c 	bne.w	242d6 <mktime+0x1ae>
   241be:	f203 726c 	addw	r2, r3, #1900	; 0x76c
   241c2:	fb92 fef0 	sdiv	lr, r2, r0
   241c6:	fb00 221e 	mls	r2, r0, lr, r2
   241ca:	2a00      	cmp	r2, #0
   241cc:	bf14      	ite	ne
   241ce:	4662      	movne	r2, ip
   241d0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   241d4:	3301      	adds	r3, #1
   241d6:	4416      	add	r6, r2
   241d8:	429d      	cmp	r5, r3
   241da:	d1e6      	bne.n	241aa <mktime+0x82>
   241dc:	4b9b      	ldr	r3, [pc, #620]	; (2444c <mktime+0x324>)
   241de:	ea4f 78e4 	mov.w	r8, r4, asr #31
   241e2:	fbc6 4803 	smlal	r4, r8, r6, r3
   241e6:	f000 ff51 	bl	2508c <__tz_lock>
   241ea:	f000 ff5b 	bl	250a4 <_tzset_unlocked>
   241ee:	4b98      	ldr	r3, [pc, #608]	; (24450 <mktime+0x328>)
   241f0:	681b      	ldr	r3, [r3, #0]
   241f2:	2b00      	cmp	r3, #0
   241f4:	f000 811a 	beq.w	2442c <mktime+0x304>
   241f8:	6978      	ldr	r0, [r7, #20]
   241fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   241fe:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   24202:	f8d7 9020 	ldr.w	r9, [r7, #32]
   24206:	4283      	cmp	r3, r0
   24208:	f040 80ab 	bne.w	24362 <mktime+0x23a>
   2420c:	f8da 0050 	ldr.w	r0, [sl, #80]	; 0x50
   24210:	f8da c028 	ldr.w	ip, [sl, #40]	; 0x28
   24214:	e9da 2308 	ldrd	r2, r3, [sl, #32]
   24218:	e9da 1b12 	ldrd	r1, fp, [sl, #72]	; 0x48
   2421c:	1a12      	subs	r2, r2, r0
   2421e:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
   24222:	ebb1 0e0c 	subs.w	lr, r1, ip
   24226:	f8cd e000 	str.w	lr, [sp]
   2422a:	eb6b 7eec 	sbc.w	lr, fp, ip, asr #31
   2422e:	f8cd e004 	str.w	lr, [sp, #4]
   24232:	f8dd e000 	ldr.w	lr, [sp]
   24236:	4574      	cmp	r4, lr
   24238:	f8dd e004 	ldr.w	lr, [sp, #4]
   2423c:	eb78 0e0e 	sbcs.w	lr, r8, lr
   24240:	f280 80b5 	bge.w	243ae <mktime+0x286>
   24244:	f8da 1000 	ldr.w	r1, [sl]
   24248:	b121      	cbz	r1, 24254 <mktime+0x12c>
   2424a:	4294      	cmp	r4, r2
   2424c:	eb78 0303 	sbcs.w	r3, r8, r3
   24250:	f2c0 80bb 	blt.w	243ca <mktime+0x2a2>
   24254:	f1b9 0f00 	cmp.w	r9, #0
   24258:	f040 8090 	bne.w	2437c <mktime+0x254>
   2425c:	ebac 0000 	sub.w	r0, ip, r0
   24260:	f04f 0901 	mov.w	r9, #1
   24264:	683b      	ldr	r3, [r7, #0]
   24266:	1904      	adds	r4, r0, r4
   24268:	f8d7 b00c 	ldr.w	fp, [r7, #12]
   2426c:	4403      	add	r3, r0
   2426e:	eb48 78e0 	adc.w	r8, r8, r0, asr #31
   24272:	4638      	mov	r0, r7
   24274:	603b      	str	r3, [r7, #0]
   24276:	f7ff fe7d 	bl	23f74 <validate_structure>
   2427a:	68fa      	ldr	r2, [r7, #12]
   2427c:	ebb2 020b 	subs.w	r2, r2, fp
   24280:	d079      	beq.n	24376 <mktime+0x24e>
   24282:	2a01      	cmp	r2, #1
   24284:	f300 80a9 	bgt.w	243da <mktime+0x2b2>
   24288:	1c93      	adds	r3, r2, #2
   2428a:	bfd8      	it	le
   2428c:	2201      	movle	r2, #1
   2428e:	69fb      	ldr	r3, [r7, #28]
   24290:	18d3      	adds	r3, r2, r3
   24292:	f140 80ab 	bpl.w	243ec <mktime+0x2c4>
   24296:	1e6b      	subs	r3, r5, #1
   24298:	0798      	lsls	r0, r3, #30
   2429a:	f040 80a1 	bne.w	243e0 <mktime+0x2b8>
   2429e:	2164      	movs	r1, #100	; 0x64
   242a0:	fb93 f0f1 	sdiv	r0, r3, r1
   242a4:	fb01 3310 	mls	r3, r1, r0, r3
   242a8:	2b00      	cmp	r3, #0
   242aa:	f040 809c 	bne.w	243e6 <mktime+0x2be>
   242ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
   242b2:	f205 756b 	addw	r5, r5, #1899	; 0x76b
   242b6:	fb95 f1f3 	sdiv	r1, r5, r3
   242ba:	fb03 5511 	mls	r5, r3, r1, r5
   242be:	f240 136d 	movw	r3, #365	; 0x16d
   242c2:	2d00      	cmp	r5, #0
   242c4:	bf18      	it	ne
   242c6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   242ca:	4416      	add	r6, r2
   242cc:	61fb      	str	r3, [r7, #28]
   242ce:	e052      	b.n	24376 <mktime+0x24e>
   242d0:	f240 126d 	movw	r2, #365	; 0x16d
   242d4:	e77e      	b.n	241d4 <mktime+0xac>
   242d6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   242da:	e77b      	b.n	241d4 <mktime+0xac>
   242dc:	f43f af7e 	beq.w	241dc <mktime+0xb4>
   242e0:	2345      	movs	r3, #69	; 0x45
   242e2:	f240 1c6d 	movw	ip, #365	; 0x16d
   242e6:	2164      	movs	r1, #100	; 0x64
   242e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   242ec:	e012      	b.n	24314 <mktime+0x1ec>
   242ee:	bb62      	cbnz	r2, 2434a <mktime+0x222>
   242f0:	fb93 f2f1 	sdiv	r2, r3, r1
   242f4:	fb01 3212 	mls	r2, r1, r2, r3
   242f8:	bb52      	cbnz	r2, 24350 <mktime+0x228>
   242fa:	f203 726c 	addw	r2, r3, #1900	; 0x76c
   242fe:	fb92 fef0 	sdiv	lr, r2, r0
   24302:	fb00 221e 	mls	r2, r0, lr, r2
   24306:	2a00      	cmp	r2, #0
   24308:	bf14      	ite	ne
   2430a:	4662      	movne	r2, ip
   2430c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   24310:	1ab6      	subs	r6, r6, r2
   24312:	3b01      	subs	r3, #1
   24314:	429d      	cmp	r5, r3
   24316:	f003 0203 	and.w	r2, r3, #3
   2431a:	dbe8      	blt.n	242ee <mktime+0x1c6>
   2431c:	b9da      	cbnz	r2, 24356 <mktime+0x22e>
   2431e:	2264      	movs	r2, #100	; 0x64
   24320:	fb95 f3f2 	sdiv	r3, r5, r2
   24324:	fb02 5313 	mls	r3, r2, r3, r5
   24328:	b9c3      	cbnz	r3, 2435c <mktime+0x234>
   2432a:	f205 736c 	addw	r3, r5, #1900	; 0x76c
   2432e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   24332:	fb93 f1f2 	sdiv	r1, r3, r2
   24336:	fb02 3311 	mls	r3, r2, r1, r3
   2433a:	2b00      	cmp	r3, #0
   2433c:	f240 136d 	movw	r3, #365	; 0x16d
   24340:	bf08      	it	eq
   24342:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   24346:	1af6      	subs	r6, r6, r3
   24348:	e748      	b.n	241dc <mktime+0xb4>
   2434a:	f240 126d 	movw	r2, #365	; 0x16d
   2434e:	e7df      	b.n	24310 <mktime+0x1e8>
   24350:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   24354:	e7dc      	b.n	24310 <mktime+0x1e8>
   24356:	f240 136d 	movw	r3, #365	; 0x16d
   2435a:	e7f4      	b.n	24346 <mktime+0x21e>
   2435c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   24360:	e7f1      	b.n	24346 <mktime+0x21e>
   24362:	f000 fdeb 	bl	24f3c <__tzcalc_limits>
   24366:	2800      	cmp	r0, #0
   24368:	f47f af50 	bne.w	2420c <mktime+0xe4>
   2436c:	f1b9 0f01 	cmp.w	r9, #1
   24370:	bfa8      	it	ge
   24372:	f04f 0901 	movge.w	r9, #1
   24376:	f1b9 0f01 	cmp.w	r9, #1
   2437a:	d159      	bne.n	24430 <mktime+0x308>
   2437c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
   24380:	f04f 0901 	mov.w	r9, #1
   24384:	191c      	adds	r4, r3, r4
   24386:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
   2438a:	f000 fe85 	bl	25098 <__tz_unlock>
   2438e:	3604      	adds	r6, #4
   24390:	2307      	movs	r3, #7
   24392:	fb96 f3f3 	sdiv	r3, r6, r3
   24396:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2439a:	1af6      	subs	r6, r6, r3
   2439c:	d44e      	bmi.n	2443c <mktime+0x314>
   2439e:	f8c7 9020 	str.w	r9, [r7, #32]
   243a2:	61be      	str	r6, [r7, #24]
   243a4:	4620      	mov	r0, r4
   243a6:	4641      	mov	r1, r8
   243a8:	b003      	add	sp, #12
   243aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243ae:	1a09      	subs	r1, r1, r0
   243b0:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   243b4:	eb6b 0e0e 	sbc.w	lr, fp, lr
   243b8:	428c      	cmp	r4, r1
   243ba:	eb78 0e0e 	sbcs.w	lr, r8, lr
   243be:	dbd5      	blt.n	2436c <mktime+0x244>
   243c0:	f8da 1000 	ldr.w	r1, [sl]
   243c4:	2900      	cmp	r1, #0
   243c6:	f43f af40 	beq.w	2424a <mktime+0x122>
   243ca:	f1b9 0f00 	cmp.w	r9, #0
   243ce:	dd2d      	ble.n	2442c <mktime+0x304>
   243d0:	eba0 000c 	sub.w	r0, r0, ip
   243d4:	f04f 0900 	mov.w	r9, #0
   243d8:	e744      	b.n	24264 <mktime+0x13c>
   243da:	f04f 32ff 	mov.w	r2, #4294967295
   243de:	e756      	b.n	2428e <mktime+0x166>
   243e0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   243e4:	e771      	b.n	242ca <mktime+0x1a2>
   243e6:	f240 136d 	movw	r3, #365	; 0x16d
   243ea:	e76e      	b.n	242ca <mktime+0x1a2>
   243ec:	07a9      	lsls	r1, r5, #30
   243ee:	d117      	bne.n	24420 <mktime+0x2f8>
   243f0:	2064      	movs	r0, #100	; 0x64
   243f2:	fb95 f1f0 	sdiv	r1, r5, r0
   243f6:	fb00 5111 	mls	r1, r0, r1, r5
   243fa:	b9a1      	cbnz	r1, 24426 <mktime+0x2fe>
   243fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
   24400:	f205 756c 	addw	r5, r5, #1900	; 0x76c
   24404:	fb95 f0f1 	sdiv	r0, r5, r1
   24408:	fb01 5510 	mls	r5, r1, r0, r5
   2440c:	f240 116d 	movw	r1, #365	; 0x16d
   24410:	2d00      	cmp	r5, #0
   24412:	bf08      	it	eq
   24414:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
   24418:	428b      	cmp	r3, r1
   2441a:	bfa8      	it	ge
   2441c:	1a5b      	subge	r3, r3, r1
   2441e:	e754      	b.n	242ca <mktime+0x1a2>
   24420:	f240 116d 	movw	r1, #365	; 0x16d
   24424:	e7f8      	b.n	24418 <mktime+0x2f0>
   24426:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   2442a:	e7f5      	b.n	24418 <mktime+0x2f0>
   2442c:	f04f 0900 	mov.w	r9, #0
   24430:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   24434:	191c      	adds	r4, r3, r4
   24436:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
   2443a:	e7a6      	b.n	2438a <mktime+0x262>
   2443c:	3607      	adds	r6, #7
   2443e:	e7ae      	b.n	2439e <mktime+0x276>
   24440:	f04f 34ff 	mov.w	r4, #4294967295
   24444:	46a0      	mov	r8, r4
   24446:	e7ad      	b.n	243a4 <mktime+0x27c>
   24448:	0002e530 	.word	0x0002e530
   2444c:	00015180 	.word	0x00015180
   24450:	2002f78c 	.word	0x2002f78c

00024454 <_free_r>:
   24454:	b538      	push	{r3, r4, r5, lr}
   24456:	4605      	mov	r5, r0
   24458:	2900      	cmp	r1, #0
   2445a:	d041      	beq.n	244e0 <_free_r+0x8c>
   2445c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   24460:	1f0c      	subs	r4, r1, #4
   24462:	2b00      	cmp	r3, #0
   24464:	bfb8      	it	lt
   24466:	18e4      	addlt	r4, r4, r3
   24468:	f001 fb14 	bl	25a94 <__malloc_lock>
   2446c:	4a1d      	ldr	r2, [pc, #116]	; (244e4 <_free_r+0x90>)
   2446e:	6813      	ldr	r3, [r2, #0]
   24470:	b933      	cbnz	r3, 24480 <_free_r+0x2c>
   24472:	6063      	str	r3, [r4, #4]
   24474:	6014      	str	r4, [r2, #0]
   24476:	4628      	mov	r0, r5
   24478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2447c:	f001 bb10 	b.w	25aa0 <__malloc_unlock>
   24480:	42a3      	cmp	r3, r4
   24482:	d908      	bls.n	24496 <_free_r+0x42>
   24484:	6820      	ldr	r0, [r4, #0]
   24486:	1821      	adds	r1, r4, r0
   24488:	428b      	cmp	r3, r1
   2448a:	bf01      	itttt	eq
   2448c:	6819      	ldreq	r1, [r3, #0]
   2448e:	685b      	ldreq	r3, [r3, #4]
   24490:	1809      	addeq	r1, r1, r0
   24492:	6021      	streq	r1, [r4, #0]
   24494:	e7ed      	b.n	24472 <_free_r+0x1e>
   24496:	461a      	mov	r2, r3
   24498:	685b      	ldr	r3, [r3, #4]
   2449a:	b10b      	cbz	r3, 244a0 <_free_r+0x4c>
   2449c:	42a3      	cmp	r3, r4
   2449e:	d9fa      	bls.n	24496 <_free_r+0x42>
   244a0:	6811      	ldr	r1, [r2, #0]
   244a2:	1850      	adds	r0, r2, r1
   244a4:	42a0      	cmp	r0, r4
   244a6:	d10b      	bne.n	244c0 <_free_r+0x6c>
   244a8:	6820      	ldr	r0, [r4, #0]
   244aa:	4401      	add	r1, r0
   244ac:	1850      	adds	r0, r2, r1
   244ae:	6011      	str	r1, [r2, #0]
   244b0:	4283      	cmp	r3, r0
   244b2:	d1e0      	bne.n	24476 <_free_r+0x22>
   244b4:	6818      	ldr	r0, [r3, #0]
   244b6:	685b      	ldr	r3, [r3, #4]
   244b8:	4408      	add	r0, r1
   244ba:	6053      	str	r3, [r2, #4]
   244bc:	6010      	str	r0, [r2, #0]
   244be:	e7da      	b.n	24476 <_free_r+0x22>
   244c0:	d902      	bls.n	244c8 <_free_r+0x74>
   244c2:	230c      	movs	r3, #12
   244c4:	602b      	str	r3, [r5, #0]
   244c6:	e7d6      	b.n	24476 <_free_r+0x22>
   244c8:	6820      	ldr	r0, [r4, #0]
   244ca:	1821      	adds	r1, r4, r0
   244cc:	428b      	cmp	r3, r1
   244ce:	bf02      	ittt	eq
   244d0:	6819      	ldreq	r1, [r3, #0]
   244d2:	685b      	ldreq	r3, [r3, #4]
   244d4:	1809      	addeq	r1, r1, r0
   244d6:	6063      	str	r3, [r4, #4]
   244d8:	bf08      	it	eq
   244da:	6021      	streq	r1, [r4, #0]
   244dc:	6054      	str	r4, [r2, #4]
   244de:	e7ca      	b.n	24476 <_free_r+0x22>
   244e0:	bd38      	pop	{r3, r4, r5, pc}
   244e2:	bf00      	nop
   244e4:	2002f780 	.word	0x2002f780

000244e8 <_malloc_r>:
   244e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   244ea:	1ccd      	adds	r5, r1, #3
   244ec:	4606      	mov	r6, r0
   244ee:	f025 0503 	bic.w	r5, r5, #3
   244f2:	3508      	adds	r5, #8
   244f4:	2d0c      	cmp	r5, #12
   244f6:	bf38      	it	cc
   244f8:	250c      	movcc	r5, #12
   244fa:	2d00      	cmp	r5, #0
   244fc:	db01      	blt.n	24502 <_malloc_r+0x1a>
   244fe:	42a9      	cmp	r1, r5
   24500:	d903      	bls.n	2450a <_malloc_r+0x22>
   24502:	230c      	movs	r3, #12
   24504:	6033      	str	r3, [r6, #0]
   24506:	2000      	movs	r0, #0
   24508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2450a:	f001 fac3 	bl	25a94 <__malloc_lock>
   2450e:	4921      	ldr	r1, [pc, #132]	; (24594 <_malloc_r+0xac>)
   24510:	680a      	ldr	r2, [r1, #0]
   24512:	4614      	mov	r4, r2
   24514:	b99c      	cbnz	r4, 2453e <_malloc_r+0x56>
   24516:	4f20      	ldr	r7, [pc, #128]	; (24598 <_malloc_r+0xb0>)
   24518:	683b      	ldr	r3, [r7, #0]
   2451a:	b923      	cbnz	r3, 24526 <_malloc_r+0x3e>
   2451c:	4621      	mov	r1, r4
   2451e:	4630      	mov	r0, r6
   24520:	f000 fbb8 	bl	24c94 <_sbrk_r>
   24524:	6038      	str	r0, [r7, #0]
   24526:	4629      	mov	r1, r5
   24528:	4630      	mov	r0, r6
   2452a:	f000 fbb3 	bl	24c94 <_sbrk_r>
   2452e:	1c43      	adds	r3, r0, #1
   24530:	d123      	bne.n	2457a <_malloc_r+0x92>
   24532:	230c      	movs	r3, #12
   24534:	4630      	mov	r0, r6
   24536:	6033      	str	r3, [r6, #0]
   24538:	f001 fab2 	bl	25aa0 <__malloc_unlock>
   2453c:	e7e3      	b.n	24506 <_malloc_r+0x1e>
   2453e:	6823      	ldr	r3, [r4, #0]
   24540:	1b5b      	subs	r3, r3, r5
   24542:	d417      	bmi.n	24574 <_malloc_r+0x8c>
   24544:	2b0b      	cmp	r3, #11
   24546:	d903      	bls.n	24550 <_malloc_r+0x68>
   24548:	6023      	str	r3, [r4, #0]
   2454a:	441c      	add	r4, r3
   2454c:	6025      	str	r5, [r4, #0]
   2454e:	e004      	b.n	2455a <_malloc_r+0x72>
   24550:	6863      	ldr	r3, [r4, #4]
   24552:	42a2      	cmp	r2, r4
   24554:	bf0c      	ite	eq
   24556:	600b      	streq	r3, [r1, #0]
   24558:	6053      	strne	r3, [r2, #4]
   2455a:	4630      	mov	r0, r6
   2455c:	f001 faa0 	bl	25aa0 <__malloc_unlock>
   24560:	f104 000b 	add.w	r0, r4, #11
   24564:	1d23      	adds	r3, r4, #4
   24566:	f020 0007 	bic.w	r0, r0, #7
   2456a:	1ac2      	subs	r2, r0, r3
   2456c:	bf1c      	itt	ne
   2456e:	1a1b      	subne	r3, r3, r0
   24570:	50a3      	strne	r3, [r4, r2]
   24572:	e7c9      	b.n	24508 <_malloc_r+0x20>
   24574:	4622      	mov	r2, r4
   24576:	6864      	ldr	r4, [r4, #4]
   24578:	e7cc      	b.n	24514 <_malloc_r+0x2c>
   2457a:	1cc4      	adds	r4, r0, #3
   2457c:	f024 0403 	bic.w	r4, r4, #3
   24580:	42a0      	cmp	r0, r4
   24582:	d0e3      	beq.n	2454c <_malloc_r+0x64>
   24584:	1a21      	subs	r1, r4, r0
   24586:	4630      	mov	r0, r6
   24588:	f000 fb84 	bl	24c94 <_sbrk_r>
   2458c:	3001      	adds	r0, #1
   2458e:	d1dd      	bne.n	2454c <_malloc_r+0x64>
   24590:	e7cf      	b.n	24532 <_malloc_r+0x4a>
   24592:	bf00      	nop
   24594:	2002f780 	.word	0x2002f780
   24598:	2002f77c 	.word	0x2002f77c

0002459c <_printf_float>:
   2459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   245a0:	b091      	sub	sp, #68	; 0x44
   245a2:	460c      	mov	r4, r1
   245a4:	4616      	mov	r6, r2
   245a6:	461f      	mov	r7, r3
   245a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   245ac:	4605      	mov	r5, r0
   245ae:	f001 fa6d 	bl	25a8c <_localeconv_r>
   245b2:	6803      	ldr	r3, [r0, #0]
   245b4:	4618      	mov	r0, r3
   245b6:	9308      	str	r3, [sp, #32]
   245b8:	f7e4 ff27 	bl	940a <strlen>
   245bc:	2300      	movs	r3, #0
   245be:	9009      	str	r0, [sp, #36]	; 0x24
   245c0:	930e      	str	r3, [sp, #56]	; 0x38
   245c2:	f8d8 3000 	ldr.w	r3, [r8]
   245c6:	f894 a018 	ldrb.w	sl, [r4, #24]
   245ca:	3307      	adds	r3, #7
   245cc:	f8d4 b000 	ldr.w	fp, [r4]
   245d0:	f023 0307 	bic.w	r3, r3, #7
   245d4:	f103 0208 	add.w	r2, r3, #8
   245d8:	f8c8 2000 	str.w	r2, [r8]
   245dc:	f04f 32ff 	mov.w	r2, #4294967295
   245e0:	e9d3 8900 	ldrd	r8, r9, [r3]
   245e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   245e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   245ec:	930b      	str	r3, [sp, #44]	; 0x2c
   245ee:	4b9d      	ldr	r3, [pc, #628]	; (24864 <_printf_float+0x2c8>)
   245f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   245f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   245f8:	f7e4 fd5a 	bl	90b0 <__aeabi_dcmpun>
   245fc:	bb70      	cbnz	r0, 2465c <_printf_float+0xc0>
   245fe:	f04f 32ff 	mov.w	r2, #4294967295
   24602:	4b98      	ldr	r3, [pc, #608]	; (24864 <_printf_float+0x2c8>)
   24604:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   24608:	f7e4 fd14 	bl	9034 <__aeabi_dcmple>
   2460c:	bb30      	cbnz	r0, 2465c <_printf_float+0xc0>
   2460e:	2200      	movs	r2, #0
   24610:	2300      	movs	r3, #0
   24612:	4640      	mov	r0, r8
   24614:	4649      	mov	r1, r9
   24616:	f7e4 fd03 	bl	9020 <__aeabi_dcmplt>
   2461a:	b110      	cbz	r0, 24622 <_printf_float+0x86>
   2461c:	232d      	movs	r3, #45	; 0x2d
   2461e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   24622:	4a91      	ldr	r2, [pc, #580]	; (24868 <_printf_float+0x2cc>)
   24624:	4b91      	ldr	r3, [pc, #580]	; (2486c <_printf_float+0x2d0>)
   24626:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2462a:	bf94      	ite	ls
   2462c:	4690      	movls	r8, r2
   2462e:	4698      	movhi	r8, r3
   24630:	2303      	movs	r3, #3
   24632:	f04f 0900 	mov.w	r9, #0
   24636:	6123      	str	r3, [r4, #16]
   24638:	f02b 0304 	bic.w	r3, fp, #4
   2463c:	6023      	str	r3, [r4, #0]
   2463e:	4633      	mov	r3, r6
   24640:	aa0f      	add	r2, sp, #60	; 0x3c
   24642:	4621      	mov	r1, r4
   24644:	4628      	mov	r0, r5
   24646:	9700      	str	r7, [sp, #0]
   24648:	f007 fe30 	bl	2c2ac <_printf_common>
   2464c:	3001      	adds	r0, #1
   2464e:	f040 8099 	bne.w	24784 <_printf_float+0x1e8>
   24652:	f04f 30ff 	mov.w	r0, #4294967295
   24656:	b011      	add	sp, #68	; 0x44
   24658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2465c:	4642      	mov	r2, r8
   2465e:	464b      	mov	r3, r9
   24660:	4640      	mov	r0, r8
   24662:	4649      	mov	r1, r9
   24664:	f7e4 fd24 	bl	90b0 <__aeabi_dcmpun>
   24668:	b140      	cbz	r0, 2467c <_printf_float+0xe0>
   2466a:	464b      	mov	r3, r9
   2466c:	4a80      	ldr	r2, [pc, #512]	; (24870 <_printf_float+0x2d4>)
   2466e:	2b00      	cmp	r3, #0
   24670:	bfbc      	itt	lt
   24672:	232d      	movlt	r3, #45	; 0x2d
   24674:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   24678:	4b7e      	ldr	r3, [pc, #504]	; (24874 <_printf_float+0x2d8>)
   2467a:	e7d4      	b.n	24626 <_printf_float+0x8a>
   2467c:	6863      	ldr	r3, [r4, #4]
   2467e:	1c5a      	adds	r2, r3, #1
   24680:	d129      	bne.n	246d6 <_printf_float+0x13a>
   24682:	2306      	movs	r3, #6
   24684:	6063      	str	r3, [r4, #4]
   24686:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2468a:	2200      	movs	r2, #0
   2468c:	4628      	mov	r0, r5
   2468e:	6023      	str	r3, [r4, #0]
   24690:	9206      	str	r2, [sp, #24]
   24692:	aa0e      	add	r2, sp, #56	; 0x38
   24694:	e9cd a204 	strd	sl, r2, [sp, #16]
   24698:	aa0d      	add	r2, sp, #52	; 0x34
   2469a:	9203      	str	r2, [sp, #12]
   2469c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   246a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   246a4:	6863      	ldr	r3, [r4, #4]
   246a6:	4642      	mov	r2, r8
   246a8:	9300      	str	r3, [sp, #0]
   246aa:	464b      	mov	r3, r9
   246ac:	f007 fd5e 	bl	2c16c <__cvt>
   246b0:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   246b4:	4680      	mov	r8, r0
   246b6:	990d      	ldr	r1, [sp, #52]	; 0x34
   246b8:	d115      	bne.n	246e6 <_printf_float+0x14a>
   246ba:	1ccb      	adds	r3, r1, #3
   246bc:	db3b      	blt.n	24736 <_printf_float+0x19a>
   246be:	6863      	ldr	r3, [r4, #4]
   246c0:	4299      	cmp	r1, r3
   246c2:	dc38      	bgt.n	24736 <_printf_float+0x19a>
   246c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   246c6:	4299      	cmp	r1, r3
   246c8:	db55      	blt.n	24776 <_printf_float+0x1da>
   246ca:	6823      	ldr	r3, [r4, #0]
   246cc:	6121      	str	r1, [r4, #16]
   246ce:	07d8      	lsls	r0, r3, #31
   246d0:	d545      	bpl.n	2475e <_printf_float+0x1c2>
   246d2:	1c4b      	adds	r3, r1, #1
   246d4:	e042      	b.n	2475c <_printf_float+0x1c0>
   246d6:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   246da:	2a47      	cmp	r2, #71	; 0x47
   246dc:	d1d3      	bne.n	24686 <_printf_float+0xea>
   246de:	2b00      	cmp	r3, #0
   246e0:	d1d1      	bne.n	24686 <_printf_float+0xea>
   246e2:	2301      	movs	r3, #1
   246e4:	e7ce      	b.n	24684 <_printf_float+0xe8>
   246e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   246ea:	d107      	bne.n	246fc <_printf_float+0x160>
   246ec:	1cc8      	adds	r0, r1, #3
   246ee:	db25      	blt.n	2473c <_printf_float+0x1a0>
   246f0:	6863      	ldr	r3, [r4, #4]
   246f2:	428b      	cmp	r3, r1
   246f4:	db22      	blt.n	2473c <_printf_float+0x1a0>
   246f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
   246fa:	e7e3      	b.n	246c4 <_printf_float+0x128>
   246fc:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   24700:	d81f      	bhi.n	24742 <_printf_float+0x1a6>
   24702:	3901      	subs	r1, #1
   24704:	4652      	mov	r2, sl
   24706:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2470a:	910d      	str	r1, [sp, #52]	; 0x34
   2470c:	f007 fd95 	bl	2c23a <__exponent>
   24710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   24712:	4681      	mov	r9, r0
   24714:	1813      	adds	r3, r2, r0
   24716:	2a01      	cmp	r2, #1
   24718:	6123      	str	r3, [r4, #16]
   2471a:	dc02      	bgt.n	24722 <_printf_float+0x186>
   2471c:	6822      	ldr	r2, [r4, #0]
   2471e:	07d2      	lsls	r2, r2, #31
   24720:	d501      	bpl.n	24726 <_printf_float+0x18a>
   24722:	3301      	adds	r3, #1
   24724:	6123      	str	r3, [r4, #16]
   24726:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2472a:	2b00      	cmp	r3, #0
   2472c:	d087      	beq.n	2463e <_printf_float+0xa2>
   2472e:	232d      	movs	r3, #45	; 0x2d
   24730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   24734:	e783      	b.n	2463e <_printf_float+0xa2>
   24736:	f04f 0a65 	mov.w	sl, #101	; 0x65
   2473a:	e7e2      	b.n	24702 <_printf_float+0x166>
   2473c:	f04f 0a45 	mov.w	sl, #69	; 0x45
   24740:	e7df      	b.n	24702 <_printf_float+0x166>
   24742:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   24746:	d1bd      	bne.n	246c4 <_printf_float+0x128>
   24748:	2900      	cmp	r1, #0
   2474a:	6863      	ldr	r3, [r4, #4]
   2474c:	dd0b      	ble.n	24766 <_printf_float+0x1ca>
   2474e:	6121      	str	r1, [r4, #16]
   24750:	b913      	cbnz	r3, 24758 <_printf_float+0x1bc>
   24752:	6822      	ldr	r2, [r4, #0]
   24754:	07d0      	lsls	r0, r2, #31
   24756:	d502      	bpl.n	2475e <_printf_float+0x1c2>
   24758:	3301      	adds	r3, #1
   2475a:	440b      	add	r3, r1
   2475c:	6123      	str	r3, [r4, #16]
   2475e:	f04f 0900 	mov.w	r9, #0
   24762:	65a1      	str	r1, [r4, #88]	; 0x58
   24764:	e7df      	b.n	24726 <_printf_float+0x18a>
   24766:	b913      	cbnz	r3, 2476e <_printf_float+0x1d2>
   24768:	6822      	ldr	r2, [r4, #0]
   2476a:	07d2      	lsls	r2, r2, #31
   2476c:	d501      	bpl.n	24772 <_printf_float+0x1d6>
   2476e:	3302      	adds	r3, #2
   24770:	e7f4      	b.n	2475c <_printf_float+0x1c0>
   24772:	2301      	movs	r3, #1
   24774:	e7f2      	b.n	2475c <_printf_float+0x1c0>
   24776:	2900      	cmp	r1, #0
   24778:	bfd4      	ite	le
   2477a:	f1c1 0202 	rsble	r2, r1, #2
   2477e:	2201      	movgt	r2, #1
   24780:	4413      	add	r3, r2
   24782:	e7eb      	b.n	2475c <_printf_float+0x1c0>
   24784:	6823      	ldr	r3, [r4, #0]
   24786:	055a      	lsls	r2, r3, #21
   24788:	d407      	bmi.n	2479a <_printf_float+0x1fe>
   2478a:	6923      	ldr	r3, [r4, #16]
   2478c:	4642      	mov	r2, r8
   2478e:	4631      	mov	r1, r6
   24790:	4628      	mov	r0, r5
   24792:	47b8      	blx	r7
   24794:	3001      	adds	r0, #1
   24796:	d12b      	bne.n	247f0 <_printf_float+0x254>
   24798:	e75b      	b.n	24652 <_printf_float+0xb6>
   2479a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2479e:	f240 80dc 	bls.w	2495a <_printf_float+0x3be>
   247a2:	2200      	movs	r2, #0
   247a4:	2300      	movs	r3, #0
   247a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   247aa:	f7e4 fc2f 	bl	900c <__aeabi_dcmpeq>
   247ae:	2800      	cmp	r0, #0
   247b0:	d033      	beq.n	2481a <_printf_float+0x27e>
   247b2:	2301      	movs	r3, #1
   247b4:	4a30      	ldr	r2, [pc, #192]	; (24878 <_printf_float+0x2dc>)
   247b6:	4631      	mov	r1, r6
   247b8:	4628      	mov	r0, r5
   247ba:	47b8      	blx	r7
   247bc:	3001      	adds	r0, #1
   247be:	f43f af48 	beq.w	24652 <_printf_float+0xb6>
   247c2:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   247c6:	4543      	cmp	r3, r8
   247c8:	db02      	blt.n	247d0 <_printf_float+0x234>
   247ca:	6823      	ldr	r3, [r4, #0]
   247cc:	07d8      	lsls	r0, r3, #31
   247ce:	d50f      	bpl.n	247f0 <_printf_float+0x254>
   247d0:	4631      	mov	r1, r6
   247d2:	4628      	mov	r0, r5
   247d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   247d8:	47b8      	blx	r7
   247da:	3001      	adds	r0, #1
   247dc:	f43f af39 	beq.w	24652 <_printf_float+0xb6>
   247e0:	f04f 0900 	mov.w	r9, #0
   247e4:	f108 38ff 	add.w	r8, r8, #4294967295
   247e8:	f104 0a1a 	add.w	sl, r4, #26
   247ec:	45c8      	cmp	r8, r9
   247ee:	dc09      	bgt.n	24804 <_printf_float+0x268>
   247f0:	6823      	ldr	r3, [r4, #0]
   247f2:	079b      	lsls	r3, r3, #30
   247f4:	f100 8102 	bmi.w	249fc <_printf_float+0x460>
   247f8:	68e0      	ldr	r0, [r4, #12]
   247fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   247fc:	4298      	cmp	r0, r3
   247fe:	bfb8      	it	lt
   24800:	4618      	movlt	r0, r3
   24802:	e728      	b.n	24656 <_printf_float+0xba>
   24804:	2301      	movs	r3, #1
   24806:	4652      	mov	r2, sl
   24808:	4631      	mov	r1, r6
   2480a:	4628      	mov	r0, r5
   2480c:	47b8      	blx	r7
   2480e:	3001      	adds	r0, #1
   24810:	f43f af1f 	beq.w	24652 <_printf_float+0xb6>
   24814:	f109 0901 	add.w	r9, r9, #1
   24818:	e7e8      	b.n	247ec <_printf_float+0x250>
   2481a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2481c:	2b00      	cmp	r3, #0
   2481e:	dc38      	bgt.n	24892 <_printf_float+0x2f6>
   24820:	2301      	movs	r3, #1
   24822:	4a15      	ldr	r2, [pc, #84]	; (24878 <_printf_float+0x2dc>)
   24824:	4631      	mov	r1, r6
   24826:	4628      	mov	r0, r5
   24828:	47b8      	blx	r7
   2482a:	3001      	adds	r0, #1
   2482c:	f43f af11 	beq.w	24652 <_printf_float+0xb6>
   24830:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   24834:	ea59 0303 	orrs.w	r3, r9, r3
   24838:	d102      	bne.n	24840 <_printf_float+0x2a4>
   2483a:	6823      	ldr	r3, [r4, #0]
   2483c:	07d9      	lsls	r1, r3, #31
   2483e:	d5d7      	bpl.n	247f0 <_printf_float+0x254>
   24840:	4631      	mov	r1, r6
   24842:	4628      	mov	r0, r5
   24844:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   24848:	47b8      	blx	r7
   2484a:	3001      	adds	r0, #1
   2484c:	f43f af01 	beq.w	24652 <_printf_float+0xb6>
   24850:	f04f 0a00 	mov.w	sl, #0
   24854:	f104 0b1a 	add.w	fp, r4, #26
   24858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2485a:	425b      	negs	r3, r3
   2485c:	4553      	cmp	r3, sl
   2485e:	dc0d      	bgt.n	2487c <_printf_float+0x2e0>
   24860:	464b      	mov	r3, r9
   24862:	e793      	b.n	2478c <_printf_float+0x1f0>
   24864:	7fefffff 	.word	0x7fefffff
   24868:	00034122 	.word	0x00034122
   2486c:	0002f9bf 	.word	0x0002f9bf
   24870:	00034126 	.word	0x00034126
   24874:	0003412a 	.word	0x0003412a
   24878:	00033fc0 	.word	0x00033fc0
   2487c:	2301      	movs	r3, #1
   2487e:	465a      	mov	r2, fp
   24880:	4631      	mov	r1, r6
   24882:	4628      	mov	r0, r5
   24884:	47b8      	blx	r7
   24886:	3001      	adds	r0, #1
   24888:	f43f aee3 	beq.w	24652 <_printf_float+0xb6>
   2488c:	f10a 0a01 	add.w	sl, sl, #1
   24890:	e7e2      	b.n	24858 <_printf_float+0x2bc>
   24892:	6da3      	ldr	r3, [r4, #88]	; 0x58
   24894:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   24898:	4553      	cmp	r3, sl
   2489a:	bfa8      	it	ge
   2489c:	4653      	movge	r3, sl
   2489e:	2b00      	cmp	r3, #0
   248a0:	4699      	mov	r9, r3
   248a2:	dc36      	bgt.n	24912 <_printf_float+0x376>
   248a4:	f04f 0b00 	mov.w	fp, #0
   248a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   248ac:	f104 021a 	add.w	r2, r4, #26
   248b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   248b2:	930a      	str	r3, [sp, #40]	; 0x28
   248b4:	eba3 0309 	sub.w	r3, r3, r9
   248b8:	455b      	cmp	r3, fp
   248ba:	dc31      	bgt.n	24920 <_printf_float+0x384>
   248bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   248be:	459a      	cmp	sl, r3
   248c0:	dc3a      	bgt.n	24938 <_printf_float+0x39c>
   248c2:	6823      	ldr	r3, [r4, #0]
   248c4:	07da      	lsls	r2, r3, #31
   248c6:	d437      	bmi.n	24938 <_printf_float+0x39c>
   248c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   248ca:	ebaa 0903 	sub.w	r9, sl, r3
   248ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   248d0:	ebaa 0303 	sub.w	r3, sl, r3
   248d4:	4599      	cmp	r9, r3
   248d6:	bfa8      	it	ge
   248d8:	4699      	movge	r9, r3
   248da:	f1b9 0f00 	cmp.w	r9, #0
   248de:	dc33      	bgt.n	24948 <_printf_float+0x3ac>
   248e0:	f04f 0800 	mov.w	r8, #0
   248e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   248e8:	f104 0b1a 	add.w	fp, r4, #26
   248ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   248ee:	ebaa 0303 	sub.w	r3, sl, r3
   248f2:	eba3 0309 	sub.w	r3, r3, r9
   248f6:	4543      	cmp	r3, r8
   248f8:	f77f af7a 	ble.w	247f0 <_printf_float+0x254>
   248fc:	2301      	movs	r3, #1
   248fe:	465a      	mov	r2, fp
   24900:	4631      	mov	r1, r6
   24902:	4628      	mov	r0, r5
   24904:	47b8      	blx	r7
   24906:	3001      	adds	r0, #1
   24908:	f43f aea3 	beq.w	24652 <_printf_float+0xb6>
   2490c:	f108 0801 	add.w	r8, r8, #1
   24910:	e7ec      	b.n	248ec <_printf_float+0x350>
   24912:	4642      	mov	r2, r8
   24914:	4631      	mov	r1, r6
   24916:	4628      	mov	r0, r5
   24918:	47b8      	blx	r7
   2491a:	3001      	adds	r0, #1
   2491c:	d1c2      	bne.n	248a4 <_printf_float+0x308>
   2491e:	e698      	b.n	24652 <_printf_float+0xb6>
   24920:	2301      	movs	r3, #1
   24922:	4631      	mov	r1, r6
   24924:	4628      	mov	r0, r5
   24926:	920a      	str	r2, [sp, #40]	; 0x28
   24928:	47b8      	blx	r7
   2492a:	3001      	adds	r0, #1
   2492c:	f43f ae91 	beq.w	24652 <_printf_float+0xb6>
   24930:	f10b 0b01 	add.w	fp, fp, #1
   24934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24936:	e7bb      	b.n	248b0 <_printf_float+0x314>
   24938:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2493c:	4631      	mov	r1, r6
   2493e:	4628      	mov	r0, r5
   24940:	47b8      	blx	r7
   24942:	3001      	adds	r0, #1
   24944:	d1c0      	bne.n	248c8 <_printf_float+0x32c>
   24946:	e684      	b.n	24652 <_printf_float+0xb6>
   24948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2494a:	464b      	mov	r3, r9
   2494c:	4631      	mov	r1, r6
   2494e:	4628      	mov	r0, r5
   24950:	4442      	add	r2, r8
   24952:	47b8      	blx	r7
   24954:	3001      	adds	r0, #1
   24956:	d1c3      	bne.n	248e0 <_printf_float+0x344>
   24958:	e67b      	b.n	24652 <_printf_float+0xb6>
   2495a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2495e:	f1ba 0f01 	cmp.w	sl, #1
   24962:	dc01      	bgt.n	24968 <_printf_float+0x3cc>
   24964:	07db      	lsls	r3, r3, #31
   24966:	d536      	bpl.n	249d6 <_printf_float+0x43a>
   24968:	2301      	movs	r3, #1
   2496a:	4642      	mov	r2, r8
   2496c:	4631      	mov	r1, r6
   2496e:	4628      	mov	r0, r5
   24970:	47b8      	blx	r7
   24972:	3001      	adds	r0, #1
   24974:	f43f ae6d 	beq.w	24652 <_printf_float+0xb6>
   24978:	4631      	mov	r1, r6
   2497a:	4628      	mov	r0, r5
   2497c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   24980:	47b8      	blx	r7
   24982:	3001      	adds	r0, #1
   24984:	f43f ae65 	beq.w	24652 <_printf_float+0xb6>
   24988:	2200      	movs	r2, #0
   2498a:	2300      	movs	r3, #0
   2498c:	f10a 3aff 	add.w	sl, sl, #4294967295
   24990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   24994:	f7e4 fb3a 	bl	900c <__aeabi_dcmpeq>
   24998:	b9c0      	cbnz	r0, 249cc <_printf_float+0x430>
   2499a:	4653      	mov	r3, sl
   2499c:	f108 0201 	add.w	r2, r8, #1
   249a0:	4631      	mov	r1, r6
   249a2:	4628      	mov	r0, r5
   249a4:	47b8      	blx	r7
   249a6:	3001      	adds	r0, #1
   249a8:	d10c      	bne.n	249c4 <_printf_float+0x428>
   249aa:	e652      	b.n	24652 <_printf_float+0xb6>
   249ac:	2301      	movs	r3, #1
   249ae:	465a      	mov	r2, fp
   249b0:	4631      	mov	r1, r6
   249b2:	4628      	mov	r0, r5
   249b4:	47b8      	blx	r7
   249b6:	3001      	adds	r0, #1
   249b8:	f43f ae4b 	beq.w	24652 <_printf_float+0xb6>
   249bc:	f108 0801 	add.w	r8, r8, #1
   249c0:	45d0      	cmp	r8, sl
   249c2:	dbf3      	blt.n	249ac <_printf_float+0x410>
   249c4:	464b      	mov	r3, r9
   249c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
   249ca:	e6e0      	b.n	2478e <_printf_float+0x1f2>
   249cc:	f04f 0800 	mov.w	r8, #0
   249d0:	f104 0b1a 	add.w	fp, r4, #26
   249d4:	e7f4      	b.n	249c0 <_printf_float+0x424>
   249d6:	2301      	movs	r3, #1
   249d8:	4642      	mov	r2, r8
   249da:	e7e1      	b.n	249a0 <_printf_float+0x404>
   249dc:	2301      	movs	r3, #1
   249de:	464a      	mov	r2, r9
   249e0:	4631      	mov	r1, r6
   249e2:	4628      	mov	r0, r5
   249e4:	47b8      	blx	r7
   249e6:	3001      	adds	r0, #1
   249e8:	f43f ae33 	beq.w	24652 <_printf_float+0xb6>
   249ec:	f108 0801 	add.w	r8, r8, #1
   249f0:	68e3      	ldr	r3, [r4, #12]
   249f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   249f4:	1a5b      	subs	r3, r3, r1
   249f6:	4543      	cmp	r3, r8
   249f8:	dcf0      	bgt.n	249dc <_printf_float+0x440>
   249fa:	e6fd      	b.n	247f8 <_printf_float+0x25c>
   249fc:	f04f 0800 	mov.w	r8, #0
   24a00:	f104 0919 	add.w	r9, r4, #25
   24a04:	e7f4      	b.n	249f0 <_printf_float+0x454>
   24a06:	bf00      	nop

00024a08 <_printf_i>:
   24a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   24a0c:	7e0f      	ldrb	r7, [r1, #24]
   24a0e:	4691      	mov	r9, r2
   24a10:	4680      	mov	r8, r0
   24a12:	460c      	mov	r4, r1
   24a14:	2f78      	cmp	r7, #120	; 0x78
   24a16:	469a      	mov	sl, r3
   24a18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   24a1e:	d807      	bhi.n	24a30 <_printf_i+0x28>
   24a20:	2f62      	cmp	r7, #98	; 0x62
   24a22:	d80a      	bhi.n	24a3a <_printf_i+0x32>
   24a24:	2f00      	cmp	r7, #0
   24a26:	f000 80e0 	beq.w	24bea <_printf_i+0x1e2>
   24a2a:	2f58      	cmp	r7, #88	; 0x58
   24a2c:	f000 80bb 	beq.w	24ba6 <_printf_i+0x19e>
   24a30:	f104 0642 	add.w	r6, r4, #66	; 0x42
   24a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   24a38:	e03a      	b.n	24ab0 <_printf_i+0xa8>
   24a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   24a3e:	2b15      	cmp	r3, #21
   24a40:	d8f6      	bhi.n	24a30 <_printf_i+0x28>
   24a42:	a101      	add	r1, pc, #4	; (adr r1, 24a48 <_printf_i+0x40>)
   24a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   24a48:	00024aa1 	.word	0x00024aa1
   24a4c:	00024ab5 	.word	0x00024ab5
   24a50:	00024a31 	.word	0x00024a31
   24a54:	00024a31 	.word	0x00024a31
   24a58:	00024a31 	.word	0x00024a31
   24a5c:	00024a31 	.word	0x00024a31
   24a60:	00024ab5 	.word	0x00024ab5
   24a64:	00024a31 	.word	0x00024a31
   24a68:	00024a31 	.word	0x00024a31
   24a6c:	00024a31 	.word	0x00024a31
   24a70:	00024a31 	.word	0x00024a31
   24a74:	00024bd1 	.word	0x00024bd1
   24a78:	00024b45 	.word	0x00024b45
   24a7c:	00024b87 	.word	0x00024b87
   24a80:	00024a31 	.word	0x00024a31
   24a84:	00024a31 	.word	0x00024a31
   24a88:	00024bf3 	.word	0x00024bf3
   24a8c:	00024a31 	.word	0x00024a31
   24a90:	00024b45 	.word	0x00024b45
   24a94:	00024a31 	.word	0x00024a31
   24a98:	00024a31 	.word	0x00024a31
   24a9c:	00024b8f 	.word	0x00024b8f
   24aa0:	682b      	ldr	r3, [r5, #0]
   24aa2:	f104 0642 	add.w	r6, r4, #66	; 0x42
   24aa6:	1d1a      	adds	r2, r3, #4
   24aa8:	681b      	ldr	r3, [r3, #0]
   24aaa:	602a      	str	r2, [r5, #0]
   24aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   24ab0:	2301      	movs	r3, #1
   24ab2:	e0ab      	b.n	24c0c <_printf_i+0x204>
   24ab4:	6823      	ldr	r3, [r4, #0]
   24ab6:	6829      	ldr	r1, [r5, #0]
   24ab8:	061f      	lsls	r7, r3, #24
   24aba:	f101 0004 	add.w	r0, r1, #4
   24abe:	6028      	str	r0, [r5, #0]
   24ac0:	d501      	bpl.n	24ac6 <_printf_i+0xbe>
   24ac2:	680d      	ldr	r5, [r1, #0]
   24ac4:	e003      	b.n	24ace <_printf_i+0xc6>
   24ac6:	065e      	lsls	r6, r3, #25
   24ac8:	d5fb      	bpl.n	24ac2 <_printf_i+0xba>
   24aca:	f9b1 5000 	ldrsh.w	r5, [r1]
   24ace:	2d00      	cmp	r5, #0
   24ad0:	6861      	ldr	r1, [r4, #4]
   24ad2:	da7a      	bge.n	24bca <_printf_i+0x1c2>
   24ad4:	202d      	movs	r0, #45	; 0x2d
   24ad6:	2900      	cmp	r1, #0
   24ad8:	60a1      	str	r1, [r4, #8]
   24ada:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   24ade:	da2d      	bge.n	24b3c <_printf_i+0x134>
   24ae0:	426d      	negs	r5, r5
   24ae2:	485e      	ldr	r0, [pc, #376]	; (24c5c <_printf_i+0x254>)
   24ae4:	230a      	movs	r3, #10
   24ae6:	4616      	mov	r6, r2
   24ae8:	fbb5 f1f3 	udiv	r1, r5, r3
   24aec:	fb03 5711 	mls	r7, r3, r1, r5
   24af0:	5dc7      	ldrb	r7, [r0, r7]
   24af2:	f806 7d01 	strb.w	r7, [r6, #-1]!
   24af6:	462f      	mov	r7, r5
   24af8:	460d      	mov	r5, r1
   24afa:	42bb      	cmp	r3, r7
   24afc:	d9f4      	bls.n	24ae8 <_printf_i+0xe0>
   24afe:	2b08      	cmp	r3, #8
   24b00:	d10b      	bne.n	24b1a <_printf_i+0x112>
   24b02:	6823      	ldr	r3, [r4, #0]
   24b04:	07df      	lsls	r7, r3, #31
   24b06:	d508      	bpl.n	24b1a <_printf_i+0x112>
   24b08:	6923      	ldr	r3, [r4, #16]
   24b0a:	6861      	ldr	r1, [r4, #4]
   24b0c:	4299      	cmp	r1, r3
   24b0e:	bfde      	ittt	le
   24b10:	2330      	movle	r3, #48	; 0x30
   24b12:	f806 3c01 	strble.w	r3, [r6, #-1]
   24b16:	f106 36ff 	addle.w	r6, r6, #4294967295
   24b1a:	1b92      	subs	r2, r2, r6
   24b1c:	6122      	str	r2, [r4, #16]
   24b1e:	464b      	mov	r3, r9
   24b20:	aa03      	add	r2, sp, #12
   24b22:	4621      	mov	r1, r4
   24b24:	4640      	mov	r0, r8
   24b26:	f8cd a000 	str.w	sl, [sp]
   24b2a:	f007 fbbf 	bl	2c2ac <_printf_common>
   24b2e:	3001      	adds	r0, #1
   24b30:	d171      	bne.n	24c16 <_printf_i+0x20e>
   24b32:	f04f 30ff 	mov.w	r0, #4294967295
   24b36:	b004      	add	sp, #16
   24b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24b3c:	f023 0304 	bic.w	r3, r3, #4
   24b40:	6023      	str	r3, [r4, #0]
   24b42:	e7cd      	b.n	24ae0 <_printf_i+0xd8>
   24b44:	682b      	ldr	r3, [r5, #0]
   24b46:	6820      	ldr	r0, [r4, #0]
   24b48:	1d19      	adds	r1, r3, #4
   24b4a:	6029      	str	r1, [r5, #0]
   24b4c:	0605      	lsls	r5, r0, #24
   24b4e:	d501      	bpl.n	24b54 <_printf_i+0x14c>
   24b50:	681d      	ldr	r5, [r3, #0]
   24b52:	e002      	b.n	24b5a <_printf_i+0x152>
   24b54:	0641      	lsls	r1, r0, #25
   24b56:	d5fb      	bpl.n	24b50 <_printf_i+0x148>
   24b58:	881d      	ldrh	r5, [r3, #0]
   24b5a:	2f6f      	cmp	r7, #111	; 0x6f
   24b5c:	483f      	ldr	r0, [pc, #252]	; (24c5c <_printf_i+0x254>)
   24b5e:	bf14      	ite	ne
   24b60:	230a      	movne	r3, #10
   24b62:	2308      	moveq	r3, #8
   24b64:	2100      	movs	r1, #0
   24b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   24b6a:	6866      	ldr	r6, [r4, #4]
   24b6c:	2e00      	cmp	r6, #0
   24b6e:	60a6      	str	r6, [r4, #8]
   24b70:	dbb9      	blt.n	24ae6 <_printf_i+0xde>
   24b72:	6821      	ldr	r1, [r4, #0]
   24b74:	f021 0104 	bic.w	r1, r1, #4
   24b78:	6021      	str	r1, [r4, #0]
   24b7a:	2d00      	cmp	r5, #0
   24b7c:	d1b3      	bne.n	24ae6 <_printf_i+0xde>
   24b7e:	2e00      	cmp	r6, #0
   24b80:	d1b1      	bne.n	24ae6 <_printf_i+0xde>
   24b82:	4616      	mov	r6, r2
   24b84:	e7bb      	b.n	24afe <_printf_i+0xf6>
   24b86:	6823      	ldr	r3, [r4, #0]
   24b88:	f043 0320 	orr.w	r3, r3, #32
   24b8c:	6023      	str	r3, [r4, #0]
   24b8e:	2778      	movs	r7, #120	; 0x78
   24b90:	4833      	ldr	r0, [pc, #204]	; (24c60 <_printf_i+0x258>)
   24b92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   24b96:	6829      	ldr	r1, [r5, #0]
   24b98:	6823      	ldr	r3, [r4, #0]
   24b9a:	1d0e      	adds	r6, r1, #4
   24b9c:	602e      	str	r6, [r5, #0]
   24b9e:	061e      	lsls	r6, r3, #24
   24ba0:	d503      	bpl.n	24baa <_printf_i+0x1a2>
   24ba2:	680d      	ldr	r5, [r1, #0]
   24ba4:	e004      	b.n	24bb0 <_printf_i+0x1a8>
   24ba6:	482d      	ldr	r0, [pc, #180]	; (24c5c <_printf_i+0x254>)
   24ba8:	e7f3      	b.n	24b92 <_printf_i+0x18a>
   24baa:	065d      	lsls	r5, r3, #25
   24bac:	d5f9      	bpl.n	24ba2 <_printf_i+0x19a>
   24bae:	880d      	ldrh	r5, [r1, #0]
   24bb0:	07d9      	lsls	r1, r3, #31
   24bb2:	bf44      	itt	mi
   24bb4:	f043 0320 	orrmi.w	r3, r3, #32
   24bb8:	6023      	strmi	r3, [r4, #0]
   24bba:	b10d      	cbz	r5, 24bc0 <_printf_i+0x1b8>
   24bbc:	2310      	movs	r3, #16
   24bbe:	e7d1      	b.n	24b64 <_printf_i+0x15c>
   24bc0:	6823      	ldr	r3, [r4, #0]
   24bc2:	f023 0320 	bic.w	r3, r3, #32
   24bc6:	6023      	str	r3, [r4, #0]
   24bc8:	e7f8      	b.n	24bbc <_printf_i+0x1b4>
   24bca:	4824      	ldr	r0, [pc, #144]	; (24c5c <_printf_i+0x254>)
   24bcc:	230a      	movs	r3, #10
   24bce:	e7cc      	b.n	24b6a <_printf_i+0x162>
   24bd0:	682b      	ldr	r3, [r5, #0]
   24bd2:	6826      	ldr	r6, [r4, #0]
   24bd4:	1d18      	adds	r0, r3, #4
   24bd6:	6961      	ldr	r1, [r4, #20]
   24bd8:	6028      	str	r0, [r5, #0]
   24bda:	0635      	lsls	r5, r6, #24
   24bdc:	681b      	ldr	r3, [r3, #0]
   24bde:	d501      	bpl.n	24be4 <_printf_i+0x1dc>
   24be0:	6019      	str	r1, [r3, #0]
   24be2:	e002      	b.n	24bea <_printf_i+0x1e2>
   24be4:	0670      	lsls	r0, r6, #25
   24be6:	d5fb      	bpl.n	24be0 <_printf_i+0x1d8>
   24be8:	8019      	strh	r1, [r3, #0]
   24bea:	2300      	movs	r3, #0
   24bec:	4616      	mov	r6, r2
   24bee:	6123      	str	r3, [r4, #16]
   24bf0:	e795      	b.n	24b1e <_printf_i+0x116>
   24bf2:	682b      	ldr	r3, [r5, #0]
   24bf4:	2100      	movs	r1, #0
   24bf6:	1d1a      	adds	r2, r3, #4
   24bf8:	602a      	str	r2, [r5, #0]
   24bfa:	681e      	ldr	r6, [r3, #0]
   24bfc:	6862      	ldr	r2, [r4, #4]
   24bfe:	4630      	mov	r0, r6
   24c00:	f007 fe79 	bl	2c8f6 <memchr>
   24c04:	b108      	cbz	r0, 24c0a <_printf_i+0x202>
   24c06:	1b80      	subs	r0, r0, r6
   24c08:	6060      	str	r0, [r4, #4]
   24c0a:	6863      	ldr	r3, [r4, #4]
   24c0c:	6123      	str	r3, [r4, #16]
   24c0e:	2300      	movs	r3, #0
   24c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   24c14:	e783      	b.n	24b1e <_printf_i+0x116>
   24c16:	6923      	ldr	r3, [r4, #16]
   24c18:	4632      	mov	r2, r6
   24c1a:	4649      	mov	r1, r9
   24c1c:	4640      	mov	r0, r8
   24c1e:	47d0      	blx	sl
   24c20:	3001      	adds	r0, #1
   24c22:	d086      	beq.n	24b32 <_printf_i+0x12a>
   24c24:	6823      	ldr	r3, [r4, #0]
   24c26:	079b      	lsls	r3, r3, #30
   24c28:	d414      	bmi.n	24c54 <_printf_i+0x24c>
   24c2a:	68e0      	ldr	r0, [r4, #12]
   24c2c:	9b03      	ldr	r3, [sp, #12]
   24c2e:	4298      	cmp	r0, r3
   24c30:	bfb8      	it	lt
   24c32:	4618      	movlt	r0, r3
   24c34:	e77f      	b.n	24b36 <_printf_i+0x12e>
   24c36:	2301      	movs	r3, #1
   24c38:	4632      	mov	r2, r6
   24c3a:	4649      	mov	r1, r9
   24c3c:	4640      	mov	r0, r8
   24c3e:	47d0      	blx	sl
   24c40:	3001      	adds	r0, #1
   24c42:	f43f af76 	beq.w	24b32 <_printf_i+0x12a>
   24c46:	3501      	adds	r5, #1
   24c48:	68e3      	ldr	r3, [r4, #12]
   24c4a:	9903      	ldr	r1, [sp, #12]
   24c4c:	1a5b      	subs	r3, r3, r1
   24c4e:	42ab      	cmp	r3, r5
   24c50:	dcf1      	bgt.n	24c36 <_printf_i+0x22e>
   24c52:	e7ea      	b.n	24c2a <_printf_i+0x222>
   24c54:	2500      	movs	r5, #0
   24c56:	f104 0619 	add.w	r6, r4, #25
   24c5a:	e7f5      	b.n	24c48 <_printf_i+0x240>
   24c5c:	0003412e 	.word	0x0003412e
   24c60:	0003413f 	.word	0x0003413f

00024c64 <iprintf>:
   24c64:	b40f      	push	{r0, r1, r2, r3}
   24c66:	4b0a      	ldr	r3, [pc, #40]	; (24c90 <iprintf+0x2c>)
   24c68:	b513      	push	{r0, r1, r4, lr}
   24c6a:	681c      	ldr	r4, [r3, #0]
   24c6c:	b124      	cbz	r4, 24c78 <iprintf+0x14>
   24c6e:	69a3      	ldr	r3, [r4, #24]
   24c70:	b913      	cbnz	r3, 24c78 <iprintf+0x14>
   24c72:	4620      	mov	r0, r4
   24c74:	f000 fc0a 	bl	2548c <__sinit>
   24c78:	ab05      	add	r3, sp, #20
   24c7a:	9a04      	ldr	r2, [sp, #16]
   24c7c:	68a1      	ldr	r1, [r4, #8]
   24c7e:	4620      	mov	r0, r4
   24c80:	9301      	str	r3, [sp, #4]
   24c82:	f001 fae5 	bl	26250 <_vfiprintf_r>
   24c86:	b002      	add	sp, #8
   24c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24c8c:	b004      	add	sp, #16
   24c8e:	4770      	bx	lr
   24c90:	2000879c 	.word	0x2000879c

00024c94 <_sbrk_r>:
   24c94:	b538      	push	{r3, r4, r5, lr}
   24c96:	2300      	movs	r3, #0
   24c98:	4d05      	ldr	r5, [pc, #20]	; (24cb0 <_sbrk_r+0x1c>)
   24c9a:	4604      	mov	r4, r0
   24c9c:	4608      	mov	r0, r1
   24c9e:	602b      	str	r3, [r5, #0]
   24ca0:	f7ed f98e 	bl	11fc0 <_sbrk>
   24ca4:	1c43      	adds	r3, r0, #1
   24ca6:	d102      	bne.n	24cae <_sbrk_r+0x1a>
   24ca8:	682b      	ldr	r3, [r5, #0]
   24caa:	b103      	cbz	r3, 24cae <_sbrk_r+0x1a>
   24cac:	6023      	str	r3, [r4, #0]
   24cae:	bd38      	pop	{r3, r4, r5, pc}
   24cb0:	2002f790 	.word	0x2002f790

00024cb4 <strtod>:
   24cb4:	460a      	mov	r2, r1
   24cb6:	4601      	mov	r1, r0
   24cb8:	4802      	ldr	r0, [pc, #8]	; (24cc4 <strtod+0x10>)
   24cba:	4b03      	ldr	r3, [pc, #12]	; (24cc8 <strtod+0x14>)
   24cbc:	6800      	ldr	r0, [r0, #0]
   24cbe:	f7e5 b833 	b.w	9d28 <_strtod_l>
   24cc2:	bf00      	nop
   24cc4:	2000879c 	.word	0x2000879c
   24cc8:	20008808 	.word	0x20008808

00024ccc <strtok>:
   24ccc:	4b16      	ldr	r3, [pc, #88]	; (24d28 <strtok+0x5c>)
   24cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24cd2:	681f      	ldr	r7, [r3, #0]
   24cd4:	4605      	mov	r5, r0
   24cd6:	460e      	mov	r6, r1
   24cd8:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   24cda:	b9ec      	cbnz	r4, 24d18 <strtok+0x4c>
   24cdc:	2050      	movs	r0, #80	; 0x50
   24cde:	f7ff f939 	bl	23f54 <malloc>
   24ce2:	4602      	mov	r2, r0
   24ce4:	65b8      	str	r0, [r7, #88]	; 0x58
   24ce6:	b920      	cbnz	r0, 24cf2 <strtok+0x26>
   24ce8:	4b10      	ldr	r3, [pc, #64]	; (24d2c <strtok+0x60>)
   24cea:	2157      	movs	r1, #87	; 0x57
   24cec:	4810      	ldr	r0, [pc, #64]	; (24d30 <strtok+0x64>)
   24cee:	f000 fb6d 	bl	253cc <__assert_func>
   24cf2:	e9c0 4400 	strd	r4, r4, [r0]
   24cf6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   24cfa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   24cfe:	6184      	str	r4, [r0, #24]
   24d00:	7704      	strb	r4, [r0, #28]
   24d02:	6244      	str	r4, [r0, #36]	; 0x24
   24d04:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   24d08:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   24d0c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   24d10:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   24d14:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   24d18:	6dba      	ldr	r2, [r7, #88]	; 0x58
   24d1a:	4631      	mov	r1, r6
   24d1c:	4628      	mov	r0, r5
   24d1e:	2301      	movs	r3, #1
   24d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24d24:	f007 bbb1 	b.w	2c48a <__strtok_r>
   24d28:	2000879c 	.word	0x2000879c
   24d2c:	00034150 	.word	0x00034150
   24d30:	00034167 	.word	0x00034167

00024d34 <_strtol_l.constprop.0>:
   24d34:	2b24      	cmp	r3, #36	; 0x24
   24d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24d3a:	4686      	mov	lr, r0
   24d3c:	4690      	mov	r8, r2
   24d3e:	d801      	bhi.n	24d44 <_strtol_l.constprop.0+0x10>
   24d40:	2b01      	cmp	r3, #1
   24d42:	d106      	bne.n	24d52 <_strtol_l.constprop.0+0x1e>
   24d44:	f003 fd0a 	bl	2875c <__errno>
   24d48:	2316      	movs	r3, #22
   24d4a:	6003      	str	r3, [r0, #0]
   24d4c:	2000      	movs	r0, #0
   24d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24d52:	460d      	mov	r5, r1
   24d54:	4835      	ldr	r0, [pc, #212]	; (24e2c <_strtol_l.constprop.0+0xf8>)
   24d56:	462a      	mov	r2, r5
   24d58:	f815 4b01 	ldrb.w	r4, [r5], #1
   24d5c:	5d06      	ldrb	r6, [r0, r4]
   24d5e:	f016 0608 	ands.w	r6, r6, #8
   24d62:	d1f8      	bne.n	24d56 <_strtol_l.constprop.0+0x22>
   24d64:	2c2d      	cmp	r4, #45	; 0x2d
   24d66:	d124      	bne.n	24db2 <_strtol_l.constprop.0+0x7e>
   24d68:	782c      	ldrb	r4, [r5, #0]
   24d6a:	2601      	movs	r6, #1
   24d6c:	1c95      	adds	r5, r2, #2
   24d6e:	bb2b      	cbnz	r3, 24dbc <_strtol_l.constprop.0+0x88>
   24d70:	2c30      	cmp	r4, #48	; 0x30
   24d72:	d030      	beq.n	24dd6 <_strtol_l.constprop.0+0xa2>
   24d74:	230a      	movs	r3, #10
   24d76:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   24d7a:	2200      	movs	r2, #0
   24d7c:	f10c 3cff 	add.w	ip, ip, #4294967295
   24d80:	4610      	mov	r0, r2
   24d82:	fbbc f9f3 	udiv	r9, ip, r3
   24d86:	fb03 ca19 	mls	sl, r3, r9, ip
   24d8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   24d8e:	2f09      	cmp	r7, #9
   24d90:	d828      	bhi.n	24de4 <_strtol_l.constprop.0+0xb0>
   24d92:	463c      	mov	r4, r7
   24d94:	42a3      	cmp	r3, r4
   24d96:	dd34      	ble.n	24e02 <_strtol_l.constprop.0+0xce>
   24d98:	1c57      	adds	r7, r2, #1
   24d9a:	d007      	beq.n	24dac <_strtol_l.constprop.0+0x78>
   24d9c:	4581      	cmp	r9, r0
   24d9e:	d32d      	bcc.n	24dfc <_strtol_l.constprop.0+0xc8>
   24da0:	d101      	bne.n	24da6 <_strtol_l.constprop.0+0x72>
   24da2:	45a2      	cmp	sl, r4
   24da4:	db2a      	blt.n	24dfc <_strtol_l.constprop.0+0xc8>
   24da6:	fb00 4003 	mla	r0, r0, r3, r4
   24daa:	2201      	movs	r2, #1
   24dac:	f815 4b01 	ldrb.w	r4, [r5], #1
   24db0:	e7eb      	b.n	24d8a <_strtol_l.constprop.0+0x56>
   24db2:	2c2b      	cmp	r4, #43	; 0x2b
   24db4:	bf04      	itt	eq
   24db6:	782c      	ldrbeq	r4, [r5, #0]
   24db8:	1c95      	addeq	r5, r2, #2
   24dba:	e7d8      	b.n	24d6e <_strtol_l.constprop.0+0x3a>
   24dbc:	2b10      	cmp	r3, #16
   24dbe:	d1da      	bne.n	24d76 <_strtol_l.constprop.0+0x42>
   24dc0:	2c30      	cmp	r4, #48	; 0x30
   24dc2:	d1d8      	bne.n	24d76 <_strtol_l.constprop.0+0x42>
   24dc4:	782a      	ldrb	r2, [r5, #0]
   24dc6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   24dca:	2a58      	cmp	r2, #88	; 0x58
   24dcc:	d1d3      	bne.n	24d76 <_strtol_l.constprop.0+0x42>
   24dce:	786c      	ldrb	r4, [r5, #1]
   24dd0:	2310      	movs	r3, #16
   24dd2:	3502      	adds	r5, #2
   24dd4:	e7cf      	b.n	24d76 <_strtol_l.constprop.0+0x42>
   24dd6:	782b      	ldrb	r3, [r5, #0]
   24dd8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24ddc:	2b58      	cmp	r3, #88	; 0x58
   24dde:	d0f6      	beq.n	24dce <_strtol_l.constprop.0+0x9a>
   24de0:	2308      	movs	r3, #8
   24de2:	e7c8      	b.n	24d76 <_strtol_l.constprop.0+0x42>
   24de4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   24de8:	2f19      	cmp	r7, #25
   24dea:	d801      	bhi.n	24df0 <_strtol_l.constprop.0+0xbc>
   24dec:	3c37      	subs	r4, #55	; 0x37
   24dee:	e7d1      	b.n	24d94 <_strtol_l.constprop.0+0x60>
   24df0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   24df4:	2f19      	cmp	r7, #25
   24df6:	d804      	bhi.n	24e02 <_strtol_l.constprop.0+0xce>
   24df8:	3c57      	subs	r4, #87	; 0x57
   24dfa:	e7cb      	b.n	24d94 <_strtol_l.constprop.0+0x60>
   24dfc:	f04f 32ff 	mov.w	r2, #4294967295
   24e00:	e7d4      	b.n	24dac <_strtol_l.constprop.0+0x78>
   24e02:	1c53      	adds	r3, r2, #1
   24e04:	d108      	bne.n	24e18 <_strtol_l.constprop.0+0xe4>
   24e06:	2322      	movs	r3, #34	; 0x22
   24e08:	4660      	mov	r0, ip
   24e0a:	f8ce 3000 	str.w	r3, [lr]
   24e0e:	f1b8 0f00 	cmp.w	r8, #0
   24e12:	d09c      	beq.n	24d4e <_strtol_l.constprop.0+0x1a>
   24e14:	1e69      	subs	r1, r5, #1
   24e16:	e006      	b.n	24e26 <_strtol_l.constprop.0+0xf2>
   24e18:	b106      	cbz	r6, 24e1c <_strtol_l.constprop.0+0xe8>
   24e1a:	4240      	negs	r0, r0
   24e1c:	f1b8 0f00 	cmp.w	r8, #0
   24e20:	d095      	beq.n	24d4e <_strtol_l.constprop.0+0x1a>
   24e22:	2a00      	cmp	r2, #0
   24e24:	d1f6      	bne.n	24e14 <_strtol_l.constprop.0+0xe0>
   24e26:	f8c8 1000 	str.w	r1, [r8]
   24e2a:	e790      	b.n	24d4e <_strtol_l.constprop.0+0x1a>
   24e2c:	00034022 	.word	0x00034022

00024e30 <strtol>:
   24e30:	4613      	mov	r3, r2
   24e32:	460a      	mov	r2, r1
   24e34:	4601      	mov	r1, r0
   24e36:	4802      	ldr	r0, [pc, #8]	; (24e40 <strtol+0x10>)
   24e38:	6800      	ldr	r0, [r0, #0]
   24e3a:	f7ff bf7b 	b.w	24d34 <_strtol_l.constprop.0>
   24e3e:	bf00      	nop
   24e40:	2000879c 	.word	0x2000879c

00024e44 <_strtoul_l.constprop.0>:
   24e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24e48:	4686      	mov	lr, r0
   24e4a:	460d      	mov	r5, r1
   24e4c:	4e35      	ldr	r6, [pc, #212]	; (24f24 <_strtoul_l.constprop.0+0xe0>)
   24e4e:	4628      	mov	r0, r5
   24e50:	f815 4b01 	ldrb.w	r4, [r5], #1
   24e54:	5d37      	ldrb	r7, [r6, r4]
   24e56:	f017 0708 	ands.w	r7, r7, #8
   24e5a:	d1f8      	bne.n	24e4e <_strtoul_l.constprop.0+0xa>
   24e5c:	2c2d      	cmp	r4, #45	; 0x2d
   24e5e:	d126      	bne.n	24eae <_strtoul_l.constprop.0+0x6a>
   24e60:	782c      	ldrb	r4, [r5, #0]
   24e62:	2701      	movs	r7, #1
   24e64:	1c85      	adds	r5, r0, #2
   24e66:	bb3b      	cbnz	r3, 24eb8 <_strtoul_l.constprop.0+0x74>
   24e68:	2c30      	cmp	r4, #48	; 0x30
   24e6a:	d032      	beq.n	24ed2 <_strtoul_l.constprop.0+0x8e>
   24e6c:	230a      	movs	r3, #10
   24e6e:	f04f 38ff 	mov.w	r8, #4294967295
   24e72:	2600      	movs	r6, #0
   24e74:	fbb8 f8f3 	udiv	r8, r8, r3
   24e78:	fb03 f908 	mul.w	r9, r3, r8
   24e7c:	4630      	mov	r0, r6
   24e7e:	ea6f 0909 	mvn.w	r9, r9
   24e82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   24e86:	f1bc 0f09 	cmp.w	ip, #9
   24e8a:	d829      	bhi.n	24ee0 <_strtoul_l.constprop.0+0x9c>
   24e8c:	4664      	mov	r4, ip
   24e8e:	42a3      	cmp	r3, r4
   24e90:	dd37      	ble.n	24f02 <_strtoul_l.constprop.0+0xbe>
   24e92:	f1b6 3fff 	cmp.w	r6, #4294967295
   24e96:	d007      	beq.n	24ea8 <_strtoul_l.constprop.0+0x64>
   24e98:	4580      	cmp	r8, r0
   24e9a:	d32f      	bcc.n	24efc <_strtoul_l.constprop.0+0xb8>
   24e9c:	d101      	bne.n	24ea2 <_strtoul_l.constprop.0+0x5e>
   24e9e:	45a1      	cmp	r9, r4
   24ea0:	db2c      	blt.n	24efc <_strtoul_l.constprop.0+0xb8>
   24ea2:	fb00 4003 	mla	r0, r0, r3, r4
   24ea6:	2601      	movs	r6, #1
   24ea8:	f815 4b01 	ldrb.w	r4, [r5], #1
   24eac:	e7e9      	b.n	24e82 <_strtoul_l.constprop.0+0x3e>
   24eae:	2c2b      	cmp	r4, #43	; 0x2b
   24eb0:	bf04      	itt	eq
   24eb2:	782c      	ldrbeq	r4, [r5, #0]
   24eb4:	1c85      	addeq	r5, r0, #2
   24eb6:	e7d6      	b.n	24e66 <_strtoul_l.constprop.0+0x22>
   24eb8:	2b10      	cmp	r3, #16
   24eba:	d1d8      	bne.n	24e6e <_strtoul_l.constprop.0+0x2a>
   24ebc:	2c30      	cmp	r4, #48	; 0x30
   24ebe:	d1d6      	bne.n	24e6e <_strtoul_l.constprop.0+0x2a>
   24ec0:	7828      	ldrb	r0, [r5, #0]
   24ec2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   24ec6:	2858      	cmp	r0, #88	; 0x58
   24ec8:	d1d1      	bne.n	24e6e <_strtoul_l.constprop.0+0x2a>
   24eca:	786c      	ldrb	r4, [r5, #1]
   24ecc:	2310      	movs	r3, #16
   24ece:	3502      	adds	r5, #2
   24ed0:	e7cd      	b.n	24e6e <_strtoul_l.constprop.0+0x2a>
   24ed2:	782b      	ldrb	r3, [r5, #0]
   24ed4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24ed8:	2b58      	cmp	r3, #88	; 0x58
   24eda:	d0f6      	beq.n	24eca <_strtoul_l.constprop.0+0x86>
   24edc:	2308      	movs	r3, #8
   24ede:	e7c6      	b.n	24e6e <_strtoul_l.constprop.0+0x2a>
   24ee0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   24ee4:	f1bc 0f19 	cmp.w	ip, #25
   24ee8:	d801      	bhi.n	24eee <_strtoul_l.constprop.0+0xaa>
   24eea:	3c37      	subs	r4, #55	; 0x37
   24eec:	e7cf      	b.n	24e8e <_strtoul_l.constprop.0+0x4a>
   24eee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   24ef2:	f1bc 0f19 	cmp.w	ip, #25
   24ef6:	d804      	bhi.n	24f02 <_strtoul_l.constprop.0+0xbe>
   24ef8:	3c57      	subs	r4, #87	; 0x57
   24efa:	e7c8      	b.n	24e8e <_strtoul_l.constprop.0+0x4a>
   24efc:	f04f 36ff 	mov.w	r6, #4294967295
   24f00:	e7d2      	b.n	24ea8 <_strtoul_l.constprop.0+0x64>
   24f02:	1c73      	adds	r3, r6, #1
   24f04:	d106      	bne.n	24f14 <_strtoul_l.constprop.0+0xd0>
   24f06:	2322      	movs	r3, #34	; 0x22
   24f08:	4630      	mov	r0, r6
   24f0a:	f8ce 3000 	str.w	r3, [lr]
   24f0e:	b932      	cbnz	r2, 24f1e <_strtoul_l.constprop.0+0xda>
   24f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24f14:	b107      	cbz	r7, 24f18 <_strtoul_l.constprop.0+0xd4>
   24f16:	4240      	negs	r0, r0
   24f18:	2a00      	cmp	r2, #0
   24f1a:	d0f9      	beq.n	24f10 <_strtoul_l.constprop.0+0xcc>
   24f1c:	b106      	cbz	r6, 24f20 <_strtoul_l.constprop.0+0xdc>
   24f1e:	1e69      	subs	r1, r5, #1
   24f20:	6011      	str	r1, [r2, #0]
   24f22:	e7f5      	b.n	24f10 <_strtoul_l.constprop.0+0xcc>
   24f24:	00034022 	.word	0x00034022

00024f28 <strtoul>:
   24f28:	4613      	mov	r3, r2
   24f2a:	460a      	mov	r2, r1
   24f2c:	4601      	mov	r1, r0
   24f2e:	4802      	ldr	r0, [pc, #8]	; (24f38 <strtoul+0x10>)
   24f30:	6800      	ldr	r0, [r0, #0]
   24f32:	f7ff bf87 	b.w	24e44 <_strtoul_l.constprop.0>
   24f36:	bf00      	nop
   24f38:	2000879c 	.word	0x2000879c

00024f3c <__tzcalc_limits>:
   24f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24f40:	4604      	mov	r4, r0
   24f42:	f000 fd9f 	bl	25a84 <__gettzinfo>
   24f46:	f240 73b1 	movw	r3, #1969	; 0x7b1
   24f4a:	429c      	cmp	r4, r3
   24f4c:	f340 8098 	ble.w	25080 <__tzcalc_limits+0x144>
   24f50:	f46f 67f6 	mvn.w	r7, #1968	; 0x7b0
   24f54:	f2a4 73b2 	subw	r3, r4, #1970	; 0x7b2
   24f58:	f240 126d 	movw	r2, #365	; 0x16d
   24f5c:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   24f60:	19e5      	adds	r5, r4, r7
   24f62:	4601      	mov	r1, r0
   24f64:	f100 0750 	add.w	r7, r0, #80	; 0x50
   24f68:	6044      	str	r4, [r0, #4]
   24f6a:	10ad      	asrs	r5, r5, #2
   24f6c:	fb02 5503 	mla	r5, r2, r3, r5
   24f70:	f06f 0263 	mvn.w	r2, #99	; 0x63
   24f74:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
   24f78:	fb93 f3f2 	sdiv	r3, r3, r2
   24f7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   24f80:	441d      	add	r5, r3
   24f82:	eb04 030c 	add.w	r3, r4, ip
   24f86:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 25084 <__tzcalc_limits+0x148>
   24f8a:	fbb3 f3f2 	udiv	r3, r3, r2
   24f8e:	441d      	add	r5, r3
   24f90:	7a0b      	ldrb	r3, [r1, #8]
   24f92:	694a      	ldr	r2, [r1, #20]
   24f94:	2b4a      	cmp	r3, #74	; 0x4a
   24f96:	d131      	bne.n	24ffc <__tzcalc_limits+0xc0>
   24f98:	07a6      	lsls	r6, r4, #30
   24f9a:	eb05 0302 	add.w	r3, r5, r2
   24f9e:	d106      	bne.n	24fae <__tzcalc_limits+0x72>
   24fa0:	f04f 0e64 	mov.w	lr, #100	; 0x64
   24fa4:	fb94 f6fe 	sdiv	r6, r4, lr
   24fa8:	fb0e 4616 	mls	r6, lr, r6, r4
   24fac:	b936      	cbnz	r6, 24fbc <__tzcalc_limits+0x80>
   24fae:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   24fb2:	fb94 f6fe 	sdiv	r6, r4, lr
   24fb6:	fb0e 4616 	mls	r6, lr, r6, r4
   24fba:	b9ee      	cbnz	r6, 24ff8 <__tzcalc_limits+0xbc>
   24fbc:	2a3b      	cmp	r2, #59	; 0x3b
   24fbe:	bfd4      	ite	le
   24fc0:	2200      	movle	r2, #0
   24fc2:	2201      	movgt	r2, #1
   24fc4:	4413      	add	r3, r2
   24fc6:	3b01      	subs	r3, #1
   24fc8:	698a      	ldr	r2, [r1, #24]
   24fca:	fb0c 2303 	mla	r3, ip, r3, r2
   24fce:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   24fd0:	4413      	add	r3, r2
   24fd2:	17da      	asrs	r2, r3, #31
   24fd4:	e9c1 3208 	strd	r3, r2, [r1, #32]
   24fd8:	3128      	adds	r1, #40	; 0x28
   24fda:	428f      	cmp	r7, r1
   24fdc:	d1d8      	bne.n	24f90 <__tzcalc_limits+0x54>
   24fde:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
   24fe2:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
   24fe6:	428c      	cmp	r4, r1
   24fe8:	4193      	sbcs	r3, r2
   24fea:	bfb4      	ite	lt
   24fec:	2301      	movlt	r3, #1
   24fee:	2300      	movge	r3, #0
   24ff0:	6003      	str	r3, [r0, #0]
   24ff2:	2001      	movs	r0, #1
   24ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24ff8:	2200      	movs	r2, #0
   24ffa:	e7e3      	b.n	24fc4 <__tzcalc_limits+0x88>
   24ffc:	2b44      	cmp	r3, #68	; 0x44
   24ffe:	d101      	bne.n	25004 <__tzcalc_limits+0xc8>
   25000:	18ab      	adds	r3, r5, r2
   25002:	e7e1      	b.n	24fc8 <__tzcalc_limits+0x8c>
   25004:	07a3      	lsls	r3, r4, #30
   25006:	d105      	bne.n	25014 <__tzcalc_limits+0xd8>
   25008:	2664      	movs	r6, #100	; 0x64
   2500a:	fb94 f3f6 	sdiv	r3, r4, r6
   2500e:	fb06 4313 	mls	r3, r6, r3, r4
   25012:	bb7b      	cbnz	r3, 25074 <__tzcalc_limits+0x138>
   25014:	f44f 73c8 	mov.w	r3, #400	; 0x190
   25018:	fb94 f6f3 	sdiv	r6, r4, r3
   2501c:	fb03 4616 	mls	r6, r3, r6, r4
   25020:	fab6 f686 	clz	r6, r6
   25024:	0976      	lsrs	r6, r6, #5
   25026:	f04f 0a30 	mov.w	sl, #48	; 0x30
   2502a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 25088 <__tzcalc_limits+0x14c>
   2502e:	f8d1 900c 	ldr.w	r9, [r1, #12]
   25032:	462b      	mov	r3, r5
   25034:	f04f 0800 	mov.w	r8, #0
   25038:	fb0a e606 	mla	r6, sl, r6, lr
   2503c:	f108 0801 	add.w	r8, r8, #1
   25040:	45c1      	cmp	r9, r8
   25042:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
   25046:	dc17      	bgt.n	25078 <__tzcalc_limits+0x13c>
   25048:	f103 0804 	add.w	r8, r3, #4
   2504c:	2607      	movs	r6, #7
   2504e:	fb98 f6f6 	sdiv	r6, r8, r6
   25052:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   25056:	eba8 0606 	sub.w	r6, r8, r6
   2505a:	1b92      	subs	r2, r2, r6
   2505c:	690e      	ldr	r6, [r1, #16]
   2505e:	f106 36ff 	add.w	r6, r6, #4294967295
   25062:	bf48      	it	mi
   25064:	3207      	addmi	r2, #7
   25066:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   2506a:	4432      	add	r2, r6
   2506c:	4572      	cmp	r2, lr
   2506e:	da05      	bge.n	2507c <__tzcalc_limits+0x140>
   25070:	4413      	add	r3, r2
   25072:	e7a9      	b.n	24fc8 <__tzcalc_limits+0x8c>
   25074:	2601      	movs	r6, #1
   25076:	e7d6      	b.n	25026 <__tzcalc_limits+0xea>
   25078:	4473      	add	r3, lr
   2507a:	e7df      	b.n	2503c <__tzcalc_limits+0x100>
   2507c:	3a07      	subs	r2, #7
   2507e:	e7f5      	b.n	2506c <__tzcalc_limits+0x130>
   25080:	2000      	movs	r0, #0
   25082:	e7b7      	b.n	24ff4 <__tzcalc_limits+0xb8>
   25084:	00015180 	.word	0x00015180
   25088:	0002e620 	.word	0x0002e620

0002508c <__tz_lock>:
   2508c:	4801      	ldr	r0, [pc, #4]	; (25094 <__tz_lock+0x8>)
   2508e:	f7ec bfdb 	b.w	12048 <__retarget_lock_acquire>
   25092:	bf00      	nop
   25094:	20008b48 	.word	0x20008b48

00025098 <__tz_unlock>:
   25098:	4801      	ldr	r0, [pc, #4]	; (250a0 <__tz_unlock+0x8>)
   2509a:	f7ed b80d 	b.w	120b8 <__retarget_lock_release>
   2509e:	bf00      	nop
   250a0:	20008b48 	.word	0x20008b48

000250a4 <_tzset_unlocked>:
   250a4:	4b01      	ldr	r3, [pc, #4]	; (250ac <_tzset_unlocked+0x8>)
   250a6:	6818      	ldr	r0, [r3, #0]
   250a8:	f000 b802 	b.w	250b0 <_tzset_unlocked_r>
   250ac:	2000879c 	.word	0x2000879c

000250b0 <_tzset_unlocked_r>:
   250b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250b4:	4607      	mov	r7, r0
   250b6:	b08d      	sub	sp, #52	; 0x34
   250b8:	f000 fce4 	bl	25a84 <__gettzinfo>
   250bc:	49b7      	ldr	r1, [pc, #732]	; (2539c <_tzset_unlocked_r+0x2ec>)
   250be:	4604      	mov	r4, r0
   250c0:	4638      	mov	r0, r7
   250c2:	f007 fbff 	bl	2c8c4 <_getenv_r>
   250c6:	4eb6      	ldr	r6, [pc, #728]	; (253a0 <_tzset_unlocked_r+0x2f0>)
   250c8:	4605      	mov	r5, r0
   250ca:	b970      	cbnz	r0, 250ea <_tzset_unlocked_r+0x3a>
   250cc:	4bb5      	ldr	r3, [pc, #724]	; (253a4 <_tzset_unlocked_r+0x2f4>)
   250ce:	4ab6      	ldr	r2, [pc, #728]	; (253a8 <_tzset_unlocked_r+0x2f8>)
   250d0:	6018      	str	r0, [r3, #0]
   250d2:	4bb6      	ldr	r3, [pc, #728]	; (253ac <_tzset_unlocked_r+0x2fc>)
   250d4:	6018      	str	r0, [r3, #0]
   250d6:	4bb6      	ldr	r3, [pc, #728]	; (253b0 <_tzset_unlocked_r+0x300>)
   250d8:	6830      	ldr	r0, [r6, #0]
   250da:	e9c3 2200 	strd	r2, r2, [r3]
   250de:	f7fe ff41 	bl	23f64 <free>
   250e2:	6035      	str	r5, [r6, #0]
   250e4:	b00d      	add	sp, #52	; 0x34
   250e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250ea:	6831      	ldr	r1, [r6, #0]
   250ec:	2900      	cmp	r1, #0
   250ee:	d164      	bne.n	251ba <_tzset_unlocked_r+0x10a>
   250f0:	6830      	ldr	r0, [r6, #0]
   250f2:	f7fe ff37 	bl	23f64 <free>
   250f6:	4628      	mov	r0, r5
   250f8:	f7e4 f987 	bl	940a <strlen>
   250fc:	1c41      	adds	r1, r0, #1
   250fe:	4638      	mov	r0, r7
   25100:	f7ff f9f2 	bl	244e8 <_malloc_r>
   25104:	6030      	str	r0, [r6, #0]
   25106:	2800      	cmp	r0, #0
   25108:	d15c      	bne.n	251c4 <_tzset_unlocked_r+0x114>
   2510a:	782b      	ldrb	r3, [r5, #0]
   2510c:	ae0a      	add	r6, sp, #40	; 0x28
   2510e:	4aa9      	ldr	r2, [pc, #676]	; (253b4 <_tzset_unlocked_r+0x304>)
   25110:	2b3a      	cmp	r3, #58	; 0x3a
   25112:	49a9      	ldr	r1, [pc, #676]	; (253b8 <_tzset_unlocked_r+0x308>)
   25114:	4633      	mov	r3, r6
   25116:	bf08      	it	eq
   25118:	3501      	addeq	r5, #1
   2511a:	4628      	mov	r0, r5
   2511c:	f001 f9c4 	bl	264a8 <siscanf>
   25120:	2800      	cmp	r0, #0
   25122:	dddf      	ble.n	250e4 <_tzset_unlocked_r+0x34>
   25124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25126:	eb05 0903 	add.w	r9, r5, r3
   2512a:	5ceb      	ldrb	r3, [r5, r3]
   2512c:	2b2d      	cmp	r3, #45	; 0x2d
   2512e:	d14d      	bne.n	251cc <_tzset_unlocked_r+0x11c>
   25130:	f109 0901 	add.w	r9, r9, #1
   25134:	f04f 3aff 	mov.w	sl, #4294967295
   25138:	af08      	add	r7, sp, #32
   2513a:	f10d 081e 	add.w	r8, sp, #30
   2513e:	2500      	movs	r5, #0
   25140:	4633      	mov	r3, r6
   25142:	aa07      	add	r2, sp, #28
   25144:	499d      	ldr	r1, [pc, #628]	; (253bc <_tzset_unlocked_r+0x30c>)
   25146:	4648      	mov	r0, r9
   25148:	9603      	str	r6, [sp, #12]
   2514a:	f8cd 8000 	str.w	r8, [sp]
   2514e:	f8ad 501e 	strh.w	r5, [sp, #30]
   25152:	f8ad 5020 	strh.w	r5, [sp, #32]
   25156:	e9cd 6701 	strd	r6, r7, [sp, #4]
   2515a:	f001 f9a5 	bl	264a8 <siscanf>
   2515e:	42a8      	cmp	r0, r5
   25160:	ddc0      	ble.n	250e4 <_tzset_unlocked_r+0x34>
   25162:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   25166:	213c      	movs	r1, #60	; 0x3c
   25168:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2516c:	f8df b240 	ldr.w	fp, [pc, #576]	; 253b0 <_tzset_unlocked_r+0x300>
   25170:	fb01 3302 	mla	r3, r1, r2, r3
   25174:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   25178:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   2517c:	fb01 3302 	mla	r3, r1, r2, r3
   25180:	498d      	ldr	r1, [pc, #564]	; (253b8 <_tzset_unlocked_r+0x308>)
   25182:	fb0a f303 	mul.w	r3, sl, r3
   25186:	62a3      	str	r3, [r4, #40]	; 0x28
   25188:	4b8a      	ldr	r3, [pc, #552]	; (253b4 <_tzset_unlocked_r+0x304>)
   2518a:	f8cb 3000 	str.w	r3, [fp]
   2518e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25190:	eb09 0a03 	add.w	sl, r9, r3
   25194:	f8df 9228 	ldr.w	r9, [pc, #552]	; 253c0 <_tzset_unlocked_r+0x310>
   25198:	4633      	mov	r3, r6
   2519a:	464a      	mov	r2, r9
   2519c:	4650      	mov	r0, sl
   2519e:	f001 f983 	bl	264a8 <siscanf>
   251a2:	42a8      	cmp	r0, r5
   251a4:	dc19      	bgt.n	251da <_tzset_unlocked_r+0x12a>
   251a6:	f8db 3000 	ldr.w	r3, [fp]
   251aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   251ac:	f8cb 3004 	str.w	r3, [fp, #4]
   251b0:	4b7c      	ldr	r3, [pc, #496]	; (253a4 <_tzset_unlocked_r+0x2f4>)
   251b2:	601a      	str	r2, [r3, #0]
   251b4:	4b7d      	ldr	r3, [pc, #500]	; (253ac <_tzset_unlocked_r+0x2fc>)
   251b6:	601d      	str	r5, [r3, #0]
   251b8:	e794      	b.n	250e4 <_tzset_unlocked_r+0x34>
   251ba:	f7e4 f91c 	bl	93f6 <strcmp>
   251be:	2800      	cmp	r0, #0
   251c0:	d196      	bne.n	250f0 <_tzset_unlocked_r+0x40>
   251c2:	e78f      	b.n	250e4 <_tzset_unlocked_r+0x34>
   251c4:	4629      	mov	r1, r5
   251c6:	f007 f8f0 	bl	2c3aa <strcpy>
   251ca:	e79e      	b.n	2510a <_tzset_unlocked_r+0x5a>
   251cc:	2b2b      	cmp	r3, #43	; 0x2b
   251ce:	f04f 0a01 	mov.w	sl, #1
   251d2:	bf08      	it	eq
   251d4:	f109 0901 	addeq.w	r9, r9, #1
   251d8:	e7ae      	b.n	25138 <_tzset_unlocked_r+0x88>
   251da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   251dc:	f8cb 9004 	str.w	r9, [fp, #4]
   251e0:	eb0a 0903 	add.w	r9, sl, r3
   251e4:	f81a 3003 	ldrb.w	r3, [sl, r3]
   251e8:	2b2d      	cmp	r3, #45	; 0x2d
   251ea:	f040 808f 	bne.w	2530c <_tzset_unlocked_r+0x25c>
   251ee:	f109 0901 	add.w	r9, r9, #1
   251f2:	f04f 35ff 	mov.w	r5, #4294967295
   251f6:	2300      	movs	r3, #0
   251f8:	aa07      	add	r2, sp, #28
   251fa:	4970      	ldr	r1, [pc, #448]	; (253bc <_tzset_unlocked_r+0x30c>)
   251fc:	4648      	mov	r0, r9
   251fe:	f8ad 301c 	strh.w	r3, [sp, #28]
   25202:	f8ad 301e 	strh.w	r3, [sp, #30]
   25206:	f8ad 3020 	strh.w	r3, [sp, #32]
   2520a:	930a      	str	r3, [sp, #40]	; 0x28
   2520c:	4633      	mov	r3, r6
   2520e:	e9cd 7602 	strd	r7, r6, [sp, #8]
   25212:	e9cd 8600 	strd	r8, r6, [sp]
   25216:	f001 f947 	bl	264a8 <siscanf>
   2521a:	2800      	cmp	r0, #0
   2521c:	dc7d      	bgt.n	2531a <_tzset_unlocked_r+0x26a>
   2521e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25220:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   25224:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   25226:	f04f 0b00 	mov.w	fp, #0
   2522a:	6523      	str	r3, [r4, #80]	; 0x50
   2522c:	444d      	add	r5, r9
   2522e:	46a1      	mov	r9, r4
   25230:	782b      	ldrb	r3, [r5, #0]
   25232:	2b2c      	cmp	r3, #44	; 0x2c
   25234:	bf08      	it	eq
   25236:	3501      	addeq	r5, #1
   25238:	f895 a000 	ldrb.w	sl, [r5]
   2523c:	f1ba 0f4d 	cmp.w	sl, #77	; 0x4d
   25240:	d17d      	bne.n	2533e <_tzset_unlocked_r+0x28e>
   25242:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   25246:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   2524a:	495e      	ldr	r1, [pc, #376]	; (253c4 <_tzset_unlocked_r+0x314>)
   2524c:	4628      	mov	r0, r5
   2524e:	9603      	str	r6, [sp, #12]
   25250:	e9cd 6301 	strd	r6, r3, [sp, #4]
   25254:	ab09      	add	r3, sp, #36	; 0x24
   25256:	9300      	str	r3, [sp, #0]
   25258:	4633      	mov	r3, r6
   2525a:	f001 f925 	bl	264a8 <siscanf>
   2525e:	2803      	cmp	r0, #3
   25260:	f47f af40 	bne.w	250e4 <_tzset_unlocked_r+0x34>
   25264:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   25268:	1e4b      	subs	r3, r1, #1
   2526a:	2b0b      	cmp	r3, #11
   2526c:	f63f af3a 	bhi.w	250e4 <_tzset_unlocked_r+0x34>
   25270:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   25274:	1e53      	subs	r3, r2, #1
   25276:	2b04      	cmp	r3, #4
   25278:	f63f af34 	bhi.w	250e4 <_tzset_unlocked_r+0x34>
   2527c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   25280:	2b06      	cmp	r3, #6
   25282:	f63f af2f 	bhi.w	250e4 <_tzset_unlocked_r+0x34>
   25286:	f889 a008 	strb.w	sl, [r9, #8]
   2528a:	f8c9 3014 	str.w	r3, [r9, #20]
   2528e:	e9c9 1203 	strd	r1, r2, [r9, #12]
   25292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25294:	eb05 0a03 	add.w	sl, r5, r3
   25298:	2302      	movs	r3, #2
   2529a:	f8ad 301c 	strh.w	r3, [sp, #28]
   2529e:	2300      	movs	r3, #0
   252a0:	f8ad 301e 	strh.w	r3, [sp, #30]
   252a4:	f8ad 3020 	strh.w	r3, [sp, #32]
   252a8:	930a      	str	r3, [sp, #40]	; 0x28
   252aa:	f89a 3000 	ldrb.w	r3, [sl]
   252ae:	2b2f      	cmp	r3, #47	; 0x2f
   252b0:	d109      	bne.n	252c6 <_tzset_unlocked_r+0x216>
   252b2:	4633      	mov	r3, r6
   252b4:	aa07      	add	r2, sp, #28
   252b6:	4944      	ldr	r1, [pc, #272]	; (253c8 <_tzset_unlocked_r+0x318>)
   252b8:	4650      	mov	r0, sl
   252ba:	e9cd 7602 	strd	r7, r6, [sp, #8]
   252be:	e9cd 8600 	strd	r8, r6, [sp]
   252c2:	f001 f8f1 	bl	264a8 <siscanf>
   252c6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   252ca:	213c      	movs	r1, #60	; 0x3c
   252cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   252d0:	f109 0928 	add.w	r9, r9, #40	; 0x28
   252d4:	fb01 3302 	mla	r3, r1, r2, r3
   252d8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   252dc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   252e0:	fb01 3302 	mla	r3, r1, r2, r3
   252e4:	f849 3c10 	str.w	r3, [r9, #-16]
   252e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   252ea:	4455      	add	r5, sl
   252ec:	f1bb 0f00 	cmp.w	fp, #0
   252f0:	d022      	beq.n	25338 <_tzset_unlocked_r+0x288>
   252f2:	6860      	ldr	r0, [r4, #4]
   252f4:	f7ff fe22 	bl	24f3c <__tzcalc_limits>
   252f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   252fa:	4b2a      	ldr	r3, [pc, #168]	; (253a4 <_tzset_unlocked_r+0x2f4>)
   252fc:	601a      	str	r2, [r3, #0]
   252fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
   25300:	1a9b      	subs	r3, r3, r2
   25302:	4a2a      	ldr	r2, [pc, #168]	; (253ac <_tzset_unlocked_r+0x2fc>)
   25304:	bf18      	it	ne
   25306:	2301      	movne	r3, #1
   25308:	6013      	str	r3, [r2, #0]
   2530a:	e6eb      	b.n	250e4 <_tzset_unlocked_r+0x34>
   2530c:	2b2b      	cmp	r3, #43	; 0x2b
   2530e:	f04f 0501 	mov.w	r5, #1
   25312:	bf08      	it	eq
   25314:	f109 0901 	addeq.w	r9, r9, #1
   25318:	e76d      	b.n	251f6 <_tzset_unlocked_r+0x146>
   2531a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   2531e:	213c      	movs	r1, #60	; 0x3c
   25320:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25324:	fb01 3302 	mla	r3, r1, r2, r3
   25328:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2532c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   25330:	fb01 3302 	mla	r3, r1, r2, r3
   25334:	436b      	muls	r3, r5
   25336:	e775      	b.n	25224 <_tzset_unlocked_r+0x174>
   25338:	f04f 0b01 	mov.w	fp, #1
   2533c:	e778      	b.n	25230 <_tzset_unlocked_r+0x180>
   2533e:	f1ba 0f4a 	cmp.w	sl, #74	; 0x4a
   25342:	f04f 020a 	mov.w	r2, #10
   25346:	a90b      	add	r1, sp, #44	; 0x2c
   25348:	bf06      	itte	eq
   2534a:	3501      	addeq	r5, #1
   2534c:	4653      	moveq	r3, sl
   2534e:	2344      	movne	r3, #68	; 0x44
   25350:	4628      	mov	r0, r5
   25352:	9305      	str	r3, [sp, #20]
   25354:	f7ff fde8 	bl	24f28 <strtoul>
   25358:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   2535c:	9b05      	ldr	r3, [sp, #20]
   2535e:	45aa      	cmp	sl, r5
   25360:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   25364:	d114      	bne.n	25390 <_tzset_unlocked_r+0x2e0>
   25366:	234d      	movs	r3, #77	; 0x4d
   25368:	f1bb 0f00 	cmp.w	fp, #0
   2536c:	d107      	bne.n	2537e <_tzset_unlocked_r+0x2ce>
   2536e:	2103      	movs	r1, #3
   25370:	7223      	strb	r3, [r4, #8]
   25372:	2302      	movs	r3, #2
   25374:	f8c4 b014 	str.w	fp, [r4, #20]
   25378:	e9c4 1303 	strd	r1, r3, [r4, #12]
   2537c:	e78c      	b.n	25298 <_tzset_unlocked_r+0x1e8>
   2537e:	220b      	movs	r2, #11
   25380:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   25384:	2301      	movs	r3, #1
   25386:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   2538a:	2300      	movs	r3, #0
   2538c:	63e3      	str	r3, [r4, #60]	; 0x3c
   2538e:	e783      	b.n	25298 <_tzset_unlocked_r+0x1e8>
   25390:	b280      	uxth	r0, r0
   25392:	f889 3008 	strb.w	r3, [r9, #8]
   25396:	f8c9 0014 	str.w	r0, [r9, #20]
   2539a:	e77d      	b.n	25298 <_tzset_unlocked_r+0x1e8>
   2539c:	000341dd 	.word	0x000341dd
   253a0:	2002f784 	.word	0x2002f784
   253a4:	2002f788 	.word	0x2002f788
   253a8:	000341e0 	.word	0x000341e0
   253ac:	2002f78c 	.word	0x2002f78c
   253b0:	20008800 	.word	0x20008800
   253b4:	200306aa 	.word	0x200306aa
   253b8:	000341e4 	.word	0x000341e4
   253bc:	00034207 	.word	0x00034207
   253c0:	2003069f 	.word	0x2003069f
   253c4:	000341f3 	.word	0x000341f3
   253c8:	00034206 	.word	0x00034206

000253cc <__assert_func>:
   253cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   253ce:	4614      	mov	r4, r2
   253d0:	461a      	mov	r2, r3
   253d2:	4b09      	ldr	r3, [pc, #36]	; (253f8 <__assert_func+0x2c>)
   253d4:	4605      	mov	r5, r0
   253d6:	681b      	ldr	r3, [r3, #0]
   253d8:	68d8      	ldr	r0, [r3, #12]
   253da:	b954      	cbnz	r4, 253f2 <__assert_func+0x26>
   253dc:	4b07      	ldr	r3, [pc, #28]	; (253fc <__assert_func+0x30>)
   253de:	461c      	mov	r4, r3
   253e0:	9100      	str	r1, [sp, #0]
   253e2:	4907      	ldr	r1, [pc, #28]	; (25400 <__assert_func+0x34>)
   253e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   253e8:	462b      	mov	r3, r5
   253ea:	f000 f8cd 	bl	25588 <fiprintf>
   253ee:	f007 fbe7 	bl	2cbc0 <abort>
   253f2:	4b04      	ldr	r3, [pc, #16]	; (25404 <__assert_func+0x38>)
   253f4:	e7f4      	b.n	253e0 <__assert_func+0x14>
   253f6:	bf00      	nop
   253f8:	2000879c 	.word	0x2000879c
   253fc:	00032365 	.word	0x00032365
   25400:	00034226 	.word	0x00034226
   25404:	00034219 	.word	0x00034219

00025408 <std>:
   25408:	2300      	movs	r3, #0
   2540a:	b510      	push	{r4, lr}
   2540c:	4604      	mov	r4, r0
   2540e:	6083      	str	r3, [r0, #8]
   25410:	8181      	strh	r1, [r0, #12]
   25412:	4619      	mov	r1, r3
   25414:	6643      	str	r3, [r0, #100]	; 0x64
   25416:	81c2      	strh	r2, [r0, #14]
   25418:	2208      	movs	r2, #8
   2541a:	6183      	str	r3, [r0, #24]
   2541c:	e9c0 3300 	strd	r3, r3, [r0]
   25420:	e9c0 3304 	strd	r3, r3, [r0, #16]
   25424:	305c      	adds	r0, #92	; 0x5c
   25426:	f006 fe8b 	bl	2c140 <memset>
   2542a:	4b05      	ldr	r3, [pc, #20]	; (25440 <std+0x38>)
   2542c:	6224      	str	r4, [r4, #32]
   2542e:	6263      	str	r3, [r4, #36]	; 0x24
   25430:	4b04      	ldr	r3, [pc, #16]	; (25444 <std+0x3c>)
   25432:	62a3      	str	r3, [r4, #40]	; 0x28
   25434:	4b04      	ldr	r3, [pc, #16]	; (25448 <std+0x40>)
   25436:	62e3      	str	r3, [r4, #44]	; 0x2c
   25438:	4b04      	ldr	r3, [pc, #16]	; (2544c <std+0x44>)
   2543a:	6323      	str	r3, [r4, #48]	; 0x30
   2543c:	bd10      	pop	{r4, pc}
   2543e:	bf00      	nop
   25440:	0002cb1d 	.word	0x0002cb1d
   25444:	0002cb43 	.word	0x0002cb43
   25448:	0002cb7b 	.word	0x0002cb7b
   2544c:	0002cb9f 	.word	0x0002cb9f

00025450 <_cleanup_r>:
   25450:	4901      	ldr	r1, [pc, #4]	; (25458 <_cleanup_r+0x8>)
   25452:	f007 b8f1 	b.w	2c638 <_fwalk_reent>
   25456:	bf00      	nop
   25458:	000266d5 	.word	0x000266d5

0002545c <__sfp_lock_acquire>:
   2545c:	4801      	ldr	r0, [pc, #4]	; (25464 <__sfp_lock_acquire+0x8>)
   2545e:	f7ec be0f 	b.w	12080 <__retarget_lock_acquire_recursive>
   25462:	bf00      	nop
   25464:	20008b0c 	.word	0x20008b0c

00025468 <__sfp_lock_release>:
   25468:	4801      	ldr	r0, [pc, #4]	; (25470 <__sfp_lock_release+0x8>)
   2546a:	f7ec be3d 	b.w	120e8 <__retarget_lock_release_recursive>
   2546e:	bf00      	nop
   25470:	20008b0c 	.word	0x20008b0c

00025474 <__sinit_lock_acquire>:
   25474:	4801      	ldr	r0, [pc, #4]	; (2547c <__sinit_lock_acquire+0x8>)
   25476:	f7ec be03 	b.w	12080 <__retarget_lock_acquire_recursive>
   2547a:	bf00      	nop
   2547c:	20008b20 	.word	0x20008b20

00025480 <__sinit_lock_release>:
   25480:	4801      	ldr	r0, [pc, #4]	; (25488 <__sinit_lock_release+0x8>)
   25482:	f7ec be31 	b.w	120e8 <__retarget_lock_release_recursive>
   25486:	bf00      	nop
   25488:	20008b20 	.word	0x20008b20

0002548c <__sinit>:
   2548c:	b510      	push	{r4, lr}
   2548e:	4604      	mov	r4, r0
   25490:	f7ff fff0 	bl	25474 <__sinit_lock_acquire>
   25494:	69a3      	ldr	r3, [r4, #24]
   25496:	b11b      	cbz	r3, 254a0 <__sinit+0x14>
   25498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2549c:	f7ff bff0 	b.w	25480 <__sinit_lock_release>
   254a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   254a4:	6523      	str	r3, [r4, #80]	; 0x50
   254a6:	4620      	mov	r0, r4
   254a8:	4b12      	ldr	r3, [pc, #72]	; (254f4 <__sinit+0x68>)
   254aa:	4a13      	ldr	r2, [pc, #76]	; (254f8 <__sinit+0x6c>)
   254ac:	681b      	ldr	r3, [r3, #0]
   254ae:	62a2      	str	r2, [r4, #40]	; 0x28
   254b0:	42a3      	cmp	r3, r4
   254b2:	bf04      	itt	eq
   254b4:	2301      	moveq	r3, #1
   254b6:	61a3      	streq	r3, [r4, #24]
   254b8:	f000 f820 	bl	254fc <__sfp>
   254bc:	6060      	str	r0, [r4, #4]
   254be:	4620      	mov	r0, r4
   254c0:	f000 f81c 	bl	254fc <__sfp>
   254c4:	60a0      	str	r0, [r4, #8]
   254c6:	4620      	mov	r0, r4
   254c8:	f000 f818 	bl	254fc <__sfp>
   254cc:	2200      	movs	r2, #0
   254ce:	2104      	movs	r1, #4
   254d0:	60e0      	str	r0, [r4, #12]
   254d2:	6860      	ldr	r0, [r4, #4]
   254d4:	f7ff ff98 	bl	25408 <std>
   254d8:	2201      	movs	r2, #1
   254da:	2109      	movs	r1, #9
   254dc:	68a0      	ldr	r0, [r4, #8]
   254de:	f7ff ff93 	bl	25408 <std>
   254e2:	2202      	movs	r2, #2
   254e4:	2112      	movs	r1, #18
   254e6:	68e0      	ldr	r0, [r4, #12]
   254e8:	f7ff ff8e 	bl	25408 <std>
   254ec:	2301      	movs	r3, #1
   254ee:	61a3      	str	r3, [r4, #24]
   254f0:	e7d2      	b.n	25498 <__sinit+0xc>
   254f2:	bf00      	nop
   254f4:	0002e52c 	.word	0x0002e52c
   254f8:	00025451 	.word	0x00025451

000254fc <__sfp>:
   254fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   254fe:	4607      	mov	r7, r0
   25500:	f7ff ffac 	bl	2545c <__sfp_lock_acquire>
   25504:	4b1e      	ldr	r3, [pc, #120]	; (25580 <__sfp+0x84>)
   25506:	681e      	ldr	r6, [r3, #0]
   25508:	69b3      	ldr	r3, [r6, #24]
   2550a:	b913      	cbnz	r3, 25512 <__sfp+0x16>
   2550c:	4630      	mov	r0, r6
   2550e:	f7ff ffbd 	bl	2548c <__sinit>
   25512:	3648      	adds	r6, #72	; 0x48
   25514:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   25518:	3b01      	subs	r3, #1
   2551a:	d503      	bpl.n	25524 <__sfp+0x28>
   2551c:	6833      	ldr	r3, [r6, #0]
   2551e:	b30b      	cbz	r3, 25564 <__sfp+0x68>
   25520:	6836      	ldr	r6, [r6, #0]
   25522:	e7f7      	b.n	25514 <__sfp+0x18>
   25524:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   25528:	b9d5      	cbnz	r5, 25560 <__sfp+0x64>
   2552a:	4b16      	ldr	r3, [pc, #88]	; (25584 <__sfp+0x88>)
   2552c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   25530:	6665      	str	r5, [r4, #100]	; 0x64
   25532:	60e3      	str	r3, [r4, #12]
   25534:	f7ec fd58 	bl	11fe8 <__retarget_lock_init_recursive>
   25538:	f7ff ff96 	bl	25468 <__sfp_lock_release>
   2553c:	2208      	movs	r2, #8
   2553e:	4629      	mov	r1, r5
   25540:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   25544:	6025      	str	r5, [r4, #0]
   25546:	61a5      	str	r5, [r4, #24]
   25548:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2554c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   25550:	f006 fdf6 	bl	2c140 <memset>
   25554:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   25558:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   2555c:	4620      	mov	r0, r4
   2555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25560:	3468      	adds	r4, #104	; 0x68
   25562:	e7d9      	b.n	25518 <__sfp+0x1c>
   25564:	2104      	movs	r1, #4
   25566:	4638      	mov	r0, r7
   25568:	f007 f850 	bl	2c60c <__sfmoreglue>
   2556c:	4604      	mov	r4, r0
   2556e:	6030      	str	r0, [r6, #0]
   25570:	2800      	cmp	r0, #0
   25572:	d1d5      	bne.n	25520 <__sfp+0x24>
   25574:	f7ff ff78 	bl	25468 <__sfp_lock_release>
   25578:	230c      	movs	r3, #12
   2557a:	603b      	str	r3, [r7, #0]
   2557c:	e7ee      	b.n	2555c <__sfp+0x60>
   2557e:	bf00      	nop
   25580:	0002e52c 	.word	0x0002e52c
   25584:	ffff0001 	.word	0xffff0001

00025588 <fiprintf>:
   25588:	b40e      	push	{r1, r2, r3}
   2558a:	b503      	push	{r0, r1, lr}
   2558c:	ab03      	add	r3, sp, #12
   2558e:	4601      	mov	r1, r0
   25590:	4805      	ldr	r0, [pc, #20]	; (255a8 <fiprintf+0x20>)
   25592:	f853 2b04 	ldr.w	r2, [r3], #4
   25596:	6800      	ldr	r0, [r0, #0]
   25598:	9301      	str	r3, [sp, #4]
   2559a:	f000 fe59 	bl	26250 <_vfiprintf_r>
   2559e:	b002      	add	sp, #8
   255a0:	f85d eb04 	ldr.w	lr, [sp], #4
   255a4:	b003      	add	sp, #12
   255a6:	4770      	bx	lr
   255a8:	2000879c 	.word	0x2000879c

000255ac <__gethex>:
   255ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255b0:	b08b      	sub	sp, #44	; 0x2c
   255b2:	468b      	mov	fp, r1
   255b4:	4690      	mov	r8, r2
   255b6:	9305      	str	r3, [sp, #20]
   255b8:	4bac      	ldr	r3, [pc, #688]	; (2586c <__gethex+0x2c0>)
   255ba:	9002      	str	r0, [sp, #8]
   255bc:	681b      	ldr	r3, [r3, #0]
   255be:	4618      	mov	r0, r3
   255c0:	9303      	str	r3, [sp, #12]
   255c2:	f7e3 ff22 	bl	940a <strlen>
   255c6:	9b03      	ldr	r3, [sp, #12]
   255c8:	9001      	str	r0, [sp, #4]
   255ca:	4403      	add	r3, r0
   255cc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   255d0:	9306      	str	r3, [sp, #24]
   255d2:	f8db 3000 	ldr.w	r3, [fp]
   255d6:	1c9a      	adds	r2, r3, #2
   255d8:	4617      	mov	r7, r2
   255da:	f812 0b01 	ldrb.w	r0, [r2], #1
   255de:	2830      	cmp	r0, #48	; 0x30
   255e0:	d0fa      	beq.n	255d8 <__gethex+0x2c>
   255e2:	1afb      	subs	r3, r7, r3
   255e4:	f1a3 0a02 	sub.w	sl, r3, #2
   255e8:	f007 f896 	bl	2c718 <__hexdig_fun>
   255ec:	4604      	mov	r4, r0
   255ee:	2800      	cmp	r0, #0
   255f0:	d138      	bne.n	25664 <__gethex+0xb8>
   255f2:	9a01      	ldr	r2, [sp, #4]
   255f4:	4638      	mov	r0, r7
   255f6:	9903      	ldr	r1, [sp, #12]
   255f8:	f006 fedf 	bl	2c3ba <strncmp>
   255fc:	4605      	mov	r5, r0
   255fe:	2800      	cmp	r0, #0
   25600:	d164      	bne.n	256cc <__gethex+0x120>
   25602:	9b01      	ldr	r3, [sp, #4]
   25604:	5cf8      	ldrb	r0, [r7, r3]
   25606:	18fe      	adds	r6, r7, r3
   25608:	f007 f886 	bl	2c718 <__hexdig_fun>
   2560c:	2800      	cmp	r0, #0
   2560e:	d05f      	beq.n	256d0 <__gethex+0x124>
   25610:	4633      	mov	r3, r6
   25612:	7818      	ldrb	r0, [r3, #0]
   25614:	461f      	mov	r7, r3
   25616:	3301      	adds	r3, #1
   25618:	2830      	cmp	r0, #48	; 0x30
   2561a:	d0fa      	beq.n	25612 <__gethex+0x66>
   2561c:	f007 f87c 	bl	2c718 <__hexdig_fun>
   25620:	fab0 f480 	clz	r4, r0
   25624:	4635      	mov	r5, r6
   25626:	f04f 0a01 	mov.w	sl, #1
   2562a:	0964      	lsrs	r4, r4, #5
   2562c:	463a      	mov	r2, r7
   2562e:	4616      	mov	r6, r2
   25630:	3201      	adds	r2, #1
   25632:	7830      	ldrb	r0, [r6, #0]
   25634:	f007 f870 	bl	2c718 <__hexdig_fun>
   25638:	2800      	cmp	r0, #0
   2563a:	d1f8      	bne.n	2562e <__gethex+0x82>
   2563c:	9a01      	ldr	r2, [sp, #4]
   2563e:	4630      	mov	r0, r6
   25640:	9903      	ldr	r1, [sp, #12]
   25642:	f006 feba 	bl	2c3ba <strncmp>
   25646:	b980      	cbnz	r0, 2566a <__gethex+0xbe>
   25648:	b94d      	cbnz	r5, 2565e <__gethex+0xb2>
   2564a:	9b01      	ldr	r3, [sp, #4]
   2564c:	18f5      	adds	r5, r6, r3
   2564e:	462a      	mov	r2, r5
   25650:	4616      	mov	r6, r2
   25652:	3201      	adds	r2, #1
   25654:	7830      	ldrb	r0, [r6, #0]
   25656:	f007 f85f 	bl	2c718 <__hexdig_fun>
   2565a:	2800      	cmp	r0, #0
   2565c:	d1f8      	bne.n	25650 <__gethex+0xa4>
   2565e:	1bad      	subs	r5, r5, r6
   25660:	00ad      	lsls	r5, r5, #2
   25662:	e004      	b.n	2566e <__gethex+0xc2>
   25664:	2400      	movs	r4, #0
   25666:	4625      	mov	r5, r4
   25668:	e7e0      	b.n	2562c <__gethex+0x80>
   2566a:	2d00      	cmp	r5, #0
   2566c:	d1f7      	bne.n	2565e <__gethex+0xb2>
   2566e:	7833      	ldrb	r3, [r6, #0]
   25670:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25674:	2b50      	cmp	r3, #80	; 0x50
   25676:	d138      	bne.n	256ea <__gethex+0x13e>
   25678:	7873      	ldrb	r3, [r6, #1]
   2567a:	2b2b      	cmp	r3, #43	; 0x2b
   2567c:	d02a      	beq.n	256d4 <__gethex+0x128>
   2567e:	2b2d      	cmp	r3, #45	; 0x2d
   25680:	d02c      	beq.n	256dc <__gethex+0x130>
   25682:	1c71      	adds	r1, r6, #1
   25684:	f04f 0900 	mov.w	r9, #0
   25688:	7808      	ldrb	r0, [r1, #0]
   2568a:	f007 f845 	bl	2c718 <__hexdig_fun>
   2568e:	1e43      	subs	r3, r0, #1
   25690:	b2db      	uxtb	r3, r3
   25692:	2b18      	cmp	r3, #24
   25694:	d829      	bhi.n	256ea <__gethex+0x13e>
   25696:	f1a0 0210 	sub.w	r2, r0, #16
   2569a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2569e:	f007 f83b 	bl	2c718 <__hexdig_fun>
   256a2:	1e43      	subs	r3, r0, #1
   256a4:	b2db      	uxtb	r3, r3
   256a6:	2b18      	cmp	r3, #24
   256a8:	d91b      	bls.n	256e2 <__gethex+0x136>
   256aa:	f1b9 0f00 	cmp.w	r9, #0
   256ae:	d000      	beq.n	256b2 <__gethex+0x106>
   256b0:	4252      	negs	r2, r2
   256b2:	4415      	add	r5, r2
   256b4:	f8cb 1000 	str.w	r1, [fp]
   256b8:	b1cc      	cbz	r4, 256ee <__gethex+0x142>
   256ba:	f1ba 0f00 	cmp.w	sl, #0
   256be:	bf0c      	ite	eq
   256c0:	2606      	moveq	r6, #6
   256c2:	2600      	movne	r6, #0
   256c4:	4630      	mov	r0, r6
   256c6:	b00b      	add	sp, #44	; 0x2c
   256c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256cc:	463e      	mov	r6, r7
   256ce:	4625      	mov	r5, r4
   256d0:	2401      	movs	r4, #1
   256d2:	e7cc      	b.n	2566e <__gethex+0xc2>
   256d4:	f04f 0900 	mov.w	r9, #0
   256d8:	1cb1      	adds	r1, r6, #2
   256da:	e7d5      	b.n	25688 <__gethex+0xdc>
   256dc:	f04f 0901 	mov.w	r9, #1
   256e0:	e7fa      	b.n	256d8 <__gethex+0x12c>
   256e2:	230a      	movs	r3, #10
   256e4:	fb03 0002 	mla	r0, r3, r2, r0
   256e8:	e7d5      	b.n	25696 <__gethex+0xea>
   256ea:	4631      	mov	r1, r6
   256ec:	e7e2      	b.n	256b4 <__gethex+0x108>
   256ee:	1bf3      	subs	r3, r6, r7
   256f0:	4621      	mov	r1, r4
   256f2:	3b01      	subs	r3, #1
   256f4:	2b07      	cmp	r3, #7
   256f6:	dc0a      	bgt.n	2570e <__gethex+0x162>
   256f8:	9802      	ldr	r0, [sp, #8]
   256fa:	f000 f9d7 	bl	25aac <_Balloc>
   256fe:	4604      	mov	r4, r0
   25700:	b940      	cbnz	r0, 25714 <__gethex+0x168>
   25702:	4b5b      	ldr	r3, [pc, #364]	; (25870 <__gethex+0x2c4>)
   25704:	4602      	mov	r2, r0
   25706:	21de      	movs	r1, #222	; 0xde
   25708:	485a      	ldr	r0, [pc, #360]	; (25874 <__gethex+0x2c8>)
   2570a:	f7ff fe5f 	bl	253cc <__assert_func>
   2570e:	3101      	adds	r1, #1
   25710:	105b      	asrs	r3, r3, #1
   25712:	e7ef      	b.n	256f4 <__gethex+0x148>
   25714:	f04f 0b00 	mov.w	fp, #0
   25718:	9b01      	ldr	r3, [sp, #4]
   2571a:	f100 0914 	add.w	r9, r0, #20
   2571e:	f1c3 0301 	rsb	r3, r3, #1
   25722:	46da      	mov	sl, fp
   25724:	f8cd 9010 	str.w	r9, [sp, #16]
   25728:	9308      	str	r3, [sp, #32]
   2572a:	42b7      	cmp	r7, r6
   2572c:	d338      	bcc.n	257a0 <__gethex+0x1f4>
   2572e:	9e04      	ldr	r6, [sp, #16]
   25730:	4650      	mov	r0, sl
   25732:	f846 ab04 	str.w	sl, [r6], #4
   25736:	eba6 0609 	sub.w	r6, r6, r9
   2573a:	10b6      	asrs	r6, r6, #2
   2573c:	6126      	str	r6, [r4, #16]
   2573e:	0176      	lsls	r6, r6, #5
   25740:	f007 f8e7 	bl	2c912 <__hi0bits>
   25744:	f8d8 7000 	ldr.w	r7, [r8]
   25748:	1a36      	subs	r6, r6, r0
   2574a:	42be      	cmp	r6, r7
   2574c:	dd60      	ble.n	25810 <__gethex+0x264>
   2574e:	1bf6      	subs	r6, r6, r7
   25750:	4620      	mov	r0, r4
   25752:	4631      	mov	r1, r6
   25754:	f007 f99a 	bl	2ca8c <__any_on>
   25758:	4682      	mov	sl, r0
   2575a:	b178      	cbz	r0, 2577c <__gethex+0x1d0>
   2575c:	1e73      	subs	r3, r6, #1
   2575e:	f04f 0a01 	mov.w	sl, #1
   25762:	1159      	asrs	r1, r3, #5
   25764:	f003 021f 	and.w	r2, r3, #31
   25768:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   2576c:	fa0a f202 	lsl.w	r2, sl, r2
   25770:	420a      	tst	r2, r1
   25772:	d003      	beq.n	2577c <__gethex+0x1d0>
   25774:	4553      	cmp	r3, sl
   25776:	dc42      	bgt.n	257fe <__gethex+0x252>
   25778:	f04f 0a02 	mov.w	sl, #2
   2577c:	4435      	add	r5, r6
   2577e:	4631      	mov	r1, r6
   25780:	4620      	mov	r0, r4
   25782:	f006 ff78 	bl	2c676 <rshift>
   25786:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2578a:	42ab      	cmp	r3, r5
   2578c:	da4e      	bge.n	2582c <__gethex+0x280>
   2578e:	4621      	mov	r1, r4
   25790:	9802      	ldr	r0, [sp, #8]
   25792:	f000 f9cb 	bl	25b2c <_Bfree>
   25796:	2300      	movs	r3, #0
   25798:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2579a:	26a3      	movs	r6, #163	; 0xa3
   2579c:	6013      	str	r3, [r2, #0]
   2579e:	e791      	b.n	256c4 <__gethex+0x118>
   257a0:	1e73      	subs	r3, r6, #1
   257a2:	9a06      	ldr	r2, [sp, #24]
   257a4:	9307      	str	r3, [sp, #28]
   257a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   257aa:	4293      	cmp	r3, r2
   257ac:	d017      	beq.n	257de <__gethex+0x232>
   257ae:	f1bb 0f20 	cmp.w	fp, #32
   257b2:	d106      	bne.n	257c2 <__gethex+0x216>
   257b4:	9b04      	ldr	r3, [sp, #16]
   257b6:	f843 ab04 	str.w	sl, [r3], #4
   257ba:	f04f 0a00 	mov.w	sl, #0
   257be:	9304      	str	r3, [sp, #16]
   257c0:	46d3      	mov	fp, sl
   257c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   257c6:	f006 ffa7 	bl	2c718 <__hexdig_fun>
   257ca:	f000 000f 	and.w	r0, r0, #15
   257ce:	9b07      	ldr	r3, [sp, #28]
   257d0:	fa00 f00b 	lsl.w	r0, r0, fp
   257d4:	f10b 0b04 	add.w	fp, fp, #4
   257d8:	ea4a 0a00 	orr.w	sl, sl, r0
   257dc:	e00d      	b.n	257fa <__gethex+0x24e>
   257de:	1e73      	subs	r3, r6, #1
   257e0:	9a08      	ldr	r2, [sp, #32]
   257e2:	4413      	add	r3, r2
   257e4:	42bb      	cmp	r3, r7
   257e6:	d3e2      	bcc.n	257ae <__gethex+0x202>
   257e8:	4618      	mov	r0, r3
   257ea:	9a01      	ldr	r2, [sp, #4]
   257ec:	9903      	ldr	r1, [sp, #12]
   257ee:	9309      	str	r3, [sp, #36]	; 0x24
   257f0:	f006 fde3 	bl	2c3ba <strncmp>
   257f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   257f6:	2800      	cmp	r0, #0
   257f8:	d1d9      	bne.n	257ae <__gethex+0x202>
   257fa:	461e      	mov	r6, r3
   257fc:	e795      	b.n	2572a <__gethex+0x17e>
   257fe:	1eb1      	subs	r1, r6, #2
   25800:	4620      	mov	r0, r4
   25802:	f007 f943 	bl	2ca8c <__any_on>
   25806:	2800      	cmp	r0, #0
   25808:	d0b6      	beq.n	25778 <__gethex+0x1cc>
   2580a:	f04f 0a03 	mov.w	sl, #3
   2580e:	e7b5      	b.n	2577c <__gethex+0x1d0>
   25810:	da09      	bge.n	25826 <__gethex+0x27a>
   25812:	1bbe      	subs	r6, r7, r6
   25814:	4621      	mov	r1, r4
   25816:	9802      	ldr	r0, [sp, #8]
   25818:	4632      	mov	r2, r6
   2581a:	1bad      	subs	r5, r5, r6
   2581c:	f000 fb54 	bl	25ec8 <__lshift>
   25820:	4604      	mov	r4, r0
   25822:	f100 0914 	add.w	r9, r0, #20
   25826:	f04f 0a00 	mov.w	sl, #0
   2582a:	e7ac      	b.n	25786 <__gethex+0x1da>
   2582c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25830:	42ab      	cmp	r3, r5
   25832:	dd70      	ble.n	25916 <__gethex+0x36a>
   25834:	1b5d      	subs	r5, r3, r5
   25836:	42af      	cmp	r7, r5
   25838:	dc35      	bgt.n	258a6 <__gethex+0x2fa>
   2583a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2583e:	2b02      	cmp	r3, #2
   25840:	d029      	beq.n	25896 <__gethex+0x2ea>
   25842:	2b03      	cmp	r3, #3
   25844:	d02b      	beq.n	2589e <__gethex+0x2f2>
   25846:	2b01      	cmp	r3, #1
   25848:	d11c      	bne.n	25884 <__gethex+0x2d8>
   2584a:	42af      	cmp	r7, r5
   2584c:	d11a      	bne.n	25884 <__gethex+0x2d8>
   2584e:	2f01      	cmp	r7, #1
   25850:	d112      	bne.n	25878 <__gethex+0x2cc>
   25852:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25856:	2662      	movs	r6, #98	; 0x62
   25858:	9a05      	ldr	r2, [sp, #20]
   2585a:	6013      	str	r3, [r2, #0]
   2585c:	2301      	movs	r3, #1
   2585e:	6123      	str	r3, [r4, #16]
   25860:	f8c9 3000 	str.w	r3, [r9]
   25864:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25866:	601c      	str	r4, [r3, #0]
   25868:	e72c      	b.n	256c4 <__gethex+0x118>
   2586a:	bf00      	nop
   2586c:	0002e618 	.word	0x0002e618
   25870:	000342d6 	.word	0x000342d6
   25874:	000342e7 	.word	0x000342e7
   25878:	1e79      	subs	r1, r7, #1
   2587a:	4620      	mov	r0, r4
   2587c:	f007 f906 	bl	2ca8c <__any_on>
   25880:	2800      	cmp	r0, #0
   25882:	d1e6      	bne.n	25852 <__gethex+0x2a6>
   25884:	4621      	mov	r1, r4
   25886:	9802      	ldr	r0, [sp, #8]
   25888:	f000 f950 	bl	25b2c <_Bfree>
   2588c:	2300      	movs	r3, #0
   2588e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   25890:	2650      	movs	r6, #80	; 0x50
   25892:	6013      	str	r3, [r2, #0]
   25894:	e716      	b.n	256c4 <__gethex+0x118>
   25896:	9b15      	ldr	r3, [sp, #84]	; 0x54
   25898:	2b00      	cmp	r3, #0
   2589a:	d1f3      	bne.n	25884 <__gethex+0x2d8>
   2589c:	e7d9      	b.n	25852 <__gethex+0x2a6>
   2589e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   258a0:	2b00      	cmp	r3, #0
   258a2:	d1d6      	bne.n	25852 <__gethex+0x2a6>
   258a4:	e7ee      	b.n	25884 <__gethex+0x2d8>
   258a6:	1e6e      	subs	r6, r5, #1
   258a8:	f1ba 0f00 	cmp.w	sl, #0
   258ac:	d130      	bne.n	25910 <__gethex+0x364>
   258ae:	b126      	cbz	r6, 258ba <__gethex+0x30e>
   258b0:	4631      	mov	r1, r6
   258b2:	4620      	mov	r0, r4
   258b4:	f007 f8ea 	bl	2ca8c <__any_on>
   258b8:	4682      	mov	sl, r0
   258ba:	1172      	asrs	r2, r6, #5
   258bc:	2301      	movs	r3, #1
   258be:	f006 061f 	and.w	r6, r6, #31
   258c2:	4629      	mov	r1, r5
   258c4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   258c8:	4620      	mov	r0, r4
   258ca:	40b3      	lsls	r3, r6
   258cc:	1b7f      	subs	r7, r7, r5
   258ce:	2602      	movs	r6, #2
   258d0:	4213      	tst	r3, r2
   258d2:	bf18      	it	ne
   258d4:	f04a 0a02 	orrne.w	sl, sl, #2
   258d8:	f006 fecd 	bl	2c676 <rshift>
   258dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
   258e0:	f1ba 0f00 	cmp.w	sl, #0
   258e4:	d047      	beq.n	25976 <__gethex+0x3ca>
   258e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   258ea:	2b02      	cmp	r3, #2
   258ec:	d015      	beq.n	2591a <__gethex+0x36e>
   258ee:	2b03      	cmp	r3, #3
   258f0:	d017      	beq.n	25922 <__gethex+0x376>
   258f2:	2b01      	cmp	r3, #1
   258f4:	d109      	bne.n	2590a <__gethex+0x35e>
   258f6:	f01a 0f02 	tst.w	sl, #2
   258fa:	d006      	beq.n	2590a <__gethex+0x35e>
   258fc:	f8d9 3000 	ldr.w	r3, [r9]
   25900:	ea4a 0a03 	orr.w	sl, sl, r3
   25904:	f01a 0f01 	tst.w	sl, #1
   25908:	d10e      	bne.n	25928 <__gethex+0x37c>
   2590a:	f046 0610 	orr.w	r6, r6, #16
   2590e:	e032      	b.n	25976 <__gethex+0x3ca>
   25910:	f04f 0a01 	mov.w	sl, #1
   25914:	e7d1      	b.n	258ba <__gethex+0x30e>
   25916:	2601      	movs	r6, #1
   25918:	e7e2      	b.n	258e0 <__gethex+0x334>
   2591a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2591c:	f1c3 0301 	rsb	r3, r3, #1
   25920:	9315      	str	r3, [sp, #84]	; 0x54
   25922:	9b15      	ldr	r3, [sp, #84]	; 0x54
   25924:	2b00      	cmp	r3, #0
   25926:	d0f0      	beq.n	2590a <__gethex+0x35e>
   25928:	f8d4 b010 	ldr.w	fp, [r4, #16]
   2592c:	f104 0314 	add.w	r3, r4, #20
   25930:	f04f 0c00 	mov.w	ip, #0
   25934:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   25938:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   2593c:	4618      	mov	r0, r3
   2593e:	f853 2b04 	ldr.w	r2, [r3], #4
   25942:	f1b2 3fff 	cmp.w	r2, #4294967295
   25946:	d01b      	beq.n	25980 <__gethex+0x3d4>
   25948:	3201      	adds	r2, #1
   2594a:	6002      	str	r2, [r0, #0]
   2594c:	2e02      	cmp	r6, #2
   2594e:	f104 0314 	add.w	r3, r4, #20
   25952:	d13c      	bne.n	259ce <__gethex+0x422>
   25954:	f8d8 2000 	ldr.w	r2, [r8]
   25958:	3a01      	subs	r2, #1
   2595a:	42ba      	cmp	r2, r7
   2595c:	d109      	bne.n	25972 <__gethex+0x3c6>
   2595e:	1179      	asrs	r1, r7, #5
   25960:	2201      	movs	r2, #1
   25962:	f007 071f 	and.w	r7, r7, #31
   25966:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2596a:	fa02 f707 	lsl.w	r7, r2, r7
   2596e:	421f      	tst	r7, r3
   25970:	d13a      	bne.n	259e8 <__gethex+0x43c>
   25972:	f046 0620 	orr.w	r6, r6, #32
   25976:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25978:	601c      	str	r4, [r3, #0]
   2597a:	9b05      	ldr	r3, [sp, #20]
   2597c:	601d      	str	r5, [r3, #0]
   2597e:	e6a1      	b.n	256c4 <__gethex+0x118>
   25980:	4299      	cmp	r1, r3
   25982:	f843 cc04 	str.w	ip, [r3, #-4]
   25986:	d8d9      	bhi.n	2593c <__gethex+0x390>
   25988:	68a3      	ldr	r3, [r4, #8]
   2598a:	459b      	cmp	fp, r3
   2598c:	db17      	blt.n	259be <__gethex+0x412>
   2598e:	6861      	ldr	r1, [r4, #4]
   25990:	9802      	ldr	r0, [sp, #8]
   25992:	3101      	adds	r1, #1
   25994:	f000 f88a 	bl	25aac <_Balloc>
   25998:	4681      	mov	r9, r0
   2599a:	b918      	cbnz	r0, 259a4 <__gethex+0x3f8>
   2599c:	4b1a      	ldr	r3, [pc, #104]	; (25a08 <__gethex+0x45c>)
   2599e:	4602      	mov	r2, r0
   259a0:	2184      	movs	r1, #132	; 0x84
   259a2:	e6b1      	b.n	25708 <__gethex+0x15c>
   259a4:	6922      	ldr	r2, [r4, #16]
   259a6:	f104 010c 	add.w	r1, r4, #12
   259aa:	300c      	adds	r0, #12
   259ac:	3202      	adds	r2, #2
   259ae:	0092      	lsls	r2, r2, #2
   259b0:	f006 fb8c 	bl	2c0cc <memcpy>
   259b4:	4621      	mov	r1, r4
   259b6:	464c      	mov	r4, r9
   259b8:	9802      	ldr	r0, [sp, #8]
   259ba:	f000 f8b7 	bl	25b2c <_Bfree>
   259be:	6923      	ldr	r3, [r4, #16]
   259c0:	1c5a      	adds	r2, r3, #1
   259c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   259c6:	6122      	str	r2, [r4, #16]
   259c8:	2201      	movs	r2, #1
   259ca:	615a      	str	r2, [r3, #20]
   259cc:	e7be      	b.n	2594c <__gethex+0x3a0>
   259ce:	6922      	ldr	r2, [r4, #16]
   259d0:	455a      	cmp	r2, fp
   259d2:	dd0b      	ble.n	259ec <__gethex+0x440>
   259d4:	2101      	movs	r1, #1
   259d6:	4620      	mov	r0, r4
   259d8:	f006 fe4d 	bl	2c676 <rshift>
   259dc:	3501      	adds	r5, #1
   259de:	f8d8 3008 	ldr.w	r3, [r8, #8]
   259e2:	42ab      	cmp	r3, r5
   259e4:	f6ff aed3 	blt.w	2578e <__gethex+0x1e2>
   259e8:	2601      	movs	r6, #1
   259ea:	e7c2      	b.n	25972 <__gethex+0x3c6>
   259ec:	f017 071f 	ands.w	r7, r7, #31
   259f0:	d0fa      	beq.n	259e8 <__gethex+0x43c>
   259f2:	4453      	add	r3, sl
   259f4:	f1c7 0720 	rsb	r7, r7, #32
   259f8:	f853 0c04 	ldr.w	r0, [r3, #-4]
   259fc:	f006 ff89 	bl	2c912 <__hi0bits>
   25a00:	42b8      	cmp	r0, r7
   25a02:	dbe7      	blt.n	259d4 <__gethex+0x428>
   25a04:	e7f0      	b.n	259e8 <__gethex+0x43c>
   25a06:	bf00      	nop
   25a08:	000342d6 	.word	0x000342d6

00025a0c <_findenv_r>:
   25a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a10:	f8df a06c 	ldr.w	sl, [pc, #108]	; 25a80 <_findenv_r+0x74>
   25a14:	4606      	mov	r6, r0
   25a16:	4689      	mov	r9, r1
   25a18:	4617      	mov	r7, r2
   25a1a:	f000 fe4f 	bl	266bc <__env_lock>
   25a1e:	f8da 4000 	ldr.w	r4, [sl]
   25a22:	b134      	cbz	r4, 25a32 <_findenv_r+0x26>
   25a24:	464b      	mov	r3, r9
   25a26:	4698      	mov	r8, r3
   25a28:	f813 2b01 	ldrb.w	r2, [r3], #1
   25a2c:	b13a      	cbz	r2, 25a3e <_findenv_r+0x32>
   25a2e:	2a3d      	cmp	r2, #61	; 0x3d
   25a30:	d1f9      	bne.n	25a26 <_findenv_r+0x1a>
   25a32:	4630      	mov	r0, r6
   25a34:	f000 fe48 	bl	266c8 <__env_unlock>
   25a38:	2000      	movs	r0, #0
   25a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a3e:	eba8 0809 	sub.w	r8, r8, r9
   25a42:	46a3      	mov	fp, r4
   25a44:	f854 0b04 	ldr.w	r0, [r4], #4
   25a48:	2800      	cmp	r0, #0
   25a4a:	d0f2      	beq.n	25a32 <_findenv_r+0x26>
   25a4c:	4642      	mov	r2, r8
   25a4e:	4649      	mov	r1, r9
   25a50:	f006 fcb3 	bl	2c3ba <strncmp>
   25a54:	2800      	cmp	r0, #0
   25a56:	d1f4      	bne.n	25a42 <_findenv_r+0x36>
   25a58:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25a5c:	eb03 0508 	add.w	r5, r3, r8
   25a60:	f813 3008 	ldrb.w	r3, [r3, r8]
   25a64:	2b3d      	cmp	r3, #61	; 0x3d
   25a66:	d1ec      	bne.n	25a42 <_findenv_r+0x36>
   25a68:	f8da 3000 	ldr.w	r3, [sl]
   25a6c:	4630      	mov	r0, r6
   25a6e:	ebab 0303 	sub.w	r3, fp, r3
   25a72:	109b      	asrs	r3, r3, #2
   25a74:	603b      	str	r3, [r7, #0]
   25a76:	f000 fe27 	bl	266c8 <__env_unlock>
   25a7a:	1c68      	adds	r0, r5, #1
   25a7c:	e7dd      	b.n	25a3a <_findenv_r+0x2e>
   25a7e:	bf00      	nop
   25a80:	20008974 	.word	0x20008974

00025a84 <__gettzinfo>:
   25a84:	4800      	ldr	r0, [pc, #0]	; (25a88 <__gettzinfo+0x4>)
   25a86:	4770      	bx	lr
   25a88:	200083b0 	.word	0x200083b0

00025a8c <_localeconv_r>:
   25a8c:	4800      	ldr	r0, [pc, #0]	; (25a90 <_localeconv_r+0x4>)
   25a8e:	4770      	bx	lr
   25a90:	200088f8 	.word	0x200088f8

00025a94 <__malloc_lock>:
   25a94:	4801      	ldr	r0, [pc, #4]	; (25a9c <__malloc_lock+0x8>)
   25a96:	f7ec baf3 	b.w	12080 <__retarget_lock_acquire_recursive>
   25a9a:	bf00      	nop
   25a9c:	20008af8 	.word	0x20008af8

00025aa0 <__malloc_unlock>:
   25aa0:	4801      	ldr	r0, [pc, #4]	; (25aa8 <__malloc_unlock+0x8>)
   25aa2:	f7ec bb21 	b.w	120e8 <__retarget_lock_release_recursive>
   25aa6:	bf00      	nop
   25aa8:	20008af8 	.word	0x20008af8

00025aac <_Balloc>:
   25aac:	b570      	push	{r4, r5, r6, lr}
   25aae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   25ab0:	4604      	mov	r4, r0
   25ab2:	460d      	mov	r5, r1
   25ab4:	b976      	cbnz	r6, 25ad4 <_Balloc+0x28>
   25ab6:	2010      	movs	r0, #16
   25ab8:	f7fe fa4c 	bl	23f54 <malloc>
   25abc:	4602      	mov	r2, r0
   25abe:	6260      	str	r0, [r4, #36]	; 0x24
   25ac0:	b920      	cbnz	r0, 25acc <_Balloc+0x20>
   25ac2:	4b18      	ldr	r3, [pc, #96]	; (25b24 <_Balloc+0x78>)
   25ac4:	2166      	movs	r1, #102	; 0x66
   25ac6:	4818      	ldr	r0, [pc, #96]	; (25b28 <_Balloc+0x7c>)
   25ac8:	f7ff fc80 	bl	253cc <__assert_func>
   25acc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   25ad0:	6006      	str	r6, [r0, #0]
   25ad2:	60c6      	str	r6, [r0, #12]
   25ad4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   25ad6:	68f3      	ldr	r3, [r6, #12]
   25ad8:	b183      	cbz	r3, 25afc <_Balloc+0x50>
   25ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25adc:	68db      	ldr	r3, [r3, #12]
   25ade:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   25ae2:	b9b8      	cbnz	r0, 25b14 <_Balloc+0x68>
   25ae4:	2101      	movs	r1, #1
   25ae6:	4620      	mov	r0, r4
   25ae8:	fa01 f605 	lsl.w	r6, r1, r5
   25aec:	1d72      	adds	r2, r6, #5
   25aee:	0092      	lsls	r2, r2, #2
   25af0:	f006 fb2e 	bl	2c150 <_calloc_r>
   25af4:	b160      	cbz	r0, 25b10 <_Balloc+0x64>
   25af6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   25afa:	e00e      	b.n	25b1a <_Balloc+0x6e>
   25afc:	2221      	movs	r2, #33	; 0x21
   25afe:	2104      	movs	r1, #4
   25b00:	4620      	mov	r0, r4
   25b02:	f006 fb25 	bl	2c150 <_calloc_r>
   25b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25b08:	60f0      	str	r0, [r6, #12]
   25b0a:	68db      	ldr	r3, [r3, #12]
   25b0c:	2b00      	cmp	r3, #0
   25b0e:	d1e4      	bne.n	25ada <_Balloc+0x2e>
   25b10:	2000      	movs	r0, #0
   25b12:	bd70      	pop	{r4, r5, r6, pc}
   25b14:	6802      	ldr	r2, [r0, #0]
   25b16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   25b1a:	2300      	movs	r3, #0
   25b1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   25b20:	e7f7      	b.n	25b12 <_Balloc+0x66>
   25b22:	bf00      	nop
   25b24:	00034150 	.word	0x00034150
   25b28:	00034369 	.word	0x00034369

00025b2c <_Bfree>:
   25b2c:	b570      	push	{r4, r5, r6, lr}
   25b2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   25b30:	4605      	mov	r5, r0
   25b32:	460c      	mov	r4, r1
   25b34:	b976      	cbnz	r6, 25b54 <_Bfree+0x28>
   25b36:	2010      	movs	r0, #16
   25b38:	f7fe fa0c 	bl	23f54 <malloc>
   25b3c:	4602      	mov	r2, r0
   25b3e:	6268      	str	r0, [r5, #36]	; 0x24
   25b40:	b920      	cbnz	r0, 25b4c <_Bfree+0x20>
   25b42:	4b09      	ldr	r3, [pc, #36]	; (25b68 <_Bfree+0x3c>)
   25b44:	218a      	movs	r1, #138	; 0x8a
   25b46:	4809      	ldr	r0, [pc, #36]	; (25b6c <_Bfree+0x40>)
   25b48:	f7ff fc40 	bl	253cc <__assert_func>
   25b4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   25b50:	6006      	str	r6, [r0, #0]
   25b52:	60c6      	str	r6, [r0, #12]
   25b54:	b13c      	cbz	r4, 25b66 <_Bfree+0x3a>
   25b56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   25b58:	6862      	ldr	r2, [r4, #4]
   25b5a:	68db      	ldr	r3, [r3, #12]
   25b5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   25b60:	6021      	str	r1, [r4, #0]
   25b62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   25b66:	bd70      	pop	{r4, r5, r6, pc}
   25b68:	00034150 	.word	0x00034150
   25b6c:	00034369 	.word	0x00034369

00025b70 <__multadd>:
   25b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b74:	f101 0c14 	add.w	ip, r1, #20
   25b78:	4607      	mov	r7, r0
   25b7a:	460c      	mov	r4, r1
   25b7c:	461e      	mov	r6, r3
   25b7e:	690d      	ldr	r5, [r1, #16]
   25b80:	2000      	movs	r0, #0
   25b82:	f8dc 3000 	ldr.w	r3, [ip]
   25b86:	3001      	adds	r0, #1
   25b88:	b299      	uxth	r1, r3
   25b8a:	4285      	cmp	r5, r0
   25b8c:	fb02 6101 	mla	r1, r2, r1, r6
   25b90:	ea4f 4613 	mov.w	r6, r3, lsr #16
   25b94:	ea4f 4311 	mov.w	r3, r1, lsr #16
   25b98:	b289      	uxth	r1, r1
   25b9a:	fb02 3306 	mla	r3, r2, r6, r3
   25b9e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   25ba2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   25ba6:	f84c 1b04 	str.w	r1, [ip], #4
   25baa:	dcea      	bgt.n	25b82 <__multadd+0x12>
   25bac:	b30e      	cbz	r6, 25bf2 <__multadd+0x82>
   25bae:	68a3      	ldr	r3, [r4, #8]
   25bb0:	42ab      	cmp	r3, r5
   25bb2:	dc19      	bgt.n	25be8 <__multadd+0x78>
   25bb4:	6861      	ldr	r1, [r4, #4]
   25bb6:	4638      	mov	r0, r7
   25bb8:	3101      	adds	r1, #1
   25bba:	f7ff ff77 	bl	25aac <_Balloc>
   25bbe:	4680      	mov	r8, r0
   25bc0:	b928      	cbnz	r0, 25bce <__multadd+0x5e>
   25bc2:	4602      	mov	r2, r0
   25bc4:	4b0c      	ldr	r3, [pc, #48]	; (25bf8 <__multadd+0x88>)
   25bc6:	21b5      	movs	r1, #181	; 0xb5
   25bc8:	480c      	ldr	r0, [pc, #48]	; (25bfc <__multadd+0x8c>)
   25bca:	f7ff fbff 	bl	253cc <__assert_func>
   25bce:	6922      	ldr	r2, [r4, #16]
   25bd0:	f104 010c 	add.w	r1, r4, #12
   25bd4:	300c      	adds	r0, #12
   25bd6:	3202      	adds	r2, #2
   25bd8:	0092      	lsls	r2, r2, #2
   25bda:	f006 fa77 	bl	2c0cc <memcpy>
   25bde:	4621      	mov	r1, r4
   25be0:	4644      	mov	r4, r8
   25be2:	4638      	mov	r0, r7
   25be4:	f7ff ffa2 	bl	25b2c <_Bfree>
   25be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   25bec:	3501      	adds	r5, #1
   25bee:	615e      	str	r6, [r3, #20]
   25bf0:	6125      	str	r5, [r4, #16]
   25bf2:	4620      	mov	r0, r4
   25bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25bf8:	000342d6 	.word	0x000342d6
   25bfc:	00034369 	.word	0x00034369

00025c00 <__s2b>:
   25c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25c04:	4615      	mov	r5, r2
   25c06:	461f      	mov	r7, r3
   25c08:	2209      	movs	r2, #9
   25c0a:	3308      	adds	r3, #8
   25c0c:	460c      	mov	r4, r1
   25c0e:	4606      	mov	r6, r0
   25c10:	2100      	movs	r1, #0
   25c12:	fb93 f3f2 	sdiv	r3, r3, r2
   25c16:	2201      	movs	r2, #1
   25c18:	429a      	cmp	r2, r3
   25c1a:	db09      	blt.n	25c30 <__s2b+0x30>
   25c1c:	4630      	mov	r0, r6
   25c1e:	f7ff ff45 	bl	25aac <_Balloc>
   25c22:	b940      	cbnz	r0, 25c36 <__s2b+0x36>
   25c24:	4602      	mov	r2, r0
   25c26:	4b19      	ldr	r3, [pc, #100]	; (25c8c <__s2b+0x8c>)
   25c28:	21ce      	movs	r1, #206	; 0xce
   25c2a:	4819      	ldr	r0, [pc, #100]	; (25c90 <__s2b+0x90>)
   25c2c:	f7ff fbce 	bl	253cc <__assert_func>
   25c30:	0052      	lsls	r2, r2, #1
   25c32:	3101      	adds	r1, #1
   25c34:	e7f0      	b.n	25c18 <__s2b+0x18>
   25c36:	9b08      	ldr	r3, [sp, #32]
   25c38:	2d09      	cmp	r5, #9
   25c3a:	6143      	str	r3, [r0, #20]
   25c3c:	f04f 0301 	mov.w	r3, #1
   25c40:	6103      	str	r3, [r0, #16]
   25c42:	dd16      	ble.n	25c72 <__s2b+0x72>
   25c44:	f104 0909 	add.w	r9, r4, #9
   25c48:	442c      	add	r4, r5
   25c4a:	46c8      	mov	r8, r9
   25c4c:	f818 3b01 	ldrb.w	r3, [r8], #1
   25c50:	4601      	mov	r1, r0
   25c52:	220a      	movs	r2, #10
   25c54:	4630      	mov	r0, r6
   25c56:	3b30      	subs	r3, #48	; 0x30
   25c58:	f7ff ff8a 	bl	25b70 <__multadd>
   25c5c:	45a0      	cmp	r8, r4
   25c5e:	d1f5      	bne.n	25c4c <__s2b+0x4c>
   25c60:	f1a5 0408 	sub.w	r4, r5, #8
   25c64:	444c      	add	r4, r9
   25c66:	1b2d      	subs	r5, r5, r4
   25c68:	1963      	adds	r3, r4, r5
   25c6a:	42bb      	cmp	r3, r7
   25c6c:	db04      	blt.n	25c78 <__s2b+0x78>
   25c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25c72:	340a      	adds	r4, #10
   25c74:	2509      	movs	r5, #9
   25c76:	e7f6      	b.n	25c66 <__s2b+0x66>
   25c78:	f814 3b01 	ldrb.w	r3, [r4], #1
   25c7c:	4601      	mov	r1, r0
   25c7e:	220a      	movs	r2, #10
   25c80:	4630      	mov	r0, r6
   25c82:	3b30      	subs	r3, #48	; 0x30
   25c84:	f7ff ff74 	bl	25b70 <__multadd>
   25c88:	e7ee      	b.n	25c68 <__s2b+0x68>
   25c8a:	bf00      	nop
   25c8c:	000342d6 	.word	0x000342d6
   25c90:	00034369 	.word	0x00034369

00025c94 <__i2b>:
   25c94:	b510      	push	{r4, lr}
   25c96:	460c      	mov	r4, r1
   25c98:	2101      	movs	r1, #1
   25c9a:	f7ff ff07 	bl	25aac <_Balloc>
   25c9e:	4602      	mov	r2, r0
   25ca0:	b928      	cbnz	r0, 25cae <__i2b+0x1a>
   25ca2:	4b05      	ldr	r3, [pc, #20]	; (25cb8 <__i2b+0x24>)
   25ca4:	f44f 71a0 	mov.w	r1, #320	; 0x140
   25ca8:	4804      	ldr	r0, [pc, #16]	; (25cbc <__i2b+0x28>)
   25caa:	f7ff fb8f 	bl	253cc <__assert_func>
   25cae:	2301      	movs	r3, #1
   25cb0:	6144      	str	r4, [r0, #20]
   25cb2:	6103      	str	r3, [r0, #16]
   25cb4:	bd10      	pop	{r4, pc}
   25cb6:	bf00      	nop
   25cb8:	000342d6 	.word	0x000342d6
   25cbc:	00034369 	.word	0x00034369

00025cc0 <__multiply>:
   25cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25cc4:	4614      	mov	r4, r2
   25cc6:	690a      	ldr	r2, [r1, #16]
   25cc8:	460f      	mov	r7, r1
   25cca:	b085      	sub	sp, #20
   25ccc:	6923      	ldr	r3, [r4, #16]
   25cce:	429a      	cmp	r2, r3
   25cd0:	bfa2      	ittt	ge
   25cd2:	4623      	movge	r3, r4
   25cd4:	460c      	movge	r4, r1
   25cd6:	461f      	movge	r7, r3
   25cd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
   25cdc:	68a3      	ldr	r3, [r4, #8]
   25cde:	f8d7 9010 	ldr.w	r9, [r7, #16]
   25ce2:	6861      	ldr	r1, [r4, #4]
   25ce4:	eb0a 0609 	add.w	r6, sl, r9
   25ce8:	42b3      	cmp	r3, r6
   25cea:	bfb8      	it	lt
   25cec:	3101      	addlt	r1, #1
   25cee:	f7ff fedd 	bl	25aac <_Balloc>
   25cf2:	b930      	cbnz	r0, 25d02 <__multiply+0x42>
   25cf4:	4602      	mov	r2, r0
   25cf6:	4b45      	ldr	r3, [pc, #276]	; (25e0c <__multiply+0x14c>)
   25cf8:	f240 115d 	movw	r1, #349	; 0x15d
   25cfc:	4844      	ldr	r0, [pc, #272]	; (25e10 <__multiply+0x150>)
   25cfe:	f7ff fb65 	bl	253cc <__assert_func>
   25d02:	f100 0514 	add.w	r5, r0, #20
   25d06:	2200      	movs	r2, #0
   25d08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   25d0c:	462b      	mov	r3, r5
   25d0e:	4543      	cmp	r3, r8
   25d10:	d321      	bcc.n	25d56 <__multiply+0x96>
   25d12:	f107 0114 	add.w	r1, r7, #20
   25d16:	f104 0214 	add.w	r2, r4, #20
   25d1a:	f104 0715 	add.w	r7, r4, #21
   25d1e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   25d22:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   25d26:	9302      	str	r3, [sp, #8]
   25d28:	1b13      	subs	r3, r2, r4
   25d2a:	3b15      	subs	r3, #21
   25d2c:	f023 0303 	bic.w	r3, r3, #3
   25d30:	3304      	adds	r3, #4
   25d32:	42ba      	cmp	r2, r7
   25d34:	bf38      	it	cc
   25d36:	2304      	movcc	r3, #4
   25d38:	9301      	str	r3, [sp, #4]
   25d3a:	9b02      	ldr	r3, [sp, #8]
   25d3c:	9103      	str	r1, [sp, #12]
   25d3e:	428b      	cmp	r3, r1
   25d40:	d80c      	bhi.n	25d5c <__multiply+0x9c>
   25d42:	2e00      	cmp	r6, #0
   25d44:	dd03      	ble.n	25d4e <__multiply+0x8e>
   25d46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   25d4a:	2b00      	cmp	r3, #0
   25d4c:	d05b      	beq.n	25e06 <__multiply+0x146>
   25d4e:	6106      	str	r6, [r0, #16]
   25d50:	b005      	add	sp, #20
   25d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d56:	f843 2b04 	str.w	r2, [r3], #4
   25d5a:	e7d8      	b.n	25d0e <__multiply+0x4e>
   25d5c:	f8b1 a000 	ldrh.w	sl, [r1]
   25d60:	f1ba 0f00 	cmp.w	sl, #0
   25d64:	d024      	beq.n	25db0 <__multiply+0xf0>
   25d66:	f104 0e14 	add.w	lr, r4, #20
   25d6a:	46a9      	mov	r9, r5
   25d6c:	f04f 0c00 	mov.w	ip, #0
   25d70:	f85e 7b04 	ldr.w	r7, [lr], #4
   25d74:	f8d9 3000 	ldr.w	r3, [r9]
   25d78:	fa1f fb87 	uxth.w	fp, r7
   25d7c:	4572      	cmp	r2, lr
   25d7e:	b29b      	uxth	r3, r3
   25d80:	ea4f 4717 	mov.w	r7, r7, lsr #16
   25d84:	fb0a 330b 	mla	r3, sl, fp, r3
   25d88:	4463      	add	r3, ip
   25d8a:	f8d9 c000 	ldr.w	ip, [r9]
   25d8e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   25d92:	fb0a c707 	mla	r7, sl, r7, ip
   25d96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   25d9a:	b29b      	uxth	r3, r3
   25d9c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   25da0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   25da4:	f849 3b04 	str.w	r3, [r9], #4
   25da8:	d8e2      	bhi.n	25d70 <__multiply+0xb0>
   25daa:	9b01      	ldr	r3, [sp, #4]
   25dac:	f845 c003 	str.w	ip, [r5, r3]
   25db0:	9b03      	ldr	r3, [sp, #12]
   25db2:	3104      	adds	r1, #4
   25db4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   25db8:	f1b9 0f00 	cmp.w	r9, #0
   25dbc:	d021      	beq.n	25e02 <__multiply+0x142>
   25dbe:	682b      	ldr	r3, [r5, #0]
   25dc0:	f104 0c14 	add.w	ip, r4, #20
   25dc4:	46ae      	mov	lr, r5
   25dc6:	f04f 0a00 	mov.w	sl, #0
   25dca:	f8bc b000 	ldrh.w	fp, [ip]
   25dce:	b29b      	uxth	r3, r3
   25dd0:	f8be 7002 	ldrh.w	r7, [lr, #2]
   25dd4:	fb09 770b 	mla	r7, r9, fp, r7
   25dd8:	4457      	add	r7, sl
   25dda:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   25dde:	f84e 3b04 	str.w	r3, [lr], #4
   25de2:	f85c 3b04 	ldr.w	r3, [ip], #4
   25de6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   25dea:	f8be 3000 	ldrh.w	r3, [lr]
   25dee:	4562      	cmp	r2, ip
   25df0:	fb09 330a 	mla	r3, r9, sl, r3
   25df4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   25df8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   25dfc:	d8e5      	bhi.n	25dca <__multiply+0x10a>
   25dfe:	9f01      	ldr	r7, [sp, #4]
   25e00:	51eb      	str	r3, [r5, r7]
   25e02:	3504      	adds	r5, #4
   25e04:	e799      	b.n	25d3a <__multiply+0x7a>
   25e06:	3e01      	subs	r6, #1
   25e08:	e79b      	b.n	25d42 <__multiply+0x82>
   25e0a:	bf00      	nop
   25e0c:	000342d6 	.word	0x000342d6
   25e10:	00034369 	.word	0x00034369

00025e14 <__pow5mult>:
   25e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25e18:	4615      	mov	r5, r2
   25e1a:	f012 0203 	ands.w	r2, r2, #3
   25e1e:	4607      	mov	r7, r0
   25e20:	460e      	mov	r6, r1
   25e22:	d007      	beq.n	25e34 <__pow5mult+0x20>
   25e24:	3a01      	subs	r2, #1
   25e26:	4c25      	ldr	r4, [pc, #148]	; (25ebc <__pow5mult+0xa8>)
   25e28:	2300      	movs	r3, #0
   25e2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   25e2e:	f7ff fe9f 	bl	25b70 <__multadd>
   25e32:	4606      	mov	r6, r0
   25e34:	10ad      	asrs	r5, r5, #2
   25e36:	d03d      	beq.n	25eb4 <__pow5mult+0xa0>
   25e38:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   25e3a:	b97c      	cbnz	r4, 25e5c <__pow5mult+0x48>
   25e3c:	2010      	movs	r0, #16
   25e3e:	f7fe f889 	bl	23f54 <malloc>
   25e42:	4602      	mov	r2, r0
   25e44:	6278      	str	r0, [r7, #36]	; 0x24
   25e46:	b928      	cbnz	r0, 25e54 <__pow5mult+0x40>
   25e48:	4b1d      	ldr	r3, [pc, #116]	; (25ec0 <__pow5mult+0xac>)
   25e4a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   25e4e:	481d      	ldr	r0, [pc, #116]	; (25ec4 <__pow5mult+0xb0>)
   25e50:	f7ff fabc 	bl	253cc <__assert_func>
   25e54:	e9c0 4401 	strd	r4, r4, [r0, #4]
   25e58:	6004      	str	r4, [r0, #0]
   25e5a:	60c4      	str	r4, [r0, #12]
   25e5c:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   25e60:	f8d8 4008 	ldr.w	r4, [r8, #8]
   25e64:	b94c      	cbnz	r4, 25e7a <__pow5mult+0x66>
   25e66:	f240 2171 	movw	r1, #625	; 0x271
   25e6a:	4638      	mov	r0, r7
   25e6c:	f7ff ff12 	bl	25c94 <__i2b>
   25e70:	2300      	movs	r3, #0
   25e72:	4604      	mov	r4, r0
   25e74:	f8c8 0008 	str.w	r0, [r8, #8]
   25e78:	6003      	str	r3, [r0, #0]
   25e7a:	f04f 0900 	mov.w	r9, #0
   25e7e:	07eb      	lsls	r3, r5, #31
   25e80:	d50a      	bpl.n	25e98 <__pow5mult+0x84>
   25e82:	4631      	mov	r1, r6
   25e84:	4622      	mov	r2, r4
   25e86:	4638      	mov	r0, r7
   25e88:	f7ff ff1a 	bl	25cc0 <__multiply>
   25e8c:	4680      	mov	r8, r0
   25e8e:	4631      	mov	r1, r6
   25e90:	4638      	mov	r0, r7
   25e92:	4646      	mov	r6, r8
   25e94:	f7ff fe4a 	bl	25b2c <_Bfree>
   25e98:	106d      	asrs	r5, r5, #1
   25e9a:	d00b      	beq.n	25eb4 <__pow5mult+0xa0>
   25e9c:	6820      	ldr	r0, [r4, #0]
   25e9e:	b938      	cbnz	r0, 25eb0 <__pow5mult+0x9c>
   25ea0:	4622      	mov	r2, r4
   25ea2:	4621      	mov	r1, r4
   25ea4:	4638      	mov	r0, r7
   25ea6:	f7ff ff0b 	bl	25cc0 <__multiply>
   25eaa:	6020      	str	r0, [r4, #0]
   25eac:	f8c0 9000 	str.w	r9, [r0]
   25eb0:	4604      	mov	r4, r0
   25eb2:	e7e4      	b.n	25e7e <__pow5mult+0x6a>
   25eb4:	4630      	mov	r0, r6
   25eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25eba:	bf00      	nop
   25ebc:	0002e684 	.word	0x0002e684
   25ec0:	00034150 	.word	0x00034150
   25ec4:	00034369 	.word	0x00034369

00025ec8 <__lshift>:
   25ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25ecc:	460c      	mov	r4, r1
   25ece:	4607      	mov	r7, r0
   25ed0:	4691      	mov	r9, r2
   25ed2:	ea4f 1a62 	mov.w	sl, r2, asr #5
   25ed6:	6923      	ldr	r3, [r4, #16]
   25ed8:	6849      	ldr	r1, [r1, #4]
   25eda:	eb03 1862 	add.w	r8, r3, r2, asr #5
   25ede:	68a3      	ldr	r3, [r4, #8]
   25ee0:	f108 0601 	add.w	r6, r8, #1
   25ee4:	42b3      	cmp	r3, r6
   25ee6:	db0b      	blt.n	25f00 <__lshift+0x38>
   25ee8:	4638      	mov	r0, r7
   25eea:	f7ff fddf 	bl	25aac <_Balloc>
   25eee:	4605      	mov	r5, r0
   25ef0:	b948      	cbnz	r0, 25f06 <__lshift+0x3e>
   25ef2:	4602      	mov	r2, r0
   25ef4:	4b28      	ldr	r3, [pc, #160]	; (25f98 <__lshift+0xd0>)
   25ef6:	f240 11d9 	movw	r1, #473	; 0x1d9
   25efa:	4828      	ldr	r0, [pc, #160]	; (25f9c <__lshift+0xd4>)
   25efc:	f7ff fa66 	bl	253cc <__assert_func>
   25f00:	3101      	adds	r1, #1
   25f02:	005b      	lsls	r3, r3, #1
   25f04:	e7ee      	b.n	25ee4 <__lshift+0x1c>
   25f06:	2300      	movs	r3, #0
   25f08:	f100 0114 	add.w	r1, r0, #20
   25f0c:	f100 0210 	add.w	r2, r0, #16
   25f10:	4618      	mov	r0, r3
   25f12:	4553      	cmp	r3, sl
   25f14:	db33      	blt.n	25f7e <__lshift+0xb6>
   25f16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   25f1a:	f104 0314 	add.w	r3, r4, #20
   25f1e:	6920      	ldr	r0, [r4, #16]
   25f20:	f019 091f 	ands.w	r9, r9, #31
   25f24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   25f28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   25f2c:	d02b      	beq.n	25f86 <__lshift+0xbe>
   25f2e:	f1c9 0e20 	rsb	lr, r9, #32
   25f32:	468a      	mov	sl, r1
   25f34:	2200      	movs	r2, #0
   25f36:	6818      	ldr	r0, [r3, #0]
   25f38:	fa00 f009 	lsl.w	r0, r0, r9
   25f3c:	4310      	orrs	r0, r2
   25f3e:	f84a 0b04 	str.w	r0, [sl], #4
   25f42:	f853 2b04 	ldr.w	r2, [r3], #4
   25f46:	459c      	cmp	ip, r3
   25f48:	fa22 f20e 	lsr.w	r2, r2, lr
   25f4c:	d8f3      	bhi.n	25f36 <__lshift+0x6e>
   25f4e:	ebac 0304 	sub.w	r3, ip, r4
   25f52:	f104 0015 	add.w	r0, r4, #21
   25f56:	3b15      	subs	r3, #21
   25f58:	f023 0303 	bic.w	r3, r3, #3
   25f5c:	3304      	adds	r3, #4
   25f5e:	4584      	cmp	ip, r0
   25f60:	bf38      	it	cc
   25f62:	2304      	movcc	r3, #4
   25f64:	50ca      	str	r2, [r1, r3]
   25f66:	b10a      	cbz	r2, 25f6c <__lshift+0xa4>
   25f68:	f108 0602 	add.w	r6, r8, #2
   25f6c:	3e01      	subs	r6, #1
   25f6e:	4638      	mov	r0, r7
   25f70:	4621      	mov	r1, r4
   25f72:	612e      	str	r6, [r5, #16]
   25f74:	f7ff fdda 	bl	25b2c <_Bfree>
   25f78:	4628      	mov	r0, r5
   25f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25f7e:	3301      	adds	r3, #1
   25f80:	f842 0f04 	str.w	r0, [r2, #4]!
   25f84:	e7c5      	b.n	25f12 <__lshift+0x4a>
   25f86:	3904      	subs	r1, #4
   25f88:	f853 2b04 	ldr.w	r2, [r3], #4
   25f8c:	459c      	cmp	ip, r3
   25f8e:	f841 2f04 	str.w	r2, [r1, #4]!
   25f92:	d8f9      	bhi.n	25f88 <__lshift+0xc0>
   25f94:	e7ea      	b.n	25f6c <__lshift+0xa4>
   25f96:	bf00      	nop
   25f98:	000342d6 	.word	0x000342d6
   25f9c:	00034369 	.word	0x00034369

00025fa0 <__mdiff>:
   25fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25fa4:	4689      	mov	r9, r1
   25fa6:	4606      	mov	r6, r0
   25fa8:	4611      	mov	r1, r2
   25faa:	4614      	mov	r4, r2
   25fac:	4648      	mov	r0, r9
   25fae:	f006 fcff 	bl	2c9b0 <__mcmp>
   25fb2:	1e05      	subs	r5, r0, #0
   25fb4:	d112      	bne.n	25fdc <__mdiff+0x3c>
   25fb6:	4629      	mov	r1, r5
   25fb8:	4630      	mov	r0, r6
   25fba:	f7ff fd77 	bl	25aac <_Balloc>
   25fbe:	4602      	mov	r2, r0
   25fc0:	b928      	cbnz	r0, 25fce <__mdiff+0x2e>
   25fc2:	4b40      	ldr	r3, [pc, #256]	; (260c4 <__mdiff+0x124>)
   25fc4:	f240 2132 	movw	r1, #562	; 0x232
   25fc8:	483f      	ldr	r0, [pc, #252]	; (260c8 <__mdiff+0x128>)
   25fca:	f7ff f9ff 	bl	253cc <__assert_func>
   25fce:	2301      	movs	r3, #1
   25fd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
   25fd4:	4610      	mov	r0, r2
   25fd6:	b003      	add	sp, #12
   25fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fdc:	bfbc      	itt	lt
   25fde:	464b      	movlt	r3, r9
   25fe0:	46a1      	movlt	r9, r4
   25fe2:	4630      	mov	r0, r6
   25fe4:	bfb8      	it	lt
   25fe6:	2501      	movlt	r5, #1
   25fe8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   25fec:	bfb4      	ite	lt
   25fee:	461c      	movlt	r4, r3
   25ff0:	2500      	movge	r5, #0
   25ff2:	f7ff fd5b 	bl	25aac <_Balloc>
   25ff6:	4602      	mov	r2, r0
   25ff8:	b918      	cbnz	r0, 26002 <__mdiff+0x62>
   25ffa:	4b32      	ldr	r3, [pc, #200]	; (260c4 <__mdiff+0x124>)
   25ffc:	f44f 7110 	mov.w	r1, #576	; 0x240
   26000:	e7e2      	b.n	25fc8 <__mdiff+0x28>
   26002:	f8d9 7010 	ldr.w	r7, [r9, #16]
   26006:	f104 0e14 	add.w	lr, r4, #20
   2600a:	6926      	ldr	r6, [r4, #16]
   2600c:	f100 0b14 	add.w	fp, r0, #20
   26010:	60c5      	str	r5, [r0, #12]
   26012:	f109 0514 	add.w	r5, r9, #20
   26016:	f109 0310 	add.w	r3, r9, #16
   2601a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   2601e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   26022:	46d9      	mov	r9, fp
   26024:	f04f 0c00 	mov.w	ip, #0
   26028:	9301      	str	r3, [sp, #4]
   2602a:	9b01      	ldr	r3, [sp, #4]
   2602c:	f85e 0b04 	ldr.w	r0, [lr], #4
   26030:	f853 af04 	ldr.w	sl, [r3, #4]!
   26034:	b281      	uxth	r1, r0
   26036:	4576      	cmp	r6, lr
   26038:	9301      	str	r3, [sp, #4]
   2603a:	fa1f f38a 	uxth.w	r3, sl
   2603e:	ea4f 4010 	mov.w	r0, r0, lsr #16
   26042:	eba3 0301 	sub.w	r3, r3, r1
   26046:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   2604a:	4463      	add	r3, ip
   2604c:	eb00 4023 	add.w	r0, r0, r3, asr #16
   26050:	b29b      	uxth	r3, r3
   26052:	ea4f 4c20 	mov.w	ip, r0, asr #16
   26056:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   2605a:	f849 3b04 	str.w	r3, [r9], #4
   2605e:	d8e4      	bhi.n	2602a <__mdiff+0x8a>
   26060:	1b33      	subs	r3, r6, r4
   26062:	3415      	adds	r4, #21
   26064:	3b15      	subs	r3, #21
   26066:	f023 0303 	bic.w	r3, r3, #3
   2606a:	3304      	adds	r3, #4
   2606c:	42a6      	cmp	r6, r4
   2606e:	bf38      	it	cc
   26070:	2304      	movcc	r3, #4
   26072:	441d      	add	r5, r3
   26074:	445b      	add	r3, fp
   26076:	462c      	mov	r4, r5
   26078:	461e      	mov	r6, r3
   2607a:	4544      	cmp	r4, r8
   2607c:	d30e      	bcc.n	2609c <__mdiff+0xfc>
   2607e:	f108 0103 	add.w	r1, r8, #3
   26082:	1b49      	subs	r1, r1, r5
   26084:	3d03      	subs	r5, #3
   26086:	f021 0103 	bic.w	r1, r1, #3
   2608a:	45a8      	cmp	r8, r5
   2608c:	bf38      	it	cc
   2608e:	2100      	movcc	r1, #0
   26090:	440b      	add	r3, r1
   26092:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   26096:	b199      	cbz	r1, 260c0 <__mdiff+0x120>
   26098:	6117      	str	r7, [r2, #16]
   2609a:	e79b      	b.n	25fd4 <__mdiff+0x34>
   2609c:	f854 1b04 	ldr.w	r1, [r4], #4
   260a0:	46e6      	mov	lr, ip
   260a2:	fa1f fc81 	uxth.w	ip, r1
   260a6:	0c08      	lsrs	r0, r1, #16
   260a8:	4471      	add	r1, lr
   260aa:	44f4      	add	ip, lr
   260ac:	b289      	uxth	r1, r1
   260ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
   260b2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   260b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
   260ba:	f846 1b04 	str.w	r1, [r6], #4
   260be:	e7dc      	b.n	2607a <__mdiff+0xda>
   260c0:	3f01      	subs	r7, #1
   260c2:	e7e6      	b.n	26092 <__mdiff+0xf2>
   260c4:	000342d6 	.word	0x000342d6
   260c8:	00034369 	.word	0x00034369

000260cc <__ulp>:
   260cc:	4b0e      	ldr	r3, [pc, #56]	; (26108 <__ulp+0x3c>)
   260ce:	400b      	ands	r3, r1
   260d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   260d4:	2b00      	cmp	r3, #0
   260d6:	dc08      	bgt.n	260ea <__ulp+0x1e>
   260d8:	425b      	negs	r3, r3
   260da:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   260de:	ea4f 5223 	mov.w	r2, r3, asr #20
   260e2:	da04      	bge.n	260ee <__ulp+0x22>
   260e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   260e8:	4113      	asrs	r3, r2
   260ea:	2200      	movs	r2, #0
   260ec:	e008      	b.n	26100 <__ulp+0x34>
   260ee:	f1a2 0314 	sub.w	r3, r2, #20
   260f2:	2b1e      	cmp	r3, #30
   260f4:	bfd6      	itet	le
   260f6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   260fa:	2201      	movgt	r2, #1
   260fc:	40da      	lsrle	r2, r3
   260fe:	2300      	movs	r3, #0
   26100:	4619      	mov	r1, r3
   26102:	4610      	mov	r0, r2
   26104:	4770      	bx	lr
   26106:	bf00      	nop
   26108:	7ff00000 	.word	0x7ff00000

0002610c <__b2d>:
   2610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2610e:	6902      	ldr	r2, [r0, #16]
   26110:	f100 0614 	add.w	r6, r0, #20
   26114:	4f21      	ldr	r7, [pc, #132]	; (2619c <__b2d+0x90>)
   26116:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   2611a:	f852 4c04 	ldr.w	r4, [r2, #-4]
   2611e:	1f15      	subs	r5, r2, #4
   26120:	4620      	mov	r0, r4
   26122:	f006 fbf6 	bl	2c912 <__hi0bits>
   26126:	4603      	mov	r3, r0
   26128:	f1c0 0020 	rsb	r0, r0, #32
   2612c:	2b0a      	cmp	r3, #10
   2612e:	6008      	str	r0, [r1, #0]
   26130:	dc13      	bgt.n	2615a <__b2d+0x4e>
   26132:	42ae      	cmp	r6, r5
   26134:	f1c3 0c0b 	rsb	ip, r3, #11
   26138:	f103 0315 	add.w	r3, r3, #21
   2613c:	bf34      	ite	cc
   2613e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   26142:	2200      	movcs	r2, #0
   26144:	fa24 fe0c 	lsr.w	lr, r4, ip
   26148:	fa04 f303 	lsl.w	r3, r4, r3
   2614c:	fa22 f20c 	lsr.w	r2, r2, ip
   26150:	ea4e 0107 	orr.w	r1, lr, r7
   26154:	431a      	orrs	r2, r3
   26156:	4610      	mov	r0, r2
   26158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2615a:	42ae      	cmp	r6, r5
   2615c:	bf36      	itet	cc
   2615e:	f1a2 0508 	subcc.w	r5, r2, #8
   26162:	2200      	movcs	r2, #0
   26164:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   26168:	3b0b      	subs	r3, #11
   2616a:	d014      	beq.n	26196 <__b2d+0x8a>
   2616c:	f1c3 0720 	rsb	r7, r3, #32
   26170:	409c      	lsls	r4, r3
   26172:	42b5      	cmp	r5, r6
   26174:	fa22 f107 	lsr.w	r1, r2, r7
   26178:	fa02 f203 	lsl.w	r2, r2, r3
   2617c:	ea44 0401 	orr.w	r4, r4, r1
   26180:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
   26184:	bf8c      	ite	hi
   26186:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   2618a:	2400      	movls	r4, #0
   2618c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   26190:	40fc      	lsrs	r4, r7
   26192:	4322      	orrs	r2, r4
   26194:	e7df      	b.n	26156 <__b2d+0x4a>
   26196:	ea44 0107 	orr.w	r1, r4, r7
   2619a:	e7dc      	b.n	26156 <__b2d+0x4a>
   2619c:	3ff00000 	.word	0x3ff00000

000261a0 <__d2b>:
   261a0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   261a4:	2101      	movs	r1, #1
   261a6:	4690      	mov	r8, r2
   261a8:	4699      	mov	r9, r3
   261aa:	9e08      	ldr	r6, [sp, #32]
   261ac:	f7ff fc7e 	bl	25aac <_Balloc>
   261b0:	4604      	mov	r4, r0
   261b2:	b930      	cbnz	r0, 261c2 <__d2b+0x22>
   261b4:	4602      	mov	r2, r0
   261b6:	4b24      	ldr	r3, [pc, #144]	; (26248 <__d2b+0xa8>)
   261b8:	f240 310a 	movw	r1, #778	; 0x30a
   261bc:	4823      	ldr	r0, [pc, #140]	; (2624c <__d2b+0xac>)
   261be:	f7ff f905 	bl	253cc <__assert_func>
   261c2:	f3c9 550a 	ubfx	r5, r9, #20, #11
   261c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
   261ca:	b10d      	cbz	r5, 261d0 <__d2b+0x30>
   261cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   261d0:	9301      	str	r3, [sp, #4]
   261d2:	f1b8 0300 	subs.w	r3, r8, #0
   261d6:	d024      	beq.n	26222 <__d2b+0x82>
   261d8:	4668      	mov	r0, sp
   261da:	9300      	str	r3, [sp, #0]
   261dc:	f006 fbbb 	bl	2c956 <__lo0bits>
   261e0:	e9dd 1200 	ldrd	r1, r2, [sp]
   261e4:	b1d8      	cbz	r0, 2621e <__d2b+0x7e>
   261e6:	f1c0 0320 	rsb	r3, r0, #32
   261ea:	fa02 f303 	lsl.w	r3, r2, r3
   261ee:	40c2      	lsrs	r2, r0
   261f0:	430b      	orrs	r3, r1
   261f2:	9201      	str	r2, [sp, #4]
   261f4:	6163      	str	r3, [r4, #20]
   261f6:	9b01      	ldr	r3, [sp, #4]
   261f8:	2b00      	cmp	r3, #0
   261fa:	61a3      	str	r3, [r4, #24]
   261fc:	bf0c      	ite	eq
   261fe:	2201      	moveq	r2, #1
   26200:	2202      	movne	r2, #2
   26202:	6122      	str	r2, [r4, #16]
   26204:	b1ad      	cbz	r5, 26232 <__d2b+0x92>
   26206:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2620a:	4405      	add	r5, r0
   2620c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   26210:	6035      	str	r5, [r6, #0]
   26212:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26214:	6018      	str	r0, [r3, #0]
   26216:	4620      	mov	r0, r4
   26218:	b002      	add	sp, #8
   2621a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   2621e:	6161      	str	r1, [r4, #20]
   26220:	e7e9      	b.n	261f6 <__d2b+0x56>
   26222:	a801      	add	r0, sp, #4
   26224:	f006 fb97 	bl	2c956 <__lo0bits>
   26228:	9b01      	ldr	r3, [sp, #4]
   2622a:	3020      	adds	r0, #32
   2622c:	2201      	movs	r2, #1
   2622e:	6163      	str	r3, [r4, #20]
   26230:	e7e7      	b.n	26202 <__d2b+0x62>
   26232:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   26236:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2623a:	6030      	str	r0, [r6, #0]
   2623c:	6918      	ldr	r0, [r3, #16]
   2623e:	f006 fb68 	bl	2c912 <__hi0bits>
   26242:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   26246:	e7e4      	b.n	26212 <__d2b+0x72>
   26248:	000342d6 	.word	0x000342d6
   2624c:	00034369 	.word	0x00034369

00026250 <_vfiprintf_r>:
   26250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26254:	460d      	mov	r5, r1
   26256:	b09d      	sub	sp, #116	; 0x74
   26258:	4614      	mov	r4, r2
   2625a:	4698      	mov	r8, r3
   2625c:	4606      	mov	r6, r0
   2625e:	b118      	cbz	r0, 26268 <_vfiprintf_r+0x18>
   26260:	6983      	ldr	r3, [r0, #24]
   26262:	b90b      	cbnz	r3, 26268 <_vfiprintf_r+0x18>
   26264:	f7ff f912 	bl	2548c <__sinit>
   26268:	4b87      	ldr	r3, [pc, #540]	; (26488 <_vfiprintf_r+0x238>)
   2626a:	429d      	cmp	r5, r3
   2626c:	d11b      	bne.n	262a6 <_vfiprintf_r+0x56>
   2626e:	6875      	ldr	r5, [r6, #4]
   26270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   26272:	07d9      	lsls	r1, r3, #31
   26274:	d405      	bmi.n	26282 <_vfiprintf_r+0x32>
   26276:	89ab      	ldrh	r3, [r5, #12]
   26278:	059a      	lsls	r2, r3, #22
   2627a:	d402      	bmi.n	26282 <_vfiprintf_r+0x32>
   2627c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2627e:	f7eb feff 	bl	12080 <__retarget_lock_acquire_recursive>
   26282:	89ab      	ldrh	r3, [r5, #12]
   26284:	071b      	lsls	r3, r3, #28
   26286:	d501      	bpl.n	2628c <_vfiprintf_r+0x3c>
   26288:	692b      	ldr	r3, [r5, #16]
   2628a:	b9eb      	cbnz	r3, 262c8 <_vfiprintf_r+0x78>
   2628c:	4629      	mov	r1, r5
   2628e:	4630      	mov	r0, r6
   26290:	f000 f998 	bl	265c4 <__swsetup_r>
   26294:	b1c0      	cbz	r0, 262c8 <_vfiprintf_r+0x78>
   26296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   26298:	07dc      	lsls	r4, r3, #31
   2629a:	d50e      	bpl.n	262ba <_vfiprintf_r+0x6a>
   2629c:	f04f 30ff 	mov.w	r0, #4294967295
   262a0:	b01d      	add	sp, #116	; 0x74
   262a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262a6:	4b79      	ldr	r3, [pc, #484]	; (2648c <_vfiprintf_r+0x23c>)
   262a8:	429d      	cmp	r5, r3
   262aa:	d101      	bne.n	262b0 <_vfiprintf_r+0x60>
   262ac:	68b5      	ldr	r5, [r6, #8]
   262ae:	e7df      	b.n	26270 <_vfiprintf_r+0x20>
   262b0:	4b77      	ldr	r3, [pc, #476]	; (26490 <_vfiprintf_r+0x240>)
   262b2:	429d      	cmp	r5, r3
   262b4:	bf08      	it	eq
   262b6:	68f5      	ldreq	r5, [r6, #12]
   262b8:	e7da      	b.n	26270 <_vfiprintf_r+0x20>
   262ba:	89ab      	ldrh	r3, [r5, #12]
   262bc:	0598      	lsls	r0, r3, #22
   262be:	d4ed      	bmi.n	2629c <_vfiprintf_r+0x4c>
   262c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   262c2:	f7eb ff11 	bl	120e8 <__retarget_lock_release_recursive>
   262c6:	e7e9      	b.n	2629c <_vfiprintf_r+0x4c>
   262c8:	2300      	movs	r3, #0
   262ca:	f8cd 800c 	str.w	r8, [sp, #12]
   262ce:	f04f 0901 	mov.w	r9, #1
   262d2:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 26494 <_vfiprintf_r+0x244>
   262d6:	9309      	str	r3, [sp, #36]	; 0x24
   262d8:	2320      	movs	r3, #32
   262da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   262de:	2330      	movs	r3, #48	; 0x30
   262e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   262e4:	4623      	mov	r3, r4
   262e6:	469a      	mov	sl, r3
   262e8:	f813 2b01 	ldrb.w	r2, [r3], #1
   262ec:	b10a      	cbz	r2, 262f2 <_vfiprintf_r+0xa2>
   262ee:	2a25      	cmp	r2, #37	; 0x25
   262f0:	d1f9      	bne.n	262e6 <_vfiprintf_r+0x96>
   262f2:	ebba 0b04 	subs.w	fp, sl, r4
   262f6:	d00b      	beq.n	26310 <_vfiprintf_r+0xc0>
   262f8:	465b      	mov	r3, fp
   262fa:	4622      	mov	r2, r4
   262fc:	4629      	mov	r1, r5
   262fe:	4630      	mov	r0, r6
   26300:	f006 fbfa 	bl	2caf8 <__sfputs_r>
   26304:	3001      	adds	r0, #1
   26306:	f000 80a6 	beq.w	26456 <_vfiprintf_r+0x206>
   2630a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2630c:	445a      	add	r2, fp
   2630e:	9209      	str	r2, [sp, #36]	; 0x24
   26310:	f89a 3000 	ldrb.w	r3, [sl]
   26314:	2b00      	cmp	r3, #0
   26316:	f000 809e 	beq.w	26456 <_vfiprintf_r+0x206>
   2631a:	2300      	movs	r3, #0
   2631c:	f04f 32ff 	mov.w	r2, #4294967295
   26320:	f10a 0a01 	add.w	sl, sl, #1
   26324:	9304      	str	r3, [sp, #16]
   26326:	9307      	str	r3, [sp, #28]
   26328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2632c:	931a      	str	r3, [sp, #104]	; 0x68
   2632e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   26332:	4654      	mov	r4, sl
   26334:	2205      	movs	r2, #5
   26336:	4857      	ldr	r0, [pc, #348]	; (26494 <_vfiprintf_r+0x244>)
   26338:	f814 1b01 	ldrb.w	r1, [r4], #1
   2633c:	f006 fadb 	bl	2c8f6 <memchr>
   26340:	9b04      	ldr	r3, [sp, #16]
   26342:	b9d0      	cbnz	r0, 2637a <_vfiprintf_r+0x12a>
   26344:	06d9      	lsls	r1, r3, #27
   26346:	bf44      	itt	mi
   26348:	2220      	movmi	r2, #32
   2634a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2634e:	071a      	lsls	r2, r3, #28
   26350:	bf44      	itt	mi
   26352:	222b      	movmi	r2, #43	; 0x2b
   26354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   26358:	f89a 2000 	ldrb.w	r2, [sl]
   2635c:	2a2a      	cmp	r2, #42	; 0x2a
   2635e:	d014      	beq.n	2638a <_vfiprintf_r+0x13a>
   26360:	9a07      	ldr	r2, [sp, #28]
   26362:	4654      	mov	r4, sl
   26364:	2000      	movs	r0, #0
   26366:	f04f 0c0a 	mov.w	ip, #10
   2636a:	4621      	mov	r1, r4
   2636c:	f811 3b01 	ldrb.w	r3, [r1], #1
   26370:	3b30      	subs	r3, #48	; 0x30
   26372:	2b09      	cmp	r3, #9
   26374:	d94a      	bls.n	2640c <_vfiprintf_r+0x1bc>
   26376:	b970      	cbnz	r0, 26396 <_vfiprintf_r+0x146>
   26378:	e014      	b.n	263a4 <_vfiprintf_r+0x154>
   2637a:	eba0 0008 	sub.w	r0, r0, r8
   2637e:	46a2      	mov	sl, r4
   26380:	fa09 f000 	lsl.w	r0, r9, r0
   26384:	4318      	orrs	r0, r3
   26386:	9004      	str	r0, [sp, #16]
   26388:	e7d3      	b.n	26332 <_vfiprintf_r+0xe2>
   2638a:	9a03      	ldr	r2, [sp, #12]
   2638c:	1d11      	adds	r1, r2, #4
   2638e:	6812      	ldr	r2, [r2, #0]
   26390:	2a00      	cmp	r2, #0
   26392:	9103      	str	r1, [sp, #12]
   26394:	db01      	blt.n	2639a <_vfiprintf_r+0x14a>
   26396:	9207      	str	r2, [sp, #28]
   26398:	e004      	b.n	263a4 <_vfiprintf_r+0x154>
   2639a:	4252      	negs	r2, r2
   2639c:	f043 0302 	orr.w	r3, r3, #2
   263a0:	9207      	str	r2, [sp, #28]
   263a2:	9304      	str	r3, [sp, #16]
   263a4:	7823      	ldrb	r3, [r4, #0]
   263a6:	2b2e      	cmp	r3, #46	; 0x2e
   263a8:	d10a      	bne.n	263c0 <_vfiprintf_r+0x170>
   263aa:	7863      	ldrb	r3, [r4, #1]
   263ac:	2b2a      	cmp	r3, #42	; 0x2a
   263ae:	d132      	bne.n	26416 <_vfiprintf_r+0x1c6>
   263b0:	9b03      	ldr	r3, [sp, #12]
   263b2:	3402      	adds	r4, #2
   263b4:	1d1a      	adds	r2, r3, #4
   263b6:	681b      	ldr	r3, [r3, #0]
   263b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   263bc:	9203      	str	r2, [sp, #12]
   263be:	9305      	str	r3, [sp, #20]
   263c0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 26498 <_vfiprintf_r+0x248>
   263c4:	2203      	movs	r2, #3
   263c6:	7821      	ldrb	r1, [r4, #0]
   263c8:	4650      	mov	r0, sl
   263ca:	f006 fa94 	bl	2c8f6 <memchr>
   263ce:	b138      	cbz	r0, 263e0 <_vfiprintf_r+0x190>
   263d0:	eba0 000a 	sub.w	r0, r0, sl
   263d4:	2240      	movs	r2, #64	; 0x40
   263d6:	9b04      	ldr	r3, [sp, #16]
   263d8:	3401      	adds	r4, #1
   263da:	4082      	lsls	r2, r0
   263dc:	4313      	orrs	r3, r2
   263de:	9304      	str	r3, [sp, #16]
   263e0:	f814 1b01 	ldrb.w	r1, [r4], #1
   263e4:	2206      	movs	r2, #6
   263e6:	482d      	ldr	r0, [pc, #180]	; (2649c <_vfiprintf_r+0x24c>)
   263e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   263ec:	f006 fa83 	bl	2c8f6 <memchr>
   263f0:	2800      	cmp	r0, #0
   263f2:	d03f      	beq.n	26474 <_vfiprintf_r+0x224>
   263f4:	4b2a      	ldr	r3, [pc, #168]	; (264a0 <_vfiprintf_r+0x250>)
   263f6:	bb1b      	cbnz	r3, 26440 <_vfiprintf_r+0x1f0>
   263f8:	9b03      	ldr	r3, [sp, #12]
   263fa:	3307      	adds	r3, #7
   263fc:	f023 0307 	bic.w	r3, r3, #7
   26400:	3308      	adds	r3, #8
   26402:	9303      	str	r3, [sp, #12]
   26404:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26406:	443b      	add	r3, r7
   26408:	9309      	str	r3, [sp, #36]	; 0x24
   2640a:	e76b      	b.n	262e4 <_vfiprintf_r+0x94>
   2640c:	fb0c 3202 	mla	r2, ip, r2, r3
   26410:	460c      	mov	r4, r1
   26412:	2001      	movs	r0, #1
   26414:	e7a9      	b.n	2636a <_vfiprintf_r+0x11a>
   26416:	2300      	movs	r3, #0
   26418:	3401      	adds	r4, #1
   2641a:	f04f 0c0a 	mov.w	ip, #10
   2641e:	4619      	mov	r1, r3
   26420:	9305      	str	r3, [sp, #20]
   26422:	4620      	mov	r0, r4
   26424:	f810 2b01 	ldrb.w	r2, [r0], #1
   26428:	3a30      	subs	r2, #48	; 0x30
   2642a:	2a09      	cmp	r2, #9
   2642c:	d903      	bls.n	26436 <_vfiprintf_r+0x1e6>
   2642e:	2b00      	cmp	r3, #0
   26430:	d0c6      	beq.n	263c0 <_vfiprintf_r+0x170>
   26432:	9105      	str	r1, [sp, #20]
   26434:	e7c4      	b.n	263c0 <_vfiprintf_r+0x170>
   26436:	fb0c 2101 	mla	r1, ip, r1, r2
   2643a:	4604      	mov	r4, r0
   2643c:	2301      	movs	r3, #1
   2643e:	e7f0      	b.n	26422 <_vfiprintf_r+0x1d2>
   26440:	ab03      	add	r3, sp, #12
   26442:	462a      	mov	r2, r5
   26444:	a904      	add	r1, sp, #16
   26446:	4630      	mov	r0, r6
   26448:	9300      	str	r3, [sp, #0]
   2644a:	4b16      	ldr	r3, [pc, #88]	; (264a4 <_vfiprintf_r+0x254>)
   2644c:	f7fe f8a6 	bl	2459c <_printf_float>
   26450:	4607      	mov	r7, r0
   26452:	1c78      	adds	r0, r7, #1
   26454:	d1d6      	bne.n	26404 <_vfiprintf_r+0x1b4>
   26456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   26458:	07d9      	lsls	r1, r3, #31
   2645a:	d405      	bmi.n	26468 <_vfiprintf_r+0x218>
   2645c:	89ab      	ldrh	r3, [r5, #12]
   2645e:	059a      	lsls	r2, r3, #22
   26460:	d402      	bmi.n	26468 <_vfiprintf_r+0x218>
   26462:	6da8      	ldr	r0, [r5, #88]	; 0x58
   26464:	f7eb fe40 	bl	120e8 <__retarget_lock_release_recursive>
   26468:	89ab      	ldrh	r3, [r5, #12]
   2646a:	065b      	lsls	r3, r3, #25
   2646c:	f53f af16 	bmi.w	2629c <_vfiprintf_r+0x4c>
   26470:	9809      	ldr	r0, [sp, #36]	; 0x24
   26472:	e715      	b.n	262a0 <_vfiprintf_r+0x50>
   26474:	ab03      	add	r3, sp, #12
   26476:	462a      	mov	r2, r5
   26478:	a904      	add	r1, sp, #16
   2647a:	4630      	mov	r0, r6
   2647c:	9300      	str	r3, [sp, #0]
   2647e:	4b09      	ldr	r3, [pc, #36]	; (264a4 <_vfiprintf_r+0x254>)
   26480:	f7fe fac2 	bl	24a08 <_printf_i>
   26484:	e7e4      	b.n	26450 <_vfiprintf_r+0x200>
   26486:	bf00      	nop
   26488:	0002e5f8 	.word	0x0002e5f8
   2648c:	0002e5d8 	.word	0x0002e5d8
   26490:	0002e5b8 	.word	0x0002e5b8
   26494:	000343de 	.word	0x000343de
   26498:	000343e4 	.word	0x000343e4
   2649c:	000343e8 	.word	0x000343e8
   264a0:	0002459d 	.word	0x0002459d
   264a4:	0002caf9 	.word	0x0002caf9

000264a8 <siscanf>:
   264a8:	b40e      	push	{r1, r2, r3}
   264aa:	b530      	push	{r4, r5, lr}
   264ac:	b09c      	sub	sp, #112	; 0x70
   264ae:	f44f 7201 	mov.w	r2, #516	; 0x204
   264b2:	ac1f      	add	r4, sp, #124	; 0x7c
   264b4:	f8ad 2014 	strh.w	r2, [sp, #20]
   264b8:	9002      	str	r0, [sp, #8]
   264ba:	f854 5b04 	ldr.w	r5, [r4], #4
   264be:	9006      	str	r0, [sp, #24]
   264c0:	f7e2 ffa3 	bl	940a <strlen>
   264c4:	4b0b      	ldr	r3, [pc, #44]	; (264f4 <siscanf+0x4c>)
   264c6:	462a      	mov	r2, r5
   264c8:	9003      	str	r0, [sp, #12]
   264ca:	a902      	add	r1, sp, #8
   264cc:	930b      	str	r3, [sp, #44]	; 0x2c
   264ce:	2300      	movs	r3, #0
   264d0:	9007      	str	r0, [sp, #28]
   264d2:	930f      	str	r3, [sp, #60]	; 0x3c
   264d4:	9314      	str	r3, [sp, #80]	; 0x50
   264d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   264da:	4807      	ldr	r0, [pc, #28]	; (264f8 <siscanf+0x50>)
   264dc:	f8ad 3016 	strh.w	r3, [sp, #22]
   264e0:	4623      	mov	r3, r4
   264e2:	6800      	ldr	r0, [r0, #0]
   264e4:	9401      	str	r4, [sp, #4]
   264e6:	f000 f983 	bl	267f0 <__ssvfiscanf_r>
   264ea:	b01c      	add	sp, #112	; 0x70
   264ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   264f0:	b003      	add	sp, #12
   264f2:	4770      	bx	lr
   264f4:	0002cb3f 	.word	0x0002cb3f
   264f8:	2000879c 	.word	0x2000879c

000264fc <__swbuf_r>:
   264fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   264fe:	460e      	mov	r6, r1
   26500:	4614      	mov	r4, r2
   26502:	4605      	mov	r5, r0
   26504:	b118      	cbz	r0, 2650e <__swbuf_r+0x12>
   26506:	6983      	ldr	r3, [r0, #24]
   26508:	b90b      	cbnz	r3, 2650e <__swbuf_r+0x12>
   2650a:	f7fe ffbf 	bl	2548c <__sinit>
   2650e:	4b21      	ldr	r3, [pc, #132]	; (26594 <__swbuf_r+0x98>)
   26510:	429c      	cmp	r4, r3
   26512:	d110      	bne.n	26536 <__swbuf_r+0x3a>
   26514:	686c      	ldr	r4, [r5, #4]
   26516:	69a3      	ldr	r3, [r4, #24]
   26518:	60a3      	str	r3, [r4, #8]
   2651a:	89a3      	ldrh	r3, [r4, #12]
   2651c:	071a      	lsls	r2, r3, #28
   2651e:	d501      	bpl.n	26524 <__swbuf_r+0x28>
   26520:	6923      	ldr	r3, [r4, #16]
   26522:	b993      	cbnz	r3, 2654a <__swbuf_r+0x4e>
   26524:	4621      	mov	r1, r4
   26526:	4628      	mov	r0, r5
   26528:	f000 f84c 	bl	265c4 <__swsetup_r>
   2652c:	b168      	cbz	r0, 2654a <__swbuf_r+0x4e>
   2652e:	f04f 37ff 	mov.w	r7, #4294967295
   26532:	4638      	mov	r0, r7
   26534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26536:	4b18      	ldr	r3, [pc, #96]	; (26598 <__swbuf_r+0x9c>)
   26538:	429c      	cmp	r4, r3
   2653a:	d101      	bne.n	26540 <__swbuf_r+0x44>
   2653c:	68ac      	ldr	r4, [r5, #8]
   2653e:	e7ea      	b.n	26516 <__swbuf_r+0x1a>
   26540:	4b16      	ldr	r3, [pc, #88]	; (2659c <__swbuf_r+0xa0>)
   26542:	429c      	cmp	r4, r3
   26544:	bf08      	it	eq
   26546:	68ec      	ldreq	r4, [r5, #12]
   26548:	e7e5      	b.n	26516 <__swbuf_r+0x1a>
   2654a:	6923      	ldr	r3, [r4, #16]
   2654c:	b2f6      	uxtb	r6, r6
   2654e:	6820      	ldr	r0, [r4, #0]
   26550:	4637      	mov	r7, r6
   26552:	1ac0      	subs	r0, r0, r3
   26554:	6963      	ldr	r3, [r4, #20]
   26556:	4283      	cmp	r3, r0
   26558:	dc05      	bgt.n	26566 <__swbuf_r+0x6a>
   2655a:	4621      	mov	r1, r4
   2655c:	4628      	mov	r0, r5
   2655e:	f000 f8b9 	bl	266d4 <_fflush_r>
   26562:	2800      	cmp	r0, #0
   26564:	d1e3      	bne.n	2652e <__swbuf_r+0x32>
   26566:	68a3      	ldr	r3, [r4, #8]
   26568:	3001      	adds	r0, #1
   2656a:	3b01      	subs	r3, #1
   2656c:	60a3      	str	r3, [r4, #8]
   2656e:	6823      	ldr	r3, [r4, #0]
   26570:	1c5a      	adds	r2, r3, #1
   26572:	6022      	str	r2, [r4, #0]
   26574:	701e      	strb	r6, [r3, #0]
   26576:	6963      	ldr	r3, [r4, #20]
   26578:	4283      	cmp	r3, r0
   2657a:	d004      	beq.n	26586 <__swbuf_r+0x8a>
   2657c:	89a3      	ldrh	r3, [r4, #12]
   2657e:	07db      	lsls	r3, r3, #31
   26580:	d5d7      	bpl.n	26532 <__swbuf_r+0x36>
   26582:	2e0a      	cmp	r6, #10
   26584:	d1d5      	bne.n	26532 <__swbuf_r+0x36>
   26586:	4621      	mov	r1, r4
   26588:	4628      	mov	r0, r5
   2658a:	f000 f8a3 	bl	266d4 <_fflush_r>
   2658e:	2800      	cmp	r0, #0
   26590:	d0cf      	beq.n	26532 <__swbuf_r+0x36>
   26592:	e7cc      	b.n	2652e <__swbuf_r+0x32>
   26594:	0002e5f8 	.word	0x0002e5f8
   26598:	0002e5d8 	.word	0x0002e5d8
   2659c:	0002e5b8 	.word	0x0002e5b8

000265a0 <_write_r>:
   265a0:	b538      	push	{r3, r4, r5, lr}
   265a2:	4604      	mov	r4, r0
   265a4:	4d06      	ldr	r5, [pc, #24]	; (265c0 <_write_r+0x20>)
   265a6:	4608      	mov	r0, r1
   265a8:	4611      	mov	r1, r2
   265aa:	2200      	movs	r2, #0
   265ac:	602a      	str	r2, [r5, #0]
   265ae:	461a      	mov	r2, r3
   265b0:	f002 f8bd 	bl	2872e <_write>
   265b4:	1c43      	adds	r3, r0, #1
   265b6:	d102      	bne.n	265be <_write_r+0x1e>
   265b8:	682b      	ldr	r3, [r5, #0]
   265ba:	b103      	cbz	r3, 265be <_write_r+0x1e>
   265bc:	6023      	str	r3, [r4, #0]
   265be:	bd38      	pop	{r3, r4, r5, pc}
   265c0:	2002f790 	.word	0x2002f790

000265c4 <__swsetup_r>:
   265c4:	4b31      	ldr	r3, [pc, #196]	; (2668c <__swsetup_r+0xc8>)
   265c6:	b570      	push	{r4, r5, r6, lr}
   265c8:	681d      	ldr	r5, [r3, #0]
   265ca:	4606      	mov	r6, r0
   265cc:	460c      	mov	r4, r1
   265ce:	b125      	cbz	r5, 265da <__swsetup_r+0x16>
   265d0:	69ab      	ldr	r3, [r5, #24]
   265d2:	b913      	cbnz	r3, 265da <__swsetup_r+0x16>
   265d4:	4628      	mov	r0, r5
   265d6:	f7fe ff59 	bl	2548c <__sinit>
   265da:	4b2d      	ldr	r3, [pc, #180]	; (26690 <__swsetup_r+0xcc>)
   265dc:	429c      	cmp	r4, r3
   265de:	d10e      	bne.n	265fe <__swsetup_r+0x3a>
   265e0:	686c      	ldr	r4, [r5, #4]
   265e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   265e6:	071a      	lsls	r2, r3, #28
   265e8:	d42c      	bmi.n	26644 <__swsetup_r+0x80>
   265ea:	06dd      	lsls	r5, r3, #27
   265ec:	d411      	bmi.n	26612 <__swsetup_r+0x4e>
   265ee:	2209      	movs	r2, #9
   265f0:	6032      	str	r2, [r6, #0]
   265f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   265f6:	f04f 30ff 	mov.w	r0, #4294967295
   265fa:	81a3      	strh	r3, [r4, #12]
   265fc:	e03d      	b.n	2667a <__swsetup_r+0xb6>
   265fe:	4b25      	ldr	r3, [pc, #148]	; (26694 <__swsetup_r+0xd0>)
   26600:	429c      	cmp	r4, r3
   26602:	d101      	bne.n	26608 <__swsetup_r+0x44>
   26604:	68ac      	ldr	r4, [r5, #8]
   26606:	e7ec      	b.n	265e2 <__swsetup_r+0x1e>
   26608:	4b23      	ldr	r3, [pc, #140]	; (26698 <__swsetup_r+0xd4>)
   2660a:	429c      	cmp	r4, r3
   2660c:	bf08      	it	eq
   2660e:	68ec      	ldreq	r4, [r5, #12]
   26610:	e7e7      	b.n	265e2 <__swsetup_r+0x1e>
   26612:	0758      	lsls	r0, r3, #29
   26614:	d512      	bpl.n	2663c <__swsetup_r+0x78>
   26616:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26618:	b141      	cbz	r1, 2662c <__swsetup_r+0x68>
   2661a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2661e:	4299      	cmp	r1, r3
   26620:	d002      	beq.n	26628 <__swsetup_r+0x64>
   26622:	4630      	mov	r0, r6
   26624:	f7fd ff16 	bl	24454 <_free_r>
   26628:	2300      	movs	r3, #0
   2662a:	6363      	str	r3, [r4, #52]	; 0x34
   2662c:	89a3      	ldrh	r3, [r4, #12]
   2662e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   26632:	81a3      	strh	r3, [r4, #12]
   26634:	2300      	movs	r3, #0
   26636:	6063      	str	r3, [r4, #4]
   26638:	6923      	ldr	r3, [r4, #16]
   2663a:	6023      	str	r3, [r4, #0]
   2663c:	89a3      	ldrh	r3, [r4, #12]
   2663e:	f043 0308 	orr.w	r3, r3, #8
   26642:	81a3      	strh	r3, [r4, #12]
   26644:	6923      	ldr	r3, [r4, #16]
   26646:	b94b      	cbnz	r3, 2665c <__swsetup_r+0x98>
   26648:	89a3      	ldrh	r3, [r4, #12]
   2664a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2664e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   26652:	d003      	beq.n	2665c <__swsetup_r+0x98>
   26654:	4621      	mov	r1, r4
   26656:	4630      	mov	r0, r6
   26658:	f000 f88a 	bl	26770 <__smakebuf_r>
   2665c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26660:	f013 0201 	ands.w	r2, r3, #1
   26664:	d00a      	beq.n	2667c <__swsetup_r+0xb8>
   26666:	2200      	movs	r2, #0
   26668:	60a2      	str	r2, [r4, #8]
   2666a:	6962      	ldr	r2, [r4, #20]
   2666c:	4252      	negs	r2, r2
   2666e:	61a2      	str	r2, [r4, #24]
   26670:	6922      	ldr	r2, [r4, #16]
   26672:	b942      	cbnz	r2, 26686 <__swsetup_r+0xc2>
   26674:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   26678:	d1bb      	bne.n	265f2 <__swsetup_r+0x2e>
   2667a:	bd70      	pop	{r4, r5, r6, pc}
   2667c:	0799      	lsls	r1, r3, #30
   2667e:	bf58      	it	pl
   26680:	6962      	ldrpl	r2, [r4, #20]
   26682:	60a2      	str	r2, [r4, #8]
   26684:	e7f4      	b.n	26670 <__swsetup_r+0xac>
   26686:	2000      	movs	r0, #0
   26688:	e7f7      	b.n	2667a <__swsetup_r+0xb6>
   2668a:	bf00      	nop
   2668c:	2000879c 	.word	0x2000879c
   26690:	0002e5f8 	.word	0x0002e5f8
   26694:	0002e5d8 	.word	0x0002e5d8
   26698:	0002e5b8 	.word	0x0002e5b8

0002669c <_close_r>:
   2669c:	b538      	push	{r3, r4, r5, lr}
   2669e:	2300      	movs	r3, #0
   266a0:	4d05      	ldr	r5, [pc, #20]	; (266b8 <_close_r+0x1c>)
   266a2:	4604      	mov	r4, r0
   266a4:	4608      	mov	r0, r1
   266a6:	602b      	str	r3, [r5, #0]
   266a8:	f002 f845 	bl	28736 <_close>
   266ac:	1c43      	adds	r3, r0, #1
   266ae:	d102      	bne.n	266b6 <_close_r+0x1a>
   266b0:	682b      	ldr	r3, [r5, #0]
   266b2:	b103      	cbz	r3, 266b6 <_close_r+0x1a>
   266b4:	6023      	str	r3, [r4, #0]
   266b6:	bd38      	pop	{r3, r4, r5, pc}
   266b8:	2002f790 	.word	0x2002f790

000266bc <__env_lock>:
   266bc:	4801      	ldr	r0, [pc, #4]	; (266c4 <__env_lock+0x8>)
   266be:	f7eb bcdf 	b.w	12080 <__retarget_lock_acquire_recursive>
   266c2:	bf00      	nop
   266c4:	20008ae4 	.word	0x20008ae4

000266c8 <__env_unlock>:
   266c8:	4801      	ldr	r0, [pc, #4]	; (266d0 <__env_unlock+0x8>)
   266ca:	f7eb bd0d 	b.w	120e8 <__retarget_lock_release_recursive>
   266ce:	bf00      	nop
   266d0:	20008ae4 	.word	0x20008ae4

000266d4 <_fflush_r>:
   266d4:	b538      	push	{r3, r4, r5, lr}
   266d6:	690b      	ldr	r3, [r1, #16]
   266d8:	4605      	mov	r5, r0
   266da:	460c      	mov	r4, r1
   266dc:	b913      	cbnz	r3, 266e4 <_fflush_r+0x10>
   266de:	2500      	movs	r5, #0
   266e0:	4628      	mov	r0, r5
   266e2:	bd38      	pop	{r3, r4, r5, pc}
   266e4:	b118      	cbz	r0, 266ee <_fflush_r+0x1a>
   266e6:	6983      	ldr	r3, [r0, #24]
   266e8:	b90b      	cbnz	r3, 266ee <_fflush_r+0x1a>
   266ea:	f7fe fecf 	bl	2548c <__sinit>
   266ee:	4b14      	ldr	r3, [pc, #80]	; (26740 <_fflush_r+0x6c>)
   266f0:	429c      	cmp	r4, r3
   266f2:	d11b      	bne.n	2672c <_fflush_r+0x58>
   266f4:	686c      	ldr	r4, [r5, #4]
   266f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   266fa:	2b00      	cmp	r3, #0
   266fc:	d0ef      	beq.n	266de <_fflush_r+0xa>
   266fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
   26700:	07d0      	lsls	r0, r2, #31
   26702:	d404      	bmi.n	2670e <_fflush_r+0x3a>
   26704:	0599      	lsls	r1, r3, #22
   26706:	d402      	bmi.n	2670e <_fflush_r+0x3a>
   26708:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2670a:	f7eb fcb9 	bl	12080 <__retarget_lock_acquire_recursive>
   2670e:	4628      	mov	r0, r5
   26710:	4621      	mov	r1, r4
   26712:	f006 fa5c 	bl	2cbce <__sflush_r>
   26716:	6e63      	ldr	r3, [r4, #100]	; 0x64
   26718:	4605      	mov	r5, r0
   2671a:	07da      	lsls	r2, r3, #31
   2671c:	d4e0      	bmi.n	266e0 <_fflush_r+0xc>
   2671e:	89a3      	ldrh	r3, [r4, #12]
   26720:	059b      	lsls	r3, r3, #22
   26722:	d4dd      	bmi.n	266e0 <_fflush_r+0xc>
   26724:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26726:	f7eb fcdf 	bl	120e8 <__retarget_lock_release_recursive>
   2672a:	e7d9      	b.n	266e0 <_fflush_r+0xc>
   2672c:	4b05      	ldr	r3, [pc, #20]	; (26744 <_fflush_r+0x70>)
   2672e:	429c      	cmp	r4, r3
   26730:	d101      	bne.n	26736 <_fflush_r+0x62>
   26732:	68ac      	ldr	r4, [r5, #8]
   26734:	e7df      	b.n	266f6 <_fflush_r+0x22>
   26736:	4b04      	ldr	r3, [pc, #16]	; (26748 <_fflush_r+0x74>)
   26738:	429c      	cmp	r4, r3
   2673a:	bf08      	it	eq
   2673c:	68ec      	ldreq	r4, [r5, #12]
   2673e:	e7da      	b.n	266f6 <_fflush_r+0x22>
   26740:	0002e5f8 	.word	0x0002e5f8
   26744:	0002e5d8 	.word	0x0002e5d8
   26748:	0002e5b8 	.word	0x0002e5b8

0002674c <_lseek_r>:
   2674c:	b538      	push	{r3, r4, r5, lr}
   2674e:	4604      	mov	r4, r0
   26750:	4d06      	ldr	r5, [pc, #24]	; (2676c <_lseek_r+0x20>)
   26752:	4608      	mov	r0, r1
   26754:	4611      	mov	r1, r2
   26756:	2200      	movs	r2, #0
   26758:	602a      	str	r2, [r5, #0]
   2675a:	461a      	mov	r2, r3
   2675c:	f001 ffee 	bl	2873c <_lseek>
   26760:	1c43      	adds	r3, r0, #1
   26762:	d102      	bne.n	2676a <_lseek_r+0x1e>
   26764:	682b      	ldr	r3, [r5, #0]
   26766:	b103      	cbz	r3, 2676a <_lseek_r+0x1e>
   26768:	6023      	str	r3, [r4, #0]
   2676a:	bd38      	pop	{r3, r4, r5, pc}
   2676c:	2002f790 	.word	0x2002f790

00026770 <__smakebuf_r>:
   26770:	898b      	ldrh	r3, [r1, #12]
   26772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26774:	079d      	lsls	r5, r3, #30
   26776:	4606      	mov	r6, r0
   26778:	460c      	mov	r4, r1
   2677a:	d507      	bpl.n	2678c <__smakebuf_r+0x1c>
   2677c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   26780:	6023      	str	r3, [r4, #0]
   26782:	6123      	str	r3, [r4, #16]
   26784:	2301      	movs	r3, #1
   26786:	6163      	str	r3, [r4, #20]
   26788:	b003      	add	sp, #12
   2678a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2678c:	ab01      	add	r3, sp, #4
   2678e:	466a      	mov	r2, sp
   26790:	f006 fa9c 	bl	2cccc <__swhatbuf_r>
   26794:	9f00      	ldr	r7, [sp, #0]
   26796:	4605      	mov	r5, r0
   26798:	4630      	mov	r0, r6
   2679a:	4639      	mov	r1, r7
   2679c:	f7fd fea4 	bl	244e8 <_malloc_r>
   267a0:	b948      	cbnz	r0, 267b6 <__smakebuf_r+0x46>
   267a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   267a6:	059a      	lsls	r2, r3, #22
   267a8:	d4ee      	bmi.n	26788 <__smakebuf_r+0x18>
   267aa:	f023 0303 	bic.w	r3, r3, #3
   267ae:	f043 0302 	orr.w	r3, r3, #2
   267b2:	81a3      	strh	r3, [r4, #12]
   267b4:	e7e2      	b.n	2677c <__smakebuf_r+0xc>
   267b6:	4b0d      	ldr	r3, [pc, #52]	; (267ec <__smakebuf_r+0x7c>)
   267b8:	62b3      	str	r3, [r6, #40]	; 0x28
   267ba:	89a3      	ldrh	r3, [r4, #12]
   267bc:	6020      	str	r0, [r4, #0]
   267be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   267c2:	81a3      	strh	r3, [r4, #12]
   267c4:	9b01      	ldr	r3, [sp, #4]
   267c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
   267ca:	b15b      	cbz	r3, 267e4 <__smakebuf_r+0x74>
   267cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   267d0:	4630      	mov	r0, r6
   267d2:	f000 fb1b 	bl	26e0c <_isatty_r>
   267d6:	b128      	cbz	r0, 267e4 <__smakebuf_r+0x74>
   267d8:	89a3      	ldrh	r3, [r4, #12]
   267da:	f023 0303 	bic.w	r3, r3, #3
   267de:	f043 0301 	orr.w	r3, r3, #1
   267e2:	81a3      	strh	r3, [r4, #12]
   267e4:	89a3      	ldrh	r3, [r4, #12]
   267e6:	431d      	orrs	r5, r3
   267e8:	81a5      	strh	r5, [r4, #12]
   267ea:	e7cd      	b.n	26788 <__smakebuf_r+0x18>
   267ec:	00025451 	.word	0x00025451

000267f0 <__ssvfiscanf_r>:
   267f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   267f4:	460c      	mov	r4, r1
   267f6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   267fa:	2100      	movs	r1, #0
   267fc:	4606      	mov	r6, r0
   267fe:	f10d 0804 	add.w	r8, sp, #4
   26802:	4fa7      	ldr	r7, [pc, #668]	; (26aa0 <__ssvfiscanf_r+0x2b0>)
   26804:	9300      	str	r3, [sp, #0]
   26806:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   2680a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2680e:	49a5      	ldr	r1, [pc, #660]	; (26aa4 <__ssvfiscanf_r+0x2b4>)
   26810:	91a0      	str	r1, [sp, #640]	; 0x280
   26812:	49a5      	ldr	r1, [pc, #660]	; (26aa8 <__ssvfiscanf_r+0x2b8>)
   26814:	91a1      	str	r1, [sp, #644]	; 0x284
   26816:	7813      	ldrb	r3, [r2, #0]
   26818:	2b00      	cmp	r3, #0
   2681a:	f000 815c 	beq.w	26ad6 <__ssvfiscanf_r+0x2e6>
   2681e:	5cf9      	ldrb	r1, [r7, r3]
   26820:	1c55      	adds	r5, r2, #1
   26822:	f011 0108 	ands.w	r1, r1, #8
   26826:	d019      	beq.n	2685c <__ssvfiscanf_r+0x6c>
   26828:	6863      	ldr	r3, [r4, #4]
   2682a:	2b00      	cmp	r3, #0
   2682c:	dd0f      	ble.n	2684e <__ssvfiscanf_r+0x5e>
   2682e:	6823      	ldr	r3, [r4, #0]
   26830:	781a      	ldrb	r2, [r3, #0]
   26832:	5cba      	ldrb	r2, [r7, r2]
   26834:	0712      	lsls	r2, r2, #28
   26836:	d401      	bmi.n	2683c <__ssvfiscanf_r+0x4c>
   26838:	462a      	mov	r2, r5
   2683a:	e7ec      	b.n	26816 <__ssvfiscanf_r+0x26>
   2683c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2683e:	3301      	adds	r3, #1
   26840:	3201      	adds	r2, #1
   26842:	6023      	str	r3, [r4, #0]
   26844:	9245      	str	r2, [sp, #276]	; 0x114
   26846:	6862      	ldr	r2, [r4, #4]
   26848:	3a01      	subs	r2, #1
   2684a:	6062      	str	r2, [r4, #4]
   2684c:	e7ec      	b.n	26828 <__ssvfiscanf_r+0x38>
   2684e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26850:	4621      	mov	r1, r4
   26852:	4630      	mov	r0, r6
   26854:	4798      	blx	r3
   26856:	2800      	cmp	r0, #0
   26858:	d0e9      	beq.n	2682e <__ssvfiscanf_r+0x3e>
   2685a:	e7ed      	b.n	26838 <__ssvfiscanf_r+0x48>
   2685c:	2b25      	cmp	r3, #37	; 0x25
   2685e:	d012      	beq.n	26886 <__ssvfiscanf_r+0x96>
   26860:	4699      	mov	r9, r3
   26862:	6863      	ldr	r3, [r4, #4]
   26864:	2b00      	cmp	r3, #0
   26866:	f340 8094 	ble.w	26992 <__ssvfiscanf_r+0x1a2>
   2686a:	6822      	ldr	r2, [r4, #0]
   2686c:	7813      	ldrb	r3, [r2, #0]
   2686e:	454b      	cmp	r3, r9
   26870:	f040 8131 	bne.w	26ad6 <__ssvfiscanf_r+0x2e6>
   26874:	6863      	ldr	r3, [r4, #4]
   26876:	3201      	adds	r2, #1
   26878:	3b01      	subs	r3, #1
   2687a:	6022      	str	r2, [r4, #0]
   2687c:	6063      	str	r3, [r4, #4]
   2687e:	9b45      	ldr	r3, [sp, #276]	; 0x114
   26880:	3301      	adds	r3, #1
   26882:	9345      	str	r3, [sp, #276]	; 0x114
   26884:	e7d8      	b.n	26838 <__ssvfiscanf_r+0x48>
   26886:	9141      	str	r1, [sp, #260]	; 0x104
   26888:	9143      	str	r1, [sp, #268]	; 0x10c
   2688a:	7853      	ldrb	r3, [r2, #1]
   2688c:	2b2a      	cmp	r3, #42	; 0x2a
   2688e:	bf04      	itt	eq
   26890:	2310      	moveq	r3, #16
   26892:	1c95      	addeq	r5, r2, #2
   26894:	f04f 020a 	mov.w	r2, #10
   26898:	bf08      	it	eq
   2689a:	9341      	streq	r3, [sp, #260]	; 0x104
   2689c:	46a9      	mov	r9, r5
   2689e:	f819 1b01 	ldrb.w	r1, [r9], #1
   268a2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   268a6:	2b09      	cmp	r3, #9
   268a8:	d91e      	bls.n	268e8 <__ssvfiscanf_r+0xf8>
   268aa:	f8df a200 	ldr.w	sl, [pc, #512]	; 26aac <__ssvfiscanf_r+0x2bc>
   268ae:	2203      	movs	r2, #3
   268b0:	4650      	mov	r0, sl
   268b2:	f006 f820 	bl	2c8f6 <memchr>
   268b6:	b138      	cbz	r0, 268c8 <__ssvfiscanf_r+0xd8>
   268b8:	eba0 000a 	sub.w	r0, r0, sl
   268bc:	2301      	movs	r3, #1
   268be:	9a41      	ldr	r2, [sp, #260]	; 0x104
   268c0:	464d      	mov	r5, r9
   268c2:	4083      	lsls	r3, r0
   268c4:	4313      	orrs	r3, r2
   268c6:	9341      	str	r3, [sp, #260]	; 0x104
   268c8:	f815 3b01 	ldrb.w	r3, [r5], #1
   268cc:	2b78      	cmp	r3, #120	; 0x78
   268ce:	d806      	bhi.n	268de <__ssvfiscanf_r+0xee>
   268d0:	2b57      	cmp	r3, #87	; 0x57
   268d2:	d810      	bhi.n	268f6 <__ssvfiscanf_r+0x106>
   268d4:	2b25      	cmp	r3, #37	; 0x25
   268d6:	d0c3      	beq.n	26860 <__ssvfiscanf_r+0x70>
   268d8:	d856      	bhi.n	26988 <__ssvfiscanf_r+0x198>
   268da:	2b00      	cmp	r3, #0
   268dc:	d064      	beq.n	269a8 <__ssvfiscanf_r+0x1b8>
   268de:	2303      	movs	r3, #3
   268e0:	9347      	str	r3, [sp, #284]	; 0x11c
   268e2:	230a      	movs	r3, #10
   268e4:	9342      	str	r3, [sp, #264]	; 0x108
   268e6:	e06a      	b.n	269be <__ssvfiscanf_r+0x1ce>
   268e8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   268ea:	464d      	mov	r5, r9
   268ec:	fb02 1103 	mla	r1, r2, r3, r1
   268f0:	3930      	subs	r1, #48	; 0x30
   268f2:	9143      	str	r1, [sp, #268]	; 0x10c
   268f4:	e7d2      	b.n	2689c <__ssvfiscanf_r+0xac>
   268f6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   268fa:	2a20      	cmp	r2, #32
   268fc:	d8ef      	bhi.n	268de <__ssvfiscanf_r+0xee>
   268fe:	a101      	add	r1, pc, #4	; (adr r1, 26904 <__ssvfiscanf_r+0x114>)
   26900:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   26904:	000269f3 	.word	0x000269f3
   26908:	000268df 	.word	0x000268df
   2690c:	000268df 	.word	0x000268df
   26910:	00026a15 	.word	0x00026a15
   26914:	000268df 	.word	0x000268df
   26918:	000268df 	.word	0x000268df
   2691c:	000268df 	.word	0x000268df
   26920:	000268df 	.word	0x000268df
   26924:	000268df 	.word	0x000268df
   26928:	000268df 	.word	0x000268df
   2692c:	000268df 	.word	0x000268df
   26930:	00026a2b 	.word	0x00026a2b
   26934:	00026a11 	.word	0x00026a11
   26938:	0002698f 	.word	0x0002698f
   2693c:	0002698f 	.word	0x0002698f
   26940:	0002698f 	.word	0x0002698f
   26944:	000268df 	.word	0x000268df
   26948:	00026a05 	.word	0x00026a05
   2694c:	000268df 	.word	0x000268df
   26950:	000268df 	.word	0x000268df
   26954:	000268df 	.word	0x000268df
   26958:	000268df 	.word	0x000268df
   2695c:	00026a3b 	.word	0x00026a3b
   26960:	00026a0d 	.word	0x00026a0d
   26964:	000269af 	.word	0x000269af
   26968:	000268df 	.word	0x000268df
   2696c:	000268df 	.word	0x000268df
   26970:	00026a37 	.word	0x00026a37
   26974:	000268df 	.word	0x000268df
   26978:	00026a11 	.word	0x00026a11
   2697c:	000268df 	.word	0x000268df
   26980:	000268df 	.word	0x000268df
   26984:	000269f3 	.word	0x000269f3
   26988:	3b45      	subs	r3, #69	; 0x45
   2698a:	2b02      	cmp	r3, #2
   2698c:	d8a7      	bhi.n	268de <__ssvfiscanf_r+0xee>
   2698e:	2305      	movs	r3, #5
   26990:	e014      	b.n	269bc <__ssvfiscanf_r+0x1cc>
   26992:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26994:	4621      	mov	r1, r4
   26996:	4630      	mov	r0, r6
   26998:	4798      	blx	r3
   2699a:	2800      	cmp	r0, #0
   2699c:	f43f af65 	beq.w	2686a <__ssvfiscanf_r+0x7a>
   269a0:	9844      	ldr	r0, [sp, #272]	; 0x110
   269a2:	2800      	cmp	r0, #0
   269a4:	f040 808f 	bne.w	26ac6 <__ssvfiscanf_r+0x2d6>
   269a8:	f04f 30ff 	mov.w	r0, #4294967295
   269ac:	e08f      	b.n	26ace <__ssvfiscanf_r+0x2de>
   269ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
   269b0:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   269b4:	9341      	str	r3, [sp, #260]	; 0x104
   269b6:	2310      	movs	r3, #16
   269b8:	9342      	str	r3, [sp, #264]	; 0x108
   269ba:	2304      	movs	r3, #4
   269bc:	9347      	str	r3, [sp, #284]	; 0x11c
   269be:	6863      	ldr	r3, [r4, #4]
   269c0:	2b00      	cmp	r3, #0
   269c2:	dd4a      	ble.n	26a5a <__ssvfiscanf_r+0x26a>
   269c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   269c6:	0659      	lsls	r1, r3, #25
   269c8:	d404      	bmi.n	269d4 <__ssvfiscanf_r+0x1e4>
   269ca:	6823      	ldr	r3, [r4, #0]
   269cc:	781a      	ldrb	r2, [r3, #0]
   269ce:	5cba      	ldrb	r2, [r7, r2]
   269d0:	0712      	lsls	r2, r2, #28
   269d2:	d449      	bmi.n	26a68 <__ssvfiscanf_r+0x278>
   269d4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   269d6:	2b02      	cmp	r3, #2
   269d8:	dc58      	bgt.n	26a8c <__ssvfiscanf_r+0x29c>
   269da:	466b      	mov	r3, sp
   269dc:	4622      	mov	r2, r4
   269de:	a941      	add	r1, sp, #260	; 0x104
   269e0:	4630      	mov	r0, r6
   269e2:	f000 f87d 	bl	26ae0 <_scanf_chars>
   269e6:	2801      	cmp	r0, #1
   269e8:	d075      	beq.n	26ad6 <__ssvfiscanf_r+0x2e6>
   269ea:	2802      	cmp	r0, #2
   269ec:	f47f af24 	bne.w	26838 <__ssvfiscanf_r+0x48>
   269f0:	e7d6      	b.n	269a0 <__ssvfiscanf_r+0x1b0>
   269f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   269f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   269f8:	9241      	str	r2, [sp, #260]	; 0x104
   269fa:	2210      	movs	r2, #16
   269fc:	2b6e      	cmp	r3, #110	; 0x6e
   269fe:	9242      	str	r2, [sp, #264]	; 0x108
   26a00:	d902      	bls.n	26a08 <__ssvfiscanf_r+0x218>
   26a02:	e7da      	b.n	269ba <__ssvfiscanf_r+0x1ca>
   26a04:	2300      	movs	r3, #0
   26a06:	9342      	str	r3, [sp, #264]	; 0x108
   26a08:	2303      	movs	r3, #3
   26a0a:	e7d7      	b.n	269bc <__ssvfiscanf_r+0x1cc>
   26a0c:	2308      	movs	r3, #8
   26a0e:	e7d3      	b.n	269b8 <__ssvfiscanf_r+0x1c8>
   26a10:	220a      	movs	r2, #10
   26a12:	e7f3      	b.n	269fc <__ssvfiscanf_r+0x20c>
   26a14:	4629      	mov	r1, r5
   26a16:	4640      	mov	r0, r8
   26a18:	f006 f9fa 	bl	2ce10 <__sccl>
   26a1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   26a1e:	4605      	mov	r5, r0
   26a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26a24:	9341      	str	r3, [sp, #260]	; 0x104
   26a26:	2301      	movs	r3, #1
   26a28:	e7c8      	b.n	269bc <__ssvfiscanf_r+0x1cc>
   26a2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   26a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26a30:	9341      	str	r3, [sp, #260]	; 0x104
   26a32:	2300      	movs	r3, #0
   26a34:	e7c2      	b.n	269bc <__ssvfiscanf_r+0x1cc>
   26a36:	2302      	movs	r3, #2
   26a38:	e7c0      	b.n	269bc <__ssvfiscanf_r+0x1cc>
   26a3a:	9841      	ldr	r0, [sp, #260]	; 0x104
   26a3c:	06c3      	lsls	r3, r0, #27
   26a3e:	f53f aefb 	bmi.w	26838 <__ssvfiscanf_r+0x48>
   26a42:	9b00      	ldr	r3, [sp, #0]
   26a44:	f010 0f01 	tst.w	r0, #1
   26a48:	9a45      	ldr	r2, [sp, #276]	; 0x114
   26a4a:	f103 0104 	add.w	r1, r3, #4
   26a4e:	9100      	str	r1, [sp, #0]
   26a50:	681b      	ldr	r3, [r3, #0]
   26a52:	bf14      	ite	ne
   26a54:	801a      	strhne	r2, [r3, #0]
   26a56:	601a      	streq	r2, [r3, #0]
   26a58:	e6ee      	b.n	26838 <__ssvfiscanf_r+0x48>
   26a5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26a5c:	4621      	mov	r1, r4
   26a5e:	4630      	mov	r0, r6
   26a60:	4798      	blx	r3
   26a62:	2800      	cmp	r0, #0
   26a64:	d0ae      	beq.n	269c4 <__ssvfiscanf_r+0x1d4>
   26a66:	e79b      	b.n	269a0 <__ssvfiscanf_r+0x1b0>
   26a68:	9a45      	ldr	r2, [sp, #276]	; 0x114
   26a6a:	3201      	adds	r2, #1
   26a6c:	9245      	str	r2, [sp, #276]	; 0x114
   26a6e:	6862      	ldr	r2, [r4, #4]
   26a70:	3a01      	subs	r2, #1
   26a72:	2a00      	cmp	r2, #0
   26a74:	6062      	str	r2, [r4, #4]
   26a76:	dd02      	ble.n	26a7e <__ssvfiscanf_r+0x28e>
   26a78:	3301      	adds	r3, #1
   26a7a:	6023      	str	r3, [r4, #0]
   26a7c:	e7a5      	b.n	269ca <__ssvfiscanf_r+0x1da>
   26a7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26a80:	4621      	mov	r1, r4
   26a82:	4630      	mov	r0, r6
   26a84:	4798      	blx	r3
   26a86:	2800      	cmp	r0, #0
   26a88:	d09f      	beq.n	269ca <__ssvfiscanf_r+0x1da>
   26a8a:	e789      	b.n	269a0 <__ssvfiscanf_r+0x1b0>
   26a8c:	2b04      	cmp	r3, #4
   26a8e:	dc0f      	bgt.n	26ab0 <__ssvfiscanf_r+0x2c0>
   26a90:	466b      	mov	r3, sp
   26a92:	4622      	mov	r2, r4
   26a94:	a941      	add	r1, sp, #260	; 0x104
   26a96:	4630      	mov	r0, r6
   26a98:	f000 f87c 	bl	26b94 <_scanf_i>
   26a9c:	e7a3      	b.n	269e6 <__ssvfiscanf_r+0x1f6>
   26a9e:	bf00      	nop
   26aa0:	00034022 	.word	0x00034022
   26aa4:	0002cd61 	.word	0x0002cd61
   26aa8:	0002cdd7 	.word	0x0002cdd7
   26aac:	000343e4 	.word	0x000343e4
   26ab0:	4b0a      	ldr	r3, [pc, #40]	; (26adc <__ssvfiscanf_r+0x2ec>)
   26ab2:	2b00      	cmp	r3, #0
   26ab4:	f43f aec0 	beq.w	26838 <__ssvfiscanf_r+0x48>
   26ab8:	466b      	mov	r3, sp
   26aba:	4622      	mov	r2, r4
   26abc:	a941      	add	r1, sp, #260	; 0x104
   26abe:	4630      	mov	r0, r6
   26ac0:	f3af 8000 	nop.w
   26ac4:	e78f      	b.n	269e6 <__ssvfiscanf_r+0x1f6>
   26ac6:	89a3      	ldrh	r3, [r4, #12]
   26ac8:	065b      	lsls	r3, r3, #25
   26aca:	f53f af6d 	bmi.w	269a8 <__ssvfiscanf_r+0x1b8>
   26ace:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   26ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26ad6:	9844      	ldr	r0, [sp, #272]	; 0x110
   26ad8:	e7f9      	b.n	26ace <__ssvfiscanf_r+0x2de>
   26ada:	bf00      	nop
   26adc:	00000000 	.word	0x00000000

00026ae0 <_scanf_chars>:
   26ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26ae4:	4615      	mov	r5, r2
   26ae6:	688a      	ldr	r2, [r1, #8]
   26ae8:	4680      	mov	r8, r0
   26aea:	460c      	mov	r4, r1
   26aec:	b932      	cbnz	r2, 26afc <_scanf_chars+0x1c>
   26aee:	698a      	ldr	r2, [r1, #24]
   26af0:	2a00      	cmp	r2, #0
   26af2:	bf14      	ite	ne
   26af4:	f04f 32ff 	movne.w	r2, #4294967295
   26af8:	2201      	moveq	r2, #1
   26afa:	608a      	str	r2, [r1, #8]
   26afc:	6822      	ldr	r2, [r4, #0]
   26afe:	2700      	movs	r7, #0
   26b00:	f8df 908c 	ldr.w	r9, [pc, #140]	; 26b90 <_scanf_chars+0xb0>
   26b04:	06d1      	lsls	r1, r2, #27
   26b06:	bf5f      	itttt	pl
   26b08:	681a      	ldrpl	r2, [r3, #0]
   26b0a:	1d11      	addpl	r1, r2, #4
   26b0c:	6019      	strpl	r1, [r3, #0]
   26b0e:	6816      	ldrpl	r6, [r2, #0]
   26b10:	69a0      	ldr	r0, [r4, #24]
   26b12:	b188      	cbz	r0, 26b38 <_scanf_chars+0x58>
   26b14:	2801      	cmp	r0, #1
   26b16:	d107      	bne.n	26b28 <_scanf_chars+0x48>
   26b18:	682b      	ldr	r3, [r5, #0]
   26b1a:	781a      	ldrb	r2, [r3, #0]
   26b1c:	6963      	ldr	r3, [r4, #20]
   26b1e:	5c9b      	ldrb	r3, [r3, r2]
   26b20:	b953      	cbnz	r3, 26b38 <_scanf_chars+0x58>
   26b22:	2f00      	cmp	r7, #0
   26b24:	d031      	beq.n	26b8a <_scanf_chars+0xaa>
   26b26:	e022      	b.n	26b6e <_scanf_chars+0x8e>
   26b28:	2802      	cmp	r0, #2
   26b2a:	d120      	bne.n	26b6e <_scanf_chars+0x8e>
   26b2c:	682b      	ldr	r3, [r5, #0]
   26b2e:	781b      	ldrb	r3, [r3, #0]
   26b30:	f819 3003 	ldrb.w	r3, [r9, r3]
   26b34:	071b      	lsls	r3, r3, #28
   26b36:	d41a      	bmi.n	26b6e <_scanf_chars+0x8e>
   26b38:	6823      	ldr	r3, [r4, #0]
   26b3a:	3701      	adds	r7, #1
   26b3c:	06da      	lsls	r2, r3, #27
   26b3e:	bf5e      	ittt	pl
   26b40:	682b      	ldrpl	r3, [r5, #0]
   26b42:	781b      	ldrbpl	r3, [r3, #0]
   26b44:	f806 3b01 	strbpl.w	r3, [r6], #1
   26b48:	682a      	ldr	r2, [r5, #0]
   26b4a:	686b      	ldr	r3, [r5, #4]
   26b4c:	3201      	adds	r2, #1
   26b4e:	3b01      	subs	r3, #1
   26b50:	602a      	str	r2, [r5, #0]
   26b52:	68a2      	ldr	r2, [r4, #8]
   26b54:	606b      	str	r3, [r5, #4]
   26b56:	3a01      	subs	r2, #1
   26b58:	60a2      	str	r2, [r4, #8]
   26b5a:	b142      	cbz	r2, 26b6e <_scanf_chars+0x8e>
   26b5c:	2b00      	cmp	r3, #0
   26b5e:	dcd7      	bgt.n	26b10 <_scanf_chars+0x30>
   26b60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   26b64:	4629      	mov	r1, r5
   26b66:	4640      	mov	r0, r8
   26b68:	4798      	blx	r3
   26b6a:	2800      	cmp	r0, #0
   26b6c:	d0d0      	beq.n	26b10 <_scanf_chars+0x30>
   26b6e:	6823      	ldr	r3, [r4, #0]
   26b70:	f013 0310 	ands.w	r3, r3, #16
   26b74:	d105      	bne.n	26b82 <_scanf_chars+0xa2>
   26b76:	68e2      	ldr	r2, [r4, #12]
   26b78:	3201      	adds	r2, #1
   26b7a:	60e2      	str	r2, [r4, #12]
   26b7c:	69a2      	ldr	r2, [r4, #24]
   26b7e:	b102      	cbz	r2, 26b82 <_scanf_chars+0xa2>
   26b80:	7033      	strb	r3, [r6, #0]
   26b82:	6923      	ldr	r3, [r4, #16]
   26b84:	2000      	movs	r0, #0
   26b86:	443b      	add	r3, r7
   26b88:	6123      	str	r3, [r4, #16]
   26b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26b8e:	bf00      	nop
   26b90:	00034022 	.word	0x00034022

00026b94 <_scanf_i>:
   26b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b98:	4698      	mov	r8, r3
   26b9a:	b087      	sub	sp, #28
   26b9c:	4b78      	ldr	r3, [pc, #480]	; (26d80 <_scanf_i+0x1ec>)
   26b9e:	460c      	mov	r4, r1
   26ba0:	4682      	mov	sl, r0
   26ba2:	4616      	mov	r6, r2
   26ba4:	4627      	mov	r7, r4
   26ba6:	f04f 0b00 	mov.w	fp, #0
   26baa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   26bae:	ab03      	add	r3, sp, #12
   26bb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   26bb4:	4b73      	ldr	r3, [pc, #460]	; (26d84 <_scanf_i+0x1f0>)
   26bb6:	69a1      	ldr	r1, [r4, #24]
   26bb8:	4a73      	ldr	r2, [pc, #460]	; (26d88 <_scanf_i+0x1f4>)
   26bba:	2903      	cmp	r1, #3
   26bbc:	bf08      	it	eq
   26bbe:	461a      	moveq	r2, r3
   26bc0:	68a3      	ldr	r3, [r4, #8]
   26bc2:	9201      	str	r2, [sp, #4]
   26bc4:	1e5a      	subs	r2, r3, #1
   26bc6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   26bca:	bf89      	itett	hi
   26bcc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   26bd0:	f04f 0900 	movls.w	r9, #0
   26bd4:	eb03 0905 	addhi.w	r9, r3, r5
   26bd8:	f240 135d 	movwhi	r3, #349	; 0x15d
   26bdc:	bf88      	it	hi
   26bde:	60a3      	strhi	r3, [r4, #8]
   26be0:	f857 3b1c 	ldr.w	r3, [r7], #28
   26be4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   26be8:	463d      	mov	r5, r7
   26bea:	6023      	str	r3, [r4, #0]
   26bec:	6831      	ldr	r1, [r6, #0]
   26bee:	ab03      	add	r3, sp, #12
   26bf0:	2202      	movs	r2, #2
   26bf2:	7809      	ldrb	r1, [r1, #0]
   26bf4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   26bf8:	f005 fe7d 	bl	2c8f6 <memchr>
   26bfc:	2800      	cmp	r0, #0
   26bfe:	d040      	beq.n	26c82 <_scanf_i+0xee>
   26c00:	f1bb 0f01 	cmp.w	fp, #1
   26c04:	d112      	bne.n	26c2c <_scanf_i+0x98>
   26c06:	6862      	ldr	r2, [r4, #4]
   26c08:	b92a      	cbnz	r2, 26c16 <_scanf_i+0x82>
   26c0a:	6822      	ldr	r2, [r4, #0]
   26c0c:	2108      	movs	r1, #8
   26c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   26c12:	6061      	str	r1, [r4, #4]
   26c14:	6022      	str	r2, [r4, #0]
   26c16:	6822      	ldr	r2, [r4, #0]
   26c18:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   26c1c:	6022      	str	r2, [r4, #0]
   26c1e:	68a2      	ldr	r2, [r4, #8]
   26c20:	1e51      	subs	r1, r2, #1
   26c22:	60a1      	str	r1, [r4, #8]
   26c24:	b9da      	cbnz	r2, 26c5e <_scanf_i+0xca>
   26c26:	f04f 0b02 	mov.w	fp, #2
   26c2a:	e7df      	b.n	26bec <_scanf_i+0x58>
   26c2c:	f1bb 0f02 	cmp.w	fp, #2
   26c30:	d006      	beq.n	26c40 <_scanf_i+0xac>
   26c32:	68a2      	ldr	r2, [r4, #8]
   26c34:	1e51      	subs	r1, r2, #1
   26c36:	60a1      	str	r1, [r4, #8]
   26c38:	b98a      	cbnz	r2, 26c5e <_scanf_i+0xca>
   26c3a:	f04f 0b01 	mov.w	fp, #1
   26c3e:	e7d5      	b.n	26bec <_scanf_i+0x58>
   26c40:	6822      	ldr	r2, [r4, #0]
   26c42:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   26c46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   26c4a:	d11f      	bne.n	26c8c <_scanf_i+0xf8>
   26c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   26c50:	2110      	movs	r1, #16
   26c52:	6022      	str	r2, [r4, #0]
   26c54:	68a2      	ldr	r2, [r4, #8]
   26c56:	6061      	str	r1, [r4, #4]
   26c58:	1e51      	subs	r1, r2, #1
   26c5a:	60a1      	str	r1, [r4, #8]
   26c5c:	b1b2      	cbz	r2, 26c8c <_scanf_i+0xf8>
   26c5e:	6832      	ldr	r2, [r6, #0]
   26c60:	1c51      	adds	r1, r2, #1
   26c62:	6031      	str	r1, [r6, #0]
   26c64:	7812      	ldrb	r2, [r2, #0]
   26c66:	f805 2b01 	strb.w	r2, [r5], #1
   26c6a:	6872      	ldr	r2, [r6, #4]
   26c6c:	3a01      	subs	r2, #1
   26c6e:	2a00      	cmp	r2, #0
   26c70:	6072      	str	r2, [r6, #4]
   26c72:	dc06      	bgt.n	26c82 <_scanf_i+0xee>
   26c74:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   26c78:	4631      	mov	r1, r6
   26c7a:	4650      	mov	r0, sl
   26c7c:	4790      	blx	r2
   26c7e:	2800      	cmp	r0, #0
   26c80:	d174      	bne.n	26d6c <_scanf_i+0x1d8>
   26c82:	f10b 0b01 	add.w	fp, fp, #1
   26c86:	f1bb 0f03 	cmp.w	fp, #3
   26c8a:	d1af      	bne.n	26bec <_scanf_i+0x58>
   26c8c:	6863      	ldr	r3, [r4, #4]
   26c8e:	b90b      	cbnz	r3, 26c94 <_scanf_i+0x100>
   26c90:	230a      	movs	r3, #10
   26c92:	6063      	str	r3, [r4, #4]
   26c94:	6863      	ldr	r3, [r4, #4]
   26c96:	f04f 0b00 	mov.w	fp, #0
   26c9a:	493c      	ldr	r1, [pc, #240]	; (26d8c <_scanf_i+0x1f8>)
   26c9c:	6960      	ldr	r0, [r4, #20]
   26c9e:	1ac9      	subs	r1, r1, r3
   26ca0:	f006 f8b6 	bl	2ce10 <__sccl>
   26ca4:	68a3      	ldr	r3, [r4, #8]
   26ca6:	6822      	ldr	r2, [r4, #0]
   26ca8:	b373      	cbz	r3, 26d08 <_scanf_i+0x174>
   26caa:	6831      	ldr	r1, [r6, #0]
   26cac:	6960      	ldr	r0, [r4, #20]
   26cae:	f891 c000 	ldrb.w	ip, [r1]
   26cb2:	f810 000c 	ldrb.w	r0, [r0, ip]
   26cb6:	b338      	cbz	r0, 26d08 <_scanf_i+0x174>
   26cb8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   26cbc:	d116      	bne.n	26cec <_scanf_i+0x158>
   26cbe:	0510      	lsls	r0, r2, #20
   26cc0:	d514      	bpl.n	26cec <_scanf_i+0x158>
   26cc2:	f10b 0b01 	add.w	fp, fp, #1
   26cc6:	f1b9 0f00 	cmp.w	r9, #0
   26cca:	d003      	beq.n	26cd4 <_scanf_i+0x140>
   26ccc:	3301      	adds	r3, #1
   26cce:	f109 39ff 	add.w	r9, r9, #4294967295
   26cd2:	60a3      	str	r3, [r4, #8]
   26cd4:	6873      	ldr	r3, [r6, #4]
   26cd6:	3b01      	subs	r3, #1
   26cd8:	2b00      	cmp	r3, #0
   26cda:	6073      	str	r3, [r6, #4]
   26cdc:	dd0d      	ble.n	26cfa <_scanf_i+0x166>
   26cde:	6833      	ldr	r3, [r6, #0]
   26ce0:	3301      	adds	r3, #1
   26ce2:	6033      	str	r3, [r6, #0]
   26ce4:	68a3      	ldr	r3, [r4, #8]
   26ce6:	3b01      	subs	r3, #1
   26ce8:	60a3      	str	r3, [r4, #8]
   26cea:	e7db      	b.n	26ca4 <_scanf_i+0x110>
   26cec:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   26cf0:	6022      	str	r2, [r4, #0]
   26cf2:	780b      	ldrb	r3, [r1, #0]
   26cf4:	f805 3b01 	strb.w	r3, [r5], #1
   26cf8:	e7ec      	b.n	26cd4 <_scanf_i+0x140>
   26cfa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   26cfe:	4631      	mov	r1, r6
   26d00:	4650      	mov	r0, sl
   26d02:	4798      	blx	r3
   26d04:	2800      	cmp	r0, #0
   26d06:	d0ed      	beq.n	26ce4 <_scanf_i+0x150>
   26d08:	6823      	ldr	r3, [r4, #0]
   26d0a:	05d9      	lsls	r1, r3, #23
   26d0c:	d50d      	bpl.n	26d2a <_scanf_i+0x196>
   26d0e:	42bd      	cmp	r5, r7
   26d10:	d909      	bls.n	26d26 <_scanf_i+0x192>
   26d12:	f105 39ff 	add.w	r9, r5, #4294967295
   26d16:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   26d1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   26d1e:	4632      	mov	r2, r6
   26d20:	464d      	mov	r5, r9
   26d22:	4650      	mov	r0, sl
   26d24:	4798      	blx	r3
   26d26:	42bd      	cmp	r5, r7
   26d28:	d028      	beq.n	26d7c <_scanf_i+0x1e8>
   26d2a:	6822      	ldr	r2, [r4, #0]
   26d2c:	f012 0210 	ands.w	r2, r2, #16
   26d30:	d113      	bne.n	26d5a <_scanf_i+0x1c6>
   26d32:	702a      	strb	r2, [r5, #0]
   26d34:	4639      	mov	r1, r7
   26d36:	6863      	ldr	r3, [r4, #4]
   26d38:	4650      	mov	r0, sl
   26d3a:	9e01      	ldr	r6, [sp, #4]
   26d3c:	47b0      	blx	r6
   26d3e:	f8d8 3000 	ldr.w	r3, [r8]
   26d42:	6821      	ldr	r1, [r4, #0]
   26d44:	1d1a      	adds	r2, r3, #4
   26d46:	f011 0f20 	tst.w	r1, #32
   26d4a:	f8c8 2000 	str.w	r2, [r8]
   26d4e:	681b      	ldr	r3, [r3, #0]
   26d50:	d00f      	beq.n	26d72 <_scanf_i+0x1de>
   26d52:	6018      	str	r0, [r3, #0]
   26d54:	68e3      	ldr	r3, [r4, #12]
   26d56:	3301      	adds	r3, #1
   26d58:	60e3      	str	r3, [r4, #12]
   26d5a:	1bed      	subs	r5, r5, r7
   26d5c:	6923      	ldr	r3, [r4, #16]
   26d5e:	2000      	movs	r0, #0
   26d60:	445d      	add	r5, fp
   26d62:	442b      	add	r3, r5
   26d64:	6123      	str	r3, [r4, #16]
   26d66:	b007      	add	sp, #28
   26d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d6c:	f04f 0b00 	mov.w	fp, #0
   26d70:	e7ca      	b.n	26d08 <_scanf_i+0x174>
   26d72:	07ca      	lsls	r2, r1, #31
   26d74:	bf4c      	ite	mi
   26d76:	8018      	strhmi	r0, [r3, #0]
   26d78:	6018      	strpl	r0, [r3, #0]
   26d7a:	e7eb      	b.n	26d54 <_scanf_i+0x1c0>
   26d7c:	2001      	movs	r0, #1
   26d7e:	e7f2      	b.n	26d66 <_scanf_i+0x1d2>
   26d80:	0002d7b0 	.word	0x0002d7b0
   26d84:	0002c4db 	.word	0x0002c4db
   26d88:	0002c4df 	.word	0x0002c4df
   26d8c:	000343ff 	.word	0x000343ff

00026d90 <_read_r>:
   26d90:	b538      	push	{r3, r4, r5, lr}
   26d92:	4604      	mov	r4, r0
   26d94:	4d06      	ldr	r5, [pc, #24]	; (26db0 <_read_r+0x20>)
   26d96:	4608      	mov	r0, r1
   26d98:	4611      	mov	r1, r2
   26d9a:	2200      	movs	r2, #0
   26d9c:	602a      	str	r2, [r5, #0]
   26d9e:	461a      	mov	r2, r3
   26da0:	f001 fcc1 	bl	28726 <_read>
   26da4:	1c43      	adds	r3, r0, #1
   26da6:	d102      	bne.n	26dae <_read_r+0x1e>
   26da8:	682b      	ldr	r3, [r5, #0]
   26daa:	b103      	cbz	r3, 26dae <_read_r+0x1e>
   26dac:	6023      	str	r3, [r4, #0]
   26dae:	bd38      	pop	{r3, r4, r5, pc}
   26db0:	2002f790 	.word	0x2002f790

00026db4 <raise>:
   26db4:	4b02      	ldr	r3, [pc, #8]	; (26dc0 <raise+0xc>)
   26db6:	4601      	mov	r1, r0
   26db8:	6818      	ldr	r0, [r3, #0]
   26dba:	f006 b862 	b.w	2ce82 <_raise_r>
   26dbe:	bf00      	nop
   26dc0:	2000879c 	.word	0x2000879c

00026dc4 <_kill_r>:
   26dc4:	b538      	push	{r3, r4, r5, lr}
   26dc6:	2300      	movs	r3, #0
   26dc8:	4d06      	ldr	r5, [pc, #24]	; (26de4 <_kill_r+0x20>)
   26dca:	4604      	mov	r4, r0
   26dcc:	4608      	mov	r0, r1
   26dce:	4611      	mov	r1, r2
   26dd0:	602b      	str	r3, [r5, #0]
   26dd2:	f001 fcba 	bl	2874a <_kill>
   26dd6:	1c43      	adds	r3, r0, #1
   26dd8:	d102      	bne.n	26de0 <_kill_r+0x1c>
   26dda:	682b      	ldr	r3, [r5, #0]
   26ddc:	b103      	cbz	r3, 26de0 <_kill_r+0x1c>
   26dde:	6023      	str	r3, [r4, #0]
   26de0:	bd38      	pop	{r3, r4, r5, pc}
   26de2:	bf00      	nop
   26de4:	2002f790 	.word	0x2002f790

00026de8 <_fstat_r>:
   26de8:	b538      	push	{r3, r4, r5, lr}
   26dea:	2300      	movs	r3, #0
   26dec:	4d06      	ldr	r5, [pc, #24]	; (26e08 <_fstat_r+0x20>)
   26dee:	4604      	mov	r4, r0
   26df0:	4608      	mov	r0, r1
   26df2:	4611      	mov	r1, r2
   26df4:	602b      	str	r3, [r5, #0]
   26df6:	f001 fcac 	bl	28752 <_fstat>
   26dfa:	1c43      	adds	r3, r0, #1
   26dfc:	d102      	bne.n	26e04 <_fstat_r+0x1c>
   26dfe:	682b      	ldr	r3, [r5, #0]
   26e00:	b103      	cbz	r3, 26e04 <_fstat_r+0x1c>
   26e02:	6023      	str	r3, [r4, #0]
   26e04:	bd38      	pop	{r3, r4, r5, pc}
   26e06:	bf00      	nop
   26e08:	2002f790 	.word	0x2002f790

00026e0c <_isatty_r>:
   26e0c:	b538      	push	{r3, r4, r5, lr}
   26e0e:	2300      	movs	r3, #0
   26e10:	4d05      	ldr	r5, [pc, #20]	; (26e28 <_isatty_r+0x1c>)
   26e12:	4604      	mov	r4, r0
   26e14:	4608      	mov	r0, r1
   26e16:	602b      	str	r3, [r5, #0]
   26e18:	f001 fc92 	bl	28740 <_isatty>
   26e1c:	1c43      	adds	r3, r0, #1
   26e1e:	d102      	bne.n	26e26 <_isatty_r+0x1a>
   26e20:	682b      	ldr	r3, [r5, #0]
   26e22:	b103      	cbz	r3, 26e26 <_isatty_r+0x1a>
   26e24:	6023      	str	r3, [r4, #0]
   26e26:	bd38      	pop	{r3, r4, r5, pc}
   26e28:	2002f790 	.word	0x2002f790

00026e2c <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   26e2c:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   26e2e:	f7fb ff43 	bl	22cb8 <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   26e32:	f7fd f82b 	bl	23e8c <k_thread_system_pool_assign>
    return 0;
}
   26e36:	2000      	movs	r0, #0
   26e38:	bd08      	pop	{r3, pc}

00026e3a <k_uptime_get>:
{
   26e3a:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   26e3c:	f005 f834 	bl	2bea8 <z_impl_k_uptime_ticks>
   26e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26e44:	fba0 0302 	umull	r0, r3, r0, r2
   26e48:	fb02 3101 	mla	r1, r2, r1, r3
   26e4c:	0bc0      	lsrs	r0, r0, #15
}
   26e4e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   26e52:	0bc9      	lsrs	r1, r1, #15
   26e54:	bd08      	pop	{r3, pc}

00026e56 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   26e56:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26e58:	ab0b      	add	r3, sp, #44	; 0x2c
   26e5a:	9305      	str	r3, [sp, #20]
   26e5c:	9303      	str	r3, [sp, #12]
   26e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26e60:	9302      	str	r3, [sp, #8]
   26e62:	2300      	movs	r3, #0
   26e64:	4618      	mov	r0, r3
   26e66:	e9cd 3300 	strd	r3, r3, [sp]
   26e6a:	f7e8 fa63 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   26e6e:	b007      	add	sp, #28
   26e70:	f85d fb04 	ldr.w	pc, [sp], #4

00026e74 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   26e74:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   26e76:	6883      	ldr	r3, [r0, #8]
   26e78:	2264      	movs	r2, #100	; 0x64
   26e7a:	68dc      	ldr	r4, [r3, #12]
   26e7c:	2332      	movs	r3, #50	; 0x32
   26e7e:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   26e80:	bc10      	pop	{r4}
   26e82:	4760      	bx	ip

00026e84 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   26e84:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   26e86:	6883      	ldr	r3, [r0, #8]
   26e88:	685c      	ldr	r4, [r3, #4]
   26e8a:	f04f 33ff 	mov.w	r3, #4294967295
   26e8e:	46a4      	mov	ip, r4
}
   26e90:	bc10      	pop	{r4}
   26e92:	4760      	bx	ip

00026e94 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   26e94:	f7fa b82c 	b.w	20ef0 <z_impl_k_sem_take>

00026e98 <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   26e98:	6883      	ldr	r3, [r0, #8]
   26e9a:	69db      	ldr	r3, [r3, #28]
   26e9c:	b10b      	cbz	r3, 26ea2 <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   26e9e:	2201      	movs	r2, #1
   26ea0:	4718      	bx	r3
}
   26ea2:	4770      	bx	lr

00026ea4 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   26ea4:	f7fb bed4 	b.w	22c50 <z_impl_k_sleep>

00026ea8 <blink>:
{
   26ea8:	b570      	push	{r4, r5, r6, lr}
   26eaa:	4604      	mov	r4, r0
   26eac:	460d      	mov	r5, r1
	while (i < times)
   26eae:	2600      	movs	r6, #0
   26eb0:	42ae      	cmp	r6, r5
   26eb2:	d100      	bne.n	26eb6 <blink+0xe>
}
   26eb4:	bd70      	pop	{r4, r5, r6, pc}
		gpio_pin_set_dt(led, ON);
   26eb6:	2101      	movs	r1, #1
   26eb8:	4620      	mov	r0, r4
   26eba:	f7e4 fe59 	bl	bb70 <gpio_pin_set_dt.isra.0>
		gpio_pin_set_dt(led, OFF);
   26ebe:	2100      	movs	r1, #0
   26ec0:	4620      	mov	r0, r4
   26ec2:	f7e4 fe55 	bl	bb70 <gpio_pin_set_dt.isra.0>
		i++;
   26ec6:	3601      	adds	r6, #1
   26ec8:	e7f2      	b.n	26eb0 <blink+0x8>

00026eca <send_protobuf>:
{
   26eca:	b510      	push	{r4, lr}
   26ecc:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
	buf_proto = send_array_dd_v0();
   26ed0:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   26ed4:	4620      	mov	r0, r4
   26ed6:	f7e6 f805 	bl	cee4 <send_array_dd_v0>
	send_bluetooth(buf_proto);
   26eda:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   26ede:	f240 72cc 	movw	r2, #1996	; 0x7cc
   26ee2:	4668      	mov	r0, sp
   26ee4:	f005 f8f2 	bl	2c0cc <memcpy>
   26ee8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   26eec:	f7e5 fb1c 	bl	c528 <send_bluetooth>
}
   26ef0:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   26ef4:	bd10      	pop	{r4, pc}

00026ef6 <error>:
{
   26ef6:	b508      	push	{r3, lr}
	turn_off_all_leds();
   26ef8:	f7e5 fc76 	bl	c7e8 <turn_off_all_leds>
		k_sleep(K_MSEC(1000));
   26efc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   26f00:	2100      	movs	r1, #0
   26f02:	f7ff ffcf 	bl	26ea4 <k_sleep.isra.0>
	while (true)
   26f06:	e7f9      	b.n	26efc <error+0x6>

00026f08 <parse_comma_delimited_str>:
		printf("Field %02d: [%s]\r\n",i,fields[i]);
	}
}

int parse_comma_delimited_str(char *string, char **fields, int max_fields)
{
   26f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f0a:	460d      	mov	r5, r1
   26f0c:	4616      	mov	r6, r2
	int i = 0;
	fields[i++] = string;

	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   26f0e:	2401      	movs	r4, #1
		*string = '\0';
   26f10:	2700      	movs	r7, #0
	fields[i++] = string;
   26f12:	6008      	str	r0, [r1, #0]
	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   26f14:	42b4      	cmp	r4, r6
   26f16:	da03      	bge.n	26f20 <parse_comma_delimited_str+0x18>
   26f18:	212c      	movs	r1, #44	; 0x2c
   26f1a:	f005 fa39 	bl	2c390 <strchr>
   26f1e:	b908      	cbnz	r0, 26f24 <parse_comma_delimited_str+0x1c>
		fields[i++] = ++string;
	}

	return --i;
   26f20:	1e60      	subs	r0, r4, #1
}
   26f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*string = '\0';
   26f24:	f800 7b01 	strb.w	r7, [r0], #1
		fields[i++] = ++string;
   26f28:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
   26f2c:	3401      	adds	r4, #1
   26f2e:	e7f1      	b.n	26f14 <parse_comma_delimited_str+0xc>

00026f30 <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   26f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   26f32:	6806      	ldr	r6, [r0, #0]
   26f34:	8902      	ldrh	r2, [r0, #8]
   26f36:	8a33      	ldrh	r3, [r6, #16]
   26f38:	429a      	cmp	r2, r3
   26f3a:	d271      	bcs.n	27020 <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   26f3c:	6831      	ldr	r1, [r6, #0]
   26f3e:	8942      	ldrh	r2, [r0, #10]
   26f40:	0093      	lsls	r3, r2, #2
   26f42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   26f46:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   26f4a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   26f4e:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   26f50:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   26f52:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   26f56:	d01f      	beq.n	26f98 <load_descriptor_values+0x68>
   26f58:	2902      	cmp	r1, #2
   26f5a:	d02a      	beq.n	26fb2 <load_descriptor_values+0x82>
   26f5c:	2900      	cmp	r1, #0
   26f5e:	d135      	bne.n	26fcc <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   26f60:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   26f64:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   26f68:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   26f6c:	0f12      	lsrs	r2, r2, #28
   26f6e:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   26f70:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   26f72:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   26f76:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   26f78:	2a00      	cmp	r2, #0
   26f7a:	d134      	bne.n	26fe6 <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   26f7c:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   26f7e:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   26f80:	f004 040e 	and.w	r4, r4, #14
   26f84:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   26f86:	bf11      	iteee	ne
   26f88:	2300      	movne	r3, #0
   26f8a:	89c2      	ldrheq	r2, [r0, #14]
   26f8c:	6873      	ldreq	r3, [r6, #4]
   26f8e:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   26f92:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   26f94:	2001      	movs	r0, #1
}
   26f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   26f98:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   26f9a:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   26f9e:	4419      	add	r1, r3
   26fa0:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   26fa2:	0f0b      	lsrs	r3, r1, #28
   26fa4:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   26fa8:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   26faa:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   26fac:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   26fb0:	e7dd      	b.n	26f6e <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   26fb2:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   26fb4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   26fb8:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   26fba:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   26fbe:	0a1a      	lsrs	r2, r3, #8
   26fc0:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   26fc4:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   26fc6:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   26fc8:	898a      	ldrh	r2, [r1, #12]
            break;
   26fca:	e7d0      	b.n	26f6e <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   26fcc:	6832      	ldr	r2, [r6, #0]
   26fce:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   26fd0:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   26fd4:	0a19      	lsrs	r1, r3, #8
   26fd6:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   26fda:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   26fde:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   26fe0:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   26fe2:	b25b      	sxtb	r3, r3
            break;
   26fe4:	e7c3      	b.n	26f6e <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   26fe6:	443a      	add	r2, r7
   26fe8:	6182      	str	r2, [r0, #24]
        if (size_offset)
   26fea:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   26fee:	b123      	cbz	r3, 26ffa <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   26ff0:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   26ff2:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   26ff4:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   26ff6:	d109      	bne.n	2700c <load_descriptor_values+0xdc>
   26ff8:	e00f      	b.n	2701a <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   26ffa:	f004 0530 	and.w	r5, r4, #48	; 0x30
   26ffe:	2d20      	cmp	r5, #32
   27000:	d1f7      	bne.n	26ff2 <load_descriptor_values+0xc2>
   27002:	2c3f      	cmp	r4, #63	; 0x3f
   27004:	d804      	bhi.n	27010 <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   27006:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   2700a:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   2700c:	61c2      	str	r2, [r0, #28]
   2700e:	e7b7      	b.n	26f80 <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   27010:	2980      	cmp	r1, #128	; 0x80
   27012:	d1fa      	bne.n	2700a <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   27014:	f100 0314 	add.w	r3, r0, #20
   27018:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   2701a:	6813      	ldr	r3, [r2, #0]
   2701c:	61c3      	str	r3, [r0, #28]
   2701e:	e7af      	b.n	26f80 <load_descriptor_values+0x50>
        return false;
   27020:	2000      	movs	r0, #0
   27022:	e7b8      	b.n	26f96 <load_descriptor_values+0x66>

00027024 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   27024:	8903      	ldrh	r3, [r0, #8]
{
   27026:	b510      	push	{r4, lr}
    iter->index++;
   27028:	3301      	adds	r3, #1
   2702a:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   2702c:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   2702e:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   27030:	8a0a      	ldrh	r2, [r1, #16]
   27032:	429a      	cmp	r2, r3
   27034:	d803      	bhi.n	2703e <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   27036:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   27038:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   2703c:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   2703e:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   27040:	680b      	ldr	r3, [r1, #0]
   27042:	8942      	ldrh	r2, [r0, #10]
   27044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   27048:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   2704a:	f001 0103 	and.w	r1, r1, #3
   2704e:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   27052:	440a      	add	r2, r1
   27054:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   27056:	8982      	ldrh	r2, [r0, #12]
   27058:	f003 0130 	and.w	r1, r3, #48	; 0x30
   2705c:	2900      	cmp	r1, #0
   2705e:	bf08      	it	eq
   27060:	3201      	addeq	r2, #1
   27062:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   27064:	89c2      	ldrh	r2, [r0, #14]
   27066:	f003 030e 	and.w	r3, r3, #14
   2706a:	2b08      	cmp	r3, #8
   2706c:	bf08      	it	eq
   2706e:	3201      	addeq	r2, #1
   27070:	81c2      	strh	r2, [r0, #14]
}
   27072:	e7e3      	b.n	2703c <advance_iterator+0x18>

00027074 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   27074:	b570      	push	{r4, r5, r6, lr}
   27076:	4604      	mov	r4, r0
   27078:	460e      	mov	r6, r1
   2707a:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   2707c:	2100      	movs	r1, #0
   2707e:	2220      	movs	r2, #32
   27080:	3008      	adds	r0, #8
   27082:	f005 f85d 	bl	2c140 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   27086:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   2708a:	4620      	mov	r0, r4
}
   2708c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   27090:	f7ff bf4e 	b.w	26f30 <load_descriptor_values>

00027094 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   27094:	b538      	push	{r3, r4, r5, lr}
   27096:	460c      	mov	r4, r1
   27098:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   2709a:	680b      	ldr	r3, [r1, #0]
   2709c:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   2709e:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   270a0:	681b      	ldr	r3, [r3, #0]
   270a2:	0a1b      	lsrs	r3, r3, #8
   270a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   270a8:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   270aa:	bf14      	ite	ne
   270ac:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   270ae:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   270b0:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   270b2:	f7ff ffdf 	bl	27074 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   270b6:	622c      	str	r4, [r5, #32]
    return status;
}
   270b8:	bd38      	pop	{r3, r4, r5, pc}

000270ba <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   270ba:	b510      	push	{r4, lr}
   270bc:	4604      	mov	r4, r0
    advance_iterator(iter);
   270be:	f7ff ffb1 	bl	27024 <advance_iterator>
    (void)load_descriptor_values(iter);
   270c2:	f7ff ff35 	bl	26f30 <load_descriptor_values>
    return iter->index != 0;
   270c6:	8920      	ldrh	r0, [r4, #8]
}
   270c8:	3800      	subs	r0, #0
   270ca:	bf18      	it	ne
   270cc:	2001      	movne	r0, #1
   270ce:	bd10      	pop	{r4, pc}

000270d0 <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   270d0:	f7ff bfd0 	b.w	27074 <pb_field_iter_begin>

000270d4 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   270d4:	f7ff bfde 	b.w	27094 <pb_field_iter_begin_extension>

000270d8 <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   270d8:	b410      	push	{r4}
   270da:	460b      	mov	r3, r1
   270dc:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   270de:	8a52      	ldrh	r2, [r2, #18]
   270e0:	2a08      	cmp	r2, #8
   270e2:	d10e      	bne.n	27102 <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   270e4:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   270e6:	b162      	cbz	r2, 27102 <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   270e8:	b128      	cbz	r0, 270f6 <pb_default_field_callback+0x1e>
   270ea:	6814      	ldr	r4, [r2, #0]
   270ec:	b11c      	cbz	r4, 270f6 <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   270ee:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   270f0:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   270f2:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   270f4:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   270f6:	b123      	cbz	r3, 27102 <pb_default_field_callback+0x2a>
   270f8:	6814      	ldr	r4, [r2, #0]
   270fa:	b114      	cbz	r4, 27102 <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   270fc:	4618      	mov	r0, r3
   270fe:	3204      	adds	r2, #4
   27100:	e7f6      	b.n	270f0 <pb_default_field_callback+0x18>
}
   27102:	2001      	movs	r0, #1
   27104:	bc10      	pop	{r4}
   27106:	4770      	bx	lr

00027108 <buf_write>:
{
   27108:	4603      	mov	r3, r0
   2710a:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   2710c:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   2710e:	1884      	adds	r4, r0, r2
   27110:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27112:	f004 ffdb 	bl	2c0cc <memcpy>
}
   27116:	2001      	movs	r0, #1
   27118:	bd10      	pop	{r4, pc}

0002711a <pb_encode_varint>:
{
   2711a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   2711c:	2a80      	cmp	r2, #128	; 0x80
{
   2711e:	b085      	sub	sp, #20
    if (value <= 0x7F)
   27120:	f173 0100 	sbcs.w	r1, r3, #0
{
   27124:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   27126:	b2d4      	uxtb	r4, r2
   27128:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   2712a:	d206      	bcs.n	2713a <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   2712c:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   2712e:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   27132:	f7e6 f8a3 	bl	d27c <pb_write>
}
   27136:	b005      	add	sp, #20
   27138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   2713a:	09d5      	lsrs	r5, r2, #7
   2713c:	4608      	mov	r0, r1
    size_t i = 0;
   2713e:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   27140:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   27144:	ea53 0c05 	orrs.w	ip, r3, r5
   27148:	4617      	mov	r7, r2
        buffer[i++] = byte;
   2714a:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   2714e:	d108      	bne.n	27162 <pb_encode_varint+0x48>
   27150:	463a      	mov	r2, r7
    buffer[i++] = byte;
   27152:	f102 0310 	add.w	r3, r2, #16
   27156:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   27158:	4630      	mov	r0, r6
    buffer[i++] = byte;
   2715a:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   2715e:	3201      	adds	r2, #1
   27160:	e7e7      	b.n	27132 <pb_encode_varint+0x18>
        byte |= 0x80;
   27162:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   27166:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   27168:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   2716c:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   27170:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   27174:	d1e6      	bne.n	27144 <pb_encode_varint+0x2a>
    if (high)
   27176:	2b00      	cmp	r3, #0
   27178:	d0eb      	beq.n	27152 <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   2717a:	0118      	lsls	r0, r3, #4
   2717c:	f000 0070 	and.w	r0, r0, #112	; 0x70
   27180:	4304      	orrs	r4, r0
        high >>= 3;
   27182:	08db      	lsrs	r3, r3, #3
        while (high)
   27184:	2b00      	cmp	r3, #0
   27186:	d0e4      	beq.n	27152 <pb_encode_varint+0x38>
            byte |= 0x80;
   27188:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   2718c:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   2718e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   27192:	3201      	adds	r2, #1
   27194:	09db      	lsrs	r3, r3, #7
   27196:	e7f5      	b.n	27184 <pb_encode_varint+0x6a>

00027198 <pb_encode_svarint>:
    if (value < 0)
   27198:	1892      	adds	r2, r2, r2
   2719a:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   2719e:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   271a2:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   271a6:	f7ff bfb8 	b.w	2711a <pb_encode_varint>

000271aa <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   271aa:	2204      	movs	r2, #4
   271ac:	f7e6 b866 	b.w	d27c <pb_write>

000271b0 <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   271b0:	2208      	movs	r2, #8
   271b2:	f7e6 b863 	b.w	d27c <pb_write>

000271b6 <pb_encode_tag>:
{
   271b6:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   271b8:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   271bc:	0f5b      	lsrs	r3, r3, #29
   271be:	f7ff bfac 	b.w	2711a <pb_encode_varint>

000271c2 <pb_encode_string>:
{
   271c2:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   271c4:	2300      	movs	r3, #0
{
   271c6:	4604      	mov	r4, r0
   271c8:	460d      	mov	r5, r1
   271ca:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   271cc:	f7ff ffa5 	bl	2711a <pb_encode_varint>
   271d0:	b130      	cbz	r0, 271e0 <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   271d2:	4632      	mov	r2, r6
   271d4:	4629      	mov	r1, r5
   271d6:	4620      	mov	r0, r4
}
   271d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   271dc:	f7e6 b84e 	b.w	d27c <pb_write>
}
   271e0:	bd70      	pop	{r4, r5, r6, pc}

000271e2 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   271e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   271e6:	4606      	mov	r6, r0
   271e8:	460d      	mov	r5, r1
   271ea:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   271ec:	4698      	mov	r8, r3
   271ee:	b32b      	cbz	r3, 2723c <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   271f0:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   271f4:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   271f8:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   271fc:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   271fe:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   27200:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   27204:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   27208:	441c      	add	r4, r3
   2720a:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2720c:	45ca      	cmp	sl, r9
   2720e:	d309      	bcc.n	27224 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   27210:	4639      	mov	r1, r7
   27212:	4630      	mov	r0, r6
   27214:	46ac      	mov	ip, r5
   27216:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2721a:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   2721e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   27222:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   27224:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   27228:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2722c:	4620      	mov	r0, r4
		*ps = s;
   2722e:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   27232:	f7e2 f8ea 	bl	940a <strlen>
   27236:	3001      	adds	r0, #1
   27238:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2723a:	e7e7      	b.n	2720c <cbpprintf_external+0x2a>
}
   2723c:	f06f 0015 	mvn.w	r0, #21
   27240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027244 <arch_printk_char_out>:
}
   27244:	2000      	movs	r0, #0
   27246:	4770      	bx	lr

00027248 <str_out>:
{
   27248:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2724a:	688a      	ldr	r2, [r1, #8]
   2724c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2724e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   27250:	b114      	cbz	r4, 27258 <str_out+0x10>
   27252:	684b      	ldr	r3, [r1, #4]
   27254:	4293      	cmp	r3, r2
   27256:	dc01      	bgt.n	2725c <str_out+0x14>
		ctx->count++;
   27258:	608d      	str	r5, [r1, #8]
}
   2725a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2725c:	3b01      	subs	r3, #1
   2725e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   27260:	bf08      	it	eq
   27262:	2200      	moveq	r2, #0
   27264:	608d      	str	r5, [r1, #8]
   27266:	bf0c      	ite	eq
   27268:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2726a:	54a0      	strbne	r0, [r4, r2]
   2726c:	e7f5      	b.n	2725a <str_out+0x12>

0002726e <printk>:
{
   2726e:	b40f      	push	{r0, r1, r2, r3}
   27270:	b507      	push	{r0, r1, r2, lr}
   27272:	a904      	add	r1, sp, #16
   27274:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   27278:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2727a:	f7e6 fcd7 	bl	dc2c <vprintk>
}
   2727e:	b003      	add	sp, #12
   27280:	f85d eb04 	ldr.w	lr, [sp], #4
   27284:	b004      	add	sp, #16
   27286:	4770      	bx	lr

00027288 <snprintk>:
{
   27288:	b40c      	push	{r2, r3}
   2728a:	b507      	push	{r0, r1, r2, lr}
   2728c:	ab04      	add	r3, sp, #16
   2728e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   27292:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   27294:	f7e6 fcd8 	bl	dc48 <vsnprintk>
}
   27298:	b003      	add	sp, #12
   2729a:	f85d eb04 	ldr.w	lr, [sp], #4
   2729e:	b002      	add	sp, #8
   272a0:	4770      	bx	lr

000272a2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   272a2:	4604      	mov	r4, r0
   272a4:	b508      	push	{r3, lr}
   272a6:	4608      	mov	r0, r1
   272a8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   272aa:	461a      	mov	r2, r3
   272ac:	47a0      	blx	r4
	return z_impl_z_current_get();
   272ae:	f7fb fd03 	bl	22cb8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   272b2:	f7ea fc07 	bl	11ac4 <z_impl_k_thread_abort>

000272b6 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   272b6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   272ba:	8840      	ldrh	r0, [r0, #2]
}
   272bc:	0840      	lsrs	r0, r0, #1
   272be:	4770      	bx	lr

000272c0 <free_list_add>:
{
   272c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   272c2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   272c4:	f7ff fff7 	bl	272b6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   272c8:	fab0 f080 	clz	r0, r0
   272cc:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   272d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   272d4:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   272d8:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   272da:	1d17      	adds	r7, r2, #4
{
   272dc:	460c      	mov	r4, r1
   272de:	3206      	adds	r2, #6
   272e0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   272e2:	b956      	cbnz	r6, 272fa <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   272e4:	2101      	movs	r1, #1
   272e6:	fa01 f000 	lsl.w	r0, r1, r0
   272ea:	68d9      	ldr	r1, [r3, #12]
   272ec:	4301      	orrs	r1, r0
   272ee:	60d9      	str	r1, [r3, #12]
		b->next = c;
   272f0:	f8cc 4010 	str.w	r4, [ip, #16]
   272f4:	53dd      	strh	r5, [r3, r7]
   272f6:	529d      	strh	r5, [r3, r2]
}
   272f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   272fa:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   272fc:	3104      	adds	r1, #4
   272fe:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   27300:	53d8      	strh	r0, [r3, r7]
   27302:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   27306:	529e      	strh	r6, [r3, r2]
   27308:	80c5      	strh	r5, [r0, #6]
   2730a:	525d      	strh	r5, [r3, r1]
   2730c:	e7f4      	b.n	272f8 <free_list_add+0x38>

0002730e <free_list_remove_bidx>:
{
   2730e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   27310:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   27314:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   27316:	4299      	cmp	r1, r3
   27318:	f102 0104 	add.w	r1, r2, #4
   2731c:	d10a      	bne.n	27334 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2731e:	2301      	movs	r3, #1
   27320:	fa03 f202 	lsl.w	r2, r3, r2
   27324:	68c3      	ldr	r3, [r0, #12]
   27326:	ea23 0302 	bic.w	r3, r3, r2
   2732a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2732c:	2300      	movs	r3, #0
   2732e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   27332:	bd10      	pop	{r4, pc}
   27334:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   27336:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2733a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2733e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   27342:	80cb      	strh	r3, [r1, #6]
   27344:	8082      	strh	r2, [r0, #4]
}
   27346:	e7f4      	b.n	27332 <free_list_remove_bidx+0x24>

00027348 <free_list_remove>:
{
   27348:	b508      	push	{r3, lr}
   2734a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2734c:	f7ff ffb3 	bl	272b6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   27350:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   27354:	4618      	mov	r0, r3
}
   27356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2735a:	f1c2 021f 	rsb	r2, r2, #31
   2735e:	f7ff bfd6 	b.w	2730e <free_list_remove_bidx>

00027362 <alloc_chunk>:
{
   27362:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27366:	fab1 f581 	clz	r5, r1
   2736a:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2736e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   27372:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   27376:	4603      	mov	r3, r0
   27378:	460e      	mov	r6, r1
	if (b->next) {
   2737a:	b1c2      	cbz	r2, 273ae <alloc_chunk+0x4c>
   2737c:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2737e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   27382:	4618      	mov	r0, r3
   27384:	4621      	mov	r1, r4
   27386:	f7ff ff96 	bl	272b6 <chunk_size>
   2738a:	42b0      	cmp	r0, r6
   2738c:	d306      	bcc.n	2739c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2738e:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   27390:	4618      	mov	r0, r3
   27392:	f7ff ffbc 	bl	2730e <free_list_remove_bidx>
}
   27396:	4620      	mov	r0, r4
   27398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2739c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   273a0:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   273a2:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   273a4:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   273a8:	d001      	beq.n	273ae <alloc_chunk+0x4c>
   273aa:	4282      	cmp	r2, r0
   273ac:	d1e7      	bne.n	2737e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   273ae:	f04f 34ff 	mov.w	r4, #4294967295
   273b2:	f1c5 0220 	rsb	r2, r5, #32
   273b6:	4094      	lsls	r4, r2
   273b8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   273ba:	4014      	ands	r4, r2
   273bc:	d0eb      	beq.n	27396 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   273be:	fa94 f2a4 	rbit	r2, r4
   273c2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   273c6:	1d11      	adds	r1, r2, #4
   273c8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   273cc:	4621      	mov	r1, r4
   273ce:	e7df      	b.n	27390 <alloc_chunk+0x2e>

000273d0 <merge_chunks>:
{
   273d0:	b538      	push	{r3, r4, r5, lr}
   273d2:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   273d4:	f7ff ff6f 	bl	272b6 <chunk_size>
{
   273d8:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   273da:	4604      	mov	r4, r0
   273dc:	4611      	mov	r1, r2
   273de:	4618      	mov	r0, r3
   273e0:	f7ff ff69 	bl	272b6 <chunk_size>
   273e4:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   273e6:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   273e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   273ec:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   273ee:	4618      	mov	r0, r3
   273f0:	f7ff ff61 	bl	272b6 <chunk_size>
	void *cmem = &buf[c];
   273f4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   273f6:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   273fa:	bd38      	pop	{r3, r4, r5, pc}

000273fc <split_chunks>:
{
   273fc:	b538      	push	{r3, r4, r5, lr}
   273fe:	460c      	mov	r4, r1
   27400:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   27402:	f7ff ff58 	bl	272b6 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   27406:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   27408:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2740a:	4405      	add	r5, r0
   2740c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27410:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   27412:	8060      	strh	r0, [r4, #2]
   27414:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27418:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2741a:	8044      	strh	r4, [r0, #2]
   2741c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   27420:	4618      	mov	r0, r3
   27422:	4611      	mov	r1, r2
   27424:	f7ff ff47 	bl	272b6 <chunk_size>
	void *cmem = &buf[c];
   27428:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2742a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2742e:	bd38      	pop	{r3, r4, r5, pc}

00027430 <free_chunk>:
{
   27430:	b538      	push	{r3, r4, r5, lr}
   27432:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   27434:	f7ff ff3f 	bl	272b6 <chunk_size>
   27438:	460c      	mov	r4, r1
   2743a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2743c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   27440:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   27442:	07da      	lsls	r2, r3, #31
   27444:	d40a      	bmi.n	2745c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   27446:	4628      	mov	r0, r5
   27448:	f7ff ff7e 	bl	27348 <free_list_remove>
	return c + chunk_size(h, c);
   2744c:	4621      	mov	r1, r4
   2744e:	4628      	mov	r0, r5
   27450:	f7ff ff31 	bl	272b6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   27454:	1822      	adds	r2, r4, r0
   27456:	4628      	mov	r0, r5
   27458:	f7ff ffba 	bl	273d0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2745c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   27460:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   27462:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   27466:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   27468:	07db      	lsls	r3, r3, #31
   2746a:	d40c      	bmi.n	27486 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2746c:	4628      	mov	r0, r5
   2746e:	f7ff ff6b 	bl	27348 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   27472:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   27476:	4622      	mov	r2, r4
   27478:	1a61      	subs	r1, r4, r1
   2747a:	4628      	mov	r0, r5
   2747c:	f7ff ffa8 	bl	273d0 <merge_chunks>
   27480:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   27484:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   27486:	4621      	mov	r1, r4
   27488:	4628      	mov	r0, r5
}
   2748a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2748e:	f7ff bf17 	b.w	272c0 <free_list_add>

00027492 <sys_heap_alloc>:
{
   27492:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   27494:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   27496:	b909      	cbnz	r1, 2749c <sys_heap_alloc+0xa>
		return NULL;
   27498:	2000      	movs	r0, #0
}
   2749a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2749c:	68ab      	ldr	r3, [r5, #8]
   2749e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   274a2:	d9f9      	bls.n	27498 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   274a4:	310b      	adds	r1, #11
   274a6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   274a8:	4621      	mov	r1, r4
   274aa:	4628      	mov	r0, r5
   274ac:	f7ff ff59 	bl	27362 <alloc_chunk>
	if (c == 0U) {
   274b0:	4606      	mov	r6, r0
   274b2:	2800      	cmp	r0, #0
   274b4:	d0f0      	beq.n	27498 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   274b6:	4601      	mov	r1, r0
   274b8:	4628      	mov	r0, r5
   274ba:	f7ff fefc 	bl	272b6 <chunk_size>
   274be:	42a0      	cmp	r0, r4
   274c0:	d907      	bls.n	274d2 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   274c2:	4628      	mov	r0, r5
   274c4:	1932      	adds	r2, r6, r4
   274c6:	f7ff ff99 	bl	273fc <split_chunks>
		free_list_add(h, c + chunk_sz);
   274ca:	4611      	mov	r1, r2
   274cc:	4628      	mov	r0, r5
   274ce:	f7ff fef7 	bl	272c0 <free_list_add>
	void *cmem = &buf[c];
   274d2:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   274d6:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   274d8:	8853      	ldrh	r3, [r2, #2]
   274da:	3004      	adds	r0, #4
   274dc:	f043 0301 	orr.w	r3, r3, #1
   274e0:	8053      	strh	r3, [r2, #2]
	return mem;
   274e2:	e7da      	b.n	2749a <sys_heap_alloc+0x8>

000274e4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   274e4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   274e6:	f013 0307 	ands.w	r3, r3, #7
   274ea:	d105      	bne.n	274f8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   274ec:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   274ee:	2b00      	cmp	r3, #0
   274f0:	bf0c      	ite	eq
   274f2:	2000      	moveq	r0, #0
   274f4:	2003      	movne	r0, #3
   274f6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   274f8:	2b02      	cmp	r3, #2
   274fa:	d105      	bne.n	27508 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   274fc:	8bc0      	ldrh	r0, [r0, #30]
   274fe:	fab0 f080 	clz	r0, r0
   27502:	0940      	lsrs	r0, r0, #5
   27504:	0080      	lsls	r0, r0, #2
   27506:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   27508:	2b01      	cmp	r3, #1
   2750a:	d105      	bne.n	27518 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2750c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2750e:	2b00      	cmp	r3, #0
   27510:	bf0c      	ite	eq
   27512:	2000      	moveq	r0, #0
   27514:	2005      	movne	r0, #5
   27516:	4770      	bx	lr
	int evt = EVT_NOP;
   27518:	2000      	movs	r0, #0
}
   2751a:	4770      	bx	lr

0002751c <validate_args>:
{
   2751c:	b510      	push	{r4, lr}
   2751e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   27520:	b100      	cbz	r0, 27524 <validate_args+0x8>
   27522:	b911      	cbnz	r1, 2752a <validate_args+0xe>
		return -EINVAL;
   27524:	f06f 0015 	mvn.w	r0, #21
}
   27528:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2752a:	1d08      	adds	r0, r1, #4
   2752c:	f000 f82f 	bl	2758e <sys_notify_validate>
	if ((rv == 0)
   27530:	2800      	cmp	r0, #0
   27532:	d1f9      	bne.n	27528 <validate_args+0xc>
	    && ((cli->notify.flags
   27534:	68a3      	ldr	r3, [r4, #8]
   27536:	2b03      	cmp	r3, #3
   27538:	d9f6      	bls.n	27528 <validate_args+0xc>
   2753a:	e7f3      	b.n	27524 <validate_args+0x8>

0002753c <notify_one>:
{
   2753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27540:	460d      	mov	r5, r1
   27542:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   27544:	4619      	mov	r1, r3
   27546:	1d28      	adds	r0, r5, #4
{
   27548:	4690      	mov	r8, r2
   2754a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2754c:	f7e6 ff82 	bl	e454 <sys_notify_finalize>
	if (cb) {
   27550:	4604      	mov	r4, r0
   27552:	b138      	cbz	r0, 27564 <notify_one+0x28>
		cb(mgr, cli, state, res);
   27554:	4633      	mov	r3, r6
   27556:	4642      	mov	r2, r8
   27558:	4629      	mov	r1, r5
   2755a:	4638      	mov	r0, r7
   2755c:	46a4      	mov	ip, r4
}
   2755e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   27562:	4760      	bx	ip
}
   27564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027568 <onoff_manager_init>:
{
   27568:	b538      	push	{r3, r4, r5, lr}
   2756a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2756c:	4605      	mov	r5, r0
   2756e:	b158      	cbz	r0, 27588 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   27570:	b151      	cbz	r1, 27588 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   27572:	680b      	ldr	r3, [r1, #0]
   27574:	b143      	cbz	r3, 27588 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   27576:	684b      	ldr	r3, [r1, #4]
   27578:	b133      	cbz	r3, 27588 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2757a:	2220      	movs	r2, #32
   2757c:	2100      	movs	r1, #0
   2757e:	f004 fddf 	bl	2c140 <memset>
	return 0;
   27582:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   27584:	612c      	str	r4, [r5, #16]
}
   27586:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   27588:	f06f 0015 	mvn.w	r0, #21
   2758c:	e7fb      	b.n	27586 <onoff_manager_init+0x1e>

0002758e <sys_notify_validate>:
	if (notify == NULL) {
   2758e:	4603      	mov	r3, r0
   27590:	b140      	cbz	r0, 275a4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27592:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27594:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   27598:	2a02      	cmp	r2, #2
   2759a:	d006      	beq.n	275aa <sys_notify_validate+0x1c>
   2759c:	2a03      	cmp	r2, #3
   2759e:	d004      	beq.n	275aa <sys_notify_validate+0x1c>
   275a0:	2a01      	cmp	r2, #1
   275a2:	d005      	beq.n	275b0 <sys_notify_validate+0x22>
   275a4:	f06f 0015 	mvn.w	r0, #21
}
   275a8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   275aa:	681a      	ldr	r2, [r3, #0]
   275ac:	2a00      	cmp	r2, #0
   275ae:	d0f9      	beq.n	275a4 <sys_notify_validate+0x16>
		notify->result = 0;
   275b0:	2000      	movs	r0, #0
   275b2:	6098      	str	r0, [r3, #8]
   275b4:	4770      	bx	lr

000275b6 <outs>:
{
   275b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275ba:	4607      	mov	r7, r0
   275bc:	4688      	mov	r8, r1
   275be:	4615      	mov	r5, r2
   275c0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   275c2:	4614      	mov	r4, r2
   275c4:	42b4      	cmp	r4, r6
   275c6:	d305      	bcc.n	275d4 <outs+0x1e>
   275c8:	b10e      	cbz	r6, 275ce <outs+0x18>
	return (int)count;
   275ca:	1b60      	subs	r0, r4, r5
   275cc:	e008      	b.n	275e0 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   275ce:	7823      	ldrb	r3, [r4, #0]
   275d0:	2b00      	cmp	r3, #0
   275d2:	d0fa      	beq.n	275ca <outs+0x14>
		int rc = out((int)*sp++, ctx);
   275d4:	4641      	mov	r1, r8
   275d6:	f814 0b01 	ldrb.w	r0, [r4], #1
   275da:	47b8      	blx	r7
		if (rc < 0) {
   275dc:	2800      	cmp	r0, #0
   275de:	daf1      	bge.n	275c4 <outs+0xe>
}
   275e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000275e4 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   275e4:	4040      	eors	r0, r0
   275e6:	f380 8811 	msr	BASEPRI, r0
   275ea:	f04f 0004 	mov.w	r0, #4
   275ee:	df02      	svc	2
}
   275f0:	4770      	bx	lr

000275f2 <assert_print>:

void assert_print(const char *fmt, ...)
{
   275f2:	b40f      	push	{r0, r1, r2, r3}
   275f4:	b507      	push	{r0, r1, r2, lr}
   275f6:	a904      	add	r1, sp, #16
   275f8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   275fc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   275fe:	f7e6 fb15 	bl	dc2c <vprintk>

	va_end(ap);
}
   27602:	b003      	add	sp, #12
   27604:	f85d eb04 	ldr.w	lr, [sp], #4
   27608:	b004      	add	sp, #16
   2760a:	4770      	bx	lr

0002760c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 100);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   2760c:	4770      	bx	lr

0002760e <nordicsemi_nrf53_init>:
{
   2760e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27610:	f04f 0320 	mov.w	r3, #32
   27614:	f3ef 8511 	mrs	r5, BASEPRI
   27618:	f383 8812 	msr	BASEPRI_MAX, r3
   2761c:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   27620:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   27624:	2401      	movs	r4, #1
   27626:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   27628:	4621      	mov	r1, r4
   2762a:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   2762e:	2021      	movs	r0, #33	; 0x21
   27630:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   27634:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   27638:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   2763c:	f7e7 fce0 	bl	f000 <soc_secure_gpio_pin_mcu_select>
   27640:	4621      	mov	r1, r4
   27642:	2020      	movs	r0, #32
   27644:	f7e7 fcdc 	bl	f000 <soc_secure_gpio_pin_mcu_select>
   27648:	4621      	mov	r1, r4
   2764a:	200b      	movs	r0, #11
   2764c:	f7e7 fcd8 	bl	f000 <soc_secure_gpio_pin_mcu_select>
   27650:	4621      	mov	r1, r4
   27652:	200a      	movs	r0, #10
   27654:	f7e7 fcd4 	bl	f000 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   27658:	f385 8811 	msr	BASEPRI, r5
   2765c:	f3bf 8f6f 	isb	sy
}
   27660:	2000      	movs	r0, #0
   27662:	bd38      	pop	{r3, r4, r5, pc}

00027664 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   27664:	2806      	cmp	r0, #6
   27666:	d108      	bne.n	2767a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   27668:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2766c:	2201      	movs	r2, #1
   2766e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   27672:	f3bf 8f4f 	dsb	sy
        __WFE();
   27676:	bf20      	wfe
    while (true)
   27678:	e7fd      	b.n	27676 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2767a:	4770      	bx	lr

0002767c <pm_state_exit_post_ops>:
   2767c:	2300      	movs	r3, #0
   2767e:	f383 8811 	msr	BASEPRI, r3
   27682:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   27686:	4770      	bx	lr

00027688 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   27688:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   2768a:	ab01      	add	r3, sp, #4
   2768c:	f003 fce2 	bl	2b054 <tfm_platform_mem_read>

	switch (status) {
   27690:	2802      	cmp	r0, #2
   27692:	d00a      	beq.n	276aa <soc_secure_mem_read+0x22>
   27694:	2803      	cmp	r0, #3
   27696:	d00b      	beq.n	276b0 <soc_secure_mem_read+0x28>
   27698:	b968      	cbnz	r0, 276b6 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   2769a:	9801      	ldr	r0, [sp, #4]
   2769c:	3800      	subs	r0, #0
   2769e:	bf18      	it	ne
   276a0:	2001      	movne	r0, #1
   276a2:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   276a4:	b003      	add	sp, #12
   276a6:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   276aa:	f06f 0015 	mvn.w	r0, #21
   276ae:	e7f9      	b.n	276a4 <soc_secure_mem_read+0x1c>
	switch (status) {
   276b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   276b4:	e7f6      	b.n	276a4 <soc_secure_mem_read+0x1c>
		return -EPERM;
   276b6:	f04f 30ff 	mov.w	r0, #4294967295
   276ba:	e7f3      	b.n	276a4 <soc_secure_mem_read+0x1c>

000276bc <dummy_timestamp>:
}
   276bc:	2000      	movs	r0, #0
   276be:	4770      	bx	lr

000276c0 <default_get_timestamp>:
   276c0:	f003 bbab 	b.w	2ae1a <sys_clock_cycle_get_32>

000276c4 <atomic_inc>:
{
   276c4:	4603      	mov	r3, r0
}
   276c6:	e8d3 0fef 	ldaex	r0, [r3]
   276ca:	1c42      	adds	r2, r0, #1
   276cc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   276d0:	2900      	cmp	r1, #0
   276d2:	d1f8      	bne.n	276c6 <atomic_inc+0x2>
   276d4:	4770      	bx	lr

000276d6 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   276d6:	2100      	movs	r1, #0
{
   276d8:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   276da:	4608      	mov	r0, r1
   276dc:	f7e7 fcc0 	bl	f060 <z_log_init.isra.0>
	}

	return 0;
}
   276e0:	2000      	movs	r0, #0
   276e2:	bd08      	pop	{r3, pc}

000276e4 <z_log_notify_backend_enabled>:
}
   276e4:	4770      	bx	lr

000276e6 <z_log_get_tag>:
}
   276e6:	2000      	movs	r0, #0
   276e8:	4770      	bx	lr

000276ea <z_log_msg_finalize>:
{
   276ea:	b570      	push	{r4, r5, r6, lr}
   276ec:	460e      	mov	r6, r1
   276ee:	4615      	mov	r5, r2
   276f0:	4619      	mov	r1, r3
	if (!msg) {
   276f2:	4604      	mov	r4, r0
   276f4:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   276f8:	b918      	cbnz	r0, 27702 <z_log_msg_finalize+0x18>
}
   276fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   276fe:	f7e7 bd9d 	b.w	f23c <z_log_dropped>
	if (data) {
   27702:	b12b      	cbz	r3, 27710 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   27704:	3010      	adds	r0, #16
   27706:	f3c5 2349 	ubfx	r3, r5, #9, #10
   2770a:	4418      	add	r0, r3
   2770c:	f004 fcde 	bl	2c0cc <memcpy>
	msg->hdr.source = source;
   27710:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   27714:	4620      	mov	r0, r4
}
   27716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2771a:	f7e7 bda3 	b.w	f264 <z_log_msg_commit>

0002771e <out_func>:
{
   2771e:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   27720:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   27724:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   27728:	2101      	movs	r1, #1
   2772a:	6852      	ldr	r2, [r2, #4]
   2772c:	f10d 0007 	add.w	r0, sp, #7
   27730:	4798      	blx	r3
}
   27732:	2000      	movs	r0, #0
   27734:	b003      	add	sp, #12
   27736:	f85d fb04 	ldr.w	pc, [sp], #4

0002773a <cr_out_func>:
	if (c == '\n') {
   2773a:	280a      	cmp	r0, #10
{
   2773c:	b538      	push	{r3, r4, r5, lr}
   2773e:	4604      	mov	r4, r0
   27740:	460d      	mov	r5, r1
	if (c == '\n') {
   27742:	d102      	bne.n	2774a <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   27744:	200d      	movs	r0, #13
   27746:	f7ff ffea 	bl	2771e <out_func>
	out_func(c, ctx);
   2774a:	4629      	mov	r1, r5
   2774c:	4620      	mov	r0, r4
   2774e:	f7ff ffe6 	bl	2771e <out_func>
}
   27752:	2000      	movs	r0, #0
   27754:	bd38      	pop	{r3, r4, r5, pc}

00027756 <buffer_write>:
{
   27756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27758:	4606      	mov	r6, r0
   2775a:	460d      	mov	r5, r1
   2775c:	4614      	mov	r4, r2
   2775e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   27760:	4621      	mov	r1, r4
   27762:	4628      	mov	r0, r5
   27764:	463a      	mov	r2, r7
   27766:	47b0      	blx	r6
	} while (len != 0);
   27768:	1a24      	subs	r4, r4, r0
		buf += processed;
   2776a:	4405      	add	r5, r0
	} while (len != 0);
   2776c:	d1f8      	bne.n	27760 <buffer_write+0xa>
}
   2776e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027770 <cbvprintf>:
{
   27770:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   27772:	2400      	movs	r4, #0
   27774:	9400      	str	r4, [sp, #0]
   27776:	f7e6 ff11 	bl	e59c <z_cbvprintf_impl>
}
   2777a:	b002      	add	sp, #8
   2777c:	bd10      	pop	{r4, pc}

0002777e <log_output_flush>:
{
   2777e:	b510      	push	{r4, lr}
		     output->control_block->offset,
   27780:	6842      	ldr	r2, [r0, #4]
{
   27782:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   27784:	e9d2 2300 	ldrd	r2, r3, [r2]
   27788:	6881      	ldr	r1, [r0, #8]
   2778a:	6800      	ldr	r0, [r0, #0]
   2778c:	f7ff ffe3 	bl	27756 <buffer_write>
	output->control_block->offset = 0;
   27790:	2200      	movs	r2, #0
   27792:	6863      	ldr	r3, [r4, #4]
   27794:	601a      	str	r2, [r3, #0]
}
   27796:	bd10      	pop	{r4, pc}

00027798 <nvs_flash_rd>:
{
   27798:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2779a:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2779c:	8984      	ldrh	r4, [r0, #12]
   2779e:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   277a0:	fa16 f181 	uxtah	r1, r6, r1
   277a4:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   277a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   277aa:	6884      	ldr	r4, [r0, #8]
   277ac:	6824      	ldr	r4, [r4, #0]
   277ae:	46a4      	mov	ip, r4
}
   277b0:	bc70      	pop	{r4, r5, r6}
   277b2:	4760      	bx	ip

000277b4 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   277b4:	680b      	ldr	r3, [r1, #0]
   277b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   277ba:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   277bc:	89c0      	ldrh	r0, [r0, #14]
   277be:	0c1a      	lsrs	r2, r3, #16
   277c0:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   277c4:	bf04      	itt	eq
   277c6:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   277ca:	600b      	streq	r3, [r1, #0]
}
   277cc:	4770      	bx	lr

000277ce <nvs_flash_block_cmp>:
{
   277ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   277d2:	4681      	mov	r9, r0
   277d4:	460e      	mov	r6, r1
   277d6:	4617      	mov	r7, r2
   277d8:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   277da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   277dc:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   277de:	681d      	ldr	r5, [r3, #0]
   277e0:	426d      	negs	r5, r5
	block_size =
   277e2:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   277e6:	b91c      	cbnz	r4, 277f0 <nvs_flash_block_cmp+0x22>
	return 0;
   277e8:	4620      	mov	r0, r4
}
   277ea:	b009      	add	sp, #36	; 0x24
   277ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   277f0:	42ac      	cmp	r4, r5
   277f2:	46a0      	mov	r8, r4
   277f4:	bf28      	it	cs
   277f6:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   277f8:	466a      	mov	r2, sp
   277fa:	4643      	mov	r3, r8
   277fc:	4631      	mov	r1, r6
   277fe:	4648      	mov	r0, r9
   27800:	f7ff ffca 	bl	27798 <nvs_flash_rd>
		if (rc) {
   27804:	2800      	cmp	r0, #0
   27806:	d1f0      	bne.n	277ea <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   27808:	4642      	mov	r2, r8
   2780a:	4669      	mov	r1, sp
   2780c:	4638      	mov	r0, r7
   2780e:	f004 fc4d 	bl	2c0ac <memcmp>
		if (rc) {
   27812:	b920      	cbnz	r0, 2781e <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   27814:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   27818:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2781a:	4447      	add	r7, r8
   2781c:	e7e3      	b.n	277e6 <nvs_flash_block_cmp+0x18>
			return 1;
   2781e:	2001      	movs	r0, #1
   27820:	e7e3      	b.n	277ea <nvs_flash_block_cmp+0x1c>

00027822 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27822:	4601      	mov	r1, r0
{
   27824:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27826:	2207      	movs	r2, #7
{
   27828:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2782a:	20ff      	movs	r0, #255	; 0xff
   2782c:	f7e6 fe3e 	bl	e4ac <crc8_ccitt>
	entry->crc8 = crc8;
   27830:	71e0      	strb	r0, [r4, #7]
}
   27832:	bd10      	pop	{r4, pc}

00027834 <nvs_flash_cmp_const>:
{
   27834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27838:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2783a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2783c:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2783e:	681d      	ldr	r5, [r3, #0]
{
   27840:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27842:	426d      	negs	r5, r5
	block_size =
   27844:	f005 0520 	and.w	r5, r5, #32
{
   27848:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2784a:	4668      	mov	r0, sp
{
   2784c:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2784e:	462a      	mov	r2, r5
   27850:	f004 fc76 	bl	2c140 <memset>
	while (len) {
   27854:	b91c      	cbnz	r4, 2785e <nvs_flash_cmp_const+0x2a>
	return 0;
   27856:	4620      	mov	r0, r4
}
   27858:	b008      	add	sp, #32
   2785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2785e:	42ac      	cmp	r4, r5
   27860:	46a0      	mov	r8, r4
   27862:	bf28      	it	cs
   27864:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   27866:	466a      	mov	r2, sp
   27868:	4643      	mov	r3, r8
   2786a:	4631      	mov	r1, r6
   2786c:	4638      	mov	r0, r7
   2786e:	f7ff ffae 	bl	277ce <nvs_flash_block_cmp>
		if (rc) {
   27872:	2800      	cmp	r0, #0
   27874:	d1f0      	bne.n	27858 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   27876:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2787a:	4446      	add	r6, r8
   2787c:	e7ea      	b.n	27854 <nvs_flash_cmp_const+0x20>

0002787e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2787e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27880:	ab0b      	add	r3, sp, #44	; 0x2c
   27882:	9305      	str	r3, [sp, #20]
   27884:	9303      	str	r3, [sp, #12]
   27886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27888:	9302      	str	r3, [sp, #8]
   2788a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2788c:	9301      	str	r3, [sp, #4]
   2788e:	2300      	movs	r3, #0
   27890:	4618      	mov	r0, r3
   27892:	9300      	str	r3, [sp, #0]
   27894:	f7e7 fd4e 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   27898:	b007      	add	sp, #28
   2789a:	f85d fb04 	ldr.w	pc, [sp], #4

0002789e <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2789e:	7803      	ldrb	r3, [r0, #0]
   278a0:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   278a2:	bf81      	itttt	hi
   278a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
   278a8:	18c9      	addhi	r1, r1, r3
   278aa:	425b      	neghi	r3, r3
   278ac:	4019      	andhi	r1, r3
}
   278ae:	4608      	mov	r0, r1
   278b0:	4770      	bx	lr

000278b2 <nvs_ate_valid>:
{
   278b2:	b570      	push	{r4, r5, r6, lr}
   278b4:	460c      	mov	r4, r1
   278b6:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   278b8:	2108      	movs	r1, #8
   278ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   278bc:	f7ff ffef 	bl	2789e <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   278c0:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   278c2:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   278c4:	4621      	mov	r1, r4
   278c6:	20ff      	movs	r0, #255	; 0xff
   278c8:	f7e6 fdf0 	bl	e4ac <crc8_ccitt>
	if (crc8 == entry->crc8) {
   278cc:	79e3      	ldrb	r3, [r4, #7]
   278ce:	4283      	cmp	r3, r0
   278d0:	d107      	bne.n	278e2 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   278d2:	89aa      	ldrh	r2, [r5, #12]
   278d4:	8863      	ldrh	r3, [r4, #2]
   278d6:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   278d8:	4283      	cmp	r3, r0
   278da:	bf2c      	ite	cs
   278dc:	2000      	movcs	r0, #0
   278de:	2001      	movcc	r0, #1
}
   278e0:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   278e2:	2000      	movs	r0, #0
   278e4:	e7fc      	b.n	278e0 <nvs_ate_valid+0x2e>

000278e6 <nvs_close_ate_valid>:
{
   278e6:	b538      	push	{r3, r4, r5, lr}
   278e8:	4605      	mov	r5, r0
   278ea:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   278ec:	f7ff ffe1 	bl	278b2 <nvs_ate_valid>
   278f0:	b1a0      	cbz	r0, 2791c <nvs_close_ate_valid+0x36>
   278f2:	88a0      	ldrh	r0, [r4, #4]
   278f4:	b998      	cbnz	r0, 2791e <nvs_close_ate_valid+0x38>
   278f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   278fa:	8822      	ldrh	r2, [r4, #0]
   278fc:	429a      	cmp	r2, r3
   278fe:	d10d      	bne.n	2791c <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   27900:	2108      	movs	r1, #8
   27902:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   27904:	f7ff ffcb 	bl	2789e <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   27908:	8862      	ldrh	r2, [r4, #2]
   2790a:	89ab      	ldrh	r3, [r5, #12]
   2790c:	1a9b      	subs	r3, r3, r2
   2790e:	fbb3 f2f0 	udiv	r2, r3, r0
   27912:	fb02 3010 	mls	r0, r2, r0, r3
   27916:	fab0 f080 	clz	r0, r0
   2791a:	0940      	lsrs	r0, r0, #5
}
   2791c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2791e:	2000      	movs	r0, #0
   27920:	e7fc      	b.n	2791c <nvs_close_ate_valid+0x36>

00027922 <nvs_prev_ate>:
{
   27922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27924:	4604      	mov	r4, r0
   27926:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   27928:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2792a:	2108      	movs	r1, #8
   2792c:	f7ff ffb7 	bl	2789e <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27930:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   27932:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27934:	6829      	ldr	r1, [r5, #0]
   27936:	4620      	mov	r0, r4
   27938:	f7ff ff2e 	bl	27798 <nvs_flash_rd>
	if (rc) {
   2793c:	4606      	mov	r6, r0
   2793e:	2800      	cmp	r0, #0
   27940:	d136      	bne.n	279b0 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   27942:	682b      	ldr	r3, [r5, #0]
   27944:	443b      	add	r3, r7
   27946:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   27948:	89a2      	ldrh	r2, [r4, #12]
   2794a:	b299      	uxth	r1, r3
   2794c:	1bd2      	subs	r2, r2, r7
   2794e:	4291      	cmp	r1, r2
   27950:	d12e      	bne.n	279b0 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   27952:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   27954:	bf09      	itett	eq
   27956:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   27958:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2795c:	f102 32ff 	addeq.w	r2, r2, #4294967295
   27960:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   27964:	4620      	mov	r0, r4
   27966:	2308      	movs	r3, #8
   27968:	466a      	mov	r2, sp
   2796a:	6029      	str	r1, [r5, #0]
   2796c:	f7ff ff14 	bl	27798 <nvs_flash_rd>
	if (rc) {
   27970:	b9e8      	cbnz	r0, 279ae <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   27972:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   27974:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   27976:	466b      	mov	r3, sp
		if (data8[i] != value) {
   27978:	f813 1b01 	ldrb.w	r1, [r3], #1
   2797c:	428a      	cmp	r2, r1
   2797e:	d10c      	bne.n	2799a <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   27980:	3001      	adds	r0, #1
   27982:	2808      	cmp	r0, #8
   27984:	d1f8      	bne.n	27978 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   27986:	6863      	ldr	r3, [r4, #4]
   27988:	e005      	b.n	27996 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2798a:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2798c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   27990:	0c1b      	lsrs	r3, r3, #16
   27992:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   27994:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   27996:	602b      	str	r3, [r5, #0]
		return 0;
   27998:	e00a      	b.n	279b0 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2799a:	4669      	mov	r1, sp
   2799c:	4620      	mov	r0, r4
   2799e:	f7ff ffa2 	bl	278e6 <nvs_close_ate_valid>
   279a2:	2800      	cmp	r0, #0
   279a4:	d1f1      	bne.n	2798a <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   279a6:	4629      	mov	r1, r5
   279a8:	4620      	mov	r0, r4
   279aa:	f7e7 ff8f 	bl	f8cc <nvs_recover_last_ate>
   279ae:	4606      	mov	r6, r0
}
   279b0:	4630      	mov	r0, r6
   279b2:	b003      	add	sp, #12
   279b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000279b6 <nvs_flash_al_wrt>:
{
   279b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   279ba:	4607      	mov	r7, r0
   279bc:	4690      	mov	r8, r2
	if (!len) {
   279be:	461e      	mov	r6, r3
{
   279c0:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   279c2:	b91b      	cbnz	r3, 279cc <nvs_flash_al_wrt+0x16>
		return 0;
   279c4:	2000      	movs	r0, #0
}
   279c6:	b009      	add	sp, #36	; 0x24
   279c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   279cc:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   279ce:	8983      	ldrh	r3, [r0, #12]
   279d0:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   279d2:	fa14 f181 	uxtah	r1, r4, r1
   279d6:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   279da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   279dc:	681d      	ldr	r5, [r3, #0]
   279de:	426d      	negs	r5, r5
	if (blen > 0) {
   279e0:	4035      	ands	r5, r6
   279e2:	d00c      	beq.n	279fe <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   279e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   279e6:	6883      	ldr	r3, [r0, #8]
   279e8:	4621      	mov	r1, r4
   279ea:	f8d3 9004 	ldr.w	r9, [r3, #4]
   279ee:	462b      	mov	r3, r5
   279f0:	47c8      	blx	r9
		if (rc) {
   279f2:	2800      	cmp	r0, #0
   279f4:	d1e7      	bne.n	279c6 <nvs_flash_al_wrt+0x10>
	if (len) {
   279f6:	1b76      	subs	r6, r6, r5
   279f8:	d0e4      	beq.n	279c4 <nvs_flash_al_wrt+0xe>
		offset += blen;
   279fa:	442c      	add	r4, r5
		data8 += blen;
   279fc:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   279fe:	2320      	movs	r3, #32
   27a00:	4632      	mov	r2, r6
   27a02:	4641      	mov	r1, r8
   27a04:	4668      	mov	r0, sp
   27a06:	f004 fb6e 	bl	2c0e6 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   27a0a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   27a0c:	eb0d 0006 	add.w	r0, sp, r6
   27a10:	682a      	ldr	r2, [r5, #0]
   27a12:	7929      	ldrb	r1, [r5, #4]
   27a14:	1b92      	subs	r2, r2, r6
   27a16:	f004 fb93 	bl	2c140 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   27a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   27a1c:	682b      	ldr	r3, [r5, #0]
   27a1e:	6882      	ldr	r2, [r0, #8]
   27a20:	4621      	mov	r1, r4
   27a22:	6855      	ldr	r5, [r2, #4]
   27a24:	466a      	mov	r2, sp
   27a26:	47a8      	blx	r5
	return rc;
   27a28:	e7cd      	b.n	279c6 <nvs_flash_al_wrt+0x10>

00027a2a <nvs_flash_ate_wrt>:
{
   27a2a:	b510      	push	{r4, lr}
   27a2c:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   27a2e:	2308      	movs	r3, #8
   27a30:	6841      	ldr	r1, [r0, #4]
{
   27a32:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   27a34:	f7ff ffbf 	bl	279b6 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   27a38:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   27a3a:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   27a3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   27a3e:	f7ff ff2e 	bl	2789e <nvs_al_size.isra.0>
   27a42:	6863      	ldr	r3, [r4, #4]
   27a44:	1a1b      	subs	r3, r3, r0
   27a46:	6063      	str	r3, [r4, #4]
}
   27a48:	4610      	mov	r0, r2
   27a4a:	bd10      	pop	{r4, pc}

00027a4c <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   27a4c:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   27a4e:	2400      	movs	r4, #0
   27a50:	9400      	str	r4, [sp, #0]
   27a52:	f7e8 fb43 	bl	100dc <nvs_read_hist>
	return rc;
}
   27a56:	b002      	add	sp, #8
   27a58:	bd10      	pop	{r4, pc}

00027a5a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27a5a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27a5c:	ab0b      	add	r3, sp, #44	; 0x2c
   27a5e:	9305      	str	r3, [sp, #20]
   27a60:	9303      	str	r3, [sp, #12]
   27a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27a64:	2201      	movs	r2, #1
   27a66:	9302      	str	r3, [sp, #8]
   27a68:	2300      	movs	r3, #0
   27a6a:	4618      	mov	r0, r3
   27a6c:	e9cd 3300 	strd	r3, r3, [sp]
   27a70:	f7e7 fc60 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   27a74:	b007      	add	sp, #28
   27a76:	f85d fb04 	ldr.w	pc, [sp], #4

00027a7a <get_tx_buffer_size>:
	return data->tx_buffer_size;
   27a7a:	6903      	ldr	r3, [r0, #16]
}
   27a7c:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   27a80:	4770      	bx	lr

00027a82 <drop_tx_buffer>:
}
   27a82:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27a86:	4770      	bx	lr

00027a88 <release_rx_buffer>:
{
   27a88:	4608      	mov	r0, r1
   27a8a:	b508      	push	{r3, lr}
   27a8c:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   27a8e:	b118      	cbz	r0, 27a98 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   27a90:	f003 feee 	bl	2b870 <rpmsg_release_rx_buffer>
	return 0;
   27a94:	2000      	movs	r0, #0
}
   27a96:	bd08      	pop	{r3, pc}
		return -ENOENT;
   27a98:	f06f 0001 	mvn.w	r0, #1
   27a9c:	e7fb      	b.n	27a96 <release_rx_buffer+0xe>

00027a9e <hold_rx_buffer>:
{
   27a9e:	4608      	mov	r0, r1
   27aa0:	b508      	push	{r3, lr}
   27aa2:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   27aa4:	b118      	cbz	r0, 27aae <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   27aa6:	f003 fedb 	bl	2b860 <rpmsg_hold_rx_buffer>
	return 0;
   27aaa:	2000      	movs	r0, #0
}
   27aac:	bd08      	pop	{r3, pc}
		return -ENOENT;
   27aae:	f06f 0001 	mvn.w	r0, #1
   27ab2:	e7fb      	b.n	27aac <hold_rx_buffer+0xe>

00027ab4 <send_nocopy>:
{
   27ab4:	b513      	push	{r0, r1, r4, lr}
   27ab6:	4604      	mov	r4, r0
   27ab8:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27aba:	6921      	ldr	r1, [r4, #16]
   27abc:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   27ac0:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   27ac4:	2902      	cmp	r1, #2
   27ac6:	d109      	bne.n	27adc <send_nocopy+0x28>
	if (len == 0) {
   27ac8:	b15b      	cbz	r3, 27ae2 <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   27aca:	b168      	cbz	r0, 27ae8 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   27acc:	9300      	str	r3, [sp, #0]
   27ace:	4613      	mov	r3, r2
   27ad0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   27ad4:	f7f7 feb4 	bl	1f840 <rpmsg_send_offchannel_nocopy>
}
   27ad8:	b002      	add	sp, #8
   27ada:	bd10      	pop	{r4, pc}
		return -EBUSY;
   27adc:	f06f 000f 	mvn.w	r0, #15
   27ae0:	e7fa      	b.n	27ad8 <send_nocopy+0x24>
		return -EBADMSG;
   27ae2:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   27ae6:	e7f7      	b.n	27ad8 <send_nocopy+0x24>
		return -ENOENT;
   27ae8:	f06f 0001 	mvn.w	r0, #1
   27aec:	e7f4      	b.n	27ad8 <send_nocopy+0x24>

00027aee <get_tx_buffer>:
{
   27aee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27af2:	461c      	mov	r4, r3
   27af4:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   27af8:	4616      	mov	r6, r2
   27afa:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   27afc:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   27afe:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   27b00:	b339      	cbz	r1, 27b52 <get_tx_buffer+0x64>
	if (!r_data || !size) {
   27b02:	b34a      	cbz	r2, 27b58 <get_tx_buffer+0x6a>
   27b04:	b344      	cbz	r4, 27b58 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   27b06:	1c6a      	adds	r2, r5, #1
   27b08:	f143 0300 	adc.w	r3, r3, #0
   27b0c:	2a02      	cmp	r2, #2
   27b0e:	f173 0300 	sbcs.w	r3, r3, #0
   27b12:	d224      	bcs.n	27b5e <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   27b14:	6822      	ldr	r2, [r4, #0]
   27b16:	b142      	cbz	r2, 27b2a <get_tx_buffer+0x3c>
   27b18:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   27b1c:	429a      	cmp	r2, r3
   27b1e:	d904      	bls.n	27b2a <get_tx_buffer+0x3c>
		return -ENOMEM;
   27b20:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   27b24:	6023      	str	r3, [r4, #0]
}
   27b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   27b2a:	ea05 0908 	and.w	r9, r5, r8
   27b2e:	f109 0301 	add.w	r3, r9, #1
   27b32:	425a      	negs	r2, r3
   27b34:	415a      	adcs	r2, r3
   27b36:	4621      	mov	r1, r4
   27b38:	4638      	mov	r0, r7
   27b3a:	f003 fea2 	bl	2b882 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   27b3e:	b988      	cbnz	r0, 27b64 <get_tx_buffer+0x76>
   27b40:	f1b8 3fff 	cmp.w	r8, #4294967295
   27b44:	bf08      	it	eq
   27b46:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   27b4a:	d0f0      	beq.n	27b2e <get_tx_buffer+0x40>
		return -ENOBUFS;
   27b4c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27b50:	e7e9      	b.n	27b26 <get_tx_buffer+0x38>
		return -ENOENT;
   27b52:	f06f 0001 	mvn.w	r0, #1
   27b56:	e7e6      	b.n	27b26 <get_tx_buffer+0x38>
		return -EINVAL;
   27b58:	f06f 0015 	mvn.w	r0, #21
   27b5c:	e7e3      	b.n	27b26 <get_tx_buffer+0x38>
		return -ENOTSUP;
   27b5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27b62:	e7e0      	b.n	27b26 <get_tx_buffer+0x38>
	(*r_data) = payload;
   27b64:	6030      	str	r0, [r6, #0]
	return 0;
   27b66:	2000      	movs	r0, #0
   27b68:	e7dd      	b.n	27b26 <get_tx_buffer+0x38>

00027b6a <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   27b6a:	f003 becf 	b.w	2b90c <rpmsg_destroy_ept>

00027b6e <get_ept_slot_with_name>:
{
   27b6e:	b538      	push	{r3, r4, r5, lr}
   27b70:	460d      	mov	r5, r1
   27b72:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   27b74:	f100 0140 	add.w	r1, r0, #64	; 0x40
   27b78:	4628      	mov	r0, r5
   27b7a:	f7e1 fc3c 	bl	93f6 <strcmp>
   27b7e:	b130      	cbz	r0, 27b8e <get_ept_slot_with_name+0x20>
   27b80:	4628      	mov	r0, r5
   27b82:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   27b86:	f7e1 fc36 	bl	93f6 <strcmp>
   27b8a:	b920      	cbnz	r0, 27b96 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   27b8c:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   27b8e:	2370      	movs	r3, #112	; 0x70
   27b90:	fb03 4000 	mla	r0, r3, r0, r4
}
   27b94:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   27b96:	2000      	movs	r0, #0
   27b98:	e7fc      	b.n	27b94 <get_ept_slot_with_name+0x26>

00027b9a <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   27b9a:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   27b9e:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   27ba2:	f004 b93b 	b.w	2be1c <k_work_submit_to_queue>

00027ba6 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   27ba6:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   27baa:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   27bae:	3b00      	subs	r3, #0
   27bb0:	bf18      	it	ne
   27bb2:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   27bb4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   27bb8:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   27bbc:	f003 be02 	b.w	2b7c4 <virtqueue_notification>

00027bc0 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   27bc0:	68cb      	ldr	r3, [r1, #12]
   27bc2:	b133      	cbz	r3, 27bd2 <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   27bc4:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   27bc6:	6883      	ldr	r3, [r0, #8]
   27bc8:	681b      	ldr	r3, [r3, #0]
   27bca:	b113      	cbz	r3, 27bd2 <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   27bcc:	2200      	movs	r2, #0
   27bce:	6909      	ldr	r1, [r1, #16]
   27bd0:	4718      	bx	r3
}
   27bd2:	4770      	bx	lr

00027bd4 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   27bd4:	f7f8 bfb6 	b.w	20b44 <z_impl_k_mutex_unlock>

00027bd8 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27bd8:	e8d0 3fef 	ldaex	r3, [r0]
   27bdc:	e8c0 1fe2 	stlex	r2, r1, [r0]
   27be0:	2a00      	cmp	r2, #0
   27be2:	d1f9      	bne.n	27bd8 <atomic_set.isra.0>
}
   27be4:	4770      	bx	lr

00027be6 <backend_init>:
{
   27be6:	b510      	push	{r4, lr}
	data->role = conf->role;
   27be8:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   27bea:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   27bec:	681b      	ldr	r3, [r3, #0]
   27bee:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   27bf2:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   27bf6:	f004 f879 	bl	2bcec <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   27bfa:	2100      	movs	r1, #0
   27bfc:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   27c00:	f7ff ffea 	bl	27bd8 <atomic_set.isra.0>
}
   27c04:	4608      	mov	r0, r1
   27c06:	bd10      	pop	{r4, pc}

00027c08 <ns_bind_cb>:
{
   27c08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27c0c:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   27c0e:	460d      	mov	r5, r1
   27c10:	b379      	cbz	r1, 27c72 <ns_bind_cb+0x6a>
   27c12:	780b      	ldrb	r3, [r1, #0]
   27c14:	b36b      	cbz	r3, 27c72 <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   27c16:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   27c1a:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   27c1e:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   27c20:	f04f 32ff 	mov.w	r2, #4294967295
   27c24:	f04f 33ff 	mov.w	r3, #4294967295
   27c28:	4620      	mov	r0, r4
   27c2a:	f7f8 febb 	bl	209a4 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   27c2e:	462a      	mov	r2, r5
   27c30:	4640      	mov	r0, r8
   27c32:	a901      	add	r1, sp, #4
   27c34:	f7e8 fb86 	bl	10344 <get_ept>
	if (rpmsg_ept == NULL) {
   27c38:	9e01      	ldr	r6, [sp, #4]
   27c3a:	b92e      	cbnz	r6, 27c48 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   27c3c:	4620      	mov	r0, r4
}
   27c3e:	b002      	add	sp, #8
   27c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   27c44:	f7ff bfc6 	b.w	27bd4 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   27c48:	b158      	cbz	r0, 27c62 <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   27c4a:	4620      	mov	r0, r4
   27c4c:	f7ff ffc2 	bl	27bd4 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   27c50:	463b      	mov	r3, r7
   27c52:	462a      	mov	r2, r5
   27c54:	4631      	mov	r1, r6
   27c56:	4640      	mov	r0, r8
}
   27c58:	b002      	add	sp, #8
   27c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   27c5e:	f7e8 bb4f 	b.w	10300 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   27c62:	2220      	movs	r2, #32
   27c64:	4629      	mov	r1, r5
   27c66:	f106 0040 	add.w	r0, r6, #64	; 0x40
   27c6a:	f004 fbb8 	bl	2c3de <strncpy>
		rpmsg_ept->dest = dest;
   27c6e:	6637      	str	r7, [r6, #96]	; 0x60
   27c70:	e7e4      	b.n	27c3c <ns_bind_cb+0x34>
}
   27c72:	b002      	add	sp, #8
   27c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027c78 <ept_cb>:
{
   27c78:	b510      	push	{r4, lr}
   27c7a:	4608      	mov	r0, r1
   27c7c:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   27c7e:	4611      	mov	r1, r2
   27c80:	b952      	cbnz	r2, 27c98 <ept_cb+0x20>
		if (!ept->bound) {
   27c82:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   27c86:	b92a      	cbnz	r2, 27c94 <ept_cb+0x1c>
			ept->bound = true;
   27c88:	2201      	movs	r2, #1
			bound_cb(ept);
   27c8a:	4618      	mov	r0, r3
			ept->bound = true;
   27c8c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   27c90:	f7e8 fcaa 	bl	105e8 <bound_cb>
}
   27c94:	2000      	movs	r0, #0
   27c96:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   27c98:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   27c9a:	6854      	ldr	r4, [r2, #4]
   27c9c:	2c00      	cmp	r4, #0
   27c9e:	d0f9      	beq.n	27c94 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   27ca0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   27ca2:	47a0      	blx	r4
   27ca4:	e7f6      	b.n	27c94 <ept_cb+0x1c>

00027ca6 <deregister_ept>:
{
   27ca6:	b510      	push	{r4, lr}
   27ca8:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27caa:	6903      	ldr	r3, [r0, #16]
   27cac:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   27cb0:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   27cb4:	2b02      	cmp	r3, #2
   27cb6:	d10a      	bne.n	27cce <deregister_ept+0x28>
	if (!rpmsg_ept) {
   27cb8:	b161      	cbz	r1, 27cd4 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   27cba:	4608      	mov	r0, r1
   27cbc:	f003 fe26 	bl	2b90c <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   27cc0:	2270      	movs	r2, #112	; 0x70
   27cc2:	2100      	movs	r1, #0
   27cc4:	4620      	mov	r0, r4
   27cc6:	f004 fa3b 	bl	2c140 <memset>
	return 0;
   27cca:	2000      	movs	r0, #0
}
   27ccc:	bd10      	pop	{r4, pc}
		return -EBUSY;
   27cce:	f06f 000f 	mvn.w	r0, #15
   27cd2:	e7fb      	b.n	27ccc <deregister_ept+0x26>
		return -ENOENT;
   27cd4:	f06f 0001 	mvn.w	r0, #1
   27cd8:	e7f8      	b.n	27ccc <deregister_ept+0x26>

00027cda <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   27cda:	f003 be17 	b.w	2b90c <rpmsg_destroy_ept>

00027cde <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   27cde:	b538      	push	{r3, r4, r5, lr}
   27ce0:	460d      	mov	r5, r1
	if (!instance) {
   27ce2:	4604      	mov	r4, r0
   27ce4:	b160      	cbz	r0, 27d00 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   27ce6:	30e0      	adds	r0, #224	; 0xe0
   27ce8:	f003 ff91 	bl	2bc0e <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   27cec:	b10d      	cbz	r5, 27cf2 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   27cee:	2000      	movs	r0, #0
}
   27cf0:	bd38      	pop	{r3, r4, r5, pc}
   27cf2:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   27cf6:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   27cfa:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   27cfe:	e7f6      	b.n	27cee <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   27d00:	f06f 0015 	mvn.w	r0, #21
   27d04:	e7f4      	b.n	27cf0 <ipc_rpmsg_deinit+0x12>

00027d06 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   27d06:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   27d08:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   27d0c:	b113      	cbz	r3, 27d14 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   27d0e:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   27d12:	4718      	bx	r3
}
   27d14:	4770      	bx	lr

00027d16 <virtio_set_features>:
}
   27d16:	4770      	bx	lr

00027d18 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   27d18:	6983      	ldr	r3, [r0, #24]
   27d1a:	b913      	cbnz	r3, 27d22 <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   27d1c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   27d20:	7019      	strb	r1, [r3, #0]
}
   27d22:	4770      	bx	lr

00027d24 <virtio_get_features>:
}
   27d24:	2001      	movs	r0, #1
   27d26:	4770      	bx	lr

00027d28 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   27d28:	6983      	ldr	r3, [r0, #24]
   27d2a:	2b01      	cmp	r3, #1
   27d2c:	d104      	bne.n	27d38 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   27d2e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   27d32:	7818      	ldrb	r0, [r3, #0]
   27d34:	b2c0      	uxtb	r0, r0
   27d36:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   27d38:	2004      	movs	r0, #4
}
   27d3a:	4770      	bx	lr

00027d3c <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   27d3c:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   27d3e:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   27d40:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   27d42:	4620      	mov	r0, r4
   27d44:	f004 f9a6 	bl	2c094 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   27d48:	4605      	mov	r5, r0
   27d4a:	b118      	cbz	r0, 27d54 <virtqueue_allocate+0x18>
   27d4c:	4622      	mov	r2, r4
   27d4e:	2100      	movs	r1, #0
   27d50:	f004 f9f6 	bl	2c140 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   27d54:	4628      	mov	r0, r5
   27d56:	bd38      	pop	{r3, r4, r5, pc}

00027d58 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   27d58:	b538      	push	{r3, r4, r5, lr}
   27d5a:	4604      	mov	r4, r0
   27d5c:	2230      	movs	r2, #48	; 0x30
   27d5e:	2100      	movs	r1, #0
   27d60:	f004 f9ee 	bl	2c140 <memset>
   27d64:	2218      	movs	r2, #24
   27d66:	2100      	movs	r1, #0
   27d68:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   27d6c:	f004 f9e8 	bl	2c140 <memset>
   27d70:	2218      	movs	r2, #24
   27d72:	2100      	movs	r1, #0
   27d74:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   27d78:	f004 f9e2 	bl	2c140 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   27d7c:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   27d80:	f7f7 fd10 	bl	1f7a4 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   27d84:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   27d88:	f7f7 fd0c 	bl	1f7a4 <virtqueue_free>
	vr->shm_io = 0;
   27d8c:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   27d8e:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   27d92:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   27d96:	f7f7 fc21 	bl	1f5dc <metal_device_close>
	metal_finish();
   27d9a:	f7f7 fc7b 	bl	1f694 <metal_finish>
	if (io->ops.close)
   27d9e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   27da0:	f104 0540 	add.w	r5, r4, #64	; 0x40
   27da4:	b10b      	cbz	r3, 27daa <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   27da6:	4628      	mov	r0, r5
   27da8:	4798      	blx	r3
   27daa:	2238      	movs	r2, #56	; 0x38
   27dac:	2100      	movs	r1, #0
   27dae:	4628      	mov	r0, r5
   27db0:	f004 f9c6 	bl	2c140 <memset>

	return 0;
}
   27db4:	2000      	movs	r0, #0
   27db6:	bd38      	pop	{r3, r4, r5, pc}

00027db8 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   27db8:	b538      	push	{r3, r4, r5, lr}
   27dba:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   27dbc:	42ab      	cmp	r3, r5
{
   27dbe:	4611      	mov	r1, r2
   27dc0:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   27dc2:	d804      	bhi.n	27dce <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27dc4:	461a      	mov	r2, r3
   27dc6:	f004 f981 	bl	2c0cc <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   27dca:	4620      	mov	r0, r4
   27dcc:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   27dce:	2400      	movs	r4, #0
   27dd0:	e7fb      	b.n	27dca <_copy+0x12>

00027dd2 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   27dd2:	f004 b9b5 	b.w	2c140 <memset>

00027dd6 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   27dd6:	09c3      	lsrs	r3, r0, #7
   27dd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27ddc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   27de0:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   27de4:	b2c0      	uxtb	r0, r0
   27de6:	4770      	bx	lr

00027de8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   27de8:	78cb      	ldrb	r3, [r1, #3]
   27dea:	7802      	ldrb	r2, [r0, #0]
   27dec:	4053      	eors	r3, r2
   27dee:	7003      	strb	r3, [r0, #0]
   27df0:	884b      	ldrh	r3, [r1, #2]
   27df2:	7842      	ldrb	r2, [r0, #1]
   27df4:	4053      	eors	r3, r2
   27df6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   27df8:	680a      	ldr	r2, [r1, #0]
   27dfa:	7883      	ldrb	r3, [r0, #2]
   27dfc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27e00:	7083      	strb	r3, [r0, #2]
   27e02:	680a      	ldr	r2, [r1, #0]
   27e04:	78c3      	ldrb	r3, [r0, #3]
   27e06:	4053      	eors	r3, r2
   27e08:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   27e0a:	79cb      	ldrb	r3, [r1, #7]
   27e0c:	7902      	ldrb	r2, [r0, #4]
   27e0e:	4053      	eors	r3, r2
   27e10:	7103      	strb	r3, [r0, #4]
   27e12:	88cb      	ldrh	r3, [r1, #6]
   27e14:	7942      	ldrb	r2, [r0, #5]
   27e16:	4053      	eors	r3, r2
   27e18:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   27e1a:	684a      	ldr	r2, [r1, #4]
   27e1c:	7983      	ldrb	r3, [r0, #6]
   27e1e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27e22:	7183      	strb	r3, [r0, #6]
   27e24:	684a      	ldr	r2, [r1, #4]
   27e26:	79c3      	ldrb	r3, [r0, #7]
   27e28:	4053      	eors	r3, r2
   27e2a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   27e2c:	7acb      	ldrb	r3, [r1, #11]
   27e2e:	7a02      	ldrb	r2, [r0, #8]
   27e30:	4053      	eors	r3, r2
   27e32:	7203      	strb	r3, [r0, #8]
   27e34:	7a42      	ldrb	r2, [r0, #9]
   27e36:	894b      	ldrh	r3, [r1, #10]
   27e38:	4053      	eors	r3, r2
   27e3a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   27e3c:	688a      	ldr	r2, [r1, #8]
   27e3e:	7a83      	ldrb	r3, [r0, #10]
   27e40:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27e44:	7283      	strb	r3, [r0, #10]
   27e46:	688a      	ldr	r2, [r1, #8]
   27e48:	7ac3      	ldrb	r3, [r0, #11]
   27e4a:	4053      	eors	r3, r2
   27e4c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   27e4e:	7bcb      	ldrb	r3, [r1, #15]
   27e50:	7b02      	ldrb	r2, [r0, #12]
   27e52:	4053      	eors	r3, r2
   27e54:	7303      	strb	r3, [r0, #12]
   27e56:	89cb      	ldrh	r3, [r1, #14]
   27e58:	7b42      	ldrb	r2, [r0, #13]
   27e5a:	4053      	eors	r3, r2
   27e5c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   27e5e:	68ca      	ldr	r2, [r1, #12]
   27e60:	7b83      	ldrb	r3, [r0, #14]
   27e62:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27e66:	7383      	strb	r3, [r0, #14]
   27e68:	68ca      	ldr	r2, [r1, #12]
   27e6a:	7bc3      	ldrb	r3, [r0, #15]
   27e6c:	4053      	eors	r3, r2
   27e6e:	73c3      	strb	r3, [r0, #15]
}
   27e70:	4770      	bx	lr

00027e72 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   27e72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   27e74:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27e76:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   27e78:	f88d 2000 	strb.w	r2, [sp]
   27e7c:	7942      	ldrb	r2, [r0, #5]
   27e7e:	f88d 2001 	strb.w	r2, [sp, #1]
   27e82:	7a82      	ldrb	r2, [r0, #10]
   27e84:	f88d 2002 	strb.w	r2, [sp, #2]
   27e88:	7bc2      	ldrb	r2, [r0, #15]
   27e8a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   27e8e:	7902      	ldrb	r2, [r0, #4]
   27e90:	f88d 2004 	strb.w	r2, [sp, #4]
   27e94:	7a42      	ldrb	r2, [r0, #9]
   27e96:	f88d 2005 	strb.w	r2, [sp, #5]
   27e9a:	7b82      	ldrb	r2, [r0, #14]
   27e9c:	f88d 2006 	strb.w	r2, [sp, #6]
   27ea0:	78c2      	ldrb	r2, [r0, #3]
   27ea2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   27ea6:	7a02      	ldrb	r2, [r0, #8]
   27ea8:	f88d 2008 	strb.w	r2, [sp, #8]
   27eac:	7b42      	ldrb	r2, [r0, #13]
   27eae:	f88d 2009 	strb.w	r2, [sp, #9]
   27eb2:	7882      	ldrb	r2, [r0, #2]
   27eb4:	f88d 200a 	strb.w	r2, [sp, #10]
   27eb8:	79c2      	ldrb	r2, [r0, #7]
   27eba:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27ebe:	7b02      	ldrb	r2, [r0, #12]
   27ec0:	f88d 200c 	strb.w	r2, [sp, #12]
   27ec4:	7842      	ldrb	r2, [r0, #1]
   27ec6:	f88d 200d 	strb.w	r2, [sp, #13]
   27eca:	7982      	ldrb	r2, [r0, #6]
   27ecc:	f88d 200e 	strb.w	r2, [sp, #14]
   27ed0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27ed4:	2310      	movs	r3, #16
   27ed6:	466a      	mov	r2, sp
   27ed8:	4619      	mov	r1, r3
   27eda:	f7ff ff6d 	bl	27db8 <_copy>
}
   27ede:	b005      	add	sp, #20
   27ee0:	f85d fb04 	ldr.w	pc, [sp], #4

00027ee4 <mult_row_column>:
{
   27ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27ee6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27ee8:	7808      	ldrb	r0, [r1, #0]
{
   27eea:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27eec:	f7ff ff73 	bl	27dd6 <_double_byte>
   27ef0:	4605      	mov	r5, r0
   27ef2:	7860      	ldrb	r0, [r4, #1]
   27ef4:	f7ff ff6f 	bl	27dd6 <_double_byte>
   27ef8:	78a2      	ldrb	r2, [r4, #2]
   27efa:	7863      	ldrb	r3, [r4, #1]
   27efc:	4053      	eors	r3, r2
   27efe:	78e2      	ldrb	r2, [r4, #3]
   27f00:	4053      	eors	r3, r2
   27f02:	405d      	eors	r5, r3
   27f04:	4068      	eors	r0, r5
   27f06:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   27f08:	7860      	ldrb	r0, [r4, #1]
   27f0a:	7827      	ldrb	r7, [r4, #0]
   27f0c:	f7ff ff63 	bl	27dd6 <_double_byte>
   27f10:	4605      	mov	r5, r0
   27f12:	78a0      	ldrb	r0, [r4, #2]
   27f14:	f7ff ff5f 	bl	27dd6 <_double_byte>
   27f18:	78a3      	ldrb	r3, [r4, #2]
   27f1a:	405f      	eors	r7, r3
   27f1c:	78e3      	ldrb	r3, [r4, #3]
   27f1e:	405f      	eors	r7, r3
   27f20:	407d      	eors	r5, r7
   27f22:	4068      	eors	r0, r5
   27f24:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   27f26:	7863      	ldrb	r3, [r4, #1]
   27f28:	7827      	ldrb	r7, [r4, #0]
   27f2a:	78a0      	ldrb	r0, [r4, #2]
   27f2c:	405f      	eors	r7, r3
   27f2e:	f7ff ff52 	bl	27dd6 <_double_byte>
   27f32:	4605      	mov	r5, r0
   27f34:	78e0      	ldrb	r0, [r4, #3]
   27f36:	f7ff ff4e 	bl	27dd6 <_double_byte>
   27f3a:	78e3      	ldrb	r3, [r4, #3]
   27f3c:	405f      	eors	r7, r3
   27f3e:	407d      	eors	r5, r7
   27f40:	4068      	eors	r0, r5
   27f42:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   27f44:	7820      	ldrb	r0, [r4, #0]
   27f46:	f7ff ff46 	bl	27dd6 <_double_byte>
   27f4a:	7862      	ldrb	r2, [r4, #1]
   27f4c:	7823      	ldrb	r3, [r4, #0]
   27f4e:	4053      	eors	r3, r2
   27f50:	78a2      	ldrb	r2, [r4, #2]
   27f52:	4053      	eors	r3, r2
   27f54:	ea80 0503 	eor.w	r5, r0, r3
   27f58:	78e0      	ldrb	r0, [r4, #3]
   27f5a:	f7ff ff3c 	bl	27dd6 <_double_byte>
   27f5e:	b2ed      	uxtb	r5, r5
   27f60:	4045      	eors	r5, r0
   27f62:	70f5      	strb	r5, [r6, #3]
}
   27f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027f66 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   27f66:	b570      	push	{r4, r5, r6, lr}
   27f68:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   27f6a:	4605      	mov	r5, r0
{
   27f6c:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   27f6e:	2800      	cmp	r0, #0
   27f70:	d049      	beq.n	28006 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   27f72:	2900      	cmp	r1, #0
   27f74:	d049      	beq.n	2800a <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   27f76:	2a00      	cmp	r2, #0
   27f78:	d049      	beq.n	2800e <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   27f7a:	2310      	movs	r3, #16
   27f7c:	460a      	mov	r2, r1
   27f7e:	4668      	mov	r0, sp
   27f80:	4619      	mov	r1, r3
   27f82:	f7ff ff19 	bl	27db8 <_copy>
	add_round_key(state, s->words);
   27f86:	4621      	mov	r1, r4
   27f88:	4668      	mov	r0, sp
   27f8a:	f7ff ff2d 	bl	27de8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   27f8e:	3410      	adds	r4, #16
   27f90:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   27f94:	4668      	mov	r0, sp
   27f96:	f7e8 fec7 	bl	10d28 <sub_bytes>
		shift_rows(state);
   27f9a:	4668      	mov	r0, sp
   27f9c:	f7ff ff69 	bl	27e72 <shift_rows>
	mult_row_column(t, s);
   27fa0:	4669      	mov	r1, sp
   27fa2:	a804      	add	r0, sp, #16
   27fa4:	f7ff ff9e 	bl	27ee4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   27fa8:	a901      	add	r1, sp, #4
   27faa:	a805      	add	r0, sp, #20
   27fac:	f7ff ff9a 	bl	27ee4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   27fb0:	a902      	add	r1, sp, #8
   27fb2:	a806      	add	r0, sp, #24
   27fb4:	f7ff ff96 	bl	27ee4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   27fb8:	a903      	add	r1, sp, #12
   27fba:	a807      	add	r0, sp, #28
   27fbc:	f7ff ff92 	bl	27ee4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27fc0:	2310      	movs	r3, #16
   27fc2:	4668      	mov	r0, sp
   27fc4:	4619      	mov	r1, r3
   27fc6:	eb0d 0203 	add.w	r2, sp, r3
   27fca:	f7ff fef5 	bl	27db8 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   27fce:	4621      	mov	r1, r4
   27fd0:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   27fd2:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   27fd4:	f7ff ff08 	bl	27de8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   27fd8:	42b4      	cmp	r4, r6
   27fda:	d1db      	bne.n	27f94 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   27fdc:	f7e8 fea4 	bl	10d28 <sub_bytes>
	shift_rows(state);
   27fe0:	4668      	mov	r0, sp
   27fe2:	f7ff ff46 	bl	27e72 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   27fe6:	4621      	mov	r1, r4
   27fe8:	4668      	mov	r0, sp
   27fea:	f7ff fefd 	bl	27de8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   27fee:	2310      	movs	r3, #16
   27ff0:	466a      	mov	r2, sp
   27ff2:	4619      	mov	r1, r3
   27ff4:	4628      	mov	r0, r5
   27ff6:	f7ff fedf 	bl	27db8 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   27ffa:	4668      	mov	r0, sp
   27ffc:	2210      	movs	r2, #16
   27ffe:	2100      	movs	r1, #0
   28000:	f7ff fee7 	bl	27dd2 <_set>

	return TC_CRYPTO_SUCCESS;
   28004:	2001      	movs	r0, #1
}
   28006:	b008      	add	sp, #32
   28008:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2800a:	4608      	mov	r0, r1
   2800c:	e7fb      	b.n	28006 <tc_aes_encrypt+0xa0>
   2800e:	4610      	mov	r0, r2
   28010:	e7f9      	b.n	28006 <tc_aes_encrypt+0xa0>

00028012 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28012:	460a      	mov	r2, r1
{
   28014:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28016:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   2801a:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2801c:	2b00      	cmp	r3, #0
   2801e:	bfac      	ite	ge
   28020:	2300      	movge	r3, #0
   28022:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   28024:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28028:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2802c:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2802e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   28032:	d002      	beq.n	2803a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   28034:	7813      	ldrb	r3, [r2, #0]
   28036:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   28038:	e7f4      	b.n	28024 <gf_double+0x12>
	}
}
   2803a:	bd10      	pop	{r4, pc}

0002803c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2803c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2803e:	b120      	cbz	r0, 2804a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   28040:	2258      	movs	r2, #88	; 0x58
   28042:	2100      	movs	r1, #0
   28044:	f7ff fec5 	bl	27dd2 <_set>
   28048:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2804a:	bd08      	pop	{r3, pc}

0002804c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2804c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2804e:	4604      	mov	r4, r0
   28050:	b188      	cbz	r0, 28076 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   28052:	2210      	movs	r2, #16
   28054:	2100      	movs	r1, #0
   28056:	f7ff febc 	bl	27dd2 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2805a:	2210      	movs	r2, #16
   2805c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28060:	2100      	movs	r1, #0
   28062:	f7ff feb6 	bl	27dd2 <_set>
	s->leftover_offset = 0;
   28066:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   28068:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2806a:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   2806c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   28070:	2001      	movs	r0, #1
   28072:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   28076:	bd10      	pop	{r4, pc}

00028078 <tc_cmac_setup>:
{
   28078:	b570      	push	{r4, r5, r6, lr}
   2807a:	4604      	mov	r4, r0
   2807c:	460d      	mov	r5, r1
   2807e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   28080:	b310      	cbz	r0, 280c8 <tc_cmac_setup+0x50>
   28082:	b311      	cbz	r1, 280ca <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   28084:	2258      	movs	r2, #88	; 0x58
   28086:	2100      	movs	r1, #0
   28088:	f7ff fea3 	bl	27dd2 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2808c:	4629      	mov	r1, r5
   2808e:	4630      	mov	r0, r6
	s->sched = sched;
   28090:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   28092:	f7e8 fe55 	bl	10d40 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   28096:	2210      	movs	r2, #16
   28098:	2100      	movs	r1, #0
   2809a:	4620      	mov	r0, r4
   2809c:	f7ff fe99 	bl	27dd2 <_set>
	gf_double (s->K1, s->iv);
   280a0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   280a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   280a6:	4621      	mov	r1, r4
   280a8:	4620      	mov	r0, r4
   280aa:	f7ff ff5c 	bl	27f66 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   280ae:	4621      	mov	r1, r4
   280b0:	4628      	mov	r0, r5
   280b2:	f7ff ffae 	bl	28012 <gf_double>
	gf_double (s->K2, s->K1);
   280b6:	4629      	mov	r1, r5
   280b8:	f104 0020 	add.w	r0, r4, #32
   280bc:	f7ff ffa9 	bl	28012 <gf_double>
	tc_cmac_init(s);
   280c0:	4620      	mov	r0, r4
   280c2:	f7ff ffc3 	bl	2804c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   280c6:	2001      	movs	r0, #1
}
   280c8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   280ca:	4608      	mov	r0, r1
   280cc:	e7fc      	b.n	280c8 <tc_cmac_setup+0x50>

000280ce <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   280ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280d2:	460e      	mov	r6, r1
   280d4:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   280d6:	4604      	mov	r4, r0
   280d8:	2800      	cmp	r0, #0
   280da:	d060      	beq.n	2819e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   280dc:	b1fa      	cbz	r2, 2811e <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   280de:	2900      	cmp	r1, #0
   280e0:	d05d      	beq.n	2819e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   280e2:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   280e6:	ea53 0102 	orrs.w	r1, r3, r2
   280ea:	d058      	beq.n	2819e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   280ec:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   280ee:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   280f2:	f142 32ff 	adc.w	r2, r2, #4294967295
   280f6:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   280fa:	f1b8 0f00 	cmp.w	r8, #0
   280fe:	d02c      	beq.n	2815a <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   28100:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28104:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   28108:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2810a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2810c:	d20a      	bcs.n	28124 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2810e:	462b      	mov	r3, r5
   28110:	4632      	mov	r2, r6
   28112:	4629      	mov	r1, r5
   28114:	f7ff fe50 	bl	27db8 <_copy>
			s->leftover_offset += data_length;
   28118:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2811a:	442b      	add	r3, r5
   2811c:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2811e:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   28120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   28124:	463b      	mov	r3, r7
   28126:	4632      	mov	r2, r6
   28128:	4639      	mov	r1, r7
   2812a:	f7ff fe45 	bl	27db8 <_copy>
		s->leftover_offset = 0;
   2812e:	2300      	movs	r3, #0
   28130:	3d10      	subs	r5, #16
   28132:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   28134:	4445      	add	r5, r8
		data += remaining_space;
   28136:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28138:	1e63      	subs	r3, r4, #1
   2813a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2813e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28142:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28146:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   28148:	ea82 0200 	eor.w	r2, r2, r0
   2814c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2814e:	d1f6      	bne.n	2813e <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   28150:	4621      	mov	r1, r4
   28152:	4620      	mov	r0, r4
   28154:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28156:	f7ff ff06 	bl	27f66 <tc_aes_encrypt>
   2815a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2815e:	2d10      	cmp	r5, #16
   28160:	d80a      	bhi.n	28178 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   28162:	2d00      	cmp	r5, #0
   28164:	d0db      	beq.n	2811e <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   28166:	462b      	mov	r3, r5
   28168:	4632      	mov	r2, r6
   2816a:	4629      	mov	r1, r5
   2816c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28170:	f7ff fe22 	bl	27db8 <_copy>
		s->leftover_offset = data_length;
   28174:	6465      	str	r5, [r4, #68]	; 0x44
   28176:	e7d2      	b.n	2811e <tc_cmac_update+0x50>
   28178:	1e63      	subs	r3, r4, #1
   2817a:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2817c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28180:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28184:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   28186:	ea82 0200 	eor.w	r2, r2, r0
   2818a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2818c:	d1f6      	bne.n	2817c <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2818e:	4621      	mov	r1, r4
   28190:	4620      	mov	r0, r4
   28192:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28194:	f7ff fee7 	bl	27f66 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   28198:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2819a:	3d10      	subs	r5, #16
   2819c:	e7df      	b.n	2815e <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2819e:	2000      	movs	r0, #0
   281a0:	e7be      	b.n	28120 <tc_cmac_update+0x52>

000281a2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   281a2:	b570      	push	{r4, r5, r6, lr}
   281a4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   281a6:	4605      	mov	r5, r0
   281a8:	b1f0      	cbz	r0, 281e8 <tc_cmac_final+0x46>
   281aa:	b371      	cbz	r1, 2820a <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   281ac:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   281ae:	2a10      	cmp	r2, #16
   281b0:	d11b      	bne.n	281ea <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   281b2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   281b4:	1e63      	subs	r3, r4, #1
   281b6:	3901      	subs	r1, #1
   281b8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   281bc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   281c0:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   281c4:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   281c6:	ea82 0206 	eor.w	r2, r2, r6
   281ca:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   281ce:	ea82 0206 	eor.w	r2, r2, r6
   281d2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   281d4:	d1f2      	bne.n	281bc <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   281d6:	4621      	mov	r1, r4
   281d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   281da:	4628      	mov	r0, r5
   281dc:	f7ff fec3 	bl	27f66 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   281e0:	4620      	mov	r0, r4
   281e2:	f7ff ff2b 	bl	2803c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   281e6:	2001      	movs	r0, #1
}
   281e8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   281ea:	f102 0030 	add.w	r0, r2, #48	; 0x30
   281ee:	2100      	movs	r1, #0
   281f0:	f1c2 0210 	rsb	r2, r2, #16
   281f4:	4420      	add	r0, r4
   281f6:	f7ff fdec 	bl	27dd2 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   281fa:	2280      	movs	r2, #128	; 0x80
   281fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   281fe:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   28202:	4423      	add	r3, r4
   28204:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   28208:	e7d4      	b.n	281b4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2820a:	4608      	mov	r0, r1
   2820c:	e7ec      	b.n	281e8 <tc_cmac_final+0x46>

0002820e <tc_sha256_update>:
{
   2820e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28210:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   28212:	b110      	cbz	r0, 2821a <tc_sha256_update+0xc>
   28214:	b1f9      	cbz	r1, 28256 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   28216:	b90a      	cbnz	r2, 2821c <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   28218:	2001      	movs	r0, #1
}
   2821a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2821c:	2700      	movs	r7, #0
   2821e:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   28220:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   28224:	6e83      	ldr	r3, [r0, #104]	; 0x68
   28226:	1c5a      	adds	r2, r3, #1
   28228:	6682      	str	r2, [r0, #104]	; 0x68
   2822a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2822e:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   28230:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   28232:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   28236:	d90b      	bls.n	28250 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   28238:	4631      	mov	r1, r6
   2823a:	f7e8 fdd5 	bl	10de8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2823e:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   28242:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   28246:	f142 0200 	adc.w	r2, r2, #0
   2824a:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2824e:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   28250:	42a5      	cmp	r5, r4
   28252:	d1e7      	bne.n	28224 <tc_sha256_update+0x16>
   28254:	e7e0      	b.n	28218 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   28256:	4608      	mov	r0, r1
   28258:	e7df      	b.n	2821a <tc_sha256_update+0xc>

0002825a <tc_sha256_final>:
{
   2825a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2825c:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2825e:	4605      	mov	r5, r0
   28260:	2800      	cmp	r0, #0
   28262:	d054      	beq.n	2830e <tc_sha256_final+0xb4>
   28264:	2900      	cmp	r1, #0
   28266:	d053      	beq.n	28310 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   28268:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   2826a:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   2826e:	00d8      	lsls	r0, r3, #3
   28270:	1812      	adds	r2, r2, r0
   28272:	f141 0100 	adc.w	r1, r1, #0
   28276:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2827a:	2280      	movs	r2, #128	; 0x80
   2827c:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2827e:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   28280:	4423      	add	r3, r4
   28282:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   28284:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   28288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   2828c:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   28290:	d90a      	bls.n	282a8 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   28292:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   28296:	4639      	mov	r1, r7
   28298:	4430      	add	r0, r6
   2829a:	f7ff fd9a 	bl	27dd2 <_set>
		compress(s->iv, s->leftover);
   2829e:	4631      	mov	r1, r6
   282a0:	4620      	mov	r0, r4
   282a2:	f7e8 fda1 	bl	10de8 <compress>
		s->leftover_offset = 0;
   282a6:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   282a8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   282aa:	2100      	movs	r1, #0
   282ac:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   282b0:	4430      	add	r0, r6
   282b2:	f7ff fd8e 	bl	27dd2 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   282b6:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   282b8:	4631      	mov	r1, r6
   282ba:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   282bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   282be:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   282c0:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   282c2:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   282c6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   282ca:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   282cc:	0e1b      	lsrs	r3, r3, #24
   282ce:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   282d2:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   282d4:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   282d8:	f7e8 fd86 	bl	10de8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   282dc:	1d2b      	adds	r3, r5, #4
   282de:	1f21      	subs	r1, r4, #4
   282e0:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   282e2:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   282e6:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   282e8:	0e10      	lsrs	r0, r2, #24
   282ea:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   282ee:	0c10      	lsrs	r0, r2, #16
   282f0:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   282f4:	0a10      	lsrs	r0, r2, #8
   282f6:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   282fa:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   282fe:	42ab      	cmp	r3, r5
   28300:	d1ef      	bne.n	282e2 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   28302:	4620      	mov	r0, r4
   28304:	2270      	movs	r2, #112	; 0x70
   28306:	2100      	movs	r1, #0
   28308:	f7ff fd63 	bl	27dd2 <_set>
	return TC_CRYPTO_SUCCESS;
   2830c:	2001      	movs	r0, #1
}
   2830e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   28310:	4608      	mov	r0, r1
   28312:	e7fc      	b.n	2830e <tc_sha256_final+0xb4>

00028314 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   28314:	b530      	push	{r4, r5, lr}
   28316:	1e43      	subs	r3, r0, #1
   28318:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2831a:	42a9      	cmp	r1, r5
   2831c:	d106      	bne.n	2832c <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2831e:	2136      	movs	r1, #54	; 0x36
   28320:	245c      	movs	r4, #92	; 0x5c
   28322:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   28324:	1a13      	subs	r3, r2, r0
   28326:	2b3f      	cmp	r3, #63	; 0x3f
   28328:	d90c      	bls.n	28344 <rekey+0x30>
	}
}
   2832a:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   2832c:	780c      	ldrb	r4, [r1, #0]
   2832e:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   28332:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   28336:	f811 4b01 	ldrb.w	r4, [r1], #1
   2833a:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   2833e:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   28342:	e7ea      	b.n	2831a <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   28344:	f802 1b01 	strb.w	r1, [r2], #1
   28348:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2834c:	e7ea      	b.n	28324 <rekey+0x10>

0002834e <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   2834e:	b5f0      	push	{r4, r5, r6, r7, lr}
   28350:	460e      	mov	r6, r1
   28352:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   28354:	4605      	mov	r5, r0
{
   28356:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   28358:	b1b8      	cbz	r0, 2838a <tc_hmac_set_key+0x3c>
   2835a:	b341      	cbz	r1, 283ae <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   2835c:	b34a      	cbz	r2, 283b2 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2835e:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   28360:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   28364:	d813      	bhi.n	2838e <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   28366:	a810      	add	r0, sp, #64	; 0x40
   28368:	f7e8 fe28 	bl	10fbc <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2836c:	4622      	mov	r2, r4
   2836e:	4669      	mov	r1, sp
   28370:	a810      	add	r0, sp, #64	; 0x40
   28372:	f7ff ff4c 	bl	2820e <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   28376:	a910      	add	r1, sp, #64	; 0x40
   28378:	a834      	add	r0, sp, #208	; 0xd0
   2837a:	f7ff ff6e 	bl	2825a <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   2837e:	4622      	mov	r2, r4
   28380:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   28382:	4638      	mov	r0, r7
   28384:	f7ff ffc6 	bl	28314 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   28388:	2001      	movs	r0, #1
}
   2838a:	b04d      	add	sp, #308	; 0x134
   2838c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   2838e:	f7e8 fe15 	bl	10fbc <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   28392:	4622      	mov	r2, r4
   28394:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   28396:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2839a:	4628      	mov	r0, r5
   2839c:	f7ff ff37 	bl	2820e <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   283a0:	4629      	mov	r1, r5
   283a2:	4620      	mov	r0, r4
   283a4:	f7ff ff59 	bl	2825a <tc_sha256_final>
		rekey(ctx->key,
   283a8:	2220      	movs	r2, #32
   283aa:	4621      	mov	r1, r4
   283ac:	e7e9      	b.n	28382 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   283ae:	4608      	mov	r0, r1
   283b0:	e7eb      	b.n	2838a <tc_hmac_set_key+0x3c>
   283b2:	4610      	mov	r0, r2
   283b4:	e7e9      	b.n	2838a <tc_hmac_set_key+0x3c>

000283b6 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   283b6:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   283b8:	4604      	mov	r4, r0
   283ba:	b140      	cbz	r0, 283ce <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   283bc:	f7e8 fdfe 	bl	10fbc <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   283c0:	2240      	movs	r2, #64	; 0x40
   283c2:	4620      	mov	r0, r4
   283c4:	f104 0170 	add.w	r1, r4, #112	; 0x70
   283c8:	f7ff ff21 	bl	2820e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   283cc:	2001      	movs	r0, #1
}
   283ce:	bd10      	pop	{r4, pc}

000283d0 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   283d0:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   283d2:	b110      	cbz	r0, 283da <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   283d4:	f7ff ff1b 	bl	2820e <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   283d8:	2001      	movs	r0, #1
}
   283da:	bd08      	pop	{r3, pc}

000283dc <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   283dc:	b570      	push	{r4, r5, r6, lr}
   283de:	460e      	mov	r6, r1
   283e0:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   283e2:	4605      	mov	r5, r0
   283e4:	b1f0      	cbz	r0, 28424 <tc_hmac_final+0x48>
   283e6:	2920      	cmp	r1, #32
   283e8:	d11c      	bne.n	28424 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   283ea:	b1ea      	cbz	r2, 28428 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   283ec:	4611      	mov	r1, r2
   283ee:	f7ff ff34 	bl	2825a <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   283f2:	4620      	mov	r0, r4
   283f4:	f7e8 fde2 	bl	10fbc <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   283f8:	2240      	movs	r2, #64	; 0x40
   283fa:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   283fe:	4620      	mov	r0, r4
   28400:	f7ff ff05 	bl	2820e <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   28404:	4632      	mov	r2, r6
   28406:	4629      	mov	r1, r5
   28408:	4620      	mov	r0, r4
   2840a:	f7ff ff00 	bl	2820e <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2840e:	4621      	mov	r1, r4
   28410:	4628      	mov	r0, r5
   28412:	f7ff ff22 	bl	2825a <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   28416:	4620      	mov	r0, r4
   28418:	22f0      	movs	r2, #240	; 0xf0
   2841a:	2100      	movs	r1, #0
   2841c:	f7ff fcd9 	bl	27dd2 <_set>

	return TC_CRYPTO_SUCCESS;
   28420:	2001      	movs	r0, #1
}
   28422:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28424:	2000      	movs	r0, #0
   28426:	e7fc      	b.n	28422 <tc_hmac_final+0x46>
   28428:	4610      	mov	r0, r2
   2842a:	e7fa      	b.n	28422 <tc_hmac_final+0x46>

0002842c <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   2842c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28430:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   28432:	f04f 0b01 	mov.w	fp, #1
{
   28436:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   28438:	2300      	movs	r3, #0
{
   2843a:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2843c:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   28440:	4631      	mov	r1, r6
{
   28442:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   28444:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   28446:	f88d 3006 	strb.w	r3, [sp, #6]
{
   2844a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   2844e:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   28452:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   28456:	f7ff ff7a 	bl	2834e <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2845a:	4620      	mov	r0, r4
   2845c:	f7ff ffab 	bl	283b6 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   28460:	2220      	movs	r2, #32
   28462:	4629      	mov	r1, r5
   28464:	4620      	mov	r0, r4
   28466:	f7ff ffb3 	bl	283d0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2846a:	465a      	mov	r2, fp
   2846c:	4620      	mov	r0, r4
   2846e:	f10d 0106 	add.w	r1, sp, #6
   28472:	f7ff ffad 	bl	283d0 <tc_hmac_update>

	if (data && datalen)
   28476:	f1b8 0f00 	cmp.w	r8, #0
   2847a:	d007      	beq.n	2848c <update+0x60>
   2847c:	f1b9 0f00 	cmp.w	r9, #0
   28480:	d004      	beq.n	2848c <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   28482:	464a      	mov	r2, r9
   28484:	4641      	mov	r1, r8
   28486:	4620      	mov	r0, r4
   28488:	f7ff ffa2 	bl	283d0 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2848c:	b13f      	cbz	r7, 2849e <update+0x72>
   2848e:	f1ba 0f00 	cmp.w	sl, #0
   28492:	d004      	beq.n	2849e <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   28494:	4652      	mov	r2, sl
   28496:	4639      	mov	r1, r7
   28498:	4620      	mov	r0, r4
   2849a:	f7ff ff99 	bl	283d0 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2849e:	4622      	mov	r2, r4
   284a0:	2120      	movs	r1, #32
   284a2:	4630      	mov	r0, r6
   284a4:	f7ff ff9a 	bl	283dc <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   284a8:	2220      	movs	r2, #32
   284aa:	4631      	mov	r1, r6
   284ac:	4620      	mov	r0, r4
   284ae:	f7ff ff4e 	bl	2834e <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   284b2:	4620      	mov	r0, r4
   284b4:	f7ff ff7f 	bl	283b6 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   284b8:	2220      	movs	r2, #32
   284ba:	4629      	mov	r1, r5
   284bc:	4620      	mov	r0, r4
   284be:	f7ff ff87 	bl	283d0 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   284c2:	4622      	mov	r2, r4
   284c4:	2120      	movs	r1, #32
   284c6:	4628      	mov	r0, r5
   284c8:	f7ff ff88 	bl	283dc <tc_hmac_final>

	if (data == 0 || datalen == 0)
   284cc:	f1b8 0f00 	cmp.w	r8, #0
   284d0:	d03a      	beq.n	28548 <update+0x11c>
   284d2:	f1b9 0f00 	cmp.w	r9, #0
   284d6:	d037      	beq.n	28548 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   284d8:	2220      	movs	r2, #32
   284da:	4631      	mov	r1, r6
   284dc:	4620      	mov	r0, r4
   284de:	f7ff ff36 	bl	2834e <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   284e2:	4620      	mov	r0, r4
   284e4:	f7ff ff67 	bl	283b6 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   284e8:	2220      	movs	r2, #32
   284ea:	4629      	mov	r1, r5
   284ec:	4620      	mov	r0, r4
   284ee:	f7ff ff6f 	bl	283d0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   284f2:	2201      	movs	r2, #1
   284f4:	f10d 0107 	add.w	r1, sp, #7
   284f8:	4620      	mov	r0, r4
   284fa:	f7ff ff69 	bl	283d0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   284fe:	464a      	mov	r2, r9
   28500:	4641      	mov	r1, r8
   28502:	4620      	mov	r0, r4
   28504:	f7ff ff64 	bl	283d0 <tc_hmac_update>
	if (additional_data && additional_datalen)
   28508:	b13f      	cbz	r7, 2851a <update+0xee>
   2850a:	f1ba 0f00 	cmp.w	sl, #0
   2850e:	d004      	beq.n	2851a <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   28510:	4652      	mov	r2, sl
   28512:	4639      	mov	r1, r7
   28514:	4620      	mov	r0, r4
   28516:	f7ff ff5b 	bl	283d0 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2851a:	4622      	mov	r2, r4
   2851c:	2120      	movs	r1, #32
   2851e:	4630      	mov	r0, r6
   28520:	f7ff ff5c 	bl	283dc <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   28524:	2220      	movs	r2, #32
   28526:	4631      	mov	r1, r6
   28528:	4620      	mov	r0, r4
   2852a:	f7ff ff10 	bl	2834e <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2852e:	4620      	mov	r0, r4
   28530:	f7ff ff41 	bl	283b6 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   28534:	2220      	movs	r2, #32
   28536:	4629      	mov	r1, r5
   28538:	4620      	mov	r0, r4
   2853a:	f7ff ff49 	bl	283d0 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2853e:	4622      	mov	r2, r4
   28540:	2120      	movs	r1, #32
   28542:	4628      	mov	r0, r5
   28544:	f7ff ff4a 	bl	283dc <tc_hmac_final>
}
   28548:	b003      	add	sp, #12
   2854a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002854e <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   2854e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28550:	460c      	mov	r4, r1
   28552:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   28554:	4605      	mov	r5, r0
   28556:	b1b0      	cbz	r0, 28586 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   28558:	b1b9      	cbz	r1, 2858a <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2855a:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   2855c:	2220      	movs	r2, #32
   2855e:	2100      	movs	r1, #0
   28560:	30f0      	adds	r0, #240	; 0xf0
   28562:	f7ff fc36 	bl	27dd2 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   28566:	2220      	movs	r2, #32
   28568:	2101      	movs	r1, #1
   2856a:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2856e:	f7ff fc30 	bl	27dd2 <_set>
	update(prng, personalization, plen, 0, 0);
   28572:	4628      	mov	r0, r5
   28574:	4633      	mov	r3, r6
   28576:	463a      	mov	r2, r7
   28578:	4621      	mov	r1, r4
   2857a:	9600      	str	r6, [sp, #0]
   2857c:	f7ff ff56 	bl	2842c <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   28580:	2001      	movs	r0, #1
	prng->countdown = 0;
   28582:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   28586:	b003      	add	sp, #12
   28588:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2858a:	4608      	mov	r0, r1
   2858c:	e7fb      	b.n	28586 <tc_hmac_prng_init+0x38>

0002858e <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   2858e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28590:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   28592:	4605      	mov	r5, r0
   28594:	b180      	cbz	r0, 285b8 <tc_hmac_prng_reseed+0x2a>
   28596:	b179      	cbz	r1, 285b8 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   28598:	2a1f      	cmp	r2, #31
   2859a:	d90d      	bls.n	285b8 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2859c:	b153      	cbz	r3, 285b4 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2859e:	b16c      	cbz	r4, 285bc <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   285a0:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   285a2:	f7ff ff43 	bl	2842c <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   285a6:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   285aa:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   285ac:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   285b0:	b003      	add	sp, #12
   285b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   285b4:	9300      	str	r3, [sp, #0]
   285b6:	e7f4      	b.n	285a2 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   285b8:	2000      	movs	r0, #0
   285ba:	e7f9      	b.n	285b0 <tc_hmac_prng_reseed+0x22>
   285bc:	4620      	mov	r0, r4
   285be:	e7f7      	b.n	285b0 <tc_hmac_prng_reseed+0x22>

000285c0 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   285c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   285c4:	460d      	mov	r5, r1
   285c6:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   285c8:	4680      	mov	r8, r0
   285ca:	b3d8      	cbz	r0, 28644 <tc_hmac_prng_generate+0x84>
   285cc:	b3d2      	cbz	r2, 28644 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   285ce:	1e4b      	subs	r3, r1, #1
   285d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   285d4:	d236      	bcs.n	28644 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   285d6:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   285da:	b3ab      	cbz	r3, 28648 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   285dc:	3b01      	subs	r3, #1
   285de:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   285e2:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   285e6:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   285ea:	2220      	movs	r2, #32
   285ec:	4649      	mov	r1, r9
   285ee:	4620      	mov	r0, r4
   285f0:	f7ff fead 	bl	2834e <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   285f4:	4620      	mov	r0, r4
   285f6:	f7ff fede 	bl	283b6 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   285fa:	2220      	movs	r2, #32
   285fc:	4639      	mov	r1, r7
   285fe:	4620      	mov	r0, r4
   28600:	f7ff fee6 	bl	283d0 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   28604:	4622      	mov	r2, r4
   28606:	2120      	movs	r1, #32
   28608:	4638      	mov	r0, r7
   2860a:	f7ff fee7 	bl	283dc <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2860e:	2d20      	cmp	r5, #32
   28610:	462e      	mov	r6, r5
   28612:	bf28      	it	cs
   28614:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   28616:	4640      	mov	r0, r8
   28618:	4633      	mov	r3, r6
   2861a:	463a      	mov	r2, r7
   2861c:	4631      	mov	r1, r6
   2861e:	f7ff fbcb 	bl	27db8 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   28622:	2d20      	cmp	r5, #32
   28624:	bf38      	it	cc
   28626:	2520      	movcc	r5, #32
	while (outlen != 0) {
   28628:	3d20      	subs	r5, #32
		out += bufferlen;
   2862a:	44b0      	add	r8, r6
	while (outlen != 0) {
   2862c:	d1dd      	bne.n	285ea <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2862e:	4620      	mov	r0, r4
   28630:	462b      	mov	r3, r5
   28632:	462a      	mov	r2, r5
   28634:	4629      	mov	r1, r5
   28636:	9500      	str	r5, [sp, #0]
   28638:	f7ff fef8 	bl	2842c <update>

	return TC_CRYPTO_SUCCESS;
   2863c:	2001      	movs	r0, #1
}
   2863e:	b003      	add	sp, #12
   28640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   28644:	2000      	movs	r0, #0
   28646:	e7fa      	b.n	2863e <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   28648:	f04f 30ff 	mov.w	r0, #4294967295
   2864c:	e7f7      	b.n	2863e <tc_hmac_prng_generate+0x7e>

0002864e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2864e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28650:	ab0b      	add	r3, sp, #44	; 0x2c
   28652:	9305      	str	r3, [sp, #20]
   28654:	9303      	str	r3, [sp, #12]
   28656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28658:	2201      	movs	r2, #1
   2865a:	9302      	str	r3, [sp, #8]
   2865c:	2300      	movs	r3, #0
   2865e:	4618      	mov	r0, r3
   28660:	e9cd 3300 	strd	r3, r3, [sp]
   28664:	f7e6 fe66 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   28668:	b007      	add	sp, #28
   2866a:	f85d fb04 	ldr.w	pc, [sp], #4

0002866e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2866e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   28670:	6800      	ldr	r0, [r0, #0]
   28672:	f7e8 bced 	b.w	11050 <z_arm_fatal_error>

00028676 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   28676:	2100      	movs	r1, #0
   28678:	2001      	movs	r0, #1
   2867a:	f7e8 bce9 	b.w	11050 <z_arm_fatal_error>

0002867e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2867e:	b508      	push	{r3, lr}
	handler();
   28680:	f7e8 fd98 	bl	111b4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   28684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   28688:	f7e8 be62 	b.w	11350 <z_arm_exc_exit>

0002868c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2868c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2868e:	f383 880b 	msr	PSPLIM, r3
}
   28692:	4770      	bx	lr

00028694 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28696:	ab0b      	add	r3, sp, #44	; 0x2c
   28698:	9305      	str	r3, [sp, #20]
   2869a:	9303      	str	r3, [sp, #12]
   2869c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2869e:	2201      	movs	r2, #1
   286a0:	9302      	str	r3, [sp, #8]
   286a2:	2300      	movs	r3, #0
   286a4:	4618      	mov	r0, r3
   286a6:	e9cd 3300 	strd	r3, r3, [sp]
   286aa:	f7e6 fe43 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   286ae:	b007      	add	sp, #28
   286b0:	f85d fb04 	ldr.w	pc, [sp], #4

000286b4 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   286b4:	4770      	bx	lr

000286b6 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   286b6:	4770      	bx	lr

000286b8 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   286b8:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   286bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   286c0:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   286c2:	bf08      	it	eq
   286c4:	f06f 0015 	mvneq.w	r0, #21
   286c8:	4770      	bx	lr

000286ca <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   286ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   286cc:	ab0b      	add	r3, sp, #44	; 0x2c
   286ce:	9305      	str	r3, [sp, #20]
   286d0:	9303      	str	r3, [sp, #12]
   286d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   286d4:	2201      	movs	r2, #1
   286d6:	9302      	str	r3, [sp, #8]
   286d8:	2300      	movs	r3, #0
   286da:	4618      	mov	r0, r3
   286dc:	e9cd 3300 	strd	r3, r3, [sp]
   286e0:	f7e6 fe28 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   286e4:	b007      	add	sp, #28
   286e6:	f85d fb04 	ldr.w	pc, [sp], #4

000286ea <mpu_configure_region>:
{
   286ea:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   286ec:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   286ee:	684b      	ldr	r3, [r1, #4]
{
   286f0:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   286f2:	890a      	ldrh	r2, [r1, #8]
   286f4:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   286f6:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   286f8:	3b01      	subs	r3, #1
   286fa:	f024 041f 	bic.w	r4, r4, #31
   286fe:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   28700:	f002 021f 	and.w	r2, r2, #31
   28704:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   28708:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   2870c:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   2870e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   28712:	9303      	str	r3, [sp, #12]
   28714:	f7e9 fa22 	bl	11b5c <region_allocate_and_init>
}
   28718:	b005      	add	sp, #20
   2871a:	bd30      	pop	{r4, r5, pc}

0002871c <_stdout_hook_default>:
}
   2871c:	f04f 30ff 	mov.w	r0, #4294967295
   28720:	4770      	bx	lr

00028722 <_stdin_hook_default>:
}
   28722:	2000      	movs	r0, #0
   28724:	4770      	bx	lr

00028726 <_read>:
{
   28726:	4608      	mov	r0, r1
   28728:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2872a:	f7e9 bc15 	b.w	11f58 <z_impl_zephyr_read_stdin>

0002872e <_write>:
{
   2872e:	4608      	mov	r0, r1
   28730:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   28732:	f7e9 bc25 	b.w	11f80 <z_impl_zephyr_write_stdout>

00028736 <_close>:
int _close(int file)
   28736:	f04f 30ff 	mov.w	r0, #4294967295
   2873a:	4770      	bx	lr

0002873c <_lseek>:
}
   2873c:	2000      	movs	r0, #0
   2873e:	4770      	bx	lr

00028740 <_isatty>:
}
   28740:	2802      	cmp	r0, #2
   28742:	bfcc      	ite	gt
   28744:	2000      	movgt	r0, #0
   28746:	2001      	movle	r0, #1
   28748:	4770      	bx	lr

0002874a <_kill>:
}
   2874a:	2000      	movs	r0, #0
   2874c:	4770      	bx	lr

0002874e <_getpid>:
}
   2874e:	2000      	movs	r0, #0
   28750:	4770      	bx	lr

00028752 <_fstat>:
	st->st_mode = S_IFCHR;
   28752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   28756:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   28758:	604b      	str	r3, [r1, #4]
}
   2875a:	4770      	bx	lr

0002875c <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2875c:	f7f7 bc32 	b.w	1ffc4 <z_impl_z_errno>

00028760 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   28760:	b530      	push	{r4, r5, lr}
   28762:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   28764:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   28768:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   2876a:	794b      	ldrb	r3, [r1, #5]
   2876c:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   28770:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   28772:	220d      	movs	r2, #13
   28774:	2100      	movs	r1, #0
   28776:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   2877a:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   2877e:	f003 fcdf 	bl	2c140 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   28782:	aa02      	add	r2, sp, #8
   28784:	4611      	mov	r1, r2
   28786:	4628      	mov	r0, r5
   28788:	f000 fb46 	bl	28e18 <bt_encrypt_le>
	if (err) {
   2878c:	b110      	cbz	r0, 28794 <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   2878e:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   28790:	b007      	add	sp, #28
   28792:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   28794:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   28796:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   28798:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   2879c:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   2879e:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   287a0:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   287a2:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   287a6:	f003 fc81 	bl	2c0ac <memcmp>
   287aa:	fab0 f080 	clz	r0, r0
   287ae:	0940      	lsrs	r0, r0, #5
   287b0:	e7ee      	b.n	28790 <bt_rpa_irk_matches+0x30>

000287b2 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   287b2:	b510      	push	{r4, lr}
   287b4:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   287b6:	7801      	ldrb	r1, [r0, #0]
   287b8:	7822      	ldrb	r2, [r4, #0]
{
   287ba:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   287bc:	428a      	cmp	r2, r1
   287be:	d00f      	beq.n	287e0 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   287c0:	4669      	mov	r1, sp
   287c2:	f7e9 fd41 	bl	12248 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   287c6:	4620      	mov	r0, r4
   287c8:	a905      	add	r1, sp, #20
   287ca:	f7e9 fd3d 	bl	12248 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   287ce:	2210      	movs	r2, #16
   287d0:	f10d 0115 	add.w	r1, sp, #21
   287d4:	f10d 0001 	add.w	r0, sp, #1
   287d8:	f003 fc68 	bl	2c0ac <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   287dc:	b00a      	add	sp, #40	; 0x28
   287de:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   287e0:	2a01      	cmp	r2, #1
   287e2:	d006      	beq.n	287f2 <bt_uuid_cmp+0x40>
   287e4:	2a02      	cmp	r2, #2
   287e6:	d007      	beq.n	287f8 <bt_uuid_cmp+0x46>
   287e8:	b972      	cbnz	r2, 28808 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   287ea:	8840      	ldrh	r0, [r0, #2]
   287ec:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   287ee:	1ac0      	subs	r0, r0, r3
   287f0:	e7f4      	b.n	287dc <bt_uuid_cmp+0x2a>
   287f2:	6840      	ldr	r0, [r0, #4]
   287f4:	6863      	ldr	r3, [r4, #4]
   287f6:	e7fa      	b.n	287ee <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   287f8:	2210      	movs	r2, #16
   287fa:	1c61      	adds	r1, r4, #1
   287fc:	3001      	adds	r0, #1
}
   287fe:	b00a      	add	sp, #40	; 0x28
   28800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   28804:	f003 bc52 	b.w	2c0ac <memcmp>
	switch (u1->type) {
   28808:	f06f 0015 	mvn.w	r0, #21
   2880c:	e7e6      	b.n	287dc <bt_uuid_cmp+0x2a>

0002880e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2880e:	2a04      	cmp	r2, #4
   28810:	d00a      	beq.n	28828 <bt_uuid_create+0x1a>
   28812:	2a10      	cmp	r2, #16
   28814:	d00d      	beq.n	28832 <bt_uuid_create+0x24>
   28816:	2a02      	cmp	r2, #2
   28818:	f04f 0300 	mov.w	r3, #0
   2881c:	d115      	bne.n	2884a <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2881e:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   28820:	880b      	ldrh	r3, [r1, #0]
   28822:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   28824:	2001      	movs	r0, #1
   28826:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   28828:	2301      	movs	r3, #1
   2882a:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2882c:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2882e:	6043      	str	r3, [r0, #4]
		break;
   28830:	e7f8      	b.n	28824 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   28832:	2302      	movs	r3, #2
   28834:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28838:	f101 0310 	add.w	r3, r1, #16
   2883c:	f851 2b04 	ldr.w	r2, [r1], #4
   28840:	4299      	cmp	r1, r3
   28842:	f840 2b04 	str.w	r2, [r0], #4
   28846:	d1f9      	bne.n	2883c <bt_uuid_create+0x2e>
   28848:	e7ec      	b.n	28824 <bt_uuid_create+0x16>
	switch (data_len) {
   2884a:	4618      	mov	r0, r3
}
   2884c:	4770      	bx	lr

0002884e <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2884e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   28850:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   28852:	2106      	movs	r1, #6
{
   28854:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   28856:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2885a:	f7ec f823 	bl	148a4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2885e:	b918      	cbnz	r0, 28868 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   28860:	79a3      	ldrb	r3, [r4, #6]
   28862:	f063 033f 	orn	r3, r3, #63	; 0x3f
   28866:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   28868:	bd10      	pop	{r4, pc}

0002886a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2886a:	280f      	cmp	r0, #15
   2886c:	d807      	bhi.n	2887e <bt_hci_evt_get_flags+0x14>
   2886e:	280d      	cmp	r0, #13
   28870:	d80b      	bhi.n	2888a <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   28872:	2805      	cmp	r0, #5
   28874:	bf08      	it	eq
   28876:	2003      	moveq	r0, #3
   28878:	bf18      	it	ne
   2887a:	2002      	movne	r0, #2
   2887c:	4770      	bx	lr
	switch (evt) {
   2887e:	2813      	cmp	r0, #19
   28880:	d003      	beq.n	2888a <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   28882:	281a      	cmp	r0, #26
   28884:	bf08      	it	eq
   28886:	2001      	moveq	r0, #1
   28888:	e7f6      	b.n	28878 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2888a:	2001      	movs	r0, #1
	}
}
   2888c:	4770      	bx	lr

0002888e <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2888e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   28892:	b183      	cbz	r3, 288b6 <update_sec_level+0x28>
   28894:	7b5a      	ldrb	r2, [r3, #13]
   28896:	07d1      	lsls	r1, r2, #31
   28898:	d50d      	bpl.n	288b6 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2889a:	06d2      	lsls	r2, r2, #27
   2889c:	d50d      	bpl.n	288ba <update_sec_level+0x2c>
   2889e:	7b1b      	ldrb	r3, [r3, #12]
   288a0:	2b10      	cmp	r3, #16
   288a2:	bf14      	ite	ne
   288a4:	2303      	movne	r3, #3
   288a6:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   288a8:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   288aa:	7a80      	ldrb	r0, [r0, #10]
}
   288ac:	4298      	cmp	r0, r3
   288ae:	bf8c      	ite	hi
   288b0:	2000      	movhi	r0, #0
   288b2:	2001      	movls	r0, #1
   288b4:	4770      	bx	lr
   288b6:	2302      	movs	r3, #2
   288b8:	e7f6      	b.n	288a8 <update_sec_level+0x1a>
   288ba:	2303      	movs	r3, #3
   288bc:	e7f4      	b.n	288a8 <update_sec_level+0x1a>

000288be <hci_vendor_event>:
}
   288be:	4770      	bx	lr

000288c0 <atomic_or>:
{
   288c0:	4603      	mov	r3, r0
   288c2:	b510      	push	{r4, lr}
}
   288c4:	e8d3 0fef 	ldaex	r0, [r3]
   288c8:	ea40 0201 	orr.w	r2, r0, r1
   288cc:	e8c3 2fe4 	stlex	r4, r2, [r3]
   288d0:	2c00      	cmp	r4, #0
   288d2:	d1f7      	bne.n	288c4 <atomic_or+0x4>
   288d4:	bd10      	pop	{r4, pc}

000288d6 <bt_addr_copy>:
   288d6:	680b      	ldr	r3, [r1, #0]
   288d8:	6003      	str	r3, [r0, #0]
   288da:	888b      	ldrh	r3, [r1, #4]
   288dc:	8083      	strh	r3, [r0, #4]
}
   288de:	4770      	bx	lr

000288e0 <bt_addr_le_copy>:
   288e0:	680b      	ldr	r3, [r1, #0]
   288e2:	6003      	str	r3, [r0, #0]
   288e4:	888b      	ldrh	r3, [r1, #4]
   288e6:	8083      	strh	r3, [r0, #4]
   288e8:	798b      	ldrb	r3, [r1, #6]
   288ea:	7183      	strb	r3, [r0, #6]
}
   288ec:	4770      	bx	lr

000288ee <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   288ee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   288f0:	ab0b      	add	r3, sp, #44	; 0x2c
   288f2:	9305      	str	r3, [sp, #20]
   288f4:	9303      	str	r3, [sp, #12]
   288f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   288f8:	9302      	str	r3, [sp, #8]
   288fa:	2300      	movs	r3, #0
   288fc:	4618      	mov	r0, r3
   288fe:	e9cd 3300 	strd	r3, r3, [sp]
   28902:	f7e6 fd17 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   28906:	b007      	add	sp, #28
   28908:	f85d fb04 	ldr.w	pc, [sp], #4

0002890c <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2890c:	e8d0 3fef 	ldaex	r3, [r0]
   28910:	400b      	ands	r3, r1
   28912:	e8c0 3fe2 	stlex	r2, r3, [r0]
   28916:	2a00      	cmp	r2, #0
   28918:	d1f8      	bne.n	2890c <atomic_and.isra.0>
}
   2891a:	4770      	bx	lr

0002891c <sys_put_le64>:
	dst[1] = val >> 8;
   2891c:	f3c0 2307 	ubfx	r3, r0, #8, #8
   28920:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   28922:	2300      	movs	r3, #0
   28924:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   28926:	0e00      	lsrs	r0, r0, #24
   28928:	70d0      	strb	r0, [r2, #3]
   2892a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2892e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   28930:	7093      	strb	r3, [r2, #2]
   28932:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   28934:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   28936:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   28938:	71d1      	strb	r1, [r2, #7]
}
   2893a:	4770      	bx	lr

0002893c <bt_hci_disconnect>:
{
   2893c:	b570      	push	{r4, r5, r6, lr}
   2893e:	4606      	mov	r6, r0
   28940:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   28942:	f240 4006 	movw	r0, #1030	; 0x406
   28946:	2103      	movs	r1, #3
   28948:	f7ea f914 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   2894c:	4604      	mov	r4, r0
   2894e:	b168      	cbz	r0, 2896c <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   28950:	2103      	movs	r1, #3
   28952:	300c      	adds	r0, #12
   28954:	f7f1 fe4c 	bl	1a5f0 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   28958:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2895a:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2895c:	4621      	mov	r1, r4
}
   2895e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   28962:	2200      	movs	r2, #0
   28964:	f240 4006 	movw	r0, #1030	; 0x406
   28968:	f7ea b952 	b.w	12c10 <bt_hci_cmd_send_sync>
}
   2896c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28970:	bd70      	pop	{r4, r5, r6, pc}

00028972 <bt_le_set_data_len>:
{
   28972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28974:	4607      	mov	r7, r0
   28976:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   28978:	f242 0022 	movw	r0, #8226	; 0x2022
   2897c:	2106      	movs	r1, #6
{
   2897e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   28980:	f7ea f8f8 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   28984:	4604      	mov	r4, r0
   28986:	b178      	cbz	r0, 289a8 <bt_le_set_data_len+0x36>
   28988:	2106      	movs	r1, #6
   2898a:	300c      	adds	r0, #12
   2898c:	f7f1 fe30 	bl	1a5f0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28990:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   28992:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   28994:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   28996:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   28998:	4621      	mov	r1, r4
}
   2899a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2899e:	2200      	movs	r2, #0
   289a0:	f242 0022 	movw	r0, #8226	; 0x2022
   289a4:	f7ea b934 	b.w	12c10 <bt_hci_cmd_send_sync>
}
   289a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   289ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000289ae <bt_le_set_phy>:
{
   289ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   289b2:	4681      	mov	r9, r0
   289b4:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   289b6:	f242 0032 	movw	r0, #8242	; 0x2032
   289ba:	2107      	movs	r1, #7
{
   289bc:	4617      	mov	r7, r2
   289be:	461e      	mov	r6, r3
   289c0:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   289c4:	f7ea f8d6 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   289c8:	4605      	mov	r5, r0
   289ca:	b1a0      	cbz	r0, 289f6 <bt_le_set_phy+0x48>
   289cc:	2107      	movs	r1, #7
   289ce:	300c      	adds	r0, #12
   289d0:	f7f1 fe0e 	bl	1a5f0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   289d4:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   289d8:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   289dc:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   289de:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   289e0:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   289e2:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   289e6:	4629      	mov	r1, r5
}
   289e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   289ec:	2200      	movs	r2, #0
   289ee:	f242 0032 	movw	r0, #8242	; 0x2032
   289f2:	f7ea b90d 	b.w	12c10 <bt_hci_cmd_send_sync>
}
   289f6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   289fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000289fe <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   289fe:	68c0      	ldr	r0, [r0, #12]
   28a00:	f7ea b9d0 	b.w	12da4 <bt_hci_le_enh_conn_complete>

00028a04 <bt_le_conn_params_valid>:
{
   28a04:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   28a06:	8803      	ldrh	r3, [r0, #0]
   28a08:	8842      	ldrh	r2, [r0, #2]
   28a0a:	4293      	cmp	r3, r2
   28a0c:	d819      	bhi.n	28a42 <bt_le_conn_params_valid+0x3e>
   28a0e:	2b05      	cmp	r3, #5
   28a10:	d917      	bls.n	28a42 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   28a12:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   28a16:	d814      	bhi.n	28a42 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   28a18:	8883      	ldrh	r3, [r0, #4]
   28a1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   28a1e:	d210      	bcs.n	28a42 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   28a20:	f640 4476 	movw	r4, #3190	; 0xc76
   28a24:	88c0      	ldrh	r0, [r0, #6]
   28a26:	f1a0 010a 	sub.w	r1, r0, #10
   28a2a:	b289      	uxth	r1, r1
   28a2c:	42a1      	cmp	r1, r4
   28a2e:	d808      	bhi.n	28a42 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   28a30:	3301      	adds	r3, #1
   28a32:	b29b      	uxth	r3, r3
   28a34:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   28a36:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   28a3a:	bf34      	ite	cc
   28a3c:	2001      	movcc	r0, #1
   28a3e:	2000      	movcs	r0, #0
}
   28a40:	bd10      	pop	{r4, pc}
		return false;
   28a42:	2000      	movs	r0, #0
   28a44:	e7fc      	b.n	28a40 <bt_le_conn_params_valid+0x3c>

00028a46 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   28a46:	f240 3041 	movw	r0, #833	; 0x341
   28a4a:	4770      	bx	lr

00028a4c <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   28a4c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   28a4e:	f7f1 f921 	bl	19c94 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   28a52:	b118      	cbz	r0, 28a5c <bt_addr_le_is_bonded+0x10>
   28a54:	89c0      	ldrh	r0, [r0, #14]
   28a56:	3800      	subs	r0, #0
   28a58:	bf18      	it	ne
   28a5a:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   28a5c:	bd08      	pop	{r3, pc}

00028a5e <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   28a5e:	2207      	movs	r2, #7
{
   28a60:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   28a62:	f003 fb23 	bl	2c0ac <memcmp>
}
   28a66:	fab0 f080 	clz	r0, r0
   28a6a:	0940      	lsrs	r0, r0, #5
   28a6c:	bd08      	pop	{r3, pc}

00028a6e <bt_addr_copy>:
   28a6e:	680b      	ldr	r3, [r1, #0]
   28a70:	6003      	str	r3, [r0, #0]
   28a72:	888b      	ldrh	r3, [r1, #4]
   28a74:	8083      	strh	r3, [r0, #4]
}
   28a76:	4770      	bx	lr

00028a78 <bt_addr_le_copy>:
   28a78:	680b      	ldr	r3, [r1, #0]
   28a7a:	6003      	str	r3, [r0, #0]
   28a7c:	888b      	ldrh	r3, [r1, #4]
   28a7e:	8083      	strh	r3, [r0, #4]
   28a80:	798b      	ldrb	r3, [r1, #6]
   28a82:	7183      	strb	r3, [r0, #6]
}
   28a84:	4770      	bx	lr

00028a86 <hci_id_add>:
{
   28a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a88:	460f      	mov	r7, r1
   28a8a:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   28a8c:	bb30      	cbnz	r0, 28adc <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   28a8e:	2127      	movs	r1, #39	; 0x27
   28a90:	f242 0027 	movw	r0, #8231	; 0x2027
   28a94:	f7ea f86e 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   28a98:	4605      	mov	r5, r0
   28a9a:	b310      	cbz	r0, 28ae2 <hci_id_add+0x5c>
   28a9c:	2127      	movs	r1, #39	; 0x27
   28a9e:	300c      	adds	r0, #12
   28aa0:	f7f1 fda6 	bl	1a5f0 <net_buf_simple_add>
   28aa4:	4622      	mov	r2, r4
   28aa6:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   28aa8:	4639      	mov	r1, r7
   28aaa:	f7ff ffe5 	bl	28a78 <bt_addr_le_copy>
   28aae:	1dc3      	adds	r3, r0, #7
   28ab0:	f104 0110 	add.w	r1, r4, #16
   28ab4:	f852 0b04 	ldr.w	r0, [r2], #4
   28ab8:	428a      	cmp	r2, r1
   28aba:	f843 0b04 	str.w	r0, [r3], #4
   28abe:	d1f9      	bne.n	28ab4 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   28ac0:	2210      	movs	r2, #16
   28ac2:	2100      	movs	r1, #0
   28ac4:	f106 0017 	add.w	r0, r6, #23
   28ac8:	f003 fb3a 	bl	2c140 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   28acc:	4629      	mov	r1, r5
}
   28ace:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   28ad2:	2200      	movs	r2, #0
   28ad4:	f242 0027 	movw	r0, #8231	; 0x2027
   28ad8:	f7ea b89a 	b.w	12c10 <bt_hci_cmd_send_sync>
		return -EINVAL;
   28adc:	f06f 0015 	mvn.w	r0, #21
}
   28ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   28ae2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28ae6:	e7fb      	b.n	28ae0 <hci_id_add+0x5a>

00028ae8 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   28ae8:	7a03      	ldrb	r3, [r0, #8]
{
   28aea:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   28aec:	075b      	lsls	r3, r3, #29
   28aee:	d505      	bpl.n	28afc <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   28af0:	4601      	mov	r1, r0
   28af2:	322a      	adds	r2, #42	; 0x2a
   28af4:	f811 0b01 	ldrb.w	r0, [r1], #1
   28af8:	f7ff bfc5 	b.w	28a86 <hci_id_add>
}
   28afc:	4770      	bx	lr

00028afe <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28afe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28b00:	ab0b      	add	r3, sp, #44	; 0x2c
   28b02:	9305      	str	r3, [sp, #20]
   28b04:	9303      	str	r3, [sp, #12]
   28b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28b08:	9302      	str	r3, [sp, #8]
   28b0a:	2300      	movs	r3, #0
   28b0c:	4618      	mov	r0, r3
   28b0e:	e9cd 3300 	strd	r3, r3, [sp]
   28b12:	f7e6 fc0f 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   28b16:	b007      	add	sp, #28
   28b18:	f85d fb04 	ldr.w	pc, [sp], #4

00028b1c <addr_res_enable>:
{
   28b1c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   28b1e:	2101      	movs	r1, #1
{
   28b20:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   28b22:	f242 002d 	movw	r0, #8237	; 0x202d
   28b26:	f7ea f825 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   28b2a:	4604      	mov	r4, r0
   28b2c:	b158      	cbz	r0, 28b46 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   28b2e:	4629      	mov	r1, r5
   28b30:	300c      	adds	r0, #12
   28b32:	f001 fd58 	bl	2a5e6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   28b36:	4621      	mov	r1, r4
}
   28b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   28b3c:	2200      	movs	r2, #0
   28b3e:	f242 002d 	movw	r0, #8237	; 0x202d
   28b42:	f7ea b865 	b.w	12c10 <bt_hci_cmd_send_sync>
}
   28b46:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28b4a:	bd38      	pop	{r3, r4, r5, pc}

00028b4c <adv_unpause_enabled>:
{
   28b4c:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28b4e:	f100 0310 	add.w	r3, r0, #16
   28b52:	e8d3 2fef 	ldaex	r2, [r3]
   28b56:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   28b5a:	e8c3 1fe4 	stlex	r4, r1, [r3]
   28b5e:	2c00      	cmp	r4, #0
   28b60:	d1f7      	bne.n	28b52 <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   28b62:	0413      	lsls	r3, r2, #16
   28b64:	d503      	bpl.n	28b6e <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   28b66:	2101      	movs	r1, #1
}
   28b68:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   28b6a:	f000 b940 	b.w	28dee <bt_le_adv_set_enable>
}
   28b6e:	bc10      	pop	{r4}
   28b70:	4770      	bx	lr

00028b72 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   28b72:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28b76:	e8d3 2faf 	lda	r2, [r3]
   28b7a:	0612      	lsls	r2, r2, #24
   28b7c:	d50a      	bpl.n	28b94 <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28b7e:	e8d3 1fef 	ldaex	r1, [r3]
   28b82:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   28b86:	e8c3 1fe2 	stlex	r2, r1, [r3]
   28b8a:	2a00      	cmp	r2, #0
   28b8c:	d1f7      	bne.n	28b7e <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   28b8e:	2100      	movs	r1, #0
   28b90:	f000 b92d 	b.w	28dee <bt_le_adv_set_enable>
}
   28b94:	4770      	bx	lr

00028b96 <bt_lookup_id_addr>:
{
   28b96:	b510      	push	{r4, lr}
   28b98:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   28b9a:	b930      	cbnz	r0, 28baa <bt_lookup_id_addr+0x14>
   28b9c:	b119      	cbz	r1, 28ba6 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   28b9e:	f7f1 f821 	bl	19be4 <bt_keys_find_irk>
		if (keys) {
   28ba2:	b100      	cbz	r0, 28ba6 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   28ba4:	1c44      	adds	r4, r0, #1
}
   28ba6:	4620      	mov	r0, r4
   28ba8:	bd10      	pop	{r4, pc}
		return NULL;
   28baa:	2400      	movs	r4, #0
   28bac:	e7fb      	b.n	28ba6 <bt_lookup_id_addr+0x10>

00028bae <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   28bae:	b118      	cbz	r0, 28bb8 <bt_id_set_adv_random_addr+0xa>
   28bb0:	b111      	cbz	r1, 28bb8 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   28bb2:	4608      	mov	r0, r1
   28bb4:	f7ea bf0e 	b.w	139d4 <set_random_address>
}
   28bb8:	f06f 0015 	mvn.w	r0, #21
   28bbc:	4770      	bx	lr

00028bbe <bt_id_set_adv_private_addr>:
{
   28bbe:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   28bc0:	4604      	mov	r4, r0
   28bc2:	b180      	cbz	r0, 28be6 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   28bc4:	2106      	movs	r1, #6
   28bc6:	4668      	mov	r0, sp
   28bc8:	f7eb fe6c 	bl	148a4 <bt_rand>
	if (err) {
   28bcc:	b948      	cbnz	r0, 28be2 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   28bce:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   28bd2:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   28bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   28bd8:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   28bda:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   28bde:	f7ff ffe6 	bl	28bae <bt_id_set_adv_random_addr>
}
   28be2:	b002      	add	sp, #8
   28be4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   28be6:	f06f 0015 	mvn.w	r0, #21
   28bea:	e7fa      	b.n	28be2 <bt_id_set_adv_private_addr+0x24>

00028bec <bt_id_adv_random_addr_check>:
}
   28bec:	3800      	subs	r0, #0
   28bee:	bf18      	it	ne
   28bf0:	2001      	movne	r0, #1
   28bf2:	4770      	bx	lr

00028bf4 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   28bf4:	7a03      	ldrb	r3, [r0, #8]
   28bf6:	07d9      	lsls	r1, r3, #31
   28bf8:	d504      	bpl.n	28c04 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   28bfa:	f023 0301 	bic.w	r3, r3, #1
   28bfe:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   28c00:	f7ea bfa0 	b.w	13b44 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   28c04:	0799      	lsls	r1, r3, #30
   28c06:	d504      	bpl.n	28c12 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   28c08:	f023 0302 	bic.w	r3, r3, #2
   28c0c:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   28c0e:	f7eb b865 	b.w	13cdc <bt_id_del>
}
   28c12:	4770      	bx	lr

00028c14 <get_adv_channel_map>:
{
   28c14:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   28c16:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   28c1a:	bf0c      	ite	eq
   28c1c:	2007      	moveq	r0, #7
   28c1e:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   28c20:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   28c22:	bf48      	it	mi
   28c24:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   28c28:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   28c2a:	bf48      	it	mi
   28c2c:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   28c30:	4770      	bx	lr

00028c32 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28c32:	e8d0 0faf 	lda	r0, [r0]
}
   28c36:	4770      	bx	lr

00028c38 <atomic_and>:
{
   28c38:	4603      	mov	r3, r0
   28c3a:	b510      	push	{r4, lr}
}
   28c3c:	e8d3 0fef 	ldaex	r0, [r3]
   28c40:	ea00 0201 	and.w	r2, r0, r1
   28c44:	e8c3 2fe4 	stlex	r4, r2, [r3]
   28c48:	2c00      	cmp	r4, #0
   28c4a:	d1f7      	bne.n	28c3c <atomic_and+0x4>
   28c4c:	bd10      	pop	{r4, pc}

00028c4e <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28c4e:	680b      	ldr	r3, [r1, #0]
   28c50:	6003      	str	r3, [r0, #0]
   28c52:	888b      	ldrh	r3, [r1, #4]
   28c54:	8083      	strh	r3, [r0, #4]
   28c56:	798b      	ldrb	r3, [r1, #6]
   28c58:	7183      	strb	r3, [r0, #6]
   28c5a:	4770      	bx	lr

00028c5c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28c5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28c5e:	ab0b      	add	r3, sp, #44	; 0x2c
   28c60:	9305      	str	r3, [sp, #20]
   28c62:	9303      	str	r3, [sp, #12]
   28c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28c66:	9302      	str	r3, [sp, #8]
   28c68:	2300      	movs	r3, #0
   28c6a:	4618      	mov	r0, r3
   28c6c:	e9cd 3300 	strd	r3, r3, [sp]
   28c70:	f7e6 fb60 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   28c74:	b007      	add	sp, #28
   28c76:	f85d fb04 	ldr.w	pc, [sp], #4

00028c7a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28c7a:	2301      	movs	r3, #1
{
   28c7c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28c7e:	fa03 f101 	lsl.w	r1, r3, r1
{
   28c82:	4604      	mov	r4, r0
	if (val) {
   28c84:	b142      	cbz	r2, 28c98 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28c86:	e8d4 3fef 	ldaex	r3, [r4]
   28c8a:	430b      	orrs	r3, r1
   28c8c:	e8c4 3fe2 	stlex	r2, r3, [r4]
   28c90:	2a00      	cmp	r2, #0
   28c92:	d1f8      	bne.n	28c86 <atomic_set_bit_to+0xc>
	}
}
   28c94:	bc10      	pop	{r4}
   28c96:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28c98:	43c9      	mvns	r1, r1
}
   28c9a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28c9c:	f7ff bfcc 	b.w	28c38 <atomic_and>

00028ca0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   28ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ca4:	b087      	sub	sp, #28
   28ca6:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   28caa:	4605      	mov	r5, r0
   28cac:	460c      	mov	r4, r1
   28cae:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   28cb0:	2100      	movs	r1, #0
   28cb2:	2210      	movs	r2, #16
   28cb4:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   28cb6:	461f      	mov	r7, r3
   28cb8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   28cbc:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   28cc0:	f003 fa3e 	bl	2c140 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   28cc4:	b9ce      	cbnz	r6, 28cfa <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   28cc6:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   28cca:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   28ccc:	f242 0008 	movw	r0, #8200	; 0x2008
   28cd0:	a902      	add	r1, sp, #8
   28cd2:	f7eb fa71 	bl	141b8 <hci_set_ad>
		if (err) {
   28cd6:	4604      	mov	r4, r0
   28cd8:	b958      	cbnz	r0, 28cf2 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   28cda:	f1ba 0f00 	cmp.w	sl, #0
   28cde:	d13a      	bne.n	28d56 <le_adv_update.constprop.0+0xb6>
   28ce0:	3510      	adds	r5, #16
   28ce2:	e8d5 3fef 	ldaex	r3, [r5]
   28ce6:	f043 0304 	orr.w	r3, r3, #4
   28cea:	e8c5 3fe2 	stlex	r2, r3, [r5]
   28cee:	2a00      	cmp	r2, #0
   28cf0:	d1f7      	bne.n	28ce2 <le_adv_update.constprop.0+0x42>
}
   28cf2:	4620      	mov	r0, r4
   28cf4:	b007      	add	sp, #28
   28cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   28cfa:	f7ea fe21 	bl	13940 <bt_get_name>
   28cfe:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   28d00:	b9e4      	cbnz	r4, 28d3c <le_adv_update.constprop.0+0x9c>
   28d02:	bb37      	cbnz	r7, 28d52 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   28d04:	4658      	mov	r0, fp
   28d06:	f7e0 fb80 	bl	940a <strlen>
   28d0a:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   28d0c:	2e01      	cmp	r6, #1
		d[0].data = ad;
   28d0e:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   28d12:	f88d 3000 	strb.w	r3, [sp]
   28d16:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   28d1a:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   28d1e:	d1d4      	bne.n	28cca <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   28d20:	2202      	movs	r2, #2
			d[1].data = &data;
   28d22:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   28d26:	9605      	str	r6, [sp, #20]
			d_len = 2;
   28d28:	e7d0      	b.n	28ccc <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   28d2a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   28d2e:	3a08      	subs	r2, #8
   28d30:	2a01      	cmp	r2, #1
   28d32:	d924      	bls.n	28d7e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   28d34:	3301      	adds	r3, #1
   28d36:	4598      	cmp	r8, r3
   28d38:	d1f7      	bne.n	28d2a <le_adv_update.constprop.0+0x8a>
   28d3a:	e7e2      	b.n	28d02 <le_adv_update.constprop.0+0x62>
   28d3c:	2300      	movs	r3, #0
   28d3e:	e7fa      	b.n	28d36 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   28d40:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   28d44:	3a08      	subs	r2, #8
   28d46:	2a01      	cmp	r2, #1
   28d48:	d919      	bls.n	28d7e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   28d4a:	3301      	adds	r3, #1
   28d4c:	4599      	cmp	r9, r3
   28d4e:	d1f7      	bne.n	28d40 <le_adv_update.constprop.0+0xa0>
   28d50:	e7d8      	b.n	28d04 <le_adv_update.constprop.0+0x64>
   28d52:	2300      	movs	r3, #0
   28d54:	e7fa      	b.n	28d4c <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   28d56:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   28d58:	2e02      	cmp	r6, #2
			d[1].len = 1;
   28d5a:	bf08      	it	eq
   28d5c:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   28d5e:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   28d62:	bf08      	it	eq
   28d64:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   28d66:	a902      	add	r1, sp, #8
			d[1].data = &data;
   28d68:	bf08      	it	eq
   28d6a:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   28d6e:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   28d72:	f7eb fa21 	bl	141b8 <hci_set_ad>
		if (err) {
   28d76:	2800      	cmp	r0, #0
   28d78:	d0b2      	beq.n	28ce0 <le_adv_update.constprop.0+0x40>
   28d7a:	4604      	mov	r4, r0
   28d7c:	e7b9      	b.n	28cf2 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   28d7e:	f06f 0415 	mvn.w	r4, #21
   28d82:	e7b6      	b.n	28cf2 <le_adv_update.constprop.0+0x52>

00028d84 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   28d84:	6843      	ldr	r3, [r0, #4]
   28d86:	f013 0008 	ands.w	r0, r3, #8
   28d8a:	d00a      	beq.n	28da2 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   28d8c:	035a      	lsls	r2, r3, #13
   28d8e:	d407      	bmi.n	28da0 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   28d90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   28d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   28d98:	bf14      	ite	ne
   28d9a:	2002      	movne	r0, #2
   28d9c:	2001      	moveq	r0, #1
   28d9e:	4770      	bx	lr
   28da0:	2001      	movs	r0, #1
}
   28da2:	4770      	bx	lr

00028da4 <bt_le_adv_set_enable_legacy>:
{
   28da4:	b570      	push	{r4, r5, r6, lr}
   28da6:	4606      	mov	r6, r0
   28da8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   28daa:	f242 000a 	movw	r0, #8202	; 0x200a
   28dae:	2101      	movs	r1, #1
{
   28db0:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   28db2:	f7e9 fedf 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   28db6:	4604      	mov	r4, r0
   28db8:	b1b0      	cbz	r0, 28de8 <bt_le_adv_set_enable_legacy+0x44>
   28dba:	300c      	adds	r0, #12
	if (enable) {
   28dbc:	b195      	cbz	r5, 28de4 <bt_le_adv_set_enable_legacy+0x40>
   28dbe:	2101      	movs	r1, #1
   28dc0:	f001 fc11 	bl	2a5e6 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   28dc4:	4620      	mov	r0, r4
   28dc6:	f106 0210 	add.w	r2, r6, #16
   28dca:	a903      	add	r1, sp, #12
   28dcc:	2307      	movs	r3, #7
   28dce:	9500      	str	r5, [sp, #0]
   28dd0:	f7e9 febe 	bl	12b50 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   28dd4:	2200      	movs	r2, #0
   28dd6:	4621      	mov	r1, r4
   28dd8:	f242 000a 	movw	r0, #8202	; 0x200a
   28ddc:	f7e9 ff18 	bl	12c10 <bt_hci_cmd_send_sync>
}
   28de0:	b006      	add	sp, #24
   28de2:	bd70      	pop	{r4, r5, r6, pc}
   28de4:	4629      	mov	r1, r5
   28de6:	e7eb      	b.n	28dc0 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   28de8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28dec:	e7f8      	b.n	28de0 <bt_le_adv_set_enable_legacy+0x3c>

00028dee <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   28dee:	f7ff bfd9 	b.w	28da4 <bt_le_adv_set_enable_legacy>

00028df2 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   28df2:	3018      	adds	r0, #24
   28df4:	f7f8 bdde 	b.w	219b4 <k_work_cancel_delayable>

00028df8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28df8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28dfa:	ab0b      	add	r3, sp, #44	; 0x2c
   28dfc:	9305      	str	r3, [sp, #20]
   28dfe:	9303      	str	r3, [sp, #12]
   28e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28e02:	2201      	movs	r2, #1
   28e04:	9302      	str	r3, [sp, #8]
   28e06:	2300      	movs	r3, #0
   28e08:	4618      	mov	r0, r3
   28e0a:	e9cd 3300 	strd	r3, r3, [sp]
   28e0e:	f7e6 fa91 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   28e12:	b007      	add	sp, #28
   28e14:	f85d fb04 	ldr.w	pc, [sp], #4

00028e18 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   28e18:	b530      	push	{r4, r5, lr}
   28e1a:	460d      	mov	r5, r1
   28e1c:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   28e1e:	4601      	mov	r1, r0
{
   28e20:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   28e22:	b310      	cbz	r0, 28e6a <bt_encrypt_le+0x52>
   28e24:	b30d      	cbz	r5, 28e6a <bt_encrypt_le+0x52>
   28e26:	b302      	cbz	r2, 28e6a <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   28e28:	4668      	mov	r0, sp
   28e2a:	f7eb fce9 	bl	14800 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   28e2e:	4669      	mov	r1, sp
   28e30:	a804      	add	r0, sp, #16
   28e32:	f7e7 ff85 	bl	10d40 <tc_aes128_set_encrypt_key>
   28e36:	b1c0      	cbz	r0, 28e6a <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   28e38:	4629      	mov	r1, r5
   28e3a:	4668      	mov	r0, sp
   28e3c:	f7eb fce0 	bl	14800 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   28e40:	4669      	mov	r1, sp
   28e42:	4620      	mov	r0, r4
   28e44:	aa04      	add	r2, sp, #16
   28e46:	f7ff f88e 	bl	27f66 <tc_aes_encrypt>
   28e4a:	b170      	cbz	r0, 28e6a <bt_encrypt_le+0x52>
   28e4c:	1e63      	subs	r3, r4, #1
   28e4e:	f104 0210 	add.w	r2, r4, #16
   28e52:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   28e54:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28e58:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   28e5c:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28e5e:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28e60:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   28e62:	d1f7      	bne.n	28e54 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   28e64:	2000      	movs	r0, #0
}
   28e66:	b031      	add	sp, #196	; 0xc4
   28e68:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   28e6a:	f06f 0015 	mvn.w	r0, #21
   28e6e:	e7fa      	b.n	28e66 <bt_encrypt_le+0x4e>

00028e70 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28e70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28e72:	ab0b      	add	r3, sp, #44	; 0x2c
   28e74:	9305      	str	r3, [sp, #20]
   28e76:	9303      	str	r3, [sp, #12]
   28e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28e7a:	9302      	str	r3, [sp, #8]
   28e7c:	2300      	movs	r3, #0
   28e7e:	4618      	mov	r0, r3
   28e80:	e9cd 3300 	strd	r3, r3, [sp]
   28e84:	f7e6 fa56 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   28e88:	b007      	add	sp, #28
   28e8a:	f85d fb04 	ldr.w	pc, [sp], #4

00028e8e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28e8e:	2200      	movs	r2, #0
	return list->head;
   28e90:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28e92:	b90b      	cbnz	r3, 28e98 <sys_slist_find_and_remove+0xa>
   28e94:	4618      	mov	r0, r3
   28e96:	4770      	bx	lr
   28e98:	428b      	cmp	r3, r1
   28e9a:	d110      	bne.n	28ebe <sys_slist_find_and_remove+0x30>
	return node->next;
   28e9c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   28e9e:	b942      	cbnz	r2, 28eb2 <sys_slist_find_and_remove+0x24>
   28ea0:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   28ea2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   28ea4:	4291      	cmp	r1, r2
   28ea6:	d100      	bne.n	28eaa <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   28ea8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   28eaa:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28eac:	2001      	movs	r0, #1
	parent->next = child;
   28eae:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   28eb0:	4770      	bx	lr
	parent->next = child;
   28eb2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   28eb4:	6843      	ldr	r3, [r0, #4]
   28eb6:	4299      	cmp	r1, r3
	list->tail = node;
   28eb8:	bf08      	it	eq
   28eba:	6042      	streq	r2, [r0, #4]
}
   28ebc:	e7f5      	b.n	28eaa <sys_slist_find_and_remove+0x1c>
	return node->next;
   28ebe:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28ec0:	681b      	ldr	r3, [r3, #0]
   28ec2:	e7e6      	b.n	28e92 <sys_slist_find_and_remove+0x4>

00028ec4 <atomic_and>:
{
   28ec4:	4603      	mov	r3, r0
   28ec6:	b510      	push	{r4, lr}
}
   28ec8:	e8d3 0fef 	ldaex	r0, [r3]
   28ecc:	ea00 0201 	and.w	r2, r0, r1
   28ed0:	e8c3 2fe4 	stlex	r4, r2, [r3]
   28ed4:	2c00      	cmp	r4, #0
   28ed6:	d1f7      	bne.n	28ec8 <atomic_and+0x4>
   28ed8:	bd10      	pop	{r4, pc}

00028eda <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28eda:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28edc:	ab0b      	add	r3, sp, #44	; 0x2c
   28ede:	9305      	str	r3, [sp, #20]
   28ee0:	9303      	str	r3, [sp, #12]
   28ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28ee4:	9302      	str	r3, [sp, #8]
   28ee6:	2300      	movs	r3, #0
   28ee8:	4618      	mov	r0, r3
   28eea:	e9cd 3300 	strd	r3, r3, [sp]
   28eee:	f7e6 fa21 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   28ef2:	b007      	add	sp, #28
   28ef4:	f85d fb04 	ldr.w	pc, [sp], #4

00028ef8 <tx_complete_work>:
	tx_notify(conn);
   28ef8:	3828      	subs	r0, #40	; 0x28
   28efa:	f7eb be63 	b.w	14bc4 <tx_notify>

00028efe <bt_conn_reset_rx_state>:
{
   28efe:	b510      	push	{r4, lr}
   28f00:	4604      	mov	r4, r0
	if (!conn->rx) {
   28f02:	6900      	ldr	r0, [r0, #16]
   28f04:	b118      	cbz	r0, 28f0e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   28f06:	f7f1 fa51 	bl	1a3ac <net_buf_unref>
	conn->rx = NULL;
   28f0a:	2300      	movs	r3, #0
   28f0c:	6123      	str	r3, [r4, #16]
}
   28f0e:	bd10      	pop	{r4, pc}

00028f10 <conn_lookup_handle>:
{
   28f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28f14:	4607      	mov	r7, r0
   28f16:	460e      	mov	r6, r1
   28f18:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   28f1a:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28f1c:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   28f20:	42b4      	cmp	r4, r6
   28f22:	d103      	bne.n	28f2c <conn_lookup_handle+0x1c>
	return NULL;
   28f24:	2300      	movs	r3, #0
}
   28f26:	4618      	mov	r0, r3
   28f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28f2c:	fb09 7004 	mla	r0, r9, r4, r7
   28f30:	f7ec f8fa 	bl	15128 <bt_conn_ref>
   28f34:	4603      	mov	r3, r0
		if (!conn) {
   28f36:	b158      	cbz	r0, 28f50 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   28f38:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   28f3a:	2d01      	cmp	r5, #1
   28f3c:	d002      	beq.n	28f44 <conn_lookup_handle+0x34>
   28f3e:	3d07      	subs	r5, #7
   28f40:	2d01      	cmp	r5, #1
   28f42:	d803      	bhi.n	28f4c <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   28f44:	881a      	ldrh	r2, [r3, #0]
   28f46:	4542      	cmp	r2, r8
   28f48:	d0ed      	beq.n	28f26 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   28f4a:	4618      	mov	r0, r3
   28f4c:	f7ec f914 	bl	15178 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   28f50:	3401      	adds	r4, #1
   28f52:	e7e5      	b.n	28f20 <conn_lookup_handle+0x10>

00028f54 <bt_conn_connected>:
{
   28f54:	b510      	push	{r4, lr}
   28f56:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   28f58:	f7ec fe48 	bl	15bec <bt_l2cap_connected>
	notify_connected(conn);
   28f5c:	4620      	mov	r0, r4
}
   28f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   28f62:	f7eb bdf9 	b.w	14b58 <notify_connected>

00028f66 <bt_conn_disconnect>:
{
   28f66:	b510      	push	{r4, lr}
	switch (conn->state) {
   28f68:	7b43      	ldrb	r3, [r0, #13]
{
   28f6a:	4604      	mov	r4, r0
	switch (conn->state) {
   28f6c:	3b02      	subs	r3, #2
   28f6e:	2b06      	cmp	r3, #6
   28f70:	d816      	bhi.n	28fa0 <bt_conn_disconnect+0x3a>
   28f72:	e8df f003 	tbb	[pc, r3]
   28f76:	1504      	.short	0x1504
   28f78:	0b091515 	.word	0x0b091515
   28f7c:	09          	.byte	0x09
   28f7d:	00          	.byte	0x00
		conn->err = reason;
   28f7e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   28f80:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   28f82:	4620      	mov	r0, r4
   28f84:	f7ec f930 	bl	151e8 <bt_conn_set_state>
{
   28f88:	2000      	movs	r0, #0
}
   28f8a:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   28f8c:	8800      	ldrh	r0, [r0, #0]
   28f8e:	f7ff fcd5 	bl	2893c <bt_hci_disconnect>
	if (err) {
   28f92:	2800      	cmp	r0, #0
   28f94:	d1f9      	bne.n	28f8a <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   28f96:	7b63      	ldrb	r3, [r4, #13]
   28f98:	2b07      	cmp	r3, #7
   28f9a:	d1f5      	bne.n	28f88 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   28f9c:	2108      	movs	r1, #8
   28f9e:	e7f0      	b.n	28f82 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   28fa0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28fa4:	e7f1      	b.n	28f8a <bt_conn_disconnect+0x24>

00028fa6 <bt_conn_set_security>:
{
   28fa6:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   28fa8:	7b43      	ldrb	r3, [r0, #13]
{
   28faa:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   28fac:	2b07      	cmp	r3, #7
{
   28fae:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   28fb0:	d122      	bne.n	28ff8 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   28fb2:	7a43      	ldrb	r3, [r0, #9]
   28fb4:	428b      	cmp	r3, r1
   28fb6:	d215      	bcs.n	28fe4 <bt_conn_set_security+0x3e>
   28fb8:	7a83      	ldrb	r3, [r0, #10]
   28fba:	428b      	cmp	r3, r1
   28fbc:	d212      	bcs.n	28fe4 <bt_conn_set_security+0x3e>
	if (val) {
   28fbe:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   28fc0:	f100 0004 	add.w	r0, r0, #4
   28fc4:	d510      	bpl.n	28fe8 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28fc6:	e8d0 3fef 	ldaex	r3, [r0]
   28fca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   28fce:	e8c0 3fe2 	stlex	r2, r3, [r0]
   28fd2:	2a00      	cmp	r2, #0
   28fd4:	d1f7      	bne.n	28fc6 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   28fd6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   28fda:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   28fdc:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   28fde:	f7ef ffa5 	bl	18f2c <bt_smp_start_security>
	if (err) {
   28fe2:	b930      	cbnz	r0, 28ff2 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   28fe4:	2000      	movs	r0, #0
}
   28fe6:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28fe8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   28fec:	f7ff ff6a 	bl	28ec4 <atomic_and>
   28ff0:	e7f1      	b.n	28fd6 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   28ff2:	7a63      	ldrb	r3, [r4, #9]
   28ff4:	72a3      	strb	r3, [r4, #10]
   28ff6:	e7f6      	b.n	28fe6 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   28ff8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28ffc:	e7f3      	b.n	28fe6 <bt_conn_set_security+0x40>

00028ffe <bt_conn_get_security>:
}
   28ffe:	7a40      	ldrb	r0, [r0, #9]
   29000:	4770      	bx	lr

00029002 <bt_conn_is_peer_addr_le>:
{
   29002:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   29004:	7a03      	ldrb	r3, [r0, #8]
{
   29006:	4604      	mov	r4, r0
	if (id != conn->id) {
   29008:	428b      	cmp	r3, r1
{
   2900a:	4615      	mov	r5, r2
	if (id != conn->id) {
   2900c:	d115      	bne.n	2903a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2900e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   29012:	2207      	movs	r2, #7
   29014:	4628      	mov	r0, r5
   29016:	f003 f849 	bl	2c0ac <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2901a:	b180      	cbz	r0, 2903e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2901c:	78e3      	ldrb	r3, [r4, #3]
   2901e:	2207      	movs	r2, #7
   29020:	b943      	cbnz	r3, 29034 <bt_conn_is_peer_addr_le+0x32>
   29022:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   29026:	4628      	mov	r0, r5
   29028:	f003 f840 	bl	2c0ac <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2902c:	fab0 f080 	clz	r0, r0
   29030:	0940      	lsrs	r0, r0, #5
}
   29032:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   29034:	f104 0197 	add.w	r1, r4, #151	; 0x97
   29038:	e7f5      	b.n	29026 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2903a:	2000      	movs	r0, #0
   2903c:	e7f9      	b.n	29032 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2903e:	2001      	movs	r0, #1
   29040:	e7f7      	b.n	29032 <bt_conn_is_peer_addr_le+0x30>

00029042 <bt_conn_get_dst>:
}
   29042:	3090      	adds	r0, #144	; 0x90
   29044:	4770      	bx	lr

00029046 <bt_conn_le_conn_update>:
{
   29046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29048:	4607      	mov	r7, r0
   2904a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2904c:	f242 0013 	movw	r0, #8211	; 0x2013
   29050:	210e      	movs	r1, #14
   29052:	f7e9 fd8f 	bl	12b74 <bt_hci_cmd_create>
	if (!buf) {
   29056:	4606      	mov	r6, r0
   29058:	b1d0      	cbz	r0, 29090 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2905a:	210e      	movs	r1, #14
   2905c:	300c      	adds	r0, #12
   2905e:	f7f1 fac7 	bl	1a5f0 <net_buf_simple_add>
   29062:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   29064:	220e      	movs	r2, #14
   29066:	2100      	movs	r1, #0
   29068:	f003 f86a 	bl	2c140 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2906c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2906e:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   29070:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   29072:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   29074:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   29076:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   29078:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2907a:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2907e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   29080:	88ab      	ldrh	r3, [r5, #4]
   29082:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   29084:	88eb      	ldrh	r3, [r5, #6]
   29086:	8123      	strh	r3, [r4, #8]
}
   29088:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2908c:	f7e9 bdc0 	b.w	12c10 <bt_hci_cmd_send_sync>
}
   29090:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029096 <l2cap_connected>:
}
   29096:	4770      	bx	lr

00029098 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29098:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2909a:	ab0b      	add	r3, sp, #44	; 0x2c
   2909c:	9305      	str	r3, [sp, #20]
   2909e:	9303      	str	r3, [sp, #12]
   290a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   290a2:	9302      	str	r3, [sp, #8]
   290a4:	2300      	movs	r3, #0
   290a6:	4618      	mov	r0, r3
   290a8:	e9cd 3300 	strd	r3, r3, [sp]
   290ac:	f7e6 f942 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   290b0:	b007      	add	sp, #28
   290b2:	f85d fb04 	ldr.w	pc, [sp], #4

000290b6 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   290b6:	4770      	bx	lr

000290b8 <bt_l2cap_chan_del>:
{
   290b8:	b570      	push	{r4, r5, r6, lr}
   290ba:	4604      	mov	r4, r0
	if (!chan->conn) {
   290bc:	e9d0 3500 	ldrd	r3, r5, [r0]
   290c0:	b123      	cbz	r3, 290cc <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   290c2:	686b      	ldr	r3, [r5, #4]
   290c4:	b103      	cbz	r3, 290c8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   290c6:	4798      	blx	r3
	chan->conn = NULL;
   290c8:	2300      	movs	r3, #0
   290ca:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   290cc:	68e3      	ldr	r3, [r4, #12]
   290ce:	b10b      	cbz	r3, 290d4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   290d0:	4620      	mov	r0, r4
   290d2:	4798      	blx	r3
	if (ops->released) {
   290d4:	6a2b      	ldr	r3, [r5, #32]
   290d6:	b11b      	cbz	r3, 290e0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   290d8:	4620      	mov	r0, r4
}
   290da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   290de:	4718      	bx	r3
}
   290e0:	bd70      	pop	{r4, r5, r6, pc}

000290e2 <bt_l2cap_disconnected>:
{
   290e2:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   290e4:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   290e6:	b130      	cbz	r0, 290f6 <bt_l2cap_disconnected+0x14>
	return node->next;
   290e8:	f850 4908 	ldr.w	r4, [r0], #-8
   290ec:	b104      	cbz	r4, 290f0 <bt_l2cap_disconnected+0xe>
   290ee:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   290f0:	f7ff ffe2 	bl	290b8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   290f4:	b904      	cbnz	r4, 290f8 <bt_l2cap_disconnected+0x16>
}
   290f6:	bd38      	pop	{r3, r4, r5, pc}
   290f8:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   290fa:	b12d      	cbz	r5, 29108 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   290fc:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   290fe:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   29100:	f7ff ffda 	bl	290b8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29104:	462c      	mov	r4, r5
   29106:	e7f7      	b.n	290f8 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   29108:	4620      	mov	r0, r4
}
   2910a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2910e:	f7ff bfd3 	b.w	290b8 <bt_l2cap_chan_del>

00029112 <bt_l2cap_security_changed>:
{
   29112:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   29114:	6d43      	ldr	r3, [r0, #84]	; 0x54
   29116:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29118:	b1bb      	cbz	r3, 2914a <bt_l2cap_security_changed+0x38>
   2911a:	4618      	mov	r0, r3
	return node->next;
   2911c:	f850 4908 	ldr.w	r4, [r0], #-8
   29120:	b104      	cbz	r4, 29124 <bt_l2cap_security_changed+0x12>
   29122:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   29124:	f853 3c04 	ldr.w	r3, [r3, #-4]
   29128:	689b      	ldr	r3, [r3, #8]
   2912a:	b10b      	cbz	r3, 29130 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2912c:	4629      	mov	r1, r5
   2912e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29130:	b15c      	cbz	r4, 2914a <bt_l2cap_security_changed+0x38>
   29132:	4620      	mov	r0, r4
   29134:	68a4      	ldr	r4, [r4, #8]
   29136:	6843      	ldr	r3, [r0, #4]
   29138:	b124      	cbz	r4, 29144 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2913a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2913c:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2913e:	2b00      	cmp	r3, #0
   29140:	d1f4      	bne.n	2912c <bt_l2cap_security_changed+0x1a>
   29142:	e7f6      	b.n	29132 <bt_l2cap_security_changed+0x20>
   29144:	689b      	ldr	r3, [r3, #8]
   29146:	2b00      	cmp	r3, #0
   29148:	d1f0      	bne.n	2912c <bt_l2cap_security_changed+0x1a>
}
   2914a:	bd38      	pop	{r3, r4, r5, pc}

0002914c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2914c:	3104      	adds	r1, #4
   2914e:	f7ec b955 	b.w	153fc <bt_conn_create_pdu_timeout>

00029152 <bt_l2cap_send_cb>:
{
   29152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29156:	4614      	mov	r4, r2
   29158:	4605      	mov	r5, r0
   2915a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2915c:	f102 000c 	add.w	r0, r2, #12
   29160:	2104      	movs	r1, #4
   29162:	461e      	mov	r6, r3
   29164:	f8dd 8018 	ldr.w	r8, [sp, #24]
   29168:	f7f1 f9e6 	bl	1a538 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2916c:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2916e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   29170:	3a04      	subs	r2, #4
   29172:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   29174:	4643      	mov	r3, r8
   29176:	4632      	mov	r2, r6
   29178:	4621      	mov	r1, r4
   2917a:	4628      	mov	r0, r5
}
   2917c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   29180:	f7eb bf32 	b.w	14fe8 <bt_conn_send_cb>

00029184 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   29184:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29186:	b128      	cbz	r0, 29194 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   29188:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2918a:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2918c:	428b      	cmp	r3, r1
   2918e:	d001      	beq.n	29194 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   29190:	6880      	ldr	r0, [r0, #8]
   29192:	e7f8      	b.n	29186 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   29194:	4770      	bx	lr

00029196 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   29196:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29198:	b128      	cbz	r0, 291a6 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2919a:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2919c:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2919e:	428b      	cmp	r3, r1
   291a0:	d001      	beq.n	291a6 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   291a2:	6880      	ldr	r0, [r0, #8]
   291a4:	e7f8      	b.n	29198 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   291a6:	4770      	bx	lr

000291a8 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   291a8:	4770      	bx	lr

000291aa <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   291aa:	4603      	mov	r3, r0
	return list->head;
   291ac:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   291ae:	b128      	cbz	r0, 291bc <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   291b0:	6859      	ldr	r1, [r3, #4]
	return node->next;
   291b2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   291b4:	4288      	cmp	r0, r1
	list->head = node;
   291b6:	601a      	str	r2, [r3, #0]
	list->tail = node;
   291b8:	bf08      	it	eq
   291ba:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   291bc:	4770      	bx	lr

000291be <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   291be:	4603      	mov	r3, r0
	size_t bytes = 0;
   291c0:	2000      	movs	r0, #0

	while (buf) {
   291c2:	b903      	cbnz	r3, 291c6 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   291c4:	4770      	bx	lr
		bytes += buf->len;
   291c6:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   291c8:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   291ca:	4410      	add	r0, r2
		buf = buf->frags;
   291cc:	e7f9      	b.n	291c2 <net_buf_frags_len+0x4>

000291ce <attr_read_type_cb>:
{
   291ce:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   291d0:	68d4      	ldr	r4, [r2, #12]
   291d2:	3102      	adds	r1, #2
   291d4:	7823      	ldrb	r3, [r4, #0]
   291d6:	b913      	cbnz	r3, 291de <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   291d8:	7021      	strb	r1, [r4, #0]
	return true;
   291da:	2001      	movs	r0, #1
}
   291dc:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   291de:	428b      	cmp	r3, r1
   291e0:	d0fb      	beq.n	291da <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   291e2:	8a03      	ldrh	r3, [r0, #16]
   291e4:	3b02      	subs	r3, #2
   291e6:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   291e8:	2000      	movs	r0, #0
   291ea:	6110      	str	r0, [r2, #16]
		return false;
   291ec:	e7f6      	b.n	291dc <attr_read_type_cb+0xe>

000291ee <att_prepare_write_req>:
}
   291ee:	2006      	movs	r0, #6
   291f0:	4770      	bx	lr

000291f2 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   291f2:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   291f6:	4108      	asrs	r0, r1
}
   291f8:	f000 0001 	and.w	r0, r0, #1
   291fc:	4770      	bx	lr

000291fe <write_cb>:
{
   291fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29200:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   29202:	4601      	mov	r1, r0
{
   29204:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   29206:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2920a:	6820      	ldr	r0, [r4, #0]
   2920c:	f000 fddc 	bl	29dc8 <bt_gatt_check_perm>
   29210:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   29212:	bb00      	cbnz	r0, 29256 <write_cb+0x58>
	if (!data->req) {
   29214:	7a23      	ldrb	r3, [r4, #8]
   29216:	b1b3      	cbz	r3, 29246 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   29218:	f1a3 0218 	sub.w	r2, r3, #24
   2921c:	4253      	negs	r3, r2
   2921e:	4153      	adcs	r3, r2
   29220:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   29222:	9301      	str	r3, [sp, #4]
   29224:	8a63      	ldrh	r3, [r4, #18]
   29226:	4629      	mov	r1, r5
   29228:	9300      	str	r3, [sp, #0]
   2922a:	68ae      	ldr	r6, [r5, #8]
   2922c:	8a23      	ldrh	r3, [r4, #16]
   2922e:	68e2      	ldr	r2, [r4, #12]
   29230:	6820      	ldr	r0, [r4, #0]
   29232:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   29234:	2800      	cmp	r0, #0
   29236:	db08      	blt.n	2924a <write_cb+0x4c>
   29238:	8a23      	ldrh	r3, [r4, #16]
   2923a:	4283      	cmp	r3, r0
   2923c:	d10e      	bne.n	2925c <write_cb+0x5e>
	data->err = 0U;
   2923e:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   29240:	2001      	movs	r0, #1
	data->err = 0U;
   29242:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   29244:	e008      	b.n	29258 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   29246:	2302      	movs	r3, #2
   29248:	e7eb      	b.n	29222 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2924a:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2924e:	d305      	bcc.n	2925c <write_cb+0x5e>
		return -err;
   29250:	4240      	negs	r0, r0
   29252:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   29254:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   29256:	2000      	movs	r0, #0
}
   29258:	b002      	add	sp, #8
   2925a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2925c:	200e      	movs	r0, #14
   2925e:	e7f9      	b.n	29254 <write_cb+0x56>

00029260 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   29260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   29262:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29266:	2300      	movs	r3, #0
   29268:	461a      	mov	r2, r3
   2926a:	9300      	str	r3, [sp, #0]
   2926c:	f7ee f9ae 	bl	175cc <bt_gatt_foreach_attr_type>
				  user_data);
}
   29270:	b005      	add	sp, #20
   29272:	f85d fb04 	ldr.w	pc, [sp], #4

00029276 <att_chan_mtu_updated>:
{
   29276:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   29278:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2927a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2927c:	b352      	cbz	r2, 292d4 <att_chan_mtu_updated+0x5e>
	return node->next;
   2927e:	6813      	ldr	r3, [r2, #0]
   29280:	b103      	cbz	r3, 29284 <att_chan_mtu_updated+0xe>
   29282:	3bf0      	subs	r3, #240	; 0xf0
   29284:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   29288:	2200      	movs	r2, #0
   2928a:	4611      	mov	r1, r2
   2928c:	e000      	b.n	29290 <att_chan_mtu_updated+0x1a>
   2928e:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   29290:	4284      	cmp	r4, r0
   29292:	d007      	beq.n	292a4 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   29294:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   29296:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   29298:	42b1      	cmp	r1, r6
   2929a:	bf38      	it	cc
   2929c:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2929e:	42a2      	cmp	r2, r4
   292a0:	bf38      	it	cc
   292a2:	4622      	movcc	r2, r4
   292a4:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   292a6:	b12b      	cbz	r3, 292b4 <att_chan_mtu_updated+0x3e>
   292a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   292ac:	2b00      	cmp	r3, #0
   292ae:	d1ee      	bne.n	2928e <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   292b0:	4284      	cmp	r4, r0
   292b2:	d1ef      	bne.n	29294 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   292b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   292b6:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   292b8:	428b      	cmp	r3, r1
   292ba:	d801      	bhi.n	292c0 <att_chan_mtu_updated+0x4a>
   292bc:	4290      	cmp	r0, r2
   292be:	d90b      	bls.n	292d8 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   292c0:	4282      	cmp	r2, r0
   292c2:	bf38      	it	cc
   292c4:	4602      	movcc	r2, r0
   292c6:	4299      	cmp	r1, r3
   292c8:	6828      	ldr	r0, [r5, #0]
   292ca:	bf38      	it	cc
   292cc:	4619      	movcc	r1, r3
}
   292ce:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   292d0:	f7ee bf1a 	b.w	18108 <bt_gatt_att_max_mtu_changed>
   292d4:	4611      	mov	r1, r2
   292d6:	e7ed      	b.n	292b4 <att_chan_mtu_updated+0x3e>
}
   292d8:	bc70      	pop	{r4, r5, r6}
   292da:	4770      	bx	lr

000292dc <attr_read_group_cb>:
	if (!data->rsp->len) {
   292dc:	68d0      	ldr	r0, [r2, #12]
   292de:	3104      	adds	r1, #4
   292e0:	7803      	ldrb	r3, [r0, #0]
   292e2:	b913      	cbnz	r3, 292ea <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   292e4:	7001      	strb	r1, [r0, #0]
	return true;
   292e6:	2001      	movs	r0, #1
   292e8:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   292ea:	428b      	cmp	r3, r1
   292ec:	d0fb      	beq.n	292e6 <attr_read_group_cb+0xa>
		data->group = NULL;
   292ee:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   292f0:	6891      	ldr	r1, [r2, #8]
   292f2:	8a0b      	ldrh	r3, [r1, #16]
   292f4:	3b04      	subs	r3, #4
   292f6:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   292f8:	6110      	str	r0, [r2, #16]
}
   292fa:	4770      	bx	lr

000292fc <find_info_cb>:
{
   292fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   292fe:	6893      	ldr	r3, [r2, #8]
{
   29300:	4605      	mov	r5, r0
   29302:	460f      	mov	r7, r1
   29304:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   29306:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   29308:	b963      	cbnz	r3, 29324 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2930a:	6850      	ldr	r0, [r2, #4]
   2930c:	2101      	movs	r1, #1
   2930e:	300c      	adds	r0, #12
   29310:	f7f1 f96e 	bl	1a5f0 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   29314:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29316:	682b      	ldr	r3, [r5, #0]
   29318:	781b      	ldrb	r3, [r3, #0]
   2931a:	2b00      	cmp	r3, #0
   2931c:	bf14      	ite	ne
   2931e:	2302      	movne	r3, #2
   29320:	2301      	moveq	r3, #1
   29322:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   29324:	68a3      	ldr	r3, [r4, #8]
   29326:	781b      	ldrb	r3, [r3, #0]
   29328:	2b01      	cmp	r3, #1
   2932a:	d003      	beq.n	29334 <find_info_cb+0x38>
   2932c:	2b02      	cmp	r3, #2
   2932e:	d019      	beq.n	29364 <find_info_cb+0x68>
   29330:	2000      	movs	r0, #0
   29332:	e016      	b.n	29362 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   29334:	682b      	ldr	r3, [r5, #0]
   29336:	781b      	ldrb	r3, [r3, #0]
   29338:	2b00      	cmp	r3, #0
   2933a:	d1f9      	bne.n	29330 <find_info_cb+0x34>
   2933c:	6860      	ldr	r0, [r4, #4]
   2933e:	2104      	movs	r1, #4
   29340:	300c      	adds	r0, #12
   29342:	f7f1 f955 	bl	1a5f0 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   29346:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   29348:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2934a:	682a      	ldr	r2, [r5, #0]
   2934c:	68e3      	ldr	r3, [r4, #12]
   2934e:	8852      	ldrh	r2, [r2, #2]
   29350:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   29352:	6863      	ldr	r3, [r4, #4]
   29354:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   29356:	8a1b      	ldrh	r3, [r3, #16]
   29358:	1ac0      	subs	r0, r0, r3
   2935a:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2935c:	bf94      	ite	ls
   2935e:	2000      	movls	r0, #0
   29360:	2001      	movhi	r0, #1
}
   29362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   29364:	682b      	ldr	r3, [r5, #0]
   29366:	781b      	ldrb	r3, [r3, #0]
   29368:	2b02      	cmp	r3, #2
   2936a:	d1e1      	bne.n	29330 <find_info_cb+0x34>
   2936c:	6860      	ldr	r0, [r4, #4]
   2936e:	2112      	movs	r1, #18
   29370:	300c      	adds	r0, #12
   29372:	f7f1 f93d 	bl	1a5f0 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   29376:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   29378:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2937a:	682b      	ldr	r3, [r5, #0]
   2937c:	68e2      	ldr	r2, [r4, #12]
   2937e:	1c59      	adds	r1, r3, #1
   29380:	3202      	adds	r2, #2
   29382:	3311      	adds	r3, #17
   29384:	f851 0b04 	ldr.w	r0, [r1], #4
   29388:	4299      	cmp	r1, r3
   2938a:	f842 0b04 	str.w	r0, [r2], #4
   2938e:	d1f9      	bne.n	29384 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   29390:	6863      	ldr	r3, [r4, #4]
   29392:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   29394:	8a1b      	ldrh	r3, [r3, #16]
   29396:	1ac0      	subs	r0, r0, r3
   29398:	2812      	cmp	r0, #18
   2939a:	e7df      	b.n	2935c <find_info_cb+0x60>

0002939c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2939c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2939e:	ab0b      	add	r3, sp, #44	; 0x2c
   293a0:	9305      	str	r3, [sp, #20]
   293a2:	9303      	str	r3, [sp, #12]
   293a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   293a6:	9302      	str	r3, [sp, #8]
   293a8:	2300      	movs	r3, #0
   293aa:	4618      	mov	r0, r3
   293ac:	e9cd 3300 	strd	r3, r3, [sp]
   293b0:	f7e5 ffc0 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   293b4:	b007      	add	sp, #28
   293b6:	f85d fb04 	ldr.w	pc, [sp], #4

000293ba <chan_req_send>:
{
   293ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   293bc:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   293be:	6888      	ldr	r0, [r1, #8]
   293c0:	f7ff fefd 	bl	291be <net_buf_frags_len>
   293c4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   293c6:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   293c8:	4283      	cmp	r3, r0
   293ca:	d30d      	bcc.n	293e8 <chan_req_send+0x2e>
	req->buf = NULL;
   293cc:	2600      	movs	r6, #0
	chan->req = req;
   293ce:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   293d2:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   293d4:	4628      	mov	r0, r5
	req->buf = NULL;
   293d6:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   293d8:	4639      	mov	r1, r7
   293da:	f7ec fe4f 	bl	1607c <chan_send>
	if (err) {
   293de:	b110      	cbz	r0, 293e6 <chan_req_send+0x2c>
		req->buf = buf;
   293e0:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   293e2:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   293e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   293e8:	f06f 0079 	mvn.w	r0, #121	; 0x79
   293ec:	e7fb      	b.n	293e6 <chan_req_send+0x2c>

000293ee <process_queue>:
{
   293ee:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   293f0:	2200      	movs	r2, #0
{
   293f2:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   293f4:	2300      	movs	r3, #0
   293f6:	4608      	mov	r0, r1
{
   293f8:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   293fa:	f001 f8cb 	bl	2a594 <net_buf_get>
	if (buf) {
   293fe:	4605      	mov	r5, r0
   29400:	b158      	cbz	r0, 2941a <process_queue+0x2c>
	return chan_send(chan, buf);
   29402:	4601      	mov	r1, r0
   29404:	4620      	mov	r0, r4
   29406:	f7ec fe39 	bl	1607c <chan_send>
		if (err) {
   2940a:	4604      	mov	r4, r0
   2940c:	b118      	cbz	r0, 29416 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2940e:	4629      	mov	r1, r5
   29410:	4630      	mov	r0, r6
   29412:	f002 fc96 	bl	2bd42 <k_queue_prepend>
}
   29416:	4620      	mov	r0, r4
   29418:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2941a:	f06f 0401 	mvn.w	r4, #1
   2941e:	e7fa      	b.n	29416 <process_queue+0x28>

00029420 <bt_att_chan_send_rsp>:
{
   29420:	b538      	push	{r3, r4, r5, lr}
   29422:	4604      	mov	r4, r0
   29424:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   29426:	f7ec fe29 	bl	1607c <chan_send>
	if (err) {
   2942a:	b130      	cbz	r0, 2943a <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2942c:	4629      	mov	r1, r5
   2942e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   29432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   29436:	f7f0 bf93 	b.w	1a360 <net_buf_put>
}
   2943a:	bd38      	pop	{r3, r4, r5, pc}

0002943c <att_chan_read>:
{
   2943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29440:	4680      	mov	r8, r0
   29442:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29444:	4610      	mov	r0, r2
{
   29446:	4699      	mov	r9, r3
   29448:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2944a:	f7ff feb8 	bl	291be <net_buf_frags_len>
   2944e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   29452:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29454:	4283      	cmp	r3, r0
   29456:	d97a      	bls.n	2954e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   29458:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   2945c:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   2945e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   29460:	f7f1 f800 	bl	1a464 <net_buf_frag_last>
	size_t len, total = 0;
   29464:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   29468:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2946a:	4630      	mov	r0, r6
   2946c:	f7ff fea7 	bl	291be <net_buf_frags_len>
   29470:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   29474:	f105 070c 	add.w	r7, r5, #12
   29478:	1a24      	subs	r4, r4, r0
   2947a:	4638      	mov	r0, r7
   2947c:	f001 f89f 	bl	2a5be <net_buf_simple_tailroom>
   29480:	4284      	cmp	r4, r0
   29482:	d211      	bcs.n	294a8 <att_chan_read+0x6c>
   29484:	4630      	mov	r0, r6
   29486:	f7ff fe9a 	bl	291be <net_buf_frags_len>
   2948a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2948e:	1a24      	subs	r4, r4, r0
		if (!len) {
   29490:	bb34      	cbnz	r4, 294e0 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   29492:	7ab0      	ldrb	r0, [r6, #10]
   29494:	f7f0 fd50 	bl	19f38 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   29498:	2200      	movs	r2, #0
   2949a:	2300      	movs	r3, #0
   2949c:	f001 f875 	bl	2a58a <net_buf_alloc_fixed>
			if (!frag) {
   294a0:	4605      	mov	r5, r0
   294a2:	b930      	cbnz	r0, 294b2 <att_chan_read+0x76>
	return total;
   294a4:	4657      	mov	r7, sl
   294a6:	e02c      	b.n	29502 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   294a8:	4638      	mov	r0, r7
   294aa:	f001 f888 	bl	2a5be <net_buf_simple_tailroom>
   294ae:	4604      	mov	r4, r0
   294b0:	e7ee      	b.n	29490 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   294b2:	4601      	mov	r1, r0
   294b4:	4630      	mov	r0, r6
   294b6:	f7f1 f81b 	bl	1a4f0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   294ba:	4630      	mov	r0, r6
   294bc:	f7ff fe7f 	bl	291be <net_buf_frags_len>
   294c0:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   294c4:	f105 070c 	add.w	r7, r5, #12
   294c8:	1a24      	subs	r4, r4, r0
   294ca:	4638      	mov	r0, r7
   294cc:	f001 f877 	bl	2a5be <net_buf_simple_tailroom>
   294d0:	4284      	cmp	r4, r0
   294d2:	d21a      	bcs.n	2950a <att_chan_read+0xce>
   294d4:	4630      	mov	r0, r6
   294d6:	f7ff fe72 	bl	291be <net_buf_frags_len>
   294da:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   294de:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   294e0:	68e9      	ldr	r1, [r5, #12]
   294e2:	8a2a      	ldrh	r2, [r5, #16]
   294e4:	f8cd 9000 	str.w	r9, [sp]
   294e8:	f8db 7004 	ldr.w	r7, [fp, #4]
   294ec:	440a      	add	r2, r1
   294ee:	9803      	ldr	r0, [sp, #12]
   294f0:	4659      	mov	r1, fp
   294f2:	b2a3      	uxth	r3, r4
   294f4:	47b8      	blx	r7
		if (read < 0) {
   294f6:	1e07      	subs	r7, r0, #0
   294f8:	da0c      	bge.n	29514 <att_chan_read+0xd8>
				return total;
   294fa:	f1ba 0f00 	cmp.w	sl, #0
   294fe:	bf18      	it	ne
   29500:	4657      	movne	r7, sl
}
   29502:	4638      	mov	r0, r7
   29504:	b005      	add	sp, #20
   29506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2950a:	4638      	mov	r0, r7
   2950c:	f001 f857 	bl	2a5be <net_buf_simple_tailroom>
   29510:	4604      	mov	r4, r0
   29512:	e7e5      	b.n	294e0 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   29514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29516:	b993      	cbnz	r3, 2953e <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   29518:	4639      	mov	r1, r7
   2951a:	f105 000c 	add.w	r0, r5, #12
   2951e:	f7f1 f867 	bl	1a5f0 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29522:	4630      	mov	r0, r6
   29524:	f7ff fe4b 	bl	291be <net_buf_frags_len>
   29528:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2952c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2952e:	4283      	cmp	r3, r0
		total += read;
   29530:	44ba      	add	sl, r7
		offset += read;
   29532:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29536:	d9b5      	bls.n	294a4 <att_chan_read+0x68>
   29538:	42a7      	cmp	r7, r4
   2953a:	d096      	beq.n	2946a <att_chan_read+0x2e>
   2953c:	e7b2      	b.n	294a4 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2953e:	4639      	mov	r1, r7
   29540:	4628      	mov	r0, r5
   29542:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29546:	4798      	blx	r3
   29548:	2800      	cmp	r0, #0
   2954a:	d1e5      	bne.n	29518 <att_chan_read+0xdc>
   2954c:	e7aa      	b.n	294a4 <att_chan_read+0x68>
		return 0;
   2954e:	2700      	movs	r7, #0
   29550:	e7d7      	b.n	29502 <att_chan_read+0xc6>

00029552 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29552:	2200      	movs	r2, #0
	return list->head;
   29554:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29556:	b903      	cbnz	r3, 2955a <sys_slist_find_and_remove.isra.0+0x8>
   29558:	4770      	bx	lr
   2955a:	428b      	cmp	r3, r1
   2955c:	d10f      	bne.n	2957e <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2955e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   29560:	b93a      	cbnz	r2, 29572 <sys_slist_find_and_remove.isra.0+0x20>
   29562:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   29564:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   29566:	4291      	cmp	r1, r2
   29568:	d100      	bne.n	2956c <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2956a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2956c:	2300      	movs	r3, #0
   2956e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   29570:	4770      	bx	lr
	parent->next = child;
   29572:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   29574:	6843      	ldr	r3, [r0, #4]
   29576:	4299      	cmp	r1, r3
	list->tail = node;
   29578:	bf08      	it	eq
   2957a:	6042      	streq	r2, [r0, #4]
}
   2957c:	e7f6      	b.n	2956c <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2957e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29580:	681b      	ldr	r3, [r3, #0]
   29582:	e7e8      	b.n	29556 <sys_slist_find_and_remove.isra.0+0x4>

00029584 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   29584:	2006      	movs	r0, #6
   29586:	4770      	bx	lr

00029588 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29588:	2301      	movs	r3, #1
{
   2958a:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2958c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29590:	e8d0 3fef 	ldaex	r3, [r0]
   29594:	ea43 0201 	orr.w	r2, r3, r1
   29598:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2959c:	2c00      	cmp	r4, #0
   2959e:	d1f7      	bne.n	29590 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   295a0:	4219      	tst	r1, r3
}
   295a2:	bf14      	ite	ne
   295a4:	2001      	movne	r0, #1
   295a6:	2000      	moveq	r0, #0
   295a8:	bd10      	pop	{r4, pc}

000295aa <read_cb>:
{
   295aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   295ac:	2300      	movs	r3, #0
{
   295ae:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   295b0:	6816      	ldr	r6, [r2, #0]
{
   295b2:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   295b4:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   295b6:	4629      	mov	r1, r5
	data->err = 0x00;
   295b8:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   295ba:	2295      	movs	r2, #149	; 0x95
   295bc:	f000 fc04 	bl	29dc8 <bt_gatt_check_perm>
   295c0:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   295c2:	b980      	cbnz	r0, 295e6 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   295c4:	e9cd 0000 	strd	r0, r0, [sp]
   295c8:	4629      	mov	r1, r5
   295ca:	4630      	mov	r0, r6
   295cc:	88a3      	ldrh	r3, [r4, #4]
   295ce:	68a2      	ldr	r2, [r4, #8]
   295d0:	f7ff ff34 	bl	2943c <att_chan_read>
	if (ret < 0) {
   295d4:	2800      	cmp	r0, #0
   295d6:	da09      	bge.n	295ec <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   295d8:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   295dc:	bf32      	itee	cc
   295de:	200e      	movcc	r0, #14
		return -err;
   295e0:	4240      	negcs	r0, r0
   295e2:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   295e4:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   295e6:	2000      	movs	r0, #0
}
   295e8:	b002      	add	sp, #8
   295ea:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   295ec:	2001      	movs	r0, #1
   295ee:	e7fb      	b.n	295e8 <read_cb+0x3e>

000295f0 <read_vl_cb>:
{
   295f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   295f4:	2300      	movs	r3, #0
{
   295f6:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   295f8:	f8d2 8000 	ldr.w	r8, [r2]
{
   295fc:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   295fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   29602:	4631      	mov	r1, r6
	data->err = 0x00;
   29604:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   29606:	2295      	movs	r2, #149	; 0x95
   29608:	f000 fbde 	bl	29dc8 <bt_gatt_check_perm>
   2960c:	4605      	mov	r5, r0
   2960e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   29610:	b9e0      	cbnz	r0, 2964c <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   29612:	68a0      	ldr	r0, [r4, #8]
   29614:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   29618:	8a02      	ldrh	r2, [r0, #16]
   2961a:	1a9b      	subs	r3, r3, r2
   2961c:	2b01      	cmp	r3, #1
   2961e:	dd15      	ble.n	2964c <read_vl_cb+0x5c>
   29620:	2102      	movs	r1, #2
   29622:	300c      	adds	r0, #12
   29624:	f7f0 ffe4 	bl	1a5f0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   29628:	e9cd 5500 	strd	r5, r5, [sp]
   2962c:	4607      	mov	r7, r0
   2962e:	88a3      	ldrh	r3, [r4, #4]
   29630:	4631      	mov	r1, r6
   29632:	4640      	mov	r0, r8
   29634:	68a2      	ldr	r2, [r4, #8]
   29636:	f7ff ff01 	bl	2943c <att_chan_read>
	if (read < 0) {
   2963a:	1e03      	subs	r3, r0, #0
   2963c:	da0a      	bge.n	29654 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2963e:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   29642:	bf32      	itee	cc
   29644:	230e      	movcc	r3, #14
		return -err;
   29646:	425b      	negcs	r3, r3
   29648:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   2964a:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2964c:	2000      	movs	r0, #0
}
   2964e:	b002      	add	sp, #8
   29650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   29654:	2001      	movs	r0, #1
	rsp->len = read;
   29656:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   29658:	e7f9      	b.n	2964e <read_vl_cb+0x5e>

0002965a <bt_att_sent>:
{
   2965a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2965c:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   2965e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   29662:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29664:	f100 0394 	add.w	r3, r0, #148	; 0x94
   29668:	e8d3 1fef 	ldaex	r1, [r3]
   2966c:	f021 0110 	bic.w	r1, r1, #16
   29670:	e8c3 1fe2 	stlex	r2, r1, [r3]
   29674:	2a00      	cmp	r2, #0
   29676:	d1f7      	bne.n	29668 <bt_att_sent+0xe>
	if (!att) {
   29678:	b30c      	cbz	r4, 296be <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2967a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2967e:	b98b      	cbnz	r3, 296a4 <bt_att_sent+0x4a>
   29680:	6863      	ldr	r3, [r4, #4]
   29682:	b17b      	cbz	r3, 296a4 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   29684:	1d20      	adds	r0, r4, #4
   29686:	f7ff fd90 	bl	291aa <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2968a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2968c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2968e:	4638      	mov	r0, r7
   29690:	f7ff fe93 	bl	293ba <chan_req_send>
   29694:	2800      	cmp	r0, #0
   29696:	da12      	bge.n	296be <bt_att_sent+0x64>
	return list->head;
   29698:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2969a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2969c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2969e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   296a0:	b903      	cbnz	r3, 296a4 <bt_att_sent+0x4a>
	list->tail = node;
   296a2:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   296a4:	4638      	mov	r0, r7
   296a6:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   296aa:	f7ff fea0 	bl	293ee <process_queue>
	if (!err) {
   296ae:	b130      	cbz	r0, 296be <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   296b0:	4638      	mov	r0, r7
   296b2:	f104 010c 	add.w	r1, r4, #12
}
   296b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   296ba:	f7ff be98 	b.w	293ee <process_queue>
}
   296be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000296c0 <att_req_send_process>:
{
   296c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   296c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
   296c6:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   296c8:	2c00      	cmp	r4, #0
   296ca:	d03b      	beq.n	29744 <att_req_send_process+0x84>
	return node->next;
   296cc:	f854 69f0 	ldr.w	r6, [r4], #-240
   296d0:	b106      	cbz	r6, 296d4 <att_req_send_process+0x14>
   296d2:	3ef0      	subs	r6, #240	; 0xf0
{
   296d4:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   296d6:	f108 0704 	add.w	r7, r8, #4
{
   296da:	461d      	mov	r5, r3
   296dc:	e013      	b.n	29706 <att_req_send_process+0x46>
		if (!req && prev &&
   296de:	b1c3      	cbz	r3, 29712 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   296e0:	2103      	movs	r1, #3
   296e2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   296e6:	f7ff fd84 	bl	291f2 <atomic_test_bit>
   296ea:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   296ec:	f103 0098 	add.w	r0, r3, #152	; 0x98
   296f0:	f7ff fd7f 	bl	291f2 <atomic_test_bit>
		if (!req && prev &&
   296f4:	4282      	cmp	r2, r0
   296f6:	d10c      	bne.n	29712 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   296f8:	b326      	cbz	r6, 29744 <att_req_send_process+0x84>
   296fa:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   296fe:	b102      	cbz	r2, 29702 <att_req_send_process+0x42>
   29700:	3af0      	subs	r2, #240	; 0xf0
{
   29702:	4634      	mov	r4, r6
   29704:	4616      	mov	r6, r2
		if (chan->req) {
   29706:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2970a:	2a00      	cmp	r2, #0
   2970c:	d1f4      	bne.n	296f8 <att_req_send_process+0x38>
		if (!req && prev &&
   2970e:	2d00      	cmp	r5, #0
   29710:	d0e5      	beq.n	296de <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   29712:	4638      	mov	r0, r7
   29714:	f7ff fd49 	bl	291aa <sys_slist_get>
	if (node) {
   29718:	4605      	mov	r5, r0
   2971a:	b908      	cbnz	r0, 29720 <att_req_send_process+0x60>
   2971c:	4623      	mov	r3, r4
   2971e:	e7eb      	b.n	296f8 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   29720:	4601      	mov	r1, r0
   29722:	4620      	mov	r0, r4
   29724:	f7ec fd1e 	bl	16164 <bt_att_chan_req_send>
   29728:	2800      	cmp	r0, #0
   2972a:	da0b      	bge.n	29744 <att_req_send_process+0x84>
	return list->head;
   2972c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   29730:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   29732:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   29736:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2973a:	2b00      	cmp	r3, #0
   2973c:	d1ee      	bne.n	2971c <att_req_send_process+0x5c>
	list->tail = node;
   2973e:	f8c8 5008 	str.w	r5, [r8, #8]
}
   29742:	e7eb      	b.n	2971c <att_req_send_process+0x5c>
}
   29744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029748 <bt_att_status>:
{
   29748:	b538      	push	{r3, r4, r5, lr}
   2974a:	4605      	mov	r5, r0
   2974c:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2974e:	2100      	movs	r1, #0
   29750:	f7ff fd4f 	bl	291f2 <atomic_test_bit>
   29754:	b1c0      	cbz	r0, 29788 <bt_att_status+0x40>
	if (!chan->att) {
   29756:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2975a:	b1a8      	cbz	r0, 29788 <bt_att_status+0x40>
	if (chan->req) {
   2975c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   29760:	b993      	cbnz	r3, 29788 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   29762:	3004      	adds	r0, #4
   29764:	f7ff fd21 	bl	291aa <sys_slist_get>
	if (!node) {
   29768:	4604      	mov	r4, r0
   2976a:	b168      	cbz	r0, 29788 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2976c:	4601      	mov	r1, r0
   2976e:	1f28      	subs	r0, r5, #4
   29770:	f7ec fcf8 	bl	16164 <bt_att_chan_req_send>
   29774:	2800      	cmp	r0, #0
   29776:	da07      	bge.n	29788 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   29778:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2977c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2977e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   29780:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   29782:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   29784:	b902      	cbnz	r2, 29788 <bt_att_status+0x40>
	list->tail = node;
   29786:	609c      	str	r4, [r3, #8]
}
   29788:	bd38      	pop	{r3, r4, r5, pc}

0002978a <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2978a:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2978c:	6883      	ldr	r3, [r0, #8]
   2978e:	699b      	ldr	r3, [r3, #24]
   29790:	b10b      	cbz	r3, 29796 <att_sent+0xc>
		chan->ops->sent(chan);
   29792:	3004      	adds	r0, #4
   29794:	4718      	bx	r3
}
   29796:	4770      	bx	lr

00029798 <att_tx_complete>:
{
   29798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2979c:	4606      	mov	r6, r0
   2979e:	460d      	mov	r5, r1
	if (!err) {
   297a0:	4614      	mov	r4, r2
   297a2:	b122      	cbz	r2, 297ae <att_tx_complete+0x16>
}
   297a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   297a8:	4608      	mov	r0, r1
   297aa:	f7ec bb9b 	b.w	15ee4 <tx_meta_data_free>
		att_sent(conn, user_data);
   297ae:	f7ff ffec 	bl	2978a <att_sent>
	bt_gatt_complete_func_t func = data->func;
   297b2:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   297b4:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   297b6:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   297ba:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   297be:	f7ec fb91 	bl	15ee4 <tx_meta_data_free>
	if (!err && func) {
   297c2:	b92f      	cbnz	r7, 297d0 <att_tx_complete+0x38>
}
   297c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   297c8:	4649      	mov	r1, r9
   297ca:	4630      	mov	r0, r6
   297cc:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   297ce:	3401      	adds	r4, #1
   297d0:	b2a3      	uxth	r3, r4
   297d2:	4543      	cmp	r3, r8
   297d4:	d3f8      	bcc.n	297c8 <att_tx_complete+0x30>
   297d6:	e7f5      	b.n	297c4 <att_tx_complete+0x2c>

000297d8 <att_req_sent>:
{
   297d8:	b510      	push	{r4, lr}
   297da:	460c      	mov	r4, r1
	if (!err) {
   297dc:	b90a      	cbnz	r2, 297e2 <att_req_sent+0xa>
		att_sent(conn, user_data);
   297de:	f7ff ffd4 	bl	2978a <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   297e2:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   297e4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   297e8:	b12b      	cbz	r3, 297f6 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   297ea:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   297ee:	2300      	movs	r3, #0
   297f0:	30c0      	adds	r0, #192	; 0xc0
   297f2:	f7f8 f8d9 	bl	219a8 <k_work_reschedule>
	tx_meta_data_free(user_data);
   297f6:	4620      	mov	r0, r4
}
   297f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   297fc:	f7ec bb72 	b.w	15ee4 <tx_meta_data_free>

00029800 <att_cfm_sent>:
{
   29800:	b510      	push	{r4, lr}
   29802:	460c      	mov	r4, r1
	if (!err) {
   29804:	b90a      	cbnz	r2, 2980a <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   29806:	f7ff ffc0 	bl	2978a <att_sent>
   2980a:	6823      	ldr	r3, [r4, #0]
   2980c:	3398      	adds	r3, #152	; 0x98
   2980e:	e8d3 1fef 	ldaex	r1, [r3]
   29812:	f021 0102 	bic.w	r1, r1, #2
   29816:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2981a:	2a00      	cmp	r2, #0
   2981c:	d1f7      	bne.n	2980e <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   2981e:	4620      	mov	r0, r4
}
   29820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   29824:	f7ec bb5e 	b.w	15ee4 <tx_meta_data_free>

00029828 <att_rsp_sent>:
{
   29828:	b510      	push	{r4, lr}
   2982a:	460c      	mov	r4, r1
	if (!err) {
   2982c:	b90a      	cbnz	r2, 29832 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2982e:	f7ff ffac 	bl	2978a <att_sent>
   29832:	6823      	ldr	r3, [r4, #0]
   29834:	3398      	adds	r3, #152	; 0x98
   29836:	e8d3 1fef 	ldaex	r1, [r3]
   2983a:	f021 0101 	bic.w	r1, r1, #1
   2983e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   29842:	2a00      	cmp	r2, #0
   29844:	d1f7      	bne.n	29836 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   29846:	4620      	mov	r0, r4
}
   29848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2984c:	f7ec bb4a 	b.w	15ee4 <tx_meta_data_free>

00029850 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   29850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29854:	4688      	mov	r8, r1
   29856:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   29858:	2101      	movs	r1, #1
   2985a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2985c:	4605      	mov	r5, r0
   2985e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   29860:	f7ec fe42 	bl	164e8 <bt_att_chan_create_pdu>
	if (!buf) {
   29864:	4604      	mov	r4, r0
   29866:	b170      	cbz	r0, 29886 <send_err_rsp.part.0+0x36>
   29868:	2104      	movs	r1, #4
   2986a:	300c      	adds	r0, #12
   2986c:	f7f0 fec0 	bl	1a5f0 <net_buf_simple_add>
	rsp->request = req;
   29870:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   29874:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   29878:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2987a:	4621      	mov	r1, r4
   2987c:	4628      	mov	r0, r5
}
   2987e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   29882:	f7ff bdcd 	b.w	29420 <bt_att_chan_send_rsp>
}
   29886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002988a <att_write_req>:
{
   2988a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2988c:	460c      	mov	r4, r1
   2988e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   29890:	f101 000c 	add.w	r0, r1, #12
   29894:	f000 fe87 	bl	2a5a6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   29898:	8a22      	ldrh	r2, [r4, #16]
   2989a:	4603      	mov	r3, r0
   2989c:	9201      	str	r2, [sp, #4]
   2989e:	68e2      	ldr	r2, [r4, #12]
   298a0:	2112      	movs	r1, #18
   298a2:	9200      	str	r2, [sp, #0]
   298a4:	4628      	mov	r0, r5
   298a6:	2213      	movs	r2, #19
   298a8:	f7ec ff16 	bl	166d8 <att_write_rsp.constprop.0>
}
   298ac:	b003      	add	sp, #12
   298ae:	bd30      	pop	{r4, r5, pc}

000298b0 <att_write_cmd>:
{
   298b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   298b2:	460c      	mov	r4, r1
   298b4:	4605      	mov	r5, r0
   298b6:	f101 000c 	add.w	r0, r1, #12
   298ba:	f000 fe74 	bl	2a5a6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   298be:	8a22      	ldrh	r2, [r4, #16]
   298c0:	4603      	mov	r3, r0
   298c2:	9201      	str	r2, [sp, #4]
   298c4:	68e2      	ldr	r2, [r4, #12]
   298c6:	4628      	mov	r0, r5
   298c8:	9200      	str	r2, [sp, #0]
   298ca:	2200      	movs	r2, #0
   298cc:	4611      	mov	r1, r2
   298ce:	f7ec ff03 	bl	166d8 <att_write_rsp.constprop.0>
}
   298d2:	b003      	add	sp, #12
   298d4:	bd30      	pop	{r4, r5, pc}

000298d6 <att_read_blob_req>:
{
   298d6:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   298d8:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   298da:	210c      	movs	r1, #12
   298dc:	8813      	ldrh	r3, [r2, #0]
   298de:	8852      	ldrh	r2, [r2, #2]
   298e0:	9200      	str	r2, [sp, #0]
   298e2:	220d      	movs	r2, #13
   298e4:	f7ed f8ba 	bl	16a5c <att_read_rsp>
}
   298e8:	b003      	add	sp, #12
   298ea:	f85d fb04 	ldr.w	pc, [sp], #4

000298ee <att_read_req>:
{
   298ee:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   298f0:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   298f2:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   298f4:	210a      	movs	r1, #10
   298f6:	881b      	ldrh	r3, [r3, #0]
   298f8:	9200      	str	r2, [sp, #0]
   298fa:	220b      	movs	r2, #11
   298fc:	f7ed f8ae 	bl	16a5c <att_read_rsp>
}
   29900:	b003      	add	sp, #12
   29902:	f85d fb04 	ldr.w	pc, [sp], #4

00029906 <att_mtu_req>:
{
   29906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29908:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2990a:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2990e:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29910:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   29912:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29914:	f7ff fc6d 	bl	291f2 <atomic_test_bit>
   29918:	4604      	mov	r4, r0
   2991a:	b9f0      	cbnz	r0, 2995a <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2991c:	68db      	ldr	r3, [r3, #12]
   2991e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   29920:	2e16      	cmp	r6, #22
   29922:	d91c      	bls.n	2995e <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   29924:	4638      	mov	r0, r7
   29926:	2202      	movs	r2, #2
   29928:	f7ec ff3a 	bl	167a0 <bt_att_create_pdu>
	if (!pdu) {
   2992c:	4607      	mov	r7, r0
   2992e:	b1c0      	cbz	r0, 29962 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   29930:	2102      	movs	r1, #2
   29932:	300c      	adds	r0, #12
   29934:	f7f0 fe5c 	bl	1a5f0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   29938:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   2993a:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2993c:	7003      	strb	r3, [r0, #0]
   2993e:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   29940:	4628      	mov	r0, r5
   29942:	f7ff fd6d 	bl	29420 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   29946:	2e41      	cmp	r6, #65	; 0x41
   29948:	bf28      	it	cs
   2994a:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2994c:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2994e:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   29950:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   29952:	f7ff fc90 	bl	29276 <att_chan_mtu_updated>
	return 0;
   29956:	4620      	mov	r0, r4
}
   29958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2995a:	2006      	movs	r0, #6
   2995c:	e7fc      	b.n	29958 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2995e:	2004      	movs	r0, #4
   29960:	e7fa      	b.n	29958 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   29962:	200e      	movs	r0, #14
   29964:	e7f8      	b.n	29958 <att_mtu_req+0x52>

00029966 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29966:	8a0a      	ldrh	r2, [r1, #16]
   29968:	2300      	movs	r3, #0
   2996a:	68c9      	ldr	r1, [r1, #12]
   2996c:	f7ed ba20 	b.w	16db0 <att_handle_rsp>

00029970 <bt_att_encrypt_change>:
{
   29970:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   29972:	4606      	mov	r6, r0
	if (!att_chan->att) {
   29974:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   29978:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   2997a:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   2997e:	2b00      	cmp	r3, #0
   29980:	d038      	beq.n	299f4 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   29982:	b141      	cbz	r1, 29996 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   29984:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   29988:	2b00      	cmp	r3, #0
   2998a:	d033      	beq.n	299f4 <bt_att_encrypt_change+0x84>
   2998c:	7c1b      	ldrb	r3, [r3, #16]
   2998e:	07da      	lsls	r2, r3, #31
   29990:	d530      	bpl.n	299f4 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   29992:	2305      	movs	r3, #5
   29994:	e021      	b.n	299da <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   29996:	4628      	mov	r0, r5
   29998:	f7ee fbca 	bl	18130 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2999c:	7a6b      	ldrb	r3, [r5, #9]
   2999e:	2b01      	cmp	r3, #1
   299a0:	d028      	beq.n	299f4 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   299a2:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   299a6:	b32d      	cbz	r5, 299f4 <bt_att_encrypt_change+0x84>
   299a8:	7c2b      	ldrb	r3, [r5, #16]
   299aa:	07db      	lsls	r3, r3, #31
   299ac:	d522      	bpl.n	299f4 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   299ae:	68eb      	ldr	r3, [r5, #12]
   299b0:	2b00      	cmp	r3, #0
   299b2:	d0ee      	beq.n	29992 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   299b4:	4630      	mov	r0, r6
   299b6:	696a      	ldr	r2, [r5, #20]
   299b8:	7c69      	ldrb	r1, [r5, #17]
   299ba:	f7ec fd95 	bl	164e8 <bt_att_chan_create_pdu>
	if (!buf) {
   299be:	4604      	mov	r4, r0
   299c0:	b150      	cbz	r0, 299d8 <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   299c2:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   299c6:	68eb      	ldr	r3, [r5, #12]
   299c8:	4798      	blx	r3
   299ca:	b168      	cbz	r0, 299e8 <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   299cc:	69a0      	ldr	r0, [r4, #24]
   299ce:	f7ec fa89 	bl	15ee4 <tx_meta_data_free>
		net_buf_unref(buf);
   299d2:	4620      	mov	r0, r4
   299d4:	f7f0 fcea 	bl	1a3ac <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   299d8:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   299da:	2200      	movs	r2, #0
   299dc:	4630      	mov	r0, r6
}
   299de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   299e2:	4611      	mov	r1, r2
   299e4:	f7ed b9e4 	b.w	16db0 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   299e8:	4621      	mov	r1, r4
   299ea:	4630      	mov	r0, r6
   299ec:	f7ec fb46 	bl	1607c <chan_send>
   299f0:	2800      	cmp	r0, #0
   299f2:	d1eb      	bne.n	299cc <bt_att_encrypt_change+0x5c>
}
   299f4:	bd70      	pop	{r4, r5, r6, pc}

000299f6 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   299f6:	2001      	movs	r0, #1
   299f8:	4770      	bx	lr

000299fa <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   299fa:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   299fc:	f7ec fbf4 	bl	161e8 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   29a00:	b178      	cbz	r0, 29a22 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   29a02:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   29a04:	b16b      	cbz	r3, 29a22 <bt_att_clear_out_of_sync_sent+0x28>
   29a06:	3bf0      	subs	r3, #240	; 0xf0
   29a08:	f103 0298 	add.w	r2, r3, #152	; 0x98
   29a0c:	e8d2 0fef 	ldaex	r0, [r2]
   29a10:	f020 0020 	bic.w	r0, r0, #32
   29a14:	e8c2 0fe1 	stlex	r1, r0, [r2]
   29a18:	2900      	cmp	r1, #0
   29a1a:	d1f7      	bne.n	29a0c <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   29a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   29a20:	e7f0      	b.n	29a04 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   29a22:	bd08      	pop	{r3, pc}

00029a24 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   29a24:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   29a26:	2104      	movs	r1, #4
   29a28:	f7ff fbb5 	bl	29196 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   29a2c:	b128      	cbz	r0, 29a3a <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   29a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   29a32:	2105      	movs	r1, #5
   29a34:	3094      	adds	r0, #148	; 0x94
   29a36:	f7ff bbdc 	b.w	291f2 <atomic_test_bit>
}
   29a3a:	bd08      	pop	{r3, pc}

00029a3c <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   29a3c:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   29a3e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   29a42:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   29a44:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   29a46:	8082      	strh	r2, [r0, #4]
}
   29a48:	4770      	bx	lr

00029a4a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   29a4a:	6010      	str	r0, [r2, #0]
}
   29a4c:	2000      	movs	r0, #0
   29a4e:	4770      	bx	lr

00029a50 <gatt_ccc_changed>:
{
   29a50:	460b      	mov	r3, r1
   29a52:	8909      	ldrh	r1, [r1, #8]
   29a54:	8a5a      	ldrh	r2, [r3, #18]
   29a56:	4291      	cmp	r1, r2
   29a58:	bf38      	it	cc
   29a5a:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   29a5c:	8a9a      	ldrh	r2, [r3, #20]
   29a5e:	428a      	cmp	r2, r1
   29a60:	d003      	beq.n	29a6a <gatt_ccc_changed+0x1a>
		ccc->value = value;
   29a62:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   29a64:	699b      	ldr	r3, [r3, #24]
   29a66:	b103      	cbz	r3, 29a6a <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   29a68:	4718      	bx	r3
}
   29a6a:	4770      	bx	lr

00029a6c <gatt_indicate_rsp>:
{
   29a6c:	b510      	push	{r4, lr}
   29a6e:	9c02      	ldr	r4, [sp, #8]
   29a70:	460a      	mov	r2, r1
	if (params->func) {
   29a72:	68a3      	ldr	r3, [r4, #8]
   29a74:	b10b      	cbz	r3, 29a7a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   29a76:	4621      	mov	r1, r4
   29a78:	4798      	blx	r3
	params->_ref--;
   29a7a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29a7c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   29a7e:	3b01      	subs	r3, #1
   29a80:	b2db      	uxtb	r3, r3
   29a82:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29a84:	b122      	cbz	r2, 29a90 <gatt_indicate_rsp+0x24>
   29a86:	b91b      	cbnz	r3, 29a90 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   29a88:	4620      	mov	r0, r4
}
   29a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   29a8e:	4710      	bx	r2
}
   29a90:	bd10      	pop	{r4, pc}

00029a92 <match_uuid>:
	data->attr = attr;
   29a92:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   29a94:	8091      	strh	r1, [r2, #4]
}
   29a96:	2000      	movs	r0, #0
   29a98:	4770      	bx	lr

00029a9a <gen_hash_m>:
{
   29a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29a9c:	6807      	ldr	r7, [r0, #0]
{
   29a9e:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29aa0:	783d      	ldrb	r5, [r7, #0]
{
   29aa2:	4614      	mov	r4, r2
   29aa4:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29aa6:	b9dd      	cbnz	r5, 29ae0 <gen_hash_m+0x46>
	switch (u16->val) {
   29aa8:	887b      	ldrh	r3, [r7, #2]
   29aaa:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   29aae:	d004      	beq.n	29aba <gen_hash_m+0x20>
   29ab0:	d810      	bhi.n	29ad4 <gen_hash_m+0x3a>
   29ab2:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   29ab6:	2b03      	cmp	r3, #3
   29ab8:	d812      	bhi.n	29ae0 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   29aba:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29abe:	2202      	movs	r2, #2
   29ac0:	4620      	mov	r0, r4
   29ac2:	f10d 010a 	add.w	r1, sp, #10
   29ac6:	f7fe fb02 	bl	280ce <tc_cmac_update>
   29aca:	b968      	cbnz	r0, 29ae8 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   29acc:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   29ad0:	65a2      	str	r2, [r4, #88]	; 0x58
   29ad2:	e006      	b.n	29ae2 <gen_hash_m+0x48>
	switch (u16->val) {
   29ad4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   29ad8:	33ff      	adds	r3, #255	; 0xff
   29ada:	b29b      	uxth	r3, r3
   29adc:	2b04      	cmp	r3, #4
   29ade:	d91e      	bls.n	29b1e <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   29ae0:	2501      	movs	r5, #1
}
   29ae2:	4628      	mov	r0, r5
   29ae4:	b009      	add	sp, #36	; 0x24
   29ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   29ae8:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29aea:	2202      	movs	r2, #2
   29aec:	4620      	mov	r0, r4
   29aee:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   29af2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29af6:	f7fe faea 	bl	280ce <tc_cmac_update>
   29afa:	2800      	cmp	r0, #0
   29afc:	d0e6      	beq.n	29acc <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   29afe:	2000      	movs	r0, #0
   29b00:	9000      	str	r0, [sp, #0]
   29b02:	aa03      	add	r2, sp, #12
   29b04:	2313      	movs	r3, #19
   29b06:	4631      	mov	r1, r6
   29b08:	6877      	ldr	r7, [r6, #4]
   29b0a:	47b8      	blx	r7
		if (len < 0) {
   29b0c:	1e02      	subs	r2, r0, #0
   29b0e:	dbdf      	blt.n	29ad0 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   29b10:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29b12:	4620      	mov	r0, r4
   29b14:	f7fe fadb 	bl	280ce <tc_cmac_update>
   29b18:	2800      	cmp	r0, #0
   29b1a:	d1e1      	bne.n	29ae0 <gen_hash_m+0x46>
   29b1c:	e7d6      	b.n	29acc <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   29b1e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29b22:	2202      	movs	r2, #2
   29b24:	4620      	mov	r0, r4
   29b26:	f10d 010a 	add.w	r1, sp, #10
   29b2a:	f7fe fad0 	bl	280ce <tc_cmac_update>
   29b2e:	2800      	cmp	r0, #0
   29b30:	d0cc      	beq.n	29acc <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   29b32:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29b34:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   29b36:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29b3a:	f10d 010a 	add.w	r1, sp, #10
   29b3e:	e7e8      	b.n	29b12 <gen_hash_m+0x78>

00029b40 <bt_addr_le_eq>:
   29b40:	2207      	movs	r2, #7
{
   29b42:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   29b44:	f002 fab2 	bl	2c0ac <memcmp>
}
   29b48:	fab0 f080 	clz	r0, r0
   29b4c:	0940      	lsrs	r0, r0, #5
   29b4e:	bd08      	pop	{r3, pc}

00029b50 <bt_addr_le_copy>:
   29b50:	680b      	ldr	r3, [r1, #0]
   29b52:	6003      	str	r3, [r0, #0]
   29b54:	888b      	ldrh	r3, [r1, #4]
   29b56:	8083      	strh	r3, [r0, #4]
   29b58:	798b      	ldrb	r3, [r1, #6]
   29b5a:	7183      	strb	r3, [r0, #6]
}
   29b5c:	4770      	bx	lr

00029b5e <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   29b5e:	2300      	movs	r3, #0
   29b60:	6003      	str	r3, [r0, #0]
   29b62:	6043      	str	r3, [r0, #4]
   29b64:	6083      	str	r3, [r0, #8]
}
   29b66:	4770      	bx	lr

00029b68 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   29b68:	b538      	push	{r3, r4, r5, lr}
   29b6a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   29b6e:	4615      	mov	r5, r2
	if (offset > value_len) {
   29b70:	4294      	cmp	r4, r2
   29b72:	d30a      	bcc.n	29b8a <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   29b74:	1aa4      	subs	r4, r4, r2
   29b76:	428c      	cmp	r4, r1
   29b78:	bfa8      	it	ge
   29b7a:	460c      	movge	r4, r1
   29b7c:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29b7e:	4622      	mov	r2, r4
   29b80:	1959      	adds	r1, r3, r5
   29b82:	f002 faa3 	bl	2c0cc <memcpy>
}
   29b86:	4620      	mov	r0, r4
   29b88:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29b8a:	f06f 0406 	mvn.w	r4, #6
   29b8e:	e7fa      	b.n	29b86 <bt_gatt_attr_read.constprop.0+0x1e>

00029b90 <bt_gatt_attr_read_ccc>:
{
   29b90:	b530      	push	{r4, r5, lr}
   29b92:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   29b94:	68c9      	ldr	r1, [r1, #12]
{
   29b96:	4614      	mov	r4, r2
   29b98:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   29b9a:	f7ed faaf 	bl	170fc <find_ccc_cfg>
	if (cfg) {
   29b9e:	b100      	cbz	r0, 29ba2 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   29ba0:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   29ba2:	2302      	movs	r3, #2
   29ba4:	f8ad 000e 	strh.w	r0, [sp, #14]
   29ba8:	9300      	str	r3, [sp, #0]
   29baa:	4629      	mov	r1, r5
   29bac:	4620      	mov	r0, r4
   29bae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29bb2:	f10d 030e 	add.w	r3, sp, #14
   29bb6:	f7ff ffd7 	bl	29b68 <bt_gatt_attr_read.constprop.0>
}
   29bba:	b005      	add	sp, #20
   29bbc:	bd30      	pop	{r4, r5, pc}

00029bbe <bt_gatt_attr_read_service>:
{
   29bbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   29bc0:	460c      	mov	r4, r1
   29bc2:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   29bc4:	68e3      	ldr	r3, [r4, #12]
{
   29bc6:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   29bc8:	781c      	ldrb	r4, [r3, #0]
{
   29bca:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   29bce:	b13c      	cbz	r4, 29be0 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29bd0:	2410      	movs	r4, #16
   29bd2:	3301      	adds	r3, #1
   29bd4:	9406      	str	r4, [sp, #24]
}
   29bd6:	b004      	add	sp, #16
   29bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29bdc:	f7ff bfc4 	b.w	29b68 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   29be0:	885b      	ldrh	r3, [r3, #2]
   29be2:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29be6:	2302      	movs	r3, #2
   29be8:	9300      	str	r3, [sp, #0]
   29bea:	f10d 030e 	add.w	r3, sp, #14
   29bee:	f7ff ffbb 	bl	29b68 <bt_gatt_attr_read.constprop.0>
}
   29bf2:	b004      	add	sp, #16
   29bf4:	bd10      	pop	{r4, pc}

00029bf6 <cf_read>:
{
   29bf6:	b530      	push	{r4, r5, lr}
   29bf8:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   29bfa:	2300      	movs	r3, #0
{
   29bfc:	b085      	sub	sp, #20
   29bfe:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   29c00:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   29c04:	f7ed fa2a 	bl	1705c <find_cf_cfg>
	if (cfg) {
   29c08:	b110      	cbz	r0, 29c10 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   29c0a:	7a03      	ldrb	r3, [r0, #8]
   29c0c:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   29c10:	2301      	movs	r3, #1
   29c12:	4629      	mov	r1, r5
   29c14:	9300      	str	r3, [sp, #0]
   29c16:	4620      	mov	r0, r4
   29c18:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29c1c:	ab03      	add	r3, sp, #12
   29c1e:	f7ff ffa3 	bl	29b68 <bt_gatt_attr_read.constprop.0>
}
   29c22:	b005      	add	sp, #20
   29c24:	bd30      	pop	{r4, r5, pc}

00029c26 <read_name>:
{
   29c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c2a:	4614      	mov	r4, r2
   29c2c:	461d      	mov	r5, r3
   29c2e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   29c32:	f7e9 fe85 	bl	13940 <bt_get_name>
   29c36:	4606      	mov	r6, r0
				 strlen(name));
   29c38:	f7df fbe7 	bl	940a <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29c3c:	b280      	uxth	r0, r0
   29c3e:	9006      	str	r0, [sp, #24]
   29c40:	4633      	mov	r3, r6
   29c42:	463a      	mov	r2, r7
   29c44:	4629      	mov	r1, r5
   29c46:	4620      	mov	r0, r4
}
   29c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29c4c:	f7ff bf8c 	b.w	29b68 <bt_gatt_attr_read.constprop.0>

00029c50 <read_appearance>:
{
   29c50:	b530      	push	{r4, r5, lr}
   29c52:	b085      	sub	sp, #20
   29c54:	4614      	mov	r4, r2
   29c56:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   29c58:	f7fe fef5 	bl	28a46 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29c5c:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   29c5e:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29c62:	9300      	str	r3, [sp, #0]
   29c64:	4629      	mov	r1, r5
   29c66:	4620      	mov	r0, r4
   29c68:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29c6c:	f10d 030e 	add.w	r3, sp, #14
   29c70:	f7ff ff7a 	bl	29b68 <bt_gatt_attr_read.constprop.0>
}
   29c74:	b005      	add	sp, #20
   29c76:	bd30      	pop	{r4, r5, pc}

00029c78 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29c78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29c7a:	ab0b      	add	r3, sp, #44	; 0x2c
   29c7c:	9305      	str	r3, [sp, #20]
   29c7e:	9303      	str	r3, [sp, #12]
   29c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29c82:	9302      	str	r3, [sp, #8]
   29c84:	2300      	movs	r3, #0
   29c86:	4618      	mov	r0, r3
   29c88:	e9cd 3300 	strd	r3, r3, [sp]
   29c8c:	f7e5 fb52 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   29c90:	b007      	add	sp, #28
   29c92:	f85d fb04 	ldr.w	pc, [sp], #4

00029c96 <sc_clear>:
{
   29c96:	b538      	push	{r3, r4, r5, lr}
   29c98:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29c9a:	f100 0590 	add.w	r5, r0, #144	; 0x90
   29c9e:	4629      	mov	r1, r5
   29ca0:	7a00      	ldrb	r0, [r0, #8]
   29ca2:	f7fe fed3 	bl	28a4c <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   29ca6:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   29ca8:	7a20      	ldrb	r0, [r4, #8]
   29caa:	f7ed fa05 	bl	170b8 <find_sc_cfg>
		if (cfg) {
   29cae:	b118      	cbz	r0, 29cb8 <sc_clear+0x22>
}
   29cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   29cb4:	f7ff bf53 	b.w	29b5e <clear_sc_cfg>
}
   29cb8:	bd38      	pop	{r3, r4, r5, pc}

00029cba <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   29cba:	2a02      	cmp	r2, #2
{
   29cbc:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   29cbe:	d108      	bne.n	29cd2 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   29cc0:	2300      	movs	r3, #0
   29cc2:	f100 0190 	add.w	r1, r0, #144	; 0x90
   29cc6:	461a      	mov	r2, r3
   29cc8:	7a00      	ldrb	r0, [r0, #8]
   29cca:	f7ed fac7 	bl	1725c <sc_save>
}
   29cce:	2002      	movs	r0, #2
   29cd0:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   29cd2:	f7ff ffe0 	bl	29c96 <sc_clear>
   29cd6:	e7fa      	b.n	29cce <sc_ccc_cfg_write+0x14>

00029cd8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29cd8:	2301      	movs	r3, #1
   29cda:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29cdc:	e8d0 2fef 	ldaex	r2, [r0]
   29ce0:	431a      	orrs	r2, r3
   29ce2:	e8c0 2fe1 	stlex	r1, r2, [r0]
   29ce6:	2900      	cmp	r1, #0
   29ce8:	d1f8      	bne.n	29cdc <atomic_set_bit+0x4>
}
   29cea:	4770      	bx	lr

00029cec <sc_restore_rsp>:
{
   29cec:	b538      	push	{r3, r4, r5, lr}
   29cee:	4604      	mov	r4, r0
   29cf0:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   29cf2:	f7ff fe80 	bl	299f6 <bt_att_fixed_chan_only>
   29cf6:	b150      	cbz	r0, 29d0e <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   29cf8:	4620      	mov	r0, r4
   29cfa:	f7ed f9af 	bl	1705c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   29cfe:	b130      	cbz	r0, 29d0e <sc_restore_rsp+0x22>
   29d00:	7a03      	ldrb	r3, [r0, #8]
   29d02:	07db      	lsls	r3, r3, #31
   29d04:	d503      	bpl.n	29d0e <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   29d06:	2100      	movs	r1, #0
   29d08:	300c      	adds	r0, #12
   29d0a:	f7ff ffe5 	bl	29cd8 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   29d0e:	b935      	cbnz	r5, 29d1e <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   29d10:	7a20      	ldrb	r0, [r4, #8]
   29d12:	f104 0190 	add.w	r1, r4, #144	; 0x90
   29d16:	f7ed f9cf 	bl	170b8 <find_sc_cfg>
		if (sc_cfg) {
   29d1a:	b100      	cbz	r0, 29d1e <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   29d1c:	6085      	str	r5, [r0, #8]
}
   29d1e:	bd38      	pop	{r3, r4, r5, pc}

00029d20 <bt_gatt_attr_value_handle>:
{
   29d20:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29d22:	4604      	mov	r4, r0
   29d24:	b910      	cbnz	r0, 29d2c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   29d26:	2000      	movs	r0, #0
}
   29d28:	b002      	add	sp, #8
   29d2a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29d2c:	2300      	movs	r3, #0
   29d2e:	f88d 3004 	strb.w	r3, [sp, #4]
   29d32:	f642 0303 	movw	r3, #10243	; 0x2803
   29d36:	6800      	ldr	r0, [r0, #0]
   29d38:	a901      	add	r1, sp, #4
   29d3a:	f8ad 3006 	strh.w	r3, [sp, #6]
   29d3e:	f7fe fd38 	bl	287b2 <bt_uuid_cmp>
   29d42:	2800      	cmp	r0, #0
   29d44:	d1ef      	bne.n	29d26 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   29d46:	68e3      	ldr	r3, [r4, #12]
   29d48:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   29d4a:	2800      	cmp	r0, #0
   29d4c:	d1ec      	bne.n	29d28 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   29d4e:	4620      	mov	r0, r4
   29d50:	f7ed fbf4 	bl	1753c <bt_gatt_attr_get_handle>
   29d54:	3001      	adds	r0, #1
   29d56:	b280      	uxth	r0, r0
	return handle;
   29d58:	e7e6      	b.n	29d28 <bt_gatt_attr_value_handle+0x8>

00029d5a <bt_gatt_attr_read_chrc>:
{
   29d5a:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   29d5c:	68cc      	ldr	r4, [r1, #12]
{
   29d5e:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   29d60:	79a3      	ldrb	r3, [r4, #6]
{
   29d62:	b088      	sub	sp, #32
   29d64:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   29d66:	f88d 300c 	strb.w	r3, [sp, #12]
{
   29d6a:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29d6c:	f7ff ffd8 	bl	29d20 <bt_gatt_attr_value_handle>
   29d70:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29d74:	6824      	ldr	r4, [r4, #0]
   29d76:	7823      	ldrb	r3, [r4, #0]
   29d78:	b96b      	cbnz	r3, 29d96 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   29d7a:	8863      	ldrh	r3, [r4, #2]
   29d7c:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   29d80:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   29d82:	9300      	str	r3, [sp, #0]
   29d84:	4631      	mov	r1, r6
   29d86:	4628      	mov	r0, r5
   29d88:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   29d8c:	ab03      	add	r3, sp, #12
   29d8e:	f7ff feeb 	bl	29b68 <bt_gatt_attr_read.constprop.0>
}
   29d92:	b008      	add	sp, #32
   29d94:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   29d96:	1c63      	adds	r3, r4, #1
   29d98:	f10d 020f 	add.w	r2, sp, #15
   29d9c:	3411      	adds	r4, #17
   29d9e:	f853 1b04 	ldr.w	r1, [r3], #4
   29da2:	42a3      	cmp	r3, r4
   29da4:	f842 1b04 	str.w	r1, [r2], #4
   29da8:	d1f9      	bne.n	29d9e <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   29daa:	2313      	movs	r3, #19
   29dac:	e7e9      	b.n	29d82 <bt_gatt_attr_read_chrc+0x28>

00029dae <bt_gatt_foreach_attr>:
{
   29dae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   29db0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29db4:	2300      	movs	r3, #0
   29db6:	461a      	mov	r2, r3
   29db8:	9300      	str	r3, [sp, #0]
   29dba:	f7ed fc07 	bl	175cc <bt_gatt_foreach_attr_type>
}
   29dbe:	b005      	add	sp, #20
   29dc0:	f85d fb04 	ldr.w	pc, [sp], #4

00029dc4 <db_hash_process>:
	db_hash_gen(true);
   29dc4:	f7ed bc72 	b.w	176ac <db_hash_gen.constprop.0>

00029dc8 <bt_gatt_check_perm>:
{
   29dc8:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   29dca:	07d4      	lsls	r4, r2, #31
{
   29dcc:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29dce:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   29dd0:	d504      	bpl.n	29ddc <bt_gatt_check_perm+0x14>
   29dd2:	f013 0f95 	tst.w	r3, #149	; 0x95
   29dd6:	d027      	beq.n	29e28 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29dd8:	6848      	ldr	r0, [r1, #4]
   29dda:	b328      	cbz	r0, 29e28 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   29ddc:	0790      	lsls	r0, r2, #30
   29dde:	d504      	bpl.n	29dea <bt_gatt_check_perm+0x22>
   29de0:	f413 7f95 	tst.w	r3, #298	; 0x12a
   29de4:	d022      	beq.n	29e2c <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   29de6:	6889      	ldr	r1, [r1, #8]
   29de8:	b301      	cbz	r1, 29e2c <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   29dea:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   29dee:	f414 7fc0 	tst.w	r4, #384	; 0x180
   29df2:	d007      	beq.n	29e04 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   29df4:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   29df8:	b90b      	cbnz	r3, 29dfe <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   29dfa:	2005      	movs	r0, #5
}
   29dfc:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   29dfe:	7b5b      	ldrb	r3, [r3, #13]
   29e00:	06db      	lsls	r3, r3, #27
   29e02:	d5fa      	bpl.n	29dfa <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   29e04:	f014 0f30 	tst.w	r4, #48	; 0x30
   29e08:	d108      	bne.n	29e1c <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   29e0a:	f014 000c 	ands.w	r0, r4, #12
   29e0e:	d0f5      	beq.n	29dfc <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   29e10:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   29e12:	2b00      	cmp	r3, #0
   29e14:	bf14      	ite	ne
   29e16:	2000      	movne	r0, #0
   29e18:	200f      	moveq	r0, #15
   29e1a:	e7ef      	b.n	29dfc <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   29e1c:	4628      	mov	r0, r5
   29e1e:	f7ff f8ee 	bl	28ffe <bt_conn_get_security>
   29e22:	2802      	cmp	r0, #2
   29e24:	d8f1      	bhi.n	29e0a <bt_gatt_check_perm+0x42>
   29e26:	e7e8      	b.n	29dfa <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   29e28:	2002      	movs	r0, #2
   29e2a:	e7e7      	b.n	29dfc <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   29e2c:	2003      	movs	r0, #3
   29e2e:	e7e5      	b.n	29dfc <bt_gatt_check_perm+0x34>

00029e30 <bt_gatt_change_aware>:
{
   29e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29e32:	4606      	mov	r6, r0
   29e34:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   29e36:	f7ed f911 	bl	1705c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   29e3a:	b1e0      	cbz	r0, 29e76 <bt_gatt_change_aware+0x46>
   29e3c:	7a03      	ldrb	r3, [r0, #8]
   29e3e:	07db      	lsls	r3, r3, #31
   29e40:	d519      	bpl.n	29e76 <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   29e42:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29e46:	e8d4 5faf 	lda	r5, [r4]
   29e4a:	f015 0501 	ands.w	r5, r5, #1
   29e4e:	d112      	bne.n	29e76 <bt_gatt_change_aware+0x46>
	if (!req) {
   29e50:	b197      	cbz	r7, 29e78 <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29e52:	e8d4 1fef 	ldaex	r1, [r4]
   29e56:	f021 0302 	bic.w	r3, r1, #2
   29e5a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   29e5e:	2a00      	cmp	r2, #0
   29e60:	d1f7      	bne.n	29e52 <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   29e62:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   29e66:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   29e68:	d008      	beq.n	29e7c <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   29e6a:	f7ff fdc6 	bl	299fa <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   29e6e:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   29e70:	4620      	mov	r0, r4
   29e72:	f7ff ff31 	bl	29cd8 <atomic_set_bit>
		return true;
   29e76:	2501      	movs	r5, #1
}
   29e78:	4628      	mov	r0, r5
   29e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   29e7c:	f7ff fdbb 	bl	299f6 <bt_att_fixed_chan_only>
   29e80:	2800      	cmp	r0, #0
   29e82:	d0f9      	beq.n	29e78 <bt_gatt_change_aware+0x48>
   29e84:	4630      	mov	r0, r6
   29e86:	f7ff fdcd 	bl	29a24 <bt_att_out_of_sync_sent_on_fixed>
   29e8a:	2800      	cmp	r0, #0
   29e8c:	d0f4      	beq.n	29e78 <bt_gatt_change_aware+0x48>
   29e8e:	e8d4 3fef 	ldaex	r3, [r4]
   29e92:	f023 0302 	bic.w	r3, r3, #2
   29e96:	e8c4 3fe2 	stlex	r2, r3, [r4]
   29e9a:	2a00      	cmp	r2, #0
   29e9c:	d1f7      	bne.n	29e8e <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   29e9e:	4630      	mov	r0, r6
   29ea0:	f7ff fdab 	bl	299fa <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   29ea4:	4639      	mov	r1, r7
   29ea6:	e7e3      	b.n	29e70 <bt_gatt_change_aware+0x40>

00029ea8 <smp_pairing_rsp>:
}
   29ea8:	2007      	movs	r0, #7
   29eaa:	4770      	bx	lr

00029eac <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29eac:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29eb0:	4108      	asrs	r0, r1
}
   29eb2:	f000 0001 	and.w	r0, r0, #1
   29eb6:	4770      	bx	lr

00029eb8 <update_keys_check>:
{
   29eb8:	4603      	mov	r3, r0
   29eba:	b510      	push	{r4, lr}
	if (!keys ||
   29ebc:	b1d9      	cbz	r1, 29ef6 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   29ebe:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   29ec0:	f010 0f24 	tst.w	r0, #36	; 0x24
   29ec4:	d017      	beq.n	29ef6 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   29ec6:	7d1a      	ldrb	r2, [r3, #20]
   29ec8:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   29eca:	7b09      	ldrb	r1, [r1, #12]
   29ecc:	42a2      	cmp	r2, r4
   29ece:	bf28      	it	cs
   29ed0:	4622      	movcs	r2, r4
   29ed2:	4291      	cmp	r1, r2
   29ed4:	d901      	bls.n	29eda <update_keys_check+0x22>
			return false;
   29ed6:	2000      	movs	r0, #0
}
   29ed8:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   29eda:	0682      	lsls	r2, r0, #26
   29edc:	d404      	bmi.n	29ee8 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   29ede:	7a18      	ldrb	r0, [r3, #8]
   29ee0:	3800      	subs	r0, #0
   29ee2:	bf18      	it	ne
   29ee4:	2001      	movne	r0, #1
   29ee6:	e7f7      	b.n	29ed8 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   29ee8:	2105      	movs	r1, #5
   29eea:	1d18      	adds	r0, r3, #4
   29eec:	f7ff ffde 	bl	29eac <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   29ef0:	2800      	cmp	r0, #0
   29ef2:	d1f4      	bne.n	29ede <update_keys_check+0x26>
   29ef4:	e7ef      	b.n	29ed6 <update_keys_check+0x1e>
	return true;
   29ef6:	2001      	movs	r0, #1
   29ef8:	e7ee      	b.n	29ed8 <update_keys_check+0x20>

00029efa <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29efa:	2301      	movs	r3, #1
   29efc:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29efe:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29f00:	e8d0 2fef 	ldaex	r2, [r0]
   29f04:	401a      	ands	r2, r3
   29f06:	e8c0 2fe1 	stlex	r1, r2, [r0]
   29f0a:	2900      	cmp	r1, #0
   29f0c:	d1f8      	bne.n	29f00 <atomic_clear_bit+0x6>
}
   29f0e:	4770      	bx	lr

00029f10 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29f10:	680b      	ldr	r3, [r1, #0]
   29f12:	6003      	str	r3, [r0, #0]
   29f14:	888b      	ldrh	r3, [r1, #4]
   29f16:	8083      	strh	r3, [r0, #4]
   29f18:	798b      	ldrb	r3, [r1, #6]
   29f1a:	7183      	strb	r3, [r0, #6]
   29f1c:	4770      	bx	lr

00029f1e <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   29f1e:	2007      	movs	r0, #7
   29f20:	4770      	bx	lr

00029f22 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   29f22:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29f24:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   29f26:	2200      	movs	r2, #0
   29f28:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   29f2a:	4604      	mov	r4, r0
   29f2c:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   29f2e:	460a      	mov	r2, r1
   29f30:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   29f34:	2106      	movs	r1, #6
   29f36:	f7ff f90c 	bl	29152 <bt_l2cap_send_cb>
   29f3a:	b128      	cbz	r0, 29f48 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   29f3c:	4628      	mov	r0, r5
}
   29f3e:	b003      	add	sp, #12
   29f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   29f44:	f7f0 ba32 	b.w	1a3ac <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   29f48:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   29f4c:	2300      	movs	r3, #0
   29f4e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   29f52:	b003      	add	sp, #12
   29f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   29f58:	f7f7 bd26 	b.w	219a8 <k_work_reschedule>

00029f5c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29f5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29f5e:	ab0b      	add	r3, sp, #44	; 0x2c
   29f60:	9305      	str	r3, [sp, #20]
   29f62:	9303      	str	r3, [sp, #12]
   29f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29f66:	9302      	str	r3, [sp, #8]
   29f68:	2300      	movs	r3, #0
   29f6a:	4618      	mov	r0, r3
   29f6c:	e9cd 3300 	strd	r3, r3, [sp]
   29f70:	f7e5 f9e0 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   29f74:	b007      	add	sp, #28
   29f76:	f85d fb04 	ldr.w	pc, [sp], #4

00029f7a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29f7a:	2301      	movs	r3, #1
   29f7c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29f7e:	e8d0 2fef 	ldaex	r2, [r0]
   29f82:	431a      	orrs	r2, r3
   29f84:	e8c0 2fe1 	stlex	r1, r2, [r0]
   29f88:	2900      	cmp	r1, #0
   29f8a:	d1f8      	bne.n	29f7e <atomic_set_bit+0x4>
}
   29f8c:	4770      	bx	lr

00029f8e <smp_keypress_notif>:
{
   29f8e:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   29f90:	210e      	movs	r1, #14
   29f92:	f7ff fff2 	bl	29f7a <atomic_set_bit>
}
   29f96:	2000      	movs	r0, #0
   29f98:	bd08      	pop	{r3, pc}

00029f9a <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   29f9a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   29f9c:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   29f9e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   29fa0:	4628      	mov	r0, r5
   29fa2:	2104      	movs	r1, #4
   29fa4:	f7ff ff82 	bl	29eac <atomic_test_bit>
   29fa8:	b168      	cbz	r0, 29fc6 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   29faa:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   29fac:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   29fae:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   29fb0:	4608      	mov	r0, r1
   29fb2:	f7ff f8cb 	bl	2914c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   29fb6:	4604      	mov	r4, r0
   29fb8:	b940      	cbnz	r0, 29fcc <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   29fba:	2104      	movs	r1, #4
   29fbc:	4628      	mov	r0, r5
   29fbe:	f7ff ffdc 	bl	29f7a <atomic_set_bit>
}
   29fc2:	4620      	mov	r0, r4
   29fc4:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   29fc6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   29fca:	e7ef      	b.n	29fac <smp_create_pdu.constprop.0+0x12>
   29fcc:	2101      	movs	r1, #1
   29fce:	300c      	adds	r0, #12
   29fd0:	f7f0 fb0e 	bl	1a5f0 <net_buf_simple_add>
	hdr->code = op;
   29fd4:	7006      	strb	r6, [r0, #0]
	return buf;
   29fd6:	e7f4      	b.n	29fc2 <smp_create_pdu.constprop.0+0x28>

00029fd8 <send_pairing_rsp>:
{
   29fd8:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   29fda:	2102      	movs	r1, #2
{
   29fdc:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   29fde:	f7ff ffdc 	bl	29f9a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   29fe2:	4605      	mov	r5, r0
   29fe4:	b180      	cbz	r0, 2a008 <send_pairing_rsp+0x30>
   29fe6:	2106      	movs	r1, #6
   29fe8:	300c      	adds	r0, #12
   29fea:	f7f0 fb01 	bl	1a5f0 <net_buf_simple_add>
   29fee:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   29ff2:	2200      	movs	r2, #0
   29ff4:	6003      	str	r3, [r0, #0]
   29ff6:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   29ffa:	4629      	mov	r1, r5
   29ffc:	8083      	strh	r3, [r0, #4]
   29ffe:	4620      	mov	r0, r4
   2a000:	f7ff ff8f 	bl	29f22 <smp_send.constprop.0>
	return 0;
   2a004:	2000      	movs	r0, #0
}
   2a006:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2a008:	2008      	movs	r0, #8
   2a00a:	e7fc      	b.n	2a006 <send_pairing_rsp+0x2e>

0002a00c <smp_send_pairing_random>:
{
   2a00c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2a00e:	2104      	movs	r1, #4
{
   2a010:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2a012:	f7ff ffc2 	bl	29f9a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2a016:	4605      	mov	r5, r0
   2a018:	b1a0      	cbz	r0, 2a044 <smp_send_pairing_random+0x38>
   2a01a:	2110      	movs	r1, #16
   2a01c:	300c      	adds	r0, #12
   2a01e:	f7f0 fae7 	bl	1a5f0 <net_buf_simple_add>
   2a022:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2a026:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2a02a:	f853 1b04 	ldr.w	r1, [r3], #4
   2a02e:	4293      	cmp	r3, r2
   2a030:	f840 1b04 	str.w	r1, [r0], #4
   2a034:	d1f9      	bne.n	2a02a <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2a036:	4620      	mov	r0, r4
   2a038:	2200      	movs	r2, #0
   2a03a:	4629      	mov	r1, r5
   2a03c:	f7ff ff71 	bl	29f22 <smp_send.constprop.0>
	return 0;
   2a040:	2000      	movs	r0, #0
}
   2a042:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2a044:	2008      	movs	r0, #8
   2a046:	e7fc      	b.n	2a042 <smp_send_pairing_random+0x36>

0002a048 <smp_dhkey_check>:
{
   2a048:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2a04a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   2a04e:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2a050:	78db      	ldrb	r3, [r3, #3]
   2a052:	2b01      	cmp	r3, #1
   2a054:	d119      	bne.n	2a08a <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2a056:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2a058:	1d06      	adds	r6, r0, #4
   2a05a:	2110      	movs	r1, #16
   2a05c:	4630      	mov	r0, r6
   2a05e:	f7ff ff4c 	bl	29efa <atomic_clear_bit>
   2a062:	462b      	mov	r3, r5
   2a064:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2a068:	f105 0110 	add.w	r1, r5, #16
   2a06c:	f853 0b04 	ldr.w	r0, [r3], #4
   2a070:	428b      	cmp	r3, r1
   2a072:	f842 0b04 	str.w	r0, [r2], #4
   2a076:	d1f9      	bne.n	2a06c <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2a078:	2107      	movs	r1, #7
   2a07a:	4630      	mov	r0, r6
   2a07c:	f7ff ff16 	bl	29eac <atomic_test_bit>
   2a080:	b128      	cbz	r0, 2a08e <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a082:	2109      	movs	r1, #9
   2a084:	4630      	mov	r0, r6
   2a086:	f7ff ff78 	bl	29f7a <atomic_set_bit>
}
   2a08a:	2000      	movs	r0, #0
   2a08c:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a08e:	210a      	movs	r1, #10
   2a090:	4630      	mov	r0, r6
   2a092:	f7ff ff0b 	bl	29eac <atomic_test_bit>
   2a096:	2800      	cmp	r0, #0
   2a098:	d1f3      	bne.n	2a082 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2a09a:	4620      	mov	r0, r4
}
   2a09c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2a0a0:	f7ee bcf4 	b.w	18a8c <compute_and_check_and_send_periph_dhcheck>

0002a0a4 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2a0a4:	2007      	movs	r0, #7
   2a0a6:	4770      	bx	lr

0002a0a8 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a0a8:	2301      	movs	r3, #1
   2a0aa:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a0ae:	43ca      	mvns	r2, r1
{
   2a0b0:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a0b2:	e8d0 3fef 	ldaex	r3, [r0]
   2a0b6:	ea03 0402 	and.w	r4, r3, r2
   2a0ba:	e8c0 4fe5 	stlex	r5, r4, [r0]
   2a0be:	2d00      	cmp	r5, #0
   2a0c0:	d1f7      	bne.n	2a0b2 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   2a0c2:	4219      	tst	r1, r3
}
   2a0c4:	bf14      	ite	ne
   2a0c6:	2001      	movne	r0, #1
   2a0c8:	2000      	moveq	r0, #0
   2a0ca:	bd30      	pop	{r4, r5, pc}

0002a0cc <smp_reset>:
{
   2a0cc:	b538      	push	{r3, r4, r5, lr}
   2a0ce:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a0d0:	2500      	movs	r5, #0
   2a0d2:	1d03      	adds	r3, r0, #4
   2a0d4:	e8d3 2fef 	ldaex	r2, [r3]
   2a0d8:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2a0dc:	2900      	cmp	r1, #0
   2a0de:	d1f9      	bne.n	2a0d4 <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   2a0e0:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2a0e4:	f7f7 fc66 	bl	219b4 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2a0e8:	7225      	strb	r5, [r4, #8]
   2a0ea:	e8d4 3fef 	ldaex	r3, [r4]
   2a0ee:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2a0f2:	2a00      	cmp	r2, #0
   2a0f4:	d1f9      	bne.n	2a0ea <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2a0f6:	4620      	mov	r0, r4
}
   2a0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2a0fc:	2101      	movs	r1, #1
   2a0fe:	f7ff bf3c 	b.w	29f7a <atomic_set_bit>

0002a102 <smp_c1>:
{
   2a102:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a104:	b089      	sub	sp, #36	; 0x24
   2a106:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2a10a:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2a10c:	7830      	ldrb	r0, [r6, #0]
{
   2a10e:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2a110:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2a114:	7838      	ldrb	r0, [r7, #0]
   2a116:	f101 0c10 	add.w	ip, r1, #16
   2a11a:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2a11e:	6810      	ldr	r0, [r2, #0]
   2a120:	f8cd 0002 	str.w	r0, [sp, #2]
   2a124:	8890      	ldrh	r0, [r2, #4]
   2a126:	7992      	ldrb	r2, [r2, #6]
   2a128:	f8ad 0006 	strh.w	r0, [sp, #6]
   2a12c:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2a130:	681a      	ldr	r2, [r3, #0]
   2a132:	4668      	mov	r0, sp
   2a134:	f8cd 2009 	str.w	r2, [sp, #9]
   2a138:	889a      	ldrh	r2, [r3, #4]
   2a13a:	799b      	ldrb	r3, [r3, #6]
   2a13c:	f8ad 200d 	strh.w	r2, [sp, #13]
   2a140:	4622      	mov	r2, r4
   2a142:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   2a146:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a14a:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   2a14e:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   2a150:	ea83 030e 	eor.w	r3, r3, lr
   2a154:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2a158:	d1f5      	bne.n	2a146 <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2a15a:	4622      	mov	r2, r4
   2a15c:	4621      	mov	r1, r4
   2a15e:	4628      	mov	r0, r5
   2a160:	f7fe fe5a 	bl	28e18 <bt_encrypt_le>
	if (err) {
   2a164:	4603      	mov	r3, r0
   2a166:	bb28      	cbnz	r0, 2a1b4 <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   2a168:	9307      	str	r3, [sp, #28]
   2a16a:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   2a16c:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2a170:	f8d7 0001 	ldr.w	r0, [r7, #1]
   2a174:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2a178:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2a17c:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   2a17e:	f8cd 2016 	str.w	r2, [sp, #22]
   2a182:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   2a186:	f104 0010 	add.w	r0, r4, #16
   2a18a:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   2a18e:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   2a190:	f813 2b01 	ldrb.w	r2, [r3], #1
   2a194:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   2a198:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   2a19a:	ea82 0206 	eor.w	r2, r2, r6
   2a19e:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   2a1a2:	d1f5      	bne.n	2a190 <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   2a1a4:	4622      	mov	r2, r4
   2a1a6:	4621      	mov	r1, r4
   2a1a8:	4628      	mov	r0, r5
}
   2a1aa:	b009      	add	sp, #36	; 0x24
   2a1ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2a1b0:	f7fe be32 	b.w	28e18 <bt_encrypt_le>
}
   2a1b4:	b009      	add	sp, #36	; 0x24
   2a1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a1b8 <legacy_pairing_confirm>:
{
   2a1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a1ba:	1d07      	adds	r7, r0, #4
{
   2a1bc:	4604      	mov	r4, r0
   2a1be:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a1c0:	210a      	movs	r1, #10
   2a1c2:	4638      	mov	r0, r7
   2a1c4:	f7ff fe72 	bl	29eac <atomic_test_bit>
   2a1c8:	bb88      	cbnz	r0, 2a22e <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2a1ca:	2104      	movs	r1, #4
   2a1cc:	4620      	mov	r0, r4
   2a1ce:	f7ff fed4 	bl	29f7a <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2a1d2:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2a1d4:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2a1d8:	f7ff fedf 	bl	29f9a <smp_create_pdu.constprop.0>
	if (!buf) {
   2a1dc:	4605      	mov	r5, r0
   2a1de:	b1c0      	cbz	r0, 2a212 <legacy_pairing_confirm+0x5a>
   2a1e0:	2110      	movs	r1, #16
   2a1e2:	300c      	adds	r0, #12
   2a1e4:	f7f0 fa04 	bl	1a5f0 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2a1e8:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   2a1ec:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2a1ee:	9002      	str	r0, [sp, #8]
   2a1f0:	9301      	str	r3, [sp, #4]
   2a1f2:	9600      	str	r6, [sp, #0]
   2a1f4:	f104 0310 	add.w	r3, r4, #16
   2a1f8:	f104 0209 	add.w	r2, r4, #9
   2a1fc:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2a200:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2a204:	f7ff ff7d 	bl	2a102 <smp_c1>
   2a208:	4606      	mov	r6, r0
   2a20a:	b128      	cbz	r0, 2a218 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2a20c:	4628      	mov	r0, r5
   2a20e:	f7f0 f8cd 	bl	1a3ac <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2a212:	2008      	movs	r0, #8
}
   2a214:	b005      	add	sp, #20
   2a216:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   2a218:	4602      	mov	r2, r0
   2a21a:	4629      	mov	r1, r5
   2a21c:	4620      	mov	r0, r4
   2a21e:	f7ff fe80 	bl	29f22 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2a222:	4631      	mov	r1, r6
   2a224:	4638      	mov	r0, r7
   2a226:	f7ff fe68 	bl	29efa <atomic_clear_bit>
	return 0;
   2a22a:	2000      	movs	r0, #0
   2a22c:	e7f2      	b.n	2a214 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2a22e:	2100      	movs	r1, #0
   2a230:	4638      	mov	r0, r7
   2a232:	f7ff fea2 	bl	29f7a <atomic_set_bit>
	return 0;
   2a236:	e7f8      	b.n	2a22a <legacy_pairing_confirm+0x72>

0002a238 <bt_smp_request_ltk>:
{
   2a238:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2a23c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2a23e:	4604      	mov	r4, r0
   2a240:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2a244:	f7ee f834 	bl	182b0 <smp_chan_get>
	if (!smp) {
   2a248:	4605      	mov	r5, r0
   2a24a:	2800      	cmp	r0, #0
   2a24c:	d07c      	beq.n	2a348 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2a24e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a252:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2a254:	f1b8 0f00 	cmp.w	r8, #0
   2a258:	d128      	bne.n	2a2ac <bt_smp_request_ltk+0x74>
   2a25a:	e9dd 3200 	ldrd	r3, r2, [sp]
   2a25e:	4313      	orrs	r3, r2
   2a260:	d124      	bne.n	2a2ac <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a262:	2103      	movs	r1, #3
   2a264:	4630      	mov	r0, r6
   2a266:	f7ff fe21 	bl	29eac <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2a26a:	b1f8      	cbz	r0, 2a2ac <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2a26c:	2101      	movs	r1, #1
   2a26e:	4630      	mov	r0, r6
   2a270:	f7ff fe1c 	bl	29eac <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a274:	b1d0      	cbz	r0, 2a2ac <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2a276:	7d2c      	ldrb	r4, [r5, #20]
   2a278:	7b6b      	ldrb	r3, [r5, #13]
   2a27a:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2a27e:	429c      	cmp	r4, r3
   2a280:	bf28      	it	cs
   2a282:	461c      	movcs	r4, r3
   2a284:	4622      	mov	r2, r4
   2a286:	4638      	mov	r0, r7
   2a288:	f001 ff20 	bl	2c0cc <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2a28c:	2c0f      	cmp	r4, #15
   2a28e:	d805      	bhi.n	2a29c <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   2a290:	4641      	mov	r1, r8
   2a292:	f1c4 0210 	rsb	r2, r4, #16
   2a296:	1938      	adds	r0, r7, r4
   2a298:	f001 ff52 	bl	2c140 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2a29c:	4630      	mov	r0, r6
   2a29e:	2101      	movs	r1, #1
   2a2a0:	f7ff fe6b 	bl	29f7a <atomic_set_bit>
		return true;
   2a2a4:	2001      	movs	r0, #1
}
   2a2a6:	b002      	add	sp, #8
   2a2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2a2ac:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   2a2b0:	b983      	cbnz	r3, 2a2d4 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2a2b2:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2a2b6:	4642      	mov	r2, r8
   2a2b8:	2020      	movs	r0, #32
   2a2ba:	7a21      	ldrb	r1, [r4, #8]
   2a2bc:	f7ef fc64 	bl	19b88 <bt_keys_find>
   2a2c0:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   2a2c4:	b930      	cbnz	r0, 2a2d4 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2a2c6:	4642      	mov	r2, r8
   2a2c8:	2001      	movs	r0, #1
   2a2ca:	7a21      	ldrb	r1, [r4, #8]
   2a2cc:	f7ef fc5c 	bl	19b88 <bt_keys_find>
   2a2d0:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   2a2d4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2a2d8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   2a2dc:	f1b8 0f00 	cmp.w	r8, #0
   2a2e0:	d10c      	bne.n	2a2fc <bt_smp_request_ltk+0xc4>
   2a2e2:	e9dd 3200 	ldrd	r3, r2, [sp]
   2a2e6:	4313      	orrs	r3, r2
   2a2e8:	d108      	bne.n	2a2fc <bt_smp_request_ltk+0xc4>
   2a2ea:	b300      	cbz	r0, 2a32e <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2a2ec:	89c3      	ldrh	r3, [r0, #14]
   2a2ee:	069a      	lsls	r2, r3, #26
   2a2f0:	d505      	bpl.n	2a2fe <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2a2f2:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a2f4:	f100 011a 	add.w	r1, r0, #26
   2a2f8:	4622      	mov	r2, r4
   2a2fa:	e7c4      	b.n	2a286 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2a2fc:	b1b8      	cbz	r0, 2a32e <bt_smp_request_ltk+0xf6>
   2a2fe:	89c3      	ldrh	r3, [r0, #14]
   2a300:	07db      	lsls	r3, r3, #31
   2a302:	d514      	bpl.n	2a32e <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2a304:	2208      	movs	r2, #8
   2a306:	4669      	mov	r1, sp
   2a308:	3040      	adds	r0, #64	; 0x40
   2a30a:	f001 fecf 	bl	2c0ac <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2a30e:	b970      	cbnz	r0, 2a32e <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2a310:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   2a314:	2202      	movs	r2, #2
   2a316:	a908      	add	r1, sp, #32
   2a318:	3048      	adds	r0, #72	; 0x48
   2a31a:	f001 fec7 	bl	2c0ac <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2a31e:	4680      	mov	r8, r0
   2a320:	b928      	cbnz	r0, 2a32e <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2a322:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   2a326:	7b0c      	ldrb	r4, [r1, #12]
   2a328:	314a      	adds	r1, #74	; 0x4a
   2a32a:	4622      	mov	r2, r4
   2a32c:	e7ab      	b.n	2a286 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a32e:	210f      	movs	r1, #15
   2a330:	4630      	mov	r0, r6
   2a332:	f7ff fdbb 	bl	29eac <atomic_test_bit>
   2a336:	b120      	cbz	r0, 2a342 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2a338:	2202      	movs	r2, #2
   2a33a:	2106      	movs	r1, #6
   2a33c:	4620      	mov	r0, r4
   2a33e:	f7eb f98b 	bl	15658 <bt_conn_security_changed>
	smp_reset(smp);
   2a342:	4628      	mov	r0, r5
   2a344:	f7ff fec2 	bl	2a0cc <smp_reset>
		return false;
   2a348:	2000      	movs	r0, #0
   2a34a:	e7ac      	b.n	2a2a6 <bt_smp_request_ltk+0x6e>

0002a34c <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2a34c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a350:	4770      	bx	lr

0002a352 <bt_smp_dhkey_ready>:
{
   2a352:	b570      	push	{r4, r5, r6, lr}
   2a354:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2a356:	2008      	movs	r0, #8
   2a358:	f7ed ff1e 	bl	18198 <smp_find>
	if (smp) {
   2a35c:	4605      	mov	r5, r0
   2a35e:	b1e0      	cbz	r0, 2a39a <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2a360:	1d06      	adds	r6, r0, #4
   2a362:	2108      	movs	r1, #8
   2a364:	4630      	mov	r0, r6
   2a366:	f7ff fdc8 	bl	29efa <atomic_clear_bit>
	if (!dhkey) {
   2a36a:	b3bc      	cbz	r4, 2a3dc <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2a36c:	2107      	movs	r1, #7
   2a36e:	f7ff fdc4 	bl	29efa <atomic_clear_bit>
   2a372:	4623      	mov	r3, r4
   2a374:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2a378:	f104 0120 	add.w	r1, r4, #32
   2a37c:	f853 0b04 	ldr.w	r0, [r3], #4
   2a380:	428b      	cmp	r3, r1
   2a382:	f842 0b04 	str.w	r0, [r2], #4
   2a386:	d1f9      	bne.n	2a37c <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a388:	210a      	movs	r1, #10
   2a38a:	4630      	mov	r0, r6
   2a38c:	f7ff fd8e 	bl	29eac <atomic_test_bit>
   2a390:	b170      	cbz	r0, 2a3b0 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a392:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a394:	4630      	mov	r0, r6
   2a396:	f7ff fdf0 	bl	29f7a <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2a39a:	2007      	movs	r0, #7
   2a39c:	f7ed fefc 	bl	18198 <smp_find>
		if (smp) {
   2a3a0:	4604      	mov	r4, r0
   2a3a2:	b1e8      	cbz	r0, 2a3e0 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2a3a4:	f7ed ffba 	bl	1831c <smp_dhkey_generate>
			if (err) {
   2a3a8:	4601      	mov	r1, r0
   2a3aa:	b1c8      	cbz	r0, 2a3e0 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2a3ac:	4620      	mov	r0, r4
   2a3ae:	e012      	b.n	2a3d6 <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2a3b0:	2110      	movs	r1, #16
   2a3b2:	4630      	mov	r0, r6
   2a3b4:	f7ff fd7a 	bl	29eac <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a3b8:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2a3ba:	2800      	cmp	r0, #0
   2a3bc:	d1ea      	bne.n	2a394 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2a3be:	4630      	mov	r0, r6
   2a3c0:	f7ff fd74 	bl	29eac <atomic_test_bit>
   2a3c4:	2800      	cmp	r0, #0
   2a3c6:	d0e8      	beq.n	2a39a <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2a3c8:	4628      	mov	r0, r5
   2a3ca:	f7ee fb5f 	bl	18a8c <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2a3ce:	4601      	mov	r1, r0
   2a3d0:	2800      	cmp	r0, #0
   2a3d2:	d0e2      	beq.n	2a39a <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2a3d4:	4628      	mov	r0, r5
   2a3d6:	f7ee feed 	bl	191b4 <smp_error>
   2a3da:	e7de      	b.n	2a39a <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2a3dc:	210b      	movs	r1, #11
   2a3de:	e7f9      	b.n	2a3d4 <bt_smp_dhkey_ready+0x82>
}
   2a3e0:	bd70      	pop	{r4, r5, r6, pc}

0002a3e2 <bt_smp_disconnected>:
{
   2a3e2:	b570      	push	{r4, r5, r6, lr}
   2a3e4:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2a3e6:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2a3ea:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a3ee:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2a3f0:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   2a3f4:	f7f7 fade 	bl	219b4 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a3f8:	2103      	movs	r1, #3
   2a3fa:	4620      	mov	r0, r4
   2a3fc:	f7ff fd56 	bl	29eac <atomic_test_bit>
   2a400:	b1a0      	cbz	r0, 2a42c <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2a402:	2108      	movs	r1, #8
   2a404:	4630      	mov	r0, r6
   2a406:	f7ee fe57 	bl	190b8 <smp_pairing_complete>
	if (keys) {
   2a40a:	b13d      	cbz	r5, 2a41c <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2a40c:	89eb      	ldrh	r3, [r5, #14]
   2a40e:	b113      	cbz	r3, 2a416 <bt_smp_disconnected+0x34>
   2a410:	7b6b      	ldrb	r3, [r5, #13]
   2a412:	079b      	lsls	r3, r3, #30
   2a414:	d502      	bpl.n	2a41c <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2a416:	4628      	mov	r0, r5
   2a418:	f7ef fc9c 	bl	19d54 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2a41c:	4630      	mov	r0, r6
}
   2a41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a422:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   2a426:	2100      	movs	r1, #0
   2a428:	f001 be8a 	b.w	2c140 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a42c:	2101      	movs	r1, #1
   2a42e:	4620      	mov	r0, r4
   2a430:	f7ff fd3c 	bl	29eac <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a434:	2800      	cmp	r0, #0
   2a436:	d1e4      	bne.n	2a402 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a438:	210f      	movs	r1, #15
   2a43a:	4620      	mov	r0, r4
   2a43c:	f7ff fd36 	bl	29eac <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a440:	2800      	cmp	r0, #0
   2a442:	d1de      	bne.n	2a402 <bt_smp_disconnected+0x20>
   2a444:	e7e1      	b.n	2a40a <bt_smp_disconnected+0x28>

0002a446 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2a446:	b510      	push	{r4, lr}
   2a448:	1e43      	subs	r3, r0, #1
   2a44a:	f100 0210 	add.w	r2, r0, #16
   2a44e:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2a450:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2a454:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2a458:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2a45a:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2a45c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2a45e:	d1f7      	bne.n	2a450 <sys_mem_swap.constprop.0+0xa>
	}
}
   2a460:	bd10      	pop	{r4, pc}

0002a462 <bt_crypto_aes_cmac>:
{
   2a462:	b570      	push	{r4, r5, r6, lr}
   2a464:	b0c2      	sub	sp, #264	; 0x108
   2a466:	460d      	mov	r5, r1
   2a468:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a46a:	4601      	mov	r1, r0
   2a46c:	aa16      	add	r2, sp, #88	; 0x58
   2a46e:	4668      	mov	r0, sp
{
   2a470:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a472:	f7fd fe01 	bl	28078 <tc_cmac_setup>
   2a476:	b918      	cbnz	r0, 2a480 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2a478:	f06f 0004 	mvn.w	r0, #4
}
   2a47c:	b042      	add	sp, #264	; 0x108
   2a47e:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2a480:	4632      	mov	r2, r6
   2a482:	4629      	mov	r1, r5
   2a484:	4668      	mov	r0, sp
   2a486:	f7fd fe22 	bl	280ce <tc_cmac_update>
   2a48a:	2800      	cmp	r0, #0
   2a48c:	d0f4      	beq.n	2a478 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2a48e:	4669      	mov	r1, sp
   2a490:	4620      	mov	r0, r4
   2a492:	f7fd fe86 	bl	281a2 <tc_cmac_final>
   2a496:	2800      	cmp	r0, #0
   2a498:	d0ee      	beq.n	2a478 <bt_crypto_aes_cmac+0x16>
	return 0;
   2a49a:	2000      	movs	r0, #0
   2a49c:	e7ee      	b.n	2a47c <bt_crypto_aes_cmac+0x1a>

0002a49e <bt_crypto_f4>:
{
   2a49e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a4a0:	460e      	mov	r6, r1
   2a4a2:	4614      	mov	r4, r2
   2a4a4:	461d      	mov	r5, r3
   2a4a6:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   2a4a8:	4601      	mov	r1, r0
   2a4aa:	2220      	movs	r2, #32
   2a4ac:	a805      	add	r0, sp, #20
{
   2a4ae:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2a4b0:	f7ef fc72 	bl	19d98 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2a4b4:	2220      	movs	r2, #32
   2a4b6:	4631      	mov	r1, r6
   2a4b8:	a80d      	add	r0, sp, #52	; 0x34
   2a4ba:	f7ef fc6d 	bl	19d98 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2a4be:	4621      	mov	r1, r4
   2a4c0:	2210      	movs	r2, #16
   2a4c2:	a801      	add	r0, sp, #4
	m[64] = z;
   2a4c4:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2a4c8:	f7ef fc66 	bl	19d98 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2a4cc:	463b      	mov	r3, r7
   2a4ce:	2241      	movs	r2, #65	; 0x41
   2a4d0:	a905      	add	r1, sp, #20
   2a4d2:	a801      	add	r0, sp, #4
   2a4d4:	f7ff ffc5 	bl	2a462 <bt_crypto_aes_cmac>
	if (err) {
   2a4d8:	4604      	mov	r4, r0
   2a4da:	b910      	cbnz	r0, 2a4e2 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2a4dc:	4638      	mov	r0, r7
   2a4de:	f7ff ffb2 	bl	2a446 <sys_mem_swap.constprop.0>
}
   2a4e2:	4620      	mov	r0, r4
   2a4e4:	b017      	add	sp, #92	; 0x5c
   2a4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a4e8 <bt_crypto_f6>:
{
   2a4e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a4ec:	4616      	mov	r6, r2
   2a4ee:	461d      	mov	r5, r3
   2a4f0:	b097      	sub	sp, #92	; 0x5c
   2a4f2:	4604      	mov	r4, r0
   2a4f4:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2a4f8:	2210      	movs	r2, #16
   2a4fa:	a805      	add	r0, sp, #20
{
   2a4fc:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2a4fe:	f7ef fc4b 	bl	19d98 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2a502:	2210      	movs	r2, #16
   2a504:	4631      	mov	r1, r6
   2a506:	a809      	add	r0, sp, #36	; 0x24
   2a508:	f7ef fc46 	bl	19d98 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2a50c:	2210      	movs	r2, #16
   2a50e:	4629      	mov	r1, r5
   2a510:	a80d      	add	r0, sp, #52	; 0x34
   2a512:	f7ef fc41 	bl	19d98 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2a516:	2203      	movs	r2, #3
   2a518:	991e      	ldr	r1, [sp, #120]	; 0x78
   2a51a:	a811      	add	r0, sp, #68	; 0x44
   2a51c:	f7ef fc3c 	bl	19d98 <sys_memcpy_swap>
	m[51] = a1->type;
   2a520:	4649      	mov	r1, r9
   2a522:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   2a526:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2a52a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2a52e:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2a530:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   2a532:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2a534:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   2a536:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2a53a:	f7ef fc2d 	bl	19d98 <sys_memcpy_swap>
	m[58] = a2->type;
   2a53e:	4641      	mov	r1, r8
   2a540:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2a544:	2206      	movs	r2, #6
	m[58] = a2->type;
   2a546:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2a54a:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2a54e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2a552:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   2a556:	888b      	ldrh	r3, [r1, #4]
   2a558:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2a55c:	f7ef fc1c 	bl	19d98 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2a560:	4621      	mov	r1, r4
   2a562:	2210      	movs	r2, #16
   2a564:	a801      	add	r0, sp, #4
   2a566:	f7ef fc17 	bl	19d98 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2a56a:	463b      	mov	r3, r7
   2a56c:	2241      	movs	r2, #65	; 0x41
   2a56e:	a905      	add	r1, sp, #20
   2a570:	a801      	add	r0, sp, #4
   2a572:	f7ff ff76 	bl	2a462 <bt_crypto_aes_cmac>
	if (err) {
   2a576:	4604      	mov	r4, r0
   2a578:	b910      	cbnz	r0, 2a580 <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   2a57a:	4638      	mov	r0, r7
   2a57c:	f7ff ff63 	bl	2a446 <sys_mem_swap.constprop.0>
}
   2a580:	4620      	mov	r0, r4
   2a582:	b017      	add	sp, #92	; 0x5c
   2a584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002a588 <fixed_data_unref>:
}
   2a588:	4770      	bx	lr

0002a58a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2a58a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2a58c:	6849      	ldr	r1, [r1, #4]
   2a58e:	6809      	ldr	r1, [r1, #0]
   2a590:	f7ef bd04 	b.w	19f9c <net_buf_alloc_len>

0002a594 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2a594:	f7f6 bbfe 	b.w	20d94 <z_impl_k_queue_get>

0002a598 <net_buf_simple_push_u8>:
{
   2a598:	b510      	push	{r4, lr}
   2a59a:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2a59c:	2101      	movs	r1, #1
   2a59e:	f7ef ffcb 	bl	1a538 <net_buf_simple_push>
	*data = val;
   2a5a2:	7004      	strb	r4, [r0, #0]
}
   2a5a4:	bd10      	pop	{r4, pc}

0002a5a6 <net_buf_simple_pull_le16>:
{
   2a5a6:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2a5a8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2a5aa:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2a5ac:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2a5ae:	f7ef ffe3 	bl	1a578 <net_buf_simple_pull>
}
   2a5b2:	4620      	mov	r0, r4
   2a5b4:	bd10      	pop	{r4, pc}

0002a5b6 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2a5b6:	6802      	ldr	r2, [r0, #0]
   2a5b8:	6880      	ldr	r0, [r0, #8]
}
   2a5ba:	1a10      	subs	r0, r2, r0
   2a5bc:	4770      	bx	lr

0002a5be <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2a5be:	8883      	ldrh	r3, [r0, #4]
   2a5c0:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2a5c2:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2a5c4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2a5c6:	6803      	ldr	r3, [r0, #0]
   2a5c8:	1a5b      	subs	r3, r3, r1
}
   2a5ca:	1ad0      	subs	r0, r2, r3
   2a5cc:	4770      	bx	lr

0002a5ce <net_buf_simple_add_mem>:
{
   2a5ce:	b538      	push	{r3, r4, r5, lr}
   2a5d0:	460d      	mov	r5, r1
   2a5d2:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2a5d4:	4611      	mov	r1, r2
   2a5d6:	f7f0 f80b 	bl	1a5f0 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a5da:	4622      	mov	r2, r4
   2a5dc:	4629      	mov	r1, r5
}
   2a5de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2a5e2:	f001 bd73 	b.w	2c0cc <memcpy>

0002a5e6 <net_buf_simple_add_u8>:
{
   2a5e6:	b510      	push	{r4, lr}
   2a5e8:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2a5ea:	2101      	movs	r1, #1
   2a5ec:	f7f0 f800 	bl	1a5f0 <net_buf_simple_add>
	*u8 = val;
   2a5f0:	7004      	strb	r4, [r0, #0]
}
   2a5f2:	bd10      	pop	{r4, pc}

0002a5f4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2a5f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a5f6:	ab0b      	add	r3, sp, #44	; 0x2c
   2a5f8:	9305      	str	r3, [sp, #20]
   2a5fa:	9303      	str	r3, [sp, #12]
   2a5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a5fe:	2201      	movs	r2, #1
   2a600:	9302      	str	r3, [sp, #8]
   2a602:	2300      	movs	r3, #0
   2a604:	4618      	mov	r0, r3
   2a606:	e9cd 3300 	strd	r3, r3, [sp]
   2a60a:	f7e4 fe93 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   2a60e:	b007      	add	sp, #28
   2a610:	f85d fb04 	ldr.w	pc, [sp], #4

0002a614 <adc_context_on_timer_expired>:
{
   2a614:	b410      	push	{r4}
   2a616:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2a618:	3808      	subs	r0, #8
   2a61a:	e8d0 2fef 	ldaex	r2, [r0]
   2a61e:	1c51      	adds	r1, r2, #1
   2a620:	e8c0 1fe4 	stlex	r4, r1, [r0]
   2a624:	2c00      	cmp	r4, #0
   2a626:	d1f8      	bne.n	2a61a <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2a628:	b912      	cbnz	r2, 2a630 <adc_context_on_timer_expired+0x1c>
}
   2a62a:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   2a62c:	f7f0 b822 	b.w	1a674 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   2a630:	f06f 020f 	mvn.w	r2, #15
}
   2a634:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   2a636:	669a      	str	r2, [r3, #104]	; 0x68
}
   2a638:	4770      	bx	lr

0002a63a <set_on_state>:
	__asm__ volatile(
   2a63a:	f04f 0320 	mov.w	r3, #32
   2a63e:	f3ef 8211 	mrs	r2, BASEPRI
   2a642:	f383 8812 	msr	BASEPRI_MAX, r3
   2a646:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2a64a:	6803      	ldr	r3, [r0, #0]
   2a64c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2a650:	f043 0302 	orr.w	r3, r3, #2
   2a654:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2a656:	f382 8811 	msr	BASEPRI, r2
   2a65a:	f3bf 8f6f 	isb	sy
}
   2a65e:	4770      	bx	lr

0002a660 <async_start>:
{
   2a660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a662:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2a664:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2a666:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2a668:	f04f 0520 	mov.w	r5, #32
   2a66c:	f3ef 8611 	mrs	r6, BASEPRI
   2a670:	f385 8812 	msr	BASEPRI_MAX, r5
   2a674:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2a678:	250c      	movs	r5, #12
   2a67a:	4369      	muls	r1, r5
   2a67c:	440c      	add	r4, r1
   2a67e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2a682:	f005 0c07 	and.w	ip, r5, #7
   2a686:	f1bc 0f01 	cmp.w	ip, #1
   2a68a:	d10c      	bne.n	2a6a6 <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2a68c:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   2a690:	f386 8811 	msr	BASEPRI, r6
   2a694:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2a698:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   2a69c:	6843      	ldr	r3, [r0, #4]
   2a69e:	585b      	ldr	r3, [r3, r1]
   2a6a0:	4798      	blx	r3
	return 0;
   2a6a2:	2000      	movs	r0, #0
}
   2a6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2a6a6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2a6aa:	42af      	cmp	r7, r5
   2a6ac:	f386 8811 	msr	BASEPRI, r6
   2a6b0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2a6b4:	bf0c      	ite	eq
   2a6b6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2a6ba:	f04f 30ff 	movne.w	r0, #4294967295
   2a6be:	e7f1      	b.n	2a6a4 <async_start+0x44>

0002a6c0 <api_start>:
{
   2a6c0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2a6c2:	2480      	movs	r4, #128	; 0x80
   2a6c4:	9400      	str	r4, [sp, #0]
   2a6c6:	f7ff ffcb 	bl	2a660 <async_start>
}
   2a6ca:	b002      	add	sp, #8
   2a6cc:	bd10      	pop	{r4, pc}

0002a6ce <onoff_started_callback>:
	return &data->mgr[type];
   2a6ce:	6900      	ldr	r0, [r0, #16]
   2a6d0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2a6d2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2a6d6:	2100      	movs	r1, #0
   2a6d8:	4710      	bx	r2

0002a6da <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2a6da:	2003      	movs	r0, #3
   2a6dc:	f7f3 ba4a 	b.w	1db74 <nrfx_clock_start>

0002a6e0 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2a6e0:	2002      	movs	r0, #2
   2a6e2:	f7f3 ba47 	b.w	1db74 <nrfx_clock_start>

0002a6e6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2a6e6:	2000      	movs	r0, #0
   2a6e8:	f7f3 ba44 	b.w	1db74 <nrfx_clock_start>

0002a6ec <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2a6ec:	2003      	movs	r0, #3
   2a6ee:	f7f3 babf 	b.w	1dc70 <nrfx_clock_stop>

0002a6f2 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2a6f2:	2002      	movs	r0, #2
   2a6f4:	f7f3 babc 	b.w	1dc70 <nrfx_clock_stop>

0002a6f8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2a6f8:	2000      	movs	r0, #0
   2a6fa:	f7f3 bab9 	b.w	1dc70 <nrfx_clock_stop>

0002a6fe <blocking_start_callback>:
{
   2a6fe:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2a700:	f7f6 bbb2 	b.w	20e68 <z_impl_k_sem_give>

0002a704 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2a704:	2280      	movs	r2, #128	; 0x80
   2a706:	f7f0 ba07 	b.w	1ab18 <stop>

0002a70a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a70a:	6843      	ldr	r3, [r0, #4]
}
   2a70c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a70e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2a710:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2a712:	600b      	str	r3, [r1, #0]
}
   2a714:	4770      	bx	lr

0002a716 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a716:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2a718:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a71c:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2a71e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2a722:	6098      	str	r0, [r3, #8]
}
   2a724:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2a726:	60d9      	str	r1, [r3, #12]
   2a728:	4770      	bx	lr

0002a72a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a72a:	6843      	ldr	r3, [r0, #4]
}
   2a72c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a72e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2a730:	6099      	str	r1, [r3, #8]
}
   2a732:	4770      	bx	lr

0002a734 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a734:	6843      	ldr	r3, [r0, #4]
}
   2a736:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a738:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2a73a:	60d9      	str	r1, [r3, #12]
}
   2a73c:	4770      	bx	lr

0002a73e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a73e:	6843      	ldr	r3, [r0, #4]
   2a740:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2a742:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2a744:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2a748:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2a74a:	6090      	str	r0, [r2, #8]
}
   2a74c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2a74e:	60d3      	str	r3, [r2, #12]
   2a750:	4770      	bx	lr

0002a752 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   2a752:	2200      	movs	r2, #0
   2a754:	2101      	movs	r1, #1
   2a756:	200a      	movs	r0, #10
   2a758:	f7e6 bcfa 	b.w	11150 <z_arm_irq_priority_set>

0002a75c <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2a75c:	b510      	push	{r4, lr}
	while (*count) {
   2a75e:	680b      	ldr	r3, [r1, #0]
   2a760:	b913      	cbnz	r3, 2a768 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   2a762:	4618      	mov	r0, r3
	*buf_len = 0;
   2a764:	6013      	str	r3, [r2, #0]
	return NULL;
   2a766:	e005      	b.n	2a774 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2a768:	6803      	ldr	r3, [r0, #0]
   2a76a:	685c      	ldr	r4, [r3, #4]
   2a76c:	b11c      	cbz	r4, 2a776 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   2a76e:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   2a770:	6803      	ldr	r3, [r0, #0]
   2a772:	6818      	ldr	r0, [r3, #0]
}
   2a774:	bd10      	pop	{r4, pc}
		++(*current);
   2a776:	3308      	adds	r3, #8
   2a778:	6003      	str	r3, [r0, #0]
		--(*count);
   2a77a:	680b      	ldr	r3, [r1, #0]
   2a77c:	3b01      	subs	r3, #1
   2a77e:	600b      	str	r3, [r1, #0]
   2a780:	e7ed      	b.n	2a75e <spi_context_get_next_buf.constprop.0+0x2>

0002a782 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2a782:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a784:	ab0b      	add	r3, sp, #44	; 0x2c
   2a786:	9305      	str	r3, [sp, #20]
   2a788:	9303      	str	r3, [sp, #12]
   2a78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a78c:	2201      	movs	r2, #1
   2a78e:	9302      	str	r3, [sp, #8]
   2a790:	2300      	movs	r3, #0
   2a792:	4618      	mov	r0, r3
   2a794:	e9cd 3300 	strd	r3, r3, [sp]
   2a798:	f7e4 fdcc 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   2a79c:	b007      	add	sp, #28
   2a79e:	f85d fb04 	ldr.w	pc, [sp], #4

0002a7a2 <_spi_context_cs_control>:
{
   2a7a2:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2a7a4:	6803      	ldr	r3, [r0, #0]
{
   2a7a6:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2a7a8:	b1e3      	cbz	r3, 2a7e4 <_spi_context_cs_control+0x42>
   2a7aa:	6898      	ldr	r0, [r3, #8]
   2a7ac:	b1d0      	cbz	r0, 2a7e4 <_spi_context_cs_control+0x42>
   2a7ae:	6805      	ldr	r5, [r0, #0]
   2a7b0:	b1c5      	cbz	r5, 2a7e4 <_spi_context_cs_control+0x42>
		if (on) {
   2a7b2:	b149      	cbz	r1, 2a7c8 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2a7b4:	2101      	movs	r1, #1
   2a7b6:	f7f0 fd99 	bl	1b2ec <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2a7ba:	6823      	ldr	r3, [r4, #0]
   2a7bc:	689b      	ldr	r3, [r3, #8]
   2a7be:	6898      	ldr	r0, [r3, #8]
}
   2a7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2a7c4:	f001 bb72 	b.w	2beac <z_impl_k_busy_wait>
			if (!force_off &&
   2a7c8:	b912      	cbnz	r2, 2a7d0 <_spi_context_cs_control+0x2e>
   2a7ca:	889b      	ldrh	r3, [r3, #4]
   2a7cc:	04db      	lsls	r3, r3, #19
   2a7ce:	d409      	bmi.n	2a7e4 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2a7d0:	6880      	ldr	r0, [r0, #8]
   2a7d2:	f001 fb6b 	bl	2beac <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2a7d6:	6823      	ldr	r3, [r4, #0]
   2a7d8:	2100      	movs	r1, #0
   2a7da:	6898      	ldr	r0, [r3, #8]
}
   2a7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2a7e0:	f7f0 bd84 	b.w	1b2ec <gpio_pin_set_dt.isra.0>
}
   2a7e4:	bd38      	pop	{r3, r4, r5, pc}

0002a7e6 <spi_context_unlock_unconditionally>:
{
   2a7e6:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2a7e8:	2201      	movs	r2, #1
   2a7ea:	2100      	movs	r1, #0
{
   2a7ec:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2a7ee:	f7ff ffd8 	bl	2a7a2 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2a7f2:	69a3      	ldr	r3, [r4, #24]
   2a7f4:	b933      	cbnz	r3, 2a804 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2a7f6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2a7f8:	f104 0010 	add.w	r0, r4, #16
}
   2a7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a800:	f7f6 bb32 	b.w	20e68 <z_impl_k_sem_give>
   2a804:	bd10      	pop	{r4, pc}

0002a806 <spi_nrfx_release>:
{
   2a806:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2a808:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2a80a:	6803      	ldr	r3, [r0, #0]
   2a80c:	428b      	cmp	r3, r1
   2a80e:	d106      	bne.n	2a81e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2a810:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2a814:	b934      	cbnz	r4, 2a824 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2a816:	f7ff ffe6 	bl	2a7e6 <spi_context_unlock_unconditionally>
	return 0;
   2a81a:	4620      	mov	r0, r4
}
   2a81c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2a81e:	f06f 0015 	mvn.w	r0, #21
   2a822:	e7fb      	b.n	2a81c <spi_nrfx_release+0x16>
		return -EBUSY;
   2a824:	f06f 000f 	mvn.w	r0, #15
   2a828:	e7f8      	b.n	2a81c <spi_nrfx_release+0x16>

0002a82a <k_sem_give>:
   2a82a:	f7f6 bb1d 	b.w	20e68 <z_impl_k_sem_give>

0002a82e <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2a82e:	b918      	cbnz	r0, 2a838 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2a830:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2a834:	f7ff bff9 	b.w	2a82a <k_sem_give>
}
   2a838:	4770      	bx	lr

0002a83a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2a83a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a83c:	ab0b      	add	r3, sp, #44	; 0x2c
   2a83e:	9305      	str	r3, [sp, #20]
   2a840:	9303      	str	r3, [sp, #12]
   2a842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a844:	9302      	str	r3, [sp, #8]
   2a846:	2300      	movs	r3, #0
   2a848:	4618      	mov	r0, r3
   2a84a:	e9cd 3300 	strd	r3, r3, [sp]
   2a84e:	f7e4 fd71 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   2a852:	b007      	add	sp, #28
   2a854:	f85d fb04 	ldr.w	pc, [sp], #4

0002a858 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2a858:	f04f 32ff 	mov.w	r2, #4294967295
   2a85c:	f04f 33ff 	mov.w	r3, #4294967295
   2a860:	3018      	adds	r0, #24
   2a862:	f7f6 bb45 	b.w	20ef0 <z_impl_k_sem_take>

0002a866 <qspi_trans_lock.isra.0>:
   2a866:	f04f 32ff 	mov.w	r2, #4294967295
   2a86a:	f04f 33ff 	mov.w	r3, #4294967295
   2a86e:	f7f6 bb3f 	b.w	20ef0 <z_impl_k_sem_take>

0002a872 <qspi_nor_write_protection_set>:
{
   2a872:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2a874:	2200      	movs	r2, #0
   2a876:	4291      	cmp	r1, r2
   2a878:	bf0c      	ite	eq
   2a87a:	2306      	moveq	r3, #6
   2a87c:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2a87e:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2a880:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2a884:	9203      	str	r2, [sp, #12]
   2a886:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2a88a:	f7f1 f897 	bl	1b9bc <qspi_send_cmd>
		ret = -EIO;
   2a88e:	2800      	cmp	r0, #0
}
   2a890:	bf18      	it	ne
   2a892:	f06f 0004 	mvnne.w	r0, #4
   2a896:	b005      	add	sp, #20
   2a898:	f85d fb04 	ldr.w	pc, [sp], #4

0002a89c <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2a89c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2a89e:	23ff      	movs	r3, #255	; 0xff
   2a8a0:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2a8a4:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2a8a8:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2a8aa:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2a8ac:	2301      	movs	r3, #1
   2a8ae:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2a8b2:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   2a8b4:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2a8b6:	f88d 300c 	strb.w	r3, [sp, #12]
   2a8ba:	ab01      	add	r3, sp, #4
   2a8bc:	9204      	str	r2, [sp, #16]
   2a8be:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2a8c0:	f7f1 f87c 	bl	1b9bc <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2a8c4:	2800      	cmp	r0, #0
   2a8c6:	bfa8      	it	ge
   2a8c8:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2a8cc:	b007      	add	sp, #28
   2a8ce:	f85d fb04 	ldr.w	pc, [sp], #4

0002a8d2 <is_regular_addr_valid>:
{
   2a8d2:	b538      	push	{r3, r4, r5, lr}
   2a8d4:	4605      	mov	r5, r0
   2a8d6:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2a8d8:	f000 fc6a 	bl	2b1b0 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2a8dc:	2d00      	cmp	r5, #0
   2a8de:	db07      	blt.n	2a8f0 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2a8e0:	42a8      	cmp	r0, r5
   2a8e2:	d905      	bls.n	2a8f0 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2a8e4:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2a8e6:	4284      	cmp	r4, r0
   2a8e8:	bf8c      	ite	hi
   2a8ea:	2000      	movhi	r0, #0
   2a8ec:	2001      	movls	r0, #1
}
   2a8ee:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2a8f0:	2000      	movs	r0, #0
   2a8f2:	e7fc      	b.n	2a8ee <is_regular_addr_valid+0x1c>

0002a8f4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2a8f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a8f6:	ab0b      	add	r3, sp, #44	; 0x2c
   2a8f8:	9305      	str	r3, [sp, #20]
   2a8fa:	9303      	str	r3, [sp, #12]
   2a8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a8fe:	2201      	movs	r2, #1
   2a900:	9302      	str	r3, [sp, #8]
   2a902:	2300      	movs	r3, #0
   2a904:	4618      	mov	r0, r3
   2a906:	e9cd 3300 	strd	r3, r3, [sp]
   2a90a:	f7e4 fd13 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   2a90e:	b007      	add	sp, #28
   2a910:	f85d fb04 	ldr.w	pc, [sp], #4

0002a914 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2a914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a916:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2a918:	2300      	movs	r3, #0
{
   2a91a:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   2a91c:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2a91e:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2a920:	60a3      	str	r3, [r4, #8]
{
   2a922:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   2a924:	6913      	ldr	r3, [r2, #16]
   2a926:	4669      	mov	r1, sp
   2a928:	aa01      	add	r2, sp, #4
   2a92a:	4798      	blx	r3

	while (layout_size--) {
   2a92c:	9b01      	ldr	r3, [sp, #4]
   2a92e:	1e5a      	subs	r2, r3, #1
   2a930:	9201      	str	r2, [sp, #4]
   2a932:	b91b      	cbnz	r3, 2a93c <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2a934:	f06f 0015 	mvn.w	r0, #21
}
   2a938:	b003      	add	sp, #12
   2a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2a93c:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2a93e:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2a940:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2a942:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2a944:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2a946:	b985      	cbnz	r5, 2a96a <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2a948:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2a94a:	f8d0 c000 	ldr.w	ip, [r0]
   2a94e:	4563      	cmp	r3, ip
   2a950:	bf28      	it	cs
   2a952:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   2a954:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2a958:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2a95a:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2a95c:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2a95e:	6802      	ldr	r2, [r0, #0]
   2a960:	429a      	cmp	r2, r3
   2a962:	d806      	bhi.n	2a972 <flash_get_page_info+0x5e>
		layout++;
   2a964:	3008      	adds	r0, #8
   2a966:	9000      	str	r0, [sp, #0]
   2a968:	e7e0      	b.n	2a92c <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2a96a:	1a6b      	subs	r3, r5, r1
   2a96c:	fbb3 f3f7 	udiv	r3, r3, r7
   2a970:	e7eb      	b.n	2a94a <flash_get_page_info+0x36>
			return 0;
   2a972:	2000      	movs	r0, #0
   2a974:	e7e0      	b.n	2a938 <flash_get_page_info+0x24>

0002a976 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2a976:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2a978:	2200      	movs	r2, #0
   2a97a:	f7ff bfcb 	b.w	2a914 <flash_get_page_info>

0002a97e <uarte_nrfx_config_get>:
{
   2a97e:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2a980:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2a982:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2a986:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2a98a:	2000      	movs	r0, #0
   2a98c:	4770      	bx	lr

0002a98e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2a98e:	6843      	ldr	r3, [r0, #4]
   2a990:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2a992:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2a996:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2a99a:	4770      	bx	lr

0002a99c <tx_start>:
{
   2a99c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2a99e:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2a9a0:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2a9a2:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2a9a6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a9aa:	2200      	movs	r2, #0
   2a9ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2a9b0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2a9b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2a9b8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2a9bc:	6862      	ldr	r2, [r4, #4]
   2a9be:	06d2      	lsls	r2, r2, #27
   2a9c0:	d511      	bpl.n	2a9e6 <tx_start+0x4a>
	if (data->async) {
   2a9c2:	6902      	ldr	r2, [r0, #16]
   2a9c4:	68d2      	ldr	r2, [r2, #12]
   2a9c6:	b12a      	cbz	r2, 2a9d4 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2a9c8:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2a9cc:	f041 0101 	orr.w	r1, r1, #1
   2a9d0:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2a9d4:	2108      	movs	r1, #8
	return config->uarte_regs;
   2a9d6:	6842      	ldr	r2, [r0, #4]
   2a9d8:	6812      	ldr	r2, [r2, #0]
   2a9da:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2a9de:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2a9e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a9e6:	2201      	movs	r2, #1
   2a9e8:	609a      	str	r2, [r3, #8]
}
   2a9ea:	bd10      	pop	{r4, pc}

0002a9ec <user_callback>:
	if (data->async->user_callback) {
   2a9ec:	6903      	ldr	r3, [r0, #16]
   2a9ee:	68da      	ldr	r2, [r3, #12]
   2a9f0:	6813      	ldr	r3, [r2, #0]
   2a9f2:	b10b      	cbz	r3, 2a9f8 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2a9f4:	6852      	ldr	r2, [r2, #4]
   2a9f6:	4718      	bx	r3
}
   2a9f8:	4770      	bx	lr

0002a9fa <notify_uart_rx_rdy>:
{
   2a9fa:	b570      	push	{r4, r5, r6, lr}
   2a9fc:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2a9fe:	6906      	ldr	r6, [r0, #16]
{
   2aa00:	4604      	mov	r4, r0
   2aa02:	460d      	mov	r5, r1
	struct uart_event evt = {
   2aa04:	2214      	movs	r2, #20
   2aa06:	2100      	movs	r1, #0
   2aa08:	a801      	add	r0, sp, #4
   2aa0a:	f001 fb99 	bl	2c140 <memset>
   2aa0e:	2302      	movs	r3, #2
   2aa10:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2aa14:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2aa16:	4620      	mov	r0, r4
	struct uart_event evt = {
   2aa18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2aa1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   2aa1c:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2aa1e:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2aa22:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2aa24:	f7ff ffe2 	bl	2a9ec <user_callback>
}
   2aa28:	b006      	add	sp, #24
   2aa2a:	bd70      	pop	{r4, r5, r6, pc}

0002aa2c <rx_buf_release>:
{
   2aa2c:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2aa2e:	680e      	ldr	r6, [r1, #0]
{
   2aa30:	4605      	mov	r5, r0
   2aa32:	460c      	mov	r4, r1
   2aa34:	b086      	sub	sp, #24
	if (*buf) {
   2aa36:	b17e      	cbz	r6, 2aa58 <rx_buf_release+0x2c>
		struct uart_event evt = {
   2aa38:	2214      	movs	r2, #20
   2aa3a:	2100      	movs	r1, #0
   2aa3c:	a801      	add	r0, sp, #4
   2aa3e:	f001 fb7f 	bl	2c140 <memset>
   2aa42:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2aa44:	4628      	mov	r0, r5
   2aa46:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2aa4a:	f88d 3004 	strb.w	r3, [sp, #4]
   2aa4e:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2aa50:	f7ff ffcc 	bl	2a9ec <user_callback>
		*buf = NULL;
   2aa54:	2300      	movs	r3, #0
   2aa56:	6023      	str	r3, [r4, #0]
}
   2aa58:	b006      	add	sp, #24
   2aa5a:	bd70      	pop	{r4, r5, r6, pc}

0002aa5c <notify_rx_disable>:
{
   2aa5c:	b510      	push	{r4, lr}
   2aa5e:	b086      	sub	sp, #24
   2aa60:	4604      	mov	r4, r0
	struct uart_event evt = {
   2aa62:	2214      	movs	r2, #20
   2aa64:	2100      	movs	r1, #0
   2aa66:	a801      	add	r0, sp, #4
   2aa68:	f001 fb6a 	bl	2c140 <memset>
   2aa6c:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2aa6e:	4620      	mov	r0, r4
   2aa70:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2aa72:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2aa76:	f7ff ffb9 	bl	2a9ec <user_callback>
}
   2aa7a:	b006      	add	sp, #24
   2aa7c:	bd10      	pop	{r4, pc}

0002aa7e <uarte_nrfx_rx_buf_rsp>:
{
   2aa7e:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2aa80:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2aa82:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2aa84:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2aa86:	f04f 0020 	mov.w	r0, #32
   2aa8a:	f3ef 8611 	mrs	r6, BASEPRI
   2aa8e:	f380 8812 	msr	BASEPRI_MAX, r0
   2aa92:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2aa96:	68ec      	ldr	r4, [r5, #12]
   2aa98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2aa9a:	b198      	cbz	r0, 2aac4 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2aa9c:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2aa9e:	b9a0      	cbnz	r0, 2aaca <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2aaa0:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2aaa2:	68ec      	ldr	r4, [r5, #12]
   2aaa4:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2aaa6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2aaaa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2aaae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2aab2:	f042 0220 	orr.w	r2, r2, #32
   2aab6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2aaba:	f386 8811 	msr	BASEPRI, r6
   2aabe:	f3bf 8f6f 	isb	sy
}
   2aac2:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2aac4:	f06f 000c 	mvn.w	r0, #12
   2aac8:	e7f7      	b.n	2aaba <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2aaca:	f06f 000f 	mvn.w	r0, #15
   2aace:	e7f4      	b.n	2aaba <uarte_nrfx_rx_buf_rsp+0x3c>

0002aad0 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2aad0:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2aad2:	68d8      	ldr	r0, [r3, #12]
   2aad4:	b120      	cbz	r0, 2aae0 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2aad6:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2aad8:	68db      	ldr	r3, [r3, #12]
	return 0;
   2aada:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2aadc:	605a      	str	r2, [r3, #4]
	return 0;
   2aade:	4770      	bx	lr
		return -ENOTSUP;
   2aae0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2aae4:	4770      	bx	lr

0002aae6 <uarte_nrfx_poll_in>:
{
   2aae6:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2aae8:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2aaea:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2aaec:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2aaee:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2aaf0:	b960      	cbnz	r0, 2ab0c <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2aaf2:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2aaf6:	b164      	cbz	r4, 2ab12 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2aaf8:	6992      	ldr	r2, [r2, #24]
   2aafa:	7812      	ldrb	r2, [r2, #0]
   2aafc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2aafe:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2ab02:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ab06:	2201      	movs	r2, #1
   2ab08:	601a      	str	r2, [r3, #0]
}
   2ab0a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2ab0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ab10:	e7fb      	b.n	2ab0a <uarte_nrfx_poll_in+0x24>
		return -1;
   2ab12:	f04f 30ff 	mov.w	r0, #4294967295
   2ab16:	e7f8      	b.n	2ab0a <uarte_nrfx_poll_in+0x24>

0002ab18 <uarte_nrfx_rx_disable>:
{
   2ab18:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2ab1a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2ab1c:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2ab1e:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2ab20:	68eb      	ldr	r3, [r5, #12]
   2ab22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2ab24:	b1ba      	cbz	r2, 2ab56 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2ab26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2ab28:	b153      	cbz	r3, 2ab40 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2ab2a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2ab2e:	f023 0320 	bic.w	r3, r3, #32
   2ab32:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ab36:	2300      	movs	r3, #0
   2ab38:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2ab3c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2ab40:	68e8      	ldr	r0, [r5, #12]
   2ab42:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2ab44:	f001 f9e4 	bl	2bf10 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2ab48:	2000      	movs	r0, #0
   2ab4a:	68eb      	ldr	r3, [r5, #12]
   2ab4c:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ab50:	2301      	movs	r3, #1
   2ab52:	6063      	str	r3, [r4, #4]
}
   2ab54:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2ab56:	f06f 000d 	mvn.w	r0, #13
   2ab5a:	e7fb      	b.n	2ab54 <uarte_nrfx_rx_disable+0x3c>

0002ab5c <setup_tx_cache>:
{
   2ab5c:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2ab5e:	68c3      	ldr	r3, [r0, #12]
   2ab60:	68da      	ldr	r2, [r3, #12]
   2ab62:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2ab64:	1a52      	subs	r2, r2, r1
   2ab66:	d00f      	beq.n	2ab88 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2ab68:	2a08      	cmp	r2, #8
   2ab6a:	bf28      	it	cs
   2ab6c:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2ab6e:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2ab70:	68c3      	ldr	r3, [r0, #12]
   2ab72:	6999      	ldr	r1, [r3, #24]
   2ab74:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2ab76:	68c3      	ldr	r3, [r0, #12]
   2ab78:	6898      	ldr	r0, [r3, #8]
   2ab7a:	69d9      	ldr	r1, [r3, #28]
   2ab7c:	4401      	add	r1, r0
   2ab7e:	6998      	ldr	r0, [r3, #24]
   2ab80:	f001 faa4 	bl	2c0cc <memcpy>
	return true;
   2ab84:	2001      	movs	r0, #1
}
   2ab86:	bd08      	pop	{r3, pc}
		return false;
   2ab88:	4610      	mov	r0, r2
   2ab8a:	e7fc      	b.n	2ab86 <setup_tx_cache+0x2a>

0002ab8c <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2ab8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2ab8e:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2ab90:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2ab92:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   2ab94:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2ab98:	b1f1      	cbz	r1, 2abd8 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2ab9a:	2100      	movs	r1, #0
   2ab9c:	4618      	mov	r0, r3
   2ab9e:	f001 facf 	bl	2c140 <memset>
   2aba2:	4603      	mov	r3, r0
   2aba4:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2aba6:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2abaa:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2abac:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2abae:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2abb2:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2abb6:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2abba:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2abbc:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2abc0:	2800      	cmp	r0, #0
   2abc2:	d0fb      	beq.n	2abbc <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2abc4:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2abc8:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2abcc:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2abd0:	b92b      	cbnz	r3, 2abde <rx_flush.isra.0+0x52>
			return rx_amount;
   2abd2:	b2c0      	uxtb	r0, r0
}
   2abd4:	b002      	add	sp, #8
   2abd6:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   2abd8:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   2abda:	4669      	mov	r1, sp
   2abdc:	e7e3      	b.n	2aba6 <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2abde:	4285      	cmp	r5, r0
   2abe0:	d1f7      	bne.n	2abd2 <rx_flush.isra.0+0x46>
   2abe2:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   2abe4:	4293      	cmp	r3, r2
   2abe6:	d101      	bne.n	2abec <rx_flush.isra.0+0x60>
	return 0;
   2abe8:	2000      	movs	r0, #0
   2abea:	e7f3      	b.n	2abd4 <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   2abec:	f813 1b01 	ldrb.w	r1, [r3], #1
   2abf0:	2900      	cmp	r1, #0
   2abf2:	d0f7      	beq.n	2abe4 <rx_flush.isra.0+0x58>
   2abf4:	e7ed      	b.n	2abd2 <rx_flush.isra.0+0x46>

0002abf6 <async_uart_release>:
{
   2abf6:	b570      	push	{r4, r5, r6, lr}
   2abf8:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2abfa:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2abfc:	f04f 0320 	mov.w	r3, #32
   2ac00:	f3ef 8611 	mrs	r6, BASEPRI
   2ac04:	f383 8812 	msr	BASEPRI_MAX, r3
   2ac08:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2ac0c:	68d0      	ldr	r0, [r2, #12]
   2ac0e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2ac12:	ea23 0301 	bic.w	r3, r3, r1
   2ac16:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2ac1a:	68d5      	ldr	r5, [r2, #12]
   2ac1c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2ac20:	b973      	cbnz	r3, 2ac40 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2ac22:	2902      	cmp	r1, #2
   2ac24:	d107      	bne.n	2ac36 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2ac26:	2205      	movs	r2, #5
   2ac28:	6860      	ldr	r0, [r4, #4]
   2ac2a:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2ac2e:	f7ff ffad 	bl	2ab8c <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2ac32:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2ac36:	2200      	movs	r2, #0
	return config->uarte_regs;
   2ac38:	6863      	ldr	r3, [r4, #4]
   2ac3a:	681b      	ldr	r3, [r3, #0]
   2ac3c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2ac40:	f386 8811 	msr	BASEPRI, r6
   2ac44:	f3bf 8f6f 	isb	sy
}
   2ac48:	bd70      	pop	{r4, r5, r6, pc}

0002ac4a <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2ac4a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2ac4c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ac4e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2ac52:	b940      	cbnz	r0, 2ac66 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2ac54:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2ac56:	079b      	lsls	r3, r3, #30
   2ac58:	d406      	bmi.n	2ac68 <is_tx_ready.isra.0+0x1e>
   2ac5a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2ac5e:	3800      	subs	r0, #0
   2ac60:	bf18      	it	ne
   2ac62:	2001      	movne	r0, #1
   2ac64:	4770      	bx	lr
   2ac66:	2001      	movs	r0, #1
}
   2ac68:	4770      	bx	lr

0002ac6a <start_tx_locked>:
{
   2ac6a:	b510      	push	{r4, lr}
   2ac6c:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2ac6e:	6840      	ldr	r0, [r0, #4]
   2ac70:	f7ff ffeb 	bl	2ac4a <is_tx_ready.isra.0>
   2ac74:	68cb      	ldr	r3, [r1, #12]
   2ac76:	b918      	cbnz	r0, 2ac80 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2ac78:	2201      	movs	r2, #1
   2ac7a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   2ac7e:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2ac80:	2200      	movs	r2, #0
   2ac82:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2ac86:	f04f 32ff 	mov.w	r2, #4294967295
   2ac8a:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2ac8c:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   2ac8e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2ac92:	68cb      	ldr	r3, [r1, #12]
}
   2ac94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2ac98:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   2ac9c:	f7ff be7e 	b.w	2a99c <tx_start>

0002aca0 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2aca0:	b510      	push	{r4, lr}
   2aca2:	4604      	mov	r4, r0
   2aca4:	2200      	movs	r2, #0
   2aca6:	2101      	movs	r1, #1
   2aca8:	200b      	movs	r0, #11
   2acaa:	f7e6 fa51 	bl	11150 <z_arm_irq_priority_set>
   2acae:	200b      	movs	r0, #11
   2acb0:	f7e6 fa1e 	bl	110f0 <arch_irq_enable>
   2acb4:	4620      	mov	r0, r4
   2acb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2acba:	f7f1 bbe3 	b.w	1c484 <uarte_instance_init.constprop.0>

0002acbe <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2acbe:	b510      	push	{r4, lr}
   2acc0:	4604      	mov	r4, r0
   2acc2:	2200      	movs	r2, #0
   2acc4:	2101      	movs	r1, #1
   2acc6:	2008      	movs	r0, #8
   2acc8:	f7e6 fa42 	bl	11150 <z_arm_irq_priority_set>
   2accc:	2008      	movs	r0, #8
   2acce:	f7e6 fa0f 	bl	110f0 <arch_irq_enable>
   2acd2:	4620      	mov	r0, r4
   2acd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2acd8:	f7f1 bbd4 	b.w	1c484 <uarte_instance_init.constprop.0>

0002acdc <rx_timeout>:
{
   2acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2acde:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2ace0:	68e3      	ldr	r3, [r4, #12]
   2ace2:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2ace6:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2acea:	bb13      	cbnz	r3, 2ad32 <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   2acec:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2acee:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2acf0:	6873      	ldr	r3, [r6, #4]
   2acf2:	681b      	ldr	r3, [r3, #0]
   2acf4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2acf8:	68e3      	ldr	r3, [r4, #12]
   2acfa:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2acfe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2ad00:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2ad02:	bf1f      	itttt	ne
   2ad04:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2ad06:	68e3      	ldrne	r3, [r4, #12]
   2ad08:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2ad0a:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2ad0c:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2ad0e:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2ad12:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2ad14:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2ad16:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2ad18:	da0c      	bge.n	2ad34 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2ad1a:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2ad1e:	68e3      	ldr	r3, [r4, #12]
   2ad20:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2ad24:	4281      	cmp	r1, r0
   2ad26:	d80b      	bhi.n	2ad40 <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2ad28:	2210      	movs	r2, #16
	return config->uarte_regs;
   2ad2a:	6873      	ldr	r3, [r6, #4]
   2ad2c:	681b      	ldr	r3, [r3, #0]
   2ad2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2ad32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2ad34:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2ad38:	eb02 0c01 	add.w	ip, r2, r1
   2ad3c:	4584      	cmp	ip, r0
   2ad3e:	d904      	bls.n	2ad4a <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2ad40:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2ad42:	2d00      	cmp	r5, #0
   2ad44:	ddf0      	ble.n	2ad28 <rx_timeout+0x4c>
		clipped = true;
   2ad46:	2701      	movs	r7, #1
   2ad48:	e005      	b.n	2ad56 <rx_timeout+0x7a>
	if (len > 0) {
   2ad4a:	2a00      	cmp	r2, #0
   2ad4c:	d0ec      	beq.n	2ad28 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2ad4e:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2ad52:	428a      	cmp	r2, r1
   2ad54:	da12      	bge.n	2ad7c <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2ad56:	4629      	mov	r1, r5
   2ad58:	4630      	mov	r0, r6
   2ad5a:	f7ff fe4e 	bl	2a9fa <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2ad5e:	68e2      	ldr	r2, [r4, #12]
   2ad60:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2ad62:	442b      	add	r3, r5
   2ad64:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2ad66:	68e2      	ldr	r2, [r4, #12]
   2ad68:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2ad6a:	442b      	add	r3, r5
   2ad6c:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2ad6e:	2f00      	cmp	r7, #0
   2ad70:	d0da      	beq.n	2ad28 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2ad72:	68e0      	ldr	r0, [r4, #12]
   2ad74:	3080      	adds	r0, #128	; 0x80
   2ad76:	f001 f8cb 	bl	2bf10 <z_impl_k_timer_stop>
}
   2ad7a:	e7d5      	b.n	2ad28 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   2ad7c:	1a52      	subs	r2, r2, r1
   2ad7e:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2ad80:	e7d2      	b.n	2ad28 <rx_timeout+0x4c>

0002ad82 <uarte_nrfx_tx_abort>:
{
   2ad82:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2ad84:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2ad86:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2ad88:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2ad8a:	68da      	ldr	r2, [r3, #12]
   2ad8c:	6891      	ldr	r1, [r2, #8]
   2ad8e:	b151      	cbz	r1, 2ada6 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2ad90:	2400      	movs	r4, #0
   2ad92:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2ad96:	68d8      	ldr	r0, [r3, #12]
   2ad98:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2ad9a:	f001 f8b9 	bl	2bf10 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ad9e:	2301      	movs	r3, #1
	return 0;
   2ada0:	4620      	mov	r0, r4
   2ada2:	60eb      	str	r3, [r5, #12]
}
   2ada4:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2ada6:	f06f 000d 	mvn.w	r0, #13
   2adaa:	e7fb      	b.n	2ada4 <uarte_nrfx_tx_abort+0x22>

0002adac <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2adac:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2adae:	6818      	ldr	r0, [r3, #0]
   2adb0:	f7ff bfe7 	b.w	2ad82 <uarte_nrfx_tx_abort>

0002adb4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2adb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2adb6:	ab0b      	add	r3, sp, #44	; 0x2c
   2adb8:	9305      	str	r3, [sp, #20]
   2adba:	9303      	str	r3, [sp, #12]
   2adbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2adbe:	9302      	str	r3, [sp, #8]
   2adc0:	2300      	movs	r3, #0
   2adc2:	4618      	mov	r0, r3
   2adc4:	e9cd 3300 	strd	r3, r3, [sp]
   2adc8:	f7e4 fab4 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   2adcc:	b007      	add	sp, #28
   2adce:	f85d fb04 	ldr.w	pc, [sp], #4

0002add2 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2add2:	2000      	movs	r0, #0
   2add4:	4770      	bx	lr

0002add6 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2add6:	b538      	push	{r3, r4, r5, lr}
   2add8:	460c      	mov	r4, r1
   2adda:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2addc:	f7e8 fda8 	bl	13930 <bt_is_ready>
   2ade0:	b128      	cbz	r0, 2adee <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2ade2:	4629      	mov	r1, r5
   2ade4:	4620      	mov	r0, r4
}
   2ade6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2adea:	f7e7 bfaf 	b.w	12d4c <bt_hci_le_rand>
}
   2adee:	f06f 000a 	mvn.w	r0, #10
   2adf2:	bd38      	pop	{r3, r4, r5, pc}

0002adf4 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2adf4:	4608      	mov	r0, r1
   2adf6:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2adf8:	4611      	mov	r1, r2
   2adfa:	f7f2 fcf9 	bl	1d7f0 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2adfe:	2800      	cmp	r0, #0
	}

	return 0;
}
   2ae00:	bf18      	it	ne
   2ae02:	f06f 0004 	mvnne.w	r0, #4
   2ae06:	bd08      	pop	{r3, pc}

0002ae08 <entropy_psa_crypto_rng_init>:
{
   2ae08:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2ae0a:	f000 f921 	bl	2b050 <psa_crypto_init>
		return -EIO;
   2ae0e:	2800      	cmp	r0, #0
}
   2ae10:	bf18      	it	ne
   2ae12:	f06f 0004 	mvnne.w	r0, #4
   2ae16:	bd08      	pop	{r3, pc}

0002ae18 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2ae18:	4770      	bx	lr

0002ae1a <sys_clock_cycle_get_32>:
{
   2ae1a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2ae1c:	f7f2 f91c 	bl	1d058 <z_nrf_rtc_timer_read>
}
   2ae20:	bd08      	pop	{r3, pc}

0002ae22 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2ae22:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2ae24:	6843      	ldr	r3, [r0, #4]
   2ae26:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2ae28:	7a05      	ldrb	r5, [r0, #8]
   2ae2a:	6844      	ldr	r4, [r0, #4]
   2ae2c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2ae30:	42a3      	cmp	r3, r4
   2ae32:	d302      	bcc.n	2ae3a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2ae34:	f06f 0001 	mvn.w	r0, #1
}
   2ae38:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2ae3a:	795c      	ldrb	r4, [r3, #5]
   2ae3c:	428c      	cmp	r4, r1
   2ae3e:	d001      	beq.n	2ae44 <pinctrl_lookup_state+0x22>
		(*state)++;
   2ae40:	3308      	adds	r3, #8
   2ae42:	e7f0      	b.n	2ae26 <pinctrl_lookup_state+0x4>
			return 0;
   2ae44:	2000      	movs	r0, #0
   2ae46:	e7f7      	b.n	2ae38 <pinctrl_lookup_state+0x16>

0002ae48 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae4c:	4615      	mov	r5, r2
   2ae4e:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2ae50:	f04f 0901 	mov.w	r9, #1
   2ae54:	b085      	sub	sp, #20
   2ae56:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2ae5a:	45d0      	cmp	r8, sl
   2ae5c:	d103      	bne.n	2ae66 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2ae5e:	2000      	movs	r0, #0
}
   2ae60:	b005      	add	sp, #20
   2ae62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2ae66:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2ae6a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2ae6e:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2ae72:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2ae74:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2ae78:	bf08      	it	eq
   2ae7a:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2ae7e:	2b22      	cmp	r3, #34	; 0x22
   2ae80:	f200 8091 	bhi.w	2afa6 <pinctrl_configure_pins+0x15e>
   2ae84:	e8df f003 	tbb	[pc, r3]
   2ae88:	38231e12 	.word	0x38231e12
   2ae8c:	8f383426 	.word	0x8f383426
   2ae90:	3b8f8f8f 	.word	0x3b8f8f8f
   2ae94:	8f8f8f65 	.word	0x8f8f8f65
   2ae98:	8f8f8f8f 	.word	0x8f8f8f8f
   2ae9c:	71688f8f 	.word	0x71688f8f
   2aea0:	8f8f7774 	.word	0x8f8f7774
   2aea4:	83807a8f 	.word	0x83807a8f
   2aea8:	8986      	.short	0x8986
   2aeaa:	8c          	.byte	0x8c
   2aeab:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   2aeac:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2aeb0:	a803      	add	r0, sp, #12
   2aeb2:	9403      	str	r4, [sp, #12]
   2aeb4:	f7f2 fb08 	bl	1d4c8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2aeb8:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   2aeba:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2aebc:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   2aec0:	6083      	str	r3, [r0, #8]
   2aec2:	e002      	b.n	2aeca <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   2aec4:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2aec8:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   2aeca:	46b3      	mov	fp, r6
   2aecc:	e01e      	b.n	2af0c <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   2aece:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2aed2:	e7ed      	b.n	2aeb0 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2aed4:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2aed6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2aeda:	a803      	add	r0, sp, #12
   2aedc:	9403      	str	r4, [sp, #12]
   2aede:	f7f2 faf3 	bl	1d4c8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2aee2:	9b03      	ldr	r3, [sp, #12]
   2aee4:	f04f 0b01 	mov.w	fp, #1
   2aee8:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   2aeec:	60c3      	str	r3, [r0, #12]
   2aeee:	e00d      	b.n	2af0c <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2aef0:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2aef4:	2601      	movs	r6, #1
   2aef6:	e7f0      	b.n	2aeda <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2aef8:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2aefc:	e7e4      	b.n	2aec8 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2aefe:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2af02:	2f00      	cmp	r7, #0
   2af04:	d1e0      	bne.n	2aec8 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2af06:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   2af08:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2af0a:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2af0c:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2af10:	a803      	add	r0, sp, #12
   2af12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2af16:	2a00      	cmp	r2, #0
   2af18:	bf1c      	itt	ne
   2af1a:	2601      	movne	r6, #1
   2af1c:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2af20:	9301      	str	r3, [sp, #4]
   2af22:	9403      	str	r4, [sp, #12]
   2af24:	f7f2 fad0 	bl	1d4c8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2af28:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2af2a:	9b01      	ldr	r3, [sp, #4]
   2af2c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2af30:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2af34:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2af38:	023b      	lsls	r3, r7, #8
   2af3a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   2af3e:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2af42:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   2af46:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2af48:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2af4c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2af50:	e783      	b.n	2ae5a <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2af52:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2af56:	e7d4      	b.n	2af02 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2af58:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2af5c:	f8da 3000 	ldr.w	r3, [sl]
   2af60:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2af64:	2b00      	cmp	r3, #0
   2af66:	d0c5      	beq.n	2aef4 <pinctrl_configure_pins+0xac>
   2af68:	e7a2      	b.n	2aeb0 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2af6a:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2af6e:	e7f5      	b.n	2af5c <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2af70:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2af74:	e7f2      	b.n	2af5c <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2af76:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2af7a:	e7ef      	b.n	2af5c <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2af7c:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2af80:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2af82:	f04f 0b00 	mov.w	fp, #0
   2af86:	e7c1      	b.n	2af0c <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2af88:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   2af8c:	e790      	b.n	2aeb0 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2af8e:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   2af92:	e7f5      	b.n	2af80 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2af94:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2af98:	e7f2      	b.n	2af80 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2af9a:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   2af9e:	e7ef      	b.n	2af80 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2afa0:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2afa4:	e7ec      	b.n	2af80 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   2afa6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2afaa:	e759      	b.n	2ae60 <pinctrl_configure_pins+0x18>

0002afac <mbox_nrf_register_callback>:
{
   2afac:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   2afae:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2afb0:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   2afb2:	bf9f      	itttt	ls
   2afb4:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2afb8:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   2afbc:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   2afbe:	2000      	movls	r0, #0
		return -EINVAL;
   2afc0:	bf88      	it	hi
   2afc2:	f06f 0015 	mvnhi.w	r0, #21
}
   2afc6:	bd10      	pop	{r4, pc}

0002afc8 <mbox_nrf_mtu_get>:
}
   2afc8:	2000      	movs	r0, #0
   2afca:	4770      	bx	lr

0002afcc <mbox_nrf_max_channels_get>:
}
   2afcc:	2010      	movs	r0, #16
   2afce:	4770      	bx	lr

0002afd0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2afd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2afd2:	ab0b      	add	r3, sp, #44	; 0x2c
   2afd4:	9305      	str	r3, [sp, #20]
   2afd6:	9303      	str	r3, [sp, #12]
   2afd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2afda:	2202      	movs	r2, #2
   2afdc:	9302      	str	r3, [sp, #8]
   2afde:	2300      	movs	r3, #0
   2afe0:	4618      	mov	r0, r3
   2afe2:	e9cd 3300 	strd	r3, r3, [sp]
   2afe6:	f7e4 f9a5 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   2afea:	b007      	add	sp, #28
   2afec:	f85d fb04 	ldr.w	pc, [sp], #4

0002aff0 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2aff0:	2000      	movs	r0, #0
   2aff2:	4770      	bx	lr

0002aff4 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   2aff4:	2300      	movs	r3, #0
{
   2aff6:	b570      	push	{r4, r5, r6, lr}
   2aff8:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   2affa:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2affe:	ab03      	add	r3, sp, #12
   2b000:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2b002:	2304      	movs	r3, #4
{
   2b004:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   2b006:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2b008:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   2b00a:	b169      	cbz	r1, 2b028 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   2b00c:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   2b00e:	680b      	ldr	r3, [r1, #0]
   2b010:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   2b012:	684b      	ldr	r3, [r1, #4]
   2b014:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2b016:	2101      	movs	r1, #1
   2b018:	2041      	movs	r0, #65	; 0x41
   2b01a:	f7f2 fc27 	bl	1d86c <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2b01e:	1e05      	subs	r5, r0, #0
   2b020:	dc04      	bgt.n	2b02c <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2b022:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   2b024:	b008      	add	sp, #32
   2b026:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2b028:	2601      	movs	r6, #1
   2b02a:	e7f4      	b.n	2b016 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   2b02c:	1e23      	subs	r3, r4, #0
   2b02e:	bf18      	it	ne
   2b030:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   2b032:	2100      	movs	r1, #0
   2b034:	e9cd 4300 	strd	r4, r3, [sp]
   2b038:	aa04      	add	r2, sp, #16
   2b03a:	4633      	mov	r3, r6
   2b03c:	f7f2 fbfa 	bl	1d834 <psa_call>
   2b040:	4604      	mov	r4, r0
    psa_close(handle);
   2b042:	4628      	mov	r0, r5
   2b044:	f7f2 fc20 	bl	1d888 <psa_close>
    if (status < PSA_SUCCESS) {
   2b048:	2c00      	cmp	r4, #0
   2b04a:	dbea      	blt.n	2b022 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   2b04c:	4620      	mov	r0, r4
   2b04e:	e7e9      	b.n	2b024 <tfm_platform_ioctl+0x30>

0002b050 <psa_crypto_init>:
}
   2b050:	2000      	movs	r0, #0
   2b052:	4770      	bx	lr

0002b054 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   2b054:	b510      	push	{r4, lr}
   2b056:	b088      	sub	sp, #32
   2b058:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2b05a:	ab05      	add	r3, sp, #20
   2b05c:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2b05e:	230c      	movs	r3, #12
   2b060:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2b062:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   2b064:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2b068:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2b06c:	eb0d 0103 	add.w	r1, sp, r3
   2b070:	aa03      	add	r2, sp, #12
   2b072:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   2b074:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2b078:	f7ff ffbc 	bl	2aff4 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2b07c:	9b00      	ldr	r3, [sp, #0]
   2b07e:	6023      	str	r3, [r4, #0]

	return ret;
}
   2b080:	b008      	add	sp, #32
   2b082:	bd10      	pop	{r4, pc}

0002b084 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   2b084:	2300      	movs	r3, #0
{
   2b086:	b510      	push	{r4, lr}
   2b088:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2b08a:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   2b08e:	ab05      	add	r3, sp, #20
   2b090:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2b092:	230c      	movs	r3, #12
   2b094:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2b096:	2304      	movs	r3, #4
{
   2b098:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2b09a:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2b09c:	aa03      	add	r2, sp, #12
   2b09e:	eb0d 0103 	add.w	r1, sp, r3
   2b0a2:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   2b0a4:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2b0a6:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2b0aa:	f7ff ffa3 	bl	2aff4 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2b0ae:	9b00      	ldr	r3, [sp, #0]
   2b0b0:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   2b0b2:	b008      	add	sp, #32
   2b0b4:	bd10      	pop	{r4, pc}

0002b0b6 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2b0b6:	f7f2 bbf5 	b.w	1d8a4 <SystemCoreClockUpdate>

0002b0ba <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2b0ba:	4700      	bx	r0

0002b0bc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2b0bc:	f000 bef6 	b.w	2beac <z_impl_k_busy_wait>

0002b0c0 <nrf_gpio_pin_present_check>:
    switch (port)
   2b0c0:	0943      	lsrs	r3, r0, #5
   2b0c2:	d00b      	beq.n	2b0dc <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   2b0c4:	2b01      	cmp	r3, #1
   2b0c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b0ca:	bf18      	it	ne
   2b0cc:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2b0ce:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2b0d2:	fa23 f000 	lsr.w	r0, r3, r0
}
   2b0d6:	f000 0001 	and.w	r0, r0, #1
   2b0da:	4770      	bx	lr
    switch (port)
   2b0dc:	f04f 33ff 	mov.w	r3, #4294967295
   2b0e0:	e7f5      	b.n	2b0ce <nrf_gpio_pin_present_check+0xe>

0002b0e2 <pin_is_task_output>:
{
   2b0e2:	b508      	push	{r3, lr}
   2b0e4:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2b0e6:	f7f2 fe5f 	bl	1dda8 <pin_is_output>
   2b0ea:	b110      	cbz	r0, 2b0f2 <pin_is_task_output+0x10>
   2b0ec:	4610      	mov	r0, r2
   2b0ee:	f7f2 fe45 	bl	1dd7c <pin_in_use_by_te>
}
   2b0f2:	f000 0001 	and.w	r0, r0, #1
   2b0f6:	bd08      	pop	{r3, pc}

0002b0f8 <nrf_gpio_reconfigure>:
{
   2b0f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b0fc:	4617      	mov	r7, r2
   2b0fe:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2b102:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b104:	a801      	add	r0, sp, #4
{
   2b106:	460c      	mov	r4, r1
   2b108:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b10a:	f7f2 fed1 	bl	1deb0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2b10e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2b110:	1e39      	subs	r1, r7, #0
   2b112:	bf18      	it	ne
   2b114:	2101      	movne	r1, #1
   2b116:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2b11a:	1e23      	subs	r3, r4, #0
   2b11c:	bf18      	it	ne
   2b11e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2b120:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2b122:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2b126:	bf14      	ite	ne
   2b128:	210c      	movne	r1, #12
   2b12a:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2b12c:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2b12e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2b132:	bf14      	ite	ne
   2b134:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   2b138:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2b13a:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2b13e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2b142:	bf14      	ite	ne
   2b144:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2b148:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2b14a:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2b14e:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2b150:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2b154:	b104      	cbz	r4, 2b158 <nrf_gpio_reconfigure+0x60>
   2b156:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2b158:	b10f      	cbz	r7, 2b15e <nrf_gpio_reconfigure+0x66>
   2b15a:	783f      	ldrb	r7, [r7, #0]
   2b15c:	007f      	lsls	r7, r7, #1
   2b15e:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2b160:	b10e      	cbz	r6, 2b166 <nrf_gpio_reconfigure+0x6e>
   2b162:	7836      	ldrb	r6, [r6, #0]
   2b164:	00b6      	lsls	r6, r6, #2
   2b166:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2b168:	b18d      	cbz	r5, 2b18e <nrf_gpio_reconfigure+0x96>
   2b16a:	7829      	ldrb	r1, [r5, #0]
   2b16c:	0209      	lsls	r1, r1, #8
   2b16e:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2b170:	f1b8 0f00 	cmp.w	r8, #0
   2b174:	d003      	beq.n	2b17e <nrf_gpio_reconfigure+0x86>
   2b176:	f898 8000 	ldrb.w	r8, [r8]
   2b17a:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2b17e:	4321      	orrs	r1, r4
   2b180:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   2b184:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   2b188:	b002      	add	sp, #8
   2b18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2b18e:	4629      	mov	r1, r5
   2b190:	e7ed      	b.n	2b16e <nrf_gpio_reconfigure+0x76>

0002b192 <nrf_gpio_cfg_sense_set>:
{
   2b192:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2b194:	f10d 030f 	add.w	r3, sp, #15
   2b198:	9301      	str	r3, [sp, #4]
   2b19a:	2300      	movs	r3, #0
{
   2b19c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2b1a0:	461a      	mov	r2, r3
   2b1a2:	4619      	mov	r1, r3
   2b1a4:	9300      	str	r3, [sp, #0]
   2b1a6:	f7ff ffa7 	bl	2b0f8 <nrf_gpio_reconfigure>
}
   2b1aa:	b005      	add	sp, #20
   2b1ac:	f85d fb04 	ldr.w	pc, [sp], #4

0002b1b0 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2b1b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2b1b4:	4770      	bx	lr

0002b1b6 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2b1b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2b1ba:	4770      	bx	lr

0002b1bc <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2b1bc:	f44f 7080 	mov.w	r0, #256	; 0x100
   2b1c0:	4770      	bx	lr

0002b1c2 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   2b1c2:	2100      	movs	r1, #0
   2b1c4:	f7f3 bbc6 	b.w	1e954 <nrf_gpio_cfg.constprop.0>

0002b1c8 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2b1c8:	2302      	movs	r3, #2
   2b1ca:	f7f3 baff 	b.w	1e7cc <qspi_xfer>

0002b1ce <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2b1ce:	2303      	movs	r3, #3
   2b1d0:	f7f3 bafc 	b.w	1e7cc <qspi_xfer>

0002b1d4 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2b1d4:	2100      	movs	r1, #0
   2b1d6:	2002      	movs	r0, #2
   2b1d8:	f7f3 be1e 	b.w	1ee18 <nrfx_qspi_erase>

0002b1dc <nrf_gpio_pin_clear>:
{
   2b1dc:	b507      	push	{r0, r1, r2, lr}
   2b1de:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b1e0:	a801      	add	r0, sp, #4
   2b1e2:	f7f3 fe93 	bl	1ef0c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2b1e6:	2301      	movs	r3, #1
   2b1e8:	9a01      	ldr	r2, [sp, #4]
   2b1ea:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2b1ec:	60c3      	str	r3, [r0, #12]
}
   2b1ee:	b003      	add	sp, #12
   2b1f0:	f85d fb04 	ldr.w	pc, [sp], #4

0002b1f4 <nrf_gpio_pin_set>:
{
   2b1f4:	b507      	push	{r0, r1, r2, lr}
   2b1f6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b1f8:	a801      	add	r0, sp, #4
   2b1fa:	f7f3 fe87 	bl	1ef0c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2b1fe:	2301      	movs	r3, #1
   2b200:	9a01      	ldr	r2, [sp, #4]
   2b202:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2b204:	6083      	str	r3, [r0, #8]
}
   2b206:	b003      	add	sp, #12
   2b208:	f85d fb04 	ldr.w	pc, [sp], #4

0002b20c <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   2b20c:	7f83      	ldrb	r3, [r0, #30]
   2b20e:	075a      	lsls	r2, r3, #29
   2b210:	d40b      	bmi.n	2b22a <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2b212:	7fc0      	ldrb	r0, [r0, #31]
   2b214:	28ff      	cmp	r0, #255	; 0xff
   2b216:	d008      	beq.n	2b22a <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   2b218:	079b      	lsls	r3, r3, #30
   2b21a:	bf58      	it	pl
   2b21c:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   2b220:	b909      	cbnz	r1, 2b226 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   2b222:	f7ff bfdb 	b.w	2b1dc <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2b226:	f7ff bfe5 	b.w	2b1f4 <nrf_gpio_pin_set>
}
   2b22a:	4770      	bx	lr

0002b22c <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2b22c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b230:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b232:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2b234:	4698      	mov	r8, r3
   2b236:	460f      	mov	r7, r1
   2b238:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b23a:	f7f3 fe67 	bl	1ef0c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2b23e:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2b240:	f89d 4020 	ldrb.w	r4, [sp, #32]
   2b244:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2b248:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2b24a:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2b24e:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   2b252:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2b256:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2b25a:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2b25e:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   2b260:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   2b264:	b002      	add	sp, #8
   2b266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b26a <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2b26a:	1c43      	adds	r3, r0, #1
{
   2b26c:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2b26e:	d005      	beq.n	2b27c <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   2b270:	2300      	movs	r3, #0
   2b272:	2201      	movs	r2, #1
   2b274:	4619      	mov	r1, r3
   2b276:	9300      	str	r3, [sp, #0]
   2b278:	f7ff ffd8 	bl	2b22c <nrf_gpio_cfg.constprop.0>
}
   2b27c:	b003      	add	sp, #12
   2b27e:	f85d fb04 	ldr.w	pc, [sp], #4

0002b282 <metal_device_open>:
{
   2b282:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b284:	460c      	mov	r4, r1
   2b286:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2b288:	4606      	mov	r6, r0
   2b28a:	b918      	cbnz	r0, 2b294 <metal_device_open+0x12>
		return -EINVAL;
   2b28c:	f06f 0015 	mvn.w	r0, #21
}
   2b290:	b002      	add	sp, #8
   2b292:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   2b294:	f7de f8b9 	bl	940a <strlen>
   2b298:	2800      	cmp	r0, #0
   2b29a:	d0f7      	beq.n	2b28c <metal_device_open+0xa>
   2b29c:	2c00      	cmp	r4, #0
   2b29e:	d0f5      	beq.n	2b28c <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   2b2a0:	4620      	mov	r0, r4
   2b2a2:	f7de f8b2 	bl	940a <strlen>
   2b2a6:	2800      	cmp	r0, #0
   2b2a8:	d0f0      	beq.n	2b28c <metal_device_open+0xa>
   2b2aa:	2d00      	cmp	r5, #0
   2b2ac:	d0ee      	beq.n	2b28c <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   2b2ae:	4630      	mov	r0, r6
   2b2b0:	a901      	add	r1, sp, #4
   2b2b2:	f7f4 f941 	bl	1f538 <metal_bus_find>
	if (error)
   2b2b6:	2800      	cmp	r0, #0
   2b2b8:	d1ea      	bne.n	2b290 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   2b2ba:	9801      	ldr	r0, [sp, #4]
   2b2bc:	6883      	ldr	r3, [r0, #8]
   2b2be:	b12b      	cbz	r3, 2b2cc <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2b2c0:	462a      	mov	r2, r5
   2b2c2:	4621      	mov	r1, r4
}
   2b2c4:	b002      	add	sp, #8
   2b2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2b2ca:	4718      	bx	r3
		return -ENODEV;
   2b2cc:	f06f 0012 	mvn.w	r0, #18
   2b2d0:	e7de      	b.n	2b290 <metal_device_open+0xe>

0002b2d2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   2b2d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b2d6:	b089      	sub	sp, #36	; 0x24
   2b2d8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2b2da:	4604      	mov	r4, r0
   2b2dc:	4689      	mov	r9, r1
   2b2de:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   2b2e0:	2100      	movs	r1, #0
   2b2e2:	2220      	movs	r2, #32
   2b2e4:	4668      	mov	r0, sp
{
   2b2e6:	461f      	mov	r7, r3
   2b2e8:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   2b2ea:	f000 ff29 	bl	2c140 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   2b2ee:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   2b2f0:	bf97      	itett	ls
   2b2f2:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   2b2f4:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   2b2f8:	40b3      	lslls	r3, r6
   2b2fa:	f103 33ff 	addls.w	r3, r3, #4294967295
   2b2fe:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   2b300:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   2b302:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   2b306:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   2b30a:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   2b30c:	3418      	adds	r4, #24
   2b30e:	b145      	cbz	r5, 2b322 <metal_io_init+0x50>
   2b310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2b312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2b314:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2b318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   2b31c:	b009      	add	sp, #36	; 0x24
   2b31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   2b322:	466d      	mov	r5, sp
   2b324:	e7f4      	b.n	2b310 <metal_io_init+0x3e>

0002b326 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   2b326:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b328:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2b32a:	1c66      	adds	r6, r4, #1
   2b32c:	d031      	beq.n	2b392 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b32e:	6885      	ldr	r5, [r0, #8]
   2b330:	42a9      	cmp	r1, r5
   2b332:	d22e      	bcs.n	2b392 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   2b334:	1864      	adds	r4, r4, r1
   2b336:	d02c      	beq.n	2b392 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   2b338:	185e      	adds	r6, r3, r1
   2b33a:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2b33c:	bf88      	it	hi
   2b33e:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   2b340:	6a05      	ldr	r5, [r0, #32]
   2b342:	b135      	cbz	r5, 2b352 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   2b344:	9300      	str	r3, [sp, #0]
   2b346:	2305      	movs	r3, #5
   2b348:	47a8      	blx	r5
   2b34a:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   2b34c:	4618      	mov	r0, r3
   2b34e:	b002      	add	sp, #8
   2b350:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   2b352:	f3bf 8f5b 	dmb	ish
		while ( len && (
   2b356:	4619      	mov	r1, r3
   2b358:	1aa4      	subs	r4, r4, r2
   2b35a:	1910      	adds	r0, r2, r4
   2b35c:	b119      	cbz	r1, 2b366 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   2b35e:	ea40 0502 	orr.w	r5, r0, r2
   2b362:	07ad      	lsls	r5, r5, #30
   2b364:	d10a      	bne.n	2b37c <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2b366:	2903      	cmp	r1, #3
   2b368:	dc0d      	bgt.n	2b386 <metal_io_block_read+0x60>
   2b36a:	3801      	subs	r0, #1
   2b36c:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   2b36e:	428a      	cmp	r2, r1
   2b370:	d0ec      	beq.n	2b34c <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   2b372:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   2b376:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2b37a:	e7f8      	b.n	2b36e <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   2b37c:	7800      	ldrb	r0, [r0, #0]
			len--;
   2b37e:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   2b380:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   2b384:	e7e9      	b.n	2b35a <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   2b386:	f850 4b04 	ldr.w	r4, [r0], #4
   2b38a:	3904      	subs	r1, #4
   2b38c:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   2b390:	e7e9      	b.n	2b366 <metal_io_block_read+0x40>
		return -ERANGE;
   2b392:	f06f 0321 	mvn.w	r3, #33	; 0x21
   2b396:	e7d9      	b.n	2b34c <metal_io_block_read+0x26>

0002b398 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2b398:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b39a:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2b39c:	1c65      	adds	r5, r4, #1
   2b39e:	d032      	beq.n	2b406 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b3a0:	6885      	ldr	r5, [r0, #8]
   2b3a2:	42a9      	cmp	r1, r5
   2b3a4:	d22f      	bcs.n	2b406 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   2b3a6:	1864      	adds	r4, r4, r1
   2b3a8:	d02d      	beq.n	2b406 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2b3aa:	185e      	adds	r6, r3, r1
   2b3ac:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2b3ae:	bf88      	it	hi
   2b3b0:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   2b3b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2b3b4:	b1cd      	cbz	r5, 2b3ea <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   2b3b6:	9300      	str	r3, [sp, #0]
   2b3b8:	2305      	movs	r3, #5
   2b3ba:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2b3bc:	b002      	add	sp, #8
   2b3be:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   2b3c0:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   2b3c4:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   2b3c6:	7005      	strb	r5, [r0, #0]
			len--;
   2b3c8:	4615      	mov	r5, r2
   2b3ca:	18a0      	adds	r0, r4, r2
		while ( len && (
   2b3cc:	b119      	cbz	r1, 2b3d6 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   2b3ce:	ea40 0602 	orr.w	r6, r0, r2
   2b3d2:	07b6      	lsls	r6, r6, #30
   2b3d4:	d1f4      	bne.n	2b3c0 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2b3d6:	2903      	cmp	r1, #3
   2b3d8:	dc0a      	bgt.n	2b3f0 <metal_io_block_write+0x58>
   2b3da:	3d01      	subs	r5, #1
   2b3dc:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   2b3de:	4288      	cmp	r0, r1
   2b3e0:	d10c      	bne.n	2b3fc <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   2b3e2:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2b3e6:	4618      	mov	r0, r3
   2b3e8:	e7e8      	b.n	2b3bc <metal_io_block_write+0x24>
   2b3ea:	4619      	mov	r1, r3
   2b3ec:	1aa4      	subs	r4, r4, r2
   2b3ee:	e7eb      	b.n	2b3c8 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   2b3f0:	f855 2b04 	ldr.w	r2, [r5], #4
   2b3f4:	3904      	subs	r1, #4
   2b3f6:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   2b3fa:	e7ec      	b.n	2b3d6 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   2b3fc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   2b400:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   2b404:	e7eb      	b.n	2b3de <metal_io_block_write+0x46>
		return -ERANGE;
   2b406:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2b40a:	e7d7      	b.n	2b3bc <metal_io_block_write+0x24>

0002b40c <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   2b40c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b40e:	6804      	ldr	r4, [r0, #0]
   2b410:	461d      	mov	r5, r3
		: NULL);
   2b412:	1c66      	adds	r6, r4, #1
   2b414:	d02b      	beq.n	2b46e <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b416:	6883      	ldr	r3, [r0, #8]
   2b418:	4299      	cmp	r1, r3
   2b41a:	d228      	bcs.n	2b46e <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   2b41c:	1864      	adds	r4, r4, r1
   2b41e:	d026      	beq.n	2b46e <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   2b420:	186e      	adds	r6, r5, r1
   2b422:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   2b424:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   2b426:	bf88      	it	hi
   2b428:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   2b42a:	b12e      	cbz	r6, 2b438 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   2b42c:	2305      	movs	r3, #5
   2b42e:	9500      	str	r5, [sp, #0]
   2b430:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   2b432:	4628      	mov	r0, r5
}
   2b434:	b002      	add	sp, #8
   2b436:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   2b438:	4621      	mov	r1, r4
   2b43a:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2b43c:	b94b      	cbnz	r3, 2b452 <metal_io_block_set+0x46>
   2b43e:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   2b440:	4299      	cmp	r1, r3
   2b442:	d111      	bne.n	2b468 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   2b444:	f3bf 8f5b 	dmb	ish
   2b448:	e7f3      	b.n	2b432 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   2b44a:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2b44e:	3b01      	subs	r3, #1
   2b450:	e7f4      	b.n	2b43c <metal_io_block_set+0x30>
   2b452:	0788      	lsls	r0, r1, #30
   2b454:	d1f9      	bne.n	2b44a <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2b456:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   2b45a:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2b45c:	2b03      	cmp	r3, #3
   2b45e:	ddee      	ble.n	2b43e <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   2b460:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2b464:	3b04      	subs	r3, #4
   2b466:	e7f9      	b.n	2b45c <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   2b468:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   2b46c:	e7e8      	b.n	2b440 <metal_io_block_set+0x34>
		return -ERANGE;
   2b46e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2b472:	e7df      	b.n	2b434 <metal_io_block_set+0x28>

0002b474 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   2b474:	2000      	movs	r0, #0
   2b476:	4770      	bx	lr

0002b478 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2b478:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   2b47a:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   2b47c:	4602      	mov	r2, r0
   2b47e:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   2b480:	b984      	cbnz	r4, 2b4a4 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   2b482:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   2b484:	291f      	cmp	r1, #31
   2b486:	bf98      	it	ls
   2b488:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   2b48c:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   2b48e:	b161      	cbz	r1, 2b4aa <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   2b490:	6880      	ldr	r0, [r0, #8]
   2b492:	4283      	cmp	r3, r0
   2b494:	d209      	bcs.n	2b4aa <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   2b496:	6910      	ldr	r0, [r2, #16]
   2b498:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   2b49a:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   2b49e:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   2b4a0:	bc10      	pop	{r4}
   2b4a2:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   2b4a4:	4623      	mov	r3, r4
}
   2b4a6:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   2b4a8:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2b4aa:	f04f 30ff 	mov.w	r0, #4294967295
   2b4ae:	e7f7      	b.n	2b4a0 <metal_io_phys+0x28>

0002b4b0 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   2b4b0:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   2b4b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   2b4b4:	4605      	mov	r5, r0
   2b4b6:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   2b4b8:	b9e3      	cbnz	r3, 2b4f4 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2b4ba:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2b4bc:	1c62      	adds	r2, r4, #1
   2b4be:	bf09      	itett	eq
   2b4c0:	6843      	ldreq	r3, [r0, #4]
   2b4c2:	400c      	andne	r4, r1
   2b4c4:	681c      	ldreq	r4, [r3, #0]
   2b4c6:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   2b4c8:	4621      	mov	r1, r4
   2b4ca:	4628      	mov	r0, r5
   2b4cc:	f7ff ffd4 	bl	2b478 <metal_io_phys>
   2b4d0:	4286      	cmp	r6, r0
   2b4d2:	d007      	beq.n	2b4e4 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   2b4d4:	692b      	ldr	r3, [r5, #16]
   2b4d6:	3301      	adds	r3, #1
   2b4d8:	441c      	add	r4, r3
		} while (offset < io->size);
   2b4da:	68ab      	ldr	r3, [r5, #8]
   2b4dc:	429c      	cmp	r4, r3
   2b4de:	d3f3      	bcc.n	2b4c8 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   2b4e0:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b4e4:	6828      	ldr	r0, [r5, #0]
		: NULL);
   2b4e6:	1c43      	adds	r3, r0, #1
   2b4e8:	d007      	beq.n	2b4fa <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b4ea:	68ab      	ldr	r3, [r5, #8]
   2b4ec:	42a3      	cmp	r3, r4
   2b4ee:	d904      	bls.n	2b4fa <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   2b4f0:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   2b4f2:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   2b4f4:	4798      	blx	r3
   2b4f6:	4604      	mov	r4, r0
   2b4f8:	e7f4      	b.n	2b4e4 <metal_io_phys_to_virt+0x34>
		: NULL);
   2b4fa:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   2b4fc:	e7f9      	b.n	2b4f2 <metal_io_phys_to_virt+0x42>

0002b4fe <virtqueue_create>:
{
   2b4fe:	b530      	push	{r4, r5, lr}
   2b500:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   2b502:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   2b506:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   2b508:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   2b50a:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   2b50c:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   2b50e:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   2b510:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   2b512:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   2b514:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2b516:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2b51a:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   2b51e:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2b522:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2b524:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2b526:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   2b52a:	1c6a      	adds	r2, r5, #1
   2b52c:	4413      	add	r3, r2
   2b52e:	426d      	negs	r5, r5
   2b530:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   2b532:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b534:	6983      	ldr	r3, [r0, #24]
   2b536:	b953      	cbnz	r3, 2b54e <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   2b538:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   2b53a:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   2b53c:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   2b53e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   2b542:	db06      	blt.n	2b552 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   2b544:	2300      	movs	r3, #0
   2b546:	7393      	strb	r3, [r2, #14]
   2b548:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2b54c:	73d3      	strb	r3, [r2, #15]
}
   2b54e:	2000      	movs	r0, #0
   2b550:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   2b552:	3301      	adds	r3, #1
   2b554:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   2b556:	e7f0      	b.n	2b53a <virtqueue_create+0x3c>

0002b558 <virtqueue_add_buffer>:
{
   2b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   2b55c:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   2b560:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b562:	4655      	mov	r5, sl
   2b564:	2600      	movs	r6, #0
{
   2b566:	b085      	sub	sp, #20
	needed = readable + writable;
   2b568:	eb02 0803 	add.w	r8, r2, r3
{
   2b56c:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   2b56e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b570:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   2b574:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   2b578:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   2b57a:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   2b57e:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   2b582:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b584:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   2b586:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b588:	45b0      	cmp	r8, r6
   2b58a:	dc1a      	bgt.n	2b5c2 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   2b58c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   2b58e:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   2b590:	eba3 030b 	sub.w	r3, r3, fp
   2b594:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2b596:	69e3      	ldr	r3, [r4, #28]
   2b598:	8961      	ldrh	r1, [r4, #10]
   2b59a:	885a      	ldrh	r2, [r3, #2]
   2b59c:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   2b59e:	400a      	ands	r2, r1
   2b5a0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2b5a4:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   2b5a8:	f3bf 8f5b 	dmb	ish
}
   2b5ac:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   2b5ae:	69e2      	ldr	r2, [r4, #28]
   2b5b0:	8853      	ldrh	r3, [r2, #2]
   2b5b2:	3301      	adds	r3, #1
   2b5b4:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2b5b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2b5b8:	3301      	adds	r3, #1
   2b5ba:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2b5bc:	b005      	add	sp, #20
   2b5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   2b5c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2b5c4:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2b5c6:	f857 1c04 	ldr.w	r1, [r7, #-4]
   2b5ca:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   2b5ce:	9302      	str	r3, [sp, #8]
   2b5d0:	6803      	ldr	r3, [r0, #0]
   2b5d2:	9203      	str	r2, [sp, #12]
   2b5d4:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2b5d6:	6883      	ldr	r3, [r0, #8]
   2b5d8:	3708      	adds	r7, #8
   2b5da:	4299      	cmp	r1, r3
   2b5dc:	bf28      	it	cs
   2b5de:	f04f 31ff 	movcs.w	r1, #4294967295
   2b5e2:	f7ff ff49 	bl	2b478 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2b5e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2b5ea:	5098      	str	r0, [r3, r2]
   2b5ec:	2200      	movs	r2, #0
   2b5ee:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   2b5f0:	f857 2c08 	ldr.w	r2, [r7, #-8]
   2b5f4:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   2b5f6:	9a01      	ldr	r2, [sp, #4]
   2b5f8:	4296      	cmp	r6, r2
   2b5fa:	bfac      	ite	ge
   2b5fc:	2200      	movge	r2, #0
   2b5fe:	2201      	movlt	r2, #1
		if (i >= readable)
   2b600:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   2b602:	bfd8      	it	le
   2b604:	f042 0202 	orrle.w	r2, r2, #2
   2b608:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b60a:	3601      	adds	r6, #1
   2b60c:	89ed      	ldrh	r5, [r5, #14]
   2b60e:	e7bb      	b.n	2b588 <virtqueue_add_buffer+0x30>

0002b610 <virtqueue_get_buffer>:
{
   2b610:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   2b612:	b350      	cbz	r0, 2b66a <virtqueue_get_buffer+0x5a>
   2b614:	6a05      	ldr	r5, [r0, #32]
   2b616:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   2b618:	886b      	ldrh	r3, [r5, #2]
   2b61a:	42a3      	cmp	r3, r4
   2b61c:	d030      	beq.n	2b680 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2b61e:	1c63      	adds	r3, r4, #1
   2b620:	85c3      	strh	r3, [r0, #46]	; 0x2e
   2b622:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   2b624:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2b628:	3b01      	subs	r3, #1
   2b62a:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   2b62c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2b630:	686b      	ldr	r3, [r5, #4]
   2b632:	b29e      	uxth	r6, r3
	if (len)
   2b634:	b109      	cbz	r1, 2b63a <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   2b636:	68ad      	ldr	r5, [r5, #8]
   2b638:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   2b63a:	f8d0 c018 	ldr.w	ip, [r0, #24]
   2b63e:	b29b      	uxth	r3, r3
   2b640:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   2b644:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2b648:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   2b64a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   2b64c:	442f      	add	r7, r5
	dxp->ndescs--;
   2b64e:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   2b650:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   2b652:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   2b654:	898d      	ldrh	r5, [r1, #12]
   2b656:	076f      	lsls	r7, r5, #29
   2b658:	d50e      	bpl.n	2b678 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   2b65a:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   2b65c:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   2b65e:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   2b660:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   2b662:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   2b664:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   2b666:	b102      	cbz	r2, 2b66a <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   2b668:	8014      	strh	r4, [r2, #0]
}
   2b66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   2b66c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   2b66e:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   2b670:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   2b672:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   2b676:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   2b678:	898d      	ldrh	r5, [r1, #12]
   2b67a:	07ed      	lsls	r5, r5, #31
   2b67c:	d4f6      	bmi.n	2b66c <virtqueue_get_buffer+0x5c>
   2b67e:	e7ec      	b.n	2b65a <virtqueue_get_buffer+0x4a>
		return NULL;
   2b680:	2000      	movs	r0, #0
   2b682:	e7f2      	b.n	2b66a <virtqueue_get_buffer+0x5a>

0002b684 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   2b684:	6983      	ldr	r3, [r0, #24]
   2b686:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   2b68a:	6898      	ldr	r0, [r3, #8]
   2b68c:	4770      	bx	lr

0002b68e <virtqueue_get_available_buffer>:
{
   2b68e:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2b690:	f3bf 8f5b 	dmb	ish
{
   2b694:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b696:	69c1      	ldr	r1, [r0, #28]
{
   2b698:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b69a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   2b69c:	884a      	ldrh	r2, [r1, #2]
{
   2b69e:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b6a0:	429a      	cmp	r2, r3
   2b6a2:	d016      	beq.n	2b6d2 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2b6a4:	1c5a      	adds	r2, r3, #1
   2b6a6:	8602      	strh	r2, [r0, #48]	; 0x30
   2b6a8:	8942      	ldrh	r2, [r0, #10]
   2b6aa:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2b6ac:	4013      	ands	r3, r2
   2b6ae:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   2b6b2:	888a      	ldrh	r2, [r1, #4]
   2b6b4:	802a      	strh	r2, [r5, #0]
   2b6b6:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2b6b8:	6982      	ldr	r2, [r0, #24]
   2b6ba:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   2b6bc:	58d1      	ldr	r1, [r2, r3]
   2b6be:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2b6c0:	f7ff fef6 	bl	2b4b0 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   2b6c4:	882a      	ldrh	r2, [r5, #0]
   2b6c6:	69a3      	ldr	r3, [r4, #24]
   2b6c8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2b6cc:	689b      	ldr	r3, [r3, #8]
   2b6ce:	6033      	str	r3, [r6, #0]
}
   2b6d0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2b6d2:	2000      	movs	r0, #0
   2b6d4:	e7fc      	b.n	2b6d0 <virtqueue_get_available_buffer+0x42>

0002b6d6 <virtqueue_disable_cb>:
{
   2b6d6:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b6d8:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b6da:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b6dc:	6912      	ldr	r2, [r2, #16]
   2b6de:	0092      	lsls	r2, r2, #2
   2b6e0:	d517      	bpl.n	2b712 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b6e2:	b943      	cbnz	r3, 2b6f6 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2b6e4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   2b6e6:	69c2      	ldr	r2, [r0, #28]
   2b6e8:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2b6ea:	8944      	ldrh	r4, [r0, #10]
   2b6ec:	3b01      	subs	r3, #1
   2b6ee:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   2b6f0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2b6f4:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2b6f6:	6803      	ldr	r3, [r0, #0]
   2b6f8:	699b      	ldr	r3, [r3, #24]
   2b6fa:	2b01      	cmp	r3, #1
   2b6fc:	d108      	bne.n	2b710 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2b6fe:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   2b700:	6a02      	ldr	r2, [r0, #32]
   2b702:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2b704:	8940      	ldrh	r0, [r0, #10]
   2b706:	3b01      	subs	r3, #1
   2b708:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   2b70a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   2b70e:	8093      	strh	r3, [r2, #4]
}
   2b710:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b712:	b923      	cbnz	r3, 2b71e <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2b714:	69c2      	ldr	r2, [r0, #28]
   2b716:	8813      	ldrh	r3, [r2, #0]
   2b718:	f043 0301 	orr.w	r3, r3, #1
   2b71c:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2b71e:	6803      	ldr	r3, [r0, #0]
   2b720:	699b      	ldr	r3, [r3, #24]
   2b722:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2b724:	bf01      	itttt	eq
   2b726:	6a02      	ldreq	r2, [r0, #32]
   2b728:	8813      	ldrheq	r3, [r2, #0]
   2b72a:	f043 0301 	orreq.w	r3, r3, #1
   2b72e:	8013      	strheq	r3, [r2, #0]
}
   2b730:	e7ee      	b.n	2b710 <virtqueue_disable_cb+0x3a>

0002b732 <virtqueue_kick>:
{
   2b732:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2b734:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b738:	6803      	ldr	r3, [r0, #0]
{
   2b73a:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b73c:	691a      	ldr	r2, [r3, #16]
   2b73e:	699b      	ldr	r3, [r3, #24]
   2b740:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   2b744:	d01a      	beq.n	2b77c <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b746:	b97b      	cbnz	r3, 2b768 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   2b748:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   2b74a:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   2b74c:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   2b74e:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   2b750:	3b01      	subs	r3, #1
   2b752:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   2b756:	8892      	ldrh	r2, [r2, #4]
   2b758:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   2b75a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2b75c:	b29b      	uxth	r3, r3
   2b75e:	429a      	cmp	r2, r3
   2b760:	d814      	bhi.n	2b78c <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   2b762:	2300      	movs	r3, #0
   2b764:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2b766:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2b768:	2b01      	cmp	r3, #1
   2b76a:	d1fa      	bne.n	2b762 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   2b76c:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2b76e:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   2b770:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   2b772:	6941      	ldr	r1, [r0, #20]
   2b774:	3b01      	subs	r3, #1
   2b776:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2b77a:	e7ec      	b.n	2b756 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2b77c:	b963      	cbnz	r3, 2b798 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   2b77e:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   2b780:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2b782:	43db      	mvns	r3, r3
   2b784:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   2b788:	2b00      	cmp	r3, #0
   2b78a:	d0ea      	beq.n	2b762 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   2b78c:	6923      	ldr	r3, [r4, #16]
   2b78e:	2b00      	cmp	r3, #0
   2b790:	d0e7      	beq.n	2b762 <virtqueue_kick+0x30>
		vq->notify(vq);
   2b792:	4620      	mov	r0, r4
   2b794:	4798      	blx	r3
   2b796:	e7e4      	b.n	2b762 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2b798:	2b01      	cmp	r3, #1
   2b79a:	d1e2      	bne.n	2b762 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   2b79c:	69c3      	ldr	r3, [r0, #28]
   2b79e:	e7ef      	b.n	2b780 <virtqueue_kick+0x4e>

0002b7a0 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b7a0:	69c3      	ldr	r3, [r0, #28]
   2b7a2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   2b7a4:	8859      	ldrh	r1, [r3, #2]
   2b7a6:	4291      	cmp	r1, r2
   2b7a8:	d00a      	beq.n	2b7c0 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2b7aa:	8941      	ldrh	r1, [r0, #10]
   2b7ac:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   2b7ae:	400a      	ands	r2, r1
   2b7b0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   2b7b4:	889a      	ldrh	r2, [r3, #4]
   2b7b6:	6983      	ldr	r3, [r0, #24]
   2b7b8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2b7bc:	6898      	ldr	r0, [r3, #8]
	return len;
   2b7be:	4770      	bx	lr
		return 0;
   2b7c0:	2000      	movs	r0, #0
}
   2b7c2:	4770      	bx	lr

0002b7c4 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   2b7c4:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2b7c8:	68c3      	ldr	r3, [r0, #12]
   2b7ca:	b103      	cbz	r3, 2b7ce <virtqueue_notification+0xa>
		vq->callback(vq);
   2b7cc:	4718      	bx	r3
}
   2b7ce:	4770      	bx	lr

0002b7d0 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2b7d0:	f04f 32ff 	mov.w	r2, #4294967295
   2b7d4:	f04f 33ff 	mov.w	r3, #4294967295
   2b7d8:	f7f5 bb8a 	b.w	20ef0 <z_impl_k_sem_take>

0002b7dc <rpmsg_unregister_endpoint>:
{
   2b7dc:	b570      	push	{r4, r5, r6, lr}
   2b7de:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   2b7e0:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   2b7e2:	f105 0658 	add.w	r6, r5, #88	; 0x58
   2b7e6:	4630      	mov	r0, r6
   2b7e8:	f7ff fff2 	bl	2b7d0 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2b7ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b7ee:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   2b7f2:	2b7f      	cmp	r3, #127	; 0x7f
   2b7f4:	d80b      	bhi.n	2b80e <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2b7f6:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2b7f8:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2b7fa:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2b7fc:	f003 031f 	and.w	r3, r3, #31
   2b800:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2b802:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   2b806:	ea23 0302 	bic.w	r3, r3, r2
   2b80a:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   2b80e:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2b812:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2b814:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   2b816:	f104 0334 	add.w	r3, r4, #52	; 0x34
   2b81a:	6011      	str	r1, [r2, #0]
	node->next = node;
   2b81c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2b820:	2300      	movs	r3, #0
   2b822:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2b824:	4630      	mov	r0, r6
}
   2b826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b82a:	f7f5 bb1d 	b.w	20e68 <z_impl_k_sem_give>

0002b82e <rpmsg_send_ns_message>:
{
   2b82e:	b530      	push	{r4, r5, lr}
   2b830:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   2b832:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   2b834:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2b836:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2b838:	2220      	movs	r2, #32
   2b83a:	4601      	mov	r1, r0
   2b83c:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   2b83e:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2b840:	f000 fdcd 	bl	2c3de <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   2b844:	2328      	movs	r3, #40	; 0x28
   2b846:	2201      	movs	r2, #1
   2b848:	4629      	mov	r1, r5
   2b84a:	e9cd 3200 	strd	r3, r2, [sp]
   2b84e:	4620      	mov	r0, r4
   2b850:	2235      	movs	r2, #53	; 0x35
   2b852:	ab02      	add	r3, sp, #8
   2b854:	f7f3 ffde 	bl	1f814 <rpmsg_send_offchannel_raw>
}
   2b858:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2b85c:	b00d      	add	sp, #52	; 0x34
   2b85e:	bd30      	pop	{r4, r5, pc}

0002b860 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2b860:	b128      	cbz	r0, 2b86e <rpmsg_hold_rx_buffer+0xe>
   2b862:	6a00      	ldr	r0, [r0, #32]
   2b864:	b118      	cbz	r0, 2b86e <rpmsg_hold_rx_buffer+0xe>
   2b866:	b111      	cbz	r1, 2b86e <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   2b868:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2b86a:	b103      	cbz	r3, 2b86e <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   2b86c:	4718      	bx	r3
}
   2b86e:	4770      	bx	lr

0002b870 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2b870:	b130      	cbz	r0, 2b880 <rpmsg_release_rx_buffer+0x10>
   2b872:	6a00      	ldr	r0, [r0, #32]
   2b874:	b120      	cbz	r0, 2b880 <rpmsg_release_rx_buffer+0x10>
   2b876:	b119      	cbz	r1, 2b880 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   2b878:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   2b87c:	b103      	cbz	r3, 2b880 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   2b87e:	4718      	bx	r3
}
   2b880:	4770      	bx	lr

0002b882 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   2b882:	b130      	cbz	r0, 2b892 <rpmsg_get_tx_payload_buffer+0x10>
   2b884:	6a00      	ldr	r0, [r0, #32]
   2b886:	b120      	cbz	r0, 2b892 <rpmsg_get_tx_payload_buffer+0x10>
   2b888:	b119      	cbz	r1, 2b892 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   2b88a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   2b88e:	b103      	cbz	r3, 2b892 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   2b890:	4718      	bx	r3
}
   2b892:	2000      	movs	r0, #0
   2b894:	4770      	bx	lr

0002b896 <rpmsg_get_endpoint>:
{
   2b896:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b89a:	4606      	mov	r6, r0
   2b89c:	4688      	mov	r8, r1
   2b89e:	4617      	mov	r7, r2
   2b8a0:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2b8a2:	6804      	ldr	r4, [r0, #0]
   2b8a4:	42a6      	cmp	r6, r4
   2b8a6:	d101      	bne.n	2b8ac <rpmsg_get_endpoint+0x16>
	return NULL;
   2b8a8:	2500      	movs	r5, #0
   2b8aa:	e023      	b.n	2b8f4 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b8ac:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2b8ae:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b8b2:	d002      	beq.n	2b8ba <rpmsg_get_endpoint+0x24>
   2b8b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2b8b6:	42bb      	cmp	r3, r7
   2b8b8:	d01c      	beq.n	2b8f4 <rpmsg_get_endpoint+0x5e>
		if (name)
   2b8ba:	f1b8 0f00 	cmp.w	r8, #0
   2b8be:	d101      	bne.n	2b8c4 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   2b8c0:	6824      	ldr	r4, [r4, #0]
   2b8c2:	e7ef      	b.n	2b8a4 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   2b8c4:	2220      	movs	r2, #32
   2b8c6:	4641      	mov	r1, r8
   2b8c8:	4628      	mov	r0, r5
   2b8ca:	f000 fd76 	bl	2c3ba <strncmp>
		if (!name || !name_match)
   2b8ce:	2800      	cmp	r0, #0
   2b8d0:	d1f6      	bne.n	2b8c0 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2b8d2:	f1b9 3fff 	cmp.w	r9, #4294967295
   2b8d6:	d002      	beq.n	2b8de <rpmsg_get_endpoint+0x48>
   2b8d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2b8da:	454b      	cmp	r3, r9
   2b8dc:	d00a      	beq.n	2b8f4 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2b8de:	1c7b      	adds	r3, r7, #1
   2b8e0:	d00b      	beq.n	2b8fa <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   2b8e2:	6824      	ldr	r4, [r4, #0]
   2b8e4:	42b4      	cmp	r4, r6
   2b8e6:	d0df      	beq.n	2b8a8 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b8e8:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2b8ec:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b8f0:	429f      	cmp	r7, r3
   2b8f2:	d1e7      	bne.n	2b8c4 <rpmsg_get_endpoint+0x2e>
}
   2b8f4:	4628      	mov	r0, r5
   2b8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2b8fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2b8fc:	3301      	adds	r3, #1
   2b8fe:	d0f9      	beq.n	2b8f4 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   2b900:	6824      	ldr	r4, [r4, #0]
   2b902:	42b4      	cmp	r4, r6
   2b904:	d0d0      	beq.n	2b8a8 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2b906:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b90a:	e7d6      	b.n	2b8ba <rpmsg_get_endpoint+0x24>

0002b90c <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   2b90c:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   2b90e:	4604      	mov	r4, r0
   2b910:	b190      	cbz	r0, 2b938 <rpmsg_destroy_ept+0x2c>
   2b912:	6a03      	ldr	r3, [r0, #32]
   2b914:	b183      	cbz	r3, 2b938 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   2b916:	7802      	ldrb	r2, [r0, #0]
   2b918:	b14a      	cbz	r2, 2b92e <rpmsg_destroy_ept+0x22>
   2b91a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   2b91e:	b133      	cbz	r3, 2b92e <rpmsg_destroy_ept+0x22>
   2b920:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2b922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2b926:	d302      	bcc.n	2b92e <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2b928:	2101      	movs	r1, #1
   2b92a:	f7ff ff80 	bl	2b82e <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2b92e:	4620      	mov	r0, r4
}
   2b930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   2b934:	f7ff bf52 	b.w	2b7dc <rpmsg_unregister_endpoint>
}
   2b938:	bd10      	pop	{r4, pc}

0002b93a <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2b93a:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2b93e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2b942:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2b946:	4770      	bx	lr

0002b948 <rpmsg_virtio_tx_callback>:
}
   2b948:	4770      	bx	lr

0002b94a <k_sem_give>:
   2b94a:	f7f5 ba8d 	b.w	20e68 <z_impl_k_sem_give>

0002b94e <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2b94e:	f04f 32ff 	mov.w	r2, #4294967295
   2b952:	f04f 33ff 	mov.w	r3, #4294967295
   2b956:	f7f5 bacb 	b.w	20ef0 <z_impl_k_sem_take>

0002b95a <rpmsg_virtio_release_tx_buffer>:
{
   2b95a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b95c:	460c      	mov	r4, r1
   2b95e:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   2b960:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2b964:	f100 0758 	add.w	r7, r0, #88	; 0x58
   2b968:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   2b96a:	b2b6      	uxth	r6, r6
   2b96c:	f7ff ffef 	bl	2b94e <__metal_mutex_acquire>
	r_desc->idx = idx;
   2b970:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   2b974:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   2b978:	f1a4 0310 	sub.w	r3, r4, #16
   2b97c:	f844 2c0c 	str.w	r2, [r4, #-12]
   2b980:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   2b984:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   2b988:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   2b98c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   2b990:	4638      	mov	r0, r7
   2b992:	6013      	str	r3, [r2, #0]
   2b994:	f7ff ffd9 	bl	2b94a <k_sem_give>
}
   2b998:	2000      	movs	r0, #0
   2b99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b99c <rpmsg_virtio_ns_callback>:
{
   2b99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   2b9a0:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   2b9a2:	2a28      	cmp	r2, #40	; 0x28
{
   2b9a4:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   2b9a6:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   2b9aa:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   2b9ac:	d126      	bne.n	2b9fc <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2b9ae:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2b9b0:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2b9b2:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   2b9b4:	42a1      	cmp	r1, r4
   2b9b6:	bf28      	it	cs
   2b9b8:	f04f 31ff 	movcs.w	r1, #4294967295
   2b9bc:	2320      	movs	r3, #32
   2b9be:	466a      	mov	r2, sp
   2b9c0:	f7ff fcb1 	bl	2b326 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2b9c4:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   2b9c8:	f8d7 8020 	ldr.w	r8, [r7, #32]
   2b9cc:	4630      	mov	r0, r6
   2b9ce:	f7ff ffbe 	bl	2b94e <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2b9d2:	4643      	mov	r3, r8
   2b9d4:	f04f 32ff 	mov.w	r2, #4294967295
   2b9d8:	4669      	mov	r1, sp
   2b9da:	4628      	mov	r0, r5
   2b9dc:	f7ff ff5b 	bl	2b896 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2b9e2:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2b9e4:	07db      	lsls	r3, r3, #31
   2b9e6:	d519      	bpl.n	2ba1c <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   2b9e8:	b960      	cbnz	r0, 2ba04 <rpmsg_virtio_ns_callback+0x68>
   2b9ea:	4630      	mov	r0, r6
   2b9ec:	f7ff ffad 	bl	2b94a <k_sem_give>
		if (rdev->ns_unbind_cb)
   2b9f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   2b9f2:	b11b      	cbz	r3, 2b9fc <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   2b9f4:	4642      	mov	r2, r8
   2b9f6:	4669      	mov	r1, sp
   2b9f8:	4628      	mov	r0, r5
   2b9fa:	4798      	blx	r3
}
   2b9fc:	2000      	movs	r0, #0
   2b9fe:	b008      	add	sp, #32
   2ba00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   2ba04:	f04f 33ff 	mov.w	r3, #4294967295
   2ba08:	6283      	str	r3, [r0, #40]	; 0x28
   2ba0a:	4630      	mov	r0, r6
   2ba0c:	f7ff ff9d 	bl	2b94a <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2ba10:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2ba12:	2b00      	cmp	r3, #0
   2ba14:	d0ec      	beq.n	2b9f0 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   2ba16:	4620      	mov	r0, r4
   2ba18:	4798      	blx	r3
   2ba1a:	e7e9      	b.n	2b9f0 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   2ba1c:	b920      	cbnz	r0, 2ba28 <rpmsg_virtio_ns_callback+0x8c>
   2ba1e:	4630      	mov	r0, r6
   2ba20:	f7ff ff93 	bl	2b94a <k_sem_give>
			if (rdev->ns_bind_cb)
   2ba24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2ba26:	e7e4      	b.n	2b9f2 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   2ba28:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   2ba2c:	4630      	mov	r0, r6
   2ba2e:	f7ff ff8c 	bl	2b94a <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   2ba32:	e7e3      	b.n	2b9fc <rpmsg_virtio_ns_callback+0x60>

0002ba34 <rpmsg_virtio_get_rx_buffer>:
{
   2ba34:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2ba36:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   2ba3a:	4613      	mov	r3, r2
   2ba3c:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   2ba3e:	b925      	cbnz	r5, 2ba4a <rpmsg_virtio_get_rx_buffer+0x16>
}
   2ba40:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2ba42:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2ba46:	f7ff bde3 	b.w	2b610 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2ba4a:	2d01      	cmp	r5, #1
   2ba4c:	d106      	bne.n	2ba5c <rpmsg_virtio_get_rx_buffer+0x28>
}
   2ba4e:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2ba50:	460a      	mov	r2, r1
   2ba52:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2ba56:	4619      	mov	r1, r3
   2ba58:	f7ff be19 	b.w	2b68e <virtqueue_get_available_buffer>
}
   2ba5c:	2000      	movs	r0, #0
   2ba5e:	bc30      	pop	{r4, r5}
   2ba60:	4770      	bx	lr

0002ba62 <rpmsg_virtio_return_buffer>:
{
   2ba62:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2ba64:	460c      	mov	r4, r1
   2ba66:	4619      	mov	r1, r3
   2ba68:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   2ba6c:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   2ba6e:	b95d      	cbnz	r5, 2ba88 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2ba70:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   2ba72:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2ba76:	2301      	movs	r3, #1
   2ba78:	462a      	mov	r2, r5
   2ba7a:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2ba7e:	a902      	add	r1, sp, #8
   2ba80:	f7ff fd6a 	bl	2b558 <virtqueue_add_buffer>
}
   2ba84:	b004      	add	sp, #16
   2ba86:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2ba88:	2d01      	cmp	r5, #1
   2ba8a:	d1fb      	bne.n	2ba84 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2ba8c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   2ba90:	b004      	add	sp, #16
   2ba92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2ba96:	f7f3 bea1 	b.w	1f7dc <virtqueue_add_consumed_buffer>

0002ba9a <rpmsg_virtio_release_rx_buffer>:
{
   2ba9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ba9c:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2ba9e:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2baa2:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   2baa6:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2baa8:	b2b6      	uxth	r6, r6
{
   2baaa:	460d      	mov	r5, r1
   2baac:	f7ff ff4f 	bl	2b94e <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2bab0:	4631      	mov	r1, r6
   2bab2:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2bab6:	f7ff fde5 	bl	2b684 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2baba:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2babc:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2babe:	f1a5 0110 	sub.w	r1, r5, #16
   2bac2:	4620      	mov	r0, r4
   2bac4:	f7ff ffcd 	bl	2ba62 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   2bac8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2bacc:	f7ff fe31 	bl	2b732 <virtqueue_kick>
   2bad0:	4638      	mov	r0, r7
}
   2bad2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2bad6:	f7ff bf38 	b.w	2b94a <k_sem_give>

0002bada <rpmsg_virtio_shm_pool_get_buffer>:
{
   2bada:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   2badc:	b148      	cbz	r0, 2baf2 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   2bade:	b149      	cbz	r1, 2baf4 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   2bae0:	6843      	ldr	r3, [r0, #4]
   2bae2:	428b      	cmp	r3, r1
   2bae4:	d306      	bcc.n	2baf4 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2bae6:	6882      	ldr	r2, [r0, #8]
   2bae8:	6804      	ldr	r4, [r0, #0]
   2baea:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   2baec:	1a5b      	subs	r3, r3, r1
   2baee:	6043      	str	r3, [r0, #4]
	return buffer;
   2baf0:	18a0      	adds	r0, r4, r2
}
   2baf2:	bd10      	pop	{r4, pc}
		return NULL;
   2baf4:	2000      	movs	r0, #0
   2baf6:	e7fc      	b.n	2baf2 <rpmsg_virtio_shm_pool_get_buffer+0x18>

0002baf8 <rpmsg_virtio_get_tx_payload_buffer>:
{
   2baf8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2bafc:	4605      	mov	r5, r0
   2bafe:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   2bb02:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2bb04:	6a03      	ldr	r3, [r0, #32]
   2bb06:	4617      	mov	r7, r2
   2bb08:	681b      	ldr	r3, [r3, #0]
   2bb0a:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   2bb0c:	0743      	lsls	r3, r0, #29
   2bb0e:	d403      	bmi.n	2bb18 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   2bb10:	2000      	movs	r0, #0
}
   2bb12:	b002      	add	sp, #8
   2bb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2bb18:	f643 2398 	movw	r3, #15000	; 0x3a98
   2bb1c:	2f00      	cmp	r7, #0
   2bb1e:	bf18      	it	ne
   2bb20:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   2bb22:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   2bb26:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   2bb2a:	4640      	mov	r0, r8
   2bb2c:	f7ff ff0f 	bl	2b94e <__metal_mutex_acquire>
	return list->next == list;
   2bb30:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   2bb34:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   2bb38:	4554      	cmp	r4, sl
   2bb3a:	f8d3 9018 	ldr.w	r9, [r3, #24]
   2bb3e:	d025      	beq.n	2bb8c <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   2bb40:	b324      	cbz	r4, 2bb8c <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   2bb42:	e9d4 2300 	ldrd	r2, r3, [r4]
   2bb46:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   2bb48:	6822      	ldr	r2, [r4, #0]
   2bb4a:	601a      	str	r2, [r3, #0]
	node->next = node;
   2bb4c:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   2bb50:	f1b9 0f00 	cmp.w	r9, #0
   2bb54:	d10e      	bne.n	2bb74 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   2bb56:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2bb5a:	6033      	str	r3, [r6, #0]
   2bb5c:	4640      	mov	r0, r8
   2bb5e:	f7ff fef4 	bl	2b94a <k_sem_give>
	rp_hdr->reserved = idx;
   2bb62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2bb66:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   2bb6a:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   2bb6c:	6833      	ldr	r3, [r6, #0]
   2bb6e:	3b10      	subs	r3, #16
   2bb70:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2bb72:	e7ce      	b.n	2bb12 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   2bb74:	f1b9 0f01 	cmp.w	r9, #1
   2bb78:	d1f0      	bne.n	2bb5c <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   2bb7a:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2bb7c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   2bb80:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   2bb84:	f7ff fd7e 	bl	2b684 <virtqueue_get_buffer_length>
   2bb88:	6030      	str	r0, [r6, #0]
   2bb8a:	e7e7      	b.n	2bb5c <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   2bb8c:	f1b9 0f00 	cmp.w	r9, #0
   2bb90:	d12a      	bne.n	2bbe8 <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   2bb92:	4631      	mov	r1, r6
   2bb94:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2bb98:	f10d 0206 	add.w	r2, sp, #6
   2bb9c:	f7ff fd38 	bl	2b610 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   2bba0:	4604      	mov	r4, r0
   2bba2:	2800      	cmp	r0, #0
   2bba4:	d1da      	bne.n	2bb5c <rpmsg_virtio_get_tx_payload_buffer+0x64>
   2bba6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   2bbaa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   2bbac:	b953      	cbnz	r3, 2bbc4 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   2bbae:	4640      	mov	r0, r8
   2bbb0:	f7ff fecb 	bl	2b94a <k_sem_give>
		if (rp_hdr || !tick_count)
   2bbb4:	2f00      	cmp	r7, #0
   2bbb6:	d0ab      	beq.n	2bb10 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   2bbb8:	2021      	movs	r0, #33	; 0x21
   2bbba:	2100      	movs	r1, #0
   2bbbc:	f7f7 f848 	bl	22c50 <z_impl_k_sleep>
		tick_count--;
   2bbc0:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   2bbc2:	e7b2      	b.n	2bb2a <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   2bbc4:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   2bbc8:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   2bbcc:	f7ff ff85 	bl	2bada <rpmsg_virtio_shm_pool_get_buffer>
   2bbd0:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   2bbd2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   2bbd6:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   2bbda:	6033      	str	r3, [r6, #0]
   2bbdc:	4640      	mov	r0, r8
   2bbde:	f7ff feb4 	bl	2b94a <k_sem_give>
		if (rp_hdr || !tick_count)
   2bbe2:	2c00      	cmp	r4, #0
   2bbe4:	d0e6      	beq.n	2bbb4 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   2bbe6:	e7bc      	b.n	2bb62 <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   2bbe8:	f1b9 0f01 	cmp.w	r9, #1
   2bbec:	d1df      	bne.n	2bbae <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   2bbee:	4632      	mov	r2, r6
   2bbf0:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   2bbf4:	f10d 0106 	add.w	r1, sp, #6
   2bbf8:	f7ff fd49 	bl	2b68e <virtqueue_get_available_buffer>
   2bbfc:	4604      	mov	r4, r0
   2bbfe:	e7ed      	b.n	2bbdc <rpmsg_virtio_get_tx_payload_buffer+0xe4>

0002bc00 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   2bc00:	b120      	cbz	r0, 2bc0c <rpmsg_virtio_init_shm_pool+0xc>
   2bc02:	b119      	cbz	r1, 2bc0c <rpmsg_virtio_init_shm_pool+0xc>
   2bc04:	b112      	cbz	r2, 2bc0c <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   2bc06:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   2bc0a:	6001      	str	r1, [r0, #0]
}
   2bc0c:	4770      	bx	lr

0002bc0e <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   2bc0e:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   2bc10:	4604      	mov	r4, r0
   2bc12:	b918      	cbnz	r0, 2bc1c <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   2bc14:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   2bc16:	3834      	subs	r0, #52	; 0x34
   2bc18:	f7ff fe78 	bl	2b90c <rpmsg_destroy_ept>
	return list->next == list;
   2bc1c:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   2bc1e:	4284      	cmp	r4, r0
   2bc20:	d1f9      	bne.n	2bc16 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   2bc22:	2300      	movs	r3, #0
		rvdev->svq = 0;
   2bc24:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   2bc28:	e7f4      	b.n	2bc14 <rpmsg_deinit_vdev+0x6>

0002bc2a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2bc2a:	f7f4 b949 	b.w	1fec0 <_DoInit>

0002bc2e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2bc2e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2bc30:	f7ff fffb 	bl	2bc2a <SEGGER_RTT_Init>

	return 0;
}
   2bc34:	2000      	movs	r0, #0
   2bc36:	bd08      	pop	{r3, pc}

0002bc38 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2bc38:	4770      	bx	lr

0002bc3a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2bc3a:	b140      	cbz	r0, 2bc4e <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2bc3c:	68c3      	ldr	r3, [r0, #12]
   2bc3e:	7858      	ldrb	r0, [r3, #1]
   2bc40:	f010 0001 	ands.w	r0, r0, #1
   2bc44:	bf1e      	ittt	ne
   2bc46:	7818      	ldrbne	r0, [r3, #0]
   2bc48:	fab0 f080 	clzne	r0, r0
   2bc4c:	0940      	lsrne	r0, r0, #5
}
   2bc4e:	4770      	bx	lr

0002bc50 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2bc50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2bc52:	ab0b      	add	r3, sp, #44	; 0x2c
   2bc54:	9305      	str	r3, [sp, #20]
   2bc56:	9303      	str	r3, [sp, #12]
   2bc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bc5a:	2201      	movs	r2, #1
   2bc5c:	9302      	str	r3, [sp, #8]
   2bc5e:	2300      	movs	r3, #0
   2bc60:	4618      	mov	r0, r3
   2bc62:	e9cd 3300 	strd	r3, r3, [sp]
   2bc66:	f7e3 fb65 	bl	f334 <z_impl_z_log_msg_runtime_vcreate>
}
   2bc6a:	b007      	add	sp, #28
   2bc6c:	f85d fb04 	ldr.w	pc, [sp], #4

0002bc70 <z_early_memset>:
   2bc70:	f000 ba66 	b.w	2c140 <memset>

0002bc74 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2bc74:	f000 ba2a 	b.w	2c0cc <memcpy>

0002bc78 <k_heap_init>:
{
   2bc78:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2bc7a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2bc7e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2bc82:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2bc84:	f7e2 b8be 	b.w	de04 <sys_heap_init>

0002bc88 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2bc88:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   2bc8c:	4313      	orrs	r3, r2
   2bc8e:	f013 0303 	ands.w	r3, r3, #3
   2bc92:	d10c      	bne.n	2bcae <create_free_list+0x26>
	slab->free_list = NULL;
   2bc94:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2bc96:	68c1      	ldr	r1, [r0, #12]
   2bc98:	4299      	cmp	r1, r3
   2bc9a:	d801      	bhi.n	2bca0 <create_free_list+0x18>
	return 0;
   2bc9c:	2000      	movs	r0, #0
   2bc9e:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2bca0:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2bca2:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2bca4:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2bca6:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   2bca8:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   2bcaa:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2bcac:	e7f3      	b.n	2bc96 <create_free_list+0xe>
		return -EINVAL;
   2bcae:	f06f 0015 	mvn.w	r0, #21
}
   2bcb2:	4770      	bx	lr

0002bcb4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2bcb4:	f3ef 8005 	mrs	r0, IPSR
}
   2bcb8:	3800      	subs	r0, #0
   2bcba:	bf18      	it	ne
   2bcbc:	2001      	movne	r0, #1
   2bcbe:	4770      	bx	lr

0002bcc0 <z_impl_k_thread_name_set>:
}
   2bcc0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2bcc4:	4770      	bx	lr

0002bcc6 <k_thread_name_get>:
}
   2bcc6:	2000      	movs	r0, #0
   2bcc8:	4770      	bx	lr

0002bcca <z_impl_k_thread_start>:
	z_sched_start(thread);
   2bcca:	f7f6 b921 	b.w	21f10 <z_sched_start>

0002bcce <z_pm_save_idle_exit>:
{
   2bcce:	b508      	push	{r3, lr}
	pm_system_resume();
   2bcd0:	f7e4 fea6 	bl	10a20 <pm_system_resume>
}
   2bcd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2bcd8:	f7ff b89e 	b.w	2ae18 <sys_clock_idle_exit>

0002bcdc <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2bcdc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2bce0:	428b      	cmp	r3, r1
   2bce2:	d001      	beq.n	2bce8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2bce4:	f7f6 bc16 	b.w	22514 <z_set_prio>
}
   2bce8:	2000      	movs	r0, #0
   2bcea:	4770      	bx	lr

0002bcec <z_impl_k_mutex_init>:
{
   2bcec:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2bcee:	2000      	movs	r0, #0
   2bcf0:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2bcf4:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2bcf8:	4770      	bx	lr

0002bcfa <z_queue_node_peek>:
{
   2bcfa:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2bcfc:	4604      	mov	r4, r0
   2bcfe:	b130      	cbz	r0, 2bd0e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bd00:	6802      	ldr	r2, [r0, #0]
   2bd02:	0793      	lsls	r3, r2, #30
   2bd04:	d003      	beq.n	2bd0e <z_queue_node_peek+0x14>
		ret = anode->data;
   2bd06:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2bd08:	b109      	cbz	r1, 2bd0e <z_queue_node_peek+0x14>
			k_free(anode);
   2bd0a:	f000 f9bc 	bl	2c086 <k_free>
}
   2bd0e:	4620      	mov	r0, r4
   2bd10:	bd10      	pop	{r4, pc}

0002bd12 <z_impl_k_queue_init>:
	list->head = NULL;
   2bd12:	2300      	movs	r3, #0
	list->tail = NULL;
   2bd14:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2bd18:	6083      	str	r3, [r0, #8]
   2bd1a:	f100 030c 	add.w	r3, r0, #12
   2bd1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2bd22:	f100 0314 	add.w	r3, r0, #20
   2bd26:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2bd2a:	4770      	bx	lr

0002bd2c <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2bd2c:	2301      	movs	r3, #1
{
   2bd2e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2bd30:	9300      	str	r3, [sp, #0]
   2bd32:	2300      	movs	r3, #0
{
   2bd34:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2bd36:	4619      	mov	r1, r3
   2bd38:	f7f4 ff92 	bl	20c60 <queue_insert>
}
   2bd3c:	b003      	add	sp, #12
   2bd3e:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd42 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   2bd42:	2300      	movs	r3, #0
{
   2bd44:	b507      	push	{r0, r1, r2, lr}
   2bd46:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2bd48:	9300      	str	r3, [sp, #0]
   2bd4a:	4619      	mov	r1, r3
   2bd4c:	f7f4 ff88 	bl	20c60 <queue_insert>
}
   2bd50:	b003      	add	sp, #12
   2bd52:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd56 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2bd56:	b15a      	cbz	r2, 2bd70 <z_impl_k_sem_init+0x1a>
   2bd58:	428a      	cmp	r2, r1
   2bd5a:	d309      	bcc.n	2bd70 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2bd5c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2bd60:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2bd64:	e9c0 0000 	strd	r0, r0, [r0]
   2bd68:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2bd6c:	2000      	movs	r0, #0
   2bd6e:	4770      	bx	lr
		return -EINVAL;
   2bd70:	f06f 0015 	mvn.w	r0, #21
}
   2bd74:	4770      	bx	lr

0002bd76 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2bd76:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2bd78:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2bd7a:	408b      	lsls	r3, r1
   2bd7c:	ea22 0303 	bic.w	r3, r2, r3
   2bd80:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2bd82:	fa22 f001 	lsr.w	r0, r2, r1
}
   2bd86:	f000 0001 	and.w	r0, r0, #1
   2bd8a:	4770      	bx	lr

0002bd8c <unschedule_locked>:
{
   2bd8c:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2bd8e:	2103      	movs	r1, #3
{
   2bd90:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2bd92:	300c      	adds	r0, #12
   2bd94:	f7ff ffef 	bl	2bd76 <flag_test_and_clear>
   2bd98:	4604      	mov	r4, r0
   2bd9a:	b118      	cbz	r0, 2bda4 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2bd9c:	f105 0010 	add.w	r0, r5, #16
   2bda0:	f7f7 f9f6 	bl	23190 <z_abort_timeout>
}
   2bda4:	4620      	mov	r0, r4
   2bda6:	bd38      	pop	{r3, r4, r5, pc}

0002bda8 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2bda8:	b120      	cbz	r0, 2bdb4 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2bdaa:	2200      	movs	r2, #0
   2bdac:	3090      	adds	r0, #144	; 0x90
   2bdae:	4611      	mov	r1, r2
   2bdb0:	f7f7 b850 	b.w	22e54 <z_sched_wake>
}
   2bdb4:	4770      	bx	lr

0002bdb6 <cancel_async_locked>:
{
   2bdb6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2bdb8:	68c3      	ldr	r3, [r0, #12]
{
   2bdba:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2bdbc:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2bdc0:	079b      	lsls	r3, r3, #30
   2bdc2:	d416      	bmi.n	2bdf2 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2bdc4:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2bdc6:	2102      	movs	r1, #2
   2bdc8:	300c      	adds	r0, #12
   2bdca:	f7ff ffd4 	bl	2bd76 <flag_test_and_clear>
   2bdce:	b180      	cbz	r0, 2bdf2 <cancel_async_locked+0x3c>
	return list->head;
   2bdd0:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bdd4:	b16a      	cbz	r2, 2bdf2 <cancel_async_locked+0x3c>
   2bdd6:	4294      	cmp	r4, r2
   2bdd8:	d11d      	bne.n	2be16 <cancel_async_locked+0x60>
	return node->next;
   2bdda:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bddc:	b99e      	cbnz	r6, 2be06 <cancel_async_locked+0x50>
   2bdde:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   2bde2:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   2bde6:	429c      	cmp	r4, r3
   2bde8:	d101      	bne.n	2bdee <cancel_async_locked+0x38>
	list->tail = node;
   2bdea:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   2bdee:	2300      	movs	r3, #0
   2bdf0:	6023      	str	r3, [r4, #0]
	return *flagp;
   2bdf2:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2bdf4:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2bdf8:	bf1e      	ittt	ne
   2bdfa:	f043 0302 	orrne.w	r3, r3, #2
   2bdfe:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2be00:	f040 0002 	orrne.w	r0, r0, #2
}
   2be04:	bd70      	pop	{r4, r5, r6, pc}
   2be06:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2be08:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   2be0c:	4294      	cmp	r4, r2
	list->tail = node;
   2be0e:	bf08      	it	eq
   2be10:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   2be14:	e7eb      	b.n	2bdee <cancel_async_locked+0x38>
	return node->next;
   2be16:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2be18:	6812      	ldr	r2, [r2, #0]
   2be1a:	e7db      	b.n	2bdd4 <cancel_async_locked+0x1e>

0002be1c <k_work_submit_to_queue>:
{
   2be1c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2be1e:	f7f5 fb37 	bl	21490 <z_work_submit_to_queue>
	if (ret > 0) {
   2be22:	1e04      	subs	r4, r0, #0
   2be24:	dd09      	ble.n	2be3a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2be26:	f04f 0320 	mov.w	r3, #32
   2be2a:	f3ef 8011 	mrs	r0, BASEPRI
   2be2e:	f383 8812 	msr	BASEPRI_MAX, r3
   2be32:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2be36:	f000 f80d 	bl	2be54 <z_reschedule_irqlock>
}
   2be3a:	4620      	mov	r0, r4
   2be3c:	bd10      	pop	{r4, pc}

0002be3e <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2be3e:	f7f5 bae1 	b.w	21404 <k_work_busy_get>

0002be42 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2be42:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2be46:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2be4a:	4283      	cmp	r3, r0
		return b2 - b1;
   2be4c:	bf14      	ite	ne
   2be4e:	1ac0      	subne	r0, r0, r3
	return 0;
   2be50:	2000      	moveq	r0, #0
}
   2be52:	4770      	bx	lr

0002be54 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2be54:	4603      	mov	r3, r0
   2be56:	b920      	cbnz	r0, 2be62 <z_reschedule_irqlock+0xe>
   2be58:	f3ef 8205 	mrs	r2, IPSR
   2be5c:	b90a      	cbnz	r2, 2be62 <z_reschedule_irqlock+0xe>
   2be5e:	f7e5 b9c9 	b.w	111f4 <arch_swap>
	__asm__ volatile(
   2be62:	f383 8811 	msr	BASEPRI, r3
   2be66:	f3bf 8f6f 	isb	sy
}
   2be6a:	4770      	bx	lr

0002be6c <z_reschedule_unlocked>:
	__asm__ volatile(
   2be6c:	f04f 0320 	mov.w	r3, #32
   2be70:	f3ef 8011 	mrs	r0, BASEPRI
   2be74:	f383 8812 	msr	BASEPRI_MAX, r3
   2be78:	f3bf 8f6f 	isb	sy
   2be7c:	f7ff bfea 	b.w	2be54 <z_reschedule_irqlock>

0002be80 <z_unpend_all>:
{
   2be80:	b538      	push	{r3, r4, r5, lr}
   2be82:	4605      	mov	r5, r0
	int need_sched = 0;
   2be84:	2000      	movs	r0, #0
	return list->head == list;
   2be86:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2be88:	42a5      	cmp	r5, r4
   2be8a:	d000      	beq.n	2be8e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2be8c:	b904      	cbnz	r4, 2be90 <z_unpend_all+0x10>
}
   2be8e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2be90:	4620      	mov	r0, r4
   2be92:	f7f6 fc59 	bl	22748 <z_unpend_thread>
		z_ready_thread(thread);
   2be96:	4620      	mov	r0, r4
   2be98:	f7f5 ff6c 	bl	21d74 <z_ready_thread>
		need_sched = 1;
   2be9c:	2001      	movs	r0, #1
   2be9e:	e7f2      	b.n	2be86 <z_unpend_all+0x6>

0002bea0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2bea0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2bea2:	f7f7 faf7 	bl	23494 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2bea6:	bd08      	pop	{r3, pc}

0002bea8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2bea8:	f7f7 baf4 	b.w	23494 <sys_clock_tick_get>

0002beac <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2beac:	b108      	cbz	r0, 2beb2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2beae:	f7e2 bf19 	b.w	ece4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2beb2:	4770      	bx	lr

0002beb4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2beb4:	f1b1 3fff 	cmp.w	r1, #4294967295
   2beb8:	bf08      	it	eq
   2beba:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2bebe:	b538      	push	{r3, r4, r5, lr}
   2bec0:	460c      	mov	r4, r1
   2bec2:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bec4:	d014      	beq.n	2bef0 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2bec6:	4308      	orrs	r0, r1
   2bec8:	d103      	bne.n	2bed2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2beca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2bece:	f7f7 bae1 	b.w	23494 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2bed2:	f06f 0001 	mvn.w	r0, #1
   2bed6:	f04f 33ff 	mov.w	r3, #4294967295
   2beda:	1b40      	subs	r0, r0, r5
   2bedc:	eb63 0101 	sbc.w	r1, r3, r1
   2bee0:	2900      	cmp	r1, #0
   2bee2:	da04      	bge.n	2beee <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2bee4:	f7f7 fad6 	bl	23494 <sys_clock_tick_get>
   2bee8:	1940      	adds	r0, r0, r5
   2beea:	eb41 0104 	adc.w	r1, r1, r4
}
   2beee:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2bef0:	f04f 30ff 	mov.w	r0, #4294967295
   2bef4:	4601      	mov	r1, r0
   2bef6:	e7fa      	b.n	2beee <sys_clock_timeout_end_calc+0x3a>

0002bef8 <k_timer_init>:
	timer->status = 0U;
   2bef8:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2befa:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2befe:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2bf02:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2bf06:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2bf0a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2bf0c:	6343      	str	r3, [r0, #52]	; 0x34
}
   2bf0e:	4770      	bx	lr

0002bf10 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2bf10:	b510      	push	{r4, lr}
   2bf12:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2bf14:	f7f7 f93c 	bl	23190 <z_abort_timeout>

	if (inactive) {
   2bf18:	b9b0      	cbnz	r0, 2bf48 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2bf1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2bf1c:	b10b      	cbz	r3, 2bf22 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2bf1e:	4620      	mov	r0, r4
   2bf20:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2bf22:	f104 0018 	add.w	r0, r4, #24
   2bf26:	f7f6 fcb1 	bl	2288c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2bf2a:	b168      	cbz	r0, 2bf48 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2bf2c:	f7f5 ff22 	bl	21d74 <z_ready_thread>
   2bf30:	f04f 0320 	mov.w	r3, #32
   2bf34:	f3ef 8011 	mrs	r0, BASEPRI
   2bf38:	f383 8812 	msr	BASEPRI_MAX, r3
   2bf3c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2bf40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bf44:	f7ff bf86 	b.w	2be54 <z_reschedule_irqlock>
   2bf48:	bd10      	pop	{r4, pc}

0002bf4a <add_event>:
{
   2bf4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bf4c:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2bf4e:	e9d0 1300 	ldrd	r1, r3, [r0]
   2bf52:	4288      	cmp	r0, r1
   2bf54:	4604      	mov	r4, r0
   2bf56:	d105      	bne.n	2bf64 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2bf58:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2bf5a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2bf5e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2bf60:	6065      	str	r5, [r4, #4]
   2bf62:	e01d      	b.n	2bfa0 <add_event+0x56>
	if ((pending == NULL) ||
   2bf64:	2b00      	cmp	r3, #0
   2bf66:	d0f7      	beq.n	2bf58 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bf68:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bf6a:	b100      	cbz	r0, 2bf6e <add_event+0x24>
   2bf6c:	3860      	subs	r0, #96	; 0x60
   2bf6e:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bf72:	4639      	mov	r1, r7
   2bf74:	f7ff ff65 	bl	2be42 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2bf78:	2800      	cmp	r0, #0
   2bf7a:	dced      	bgt.n	2bf58 <add_event+0xe>
	return list->head == list;
   2bf7c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bf7e:	42b4      	cmp	r4, r6
   2bf80:	d0ea      	beq.n	2bf58 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2bf82:	2e00      	cmp	r6, #0
   2bf84:	d0e8      	beq.n	2bf58 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2bf86:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bf88:	b101      	cbz	r1, 2bf8c <add_event+0x42>
   2bf8a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2bf8c:	4638      	mov	r0, r7
   2bf8e:	f7ff ff58 	bl	2be42 <z_sched_prio_cmp>
   2bf92:	2800      	cmp	r0, #0
   2bf94:	dd05      	ble.n	2bfa2 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2bf96:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2bf98:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2bf9c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2bf9e:	6075      	str	r5, [r6, #4]
}
   2bfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2bfa2:	6863      	ldr	r3, [r4, #4]
   2bfa4:	429e      	cmp	r6, r3
   2bfa6:	d0d7      	beq.n	2bf58 <add_event+0xe>
   2bfa8:	6836      	ldr	r6, [r6, #0]
   2bfaa:	e7ea      	b.n	2bf82 <add_event+0x38>

0002bfac <signal_poll_event>:
{
   2bfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2bfb0:	6884      	ldr	r4, [r0, #8]
{
   2bfb2:	4605      	mov	r5, r0
   2bfb4:	460e      	mov	r6, r1
	if (poller != NULL) {
   2bfb6:	b144      	cbz	r4, 2bfca <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2bfb8:	7863      	ldrb	r3, [r4, #1]
   2bfba:	2b01      	cmp	r3, #1
   2bfbc:	d12e      	bne.n	2c01c <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2bfbe:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2bfc2:	f013 0302 	ands.w	r3, r3, #2
   2bfc6:	d10a      	bne.n	2bfde <signal_poll_event+0x32>
		poller->is_polling = false;
   2bfc8:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2bfca:	2000      	movs	r0, #0
	event->state |= state;
   2bfcc:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2bfce:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2bfd0:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2bfd4:	4316      	orrs	r6, r2
   2bfd6:	f366 3394 	bfi	r3, r6, #14, #7
   2bfda:	60eb      	str	r3, [r5, #12]
	return retcode;
   2bfdc:	e03e      	b.n	2c05c <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2bfde:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
   2bfe6:	bf08      	it	eq
   2bfe8:	f112 0f02 	cmneq.w	r2, #2
   2bfec:	d032      	beq.n	2c054 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bfee:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2bff2:	4640      	mov	r0, r8
   2bff4:	f7f6 fba8 	bl	22748 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2bff8:	2e08      	cmp	r6, #8
   2bffa:	bf0c      	ite	eq
   2bffc:	f06f 0303 	mvneq.w	r3, #3
   2c000:	2300      	movne	r3, #0
   2c002:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2c004:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2c008:	06db      	lsls	r3, r3, #27
   2c00a:	d109      	bne.n	2c020 <signal_poll_event+0x74>
   2c00c:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2c010:	b937      	cbnz	r7, 2c020 <signal_poll_event+0x74>
	z_ready_thread(thread);
   2c012:	4640      	mov	r0, r8
   2c014:	f7f5 feae 	bl	21d74 <z_ready_thread>
		poller->is_polling = false;
   2c018:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2c01a:	e7d6      	b.n	2bfca <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2c01c:	2b02      	cmp	r3, #2
   2c01e:	d001      	beq.n	2c024 <signal_poll_event+0x78>
		poller->is_polling = false;
   2c020:	2300      	movs	r3, #0
   2c022:	e7d1      	b.n	2bfc8 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2c024:	7823      	ldrb	r3, [r4, #0]
   2c026:	2b00      	cmp	r3, #0
   2c028:	d0cf      	beq.n	2bfca <signal_poll_event+0x1e>
   2c02a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2c02e:	2f00      	cmp	r7, #0
   2c030:	d0f2      	beq.n	2c018 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2c032:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2c036:	f1a4 0914 	sub.w	r9, r4, #20
   2c03a:	f104 0014 	add.w	r0, r4, #20
   2c03e:	f7f7 f8a7 	bl	23190 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   2c042:	4649      	mov	r1, r9
   2c044:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2c046:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2c04a:	f7f5 fa21 	bl	21490 <z_work_submit_to_queue>
		poller->is_polling = false;
   2c04e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2c052:	e7ba      	b.n	2bfca <signal_poll_event+0x1e>
		poller->is_polling = false;
   2c054:	2300      	movs	r3, #0
		return -EAGAIN;
   2c056:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2c05a:	7023      	strb	r3, [r4, #0]
}
   2c05c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002c060 <z_handle_obj_poll_events>:
{
   2c060:	4603      	mov	r3, r0
	return list->head == list;
   2c062:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2c064:	4283      	cmp	r3, r0
   2c066:	d008      	beq.n	2c07a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2c068:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2c06c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c06e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c070:	2300      	movs	r3, #0
	node->prev = NULL;
   2c072:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2c076:	f7ff bf99 	b.w	2bfac <signal_poll_event>
}
   2c07a:	4770      	bx	lr

0002c07c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2c07c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2c07e:	e9c0 0000 	strd	r0, r0, [r0]
   2c082:	6083      	str	r3, [r0, #8]
}
   2c084:	4770      	bx	lr

0002c086 <k_free>:
	if (ptr != NULL) {
   2c086:	b120      	cbz	r0, 2c092 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2c088:	1f01      	subs	r1, r0, #4
   2c08a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2c08e:	f7f4 b9cf 	b.w	20430 <k_heap_free>
}
   2c092:	4770      	bx	lr

0002c094 <k_malloc>:
{
   2c094:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2c096:	2004      	movs	r0, #4
   2c098:	f7f7 bec2 	b.w	23e20 <k_aligned_alloc>

0002c09c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2c09c:	4770      	bx	lr

0002c09e <atof>:
   2c09e:	2100      	movs	r1, #0
   2c0a0:	f7f8 be08 	b.w	24cb4 <strtod>

0002c0a4 <atoi>:
   2c0a4:	220a      	movs	r2, #10
   2c0a6:	2100      	movs	r1, #0
   2c0a8:	f7f8 bec2 	b.w	24e30 <strtol>

0002c0ac <memcmp>:
   2c0ac:	3901      	subs	r1, #1
   2c0ae:	4402      	add	r2, r0
   2c0b0:	b510      	push	{r4, lr}
   2c0b2:	4290      	cmp	r0, r2
   2c0b4:	d101      	bne.n	2c0ba <memcmp+0xe>
   2c0b6:	2000      	movs	r0, #0
   2c0b8:	e005      	b.n	2c0c6 <memcmp+0x1a>
   2c0ba:	7803      	ldrb	r3, [r0, #0]
   2c0bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2c0c0:	42a3      	cmp	r3, r4
   2c0c2:	d001      	beq.n	2c0c8 <memcmp+0x1c>
   2c0c4:	1b18      	subs	r0, r3, r4
   2c0c6:	bd10      	pop	{r4, pc}
   2c0c8:	3001      	adds	r0, #1
   2c0ca:	e7f2      	b.n	2c0b2 <memcmp+0x6>

0002c0cc <memcpy>:
   2c0cc:	440a      	add	r2, r1
   2c0ce:	1e43      	subs	r3, r0, #1
   2c0d0:	4291      	cmp	r1, r2
   2c0d2:	d100      	bne.n	2c0d6 <memcpy+0xa>
   2c0d4:	4770      	bx	lr
   2c0d6:	b510      	push	{r4, lr}
   2c0d8:	f811 4b01 	ldrb.w	r4, [r1], #1
   2c0dc:	4291      	cmp	r1, r2
   2c0de:	f803 4f01 	strb.w	r4, [r3, #1]!
   2c0e2:	d1f9      	bne.n	2c0d8 <memcpy+0xc>
   2c0e4:	bd10      	pop	{r4, pc}

0002c0e6 <__memcpy_chk>:
   2c0e6:	429a      	cmp	r2, r3
   2c0e8:	b508      	push	{r3, lr}
   2c0ea:	d901      	bls.n	2c0f0 <__memcpy_chk+0xa>
   2c0ec:	f7e6 f814 	bl	12118 <__chk_fail>
   2c0f0:	4281      	cmp	r1, r0
   2c0f2:	d804      	bhi.n	2c0fe <__memcpy_chk+0x18>
   2c0f4:	188b      	adds	r3, r1, r2
   2c0f6:	4298      	cmp	r0, r3
   2c0f8:	d3f8      	bcc.n	2c0ec <__memcpy_chk+0x6>
   2c0fa:	4281      	cmp	r1, r0
   2c0fc:	d102      	bne.n	2c104 <__memcpy_chk+0x1e>
   2c0fe:	1883      	adds	r3, r0, r2
   2c100:	4299      	cmp	r1, r3
   2c102:	d3f3      	bcc.n	2c0ec <__memcpy_chk+0x6>
   2c104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2c108:	f7ff bfe0 	b.w	2c0cc <memcpy>

0002c10c <memmove>:
   2c10c:	4288      	cmp	r0, r1
   2c10e:	b510      	push	{r4, lr}
   2c110:	eb01 0402 	add.w	r4, r1, r2
   2c114:	d902      	bls.n	2c11c <memmove+0x10>
   2c116:	4284      	cmp	r4, r0
   2c118:	4623      	mov	r3, r4
   2c11a:	d807      	bhi.n	2c12c <memmove+0x20>
   2c11c:	1e43      	subs	r3, r0, #1
   2c11e:	42a1      	cmp	r1, r4
   2c120:	d008      	beq.n	2c134 <memmove+0x28>
   2c122:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c126:	f803 2f01 	strb.w	r2, [r3, #1]!
   2c12a:	e7f8      	b.n	2c11e <memmove+0x12>
   2c12c:	4402      	add	r2, r0
   2c12e:	4601      	mov	r1, r0
   2c130:	428a      	cmp	r2, r1
   2c132:	d100      	bne.n	2c136 <memmove+0x2a>
   2c134:	bd10      	pop	{r4, pc}
   2c136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2c13a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2c13e:	e7f7      	b.n	2c130 <memmove+0x24>

0002c140 <memset>:
   2c140:	4402      	add	r2, r0
   2c142:	4603      	mov	r3, r0
   2c144:	4293      	cmp	r3, r2
   2c146:	d100      	bne.n	2c14a <memset+0xa>
   2c148:	4770      	bx	lr
   2c14a:	f803 1b01 	strb.w	r1, [r3], #1
   2c14e:	e7f9      	b.n	2c144 <memset+0x4>

0002c150 <_calloc_r>:
   2c150:	b538      	push	{r3, r4, r5, lr}
   2c152:	fb02 f501 	mul.w	r5, r2, r1
   2c156:	4629      	mov	r1, r5
   2c158:	f7f8 f9c6 	bl	244e8 <_malloc_r>
   2c15c:	4604      	mov	r4, r0
   2c15e:	b118      	cbz	r0, 2c168 <_calloc_r+0x18>
   2c160:	462a      	mov	r2, r5
   2c162:	2100      	movs	r1, #0
   2c164:	f7ff ffec 	bl	2c140 <memset>
   2c168:	4620      	mov	r0, r4
   2c16a:	bd38      	pop	{r3, r4, r5, pc}

0002c16c <__cvt>:
   2c16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c170:	b089      	sub	sp, #36	; 0x24
   2c172:	2b00      	cmp	r3, #0
   2c174:	461d      	mov	r5, r3
   2c176:	4614      	mov	r4, r2
   2c178:	bfba      	itte	lt
   2c17a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2c17e:	4614      	movlt	r4, r2
   2c180:	2300      	movge	r3, #0
   2c182:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2c184:	bfbc      	itt	lt
   2c186:	461d      	movlt	r5, r3
   2c188:	232d      	movlt	r3, #45	; 0x2d
   2c18a:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   2c18e:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   2c192:	f028 0a20 	bic.w	sl, r8, #32
   2c196:	7013      	strb	r3, [r2, #0]
   2c198:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2c19c:	d005      	beq.n	2c1aa <__cvt+0x3e>
   2c19e:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   2c1a2:	d100      	bne.n	2c1a6 <__cvt+0x3a>
   2c1a4:	3601      	adds	r6, #1
   2c1a6:	2302      	movs	r3, #2
   2c1a8:	e000      	b.n	2c1ac <__cvt+0x40>
   2c1aa:	2303      	movs	r3, #3
   2c1ac:	aa07      	add	r2, sp, #28
   2c1ae:	9204      	str	r2, [sp, #16]
   2c1b0:	aa06      	add	r2, sp, #24
   2c1b2:	e9cd 3600 	strd	r3, r6, [sp]
   2c1b6:	e9cd 9202 	strd	r9, r2, [sp, #8]
   2c1ba:	462b      	mov	r3, r5
   2c1bc:	4622      	mov	r2, r4
   2c1be:	f7de fbaf 	bl	a920 <_dtoa_r>
   2c1c2:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   2c1c6:	4607      	mov	r7, r0
   2c1c8:	d119      	bne.n	2c1fe <__cvt+0x92>
   2c1ca:	f01b 0f01 	tst.w	fp, #1
   2c1ce:	d00e      	beq.n	2c1ee <__cvt+0x82>
   2c1d0:	eb07 0806 	add.w	r8, r7, r6
   2c1d4:	2200      	movs	r2, #0
   2c1d6:	2300      	movs	r3, #0
   2c1d8:	4620      	mov	r0, r4
   2c1da:	4629      	mov	r1, r5
   2c1dc:	f7dc ff16 	bl	900c <__aeabi_dcmpeq>
   2c1e0:	b108      	cbz	r0, 2c1e6 <__cvt+0x7a>
   2c1e2:	f8cd 801c 	str.w	r8, [sp, #28]
   2c1e6:	2230      	movs	r2, #48	; 0x30
   2c1e8:	9b07      	ldr	r3, [sp, #28]
   2c1ea:	4543      	cmp	r3, r8
   2c1ec:	d321      	bcc.n	2c232 <__cvt+0xc6>
   2c1ee:	9b07      	ldr	r3, [sp, #28]
   2c1f0:	4638      	mov	r0, r7
   2c1f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2c1f4:	1bdb      	subs	r3, r3, r7
   2c1f6:	6013      	str	r3, [r2, #0]
   2c1f8:	b009      	add	sp, #36	; 0x24
   2c1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c1fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   2c202:	d0e2      	beq.n	2c1ca <__cvt+0x5e>
   2c204:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   2c208:	eb00 0806 	add.w	r8, r0, r6
   2c20c:	d1e2      	bne.n	2c1d4 <__cvt+0x68>
   2c20e:	7803      	ldrb	r3, [r0, #0]
   2c210:	2b30      	cmp	r3, #48	; 0x30
   2c212:	d10a      	bne.n	2c22a <__cvt+0xbe>
   2c214:	2200      	movs	r2, #0
   2c216:	2300      	movs	r3, #0
   2c218:	4620      	mov	r0, r4
   2c21a:	4629      	mov	r1, r5
   2c21c:	f7dc fef6 	bl	900c <__aeabi_dcmpeq>
   2c220:	b918      	cbnz	r0, 2c22a <__cvt+0xbe>
   2c222:	f1c6 0601 	rsb	r6, r6, #1
   2c226:	f8c9 6000 	str.w	r6, [r9]
   2c22a:	f8d9 3000 	ldr.w	r3, [r9]
   2c22e:	4498      	add	r8, r3
   2c230:	e7d0      	b.n	2c1d4 <__cvt+0x68>
   2c232:	1c59      	adds	r1, r3, #1
   2c234:	9107      	str	r1, [sp, #28]
   2c236:	701a      	strb	r2, [r3, #0]
   2c238:	e7d6      	b.n	2c1e8 <__cvt+0x7c>

0002c23a <__exponent>:
   2c23a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c23c:	2900      	cmp	r1, #0
   2c23e:	7002      	strb	r2, [r0, #0]
   2c240:	bfba      	itte	lt
   2c242:	4249      	neglt	r1, r1
   2c244:	232d      	movlt	r3, #45	; 0x2d
   2c246:	232b      	movge	r3, #43	; 0x2b
   2c248:	2909      	cmp	r1, #9
   2c24a:	7043      	strb	r3, [r0, #1]
   2c24c:	dd28      	ble.n	2c2a0 <__exponent+0x66>
   2c24e:	f10d 0307 	add.w	r3, sp, #7
   2c252:	270a      	movs	r7, #10
   2c254:	461d      	mov	r5, r3
   2c256:	461a      	mov	r2, r3
   2c258:	3b01      	subs	r3, #1
   2c25a:	fbb1 f6f7 	udiv	r6, r1, r7
   2c25e:	fb07 1416 	mls	r4, r7, r6, r1
   2c262:	3430      	adds	r4, #48	; 0x30
   2c264:	f802 4c01 	strb.w	r4, [r2, #-1]
   2c268:	460c      	mov	r4, r1
   2c26a:	4631      	mov	r1, r6
   2c26c:	2c63      	cmp	r4, #99	; 0x63
   2c26e:	dcf2      	bgt.n	2c256 <__exponent+0x1c>
   2c270:	3130      	adds	r1, #48	; 0x30
   2c272:	1e94      	subs	r4, r2, #2
   2c274:	f803 1c01 	strb.w	r1, [r3, #-1]
   2c278:	1c41      	adds	r1, r0, #1
   2c27a:	4623      	mov	r3, r4
   2c27c:	42ab      	cmp	r3, r5
   2c27e:	d30a      	bcc.n	2c296 <__exponent+0x5c>
   2c280:	f10d 0309 	add.w	r3, sp, #9
   2c284:	1a9b      	subs	r3, r3, r2
   2c286:	42ac      	cmp	r4, r5
   2c288:	bf88      	it	hi
   2c28a:	2300      	movhi	r3, #0
   2c28c:	3302      	adds	r3, #2
   2c28e:	4403      	add	r3, r0
   2c290:	1a18      	subs	r0, r3, r0
   2c292:	b003      	add	sp, #12
   2c294:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c296:	f813 6b01 	ldrb.w	r6, [r3], #1
   2c29a:	f801 6f01 	strb.w	r6, [r1, #1]!
   2c29e:	e7ed      	b.n	2c27c <__exponent+0x42>
   2c2a0:	2330      	movs	r3, #48	; 0x30
   2c2a2:	3130      	adds	r1, #48	; 0x30
   2c2a4:	7083      	strb	r3, [r0, #2]
   2c2a6:	1d03      	adds	r3, r0, #4
   2c2a8:	70c1      	strb	r1, [r0, #3]
   2c2aa:	e7f1      	b.n	2c290 <__exponent+0x56>

0002c2ac <_printf_common>:
   2c2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c2b0:	4616      	mov	r6, r2
   2c2b2:	4698      	mov	r8, r3
   2c2b4:	688a      	ldr	r2, [r1, #8]
   2c2b6:	4607      	mov	r7, r0
   2c2b8:	690b      	ldr	r3, [r1, #16]
   2c2ba:	460c      	mov	r4, r1
   2c2bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
   2c2c0:	4293      	cmp	r3, r2
   2c2c2:	bfb8      	it	lt
   2c2c4:	4613      	movlt	r3, r2
   2c2c6:	6033      	str	r3, [r6, #0]
   2c2c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2c2cc:	b10a      	cbz	r2, 2c2d2 <_printf_common+0x26>
   2c2ce:	3301      	adds	r3, #1
   2c2d0:	6033      	str	r3, [r6, #0]
   2c2d2:	6823      	ldr	r3, [r4, #0]
   2c2d4:	0699      	lsls	r1, r3, #26
   2c2d6:	bf42      	ittt	mi
   2c2d8:	6833      	ldrmi	r3, [r6, #0]
   2c2da:	3302      	addmi	r3, #2
   2c2dc:	6033      	strmi	r3, [r6, #0]
   2c2de:	6825      	ldr	r5, [r4, #0]
   2c2e0:	f015 0506 	ands.w	r5, r5, #6
   2c2e4:	d106      	bne.n	2c2f4 <_printf_common+0x48>
   2c2e6:	f104 0a19 	add.w	sl, r4, #25
   2c2ea:	68e3      	ldr	r3, [r4, #12]
   2c2ec:	6832      	ldr	r2, [r6, #0]
   2c2ee:	1a9b      	subs	r3, r3, r2
   2c2f0:	42ab      	cmp	r3, r5
   2c2f2:	dc2b      	bgt.n	2c34c <_printf_common+0xa0>
   2c2f4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   2c2f8:	6822      	ldr	r2, [r4, #0]
   2c2fa:	3b00      	subs	r3, #0
   2c2fc:	bf18      	it	ne
   2c2fe:	2301      	movne	r3, #1
   2c300:	0692      	lsls	r2, r2, #26
   2c302:	d430      	bmi.n	2c366 <_printf_common+0xba>
   2c304:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2c308:	4641      	mov	r1, r8
   2c30a:	4638      	mov	r0, r7
   2c30c:	47c8      	blx	r9
   2c30e:	3001      	adds	r0, #1
   2c310:	d023      	beq.n	2c35a <_printf_common+0xae>
   2c312:	6823      	ldr	r3, [r4, #0]
   2c314:	341a      	adds	r4, #26
   2c316:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2c31a:	f003 0306 	and.w	r3, r3, #6
   2c31e:	2b04      	cmp	r3, #4
   2c320:	bf0a      	itet	eq
   2c322:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   2c326:	2500      	movne	r5, #0
   2c328:	6833      	ldreq	r3, [r6, #0]
   2c32a:	f04f 0600 	mov.w	r6, #0
   2c32e:	bf08      	it	eq
   2c330:	1aed      	subeq	r5, r5, r3
   2c332:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2c336:	bf08      	it	eq
   2c338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2c33c:	4293      	cmp	r3, r2
   2c33e:	bfc4      	itt	gt
   2c340:	1a9b      	subgt	r3, r3, r2
   2c342:	18ed      	addgt	r5, r5, r3
   2c344:	42b5      	cmp	r5, r6
   2c346:	d11a      	bne.n	2c37e <_printf_common+0xd2>
   2c348:	2000      	movs	r0, #0
   2c34a:	e008      	b.n	2c35e <_printf_common+0xb2>
   2c34c:	2301      	movs	r3, #1
   2c34e:	4652      	mov	r2, sl
   2c350:	4641      	mov	r1, r8
   2c352:	4638      	mov	r0, r7
   2c354:	47c8      	blx	r9
   2c356:	3001      	adds	r0, #1
   2c358:	d103      	bne.n	2c362 <_printf_common+0xb6>
   2c35a:	f04f 30ff 	mov.w	r0, #4294967295
   2c35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c362:	3501      	adds	r5, #1
   2c364:	e7c1      	b.n	2c2ea <_printf_common+0x3e>
   2c366:	18e1      	adds	r1, r4, r3
   2c368:	1c5a      	adds	r2, r3, #1
   2c36a:	2030      	movs	r0, #48	; 0x30
   2c36c:	3302      	adds	r3, #2
   2c36e:	4422      	add	r2, r4
   2c370:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2c374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2c378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2c37c:	e7c2      	b.n	2c304 <_printf_common+0x58>
   2c37e:	2301      	movs	r3, #1
   2c380:	4622      	mov	r2, r4
   2c382:	4641      	mov	r1, r8
   2c384:	4638      	mov	r0, r7
   2c386:	47c8      	blx	r9
   2c388:	3001      	adds	r0, #1
   2c38a:	d0e6      	beq.n	2c35a <_printf_common+0xae>
   2c38c:	3601      	adds	r6, #1
   2c38e:	e7d9      	b.n	2c344 <_printf_common+0x98>

0002c390 <strchr>:
   2c390:	b2c9      	uxtb	r1, r1
   2c392:	4603      	mov	r3, r0
   2c394:	4618      	mov	r0, r3
   2c396:	f813 2b01 	ldrb.w	r2, [r3], #1
   2c39a:	b112      	cbz	r2, 2c3a2 <strchr+0x12>
   2c39c:	428a      	cmp	r2, r1
   2c39e:	d1f9      	bne.n	2c394 <strchr+0x4>
   2c3a0:	4770      	bx	lr
   2c3a2:	2900      	cmp	r1, #0
   2c3a4:	bf18      	it	ne
   2c3a6:	2000      	movne	r0, #0
   2c3a8:	4770      	bx	lr

0002c3aa <strcpy>:
   2c3aa:	4603      	mov	r3, r0
   2c3ac:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c3b0:	f803 2b01 	strb.w	r2, [r3], #1
   2c3b4:	2a00      	cmp	r2, #0
   2c3b6:	d1f9      	bne.n	2c3ac <strcpy+0x2>
   2c3b8:	4770      	bx	lr

0002c3ba <strncmp>:
   2c3ba:	b510      	push	{r4, lr}
   2c3bc:	b16a      	cbz	r2, 2c3da <strncmp+0x20>
   2c3be:	3901      	subs	r1, #1
   2c3c0:	1884      	adds	r4, r0, r2
   2c3c2:	f810 2b01 	ldrb.w	r2, [r0], #1
   2c3c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2c3ca:	429a      	cmp	r2, r3
   2c3cc:	d103      	bne.n	2c3d6 <strncmp+0x1c>
   2c3ce:	42a0      	cmp	r0, r4
   2c3d0:	d001      	beq.n	2c3d6 <strncmp+0x1c>
   2c3d2:	2a00      	cmp	r2, #0
   2c3d4:	d1f5      	bne.n	2c3c2 <strncmp+0x8>
   2c3d6:	1ad0      	subs	r0, r2, r3
   2c3d8:	bd10      	pop	{r4, pc}
   2c3da:	4610      	mov	r0, r2
   2c3dc:	e7fc      	b.n	2c3d8 <strncmp+0x1e>

0002c3de <strncpy>:
   2c3de:	3901      	subs	r1, #1
   2c3e0:	4603      	mov	r3, r0
   2c3e2:	b510      	push	{r4, lr}
   2c3e4:	b132      	cbz	r2, 2c3f4 <strncpy+0x16>
   2c3e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2c3ea:	3a01      	subs	r2, #1
   2c3ec:	f803 4b01 	strb.w	r4, [r3], #1
   2c3f0:	2c00      	cmp	r4, #0
   2c3f2:	d1f7      	bne.n	2c3e4 <strncpy+0x6>
   2c3f4:	441a      	add	r2, r3
   2c3f6:	2100      	movs	r1, #0
   2c3f8:	4293      	cmp	r3, r2
   2c3fa:	d100      	bne.n	2c3fe <strncpy+0x20>
   2c3fc:	bd10      	pop	{r4, pc}
   2c3fe:	f803 1b01 	strb.w	r1, [r3], #1
   2c402:	e7f9      	b.n	2c3f8 <strncpy+0x1a>

0002c404 <strnlen>:
   2c404:	4602      	mov	r2, r0
   2c406:	4401      	add	r1, r0
   2c408:	b510      	push	{r4, lr}
   2c40a:	428a      	cmp	r2, r1
   2c40c:	4613      	mov	r3, r2
   2c40e:	d003      	beq.n	2c418 <strnlen+0x14>
   2c410:	781c      	ldrb	r4, [r3, #0]
   2c412:	3201      	adds	r2, #1
   2c414:	2c00      	cmp	r4, #0
   2c416:	d1f8      	bne.n	2c40a <strnlen+0x6>
   2c418:	1a18      	subs	r0, r3, r0
   2c41a:	bd10      	pop	{r4, pc}

0002c41c <strstr>:
   2c41c:	780a      	ldrb	r2, [r1, #0]
   2c41e:	b570      	push	{r4, r5, r6, lr}
   2c420:	b96a      	cbnz	r2, 2c43e <strstr+0x22>
   2c422:	bd70      	pop	{r4, r5, r6, pc}
   2c424:	429a      	cmp	r2, r3
   2c426:	d109      	bne.n	2c43c <strstr+0x20>
   2c428:	460c      	mov	r4, r1
   2c42a:	4605      	mov	r5, r0
   2c42c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2c430:	2b00      	cmp	r3, #0
   2c432:	d0f6      	beq.n	2c422 <strstr+0x6>
   2c434:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   2c438:	429e      	cmp	r6, r3
   2c43a:	d0f7      	beq.n	2c42c <strstr+0x10>
   2c43c:	3001      	adds	r0, #1
   2c43e:	7803      	ldrb	r3, [r0, #0]
   2c440:	2b00      	cmp	r3, #0
   2c442:	d1ef      	bne.n	2c424 <strstr+0x8>
   2c444:	4618      	mov	r0, r3
   2c446:	e7ec      	b.n	2c422 <strstr+0x6>

0002c448 <sulp>:
   2c448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c44c:	4690      	mov	r8, r2
   2c44e:	460f      	mov	r7, r1
   2c450:	f7f9 fe3c 	bl	260cc <__ulp>
   2c454:	4604      	mov	r4, r0
   2c456:	460d      	mov	r5, r1
   2c458:	f1b8 0f00 	cmp.w	r8, #0
   2c45c:	d011      	beq.n	2c482 <sulp+0x3a>
   2c45e:	f3c7 530a 	ubfx	r3, r7, #20, #11
   2c462:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   2c466:	2b00      	cmp	r3, #0
   2c468:	dd0b      	ble.n	2c482 <sulp+0x3a>
   2c46a:	051b      	lsls	r3, r3, #20
   2c46c:	2400      	movs	r4, #0
   2c46e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   2c472:	4622      	mov	r2, r4
   2c474:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   2c478:	462b      	mov	r3, r5
   2c47a:	f7dc f829 	bl	84d0 <__aeabi_dmul>
   2c47e:	4604      	mov	r4, r0
   2c480:	460d      	mov	r5, r1
   2c482:	4620      	mov	r0, r4
   2c484:	4629      	mov	r1, r5
   2c486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c48a <__strtok_r>:
   2c48a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c48c:	4604      	mov	r4, r0
   2c48e:	b908      	cbnz	r0, 2c494 <__strtok_r+0xa>
   2c490:	6814      	ldr	r4, [r2, #0]
   2c492:	b144      	cbz	r4, 2c4a6 <__strtok_r+0x1c>
   2c494:	4620      	mov	r0, r4
   2c496:	460f      	mov	r7, r1
   2c498:	f814 5b01 	ldrb.w	r5, [r4], #1
   2c49c:	f817 6b01 	ldrb.w	r6, [r7], #1
   2c4a0:	b91e      	cbnz	r6, 2c4aa <__strtok_r+0x20>
   2c4a2:	b965      	cbnz	r5, 2c4be <__strtok_r+0x34>
   2c4a4:	6015      	str	r5, [r2, #0]
   2c4a6:	2000      	movs	r0, #0
   2c4a8:	e005      	b.n	2c4b6 <__strtok_r+0x2c>
   2c4aa:	42b5      	cmp	r5, r6
   2c4ac:	d1f6      	bne.n	2c49c <__strtok_r+0x12>
   2c4ae:	2b00      	cmp	r3, #0
   2c4b0:	d1f0      	bne.n	2c494 <__strtok_r+0xa>
   2c4b2:	6014      	str	r4, [r2, #0]
   2c4b4:	7003      	strb	r3, [r0, #0]
   2c4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c4b8:	461c      	mov	r4, r3
   2c4ba:	e00c      	b.n	2c4d6 <__strtok_r+0x4c>
   2c4bc:	b915      	cbnz	r5, 2c4c4 <__strtok_r+0x3a>
   2c4be:	f814 3b01 	ldrb.w	r3, [r4], #1
   2c4c2:	460e      	mov	r6, r1
   2c4c4:	f816 5b01 	ldrb.w	r5, [r6], #1
   2c4c8:	42ab      	cmp	r3, r5
   2c4ca:	d1f7      	bne.n	2c4bc <__strtok_r+0x32>
   2c4cc:	2b00      	cmp	r3, #0
   2c4ce:	d0f3      	beq.n	2c4b8 <__strtok_r+0x2e>
   2c4d0:	2300      	movs	r3, #0
   2c4d2:	f804 3c01 	strb.w	r3, [r4, #-1]
   2c4d6:	6014      	str	r4, [r2, #0]
   2c4d8:	e7ed      	b.n	2c4b6 <__strtok_r+0x2c>

0002c4da <_strtol_r>:
   2c4da:	f7f8 bc2b 	b.w	24d34 <_strtol_l.constprop.0>

0002c4de <_strtoul_r>:
   2c4de:	f7f8 bcb1 	b.w	24e44 <_strtoul_l.constprop.0>

0002c4e2 <div>:
   2c4e2:	b510      	push	{r4, lr}
   2c4e4:	fb91 f4f2 	sdiv	r4, r1, r2
   2c4e8:	fb02 1114 	mls	r1, r2, r4, r1
   2c4ec:	6004      	str	r4, [r0, #0]
   2c4ee:	6041      	str	r1, [r0, #4]
   2c4f0:	bd10      	pop	{r4, pc}

0002c4f2 <quorem>:
   2c4f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c4f6:	6903      	ldr	r3, [r0, #16]
   2c4f8:	4607      	mov	r7, r0
   2c4fa:	690c      	ldr	r4, [r1, #16]
   2c4fc:	42a3      	cmp	r3, r4
   2c4fe:	f2c0 8083 	blt.w	2c608 <quorem+0x116>
   2c502:	3c01      	subs	r4, #1
   2c504:	f100 0514 	add.w	r5, r0, #20
   2c508:	f101 0814 	add.w	r8, r1, #20
   2c50c:	00a3      	lsls	r3, r4, #2
   2c50e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2c512:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2c516:	9300      	str	r3, [sp, #0]
   2c518:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2c51c:	9301      	str	r3, [sp, #4]
   2c51e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2c522:	3301      	adds	r3, #1
   2c524:	429a      	cmp	r2, r3
   2c526:	fbb2 f6f3 	udiv	r6, r2, r3
   2c52a:	d331      	bcc.n	2c590 <quorem+0x9e>
   2c52c:	f04f 0a00 	mov.w	sl, #0
   2c530:	46c4      	mov	ip, r8
   2c532:	46ae      	mov	lr, r5
   2c534:	46d3      	mov	fp, sl
   2c536:	f85c 3b04 	ldr.w	r3, [ip], #4
   2c53a:	b298      	uxth	r0, r3
   2c53c:	45e1      	cmp	r9, ip
   2c53e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2c542:	fb06 a000 	mla	r0, r6, r0, sl
   2c546:	ea4f 4210 	mov.w	r2, r0, lsr #16
   2c54a:	b280      	uxth	r0, r0
   2c54c:	fb06 2303 	mla	r3, r6, r3, r2
   2c550:	f8de 2000 	ldr.w	r2, [lr]
   2c554:	b292      	uxth	r2, r2
   2c556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2c55a:	eba2 0200 	sub.w	r2, r2, r0
   2c55e:	b29b      	uxth	r3, r3
   2c560:	f8de 0000 	ldr.w	r0, [lr]
   2c564:	445a      	add	r2, fp
   2c566:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   2c56a:	b292      	uxth	r2, r2
   2c56c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   2c570:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2c574:	ea4f 4b23 	mov.w	fp, r3, asr #16
   2c578:	f84e 2b04 	str.w	r2, [lr], #4
   2c57c:	d2db      	bcs.n	2c536 <quorem+0x44>
   2c57e:	9b00      	ldr	r3, [sp, #0]
   2c580:	58eb      	ldr	r3, [r5, r3]
   2c582:	b92b      	cbnz	r3, 2c590 <quorem+0x9e>
   2c584:	9b01      	ldr	r3, [sp, #4]
   2c586:	3b04      	subs	r3, #4
   2c588:	429d      	cmp	r5, r3
   2c58a:	461a      	mov	r2, r3
   2c58c:	d330      	bcc.n	2c5f0 <quorem+0xfe>
   2c58e:	613c      	str	r4, [r7, #16]
   2c590:	4638      	mov	r0, r7
   2c592:	f000 fa0d 	bl	2c9b0 <__mcmp>
   2c596:	2800      	cmp	r0, #0
   2c598:	db26      	blt.n	2c5e8 <quorem+0xf6>
   2c59a:	4629      	mov	r1, r5
   2c59c:	2000      	movs	r0, #0
   2c59e:	f858 2b04 	ldr.w	r2, [r8], #4
   2c5a2:	f8d1 c000 	ldr.w	ip, [r1]
   2c5a6:	fa1f fe82 	uxth.w	lr, r2
   2c5aa:	45c1      	cmp	r9, r8
   2c5ac:	fa1f f38c 	uxth.w	r3, ip
   2c5b0:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2c5b4:	eba3 030e 	sub.w	r3, r3, lr
   2c5b8:	4403      	add	r3, r0
   2c5ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   2c5be:	b29b      	uxth	r3, r3
   2c5c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   2c5c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2c5c8:	ea4f 4022 	mov.w	r0, r2, asr #16
   2c5cc:	f841 3b04 	str.w	r3, [r1], #4
   2c5d0:	d2e5      	bcs.n	2c59e <quorem+0xac>
   2c5d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2c5d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2c5da:	b922      	cbnz	r2, 2c5e6 <quorem+0xf4>
   2c5dc:	3b04      	subs	r3, #4
   2c5de:	429d      	cmp	r5, r3
   2c5e0:	461a      	mov	r2, r3
   2c5e2:	d30b      	bcc.n	2c5fc <quorem+0x10a>
   2c5e4:	613c      	str	r4, [r7, #16]
   2c5e6:	3601      	adds	r6, #1
   2c5e8:	4630      	mov	r0, r6
   2c5ea:	b003      	add	sp, #12
   2c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c5f0:	6812      	ldr	r2, [r2, #0]
   2c5f2:	3b04      	subs	r3, #4
   2c5f4:	2a00      	cmp	r2, #0
   2c5f6:	d1ca      	bne.n	2c58e <quorem+0x9c>
   2c5f8:	3c01      	subs	r4, #1
   2c5fa:	e7c5      	b.n	2c588 <quorem+0x96>
   2c5fc:	6812      	ldr	r2, [r2, #0]
   2c5fe:	3b04      	subs	r3, #4
   2c600:	2a00      	cmp	r2, #0
   2c602:	d1ef      	bne.n	2c5e4 <quorem+0xf2>
   2c604:	3c01      	subs	r4, #1
   2c606:	e7ea      	b.n	2c5de <quorem+0xec>
   2c608:	2000      	movs	r0, #0
   2c60a:	e7ee      	b.n	2c5ea <quorem+0xf8>

0002c60c <__sfmoreglue>:
   2c60c:	b570      	push	{r4, r5, r6, lr}
   2c60e:	2368      	movs	r3, #104	; 0x68
   2c610:	1e4d      	subs	r5, r1, #1
   2c612:	460e      	mov	r6, r1
   2c614:	435d      	muls	r5, r3
   2c616:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2c61a:	f7f7 ff65 	bl	244e8 <_malloc_r>
   2c61e:	4604      	mov	r4, r0
   2c620:	b140      	cbz	r0, 2c634 <__sfmoreglue+0x28>
   2c622:	2100      	movs	r1, #0
   2c624:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2c628:	e9c0 1600 	strd	r1, r6, [r0]
   2c62c:	300c      	adds	r0, #12
   2c62e:	60a0      	str	r0, [r4, #8]
   2c630:	f7ff fd86 	bl	2c140 <memset>
   2c634:	4620      	mov	r0, r4
   2c636:	bd70      	pop	{r4, r5, r6, pc}

0002c638 <_fwalk_reent>:
   2c638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c63c:	4606      	mov	r6, r0
   2c63e:	4688      	mov	r8, r1
   2c640:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2c644:	2700      	movs	r7, #0
   2c646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2c64a:	f1b9 0901 	subs.w	r9, r9, #1
   2c64e:	d505      	bpl.n	2c65c <_fwalk_reent+0x24>
   2c650:	6824      	ldr	r4, [r4, #0]
   2c652:	2c00      	cmp	r4, #0
   2c654:	d1f7      	bne.n	2c646 <_fwalk_reent+0xe>
   2c656:	4638      	mov	r0, r7
   2c658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c65c:	89ab      	ldrh	r3, [r5, #12]
   2c65e:	2b01      	cmp	r3, #1
   2c660:	d907      	bls.n	2c672 <_fwalk_reent+0x3a>
   2c662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2c666:	3301      	adds	r3, #1
   2c668:	d003      	beq.n	2c672 <_fwalk_reent+0x3a>
   2c66a:	4629      	mov	r1, r5
   2c66c:	4630      	mov	r0, r6
   2c66e:	47c0      	blx	r8
   2c670:	4307      	orrs	r7, r0
   2c672:	3568      	adds	r5, #104	; 0x68
   2c674:	e7e9      	b.n	2c64a <_fwalk_reent+0x12>

0002c676 <rshift>:
   2c676:	6903      	ldr	r3, [r0, #16]
   2c678:	114a      	asrs	r2, r1, #5
   2c67a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   2c67e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c682:	dc04      	bgt.n	2c68e <rshift+0x18>
   2c684:	2300      	movs	r3, #0
   2c686:	6103      	str	r3, [r0, #16]
   2c688:	2300      	movs	r3, #0
   2c68a:	6143      	str	r3, [r0, #20]
   2c68c:	e031      	b.n	2c6f2 <rshift+0x7c>
   2c68e:	f100 0414 	add.w	r4, r0, #20
   2c692:	f011 011f 	ands.w	r1, r1, #31
   2c696:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   2c69a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   2c69e:	d10c      	bne.n	2c6ba <rshift+0x44>
   2c6a0:	f100 0710 	add.w	r7, r0, #16
   2c6a4:	4629      	mov	r1, r5
   2c6a6:	42b1      	cmp	r1, r6
   2c6a8:	d331      	bcc.n	2c70e <rshift+0x98>
   2c6aa:	1a9b      	subs	r3, r3, r2
   2c6ac:	1eea      	subs	r2, r5, #3
   2c6ae:	009b      	lsls	r3, r3, #2
   2c6b0:	4296      	cmp	r6, r2
   2c6b2:	bf38      	it	cc
   2c6b4:	2300      	movcc	r3, #0
   2c6b6:	4423      	add	r3, r4
   2c6b8:	e015      	b.n	2c6e6 <rshift+0x70>
   2c6ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   2c6be:	f1c1 0820 	rsb	r8, r1, #32
   2c6c2:	f105 0e04 	add.w	lr, r5, #4
   2c6c6:	46a1      	mov	r9, r4
   2c6c8:	40cf      	lsrs	r7, r1
   2c6ca:	4576      	cmp	r6, lr
   2c6cc:	46f4      	mov	ip, lr
   2c6ce:	d812      	bhi.n	2c6f6 <rshift+0x80>
   2c6d0:	1a9a      	subs	r2, r3, r2
   2c6d2:	3501      	adds	r5, #1
   2c6d4:	0092      	lsls	r2, r2, #2
   2c6d6:	3a04      	subs	r2, #4
   2c6d8:	42ae      	cmp	r6, r5
   2c6da:	bf38      	it	cc
   2c6dc:	2200      	movcc	r2, #0
   2c6de:	18a3      	adds	r3, r4, r2
   2c6e0:	50a7      	str	r7, [r4, r2]
   2c6e2:	b107      	cbz	r7, 2c6e6 <rshift+0x70>
   2c6e4:	3304      	adds	r3, #4
   2c6e6:	1b1a      	subs	r2, r3, r4
   2c6e8:	42a3      	cmp	r3, r4
   2c6ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
   2c6ee:	6102      	str	r2, [r0, #16]
   2c6f0:	d0ca      	beq.n	2c688 <rshift+0x12>
   2c6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c6f6:	f8dc c000 	ldr.w	ip, [ip]
   2c6fa:	fa0c fc08 	lsl.w	ip, ip, r8
   2c6fe:	ea4c 0707 	orr.w	r7, ip, r7
   2c702:	f849 7b04 	str.w	r7, [r9], #4
   2c706:	f85e 7b04 	ldr.w	r7, [lr], #4
   2c70a:	40cf      	lsrs	r7, r1
   2c70c:	e7dd      	b.n	2c6ca <rshift+0x54>
   2c70e:	f851 cb04 	ldr.w	ip, [r1], #4
   2c712:	f847 cf04 	str.w	ip, [r7, #4]!
   2c716:	e7c6      	b.n	2c6a6 <rshift+0x30>

0002c718 <__hexdig_fun>:
   2c718:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2c71c:	2b09      	cmp	r3, #9
   2c71e:	d802      	bhi.n	2c726 <__hexdig_fun+0xe>
   2c720:	3820      	subs	r0, #32
   2c722:	b2c0      	uxtb	r0, r0
   2c724:	4770      	bx	lr
   2c726:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2c72a:	2b05      	cmp	r3, #5
   2c72c:	d801      	bhi.n	2c732 <__hexdig_fun+0x1a>
   2c72e:	3847      	subs	r0, #71	; 0x47
   2c730:	e7f7      	b.n	2c722 <__hexdig_fun+0xa>
   2c732:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2c736:	2b05      	cmp	r3, #5
   2c738:	d801      	bhi.n	2c73e <__hexdig_fun+0x26>
   2c73a:	3827      	subs	r0, #39	; 0x27
   2c73c:	e7f1      	b.n	2c722 <__hexdig_fun+0xa>
   2c73e:	2000      	movs	r0, #0
   2c740:	4770      	bx	lr

0002c742 <L_shift>:
   2c742:	f1c2 0208 	rsb	r2, r2, #8
   2c746:	0092      	lsls	r2, r2, #2
   2c748:	b570      	push	{r4, r5, r6, lr}
   2c74a:	f1c2 0620 	rsb	r6, r2, #32
   2c74e:	6843      	ldr	r3, [r0, #4]
   2c750:	6804      	ldr	r4, [r0, #0]
   2c752:	fa03 f506 	lsl.w	r5, r3, r6
   2c756:	40d3      	lsrs	r3, r2
   2c758:	432c      	orrs	r4, r5
   2c75a:	6004      	str	r4, [r0, #0]
   2c75c:	f840 3f04 	str.w	r3, [r0, #4]!
   2c760:	4288      	cmp	r0, r1
   2c762:	d3f4      	bcc.n	2c74e <L_shift+0xc>
   2c764:	bd70      	pop	{r4, r5, r6, pc}

0002c766 <__match>:
   2c766:	6803      	ldr	r3, [r0, #0]
   2c768:	3301      	adds	r3, #1
   2c76a:	b530      	push	{r4, r5, lr}
   2c76c:	f811 4b01 	ldrb.w	r4, [r1], #1
   2c770:	b914      	cbnz	r4, 2c778 <__match+0x12>
   2c772:	6003      	str	r3, [r0, #0]
   2c774:	2001      	movs	r0, #1
   2c776:	bd30      	pop	{r4, r5, pc}
   2c778:	f813 2b01 	ldrb.w	r2, [r3], #1
   2c77c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   2c780:	2d19      	cmp	r5, #25
   2c782:	bf98      	it	ls
   2c784:	3220      	addls	r2, #32
   2c786:	42a2      	cmp	r2, r4
   2c788:	d0f0      	beq.n	2c76c <__match+0x6>
   2c78a:	2000      	movs	r0, #0
   2c78c:	e7f3      	b.n	2c776 <__match+0x10>

0002c78e <__hexnan>:
   2c78e:	680b      	ldr	r3, [r1, #0]
   2c790:	6801      	ldr	r1, [r0, #0]
   2c792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c796:	115e      	asrs	r6, r3, #5
   2c798:	f013 031f 	ands.w	r3, r3, #31
   2c79c:	f04f 0500 	mov.w	r5, #0
   2c7a0:	b087      	sub	sp, #28
   2c7a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   2c7a6:	4682      	mov	sl, r0
   2c7a8:	4690      	mov	r8, r2
   2c7aa:	46ab      	mov	fp, r5
   2c7ac:	bf18      	it	ne
   2c7ae:	3604      	addne	r6, #4
   2c7b0:	9301      	str	r3, [sp, #4]
   2c7b2:	9502      	str	r5, [sp, #8]
   2c7b4:	1f37      	subs	r7, r6, #4
   2c7b6:	f846 5c04 	str.w	r5, [r6, #-4]
   2c7ba:	46b9      	mov	r9, r7
   2c7bc:	463c      	mov	r4, r7
   2c7be:	1c4b      	adds	r3, r1, #1
   2c7c0:	784a      	ldrb	r2, [r1, #1]
   2c7c2:	9303      	str	r3, [sp, #12]
   2c7c4:	b342      	cbz	r2, 2c818 <__hexnan+0x8a>
   2c7c6:	4610      	mov	r0, r2
   2c7c8:	9105      	str	r1, [sp, #20]
   2c7ca:	9204      	str	r2, [sp, #16]
   2c7cc:	f7ff ffa4 	bl	2c718 <__hexdig_fun>
   2c7d0:	2800      	cmp	r0, #0
   2c7d2:	d151      	bne.n	2c878 <__hexnan+0xea>
   2c7d4:	9a04      	ldr	r2, [sp, #16]
   2c7d6:	9905      	ldr	r1, [sp, #20]
   2c7d8:	2a20      	cmp	r2, #32
   2c7da:	d818      	bhi.n	2c80e <__hexnan+0x80>
   2c7dc:	9b02      	ldr	r3, [sp, #8]
   2c7de:	459b      	cmp	fp, r3
   2c7e0:	dd13      	ble.n	2c80a <__hexnan+0x7c>
   2c7e2:	454c      	cmp	r4, r9
   2c7e4:	d206      	bcs.n	2c7f4 <__hexnan+0x66>
   2c7e6:	2d07      	cmp	r5, #7
   2c7e8:	dc04      	bgt.n	2c7f4 <__hexnan+0x66>
   2c7ea:	462a      	mov	r2, r5
   2c7ec:	4649      	mov	r1, r9
   2c7ee:	4620      	mov	r0, r4
   2c7f0:	f7ff ffa7 	bl	2c742 <L_shift>
   2c7f4:	4544      	cmp	r4, r8
   2c7f6:	d951      	bls.n	2c89c <__hexnan+0x10e>
   2c7f8:	2300      	movs	r3, #0
   2c7fa:	f1a4 0904 	sub.w	r9, r4, #4
   2c7fe:	f8cd b008 	str.w	fp, [sp, #8]
   2c802:	f844 3c04 	str.w	r3, [r4, #-4]
   2c806:	461d      	mov	r5, r3
   2c808:	464c      	mov	r4, r9
   2c80a:	9903      	ldr	r1, [sp, #12]
   2c80c:	e7d7      	b.n	2c7be <__hexnan+0x30>
   2c80e:	2a29      	cmp	r2, #41	; 0x29
   2c810:	d156      	bne.n	2c8c0 <__hexnan+0x132>
   2c812:	3102      	adds	r1, #2
   2c814:	f8ca 1000 	str.w	r1, [sl]
   2c818:	f1bb 0f00 	cmp.w	fp, #0
   2c81c:	d050      	beq.n	2c8c0 <__hexnan+0x132>
   2c81e:	454c      	cmp	r4, r9
   2c820:	d206      	bcs.n	2c830 <__hexnan+0xa2>
   2c822:	2d07      	cmp	r5, #7
   2c824:	dc04      	bgt.n	2c830 <__hexnan+0xa2>
   2c826:	462a      	mov	r2, r5
   2c828:	4649      	mov	r1, r9
   2c82a:	4620      	mov	r0, r4
   2c82c:	f7ff ff89 	bl	2c742 <L_shift>
   2c830:	4544      	cmp	r4, r8
   2c832:	d935      	bls.n	2c8a0 <__hexnan+0x112>
   2c834:	f1a8 0204 	sub.w	r2, r8, #4
   2c838:	4623      	mov	r3, r4
   2c83a:	f853 1b04 	ldr.w	r1, [r3], #4
   2c83e:	429f      	cmp	r7, r3
   2c840:	f842 1f04 	str.w	r1, [r2, #4]!
   2c844:	d2f9      	bcs.n	2c83a <__hexnan+0xac>
   2c846:	1b3b      	subs	r3, r7, r4
   2c848:	3e03      	subs	r6, #3
   2c84a:	3401      	adds	r4, #1
   2c84c:	2200      	movs	r2, #0
   2c84e:	f023 0303 	bic.w	r3, r3, #3
   2c852:	3304      	adds	r3, #4
   2c854:	42b4      	cmp	r4, r6
   2c856:	bf88      	it	hi
   2c858:	2304      	movhi	r3, #4
   2c85a:	4443      	add	r3, r8
   2c85c:	f843 2b04 	str.w	r2, [r3], #4
   2c860:	429f      	cmp	r7, r3
   2c862:	d2fb      	bcs.n	2c85c <__hexnan+0xce>
   2c864:	683b      	ldr	r3, [r7, #0]
   2c866:	b91b      	cbnz	r3, 2c870 <__hexnan+0xe2>
   2c868:	4547      	cmp	r7, r8
   2c86a:	d127      	bne.n	2c8bc <__hexnan+0x12e>
   2c86c:	2301      	movs	r3, #1
   2c86e:	603b      	str	r3, [r7, #0]
   2c870:	2005      	movs	r0, #5
   2c872:	b007      	add	sp, #28
   2c874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c878:	3501      	adds	r5, #1
   2c87a:	f10b 0b01 	add.w	fp, fp, #1
   2c87e:	2d08      	cmp	r5, #8
   2c880:	dd05      	ble.n	2c88e <__hexnan+0x100>
   2c882:	4544      	cmp	r4, r8
   2c884:	d9c1      	bls.n	2c80a <__hexnan+0x7c>
   2c886:	2300      	movs	r3, #0
   2c888:	3c04      	subs	r4, #4
   2c88a:	2501      	movs	r5, #1
   2c88c:	6023      	str	r3, [r4, #0]
   2c88e:	6822      	ldr	r2, [r4, #0]
   2c890:	f000 000f 	and.w	r0, r0, #15
   2c894:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   2c898:	6020      	str	r0, [r4, #0]
   2c89a:	e7b6      	b.n	2c80a <__hexnan+0x7c>
   2c89c:	2508      	movs	r5, #8
   2c89e:	e7b4      	b.n	2c80a <__hexnan+0x7c>
   2c8a0:	9b01      	ldr	r3, [sp, #4]
   2c8a2:	2b00      	cmp	r3, #0
   2c8a4:	d0de      	beq.n	2c864 <__hexnan+0xd6>
   2c8a6:	f1c3 0320 	rsb	r3, r3, #32
   2c8aa:	f04f 32ff 	mov.w	r2, #4294967295
   2c8ae:	40da      	lsrs	r2, r3
   2c8b0:	f856 3c04 	ldr.w	r3, [r6, #-4]
   2c8b4:	4013      	ands	r3, r2
   2c8b6:	f846 3c04 	str.w	r3, [r6, #-4]
   2c8ba:	e7d3      	b.n	2c864 <__hexnan+0xd6>
   2c8bc:	3f04      	subs	r7, #4
   2c8be:	e7d1      	b.n	2c864 <__hexnan+0xd6>
   2c8c0:	2004      	movs	r0, #4
   2c8c2:	e7d6      	b.n	2c872 <__hexnan+0xe4>

0002c8c4 <_getenv_r>:
   2c8c4:	b507      	push	{r0, r1, r2, lr}
   2c8c6:	aa01      	add	r2, sp, #4
   2c8c8:	f7f9 f8a0 	bl	25a0c <_findenv_r>
   2c8cc:	b003      	add	sp, #12
   2c8ce:	f85d fb04 	ldr.w	pc, [sp], #4

0002c8d2 <__ascii_mbtowc>:
   2c8d2:	b082      	sub	sp, #8
   2c8d4:	b901      	cbnz	r1, 2c8d8 <__ascii_mbtowc+0x6>
   2c8d6:	a901      	add	r1, sp, #4
   2c8d8:	b142      	cbz	r2, 2c8ec <__ascii_mbtowc+0x1a>
   2c8da:	b14b      	cbz	r3, 2c8f0 <__ascii_mbtowc+0x1e>
   2c8dc:	7813      	ldrb	r3, [r2, #0]
   2c8de:	600b      	str	r3, [r1, #0]
   2c8e0:	7812      	ldrb	r2, [r2, #0]
   2c8e2:	1e10      	subs	r0, r2, #0
   2c8e4:	bf18      	it	ne
   2c8e6:	2001      	movne	r0, #1
   2c8e8:	b002      	add	sp, #8
   2c8ea:	4770      	bx	lr
   2c8ec:	4610      	mov	r0, r2
   2c8ee:	e7fb      	b.n	2c8e8 <__ascii_mbtowc+0x16>
   2c8f0:	f06f 0001 	mvn.w	r0, #1
   2c8f4:	e7f8      	b.n	2c8e8 <__ascii_mbtowc+0x16>

0002c8f6 <memchr>:
   2c8f6:	b2c9      	uxtb	r1, r1
   2c8f8:	4603      	mov	r3, r0
   2c8fa:	4402      	add	r2, r0
   2c8fc:	b510      	push	{r4, lr}
   2c8fe:	4293      	cmp	r3, r2
   2c900:	4618      	mov	r0, r3
   2c902:	d101      	bne.n	2c908 <memchr+0x12>
   2c904:	2000      	movs	r0, #0
   2c906:	e003      	b.n	2c910 <memchr+0x1a>
   2c908:	7804      	ldrb	r4, [r0, #0]
   2c90a:	3301      	adds	r3, #1
   2c90c:	428c      	cmp	r4, r1
   2c90e:	d1f6      	bne.n	2c8fe <memchr+0x8>
   2c910:	bd10      	pop	{r4, pc}

0002c912 <__hi0bits>:
   2c912:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2c916:	4603      	mov	r3, r0
   2c918:	bf36      	itet	cc
   2c91a:	0403      	lslcc	r3, r0, #16
   2c91c:	2000      	movcs	r0, #0
   2c91e:	2010      	movcc	r0, #16
   2c920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2c924:	bf3c      	itt	cc
   2c926:	021b      	lslcc	r3, r3, #8
   2c928:	3008      	addcc	r0, #8
   2c92a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2c92e:	bf3c      	itt	cc
   2c930:	011b      	lslcc	r3, r3, #4
   2c932:	3004      	addcc	r0, #4
   2c934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   2c938:	d303      	bcc.n	2c942 <__hi0bits+0x30>
   2c93a:	2b00      	cmp	r3, #0
   2c93c:	db0a      	blt.n	2c954 <__hi0bits+0x42>
   2c93e:	3001      	adds	r0, #1
   2c940:	4770      	bx	lr
   2c942:	009b      	lsls	r3, r3, #2
   2c944:	d501      	bpl.n	2c94a <__hi0bits+0x38>
   2c946:	3002      	adds	r0, #2
   2c948:	4770      	bx	lr
   2c94a:	005b      	lsls	r3, r3, #1
   2c94c:	d501      	bpl.n	2c952 <__hi0bits+0x40>
   2c94e:	3003      	adds	r0, #3
   2c950:	4770      	bx	lr
   2c952:	2020      	movs	r0, #32
   2c954:	4770      	bx	lr

0002c956 <__lo0bits>:
   2c956:	6803      	ldr	r3, [r0, #0]
   2c958:	4602      	mov	r2, r0
   2c95a:	f013 0007 	ands.w	r0, r3, #7
   2c95e:	d00b      	beq.n	2c978 <__lo0bits+0x22>
   2c960:	07d9      	lsls	r1, r3, #31
   2c962:	d421      	bmi.n	2c9a8 <__lo0bits+0x52>
   2c964:	0798      	lsls	r0, r3, #30
   2c966:	bf47      	ittee	mi
   2c968:	085b      	lsrmi	r3, r3, #1
   2c96a:	2001      	movmi	r0, #1
   2c96c:	089b      	lsrpl	r3, r3, #2
   2c96e:	2002      	movpl	r0, #2
   2c970:	bf4c      	ite	mi
   2c972:	6013      	strmi	r3, [r2, #0]
   2c974:	6013      	strpl	r3, [r2, #0]
   2c976:	4770      	bx	lr
   2c978:	b299      	uxth	r1, r3
   2c97a:	b909      	cbnz	r1, 2c980 <__lo0bits+0x2a>
   2c97c:	0c1b      	lsrs	r3, r3, #16
   2c97e:	2010      	movs	r0, #16
   2c980:	b2d9      	uxtb	r1, r3
   2c982:	b909      	cbnz	r1, 2c988 <__lo0bits+0x32>
   2c984:	3008      	adds	r0, #8
   2c986:	0a1b      	lsrs	r3, r3, #8
   2c988:	0719      	lsls	r1, r3, #28
   2c98a:	bf04      	itt	eq
   2c98c:	091b      	lsreq	r3, r3, #4
   2c98e:	3004      	addeq	r0, #4
   2c990:	0799      	lsls	r1, r3, #30
   2c992:	bf04      	itt	eq
   2c994:	089b      	lsreq	r3, r3, #2
   2c996:	3002      	addeq	r0, #2
   2c998:	07d9      	lsls	r1, r3, #31
   2c99a:	d403      	bmi.n	2c9a4 <__lo0bits+0x4e>
   2c99c:	085b      	lsrs	r3, r3, #1
   2c99e:	f100 0001 	add.w	r0, r0, #1
   2c9a2:	d003      	beq.n	2c9ac <__lo0bits+0x56>
   2c9a4:	6013      	str	r3, [r2, #0]
   2c9a6:	4770      	bx	lr
   2c9a8:	2000      	movs	r0, #0
   2c9aa:	4770      	bx	lr
   2c9ac:	2020      	movs	r0, #32
   2c9ae:	4770      	bx	lr

0002c9b0 <__mcmp>:
   2c9b0:	4603      	mov	r3, r0
   2c9b2:	690a      	ldr	r2, [r1, #16]
   2c9b4:	6900      	ldr	r0, [r0, #16]
   2c9b6:	1a80      	subs	r0, r0, r2
   2c9b8:	b530      	push	{r4, r5, lr}
   2c9ba:	d10e      	bne.n	2c9da <__mcmp+0x2a>
   2c9bc:	3314      	adds	r3, #20
   2c9be:	3114      	adds	r1, #20
   2c9c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   2c9c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   2c9c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2c9cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2c9d0:	4295      	cmp	r5, r2
   2c9d2:	d003      	beq.n	2c9dc <__mcmp+0x2c>
   2c9d4:	d205      	bcs.n	2c9e2 <__mcmp+0x32>
   2c9d6:	f04f 30ff 	mov.w	r0, #4294967295
   2c9da:	bd30      	pop	{r4, r5, pc}
   2c9dc:	42a3      	cmp	r3, r4
   2c9de:	d3f3      	bcc.n	2c9c8 <__mcmp+0x18>
   2c9e0:	e7fb      	b.n	2c9da <__mcmp+0x2a>
   2c9e2:	2001      	movs	r0, #1
   2c9e4:	e7f9      	b.n	2c9da <__mcmp+0x2a>

0002c9e6 <__ratio>:
   2c9e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c9ea:	b085      	sub	sp, #20
   2c9ec:	e9cd 1000 	strd	r1, r0, [sp]
   2c9f0:	a902      	add	r1, sp, #8
   2c9f2:	f7f9 fb8b 	bl	2610c <__b2d>
   2c9f6:	468b      	mov	fp, r1
   2c9f8:	4606      	mov	r6, r0
   2c9fa:	460f      	mov	r7, r1
   2c9fc:	9800      	ldr	r0, [sp, #0]
   2c9fe:	a903      	add	r1, sp, #12
   2ca00:	f7f9 fb84 	bl	2610c <__b2d>
   2ca04:	9b01      	ldr	r3, [sp, #4]
   2ca06:	4689      	mov	r9, r1
   2ca08:	460d      	mov	r5, r1
   2ca0a:	6919      	ldr	r1, [r3, #16]
   2ca0c:	4604      	mov	r4, r0
   2ca0e:	9b00      	ldr	r3, [sp, #0]
   2ca10:	4630      	mov	r0, r6
   2ca12:	691b      	ldr	r3, [r3, #16]
   2ca14:	1ac9      	subs	r1, r1, r3
   2ca16:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2ca1a:	1a9b      	subs	r3, r3, r2
   2ca1c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   2ca20:	2b00      	cmp	r3, #0
   2ca22:	bfdb      	ittet	le
   2ca24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   2ca28:	462a      	movle	r2, r5
   2ca2a:	463a      	movgt	r2, r7
   2ca2c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
   2ca30:	bfc8      	it	gt
   2ca32:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
   2ca36:	4622      	mov	r2, r4
   2ca38:	464b      	mov	r3, r9
   2ca3a:	4659      	mov	r1, fp
   2ca3c:	f7db fe72 	bl	8724 <__aeabi_ddiv>
   2ca40:	b005      	add	sp, #20
   2ca42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ca46 <__copybits>:
   2ca46:	3901      	subs	r1, #1
   2ca48:	f102 0314 	add.w	r3, r2, #20
   2ca4c:	1149      	asrs	r1, r1, #5
   2ca4e:	b570      	push	{r4, r5, r6, lr}
   2ca50:	3101      	adds	r1, #1
   2ca52:	6914      	ldr	r4, [r2, #16]
   2ca54:	1f05      	subs	r5, r0, #4
   2ca56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2ca5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2ca5e:	42a3      	cmp	r3, r4
   2ca60:	d30c      	bcc.n	2ca7c <__copybits+0x36>
   2ca62:	1aa3      	subs	r3, r4, r2
   2ca64:	3211      	adds	r2, #17
   2ca66:	3b11      	subs	r3, #17
   2ca68:	f023 0303 	bic.w	r3, r3, #3
   2ca6c:	42a2      	cmp	r2, r4
   2ca6e:	bf88      	it	hi
   2ca70:	2300      	movhi	r3, #0
   2ca72:	4418      	add	r0, r3
   2ca74:	2300      	movs	r3, #0
   2ca76:	4288      	cmp	r0, r1
   2ca78:	d305      	bcc.n	2ca86 <__copybits+0x40>
   2ca7a:	bd70      	pop	{r4, r5, r6, pc}
   2ca7c:	f853 6b04 	ldr.w	r6, [r3], #4
   2ca80:	f845 6f04 	str.w	r6, [r5, #4]!
   2ca84:	e7eb      	b.n	2ca5e <__copybits+0x18>
   2ca86:	f840 3b04 	str.w	r3, [r0], #4
   2ca8a:	e7f4      	b.n	2ca76 <__copybits+0x30>

0002ca8c <__any_on>:
   2ca8c:	f100 0214 	add.w	r2, r0, #20
   2ca90:	114b      	asrs	r3, r1, #5
   2ca92:	6900      	ldr	r0, [r0, #16]
   2ca94:	4298      	cmp	r0, r3
   2ca96:	b510      	push	{r4, lr}
   2ca98:	db11      	blt.n	2cabe <__any_on+0x32>
   2ca9a:	dd0a      	ble.n	2cab2 <__any_on+0x26>
   2ca9c:	f011 011f 	ands.w	r1, r1, #31
   2caa0:	d007      	beq.n	2cab2 <__any_on+0x26>
   2caa2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   2caa6:	fa24 f001 	lsr.w	r0, r4, r1
   2caaa:	fa00 f101 	lsl.w	r1, r0, r1
   2caae:	428c      	cmp	r4, r1
   2cab0:	d10b      	bne.n	2caca <__any_on+0x3e>
   2cab2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2cab6:	4293      	cmp	r3, r2
   2cab8:	d803      	bhi.n	2cac2 <__any_on+0x36>
   2caba:	2000      	movs	r0, #0
   2cabc:	bd10      	pop	{r4, pc}
   2cabe:	4603      	mov	r3, r0
   2cac0:	e7f7      	b.n	2cab2 <__any_on+0x26>
   2cac2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2cac6:	2900      	cmp	r1, #0
   2cac8:	d0f5      	beq.n	2cab6 <__any_on+0x2a>
   2caca:	2001      	movs	r0, #1
   2cacc:	e7f6      	b.n	2cabc <__any_on+0x30>

0002cace <__sfputc_r>:
   2cace:	6893      	ldr	r3, [r2, #8]
   2cad0:	3b01      	subs	r3, #1
   2cad2:	2b00      	cmp	r3, #0
   2cad4:	6093      	str	r3, [r2, #8]
   2cad6:	b410      	push	{r4}
   2cad8:	da07      	bge.n	2caea <__sfputc_r+0x1c>
   2cada:	6994      	ldr	r4, [r2, #24]
   2cadc:	42a3      	cmp	r3, r4
   2cade:	db01      	blt.n	2cae4 <__sfputc_r+0x16>
   2cae0:	290a      	cmp	r1, #10
   2cae2:	d102      	bne.n	2caea <__sfputc_r+0x1c>
   2cae4:	bc10      	pop	{r4}
   2cae6:	f7f9 bd09 	b.w	264fc <__swbuf_r>
   2caea:	6813      	ldr	r3, [r2, #0]
   2caec:	1c58      	adds	r0, r3, #1
   2caee:	6010      	str	r0, [r2, #0]
   2caf0:	4608      	mov	r0, r1
   2caf2:	7019      	strb	r1, [r3, #0]
   2caf4:	bc10      	pop	{r4}
   2caf6:	4770      	bx	lr

0002caf8 <__sfputs_r>:
   2caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cafa:	4606      	mov	r6, r0
   2cafc:	460f      	mov	r7, r1
   2cafe:	4614      	mov	r4, r2
   2cb00:	18d5      	adds	r5, r2, r3
   2cb02:	42ac      	cmp	r4, r5
   2cb04:	d101      	bne.n	2cb0a <__sfputs_r+0x12>
   2cb06:	2000      	movs	r0, #0
   2cb08:	e007      	b.n	2cb1a <__sfputs_r+0x22>
   2cb0a:	463a      	mov	r2, r7
   2cb0c:	f814 1b01 	ldrb.w	r1, [r4], #1
   2cb10:	4630      	mov	r0, r6
   2cb12:	f7ff ffdc 	bl	2cace <__sfputc_r>
   2cb16:	1c43      	adds	r3, r0, #1
   2cb18:	d1f3      	bne.n	2cb02 <__sfputs_r+0xa>
   2cb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cb1c <__sread>:
   2cb1c:	b510      	push	{r4, lr}
   2cb1e:	460c      	mov	r4, r1
   2cb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2cb24:	f7fa f934 	bl	26d90 <_read_r>
   2cb28:	2800      	cmp	r0, #0
   2cb2a:	bfab      	itete	ge
   2cb2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2cb2e:	89a3      	ldrhlt	r3, [r4, #12]
   2cb30:	181b      	addge	r3, r3, r0
   2cb32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2cb36:	bfac      	ite	ge
   2cb38:	6563      	strge	r3, [r4, #84]	; 0x54
   2cb3a:	81a3      	strhlt	r3, [r4, #12]
   2cb3c:	bd10      	pop	{r4, pc}

0002cb3e <__seofread>:
   2cb3e:	2000      	movs	r0, #0
   2cb40:	4770      	bx	lr

0002cb42 <__swrite>:
   2cb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cb46:	461f      	mov	r7, r3
   2cb48:	898b      	ldrh	r3, [r1, #12]
   2cb4a:	4605      	mov	r5, r0
   2cb4c:	460c      	mov	r4, r1
   2cb4e:	05db      	lsls	r3, r3, #23
   2cb50:	4616      	mov	r6, r2
   2cb52:	d505      	bpl.n	2cb60 <__swrite+0x1e>
   2cb54:	2302      	movs	r3, #2
   2cb56:	2200      	movs	r2, #0
   2cb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2cb5c:	f7f9 fdf6 	bl	2674c <_lseek_r>
   2cb60:	89a3      	ldrh	r3, [r4, #12]
   2cb62:	4632      	mov	r2, r6
   2cb64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2cb68:	4628      	mov	r0, r5
   2cb6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2cb6e:	81a3      	strh	r3, [r4, #12]
   2cb70:	463b      	mov	r3, r7
   2cb72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2cb76:	f7f9 bd13 	b.w	265a0 <_write_r>

0002cb7a <__sseek>:
   2cb7a:	b510      	push	{r4, lr}
   2cb7c:	460c      	mov	r4, r1
   2cb7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2cb82:	f7f9 fde3 	bl	2674c <_lseek_r>
   2cb86:	1c43      	adds	r3, r0, #1
   2cb88:	89a3      	ldrh	r3, [r4, #12]
   2cb8a:	bf15      	itete	ne
   2cb8c:	6560      	strne	r0, [r4, #84]	; 0x54
   2cb8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2cb92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2cb96:	81a3      	strheq	r3, [r4, #12]
   2cb98:	bf18      	it	ne
   2cb9a:	81a3      	strhne	r3, [r4, #12]
   2cb9c:	bd10      	pop	{r4, pc}

0002cb9e <__sclose>:
   2cb9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2cba2:	f7f9 bd7b 	b.w	2669c <_close_r>

0002cba6 <__ascii_wctomb>:
   2cba6:	4603      	mov	r3, r0
   2cba8:	4608      	mov	r0, r1
   2cbaa:	b141      	cbz	r1, 2cbbe <__ascii_wctomb+0x18>
   2cbac:	2aff      	cmp	r2, #255	; 0xff
   2cbae:	d904      	bls.n	2cbba <__ascii_wctomb+0x14>
   2cbb0:	228a      	movs	r2, #138	; 0x8a
   2cbb2:	f04f 30ff 	mov.w	r0, #4294967295
   2cbb6:	601a      	str	r2, [r3, #0]
   2cbb8:	4770      	bx	lr
   2cbba:	2001      	movs	r0, #1
   2cbbc:	700a      	strb	r2, [r1, #0]
   2cbbe:	4770      	bx	lr

0002cbc0 <abort>:
   2cbc0:	2006      	movs	r0, #6
   2cbc2:	b508      	push	{r3, lr}
   2cbc4:	f7fa f8f6 	bl	26db4 <raise>
   2cbc8:	2001      	movs	r0, #1
   2cbca:	f7e5 f9f1 	bl	11fb0 <_exit>

0002cbce <__sflush_r>:
   2cbce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2cbd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cbd4:	0717      	lsls	r7, r2, #28
   2cbd6:	4605      	mov	r5, r0
   2cbd8:	460c      	mov	r4, r1
   2cbda:	d456      	bmi.n	2cc8a <__sflush_r+0xbc>
   2cbdc:	684b      	ldr	r3, [r1, #4]
   2cbde:	2b00      	cmp	r3, #0
   2cbe0:	dc02      	bgt.n	2cbe8 <__sflush_r+0x1a>
   2cbe2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2cbe4:	2b00      	cmp	r3, #0
   2cbe6:	dd3d      	ble.n	2cc64 <__sflush_r+0x96>
   2cbe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2cbea:	2e00      	cmp	r6, #0
   2cbec:	d03a      	beq.n	2cc64 <__sflush_r+0x96>
   2cbee:	2300      	movs	r3, #0
   2cbf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2cbf4:	682f      	ldr	r7, [r5, #0]
   2cbf6:	6a21      	ldr	r1, [r4, #32]
   2cbf8:	602b      	str	r3, [r5, #0]
   2cbfa:	d025      	beq.n	2cc48 <__sflush_r+0x7a>
   2cbfc:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2cbfe:	89a3      	ldrh	r3, [r4, #12]
   2cc00:	0758      	lsls	r0, r3, #29
   2cc02:	d505      	bpl.n	2cc10 <__sflush_r+0x42>
   2cc04:	6863      	ldr	r3, [r4, #4]
   2cc06:	1ad2      	subs	r2, r2, r3
   2cc08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2cc0a:	b10b      	cbz	r3, 2cc10 <__sflush_r+0x42>
   2cc0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2cc0e:	1ad2      	subs	r2, r2, r3
   2cc10:	6a21      	ldr	r1, [r4, #32]
   2cc12:	2300      	movs	r3, #0
   2cc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2cc16:	4628      	mov	r0, r5
   2cc18:	47b0      	blx	r6
   2cc1a:	1c41      	adds	r1, r0, #1
   2cc1c:	d024      	beq.n	2cc68 <__sflush_r+0x9a>
   2cc1e:	2300      	movs	r3, #0
   2cc20:	6063      	str	r3, [r4, #4]
   2cc22:	6923      	ldr	r3, [r4, #16]
   2cc24:	6023      	str	r3, [r4, #0]
   2cc26:	89a3      	ldrh	r3, [r4, #12]
   2cc28:	04da      	lsls	r2, r3, #19
   2cc2a:	d500      	bpl.n	2cc2e <__sflush_r+0x60>
   2cc2c:	6560      	str	r0, [r4, #84]	; 0x54
   2cc2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2cc30:	602f      	str	r7, [r5, #0]
   2cc32:	b1b9      	cbz	r1, 2cc64 <__sflush_r+0x96>
   2cc34:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2cc38:	4299      	cmp	r1, r3
   2cc3a:	d002      	beq.n	2cc42 <__sflush_r+0x74>
   2cc3c:	4628      	mov	r0, r5
   2cc3e:	f7f7 fc09 	bl	24454 <_free_r>
   2cc42:	2300      	movs	r3, #0
   2cc44:	6363      	str	r3, [r4, #52]	; 0x34
   2cc46:	e00d      	b.n	2cc64 <__sflush_r+0x96>
   2cc48:	2301      	movs	r3, #1
   2cc4a:	4628      	mov	r0, r5
   2cc4c:	47b0      	blx	r6
   2cc4e:	1c46      	adds	r6, r0, #1
   2cc50:	4602      	mov	r2, r0
   2cc52:	d1d4      	bne.n	2cbfe <__sflush_r+0x30>
   2cc54:	682b      	ldr	r3, [r5, #0]
   2cc56:	2b00      	cmp	r3, #0
   2cc58:	d0d1      	beq.n	2cbfe <__sflush_r+0x30>
   2cc5a:	2b1d      	cmp	r3, #29
   2cc5c:	d001      	beq.n	2cc62 <__sflush_r+0x94>
   2cc5e:	2b16      	cmp	r3, #22
   2cc60:	d129      	bne.n	2ccb6 <__sflush_r+0xe8>
   2cc62:	602f      	str	r7, [r5, #0]
   2cc64:	2000      	movs	r0, #0
   2cc66:	e02d      	b.n	2ccc4 <__sflush_r+0xf6>
   2cc68:	682a      	ldr	r2, [r5, #0]
   2cc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2cc6e:	b142      	cbz	r2, 2cc82 <__sflush_r+0xb4>
   2cc70:	2a1d      	cmp	r2, #29
   2cc72:	d001      	beq.n	2cc78 <__sflush_r+0xaa>
   2cc74:	2a16      	cmp	r2, #22
   2cc76:	d120      	bne.n	2ccba <__sflush_r+0xec>
   2cc78:	2300      	movs	r3, #0
   2cc7a:	6063      	str	r3, [r4, #4]
   2cc7c:	6923      	ldr	r3, [r4, #16]
   2cc7e:	6023      	str	r3, [r4, #0]
   2cc80:	e7d5      	b.n	2cc2e <__sflush_r+0x60>
   2cc82:	6062      	str	r2, [r4, #4]
   2cc84:	6922      	ldr	r2, [r4, #16]
   2cc86:	6022      	str	r2, [r4, #0]
   2cc88:	e7ce      	b.n	2cc28 <__sflush_r+0x5a>
   2cc8a:	690f      	ldr	r7, [r1, #16]
   2cc8c:	2f00      	cmp	r7, #0
   2cc8e:	d0e9      	beq.n	2cc64 <__sflush_r+0x96>
   2cc90:	0793      	lsls	r3, r2, #30
   2cc92:	680e      	ldr	r6, [r1, #0]
   2cc94:	600f      	str	r7, [r1, #0]
   2cc96:	bf0c      	ite	eq
   2cc98:	694b      	ldreq	r3, [r1, #20]
   2cc9a:	2300      	movne	r3, #0
   2cc9c:	1bf6      	subs	r6, r6, r7
   2cc9e:	608b      	str	r3, [r1, #8]
   2cca0:	2e00      	cmp	r6, #0
   2cca2:	dddf      	ble.n	2cc64 <__sflush_r+0x96>
   2cca4:	4633      	mov	r3, r6
   2cca6:	463a      	mov	r2, r7
   2cca8:	6a21      	ldr	r1, [r4, #32]
   2ccaa:	4628      	mov	r0, r5
   2ccac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   2ccb0:	47e0      	blx	ip
   2ccb2:	2800      	cmp	r0, #0
   2ccb4:	dc07      	bgt.n	2ccc6 <__sflush_r+0xf8>
   2ccb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ccba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ccbe:	f04f 30ff 	mov.w	r0, #4294967295
   2ccc2:	81a3      	strh	r3, [r4, #12]
   2ccc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ccc6:	4407      	add	r7, r0
   2ccc8:	1a36      	subs	r6, r6, r0
   2ccca:	e7e9      	b.n	2cca0 <__sflush_r+0xd2>

0002cccc <__swhatbuf_r>:
   2cccc:	b570      	push	{r4, r5, r6, lr}
   2ccce:	460c      	mov	r4, r1
   2ccd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2ccd4:	b096      	sub	sp, #88	; 0x58
   2ccd6:	4615      	mov	r5, r2
   2ccd8:	2900      	cmp	r1, #0
   2ccda:	461e      	mov	r6, r3
   2ccdc:	da0c      	bge.n	2ccf8 <__swhatbuf_r+0x2c>
   2ccde:	89a3      	ldrh	r3, [r4, #12]
   2cce0:	2100      	movs	r1, #0
   2cce2:	f013 0f80 	tst.w	r3, #128	; 0x80
   2cce6:	bf14      	ite	ne
   2cce8:	2340      	movne	r3, #64	; 0x40
   2ccea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   2ccee:	2000      	movs	r0, #0
   2ccf0:	6031      	str	r1, [r6, #0]
   2ccf2:	602b      	str	r3, [r5, #0]
   2ccf4:	b016      	add	sp, #88	; 0x58
   2ccf6:	bd70      	pop	{r4, r5, r6, pc}
   2ccf8:	466a      	mov	r2, sp
   2ccfa:	f7fa f875 	bl	26de8 <_fstat_r>
   2ccfe:	2800      	cmp	r0, #0
   2cd00:	dbed      	blt.n	2ccde <__swhatbuf_r+0x12>
   2cd02:	9901      	ldr	r1, [sp, #4]
   2cd04:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   2cd08:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   2cd0c:	4259      	negs	r1, r3
   2cd0e:	4159      	adcs	r1, r3
   2cd10:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2cd14:	e7eb      	b.n	2ccee <__swhatbuf_r+0x22>

0002cd16 <_realloc_r>:
   2cd16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cd18:	4607      	mov	r7, r0
   2cd1a:	4615      	mov	r5, r2
   2cd1c:	460c      	mov	r4, r1
   2cd1e:	b921      	cbnz	r1, 2cd2a <_realloc_r+0x14>
   2cd20:	4611      	mov	r1, r2
   2cd22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2cd26:	f7f7 bbdf 	b.w	244e8 <_malloc_r>
   2cd2a:	b922      	cbnz	r2, 2cd36 <_realloc_r+0x20>
   2cd2c:	f7f7 fb92 	bl	24454 <_free_r>
   2cd30:	2400      	movs	r4, #0
   2cd32:	4620      	mov	r0, r4
   2cd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2cd36:	f000 f905 	bl	2cf44 <_malloc_usable_size_r>
   2cd3a:	42a8      	cmp	r0, r5
   2cd3c:	d2f9      	bcs.n	2cd32 <_realloc_r+0x1c>
   2cd3e:	4629      	mov	r1, r5
   2cd40:	4638      	mov	r0, r7
   2cd42:	f7f7 fbd1 	bl	244e8 <_malloc_r>
   2cd46:	4606      	mov	r6, r0
   2cd48:	2800      	cmp	r0, #0
   2cd4a:	d0f1      	beq.n	2cd30 <_realloc_r+0x1a>
   2cd4c:	4621      	mov	r1, r4
   2cd4e:	462a      	mov	r2, r5
   2cd50:	f7ff f9bc 	bl	2c0cc <memcpy>
   2cd54:	4621      	mov	r1, r4
   2cd56:	4638      	mov	r0, r7
   2cd58:	4634      	mov	r4, r6
   2cd5a:	f7f7 fb7b 	bl	24454 <_free_r>
   2cd5e:	e7e8      	b.n	2cd32 <_realloc_r+0x1c>

0002cd60 <_sungetc_r>:
   2cd60:	b538      	push	{r3, r4, r5, lr}
   2cd62:	1c4b      	adds	r3, r1, #1
   2cd64:	4614      	mov	r4, r2
   2cd66:	d103      	bne.n	2cd70 <_sungetc_r+0x10>
   2cd68:	f04f 35ff 	mov.w	r5, #4294967295
   2cd6c:	4628      	mov	r0, r5
   2cd6e:	bd38      	pop	{r3, r4, r5, pc}
   2cd70:	8993      	ldrh	r3, [r2, #12]
   2cd72:	b2cd      	uxtb	r5, r1
   2cd74:	f023 0320 	bic.w	r3, r3, #32
   2cd78:	8193      	strh	r3, [r2, #12]
   2cd7a:	6853      	ldr	r3, [r2, #4]
   2cd7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
   2cd7e:	b18a      	cbz	r2, 2cda4 <_sungetc_r+0x44>
   2cd80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2cd82:	429a      	cmp	r2, r3
   2cd84:	dd08      	ble.n	2cd98 <_sungetc_r+0x38>
   2cd86:	6823      	ldr	r3, [r4, #0]
   2cd88:	1e5a      	subs	r2, r3, #1
   2cd8a:	6022      	str	r2, [r4, #0]
   2cd8c:	f803 5c01 	strb.w	r5, [r3, #-1]
   2cd90:	6863      	ldr	r3, [r4, #4]
   2cd92:	3301      	adds	r3, #1
   2cd94:	6063      	str	r3, [r4, #4]
   2cd96:	e7e9      	b.n	2cd6c <_sungetc_r+0xc>
   2cd98:	4621      	mov	r1, r4
   2cd9a:	f000 f89c 	bl	2ced6 <__submore>
   2cd9e:	2800      	cmp	r0, #0
   2cda0:	d0f1      	beq.n	2cd86 <_sungetc_r+0x26>
   2cda2:	e7e1      	b.n	2cd68 <_sungetc_r+0x8>
   2cda4:	6921      	ldr	r1, [r4, #16]
   2cda6:	6822      	ldr	r2, [r4, #0]
   2cda8:	b141      	cbz	r1, 2cdbc <_sungetc_r+0x5c>
   2cdaa:	4291      	cmp	r1, r2
   2cdac:	d206      	bcs.n	2cdbc <_sungetc_r+0x5c>
   2cdae:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   2cdb2:	42a9      	cmp	r1, r5
   2cdb4:	d102      	bne.n	2cdbc <_sungetc_r+0x5c>
   2cdb6:	3a01      	subs	r2, #1
   2cdb8:	6022      	str	r2, [r4, #0]
   2cdba:	e7ea      	b.n	2cd92 <_sungetc_r+0x32>
   2cdbc:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   2cdc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2cdc4:	6363      	str	r3, [r4, #52]	; 0x34
   2cdc6:	2303      	movs	r3, #3
   2cdc8:	63a3      	str	r3, [r4, #56]	; 0x38
   2cdca:	4623      	mov	r3, r4
   2cdcc:	f803 5f46 	strb.w	r5, [r3, #70]!
   2cdd0:	6023      	str	r3, [r4, #0]
   2cdd2:	2301      	movs	r3, #1
   2cdd4:	e7de      	b.n	2cd94 <_sungetc_r+0x34>

0002cdd6 <__ssrefill_r>:
   2cdd6:	b510      	push	{r4, lr}
   2cdd8:	460c      	mov	r4, r1
   2cdda:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2cddc:	b169      	cbz	r1, 2cdfa <__ssrefill_r+0x24>
   2cdde:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2cde2:	4299      	cmp	r1, r3
   2cde4:	d001      	beq.n	2cdea <__ssrefill_r+0x14>
   2cde6:	f7f7 fb35 	bl	24454 <_free_r>
   2cdea:	2000      	movs	r0, #0
   2cdec:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2cdee:	6360      	str	r0, [r4, #52]	; 0x34
   2cdf0:	6063      	str	r3, [r4, #4]
   2cdf2:	b113      	cbz	r3, 2cdfa <__ssrefill_r+0x24>
   2cdf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2cdf6:	6023      	str	r3, [r4, #0]
   2cdf8:	bd10      	pop	{r4, pc}
   2cdfa:	6923      	ldr	r3, [r4, #16]
   2cdfc:	f04f 30ff 	mov.w	r0, #4294967295
   2ce00:	6023      	str	r3, [r4, #0]
   2ce02:	2300      	movs	r3, #0
   2ce04:	6063      	str	r3, [r4, #4]
   2ce06:	89a3      	ldrh	r3, [r4, #12]
   2ce08:	f043 0320 	orr.w	r3, r3, #32
   2ce0c:	81a3      	strh	r3, [r4, #12]
   2ce0e:	e7f3      	b.n	2cdf8 <__ssrefill_r+0x22>

0002ce10 <__sccl>:
   2ce10:	b570      	push	{r4, r5, r6, lr}
   2ce12:	780b      	ldrb	r3, [r1, #0]
   2ce14:	4604      	mov	r4, r0
   2ce16:	3801      	subs	r0, #1
   2ce18:	2b5e      	cmp	r3, #94	; 0x5e
   2ce1a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   2ce1e:	bf13      	iteet	ne
   2ce20:	1c4a      	addne	r2, r1, #1
   2ce22:	1c8a      	addeq	r2, r1, #2
   2ce24:	784b      	ldrbeq	r3, [r1, #1]
   2ce26:	2100      	movne	r1, #0
   2ce28:	bf08      	it	eq
   2ce2a:	2101      	moveq	r1, #1
   2ce2c:	f800 1f01 	strb.w	r1, [r0, #1]!
   2ce30:	42a8      	cmp	r0, r5
   2ce32:	d1fb      	bne.n	2ce2c <__sccl+0x1c>
   2ce34:	b90b      	cbnz	r3, 2ce3a <__sccl+0x2a>
   2ce36:	1e50      	subs	r0, r2, #1
   2ce38:	bd70      	pop	{r4, r5, r6, pc}
   2ce3a:	f081 0101 	eor.w	r1, r1, #1
   2ce3e:	4610      	mov	r0, r2
   2ce40:	54e1      	strb	r1, [r4, r3]
   2ce42:	4602      	mov	r2, r0
   2ce44:	f812 5b01 	ldrb.w	r5, [r2], #1
   2ce48:	2d2d      	cmp	r5, #45	; 0x2d
   2ce4a:	d005      	beq.n	2ce58 <__sccl+0x48>
   2ce4c:	2d5d      	cmp	r5, #93	; 0x5d
   2ce4e:	d016      	beq.n	2ce7e <__sccl+0x6e>
   2ce50:	2d00      	cmp	r5, #0
   2ce52:	d0f1      	beq.n	2ce38 <__sccl+0x28>
   2ce54:	462b      	mov	r3, r5
   2ce56:	e7f2      	b.n	2ce3e <__sccl+0x2e>
   2ce58:	7846      	ldrb	r6, [r0, #1]
   2ce5a:	2e5d      	cmp	r6, #93	; 0x5d
   2ce5c:	d0fa      	beq.n	2ce54 <__sccl+0x44>
   2ce5e:	42b3      	cmp	r3, r6
   2ce60:	dcf8      	bgt.n	2ce54 <__sccl+0x44>
   2ce62:	3002      	adds	r0, #2
   2ce64:	461a      	mov	r2, r3
   2ce66:	3201      	adds	r2, #1
   2ce68:	4296      	cmp	r6, r2
   2ce6a:	54a1      	strb	r1, [r4, r2]
   2ce6c:	dcfb      	bgt.n	2ce66 <__sccl+0x56>
   2ce6e:	1af2      	subs	r2, r6, r3
   2ce70:	1c5d      	adds	r5, r3, #1
   2ce72:	3a01      	subs	r2, #1
   2ce74:	42b3      	cmp	r3, r6
   2ce76:	bfa8      	it	ge
   2ce78:	2200      	movge	r2, #0
   2ce7a:	18ab      	adds	r3, r5, r2
   2ce7c:	e7e1      	b.n	2ce42 <__sccl+0x32>
   2ce7e:	4610      	mov	r0, r2
   2ce80:	e7da      	b.n	2ce38 <__sccl+0x28>

0002ce82 <_raise_r>:
   2ce82:	291f      	cmp	r1, #31
   2ce84:	b538      	push	{r3, r4, r5, lr}
   2ce86:	4605      	mov	r5, r0
   2ce88:	460c      	mov	r4, r1
   2ce8a:	d904      	bls.n	2ce96 <_raise_r+0x14>
   2ce8c:	2316      	movs	r3, #22
   2ce8e:	6003      	str	r3, [r0, #0]
   2ce90:	f04f 30ff 	mov.w	r0, #4294967295
   2ce94:	bd38      	pop	{r3, r4, r5, pc}
   2ce96:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2ce98:	b112      	cbz	r2, 2cea0 <_raise_r+0x1e>
   2ce9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2ce9e:	b94b      	cbnz	r3, 2ceb4 <_raise_r+0x32>
   2cea0:	4628      	mov	r0, r5
   2cea2:	f000 f816 	bl	2ced2 <_getpid_r>
   2cea6:	4622      	mov	r2, r4
   2cea8:	4601      	mov	r1, r0
   2ceaa:	4628      	mov	r0, r5
   2ceac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ceb0:	f7f9 bf88 	b.w	26dc4 <_kill_r>
   2ceb4:	2b01      	cmp	r3, #1
   2ceb6:	d00a      	beq.n	2cece <_raise_r+0x4c>
   2ceb8:	1c59      	adds	r1, r3, #1
   2ceba:	d103      	bne.n	2cec4 <_raise_r+0x42>
   2cebc:	2316      	movs	r3, #22
   2cebe:	6003      	str	r3, [r0, #0]
   2cec0:	2001      	movs	r0, #1
   2cec2:	e7e7      	b.n	2ce94 <_raise_r+0x12>
   2cec4:	2100      	movs	r1, #0
   2cec6:	4620      	mov	r0, r4
   2cec8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   2cecc:	4798      	blx	r3
   2cece:	2000      	movs	r0, #0
   2ced0:	e7e0      	b.n	2ce94 <_raise_r+0x12>

0002ced2 <_getpid_r>:
   2ced2:	f7fb bc3c 	b.w	2874e <_getpid>

0002ced6 <__submore>:
   2ced6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ceda:	460c      	mov	r4, r1
   2cedc:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2cede:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2cee2:	4299      	cmp	r1, r3
   2cee4:	d11a      	bne.n	2cf1c <__submore+0x46>
   2cee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2ceea:	f7f7 fafd 	bl	244e8 <_malloc_r>
   2ceee:	b918      	cbnz	r0, 2cef8 <__submore+0x22>
   2cef0:	f04f 30ff 	mov.w	r0, #4294967295
   2cef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2cefc:	6360      	str	r0, [r4, #52]	; 0x34
   2cefe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   2cf02:	63a3      	str	r3, [r4, #56]	; 0x38
   2cf04:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2cf08:	7083      	strb	r3, [r0, #2]
   2cf0a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2cf0e:	7043      	strb	r3, [r0, #1]
   2cf10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2cf14:	7003      	strb	r3, [r0, #0]
   2cf16:	6020      	str	r0, [r4, #0]
   2cf18:	2000      	movs	r0, #0
   2cf1a:	e7eb      	b.n	2cef4 <__submore+0x1e>
   2cf1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   2cf1e:	0077      	lsls	r7, r6, #1
   2cf20:	463a      	mov	r2, r7
   2cf22:	f7ff fef8 	bl	2cd16 <_realloc_r>
   2cf26:	4605      	mov	r5, r0
   2cf28:	2800      	cmp	r0, #0
   2cf2a:	d0e1      	beq.n	2cef0 <__submore+0x1a>
   2cf2c:	eb00 0806 	add.w	r8, r0, r6
   2cf30:	4601      	mov	r1, r0
   2cf32:	4632      	mov	r2, r6
   2cf34:	4640      	mov	r0, r8
   2cf36:	f7ff f8c9 	bl	2c0cc <memcpy>
   2cf3a:	f8c4 8000 	str.w	r8, [r4]
   2cf3e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   2cf42:	e7e9      	b.n	2cf18 <__submore+0x42>

0002cf44 <_malloc_usable_size_r>:
   2cf44:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2cf48:	1f18      	subs	r0, r3, #4
   2cf4a:	2b00      	cmp	r3, #0
   2cf4c:	bfbc      	itt	lt
   2cf4e:	580b      	ldrlt	r3, [r1, r0]
   2cf50:	18c0      	addlt	r0, r0, r3
   2cf52:	4770      	bx	lr
